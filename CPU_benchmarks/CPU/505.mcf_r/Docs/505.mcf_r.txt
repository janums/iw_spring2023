                                   505.mcf_r
                       SPEC CPU2017 Benchmark Description

  Benchmark Name

   505.mcf_r

  Benchmark Author

   Dr. Andreas Loebel <loebel [at] zib.de>

 Dr. Andreas Loebel
 Konrad-Zuse-Zentrum Berlin (ZIB)
 Takustr. 7
 D-14195 Berlin, Germany

 Phone:     +49 (0)30 841 85 - 239
 Fax:                        - 269
 Secretary:                  - 208

  Benchmark Program General Category

   Combinatorial optimization / Single-depot vehicle scheduling

  Benchmark Description

   505.mcf_r is a benchmark which is derived from MCF, a program used for
   single-depot vehicle scheduling in public mass transportation. The program
   is written in C. The benchmark version uses almost exclusively integer
   arithmetic.

   The program is designed for the solution of single-depot vehicle
   scheduling (sub-)problems occurring in the planning process of public
   transportation companies. It considers one single depot and a homogeneous
   vehicle fleet. Based on a line plan and service frequencies, so-called
   timetabled trips with fixed departure/arrival locations and times are
   derived. Each of these timetabled trips has to be serviced by exactly one
   vehicle. The links between these trips are so-called dead-head trips. In
   addition, there are pull-out and pull-in trips for leaving and entering
   the depot.

   Cost coefficients are given for all dead-head, pull-out, and pull-in
   trips. It is the task to schedule all timetabled trips to so-called blocks
   such that the number of necessary vehicles is as small as possible and,
   subordinate, the operational costs among all minimal fleet solutions are
   minimized.

   For simplification in the benchmark test, we assume that each pull-out and
   pull-in trip is defined implicitly with a duration of 15 minutes and a
   cost coefficient of 15.

   For the considered single-depot case, the problem can be formulated as a
   large-scale minimum-cost flow problem that we solve with a network simplex
   algorithm accelerated with a column generation. The core of the benchmark
   505.mcf_r is the network simplex code "MCF Version 1.2 -- A network
   simplex implementation", For this benchmark, MCF is embedded in the column
   generation process.

   The network simplex algorithm is a specialized version of the well known
   simplex algorithm for network flow problems. The linear algebra of the
   general algorithm is replaced by simple network operations such as finding
   cycles or modifying spanning trees that can be performed very quickly. The
   main work of our network simplex implementation is pointer and integer
   arithmetic.

   Because there have been no significant errors or changes during the years
   2000 - 2004, most of the source code of the CPU2000 benchmark 181.mcf was
   not changed in the transition to CPU2017 benchmark 505.mcf_r. However,
   several central type definitions were changed for the CPU2017 version by
   the author:

     * Whenever possible, long typed attributes of struct node and struct arc
       are replaced by 32 bit integer, for example if used as boolean type.
       Pointers remain unaffected and map to 32 or 64 bit long, depending on
       the compilation model, to ensure compatibility to 64 bit systems for
       truly large scale problem instances.

     * To reduce cache misses and accelerate program performance somewhat,
       the elements of struct node and struct arc, respectively, are
       rearranged according to the proposals made in "Memory Profiling using
       Hardware Counters" by Marty Itzkowitz, Brian Wylie, Christopher Aoki,
       and Nicolai Kosche
       ([1]http://www.sc-conference.org/sc2003/paperpdfs/pap182.pdf)

  Input Description

   The input file contains line by line

     * the number of timetabled and dead-head trips (first line),
     * for each timetabled trip its starting and ending time,
     * for each dead-head trip its starting and ending timetabled trip and
       its cost.

   Worst case execution time is pseudo-polynomial in the number timetabled
   and dead-head trips and in the amount of the maximal cost coefficient. The
   expected execution time, however, is in the order of a low-order
   polynomial.

  Output Description

   The benchmark writes to two output files, inp.out and mcf.out.

     * inp.out contains log information and a checksum
     * mcf.out contains check output values describing an optimal schedule
       computed by the program.

  Programming Language

   ANSI C, mathematical library (libm) required.

  Known portability issues

   The header source file "prototyp.h", which is (indirectly) required by all
   modules, contains the lines

   #ifndef _PROTO_
   #if defined(__STDC__) || defined(__cplusplus) || defined(WANT_STDC_PROTO)
   #define _PROTO_( args ) args
   #else
   #define _PROTO_( args )
   #endif
   #endif

   All C functions (subroutines) are defined in the original program with and
   without function prototypes, e.g.:

 /* function defined externally: */

   extern long suspend_impl _PROTO_(( network_t *, cost_t, long ));

 /* function defined in this module: */

   #ifdef _PROTO_
   long resize_prob( network_t *net )
   #else
   long resize_prob( net )
     network_t *net;
   #endif

  Sources and Licensing

   MCF was licensed directly to SPEC by the authors. SPEC modified qsort and
   added win32/inttypes.h, both under BSD license.

   Please see details in the document [2]SPEC CPU2017 Licenses.

  Other information, WWW Resource

   Background information about the vehicle scheduling problem can be found
   in the author's Ph.D. thesis "Optimal Vehicle scheduling in public
   transit", which is available via WWW at the author's homepage
   [3]www.zib.de/loebel or at
   ftp://ftp.zib.de/pub/zib-publications/books/Loebel.disser.ps.

   The work horse in the benchmark 505.mcf_r is the code "MCF Version X.X --
   A network simplex implementation", which is available for academic use
   free of charge via WWW at www.zib.de. Information about MCF is available
   in [4]http://www.zib.de/opt-long_projects/Software/Mcf/

   An excellent text book about the network simplex algorithm and network
   flow in general is Ahuja, Magnanti, and Orlin: "Network Flows: Theory,
   Algorithms, and Applications", Prentice-Hall, Inc., Englewood Cliffs, New
   Jersey, 1993.

   MCF had originally been developed for application in the public
   transportation systems of Hamburg and Berlin (BVG). For BVG, bus
   scheduling was optimized in 1998 on the basis of MCF; BVG also owns usage
   rights to the software that has been integrated into their planning system
   BERTA.

   The MCF method for vehicle scheduling later has been integrated, into the
   vehicle and personnel planning system MICROBUS. This system in now
   marketed by IVU Traffic Technologies AG ([5]http://www.ivu.de) to public
   transportation companies; the bus service divions of the German and the
   Austrian railway companies are among the licencees.

   Compared with the original and the commercial versions, the benchmark
   version has been simplified in the I/O area, to keep the I/O content
   small. The main algorithmic part, however, has been retained.

   Last updated: $Date: 2017-05-01 13:34:29 -0400 (Mon, 01 May 2017) $

References

   Visible links
   1. http://www.sc-conference.org/sc2003/paperpdfs/pap182.pdf
   2. https://www.spec.org/cpu2017/Docs/licenses.html#bmk505.mcf_r
   3. http://www.zib.de/loebel
   4. http://www.zib.de/opt-long_projects/Software/Mcf/
   5. http://www.ivu.de/
