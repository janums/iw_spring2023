; ModuleID = 'tree-vrp.bc'
source_filename = "tree-vrp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.value_range_d = type { i32, %union.tree_node*, %union.tree_node*, %struct.bitmap_head_def* }
%struct.assert_locus_d = type { %struct.basic_block_def*, %struct.edge_def*, %struct.gimple_stmt_iterator, i32, %union.tree_node*, %union.tree_node*, %struct.assert_locus_d* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.VEC_switch_update_heap = type { %struct.VEC_switch_update_base }
%struct.VEC_switch_update_base = type { i32, i32, [1 x %struct.switch_update] }
%struct.switch_update = type { %union.gimple_statement_d*, %union.tree_node* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.tree_vec = type { %struct.tree_common, i32, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.prop_value_d = type { i32, %union.tree_node* }
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.pointer_set_t = type opaque

@stdout = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@global_trees = external dso_local local_unnamed_addr global [131 x %union.tree_node*], align 16
@.str = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"UNDEFINED\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"%s[\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"~\00", align 1
@.str.4 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"-INF(OVF)\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"-INF\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"+INF(OVF)\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"+INF\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"  EQUIVALENCES: { \00", align 1
@cfun = external dso_local local_unnamed_addr global %struct.function*, align 8
@.str.12 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.13 = private unnamed_addr constant [16 x i8] c"} (%u elements)\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"VARYING\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"INVALID RANGE\00", align 1
@stderr = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.16 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@vr_value = internal unnamed_addr global %struct.value_range_d** null, align 8, !dbg !0
@.str.17 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.str.18 = private unnamed_addr constant [31 x i8] c"Assertions to be inserted for \00", align 1
@asserts_for = internal unnamed_addr global %struct.assert_locus_d** null, align 8, !dbg !2165
@.str.19 = private unnamed_addr constant [2 x i8] c"\09\00", align 1
@.str.20 = private unnamed_addr constant [9 x i8] c"\0A\09BB #%d\00", align 1
@.str.21 = private unnamed_addr constant [14 x i8] c"\0A\09EDGE %d->%d\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"\0A\09PREDICATE: \00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@tree_code_name = external dso_local local_unnamed_addr constant [0 x i8*], align 8
@.str.24 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.25 = private unnamed_addr constant [31 x i8] c"\0AASSERT_EXPRs to be inserted\0A\0A\00", align 1
@need_assert_for = internal unnamed_addr global %struct.bitmap_head_def* null, align 8, !dbg !2163
@.str.26 = private unnamed_addr constant [4 x i8] c"vrp\00", align 1
@pass_vrp = dso_local local_unnamed_addr global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i32 0, i32 0), i8 ()* @gate_vrp, i32 ()* @execute_vrp, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 52, i32 32, i32 0, i32 0, i32 0, i32 2087 } }, align 8, !dbg !2135
@.str.27 = private unnamed_addr constant [11 x i8] c"tree-vrp.c\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@current_function_decl = external dso_local local_unnamed_addr global %union.tree_node*, align 8
@.str.29 = private unnamed_addr constant [8 x i8] c"nonnull\00", align 1
@flag_wrapv = external dso_local local_unnamed_addr global i32, align 4
@flag_trapv = external dso_local local_unnamed_addr global i32, align 4
@flag_strict_overflow = external dso_local local_unnamed_addr global i32, align 4
@tree_code_type = external dso_local local_unnamed_addr constant [0 x i32], align 4
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@flag_tree_vrp = external dso_local local_unnamed_addr global i32, align 4
@to_remove_edges = internal global %struct.VEC_edge_heap* null, align 8, !dbg !2169
@to_update_switch_stmts = internal global %struct.VEC_switch_update_heap* null, align 8, !dbg !2171
@dump_file = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@dump_flags = external dso_local local_unnamed_addr global i32, align 4
@.str.30 = private unnamed_addr constant [40 x i8] c"\0ASSA form after inserting ASSERT_EXPRs\0A\00", align 1
@live = internal unnamed_addr global %struct.simple_bitmap_def** null, align 8, !dbg !2167
@gimple_ops_offset_ = external dso_local local_unnamed_addr constant [0 x i64], align 8
@.str.31 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local local_unnamed_addr constant [0 x i32], align 4
@.str.32 = private unnamed_addr constant [19 x i8] c"Adding assert for \00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c" from \00", align 1
@.str.34 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@flag_delete_null_pointer_checks = external dso_local local_unnamed_addr global i32, align 4
@gimple_rhs_class_table = external dso_local local_unnamed_addr constant [0 x i8], align 1
@flag_var_tracking_assignments = external dso_local local_unnamed_addr global i32, align 4
@.str.35 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.36 = private unnamed_addr constant [43 x i8] c"Number of ASSERT_EXPR expressions inserted\00", align 1
@vr_phi_edge_counts = internal unnamed_addr global i32* null, align 8, !dbg !2173
@.str.37 = private unnamed_addr constant [22 x i8] c"\0AVisiting statement:\0A\00", align 1
@.str.38 = private unnamed_addr constant [21 x i8] c"Found new range for \00", align 1
@compare_names.s_obstack = internal unnamed_addr global %struct.bitmap_obstack* null, align 8, !dbg !2175
@compare_names.s_e1 = internal unnamed_addr global %struct.bitmap_head_def* null, align 8, !dbg !2210
@compare_names.s_e2 = internal unnamed_addr global %struct.bitmap_head_def* null, align 8, !dbg !2212
@.str.39 = private unnamed_addr constant [39 x i8] c"\0AVisiting conditional with predicate: \00", align 1
@.str.40 = private unnamed_addr constant [20 x i8] c"\0AWith known ranges\0A\00", align 1
@.str.41 = private unnamed_addr constant [84 x i8] c"\0AIgnoring predicate evaluation because it assumes that signed overflow is undefined\00", align 1
@.str.42 = private unnamed_addr constant [26 x i8] c"\0APredicate evaluates to: \00", align 1
@.str.43 = private unnamed_addr constant [12 x i8] c"DON'T KNOW\0A\00", align 1
@.str.44 = private unnamed_addr constant [42 x i8] c"\0AVisiting switch expression with operand \00", align 1
@.str.45 = private unnamed_addr constant [19 x i8] c" with known range \00", align 1
@.str.46 = private unnamed_addr constant [43 x i8] c"  not a single destination for this range\0A\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"  will take edge to \00", align 1
@.str.48 = private unnamed_addr constant [21 x i8] c"\0AVisiting PHI node: \00", align 1
@.str.49 = private unnamed_addr constant [43 x i8] c"\0A    Argument #%d (%d -> %d %sexecutable)\0A\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"not \00", align 1
@.str.51 = private unnamed_addr constant [10 x i8] c"\0A\09Value: \00", align 1
@.str.52 = private unnamed_addr constant [48 x i8] c": loop information indicates does not overflow\0A\00", align 1
@.str.53 = private unnamed_addr constant [27 x i8] c"\0AValue ranges after VRP:\0A\0A\00", align 1
@warn_array_bounds = external dso_local local_unnamed_addr global i32, align 4
@.str.54 = private unnamed_addr constant [19 x i8] c"Folding predicate \00", align 1
@.str.55 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.56 = private unnamed_addr constant [81 x i8] c"assuming signed overflow does not occur when simplifying conditional to constant\00", align 1
@.str.57 = private unnamed_addr constant [69 x i8] c"assuming signed overflow does not occur when simplifying conditional\00", align 1
@warn_strict_overflow = external dso_local local_unnamed_addr global i32, align 4
@input_location = external dso_local local_unnamed_addr global i32, align 4
@.str.58 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@warn_type_limits = external dso_local local_unnamed_addr global i32, align 4
@.str.59 = private unnamed_addr constant [58 x i8] c"comparison always false due to limited range of data type\00", align 1
@.str.60 = private unnamed_addr constant [57 x i8] c"comparison always true due to limited range of data type\00", align 1
@.str.61 = private unnamed_addr constant [76 x i8] c"assuming signed overflow does not occur when simplifying && or || to & or |\00", align 1
@.str.62 = private unnamed_addr constant [86 x i8] c"assuming signed overflow does not occur when simplifying ==, != or ! to identity or ^\00", align 1
@.str.63 = private unnamed_addr constant [92 x i8] c"assuming signed overflow does not occur when simplifying %</%> or %<%%%> to %<>>%> or %<&%>\00", align 1
@.str.64 = private unnamed_addr constant [88 x i8] c"assuming signed overflow does not occur when simplifying %<abs (X)%> to %<X%> or %<-X%>\00", align 1
@.str.65 = private unnamed_addr constant [23 x i8] c"Simplified relational \00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c" into \00", align 1
@.str.67 = private unnamed_addr constant [33 x i8] c"removing unreachable case label\0A\00", align 1
@.str.68 = private unnamed_addr constant [40 x i8] c"array subscript is outside array bounds\00", align 1
@.str.69 = private unnamed_addr constant [38 x i8] c"array subscript is above array bounds\00", align 1
@.str.70 = private unnamed_addr constant [38 x i8] c"array subscript is below array bounds\00", align 1
@stack = internal global %struct.VEC_tree_heap* null, align 8, !dbg !2214

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @vprintf(i8* noalias %__fmt, %struct.__va_list_tag* %__arg) local_unnamed_addr #0 !dbg !2220 {
entry:
  call void @llvm.dbg.value(metadata i8* %__fmt, metadata !2233, metadata !DIExpression()), !dbg !2235
  call void @llvm.dbg.value(metadata %struct.__va_list_tag* %__arg, metadata !2234, metadata !DIExpression()), !dbg !2235
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2236
  %call = tail call i32 @vfprintf(%struct._IO_FILE* %0, i8* %__fmt, %struct.__va_list_tag* %__arg) #6, !dbg !2237
  ret i32 %call, !dbg !2238
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 !dbg !2239 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !2243
  %call = tail call i32 @getc(%struct._IO_FILE* %0) #6, !dbg !2244
  ret i32 %call, !dbg !2245
}

declare dso_local i32 @getc(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fgetc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !2246 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !2301, metadata !DIExpression()), !dbg !2302
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !2303
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !2303
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !2303
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !2303
  %cmp = icmp uge i8* %0, %1, !dbg !2303
  %conv1 = zext i1 %cmp to i64, !dbg !2303
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2303
  %tobool = icmp eq i64 %expval, 0, !dbg !2303
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2303

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !2303
  br label %cond.end, !dbg !2303

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2303
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !2303
  %2 = load i8, i8* %0, align 1, !dbg !2303
  %conv3 = zext i8 %2 to i32, !dbg !2303
  br label %cond.end, !dbg !2303

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !2303
  ret i32 %cond, !dbg !2304
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #3

declare dso_local i32 @__uflow(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !2305 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !2307, metadata !DIExpression()), !dbg !2308
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !2309
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !2309
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !2309
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !2309
  %cmp = icmp uge i8* %0, %1, !dbg !2309
  %conv1 = zext i1 %cmp to i64, !dbg !2309
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2309
  %tobool = icmp eq i64 %expval, 0, !dbg !2309
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2309

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !2309
  br label %cond.end, !dbg !2309

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2309
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !2309
  %2 = load i8, i8* %0, align 1, !dbg !2309
  %conv3 = zext i8 %2 to i32, !dbg !2309
  br label %cond.end, !dbg !2309

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !2309
  ret i32 %cond, !dbg !2310
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #0 !dbg !2311 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !2312
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 1, !dbg !2312
  %1 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !2312
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 2, !dbg !2312
  %2 = load i8*, i8** %_IO_read_end, align 8, !dbg !2312
  %cmp = icmp uge i8* %1, %2, !dbg !2312
  %conv1 = zext i1 %cmp to i64, !dbg !2312
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2312
  %tobool = icmp eq i64 %expval, 0, !dbg !2312
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2312

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %0) #6, !dbg !2312
  br label %cond.end, !dbg !2312

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !2312
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !2312
  %3 = load i8, i8* %1, align 1, !dbg !2312
  %conv3 = zext i8 %3 to i32, !dbg !2312
  br label %cond.end, !dbg !2312

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !2312
  ret i32 %cond, !dbg !2313
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar(i32 %__c) local_unnamed_addr #0 !dbg !2314 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2318, metadata !DIExpression()), !dbg !2319
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2320
  %call = tail call i32 @putc(i32 %__c, %struct._IO_FILE* %0) #6, !dbg !2321
  ret i32 %call, !dbg !2322
}

declare dso_local i32 @putc(i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fputc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2323 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2327, metadata !DIExpression()), !dbg !2329
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2328, metadata !DIExpression()), !dbg !2329
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !2330
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2330
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !2330
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !2330
  %cmp = icmp uge i8* %0, %1, !dbg !2330
  %conv1 = zext i1 %cmp to i64, !dbg !2330
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2330
  %tobool = icmp eq i64 %expval, 0, !dbg !2330
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2330

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2330
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !2330
  br label %cond.end, !dbg !2330

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !2330
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2330
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2330
  store i8 %conv2, i8* %0, align 1, !dbg !2330
  %conv6 = and i32 %__c, 255, !dbg !2330
  br label %cond.end, !dbg !2330

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2330
  ret i32 %cond, !dbg !2331
}

declare dso_local i32 @__overflow(%struct._IO_FILE*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2332 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2334, metadata !DIExpression()), !dbg !2336
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2335, metadata !DIExpression()), !dbg !2336
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !2337
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2337
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !2337
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !2337
  %cmp = icmp uge i8* %0, %1, !dbg !2337
  %conv1 = zext i1 %cmp to i64, !dbg !2337
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2337
  %tobool = icmp eq i64 %expval, 0, !dbg !2337
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2337

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2337
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !2337
  br label %cond.end, !dbg !2337

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !2337
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2337
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2337
  store i8 %conv2, i8* %0, align 1, !dbg !2337
  %conv6 = and i32 %__c, 255, !dbg !2337
  br label %cond.end, !dbg !2337

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2337
  ret i32 %cond, !dbg !2338
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar_unlocked(i32 %__c) local_unnamed_addr #0 !dbg !2339 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2341, metadata !DIExpression()), !dbg !2342
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2343
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 5, !dbg !2343
  %1 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2343
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 6, !dbg !2343
  %2 = load i8*, i8** %_IO_write_end, align 8, !dbg !2343
  %cmp = icmp uge i8* %1, %2, !dbg !2343
  %conv1 = zext i1 %cmp to i64, !dbg !2343
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2343
  %tobool = icmp eq i64 %expval, 0, !dbg !2343
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2343

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2343
  %call = tail call i32 @__overflow(%struct._IO_FILE* %0, i32 %conv3) #6, !dbg !2343
  br label %cond.end, !dbg !2343

cond.false:                                       ; preds = %entry
  %conv4 = trunc i32 %__c to i8, !dbg !2343
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !2343
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2343
  store i8 %conv4, i8* %1, align 1, !dbg !2343
  %conv6 = and i32 %__c, 255, !dbg !2343
  br label %cond.end, !dbg !2343

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2343
  ret i32 %cond, !dbg !2344
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @getline(i8** %__lineptr, i64* %__n, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2345 {
entry:
  call void @llvm.dbg.value(metadata i8** %__lineptr, metadata !2351, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata i64* %__n, metadata !2352, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2353, metadata !DIExpression()), !dbg !2354
  %call = tail call i64 @__getdelim(i8** %__lineptr, i64* %__n, i32 10, %struct._IO_FILE* %__stream) #6, !dbg !2355
  ret i64 %call, !dbg !2356
}

declare dso_local i64 @__getdelim(i8**, i64*, i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @feof_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2357 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2359, metadata !DIExpression()), !dbg !2360
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !2361
  %0 = load i32, i32* %_flags, align 8, !dbg !2361
  %and = lshr i32 %0, 4, !dbg !2361
  %and.lobit = and i32 %and, 1, !dbg !2361
  ret i32 %and.lobit, !dbg !2362
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @ferror_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2363 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2365, metadata !DIExpression()), !dbg !2366
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !2367
  %0 = load i32, i32* %_flags, align 8, !dbg !2367
  %and = lshr i32 %0, 5, !dbg !2367
  %and.lobit = and i32 %and, 1, !dbg !2367
  ret i32 %and.lobit, !dbg !2368
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @tolower(i32 %__c) local_unnamed_addr #0 !dbg !2369 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2372, metadata !DIExpression()), !dbg !2373
  %__c.off = add i32 %__c, 128, !dbg !2374
  %0 = icmp ult i32 %__c.off, 384, !dbg !2374
  br i1 %0, label %cond.true, label %cond.end, !dbg !2374

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_tolower_loc() #6, !dbg !2375
  %1 = load i32*, i32** %call, align 8, !dbg !2376
  %idxprom = sext i32 %__c to i64, !dbg !2377
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !2377
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2377
  br label %cond.end, !dbg !2378

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !2378
  ret i32 %cond, !dbg !2379
}

declare dso_local i32** @__ctype_tolower_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @toupper(i32 %__c) local_unnamed_addr #0 !dbg !2380 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2382, metadata !DIExpression()), !dbg !2383
  %__c.off = add i32 %__c, 128, !dbg !2384
  %0 = icmp ult i32 %__c.off, 384, !dbg !2384
  br i1 %0, label %cond.true, label %cond.end, !dbg !2384

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_toupper_loc() #6, !dbg !2385
  %1 = load i32*, i32** %call, align 8, !dbg !2386
  %idxprom = sext i32 %__c to i64, !dbg !2387
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !2387
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2387
  br label %cond.end, !dbg !2388

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !2388
  ret i32 %cond, !dbg !2389
}

declare dso_local i32** @__ctype_toupper_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @atoi(i8* %__nptr) local_unnamed_addr #0 !dbg !2390 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2395, metadata !DIExpression()), !dbg !2396
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !2397
  %conv = trunc i64 %call to i32, !dbg !2398
  ret i32 %conv, !dbg !2399
}

declare dso_local i64 @strtol(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atol(i8* %__nptr) local_unnamed_addr #0 !dbg !2400 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2404, metadata !DIExpression()), !dbg !2405
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !2406
  ret i64 %call, !dbg !2407
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atoll(i8* %__nptr) local_unnamed_addr #0 !dbg !2408 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2413, metadata !DIExpression()), !dbg !2414
  %call = tail call i64 @strtoll(i8* %__nptr, i8** null, i32 10) #6, !dbg !2415
  ret i64 %call, !dbg !2416
}

declare dso_local i64 @strtoll(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i8* @bsearch(i8* %__key, i8* %__base, i64 %__nmemb, i64 %__size, i32 (i8*, i8*)* %__compar) local_unnamed_addr #0 !dbg !2417 {
entry:
  call void @llvm.dbg.value(metadata i8* %__key, metadata !2423, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.value(metadata i8* %__base, metadata !2424, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !2425, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.value(metadata i64 %__size, metadata !2426, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.value(metadata i32 (i8*, i8*)* %__compar, metadata !2427, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.value(metadata i64 0, metadata !2428, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !2429, metadata !DIExpression()), !dbg !2433
  br label %while.cond, !dbg !2434

while.cond:                                       ; preds = %if.end6, %entry
  %__l.0 = phi i64 [ 0, %entry ], [ %__l.1, %if.end6 ], !dbg !2435
  %__u.0 = phi i64 [ %__nmemb, %entry ], [ %__u.1, %if.end6 ], !dbg !2433
  call void @llvm.dbg.value(metadata i64 %__u.0, metadata !2429, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.value(metadata i64 %__l.0, metadata !2428, metadata !DIExpression()), !dbg !2433
  %cmp = icmp ult i64 %__l.0, %__u.0, !dbg !2436
  br i1 %cmp, label %while.body, label %cleanup, !dbg !2434

while.body:                                       ; preds = %while.cond
  %add = add i64 %__l.0, %__u.0, !dbg !2437
  %div = lshr i64 %add, 1, !dbg !2439
  call void @llvm.dbg.value(metadata i64 %div, metadata !2430, metadata !DIExpression()), !dbg !2433
  %mul = mul i64 %div, %__size, !dbg !2440
  %add.ptr = getelementptr inbounds i8, i8* %__base, i64 %mul, !dbg !2441
  call void @llvm.dbg.value(metadata i8* %add.ptr, metadata !2431, metadata !DIExpression()), !dbg !2433
  %call = tail call i32 %__compar(i8* %__key, i8* %add.ptr) #6, !dbg !2442
  call void @llvm.dbg.value(metadata i32 %call, metadata !2432, metadata !DIExpression()), !dbg !2433
  %cmp1 = icmp slt i32 %call, 0, !dbg !2443
  br i1 %cmp1, label %if.end6, label %if.else, !dbg !2445

if.else:                                          ; preds = %while.body
  %cmp2 = icmp eq i32 %call, 0, !dbg !2446
  br i1 %cmp2, label %cleanup, label %if.then3, !dbg !2448

if.then3:                                         ; preds = %if.else
  %add4 = add nuw i64 %div, 1, !dbg !2449
  call void @llvm.dbg.value(metadata i64 %add4, metadata !2428, metadata !DIExpression()), !dbg !2433
  br label %if.end6

if.end6:                                          ; preds = %while.body, %if.then3
  %__l.1 = phi i64 [ %add4, %if.then3 ], [ %__l.0, %while.body ], !dbg !2433
  %__u.1 = phi i64 [ %__u.0, %if.then3 ], [ %div, %while.body ], !dbg !2433
  call void @llvm.dbg.value(metadata i64 %__u.1, metadata !2429, metadata !DIExpression()), !dbg !2433
  call void @llvm.dbg.value(metadata i64 %__l.1, metadata !2428, metadata !DIExpression()), !dbg !2433
  br label %while.cond, !dbg !2434, !llvm.loop !2450

cleanup:                                          ; preds = %if.else, %while.cond
  %retval.0 = phi i8* [ %add.ptr, %if.else ], [ null, %while.cond ], !dbg !2433
  ret i8* %retval.0, !dbg !2452
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: inlinehint nounwind uwtable
define dso_local double @atof(i8* %__nptr) local_unnamed_addr #0 !dbg !2453 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2459, metadata !DIExpression()), !dbg !2460
  %call = tail call double @strtod(i8* %__nptr, i8** null) #6, !dbg !2461
  ret double %call, !dbg !2462
}

declare dso_local double @strtod(i8*, i8**) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoimax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2463 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !2472, metadata !DIExpression()), !dbg !2475
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !2473, metadata !DIExpression()), !dbg !2475
  call void @llvm.dbg.value(metadata i32 %base, metadata !2474, metadata !DIExpression()), !dbg !2475
  %call = tail call i64 @__strtol_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !2476
  ret i64 %call, !dbg !2477
}

declare dso_local i64 @__strtol_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoumax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2478 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !2484, metadata !DIExpression()), !dbg !2487
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !2485, metadata !DIExpression()), !dbg !2487
  call void @llvm.dbg.value(metadata i32 %base, metadata !2486, metadata !DIExpression()), !dbg !2487
  %call = tail call i64 @__strtoul_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !2488
  ret i64 %call, !dbg !2489
}

declare dso_local i64 @__strtoul_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoimax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2490 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !2501, metadata !DIExpression()), !dbg !2504
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !2502, metadata !DIExpression()), !dbg !2504
  call void @llvm.dbg.value(metadata i32 %base, metadata !2503, metadata !DIExpression()), !dbg !2504
  %call = tail call i64 @__wcstol_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !2505
  ret i64 %call, !dbg !2506
}

declare dso_local i64 @__wcstol_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoumax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2507 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !2511, metadata !DIExpression()), !dbg !2514
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !2512, metadata !DIExpression()), !dbg !2514
  call void @llvm.dbg.value(metadata i32 %base, metadata !2513, metadata !DIExpression()), !dbg !2514
  %call = tail call i64 @__wcstoul_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !2515
  ret i64 %call, !dbg !2516
}

declare dso_local i64 @__wcstoul_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2517 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2557, metadata !DIExpression()), !dbg !2559
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2558, metadata !DIExpression()), !dbg !2559
  %call = tail call i32 @__xstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !2560
  ret i32 %call, !dbg !2561
}

declare dso_local i32 @__xstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2562 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2564, metadata !DIExpression()), !dbg !2566
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2565, metadata !DIExpression()), !dbg !2566
  %call = tail call i32 @__lxstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !2567
  ret i32 %call, !dbg !2568
}

declare dso_local i32 @__lxstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat(i32 %__fd, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2569 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2573, metadata !DIExpression()), !dbg !2575
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2574, metadata !DIExpression()), !dbg !2575
  %call = tail call i32 @__fxstat(i32 1, i32 %__fd, %struct.stat* %__statbuf) #6, !dbg !2576
  ret i32 %call, !dbg !2577
}

declare dso_local i32 @__fxstat(i32, i32, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat(i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2578 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2582, metadata !DIExpression()), !dbg !2586
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2583, metadata !DIExpression()), !dbg !2586
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2584, metadata !DIExpression()), !dbg !2586
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2585, metadata !DIExpression()), !dbg !2586
  %call = tail call i32 @__fxstatat(i32 1, i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) #6, !dbg !2587
  ret i32 %call, !dbg !2588
}

declare dso_local i32 @__fxstatat(i32, i32, i8*, %struct.stat*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknod(i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2589 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2593, metadata !DIExpression()), !dbg !2596
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2594, metadata !DIExpression()), !dbg !2596
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2595, metadata !DIExpression()), !dbg !2596
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2595, metadata !DIExpression(DW_OP_deref)), !dbg !2596
  %call = call i32 @__xmknod(i32 0, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !2597
  ret i32 %call, !dbg !2598
}

declare dso_local i32 @__xmknod(i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknodat(i32 %__fd, i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2599 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2603, metadata !DIExpression()), !dbg !2607
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2604, metadata !DIExpression()), !dbg !2607
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2605, metadata !DIExpression()), !dbg !2607
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2606, metadata !DIExpression()), !dbg !2607
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2606, metadata !DIExpression(DW_OP_deref)), !dbg !2607
  %call = call i32 @__xmknodat(i32 0, i32 %__fd, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !2608
  ret i32 %call, !dbg !2609
}

declare dso_local i32 @__xmknodat(i32, i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2610 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2634, metadata !DIExpression()), !dbg !2636
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2635, metadata !DIExpression()), !dbg !2636
  %call = tail call i32 @__xstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !2637
  ret i32 %call, !dbg !2638
}

declare dso_local i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2639 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2641, metadata !DIExpression()), !dbg !2643
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2642, metadata !DIExpression()), !dbg !2643
  %call = tail call i32 @__lxstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !2644
  ret i32 %call, !dbg !2645
}

declare dso_local i32 @__lxstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat64(i32 %__fd, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2646 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2650, metadata !DIExpression()), !dbg !2652
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2651, metadata !DIExpression()), !dbg !2652
  %call = tail call i32 @__fxstat64(i32 1, i32 %__fd, %struct.stat64* %__statbuf) #6, !dbg !2653
  ret i32 %call, !dbg !2654
}

declare dso_local i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat64(i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2655 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2659, metadata !DIExpression()), !dbg !2663
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2660, metadata !DIExpression()), !dbg !2663
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2661, metadata !DIExpression()), !dbg !2663
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2662, metadata !DIExpression()), !dbg !2663
  %call = tail call i32 @__fxstatat64(i32 1, i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) #6, !dbg !2664
  ret i32 %call, !dbg !2665
}

declare dso_local i32 @__fxstatat64(i32, i32, i8*, %struct.stat64*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @ssa_name_nonnegative_p(%union.tree_node* %t) local_unnamed_addr #5 !dbg !2666 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !2670, metadata !DIExpression()), !dbg !2675
  %call = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %t) #7, !dbg !2676
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call, metadata !2671, metadata !DIExpression()), !dbg !2675
  %tobool = icmp eq %struct.value_range_d* %call, null, !dbg !2677
  br i1 %tobool, label %cleanup, label %if.end, !dbg !2679

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i64 0, i32 0, !dbg !2680
  %0 = load i32, i32* %type, align 8, !dbg !2680
  %cmp = icmp eq i32 %0, 1, !dbg !2681
  br i1 %cmp, label %if.then1, label %cleanup, !dbg !2682

if.then1:                                         ; preds = %if.end
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i64 0, i32 1, !dbg !2683
  %1 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !2683
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !2684
  %call2 = tail call fastcc i32 @compare_values(%union.tree_node* %1, %union.tree_node* %2) #7, !dbg !2685
  call void @llvm.dbg.value(metadata i32 %call2, metadata !2672, metadata !DIExpression()), !dbg !2686
  %3 = icmp ult i32 %call2, 2, !dbg !2687
  %conv = zext i1 %3 to i8, !dbg !2688
  br label %cleanup

cleanup:                                          ; preds = %entry, %if.end, %if.then1
  %retval.0 = phi i8 [ %conv, %if.then1 ], [ 0, %entry ], [ 0, %if.end ], !dbg !2675
  ret i8 %retval.0, !dbg !2689
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %var) unnamed_addr #5 !dbg !2690 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !2694, metadata !DIExpression()), !dbg !2698
  call void @llvm.dbg.value(metadata i32 undef, metadata !2697, metadata !DIExpression()), !dbg !2698
  %0 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !2699
  %tobool = icmp eq %struct.value_range_d** %0, null, !dbg !2699
  br i1 %tobool, label %cleanup, label %if.end, !dbg !2701

if.end:                                           ; preds = %entry
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !2702
  %1 = bitcast %union.tree_node** %version to i32*, !dbg !2702
  %2 = load i32, i32* %1, align 8, !dbg !2702
  call void @llvm.dbg.value(metadata i32 %2, metadata !2697, metadata !DIExpression()), !dbg !2698
  %idxprom = zext i32 %2 to i64, !dbg !2703
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %0, i64 %idxprom, !dbg !2703
  %3 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !2703
  call void @llvm.dbg.value(metadata %struct.value_range_d* %3, metadata !2695, metadata !DIExpression()), !dbg !2698
  %tobool1 = icmp eq %struct.value_range_d* %3, null, !dbg !2704
  br i1 %tobool1, label %if.end3, label %cleanup, !dbg !2706

if.end3:                                          ; preds = %if.end
  %call = tail call i8* @xcalloc(i64 1, i64 32) #6, !dbg !2707
  %4 = bitcast i8* %call to %struct.value_range_d*, !dbg !2707
  call void @llvm.dbg.value(metadata %struct.value_range_d* %4, metadata !2695, metadata !DIExpression()), !dbg !2698
  %5 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !2708
  %arrayidx5 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %5, i64 %idxprom, !dbg !2708
  %6 = bitcast %struct.value_range_d** %arrayidx5 to i8**, !dbg !2709
  store i8* %call, i8** %6, align 8, !dbg !2709
  %equiv = getelementptr inbounds i8, i8* %call, i64 24, !dbg !2710
  %7 = bitcast i8* %equiv to %struct.bitmap_head_def**, !dbg !2710
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %7, align 8, !dbg !2711
  %var7 = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !2712
  %8 = bitcast i32* %var7 to %union.tree_node**, !dbg !2712
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !2712
  call void @llvm.dbg.value(metadata %union.tree_node* %9, metadata !2696, metadata !DIExpression()), !dbg !2698
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2713
  %bf.load = load i64, i64* %10, align 8, !dbg !2713
  %bf.cast1 = and i64 %bf.load, 4294967296, !dbg !2713
  %tobool8 = icmp eq i64 %bf.cast1, 0, !dbg !2713
  br i1 %tobool8, label %cleanup, label %if.then9, !dbg !2715

if.then9:                                         ; preds = %if.end3
  %11 = getelementptr inbounds %union.tree_node, %union.tree_node* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2716
  %bf.load11 = load i64, i64* %11, align 8, !dbg !2716
  %bf.cast132 = and i64 %bf.load11, 65535, !dbg !2719
  %cmp = icmp eq i64 %bf.cast132, 34, !dbg !2719
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !2720

land.lhs.true:                                    ; preds = %if.then9
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2721
  %12 = bitcast %union.tree_node** %type to i64**, !dbg !2721
  %13 = load i64*, i64** %12, align 8, !dbg !2721
  %bf.load15 = load i64, i64* %13, align 8, !dbg !2721
  %bf.cast173 = and i64 %bf.load15, 65535, !dbg !2721
  %cmp18 = icmp eq i64 %bf.cast173, 10, !dbg !2721
  br i1 %cmp18, label %land.lhs.true26, label %lor.lhs.false, !dbg !2721

lor.lhs.false:                                    ; preds = %land.lhs.true
  %cmp25 = icmp eq i64 %bf.cast173, 12, !dbg !2721
  br i1 %cmp25, label %land.lhs.true26, label %if.else, !dbg !2722

land.lhs.true26:                                  ; preds = %lor.lhs.false, %land.lhs.true
  %call27 = tail call fastcc zeroext i8 @nonnull_arg_p(%union.tree_node* %9) #7, !dbg !2723
  %tobool28 = icmp eq i8 %call27, 0, !dbg !2723
  br i1 %tobool28, label %if.else, label %if.then29, !dbg !2724

if.then29:                                        ; preds = %land.lhs.true26
  %14 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2725
  tail call fastcc void @set_value_range_to_nonnull(%struct.value_range_d* %4, %union.tree_node* %14) #7, !dbg !2726
  br label %cleanup, !dbg !2726

if.else:                                          ; preds = %land.lhs.true26, %lor.lhs.false, %if.then9
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %4) #7, !dbg !2727
  br label %cleanup

cleanup:                                          ; preds = %if.end3, %if.end, %entry, %if.else, %if.then29
  %retval.0 = phi %struct.value_range_d* [ null, %entry ], [ %3, %if.end ], [ %4, %if.then29 ], [ %4, %if.else ], [ %4, %if.end3 ], !dbg !2698
  ret %struct.value_range_d* %retval.0, !dbg !2728
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compare_values(%union.tree_node* %val1, %union.tree_node* %val2) unnamed_addr #5 !dbg !2729 {
entry:
  %sop = alloca i8, align 1
  call void @llvm.dbg.value(metadata %union.tree_node* %val1, metadata !2733, metadata !DIExpression()), !dbg !2737
  call void @llvm.dbg.value(metadata %union.tree_node* %val2, metadata !2734, metadata !DIExpression()), !dbg !2737
  call void @llvm.dbg.value(metadata i8* %sop, metadata !2735, metadata !DIExpression(DW_OP_deref)), !dbg !2737
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !2738
  call void @llvm.dbg.value(metadata i8 0, metadata !2735, metadata !DIExpression()), !dbg !2737
  store i8 0, i8* %sop, align 1, !dbg !2739
  call void @llvm.dbg.value(metadata i8* %sop, metadata !2735, metadata !DIExpression(DW_OP_deref)), !dbg !2737
  %call = call fastcc i32 @compare_values_warnv(%union.tree_node* %val1, %union.tree_node* %val2, i8* nonnull %sop) #7, !dbg !2740
  call void @llvm.dbg.value(metadata i32 %call, metadata !2736, metadata !DIExpression()), !dbg !2737
  %0 = load i8, i8* %sop, align 1, !dbg !2741
  call void @llvm.dbg.value(metadata i8 %0, metadata !2735, metadata !DIExpression()), !dbg !2737
  %tobool = icmp eq i8 %0, 0, !dbg !2741
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !2743

land.lhs.true:                                    ; preds = %entry
  %call1 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %val1) #6, !dbg !2744
  %tobool2 = icmp eq i8 %call1, 0, !dbg !2744
  br i1 %tobool2, label %if.then, label %lor.lhs.false, !dbg !2745

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call3 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %val2) #6, !dbg !2746
  %tobool4 = icmp eq i8 %call3, 0, !dbg !2746
  br i1 %tobool4, label %if.then, label %if.end, !dbg !2747

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  call void @llvm.dbg.value(metadata i32 -2, metadata !2736, metadata !DIExpression()), !dbg !2737
  br label %if.end, !dbg !2748

if.end:                                           ; preds = %lor.lhs.false, %entry, %if.then
  %ret.0 = phi i32 [ %call, %lor.lhs.false ], [ -2, %if.then ], [ %call, %entry ], !dbg !2737
  call void @llvm.dbg.value(metadata i32 %ret.0, metadata !2736, metadata !DIExpression()), !dbg !2737
  call void @llvm.dbg.value(metadata i8* %sop, metadata !2735, metadata !DIExpression(DW_OP_deref)), !dbg !2737
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !2749
  ret i32 %ret.0, !dbg !2750
}

; Function Attrs: nounwind uwtable
define dso_local void @dump_value_range(%struct._IO_FILE* %file, %struct.value_range_d* %vr) local_unnamed_addr #5 !dbg !2751 {
entry:
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %file, metadata !2755, metadata !DIExpression()), !dbg !2767
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !2756, metadata !DIExpression()), !dbg !2767
  %cmp = icmp eq %struct.value_range_d* %vr, null, !dbg !2768
  br i1 %cmp, label %if.then, label %if.else, !dbg !2769

if.then:                                          ; preds = %entry
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)) #6, !dbg !2770
  br label %if.end112, !dbg !2770

if.else:                                          ; preds = %entry
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !2771
  %0 = load i32, i32* %type, align 8, !dbg !2771
  %cmp1 = icmp eq i32 %0, 0, !dbg !2772
  br i1 %cmp1, label %if.then2, label %if.else4, !dbg !2773

if.then2:                                         ; preds = %if.else
  %call3 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !2774
  br label %if.end112, !dbg !2774

if.else4:                                         ; preds = %if.else
  %cmp6 = icmp eq i32 %0, 1, !dbg !2775
  br i1 %cmp6, label %if.then9, label %lor.lhs.false, !dbg !2776

lor.lhs.false:                                    ; preds = %if.else4
  %cmp8 = icmp eq i32 %0, 2, !dbg !2777
  br i1 %cmp8, label %if.then9, label %if.else101, !dbg !2778

if.then9:                                         ; preds = %lor.lhs.false, %if.else4
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !2779
  %1 = bitcast %union.tree_node** %min to %struct.tree_common**, !dbg !2779
  %2 = load %struct.tree_common*, %struct.tree_common** %1, align 8, !dbg !2779
  %type11 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2, i64 0, i32 2, !dbg !2779
  %3 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !2779
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !2757, metadata !DIExpression()), !dbg !2780
  %cmp13 = icmp eq i32 %0, 2, !dbg !2781
  %cond = select i1 %cmp13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), !dbg !2782
  %call14 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0), i8* %cond) #6, !dbg !2783
  %4 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !2784
  %call16 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %4) #7, !dbg !2786
  %tobool = icmp eq i8 %call16, 0, !dbg !2786
  br i1 %tobool, label %if.else19, label %if.then17, !dbg !2787

if.then17:                                        ; preds = %if.then9
  %call18 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0)) #6, !dbg !2788
  br label %if.end46, !dbg !2788

if.else19:                                        ; preds = %if.then9
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2789
  %bf.load = load i64, i64* %5, align 8, !dbg !2789
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2789
  %cmp20 = icmp eq i64 %bf.cast1, 6, !dbg !2789
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false21, !dbg !2789

lor.lhs.false21:                                  ; preds = %if.else19
  %cmp26 = icmp eq i64 %bf.cast1, 7, !dbg !2789
  br i1 %cmp26, label %land.lhs.true, label %lor.lhs.false27, !dbg !2789

lor.lhs.false27:                                  ; preds = %lor.lhs.false21
  %cmp32 = icmp eq i64 %bf.cast1, 8, !dbg !2789
  br i1 %cmp32, label %land.lhs.true, label %if.else44, !dbg !2791

land.lhs.true:                                    ; preds = %lor.lhs.false27, %lor.lhs.false21, %if.else19
  %bf.cast367 = and i64 %bf.load, 2097152, !dbg !2792
  %tobool37 = icmp eq i64 %bf.cast367, 0, !dbg !2792
  br i1 %tobool37, label %land.lhs.true38, label %if.else44, !dbg !2793

land.lhs.true38:                                  ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !2794
  %call40 = tail call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %6) #7, !dbg !2795
  %tobool41 = icmp eq i8 %call40, 0, !dbg !2795
  br i1 %tobool41, label %if.else44, label %if.then42, !dbg !2796

if.then42:                                        ; preds = %land.lhs.true38
  %call43 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #6, !dbg !2797
  br label %if.end46, !dbg !2797

if.else44:                                        ; preds = %land.lhs.true38, %land.lhs.true, %lor.lhs.false27
  %7 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !2798
  tail call void @print_generic_expr(%struct._IO_FILE* %file, %union.tree_node* %7, i32 0) #6, !dbg !2799
  br label %if.end46

if.end46:                                         ; preds = %if.then42, %if.else44, %if.then17
  %call47 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0)) #6, !dbg !2800
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !2801
  %8 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !2801
  %call48 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %8) #7, !dbg !2803
  %tobool49 = icmp eq i8 %call48, 0, !dbg !2803
  br i1 %tobool49, label %if.else52, label %if.then50, !dbg !2804

if.then50:                                        ; preds = %if.end46
  %call51 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0)) #6, !dbg !2805
  br label %if.end83, !dbg !2805

if.else52:                                        ; preds = %if.end46
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2806
  %bf.load54 = load i64, i64* %9, align 8, !dbg !2806
  %bf.cast564 = and i64 %bf.load54, 65535, !dbg !2806
  %cmp57 = icmp eq i64 %bf.cast564, 6, !dbg !2806
  br i1 %cmp57, label %land.lhs.true73, label %lor.lhs.false59, !dbg !2806

lor.lhs.false59:                                  ; preds = %if.else52
  %cmp64 = icmp eq i64 %bf.cast564, 7, !dbg !2806
  br i1 %cmp64, label %land.lhs.true73, label %lor.lhs.false66, !dbg !2806

lor.lhs.false66:                                  ; preds = %lor.lhs.false59
  %cmp71 = icmp eq i64 %bf.cast564, 8, !dbg !2806
  br i1 %cmp71, label %land.lhs.true73, label %if.else80, !dbg !2808

land.lhs.true73:                                  ; preds = %lor.lhs.false66, %lor.lhs.false59, %if.else52
  %10 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !2809
  %call75 = tail call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %10) #7, !dbg !2810
  %tobool77 = icmp eq i8 %call75, 0, !dbg !2810
  br i1 %tobool77, label %if.else80, label %if.then78, !dbg !2811

if.then78:                                        ; preds = %land.lhs.true73
  %call79 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0)) #6, !dbg !2812
  br label %if.end83, !dbg !2812

if.else80:                                        ; preds = %land.lhs.true73, %lor.lhs.false66
  %11 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !2813
  tail call void @print_generic_expr(%struct._IO_FILE* %file, %union.tree_node* %11, i32 0) #6, !dbg !2814
  br label %if.end83

if.end83:                                         ; preds = %if.then78, %if.else80, %if.then50
  %call84 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !2815
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !2816
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !2816
  %tobool85 = icmp eq %struct.bitmap_head_def* %12, null, !dbg !2817
  br i1 %tobool85, label %if.end112, label %if.then86, !dbg !2818

if.then86:                                        ; preds = %if.end83
  %13 = bitcast %struct.bitmap_iterator* %bi to i8*, !dbg !2819
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #8, !dbg !2819
  %14 = bitcast i32* %i to i8*, !dbg !2820
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #8, !dbg !2820
  call void @llvm.dbg.value(metadata i32 0, metadata !2766, metadata !DIExpression()), !dbg !2821
  %call87 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0)) #6, !dbg !2822
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !2823
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !2762, metadata !DIExpression(DW_OP_deref)), !dbg !2821
  call void @llvm.dbg.value(metadata i32* %i, metadata !2765, metadata !DIExpression(DW_OP_deref)), !dbg !2821
  call fastcc void @bmp_iter_set_init(%struct.bitmap_iterator* nonnull %bi, %struct.bitmap_head_def* %15, i32 0, i32* nonnull %i) #7, !dbg !2823
  br label %for.cond, !dbg !2823

for.cond:                                         ; preds = %cond.end, %if.then86
  %c.0 = phi i32 [ 0, %if.then86 ], [ %inc, %cond.end ], !dbg !2821
  call void @llvm.dbg.value(metadata i32 %c.0, metadata !2766, metadata !DIExpression()), !dbg !2821
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !2762, metadata !DIExpression(DW_OP_deref)), !dbg !2821
  call void @llvm.dbg.value(metadata i32* %i, metadata !2765, metadata !DIExpression(DW_OP_deref)), !dbg !2821
  %call89 = call fastcc zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* nonnull %bi, i32* nonnull %i) #7, !dbg !2825
  %tobool90 = icmp eq i8 %call89, 0, !dbg !2823
  br i1 %tobool90, label %for.end, label %for.body, !dbg !2823

for.body:                                         ; preds = %for.cond
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2827
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, i32 3, !dbg !2827
  %17 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !2827
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %17, i64 0, i32 2, !dbg !2827
  %18 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !2827
  %tobool91 = icmp eq %struct.VEC_tree_gc* %18, null, !dbg !2827
  br i1 %tobool91, label %cond.end, label %cond.true, !dbg !2827

cond.true:                                        ; preds = %for.body
  %base95 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %18, i64 0, i32 0, !dbg !2827
  br label %cond.end, !dbg !2827

cond.end:                                         ; preds = %for.body, %cond.true
  %cond96 = phi %struct.VEC_tree_base* [ %base95, %cond.true ], [ null, %for.body ], !dbg !2827
  %19 = load i32, i32* %i, align 4, !dbg !2827
  call void @llvm.dbg.value(metadata i32 %19, metadata !2765, metadata !DIExpression()), !dbg !2821
  %call97 = call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond96, i32 %19) #7, !dbg !2827
  call void @print_generic_expr(%struct._IO_FILE* %file, %union.tree_node* %call97, i32 0) #6, !dbg !2829
  %call98 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0)) #6, !dbg !2830
  %inc = add i32 %c.0, 1, !dbg !2831
  call void @llvm.dbg.value(metadata i32 %inc, metadata !2766, metadata !DIExpression()), !dbg !2821
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !2762, metadata !DIExpression(DW_OP_deref)), !dbg !2821
  call void @llvm.dbg.value(metadata i32* %i, metadata !2765, metadata !DIExpression(DW_OP_deref)), !dbg !2821
  call fastcc void @bmp_iter_next(%struct.bitmap_iterator* nonnull %bi, i32* nonnull %i) #7, !dbg !2825
  br label %for.cond, !dbg !2825, !llvm.loop !2832

for.end:                                          ; preds = %for.cond
  %c.0.lcssa = phi i32 [ %c.0, %for.cond ], !dbg !2821
  call void @llvm.dbg.value(metadata i32 %c.0.lcssa, metadata !2766, metadata !DIExpression()), !dbg !2821
  call void @llvm.dbg.value(metadata i32 %c.0.lcssa, metadata !2766, metadata !DIExpression()), !dbg !2821
  call void @llvm.dbg.value(metadata i32 %c.0.lcssa, metadata !2766, metadata !DIExpression()), !dbg !2821
  %call99 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13, i64 0, i64 0), i32 %c.0.lcssa) #6, !dbg !2834
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #8, !dbg !2835
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #8, !dbg !2835
  br label %if.end112, !dbg !2836

if.else101:                                       ; preds = %lor.lhs.false
  %cmp103 = icmp eq i32 %0, 3, !dbg !2837
  br i1 %cmp103, label %if.then105, label %if.else107, !dbg !2839

if.then105:                                       ; preds = %if.else101
  %call106 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0)) #6, !dbg !2840
  br label %if.end112, !dbg !2840

if.else107:                                       ; preds = %if.else101
  %call108 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i64 0, i64 0)) #6, !dbg !2841
  br label %if.end112

if.end112:                                        ; preds = %if.end83, %if.then2, %if.then105, %if.else107, %for.end, %if.then
  ret void, !dbg !2842
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %val) unnamed_addr #0 !dbg !2843 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !2845, metadata !DIExpression()), !dbg !2846
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2847
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2847
  %call = tail call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %0) #7, !dbg !2848
  %tobool = icmp eq i8 %call, 0, !dbg !2848
  br i1 %tobool, label %land.end, label %land.lhs.true, !dbg !2849

land.lhs.true:                                    ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2850
  %bf.load = load i64, i64* %1, align 8, !dbg !2850
  %bf.cast = and i64 %bf.load, 65535, !dbg !2850
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !2850
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2850
  %cmp = icmp eq i32 %2, 1, !dbg !2850
  br i1 %cmp, label %land.lhs.true2, label %land.end, !dbg !2851

land.lhs.true2:                                   ; preds = %land.lhs.true
  %bf.cast61 = and i64 %bf.load, 134217728, !dbg !2852
  %tobool7 = icmp eq i64 %bf.cast61, 0, !dbg !2852
  br i1 %tobool7, label %land.end, label %land.rhs, !dbg !2853

land.rhs:                                         ; preds = %land.lhs.true2
  %call8 = tail call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %val) #7, !dbg !2854
  %tobool10 = icmp ne i8 %call8, 0, !dbg !2853
  %phitmp = zext i1 %tobool10 to i8
  br label %land.end

land.end:                                         ; preds = %land.lhs.true2, %entry, %land.rhs, %land.lhs.true
  %3 = phi i8 [ 0, %land.lhs.true2 ], [ 0, %land.lhs.true ], [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %3, !dbg !2855
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %val) unnamed_addr #0 !dbg !2856 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !2858, metadata !DIExpression()), !dbg !2860
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2861
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2861
  %call = tail call fastcc %union.tree_node* @vrp_val_min(%union.tree_node* %0) #7, !dbg !2862
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !2859, metadata !DIExpression()), !dbg !2860
  %cmp = icmp eq %union.tree_node* %call, %val, !dbg !2863
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !2864

lor.rhs:                                          ; preds = %entry
  %cmp1 = icmp eq %union.tree_node* %call, null, !dbg !2865
  br i1 %cmp1, label %lor.end, label %land.rhs, !dbg !2866

land.rhs:                                         ; preds = %lor.rhs
  %call2 = tail call i32 @operand_equal_p(%union.tree_node* %val, %union.tree_node* nonnull %call, i32 0) #6, !dbg !2867
  %tobool = icmp ne i32 %call2, 0, !dbg !2866
  %phitmp = zext i1 %tobool to i8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs, %entry
  %1 = phi i8 [ 1, %entry ], [ 0, %lor.rhs ], [ %phitmp, %land.rhs ]
  ret i8 %1, !dbg !2868
}

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %val) unnamed_addr #0 !dbg !2869 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !2871, metadata !DIExpression()), !dbg !2872
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2873
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2873
  %call = tail call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %0) #7, !dbg !2874
  %tobool = icmp eq i8 %call, 0, !dbg !2874
  br i1 %tobool, label %land.end, label %land.lhs.true, !dbg !2875

land.lhs.true:                                    ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2876
  %bf.load = load i64, i64* %1, align 8, !dbg !2876
  %bf.cast = and i64 %bf.load, 65535, !dbg !2876
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !2876
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2876
  %cmp = icmp eq i32 %2, 1, !dbg !2876
  br i1 %cmp, label %land.lhs.true2, label %land.end, !dbg !2877

land.lhs.true2:                                   ; preds = %land.lhs.true
  %bf.cast61 = and i64 %bf.load, 134217728, !dbg !2878
  %tobool7 = icmp eq i64 %bf.cast61, 0, !dbg !2878
  br i1 %tobool7, label %land.end, label %land.rhs, !dbg !2879

land.rhs:                                         ; preds = %land.lhs.true2
  %call8 = tail call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %val) #7, !dbg !2880
  %tobool10 = icmp ne i8 %call8, 0, !dbg !2879
  %phitmp = zext i1 %tobool10 to i8
  br label %land.end

land.end:                                         ; preds = %land.lhs.true2, %entry, %land.rhs, %land.lhs.true
  %3 = phi i8 [ 0, %land.lhs.true2 ], [ 0, %land.lhs.true ], [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %3, !dbg !2881
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %val) unnamed_addr #0 !dbg !2882 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !2884, metadata !DIExpression()), !dbg !2886
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2887
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2887
  %call = tail call fastcc %union.tree_node* @vrp_val_max(%union.tree_node* %0) #7, !dbg !2888
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !2885, metadata !DIExpression()), !dbg !2886
  %cmp = icmp eq %union.tree_node* %call, %val, !dbg !2889
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !2890

lor.rhs:                                          ; preds = %entry
  %cmp1 = icmp eq %union.tree_node* %call, null, !dbg !2891
  br i1 %cmp1, label %lor.end, label %land.rhs, !dbg !2892

land.rhs:                                         ; preds = %lor.rhs
  %call2 = tail call i32 @operand_equal_p(%union.tree_node* %val, %union.tree_node* nonnull %call, i32 0) #6, !dbg !2893
  %tobool = icmp ne i32 %call2, 0, !dbg !2892
  %phitmp = zext i1 %tobool to i8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs, %entry
  %1 = phi i8 [ 1, %entry ], [ 0, %lor.rhs ], [ %phitmp, %land.rhs ]
  ret i8 %1, !dbg !2894
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) unnamed_addr #0 !dbg !2895 {
entry:
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !2904, metadata !DIExpression()), !dbg !2908
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %map, metadata !2905, metadata !DIExpression()), !dbg !2908
  call void @llvm.dbg.value(metadata i32 0, metadata !2906, metadata !DIExpression()), !dbg !2908
  call void @llvm.dbg.value(metadata i32* %bit_no, metadata !2907, metadata !DIExpression()), !dbg !2908
  %0 = bitcast %struct.bitmap_head_def* %map to i64*, !dbg !2909
  %1 = load i64, i64* %0, align 8, !dbg !2909
  %2 = bitcast %struct.bitmap_iterator* %bi to i64*, !dbg !2910
  store i64 %1, i64* %2, align 8, !dbg !2910
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %bi, i64 0, i32 1, !dbg !2911
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !2912
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %bi, i64 0, i32 0, !dbg !2913
  %3 = inttoptr i64 %1 to %struct.bitmap_element_def*, !dbg !2916
  br label %while.body, !dbg !2916

while.body:                                       ; preds = %entry, %if.end5
  %tobool = icmp eq i64 %1, 0, !dbg !2917
  br i1 %tobool, label %if.then, label %if.end, !dbg !2918

if.then:                                          ; preds = %while.body
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt11, align 8, !dbg !2919
  br label %while.end, !dbg !2921

if.end:                                           ; preds = %while.body
  br i1 false, label %if.end5, label %while.end.loopexit, !dbg !2922

if.end5:                                          ; preds = %if.end
  br label %while.body, !dbg !2916, !llvm.loop !2923

while.end.loopexit:                               ; preds = %if.end
  br label %while.end, !dbg !2925

while.end:                                        ; preds = %while.end.loopexit, %if.then
  %4 = phi %struct.bitmap_element_def* [ %3, %while.end.loopexit ], [ @bitmap_zero_bits, %if.then ]
  %5 = phi %struct.bitmap_element_def* [ %3, %while.end.loopexit ], [ @bitmap_zero_bits, %if.then ]
  %6 = phi %struct.bitmap_element_def* [ %3, %while.end.loopexit ], [ @bitmap_zero_bits, %if.then ], !dbg !2925
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %6, i64 0, i32 2, !dbg !2927
  %7 = load i32, i32* %indx9, align 8, !dbg !2927
  %cmp11 = icmp eq i32 %7, 0, !dbg !2928
  br i1 %cmp11, label %if.end15, label %if.then12, !dbg !2929

if.then12:                                        ; preds = %while.end
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %5, i64 0, i32 2, !dbg !2930
  %8 = load i32, i32* %indx14, align 8, !dbg !2930
  %mul = shl i32 %8, 7, !dbg !2931
  call void @llvm.dbg.value(metadata i32 %mul, metadata !2906, metadata !DIExpression()), !dbg !2908
  br label %if.end15, !dbg !2932

if.end15:                                         ; preds = %while.end, %if.then12
  %start_bit.addr.0 = phi i32 [ %mul, %if.then12 ], [ 0, %while.end ]
  call void @llvm.dbg.value(metadata i32 %start_bit.addr.0, metadata !2906, metadata !DIExpression()), !dbg !2908
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %bi, i64 0, i32 2, !dbg !2933
  store i32 0, i32* %word_no, align 8, !dbg !2934
  %arrayidx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %4, i64 0, i32 3, i64 0, !dbg !2935
  %9 = load i64, i64* %arrayidx, align 8, !dbg !2935
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %bi, i64 0, i32 3, !dbg !2936
  store i64 %9, i64* %bits21, align 8, !dbg !2937
  %tobool23 = icmp eq i64 %9, 0, !dbg !2938
  %lnot.ext = zext i1 %tobool23 to i32, !dbg !2938
  %add = or i32 %start_bit.addr.0, %lnot.ext, !dbg !2939
  call void @llvm.dbg.value(metadata i32 %add, metadata !2906, metadata !DIExpression()), !dbg !2908
  store i32 %add, i32* %bit_no, align 4, !dbg !2940
  ret void, !dbg !2941
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) unnamed_addr #0 !dbg !2942 {
entry:
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !2946, metadata !DIExpression()), !dbg !2951
  call void @llvm.dbg.value(metadata i32* %bit_no, metadata !2947, metadata !DIExpression()), !dbg !2951
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %bi, i64 0, i32 3, !dbg !2952
  %0 = load i64, i64* %bits, align 8, !dbg !2952
  %tobool = icmp eq i64 %0, 0, !dbg !2953
  br i1 %tobool, label %if.end, label %next_bit, !dbg !2954

next_bit.loopexit:                                ; preds = %while.body9
  %.lcssa6 = phi i64 [ %10, %while.body9 ], !dbg !2955
  br label %next_bit, !dbg !2958

next_bit:                                         ; preds = %next_bit.loopexit, %entry
  %1 = phi i64 [ %.lcssa6, %next_bit.loopexit ], [ %0, %entry ]
  call void @llvm.dbg.label(metadata !2948), !dbg !2959
  br label %while.cond, !dbg !2958

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = phi i64 [ %.pre, %while.body ], [ %1, %next_bit ], !dbg !2960
  %and = and i64 %2, 1, !dbg !2961
  %tobool2 = icmp eq i64 %and, 0, !dbg !2962
  br i1 %tobool2, label %while.body, label %return.loopexit, !dbg !2958

while.body:                                       ; preds = %while.cond
  %shr = lshr i64 %2, 1, !dbg !2963
  store i64 %shr, i64* %bits, align 8, !dbg !2963
  %3 = load i32, i32* %bit_no, align 4, !dbg !2965
  %add = add i32 %3, 1, !dbg !2965
  store i32 %add, i32* %bit_no, align 4, !dbg !2965
  %.pre = load i64, i64* %bits, align 8, !dbg !2960
  br label %while.cond, !dbg !2958, !llvm.loop !2966

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %bit_no, align 4, !dbg !2968
  %sub = add i32 %4, 63, !dbg !2969
  %div = and i32 %sub, -64, !dbg !2970
  store i32 %div, i32* %bit_no, align 4, !dbg !2971
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %bi, i64 0, i32 2, !dbg !2972
  %5 = load i32, i32* %word_no, align 8, !dbg !2973
  %inc = add i32 %5, 1, !dbg !2973
  store i32 %inc, i32* %word_no, align 8, !dbg !2973
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %bi, i64 0, i32 0, !dbg !2974
  %6 = bitcast %struct.bitmap_iterator* %bi to i64*, !dbg !2974
  br label %while.body6, !dbg !2975

while.body6:                                      ; preds = %if.end, %if.end26
  %7 = phi i32 [ %inc, %if.end ], [ 0, %if.end26 ]
  br label %while.cond7, !dbg !2976

while.cond7:                                      ; preds = %if.end16, %while.body6
  %8 = phi i32 [ %inc19, %if.end16 ], [ %7, %while.body6 ], !dbg !2977
  %cmp = icmp eq i32 %8, 2, !dbg !2978
  %9 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !2974
  br i1 %cmp, label %while.end20, label %while.body9, !dbg !2976

while.body9:                                      ; preds = %while.cond7
  %idxprom = zext i32 %8 to i64, !dbg !2955
  %arrayidx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %9, i64 0, i32 3, i64 %idxprom, !dbg !2955
  %10 = load i64, i64* %arrayidx, align 8, !dbg !2955
  store i64 %10, i64* %bits, align 8, !dbg !2979
  %tobool14 = icmp eq i64 %10, 0, !dbg !2980
  br i1 %tobool14, label %if.end16, label %next_bit.loopexit, !dbg !2982

if.end16:                                         ; preds = %while.body9
  %11 = load i32, i32* %bit_no, align 4, !dbg !2983
  %add17 = add i32 %11, 64, !dbg !2983
  store i32 %add17, i32* %bit_no, align 4, !dbg !2983
  %12 = load i32, i32* %word_no, align 8, !dbg !2984
  %inc19 = add i32 %12, 1, !dbg !2984
  store i32 %inc19, i32* %word_no, align 8, !dbg !2984
  br label %while.cond7, !dbg !2976, !llvm.loop !2985

while.end20:                                      ; preds = %while.cond7
  %.lcssa = phi %struct.bitmap_element_def* [ %9, %while.cond7 ], !dbg !2974
  %13 = bitcast %struct.bitmap_element_def* %.lcssa to i64*, !dbg !2987
  %14 = load i64, i64* %13, align 8, !dbg !2987
  store i64 %14, i64* %6, align 8, !dbg !2988
  %tobool24 = icmp eq i64 %14, 0, !dbg !2989
  br i1 %tobool24, label %return.loopexit1, label %if.end26, !dbg !2991

if.end26:                                         ; preds = %while.end20
  %15 = inttoptr i64 %14 to %struct.bitmap_element_def*, !dbg !2991
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %15, i64 0, i32 2, !dbg !2992
  %16 = load i32, i32* %indx, align 8, !dbg !2992
  %mul28 = shl i32 %16, 7, !dbg !2993
  store i32 %mul28, i32* %bit_no, align 4, !dbg !2994
  store i32 0, i32* %word_no, align 8, !dbg !2995
  br label %while.body6, !dbg !2975, !llvm.loop !2996

return.loopexit:                                  ; preds = %while.cond
  br label %return, !dbg !2998

return.loopexit1:                                 ; preds = %while.end20
  br label %return, !dbg !2998

return:                                           ; preds = %return.loopexit1, %return.loopexit
  %retval.0 = phi i8 [ 1, %return.loopexit ], [ 0, %return.loopexit1 ], !dbg !2951
  ret i8 %retval.0, !dbg !2998
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !2999 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !3005, metadata !DIExpression()), !dbg !3007
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !3006, metadata !DIExpression()), !dbg !3007
  br label %land.end, !dbg !3008

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !3008
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !3008
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3008
  ret %union.tree_node* %0, !dbg !3008
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) unnamed_addr #0 !dbg !3009 {
entry:
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !3013, metadata !DIExpression()), !dbg !3015
  call void @llvm.dbg.value(metadata i32* %bit_no, metadata !3014, metadata !DIExpression()), !dbg !3015
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %bi, i64 0, i32 3, !dbg !3016
  %0 = load i64, i64* %bits, align 8, !dbg !3017
  %shr = lshr i64 %0, 1, !dbg !3017
  store i64 %shr, i64* %bits, align 8, !dbg !3017
  %1 = load i32, i32* %bit_no, align 4, !dbg !3018
  %add = add i32 %1, 1, !dbg !3018
  store i32 %add, i32* %bit_no, align 4, !dbg !3018
  ret void, !dbg !3019
}

; Function Attrs: nounwind uwtable
define dso_local void @debug_value_range(%struct.value_range_d* %vr) local_unnamed_addr #5 !dbg !3020 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !3024, metadata !DIExpression()), !dbg !3025
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3026
  tail call void @dump_value_range(%struct._IO_FILE* %0, %struct.value_range_d* %vr) #7, !dbg !3027
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3028
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !3029
  ret void, !dbg !3030
}

; Function Attrs: nounwind uwtable
define dso_local void @dump_all_value_ranges(%struct._IO_FILE* %file) local_unnamed_addr #5 !dbg !3031 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %file, metadata !3035, metadata !DIExpression()), !dbg !3037
  call void @llvm.dbg.value(metadata i64 0, metadata !3036, metadata !DIExpression()), !dbg !3037
  br label %for.cond, !dbg !3038

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i64 [ 0, %entry ], [ %inc, %for.inc ], !dbg !3040
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !3036, metadata !DIExpression()), !dbg !3037
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3041
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 3, !dbg !3041
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3041
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i64 0, i32 2, !dbg !3041
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3041
  %tobool = icmp eq %struct.VEC_tree_gc* %2, null, !dbg !3041
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3041

cond.true:                                        ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %2, i64 0, i32 0, !dbg !3041
  br label %cond.end, !dbg !3041

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %for.cond ], !dbg !3041
  %call = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond) #7, !dbg !3041
  %conv = zext i32 %call to i64, !dbg !3041
  %cmp = icmp ult i64 %i.0, %conv, !dbg !3043
  br i1 %cmp, label %for.body, label %for.end, !dbg !3044

for.body:                                         ; preds = %cond.end
  %3 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !3045
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %3, i64 %i.0, !dbg !3045
  %4 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !3045
  %tobool5 = icmp eq %struct.value_range_d* %4, null, !dbg !3045
  br i1 %tobool5, label %for.inc, label %if.then, !dbg !3048

if.then:                                          ; preds = %for.body
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3049
  %gimple_df7 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, i32 3, !dbg !3049
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df7, align 8, !dbg !3049
  %ssa_names8 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %6, i64 0, i32 2, !dbg !3049
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names8, align 8, !dbg !3049
  %tobool9 = icmp eq %struct.VEC_tree_gc* %7, null, !dbg !3049
  br i1 %tobool9, label %cond.end16, label %cond.true10, !dbg !3049

cond.true10:                                      ; preds = %if.then
  %base14 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %7, i64 0, i32 0, !dbg !3049
  br label %cond.end16, !dbg !3049

cond.end16:                                       ; preds = %if.then, %cond.true10
  %cond17 = phi %struct.VEC_tree_base* [ %base14, %cond.true10 ], [ null, %if.then ], !dbg !3049
  %conv18 = trunc i64 %i.0 to i32, !dbg !3049
  %call19 = tail call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond17, i32 %conv18) #7, !dbg !3049
  tail call void @print_generic_expr(%struct._IO_FILE* %file, %union.tree_node* %call19, i32 0) #6, !dbg !3051
  %call20 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0)) #6, !dbg !3052
  %8 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !3053
  %arrayidx21 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %8, i64 %i.0, !dbg !3053
  %9 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx21, align 8, !dbg !3053
  tail call void @dump_value_range(%struct._IO_FILE* %file, %struct.value_range_d* %9) #7, !dbg !3054
  %call22 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !3055
  br label %for.inc, !dbg !3056

for.inc:                                          ; preds = %for.body, %cond.end16
  %inc = add nuw nsw i64 %i.0, 1, !dbg !3057
  call void @llvm.dbg.value(metadata i64 %inc, metadata !3036, metadata !DIExpression()), !dbg !3037
  br label %for.cond, !dbg !3058, !llvm.loop !3059

for.end:                                          ; preds = %cond.end
  %call23 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !3061
  ret void, !dbg !3062
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) unnamed_addr #0 !dbg !3063 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !3067, metadata !DIExpression()), !dbg !3068
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !3069
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3069

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !3069
  %0 = load i32, i32* %num, align 8, !dbg !3069
  br label %cond.end, !dbg !3069

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !3069
  ret i32 %cond, !dbg !3069
}

; Function Attrs: nounwind uwtable
define dso_local void @debug_all_value_ranges() local_unnamed_addr #5 !dbg !3070 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3073
  tail call void @dump_all_value_ranges(%struct._IO_FILE* %0) #7, !dbg !3074
  ret void, !dbg !3075
}

; Function Attrs: nounwind uwtable
define dso_local void @dump_asserts_for(%struct._IO_FILE* %file, %union.tree_node* %name) local_unnamed_addr #5 !dbg !3076 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %file, metadata !3080, metadata !DIExpression()), !dbg !3083
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !3081, metadata !DIExpression()), !dbg !3083
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.18, i64 0, i64 0)) #6, !dbg !3084
  tail call void @print_generic_expr(%struct._IO_FILE* %file, %union.tree_node* %name, i32 0) #6, !dbg !3085
  %call1 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !3086
  %0 = load %struct.assert_locus_d**, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !3087
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3088
  %1 = bitcast %union.tree_node** %version to i32*, !dbg !3088
  %2 = load i32, i32* %1, align 8, !dbg !3088
  %idxprom = zext i32 %2 to i64, !dbg !3087
  %arrayidx = getelementptr inbounds %struct.assert_locus_d*, %struct.assert_locus_d** %0, i64 %idxprom, !dbg !3087
  br label %while.cond, !dbg !3089

while.cond:                                       ; preds = %if.end, %entry
  %loc.0.in = phi %struct.assert_locus_d** [ %arrayidx, %entry ], [ %next, %if.end ]
  %loc.0 = load %struct.assert_locus_d*, %struct.assert_locus_d** %loc.0.in, align 8, !dbg !3083
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0, metadata !3082, metadata !DIExpression()), !dbg !3083
  %tobool = icmp eq %struct.assert_locus_d* %loc.0, null, !dbg !3089
  br i1 %tobool, label %while.end, label %while.body, !dbg !3089

while.body:                                       ; preds = %while.cond
  %call2 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !3090
  %si = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 2, !dbg !3092
  %call3 = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !3093
  tail call void @print_gimple_stmt(%struct._IO_FILE* %file, %union.gimple_statement_d* %call3, i32 0, i32 0) #6, !dbg !3094
  %bb = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 0, !dbg !3095
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3095
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i64 0, i32 9, !dbg !3096
  %4 = load i32, i32* %index, align 8, !dbg !3096
  %call4 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20, i64 0, i64 0), i32 %4) #6, !dbg !3097
  %e = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 1, !dbg !3098
  %5 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3098
  %tobool5 = icmp eq %struct.edge_def* %5, null, !dbg !3100
  br i1 %tobool5, label %if.end, label %if.then, !dbg !3101

if.then:                                          ; preds = %while.body
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i64 0, i32 0, !dbg !3102
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3102
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i64 0, i32 9, !dbg !3104
  %7 = load i32, i32* %index7, align 8, !dbg !3104
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i64 0, i32 1, !dbg !3105
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3105
  %index9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i64 0, i32 9, !dbg !3106
  %9 = load i32, i32* %index9, align 8, !dbg !3106
  %call10 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i64 0, i64 0), i32 %7, i32 %9) #6, !dbg !3107
  %10 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3108
  tail call void @dump_edge_info(%struct._IO_FILE* %file, %struct.edge_def* %10, i32 0) #6, !dbg !3109
  br label %if.end, !dbg !3110

if.end:                                           ; preds = %while.body, %if.then
  %call12 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)) #6, !dbg !3111
  tail call void @print_generic_expr(%struct._IO_FILE* %file, %union.tree_node* %name, i32 0) #6, !dbg !3112
  %comp_code = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 3, !dbg !3113
  %11 = load i32, i32* %comp_code, align 8, !dbg !3113
  %idxprom13 = sext i32 %11 to i64, !dbg !3114
  %arrayidx14 = getelementptr inbounds [0 x i8*], [0 x i8*]* @tree_code_name, i64 0, i64 %idxprom13, !dbg !3114
  %12 = load i8*, i8** %arrayidx14, align 8, !dbg !3114
  %call15 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i8* %12) #6, !dbg !3115
  %val = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 4, !dbg !3116
  %13 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !3116
  tail call void @print_generic_expr(%struct._IO_FILE* %file, %union.tree_node* %13, i32 0) #6, !dbg !3117
  %call16 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i64 0, i64 0)) #6, !dbg !3118
  %next = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 6, !dbg !3119
  br label %while.cond, !dbg !3089, !llvm.loop !3120

while.end:                                        ; preds = %while.cond
  %call17 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !3122
  ret void, !dbg !3123
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !3124 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3128, metadata !DIExpression()), !dbg !3129
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3130
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3130
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 0, !dbg !3131
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3131
  ret %union.gimple_statement_d* %1, !dbg !3132
}

declare dso_local void @dump_edge_info(%struct._IO_FILE*, %struct.edge_def*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @debug_asserts_for(%union.tree_node* %name) local_unnamed_addr #5 !dbg !3133 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !3137, metadata !DIExpression()), !dbg !3138
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3139
  tail call void @dump_asserts_for(%struct._IO_FILE* %0, %union.tree_node* %name) #7, !dbg !3140
  ret void, !dbg !3141
}

; Function Attrs: nounwind uwtable
define dso_local void @dump_all_asserts(%struct._IO_FILE* %file) local_unnamed_addr #5 !dbg !3142 {
entry:
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %file, metadata !3144, metadata !DIExpression()), !dbg !3147
  %0 = bitcast i32* %i to i8*, !dbg !3148
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #8, !dbg !3148
  %1 = bitcast %struct.bitmap_iterator* %bi to i8*, !dbg !3149
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #8, !dbg !3149
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.25, i64 0, i64 0)) #6, !dbg !3150
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !3151
  call void @llvm.dbg.value(metadata i32* %i, metadata !3145, metadata !DIExpression(DW_OP_deref)), !dbg !3147
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !3146, metadata !DIExpression(DW_OP_deref)), !dbg !3147
  call fastcc void @bmp_iter_set_init(%struct.bitmap_iterator* nonnull %bi, %struct.bitmap_head_def* %2, i32 0, i32* nonnull %i) #7, !dbg !3151
  br label %for.cond, !dbg !3151

for.cond:                                         ; preds = %cond.end, %entry
  call void @llvm.dbg.value(metadata i32* %i, metadata !3145, metadata !DIExpression(DW_OP_deref)), !dbg !3147
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !3146, metadata !DIExpression(DW_OP_deref)), !dbg !3147
  %call1 = call fastcc zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* nonnull %bi, i32* nonnull %i) #7, !dbg !3153
  %tobool = icmp eq i8 %call1, 0, !dbg !3151
  br i1 %tobool, label %for.end, label %for.body, !dbg !3151

for.body:                                         ; preds = %for.cond
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3155
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, i32 3, !dbg !3155
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3155
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i64 0, i32 2, !dbg !3155
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3155
  %tobool2 = icmp eq %struct.VEC_tree_gc* %5, null, !dbg !3155
  br i1 %tobool2, label %cond.end, label %cond.true, !dbg !3155

cond.true:                                        ; preds = %for.body
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i64 0, i32 0, !dbg !3155
  br label %cond.end, !dbg !3155

cond.end:                                         ; preds = %for.body, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %for.body ], !dbg !3155
  %6 = load i32, i32* %i, align 4, !dbg !3155
  call void @llvm.dbg.value(metadata i32 %6, metadata !3145, metadata !DIExpression()), !dbg !3147
  %call6 = call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %6) #7, !dbg !3155
  call void @dump_asserts_for(%struct._IO_FILE* %file, %union.tree_node* %call6) #7, !dbg !3156
  call void @llvm.dbg.value(metadata i32* %i, metadata !3145, metadata !DIExpression(DW_OP_deref)), !dbg !3147
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !3146, metadata !DIExpression(DW_OP_deref)), !dbg !3147
  call fastcc void @bmp_iter_next(%struct.bitmap_iterator* nonnull %bi, i32* nonnull %i) #7, !dbg !3153
  br label %for.cond, !dbg !3153, !llvm.loop !3157

for.end:                                          ; preds = %for.cond
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !3159
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #8, !dbg !3160
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #8, !dbg !3160
  ret void, !dbg !3160
}

; Function Attrs: nounwind uwtable
define dso_local void @debug_all_asserts() local_unnamed_addr #5 !dbg !3161 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !3162
  tail call void @dump_all_asserts(%struct._IO_FILE* %0) #7, !dbg !3163
  ret void, !dbg !3164
}

; Function Attrs: nounwind uwtable
define internal zeroext i8 @gate_vrp() #5 !dbg !3165 {
entry:
  %0 = load i32, i32* @flag_tree_vrp, align 4, !dbg !3166
  %cmp = icmp ne i32 %0, 0, !dbg !3167
  %conv1 = zext i1 %cmp to i8, !dbg !3166
  ret i8 %conv1, !dbg !3168
}

; Function Attrs: nounwind uwtable
define internal i32 @execute_vrp() #5 !dbg !3169 {
entry:
  %e = alloca %struct.edge_def*, align 8
  %su = alloca %struct.switch_update*, align 8
  %0 = bitcast %struct.edge_def** %e to i8*, !dbg !3181
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3181
  %1 = bitcast %struct.switch_update** %su to i8*, !dbg !3182
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3182
  tail call void @loop_optimizer_init(i32 15) #6, !dbg !3183
  tail call void @rewrite_into_loop_closed_ssa(%struct.bitmap_head_def* null, i32 2048) #6, !dbg !3184
  tail call void @scev_initialize() #6, !dbg !3185
  tail call fastcc void @insert_range_assertions() #7, !dbg !3186
  %call = tail call fastcc %struct.VEC_edge_heap* @VEC_edge_heap_alloc(i32 10) #7, !dbg !3187
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !3188
  %call1 = tail call fastcc %struct.VEC_switch_update_heap* @VEC_switch_update_heap_alloc(i32 5) #7, !dbg !3189
  store %struct.VEC_switch_update_heap* %call1, %struct.VEC_switch_update_heap** @to_update_switch_stmts, align 8, !dbg !3190
  tail call void @threadedge_initialize_values() #6, !dbg !3191
  tail call fastcc void @vrp_initialize() #7, !dbg !3192
  tail call void @ssa_propagate(i32 (%union.gimple_statement_d*, %struct.edge_def**, %union.tree_node**)* nonnull @vrp_visit_stmt, i32 (%union.gimple_statement_d*)* nonnull @vrp_visit_phi_node) #6, !dbg !3193
  tail call fastcc void @vrp_finalize() #7, !dbg !3194
  tail call fastcc void @remove_range_assertions() #7, !dbg !3195
  tail call void @update_ssa(i32 2048) #6, !dbg !3196
  tail call fastcc void @finalize_jump_threads() #7, !dbg !3197
  call void @llvm.dbg.value(metadata i32 0, metadata !3171, metadata !DIExpression()), !dbg !3198
  br label %for.cond, !dbg !3199

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ], !dbg !3201
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3171, metadata !DIExpression()), !dbg !3198
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !3202
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %2, i64 0, i32 0, !dbg !3202
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !3172, metadata !DIExpression(DW_OP_deref)), !dbg !3198
  %call2 = call fastcc i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %base, i32 %i.0, %struct.edge_def** nonnull %e) #7, !dbg !3202
  %tobool3 = icmp eq i32 %call2, 0, !dbg !3204
  br i1 %tobool3, label %for.cond4.preheader, label %for.body, !dbg !3204

for.cond4.preheader:                              ; preds = %for.cond
  br label %for.cond4, !dbg !3205

for.body:                                         ; preds = %for.cond
  %3 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3206
  call void @llvm.dbg.value(metadata %struct.edge_def* %3, metadata !3172, metadata !DIExpression()), !dbg !3198
  call void @remove_edge(%struct.edge_def* %3) #6, !dbg !3207
  %inc = add nuw nsw i32 %i.0, 1, !dbg !3208
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3171, metadata !DIExpression()), !dbg !3198
  br label %for.cond, !dbg !3209, !llvm.loop !3210

for.cond4:                                        ; preds = %for.cond4.preheader, %for.end25
  %i.1 = phi i32 [ %inc33, %for.end25 ], [ 0, %for.cond4.preheader ], !dbg !3212
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !3171, metadata !DIExpression()), !dbg !3198
  %4 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** @to_update_switch_stmts, align 8, !dbg !3213
  %base7 = getelementptr inbounds %struct.VEC_switch_update_heap, %struct.VEC_switch_update_heap* %4, i64 0, i32 0, !dbg !3213
  call void @llvm.dbg.value(metadata %struct.switch_update** %su, metadata !3173, metadata !DIExpression(DW_OP_deref)), !dbg !3198
  %call11 = call fastcc i32 @VEC_switch_update_base_iterate(%struct.VEC_switch_update_base* %base7, i32 %i.1, %struct.switch_update** nonnull %su) #7, !dbg !3213
  %tobool12 = icmp eq i32 %call11, 0, !dbg !3205
  br i1 %tobool12, label %for.end34, label %for.body13, !dbg !3205

for.body13:                                       ; preds = %for.cond4
  %5 = load %struct.switch_update*, %struct.switch_update** %su, align 8, !dbg !3214
  call void @llvm.dbg.value(metadata %struct.switch_update* %5, metadata !3173, metadata !DIExpression()), !dbg !3198
  %vec = getelementptr inbounds %struct.switch_update, %struct.switch_update* %5, i64 0, i32 1, !dbg !3214
  %6 = bitcast %union.tree_node** %vec to %struct.tree_vec**, !dbg !3214
  %7 = load %struct.tree_vec*, %struct.tree_vec** %6, align 8, !dbg !3214
  %length = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %7, i64 0, i32 1, !dbg !3214
  %8 = load i32, i32* %length, align 8, !dbg !3214
  %conv = sext i32 %8 to i64, !dbg !3214
  call void @llvm.dbg.value(metadata i64 %conv, metadata !3179, metadata !DIExpression()), !dbg !3215
  call void @llvm.dbg.value(metadata %struct.switch_update* %5, metadata !3173, metadata !DIExpression()), !dbg !3198
  %stmt = getelementptr inbounds %struct.switch_update, %struct.switch_update* %5, i64 0, i32 0, !dbg !3216
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3216
  call fastcc void @gimple_switch_set_num_labels(%union.gimple_statement_d* %9, i32 %8) #7, !dbg !3217
  call void @llvm.dbg.value(metadata i64 0, metadata !3175, metadata !DIExpression()), !dbg !3215
  br label %for.cond16, !dbg !3218

for.cond16:                                       ; preds = %for.body18, %for.body13
  %j.0 = phi i64 [ 0, %for.body13 ], [ %inc24, %for.body18 ], !dbg !3220
  call void @llvm.dbg.value(metadata i64 %j.0, metadata !3175, metadata !DIExpression()), !dbg !3215
  %10 = load %struct.switch_update*, %struct.switch_update** %su, align 8, !dbg !3215
  call void @llvm.dbg.value(metadata %struct.switch_update* %10, metadata !3173, metadata !DIExpression()), !dbg !3198
  %stmt19 = getelementptr inbounds %struct.switch_update, %struct.switch_update* %10, i64 0, i32 0, !dbg !3215
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt19, align 8, !dbg !3215
  %exitcond = icmp eq i64 %j.0, %conv, !dbg !3221
  br i1 %exitcond, label %for.end25, label %for.body18, !dbg !3223

for.body18:                                       ; preds = %for.cond16
  %conv20 = trunc i64 %j.0 to i32, !dbg !3224
  call void @llvm.dbg.value(metadata %struct.switch_update* %10, metadata !3173, metadata !DIExpression()), !dbg !3198
  %vec21 = getelementptr inbounds %struct.switch_update, %struct.switch_update* %10, i64 0, i32 1, !dbg !3225
  %12 = bitcast %union.tree_node** %vec21 to %struct.tree_vec**, !dbg !3225
  %13 = load %struct.tree_vec*, %struct.tree_vec** %12, align 8, !dbg !3225
  %arrayidx = getelementptr inbounds %struct.tree_vec, %struct.tree_vec* %13, i64 0, i32 2, i64 %j.0, !dbg !3225
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3225
  call fastcc void @gimple_switch_set_label(%union.gimple_statement_d* %11, i32 %conv20, %union.tree_node* %14) #7, !dbg !3226
  %inc24 = add i64 %j.0, 1, !dbg !3227
  call void @llvm.dbg.value(metadata i64 %inc24, metadata !3175, metadata !DIExpression()), !dbg !3215
  br label %for.cond16, !dbg !3228, !llvm.loop !3229

for.end25:                                        ; preds = %for.cond16
  %.lcssa = phi %union.gimple_statement_d* [ %11, %for.cond16 ], !dbg !3215
  %call27 = call fastcc %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %.lcssa) #7, !dbg !3231
  call void @llvm.dbg.value(metadata %union.tree_node* %call27, metadata !3180, metadata !DIExpression()), !dbg !3215
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3232
  store %union.tree_node* null, %union.tree_node** %operands, align 8, !dbg !3233
  %arrayidx31 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !3234
  store %union.tree_node* null, %union.tree_node** %arrayidx31, align 8, !dbg !3235
  %inc33 = add nuw nsw i32 %i.1, 1, !dbg !3236
  call void @llvm.dbg.value(metadata i32 %inc33, metadata !3171, metadata !DIExpression()), !dbg !3198
  br label %for.cond4, !dbg !3237, !llvm.loop !3238

for.end34:                                        ; preds = %for.cond4
  %15 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !3240
  %base37 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %15, i64 0, i32 0, !dbg !3240
  %call41 = call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %base37) #7, !dbg !3240
  %cmp42 = icmp eq i32 %call41, 0, !dbg !3242
  br i1 %cmp42, label %if.end, label %if.then, !dbg !3243

if.then:                                          ; preds = %for.end34
  call void @free_dominance_info(i32 1) #6, !dbg !3244
  br label %if.end, !dbg !3244

if.end:                                           ; preds = %for.end34, %if.then
  call fastcc void @VEC_edge_heap_free(%struct.VEC_edge_heap** nonnull @to_remove_edges) #7, !dbg !3245
  call fastcc void @VEC_switch_update_heap_free(%struct.VEC_switch_update_heap** nonnull @to_update_switch_stmts) #7, !dbg !3246
  call void @threadedge_finalize_values() #6, !dbg !3247
  call void @scev_finalize() #6, !dbg !3248
  call void @loop_optimizer_finalize() #6, !dbg !3249
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3250
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3250
  ret i32 0, !dbg !3251
}

declare dso_local i8* @xcalloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @nonnull_arg_p(%union.tree_node* %arg) unnamed_addr #5 !dbg !3252 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %arg, metadata !3254, metadata !DIExpression()), !dbg !3259
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3260
  %bf.load = load i64, i64* %0, align 8, !dbg !3260
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3260
  %cmp = icmp eq i64 %bf.cast1, 34, !dbg !3260
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !3260

land.lhs.true:                                    ; preds = %entry
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %arg, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3260
  %1 = bitcast %union.tree_node** %type to i64**, !dbg !3260
  %2 = load i64*, i64** %1, align 8, !dbg !3260
  %bf.load2 = load i64, i64* %2, align 8, !dbg !3260
  %bf.cast42 = and i64 %bf.load2, 65535, !dbg !3260
  %cmp5 = icmp eq i64 %bf.cast42, 10, !dbg !3260
  br i1 %cmp5, label %cond.end, label %lor.lhs.false, !dbg !3260

lor.lhs.false:                                    ; preds = %land.lhs.true
  %cmp12 = icmp eq i64 %bf.cast42, 12, !dbg !3260
  br i1 %cmp12, label %cond.end, label %cond.true, !dbg !3260

cond.true:                                        ; preds = %lor.lhs.false, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 318, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !3260
  br label %cond.end, !dbg !3260

cond.end:                                         ; preds = %land.lhs.true, %lor.lhs.false, %cond.true
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3261
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, i32 7, !dbg !3263
  %4 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !3263
  %cmp13 = icmp eq %union.tree_node* %4, %arg, !dbg !3264
  br i1 %cmp13, label %cleanup, label %if.end, !dbg !3265

if.end:                                           ; preds = %cond.end
  %5 = load %struct.tree_common*, %struct.tree_common** bitcast (%union.tree_node** @current_function_decl to %struct.tree_common**), align 8, !dbg !3266
  %type15 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %5, i64 0, i32 2, !dbg !3266
  %6 = bitcast %union.tree_node** %type15 to %struct.tree_type**, !dbg !3266
  %7 = load %struct.tree_type*, %struct.tree_type** %6, align 8, !dbg !3266
  %attributes = getelementptr inbounds %struct.tree_type, %struct.tree_type* %7, i64 0, i32 4, !dbg !3267
  %8 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !3267
  %call = tail call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i64 0, i64 0), %union.tree_node* %8) #6, !dbg !3268
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !3256, metadata !DIExpression()), !dbg !3259
  %cmp17 = icmp eq %union.tree_node* %call, null, !dbg !3269
  br i1 %cmp17, label %cleanup, label %if.end19, !dbg !3271

if.end19:                                         ; preds = %if.end
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3272
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !3272
  %cmp20 = icmp eq %union.tree_node* %10, null, !dbg !3274
  br i1 %cmp20, label %cleanup, label %if.end22, !dbg !3275

if.end22:                                         ; preds = %if.end19
  call void @llvm.dbg.value(metadata i64 1, metadata !3258, metadata !DIExpression()), !dbg !3259
  %11 = load %struct.tree_decl_non_common*, %struct.tree_decl_non_common** bitcast (%union.tree_node** @current_function_decl to %struct.tree_decl_non_common**), align 8, !dbg !3276
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %11, i64 0, i32 2, !dbg !3276
  br label %for.cond, !dbg !3278

for.cond:                                         ; preds = %for.inc, %if.end22
  %arg_num.0 = phi i64 [ 1, %if.end22 ], [ %inc, %for.inc ], !dbg !3279
  %t.0.in = phi %union.tree_node** [ %arguments, %if.end22 ], [ %chain, %for.inc ]
  %t.0 = load %union.tree_node*, %union.tree_node** %t.0.in, align 8, !dbg !3279
  call void @llvm.dbg.value(metadata %union.tree_node* %t.0, metadata !3255, metadata !DIExpression()), !dbg !3259
  call void @llvm.dbg.value(metadata i64 %arg_num.0, metadata !3258, metadata !DIExpression()), !dbg !3259
  %tobool = icmp eq %union.tree_node* %t.0, null, !dbg !3280
  %cmp23 = icmp eq %union.tree_node* %t.0, %arg, !dbg !3281
  %or.cond = or i1 %tobool, %cmp23, !dbg !3280
  br i1 %or.cond, label %for.end, label %for.inc, !dbg !3280

for.inc:                                          ; preds = %for.cond
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %t.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3285
  %inc = add i64 %arg_num.0, 1, !dbg !3286
  call void @llvm.dbg.value(metadata i64 %inc, metadata !3258, metadata !DIExpression()), !dbg !3259
  br label %for.cond, !dbg !3287, !llvm.loop !3288

for.end:                                          ; preds = %for.cond
  %arg_num.0.lcssa = phi i64 [ %arg_num.0, %for.cond ], !dbg !3279
  %cmp23.lcssa = phi i1 [ %cmp23, %for.cond ], !dbg !3281
  call void @llvm.dbg.value(metadata i64 %arg_num.0.lcssa, metadata !3258, metadata !DIExpression()), !dbg !3259
  call void @llvm.dbg.value(metadata i64 %arg_num.0.lcssa, metadata !3258, metadata !DIExpression()), !dbg !3259
  call void @llvm.dbg.value(metadata i64 %arg_num.0.lcssa, metadata !3258, metadata !DIExpression()), !dbg !3259
  br i1 %cmp23.lcssa, label %cond.end30, label %cond.true28, !dbg !3290

cond.true28:                                      ; preds = %for.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 344, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !3290
  br label %cond.end30, !dbg !3290

cond.end30:                                       ; preds = %for.end, %cond.true28
  br label %for.cond34, !dbg !3291

for.cond34:                                       ; preds = %for.inc43, %cond.end30
  %t.1.in = phi %union.tree_node** [ %9, %cond.end30 ], [ %chain45, %for.inc43 ]
  %t.1 = load %union.tree_node*, %union.tree_node** %t.1.in, align 8, !dbg !3293
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1, metadata !3255, metadata !DIExpression()), !dbg !3259
  %tobool35 = icmp eq %union.tree_node* %t.1, null, !dbg !3294
  br i1 %tobool35, label %cleanup.loopexit, label %for.body36, !dbg !3294

for.body36:                                       ; preds = %for.cond34
  %12 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3295
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !3295
  %call39 = tail call i32 @compare_tree_int(%union.tree_node* %13, i64 %arg_num.0.lcssa) #6, !dbg !3299
  %cmp40 = icmp eq i32 %call39, 0, !dbg !3300
  br i1 %cmp40, label %cleanup.loopexit, label %for.inc43, !dbg !3301

for.inc43:                                        ; preds = %for.body36
  %chain45 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3302
  br label %for.cond34, !dbg !3303, !llvm.loop !3304

cleanup.loopexit:                                 ; preds = %for.body36, %for.cond34
  %retval.0.ph = phi i8 [ 0, %for.cond34 ], [ 1, %for.body36 ]
  br label %cleanup, !dbg !3306

cleanup:                                          ; preds = %cleanup.loopexit, %if.end19, %if.end, %cond.end
  %retval.0 = phi i8 [ 1, %cond.end ], [ 0, %if.end ], [ 1, %if.end19 ], [ %retval.0.ph, %cleanup.loopexit ], !dbg !3259
  ret i8 %retval.0, !dbg !3306
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_value_range_to_nonnull(%struct.value_range_d* %vr, %union.tree_node* %type) unnamed_addr #0 !dbg !3307 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !3311, metadata !DIExpression()), !dbg !3314
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !3312, metadata !DIExpression()), !dbg !3314
  %call = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type, i64 0) #6, !dbg !3315
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !3313, metadata !DIExpression()), !dbg !3314
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !3316
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !3316
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 2, %union.tree_node* %call, %union.tree_node* %call, %struct.bitmap_head_def* %0) #7, !dbg !3317
  ret void, !dbg !3318
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) unnamed_addr #0 !dbg !3319 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !3321, metadata !DIExpression()), !dbg !3322
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !3323
  store i32 3, i32* %type, align 8, !dbg !3324
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !3325
  store %union.tree_node* null, %union.tree_node** %max, align 8, !dbg !3326
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !3327
  store %union.tree_node* null, %union.tree_node** %min, align 8, !dbg !3328
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !3329
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !3329
  %tobool = icmp eq %struct.bitmap_head_def* %0, null, !dbg !3331
  br i1 %tobool, label %if.end, label %if.then, !dbg !3332

if.then:                                          ; preds = %entry
  tail call void @bitmap_clear(%struct.bitmap_head_def* nonnull %0) #6, !dbg !3333
  br label %if.end, !dbg !3333

if.end:                                           ; preds = %entry, %if.then
  ret void, !dbg !3334
}

declare dso_local void @fancy_abort(i8*, i32, i8*) local_unnamed_addr #2

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @set_value_range(%struct.value_range_d* %vr, i32 %t, %union.tree_node* %min, %union.tree_node* %max, %struct.bitmap_head_def* %equiv) unnamed_addr #5 !dbg !3335 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !3339, metadata !DIExpression()), !dbg !3344
  call void @llvm.dbg.value(metadata i32 %t, metadata !3340, metadata !DIExpression()), !dbg !3344
  call void @llvm.dbg.value(metadata %union.tree_node* %min, metadata !3341, metadata !DIExpression()), !dbg !3344
  call void @llvm.dbg.value(metadata %union.tree_node* %max, metadata !3342, metadata !DIExpression()), !dbg !3344
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %equiv, metadata !3343, metadata !DIExpression()), !dbg !3344
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !3345
  store i32 %t, i32* %type, align 8, !dbg !3346
  %min1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !3347
  store %union.tree_node* %min, %union.tree_node** %min1, align 8, !dbg !3348
  %max2 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !3349
  store %union.tree_node* %max, %union.tree_node** %max2, align 8, !dbg !3350
  %equiv3 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !3351
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv3, align 8, !dbg !3351
  %cmp = icmp eq %struct.bitmap_head_def* %0, null, !dbg !3353
  %cmp4 = icmp ne %struct.bitmap_head_def* %equiv, null, !dbg !3354
  %or.cond = and i1 %cmp, %cmp4, !dbg !3355
  br i1 %or.cond, label %if.then, label %if.end, !dbg !3355

if.then:                                          ; preds = %entry
  %call = tail call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null) #6, !dbg !3356
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %equiv3, align 8, !dbg !3357
  br label %if.end, !dbg !3358

if.end:                                           ; preds = %if.then, %entry
  %1 = phi %struct.bitmap_head_def* [ %call, %if.then ], [ %0, %entry ], !dbg !3359
  %cmp7 = icmp eq %struct.bitmap_head_def* %1, %equiv, !dbg !3361
  br i1 %cmp7, label %if.end15, label %if.then8, !dbg !3362

if.then8:                                         ; preds = %if.end
  %tobool = icmp eq %struct.bitmap_head_def* %equiv, null, !dbg !3363
  br i1 %tobool, label %if.else, label %land.lhs.true9, !dbg !3366

land.lhs.true9:                                   ; preds = %if.then8
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %equiv, i64 0, i32 0, !dbg !3367
  %2 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !3367
  %tobool10 = icmp eq %struct.bitmap_element_def* %2, null, !dbg !3367
  br i1 %tobool10, label %if.else, label %if.then11, !dbg !3368

if.then11:                                        ; preds = %land.lhs.true9
  tail call void @bitmap_copy(%struct.bitmap_head_def* %1, %struct.bitmap_head_def* nonnull %equiv) #6, !dbg !3369
  br label %if.end15, !dbg !3369

if.else:                                          ; preds = %land.lhs.true9, %if.then8
  tail call void @bitmap_clear(%struct.bitmap_head_def* %1) #6, !dbg !3370
  br label %if.end15

if.end15:                                         ; preds = %if.end, %if.then11, %if.else
  ret void, !dbg !3371
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) local_unnamed_addr #2

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) local_unnamed_addr #2

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc i32 @compare_values_warnv(%union.tree_node* %val1, %union.tree_node* %val2, i8* %strict_overflow_p) unnamed_addr #5 !dbg !3372 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val1, metadata !3376, metadata !DIExpression()), !dbg !3390
  call void @llvm.dbg.value(metadata %union.tree_node* %val2, metadata !3377, metadata !DIExpression()), !dbg !3390
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !3378, metadata !DIExpression()), !dbg !3390
  %cmp = icmp eq %union.tree_node* %val1, %val2, !dbg !3391
  br i1 %cmp, label %return, label %if.end, !dbg !3393

if.end:                                           ; preds = %entry
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3394
  %0 = bitcast %union.tree_node** %type to i64**, !dbg !3394
  %1 = load i64*, i64** %0, align 8, !dbg !3394
  %bf.load = load i64, i64* %1, align 8, !dbg !3394
  %bf.cast4 = and i64 %bf.load, 65535, !dbg !3394
  %cmp1 = icmp eq i64 %bf.cast4, 10, !dbg !3394
  %2 = bitcast i64* %1 to %union.tree_node*, !dbg !3394
  br i1 %cmp1, label %lor.end, label %lor.rhs, !dbg !3394

lor.rhs:                                          ; preds = %if.end
  %cmp8 = icmp eq i64 %bf.cast4, 12, !dbg !3394
  br label %lor.end, !dbg !3394

lor.end:                                          ; preds = %lor.rhs, %if.end
  %3 = phi i1 [ true, %if.end ], [ %cmp8, %lor.rhs ]
  %type10 = getelementptr inbounds %union.tree_node, %union.tree_node* %val2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3394
  %4 = bitcast %union.tree_node** %type10 to i64**, !dbg !3394
  %5 = load i64*, i64** %4, align 8, !dbg !3394
  %bf.load12 = load i64, i64* %5, align 8, !dbg !3394
  %bf.cast146 = and i64 %bf.load12, 65535, !dbg !3394
  %cmp15 = icmp eq i64 %bf.cast146, 10, !dbg !3394
  br i1 %cmp15, label %lor.end24, label %lor.rhs16, !dbg !3394

lor.rhs16:                                        ; preds = %lor.end
  %cmp23 = icmp eq i64 %bf.cast146, 12, !dbg !3394
  br label %lor.end24, !dbg !3394

lor.end24:                                        ; preds = %lor.rhs16, %lor.end
  %6 = phi i1 [ true, %lor.end ], [ %cmp23, %lor.rhs16 ]
  %7 = xor i1 %3, %6, !dbg !3394
  br i1 %7, label %cond.true, label %cond.end, !dbg !3394

cond.true:                                        ; preds = %lor.end24
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1074, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !3394
  %.pre = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3395
  br label %cond.end, !dbg !3394

cond.end:                                         ; preds = %lor.end24, %cond.true
  %8 = phi %union.tree_node* [ %2, %lor.end24 ], [ %.pre, %cond.true ], !dbg !3395
  %call = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %8, %union.tree_node* %val2) #6, !dbg !3395
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !3377, metadata !DIExpression()), !dbg !3390
  %call29 = tail call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %call) #6, !dbg !3396
  call void @llvm.dbg.value(metadata %union.tree_node* %call29, metadata !3377, metadata !DIExpression()), !dbg !3390
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %val1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3397
  %bf.load31 = load i64, i64* %9, align 8, !dbg !3397
  %bf.cast338 = and i64 %bf.load31, 65535, !dbg !3398
  %cmp34 = icmp eq i64 %bf.cast338, 141, !dbg !3398
  br i1 %cmp34, label %land.lhs.true, label %lor.lhs.false, !dbg !3399

lor.lhs.false:                                    ; preds = %cond.end
  %cmp39 = icmp eq i64 %bf.cast338, 63, !dbg !3400
  br i1 %cmp39, label %land.lhs.true, label %lor.lhs.false40, !dbg !3401

lor.lhs.false40:                                  ; preds = %lor.lhs.false
  %cmp45 = icmp eq i64 %bf.cast338, 64, !dbg !3402
  br i1 %cmp45, label %land.lhs.true, label %if.end218, !dbg !3403

land.lhs.true:                                    ; preds = %lor.lhs.false40, %lor.lhs.false, %cond.end
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3404
  %bf.load47 = load i64, i64* %10, align 8, !dbg !3404
  %bf.cast4917 = and i64 %bf.load47, 65535, !dbg !3405
  %cmp50 = icmp eq i64 %bf.cast4917, 141, !dbg !3405
  br i1 %cmp50, label %if.then63, label %lor.lhs.false51, !dbg !3406

lor.lhs.false51:                                  ; preds = %land.lhs.true
  %cmp56 = icmp eq i64 %bf.cast4917, 63, !dbg !3407
  br i1 %cmp56, label %if.then63, label %lor.lhs.false57, !dbg !3408

lor.lhs.false57:                                  ; preds = %lor.lhs.false51
  %cmp62 = icmp eq i64 %bf.cast4917, 64, !dbg !3409
  br i1 %cmp62, label %if.then63, label %if.end218, !dbg !3410

if.then63:                                        ; preds = %lor.lhs.false57, %lor.lhs.false51, %land.lhs.true
  br i1 %cmp34, label %if.end92, label %if.else, !dbg !3411

if.else:                                          ; preds = %if.then63
  %11 = trunc i64 %bf.load31 to i32, !dbg !3412
  %bf.cast73 = and i32 %11, 65535, !dbg !3412
  call void @llvm.dbg.value(metadata i32 %bf.cast73, metadata !3385, metadata !DIExpression()), !dbg !3415
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %val1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3416
  %12 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !3416
  call void @llvm.dbg.value(metadata %union.tree_node* %12, metadata !3379, metadata !DIExpression()), !dbg !3415
  %arrayidx76 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !3417
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx76, align 8, !dbg !3417
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !3382, metadata !DIExpression()), !dbg !3415
  %call77 = tail call i32 @tree_int_cst_sgn(%union.tree_node* %13) #6, !dbg !3418
  %cmp78 = icmp eq i32 %call77, -1, !dbg !3420
  br i1 %cmp78, label %if.then79, label %if.end92, !dbg !3421

if.then79:                                        ; preds = %if.else
  %call80 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %13) #7, !dbg !3422
  %tobool = icmp eq i8 %call80, 0, !dbg !3422
  br i1 %tobool, label %if.end82, label %cleanup, !dbg !3425

if.end82:                                         ; preds = %if.then79
  %type84 = getelementptr inbounds %union.tree_node, %union.tree_node* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3426
  %14 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !3426
  %call85 = tail call %union.tree_node* @fold_unary_to_constant(i32 79, %union.tree_node* %14, %union.tree_node* %13) #6, !dbg !3427
  call void @llvm.dbg.value(metadata %union.tree_node* %call85, metadata !3382, metadata !DIExpression()), !dbg !3415
  %tobool86 = icmp eq %union.tree_node* %call85, null, !dbg !3428
  br i1 %tobool86, label %cleanup, label %if.end88, !dbg !3430

if.end88:                                         ; preds = %if.end82
  %cmp89 = icmp eq i32 %bf.cast73, 64, !dbg !3431
  %cond90 = select i1 %cmp89, i32 63, i32 64, !dbg !3432
  call void @llvm.dbg.value(metadata i32 %cond90, metadata !3385, metadata !DIExpression()), !dbg !3415
  br label %if.end92, !dbg !3433

if.end92:                                         ; preds = %if.else, %if.end88, %if.then63
  %code1.1 = phi i32 [ 141, %if.then63 ], [ %cond90, %if.end88 ], [ %bf.cast73, %if.else ], !dbg !3434
  %c1.1 = phi %union.tree_node* [ null, %if.then63 ], [ %call85, %if.end88 ], [ %13, %if.else ], !dbg !3434
  %n1.0 = phi %union.tree_node* [ %val1, %if.then63 ], [ %12, %if.end88 ], [ %12, %if.else ], !dbg !3434
  call void @llvm.dbg.value(metadata %union.tree_node* %n1.0, metadata !3379, metadata !DIExpression()), !dbg !3415
  call void @llvm.dbg.value(metadata %union.tree_node* %c1.1, metadata !3382, metadata !DIExpression()), !dbg !3415
  call void @llvm.dbg.value(metadata i32 %code1.1, metadata !3385, metadata !DIExpression()), !dbg !3415
  %bf.load94 = load i64, i64* %10, align 8, !dbg !3435
  %bf.cast9621 = and i64 %bf.load94, 65535, !dbg !3437
  %cmp97 = icmp eq i64 %bf.cast9621, 141, !dbg !3437
  br i1 %cmp97, label %if.end126, label %if.else99, !dbg !3438

if.else99:                                        ; preds = %if.end92
  %15 = trunc i64 %bf.load94 to i32, !dbg !3439
  %bf.cast103 = and i32 %15, 65535, !dbg !3439
  call void @llvm.dbg.value(metadata i32 %bf.cast103, metadata !3386, metadata !DIExpression()), !dbg !3415
  %operands105 = getelementptr inbounds %union.tree_node, %union.tree_node* %call29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3441
  %16 = load %union.tree_node*, %union.tree_node** %operands105, align 8, !dbg !3441
  call void @llvm.dbg.value(metadata %union.tree_node* %16, metadata !3383, metadata !DIExpression()), !dbg !3415
  %arrayidx109 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands105, i64 1, !dbg !3442
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx109, align 8, !dbg !3442
  call void @llvm.dbg.value(metadata %union.tree_node* %17, metadata !3384, metadata !DIExpression()), !dbg !3415
  %call110 = tail call i32 @tree_int_cst_sgn(%union.tree_node* %17) #6, !dbg !3443
  %cmp111 = icmp eq i32 %call110, -1, !dbg !3445
  br i1 %cmp111, label %if.then112, label %if.end126, !dbg !3446

if.then112:                                       ; preds = %if.else99
  %call113 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %17) #7, !dbg !3447
  %tobool114 = icmp eq i8 %call113, 0, !dbg !3447
  br i1 %tobool114, label %if.end116, label %cleanup, !dbg !3450

if.end116:                                        ; preds = %if.then112
  %type118 = getelementptr inbounds %union.tree_node, %union.tree_node* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3451
  %18 = load %union.tree_node*, %union.tree_node** %type118, align 8, !dbg !3451
  %call119 = tail call %union.tree_node* @fold_unary_to_constant(i32 79, %union.tree_node* %18, %union.tree_node* %17) #6, !dbg !3452
  call void @llvm.dbg.value(metadata %union.tree_node* %call119, metadata !3384, metadata !DIExpression()), !dbg !3415
  %tobool120 = icmp eq %union.tree_node* %call119, null, !dbg !3453
  br i1 %tobool120, label %cleanup, label %if.end122, !dbg !3455

if.end122:                                        ; preds = %if.end116
  %cmp123 = icmp eq i32 %bf.cast103, 64, !dbg !3456
  %cond124 = select i1 %cmp123, i32 63, i32 64, !dbg !3457
  call void @llvm.dbg.value(metadata i32 %cond124, metadata !3386, metadata !DIExpression()), !dbg !3415
  br label %if.end126, !dbg !3458

if.end126:                                        ; preds = %if.else99, %if.end122, %if.end92
  %c2.1 = phi %union.tree_node* [ null, %if.end92 ], [ %call119, %if.end122 ], [ %17, %if.else99 ], !dbg !3459
  %n2.0 = phi %union.tree_node* [ %call29, %if.end92 ], [ %16, %if.end122 ], [ %16, %if.else99 ], !dbg !3459
  %code2.1 = phi i32 [ 141, %if.end92 ], [ %cond124, %if.end122 ], [ %bf.cast103, %if.else99 ], !dbg !3459
  call void @llvm.dbg.value(metadata i32 %code2.1, metadata !3386, metadata !DIExpression()), !dbg !3415
  call void @llvm.dbg.value(metadata %union.tree_node* %n2.0, metadata !3383, metadata !DIExpression()), !dbg !3415
  call void @llvm.dbg.value(metadata %union.tree_node* %c2.1, metadata !3384, metadata !DIExpression()), !dbg !3415
  %cmp127 = icmp eq %union.tree_node* %n1.0, %n2.0, !dbg !3460
  br i1 %cmp127, label %if.end129, label %cleanup, !dbg !3462

if.end129:                                        ; preds = %if.end126
  %cmp130 = icmp eq i32 %code1.1, 141, !dbg !3463
  %cmp132 = icmp eq i32 %code2.1, 141, !dbg !3465
  %or.cond = and i1 %cmp130, %cmp132, !dbg !3466
  br i1 %or.cond, label %cleanup, label %if.end134, !dbg !3466

if.end134:                                        ; preds = %if.end129
  %19 = load i64*, i64** %0, align 8, !dbg !3467
  %bf.load138 = load i64, i64* %19, align 8, !dbg !3467
  %bf.cast14022 = and i64 %bf.load138, 2097152, !dbg !3467
  %tobool141 = icmp eq i64 %bf.cast14022, 0, !dbg !3467
  %20 = load i32, i32* @flag_wrapv, align 4, !dbg !3467
  %21 = load i32, i32* @flag_trapv, align 4, !dbg !3467
  %22 = or i32 %20, %21, !dbg !3467
  %23 = icmp eq i32 %22, 0, !dbg !3467
  %or.cond2.not = and i1 %tobool141, %23, !dbg !3467
  %24 = load i32, i32* @flag_strict_overflow, align 4, !dbg !3467
  %tobool147 = icmp ne i32 %24, 0, !dbg !3467
  %or.cond3 = and i1 %or.cond2.not, %tobool147, !dbg !3467
  br i1 %or.cond3, label %if.end149, label %cleanup, !dbg !3467

if.end149:                                        ; preds = %if.end134
  %cmp150 = icmp eq i8* %strict_overflow_p, null, !dbg !3469
  br i1 %cmp150, label %if.end170, label %land.lhs.true151, !dbg !3471

land.lhs.true151:                                 ; preds = %if.end149
  br i1 %cmp130, label %land.lhs.true160, label %lor.lhs.false153, !dbg !3472

lor.lhs.false153:                                 ; preds = %land.lhs.true151
  %bf.load155 = load i64, i64* %9, align 8, !dbg !3473
  %bf.cast15826 = and i64 %bf.load155, 8388608, !dbg !3473
  %tobool159 = icmp eq i64 %bf.cast15826, 0, !dbg !3473
  br i1 %tobool159, label %land.lhs.true160, label %if.end170, !dbg !3474

land.lhs.true160:                                 ; preds = %lor.lhs.false153, %land.lhs.true151
  br i1 %cmp132, label %if.then169, label %lor.lhs.false162, !dbg !3475

lor.lhs.false162:                                 ; preds = %land.lhs.true160
  %bf.load164 = load i64, i64* %10, align 8, !dbg !3476
  %bf.cast16727 = and i64 %bf.load164, 8388608, !dbg !3476
  %tobool168 = icmp eq i64 %bf.cast16727, 0, !dbg !3476
  br i1 %tobool168, label %if.then169, label %if.end170, !dbg !3477

if.then169:                                       ; preds = %lor.lhs.false162, %land.lhs.true160
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !3478
  br label %if.end170, !dbg !3479

if.end170:                                        ; preds = %lor.lhs.false162, %lor.lhs.false153, %if.end149, %if.then169
  %trunc = trunc i32 %code1.1 to i16, !dbg !3480
  switch i16 %trunc, label %if.end212 [
    i16 141, label %if.then172
    i16 63, label %if.then182
    i16 64, label %if.then197
  ], !dbg !3480

if.then172:                                       ; preds = %if.end170
  %trunc25 = trunc i32 %code2.1 to i16, !dbg !3481
  switch i16 %trunc25, label %if.end212 [
    i16 63, label %cleanup
    i16 64, label %if.then177
  ], !dbg !3481

if.then177:                                       ; preds = %if.then172
  br label %cleanup, !dbg !3484

if.then182:                                       ; preds = %if.end170
  %trunc24 = trunc i32 %code2.1 to i16, !dbg !3487
  switch i16 %trunc24, label %if.end212 [
    i16 141, label %cleanup
    i16 63, label %if.then187
    i16 64, label %cleanup
  ], !dbg !3487

if.then187:                                       ; preds = %if.then182
  %call188 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %c1.1, %union.tree_node* %c2.1, i8* %strict_overflow_p) #7, !dbg !3490
  br label %cleanup, !dbg !3493

if.then197:                                       ; preds = %if.end170
  %trunc23 = trunc i32 %code2.1 to i16, !dbg !3494
  switch i16 %trunc23, label %if.end212 [
    i16 141, label %cleanup
    i16 63, label %cleanup
    i16 64, label %if.then205
  ], !dbg !3494

if.then205:                                       ; preds = %if.then197
  %call206 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %c2.1, %union.tree_node* %c1.1, i8* %strict_overflow_p) #7, !dbg !3497
  br label %cleanup, !dbg !3501

if.end212:                                        ; preds = %if.then182, %if.then197, %if.end170, %if.then172
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1190, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !3502
  br label %cleanup, !dbg !3503

cleanup:                                          ; preds = %if.end82, %if.then79, %if.end116, %if.then112, %if.end126, %if.then197, %if.then197, %if.then182, %if.then182, %if.then172, %if.end134, %if.end129, %if.end212, %if.then205, %if.then187, %if.then177
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then177 ], [ true, %if.end212 ], [ false, %if.then187 ], [ false, %if.then205 ], [ false, %if.then79 ], [ false, %if.end82 ], [ false, %if.then112 ], [ false, %if.end116 ], [ false, %if.end126 ], [ false, %if.end129 ], [ false, %if.end134 ], [ false, %if.then172 ], [ false, %if.then182 ], [ false, %if.then182 ], [ false, %if.then197 ], [ false, %if.then197 ]
  %retval.0 = phi i32 [ 1, %if.then177 ], [ undef, %if.end212 ], [ %call188, %if.then187 ], [ %call206, %if.then205 ], [ -2, %if.then79 ], [ -2, %if.end82 ], [ -2, %if.then112 ], [ -2, %if.end116 ], [ -2, %if.end126 ], [ 0, %if.end129 ], [ -2, %if.end134 ], [ -1, %if.then172 ], [ 1, %if.then182 ], [ 1, %if.then182 ], [ -1, %if.then197 ], [ -1, %if.then197 ]
  br i1 %cleanup.dest.slot.0, label %if.end218, label %return

if.end218:                                        ; preds = %cleanup, %lor.lhs.false57, %lor.lhs.false40
  %call219 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %val1) #6, !dbg !3504
  %tobool220 = icmp eq i8 %call219, 0, !dbg !3504
  br i1 %tobool220, label %return, label %lor.lhs.false221, !dbg !3506

lor.lhs.false221:                                 ; preds = %if.end218
  %call222 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call29) #6, !dbg !3507
  %tobool223 = icmp eq i8 %call222, 0, !dbg !3507
  br i1 %tobool223, label %return, label %if.end225, !dbg !3508

if.end225:                                        ; preds = %lor.lhs.false221
  %25 = load i64*, i64** %0, align 8, !dbg !3509
  %bf.load229 = load i64, i64* %25, align 8, !dbg !3509
  %bf.cast23111 = and i64 %bf.load229, 65535, !dbg !3509
  %cmp232 = icmp eq i64 %bf.cast23111, 10, !dbg !3509
  br i1 %cmp232, label %if.else287, label %lor.lhs.false233, !dbg !3509

lor.lhs.false233:                                 ; preds = %if.end225
  %cmp240 = icmp eq i64 %bf.cast23111, 12, !dbg !3509
  br i1 %cmp240, label %if.else287, label %if.then241, !dbg !3510

if.then241:                                       ; preds = %lor.lhs.false233
  %bf.load243 = load i64, i64* %9, align 8, !dbg !3511
  %bf.cast24613 = and i64 %bf.load243, 134217728, !dbg !3511
  %tobool247 = icmp eq i64 %bf.cast24613, 0, !dbg !3511
  br i1 %tobool247, label %lor.lhs.false248, label %if.then255, !dbg !3514

lor.lhs.false248:                                 ; preds = %if.then241
  %26 = getelementptr inbounds %union.tree_node, %union.tree_node* %call29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3515
  %bf.load250 = load i64, i64* %26, align 8, !dbg !3515
  %bf.cast25314 = and i64 %bf.load250, 134217728, !dbg !3515
  %tobool254 = icmp eq i64 %bf.cast25314, 0, !dbg !3515
  br i1 %tobool254, label %if.end285, label %if.then255, !dbg !3516

if.then255:                                       ; preds = %lor.lhs.false248, %if.then241
  %cmp256 = icmp eq i8* %strict_overflow_p, null, !dbg !3517
  br i1 %cmp256, label %if.end258, label %if.then257, !dbg !3520

if.then257:                                       ; preds = %if.then255
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !3521
  br label %if.end258, !dbg !3522

if.end258:                                        ; preds = %if.then255, %if.then257
  %call259 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %val1) #7, !dbg !3523
  %tobool260 = icmp eq i8 %call259, 0, !dbg !3523
  %call262 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %call29) #7, !dbg !3525
  br i1 %tobool260, label %if.else265, label %if.then261, !dbg !3526

if.then261:                                       ; preds = %if.end258
  %tobool263 = icmp eq i8 %call262, 0, !dbg !3527
  %cond264 = sext i1 %tobool263 to i32, !dbg !3527
  br label %return, !dbg !3528

if.else265:                                       ; preds = %if.end258
  %tobool267 = icmp eq i8 %call262, 0, !dbg !3529
  br i1 %tobool267, label %if.else269, label %return, !dbg !3531

if.else269:                                       ; preds = %if.else265
  %call270 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %val1) #7, !dbg !3532
  %tobool271 = icmp eq i8 %call270, 0, !dbg !3532
  %call273 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %call29) #7, !dbg !3534
  br i1 %tobool271, label %if.else277, label %if.then272, !dbg !3535

if.then272:                                       ; preds = %if.else269
  %tobool275 = icmp eq i8 %call273, 0, !dbg !3536
  %cond276 = zext i1 %tobool275 to i32, !dbg !3536
  br label %return, !dbg !3537

if.else277:                                       ; preds = %if.else269
  %tobool279 = icmp eq i8 %call273, 0, !dbg !3538
  %spec.select = select i1 %tobool279, i32 -2, i32 -1, !dbg !3540
  ret i32 %spec.select, !dbg !3540

if.end285:                                        ; preds = %lor.lhs.false248
  %call286 = tail call i32 @tree_int_cst_compare(%union.tree_node* %val1, %union.tree_node* %call29) #6, !dbg !3541
  br label %return, !dbg !3542

if.else287:                                       ; preds = %lor.lhs.false233, %if.end225
  %cmp288 = icmp eq %union.tree_node* %call29, %val1, !dbg !3543
  br i1 %cmp288, label %return, label %lor.lhs.false290, !dbg !3545

lor.lhs.false290:                                 ; preds = %if.else287
  %call291 = tail call i32 @operand_equal_p(%union.tree_node* %val1, %union.tree_node* %call29, i32 0) #6, !dbg !3546
  %tobool292 = icmp eq i32 %call291, 0, !dbg !3546
  br i1 %tobool292, label %if.end294, label %return, !dbg !3547

if.end294:                                        ; preds = %lor.lhs.false290
  %call295 = tail call fastcc i32 @operand_less_p(%union.tree_node* %val1, %union.tree_node* %call29) #7, !dbg !3548
  %cmp296 = icmp eq i32 %call295, 1, !dbg !3550
  br i1 %cmp296, label %return, label %if.end299, !dbg !3551

if.end299:                                        ; preds = %if.end294
  %call300 = tail call fastcc i32 @operand_less_p(%union.tree_node* %call29, %union.tree_node* %val1) #7, !dbg !3552
  %cmp301 = icmp eq i32 %call300, 1, !dbg !3554
  br i1 %cmp301, label %return, label %if.end304, !dbg !3555

if.end304:                                        ; preds = %if.end299
  %bf.load306 = load i64, i64* %9, align 8, !dbg !3556
  %bf.cast30815 = and i64 %bf.load306, 65535, !dbg !3558
  %cmp309 = icmp eq i64 %bf.cast30815, 23, !dbg !3558
  br i1 %cmp309, label %lor.lhs.false311, label %if.then318, !dbg !3559

lor.lhs.false311:                                 ; preds = %if.end304
  %27 = getelementptr inbounds %union.tree_node, %union.tree_node* %call29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3560
  %bf.load313 = load i64, i64* %27, align 8, !dbg !3560
  %bf.cast31516 = and i64 %bf.load313, 65535, !dbg !3561
  %cmp316 = icmp eq i64 %bf.cast31516, 23, !dbg !3561
  br i1 %cmp316, label %if.end326, label %if.then318, !dbg !3562

if.then318:                                       ; preds = %lor.lhs.false311, %if.end304
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3563
  %call319 = tail call %union.tree_node* @fold_binary_to_constant(i32 102, %union.tree_node* %28, %union.tree_node* %val1, %union.tree_node* %call29) #6, !dbg !3565
  call void @llvm.dbg.value(metadata %union.tree_node* %call319, metadata !3387, metadata !DIExpression()), !dbg !3566
  %tobool320 = icmp eq %union.tree_node* %call319, null, !dbg !3567
  br i1 %tobool320, label %if.end326, label %land.lhs.true321, !dbg !3569

land.lhs.true321:                                 ; preds = %if.then318
  %call322 = tail call i32 @integer_onep(%union.tree_node* nonnull %call319) #6, !dbg !3570
  %tobool323 = icmp eq i32 %call322, 0, !dbg !3570
  br i1 %tobool323, label %if.end326, label %return, !dbg !3571

if.end326:                                        ; preds = %land.lhs.true321, %if.then318, %lor.lhs.false311
  br label %return, !dbg !3572

return:                                           ; preds = %land.lhs.true321, %lor.lhs.false290, %if.else265, %lor.lhs.false221, %if.end218, %if.end326, %if.else287, %if.end294, %if.end299, %cleanup, %entry, %if.end285, %if.then272, %if.then261
  %retval.2 = phi i32 [ %retval.0, %cleanup ], [ %cond264, %if.then261 ], [ %cond276, %if.then272 ], [ %call286, %if.end285 ], [ 0, %entry ], [ -2, %lor.lhs.false221 ], [ -2, %if.end218 ], [ 1, %if.else265 ], [ -2, %if.end326 ], [ 0, %lor.lhs.false290 ], [ 0, %if.else287 ], [ -1, %if.end294 ], [ 1, %if.end299 ], [ 2, %land.lhs.true321 ], !dbg !3390
  ret i32 %retval.2, !dbg !3573
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @tree_int_cst_sgn(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @fold_unary_to_constant(i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @tree_int_cst_compare(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @operand_less_p(%union.tree_node* %val, %union.tree_node* %val2) unnamed_addr #0 !dbg !3574 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !3576, metadata !DIExpression()), !dbg !3581
  call void @llvm.dbg.value(metadata %union.tree_node* %val2, metadata !3577, metadata !DIExpression()), !dbg !3581
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3582
  %bf.load = load i64, i64* %0, align 8, !dbg !3582
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !3583
  %cmp = icmp eq i64 %bf.cast2, 23, !dbg !3583
  br i1 %cmp, label %land.lhs.true, label %if.else53, !dbg !3584

land.lhs.true:                                    ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %val2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3585
  %bf.load2 = load i64, i64* %1, align 8, !dbg !3585
  %bf.cast44 = and i64 %bf.load2, 65535, !dbg !3586
  %cmp5 = icmp eq i64 %bf.cast44, 23, !dbg !3586
  br i1 %cmp5, label %if.then, label %if.else53, !dbg !3587

if.then:                                          ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3588
  %2 = bitcast %union.tree_node** %type to i64**, !dbg !3588
  %3 = load i64*, i64** %2, align 8, !dbg !3588
  %bf.load7 = load i64, i64* %3, align 8, !dbg !3588
  %bf.cast95 = and i64 %bf.load7, 2097152, !dbg !3588
  %tobool = icmp eq i64 %bf.cast95, 0, !dbg !3588
  %int_cst11 = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3591
  %high = getelementptr inbounds i32, i32* %int_cst11, i64 2, !dbg !3591
  %4 = bitcast i32* %high to i64*, !dbg !3591
  %5 = load i64, i64* %4, align 8, !dbg !3591
  %int_cst13 = getelementptr inbounds %union.tree_node, %union.tree_node* %val2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3591
  %high14 = getelementptr inbounds i32, i32* %int_cst13, i64 2, !dbg !3591
  %6 = bitcast i32* %high14 to i64*, !dbg !3591
  %7 = load i64, i64* %6, align 8, !dbg !3591
  br i1 %tobool, label %if.else, label %if.then10, !dbg !3592

if.then10:                                        ; preds = %if.then
  %cmp15 = icmp ult i64 %5, %7, !dbg !3593
  br i1 %cmp15, label %lor.end, label %lor.rhs, !dbg !3593

lor.rhs:                                          ; preds = %if.then10
  %cmp22 = icmp eq i64 %5, %7, !dbg !3593
  br i1 %cmp22, label %land.rhs, label %lor.end, !dbg !3593

land.rhs:                                         ; preds = %lor.rhs
  %low = bitcast i32* %int_cst11 to i64*, !dbg !3593
  %8 = load i64, i64* %low, align 8, !dbg !3593
  %low27 = bitcast i32* %int_cst13 to i64*, !dbg !3593
  %9 = load i64, i64* %low27, align 8, !dbg !3593
  %cmp28 = icmp ult i64 %8, %9, !dbg !3593
  %phitmp = zext i1 %cmp28 to i32
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs, %if.then10
  %10 = phi i32 [ 1, %if.then10 ], [ 0, %lor.rhs ], [ %phitmp, %land.rhs ]
  br label %return, !dbg !3594

if.else:                                          ; preds = %if.then
  %cmp35 = icmp slt i64 %5, %7, !dbg !3595
  br i1 %cmp35, label %return, label %lor.lhs.false, !dbg !3595

lor.lhs.false:                                    ; preds = %if.else
  %cmp42 = icmp eq i64 %5, %7, !dbg !3595
  br i1 %cmp42, label %land.lhs.true43, label %if.end67, !dbg !3595

land.lhs.true43:                                  ; preds = %lor.lhs.false
  %low46 = bitcast i32* %int_cst11 to i64*, !dbg !3595
  %11 = load i64, i64* %low46, align 8, !dbg !3595
  %low49 = bitcast i32* %int_cst13 to i64*, !dbg !3595
  %12 = load i64, i64* %low49, align 8, !dbg !3595
  %cmp50 = icmp ult i64 %11, %12, !dbg !3595
  br i1 %cmp50, label %return, label %if.end67, !dbg !3598

if.else53:                                        ; preds = %land.lhs.true, %entry
  tail call void @fold_defer_overflow_warnings() #6, !dbg !3599
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3600
  %call = tail call %union.tree_node* @fold_binary_to_constant(i32 97, %union.tree_node* %13, %union.tree_node* %val, %union.tree_node* %val2) #6, !dbg !3601
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !3578, metadata !DIExpression()), !dbg !3602
  tail call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !3603
  %tobool54 = icmp eq %union.tree_node* %call, null, !dbg !3604
  br i1 %tobool54, label %cleanup, label %lor.lhs.false55, !dbg !3606

lor.lhs.false55:                                  ; preds = %if.else53
  %14 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3607
  %bf.load57 = load i64, i64* %14, align 8, !dbg !3607
  %bf.cast593 = and i64 %bf.load57, 65535, !dbg !3608
  %cmp60 = icmp eq i64 %bf.cast593, 23, !dbg !3608
  br i1 %cmp60, label %if.end62, label %cleanup, !dbg !3609

if.end62:                                         ; preds = %lor.lhs.false55
  %call63 = tail call i32 @integer_zerop(%union.tree_node* nonnull %call) #6, !dbg !3610
  %tobool64 = icmp ne i32 %call63, 0, !dbg !3610
  br label %cleanup, !dbg !3612

cleanup:                                          ; preds = %lor.lhs.false55, %if.else53, %if.end62
  %cleanup.dest.slot.0 = phi i1 [ false, %lor.lhs.false55 ], [ false, %if.else53 ], [ %tobool64, %if.end62 ]
  %retval.0 = phi i32 [ -2, %lor.lhs.false55 ], [ -2, %if.else53 ], [ 1, %if.end62 ]
  br i1 %cleanup.dest.slot.0, label %if.end67, label %return

if.end67:                                         ; preds = %cleanup, %land.lhs.true43, %lor.lhs.false
  %call68 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %val) #7, !dbg !3613
  %tobool69 = icmp eq i8 %call68, 0, !dbg !3613
  br i1 %tobool69, label %if.else73, label %if.then70, !dbg !3615

if.then70:                                        ; preds = %if.end67
  %call71 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %val2) #7, !dbg !3616
  %tobool72 = icmp eq i8 %call71, 0, !dbg !3616
  %cond = zext i1 %tobool72 to i32, !dbg !3616
  br label %return, !dbg !3617

if.else73:                                        ; preds = %if.end67
  %call74 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %val2) #7, !dbg !3618
  %tobool75 = icmp eq i8 %call74, 0, !dbg !3618
  br i1 %tobool75, label %return, label %if.then76, !dbg !3620

if.then76:                                        ; preds = %if.else73
  %call77 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %val) #7, !dbg !3621
  %tobool79 = icmp eq i8 %call77, 0, !dbg !3621
  %cond80 = zext i1 %tobool79 to i32, !dbg !3621
  br label %return, !dbg !3622

return:                                           ; preds = %if.else73, %cleanup, %if.else, %land.lhs.true43, %if.then76, %if.then70, %lor.end
  %retval.1 = phi i32 [ %10, %lor.end ], [ %cond, %if.then70 ], [ %cond80, %if.then76 ], [ %retval.0, %cleanup ], [ 1, %land.lhs.true43 ], [ 1, %if.else ], [ 0, %if.else73 ], !dbg !3581
  ret i32 %retval.1, !dbg !3623
}

declare dso_local %union.tree_node* @fold_binary_to_constant(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @integer_onep(%union.tree_node*) local_unnamed_addr #2

declare dso_local void @fold_defer_overflow_warnings() local_unnamed_addr #2

declare dso_local void @fold_undefer_and_ignore_overflow_warnings() local_unnamed_addr #2

declare dso_local i32 @integer_zerop(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %type) unnamed_addr #0 !dbg !3624 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !3626, metadata !DIExpression()), !dbg !3627
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3628
  %bf.load = load i64, i64* %0, align 8, !dbg !3628
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3628
  %cmp = icmp eq i64 %bf.cast1, 6, !dbg !3628
  br i1 %cmp, label %land.rhs, label %lor.lhs.false, !dbg !3628

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 7, !dbg !3628
  br i1 %cmp5, label %land.rhs, label %lor.lhs.false6, !dbg !3628

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %cmp11 = icmp eq i64 %bf.cast1, 8, !dbg !3628
  br i1 %cmp11, label %land.rhs, label %land.end, !dbg !3629

land.rhs:                                         ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %bf.cast154 = and i64 %bf.load, 2097152, !dbg !3630
  %tobool = icmp eq i64 %bf.cast154, 0, !dbg !3630
  %1 = load i32, i32* @flag_wrapv, align 4, !dbg !3630
  %tobool16 = icmp eq i32 %1, 0, !dbg !3630
  %lnot = and i1 %tobool, %tobool16, !dbg !3631
  %phitmp = zext i1 %lnot to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %lor.lhs.false6
  %2 = phi i8 [ 0, %lor.lhs.false6 ], [ %phitmp, %land.rhs ]
  ret i8 %2, !dbg !3632
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @vrp_val_min(%union.tree_node* %type) unnamed_addr #0 !dbg !3633 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !3637, metadata !DIExpression()), !dbg !3638
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3639
  %bf.load = load i64, i64* %0, align 8, !dbg !3639
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3639
  %cmp = icmp eq i64 %bf.cast1, 6, !dbg !3639
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !3639

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 7, !dbg !3639
  br i1 %cmp5, label %if.end, label %lor.lhs.false6, !dbg !3639

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %cmp11 = icmp eq i64 %bf.cast1, 8, !dbg !3639
  br i1 %cmp11, label %if.end, label %return, !dbg !3641

if.end:                                           ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !3642
  %1 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !3642
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !3642
  br label %return, !dbg !3643

return:                                           ; preds = %lor.lhs.false6, %if.end
  %retval.0 = phi %union.tree_node* [ %2, %if.end ], [ null, %lor.lhs.false6 ], !dbg !3638
  ret %union.tree_node* %retval.0, !dbg !3644
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @vrp_val_max(%union.tree_node* %type) unnamed_addr #0 !dbg !3645 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !3647, metadata !DIExpression()), !dbg !3648
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3649
  %bf.load = load i64, i64* %0, align 8, !dbg !3649
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3649
  %cmp = icmp eq i64 %bf.cast1, 6, !dbg !3649
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !3649

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 7, !dbg !3649
  br i1 %cmp5, label %if.end, label %lor.lhs.false6, !dbg !3649

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %cmp11 = icmp eq i64 %bf.cast1, 8, !dbg !3649
  br i1 %cmp11, label %if.end, label %return, !dbg !3651

if.end:                                           ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3652
  %1 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !3652
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !3652
  br label %return, !dbg !3653

return:                                           ; preds = %lor.lhs.false6, %if.end
  %retval.0 = phi %union.tree_node* [ %2, %if.end ], [ null, %lor.lhs.false6 ], !dbg !3648
  ret %union.tree_node* %retval.0, !dbg !3654
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @loop_optimizer_init(i32) local_unnamed_addr #2

declare dso_local void @rewrite_into_loop_closed_ssa(%struct.bitmap_head_def*, i32) local_unnamed_addr #2

declare dso_local void @scev_initialize() local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @insert_range_assertions() unnamed_addr #5 !dbg !3655 {
entry:
  %call = tail call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null) #6, !dbg !3656
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !3657
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3658
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 3, !dbg !3658
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3658
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i64 0, i32 2, !dbg !3658
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3658
  %tobool = icmp eq %struct.VEC_tree_gc* %2, null, !dbg !3658
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3658

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %2, i64 0, i32 0, !dbg !3658
  br label %cond.end, !dbg !3658

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !3658
  %call4 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond) #7, !dbg !3658
  %conv = zext i32 %call4 to i64, !dbg !3658
  %call5 = tail call i8* @xcalloc(i64 %conv, i64 8) #6, !dbg !3658
  store i8* %call5, i8** bitcast (%struct.assert_locus_d*** @asserts_for to i8**), align 8, !dbg !3659
  tail call void @calculate_dominance_info(i32 1) #6, !dbg !3660
  %call6 = tail call fastcc zeroext i8 @find_assert_locations() #7, !dbg !3661
  %tobool7 = icmp eq i8 %call6, 0, !dbg !3661
  br i1 %tobool7, label %if.end, label %if.then, !dbg !3663

if.then:                                          ; preds = %cond.end
  tail call fastcc void @process_assert_insertions() #7, !dbg !3664
  tail call void @update_ssa(i32 4096) #6, !dbg !3666
  br label %if.end, !dbg !3667

if.end:                                           ; preds = %cond.end, %if.then
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3668
  %tobool8 = icmp eq %struct._IO_FILE* %3, null, !dbg !3668
  br i1 %tobool8, label %if.end12, label %land.lhs.true, !dbg !3670

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32, i32* @dump_flags, align 4, !dbg !3671
  %and = and i32 %4, 8, !dbg !3672
  %tobool9 = icmp eq i32 %and, 0, !dbg !3672
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !3673

if.then10:                                        ; preds = %land.lhs.true
  %call11 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %3, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.30, i64 0, i64 0)) #6, !dbg !3674
  %5 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !3676
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3677
  %7 = load i32, i32* @dump_flags, align 4, !dbg !3678
  tail call void @dump_function_to_file(%union.tree_node* %5, %struct._IO_FILE* %6, i32 %7) #6, !dbg !3679
  br label %if.end12, !dbg !3680

if.end12:                                         ; preds = %land.lhs.true, %if.end, %if.then10
  %8 = load i8*, i8** bitcast (%struct.assert_locus_d*** @asserts_for to i8**), align 8, !dbg !3681
  tail call void @free(i8* %8) #6, !dbg !3682
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !3683
  tail call void @bitmap_obstack_free(%struct.bitmap_head_def* %9) #6, !dbg !3683
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !3683
  ret void, !dbg !3684
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_edge_heap* @VEC_edge_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !3685 {
entry:
  call void @llvm.dbg.value(metadata i32 10, metadata !3689, metadata !DIExpression()), !dbg !3690
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 10) #6, !dbg !3691
  %0 = bitcast i8* %call to %struct.VEC_edge_heap*, !dbg !3691
  ret %struct.VEC_edge_heap* %0, !dbg !3691
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_switch_update_heap* @VEC_switch_update_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !3692 {
entry:
  call void @llvm.dbg.value(metadata i32 5, metadata !3696, metadata !DIExpression()), !dbg !3697
  %call = tail call i8* @vec_heap_o_reserve_exact(i8* null, i32 5, i64 8, i64 16) #6, !dbg !3698
  %0 = bitcast i8* %call to %struct.VEC_switch_update_heap*, !dbg !3698
  ret %struct.VEC_switch_update_heap* %0, !dbg !3698
}

declare dso_local void @threadedge_initialize_values() local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @vrp_initialize() unnamed_addr #5 !dbg !3699 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp34 = alloca %struct.gimple_stmt_iterator, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3734
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 3, !dbg !3734
  %1 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3734
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i64 0, i32 2, !dbg !3734
  %2 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !3734
  %tobool = icmp eq %struct.VEC_tree_gc* %2, null, !dbg !3734
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3734

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %2, i64 0, i32 0, !dbg !3734
  br label %cond.end, !dbg !3734

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !3734
  %call = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond) #7, !dbg !3734
  %conv = zext i32 %call to i64, !dbg !3734
  %call4 = tail call i8* @xcalloc(i64 %conv, i64 8) #6, !dbg !3734
  store i8* %call4, i8** bitcast (%struct.value_range_d*** @vr_value to i8**), align 8, !dbg !3735
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3736
  %gimple_df6 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, i32 3, !dbg !3736
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df6, align 8, !dbg !3736
  %ssa_names7 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i64 0, i32 2, !dbg !3736
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names7, align 8, !dbg !3736
  %tobool8 = icmp eq %struct.VEC_tree_gc* %5, null, !dbg !3736
  br i1 %tobool8, label %cond.end15, label %cond.true9, !dbg !3736

cond.true9:                                       ; preds = %cond.end
  %base13 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i64 0, i32 0, !dbg !3736
  br label %cond.end15, !dbg !3736

cond.end15:                                       ; preds = %cond.end, %cond.true9
  %cond16 = phi %struct.VEC_tree_base* [ %base13, %cond.true9 ], [ null, %cond.end ], !dbg !3736
  %call17 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond16) #7, !dbg !3736
  %conv18 = zext i32 %call17 to i64, !dbg !3736
  %call19 = tail call i8* @xcalloc(i64 %conv18, i64 4) #6, !dbg !3736
  store i8* %call19, i8** bitcast (i32** @vr_phi_edge_counts to i8**), align 8, !dbg !3737
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3738
  %cfg = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, i32 1, !dbg !3738
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3738
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i64 0, i32 0, !dbg !3738
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3738
  %9 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !3739
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3740
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp34 to i8*, !dbg !3741
  %12 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %i, i64 0, i32 0, !dbg !3742
  br label %for.cond, !dbg !3738

for.cond:                                         ; preds = %for.end62, %cond.end15
  %13 = phi %struct.control_flow_graph* [ %7, %cond.end15 ], [ %.pre1, %for.end62 ], !dbg !3743
  %.pn = phi %struct.basic_block_def* [ %8, %cond.end15 ], [ %bb.0, %for.end62 ]
  %bb.0.in = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %.pn, i64 0, i32 6, !dbg !3744
  %bb.0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.0.in, align 8, !dbg !3744
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !3701, metadata !DIExpression()), !dbg !3745
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i64 0, i32 1, !dbg !3743
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3743
  %cmp = icmp eq %struct.basic_block_def* %bb.0, %14, !dbg !3743
  br i1 %cmp, label %for.end65, label %for.body, !dbg !3738

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8, !dbg !3746
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #8, !dbg !3747
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb.0) #6, !dbg !3747
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* nonnull align 8 %10, i64 24, i1 false), !dbg !3747
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #8, !dbg !3747
  br label %for.cond24, !dbg !3748

for.cond24:                                       ; preds = %for.inc, %for.body
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3702, metadata !DIExpression(DW_OP_deref)), !dbg !3739
  %call25 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !3749
  %tobool26 = icmp eq i8 %call25, 0, !dbg !3750
  br i1 %tobool26, label %for.body27, label %for.end, !dbg !3751

for.body27:                                       ; preds = %for.cond24
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3702, metadata !DIExpression(DW_OP_deref)), !dbg !3739
  %call28 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !3752
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call28, metadata !3706, metadata !DIExpression()), !dbg !3753
  %call29 = call fastcc zeroext i8 @stmt_interesting_for_vrp(%union.gimple_statement_d* %call28) #7, !dbg !3754
  %tobool30 = icmp eq i8 %call29, 0, !dbg !3754
  br i1 %tobool30, label %if.then, label %if.else, !dbg !3755

if.then:                                          ; preds = %for.body27
  %call31 = call fastcc %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %call28) #7, !dbg !3756
  %call32 = call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %call31) #7, !dbg !3756
  call void @llvm.dbg.value(metadata %union.tree_node* %call32, metadata !3710, metadata !DIExpression()), !dbg !3757
  %call33 = call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call32) #7, !dbg !3758
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %call33) #7, !dbg !3759
  call fastcc void @prop_set_simulate_again(%union.gimple_statement_d* %call28, i8 zeroext 0) #7, !dbg !3760
  br label %for.inc, !dbg !3761

if.else:                                          ; preds = %for.body27
  call fastcc void @prop_set_simulate_again(%union.gimple_statement_d* %call28, i8 zeroext 1) #7, !dbg !3762
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3702, metadata !DIExpression(DW_OP_deref)), !dbg !3739
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !3763
  br label %for.cond24, !dbg !3764, !llvm.loop !3765

for.end:                                          ; preds = %for.cond24
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8, !dbg !3767
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp34, %struct.basic_block_def* %bb.0) #7, !dbg !3767
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* nonnull align 8 %11, i64 24, i1 false), !dbg !3767
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8, !dbg !3767
  br label %for.cond35, !dbg !3768

for.cond35:                                       ; preds = %for.inc61, %for.end
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3702, metadata !DIExpression(DW_OP_deref)), !dbg !3739
  %call36 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !3769
  %tobool37 = icmp eq i8 %call36, 0, !dbg !3770
  br i1 %tobool37, label %for.body39, label %for.end62, !dbg !3771

for.body39:                                       ; preds = %for.cond35
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3702, metadata !DIExpression(DW_OP_deref)), !dbg !3739
  %call40 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !3772
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call40, metadata !3713, metadata !DIExpression()), !dbg !3773
  %call41 = call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %call40) #6, !dbg !3774
  %tobool42 = icmp eq i8 %call41, 0, !dbg !3774
  br i1 %tobool42, label %if.else44, label %if.then43, !dbg !3775

if.then43:                                        ; preds = %for.body39
  call fastcc void @prop_set_simulate_again(%union.gimple_statement_d* %call40, i8 zeroext 1) #7, !dbg !3776
  br label %for.inc61, !dbg !3776

if.else44:                                        ; preds = %for.body39
  %call45 = call fastcc zeroext i8 @stmt_interesting_for_vrp(%union.gimple_statement_d* %call40) #7, !dbg !3777
  %tobool46 = icmp eq i8 %call45, 0, !dbg !3777
  br i1 %tobool46, label %if.then47, label %if.else58, !dbg !3778

if.then47:                                        ; preds = %if.else44
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %12) #8, !dbg !3779
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !3717, metadata !DIExpression(DW_OP_deref)), !dbg !3742
  %call48 = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %i, %union.gimple_statement_d* %call40, i32 2) #7, !dbg !3780
  call void @llvm.dbg.value(metadata %union.tree_node* %call48, metadata !3733, metadata !DIExpression()), !dbg !3742
  br label %for.cond49, !dbg !3780

for.cond49:                                       ; preds = %for.body53, %if.then47
  %def.0 = phi %union.tree_node* [ %call48, %if.then47 ], [ %call56, %for.body53 ], !dbg !3782
  call void @llvm.dbg.value(metadata %union.tree_node* %def.0, metadata !3733, metadata !DIExpression()), !dbg !3742
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !3717, metadata !DIExpression(DW_OP_deref)), !dbg !3742
  %call50 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %i) #7, !dbg !3783
  %tobool51 = icmp eq i8 %call50, 0, !dbg !3783
  br i1 %tobool51, label %for.body53, label %for.end57, !dbg !3780

for.body53:                                       ; preds = %for.cond49
  %call54 = call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %def.0) #7, !dbg !3785
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %call54) #7, !dbg !3786
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !3717, metadata !DIExpression(DW_OP_deref)), !dbg !3742
  %call56 = call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* nonnull %i) #7, !dbg !3783
  call void @llvm.dbg.value(metadata %union.tree_node* %call56, metadata !3733, metadata !DIExpression()), !dbg !3742
  br label %for.cond49, !dbg !3783, !llvm.loop !3787

for.end57:                                        ; preds = %for.cond49
  call fastcc void @prop_set_simulate_again(%union.gimple_statement_d* %call40, i8 zeroext 0) #7, !dbg !3789
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %12) #8, !dbg !3790
  br label %for.inc61, !dbg !3791

if.else58:                                        ; preds = %if.else44
  call fastcc void @prop_set_simulate_again(%union.gimple_statement_d* %call40, i8 zeroext 1) #7, !dbg !3792
  br label %for.inc61

for.inc61:                                        ; preds = %if.then43, %if.else58, %for.end57
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3702, metadata !DIExpression(DW_OP_deref)), !dbg !3739
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !3793
  br label %for.cond35, !dbg !3794, !llvm.loop !3795

for.end62:                                        ; preds = %for.cond35
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8, !dbg !3797
  %.pre = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3743
  %cfg22.phi.trans.insert = getelementptr inbounds %struct.function, %struct.function* %.pre, i64 0, i32 1, !dbg !3798
  %.pre1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg22.phi.trans.insert, align 8, !dbg !3743
  br label %for.cond, !dbg !3743, !llvm.loop !3799

for.end65:                                        ; preds = %for.cond
  ret void, !dbg !3801
}

declare dso_local void @ssa_propagate(i32 (%union.gimple_statement_d*, %struct.edge_def**, %union.tree_node**)*, i32 (%union.gimple_statement_d*)*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal i32 @vrp_visit_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p, %union.tree_node** %output_p) #5 !dbg !3802 {
entry:
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3807, metadata !DIExpression()), !dbg !3812
  call void @llvm.dbg.value(metadata %struct.edge_def** %taken_edge_p, metadata !3808, metadata !DIExpression()), !dbg !3812
  call void @llvm.dbg.value(metadata %union.tree_node** %output_p, metadata !3809, metadata !DIExpression()), !dbg !3812
  %0 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %iter, i64 0, i32 0, !dbg !3813
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #8, !dbg !3813
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3814
  %tobool = icmp eq %struct._IO_FILE* %1, null, !dbg !3814
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !3816

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @dump_flags, align 4, !dbg !3817
  %and = and i32 %2, 8, !dbg !3818
  %tobool1 = icmp eq i32 %and, 0, !dbg !3818
  br i1 %tobool1, label %if.end, label %if.then, !dbg !3819

if.then:                                          ; preds = %land.lhs.true
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0)) #6, !dbg !3820
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3822
  %4 = load i32, i32* @dump_flags, align 4, !dbg !3823
  tail call void @print_gimple_stmt(%struct._IO_FILE* %3, %union.gimple_statement_d* %stmt, i32 0, i32 %4) #6, !dbg !3824
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3825
  %call2 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !3826
  br label %if.end, !dbg !3827

if.end:                                           ; preds = %land.lhs.true, %entry, %if.then
  %call3 = tail call fastcc zeroext i8 @stmt_interesting_for_vrp(%union.gimple_statement_d* %stmt) #7, !dbg !3828
  %tobool4 = icmp eq i8 %call3, 0, !dbg !3828
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !3830

if.then5:                                         ; preds = %if.end
  %call6 = tail call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %stmt) #6, !dbg !3831
  %tobool7 = icmp eq i8 %call6, 0, !dbg !3831
  br i1 %tobool7, label %cond.true, label %if.end45, !dbg !3831

cond.true:                                        ; preds = %if.then5
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 6101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !3831
  br label %if.end45, !dbg !3831

if.else:                                          ; preds = %if.end
  %call8 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %stmt) #7, !dbg !3832
  %tobool9 = icmp eq i8 %call8, 0, !dbg !3832
  br i1 %tobool9, label %lor.lhs.false, label %if.then13, !dbg !3834

lor.lhs.false:                                    ; preds = %if.else
  %call10 = tail call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %stmt) #7, !dbg !3835
  %tobool12 = icmp eq i8 %call10, 0, !dbg !3835
  br i1 %tobool12, label %if.else30, label %if.then13, !dbg !3836

if.then13:                                        ; preds = %lor.lhs.false, %if.else
  %call14 = tail call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %stmt) #7, !dbg !3837
  %tobool16 = icmp eq i8 %call14, 0, !dbg !3837
  br i1 %tobool16, label %lor.lhs.false24, label %land.lhs.true17, !dbg !3840

land.lhs.true17:                                  ; preds = %if.then13
  %call18 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %stmt) #7, !dbg !3841
  %cmp = icmp eq %union.tree_node* %call18, null, !dbg !3842
  br i1 %cmp, label %lor.lhs.false24, label %land.lhs.true20, !dbg !3843

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %call21 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %stmt) #7, !dbg !3844
  %locus = getelementptr inbounds %union.tree_node, %union.tree_node* %call21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3844
  %6 = load i32, i32* %locus, align 8, !dbg !3844
  %cmp22 = icmp ult i32 %6, 2, !dbg !3844
  br i1 %cmp22, label %if.then27, label %lor.lhs.false24, !dbg !3845

lor.lhs.false24:                                  ; preds = %land.lhs.true17, %if.then13, %land.lhs.true20
  %call25 = tail call fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %stmt) #7, !dbg !3846
  %tobool26 = icmp eq %union.tree_node* %call25, null, !dbg !3846
  br i1 %tobool26, label %if.then27, label %if.end45, !dbg !3847

if.then27:                                        ; preds = %lor.lhs.false24, %land.lhs.true20
  %call28 = tail call fastcc i32 @vrp_visit_assignment_or_call(%union.gimple_statement_d* %stmt, %union.tree_node** %output_p) #7, !dbg !3848
  br label %cleanup, !dbg !3849

if.else30:                                        ; preds = %lor.lhs.false
  %call31 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !3850
  %cmp32 = icmp eq i32 %call31, 1, !dbg !3852
  br i1 %cmp32, label %if.then34, label %if.else36, !dbg !3853

if.then34:                                        ; preds = %if.else30
  %call35 = tail call fastcc i32 @vrp_visit_cond_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p) #7, !dbg !3854
  br label %cleanup, !dbg !3855

if.else36:                                        ; preds = %if.else30
  %call37 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !3856
  %cmp38 = icmp eq i32 %call37, 5, !dbg !3858
  br i1 %cmp38, label %if.then40, label %if.end45, !dbg !3859

if.then40:                                        ; preds = %if.else36
  %call41 = tail call fastcc i32 @vrp_visit_switch_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p) #7, !dbg !3860
  br label %cleanup, !dbg !3861

if.end45:                                         ; preds = %lor.lhs.false24, %if.then5, %if.else36, %cond.true
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !3811, metadata !DIExpression(DW_OP_deref)), !dbg !3812
  %call46 = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %iter, %union.gimple_statement_d* %stmt, i32 2) #7, !dbg !3862
  call void @llvm.dbg.value(metadata %union.tree_node* %call46, metadata !3810, metadata !DIExpression()), !dbg !3812
  br label %for.cond, !dbg !3862

for.cond:                                         ; preds = %for.body, %if.end45
  %def.0 = phi %union.tree_node* [ %call46, %if.end45 ], [ %call50, %for.body ], !dbg !3864
  call void @llvm.dbg.value(metadata %union.tree_node* %def.0, metadata !3810, metadata !DIExpression()), !dbg !3812
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !3811, metadata !DIExpression(DW_OP_deref)), !dbg !3812
  %call47 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !3865
  %tobool48 = icmp eq i8 %call47, 0, !dbg !3865
  br i1 %tobool48, label %for.body, label %cleanup.loopexit, !dbg !3862

for.body:                                         ; preds = %for.cond
  %call49 = call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %def.0) #7, !dbg !3867
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %call49) #7, !dbg !3868
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !3811, metadata !DIExpression(DW_OP_deref)), !dbg !3812
  %call50 = call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !3865
  call void @llvm.dbg.value(metadata %union.tree_node* %call50, metadata !3810, metadata !DIExpression()), !dbg !3812
  br label %for.cond, !dbg !3865, !llvm.loop !3869

cleanup.loopexit:                                 ; preds = %for.cond
  br label %cleanup, !dbg !3871

cleanup:                                          ; preds = %cleanup.loopexit, %if.then40, %if.then34, %if.then27
  %retval.0 = phi i32 [ %call28, %if.then27 ], [ %call35, %if.then34 ], [ %call41, %if.then40 ], [ 2, %cleanup.loopexit ], !dbg !3812
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #8, !dbg !3871
  ret i32 %retval.0, !dbg !3871
}

; Function Attrs: nounwind uwtable
define internal i32 @vrp_visit_phi_node(%union.gimple_statement_d* %phi) #5 !dbg !3872 {
entry:
  %vr_result = alloca %struct.value_range_d, align 8
  %vr_arg = alloca %struct.value_range_d, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %phi, metadata !3876, metadata !DIExpression()), !dbg !3899
  %call = tail call fastcc %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %phi) #7, !dbg !3900
  %call1 = tail call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %call) #7, !dbg !3900
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !3878, metadata !DIExpression()), !dbg !3899
  %call2 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call1) #7, !dbg !3901
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call2, metadata !3879, metadata !DIExpression()), !dbg !3899
  %0 = bitcast %struct.value_range_d* %vr_result to i8*, !dbg !3902
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #8, !dbg !3902
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %0, i8 0, i64 32, i1 false), !dbg !3903
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr_result, metadata !3880, metadata !DIExpression(DW_OP_deref)), !dbg !3899
  call fastcc void @copy_value_range(%struct.value_range_d* nonnull %vr_result, %struct.value_range_d* %call2) #7, !dbg !3904
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3905
  %tobool = icmp eq %struct._IO_FILE* %1, null, !dbg !3905
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !3907

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* @dump_flags, align 4, !dbg !3908
  %and = and i32 %2, 8, !dbg !3909
  %tobool3 = icmp eq i32 %and, 0, !dbg !3909
  br i1 %tobool3, label %if.end, label %if.then, !dbg !3910

if.then:                                          ; preds = %land.lhs.true
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.48, i64 0, i64 0)) #6, !dbg !3911
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3913
  %4 = load i32, i32* @dump_flags, align 4, !dbg !3914
  call void @print_gimple_stmt(%struct._IO_FILE* %3, %union.gimple_statement_d* %phi, i32 0, i32 %4) #6, !dbg !3915
  br label %if.end, !dbg !3916

if.end:                                           ; preds = %land.lhs.true, %entry, %if.then
  call void @llvm.dbg.value(metadata i32 0, metadata !3881, metadata !DIExpression()), !dbg !3899
  call void @llvm.dbg.value(metadata i64 0, metadata !3877, metadata !DIExpression()), !dbg !3899
  %5 = bitcast %struct.value_range_d* %vr_arg to i8*, !dbg !3917
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_arg, i64 0, i32 0, !dbg !3918
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_arg, i64 0, i32 1, !dbg !3918
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_arg, i64 0, i32 2, !dbg !3918
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_arg, i64 0, i32 3, !dbg !3918
  %type48 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i64 0, i32 0, !dbg !3921
  br label %for.cond, !dbg !3923

for.cond:                                         ; preds = %for.inc, %if.end
  %edges.0 = phi i32 [ 0, %if.end ], [ %edges.2, %for.inc ], !dbg !3899
  %i.0 = phi i64 [ 0, %if.end ], [ %inc58, %for.inc ], !dbg !3924
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !3877, metadata !DIExpression()), !dbg !3899
  call void @llvm.dbg.value(metadata i32 %edges.0, metadata !3881, metadata !DIExpression()), !dbg !3899
  %call5 = call fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %phi) #7, !dbg !3925
  %conv = zext i32 %call5 to i64, !dbg !3925
  %cmp = icmp ult i64 %i.0, %conv, !dbg !3926
  br i1 %cmp, label %for.body, label %for.end, !dbg !3927

for.body:                                         ; preds = %for.cond
  %call7 = call fastcc %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %phi, i64 %i.0) #7, !dbg !3928
  call void @llvm.dbg.value(metadata %struct.edge_def* %call7, metadata !3884, metadata !DIExpression()), !dbg !3929
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3930
  %tobool8 = icmp eq %struct._IO_FILE* %6, null, !dbg !3930
  br i1 %tobool8, label %if.end18, label %land.lhs.true9, !dbg !3932

land.lhs.true9:                                   ; preds = %for.body
  %7 = load i32, i32* @dump_flags, align 4, !dbg !3933
  %and10 = and i32 %7, 8, !dbg !3934
  %tobool11 = icmp eq i32 %and10, 0, !dbg !3934
  br i1 %tobool11, label %if.end18, label %if.then12, !dbg !3935

if.then12:                                        ; preds = %land.lhs.true9
  %conv13 = trunc i64 %i.0 to i32, !dbg !3936
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call7, i64 0, i32 0, !dbg !3938
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3938
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i64 0, i32 9, !dbg !3939
  %9 = load i32, i32* %index, align 8, !dbg !3939
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call7, i64 0, i32 1, !dbg !3940
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3940
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i64 0, i32 9, !dbg !3941
  %11 = load i32, i32* %index14, align 8, !dbg !3941
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call7, i64 0, i32 7, !dbg !3942
  %12 = load i32, i32* %flags, align 8, !dbg !3942
  %and15 = and i32 %12, 4096, !dbg !3943
  %tobool16 = icmp eq i32 %and15, 0, !dbg !3944
  %cond = select i1 %tobool16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.4, i64 0, i64 0), !dbg !3944
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %6, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.49, i64 0, i64 0), i32 %conv13, i32 %9, i32 %11, i8* %cond) #6, !dbg !3945
  br label %if.end18, !dbg !3946

if.end18:                                         ; preds = %land.lhs.true9, %for.body, %if.then12
  %flags19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call7, i64 0, i32 7, !dbg !3947
  %13 = load i32, i32* %flags19, align 8, !dbg !3947
  %and20 = and i32 %13, 4096, !dbg !3948
  %tobool21 = icmp eq i32 %and20, 0, !dbg !3948
  br i1 %tobool21, label %if.end54, label %if.then22, !dbg !3949

if.then22:                                        ; preds = %if.end18
  %conv23 = trunc i64 %i.0 to i32, !dbg !3950
  %call24 = call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %phi, i32 %conv23) #7, !dbg !3950
  %call25 = call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call24) #7, !dbg !3950
  call void @llvm.dbg.value(metadata %union.tree_node* %call25, metadata !3888, metadata !DIExpression()), !dbg !3917
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #8, !dbg !3951
  %inc = add nsw i32 %edges.0, 1, !dbg !3952
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3881, metadata !DIExpression()), !dbg !3899
  %14 = getelementptr inbounds %union.tree_node, %union.tree_node* %call25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3953
  %bf.load = load i64, i64* %14, align 8, !dbg !3953
  %bf.cast7 = and i64 %bf.load, 65535, !dbg !3954
  %cmp26 = icmp eq i64 %bf.cast7, 141, !dbg !3954
  br i1 %cmp26, label %if.then28, label %if.else, !dbg !3955

if.then28:                                        ; preds = %if.then22
  %call29 = call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call25) #7, !dbg !3956
  %15 = bitcast %struct.value_range_d* %call29 to i8*, !dbg !3958
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* align 8 %15, i64 32, i1 false), !dbg !3958
  br label %if.end38, !dbg !3959

if.else:                                          ; preds = %if.then22
  %call30 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %call25) #7, !dbg !3960
  %tobool31 = icmp eq i8 %call30, 0, !dbg !3960
  br i1 %tobool31, label %if.end37, label %if.then32, !dbg !3962

if.then32:                                        ; preds = %if.else
  %call33 = call %union.tree_node* @copy_node_stat(%union.tree_node* %call25) #6, !dbg !3963
  call void @llvm.dbg.value(metadata %union.tree_node* %call33, metadata !3888, metadata !DIExpression()), !dbg !3917
  %16 = getelementptr inbounds %union.tree_node, %union.tree_node* %call33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3965
  %bf.load35 = load i64, i64* %16, align 8, !dbg !3966
  %bf.clear36 = and i64 %bf.load35, -134217729, !dbg !3966
  store i64 %bf.clear36, i64* %16, align 8, !dbg !3966
  br label %if.end37, !dbg !3967

if.end37:                                         ; preds = %if.else, %if.then32
  %arg.0 = phi %union.tree_node* [ %call33, %if.then32 ], [ %call25, %if.else ], !dbg !3917
  call void @llvm.dbg.value(metadata %union.tree_node* %arg.0, metadata !3888, metadata !DIExpression()), !dbg !3917
  store i32 1, i32* %type, align 8, !dbg !3968
  store %union.tree_node* %arg.0, %union.tree_node** %min, align 8, !dbg !3969
  store %union.tree_node* %arg.0, %union.tree_node** %max, align 8, !dbg !3970
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %equiv, align 8, !dbg !3971
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then28
  %arg.1 = phi %union.tree_node* [ %call25, %if.then28 ], [ %arg.0, %if.end37 ], !dbg !3917
  call void @llvm.dbg.value(metadata %union.tree_node* %arg.1, metadata !3888, metadata !DIExpression()), !dbg !3917
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3972
  %tobool39 = icmp eq %struct._IO_FILE* %17, null, !dbg !3972
  br i1 %tobool39, label %if.end47, label %land.lhs.true40, !dbg !3974

land.lhs.true40:                                  ; preds = %if.end38
  %18 = load i32, i32* @dump_flags, align 4, !dbg !3975
  %and41 = and i32 %18, 8, !dbg !3976
  %tobool42 = icmp eq i32 %and41, 0, !dbg !3976
  br i1 %tobool42, label %if.end47, label %if.then43, !dbg !3977

if.then43:                                        ; preds = %land.lhs.true40
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !3978
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3980
  %20 = load i32, i32* @dump_flags, align 4, !dbg !3981
  call void @print_generic_expr(%struct._IO_FILE* %19, %union.tree_node* %arg.1, i32 %20) #6, !dbg !3982
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3983
  %call45 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.51, i64 0, i64 0)) #6, !dbg !3984
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3985
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr_arg, metadata !3891, metadata !DIExpression(DW_OP_deref)), !dbg !3917
  call void @dump_value_range(%struct._IO_FILE* %22, %struct.value_range_d* nonnull %vr_arg) #7, !dbg !3986
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3987
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !3988
  br label %if.end47, !dbg !3989

if.end47:                                         ; preds = %land.lhs.true40, %if.end38, %if.then43
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr_result, metadata !3880, metadata !DIExpression(DW_OP_deref)), !dbg !3899
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr_arg, metadata !3891, metadata !DIExpression(DW_OP_deref)), !dbg !3917
  call fastcc void @vrp_meet(%struct.value_range_d* nonnull %vr_result, %struct.value_range_d* nonnull %vr_arg) #7, !dbg !3990
  %24 = load i32, i32* %type48, align 8, !dbg !3991
  %cmp49 = icmp eq i32 %24, 3, !dbg !3992
  %. = select i1 %cmp49, i32 2, i32 0, !dbg !3993
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #8, !dbg !3994
  br i1 %cmp49, label %cleanup55, label %if.end54

if.end54:                                         ; preds = %if.end47, %if.end18
  %edges.1 = phi i32 [ %edges.0, %if.end18 ], [ %inc, %if.end47 ], !dbg !3899
  call void @llvm.dbg.value(metadata i32 %edges.1, metadata !3881, metadata !DIExpression()), !dbg !3899
  br label %cleanup55, !dbg !3995

cleanup55:                                        ; preds = %if.end47, %if.end54
  %edges.2 = phi i32 [ %inc, %if.end47 ], [ %edges.1, %if.end54 ], !dbg !3952
  %cleanup.dest.slot.1 = phi i32 [ %., %if.end47 ], [ 0, %if.end54 ]
  call void @llvm.dbg.value(metadata i32 %edges.2, metadata !3881, metadata !DIExpression()), !dbg !3899
  %switch = icmp eq i32 %cleanup.dest.slot.1, 0
  br i1 %switch, label %for.inc, label %for.end

for.inc:                                          ; preds = %cleanup55
  %inc58 = add nuw nsw i64 %i.0, 1, !dbg !3996
  call void @llvm.dbg.value(metadata i64 %inc58, metadata !3877, metadata !DIExpression()), !dbg !3899
  br label %for.cond, !dbg !3997, !llvm.loop !3998

for.end:                                          ; preds = %cleanup55, %for.cond
  %edges.3 = phi i32 [ %edges.2, %cleanup55 ], [ %edges.0, %for.cond ], !dbg !3899
  call void @llvm.dbg.value(metadata i32 %edges.3, metadata !3881, metadata !DIExpression()), !dbg !3899
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4000
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %25, i64 0, i32 4, !dbg !4000
  %26 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4000
  %tobool59 = icmp eq %struct.loops* %26, null, !dbg !4000
  br i1 %tobool59, label %if.end68, label %land.lhs.true60, !dbg !4002

land.lhs.true60:                                  ; preds = %for.end
  %call61 = call fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %phi) #7, !dbg !4003
  call void @llvm.dbg.value(metadata %struct.loop* %call61, metadata !3883, metadata !DIExpression()), !dbg !3899
  %tobool62 = icmp eq %struct.loop* %call61, null, !dbg !4004
  br i1 %tobool62, label %if.end68, label %land.lhs.true63, !dbg !4005

land.lhs.true63:                                  ; preds = %land.lhs.true60
  %header = getelementptr inbounds %struct.loop, %struct.loop* %call61, i64 0, i32 2, !dbg !4006
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4006
  %call64 = call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %phi) #7, !dbg !4007
  %cmp65 = icmp eq %struct.basic_block_def* %27, %call64, !dbg !4008
  br i1 %cmp65, label %if.then67, label %if.end68, !dbg !4009

if.then67:                                        ; preds = %land.lhs.true63
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr_result, metadata !3880, metadata !DIExpression(DW_OP_deref)), !dbg !3899
  call fastcc void @adjust_range_with_scev(%struct.value_range_d* nonnull %vr_result, %struct.loop* nonnull %call61, %union.gimple_statement_d* %phi, %union.tree_node* %call1) #7, !dbg !4010
  br label %if.end68, !dbg !4010

if.end68:                                         ; preds = %land.lhs.true60, %for.end, %if.then67, %land.lhs.true63
  %28 = load i32, i32* %type48, align 8, !dbg !4011
  %cmp70 = icmp eq i32 %28, 3, !dbg !4013
  br i1 %cmp70, label %varying, label %if.end73, !dbg !4014

if.end73:                                         ; preds = %if.end68
  %29 = load i32*, i32** @vr_phi_edge_counts, align 8, !dbg !4015
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4016
  %30 = bitcast %union.tree_node** %version to i32*, !dbg !4016
  %31 = load i32, i32* %30, align 8, !dbg !4016
  %idxprom = zext i32 %31 to i64, !dbg !4015
  %arrayidx = getelementptr inbounds i32, i32* %29, i64 %idxprom, !dbg !4015
  %32 = load i32, i32* %arrayidx, align 4, !dbg !4015
  call void @llvm.dbg.value(metadata i32 %32, metadata !3882, metadata !DIExpression()), !dbg !3899
  store i32 %edges.3, i32* %arrayidx, align 4, !dbg !4017
  %type78 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call2, i64 0, i32 0, !dbg !4018
  %33 = load i32, i32* %type78, align 8, !dbg !4018
  %cmp79 = icmp eq i32 %33, 1, !dbg !4019
  br i1 %cmp79, label %land.lhs.true81, label %if.end220, !dbg !4020

land.lhs.true81:                                  ; preds = %if.end73
  %34 = load i32, i32* %type48, align 8, !dbg !4021
  %cmp83 = icmp eq i32 %34, 1, !dbg !4022
  %cmp86 = icmp sle i32 %edges.3, %32, !dbg !4023
  %or.cond = and i1 %cmp83, %cmp86, !dbg !4024
  br i1 %or.cond, label %if.then88, label %if.end220, !dbg !4024

if.then88:                                        ; preds = %land.lhs.true81
  %type89 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4025
  %35 = bitcast %union.tree_node** %type89 to i64**, !dbg !4025
  %36 = load i64*, i64** %35, align 8, !dbg !4025
  %bf.load91 = load i64, i64* %36, align 8, !dbg !4025
  %bf.cast935 = and i64 %bf.load91, 65535, !dbg !4025
  %cmp94 = icmp eq i64 %bf.cast935, 10, !dbg !4025
  br i1 %cmp94, label %if.end220, label %lor.lhs.false, !dbg !4025

lor.lhs.false:                                    ; preds = %if.then88
  %cmp102 = icmp eq i64 %bf.cast935, 12, !dbg !4025
  br i1 %cmp102, label %if.end220, label %if.then104, !dbg !4026

if.then104:                                       ; preds = %lor.lhs.false
  %min105 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call2, i64 0, i32 1, !dbg !4027
  %37 = load %union.tree_node*, %union.tree_node** %min105, align 8, !dbg !4027
  %min106 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i64 0, i32 1, !dbg !4028
  %38 = load %union.tree_node*, %union.tree_node** %min106, align 8, !dbg !4028
  %call107 = call fastcc i32 @compare_values(%union.tree_node* %37, %union.tree_node* %38) #7, !dbg !4029
  call void @llvm.dbg.value(metadata i32 %call107, metadata !3892, metadata !DIExpression()), !dbg !4030
  %max108 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call2, i64 0, i32 2, !dbg !4031
  %39 = load %union.tree_node*, %union.tree_node** %max108, align 8, !dbg !4031
  %max109 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_result, i64 0, i32 2, !dbg !4032
  %40 = load %union.tree_node*, %union.tree_node** %max109, align 8, !dbg !4032
  %call110 = call fastcc i32 @compare_values(%union.tree_node* %39, %union.tree_node* %40) #7, !dbg !4033
  call void @llvm.dbg.value(metadata i32 %call110, metadata !3897, metadata !DIExpression()), !dbg !4030
  %41 = icmp eq i32 %call107, 0, !dbg !4034
  br i1 %41, label %if.end162, label %if.then116, !dbg !4034

if.then116:                                       ; preds = %if.then104
  %42 = load %union.tree_node*, %union.tree_node** %max109, align 8, !dbg !4036
  %call118 = call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %42) #7, !dbg !4039
  %tobool120 = icmp eq i8 %call118, 0, !dbg !4039
  br i1 %tobool120, label %lor.lhs.false121, label %cleanup215, !dbg !4040

lor.lhs.false121:                                 ; preds = %if.then116
  %43 = bitcast %union.tree_node** %min106 to %struct.tree_common**, !dbg !4041
  %44 = load %struct.tree_common*, %struct.tree_common** %43, align 8, !dbg !4041
  %type124 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %44, i64 0, i32 2, !dbg !4041
  %45 = bitcast %union.tree_node** %type124 to %struct.tree_type**, !dbg !4041
  %46 = load %struct.tree_type*, %struct.tree_type** %45, align 8, !dbg !4041
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %46, i64 0, i32 13, !dbg !4041
  %47 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !4041
  %48 = load %union.tree_node*, %union.tree_node** %max109, align 8, !dbg !4042
  %call127 = call fastcc i32 @compare_values(%union.tree_node* %47, %union.tree_node* %48) #7, !dbg !4043
  %cmp128 = icmp sgt i32 %call127, 0, !dbg !4044
  br i1 %cmp128, label %cleanup215, label %if.end131, !dbg !4045

if.end131:                                        ; preds = %lor.lhs.false121
  %49 = load %struct.tree_common*, %struct.tree_common** %43, align 8, !dbg !4046
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %49, i64 0, i32 2, !dbg !4046
  %50 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !4046
  %call135 = call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %50) #7, !dbg !4048
  %tobool136 = icmp eq i8 %call135, 0, !dbg !4048
  br i1 %tobool136, label %if.then140, label %lor.lhs.false137, !dbg !4049

lor.lhs.false137:                                 ; preds = %if.end131
  %call138 = call fastcc zeroext i8 @vrp_var_may_overflow(%union.tree_node* %call1, %union.gimple_statement_d* %phi) #7, !dbg !4050
  %tobool139 = icmp eq i8 %call138, 0, !dbg !4050
  br i1 %tobool139, label %if.then140, label %if.else147, !dbg !4051

if.then140:                                       ; preds = %lor.lhs.false137, %if.end131
  %51 = load %struct.tree_common*, %struct.tree_common** %43, align 8, !dbg !4052
  %type143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %51, i64 0, i32 2, !dbg !4052
  %52 = bitcast %union.tree_node** %type143 to %struct.tree_type**, !dbg !4052
  %53 = load %struct.tree_type*, %struct.tree_type** %52, align 8, !dbg !4052
  %minval145 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %53, i64 0, i32 13, !dbg !4052
  %54 = bitcast %union.tree_node** %minval145 to i64*, !dbg !4052
  %55 = load i64, i64* %54, align 8, !dbg !4052
  %56 = bitcast %union.tree_node** %min106 to i64*, !dbg !4053
  store i64 %55, i64* %56, align 8, !dbg !4053
  br label %if.end162, !dbg !4054

if.else147:                                       ; preds = %lor.lhs.false137
  %57 = load %struct.tree_common*, %struct.tree_common** %43, align 8, !dbg !4055
  %type150 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %57, i64 0, i32 2, !dbg !4055
  %58 = load %union.tree_node*, %union.tree_node** %type150, align 8, !dbg !4055
  %call151 = call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %58) #7, !dbg !4057
  %tobool152 = icmp eq i8 %call151, 0, !dbg !4057
  br i1 %tobool152, label %cleanup215, label %if.then153, !dbg !4058

if.then153:                                       ; preds = %if.else147
  %59 = load %struct.tree_common*, %struct.tree_common** %43, align 8, !dbg !4059
  %type156 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %59, i64 0, i32 2, !dbg !4059
  %60 = load %union.tree_node*, %union.tree_node** %type156, align 8, !dbg !4059
  %call157 = call fastcc %union.tree_node* @negative_overflow_infinity(%union.tree_node* %60) #7, !dbg !4060
  store %union.tree_node* %call157, %union.tree_node** %min106, align 8, !dbg !4061
  br label %if.end162

if.end162:                                        ; preds = %if.then104, %if.then140, %if.then153
  %61 = icmp eq i32 %call110, 0, !dbg !4062
  br i1 %61, label %cleanup215, label %if.then168, !dbg !4062

if.then168:                                       ; preds = %if.end162
  %62 = load %union.tree_node*, %union.tree_node** %min106, align 8, !dbg !4064
  %call170 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %62) #7, !dbg !4067
  %tobool172 = icmp eq i8 %call170, 0, !dbg !4067
  br i1 %tobool172, label %lor.lhs.false173, label %cleanup215, !dbg !4068

lor.lhs.false173:                                 ; preds = %if.then168
  %63 = bitcast %union.tree_node** %max109 to %struct.tree_common**, !dbg !4069
  %64 = load %struct.tree_common*, %struct.tree_common** %63, align 8, !dbg !4069
  %type176 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %64, i64 0, i32 2, !dbg !4069
  %65 = bitcast %union.tree_node** %type176 to %struct.tree_type**, !dbg !4069
  %66 = load %struct.tree_type*, %struct.tree_type** %65, align 8, !dbg !4069
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %66, i64 0, i32 14, !dbg !4069
  %67 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !4069
  %68 = load %union.tree_node*, %union.tree_node** %min106, align 8, !dbg !4070
  %call179 = call fastcc i32 @compare_values(%union.tree_node* %67, %union.tree_node* %68) #7, !dbg !4071
  %cmp180 = icmp slt i32 %call179, 0, !dbg !4072
  br i1 %cmp180, label %cleanup215, label %if.end183, !dbg !4073

if.end183:                                        ; preds = %lor.lhs.false173
  %69 = load %struct.tree_common*, %struct.tree_common** %63, align 8, !dbg !4074
  %type186 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %69, i64 0, i32 2, !dbg !4074
  %70 = load %union.tree_node*, %union.tree_node** %type186, align 8, !dbg !4074
  %call187 = call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %70) #7, !dbg !4076
  %tobool188 = icmp eq i8 %call187, 0, !dbg !4076
  br i1 %tobool188, label %if.then192, label %lor.lhs.false189, !dbg !4077

lor.lhs.false189:                                 ; preds = %if.end183
  %call190 = call fastcc zeroext i8 @vrp_var_may_overflow(%union.tree_node* %call1, %union.gimple_statement_d* %phi) #7, !dbg !4078
  %tobool191 = icmp eq i8 %call190, 0, !dbg !4078
  br i1 %tobool191, label %if.then192, label %if.else199, !dbg !4079

if.then192:                                       ; preds = %lor.lhs.false189, %if.end183
  %71 = load %struct.tree_common*, %struct.tree_common** %63, align 8, !dbg !4080
  %type195 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %71, i64 0, i32 2, !dbg !4080
  %72 = bitcast %union.tree_node** %type195 to %struct.tree_type**, !dbg !4080
  %73 = load %struct.tree_type*, %struct.tree_type** %72, align 8, !dbg !4080
  %maxval197 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %73, i64 0, i32 14, !dbg !4080
  %74 = bitcast %union.tree_node** %maxval197 to i64*, !dbg !4080
  %75 = load i64, i64* %74, align 8, !dbg !4080
  %76 = bitcast %union.tree_node** %max109 to i64*, !dbg !4081
  store i64 %75, i64* %76, align 8, !dbg !4081
  br label %cleanup215, !dbg !4082

if.else199:                                       ; preds = %lor.lhs.false189
  %77 = load %struct.tree_common*, %struct.tree_common** %63, align 8, !dbg !4083
  %type202 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %77, i64 0, i32 2, !dbg !4083
  %78 = load %union.tree_node*, %union.tree_node** %type202, align 8, !dbg !4083
  %call203 = call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %78) #7, !dbg !4085
  %tobool204 = icmp eq i8 %call203, 0, !dbg !4085
  br i1 %tobool204, label %cleanup215, label %if.then205, !dbg !4086

if.then205:                                       ; preds = %if.else199
  %79 = load %struct.tree_common*, %struct.tree_common** %63, align 8, !dbg !4087
  %type208 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %79, i64 0, i32 2, !dbg !4087
  %80 = load %union.tree_node*, %union.tree_node** %type208, align 8, !dbg !4087
  %call209 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %80) #7, !dbg !4088
  store %union.tree_node* %call209, %union.tree_node** %max109, align 8, !dbg !4089
  br label %cleanup215

cleanup215:                                       ; preds = %if.else147, %if.then116, %if.else199, %if.then168, %if.end162, %if.then205, %if.then192, %lor.lhs.false173, %lor.lhs.false121
  %cleanup.dest.slot.2 = phi i32 [ 5, %lor.lhs.false121 ], [ 5, %if.then116 ], [ 5, %if.else147 ], [ 5, %lor.lhs.false173 ], [ 5, %if.then168 ], [ 5, %if.else199 ], [ 0, %if.then192 ], [ 0, %if.then205 ], [ 0, %if.end162 ]
  switch i32 %cleanup.dest.slot.2, label %cleanup225 [
    i32 0, label %if.end220
    i32 5, label %varying
  ]

if.end220:                                        ; preds = %if.then88, %lor.lhs.false, %cleanup215, %land.lhs.true81, %if.end73
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr_result, metadata !3880, metadata !DIExpression(DW_OP_deref)), !dbg !3899
  %call221 = call fastcc zeroext i8 @update_value_range(%union.tree_node* %call1, %struct.value_range_d* nonnull %vr_result) #7, !dbg !4090
  %tobool222 = icmp ne i8 %call221, 0, !dbg !4090
  %.4 = zext i1 %tobool222 to i32, !dbg !3899
  br label %cleanup225, !dbg !3899

varying:                                          ; preds = %if.end68, %cleanup215
  call void @llvm.dbg.label(metadata !3898), !dbg !4092
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %call2) #7, !dbg !4093
  br label %cleanup225, !dbg !4094

cleanup225:                                       ; preds = %if.end220, %varying, %cleanup215
  %retval.0 = phi i32 [ 2, %varying ], [ undef, %cleanup215 ], [ %.4, %if.end220 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #8, !dbg !4095
  ret i32 %retval.0, !dbg !4095
}

; Function Attrs: nounwind uwtable
define internal fastcc void @vrp_finalize() unnamed_addr #5 !dbg !4096 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4101
  %tobool = icmp eq %struct._IO_FILE* %0, null, !dbg !4101
  br i1 %tobool, label %if.end, label %if.then, !dbg !4103

if.then:                                          ; preds = %entry
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.53, i64 0, i64 0)) #6, !dbg !4104
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4106
  tail call void @dump_all_value_ranges(%struct._IO_FILE* %1) #7, !dbg !4107
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4108
  %call1 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !4109
  br label %if.end, !dbg !4110

if.end:                                           ; preds = %entry, %if.then
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4111
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, i32 3, !dbg !4111
  %4 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4111
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %4, i64 0, i32 2, !dbg !4111
  %5 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4111
  %tobool2 = icmp eq %struct.VEC_tree_gc* %5, null, !dbg !4111
  br i1 %tobool2, label %cond.end, label %cond.true, !dbg !4111

cond.true:                                        ; preds = %if.end
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %5, i64 0, i32 0, !dbg !4111
  br label %cond.end, !dbg !4111

cond.end:                                         ; preds = %if.end, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %if.end ], !dbg !4111
  %call6 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond) #7, !dbg !4111
  %conv = zext i32 %call6 to i64, !dbg !4111
  %call7 = tail call i8* @xcalloc(i64 %conv, i64 16) #6, !dbg !4111
  %6 = bitcast i8* %call7 to %struct.prop_value_d*, !dbg !4111
  call void @llvm.dbg.value(metadata %struct.prop_value_d* %6, metadata !4099, metadata !DIExpression()), !dbg !4112
  call void @llvm.dbg.value(metadata i8 0, metadata !4100, metadata !DIExpression()), !dbg !4112
  call void @llvm.dbg.value(metadata i64 0, metadata !4098, metadata !DIExpression()), !dbg !4112
  br label %for.cond, !dbg !4113

for.cond:                                         ; preds = %for.inc, %cond.end
  %do_value_subst_p.0 = phi i8 [ 0, %cond.end ], [ %do_value_subst_p.1, %for.inc ], !dbg !4112
  %i.0 = phi i64 [ 0, %cond.end ], [ %inc, %for.inc ], !dbg !4115
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !4098, metadata !DIExpression()), !dbg !4112
  call void @llvm.dbg.value(metadata i8 %do_value_subst_p.0, metadata !4100, metadata !DIExpression()), !dbg !4112
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4116
  %gimple_df9 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, i32 3, !dbg !4116
  %8 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df9, align 8, !dbg !4116
  %ssa_names10 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %8, i64 0, i32 2, !dbg !4116
  %9 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names10, align 8, !dbg !4116
  %tobool11 = icmp eq %struct.VEC_tree_gc* %9, null, !dbg !4116
  br i1 %tobool11, label %cond.end18, label %cond.true12, !dbg !4116

cond.true12:                                      ; preds = %for.cond
  %base16 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %9, i64 0, i32 0, !dbg !4116
  br label %cond.end18, !dbg !4116

cond.end18:                                       ; preds = %for.cond, %cond.true12
  %cond19 = phi %struct.VEC_tree_base* [ %base16, %cond.true12 ], [ null, %for.cond ], !dbg !4116
  %call20 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond19) #7, !dbg !4116
  %conv21 = zext i32 %call20 to i64, !dbg !4116
  %cmp = icmp ult i64 %i.0, %conv21, !dbg !4118
  br i1 %cmp, label %for.body, label %for.end, !dbg !4119

for.body:                                         ; preds = %cond.end18
  %10 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !4120
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %10, i64 %i.0, !dbg !4120
  %11 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !4120
  %tobool23 = icmp eq %struct.value_range_d* %11, null, !dbg !4120
  br i1 %tobool23, label %for.inc, label %land.lhs.true, !dbg !4122

land.lhs.true:                                    ; preds = %for.body
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %11, i64 0, i32 0, !dbg !4123
  %12 = load i32, i32* %type, align 8, !dbg !4123
  %cmp25 = icmp eq i32 %12, 1, !dbg !4124
  br i1 %cmp25, label %land.lhs.true27, label %for.inc, !dbg !4125

land.lhs.true27:                                  ; preds = %land.lhs.true
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %11, i64 0, i32 1, !dbg !4126
  %13 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !4126
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %11, i64 0, i32 2, !dbg !4127
  %14 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !4127
  %cmp30 = icmp eq %union.tree_node* %13, %14, !dbg !4128
  br i1 %cmp30, label %land.lhs.true32, label %for.inc, !dbg !4129

land.lhs.true32:                                  ; preds = %land.lhs.true27
  %call35 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %13) #6, !dbg !4130
  %tobool37 = icmp eq i8 %call35, 0, !dbg !4130
  br i1 %tobool37, label %for.inc, label %if.then38, !dbg !4131

if.then38:                                        ; preds = %land.lhs.true32
  %15 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !4132
  %arrayidx39 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %15, i64 %i.0, !dbg !4132
  %16 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx39, align 8, !dbg !4132
  %min40 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %16, i64 0, i32 1, !dbg !4134
  %17 = bitcast %union.tree_node** %min40 to i64*, !dbg !4134
  %18 = load i64, i64* %17, align 8, !dbg !4134
  %value = getelementptr inbounds %struct.prop_value_d, %struct.prop_value_d* %6, i64 %i.0, i32 1, !dbg !4135
  %19 = bitcast %union.tree_node** %value to i64*, !dbg !4136
  store i64 %18, i64* %19, align 8, !dbg !4136
  call void @llvm.dbg.value(metadata i8 1, metadata !4100, metadata !DIExpression()), !dbg !4112
  br label %for.inc, !dbg !4137

for.inc:                                          ; preds = %land.lhs.true32, %for.body, %land.lhs.true, %land.lhs.true27, %if.then38
  %do_value_subst_p.1 = phi i8 [ 1, %if.then38 ], [ %do_value_subst_p.0, %land.lhs.true32 ], [ %do_value_subst_p.0, %land.lhs.true27 ], [ %do_value_subst_p.0, %land.lhs.true ], [ %do_value_subst_p.0, %for.body ], !dbg !4112
  call void @llvm.dbg.value(metadata i8 %do_value_subst_p.1, metadata !4100, metadata !DIExpression()), !dbg !4112
  %inc = add nuw nsw i64 %i.0, 1, !dbg !4138
  call void @llvm.dbg.value(metadata i64 %inc, metadata !4098, metadata !DIExpression()), !dbg !4112
  br label %for.cond, !dbg !4139, !llvm.loop !4140

for.end:                                          ; preds = %cond.end18
  %do_value_subst_p.0.lcssa = phi i8 [ %do_value_subst_p.0, %cond.end18 ], !dbg !4112
  call void @llvm.dbg.value(metadata i8 %do_value_subst_p.0.lcssa, metadata !4100, metadata !DIExpression()), !dbg !4112
  call void @llvm.dbg.value(metadata i8 %do_value_subst_p.0.lcssa, metadata !4100, metadata !DIExpression()), !dbg !4112
  call void @llvm.dbg.value(metadata i8 %do_value_subst_p.0.lcssa, metadata !4100, metadata !DIExpression()), !dbg !4112
  %tobool43 = icmp eq i8 %do_value_subst_p.0.lcssa, 0, !dbg !4142
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !4144

if.then44:                                        ; preds = %for.end
  tail call void @free(i8* %call7) #6, !dbg !4145
  call void @llvm.dbg.value(metadata %struct.prop_value_d* null, metadata !4099, metadata !DIExpression()), !dbg !4112
  br label %if.end45, !dbg !4147

if.end45:                                         ; preds = %for.end, %if.then44
  %20 = phi i8* [ %call7, %for.end ], [ null, %if.then44 ], !dbg !4112
  %single_val_range.0 = phi %struct.prop_value_d* [ %6, %for.end ], [ null, %if.then44 ], !dbg !4112
  call void @llvm.dbg.value(metadata %struct.prop_value_d* %single_val_range.0, metadata !4099, metadata !DIExpression()), !dbg !4112
  %call46 = tail call zeroext i8 @substitute_and_fold(%struct.prop_value_d* %single_val_range.0, i8 (%struct.gimple_stmt_iterator*)* nonnull @vrp_fold_stmt) #6, !dbg !4148
  %21 = load i32, i32* @warn_array_bounds, align 4, !dbg !4149
  %tobool47 = icmp eq i32 %21, 0, !dbg !4149
  br i1 %tobool47, label %if.end49, label %if.then48, !dbg !4151

if.then48:                                        ; preds = %if.end45
  tail call fastcc void @check_all_array_refs() #7, !dbg !4152
  br label %if.end49, !dbg !4152

if.end49:                                         ; preds = %if.end45, %if.then48
  tail call fastcc void @identify_jump_threads() #7, !dbg !4153
  call void @llvm.dbg.value(metadata i64 0, metadata !4098, metadata !DIExpression()), !dbg !4112
  br label %for.cond50, !dbg !4154

for.cond50:                                       ; preds = %for.inc76, %if.end49
  %i.1 = phi i64 [ 0, %if.end49 ], [ %inc77, %for.inc76 ], !dbg !4156
  call void @llvm.dbg.value(metadata i64 %i.1, metadata !4098, metadata !DIExpression()), !dbg !4112
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4157
  %gimple_df52 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, i32 3, !dbg !4157
  %23 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df52, align 8, !dbg !4157
  %ssa_names53 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %23, i64 0, i32 2, !dbg !4157
  %24 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names53, align 8, !dbg !4157
  %tobool54 = icmp eq %struct.VEC_tree_gc* %24, null, !dbg !4157
  br i1 %tobool54, label %cond.end61, label %cond.true55, !dbg !4157

cond.true55:                                      ; preds = %for.cond50
  %base59 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %24, i64 0, i32 0, !dbg !4157
  br label %cond.end61, !dbg !4157

cond.end61:                                       ; preds = %for.cond50, %cond.true55
  %cond62 = phi %struct.VEC_tree_base* [ %base59, %cond.true55 ], [ null, %for.cond50 ], !dbg !4157
  %call63 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond62) #7, !dbg !4157
  %conv64 = zext i32 %call63 to i64, !dbg !4157
  %cmp65 = icmp ult i64 %i.1, %conv64, !dbg !4159
  br i1 %cmp65, label %for.body67, label %for.end78, !dbg !4160

for.body67:                                       ; preds = %cond.end61
  %25 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !4161
  %arrayidx68 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %25, i64 %i.1, !dbg !4161
  %26 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx68, align 8, !dbg !4161
  %tobool69 = icmp eq %struct.value_range_d* %26, null, !dbg !4161
  br i1 %tobool69, label %for.inc76, label %if.then70, !dbg !4163

if.then70:                                        ; preds = %for.body67
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %26, i64 0, i32 3, !dbg !4164
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !4164
  tail call void @bitmap_obstack_free(%struct.bitmap_head_def* %27) #6, !dbg !4164
  %28 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !4164
  %arrayidx72 = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %28, i64 %i.1, !dbg !4164
  %29 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx72, align 8, !dbg !4164
  %equiv73 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %29, i64 0, i32 3, !dbg !4164
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %equiv73, align 8, !dbg !4164
  %30 = bitcast %struct.value_range_d** %arrayidx72 to i8**, !dbg !4166
  %31 = load i8*, i8** %30, align 8, !dbg !4166
  tail call void @free(i8* %31) #6, !dbg !4167
  br label %for.inc76, !dbg !4168

for.inc76:                                        ; preds = %for.body67, %if.then70
  %inc77 = add nuw nsw i64 %i.1, 1, !dbg !4169
  call void @llvm.dbg.value(metadata i64 %inc77, metadata !4098, metadata !DIExpression()), !dbg !4112
  br label %for.cond50, !dbg !4170, !llvm.loop !4171

for.end78:                                        ; preds = %cond.end61
  tail call void @free(i8* %20) #6, !dbg !4173
  %32 = load i8*, i8** bitcast (%struct.value_range_d*** @vr_value to i8**), align 8, !dbg !4174
  tail call void @free(i8* %32) #6, !dbg !4175
  %33 = load i8*, i8** bitcast (i32** @vr_phi_edge_counts to i8**), align 8, !dbg !4176
  tail call void @free(i8* %33) #6, !dbg !4177
  store %struct.value_range_d** null, %struct.value_range_d*** @vr_value, align 8, !dbg !4178
  store i32* null, i32** @vr_phi_edge_counts, align 8, !dbg !4179
  ret void, !dbg !4180
}

; Function Attrs: nounwind uwtable
define internal fastcc void @remove_range_assertions() unnamed_addr #5 !dbg !4181 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %iter = alloca %struct.immediate_use_iterator_d, align 8
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4206
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4206
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4207
  %cfg = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, i32 1, !dbg !4207
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4207
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i64 0, i32 0, !dbg !4207
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4207
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4208
  %5 = bitcast %struct.immediate_use_iterator_d* %iter to i8*, !dbg !4209
  br label %for.cond, !dbg !4207

for.cond:                                         ; preds = %for.inc43, %entry
  %6 = phi %struct.control_flow_graph* [ %2, %entry ], [ %.pre2, %for.inc43 ], !dbg !4210
  %.pn = phi %struct.basic_block_def* [ %3, %entry ], [ %bb.0, %for.inc43 ]
  %bb.0.in = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %.pn, i64 0, i32 6, !dbg !4211
  %bb.0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.0.in, align 8, !dbg !4211
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !4183, metadata !DIExpression()), !dbg !4212
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i64 0, i32 1, !dbg !4210
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4210
  %cmp = icmp eq %struct.basic_block_def* %bb.0, %7, !dbg !4210
  br i1 %cmp, label %for.end45, label %for.body, !dbg !4207

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8, !dbg !4213
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb.0) #7, !dbg !4213
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %4, i64 24, i1 false), !dbg !4213
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8, !dbg !4213
  br label %for.cond3, !dbg !4214

for.cond3:                                        ; preds = %if.end, %for.body
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4184, metadata !DIExpression(DW_OP_deref)), !dbg !4212
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !4215
  %tobool = icmp eq i8 %call, 0, !dbg !4216
  br i1 %tobool, label %for.body4, label %for.inc43, !dbg !4217

for.body4:                                        ; preds = %for.cond3
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4184, metadata !DIExpression(DW_OP_deref)), !dbg !4212
  %call5 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !4218
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call5, metadata !4185, metadata !DIExpression()), !dbg !4219
  %call6 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %call5) #7, !dbg !4220
  %tobool7 = icmp eq i8 %call6, 0, !dbg !4220
  br i1 %tobool7, label %if.else, label %land.lhs.true, !dbg !4221

land.lhs.true:                                    ; preds = %for.body4
  %call8 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %call5) #7, !dbg !4222
  %cmp9 = icmp eq i32 %call8, 148, !dbg !4223
  br i1 %cmp9, label %if.then, label %if.else, !dbg !4224

if.then:                                          ; preds = %land.lhs.true
  %call11 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call5) #7, !dbg !4225
  call void @llvm.dbg.value(metadata %union.tree_node* %call11, metadata !4192, metadata !DIExpression()), !dbg !4209
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4226
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !4226
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4226
  %call12 = call %union.tree_node* @fold(%union.tree_node* %8) #6, !dbg !4227
  call void @llvm.dbg.value(metadata %union.tree_node* %call12, metadata !4196, metadata !DIExpression()), !dbg !4209
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %5) #8, !dbg !4228
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !4229
  %cmp13 = icmp eq %union.tree_node* %call12, %9, !dbg !4229
  br i1 %cmp13, label %cond.true, label %cond.end, !dbg !4229

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 5249, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !4229
  br label %cond.end, !dbg !4229

cond.end:                                         ; preds = %if.then, %cond.true
  %10 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !4230
  call void @llvm.dbg.value(metadata %union.tree_node* %10, metadata !4195, metadata !DIExpression()), !dbg !4209
  %call19 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %call5) #7, !dbg !4231
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %iter, metadata !4198, metadata !DIExpression(DW_OP_deref)), !dbg !4209
  %call20 = call fastcc %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* nonnull %iter, %union.tree_node* %call19) #7, !dbg !4231
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call20, metadata !4191, metadata !DIExpression()), !dbg !4219
  %11 = getelementptr inbounds %union.tree_node, %union.tree_node* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4233
  br label %for.cond21, !dbg !4231

for.cond21:                                       ; preds = %for.inc39, %cond.end
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %iter, metadata !4198, metadata !DIExpression(DW_OP_deref)), !dbg !4209
  %call22 = call fastcc zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* nonnull %iter) #7, !dbg !4238
  %tobool23 = icmp eq i8 %call22, 0, !dbg !4238
  br i1 %tobool23, label %for.body25, label %for.end41, !dbg !4231

for.body25:                                       ; preds = %for.cond21
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %iter, metadata !4198, metadata !DIExpression(DW_OP_deref)), !dbg !4209
  %call26 = call fastcc %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* nonnull %iter) #7, !dbg !4239
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call26, metadata !4197, metadata !DIExpression()), !dbg !4209
  br label %for.cond27, !dbg !4239

for.cond27:                                       ; preds = %for.inc, %for.body25
  %use_p.0 = phi %struct.ssa_use_operand_d* [ %call26, %for.body25 ], [ %call38, %for.inc ], !dbg !4240
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_p.0, metadata !4197, metadata !DIExpression()), !dbg !4209
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %iter, metadata !4198, metadata !DIExpression(DW_OP_deref)), !dbg !4209
  %call28 = call fastcc zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* nonnull %iter) #7, !dbg !4241
  %tobool29 = icmp eq i8 %call28, 0, !dbg !4241
  br i1 %tobool29, label %for.body31, label %for.inc39, !dbg !4239

for.body31:                                       ; preds = %for.cond27
  call fastcc void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use_p.0, %union.tree_node* %10) #7, !dbg !4242
  %bf.load = load i64, i64* %11, align 8, !dbg !4243
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4243
  %cmp32 = icmp eq i64 %bf.cast1, 141, !dbg !4243
  br i1 %cmp32, label %for.inc, label %cond.true34, !dbg !4243

cond.true34:                                      ; preds = %for.body31
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 5258, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !4243
  br label %for.inc, !dbg !4243

for.inc:                                          ; preds = %cond.true34, %for.body31
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %iter, metadata !4198, metadata !DIExpression(DW_OP_deref)), !dbg !4209
  %call38 = call fastcc %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* nonnull %iter) #7, !dbg !4241
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call38, metadata !4197, metadata !DIExpression()), !dbg !4209
  br label %for.cond27, !dbg !4241, !llvm.loop !4244

for.inc39:                                        ; preds = %for.cond27
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %iter, metadata !4198, metadata !DIExpression(DW_OP_deref)), !dbg !4209
  %call40 = call fastcc %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* nonnull %iter) #7, !dbg !4238
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call40, metadata !4191, metadata !DIExpression()), !dbg !4219
  br label %for.cond21, !dbg !4238, !llvm.loop !4246

for.end41:                                        ; preds = %for.cond21
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4184, metadata !DIExpression(DW_OP_deref)), !dbg !4212
  call void @gsi_remove(%struct.gimple_stmt_iterator* nonnull %si, i8 zeroext 1) #6, !dbg !4248
  call void @release_defs(%union.gimple_statement_d* %call5) #6, !dbg !4249
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %5) #8, !dbg !4250
  br label %if.end, !dbg !4251

if.else:                                          ; preds = %for.body4, %land.lhs.true
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4184, metadata !DIExpression(DW_OP_deref)), !dbg !4212
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !4252
  br label %if.end

if.end:                                           ; preds = %if.else, %for.end41
  br label %for.cond3, !dbg !4253, !llvm.loop !4254

for.inc43:                                        ; preds = %for.cond3
  %.pre = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4210
  %cfg2.phi.trans.insert = getelementptr inbounds %struct.function, %struct.function* %.pre, i64 0, i32 1, !dbg !4256
  %.pre2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2.phi.trans.insert, align 8, !dbg !4210
  br label %for.cond, !dbg !4210, !llvm.loop !4257

for.end45:                                        ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4259
  ret void, !dbg !4259
}

declare dso_local void @update_ssa(i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @finalize_jump_threads() unnamed_addr #5 !dbg !4260 {
entry:
  %call = tail call zeroext i8 @thread_through_all_blocks(i8 zeroext 0) #6, !dbg !4261
  tail call fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** nonnull @stack) #7, !dbg !4262
  ret void, !dbg !4263
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) unnamed_addr #0 !dbg !4264 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !4270, metadata !DIExpression()), !dbg !4273
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !4271, metadata !DIExpression()), !dbg !4273
  call void @llvm.dbg.value(metadata %struct.edge_def** %ptr, metadata !4272, metadata !DIExpression()), !dbg !4273
  %tobool = icmp eq %struct.VEC_edge_base* %vec_, null, !dbg !4274
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !4274

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 0, !dbg !4274
  %0 = load i32, i32* %num, align 8, !dbg !4274
  %cmp = icmp ugt i32 %0, %ix_, !dbg !4274
  br i1 %cmp, label %if.then, label %if.else, !dbg !4276

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !4277
  %arrayidx = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !4277
  %1 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4277
  br label %return, !dbg !4277

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !4279

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct.edge_def* [ null, %if.else ], [ %1, %if.then ], !dbg !4281
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !4281
  store %struct.edge_def* %storemerge, %struct.edge_def** %ptr, align 8, !dbg !4281
  ret i32 %retval.0, !dbg !4276
}

declare dso_local void @remove_edge(%struct.edge_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_switch_update_base_iterate(%struct.VEC_switch_update_base* %vec_, i32 %ix_, %struct.switch_update** %ptr) unnamed_addr #0 !dbg !4282 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_switch_update_base* %vec_, metadata !4288, metadata !DIExpression()), !dbg !4291
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !4289, metadata !DIExpression()), !dbg !4291
  call void @llvm.dbg.value(metadata %struct.switch_update** %ptr, metadata !4290, metadata !DIExpression()), !dbg !4291
  %tobool = icmp eq %struct.VEC_switch_update_base* %vec_, null, !dbg !4292
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !4292

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %vec_, i64 0, i32 0, !dbg !4292
  %0 = load i32, i32* %num, align 8, !dbg !4292
  %cmp = icmp ugt i32 %0, %ix_, !dbg !4292
  br i1 %cmp, label %if.then, label %if.else, !dbg !4294

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !4295
  %arrayidx = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !4295
  br label %return, !dbg !4295

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !4297

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct.switch_update* [ null, %if.else ], [ %arrayidx, %if.then ], !dbg !4299
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !4299
  store %struct.switch_update* %storemerge, %struct.switch_update** %ptr, align 8, !dbg !4299
  ret i32 %retval.0, !dbg !4294
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_switch_set_num_labels(%union.gimple_statement_d* %g, i32 %nlabels) unnamed_addr #0 !dbg !4300 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4304, metadata !DIExpression()), !dbg !4306
  call void @llvm.dbg.value(metadata i32 %nlabels, metadata !4305, metadata !DIExpression()), !dbg !4306
  %add = add i32 %nlabels, 1, !dbg !4307
  tail call fastcc void @gimple_set_num_ops(%union.gimple_statement_d* %g, i32 %add) #7, !dbg !4308
  ret void, !dbg !4309
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_switch_set_label(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %label) unnamed_addr #0 !dbg !4310 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4314, metadata !DIExpression()), !dbg !4317
  call void @llvm.dbg.value(metadata i32 %index, metadata !4315, metadata !DIExpression()), !dbg !4317
  call void @llvm.dbg.value(metadata %union.tree_node* %label, metadata !4316, metadata !DIExpression()), !dbg !4317
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !4318
  %add = add i32 %index, 1, !dbg !4318
  %cmp = icmp ugt i32 %call, %add, !dbg !4318
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !4318

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3225, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !4318
  br label %cond.end, !dbg !4318

cond.end:                                         ; preds = %entry, %cond.true
  %cmp1 = icmp eq %union.tree_node* %label, null, !dbg !4319
  br i1 %cmp1, label %cond.end5, label %lor.lhs.false, !dbg !4319

lor.lhs.false:                                    ; preds = %cond.end
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %label, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4319
  %bf.load = load i64, i64* %0, align 8, !dbg !4319
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4319
  %cmp2 = icmp eq i64 %bf.cast1, 139, !dbg !4319
  br i1 %cmp2, label %cond.end5, label %cond.true3, !dbg !4319

cond.true3:                                       ; preds = %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3226, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !4319
  br label %cond.end5, !dbg !4319

cond.end5:                                        ; preds = %cond.end, %lor.lhs.false, %cond.true3
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %add, %union.tree_node* %label) #7, !dbg !4320
  ret void, !dbg !4321
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4322 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4327, metadata !DIExpression()), !dbg !4328
  %call = tail call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !4329
  ret %union.tree_node* %call, !dbg !4330
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) unnamed_addr #0 !dbg !4331 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !4335, metadata !DIExpression()), !dbg !4336
  %tobool = icmp eq %struct.VEC_edge_base* %vec_, null, !dbg !4337
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4337

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 0, !dbg !4337
  %0 = load i32, i32* %num, align 8, !dbg !4337
  br label %cond.end, !dbg !4337

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !4337
  ret i32 %cond, !dbg !4337
}

declare dso_local void @free_dominance_info(i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) unnamed_addr #0 !dbg !4338 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap** @to_remove_edges, metadata !4343, metadata !DIExpression()), !dbg !4344
  %0 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !4345
  %tobool = icmp eq %struct.VEC_edge_heap* %0, null, !dbg !4345
  br i1 %tobool, label %if.end, label %if.then, !dbg !4347

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_edge_heap* %0 to i8*, !dbg !4347
  tail call void @free(i8* nonnull %1) #6, !dbg !4345
  br label %if.end, !dbg !4345

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !4347
  ret void, !dbg !4347
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_switch_update_heap_free(%struct.VEC_switch_update_heap** %vec_) unnamed_addr #0 !dbg !4348 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_switch_update_heap** @to_update_switch_stmts, metadata !4353, metadata !DIExpression()), !dbg !4354
  %0 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** @to_update_switch_stmts, align 8, !dbg !4355
  %tobool = icmp eq %struct.VEC_switch_update_heap* %0, null, !dbg !4355
  br i1 %tobool, label %if.end, label %if.then, !dbg !4357

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_switch_update_heap* %0 to i8*, !dbg !4357
  tail call void @free(i8* nonnull %1) #6, !dbg !4355
  br label %if.end, !dbg !4355

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_switch_update_heap* null, %struct.VEC_switch_update_heap** @to_update_switch_stmts, align 8, !dbg !4357
  ret void, !dbg !4357
}

declare dso_local void @threadedge_finalize_values() local_unnamed_addr #2

declare dso_local void @scev_finalize() local_unnamed_addr #2

declare dso_local void @loop_optimizer_finalize() local_unnamed_addr #2

declare dso_local void @calculate_dominance_info(i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @find_assert_locations() unnamed_addr #5 !dbg !4358 {
entry:
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp141 = alloca %struct.edge_iterator, align 8
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4385
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !4385
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4385
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i64 0, i32 5, !dbg !4385
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !4385
  %add = add nsw i32 %2, 2, !dbg !4385
  %conv = sext i32 %add to i64, !dbg !4385
  %call = tail call i8* @xcalloc(i64 %conv, i64 4) #6, !dbg !4385
  %3 = bitcast i8* %call to i32*, !dbg !4385
  call void @llvm.dbg.value(metadata i32* %3, metadata !4360, metadata !DIExpression()), !dbg !4386
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4387
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, i32 1, !dbg !4387
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4387
  %x_last_basic_block3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i64 0, i32 5, !dbg !4387
  %6 = load i32, i32* %x_last_basic_block3, align 8, !dbg !4387
  %add4 = add nsw i32 %6, 2, !dbg !4387
  %conv5 = sext i32 %add4 to i64, !dbg !4387
  %call6 = tail call i8* @xcalloc(i64 %conv5, i64 4) #6, !dbg !4387
  %7 = bitcast i8* %call6 to i32*, !dbg !4387
  call void @llvm.dbg.value(metadata i32* %7, metadata !4361, metadata !DIExpression()), !dbg !4386
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4388
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, i32 1, !dbg !4388
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !4388
  %x_last_basic_block9 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i64 0, i32 5, !dbg !4388
  %10 = load i32, i32* %x_last_basic_block9, align 8, !dbg !4388
  %add10 = add nsw i32 %10, 2, !dbg !4388
  %conv11 = sext i32 %add10 to i64, !dbg !4388
  %call12 = tail call i8* @xcalloc(i64 %conv11, i64 4) #6, !dbg !4388
  call void @llvm.dbg.value(metadata i32* %17, metadata !4362, metadata !DIExpression()), !dbg !4386
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4389
  %cfg14 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, i32 1, !dbg !4389
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg14, align 8, !dbg !4389
  %x_last_basic_block15 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i64 0, i32 5, !dbg !4389
  %13 = load i32, i32* %x_last_basic_block15, align 8, !dbg !4389
  %add16 = add nsw i32 %13, 2, !dbg !4389
  %conv17 = sext i32 %add16 to i64, !dbg !4389
  %call18 = tail call i8* @xcalloc(i64 %conv17, i64 8) #6, !dbg !4389
  store i8* %call18, i8** bitcast (%struct.simple_bitmap_def*** @live to i8**), align 8, !dbg !4390
  %call19 = tail call i32 @pre_and_rev_post_order_compute(i32* null, i32* %3, i8 zeroext 0) #6, !dbg !4391
  call void @llvm.dbg.value(metadata i32 %call19, metadata !4363, metadata !DIExpression()), !dbg !4386
  call void @llvm.dbg.value(metadata i32 0, metadata !4364, metadata !DIExpression()), !dbg !4386
  %14 = sext i32 %call19 to i64, !dbg !4392
  br label %for.cond, !dbg !4392

for.cond:                                         ; preds = %for.body, %entry
  %indvars.iv8 = phi i64 [ %indvars.iv.next9, %for.body ], [ 0, %entry ], !dbg !4394
  call void @llvm.dbg.value(metadata i64 %indvars.iv8, metadata !4364, metadata !DIExpression()), !dbg !4386
  %cmp = icmp slt i64 %indvars.iv8, %14, !dbg !4395
  br i1 %cmp, label %for.body, label %for.end, !dbg !4397

for.body:                                         ; preds = %for.cond
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %indvars.iv8, !dbg !4398
  %15 = load i32, i32* %arrayidx, align 4, !dbg !4398
  %idxprom21 = sext i32 %15 to i64, !dbg !4399
  %arrayidx22 = getelementptr inbounds i32, i32* %7, i64 %idxprom21, !dbg !4399
  %16 = trunc i64 %indvars.iv8 to i32, !dbg !4400
  store i32 %16, i32* %arrayidx22, align 4, !dbg !4400
  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1, !dbg !4401
  call void @llvm.dbg.value(metadata i32 undef, metadata !4364, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !4386
  br label %for.cond, !dbg !4402, !llvm.loop !4403

for.end:                                          ; preds = %for.cond
  %17 = bitcast i8* %call12 to i32*, !dbg !4388
  call void @llvm.dbg.value(metadata i8 0, metadata !4365, metadata !DIExpression()), !dbg !4386
  call void @llvm.dbg.value(metadata i32 %call19, metadata !4364, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !4386
  %18 = bitcast %struct.edge_def** %e to i8*, !dbg !4405
  %19 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4405
  %20 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4406
  %21 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 0, !dbg !4406
  %22 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 1, !dbg !4406
  %23 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !4407
  %24 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !4407
  %25 = bitcast %struct.edge_iterator* %tmp141 to i8*, !dbg !4408
  %26 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp141, i64 0, i32 0, !dbg !4408
  %27 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp141, i64 0, i32 1, !dbg !4408
  %28 = sext i32 %call19 to i64, !dbg !4410
  br label %for.cond23, !dbg !4410

for.cond23:                                       ; preds = %for.end173, %for.end
  %indvars.iv6 = phi i64 [ %indvars.iv.next7, %for.end173 ], [ %28, %for.end ]
  %need_asserts.0 = phi i8 [ %or1, %for.end173 ], [ 0, %for.end ], !dbg !4386
  %indvars.iv.next7 = add nsw i64 %indvars.iv6, -1, !dbg !4411
  call void @llvm.dbg.value(metadata i8 %need_asserts.0, metadata !4365, metadata !DIExpression()), !dbg !4386
  call void @llvm.dbg.value(metadata i32 undef, metadata !4364, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !4386
  %cmp24 = icmp sgt i64 %indvars.iv6, 0, !dbg !4412
  br i1 %cmp24, label %for.body26, label %for.end175, !dbg !4413

for.body26:                                       ; preds = %for.cond23
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4414
  %cfg28 = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, i32 1, !dbg !4414
  %30 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg28, align 8, !dbg !4414
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %30, i64 0, i32 2, !dbg !4414
  %31 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4414
  %tobool = icmp eq %struct.VEC_basic_block_gc* %31, null, !dbg !4414
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4414

cond.true:                                        ; preds = %for.body26
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %31, i64 0, i32 0, !dbg !4414
  br label %cond.end, !dbg !4414

cond.end:                                         ; preds = %for.body26, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %for.body26 ], !dbg !4414
  %arrayidx33 = getelementptr inbounds i32, i32* %3, i64 %indvars.iv.next7, !dbg !4414
  %32 = load i32, i32* %arrayidx33, align 4, !dbg !4414
  %call34 = call fastcc %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %32) #7, !dbg !4414
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call34, metadata !4366, metadata !DIExpression()), !dbg !4405
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #8, !dbg !4415
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #8, !dbg !4416
  %33 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4417
  %34 = load i32, i32* %arrayidx33, align 4, !dbg !4419
  %idxprom37 = sext i32 %34 to i64, !dbg !4417
  %arrayidx38 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %33, i64 %idxprom37, !dbg !4417
  %35 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx38, align 8, !dbg !4417
  %tobool39 = icmp eq %struct.simple_bitmap_def* %35, null, !dbg !4417
  br i1 %tobool39, label %if.then, label %if.end, !dbg !4420

if.then:                                          ; preds = %cond.end
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4421
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %36, i64 0, i32 3, !dbg !4421
  %37 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4421
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %37, i64 0, i32 2, !dbg !4421
  %38 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4421
  %tobool41 = icmp eq %struct.VEC_tree_gc* %38, null, !dbg !4421
  br i1 %tobool41, label %cond.end48, label %cond.true42, !dbg !4421

cond.true42:                                      ; preds = %if.then
  %base46 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %38, i64 0, i32 0, !dbg !4421
  br label %cond.end48, !dbg !4421

cond.end48:                                       ; preds = %if.then, %cond.true42
  %cond49 = phi %struct.VEC_tree_base* [ %base46, %cond.true42 ], [ null, %if.then ], !dbg !4421
  %call50 = call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond49) #7, !dbg !4421
  %call51 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call50) #6, !dbg !4423
  %39 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4424
  %40 = load i32, i32* %arrayidx33, align 4, !dbg !4425
  %idxprom54 = sext i32 %40 to i64, !dbg !4424
  %arrayidx55 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %39, i64 %idxprom54, !dbg !4424
  store %struct.simple_bitmap_def* %call51, %struct.simple_bitmap_def** %arrayidx55, align 8, !dbg !4426
  %41 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4427
  %42 = load i32, i32* %arrayidx33, align 4, !dbg !4428
  %idxprom58 = sext i32 %42 to i64, !dbg !4427
  %arrayidx59 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %41, i64 %idxprom58, !dbg !4427
  %43 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx59, align 8, !dbg !4427
  call void @sbitmap_zero(%struct.simple_bitmap_def* %43) #6, !dbg !4429
  %.pre = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4430
  %.pre2 = load i32, i32* %arrayidx33, align 4, !dbg !4431
  %idxprom62.phi.trans.insert = sext i32 %.pre2 to i64, !dbg !4405
  %arrayidx63.phi.trans.insert = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %.pre, i64 %idxprom62.phi.trans.insert, !dbg !4405
  %.pre3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx63.phi.trans.insert, align 8, !dbg !4430
  br label %if.end, !dbg !4432

if.end:                                           ; preds = %cond.end, %cond.end48
  %44 = phi %struct.simple_bitmap_def* [ %35, %cond.end ], [ %.pre3, %cond.end48 ], !dbg !4430
  %call64 = call fastcc zeroext i8 @find_assert_locations_1(%struct.basic_block_def* %call34, %struct.simple_bitmap_def* %44) #7, !dbg !4433
  %or1 = or i8 %need_asserts.0, %call64, !dbg !4434
  call void @llvm.dbg.value(metadata i8 %or1, metadata !4365, metadata !DIExpression()), !dbg !4386
  %45 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4435
  %46 = load i32, i32* %arrayidx33, align 4, !dbg !4436
  %idxprom70 = sext i32 %46 to i64, !dbg !4435
  %arrayidx71 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %45, i64 %idxprom70, !dbg !4435
  %47 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx71, align 8, !dbg !4435
  %call72 = call zeroext i8 @sbitmap_empty_p(%struct.simple_bitmap_def* %47) #6, !dbg !4437
  %tobool73 = icmp eq i8 %call72, 0, !dbg !4437
  br i1 %tobool73, label %if.then74, label %if.else, !dbg !4438

if.then74:                                        ; preds = %if.end
  call void @llvm.dbg.value(metadata i32 undef, metadata !4378, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !4439
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #8, !dbg !4440
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call34, i64 0, i32 0, !dbg !4440
  %call75 = call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds) #7, !dbg !4440
  %48 = extractvalue { i32, %struct.VEC_edge_gc** } %call75, 0, !dbg !4440
  store i32 %48, i32* %21, align 8, !dbg !4440
  %49 = extractvalue { i32, %struct.VEC_edge_gc** } %call75, 1, !dbg !4440
  store %struct.VEC_edge_gc** %49, %struct.VEC_edge_gc*** %22, align 8, !dbg !4440
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* nonnull align 8 %20, i64 16, i1 false), !dbg !4440
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #8, !dbg !4440
  %50 = trunc i64 %indvars.iv.next7 to i32, !dbg !4440
  br label %for.cond76, !dbg !4440

for.cond76:                                       ; preds = %cleanup, %if.then74
  %pred_rpo.0 = phi i32 [ %50, %if.then74 ], [ %pred_rpo.2, %cleanup ], !dbg !4441
  call void @llvm.dbg.value(metadata i32 %pred_rpo.0, metadata !4378, metadata !DIExpression()), !dbg !4439
  %51 = load i32, i32* %23, align 8, !dbg !4442
  %52 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %24, align 8, !dbg !4442
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !4370, metadata !DIExpression(DW_OP_deref)), !dbg !4405
  %call77 = call fastcc zeroext i8 @ei_cond(i32 %51, %struct.VEC_edge_gc** %52, %struct.edge_def** nonnull %e) #7, !dbg !4442
  %tobool78 = icmp eq i8 %call77, 0, !dbg !4440
  br i1 %tobool78, label %for.end123, label %for.body79, !dbg !4440

for.body79:                                       ; preds = %for.cond76
  %53 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4443
  call void @llvm.dbg.value(metadata %struct.edge_def* %53, metadata !4370, metadata !DIExpression()), !dbg !4405
  call void @llvm.dbg.value(metadata i32 undef, metadata !4381, metadata !DIExpression()), !dbg !4444
  call void @llvm.dbg.value(metadata %struct.edge_def* %53, metadata !4370, metadata !DIExpression()), !dbg !4405
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i64 0, i32 7, !dbg !4445
  %54 = load i32, i32* %flags, align 8, !dbg !4445
  %and = and i32 %54, 32, !dbg !4447
  %tobool80 = icmp eq i32 %and, 0, !dbg !4447
  br i1 %tobool80, label %if.end82, label %cleanup, !dbg !4448

if.end82:                                         ; preds = %for.body79
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i64 0, i32 0, !dbg !4449
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4449
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i64 0, i32 9, !dbg !4450
  %56 = load i32, i32* %index, align 8, !dbg !4450
  call void @llvm.dbg.value(metadata i32 %56, metadata !4381, metadata !DIExpression()), !dbg !4444
  %57 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4451
  %idxprom83 = sext i32 %56 to i64, !dbg !4451
  %arrayidx84 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %57, i64 %idxprom83, !dbg !4451
  %58 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx84, align 8, !dbg !4451
  %tobool85 = icmp eq %struct.simple_bitmap_def* %58, null, !dbg !4451
  br i1 %tobool85, label %if.then86, label %if.end105, !dbg !4453

if.then86:                                        ; preds = %if.end82
  %59 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4454
  %gimple_df88 = getelementptr inbounds %struct.function, %struct.function* %59, i64 0, i32 3, !dbg !4454
  %60 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df88, align 8, !dbg !4454
  %ssa_names89 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %60, i64 0, i32 2, !dbg !4454
  %61 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names89, align 8, !dbg !4454
  %tobool90 = icmp eq %struct.VEC_tree_gc* %61, null, !dbg !4454
  br i1 %tobool90, label %cond.end97, label %cond.true91, !dbg !4454

cond.true91:                                      ; preds = %if.then86
  %base95 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %61, i64 0, i32 0, !dbg !4454
  br label %cond.end97, !dbg !4454

cond.end97:                                       ; preds = %if.then86, %cond.true91
  %cond98 = phi %struct.VEC_tree_base* [ %base95, %cond.true91 ], [ null, %if.then86 ], !dbg !4454
  %call99 = call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond98) #7, !dbg !4454
  %call100 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call99) #6, !dbg !4456
  %62 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4457
  %arrayidx102 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %62, i64 %idxprom83, !dbg !4457
  store %struct.simple_bitmap_def* %call100, %struct.simple_bitmap_def** %arrayidx102, align 8, !dbg !4458
  %63 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4459
  %arrayidx104 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %63, i64 %idxprom83, !dbg !4459
  %64 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx104, align 8, !dbg !4459
  call void @sbitmap_zero(%struct.simple_bitmap_def* %64) #6, !dbg !4460
  %.pre4 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4461
  %arrayidx107.phi.trans.insert = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %.pre4, i64 %idxprom83, !dbg !4444
  %.pre5 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx107.phi.trans.insert, align 8, !dbg !4461
  br label %if.end105, !dbg !4462

if.end105:                                        ; preds = %if.end82, %cond.end97
  %65 = phi %struct.simple_bitmap_def* [ %58, %if.end82 ], [ %.pre5, %cond.end97 ], !dbg !4463
  %66 = phi %struct.simple_bitmap_def** [ %57, %if.end82 ], [ %.pre4, %cond.end97 ], !dbg !4464
  %67 = load i32, i32* %arrayidx33, align 4, !dbg !4465
  %idxprom112 = sext i32 %67 to i64, !dbg !4464
  %arrayidx113 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %66, i64 %idxprom112, !dbg !4464
  %68 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx113, align 8, !dbg !4464
  call void @sbitmap_a_or_b(%struct.simple_bitmap_def* %65, %struct.simple_bitmap_def* %65, %struct.simple_bitmap_def* %68) #6, !dbg !4466
  %arrayidx115 = getelementptr inbounds i32, i32* %7, i64 %idxprom83, !dbg !4467
  %69 = load i32, i32* %arrayidx115, align 4, !dbg !4467
  %cmp116 = icmp slt i32 %69, %pred_rpo.0, !dbg !4469
  br i1 %cmp116, label %if.then118, label %cleanup, !dbg !4470

if.then118:                                       ; preds = %if.end105
  call void @llvm.dbg.value(metadata i32 %69, metadata !4378, metadata !DIExpression()), !dbg !4439
  br label %cleanup, !dbg !4471

cleanup:                                          ; preds = %for.body79, %if.end105, %if.then118
  %pred_rpo.2 = phi i32 [ %pred_rpo.0, %for.body79 ], [ %69, %if.then118 ], [ %pred_rpo.0, %if.end105 ], !dbg !4439
  call void @llvm.dbg.value(metadata i32 %pred_rpo.2, metadata !4378, metadata !DIExpression()), !dbg !4439
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !4371, metadata !DIExpression(DW_OP_deref)), !dbg !4405
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !4442
  br label %for.cond76, !dbg !4442, !llvm.loop !4472

for.end123:                                       ; preds = %for.cond76
  %pred_rpo.0.lcssa = phi i32 [ %pred_rpo.0, %for.cond76 ], !dbg !4441
  call void @llvm.dbg.value(metadata i32 %pred_rpo.0.lcssa, metadata !4378, metadata !DIExpression()), !dbg !4439
  call void @llvm.dbg.value(metadata i32 %pred_rpo.0.lcssa, metadata !4378, metadata !DIExpression()), !dbg !4439
  call void @llvm.dbg.value(metadata i32 %pred_rpo.0.lcssa, metadata !4378, metadata !DIExpression()), !dbg !4439
  %70 = load i32, i32* %arrayidx33, align 4, !dbg !4474
  %idxprom126 = sext i32 %70 to i64, !dbg !4475
  %arrayidx127 = getelementptr inbounds i32, i32* %17, i64 %idxprom126, !dbg !4475
  store i32 %pred_rpo.0.lcssa, i32* %arrayidx127, align 4, !dbg !4476
  br label %if.end140, !dbg !4477

if.else:                                          ; preds = %if.end
  %71 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4478
  %72 = load i32, i32* %arrayidx33, align 4, !dbg !4478
  %idxprom130 = sext i32 %72 to i64, !dbg !4478
  %arrayidx131 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %71, i64 %idxprom130, !dbg !4478
  %73 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx131, align 8, !dbg !4478
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %73, i64 0, i32 0, !dbg !4478
  %74 = load i8*, i8** %popcount, align 8, !dbg !4478
  call void @free(i8* %74) #6, !dbg !4478
  %75 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4478
  %76 = load i32, i32* %arrayidx33, align 4, !dbg !4478
  %idxprom134 = sext i32 %76 to i64, !dbg !4478
  %arrayidx135 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %75, i64 %idxprom134, !dbg !4478
  %77 = bitcast %struct.simple_bitmap_def** %arrayidx135 to i8**, !dbg !4478
  %78 = load i8*, i8** %77, align 8, !dbg !4478
  call void @free(i8* %78) #6, !dbg !4478
  %79 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4480
  %80 = load i32, i32* %arrayidx33, align 4, !dbg !4481
  %idxprom138 = sext i32 %80 to i64, !dbg !4480
  %arrayidx139 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %79, i64 %idxprom138, !dbg !4480
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** %arrayidx139, align 8, !dbg !4482
  br label %if.end140

if.end140:                                        ; preds = %if.else, %for.end123
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #8, !dbg !4483
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call34, i64 0, i32 1, !dbg !4483
  %call142 = call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** nonnull %succs) #7, !dbg !4483
  %81 = extractvalue { i32, %struct.VEC_edge_gc** } %call142, 0, !dbg !4483
  store i32 %81, i32* %26, align 8, !dbg !4483
  %82 = extractvalue { i32, %struct.VEC_edge_gc** } %call142, 1, !dbg !4483
  store %struct.VEC_edge_gc** %82, %struct.VEC_edge_gc*** %27, align 8, !dbg !4483
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* nonnull align 8 %25, i64 16, i1 false), !dbg !4483
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #8, !dbg !4483
  br label %for.cond143, !dbg !4483

for.cond143:                                      ; preds = %for.inc172, %if.end140
  %83 = load i32, i32* %23, align 8, !dbg !4484
  %84 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %24, align 8, !dbg !4484
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !4370, metadata !DIExpression(DW_OP_deref)), !dbg !4405
  %call144 = call fastcc zeroext i8 @ei_cond(i32 %83, %struct.VEC_edge_gc** %84, %struct.edge_def** nonnull %e) #7, !dbg !4484
  %tobool145 = icmp eq i8 %call144, 0, !dbg !4483
  br i1 %tobool145, label %for.end173, label %for.body146, !dbg !4483

for.body146:                                      ; preds = %for.cond143
  %85 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4486
  call void @llvm.dbg.value(metadata %struct.edge_def* %85, metadata !4370, metadata !DIExpression()), !dbg !4405
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %85, i64 0, i32 1, !dbg !4488
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4488
  %index147 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %86, i64 0, i32 9, !dbg !4489
  %87 = load i32, i32* %index147, align 8, !dbg !4489
  %idxprom148 = sext i32 %87 to i64, !dbg !4490
  %arrayidx149 = getelementptr inbounds i32, i32* %17, i64 %idxprom148, !dbg !4490
  %88 = load i32, i32* %arrayidx149, align 4, !dbg !4490
  %89 = trunc i64 %indvars.iv.next7 to i32, !dbg !4491
  %cmp150 = icmp eq i32 %88, %89, !dbg !4491
  br i1 %cmp150, label %land.lhs.true, label %for.inc172, !dbg !4492

land.lhs.true:                                    ; preds = %for.body146
  %90 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4493
  call void @llvm.dbg.value(metadata %struct.edge_def* %85, metadata !4370, metadata !DIExpression()), !dbg !4405
  %arrayidx155 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %90, i64 %idxprom148, !dbg !4493
  %91 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx155, align 8, !dbg !4493
  %tobool156 = icmp eq %struct.simple_bitmap_def* %91, null, !dbg !4493
  br i1 %tobool156, label %for.inc172, label %if.then157, !dbg !4494

if.then157:                                       ; preds = %land.lhs.true
  call void @llvm.dbg.value(metadata %struct.edge_def* %85, metadata !4370, metadata !DIExpression()), !dbg !4405
  %popcount162 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %91, i64 0, i32 0, !dbg !4495
  %92 = load i8*, i8** %popcount162, align 8, !dbg !4495
  call void @free(i8* %92) #6, !dbg !4495
  %93 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4495
  %94 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4495
  call void @llvm.dbg.value(metadata %struct.edge_def* %94, metadata !4370, metadata !DIExpression()), !dbg !4405
  %dest163 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %94, i64 0, i32 1, !dbg !4495
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %dest163, align 8, !dbg !4495
  %index164 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i64 0, i32 9, !dbg !4495
  %96 = load i32, i32* %index164, align 8, !dbg !4495
  %idxprom165 = sext i32 %96 to i64, !dbg !4495
  %arrayidx166 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %93, i64 %idxprom165, !dbg !4495
  %97 = bitcast %struct.simple_bitmap_def** %arrayidx166 to i8**, !dbg !4495
  %98 = load i8*, i8** %97, align 8, !dbg !4495
  call void @free(i8* %98) #6, !dbg !4495
  %99 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4497
  %100 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4498
  call void @llvm.dbg.value(metadata %struct.edge_def* %100, metadata !4370, metadata !DIExpression()), !dbg !4405
  %dest167 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %100, i64 0, i32 1, !dbg !4499
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %dest167, align 8, !dbg !4499
  %index168 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i64 0, i32 9, !dbg !4500
  %102 = load i32, i32* %index168, align 8, !dbg !4500
  %idxprom169 = sext i32 %102 to i64, !dbg !4497
  %arrayidx170 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %99, i64 %idxprom169, !dbg !4497
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** %arrayidx170, align 8, !dbg !4501
  br label %for.inc172, !dbg !4502

for.inc172:                                       ; preds = %land.lhs.true, %for.body146, %if.then157
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !4371, metadata !DIExpression(DW_OP_deref)), !dbg !4405
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !4484
  br label %for.cond143, !dbg !4484, !llvm.loop !4503

for.end173:                                       ; preds = %for.cond143
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #8, !dbg !4505
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #8, !dbg !4505
  call void @llvm.dbg.value(metadata i32 undef, metadata !4364, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !4386
  br label %for.cond23, !dbg !4506, !llvm.loop !4507

for.end175:                                       ; preds = %for.cond23
  %need_asserts.0.lcssa = phi i8 [ %need_asserts.0, %for.cond23 ], !dbg !4386
  call void @llvm.dbg.value(metadata i8 %need_asserts.0.lcssa, metadata !4365, metadata !DIExpression()), !dbg !4386
  call void @llvm.dbg.value(metadata i8 %need_asserts.0.lcssa, metadata !4365, metadata !DIExpression()), !dbg !4386
  call void @llvm.dbg.value(metadata i8 %need_asserts.0.lcssa, metadata !4365, metadata !DIExpression()), !dbg !4386
  call void @free(i8* %call) #6, !dbg !4509
  call void @free(i8* %call6) #6, !dbg !4510
  call void @free(i8* %call12) #6, !dbg !4511
  call void @llvm.dbg.value(metadata i32 0, metadata !4364, metadata !DIExpression()), !dbg !4386
  br label %for.cond176, !dbg !4512

for.cond176:                                      ; preds = %for.inc194, %for.end175
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc194 ], [ 0, %for.end175 ], !dbg !4514
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !4364, metadata !DIExpression()), !dbg !4386
  %103 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4515
  %cfg178 = getelementptr inbounds %struct.function, %struct.function* %103, i64 0, i32 1, !dbg !4515
  %104 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg178, align 8, !dbg !4515
  %x_last_basic_block179 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %104, i64 0, i32 5, !dbg !4515
  %105 = load i32, i32* %x_last_basic_block179, align 8, !dbg !4515
  %add180 = add nsw i32 %105, 2, !dbg !4517
  %106 = sext i32 %add180 to i64, !dbg !4518
  %cmp181 = icmp slt i64 %indvars.iv, %106, !dbg !4518
  %107 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4386
  br i1 %cmp181, label %for.body183, label %for.end196, !dbg !4519

for.body183:                                      ; preds = %for.cond176
  %arrayidx185 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %107, i64 %indvars.iv, !dbg !4520
  %108 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx185, align 8, !dbg !4520
  %tobool186 = icmp eq %struct.simple_bitmap_def* %108, null, !dbg !4520
  br i1 %tobool186, label %for.inc194, label %if.then187, !dbg !4522

if.then187:                                       ; preds = %for.body183
  %popcount190 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %108, i64 0, i32 0, !dbg !4523
  %109 = load i8*, i8** %popcount190, align 8, !dbg !4523
  call void @free(i8* %109) #6, !dbg !4523
  %110 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !4523
  %arrayidx192 = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %110, i64 %indvars.iv, !dbg !4523
  %111 = bitcast %struct.simple_bitmap_def** %arrayidx192 to i8**, !dbg !4523
  %112 = load i8*, i8** %111, align 8, !dbg !4523
  call void @free(i8* %112) #6, !dbg !4523
  br label %for.inc194, !dbg !4523

for.inc194:                                       ; preds = %for.body183, %if.then187
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !4524
  call void @llvm.dbg.value(metadata i32 undef, metadata !4364, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !4386
  br label %for.cond176, !dbg !4525, !llvm.loop !4526

for.end196:                                       ; preds = %for.cond176
  %.lcssa = phi %struct.simple_bitmap_def** [ %107, %for.cond176 ], !dbg !4386
  %113 = bitcast %struct.simple_bitmap_def** %.lcssa to i8*, !dbg !4528
  call void @free(i8* %113) #6, !dbg !4528
  ret i8 %need_asserts.0.lcssa, !dbg !4529
}

; Function Attrs: nounwind uwtable
define internal fastcc void @process_assert_insertions() unnamed_addr #5 !dbg !4530 {
entry:
  %i = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %0 = bitcast i32* %i to i8*, !dbg !4542
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #8, !dbg !4542
  %1 = bitcast %struct.bitmap_iterator* %bi to i8*, !dbg !4543
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #8, !dbg !4543
  call void @llvm.dbg.value(metadata i8 0, metadata !4534, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i32 0, metadata !4535, metadata !DIExpression()), !dbg !4544
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4545
  %tobool = icmp eq %struct._IO_FILE* %2, null, !dbg !4545
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4547

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* @dump_flags, align 4, !dbg !4548
  %and = and i32 %3, 8, !dbg !4549
  %tobool1 = icmp eq i32 %and, 0, !dbg !4549
  br i1 %tobool1, label %if.end, label %if.then, !dbg !4550

if.then:                                          ; preds = %land.lhs.true
  tail call void @dump_all_asserts(%struct._IO_FILE* nonnull %2) #7, !dbg !4551
  br label %if.end, !dbg !4551

if.end:                                           ; preds = %land.lhs.true, %entry, %if.then
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !4552
  call void @llvm.dbg.value(metadata i32* %i, metadata !4532, metadata !DIExpression(DW_OP_deref)), !dbg !4544
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !4533, metadata !DIExpression(DW_OP_deref)), !dbg !4544
  call fastcc void @bmp_iter_set_init(%struct.bitmap_iterator* nonnull %bi, %struct.bitmap_head_def* %4, i32 0, i32* nonnull %i) #7, !dbg !4552
  br label %for.cond, !dbg !4552

for.cond:                                         ; preds = %for.inc, %if.end
  %num_asserts.0 = phi i32 [ 0, %if.end ], [ %num_asserts.1.lcssa, %for.inc ], !dbg !4553
  %update_edges_p.0 = phi i8 [ 0, %if.end ], [ %update_edges_p.1.lcssa, %for.inc ], !dbg !4554
  call void @llvm.dbg.value(metadata i8 %update_edges_p.0, metadata !4534, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i32 %num_asserts.0, metadata !4535, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i32* %i, metadata !4532, metadata !DIExpression(DW_OP_deref)), !dbg !4544
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !4533, metadata !DIExpression(DW_OP_deref)), !dbg !4544
  %call = call fastcc zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* nonnull %bi, i32* nonnull %i) #7, !dbg !4555
  %tobool2 = icmp eq i8 %call, 0, !dbg !4552
  br i1 %tobool2, label %for.end, label %for.body, !dbg !4552

for.body:                                         ; preds = %for.cond
  %5 = load %struct.assert_locus_d**, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !4556
  %6 = load i32, i32* %i, align 4, !dbg !4557
  call void @llvm.dbg.value(metadata i32 %6, metadata !4532, metadata !DIExpression()), !dbg !4544
  %idxprom = zext i32 %6 to i64, !dbg !4556
  %arrayidx = getelementptr inbounds %struct.assert_locus_d*, %struct.assert_locus_d** %5, i64 %idxprom, !dbg !4556
  %7 = load %struct.assert_locus_d*, %struct.assert_locus_d** %arrayidx, align 8, !dbg !4556
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %7, metadata !4536, metadata !DIExpression()), !dbg !4558
  %tobool3 = icmp eq %struct.assert_locus_d* %7, null, !dbg !4559
  br i1 %tobool3, label %cond.true, label %cond.end, !dbg !4559

cond.true:                                        ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 4926, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !4559
  br label %cond.end, !dbg !4559

cond.end:                                         ; preds = %for.body, %cond.true
  br label %while.cond, !dbg !4560

while.cond:                                       ; preds = %cond.end12, %cond.end
  %loc.0 = phi %struct.assert_locus_d* [ %7, %cond.end ], [ %8, %cond.end12 ], !dbg !4558
  %num_asserts.1 = phi i32 [ %num_asserts.0, %cond.end ], [ %inc, %cond.end12 ], !dbg !4544
  %update_edges_p.1 = phi i8 [ %update_edges_p.0, %cond.end ], [ %or1, %cond.end12 ], !dbg !4544
  call void @llvm.dbg.value(metadata i8 %update_edges_p.1, metadata !4534, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i32 %num_asserts.1, metadata !4535, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0, metadata !4536, metadata !DIExpression()), !dbg !4558
  %tobool4 = icmp eq %struct.assert_locus_d* %loc.0, null, !dbg !4560
  br i1 %tobool4, label %for.inc, label %while.body, !dbg !4560

while.body:                                       ; preds = %while.cond
  %next5 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 6, !dbg !4561
  %8 = load %struct.assert_locus_d*, %struct.assert_locus_d** %next5, align 8, !dbg !4561
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %8, metadata !4540, metadata !DIExpression()), !dbg !4562
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4563
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, i32 3, !dbg !4563
  %10 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !4563
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %10, i64 0, i32 2, !dbg !4563
  %11 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !4563
  %tobool6 = icmp eq %struct.VEC_tree_gc* %11, null, !dbg !4563
  br i1 %tobool6, label %cond.end12, label %cond.true7, !dbg !4563

cond.true7:                                       ; preds = %while.body
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %11, i64 0, i32 0, !dbg !4563
  br label %cond.end12, !dbg !4563

cond.end12:                                       ; preds = %while.body, %cond.true7
  %cond13 = phi %struct.VEC_tree_base* [ %base, %cond.true7 ], [ null, %while.body ], !dbg !4563
  %12 = load i32, i32* %i, align 4, !dbg !4563
  call void @llvm.dbg.value(metadata i32 %12, metadata !4532, metadata !DIExpression()), !dbg !4544
  %call14 = call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond13, i32 %12) #7, !dbg !4563
  %call15 = call fastcc zeroext i8 @process_assert_insertions_for(%union.tree_node* %call14, %struct.assert_locus_d* nonnull %loc.0) #7, !dbg !4564
  %or1 = or i8 %update_edges_p.1, %call15, !dbg !4565
  call void @llvm.dbg.value(metadata i8 %or1, metadata !4534, metadata !DIExpression()), !dbg !4544
  %13 = bitcast %struct.assert_locus_d* %loc.0 to i8*, !dbg !4566
  call void @free(i8* nonnull %13) #6, !dbg !4567
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %8, metadata !4536, metadata !DIExpression()), !dbg !4558
  %inc = add nsw i32 %num_asserts.1, 1, !dbg !4568
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4535, metadata !DIExpression()), !dbg !4544
  br label %while.cond, !dbg !4560, !llvm.loop !4569

for.inc:                                          ; preds = %while.cond
  %num_asserts.1.lcssa = phi i32 [ %num_asserts.1, %while.cond ], !dbg !4544
  %update_edges_p.1.lcssa = phi i8 [ %update_edges_p.1, %while.cond ], !dbg !4544
  call void @llvm.dbg.value(metadata i32 %num_asserts.1.lcssa, metadata !4535, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i8 %update_edges_p.1.lcssa, metadata !4534, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i32 %num_asserts.1.lcssa, metadata !4535, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i8 %update_edges_p.1.lcssa, metadata !4534, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i32 %num_asserts.1.lcssa, metadata !4535, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i8 %update_edges_p.1.lcssa, metadata !4534, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i32* %i, metadata !4532, metadata !DIExpression(DW_OP_deref)), !dbg !4544
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !4533, metadata !DIExpression(DW_OP_deref)), !dbg !4544
  call fastcc void @bmp_iter_next(%struct.bitmap_iterator* nonnull %bi, i32* nonnull %i) #7, !dbg !4555
  br label %for.cond, !dbg !4555, !llvm.loop !4571

for.end:                                          ; preds = %for.cond
  %num_asserts.0.lcssa = phi i32 [ %num_asserts.0, %for.cond ], !dbg !4553
  %update_edges_p.0.lcssa = phi i8 [ %update_edges_p.0, %for.cond ], !dbg !4554
  call void @llvm.dbg.value(metadata i32 %num_asserts.0.lcssa, metadata !4535, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i8 %update_edges_p.0.lcssa, metadata !4534, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i32 %num_asserts.0.lcssa, metadata !4535, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i8 %update_edges_p.0.lcssa, metadata !4534, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i32 %num_asserts.0.lcssa, metadata !4535, metadata !DIExpression()), !dbg !4544
  call void @llvm.dbg.value(metadata i8 %update_edges_p.0.lcssa, metadata !4534, metadata !DIExpression()), !dbg !4544
  %tobool18 = icmp eq i8 %update_edges_p.0.lcssa, 0, !dbg !4573
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !4575

if.then19:                                        ; preds = %for.end
  call void @gsi_commit_edge_inserts() #6, !dbg !4576
  br label %if.end20, !dbg !4576

if.end20:                                         ; preds = %for.end, %if.then19
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4577
  call void @statistics_counter_event(%struct.function* %14, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.36, i64 0, i64 0), i32 %num_asserts.0.lcssa) #6, !dbg !4578
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #8, !dbg !4579
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #8, !dbg !4579
  ret void, !dbg !4579
}

declare dso_local void @dump_function_to_file(%union.tree_node*, %struct._IO_FILE*, i32) local_unnamed_addr #2

declare dso_local void @free(i8*) local_unnamed_addr #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) local_unnamed_addr #2

declare dso_local i32 @pre_and_rev_post_order_compute(i32*, i32*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !4580 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_basic_block_base* %vec_, metadata !4586, metadata !DIExpression()), !dbg !4588
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !4587, metadata !DIExpression()), !dbg !4588
  br label %land.end, !dbg !4589

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !4589
  %arrayidx = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !4589
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4589
  ret %struct.basic_block_def* %0, !dbg !4589
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) local_unnamed_addr #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @find_assert_locations_1(%struct.basic_block_def* %bb, %struct.simple_bitmap_def* %live) unnamed_addr #5 !dbg !4590 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  %value = alloca %union.tree_node*, align 8
  %comp_code = alloca i32, align 4
  %tmp95 = alloca %struct.gimple_stmt_iterator, align 8
  %i101 = alloca %struct.ssa_operand_iterator_d, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4594, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata %struct.simple_bitmap_def* %live, metadata !4595, metadata !DIExpression()), !dbg !4626
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4627
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4627
  call void @llvm.dbg.value(metadata i8 0, metadata !4599, metadata !DIExpression()), !dbg !4626
  %call = tail call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %bb) #6, !dbg !4628
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !4597, metadata !DIExpression()), !dbg !4626
  %tobool = icmp eq %union.gimple_statement_d* %call, null, !dbg !4629
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4631

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* nonnull %call) #7, !dbg !4632
  %cmp = icmp eq i32 %call1, 1, !dbg !4633
  br i1 %cmp, label %land.lhs.true2, label %if.end, !dbg !4634

land.lhs.true2:                                   ; preds = %land.lhs.true
  %call3 = tail call fastcc zeroext i8 @fp_predicate(%union.gimple_statement_d* nonnull %call) #7, !dbg !4635
  %tobool4 = icmp eq i8 %call3, 0, !dbg !4635
  br i1 %tobool4, label %land.lhs.true5, label %if.end, !dbg !4636

land.lhs.true5:                                   ; preds = %land.lhs.true2
  %call6 = tail call fastcc zeroext i8 @zero_ssa_operands(%union.gimple_statement_d* nonnull %call, i32 1) #7, !dbg !4637
  %tobool7 = icmp eq i8 %call6, 0, !dbg !4637
  br i1 %tobool7, label %if.then, label %if.end, !dbg !4638

if.then:                                          ; preds = %land.lhs.true5
  %call8 = tail call fastcc zeroext i8 @find_conditional_asserts(%struct.basic_block_def* %bb, %union.gimple_statement_d* nonnull %call) #7, !dbg !4639
  call void @llvm.dbg.value(metadata i8 %call8, metadata !4599, metadata !DIExpression()), !dbg !4626
  br label %if.end, !dbg !4640

if.end:                                           ; preds = %land.lhs.true5, %land.lhs.true2, %entry, %if.then, %land.lhs.true
  %need_assert.0 = phi i8 [ 0, %land.lhs.true2 ], [ 0, %land.lhs.true5 ], [ %call8, %if.then ], [ 0, %land.lhs.true ], [ 0, %entry ], !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.0, metadata !4599, metadata !DIExpression()), !dbg !4626
  br i1 %tobool, label %if.end25, label %land.lhs.true12, !dbg !4641

land.lhs.true12:                                  ; preds = %if.end
  %call13 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* nonnull %call) #7, !dbg !4643
  %cmp14 = icmp eq i32 %call13, 5, !dbg !4644
  br i1 %cmp14, label %land.lhs.true16, label %if.end25, !dbg !4645

land.lhs.true16:                                  ; preds = %land.lhs.true12
  %call17 = tail call fastcc zeroext i8 @zero_ssa_operands(%union.gimple_statement_d* nonnull %call, i32 1) #7, !dbg !4646
  %tobool18 = icmp eq i8 %call17, 0, !dbg !4646
  br i1 %tobool18, label %if.then19, label %if.end25, !dbg !4647

if.then19:                                        ; preds = %land.lhs.true16
  %call20 = tail call fastcc zeroext i8 @find_switch_asserts(%struct.basic_block_def* %bb, %union.gimple_statement_d* nonnull %call) #7, !dbg !4648
  %or237 = or i8 %need_assert.0, %call20, !dbg !4649
  call void @llvm.dbg.value(metadata i8 %or237, metadata !4599, metadata !DIExpression()), !dbg !4626
  br label %if.end25, !dbg !4650

if.end25:                                         ; preds = %land.lhs.true16, %if.end, %if.then19, %land.lhs.true12
  %need_assert.1 = phi i8 [ %need_assert.0, %land.lhs.true16 ], [ %or237, %if.then19 ], [ %need_assert.0, %land.lhs.true12 ], [ %need_assert.0, %if.end ], !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.1, metadata !4599, metadata !DIExpression()), !dbg !4626
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4651
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4651
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb) #7, !dbg !4651
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4651
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4651
  %2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %i, i64 0, i32 0, !dbg !4652
  %3 = bitcast %union.tree_node** %value to i8*, !dbg !4653
  %4 = bitcast i32* %comp_code to i8*, !dbg !4653
  br label %for.cond, !dbg !4654

for.cond:                                         ; preds = %cleanup, %if.end25
  %need_assert.2 = phi i8 [ %need_assert.1, %if.end25 ], [ %need_assert.9, %cleanup ], !dbg !4655
  call void @llvm.dbg.value(metadata i8 %need_assert.2, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4596, metadata !DIExpression(DW_OP_deref)), !dbg !4626
  %call26 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !4656
  %tobool27 = icmp eq i8 %call26, 0, !dbg !4657
  br i1 %tobool27, label %for.body, label %for.end94, !dbg !4658

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %2) #8, !dbg !4659
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4596, metadata !DIExpression(DW_OP_deref)), !dbg !4626
  %call28 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !4660
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call28, metadata !4600, metadata !DIExpression()), !dbg !4652
  %call29 = call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call28) #7, !dbg !4661
  %tobool30 = icmp eq i8 %call29, 0, !dbg !4661
  br i1 %tobool30, label %if.end32, label %cleanup, !dbg !4663

if.end32:                                         ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !4605, metadata !DIExpression(DW_OP_deref)), !dbg !4652
  %call33 = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %i, %union.gimple_statement_d* %call28, i32 1) #7, !dbg !4664
  call void @llvm.dbg.value(metadata %union.tree_node* %call33, metadata !4604, metadata !DIExpression()), !dbg !4652
  br label %for.cond34, !dbg !4664

for.cond34:                                       ; preds = %if.end89, %if.end32
  %op.0 = phi %union.tree_node* [ %call33, %if.end32 ], [ %call90, %if.end89 ], !dbg !4665
  %need_assert.3 = phi i8 [ %need_assert.2, %if.end32 ], [ %need_assert.8, %if.end89 ], !dbg !4655
  call void @llvm.dbg.value(metadata i8 %need_assert.3, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata %union.tree_node* %op.0, metadata !4604, metadata !DIExpression()), !dbg !4652
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !4605, metadata !DIExpression(DW_OP_deref)), !dbg !4652
  %call35 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %i) #7, !dbg !4666
  %tobool36 = icmp eq i8 %call35, 0, !dbg !4666
  br i1 %tobool36, label %for.body38, label %cleanup.loopexit, !dbg !4664

for.body38:                                       ; preds = %for.cond34
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #8, !dbg !4667
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #8, !dbg !4668
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %op.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4669
  %5 = bitcast %union.tree_node** %version to i32*, !dbg !4669
  %6 = load i32, i32* %5, align 8, !dbg !4669
  call fastcc void @SET_BIT(%struct.simple_bitmap_def* %live, i32 %6) #7, !dbg !4670
  call void @llvm.dbg.value(metadata %union.tree_node** %value, metadata !4606, metadata !DIExpression(DW_OP_deref)), !dbg !4653
  call void @llvm.dbg.value(metadata i32* %comp_code, metadata !4610, metadata !DIExpression(DW_OP_deref)), !dbg !4653
  %call39 = call fastcc zeroext i8 @infer_value_range(%union.gimple_statement_d* %call28, %union.tree_node* %op.0, i32* nonnull %comp_code, %union.tree_node** nonnull %value) #7, !dbg !4671
  %tobool40 = icmp eq i8 %call39, 0, !dbg !4671
  br i1 %tobool40, label %if.end89, label %if.then41, !dbg !4672

if.then41:                                        ; preds = %for.body38
  %7 = load i32, i32* %comp_code, align 4, !dbg !4673
  call void @llvm.dbg.value(metadata i32 %7, metadata !4610, metadata !DIExpression()), !dbg !4653
  %cmp42 = icmp eq i32 %7, 102, !dbg !4674
  br i1 %cmp42, label %land.lhs.true44, label %if.end84, !dbg !4675

land.lhs.true44:                                  ; preds = %if.then41
  %8 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4676
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !4606, metadata !DIExpression()), !dbg !4653
  %call45 = call i32 @integer_zerop(%union.tree_node* %8) #6, !dbg !4677
  %tobool46 = icmp eq i32 %call45, 0, !dbg !4677
  br i1 %tobool46, label %if.end84, label %if.then47, !dbg !4678

if.then47:                                        ; preds = %land.lhs.true44
  call void @llvm.dbg.value(metadata %union.tree_node* %op.0, metadata !4611, metadata !DIExpression()), !dbg !4679
  %def_stmt49 = getelementptr inbounds %union.tree_node, %union.tree_node* %op.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4680
  %9 = bitcast %union.tree_node** %def_stmt49 to %union.gimple_statement_d**, !dbg !4680
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %9, align 8, !dbg !4680
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %10, metadata !4616, metadata !DIExpression()), !dbg !4679
  br label %while.cond, !dbg !4681

while.cond:                                       ; preds = %if.end83, %if.then47
  %need_assert.4 = phi i8 [ %need_assert.3, %if.then47 ], [ %need_assert.5, %if.end83 ], !dbg !4655
  %def_stmt.0 = phi %union.gimple_statement_d* [ %10, %if.then47 ], [ %17, %if.end83 ], !dbg !4679
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %def_stmt.0, metadata !4616, metadata !DIExpression()), !dbg !4679
  call void @llvm.dbg.value(metadata i8 %need_assert.4, metadata !4599, metadata !DIExpression()), !dbg !4626
  %call50 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %def_stmt.0) #7, !dbg !4682
  %tobool52 = icmp eq i8 %call50, 0, !dbg !4682
  br i1 %tobool52, label %if.end84.loopexit, label %land.lhs.true53, !dbg !4683

land.lhs.true53:                                  ; preds = %while.cond
  %call54 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %def_stmt.0) #7, !dbg !4684
  %cmp55 = icmp eq i32 %call54, 116, !dbg !4685
  br i1 %cmp55, label %land.lhs.true57, label %if.end84.loopexit, !dbg !4686

land.lhs.true57:                                  ; preds = %land.lhs.true53
  %call58 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %def_stmt.0) #7, !dbg !4687
  %11 = getelementptr inbounds %union.tree_node, %union.tree_node* %call58, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4687
  %bf.load = load i64, i64* %11, align 8, !dbg !4687
  %bf.cast4 = and i64 %bf.load, 65535, !dbg !4688
  %cmp59 = icmp eq i64 %bf.cast4, 141, !dbg !4688
  br i1 %cmp59, label %land.rhs, label %if.end84.loopexit, !dbg !4689

land.rhs:                                         ; preds = %land.lhs.true57
  %call61 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %def_stmt.0) #7, !dbg !4690
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call61, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4690
  %12 = bitcast %union.tree_node** %type to i64**, !dbg !4690
  %13 = load i64*, i64** %12, align 8, !dbg !4690
  %bf.load63 = load i64, i64* %13, align 8, !dbg !4690
  %bf.cast655 = and i64 %bf.load63, 65535, !dbg !4690
  %cmp66 = icmp eq i64 %bf.cast655, 10, !dbg !4690
  br i1 %cmp66, label %while.body, label %lor.rhs, !dbg !4690

lor.rhs:                                          ; preds = %land.rhs
  %call68 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %def_stmt.0) #7, !dbg !4690
  %type70 = getelementptr inbounds %union.tree_node, %union.tree_node* %call68, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4690
  %14 = bitcast %union.tree_node** %type70 to i64**, !dbg !4690
  %15 = load i64*, i64** %14, align 8, !dbg !4690
  %bf.load72 = load i64, i64* %15, align 8, !dbg !4690
  %bf.cast746 = and i64 %bf.load72, 65535, !dbg !4690
  %cmp75 = icmp eq i64 %bf.cast746, 12, !dbg !4690
  br i1 %cmp75, label %while.body, label %if.end84.loopexit, !dbg !4681

while.body:                                       ; preds = %land.rhs, %lor.rhs
  %call77 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %def_stmt.0) #7, !dbg !4691
  call void @llvm.dbg.value(metadata %union.tree_node* %call77, metadata !4611, metadata !DIExpression()), !dbg !4679
  %def_stmt79 = getelementptr inbounds %union.tree_node, %union.tree_node* %call77, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4693
  %16 = bitcast %union.tree_node** %def_stmt79 to %union.gimple_statement_d**, !dbg !4693
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %16, align 8, !dbg !4693
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %17, metadata !4616, metadata !DIExpression()), !dbg !4679
  %call80 = call fastcc zeroext i8 @has_single_use(%union.tree_node* %call77) #7, !dbg !4694
  %tobool81 = icmp eq i8 %call80, 0, !dbg !4694
  br i1 %tobool81, label %if.then82, label %if.end83, !dbg !4696

if.then82:                                        ; preds = %while.body
  %18 = load i32, i32* %comp_code, align 4, !dbg !4697
  call void @llvm.dbg.value(metadata i32 %18, metadata !4610, metadata !DIExpression()), !dbg !4653
  %19 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4699
  call void @llvm.dbg.value(metadata %union.tree_node* %19, metadata !4606, metadata !DIExpression()), !dbg !4653
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4596, metadata !DIExpression(DW_OP_deref)), !dbg !4626
  call fastcc void @register_new_assert_for(%union.tree_node* %call77, %union.tree_node* %call77, i32 %18, %union.tree_node* %19, %struct.basic_block_def* %bb, %struct.edge_def* null, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !4700
  call void @llvm.dbg.value(metadata i8 1, metadata !4599, metadata !DIExpression()), !dbg !4626
  br label %if.end83, !dbg !4701

if.end83:                                         ; preds = %while.body, %if.then82
  %need_assert.5 = phi i8 [ %need_assert.4, %while.body ], [ 1, %if.then82 ], !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.5, metadata !4599, metadata !DIExpression()), !dbg !4626
  br label %while.cond, !dbg !4681, !llvm.loop !4702

if.end84.loopexit:                                ; preds = %land.lhs.true53, %land.lhs.true57, %lor.rhs, %while.cond
  %need_assert.4.lcssa = phi i8 [ %need_assert.4, %land.lhs.true53 ], [ %need_assert.4, %land.lhs.true57 ], [ %need_assert.4, %lor.rhs ], [ %need_assert.4, %while.cond ], !dbg !4655
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.4.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  br label %if.end84, !dbg !4704

if.end84:                                         ; preds = %if.end84.loopexit, %land.lhs.true44, %if.then41
  %need_assert.6 = phi i8 [ %need_assert.3, %land.lhs.true44 ], [ %need_assert.3, %if.then41 ], [ %need_assert.4.lcssa, %if.end84.loopexit ], !dbg !4655
  call void @llvm.dbg.value(metadata i8 %need_assert.6, metadata !4599, metadata !DIExpression()), !dbg !4626
  %call85 = call fastcc zeroext i8 @has_single_use(%union.tree_node* %op.0) #7, !dbg !4704
  %tobool86 = icmp eq i8 %call85, 0, !dbg !4704
  br i1 %tobool86, label %if.then87, label %if.end89, !dbg !4706

if.then87:                                        ; preds = %if.end84
  %20 = load i32, i32* %comp_code, align 4, !dbg !4707
  call void @llvm.dbg.value(metadata i32 %20, metadata !4610, metadata !DIExpression()), !dbg !4653
  %21 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !4709
  call void @llvm.dbg.value(metadata %union.tree_node* %21, metadata !4606, metadata !DIExpression()), !dbg !4653
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4596, metadata !DIExpression(DW_OP_deref)), !dbg !4626
  call fastcc void @register_new_assert_for(%union.tree_node* %op.0, %union.tree_node* %op.0, i32 %20, %union.tree_node* %21, %struct.basic_block_def* %bb, %struct.edge_def* null, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !4710
  call void @llvm.dbg.value(metadata i8 1, metadata !4599, metadata !DIExpression()), !dbg !4626
  br label %if.end89, !dbg !4711

if.end89:                                         ; preds = %if.end84, %for.body38, %if.then87
  %need_assert.8 = phi i8 [ %need_assert.3, %for.body38 ], [ %need_assert.6, %if.end84 ], [ 1, %if.then87 ], !dbg !4655
  call void @llvm.dbg.value(metadata i8 %need_assert.8, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #8, !dbg !4712
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #8, !dbg !4712
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !4605, metadata !DIExpression(DW_OP_deref)), !dbg !4652
  %call90 = call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* nonnull %i) #7, !dbg !4666
  call void @llvm.dbg.value(metadata %union.tree_node* %call90, metadata !4604, metadata !DIExpression()), !dbg !4652
  br label %for.cond34, !dbg !4666, !llvm.loop !4713

cleanup.loopexit:                                 ; preds = %for.cond34
  %need_assert.3.lcssa = phi i8 [ %need_assert.3, %for.cond34 ], !dbg !4655
  call void @llvm.dbg.value(metadata i8 %need_assert.3.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.3.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.3.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  br label %cleanup, !dbg !4715

cleanup:                                          ; preds = %cleanup.loopexit, %for.body
  %need_assert.9 = phi i8 [ %need_assert.2, %for.body ], [ %need_assert.3.lcssa, %cleanup.loopexit ], !dbg !4655
  call void @llvm.dbg.value(metadata i8 %need_assert.9, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %2) #8, !dbg !4715
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4596, metadata !DIExpression(DW_OP_deref)), !dbg !4626
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !4716
  br label %for.cond, !dbg !4717, !llvm.loop !4718

for.end94:                                        ; preds = %for.cond
  %need_assert.2.lcssa = phi i8 [ %need_assert.2, %for.cond ], !dbg !4655
  call void @llvm.dbg.value(metadata i8 %need_assert.2.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.2.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata i8 %need_assert.2.lcssa, metadata !4599, metadata !DIExpression()), !dbg !4626
  %22 = bitcast %struct.gimple_stmt_iterator* %tmp95 to i8*, !dbg !4720
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #8, !dbg !4720
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* nonnull sret %tmp95, %struct.basic_block_def* %bb) #6, !dbg !4720
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %22, i64 24, i1 false), !dbg !4720
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #8, !dbg !4720
  %23 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %i101, i64 0, i32 0, !dbg !4721
  br label %for.cond96, !dbg !4722

for.cond96:                                       ; preds = %for.end122, %for.end94
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4596, metadata !DIExpression(DW_OP_deref)), !dbg !4626
  %call97 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !4723
  %tobool98 = icmp eq i8 %call97, 0, !dbg !4724
  br i1 %tobool98, label %for.body100, label %for.end124, !dbg !4725

for.body100:                                      ; preds = %for.cond96
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %23) #8, !dbg !4726
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4596, metadata !DIExpression(DW_OP_deref)), !dbg !4626
  %call102 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !4727
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call102, metadata !4598, metadata !DIExpression()), !dbg !4626
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i101, metadata !4621, metadata !DIExpression(DW_OP_deref)), !dbg !4721
  %call103 = call fastcc %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* nonnull %i101, %union.gimple_statement_d* %call102, i32 1) #7, !dbg !4728
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call103, metadata !4617, metadata !DIExpression()), !dbg !4721
  br label %for.cond104, !dbg !4728

for.cond104:                                      ; preds = %for.inc120, %for.body100
  %arg_p.0 = phi %struct.ssa_use_operand_d* [ %call103, %for.body100 ], [ %call121, %for.inc120 ], !dbg !4729
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %arg_p.0, metadata !4617, metadata !DIExpression()), !dbg !4721
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i101, metadata !4621, metadata !DIExpression(DW_OP_deref)), !dbg !4721
  %call105 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %i101) #7, !dbg !4730
  %tobool106 = icmp eq i8 %call105, 0, !dbg !4730
  br i1 %tobool106, label %for.body108, label %for.end122, !dbg !4728

for.body108:                                      ; preds = %for.cond104
  %call109 = call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %arg_p.0) #7, !dbg !4731
  call void @llvm.dbg.value(metadata %union.tree_node* %call109, metadata !4622, metadata !DIExpression()), !dbg !4732
  %24 = getelementptr inbounds %union.tree_node, %union.tree_node* %call109, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4733
  %bf.load111 = load i64, i64* %24, align 8, !dbg !4733
  %bf.cast1133 = and i64 %bf.load111, 65535, !dbg !4735
  %cmp114 = icmp eq i64 %bf.cast1133, 141, !dbg !4735
  br i1 %cmp114, label %if.then116, label %for.inc120, !dbg !4736

if.then116:                                       ; preds = %for.body108
  %version118 = getelementptr inbounds %union.tree_node, %union.tree_node* %call109, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4737
  %25 = bitcast %union.tree_node** %version118 to i32*, !dbg !4737
  %26 = load i32, i32* %25, align 8, !dbg !4737
  call fastcc void @SET_BIT(%struct.simple_bitmap_def* %live, i32 %26) #7, !dbg !4738
  br label %for.inc120, !dbg !4738

for.inc120:                                       ; preds = %for.body108, %if.then116
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i101, metadata !4621, metadata !DIExpression(DW_OP_deref)), !dbg !4721
  %call121 = call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* nonnull %i101) #7, !dbg !4730
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call121, metadata !4617, metadata !DIExpression()), !dbg !4721
  br label %for.cond104, !dbg !4730, !llvm.loop !4739

for.end122:                                       ; preds = %for.cond104
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %23) #8, !dbg !4741
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4596, metadata !DIExpression(DW_OP_deref)), !dbg !4626
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !4742
  br label %for.cond96, !dbg !4743, !llvm.loop !4744

for.end124:                                       ; preds = %for.cond96
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4746
  ret i8 %need_assert.2.lcssa, !dbg !4747
}

declare dso_local zeroext i8 @sbitmap_empty_p(%struct.simple_bitmap_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) unnamed_addr #0 !dbg !4748 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.VEC_edge_gc** %ev, metadata !4752, metadata !DIExpression()), !dbg !4754
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i64 0, i32 0, !dbg !4755
  store i32 0, i32* %index, align 8, !dbg !4756
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i64 0, i32 1, !dbg !4757
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %container, align 8, !dbg !4758
  %0 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !4759
  %1 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, align 8, !dbg !4759
  ret { i32, %struct.VEC_edge_gc** } %1, !dbg !4759
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) unnamed_addr #0 !dbg !4760 {
entry:
  call void @llvm.dbg.value(metadata %struct.edge_def** %p, metadata !4765, metadata !DIExpression()), !dbg !4766
  %call = tail call fastcc zeroext i8 @ei_end_p(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1) #7, !dbg !4767
  %tobool = icmp eq i8 %call, 0, !dbg !4767
  br i1 %tobool, label %if.then, label %if.else, !dbg !4769

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %struct.edge_def* @ei_edge(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1) #7, !dbg !4770
  br label %return, !dbg !4772

if.else:                                          ; preds = %entry
  br label %return, !dbg !4773

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct.edge_def* [ %call1, %if.then ], [ null, %if.else ], !dbg !4775
  %retval.0 = phi i8 [ 1, %if.then ], [ 0, %if.else ], !dbg !4775
  store %struct.edge_def* %storemerge, %struct.edge_def** %p, align 8, !dbg !4775
  ret i8 %retval.0, !dbg !4776
}

declare dso_local void @sbitmap_a_or_b(%struct.simple_bitmap_def*, %struct.simple_bitmap_def*, %struct.simple_bitmap_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @ei_next(%struct.edge_iterator* %i) unnamed_addr #0 !dbg !4777 {
entry:
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %i, metadata !4782, metadata !DIExpression()), !dbg !4783
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i64 0, i32 0, !dbg !4784
  %0 = load i32, i32* %index, align 8, !dbg !4784
  %1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i64 0, i32 1, !dbg !4784
  %2 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %1, align 8, !dbg !4784
  %call = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %0, %struct.VEC_edge_gc** %2) #7, !dbg !4784
  %tobool = icmp eq %struct.VEC_edge_gc* %call, null, !dbg !4784
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4784

cond.true:                                        ; preds = %entry
  %3 = load i32, i32* %index, align 8, !dbg !4784
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %1, align 8, !dbg !4784
  %call1 = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %3, %struct.VEC_edge_gc** %4) #7, !dbg !4784
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i64 0, i32 0, !dbg !4784
  br label %cond.end, !dbg !4784

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !4784
  %call2 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #7, !dbg !4784
  %cmp = icmp ult i32 %0, %call2, !dbg !4784
  br i1 %cmp, label %cond.end5, label %cond.true3, !dbg !4784

cond.true3:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !4784
  br label %cond.end5, !dbg !4784

cond.end5:                                        ; preds = %cond.end, %cond.true3
  %5 = load i32, i32* %index, align 8, !dbg !4785
  %inc = add i32 %5, 1, !dbg !4785
  store i32 %inc, i32* %index, align 8, !dbg !4785
  ret void, !dbg !4786
}

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_code(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4787 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4791, metadata !DIExpression()), !dbg !4792
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 0, !dbg !4793
  %bf.load = load i32, i32* %0, align 8, !dbg !4793
  %bf.clear = and i32 %bf.load, 255, !dbg !4793
  ret i32 %bf.clear, !dbg !4794
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @fp_predicate(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !4795 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4799, metadata !DIExpression()), !dbg !4800
  %call = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !4801
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4801
  %0 = bitcast %union.tree_node** %type to i64**, !dbg !4801
  %1 = load i64*, i64** %0, align 8, !dbg !4801
  %bf.load = load i64, i64* %1, align 8, !dbg !4801
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4801
  %cmp = icmp eq i64 %bf.cast1, 9, !dbg !4801
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !4801

lor.rhs:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !4801
  %type3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4801
  %2 = bitcast %union.tree_node** %type3 to i64**, !dbg !4801
  %3 = load i64*, i64** %2, align 8, !dbg !4801
  %bf.load5 = load i64, i64* %3, align 8, !dbg !4801
  %bf.cast72 = and i64 %bf.load5, 65535, !dbg !4801
  %cmp8 = icmp eq i64 %bf.cast72, 13, !dbg !4801
  br i1 %cmp8, label %land.rhs, label %lor.lhs.false, !dbg !4801

lor.lhs.false:                                    ; preds = %lor.rhs
  %call9 = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !4801
  %type11 = getelementptr inbounds %union.tree_node, %union.tree_node* %call9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4801
  %4 = bitcast %union.tree_node** %type11 to i64**, !dbg !4801
  %5 = load i64*, i64** %4, align 8, !dbg !4801
  %bf.load13 = load i64, i64* %5, align 8, !dbg !4801
  %bf.cast153 = and i64 %bf.load13, 65535, !dbg !4801
  %cmp16 = icmp eq i64 %bf.cast153, 14, !dbg !4801
  br i1 %cmp16, label %land.rhs, label %lor.end, !dbg !4801

land.rhs:                                         ; preds = %lor.lhs.false, %lor.rhs
  %call17 = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !4801
  %type19 = getelementptr inbounds %union.tree_node, %union.tree_node* %call17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4801
  %6 = bitcast %union.tree_node** %type19 to %struct.tree_common**, !dbg !4801
  %7 = load %struct.tree_common*, %struct.tree_common** %6, align 8, !dbg !4801
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %7, i64 0, i32 2, !dbg !4801
  %8 = bitcast %union.tree_node** %type21 to i64**, !dbg !4801
  %9 = load i64*, i64** %8, align 8, !dbg !4801
  %bf.load23 = load i64, i64* %9, align 8, !dbg !4801
  %bf.cast254 = and i64 %bf.load23, 65535, !dbg !4801
  %cmp26 = icmp eq i64 %bf.cast254, 9, !dbg !4801
  %phitmp = zext i1 %cmp26 to i8
  br label %lor.end

lor.end:                                          ; preds = %lor.lhs.false, %land.rhs, %entry
  %10 = phi i8 [ 1, %entry ], [ 0, %lor.lhs.false ], [ %phitmp, %land.rhs ]
  ret i8 %10, !dbg !4802
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @zero_ssa_operands(%union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !4803 {
entry:
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4808, metadata !DIExpression()), !dbg !4811
  call void @llvm.dbg.value(metadata i32 1, metadata !4809, metadata !DIExpression()), !dbg !4811
  %0 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %iter, i64 0, i32 0, !dbg !4812
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #8, !dbg !4812
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4810, metadata !DIExpression(DW_OP_deref)), !dbg !4811
  %call = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %iter, %union.gimple_statement_d* %stmt, i32 1) #7, !dbg !4813
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4810, metadata !DIExpression(DW_OP_deref)), !dbg !4811
  %call1 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !4814
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #8, !dbg !4815
  ret i8 %call1, !dbg !4816
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @find_conditional_asserts(%struct.basic_block_def* %bb, %union.gimple_statement_d* %last) unnamed_addr #5 !dbg !4817 {
entry:
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp1 = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4821, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %last, metadata !4822, metadata !DIExpression()), !dbg !4829
  %0 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4830
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4830
  %1 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4831
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !4831
  %2 = bitcast %struct.edge_def** %e to i8*, !dbg !4832
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #8, !dbg !4832
  %3 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %iter, i64 0, i32 0, !dbg !4833
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %3) #8, !dbg !4833
  call void @llvm.dbg.value(metadata i8 0, metadata !4823, metadata !DIExpression()), !dbg !4829
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4834
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8, !dbg !4834
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp, %union.gimple_statement_d* %last) #6, !dbg !4834
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %4, i64 24, i1 false), !dbg !4834
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8, !dbg !4834
  %5 = bitcast %struct.edge_iterator* %tmp1 to i8*, !dbg !4835
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8, !dbg !4835
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 1, !dbg !4835
  %call = call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** nonnull %succs) #7, !dbg !4835
  %6 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp1, i64 0, i32 0, !dbg !4835
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !4835
  store i32 %7, i32* %6, align 8, !dbg !4835
  %8 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp1, i64 0, i32 1, !dbg !4835
  %9 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !4835
  store %struct.VEC_edge_gc** %9, %struct.VEC_edge_gc*** %8, align 8, !dbg !4835
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %5, i64 16, i1 false), !dbg !4835
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8, !dbg !4835
  %10 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !4837
  %11 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !4837
  br label %for.cond, !dbg !4835

for.cond:                                         ; preds = %for.inc15, %entry
  %need_assert.0 = phi i8 [ 0, %entry ], [ %need_assert.2, %for.inc15 ], !dbg !4839
  call void @llvm.dbg.value(metadata i8 %need_assert.0, metadata !4823, metadata !DIExpression()), !dbg !4829
  %12 = load i32, i32* %10, align 8, !dbg !4840
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4840
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !4827, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  %call2 = call fastcc zeroext i8 @ei_cond(i32 %12, %struct.VEC_edge_gc** %13, %struct.edge_def** nonnull %e) #7, !dbg !4840
  %tobool = icmp eq i8 %call2, 0, !dbg !4835
  br i1 %tobool, label %for.end16, label %for.body, !dbg !4835

for.body:                                         ; preds = %for.cond
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4841
  call void @llvm.dbg.value(metadata %struct.edge_def* %14, metadata !4827, metadata !DIExpression()), !dbg !4829
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i64 0, i32 1, !dbg !4844
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4844
  %cmp = icmp eq %struct.basic_block_def* %15, %bb, !dbg !4845
  br i1 %cmp, label %for.inc15, label %if.end, !dbg !4846

if.end:                                           ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4828, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  %call3 = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %iter, %union.gimple_statement_d* %last, i32 1) #7, !dbg !4847
  call void @llvm.dbg.value(metadata %union.tree_node* %call3, metadata !4825, metadata !DIExpression()), !dbg !4829
  br label %for.cond4, !dbg !4847

for.cond4:                                        ; preds = %for.body7, %if.end
  %need_assert.1 = phi i8 [ %need_assert.0, %if.end ], [ %or1, %for.body7 ], !dbg !4829
  %op.0 = phi %union.tree_node* [ %call3, %if.end ], [ %call14, %for.body7 ], !dbg !4849
  call void @llvm.dbg.value(metadata %union.tree_node* %op.0, metadata !4825, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata i8 %need_assert.1, metadata !4823, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4828, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  %call5 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !4850
  %tobool6 = icmp eq i8 %call5, 0, !dbg !4850
  br i1 %tobool6, label %for.body7, label %for.inc15.loopexit, !dbg !4847

for.body7:                                        ; preds = %for.cond4
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4852
  call void @llvm.dbg.value(metadata %struct.edge_def* %16, metadata !4827, metadata !DIExpression()), !dbg !4829
  %call8 = call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %last) #7, !dbg !4854
  %call9 = call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %last) #7, !dbg !4855
  %call10 = call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %last) #7, !dbg !4856
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4824, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  %call11 = call fastcc zeroext i8 @register_edge_assert_for(%union.tree_node* %op.0, %struct.edge_def* %16, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %call8, %union.tree_node* %call9, %union.tree_node* %call10) #7, !dbg !4857
  %or1 = or i8 %need_assert.1, %call11, !dbg !4858
  call void @llvm.dbg.value(metadata i8 %or1, metadata !4823, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !4828, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  %call14 = call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !4850
  call void @llvm.dbg.value(metadata %union.tree_node* %call14, metadata !4825, metadata !DIExpression()), !dbg !4829
  br label %for.cond4, !dbg !4850, !llvm.loop !4859

for.inc15.loopexit:                               ; preds = %for.cond4
  %need_assert.1.lcssa = phi i8 [ %need_assert.1, %for.cond4 ], !dbg !4829
  call void @llvm.dbg.value(metadata i8 %need_assert.1.lcssa, metadata !4823, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata i8 %need_assert.1.lcssa, metadata !4823, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata i8 %need_assert.1.lcssa, metadata !4823, metadata !DIExpression()), !dbg !4829
  br label %for.inc15, !dbg !4840

for.inc15:                                        ; preds = %for.inc15.loopexit, %for.body
  %need_assert.2 = phi i8 [ %need_assert.0, %for.body ], [ %need_assert.1.lcssa, %for.inc15.loopexit ], !dbg !4839
  call void @llvm.dbg.value(metadata i8 %need_assert.2, metadata !4823, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !4826, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !4840
  br label %for.cond, !dbg !4840, !llvm.loop !4861

for.end16:                                        ; preds = %for.cond
  %need_assert.0.lcssa = phi i8 [ %need_assert.0, %for.cond ], !dbg !4839
  call void @llvm.dbg.value(metadata i8 %need_assert.0.lcssa, metadata !4823, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata i8 %need_assert.0.lcssa, metadata !4823, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata i8 %need_assert.0.lcssa, metadata !4823, metadata !DIExpression()), !dbg !4829
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %3) #8, !dbg !4863
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #8, !dbg !4863
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !4863
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4863
  ret i8 %need_assert.0.lcssa, !dbg !4864
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @find_switch_asserts(%struct.basic_block_def* %bb, %union.gimple_statement_d* %last) unnamed_addr #5 !dbg !4865 {
entry:
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4867, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %last, metadata !4868, metadata !DIExpression()), !dbg !4882
  %0 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4883
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4883
  %call = tail call fastcc i32 @gimple_switch_num_labels(%union.gimple_statement_d* %last) #7, !dbg !4884
  %conv = zext i32 %call to i64, !dbg !4884
  call void @llvm.dbg.value(metadata i64 %conv, metadata !4874, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i8 0, metadata !4869, metadata !DIExpression()), !dbg !4882
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4885
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4885
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp, %union.gimple_statement_d* %last) #6, !dbg !4885
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4885
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4885
  %call1 = call fastcc %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %last) #7, !dbg !4886
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !4871, metadata !DIExpression()), !dbg !4882
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4887
  %bf.load = load i64, i64* %2, align 8, !dbg !4887
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4889
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !4889
  br i1 %cmp, label %if.end, label %cleanup113, !dbg !4890

if.end:                                           ; preds = %entry
  %call4 = call %union.tree_node* @make_tree_vec_stat(i32 %call) #6, !dbg !4891
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !4873, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i32 0, metadata !4875, metadata !DIExpression()), !dbg !4882
  %a = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4892
  %wide.trip.count = zext i32 %call to i64, !dbg !4895
  br label %for.cond, !dbg !4896

for.cond:                                         ; preds = %for.body, %if.end
  %indvars.iv4 = phi i64 [ %indvars.iv.next5, %for.body ], [ 0, %if.end ], !dbg !4897
  call void @llvm.dbg.value(metadata i64 %indvars.iv4, metadata !4875, metadata !DIExpression()), !dbg !4882
  %exitcond = icmp eq i64 %indvars.iv4, %wide.trip.count, !dbg !4895
  br i1 %exitcond, label %for.end, label %for.body, !dbg !4898

for.body:                                         ; preds = %for.cond
  %3 = trunc i64 %indvars.iv4 to i32, !dbg !4899
  %call8 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %last, i32 %3) #7, !dbg !4899
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %a, i64 %indvars.iv4, !dbg !4900
  store %union.tree_node* %call8, %union.tree_node** %arrayidx, align 8, !dbg !4901
  %indvars.iv.next5 = add nuw nsw i64 %indvars.iv4, 1, !dbg !4902
  br label %for.cond, !dbg !4903, !llvm.loop !4904

for.end:                                          ; preds = %for.cond
  %4 = bitcast %union.tree_node** %a to i8*, !dbg !4906
  call void @spec_qsort(i8* nonnull %4, i64 %conv, i64 8, i32 (i8*, i8*)* nonnull @compare_case_labels) #6, !dbg !4907
  call void @llvm.dbg.value(metadata i32 0, metadata !4875, metadata !DIExpression()), !dbg !4882
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4908
  br label %for.cond12, !dbg !4909

for.cond12:                                       ; preds = %cleanup, %for.end
  %idx.1 = phi i32 [ 0, %for.end ], [ %inc111, %cleanup ], !dbg !4910
  %need_assert.0 = phi i8 [ 0, %for.end ], [ %need_assert.2, %cleanup ], !dbg !4911
  call void @llvm.dbg.value(metadata i8 %need_assert.0, metadata !4869, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i32 %idx.1, metadata !4875, metadata !DIExpression()), !dbg !4882
  %cmp14 = icmp ult i32 %idx.1, %call, !dbg !4912
  br i1 %cmp14, label %for.body16, label %cleanup113.loopexit, !dbg !4913

for.body16:                                       ; preds = %for.cond12
  %idxprom19 = zext i32 %idx.1 to i64, !dbg !4914
  %arrayidx20 = getelementptr inbounds %union.tree_node*, %union.tree_node** %a, i64 %idxprom19, !dbg !4914
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx20, align 8, !dbg !4914
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !4881, metadata !DIExpression()), !dbg !4908
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4915
  %6 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !4915
  call void @llvm.dbg.value(metadata %union.tree_node* %6, metadata !4876, metadata !DIExpression()), !dbg !4908
  %arrayidx24 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !4916
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx24, align 8, !dbg !4916
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !4880, metadata !DIExpression()), !dbg !4908
  %add = add i32 %idx.1, 1, !dbg !4917
  %cmp26 = icmp ult i32 %add, %call, !dbg !4919
  br i1 %cmp26, label %land.lhs.true, label %if.end81, !dbg !4920

land.lhs.true:                                    ; preds = %for.body16
  %arrayidx30 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !4921
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx30, align 8, !dbg !4921
  %idxprom34 = zext i32 %add to i64, !dbg !4922
  %arrayidx35 = getelementptr inbounds %union.tree_node*, %union.tree_node** %a, i64 %idxprom34, !dbg !4922
  %9 = bitcast %union.tree_node** %arrayidx35 to %struct.tree_exp**, !dbg !4922
  %10 = load %struct.tree_exp*, %struct.tree_exp** %9, align 8, !dbg !4922
  %arrayidx38 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %10, i64 0, i32 3, i64 2, !dbg !4922
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx38, align 8, !dbg !4922
  %cmp39 = icmp eq %union.tree_node* %8, %11, !dbg !4923
  br i1 %cmp39, label %do.body.preheader, label %if.end81, !dbg !4924

do.body.preheader:                                ; preds = %land.lhs.true
  br label %do.body, !dbg !4925

do.body:                                          ; preds = %do.body.preheader, %land.rhs
  %indvars.iv = phi i64 [ %idxprom19, %do.body.preheader ], [ %indvars.iv.next, %land.rhs ], !dbg !4910
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !4875, metadata !DIExpression()), !dbg !4882
  %12 = trunc i64 %indvars.iv to i32, !dbg !4927
  %inc42 = add i32 %12, 1, !dbg !4927
  call void @llvm.dbg.value(metadata i32 %inc42, metadata !4875, metadata !DIExpression()), !dbg !4882
  %cmp44 = icmp ult i32 %inc42, %call, !dbg !4929
  %13 = trunc i64 %indvars.iv to i32, !dbg !4930
  br i1 %cmp44, label %land.rhs, label %do.end, !dbg !4930

land.rhs:                                         ; preds = %do.body
  %idxprom51 = zext i32 %inc42 to i64, !dbg !4931
  %arrayidx52 = getelementptr inbounds %union.tree_node*, %union.tree_node** %a, i64 %idxprom51, !dbg !4931
  %14 = bitcast %union.tree_node** %arrayidx52 to %struct.tree_exp**, !dbg !4931
  %15 = load %struct.tree_exp*, %struct.tree_exp** %14, align 8, !dbg !4931
  %arrayidx55 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %15, i64 0, i32 3, i64 2, !dbg !4931
  %16 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !4931
  %cmp56 = icmp eq %union.tree_node* %8, %16, !dbg !4932
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !4927
  br i1 %cmp56, label %do.body, label %do.end, !dbg !4933, !llvm.loop !4934

do.end:                                           ; preds = %do.body, %land.rhs
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %do.body ], [ %indvars.iv, %land.rhs ], !dbg !4910
  %.lcssa = phi i32 [ %13, %do.body ], [ %13, %land.rhs ], !dbg !4930
  call void @llvm.dbg.value(metadata i64 %indvars.iv.lcssa, metadata !4875, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i64 %indvars.iv.lcssa, metadata !4875, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i32 %.lcssa, metadata !4875, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i32 %.lcssa, metadata !4875, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i32 %.lcssa, metadata !4875, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i32 %.lcssa, metadata !4875, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i32 %.lcssa, metadata !4875, metadata !DIExpression()), !dbg !4882
  %idxprom60 = and i64 %indvars.iv.lcssa, 4294967295, !dbg !4936
  %arrayidx61 = getelementptr inbounds %union.tree_node*, %union.tree_node** %a, i64 %idxprom60, !dbg !4936
  %17 = bitcast %union.tree_node** %arrayidx61 to %struct.tree_exp**, !dbg !4936
  %18 = load %struct.tree_exp*, %struct.tree_exp** %17, align 8, !dbg !4936
  %arrayidx64 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %18, i64 0, i32 3, i64 1, !dbg !4936
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx64, align 8, !dbg !4936
  %tobool = icmp eq %union.tree_node* %19, null, !dbg !4936
  br i1 %tobool, label %if.else, label %if.then65, !dbg !4938

if.then65:                                        ; preds = %do.end
  call void @llvm.dbg.value(metadata %union.tree_node* %19, metadata !4880, metadata !DIExpression()), !dbg !4908
  br label %if.end81, !dbg !4939

if.else:                                          ; preds = %do.end
  %arrayidx79 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %18, i64 0, i32 3, i64 0, !dbg !4940
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx79, align 8, !dbg !4940
  call void @llvm.dbg.value(metadata %union.tree_node* %20, metadata !4880, metadata !DIExpression()), !dbg !4908
  br label %if.end81

if.end81:                                         ; preds = %if.then65, %if.else, %land.lhs.true, %for.body16
  %idx.3 = phi i32 [ %idx.1, %land.lhs.true ], [ %idx.1, %for.body16 ], [ %.lcssa, %if.else ], [ %.lcssa, %if.then65 ], !dbg !4910
  %max.1 = phi %union.tree_node* [ %7, %land.lhs.true ], [ %7, %for.body16 ], [ %20, %if.else ], [ %19, %if.then65 ], !dbg !4908
  call void @llvm.dbg.value(metadata %union.tree_node* %max.1, metadata !4880, metadata !DIExpression()), !dbg !4908
  call void @llvm.dbg.value(metadata i32 %idx.3, metadata !4875, metadata !DIExpression()), !dbg !4882
  %cmp82 = icmp eq %union.tree_node* %6, null, !dbg !4941
  br i1 %cmp82, label %cleanup, label %if.end85, !dbg !4943

if.end85:                                         ; preds = %if.end81
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4944
  %arrayidx88 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !4944
  %22 = load %union.tree_node*, %union.tree_node** %arrayidx88, align 8, !dbg !4944
  %call89 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %21, %union.tree_node* %22) #6, !dbg !4944
  %call90 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %bb, %struct.basic_block_def* %call89) #6, !dbg !4945
  call void @llvm.dbg.value(metadata %struct.edge_def* %call90, metadata !4872, metadata !DIExpression()), !dbg !4882
  %tobool91 = icmp eq %union.tree_node* %max.1, null, !dbg !4946
  %cond = select i1 %tobool91, i32 101, i32 100, !dbg !4946
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4947
  %call92 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %23, %union.tree_node* nonnull %6) #6, !dbg !4947
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4870, metadata !DIExpression(DW_OP_deref)), !dbg !4882
  %call93 = call fastcc zeroext i8 @register_edge_assert_for(%union.tree_node* %call1, %struct.edge_def* %call90, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %cond, %union.tree_node* %call1, %union.tree_node* %call92) #7, !dbg !4948
  %or2 = or i8 %need_assert.0, %call93, !dbg !4949
  call void @llvm.dbg.value(metadata i8 %or2, metadata !4869, metadata !DIExpression()), !dbg !4882
  br i1 %tobool91, label %cleanup, label %if.then98, !dbg !4950

if.then98:                                        ; preds = %if.end85
  %24 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4951
  %call101 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %24, %union.tree_node* nonnull %max.1) #6, !dbg !4951
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4870, metadata !DIExpression(DW_OP_deref)), !dbg !4882
  %call102 = call fastcc zeroext i8 @register_edge_assert_for(%union.tree_node* %call1, %struct.edge_def* %call90, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 98, %union.tree_node* %call1, %union.tree_node* %call101) #7, !dbg !4954
  %or1053 = or i8 %or2, %call102, !dbg !4955
  call void @llvm.dbg.value(metadata i8 %or1053, metadata !4869, metadata !DIExpression()), !dbg !4882
  br label %cleanup, !dbg !4956

cleanup:                                          ; preds = %if.end85, %if.then98, %if.end81
  %need_assert.2 = phi i8 [ %need_assert.0, %if.end81 ], [ %or1053, %if.then98 ], [ %or2, %if.end85 ], !dbg !4882
  call void @llvm.dbg.value(metadata i8 %need_assert.2, metadata !4869, metadata !DIExpression()), !dbg !4882
  %inc111 = add i32 %idx.3, 1, !dbg !4957
  call void @llvm.dbg.value(metadata i32 %inc111, metadata !4875, metadata !DIExpression()), !dbg !4882
  br label %for.cond12, !dbg !4958, !llvm.loop !4959

cleanup113.loopexit:                              ; preds = %for.cond12
  %need_assert.0.lcssa = phi i8 [ %need_assert.0, %for.cond12 ], !dbg !4911
  call void @llvm.dbg.value(metadata i8 %need_assert.0.lcssa, metadata !4869, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i8 %need_assert.0.lcssa, metadata !4869, metadata !DIExpression()), !dbg !4882
  call void @llvm.dbg.value(metadata i8 %need_assert.0.lcssa, metadata !4869, metadata !DIExpression()), !dbg !4882
  br label %cleanup113, !dbg !4961

cleanup113:                                       ; preds = %cleanup113.loopexit, %entry
  %retval.0 = phi i8 [ 0, %entry ], [ %need_assert.0.lcssa, %cleanup113.loopexit ], !dbg !4882
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4961
  ret i8 %retval.0, !dbg !4961
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) unnamed_addr #0 !dbg !4962 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4966, metadata !DIExpression()), !dbg !4969
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4967, metadata !DIExpression()), !dbg !4970
  %call = tail call fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #7, !dbg !4971
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !4968, metadata !DIExpression()), !dbg !4969
  %call1 = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %call) #7, !dbg !4972
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !4973
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4974
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !4975
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq2, align 8, !dbg !4976
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !4977
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb3, align 8, !dbg !4978
  ret void, !dbg !4979
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !4980 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4984, metadata !DIExpression()), !dbg !4985
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !4986
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4986
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !4987
  %conv1 = zext i1 %cmp to i8, !dbg !4988
  ret i8 %conv1, !dbg !4989
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4990 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4994, metadata !DIExpression()), !dbg !4995
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !4996
  %cmp = icmp eq i32 %call, 2, !dbg !4997
  %conv1 = zext i1 %cmp to i8, !dbg !4996
  ret i8 %conv1, !dbg !4998
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !4999 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !5004, metadata !DIExpression()), !dbg !5007
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5005, metadata !DIExpression()), !dbg !5007
  call void @llvm.dbg.value(metadata i32 %flags, metadata !5006, metadata !DIExpression()), !dbg !5007
  tail call fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #7, !dbg !5008
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !5009
  store i32 1, i32* %iter_type, align 4, !dbg !5010
  %call = tail call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #7, !dbg !5011
  ret %union.tree_node* %call, !dbg !5012
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !5013 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !5019, metadata !DIExpression()), !dbg !5020
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !5021
  %0 = load i8, i8* %done, align 8, !dbg !5021
  ret i8 %0, !dbg !5022
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) unnamed_addr #0 !dbg !5023 {
entry:
  call void @llvm.dbg.value(metadata %struct.simple_bitmap_def* %map, metadata !5027, metadata !DIExpression()), !dbg !5032
  call void @llvm.dbg.value(metadata i32 %bitno, metadata !5028, metadata !DIExpression()), !dbg !5032
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %map, i64 0, i32 0, !dbg !5033
  %0 = load i8*, i8** %popcount, align 8, !dbg !5033
  %tobool = icmp eq i8* %0, null, !dbg !5034
  br i1 %tobool, label %entry.if.end7_crit_edge, label %if.then, !dbg !5035

entry.if.end7_crit_edge:                          ; preds = %entry
  %.pre = and i32 %bitno, 63, !dbg !5036
  %.pre2 = zext i32 %.pre to i64, !dbg !5037
  %.pre3 = shl i64 1, %.pre2, !dbg !5037
  %.pre4 = lshr i32 %bitno, 6, !dbg !5038
  %.pre5 = zext i32 %.pre4 to i64, !dbg !5039
  br label %if.end7, !dbg !5035

if.then:                                          ; preds = %entry
  %div = lshr i32 %bitno, 6, !dbg !5040
  %idxprom = zext i32 %div to i64, !dbg !5040
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %map, i64 0, i32 3, i64 %idxprom, !dbg !5040
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5040
  %rem = and i32 %bitno, 63, !dbg !5040
  %sh_prom = zext i32 %rem to i64, !dbg !5040
  %2 = shl i64 1, %sh_prom, !dbg !5041
  %3 = and i64 %1, %2, !dbg !5041
  %tobool1 = icmp eq i64 %3, 0, !dbg !5041
  br i1 %tobool1, label %if.then2, label %if.end7, !dbg !5043

if.then2:                                         ; preds = %if.then
  %arrayidx6 = getelementptr inbounds i8, i8* %0, i64 %idxprom, !dbg !5044
  %4 = load i8, i8* %arrayidx6, align 1, !dbg !5045
  %inc = add i8 %4, 1, !dbg !5045
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !5045
  br label %if.end7, !dbg !5044

if.end7:                                          ; preds = %entry.if.end7_crit_edge, %if.then, %if.then2
  %idxprom12.pre-phi = phi i64 [ %.pre5, %entry.if.end7_crit_edge ], [ %idxprom, %if.then ], [ %idxprom, %if.then2 ], !dbg !5039
  %shl.pre-phi = phi i64 [ %.pre3, %entry.if.end7_crit_edge ], [ %2, %if.then ], [ %2, %if.then2 ], !dbg !5037
  %arrayidx13 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %map, i64 0, i32 3, i64 %idxprom12.pre-phi, !dbg !5039
  %5 = load i64, i64* %arrayidx13, align 8, !dbg !5046
  %or = or i64 %5, %shl.pre-phi, !dbg !5046
  store i64 %or, i64* %arrayidx13, align 8, !dbg !5046
  ret void, !dbg !5047
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @infer_value_range(%union.gimple_statement_d* %stmt, %union.tree_node* %op, i32* %comp_code_p, %union.tree_node** %val_p) unnamed_addr #5 !dbg !5048 {
entry:
  %num_uses = alloca i32, align 4
  %num_loads = alloca i32, align 4
  %num_stores = alloca i32, align 4
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5053, metadata !DIExpression()), !dbg !5062
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !5054, metadata !DIExpression()), !dbg !5062
  call void @llvm.dbg.value(metadata i32* %comp_code_p, metadata !5055, metadata !DIExpression()), !dbg !5062
  call void @llvm.dbg.value(metadata %union.tree_node** %val_p, metadata !5056, metadata !DIExpression()), !dbg !5062
  store %union.tree_node* null, %union.tree_node** %val_p, align 8, !dbg !5063
  store i32 0, i32* %comp_code_p, align 4, !dbg !5064
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5065
  %bf.load = load i64, i64* %0, align 8, !dbg !5065
  %bf.cast1 = and i64 %bf.load, 4194304, !dbg !5065
  %tobool = icmp eq i64 %bf.cast1, 0, !dbg !5065
  br i1 %tobool, label %if.end, label %return, !dbg !5067

if.end:                                           ; preds = %entry
  %call = tail call zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d* %stmt) #6, !dbg !5068
  %tobool1 = icmp eq i8 %call, 0, !dbg !5068
  br i1 %tobool1, label %if.end3, label %return, !dbg !5070

if.end3:                                          ; preds = %if.end
  %call4 = tail call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %stmt) #6, !dbg !5071
  %tobool5 = icmp eq i8 %call4, 0, !dbg !5071
  br i1 %tobool5, label %if.end14, label %land.lhs.true, !dbg !5073

land.lhs.true:                                    ; preds = %if.end3
  %call6 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #7, !dbg !5074
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call6, i64 0, i32 1, !dbg !5074
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5074
  %tobool7 = icmp eq %struct.VEC_edge_gc* %1, null, !dbg !5074
  br i1 %tobool7, label %cond.end, label %cond.true, !dbg !5074

cond.true:                                        ; preds = %land.lhs.true
  %call8 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #7, !dbg !5074
  %succs9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call8, i64 0, i32 1, !dbg !5074
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs9, align 8, !dbg !5074
  %base10 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %2, i64 0, i32 0, !dbg !5074
  br label %cond.end, !dbg !5074

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base10, %cond.true ], [ null, %land.lhs.true ], !dbg !5074
  %call11 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #7, !dbg !5074
  %cmp = icmp eq i32 %call11, 0, !dbg !5075
  br i1 %cmp, label %return, label %if.end14, !dbg !5076

if.end14:                                         ; preds = %if.end3, %cond.end
  %3 = load i32, i32* @flag_delete_null_pointer_checks, align 4, !dbg !5077
  %tobool15 = icmp eq i32 %3, 0, !dbg !5077
  br i1 %tobool15, label %if.end45, label %land.lhs.true16, !dbg !5078

land.lhs.true16:                                  ; preds = %if.end14
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5079
  %4 = bitcast %union.tree_node** %type to i64**, !dbg !5079
  %5 = load i64*, i64** %4, align 8, !dbg !5079
  %bf.load18 = load i64, i64* %5, align 8, !dbg !5079
  %bf.cast202 = and i64 %bf.load18, 65535, !dbg !5079
  %cmp21 = icmp eq i64 %bf.cast202, 10, !dbg !5079
  br i1 %cmp21, label %land.lhs.true31, label %lor.lhs.false, !dbg !5079

lor.lhs.false:                                    ; preds = %land.lhs.true16
  %cmp29 = icmp eq i64 %bf.cast202, 12, !dbg !5079
  br i1 %cmp29, label %land.lhs.true31, label %if.end45, !dbg !5080

land.lhs.true31:                                  ; preds = %lor.lhs.false, %land.lhs.true16
  %call32 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !5081
  %cmp33 = icmp eq i32 %call32, 7, !dbg !5082
  br i1 %cmp33, label %if.end45, label %if.then35, !dbg !5083

if.then35:                                        ; preds = %land.lhs.true31
  %6 = bitcast i32* %num_uses to i8*, !dbg !5084
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #8, !dbg !5084
  %7 = bitcast i32* %num_loads to i8*, !dbg !5084
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #8, !dbg !5084
  %8 = bitcast i32* %num_stores to i8*, !dbg !5084
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #8, !dbg !5084
  call void @llvm.dbg.value(metadata i32* %num_uses, metadata !5057, metadata !DIExpression(DW_OP_deref)), !dbg !5085
  call void @llvm.dbg.value(metadata i32* %num_loads, metadata !5060, metadata !DIExpression(DW_OP_deref)), !dbg !5085
  call void @llvm.dbg.value(metadata i32* %num_stores, metadata !5061, metadata !DIExpression(DW_OP_deref)), !dbg !5085
  call void @count_uses_and_derefs(%union.tree_node* %op, %union.gimple_statement_d* %stmt, i32* nonnull %num_uses, i32* nonnull %num_loads, i32* nonnull %num_stores) #6, !dbg !5086
  %9 = load i32, i32* %num_loads, align 4, !dbg !5087
  call void @llvm.dbg.value(metadata i32 %9, metadata !5060, metadata !DIExpression()), !dbg !5085
  %10 = load i32, i32* %num_stores, align 4, !dbg !5089
  call void @llvm.dbg.value(metadata i32 %10, metadata !5061, metadata !DIExpression()), !dbg !5085
  %add = sub i32 0, %10, !dbg !5090
  %cmp36 = icmp eq i32 %9, %add, !dbg !5090
  br i1 %cmp36, label %cleanup, label %if.then38, !dbg !5091

if.then38:                                        ; preds = %if.then35
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5092
  %call41 = call %union.tree_node* @build_int_cst(%union.tree_node* %11, i64 0) #6, !dbg !5094
  store %union.tree_node* %call41, %union.tree_node** %val_p, align 8, !dbg !5095
  store i32 102, i32* %comp_code_p, align 4, !dbg !5096
  br label %cleanup, !dbg !5097

cleanup:                                          ; preds = %if.then35, %if.then38
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then38 ], [ true, %if.then35 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #8, !dbg !5098
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #8, !dbg !5098
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #8, !dbg !5098
  br i1 %cleanup.dest.slot.0, label %if.end45, label %return

if.end45:                                         ; preds = %land.lhs.true31, %if.end14, %cleanup, %lor.lhs.false
  br label %return, !dbg !5099

return:                                           ; preds = %if.end, %entry, %cleanup, %cond.end, %if.end45
  %retval.1 = phi i8 [ 1, %cleanup ], [ 0, %if.end45 ], [ 0, %entry ], [ 0, %if.end ], [ 0, %cond.end ], !dbg !5062
  ret i8 %retval.1, !dbg !5100
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5101 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5103, metadata !DIExpression()), !dbg !5104
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !5105
  %cmp = icmp eq i32 %call, 6, !dbg !5106
  %conv1 = zext i1 %cmp to i8, !dbg !5105
  ret i8 %conv1, !dbg !5107
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5108 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5112, metadata !DIExpression()), !dbg !5114
  %call = tail call fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %gs) #7, !dbg !5115
  call void @llvm.dbg.value(metadata i32 %call, metadata !5113, metadata !DIExpression()), !dbg !5114
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #7, !dbg !5116
  %cmp = icmp eq i32 %call1, 3, !dbg !5118
  br i1 %cmp, label %if.then, label %if.end, !dbg !5119

if.then:                                          ; preds = %entry
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #7, !dbg !5120
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5120
  %bf.load = load i64, i64* %0, align 8, !dbg !5120
  %1 = trunc i64 %bf.load to i32, !dbg !5120
  %bf.cast = and i32 %1, 65535, !dbg !5120
  call void @llvm.dbg.value(metadata i32 %bf.cast, metadata !5113, metadata !DIExpression()), !dbg !5114
  br label %if.end, !dbg !5121

if.end:                                           ; preds = %if.then, %entry
  %code.0 = phi i32 [ %bf.cast, %if.then ], [ %call, %entry ], !dbg !5114
  call void @llvm.dbg.value(metadata i32 %code.0, metadata !5113, metadata !DIExpression()), !dbg !5114
  ret i32 %code.0, !dbg !5122
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5123 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5125, metadata !DIExpression()), !dbg !5126
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #7, !dbg !5127
  ret %union.tree_node* %call, !dbg !5128
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @has_single_use(%union.tree_node* %var) unnamed_addr #0 !dbg !5129 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !5131, metadata !DIExpression()), !dbg !5136
  %imm_uses = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5137
  %0 = bitcast i40* %imm_uses to %struct.ssa_use_operand_d*, !dbg !5137
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %0, metadata !5132, metadata !DIExpression()), !dbg !5136
  %next = getelementptr inbounds i40, i40* %imm_uses, i64 1, !dbg !5138
  %1 = bitcast i40* %next to %struct.ssa_use_operand_d**, !dbg !5138
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %1, align 8, !dbg !5138
  %cmp = icmp eq %struct.ssa_use_operand_d* %2, %0, !dbg !5140
  br i1 %cmp, label %cleanup, label %if.end, !dbg !5141

if.end:                                           ; preds = %entry
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i64 0, i32 1, !dbg !5142
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !5142
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %3, %0, !dbg !5144
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !5145

if.then4:                                         ; preds = %if.end
  %stmt = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i64 0, i32 2, i32 0, !dbg !5146
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5146
  %call = tail call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %4) #7, !dbg !5147
  %tobool = icmp eq i8 %call, 0, !dbg !5148
  %conv = zext i1 %tobool to i8, !dbg !5148
  br label %cleanup, !dbg !5149

if.end6:                                          ; preds = %if.end
  %5 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5150
  %tobool7 = icmp eq i32 %5, 0, !dbg !5150
  br i1 %tobool7, label %cleanup, label %if.end9, !dbg !5152

if.end9:                                          ; preds = %if.end6
  %call10 = tail call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* nonnull %0, %struct.ssa_use_operand_d** null, %union.gimple_statement_d** null) #6, !dbg !5153
  br label %cleanup, !dbg !5154

cleanup:                                          ; preds = %if.end6, %entry, %if.end9, %if.then4
  %retval.0 = phi i8 [ %conv, %if.then4 ], [ %call10, %if.end9 ], [ 0, %entry ], [ 0, %if.end6 ], !dbg !5136
  ret i8 %retval.0, !dbg !5155
}

; Function Attrs: nounwind uwtable
define internal fastcc void @register_new_assert_for(%union.tree_node* %name, %union.tree_node* %expr, i32 %comp_code, %union.tree_node* %val, %struct.basic_block_def* %bb, %struct.edge_def* %e, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si) unnamed_addr #5 !dbg !5156 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !5160, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !5161, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata i32 %comp_code, metadata !5162, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !5163, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !5164, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.edge_def* %e, metadata !5165, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !5166, metadata !DIExpression()), !dbg !5172
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5173
  %bf.load = load i64, i64* %0, align 8, !dbg !5173
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !5175
  %cmp = icmp eq i64 %bf.cast2, 23, !dbg !5175
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5176

land.lhs.true:                                    ; preds = %entry
  %bf.cast43 = and i64 %bf.load, 134217728, !dbg !5177
  %tobool = icmp eq i64 %bf.cast43, 0, !dbg !5177
  br i1 %tobool, label %if.end, label %if.then, !dbg !5178

if.then:                                          ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5179
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5179
  %int_cst5 = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !5180
  %low = bitcast i32* %int_cst5 to i64*, !dbg !5180
  %2 = load i64, i64* %low, align 8, !dbg !5180
  %high = getelementptr inbounds i32, i32* %int_cst5, i64 2, !dbg !5181
  %3 = bitcast i32* %high to i64*, !dbg !5181
  %4 = load i64, i64* %3, align 8, !dbg !5181
  %call = tail call %union.tree_node* @build_int_cst_wide(%union.tree_node* %1, i64 %2, i64 %4) #6, !dbg !5182
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5163, metadata !DIExpression()), !dbg !5171
  br label %if.end, !dbg !5183

if.end:                                           ; preds = %land.lhs.true, %if.then, %entry
  %val.addr.0 = phi %union.tree_node* [ %call, %if.then ], [ %val, %land.lhs.true ], [ %val, %entry ]
  call void @llvm.dbg.value(metadata %union.tree_node* %val.addr.0, metadata !5163, metadata !DIExpression()), !dbg !5171
  %tobool8 = icmp eq %struct.basic_block_def* %bb, null, !dbg !5184
  br i1 %tobool8, label %cond.false, label %cond.end, !dbg !5184

cond.false:                                       ; preds = %if.end
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %e, i64 0, i32 1, !dbg !5185
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5185
  br label %cond.end, !dbg !5184

cond.end:                                         ; preds = %if.end, %cond.false
  %cond = phi %struct.basic_block_def* [ %5, %cond.false ], [ %bb, %if.end ], !dbg !5184
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %cond, metadata !5170, metadata !DIExpression()), !dbg !5171
  %6 = load %struct.assert_locus_d**, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !5186
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5187
  %7 = bitcast %union.tree_node** %version to i32*, !dbg !5187
  %8 = load i32, i32* %7, align 8, !dbg !5187
  %idxprom = zext i32 %8 to i64, !dbg !5186
  %arrayidx = getelementptr inbounds %struct.assert_locus_d*, %struct.assert_locus_d** %6, i64 %idxprom, !dbg !5186
  %9 = load %struct.assert_locus_d*, %struct.assert_locus_d** %arrayidx, align 8, !dbg !5186
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %9, metadata !5168, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %9, metadata !5169, metadata !DIExpression()), !dbg !5171
  %cond1 = icmp eq %struct.edge_def* %e, null, !dbg !5188
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %e, i64 0, i32 0, !dbg !5193
  %dest48 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %e, i64 0, i32 1, !dbg !5193
  br i1 %cond1, label %cond.end.split.us, label %cond.end.cond.end.split_crit_edge, !dbg !5195

cond.end.cond.end.split_crit_edge:                ; preds = %cond.end
  br label %while.cond, !dbg !5195

cond.end.split.us:                                ; preds = %cond.end
  br label %while.cond.us, !dbg !5195

while.cond.us:                                    ; preds = %if.end70.us, %cond.end.split.us
  %loc.0.us = phi %struct.assert_locus_d* [ %9, %cond.end.split.us ], [ %15, %if.end70.us ], !dbg !5171
  %last_loc.0.us = phi %struct.assert_locus_d* [ %9, %cond.end.split.us ], [ %loc.0.us, %if.end70.us ], !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %last_loc.0.us, metadata !5169, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0.us, metadata !5168, metadata !DIExpression()), !dbg !5171
  %tobool9.us = icmp eq %struct.assert_locus_d* %loc.0.us, null, !dbg !5195
  br i1 %tobool9.us, label %while.end.us-lcssa.us, label %while.body.us, !dbg !5195

while.body.us:                                    ; preds = %while.cond.us
  %comp_code10.us = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0.us, i64 0, i32 3, !dbg !5196
  %10 = load i32, i32* %comp_code10.us, align 8, !dbg !5196
  %cmp11.us = icmp eq i32 %10, %comp_code, !dbg !5197
  br i1 %cmp11.us, label %land.lhs.true12.us, label %if.end70.us, !dbg !5198

land.lhs.true12.us:                               ; preds = %while.body.us
  %val13.us = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0.us, i64 0, i32 4, !dbg !5199
  %11 = load %union.tree_node*, %union.tree_node** %val13.us, align 8, !dbg !5199
  %cmp14.us = icmp eq %union.tree_node* %11, %val.addr.0, !dbg !5200
  br i1 %cmp14.us, label %land.lhs.true18.us, label %lor.lhs.false.us, !dbg !5201

lor.lhs.false.us:                                 ; preds = %land.lhs.true12.us
  %call16.us = tail call i32 @operand_equal_p(%union.tree_node* %11, %union.tree_node* %val.addr.0, i32 0) #6, !dbg !5202
  %tobool17.us = icmp eq i32 %call16.us, 0, !dbg !5202
  br i1 %tobool17.us, label %if.end70.us, label %land.lhs.true18.us, !dbg !5203

land.lhs.true18.us:                               ; preds = %lor.lhs.false.us, %land.lhs.true12.us
  %expr19.us = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0.us, i64 0, i32 5, !dbg !5204
  %12 = load %union.tree_node*, %union.tree_node** %expr19.us, align 8, !dbg !5204
  %cmp20.us = icmp eq %union.tree_node* %12, %expr, !dbg !5205
  br i1 %cmp20.us, label %if.then25.us, label %lor.lhs.false21.us, !dbg !5206

lor.lhs.false21.us:                               ; preds = %land.lhs.true18.us
  %call23.us = tail call i32 @operand_equal_p(%union.tree_node* %12, %union.tree_node* %expr, i32 0) #6, !dbg !5207
  %tobool24.us = icmp eq i32 %call23.us, 0, !dbg !5207
  br i1 %tobool24.us, label %if.end70.us, label %if.then25.us, !dbg !5208

if.then25.us:                                     ; preds = %lor.lhs.false21.us, %land.lhs.true18.us
  %bb28.us = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0.us, i64 0, i32 0, !dbg !5209
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb28.us, align 8, !dbg !5209
  %call29.us = tail call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %cond, %struct.basic_block_def* %13) #6, !dbg !5210
  %tobool30.us = icmp eq i8 %call29.us, 0, !dbg !5210
  br i1 %tobool30.us, label %if.end32.us, label %cleanup.cont.loopexit.us-lcssa.us, !dbg !5211

if.end32.us:                                      ; preds = %if.then25.us
  br i1 true, label %if.end32.us.land.lhs.true60.us_crit_edge, label %lor.lhs.false35.us, !dbg !5212

if.end32.us.land.lhs.true60.us_crit_edge:         ; preds = %if.end32.us
  %.pre = load %struct.basic_block_def*, %struct.basic_block_def** %bb28.us, align 8, !dbg !5213
  br label %land.lhs.true60.us, !dbg !5212

lor.lhs.false35.us:                               ; preds = %if.end32.us
  br i1 undef, label %cond.end42.us, label %cond.true37.us, !dbg !5214

cond.true37.us:                                   ; preds = %lor.lhs.false35.us
  br label %cond.end42.us, !dbg !5214

cond.end42.us:                                    ; preds = %cond.true37.us, %lor.lhs.false35.us
  br i1 undef, label %land.lhs.true47.us, label %cond.end42.us.land.lhs.true60.us_crit_edge, !dbg !5214

cond.end42.us.land.lhs.true60.us_crit_edge:       ; preds = %cond.end42.us
  br label %land.lhs.true60.us, !dbg !5214

land.lhs.true47.us:                               ; preds = %cond.end42.us
  br i1 undef, label %cond.end55.us, label %cond.true50.us, !dbg !5214

cond.true50.us:                                   ; preds = %land.lhs.true47.us
  br label %cond.end55.us, !dbg !5214

cond.end55.us:                                    ; preds = %cond.true50.us, %land.lhs.true47.us
  br i1 undef, label %cond.end55.us.if.end70.us_crit_edge, label %cond.end55.us.land.lhs.true60.us_crit_edge, !dbg !5215

cond.end55.us.if.end70.us_crit_edge:              ; preds = %cond.end55.us
  br label %if.end70.us, !dbg !5215

cond.end55.us.land.lhs.true60.us_crit_edge:       ; preds = %cond.end55.us
  br label %land.lhs.true60.us, !dbg !5215

land.lhs.true60.us:                               ; preds = %if.end32.us.land.lhs.true60.us_crit_edge, %cond.end42.us.land.lhs.true60.us_crit_edge, %cond.end55.us.land.lhs.true60.us_crit_edge
  %14 = phi %struct.basic_block_def* [ %.pre, %if.end32.us.land.lhs.true60.us_crit_edge ], [ undef, %cond.end42.us.land.lhs.true60.us_crit_edge ], [ undef, %cond.end55.us.land.lhs.true60.us_crit_edge ], !dbg !5213
  %call62.us = tail call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %14, %struct.basic_block_def* %cond) #6, !dbg !5216
  %tobool64.us = icmp eq i8 %call62.us, 0, !dbg !5216
  br i1 %tobool64.us, label %if.end70.us, label %if.then65.us-lcssa.us, !dbg !5217

if.end70.us:                                      ; preds = %cond.end55.us.if.end70.us_crit_edge, %land.lhs.true60.us, %lor.lhs.false21.us, %lor.lhs.false.us, %while.body.us
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0.us, metadata !5169, metadata !DIExpression()), !dbg !5171
  %next.us = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0.us, i64 0, i32 6, !dbg !5218
  %15 = load %struct.assert_locus_d*, %struct.assert_locus_d** %next.us, align 8, !dbg !5218
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %15, metadata !5168, metadata !DIExpression()), !dbg !5171
  br label %while.cond.us, !dbg !5195, !llvm.loop !5219

while.end.us-lcssa.us:                            ; preds = %while.cond.us
  %last_loc.0.us.lcssa = phi %struct.assert_locus_d* [ %last_loc.0.us, %while.cond.us ], !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %last_loc.0.us.lcssa, metadata !5169, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %last_loc.0.us.lcssa, metadata !5169, metadata !DIExpression()), !dbg !5171
  br label %while.end, !dbg !5221

cleanup.cont.loopexit.us-lcssa.us:                ; preds = %if.then25.us
  br label %cleanup.cont, !dbg !5222

if.then65.us-lcssa.us:                            ; preds = %land.lhs.true60.us
  %loc.0.us.lcssa18 = phi %struct.assert_locus_d* [ %loc.0.us, %land.lhs.true60.us ], !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0.us.lcssa18, metadata !5168, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0.us.lcssa18, metadata !5168, metadata !DIExpression()), !dbg !5171
  br label %if.then65, !dbg !5223

while.cond:                                       ; preds = %if.end70, %cond.end.cond.end.split_crit_edge
  %loc.0 = phi %struct.assert_locus_d* [ %9, %cond.end.cond.end.split_crit_edge ], [ %26, %if.end70 ], !dbg !5171
  %last_loc.0 = phi %struct.assert_locus_d* [ %9, %cond.end.cond.end.split_crit_edge ], [ %loc.0, %if.end70 ], !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %last_loc.0, metadata !5169, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0, metadata !5168, metadata !DIExpression()), !dbg !5171
  %tobool9 = icmp eq %struct.assert_locus_d* %loc.0, null, !dbg !5195
  br i1 %tobool9, label %while.end.us-lcssa, label %while.body, !dbg !5195

while.body:                                       ; preds = %while.cond
  %comp_code10 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 3, !dbg !5196
  %16 = load i32, i32* %comp_code10, align 8, !dbg !5196
  %cmp11 = icmp eq i32 %16, %comp_code, !dbg !5197
  br i1 %cmp11, label %land.lhs.true12, label %if.end70, !dbg !5198

land.lhs.true12:                                  ; preds = %while.body
  %val13 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 4, !dbg !5199
  %17 = load %union.tree_node*, %union.tree_node** %val13, align 8, !dbg !5199
  %cmp14 = icmp eq %union.tree_node* %17, %val.addr.0, !dbg !5200
  br i1 %cmp14, label %land.lhs.true18, label %lor.lhs.false, !dbg !5201

lor.lhs.false:                                    ; preds = %land.lhs.true12
  %call16 = tail call i32 @operand_equal_p(%union.tree_node* %17, %union.tree_node* %val.addr.0, i32 0) #6, !dbg !5202
  %tobool17 = icmp eq i32 %call16, 0, !dbg !5202
  br i1 %tobool17, label %if.end70, label %land.lhs.true18, !dbg !5203

land.lhs.true18:                                  ; preds = %lor.lhs.false, %land.lhs.true12
  %expr19 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 5, !dbg !5204
  %18 = load %union.tree_node*, %union.tree_node** %expr19, align 8, !dbg !5204
  %cmp20 = icmp eq %union.tree_node* %18, %expr, !dbg !5205
  br i1 %cmp20, label %if.then25, label %lor.lhs.false21, !dbg !5206

lor.lhs.false21:                                  ; preds = %land.lhs.true18
  %call23 = tail call i32 @operand_equal_p(%union.tree_node* %18, %union.tree_node* %expr, i32 0) #6, !dbg !5207
  %tobool24 = icmp eq i32 %call23, 0, !dbg !5207
  br i1 %tobool24, label %if.end70, label %if.then25, !dbg !5208

if.then25:                                        ; preds = %lor.lhs.false21, %land.lhs.true18
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5214
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i64 0, i32 1, !dbg !5214
  %20 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5214
  %tobool36 = icmp eq %struct.VEC_edge_gc* %20, null, !dbg !5214
  br i1 %tobool36, label %cond.end42, label %cond.true37, !dbg !5214

cond.true37:                                      ; preds = %if.then25
  %base40 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %20, i64 0, i32 0, !dbg !5214
  br label %cond.end42, !dbg !5214

cond.end42:                                       ; preds = %if.then25, %cond.true37
  %cond43 = phi %struct.VEC_edge_base* [ %base40, %cond.true37 ], [ null, %if.then25 ], !dbg !5214
  %call44 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond43) #7, !dbg !5214
  %cmp45 = icmp ugt i32 %call44, 1, !dbg !5214
  br i1 %cmp45, label %land.lhs.true47, label %land.lhs.true60, !dbg !5214

land.lhs.true47:                                  ; preds = %cond.end42
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %dest48, align 8, !dbg !5214
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i64 0, i32 0, !dbg !5214
  %22 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !5214
  %tobool49 = icmp eq %struct.VEC_edge_gc* %22, null, !dbg !5214
  br i1 %tobool49, label %cond.end55, label %cond.true50, !dbg !5214

cond.true50:                                      ; preds = %land.lhs.true47
  %base53 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %22, i64 0, i32 0, !dbg !5214
  br label %cond.end55, !dbg !5214

cond.end55:                                       ; preds = %land.lhs.true47, %cond.true50
  %cond56 = phi %struct.VEC_edge_base* [ %base53, %cond.true50 ], [ null, %land.lhs.true47 ], !dbg !5214
  %call57 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond56) #7, !dbg !5214
  %cmp58 = icmp ugt i32 %call57, 1, !dbg !5214
  br i1 %cmp58, label %if.end70, label %land.lhs.true60, !dbg !5215

land.lhs.true60:                                  ; preds = %cond.end55, %cond.end42
  %bb61 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 0, !dbg !5213
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb61, align 8, !dbg !5213
  %call62 = tail call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %23, %struct.basic_block_def* %cond) #6, !dbg !5216
  %tobool64 = icmp eq i8 %call62, 0, !dbg !5216
  br i1 %tobool64, label %if.end70, label %if.then65.us-lcssa, !dbg !5217

if.then65.us-lcssa:                               ; preds = %land.lhs.true60
  %loc.0.lcssa21 = phi %struct.assert_locus_d* [ %loc.0, %land.lhs.true60 ], !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0.lcssa21, metadata !5168, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0.lcssa21, metadata !5168, metadata !DIExpression()), !dbg !5171
  br label %if.then65, !dbg !5223

if.then65:                                        ; preds = %if.then65.us-lcssa.us, %if.then65.us-lcssa
  %loc.0.lcssa7 = phi %struct.assert_locus_d* [ %loc.0.lcssa21, %if.then65.us-lcssa ], [ %loc.0.us.lcssa18, %if.then65.us-lcssa.us ], !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0.lcssa7, metadata !5168, metadata !DIExpression()), !dbg !5171
  %bb66 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0.lcssa7, i64 0, i32 0, !dbg !5223
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb66, align 8, !dbg !5225
  %e67 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0.lcssa7, i64 0, i32 1, !dbg !5226
  store %struct.edge_def* %e, %struct.edge_def** %e67, align 8, !dbg !5227
  %si68 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0.lcssa7, i64 0, i32 2, !dbg !5228
  %24 = bitcast %struct.gimple_stmt_iterator* %si68 to i8*, !dbg !5229
  %25 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !5229
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %24, i8* nonnull align 8 %25, i64 24, i1 false), !dbg !5229
  br label %cleanup.cont, !dbg !5230

if.end70:                                         ; preds = %land.lhs.true60, %lor.lhs.false21, %lor.lhs.false, %cond.end55, %while.body
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc.0, metadata !5169, metadata !DIExpression()), !dbg !5171
  %next = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc.0, i64 0, i32 6, !dbg !5218
  %26 = load %struct.assert_locus_d*, %struct.assert_locus_d** %next, align 8, !dbg !5218
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %26, metadata !5168, metadata !DIExpression()), !dbg !5171
  br label %while.cond, !dbg !5195, !llvm.loop !5219

while.end.us-lcssa:                               ; preds = %while.cond
  %last_loc.0.lcssa19 = phi %struct.assert_locus_d* [ %last_loc.0, %while.cond ], !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %last_loc.0.lcssa19, metadata !5169, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %last_loc.0.lcssa19, metadata !5169, metadata !DIExpression()), !dbg !5171
  br label %while.end, !dbg !5221

while.end:                                        ; preds = %while.end.us-lcssa.us, %while.end.us-lcssa
  %last_loc.0.lcssa = phi %struct.assert_locus_d* [ %last_loc.0.lcssa19, %while.end.us-lcssa ], [ %last_loc.0.us.lcssa, %while.end.us-lcssa.us ], !dbg !5171
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %last_loc.0.lcssa, metadata !5169, metadata !DIExpression()), !dbg !5171
  %call71 = tail call i8* @xmalloc(i64 72) #6, !dbg !5221
  call void @llvm.dbg.value(metadata i8* %call71, metadata !5167, metadata !DIExpression()), !dbg !5171
  %bb72 = bitcast i8* %call71 to %struct.basic_block_def**, !dbg !5231
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb72, align 8, !dbg !5232
  %e73 = getelementptr inbounds i8, i8* %call71, i64 8, !dbg !5233
  %27 = bitcast i8* %e73 to %struct.edge_def**, !dbg !5233
  store %struct.edge_def* %e, %struct.edge_def** %27, align 8, !dbg !5234
  %si74 = getelementptr inbounds i8, i8* %call71, i64 16, !dbg !5235
  %28 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !5236
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %si74, i8* nonnull align 8 %28, i64 24, i1 false), !dbg !5236
  %comp_code75 = getelementptr inbounds i8, i8* %call71, i64 40, !dbg !5237
  %29 = bitcast i8* %comp_code75 to i32*, !dbg !5237
  store i32 %comp_code, i32* %29, align 8, !dbg !5238
  %val76 = getelementptr inbounds i8, i8* %call71, i64 48, !dbg !5239
  %30 = bitcast i8* %val76 to %union.tree_node**, !dbg !5239
  store %union.tree_node* %val.addr.0, %union.tree_node** %30, align 8, !dbg !5240
  %expr77 = getelementptr inbounds i8, i8* %call71, i64 56, !dbg !5241
  %31 = bitcast i8* %expr77 to %union.tree_node**, !dbg !5241
  store %union.tree_node* %expr, %union.tree_node** %31, align 8, !dbg !5242
  %next78 = getelementptr inbounds i8, i8* %call71, i64 64, !dbg !5243
  %32 = bitcast i8* %next78 to %struct.assert_locus_d**, !dbg !5243
  store %struct.assert_locus_d* null, %struct.assert_locus_d** %32, align 8, !dbg !5244
  %tobool79 = icmp eq %struct.assert_locus_d* %last_loc.0.lcssa, null, !dbg !5245
  br i1 %tobool79, label %if.else, label %if.then80, !dbg !5247

if.then80:                                        ; preds = %while.end
  call void @llvm.dbg.value(metadata i8* %call71, metadata !5167, metadata !DIExpression()), !dbg !5171
  %next81 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %last_loc.0.lcssa, i64 0, i32 6, !dbg !5248
  %33 = bitcast %struct.assert_locus_d** %next81 to i8**, !dbg !5249
  store i8* %call71, i8** %33, align 8, !dbg !5249
  br label %if.end86, !dbg !5250

if.else:                                          ; preds = %while.end
  %34 = load %struct.assert_locus_d**, %struct.assert_locus_d*** @asserts_for, align 8, !dbg !5251
  %35 = load i32, i32* %7, align 8, !dbg !5252
  %idxprom84 = zext i32 %35 to i64, !dbg !5251
  %arrayidx85 = getelementptr inbounds %struct.assert_locus_d*, %struct.assert_locus_d** %34, i64 %idxprom84, !dbg !5251
  %36 = bitcast %struct.assert_locus_d** %arrayidx85 to i8**, !dbg !5253
  store i8* %call71, i8** %36, align 8, !dbg !5253
  br label %if.end86

if.end86:                                         ; preds = %if.else, %if.then80
  %37 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @need_assert_for, align 8, !dbg !5254
  %38 = load i32, i32* %7, align 8, !dbg !5255
  %call89 = tail call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %37, i32 %38) #6, !dbg !5256
  br label %cleanup.cont, !dbg !5222

cleanup.cont:                                     ; preds = %cleanup.cont.loopexit.us-lcssa.us, %if.then65, %if.end86
  ret void, !dbg !5222
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !5257 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !5261, metadata !DIExpression()), !dbg !5263
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !5264
  %0 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !5264
  %tobool = icmp eq %struct.use_optype_d* %0, null, !dbg !5266
  br i1 %tobool, label %if.end, label %if.then, !dbg !5267

if.then:                                          ; preds = %entry
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %0, i64 0, i32 1, !dbg !5268
  %call = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* nonnull %use_ptr) #7, !dbg !5268
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5262, metadata !DIExpression()), !dbg !5263
  %1 = bitcast %struct.use_optype_d** %uses to i64**, !dbg !5270
  %2 = load i64*, i64** %1, align 8, !dbg !5270
  %3 = load i64, i64* %2, align 8, !dbg !5271
  %4 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !5272
  store i64 %3, i64* %4, align 8, !dbg !5272
  br label %cleanup, !dbg !5273

if.end:                                           ; preds = %entry
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !5274
  %5 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !5274
  %tobool4 = icmp eq %struct.def_optype_d* %5, null, !dbg !5276
  br i1 %tobool4, label %if.end11, label %if.then5, !dbg !5277

if.then5:                                         ; preds = %if.end
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %5, i64 0, i32 1, !dbg !5278
  %6 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !5278
  %call7 = tail call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %6) #7, !dbg !5278
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !5262, metadata !DIExpression()), !dbg !5263
  %7 = bitcast %struct.def_optype_d** %defs to i64**, !dbg !5280
  %8 = load i64*, i64** %7, align 8, !dbg !5280
  %9 = load i64, i64* %8, align 8, !dbg !5281
  %10 = bitcast %struct.def_optype_d** %defs to i64*, !dbg !5282
  store i64 %9, i64* %10, align 8, !dbg !5282
  br label %cleanup, !dbg !5283

if.end11:                                         ; preds = %if.end
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !5284
  store i8 1, i8* %done, align 8, !dbg !5285
  br label %cleanup, !dbg !5286

cleanup:                                          ; preds = %if.end11, %if.then5, %if.then
  %retval.0 = phi %union.tree_node* [ %call, %if.then ], [ %call7, %if.then5 ], [ null, %if.end11 ], !dbg !5263
  ret %union.tree_node* %retval.0, !dbg !5287
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_next(%struct.gimple_stmt_iterator* %i) unnamed_addr #0 !dbg !5288 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !5293, metadata !DIExpression()), !dbg !5294
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !5295
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !5295
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 2, !dbg !5296
  %1 = bitcast %struct.gimple_seq_node_d** %next to i64*, !dbg !5296
  %2 = load i64, i64* %1, align 8, !dbg !5296
  %3 = bitcast %struct.gimple_stmt_iterator* %i to i64*, !dbg !5297
  store i64 %2, i64* %3, align 8, !dbg !5297
  ret void, !dbg !5298
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) unnamed_addr #0 !dbg !5299 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !5303, metadata !DIExpression()), !dbg !5308
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %phi, metadata !5304, metadata !DIExpression()), !dbg !5308
  call void @llvm.dbg.value(metadata i32 %flags, metadata !5305, metadata !DIExpression()), !dbg !5308
  %call = tail call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %phi) #7, !dbg !5309
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5306, metadata !DIExpression()), !dbg !5308
  tail call fastcc void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #7, !dbg !5310
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !5311
  store i8 0, i8* %done, align 8, !dbg !5312
  %and = and i32 %flags, 5, !dbg !5313
  %cmp = icmp eq i32 %and, 0, !dbg !5313
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !5313

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !5313
  br label %cond.end, !dbg !5313

cond.end:                                         ; preds = %entry, %cond.true
  %call1 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %call) #6, !dbg !5314
  %tobool = icmp eq i8 %call1, 0, !dbg !5314
  %cond2 = select i1 %tobool, i32 4, i32 1, !dbg !5314
  call void @llvm.dbg.value(metadata i32 %cond2, metadata !5307, metadata !DIExpression()), !dbg !5308
  %and3 = and i32 %cond2, %flags, !dbg !5315
  %cmp4 = icmp eq i32 %and3, 0, !dbg !5317
  br i1 %cmp4, label %if.then, label %if.end, !dbg !5318

if.then:                                          ; preds = %cond.end
  store i8 1, i8* %done, align 8, !dbg !5319
  br label %cleanup, !dbg !5321

if.end:                                           ; preds = %cond.end
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !5322
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5323
  %call7 = tail call fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %phi) #7, !dbg !5324
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !5325
  store i32 %call7, i32* %num_phi, align 4, !dbg !5326
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !5327
  store i32 2, i32* %iter_type, align 4, !dbg !5328
  %call8 = tail call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #7, !dbg !5329
  br label %cleanup, !dbg !5330

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi %struct.ssa_use_operand_d* [ null, %if.then ], [ %call8, %if.end ], !dbg !5308
  ret %struct.ssa_use_operand_d* %retval.0, !dbg !5331
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) unnamed_addr #0 !dbg !5332 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use, metadata !5336, metadata !DIExpression()), !dbg !5337
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use, i64 0, i32 3, !dbg !5338
  %0 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5338
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5339
  ret %union.tree_node* %1, !dbg !5340
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !5341 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !5345, metadata !DIExpression()), !dbg !5347
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !5348
  %0 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !5348
  %tobool = icmp eq %struct.use_optype_d* %0, null, !dbg !5350
  br i1 %tobool, label %if.end, label %if.then, !dbg !5351

if.then:                                          ; preds = %entry
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %0, i64 0, i32 1, !dbg !5352
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_ptr, metadata !5346, metadata !DIExpression()), !dbg !5347
  %1 = bitcast %struct.use_optype_d* %0 to i64*, !dbg !5354
  %2 = load i64, i64* %1, align 8, !dbg !5354
  %3 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !5355
  store i64 %2, i64* %3, align 8, !dbg !5355
  br label %cleanup, !dbg !5356

if.end:                                           ; preds = %entry
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !5357
  %4 = load i32, i32* %phi_i, align 8, !dbg !5357
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !5359
  %5 = load i32, i32* %num_phi, align 4, !dbg !5359
  %cmp = icmp slt i32 %4, %5, !dbg !5360
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !5361

if.then4:                                         ; preds = %if.end
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !5362
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !5362
  %inc = add nsw i32 %4, 1, !dbg !5362
  store i32 %inc, i32* %phi_i, align 8, !dbg !5362
  %call = tail call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %6, i32 %4) #7, !dbg !5362
  br label %cleanup, !dbg !5364

if.end6:                                          ; preds = %if.end
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !5365
  store i8 1, i8* %done, align 8, !dbg !5366
  br label %cleanup, !dbg !5367

cleanup:                                          ; preds = %if.end6, %if.then4, %if.then
  %retval.0 = phi %struct.ssa_use_operand_d* [ %use_ptr, %if.then ], [ %call, %if.then4 ], [ null, %if.end6 ], !dbg !5347
  ret %struct.ssa_use_operand_d* %retval.0, !dbg !5368
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5369 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5371, metadata !DIExpression()), !dbg !5372
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !5373
  ret %union.tree_node* %call, !dbg !5374
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !5375 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5379, metadata !DIExpression()), !dbg !5381
  call void @llvm.dbg.value(metadata i32 %i, metadata !5380, metadata !DIExpression()), !dbg !5381
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #7, !dbg !5382
  %tobool = icmp eq i8 %call, 0, !dbg !5382
  br i1 %tobool, label %return, label %if.then, !dbg !5384

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #7, !dbg !5385
  %idxprom = zext i32 %i to i64, !dbg !5385
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5385
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5385
  br label %return, !dbg !5387

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %0, %if.then ], [ null, %entry ], !dbg !5388
  ret %union.tree_node* %retval.0, !dbg !5389
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5390 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5392, metadata !DIExpression()), !dbg !5393
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !5394
  %cmp = icmp eq i32 %call, 0, !dbg !5395
  br i1 %cmp, label %land.end, label %land.rhs, !dbg !5396

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !5397
  %cmp2 = icmp ult i32 %call1, 10, !dbg !5398
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !5399
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5400 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5404, metadata !DIExpression()), !dbg !5406
  %call = tail call fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #7, !dbg !5407
  %idxprom = zext i32 %call to i64, !dbg !5408
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !5408
  %0 = load i64, i64* %arrayidx, align 8, !dbg !5408
  call void @llvm.dbg.value(metadata i64 %0, metadata !5405, metadata !DIExpression()), !dbg !5406
  %cmp = icmp eq i64 %0, 0, !dbg !5409
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !5409

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !5409
  br label %cond.end, !dbg !5409

cond.end:                                         ; preds = %entry, %cond.true
  %1 = bitcast %union.gimple_statement_d* %gs to i8*, !dbg !5410
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !5411
  %2 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !5412
  ret %union.tree_node** %2, !dbg !5413
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5414 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5418, metadata !DIExpression()), !dbg !5419
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !5420
  %call1 = tail call fastcc i32 @gss_for_code(i32 %call) #7, !dbg !5421
  ret i32 %call1, !dbg !5422
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gss_for_code(i32 %code) unnamed_addr #0 !dbg !5423 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !5427, metadata !DIExpression()), !dbg !5428
  %idxprom = zext i32 %code to i64, !dbg !5429
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !5429
  %0 = load i32, i32* %arrayidx, align 4, !dbg !5429
  ret i32 %0, !dbg !5430
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @register_edge_assert_for(%union.tree_node* %name, %struct.edge_def* %e, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si, i32 %cond_code, %union.tree_node* %cond_op0, %union.tree_node* %cond_op1) unnamed_addr #5 !dbg !5431 {
entry:
  %val = alloca %union.tree_node*, align 8
  %comp_code = alloca i32, align 4
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !5435, metadata !DIExpression()), !dbg !5459
  call void @llvm.dbg.value(metadata %struct.edge_def* %e, metadata !5436, metadata !DIExpression()), !dbg !5459
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %si, metadata !5437, metadata !DIExpression()), !dbg !5460
  call void @llvm.dbg.value(metadata i32 %cond_code, metadata !5438, metadata !DIExpression()), !dbg !5459
  call void @llvm.dbg.value(metadata %union.tree_node* %cond_op0, metadata !5439, metadata !DIExpression()), !dbg !5459
  call void @llvm.dbg.value(metadata %union.tree_node* %cond_op1, metadata !5440, metadata !DIExpression()), !dbg !5459
  %0 = bitcast %union.tree_node** %val to i8*, !dbg !5461
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !5461
  %1 = bitcast i32* %comp_code to i8*, !dbg !5462
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #8, !dbg !5462
  call void @llvm.dbg.value(metadata i8 0, metadata !5443, metadata !DIExpression()), !dbg !5459
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %e, i64 0, i32 7, !dbg !5463
  %2 = load i32, i32* %flags, align 8, !dbg !5463
  %and = lshr i32 %2, 11, !dbg !5464
  %3 = trunc i32 %and to i8, !dbg !5464
  %4 = and i8 %3, 1, !dbg !5464
  call void @llvm.dbg.value(metadata i8 %4, metadata !5444, metadata !DIExpression()), !dbg !5459
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5465
  %bf.load = load i64, i64* %5, align 8, !dbg !5465
  %bf.cast1 = and i64 %bf.load, 4194304, !dbg !5465
  %tobool = icmp eq i64 %bf.cast1, 0, !dbg !5465
  br i1 %tobool, label %if.end, label %cleanup, !dbg !5467

if.end:                                           ; preds = %entry
  call void @llvm.dbg.value(metadata %union.tree_node** %val, metadata !5441, metadata !DIExpression(DW_OP_deref)), !dbg !5459
  call void @llvm.dbg.value(metadata i32* %comp_code, metadata !5442, metadata !DIExpression(DW_OP_deref)), !dbg !5459
  %call = call fastcc zeroext i8 @extract_code_and_val_from_cond_with_ops(%union.tree_node* %name, i32 %cond_code, %union.tree_node* %cond_op0, %union.tree_node* %cond_op1, i8 zeroext %4, i32* nonnull %comp_code, %union.tree_node** nonnull %val) #7, !dbg !5468
  %tobool3 = icmp eq i8 %call, 0, !dbg !5468
  br i1 %tobool3, label %cleanup, label %if.end5, !dbg !5470

if.end5:                                          ; preds = %if.end
  %call6 = call fastcc zeroext i8 @register_edge_assert_for_2(%union.tree_node* %name, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si, i32 %cond_code, %union.tree_node* %cond_op0, %union.tree_node* %cond_op1, i8 zeroext %4) #7, !dbg !5471
  call void @llvm.dbg.value(metadata i8 %call6, metadata !5443, metadata !DIExpression()), !dbg !5459
  %6 = load i32, i32* %comp_code, align 4, !dbg !5472
  call void @llvm.dbg.value(metadata i32 %6, metadata !5442, metadata !DIExpression()), !dbg !5459
  %cmp10 = icmp eq i32 %6, 101, !dbg !5473
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false, !dbg !5474

land.lhs.true:                                    ; preds = %if.end5
  %7 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5475
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !5441, metadata !DIExpression()), !dbg !5459
  %call12 = call i32 @integer_onep(%union.tree_node* %7) #6, !dbg !5476
  %tobool13 = icmp eq i32 %call12, 0, !dbg !5476
  br i1 %tobool13, label %land.lhs.true.lor.lhs.false_crit_edge, label %if.then19, !dbg !5477

land.lhs.true.lor.lhs.false_crit_edge:            ; preds = %land.lhs.true
  %.pre = load i32, i32* %comp_code, align 4, !dbg !5478
  br label %lor.lhs.false, !dbg !5477

lor.lhs.false:                                    ; preds = %land.lhs.true.lor.lhs.false_crit_edge, %if.end5
  %8 = phi i32 [ %.pre, %land.lhs.true.lor.lhs.false_crit_edge ], [ %6, %if.end5 ], !dbg !5478
  call void @llvm.dbg.value(metadata i32 %8, metadata !5442, metadata !DIExpression()), !dbg !5459
  %cmp14 = icmp eq i32 %8, 102, !dbg !5479
  br i1 %cmp14, label %land.lhs.true16, label %if.end46, !dbg !5480

land.lhs.true16:                                  ; preds = %lor.lhs.false
  %9 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5481
  call void @llvm.dbg.value(metadata %union.tree_node* %9, metadata !5441, metadata !DIExpression()), !dbg !5459
  %call17 = call i32 @integer_zerop(%union.tree_node* %9) #6, !dbg !5482
  %tobool18 = icmp eq i32 %call17, 0, !dbg !5482
  br i1 %tobool18, label %if.end46, label %if.then19, !dbg !5483

if.then19:                                        ; preds = %land.lhs.true, %land.lhs.true16
  %def_stmt20 = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5484
  %10 = bitcast %union.tree_node** %def_stmt20 to %union.gimple_statement_d**, !dbg !5484
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %10, align 8, !dbg !5484
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %11, metadata !5445, metadata !DIExpression()), !dbg !5485
  %call21 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %11) #7, !dbg !5486
  %tobool23 = icmp eq i8 %call21, 0, !dbg !5486
  br i1 %tobool23, label %if.end46, label %land.lhs.true24, !dbg !5487

land.lhs.true24:                                  ; preds = %if.then19
  %call25 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %11) #7, !dbg !5488
  %cmp26 = icmp eq i32 %call25, 93, !dbg !5489
  br i1 %cmp26, label %if.then32, label %lor.lhs.false28, !dbg !5490

lor.lhs.false28:                                  ; preds = %land.lhs.true24
  %call29 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %11) #7, !dbg !5491
  %cmp30 = icmp eq i32 %call29, 89, !dbg !5492
  br i1 %cmp30, label %if.then32, label %if.end46, !dbg !5493

if.then32:                                        ; preds = %lor.lhs.false28, %land.lhs.true24
  %call33 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %11) #7, !dbg !5494
  call void @llvm.dbg.value(metadata %union.tree_node* %call33, metadata !5448, metadata !DIExpression()), !dbg !5495
  %call34 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %11) #7, !dbg !5496
  call void @llvm.dbg.value(metadata %union.tree_node* %call34, metadata !5451, metadata !DIExpression()), !dbg !5495
  %call35 = call fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call33, i32 102, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !5497
  %or384 = or i8 %call6, %call35, !dbg !5498
  call void @llvm.dbg.value(metadata i8 %or384, metadata !5443, metadata !DIExpression()), !dbg !5459
  %call40 = call fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call34, i32 102, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !5499
  %or435 = or i8 %or384, %call40, !dbg !5500
  call void @llvm.dbg.value(metadata i8 %or435, metadata !5443, metadata !DIExpression()), !dbg !5459
  br label %if.end46, !dbg !5501

if.end46:                                         ; preds = %if.then19, %land.lhs.true16, %lor.lhs.false28, %if.then32, %lor.lhs.false
  %retval1.1 = phi i8 [ %call6, %land.lhs.true16 ], [ %call6, %lor.lhs.false ], [ %or435, %if.then32 ], [ %call6, %lor.lhs.false28 ], [ %call6, %if.then19 ], !dbg !5459
  call void @llvm.dbg.value(metadata i8 %retval1.1, metadata !5443, metadata !DIExpression()), !dbg !5459
  %12 = load i32, i32* %comp_code, align 4, !dbg !5502
  call void @llvm.dbg.value(metadata i32 %12, metadata !5442, metadata !DIExpression()), !dbg !5459
  %cmp47 = icmp eq i32 %12, 101, !dbg !5503
  br i1 %cmp47, label %land.lhs.true49, label %lor.lhs.false52, !dbg !5504

land.lhs.true49:                                  ; preds = %if.end46
  %13 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5505
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !5441, metadata !DIExpression()), !dbg !5459
  %call50 = call i32 @integer_zerop(%union.tree_node* %13) #6, !dbg !5506
  %tobool51 = icmp eq i32 %call50, 0, !dbg !5506
  br i1 %tobool51, label %land.lhs.true49.lor.lhs.false52_crit_edge, label %if.then58, !dbg !5507

land.lhs.true49.lor.lhs.false52_crit_edge:        ; preds = %land.lhs.true49
  %.pre6 = load i32, i32* %comp_code, align 4, !dbg !5508
  br label %lor.lhs.false52, !dbg !5507

lor.lhs.false52:                                  ; preds = %land.lhs.true49.lor.lhs.false52_crit_edge, %if.end46
  %14 = phi i32 [ %.pre6, %land.lhs.true49.lor.lhs.false52_crit_edge ], [ %12, %if.end46 ], !dbg !5508
  call void @llvm.dbg.value(metadata i32 %14, metadata !5442, metadata !DIExpression()), !dbg !5459
  %cmp53 = icmp eq i32 %14, 102, !dbg !5509
  br i1 %cmp53, label %land.lhs.true55, label %cleanup, !dbg !5510

land.lhs.true55:                                  ; preds = %lor.lhs.false52
  %15 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5511
  call void @llvm.dbg.value(metadata %union.tree_node* %15, metadata !5441, metadata !DIExpression()), !dbg !5459
  %call56 = call i32 @integer_onep(%union.tree_node* %15) #6, !dbg !5512
  %tobool57 = icmp eq i32 %call56, 0, !dbg !5512
  br i1 %tobool57, label %cleanup, label %if.then58, !dbg !5513

if.then58:                                        ; preds = %land.lhs.true49, %land.lhs.true55
  %def_stmt61 = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5514
  %16 = bitcast %union.tree_node** %def_stmt61 to %union.gimple_statement_d**, !dbg !5514
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %16, align 8, !dbg !5514
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %17, metadata !5452, metadata !DIExpression()), !dbg !5515
  %call62 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %17) #7, !dbg !5516
  %tobool64 = icmp eq i8 %call62, 0, !dbg !5516
  br i1 %tobool64, label %cleanup, label %land.lhs.true65, !dbg !5517

land.lhs.true65:                                  ; preds = %if.then58
  %call66 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %17) #7, !dbg !5518
  %cmp67 = icmp eq i32 %call66, 94, !dbg !5519
  br i1 %cmp67, label %if.then76, label %lor.lhs.false69, !dbg !5520

lor.lhs.false69:                                  ; preds = %land.lhs.true65
  %18 = load i32, i32* %comp_code, align 4, !dbg !5521
  call void @llvm.dbg.value(metadata i32 %18, metadata !5442, metadata !DIExpression()), !dbg !5459
  %cmp70 = icmp eq i32 %18, 101, !dbg !5522
  br i1 %cmp70, label %land.lhs.true72, label %cleanup, !dbg !5523

land.lhs.true72:                                  ; preds = %lor.lhs.false69
  %call73 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %17) #7, !dbg !5524
  %cmp74 = icmp eq i32 %call73, 87, !dbg !5525
  br i1 %cmp74, label %if.then76, label %cleanup, !dbg !5526

if.then76:                                        ; preds = %land.lhs.true72, %land.lhs.true65
  %call78 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %17) #7, !dbg !5527
  call void @llvm.dbg.value(metadata %union.tree_node* %call78, metadata !5455, metadata !DIExpression()), !dbg !5528
  %call80 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %17) #7, !dbg !5529
  call void @llvm.dbg.value(metadata %union.tree_node* %call80, metadata !5458, metadata !DIExpression()), !dbg !5528
  %call81 = call fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call78, i32 101, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !5530
  %or842 = or i8 %retval1.1, %call81, !dbg !5531
  call void @llvm.dbg.value(metadata i8 %or842, metadata !5443, metadata !DIExpression()), !dbg !5459
  %call86 = call fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call80, i32 101, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !5532
  %or893 = or i8 %or842, %call86, !dbg !5533
  call void @llvm.dbg.value(metadata i8 %or893, metadata !5443, metadata !DIExpression()), !dbg !5459
  br label %cleanup, !dbg !5534

cleanup:                                          ; preds = %if.then58, %land.lhs.true55, %if.end, %entry, %lor.lhs.false52, %if.then76, %land.lhs.true72, %lor.lhs.false69
  %retval.0 = phi i8 [ 0, %entry ], [ 0, %if.end ], [ %retval1.1, %land.lhs.true55 ], [ %retval1.1, %lor.lhs.false52 ], [ %or893, %if.then76 ], [ %retval1.1, %land.lhs.true72 ], [ %retval1.1, %lor.lhs.false69 ], [ %retval1.1, %if.then58 ], !dbg !5459
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #8, !dbg !5535
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !5535
  ret i8 %retval.0, !dbg !5535
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5536 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5538, metadata !DIExpression()), !dbg !5539
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !5540
  %bf.load = load i32, i32* %0, align 8, !dbg !5540
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !5540
  ret i32 %bf.lshr, !dbg !5541
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5542 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5544, metadata !DIExpression()), !dbg !5545
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #7, !dbg !5546
  ret %union.tree_node* %call, !dbg !5547
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @extract_code_and_val_from_cond_with_ops(%union.tree_node* %name, i32 %cond_code, %union.tree_node* %cond_op0, %union.tree_node* %cond_op1, i8 zeroext %invert, i32* %code_p, %union.tree_node** %val_p) unnamed_addr #5 !dbg !5548 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !5552, metadata !DIExpression()), !dbg !5565
  call void @llvm.dbg.value(metadata i32 %cond_code, metadata !5553, metadata !DIExpression()), !dbg !5565
  call void @llvm.dbg.value(metadata %union.tree_node* %cond_op0, metadata !5554, metadata !DIExpression()), !dbg !5565
  call void @llvm.dbg.value(metadata %union.tree_node* %cond_op1, metadata !5555, metadata !DIExpression()), !dbg !5565
  call void @llvm.dbg.value(metadata i8 %invert, metadata !5556, metadata !DIExpression()), !dbg !5565
  call void @llvm.dbg.value(metadata i32* %code_p, metadata !5557, metadata !DIExpression()), !dbg !5565
  call void @llvm.dbg.value(metadata %union.tree_node** %val_p, metadata !5558, metadata !DIExpression()), !dbg !5565
  %cmp = icmp eq %union.tree_node* %name, %cond_op1, !dbg !5566
  br i1 %cmp, label %if.then, label %if.end, !dbg !5568

if.then:                                          ; preds = %entry
  %call = tail call i32 @swap_tree_comparison(i32 %cond_code) #6, !dbg !5569
  call void @llvm.dbg.value(metadata i32 %call, metadata !5559, metadata !DIExpression()), !dbg !5565
  call void @llvm.dbg.value(metadata %union.tree_node* %cond_op0, metadata !5560, metadata !DIExpression()), !dbg !5565
  br label %if.end, !dbg !5571

if.end:                                           ; preds = %entry, %if.then
  %comp_code.0 = phi i32 [ %call, %if.then ], [ %cond_code, %entry ], !dbg !5572
  %val.0 = phi %union.tree_node* [ %cond_op0, %if.then ], [ %cond_op1, %entry ], !dbg !5572
  call void @llvm.dbg.value(metadata %union.tree_node* %val.0, metadata !5560, metadata !DIExpression()), !dbg !5565
  call void @llvm.dbg.value(metadata i32 %comp_code.0, metadata !5559, metadata !DIExpression()), !dbg !5565
  %tobool = icmp eq i8 %invert, 0, !dbg !5573
  br i1 %tobool, label %if.end3, label %if.then1, !dbg !5575

if.then1:                                         ; preds = %if.end
  %call2 = tail call i32 @invert_tree_comparison(i32 %comp_code.0, i8 zeroext 0) #6, !dbg !5576
  call void @llvm.dbg.value(metadata i32 %call2, metadata !5559, metadata !DIExpression()), !dbg !5565
  br label %if.end3, !dbg !5577

if.end3:                                          ; preds = %if.end, %if.then1
  %comp_code.1 = phi i32 [ %call2, %if.then1 ], [ %comp_code.0, %if.end ], !dbg !5565
  call void @llvm.dbg.value(metadata i32 %comp_code.1, metadata !5559, metadata !DIExpression()), !dbg !5565
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5578
  %0 = bitcast %union.tree_node** %type to i64**, !dbg !5578
  %1 = load i64*, i64** %0, align 8, !dbg !5578
  %bf.load = load i64, i64* %1, align 8, !dbg !5578
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5578
  %cmp4 = icmp eq i64 %bf.cast1, 9, !dbg !5578
  br i1 %cmp4, label %cleanup57, label %if.end6, !dbg !5580

if.end6:                                          ; preds = %if.end3
  switch i32 %comp_code.1, label %if.end56 [
    i32 99, label %land.lhs.true
    i32 97, label %land.lhs.true
  ], !dbg !5581

land.lhs.true:                                    ; preds = %if.end6, %if.end6
  %cmp15 = icmp eq i64 %bf.cast1, 6, !dbg !5582
  br i1 %cmp15, label %if.then32, label %lor.lhs.false16, !dbg !5582

lor.lhs.false16:                                  ; preds = %land.lhs.true
  %cmp23 = icmp eq i64 %bf.cast1, 7, !dbg !5582
  br i1 %cmp23, label %if.then32, label %lor.lhs.false24, !dbg !5582

lor.lhs.false24:                                  ; preds = %lor.lhs.false16
  %cmp31 = icmp eq i64 %bf.cast1, 8, !dbg !5582
  br i1 %cmp31, label %if.then32, label %if.end56, !dbg !5583

if.then32:                                        ; preds = %lor.lhs.false24, %lor.lhs.false16, %land.lhs.true
  %minval = getelementptr inbounds i64, i64* %1, i64 13, !dbg !5584
  %2 = bitcast i64* %minval to %union.tree_node**, !dbg !5584
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !5584
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !5561, metadata !DIExpression()), !dbg !5585
  %maxval = getelementptr inbounds i64, i64* %1, i64 14, !dbg !5586
  %4 = bitcast i64* %maxval to %union.tree_node**, !dbg !5586
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !5586
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !5564, metadata !DIExpression()), !dbg !5585
  switch i32 %comp_code.1, label %if.end54 [
    i32 99, label %land.lhs.true40
    i32 97, label %land.lhs.true48
  ], !dbg !5587

land.lhs.true40:                                  ; preds = %if.then32
  %tobool41 = icmp eq %union.tree_node* %5, null, !dbg !5589
  br i1 %tobool41, label %cleanup, label %lor.lhs.false42, !dbg !5590

lor.lhs.false42:                                  ; preds = %land.lhs.true40
  %call43 = tail call fastcc i32 @compare_values(%union.tree_node* %val.0, %union.tree_node* nonnull %5) #7, !dbg !5591
  %cmp44 = icmp eq i32 %call43, 0, !dbg !5592
  br i1 %cmp44, label %cleanup, label %if.end46, !dbg !5593

if.end46:                                         ; preds = %lor.lhs.false42
  br i1 false, label %if.end46.land.lhs.true48_crit_edge, label %if.end54, !dbg !5594

if.end46.land.lhs.true48_crit_edge:               ; preds = %if.end46
  br label %land.lhs.true48, !dbg !5594

land.lhs.true48:                                  ; preds = %if.end46.land.lhs.true48_crit_edge, %if.then32
  %tobool49 = icmp eq %union.tree_node* %3, null, !dbg !5596
  br i1 %tobool49, label %cleanup, label %lor.lhs.false50, !dbg !5597

lor.lhs.false50:                                  ; preds = %land.lhs.true48
  %call51 = tail call fastcc i32 @compare_values(%union.tree_node* %val.0, %union.tree_node* nonnull %3) #7, !dbg !5598
  %cmp52 = icmp eq i32 %call51, 0, !dbg !5599
  br i1 %cmp52, label %cleanup, label %if.end54, !dbg !5600

if.end54:                                         ; preds = %if.then32, %lor.lhs.false50, %if.end46
  br label %cleanup, !dbg !5601

cleanup:                                          ; preds = %land.lhs.true40, %land.lhs.true48, %lor.lhs.false50, %lor.lhs.false42, %if.end54
  %cleanup.dest.slot.0 = phi i1 [ true, %if.end54 ], [ false, %lor.lhs.false42 ], [ false, %land.lhs.true40 ], [ false, %lor.lhs.false50 ], [ false, %land.lhs.true48 ]
  br i1 %cleanup.dest.slot.0, label %if.end56, label %cleanup57

if.end56:                                         ; preds = %cleanup, %if.end6, %lor.lhs.false24
  store i32 %comp_code.1, i32* %code_p, align 4, !dbg !5602
  store %union.tree_node* %val.0, %union.tree_node** %val_p, align 8, !dbg !5603
  br label %cleanup57, !dbg !5604

cleanup57:                                        ; preds = %if.end3, %cleanup, %if.end56
  %retval.1 = phi i8 [ 0, %cleanup ], [ 1, %if.end56 ], [ 0, %if.end3 ], !dbg !5565
  ret i8 %retval.1, !dbg !5605
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @register_edge_assert_for_2(%union.tree_node* %name, %struct.edge_def* %e, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %cond_code, %union.tree_node* %cond_op0, %union.tree_node* %cond_op1, i8 zeroext %invert) unnamed_addr #5 !dbg !5606 {
entry:
  %val = alloca %union.tree_node*, align 8
  %comp_code = alloca i32, align 4
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !5610, metadata !DIExpression()), !dbg !5632
  call void @llvm.dbg.value(metadata %struct.edge_def* %e, metadata !5611, metadata !DIExpression()), !dbg !5632
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5612, metadata !DIExpression()), !dbg !5633
  call void @llvm.dbg.value(metadata i32 %cond_code, metadata !5613, metadata !DIExpression()), !dbg !5632
  call void @llvm.dbg.value(metadata %union.tree_node* %cond_op0, metadata !5614, metadata !DIExpression()), !dbg !5632
  call void @llvm.dbg.value(metadata %union.tree_node* %cond_op1, metadata !5615, metadata !DIExpression()), !dbg !5632
  call void @llvm.dbg.value(metadata i8 %invert, metadata !5616, metadata !DIExpression()), !dbg !5632
  %0 = bitcast %union.tree_node** %val to i8*, !dbg !5634
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !5634
  %1 = bitcast i32* %comp_code to i8*, !dbg !5635
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #8, !dbg !5635
  call void @llvm.dbg.value(metadata i8 0, metadata !5619, metadata !DIExpression()), !dbg !5632
  call void @llvm.dbg.value(metadata %union.tree_node** %val, metadata !5617, metadata !DIExpression(DW_OP_deref)), !dbg !5632
  call void @llvm.dbg.value(metadata i32* %comp_code, metadata !5618, metadata !DIExpression(DW_OP_deref)), !dbg !5632
  %call = call fastcc zeroext i8 @extract_code_and_val_from_cond_with_ops(%union.tree_node* %name, i32 %cond_code, %union.tree_node* %cond_op0, %union.tree_node* %cond_op1, i8 zeroext %invert, i32* nonnull %comp_code, %union.tree_node** nonnull %val) #7, !dbg !5636
  %tobool = icmp eq i8 %call, 0, !dbg !5636
  br i1 %tobool, label %cleanup, label %if.end, !dbg !5638

if.end:                                           ; preds = %entry
  %call2 = call fastcc zeroext i8 @live_on_edge(%struct.edge_def* %e, %union.tree_node* %name) #7, !dbg !5639
  %tobool3 = icmp eq i8 %call2, 0, !dbg !5639
  br i1 %tobool3, label %if.end7, label %land.lhs.true, !dbg !5641

land.lhs.true:                                    ; preds = %if.end
  %call4 = call fastcc zeroext i8 @has_single_use(%union.tree_node* %name) #7, !dbg !5642
  %tobool5 = icmp eq i8 %call4, 0, !dbg !5642
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !5643

if.then6:                                         ; preds = %land.lhs.true
  %2 = load i32, i32* %comp_code, align 4, !dbg !5644
  call void @llvm.dbg.value(metadata i32 %2, metadata !5618, metadata !DIExpression()), !dbg !5632
  %3 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5646
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !5617, metadata !DIExpression()), !dbg !5632
  call fastcc void @register_new_assert_for(%union.tree_node* %name, %union.tree_node* %name, i32 %2, %union.tree_node* %3, %struct.basic_block_def* null, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5647
  call void @llvm.dbg.value(metadata i8 1, metadata !5619, metadata !DIExpression()), !dbg !5632
  br label %if.end7, !dbg !5648

if.end7:                                          ; preds = %land.lhs.true, %if.end, %if.then6
  %retval1.0 = phi i8 [ 0, %land.lhs.true ], [ 1, %if.then6 ], [ 0, %if.end ], !dbg !5632
  call void @llvm.dbg.value(metadata i8 %retval1.0, metadata !5619, metadata !DIExpression()), !dbg !5632
  %4 = load i32, i32* %comp_code, align 4, !dbg !5649
  call void @llvm.dbg.value(metadata i32 %4, metadata !5618, metadata !DIExpression()), !dbg !5632
  call void @llvm.dbg.value(metadata i32 %4, metadata !5618, metadata !DIExpression()), !dbg !5632
  %5 = or i32 %4, 1, !dbg !5650
  %6 = icmp eq i32 %5, 99, !dbg !5650
  br i1 %6, label %land.lhs.true11, label %cleanup, !dbg !5650

land.lhs.true11:                                  ; preds = %if.end7
  %7 = bitcast %union.tree_node** %val to i64**, !dbg !5651
  %8 = load i64*, i64** %7, align 8, !dbg !5651
  %bf.load = load i64, i64* %8, align 8, !dbg !5651
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5652
  %cmp12 = icmp eq i64 %bf.cast1, 23, !dbg !5652
  br i1 %cmp12, label %land.lhs.true14, label %cleanup, !dbg !5653

land.lhs.true14:                                  ; preds = %land.lhs.true11
  %type = getelementptr inbounds i64, i64* %8, i64 2, !dbg !5654
  %9 = bitcast i64* %type to i64**, !dbg !5654
  %10 = load i64*, i64** %9, align 8, !dbg !5654
  %bf.load16 = load i64, i64* %10, align 8, !dbg !5654
  %bf.cast182 = and i64 %bf.load16, 2097152, !dbg !5654
  %tobool19 = icmp eq i64 %bf.cast182, 0, !dbg !5654
  br i1 %tobool19, label %cleanup, label %if.then20, !dbg !5655

if.then20:                                        ; preds = %land.lhs.true14
  %def_stmt21 = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5656
  %11 = bitcast %union.tree_node** %def_stmt21 to %union.gimple_statement_d**, !dbg !5656
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %11, align 8, !dbg !5656
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %12, metadata !5620, metadata !DIExpression()), !dbg !5657
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !5623, metadata !DIExpression()), !dbg !5657
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !5624, metadata !DIExpression()), !dbg !5657
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !5625, metadata !DIExpression()), !dbg !5657
  %call22 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %12) #7, !dbg !5658
  %tobool24 = icmp eq i8 %call22, 0, !dbg !5658
  br i1 %tobool24, label %if.end49, label %land.lhs.true25, !dbg !5660

land.lhs.true25:                                  ; preds = %if.then20
  %call26 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %12) #7, !dbg !5661
  %cmp27 = icmp eq i32 %call26, 63, !dbg !5662
  br i1 %cmp27, label %if.then29, label %if.end49, !dbg !5663

if.then29:                                        ; preds = %land.lhs.true25
  %call30 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %12) #7, !dbg !5664
  call void @llvm.dbg.value(metadata %union.tree_node* %call30, metadata !5624, metadata !DIExpression()), !dbg !5657
  %call31 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %12) #7, !dbg !5666
  call void @llvm.dbg.value(metadata %union.tree_node* %call31, metadata !5623, metadata !DIExpression()), !dbg !5657
  %13 = getelementptr inbounds %union.tree_node, %union.tree_node* %call30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5667
  %bf.load33 = load i64, i64* %13, align 8, !dbg !5667
  %bf.cast3514 = and i64 %bf.load33, 65535, !dbg !5669
  %cmp36 = icmp eq i64 %bf.cast3514, 141, !dbg !5669
  br i1 %cmp36, label %land.lhs.true38, label %if.end49, !dbg !5670

land.lhs.true38:                                  ; preds = %if.then29
  %14 = getelementptr inbounds %union.tree_node, %union.tree_node* %call31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5671
  %bf.load40 = load i64, i64* %14, align 8, !dbg !5671
  %bf.cast4215 = and i64 %bf.load40, 65535, !dbg !5672
  %cmp43 = icmp eq i64 %bf.cast4215, 23, !dbg !5672
  br i1 %cmp43, label %if.then45, label %if.end49, !dbg !5673

if.then45:                                        ; preds = %land.lhs.true38
  %def_stmt47 = getelementptr inbounds %union.tree_node, %union.tree_node* %call30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5674
  %15 = bitcast %union.tree_node** %def_stmt47 to %union.gimple_statement_d**, !dbg !5674
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %15, align 8, !dbg !5674
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %16, metadata !5620, metadata !DIExpression()), !dbg !5657
  br label %if.end49, !dbg !5675

if.end49:                                         ; preds = %if.then20, %if.then29, %land.lhs.true38, %if.then45, %land.lhs.true25
  %def_stmt.1 = phi %union.gimple_statement_d* [ %12, %land.lhs.true25 ], [ %12, %if.then20 ], [ %16, %if.then45 ], [ %12, %land.lhs.true38 ], [ %12, %if.then29 ], !dbg !5657
  %cst2.0 = phi %union.tree_node* [ null, %land.lhs.true25 ], [ null, %if.then20 ], [ %call31, %if.then45 ], [ %call31, %land.lhs.true38 ], [ %call31, %if.then29 ], !dbg !5657
  %name2.0 = phi %union.tree_node* [ null, %land.lhs.true25 ], [ null, %if.then20 ], [ %call30, %if.then45 ], [ %call30, %land.lhs.true38 ], [ %call30, %if.then29 ], !dbg !5657
  call void @llvm.dbg.value(metadata %union.tree_node* %name2.0, metadata !5624, metadata !DIExpression()), !dbg !5657
  call void @llvm.dbg.value(metadata %union.tree_node* %cst2.0, metadata !5623, metadata !DIExpression()), !dbg !5657
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %def_stmt.1, metadata !5620, metadata !DIExpression()), !dbg !5657
  %call50 = call fastcc zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %def_stmt.1) #7, !dbg !5676
  %tobool51 = icmp eq i8 %call50, 0, !dbg !5676
  br i1 %tobool51, label %if.end87, label %if.then52, !dbg !5678

if.then52:                                        ; preds = %if.end49
  %call53 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %def_stmt.1) #7, !dbg !5679
  %cmp54 = icmp eq i32 %call53, 116, !dbg !5679
  br i1 %cmp54, label %land.lhs.true60, label %lor.lhs.false56, !dbg !5679

lor.lhs.false56:                                  ; preds = %if.then52
  %call57 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %def_stmt.1) #7, !dbg !5679
  %cmp58 = icmp eq i32 %call57, 113, !dbg !5679
  br i1 %cmp58, label %land.lhs.true60, label %if.end87, !dbg !5682

land.lhs.true60:                                  ; preds = %lor.lhs.false56, %if.then52
  %call61 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %def_stmt.1) #7, !dbg !5683
  %type63 = getelementptr inbounds %union.tree_node, %union.tree_node* %call61, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5683
  %17 = bitcast %union.tree_node** %type63 to i64**, !dbg !5683
  %18 = load i64*, i64** %17, align 8, !dbg !5683
  %bf.load65 = load i64, i64* %18, align 8, !dbg !5683
  %bf.cast6813 = and i64 %bf.load65, 2097152, !dbg !5683
  %tobool69 = icmp eq i64 %bf.cast6813, 0, !dbg !5683
  br i1 %tobool69, label %land.lhs.true70, label %if.end87, !dbg !5684

land.lhs.true70:                                  ; preds = %land.lhs.true60
  %call71 = call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %def_stmt.1) #7, !dbg !5685
  %type72 = bitcast %union.tree_node* %call71 to %struct.tree_type*, !dbg !5685
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type72, i64 0, i32 6, !dbg !5685
  %bf.load73 = load i32, i32* %precision, align 4, !dbg !5685
  %call75 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %def_stmt.1) #7, !dbg !5686
  %type77 = getelementptr inbounds %union.tree_node, %union.tree_node* %call75, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5686
  %19 = bitcast %union.tree_node** %type77 to %struct.tree_type**, !dbg !5686
  %20 = load %struct.tree_type*, %struct.tree_type** %19, align 8, !dbg !5686
  %precision79 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %20, i64 0, i32 6, !dbg !5686
  %bf.load80 = load i32, i32* %precision79, align 4, !dbg !5686
  %21 = xor i32 %bf.load73, %bf.load80, !dbg !5687
  %22 = and i32 %21, 1023, !dbg !5687
  %cmp82 = icmp eq i32 %22, 0, !dbg !5687
  br i1 %cmp82, label %if.then84, label %if.end87, !dbg !5688

if.then84:                                        ; preds = %land.lhs.true70
  %call85 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %def_stmt.1) #7, !dbg !5689
  call void @llvm.dbg.value(metadata %union.tree_node* %call85, metadata !5625, metadata !DIExpression()), !dbg !5657
  br label %if.end87, !dbg !5690

if.end87:                                         ; preds = %land.lhs.true60, %if.end49, %lor.lhs.false56, %land.lhs.true70, %if.then84
  %name3.1 = phi %union.tree_node* [ null, %if.end49 ], [ null, %land.lhs.true60 ], [ %call85, %if.then84 ], [ null, %land.lhs.true70 ], [ null, %lor.lhs.false56 ], !dbg !5691
  call void @llvm.dbg.value(metadata %union.tree_node* %name3.1, metadata !5625, metadata !DIExpression()), !dbg !5657
  %cmp88 = icmp eq %union.tree_node* %name3.1, null, !dbg !5692
  br i1 %cmp88, label %if.end158, label %land.lhs.true90, !dbg !5693

land.lhs.true90:                                  ; preds = %if.end87
  %23 = getelementptr inbounds %union.tree_node, %union.tree_node* %name3.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5694
  %bf.load92 = load i64, i64* %23, align 8, !dbg !5694
  %bf.cast948 = and i64 %bf.load92, 65535, !dbg !5695
  %cmp95 = icmp eq i64 %bf.cast948, 141, !dbg !5695
  br i1 %cmp95, label %land.lhs.true97, label %if.end158, !dbg !5696

land.lhs.true97:                                  ; preds = %land.lhs.true90
  %cmp98 = icmp eq %union.tree_node* %cst2.0, null, !dbg !5697
  br i1 %cmp98, label %land.lhs.true107, label %lor.lhs.false100, !dbg !5698

lor.lhs.false100:                                 ; preds = %land.lhs.true97
  %24 = getelementptr inbounds %union.tree_node, %union.tree_node* %cst2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5699
  %bf.load102 = load i64, i64* %24, align 8, !dbg !5699
  %bf.cast1049 = and i64 %bf.load102, 65535, !dbg !5700
  %cmp105 = icmp eq i64 %bf.cast1049, 23, !dbg !5700
  br i1 %cmp105, label %land.lhs.true107, label %if.end158, !dbg !5701

land.lhs.true107:                                 ; preds = %lor.lhs.false100, %land.lhs.true97
  %type109 = getelementptr inbounds %union.tree_node, %union.tree_node* %name3.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5702
  %25 = bitcast %union.tree_node** %type109 to i64**, !dbg !5702
  %26 = load i64*, i64** %25, align 8, !dbg !5702
  %bf.load111 = load i64, i64* %26, align 8, !dbg !5702
  %bf.cast11310 = and i64 %bf.load111, 65535, !dbg !5702
  %cmp114 = icmp eq i64 %bf.cast11310, 6, !dbg !5702
  br i1 %cmp114, label %land.lhs.true134, label %lor.lhs.false116, !dbg !5702

lor.lhs.false116:                                 ; preds = %land.lhs.true107
  %cmp123 = icmp eq i64 %bf.cast11310, 7, !dbg !5702
  br i1 %cmp123, label %land.lhs.true134, label %lor.lhs.false125, !dbg !5702

lor.lhs.false125:                                 ; preds = %lor.lhs.false116
  %cmp132 = icmp eq i64 %bf.cast11310, 8, !dbg !5702
  br i1 %cmp132, label %land.lhs.true134, label %if.end158, !dbg !5703

land.lhs.true134:                                 ; preds = %lor.lhs.false125, %lor.lhs.false116, %land.lhs.true107
  %call135 = call fastcc zeroext i8 @live_on_edge(%struct.edge_def* %e, %union.tree_node* nonnull %name3.1) #7, !dbg !5704
  %tobool137 = icmp eq i8 %call135, 0, !dbg !5704
  br i1 %tobool137, label %if.end158, label %land.lhs.true138, !dbg !5705

land.lhs.true138:                                 ; preds = %land.lhs.true134
  %call139 = call fastcc zeroext i8 @has_single_use(%union.tree_node* nonnull %name3.1) #7, !dbg !5706
  %tobool140 = icmp eq i8 %call139, 0, !dbg !5706
  br i1 %tobool140, label %if.then141, label %if.end158, !dbg !5707

if.then141:                                       ; preds = %land.lhs.true138
  %type143 = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5708
  %27 = load %union.tree_node*, %union.tree_node** %type143, align 8, !dbg !5708
  %call144 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %27, %union.tree_node* nonnull %name3.1) #6, !dbg !5708
  call void @llvm.dbg.value(metadata %union.tree_node* %call144, metadata !5626, metadata !DIExpression()), !dbg !5709
  br i1 %cmp98, label %if.end151, label %if.then147, !dbg !5710

if.then147:                                       ; preds = %if.then141
  %28 = load %union.tree_node*, %union.tree_node** %type143, align 8, !dbg !5711
  %call150 = call %union.tree_node* @build2_stat(i32 63, %union.tree_node* %28, %union.tree_node* %call144, %union.tree_node* nonnull %cst2.0) #6, !dbg !5711
  call void @llvm.dbg.value(metadata %union.tree_node* %call150, metadata !5626, metadata !DIExpression()), !dbg !5709
  br label %if.end151, !dbg !5713

if.end151:                                        ; preds = %if.then141, %if.then147
  %tmp.0 = phi %union.tree_node* [ %call150, %if.then147 ], [ %call144, %if.then141 ], !dbg !5709
  call void @llvm.dbg.value(metadata %union.tree_node* %tmp.0, metadata !5626, metadata !DIExpression()), !dbg !5709
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5714
  %tobool152 = icmp eq %struct._IO_FILE* %29, null, !dbg !5714
  br i1 %tobool152, label %if.end157, label %if.then153, !dbg !5716

if.then153:                                       ; preds = %if.end151
  %call154 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %29, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.32, i64 0, i64 0)) #6, !dbg !5717
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5719
  call void @print_generic_expr(%struct._IO_FILE* %30, %union.tree_node* nonnull %name3.1, i32 0) #6, !dbg !5720
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5721
  %call155 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i64 0, i64 0)) #6, !dbg !5722
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5723
  call void @print_generic_expr(%struct._IO_FILE* %32, %union.tree_node* %tmp.0, i32 0) #6, !dbg !5724
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5725
  %call156 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !5726
  br label %if.end157, !dbg !5727

if.end157:                                        ; preds = %if.end151, %if.then153
  %34 = load i32, i32* %comp_code, align 4, !dbg !5728
  call void @llvm.dbg.value(metadata i32 %34, metadata !5618, metadata !DIExpression()), !dbg !5632
  %35 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5729
  call void @llvm.dbg.value(metadata %union.tree_node* %35, metadata !5617, metadata !DIExpression()), !dbg !5632
  call fastcc void @register_new_assert_for(%union.tree_node* nonnull %name3.1, %union.tree_node* %tmp.0, i32 %34, %union.tree_node* %35, %struct.basic_block_def* null, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5730
  call void @llvm.dbg.value(metadata i8 1, metadata !5619, metadata !DIExpression()), !dbg !5632
  br label %if.end158, !dbg !5731

if.end158:                                        ; preds = %land.lhs.true138, %land.lhs.true134, %if.end87, %if.end157, %lor.lhs.false125, %lor.lhs.false100, %land.lhs.true90
  %retval1.1 = phi i8 [ %retval1.0, %land.lhs.true138 ], [ 1, %if.end157 ], [ %retval1.0, %land.lhs.true134 ], [ %retval1.0, %lor.lhs.false125 ], [ %retval1.0, %lor.lhs.false100 ], [ %retval1.0, %land.lhs.true90 ], [ %retval1.0, %if.end87 ], !dbg !5632
  call void @llvm.dbg.value(metadata i8 %retval1.1, metadata !5619, metadata !DIExpression()), !dbg !5632
  %cmp159 = icmp eq %union.tree_node* %name2.0, null, !dbg !5732
  br i1 %cmp159, label %cleanup, label %land.lhs.true161, !dbg !5733

land.lhs.true161:                                 ; preds = %if.end158
  %36 = getelementptr inbounds %union.tree_node, %union.tree_node* %name2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5734
  %bf.load163 = load i64, i64* %36, align 8, !dbg !5734
  %bf.cast1653 = and i64 %bf.load163, 65535, !dbg !5735
  %cmp166 = icmp eq i64 %bf.cast1653, 141, !dbg !5735
  br i1 %cmp166, label %land.lhs.true168, label %cleanup, !dbg !5736

land.lhs.true168:                                 ; preds = %land.lhs.true161
  %37 = getelementptr inbounds %union.tree_node, %union.tree_node* %cst2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5737
  %bf.load170 = load i64, i64* %37, align 8, !dbg !5737
  %bf.cast1724 = and i64 %bf.load170, 65535, !dbg !5738
  %cmp173 = icmp eq i64 %bf.cast1724, 23, !dbg !5738
  br i1 %cmp173, label %land.lhs.true175, label %cleanup, !dbg !5739

land.lhs.true175:                                 ; preds = %land.lhs.true168
  %type177 = getelementptr inbounds %union.tree_node, %union.tree_node* %name2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5740
  %38 = bitcast %union.tree_node** %type177 to i64**, !dbg !5740
  %39 = load i64*, i64** %38, align 8, !dbg !5740
  %bf.load179 = load i64, i64* %39, align 8, !dbg !5740
  %bf.cast1815 = and i64 %bf.load179, 65535, !dbg !5740
  %cmp182 = icmp eq i64 %bf.cast1815, 6, !dbg !5740
  br i1 %cmp182, label %land.lhs.true202, label %lor.lhs.false184, !dbg !5740

lor.lhs.false184:                                 ; preds = %land.lhs.true175
  %cmp191 = icmp eq i64 %bf.cast1815, 7, !dbg !5740
  br i1 %cmp191, label %land.lhs.true202, label %lor.lhs.false193, !dbg !5740

lor.lhs.false193:                                 ; preds = %lor.lhs.false184
  %cmp200 = icmp eq i64 %bf.cast1815, 8, !dbg !5740
  br i1 %cmp200, label %land.lhs.true202, label %cleanup, !dbg !5741

land.lhs.true202:                                 ; preds = %lor.lhs.false193, %lor.lhs.false184, %land.lhs.true175
  %call203 = call fastcc zeroext i8 @live_on_edge(%struct.edge_def* %e, %union.tree_node* nonnull %name2.0) #7, !dbg !5742
  %tobool205 = icmp eq i8 %call203, 0, !dbg !5742
  br i1 %tobool205, label %cleanup, label %land.lhs.true206, !dbg !5743

land.lhs.true206:                                 ; preds = %land.lhs.true202
  %call207 = call fastcc zeroext i8 @has_single_use(%union.tree_node* nonnull %name2.0) #7, !dbg !5744
  %tobool208 = icmp eq i8 %call207, 0, !dbg !5744
  br i1 %tobool208, label %if.then209, label %cleanup, !dbg !5745

if.then209:                                       ; preds = %land.lhs.true206
  call void @llvm.dbg.value(metadata %union.tree_node* %name2.0, metadata !5629, metadata !DIExpression()), !dbg !5746
  %type212 = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5747
  %40 = load %union.tree_node*, %union.tree_node** %type212, align 8, !dbg !5747
  %41 = load %union.tree_node*, %union.tree_node** %type177, align 8, !dbg !5749
  %cmp215 = icmp eq %union.tree_node* %40, %41, !dbg !5750
  br i1 %cmp215, label %if.end221, label %if.then217, !dbg !5751

if.then217:                                       ; preds = %if.then209
  %call220 = call %union.tree_node* @build1_stat(i32 116, %union.tree_node* %40, %union.tree_node* nonnull %name2.0) #6, !dbg !5752
  call void @llvm.dbg.value(metadata %union.tree_node* %call220, metadata !5629, metadata !DIExpression()), !dbg !5746
  br label %if.end221, !dbg !5753

if.end221:                                        ; preds = %if.then209, %if.then217
  %tmp210.0 = phi %union.tree_node* [ %call220, %if.then217 ], [ %name2.0, %if.then209 ], !dbg !5746
  call void @llvm.dbg.value(metadata %union.tree_node* %tmp210.0, metadata !5629, metadata !DIExpression()), !dbg !5746
  %cmp222 = icmp eq %union.tree_node* %cst2.0, null, !dbg !5754
  br i1 %cmp222, label %if.end228, label %if.then224, !dbg !5756

if.then224:                                       ; preds = %if.end221
  %42 = load %union.tree_node*, %union.tree_node** %type212, align 8, !dbg !5757
  %call227 = call %union.tree_node* @build2_stat(i32 63, %union.tree_node* %42, %union.tree_node* %tmp210.0, %union.tree_node* nonnull %cst2.0) #6, !dbg !5757
  call void @llvm.dbg.value(metadata %union.tree_node* %call227, metadata !5629, metadata !DIExpression()), !dbg !5746
  br label %if.end228, !dbg !5758

if.end228:                                        ; preds = %if.end221, %if.then224
  %tmp210.1 = phi %union.tree_node* [ %call227, %if.then224 ], [ %tmp210.0, %if.end221 ], !dbg !5746
  call void @llvm.dbg.value(metadata %union.tree_node* %tmp210.1, metadata !5629, metadata !DIExpression()), !dbg !5746
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5759
  %tobool229 = icmp eq %struct._IO_FILE* %43, null, !dbg !5759
  br i1 %tobool229, label %if.end234, label %if.then230, !dbg !5761

if.then230:                                       ; preds = %if.end228
  %call231 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %43, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.32, i64 0, i64 0)) #6, !dbg !5762
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5764
  call void @print_generic_expr(%struct._IO_FILE* %44, %union.tree_node* nonnull %name2.0, i32 0) #6, !dbg !5765
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5766
  %call232 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i64 0, i64 0)) #6, !dbg !5767
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5768
  call void @print_generic_expr(%struct._IO_FILE* %46, %union.tree_node* %tmp210.1, i32 0) #6, !dbg !5769
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5770
  %call233 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !5771
  br label %if.end234, !dbg !5772

if.end234:                                        ; preds = %if.end228, %if.then230
  %48 = load i32, i32* %comp_code, align 4, !dbg !5773
  call void @llvm.dbg.value(metadata i32 %48, metadata !5618, metadata !DIExpression()), !dbg !5632
  %49 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !5774
  call void @llvm.dbg.value(metadata %union.tree_node* %49, metadata !5617, metadata !DIExpression()), !dbg !5632
  call fastcc void @register_new_assert_for(%union.tree_node* nonnull %name2.0, %union.tree_node* %tmp210.1, i32 %48, %union.tree_node* %49, %struct.basic_block_def* null, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5775
  call void @llvm.dbg.value(metadata i8 1, metadata !5619, metadata !DIExpression()), !dbg !5632
  br label %cleanup, !dbg !5776

cleanup:                                          ; preds = %land.lhs.true206, %land.lhs.true202, %if.end158, %land.lhs.true14, %entry, %land.lhs.true11, %if.end7, %if.end234, %lor.lhs.false193, %land.lhs.true168, %land.lhs.true161
  %retval.0 = phi i8 [ 0, %entry ], [ %retval1.0, %land.lhs.true14 ], [ %retval1.0, %land.lhs.true11 ], [ %retval1.0, %if.end7 ], [ %retval1.1, %land.lhs.true206 ], [ 1, %if.end234 ], [ %retval1.1, %land.lhs.true202 ], [ %retval1.1, %lor.lhs.false193 ], [ %retval1.1, %land.lhs.true168 ], [ %retval1.1, %land.lhs.true161 ], [ %retval1.1, %if.end158 ], !dbg !5632
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #8, !dbg !5777
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !5777
  ret i8 %retval.0, !dbg !5777
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5778 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5780, metadata !DIExpression()), !dbg !5781
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !5782
  %cmp = icmp ugt i32 %call, 2, !dbg !5784
  br i1 %cmp, label %if.then, label %return, !dbg !5785

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 2) #7, !dbg !5786
  br label %return, !dbg !5787

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %call1, %if.then ], [ null, %entry ], !dbg !5788
  ret %union.tree_node* %retval.0, !dbg !5789
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %op, i32 %code, %struct.edge_def* %e, %struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %bsi) unnamed_addr #5 !dbg !5790 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !5794, metadata !DIExpression()), !dbg !5807
  call void @llvm.dbg.value(metadata i32 %code, metadata !5795, metadata !DIExpression()), !dbg !5807
  call void @llvm.dbg.value(metadata %struct.edge_def* %e, metadata !5796, metadata !DIExpression()), !dbg !5807
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5797, metadata !DIExpression()), !dbg !5808
  call void @llvm.dbg.value(metadata i8 0, metadata !5798, metadata !DIExpression()), !dbg !5807
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5809
  %bf.load = load i64, i64* %0, align 8, !dbg !5809
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5811
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !5811
  br i1 %cmp, label %if.end, label %cleanup, !dbg !5812

if.end:                                           ; preds = %entry
  %call = tail call fastcc zeroext i8 @has_single_use(%union.tree_node* %op) #7, !dbg !5813
  %tobool = icmp eq i8 %call, 0, !dbg !5813
  br i1 %tobool, label %if.then2, label %if.end4, !dbg !5815

if.then2:                                         ; preds = %if.end
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5816
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5816
  %call3 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %1, i64 0) #6, !dbg !5818
  call void @llvm.dbg.value(metadata %union.tree_node* %call3, metadata !5800, metadata !DIExpression()), !dbg !5807
  tail call fastcc void @register_new_assert_for(%union.tree_node* %op, %union.tree_node* %op, i32 %code, %union.tree_node* %call3, %struct.basic_block_def* null, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5819
  call void @llvm.dbg.value(metadata i8 1, metadata !5798, metadata !DIExpression()), !dbg !5807
  br label %if.end4, !dbg !5820

if.end4:                                          ; preds = %if.end, %if.then2
  %retval1.0 = phi i8 [ 0, %if.end ], [ 1, %if.then2 ], !dbg !5807
  call void @llvm.dbg.value(metadata i8 %retval1.0, metadata !5798, metadata !DIExpression()), !dbg !5807
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5821
  %2 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !5821
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %2, align 8, !dbg !5821
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %3, metadata !5799, metadata !DIExpression()), !dbg !5807
  %call5 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %3) #7, !dbg !5822
  %cmp6 = icmp eq i32 %call5, 6, !dbg !5824
  br i1 %cmp6, label %if.end8, label %cleanup, !dbg !5825

if.end8:                                          ; preds = %if.end4
  %call9 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3) #7, !dbg !5826
  call void @llvm.dbg.value(metadata i32 %call9, metadata !5801, metadata !DIExpression()), !dbg !5807
  %idxprom = sext i32 %call9 to i64, !dbg !5827
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5827
  %4 = load i32, i32* %arrayidx, align 4, !dbg !5827
  %cmp10 = icmp eq i32 %4, 5, !dbg !5828
  br i1 %cmp10, label %if.then11, label %if.else, !dbg !5829

if.then11:                                        ; preds = %if.end8
  %cmp12 = icmp eq i32 %code, 101, !dbg !5830
  %conv = zext i1 %cmp12 to i8, !dbg !5831
  call void @llvm.dbg.value(metadata i8 %conv, metadata !5802, metadata !DIExpression()), !dbg !5832
  %call13 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3) #7, !dbg !5833
  call void @llvm.dbg.value(metadata %union.tree_node* %call13, metadata !5805, metadata !DIExpression()), !dbg !5832
  %call14 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %3) #7, !dbg !5834
  call void @llvm.dbg.value(metadata %union.tree_node* %call14, metadata !5806, metadata !DIExpression()), !dbg !5832
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %call13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5835
  %bf.load16 = load i64, i64* %5, align 8, !dbg !5835
  %bf.cast187 = and i64 %bf.load16, 65535, !dbg !5837
  %cmp19 = icmp eq i64 %bf.cast187, 141, !dbg !5837
  br i1 %cmp19, label %if.then21, label %if.end26, !dbg !5838

if.then21:                                        ; preds = %if.then11
  %call22 = tail call fastcc zeroext i8 @register_edge_assert_for_2(%union.tree_node* %call13, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %call9, %union.tree_node* %call13, %union.tree_node* %call14, i8 zeroext %conv) #7, !dbg !5839
  %or10 = or i8 %retval1.0, %call22, !dbg !5840
  call void @llvm.dbg.value(metadata i8 %or10, metadata !5798, metadata !DIExpression()), !dbg !5807
  br label %if.end26, !dbg !5841

if.end26:                                         ; preds = %if.then21, %if.then11
  %retval1.1 = phi i8 [ %or10, %if.then21 ], [ %retval1.0, %if.then11 ], !dbg !5807
  call void @llvm.dbg.value(metadata i8 %retval1.1, metadata !5798, metadata !DIExpression()), !dbg !5807
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5842
  %bf.load28 = load i64, i64* %6, align 8, !dbg !5842
  %bf.cast308 = and i64 %bf.load28, 65535, !dbg !5844
  %cmp31 = icmp eq i64 %bf.cast308, 141, !dbg !5844
  br i1 %cmp31, label %if.then33, label %cleanup, !dbg !5845

if.then33:                                        ; preds = %if.end26
  %call34 = tail call fastcc zeroext i8 @register_edge_assert_for_2(%union.tree_node* %call14, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi, i32 %call9, %union.tree_node* %call13, %union.tree_node* %call14, i8 zeroext %conv) #7, !dbg !5846
  %or379 = or i8 %retval1.1, %call34, !dbg !5847
  call void @llvm.dbg.value(metadata i8 %or379, metadata !5798, metadata !DIExpression()), !dbg !5807
  br label %cleanup, !dbg !5848

if.else:                                          ; preds = %if.end8
  switch i32 %code, label %if.else72 [
    i32 102, label %land.lhs.true
    i32 101, label %land.lhs.true51
  ], !dbg !5849

land.lhs.true:                                    ; preds = %if.else
  %call42 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3) #7, !dbg !5851
  %cmp43 = icmp eq i32 %call42, 93, !dbg !5852
  br i1 %cmp43, label %if.then59, label %lor.lhs.false, !dbg !5853

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call45 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3) #7, !dbg !5854
  %cmp46 = icmp eq i32 %call45, 89, !dbg !5855
  br i1 %cmp46, label %if.then59, label %lor.lhs.false48, !dbg !5856

lor.lhs.false48:                                  ; preds = %lor.lhs.false
  br i1 false, label %lor.lhs.false48.land.lhs.true51_crit_edge, label %if.else72, !dbg !5857

lor.lhs.false48.land.lhs.true51_crit_edge:        ; preds = %lor.lhs.false48
  br label %land.lhs.true51, !dbg !5857

land.lhs.true51:                                  ; preds = %lor.lhs.false48.land.lhs.true51_crit_edge, %if.else
  %call52 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3) #7, !dbg !5858
  %cmp53 = icmp eq i32 %call52, 94, !dbg !5859
  br i1 %cmp53, label %if.then59, label %lor.lhs.false55, !dbg !5860

lor.lhs.false55:                                  ; preds = %land.lhs.true51
  %call56 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3) #7, !dbg !5861
  %cmp57 = icmp eq i32 %call56, 87, !dbg !5862
  br i1 %cmp57, label %if.then59, label %if.else72, !dbg !5863

if.then59:                                        ; preds = %lor.lhs.false55, %land.lhs.true51, %lor.lhs.false, %land.lhs.true
  %call60 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3) #7, !dbg !5864
  %call61 = tail call fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call60, i32 %code, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5866
  %or645 = or i8 %retval1.0, %call61, !dbg !5867
  call void @llvm.dbg.value(metadata i8 %or645, metadata !5798, metadata !DIExpression()), !dbg !5807
  %call66 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %3) #7, !dbg !5868
  %call67 = tail call fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call66, i32 %code, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5869
  %or706 = or i8 %or645, %call67, !dbg !5870
  call void @llvm.dbg.value(metadata i8 %or706, metadata !5798, metadata !DIExpression()), !dbg !5807
  ret i8 %or706, !dbg !5871

if.else72:                                        ; preds = %if.else, %lor.lhs.false55, %lor.lhs.false48
  %call73 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3) #7, !dbg !5872
  %cmp74 = icmp eq i32 %call73, 96, !dbg !5874
  br i1 %cmp74, label %if.then76, label %if.else84, !dbg !5875

if.then76:                                        ; preds = %if.else72
  %call77 = tail call i32 @invert_tree_comparison(i32 %code, i8 zeroext 0) #6, !dbg !5876
  call void @llvm.dbg.value(metadata i32 %call77, metadata !5795, metadata !DIExpression()), !dbg !5807
  %call78 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3) #7, !dbg !5878
  %call79 = tail call fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call78, i32 %call77, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5879
  %or824 = or i8 %retval1.0, %call79, !dbg !5880
  call void @llvm.dbg.value(metadata i8 %or824, metadata !5798, metadata !DIExpression()), !dbg !5807
  ret i8 %or824, !dbg !5871

if.else84:                                        ; preds = %if.else72
  %call85 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3) #7, !dbg !5881
  %cmp86 = icmp eq i32 %call85, 141, !dbg !5883
  br i1 %cmp86, label %if.then88, label %if.else95, !dbg !5884

if.then88:                                        ; preds = %if.else84
  %call89 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3) #7, !dbg !5885
  %call90 = tail call fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call89, i32 %code, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5887
  %or933 = or i8 %retval1.0, %call90, !dbg !5888
  call void @llvm.dbg.value(metadata i8 %or933, metadata !5798, metadata !DIExpression()), !dbg !5807
  ret i8 %or933, !dbg !5871

if.else95:                                        ; preds = %if.else84
  %call96 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3) #7, !dbg !5889
  %cmp97 = icmp eq i32 %call96, 116, !dbg !5889
  br i1 %cmp97, label %if.then103, label %lor.lhs.false99, !dbg !5889

lor.lhs.false99:                                  ; preds = %if.else95
  %call100 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %3) #7, !dbg !5889
  %cmp101 = icmp eq i32 %call100, 113, !dbg !5889
  br i1 %cmp101, label %if.then103, label %cleanup, !dbg !5891

if.then103:                                       ; preds = %lor.lhs.false99, %if.else95
  %call104 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %3) #7, !dbg !5892
  %call105 = tail call fastcc zeroext i8 @register_edge_assert_for_1(%union.tree_node* %call104, i32 %code, %struct.edge_def* %e, %struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5894
  %or1082 = or i8 %retval1.0, %call105, !dbg !5895
  call void @llvm.dbg.value(metadata i8 %or1082, metadata !5798, metadata !DIExpression()), !dbg !5807
  ret i8 %or1082, !dbg !5871

cleanup:                                          ; preds = %if.end4, %entry, %if.then33, %if.end26, %lor.lhs.false99
  %retval.0 = phi i8 [ 0, %entry ], [ %retval1.0, %if.end4 ], [ %or379, %if.then33 ], [ %retval1.1, %if.end26 ], [ %retval1.0, %lor.lhs.false99 ], !dbg !5807
  ret i8 %retval.0, !dbg !5871
}

declare dso_local i32 @swap_tree_comparison(i32) local_unnamed_addr #2

declare dso_local i32 @invert_tree_comparison(i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @live_on_edge(%struct.edge_def* %e, %union.tree_node* %name) unnamed_addr #5 !dbg !5896 {
entry:
  call void @llvm.dbg.value(metadata %struct.edge_def* %e, metadata !5900, metadata !DIExpression()), !dbg !5902
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !5901, metadata !DIExpression()), !dbg !5902
  %0 = load %struct.simple_bitmap_def**, %struct.simple_bitmap_def*** @live, align 8, !dbg !5903
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %e, i64 0, i32 1, !dbg !5904
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5904
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i64 0, i32 9, !dbg !5905
  %2 = load i32, i32* %index, align 8, !dbg !5905
  %idxprom = sext i32 %2 to i64, !dbg !5903
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %0, i64 %idxprom, !dbg !5903
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %arrayidx, align 8, !dbg !5903
  %tobool = icmp eq %struct.simple_bitmap_def* %3, null, !dbg !5903
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !5906

land.rhs:                                         ; preds = %entry
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5907
  %4 = bitcast %union.tree_node** %version to i32*, !dbg !5907
  %5 = load i32, i32* %4, align 8, !dbg !5907
  %div = lshr i32 %5, 6, !dbg !5907
  %idxprom5 = zext i32 %div to i64, !dbg !5907
  %arrayidx6 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %3, i64 0, i32 3, i64 %idxprom5, !dbg !5907
  %6 = load i64, i64* %arrayidx6, align 8, !dbg !5907
  %rem = and i32 %5, 63, !dbg !5907
  %sh_prom = zext i32 %rem to i64, !dbg !5907
  %shr = lshr i64 %6, %sh_prom, !dbg !5907
  %7 = trunc i64 %shr to i8
  %8 = and i8 %7, 1
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %9 = phi i8 [ 0, %entry ], [ %8, %land.rhs ]
  ret i8 %9, !dbg !5908
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_assign_cast_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !5909 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !5911, metadata !DIExpression()), !dbg !5915
  %call = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %s) #7, !dbg !5916
  %tobool = icmp eq i8 %call, 0, !dbg !5916
  br i1 %tobool, label %return, label %if.then, !dbg !5917

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %s) #7, !dbg !5918
  call void @llvm.dbg.value(metadata i32 %call1, metadata !5912, metadata !DIExpression()), !dbg !5919
  switch i32 %call1, label %lor.rhs [
    i32 116, label %lor.end
    i32 113, label %lor.end
    i32 118, label %lor.end
    i32 77, label %lor.end
  ], !dbg !5920

lor.rhs:                                          ; preds = %if.then
  br label %lor.end, !dbg !5921

lor.end:                                          ; preds = %if.then, %if.then, %if.then, %if.then, %lor.rhs
  %0 = phi i8 [ 1, %if.then ], [ 0, %lor.rhs ], [ 1, %if.then ], [ 1, %if.then ], [ 1, %if.then ]
  br label %return

return:                                           ; preds = %entry, %lor.end
  %retval.0 = phi i8 [ %0, %lor.end ], [ 0, %entry ], !dbg !5915
  ret i8 %retval.0, !dbg !5922
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !5923 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5925, metadata !DIExpression()), !dbg !5930
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !5931
  call void @llvm.dbg.value(metadata i32 %call, metadata !5926, metadata !DIExpression()), !dbg !5930
  switch i32 %call, label %if.else14 [
    i32 8, label %if.then3
    i32 6, label %if.else
    i32 1, label %if.then13
  ], !dbg !5932

if.then3:                                         ; preds = %entry
  %call4 = tail call fastcc %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %stmt) #7, !dbg !5933
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !5927, metadata !DIExpression()), !dbg !5935
  br label %cleanup, !dbg !5936

if.else:                                          ; preds = %entry
  %call5 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !5937
  %cond = icmp eq i32 %call5, 66, !dbg !5938
  br i1 %cond, label %sw.bb, label %sw.default, !dbg !5938

sw.bb:                                            ; preds = %if.else
  %call6 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !5939
  %type7 = getelementptr inbounds %union.tree_node, %union.tree_node* %call6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5939
  %0 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !5939
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !5927, metadata !DIExpression()), !dbg !5935
  br label %cleanup, !dbg !5941

sw.default:                                       ; preds = %if.else
  %call8 = tail call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %stmt) #6, !dbg !5942
  %type10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5942
  %1 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !5942
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !5927, metadata !DIExpression()), !dbg !5935
  br label %cleanup, !dbg !5943

if.then13:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5944
  br label %cleanup, !dbg !5946

if.else14:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !5947
  br label %cleanup, !dbg !5948

cleanup:                                          ; preds = %if.then3, %sw.default, %sw.bb, %if.else14, %if.then13
  %retval.0 = phi %union.tree_node* [ %2, %if.then13 ], [ %3, %if.else14 ], [ %call4, %if.then3 ], [ %1, %sw.default ], [ %0, %sw.bb ], !dbg !5949
  ret %union.tree_node* %retval.0, !dbg !5950
}

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5951 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5953, metadata !DIExpression()), !dbg !5956
  %call = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #7, !dbg !5957
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5954, metadata !DIExpression()), !dbg !5956
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5958
  %0 = bitcast %union.tree_node** %type1 to %struct.tree_common**, !dbg !5958
  %1 = load %struct.tree_common*, %struct.tree_common** %0, align 8, !dbg !5958
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1, i64 0, i32 2, !dbg !5959
  %2 = bitcast %union.tree_node** %type3 to %struct.tree_common**, !dbg !5959
  %3 = load %struct.tree_common*, %struct.tree_common** %2, align 8, !dbg !5959
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3, i64 0, i32 2, !dbg !5960
  %4 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !5960
  ret %union.tree_node* %4, !dbg !5961
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5962 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5964, metadata !DIExpression()), !dbg !5965
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #7, !dbg !5966
  ret %union.tree_node* %call, !dbg !5967
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5968 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5972, metadata !DIExpression()), !dbg !5973
  %num_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 3, !dbg !5974
  %0 = load i32, i32* %num_ops, align 4, !dbg !5974
  ret i32 %0, !dbg !5975
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_switch_num_labels(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5976 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5978, metadata !DIExpression()), !dbg !5980
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !5981
  call void @llvm.dbg.value(metadata i32 %call, metadata !5979, metadata !DIExpression()), !dbg !5980
  %cmp = icmp ugt i32 %call, 1, !dbg !5982
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5982

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !5982
  br label %cond.end, !dbg !5982

cond.end:                                         ; preds = %entry, %cond.true
  %sub = add i32 %call, -1, !dbg !5983
  ret i32 %sub, !dbg !5984
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5985 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5987, metadata !DIExpression()), !dbg !5988
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !5989
  ret %union.tree_node* %call, !dbg !5990
}

declare dso_local %union.tree_node* @make_tree_vec_stat(i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !5991 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5993, metadata !DIExpression()), !dbg !5995
  call void @llvm.dbg.value(metadata i32 %index, metadata !5994, metadata !DIExpression()), !dbg !5995
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !5996
  %add = add i32 %index, 1, !dbg !5996
  %cmp = icmp ugt i32 %call, %add, !dbg !5996
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5996

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3215, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !5996
  br label %cond.end, !dbg !5996

cond.end:                                         ; preds = %entry, %cond.true
  %call2 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %add) #7, !dbg !5997
  ret %union.tree_node* %call2, !dbg !5998
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal i32 @compare_case_labels(i8* %p1, i8* %p2) #5 !dbg !5999 {
entry:
  call void @llvm.dbg.value(metadata i8* %p1, metadata !6001, metadata !DIExpression()), !dbg !6007
  call void @llvm.dbg.value(metadata i8* %p2, metadata !6002, metadata !DIExpression()), !dbg !6007
  %0 = bitcast i8* %p1 to %union.tree_node**, !dbg !6008
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6009
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !6003, metadata !DIExpression()), !dbg !6007
  %2 = bitcast i8* %p2 to %union.tree_node**, !dbg !6010
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !6011
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !6004, metadata !DIExpression()), !dbg !6007
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6012
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !6012
  %4 = bitcast %union.tree_node** %arrayidx to %struct.tree_decl_minimal**, !dbg !6012
  %5 = load %struct.tree_decl_minimal*, %struct.tree_decl_minimal** %4, align 8, !dbg !6012
  %uid = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %5, i64 0, i32 2, !dbg !6012
  %6 = load i32, i32* %uid, align 4, !dbg !6012
  call void @llvm.dbg.value(metadata i32 %6, metadata !6005, metadata !DIExpression()), !dbg !6007
  %operands2 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6013
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands2, i64 2, !dbg !6013
  %7 = bitcast %union.tree_node** %arrayidx3 to %struct.tree_decl_minimal**, !dbg !6013
  %8 = load %struct.tree_decl_minimal*, %struct.tree_decl_minimal** %7, align 8, !dbg !6013
  %uid5 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %8, i64 0, i32 2, !dbg !6013
  %9 = load i32, i32* %uid5, align 4, !dbg !6013
  call void @llvm.dbg.value(metadata i32 %9, metadata !6006, metadata !DIExpression()), !dbg !6007
  %cmp = icmp ult i32 %6, %9, !dbg !6014
  br i1 %cmp, label %cleanup, label %if.else, !dbg !6016

if.else:                                          ; preds = %entry
  %cmp6 = icmp eq i32 %6, %9, !dbg !6017
  br i1 %cmp6, label %if.then7, label %cleanup, !dbg !6019

if.then7:                                         ; preds = %if.else
  %10 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6020
  %tobool = icmp eq %union.tree_node* %10, null, !dbg !6020
  br i1 %tobool, label %cleanup, label %if.else12, !dbg !6023

if.else12:                                        ; preds = %if.then7
  %11 = load %union.tree_node*, %union.tree_node** %operands2, align 8, !dbg !6024
  %tobool16 = icmp eq %union.tree_node* %11, null, !dbg !6024
  br i1 %tobool16, label %cleanup, label %if.else18, !dbg !6026

if.else18:                                        ; preds = %if.else12
  %call = tail call i32 @tree_int_cst_compare(%union.tree_node* nonnull %10, %union.tree_node* nonnull %11) #6, !dbg !6027
  br label %cleanup, !dbg !6028

cleanup:                                          ; preds = %if.else12, %if.then7, %if.else, %entry, %if.else18
  %retval.0 = phi i32 [ %call, %if.else18 ], [ -1, %entry ], [ -1, %if.then7 ], [ 1, %if.else12 ], [ 1, %if.else ], !dbg !6029
  ret i32 %retval.0, !dbg !6030
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) local_unnamed_addr #2

declare dso_local %struct.basic_block_def* @label_to_block_fn(%struct.function*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !6031 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6038, metadata !DIExpression()), !dbg !6039
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 13, !dbg !6040
  %0 = load i32, i32* %flags, align 8, !dbg !6040
  %and = and i32 %0, 512, !dbg !6041
  %tobool = icmp eq i32 %and, 0, !dbg !6041
  br i1 %tobool, label %land.lhs.true, label %cond.end, !dbg !6042

land.lhs.true:                                    ; preds = %entry
  %gimple = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 7, i32 0, !dbg !6043
  %1 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6043
  %tobool1 = icmp eq %struct.gimple_bb_info* %1, null, !dbg !6044
  br i1 %tobool1, label %cond.end, label %cond.true, !dbg !6045

cond.true:                                        ; preds = %land.lhs.true
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %1, i64 0, i32 0, !dbg !6046
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6046
  br label %cond.end, !dbg !6045

cond.end:                                         ; preds = %land.lhs.true, %entry, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %2, %cond.true ], [ null, %land.lhs.true ], [ null, %entry ], !dbg !6045
  ret %struct.gimple_seq_d* %cond, !dbg !6047
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !6048 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !6055, metadata !DIExpression()), !dbg !6056
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !6057
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6057

cond.true:                                        ; preds = %entry
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 0, !dbg !6058
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6058
  br label %cond.end, !dbg !6057

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !6057
  ret %struct.gimple_seq_node_d* %cond, !dbg !6059
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !6060 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6064, metadata !DIExpression()), !dbg !6067
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6065, metadata !DIExpression()), !dbg !6067
  call void @llvm.dbg.value(metadata i32 %flags, metadata !6066, metadata !DIExpression()), !dbg !6067
  %0 = and i32 %flags, 10, !dbg !6068
  %1 = icmp eq i32 %0, 8, !dbg !6068
  br i1 %1, label %cond.true, label %land.lhs.true, !dbg !6068

land.lhs.true:                                    ; preds = %entry
  %2 = and i32 %flags, 5, !dbg !6068
  %3 = icmp eq i32 %2, 4, !dbg !6068
  br i1 %3, label %cond.true, label %cond.end, !dbg !6068

cond.true:                                        ; preds = %land.lhs.true, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6068
  br label %cond.end, !dbg !6068

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %tobool9 = icmp eq i32 %0, 0, !dbg !6069
  br i1 %tobool9, label %cond.end12, label %cond.true10, !dbg !6070

cond.true10:                                      ; preds = %cond.end
  %call = tail call fastcc %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %stmt) #7, !dbg !6071
  br label %cond.end12, !dbg !6070

cond.end12:                                       ; preds = %cond.end, %cond.true10
  %4 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.end ], !dbg !6070
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !6072
  store %struct.def_optype_d* %4, %struct.def_optype_d** %defs, align 8, !dbg !6073
  %and14 = and i32 %flags, 8, !dbg !6074
  %tobool15 = icmp eq i32 %and14, 0, !dbg !6074
  br i1 %tobool15, label %land.lhs.true16, label %if.end, !dbg !6076

land.lhs.true16:                                  ; preds = %cond.end12
  %tobool18 = icmp eq %struct.def_optype_d* %4, null, !dbg !6077
  br i1 %tobool18, label %if.end, label %land.lhs.true19, !dbg !6078

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %call20 = tail call fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %stmt) #7, !dbg !6079
  %cmp = icmp eq %union.tree_node* %call20, null, !dbg !6080
  br i1 %cmp, label %if.end, label %if.then, !dbg !6081

if.then:                                          ; preds = %land.lhs.true19
  %5 = bitcast %struct.def_optype_d** %defs to i64**, !dbg !6082
  %6 = load i64*, i64** %5, align 8, !dbg !6082
  %7 = load i64, i64* %6, align 8, !dbg !6083
  %8 = bitcast %struct.def_optype_d** %defs to i64*, !dbg !6084
  store i64 %7, i64* %8, align 8, !dbg !6084
  br label %if.end, !dbg !6085

if.end:                                           ; preds = %land.lhs.true19, %land.lhs.true16, %cond.end12, %if.then
  %and23 = and i32 %flags, 5, !dbg !6086
  %tobool24 = icmp eq i32 %and23, 0, !dbg !6086
  br i1 %tobool24, label %cond.end28, label %cond.true25, !dbg !6087

cond.true25:                                      ; preds = %if.end
  %call26 = tail call fastcc %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %stmt) #7, !dbg !6088
  br label %cond.end28, !dbg !6087

cond.end28:                                       ; preds = %if.end, %cond.true25
  %9 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %if.end ], !dbg !6087
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !6089
  store %struct.use_optype_d* %9, %struct.use_optype_d** %uses, align 8, !dbg !6090
  %and30 = and i32 %flags, 4, !dbg !6091
  %tobool31 = icmp eq i32 %and30, 0, !dbg !6091
  br i1 %tobool31, label %land.lhs.true32, label %if.end42, !dbg !6093

land.lhs.true32:                                  ; preds = %cond.end28
  %tobool34 = icmp eq %struct.use_optype_d* %9, null, !dbg !6094
  br i1 %tobool34, label %if.end42, label %land.lhs.true35, !dbg !6095

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %call36 = tail call fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %stmt) #7, !dbg !6096
  %cmp37 = icmp eq %union.tree_node* %call36, null, !dbg !6097
  br i1 %cmp37, label %if.end42, label %if.then38, !dbg !6098

if.then38:                                        ; preds = %land.lhs.true35
  %10 = bitcast %struct.use_optype_d** %uses to i64**, !dbg !6099
  %11 = load i64*, i64** %10, align 8, !dbg !6099
  %12 = load i64, i64* %11, align 8, !dbg !6100
  %13 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !6101
  store i64 %12, i64* %13, align 8, !dbg !6101
  br label %if.end42, !dbg !6102

if.end42:                                         ; preds = %land.lhs.true35, %land.lhs.true32, %cond.end28, %if.then38
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !6103
  store i8 0, i8* %done, align 8, !dbg !6104
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !6105
  store i32 0, i32* %phi_i, align 8, !dbg !6106
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !6107
  store i32 0, i32* %num_phi, align 4, !dbg !6108
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !6109
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6110
  ret void, !dbg !6111
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6112 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6116, metadata !DIExpression()), !dbg !6117
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #7, !dbg !6118
  %tobool = icmp eq i8 %call, 0, !dbg !6118
  br i1 %tobool, label %return, label %if.end, !dbg !6120

if.end:                                           ; preds = %entry
  %def_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !6121
  %0 = bitcast i32* %def_ops to %struct.def_optype_d**, !dbg !6121
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %0, align 8, !dbg !6121
  br label %return, !dbg !6122

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %struct.def_optype_d* [ %1, %if.end ], [ null, %entry ], !dbg !6117
  ret %struct.def_optype_d* %retval.0, !dbg !6123
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6124 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6126, metadata !DIExpression()), !dbg !6127
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #7, !dbg !6128
  %tobool = icmp eq i8 %call, 0, !dbg !6128
  br i1 %tobool, label %return, label %if.end, !dbg !6130

if.end:                                           ; preds = %entry
  %vdef = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, !dbg !6131
  %0 = bitcast [1 x %struct.phi_arg_d]* %vdef to %union.tree_node**, !dbg !6131
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6131
  br label %return, !dbg !6132

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !6127
  ret %union.tree_node* %retval.0, !dbg !6133
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6134 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6138, metadata !DIExpression()), !dbg !6139
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #7, !dbg !6140
  %tobool = icmp eq i8 %call, 0, !dbg !6140
  br i1 %tobool, label %return, label %if.end, !dbg !6142

if.end:                                           ; preds = %entry
  %use_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !6143
  %0 = bitcast %union.tree_node** %use_ops to %struct.use_optype_d**, !dbg !6143
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %0, align 8, !dbg !6143
  br label %return, !dbg !6144

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %struct.use_optype_d* [ %1, %if.end ], [ null, %entry ], !dbg !6139
  ret %struct.use_optype_d* %retval.0, !dbg !6145
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6146 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6148, metadata !DIExpression()), !dbg !6149
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #7, !dbg !6150
  %tobool = icmp eq i8 %call, 0, !dbg !6150
  br i1 %tobool, label %return, label %if.end, !dbg !6152

if.end:                                           ; preds = %entry
  %vuse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !6153
  %0 = bitcast %struct.ssa_use_operand_d** %vuse to %union.tree_node**, !dbg !6153
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6153
  br label %return, !dbg !6154

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !6149
  ret %union.tree_node* %retval.0, !dbg !6155
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6156 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6158, metadata !DIExpression()), !dbg !6159
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !6160
  %cmp = icmp ugt i32 %call, 5, !dbg !6161
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6162

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !6163
  %cmp2 = icmp ult i32 %call1, 10, !dbg !6164
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !6165
}

declare dso_local zeroext i8 @stmt_could_throw_p(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6166 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6170, metadata !DIExpression()), !dbg !6171
  %bb = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 4, !dbg !6172
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6172
  ret %struct.basic_block_def* %0, !dbg !6173
}

declare dso_local void @count_uses_and_derefs(%union.tree_node*, %union.gimple_statement_d*, i32*, i32*, i32*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !6174 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6176, metadata !DIExpression()), !dbg !6178
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !6179
  call void @llvm.dbg.value(metadata i32 %call, metadata !6177, metadata !DIExpression()), !dbg !6178
  switch i32 %call, label %if.else4 [
    i32 6, label %if.then
    i32 1, label %if.then
    i32 8, label %cleanup
  ], !dbg !6180

if.then:                                          ; preds = %entry, %entry
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !6182
  %bf.load = load i32, i32* %0, align 8, !dbg !6182
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6182
  br label %cleanup, !dbg !6183

if.else4:                                         ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6184
  br label %cleanup, !dbg !6186

cleanup:                                          ; preds = %entry, %if.else4, %if.then
  %retval.0 = phi i32 [ %bf.lshr, %if.then ], [ 0, %if.else4 ], [ 59, %entry ], !dbg !6178
  ret i32 %retval.0, !dbg !6187
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @get_gimple_rhs_class(i32 %code) unnamed_addr #0 !dbg !6188 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !6192, metadata !DIExpression()), !dbg !6193
  %idxprom = sext i32 %code to i64, !dbg !6194
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !6194
  %0 = load i8, i8* %arrayidx, align 1, !dbg !6194
  %conv = zext i8 %0 to i32, !dbg !6195
  ret i32 %conv, !dbg !6196
}

declare dso_local zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d*, %struct.ssa_use_operand_d**, %union.gimple_statement_d**) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) local_unnamed_addr #2

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) local_unnamed_addr #2

declare dso_local i8* @xmalloc(i64) local_unnamed_addr #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) unnamed_addr #0 !dbg !6197 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %def, metadata !6202, metadata !DIExpression()), !dbg !6203
  %0 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6204
  ret %union.tree_node* %0, !dbg !6205
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6206 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6208, metadata !DIExpression()), !dbg !6209
  %result = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !6210
  %0 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6210
  ret %union.tree_node* %0, !dbg !6211
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !6212 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6216, metadata !DIExpression()), !dbg !6217
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !6218
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !6219
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !6220
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !6221
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !6222
  store i32 0, i32* %iter_type, align 4, !dbg !6223
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !6224
  store i32 0, i32* %phi_i, align 8, !dbg !6225
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !6226
  store i32 0, i32* %num_phi, align 4, !dbg !6227
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !6228
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6229
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !6230
  store i8 1, i8* %done, align 8, !dbg !6231
  ret void, !dbg !6232
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6233 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6235, metadata !DIExpression()), !dbg !6236
  %nargs = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 2, !dbg !6237
  %0 = load i32, i32* %nargs, align 4, !dbg !6237
  ret i32 %0, !dbg !6238
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !6239 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6243, metadata !DIExpression()), !dbg !6245
  call void @llvm.dbg.value(metadata i32 %i, metadata !6244, metadata !DIExpression()), !dbg !6245
  %call = tail call fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %i) #7, !dbg !6246
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i64 0, i32 0, !dbg !6247
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !6248
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !6249 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6254, metadata !DIExpression()), !dbg !6256
  call void @llvm.dbg.value(metadata i32 %index, metadata !6255, metadata !DIExpression()), !dbg !6256
  %capacity = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !6257
  %0 = load i32, i32* %capacity, align 8, !dbg !6257
  %cmp = icmp ult i32 %0, %index, !dbg !6257
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !6257

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6257
  br label %cond.end, !dbg !6257

cond.end:                                         ; preds = %entry, %cond.true
  %idxprom = zext i32 %index to i64, !dbg !6258
  %arrayidx = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 %idxprom, !dbg !6258
  ret %struct.phi_arg_d* %arrayidx, !dbg !6259
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) unnamed_addr #0 !dbg !6260 {
entry:
  %call = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #7, !dbg !6265
  %tobool = icmp eq %struct.VEC_edge_gc* %call, null, !dbg !6265
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6265

cond.true:                                        ; preds = %entry
  %call1 = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #7, !dbg !6265
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i64 0, i32 0, !dbg !6265
  br label %cond.end, !dbg !6265

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6265
  %call2 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #7, !dbg !6265
  %cmp = icmp eq i32 %call2, %i.coerce0, !dbg !6266
  %conv3 = zext i1 %cmp to i8, !dbg !6267
  ret i8 %conv3, !dbg !6268
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) unnamed_addr #0 !dbg !6269 {
entry:
  %call = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #7, !dbg !6274
  %tobool = icmp eq %struct.VEC_edge_gc* %call, null, !dbg !6274
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6274

cond.true:                                        ; preds = %entry
  %call1 = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #7, !dbg !6274
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i64 0, i32 0, !dbg !6274
  br label %cond.end, !dbg !6274

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6274
  %call2 = tail call fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %i.coerce0) #7, !dbg !6274
  ret %struct.edge_def* %call2, !dbg !6275
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) unnamed_addr #0 !dbg !6276 {
entry:
  %tobool = icmp eq %struct.VEC_edge_gc** %i.coerce1, null, !dbg !6281
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !6281

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6281
  br label %cond.end, !dbg !6281

cond.end:                                         ; preds = %entry, %cond.true
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %i.coerce1, align 8, !dbg !6282
  ret %struct.VEC_edge_gc* %0, !dbg !6283
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !6284 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !6288, metadata !DIExpression()), !dbg !6290
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !6289, metadata !DIExpression()), !dbg !6290
  br label %land.end, !dbg !6291

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !6291
  %arrayidx = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6291
  %0 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6291
  ret %struct.edge_def* %0, !dbg !6291
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @process_assert_insertions_for(%union.tree_node* %name, %struct.assert_locus_d* %loc) unnamed_addr #5 !dbg !6292 {
entry:
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !6296, metadata !DIExpression()), !dbg !6303
  call void @llvm.dbg.value(metadata %struct.assert_locus_d* %loc, metadata !6297, metadata !DIExpression()), !dbg !6303
  %0 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !6304
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !6304
  %1 = bitcast %struct.edge_def** %e to i8*, !dbg !6305
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !6305
  %expr = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc, i64 0, i32 5, !dbg !6306
  %2 = load %union.tree_node*, %union.tree_node** %expr, align 8, !dbg !6306
  %val = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc, i64 0, i32 4, !dbg !6308
  %3 = load %union.tree_node*, %union.tree_node** %val, align 8, !dbg !6308
  %cmp = icmp eq %union.tree_node* %2, %3, !dbg !6309
  br i1 %cmp, label %cleanup, label %if.end, !dbg !6310

if.end:                                           ; preds = %entry
  %comp_code = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc, i64 0, i32 3, !dbg !6311
  %4 = load i32, i32* %comp_code, align 8, !dbg !6311
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6311
  %call = tail call %union.tree_node* @build2_stat(i32 %4, %union.tree_node* %5, %union.tree_node* %2, %union.tree_node* %3) #6, !dbg !6311
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6299, metadata !DIExpression()), !dbg !6303
  %call3 = tail call fastcc %union.gimple_statement_d* @build_assert_expr_for(%union.tree_node* %call, %union.tree_node* %name) #7, !dbg !6312
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call3, metadata !6300, metadata !DIExpression()), !dbg !6303
  %e4 = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc, i64 0, i32 1, !dbg !6313
  %6 = load %struct.edge_def*, %struct.edge_def** %e4, align 8, !dbg !6313
  %tobool = icmp eq %struct.edge_def* %6, null, !dbg !6315
  br i1 %tobool, label %if.end7, label %if.then5, !dbg !6316

if.then5:                                         ; preds = %if.end
  tail call void @gsi_insert_on_edge(%struct.edge_def* nonnull %6, %union.gimple_statement_d* %call3) #6, !dbg !6317
  br label %cleanup, !dbg !6319

if.end7:                                          ; preds = %if.end
  %si = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc, i64 0, i32 2, !dbg !6320
  %call8 = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !6321
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call8, metadata !6298, metadata !DIExpression()), !dbg !6303
  %call9 = tail call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %call8) #6, !dbg !6322
  %tobool10 = icmp eq i8 %call9, 0, !dbg !6322
  br i1 %tobool10, label %if.then11, label %if.end13, !dbg !6324

if.then11:                                        ; preds = %if.end7
  tail call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %si, %union.gimple_statement_d* %call3, i32 1) #6, !dbg !6325
  br label %cleanup, !dbg !6327

if.end13:                                         ; preds = %if.end7
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !6328
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8, !dbg !6328
  %bb = getelementptr inbounds %struct.assert_locus_d, %struct.assert_locus_d* %loc, i64 0, i32 0, !dbg !6328
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !6328
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i64 0, i32 1, !dbg !6328
  %call14 = tail call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** nonnull %succs) #7, !dbg !6328
  %9 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 0, !dbg !6328
  %10 = extractvalue { i32, %struct.VEC_edge_gc** } %call14, 0, !dbg !6328
  store i32 %10, i32* %9, align 8, !dbg !6328
  %11 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 1, !dbg !6328
  %12 = extractvalue { i32, %struct.VEC_edge_gc** } %call14, 1, !dbg !6328
  store %struct.VEC_edge_gc** %12, %struct.VEC_edge_gc*** %11, align 8, !dbg !6328
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %7, i64 16, i1 false), !dbg !6328
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8, !dbg !6328
  %13 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !6330
  %14 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !6330
  br label %for.cond, !dbg !6328

for.cond:                                         ; preds = %for.inc, %if.end13
  %15 = load i32, i32* %13, align 8, !dbg !6332
  %16 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %14, align 8, !dbg !6332
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !6302, metadata !DIExpression(DW_OP_deref)), !dbg !6303
  %call15 = call fastcc zeroext i8 @ei_cond(i32 %15, %struct.VEC_edge_gc** %16, %struct.edge_def** nonnull %e) #7, !dbg !6332
  %tobool16 = icmp eq i8 %call15, 0, !dbg !6328
  br i1 %tobool16, label %for.end, label %for.body, !dbg !6328

for.body:                                         ; preds = %for.cond
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !6333
  call void @llvm.dbg.value(metadata %struct.edge_def* %17, metadata !6302, metadata !DIExpression()), !dbg !6303
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i64 0, i32 7, !dbg !6335
  %18 = load i32, i32* %flags, align 8, !dbg !6335
  %and = and i32 %18, 2, !dbg !6336
  %tobool17 = icmp eq i32 %and, 0, !dbg !6336
  br i1 %tobool17, label %if.then18, label %for.inc, !dbg !6337

if.then18:                                        ; preds = %for.body
  %.lcssa = phi %struct.edge_def* [ %17, %for.body ], !dbg !6333
  call void @llvm.dbg.value(metadata %struct.edge_def* %.lcssa, metadata !6302, metadata !DIExpression()), !dbg !6303
  call void @gsi_insert_on_edge(%struct.edge_def* %.lcssa, %union.gimple_statement_d* %call3) #6, !dbg !6338
  br label %cleanup, !dbg !6340

for.inc:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !6301, metadata !DIExpression(DW_OP_deref)), !dbg !6303
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !6332
  br label %for.cond, !dbg !6332, !llvm.loop !6341

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 4901, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6343
  br label %cleanup, !dbg !6344

cleanup:                                          ; preds = %entry, %for.end, %if.then18, %if.then11, %if.then5
  %retval.0 = phi i8 [ 1, %if.then5 ], [ 1, %if.then18 ], [ 0, %for.end ], [ 0, %if.then11 ], [ 0, %entry ], !dbg !6303
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !6345
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !6345
  ret i8 %retval.0, !dbg !6345
}

declare dso_local void @gsi_commit_edge_inserts() local_unnamed_addr #2

declare dso_local void @statistics_counter_event(%struct.function*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @build_assert_expr_for(%union.tree_node* %cond, %union.tree_node* %v) unnamed_addr #5 !dbg !6346 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !6350, metadata !DIExpression()), !dbg !6360
  call void @llvm.dbg.value(metadata %union.tree_node* %v, metadata !6351, metadata !DIExpression()), !dbg !6360
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %v, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6361
  %bf.load = load i64, i64* %0, align 8, !dbg !6361
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6361
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !6361
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !6361

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3748, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6361
  br label %cond.end, !dbg !6361

cond.end:                                         ; preds = %entry, %cond.true
  %call = tail call %union.tree_node* @duplicate_ssa_name(%union.tree_node* %v, %union.gimple_statement_d* null) #6, !dbg !6362
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6352, metadata !DIExpression()), !dbg !6360
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %cond, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6363
  %bf.load3 = load i64, i64* %1, align 8, !dbg !6363
  %bf.cast5 = and i64 %bf.load3, 65535, !dbg !6363
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast5, !dbg !6363
  %2 = load i32, i32* %arrayidx, align 4, !dbg !6363
  %cmp6 = icmp eq i32 %2, 5, !dbg !6363
  br i1 %cmp6, label %if.then, label %if.else, !dbg !6364

if.then:                                          ; preds = %cond.end
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %v, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6365
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6365
  %call7 = tail call %union.tree_node* @build2_stat(i32 148, %union.tree_node* %3, %union.tree_node* %v, %union.tree_node* %cond) #6, !dbg !6365
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !6354, metadata !DIExpression()), !dbg !6366
  %call8 = tail call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call, %union.tree_node* %call7) #6, !dbg !6367
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call8, metadata !6353, metadata !DIExpression()), !dbg !6360
  br label %if.end37, !dbg !6368

if.else:                                          ; preds = %cond.end
  %cmp13 = icmp eq i64 %bf.cast5, 96, !dbg !6369
  br i1 %cmp13, label %if.then14, label %if.else22, !dbg !6370

if.then14:                                        ; preds = %if.else
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %cond, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6371
  %4 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6371
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !6357, metadata !DIExpression()), !dbg !6372
  %cmp16 = icmp eq %union.tree_node* %4, %v, !dbg !6373
  br i1 %cmp16, label %cond.end19, label %cond.true17, !dbg !6373

cond.true17:                                      ; preds = %if.then14
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3760, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6373
  br label %cond.end19, !dbg !6373

cond.end19:                                       ; preds = %if.then14, %cond.true17
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !6374
  %call21 = tail call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call, %union.tree_node* %5) #6, !dbg !6374
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call21, metadata !6353, metadata !DIExpression()), !dbg !6360
  br label %if.end37, !dbg !6375

if.else22:                                        ; preds = %if.else
  %cmp27 = icmp eq i64 %bf.cast5, 141, !dbg !6376
  br i1 %cmp27, label %if.then28, label %if.else35, !dbg !6378

if.then28:                                        ; preds = %if.else22
  %cmp29 = icmp eq %union.tree_node* %v, %cond, !dbg !6379
  br i1 %cmp29, label %cond.end32, label %cond.true30, !dbg !6379

cond.true30:                                      ; preds = %if.then28
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3766, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6379
  br label %cond.end32, !dbg !6379

cond.end32:                                       ; preds = %if.then28, %cond.true30
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !6381
  %call34 = tail call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call, %union.tree_node* %6) #6, !dbg !6381
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call34, metadata !6353, metadata !DIExpression()), !dbg !6360
  br label %if.end37, !dbg !6382

if.else35:                                        ; preds = %if.else22
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3770, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6383
  br label %if.end37

if.end37:                                         ; preds = %cond.end19, %if.else35, %cond.end32, %if.then
  %assertion.2 = phi %union.gimple_statement_d* [ %call8, %if.then ], [ %call21, %cond.end19 ], [ %call34, %cond.end32 ], [ undef, %if.else35 ], !dbg !6384
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %assertion.2, metadata !6353, metadata !DIExpression()), !dbg !6360
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !6385
  %7 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !6385
  store %union.gimple_statement_d* %assertion.2, %union.gimple_statement_d** %7, align 8, !dbg !6386
  tail call void @register_new_name_mapping(%union.tree_node* %call, %union.tree_node* %v) #6, !dbg !6387
  ret %union.gimple_statement_d* %assertion.2, !dbg !6388
}

declare dso_local void @gsi_insert_on_edge(%struct.edge_def*, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @duplicate_ssa_name(%union.tree_node*, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local void @register_new_name_mapping(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) local_unnamed_addr #2

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @stmt_interesting_for_vrp(%union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !6389 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6391, metadata !DIExpression()), !dbg !6396
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !6397
  %cmp = icmp eq i32 %call, 16, !dbg !6398
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !6399

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %stmt) #7, !dbg !6400
  %call2 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %call1) #6, !dbg !6401
  %tobool = icmp eq i8 %call2, 0, !dbg !6401
  br i1 %tobool, label %if.else, label %land.lhs.true3, !dbg !6402

land.lhs.true3:                                   ; preds = %land.lhs.true
  %call4 = tail call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %stmt) #7, !dbg !6403
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6403
  %0 = bitcast %union.tree_node** %type to i64**, !dbg !6403
  %1 = load i64*, i64** %0, align 8, !dbg !6403
  %bf.load = load i64, i64* %1, align 8, !dbg !6403
  %bf.cast7 = and i64 %bf.load, 65535, !dbg !6403
  %cmp5 = icmp eq i64 %bf.cast7, 6, !dbg !6403
  br i1 %cmp5, label %return, label %lor.lhs.false, !dbg !6403

lor.lhs.false:                                    ; preds = %land.lhs.true3
  %call7 = tail call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %stmt) #7, !dbg !6403
  %type9 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6403
  %2 = bitcast %union.tree_node** %type9 to i64**, !dbg !6403
  %3 = load i64*, i64** %2, align 8, !dbg !6403
  %bf.load11 = load i64, i64* %3, align 8, !dbg !6403
  %bf.cast138 = and i64 %bf.load11, 65535, !dbg !6403
  %cmp14 = icmp eq i64 %bf.cast138, 7, !dbg !6403
  br i1 %cmp14, label %return, label %lor.lhs.false16, !dbg !6403

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %call17 = tail call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %stmt) #7, !dbg !6403
  %type19 = getelementptr inbounds %union.tree_node, %union.tree_node* %call17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6403
  %4 = bitcast %union.tree_node** %type19 to i64**, !dbg !6403
  %5 = load i64*, i64** %4, align 8, !dbg !6403
  %bf.load21 = load i64, i64* %5, align 8, !dbg !6403
  %bf.cast239 = and i64 %bf.load21, 65535, !dbg !6403
  %cmp24 = icmp eq i64 %bf.cast239, 8, !dbg !6403
  br i1 %cmp24, label %return, label %lor.lhs.false26, !dbg !6404

lor.lhs.false26:                                  ; preds = %lor.lhs.false16
  %call27 = tail call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %stmt) #7, !dbg !6405
  %type29 = getelementptr inbounds %union.tree_node, %union.tree_node* %call27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6405
  %6 = bitcast %union.tree_node** %type29 to i64**, !dbg !6405
  %7 = load i64*, i64** %6, align 8, !dbg !6405
  %bf.load31 = load i64, i64* %7, align 8, !dbg !6405
  %bf.cast3310 = and i64 %bf.load31, 65535, !dbg !6405
  %cmp34 = icmp eq i64 %bf.cast3310, 10, !dbg !6405
  br i1 %cmp34, label %return, label %lor.lhs.false36, !dbg !6405

lor.lhs.false36:                                  ; preds = %lor.lhs.false26
  %call37 = tail call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %stmt) #7, !dbg !6405
  %type39 = getelementptr inbounds %union.tree_node, %union.tree_node* %call37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6405
  %8 = bitcast %union.tree_node** %type39 to i64**, !dbg !6405
  %9 = load i64*, i64** %8, align 8, !dbg !6405
  %bf.load41 = load i64, i64* %9, align 8, !dbg !6405
  %bf.cast4311 = and i64 %bf.load41, 65535, !dbg !6405
  %cmp44 = icmp eq i64 %bf.cast4311, 12, !dbg !6405
  br i1 %cmp44, label %return, label %if.else, !dbg !6406

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false36, %entry
  %call46 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %stmt) #7, !dbg !6407
  %tobool48 = icmp eq i8 %call46, 0, !dbg !6407
  br i1 %tobool48, label %lor.lhs.false49, label %if.then53, !dbg !6408

lor.lhs.false49:                                  ; preds = %if.else
  %call50 = tail call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %stmt) #7, !dbg !6409
  %tobool52 = icmp eq i8 %call50, 0, !dbg !6409
  br i1 %tobool52, label %if.else124, label %if.then53, !dbg !6410

if.then53:                                        ; preds = %lor.lhs.false49, %if.else
  %call54 = tail call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %stmt) #6, !dbg !6411
  call void @llvm.dbg.value(metadata %union.tree_node* %call54, metadata !6392, metadata !DIExpression()), !dbg !6412
  %tobool55 = icmp eq %union.tree_node* %call54, null, !dbg !6413
  br i1 %tobool55, label %if.end, label %land.lhs.true56, !dbg !6415

land.lhs.true56:                                  ; preds = %if.then53
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6416
  %bf.load58 = load i64, i64* %10, align 8, !dbg !6416
  %bf.cast601 = and i64 %bf.load58, 65535, !dbg !6417
  %cmp61 = icmp eq i64 %bf.cast601, 141, !dbg !6417
  br i1 %cmp61, label %land.lhs.true63, label %if.end, !dbg !6418

land.lhs.true63:                                  ; preds = %land.lhs.true56
  %type65 = getelementptr inbounds %union.tree_node, %union.tree_node* %call54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6419
  %11 = bitcast %union.tree_node** %type65 to i64**, !dbg !6419
  %12 = load i64*, i64** %11, align 8, !dbg !6419
  %bf.load67 = load i64, i64* %12, align 8, !dbg !6419
  %bf.cast692 = and i64 %bf.load67, 65535, !dbg !6419
  %cmp70 = icmp eq i64 %bf.cast692, 6, !dbg !6419
  br i1 %cmp70, label %land.lhs.true108, label %lor.lhs.false72, !dbg !6419

lor.lhs.false72:                                  ; preds = %land.lhs.true63
  %cmp79 = icmp eq i64 %bf.cast692, 7, !dbg !6419
  br i1 %cmp79, label %land.lhs.true108, label %lor.lhs.false81, !dbg !6419

lor.lhs.false81:                                  ; preds = %lor.lhs.false72
  %cmp88 = icmp eq i64 %bf.cast692, 8, !dbg !6419
  br i1 %cmp88, label %land.lhs.true108, label %lor.lhs.false90, !dbg !6420

lor.lhs.false90:                                  ; preds = %lor.lhs.false81
  %cmp97 = icmp eq i64 %bf.cast692, 10, !dbg !6421
  br i1 %cmp97, label %land.lhs.true108, label %lor.lhs.false99, !dbg !6421

lor.lhs.false99:                                  ; preds = %lor.lhs.false90
  %cmp106 = icmp eq i64 %bf.cast692, 12, !dbg !6421
  br i1 %cmp106, label %land.lhs.true108, label %if.end, !dbg !6422

land.lhs.true108:                                 ; preds = %lor.lhs.false99, %lor.lhs.false90, %lor.lhs.false81, %lor.lhs.false72, %land.lhs.true63
  %call109 = tail call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %stmt) #7, !dbg !6423
  %tobool111 = icmp eq i8 %call109, 0, !dbg !6423
  br i1 %tobool111, label %lor.lhs.false120, label %land.lhs.true112, !dbg !6424

land.lhs.true112:                                 ; preds = %land.lhs.true108
  %call113 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %stmt) #7, !dbg !6425
  %cmp114 = icmp eq %union.tree_node* %call113, null, !dbg !6426
  br i1 %cmp114, label %lor.lhs.false120, label %land.lhs.true116, !dbg !6427

land.lhs.true116:                                 ; preds = %land.lhs.true112
  %call117 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %stmt) #7, !dbg !6428
  %locus = getelementptr inbounds %union.tree_node, %union.tree_node* %call117, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6428
  %13 = load i32, i32* %locus, align 8, !dbg !6428
  %cmp118 = icmp ult i32 %13, 2, !dbg !6428
  br i1 %cmp118, label %cleanup, label %lor.lhs.false120, !dbg !6429

lor.lhs.false120:                                 ; preds = %land.lhs.true112, %land.lhs.true108, %land.lhs.true116
  %call121 = tail call fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %stmt) #7, !dbg !6430
  %tobool122 = icmp eq %union.tree_node* %call121, null, !dbg !6430
  br i1 %tobool122, label %cleanup, label %if.end, !dbg !6431

if.end:                                           ; preds = %lor.lhs.false120, %if.then53, %lor.lhs.false99, %land.lhs.true56
  br label %cleanup, !dbg !6432

cleanup:                                          ; preds = %lor.lhs.false120, %land.lhs.true116, %if.end
  %cleanup.dest.slot.0 = phi i1 [ true, %if.end ], [ false, %lor.lhs.false120 ], [ false, %land.lhs.true116 ]
  br i1 %cleanup.dest.slot.0, label %if.end135, label %return

if.else124:                                       ; preds = %lor.lhs.false49
  %call125 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !6433
  %cmp126 = icmp eq i32 %call125, 1, !dbg !6435
  br i1 %cmp126, label %return, label %lor.lhs.false128, !dbg !6436

lor.lhs.false128:                                 ; preds = %if.else124
  %call129 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !6437
  %cmp130 = icmp eq i32 %call129, 5, !dbg !6438
  br i1 %cmp130, label %return, label %if.end135, !dbg !6439

if.end135:                                        ; preds = %cleanup, %lor.lhs.false128
  br label %return, !dbg !6440

return:                                           ; preds = %if.else124, %lor.lhs.false128, %cleanup, %land.lhs.true3, %lor.lhs.false, %lor.lhs.false16, %lor.lhs.false26, %lor.lhs.false36, %if.end135
  %retval.1 = phi i8 [ 1, %cleanup ], [ 0, %if.end135 ], [ 1, %lor.lhs.false36 ], [ 1, %lor.lhs.false26 ], [ 1, %lor.lhs.false16 ], [ 1, %lor.lhs.false ], [ 1, %land.lhs.true3 ], [ 1, %lor.lhs.false128 ], [ 1, %if.else124 ], !dbg !6396
  ret i8 %retval.1, !dbg !6441
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6442 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6444, metadata !DIExpression()), !dbg !6445
  %result = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !6446
  ret %union.tree_node** %result, !dbg !6447
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @prop_set_simulate_again(%union.gimple_statement_d* %s, i8 zeroext %visit_p) unnamed_addr #0 !dbg !6448 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !6452, metadata !DIExpression()), !dbg !6454
  call void @llvm.dbg.value(metadata i8 %visit_p, metadata !6453, metadata !DIExpression()), !dbg !6454
  tail call fastcc void @gimple_set_visited(%union.gimple_statement_d* %s, i8 zeroext %visit_p) #7, !dbg !6455
  ret void, !dbg !6456
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6457 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6459, metadata !DIExpression()), !dbg !6460
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !6461
  %cmp = icmp eq i32 %call, 8, !dbg !6462
  %conv1 = zext i1 %cmp to i8, !dbg !6461
  ret i8 %conv1, !dbg !6463
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6464 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6466, metadata !DIExpression()), !dbg !6468
  %call = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #7, !dbg !6469
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6467, metadata !DIExpression()), !dbg !6468
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6470
  %bf.load = load i64, i64* %0, align 8, !dbg !6470
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6472
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !6472
  br i1 %cmp, label %if.then, label %cleanup, !dbg !6473

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6474
  %1 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6474
  br label %cleanup, !dbg !6475

cleanup:                                          ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %1, %if.then ], [ null, %entry ], !dbg !6468
  ret %union.tree_node* %retval.0, !dbg !6476
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_visited(%union.gimple_statement_d* %stmt, i8 zeroext %visited_p) unnamed_addr #0 !dbg !6477 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6479, metadata !DIExpression()), !dbg !6481
  call void @llvm.dbg.value(metadata i8 %visited_p, metadata !6480, metadata !DIExpression()), !dbg !6481
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !6482
  %bf.load = load i32, i32* %0, align 8, !dbg !6483
  %1 = and i8 %visited_p, 1, !dbg !6483
  %bf.value = zext i8 %1 to i32, !dbg !6483
  %bf.shl = shl nuw nsw i32 %bf.value, 9, !dbg !6483
  %bf.clear = and i32 %bf.load, -513, !dbg !6483
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !6483
  store i32 %bf.set, i32* %0, align 8, !dbg !6483
  ret void, !dbg !6484
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @vrp_visit_assignment_or_call(%union.gimple_statement_d* %stmt, %union.tree_node** %output_p) unnamed_addr #5 !dbg !6485 {
entry:
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  %new_vr = alloca %struct.value_range_d, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6489, metadata !DIExpression()), !dbg !6498
  call void @llvm.dbg.value(metadata %union.tree_node** %output_p, metadata !6490, metadata !DIExpression()), !dbg !6498
  %0 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %iter, i64 0, i32 0, !dbg !6499
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #8, !dbg !6499
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !6500
  call void @llvm.dbg.value(metadata i32 %call, metadata !6494, metadata !DIExpression()), !dbg !6498
  %call1 = tail call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %stmt) #6, !dbg !6501
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !6492, metadata !DIExpression()), !dbg !6498
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6502
  %bf.load = load i64, i64* %1, align 8, !dbg !6502
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6503
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !6503
  br i1 %cmp, label %land.lhs.true, label %if.end65, !dbg !6504

land.lhs.true:                                    ; preds = %entry
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6505
  %2 = bitcast %union.tree_node** %type to i64**, !dbg !6505
  %3 = load i64*, i64** %2, align 8, !dbg !6505
  %bf.load3 = load i64, i64* %3, align 8, !dbg !6505
  %bf.cast52 = and i64 %bf.load3, 65535, !dbg !6505
  %cmp6 = icmp eq i64 %bf.cast52, 6, !dbg !6505
  br i1 %cmp6, label %land.lhs.true22, label %lor.lhs.false, !dbg !6505

lor.lhs.false:                                    ; preds = %land.lhs.true
  %cmp13 = icmp eq i64 %bf.cast52, 7, !dbg !6505
  br i1 %cmp13, label %land.lhs.true22, label %lor.lhs.false14, !dbg !6505

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %cmp21 = icmp eq i64 %bf.cast52, 8, !dbg !6505
  br i1 %cmp21, label %land.lhs.true22, label %lor.lhs.false31, !dbg !6506

land.lhs.true22:                                  ; preds = %lor.lhs.false14, %lor.lhs.false, %land.lhs.true
  %minval = getelementptr inbounds i64, i64* %3, i64 13, !dbg !6507
  %4 = bitcast i64* %minval to %union.tree_node**, !dbg !6507
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !6507
  %tobool = icmp eq %union.tree_node* %5, null, !dbg !6507
  br i1 %tobool, label %lor.lhs.false31, label %land.lhs.true26, !dbg !6508

land.lhs.true26:                                  ; preds = %land.lhs.true22
  %maxval = getelementptr inbounds i64, i64* %3, i64 14, !dbg !6509
  %6 = bitcast i64* %maxval to %union.tree_node**, !dbg !6509
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !6509
  %tobool30 = icmp eq %union.tree_node* %7, null, !dbg !6509
  br i1 %tobool30, label %lor.lhs.false31, label %if.then, !dbg !6510

lor.lhs.false31:                                  ; preds = %land.lhs.true26, %land.lhs.true22, %lor.lhs.false14
  %cmp38 = icmp eq i64 %bf.cast52, 10, !dbg !6511
  br i1 %cmp38, label %if.then, label %lor.lhs.false39, !dbg !6511

lor.lhs.false39:                                  ; preds = %lor.lhs.false31
  %cmp46 = icmp eq i64 %bf.cast52, 12, !dbg !6511
  br i1 %cmp46, label %if.then, label %if.end65, !dbg !6512

if.then:                                          ; preds = %land.lhs.true26, %lor.lhs.false39, %lor.lhs.false31
  %8 = bitcast %struct.value_range_d* %new_vr to i8*, !dbg !6513
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #8, !dbg !6513
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 32, i1 false), !dbg !6514
  %cmp47 = icmp eq i32 %call, 8, !dbg !6515
  br i1 %cmp47, label %if.then48, label %if.else, !dbg !6517

if.then48:                                        ; preds = %if.then
  call void @llvm.dbg.value(metadata %struct.value_range_d* %new_vr, metadata !6495, metadata !DIExpression(DW_OP_deref)), !dbg !6518
  call fastcc void @extract_range_basic(%struct.value_range_d* nonnull %new_vr, %union.gimple_statement_d* %stmt) #7, !dbg !6519
  br label %if.end, !dbg !6519

if.else:                                          ; preds = %if.then
  call void @llvm.dbg.value(metadata %struct.value_range_d* %new_vr, metadata !6495, metadata !DIExpression(DW_OP_deref)), !dbg !6518
  call fastcc void @extract_range_from_assignment(%struct.value_range_d* nonnull %new_vr, %union.gimple_statement_d* %stmt) #7, !dbg !6520
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then48
  call void @llvm.dbg.value(metadata %struct.value_range_d* %new_vr, metadata !6495, metadata !DIExpression(DW_OP_deref)), !dbg !6518
  %call49 = call fastcc zeroext i8 @update_value_range(%union.tree_node* %call1, %struct.value_range_d* nonnull %new_vr) #7, !dbg !6521
  %tobool50 = icmp eq i8 %call49, 0, !dbg !6521
  br i1 %tobool50, label %cleanup, label %if.then51, !dbg !6523

if.then51:                                        ; preds = %if.end
  store %union.tree_node* %call1, %union.tree_node** %output_p, align 8, !dbg !6524
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6526
  %tobool52 = icmp eq %struct._IO_FILE* %9, null, !dbg !6526
  br i1 %tobool52, label %if.end59, label %land.lhs.true53, !dbg !6528

land.lhs.true53:                                  ; preds = %if.then51
  %10 = load i32, i32* @dump_flags, align 4, !dbg !6529
  %and = and i32 %10, 8, !dbg !6530
  %tobool54 = icmp eq i32 %and, 0, !dbg !6530
  br i1 %tobool54, label %if.end59, label %if.then55, !dbg !6531

if.then55:                                        ; preds = %land.lhs.true53
  %call56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %9, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.38, i64 0, i64 0)) #6, !dbg !6532
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6534
  call void @print_generic_expr(%struct._IO_FILE* %11, %union.tree_node* %call1, i32 0) #6, !dbg !6535
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6536
  %call57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0)) #6, !dbg !6537
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6538
  call void @llvm.dbg.value(metadata %struct.value_range_d* %new_vr, metadata !6495, metadata !DIExpression(DW_OP_deref)), !dbg !6518
  call void @dump_value_range(%struct._IO_FILE* %13, %struct.value_range_d* nonnull %new_vr) #7, !dbg !6539
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6540
  %call58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24, i64 0, i64 0)) #6, !dbg !6541
  br label %if.end59, !dbg !6542

if.end59:                                         ; preds = %land.lhs.true53, %if.then51, %if.then55
  %type60 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i64 0, i32 0, !dbg !6543
  %15 = load i32, i32* %type60, align 8, !dbg !6543
  %cmp61 = icmp eq i32 %15, 3, !dbg !6545
  %. = select i1 %cmp61, i32 2, i32 1, !dbg !6546
  br label %cleanup, !dbg !6546

cleanup:                                          ; preds = %if.end, %if.end59
  %retval.0 = phi i32 [ %., %if.end59 ], [ 0, %if.end ], !dbg !6518
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #8, !dbg !6547
  br label %cleanup71

if.end65:                                         ; preds = %lor.lhs.false39, %entry
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6493, metadata !DIExpression(DW_OP_deref)), !dbg !6498
  %call66 = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %iter, %union.gimple_statement_d* %stmt, i32 2) #7, !dbg !6548
  call void @llvm.dbg.value(metadata %union.tree_node* %call66, metadata !6491, metadata !DIExpression()), !dbg !6498
  br label %for.cond, !dbg !6548

for.cond:                                         ; preds = %for.body, %if.end65
  %def.0 = phi %union.tree_node* [ %call66, %if.end65 ], [ %call70, %for.body ], !dbg !6550
  call void @llvm.dbg.value(metadata %union.tree_node* %def.0, metadata !6491, metadata !DIExpression()), !dbg !6498
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6493, metadata !DIExpression(DW_OP_deref)), !dbg !6498
  %call67 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !6551
  %tobool68 = icmp eq i8 %call67, 0, !dbg !6551
  br i1 %tobool68, label %for.body, label %cleanup71.loopexit, !dbg !6548

for.body:                                         ; preds = %for.cond
  %call69 = call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %def.0) #7, !dbg !6553
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %call69) #7, !dbg !6554
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6493, metadata !DIExpression(DW_OP_deref)), !dbg !6498
  %call70 = call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !6551
  call void @llvm.dbg.value(metadata %union.tree_node* %call70, metadata !6491, metadata !DIExpression()), !dbg !6498
  br label %for.cond, !dbg !6551, !llvm.loop !6555

cleanup71.loopexit:                               ; preds = %for.cond
  br label %cleanup71, !dbg !6557

cleanup71:                                        ; preds = %cleanup71.loopexit, %cleanup
  %retval.1 = phi i32 [ %retval.0, %cleanup ], [ 2, %cleanup71.loopexit ], !dbg !6498
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #8, !dbg !6557
  ret i32 %retval.1, !dbg !6557
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @vrp_visit_cond_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p) unnamed_addr #5 !dbg !6558 {
entry:
  %sop = alloca i8, align 1
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6562, metadata !DIExpression()), !dbg !6570
  call void @llvm.dbg.value(metadata %struct.edge_def** %taken_edge_p, metadata !6563, metadata !DIExpression()), !dbg !6570
  call void @llvm.dbg.value(metadata i8* %sop, metadata !6565, metadata !DIExpression(DW_OP_deref)), !dbg !6570
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !6571
  store %struct.edge_def* null, %struct.edge_def** %taken_edge_p, align 8, !dbg !6572
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6573
  %tobool = icmp eq %struct._IO_FILE* %0, null, !dbg !6573
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !6574

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !6575
  %and = and i32 %1, 8, !dbg !6576
  %tobool1 = icmp eq i32 %and, 0, !dbg !6576
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6577

if.then:                                          ; preds = %land.lhs.true
  %2 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %i, i64 0, i32 0, !dbg !6578
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %2) #8, !dbg !6578
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.39, i64 0, i64 0)) #6, !dbg !6579
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6580
  tail call void @print_gimple_stmt(%struct._IO_FILE* %3, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !6581
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6582
  %call2 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.40, i64 0, i64 0)) #6, !dbg !6583
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !6569, metadata !DIExpression(DW_OP_deref)), !dbg !6584
  %call3 = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %i, %union.gimple_statement_d* %stmt, i32 1) #7, !dbg !6585
  call void @llvm.dbg.value(metadata %union.tree_node* %call3, metadata !6566, metadata !DIExpression()), !dbg !6584
  br label %for.cond, !dbg !6585

for.cond:                                         ; preds = %for.body, %if.then
  %use.0 = phi %union.tree_node* [ %call3, %if.then ], [ %call8, %for.body ], !dbg !6587
  call void @llvm.dbg.value(metadata %union.tree_node* %use.0, metadata !6566, metadata !DIExpression()), !dbg !6584
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !6569, metadata !DIExpression(DW_OP_deref)), !dbg !6584
  %call4 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %i) #7, !dbg !6588
  %tobool5 = icmp eq i8 %call4, 0, !dbg !6588
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6584
  br i1 %tobool5, label %for.body, label %for.end, !dbg !6585

for.body:                                         ; preds = %for.cond
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !6590
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6592
  call void @print_generic_expr(%struct._IO_FILE* %6, %union.tree_node* %use.0, i32 0) #6, !dbg !6593
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6594
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0)) #6, !dbg !6595
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6596
  %9 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !6597
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %use.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6598
  %10 = bitcast %union.tree_node** %version to i32*, !dbg !6598
  %11 = load i32, i32* %10, align 8, !dbg !6598
  %idxprom = zext i32 %11 to i64, !dbg !6597
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %9, i64 %idxprom, !dbg !6597
  %12 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !6597
  call void @dump_value_range(%struct._IO_FILE* %8, %struct.value_range_d* %12) #7, !dbg !6599
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !6569, metadata !DIExpression(DW_OP_deref)), !dbg !6584
  %call8 = call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* nonnull %i) #7, !dbg !6588
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !6566, metadata !DIExpression()), !dbg !6584
  br label %for.cond, !dbg !6588, !llvm.loop !6600

for.end:                                          ; preds = %for.cond
  %.lcssa = phi %struct._IO_FILE* [ %5, %for.cond ], !dbg !6584
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.lcssa, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !6602
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %2) #8, !dbg !6603
  br label %if.end, !dbg !6604

if.end:                                           ; preds = %land.lhs.true, %entry, %for.end
  call void @llvm.dbg.value(metadata i8 0, metadata !6565, metadata !DIExpression()), !dbg !6570
  store i8 0, i8* %sop, align 1, !dbg !6605
  %call10 = call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %stmt) #7, !dbg !6606
  %call11 = call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !6607
  %call12 = call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %stmt) #7, !dbg !6608
  call void @llvm.dbg.value(metadata i8* %sop, metadata !6565, metadata !DIExpression(DW_OP_deref)), !dbg !6570
  %call13 = call fastcc %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops(i32 %call10, %union.tree_node* %call11, %union.tree_node* %call12, i8 zeroext 0, i8* nonnull %sop, i8* null) #7, !dbg !6609
  call void @llvm.dbg.value(metadata %union.tree_node* %call13, metadata !6564, metadata !DIExpression()), !dbg !6570
  %tobool14 = icmp eq %union.tree_node* %call13, null, !dbg !6610
  br i1 %tobool14, label %if.end28, label %if.then15, !dbg !6612

if.then15:                                        ; preds = %if.end
  %13 = load i8, i8* %sop, align 1, !dbg !6613
  call void @llvm.dbg.value(metadata i8 %13, metadata !6565, metadata !DIExpression()), !dbg !6570
  %tobool16 = icmp eq i8 %13, 0, !dbg !6613
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !6616

if.then17:                                        ; preds = %if.then15
  %call18 = call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #7, !dbg !6617
  %call19 = call %struct.edge_def* @find_taken_edge(%struct.basic_block_def* %call18, %union.tree_node* nonnull %call13) #6, !dbg !6618
  store %struct.edge_def* %call19, %struct.edge_def** %taken_edge_p, align 8, !dbg !6619
  br label %if.end28, !dbg !6620

if.else:                                          ; preds = %if.then15
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6621
  %tobool20 = icmp eq %struct._IO_FILE* %14, null, !dbg !6621
  br i1 %tobool20, label %if.end28, label %land.lhs.true21, !dbg !6624

land.lhs.true21:                                  ; preds = %if.else
  %15 = load i32, i32* @dump_flags, align 4, !dbg !6625
  %and22 = and i32 %15, 8, !dbg !6626
  %tobool23 = icmp eq i32 %and22, 0, !dbg !6626
  br i1 %tobool23, label %if.end28, label %if.then24, !dbg !6627

if.then24:                                        ; preds = %land.lhs.true21
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %14, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.41, i64 0, i64 0)) #6, !dbg !6628
  br label %if.end28, !dbg !6628

if.end28:                                         ; preds = %land.lhs.true21, %if.else, %if.end, %if.then17, %if.then24
  %val.1 = phi %union.tree_node* [ null, %if.end ], [ %call13, %if.then17 ], [ null, %if.then24 ], [ null, %land.lhs.true21 ], [ null, %if.else ], !dbg !6570
  call void @llvm.dbg.value(metadata %union.tree_node* %val.1, metadata !6564, metadata !DIExpression()), !dbg !6570
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6629
  %tobool29 = icmp eq %struct._IO_FILE* %16, null, !dbg !6629
  br i1 %tobool29, label %if.end39, label %land.lhs.true30, !dbg !6631

land.lhs.true30:                                  ; preds = %if.end28
  %17 = load i32, i32* @dump_flags, align 4, !dbg !6632
  %and31 = and i32 %17, 8, !dbg !6633
  %tobool32 = icmp eq i32 %and31, 0, !dbg !6633
  br i1 %tobool32, label %if.end39, label %if.then33, !dbg !6634

if.then33:                                        ; preds = %land.lhs.true30
  %call34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.42, i64 0, i64 0)) #6, !dbg !6635
  %cmp = icmp eq %union.tree_node* %val.1, null, !dbg !6637
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6639
  br i1 %cmp, label %if.then35, label %if.else37, !dbg !6640

if.then35:                                        ; preds = %if.then33
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.43, i64 0, i64 0)) #6, !dbg !6641
  br label %if.end39, !dbg !6641

if.else37:                                        ; preds = %if.then33
  call void @print_generic_stmt(%struct._IO_FILE* %18, %union.tree_node* nonnull %val.1, i32 0) #6, !dbg !6642
  br label %if.end39

if.end39:                                         ; preds = %land.lhs.true30, %if.end28, %if.then35, %if.else37
  %19 = load %struct.edge_def*, %struct.edge_def** %taken_edge_p, align 8, !dbg !6643
  %tobool40 = icmp eq %struct.edge_def* %19, null, !dbg !6644
  %cond = select i1 %tobool40, i32 2, i32 1, !dbg !6644
  call void @llvm.dbg.value(metadata i8* %sop, metadata !6565, metadata !DIExpression(DW_OP_deref)), !dbg !6570
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !6645
  ret i32 %cond, !dbg !6646
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @vrp_visit_switch_stmt(%union.gimple_statement_d* %stmt, %struct.edge_def** %taken_edge_p) unnamed_addr #5 !dbg !6647 {
entry:
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6649, metadata !DIExpression()), !dbg !6657
  call void @llvm.dbg.value(metadata %struct.edge_def** %taken_edge_p, metadata !6650, metadata !DIExpression()), !dbg !6657
  %0 = bitcast i64* %i to i8*, !dbg !6658
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !6658
  call void @llvm.dbg.value(metadata i64 0, metadata !6654, metadata !DIExpression()), !dbg !6657
  store i64 0, i64* %i, align 8, !dbg !6659
  %1 = bitcast i64* %j to i8*, !dbg !6658
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !6658
  call void @llvm.dbg.value(metadata i64 0, metadata !6655, metadata !DIExpression()), !dbg !6657
  store i64 0, i64* %j, align 8, !dbg !6660
  store %struct.edge_def* null, %struct.edge_def** %taken_edge_p, align 8, !dbg !6661
  %call = tail call fastcc %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %stmt) #7, !dbg !6662
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6651, metadata !DIExpression()), !dbg !6657
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6663
  %bf.load = load i64, i64* %2, align 8, !dbg !6663
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6665
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !6665
  br i1 %cmp, label %if.end, label %cleanup, !dbg !6666

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call) #7, !dbg !6667
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call1, metadata !6653, metadata !DIExpression()), !dbg !6657
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6668
  %tobool = icmp eq %struct._IO_FILE* %3, null, !dbg !6668
  br i1 %tobool, label %if.end7, label %land.lhs.true, !dbg !6670

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32, i32* @dump_flags, align 4, !dbg !6671
  %and = and i32 %4, 8, !dbg !6672
  %tobool2 = icmp eq i32 %and, 0, !dbg !6672
  br i1 %tobool2, label %if.end7, label %if.then3, !dbg !6673

if.then3:                                         ; preds = %land.lhs.true
  %call4 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %3, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.44, i64 0, i64 0)) #6, !dbg !6674
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6676
  tail call void @print_generic_expr(%struct._IO_FILE* %5, %union.tree_node* %call, i32 0) #6, !dbg !6677
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6678
  %call5 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.45, i64 0, i64 0)) #6, !dbg !6679
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6680
  tail call void @dump_value_range(%struct._IO_FILE* %7, %struct.value_range_d* %call1) #7, !dbg !6681
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6682
  %call6 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !6683
  br label %if.end7, !dbg !6684

if.end7:                                          ; preds = %land.lhs.true, %if.end, %if.then3
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call1, i64 0, i32 0, !dbg !6685
  %9 = load i32, i32* %type, align 8, !dbg !6685
  %cmp8 = icmp eq i32 %9, 1, !dbg !6687
  br i1 %cmp8, label %lor.lhs.false, label %cleanup, !dbg !6688

lor.lhs.false:                                    ; preds = %if.end7
  %call9 = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %call1) #7, !dbg !6689
  %tobool10 = icmp eq i8 %call9, 0, !dbg !6689
  br i1 %tobool10, label %if.end12, label %cleanup, !dbg !6690

if.end12:                                         ; preds = %lor.lhs.false
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call1, i64 0, i32 1, !dbg !6691
  %10 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !6691
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call1, i64 0, i32 2, !dbg !6692
  %11 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !6692
  call void @llvm.dbg.value(metadata i64* %i, metadata !6654, metadata !DIExpression(DW_OP_deref)), !dbg !6657
  call void @llvm.dbg.value(metadata i64* %j, metadata !6655, metadata !DIExpression(DW_OP_deref)), !dbg !6657
  %call13 = call fastcc zeroext i8 @find_case_label_range(%union.gimple_statement_d* %stmt, %union.tree_node* %10, %union.tree_node* %11, i64* nonnull %i, i64* nonnull %j) #7, !dbg !6693
  %tobool14 = icmp eq i8 %call13, 0, !dbg !6694
  call void @llvm.dbg.value(metadata i1 %tobool14, metadata !6656, metadata !DIExpression()), !dbg !6657
  %12 = load i64, i64* %j, align 8, !dbg !6695
  call void @llvm.dbg.value(metadata i64 %12, metadata !6655, metadata !DIExpression()), !dbg !6657
  %13 = load i64, i64* %i, align 8, !dbg !6697
  call void @llvm.dbg.value(metadata i64 %13, metadata !6654, metadata !DIExpression()), !dbg !6657
  %cmp16 = icmp ult i64 %12, %13, !dbg !6698
  br i1 %cmp16, label %if.then18, label %if.else, !dbg !6699

if.then18:                                        ; preds = %if.end12
  call void @llvm.dbg.value(metadata i1 %tobool14, metadata !6656, metadata !DIExpression()), !dbg !6657
  br i1 %tobool14, label %cond.end, label %cond.true, !dbg !6700

cond.true:                                        ; preds = %if.then18
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 6035, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6700
  br label %cond.end, !dbg !6700

cond.end:                                         ; preds = %if.then18, %cond.true
  %call20 = call fastcc %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %stmt) #7, !dbg !6702
  call void @llvm.dbg.value(metadata %union.tree_node* %call20, metadata !6652, metadata !DIExpression()), !dbg !6657
  br label %if.end63, !dbg !6703

if.else:                                          ; preds = %if.end12
  call void @llvm.dbg.value(metadata i64 %13, metadata !6654, metadata !DIExpression()), !dbg !6657
  %conv21 = trunc i64 %13 to i32, !dbg !6704
  %call22 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv21) #7, !dbg !6706
  call void @llvm.dbg.value(metadata %union.tree_node* %call22, metadata !6652, metadata !DIExpression()), !dbg !6657
  br i1 %tobool14, label %land.lhs.true25, label %if.end40, !dbg !6707

land.lhs.true25:                                  ; preds = %if.else
  %call26 = call fastcc %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %stmt) #7, !dbg !6709
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6709
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !6709
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6709
  %operands28 = getelementptr inbounds %union.tree_node, %union.tree_node* %call22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6710
  %arrayidx29 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands28, i64 2, !dbg !6710
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx29, align 8, !dbg !6710
  %cmp30 = icmp eq %union.tree_node* %14, %15, !dbg !6711
  br i1 %cmp30, label %if.end40, label %if.then32, !dbg !6712

if.then32:                                        ; preds = %land.lhs.true25
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6713
  %tobool33 = icmp eq %struct._IO_FILE* %16, null, !dbg !6713
  br i1 %tobool33, label %cleanup, label %land.lhs.true34, !dbg !6716

land.lhs.true34:                                  ; preds = %if.then32
  %17 = load i32, i32* @dump_flags, align 4, !dbg !6717
  %and35 = and i32 %17, 8, !dbg !6718
  %tobool36 = icmp eq i32 %and35, 0, !dbg !6718
  br i1 %tobool36, label %cleanup, label %if.then37, !dbg !6719

if.then37:                                        ; preds = %land.lhs.true34
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %16, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.46, i64 0, i64 0)) #6, !dbg !6720
  br label %cleanup, !dbg !6720

if.end40:                                         ; preds = %land.lhs.true25, %if.else
  %operands49 = getelementptr inbounds %union.tree_node, %union.tree_node* %call22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6721
  %arrayidx50 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands49, i64 2, !dbg !6721
  br label %for.cond, !dbg !6726

for.cond:                                         ; preds = %for.inc, %if.end40
  %storemerge.in = load i64, i64* %i, align 8, !dbg !6727
  %storemerge = add i64 %storemerge.in, 1, !dbg !6727
  store i64 %storemerge, i64* %i, align 8, !dbg !6727
  call void @llvm.dbg.value(metadata i64 %storemerge, metadata !6654, metadata !DIExpression()), !dbg !6657
  %18 = load i64, i64* %j, align 8, !dbg !6728
  call void @llvm.dbg.value(metadata i64 %18, metadata !6655, metadata !DIExpression()), !dbg !6657
  %cmp41 = icmp ugt i64 %storemerge, %18, !dbg !6729
  br i1 %cmp41, label %if.end63.loopexit, label %for.body, !dbg !6730

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 %storemerge, metadata !6654, metadata !DIExpression()), !dbg !6657
  %conv43 = trunc i64 %storemerge to i32, !dbg !6731
  %call44 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv43) #7, !dbg !6731
  %operands46 = getelementptr inbounds %union.tree_node, %union.tree_node* %call44, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6731
  %arrayidx47 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands46, i64 2, !dbg !6731
  %19 = load %union.tree_node*, %union.tree_node** %arrayidx47, align 8, !dbg !6731
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !6732
  %cmp51 = icmp eq %union.tree_node* %19, %20, !dbg !6733
  br i1 %cmp51, label %for.inc, label %if.then53, !dbg !6734

if.then53:                                        ; preds = %for.body
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6735
  %tobool54 = icmp eq %struct._IO_FILE* %21, null, !dbg !6735
  br i1 %tobool54, label %cleanup, label %land.lhs.true55, !dbg !6738

land.lhs.true55:                                  ; preds = %if.then53
  %22 = load i32, i32* @dump_flags, align 4, !dbg !6739
  %and56 = and i32 %22, 8, !dbg !6740
  %tobool57 = icmp eq i32 %and56, 0, !dbg !6740
  br i1 %tobool57, label %cleanup, label %if.then58, !dbg !6741

if.then58:                                        ; preds = %land.lhs.true55
  %call59 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %21, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.46, i64 0, i64 0)) #6, !dbg !6742
  br label %cleanup, !dbg !6742

for.inc:                                          ; preds = %for.body
  br label %for.cond, !dbg !6743, !llvm.loop !6744

if.end63.loopexit:                                ; preds = %for.cond
  br label %if.end63, !dbg !6746

if.end63:                                         ; preds = %if.end63.loopexit, %cond.end
  %val.0 = phi %union.tree_node* [ %call20, %cond.end ], [ %call22, %if.end63.loopexit ], !dbg !6747
  call void @llvm.dbg.value(metadata %union.tree_node* %val.0, metadata !6652, metadata !DIExpression()), !dbg !6657
  %call64 = call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #7, !dbg !6746
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6748
  %operands66 = getelementptr inbounds %union.tree_node, %union.tree_node* %val.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6748
  %arrayidx67 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands66, i64 2, !dbg !6748
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8, !dbg !6748
  %call68 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %23, %union.tree_node* %24) #6, !dbg !6748
  %call69 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %call64, %struct.basic_block_def* %call68) #6, !dbg !6749
  store %struct.edge_def* %call69, %struct.edge_def** %taken_edge_p, align 8, !dbg !6750
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6751
  %tobool70 = icmp eq %struct._IO_FILE* %25, null, !dbg !6751
  br i1 %tobool70, label %cleanup, label %land.lhs.true71, !dbg !6753

land.lhs.true71:                                  ; preds = %if.end63
  %26 = load i32, i32* @dump_flags, align 4, !dbg !6754
  %and72 = and i32 %26, 8, !dbg !6755
  %tobool73 = icmp eq i32 %and72, 0, !dbg !6755
  br i1 %tobool73, label %cleanup, label %if.then74, !dbg !6756

if.then74:                                        ; preds = %land.lhs.true71
  %call75 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %25, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.47, i64 0, i64 0)) #6, !dbg !6757
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6759
  %28 = load %union.tree_node*, %union.tree_node** %arrayidx67, align 8, !dbg !6760
  call void @print_generic_stmt(%struct._IO_FILE* %27, %union.tree_node* %28, i32 0) #6, !dbg !6761
  br label %cleanup, !dbg !6762

cleanup:                                          ; preds = %land.lhs.true34, %if.then32, %land.lhs.true55, %if.then53, %land.lhs.true71, %if.end63, %lor.lhs.false, %if.end7, %entry, %if.then74, %if.then58, %if.then37
  %retval.0 = phi i32 [ 2, %entry ], [ 2, %lor.lhs.false ], [ 2, %if.end7 ], [ 2, %if.then37 ], [ 2, %land.lhs.true34 ], [ 2, %if.then32 ], [ 2, %if.then58 ], [ 2, %land.lhs.true55 ], [ 2, %if.then53 ], [ 1, %if.then74 ], [ 1, %land.lhs.true71 ], [ 1, %if.end63 ], !dbg !6657
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !6763
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !6763
  ret i32 %retval.0, !dbg !6763
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: nounwind uwtable
define internal fastcc void @extract_range_basic(%struct.value_range_d* %vr, %union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !6764 {
entry:
  %sop = alloca i8, align 1
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !6768, metadata !DIExpression()), !dbg !6772
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6769, metadata !DIExpression()), !dbg !6772
  call void @llvm.dbg.value(metadata i8* %sop, metadata !6770, metadata !DIExpression(DW_OP_deref)), !dbg !6772
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !6773
  call void @llvm.dbg.value(metadata i8 0, metadata !6770, metadata !DIExpression()), !dbg !6772
  store i8 0, i8* %sop, align 1, !dbg !6774
  %call = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #7, !dbg !6775
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6771, metadata !DIExpression()), !dbg !6772
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6776
  %bf.load = load i64, i64* %0, align 8, !dbg !6776
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6776
  %cmp = icmp eq i64 %bf.cast1, 6, !dbg !6776
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !6776

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 7, !dbg !6776
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6, !dbg !6776

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %cmp11 = icmp eq i64 %bf.cast1, 8, !dbg !6776
  br i1 %cmp11, label %land.lhs.true, label %if.else, !dbg !6778

land.lhs.true:                                    ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  call void @llvm.dbg.value(metadata i8* %sop, metadata !6770, metadata !DIExpression(DW_OP_deref)), !dbg !6772
  %call12 = call fastcc zeroext i8 @gimple_stmt_nonnegative_warnv_p(%union.gimple_statement_d* %stmt, i8* nonnull %sop) #7, !dbg !6779
  %tobool = icmp eq i8 %call12, 0, !dbg !6779
  br i1 %tobool, label %if.else, label %if.then, !dbg !6780

if.then:                                          ; preds = %land.lhs.true
  %1 = load i8, i8* %sop, align 1, !dbg !6781
  call void @llvm.dbg.value(metadata i8 %1, metadata !6770, metadata !DIExpression()), !dbg !6772
  %tobool14 = icmp eq i8 %1, 0, !dbg !6781
  br i1 %tobool14, label %lor.rhs, label %lor.end, !dbg !6782

lor.rhs:                                          ; preds = %if.then
  %call15 = call fastcc zeroext i8 @stmt_overflow_infinity(%union.gimple_statement_d* %stmt) #7, !dbg !6783
  %tobool17 = icmp ne i8 %call15, 0, !dbg !6782
  %phitmp = zext i1 %tobool17 to i8, !dbg !6782
  br label %lor.end, !dbg !6782

lor.end:                                          ; preds = %if.then, %lor.rhs
  %2 = phi i8 [ 1, %if.then ], [ %phitmp, %lor.rhs ]
  call fastcc void @set_value_range_to_nonnegative(%struct.value_range_d* %vr, %union.tree_node* %call, i8 zeroext %2) #7, !dbg !6784
  br label %if.end26, !dbg !6784

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false6
  call void @llvm.dbg.value(metadata i8* %sop, metadata !6770, metadata !DIExpression(DW_OP_deref)), !dbg !6772
  %call19 = call fastcc zeroext i8 @vrp_stmt_computes_nonzero(%union.gimple_statement_d* %stmt, i8* nonnull %sop) #7, !dbg !6785
  %tobool21 = icmp eq i8 %call19, 0, !dbg !6785
  %3 = load i8, i8* %sop, align 1, !dbg !6787
  call void @llvm.dbg.value(metadata i8 %3, metadata !6770, metadata !DIExpression()), !dbg !6772
  %tobool23 = icmp ne i8 %3, 0, !dbg !6787
  %or.cond = or i1 %tobool21, %tobool23, !dbg !6788
  br i1 %or.cond, label %if.else25, label %if.then24, !dbg !6788

if.then24:                                        ; preds = %if.else
  call fastcc void @set_value_range_to_nonnull(%struct.value_range_d* %vr, %union.tree_node* %call) #7, !dbg !6789
  br label %if.end26, !dbg !6789

if.else25:                                        ; preds = %if.else
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !6790
  br label %if.end26

if.end26:                                         ; preds = %if.then24, %if.else25, %lor.end
  call void @llvm.dbg.value(metadata i8* %sop, metadata !6770, metadata !DIExpression(DW_OP_deref)), !dbg !6772
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !6791
  ret void, !dbg !6791
}

; Function Attrs: nounwind uwtable
define internal fastcc void @extract_range_from_assignment(%struct.value_range_d* %vr, %union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !6792 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !6794, metadata !DIExpression()), !dbg !6797
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6795, metadata !DIExpression()), !dbg !6797
  %call = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6798
  call void @llvm.dbg.value(metadata i32 %call, metadata !6796, metadata !DIExpression()), !dbg !6797
  switch i32 %call, label %if.else5 [
    i32 148, label %if.then
    i32 141, label %if.then3
  ], !dbg !6799

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6800
  tail call fastcc void @extract_range_from_assert(%struct.value_range_d* %vr, %union.tree_node* %call1) #7, !dbg !6802
  br label %if.end51, !dbg !6802

if.then3:                                         ; preds = %entry
  %call4 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6803
  tail call fastcc void @extract_range_from_ssa_name(%struct.value_range_d* %vr, %union.tree_node* %call4) #7, !dbg !6805
  br label %if.end51, !dbg !6805

if.else5:                                         ; preds = %entry
  %idxprom = sext i32 %call to i64, !dbg !6806
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6806
  %0 = load i32, i32* %arrayidx, align 4, !dbg !6806
  %cmp6 = icmp eq i32 %0, 7, !dbg !6808
  %1 = add i32 %call, -93, !dbg !6809
  %2 = icmp ult i32 %1, 3, !dbg !6809
  %3 = or i1 %2, %cmp6, !dbg !6809
  br i1 %3, label %if.then12, label %if.else17, !dbg !6809

if.then12:                                        ; preds = %if.else5
  %call13 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6810
  %call14 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #7, !dbg !6811
  %call15 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6812
  %call16 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #7, !dbg !6813
  tail call fastcc void @extract_range_from_binary_expr(%struct.value_range_d* %vr, i32 %call13, %union.tree_node* %call14, %union.tree_node* %call15, %union.tree_node* %call16) #7, !dbg !6814
  br label %if.end51, !dbg !6814

if.else17:                                        ; preds = %if.else5
  %cmp20 = icmp eq i32 %0, 6, !dbg !6815
  br i1 %cmp20, label %if.then21, label %if.else25, !dbg !6817

if.then21:                                        ; preds = %if.else17
  %call22 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6818
  %call23 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #7, !dbg !6819
  %call24 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6820
  tail call fastcc void @extract_range_from_unary_expr(%struct.value_range_d* %vr, i32 %call22, %union.tree_node* %call23, %union.tree_node* %call24) #7, !dbg !6821
  br label %if.end51, !dbg !6821

if.else25:                                        ; preds = %if.else17
  %cmp26 = icmp eq i32 %call, 56, !dbg !6822
  br i1 %cmp26, label %if.then27, label %if.else29, !dbg !6824

if.then27:                                        ; preds = %if.else25
  %call28 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6825
  tail call fastcc void @extract_range_from_cond_expr(%struct.value_range_d* %vr, %union.tree_node* %call28) #7, !dbg !6826
  br label %if.end51, !dbg !6826

if.else29:                                        ; preds = %if.else25
  %cmp32 = icmp eq i32 %0, 5, !dbg !6827
  br i1 %cmp32, label %if.then33, label %if.else38, !dbg !6829

if.then33:                                        ; preds = %if.else29
  %call34 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6830
  %call35 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #7, !dbg !6831
  %call36 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6832
  %call37 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #7, !dbg !6833
  tail call fastcc void @extract_range_from_comparison(%struct.value_range_d* %vr, i32 %call34, %union.tree_node* %call35, %union.tree_node* %call36, %union.tree_node* %call37) #7, !dbg !6834
  br label %if.end51, !dbg !6834

if.else38:                                        ; preds = %if.else29
  %call39 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #7, !dbg !6835
  %cmp40 = icmp eq i32 %call39, 3, !dbg !6837
  br i1 %cmp40, label %land.lhs.true, label %if.else45, !dbg !6838

land.lhs.true:                                    ; preds = %if.else38
  %call41 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6839
  %call42 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call41) #6, !dbg !6840
  %tobool = icmp eq i8 %call42, 0, !dbg !6840
  br i1 %tobool, label %if.else45, label %if.then43, !dbg !6841

if.then43:                                        ; preds = %land.lhs.true
  %call44 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6842
  tail call fastcc void @set_value_range_to_value(%struct.value_range_d* %vr, %union.tree_node* %call44, %struct.bitmap_head_def* null) #7, !dbg !6843
  br label %if.end51, !dbg !6843

if.else45:                                        ; preds = %land.lhs.true, %if.else38
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !6844
  br label %if.end51

if.end51:                                         ; preds = %if.then3, %if.then21, %if.then33, %if.else45, %if.then43, %if.then27, %if.then12, %if.then
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !6845
  %4 = load i32, i32* %type, align 8, !dbg !6845
  %cmp52 = icmp eq i32 %4, 3, !dbg !6847
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !6848

if.then54:                                        ; preds = %if.end51
  tail call fastcc void @extract_range_basic(%struct.value_range_d* %vr, %union.gimple_statement_d* %stmt) #7, !dbg !6849
  br label %if.end55, !dbg !6849

if.end55:                                         ; preds = %if.then54, %if.end51
  ret void, !dbg !6850
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @update_value_range(%union.tree_node* %var, %struct.value_range_d* %new_vr) unnamed_addr #0 !dbg !6851 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !6855, metadata !DIExpression()), !dbg !6859
  call void @llvm.dbg.value(metadata %struct.value_range_d* %new_vr, metadata !6856, metadata !DIExpression()), !dbg !6859
  %call = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %var) #7, !dbg !6860
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call, metadata !6857, metadata !DIExpression()), !dbg !6859
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i64 0, i32 0, !dbg !6861
  %0 = load i32, i32* %type, align 8, !dbg !6861
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i64 0, i32 0, !dbg !6862
  %1 = load i32, i32* %type1, align 8, !dbg !6862
  %cmp = icmp eq i32 %0, %1, !dbg !6863
  br i1 %cmp, label %lor.lhs.false, label %lor.end, !dbg !6864

lor.lhs.false:                                    ; preds = %entry
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i64 0, i32 1, !dbg !6865
  %2 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !6865
  %min2 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i64 0, i32 1, !dbg !6866
  %3 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !6866
  %call3 = tail call fastcc zeroext i8 @vrp_operand_equal_p(%union.tree_node* %2, %union.tree_node* %3) #7, !dbg !6867
  %tobool = icmp eq i8 %call3, 0, !dbg !6867
  br i1 %tobool, label %lor.end, label %lor.lhs.false4, !dbg !6868

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i64 0, i32 2, !dbg !6869
  %4 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !6869
  %max5 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i64 0, i32 2, !dbg !6870
  %5 = load %union.tree_node*, %union.tree_node** %max5, align 8, !dbg !6870
  %call6 = tail call fastcc zeroext i8 @vrp_operand_equal_p(%union.tree_node* %4, %union.tree_node* %5) #7, !dbg !6871
  %tobool7 = icmp eq i8 %call6, 0, !dbg !6871
  br i1 %tobool7, label %lor.end, label %lor.rhs, !dbg !6872

lor.rhs:                                          ; preds = %lor.lhs.false4
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i64 0, i32 3, !dbg !6873
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !6873
  %equiv8 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i64 0, i32 3, !dbg !6874
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv8, align 8, !dbg !6874
  %call9 = tail call fastcc zeroext i8 @vrp_bitmap_equal_p(%struct.bitmap_head_def* %6, %struct.bitmap_head_def* %7) #7, !dbg !6875
  %tobool10 = icmp eq i8 %call9, 0, !dbg !6876
  %phitmp = zext i1 %tobool10 to i8, !dbg !6872
  br label %lor.end, !dbg !6872

lor.end:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry, %lor.rhs
  %8 = phi i8 [ 1, %lor.lhs.false4 ], [ 1, %lor.lhs.false ], [ 1, %entry ], [ %phitmp, %lor.rhs ]
  call void @llvm.dbg.value(metadata i8 %8, metadata !6858, metadata !DIExpression()), !dbg !6859
  %tobool11 = icmp eq i8 %8, 0, !dbg !6877
  br i1 %tobool11, label %if.end, label %if.then, !dbg !6879

if.then:                                          ; preds = %lor.end
  %9 = load i32, i32* %type1, align 8, !dbg !6880
  %min13 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i64 0, i32 1, !dbg !6881
  %10 = load %union.tree_node*, %union.tree_node** %min13, align 8, !dbg !6881
  %max14 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i64 0, i32 2, !dbg !6882
  %11 = load %union.tree_node*, %union.tree_node** %max14, align 8, !dbg !6882
  %equiv15 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i64 0, i32 3, !dbg !6883
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv15, align 8, !dbg !6883
  tail call fastcc void @set_value_range(%struct.value_range_d* %call, i32 %9, %union.tree_node* %10, %union.tree_node* %11, %struct.bitmap_head_def* %12) #7, !dbg !6884
  br label %if.end, !dbg !6884

if.end:                                           ; preds = %lor.end, %if.then
  %equiv16 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %new_vr, i64 0, i32 3, !dbg !6885
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv16, align 8, !dbg !6885
  tail call void @bitmap_obstack_free(%struct.bitmap_head_def* %13) #6, !dbg !6885
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %equiv16, align 8, !dbg !6885
  ret i8 %8, !dbg !6886
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @gimple_stmt_nonnegative_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) unnamed_addr #5 !dbg !6887 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6891, metadata !DIExpression()), !dbg !6893
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !6892, metadata !DIExpression()), !dbg !6893
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !6894
  switch i32 %call, label %sw.default [
    i32 6, label %sw.bb
    i32 8, label %sw.bb2
  ], !dbg !6895

sw.bb:                                            ; preds = %entry
  %call1 = tail call fastcc zeroext i8 @gimple_assign_nonnegative_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #7, !dbg !6896
  br label %return, !dbg !6898

sw.bb2:                                           ; preds = %entry
  %call3 = tail call fastcc zeroext i8 @gimple_call_nonnegative_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #7, !dbg !6899
  br label %return, !dbg !6900

sw.default:                                       ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 894, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6901
  br label %return, !dbg !6902

return:                                           ; preds = %sw.default, %sw.bb2, %sw.bb
  %retval.0 = phi i8 [ 0, %sw.default ], [ %call3, %sw.bb2 ], [ %call1, %sw.bb ], !dbg !6893
  ret i8 %retval.0, !dbg !6903
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_value_range_to_nonnegative(%struct.value_range_d* %vr, %union.tree_node* %type, i8 zeroext %overflow_infinity) unnamed_addr #0 !dbg !6904 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !6908, metadata !DIExpression()), !dbg !6912
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !6909, metadata !DIExpression()), !dbg !6912
  call void @llvm.dbg.value(metadata i8 %overflow_infinity, metadata !6910, metadata !DIExpression()), !dbg !6912
  %tobool = icmp eq i8 %overflow_infinity, 0, !dbg !6913
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !6915

land.lhs.true:                                    ; preds = %entry
  %call = tail call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) #7, !dbg !6916
  %tobool1 = icmp eq i8 %call, 0, !dbg !6916
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6917

if.then:                                          ; preds = %land.lhs.true
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !6918
  br label %cleanup.cont, !dbg !6920

if.end:                                           ; preds = %land.lhs.true, %entry
  %call2 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type, i64 0) #6, !dbg !6921
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !6911, metadata !DIExpression()), !dbg !6912
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6922

cond.true:                                        ; preds = %if.end
  %call5 = tail call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !6923
  br label %cond.end, !dbg !6922

cond.false:                                       ; preds = %if.end
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6924
  %0 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !6924
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6924
  br label %cond.end, !dbg !6922

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call5, %cond.true ], [ %1, %cond.false ], !dbg !6922
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !6925
  %2 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !6925
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* %call2, %union.tree_node* %cond, %struct.bitmap_head_def* %2) #7, !dbg !6926
  br label %cleanup.cont, !dbg !6927

cleanup.cont:                                     ; preds = %if.then, %cond.end
  ret void, !dbg !6927
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @stmt_overflow_infinity(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !6928 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6930, metadata !DIExpression()), !dbg !6931
  %call = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %stmt) #7, !dbg !6932
  %tobool = icmp eq i8 %call, 0, !dbg !6932
  br i1 %tobool, label %return, label %land.lhs.true, !dbg !6934

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6935
  %call2 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call1) #7, !dbg !6936
  %cmp = icmp eq i32 %call2, 3, !dbg !6937
  br i1 %cmp, label %if.then, label %return, !dbg !6938

if.then:                                          ; preds = %land.lhs.true
  %call4 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6939
  %call5 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %call4) #7, !dbg !6940
  br label %return, !dbg !6941

return:                                           ; preds = %entry, %land.lhs.true, %if.then
  %retval.0 = phi i8 [ %call5, %if.then ], [ 0, %land.lhs.true ], [ 0, %entry ], !dbg !6931
  ret i8 %retval.0, !dbg !6942
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vrp_stmt_computes_nonzero(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) unnamed_addr #5 !dbg !6943 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6945, metadata !DIExpression()), !dbg !6954
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !6946, metadata !DIExpression()), !dbg !6954
  %call = tail call fastcc zeroext i8 @gimple_stmt_nonzero_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #7, !dbg !6955
  %tobool = icmp eq i8 %call, 0, !dbg !6955
  br i1 %tobool, label %if.end, label %return, !dbg !6957

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %stmt) #7, !dbg !6958
  %tobool2 = icmp eq i8 %call1, 0, !dbg !6958
  br i1 %tobool2, label %if.end38, label %land.lhs.true, !dbg !6959

land.lhs.true:                                    ; preds = %if.end
  %call3 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6960
  %cmp = icmp eq i32 %call3, 121, !dbg !6961
  br i1 %cmp, label %if.then5, label %if.end38, !dbg !6962

if.then5:                                         ; preds = %land.lhs.true
  %call6 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6963
  call void @llvm.dbg.value(metadata %union.tree_node* %call6, metadata !6947, metadata !DIExpression()), !dbg !6964
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6965
  %0 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6965
  %call7 = tail call %union.tree_node* @get_base_address(%union.tree_node* %0) #6, !dbg !6966
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !6950, metadata !DIExpression()), !dbg !6964
  %cmp8 = icmp eq %union.tree_node* %call7, null, !dbg !6967
  br i1 %cmp8, label %if.end33, label %land.lhs.true10, !dbg !6968

land.lhs.true10:                                  ; preds = %if.then5
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6969
  %bf.load = load i64, i64* %1, align 8, !dbg !6969
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6970
  %cmp12 = icmp eq i64 %bf.cast1, 47, !dbg !6970
  br i1 %cmp12, label %land.lhs.true14, label %if.end33, !dbg !6971

land.lhs.true14:                                  ; preds = %land.lhs.true10
  %operands16 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6972
  %2 = bitcast %union.tree_node** %operands16 to i64**, !dbg !6972
  %3 = load i64*, i64** %2, align 8, !dbg !6972
  %bf.load19 = load i64, i64* %3, align 8, !dbg !6972
  %bf.cast212 = and i64 %bf.load19, 65535, !dbg !6973
  %cmp22 = icmp eq i64 %bf.cast212, 141, !dbg !6973
  br i1 %cmp22, label %if.then24, label %if.end33, !dbg !6974

if.then24:                                        ; preds = %land.lhs.true14
  %4 = bitcast i64* %3 to %union.tree_node*, !dbg !6974
  %call28 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %4) #7, !dbg !6975
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call28, metadata !6951, metadata !DIExpression()), !dbg !6976
  %call29 = tail call fastcc zeroext i8 @range_is_nonnull(%struct.value_range_d* %call28) #7, !dbg !6977
  %tobool30 = icmp ne i8 %call29, 0, !dbg !6977
  %. = zext i1 %tobool30 to i32, !dbg !6979
  br i1 %tobool30, label %cleanup34, label %if.end33

if.end33:                                         ; preds = %if.then24, %if.then5, %land.lhs.true14, %land.lhs.true10
  br label %cleanup34, !dbg !6980

cleanup34:                                        ; preds = %if.then24, %if.end33
  %cleanup.dest.slot.1 = phi i32 [ %., %if.then24 ], [ 0, %if.end33 ]
  %switch = icmp eq i32 %cleanup.dest.slot.1, 1
  br i1 %switch, label %return, label %if.end38

if.end38:                                         ; preds = %cleanup34, %if.end, %land.lhs.true
  br label %return, !dbg !6981

return:                                           ; preds = %cleanup34, %entry, %if.end38
  %retval.3 = phi i8 [ 1, %cleanup34 ], [ 0, %if.end38 ], [ 1, %entry ], !dbg !6954
  ret i8 %retval.3, !dbg !6982
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @gimple_assign_nonnegative_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) unnamed_addr #5 !dbg !6983 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6985, metadata !DIExpression()), !dbg !6988
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !6986, metadata !DIExpression()), !dbg !6988
  %call = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6989
  call void @llvm.dbg.value(metadata i32 %call, metadata !6987, metadata !DIExpression()), !dbg !6988
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #7, !dbg !6990
  switch i32 %call1, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb6
    i32 3, label %sw.bb12
    i32 0, label %sw.bb15
  ], !dbg !6991

sw.bb:                                            ; preds = %entry
  %call2 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6992
  %call3 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #7, !dbg !6994
  %call4 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6995
  %call5 = tail call zeroext i8 @tree_unary_nonnegative_warnv_p(i32 %call2, %union.tree_node* %call3, %union.tree_node* %call4, i8* %strict_overflow_p) #6, !dbg !6996
  br label %cleanup, !dbg !6997

sw.bb6:                                           ; preds = %entry
  %call7 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6998
  %call8 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #7, !dbg !6999
  %call9 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !7000
  %call10 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #7, !dbg !7001
  %call11 = tail call zeroext i8 @tree_binary_nonnegative_warnv_p(i32 %call7, %union.tree_node* %call8, %union.tree_node* %call9, %union.tree_node* %call10, i8* %strict_overflow_p) #6, !dbg !7002
  br label %cleanup, !dbg !7003

sw.bb12:                                          ; preds = %entry
  %call13 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !7004
  %call14 = tail call zeroext i8 @tree_single_nonnegative_warnv_p(%union.tree_node* %call13, i8* %strict_overflow_p) #6, !dbg !7005
  br label %cleanup, !dbg !7006

sw.bb15:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 850, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7007
  br label %sw.default, !dbg !7007

sw.default:                                       ; preds = %entry, %sw.bb15
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 852, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7008
  br label %cleanup, !dbg !7009

cleanup:                                          ; preds = %sw.default, %sw.bb12, %sw.bb6, %sw.bb
  %retval.0 = phi i8 [ 0, %sw.default ], [ %call14, %sw.bb12 ], [ %call11, %sw.bb6 ], [ %call5, %sw.bb ], !dbg !6988
  ret i8 %retval.0, !dbg !7010
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @gimple_call_nonnegative_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) unnamed_addr #5 !dbg !7011 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7013, metadata !DIExpression()), !dbg !7017
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !7014, metadata !DIExpression()), !dbg !7017
  %call = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #7, !dbg !7018
  %cmp = icmp eq i32 %call, 0, !dbg !7019
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7018

cond.true:                                        ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %stmt, i32 0) #7, !dbg !7020
  br label %cond.end, !dbg !7018

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %union.tree_node* [ %call1, %cond.true ], [ null, %entry ], !dbg !7018
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !7015, metadata !DIExpression()), !dbg !7017
  %call2 = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #7, !dbg !7021
  %cmp3 = icmp ugt i32 %call2, 1, !dbg !7022
  br i1 %cmp3, label %cond.true4, label %cond.end7, !dbg !7021

cond.true4:                                       ; preds = %cond.end
  %call5 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %stmt, i32 1) #7, !dbg !7023
  br label %cond.end7, !dbg !7021

cond.end7:                                        ; preds = %cond.end, %cond.true4
  %cond8 = phi %union.tree_node* [ %call5, %cond.true4 ], [ null, %cond.end ], !dbg !7021
  call void @llvm.dbg.value(metadata %union.tree_node* %cond8, metadata !7016, metadata !DIExpression()), !dbg !7017
  %call9 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #7, !dbg !7024
  %call10 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %stmt) #7, !dbg !7025
  %call11 = tail call zeroext i8 @tree_call_nonnegative_warnv_p(%union.tree_node* %call9, %union.tree_node* %call10, %union.tree_node* %cond, %union.tree_node* %cond8, i8* %strict_overflow_p) #6, !dbg !7026
  ret i8 %call11, !dbg !7027
}

declare dso_local zeroext i8 @tree_unary_nonnegative_warnv_p(i32, %union.tree_node*, %union.tree_node*, i8*) local_unnamed_addr #2

declare dso_local zeroext i8 @tree_binary_nonnegative_warnv_p(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8*) local_unnamed_addr #2

declare dso_local zeroext i8 @tree_single_nonnegative_warnv_p(%union.tree_node*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7028 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7030, metadata !DIExpression()), !dbg !7032
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !7033
  call void @llvm.dbg.value(metadata i32 %call, metadata !7031, metadata !DIExpression()), !dbg !7032
  %sub = add i32 %call, -3, !dbg !7034
  ret i32 %sub, !dbg !7035
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !7036 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7038, metadata !DIExpression()), !dbg !7040
  call void @llvm.dbg.value(metadata i32 %index, metadata !7039, metadata !DIExpression()), !dbg !7040
  %add = add i32 %index, 3, !dbg !7041
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %add) #7, !dbg !7042
  ret %union.tree_node* %call, !dbg !7043
}

declare dso_local zeroext i8 @tree_call_nonnegative_warnv_p(%union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) unnamed_addr #0 !dbg !7044 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !7046, metadata !DIExpression()), !dbg !7049
  %call = tail call fastcc %union.tree_node* @vrp_val_min(%union.tree_node* %type) #7, !dbg !7050
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !7047, metadata !DIExpression()), !dbg !7049
  %call1 = tail call fastcc %union.tree_node* @vrp_val_max(%union.tree_node* %type) #7, !dbg !7051
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !7048, metadata !DIExpression()), !dbg !7049
  %cmp = icmp eq %union.tree_node* %call, null, !dbg !7052
  br i1 %cmp, label %land.end, label %land.lhs.true, !dbg !7053

land.lhs.true:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7054
  %bf.load = load i64, i64* %0, align 8, !dbg !7054
  %bf.cast = and i64 %bf.load, 65535, !dbg !7054
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !7054
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7054
  %cmp2 = icmp eq i32 %1, 1, !dbg !7054
  %cmp4 = icmp ne %union.tree_node* %call1, null, !dbg !7055
  %or.cond = and i1 %cmp2, %cmp4, !dbg !7056
  br i1 %or.cond, label %land.rhs, label %land.end, !dbg !7056

land.rhs:                                         ; preds = %land.lhs.true
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7057
  %bf.load6 = load i64, i64* %2, align 8, !dbg !7057
  %bf.cast8 = and i64 %bf.load6, 65535, !dbg !7057
  %arrayidx10 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast8, !dbg !7057
  %3 = load i32, i32* %arrayidx10, align 4, !dbg !7057
  %cmp11 = icmp eq i32 %3, 1, !dbg !7057
  %phitmp = zext i1 %cmp11 to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs, %land.lhs.true
  %4 = phi i8 [ 0, %land.lhs.true ], [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %4, !dbg !7058
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) unnamed_addr #0 !dbg !7059 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !7063, metadata !DIExpression()), !dbg !7064
  %call = tail call fastcc %union.tree_node* @vrp_val_max(%union.tree_node* %type) #7, !dbg !7065
  %call1 = tail call fastcc %union.tree_node* @make_overflow_infinity(%union.tree_node* %call) #7, !dbg !7066
  ret %union.tree_node* %call1, !dbg !7067
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @make_overflow_infinity(%union.tree_node* %val) unnamed_addr #0 !dbg !7068 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !7070, metadata !DIExpression()), !dbg !7071
  %call = tail call %union.tree_node* @copy_node_stat(%union.tree_node* %val) #6, !dbg !7072
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !7070, metadata !DIExpression()), !dbg !7071
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7073
  %bf.load = load i64, i64* %0, align 8, !dbg !7074
  %bf.set = or i64 %bf.load, 134217728, !dbg !7074
  store i64 %bf.set, i64* %0, align 8, !dbg !7074
  ret %union.tree_node* %call, !dbg !7075
}

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %val) unnamed_addr #0 !dbg !7076 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !7078, metadata !DIExpression()), !dbg !7079
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7080
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7080
  %call = tail call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %0) #7, !dbg !7081
  %tobool = icmp eq i8 %call, 0, !dbg !7081
  br i1 %tobool, label %land.end, label %land.lhs.true, !dbg !7082

land.lhs.true:                                    ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7083
  %bf.load = load i64, i64* %1, align 8, !dbg !7083
  %bf.cast = and i64 %bf.load, 65535, !dbg !7083
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !7083
  %2 = load i32, i32* %arrayidx, align 4, !dbg !7083
  %cmp = icmp eq i32 %2, 1, !dbg !7083
  br i1 %cmp, label %land.lhs.true2, label %land.end, !dbg !7084

land.lhs.true2:                                   ; preds = %land.lhs.true
  %bf.cast61 = and i64 %bf.load, 134217728, !dbg !7085
  %tobool7 = icmp eq i64 %bf.cast61, 0, !dbg !7085
  br i1 %tobool7, label %land.end, label %land.rhs, !dbg !7086

land.rhs:                                         ; preds = %land.lhs.true2
  %call8 = tail call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %val) #7, !dbg !7087
  %tobool10 = icmp eq i8 %call8, 0, !dbg !7087
  br i1 %tobool10, label %lor.rhs, label %land.end, !dbg !7088

lor.rhs:                                          ; preds = %land.rhs
  %call11 = tail call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %val) #7, !dbg !7089
  %tobool13 = icmp ne i8 %call11, 0, !dbg !7088
  %phitmp = zext i1 %tobool13 to i8, !dbg !7088
  br label %land.end, !dbg !7088

land.end:                                         ; preds = %land.rhs, %land.lhs.true2, %entry, %lor.rhs, %land.lhs.true
  %3 = phi i8 [ 0, %land.lhs.true2 ], [ 0, %land.lhs.true ], [ 0, %entry ], [ 1, %land.rhs ], [ %phitmp, %lor.rhs ]
  ret i8 %3, !dbg !7090
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @gimple_stmt_nonzero_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) unnamed_addr #5 !dbg !7091 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7093, metadata !DIExpression()), !dbg !7095
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !7094, metadata !DIExpression()), !dbg !7095
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !7096
  switch i32 %call, label %sw.default [
    i32 6, label %sw.bb
    i32 8, label %sw.bb2
  ], !dbg !7097

sw.bb:                                            ; preds = %entry
  %call1 = tail call fastcc zeroext i8 @gimple_assign_nonzero_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) #7, !dbg !7098
  br label %return, !dbg !7100

sw.bb2:                                           ; preds = %entry
  %call3 = tail call zeroext i8 @gimple_alloca_call_p(%union.gimple_statement_d* %stmt) #6, !dbg !7101
  br label %return, !dbg !7102

sw.default:                                       ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 951, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7103
  br label %return, !dbg !7104

return:                                           ; preds = %sw.default, %sw.bb2, %sw.bb
  %retval.0 = phi i8 [ 0, %sw.default ], [ %call3, %sw.bb2 ], [ %call1, %sw.bb ], !dbg !7095
  ret i8 %retval.0, !dbg !7105
}

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @range_is_nonnull(%struct.value_range_d* %vr) unnamed_addr #0 !dbg !7106 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !7110, metadata !DIExpression()), !dbg !7111
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !7112
  %0 = load i32, i32* %type, align 8, !dbg !7112
  %cmp = icmp eq i32 %0, 2, !dbg !7113
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !7114

land.lhs.true:                                    ; preds = %entry
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !7115
  %1 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !7115
  %call = tail call i32 @integer_zerop(%union.tree_node* %1) #6, !dbg !7116
  %tobool = icmp eq i32 %call, 0, !dbg !7116
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !7117

land.rhs:                                         ; preds = %land.lhs.true
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !7118
  %2 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !7118
  %call1 = tail call i32 @integer_zerop(%union.tree_node* %2) #6, !dbg !7119
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7117
  %phitmp = zext i1 %tobool2 to i8
  br label %land.end

land.end:                                         ; preds = %land.lhs.true, %land.rhs, %entry
  %3 = phi i8 [ 0, %land.lhs.true ], [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %3, !dbg !7120
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @gimple_assign_nonzero_warnv_p(%union.gimple_statement_d* %stmt, i8* %strict_overflow_p) unnamed_addr #5 !dbg !7121 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7123, metadata !DIExpression()), !dbg !7126
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !7124, metadata !DIExpression()), !dbg !7126
  %call = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !7127
  call void @llvm.dbg.value(metadata i32 %call, metadata !7125, metadata !DIExpression()), !dbg !7126
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #7, !dbg !7128
  switch i32 %call1, label %sw.default [
    i32 2, label %sw.bb
    i32 1, label %sw.bb6
    i32 3, label %sw.bb12
    i32 0, label %sw.bb15
  ], !dbg !7129

sw.bb:                                            ; preds = %entry
  %call2 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !7130
  %call3 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #7, !dbg !7132
  %call4 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !7133
  %call5 = tail call zeroext i8 @tree_unary_nonzero_warnv_p(i32 %call2, %union.tree_node* %call3, %union.tree_node* %call4, i8* %strict_overflow_p) #6, !dbg !7134
  br label %cleanup, !dbg !7135

sw.bb6:                                           ; preds = %entry
  %call7 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !7136
  %call8 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) #7, !dbg !7137
  %call9 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !7138
  %call10 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #7, !dbg !7139
  %call11 = tail call zeroext i8 @tree_binary_nonzero_warnv_p(i32 %call7, %union.tree_node* %call8, %union.tree_node* %call9, %union.tree_node* %call10, i8* %strict_overflow_p) #6, !dbg !7140
  br label %cleanup, !dbg !7141

sw.bb12:                                          ; preds = %entry
  %call13 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !7142
  %call14 = tail call zeroext i8 @tree_single_nonzero_warnv_p(%union.tree_node* %call13, i8* %strict_overflow_p) #6, !dbg !7143
  br label %cleanup, !dbg !7144

sw.bb15:                                          ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 927, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7145
  br label %sw.default, !dbg !7145

sw.default:                                       ; preds = %entry, %sw.bb15
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 929, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7146
  br label %cleanup, !dbg !7147

cleanup:                                          ; preds = %sw.default, %sw.bb12, %sw.bb6, %sw.bb
  %retval.0 = phi i8 [ 0, %sw.default ], [ %call14, %sw.bb12 ], [ %call11, %sw.bb6 ], [ %call5, %sw.bb ], !dbg !7126
  ret i8 %retval.0, !dbg !7148
}

declare dso_local zeroext i8 @gimple_alloca_call_p(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @tree_unary_nonzero_warnv_p(i32, %union.tree_node*, %union.tree_node*, i8*) local_unnamed_addr #2

declare dso_local zeroext i8 @tree_binary_nonzero_warnv_p(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8*) local_unnamed_addr #2

declare dso_local zeroext i8 @tree_single_nonzero_warnv_p(%union.tree_node*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @extract_range_from_assert(%struct.value_range_d* %vr_p, %union.tree_node* %expr) unnamed_addr #5 !dbg !7149 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr_p, metadata !7151, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !7152, metadata !DIExpression()), !dbg !7193
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7194
  %0 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !7194
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !7153, metadata !DIExpression()), !dbg !7193
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !7195
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx3, align 8, !dbg !7195
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !7154, metadata !DIExpression()), !dbg !7193
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7196
  %bf.load = load i64, i64* %2, align 8, !dbg !7196
  %bf.cast = and i64 %bf.load, 65535, !dbg !7196
  %arrayidx4 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !7196
  %3 = load i32, i32* %arrayidx4, align 4, !dbg !7196
  %cmp = icmp eq i32 %3, 5, !dbg !7196
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7196

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1410, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7196
  br label %cond.end, !dbg !7196

cond.end:                                         ; preds = %entry, %cond.true
  %operands7 = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7197
  %4 = load %union.tree_node*, %union.tree_node** %operands7, align 8, !dbg !7197
  %cmp9 = icmp eq %union.tree_node* %0, %4, !dbg !7199
  br i1 %cmp9, label %if.then, label %lor.lhs.false, !dbg !7200

lor.lhs.false:                                    ; preds = %cond.end
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7200
  %bf.load14 = load i64, i64* %5, align 8, !dbg !7201
  %bf.cast166 = and i64 %bf.load14, 65535, !dbg !7202
  %cmp17 = icmp eq i64 %bf.cast166, 63, !dbg !7202
  br i1 %cmp17, label %if.then, label %lor.lhs.false18, !dbg !7203

lor.lhs.false18:                                  ; preds = %lor.lhs.false
  %cmp26 = icmp eq i64 %bf.cast166, 116, !dbg !7204
  br i1 %cmp26, label %if.then, label %if.else, !dbg !7205

if.then:                                          ; preds = %lor.lhs.false18, %lor.lhs.false, %cond.end
  %bf.load28 = load i64, i64* %2, align 8, !dbg !7206
  %6 = trunc i64 %bf.load28 to i32, !dbg !7206
  %bf.cast30 = and i32 %6, 65535, !dbg !7206
  call void @llvm.dbg.value(metadata i32 %bf.cast30, metadata !7161, metadata !DIExpression()), !dbg !7193
  %arrayidx33 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands7, i64 1, !dbg !7208
  br label %if.end, !dbg !7209

if.else:                                          ; preds = %lor.lhs.false18
  %bf.load38 = load i64, i64* %2, align 8, !dbg !7210
  %7 = trunc i64 %bf.load38 to i32, !dbg !7210
  %bf.cast40 = and i32 %7, 65535, !dbg !7210
  %call = tail call i32 @swap_tree_comparison(i32 %bf.cast40) #6, !dbg !7212
  call void @llvm.dbg.value(metadata i32 %call, metadata !7161, metadata !DIExpression()), !dbg !7193
  %arrayidx46 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands7, i64 1, !dbg !7213
  %cond.0.pre = load %union.tree_node*, %union.tree_node** %arrayidx46, align 8, !dbg !7214
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %cond.0 = phi %union.tree_node* [ %4, %if.then ], [ %cond.0.pre, %if.else ], !dbg !7214
  %cond_code.0 = phi i32 [ %bf.cast30, %if.then ], [ %call, %if.else ], !dbg !7214
  %limit.0.in = phi %union.tree_node** [ %arrayidx33, %if.then ], [ %operands7, %if.else ]
  %limit.0 = load %union.tree_node*, %union.tree_node** %limit.0.in, align 8, !dbg !7214
  call void @llvm.dbg.value(metadata %union.tree_node* %cond.0, metadata !7154, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata %union.tree_node* %limit.0, metadata !7155, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata i32 %cond_code.0, metadata !7161, metadata !DIExpression()), !dbg !7193
  %call47 = tail call fastcc %union.tree_node* @avoid_overflow_infinity(%union.tree_node* %limit.0) #7, !dbg !7215
  call void @llvm.dbg.value(metadata %union.tree_node* %call47, metadata !7155, metadata !DIExpression()), !dbg !7193
  %type48 = getelementptr inbounds %union.tree_node, %union.tree_node* %call47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7216
  %8 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !7216
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !7158, metadata !DIExpression()), !dbg !7193
  %cmp49 = icmp eq %union.tree_node* %call47, %0, !dbg !7217
  br i1 %cmp49, label %cond.true50, label %cond.end52, !dbg !7217

cond.true50:                                      ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1436, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7217
  br label %cond.end52, !dbg !7217

cond.end52:                                       ; preds = %if.end, %cond.true50
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7218
  %bf.load55 = load i64, i64* %9, align 8, !dbg !7218
  %bf.cast578 = and i64 %bf.load55, 65535, !dbg !7218
  %cmp58 = icmp eq i64 %bf.cast578, 10, !dbg !7218
  br i1 %cmp58, label %land.lhs.true, label %lor.lhs.false59, !dbg !7218

lor.lhs.false59:                                  ; preds = %cond.end52
  %cmp64 = icmp ne i64 %bf.cast578, 12, !dbg !7218
  %cond_code.0.off4 = add i32 %cond_code.0, -101, !dbg !7220
  %switch5 = icmp ult i32 %cond_code.0.off4, 2, !dbg !7220
  %or.cond = or i1 %cmp64, %switch5, !dbg !7220
  br i1 %or.cond, label %if.end69, label %if.then68, !dbg !7220

land.lhs.true:                                    ; preds = %cond.end52
  %cond_code.0.off = add i32 %cond_code.0, -101, !dbg !7221
  %switch = icmp ult i32 %cond_code.0.off, 2, !dbg !7221
  br i1 %switch, label %if.end69, label %if.then68, !dbg !7221

if.then68:                                        ; preds = %lor.lhs.false59, %land.lhs.true
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr_p) #7, !dbg !7222
  br label %cleanup.cont698, !dbg !7224

if.end69:                                         ; preds = %lor.lhs.false59, %land.lhs.true
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7225
  %bf.load71 = load i64, i64* %10, align 8, !dbg !7225
  %bf.cast7310 = and i64 %bf.load71, 65535, !dbg !7226
  %cmp74 = icmp eq i64 %bf.cast7310, 141, !dbg !7226
  br i1 %cmp74, label %cond.true75, label %cond.end78, !dbg !7227

cond.true75:                                      ; preds = %if.end69
  %call76 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call47) #7, !dbg !7228
  br label %cond.end78, !dbg !7227

cond.end78:                                       ; preds = %if.end69, %cond.true75
  %cond79 = phi %struct.value_range_d* [ %call76, %cond.true75 ], [ null, %if.end69 ], !dbg !7227
  call void @llvm.dbg.value(metadata %struct.value_range_d* %cond79, metadata !7160, metadata !DIExpression()), !dbg !7193
  %tobool = icmp eq %struct.value_range_d* %cond79, null, !dbg !7229
  br i1 %tobool, label %if.end90, label %land.lhs.true80, !dbg !7231

land.lhs.true80:                                  ; preds = %cond.end78
  %type81 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %cond79, i64 0, i32 0, !dbg !7232
  %11 = load i32, i32* %type81, align 8, !dbg !7232
  %cmp82 = icmp eq i32 %11, 0, !dbg !7233
  br i1 %cmp82, label %if.then89, label %lor.lhs.false83, !dbg !7234

lor.lhs.false83:                                  ; preds = %land.lhs.true80
  %cmp85 = icmp eq i32 %11, 3, !dbg !7235
  br i1 %cmp85, label %if.then89, label %lor.lhs.false86, !dbg !7236

lor.lhs.false86:                                  ; preds = %lor.lhs.false83
  %call87 = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* nonnull %cond79) #7, !dbg !7237
  %tobool88 = icmp eq i8 %call87, 0, !dbg !7237
  br i1 %tobool88, label %if.end90, label %if.then89, !dbg !7238

if.then89:                                        ; preds = %lor.lhs.false86, %lor.lhs.false83, %land.lhs.true80
  call void @llvm.dbg.value(metadata %struct.value_range_d* null, metadata !7160, metadata !DIExpression()), !dbg !7193
  br label %if.end90, !dbg !7239

if.end90:                                         ; preds = %lor.lhs.false86, %cond.end78, %if.then89
  %limit_vr.0 = phi %struct.value_range_d* [ null, %if.then89 ], [ %cond79, %lor.lhs.false86 ], [ null, %cond.end78 ], !dbg !7193
  call void @llvm.dbg.value(metadata %struct.value_range_d* %limit_vr.0, metadata !7160, metadata !DIExpression()), !dbg !7193
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_p, i64 0, i32 3, !dbg !7240
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7240
  %cmp91 = icmp eq %struct.bitmap_head_def* %12, null, !dbg !7240
  br i1 %cmp91, label %cond.end95, label %cond.true93, !dbg !7240

cond.true93:                                      ; preds = %if.end90
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1463, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7240
  br label %cond.end95, !dbg !7240

cond.end95:                                       ; preds = %if.end90, %cond.true93
  tail call fastcc void @add_equivalence(%struct.bitmap_head_def** nonnull %equiv, %union.tree_node* %0) #7, !dbg !7241
  %13 = getelementptr inbounds %union.tree_node, %union.tree_node* %cond.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7242
  %bf.load99 = load i64, i64* %13, align 8, !dbg !7242
  %bf.cast10111 = and i64 %bf.load99, 65535, !dbg !7243
  %cmp102 = icmp eq i64 %bf.cast10111, 116, !dbg !7243
  br i1 %cmp102, label %if.then111, label %lor.lhs.false104, !dbg !7244

lor.lhs.false104:                                 ; preds = %cond.end95
  %cmp109 = icmp eq i64 %bf.cast10111, 63, !dbg !7245
  br i1 %cmp109, label %if.then111, label %if.else164, !dbg !7246

if.then111:                                       ; preds = %lor.lhs.false104, %cond.end95
  %cmp116 = icmp eq i64 %bf.cast10111, 63, !dbg !7247
  br i1 %cmp116, label %if.then118, label %if.else132, !dbg !7250

if.then118:                                       ; preds = %if.then111
  %operands120 = getelementptr inbounds %union.tree_node, %union.tree_node* %cond.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7251
  %arrayidx121 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands120, i64 1, !dbg !7251
  %14 = bitcast %union.tree_node** %arrayidx121 to %struct.tree_common**, !dbg !7251
  %15 = load %struct.tree_common*, %struct.tree_common** %14, align 8, !dbg !7251
  %type123 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %15, i64 0, i32 2, !dbg !7251
  %16 = load %union.tree_node*, %union.tree_node** %type123, align 8, !dbg !7251
  %17 = bitcast %struct.tree_common* %15 to %union.tree_node*, !dbg !7251
  %call127 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %16, %union.tree_node* %17) #6, !dbg !7251
  call void @llvm.dbg.value(metadata %union.tree_node* %call127, metadata !7156, metadata !DIExpression()), !dbg !7193
  %call128 = tail call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %call47, %union.tree_node* %call127, i32 0) #6, !dbg !7253
  call void @llvm.dbg.value(metadata %union.tree_node* %call128, metadata !7157, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata %union.tree_node* undef, metadata !7154, metadata !DIExpression()), !dbg !7193
  br label %if.end136, !dbg !7254

if.else132:                                       ; preds = %if.then111
  %type134 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7255
  %18 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !7255
  %call135 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %18, i64 0) #6, !dbg !7257
  call void @llvm.dbg.value(metadata %union.tree_node* %call135, metadata !7156, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata %union.tree_node* %call47, metadata !7157, metadata !DIExpression()), !dbg !7193
  br label %if.end136

if.end136:                                        ; preds = %if.else132, %if.then118
  %max.0 = phi %union.tree_node* [ %call128, %if.then118 ], [ %call47, %if.else132 ], !dbg !7258
  %min.0 = phi %union.tree_node* [ %call127, %if.then118 ], [ %call135, %if.else132 ], !dbg !7258
  call void @llvm.dbg.value(metadata %union.tree_node* %min.0, metadata !7156, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata %union.tree_node* %max.0, metadata !7157, metadata !DIExpression()), !dbg !7193
  %type138 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7259
  %19 = load %union.tree_node*, %union.tree_node** %type138, align 8, !dbg !7259
  %int_cst139 = getelementptr inbounds %union.tree_node, %union.tree_node* %min.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7260
  %low = bitcast i32* %int_cst139 to i64*, !dbg !7260
  %20 = load i64, i64* %low, align 8, !dbg !7260
  %high = getelementptr inbounds i32, i32* %int_cst139, i64 2, !dbg !7261
  %21 = bitcast i32* %high to i64*, !dbg !7261
  %22 = load i64, i64* %21, align 8, !dbg !7261
  %call142 = tail call %union.tree_node* @force_fit_type_double(%union.tree_node* %19, i64 %20, i64 %22, i32 0, i8 zeroext 0) #6, !dbg !7262
  call void @llvm.dbg.value(metadata %union.tree_node* %call142, metadata !7156, metadata !DIExpression()), !dbg !7193
  %23 = load %union.tree_node*, %union.tree_node** %type138, align 8, !dbg !7263
  %int_cst146 = getelementptr inbounds %union.tree_node, %union.tree_node* %max.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7264
  %low147 = bitcast i32* %int_cst146 to i64*, !dbg !7264
  %24 = load i64, i64* %low147, align 8, !dbg !7264
  %high150 = getelementptr inbounds i32, i32* %int_cst146, i64 2, !dbg !7265
  %25 = bitcast i32* %high150 to i64*, !dbg !7265
  %26 = load i64, i64* %25, align 8, !dbg !7265
  %call151 = tail call %union.tree_node* @force_fit_type_double(%union.tree_node* %23, i64 %24, i64 %26, i32 0, i8 zeroext 0) #6, !dbg !7266
  call void @llvm.dbg.value(metadata %union.tree_node* %call151, metadata !7157, metadata !DIExpression()), !dbg !7193
  switch i32 %cond_code.0, label %if.else161 [
    i32 98, label %if.then154
    i32 99, label %if.then159
  ], !dbg !7267

if.then154:                                       ; preds = %if.end136
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7268
  tail call fastcc void @set_and_canonicalize_value_range(%struct.value_range_d* %vr_p, i32 1, %union.tree_node* %call142, %union.tree_node* %call151, %struct.bitmap_head_def* %27) #7, !dbg !7270
  br label %if.end386, !dbg !7270

if.then159:                                       ; preds = %if.end136
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7271
  tail call fastcc void @set_and_canonicalize_value_range(%struct.value_range_d* %vr_p, i32 2, %union.tree_node* %call142, %union.tree_node* %call151, %struct.bitmap_head_def* %28) #7, !dbg !7273
  br label %if.end386, !dbg !7273

if.else161:                                       ; preds = %if.end136
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1511, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7274
  br label %if.end386

if.else164:                                       ; preds = %lor.lhs.false104
  switch i32 %cond_code.0, label %if.else381 [
    i32 101, label %if.then167
    i32 102, label %if.then188
    i32 98, label %if.then242
    i32 97, label %if.then242
    i32 100, label %if.then313
    i32 99, label %if.then313
  ], !dbg !7275

if.then167:                                       ; preds = %if.else164
  %tobool168 = icmp eq %struct.value_range_d* %limit_vr.0, null, !dbg !7276
  br i1 %tobool168, label %if.end174, label %if.then169, !dbg !7278

if.then169:                                       ; preds = %if.then167
  %type170 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 0, !dbg !7279
  %29 = load i32, i32* %type170, align 8, !dbg !7279
  call void @llvm.dbg.value(metadata i32 %29, metadata !7162, metadata !DIExpression()), !dbg !7281
  %min171 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 1, !dbg !7282
  %30 = load %union.tree_node*, %union.tree_node** %min171, align 8, !dbg !7282
  call void @llvm.dbg.value(metadata %union.tree_node* %30, metadata !7156, metadata !DIExpression()), !dbg !7193
  %max172 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 2, !dbg !7283
  %31 = load %union.tree_node*, %union.tree_node** %max172, align 8, !dbg !7283
  call void @llvm.dbg.value(metadata %union.tree_node* %31, metadata !7157, metadata !DIExpression()), !dbg !7193
  br label %if.end174, !dbg !7284

if.end174:                                        ; preds = %if.then167, %if.then169
  %range_type.0 = phi i32 [ %29, %if.then169 ], [ 1, %if.then167 ], !dbg !7285
  %max.1 = phi %union.tree_node* [ %31, %if.then169 ], [ %call47, %if.then167 ], !dbg !7285
  %min.1 = phi %union.tree_node* [ %30, %if.then169 ], [ %call47, %if.then167 ], !dbg !7285
  call void @llvm.dbg.value(metadata %union.tree_node* %min.1, metadata !7156, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata %union.tree_node* %max.1, metadata !7157, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata i32 %range_type.0, metadata !7162, metadata !DIExpression()), !dbg !7281
  %32 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7286
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr_p, i32 %range_type.0, %union.tree_node* %min.1, %union.tree_node* %max.1, %struct.bitmap_head_def* %32) #7, !dbg !7287
  %bf.load177 = load i64, i64* %10, align 8, !dbg !7288
  %bf.cast17922 = and i64 %bf.load177, 65535, !dbg !7290
  %cmp180 = icmp eq i64 %bf.cast17922, 141, !dbg !7290
  br i1 %cmp180, label %if.then182, label %if.end386, !dbg !7291

if.then182:                                       ; preds = %if.end174
  tail call fastcc void @add_equivalence(%struct.bitmap_head_def** nonnull %equiv, %union.tree_node* %call47) #7, !dbg !7292
  br label %if.end386, !dbg !7292

if.then188:                                       ; preds = %if.else164
  %tobool189 = icmp eq %struct.value_range_d* %limit_vr.0, null, !dbg !7293
  br i1 %tobool189, label %if.end204, label %land.lhs.true190, !dbg !7296

land.lhs.true190:                                 ; preds = %if.then188
  %type191 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 0, !dbg !7297
  %33 = load i32, i32* %type191, align 8, !dbg !7297
  %cmp192 = icmp eq i32 %33, 1, !dbg !7298
  br i1 %cmp192, label %land.lhs.true194, label %if.end204, !dbg !7299

land.lhs.true194:                                 ; preds = %land.lhs.true190
  %min195 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 1, !dbg !7300
  %34 = load %union.tree_node*, %union.tree_node** %min195, align 8, !dbg !7300
  %max196 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 2, !dbg !7301
  %35 = load %union.tree_node*, %union.tree_node** %max196, align 8, !dbg !7301
  %call197 = tail call fastcc i32 @compare_values(%union.tree_node* %34, %union.tree_node* %35) #7, !dbg !7302
  %cmp198 = icmp eq i32 %call197, 0, !dbg !7303
  br i1 %cmp198, label %if.then200, label %if.end204, !dbg !7304

if.then200:                                       ; preds = %land.lhs.true194
  %36 = load %union.tree_node*, %union.tree_node** %min195, align 8, !dbg !7305
  call void @llvm.dbg.value(metadata %union.tree_node* %36, metadata !7156, metadata !DIExpression()), !dbg !7193
  %37 = load %union.tree_node*, %union.tree_node** %max196, align 8, !dbg !7307
  call void @llvm.dbg.value(metadata %union.tree_node* %37, metadata !7157, metadata !DIExpression()), !dbg !7193
  br label %if.end204, !dbg !7308

if.end204:                                        ; preds = %if.then188, %land.lhs.true190, %land.lhs.true194, %if.then200
  %max.2 = phi %union.tree_node* [ %37, %if.then200 ], [ %call47, %land.lhs.true194 ], [ %call47, %land.lhs.true190 ], [ %call47, %if.then188 ], !dbg !7309
  %min.2 = phi %union.tree_node* [ %36, %if.then200 ], [ %call47, %land.lhs.true194 ], [ %call47, %land.lhs.true190 ], [ %call47, %if.then188 ], !dbg !7309
  call void @llvm.dbg.value(metadata %union.tree_node* %min.2, metadata !7156, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata %union.tree_node* %max.2, metadata !7157, metadata !DIExpression()), !dbg !7193
  %bf.load206 = load i64, i64* %9, align 8, !dbg !7310
  %bf.cast20819 = and i64 %bf.load206, 65535, !dbg !7310
  %cmp209 = icmp eq i64 %bf.cast20819, 6, !dbg !7310
  br i1 %cmp209, label %land.lhs.true225, label %lor.lhs.false211, !dbg !7310

lor.lhs.false211:                                 ; preds = %if.end204
  %cmp216 = icmp eq i64 %bf.cast20819, 7, !dbg !7310
  br i1 %cmp216, label %land.lhs.true225, label %lor.lhs.false218, !dbg !7310

lor.lhs.false218:                                 ; preds = %lor.lhs.false211
  %cmp223 = icmp eq i64 %bf.cast20819, 8, !dbg !7310
  br i1 %cmp223, label %land.lhs.true225, label %if.end234, !dbg !7312

land.lhs.true225:                                 ; preds = %lor.lhs.false218, %lor.lhs.false211, %if.end204
  %call226 = tail call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %min.2) #7, !dbg !7313
  %tobool228 = icmp eq i8 %call226, 0, !dbg !7313
  br i1 %tobool228, label %if.end234, label %land.lhs.true229, !dbg !7314

land.lhs.true229:                                 ; preds = %land.lhs.true225
  %call230 = tail call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %max.2) #7, !dbg !7315
  %tobool232 = icmp ne i8 %call230, 0, !dbg !7315
  %spec.select = select i1 %tobool232, %union.tree_node* %call47, %union.tree_node* %max.2, !dbg !7316
  %spec.select2 = select i1 %tobool232, %union.tree_node* %call47, %union.tree_node* %min.2, !dbg !7316
  br label %if.end234, !dbg !7316

if.end234:                                        ; preds = %land.lhs.true225, %land.lhs.true229, %lor.lhs.false218
  %max.3 = phi %union.tree_node* [ %max.2, %land.lhs.true225 ], [ %max.2, %lor.lhs.false218 ], [ %spec.select, %land.lhs.true229 ], !dbg !7317
  %min.3 = phi %union.tree_node* [ %min.2, %land.lhs.true225 ], [ %min.2, %lor.lhs.false218 ], [ %spec.select2, %land.lhs.true229 ], !dbg !7317
  call void @llvm.dbg.value(metadata %union.tree_node* %min.3, metadata !7156, metadata !DIExpression()), !dbg !7193
  call void @llvm.dbg.value(metadata %union.tree_node* %max.3, metadata !7157, metadata !DIExpression()), !dbg !7193
  %38 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7318
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr_p, i32 2, %union.tree_node* %min.3, %union.tree_node* %max.3, %struct.bitmap_head_def* %38) #7, !dbg !7319
  br label %if.end386, !dbg !7320

if.then242:                                       ; preds = %if.else164, %if.else164
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !7321
  %39 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !7321
  %40 = load %union.tree_node*, %union.tree_node** %39, align 8, !dbg !7321
  call void @llvm.dbg.value(metadata %union.tree_node* %40, metadata !7156, metadata !DIExpression()), !dbg !7193
  %cmp244 = icmp eq %struct.value_range_d* %limit_vr.0, null, !dbg !7322
  br i1 %cmp244, label %if.end253, label %lor.lhs.false246, !dbg !7324

lor.lhs.false246:                                 ; preds = %if.then242
  %type247 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 0, !dbg !7325
  %41 = load i32, i32* %type247, align 8, !dbg !7325
  %cmp248 = icmp eq i32 %41, 2, !dbg !7326
  br i1 %cmp248, label %if.end253, label %if.else251, !dbg !7327

if.else251:                                       ; preds = %lor.lhs.false246
  %max252 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 2, !dbg !7328
  %42 = load %union.tree_node*, %union.tree_node** %max252, align 8, !dbg !7328
  call void @llvm.dbg.value(metadata %union.tree_node* %42, metadata !7157, metadata !DIExpression()), !dbg !7193
  br label %if.end253

if.end253:                                        ; preds = %if.then242, %lor.lhs.false246, %if.else251
  %max.4 = phi %union.tree_node* [ %42, %if.else251 ], [ %call47, %lor.lhs.false246 ], [ %call47, %if.then242 ], !dbg !7330
  call void @llvm.dbg.value(metadata %union.tree_node* %max.4, metadata !7157, metadata !DIExpression()), !dbg !7193
  %cmp254 = icmp eq i32 %cond_code.0, 97, !dbg !7331
  br i1 %cmp254, label %land.lhs.true256, label %lor.lhs.false260, !dbg !7332

land.lhs.true256:                                 ; preds = %if.end253
  %call257 = tail call fastcc i32 @compare_values(%union.tree_node* %max.4, %union.tree_node* %40) #7, !dbg !7333
  %cmp258 = icmp eq i32 %call257, 0, !dbg !7334
  br i1 %cmp258, label %if.then275, label %lor.lhs.false260, !dbg !7335

lor.lhs.false260:                                 ; preds = %land.lhs.true256, %if.end253
  %43 = getelementptr inbounds %union.tree_node, %union.tree_node* %max.4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7336
  %bf.load262 = load i64, i64* %43, align 8, !dbg !7336
  %bf.cast264 = and i64 %bf.load262, 65535, !dbg !7336
  %arrayidx266 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast264, !dbg !7336
  %44 = load i32, i32* %arrayidx266, align 4, !dbg !7336
  %cmp267 = icmp eq i32 %44, 1, !dbg !7336
  br i1 %cmp267, label %land.lhs.true269, label %if.else276, !dbg !7337

land.lhs.true269:                                 ; preds = %lor.lhs.false260
  %bf.cast27318 = and i64 %bf.load262, 134217728, !dbg !7338
  %tobool274 = icmp eq i64 %bf.cast27318, 0, !dbg !7338
  br i1 %tobool274, label %if.else276, label %if.then275, !dbg !7339

if.then275:                                       ; preds = %land.lhs.true269, %land.lhs.true256
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr_p) #7, !dbg !7340
  br label %if.end386, !dbg !7340

if.else276:                                       ; preds = %land.lhs.true269, %lor.lhs.false260
  br i1 %cmp254, label %if.then279, label %if.end304, !dbg !7341

if.then279:                                       ; preds = %if.else276
  %call280 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %8, i64 1) #6, !dbg !7342
  call void @llvm.dbg.value(metadata %union.tree_node* %call280, metadata !7166, metadata !DIExpression()), !dbg !7343
  %call281 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %8, %union.tree_node* %max.4, %union.tree_node* %call280) #6, !dbg !7344
  call void @llvm.dbg.value(metadata %union.tree_node* %call281, metadata !7157, metadata !DIExpression()), !dbg !7193
  %45 = getelementptr inbounds %union.tree_node, %union.tree_node* %call281, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7345
  %bf.load283 = load i64, i64* %45, align 8, !dbg !7345
  %bf.cast285 = and i64 %bf.load283, 65535, !dbg !7345
  %arrayidx287 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast285, !dbg !7345
  %46 = load i32, i32* %arrayidx287, align 4, !dbg !7345
  %cmp288 = icmp ugt i32 %46, 3, !dbg !7345
  br i1 %cmp288, label %land.lhs.true290, label %if.end304, !dbg !7345

land.lhs.true290:                                 ; preds = %if.then279
  %cmp297 = icmp ult i32 %46, 11, !dbg !7345
  br i1 %cmp297, label %if.then299, label %if.end304, !dbg !7347

if.then299:                                       ; preds = %land.lhs.true290
  %bf.set = or i64 %bf.load283, 8388608, !dbg !7348
  store i64 %bf.set, i64* %45, align 8, !dbg !7348
  br label %if.end304, !dbg !7349

if.end304:                                        ; preds = %if.then279, %land.lhs.true290, %if.then299, %if.else276
  %max.5 = phi %union.tree_node* [ %max.4, %if.else276 ], [ %call281, %if.then299 ], [ %call281, %land.lhs.true290 ], [ %call281, %if.then279 ], !dbg !7350
  call void @llvm.dbg.value(metadata %union.tree_node* %max.5, metadata !7157, metadata !DIExpression()), !dbg !7193
  %47 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7351
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr_p, i32 1, %union.tree_node* %40, %union.tree_node* %max.5, %struct.bitmap_head_def* %47) #7, !dbg !7352
  br label %if.end386

if.then313:                                       ; preds = %if.else164, %if.else164
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7353
  %48 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !7353
  %49 = load %union.tree_node*, %union.tree_node** %48, align 8, !dbg !7353
  call void @llvm.dbg.value(metadata %union.tree_node* %49, metadata !7157, metadata !DIExpression()), !dbg !7193
  %cmp315 = icmp eq %struct.value_range_d* %limit_vr.0, null, !dbg !7354
  br i1 %cmp315, label %if.end324, label %lor.lhs.false317, !dbg !7356

lor.lhs.false317:                                 ; preds = %if.then313
  %type318 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 0, !dbg !7357
  %50 = load i32, i32* %type318, align 8, !dbg !7357
  %cmp319 = icmp eq i32 %50, 2, !dbg !7358
  br i1 %cmp319, label %if.end324, label %if.else322, !dbg !7359

if.else322:                                       ; preds = %lor.lhs.false317
  %min323 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %limit_vr.0, i64 0, i32 1, !dbg !7360
  %51 = load %union.tree_node*, %union.tree_node** %min323, align 8, !dbg !7360
  call void @llvm.dbg.value(metadata %union.tree_node* %51, metadata !7156, metadata !DIExpression()), !dbg !7193
  br label %if.end324

if.end324:                                        ; preds = %if.then313, %lor.lhs.false317, %if.else322
  %min.4 = phi %union.tree_node* [ %51, %if.else322 ], [ %call47, %lor.lhs.false317 ], [ %call47, %if.then313 ], !dbg !7362
  call void @llvm.dbg.value(metadata %union.tree_node* %min.4, metadata !7156, metadata !DIExpression()), !dbg !7193
  %cmp325 = icmp eq i32 %cond_code.0, 99, !dbg !7363
  br i1 %cmp325, label %land.lhs.true327, label %lor.lhs.false331, !dbg !7364

land.lhs.true327:                                 ; preds = %if.end324
  %call328 = tail call fastcc i32 @compare_values(%union.tree_node* %min.4, %union.tree_node* %49) #7, !dbg !7365
  %cmp329 = icmp eq i32 %call328, 0, !dbg !7366
  br i1 %cmp329, label %if.then347, label %lor.lhs.false331, !dbg !7367

lor.lhs.false331:                                 ; preds = %land.lhs.true327, %if.end324
  %52 = getelementptr inbounds %union.tree_node, %union.tree_node* %min.4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7368
  %bf.load333 = load i64, i64* %52, align 8, !dbg !7368
  %bf.cast335 = and i64 %bf.load333, 65535, !dbg !7368
  %arrayidx337 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast335, !dbg !7368
  %53 = load i32, i32* %arrayidx337, align 4, !dbg !7368
  %cmp338 = icmp eq i32 %53, 1, !dbg !7368
  br i1 %cmp338, label %land.lhs.true340, label %if.else348, !dbg !7369

land.lhs.true340:                                 ; preds = %lor.lhs.false331
  %bf.cast34517 = and i64 %bf.load333, 134217728, !dbg !7370
  %tobool346 = icmp eq i64 %bf.cast34517, 0, !dbg !7370
  br i1 %tobool346, label %if.else348, label %if.then347, !dbg !7371

if.then347:                                       ; preds = %land.lhs.true340, %land.lhs.true327
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr_p) #7, !dbg !7372
  br label %if.end386, !dbg !7372

if.else348:                                       ; preds = %land.lhs.true340, %lor.lhs.false331
  br i1 %cmp325, label %if.then351, label %if.end378, !dbg !7373

if.then351:                                       ; preds = %if.else348
  %call353 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %8, i64 1) #6, !dbg !7374
  call void @llvm.dbg.value(metadata %union.tree_node* %call353, metadata !7174, metadata !DIExpression()), !dbg !7375
  %call354 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %8, %union.tree_node* %min.4, %union.tree_node* %call353) #6, !dbg !7376
  call void @llvm.dbg.value(metadata %union.tree_node* %call354, metadata !7156, metadata !DIExpression()), !dbg !7193
  %54 = getelementptr inbounds %union.tree_node, %union.tree_node* %call354, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7377
  %bf.load356 = load i64, i64* %54, align 8, !dbg !7377
  %bf.cast358 = and i64 %bf.load356, 65535, !dbg !7377
  %arrayidx360 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast358, !dbg !7377
  %55 = load i32, i32* %arrayidx360, align 4, !dbg !7377
  %cmp361 = icmp ugt i32 %55, 3, !dbg !7377
  br i1 %cmp361, label %land.lhs.true363, label %if.end378, !dbg !7377

land.lhs.true363:                                 ; preds = %if.then351
  %cmp370 = icmp ult i32 %55, 11, !dbg !7377
  br i1 %cmp370, label %if.then372, label %if.end378, !dbg !7379

if.then372:                                       ; preds = %land.lhs.true363
  %bf.set376 = or i64 %bf.load356, 8388608, !dbg !7380
  store i64 %bf.set376, i64* %54, align 8, !dbg !7380
  br label %if.end378, !dbg !7381

if.end378:                                        ; preds = %if.then351, %land.lhs.true363, %if.then372, %if.else348
  %min.5 = phi %union.tree_node* [ %min.4, %if.else348 ], [ %call354, %if.then372 ], [ %call354, %land.lhs.true363 ], [ %call354, %if.then351 ], !dbg !7382
  call void @llvm.dbg.value(metadata %union.tree_node* %min.5, metadata !7156, metadata !DIExpression()), !dbg !7193
  %56 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7383
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr_p, i32 1, %union.tree_node* %min.5, %union.tree_node* %49, %struct.bitmap_head_def* %56) #7, !dbg !7384
  br label %if.end386

if.else381:                                       ; preds = %if.else164
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1654, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7385
  br label %if.end386

if.end386:                                        ; preds = %if.then182, %if.end174, %if.end304, %if.then275, %if.then347, %if.end378, %if.else381, %if.end234, %if.then154, %if.else161, %if.then159
  %call387 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %0) #7, !dbg !7386
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call387, metadata !7159, metadata !DIExpression()), !dbg !7193
  %type388 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_p, i64 0, i32 0, !dbg !7387
  %57 = load i32, i32* %type388, align 8, !dbg !7387
  %cmp389 = icmp eq i32 %57, 3, !dbg !7389
  br i1 %cmp389, label %cleanup.cont698, label %lor.lhs.false391, !dbg !7390

lor.lhs.false391:                                 ; preds = %if.end386
  %cmp393 = icmp eq i32 %57, 0, !dbg !7391
  br i1 %cmp393, label %cleanup.cont698, label %lor.lhs.false395, !dbg !7392

lor.lhs.false395:                                 ; preds = %lor.lhs.false391
  %type396 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call387, i64 0, i32 0, !dbg !7393
  %58 = load i32, i32* %type396, align 8, !dbg !7393
  %cmp397 = icmp eq i32 %58, 3, !dbg !7394
  br i1 %cmp397, label %cleanup.cont698, label %lor.lhs.false399, !dbg !7395

lor.lhs.false399:                                 ; preds = %lor.lhs.false395
  %cmp401 = icmp eq i32 %58, 0, !dbg !7396
  br i1 %cmp401, label %cleanup.cont698, label %lor.lhs.false403, !dbg !7397

lor.lhs.false403:                                 ; preds = %lor.lhs.false399
  %call404 = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr_p) #7, !dbg !7398
  %tobool406 = icmp eq i8 %call404, 0, !dbg !7398
  br i1 %tobool406, label %lor.lhs.false407, label %cleanup.cont698, !dbg !7399

lor.lhs.false407:                                 ; preds = %lor.lhs.false403
  %call408 = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %call387) #7, !dbg !7400
  %tobool410 = icmp eq i8 %call408, 0, !dbg !7400
  br i1 %tobool410, label %if.end412, label %cleanup.cont698, !dbg !7401

if.end412:                                        ; preds = %lor.lhs.false407
  %59 = load i32, i32* %type396, align 8, !dbg !7402
  %cmp414 = icmp eq i32 %59, 1, !dbg !7403
  br i1 %cmp414, label %land.lhs.true416, label %if.else448, !dbg !7404

land.lhs.true416:                                 ; preds = %if.end412
  %60 = load i32, i32* %type388, align 8, !dbg !7405
  %cmp418 = icmp eq i32 %60, 1, !dbg !7406
  br i1 %cmp418, label %if.then420, label %if.else448, !dbg !7407

if.then420:                                       ; preds = %land.lhs.true416
  %call421 = tail call fastcc zeroext i8 @value_ranges_intersect_p(%struct.value_range_d* %call387, %struct.value_range_d* %vr_p) #7, !dbg !7408
  %tobool422 = icmp eq i8 %call421, 0, !dbg !7408
  br i1 %tobool422, label %if.else446, label %if.then423, !dbg !7411

if.then423:                                       ; preds = %if.then420
  %min424 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_p, i64 0, i32 1, !dbg !7412
  %61 = load %union.tree_node*, %union.tree_node** %min424, align 8, !dbg !7412
  %min425 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call387, i64 0, i32 1, !dbg !7415
  %62 = load %union.tree_node*, %union.tree_node** %min425, align 8, !dbg !7415
  %call426 = tail call fastcc i32 @compare_values(%union.tree_node* %61, %union.tree_node* %62) #7, !dbg !7416
  %cmp427 = icmp eq i32 %call426, -1, !dbg !7417
  br i1 %cmp427, label %if.then429, label %if.else431, !dbg !7418

if.then429:                                       ; preds = %if.then423
  br label %if.end433, !dbg !7419

if.else431:                                       ; preds = %if.then423
  br label %if.end433

if.end433:                                        ; preds = %if.else431, %if.then429
  %call387.pn26 = phi %struct.value_range_d* [ %call387, %if.then429 ], [ %vr_p, %if.else431 ]
  %min.6.in = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call387.pn26, i64 0, i32 1, !dbg !7420
  %min.6 = load %union.tree_node*, %union.tree_node** %min.6.in, align 8, !dbg !7420
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6, metadata !7156, metadata !DIExpression()), !dbg !7193
  %max434 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_p, i64 0, i32 2, !dbg !7421
  %63 = load %union.tree_node*, %union.tree_node** %max434, align 8, !dbg !7421
  %max435 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call387, i64 0, i32 2, !dbg !7423
  %64 = load %union.tree_node*, %union.tree_node** %max435, align 8, !dbg !7423
  %call436 = tail call fastcc i32 @compare_values(%union.tree_node* %63, %union.tree_node* %64) #7, !dbg !7424
  %cmp437 = icmp eq i32 %call436, 1, !dbg !7425
  br i1 %cmp437, label %if.then439, label %if.else441, !dbg !7426

if.then439:                                       ; preds = %if.end433
  br label %if.end443, !dbg !7427

if.else441:                                       ; preds = %if.end433
  br label %if.end443

if.end443:                                        ; preds = %if.else441, %if.then439
  %call387.pn27 = phi %struct.value_range_d* [ %call387, %if.then439 ], [ %vr_p, %if.else441 ]
  %max.6.in = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call387.pn27, i64 0, i32 2, !dbg !7428
  %max.6 = load %union.tree_node*, %union.tree_node** %max.6.in, align 8, !dbg !7428
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6, metadata !7157, metadata !DIExpression()), !dbg !7193
  %65 = load i32, i32* %type388, align 8, !dbg !7429
  %66 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7430
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr_p, i32 %65, %union.tree_node* %min.6, %union.tree_node* %max.6, %struct.bitmap_head_def* %66) #7, !dbg !7431
  br label %cleanup.cont698, !dbg !7432

if.else446:                                       ; preds = %if.then420
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr_p) #7, !dbg !7433
  br label %cleanup.cont698

if.else448:                                       ; preds = %land.lhs.true416, %if.end412
  br i1 %cmp414, label %land.lhs.true452, label %lor.lhs.false456, !dbg !7435

land.lhs.true452:                                 ; preds = %if.else448
  %67 = load i32, i32* %type388, align 8, !dbg !7436
  %cmp454 = icmp eq i32 %67, 2, !dbg !7437
  br i1 %cmp454, label %if.then464, label %lor.lhs.false456, !dbg !7438

lor.lhs.false456:                                 ; preds = %land.lhs.true452, %if.else448
  %cmp458 = icmp eq i32 %59, 2, !dbg !7439
  br i1 %cmp458, label %land.lhs.true460, label %cleanup.cont698, !dbg !7440

land.lhs.true460:                                 ; preds = %lor.lhs.false456
  %68 = load i32, i32* %type388, align 8, !dbg !7441
  %cmp462 = icmp eq i32 %68, 1, !dbg !7442
  br i1 %cmp462, label %if.then464, label %cleanup.cont698, !dbg !7443

if.then464:                                       ; preds = %land.lhs.true460, %land.lhs.true452
  %min465 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call387, i64 0, i32 1, !dbg !7444
  %69 = load %union.tree_node*, %union.tree_node** %min465, align 8, !dbg !7444
  %min466 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_p, i64 0, i32 1, !dbg !7445
  %70 = load %union.tree_node*, %union.tree_node** %min466, align 8, !dbg !7445
  %call467 = tail call fastcc i32 @compare_values(%union.tree_node* %69, %union.tree_node* %70) #7, !dbg !7446
  %cmp468 = icmp eq i32 %call467, 0, !dbg !7447
  br i1 %cmp468, label %land.lhs.true470, label %if.else477, !dbg !7448

land.lhs.true470:                                 ; preds = %if.then464
  %max471 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call387, i64 0, i32 2, !dbg !7449
  %71 = load %union.tree_node*, %union.tree_node** %max471, align 8, !dbg !7449
  %max472 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_p, i64 0, i32 2, !dbg !7450
  %72 = load %union.tree_node*, %union.tree_node** %max472, align 8, !dbg !7450
  %call473 = tail call fastcc i32 @compare_values(%union.tree_node* %71, %union.tree_node* %72) #7, !dbg !7451
  %cmp474 = icmp eq i32 %call473, 0, !dbg !7452
  br i1 %cmp474, label %if.then476, label %if.else477, !dbg !7453

if.then476:                                       ; preds = %land.lhs.true470
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr_p) #7, !dbg !7454
  br label %cleanup.cont698, !dbg !7454

if.else477:                                       ; preds = %land.lhs.true470, %if.then464
  %73 = load i32, i32* %type388, align 8, !dbg !7455
  %cmp482 = icmp eq i32 %73, 2, !dbg !7457
  br i1 %cmp482, label %if.then484, label %if.else489, !dbg !7458

if.then484:                                       ; preds = %if.else477
  br label %if.end494, !dbg !7459

if.else489:                                       ; preds = %if.else477
  br label %if.end494

if.end494:                                        ; preds = %if.else489, %if.then484
  %vr_p.pn = phi %struct.value_range_d* [ %vr_p, %if.then484 ], [ %call387, %if.else489 ]
  %vr_p.pn24 = phi %struct.value_range_d* [ %vr_p, %if.then484 ], [ %call387, %if.else489 ]
  %call387.pn = phi %struct.value_range_d* [ %call387, %if.then484 ], [ %vr_p, %if.else489 ]
  %call387.pn25 = phi %struct.value_range_d* [ %call387, %if.then484 ], [ %vr_p, %if.else489 ]
  %real_max.0.in = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call387.pn25, i64 0, i32 2, !dbg !7461
  %real_min.0.in = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call387.pn, i64 0, i32 1, !dbg !7461
  %anti_max.0.in = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_p.pn24, i64 0, i32 2, !dbg !7461
  %anti_min.0.in = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr_p.pn, i64 0, i32 1, !dbg !7461
  %real_max.0 = load %union.tree_node*, %union.tree_node** %real_max.0.in, align 8, !dbg !7461
  %real_min.0 = load %union.tree_node*, %union.tree_node** %real_min.0.in, align 8, !dbg !7461
  %anti_max.0 = load %union.tree_node*, %union.tree_node** %anti_max.0.in, align 8, !dbg !7461
  %anti_min.0 = load %union.tree_node*, %union.tree_node** %anti_min.0.in, align 8, !dbg !7461
  call void @llvm.dbg.value(metadata %union.tree_node* %real_max.0, metadata !7191, metadata !DIExpression()), !dbg !7462
  call void @llvm.dbg.value(metadata %union.tree_node* %real_min.0, metadata !7190, metadata !DIExpression()), !dbg !7462
  call void @llvm.dbg.value(metadata %union.tree_node* %anti_max.0, metadata !7189, metadata !DIExpression()), !dbg !7462
  call void @llvm.dbg.value(metadata %union.tree_node* %anti_min.0, metadata !7188, metadata !DIExpression()), !dbg !7462
  %call495 = tail call fastcc i32 @compare_values(%union.tree_node* %anti_max.0, %union.tree_node* %real_max.0) #7, !dbg !7463
  %cmp496 = icmp eq i32 %call495, -1, !dbg !7465
  br i1 %cmp496, label %land.lhs.true498, label %if.else511, !dbg !7466

land.lhs.true498:                                 ; preds = %if.end494
  %call499 = tail call fastcc i32 @compare_values(%union.tree_node* %anti_min.0, %union.tree_node* %real_min.0) #7, !dbg !7467
  %cmp500 = icmp eq i32 %call499, 1, !dbg !7468
  br i1 %cmp500, label %if.then502, label %if.else511, !dbg !7469

if.then502:                                       ; preds = %land.lhs.true498
  %call503 = tail call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %real_min.0) #7, !dbg !7470
  %tobool504 = icmp eq i8 %call503, 0, !dbg !7470
  br i1 %tobool504, label %if.then508, label %lor.lhs.false505, !dbg !7473

lor.lhs.false505:                                 ; preds = %if.then502
  %call506 = tail call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %real_max.0) #7, !dbg !7474
  %tobool507 = icmp eq i8 %call506, 0, !dbg !7474
  br i1 %tobool507, label %if.then508, label %cleanup, !dbg !7475

if.then508:                                       ; preds = %lor.lhs.false505, %if.then502
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7476
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr_p, i32 1, %union.tree_node* %real_min.0, %union.tree_node* %real_max.0, %struct.bitmap_head_def* %74) #7, !dbg !7477
  br label %cleanup, !dbg !7477

if.else511:                                       ; preds = %land.lhs.true498, %if.end494
  %call512 = tail call fastcc i32 @compare_values(%union.tree_node* %anti_min.0, %union.tree_node* %real_max.0) #7, !dbg !7478
  %cmp513 = icmp eq i32 %call512, 1, !dbg !7480
  br i1 %cmp513, label %if.then519, label %lor.lhs.false515, !dbg !7481

lor.lhs.false515:                                 ; preds = %if.else511
  %call516 = tail call fastcc i32 @compare_values(%union.tree_node* %anti_max.0, %union.tree_node* %real_min.0) #7, !dbg !7482
  %cmp517 = icmp eq i32 %call516, -1, !dbg !7483
  br i1 %cmp517, label %if.then519, label %if.else521, !dbg !7484

if.then519:                                       ; preds = %lor.lhs.false515, %if.else511
  %75 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7485
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr_p, i32 1, %union.tree_node* %real_min.0, %union.tree_node* %real_max.0, %struct.bitmap_head_def* %75) #7, !dbg !7487
  br label %cleanup, !dbg !7488

if.else521:                                       ; preds = %lor.lhs.false515
  %call522 = tail call fastcc i32 @compare_values(%union.tree_node* %anti_max.0, %union.tree_node* %real_min.0) #7, !dbg !7489
  call void @llvm.dbg.value(metadata i32 %call522, metadata !7192, metadata !DIExpression()), !dbg !7462
  %switch3 = icmp ult i32 %call522, 2, !dbg !7491
  br i1 %switch3, label %land.lhs.true528, label %if.else598, !dbg !7491

land.lhs.true528:                                 ; preds = %if.else521
  %call529 = tail call fastcc i32 @compare_values(%union.tree_node* %anti_max.0, %union.tree_node* %real_max.0) #7, !dbg !7492
  %cmp530 = icmp eq i32 %call529, -1, !dbg !7493
  br i1 %cmp530, label %if.then532, label %if.else598, !dbg !7494

if.then532:                                       ; preds = %land.lhs.true528
  %call533 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %anti_max.0) #7, !dbg !7495
  %tobool534 = icmp eq i8 %call533, 0, !dbg !7495
  br i1 %tobool534, label %cond.end537, label %cond.true535, !dbg !7495

cond.true535:                                     ; preds = %if.then532
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1819, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7495
  br label %cond.end537, !dbg !7495

cond.end537:                                      ; preds = %if.then532, %cond.true535
  %type540 = getelementptr inbounds %union.tree_node, %union.tree_node* %anti_max.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7497
  %76 = load %union.tree_node*, %union.tree_node** %type540, align 8, !dbg !7497
  %call541 = tail call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %76) #7, !dbg !7499
  %tobool543 = icmp eq i8 %call541, 0, !dbg !7499
  br i1 %tobool543, label %if.else560, label %land.lhs.true544, !dbg !7500

land.lhs.true544:                                 ; preds = %cond.end537
  %call545 = tail call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %anti_max.0) #7, !dbg !7501
  %tobool547 = icmp eq i8 %call545, 0, !dbg !7501
  br i1 %tobool547, label %if.else560, label %if.then548, !dbg !7502

if.then548:                                       ; preds = %land.lhs.true544
  %77 = bitcast %union.tree_node** %min465 to %struct.tree_common**, !dbg !7503
  %78 = load %struct.tree_common*, %struct.tree_common** %77, align 8, !dbg !7503
  %type551 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %78, i64 0, i32 2, !dbg !7503
  %79 = load %union.tree_node*, %union.tree_node** %type551, align 8, !dbg !7503
  %call552 = tail call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %79) #7, !dbg !7506
  %tobool553 = icmp eq i8 %call552, 0, !dbg !7506
  br i1 %tobool553, label %if.then554, label %if.end555, !dbg !7507

if.then554:                                       ; preds = %if.then548
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr_p) #7, !dbg !7508
  br label %cleanup, !dbg !7510

if.end555:                                        ; preds = %if.then548
  %80 = load %struct.tree_common*, %struct.tree_common** %77, align 8, !dbg !7511
  %type558 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %80, i64 0, i32 2, !dbg !7511
  %81 = load %union.tree_node*, %union.tree_node** %type558, align 8, !dbg !7511
  %call559 = tail call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %81) #7, !dbg !7512
  call void @llvm.dbg.value(metadata %union.tree_node* %call559, metadata !7181, metadata !DIExpression()), !dbg !7462
  br label %if.end596, !dbg !7513

if.else560:                                       ; preds = %land.lhs.true544, %cond.end537
  %82 = bitcast %union.tree_node** %min465 to %struct.tree_common**, !dbg !7514
  %83 = load %struct.tree_common*, %struct.tree_common** %82, align 8, !dbg !7514
  %type563 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %83, i64 0, i32 2, !dbg !7514
  %84 = bitcast %union.tree_node** %type563 to i64**, !dbg !7514
  %85 = load i64*, i64** %84, align 8, !dbg !7514
  %bf.load565 = load i64, i64* %85, align 8, !dbg !7514
  %bf.cast56715 = and i64 %bf.load565, 65535, !dbg !7514
  %cmp568 = icmp eq i64 %bf.cast56715, 10, !dbg !7514
  %86 = bitcast i64* %85 to %union.tree_node*, !dbg !7514
  br i1 %cmp568, label %if.else589, label %lor.lhs.false570, !dbg !7514

lor.lhs.false570:                                 ; preds = %if.else560
  %cmp578 = icmp eq i64 %bf.cast56715, 12, !dbg !7514
  br i1 %cmp578, label %if.else589, label %if.then580, !dbg !7516

if.then580:                                       ; preds = %lor.lhs.false570
  %call587 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %86, i64 1) #6, !dbg !7517
  %call588 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %86, %union.tree_node* %anti_max.0, %union.tree_node* %call587) #6, !dbg !7517
  call void @llvm.dbg.value(metadata %union.tree_node* %call588, metadata !7181, metadata !DIExpression()), !dbg !7462
  br label %if.end596, !dbg !7518

if.else589:                                       ; preds = %lor.lhs.false570, %if.else560
  %call593 = tail call %union.tree_node* @size_int_kind(i64 1, i32 0) #6, !dbg !7519
  %call594 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %86, %union.tree_node* %anti_max.0, %union.tree_node* %call593) #6, !dbg !7519
  call void @llvm.dbg.value(metadata %union.tree_node* %call594, metadata !7181, metadata !DIExpression()), !dbg !7462
  br label %if.end596

if.end596:                                        ; preds = %if.then580, %if.else589, %if.end555
  %min478.1 = phi %union.tree_node* [ %call559, %if.end555 ], [ %call594, %if.else589 ], [ %call588, %if.then580 ], !dbg !7520
  call void @llvm.dbg.value(metadata %union.tree_node* %min478.1, metadata !7181, metadata !DIExpression()), !dbg !7462
  call void @llvm.dbg.value(metadata %union.tree_node* %real_max.0, metadata !7187, metadata !DIExpression()), !dbg !7462
  %87 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7521
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr_p, i32 1, %union.tree_node* %min478.1, %union.tree_node* %real_max.0, %struct.bitmap_head_def* %87) #7, !dbg !7522
  br label %cleanup, !dbg !7523

if.else598:                                       ; preds = %if.else521, %land.lhs.true528
  %call599 = tail call fastcc i32 @compare_values(%union.tree_node* %anti_min.0, %union.tree_node* %real_min.0) #7, !dbg !7524
  %cmp600 = icmp eq i32 %call599, 1, !dbg !7526
  br i1 %cmp600, label %land.lhs.true602, label %cleanup, !dbg !7527

land.lhs.true602:                                 ; preds = %if.else598
  %call603 = tail call fastcc i32 @compare_values(%union.tree_node* %anti_min.0, %union.tree_node* %real_max.0) #7, !dbg !7528
  call void @llvm.dbg.value(metadata i32 %call603, metadata !7192, metadata !DIExpression()), !dbg !7462
  switch i32 %call603, label %cleanup [
    i32 -1, label %if.then609
    i32 0, label %if.then609
  ], !dbg !7529

if.then609:                                       ; preds = %land.lhs.true602, %land.lhs.true602
  %call610 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %anti_min.0) #7, !dbg !7530
  %tobool611 = icmp eq i8 %call610, 0, !dbg !7530
  br i1 %tobool611, label %cond.end614, label %cond.true612, !dbg !7530

cond.true612:                                     ; preds = %if.then609
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1847, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7530
  br label %cond.end614, !dbg !7530

cond.end614:                                      ; preds = %if.then609, %cond.true612
  %type617 = getelementptr inbounds %union.tree_node, %union.tree_node* %anti_min.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7532
  %88 = load %union.tree_node*, %union.tree_node** %type617, align 8, !dbg !7532
  %call618 = tail call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %88) #7, !dbg !7534
  %tobool620 = icmp eq i8 %call618, 0, !dbg !7534
  br i1 %tobool620, label %if.else637, label %land.lhs.true621, !dbg !7535

land.lhs.true621:                                 ; preds = %cond.end614
  %call622 = tail call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %anti_min.0) #7, !dbg !7536
  %tobool624 = icmp eq i8 %call622, 0, !dbg !7536
  br i1 %tobool624, label %if.else637, label %if.then625, !dbg !7537

if.then625:                                       ; preds = %land.lhs.true621
  %89 = bitcast %union.tree_node** %min465 to %struct.tree_common**, !dbg !7538
  %90 = load %struct.tree_common*, %struct.tree_common** %89, align 8, !dbg !7538
  %type628 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %90, i64 0, i32 2, !dbg !7538
  %91 = load %union.tree_node*, %union.tree_node** %type628, align 8, !dbg !7538
  %call629 = tail call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %91) #7, !dbg !7541
  %tobool630 = icmp eq i8 %call629, 0, !dbg !7541
  br i1 %tobool630, label %if.then631, label %if.end632, !dbg !7542

if.then631:                                       ; preds = %if.then625
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr_p) #7, !dbg !7543
  br label %cleanup, !dbg !7545

if.end632:                                        ; preds = %if.then625
  %92 = load %struct.tree_common*, %struct.tree_common** %89, align 8, !dbg !7546
  %type635 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %92, i64 0, i32 2, !dbg !7546
  %93 = load %union.tree_node*, %union.tree_node** %type635, align 8, !dbg !7546
  %call636 = tail call fastcc %union.tree_node* @negative_overflow_infinity(%union.tree_node* %93) #7, !dbg !7547
  call void @llvm.dbg.value(metadata %union.tree_node* %call636, metadata !7187, metadata !DIExpression()), !dbg !7462
  br label %if.end673, !dbg !7548

if.else637:                                       ; preds = %land.lhs.true621, %cond.end614
  %94 = bitcast %union.tree_node** %min465 to %struct.tree_common**, !dbg !7549
  %95 = load %struct.tree_common*, %struct.tree_common** %94, align 8, !dbg !7549
  %type640 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %95, i64 0, i32 2, !dbg !7549
  %96 = bitcast %union.tree_node** %type640 to i64**, !dbg !7549
  %97 = load i64*, i64** %96, align 8, !dbg !7549
  %bf.load642 = load i64, i64* %97, align 8, !dbg !7549
  %bf.cast64413 = and i64 %bf.load642, 65535, !dbg !7549
  %cmp645 = icmp eq i64 %bf.cast64413, 10, !dbg !7549
  %98 = bitcast i64* %97 to %union.tree_node*, !dbg !7549
  br i1 %cmp645, label %if.else666, label %lor.lhs.false647, !dbg !7549

lor.lhs.false647:                                 ; preds = %if.else637
  %cmp655 = icmp eq i64 %bf.cast64413, 12, !dbg !7549
  br i1 %cmp655, label %if.else666, label %if.then657, !dbg !7551

if.then657:                                       ; preds = %lor.lhs.false647
  %call664 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %98, i64 1) #6, !dbg !7552
  %call665 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %98, %union.tree_node* %anti_min.0, %union.tree_node* %call664) #6, !dbg !7552
  call void @llvm.dbg.value(metadata %union.tree_node* %call665, metadata !7187, metadata !DIExpression()), !dbg !7462
  br label %if.end673, !dbg !7553

if.else666:                                       ; preds = %lor.lhs.false647, %if.else637
  %call670 = tail call %union.tree_node* @size_int_kind(i64 -1, i32 0) #6, !dbg !7554
  %call671 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %98, %union.tree_node* %anti_min.0, %union.tree_node* %call670) #6, !dbg !7554
  call void @llvm.dbg.value(metadata %union.tree_node* %call671, metadata !7187, metadata !DIExpression()), !dbg !7462
  br label %if.end673

if.end673:                                        ; preds = %if.then657, %if.else666, %if.end632
  %max479.1 = phi %union.tree_node* [ %call636, %if.end632 ], [ %call671, %if.else666 ], [ %call665, %if.then657 ], !dbg !7555
  call void @llvm.dbg.value(metadata %union.tree_node* %max479.1, metadata !7187, metadata !DIExpression()), !dbg !7462
  call void @llvm.dbg.value(metadata %union.tree_node* %real_min.0, metadata !7181, metadata !DIExpression()), !dbg !7462
  %99 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !7556
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr_p, i32 1, %union.tree_node* %real_min.0, %union.tree_node* %max479.1, %struct.bitmap_head_def* %99) #7, !dbg !7557
  br label %cleanup, !dbg !7558

cleanup:                                          ; preds = %lor.lhs.false505, %if.then508, %if.end596, %land.lhs.true602, %if.end673, %if.else598, %if.then519, %if.then631, %if.then554
  ret void

cleanup.cont698:                                  ; preds = %lor.lhs.false407, %lor.lhs.false403, %if.then68, %lor.lhs.false399, %lor.lhs.false395, %lor.lhs.false391, %if.end386, %lor.lhs.false456, %land.lhs.true460, %if.then476, %if.end443, %if.else446
  ret void, !dbg !7559
}

; Function Attrs: nounwind uwtable
define internal fastcc void @extract_range_from_ssa_name(%struct.value_range_d* %vr, %union.tree_node* %var) unnamed_addr #5 !dbg !7560 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !7562, metadata !DIExpression()), !dbg !7565
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !7563, metadata !DIExpression()), !dbg !7565
  %call = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %var) #7, !dbg !7566
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call, metadata !7564, metadata !DIExpression()), !dbg !7565
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i64 0, i32 0, !dbg !7567
  %0 = load i32, i32* %type, align 8, !dbg !7567
  %cmp = icmp eq i32 %0, 0, !dbg !7569
  br i1 %cmp, label %if.else, label %land.lhs.true, !dbg !7570

land.lhs.true:                                    ; preds = %entry
  %cmp2 = icmp eq i32 %0, 3, !dbg !7571
  br i1 %cmp2, label %if.else, label %if.then, !dbg !7572

if.then:                                          ; preds = %land.lhs.true
  tail call fastcc void @copy_value_range(%struct.value_range_d* %vr, %struct.value_range_d* %call) #7, !dbg !7573
  br label %if.end, !dbg !7573

if.else:                                          ; preds = %land.lhs.true, %entry
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* %var, %union.tree_node* %var, %struct.bitmap_head_def* null) #7, !dbg !7574
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !7575
  tail call fastcc void @add_equivalence(%struct.bitmap_head_def** nonnull %equiv, %union.tree_node* %var) #7, !dbg !7576
  ret void, !dbg !7577
}

; Function Attrs: nounwind uwtable
define internal fastcc void @extract_range_from_binary_expr(%struct.value_range_d* %vr, i32 %code, %union.tree_node* %expr_type, %union.tree_node* %op0, %union.tree_node* %op1) unnamed_addr #5 !dbg !7578 {
entry:
  %vr0 = alloca %struct.value_range_d, align 8
  %vr1 = alloca %struct.value_range_d, align 8
  %val = alloca [4 x %union.tree_node*], align 16
  %sop = alloca i8, align 1
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !7582, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i32 %code, metadata !7583, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %expr_type, metadata !7584, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %op0, metadata !7585, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !7586, metadata !DIExpression()), !dbg !7621
  %0 = bitcast %struct.value_range_d* %vr0 to i8*, !dbg !7622
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #8, !dbg !7622
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %0, i8 0, i64 32, i1 false), !dbg !7623
  %1 = bitcast %struct.value_range_d* %vr1 to i8*, !dbg !7624
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #8, !dbg !7624
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1, i8 0, i64 32, i1 false), !dbg !7625
  switch i32 %code, label %if.then [
    i32 63, label %if.end52
    i32 64, label %if.end52
    i32 66, label %if.end52
    i32 65, label %if.end52
    i32 67, label %if.end52
    i32 69, label %if.end52
    i32 68, label %if.end52
    i32 76, label %if.end52
    i32 70, label %if.end52
    i32 84, label %if.end52
    i32 80, label %if.end52
    i32 81, label %if.end52
    i32 89, label %if.end52
    i32 87, label %if.end52
    i32 93, label %if.end52
    i32 94, label %if.end52
  ], !dbg !7626

if.then:                                          ; preds = %entry
  %call = tail call fastcc %union.tree_node* @op_with_constant_singleton_value_range(%union.tree_node* %op0) #7, !dbg !7627
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !7593, metadata !DIExpression()), !dbg !7628
  %call31 = tail call fastcc %union.tree_node* @op_with_constant_singleton_value_range(%union.tree_node* %op1) #7, !dbg !7629
  call void @llvm.dbg.value(metadata %union.tree_node* %call31, metadata !7596, metadata !DIExpression()), !dbg !7628
  %tobool = icmp ne %union.tree_node* %call, null, !dbg !7630
  %tobool32 = icmp ne %union.tree_node* %call31, null, !dbg !7631
  %or.cond = or i1 %tobool, %tobool32, !dbg !7632
  br i1 %or.cond, label %if.then33, label %if.end49, !dbg !7632

if.then33:                                        ; preds = %if.then
  %tobool34 = icmp eq %union.tree_node* %call, null, !dbg !7633
  %call.op0 = select i1 %tobool34, %union.tree_node* %op0, %union.tree_node* %call, !dbg !7633
  %tobool35 = icmp eq %union.tree_node* %call31, null, !dbg !7633
  %cond39 = select i1 %tobool35, %union.tree_node* %op1, %union.tree_node* %call31, !dbg !7633
  %call40 = tail call %union.tree_node* @fold_binary_loc(i32 0, i32 %code, %union.tree_node* %expr_type, %union.tree_node* %call.op0, %union.tree_node* %cond39) #6, !dbg !7633
  call void @llvm.dbg.value(metadata %union.tree_node* %call40, metadata !7597, metadata !DIExpression()), !dbg !7634
  %tobool41 = icmp eq %union.tree_node* %call40, null, !dbg !7635
  br i1 %tobool41, label %cleanup, label %land.lhs.true42, !dbg !7637

land.lhs.true42:                                  ; preds = %if.then33
  %call43 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %call40) #6, !dbg !7638
  %tobool44 = icmp eq i8 %call43, 0, !dbg !7638
  br i1 %tobool44, label %cleanup, label %land.lhs.true45, !dbg !7639

land.lhs.true45:                                  ; preds = %land.lhs.true42
  %call46 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* nonnull %call40) #7, !dbg !7640
  %tobool47 = icmp eq i8 %call46, 0, !dbg !7640
  br i1 %tobool47, label %if.then48, label %cleanup, !dbg !7641

if.then48:                                        ; preds = %land.lhs.true45
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* nonnull %call40, %union.tree_node* nonnull %call40, %struct.bitmap_head_def* null) #7, !dbg !7642
  br label %cleanup, !dbg !7644

cleanup:                                          ; preds = %land.lhs.true45, %land.lhs.true42, %if.then33, %if.then48
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then48 ], [ true, %land.lhs.true45 ], [ true, %land.lhs.true42 ], [ true, %if.then33 ]
  br i1 %cleanup.dest.slot.0, label %if.end49, label %cleanup1008

if.end49:                                         ; preds = %cleanup, %if.then
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !7645
  br label %cleanup1008, !dbg !7646

if.end52:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7647
  %bf.load = load i64, i64* %2, align 8, !dbg !7647
  %bf.cast9 = and i64 %bf.load, 65535, !dbg !7649
  %cmp53 = icmp eq i64 %bf.cast9, 141, !dbg !7649
  br i1 %cmp53, label %if.then55, label %if.else, !dbg !7650

if.then55:                                        ; preds = %if.end52
  %call56 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %op0) #7, !dbg !7651
  %3 = bitcast %struct.value_range_d* %call56 to i8*, !dbg !7652
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* align 8 %3, i64 32, i1 false), !dbg !7652
  br label %if.end62, !dbg !7653

if.else:                                          ; preds = %if.end52
  %call57 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %op0) #6, !dbg !7654
  %tobool58 = icmp eq i8 %call57, 0, !dbg !7654
  br i1 %tobool58, label %if.else60, label %if.then59, !dbg !7656

if.then59:                                        ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  call fastcc void @set_value_range_to_value(%struct.value_range_d* nonnull %vr0, %union.tree_node* %op0, %struct.bitmap_head_def* null) #7, !dbg !7657
  br label %if.end62, !dbg !7657

if.else60:                                        ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* nonnull %vr0) #7, !dbg !7658
  br label %if.end62

if.end62:                                         ; preds = %if.then59, %if.else60, %if.then55
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7659
  %bf.load64 = load i64, i64* %4, align 8, !dbg !7659
  %bf.cast6610 = and i64 %bf.load64, 65535, !dbg !7661
  %cmp67 = icmp eq i64 %bf.cast6610, 141, !dbg !7661
  br i1 %cmp67, label %if.then69, label %if.else71, !dbg !7662

if.then69:                                        ; preds = %if.end62
  %call70 = call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %op1) #7, !dbg !7663
  %5 = bitcast %struct.value_range_d* %call70 to i8*, !dbg !7664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* align 8 %5, i64 32, i1 false), !dbg !7664
  br label %if.end77, !dbg !7665

if.else71:                                        ; preds = %if.end62
  %call72 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %op1) #6, !dbg !7666
  %tobool73 = icmp eq i8 %call72, 0, !dbg !7666
  br i1 %tobool73, label %if.else75, label %if.then74, !dbg !7668

if.then74:                                        ; preds = %if.else71
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  call fastcc void @set_value_range_to_value(%struct.value_range_d* nonnull %vr1, %union.tree_node* %op1, %struct.bitmap_head_def* null) #7, !dbg !7669
  br label %if.end77, !dbg !7669

if.else75:                                        ; preds = %if.else71
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* nonnull %vr1) #7, !dbg !7670
  br label %if.end77

if.end77:                                         ; preds = %if.then74, %if.else75, %if.then69
  %type78 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 0, !dbg !7671
  %6 = load i32, i32* %type78, align 8, !dbg !7671
  %cmp79 = icmp eq i32 %6, 0, !dbg !7673
  br i1 %cmp79, label %if.then85, label %lor.lhs.false81, !dbg !7674

lor.lhs.false81:                                  ; preds = %if.end77
  %type82 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 0, !dbg !7675
  %7 = load i32, i32* %type82, align 8, !dbg !7675
  %cmp83 = icmp eq i32 %7, 0, !dbg !7676
  br i1 %cmp83, label %if.then85, label %if.end86, !dbg !7677

if.then85:                                        ; preds = %lor.lhs.false81, %if.end77
  call fastcc void @set_value_range_to_undefined(%struct.value_range_d* %vr) #7, !dbg !7678
  br label %cleanup1008, !dbg !7680

if.end86:                                         ; preds = %lor.lhs.false81
  call void @llvm.dbg.value(metadata i32 %6, metadata !7587, metadata !DIExpression()), !dbg !7621
  switch i32 %code, label %land.lhs.true111 [
    i32 89, label %if.end133
    i32 93, label %if.end133
    i32 94, label %if.end133
    i32 67, label %if.end133
    i32 69, label %if.end133
    i32 68, label %if.end133
    i32 76, label %if.end133
    i32 70, label %if.end133
  ], !dbg !7681

land.lhs.true111:                                 ; preds = %if.end86
  %cmp113 = icmp eq i32 %6, 3, !dbg !7683
  br i1 %cmp113, label %if.then132, label %lor.lhs.false115, !dbg !7684

lor.lhs.false115:                                 ; preds = %land.lhs.true111
  %cmp117 = icmp eq i32 %7, 3, !dbg !7685
  br i1 %cmp117, label %if.then132, label %lor.lhs.false119, !dbg !7686

lor.lhs.false119:                                 ; preds = %lor.lhs.false115
  %cmp122 = icmp eq i32 %6, %7, !dbg !7687
  br i1 %cmp122, label %lor.lhs.false124, label %if.then132, !dbg !7688

lor.lhs.false124:                                 ; preds = %lor.lhs.false119
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call125 = call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* nonnull %vr0) #7, !dbg !7689
  %tobool127 = icmp eq i8 %call125, 0, !dbg !7689
  br i1 %tobool127, label %lor.lhs.false128, label %if.then132, !dbg !7690

lor.lhs.false128:                                 ; preds = %lor.lhs.false124
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call129 = call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* nonnull %vr1) #7, !dbg !7691
  %tobool131 = icmp eq i8 %call129, 0, !dbg !7691
  br i1 %tobool131, label %if.end133, label %if.then132, !dbg !7692

if.then132:                                       ; preds = %lor.lhs.false128, %lor.lhs.false124, %lor.lhs.false119, %lor.lhs.false115, %land.lhs.true111
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !7693
  br label %cleanup1008, !dbg !7695

if.end133:                                        ; preds = %lor.lhs.false128, %if.end86, %if.end86, %if.end86, %if.end86, %if.end86, %if.end86, %if.end86, %if.end86
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr_type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7696
  %bf.load135 = load i64, i64* %8, align 8, !dbg !7696
  %bf.cast13711 = and i64 %bf.load135, 65535, !dbg !7696
  %cmp138 = icmp eq i64 %bf.cast13711, 10, !dbg !7696
  br i1 %cmp138, label %if.then182, label %lor.lhs.false140, !dbg !7696

lor.lhs.false140:                                 ; preds = %if.end133
  %cmp145 = icmp eq i64 %bf.cast13711, 12, !dbg !7696
  br i1 %cmp145, label %if.then182, label %lor.lhs.false147, !dbg !7698

lor.lhs.false147:                                 ; preds = %lor.lhs.false140
  %type148 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7699
  %9 = bitcast %union.tree_node** %type148 to i64**, !dbg !7699
  %10 = load i64*, i64** %9, align 8, !dbg !7699
  %bf.load150 = load i64, i64* %10, align 8, !dbg !7699
  %bf.cast15213 = and i64 %bf.load150, 65535, !dbg !7699
  %cmp153 = icmp eq i64 %bf.cast15213, 10, !dbg !7699
  br i1 %cmp153, label %if.then182, label %lor.lhs.false155, !dbg !7699

lor.lhs.false155:                                 ; preds = %lor.lhs.false147
  %cmp162 = icmp eq i64 %bf.cast15213, 12, !dbg !7699
  br i1 %cmp162, label %if.then182, label %lor.lhs.false164, !dbg !7700

lor.lhs.false164:                                 ; preds = %lor.lhs.false155
  %type166 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7701
  %11 = bitcast %union.tree_node** %type166 to i64**, !dbg !7701
  %12 = load i64*, i64** %11, align 8, !dbg !7701
  %bf.load168 = load i64, i64* %12, align 8, !dbg !7701
  %bf.cast17015 = and i64 %bf.load168, 65535, !dbg !7701
  %cmp171 = icmp eq i64 %bf.cast17015, 10, !dbg !7701
  br i1 %cmp171, label %if.then182, label %lor.lhs.false173, !dbg !7701

lor.lhs.false173:                                 ; preds = %lor.lhs.false164
  %cmp180 = icmp eq i64 %bf.cast17015, 12, !dbg !7701
  br i1 %cmp180, label %if.then182, label %if.end236, !dbg !7702

if.then182:                                       ; preds = %lor.lhs.false173, %lor.lhs.false164, %lor.lhs.false155, %lor.lhs.false147, %lor.lhs.false140, %if.end133
  switch i32 %code, label %cond.true212 [
    i32 80, label %if.then188
    i32 81, label %if.then188
    i32 66, label %cond.end214
  ], !dbg !7703

if.then188:                                       ; preds = %if.then182, %if.then182
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call189 = call fastcc zeroext i8 @range_is_nonnull(%struct.value_range_d* nonnull %vr0) #7, !dbg !7706
  %tobool191 = icmp eq i8 %call189, 0, !dbg !7706
  br i1 %tobool191, label %if.else197, label %land.lhs.true192, !dbg !7709

land.lhs.true192:                                 ; preds = %if.then188
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call193 = call fastcc zeroext i8 @range_is_nonnull(%struct.value_range_d* nonnull %vr1) #7, !dbg !7710
  %tobool195 = icmp eq i8 %call193, 0, !dbg !7710
  br i1 %tobool195, label %if.else197, label %if.then196, !dbg !7711

if.then196:                                       ; preds = %land.lhs.true192
  call fastcc void @set_value_range_to_nonnull(%struct.value_range_d* %vr, %union.tree_node* %expr_type) #7, !dbg !7712
  br label %cleanup1008, !dbg !7712

if.else197:                                       ; preds = %land.lhs.true192, %if.then188
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call198 = call fastcc zeroext i8 @range_is_null(%struct.value_range_d* nonnull %vr0) #7, !dbg !7713
  %tobool200 = icmp eq i8 %call198, 0, !dbg !7713
  br i1 %tobool200, label %if.else206, label %land.lhs.true201, !dbg !7715

land.lhs.true201:                                 ; preds = %if.else197
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call202 = call fastcc zeroext i8 @range_is_null(%struct.value_range_d* nonnull %vr1) #7, !dbg !7716
  %tobool204 = icmp eq i8 %call202, 0, !dbg !7716
  br i1 %tobool204, label %if.else206, label %if.then205, !dbg !7717

if.then205:                                       ; preds = %land.lhs.true201
  call fastcc void @set_value_range_to_null(%struct.value_range_d* %vr, %union.tree_node* %expr_type) #7, !dbg !7718
  br label %cleanup1008, !dbg !7718

if.else206:                                       ; preds = %land.lhs.true201, %if.else197
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !7719
  br label %cleanup1008

cond.true212:                                     ; preds = %if.then182
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 2171, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7720
  br label %cond.end214, !dbg !7720

cond.end214:                                      ; preds = %if.then182, %cond.true212
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call216 = call fastcc zeroext i8 @range_is_nonnull(%struct.value_range_d* nonnull %vr0) #7, !dbg !7721
  %tobool218 = icmp eq i8 %call216, 0, !dbg !7721
  br i1 %tobool218, label %lor.lhs.false219, label %if.then223, !dbg !7723

lor.lhs.false219:                                 ; preds = %cond.end214
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call220 = call fastcc zeroext i8 @range_is_nonnull(%struct.value_range_d* nonnull %vr1) #7, !dbg !7724
  %tobool222 = icmp eq i8 %call220, 0, !dbg !7724
  br i1 %tobool222, label %if.else224, label %if.then223, !dbg !7725

if.then223:                                       ; preds = %lor.lhs.false219, %cond.end214
  call fastcc void @set_value_range_to_nonnull(%struct.value_range_d* %vr, %union.tree_node* %expr_type) #7, !dbg !7726
  br label %cleanup1008, !dbg !7726

if.else224:                                       ; preds = %lor.lhs.false219
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call225 = call fastcc zeroext i8 @range_is_null(%struct.value_range_d* nonnull %vr0) #7, !dbg !7727
  %tobool227 = icmp eq i8 %call225, 0, !dbg !7727
  br i1 %tobool227, label %if.else233, label %land.lhs.true228, !dbg !7729

land.lhs.true228:                                 ; preds = %if.else224
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call229 = call fastcc zeroext i8 @range_is_null(%struct.value_range_d* nonnull %vr1) #7, !dbg !7730
  %tobool231 = icmp eq i8 %call229, 0, !dbg !7730
  br i1 %tobool231, label %if.else233, label %if.then232, !dbg !7731

if.then232:                                       ; preds = %land.lhs.true228
  call fastcc void @set_value_range_to_null(%struct.value_range_d* %vr, %union.tree_node* %expr_type) #7, !dbg !7732
  br label %cleanup1008, !dbg !7732

if.else233:                                       ; preds = %land.lhs.true228, %if.else224
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !7733
  br label %cleanup1008

if.end236:                                        ; preds = %lor.lhs.false173
  switch i32 %code, label %if.else942 [
    i32 93, label %land.lhs.true245
    i32 94, label %land.lhs.true274
    i32 63, label %land.lhs.true348
    i32 80, label %if.end353
    i32 81, label %if.end353
    i32 65, label %if.then419
    i32 67, label %if.then419
    i32 69, label %if.then419
    i32 68, label %if.then419
    i32 76, label %if.then419
    i32 70, label %if.then419
    i32 84, label %if.then419
    i32 64, label %if.then763
    i32 89, label %if.then778
    i32 87, label %if.then850
  ], !dbg !7734

land.lhs.true245:                                 ; preds = %if.end236
  %13 = load i32, i32* %type78, align 8, !dbg !7735
  %cmp247 = icmp eq i32 %13, 1, !dbg !7738
  br i1 %cmp247, label %land.lhs.true249, label %lor.lhs.false257, !dbg !7739

land.lhs.true249:                                 ; preds = %land.lhs.true245
  %min250 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !7740
  %14 = load %union.tree_node*, %union.tree_node** %min250, align 8, !dbg !7740
  %call251 = call i32 @integer_zerop(%union.tree_node* %14) #6, !dbg !7741
  %tobool252 = icmp eq i32 %call251, 0, !dbg !7741
  br i1 %tobool252, label %lor.lhs.false257, label %land.lhs.true253, !dbg !7742

land.lhs.true253:                                 ; preds = %land.lhs.true249
  %max254 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !7743
  %15 = load %union.tree_node*, %union.tree_node** %max254, align 8, !dbg !7743
  %call255 = call i32 @integer_zerop(%union.tree_node* %15) #6, !dbg !7744
  %tobool256 = icmp eq i32 %call255, 0, !dbg !7744
  br i1 %tobool256, label %lor.lhs.false257, label %if.then269, !dbg !7745

lor.lhs.false257:                                 ; preds = %land.lhs.true253, %land.lhs.true249, %land.lhs.true245
  %16 = load i32, i32* %type82, align 8, !dbg !7746
  %cmp259 = icmp eq i32 %16, 1, !dbg !7747
  br i1 %cmp259, label %land.lhs.true261, label %if.else271, !dbg !7748

land.lhs.true261:                                 ; preds = %lor.lhs.false257
  %min262 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !7749
  %17 = load %union.tree_node*, %union.tree_node** %min262, align 8, !dbg !7749
  %call263 = call i32 @integer_zerop(%union.tree_node* %17) #6, !dbg !7750
  %tobool264 = icmp eq i32 %call263, 0, !dbg !7750
  br i1 %tobool264, label %if.else271, label %land.lhs.true265, !dbg !7751

land.lhs.true265:                                 ; preds = %land.lhs.true261
  %max266 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !7752
  %18 = load %union.tree_node*, %union.tree_node** %max266, align 8, !dbg !7752
  %call267 = call i32 @integer_zerop(%union.tree_node* %18) #6, !dbg !7753
  %tobool268 = icmp eq i32 %call267, 0, !dbg !7753
  br i1 %tobool268, label %if.else271, label %if.then269, !dbg !7754

if.then269:                                       ; preds = %land.lhs.true253, %land.lhs.true265
  call void @llvm.dbg.value(metadata i32 1, metadata !7587, metadata !DIExpression()), !dbg !7621
  %call270 = call %union.tree_node* @build_int_cst(%union.tree_node* %expr_type, i64 0) #6, !dbg !7755
  call void @llvm.dbg.value(metadata %union.tree_node* %call270, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %call270, metadata !7588, metadata !DIExpression()), !dbg !7621
  br label %if.end948, !dbg !7757

if.else271:                                       ; preds = %land.lhs.true265, %land.lhs.true261, %lor.lhs.false257
  br i1 false, label %if.else271.land.lhs.true274_crit_edge, label %if.else300, !dbg !7758

if.else271.land.lhs.true274_crit_edge:            ; preds = %if.else271
  br label %land.lhs.true274, !dbg !7758

land.lhs.true274:                                 ; preds = %if.else271.land.lhs.true274_crit_edge, %if.end236
  %19 = load i32, i32* %type78, align 8, !dbg !7760
  %cmp276 = icmp eq i32 %19, 1, !dbg !7761
  br i1 %cmp276, label %land.lhs.true278, label %lor.lhs.false286, !dbg !7762

land.lhs.true278:                                 ; preds = %land.lhs.true274
  %min279 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !7763
  %20 = load %union.tree_node*, %union.tree_node** %min279, align 8, !dbg !7763
  %call280 = call i32 @integer_onep(%union.tree_node* %20) #6, !dbg !7764
  %tobool281 = icmp eq i32 %call280, 0, !dbg !7764
  br i1 %tobool281, label %lor.lhs.false286, label %land.lhs.true282, !dbg !7765

land.lhs.true282:                                 ; preds = %land.lhs.true278
  %max283 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !7766
  %21 = load %union.tree_node*, %union.tree_node** %max283, align 8, !dbg !7766
  %call284 = call i32 @integer_onep(%union.tree_node* %21) #6, !dbg !7767
  %tobool285 = icmp eq i32 %call284, 0, !dbg !7767
  br i1 %tobool285, label %lor.lhs.false286, label %if.then298, !dbg !7768

lor.lhs.false286:                                 ; preds = %land.lhs.true282, %land.lhs.true278, %land.lhs.true274
  %22 = load i32, i32* %type82, align 8, !dbg !7769
  %cmp288 = icmp eq i32 %22, 1, !dbg !7770
  br i1 %cmp288, label %land.lhs.true290, label %if.else300, !dbg !7771

land.lhs.true290:                                 ; preds = %lor.lhs.false286
  %min291 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !7772
  %23 = load %union.tree_node*, %union.tree_node** %min291, align 8, !dbg !7772
  %call292 = call i32 @integer_onep(%union.tree_node* %23) #6, !dbg !7773
  %tobool293 = icmp eq i32 %call292, 0, !dbg !7773
  br i1 %tobool293, label %if.else300, label %land.lhs.true294, !dbg !7774

land.lhs.true294:                                 ; preds = %land.lhs.true290
  %max295 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !7775
  %24 = load %union.tree_node*, %union.tree_node** %max295, align 8, !dbg !7775
  %call296 = call i32 @integer_onep(%union.tree_node* %24) #6, !dbg !7776
  %tobool297 = icmp eq i32 %call296, 0, !dbg !7776
  br i1 %tobool297, label %if.else300, label %if.then298, !dbg !7777

if.then298:                                       ; preds = %land.lhs.true282, %land.lhs.true294
  call void @llvm.dbg.value(metadata i32 1, metadata !7587, metadata !DIExpression()), !dbg !7621
  %call299 = call %union.tree_node* @build_int_cst(%union.tree_node* %expr_type, i64 1) #6, !dbg !7778
  call void @llvm.dbg.value(metadata %union.tree_node* %call299, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %call299, metadata !7588, metadata !DIExpression()), !dbg !7621
  br label %if.end948, !dbg !7780

if.else300:                                       ; preds = %land.lhs.true294, %land.lhs.true290, %lor.lhs.false286, %if.else271
  %25 = load i32, i32* %type78, align 8, !dbg !7781
  %cmp302 = icmp eq i32 %25, 3, !dbg !7783
  br i1 %cmp302, label %if.else332, label %land.lhs.true304, !dbg !7784

land.lhs.true304:                                 ; preds = %if.else300
  %26 = load i32, i32* %type82, align 8, !dbg !7785
  %cmp306 = icmp eq i32 %26, 3, !dbg !7786
  br i1 %cmp306, label %if.else332, label %land.lhs.true308, !dbg !7787

land.lhs.true308:                                 ; preds = %land.lhs.true304
  %cmp311 = icmp eq i32 %25, %26, !dbg !7788
  br i1 %cmp311, label %land.lhs.true313, label %if.else332, !dbg !7789

land.lhs.true313:                                 ; preds = %land.lhs.true308
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call314 = call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* nonnull %vr0) #7, !dbg !7790
  %tobool315 = icmp eq i8 %call314, 0, !dbg !7790
  br i1 %tobool315, label %land.lhs.true316, label %if.else332, !dbg !7791

land.lhs.true316:                                 ; preds = %land.lhs.true313
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call317 = call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* nonnull %vr0) #7, !dbg !7792
  %tobool318 = icmp eq i8 %call317, 0, !dbg !7792
  br i1 %tobool318, label %land.lhs.true319, label %if.else332, !dbg !7793

land.lhs.true319:                                 ; preds = %land.lhs.true316
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call320 = call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* nonnull %vr1) #7, !dbg !7794
  %tobool321 = icmp eq i8 %call320, 0, !dbg !7794
  br i1 %tobool321, label %land.lhs.true322, label %if.else332, !dbg !7795

land.lhs.true322:                                 ; preds = %land.lhs.true319
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call323 = call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* nonnull %vr1) #7, !dbg !7796
  %tobool324 = icmp eq i8 %call323, 0, !dbg !7796
  br i1 %tobool324, label %if.then325, label %if.else332, !dbg !7797

if.then325:                                       ; preds = %land.lhs.true322
  %min326 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !7798
  %27 = load %union.tree_node*, %union.tree_node** %min326, align 8, !dbg !7798
  %min327 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !7798
  %28 = load %union.tree_node*, %union.tree_node** %min327, align 8, !dbg !7798
  %call328 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %code, %union.tree_node* %expr_type, %union.tree_node* %27, %union.tree_node* %28) #6, !dbg !7798
  call void @llvm.dbg.value(metadata %union.tree_node* %call328, metadata !7588, metadata !DIExpression()), !dbg !7621
  %max329 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !7800
  %29 = load %union.tree_node*, %union.tree_node** %max329, align 8, !dbg !7800
  %max330 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !7800
  %30 = load %union.tree_node*, %union.tree_node** %max330, align 8, !dbg !7800
  %call331 = call %union.tree_node* @fold_binary_loc(i32 0, i32 %code, %union.tree_node* %expr_type, %union.tree_node* %29, %union.tree_node* %30) #6, !dbg !7800
  call void @llvm.dbg.value(metadata %union.tree_node* %call331, metadata !7589, metadata !DIExpression()), !dbg !7621
  br label %if.end948

if.else332:                                       ; preds = %land.lhs.true322, %land.lhs.true319, %land.lhs.true316, %land.lhs.true313, %land.lhs.true304, %if.else300, %land.lhs.true308
  call fastcc void @set_value_range_to_truthvalue(%struct.value_range_d* %vr, %union.tree_node* %expr_type) #7, !dbg !7801
  br label %cleanup1008, !dbg !7803

land.lhs.true348:                                 ; preds = %if.end236
  %31 = load i32, i32* %type78, align 8, !dbg !7804
  %cmp350 = icmp eq i32 %31, 2, !dbg !7807
  br i1 %cmp350, label %if.then352, label %if.end353, !dbg !7808

if.then352:                                       ; preds = %land.lhs.true348
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !7809
  br label %cleanup1008, !dbg !7811

if.end353:                                        ; preds = %if.end236, %if.end236, %land.lhs.true348
  %min354 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !7812
  %32 = load %union.tree_node*, %union.tree_node** %min354, align 8, !dbg !7812
  %min355 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !7813
  %33 = load %union.tree_node*, %union.tree_node** %min355, align 8, !dbg !7813
  %call356 = call fastcc %union.tree_node* @vrp_int_const_binop(i32 %code, %union.tree_node* %32, %union.tree_node* %33) #7, !dbg !7814
  call void @llvm.dbg.value(metadata %union.tree_node* %call356, metadata !7588, metadata !DIExpression()), !dbg !7621
  %max357 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !7815
  %34 = load %union.tree_node*, %union.tree_node** %max357, align 8, !dbg !7815
  %max358 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !7816
  %35 = load %union.tree_node*, %union.tree_node** %max358, align 8, !dbg !7816
  %call359 = call fastcc %union.tree_node* @vrp_int_const_binop(i32 %code, %union.tree_node* %34, %union.tree_node* %35) #7, !dbg !7817
  call void @llvm.dbg.value(metadata %union.tree_node* %call359, metadata !7589, metadata !DIExpression()), !dbg !7621
  %cmp360 = icmp eq i32 %code, 63, !dbg !7818
  br i1 %cmp360, label %land.lhs.true362, label %if.end948, !dbg !7820

land.lhs.true362:                                 ; preds = %if.end353
  %36 = getelementptr inbounds %union.tree_node, %union.tree_node* %call356, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7821
  %bf.load364 = load i64, i64* %36, align 8, !dbg !7821
  %bf.cast36632 = and i64 %bf.load364, 134217728, !dbg !7821
  %tobool367 = icmp eq i64 %bf.cast36632, 0, !dbg !7821
  br i1 %tobool367, label %if.end948, label %land.lhs.true368, !dbg !7822

land.lhs.true368:                                 ; preds = %land.lhs.true362
  %call369 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %call356) #7, !dbg !7823
  %tobool370 = icmp eq i8 %call369, 0, !dbg !7823
  br i1 %tobool370, label %land.lhs.true371, label %if.end948, !dbg !7824

land.lhs.true371:                                 ; preds = %land.lhs.true368
  %37 = getelementptr inbounds %union.tree_node, %union.tree_node* %call359, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7825
  %bf.load373 = load i64, i64* %37, align 8, !dbg !7825
  %bf.cast37633 = and i64 %bf.load373, 134217728, !dbg !7825
  %tobool377 = icmp eq i64 %bf.cast37633, 0, !dbg !7825
  br i1 %tobool377, label %if.end948, label %land.lhs.true378, !dbg !7826

land.lhs.true378:                                 ; preds = %land.lhs.true371
  %call379 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %call359) #7, !dbg !7827
  %tobool380 = icmp eq i8 %call379, 0, !dbg !7827
  br i1 %tobool380, label %if.then381, label %if.end948, !dbg !7828

if.then381:                                       ; preds = %land.lhs.true378
  %type383 = getelementptr inbounds %union.tree_node, %union.tree_node* %call356, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7829
  %38 = load %union.tree_node*, %union.tree_node** %type383, align 8, !dbg !7829
  %int_cst384 = getelementptr inbounds %union.tree_node, %union.tree_node* %call356, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7831
  %low = bitcast i32* %int_cst384 to i64*, !dbg !7831
  %39 = load i64, i64* %low, align 8, !dbg !7831
  %high = getelementptr inbounds i32, i32* %int_cst384, i64 2, !dbg !7832
  %40 = bitcast i32* %high to i64*, !dbg !7832
  %41 = load i64, i64* %40, align 8, !dbg !7832
  %call387 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %38, i64 %39, i64 %41) #6, !dbg !7833
  call void @llvm.dbg.value(metadata %union.tree_node* %call387, metadata !7588, metadata !DIExpression()), !dbg !7621
  %type389 = getelementptr inbounds %union.tree_node, %union.tree_node* %call359, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7834
  %42 = load %union.tree_node*, %union.tree_node** %type389, align 8, !dbg !7834
  %int_cst391 = getelementptr inbounds %union.tree_node, %union.tree_node* %call359, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7835
  %low392 = bitcast i32* %int_cst391 to i64*, !dbg !7835
  %43 = load i64, i64* %low392, align 8, !dbg !7835
  %high395 = getelementptr inbounds i32, i32* %int_cst391, i64 2, !dbg !7836
  %44 = bitcast i32* %high395 to i64*, !dbg !7836
  %45 = load i64, i64* %44, align 8, !dbg !7836
  %call396 = call %union.tree_node* @build_int_cst_wide(%union.tree_node* %42, i64 %43, i64 %45) #6, !dbg !7837
  call void @llvm.dbg.value(metadata %union.tree_node* %call396, metadata !7589, metadata !DIExpression()), !dbg !7621
  br label %if.end948, !dbg !7838

if.then419:                                       ; preds = %if.end236, %if.end236, %if.end236, %if.end236, %if.end236, %if.end236, %if.end236
  %46 = bitcast [4 x %union.tree_node*]* %val to i8*, !dbg !7839
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %46) #8, !dbg !7839
  call void @llvm.dbg.declare(metadata [4 x %union.tree_node*]* %val, metadata !7600, metadata !DIExpression()), !dbg !7840
  call void @llvm.dbg.value(metadata i8* %sop, metadata !7607, metadata !DIExpression(DW_OP_deref)), !dbg !7841
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !7842
  switch i32 %code, label %if.end513 [
    i32 65, label %land.lhs.true422
    i32 84, label %if.then445
    i32 67, label %land.lhs.true482
    i32 69, label %land.lhs.true482
    i32 68, label %land.lhs.true482
    i32 76, label %land.lhs.true482
    i32 70, label %land.lhs.true482
  ], !dbg !7843

land.lhs.true422:                                 ; preds = %if.then419
  %47 = load i32, i32* %type78, align 8, !dbg !7845
  %cmp424 = icmp eq i32 %47, 2, !dbg !7846
  br i1 %cmp424, label %land.lhs.true426, label %if.end442, !dbg !7847

land.lhs.true426:                                 ; preds = %land.lhs.true422
  %bf.cast43331 = and i64 %bf.load150, 2097152, !dbg !7848
  %tobool434 = icmp eq i64 %bf.cast43331, 0, !dbg !7848
  %48 = load i32, i32* @flag_wrapv, align 4, !dbg !7848
  %49 = load i32, i32* @flag_trapv, align 4, !dbg !7848
  %50 = or i32 %48, %49, !dbg !7848
  %51 = icmp eq i32 %50, 0, !dbg !7848
  %or.cond5.not = and i1 %tobool434, %51, !dbg !7848
  %52 = load i32, i32* @flag_strict_overflow, align 4, !dbg !7848
  %tobool440 = icmp ne i32 %52, 0, !dbg !7848
  %or.cond6 = and i1 %or.cond5.not, %tobool440, !dbg !7848
  br i1 %or.cond6, label %if.end442, label %if.then441, !dbg !7848

if.then441:                                       ; preds = %land.lhs.true426
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !7849
  br label %cleanup755, !dbg !7851

if.end442:                                        ; preds = %land.lhs.true426, %land.lhs.true422
  switch i32 65, label %if.end513 [
    i32 84, label %if.then445
    i32 67, label %land.lhs.true482
    i32 69, label %land.lhs.true482
    i32 68, label %land.lhs.true482
    i32 76, label %land.lhs.true482
    i32 70, label %land.lhs.true482
  ], !dbg !7852

if.then445:                                       ; preds = %if.then419, %if.end442
  %53 = load i32, i32* %type82, align 8, !dbg !7853
  %cmp447 = icmp eq i32 %53, 2, !dbg !7857
  br i1 %cmp447, label %if.then465, label %lor.lhs.false449, !dbg !7858

lor.lhs.false449:                                 ; preds = %if.then445
  call void @llvm.dbg.value(metadata i8* %sop, metadata !7607, metadata !DIExpression(DW_OP_deref)), !dbg !7841
  %call450 = call fastcc zeroext i8 @vrp_expr_computes_nonnegative(%union.tree_node* %op1, i8* nonnull %sop) #7, !dbg !7859
  %tobool451 = icmp eq i8 %call450, 0, !dbg !7859
  br i1 %tobool451, label %if.then465, label %lor.lhs.false452, !dbg !7860

lor.lhs.false452:                                 ; preds = %lor.lhs.false449
  %max453 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !7861
  %54 = bitcast %union.tree_node** %max453 to %struct.tree_common**, !dbg !7861
  %55 = load %struct.tree_common*, %struct.tree_common** %54, align 8, !dbg !7861
  %type455 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %55, i64 0, i32 2, !dbg !7861
  %56 = load %union.tree_node*, %union.tree_node** %type455, align 8, !dbg !7861
  %type456 = bitcast %union.tree_node* %expr_type to %struct.tree_type*, !dbg !7862
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type456, i64 0, i32 6, !dbg !7862
  %bf.load457 = load i32, i32* %precision, align 4, !dbg !7862
  %bf.clear458 = and i32 %bf.load457, 1023, !dbg !7862
  %sub = add nsw i32 %bf.clear458, -1, !dbg !7863
  %conv459 = sext i32 %sub to i64, !dbg !7862
  %call460 = call %union.tree_node* @build_int_cst(%union.tree_node* %56, i64 %conv459) #6, !dbg !7864
  %57 = load %union.tree_node*, %union.tree_node** %max453, align 8, !dbg !7865
  %call462 = call fastcc i32 @operand_less_p(%union.tree_node* %call460, %union.tree_node* %57) #7, !dbg !7866
  %cmp463 = icmp eq i32 %call462, 0, !dbg !7867
  br i1 %cmp463, label %if.end513, label %if.then465, !dbg !7868

if.then465:                                       ; preds = %lor.lhs.false452, %lor.lhs.false449, %if.then445
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !7869
  br label %cleanup755, !dbg !7871

land.lhs.true482:                                 ; preds = %if.then419, %if.then419, %if.then419, %if.then419, %if.then419, %if.end442, %if.end442, %if.end442, %if.end442, %if.end442
  %58 = load i32, i32* %type78, align 8, !dbg !7872
  %cmp484 = icmp eq i32 %58, 1, !dbg !7874
  br i1 %cmp484, label %lor.lhs.false486, label %if.then490, !dbg !7875

lor.lhs.false486:                                 ; preds = %land.lhs.true482
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !7591, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call487 = call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* nonnull %vr0) #7, !dbg !7876
  %tobool489 = icmp eq i8 %call487, 0, !dbg !7876
  br i1 %tobool489, label %if.end513, label %if.then490, !dbg !7877

if.then490:                                       ; preds = %lor.lhs.false486, %land.lhs.true482
  %59 = load i32, i32* %type82, align 8, !dbg !7878
  %cmp492 = icmp eq i32 %59, 1, !dbg !7881
  br i1 %cmp492, label %land.lhs.true494, label %if.else510, !dbg !7882

land.lhs.true494:                                 ; preds = %if.then490
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call495 = call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* nonnull %vr1) #7, !dbg !7883
  %tobool496 = icmp eq i8 %call495, 0, !dbg !7883
  br i1 %tobool496, label %land.lhs.true497, label %if.else510, !dbg !7884

land.lhs.true497:                                 ; preds = %land.lhs.true494
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call498 = call fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* nonnull %vr1) #7, !dbg !7885
  %tobool499 = icmp eq i8 %call498, 0, !dbg !7885
  br i1 %tobool499, label %if.then500, label %if.else510, !dbg !7886

if.then500:                                       ; preds = %land.lhs.true497
  call void @llvm.dbg.value(metadata i32 1, metadata !7587, metadata !DIExpression()), !dbg !7621
  store i32 1, i32* %type78, align 8, !dbg !7887
  %60 = load %union.tree_node*, %union.tree_node** %type148, align 8, !dbg !7889
  %call504 = call fastcc %union.tree_node* @vrp_val_min(%union.tree_node* %60) #7, !dbg !7890
  %min505 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !7891
  store %union.tree_node* %call504, %union.tree_node** %min505, align 8, !dbg !7892
  %61 = load %union.tree_node*, %union.tree_node** %type166, align 8, !dbg !7893
  %call508 = call fastcc %union.tree_node* @vrp_val_max(%union.tree_node* %61) #7, !dbg !7894
  %max509 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !7895
  store %union.tree_node* %call508, %union.tree_node** %max509, align 8, !dbg !7896
  br label %if.end513, !dbg !7897

if.else510:                                       ; preds = %land.lhs.true497, %land.lhs.true494, %if.then490
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !7898
  br label %cleanup755, !dbg !7900

if.end513:                                        ; preds = %lor.lhs.false452, %lor.lhs.false486, %if.then500, %if.end442, %if.then419
  %type.3 = phi i32 [ %6, %lor.lhs.false452 ], [ 1, %if.then500 ], [ %6, %lor.lhs.false486 ], [ %6, %if.end442 ], [ %6, %if.then419 ], !dbg !7621
  call void @llvm.dbg.value(metadata i32 %type.3, metadata !7587, metadata !DIExpression()), !dbg !7621
  switch i32 %code, label %if.else600 [
    i32 67, label %land.lhs.true528
    i32 69, label %land.lhs.true528
    i32 68, label %land.lhs.true528
    i32 76, label %land.lhs.true528
    i32 70, label %land.lhs.true528
  ], !dbg !7901

land.lhs.true528:                                 ; preds = %if.end513, %if.end513, %if.end513, %if.end513, %if.end513
  %62 = load i32, i32* %type78, align 8, !dbg !7902
  %cmp530 = icmp eq i32 %62, 1, !dbg !7903
  br i1 %cmp530, label %land.lhs.true532, label %if.else600, !dbg !7904

land.lhs.true532:                                 ; preds = %land.lhs.true528
  %63 = load i32, i32* %type82, align 8, !dbg !7905
  %cmp534 = icmp eq i32 %63, 1, !dbg !7906
  br i1 %cmp534, label %lor.lhs.false536, label %if.then544, !dbg !7907

lor.lhs.false536:                                 ; preds = %land.lhs.true532
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call537 = call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* nonnull %vr1) #7, !dbg !7908
  %tobool539 = icmp eq i8 %call537, 0, !dbg !7908
  br i1 %tobool539, label %lor.lhs.false540, label %if.then544, !dbg !7909

lor.lhs.false540:                                 ; preds = %lor.lhs.false536
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !7592, metadata !DIExpression(DW_OP_deref)), !dbg !7621
  %call541 = call fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* nonnull %vr1) #7, !dbg !7910
  %tobool543 = icmp eq i8 %call541, 0, !dbg !7910
  br i1 %tobool543, label %if.else600, label %if.then544, !dbg !7911

if.then544:                                       ; preds = %lor.lhs.false540, %lor.lhs.false536, %land.lhs.true532
  %min545 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !7912
  %64 = bitcast %union.tree_node** %min545 to %struct.tree_common**, !dbg !7912
  %65 = load %struct.tree_common*, %struct.tree_common** %64, align 8, !dbg !7912
  %type547 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %65, i64 0, i32 2, !dbg !7912
  %66 = load %union.tree_node*, %union.tree_node** %type547, align 8, !dbg !7912
  %call548 = call %union.tree_node* @build_int_cst(%union.tree_node* %66, i64 0) #6, !dbg !7913
  call void @llvm.dbg.value(metadata %union.tree_node* %call548, metadata !7608, metadata !DIExpression()), !dbg !7914
  call void @llvm.dbg.value(metadata i8 0, metadata !7607, metadata !DIExpression()), !dbg !7841
  store i8 0, i8* %sop, align 1, !dbg !7915
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i8* %sop, metadata !7607, metadata !DIExpression(DW_OP_deref)), !dbg !7841
  %call550 = call fastcc zeroext i8 @vrp_expr_computes_nonnegative(%union.tree_node* %op1, i8* nonnull %sop) #7, !dbg !7916
  %tobool552 = icmp eq i8 %call550, 0, !dbg !7916
  %67 = load i8, i8* %sop, align 1, !dbg !7918
  call void @llvm.dbg.value(metadata i8 %67, metadata !7607, metadata !DIExpression()), !dbg !7841
  %tobool554 = icmp ne i8 %67, 0, !dbg !7918
  %or.cond7 = or i1 %tobool552, %tobool554, !dbg !7919
  br i1 %or.cond7, label %if.else588, label %if.then555, !dbg !7919

if.then555:                                       ; preds = %if.then544
  %max556 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !7920
  %68 = load %union.tree_node*, %union.tree_node** %max556, align 8, !dbg !7920
  %call557 = call fastcc i32 @compare_values(%union.tree_node* %68, %union.tree_node* %call548) #7, !dbg !7922
  call void @llvm.dbg.value(metadata i32 %call557, metadata !7611, metadata !DIExpression()), !dbg !7914
  switch i32 %call557, label %if.end570 [
    i32 -1, label %if.end571
    i32 0, label %if.then567
    i32 1, label %if.then567
  ], !dbg !7923

if.then567:                                       ; preds = %if.then555, %if.then555
  %69 = load %union.tree_node*, %union.tree_node** %max556, align 8, !dbg !7924
  call void @llvm.dbg.value(metadata %union.tree_node* %69, metadata !7589, metadata !DIExpression()), !dbg !7621
  br label %if.end570, !dbg !7927

if.end570:                                        ; preds = %if.then555, %if.then567
  %type.4 = phi i32 [ %type.3, %if.then567 ], [ 3, %if.then555 ], !dbg !7621
  %max.3 = phi %union.tree_node* [ %69, %if.then567 ], [ null, %if.then555 ], !dbg !7914
  call void @llvm.dbg.value(metadata %union.tree_node* %max.3, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i32 %type.4, metadata !7587, metadata !DIExpression()), !dbg !7621
  br label %if.end571

if.end571:                                        ; preds = %if.then555, %if.end570
  %type.5 = phi i32 [ %type.4, %if.end570 ], [ %type.3, %if.then555 ], !dbg !7928
  %max.4 = phi %union.tree_node* [ %max.3, %if.end570 ], [ %call548, %if.then555 ], !dbg !7929
  call void @llvm.dbg.value(metadata %union.tree_node* %max.4, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i32 %type.5, metadata !7587, metadata !DIExpression()), !dbg !7621
  %70 = load %union.tree_node*, %union.tree_node** %min545, align 8, !dbg !7930
  %call573 = call fastcc i32 @compare_values(%union.tree_node* %70, %union.tree_node* %call548) #7, !dbg !7931
  call void @llvm.dbg.value(metadata i32 %call573, metadata !7611, metadata !DIExpression()), !dbg !7914
  switch i32 %call573, label %if.end586 [
    i32 1, label %if.end591
    i32 0, label %if.then583
    i32 -1, label %if.then583
  ], !dbg !7932

if.then583:                                       ; preds = %if.end571, %if.end571
  %71 = load %union.tree_node*, %union.tree_node** %min545, align 8, !dbg !7933
  call void @llvm.dbg.value(metadata %union.tree_node* %71, metadata !7588, metadata !DIExpression()), !dbg !7621
  br label %if.end586, !dbg !7936

if.end586:                                        ; preds = %if.end571, %if.then583
  %type.6 = phi i32 [ %type.5, %if.then583 ], [ 3, %if.end571 ], !dbg !7621
  %min.3 = phi %union.tree_node* [ %71, %if.then583 ], [ null, %if.end571 ], !dbg !7914
  call void @llvm.dbg.value(metadata %union.tree_node* %min.3, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i32 %type.6, metadata !7587, metadata !DIExpression()), !dbg !7621
  br label %if.end591

if.else588:                                       ; preds = %if.then544
  %72 = load %union.tree_node*, %union.tree_node** %min545, align 8, !dbg !7937
  %max590 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !7939
  %73 = load %union.tree_node*, %union.tree_node** %max590, align 8, !dbg !7939
  call fastcc void @abs_extent_range(%struct.value_range_d* %vr, %union.tree_node* %72, %union.tree_node* %73) #7, !dbg !7940
  br label %cleanup596, !dbg !7941

if.end591:                                        ; preds = %if.end586, %if.end571
  %type.7 = phi i32 [ %type.6, %if.end586 ], [ %type.5, %if.end571 ], !dbg !7928
  %min.4 = phi %union.tree_node* [ %min.3, %if.end586 ], [ %call548, %if.end571 ], !dbg !7942
  call void @llvm.dbg.value(metadata %union.tree_node* %min.4, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i32 %type.7, metadata !7587, metadata !DIExpression()), !dbg !7621
  %cmp592 = icmp eq i32 %type.7, 3, !dbg !7943
  br i1 %cmp592, label %if.then594, label %cleanup596, !dbg !7945

if.then594:                                       ; preds = %if.end591
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !7946
  br label %cleanup596, !dbg !7948

cleanup596:                                       ; preds = %if.end591, %if.then594, %if.else588
  %type.8 = phi i32 [ %type.3, %if.else588 ], [ 3, %if.then594 ], [ %type.7, %if.end591 ], !dbg !7928
  %min.5 = phi %union.tree_node* [ null, %if.else588 ], [ %min.4, %if.then594 ], [ %min.4, %if.end591 ], !dbg !7914
  %max.5 = phi %union.tree_node* [ null, %if.else588 ], [ %max.4, %if.then594 ], [ %max.4, %if.end591 ], !dbg !7914
  %cleanup.dest.slot.2 = phi i32 [ 1, %if.else588 ], [ 1, %if.then594 ], [ 0, %if.end591 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %max.5, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.5, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i32 %type.8, metadata !7587, metadata !DIExpression()), !dbg !7621
  %cond2 = icmp eq i32 %cleanup.dest.slot.2, 0
  br i1 %cond2, label %if.end754, label %cleanup755

if.else600:                                       ; preds = %lor.lhs.false540, %if.end513, %land.lhs.true528
  %74 = load i32, i32* %type78, align 8, !dbg !7949
  %cmp602 = icmp eq i32 %74, 1, !dbg !7949
  br i1 %cmp602, label %land.lhs.true611, label %lor.lhs.false604, !dbg !7949

lor.lhs.false604:                                 ; preds = %if.else600
  %cmp605 = icmp eq i32 %code, 65, !dbg !7949
  br i1 %cmp605, label %land.lhs.true607, label %cond.true616, !dbg !7949

land.lhs.true607:                                 ; preds = %lor.lhs.false604
  %cmp609 = icmp eq i32 %74, 2, !dbg !7949
  br i1 %cmp609, label %land.lhs.true611, label %cond.true616, !dbg !7949

land.lhs.true611:                                 ; preds = %land.lhs.true607, %if.else600
  %75 = load i32, i32* %type82, align 8, !dbg !7949
  %cmp614 = icmp eq i32 %74, %75, !dbg !7949
  br i1 %cmp614, label %cond.end618, label %cond.true616, !dbg !7949

cond.true616:                                     ; preds = %land.lhs.true611, %land.lhs.true607, %lor.lhs.false604
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 2416, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !7949
  br label %cond.end618, !dbg !7949

cond.end618:                                      ; preds = %land.lhs.true611, %cond.true616
  call void @llvm.dbg.value(metadata i8 0, metadata !7607, metadata !DIExpression()), !dbg !7841
  store i8 0, i8* %sop, align 1, !dbg !7951
  %min620 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !7952
  %76 = load %union.tree_node*, %union.tree_node** %min620, align 8, !dbg !7952
  %min621 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !7953
  %77 = load %union.tree_node*, %union.tree_node** %min621, align 8, !dbg !7953
  %call622 = call fastcc %union.tree_node* @vrp_int_const_binop(i32 %code, %union.tree_node* %76, %union.tree_node* %77) #7, !dbg !7954
  %arrayidx = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 0, !dbg !7955
  store %union.tree_node* %call622, %union.tree_node** %arrayidx, align 16, !dbg !7956
  %cmp624 = icmp eq %union.tree_node* %call622, null, !dbg !7957
  br i1 %cmp624, label %if.then626, label %if.end627, !dbg !7959

if.then626:                                       ; preds = %cond.end618
  call void @llvm.dbg.value(metadata i8 1, metadata !7607, metadata !DIExpression()), !dbg !7841
  store i8 1, i8* %sop, align 1, !dbg !7960
  br label %if.end627, !dbg !7961

if.end627:                                        ; preds = %if.then626, %cond.end618
  %max628 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !7962
  %78 = load %union.tree_node*, %union.tree_node** %max628, align 8, !dbg !7962
  %79 = load %union.tree_node*, %union.tree_node** %min621, align 8, !dbg !7964
  %cmp630 = icmp eq %union.tree_node* %78, %79, !dbg !7965
  br i1 %cmp630, label %if.then632, label %if.else634, !dbg !7966

if.then632:                                       ; preds = %if.end627
  %arrayidx633 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !7967
  store %union.tree_node* null, %union.tree_node** %arrayidx633, align 8, !dbg !7968
  br label %if.end644, !dbg !7967

if.else634:                                       ; preds = %if.end627
  %80 = load %union.tree_node*, %union.tree_node** %min620, align 8, !dbg !7969
  %call637 = call fastcc %union.tree_node* @vrp_int_const_binop(i32 %code, %union.tree_node* %80, %union.tree_node* %78) #7, !dbg !7971
  %arrayidx638 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 1, !dbg !7972
  store %union.tree_node* %call637, %union.tree_node** %arrayidx638, align 8, !dbg !7973
  %cmp640 = icmp eq %union.tree_node* %call637, null, !dbg !7974
  br i1 %cmp640, label %if.then642, label %if.end644, !dbg !7976

if.then642:                                       ; preds = %if.else634
  call void @llvm.dbg.value(metadata i8 1, metadata !7607, metadata !DIExpression()), !dbg !7841
  store i8 1, i8* %sop, align 1, !dbg !7977
  br label %if.end644, !dbg !7978

if.end644:                                        ; preds = %if.else634, %if.then642, %if.then632
  %max645 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !7979
  %81 = load %union.tree_node*, %union.tree_node** %max645, align 8, !dbg !7979
  %82 = load %union.tree_node*, %union.tree_node** %min620, align 8, !dbg !7981
  %cmp647 = icmp eq %union.tree_node* %81, %82, !dbg !7982
  br i1 %cmp647, label %if.then649, label %if.else651, !dbg !7983

if.then649:                                       ; preds = %if.end644
  %arrayidx650 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !7984
  store %union.tree_node* null, %union.tree_node** %arrayidx650, align 16, !dbg !7985
  br label %if.end661, !dbg !7984

if.else651:                                       ; preds = %if.end644
  %83 = load %union.tree_node*, %union.tree_node** %min621, align 8, !dbg !7986
  %call654 = call fastcc %union.tree_node* @vrp_int_const_binop(i32 %code, %union.tree_node* %81, %union.tree_node* %83) #7, !dbg !7988
  %arrayidx655 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 2, !dbg !7989
  store %union.tree_node* %call654, %union.tree_node** %arrayidx655, align 16, !dbg !7990
  %cmp657 = icmp eq %union.tree_node* %call654, null, !dbg !7991
  br i1 %cmp657, label %if.then659, label %if.end661, !dbg !7993

if.then659:                                       ; preds = %if.else651
  call void @llvm.dbg.value(metadata i8 1, metadata !7607, metadata !DIExpression()), !dbg !7841
  store i8 1, i8* %sop, align 1, !dbg !7994
  br label %if.end661, !dbg !7995

if.end661:                                        ; preds = %if.else651, %if.then659, %if.then649
  %84 = load %union.tree_node*, %union.tree_node** %min620, align 8, !dbg !7996
  %85 = load %union.tree_node*, %union.tree_node** %max645, align 8, !dbg !7998
  %cmp664 = icmp eq %union.tree_node* %84, %85, !dbg !7999
  br i1 %cmp664, label %if.then671, label %lor.lhs.false666, !dbg !8000

lor.lhs.false666:                                 ; preds = %if.end661
  %86 = load %union.tree_node*, %union.tree_node** %min621, align 8, !dbg !8001
  %87 = load %union.tree_node*, %union.tree_node** %max628, align 8, !dbg !8002
  %cmp669 = icmp eq %union.tree_node* %86, %87, !dbg !8003
  br i1 %cmp669, label %if.then671, label %if.else673, !dbg !8004

if.then671:                                       ; preds = %lor.lhs.false666, %if.end661
  %arrayidx672 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 3, !dbg !8005
  store %union.tree_node* null, %union.tree_node** %arrayidx672, align 8, !dbg !8006
  br label %if.end683, !dbg !8005

if.else673:                                       ; preds = %lor.lhs.false666
  %call676 = call fastcc %union.tree_node* @vrp_int_const_binop(i32 %code, %union.tree_node* %85, %union.tree_node* %87) #7, !dbg !8007
  %arrayidx677 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 3, !dbg !8009
  store %union.tree_node* %call676, %union.tree_node** %arrayidx677, align 8, !dbg !8010
  %cmp679 = icmp eq %union.tree_node* %call676, null, !dbg !8011
  br i1 %cmp679, label %if.then681, label %if.end683, !dbg !8013

if.then681:                                       ; preds = %if.else673
  call void @llvm.dbg.value(metadata i8 1, metadata !7607, metadata !DIExpression()), !dbg !7841
  store i8 1, i8* %sop, align 1, !dbg !8014
  br label %if.end683, !dbg !8015

if.end683:                                        ; preds = %if.else673, %if.then681, %if.then671
  %88 = load i8, i8* %sop, align 1, !dbg !8016
  call void @llvm.dbg.value(metadata i8 %88, metadata !7607, metadata !DIExpression()), !dbg !7841
  %tobool684 = icmp eq i8 %88, 0, !dbg !8016
  br i1 %tobool684, label %if.end686, label %if.then685, !dbg !8018

if.then685:                                       ; preds = %if.end683
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8019
  br label %cleanup755, !dbg !8021

if.end686:                                        ; preds = %if.end683
  call void @llvm.dbg.value(metadata %union.tree_node* %call622, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %call622, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i64 1, metadata !7606, metadata !DIExpression()), !dbg !7841
  br label %for.cond, !dbg !8022

for.cond:                                         ; preds = %for.inc, %if.end686
  %min.6 = phi %union.tree_node* [ %call622, %if.end686 ], [ %min.8, %for.inc ], !dbg !8024
  %max.6 = phi %union.tree_node* [ %call622, %if.end686 ], [ %max.8, %for.inc ], !dbg !8024
  %i.0 = phi i64 [ 1, %if.end686 ], [ %inc, %for.inc ], !dbg !8025
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !7606, metadata !DIExpression()), !dbg !7841
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6, metadata !7588, metadata !DIExpression()), !dbg !7621
  %exitcond = icmp eq i64 %i.0, 4, !dbg !8026
  br i1 %exitcond, label %if.end754.loopexit, label %for.body, !dbg !8028

for.body:                                         ; preds = %for.cond
  %call691 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %min.6) #6, !dbg !8029
  %tobool692 = icmp eq i8 %call691, 0, !dbg !8029
  br i1 %tobool692, label %if.end754.loopexit, label %lor.lhs.false693, !dbg !8032

lor.lhs.false693:                                 ; preds = %for.body
  %89 = getelementptr inbounds %union.tree_node, %union.tree_node* %min.6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8033
  %bf.load695 = load i64, i64* %89, align 8, !dbg !8033
  %bf.cast69828 = and i64 %bf.load695, 134217728, !dbg !8033
  %tobool699 = icmp eq i64 %bf.cast69828, 0, !dbg !8033
  br i1 %tobool699, label %lor.lhs.false703, label %land.lhs.true700, !dbg !8034

land.lhs.true700:                                 ; preds = %lor.lhs.false693
  %call701 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %min.6) #7, !dbg !8035
  %tobool702 = icmp eq i8 %call701, 0, !dbg !8035
  br i1 %tobool702, label %if.end754.loopexit, label %lor.lhs.false703, !dbg !8036

lor.lhs.false703:                                 ; preds = %land.lhs.true700, %lor.lhs.false693
  %call704 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %max.6) #6, !dbg !8037
  %tobool705 = icmp eq i8 %call704, 0, !dbg !8037
  br i1 %tobool705, label %if.end754.loopexit, label %lor.lhs.false706, !dbg !8038

lor.lhs.false706:                                 ; preds = %lor.lhs.false703
  %90 = getelementptr inbounds %union.tree_node, %union.tree_node* %max.6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8039
  %bf.load708 = load i64, i64* %90, align 8, !dbg !8039
  %bf.cast71129 = and i64 %bf.load708, 134217728, !dbg !8039
  %tobool712 = icmp eq i64 %bf.cast71129, 0, !dbg !8039
  br i1 %tobool712, label %if.end717, label %land.lhs.true713, !dbg !8040

land.lhs.true713:                                 ; preds = %lor.lhs.false706
  %call714 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %max.6) #7, !dbg !8041
  %tobool715 = icmp eq i8 %call714, 0, !dbg !8041
  br i1 %tobool715, label %if.end754.loopexit, label %if.end717, !dbg !8042

if.end717:                                        ; preds = %land.lhs.true713, %lor.lhs.false706
  %arrayidx718 = getelementptr inbounds [4 x %union.tree_node*], [4 x %union.tree_node*]* %val, i64 0, i64 %i.0, !dbg !8043
  %91 = load %union.tree_node*, %union.tree_node** %arrayidx718, align 8, !dbg !8043
  %tobool719 = icmp eq %union.tree_node* %91, null, !dbg !8043
  %92 = getelementptr inbounds %union.tree_node, %union.tree_node* %91, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8045
  br i1 %tobool719, label %for.inc, label %if.then720, !dbg !8045

if.then720:                                       ; preds = %if.end717
  %call722 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %91) #6, !dbg !8046
  %tobool723 = icmp eq i8 %call722, 0, !dbg !8046
  br i1 %tobool723, label %if.then736, label %lor.lhs.false724, !dbg !8049

lor.lhs.false724:                                 ; preds = %if.then720
  %bf.load727 = load i64, i64* %92, align 8, !dbg !8050
  %bf.cast73030 = and i64 %bf.load727, 134217728, !dbg !8050
  %tobool731 = icmp eq i64 %bf.cast73030, 0, !dbg !8050
  br i1 %tobool731, label %if.end738, label %land.lhs.true732, !dbg !8051

land.lhs.true732:                                 ; preds = %lor.lhs.false724
  %call734 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* nonnull %91) #7, !dbg !8052
  %tobool735 = icmp eq i8 %call734, 0, !dbg !8052
  br i1 %tobool735, label %if.then736, label %if.end738, !dbg !8053

if.then736:                                       ; preds = %land.lhs.true732, %if.then720
  %.lcssa = phi %union.tree_node* [ %91, %land.lhs.true732 ], [ %91, %if.then720 ], !dbg !8043
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !7606, metadata !DIExpression()), !dbg !7841
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !7606, metadata !DIExpression()), !dbg !7841
  call void @llvm.dbg.value(metadata %union.tree_node* %.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  br label %if.end754, !dbg !8054

if.end738:                                        ; preds = %land.lhs.true732, %lor.lhs.false724
  %call740 = call fastcc i32 @compare_values(%union.tree_node* nonnull %91, %union.tree_node* %min.6) #7, !dbg !8056
  %cmp741 = icmp eq i32 %call740, -1, !dbg !8058
  br i1 %cmp741, label %if.then743, label %if.end745, !dbg !8059

if.then743:                                       ; preds = %if.end738
  call void @llvm.dbg.value(metadata %union.tree_node* %91, metadata !7588, metadata !DIExpression()), !dbg !7621
  br label %if.end745, !dbg !8060

if.end745:                                        ; preds = %if.then743, %if.end738
  %min.7 = phi %union.tree_node* [ %91, %if.then743 ], [ %min.6, %if.end738 ], !dbg !8024
  call void @llvm.dbg.value(metadata %union.tree_node* %min.7, metadata !7588, metadata !DIExpression()), !dbg !7621
  %call747 = call fastcc i32 @compare_values(%union.tree_node* nonnull %91, %union.tree_node* %max.6) #7, !dbg !8061
  %cmp748 = icmp eq i32 %call747, 1, !dbg !8063
  br i1 %cmp748, label %if.then750, label %for.inc, !dbg !8064

if.then750:                                       ; preds = %if.end745
  call void @llvm.dbg.value(metadata %union.tree_node* %91, metadata !7589, metadata !DIExpression()), !dbg !7621
  br label %for.inc, !dbg !8065

for.inc:                                          ; preds = %if.end717, %if.then750, %if.end745
  %min.8 = phi %union.tree_node* [ %min.6, %if.end717 ], [ %min.7, %if.then750 ], [ %min.7, %if.end745 ], !dbg !8024
  %max.8 = phi %union.tree_node* [ %max.6, %if.end717 ], [ %91, %if.then750 ], [ %max.6, %if.end745 ], !dbg !8024
  call void @llvm.dbg.value(metadata %union.tree_node* %max.8, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.8, metadata !7588, metadata !DIExpression()), !dbg !7621
  %inc = add nuw nsw i64 %i.0, 1, !dbg !8066
  call void @llvm.dbg.value(metadata i64 %inc, metadata !7606, metadata !DIExpression()), !dbg !7841
  br label %for.cond, !dbg !8067, !llvm.loop !8068

if.end754.loopexit:                               ; preds = %for.cond, %for.body, %lor.lhs.false703, %land.lhs.true713, %land.lhs.true700
  %min.6.lcssa = phi %union.tree_node* [ %min.6, %for.cond ], [ %min.6, %for.body ], [ %min.6, %lor.lhs.false703 ], [ %min.6, %land.lhs.true713 ], [ %min.6, %land.lhs.true700 ], !dbg !8024
  %max.6.lcssa = phi %union.tree_node* [ %max.6, %for.cond ], [ %max.6, %for.body ], [ %max.6, %lor.lhs.false703 ], [ %max.6, %land.lhs.true713 ], [ %max.6, %land.lhs.true700 ], !dbg !8024
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6.lcssa, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6.lcssa, metadata !7589, metadata !DIExpression()), !dbg !7621
  br label %if.end754, !dbg !8070

if.end754:                                        ; preds = %if.end754.loopexit, %if.then736, %cleanup596
  %type.9 = phi i32 [ %type.8, %cleanup596 ], [ %type.3, %if.then736 ], [ %type.3, %if.end754.loopexit ], !dbg !7928
  %min.10 = phi %union.tree_node* [ %min.5, %cleanup596 ], [ %.lcssa, %if.then736 ], [ %min.6.lcssa, %if.end754.loopexit ], !dbg !8071
  %max.10 = phi %union.tree_node* [ %max.5, %cleanup596 ], [ %.lcssa, %if.then736 ], [ %max.6.lcssa, %if.end754.loopexit ], !dbg !8071
  call void @llvm.dbg.value(metadata %union.tree_node* %max.10, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.10, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i32 %type.9, metadata !7587, metadata !DIExpression()), !dbg !7621
  br label %cleanup755, !dbg !8070

cleanup755:                                       ; preds = %cleanup596, %if.end754, %if.then685, %if.else510, %if.then465, %if.then441
  %type.10 = phi i32 [ %6, %if.then441 ], [ %6, %if.then465 ], [ %type.8, %cleanup596 ], [ %type.9, %if.end754 ], [ %type.3, %if.then685 ], [ %6, %if.else510 ], !dbg !7928
  %min.11 = phi %union.tree_node* [ undef, %if.then441 ], [ undef, %if.then465 ], [ %min.5, %cleanup596 ], [ %min.10, %if.end754 ], [ undef, %if.then685 ], [ undef, %if.else510 ]
  %max.11 = phi %union.tree_node* [ undef, %if.then441 ], [ undef, %if.then465 ], [ %max.5, %cleanup596 ], [ %max.10, %if.end754 ], [ undef, %if.then685 ], [ undef, %if.else510 ]
  %cleanup.dest.slot.3 = phi i32 [ 1, %if.then441 ], [ 1, %if.then465 ], [ %cleanup.dest.slot.2, %cleanup596 ], [ 0, %if.end754 ], [ 1, %if.then685 ], [ 1, %if.else510 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %max.11, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.11, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i32 %type.10, metadata !7587, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i8* %sop, metadata !7607, metadata !DIExpression(DW_OP_deref)), !dbg !7841
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !8070
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %46) #8, !dbg !8070
  %cond1 = icmp eq i32 %cleanup.dest.slot.3, 0
  br i1 %cond1, label %if.end948, label %cleanup1008

if.then763:                                       ; preds = %if.end236
  %93 = load i32, i32* %type78, align 8, !dbg !8072
  %cmp765 = icmp eq i32 %93, 2, !dbg !8075
  br i1 %cmp765, label %if.then767, label %if.end768, !dbg !8076

if.then767:                                       ; preds = %if.then763
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8077
  br label %cleanup1008, !dbg !8079

if.end768:                                        ; preds = %if.then763
  %min769 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8080
  %94 = load %union.tree_node*, %union.tree_node** %min769, align 8, !dbg !8080
  %max770 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !8081
  %95 = load %union.tree_node*, %union.tree_node** %max770, align 8, !dbg !8081
  %call771 = call fastcc %union.tree_node* @vrp_int_const_binop(i32 64, %union.tree_node* %94, %union.tree_node* %95) #7, !dbg !8082
  call void @llvm.dbg.value(metadata %union.tree_node* %call771, metadata !7588, metadata !DIExpression()), !dbg !7621
  %max772 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8083
  %96 = load %union.tree_node*, %union.tree_node** %max772, align 8, !dbg !8083
  %min773 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !8084
  %97 = load %union.tree_node*, %union.tree_node** %min773, align 8, !dbg !8084
  %call774 = call fastcc %union.tree_node* @vrp_int_const_binop(i32 64, %union.tree_node* %96, %union.tree_node* %97) #7, !dbg !8085
  call void @llvm.dbg.value(metadata %union.tree_node* %call774, metadata !7589, metadata !DIExpression()), !dbg !7621
  br label %if.end948, !dbg !8086

if.then778:                                       ; preds = %if.end236
  %98 = load i32, i32* %type78, align 8, !dbg !8087
  %cmp780 = icmp eq i32 %98, 1, !dbg !8090
  br i1 %cmp780, label %land.lhs.true782, label %if.else811, !dbg !8091

land.lhs.true782:                                 ; preds = %if.then778
  %min783 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8092
  %99 = load %union.tree_node*, %union.tree_node** %min783, align 8, !dbg !8092
  %max784 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8093
  %100 = load %union.tree_node*, %union.tree_node** %max784, align 8, !dbg !8093
  %cmp785 = icmp eq %union.tree_node* %99, %100, !dbg !8094
  br i1 %cmp785, label %land.lhs.true787, label %if.else811, !dbg !8095

land.lhs.true787:                                 ; preds = %land.lhs.true782
  %101 = getelementptr inbounds %union.tree_node, %union.tree_node* %100, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8095
  %bf.load790 = load i64, i64* %101, align 8, !dbg !8096
  %bf.cast79226 = and i64 %bf.load790, 65535, !dbg !8097
  %cmp793 = icmp eq i64 %bf.cast79226, 23, !dbg !8097
  br i1 %cmp793, label %land.lhs.true795, label %if.else811, !dbg !8098

land.lhs.true795:                                 ; preds = %land.lhs.true787
  %bf.cast80127 = and i64 %bf.load790, 134217728, !dbg !8099
  %tobool802 = icmp eq i64 %bf.cast80127, 0, !dbg !8099
  br i1 %tobool802, label %land.lhs.true803, label %if.else811, !dbg !8100

land.lhs.true803:                                 ; preds = %land.lhs.true795
  %call805 = call i32 @tree_int_cst_sgn(%union.tree_node* %99) #6, !dbg !8101
  %cmp806 = icmp sgt i32 %call805, -1, !dbg !8102
  br i1 %cmp806, label %if.then808, label %if.else811, !dbg !8103

if.then808:                                       ; preds = %land.lhs.true803
  %call809 = call %union.tree_node* @build_int_cst(%union.tree_node* %expr_type, i64 0) #6, !dbg !8104
  call void @llvm.dbg.value(metadata %union.tree_node* %call809, metadata !7588, metadata !DIExpression()), !dbg !7621
  %102 = load %union.tree_node*, %union.tree_node** %max784, align 8, !dbg !8106
  call void @llvm.dbg.value(metadata %union.tree_node* %102, metadata !7589, metadata !DIExpression()), !dbg !7621
  br label %if.end948, !dbg !8107

if.else811:                                       ; preds = %land.lhs.true795, %land.lhs.true803, %land.lhs.true787, %land.lhs.true782, %if.then778
  %103 = load i32, i32* %type82, align 8, !dbg !8108
  %cmp813 = icmp eq i32 %103, 1, !dbg !8110
  br i1 %cmp813, label %land.lhs.true815, label %if.else844, !dbg !8111

land.lhs.true815:                                 ; preds = %if.else811
  %min816 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !8112
  %104 = load %union.tree_node*, %union.tree_node** %min816, align 8, !dbg !8112
  %max817 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !8113
  %105 = load %union.tree_node*, %union.tree_node** %max817, align 8, !dbg !8113
  %cmp818 = icmp eq %union.tree_node* %104, %105, !dbg !8114
  br i1 %cmp818, label %land.lhs.true820, label %if.else844, !dbg !8115

land.lhs.true820:                                 ; preds = %land.lhs.true815
  %106 = getelementptr inbounds %union.tree_node, %union.tree_node* %105, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8115
  %bf.load823 = load i64, i64* %106, align 8, !dbg !8116
  %bf.cast82524 = and i64 %bf.load823, 65535, !dbg !8117
  %cmp826 = icmp eq i64 %bf.cast82524, 23, !dbg !8117
  br i1 %cmp826, label %land.lhs.true828, label %if.else844, !dbg !8118

land.lhs.true828:                                 ; preds = %land.lhs.true820
  %bf.cast83425 = and i64 %bf.load823, 134217728, !dbg !8119
  %tobool835 = icmp eq i64 %bf.cast83425, 0, !dbg !8119
  br i1 %tobool835, label %land.lhs.true836, label %if.else844, !dbg !8120

land.lhs.true836:                                 ; preds = %land.lhs.true828
  %call838 = call i32 @tree_int_cst_sgn(%union.tree_node* %104) #6, !dbg !8121
  %cmp839 = icmp sgt i32 %call838, -1, !dbg !8122
  br i1 %cmp839, label %if.then841, label %if.else844, !dbg !8123

if.then841:                                       ; preds = %land.lhs.true836
  call void @llvm.dbg.value(metadata i32 1, metadata !7587, metadata !DIExpression()), !dbg !7621
  %call842 = call %union.tree_node* @build_int_cst(%union.tree_node* %expr_type, i64 0) #6, !dbg !8124
  call void @llvm.dbg.value(metadata %union.tree_node* %call842, metadata !7588, metadata !DIExpression()), !dbg !7621
  %107 = load %union.tree_node*, %union.tree_node** %max817, align 8, !dbg !8126
  call void @llvm.dbg.value(metadata %union.tree_node* %107, metadata !7589, metadata !DIExpression()), !dbg !7621
  br label %if.end948

if.else844:                                       ; preds = %land.lhs.true828, %land.lhs.true836, %land.lhs.true820, %land.lhs.true815, %if.else811
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8127
  br label %cleanup1008, !dbg !8129

if.then850:                                       ; preds = %if.end236
  %108 = load i32, i32* %type78, align 8, !dbg !8130
  %cmp852 = icmp eq i32 %108, 1, !dbg !8131
  br i1 %cmp852, label %land.lhs.true854, label %if.else940, !dbg !8132

land.lhs.true854:                                 ; preds = %if.then850
  %109 = load i32, i32* %type82, align 8, !dbg !8133
  %cmp856 = icmp eq i32 %109, 1, !dbg !8134
  br i1 %cmp856, label %land.lhs.true858, label %if.else940, !dbg !8135

land.lhs.true858:                                 ; preds = %land.lhs.true854
  %min859 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8136
  %110 = bitcast %union.tree_node** %min859 to i64**, !dbg !8136
  %111 = load i64*, i64** %110, align 8, !dbg !8136
  %bf.load861 = load i64, i64* %111, align 8, !dbg !8136
  %bf.cast86317 = and i64 %bf.load861, 65535, !dbg !8137
  %cmp864 = icmp eq i64 %bf.cast86317, 23, !dbg !8137
  %112 = bitcast i64* %111 to %union.tree_node*, !dbg !8138
  br i1 %cmp864, label %land.lhs.true866, label %if.else940, !dbg !8138

land.lhs.true866:                                 ; preds = %land.lhs.true858
  %min867 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !8139
  %113 = bitcast %union.tree_node** %min867 to i64**, !dbg !8139
  %114 = load i64*, i64** %113, align 8, !dbg !8139
  %bf.load869 = load i64, i64* %114, align 8, !dbg !8139
  %bf.cast87118 = and i64 %bf.load869, 65535, !dbg !8140
  %cmp872 = icmp eq i64 %bf.cast87118, 23, !dbg !8140
  br i1 %cmp872, label %land.lhs.true874, label %if.else940, !dbg !8141

land.lhs.true874:                                 ; preds = %land.lhs.true866
  %max875 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8142
  %115 = bitcast %union.tree_node** %max875 to i64**, !dbg !8142
  %116 = load i64*, i64** %115, align 8, !dbg !8142
  %bf.load877 = load i64, i64* %116, align 8, !dbg !8142
  %bf.cast87919 = and i64 %bf.load877, 65535, !dbg !8143
  %cmp880 = icmp eq i64 %bf.cast87919, 23, !dbg !8143
  br i1 %cmp880, label %land.lhs.true882, label %if.else940, !dbg !8144

land.lhs.true882:                                 ; preds = %land.lhs.true874
  %max883 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !8145
  %117 = bitcast %union.tree_node** %max883 to i64**, !dbg !8145
  %118 = load i64*, i64** %117, align 8, !dbg !8145
  %bf.load885 = load i64, i64* %118, align 8, !dbg !8145
  %bf.cast88720 = and i64 %bf.load885, 65535, !dbg !8146
  %cmp888 = icmp eq i64 %bf.cast88720, 23, !dbg !8146
  br i1 %cmp888, label %land.lhs.true890, label %if.else940, !dbg !8147

land.lhs.true890:                                 ; preds = %land.lhs.true882
  %call892 = call i32 @tree_int_cst_sgn(%union.tree_node* %112) #6, !dbg !8148
  %cmp893 = icmp sgt i32 %call892, -1, !dbg !8149
  br i1 %cmp893, label %land.lhs.true895, label %if.else940, !dbg !8150

land.lhs.true895:                                 ; preds = %land.lhs.true890
  %119 = load %union.tree_node*, %union.tree_node** %min867, align 8, !dbg !8151
  %call897 = call i32 @tree_int_cst_sgn(%union.tree_node* %119) #6, !dbg !8152
  %cmp898 = icmp sgt i32 %call897, -1, !dbg !8153
  br i1 %cmp898, label %if.then900, label %if.else940, !dbg !8154

if.then900:                                       ; preds = %land.lhs.true895
  %120 = load %union.tree_node*, %union.tree_node** %max875, align 8, !dbg !8155
  %call902 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %120) #6, !dbg !8156
  %121 = extractvalue { i64, i64 } %call902, 0, !dbg !8156
  %122 = extractvalue { i64, i64 } %call902, 1, !dbg !8156
  %123 = load %union.tree_node*, %union.tree_node** %max883, align 8, !dbg !8157
  %call904 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %123) #6, !dbg !8158
  %124 = extractvalue { i64, i64 } %call904, 0, !dbg !8158
  %125 = extractvalue { i64, i64 } %call904, 1, !dbg !8158
  %or = or i64 %121, %124, !dbg !8159
  %or910 = or i64 %122, %125, !dbg !8160
  %cmp913 = icmp eq i64 %or910, 0, !dbg !8161
  br i1 %cmp913, label %if.else922, label %if.then915, !dbg !8163

if.then915:                                       ; preds = %if.then900
  %call918 = call i32 @floor_log2(i64 %or910) #6, !dbg !8164
  %sh_prom = zext i32 %call918 to i64, !dbg !8166
  %notmask23 = shl nsw i64 -1, %sh_prom, !dbg !8167
  %sub919 = xor i64 %notmask23, -1, !dbg !8167
  %or921 = or i64 %or910, %sub919, !dbg !8168
  br label %if.end935, !dbg !8169

if.else922:                                       ; preds = %if.then900
  %cmp924 = icmp eq i64 %or, 0, !dbg !8170
  br i1 %cmp924, label %if.end935, label %if.then926, !dbg !8172

if.then926:                                       ; preds = %if.else922
  %call928 = call i32 @floor_log2(i64 %or) #6, !dbg !8173
  %sh_prom929 = zext i32 %call928 to i64, !dbg !8174
  %notmask = shl nsw i64 -1, %sh_prom929, !dbg !8175
  %sub931 = xor i64 %notmask, -1, !dbg !8175
  %or933 = or i64 %or, %sub931, !dbg !8176
  br label %if.end935, !dbg !8177

if.end935:                                        ; preds = %if.else922, %if.then926, %if.then915
  %126 = phi i64 [ 0, %if.else922 ], [ 0, %if.then926 ], [ %or921, %if.then915 ], !dbg !8178
  %127 = phi i64 [ 0, %if.else922 ], [ %or933, %if.then926 ], [ -1, %if.then915 ], !dbg !8178
  %128 = load %union.tree_node*, %union.tree_node** %min859, align 8, !dbg !8179
  %129 = load %union.tree_node*, %union.tree_node** %min867, align 8, !dbg !8180
  %call938 = call fastcc %union.tree_node* @vrp_int_const_binop(i32 81, %union.tree_node* %128, %union.tree_node* %129) #7, !dbg !8181
  call void @llvm.dbg.value(metadata %union.tree_node* %call938, metadata !7588, metadata !DIExpression()), !dbg !7621
  %call939 = call %union.tree_node* @double_int_to_tree(%union.tree_node* %expr_type, i64 %127, i64 %126) #6, !dbg !8178
  call void @llvm.dbg.value(metadata %union.tree_node* %call939, metadata !7589, metadata !DIExpression()), !dbg !7621
  br label %if.end948, !dbg !8182

if.else940:                                       ; preds = %land.lhs.true895, %land.lhs.true890, %land.lhs.true882, %land.lhs.true874, %land.lhs.true866, %land.lhs.true858, %land.lhs.true854, %if.then850
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8183
  br label %cleanup1008, !dbg !8185

if.else942:                                       ; preds = %if.end236
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 2578, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !8186
  br label %if.end948

if.end948:                                        ; preds = %land.lhs.true378, %land.lhs.true371, %land.lhs.true368, %land.lhs.true362, %if.then381, %if.end353, %if.end768, %if.end935, %if.else942, %if.then808, %if.then841, %cleanup755, %if.then269, %if.then325, %if.then298
  %type.16 = phi i32 [ 1, %if.then269 ], [ 1, %if.then298 ], [ %6, %if.then325 ], [ %6, %if.then381 ], [ %6, %land.lhs.true378 ], [ %6, %land.lhs.true371 ], [ %6, %land.lhs.true368 ], [ %6, %land.lhs.true362 ], [ %6, %if.end353 ], [ %type.10, %cleanup755 ], [ %6, %if.end768 ], [ 1, %if.then841 ], [ %6, %if.then808 ], [ %6, %if.else942 ], [ %6, %if.end935 ], !dbg !7621
  %min.18 = phi %union.tree_node* [ %call270, %if.then269 ], [ %call299, %if.then298 ], [ %call328, %if.then325 ], [ %call387, %if.then381 ], [ %call356, %land.lhs.true378 ], [ %call356, %land.lhs.true371 ], [ %call356, %land.lhs.true368 ], [ %call356, %land.lhs.true362 ], [ %call356, %if.end353 ], [ %min.11, %cleanup755 ], [ %call771, %if.end768 ], [ %call842, %if.then841 ], [ %call809, %if.then808 ], [ undef, %if.else942 ], [ %call938, %if.end935 ], !dbg !8187
  %max.18 = phi %union.tree_node* [ %call270, %if.then269 ], [ %call299, %if.then298 ], [ %call331, %if.then325 ], [ %call396, %if.then381 ], [ %call359, %land.lhs.true378 ], [ %call359, %land.lhs.true371 ], [ %call359, %land.lhs.true368 ], [ %call359, %land.lhs.true362 ], [ %call359, %if.end353 ], [ %max.11, %cleanup755 ], [ %call774, %if.end768 ], [ %107, %if.then841 ], [ %102, %if.then808 ], [ undef, %if.else942 ], [ %call939, %if.end935 ], !dbg !8187
  call void @llvm.dbg.value(metadata %union.tree_node* %max.18, metadata !7589, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata %union.tree_node* %min.18, metadata !7588, metadata !DIExpression()), !dbg !7621
  call void @llvm.dbg.value(metadata i32 %type.16, metadata !7587, metadata !DIExpression()), !dbg !7621
  %cmp949 = icmp eq %union.tree_node* %min.18, null, !dbg !8188
  br i1 %cmp949, label %if.then980, label %lor.lhs.false951, !dbg !8190

lor.lhs.false951:                                 ; preds = %if.end948
  %call952 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %min.18) #6, !dbg !8191
  %tobool953 = icmp eq i8 %call952, 0, !dbg !8191
  br i1 %tobool953, label %if.then980, label %lor.lhs.false954, !dbg !8192

lor.lhs.false954:                                 ; preds = %lor.lhs.false951
  %130 = getelementptr inbounds %union.tree_node, %union.tree_node* %min.18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8193
  %bf.load956 = load i64, i64* %130, align 8, !dbg !8193
  %bf.cast95921 = and i64 %bf.load956, 134217728, !dbg !8193
  %tobool960 = icmp eq i64 %bf.cast95921, 0, !dbg !8193
  br i1 %tobool960, label %lor.lhs.false964, label %land.lhs.true961, !dbg !8194

land.lhs.true961:                                 ; preds = %lor.lhs.false954
  %call962 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* nonnull %min.18) #7, !dbg !8195
  %tobool963 = icmp eq i8 %call962, 0, !dbg !8195
  %cmp965 = icmp eq %union.tree_node* %max.18, null, !dbg !8196
  %or.cond8 = or i1 %tobool963, %cmp965, !dbg !8197
  br i1 %or.cond8, label %if.then980, label %lor.lhs.false967, !dbg !8197

lor.lhs.false964:                                 ; preds = %lor.lhs.false954
  %cmp965.old = icmp eq %union.tree_node* %max.18, null, !dbg !8196
  br i1 %cmp965.old, label %if.then980, label %lor.lhs.false967, !dbg !8198

lor.lhs.false967:                                 ; preds = %land.lhs.true961, %lor.lhs.false964
  %call968 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %max.18) #6, !dbg !8199
  %tobool969 = icmp eq i8 %call968, 0, !dbg !8199
  br i1 %tobool969, label %if.then980, label %lor.lhs.false970, !dbg !8200

lor.lhs.false970:                                 ; preds = %lor.lhs.false967
  %131 = getelementptr inbounds %union.tree_node, %union.tree_node* %max.18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8201
  %bf.load972 = load i64, i64* %131, align 8, !dbg !8201
  %bf.cast97522 = and i64 %bf.load972, 134217728, !dbg !8201
  %tobool976 = icmp eq i64 %bf.cast97522, 0, !dbg !8201
  br i1 %tobool976, label %if.end981, label %land.lhs.true977, !dbg !8202

land.lhs.true977:                                 ; preds = %lor.lhs.false970
  %call978 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %max.18) #7, !dbg !8203
  %tobool979 = icmp eq i8 %call978, 0, !dbg !8203
  br i1 %tobool979, label %if.then980, label %if.end981, !dbg !8204

if.then980:                                       ; preds = %land.lhs.true977, %lor.lhs.false967, %lor.lhs.false951, %land.lhs.true961, %lor.lhs.false964, %if.end948
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8205
  br label %cleanup1008, !dbg !8207

if.end981:                                        ; preds = %land.lhs.true977, %lor.lhs.false970
  %call982 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* nonnull %min.18) #7, !dbg !8208
  %tobool984 = icmp eq i8 %call982, 0, !dbg !8208
  br i1 %tobool984, label %lor.lhs.false985, label %land.lhs.true989, !dbg !8210

lor.lhs.false985:                                 ; preds = %if.end981
  %call986 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* nonnull %min.18) #7, !dbg !8211
  %tobool988 = icmp eq i8 %call986, 0, !dbg !8211
  br i1 %tobool988, label %if.end998, label %land.lhs.true989, !dbg !8212

land.lhs.true989:                                 ; preds = %lor.lhs.false985, %if.end981
  %call990 = call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %max.18) #7, !dbg !8213
  %tobool992 = icmp eq i8 %call990, 0, !dbg !8213
  br i1 %tobool992, label %lor.lhs.false993, label %if.then997, !dbg !8214

lor.lhs.false993:                                 ; preds = %land.lhs.true989
  %call994 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %max.18) #7, !dbg !8215
  %tobool996 = icmp eq i8 %call994, 0, !dbg !8215
  br i1 %tobool996, label %if.end998, label %if.then997, !dbg !8216

if.then997:                                       ; preds = %lor.lhs.false993, %land.lhs.true989
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8217
  br label %cleanup1008, !dbg !8219

if.end998:                                        ; preds = %lor.lhs.false993, %lor.lhs.false985
  %call999 = call fastcc i32 @compare_values(%union.tree_node* nonnull %min.18, %union.tree_node* %max.18) #7, !dbg !8220
  call void @llvm.dbg.value(metadata i32 %call999, metadata !7590, metadata !DIExpression()), !dbg !7621
  switch i32 %call999, label %if.else1006 [
    i32 -2, label %if.then1005
    i32 1, label %if.then1005
  ], !dbg !8221

if.then1005:                                      ; preds = %if.end998, %if.end998
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8223
  br label %cleanup1008, !dbg !8225

if.else1006:                                      ; preds = %if.end998
  call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 %type.16, %union.tree_node* nonnull %min.18, %union.tree_node* %max.18, %struct.bitmap_head_def* null) #7, !dbg !8226
  br label %cleanup1008

cleanup1008:                                      ; preds = %if.then1005, %if.else1006, %if.then223, %if.else233, %if.then232, %if.then196, %if.else206, %if.then205, %if.end49, %cleanup, %cleanup755, %if.then997, %if.then980, %if.else940, %if.else844, %if.then767, %if.then352, %if.else332, %if.then132, %if.then85
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #8, !dbg !8227
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #8, !dbg !8227
  ret void, !dbg !8227
}

; Function Attrs: nounwind uwtable
define internal fastcc void @extract_range_from_unary_expr(%struct.value_range_d* %vr, i32 %code, %union.tree_node* %type, %union.tree_node* %op0) unnamed_addr #5 !dbg !8228 {
entry:
  %vr0 = alloca %struct.value_range_d, align 8
  %sop = alloca i8, align 1
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !8232, metadata !DIExpression()), !dbg !8272
  call void @llvm.dbg.value(metadata i32 %code, metadata !8233, metadata !DIExpression()), !dbg !8272
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !8234, metadata !DIExpression()), !dbg !8272
  call void @llvm.dbg.value(metadata %union.tree_node* %op0, metadata !8235, metadata !DIExpression()), !dbg !8272
  %0 = bitcast %struct.value_range_d* %vr0 to i8*, !dbg !8273
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #8, !dbg !8273
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %0, i8 0, i64 32, i1 false), !dbg !8274
  switch i32 %code, label %if.end17 [
    i32 77, label %if.then
    i32 78, label %if.then
    i32 90, label %if.then
    i32 124, label %if.then
  ], !dbg !8275

if.then:                                          ; preds = %entry, %entry, %entry, %entry
  %call = tail call fastcc %union.tree_node* @op_with_constant_singleton_value_range(%union.tree_node* %op0) #7, !dbg !8276
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !8235, metadata !DIExpression()), !dbg !8272
  %cmp7 = icmp eq %union.tree_node* %call, null, !dbg !8277
  br i1 %cmp7, label %if.end16, label %if.then8, !dbg !8278

if.then8:                                         ; preds = %if.then
  %call9 = tail call %union.tree_node* @fold_unary_loc(i32 0, i32 %code, %union.tree_node* %type, %union.tree_node* nonnull %call) #6, !dbg !8279
  call void @llvm.dbg.value(metadata %union.tree_node* %call9, metadata !8240, metadata !DIExpression()), !dbg !8280
  %tobool = icmp eq %union.tree_node* %call9, null, !dbg !8281
  br i1 %tobool, label %cleanup, label %land.lhs.true, !dbg !8283

land.lhs.true:                                    ; preds = %if.then8
  %call10 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %call9) #6, !dbg !8284
  %tobool11 = icmp eq i8 %call10, 0, !dbg !8284
  br i1 %tobool11, label %cleanup, label %land.lhs.true12, !dbg !8285

land.lhs.true12:                                  ; preds = %land.lhs.true
  %call13 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* nonnull %call9) #7, !dbg !8286
  %tobool14 = icmp eq i8 %call13, 0, !dbg !8286
  br i1 %tobool14, label %if.then15, label %cleanup, !dbg !8287

if.then15:                                        ; preds = %land.lhs.true12
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* nonnull %call9, %union.tree_node* nonnull %call9, %struct.bitmap_head_def* null) #7, !dbg !8288
  br label %cleanup, !dbg !8290

cleanup:                                          ; preds = %land.lhs.true12, %land.lhs.true, %if.then8, %if.then15
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then15 ], [ true, %land.lhs.true12 ], [ true, %land.lhs.true ], [ true, %if.then8 ]
  br i1 %cleanup.dest.slot.0, label %if.end16, label %cleanup710

if.end16:                                         ; preds = %if.then, %cleanup
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8291
  br label %cleanup710, !dbg !8292

if.end17:                                         ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8293
  %bf.load = load i64, i64* %1, align 8, !dbg !8293
  %bf.cast9 = and i64 %bf.load, 65535, !dbg !8295
  %cmp18 = icmp eq i64 %bf.cast9, 141, !dbg !8295
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !8296

if.then20:                                        ; preds = %if.end17
  %call21 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %op0) #7, !dbg !8297
  %2 = bitcast %struct.value_range_d* %call21 to i8*, !dbg !8298
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* align 8 %2, i64 32, i1 false), !dbg !8298
  br label %if.end27, !dbg !8299

if.else:                                          ; preds = %if.end17
  %call22 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %op0) #6, !dbg !8300
  %tobool23 = icmp eq i8 %call22, 0, !dbg !8300
  br i1 %tobool23, label %if.else25, label %if.then24, !dbg !8302

if.then24:                                        ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  call fastcc void @set_value_range_to_value(%struct.value_range_d* nonnull %vr0, %union.tree_node* %op0, %struct.bitmap_head_def* null) #7, !dbg !8303
  br label %if.end27, !dbg !8303

if.else25:                                        ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* nonnull %vr0) #7, !dbg !8304
  br label %if.end27

if.end27:                                         ; preds = %if.then24, %if.else25, %if.then20
  %type28 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 0, !dbg !8305
  %3 = load i32, i32* %type28, align 8, !dbg !8305
  %cmp29 = icmp eq i32 %3, 0, !dbg !8307
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !8308

if.then31:                                        ; preds = %if.end27
  call fastcc void @set_value_range_to_undefined(%struct.value_range_d* %vr) #7, !dbg !8309
  br label %cleanup710, !dbg !8311

if.end32:                                         ; preds = %if.end27
  %type33 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8312
  %4 = bitcast %union.tree_node** %type33 to i64**, !dbg !8312
  %5 = load i64*, i64** %4, align 8, !dbg !8312
  %bf.load35 = load i64, i64* %5, align 8, !dbg !8312
  %bf.cast3710 = and i64 %bf.load35, 65535, !dbg !8312
  %cmp38 = icmp eq i64 %bf.cast3710, 6, !dbg !8312
  br i1 %cmp38, label %lor.lhs.false76, label %lor.lhs.false40, !dbg !8312

lor.lhs.false40:                                  ; preds = %if.end32
  %cmp47 = icmp eq i64 %bf.cast3710, 7, !dbg !8312
  br i1 %cmp47, label %lor.lhs.false76, label %lor.lhs.false49, !dbg !8312

lor.lhs.false49:                                  ; preds = %lor.lhs.false40
  %cmp56 = icmp eq i64 %bf.cast3710, 8, !dbg !8312
  br i1 %cmp56, label %lor.lhs.false76, label %land.lhs.true58, !dbg !8314

land.lhs.true58:                                  ; preds = %lor.lhs.false49
  %cmp65 = icmp eq i64 %bf.cast3710, 10, !dbg !8315
  br i1 %cmp65, label %lor.lhs.false76, label %lor.lhs.false67, !dbg !8315

lor.lhs.false67:                                  ; preds = %land.lhs.true58
  %cmp74 = icmp eq i64 %bf.cast3710, 12, !dbg !8315
  br i1 %cmp74, label %lor.lhs.false76, label %if.then84, !dbg !8316

lor.lhs.false76:                                  ; preds = %lor.lhs.false67, %land.lhs.true58, %lor.lhs.false49, %lor.lhs.false40, %if.end32
  %cmp78 = icmp eq i32 %3, 3, !dbg !8317
  br i1 %cmp78, label %if.end85, label %land.lhs.true80, !dbg !8318

land.lhs.true80:                                  ; preds = %lor.lhs.false76
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  %call81 = call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* nonnull %vr0) #7, !dbg !8319
  %tobool83 = icmp eq i8 %call81, 0, !dbg !8319
  br i1 %tobool83, label %if.end85, label %if.then84, !dbg !8320

if.then84:                                        ; preds = %land.lhs.true80, %lor.lhs.false67
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8321
  br label %cleanup710, !dbg !8323

if.end85:                                         ; preds = %land.lhs.true80, %lor.lhs.false76
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8324
  %bf.load87 = load i64, i64* %6, align 8, !dbg !8324
  %bf.cast8915 = and i64 %bf.load87, 65535, !dbg !8324
  %cmp90 = icmp eq i64 %bf.cast8915, 10, !dbg !8324
  br i1 %cmp90, label %if.then117, label %lor.lhs.false92, !dbg !8324

lor.lhs.false92:                                  ; preds = %if.end85
  %cmp97 = icmp eq i64 %bf.cast8915, 12, !dbg !8324
  br i1 %cmp97, label %if.then117, label %lor.lhs.false99, !dbg !8325

lor.lhs.false99:                                  ; preds = %lor.lhs.false92
  %7 = load i64*, i64** %4, align 8, !dbg !8326
  %bf.load103 = load i64, i64* %7, align 8, !dbg !8326
  %bf.cast10517 = and i64 %bf.load103, 65535, !dbg !8326
  %cmp106 = icmp eq i64 %bf.cast10517, 10, !dbg !8326
  br i1 %cmp106, label %if.then117, label %lor.lhs.false108, !dbg !8326

lor.lhs.false108:                                 ; preds = %lor.lhs.false99
  %cmp115 = icmp eq i64 %bf.cast10517, 12, !dbg !8326
  br i1 %cmp115, label %if.then117, label %if.end136, !dbg !8327

if.then117:                                       ; preds = %lor.lhs.false108, %lor.lhs.false99, %lor.lhs.false92, %if.end85
  call void @llvm.dbg.value(metadata i8* %sop, metadata !8245, metadata !DIExpression(DW_OP_deref)), !dbg !8328
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !8329
  call void @llvm.dbg.value(metadata i8 0, metadata !8245, metadata !DIExpression()), !dbg !8328
  store i8 0, i8* %sop, align 1, !dbg !8330
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  %call118 = call fastcc zeroext i8 @range_is_nonnull(%struct.value_range_d* nonnull %vr0) #7, !dbg !8331
  %tobool120 = icmp eq i8 %call118, 0, !dbg !8331
  br i1 %tobool120, label %lor.lhs.false121, label %if.then127, !dbg !8333

lor.lhs.false121:                                 ; preds = %if.then117
  call void @llvm.dbg.value(metadata i8* %sop, metadata !8245, metadata !DIExpression(DW_OP_deref)), !dbg !8328
  %call122 = call zeroext i8 @tree_unary_nonzero_warnv_p(i32 %code, %union.tree_node* %type, %union.tree_node* %op0, i8* nonnull %sop) #6, !dbg !8334
  %tobool124 = icmp eq i8 %call122, 0, !dbg !8334
  %8 = load i8, i8* %sop, align 1, !dbg !8335
  call void @llvm.dbg.value(metadata i8 %8, metadata !8245, metadata !DIExpression()), !dbg !8328
  %tobool126 = icmp ne i8 %8, 0, !dbg !8335
  %or.cond = or i1 %tobool124, %tobool126, !dbg !8336
  br i1 %or.cond, label %if.else128, label %if.then127, !dbg !8336

if.then127:                                       ; preds = %if.then117, %lor.lhs.false121
  call fastcc void @set_value_range_to_nonnull(%struct.value_range_d* %vr, %union.tree_node* %type) #7, !dbg !8337
  br label %if.end134, !dbg !8337

if.else128:                                       ; preds = %lor.lhs.false121
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  %call129 = call fastcc zeroext i8 @range_is_null(%struct.value_range_d* nonnull %vr0) #7, !dbg !8338
  %tobool130 = icmp eq i8 %call129, 0, !dbg !8338
  br i1 %tobool130, label %if.else132, label %if.then131, !dbg !8340

if.then131:                                       ; preds = %if.else128
  call fastcc void @set_value_range_to_null(%struct.value_range_d* %vr, %union.tree_node* %type) #7, !dbg !8341
  br label %if.end134, !dbg !8341

if.else132:                                       ; preds = %if.else128
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8342
  br label %if.end134

if.end134:                                        ; preds = %if.then131, %if.else132, %if.then127
  call void @llvm.dbg.value(metadata i8* %sop, metadata !8245, metadata !DIExpression(DW_OP_deref)), !dbg !8328
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !8343
  br label %cleanup710

if.end136:                                        ; preds = %lor.lhs.false108
  switch i32 %code, label %if.end294 [
    i32 116, label %land.lhs.true142
    i32 113, label %land.lhs.true142
  ], !dbg !8344

land.lhs.true142:                                 ; preds = %if.end136, %if.end136
  %cmp147 = icmp eq i64 %bf.cast8915, 6, !dbg !8345
  br i1 %cmp147, label %land.lhs.true163, label %lor.lhs.false149, !dbg !8345

lor.lhs.false149:                                 ; preds = %land.lhs.true142
  %cmp154 = icmp eq i64 %bf.cast8915, 7, !dbg !8345
  br i1 %cmp154, label %land.lhs.true163, label %lor.lhs.false156, !dbg !8345

lor.lhs.false156:                                 ; preds = %lor.lhs.false149
  %cmp161 = icmp eq i64 %bf.cast8915, 8, !dbg !8345
  br i1 %cmp161, label %land.lhs.true163, label %if.end294, !dbg !8346

land.lhs.true163:                                 ; preds = %lor.lhs.false156, %lor.lhs.false149, %land.lhs.true142
  %cmp170 = icmp eq i64 %bf.cast10517, 6, !dbg !8347
  br i1 %cmp170, label %if.then190, label %lor.lhs.false172, !dbg !8347

lor.lhs.false172:                                 ; preds = %land.lhs.true163
  %cmp179 = icmp eq i64 %bf.cast10517, 7, !dbg !8347
  br i1 %cmp179, label %if.then190, label %lor.lhs.false181, !dbg !8347

lor.lhs.false181:                                 ; preds = %lor.lhs.false172
  %cmp188 = icmp eq i64 %bf.cast10517, 8, !dbg !8347
  br i1 %cmp188, label %if.then190, label %if.end294, !dbg !8348

if.then190:                                       ; preds = %lor.lhs.false181, %lor.lhs.false172, %land.lhs.true163
  call void @llvm.dbg.value(metadata i64* %7, metadata !8248, metadata !DIExpression()), !dbg !8349
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !8251, metadata !DIExpression()), !dbg !8349
  %9 = load i32, i32* %type28, align 8, !dbg !8350
  %cmp194 = icmp eq i32 %9, 3, !dbg !8352
  br i1 %cmp194, label %land.lhs.true196, label %if.end212, !dbg !8353

land.lhs.true196:                                 ; preds = %if.then190
  %type197 = bitcast i64* %7 to %struct.tree_type*, !dbg !8354
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type197, i64 0, i32 6, !dbg !8354
  %bf.load198 = load i32, i32* %precision, align 4, !dbg !8354
  %bf.clear199 = and i32 %bf.load198, 1023, !dbg !8354
  %type200 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !8355
  %precision201 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type200, i64 0, i32 6, !dbg !8355
  %bf.load202 = load i32, i32* %precision201, align 4, !dbg !8355
  %bf.clear203 = and i32 %bf.load202, 1023, !dbg !8355
  %cmp204 = icmp ult i32 %bf.clear199, %bf.clear203, !dbg !8356
  br i1 %cmp204, label %if.then206, label %if.end212, !dbg !8357

if.then206:                                       ; preds = %land.lhs.true196
  store i32 1, i32* %type28, align 8, !dbg !8358
  %minval = getelementptr inbounds i64, i64* %7, i64 13, !dbg !8360
  %10 = load i64, i64* %minval, align 8, !dbg !8360
  %min209 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8361
  %11 = bitcast %union.tree_node** %min209 to i64*, !dbg !8362
  store i64 %10, i64* %11, align 8, !dbg !8362
  %maxval = getelementptr inbounds i64, i64* %7, i64 14, !dbg !8363
  %12 = load i64, i64* %maxval, align 8, !dbg !8363
  %max211 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8364
  %13 = bitcast %union.tree_node** %max211 to i64*, !dbg !8365
  store i64 %12, i64* %13, align 8, !dbg !8365
  br label %if.end212, !dbg !8366

if.end212:                                        ; preds = %if.then206, %land.lhs.true196, %if.then190
  %14 = phi i32 [ 1, %if.then206 ], [ 3, %land.lhs.true196 ], [ %9, %if.then190 ], !dbg !8367
  %cmp214 = icmp eq i32 %14, 1, !dbg !8368
  br i1 %cmp214, label %land.lhs.true220, label %lor.lhs.false216, !dbg !8369

lor.lhs.false216:                                 ; preds = %if.end212
  %cmp218 = icmp eq i32 %14, 2, !dbg !8370
  br i1 %cmp218, label %land.lhs.true220, label %if.end291, !dbg !8371

land.lhs.true220:                                 ; preds = %lor.lhs.false216, %if.end212
  %min221 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8372
  %15 = bitcast %union.tree_node** %min221 to i64**, !dbg !8372
  %16 = load i64*, i64** %15, align 8, !dbg !8372
  %bf.load223 = load i64, i64* %16, align 8, !dbg !8372
  %bf.cast22534 = and i64 %bf.load223, 65535, !dbg !8373
  %cmp226 = icmp eq i64 %bf.cast22534, 23, !dbg !8373
  %17 = bitcast i64* %16 to %union.tree_node*, !dbg !8374
  br i1 %cmp226, label %land.lhs.true228, label %if.end291, !dbg !8374

land.lhs.true228:                                 ; preds = %land.lhs.true220
  %max229 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8375
  %18 = bitcast %union.tree_node** %max229 to i64**, !dbg !8375
  %19 = load i64*, i64** %18, align 8, !dbg !8375
  %bf.load231 = load i64, i64* %19, align 8, !dbg !8375
  %bf.cast23335 = and i64 %bf.load231, 65535, !dbg !8376
  %cmp234 = icmp eq i64 %bf.cast23335, 23, !dbg !8376
  br i1 %cmp234, label %land.lhs.true236, label %if.end291, !dbg !8377

land.lhs.true236:                                 ; preds = %land.lhs.true228
  %call238 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %17) #7, !dbg !8378
  %tobool239 = icmp eq i8 %call238, 0, !dbg !8378
  br i1 %tobool239, label %land.lhs.true240, label %if.end291, !dbg !8379

land.lhs.true240:                                 ; preds = %land.lhs.true236
  %20 = load %union.tree_node*, %union.tree_node** %max229, align 8, !dbg !8380
  %call242 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %20) #7, !dbg !8381
  %tobool243 = icmp eq i8 %call242, 0, !dbg !8381
  br i1 %tobool243, label %land.lhs.true244, label %if.end291, !dbg !8382

land.lhs.true244:                                 ; preds = %land.lhs.true240
  %type245 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !8383
  %precision246 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type245, i64 0, i32 6, !dbg !8383
  %bf.load247 = load i32, i32* %precision246, align 4, !dbg !8383
  %bf.clear248 = and i32 %bf.load247, 1023, !dbg !8383
  %type249 = bitcast i64* %7 to %struct.tree_type*, !dbg !8384
  %precision250 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type249, i64 0, i32 6, !dbg !8384
  %bf.load251 = load i32, i32* %precision250, align 4, !dbg !8384
  %bf.clear252 = and i32 %bf.load251, 1023, !dbg !8384
  %cmp253 = icmp ult i32 %bf.clear248, %bf.clear252, !dbg !8385
  br i1 %cmp253, label %lor.lhs.false255, label %if.then272, !dbg !8386

lor.lhs.false255:                                 ; preds = %land.lhs.true244
  %21 = load i32, i32* %type28, align 8, !dbg !8387
  %cmp257 = icmp eq i32 %21, 1, !dbg !8388
  br i1 %cmp257, label %land.lhs.true259, label %if.end291, !dbg !8389

land.lhs.true259:                                 ; preds = %lor.lhs.false255
  %22 = load %union.tree_node*, %union.tree_node** %max229, align 8, !dbg !8390
  %23 = load %union.tree_node*, %union.tree_node** %min221, align 8, !dbg !8391
  %call262 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %22, %union.tree_node* %23, i32 0) #6, !dbg !8392
  %bf.load265 = load i32, i32* %precision246, align 4, !dbg !8393
  %bf.clear266 = and i32 %bf.load265, 1023, !dbg !8393
  %conv267 = zext i32 %bf.clear266 to i64, !dbg !8393
  %call268 = call %union.tree_node* @size_int_kind(i64 %conv267, i32 0) #6, !dbg !8393
  %call269 = call %union.tree_node* @int_const_binop(i32 84, %union.tree_node* %call262, %union.tree_node* %call268, i32 0) #6, !dbg !8394
  %call270 = call i32 @integer_zerop(%union.tree_node* %call269) #6, !dbg !8395
  %tobool271 = icmp eq i32 %call270, 0, !dbg !8395
  br i1 %tobool271, label %if.end291, label %if.then272, !dbg !8396

if.then272:                                       ; preds = %land.lhs.true259, %land.lhs.true244
  %24 = bitcast %union.tree_node** %min221 to %struct.tree_int_cst**, !dbg !8397
  %25 = load %struct.tree_int_cst*, %struct.tree_int_cst** %24, align 8, !dbg !8397
  %low = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %25, i64 0, i32 1, i32 0, !dbg !8397
  %26 = load i64, i64* %low, align 8, !dbg !8397
  %high = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %25, i64 0, i32 1, i32 1, !dbg !8398
  %27 = load i64, i64* %high, align 8, !dbg !8398
  %call278 = call %union.tree_node* @force_fit_type_double(%union.tree_node* %type, i64 %26, i64 %27, i32 0, i8 zeroext 0) #6, !dbg !8399
  call void @llvm.dbg.value(metadata %union.tree_node* %call278, metadata !8252, metadata !DIExpression()), !dbg !8400
  %28 = bitcast %union.tree_node** %max229 to %struct.tree_int_cst**, !dbg !8401
  %29 = load %struct.tree_int_cst*, %struct.tree_int_cst** %28, align 8, !dbg !8401
  %low282 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %29, i64 0, i32 1, i32 0, !dbg !8401
  %30 = load i64, i64* %low282, align 8, !dbg !8401
  %high286 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %29, i64 0, i32 1, i32 1, !dbg !8402
  %31 = load i64, i64* %high286, align 8, !dbg !8402
  %call287 = call %union.tree_node* @force_fit_type_double(%union.tree_node* %type, i64 %30, i64 %31, i32 0, i8 zeroext 0) #6, !dbg !8403
  call void @llvm.dbg.value(metadata %union.tree_node* %call287, metadata !8255, metadata !DIExpression()), !dbg !8400
  %32 = load i32, i32* %type28, align 8, !dbg !8404
  call fastcc void @set_and_canonicalize_value_range(%struct.value_range_d* %vr, i32 %32, %union.tree_node* %call278, %union.tree_node* %call287, %struct.bitmap_head_def* null) #7, !dbg !8405
  br label %cleanup710

if.end291:                                        ; preds = %land.lhs.true259, %land.lhs.true240, %land.lhs.true236, %lor.lhs.false255, %land.lhs.true228, %land.lhs.true220, %lor.lhs.false216
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8406
  br label %cleanup710, !dbg !8407

if.end294:                                        ; preds = %if.end136, %lor.lhs.false181, %lor.lhs.false156
  %33 = load i32, i32* %type28, align 8, !dbg !8408
  %cmp296 = icmp eq i32 %33, 3, !dbg !8410
  br i1 %cmp296, label %if.then298, label %if.end299, !dbg !8411

if.then298:                                       ; preds = %if.end294
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8412
  br label %cleanup710, !dbg !8414

if.end299:                                        ; preds = %if.end294
  switch i32 %code, label %if.else588 [
    i32 79, label %land.lhs.true302
    i32 82, label %if.end299.land.lhs.true416_crit_edge
  ], !dbg !8415

if.end299.land.lhs.true416_crit_edge:             ; preds = %if.end299
  %.pre36 = and i64 %bf.load87, 2097152, !dbg !8416
  br label %land.lhs.true416, !dbg !8415

land.lhs.true302:                                 ; preds = %if.end299
  %bf.cast30629 = and i64 %bf.load87, 2097152, !dbg !8417
  %tobool307 = icmp eq i64 %bf.cast30629, 0, !dbg !8417
  br i1 %tobool307, label %if.then308, label %if.else388, !dbg !8418

if.then308:                                       ; preds = %land.lhs.true302
  %max309 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8419
  %34 = load %union.tree_node*, %union.tree_node** %max309, align 8, !dbg !8419
  %call310 = call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %34) #7, !dbg !8422
  %tobool311 = icmp eq i8 %call310, 0, !dbg !8422
  br i1 %tobool311, label %if.else314, label %if.then312, !dbg !8423

if.then312:                                       ; preds = %if.then308
  %call313 = call fastcc %union.tree_node* @negative_overflow_infinity(%union.tree_node* %type) #7, !dbg !8424
  call void @llvm.dbg.value(metadata %union.tree_node* %call313, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end352, !dbg !8425

if.else314:                                       ; preds = %if.then308
  %35 = load %union.tree_node*, %union.tree_node** %max309, align 8, !dbg !8426
  %call316 = call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %35) #7, !dbg !8428
  %tobool317 = icmp eq i8 %call316, 0, !dbg !8428
  br i1 %tobool317, label %if.else320, label %if.then318, !dbg !8429

if.then318:                                       ; preds = %if.else314
  %call319 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !8430
  call void @llvm.dbg.value(metadata %union.tree_node* %call319, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end352, !dbg !8431

if.else320:                                       ; preds = %if.else314
  %36 = load %union.tree_node*, %union.tree_node** %max309, align 8, !dbg !8432
  %call322 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %36) #7, !dbg !8434
  %tobool323 = icmp eq i8 %call322, 0, !dbg !8434
  br i1 %tobool323, label %if.then324, label %if.else327, !dbg !8435

if.then324:                                       ; preds = %if.else320
  %37 = load %union.tree_node*, %union.tree_node** %max309, align 8, !dbg !8436
  %call326 = call %union.tree_node* @fold_unary_to_constant(i32 79, %union.tree_node* %type, %union.tree_node* %37) #6, !dbg !8437
  call void @llvm.dbg.value(metadata %union.tree_node* %call326, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end352, !dbg !8438

if.else327:                                       ; preds = %if.else320
  %call328 = call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %type) #7, !dbg !8439
  %tobool329 = icmp eq i8 %call328, 0, !dbg !8439
  br i1 %tobool329, label %if.else346, label %if.then330, !dbg !8441

if.then330:                                       ; preds = %if.else327
  %call331 = call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) #7, !dbg !8442
  %tobool333 = icmp eq i8 %call331, 0, !dbg !8442
  br i1 %tobool333, label %if.else344, label %land.lhs.true334, !dbg !8445

land.lhs.true334:                                 ; preds = %if.then330
  %min335 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8446
  %38 = load %union.tree_node*, %union.tree_node** %min335, align 8, !dbg !8446
  %call336 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %38) #7, !dbg !8447
  %tobool337 = icmp eq i8 %call336, 0, !dbg !8447
  br i1 %tobool337, label %land.lhs.true338, label %if.else344, !dbg !8448

land.lhs.true338:                                 ; preds = %land.lhs.true334
  %39 = load %union.tree_node*, %union.tree_node** %min335, align 8, !dbg !8449
  %call340 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %39) #7, !dbg !8450
  %tobool341 = icmp eq i8 %call340, 0, !dbg !8450
  br i1 %tobool341, label %if.then342, label %if.else344, !dbg !8451

if.then342:                                       ; preds = %land.lhs.true338
  %call343 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !8452
  call void @llvm.dbg.value(metadata %union.tree_node* %call343, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end352, !dbg !8453

if.else344:                                       ; preds = %land.lhs.true338, %land.lhs.true334, %if.then330
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8454
  br label %cleanup710, !dbg !8456

if.else346:                                       ; preds = %if.else327
  %minval348 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !8457
  %40 = bitcast %struct.lang_decl** %minval348 to %union.tree_node**, !dbg !8457
  %41 = load %union.tree_node*, %union.tree_node** %40, align 8, !dbg !8457
  call void @llvm.dbg.value(metadata %union.tree_node* %41, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end352

if.end352:                                        ; preds = %if.then318, %if.then342, %if.else346, %if.then324, %if.then312
  %min.3 = phi %union.tree_node* [ %call313, %if.then312 ], [ %call319, %if.then318 ], [ %call326, %if.then324 ], [ %call343, %if.then342 ], [ %41, %if.else346 ], !dbg !8458
  call void @llvm.dbg.value(metadata %union.tree_node* %min.3, metadata !8236, metadata !DIExpression()), !dbg !8272
  %min353 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8459
  %42 = load %union.tree_node*, %union.tree_node** %min353, align 8, !dbg !8459
  %call354 = call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %42) #7, !dbg !8461
  %tobool355 = icmp eq i8 %call354, 0, !dbg !8461
  br i1 %tobool355, label %if.else358, label %if.then356, !dbg !8462

if.then356:                                       ; preds = %if.end352
  %call357 = call fastcc %union.tree_node* @negative_overflow_infinity(%union.tree_node* %type) #7, !dbg !8463
  call void @llvm.dbg.value(metadata %union.tree_node* %call357, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end699, !dbg !8464

if.else358:                                       ; preds = %if.end352
  %43 = load %union.tree_node*, %union.tree_node** %min353, align 8, !dbg !8465
  %call360 = call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %43) #7, !dbg !8467
  %tobool361 = icmp eq i8 %call360, 0, !dbg !8467
  br i1 %tobool361, label %if.else364, label %if.then362, !dbg !8468

if.then362:                                       ; preds = %if.else358
  %call363 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !8469
  call void @llvm.dbg.value(metadata %union.tree_node* %call363, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end699, !dbg !8470

if.else364:                                       ; preds = %if.else358
  %44 = load %union.tree_node*, %union.tree_node** %min353, align 8, !dbg !8471
  %call366 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %44) #7, !dbg !8473
  %tobool367 = icmp eq i8 %call366, 0, !dbg !8473
  br i1 %tobool367, label %if.then368, label %if.else371, !dbg !8474

if.then368:                                       ; preds = %if.else364
  %45 = load %union.tree_node*, %union.tree_node** %min353, align 8, !dbg !8475
  %call370 = call %union.tree_node* @fold_unary_to_constant(i32 79, %union.tree_node* %type, %union.tree_node* %45) #6, !dbg !8476
  call void @llvm.dbg.value(metadata %union.tree_node* %call370, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end699, !dbg !8477

if.else371:                                       ; preds = %if.else364
  %call372 = call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %type) #7, !dbg !8478
  %tobool373 = icmp eq i8 %call372, 0, !dbg !8478
  br i1 %tobool373, label %if.else381, label %if.then374, !dbg !8480

if.then374:                                       ; preds = %if.else371
  %call375 = call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) #7, !dbg !8481
  %tobool376 = icmp eq i8 %call375, 0, !dbg !8481
  br i1 %tobool376, label %if.else379, label %if.then377, !dbg !8484

if.then377:                                       ; preds = %if.then374
  %call378 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !8485
  call void @llvm.dbg.value(metadata %union.tree_node* %call378, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end699, !dbg !8486

if.else379:                                       ; preds = %if.then374
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8487
  br label %cleanup710, !dbg !8489

if.else381:                                       ; preds = %if.else371
  %minval383 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !8490
  %46 = bitcast %struct.lang_decl** %minval383 to %union.tree_node**, !dbg !8490
  %47 = load %union.tree_node*, %union.tree_node** %46, align 8, !dbg !8490
  call void @llvm.dbg.value(metadata %union.tree_node* %47, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end699

if.else388:                                       ; preds = %land.lhs.true302
  switch i32 79, label %if.else588 [
    i32 79, label %land.lhs.true391
    i32 82, label %land.lhs.true416
  ], !dbg !8491

land.lhs.true391:                                 ; preds = %if.else388
  br i1 false, label %if.else413, label %if.then398, !dbg !8492

if.then398:                                       ; preds = %land.lhs.true391
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  %call399 = call fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* nonnull %vr0) #7, !dbg !8493
  %tobool400 = icmp eq i8 %call399, 0, !dbg !8493
  br i1 %tobool400, label %if.then401, label %if.else406, !dbg !8496

if.then401:                                       ; preds = %if.then398
  %min402 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8497
  %48 = load %union.tree_node*, %union.tree_node** %min402, align 8, !dbg !8497
  %call403 = call %union.tree_node* @fold_unary_to_constant(i32 79, %union.tree_node* %type, %union.tree_node* %48) #6, !dbg !8499
  call void @llvm.dbg.value(metadata %union.tree_node* %call403, metadata !8237, metadata !DIExpression()), !dbg !8272
  %max404 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8500
  %49 = load %union.tree_node*, %union.tree_node** %max404, align 8, !dbg !8500
  %call405 = call %union.tree_node* @fold_unary_to_constant(i32 79, %union.tree_node* %type, %union.tree_node* %49) #6, !dbg !8501
  call void @llvm.dbg.value(metadata %union.tree_node* %call405, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end699, !dbg !8502

if.else406:                                       ; preds = %if.then398
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  %call407 = call fastcc zeroext i8 @range_is_null(%struct.value_range_d* nonnull %vr0) #7, !dbg !8503
  %tobool408 = icmp eq i8 %call407, 0, !dbg !8503
  br i1 %tobool408, label %if.else410, label %if.then409, !dbg !8506

if.then409:                                       ; preds = %if.else406
  call fastcc void @set_value_range_to_null(%struct.value_range_d* %vr, %union.tree_node* %type) #7, !dbg !8507
  br label %cleanup710, !dbg !8507

if.else410:                                       ; preds = %if.else406
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8508
  br label %cleanup710

if.else413:                                       ; preds = %land.lhs.true391
  br i1 undef, label %if.else413.land.lhs.true416_crit_edge, label %if.else413.if.else588_crit_edge, !dbg !8509

if.else413.if.else588_crit_edge:                  ; preds = %if.else413
  br label %if.else588, !dbg !8509

if.else413.land.lhs.true416_crit_edge:            ; preds = %if.else413
  br label %land.lhs.true416, !dbg !8509

land.lhs.true416:                                 ; preds = %if.end299.land.lhs.true416_crit_edge, %if.else413.land.lhs.true416_crit_edge, %if.else388
  %bf.cast42122.pre-phi = phi i64 [ %.pre36, %if.end299.land.lhs.true416_crit_edge ], [ %bf.cast30629, %if.else413.land.lhs.true416_crit_edge ], [ %bf.cast30629, %if.else388 ], !dbg !8416
  %tobool422 = icmp eq i64 %bf.cast42122.pre-phi, 0, !dbg !8416
  br i1 %tobool422, label %if.then423, label %if.else588, !dbg !8510

if.then423:                                       ; preds = %land.lhs.true416
  %50 = load i32, i32* @flag_wrapv, align 4, !dbg !8511
  %51 = load i32, i32* @flag_trapv, align 4, !dbg !8511
  %52 = or i32 %50, %51, !dbg !8511
  %53 = icmp eq i32 %52, 0, !dbg !8511
  %54 = load i32, i32* @flag_strict_overflow, align 4, !dbg !8511
  %tobool435 = icmp ne i32 %54, 0, !dbg !8511
  %or.cond4 = and i1 %53, %tobool435, !dbg !8511
  br i1 %or.cond4, label %if.end457, label %land.lhs.true436, !dbg !8511

land.lhs.true436:                                 ; preds = %if.then423
  %cmp438 = icmp eq i32 %33, 1, !dbg !8513
  br i1 %cmp438, label %land.lhs.true440, label %lor.lhs.false445, !dbg !8514

land.lhs.true440:                                 ; preds = %land.lhs.true436
  %min441 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8515
  %55 = load %union.tree_node*, %union.tree_node** %min441, align 8, !dbg !8515
  %call442 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %55) #7, !dbg !8516
  %tobool444 = icmp eq i8 %call442, 0, !dbg !8516
  br i1 %tobool444, label %land.lhs.true440.lor.lhs.false445_crit_edge, label %if.then456, !dbg !8517

land.lhs.true440.lor.lhs.false445_crit_edge:      ; preds = %land.lhs.true440
  %.pre = load i32, i32* %type28, align 8, !dbg !8518
  br label %lor.lhs.false445, !dbg !8517

lor.lhs.false445:                                 ; preds = %land.lhs.true440.lor.lhs.false445_crit_edge, %land.lhs.true436
  %56 = phi i32 [ %.pre, %land.lhs.true440.lor.lhs.false445_crit_edge ], [ %33, %land.lhs.true436 ], !dbg !8518
  %cmp447 = icmp eq i32 %56, 2, !dbg !8519
  br i1 %cmp447, label %land.lhs.true449, label %if.end457, !dbg !8520

land.lhs.true449:                                 ; preds = %lor.lhs.false445
  %min450 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8521
  %57 = load %union.tree_node*, %union.tree_node** %min450, align 8, !dbg !8521
  %call451 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %57) #7, !dbg !8522
  %tobool452 = icmp eq i8 %call451, 0, !dbg !8522
  br i1 %tobool452, label %land.lhs.true453, label %if.end457, !dbg !8523

land.lhs.true453:                                 ; preds = %land.lhs.true449
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  %call454 = call fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* nonnull %vr0) #7, !dbg !8524
  %tobool455 = icmp eq i8 %call454, 0, !dbg !8524
  br i1 %tobool455, label %if.then456, label %if.end457, !dbg !8525

if.then456:                                       ; preds = %land.lhs.true440, %land.lhs.true453
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8526
  br label %cleanup710, !dbg !8528

if.end457:                                        ; preds = %land.lhs.true453, %land.lhs.true449, %if.then423, %lor.lhs.false445
  %min458 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8529
  %58 = load %union.tree_node*, %union.tree_node** %min458, align 8, !dbg !8529
  %call459 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %58) #7, !dbg !8531
  %tobool460 = icmp eq i8 %call459, 0, !dbg !8531
  br i1 %tobool460, label %if.else463, label %if.then461, !dbg !8532

if.then461:                                       ; preds = %if.end457
  %call462 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !8533
  call void @llvm.dbg.value(metadata %union.tree_node* %call462, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end485, !dbg !8534

if.else463:                                       ; preds = %if.end457
  %59 = load %union.tree_node*, %union.tree_node** %min458, align 8, !dbg !8535
  %call465 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %59) #7, !dbg !8537
  %tobool466 = icmp eq i8 %call465, 0, !dbg !8537
  br i1 %tobool466, label %if.then467, label %if.else470, !dbg !8538

if.then467:                                       ; preds = %if.else463
  %60 = load %union.tree_node*, %union.tree_node** %min458, align 8, !dbg !8539
  %call469 = call %union.tree_node* @fold_unary_to_constant(i32 %code, %union.tree_node* %type, %union.tree_node* %60) #6, !dbg !8540
  call void @llvm.dbg.value(metadata %union.tree_node* %call469, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end485, !dbg !8541

if.else470:                                       ; preds = %if.else463
  %call471 = call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %type) #7, !dbg !8542
  %tobool472 = icmp eq i8 %call471, 0, !dbg !8542
  br i1 %tobool472, label %if.then473, label %if.else476, !dbg !8544

if.then473:                                       ; preds = %if.else470
  %maxval475 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8545
  %61 = bitcast %struct.rtx_def** %maxval475 to %union.tree_node**, !dbg !8545
  %62 = load %union.tree_node*, %union.tree_node** %61, align 8, !dbg !8545
  call void @llvm.dbg.value(metadata %union.tree_node* %62, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end485, !dbg !8546

if.else476:                                       ; preds = %if.else470
  %call477 = call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) #7, !dbg !8547
  %tobool478 = icmp eq i8 %call477, 0, !dbg !8547
  br i1 %tobool478, label %if.else481, label %if.then479, !dbg !8549

if.then479:                                       ; preds = %if.else476
  %call480 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !8550
  call void @llvm.dbg.value(metadata %union.tree_node* %call480, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end485

if.else481:                                       ; preds = %if.else476
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8551
  br label %cleanup710, !dbg !8553

if.end485:                                        ; preds = %if.then467, %if.then479, %if.then473, %if.then461
  %min.6 = phi %union.tree_node* [ %call462, %if.then461 ], [ %call469, %if.then467 ], [ %call480, %if.then479 ], [ %62, %if.then473 ], !dbg !8554
  call void @llvm.dbg.value(metadata %union.tree_node* %min.6, metadata !8236, metadata !DIExpression()), !dbg !8272
  %max486 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8555
  %63 = load %union.tree_node*, %union.tree_node** %max486, align 8, !dbg !8555
  %call487 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %63) #7, !dbg !8557
  %tobool488 = icmp eq i8 %call487, 0, !dbg !8557
  br i1 %tobool488, label %if.else491, label %if.then489, !dbg !8558

if.then489:                                       ; preds = %if.end485
  %call490 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !8559
  call void @llvm.dbg.value(metadata %union.tree_node* %call490, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end517, !dbg !8560

if.else491:                                       ; preds = %if.end485
  %64 = load %union.tree_node*, %union.tree_node** %max486, align 8, !dbg !8561
  %call493 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %64) #7, !dbg !8563
  %tobool494 = icmp eq i8 %call493, 0, !dbg !8563
  br i1 %tobool494, label %if.then495, label %if.else498, !dbg !8564

if.then495:                                       ; preds = %if.else491
  %65 = load %union.tree_node*, %union.tree_node** %max486, align 8, !dbg !8565
  %call497 = call %union.tree_node* @fold_unary_to_constant(i32 %code, %union.tree_node* %type, %union.tree_node* %65) #6, !dbg !8566
  call void @llvm.dbg.value(metadata %union.tree_node* %call497, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end517, !dbg !8567

if.else498:                                       ; preds = %if.else491
  %call499 = call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %type) #7, !dbg !8568
  %tobool500 = icmp eq i8 %call499, 0, !dbg !8568
  br i1 %tobool500, label %if.then501, label %if.else504, !dbg !8570

if.then501:                                       ; preds = %if.else498
  %maxval503 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8571
  %66 = bitcast %struct.rtx_def** %maxval503 to %union.tree_node**, !dbg !8571
  %67 = load %union.tree_node*, %union.tree_node** %66, align 8, !dbg !8571
  call void @llvm.dbg.value(metadata %union.tree_node* %67, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end517, !dbg !8572

if.else504:                                       ; preds = %if.else498
  %call505 = call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) #7, !dbg !8573
  %tobool507 = icmp eq i8 %call505, 0, !dbg !8573
  br i1 %tobool507, label %if.else513, label %land.lhs.true508, !dbg !8575

land.lhs.true508:                                 ; preds = %if.else504
  %call509 = call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %min.6) #7, !dbg !8576
  %tobool510 = icmp eq i8 %call509, 0, !dbg !8576
  br i1 %tobool510, label %if.then511, label %if.else513, !dbg !8577

if.then511:                                       ; preds = %land.lhs.true508
  %call512 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !8578
  call void @llvm.dbg.value(metadata %union.tree_node* %call512, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end517

if.else513:                                       ; preds = %land.lhs.true508, %if.else504
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8579
  br label %cleanup710, !dbg !8581

if.end517:                                        ; preds = %if.then495, %if.then511, %if.then501, %if.then489
  %max.6 = phi %union.tree_node* [ %call490, %if.then489 ], [ %call497, %if.then495 ], [ %call512, %if.then511 ], [ %67, %if.then501 ], !dbg !8582
  call void @llvm.dbg.value(metadata %union.tree_node* %max.6, metadata !8237, metadata !DIExpression()), !dbg !8272
  %call518 = call fastcc i32 @compare_values(%union.tree_node* %min.6, %union.tree_node* %max.6) #7, !dbg !8583
  call void @llvm.dbg.value(metadata i32 %call518, metadata !8238, metadata !DIExpression()), !dbg !8272
  %68 = load i32, i32* %type28, align 8, !dbg !8584
  %cmp520 = icmp eq i32 %68, 2, !dbg !8585
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  %call523 = call fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* nonnull %vr0) #7, !dbg !8586
  %tobool524 = icmp ne i8 %call523, 0, !dbg !8586
  br i1 %cmp520, label %if.then522, label %if.else572, !dbg !8587

if.then522:                                       ; preds = %if.end517
  br i1 %tobool524, label %if.then525, label %if.else555, !dbg !8588

if.then525:                                       ; preds = %if.then522
  %cmp526 = icmp eq i32 %call518, 1, !dbg !8589
  %spec.select = select i1 %cmp526, %union.tree_node* %max.6, %union.tree_node* %min.6, !dbg !8591
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select, metadata !8237, metadata !DIExpression()), !dbg !8272
  %bf.load531 = load i64, i64* %6, align 8, !dbg !8592
  %bf.cast53424 = and i64 %bf.load531, 2097152, !dbg !8592
  %tobool535 = icmp ne i64 %bf.cast53424, 0, !dbg !8592
  %69 = load i32, i32* @flag_wrapv, align 4, !dbg !8592
  %tobool537 = icmp ne i32 %69, 0, !dbg !8592
  %or.cond5 = or i1 %tobool535, %tobool537, !dbg !8592
  br i1 %or.cond5, label %if.then538, label %if.else545, !dbg !8592

if.then538:                                       ; preds = %if.then525
  %minval540 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !8593
  %70 = bitcast %struct.lang_decl** %minval540 to %union.tree_node**, !dbg !8593
  %71 = load %union.tree_node*, %union.tree_node** %70, align 8, !dbg !8593
  call void @llvm.dbg.value(metadata %union.tree_node* %71, metadata !8256, metadata !DIExpression()), !dbg !8594
  %72 = load %union.tree_node*, %union.tree_node** %min458, align 8, !dbg !8595
  %cmp542 = icmp eq %union.tree_node* %72, %71, !dbg !8596
  br i1 %cmp542, label %if.end699, label %cond.true, !dbg !8597

cond.true:                                        ; preds = %if.then538
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !8598
  %call544 = call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %71, %union.tree_node* %73, i32 0) #6, !dbg !8599
  br label %if.end699, !dbg !8597

if.else545:                                       ; preds = %if.then525
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8239, metadata !DIExpression(DW_OP_deref)), !dbg !8272
  %call546 = call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* nonnull %vr0) #7, !dbg !8600
  %tobool547 = icmp eq i8 %call546, 0, !dbg !8600
  br i1 %tobool547, label %if.else550, label %if.then548, !dbg !8603

if.then548:                                       ; preds = %if.else545
  %call549 = call fastcc %union.tree_node* @negative_overflow_infinity(%union.tree_node* %type) #7, !dbg !8604
  call void @llvm.dbg.value(metadata %union.tree_node* %call549, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end699, !dbg !8605

if.else550:                                       ; preds = %if.else545
  %minval552 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !8606
  %74 = bitcast %struct.lang_decl** %minval552 to %union.tree_node**, !dbg !8606
  %75 = load %union.tree_node*, %union.tree_node** %74, align 8, !dbg !8606
  call void @llvm.dbg.value(metadata %union.tree_node* %75, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end699

if.else555:                                       ; preds = %if.then522
  store i32 1, i32* %type28, align 8, !dbg !8607
  %call557 = call %union.tree_node* @build_int_cst(%union.tree_node* %type, i64 0) #6, !dbg !8609
  call void @llvm.dbg.value(metadata %union.tree_node* %call557, metadata !8236, metadata !DIExpression()), !dbg !8272
  %call558 = call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %type) #7, !dbg !8610
  %tobool559 = icmp eq i8 %call558, 0, !dbg !8610
  br i1 %tobool559, label %if.else567, label %if.then560, !dbg !8612

if.then560:                                       ; preds = %if.else555
  %call561 = call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) #7, !dbg !8613
  %tobool562 = icmp eq i8 %call561, 0, !dbg !8613
  br i1 %tobool562, label %if.else565, label %if.then563, !dbg !8616

if.then563:                                       ; preds = %if.then560
  %call564 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %type) #7, !dbg !8617
  call void @llvm.dbg.value(metadata %union.tree_node* %call564, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end699, !dbg !8618

if.else565:                                       ; preds = %if.then560
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8619
  br label %cleanup710, !dbg !8621

if.else567:                                       ; preds = %if.else555
  %maxval569 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8622
  %76 = bitcast %struct.rtx_def** %maxval569 to %union.tree_node**, !dbg !8622
  %77 = load %union.tree_node*, %union.tree_node** %76, align 8, !dbg !8622
  call void @llvm.dbg.value(metadata %union.tree_node* %77, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end699

if.else572:                                       ; preds = %if.end517
  %cmp576 = icmp eq i32 %call518, 1, !dbg !8623
  br i1 %tobool524, label %if.then575, label %if.else581, !dbg !8624

if.then575:                                       ; preds = %if.else572
  %spec.select6 = select i1 %cmp576, %union.tree_node* %min.6, %union.tree_node* %max.6, !dbg !8625
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select6, metadata !8237, metadata !DIExpression()), !dbg !8272
  %call580 = call %union.tree_node* @build_int_cst(%union.tree_node* %type, i64 0) #6, !dbg !8627
  call void @llvm.dbg.value(metadata %union.tree_node* %call580, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end699, !dbg !8628

if.else581:                                       ; preds = %if.else572
  %spec.select7 = select i1 %cmp576, %union.tree_node* %max.6, %union.tree_node* %min.6, !dbg !8629
  %spec.select8 = select i1 %cmp576, %union.tree_node* %min.6, %union.tree_node* %max.6, !dbg !8629
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select8, metadata !8237, metadata !DIExpression()), !dbg !8272
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select7, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end699

if.else588:                                       ; preds = %if.else413.if.else588_crit_edge, %land.lhs.true416, %if.end299, %if.else388
  %min589 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8630
  %78 = load %union.tree_node*, %union.tree_node** %min589, align 8, !dbg !8630
  %call590 = call %union.tree_node* @fold_unary_to_constant(i32 %code, %union.tree_node* %type, %union.tree_node* %78) #6, !dbg !8632
  call void @llvm.dbg.value(metadata %union.tree_node* %call590, metadata !8236, metadata !DIExpression()), !dbg !8272
  %max591 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8633
  %79 = load %union.tree_node*, %union.tree_node** %max591, align 8, !dbg !8633
  %call592 = call %union.tree_node* @fold_unary_to_constant(i32 %code, %union.tree_node* %type, %union.tree_node* %79) #6, !dbg !8634
  call void @llvm.dbg.value(metadata %union.tree_node* %call592, metadata !8237, metadata !DIExpression()), !dbg !8272
  %call593 = call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %type) #7, !dbg !8635
  %tobool594 = icmp eq i8 %call593, 0, !dbg !8635
  br i1 %tobool594, label %if.end699, label %if.then595, !dbg !8637

if.then595:                                       ; preds = %if.else588
  switch i32 %code, label %cond.end603 [
    i32 79, label %cond.true601
    i32 82, label %cond.true601
  ], !dbg !8638

cond.true601:                                     ; preds = %if.then595, %if.then595
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 2959, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !8638
  br label %cond.end603, !dbg !8638

cond.end603:                                      ; preds = %if.then595, %cond.true601
  %80 = load %union.tree_node*, %union.tree_node** %min589, align 8, !dbg !8640
  %call606 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %80) #7, !dbg !8642
  %tobool608 = icmp eq i8 %call606, 0, !dbg !8642
  br i1 %tobool608, label %lor.lhs.false609, label %land.lhs.true616, !dbg !8643

lor.lhs.false609:                                 ; preds = %cond.end603
  %81 = getelementptr inbounds %union.tree_node, %union.tree_node* %call590, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8644
  %bf.load611 = load i64, i64* %81, align 8, !dbg !8644
  %bf.cast61425 = and i64 %bf.load611, 134217728, !dbg !8644
  %tobool615 = icmp eq i64 %bf.cast61425, 0, !dbg !8644
  br i1 %tobool615, label %if.end629, label %land.lhs.true616, !dbg !8645

land.lhs.true616:                                 ; preds = %lor.lhs.false609, %cond.end603
  %82 = load %union.tree_node*, %union.tree_node** %max591, align 8, !dbg !8646
  %call618 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %82) #7, !dbg !8647
  %tobool620 = icmp eq i8 %call618, 0, !dbg !8647
  br i1 %tobool620, label %lor.lhs.false621, label %if.then628, !dbg !8648

lor.lhs.false621:                                 ; preds = %land.lhs.true616
  %83 = getelementptr inbounds %union.tree_node, %union.tree_node* %call592, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8649
  %bf.load623 = load i64, i64* %83, align 8, !dbg !8649
  %bf.cast62628 = and i64 %bf.load623, 134217728, !dbg !8649
  %tobool627 = icmp eq i64 %bf.cast62628, 0, !dbg !8649
  br i1 %tobool627, label %if.end629, label %if.then628, !dbg !8650

if.then628:                                       ; preds = %lor.lhs.false621, %land.lhs.true616
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8651
  br label %cleanup710, !dbg !8653

if.end629:                                        ; preds = %lor.lhs.false621, %lor.lhs.false609
  %84 = load %union.tree_node*, %union.tree_node** %min589, align 8, !dbg !8654
  %call631 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %84) #7, !dbg !8656
  %tobool632 = icmp eq i8 %call631, 0, !dbg !8656
  br i1 %tobool632, label %if.else635, label %if.then633, !dbg !8657

if.then633:                                       ; preds = %if.end629
  %85 = load %union.tree_node*, %union.tree_node** %min589, align 8, !dbg !8658
  call void @llvm.dbg.value(metadata %union.tree_node* %85, metadata !8236, metadata !DIExpression()), !dbg !8272
  br label %if.end662, !dbg !8659

if.else635:                                       ; preds = %if.end629
  %86 = getelementptr inbounds %union.tree_node, %union.tree_node* %call590, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8660
  %bf.load637 = load i64, i64* %86, align 8, !dbg !8660
  %bf.cast64026 = and i64 %bf.load637, 134217728, !dbg !8660
  %tobool641 = icmp eq i64 %bf.cast64026, 0, !dbg !8660
  br i1 %tobool641, label %if.end662, label %if.then642, !dbg !8662

if.then642:                                       ; preds = %if.else635
  %call643 = call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) #7, !dbg !8663
  %tobool644 = icmp eq i8 %call643, 0, !dbg !8663
  br i1 %tobool644, label %if.else659, label %if.then645, !dbg !8666

if.then645:                                       ; preds = %if.then642
  %call646 = call i32 @tree_int_cst_sgn(%union.tree_node* %call590) #6, !dbg !8667
  %cmp647 = icmp sgt i32 %call646, -1, !dbg !8668
  %type651 = getelementptr inbounds %union.tree_node, %union.tree_node* %call590, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8669
  %87 = load %union.tree_node*, %union.tree_node** %type651, align 8, !dbg !8669
  br i1 %cmp647, label %cond.true649, label %cond.false653, !dbg !8667

cond.true649:                                     ; preds = %if.then645
  %call652 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %87) #7, !dbg !8670
  br label %if.end662, !dbg !8667

cond.false653:                                    ; preds = %if.then645
  %call656 = call fastcc %union.tree_node* @negative_overflow_infinity(%union.tree_node* %87) #7, !dbg !8671
  br label %if.end662, !dbg !8667

if.else659:                                       ; preds = %if.then642
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8672
  br label %cleanup710, !dbg !8674

if.end662:                                        ; preds = %if.else635, %cond.true649, %cond.false653, %if.then633
  %min.14 = phi %union.tree_node* [ %85, %if.then633 ], [ %call590, %if.else635 ], [ %call652, %cond.true649 ], [ %call656, %cond.false653 ], !dbg !8675
  call void @llvm.dbg.value(metadata %union.tree_node* %min.14, metadata !8236, metadata !DIExpression()), !dbg !8272
  %88 = load %union.tree_node*, %union.tree_node** %max591, align 8, !dbg !8676
  %call664 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %88) #7, !dbg !8678
  %tobool665 = icmp eq i8 %call664, 0, !dbg !8678
  br i1 %tobool665, label %if.else668, label %if.then666, !dbg !8679

if.then666:                                       ; preds = %if.end662
  %89 = load %union.tree_node*, %union.tree_node** %max591, align 8, !dbg !8680
  call void @llvm.dbg.value(metadata %union.tree_node* %89, metadata !8237, metadata !DIExpression()), !dbg !8272
  br label %if.end699, !dbg !8681

if.else668:                                       ; preds = %if.end662
  %90 = getelementptr inbounds %union.tree_node, %union.tree_node* %call592, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8682
  %bf.load670 = load i64, i64* %90, align 8, !dbg !8682
  %bf.cast67327 = and i64 %bf.load670, 134217728, !dbg !8682
  %tobool674 = icmp eq i64 %bf.cast67327, 0, !dbg !8682
  br i1 %tobool674, label %if.end699, label %if.then675, !dbg !8684

if.then675:                                       ; preds = %if.else668
  %call676 = call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %type) #7, !dbg !8685
  %tobool677 = icmp eq i8 %call676, 0, !dbg !8685
  br i1 %tobool677, label %if.else692, label %if.then678, !dbg !8688

if.then678:                                       ; preds = %if.then675
  %call679 = call i32 @tree_int_cst_sgn(%union.tree_node* %call592) #6, !dbg !8689
  %cmp680 = icmp sgt i32 %call679, -1, !dbg !8690
  %type684 = getelementptr inbounds %union.tree_node, %union.tree_node* %call592, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8691
  %91 = load %union.tree_node*, %union.tree_node** %type684, align 8, !dbg !8691
  br i1 %cmp680, label %cond.true682, label %cond.false686, !dbg !8689

cond.true682:                                     ; preds = %if.then678
  %call685 = call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %91) #7, !dbg !8692
  br label %if.end699, !dbg !8689

cond.false686:                                    ; preds = %if.then678
  %call689 = call fastcc %union.tree_node* @negative_overflow_infinity(%union.tree_node* %91) #7, !dbg !8693
  br label %if.end699, !dbg !8689

if.else692:                                       ; preds = %if.then675
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8694
  br label %cleanup710, !dbg !8696

if.end699:                                        ; preds = %if.else668, %if.else588, %if.then538, %if.then401, %cond.true682, %cond.false686, %if.then666, %if.then563, %if.else567, %cond.true, %if.else550, %if.then548, %if.else581, %if.then575, %if.then356, %if.then368, %if.else381, %if.then377, %if.then362
  %min.18 = phi %union.tree_node* [ %min.3, %if.then362 ], [ %min.3, %if.then377 ], [ %min.3, %if.else381 ], [ %min.3, %if.then368 ], [ %min.3, %if.then356 ], [ %call405, %if.then401 ], [ %call544, %cond.true ], [ %71, %if.then538 ], [ %call549, %if.then548 ], [ %75, %if.else550 ], [ %call557, %if.else567 ], [ %call557, %if.then563 ], [ %call580, %if.then575 ], [ %spec.select7, %if.else581 ], [ %call590, %if.else588 ], [ %min.14, %if.else668 ], [ %min.14, %cond.true682 ], [ %min.14, %cond.false686 ], [ %min.14, %if.then666 ], !dbg !8697
  %max.19 = phi %union.tree_node* [ %call363, %if.then362 ], [ %call378, %if.then377 ], [ %47, %if.else381 ], [ %call370, %if.then368 ], [ %call357, %if.then356 ], [ %call403, %if.then401 ], [ %spec.select, %cond.true ], [ %spec.select, %if.then538 ], [ %spec.select, %if.then548 ], [ %spec.select, %if.else550 ], [ %77, %if.else567 ], [ %call564, %if.then563 ], [ %spec.select6, %if.then575 ], [ %spec.select8, %if.else581 ], [ %call592, %if.else588 ], [ %call592, %if.else668 ], [ %call685, %cond.true682 ], [ %call689, %cond.false686 ], [ %89, %if.then666 ], !dbg !8697
  call void @llvm.dbg.value(metadata %union.tree_node* %max.19, metadata !8237, metadata !DIExpression()), !dbg !8272
  call void @llvm.dbg.value(metadata %union.tree_node* %min.18, metadata !8236, metadata !DIExpression()), !dbg !8272
  %call700 = call fastcc i32 @compare_values(%union.tree_node* %min.18, %union.tree_node* %max.19) #7, !dbg !8698
  call void @llvm.dbg.value(metadata i32 %call700, metadata !8238, metadata !DIExpression()), !dbg !8272
  switch i32 %call700, label %if.else707 [
    i32 -2, label %if.then706
    i32 1, label %if.then706
  ], !dbg !8699

if.then706:                                       ; preds = %if.end699, %if.end699
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8701
  br label %cleanup710, !dbg !8703

if.else707:                                       ; preds = %if.end699
  %92 = load i32, i32* %type28, align 8, !dbg !8704
  call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 %92, %union.tree_node* %min.18, %union.tree_node* %max.19, %struct.bitmap_head_def* null) #7, !dbg !8705
  br label %cleanup710

cleanup710:                                       ; preds = %if.then706, %if.else707, %if.then409, %if.else410, %if.then272, %if.end291, %cleanup, %if.else692, %if.else659, %if.then628, %if.else565, %if.else513, %if.else481, %if.then456, %if.else379, %if.else344, %if.then298, %if.end134, %if.then84, %if.then31, %if.end16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #8, !dbg !8706
  ret void, !dbg !8706
}

; Function Attrs: nounwind uwtable
define internal fastcc void @extract_range_from_cond_expr(%struct.value_range_d* %vr, %union.tree_node* %expr) unnamed_addr #5 !dbg !8707 {
entry:
  %vr0 = alloca %struct.value_range_d, align 8
  %vr1 = alloca %struct.value_range_d, align 8
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !8709, metadata !DIExpression()), !dbg !8715
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !8710, metadata !DIExpression()), !dbg !8715
  %0 = bitcast %struct.value_range_d* %vr0 to i8*, !dbg !8716
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #8, !dbg !8716
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %0, i8 0, i64 32, i1 false), !dbg !8717
  %1 = bitcast %struct.value_range_d* %vr1 to i8*, !dbg !8718
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #8, !dbg !8718
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1, i8 0, i64 32, i1 false), !dbg !8719
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !8720
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !8720
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8720
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !8711, metadata !DIExpression()), !dbg !8715
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8721
  %bf.load = load i64, i64* %3, align 8, !dbg !8721
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8723
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !8723
  br i1 %cmp, label %if.then, label %if.else, !dbg !8724

if.then:                                          ; preds = %entry
  %call = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %2) #7, !dbg !8725
  %4 = bitcast %struct.value_range_d* %call to i8*, !dbg !8726
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* align 8 %4, i64 32, i1 false), !dbg !8726
  br label %if.end4, !dbg !8727

if.else:                                          ; preds = %entry
  %call1 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %2) #6, !dbg !8728
  %tobool = icmp eq i8 %call1, 0, !dbg !8728
  br i1 %tobool, label %if.else3, label %if.then2, !dbg !8730

if.then2:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8713, metadata !DIExpression(DW_OP_deref)), !dbg !8715
  call fastcc void @set_value_range_to_value(%struct.value_range_d* nonnull %vr0, %union.tree_node* %2, %struct.bitmap_head_def* null) #7, !dbg !8731
  br label %if.end4, !dbg !8731

if.else3:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8713, metadata !DIExpression(DW_OP_deref)), !dbg !8715
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* nonnull %vr0) #7, !dbg !8732
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.else3, %if.then
  %arrayidx7 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !8733
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !8733
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !8712, metadata !DIExpression()), !dbg !8715
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8734
  %bf.load9 = load i64, i64* %6, align 8, !dbg !8734
  %bf.cast112 = and i64 %bf.load9, 65535, !dbg !8736
  %cmp12 = icmp eq i64 %bf.cast112, 141, !dbg !8736
  br i1 %cmp12, label %if.then13, label %if.else15, !dbg !8737

if.then13:                                        ; preds = %if.end4
  %call14 = call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %5) #7, !dbg !8738
  %7 = bitcast %struct.value_range_d* %call14 to i8*, !dbg !8739
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* align 8 %7, i64 32, i1 false), !dbg !8739
  br label %if.end21, !dbg !8740

if.else15:                                        ; preds = %if.end4
  %call16 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %5) #6, !dbg !8741
  %tobool17 = icmp eq i8 %call16, 0, !dbg !8741
  br i1 %tobool17, label %if.else19, label %if.then18, !dbg !8743

if.then18:                                        ; preds = %if.else15
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !8714, metadata !DIExpression(DW_OP_deref)), !dbg !8715
  call fastcc void @set_value_range_to_value(%struct.value_range_d* nonnull %vr1, %union.tree_node* %5, %struct.bitmap_head_def* null) #7, !dbg !8744
  br label %if.end21, !dbg !8744

if.else19:                                        ; preds = %if.else15
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !8714, metadata !DIExpression(DW_OP_deref)), !dbg !8715
  call fastcc void @set_value_range_to_varying(%struct.value_range_d* nonnull %vr1) #7, !dbg !8745
  br label %if.end21

if.end21:                                         ; preds = %if.then18, %if.else19, %if.then13
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8713, metadata !DIExpression(DW_OP_deref)), !dbg !8715
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !8714, metadata !DIExpression(DW_OP_deref)), !dbg !8715
  call fastcc void @vrp_meet(%struct.value_range_d* nonnull %vr0, %struct.value_range_d* nonnull %vr1) #7, !dbg !8746
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8713, metadata !DIExpression(DW_OP_deref)), !dbg !8715
  call fastcc void @copy_value_range(%struct.value_range_d* %vr, %struct.value_range_d* nonnull %vr0) #7, !dbg !8747
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #8, !dbg !8748
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #8, !dbg !8748
  ret void, !dbg !8748
}

; Function Attrs: nounwind uwtable
define internal fastcc void @extract_range_from_comparison(%struct.value_range_d* %vr, i32 %code, %union.tree_node* %type, %union.tree_node* %op0, %union.tree_node* %op1) unnamed_addr #5 !dbg !8749 {
entry:
  %sop = alloca i8, align 1
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !8751, metadata !DIExpression()), !dbg !8758
  call void @llvm.dbg.value(metadata i32 %code, metadata !8752, metadata !DIExpression()), !dbg !8758
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !8753, metadata !DIExpression()), !dbg !8758
  call void @llvm.dbg.value(metadata %union.tree_node* %op0, metadata !8754, metadata !DIExpression()), !dbg !8758
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !8755, metadata !DIExpression()), !dbg !8758
  call void @llvm.dbg.value(metadata i8* %sop, metadata !8756, metadata !DIExpression(DW_OP_deref)), !dbg !8758
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !8759
  call void @llvm.dbg.value(metadata i8 0, metadata !8756, metadata !DIExpression()), !dbg !8758
  store i8 0, i8* %sop, align 1, !dbg !8760
  call void @llvm.dbg.value(metadata i8* %sop, metadata !8756, metadata !DIExpression(DW_OP_deref)), !dbg !8758
  %call = call fastcc %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8 zeroext 0, i8* nonnull %sop, i8* null) #7, !dbg !8761
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !8757, metadata !DIExpression()), !dbg !8758
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !8762
  br i1 %tobool, label %if.else10, label %land.lhs.true, !dbg !8764

land.lhs.true:                                    ; preds = %entry
  %call1 = call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* nonnull %call) #7, !dbg !8765
  %0 = load i8, i8* %sop, align 1, !dbg !8766
  call void @llvm.dbg.value(metadata i8 %0, metadata !8756, metadata !DIExpression()), !dbg !8758
  %1 = or i8 %call1, %0, !dbg !8767
  %2 = icmp eq i8 %1, 0, !dbg !8767
  br i1 %2, label %if.then, label %if.else10, !dbg !8767

if.then:                                          ; preds = %land.lhs.true
  %call5 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type, %union.tree_node* nonnull %call) #6, !dbg !8768
  call void @llvm.dbg.value(metadata %union.tree_node* %call5, metadata !8757, metadata !DIExpression()), !dbg !8758
  %call6 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call5) #6, !dbg !8770
  %tobool7 = icmp eq i8 %call6, 0, !dbg !8770
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !8772
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !8772
  br i1 %tobool7, label %if.else, label %if.then8, !dbg !8773

if.then8:                                         ; preds = %if.then
  call fastcc void @set_value_range_to_value(%struct.value_range_d* %vr, %union.tree_node* %call5, %struct.bitmap_head_def* %3) #7, !dbg !8774
  br label %if.end11, !dbg !8774

if.else:                                          ; preds = %if.then
  call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* %call5, %union.tree_node* %call5, %struct.bitmap_head_def* %3) #7, !dbg !8775
  br label %if.end11

if.else10:                                        ; preds = %land.lhs.true, %entry
  call fastcc void @set_value_range_to_truthvalue(%struct.value_range_d* %vr, %union.tree_node* %type) #7, !dbg !8776
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.else, %if.else10
  call void @llvm.dbg.value(metadata i8* %sop, metadata !8756, metadata !DIExpression(DW_OP_deref)), !dbg !8758
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !8777
  ret void, !dbg !8777
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_value_range_to_value(%struct.value_range_d* %vr, %union.tree_node* %val, %struct.bitmap_head_def* %equiv) unnamed_addr #0 !dbg !8778 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !8782, metadata !DIExpression()), !dbg !8785
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !8783, metadata !DIExpression()), !dbg !8785
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %equiv, metadata !8784, metadata !DIExpression()), !dbg !8785
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %val) #6, !dbg !8786
  %tobool = icmp eq i8 %call, 0, !dbg !8786
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !8786

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 515, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !8786
  br label %cond.end, !dbg !8786

cond.end:                                         ; preds = %entry, %cond.true
  %call1 = tail call fastcc %union.tree_node* @avoid_overflow_infinity(%union.tree_node* %val) #7, !dbg !8787
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !8783, metadata !DIExpression()), !dbg !8785
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* %call1, %union.tree_node* %call1, %struct.bitmap_head_def* %equiv) #7, !dbg !8788
  ret void, !dbg !8789
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @avoid_overflow_infinity(%union.tree_node* %val) unnamed_addr #0 !dbg !8790 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !8792, metadata !DIExpression()), !dbg !8793
  %call = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %val) #7, !dbg !8794
  %tobool = icmp eq i8 %call, 0, !dbg !8794
  br i1 %tobool, label %return, label %if.end, !dbg !8796

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %val) #7, !dbg !8797
  %tobool2 = icmp eq i8 %call1, 0, !dbg !8797
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8799
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8799
  br i1 %tobool2, label %if.else, label %if.then3, !dbg !8800

if.then3:                                         ; preds = %if.end
  %call4 = tail call fastcc %union.tree_node* @vrp_val_max(%union.tree_node* %0) #7, !dbg !8801
  br label %return, !dbg !8802

if.else:                                          ; preds = %if.end
  %call7 = tail call fastcc %union.tree_node* @vrp_val_min(%union.tree_node* %0) #7, !dbg !8803
  br label %return, !dbg !8805

return:                                           ; preds = %entry, %if.else, %if.then3
  %retval.0 = phi %union.tree_node* [ %call4, %if.then3 ], [ %call7, %if.else ], [ %val, %entry ], !dbg !8793
  ret %union.tree_node* %retval.0, !dbg !8806
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr) unnamed_addr #0 !dbg !8807 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !8809, metadata !DIExpression()), !dbg !8810
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !8811
  %0 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !8811
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %0) #6, !dbg !8812
  %tobool = icmp eq i8 %call, 0, !dbg !8812
  br i1 %tobool, label %lor.end, label %lor.rhs, !dbg !8813

lor.rhs:                                          ; preds = %entry
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !8814
  %1 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !8814
  %call1 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %1) #6, !dbg !8815
  %tobool2 = icmp eq i8 %call1, 0, !dbg !8816
  %phitmp = zext i1 %tobool2 to i8, !dbg !8813
  br label %lor.end, !dbg !8813

lor.end:                                          ; preds = %entry, %lor.rhs
  %2 = phi i8 [ 1, %entry ], [ %phitmp, %lor.rhs ]
  ret i8 %2, !dbg !8817
}

; Function Attrs: nounwind uwtable
define internal fastcc void @add_equivalence(%struct.bitmap_head_def** %equiv, %union.tree_node* %var) unnamed_addr #5 !dbg !8818 {
entry:
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def** %equiv, metadata !8823, metadata !DIExpression()), !dbg !8827
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !8824, metadata !DIExpression()), !dbg !8827
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !8828
  %0 = bitcast %union.tree_node** %version to i32*, !dbg !8828
  %1 = load i32, i32* %0, align 8, !dbg !8828
  call void @llvm.dbg.value(metadata i32 %1, metadata !8825, metadata !DIExpression()), !dbg !8827
  %2 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !8829
  %idxprom = zext i32 %1 to i64, !dbg !8829
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %2, i64 %idxprom, !dbg !8829
  %3 = load %struct.value_range_d*, %struct.value_range_d** %arrayidx, align 8, !dbg !8829
  call void @llvm.dbg.value(metadata %struct.value_range_d* %3, metadata !8826, metadata !DIExpression()), !dbg !8827
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !8830
  %cmp = icmp eq %struct.bitmap_head_def* %4, null, !dbg !8832
  br i1 %cmp, label %if.then, label %if.end, !dbg !8833

if.then:                                          ; preds = %entry
  %call = tail call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null) #6, !dbg !8834
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %equiv, align 8, !dbg !8835
  br label %if.end, !dbg !8836

if.end:                                           ; preds = %if.then, %entry
  %5 = phi %struct.bitmap_head_def* [ %call, %if.then ], [ %4, %entry ], !dbg !8837
  %call1 = tail call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %5, i32 %1) #6, !dbg !8838
  %tobool = icmp eq %struct.value_range_d* %3, null, !dbg !8839
  br i1 %tobool, label %if.end7, label %land.lhs.true, !dbg !8841

land.lhs.true:                                    ; preds = %if.end
  %equiv2 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %3, i64 0, i32 3, !dbg !8842
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv2, align 8, !dbg !8842
  %tobool3 = icmp eq %struct.bitmap_head_def* %6, null, !dbg !8843
  br i1 %tobool3, label %if.end7, label %if.then4, !dbg !8844

if.then4:                                         ; preds = %land.lhs.true
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !8845
  %call6 = tail call zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def* %7, %struct.bitmap_head_def* nonnull %6) #6, !dbg !8846
  br label %if.end7, !dbg !8846

if.end7:                                          ; preds = %land.lhs.true, %if.end, %if.then4
  ret void, !dbg !8847
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @force_fit_type_double(%union.tree_node*, i64, i64, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @set_and_canonicalize_value_range(%struct.value_range_d* %vr, i32 %t, %union.tree_node* %min, %union.tree_node* %max, %struct.bitmap_head_def* %equiv) unnamed_addr #5 !dbg !8848 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !8850, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata i32 %t, metadata !8851, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %union.tree_node* %min, metadata !8852, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %union.tree_node* %max, metadata !8853, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %equiv, metadata !8854, metadata !DIExpression()), !dbg !8870
  %t.off = add i32 %t, -1, !dbg !8871
  %switch2 = icmp ult i32 %t.off, 2, !dbg !8871
  br i1 %switch2, label %lor.lhs.false, label %if.then, !dbg !8871

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %min, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8873
  %bf.load = load i64, i64* %0, align 8, !dbg !8873
  %bf.cast3 = and i64 %bf.load, 65535, !dbg !8874
  %cmp2 = icmp eq i64 %bf.cast3, 23, !dbg !8874
  br i1 %cmp2, label %lor.lhs.false3, label %if.then, !dbg !8875

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %max, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8876
  %bf.load5 = load i64, i64* %1, align 8, !dbg !8876
  %bf.cast74 = and i64 %bf.load5, 65535, !dbg !8877
  %cmp8 = icmp eq i64 %bf.cast74, 23, !dbg !8877
  br i1 %cmp8, label %if.end, label %if.then, !dbg !8878

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 %t, %union.tree_node* %min, %union.tree_node* %max, %struct.bitmap_head_def* %equiv) #7, !dbg !8879
  br label %return, !dbg !8881

if.end:                                           ; preds = %lor.lhs.false3
  %call = tail call i32 @tree_int_cst_lt(%union.tree_node* %max, %union.tree_node* %min) #6, !dbg !8882
  %tobool = icmp eq i32 %call, 0, !dbg !8882
  br i1 %tobool, label %if.end19, label %if.then9, !dbg !8883

if.then9:                                         ; preds = %if.end
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %min, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8884
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8884
  %call10 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %2, i64 1) #6, !dbg !8885
  call void @llvm.dbg.value(metadata %union.tree_node* %call10, metadata !8855, metadata !DIExpression()), !dbg !8886
  %call11 = tail call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %max, %union.tree_node* %call10, i32 0) #6, !dbg !8887
  call void @llvm.dbg.value(metadata %union.tree_node* %call11, metadata !8858, metadata !DIExpression()), !dbg !8886
  %call12 = tail call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %min, %union.tree_node* %call10, i32 0) #6, !dbg !8888
  call void @llvm.dbg.value(metadata %union.tree_node* %call12, metadata !8853, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %union.tree_node* %call11, metadata !8852, metadata !DIExpression()), !dbg !8870
  %call13 = tail call i32 @tree_int_cst_lt(%union.tree_node* %call12, %union.tree_node* %call11) #6, !dbg !8889
  %tobool14 = icmp eq i32 %call13, 0, !dbg !8889
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !8891

if.then15:                                        ; preds = %if.then9
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8892
  br label %cleanup, !dbg !8894

if.end16:                                         ; preds = %if.then9
  %cmp17 = icmp eq i32 %t, 1, !dbg !8895
  %cond = select i1 %cmp17, i32 2, i32 1, !dbg !8896
  call void @llvm.dbg.value(metadata i32 %cond, metadata !8851, metadata !DIExpression()), !dbg !8870
  br label %cleanup, !dbg !8897

cleanup:                                          ; preds = %if.end16, %if.then15
  %t.addr.0 = phi i32 [ %t, %if.then15 ], [ %cond, %if.end16 ]
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then15 ], [ true, %if.end16 ]
  call void @llvm.dbg.value(metadata i32 %t.addr.0, metadata !8851, metadata !DIExpression()), !dbg !8870
  br i1 %cleanup.dest.slot.0, label %if.end19, label %return

if.end19:                                         ; preds = %if.end, %cleanup
  %max.addr.0 = phi %union.tree_node* [ %max, %if.end ], [ %call12, %cleanup ]
  %min.addr.0 = phi %union.tree_node* [ %min, %if.end ], [ %call11, %cleanup ]
  %t.addr.1 = phi i32 [ %t, %if.end ], [ %t.addr.0, %cleanup ]
  call void @llvm.dbg.value(metadata i32 %t.addr.1, metadata !8851, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %union.tree_node* %min.addr.0, metadata !8852, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %union.tree_node* %max.addr.0, metadata !8853, metadata !DIExpression()), !dbg !8870
  %cmp20 = icmp eq i32 %t.addr.1, 2, !dbg !8898
  br i1 %cmp20, label %if.then21, label %if.end69, !dbg !8899

if.then21:                                        ; preds = %if.end19
  %call22 = tail call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %min.addr.0) #7, !dbg !8900
  call void @llvm.dbg.value(metadata i8 %call22, metadata !8859, metadata !DIExpression()), !dbg !8901
  %call23 = tail call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %max.addr.0) #7, !dbg !8902
  call void @llvm.dbg.value(metadata i8 %call23, metadata !8862, metadata !DIExpression()), !dbg !8901
  %tobool24 = icmp ne i8 %call22, 0, !dbg !8903
  %tobool27 = icmp ne i8 %call23, 0, !dbg !8904
  %or.cond = and i1 %tobool24, %tobool27, !dbg !8905
  br i1 %or.cond, label %if.then28, label %if.else, !dbg !8905

if.then28:                                        ; preds = %if.then21
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !8906
  br label %cleanup65, !dbg !8908

if.else:                                          ; preds = %if.then21
  %tobool30 = icmp eq i8 %call22, 0, !dbg !8909
  br i1 %tobool30, label %if.else51, label %land.lhs.true31, !dbg !8910

land.lhs.true31:                                  ; preds = %if.else
  %type33 = getelementptr inbounds %union.tree_node, %union.tree_node* %min.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8911
  %3 = bitcast %union.tree_node** %type33 to i64**, !dbg !8911
  %4 = load i64*, i64** %3, align 8, !dbg !8911
  %bf.load35 = load i64, i64* %4, align 8, !dbg !8911
  %bf.cast375 = and i64 %bf.load35, 2097152, !dbg !8911
  %tobool38 = icmp eq i64 %bf.cast375, 0, !dbg !8911
  br i1 %tobool38, label %if.then42, label %land.lhs.true39, !dbg !8912

land.lhs.true39:                                  ; preds = %land.lhs.true31
  %call40 = tail call i32 @integer_zerop(%union.tree_node* %max.addr.0) #6, !dbg !8913
  %tobool41 = icmp eq i32 %call40, 0, !dbg !8913
  br i1 %tobool41, label %if.then42, label %if.else51, !dbg !8914

if.then42:                                        ; preds = %land.lhs.true39, %land.lhs.true31
  %type45 = getelementptr inbounds %union.tree_node, %union.tree_node* %max.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8915
  %5 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !8915
  %call46 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %5, i64 1) #6, !dbg !8916
  call void @llvm.dbg.value(metadata %union.tree_node* %call46, metadata !8863, metadata !DIExpression()), !dbg !8917
  %call47 = tail call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* %max.addr.0, %union.tree_node* %call46, i32 0) #6, !dbg !8918
  call void @llvm.dbg.value(metadata %union.tree_node* %call47, metadata !8852, metadata !DIExpression()), !dbg !8870
  %6 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !8919
  %call50 = tail call fastcc %union.tree_node* @vrp_val_max(%union.tree_node* %6) #7, !dbg !8920
  call void @llvm.dbg.value(metadata %union.tree_node* %call50, metadata !8853, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata i32 1, metadata !8851, metadata !DIExpression()), !dbg !8870
  br label %cleanup65, !dbg !8921

if.else51:                                        ; preds = %land.lhs.true39, %if.else
  %tobool52 = icmp eq i8 %call23, 0, !dbg !8922
  br i1 %tobool52, label %cleanup65, label %if.then53, !dbg !8923

if.then53:                                        ; preds = %if.else51
  %type56 = getelementptr inbounds %union.tree_node, %union.tree_node* %min.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8924
  %7 = load %union.tree_node*, %union.tree_node** %type56, align 8, !dbg !8924
  %call57 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %7, i64 1) #6, !dbg !8925
  call void @llvm.dbg.value(metadata %union.tree_node* %call57, metadata !8867, metadata !DIExpression()), !dbg !8926
  %call58 = tail call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %min.addr.0, %union.tree_node* %call57, i32 0) #6, !dbg !8927
  call void @llvm.dbg.value(metadata %union.tree_node* %call58, metadata !8853, metadata !DIExpression()), !dbg !8870
  %8 = load %union.tree_node*, %union.tree_node** %type56, align 8, !dbg !8928
  %call61 = tail call fastcc %union.tree_node* @vrp_val_min(%union.tree_node* %8) #7, !dbg !8929
  call void @llvm.dbg.value(metadata %union.tree_node* %call61, metadata !8852, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata i32 1, metadata !8851, metadata !DIExpression()), !dbg !8870
  br label %cleanup65, !dbg !8930

cleanup65:                                        ; preds = %if.else51, %if.then53, %if.then42, %if.then28
  %max.addr.3 = phi %union.tree_node* [ %max.addr.0, %if.then28 ], [ %call50, %if.then42 ], [ %call58, %if.then53 ], [ %max.addr.0, %if.else51 ], !dbg !8870
  %min.addr.3 = phi %union.tree_node* [ %min.addr.0, %if.then28 ], [ %call47, %if.then42 ], [ %call61, %if.then53 ], [ %min.addr.0, %if.else51 ], !dbg !8870
  %t.addr.4 = phi i32 [ 2, %if.then28 ], [ 1, %if.then42 ], [ 1, %if.then53 ], [ 2, %if.else51 ]
  %cleanup.dest.slot.1 = phi i1 [ false, %if.then28 ], [ true, %if.then42 ], [ true, %if.then53 ], [ true, %if.else51 ]
  call void @llvm.dbg.value(metadata i32 %t.addr.4, metadata !8851, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %union.tree_node* %min.addr.3, metadata !8852, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %union.tree_node* %max.addr.3, metadata !8853, metadata !DIExpression()), !dbg !8870
  br i1 %cleanup.dest.slot.1, label %if.end69, label %return

if.end69:                                         ; preds = %cleanup65, %if.end19
  %max.addr.4 = phi %union.tree_node* [ %max.addr.0, %if.end19 ], [ %max.addr.3, %cleanup65 ], !dbg !8931
  %min.addr.4 = phi %union.tree_node* [ %min.addr.0, %if.end19 ], [ %min.addr.3, %cleanup65 ], !dbg !8932
  %t.addr.5 = phi i32 [ %t.addr.1, %if.end19 ], [ %t.addr.4, %cleanup65 ]
  call void @llvm.dbg.value(metadata i32 %t.addr.5, metadata !8851, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %union.tree_node* %min.addr.4, metadata !8852, metadata !DIExpression()), !dbg !8870
  call void @llvm.dbg.value(metadata %union.tree_node* %max.addr.4, metadata !8853, metadata !DIExpression()), !dbg !8870
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 %t.addr.5, %union.tree_node* %min.addr.4, %union.tree_node* %max.addr.4, %struct.bitmap_head_def* %equiv) #7, !dbg !8933
  br label %return, !dbg !8934

return:                                           ; preds = %cleanup65, %cleanup, %if.end69, %if.then
  ret void, !dbg !8934
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @value_ranges_intersect_p(%struct.value_range_d* %vr0, %struct.value_range_d* %vr1) unnamed_addr #0 !dbg !8935 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !8939, metadata !DIExpression()), !dbg !8941
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !8940, metadata !DIExpression()), !dbg !8941
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !8942
  %0 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !8942
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !8944
  %1 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !8944
  %call = tail call fastcc i32 @operand_less_p(%union.tree_node* %0, %union.tree_node* %1) #7, !dbg !8945
  %cmp = icmp eq i32 %call, 0, !dbg !8946
  br i1 %cmp, label %if.end, label %return, !dbg !8947

if.end:                                           ; preds = %entry
  %max1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !8948
  %2 = load %union.tree_node*, %union.tree_node** %max1, align 8, !dbg !8948
  %min2 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !8950
  %3 = load %union.tree_node*, %union.tree_node** %min2, align 8, !dbg !8950
  %call3 = tail call fastcc i32 @operand_less_p(%union.tree_node* %2, %union.tree_node* %3) #7, !dbg !8951
  %cmp4 = icmp eq i32 %call3, 0, !dbg !8952
  %. = zext i1 %cmp4 to i8, !dbg !8941
  br label %return, !dbg !8941

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i8 [ 0, %entry ], [ %., %if.end ], !dbg !8941
  ret i8 %retval.0, !dbg !8953
}

declare dso_local %union.tree_node* @size_int_kind(i64, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @negative_overflow_infinity(%union.tree_node* %type) unnamed_addr #0 !dbg !8954 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !8956, metadata !DIExpression()), !dbg !8957
  %call = tail call fastcc %union.tree_node* @vrp_val_min(%union.tree_node* %type) #7, !dbg !8958
  %call1 = tail call fastcc %union.tree_node* @make_overflow_infinity(%union.tree_node* %call) #7, !dbg !8959
  ret %union.tree_node* %call1, !dbg !8960
}

declare dso_local zeroext i8 @bitmap_ior_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) local_unnamed_addr #2

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @copy_value_range(%struct.value_range_d* %to, %struct.value_range_d* %from) unnamed_addr #0 !dbg !8961 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %to, metadata !8965, metadata !DIExpression()), !dbg !8967
  call void @llvm.dbg.value(metadata %struct.value_range_d* %from, metadata !8966, metadata !DIExpression()), !dbg !8967
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %from, i64 0, i32 0, !dbg !8968
  %0 = load i32, i32* %type, align 8, !dbg !8968
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %from, i64 0, i32 1, !dbg !8969
  %1 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !8969
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %from, i64 0, i32 2, !dbg !8970
  %2 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !8970
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %from, i64 0, i32 3, !dbg !8971
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !8971
  tail call fastcc void @set_value_range(%struct.value_range_d* %to, i32 %0, %union.tree_node* %1, %union.tree_node* %2, %struct.bitmap_head_def* %3) #7, !dbg !8972
  ret void, !dbg !8973
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @op_with_constant_singleton_value_range(%union.tree_node* %op) unnamed_addr #5 !dbg !8974 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !8976, metadata !DIExpression()), !dbg !8978
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %op) #6, !dbg !8979
  %tobool = icmp eq i8 %call, 0, !dbg !8979
  br i1 %tobool, label %if.end, label %cleanup, !dbg !8981

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8982
  %bf.load = load i64, i64* %0, align 8, !dbg !8982
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8984
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !8984
  br i1 %cmp, label %if.end2, label %cleanup, !dbg !8985

if.end2:                                          ; preds = %if.end
  %call3 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %op) #7, !dbg !8986
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call3, metadata !8977, metadata !DIExpression()), !dbg !8978
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call3, i64 0, i32 0, !dbg !8987
  %1 = load i32, i32* %type, align 8, !dbg !8987
  %cmp4 = icmp eq i32 %1, 1, !dbg !8989
  br i1 %cmp4, label %land.lhs.true, label %cleanup, !dbg !8990

land.lhs.true:                                    ; preds = %if.end2
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call3, i64 0, i32 1, !dbg !8991
  %2 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !8991
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call3, i64 0, i32 2, !dbg !8992
  %3 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !8992
  %call5 = tail call i32 @operand_equal_p(%union.tree_node* %2, %union.tree_node* %3, i32 0) #6, !dbg !8993
  %tobool6 = icmp eq i32 %call5, 0, !dbg !8993
  br i1 %tobool6, label %cleanup, label %land.lhs.true7, !dbg !8994

land.lhs.true7:                                   ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !8995
  %call9 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %4) #6, !dbg !8996
  %tobool10 = icmp eq i8 %call9, 0, !dbg !8996
  br i1 %tobool10, label %cleanup, label %if.then11, !dbg !8997

if.then11:                                        ; preds = %land.lhs.true7
  %5 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !8998
  br label %cleanup, !dbg !8999

cleanup:                                          ; preds = %land.lhs.true7, %land.lhs.true, %if.end, %entry, %if.end2, %if.then11
  %retval.0 = phi %union.tree_node* [ %5, %if.then11 ], [ %op, %entry ], [ null, %if.end ], [ null, %land.lhs.true7 ], [ null, %land.lhs.true ], [ null, %if.end2 ], !dbg !8978
  ret %union.tree_node* %retval.0, !dbg !9000
}

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_value_range_to_undefined(%struct.value_range_d* %vr) unnamed_addr #0 !dbg !9001 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !9003, metadata !DIExpression()), !dbg !9004
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !9005
  store i32 0, i32* %type, align 8, !dbg !9006
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !9007
  store %union.tree_node* null, %union.tree_node** %max, align 8, !dbg !9008
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !9009
  store %union.tree_node* null, %union.tree_node** %min, align 8, !dbg !9010
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !9011
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !9011
  %tobool = icmp eq %struct.bitmap_head_def* %0, null, !dbg !9013
  br i1 %tobool, label %if.end, label %if.then, !dbg !9014

if.then:                                          ; preds = %entry
  tail call void @bitmap_clear(%struct.bitmap_head_def* nonnull %0) #6, !dbg !9015
  br label %if.end, !dbg !9015

if.end:                                           ; preds = %entry, %if.then
  ret void, !dbg !9016
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @range_is_null(%struct.value_range_d* %vr) unnamed_addr #0 !dbg !9017 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !9019, metadata !DIExpression()), !dbg !9020
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !9021
  %0 = load i32, i32* %type, align 8, !dbg !9021
  %cmp = icmp eq i32 %0, 1, !dbg !9022
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !9023

land.lhs.true:                                    ; preds = %entry
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !9024
  %1 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9024
  %call = tail call i32 @integer_zerop(%union.tree_node* %1) #6, !dbg !9025
  %tobool = icmp eq i32 %call, 0, !dbg !9025
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !9026

land.rhs:                                         ; preds = %land.lhs.true
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !9027
  %2 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9027
  %call1 = tail call i32 @integer_zerop(%union.tree_node* %2) #6, !dbg !9028
  %tobool2 = icmp ne i32 %call1, 0, !dbg !9026
  %phitmp = zext i1 %tobool2 to i8
  br label %land.end

land.end:                                         ; preds = %land.lhs.true, %land.rhs, %entry
  %3 = phi i8 [ 0, %land.lhs.true ], [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %3, !dbg !9029
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_value_range_to_null(%struct.value_range_d* %vr, %union.tree_node* %type) unnamed_addr #0 !dbg !9030 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !9032, metadata !DIExpression()), !dbg !9034
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !9033, metadata !DIExpression()), !dbg !9034
  %call = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type, i64 0) #6, !dbg !9035
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !9036
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !9036
  tail call fastcc void @set_value_range_to_value(%struct.value_range_d* %vr, %union.tree_node* %call, %struct.bitmap_head_def* %0) #7, !dbg !9037
  ret void, !dbg !9038
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr) unnamed_addr #0 !dbg !9039 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !9041, metadata !DIExpression()), !dbg !9042
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !9043
  %0 = load i32, i32* %type, align 8, !dbg !9043
  %cmp = icmp eq i32 %0, 1, !dbg !9044
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !9045

land.rhs:                                         ; preds = %entry
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !9046
  %1 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9046
  %call = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %1) #7, !dbg !9047
  %tobool = icmp eq i8 %call, 0, !dbg !9047
  br i1 %tobool, label %lor.rhs, label %land.end, !dbg !9048

lor.rhs:                                          ; preds = %land.rhs
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !9049
  %2 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9049
  %call1 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %2) #7, !dbg !9050
  %tobool3 = icmp ne i8 %call1, 0, !dbg !9048
  %phitmp = zext i1 %tobool3 to i8, !dbg !9048
  br label %land.end, !dbg !9048

land.end:                                         ; preds = %land.rhs, %lor.rhs, %entry
  %3 = phi i8 [ 0, %entry ], [ 1, %land.rhs ], [ %phitmp, %lor.rhs ]
  ret i8 %3, !dbg !9051
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_value_range_to_truthvalue(%struct.value_range_d* %vr, %union.tree_node* %type) unnamed_addr #0 !dbg !9052 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !9054, metadata !DIExpression()), !dbg !9056
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !9055, metadata !DIExpression()), !dbg !9056
  %type1 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !9057
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i64 0, i32 6, !dbg !9057
  %bf.load = load i32, i32* %precision, align 4, !dbg !9057
  %bf.clear = and i32 %bf.load, 1023, !dbg !9057
  %cmp = icmp eq i32 %bf.clear, 1, !dbg !9059
  br i1 %cmp, label %if.then, label %if.else, !dbg !9060

if.then:                                          ; preds = %entry
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !9061
  br label %if.end, !dbg !9061

if.else:                                          ; preds = %entry
  %call = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type, i64 0) #6, !dbg !9062
  %call2 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type, i64 1) #6, !dbg !9063
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !9064
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !9064
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* %call, %union.tree_node* %call2, %struct.bitmap_head_def* %0) #7, !dbg !9065
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !9066
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @vrp_int_const_binop(i32 %code, %union.tree_node* %val1, %union.tree_node* %val2) unnamed_addr #5 !dbg !9067 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !9071, metadata !DIExpression()), !dbg !9089
  call void @llvm.dbg.value(metadata %union.tree_node* %val1, metadata !9072, metadata !DIExpression()), !dbg !9089
  call void @llvm.dbg.value(metadata %union.tree_node* %val2, metadata !9073, metadata !DIExpression()), !dbg !9089
  %call = tail call %union.tree_node* @int_const_binop(i32 %code, %union.tree_node* %val1, %union.tree_node* %val2, i32 0) #6, !dbg !9090
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !9074, metadata !DIExpression()), !dbg !9089
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !9091
  %0 = bitcast %union.tree_node** %type to i64**, !dbg !9091
  %1 = load i64*, i64** %0, align 8, !dbg !9091
  %bf.load = load i64, i64* %1, align 8, !dbg !9091
  %bf.cast22 = and i64 %bf.load, 2097152, !dbg !9091
  %tobool = icmp eq i64 %bf.cast22, 0, !dbg !9091
  br i1 %tobool, label %if.else29, label %if.then, !dbg !9092

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc i32 @compare_values(%union.tree_node* %call, %union.tree_node* %val1) #7, !dbg !9093
  call void @llvm.dbg.value(metadata i32 %call1, metadata !9075, metadata !DIExpression()), !dbg !9094
  call void @llvm.dbg.value(metadata i8 0, metadata !9078, metadata !DIExpression()), !dbg !9094
  %cmp = icmp ne i32 %code, 63, !dbg !9095
  %switch = icmp ult i32 %call1, 2, !dbg !9096
  %or.cond = or i1 %cmp, %switch, !dbg !9096
  br i1 %or.cond, label %lor.lhs.false4, label %if.end21, !dbg !9096

lor.lhs.false4:                                   ; preds = %if.then
  switch i32 %code, label %if.end21 [
    i32 64, label %switch.early.test19
    i32 65, label %land.lhs.true12
  ], !dbg !9097

switch.early.test19:                              ; preds = %lor.lhs.false4
  switch i32 %call1, label %if.end21 [
    i32 -1, label %if.else
    i32 0, label %if.else
  ], !dbg !9097

if.else:                                          ; preds = %switch.early.test19, %switch.early.test19
  br i1 false, label %if.else.land.lhs.true12_crit_edge, label %if.end21, !dbg !9098

if.else.land.lhs.true12_crit_edge:                ; preds = %if.else
  br label %land.lhs.true12, !dbg !9098

land.lhs.true12:                                  ; preds = %if.else.land.lhs.true12_crit_edge, %lor.lhs.false4
  %call13 = tail call i32 @integer_zerop(%union.tree_node* %val1) #6, !dbg !9099
  %tobool14 = icmp eq i32 %call13, 0, !dbg !9099
  br i1 %tobool14, label %if.then15, label %if.end21, !dbg !9100

if.then15:                                        ; preds = %land.lhs.true12
  %call16 = tail call %union.tree_node* @int_const_binop(i32 67, %union.tree_node* %call, %union.tree_node* %val1, i32 0) #6, !dbg !9101
  call void @llvm.dbg.value(metadata %union.tree_node* %call16, metadata !9079, metadata !DIExpression()), !dbg !9102
  %call17 = tail call fastcc i32 @compare_values(%union.tree_node* %call16, %union.tree_node* %val2) #7, !dbg !9103
  call void @llvm.dbg.value(metadata i32 %call17, metadata !9083, metadata !DIExpression()), !dbg !9102
  %cmp18 = icmp ne i32 %call17, 0, !dbg !9104
  br label %if.end21, !dbg !9106

if.end21:                                         ; preds = %land.lhs.true12, %if.then, %lor.lhs.false4, %switch.early.test19, %if.else, %if.then15
  %overflow.2 = phi i1 [ true, %switch.early.test19 ], [ false, %land.lhs.true12 ], [ %cmp18, %if.then15 ], [ false, %if.else ], [ false, %lor.lhs.false4 ], [ true, %if.then ]
  br i1 %overflow.2, label %if.then23, label %cleanup216, !dbg !9107

if.then23:                                        ; preds = %if.end21
  %call24 = tail call %union.tree_node* @copy_node_stat(%union.tree_node* %call) #6, !dbg !9108
  call void @llvm.dbg.value(metadata %union.tree_node* %call24, metadata !9074, metadata !DIExpression()), !dbg !9089
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9111
  %bf.load26 = load i64, i64* %2, align 8, !dbg !9112
  %bf.set = or i64 %bf.load26, 134217728, !dbg !9112
  store i64 %bf.set, i64* %2, align 8, !dbg !9112
  br label %cleanup216, !dbg !9113

if.else29:                                        ; preds = %entry
  %3 = load i32, i32* @flag_wrapv, align 4, !dbg !9114
  %tobool39 = icmp eq i32 %3, 0, !dbg !9114
  br i1 %tobool39, label %if.else41, label %cleanup216, !dbg !9114

if.else41:                                        ; preds = %if.else29
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9115
  %bf.load43 = load i64, i64* %4, align 8, !dbg !9115
  %bf.cast4624 = and i64 %bf.load43, 134217728, !dbg !9115
  %tobool47 = icmp eq i64 %bf.cast4624, 0, !dbg !9115
  br i1 %tobool47, label %lor.lhs.false62, label %land.lhs.true48, !dbg !9116

land.lhs.true48:                                  ; preds = %if.else41
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %val1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9117
  %bf.load50 = load i64, i64* %5, align 8, !dbg !9117
  %bf.cast5325 = and i64 %bf.load50, 134217728, !dbg !9117
  %tobool54 = icmp eq i64 %bf.cast5325, 0, !dbg !9117
  br i1 %tobool54, label %land.lhs.true55, label %lor.lhs.false62, !dbg !9118

land.lhs.true55:                                  ; preds = %land.lhs.true48
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %val2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9119
  %bf.load57 = load i64, i64* %6, align 8, !dbg !9119
  %bf.cast6026 = and i64 %bf.load57, 134217728, !dbg !9119
  %tobool61 = icmp eq i64 %bf.cast6026, 0, !dbg !9119
  br i1 %tobool61, label %if.then69, label %lor.lhs.false62, !dbg !9120

lor.lhs.false62:                                  ; preds = %land.lhs.true55, %land.lhs.true48, %if.else41
  %call63 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %val1) #7, !dbg !9121
  %tobool64 = icmp eq i8 %call63, 0, !dbg !9121
  br i1 %tobool64, label %lor.lhs.false65, label %if.then69, !dbg !9122

lor.lhs.false65:                                  ; preds = %lor.lhs.false62
  %call66 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %val2) #7, !dbg !9123
  %tobool68 = icmp eq i8 %call66, 0, !dbg !9123
  br i1 %tobool68, label %cleanup216, label %if.then69, !dbg !9124

if.then69:                                        ; preds = %land.lhs.true55, %lor.lhs.false65, %lor.lhs.false62
  %call70 = tail call i32 @tree_int_cst_sgn(%union.tree_node* %val1) #6, !dbg !9125
  call void @llvm.dbg.value(metadata i32 %call70, metadata !9084, metadata !DIExpression()), !dbg !9126
  %call71 = tail call i32 @tree_int_cst_sgn(%union.tree_node* %val2) #6, !dbg !9127
  call void @llvm.dbg.value(metadata i32 %call71, metadata !9088, metadata !DIExpression()), !dbg !9126
  %type73 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !9128
  %7 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !9128
  %call74 = tail call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %7) #7, !dbg !9130
  %tobool76 = icmp eq i8 %call74, 0, !dbg !9130
  br i1 %tobool76, label %if.end83, label %land.lhs.true77, !dbg !9131

land.lhs.true77:                                  ; preds = %if.then69
  %8 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !9132
  %call80 = tail call fastcc zeroext i8 @supports_overflow_infinity(%union.tree_node* %8) #7, !dbg !9133
  %tobool81 = icmp eq i8 %call80, 0, !dbg !9133
  br i1 %tobool81, label %cleanup216, label %if.end83, !dbg !9134

if.end83:                                         ; preds = %land.lhs.true77, %if.then69
  %cmp84 = icmp eq i32 %code, 63, !dbg !9135
  %cmp87 = icmp ne i32 %call70, %call71, !dbg !9137
  %or.cond5 = and i1 %cmp84, %cmp87, !dbg !9138
  br i1 %or.cond5, label %land.lhs.true95, label %lor.lhs.false89, !dbg !9138

lor.lhs.false89:                                  ; preds = %if.end83
  %cmp90 = icmp eq i32 %code, 64, !dbg !9139
  %cmp93 = icmp eq i32 %call70, %call71, !dbg !9140
  %or.cond6 = and i1 %cmp90, %cmp93, !dbg !9141
  br i1 %or.cond6, label %land.lhs.true95, label %if.end104, !dbg !9141

land.lhs.true95:                                  ; preds = %lor.lhs.false89, %if.end83
  %call96 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %val1) #7, !dbg !9142
  %tobool98 = icmp eq i8 %call96, 0, !dbg !9142
  br i1 %tobool98, label %if.end104, label %land.lhs.true99, !dbg !9143

land.lhs.true99:                                  ; preds = %land.lhs.true95
  %call100 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %val2) #7, !dbg !9144
  %tobool102 = icmp eq i8 %call100, 0, !dbg !9144
  br i1 %tobool102, label %if.end104, label %cleanup216, !dbg !9145

if.end104:                                        ; preds = %land.lhs.true99, %land.lhs.true95, %lor.lhs.false89
  switch i32 %code, label %if.else196 [
    i32 67, label %land.lhs.true122
    i32 69, label %land.lhs.true122
    i32 68, label %land.lhs.true122
    i32 76, label %land.lhs.true122
    i32 70, label %land.lhs.true122
    i32 84, label %land.lhs.true122
    i32 65, label %land.lhs.true134
    i32 63, label %land.lhs.true140
    i32 64, label %land.lhs.true151
  ], !dbg !9146

land.lhs.true122:                                 ; preds = %if.end104, %if.end104, %if.end104, %if.end104, %if.end104, %if.end104
  %call123 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %val1) #7, !dbg !9148
  %tobool125 = icmp eq i8 %call123, 0, !dbg !9148
  br i1 %tobool125, label %lor.lhs.false126, label %cleanup216, !dbg !9149

lor.lhs.false126:                                 ; preds = %land.lhs.true122
  %call127 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %val2) #7, !dbg !9150
  %tobool129 = icmp eq i8 %call127, 0, !dbg !9150
  br i1 %tobool129, label %if.end131, label %cleanup216, !dbg !9151

if.end131:                                        ; preds = %lor.lhs.false126
  %cmp132 = icmp eq i32 %code, 65, !dbg !9152
  %cmp135 = icmp eq i32 %call70, %call71, !dbg !9154
  %or.cond7 = and i1 %cmp132, %cmp135, !dbg !9155
  br i1 %or.cond7, label %if.then182, label %lor.lhs.false137, !dbg !9155

land.lhs.true134:                                 ; preds = %if.end104
  %cmp135.old = icmp eq i32 %call70, %call71, !dbg !9154
  br i1 %cmp135.old, label %if.then182, label %lor.lhs.false137, !dbg !9156

lor.lhs.false137:                                 ; preds = %land.lhs.true134, %if.end131
  switch i32 %code, label %if.else196 [
    i32 63, label %land.lhs.true140
    i32 64, label %land.lhs.true151
    i32 84, label %land.lhs.true164
    i32 67, label %if.then182
    i32 69, label %if.then182
    i32 68, label %if.then182
    i32 76, label %if.then182
    i32 70, label %if.then182
  ], !dbg !9157

land.lhs.true140:                                 ; preds = %if.end104, %lor.lhs.false137
  %cmp141 = icmp sgt i32 %call70, -1, !dbg !9158
  br i1 %cmp141, label %cond.true, label %cond.false, !dbg !9159

cond.true:                                        ; preds = %land.lhs.true140
  %call143 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %val2) #7, !dbg !9160
  %tobool144 = icmp eq i8 %call143, 0, !dbg !9160
  br i1 %tobool144, label %if.then182, label %lor.lhs.false148, !dbg !9161

cond.false:                                       ; preds = %land.lhs.true140
  %call145 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %val2) #7, !dbg !9162
  %tobool147 = icmp eq i8 %call145, 0, !dbg !9162
  br i1 %tobool147, label %lor.lhs.false148, label %if.then182, !dbg !9159

lor.lhs.false148:                                 ; preds = %cond.true, %cond.false
  switch i32 %code, label %if.else196 [
    i32 64, label %land.lhs.true151
    i32 84, label %land.lhs.true164
    i32 67, label %if.then182
    i32 69, label %if.then182
    i32 68, label %if.then182
    i32 76, label %if.then182
    i32 70, label %if.then182
  ], !dbg !9163

land.lhs.true151:                                 ; preds = %if.end104, %lor.lhs.false137, %lor.lhs.false148
  %cmp152 = icmp sgt i32 %call70, -1, !dbg !9164
  br i1 %cmp152, label %cond.true154, label %cond.false157, !dbg !9165

cond.true154:                                     ; preds = %land.lhs.true151
  %call155 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %val2) #7, !dbg !9166
  %tobool156 = icmp eq i8 %call155, 0, !dbg !9166
  br i1 %tobool156, label %if.then182, label %lor.lhs.false161, !dbg !9167

cond.false157:                                    ; preds = %land.lhs.true151
  %call158 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %val2) #7, !dbg !9168
  %tobool160 = icmp eq i8 %call158, 0, !dbg !9168
  br i1 %tobool160, label %lor.lhs.false161, label %if.then182, !dbg !9165

lor.lhs.false161:                                 ; preds = %cond.true154, %cond.false157
  %cmp162 = icmp eq i32 %code, 84, !dbg !9169
  %or.cond8 = and i1 %cmp162, %cmp152, !dbg !9170
  br i1 %or.cond8, label %if.then182, label %switch.early.test20, !dbg !9170

switch.early.test20:                              ; preds = %lor.lhs.false161
  switch i32 %code, label %if.else196 [
    i32 76, label %if.then182
    i32 70, label %if.then182
    i32 69, label %if.then182
    i32 68, label %if.then182
    i32 67, label %if.then182
  ], !dbg !9170

land.lhs.true164:                                 ; preds = %lor.lhs.false137, %lor.lhs.false148
  %cmp165.old = icmp sgt i32 %call70, -1, !dbg !9171
  br i1 %cmp165.old, label %if.then182, label %switch.early.test21, !dbg !9172

switch.early.test21:                              ; preds = %land.lhs.true164
  switch i32 %code, label %if.else196 [
    i32 76, label %if.then182
    i32 70, label %if.then182
    i32 69, label %if.then182
    i32 68, label %if.then182
    i32 67, label %if.then182
  ], !dbg !9172

if.then182:                                       ; preds = %cond.true, %cond.false, %cond.true154, %cond.false157, %switch.early.test21, %switch.early.test21, %switch.early.test21, %switch.early.test21, %switch.early.test21, %land.lhs.true164, %switch.early.test20, %switch.early.test20, %switch.early.test20, %switch.early.test20, %switch.early.test20, %lor.lhs.false161, %lor.lhs.false137, %lor.lhs.false137, %lor.lhs.false137, %lor.lhs.false137, %lor.lhs.false137, %lor.lhs.false148, %lor.lhs.false148, %lor.lhs.false148, %lor.lhs.false148, %lor.lhs.false148, %if.end131, %land.lhs.true134
  %9 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !9173
  %call185 = tail call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %9) #7, !dbg !9174
  %tobool187 = icmp eq i8 %call185, 0, !dbg !9174
  %10 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !9175
  br i1 %tobool187, label %cond.false192, label %cond.true188, !dbg !9174

cond.true188:                                     ; preds = %if.then182
  %call191 = tail call fastcc %union.tree_node* @positive_overflow_infinity(%union.tree_node* %10) #7, !dbg !9176
  br label %cleanup216, !dbg !9174

cond.false192:                                    ; preds = %if.then182
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !9177
  %11 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !9177
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !9177
  br label %cleanup216, !dbg !9174

if.else196:                                       ; preds = %switch.early.test21, %switch.early.test20, %if.end104, %lor.lhs.false137, %lor.lhs.false148
  %13 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !9178
  %call199 = tail call fastcc zeroext i8 @needs_overflow_infinity(%union.tree_node* %13) #7, !dbg !9179
  %tobool201 = icmp eq i8 %call199, 0, !dbg !9179
  %14 = load %union.tree_node*, %union.tree_node** %type73, align 8, !dbg !9175
  br i1 %tobool201, label %cond.false206, label %cond.true202, !dbg !9179

cond.true202:                                     ; preds = %if.else196
  %call205 = tail call fastcc %union.tree_node* @negative_overflow_infinity(%union.tree_node* %14) #7, !dbg !9180
  br label %cleanup216, !dbg !9179

cond.false206:                                    ; preds = %if.else196
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !9181
  %15 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !9181
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !9181
  br label %cleanup216, !dbg !9179

cleanup216:                                       ; preds = %if.else29, %land.lhs.true77, %land.lhs.true99, %lor.lhs.false126, %land.lhs.true122, %lor.lhs.false65, %if.then23, %if.end21, %cond.false192, %cond.true188, %cond.false206, %cond.true202
  %retval.1 = phi %union.tree_node* [ null, %land.lhs.true77 ], [ null, %land.lhs.true99 ], [ null, %lor.lhs.false126 ], [ null, %land.lhs.true122 ], [ %call191, %cond.true188 ], [ %12, %cond.false192 ], [ %call205, %cond.true202 ], [ %16, %cond.false206 ], [ %call24, %if.then23 ], [ %call, %if.end21 ], [ %call, %lor.lhs.false65 ], [ %call, %if.else29 ], !dbg !9089
  ret %union.tree_node* %retval.1, !dbg !9182
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vrp_expr_computes_nonnegative(%union.tree_node* %expr, i8* %strict_overflow_p) unnamed_addr #5 !dbg !9183 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !9187, metadata !DIExpression()), !dbg !9189
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !9188, metadata !DIExpression()), !dbg !9189
  %call = tail call zeroext i8 @tree_expr_nonnegative_warnv_p(%union.tree_node* %expr, i8* %strict_overflow_p) #6, !dbg !9190
  %tobool = icmp eq i8 %call, 0, !dbg !9190
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !9191

lor.rhs:                                          ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9192
  %bf.load = load i64, i64* %0, align 8, !dbg !9192
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !9193
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !9193
  br i1 %cmp, label %land.rhs, label %lor.end, !dbg !9194

land.rhs:                                         ; preds = %lor.rhs
  %call2 = tail call zeroext i8 @ssa_name_nonnegative_p(%union.tree_node* %expr) #7, !dbg !9195
  %tobool4 = icmp ne i8 %call2, 0, !dbg !9194
  %phitmp = zext i1 %tobool4 to i8
  br label %lor.end

lor.end:                                          ; preds = %entry, %lor.rhs, %land.rhs
  %1 = phi i8 [ 1, %entry ], [ 0, %lor.rhs ], [ %phitmp, %land.rhs ]
  ret i8 %1, !dbg !9196
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr) unnamed_addr #0 !dbg !9197 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !9199, metadata !DIExpression()), !dbg !9201
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !9202
  %0 = load i32, i32* %type, align 8, !dbg !9202
  %cmp = icmp eq i32 %0, 0, !dbg !9202
  br i1 %cmp, label %cond.true, label %land.lhs.true, !dbg !9202

land.lhs.true:                                    ; preds = %entry
  %cmp2 = icmp eq i32 %0, 3, !dbg !9202
  br i1 %cmp2, label %cond.true, label %land.lhs.true3, !dbg !9202

land.lhs.true3:                                   ; preds = %land.lhs.true
  %call = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr) #7, !dbg !9202
  %tobool = icmp eq i8 %call, 0, !dbg !9202
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !9202

cond.true:                                        ; preds = %land.lhs.true3, %land.lhs.true, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 1344, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !9202
  br label %cond.end, !dbg !9202

cond.end:                                         ; preds = %land.lhs.true3, %cond.true
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !9203
  %1 = bitcast %union.tree_node** %min to %struct.tree_common**, !dbg !9203
  %2 = load %struct.tree_common*, %struct.tree_common** %1, align 8, !dbg !9203
  %type4 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2, i64 0, i32 2, !dbg !9203
  %3 = load %union.tree_node*, %union.tree_node** %type4, align 8, !dbg !9203
  %call5 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %3, i64 0) #6, !dbg !9204
  call void @llvm.dbg.value(metadata %union.tree_node* %call5, metadata !9200, metadata !DIExpression()), !dbg !9201
  %call6 = tail call fastcc i32 @value_inside_range(%union.tree_node* %call5, %struct.value_range_d* %vr) #7, !dbg !9205
  %cmp7 = icmp eq i32 %call6, 1, !dbg !9206
  %conv8 = zext i1 %cmp7 to i8, !dbg !9207
  ret i8 %conv8, !dbg !9208
}

; Function Attrs: nounwind uwtable
define internal fastcc void @abs_extent_range(%struct.value_range_d* %vr, %union.tree_node* %min, %union.tree_node* %max) unnamed_addr #5 !dbg !9209 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !9213, metadata !DIExpression()), !dbg !9217
  call void @llvm.dbg.value(metadata %union.tree_node* %min, metadata !9214, metadata !DIExpression()), !dbg !9217
  call void @llvm.dbg.value(metadata %union.tree_node* %max, metadata !9215, metadata !DIExpression()), !dbg !9217
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %min, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9218
  %bf.load = load i64, i64* %0, align 8, !dbg !9218
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !9218
  %cmp1 = icmp eq i64 %bf.cast1, 23, !dbg !9218
  br i1 %cmp1, label %cond.end, label %cond.true, !dbg !9218

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 599, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !9218
  br label %cond.end, !dbg !9218

cond.end:                                         ; preds = %entry, %cond.true
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %max, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9219
  %bf.load3 = load i64, i64* %1, align 8, !dbg !9219
  %bf.cast52 = and i64 %bf.load3, 65535, !dbg !9219
  %cmp6 = icmp eq i64 %bf.cast52, 23, !dbg !9219
  br i1 %cmp6, label %cond.end9, label %cond.true7, !dbg !9219

cond.true7:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 600, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !9219
  br label %cond.end9, !dbg !9219

cond.end9:                                        ; preds = %cond.end, %cond.true7
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %min, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !9220
  %2 = bitcast %union.tree_node** %type to i64**, !dbg !9220
  %3 = load i64*, i64** %2, align 8, !dbg !9220
  %bf.load12 = load i64, i64* %3, align 8, !dbg !9220
  %bf.cast143 = and i64 %bf.load12, 65535, !dbg !9220
  %cmp15 = icmp eq i64 %bf.cast143, 6, !dbg !9220
  %4 = bitcast i64* %3 to %union.tree_node*, !dbg !9220
  br i1 %cmp15, label %cond.end33, label %lor.lhs.false, !dbg !9220

lor.lhs.false:                                    ; preds = %cond.end9
  %cmp22 = icmp eq i64 %bf.cast143, 7, !dbg !9220
  br i1 %cmp22, label %cond.end33, label %lor.lhs.false23, !dbg !9220

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %cmp30 = icmp eq i64 %bf.cast143, 8, !dbg !9220
  br i1 %cmp30, label %cond.end33, label %cond.true31, !dbg !9220

cond.true31:                                      ; preds = %lor.lhs.false23
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 601, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !9220
  %.pre = load i64*, i64** %2, align 8, !dbg !9221
  %bf.load38.pre = load i64, i64* %.pre, align 8, !dbg !9221
  %5 = bitcast i64* %.pre to %union.tree_node*, !dbg !9220
  br label %cond.end33, !dbg !9220

cond.end33:                                       ; preds = %cond.end9, %lor.lhs.false, %lor.lhs.false23, %cond.true31
  %6 = phi %union.tree_node* [ %4, %cond.end9 ], [ %4, %lor.lhs.false ], [ %4, %lor.lhs.false23 ], [ %5, %cond.true31 ]
  %bf.load38 = phi i64 [ %bf.load12, %cond.end9 ], [ %bf.load12, %lor.lhs.false ], [ %bf.load12, %lor.lhs.false23 ], [ %bf.load38.pre, %cond.true31 ], !dbg !9221
  %bf.cast406 = and i64 %bf.load38, 2097152, !dbg !9221
  %tobool = icmp eq i64 %bf.cast406, 0, !dbg !9221
  br i1 %tobool, label %cond.end43, label %cond.true41, !dbg !9221

cond.true41:                                      ; preds = %cond.end33
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 602, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !9221
  %.pre10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !9222
  br label %cond.end43, !dbg !9221

cond.end43:                                       ; preds = %cond.end33, %cond.true41
  %7 = phi %union.tree_node* [ %6, %cond.end33 ], [ %.pre10, %cond.true41 ], !dbg !9222
  %call = tail call %union.tree_node* @fold_unary_loc(i32 0, i32 82, %union.tree_node* %7, %union.tree_node* %min) #6, !dbg !9222
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !9214, metadata !DIExpression()), !dbg !9217
  %type48 = getelementptr inbounds %union.tree_node, %union.tree_node* %max, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !9223
  %8 = load %union.tree_node*, %union.tree_node** %type48, align 8, !dbg !9223
  %call49 = tail call %union.tree_node* @fold_unary_loc(i32 0, i32 82, %union.tree_node* %8, %union.tree_node* %max) #6, !dbg !9223
  call void @llvm.dbg.value(metadata %union.tree_node* %call49, metadata !9215, metadata !DIExpression()), !dbg !9217
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9224
  %bf.load51 = load i64, i64* %9, align 8, !dbg !9224
  %bf.cast547 = and i64 %bf.load51, 134217728, !dbg !9224
  %tobool55 = icmp eq i64 %bf.cast547, 0, !dbg !9224
  br i1 %tobool55, label %lor.lhs.false56, label %if.then, !dbg !9226

lor.lhs.false56:                                  ; preds = %cond.end43
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9227
  %bf.load58 = load i64, i64* %10, align 8, !dbg !9227
  %bf.cast618 = and i64 %bf.load58, 134217728, !dbg !9227
  %tobool62 = icmp eq i64 %bf.cast618, 0, !dbg !9227
  br i1 %tobool62, label %if.end, label %if.then, !dbg !9228

if.then:                                          ; preds = %lor.lhs.false56, %cond.end43
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !9229
  br label %cleanup.cont, !dbg !9231

if.end:                                           ; preds = %lor.lhs.false56
  %call63 = tail call fastcc i32 @compare_values(%union.tree_node* %call, %union.tree_node* %call49) #7, !dbg !9232
  call void @llvm.dbg.value(metadata i32 %call63, metadata !9216, metadata !DIExpression()), !dbg !9217
  switch i32 %call63, label %if.else76 [
    i32 -1, label %if.then65
    i32 0, label %if.then72
    i32 1, label %if.then72
  ], !dbg !9233

if.then65:                                        ; preds = %if.end
  %type67 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !9234
  %11 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !9234
  %call68 = tail call %union.tree_node* @fold_unary_loc(i32 0, i32 79, %union.tree_node* %11, %union.tree_node* %call49) #6, !dbg !9234
  call void @llvm.dbg.value(metadata %union.tree_node* %call68, metadata !9214, metadata !DIExpression()), !dbg !9217
  br label %if.end78, !dbg !9236

if.then72:                                        ; preds = %if.end, %if.end
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !9215, metadata !DIExpression()), !dbg !9217
  %type74 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !9237
  %12 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !9237
  %call75 = tail call %union.tree_node* @fold_unary_loc(i32 0, i32 79, %union.tree_node* %12, %union.tree_node* %call) #6, !dbg !9237
  call void @llvm.dbg.value(metadata %union.tree_node* %call75, metadata !9214, metadata !DIExpression()), !dbg !9217
  br label %if.end78

if.else76:                                        ; preds = %if.end
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr) #7, !dbg !9240
  br label %cleanup.cont, !dbg !9242

if.end78:                                         ; preds = %if.then72, %if.then65
  %max.addr.0 = phi %union.tree_node* [ %call49, %if.then65 ], [ %call, %if.then72 ], !dbg !9217
  %min.addr.0 = phi %union.tree_node* [ %call68, %if.then65 ], [ %call75, %if.then72 ], !dbg !9243
  call void @llvm.dbg.value(metadata %union.tree_node* %min.addr.0, metadata !9214, metadata !DIExpression()), !dbg !9217
  call void @llvm.dbg.value(metadata %union.tree_node* %max.addr.0, metadata !9215, metadata !DIExpression()), !dbg !9217
  tail call fastcc void @set_and_canonicalize_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* %min.addr.0, %union.tree_node* %max.addr.0, %struct.bitmap_head_def* null) #7, !dbg !9244
  br label %cleanup.cont, !dbg !9245

cleanup.cont:                                     ; preds = %if.then, %if.else76, %if.end78
  ret void, !dbg !9245
}

declare dso_local { i64, i64 } @tree_to_double_int(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @floor_log2(i64) local_unnamed_addr #2

declare dso_local %union.tree_node* @double_int_to_tree(%union.tree_node*, i64, i64) local_unnamed_addr #2

declare dso_local zeroext i8 @tree_expr_nonnegative_warnv_p(%union.tree_node*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @value_inside_range(%union.tree_node* %val, %struct.value_range_d* %vr) unnamed_addr #0 !dbg !9246 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !9250, metadata !DIExpression()), !dbg !9254
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !9251, metadata !DIExpression()), !dbg !9254
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !9255
  %0 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9255
  %call = tail call fastcc i32 @operand_less_p(%union.tree_node* %val, %union.tree_node* %0) #7, !dbg !9256
  call void @llvm.dbg.value(metadata i32 %call, metadata !9252, metadata !DIExpression()), !dbg !9254
  switch i32 %call, label %if.end5 [
    i32 -2, label %cleanup
    i32 1, label %if.then4
  ], !dbg !9257

if.then4:                                         ; preds = %entry
  br label %cleanup, !dbg !9258

if.end5:                                          ; preds = %entry
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !9260
  %1 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9260
  %call6 = tail call fastcc i32 @operand_less_p(%union.tree_node* %1, %union.tree_node* %val) #7, !dbg !9261
  call void @llvm.dbg.value(metadata i32 %call6, metadata !9253, metadata !DIExpression()), !dbg !9254
  %cmp7 = icmp eq i32 %call6, -2, !dbg !9262
  br i1 %cmp7, label %cleanup, label %if.end9, !dbg !9264

if.end9:                                          ; preds = %if.end5
  %tobool = icmp eq i32 %call6, 0, !dbg !9265
  %lnot.ext = zext i1 %tobool to i32, !dbg !9265
  br label %cleanup, !dbg !9266

cleanup:                                          ; preds = %if.end5, %entry, %if.end9, %if.then4
  %retval.0 = phi i32 [ 0, %if.then4 ], [ %lnot.ext, %if.end9 ], [ -2, %entry ], [ -2, %if.end5 ], !dbg !9254
  ret i32 %retval.0, !dbg !9267
}

declare dso_local %union.tree_node* @fold_unary_loc(i32, i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @vrp_meet(%struct.value_range_d* %vr0, %struct.value_range_d* %vr1) unnamed_addr #5 !dbg !9268 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !9270, metadata !DIExpression()), !dbg !9278
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !9271, metadata !DIExpression()), !dbg !9278
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 0, !dbg !9279
  %0 = load i32, i32* %type, align 8, !dbg !9279
  %cmp = icmp eq i32 %0, 0, !dbg !9281
  br i1 %cmp, label %if.then, label %if.end, !dbg !9282

if.then:                                          ; preds = %entry
  tail call fastcc void @copy_value_range(%struct.value_range_d* %vr0, %struct.value_range_d* %vr1) #7, !dbg !9283
  br label %if.end259, !dbg !9285

if.end:                                           ; preds = %entry
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 0, !dbg !9286
  %1 = load i32, i32* %type1, align 8, !dbg !9286
  %cmp2 = icmp eq i32 %1, 0, !dbg !9288
  br i1 %cmp2, label %if.end259, label %if.end4, !dbg !9289

if.end4:                                          ; preds = %if.end
  %cmp6 = icmp eq i32 %0, 3, !dbg !9290
  br i1 %cmp6, label %if.end259, label %if.end8, !dbg !9292

if.end8:                                          ; preds = %if.end4
  %cmp10 = icmp eq i32 %1, 3, !dbg !9293
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !9295

if.then11:                                        ; preds = %if.end8
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr0) #7, !dbg !9296
  br label %if.end259, !dbg !9298

if.end12:                                         ; preds = %if.end8
  %cmp14 = icmp eq i32 %0, 1, !dbg !9299
  br i1 %cmp14, label %land.lhs.true, label %if.else106, !dbg !9300

land.lhs.true:                                    ; preds = %if.end12
  %cmp16 = icmp eq i32 %1, 1, !dbg !9301
  br i1 %cmp16, label %if.then17, label %if.else106, !dbg !9302

if.then17:                                        ; preds = %land.lhs.true
  %min19 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !9303
  %2 = load %union.tree_node*, %union.tree_node** %min19, align 8, !dbg !9303
  %min20 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !9304
  %3 = load %union.tree_node*, %union.tree_node** %min20, align 8, !dbg !9304
  %call = tail call fastcc i32 @compare_values(%union.tree_node* %2, %union.tree_node* %3) #7, !dbg !9305
  call void @llvm.dbg.value(metadata i32 %call, metadata !9272, metadata !DIExpression()), !dbg !9306
  switch i32 %call, label %cleanup [
    i32 0, label %if.then23
    i32 1, label %if.then23
    i32 -1, label %if.then26
  ], !dbg !9307

if.then23:                                        ; preds = %if.then17, %if.then17
  br label %if.end30, !dbg !9309

if.then26:                                        ; preds = %if.then17
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %if.then23
  %vr1.pn = phi %struct.value_range_d* [ %vr1, %if.then23 ], [ %vr0, %if.then26 ]
  %min.0.in = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.pn, i64 0, i32 1, !dbg !9310
  %min.0 = load %union.tree_node*, %union.tree_node** %min.0.in, align 8, !dbg !9310
  call void @llvm.dbg.value(metadata %union.tree_node* %min.0, metadata !9275, metadata !DIExpression()), !dbg !9306
  %max31 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !9311
  %4 = load %union.tree_node*, %union.tree_node** %max31, align 8, !dbg !9311
  %max32 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !9312
  %5 = load %union.tree_node*, %union.tree_node** %max32, align 8, !dbg !9312
  %call33 = tail call fastcc i32 @compare_values(%union.tree_node* %4, %union.tree_node* %5) #7, !dbg !9313
  call void @llvm.dbg.value(metadata i32 %call33, metadata !9272, metadata !DIExpression()), !dbg !9306
  switch i32 %call33, label %cleanup [
    i32 0, label %if.then37
    i32 -1, label %if.then37
    i32 1, label %if.then41
  ], !dbg !9314

if.then37:                                        ; preds = %if.end30, %if.end30
  br label %if.end45, !dbg !9316

if.then41:                                        ; preds = %if.end30
  br label %if.end45

if.end45:                                         ; preds = %if.then41, %if.then37
  %vr1.pn4 = phi %struct.value_range_d* [ %vr1, %if.then37 ], [ %vr0, %if.then41 ]
  %max.0.in = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.pn4, i64 0, i32 2, !dbg !9317
  %max.0 = load %union.tree_node*, %union.tree_node** %max.0.in, align 8, !dbg !9317
  call void @llvm.dbg.value(metadata %union.tree_node* %max.0, metadata !9276, metadata !DIExpression()), !dbg !9306
  %type46 = getelementptr inbounds %union.tree_node, %union.tree_node* %min.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !9318
  %6 = bitcast %union.tree_node** %type46 to i64**, !dbg !9318
  %7 = load i64*, i64** %6, align 8, !dbg !9318
  %bf.load = load i64, i64* %7, align 8, !dbg !9318
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !9318
  %cmp47 = icmp eq i64 %bf.cast1, 6, !dbg !9318
  br i1 %cmp47, label %land.lhs.true64, label %lor.lhs.false48, !dbg !9318

lor.lhs.false48:                                  ; preds = %if.end45
  %cmp55 = icmp eq i64 %bf.cast1, 7, !dbg !9318
  br i1 %cmp55, label %land.lhs.true64, label %lor.lhs.false56, !dbg !9318

lor.lhs.false56:                                  ; preds = %lor.lhs.false48
  %cmp63 = icmp eq i64 %bf.cast1, 8, !dbg !9318
  br i1 %cmp63, label %land.lhs.true64, label %if.end79, !dbg !9320

land.lhs.true64:                                  ; preds = %lor.lhs.false56, %lor.lhs.false48, %if.end45
  %call65 = tail call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %min.0) #7, !dbg !9321
  %tobool = icmp eq i8 %call65, 0, !dbg !9321
  br i1 %tobool, label %lor.lhs.false66, label %land.lhs.true70, !dbg !9322

lor.lhs.false66:                                  ; preds = %land.lhs.true64
  %call67 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %min.0) #7, !dbg !9323
  %tobool69 = icmp eq i8 %call67, 0, !dbg !9323
  br i1 %tobool69, label %if.end79, label %land.lhs.true70, !dbg !9324

land.lhs.true70:                                  ; preds = %lor.lhs.false66, %land.lhs.true64
  %call71 = tail call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %max.0) #7, !dbg !9325
  %tobool73 = icmp eq i8 %call71, 0, !dbg !9325
  br i1 %tobool73, label %lor.lhs.false74, label %cleanup, !dbg !9326

lor.lhs.false74:                                  ; preds = %land.lhs.true70
  %call75 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %max.0) #7, !dbg !9327
  %tobool77 = icmp eq i8 %call75, 0, !dbg !9327
  br i1 %tobool77, label %if.end79, label %cleanup, !dbg !9328

if.end79:                                         ; preds = %lor.lhs.false74, %lor.lhs.false66, %lor.lhs.false56
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 3, !dbg !9329
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !9329
  %tobool80 = icmp eq %struct.bitmap_head_def* %8, null, !dbg !9331
  br i1 %tobool80, label %if.else92, label %land.lhs.true81, !dbg !9332

land.lhs.true81:                                  ; preds = %if.end79
  %equiv82 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 3, !dbg !9333
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv82, align 8, !dbg !9333
  %tobool83 = icmp eq %struct.bitmap_head_def* %9, null, !dbg !9334
  br i1 %tobool83, label %if.else92, label %land.lhs.true84, !dbg !9335

land.lhs.true84:                                  ; preds = %land.lhs.true81
  %cmp87 = icmp eq %struct.bitmap_head_def* %8, %9, !dbg !9336
  br i1 %cmp87, label %if.else92, label %if.then89, !dbg !9337

if.then89:                                        ; preds = %land.lhs.true84
  tail call void @bitmap_and_into(%struct.bitmap_head_def* nonnull %8, %struct.bitmap_head_def* nonnull %9) #6, !dbg !9338
  br label %if.end101, !dbg !9338

if.else92:                                        ; preds = %land.lhs.true84, %land.lhs.true81, %if.end79
  br i1 %tobool80, label %if.end101, label %land.lhs.true95, !dbg !9339

land.lhs.true95:                                  ; preds = %if.else92
  %equiv96 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 3, !dbg !9341
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv96, align 8, !dbg !9341
  %tobool97 = icmp eq %struct.bitmap_head_def* %10, null, !dbg !9342
  br i1 %tobool97, label %if.then98, label %if.end101, !dbg !9343

if.then98:                                        ; preds = %land.lhs.true95
  tail call void @bitmap_clear(%struct.bitmap_head_def* nonnull %8) #6, !dbg !9344
  br label %if.end101, !dbg !9344

if.end101:                                        ; preds = %land.lhs.true95, %if.else92, %if.then98, %if.then89
  %11 = load i32, i32* %type, align 8, !dbg !9345
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !9346
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr0, i32 %11, %union.tree_node* %min.0, %union.tree_node* %max.0, %struct.bitmap_head_def* %12) #7, !dbg !9347
  br label %cleanup, !dbg !9348

cleanup:                                          ; preds = %lor.lhs.false74, %land.lhs.true70, %if.end30, %if.then17, %if.end101
  %cleanup.dest.slot.0 = phi i1 [ true, %if.end101 ], [ false, %if.then17 ], [ false, %if.end30 ], [ false, %lor.lhs.false74 ], [ false, %land.lhs.true70 ]
  br i1 %cleanup.dest.slot.0, label %if.end259, label %give_up

if.else106:                                       ; preds = %land.lhs.true, %if.end12
  %cmp108 = icmp eq i32 %0, 2, !dbg !9349
  br i1 %cmp108, label %land.lhs.true110, label %if.else158, !dbg !9351

land.lhs.true110:                                 ; preds = %if.else106
  %cmp112 = icmp eq i32 %1, 2, !dbg !9352
  br i1 %cmp112, label %if.then114, label %if.else158, !dbg !9353

if.then114:                                       ; preds = %land.lhs.true110
  %min115 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !9354
  %13 = load %union.tree_node*, %union.tree_node** %min115, align 8, !dbg !9354
  %min116 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !9357
  %14 = load %union.tree_node*, %union.tree_node** %min116, align 8, !dbg !9357
  %call117 = tail call fastcc i32 @compare_values(%union.tree_node* %13, %union.tree_node* %14) #7, !dbg !9358
  %cmp118 = icmp eq i32 %call117, 0, !dbg !9359
  br i1 %cmp118, label %land.lhs.true120, label %give_up, !dbg !9360

land.lhs.true120:                                 ; preds = %if.then114
  %max121 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 2, !dbg !9361
  %15 = load %union.tree_node*, %union.tree_node** %max121, align 8, !dbg !9361
  %max122 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !9362
  %16 = load %union.tree_node*, %union.tree_node** %max122, align 8, !dbg !9362
  %call123 = tail call fastcc i32 @compare_values(%union.tree_node* %15, %union.tree_node* %16) #7, !dbg !9363
  %cmp124 = icmp eq i32 %call123, 0, !dbg !9364
  br i1 %cmp124, label %land.lhs.true126, label %give_up, !dbg !9365

land.lhs.true126:                                 ; preds = %land.lhs.true120
  %17 = load %union.tree_node*, %union.tree_node** %min115, align 8, !dbg !9366
  %18 = load %union.tree_node*, %union.tree_node** %max121, align 8, !dbg !9367
  %call129 = tail call fastcc i32 @compare_values(%union.tree_node* %17, %union.tree_node* %18) #7, !dbg !9368
  %cmp130 = icmp eq i32 %call129, 0, !dbg !9369
  br i1 %cmp130, label %if.then132, label %give_up, !dbg !9370

if.then132:                                       ; preds = %land.lhs.true126
  %equiv133 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 3, !dbg !9371
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv133, align 8, !dbg !9371
  %tobool134 = icmp eq %struct.bitmap_head_def* %19, null, !dbg !9374
  br i1 %tobool134, label %if.else146, label %land.lhs.true135, !dbg !9375

land.lhs.true135:                                 ; preds = %if.then132
  %equiv136 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 3, !dbg !9376
  %20 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv136, align 8, !dbg !9376
  %tobool137 = icmp eq %struct.bitmap_head_def* %20, null, !dbg !9377
  br i1 %tobool137, label %if.else146, label %land.lhs.true138, !dbg !9378

land.lhs.true138:                                 ; preds = %land.lhs.true135
  %cmp141 = icmp eq %struct.bitmap_head_def* %19, %20, !dbg !9379
  br i1 %cmp141, label %if.else146, label %if.then143, !dbg !9380

if.then143:                                       ; preds = %land.lhs.true138
  tail call void @bitmap_and_into(%struct.bitmap_head_def* nonnull %19, %struct.bitmap_head_def* nonnull %20) #6, !dbg !9381
  br label %if.end259, !dbg !9381

if.else146:                                       ; preds = %land.lhs.true138, %land.lhs.true135, %if.then132
  br i1 %tobool134, label %if.end259, label %land.lhs.true149, !dbg !9382

land.lhs.true149:                                 ; preds = %if.else146
  %equiv150 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 3, !dbg !9384
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv150, align 8, !dbg !9384
  %tobool151 = icmp eq %struct.bitmap_head_def* %21, null, !dbg !9385
  br i1 %tobool151, label %if.then152, label %if.end259, !dbg !9386

if.then152:                                       ; preds = %land.lhs.true149
  tail call void @bitmap_clear(%struct.bitmap_head_def* nonnull %19) #6, !dbg !9387
  br label %if.end259, !dbg !9387

if.else158:                                       ; preds = %land.lhs.true110, %if.else106
  br i1 %cmp108, label %if.then166, label %lor.lhs.false162, !dbg !9388

lor.lhs.false162:                                 ; preds = %if.else158
  %cmp164 = icmp eq i32 %1, 2, !dbg !9390
  br i1 %cmp164, label %if.then166, label %if.else210, !dbg !9391

if.then166:                                       ; preds = %lor.lhs.false162, %if.else158
  %call167 = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr0) #7, !dbg !9392
  %tobool168 = icmp eq i8 %call167, 0, !dbg !9392
  br i1 %tobool168, label %land.lhs.true169, label %give_up, !dbg !9395

land.lhs.true169:                                 ; preds = %if.then166
  %call170 = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr1) #7, !dbg !9396
  %tobool171 = icmp eq i8 %call170, 0, !dbg !9396
  br i1 %tobool171, label %land.lhs.true172, label %give_up, !dbg !9397

land.lhs.true172:                                 ; preds = %land.lhs.true169
  %call173 = tail call fastcc zeroext i8 @value_ranges_intersect_p(%struct.value_range_d* %vr0, %struct.value_range_d* %vr1) #7, !dbg !9398
  %tobool174 = icmp eq i8 %call173, 0, !dbg !9398
  br i1 %tobool174, label %if.then175, label %give_up, !dbg !9399

if.then175:                                       ; preds = %land.lhs.true172
  %22 = load i32, i32* %type1, align 8, !dbg !9400
  %cmp177 = icmp eq i32 %22, 2, !dbg !9403
  br i1 %cmp177, label %if.then179, label %if.end184, !dbg !9404

if.then179:                                       ; preds = %if.then175
  %min181 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 1, !dbg !9405
  %23 = load %union.tree_node*, %union.tree_node** %min181, align 8, !dbg !9405
  %max182 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 2, !dbg !9406
  %24 = load %union.tree_node*, %union.tree_node** %max182, align 8, !dbg !9406
  %equiv183 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 3, !dbg !9407
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv183, align 8, !dbg !9407
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr0, i32 2, %union.tree_node* %23, %union.tree_node* %24, %struct.bitmap_head_def* %25) #7, !dbg !9408
  br label %if.end184, !dbg !9408

if.end184:                                        ; preds = %if.then179, %if.then175
  %equiv185 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 3, !dbg !9409
  %26 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv185, align 8, !dbg !9409
  %tobool186 = icmp eq %struct.bitmap_head_def* %26, null, !dbg !9411
  br i1 %tobool186, label %if.else198, label %land.lhs.true187, !dbg !9412

land.lhs.true187:                                 ; preds = %if.end184
  %equiv188 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 3, !dbg !9413
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv188, align 8, !dbg !9413
  %tobool189 = icmp eq %struct.bitmap_head_def* %27, null, !dbg !9414
  br i1 %tobool189, label %if.else198, label %land.lhs.true190, !dbg !9415

land.lhs.true190:                                 ; preds = %land.lhs.true187
  %cmp193 = icmp eq %struct.bitmap_head_def* %26, %27, !dbg !9416
  br i1 %cmp193, label %if.else198, label %if.then195, !dbg !9417

if.then195:                                       ; preds = %land.lhs.true190
  tail call void @bitmap_and_into(%struct.bitmap_head_def* nonnull %26, %struct.bitmap_head_def* nonnull %27) #6, !dbg !9418
  br label %if.end259, !dbg !9418

if.else198:                                       ; preds = %land.lhs.true190, %land.lhs.true187, %if.end184
  br i1 %tobool186, label %if.end259, label %land.lhs.true201, !dbg !9419

land.lhs.true201:                                 ; preds = %if.else198
  %equiv202 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 3, !dbg !9421
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv202, align 8, !dbg !9421
  %tobool203 = icmp eq %struct.bitmap_head_def* %28, null, !dbg !9422
  br i1 %tobool203, label %if.then204, label %if.end259, !dbg !9423

if.then204:                                       ; preds = %land.lhs.true201
  tail call void @bitmap_clear(%struct.bitmap_head_def* nonnull %26) #6, !dbg !9424
  br label %if.end259, !dbg !9424

if.else210:                                       ; preds = %lor.lhs.false162
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 6245, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !9425
  br label %if.end259

give_up:                                          ; preds = %land.lhs.true172, %land.lhs.true169, %if.then166, %if.then114, %land.lhs.true120, %land.lhs.true126, %cleanup
  call void @llvm.dbg.label(metadata !9277), !dbg !9426
  %call214 = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr0) #7, !dbg !9427
  %tobool215 = icmp eq i8 %call214, 0, !dbg !9427
  br i1 %tobool215, label %land.lhs.true216, label %if.else258, !dbg !9429

land.lhs.true216:                                 ; preds = %give_up
  %29 = load i32, i32* %type, align 8, !dbg !9430
  %cmp218 = icmp eq i32 %29, 1, !dbg !9431
  br i1 %cmp218, label %land.lhs.true220, label %lor.lhs.false223, !dbg !9432

land.lhs.true220:                                 ; preds = %land.lhs.true216
  %call221 = tail call fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr0) #7, !dbg !9433
  %tobool222 = icmp eq i8 %call221, 0, !dbg !9433
  br i1 %tobool222, label %land.lhs.true231, label %land.lhs.true220.lor.lhs.false223_crit_edge, !dbg !9434

land.lhs.true220.lor.lhs.false223_crit_edge:      ; preds = %land.lhs.true220
  %.pre = load i32, i32* %type, align 8, !dbg !9435
  br label %lor.lhs.false223, !dbg !9434

lor.lhs.false223:                                 ; preds = %land.lhs.true220.lor.lhs.false223_crit_edge, %land.lhs.true216
  %30 = phi i32 [ %.pre, %land.lhs.true220.lor.lhs.false223_crit_edge ], [ %29, %land.lhs.true216 ], !dbg !9435
  %cmp225 = icmp eq i32 %30, 2, !dbg !9436
  br i1 %cmp225, label %land.lhs.true227, label %if.else258, !dbg !9437

land.lhs.true227:                                 ; preds = %lor.lhs.false223
  %call228 = tail call fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr0) #7, !dbg !9438
  %tobool230 = icmp eq i8 %call228, 0, !dbg !9438
  br i1 %tobool230, label %if.else258, label %land.lhs.true231, !dbg !9439

land.lhs.true231:                                 ; preds = %land.lhs.true220, %land.lhs.true227
  %call232 = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %vr1) #7, !dbg !9440
  %tobool233 = icmp eq i8 %call232, 0, !dbg !9440
  br i1 %tobool233, label %land.lhs.true234, label %if.else258, !dbg !9441

land.lhs.true234:                                 ; preds = %land.lhs.true231
  %31 = load i32, i32* %type1, align 8, !dbg !9442
  %cmp236 = icmp eq i32 %31, 1, !dbg !9443
  br i1 %cmp236, label %land.lhs.true238, label %lor.lhs.false241, !dbg !9444

land.lhs.true238:                                 ; preds = %land.lhs.true234
  %call239 = tail call fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr1) #7, !dbg !9445
  %tobool240 = icmp eq i8 %call239, 0, !dbg !9445
  br i1 %tobool240, label %if.then249, label %land.lhs.true238.lor.lhs.false241_crit_edge, !dbg !9446

land.lhs.true238.lor.lhs.false241_crit_edge:      ; preds = %land.lhs.true238
  %.pre5 = load i32, i32* %type1, align 8, !dbg !9447
  br label %lor.lhs.false241, !dbg !9446

lor.lhs.false241:                                 ; preds = %land.lhs.true238.lor.lhs.false241_crit_edge, %land.lhs.true234
  %32 = phi i32 [ %.pre5, %land.lhs.true238.lor.lhs.false241_crit_edge ], [ %31, %land.lhs.true234 ], !dbg !9447
  %cmp243 = icmp eq i32 %32, 2, !dbg !9448
  br i1 %cmp243, label %land.lhs.true245, label %if.else258, !dbg !9449

land.lhs.true245:                                 ; preds = %lor.lhs.false241
  %call246 = tail call fastcc zeroext i8 @range_includes_zero_p(%struct.value_range_d* %vr1) #7, !dbg !9450
  %tobool248 = icmp eq i8 %call246, 0, !dbg !9450
  br i1 %tobool248, label %if.else258, label %if.then249, !dbg !9451

if.then249:                                       ; preds = %land.lhs.true238, %land.lhs.true245
  %min250 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 1, !dbg !9452
  %33 = bitcast %union.tree_node** %min250 to %struct.tree_common**, !dbg !9452
  %34 = load %struct.tree_common*, %struct.tree_common** %33, align 8, !dbg !9452
  %type252 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %34, i64 0, i32 2, !dbg !9452
  %35 = load %union.tree_node*, %union.tree_node** %type252, align 8, !dbg !9452
  tail call fastcc void @set_value_range_to_nonnull(%struct.value_range_d* %vr0, %union.tree_node* %35) #7, !dbg !9454
  %equiv253 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 3, !dbg !9455
  %36 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv253, align 8, !dbg !9455
  %tobool254 = icmp eq %struct.bitmap_head_def* %36, null, !dbg !9457
  br i1 %tobool254, label %if.end259, label %if.then255, !dbg !9458

if.then255:                                       ; preds = %if.then249
  tail call void @bitmap_clear(%struct.bitmap_head_def* nonnull %36) #6, !dbg !9459
  br label %if.end259, !dbg !9459

if.else258:                                       ; preds = %land.lhs.true245, %land.lhs.true231, %land.lhs.true227, %give_up, %lor.lhs.false241, %lor.lhs.false223
  tail call fastcc void @set_value_range_to_varying(%struct.value_range_d* %vr0) #7, !dbg !9460
  br label %if.end259

if.end259:                                        ; preds = %land.lhs.true149, %if.else146, %if.then249, %land.lhs.true201, %if.else198, %if.then255, %cleanup, %if.else210, %if.then195, %if.then204, %if.then152, %if.then143, %if.end4, %if.end, %if.then, %if.then11, %if.else258
  ret void, !dbg !9461
}

declare dso_local void @bitmap_and_into(%struct.bitmap_head_def*, %struct.bitmap_head_def*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8 zeroext %use_equiv_p, i8* %strict_overflow_p, i8* %only_ranges) unnamed_addr #5 !dbg !9462 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !9466, metadata !DIExpression()), !dbg !9473
  call void @llvm.dbg.value(metadata %union.tree_node* %op0, metadata !9467, metadata !DIExpression()), !dbg !9473
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !9468, metadata !DIExpression()), !dbg !9473
  call void @llvm.dbg.value(metadata i8 %use_equiv_p, metadata !9469, metadata !DIExpression()), !dbg !9473
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !9470, metadata !DIExpression()), !dbg !9473
  call void @llvm.dbg.value(metadata i8* %only_ranges, metadata !9471, metadata !DIExpression()), !dbg !9473
  %tobool = icmp eq i8* %only_ranges, null, !dbg !9474
  br i1 %tobool, label %if.end, label %if.then, !dbg !9476

if.then:                                          ; preds = %entry
  store i8 1, i8* %only_ranges, align 1, !dbg !9477
  br label %if.end, !dbg !9478

if.end:                                           ; preds = %entry, %if.then
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !9479
  %0 = bitcast %union.tree_node** %type to i64**, !dbg !9479
  %1 = load i64*, i64** %0, align 8, !dbg !9479
  %bf.load = load i64, i64* %1, align 8, !dbg !9479
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !9479
  %cmp = icmp eq i64 %bf.cast1, 6, !dbg !9479
  br i1 %cmp, label %if.end32, label %lor.lhs.false, !dbg !9479

lor.lhs.false:                                    ; preds = %if.end
  %cmp7 = icmp eq i64 %bf.cast1, 7, !dbg !9479
  br i1 %cmp7, label %if.end32, label %lor.lhs.false8, !dbg !9479

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %cmp15 = icmp eq i64 %bf.cast1, 8, !dbg !9479
  br i1 %cmp15, label %if.end32, label %land.lhs.true, !dbg !9481

land.lhs.true:                                    ; preds = %lor.lhs.false8
  %cmp22 = icmp eq i64 %bf.cast1, 10, !dbg !9482
  br i1 %cmp22, label %if.end32, label %lor.lhs.false23, !dbg !9482

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %cmp30 = icmp eq i64 %bf.cast1, 12, !dbg !9482
  br i1 %cmp30, label %if.end32, label %cleanup, !dbg !9483

if.end32:                                         ; preds = %lor.lhs.false23, %land.lhs.true, %lor.lhs.false8, %lor.lhs.false, %if.end
  %tobool33 = icmp eq i8 %use_equiv_p, 0, !dbg !9484
  br i1 %tobool33, label %if.else72, label %if.then34, !dbg !9486

if.then34:                                        ; preds = %if.end32
  br i1 %tobool, label %if.end39, label %land.lhs.true36, !dbg !9487

land.lhs.true36:                                  ; preds = %if.then34
  %call = tail call fastcc %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8* %strict_overflow_p) #7, !dbg !9490
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !9472, metadata !DIExpression()), !dbg !9473
  %tobool37 = icmp eq %union.tree_node* %call, null, !dbg !9491
  br i1 %tobool37, label %if.end39, label %cleanup, !dbg !9492

if.end39:                                         ; preds = %land.lhs.true36, %if.then34
  store i8 0, i8* %only_ranges, align 1, !dbg !9493
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9494
  %bf.load41 = load i64, i64* %2, align 8, !dbg !9494
  %bf.cast436 = and i64 %bf.load41, 65535, !dbg !9496
  %cmp44 = icmp eq i64 %bf.cast436, 141, !dbg !9496
  br i1 %cmp44, label %land.lhs.true45, label %if.else, !dbg !9497

land.lhs.true45:                                  ; preds = %if.end39
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9498
  %bf.load47 = load i64, i64* %3, align 8, !dbg !9498
  %bf.cast499 = and i64 %bf.load47, 65535, !dbg !9499
  %cmp50 = icmp eq i64 %bf.cast499, 141, !dbg !9499
  br i1 %cmp50, label %if.then51, label %if.else, !dbg !9500

if.then51:                                        ; preds = %land.lhs.true45
  %call52 = tail call fastcc %union.tree_node* @compare_names(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8* %strict_overflow_p) #7, !dbg !9501
  br label %cleanup, !dbg !9502

if.else:                                          ; preds = %land.lhs.true45, %if.end39
  br i1 %cmp44, label %if.then58, label %if.else60, !dbg !9503

if.then58:                                        ; preds = %if.else
  %call59 = tail call fastcc %union.tree_node* @compare_name_with_value(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8* %strict_overflow_p) #7, !dbg !9504
  br label %cleanup, !dbg !9506

if.else60:                                        ; preds = %if.else
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9507
  %bf.load62 = load i64, i64* %4, align 8, !dbg !9507
  %bf.cast648 = and i64 %bf.load62, 65535, !dbg !9509
  %cmp65 = icmp eq i64 %bf.cast648, 141, !dbg !9509
  br i1 %cmp65, label %if.then66, label %cleanup, !dbg !9510

if.then66:                                        ; preds = %if.else60
  %call67 = tail call i32 @swap_tree_comparison(i32 %code) #6, !dbg !9511
  %call68 = tail call fastcc %union.tree_node* @compare_name_with_value(i32 %call67, %union.tree_node* %op1, %union.tree_node* %op0, i8* %strict_overflow_p) #7, !dbg !9512
  br label %cleanup, !dbg !9513

if.else72:                                        ; preds = %if.end32
  %call73 = tail call fastcc %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8* %strict_overflow_p) #7, !dbg !9514
  br label %cleanup, !dbg !9515

cleanup:                                          ; preds = %land.lhs.true36, %if.else60, %lor.lhs.false23, %if.else72, %if.then66, %if.then58, %if.then51
  %retval.0 = phi %union.tree_node* [ %call52, %if.then51 ], [ %call59, %if.then58 ], [ %call68, %if.then66 ], [ %call73, %if.else72 ], [ null, %lor.lhs.false23 ], [ %call, %land.lhs.true36 ], [ null, %if.else60 ], !dbg !9473
  ret %union.tree_node* %retval.0, !dbg !9516
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops_using_ranges(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8* %strict_overflow_p) unnamed_addr #5 !dbg !9517 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !9519, metadata !DIExpression()), !dbg !9525
  call void @llvm.dbg.value(metadata %union.tree_node* %op0, metadata !9520, metadata !DIExpression()), !dbg !9525
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !9521, metadata !DIExpression()), !dbg !9525
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !9522, metadata !DIExpression()), !dbg !9525
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9526
  %bf.load = load i64, i64* %0, align 8, !dbg !9526
  %bf.cast3 = and i64 %bf.load, 65535, !dbg !9527
  %cmp = icmp eq i64 %bf.cast3, 141, !dbg !9527
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !9528

cond.true:                                        ; preds = %entry
  %call = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %op0) #7, !dbg !9529
  br label %cond.end, !dbg !9528

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.value_range_d* [ %call, %cond.true ], [ null, %entry ], !dbg !9528
  call void @llvm.dbg.value(metadata %struct.value_range_d* %cond, metadata !9523, metadata !DIExpression()), !dbg !9525
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9530
  %bf.load2 = load i64, i64* %1, align 8, !dbg !9530
  %bf.cast44 = and i64 %bf.load2, 65535, !dbg !9531
  %cmp5 = icmp eq i64 %bf.cast44, 141, !dbg !9531
  br i1 %cmp5, label %cond.true6, label %cond.end9, !dbg !9532

cond.true6:                                       ; preds = %cond.end
  %call7 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %op1) #7, !dbg !9533
  br label %cond.end9, !dbg !9532

cond.end9:                                        ; preds = %cond.end, %cond.true6
  %cond10 = phi %struct.value_range_d* [ %call7, %cond.true6 ], [ null, %cond.end ], !dbg !9532
  call void @llvm.dbg.value(metadata %struct.value_range_d* %cond10, metadata !9524, metadata !DIExpression()), !dbg !9525
  %tobool = icmp ne %struct.value_range_d* %cond, null, !dbg !9534
  %tobool11 = icmp ne %struct.value_range_d* %cond10, null, !dbg !9536
  %or.cond = and i1 %tobool, %tobool11, !dbg !9537
  br i1 %or.cond, label %if.then, label %if.else, !dbg !9537

if.then:                                          ; preds = %cond.end9
  %call12 = tail call fastcc %union.tree_node* @compare_ranges(i32 %code, %struct.value_range_d* nonnull %cond, %struct.value_range_d* nonnull %cond10, i8* %strict_overflow_p) #7, !dbg !9538
  br label %cleanup, !dbg !9539

if.else:                                          ; preds = %cond.end9
  %cmp15 = icmp eq %struct.value_range_d* %cond10, null, !dbg !9540
  %or.cond1 = and i1 %tobool, %cmp15, !dbg !9542
  br i1 %or.cond1, label %if.then16, label %if.else18, !dbg !9542

if.then16:                                        ; preds = %if.else
  %call17 = tail call fastcc %union.tree_node* @compare_range_with_value(i32 %code, %struct.value_range_d* nonnull %cond, %union.tree_node* %op1, i8* %strict_overflow_p) #7, !dbg !9543
  br label %cleanup, !dbg !9544

if.else18:                                        ; preds = %if.else
  %cmp19 = icmp eq %struct.value_range_d* %cond, null, !dbg !9545
  %or.cond2 = and i1 %cmp19, %tobool11, !dbg !9547
  br i1 %or.cond2, label %if.then22, label %cleanup, !dbg !9547

if.then22:                                        ; preds = %if.else18
  %call23 = tail call i32 @swap_tree_comparison(i32 %code) #6, !dbg !9548
  %call24 = tail call fastcc %union.tree_node* @compare_range_with_value(i32 %call23, %struct.value_range_d* nonnull %cond10, %union.tree_node* %op0, i8* %strict_overflow_p) #7, !dbg !9549
  br label %cleanup, !dbg !9550

cleanup:                                          ; preds = %if.else18, %if.then22, %if.then16, %if.then
  %retval.0 = phi %union.tree_node* [ %call12, %if.then ], [ %call17, %if.then16 ], [ %call24, %if.then22 ], [ null, %if.else18 ], !dbg !9525
  ret %union.tree_node* %retval.0, !dbg !9551
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @compare_names(i32 %comp, %union.tree_node* %n1, %union.tree_node* %n2, i8* %strict_overflow_p) unnamed_addr #5 !dbg !2177 {
entry:
  %bi1 = alloca %struct.bitmap_iterator, align 8
  %bi2 = alloca %struct.bitmap_iterator, align 8
  %i1 = alloca i32, align 4
  %i2 = alloca i32, align 4
  %vr1 = alloca %struct.value_range_d, align 8
  %sop = alloca i8, align 1
  %vr2 = alloca %struct.value_range_d, align 8
  call void @llvm.dbg.value(metadata i32 %comp, metadata !2181, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %union.tree_node* %n1, metadata !2182, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %union.tree_node* %n2, metadata !2183, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !2184, metadata !DIExpression()), !dbg !9552
  %0 = bitcast %struct.bitmap_iterator* %bi1 to i8*, !dbg !9553
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #8, !dbg !9553
  %1 = bitcast %struct.bitmap_iterator* %bi2 to i8*, !dbg !9553
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #8, !dbg !9553
  %2 = bitcast i32* %i1 to i8*, !dbg !9554
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #8, !dbg !9554
  %3 = bitcast i32* %i2 to i8*, !dbg !9554
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #8, !dbg !9554
  %call = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %n1) #7, !dbg !9555
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i64 0, i32 3, !dbg !9556
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !9556
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %4, metadata !2187, metadata !DIExpression()), !dbg !9552
  %call2 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %n2) #7, !dbg !9557
  %equiv3 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call2, i64 0, i32 3, !dbg !9558
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv3, align 8, !dbg !9558
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %5, metadata !2188, metadata !DIExpression()), !dbg !9552
  %6 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** @compare_names.s_obstack, align 8, !dbg !9559
  %cmp = icmp eq %struct.bitmap_obstack* %6, null, !dbg !9561
  br i1 %cmp, label %if.then, label %entry.if.end_crit_edge, !dbg !9562

entry.if.end_crit_edge:                           ; preds = %entry
  %.pre = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @compare_names.s_e2, align 8, !dbg !9563
  br label %if.end, !dbg !9562

if.then:                                          ; preds = %entry
  %call4 = tail call i8* @xmalloc(i64 104) #6, !dbg !9564
  store i8* %call4, i8** bitcast (%struct.bitmap_obstack** @compare_names.s_obstack to i8**), align 8, !dbg !9566
  %.cast = bitcast i8* %call4 to %struct.bitmap_obstack*, !dbg !9567
  tail call void @bitmap_obstack_initialize(%struct.bitmap_obstack* %.cast) #6, !dbg !9568
  %7 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** @compare_names.s_obstack, align 8, !dbg !9569
  %call5 = tail call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* %7) #6, !dbg !9569
  store %struct.bitmap_head_def* %call5, %struct.bitmap_head_def** @compare_names.s_e1, align 8, !dbg !9570
  %8 = load %struct.bitmap_obstack*, %struct.bitmap_obstack** @compare_names.s_obstack, align 8, !dbg !9571
  %call6 = tail call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* %8) #6, !dbg !9571
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** @compare_names.s_e2, align 8, !dbg !9572
  br label %if.end, !dbg !9573

if.end:                                           ; preds = %entry.if.end_crit_edge, %if.then
  %9 = phi %struct.bitmap_head_def* [ %.pre, %entry.if.end_crit_edge ], [ %call6, %if.then ], !dbg !9563
  %cmp7 = icmp eq %struct.bitmap_head_def* %4, null, !dbg !9574
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @compare_names.s_e1, align 8, !dbg !9576
  %spec.select = select i1 %cmp7, %struct.bitmap_head_def* %10, %struct.bitmap_head_def* %4, !dbg !9577
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %spec.select, metadata !2187, metadata !DIExpression()), !dbg !9552
  %cmp10 = icmp eq %struct.bitmap_head_def* %5, null, !dbg !9578
  %e2.0 = select i1 %cmp10, %struct.bitmap_head_def* %9, %struct.bitmap_head_def* %5, !dbg !9563
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %e2.0, metadata !2188, metadata !DIExpression()), !dbg !9552
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %n1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !9580
  %11 = bitcast %union.tree_node** %version to i32*, !dbg !9580
  %12 = load i32, i32* %11, align 8, !dbg !9580
  %call13 = tail call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %spec.select, i32 %12) #6, !dbg !9581
  %version15 = getelementptr inbounds %union.tree_node, %union.tree_node* %n2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !9582
  %13 = bitcast %union.tree_node** %version15 to i32*, !dbg !9582
  %14 = load i32, i32* %13, align 8, !dbg !9582
  %call16 = tail call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %e2.0, i32 %14) #6, !dbg !9583
  %call17 = tail call zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def* %spec.select, %struct.bitmap_head_def* %e2.0) #6, !dbg !9584
  %tobool = icmp eq i8 %call17, 0, !dbg !9584
  br i1 %tobool, label %if.end29, label %if.then18, !dbg !9586

if.then18:                                        ; preds = %if.end
  %15 = load i32, i32* %11, align 8, !dbg !9587
  %call21 = tail call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %spec.select, i32 %15) #6, !dbg !9589
  %16 = load i32, i32* %13, align 8, !dbg !9590
  %call24 = tail call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %e2.0, i32 %16) #6, !dbg !9591
  switch i32 %comp, label %cond.false [
    i32 101, label %cond.true
    i32 100, label %cond.true
    i32 98, label %cond.true
  ], !dbg !9592

cond.true:                                        ; preds = %if.then18, %if.then18, %if.then18
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !9593
  br label %cleanup80, !dbg !9594

cond.false:                                       ; preds = %if.then18
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !9595
  br label %cleanup80, !dbg !9594

if.end29:                                         ; preds = %if.end
  call void @llvm.dbg.value(metadata i32 -1, metadata !2200, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi1, metadata !2189, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call void @llvm.dbg.value(metadata i32* %i1, metadata !2198, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call fastcc void @bmp_iter_set_init(%struct.bitmap_iterator* nonnull %bi1, %struct.bitmap_head_def* %spec.select, i32 0, i32* nonnull %i1) #7, !dbg !9596
  %19 = bitcast %struct.value_range_d* %vr1 to i8*, !dbg !9597
  %20 = bitcast %struct.value_range_d* %vr2 to i8*, !dbg !9598
  br label %for.cond, !dbg !9596

for.cond:                                         ; preds = %for.inc72, %if.end29
  %used_strict_overflow.0 = phi i32 [ -1, %if.end29 ], [ %used_strict_overflow.6, %for.inc72 ], !dbg !9599
  %retval.0 = phi %union.tree_node* [ undef, %if.end29 ], [ %retval.3, %for.inc72 ]
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.0, metadata !2200, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi1, metadata !2189, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call void @llvm.dbg.value(metadata i32* %i1, metadata !2198, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  %call30 = call fastcc zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* nonnull %bi1, i32* nonnull %i1) #7, !dbg !9600
  %tobool31 = icmp eq i8 %call30, 0, !dbg !9596
  br i1 %tobool31, label %for.end73, label %for.body, !dbg !9596

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %19) #8, !dbg !9601
  %21 = load i32, i32* %i1, align 4, !dbg !9602
  call void @llvm.dbg.value(metadata i32 %21, metadata !2198, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !2201, metadata !DIExpression(DW_OP_deref)), !dbg !9597
  call fastcc void @get_vr_for_comparison(%struct.value_range_d* nonnull sret %vr1, i32 %21) #7, !dbg !9603
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !2186, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !2185, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi2, metadata !2197, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call void @llvm.dbg.value(metadata i32* %i2, metadata !2199, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call fastcc void @bmp_iter_set_init(%struct.bitmap_iterator* nonnull %bi2, %struct.bitmap_head_def* %e2.0, i32 0, i32* nonnull %i2) #7, !dbg !9604
  br label %for.cond32, !dbg !9604

for.cond32:                                       ; preds = %for.inc, %for.body
  %retval1.0 = phi %union.tree_node* [ null, %for.body ], [ %retval1.2, %for.inc ], !dbg !9605
  %used_strict_overflow.1 = phi i32 [ %used_strict_overflow.0, %for.body ], [ %used_strict_overflow.5, %for.inc ], !dbg !9599
  %retval.1 = phi %union.tree_node* [ %retval.0, %for.body ], [ %retval.2, %for.inc ]
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1, metadata !2200, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %union.tree_node* %retval1.0, metadata !2186, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi2, metadata !2197, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call void @llvm.dbg.value(metadata i32* %i2, metadata !2199, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  %call33 = call fastcc zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* nonnull %bi2, i32* nonnull %i2) #7, !dbg !9606
  %tobool34 = icmp eq i8 %call33, 0, !dbg !9604
  br i1 %tobool34, label %for.end, label %for.body35, !dbg !9604

for.body35:                                       ; preds = %for.cond32
  call void @llvm.dbg.value(metadata i8* %sop, metadata !2205, metadata !DIExpression(DW_OP_deref)), !dbg !9598
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !9607
  call void @llvm.dbg.value(metadata i8 0, metadata !2205, metadata !DIExpression()), !dbg !9598
  store i8 0, i8* %sop, align 1, !dbg !9608
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #8, !dbg !9609
  %22 = load i32, i32* %i2, align 4, !dbg !9610
  call void @llvm.dbg.value(metadata i32 %22, metadata !2199, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr2, metadata !2209, metadata !DIExpression(DW_OP_deref)), !dbg !9598
  call fastcc void @get_vr_for_comparison(%struct.value_range_d* nonnull sret %vr2, i32 %22) #7, !dbg !9611
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !2201, metadata !DIExpression(DW_OP_deref)), !dbg !9597
  call void @llvm.dbg.value(metadata i8* %sop, metadata !2205, metadata !DIExpression(DW_OP_deref)), !dbg !9598
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr2, metadata !2209, metadata !DIExpression(DW_OP_deref)), !dbg !9598
  %call36 = call fastcc %union.tree_node* @compare_ranges(i32 %comp, %struct.value_range_d* nonnull %vr1, %struct.value_range_d* nonnull %vr2, i8* nonnull %sop) #7, !dbg !9612
  call void @llvm.dbg.value(metadata %union.tree_node* %call36, metadata !2185, metadata !DIExpression()), !dbg !9552
  %tobool37 = icmp eq %union.tree_node* %call36, null, !dbg !9613
  br i1 %tobool37, label %cleanup, label %if.then38, !dbg !9615

if.then38:                                        ; preds = %for.body35
  %cmp39 = icmp ne %union.tree_node* %retval1.0, null, !dbg !9616
  %cmp40 = icmp ne %union.tree_node* %call36, %retval1.0, !dbg !9619
  %or.cond = and i1 %cmp39, %cmp40, !dbg !9620
  br i1 %or.cond, label %if.then41, label %if.end48, !dbg !9620

if.then41:                                        ; preds = %if.then38
  %23 = load i32, i32* %11, align 8, !dbg !9621
  %call44 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %spec.select, i32 %23) #6, !dbg !9623
  %24 = load i32, i32* %13, align 8, !dbg !9624
  %call47 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %e2.0, i32 %24) #6, !dbg !9625
  br label %cleanup, !dbg !9626

if.end48:                                         ; preds = %if.then38
  call void @llvm.dbg.value(metadata %union.tree_node* %call36, metadata !2186, metadata !DIExpression()), !dbg !9552
  %25 = load i8, i8* %sop, align 1, !dbg !9627
  call void @llvm.dbg.value(metadata i8 %25, metadata !2205, metadata !DIExpression()), !dbg !9598
  %tobool49 = icmp eq i8 %25, 0, !dbg !9627
  %cmp51 = icmp slt i32 %used_strict_overflow.1, 0, !dbg !9629
  %spec.select3 = select i1 %cmp51, i32 1, i32 %used_strict_overflow.1, !dbg !9629
  %used_strict_overflow.3 = select i1 %tobool49, i32 0, i32 %spec.select3, !dbg !9629
  br label %cleanup, !dbg !9629

cleanup:                                          ; preds = %for.body35, %if.end48, %if.then41
  %retval1.2 = phi %union.tree_node* [ %retval1.0, %if.then41 ], [ %retval1.0, %for.body35 ], [ %call36, %if.end48 ], !dbg !9597
  %used_strict_overflow.5 = phi i32 [ %used_strict_overflow.1, %if.then41 ], [ %used_strict_overflow.1, %for.body35 ], [ %used_strict_overflow.3, %if.end48 ], !dbg !9552
  %cleanup.dest.slot.0 = phi i32 [ 1, %if.then41 ], [ 0, %for.body35 ], [ 0, %if.end48 ]
  %retval.2 = phi %union.tree_node* [ null, %if.then41 ], [ %retval.1, %for.body35 ], [ %retval.1, %if.end48 ]
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.5, metadata !2200, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %union.tree_node* %retval1.2, metadata !2186, metadata !DIExpression()), !dbg !9552
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #8, !dbg !9630
  call void @llvm.dbg.value(metadata i8* %sop, metadata !2205, metadata !DIExpression(DW_OP_deref)), !dbg !9598
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !9630
  %cond2 = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %cond2, label %for.inc, label %cleanup69.loopexit

for.inc:                                          ; preds = %cleanup
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi2, metadata !2197, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call void @llvm.dbg.value(metadata i32* %i2, metadata !2199, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call fastcc void @bmp_iter_next(%struct.bitmap_iterator* nonnull %bi2, i32* nonnull %i2) #7, !dbg !9606
  br label %for.cond32, !dbg !9606, !llvm.loop !9631

for.end:                                          ; preds = %for.cond32
  %retval1.0.lcssa = phi %union.tree_node* [ %retval1.0, %for.cond32 ], !dbg !9605
  %used_strict_overflow.1.lcssa = phi i32 [ %used_strict_overflow.1, %for.cond32 ], !dbg !9599
  %retval.1.lcssa = phi %union.tree_node* [ %retval.1, %for.cond32 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %retval1.0.lcssa, metadata !2186, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1.lcssa, metadata !2200, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %union.tree_node* %retval1.0.lcssa, metadata !2186, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1.lcssa, metadata !2200, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata %union.tree_node* %retval1.0.lcssa, metadata !2186, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1.lcssa, metadata !2200, metadata !DIExpression()), !dbg !9552
  %tobool57 = icmp eq %union.tree_node* %retval1.0.lcssa, null, !dbg !9633
  br i1 %tobool57, label %cleanup69, label %if.then58, !dbg !9635

if.then58:                                        ; preds = %for.end
  %26 = load i32, i32* %11, align 8, !dbg !9636
  %call61 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %spec.select, i32 %26) #6, !dbg !9638
  %27 = load i32, i32* %13, align 8, !dbg !9639
  %call64 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %e2.0, i32 %27) #6, !dbg !9640
  %cmp65 = icmp sgt i32 %used_strict_overflow.1.lcssa, 0, !dbg !9641
  br i1 %cmp65, label %if.then66, label %cleanup69, !dbg !9643

if.then66:                                        ; preds = %if.then58
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !9644
  br label %cleanup69, !dbg !9645

cleanup69.loopexit:                               ; preds = %cleanup
  %used_strict_overflow.5.lcssa = phi i32 [ %used_strict_overflow.5, %cleanup ], !dbg !9552
  %cleanup.dest.slot.0.lcssa = phi i32 [ %cleanup.dest.slot.0, %cleanup ]
  %retval.2.lcssa = phi %union.tree_node* [ %retval.2, %cleanup ]
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.5.lcssa, metadata !2200, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.5.lcssa, metadata !2200, metadata !DIExpression()), !dbg !9552
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.5.lcssa, metadata !2200, metadata !DIExpression()), !dbg !9552
  br label %cleanup69, !dbg !9646

cleanup69:                                        ; preds = %cleanup69.loopexit, %for.end, %if.then58, %if.then66
  %used_strict_overflow.6 = phi i32 [ %used_strict_overflow.1.lcssa, %if.then66 ], [ %used_strict_overflow.1.lcssa, %if.then58 ], [ %used_strict_overflow.1.lcssa, %for.end ], [ %used_strict_overflow.5.lcssa, %cleanup69.loopexit ], !dbg !9599
  %cleanup.dest.slot.1 = phi i32 [ 1, %if.then66 ], [ 1, %if.then58 ], [ 0, %for.end ], [ %cleanup.dest.slot.0.lcssa, %cleanup69.loopexit ]
  %retval.3 = phi %union.tree_node* [ %retval1.0.lcssa, %if.then66 ], [ %retval1.0.lcssa, %if.then58 ], [ %retval.1.lcssa, %for.end ], [ %retval.2.lcssa, %cleanup69.loopexit ]
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.6, metadata !2200, metadata !DIExpression()), !dbg !9552
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %19) #8, !dbg !9646
  %cond1 = icmp eq i32 %cleanup.dest.slot.1, 0
  br i1 %cond1, label %for.inc72, label %cleanup80.loopexit

for.inc72:                                        ; preds = %cleanup69
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi1, metadata !2189, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call void @llvm.dbg.value(metadata i32* %i1, metadata !2198, metadata !DIExpression(DW_OP_deref)), !dbg !9552
  call fastcc void @bmp_iter_next(%struct.bitmap_iterator* nonnull %bi1, i32* nonnull %i1) #7, !dbg !9600
  br label %for.cond, !dbg !9600, !llvm.loop !9647

for.end73:                                        ; preds = %for.cond
  %28 = load i32, i32* %11, align 8, !dbg !9649
  %call76 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %spec.select, i32 %28) #6, !dbg !9650
  %29 = load i32, i32* %13, align 8, !dbg !9651
  %call79 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %e2.0, i32 %29) #6, !dbg !9652
  br label %cleanup80, !dbg !9653

cleanup80.loopexit:                               ; preds = %cleanup69
  %retval.3.lcssa = phi %union.tree_node* [ %retval.3, %cleanup69 ]
  br label %cleanup80, !dbg !9654

cleanup80:                                        ; preds = %cleanup80.loopexit, %cond.true, %cond.false, %for.end73
  %retval.4 = phi %union.tree_node* [ null, %for.end73 ], [ %17, %cond.true ], [ %18, %cond.false ], [ %retval.3.lcssa, %cleanup80.loopexit ], !dbg !9552
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #8, !dbg !9654
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #8, !dbg !9654
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #8, !dbg !9654
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #8, !dbg !9654
  ret %union.tree_node* %retval.4, !dbg !9654
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @compare_name_with_value(i32 %comp, %union.tree_node* %var, %union.tree_node* %val, i8* %strict_overflow_p) unnamed_addr #5 !dbg !9655 {
entry:
  %bi = alloca %struct.bitmap_iterator, align 8
  %i = alloca i32, align 4
  %sop = alloca i8, align 1
  %equiv_vr = alloca %struct.value_range_d, align 8
  %tmp = alloca %struct.value_range_d, align 8
  %tmp14 = alloca %struct.value_range_d, align 8
  call void @llvm.dbg.value(metadata i32 %comp, metadata !9657, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !9658, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !9659, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !9660, metadata !DIExpression()), !dbg !9669
  %0 = bitcast %struct.bitmap_iterator* %bi to i8*, !dbg !9670
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #8, !dbg !9670
  %1 = bitcast i32* %i to i8*, !dbg !9671
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #8, !dbg !9671
  call void @llvm.dbg.value(metadata i8* %sop, metadata !9667, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !9672
  %2 = bitcast %struct.value_range_d* %equiv_vr to i8*, !dbg !9673
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %2) #8, !dbg !9673
  %call = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %var) #7, !dbg !9674
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call, i64 0, i32 3, !dbg !9675
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !9675
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %3, metadata !9663, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata i32 -1, metadata !9666, metadata !DIExpression()), !dbg !9669
  %4 = bitcast %struct.value_range_d* %tmp to i8*, !dbg !9676
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %4) #8, !dbg !9676
  %version = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !9677
  %5 = bitcast %union.tree_node** %version to i32*, !dbg !9677
  %6 = load i32, i32* %5, align 8, !dbg !9677
  call fastcc void @get_vr_for_comparison(%struct.value_range_d* nonnull sret %tmp, i32 %6) #7, !dbg !9676
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %4, i64 32, i1 false), !dbg !9676
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %4) #8, !dbg !9676
  call void @llvm.dbg.value(metadata i8 0, metadata !9667, metadata !DIExpression()), !dbg !9669
  store i8 0, i8* %sop, align 1, !dbg !9678
  call void @llvm.dbg.value(metadata i8* %sop, metadata !9667, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  call void @llvm.dbg.value(metadata %struct.value_range_d* %equiv_vr, metadata !9668, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  %call2 = call fastcc %union.tree_node* @compare_range_with_value(i32 %comp, %struct.value_range_d* nonnull %equiv_vr, %union.tree_node* %val, i8* nonnull %sop) #7, !dbg !9679
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !9664, metadata !DIExpression()), !dbg !9669
  %tobool = icmp eq %union.tree_node* %call2, null, !dbg !9680
  br i1 %tobool, label %if.end, label %if.then, !dbg !9682

if.then:                                          ; preds = %entry
  %7 = load i8, i8* %sop, align 1, !dbg !9683
  call void @llvm.dbg.value(metadata i8 %7, metadata !9667, metadata !DIExpression()), !dbg !9669
  %tobool3 = icmp ne i8 %7, 0, !dbg !9683
  %cond = zext i1 %tobool3 to i32, !dbg !9683
  call void @llvm.dbg.value(metadata i32 %cond, metadata !9666, metadata !DIExpression()), !dbg !9669
  br label %if.end, !dbg !9684

if.end:                                           ; preds = %entry, %if.then
  %used_strict_overflow.0 = phi i32 [ %cond, %if.then ], [ -1, %entry ], !dbg !9669
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.0, metadata !9666, metadata !DIExpression()), !dbg !9669
  %cmp = icmp eq %struct.bitmap_head_def* %3, null, !dbg !9685
  br i1 %cmp, label %if.then5, label %if.end11, !dbg !9687

if.then5:                                         ; preds = %if.end
  %tobool6 = icmp ne %union.tree_node* %call2, null, !dbg !9688
  %cmp7 = icmp sgt i32 %used_strict_overflow.0, 0, !dbg !9691
  %or.cond = and i1 %tobool6, %cmp7, !dbg !9692
  br i1 %or.cond, label %if.then9, label %cleanup, !dbg !9692

if.then9:                                         ; preds = %if.then5
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !9693
  br label %cleanup, !dbg !9694

if.end11:                                         ; preds = %if.end
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !9661, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  call void @llvm.dbg.value(metadata i32* %i, metadata !9662, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  call fastcc void @bmp_iter_set_init(%struct.bitmap_iterator* nonnull %bi, %struct.bitmap_head_def* nonnull %3, i32 0, i32* nonnull %i) #7, !dbg !9695
  %8 = bitcast %struct.value_range_d* %tmp14 to i8*, !dbg !9697
  br label %for.cond, !dbg !9695

for.cond:                                         ; preds = %for.inc, %if.end11
  %retval1.0 = phi %union.tree_node* [ %call2, %if.end11 ], [ %retval1.1, %for.inc ], !dbg !9669
  %used_strict_overflow.1 = phi i32 [ %used_strict_overflow.0, %if.end11 ], [ %used_strict_overflow.4, %for.inc ], !dbg !9669
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1, metadata !9666, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata %union.tree_node* %retval1.0, metadata !9664, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !9661, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  call void @llvm.dbg.value(metadata i32* %i, metadata !9662, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  %call12 = call fastcc zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* nonnull %bi, i32* nonnull %i) #7, !dbg !9700
  %tobool13 = icmp eq i8 %call12, 0, !dbg !9695
  br i1 %tobool13, label %for.end, label %for.body, !dbg !9695

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #8, !dbg !9701
  %9 = load i32, i32* %i, align 4, !dbg !9702
  call void @llvm.dbg.value(metadata i32 %9, metadata !9662, metadata !DIExpression()), !dbg !9669
  call fastcc void @get_vr_for_comparison(%struct.value_range_d* nonnull sret %tmp14, i32 %9) #7, !dbg !9701
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %8, i64 32, i1 false), !dbg !9701
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #8, !dbg !9701
  call void @llvm.dbg.value(metadata i8 0, metadata !9667, metadata !DIExpression()), !dbg !9669
  store i8 0, i8* %sop, align 1, !dbg !9703
  call void @llvm.dbg.value(metadata i8* %sop, metadata !9667, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  call void @llvm.dbg.value(metadata %struct.value_range_d* %equiv_vr, metadata !9668, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  %call15 = call fastcc %union.tree_node* @compare_range_with_value(i32 %comp, %struct.value_range_d* nonnull %equiv_vr, %union.tree_node* %val, i8* nonnull %sop) #7, !dbg !9704
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !9665, metadata !DIExpression()), !dbg !9669
  %tobool16 = icmp eq %union.tree_node* %call15, null, !dbg !9705
  br i1 %tobool16, label %for.inc, label %if.then17, !dbg !9707

if.then17:                                        ; preds = %for.body
  %cmp18 = icmp ne %union.tree_node* %retval1.0, null, !dbg !9708
  %cmp21 = icmp ne %union.tree_node* %call15, %retval1.0, !dbg !9711
  %or.cond1 = and i1 %cmp18, %cmp21, !dbg !9712
  br i1 %or.cond1, label %for.end, label %if.end24, !dbg !9712

if.end24:                                         ; preds = %if.then17
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !9664, metadata !DIExpression()), !dbg !9669
  %10 = load i8, i8* %sop, align 1, !dbg !9713
  call void @llvm.dbg.value(metadata i8 %10, metadata !9667, metadata !DIExpression()), !dbg !9669
  %tobool25 = icmp eq i8 %10, 0, !dbg !9713
  %cmp27 = icmp slt i32 %used_strict_overflow.1, 0, !dbg !9715
  %spec.select = select i1 %cmp27, i32 1, i32 %used_strict_overflow.1, !dbg !9715
  %used_strict_overflow.3 = select i1 %tobool25, i32 0, i32 %spec.select, !dbg !9715
  br label %for.inc, !dbg !9715

for.inc:                                          ; preds = %for.body, %if.end24
  %retval1.1 = phi %union.tree_node* [ %retval1.0, %for.body ], [ %call15, %if.end24 ], !dbg !9669
  %used_strict_overflow.4 = phi i32 [ %used_strict_overflow.1, %for.body ], [ %used_strict_overflow.3, %if.end24 ], !dbg !9669
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.4, metadata !9666, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata %union.tree_node* %retval1.1, metadata !9664, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata %struct.bitmap_iterator* %bi, metadata !9661, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  call void @llvm.dbg.value(metadata i32* %i, metadata !9662, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  call fastcc void @bmp_iter_next(%struct.bitmap_iterator* nonnull %bi, i32* nonnull %i) #7, !dbg !9700
  br label %for.cond, !dbg !9700, !llvm.loop !9716

for.end:                                          ; preds = %for.cond, %if.then17
  %used_strict_overflow.1.lcssa = phi i32 [ %used_strict_overflow.1, %for.cond ], [ %used_strict_overflow.1, %if.then17 ], !dbg !9669
  %retval1.2 = phi %union.tree_node* [ %retval1.0, %for.cond ], [ null, %if.then17 ], !dbg !9669
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1.lcssa, metadata !9666, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1.lcssa, metadata !9666, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1.lcssa, metadata !9666, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1.lcssa, metadata !9666, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1.lcssa, metadata !9666, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata i32 %used_strict_overflow.1.lcssa, metadata !9666, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.value(metadata %union.tree_node* %retval1.2, metadata !9664, metadata !DIExpression()), !dbg !9669
  %tobool33 = icmp ne %union.tree_node* %retval1.2, null, !dbg !9718
  %cmp35 = icmp sgt i32 %used_strict_overflow.1.lcssa, 0, !dbg !9720
  %or.cond2 = and i1 %tobool33, %cmp35, !dbg !9721
  br i1 %or.cond2, label %if.then37, label %cleanup, !dbg !9721

if.then37:                                        ; preds = %for.end
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !9722
  br label %cleanup, !dbg !9723

cleanup:                                          ; preds = %for.end, %if.then37, %if.then5, %if.then9
  %retval.0 = phi %union.tree_node* [ %call2, %if.then9 ], [ %call2, %if.then5 ], [ %retval1.2, %if.then37 ], [ %retval1.2, %for.end ], !dbg !9669
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %2) #8, !dbg !9724
  call void @llvm.dbg.value(metadata i8* %sop, metadata !9667, metadata !DIExpression(DW_OP_deref)), !dbg !9669
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !9724
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #8, !dbg !9724
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #8, !dbg !9724
  ret %union.tree_node* %retval.0, !dbg !9724
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @compare_ranges(i32 %comp, %struct.value_range_d* %vr0, %struct.value_range_d* %vr1, i8* %strict_overflow_p) unnamed_addr #5 !dbg !9725 {
entry:
  call void @llvm.dbg.value(metadata i32 %comp, metadata !9729, metadata !DIExpression()), !dbg !9754
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !9730, metadata !DIExpression()), !dbg !9754
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !9731, metadata !DIExpression()), !dbg !9754
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !9732, metadata !DIExpression()), !dbg !9754
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0, i64 0, i32 0, !dbg !9755
  %0 = load i32, i32* %type, align 8, !dbg !9755
  %cmp = icmp eq i32 %0, 3, !dbg !9757
  br i1 %cmp, label %return, label %lor.lhs.false, !dbg !9758

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp eq i32 %0, 0, !dbg !9759
  br i1 %cmp2, label %return, label %lor.lhs.false3, !dbg !9760

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %type4 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1, i64 0, i32 0, !dbg !9761
  %1 = load i32, i32* %type4, align 8, !dbg !9761
  %cmp5 = icmp eq i32 %1, 3, !dbg !9762
  br i1 %cmp5, label %return, label %lor.lhs.false6, !dbg !9763

lor.lhs.false6:                                   ; preds = %lor.lhs.false3
  %cmp8 = icmp eq i32 %1, 0, !dbg !9764
  br i1 %cmp8, label %return, label %if.end, !dbg !9765

if.end:                                           ; preds = %lor.lhs.false6
  %cmp10 = icmp eq i32 %0, 2, !dbg !9766
  br i1 %cmp10, label %if.then14, label %lor.lhs.false11, !dbg !9767

lor.lhs.false11:                                  ; preds = %if.end
  %cmp13 = icmp eq i32 %1, 2, !dbg !9768
  br i1 %cmp13, label %if.then14, label %if.end50, !dbg !9769

if.then14:                                        ; preds = %lor.lhs.false11, %if.end
  br i1 %cmp10, label %land.lhs.true, label %if.end20, !dbg !9770

land.lhs.true:                                    ; preds = %if.then14
  %cmp18 = icmp eq i32 %1, 2, !dbg !9772
  br i1 %cmp18, label %return, label %if.end20, !dbg !9773

if.end20:                                         ; preds = %land.lhs.true, %if.then14
  %comp.off = add i32 %comp, -97, !dbg !9774
  %switch7 = icmp ult i32 %comp.off, 4, !dbg !9774
  br i1 %switch7, label %return, label %if.end29, !dbg !9774

if.end29:                                         ; preds = %if.end20
  %cmp31 = icmp eq i32 %0, 1, !dbg !9776
  %spec.select = select i1 %cmp31, %struct.value_range_d* %vr0, %struct.value_range_d* %vr1, !dbg !9777
  %spec.select1 = select i1 %cmp31, %struct.value_range_d* %vr1, %struct.value_range_d* %vr0, !dbg !9777
  call void @llvm.dbg.value(metadata %struct.value_range_d* %spec.select1, metadata !9730, metadata !DIExpression()), !dbg !9754
  call void @llvm.dbg.value(metadata %struct.value_range_d* %spec.select, metadata !9731, metadata !DIExpression()), !dbg !9754
  %comp.off8 = add i32 %comp, -101, !dbg !9778
  %switch9 = icmp ult i32 %comp.off8, 2, !dbg !9778
  br i1 %switch9, label %cond.end, label %cond.true, !dbg !9778

cond.true:                                        ; preds = %if.end29
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3379, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !9778
  br label %cond.end, !dbg !9778

cond.end:                                         ; preds = %if.end29, %cond.true
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %spec.select1, i64 0, i32 1, !dbg !9779
  %2 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9779
  %min37 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %spec.select, i64 0, i32 1, !dbg !9781
  %3 = load %union.tree_node*, %union.tree_node** %min37, align 8, !dbg !9781
  %call = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %2, %union.tree_node* %3, i8* %strict_overflow_p) #7, !dbg !9782
  %cmp38 = icmp eq i32 %call, 0, !dbg !9783
  br i1 %cmp38, label %land.lhs.true39, label %return, !dbg !9784

land.lhs.true39:                                  ; preds = %cond.end
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %spec.select1, i64 0, i32 2, !dbg !9785
  %4 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9785
  %max40 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %spec.select, i64 0, i32 2, !dbg !9786
  %5 = load %union.tree_node*, %union.tree_node** %max40, align 8, !dbg !9786
  %call41 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %4, %union.tree_node* %5, i8* %strict_overflow_p) #7, !dbg !9787
  %cmp42 = icmp eq i32 %call41, 0, !dbg !9788
  br i1 %cmp42, label %if.then43, label %return, !dbg !9789

if.then43:                                        ; preds = %land.lhs.true39
  %cmp44 = icmp eq i32 %comp, 102, !dbg !9790
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !9791
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !9791
  %cond48 = select i1 %cmp44, %union.tree_node* %6, %union.tree_node* %7, !dbg !9791
  br label %return, !dbg !9791

if.end50:                                         ; preds = %lor.lhs.false11
  %call51 = tail call fastcc zeroext i8 @usable_range_p(%struct.value_range_d* %vr0, i8* %strict_overflow_p) #7, !dbg !9792
  %tobool = icmp eq i8 %call51, 0, !dbg !9792
  br i1 %tobool, label %return, label %lor.lhs.false52, !dbg !9794

lor.lhs.false52:                                  ; preds = %if.end50
  %call53 = tail call fastcc zeroext i8 @usable_range_p(%struct.value_range_d* %vr1, i8* %strict_overflow_p) #7, !dbg !9795
  %tobool54 = icmp eq i8 %call53, 0, !dbg !9795
  br i1 %tobool54, label %return, label %if.end56, !dbg !9796

if.end56:                                         ; preds = %lor.lhs.false52
  %comp.off10 = add i32 %comp, -99, !dbg !9797
  %switch11 = icmp ult i32 %comp.off10, 2, !dbg !9797
  br i1 %switch11, label %if.then60, label %if.end64, !dbg !9797

if.then60:                                        ; preds = %if.end56
  %cmp62 = icmp eq i32 %comp, 99, !dbg !9798
  %cond63 = select i1 %cmp62, i32 97, i32 98, !dbg !9799
  call void @llvm.dbg.value(metadata i32 %cond63, metadata !9729, metadata !DIExpression()), !dbg !9754
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !9738, metadata !DIExpression()), !dbg !9800
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1, metadata !9730, metadata !DIExpression()), !dbg !9754
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0, metadata !9731, metadata !DIExpression()), !dbg !9754
  br label %if.end64, !dbg !9801

if.end64:                                         ; preds = %if.end56, %if.then60
  %vr1.addr.1 = phi %struct.value_range_d* [ %vr0, %if.then60 ], [ %vr1, %if.end56 ]
  %vr0.addr.1 = phi %struct.value_range_d* [ %vr1, %if.then60 ], [ %vr0, %if.end56 ]
  %comp.addr.0 = phi i32 [ %cond63, %if.then60 ], [ %comp, %if.end56 ]
  call void @llvm.dbg.value(metadata i32 %comp.addr.0, metadata !9729, metadata !DIExpression()), !dbg !9754
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr0.addr.1, metadata !9730, metadata !DIExpression()), !dbg !9754
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr1.addr.1, metadata !9731, metadata !DIExpression()), !dbg !9754
  switch i32 %comp.addr.0, label %if.end207 [
    i32 101, label %if.then66
    i32 102, label %if.then109
    i32 97, label %if.then153
    i32 98, label %if.then153
  ], !dbg !9802

if.then66:                                        ; preds = %if.end64
  %min67 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0.addr.1, i64 0, i32 1, !dbg !9803
  %8 = load %union.tree_node*, %union.tree_node** %min67, align 8, !dbg !9803
  %max68 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0.addr.1, i64 0, i32 2, !dbg !9804
  %9 = load %union.tree_node*, %union.tree_node** %max68, align 8, !dbg !9804
  %call69 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %8, %union.tree_node* %9, i8* %strict_overflow_p) #7, !dbg !9805
  %cmp70 = icmp eq i32 %call69, 0, !dbg !9806
  br i1 %cmp70, label %land.lhs.true71, label %if.else94, !dbg !9807

land.lhs.true71:                                  ; preds = %if.then66
  %min72 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.addr.1, i64 0, i32 1, !dbg !9808
  %10 = load %union.tree_node*, %union.tree_node** %min72, align 8, !dbg !9808
  %max73 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.addr.1, i64 0, i32 2, !dbg !9809
  %11 = load %union.tree_node*, %union.tree_node** %max73, align 8, !dbg !9809
  %call74 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %10, %union.tree_node* %11, i8* %strict_overflow_p) #7, !dbg !9810
  %cmp75 = icmp eq i32 %call74, 0, !dbg !9811
  br i1 %cmp75, label %if.then76, label %if.else94, !dbg !9812

if.then76:                                        ; preds = %land.lhs.true71
  %12 = load %union.tree_node*, %union.tree_node** %min67, align 8, !dbg !9813
  %13 = load %union.tree_node*, %union.tree_node** %min72, align 8, !dbg !9814
  %call79 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %12, %union.tree_node* %13, i8* %strict_overflow_p) #7, !dbg !9815
  call void @llvm.dbg.value(metadata i32 %call79, metadata !9741, metadata !DIExpression()), !dbg !9816
  %14 = load %union.tree_node*, %union.tree_node** %max68, align 8, !dbg !9817
  %15 = load %union.tree_node*, %union.tree_node** %max73, align 8, !dbg !9818
  %call82 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %14, %union.tree_node* %15, i8* %strict_overflow_p) #7, !dbg !9819
  call void @llvm.dbg.value(metadata i32 %call82, metadata !9746, metadata !DIExpression()), !dbg !9816
  %16 = or i32 %call79, %call82, !dbg !9820
  %17 = icmp eq i32 %16, 0, !dbg !9820
  br i1 %17, label %if.then86, label %if.else, !dbg !9820

if.then86:                                        ; preds = %if.then76
  br label %cleanup, !dbg !9822

if.else:                                          ; preds = %if.then76
  %cmp87 = icmp eq i32 %call79, -2, !dbg !9823
  %cmp89 = icmp eq i32 %call82, -2, !dbg !9825
  %phitmp = or i1 %cmp89, %cmp87, !dbg !9826
  br label %cleanup, !dbg !9826

cleanup:                                          ; preds = %if.else, %if.then86
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then86 ], [ %phitmp, %if.else ]
  %retval.0.in = phi %union.tree_node** [ getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), %if.then86 ], [ getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), %if.else ]
  %retval.0 = load %union.tree_node*, %union.tree_node** %retval.0.in, align 8, !dbg !9827
  br i1 %cleanup.dest.slot.0, label %if.end106, label %return

if.else94:                                        ; preds = %land.lhs.true71, %if.then66
  %18 = load %union.tree_node*, %union.tree_node** %min67, align 8, !dbg !9828
  %max96 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.addr.1, i64 0, i32 2, !dbg !9830
  %19 = load %union.tree_node*, %union.tree_node** %max96, align 8, !dbg !9830
  %call97 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %18, %union.tree_node* %19, i8* %strict_overflow_p) #7, !dbg !9831
  %cmp98 = icmp eq i32 %call97, 1, !dbg !9832
  br i1 %cmp98, label %if.then104, label %lor.lhs.false99, !dbg !9833

lor.lhs.false99:                                  ; preds = %if.else94
  %min100 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.addr.1, i64 0, i32 1, !dbg !9834
  %20 = load %union.tree_node*, %union.tree_node** %min100, align 8, !dbg !9834
  %21 = load %union.tree_node*, %union.tree_node** %max68, align 8, !dbg !9835
  %call102 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %20, %union.tree_node* %21, i8* %strict_overflow_p) #7, !dbg !9836
  %cmp103 = icmp eq i32 %call102, 1, !dbg !9837
  br i1 %cmp103, label %if.then104, label %if.end106, !dbg !9838

if.then104:                                       ; preds = %lor.lhs.false99, %if.else94
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !9839
  br label %return, !dbg !9840

if.end106:                                        ; preds = %lor.lhs.false99, %cleanup
  br label %return, !dbg !9841

if.then109:                                       ; preds = %if.end64
  %max111 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0.addr.1, i64 0, i32 2, !dbg !9842
  %23 = load %union.tree_node*, %union.tree_node** %max111, align 8, !dbg !9842
  %min112 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.addr.1, i64 0, i32 1, !dbg !9843
  %24 = load %union.tree_node*, %union.tree_node** %min112, align 8, !dbg !9843
  %call113 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %23, %union.tree_node* %24, i8* %strict_overflow_p) #7, !dbg !9844
  call void @llvm.dbg.value(metadata i32 %call113, metadata !9747, metadata !DIExpression()), !dbg !9845
  %min114 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0.addr.1, i64 0, i32 1, !dbg !9846
  %25 = load %union.tree_node*, %union.tree_node** %min114, align 8, !dbg !9846
  %max115 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.addr.1, i64 0, i32 2, !dbg !9847
  %26 = load %union.tree_node*, %union.tree_node** %max115, align 8, !dbg !9847
  %call116 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %25, %union.tree_node* %26, i8* %strict_overflow_p) #7, !dbg !9848
  call void @llvm.dbg.value(metadata i32 %call116, metadata !9750, metadata !DIExpression()), !dbg !9845
  %27 = and i32 %call113, %call116, !dbg !9849
  %28 = icmp eq i32 %27, -1, !dbg !9849
  br i1 %28, label %if.then124, label %lor.lhs.false120, !dbg !9849

lor.lhs.false120:                                 ; preds = %if.then109
  %cmp121 = icmp eq i32 %call113, 1, !dbg !9851
  %cmp123 = icmp eq i32 %call116, 1, !dbg !9852
  %or.cond4 = and i1 %cmp121, %cmp123, !dbg !9853
  br i1 %or.cond4, label %if.then124, label %if.else125, !dbg !9853

if.then124:                                       ; preds = %lor.lhs.false120, %if.then109
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !9854
  br label %return, !dbg !9855

if.else125:                                       ; preds = %lor.lhs.false120
  %30 = load %union.tree_node*, %union.tree_node** %min114, align 8, !dbg !9856
  %31 = load %union.tree_node*, %union.tree_node** %max111, align 8, !dbg !9858
  %call128 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %30, %union.tree_node* %31, i8* %strict_overflow_p) #7, !dbg !9859
  %cmp129 = icmp eq i32 %call128, 0, !dbg !9860
  br i1 %cmp129, label %land.lhs.true130, label %return, !dbg !9861

land.lhs.true130:                                 ; preds = %if.else125
  %32 = load %union.tree_node*, %union.tree_node** %min112, align 8, !dbg !9862
  %33 = load %union.tree_node*, %union.tree_node** %max115, align 8, !dbg !9863
  %call133 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %32, %union.tree_node* %33, i8* %strict_overflow_p) #7, !dbg !9864
  %cmp134 = icmp eq i32 %call133, 0, !dbg !9865
  br i1 %cmp134, label %land.lhs.true135, label %return, !dbg !9866

land.lhs.true135:                                 ; preds = %land.lhs.true130
  %34 = load %union.tree_node*, %union.tree_node** %min114, align 8, !dbg !9867
  %35 = load %union.tree_node*, %union.tree_node** %min112, align 8, !dbg !9868
  %call138 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %34, %union.tree_node* %35, i8* %strict_overflow_p) #7, !dbg !9869
  %cmp139 = icmp eq i32 %call138, 0, !dbg !9870
  br i1 %cmp139, label %land.lhs.true140, label %return, !dbg !9871

land.lhs.true140:                                 ; preds = %land.lhs.true135
  %36 = load %union.tree_node*, %union.tree_node** %max111, align 8, !dbg !9872
  %37 = load %union.tree_node*, %union.tree_node** %max115, align 8, !dbg !9873
  %call143 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %36, %union.tree_node* %37, i8* %strict_overflow_p) #7, !dbg !9874
  %cmp144 = icmp eq i32 %call143, 0, !dbg !9875
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !9876
  %spec.select14 = select i1 %cmp144, %union.tree_node* %38, %union.tree_node* null, !dbg !9877
  ret %union.tree_node* %spec.select14, !dbg !9877

if.then153:                                       ; preds = %if.end64, %if.end64
  %max154 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0.addr.1, i64 0, i32 2, !dbg !9878
  %39 = load %union.tree_node*, %union.tree_node** %max154, align 8, !dbg !9878
  %min155 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.addr.1, i64 0, i32 1, !dbg !9879
  %40 = load %union.tree_node*, %union.tree_node** %min155, align 8, !dbg !9879
  %call156 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %39, %union.tree_node* %40, i8* %strict_overflow_p) #7, !dbg !9880
  call void @llvm.dbg.value(metadata i32 %call156, metadata !9751, metadata !DIExpression()), !dbg !9881
  %cmp157 = icmp eq i32 %comp.addr.0, 97, !dbg !9882
  %cmp159 = icmp eq i32 %call156, -1, !dbg !9884
  %or.cond5 = and i1 %cmp157, %cmp159, !dbg !9885
  br i1 %or.cond5, label %if.then166, label %lor.lhs.false160, !dbg !9885

lor.lhs.false160:                                 ; preds = %if.then153
  %cmp161 = icmp eq i32 %comp.addr.0, 98, !dbg !9886
  br i1 %cmp161, label %land.lhs.true162, label %if.end175, !dbg !9887

land.lhs.true162:                                 ; preds = %lor.lhs.false160
  switch i32 %call156, label %if.end175 [
    i32 -1, label %if.then166
    i32 0, label %if.then166
  ], !dbg !9888

if.then166:                                       ; preds = %land.lhs.true162, %land.lhs.true162, %if.then153
  %call167 = tail call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr0.addr.1) #7, !dbg !9889
  %tobool168 = icmp eq i8 %call167, 0, !dbg !9889
  br i1 %tobool168, label %lor.lhs.false169, label %if.then173, !dbg !9892

lor.lhs.false169:                                 ; preds = %if.then166
  %call170 = tail call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr1.addr.1) #7, !dbg !9893
  %tobool172 = icmp eq i8 %call170, 0, !dbg !9893
  br i1 %tobool172, label %if.end174, label %if.then173, !dbg !9894

if.then173:                                       ; preds = %lor.lhs.false169, %if.then166
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !9895
  br label %if.end174, !dbg !9896

if.end174:                                        ; preds = %lor.lhs.false169, %if.then173
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !9897
  br label %return, !dbg !9898

if.end175:                                        ; preds = %land.lhs.true162, %lor.lhs.false160
  %min176 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr0.addr.1, i64 0, i32 1, !dbg !9899
  %42 = load %union.tree_node*, %union.tree_node** %min176, align 8, !dbg !9899
  %max177 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr1.addr.1, i64 0, i32 2, !dbg !9900
  %43 = load %union.tree_node*, %union.tree_node** %max177, align 8, !dbg !9900
  %call178 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %42, %union.tree_node* %43, i8* %strict_overflow_p) #7, !dbg !9901
  call void @llvm.dbg.value(metadata i32 %call178, metadata !9751, metadata !DIExpression()), !dbg !9881
  switch i32 %comp.addr.0, label %return [
    i32 97, label %land.lhs.true181
    i32 98, label %land.lhs.true190
  ], !dbg !9902

land.lhs.true181:                                 ; preds = %if.end175
  %switch15 = icmp ult i32 %call178, 2, !dbg !9904
  br i1 %switch15, label %if.then193, label %lor.lhs.false187, !dbg !9904

lor.lhs.false187:                                 ; preds = %land.lhs.true181
  br label %return, !dbg !9905

land.lhs.true190:                                 ; preds = %if.end175
  %cmp191.old = icmp eq i32 %call178, 1, !dbg !9906
  br i1 %cmp191.old, label %if.then193, label %return, !dbg !9907

if.then193:                                       ; preds = %land.lhs.true181, %land.lhs.true190
  %call194 = tail call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr0.addr.1) #7, !dbg !9908
  %tobool196 = icmp eq i8 %call194, 0, !dbg !9908
  br i1 %tobool196, label %lor.lhs.false197, label %if.then201, !dbg !9911

lor.lhs.false197:                                 ; preds = %if.then193
  %call198 = tail call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr1.addr.1) #7, !dbg !9912
  %tobool200 = icmp eq i8 %call198, 0, !dbg !9912
  br i1 %tobool200, label %if.end202, label %if.then201, !dbg !9913

if.then201:                                       ; preds = %lor.lhs.false197, %if.then193
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !9914
  br label %if.end202, !dbg !9915

if.end202:                                        ; preds = %lor.lhs.false197, %if.then201
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !9916
  br label %return, !dbg !9917

if.end207:                                        ; preds = %if.end64
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3488, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !9918
  br label %return, !dbg !9919

return:                                           ; preds = %lor.lhs.false187, %lor.lhs.false52, %if.end50, %if.end20, %if.end174, %if.end202, %if.end175, %land.lhs.true190, %if.then124, %land.lhs.true135, %land.lhs.true130, %if.else125, %cleanup, %cond.end, %land.lhs.true39, %if.then43, %land.lhs.true, %entry, %lor.lhs.false, %lor.lhs.false3, %lor.lhs.false6, %if.end207, %if.end106, %if.then104
  %retval.3 = phi %union.tree_node* [ %retval.0, %cleanup ], [ null, %if.end106 ], [ %22, %if.then104 ], [ null, %if.end207 ], [ null, %lor.lhs.false6 ], [ null, %lor.lhs.false3 ], [ null, %lor.lhs.false ], [ null, %entry ], [ null, %land.lhs.true ], [ null, %if.end20 ], [ %cond48, %if.then43 ], [ null, %land.lhs.true39 ], [ null, %cond.end ], [ null, %lor.lhs.false52 ], [ null, %if.end50 ], [ %29, %if.then124 ], [ null, %land.lhs.true135 ], [ null, %land.lhs.true130 ], [ null, %if.else125 ], [ %41, %if.end174 ], [ %44, %if.end202 ], [ null, %if.end175 ], [ null, %land.lhs.true190 ], [ null, %lor.lhs.false187 ], !dbg !9754
  ret %union.tree_node* %retval.3, !dbg !9920
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @compare_range_with_value(i32 %comp, %struct.value_range_d* %vr, %union.tree_node* %val, i8* %strict_overflow_p) unnamed_addr #5 !dbg !9921 {
entry:
  call void @llvm.dbg.value(metadata i32 %comp, metadata !9925, metadata !DIExpression()), !dbg !9941
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !9926, metadata !DIExpression()), !dbg !9941
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !9927, metadata !DIExpression()), !dbg !9941
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !9928, metadata !DIExpression()), !dbg !9941
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !9942
  %0 = load i32, i32* %type, align 8, !dbg !9942
  %cmp = icmp eq i32 %0, 3, !dbg !9944
  br i1 %cmp, label %return, label %lor.lhs.false, !dbg !9945

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp eq i32 %0, 0, !dbg !9946
  br i1 %cmp2, label %return, label %if.end, !dbg !9947

if.end:                                           ; preds = %lor.lhs.false
  %cmp4 = icmp eq i32 %0, 2, !dbg !9948
  br i1 %cmp4, label %if.then5, label %if.end19, !dbg !9950

if.then5:                                         ; preds = %if.end
  %comp.off = add i32 %comp, -97, !dbg !9951
  %switch4 = icmp ult i32 %comp.off, 4, !dbg !9951
  br i1 %switch4, label %return, label %if.end14, !dbg !9951

if.end14:                                         ; preds = %if.then5
  %call = tail call fastcc i32 @value_inside_range(%union.tree_node* %val, %struct.value_range_d* %vr) #7, !dbg !9954
  %cmp15 = icmp eq i32 %call, 1, !dbg !9956
  br i1 %cmp15, label %if.then16, label %return, !dbg !9957

if.then16:                                        ; preds = %if.end14
  %cmp17 = icmp eq i32 %comp, 102, !dbg !9958
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !9959
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !9959
  %cond = select i1 %cmp17, %union.tree_node* %1, %union.tree_node* %2, !dbg !9959
  br label %return, !dbg !9959

if.end19:                                         ; preds = %if.end
  %call20 = tail call fastcc zeroext i8 @usable_range_p(%struct.value_range_d* %vr, i8* %strict_overflow_p) #7, !dbg !9960
  %tobool = icmp eq i8 %call20, 0, !dbg !9960
  br i1 %tobool, label %return, label %if.end22, !dbg !9962

if.end22:                                         ; preds = %if.end19
  switch i32 %comp, label %if.end157 [
    i32 101, label %if.then24
    i32 102, label %if.then54
    i32 97, label %if.then77
    i32 98, label %if.then77
    i32 99, label %if.then117
    i32 100, label %if.then117
  ], !dbg !9963

if.then24:                                        ; preds = %if.end22
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !9964
  %3 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9964
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !9965
  %4 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9965
  %call25 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %3, %union.tree_node* %4, i8* %strict_overflow_p) #7, !dbg !9966
  %cmp26 = icmp eq i32 %call25, 0, !dbg !9967
  %5 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !9968
  br i1 %cmp26, label %if.then27, label %if.else41, !dbg !9969

if.then27:                                        ; preds = %if.then24
  %call30 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %5, %union.tree_node* %val, i8* %strict_overflow_p) #7, !dbg !9970
  call void @llvm.dbg.value(metadata i32 %call30, metadata !9929, metadata !DIExpression()), !dbg !9971
  switch i32 %call30, label %cleanup [
    i32 0, label %if.then32
    i32 -1, label %if.then38
    i32 1, label %if.then38
    i32 2, label %if.then38
  ], !dbg !9972

if.then32:                                        ; preds = %if.then27
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !9973
  br label %cleanup, !dbg !9975

if.then38:                                        ; preds = %if.then27, %if.then27, %if.then27
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !9976
  br label %cleanup, !dbg !9978

cleanup:                                          ; preds = %if.then27, %if.then38, %if.then32
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then32 ], [ false, %if.then38 ], [ true, %if.then27 ]
  %retval.0 = phi %union.tree_node* [ %6, %if.then32 ], [ %7, %if.then38 ], [ undef, %if.then27 ]
  br i1 %cleanup.dest.slot.0, label %if.end51, label %return

if.else41:                                        ; preds = %if.then24
  %call43 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %val, %union.tree_node* %5, i8* %strict_overflow_p) #7, !dbg !9979
  %cmp44 = icmp eq i32 %call43, -1, !dbg !9981
  br i1 %cmp44, label %if.then49, label %lor.lhs.false45, !dbg !9982

lor.lhs.false45:                                  ; preds = %if.else41
  %8 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !9983
  %call47 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %8, %union.tree_node* %val, i8* %strict_overflow_p) #7, !dbg !9984
  %cmp48 = icmp eq i32 %call47, -1, !dbg !9985
  br i1 %cmp48, label %if.then49, label %if.end51, !dbg !9986

if.then49:                                        ; preds = %lor.lhs.false45, %if.else41
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !9987
  br label %return, !dbg !9988

if.end51:                                         ; preds = %lor.lhs.false45, %cleanup
  br label %return, !dbg !9989

if.then54:                                        ; preds = %if.end22
  %max55 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !9990
  %10 = load %union.tree_node*, %union.tree_node** %max55, align 8, !dbg !9990
  %call56 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %10, %union.tree_node* %val, i8* %strict_overflow_p) #7, !dbg !9993
  %cmp57 = icmp eq i32 %call56, -1, !dbg !9994
  br i1 %cmp57, label %if.then62, label %lor.lhs.false58, !dbg !9995

lor.lhs.false58:                                  ; preds = %if.then54
  %min59 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !9996
  %11 = load %union.tree_node*, %union.tree_node** %min59, align 8, !dbg !9996
  %call60 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %11, %union.tree_node* %val, i8* %strict_overflow_p) #7, !dbg !9997
  %cmp61 = icmp eq i32 %call60, 1, !dbg !9998
  br i1 %cmp61, label %if.then62, label %if.end63, !dbg !9999

if.then62:                                        ; preds = %lor.lhs.false58, %if.then54
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !10000
  br label %return, !dbg !10001

if.end63:                                         ; preds = %lor.lhs.false58
  %13 = load %union.tree_node*, %union.tree_node** %min59, align 8, !dbg !10002
  %14 = load %union.tree_node*, %union.tree_node** %max55, align 8, !dbg !10004
  %call66 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %13, %union.tree_node* %14, i8* %strict_overflow_p) #7, !dbg !10005
  %cmp67 = icmp eq i32 %call66, 0, !dbg !10006
  br i1 %cmp67, label %land.lhs.true, label %return, !dbg !10007

land.lhs.true:                                    ; preds = %if.end63
  %15 = load %union.tree_node*, %union.tree_node** %min59, align 8, !dbg !10008
  %call69 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %15, %union.tree_node* %val, i8* %strict_overflow_p) #7, !dbg !10009
  %cmp70 = icmp eq i32 %call69, 0, !dbg !10010
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !10011
  %spec.select = select i1 %cmp70, %union.tree_node* %16, %union.tree_node* null, !dbg !10012
  ret %union.tree_node* %spec.select, !dbg !10012

if.then77:                                        ; preds = %if.end22, %if.end22
  %max78 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !10013
  %17 = load %union.tree_node*, %union.tree_node** %max78, align 8, !dbg !10013
  %call79 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %17, %union.tree_node* %val, i8* %strict_overflow_p) #7, !dbg !10014
  call void @llvm.dbg.value(metadata i32 %call79, metadata !9934, metadata !DIExpression()), !dbg !10015
  %cmp80 = icmp eq i32 %comp, 97, !dbg !10016
  %cmp82 = icmp eq i32 %call79, -1, !dbg !10018
  %or.cond = and i1 %cmp80, %cmp82, !dbg !10019
  br i1 %or.cond, label %if.then89, label %lor.lhs.false83, !dbg !10019

lor.lhs.false83:                                  ; preds = %if.then77
  %cmp84 = icmp eq i32 %comp, 98, !dbg !10020
  br i1 %cmp84, label %land.lhs.true85, label %if.end94, !dbg !10021

land.lhs.true85:                                  ; preds = %lor.lhs.false83
  switch i32 %call79, label %if.end94 [
    i32 -1, label %if.then89
    i32 0, label %if.then89
  ], !dbg !10022

if.then89:                                        ; preds = %land.lhs.true85, %land.lhs.true85, %if.then77
  %call90 = tail call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr) #7, !dbg !10023
  %tobool91 = icmp eq i8 %call90, 0, !dbg !10023
  br i1 %tobool91, label %if.end93, label %if.then92, !dbg !10026

if.then92:                                        ; preds = %if.then89
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !10027
  br label %if.end93, !dbg !10028

if.end93:                                         ; preds = %if.then89, %if.then92
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !10029
  br label %return, !dbg !10030

if.end94:                                         ; preds = %land.lhs.true85, %lor.lhs.false83
  %min95 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !10031
  %19 = load %union.tree_node*, %union.tree_node** %min95, align 8, !dbg !10031
  %call96 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %19, %union.tree_node* %val, i8* %strict_overflow_p) #7, !dbg !10032
  call void @llvm.dbg.value(metadata i32 %call96, metadata !9934, metadata !DIExpression()), !dbg !10015
  switch i32 %comp, label %return [
    i32 97, label %land.lhs.true98
    i32 98, label %land.lhs.true104
  ], !dbg !10033

land.lhs.true98:                                  ; preds = %if.end94
  %switch5 = icmp ult i32 %call96, 2, !dbg !10035
  br i1 %switch5, label %if.then106, label %lor.lhs.false102, !dbg !10035

lor.lhs.false102:                                 ; preds = %land.lhs.true98
  br label %return, !dbg !10036

land.lhs.true104:                                 ; preds = %if.end94
  %cmp105.old = icmp eq i32 %call96, 1, !dbg !10037
  br i1 %cmp105.old, label %if.then106, label %return, !dbg !10038

if.then106:                                       ; preds = %land.lhs.true98, %land.lhs.true104
  %call107 = tail call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr) #7, !dbg !10039
  %tobool108 = icmp eq i8 %call107, 0, !dbg !10039
  br i1 %tobool108, label %if.end110, label %if.then109, !dbg !10042

if.then109:                                       ; preds = %if.then106
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !10043
  br label %if.end110, !dbg !10044

if.end110:                                        ; preds = %if.then106, %if.then109
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !10045
  br label %return, !dbg !10046

if.then117:                                       ; preds = %if.end22, %if.end22
  %min119 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !10047
  %21 = load %union.tree_node*, %union.tree_node** %min119, align 8, !dbg !10047
  %call120 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %21, %union.tree_node* %val, i8* %strict_overflow_p) #7, !dbg !10048
  call void @llvm.dbg.value(metadata i32 %call120, metadata !9938, metadata !DIExpression()), !dbg !10049
  %cmp121 = icmp eq i32 %comp, 99, !dbg !10050
  %cmp123 = icmp eq i32 %call120, 1, !dbg !10052
  %or.cond2 = and i1 %cmp121, %cmp123, !dbg !10053
  br i1 %or.cond2, label %if.then130, label %lor.lhs.false124, !dbg !10053

lor.lhs.false124:                                 ; preds = %if.then117
  %cmp125 = icmp eq i32 %comp, 100, !dbg !10054
  %switch6 = icmp ult i32 %call120, 2, !dbg !10055
  %or.cond7 = and i1 %cmp125, %switch6, !dbg !10056
  br i1 %or.cond7, label %if.then130, label %if.end135, !dbg !10056

if.then130:                                       ; preds = %lor.lhs.false124, %if.then117
  %call131 = tail call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr) #7, !dbg !10057
  %tobool132 = icmp eq i8 %call131, 0, !dbg !10057
  br i1 %tobool132, label %if.end134, label %if.then133, !dbg !10060

if.then133:                                       ; preds = %if.then130
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !10061
  br label %if.end134, !dbg !10062

if.end134:                                        ; preds = %if.then130, %if.then133
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !10063
  br label %return, !dbg !10064

if.end135:                                        ; preds = %lor.lhs.false124
  %max136 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !10065
  %23 = load %union.tree_node*, %union.tree_node** %max136, align 8, !dbg !10065
  %call137 = tail call fastcc i32 @compare_values_warnv(%union.tree_node* %23, %union.tree_node* %val, i8* %strict_overflow_p) #7, !dbg !10066
  call void @llvm.dbg.value(metadata i32 %call137, metadata !9938, metadata !DIExpression()), !dbg !10049
  switch i32 %comp, label %return [
    i32 99, label %land.lhs.true139
    i32 100, label %land.lhs.true145
  ], !dbg !10067

land.lhs.true139:                                 ; preds = %if.end135
  switch i32 %call137, label %lor.lhs.false143 [
    i32 -1, label %if.then147
    i32 0, label %if.then147
  ], !dbg !10069

lor.lhs.false143:                                 ; preds = %land.lhs.true139
  br i1 false, label %lor.lhs.false143.if.then147_crit_edge, label %return, !dbg !10070

lor.lhs.false143.if.then147_crit_edge:            ; preds = %lor.lhs.false143
  br label %if.then147, !dbg !10070

land.lhs.true145:                                 ; preds = %if.end135
  %cmp146.old = icmp eq i32 %call137, -1, !dbg !10071
  br i1 %cmp146.old, label %if.then147, label %return, !dbg !10072

if.then147:                                       ; preds = %lor.lhs.false143.if.then147_crit_edge, %land.lhs.true139, %land.lhs.true139, %land.lhs.true145
  %call148 = tail call fastcc zeroext i8 @overflow_infinity_range_p(%struct.value_range_d* %vr) #7, !dbg !10073
  %tobool149 = icmp eq i8 %call148, 0, !dbg !10073
  br i1 %tobool149, label %if.end151, label %if.then150, !dbg !10076

if.then150:                                       ; preds = %if.then147
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !10077
  br label %if.end151, !dbg !10078

if.end151:                                        ; preds = %if.then147, %if.then150
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !10079
  br label %return, !dbg !10080

if.end157:                                        ; preds = %if.end22
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 3620, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !10081
  br label %return, !dbg !10082

return:                                           ; preds = %lor.lhs.false102, %if.end19, %if.then5, %if.end134, %if.end151, %if.end135, %land.lhs.true145, %lor.lhs.false143, %if.end93, %if.end110, %if.end94, %land.lhs.true104, %if.end63, %cleanup, %if.end14, %if.then16, %entry, %lor.lhs.false, %if.end157, %if.then62, %if.end51, %if.then49
  %retval.3 = phi %union.tree_node* [ %retval.0, %cleanup ], [ null, %if.end51 ], [ %9, %if.then49 ], [ %12, %if.then62 ], [ null, %if.end157 ], [ null, %lor.lhs.false ], [ null, %entry ], [ null, %if.then5 ], [ %cond, %if.then16 ], [ null, %if.end14 ], [ null, %if.end19 ], [ null, %if.end63 ], [ %18, %if.end93 ], [ %20, %if.end110 ], [ null, %if.end94 ], [ null, %land.lhs.true104 ], [ null, %lor.lhs.false102 ], [ %22, %if.end134 ], [ %24, %if.end151 ], [ null, %if.end135 ], [ null, %land.lhs.true145 ], [ null, %lor.lhs.false143 ], !dbg !9941
  ret %union.tree_node* %retval.3, !dbg !10083
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @usable_range_p(%struct.value_range_d* %vr, i8* %strict_overflow_p) unnamed_addr #5 !dbg !10084 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !10088, metadata !DIExpression()), !dbg !10090
  call void @llvm.dbg.value(metadata i8* %strict_overflow_p, metadata !10089, metadata !DIExpression()), !dbg !10090
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !10091
  %0 = load i32, i32* %type, align 8, !dbg !10091
  %cmp = icmp eq i32 %0, 1, !dbg !10091
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !10091

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 796, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !10091
  br label %cond.end, !dbg !10091

cond.end:                                         ; preds = %entry, %cond.true
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !10092
  %1 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10092
  %call = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %1) #7, !dbg !10094
  %tobool = icmp eq i8 %call, 0, !dbg !10094
  br i1 %tobool, label %if.end10, label %if.then, !dbg !10095

if.then:                                          ; preds = %cond.end
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !10096
  %2 = bitcast %union.tree_node** %min to %struct.tree_common**, !dbg !10098
  %3 = load %struct.tree_common*, %struct.tree_common** %2, align 8, !dbg !10098
  %type2 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3, i64 0, i32 2, !dbg !10098
  %4 = bitcast %union.tree_node** %type2 to i64**, !dbg !10098
  %5 = load i64*, i64** %4, align 8, !dbg !10098
  %bf.load = load i64, i64* %5, align 8, !dbg !10098
  %bf.cast7 = and i64 %bf.load, 2097152, !dbg !10098
  %tobool3 = icmp eq i64 %bf.cast7, 0, !dbg !10098
  %6 = load i32, i32* @flag_wrapv, align 4, !dbg !10098
  %7 = load i32, i32* @flag_trapv, align 4, !dbg !10098
  %8 = or i32 %6, %7, !dbg !10098
  %9 = icmp eq i32 %8, 0, !dbg !10098
  %or.cond1.not = and i1 %tobool3, %9, !dbg !10098
  %10 = load i32, i32* @flag_strict_overflow, align 4, !dbg !10098
  %tobool8 = icmp ne i32 %10, 0, !dbg !10098
  %or.cond2 = and i1 %or.cond1.not, %tobool8, !dbg !10098
  br i1 %or.cond2, label %if.end10, label %return, !dbg !10098

if.end10:                                         ; preds = %cond.end, %if.then
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !10100
  %11 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10100
  %call11 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %11) #7, !dbg !10102
  %tobool12 = icmp eq i8 %call11, 0, !dbg !10102
  br i1 %tobool12, label %if.end31, label %if.then13, !dbg !10103

if.then13:                                        ; preds = %if.end10
  store i8 1, i8* %strict_overflow_p, align 1, !dbg !10104
  %12 = bitcast %union.tree_node** %max to %struct.tree_common**, !dbg !10106
  %13 = load %struct.tree_common*, %struct.tree_common** %12, align 8, !dbg !10106
  %type16 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %13, i64 0, i32 2, !dbg !10106
  %14 = bitcast %union.tree_node** %type16 to i64**, !dbg !10106
  %15 = load i64*, i64** %14, align 8, !dbg !10106
  %bf.load18 = load i64, i64* %15, align 8, !dbg !10106
  %bf.cast216 = and i64 %bf.load18, 2097152, !dbg !10106
  %tobool22 = icmp eq i64 %bf.cast216, 0, !dbg !10106
  %16 = load i32, i32* @flag_wrapv, align 4, !dbg !10106
  %17 = load i32, i32* @flag_trapv, align 4, !dbg !10106
  %18 = or i32 %16, %17, !dbg !10106
  %19 = icmp eq i32 %18, 0, !dbg !10106
  %or.cond4.not = and i1 %tobool22, %19, !dbg !10106
  %20 = load i32, i32* @flag_strict_overflow, align 4, !dbg !10106
  %tobool28 = icmp ne i32 %20, 0, !dbg !10106
  %or.cond5 = and i1 %or.cond4.not, %tobool28, !dbg !10106
  br i1 %or.cond5, label %if.end31, label %return, !dbg !10106

if.end31:                                         ; preds = %if.end10, %if.then13
  br label %return, !dbg !10108

return:                                           ; preds = %if.then13, %if.then, %if.end31
  %retval.0 = phi i8 [ 1, %if.end31 ], [ 0, %if.then ], [ 0, %if.then13 ], !dbg !10090
  ret i8 %retval.0, !dbg !10109
}

declare dso_local void @bitmap_obstack_initialize(%struct.bitmap_obstack*) local_unnamed_addr #2

declare dso_local zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) local_unnamed_addr #2

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @get_vr_for_comparison(%struct.value_range_d* noalias sret %agg.result, i32 %i) unnamed_addr #0 !dbg !10110 {
entry:
  call void @llvm.dbg.value(metadata i32 %i, metadata !10114, metadata !DIExpression()), !dbg !10116
  call void @llvm.dbg.declare(metadata %struct.value_range_d* %agg.result, metadata !10115, metadata !DIExpression()), !dbg !10117
  %0 = load %struct.value_range_d**, %struct.value_range_d*** @vr_value, align 8, !dbg !10118
  %idxprom = sext i32 %i to i64, !dbg !10118
  %arrayidx = getelementptr inbounds %struct.value_range_d*, %struct.value_range_d** %0, i64 %idxprom, !dbg !10118
  %1 = bitcast %struct.value_range_d** %arrayidx to i8**, !dbg !10118
  %2 = load i8*, i8** %1, align 8, !dbg !10118
  %3 = bitcast %struct.value_range_d* %agg.result to i8*, !dbg !10119
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %2, i64 32, i1 false), !dbg !10119
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %agg.result, i64 0, i32 0, !dbg !10120
  %4 = load i32, i32* %type, align 8, !dbg !10120
  %cmp = icmp eq i32 %4, 3, !dbg !10122
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !10123

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp eq i32 %4, 0, !dbg !10124
  br i1 %cmp2, label %if.then, label %if.end, !dbg !10125

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %type, align 8, !dbg !10126
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10128
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, i32 3, !dbg !10128
  %6 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !10128
  %ssa_names = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %6, i64 0, i32 2, !dbg !10128
  %7 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names, align 8, !dbg !10128
  %tobool = icmp eq %struct.VEC_tree_gc* %7, null, !dbg !10128
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10128

cond.true:                                        ; preds = %if.then
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %7, i64 0, i32 0, !dbg !10128
  br label %cond.end, !dbg !10128

cond.end:                                         ; preds = %if.then, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %if.then ], !dbg !10128
  %call = tail call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond, i32 %i) #7, !dbg !10128
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %agg.result, i64 0, i32 1, !dbg !10129
  store %union.tree_node* %call, %union.tree_node** %min, align 8, !dbg !10130
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10131
  %gimple_df8 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, i32 3, !dbg !10131
  %9 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df8, align 8, !dbg !10131
  %ssa_names9 = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %9, i64 0, i32 2, !dbg !10131
  %10 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %ssa_names9, align 8, !dbg !10131
  %tobool10 = icmp eq %struct.VEC_tree_gc* %10, null, !dbg !10131
  br i1 %tobool10, label %cond.end17, label %cond.true11, !dbg !10131

cond.true11:                                      ; preds = %cond.end
  %base15 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %10, i64 0, i32 0, !dbg !10131
  br label %cond.end17, !dbg !10131

cond.end17:                                       ; preds = %cond.end, %cond.true11
  %cond18 = phi %struct.VEC_tree_base* [ %base15, %cond.true11 ], [ null, %cond.end ], !dbg !10131
  %call19 = tail call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %cond18, i32 %i) #7, !dbg !10131
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %agg.result, i64 0, i32 2, !dbg !10132
  store %union.tree_node* %call19, %union.tree_node** %max, align 8, !dbg !10133
  br label %if.end, !dbg !10134

if.end:                                           ; preds = %cond.end17, %lor.lhs.false
  ret void, !dbg !10135
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @vrp_operand_equal_p(%union.tree_node* %val1, %union.tree_node* %val2) unnamed_addr #0 !dbg !10136 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val1, metadata !10140, metadata !DIExpression()), !dbg !10142
  call void @llvm.dbg.value(metadata %union.tree_node* %val2, metadata !10141, metadata !DIExpression()), !dbg !10142
  %cmp = icmp eq %union.tree_node* %val1, %val2, !dbg !10143
  br i1 %cmp, label %return, label %if.end, !dbg !10145

if.end:                                           ; preds = %entry
  %tobool = icmp ne %union.tree_node* %val1, null, !dbg !10146
  %tobool1 = icmp ne %union.tree_node* %val2, null, !dbg !10148
  %or.cond = and i1 %tobool, %tobool1, !dbg !10149
  br i1 %or.cond, label %lor.lhs.false2, label %return, !dbg !10149

lor.lhs.false2:                                   ; preds = %if.end
  %call = tail call i32 @operand_equal_p(%union.tree_node* nonnull %val1, %union.tree_node* nonnull %val2, i32 0) #6, !dbg !10150
  %tobool3 = icmp eq i32 %call, 0, !dbg !10150
  br i1 %tobool3, label %return, label %if.end5, !dbg !10151

if.end5:                                          ; preds = %lor.lhs.false2
  %call6 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* nonnull %val1) #7, !dbg !10152
  %tobool7 = icmp eq i8 %call6, 0, !dbg !10152
  br i1 %tobool7, label %return, label %if.then8, !dbg !10154

if.then8:                                         ; preds = %if.end5
  %call9 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* nonnull %val2) #7, !dbg !10155
  br label %return, !dbg !10156

return:                                           ; preds = %if.end5, %lor.lhs.false2, %if.end, %entry, %if.then8
  %retval.0 = phi i8 [ %call9, %if.then8 ], [ 1, %entry ], [ 0, %lor.lhs.false2 ], [ 0, %if.end ], [ 1, %if.end5 ], !dbg !10142
  ret i8 %retval.0, !dbg !10157
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @vrp_bitmap_equal_p(%struct.bitmap_head_def* %b1, %struct.bitmap_head_def* %b2) unnamed_addr #0 !dbg !10158 {
entry:
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %b1, metadata !10162, metadata !DIExpression()), !dbg !10164
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %b2, metadata !10163, metadata !DIExpression()), !dbg !10164
  %cmp = icmp eq %struct.bitmap_head_def* %b1, %b2, !dbg !10165
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !10166

lor.rhs:                                          ; preds = %entry
  %tobool = icmp ne %struct.bitmap_head_def* %b1, null, !dbg !10167
  %tobool1 = icmp ne %struct.bitmap_head_def* %b2, null, !dbg !10168
  %or.cond = and i1 %tobool, %tobool1, !dbg !10169
  br i1 %or.cond, label %land.rhs, label %lor.end, !dbg !10169

land.rhs:                                         ; preds = %lor.rhs
  %call = tail call zeroext i8 @bitmap_equal_p(%struct.bitmap_head_def* nonnull %b1, %struct.bitmap_head_def* nonnull %b2) #6, !dbg !10170
  %tobool2 = icmp ne i8 %call, 0, !dbg !10171
  %phitmp = zext i1 %tobool2 to i8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs, %entry
  %0 = phi i8 [ 1, %entry ], [ 0, %lor.rhs ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !10172
}

declare dso_local zeroext i8 @bitmap_equal_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) local_unnamed_addr #2

declare dso_local %struct.edge_def* @find_taken_edge(%struct.basic_block_def*, %union.tree_node*) local_unnamed_addr #2

declare dso_local void @print_generic_stmt(%struct._IO_FILE*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @find_case_label_range(%union.gimple_statement_d* %stmt, %union.tree_node* %min, %union.tree_node* %max, i64* %min_idx, i64* %max_idx) unnamed_addr #5 !dbg !10173 {
entry:
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !10177, metadata !DIExpression()), !dbg !10192
  call void @llvm.dbg.value(metadata %union.tree_node* %min, metadata !10178, metadata !DIExpression()), !dbg !10192
  call void @llvm.dbg.value(metadata %union.tree_node* %max, metadata !10179, metadata !DIExpression()), !dbg !10192
  call void @llvm.dbg.value(metadata i64* %min_idx, metadata !10180, metadata !DIExpression()), !dbg !10192
  call void @llvm.dbg.value(metadata i64* %max_idx, metadata !10181, metadata !DIExpression()), !dbg !10192
  %0 = bitcast i64* %i to i8*, !dbg !10193
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !10193
  %1 = bitcast i64* %j to i8*, !dbg !10193
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !10193
  call void @llvm.dbg.value(metadata i64* %i, metadata !10182, metadata !DIExpression(DW_OP_deref)), !dbg !10192
  %call = call fastcc zeroext i8 @find_case_label_index(%union.gimple_statement_d* %stmt, i64 1, %union.tree_node* %min, i64* nonnull %i) #7, !dbg !10194
  call void @llvm.dbg.value(metadata i1 undef, metadata !10184, metadata !DIExpression()), !dbg !10192
  %2 = load i64, i64* %i, align 8, !dbg !10195
  call void @llvm.dbg.value(metadata i64 %2, metadata !10182, metadata !DIExpression()), !dbg !10192
  call void @llvm.dbg.value(metadata i64* %j, metadata !10183, metadata !DIExpression(DW_OP_deref)), !dbg !10192
  %call1 = call fastcc zeroext i8 @find_case_label_index(%union.gimple_statement_d* %stmt, i64 %2, %union.tree_node* %max, i64* nonnull %j) #7, !dbg !10196
  %tobool2 = icmp eq i8 %call1, 0, !dbg !10197
  call void @llvm.dbg.value(metadata i1 %tobool2, metadata !10185, metadata !DIExpression()), !dbg !10192
  %3 = load i64, i64* %i, align 8, !dbg !10198
  call void @llvm.dbg.value(metadata i64 %3, metadata !10182, metadata !DIExpression()), !dbg !10192
  %4 = load i64, i64* %j, align 8, !dbg !10199
  call void @llvm.dbg.value(metadata i64 %4, metadata !10183, metadata !DIExpression()), !dbg !10192
  %cmp = icmp eq i64 %3, %4, !dbg !10200
  %5 = or i8 %call, %call1, !dbg !10201
  %6 = icmp eq i8 %5, 0, !dbg !10201
  %7 = and i1 %6, %cmp, !dbg !10201
  br i1 %7, label %if.then, label %if.else, !dbg !10201

if.then:                                          ; preds = %entry
  br label %cleanup, !dbg !10202

if.else:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i1 %tobool2, metadata !10185, metadata !DIExpression()), !dbg !10192
  %tobool = icmp eq i8 %call, 0, !dbg !10204
  call void @llvm.dbg.value(metadata i1 %tobool, metadata !10184, metadata !DIExpression()), !dbg !10192
  call void @llvm.dbg.value(metadata i1 %tobool, metadata !10184, metadata !DIExpression()), !dbg !10192
  %8 = or i1 %tobool, %tobool2, !dbg !10205
  call void @llvm.dbg.value(metadata i1 %8, metadata !10186, metadata !DIExpression()), !dbg !10206
  br i1 %tobool2, label %if.then18, label %if.end, !dbg !10207

if.then18:                                        ; preds = %if.else
  call void @llvm.dbg.value(metadata i64 %4, metadata !10183, metadata !DIExpression()), !dbg !10192
  %dec = add i64 %4, -1, !dbg !10208
  call void @llvm.dbg.value(metadata i64 %dec, metadata !10183, metadata !DIExpression()), !dbg !10192
  store i64 %dec, i64* %j, align 8, !dbg !10208
  br label %if.end, !dbg !10210

if.end:                                           ; preds = %if.then18, %if.else
  call void @llvm.dbg.value(metadata i64 %3, metadata !10182, metadata !DIExpression()), !dbg !10192
  %conv19 = trunc i64 %3 to i32, !dbg !10211
  %call20 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv19) #7, !dbg !10211
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10211
  %9 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !10211
  call void @llvm.dbg.value(metadata %union.tree_node* %9, metadata !10190, metadata !DIExpression()), !dbg !10206
  %10 = load i64, i64* %i, align 8, !dbg !10212
  call void @llvm.dbg.value(metadata i64 %10, metadata !10182, metadata !DIExpression()), !dbg !10192
  %conv21 = trunc i64 %10 to i32, !dbg !10212
  %call22 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv21) #7, !dbg !10212
  %operands24 = getelementptr inbounds %union.tree_node, %union.tree_node* %call22, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10212
  %arrayidx25 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands24, i64 1, !dbg !10212
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !10212
  %tobool26 = icmp eq %union.tree_node* %11, null, !dbg !10212
  br i1 %tobool26, label %if.end33, label %if.then27, !dbg !10214

if.then27:                                        ; preds = %if.end
  %12 = load i64, i64* %i, align 8, !dbg !10215
  call void @llvm.dbg.value(metadata i64 %12, metadata !10182, metadata !DIExpression()), !dbg !10192
  %conv28 = trunc i64 %12 to i32, !dbg !10215
  %call29 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv28) #7, !dbg !10215
  %operands31 = getelementptr inbounds %union.tree_node, %union.tree_node* %call29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10215
  %arrayidx32 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands31, i64 1, !dbg !10215
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx32, align 8, !dbg !10215
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !10190, metadata !DIExpression()), !dbg !10206
  br label %if.end33, !dbg !10216

if.end33:                                         ; preds = %if.end, %if.then27
  %high.0 = phi %union.tree_node* [ %13, %if.then27 ], [ %9, %if.end ], !dbg !10206
  call void @llvm.dbg.value(metadata %union.tree_node* %high.0, metadata !10190, metadata !DIExpression()), !dbg !10206
  %14 = load i64, i64* %i, align 8, !dbg !10217
  call void @llvm.dbg.value(metadata i64 %14, metadata !10182, metadata !DIExpression()), !dbg !10192
  call void @llvm.dbg.value(metadata i64 %14, metadata !10191, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !10206
  br label %for.cond, !dbg !10219

for.cond:                                         ; preds = %for.inc, %if.end33
  %high.1 = phi %union.tree_node* [ %high.0, %if.end33 ], [ %high.2, %for.inc ], !dbg !10206
  %k.0.in = phi i64 [ %14, %if.end33 ], [ %k.0, %for.inc ]
  %k.0 = add i64 %k.0.in, 1, !dbg !10220
  call void @llvm.dbg.value(metadata i64 %k.0, metadata !10191, metadata !DIExpression()), !dbg !10206
  call void @llvm.dbg.value(metadata %union.tree_node* %high.1, metadata !10190, metadata !DIExpression()), !dbg !10206
  %15 = load i64, i64* %j, align 8, !dbg !10221
  call void @llvm.dbg.value(metadata i64 %15, metadata !10183, metadata !DIExpression()), !dbg !10192
  %cmp34 = icmp ugt i64 %k.0, %15, !dbg !10223
  br i1 %cmp34, label %for.end.loopexit, label %for.body, !dbg !10224

for.body:                                         ; preds = %for.cond
  %conv36 = trunc i64 %k.0 to i32, !dbg !10225
  %call37 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv36) #7, !dbg !10225
  %operands39 = getelementptr inbounds %union.tree_node, %union.tree_node* %call37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10225
  %16 = load %union.tree_node*, %union.tree_node** %operands39, align 8, !dbg !10225
  call void @llvm.dbg.value(metadata %union.tree_node* %16, metadata !10189, metadata !DIExpression()), !dbg !10206
  %call41 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %16, %union.tree_node* %high.1, i32 0) #6, !dbg !10227
  %call42 = call i32 @integer_onep(%union.tree_node* %call41) #6, !dbg !10229
  %tobool43 = icmp eq i32 %call42, 0, !dbg !10229
  br i1 %tobool43, label %for.body.for.end_crit_edge, label %if.end45, !dbg !10230

for.body.for.end_crit_edge:                       ; preds = %for.body
  %.pre = load i64, i64* %j, align 8, !dbg !10231
  br label %for.end, !dbg !10230

if.end45:                                         ; preds = %for.body
  call void @llvm.dbg.value(metadata %union.tree_node* %16, metadata !10190, metadata !DIExpression()), !dbg !10206
  %call47 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv36) #7, !dbg !10232
  %operands49 = getelementptr inbounds %union.tree_node, %union.tree_node* %call47, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10232
  %arrayidx50 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands49, i64 1, !dbg !10232
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !10232
  %tobool51 = icmp eq %union.tree_node* %17, null, !dbg !10232
  br i1 %tobool51, label %for.inc, label %if.then52, !dbg !10234

if.then52:                                        ; preds = %if.end45
  %call54 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv36) #7, !dbg !10235
  %operands56 = getelementptr inbounds %union.tree_node, %union.tree_node* %call54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10235
  %arrayidx57 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands56, i64 1, !dbg !10235
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx57, align 8, !dbg !10235
  call void @llvm.dbg.value(metadata %union.tree_node* %18, metadata !10190, metadata !DIExpression()), !dbg !10206
  br label %for.inc, !dbg !10236

for.inc:                                          ; preds = %if.end45, %if.then52
  %high.2 = phi %union.tree_node* [ %18, %if.then52 ], [ %16, %if.end45 ], !dbg !10237
  call void @llvm.dbg.value(metadata %union.tree_node* %high.2, metadata !10190, metadata !DIExpression()), !dbg !10206
  call void @llvm.dbg.value(metadata i64 %k.0, metadata !10191, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !10206
  br label %for.cond, !dbg !10238, !llvm.loop !10239

for.end.loopexit:                                 ; preds = %for.cond
  %.lcssa = phi i64 [ %15, %for.cond ], !dbg !10221
  %19 = xor i1 %8, true, !dbg !10241
  %phitmp = zext i1 %19 to i8, !dbg !10241
  br label %for.end, !dbg !10241

for.end:                                          ; preds = %for.end.loopexit, %for.body.for.end_crit_edge
  %20 = phi i64 [ %.pre, %for.body.for.end_crit_edge ], [ %.lcssa, %for.end.loopexit ], !dbg !10231
  %take_default.0 = phi i8 [ 0, %for.body.for.end_crit_edge ], [ %phitmp, %for.end.loopexit ]
  %21 = load i64, i64* %i, align 8, !dbg !10241
  call void @llvm.dbg.value(metadata i64 %21, metadata !10182, metadata !DIExpression()), !dbg !10192
  call void @llvm.dbg.value(metadata i64 %20, metadata !10183, metadata !DIExpression()), !dbg !10192
  br label %cleanup

cleanup:                                          ; preds = %for.end, %if.then
  %storemerge3 = phi i64 [ %21, %for.end ], [ 1, %if.then ], !dbg !10242
  %storemerge = phi i64 [ %20, %for.end ], [ 0, %if.then ], !dbg !10242
  %retval.0 = phi i8 [ %take_default.0, %for.end ], [ 0, %if.then ], !dbg !10242
  store i64 %storemerge3, i64* %min_idx, align 8, !dbg !10242
  store i64 %storemerge, i64* %max_idx, align 8, !dbg !10242
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !10243
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !10243
  ret i8 %retval.0, !dbg !10243
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @find_case_label_index(%union.gimple_statement_d* %stmt, i64 %start_idx, %union.tree_node* %val, i64* %idx) unnamed_addr #5 !dbg !10244 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !10248, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.value(metadata i64 %start_idx, metadata !10249, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !10250, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.value(metadata i64* %idx, metadata !10251, metadata !DIExpression()), !dbg !10261
  %call = tail call fastcc i32 @gimple_switch_num_labels(%union.gimple_statement_d* %stmt) #7, !dbg !10262
  %conv = zext i32 %call to i64, !dbg !10262
  call void @llvm.dbg.value(metadata i64 %conv, metadata !10252, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.value(metadata i64 %start_idx, metadata !10253, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.value(metadata i64 %conv, metadata !10254, metadata !DIExpression()), !dbg !10261
  br label %for.cond, !dbg !10263

for.cond:                                         ; preds = %cleanup, %entry
  %low.0 = phi i64 [ %start_idx, %entry ], [ %low.2, %cleanup ], !dbg !10264
  %high.0 = phi i64 [ %conv, %entry ], [ %high.2, %cleanup ], !dbg !10265
  call void @llvm.dbg.value(metadata i64 %high.0, metadata !10254, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.value(metadata i64 %low.0, metadata !10253, metadata !DIExpression()), !dbg !10261
  %cmp = icmp eq i64 %high.0, %low.0, !dbg !10266
  br i1 %cmp, label %for.end, label %for.body, !dbg !10267

for.body:                                         ; preds = %for.cond
  %add = add i64 %high.0, %low.0, !dbg !10268
  %div = lshr i64 %add, 1, !dbg !10269
  call void @llvm.dbg.value(metadata i64 %div, metadata !10260, metadata !DIExpression()), !dbg !10270
  %conv3 = trunc i64 %div to i32, !dbg !10271
  %call4 = tail call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv3) #7, !dbg !10272
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !10255, metadata !DIExpression()), !dbg !10270
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10273
  %0 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !10273
  %call5 = tail call i32 @tree_int_cst_compare(%union.tree_node* %0, %union.tree_node* %val) #6, !dbg !10274
  call void @llvm.dbg.value(metadata i32 %call5, metadata !10259, metadata !DIExpression()), !dbg !10270
  %cmp6 = icmp eq i32 %call5, 0, !dbg !10275
  br i1 %cmp6, label %if.then, label %if.else, !dbg !10277

if.then:                                          ; preds = %for.body
  store i64 %div, i64* %idx, align 8, !dbg !10278
  br label %cleanup, !dbg !10280

if.else:                                          ; preds = %for.body
  %cmp8 = icmp sgt i32 %call5, 0, !dbg !10281
  br i1 %cmp8, label %cleanup, label %if.else11, !dbg !10283

if.else11:                                        ; preds = %if.else
  %add12 = add nuw i64 %div, 1, !dbg !10284
  call void @llvm.dbg.value(metadata i64 %add12, metadata !10253, metadata !DIExpression()), !dbg !10261
  %arrayidx15 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !10286
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !10286
  %cmp16 = icmp eq %union.tree_node* %1, null, !dbg !10288
  br i1 %cmp16, label %cleanup, label %land.lhs.true, !dbg !10289

land.lhs.true:                                    ; preds = %if.else11
  %call21 = tail call i32 @tree_int_cst_compare(%union.tree_node* nonnull %1, %union.tree_node* %val) #6, !dbg !10290
  %cmp22 = icmp sgt i32 %call21, -1, !dbg !10291
  br i1 %cmp22, label %if.then24, label %cleanup, !dbg !10292

if.then24:                                        ; preds = %land.lhs.true
  store i64 %div, i64* %idx, align 8, !dbg !10293
  br label %cleanup, !dbg !10295

cleanup:                                          ; preds = %if.else11, %land.lhs.true, %if.else, %if.then24, %if.then
  %low.2 = phi i64 [ %low.0, %if.then ], [ %add12, %if.then24 ], [ %low.0, %if.else ], [ %add12, %land.lhs.true ], [ %add12, %if.else11 ], !dbg !10296
  %high.2 = phi i64 [ %high.0, %if.then ], [ %high.0, %if.then24 ], [ %div, %if.else ], [ %high.0, %land.lhs.true ], [ %high.0, %if.else11 ], !dbg !10296
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then ], [ false, %if.then24 ], [ true, %if.else ], [ true, %land.lhs.true ], [ true, %if.else11 ]
  call void @llvm.dbg.value(metadata i64 %high.2, metadata !10254, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.value(metadata i64 %low.2, metadata !10253, metadata !DIExpression()), !dbg !10261
  br i1 %cleanup.dest.slot.0, label %for.cond, label %cleanup29.loopexit, !llvm.loop !10297

for.end:                                          ; preds = %for.cond
  %low.0.lcssa = phi i64 [ %low.0, %for.cond ], !dbg !10264
  call void @llvm.dbg.value(metadata i64 %low.0.lcssa, metadata !10253, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.value(metadata i64 %low.0.lcssa, metadata !10253, metadata !DIExpression()), !dbg !10261
  call void @llvm.dbg.value(metadata i64 %high.0, metadata !10254, metadata !DIExpression()), !dbg !10261
  store i64 %low.0.lcssa, i64* %idx, align 8, !dbg !10299
  br label %cleanup29, !dbg !10300

cleanup29.loopexit:                               ; preds = %cleanup
  br label %cleanup29, !dbg !10301

cleanup29:                                        ; preds = %cleanup29.loopexit, %for.end
  %retval.2 = phi i8 [ 0, %for.end ], [ 1, %cleanup29.loopexit ], !dbg !10261
  ret i8 %retval.2, !dbg !10301
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @gimple_phi_arg_edge(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !10302 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !10306, metadata !DIExpression()), !dbg !10308
  call void @llvm.dbg.value(metadata i64 %i, metadata !10307, metadata !DIExpression()), !dbg !10308
  %call = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %gs) #7, !dbg !10309
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i64 0, i32 0, !dbg !10309
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !10309
  %tobool = icmp eq %struct.VEC_edge_gc* %0, null, !dbg !10309
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10309

cond.true:                                        ; preds = %entry
  %call1 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %gs) #7, !dbg !10309
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call1, i64 0, i32 0, !dbg !10309
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !10309
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %1, i64 0, i32 0, !dbg !10309
  br label %cond.end, !dbg !10309

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !10309
  %conv = trunc i64 %i to i32, !dbg !10309
  %call3 = tail call fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %conv) #7, !dbg !10309
  ret %struct.edge_def* %call3, !dbg !10310
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !10311 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !10315, metadata !DIExpression()), !dbg !10317
  %call = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #7, !dbg !10318
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call, metadata !10316, metadata !DIExpression()), !dbg !10317
  %tobool = icmp eq %struct.basic_block_def* %call, null, !dbg !10319
  br i1 %tobool, label %cleanup, label %if.end, !dbg !10321

if.end:                                           ; preds = %entry
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i64 0, i32 3, !dbg !10322
  %0 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !10322
  br label %cleanup, !dbg !10323

cleanup:                                          ; preds = %entry, %if.end
  %retval.0 = phi %struct.loop* [ %0, %if.end ], [ null, %entry ], !dbg !10317
  ret %struct.loop* %retval.0, !dbg !10324
}

; Function Attrs: nounwind uwtable
define internal fastcc void @adjust_range_with_scev(%struct.value_range_d* %vr, %struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node* %var) unnamed_addr #5 !dbg !10325 {
entry:
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !10329, metadata !DIExpression()), !dbg !10342
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !10330, metadata !DIExpression()), !dbg !10342
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !10331, metadata !DIExpression()), !dbg !10342
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !10332, metadata !DIExpression()), !dbg !10342
  %type1 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 0, !dbg !10343
  %0 = load i32, i32* %type1, align 8, !dbg !10343
  %cmp = icmp eq i32 %0, 2, !dbg !10345
  br i1 %cmp, label %cleanup.cont, label %if.end, !dbg !10346

if.end:                                           ; preds = %entry
  %call = tail call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %loop, %union.tree_node* %var) #6, !dbg !10347
  %call2 = tail call fastcc %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %call) #7, !dbg !10348
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !10335, metadata !DIExpression()), !dbg !10342
  %call3 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call2) #6, !dbg !10349
  %tobool = icmp eq i8 %call3, 0, !dbg !10349
  br i1 %tobool, label %if.end5, label %if.then4, !dbg !10351

if.then4:                                         ; preds = %if.end
  %equiv = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !10352
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv, align 8, !dbg !10352
  tail call fastcc void @set_value_range_to_value(%struct.value_range_d* %vr, %union.tree_node* %call2, %struct.bitmap_head_def* %1) #7, !dbg !10354
  br label %cleanup.cont, !dbg !10355

if.end5:                                          ; preds = %if.end
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10356
  %bf.load = load i64, i64* %2, align 8, !dbg !10356
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !10358
  %cmp6 = icmp eq i64 %bf.cast2, 146, !dbg !10358
  br i1 %cmp6, label %if.end8, label %cleanup.cont, !dbg !10359

if.end8:                                          ; preds = %if.end5
  %num = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 0, !dbg !10360
  %3 = load i32, i32* %num, align 8, !dbg !10360
  %call9 = tail call %union.tree_node* @initial_condition_in_loop_num(%union.tree_node* %call2, i32 %3) #6, !dbg !10361
  call void @llvm.dbg.value(metadata %union.tree_node* %call9, metadata !10333, metadata !DIExpression()), !dbg !10342
  %4 = load i32, i32* %num, align 8, !dbg !10362
  %call11 = tail call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %call2, i32 %4) #6, !dbg !10363
  call void @llvm.dbg.value(metadata %union.tree_node* %call11, metadata !10334, metadata !DIExpression()), !dbg !10342
  %cmp12 = icmp eq %union.tree_node* %call11, null, !dbg !10364
  br i1 %cmp12, label %cleanup.cont, label %lor.lhs.false, !dbg !10366

lor.lhs.false:                                    ; preds = %if.end8
  %call13 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %call11) #6, !dbg !10367
  %tobool14 = icmp eq i8 %call13, 0, !dbg !10367
  br i1 %tobool14, label %cleanup.cont, label %lor.lhs.false15, !dbg !10368

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %call16 = tail call fastcc zeroext i8 @valid_value_p(%union.tree_node* %call9) #7, !dbg !10369
  %tobool17 = icmp eq i8 %call16, 0, !dbg !10369
  br i1 %tobool17, label %cleanup.cont, label %if.end19, !dbg !10370

if.end19:                                         ; preds = %lor.lhs.false15
  %call20 = tail call i32 @scev_direction(%union.tree_node* %call2) #6, !dbg !10371
  call void @llvm.dbg.value(metadata i32 %call20, metadata !10341, metadata !DIExpression()), !dbg !10342
  %cmp21 = icmp eq i32 %call20, 2, !dbg !10372
  br i1 %cmp21, label %cleanup.cont, label %lor.lhs.false22, !dbg !10374

lor.lhs.false22:                                  ; preds = %if.end19
  %call23 = tail call fastcc %struct.loop* @get_chrec_loop(%union.tree_node* %call2) #7, !dbg !10375
  %call24 = tail call zeroext i8 @scev_probably_wraps_p(%union.tree_node* %call9, %union.tree_node* nonnull %call11, %union.gimple_statement_d* %stmt, %struct.loop* %call23, i8 zeroext 1) #6, !dbg !10376
  %tobool25 = icmp eq i8 %call24, 0, !dbg !10376
  br i1 %tobool25, label %if.end27, label %cleanup.cont, !dbg !10377

if.end27:                                         ; preds = %lor.lhs.false22
  %type28 = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10378
  %5 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !10378
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !10340, metadata !DIExpression()), !dbg !10342
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10379
  %bf.load30 = load i64, i64* %6, align 8, !dbg !10379
  %bf.cast323 = and i64 %bf.load30, 65535, !dbg !10379
  %cmp33 = icmp eq i64 %bf.cast323, 10, !dbg !10379
  br i1 %cmp33, label %if.then45, label %lor.lhs.false35, !dbg !10379

lor.lhs.false35:                                  ; preds = %if.end27
  %cmp40 = icmp eq i64 %bf.cast323, 12, !dbg !10379
  br i1 %cmp40, label %if.then45, label %lor.lhs.false42, !dbg !10381

lor.lhs.false42:                                  ; preds = %lor.lhs.false35
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !10382
  %7 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !10382
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !10382
  %tobool44 = icmp eq %union.tree_node* %8, null, !dbg !10382
  br i1 %tobool44, label %if.then45, label %if.else, !dbg !10383

if.then45:                                        ; preds = %lor.lhs.false42, %lor.lhs.false35, %if.end27
  %call46 = tail call %union.tree_node* @lower_bound_in_type(%union.tree_node* %5, %union.tree_node* %5) #6, !dbg !10384
  call void @llvm.dbg.value(metadata %union.tree_node* %call46, metadata !10336, metadata !DIExpression()), !dbg !10342
  %bf.load51.pre = load i64, i64* %6, align 8, !dbg !10385
  %.pre = and i64 %bf.load51.pre, 65535, !dbg !10385
  br label %if.end49, !dbg !10387

if.else:                                          ; preds = %lor.lhs.false42
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !10336, metadata !DIExpression()), !dbg !10342
  br label %if.end49

if.end49:                                         ; preds = %if.else, %if.then45
  %bf.cast535.pre-phi = phi i64 [ %bf.cast323, %if.else ], [ %.pre, %if.then45 ], !dbg !10385
  %tmin.0 = phi %union.tree_node* [ %8, %if.else ], [ %call46, %if.then45 ], !dbg !10388
  call void @llvm.dbg.value(metadata %union.tree_node* %tmin.0, metadata !10336, metadata !DIExpression()), !dbg !10342
  %cmp54 = icmp eq i64 %bf.cast535.pre-phi, 10, !dbg !10385
  br i1 %cmp54, label %if.then66, label %lor.lhs.false56, !dbg !10385

lor.lhs.false56:                                  ; preds = %if.end49
  %cmp61 = icmp eq i64 %bf.cast535.pre-phi, 12, !dbg !10385
  br i1 %cmp61, label %if.then66, label %lor.lhs.false63, !dbg !10389

lor.lhs.false63:                                  ; preds = %lor.lhs.false56
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !10390
  %9 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !10390
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !10390
  %tobool65 = icmp eq %union.tree_node* %10, null, !dbg !10390
  br i1 %tobool65, label %if.then66, label %if.else68, !dbg !10391

if.then66:                                        ; preds = %lor.lhs.false63, %lor.lhs.false56, %if.end49
  %call67 = tail call %union.tree_node* @upper_bound_in_type(%union.tree_node* %5, %union.tree_node* %5) #6, !dbg !10392
  call void @llvm.dbg.value(metadata %union.tree_node* %call67, metadata !10337, metadata !DIExpression()), !dbg !10342
  br label %if.end71, !dbg !10393

if.else68:                                        ; preds = %lor.lhs.false63
  call void @llvm.dbg.value(metadata %union.tree_node* %10, metadata !10337, metadata !DIExpression()), !dbg !10342
  br label %if.end71

if.end71:                                         ; preds = %if.else68, %if.then66
  %tmax.0 = phi %union.tree_node* [ %call67, %if.then66 ], [ %10, %if.else68 ], !dbg !10394
  call void @llvm.dbg.value(metadata %union.tree_node* %tmax.0, metadata !10337, metadata !DIExpression()), !dbg !10342
  %11 = load i32, i32* %type1, align 8, !dbg !10395
  %cmp73 = icmp eq i32 %11, 3, !dbg !10397
  br i1 %cmp73, label %if.then79, label %lor.lhs.false75, !dbg !10398

lor.lhs.false75:                                  ; preds = %if.end71
  %cmp77 = icmp eq i32 %11, 0, !dbg !10399
  br i1 %cmp77, label %if.then79, label %if.else91, !dbg !10400

if.then79:                                        ; preds = %lor.lhs.false75, %if.end71
  call void @llvm.dbg.value(metadata %union.tree_node* %tmin.0, metadata !10338, metadata !DIExpression()), !dbg !10342
  call void @llvm.dbg.value(metadata %union.tree_node* %tmax.0, metadata !10339, metadata !DIExpression()), !dbg !10342
  %cmp80 = icmp eq i32 %call20, 1, !dbg !10401
  %tmin.0.call9 = select i1 %cmp80, %union.tree_node* %tmin.0, %union.tree_node* %call9
  %call9.tmax.0 = select i1 %cmp80, %union.tree_node* %call9, %union.tree_node* %tmax.0
  call void @llvm.dbg.value(metadata %union.tree_node* %call9.tmax.0, metadata !10339, metadata !DIExpression()), !dbg !10342
  call void @llvm.dbg.value(metadata %union.tree_node* %tmin.0.call9, metadata !10338, metadata !DIExpression()), !dbg !10342
  %call85 = tail call fastcc i32 @compare_values(%union.tree_node* %tmin.0.call9, %union.tree_node* %call9.tmax.0) #7, !dbg !10404
  %cmp86 = icmp eq i32 %call85, 1, !dbg !10406
  br i1 %cmp86, label %cleanup.cont, label %if.end89, !dbg !10407

if.end89:                                         ; preds = %if.then79
  %equiv90 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !10408
  %12 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv90, align 8, !dbg !10408
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* %tmin.0.call9, %union.tree_node* %call9.tmax.0, %struct.bitmap_head_def* %12) #7, !dbg !10409
  br label %cleanup.cont, !dbg !10410

if.else91:                                        ; preds = %lor.lhs.false75
  %cmp93 = icmp eq i32 %11, 1, !dbg !10411
  br i1 %cmp93, label %if.then95, label %cleanup.cont, !dbg !10413

if.then95:                                        ; preds = %if.else91
  %min96 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !10414
  %13 = load %union.tree_node*, %union.tree_node** %min96, align 8, !dbg !10414
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !10338, metadata !DIExpression()), !dbg !10342
  %max97 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !10416
  %14 = load %union.tree_node*, %union.tree_node** %max97, align 8, !dbg !10416
  call void @llvm.dbg.value(metadata %union.tree_node* %14, metadata !10339, metadata !DIExpression()), !dbg !10342
  %cmp98 = icmp eq i32 %call20, 1, !dbg !10417
  br i1 %cmp98, label %if.then100, label %if.else115, !dbg !10419

if.then100:                                       ; preds = %if.then95
  %call101 = tail call fastcc i32 @compare_values(%union.tree_node* %call9, %union.tree_node* %14) #7, !dbg !10420
  %cmp102 = icmp eq i32 %call101, -1, !dbg !10423
  br i1 %cmp102, label %if.then104, label %if.end110, !dbg !10424

if.then104:                                       ; preds = %if.then100
  call void @llvm.dbg.value(metadata %union.tree_node* %call9, metadata !10339, metadata !DIExpression()), !dbg !10342
  %call105 = tail call fastcc i32 @compare_values(%union.tree_node* %13, %union.tree_node* %call9) #7, !dbg !10425
  %cmp106 = icmp eq i32 %call105, 1, !dbg !10428
  br i1 %cmp106, label %cleanup.cont, label %if.end110, !dbg !10429

if.end110:                                        ; preds = %if.then104, %if.then100
  %max.1 = phi %union.tree_node* [ %14, %if.then100 ], [ %call9, %if.then104 ], !dbg !10430
  call void @llvm.dbg.value(metadata %union.tree_node* %max.1, metadata !10339, metadata !DIExpression()), !dbg !10342
  %call111 = tail call fastcc zeroext i8 @is_negative_overflow_infinity(%union.tree_node* %13) #7, !dbg !10431
  %tobool112 = icmp eq i8 %call111, 0, !dbg !10431
  %spec.select = select i1 %tobool112, %union.tree_node* %13, %union.tree_node* %tmin.0, !dbg !10433
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select, metadata !10338, metadata !DIExpression()), !dbg !10342
  br label %if.end130, !dbg !10434

if.else115:                                       ; preds = %if.then95
  %call116 = tail call fastcc i32 @compare_values(%union.tree_node* %call9, %union.tree_node* %13) #7, !dbg !10435
  %cmp117 = icmp eq i32 %call116, 1, !dbg !10438
  br i1 %cmp117, label %if.then119, label %if.end125, !dbg !10439

if.then119:                                       ; preds = %if.else115
  call void @llvm.dbg.value(metadata %union.tree_node* %call9, metadata !10338, metadata !DIExpression()), !dbg !10342
  %call120 = tail call fastcc i32 @compare_values(%union.tree_node* %call9, %union.tree_node* %14) #7, !dbg !10440
  %cmp121 = icmp eq i32 %call120, 1, !dbg !10443
  br i1 %cmp121, label %cleanup.cont, label %if.end125, !dbg !10444

if.end125:                                        ; preds = %if.then119, %if.else115
  %min.2 = phi %union.tree_node* [ %13, %if.else115 ], [ %call9, %if.then119 ], !dbg !10430
  call void @llvm.dbg.value(metadata %union.tree_node* %min.2, metadata !10338, metadata !DIExpression()), !dbg !10342
  %call126 = tail call fastcc zeroext i8 @is_positive_overflow_infinity(%union.tree_node* %14) #7, !dbg !10445
  %tobool127 = icmp eq i8 %call126, 0, !dbg !10445
  %spec.select1 = select i1 %tobool127, %union.tree_node* %14, %union.tree_node* %tmax.0, !dbg !10447
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select1, metadata !10339, metadata !DIExpression()), !dbg !10342
  br label %if.end130

if.end130:                                        ; preds = %if.end125, %if.end110
  %min.3 = phi %union.tree_node* [ %spec.select, %if.end110 ], [ %min.2, %if.end125 ], !dbg !10448
  %max.3 = phi %union.tree_node* [ %max.1, %if.end110 ], [ %spec.select1, %if.end125 ], !dbg !10448
  call void @llvm.dbg.value(metadata %union.tree_node* %max.3, metadata !10339, metadata !DIExpression()), !dbg !10342
  call void @llvm.dbg.value(metadata %union.tree_node* %min.3, metadata !10338, metadata !DIExpression()), !dbg !10342
  %equiv131 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 3, !dbg !10449
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %equiv131, align 8, !dbg !10449
  tail call fastcc void @set_value_range(%struct.value_range_d* %vr, i32 1, %union.tree_node* %min.3, %union.tree_node* %max.3, %struct.bitmap_head_def* %15) #7, !dbg !10450
  br label %cleanup.cont, !dbg !10451

cleanup.cont:                                     ; preds = %lor.lhs.false22, %lor.lhs.false15, %lor.lhs.false, %if.end5, %if.then4, %entry, %if.end8, %if.end19, %if.then79, %if.then104, %if.then119, %if.else91, %if.end130, %if.end89
  ret void, !dbg !10452
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vrp_var_may_overflow(%union.tree_node* %var, %union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !10453 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !10457, metadata !DIExpression()), !dbg !10463
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !10458, metadata !DIExpression()), !dbg !10463
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10464
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 4, !dbg !10464
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !10464
  %cmp = icmp eq %struct.loops* %1, null, !dbg !10466
  br i1 %cmp, label %cleanup, label %if.end, !dbg !10467

if.end:                                           ; preds = %entry
  %call = tail call fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #7, !dbg !10468
  call void @llvm.dbg.value(metadata %struct.loop* %call, metadata !10459, metadata !DIExpression()), !dbg !10463
  %cmp1 = icmp eq %struct.loop* %call, null, !dbg !10469
  br i1 %cmp1, label %cleanup, label %lor.lhs.false, !dbg !10471

lor.lhs.false:                                    ; preds = %if.end
  %call2 = tail call fastcc %struct.loop* @loop_outer(%struct.loop* nonnull %call) #7, !dbg !10472
  %tobool = icmp eq %struct.loop* %call2, null, !dbg !10472
  br i1 %tobool, label %cleanup, label %if.end4, !dbg !10473

if.end4:                                          ; preds = %lor.lhs.false
  %call5 = tail call %union.tree_node* @analyze_scalar_evolution(%struct.loop* nonnull %call, %union.tree_node* %var) #6, !dbg !10474
  %call6 = tail call fastcc %union.tree_node* @instantiate_parameters(%struct.loop* nonnull %call, %union.tree_node* %call5) #7, !dbg !10475
  call void @llvm.dbg.value(metadata %union.tree_node* %call6, metadata !10460, metadata !DIExpression()), !dbg !10463
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10476
  %bf.load = load i64, i64* %2, align 8, !dbg !10476
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !10478
  %cmp7 = icmp eq i64 %bf.cast1, 146, !dbg !10478
  br i1 %cmp7, label %if.end9, label %cleanup, !dbg !10479

if.end9:                                          ; preds = %if.end4
  %num = getelementptr inbounds %struct.loop, %struct.loop* %call, i64 0, i32 0, !dbg !10480
  %3 = load i32, i32* %num, align 8, !dbg !10480
  %call10 = tail call %union.tree_node* @initial_condition_in_loop_num(%union.tree_node* %call6, i32 %3) #6, !dbg !10481
  call void @llvm.dbg.value(metadata %union.tree_node* %call10, metadata !10461, metadata !DIExpression()), !dbg !10463
  %4 = load i32, i32* %num, align 8, !dbg !10482
  %call12 = tail call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %call6, i32 %4) #6, !dbg !10483
  call void @llvm.dbg.value(metadata %union.tree_node* %call12, metadata !10462, metadata !DIExpression()), !dbg !10463
  %cmp13 = icmp eq %union.tree_node* %call12, null, !dbg !10484
  br i1 %cmp13, label %cleanup, label %lor.lhs.false14, !dbg !10486

lor.lhs.false14:                                  ; preds = %if.end9
  %call15 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %call12) #6, !dbg !10487
  %tobool16 = icmp eq i8 %call15, 0, !dbg !10487
  br i1 %tobool16, label %cleanup, label %lor.lhs.false17, !dbg !10488

lor.lhs.false17:                                  ; preds = %lor.lhs.false14
  %call18 = tail call fastcc zeroext i8 @valid_value_p(%union.tree_node* %call10) #7, !dbg !10489
  %tobool19 = icmp eq i8 %call18, 0, !dbg !10489
  br i1 %tobool19, label %cleanup, label %if.end21, !dbg !10490

if.end21:                                         ; preds = %lor.lhs.false17
  %call22 = tail call fastcc %struct.loop* @get_chrec_loop(%union.tree_node* %call6) #7, !dbg !10491
  %call23 = tail call zeroext i8 @scev_probably_wraps_p(%union.tree_node* %call10, %union.tree_node* nonnull %call12, %union.gimple_statement_d* %stmt, %struct.loop* %call22, i8 zeroext 1) #6, !dbg !10493
  %tobool24 = icmp eq i8 %call23, 0, !dbg !10493
  br i1 %tobool24, label %if.end26, label %cleanup, !dbg !10494

if.end26:                                         ; preds = %if.end21
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10495
  %tobool27 = icmp eq %struct._IO_FILE* %5, null, !dbg !10495
  br i1 %tobool27, label %cleanup, label %land.lhs.true, !dbg !10497

land.lhs.true:                                    ; preds = %if.end26
  %6 = load i32, i32* @dump_flags, align 4, !dbg !10498
  %and = and i32 %6, 8, !dbg !10499
  %cmp28 = icmp eq i32 %and, 0, !dbg !10500
  br i1 %cmp28, label %cleanup, label %if.then29, !dbg !10501

if.then29:                                        ; preds = %land.lhs.true
  tail call void @print_generic_expr(%struct._IO_FILE* nonnull %5, %union.tree_node* %var, i32 0) #6, !dbg !10502
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10504
  %call30 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.52, i64 0, i64 0)) #6, !dbg !10505
  br label %cleanup, !dbg !10506

cleanup:                                          ; preds = %land.lhs.true, %if.end26, %if.end21, %lor.lhs.false17, %lor.lhs.false14, %if.end4, %lor.lhs.false, %if.then29, %if.end9, %if.end, %entry
  %retval.0 = phi i8 [ 1, %entry ], [ 1, %lor.lhs.false ], [ 1, %if.end ], [ 1, %if.end4 ], [ 1, %lor.lhs.false17 ], [ 1, %lor.lhs.false14 ], [ 1, %if.end9 ], [ 1, %if.end21 ], [ 0, %if.then29 ], [ 0, %land.lhs.true ], [ 0, %if.end26 ], !dbg !10463
  ret i8 %retval.0, !dbg !10507
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %chrec) unnamed_addr #0 !dbg !10508 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !10513, metadata !DIExpression()), !dbg !10515
  call void @llvm.dbg.value(metadata %union.tree_node* %chrec, metadata !10514, metadata !DIExpression()), !dbg !10515
  %call = tail call fastcc %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) #7, !dbg !10516
  %call1 = tail call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %call, %struct.loop* %loop, %union.tree_node* %chrec) #6, !dbg !10517
  ret %union.tree_node* %call1, !dbg !10518
}

declare dso_local %union.tree_node* @analyze_scalar_evolution(%struct.loop*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @initial_condition_in_loop_num(%union.tree_node*, i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @evolution_part_in_loop_num(%union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @valid_value_p(%union.tree_node* %expr) unnamed_addr #5 !dbg !10519 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !10523, metadata !DIExpression()), !dbg !10524
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10525
  %bf.load = load i64, i64* %0, align 8, !dbg !10525
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !10527
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !10527
  br i1 %cmp, label %return, label %if.end, !dbg !10528

if.end:                                           ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 63, !dbg !10529
  br i1 %cmp5, label %if.then11, label %lor.lhs.false, !dbg !10531

lor.lhs.false:                                    ; preds = %if.end
  %cmp10 = icmp eq i64 %bf.cast1, 64, !dbg !10532
  br i1 %cmp10, label %if.then11, label %if.end25, !dbg !10533

if.then11:                                        ; preds = %lor.lhs.false, %if.end
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10534
  %1 = bitcast %union.tree_node** %operands to i64**, !dbg !10534
  %2 = load i64*, i64** %1, align 8, !dbg !10534
  %bf.load13 = load i64, i64* %2, align 8, !dbg !10534
  %bf.cast154 = and i64 %bf.load13, 65535, !dbg !10535
  %cmp16 = icmp eq i64 %bf.cast154, 141, !dbg !10535
  br i1 %cmp16, label %land.rhs, label %land.end, !dbg !10536

land.rhs:                                         ; preds = %if.then11
  %arrayidx19 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !10537
  %3 = bitcast %union.tree_node** %arrayidx19 to i64**, !dbg !10537
  %4 = load i64*, i64** %3, align 8, !dbg !10537
  %bf.load21 = load i64, i64* %4, align 8, !dbg !10537
  %bf.cast235 = and i64 %bf.load21, 65535, !dbg !10538
  %cmp24 = icmp eq i64 %bf.cast235, 23, !dbg !10538
  %phitmp = zext i1 %cmp24 to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.then11
  %5 = phi i8 [ 0, %if.then11 ], [ %phitmp, %land.rhs ]
  br label %return, !dbg !10539

if.end25:                                         ; preds = %lor.lhs.false
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %expr) #6, !dbg !10540
  br label %return, !dbg !10541

return:                                           ; preds = %entry, %if.end25, %land.end
  %retval.0 = phi i8 [ %5, %land.end ], [ %call, %if.end25 ], [ 1, %entry ], !dbg !10524
  ret i8 %retval.0, !dbg !10542
}

declare dso_local i32 @scev_direction(%union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @scev_probably_wraps_p(%union.tree_node*, %union.tree_node*, %union.gimple_statement_d*, %struct.loop*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @get_chrec_loop(%union.tree_node* %chrec) unnamed_addr #0 !dbg !10543 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %chrec, metadata !10547, metadata !DIExpression()), !dbg !10548
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %chrec, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10549
  %0 = bitcast %union.tree_node** %operands to %struct.tree_int_cst**, !dbg !10549
  %1 = load %struct.tree_int_cst*, %struct.tree_int_cst** %0, align 8, !dbg !10549
  %low = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %1, i64 0, i32 1, i32 0, !dbg !10549
  %2 = load i64, i64* %low, align 8, !dbg !10549
  %conv = trunc i64 %2 to i32, !dbg !10549
  %call = tail call fastcc %struct.loop* @get_loop(i32 %conv) #7, !dbg !10550
  ret %struct.loop* %call, !dbg !10551
}

declare dso_local %union.tree_node* @lower_bound_in_type(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @upper_bound_in_type(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @instantiate_scev(%struct.basic_block_def*, %struct.loop*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) unnamed_addr #0 !dbg !10552 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !10556, metadata !DIExpression()), !dbg !10558
  %call = tail call %struct.edge_def* @loop_preheader_edge(%struct.loop* %loop) #6, !dbg !10559
  call void @llvm.dbg.value(metadata %struct.edge_def* %call, metadata !10557, metadata !DIExpression()), !dbg !10558
  %tobool = icmp eq %struct.edge_def* %call, null, !dbg !10560
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10560

cond.true:                                        ; preds = %entry
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i64 0, i32 0, !dbg !10561
  br label %cond.end, !dbg !10560

cond.false:                                       ; preds = %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10562
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !10562
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10562
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i64 0, i32 0, !dbg !10562
  br label %cond.end, !dbg !10560

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi %struct.basic_block_def** [ %src, %cond.true ], [ %x_entry_block_ptr, %cond.false ]
  %cond = load %struct.basic_block_def*, %struct.basic_block_def** %cond.in, align 8, !dbg !10560
  ret %struct.basic_block_def* %cond, !dbg !10563
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @get_loop(i32 %num) unnamed_addr #0 !dbg !10564 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !10568, metadata !DIExpression()), !dbg !10569
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10570
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 4, !dbg !10570
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !10570
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i64 0, i32 1, !dbg !10570
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !10570
  %tobool = icmp eq %struct.VEC_loop_p_gc* %2, null, !dbg !10570
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10570

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %2, i64 0, i32 0, !dbg !10570
  br label %cond.end, !dbg !10570

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %entry ], !dbg !10570
  %call = tail call fastcc %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %num) #7, !dbg !10570
  ret %struct.loop* %call, !dbg !10571
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !10572 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_loop_p_base* %vec_, metadata !10578, metadata !DIExpression()), !dbg !10580
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !10579, metadata !DIExpression()), !dbg !10580
  br label %land.end, !dbg !10581

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !10581
  %arrayidx = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !10581
  %0 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !10581
  ret %struct.loop* %0, !dbg !10581
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @loop_outer(%struct.loop* %loop) unnamed_addr #0 !dbg !10582 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !10588, metadata !DIExpression()), !dbg !10590
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 7, !dbg !10591
  %0 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !10591
  %tobool = icmp eq %struct.VEC_loop_p_gc* %0, null, !dbg !10591
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10591

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %0, i64 0, i32 0, !dbg !10591
  br label %cond.end, !dbg !10591

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %entry ], !dbg !10591
  %call = tail call fastcc i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond) #7, !dbg !10591
  call void @llvm.dbg.value(metadata i32 %call, metadata !10589, metadata !DIExpression()), !dbg !10590
  %cmp = icmp eq i32 %call, 0, !dbg !10592
  br i1 %cmp, label %cleanup, label %if.end, !dbg !10594

if.end:                                           ; preds = %cond.end
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !10595
  %tobool3 = icmp eq %struct.VEC_loop_p_gc* %1, null, !dbg !10595
  br i1 %tobool3, label %cond.end8, label %cond.true4, !dbg !10595

cond.true4:                                       ; preds = %if.end
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %1, i64 0, i32 0, !dbg !10595
  br label %cond.end8, !dbg !10595

cond.end8:                                        ; preds = %if.end, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %if.end ], !dbg !10595
  %sub = add i32 %call, -1, !dbg !10595
  %call10 = tail call fastcc %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub) #7, !dbg !10595
  br label %cleanup, !dbg !10596

cleanup:                                          ; preds = %cond.end, %cond.end8
  %retval.0 = phi %struct.loop* [ %call10, %cond.end8 ], [ null, %cond.end ], !dbg !10590
  ret %struct.loop* %retval.0, !dbg !10597
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) unnamed_addr #0 !dbg !10598 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_loop_p_base* %vec_, metadata !10602, metadata !DIExpression()), !dbg !10603
  %tobool = icmp eq %struct.VEC_loop_p_base* %vec_, null, !dbg !10604
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10604

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %vec_, i64 0, i32 0, !dbg !10604
  %0 = load i32, i32* %num, align 8, !dbg !10604
  br label %cond.end, !dbg !10604

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !10604
  ret i32 %cond, !dbg !10604
}

declare dso_local zeroext i8 @substitute_and_fold(%struct.prop_value_d*, i8 (%struct.gimple_stmt_iterator*)*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal zeroext i8 @vrp_fold_stmt(%struct.gimple_stmt_iterator* %si) #5 !dbg !10605 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !10609, metadata !DIExpression()), !dbg !10610
  %call = tail call fastcc zeroext i8 @fold_predicate_in(%struct.gimple_stmt_iterator* %si) #7, !dbg !10611
  %tobool = icmp eq i8 %call, 0, !dbg !10611
  br i1 %tobool, label %if.end, label %return, !dbg !10613

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc zeroext i8 @simplify_stmt_using_ranges(%struct.gimple_stmt_iterator* %si) #7, !dbg !10614
  br label %return, !dbg !10615

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi i8 [ %call1, %if.end ], [ 1, %entry ], !dbg !10610
  ret i8 %retval.0, !dbg !10616
}

; Function Attrs: nounwind uwtable
define internal fastcc void @check_all_array_refs() unnamed_addr #5 !dbg !10617 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp10 = alloca %struct.gimple_stmt_iterator, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !10640
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !10640
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10641
  %cfg = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, i32 1, !dbg !10641
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10641
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i64 0, i32 0, !dbg !10641
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10641
  %4 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10642
  %5 = bitcast %struct.edge_def** %e to i8*, !dbg !10642
  %6 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10643
  %7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 0, !dbg !10643
  %8 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 1, !dbg !10643
  %9 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !10645
  %10 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !10645
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp10 to i8*, !dbg !10647
  %12 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !10648
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 1, !dbg !10649
  %13 = bitcast i8** %info to i32**, !dbg !10649
  br label %for.cond, !dbg !10641

for.cond:                                         ; preds = %cleanup44, %entry
  %14 = phi %struct.control_flow_graph* [ %2, %entry ], [ %.pre2, %cleanup44 ], !dbg !10651
  %.pn = phi %struct.basic_block_def* [ %3, %entry ], [ %bb.0, %cleanup44 ]
  %bb.0.in = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %.pn, i64 0, i32 6, !dbg !10652
  %bb.0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.0.in, align 8, !dbg !10652
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !10619, metadata !DIExpression()), !dbg !10653
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i64 0, i32 1, !dbg !10651
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10651
  %cmp = icmp eq %struct.basic_block_def* %bb.0, %15, !dbg !10651
  br i1 %cmp, label %for.end51, label %for.body, !dbg !10641

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #8, !dbg !10654
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8, !dbg !10655
  call void @llvm.dbg.value(metadata i8 0, metadata !10626, metadata !DIExpression()), !dbg !10642
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8, !dbg !10656
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb.0, i64 0, i32 0, !dbg !10656
  %call = call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds) #7, !dbg !10656
  %16 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !10656
  store i32 %16, i32* %7, align 8, !dbg !10656
  %17 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !10656
  store %struct.VEC_edge_gc** %17, %struct.VEC_edge_gc*** %8, align 8, !dbg !10656
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* nonnull align 8 %6, i64 16, i1 false), !dbg !10656
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8, !dbg !10656
  br label %for.cond3, !dbg !10656

for.cond3:                                        ; preds = %for.body5, %for.body
  %executable.0 = phi i8 [ 0, %for.body ], [ %conv8, %for.body5 ], !dbg !10642
  call void @llvm.dbg.value(metadata i8 %executable.0, metadata !10626, metadata !DIExpression()), !dbg !10642
  %18 = load i32, i32* %9, align 8, !dbg !10657
  %19 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %10, align 8, !dbg !10657
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !10625, metadata !DIExpression(DW_OP_deref)), !dbg !10642
  %call4 = call fastcc zeroext i8 @ei_cond(i32 %18, %struct.VEC_edge_gc** %19, %struct.edge_def** nonnull %e) #7, !dbg !10657
  %tobool = icmp eq i8 %call4, 0, !dbg !10656
  br i1 %tobool, label %for.end, label %for.body5, !dbg !10656

for.body5:                                        ; preds = %for.cond3
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10658
  call void @llvm.dbg.value(metadata %struct.edge_def* %20, metadata !10625, metadata !DIExpression()), !dbg !10642
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i64 0, i32 7, !dbg !10659
  %21 = load i32, i32* %flags, align 8, !dbg !10659
  %and = lshr i32 %21, 12, !dbg !10660
  %22 = trunc i32 %and to i8, !dbg !10661
  %23 = and i8 %22, 1, !dbg !10661
  %conv8 = or i8 %executable.0, %23, !dbg !10661
  call void @llvm.dbg.value(metadata i8 %conv8, metadata !10626, metadata !DIExpression()), !dbg !10642
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !10621, metadata !DIExpression(DW_OP_deref)), !dbg !10642
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !10657
  br label %for.cond3, !dbg !10657, !llvm.loop !10662

for.end:                                          ; preds = %for.cond3
  %executable.0.lcssa = phi i8 [ %executable.0, %for.cond3 ], !dbg !10642
  call void @llvm.dbg.value(metadata i8 %executable.0.lcssa, metadata !10626, metadata !DIExpression()), !dbg !10642
  call void @llvm.dbg.value(metadata i8 %executable.0.lcssa, metadata !10626, metadata !DIExpression()), !dbg !10642
  call void @llvm.dbg.value(metadata i8 %executable.0.lcssa, metadata !10626, metadata !DIExpression()), !dbg !10642
  %tobool9 = icmp eq i8 %executable.0.lcssa, 0, !dbg !10664
  br i1 %tobool9, label %cleanup44, label %if.end, !dbg !10666

if.end:                                           ; preds = %for.end
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8, !dbg !10667
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp10, %struct.basic_block_def* %bb.0) #7, !dbg !10667
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %11, i64 24, i1 false), !dbg !10667
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8, !dbg !10667
  br label %for.cond11, !dbg !10668

for.cond11:                                       ; preds = %cleanup, %if.end
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !10620, metadata !DIExpression(DW_OP_deref)), !dbg !10653
  %call12 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !10669
  %tobool13 = icmp eq i8 %call12, 0, !dbg !10670
  br i1 %tobool13, label %for.body16, label %cleanup44.loopexit, !dbg !10671

for.body16:                                       ; preds = %for.cond11
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !10620, metadata !DIExpression(DW_OP_deref)), !dbg !10653
  %call17 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !10672
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call17, metadata !10627, metadata !DIExpression()), !dbg !10648
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %12) #8, !dbg !10673
  %call18 = call fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %call17) #7, !dbg !10674
  %tobool19 = icmp eq i8 %call18, 0, !dbg !10674
  br i1 %tobool19, label %cleanup, label %if.end21, !dbg !10676

if.end21:                                         ; preds = %for.body16
  %call22 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %call17) #7, !dbg !10677
  %tobool23 = icmp eq i8 %call22, 0, !dbg !10677
  br i1 %tobool23, label %if.else, label %if.then24, !dbg !10678

if.then24:                                        ; preds = %if.end21
  %call25 = call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %call17) #7, !dbg !10679
  %conv26 = zext i32 %call25 to i64, !dbg !10679
  call void @llvm.dbg.value(metadata i64 %conv26, metadata !10635, metadata !DIExpression()), !dbg !10680
  call void @llvm.dbg.value(metadata i64 0, metadata !10632, metadata !DIExpression()), !dbg !10680
  br label %for.cond27, !dbg !10681

for.cond27:                                       ; preds = %for.body30, %if.then24
  %i.0 = phi i64 [ 0, %if.then24 ], [ %inc, %for.body30 ], !dbg !10682
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !10632, metadata !DIExpression()), !dbg !10680
  %exitcond = icmp eq i64 %i.0, %conv26, !dbg !10683
  br i1 %exitcond, label %cleanup.loopexit, label %for.body30, !dbg !10684

for.body30:                                       ; preds = %for.cond27
  %conv31 = trunc i64 %i.0 to i32, !dbg !10685
  %call32 = call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %call17, i32 %conv31) #7, !dbg !10686
  call void @llvm.dbg.value(metadata %union.tree_node* %call32, metadata !10636, metadata !DIExpression()), !dbg !10687
  %call33 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %call17) #7, !dbg !10688
  call fastcc void @search_for_addr_array(%union.tree_node* %call32, i32 %call33) #7, !dbg !10689
  %inc = add nuw nsw i64 %i.0, 1, !dbg !10690
  call void @llvm.dbg.value(metadata i64 %inc, metadata !10632, metadata !DIExpression()), !dbg !10680
  br label %for.cond27, !dbg !10691, !llvm.loop !10692

if.else:                                          ; preds = %if.end21
  %call36 = call i8* @memset(i8* nonnull %12, i32 0, i64 56) #6, !dbg !10694
  %call37 = call fastcc i32* @gimple_location_ptr(%union.gimple_statement_d* %call17) #7, !dbg !10695
  store i32* %call37, i32** %13, align 8, !dbg !10696
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !10620, metadata !DIExpression(DW_OP_deref)), !dbg !10653
  %call38 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !10697
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !10631, metadata !DIExpression(DW_OP_deref)), !dbg !10648
  %call39 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %call38, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @check_array_bounds, %struct.walk_stmt_info* nonnull %wi) #6, !dbg !10698
  br label %cleanup

cleanup.loopexit:                                 ; preds = %for.cond27
  br label %cleanup, !dbg !10699

cleanup:                                          ; preds = %cleanup.loopexit, %for.body16, %if.else
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %12) #8, !dbg !10699
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !10620, metadata !DIExpression(DW_OP_deref)), !dbg !10653
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !10700
  br label %for.cond11, !dbg !10701, !llvm.loop !10702

cleanup44.loopexit:                               ; preds = %for.cond11
  br label %cleanup44, !dbg !10704

cleanup44:                                        ; preds = %cleanup44.loopexit, %for.end
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8, !dbg !10704
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #8, !dbg !10704
  %.pre = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10651
  %cfg2.phi.trans.insert = getelementptr inbounds %struct.function, %struct.function* %.pre, i64 0, i32 1, !dbg !10705
  %.pre2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2.phi.trans.insert, align 8, !dbg !10651
  br label %for.cond, !dbg !10651, !llvm.loop !10706

for.end51:                                        ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !10708
  ret void, !dbg !10708
}

; Function Attrs: nounwind uwtable
define internal fastcc void @identify_jump_threads() unnamed_addr #5 !dbg !10709 {
entry:
  %e = alloca %struct.edge_def*, align 8
  %agg.tmp = alloca %struct.gimple_stmt_iterator, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_def** %e to i8*, !dbg !10722
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !10722
  tail call void @calculate_dominance_info(i32 1) #6, !dbg !10723
  %call = tail call zeroext i8 @mark_dfs_back_edges() #6, !dbg !10724
  call void @llvm.dbg.value(metadata i32 0, metadata !10713, metadata !DIExpression()), !dbg !10725
  br label %for.cond, !dbg !10726

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ], !dbg !10728
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !10713, metadata !DIExpression()), !dbg !10725
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !10729
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %1, i64 0, i32 0, !dbg !10729
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !10714, metadata !DIExpression(DW_OP_deref)), !dbg !10725
  %call1 = call fastcc i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %base, i32 %i.0, %struct.edge_def** nonnull %e) #7, !dbg !10729
  %tobool2 = icmp eq i32 %call1, 0, !dbg !10731
  br i1 %tobool2, label %for.end, label %for.body, !dbg !10731

for.body:                                         ; preds = %for.cond
  %2 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10732
  call void @llvm.dbg.value(metadata %struct.edge_def* %2, metadata !10714, metadata !DIExpression()), !dbg !10725
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i64 0, i32 7, !dbg !10733
  %3 = load i32, i32* %flags, align 8, !dbg !10734
  %or = or i32 %3, 32, !dbg !10734
  store i32 %or, i32* %flags, align 8, !dbg !10734
  %inc = add nuw nsw i32 %i.0, 1, !dbg !10735
  call void @llvm.dbg.value(metadata i32 %inc, metadata !10713, metadata !DIExpression()), !dbg !10725
  br label %for.cond, !dbg !10736, !llvm.loop !10737

for.end:                                          ; preds = %for.cond
  %call3 = call fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 20) #7, !dbg !10739
  store %struct.VEC_tree_heap* %call3, %struct.VEC_tree_heap** @stack, align 8, !dbg !10740
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !10741
  %call4 = call %union.gimple_statement_d* @gimple_build_cond(i32 101, %union.tree_node* %4, %union.tree_node* %4, %union.tree_node* null, %union.tree_node* null) #6, !dbg !10742
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call4, metadata !10712, metadata !DIExpression()), !dbg !10725
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10743
  %cfg = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, i32 1, !dbg !10743
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10743
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i64 0, i32 0, !dbg !10743
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10743
  %8 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10744
  %9 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10745
  %10 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 0, !dbg !10745
  %11 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 1, !dbg !10745
  %12 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !10747
  %13 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !10747
  br label %for.cond5, !dbg !10743

for.cond5:                                        ; preds = %cleanup, %for.end
  %14 = phi %struct.control_flow_graph* [ %6, %for.end ], [ %.pre9, %cleanup ], !dbg !10749
  %.pn = phi %struct.basic_block_def* [ %7, %for.end ], [ %bb.0, %cleanup ]
  %bb.0.in = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %.pn, i64 0, i32 6, !dbg !10750
  %bb.0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.0.in, align 8, !dbg !10750
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !10711, metadata !DIExpression()), !dbg !10725
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i64 0, i32 1, !dbg !10749
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10749
  %cmp = icmp eq %struct.basic_block_def* %bb.0, %15, !dbg !10749
  br i1 %cmp, label %for.end98, label %for.body8, !dbg !10743

for.body8:                                        ; preds = %for.cond5
  %call9 = call zeroext i8 @potentially_threadable_block(%struct.basic_block_def* %bb.0) #6, !dbg !10751
  %tobool10 = icmp eq i8 %call9, 0, !dbg !10751
  br i1 %tobool10, label %cleanup, label %if.end, !dbg !10753

if.end:                                           ; preds = %for.body8
  call fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* nonnull sret %agg.tmp, %struct.basic_block_def* %bb.0) #7, !dbg !10754
  %call11 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %agg.tmp) #7, !dbg !10755
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call11, metadata !10715, metadata !DIExpression()), !dbg !10756
  %call12 = call fastcc i32 @gimple_code(%union.gimple_statement_d* %call11) #7, !dbg !10757
  %cmp13 = icmp eq i32 %call12, 1, !dbg !10759
  br i1 %cmp13, label %if.end15, label %cleanup, !dbg !10760

if.end15:                                         ; preds = %if.end
  %call16 = call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %call11) #7, !dbg !10761
  %16 = getelementptr inbounds %union.tree_node, %union.tree_node* %call16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10761
  %bf.load = load i64, i64* %16, align 8, !dbg !10761
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !10762
  %cmp18 = icmp eq i64 %bf.cast1, 141, !dbg !10762
  br i1 %cmp18, label %land.lhs.true, label %cleanup, !dbg !10763

land.lhs.true:                                    ; preds = %if.end15
  %call19 = call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %call11) #7, !dbg !10764
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10764
  %17 = bitcast %union.tree_node** %type to i64**, !dbg !10764
  %18 = load i64*, i64** %17, align 8, !dbg !10764
  %bf.load21 = load i64, i64* %18, align 8, !dbg !10764
  %bf.cast232 = and i64 %bf.load21, 65535, !dbg !10764
  %cmp24 = icmp eq i64 %bf.cast232, 6, !dbg !10764
  br i1 %cmp24, label %land.lhs.true42, label %lor.lhs.false, !dbg !10764

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call25 = call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %call11) #7, !dbg !10764
  %type27 = getelementptr inbounds %union.tree_node, %union.tree_node* %call25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10764
  %19 = bitcast %union.tree_node** %type27 to i64**, !dbg !10764
  %20 = load i64*, i64** %19, align 8, !dbg !10764
  %bf.load29 = load i64, i64* %20, align 8, !dbg !10764
  %bf.cast313 = and i64 %bf.load29, 65535, !dbg !10764
  %cmp32 = icmp eq i64 %bf.cast313, 7, !dbg !10764
  br i1 %cmp32, label %land.lhs.true42, label %lor.lhs.false33, !dbg !10764

lor.lhs.false33:                                  ; preds = %lor.lhs.false
  %call34 = call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %call11) #7, !dbg !10764
  %type36 = getelementptr inbounds %union.tree_node, %union.tree_node* %call34, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10764
  %21 = bitcast %union.tree_node** %type36 to i64**, !dbg !10764
  %22 = load i64*, i64** %21, align 8, !dbg !10764
  %bf.load38 = load i64, i64* %22, align 8, !dbg !10764
  %bf.cast404 = and i64 %bf.load38, 65535, !dbg !10764
  %cmp41 = icmp eq i64 %bf.cast404, 8, !dbg !10764
  br i1 %cmp41, label %land.lhs.true42, label %cleanup, !dbg !10765

land.lhs.true42:                                  ; preds = %lor.lhs.false33, %lor.lhs.false, %land.lhs.true
  %call43 = call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %call11) #7, !dbg !10766
  %23 = getelementptr inbounds %union.tree_node, %union.tree_node* %call43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10766
  %bf.load45 = load i64, i64* %23, align 8, !dbg !10766
  %bf.cast475 = and i64 %bf.load45, 65535, !dbg !10767
  %cmp48 = icmp eq i64 %bf.cast475, 141, !dbg !10767
  br i1 %cmp48, label %land.lhs.true53, label %lor.lhs.false49, !dbg !10768

lor.lhs.false49:                                  ; preds = %land.lhs.true42
  %call50 = call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %call11) #7, !dbg !10769
  %call51 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call50) #6, !dbg !10770
  %tobool52 = icmp eq i8 %call51, 0, !dbg !10770
  br i1 %tobool52, label %cleanup, label %land.lhs.true53, !dbg !10771

land.lhs.true53:                                  ; preds = %lor.lhs.false49, %land.lhs.true42
  %call54 = call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %call11) #7, !dbg !10772
  %type56 = getelementptr inbounds %union.tree_node, %union.tree_node* %call54, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10772
  %24 = bitcast %union.tree_node** %type56 to i64**, !dbg !10772
  %25 = load i64*, i64** %24, align 8, !dbg !10772
  %bf.load58 = load i64, i64* %25, align 8, !dbg !10772
  %bf.cast606 = and i64 %bf.load58, 65535, !dbg !10772
  %cmp61 = icmp eq i64 %bf.cast606, 6, !dbg !10772
  br i1 %cmp61, label %if.then83, label %lor.lhs.false63, !dbg !10772

lor.lhs.false63:                                  ; preds = %land.lhs.true53
  %call64 = call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %call11) #7, !dbg !10772
  %type66 = getelementptr inbounds %union.tree_node, %union.tree_node* %call64, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10772
  %26 = bitcast %union.tree_node** %type66 to i64**, !dbg !10772
  %27 = load i64*, i64** %26, align 8, !dbg !10772
  %bf.load68 = load i64, i64* %27, align 8, !dbg !10772
  %bf.cast707 = and i64 %bf.load68, 65535, !dbg !10772
  %cmp71 = icmp eq i64 %bf.cast707, 7, !dbg !10772
  br i1 %cmp71, label %if.then83, label %lor.lhs.false73, !dbg !10772

lor.lhs.false73:                                  ; preds = %lor.lhs.false63
  %call74 = call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %call11) #7, !dbg !10772
  %type76 = getelementptr inbounds %union.tree_node, %union.tree_node* %call74, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10772
  %28 = bitcast %union.tree_node** %type76 to i64**, !dbg !10772
  %29 = load i64*, i64** %28, align 8, !dbg !10772
  %bf.load78 = load i64, i64* %29, align 8, !dbg !10772
  %bf.cast808 = and i64 %bf.load78, 65535, !dbg !10772
  %cmp81 = icmp eq i64 %bf.cast808, 8, !dbg !10772
  br i1 %cmp81, label %if.then83, label %cleanup, !dbg !10773

if.then83:                                        ; preds = %lor.lhs.false73, %lor.lhs.false63, %land.lhs.true53
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #8, !dbg !10774
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8, !dbg !10775
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb.0, i64 0, i32 0, !dbg !10775
  %call84 = call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds) #7, !dbg !10775
  %30 = extractvalue { i32, %struct.VEC_edge_gc** } %call84, 0, !dbg !10775
  store i32 %30, i32* %10, align 8, !dbg !10775
  %31 = extractvalue { i32, %struct.VEC_edge_gc** } %call84, 1, !dbg !10775
  store %struct.VEC_edge_gc** %31, %struct.VEC_edge_gc*** %11, align 8, !dbg !10775
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* nonnull align 8 %9, i64 16, i1 false), !dbg !10775
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8, !dbg !10775
  br label %for.cond85, !dbg !10775

for.cond85:                                       ; preds = %for.inc93, %if.then83
  %32 = load i32, i32* %12, align 8, !dbg !10776
  %33 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %13, align 8, !dbg !10776
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !10714, metadata !DIExpression(DW_OP_deref)), !dbg !10725
  %call86 = call fastcc zeroext i8 @ei_cond(i32 %32, %struct.VEC_edge_gc** %33, %struct.edge_def** nonnull %e) #7, !dbg !10776
  %tobool87 = icmp eq i8 %call86, 0, !dbg !10775
  br i1 %tobool87, label %for.end94, label %for.body88, !dbg !10775

for.body88:                                       ; preds = %for.cond85
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10777
  call void @llvm.dbg.value(metadata %struct.edge_def* %34, metadata !10714, metadata !DIExpression()), !dbg !10725
  %flags89 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i64 0, i32 7, !dbg !10780
  %35 = load i32, i32* %flags89, align 8, !dbg !10780
  %and = and i32 %35, 46, !dbg !10781
  %tobool90 = icmp eq i32 %and, 0, !dbg !10781
  br i1 %tobool90, label %if.end92, label %for.inc93, !dbg !10782

if.end92:                                         ; preds = %for.body88
  call void @llvm.dbg.value(metadata %struct.edge_def* %34, metadata !10714, metadata !DIExpression()), !dbg !10725
  call void @thread_across_edge(%union.gimple_statement_d* %call4, %struct.edge_def* %34, i8 zeroext 1, %struct.VEC_tree_heap** nonnull @stack, %union.tree_node* (%union.gimple_statement_d*, %union.gimple_statement_d*)* nonnull @simplify_stmt_for_jump_threading) #6, !dbg !10783
  br label %for.inc93, !dbg !10784

for.inc93:                                        ; preds = %for.body88, %if.end92
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !10719, metadata !DIExpression(DW_OP_deref)), !dbg !10744
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !10776
  br label %for.cond85, !dbg !10776, !llvm.loop !10785

for.end94:                                        ; preds = %for.cond85
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #8, !dbg !10787
  br label %cleanup, !dbg !10788

cleanup:                                          ; preds = %lor.lhs.false49, %if.end, %for.body8, %if.end15, %lor.lhs.false33, %lor.lhs.false73, %for.end94
  %.pre = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10749
  %cfg7.phi.trans.insert = getelementptr inbounds %struct.function, %struct.function* %.pre, i64 0, i32 1, !dbg !10789
  %.pre9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7.phi.trans.insert, align 8, !dbg !10749
  br label %for.cond5, !dbg !10749, !llvm.loop !10790

for.end98:                                        ; preds = %for.cond5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !10792
  ret void, !dbg !10792
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @fold_predicate_in(%struct.gimple_stmt_iterator* %si) unnamed_addr #5 !dbg !10793 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !10795, metadata !DIExpression()), !dbg !10799
  call void @llvm.dbg.value(metadata i8 0, metadata !10796, metadata !DIExpression()), !dbg !10799
  %call = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !10800
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !10798, metadata !DIExpression()), !dbg !10799
  %call1 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %call) #7, !dbg !10801
  %tobool = icmp eq i8 %call1, 0, !dbg !10801
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !10803

land.lhs.true:                                    ; preds = %entry
  %call2 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %call) #7, !dbg !10804
  %idxprom = sext i32 %call2 to i64, !dbg !10804
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10804
  %0 = load i32, i32* %arrayidx, align 4, !dbg !10804
  %cmp = icmp eq i32 %0, 5, !dbg !10805
  br i1 %cmp, label %if.then, label %if.else, !dbg !10806

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.value(metadata i8 1, metadata !10796, metadata !DIExpression()), !dbg !10799
  %call4 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %call) #7, !dbg !10807
  %call5 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10809
  %call6 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %call) #7, !dbg !10810
  %call7 = tail call fastcc %union.tree_node* @vrp_evaluate_conditional(i32 %call4, %union.tree_node* %call5, %union.tree_node* %call6, %union.gimple_statement_d* %call) #7, !dbg !10811
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !10797, metadata !DIExpression()), !dbg !10799
  br label %if.end17, !dbg !10812

if.else:                                          ; preds = %entry, %land.lhs.true
  %call8 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call) #7, !dbg !10813
  %cmp9 = icmp eq i32 %call8, 1, !dbg !10815
  br i1 %cmp9, label %if.then11, label %cleanup, !dbg !10816

if.then11:                                        ; preds = %if.else
  %call12 = tail call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %call) #7, !dbg !10817
  %call13 = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %call) #7, !dbg !10818
  %call14 = tail call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %call) #7, !dbg !10819
  %call15 = tail call fastcc %union.tree_node* @vrp_evaluate_conditional(i32 %call12, %union.tree_node* %call13, %union.tree_node* %call14, %union.gimple_statement_d* %call) #7, !dbg !10820
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !10797, metadata !DIExpression()), !dbg !10799
  br label %if.end17

if.end17:                                         ; preds = %if.then11, %if.then
  %val.0 = phi %union.tree_node* [ %call7, %if.then ], [ %call15, %if.then11 ], !dbg !10821
  %assignment_p.0 = phi i8 [ 1, %if.then ], [ 0, %if.then11 ], !dbg !10799
  call void @llvm.dbg.value(metadata i8 %assignment_p.0, metadata !10796, metadata !DIExpression()), !dbg !10799
  call void @llvm.dbg.value(metadata %union.tree_node* %val.0, metadata !10797, metadata !DIExpression()), !dbg !10799
  %tobool18 = icmp eq %union.tree_node* %val.0, null, !dbg !10822
  br i1 %tobool18, label %cleanup, label %if.then19, !dbg !10824

if.then19:                                        ; preds = %if.end17
  %tobool20 = icmp eq i8 %assignment_p.0, 0, !dbg !10825
  br i1 %tobool20, label %if.end24, label %if.then21, !dbg !10828

if.then21:                                        ; preds = %if.then19
  %call22 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %call) #7, !dbg !10829
  %call23 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call22, %union.tree_node* nonnull %val.0) #6, !dbg !10829
  call void @llvm.dbg.value(metadata %union.tree_node* %call23, metadata !10797, metadata !DIExpression()), !dbg !10799
  br label %if.end24, !dbg !10830

if.end24:                                         ; preds = %if.then19, %if.then21
  %val.1 = phi %union.tree_node* [ %call23, %if.then21 ], [ %val.0, %if.then19 ], !dbg !10799
  call void @llvm.dbg.value(metadata %union.tree_node* %val.1, metadata !10797, metadata !DIExpression()), !dbg !10799
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10831
  %tobool25 = icmp eq %struct._IO_FILE* %1, null, !dbg !10831
  br i1 %tobool25, label %if.end30, label %if.then26, !dbg !10833

if.then26:                                        ; preds = %if.end24
  %call27 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.54, i64 0, i64 0)) #6, !dbg !10834
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10836
  tail call void @print_gimple_expr(%struct._IO_FILE* %2, %union.gimple_statement_d* %call, i32 0, i32 0) #6, !dbg !10837
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10838
  %call28 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55, i64 0, i64 0)) #6, !dbg !10839
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10840
  tail call void @print_generic_expr(%struct._IO_FILE* %4, %union.tree_node* %val.1, i32 0) #6, !dbg !10841
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !10842
  %call29 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !10843
  br label %if.end30, !dbg !10844

if.end30:                                         ; preds = %if.end24, %if.then26
  %call31 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %call) #7, !dbg !10845
  %tobool32 = icmp eq i8 %call31, 0, !dbg !10845
  br i1 %tobool32, label %if.else34, label %if.then33, !dbg !10847

if.then33:                                        ; preds = %if.end30
  tail call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %si, %union.tree_node* %val.1) #6, !dbg !10848
  br label %cleanup, !dbg !10848

if.else34:                                        ; preds = %if.end30
  %call35 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call) #7, !dbg !10849
  %cmp36 = icmp eq i32 %call35, 1, !dbg !10849
  br i1 %cmp36, label %cond.end, label %cond.true, !dbg !10849

cond.true:                                        ; preds = %if.else34
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 7056, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !10849
  br label %cond.end, !dbg !10849

cond.end:                                         ; preds = %if.else34, %cond.true
  %call38 = tail call i32 @integer_zerop(%union.tree_node* %val.1) #6, !dbg !10851
  %tobool39 = icmp eq i32 %call38, 0, !dbg !10851
  br i1 %tobool39, label %if.else41, label %if.then40, !dbg !10853

if.then40:                                        ; preds = %cond.end
  tail call fastcc void @gimple_cond_make_false(%union.gimple_statement_d* %call) #7, !dbg !10854
  br label %cleanup, !dbg !10854

if.else41:                                        ; preds = %cond.end
  %call42 = tail call i32 @integer_onep(%union.tree_node* %val.1) #6, !dbg !10855
  %tobool43 = icmp eq i32 %call42, 0, !dbg !10855
  br i1 %tobool43, label %if.else45, label %if.then44, !dbg !10857

if.then44:                                        ; preds = %if.else41
  tail call fastcc void @gimple_cond_make_true(%union.gimple_statement_d* %call) #7, !dbg !10858
  br label %cleanup, !dbg !10858

if.else45:                                        ; preds = %if.else41
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 7062, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !10859
  br label %cleanup

cleanup:                                          ; preds = %if.end17, %if.then33, %if.then44, %if.else45, %if.then40, %if.else
  %retval.0 = phi i8 [ 0, %if.else ], [ 1, %if.then40 ], [ 1, %if.else45 ], [ 1, %if.then44 ], [ 1, %if.then33 ], [ 0, %if.end17 ], !dbg !10799
  ret i8 %retval.0, !dbg !10860
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @simplify_stmt_using_ranges(%struct.gimple_stmt_iterator* %gsi) unnamed_addr #5 !dbg !10861 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !10863, metadata !DIExpression()), !dbg !10868
  %call = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !10869
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !10864, metadata !DIExpression()), !dbg !10868
  %call1 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %call) #7, !dbg !10870
  %tobool = icmp eq i8 %call1, 0, !dbg !10870
  br i1 %tobool, label %if.else, label %if.then, !dbg !10871

if.then:                                          ; preds = %entry
  %call2 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %call) #7, !dbg !10872
  call void @llvm.dbg.value(metadata i32 %call2, metadata !10865, metadata !DIExpression()), !dbg !10873
  switch i32 %call2, label %cleanup [
    i32 101, label %sw.bb
    i32 102, label %sw.bb
    i32 96, label %sw.bb
    i32 93, label %sw.bb
    i32 94, label %sw.bb
    i32 95, label %sw.bb
    i32 67, label %sw.bb23
    i32 71, label %sw.bb23
    i32 82, label %sw.bb56
  ], !dbg !10874

sw.bb:                                            ; preds = %if.then, %if.then, %if.then, %if.then, %if.then, %if.then
  %call3 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10875
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10875
  %0 = bitcast %union.tree_node** %type to i64**, !dbg !10875
  %1 = load i64*, i64** %0, align 8, !dbg !10875
  %bf.load = load i64, i64* %1, align 8, !dbg !10875
  %bf.cast8 = and i64 %bf.load, 65535, !dbg !10875
  %cmp = icmp eq i64 %bf.cast8, 6, !dbg !10875
  br i1 %cmp, label %if.then21, label %lor.lhs.false, !dbg !10875

lor.lhs.false:                                    ; preds = %sw.bb
  %call4 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10875
  %type6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10875
  %2 = bitcast %union.tree_node** %type6 to i64**, !dbg !10875
  %3 = load i64*, i64** %2, align 8, !dbg !10875
  %bf.load8 = load i64, i64* %3, align 8, !dbg !10875
  %bf.cast109 = and i64 %bf.load8, 65535, !dbg !10875
  %cmp11 = icmp eq i64 %bf.cast109, 7, !dbg !10875
  br i1 %cmp11, label %if.then21, label %lor.lhs.false12, !dbg !10875

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %call13 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10875
  %type15 = getelementptr inbounds %union.tree_node, %union.tree_node* %call13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10875
  %4 = bitcast %union.tree_node** %type15 to i64**, !dbg !10875
  %5 = load i64*, i64** %4, align 8, !dbg !10875
  %bf.load17 = load i64, i64* %5, align 8, !dbg !10875
  %bf.cast1910 = and i64 %bf.load17, 65535, !dbg !10875
  %cmp20 = icmp eq i64 %bf.cast1910, 8, !dbg !10875
  br i1 %cmp20, label %if.then21, label %cleanup, !dbg !10878

if.then21:                                        ; preds = %lor.lhs.false12, %lor.lhs.false, %sw.bb
  %call22 = tail call fastcc zeroext i8 @simplify_truth_ops_using_ranges(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %call) #7, !dbg !10879
  br label %cleanup, !dbg !10880

sw.bb23:                                          ; preds = %if.then, %if.then
  %call24 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10881
  %type26 = getelementptr inbounds %union.tree_node, %union.tree_node* %call24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10881
  %6 = bitcast %union.tree_node** %type26 to i64**, !dbg !10881
  %7 = load i64*, i64** %6, align 8, !dbg !10881
  %bf.load28 = load i64, i64* %7, align 8, !dbg !10881
  %bf.cast305 = and i64 %bf.load28, 65535, !dbg !10881
  %cmp31 = icmp eq i64 %bf.cast305, 6, !dbg !10881
  br i1 %cmp31, label %land.lhs.true, label %lor.lhs.false32, !dbg !10881

lor.lhs.false32:                                  ; preds = %sw.bb23
  %call33 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10881
  %type35 = getelementptr inbounds %union.tree_node, %union.tree_node* %call33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10881
  %8 = bitcast %union.tree_node** %type35 to i64**, !dbg !10881
  %9 = load i64*, i64** %8, align 8, !dbg !10881
  %bf.load37 = load i64, i64* %9, align 8, !dbg !10881
  %bf.cast396 = and i64 %bf.load37, 65535, !dbg !10881
  %cmp40 = icmp eq i64 %bf.cast396, 7, !dbg !10881
  br i1 %cmp40, label %land.lhs.true, label %lor.lhs.false41, !dbg !10881

lor.lhs.false41:                                  ; preds = %lor.lhs.false32
  %call42 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10881
  %type44 = getelementptr inbounds %union.tree_node, %union.tree_node* %call42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10881
  %10 = bitcast %union.tree_node** %type44 to i64**, !dbg !10881
  %11 = load i64*, i64** %10, align 8, !dbg !10881
  %bf.load46 = load i64, i64* %11, align 8, !dbg !10881
  %bf.cast487 = and i64 %bf.load46, 65535, !dbg !10881
  %cmp49 = icmp eq i64 %bf.cast487, 8, !dbg !10881
  br i1 %cmp49, label %land.lhs.true, label %cleanup, !dbg !10883

land.lhs.true:                                    ; preds = %lor.lhs.false41, %lor.lhs.false32, %sw.bb23
  %call50 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %call) #7, !dbg !10884
  %call51 = tail call i32 @integer_pow2p(%union.tree_node* %call50) #6, !dbg !10885
  %tobool52 = icmp eq i32 %call51, 0, !dbg !10885
  br i1 %tobool52, label %cleanup, label %if.then53, !dbg !10886

if.then53:                                        ; preds = %land.lhs.true
  %call54 = tail call fastcc zeroext i8 @simplify_div_or_mod_using_ranges(%union.gimple_statement_d* %call) #7, !dbg !10887
  br label %cleanup, !dbg !10888

sw.bb56:                                          ; preds = %if.then
  %call57 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10889
  %12 = getelementptr inbounds %union.tree_node, %union.tree_node* %call57, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10889
  %bf.load59 = load i64, i64* %12, align 8, !dbg !10889
  %bf.cast611 = and i64 %bf.load59, 65535, !dbg !10891
  %cmp62 = icmp eq i64 %bf.cast611, 141, !dbg !10891
  br i1 %cmp62, label %land.lhs.true63, label %cleanup, !dbg !10892

land.lhs.true63:                                  ; preds = %sw.bb56
  %call64 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10893
  %type66 = getelementptr inbounds %union.tree_node, %union.tree_node* %call64, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10893
  %13 = bitcast %union.tree_node** %type66 to i64**, !dbg !10893
  %14 = load i64*, i64** %13, align 8, !dbg !10893
  %bf.load68 = load i64, i64* %14, align 8, !dbg !10893
  %bf.cast702 = and i64 %bf.load68, 65535, !dbg !10893
  %cmp71 = icmp eq i64 %bf.cast702, 6, !dbg !10893
  br i1 %cmp71, label %if.then90, label %lor.lhs.false72, !dbg !10893

lor.lhs.false72:                                  ; preds = %land.lhs.true63
  %call73 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10893
  %type75 = getelementptr inbounds %union.tree_node, %union.tree_node* %call73, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10893
  %15 = bitcast %union.tree_node** %type75 to i64**, !dbg !10893
  %16 = load i64*, i64** %15, align 8, !dbg !10893
  %bf.load77 = load i64, i64* %16, align 8, !dbg !10893
  %bf.cast793 = and i64 %bf.load77, 65535, !dbg !10893
  %cmp80 = icmp eq i64 %bf.cast793, 7, !dbg !10893
  br i1 %cmp80, label %if.then90, label %lor.lhs.false81, !dbg !10893

lor.lhs.false81:                                  ; preds = %lor.lhs.false72
  %call82 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #7, !dbg !10893
  %type84 = getelementptr inbounds %union.tree_node, %union.tree_node* %call82, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10893
  %17 = bitcast %union.tree_node** %type84 to i64**, !dbg !10893
  %18 = load i64*, i64** %17, align 8, !dbg !10893
  %bf.load86 = load i64, i64* %18, align 8, !dbg !10893
  %bf.cast884 = and i64 %bf.load86, 65535, !dbg !10893
  %cmp89 = icmp eq i64 %bf.cast884, 8, !dbg !10893
  br i1 %cmp89, label %if.then90, label %cleanup, !dbg !10894

if.then90:                                        ; preds = %lor.lhs.false81, %lor.lhs.false72, %land.lhs.true63
  %call91 = tail call fastcc zeroext i8 @simplify_abs_using_ranges(%union.gimple_statement_d* %call) #7, !dbg !10895
  br label %cleanup, !dbg !10896

cleanup:                                          ; preds = %land.lhs.true, %lor.lhs.false12, %lor.lhs.false41, %lor.lhs.false81, %sw.bb56, %if.then, %if.then90, %if.then53, %if.then21
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then90 ], [ false, %if.then53 ], [ false, %if.then21 ], [ true, %if.then ], [ true, %sw.bb56 ], [ true, %lor.lhs.false81 ], [ true, %lor.lhs.false41 ], [ true, %land.lhs.true ], [ true, %lor.lhs.false12 ]
  %retval.0 = phi i8 [ %call91, %if.then90 ], [ %call54, %if.then53 ], [ %call22, %if.then21 ], [ undef, %if.then ], [ undef, %sw.bb56 ], [ undef, %lor.lhs.false81 ], [ undef, %lor.lhs.false41 ], [ undef, %land.lhs.true ], [ undef, %lor.lhs.false12 ]
  br i1 %cleanup.dest.slot.0, label %if.end104, label %cleanup105

if.else:                                          ; preds = %entry
  %call93 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call) #7, !dbg !10897
  %cmp94 = icmp eq i32 %call93, 1, !dbg !10899
  br i1 %cmp94, label %if.then95, label %if.else97, !dbg !10900

if.then95:                                        ; preds = %if.else
  %call96 = tail call fastcc zeroext i8 @simplify_cond_using_ranges(%union.gimple_statement_d* %call) #7, !dbg !10901
  br label %cleanup105, !dbg !10902

if.else97:                                        ; preds = %if.else
  %call98 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call) #7, !dbg !10903
  %cmp99 = icmp eq i32 %call98, 5, !dbg !10905
  br i1 %cmp99, label %if.then100, label %if.end104, !dbg !10906

if.then100:                                       ; preds = %if.else97
  %call101 = tail call fastcc zeroext i8 @simplify_switch_using_ranges(%union.gimple_statement_d* %call) #7, !dbg !10907
  br label %cleanup105, !dbg !10908

if.end104:                                        ; preds = %if.else97, %cleanup
  br label %cleanup105, !dbg !10909

cleanup105:                                       ; preds = %cleanup, %if.end104, %if.then100, %if.then95
  %retval.1 = phi i8 [ %retval.0, %cleanup ], [ 0, %if.end104 ], [ %call96, %if.then95 ], [ 0, %if.then100 ]
  ret i8 %retval.1, !dbg !10910
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @vrp_evaluate_conditional(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, %union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !10911 {
entry:
  %sop = alloca i8, align 1
  %only_ranges = alloca i8, align 1
  call void @llvm.dbg.value(metadata i32 %code, metadata !10915, metadata !DIExpression()), !dbg !10936
  call void @llvm.dbg.value(metadata %union.tree_node* %op0, metadata !10916, metadata !DIExpression()), !dbg !10936
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !10917, metadata !DIExpression()), !dbg !10936
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !10918, metadata !DIExpression()), !dbg !10936
  call void @llvm.dbg.value(metadata i8* %sop, metadata !10919, metadata !DIExpression(DW_OP_deref)), !dbg !10936
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !10937
  call void @llvm.dbg.value(metadata i8* %only_ranges, metadata !10921, metadata !DIExpression(DW_OP_deref)), !dbg !10936
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %only_ranges) #8, !dbg !10938
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10939
  %bf.load = load i64, i64* %0, align 8, !dbg !10939
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !10941
  %cmp = icmp eq i64 %bf.cast2, 23, !dbg !10941
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !10942

land.lhs.true:                                    ; preds = %entry
  %bf.cast49 = and i64 %bf.load, 134217728, !dbg !10943
  %tobool = icmp eq i64 %bf.cast49, 0, !dbg !10943
  br i1 %tobool, label %lor.lhs.false, label %cleanup, !dbg !10944

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10945
  %bf.load6 = load i64, i64* %1, align 8, !dbg !10945
  %bf.cast83 = and i64 %bf.load6, 65535, !dbg !10946
  %cmp9 = icmp eq i64 %bf.cast83, 23, !dbg !10946
  br i1 %cmp9, label %land.lhs.true10, label %if.end, !dbg !10947

land.lhs.true10:                                  ; preds = %lor.lhs.false
  %bf.cast158 = and i64 %bf.load6, 134217728, !dbg !10948
  %tobool16 = icmp eq i64 %bf.cast158, 0, !dbg !10948
  br i1 %tobool16, label %if.end, label %cleanup, !dbg !10949

if.end:                                           ; preds = %land.lhs.true10, %lor.lhs.false
  call void @llvm.dbg.value(metadata i8 0, metadata !10919, metadata !DIExpression()), !dbg !10936
  store i8 0, i8* %sop, align 1, !dbg !10950
  call void @llvm.dbg.value(metadata i8* %sop, metadata !10919, metadata !DIExpression(DW_OP_deref)), !dbg !10936
  call void @llvm.dbg.value(metadata i8* %only_ranges, metadata !10921, metadata !DIExpression(DW_OP_deref)), !dbg !10936
  %call = call fastcc %union.tree_node* @vrp_evaluate_conditional_warnv_with_ops(i32 %code, %union.tree_node* %op0, %union.tree_node* %op1, i8 zeroext 1, i8* nonnull %sop, i8* nonnull %only_ranges) #7, !dbg !10951
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !10920, metadata !DIExpression()), !dbg !10936
  %tobool17 = icmp eq %union.tree_node* %call, null, !dbg !10952
  br i1 %tobool17, label %if.end36, label %land.lhs.true18, !dbg !10953

land.lhs.true18:                                  ; preds = %if.end
  %2 = load i8, i8* %sop, align 1, !dbg !10954
  call void @llvm.dbg.value(metadata i8 %2, metadata !10919, metadata !DIExpression()), !dbg !10936
  %tobool19 = icmp eq i8 %2, 0, !dbg !10954
  br i1 %tobool19, label %if.end36, label %if.then20, !dbg !10955

if.then20:                                        ; preds = %land.lhs.true18
  %call21 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %call) #6, !dbg !10956
  %tobool22 = icmp ne i8 %call21, 0, !dbg !10956
  %. = select i1 %tobool22, i32 2, i32 3
  %.1 = select i1 %tobool22, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.56, i64 0, i64 0), i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.57, i64 0, i64 0)
  call void @llvm.dbg.value(metadata i8* %.1, metadata !10925, metadata !DIExpression()), !dbg !10958
  call void @llvm.dbg.value(metadata i32 %., metadata !10922, metadata !DIExpression()), !dbg !10958
  %3 = load i32, i32* @warn_strict_overflow, align 4, !dbg !10959
  %cmp25 = icmp slt i32 %3, %., !dbg !10959
  br i1 %cmp25, label %if.end36, label %if.then27, !dbg !10960

if.then27:                                        ; preds = %if.then20
  %call28 = call fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %stmt) #7, !dbg !10961
  %tobool29 = icmp eq i8 %call28, 0, !dbg !10961
  br i1 %tobool29, label %if.then30, label %if.else31, !dbg !10963

if.then30:                                        ; preds = %if.then27
  %4 = load i32, i32* @input_location, align 4, !dbg !10964
  call void @llvm.dbg.value(metadata i32 %4, metadata !10926, metadata !DIExpression()), !dbg !10965
  br label %if.end33, !dbg !10966

if.else31:                                        ; preds = %if.then27
  %call32 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %stmt) #7, !dbg !10967
  call void @llvm.dbg.value(metadata i32 %call32, metadata !10926, metadata !DIExpression()), !dbg !10965
  br label %if.end33

if.end33:                                         ; preds = %if.else31, %if.then30
  %location.0 = phi i32 [ %call32, %if.else31 ], [ %4, %if.then30 ], !dbg !10968
  call void @llvm.dbg.value(metadata i32 %location.0, metadata !10926, metadata !DIExpression()), !dbg !10965
  %call34 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %location.0, i32 187, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.58, i64 0, i64 0), i8* %.1) #6, !dbg !10969
  br label %if.end36, !dbg !10970

if.end36:                                         ; preds = %if.then20, %land.lhs.true18, %if.end, %if.end33
  %5 = load i32, i32* @warn_type_limits, align 4, !dbg !10971
  %tobool37 = icmp ne i32 %5, 0, !dbg !10971
  %tobool39 = icmp ne %union.tree_node* %call, null, !dbg !10972
  %or.cond = and i1 %tobool37, %tobool39, !dbg !10973
  br i1 %or.cond, label %land.lhs.true40, label %cleanup, !dbg !10973

land.lhs.true40:                                  ; preds = %if.end36
  %6 = load i8, i8* %only_ranges, align 1, !dbg !10974
  call void @llvm.dbg.value(metadata i8 %6, metadata !10921, metadata !DIExpression()), !dbg !10936
  %tobool42 = icmp eq i8 %6, 0, !dbg !10974
  br i1 %tobool42, label %cleanup, label %land.lhs.true43, !dbg !10975

land.lhs.true43:                                  ; preds = %land.lhs.true40
  %idxprom = sext i32 %code to i64, !dbg !10976
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !10976
  %7 = load i32, i32* %arrayidx, align 4, !dbg !10976
  %cmp44 = icmp eq i32 %7, 5, !dbg !10977
  br i1 %cmp44, label %land.lhs.true46, label %cleanup, !dbg !10978

land.lhs.true46:                                  ; preds = %land.lhs.true43
  %bf.load48 = load i64, i64* %0, align 8, !dbg !10979
  %bf.cast504 = and i64 %bf.load48, 65535, !dbg !10980
  %cmp51 = icmp eq i64 %bf.cast504, 141, !dbg !10980
  br i1 %cmp51, label %if.then53, label %cleanup, !dbg !10981

if.then53:                                        ; preds = %land.lhs.true46
  %type54 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10982
  %8 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !10982
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !10929, metadata !DIExpression()), !dbg !10983
  %call55 = call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %op0) #7, !dbg !10984
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call55, metadata !10932, metadata !DIExpression()), !dbg !10983
  %type56 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call55, i64 0, i32 0, !dbg !10985
  %9 = load i32, i32* %type56, align 8, !dbg !10985
  %cmp57 = icmp eq i32 %9, 3, !dbg !10986
  br i1 %cmp57, label %cleanup, label %land.lhs.true59, !dbg !10987

land.lhs.true59:                                  ; preds = %if.then53
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10988
  %bf.load61 = load i64, i64* %10, align 8, !dbg !10988
  %bf.cast635 = and i64 %bf.load61, 65535, !dbg !10988
  %cmp64 = icmp eq i64 %bf.cast635, 6, !dbg !10988
  br i1 %cmp64, label %land.lhs.true80, label %lor.lhs.false66, !dbg !10988

lor.lhs.false66:                                  ; preds = %land.lhs.true59
  %cmp71 = icmp eq i64 %bf.cast635, 7, !dbg !10988
  br i1 %cmp71, label %land.lhs.true80, label %lor.lhs.false73, !dbg !10988

lor.lhs.false73:                                  ; preds = %lor.lhs.false66
  %cmp78 = icmp eq i64 %bf.cast635, 8, !dbg !10988
  br i1 %cmp78, label %land.lhs.true80, label %cleanup, !dbg !10989

land.lhs.true80:                                  ; preds = %lor.lhs.false73, %lor.lhs.false66, %land.lhs.true59
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call55, i64 0, i32 1, !dbg !10990
  %11 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !10990
  %call81 = call fastcc zeroext i8 @vrp_val_is_min(%union.tree_node* %11) #7, !dbg !10991
  %tobool83 = icmp eq i8 %call81, 0, !dbg !10991
  br i1 %tobool83, label %cleanup, label %land.lhs.true84, !dbg !10992

land.lhs.true84:                                  ; preds = %land.lhs.true80
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call55, i64 0, i32 2, !dbg !10993
  %12 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !10993
  %call85 = call fastcc zeroext i8 @vrp_val_is_max(%union.tree_node* %12) #7, !dbg !10994
  %tobool87 = icmp eq i8 %call85, 0, !dbg !10994
  br i1 %tobool87, label %cleanup, label %land.lhs.true88, !dbg !10995

land.lhs.true88:                                  ; preds = %land.lhs.true84
  %call89 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %op1) #6, !dbg !10996
  %tobool91 = icmp eq i8 %call89, 0, !dbg !10996
  br i1 %tobool91, label %cleanup, label %if.then92, !dbg !10997

if.then92:                                        ; preds = %land.lhs.true88
  %call94 = call fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %stmt) #7, !dbg !10998
  %tobool95 = icmp eq i8 %call94, 0, !dbg !10998
  br i1 %tobool95, label %if.then96, label %if.else97, !dbg !11000

if.then96:                                        ; preds = %if.then92
  %13 = load i32, i32* @input_location, align 4, !dbg !11001
  call void @llvm.dbg.value(metadata i32 %13, metadata !10933, metadata !DIExpression()), !dbg !11002
  br label %if.end99, !dbg !11003

if.else97:                                        ; preds = %if.then92
  %call98 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %stmt) #7, !dbg !11004
  call void @llvm.dbg.value(metadata i32 %call98, metadata !10933, metadata !DIExpression()), !dbg !11002
  br label %if.end99

if.end99:                                         ; preds = %if.else97, %if.then96
  %location93.0 = phi i32 [ %call98, %if.else97 ], [ %13, %if.then96 ], !dbg !11005
  call void @llvm.dbg.value(metadata i32 %location93.0, metadata !10933, metadata !DIExpression()), !dbg !11002
  %call100 = call i32 @integer_zerop(%union.tree_node* nonnull %call) #6, !dbg !11006
  %tobool101 = icmp eq i32 %call100, 0, !dbg !11006
  %cond = select i1 %tobool101, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.60, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.59, i64 0, i64 0), !dbg !11006
  %call102 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %location93.0, i32 206, i8* %cond) #6, !dbg !11007
  br label %cleanup, !dbg !11008

cleanup:                                          ; preds = %land.lhs.true, %land.lhs.true10, %land.lhs.true88, %land.lhs.true84, %land.lhs.true80, %if.then53, %land.lhs.true40, %if.end36, %land.lhs.true43, %land.lhs.true46, %if.end99, %lor.lhs.false73
  %retval.0 = phi %union.tree_node* [ null, %land.lhs.true10 ], [ null, %land.lhs.true ], [ %call, %if.then53 ], [ %call, %lor.lhs.false73 ], [ %call, %land.lhs.true80 ], [ %call, %land.lhs.true84 ], [ %call, %land.lhs.true88 ], [ %call, %if.end99 ], [ %call, %land.lhs.true46 ], [ %call, %land.lhs.true43 ], [ %call, %land.lhs.true40 ], [ %call, %if.end36 ], !dbg !10936
  call void @llvm.dbg.value(metadata i8* %only_ranges, metadata !10921, metadata !DIExpression(DW_OP_deref)), !dbg !10936
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %only_ranges) #8, !dbg !11009
  call void @llvm.dbg.value(metadata i8* %sop, metadata !10919, metadata !DIExpression(DW_OP_deref)), !dbg !10936
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !11009
  ret %union.tree_node* %retval.0, !dbg !11009
}

declare dso_local void @print_gimple_expr(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) local_unnamed_addr #2

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_make_false(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !11010 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !11014, metadata !DIExpression()), !dbg !11015
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !11016
  tail call fastcc void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %0) #7, !dbg !11017
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !11018
  tail call fastcc void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %1) #7, !dbg !11019
  %2 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !11020
  %bf.load = load i32, i32* %2, align 8, !dbg !11021
  %bf.clear = and i32 %bf.load, 65535, !dbg !11021
  %bf.set = or i32 %bf.clear, 6619136, !dbg !11021
  store i32 %bf.set, i32* %2, align 8, !dbg !11021
  ret void, !dbg !11022
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_make_true(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !11023 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !11025, metadata !DIExpression()), !dbg !11026
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !11027
  tail call fastcc void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %0) #7, !dbg !11028
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !11029
  tail call fastcc void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %1) #7, !dbg !11030
  %2 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !11031
  %bf.load = load i32, i32* %2, align 8, !dbg !11032
  %bf.clear = and i32 %bf.load, 65535, !dbg !11032
  %bf.set = or i32 %bf.clear, 6619136, !dbg !11032
  store i32 %bf.set, i32* %2, align 8, !dbg !11032
  ret void, !dbg !11033
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !11034 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !11036, metadata !DIExpression()), !dbg !11037
  %call = tail call fastcc i32 @gimple_location(%union.gimple_statement_d* %g) #7, !dbg !11038
  %cmp = icmp ne i32 %call, 0, !dbg !11039
  %conv1 = zext i1 %cmp to i8, !dbg !11038
  ret i8 %conv1, !dbg !11040
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_location(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !11041 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !11045, metadata !DIExpression()), !dbg !11046
  %location = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 2, !dbg !11047
  %0 = load i32, i32* %location, align 8, !dbg !11047
  ret i32 %0, !dbg !11048
}

declare dso_local zeroext i8 @warning_at(i32, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) unnamed_addr #0 !dbg !11049 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !11053, metadata !DIExpression()), !dbg !11055
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !11054, metadata !DIExpression()), !dbg !11055
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %lhs) #7, !dbg !11056
  ret void, !dbg !11057
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !11058 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !11060, metadata !DIExpression()), !dbg !11062
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !11061, metadata !DIExpression()), !dbg !11062
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 1, %union.tree_node* %rhs) #7, !dbg !11063
  ret void, !dbg !11064
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) unnamed_addr #0 !dbg !11065 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !11067, metadata !DIExpression()), !dbg !11070
  call void @llvm.dbg.value(metadata i32 %i, metadata !11068, metadata !DIExpression()), !dbg !11070
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !11069, metadata !DIExpression()), !dbg !11070
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #7, !dbg !11071
  %tobool = icmp eq i8 %call, 0, !dbg !11071
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !11071

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !11071
  %cmp = icmp ugt i32 %call1, %i, !dbg !11071
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !11071

cond.true:                                        ; preds = %entry, %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !11071
  br label %cond.end, !dbg !11071

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %call3 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #7, !dbg !11072
  %idxprom = zext i32 %i to i64, !dbg !11072
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !11072
  store %union.tree_node* %op, %union.tree_node** %arrayidx, align 8, !dbg !11073
  ret void, !dbg !11074
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @simplify_truth_ops_using_ranges(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !11075 {
entry:
  %sop = alloca i8, align 1
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !11079, metadata !DIExpression()), !dbg !11091
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !11080, metadata !DIExpression()), !dbg !11091
  %call = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !11092
  call void @llvm.dbg.value(metadata i32 %call, metadata !11081, metadata !DIExpression()), !dbg !11091
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !11082, metadata !DIExpression()), !dbg !11091
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11086, metadata !DIExpression(DW_OP_deref)), !dbg !11091
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !11093
  call void @llvm.dbg.value(metadata i8 0, metadata !11086, metadata !DIExpression()), !dbg !11091
  store i8 0, i8* %sop, align 1, !dbg !11094
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !11095
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !11083, metadata !DIExpression()), !dbg !11091
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11096
  %0 = bitcast %union.tree_node** %type to %struct.tree_type**, !dbg !11096
  %1 = load %struct.tree_type*, %struct.tree_type** %0, align 8, !dbg !11096
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1, i64 0, i32 6, !dbg !11096
  %bf.load = load i32, i32* %precision, align 4, !dbg !11096
  %bf.clear = and i32 %bf.load, 1023, !dbg !11096
  %cmp = icmp eq i32 %bf.clear, 1, !dbg !11098
  br i1 %cmp, label %if.end20, label %if.then, !dbg !11099

if.then:                                          ; preds = %entry
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11100
  %bf.load3 = load i64, i64* %2, align 8, !dbg !11100
  %bf.cast2 = and i64 %bf.load3, 65535, !dbg !11103
  %cmp5 = icmp eq i64 %bf.cast2, 141, !dbg !11103
  br i1 %cmp5, label %if.end, label %cleanup, !dbg !11104

if.end:                                           ; preds = %if.then
  %call7 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call1) #7, !dbg !11105
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call7, metadata !11085, metadata !DIExpression()), !dbg !11091
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11106
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11086, metadata !DIExpression(DW_OP_deref)), !dbg !11091
  %call8 = call fastcc %union.tree_node* @compare_range_with_value(i32 100, %struct.value_range_d* %call7, %union.tree_node* %3, i8* nonnull %sop) #7, !dbg !11107
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !11082, metadata !DIExpression()), !dbg !11091
  %tobool = icmp eq %union.tree_node* %call8, null, !dbg !11108
  br i1 %tobool, label %cleanup, label %lor.lhs.false, !dbg !11110

lor.lhs.false:                                    ; preds = %if.end
  %call9 = call i32 @integer_onep(%union.tree_node* nonnull %call8) #6, !dbg !11111
  %tobool10 = icmp eq i32 %call9, 0, !dbg !11111
  br i1 %tobool10, label %cleanup, label %if.end12, !dbg !11112

if.end12:                                         ; preds = %lor.lhs.false
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !11113
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11086, metadata !DIExpression(DW_OP_deref)), !dbg !11091
  %call13 = call fastcc %union.tree_node* @compare_range_with_value(i32 98, %struct.value_range_d* %call7, %union.tree_node* %4, i8* nonnull %sop) #7, !dbg !11114
  call void @llvm.dbg.value(metadata %union.tree_node* %call13, metadata !11082, metadata !DIExpression()), !dbg !11091
  %tobool14 = icmp eq %union.tree_node* %call13, null, !dbg !11115
  br i1 %tobool14, label %cleanup, label %lor.lhs.false15, !dbg !11117

lor.lhs.false15:                                  ; preds = %if.end12
  %call16 = call i32 @integer_onep(%union.tree_node* nonnull %call13) #6, !dbg !11118
  %tobool17 = icmp eq i32 %call16, 0, !dbg !11118
  br i1 %tobool17, label %cleanup, label %if.end20, !dbg !11119

if.end20:                                         ; preds = %lor.lhs.false15, %entry
  %cmp21 = icmp eq i32 %call, 96, !dbg !11120
  br i1 %cmp21, label %if.then22, label %if.else, !dbg !11122

if.then22:                                        ; preds = %if.end20
  call void @llvm.dbg.value(metadata i32 102, metadata !11081, metadata !DIExpression()), !dbg !11091
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11123
  %call25 = call %union.tree_node* @build_int_cst(%union.tree_node* %5, i64 1) #6, !dbg !11125
  call void @llvm.dbg.value(metadata %union.tree_node* %call25, metadata !11084, metadata !DIExpression()), !dbg !11091
  br label %if.end81, !dbg !11126

if.else:                                          ; preds = %if.end20
  %call26 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #7, !dbg !11127
  call void @llvm.dbg.value(metadata %union.tree_node* %call26, metadata !11084, metadata !DIExpression()), !dbg !11091
  %call27 = call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call26) #6, !dbg !11129
  %tobool28 = icmp eq i8 %call27, 0, !dbg !11129
  br i1 %tobool28, label %if.else52, label %if.then29, !dbg !11131

if.then29:                                        ; preds = %if.else
  switch i32 %call, label %cleanup [
    i32 101, label %if.end35
    i32 102, label %if.end35
    i32 95, label %if.end35
  ], !dbg !11132

if.end35:                                         ; preds = %if.then29, %if.then29, %if.then29
  %call36 = call i32 @integer_zerop(%union.tree_node* %call26) #6, !dbg !11135
  %tobool37 = icmp eq i32 %call36, 0, !dbg !11135
  br i1 %tobool37, label %land.lhs.true38, label %if.end45, !dbg !11137

land.lhs.true38:                                  ; preds = %if.end35
  %call39 = call i32 @integer_onep(%union.tree_node* %call26) #6, !dbg !11138
  %tobool40 = icmp eq i32 %call39, 0, !dbg !11138
  br i1 %tobool40, label %land.lhs.true41, label %if.end45, !dbg !11139

land.lhs.true41:                                  ; preds = %land.lhs.true38
  %call42 = call i32 @integer_all_onesp(%union.tree_node* %call26) #6, !dbg !11140
  %tobool43 = icmp eq i32 %call42, 0, !dbg !11140
  br i1 %tobool43, label %cleanup, label %if.end45, !dbg !11141

if.end45:                                         ; preds = %land.lhs.true41, %land.lhs.true38, %if.end35
  %cmp46 = icmp eq i32 %call, 101, !dbg !11142
  br i1 %cmp46, label %if.then47, label %if.end81, !dbg !11144

if.then47:                                        ; preds = %if.end45
  call void @llvm.dbg.value(metadata i32 102, metadata !11081, metadata !DIExpression()), !dbg !11091
  %type49 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11145
  %6 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !11145
  %call50 = call %union.tree_node* @fold_unary_loc(i32 0, i32 96, %union.tree_node* %6, %union.tree_node* %call26) #6, !dbg !11145
  call void @llvm.dbg.value(metadata %union.tree_node* %call50, metadata !11084, metadata !DIExpression()), !dbg !11091
  br label %if.end81, !dbg !11147

if.else52:                                        ; preds = %if.else
  %cmp53 = icmp eq i32 %call, 101, !dbg !11148
  br i1 %cmp53, label %cleanup, label %if.end55, !dbg !11151

if.end55:                                         ; preds = %if.else52
  %type57 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11152
  %7 = bitcast %union.tree_node** %type57 to %struct.tree_type**, !dbg !11152
  %8 = load %struct.tree_type*, %struct.tree_type** %7, align 8, !dbg !11152
  %precision59 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %8, i64 0, i32 6, !dbg !11152
  %bf.load60 = load i32, i32* %precision59, align 4, !dbg !11152
  %bf.clear61 = and i32 %bf.load60, 1023, !dbg !11152
  %cmp62 = icmp eq i32 %bf.clear61, 1, !dbg !11154
  br i1 %cmp62, label %if.end81, label %if.then63, !dbg !11155

if.then63:                                        ; preds = %if.end55
  %call64 = call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call26) #7, !dbg !11156
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call64, metadata !11085, metadata !DIExpression()), !dbg !11091
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11158
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11086, metadata !DIExpression(DW_OP_deref)), !dbg !11091
  %call65 = call fastcc %union.tree_node* @compare_range_with_value(i32 100, %struct.value_range_d* %call64, %union.tree_node* %9, i8* nonnull %sop) #7, !dbg !11159
  call void @llvm.dbg.value(metadata %union.tree_node* %call65, metadata !11082, metadata !DIExpression()), !dbg !11091
  %tobool66 = icmp eq %union.tree_node* %call65, null, !dbg !11160
  br i1 %tobool66, label %cleanup, label %lor.lhs.false67, !dbg !11162

lor.lhs.false67:                                  ; preds = %if.then63
  %call68 = call i32 @integer_onep(%union.tree_node* nonnull %call65) #6, !dbg !11163
  %tobool69 = icmp eq i32 %call68, 0, !dbg !11163
  br i1 %tobool69, label %cleanup, label %if.end71, !dbg !11164

if.end71:                                         ; preds = %lor.lhs.false67
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !11165
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11086, metadata !DIExpression(DW_OP_deref)), !dbg !11091
  %call72 = call fastcc %union.tree_node* @compare_range_with_value(i32 98, %struct.value_range_d* %call64, %union.tree_node* %10, i8* nonnull %sop) #7, !dbg !11166
  call void @llvm.dbg.value(metadata %union.tree_node* %call72, metadata !11082, metadata !DIExpression()), !dbg !11091
  %tobool73 = icmp eq %union.tree_node* %call72, null, !dbg !11167
  br i1 %tobool73, label %cleanup, label %lor.lhs.false74, !dbg !11169

lor.lhs.false74:                                  ; preds = %if.end71
  %call75 = call i32 @integer_onep(%union.tree_node* nonnull %call72) #6, !dbg !11170
  %tobool76 = icmp eq i32 %call75, 0, !dbg !11170
  br i1 %tobool76, label %cleanup, label %if.end81, !dbg !11171

if.end81:                                         ; preds = %lor.lhs.false74, %if.end55, %if.then47, %if.end45, %if.then22
  %op1.2 = phi %union.tree_node* [ %call25, %if.then22 ], [ %call50, %if.then47 ], [ %call26, %if.end45 ], [ %call26, %lor.lhs.false74 ], [ %call26, %if.end55 ], !dbg !11172
  %rhs_code.2 = phi i32 [ 102, %if.then22 ], [ 102, %if.then47 ], [ %call, %if.end45 ], [ %call, %lor.lhs.false74 ], [ %call, %if.end55 ], !dbg !11172
  call void @llvm.dbg.value(metadata i32 %rhs_code.2, metadata !11081, metadata !DIExpression()), !dbg !11091
  call void @llvm.dbg.value(metadata %union.tree_node* %op1.2, metadata !11084, metadata !DIExpression()), !dbg !11091
  %11 = load i8, i8* %sop, align 1, !dbg !11173
  call void @llvm.dbg.value(metadata i8 %11, metadata !11086, metadata !DIExpression()), !dbg !11091
  %tobool82 = icmp ne i8 %11, 0, !dbg !11173
  %12 = load i32, i32* @warn_strict_overflow, align 4, !dbg !11174
  %cmp84 = icmp sgt i32 %12, 3, !dbg !11174
  %or.cond = and i1 %tobool82, %cmp84, !dbg !11175
  br i1 %or.cond, label %if.then86, label %if.end103, !dbg !11175

if.then86:                                        ; preds = %if.end81
  %call87 = call fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %stmt) #7, !dbg !11176
  %tobool88 = icmp eq i8 %call87, 0, !dbg !11176
  br i1 %tobool88, label %if.then89, label %if.else90, !dbg !11178

if.then89:                                        ; preds = %if.then86
  %13 = load i32, i32* @input_location, align 4, !dbg !11179
  call void @llvm.dbg.value(metadata i32 %13, metadata !11088, metadata !DIExpression()), !dbg !11180
  br label %if.end92, !dbg !11181

if.else90:                                        ; preds = %if.then86
  %call91 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %stmt) #7, !dbg !11182
  call void @llvm.dbg.value(metadata i32 %call91, metadata !11088, metadata !DIExpression()), !dbg !11180
  br label %if.end92

if.end92:                                         ; preds = %if.else90, %if.then89
  %location.0 = phi i32 [ %call91, %if.else90 ], [ %13, %if.then89 ], !dbg !11183
  call void @llvm.dbg.value(metadata i32 %location.0, metadata !11088, metadata !DIExpression()), !dbg !11180
  %rhs_code.2.off = add i32 %rhs_code.2, -93, !dbg !11184
  %switch = icmp ult i32 %rhs_code.2.off, 2, !dbg !11184
  br i1 %switch, label %if.then98, label %if.else100, !dbg !11184

if.then98:                                        ; preds = %if.end92
  %call99 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %location.0, i32 187, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.61, i64 0, i64 0)) #6, !dbg !11186
  br label %if.end103, !dbg !11186

if.else100:                                       ; preds = %if.end92
  %call101 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %location.0, i32 187, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.62, i64 0, i64 0)) #6, !dbg !11187
  br label %if.end103

if.end103:                                        ; preds = %if.then98, %if.else100, %if.end81
  %call104 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !11188
  %type106 = getelementptr inbounds %union.tree_node, %union.tree_node* %call104, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11188
  %14 = load %union.tree_node*, %union.tree_node** %type106, align 8, !dbg !11188
  %15 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11189
  %call109 = call zeroext i8 @useless_type_conversion_p(%union.tree_node* %14, %union.tree_node* %15) #6, !dbg !11190
  %tobool110 = icmp eq i8 %call109, 0, !dbg !11191
  call void @llvm.dbg.value(metadata i1 %tobool110, metadata !11087, metadata !DIExpression()), !dbg !11091
  br i1 %tobool110, label %land.lhs.true114, label %if.end132, !dbg !11192

land.lhs.true114:                                 ; preds = %if.end103
  %16 = bitcast %union.tree_node** %type to i64**, !dbg !11194
  %17 = load i64*, i64** %16, align 8, !dbg !11194
  %bf.load118 = load i64, i64* %17, align 8, !dbg !11194
  %bf.cast1201 = and i64 %bf.load118, 2097152, !dbg !11194
  %tobool121 = icmp eq i64 %bf.cast1201, 0, !dbg !11194
  br i1 %tobool121, label %land.lhs.true122, label %if.end132, !dbg !11195

land.lhs.true122:                                 ; preds = %land.lhs.true114
  %18 = bitcast i64* %17 to %struct.tree_type*, !dbg !11195
  %precision126 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %18, i64 0, i32 6, !dbg !11196
  %bf.load127 = load i32, i32* %precision126, align 4, !dbg !11196
  %bf.clear128 = and i32 %bf.load127, 1023, !dbg !11196
  %cmp129 = icmp eq i32 %bf.clear128, 1, !dbg !11197
  br i1 %cmp129, label %cleanup, label %if.end132, !dbg !11198

if.end132:                                        ; preds = %land.lhs.true114, %land.lhs.true122, %if.end103
  switch i32 %rhs_code.2, label %sw.default [
    i32 93, label %sw.epilog
    i32 94, label %sw.bb133
    i32 95, label %sw.bb134
    i32 102, label %sw.bb134
  ], !dbg !11199

sw.bb133:                                         ; preds = %if.end132
  call void @llvm.dbg.value(metadata i32 87, metadata !11081, metadata !DIExpression()), !dbg !11091
  br label %sw.epilog, !dbg !11200

sw.bb134:                                         ; preds = %if.end132, %if.end132
  %call135 = call i32 @integer_zerop(%union.tree_node* %op1.2) #6, !dbg !11202
  %tobool136 = icmp eq i32 %call135, 0, !dbg !11202
  br i1 %tobool136, label %sw.epilog, label %if.then137, !dbg !11204

if.then137:                                       ; preds = %sw.bb134
  %cond = select i1 %tobool110, i32 116, i32 141, !dbg !11205
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %gsi, i32 %cond, %union.tree_node* %call1, %union.tree_node* null) #6, !dbg !11207
  %call140 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !11208
  call fastcc void @update_stmt(%union.gimple_statement_d* %call140) #7, !dbg !11209
  br label %cleanup, !dbg !11210

sw.default:                                       ; preds = %if.end132
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0), i32 6568, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !11211
  br label %sw.epilog, !dbg !11212

sw.epilog:                                        ; preds = %sw.bb134, %if.end132, %sw.default, %sw.bb133
  %rhs_code.3 = phi i32 [ %rhs_code.2, %sw.default ], [ 87, %sw.bb133 ], [ 89, %if.end132 ], [ 88, %sw.bb134 ], !dbg !11091
  call void @llvm.dbg.value(metadata i32 %rhs_code.3, metadata !11081, metadata !DIExpression()), !dbg !11091
  br i1 %tobool110, label %cleanup, label %if.end144, !dbg !11213

if.end144:                                        ; preds = %sw.epilog
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %gsi, i32 %rhs_code.3, %union.tree_node* %call1, %union.tree_node* %op1.2) #6, !dbg !11214
  %call145 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !11215
  call fastcc void @update_stmt(%union.gimple_statement_d* %call145) #7, !dbg !11216
  br label %cleanup, !dbg !11217

cleanup:                                          ; preds = %lor.lhs.false15, %if.end12, %lor.lhs.false, %if.end, %if.then, %land.lhs.true41, %lor.lhs.false74, %if.end71, %lor.lhs.false67, %if.then63, %sw.epilog, %land.lhs.true122, %if.else52, %if.then29, %if.end144, %if.then137
  %retval.0 = phi i8 [ 1, %if.end144 ], [ 1, %if.then137 ], [ 0, %if.then ], [ 0, %lor.lhs.false ], [ 0, %if.end ], [ 0, %lor.lhs.false15 ], [ 0, %if.end12 ], [ 0, %if.then29 ], [ 0, %land.lhs.true41 ], [ 0, %if.else52 ], [ 0, %lor.lhs.false67 ], [ 0, %if.then63 ], [ 0, %lor.lhs.false74 ], [ 0, %if.end71 ], [ 0, %land.lhs.true122 ], [ 0, %sw.epilog ], !dbg !11091
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11086, metadata !DIExpression(DW_OP_deref)), !dbg !11091
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !11218
  ret i8 %retval.0, !dbg !11218
}

declare dso_local i32 @integer_pow2p(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @simplify_div_or_mod_using_ranges(%union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !11219 {
entry:
  %sop = alloca i8, align 1
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !11221, metadata !DIExpression()), !dbg !11236
  %call = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !11237
  call void @llvm.dbg.value(metadata i32 %call, metadata !11222, metadata !DIExpression()), !dbg !11236
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !11223, metadata !DIExpression()), !dbg !11236
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !11238
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !11224, metadata !DIExpression()), !dbg !11236
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #7, !dbg !11239
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !11225, metadata !DIExpression()), !dbg !11236
  %call3 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !11240
  %call4 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call3) #7, !dbg !11241
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call4, metadata !11226, metadata !DIExpression()), !dbg !11236
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11242
  %0 = bitcast %union.tree_node** %type to i64**, !dbg !11242
  %1 = load i64*, i64** %0, align 8, !dbg !11242
  %bf.load = load i64, i64* %1, align 8, !dbg !11242
  %bf.cast1 = and i64 %bf.load, 2097152, !dbg !11242
  %tobool = icmp eq i64 %bf.cast1, 0, !dbg !11242
  br i1 %tobool, label %if.else, label %if.then, !dbg !11243

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !11244
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !11223, metadata !DIExpression()), !dbg !11236
  br label %if.end21, !dbg !11246

if.else:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11227, metadata !DIExpression(DW_OP_deref)), !dbg !11247
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !11248
  call void @llvm.dbg.value(metadata i8 0, metadata !11227, metadata !DIExpression()), !dbg !11247
  store i8 0, i8* %sop, align 1, !dbg !11249
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11250
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11227, metadata !DIExpression(DW_OP_deref)), !dbg !11247
  %call5 = call fastcc %union.tree_node* @compare_range_with_value(i32 100, %struct.value_range_d* %call4, %union.tree_node* %3, i8* nonnull %sop) #7, !dbg !11251
  call void @llvm.dbg.value(metadata %union.tree_node* %call5, metadata !11223, metadata !DIExpression()), !dbg !11236
  %tobool6 = icmp eq %union.tree_node* %call5, null, !dbg !11252
  br i1 %tobool6, label %if.end20, label %land.lhs.true, !dbg !11253

land.lhs.true:                                    ; preds = %if.else
  %4 = load i8, i8* %sop, align 1, !dbg !11254
  call void @llvm.dbg.value(metadata i8 %4, metadata !11227, metadata !DIExpression()), !dbg !11247
  %tobool7 = icmp eq i8 %4, 0, !dbg !11254
  br i1 %tobool7, label %if.end20, label %land.lhs.true8, !dbg !11255

land.lhs.true8:                                   ; preds = %land.lhs.true
  %call9 = call i32 @integer_onep(%union.tree_node* nonnull %call5) #6, !dbg !11256
  %tobool10 = icmp ne i32 %call9, 0, !dbg !11256
  %5 = load i32, i32* @warn_strict_overflow, align 4, !dbg !11257
  %cmp = icmp sgt i32 %5, 3, !dbg !11257
  %or.cond = and i1 %tobool10, %cmp, !dbg !11258
  br i1 %or.cond, label %if.then13, label %if.end20, !dbg !11258

if.then13:                                        ; preds = %land.lhs.true8
  %call14 = call fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %stmt) #7, !dbg !11259
  %tobool15 = icmp eq i8 %call14, 0, !dbg !11259
  br i1 %tobool15, label %if.then16, label %if.else17, !dbg !11261

if.then16:                                        ; preds = %if.then13
  %6 = load i32, i32* @input_location, align 4, !dbg !11262
  call void @llvm.dbg.value(metadata i32 %6, metadata !11230, metadata !DIExpression()), !dbg !11263
  br label %if.end, !dbg !11264

if.else17:                                        ; preds = %if.then13
  %call18 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %stmt) #7, !dbg !11265
  call void @llvm.dbg.value(metadata i32 %call18, metadata !11230, metadata !DIExpression()), !dbg !11263
  br label %if.end

if.end:                                           ; preds = %if.else17, %if.then16
  %location.0 = phi i32 [ %call18, %if.else17 ], [ %6, %if.then16 ], !dbg !11266
  call void @llvm.dbg.value(metadata i32 %location.0, metadata !11230, metadata !DIExpression()), !dbg !11263
  %call19 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %location.0, i32 187, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.63, i64 0, i64 0)) #6, !dbg !11267
  br label %if.end20, !dbg !11268

if.end20:                                         ; preds = %land.lhs.true, %if.else, %if.end, %land.lhs.true8
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11227, metadata !DIExpression(DW_OP_deref)), !dbg !11247
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !11269
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then
  %val.0 = phi %union.tree_node* [ %2, %if.then ], [ %call5, %if.end20 ], !dbg !11270
  call void @llvm.dbg.value(metadata %union.tree_node* %val.0, metadata !11223, metadata !DIExpression()), !dbg !11236
  %tobool22 = icmp eq %union.tree_node* %val.0, null, !dbg !11271
  br i1 %tobool22, label %cleanup, label %land.lhs.true23, !dbg !11272

land.lhs.true23:                                  ; preds = %if.end21
  %call24 = call i32 @integer_onep(%union.tree_node* nonnull %val.0) #6, !dbg !11273
  %tobool25 = icmp eq i32 %call24, 0, !dbg !11273
  br i1 %tobool25, label %cleanup, label %if.then26, !dbg !11274

if.then26:                                        ; preds = %land.lhs.true23
  %cmp27 = icmp eq i32 %call, 67, !dbg !11275
  br i1 %cmp27, label %if.then29, label %if.else33, !dbg !11277

if.then29:                                        ; preds = %if.then26
  %call30 = call i32 @tree_log2(%union.tree_node* %call2) #6, !dbg !11278
  %conv31 = sext i32 %call30 to i64, !dbg !11278
  %call32 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv31) #6, !dbg !11280
  call void @llvm.dbg.value(metadata %union.tree_node* %call32, metadata !11233, metadata !DIExpression()), !dbg !11281
  call fastcc void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %stmt, i32 84) #7, !dbg !11282
  call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %stmt, %union.tree_node* %call1) #7, !dbg !11283
  call fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %stmt, %union.tree_node* %call32) #7, !dbg !11284
  br label %if.end41, !dbg !11285

if.else33:                                        ; preds = %if.then26
  %type35 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11286
  %7 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !11286
  %call36 = call %union.tree_node* @build_int_cst(%union.tree_node* %7, i64 1) #6, !dbg !11288
  call void @llvm.dbg.value(metadata %union.tree_node* %call36, metadata !11233, metadata !DIExpression()), !dbg !11281
  %call37 = call %union.tree_node* @int_const_binop(i32 64, %union.tree_node* %call2, %union.tree_node* %call36, i32 0) #6, !dbg !11289
  call void @llvm.dbg.value(metadata %union.tree_node* %call37, metadata !11233, metadata !DIExpression()), !dbg !11281
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11290
  %call40 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %8, %union.tree_node* %call37) #6, !dbg !11290
  call void @llvm.dbg.value(metadata %union.tree_node* %call40, metadata !11233, metadata !DIExpression()), !dbg !11281
  call fastcc void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %stmt, i32 89) #7, !dbg !11291
  call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %stmt, %union.tree_node* %call1) #7, !dbg !11292
  call fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %stmt, %union.tree_node* %call40) #7, !dbg !11293
  br label %if.end41

if.end41:                                         ; preds = %if.else33, %if.then29
  call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #7, !dbg !11294
  br label %cleanup

cleanup:                                          ; preds = %land.lhs.true23, %if.end21, %if.end41
  %retval.0 = phi i8 [ 1, %if.end41 ], [ 0, %land.lhs.true23 ], [ 0, %if.end21 ], !dbg !11236
  ret i8 %retval.0, !dbg !11295
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @simplify_abs_using_ranges(%union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !11296 {
entry:
  %sop = alloca i8, align 1
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !11298, metadata !DIExpression()), !dbg !11312
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !11299, metadata !DIExpression()), !dbg !11312
  %call = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !11313
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !11300, metadata !DIExpression()), !dbg !11312
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11314
  %0 = bitcast %union.tree_node** %type1 to i64**, !dbg !11314
  %1 = load i64*, i64** %0, align 8, !dbg !11314
  %call2 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call) #7, !dbg !11315
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call2, metadata !11302, metadata !DIExpression()), !dbg !11312
  %bf.load = load i64, i64* %1, align 8, !dbg !11316
  %bf.cast1 = and i64 %bf.load, 2097152, !dbg !11316
  %tobool = icmp eq i64 %bf.cast1, 0, !dbg !11316
  br i1 %tobool, label %if.else, label %if.then, !dbg !11317

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata %union.tree_node* undef, metadata !11299, metadata !DIExpression()), !dbg !11312
  br label %if.end46, !dbg !11318

if.else:                                          ; preds = %entry
  %tobool3 = icmp eq %struct.value_range_d* %call2, null, !dbg !11320
  br i1 %tobool3, label %if.end46, label %if.then4, !dbg !11321

if.then4:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11303, metadata !DIExpression(DW_OP_deref)), !dbg !11322
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !11323
  call void @llvm.dbg.value(metadata i8 0, metadata !11303, metadata !DIExpression()), !dbg !11322
  store i8 0, i8* %sop, align 1, !dbg !11324
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11325
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11303, metadata !DIExpression(DW_OP_deref)), !dbg !11322
  %call5 = call fastcc %union.tree_node* @compare_range_with_value(i32 98, %struct.value_range_d* nonnull %call2, %union.tree_node* %2, i8* nonnull %sop) #7, !dbg !11326
  call void @llvm.dbg.value(metadata %union.tree_node* %call5, metadata !11299, metadata !DIExpression()), !dbg !11312
  %tobool6 = icmp eq %union.tree_node* %call5, null, !dbg !11327
  br i1 %tobool6, label %if.then7, label %if.end20, !dbg !11329

if.then7:                                         ; preds = %if.then4
  call void @llvm.dbg.value(metadata i8 0, metadata !11303, metadata !DIExpression()), !dbg !11322
  store i8 0, i8* %sop, align 1, !dbg !11330
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11332
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11303, metadata !DIExpression(DW_OP_deref)), !dbg !11322
  %call8 = call fastcc %union.tree_node* @compare_range_with_value(i32 100, %struct.value_range_d* nonnull %call2, %union.tree_node* %3, i8* nonnull %sop) #7, !dbg !11333
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !11299, metadata !DIExpression()), !dbg !11312
  %tobool9 = icmp eq %union.tree_node* %call8, null, !dbg !11334
  br i1 %tobool9, label %if.end20, label %if.then10, !dbg !11336

if.then10:                                        ; preds = %if.then7
  %call11 = call i32 @integer_zerop(%union.tree_node* nonnull %call8) #6, !dbg !11337
  %tobool12 = icmp eq i32 %call11, 0, !dbg !11337
  br i1 %tobool12, label %if.else14, label %if.then13, !dbg !11340

if.then13:                                        ; preds = %if.then10
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !11341
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !11299, metadata !DIExpression()), !dbg !11312
  br label %if.end20, !dbg !11342

if.else14:                                        ; preds = %if.then10
  %call15 = call i32 @integer_onep(%union.tree_node* nonnull %call8) #6, !dbg !11343
  %tobool16 = icmp eq i32 %call15, 0, !dbg !11343
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !11345
  %spec.select = select i1 %tobool16, %union.tree_node* %call8, %union.tree_node* %5, !dbg !11346
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select, metadata !11299, metadata !DIExpression()), !dbg !11312
  br label %if.end20

if.end20:                                         ; preds = %if.then7, %if.then4, %if.else14, %if.then13
  %val.3 = phi %union.tree_node* [ %call5, %if.then4 ], [ null, %if.then7 ], [ %4, %if.then13 ], [ %spec.select, %if.else14 ], !dbg !11322
  call void @llvm.dbg.value(metadata %union.tree_node* %val.3, metadata !11299, metadata !DIExpression()), !dbg !11312
  %tobool21 = icmp eq %union.tree_node* %val.3, null, !dbg !11347
  br i1 %tobool21, label %cleanup, label %land.lhs.true, !dbg !11348

land.lhs.true:                                    ; preds = %if.end20
  %call22 = call i32 @integer_onep(%union.tree_node* nonnull %val.3) #6, !dbg !11349
  %tobool23 = icmp eq i32 %call22, 0, !dbg !11349
  br i1 %tobool23, label %lor.lhs.false, label %if.then26, !dbg !11350

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call24 = call i32 @integer_zerop(%union.tree_node* nonnull %val.3) #6, !dbg !11351
  %tobool25 = icmp eq i32 %call24, 0, !dbg !11351
  br i1 %tobool25, label %cleanup, label %if.then26, !dbg !11352

if.then26:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %6 = load i8, i8* %sop, align 1, !dbg !11353
  call void @llvm.dbg.value(metadata i8 %6, metadata !11303, metadata !DIExpression()), !dbg !11322
  %tobool27 = icmp ne i8 %6, 0, !dbg !11353
  %7 = load i32, i32* @warn_strict_overflow, align 4, !dbg !11354
  %cmp = icmp sgt i32 %7, 3, !dbg !11354
  %or.cond = and i1 %tobool27, %cmp, !dbg !11355
  br i1 %or.cond, label %if.then30, label %if.end38, !dbg !11355

if.then30:                                        ; preds = %if.then26
  %call31 = call fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %stmt) #7, !dbg !11356
  %tobool32 = icmp eq i8 %call31, 0, !dbg !11356
  br i1 %tobool32, label %if.then33, label %if.else34, !dbg !11358

if.then33:                                        ; preds = %if.then30
  %8 = load i32, i32* @input_location, align 4, !dbg !11359
  call void @llvm.dbg.value(metadata i32 %8, metadata !11307, metadata !DIExpression()), !dbg !11360
  br label %if.end36, !dbg !11361

if.else34:                                        ; preds = %if.then30
  %call35 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %stmt) #7, !dbg !11362
  call void @llvm.dbg.value(metadata i32 %call35, metadata !11307, metadata !DIExpression()), !dbg !11360
  br label %if.end36

if.end36:                                         ; preds = %if.else34, %if.then33
  %location.0 = phi i32 [ %call35, %if.else34 ], [ %8, %if.then33 ], !dbg !11363
  call void @llvm.dbg.value(metadata i32 %location.0, metadata !11307, metadata !DIExpression()), !dbg !11360
  %call37 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %location.0, i32 187, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.64, i64 0, i64 0)) #6, !dbg !11364
  br label %if.end38, !dbg !11365

if.end38:                                         ; preds = %if.end36, %if.then26
  call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %stmt, %union.tree_node* %call) #7, !dbg !11366
  %call39 = call i32 @integer_onep(%union.tree_node* nonnull %val.3) #6, !dbg !11367
  %tobool40 = icmp eq i32 %call39, 0, !dbg !11367
  br i1 %tobool40, label %if.else42, label %if.then41, !dbg !11369

if.then41:                                        ; preds = %if.end38
  call fastcc void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %stmt, i32 79) #7, !dbg !11370
  br label %if.end43, !dbg !11370

if.else42:                                        ; preds = %if.end38
  call fastcc void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %stmt, i32 141) #7, !dbg !11371
  br label %if.end43

if.end43:                                         ; preds = %if.else42, %if.then41
  call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #7, !dbg !11372
  br label %cleanup, !dbg !11373

cleanup:                                          ; preds = %lor.lhs.false, %if.end20, %if.end43
  %cleanup.dest.slot.0 = phi i1 [ false, %if.end43 ], [ true, %lor.lhs.false ], [ true, %if.end20 ]
  call void @llvm.dbg.value(metadata i8* %sop, metadata !11303, metadata !DIExpression(DW_OP_deref)), !dbg !11322
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %sop) #8, !dbg !11374
  br i1 %cleanup.dest.slot.0, label %if.end46, label %cleanup47

if.end46:                                         ; preds = %if.else, %cleanup, %if.then
  br label %cleanup47, !dbg !11375

cleanup47:                                        ; preds = %cleanup, %if.end46
  %retval.1 = phi i8 [ 0, %if.end46 ], [ 1, %cleanup ], !dbg !11312
  ret i8 %retval.1, !dbg !11376
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @simplify_cond_using_ranges(%union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !11377 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !11379, metadata !DIExpression()), !dbg !11389
  %call = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !11390
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !11380, metadata !DIExpression()), !dbg !11389
  %call1 = tail call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %stmt) #7, !dbg !11391
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !11381, metadata !DIExpression()), !dbg !11389
  %call2 = tail call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %stmt) #7, !dbg !11392
  call void @llvm.dbg.value(metadata i32 %call2, metadata !11382, metadata !DIExpression()), !dbg !11389
  %call2.off = add i32 %call2, -101, !dbg !11393
  %switch = icmp ult i32 %call2.off, 2, !dbg !11393
  br i1 %switch, label %if.end64, label %land.lhs.true4, !dbg !11393

land.lhs.true4:                                   ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11394
  %bf.load = load i64, i64* %0, align 8, !dbg !11394
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !11395
  %cmp5 = icmp eq i64 %bf.cast2, 141, !dbg !11395
  br i1 %cmp5, label %land.lhs.true6, label %if.end64, !dbg !11396

land.lhs.true6:                                   ; preds = %land.lhs.true4
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11397
  %1 = bitcast %union.tree_node** %type to i64**, !dbg !11397
  %2 = load i64*, i64** %1, align 8, !dbg !11397
  %bf.load8 = load i64, i64* %2, align 8, !dbg !11397
  %bf.cast103 = and i64 %bf.load8, 65535, !dbg !11397
  %cmp11 = icmp eq i64 %bf.cast103, 6, !dbg !11397
  br i1 %cmp11, label %land.lhs.true27, label %lor.lhs.false, !dbg !11397

lor.lhs.false:                                    ; preds = %land.lhs.true6
  %cmp18 = icmp eq i64 %bf.cast103, 7, !dbg !11397
  br i1 %cmp18, label %land.lhs.true27, label %lor.lhs.false19, !dbg !11397

lor.lhs.false19:                                  ; preds = %lor.lhs.false
  %cmp26 = icmp eq i64 %bf.cast103, 8, !dbg !11397
  br i1 %cmp26, label %land.lhs.true27, label %if.end64, !dbg !11398

land.lhs.true27:                                  ; preds = %lor.lhs.false19, %lor.lhs.false, %land.lhs.true6
  %call28 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call1) #6, !dbg !11399
  %tobool = icmp eq i8 %call28, 0, !dbg !11399
  br i1 %tobool, label %if.end64, label %if.then, !dbg !11400

if.then:                                          ; preds = %land.lhs.true27
  %call29 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call) #7, !dbg !11401
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call29, metadata !11383, metadata !DIExpression()), !dbg !11402
  %type30 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call29, i64 0, i32 0, !dbg !11403
  %3 = load i32, i32* %type30, align 8, !dbg !11403
  %cmp31 = icmp eq i32 %3, 1, !dbg !11404
  br i1 %cmp31, label %if.then33, label %if.end60, !dbg !11405

if.then33:                                        ; preds = %if.then
  %call34 = tail call fastcc %union.tree_node* @test_for_singularity(i32 %call2, %union.tree_node* %call, %union.tree_node* %call1, %struct.value_range_d* %call29) #7, !dbg !11406
  call void @llvm.dbg.value(metadata %union.tree_node* %call34, metadata !11386, metadata !DIExpression()), !dbg !11407
  %tobool35 = icmp eq %union.tree_node* %call34, null, !dbg !11408
  br i1 %tobool35, label %if.end45, label %if.then36, !dbg !11410

if.then36:                                        ; preds = %if.then33
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11411
  %tobool37 = icmp eq %struct._IO_FILE* %4, null, !dbg !11411
  br i1 %tobool37, label %if.end, label %if.then38, !dbg !11414

if.then38:                                        ; preds = %if.then36
  %call39 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.65, i64 0, i64 0)) #6, !dbg !11415
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11417
  tail call void @print_gimple_stmt(%struct._IO_FILE* %5, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !11418
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11419
  %call40 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0)) #6, !dbg !11420
  br label %if.end, !dbg !11421

if.end:                                           ; preds = %if.then36, %if.then38
  tail call fastcc void @gimple_cond_set_code(%union.gimple_statement_d* %stmt, i32 101) #7, !dbg !11422
  tail call fastcc void @gimple_cond_set_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %call) #7, !dbg !11423
  tail call fastcc void @gimple_cond_set_rhs(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call34) #7, !dbg !11424
  tail call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #7, !dbg !11425
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11426
  %tobool41 = icmp eq %struct._IO_FILE* %7, null, !dbg !11426
  br i1 %tobool41, label %cleanup, label %if.then42, !dbg !11428

if.then42:                                        ; preds = %if.end
  tail call void @print_gimple_stmt(%struct._IO_FILE* nonnull %7, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !11429
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11431
  %call43 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !11432
  br label %cleanup, !dbg !11433

if.end45:                                         ; preds = %if.then33
  %call46 = tail call i32 @invert_tree_comparison(i32 %call2, i8 zeroext 0) #6, !dbg !11434
  call void @llvm.dbg.value(metadata i32 %call46, metadata !11382, metadata !DIExpression()), !dbg !11389
  %call47 = tail call fastcc %union.tree_node* @test_for_singularity(i32 %call46, %union.tree_node* %call, %union.tree_node* %call1, %struct.value_range_d* %call29) #7, !dbg !11435
  call void @llvm.dbg.value(metadata %union.tree_node* %call47, metadata !11386, metadata !DIExpression()), !dbg !11407
  %tobool48 = icmp eq %union.tree_node* %call47, null, !dbg !11436
  br i1 %tobool48, label %cleanup, label %if.then49, !dbg !11438

if.then49:                                        ; preds = %if.end45
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11439
  %tobool50 = icmp eq %struct._IO_FILE* %9, null, !dbg !11439
  br i1 %tobool50, label %if.end54, label %if.then51, !dbg !11442

if.then51:                                        ; preds = %if.then49
  %call52 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %9, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.65, i64 0, i64 0)) #6, !dbg !11443
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11445
  tail call void @print_gimple_stmt(%struct._IO_FILE* %10, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !11446
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11447
  %call53 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i64 0, i64 0)) #6, !dbg !11448
  br label %if.end54, !dbg !11449

if.end54:                                         ; preds = %if.then49, %if.then51
  tail call fastcc void @gimple_cond_set_code(%union.gimple_statement_d* %stmt, i32 102) #7, !dbg !11450
  tail call fastcc void @gimple_cond_set_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %call) #7, !dbg !11451
  tail call fastcc void @gimple_cond_set_rhs(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call47) #7, !dbg !11452
  tail call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #7, !dbg !11453
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11454
  %tobool55 = icmp eq %struct._IO_FILE* %12, null, !dbg !11454
  br i1 %tobool55, label %cleanup, label %if.then56, !dbg !11456

if.then56:                                        ; preds = %if.end54
  tail call void @print_gimple_stmt(%struct._IO_FILE* nonnull %12, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !11457
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11459
  %call57 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !11460
  br label %cleanup, !dbg !11461

cleanup:                                          ; preds = %if.end, %if.end54, %if.end45, %if.then56, %if.then42
  %cleanup.dest.slot.0 = phi i32 [ 1, %if.then42 ], [ 1, %if.end ], [ 1, %if.then56 ], [ 1, %if.end54 ], [ 0, %if.end45 ]
  %cond1 = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %cond1, label %if.end60, label %cleanup61

if.end60:                                         ; preds = %cleanup, %if.then
  br label %cleanup61, !dbg !11462

cleanup61:                                        ; preds = %cleanup, %if.end60
  %cleanup.dest.slot.1 = phi i32 [ %cleanup.dest.slot.0, %cleanup ], [ 0, %if.end60 ]
  %cond = icmp eq i32 %cleanup.dest.slot.1, 0
  br i1 %cond, label %if.end64, label %cleanup65

if.end64:                                         ; preds = %land.lhs.true27, %entry, %cleanup61, %lor.lhs.false19, %land.lhs.true4
  br label %cleanup65, !dbg !11463

cleanup65:                                        ; preds = %cleanup61, %if.end64
  %retval.3 = phi i8 [ 1, %cleanup61 ], [ 0, %if.end64 ], !dbg !11389
  ret i8 %retval.3, !dbg !11464
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @simplify_switch_using_ranges(%union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !11465 {
entry:
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %su = alloca %struct.switch_update, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !11467, metadata !DIExpression()), !dbg !11479
  %call = tail call fastcc %union.tree_node* @gimple_switch_index(%union.gimple_statement_d* %stmt) #7, !dbg !11480
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !11468, metadata !DIExpression()), !dbg !11479
  %0 = bitcast %struct.edge_def** %e to i8*, !dbg !11481
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !11481
  %1 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !11482
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !11482
  %2 = bitcast i64* %i to i8*, !dbg !11483
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #8, !dbg !11483
  call void @llvm.dbg.value(metadata i64 0, metadata !11473, metadata !DIExpression()), !dbg !11479
  store i64 0, i64* %i, align 8, !dbg !11484
  %3 = bitcast i64* %j to i8*, !dbg !11483
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #8, !dbg !11483
  call void @llvm.dbg.value(metadata i64 0, metadata !11474, metadata !DIExpression()), !dbg !11479
  store i64 0, i64* %j, align 8, !dbg !11485
  %4 = bitcast %struct.switch_update* %su to i8*, !dbg !11486
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #8, !dbg !11486
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11487
  %bf.load = load i64, i64* %5, align 8, !dbg !11487
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !11489
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !11489
  br i1 %cmp, label %if.then, label %if.else, !dbg !11490

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %call) #7, !dbg !11491
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call1, metadata !11469, metadata !DIExpression()), !dbg !11479
  %type = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call1, i64 0, i32 0, !dbg !11493
  %6 = load i32, i32* %type, align 8, !dbg !11493
  %cmp2 = icmp eq i32 %6, 1, !dbg !11495
  br i1 %cmp2, label %lor.lhs.false, label %cleanup, !dbg !11496

lor.lhs.false:                                    ; preds = %if.then
  %call3 = tail call fastcc zeroext i8 @symbolic_range_p(%struct.value_range_d* %call1) #7, !dbg !11497
  %tobool = icmp eq i8 %call3, 0, !dbg !11497
  br i1 %tobool, label %if.end, label %cleanup, !dbg !11498

if.end:                                           ; preds = %lor.lhs.false
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call1, i64 0, i32 1, !dbg !11499
  %7 = load %union.tree_node*, %union.tree_node** %min, align 8, !dbg !11499
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call1, i64 0, i32 2, !dbg !11500
  %8 = load %union.tree_node*, %union.tree_node** %max, align 8, !dbg !11500
  call void @llvm.dbg.value(metadata i64* %i, metadata !11473, metadata !DIExpression(DW_OP_deref)), !dbg !11479
  call void @llvm.dbg.value(metadata i64* %j, metadata !11474, metadata !DIExpression(DW_OP_deref)), !dbg !11479
  %call5 = call fastcc zeroext i8 @find_case_label_range(%union.gimple_statement_d* %stmt, %union.tree_node* %7, %union.tree_node* %8, i64* nonnull %i, i64* nonnull %j) #7, !dbg !11501
  %tobool6 = icmp eq i8 %call5, 0, !dbg !11502
  %conv7 = zext i1 %tobool6 to i8, !dbg !11502
  call void @llvm.dbg.value(metadata i8 %conv7, metadata !11470, metadata !DIExpression()), !dbg !11479
  br label %if.end26, !dbg !11503

if.else:                                          ; preds = %entry
  %cmp12 = icmp eq i64 %bf.cast1, 23, !dbg !11504
  br i1 %cmp12, label %if.then14, label %cleanup, !dbg !11506

if.then14:                                        ; preds = %if.else
  call void @llvm.dbg.value(metadata i64* %i, metadata !11473, metadata !DIExpression(DW_OP_deref)), !dbg !11479
  %call15 = call fastcc zeroext i8 @find_case_label_index(%union.gimple_statement_d* %stmt, i64 1, %union.tree_node* %call, i64* nonnull %i) #7, !dbg !11507
  %tobool16 = icmp eq i8 %call15, 0, !dbg !11509
  %conv19 = zext i1 %tobool16 to i8, !dbg !11509
  call void @llvm.dbg.value(metadata i8 %conv19, metadata !11470, metadata !DIExpression()), !dbg !11479
  br i1 %tobool16, label %if.then21, label %if.else22, !dbg !11510

if.then21:                                        ; preds = %if.then14
  call void @llvm.dbg.value(metadata i64 1, metadata !11473, metadata !DIExpression()), !dbg !11479
  store i64 1, i64* %i, align 8, !dbg !11511
  call void @llvm.dbg.value(metadata i64 0, metadata !11474, metadata !DIExpression()), !dbg !11479
  store i64 0, i64* %j, align 8, !dbg !11514
  br label %if.end26, !dbg !11515

if.else22:                                        ; preds = %if.then14
  %9 = load i64, i64* %i, align 8, !dbg !11516
  call void @llvm.dbg.value(metadata i64 %9, metadata !11473, metadata !DIExpression()), !dbg !11479
  call void @llvm.dbg.value(metadata i64 %9, metadata !11474, metadata !DIExpression()), !dbg !11479
  store i64 %9, i64* %j, align 8, !dbg !11518
  br label %if.end26

if.end26:                                         ; preds = %if.else22, %if.then21, %if.end
  %take_default.0 = phi i8 [ %conv7, %if.end ], [ %conv19, %if.then21 ], [ %conv19, %if.else22 ], !dbg !11519
  call void @llvm.dbg.value(metadata i8 %take_default.0, metadata !11470, metadata !DIExpression()), !dbg !11479
  %call27 = call fastcc i32 @gimple_switch_num_labels(%union.gimple_statement_d* %stmt) #7, !dbg !11520
  call void @llvm.dbg.value(metadata i32 %call27, metadata !11475, metadata !DIExpression()), !dbg !11479
  %10 = load i64, i64* %i, align 8, !dbg !11521
  call void @llvm.dbg.value(metadata i64 %10, metadata !11473, metadata !DIExpression()), !dbg !11479
  %cmp29 = icmp eq i64 %10, 1, !dbg !11523
  br i1 %cmp29, label %land.lhs.true, label %if.end26.if.end37_crit_edge, !dbg !11524

if.end26.if.end37_crit_edge:                      ; preds = %if.end26
  %.pre = load i64, i64* %j, align 8, !dbg !11525
  br label %if.end37, !dbg !11524

land.lhs.true:                                    ; preds = %if.end26
  %conv28 = zext i32 %call27 to i64, !dbg !11520
  call void @llvm.dbg.value(metadata i64 %conv28, metadata !11475, metadata !DIExpression()), !dbg !11479
  %11 = load i64, i64* %j, align 8, !dbg !11526
  call void @llvm.dbg.value(metadata i64 %11, metadata !11474, metadata !DIExpression()), !dbg !11479
  %sub = add nsw i64 %conv28, -1, !dbg !11527
  %cmp31 = icmp eq i64 %11, %sub, !dbg !11528
  %tobool35 = icmp ne i8 %take_default.0, 0, !dbg !11529
  %or.cond = and i1 %cmp31, %tobool35, !dbg !11530
  br i1 %or.cond, label %cleanup, label %if.end37, !dbg !11530

if.end37:                                         ; preds = %if.end26.if.end37_crit_edge, %land.lhs.true
  %12 = phi i64 [ %.pre, %if.end26.if.end37_crit_edge ], [ %11, %land.lhs.true ], !dbg !11525
  call void @llvm.dbg.value(metadata i64 %12, metadata !11474, metadata !DIExpression()), !dbg !11479
  call void @llvm.dbg.value(metadata i64 %10, metadata !11473, metadata !DIExpression()), !dbg !11479
  %sub38 = sub i64 %12, %10, !dbg !11525
  %add = add i64 %sub38, 1, !dbg !11525
  %conv40 = zext i8 %take_default.0 to i64, !dbg !11525
  %add41 = add i64 %add, %conv40, !dbg !11525
  %conv42 = trunc i64 %add41 to i32, !dbg !11525
  %call43 = call %union.tree_node* @make_tree_vec_stat(i32 %conv42) #6, !dbg !11525
  call void @llvm.dbg.value(metadata %union.tree_node* %call43, metadata !11477, metadata !DIExpression()), !dbg !11479
  call void @llvm.dbg.value(metadata i64 0, metadata !11476, metadata !DIExpression()), !dbg !11479
  %tobool44 = icmp eq i8 %take_default.0, 0, !dbg !11531
  br i1 %tobool44, label %if.end47, label %if.then45, !dbg !11533

if.then45:                                        ; preds = %if.end37
  %call46 = call fastcc %union.tree_node* @gimple_switch_default_label(%union.gimple_statement_d* %stmt) #7, !dbg !11534
  %a = getelementptr inbounds %union.tree_node, %union.tree_node* %call43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !11535
  call void @llvm.dbg.value(metadata i64 1, metadata !11476, metadata !DIExpression()), !dbg !11479
  store %union.tree_node* %call46, %union.tree_node** %a, align 8, !dbg !11536
  br label %if.end47, !dbg !11535

if.end47:                                         ; preds = %if.end37, %if.then45
  %n2.0 = phi i64 [ 1, %if.then45 ], [ 0, %if.end37 ], !dbg !11479
  call void @llvm.dbg.value(metadata i64 %n2.0, metadata !11476, metadata !DIExpression()), !dbg !11479
  %a53 = getelementptr inbounds %union.tree_node, %union.tree_node* %call43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !11537
  %.pre3 = load i64, i64* %i, align 8, !dbg !11540
  br label %for.cond, !dbg !11541

for.cond:                                         ; preds = %for.body, %if.end47
  %13 = phi i64 [ %.pre3, %if.end47 ], [ %inc55, %for.body ], !dbg !11540
  %n2.1 = phi i64 [ %n2.0, %if.end47 ], [ %inc56, %for.body ], !dbg !11479
  call void @llvm.dbg.value(metadata i64 %n2.1, metadata !11476, metadata !DIExpression()), !dbg !11479
  call void @llvm.dbg.value(metadata i64 %13, metadata !11473, metadata !DIExpression()), !dbg !11479
  %14 = load i64, i64* %j, align 8, !dbg !11542
  call void @llvm.dbg.value(metadata i64 %14, metadata !11474, metadata !DIExpression()), !dbg !11479
  %cmp48 = icmp ugt i64 %13, %14, !dbg !11543
  br i1 %cmp48, label %for.end, label %for.body, !dbg !11544

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i64 %13, metadata !11473, metadata !DIExpression()), !dbg !11479
  %conv50 = trunc i64 %13 to i32, !dbg !11545
  %call51 = call fastcc %union.tree_node* @gimple_switch_label(%union.gimple_statement_d* %stmt, i32 %conv50) #7, !dbg !11546
  %arrayidx54 = getelementptr inbounds %union.tree_node*, %union.tree_node** %a53, i64 %n2.1, !dbg !11547
  store %union.tree_node* %call51, %union.tree_node** %arrayidx54, align 8, !dbg !11548
  %15 = load i64, i64* %i, align 8, !dbg !11549
  call void @llvm.dbg.value(metadata i64 %15, metadata !11473, metadata !DIExpression()), !dbg !11479
  %inc55 = add i64 %15, 1, !dbg !11549
  call void @llvm.dbg.value(metadata i64 %inc55, metadata !11473, metadata !DIExpression()), !dbg !11479
  store i64 %inc55, i64* %i, align 8, !dbg !11549
  %inc56 = add i64 %n2.1, 1, !dbg !11550
  call void @llvm.dbg.value(metadata i64 %inc56, metadata !11476, metadata !DIExpression()), !dbg !11479
  br label %for.cond, !dbg !11551, !llvm.loop !11552

for.end:                                          ; preds = %for.cond
  %n2.1.lcssa = phi i64 [ %n2.1, %for.cond ], !dbg !11479
  call void @llvm.dbg.value(metadata i64 %n2.1.lcssa, metadata !11476, metadata !DIExpression()), !dbg !11479
  call void @llvm.dbg.value(metadata i64 %n2.1.lcssa, metadata !11476, metadata !DIExpression()), !dbg !11479
  call void @llvm.dbg.value(metadata i64 %n2.1.lcssa, metadata !11476, metadata !DIExpression()), !dbg !11479
  call void @llvm.dbg.value(metadata i64 0, metadata !11473, metadata !DIExpression()), !dbg !11479
  br label %for.cond57, !dbg !11554

for.cond57:                                       ; preds = %for.body60, %for.end
  %storemerge = phi i64 [ 0, %for.end ], [ %inc69, %for.body60 ], !dbg !11556
  store i64 %storemerge, i64* %i, align 8, !dbg !11556
  call void @llvm.dbg.value(metadata i64 %storemerge, metadata !11473, metadata !DIExpression()), !dbg !11479
  %cmp58 = icmp ult i64 %storemerge, %n2.1.lcssa, !dbg !11557
  br i1 %cmp58, label %for.body60, label %for.end70, !dbg !11559

for.body60:                                       ; preds = %for.cond57
  %call61 = call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #7, !dbg !11560
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11562
  %17 = load i64, i64* %i, align 8, !dbg !11562
  call void @llvm.dbg.value(metadata i64 %17, metadata !11473, metadata !DIExpression()), !dbg !11479
  %arrayidx64 = getelementptr inbounds %union.tree_node*, %union.tree_node** %a53, i64 %17, !dbg !11562
  %18 = bitcast %union.tree_node** %arrayidx64 to %struct.tree_exp**, !dbg !11562
  %19 = load %struct.tree_exp*, %struct.tree_exp** %18, align 8, !dbg !11562
  %arrayidx65 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %19, i64 0, i32 3, i64 2, !dbg !11562
  %20 = load %union.tree_node*, %union.tree_node** %arrayidx65, align 8, !dbg !11562
  %call66 = call %struct.basic_block_def* @label_to_block_fn(%struct.function* %16, %union.tree_node* %20) #6, !dbg !11562
  %call67 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %call61, %struct.basic_block_def* %call66) #6, !dbg !11563
  call void @llvm.dbg.value(metadata %struct.edge_def* %call67, metadata !11471, metadata !DIExpression()), !dbg !11479
  store %struct.edge_def* %call67, %struct.edge_def** %e, align 8, !dbg !11564
  call void @llvm.dbg.value(metadata %struct.edge_def* %call67, metadata !11471, metadata !DIExpression()), !dbg !11479
  %aux = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call67, i64 0, i32 3, !dbg !11565
  store i8* inttoptr (i64 -1 to i8*), i8** %aux, align 8, !dbg !11566
  %21 = load i64, i64* %i, align 8, !dbg !11567
  call void @llvm.dbg.value(metadata i64 %21, metadata !11473, metadata !DIExpression()), !dbg !11479
  %inc69 = add i64 %21, 1, !dbg !11567
  call void @llvm.dbg.value(metadata i64 %inc69, metadata !11473, metadata !DIExpression()), !dbg !11479
  br label %for.cond57, !dbg !11568, !llvm.loop !11569

for.end70:                                        ; preds = %for.cond57
  %22 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !11571
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #8, !dbg !11571
  %call71 = call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #7, !dbg !11571
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call71, i64 0, i32 1, !dbg !11571
  %call72 = call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** nonnull %succs) #7, !dbg !11571
  %23 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 0, !dbg !11571
  %24 = extractvalue { i32, %struct.VEC_edge_gc** } %call72, 0, !dbg !11571
  store i32 %24, i32* %23, align 8, !dbg !11571
  %25 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 1, !dbg !11571
  %26 = extractvalue { i32, %struct.VEC_edge_gc** } %call72, 1, !dbg !11571
  store %struct.VEC_edge_gc** %26, %struct.VEC_edge_gc*** %25, align 8, !dbg !11571
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %22, i64 16, i1 false), !dbg !11571
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #8, !dbg !11571
  %27 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !11573
  %28 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !11573
  br label %for.cond73, !dbg !11571

for.cond73:                                       ; preds = %for.inc91, %for.end70
  %29 = load i32, i32* %27, align 8, !dbg !11575
  %30 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %28, align 8, !dbg !11575
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !11471, metadata !DIExpression(DW_OP_deref)), !dbg !11479
  %call74 = call fastcc zeroext i8 @ei_cond(i32 %29, %struct.VEC_edge_gc** %30, %struct.edge_def** nonnull %e) #7, !dbg !11575
  %tobool75 = icmp eq i8 %call74, 0, !dbg !11571
  br i1 %tobool75, label %for.end92, label %for.body76, !dbg !11571

for.body76:                                       ; preds = %for.cond73
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11576
  call void @llvm.dbg.value(metadata %struct.edge_def* %31, metadata !11471, metadata !DIExpression()), !dbg !11479
  %aux77 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i64 0, i32 3, !dbg !11579
  %32 = load i8*, i8** %aux77, align 8, !dbg !11579
  %cmp78 = icmp eq i8* %32, inttoptr (i64 -1 to i8*), !dbg !11580
  br i1 %cmp78, label %if.then80, label %if.end82, !dbg !11581

if.then80:                                        ; preds = %for.body76
  call void @llvm.dbg.value(metadata %struct.edge_def* %31, metadata !11471, metadata !DIExpression()), !dbg !11479
  store i8* null, i8** %aux77, align 8, !dbg !11582
  br label %for.inc91, !dbg !11584

if.end82:                                         ; preds = %for.body76
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !11585
  %tobool83 = icmp eq %struct._IO_FILE* %33, null, !dbg !11585
  br i1 %tobool83, label %if.end88, label %land.lhs.true84, !dbg !11587

land.lhs.true84:                                  ; preds = %if.end82
  %34 = load i32, i32* @dump_flags, align 4, !dbg !11588
  %and = and i32 %34, 8, !dbg !11589
  %tobool85 = icmp eq i32 %and, 0, !dbg !11589
  br i1 %tobool85, label %if.end88, label %if.then86, !dbg !11590

if.then86:                                        ; preds = %land.lhs.true84
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %33, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.67, i64 0, i64 0)) #6, !dbg !11591
  %.pre4 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11593
  br label %if.end88, !dbg !11594

if.end88:                                         ; preds = %land.lhs.true84, %if.end82, %if.then86
  %35 = phi %struct.edge_def* [ %31, %land.lhs.true84 ], [ %31, %if.end82 ], [ %.pre4, %if.then86 ], !dbg !11593
  call void @llvm.dbg.value(metadata %struct.edge_def* %35, metadata !11471, metadata !DIExpression()), !dbg !11479
  %call89 = call fastcc %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** nonnull @to_remove_edges, %struct.edge_def* %35) #7, !dbg !11593
  %36 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !11595
  call void @llvm.dbg.value(metadata %struct.edge_def* %36, metadata !11471, metadata !DIExpression()), !dbg !11479
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %36, i64 0, i32 7, !dbg !11596
  %37 = load i32, i32* %flags, align 8, !dbg !11597
  %and90 = and i32 %37, -4097, !dbg !11597
  store i32 %and90, i32* %flags, align 8, !dbg !11597
  br label %for.inc91, !dbg !11598

for.inc91:                                        ; preds = %if.end88, %if.then80
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !11472, metadata !DIExpression(DW_OP_deref)), !dbg !11479
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !11575
  br label %for.cond73, !dbg !11575, !llvm.loop !11599

for.end92:                                        ; preds = %for.cond73
  %stmt93 = getelementptr inbounds %struct.switch_update, %struct.switch_update* %su, i64 0, i32 0, !dbg !11601
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt93, align 8, !dbg !11602
  %vec94 = getelementptr inbounds %struct.switch_update, %struct.switch_update* %su, i64 0, i32 1, !dbg !11603
  store %union.tree_node* %call43, %union.tree_node** %vec94, align 8, !dbg !11604
  call void @llvm.dbg.value(metadata %struct.switch_update* %su, metadata !11478, metadata !DIExpression(DW_OP_deref)), !dbg !11479
  %call95 = call fastcc %struct.switch_update* @VEC_switch_update_heap_safe_push(%struct.VEC_switch_update_heap** nonnull @to_update_switch_stmts, %struct.switch_update* nonnull %su) #7, !dbg !11605
  br label %cleanup, !dbg !11606

cleanup:                                          ; preds = %lor.lhs.false, %if.then, %land.lhs.true, %if.else, %for.end92
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #8, !dbg !11607
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #8, !dbg !11607
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #8, !dbg !11607
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !11607
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !11607
  ret i8 undef, !dbg !11607
}

declare dso_local i32 @integer_all_onesp(%union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !11608 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !11610, metadata !DIExpression()), !dbg !11611
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !11612
  ret %union.tree_node* %call, !dbg !11613
}

declare dso_local void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator*, i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @update_stmt(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !11614 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !11616, metadata !DIExpression()), !dbg !11617
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %s) #7, !dbg !11618
  %tobool = icmp eq i8 %call, 0, !dbg !11618
  br i1 %tobool, label %if.end, label %if.then, !dbg !11620

if.then:                                          ; preds = %entry
  tail call void @gimple_set_modified(%union.gimple_statement_d* %s, i8 zeroext 1) #6, !dbg !11621
  tail call void @update_stmt_operands(%union.gimple_statement_d* %s) #6, !dbg !11623
  br label %if.end, !dbg !11624

if.end:                                           ; preds = %entry, %if.then
  ret void, !dbg !11625
}

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) local_unnamed_addr #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local i32 @tree_log2(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %s, i32 %code) unnamed_addr #0 !dbg !11626 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !11630, metadata !DIExpression()), !dbg !11632
  call void @llvm.dbg.value(metadata i32 %code, metadata !11631, metadata !DIExpression()), !dbg !11632
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !11633
  %bf.load = load i32, i32* %0, align 8, !dbg !11634
  %bf.shl = shl i32 %code, 16, !dbg !11634
  %bf.clear = and i32 %bf.load, 65535, !dbg !11634
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !11634
  store i32 %bf.set, i32* %0, align 8, !dbg !11634
  ret void, !dbg !11635
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !11636 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !11638, metadata !DIExpression()), !dbg !11640
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !11639, metadata !DIExpression()), !dbg !11640
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 1, %union.tree_node* %rhs) #7, !dbg !11641
  ret void, !dbg !11642
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !11643 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !11645, metadata !DIExpression()), !dbg !11647
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !11646, metadata !DIExpression()), !dbg !11647
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 2, %union.tree_node* %rhs) #7, !dbg !11648
  ret void, !dbg !11649
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @test_for_singularity(i32 %cond_code, %union.tree_node* %op0, %union.tree_node* %op1, %struct.value_range_d* %vr) unnamed_addr #5 !dbg !11650 {
entry:
  call void @llvm.dbg.value(metadata i32 %cond_code, metadata !11654, metadata !DIExpression()), !dbg !11670
  call void @llvm.dbg.value(metadata %union.tree_node* %op0, metadata !11655, metadata !DIExpression()), !dbg !11670
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !11656, metadata !DIExpression()), !dbg !11670
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr, metadata !11657, metadata !DIExpression()), !dbg !11670
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !11658, metadata !DIExpression()), !dbg !11670
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !11659, metadata !DIExpression()), !dbg !11670
  switch i32 %cond_code, label %if.end67 [
    i32 98, label %if.then
    i32 97, label %if.then
    i32 100, label %if.then28
    i32 99, label %if.then28
  ], !dbg !11671

if.then:                                          ; preds = %entry, %entry
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11672
  %0 = bitcast %union.tree_node** %type to %struct.tree_type**, !dbg !11672
  %1 = load %struct.tree_type*, %struct.tree_type** %0, align 8, !dbg !11672
  %minval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %1, i64 0, i32 13, !dbg !11672
  %2 = load %union.tree_node*, %union.tree_node** %minval, align 8, !dbg !11672
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !11658, metadata !DIExpression()), !dbg !11670
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !11659, metadata !DIExpression()), !dbg !11670
  %cmp3 = icmp eq i32 %cond_code, 97, !dbg !11673
  br i1 %cmp3, label %land.lhs.true, label %if.end67, !dbg !11674

land.lhs.true:                                    ; preds = %if.then
  %call = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %op1) #7, !dbg !11675
  %tobool = icmp eq i8 %call, 0, !dbg !11675
  br i1 %tobool, label %if.then4, label %if.end67, !dbg !11676

if.then4:                                         ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11677
  %call7 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %3, i64 1) #6, !dbg !11678
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !11660, metadata !DIExpression()), !dbg !11679
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !11680
  %call10 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %4, %union.tree_node* %op1, %union.tree_node* %call7) #6, !dbg !11680
  call void @llvm.dbg.value(metadata %union.tree_node* %call10, metadata !11659, metadata !DIExpression()), !dbg !11670
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %call10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11681
  %bf.load = load i64, i64* %5, align 8, !dbg !11681
  %bf.cast = and i64 %bf.load, 65535, !dbg !11681
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !11681
  %6 = load i32, i32* %arrayidx, align 4, !dbg !11681
  %cmp11 = icmp ugt i32 %6, 3, !dbg !11681
  br i1 %cmp11, label %land.lhs.true12, label %if.end67, !dbg !11681

land.lhs.true12:                                  ; preds = %if.then4
  %cmp19 = icmp ult i32 %6, 11, !dbg !11681
  br i1 %cmp19, label %if.then20, label %if.end67, !dbg !11683

if.then20:                                        ; preds = %land.lhs.true12
  %bf.set = or i64 %bf.load, 8388608, !dbg !11684
  store i64 %bf.set, i64* %5, align 8, !dbg !11684
  br label %if.end67, !dbg !11685

if.then28:                                        ; preds = %entry, %entry
  %type30 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11686
  %7 = bitcast %union.tree_node** %type30 to %struct.tree_type**, !dbg !11686
  %8 = load %struct.tree_type*, %struct.tree_type** %7, align 8, !dbg !11686
  %maxval = getelementptr inbounds %struct.tree_type, %struct.tree_type* %8, i64 0, i32 14, !dbg !11686
  %9 = load %union.tree_node*, %union.tree_node** %maxval, align 8, !dbg !11686
  call void @llvm.dbg.value(metadata %union.tree_node* %9, metadata !11659, metadata !DIExpression()), !dbg !11670
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !11658, metadata !DIExpression()), !dbg !11670
  %cmp32 = icmp eq i32 %cond_code, 99, !dbg !11687
  br i1 %cmp32, label %land.lhs.true33, label %if.end67, !dbg !11688

land.lhs.true33:                                  ; preds = %if.then28
  %call34 = tail call fastcc zeroext i8 @is_overflow_infinity(%union.tree_node* %op1) #7, !dbg !11689
  %tobool35 = icmp eq i8 %call34, 0, !dbg !11689
  br i1 %tobool35, label %if.then36, label %if.end67, !dbg !11690

if.then36:                                        ; preds = %land.lhs.true33
  %10 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !11691
  %call40 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 1) #6, !dbg !11692
  call void @llvm.dbg.value(metadata %union.tree_node* %call40, metadata !11665, metadata !DIExpression()), !dbg !11693
  %11 = load %union.tree_node*, %union.tree_node** %type30, align 8, !dbg !11694
  %call43 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %11, %union.tree_node* %op1, %union.tree_node* %call40) #6, !dbg !11694
  call void @llvm.dbg.value(metadata %union.tree_node* %call43, metadata !11658, metadata !DIExpression()), !dbg !11670
  %12 = getelementptr inbounds %union.tree_node, %union.tree_node* %call43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11695
  %bf.load45 = load i64, i64* %12, align 8, !dbg !11695
  %bf.cast47 = and i64 %bf.load45, 65535, !dbg !11695
  %arrayidx49 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast47, !dbg !11695
  %13 = load i32, i32* %arrayidx49, align 4, !dbg !11695
  %cmp50 = icmp ugt i32 %13, 3, !dbg !11695
  br i1 %cmp50, label %land.lhs.true51, label %if.end67, !dbg !11695

land.lhs.true51:                                  ; preds = %if.then36
  %cmp58 = icmp ult i32 %13, 11, !dbg !11695
  br i1 %cmp58, label %if.then59, label %if.end67, !dbg !11697

if.then59:                                        ; preds = %land.lhs.true51
  %bf.set63 = or i64 %bf.load45, 8388608, !dbg !11698
  store i64 %bf.set63, i64* %12, align 8, !dbg !11698
  br label %if.end67, !dbg !11699

if.end67:                                         ; preds = %land.lhs.true, %land.lhs.true33, %entry, %if.then36, %land.lhs.true51, %if.then59, %if.then28, %if.then, %if.then20, %land.lhs.true12, %if.then4
  %min.2 = phi %union.tree_node* [ %2, %if.then4 ], [ %2, %land.lhs.true12 ], [ %2, %if.then20 ], [ %2, %land.lhs.true ], [ %2, %if.then ], [ null, %entry ], [ %op1, %land.lhs.true33 ], [ %op1, %if.then28 ], [ %call43, %if.then59 ], [ %call43, %land.lhs.true51 ], [ %call43, %if.then36 ], !dbg !11700
  %max.2 = phi %union.tree_node* [ %call10, %if.then4 ], [ %call10, %land.lhs.true12 ], [ %call10, %if.then20 ], [ %op1, %land.lhs.true ], [ %op1, %if.then ], [ null, %entry ], [ %9, %land.lhs.true33 ], [ %9, %if.then28 ], [ %9, %if.then59 ], [ %9, %land.lhs.true51 ], [ %9, %if.then36 ], !dbg !11700
  call void @llvm.dbg.value(metadata %union.tree_node* %max.2, metadata !11659, metadata !DIExpression()), !dbg !11670
  call void @llvm.dbg.value(metadata %union.tree_node* %min.2, metadata !11658, metadata !DIExpression()), !dbg !11670
  %tobool68 = icmp ne %union.tree_node* %min.2, null, !dbg !11701
  %tobool70 = icmp ne %union.tree_node* %max.2, null, !dbg !11703
  %or.cond = and i1 %tobool68, %tobool70, !dbg !11704
  br i1 %or.cond, label %if.then71, label %if.end91, !dbg !11704

if.then71:                                        ; preds = %if.end67
  %min72 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 1, !dbg !11705
  %14 = load %union.tree_node*, %union.tree_node** %min72, align 8, !dbg !11705
  %call73 = tail call fastcc i32 @compare_values(%union.tree_node* %14, %union.tree_node* nonnull %min.2) #7, !dbg !11708
  %cmp74 = icmp eq i32 %call73, 1, !dbg !11709
  br i1 %cmp74, label %if.then75, label %if.end77, !dbg !11710

if.then75:                                        ; preds = %if.then71
  %15 = load %union.tree_node*, %union.tree_node** %min72, align 8, !dbg !11711
  call void @llvm.dbg.value(metadata %union.tree_node* %15, metadata !11658, metadata !DIExpression()), !dbg !11670
  br label %if.end77, !dbg !11712

if.end77:                                         ; preds = %if.then75, %if.then71
  %min.3 = phi %union.tree_node* [ %15, %if.then75 ], [ %min.2, %if.then71 ], !dbg !11670
  call void @llvm.dbg.value(metadata %union.tree_node* %min.3, metadata !11658, metadata !DIExpression()), !dbg !11670
  %max78 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr, i64 0, i32 2, !dbg !11713
  %16 = load %union.tree_node*, %union.tree_node** %max78, align 8, !dbg !11713
  %call79 = tail call fastcc i32 @compare_values(%union.tree_node* %16, %union.tree_node* nonnull %max.2) #7, !dbg !11715
  %cmp80 = icmp eq i32 %call79, -1, !dbg !11716
  br i1 %cmp80, label %if.then81, label %if.end83, !dbg !11717

if.then81:                                        ; preds = %if.end77
  %17 = load %union.tree_node*, %union.tree_node** %max78, align 8, !dbg !11718
  call void @llvm.dbg.value(metadata %union.tree_node* %17, metadata !11659, metadata !DIExpression()), !dbg !11670
  br label %if.end83, !dbg !11719

if.end83:                                         ; preds = %if.then81, %if.end77
  %max.3 = phi %union.tree_node* [ %17, %if.then81 ], [ %max.2, %if.end77 ], !dbg !11670
  call void @llvm.dbg.value(metadata %union.tree_node* %max.3, metadata !11659, metadata !DIExpression()), !dbg !11670
  %call84 = tail call i32 @operand_equal_p(%union.tree_node* %min.3, %union.tree_node* %max.3, i32 0) #6, !dbg !11720
  %tobool85 = icmp eq i32 %call84, 0, !dbg !11720
  br i1 %tobool85, label %if.end91, label %land.lhs.true86, !dbg !11722

land.lhs.true86:                                  ; preds = %if.end83
  %call87 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %min.3) #6, !dbg !11723
  %tobool88 = icmp eq i8 %call87, 0, !dbg !11723
  br i1 %tobool88, label %if.end91, label %cleanup, !dbg !11724

if.end91:                                         ; preds = %land.lhs.true86, %if.end83, %if.end67
  br label %cleanup, !dbg !11725

cleanup:                                          ; preds = %land.lhs.true86, %if.end91
  %retval.0 = phi %union.tree_node* [ null, %if.end91 ], [ %min.3, %land.lhs.true86 ], !dbg !11670
  ret %union.tree_node* %retval.0, !dbg !11726
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_set_code(%union.gimple_statement_d* %gs, i32 %code) unnamed_addr #0 !dbg !11727 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !11729, metadata !DIExpression()), !dbg !11731
  call void @llvm.dbg.value(metadata i32 %code, metadata !11730, metadata !DIExpression()), !dbg !11731
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !11732
  %bf.load = load i32, i32* %0, align 8, !dbg !11733
  %bf.shl = shl i32 %code, 16, !dbg !11733
  %bf.clear = and i32 %bf.load, 65535, !dbg !11733
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !11733
  store i32 %bf.set, i32* %0, align 8, !dbg !11733
  ret void, !dbg !11734
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %vec_, %struct.edge_def* %obj_) unnamed_addr #0 !dbg !11735 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap** @to_remove_edges, metadata !11739, metadata !DIExpression()), !dbg !11741
  call void @llvm.dbg.value(metadata %struct.edge_def* %obj_, metadata !11740, metadata !DIExpression()), !dbg !11741
  %call = tail call fastcc i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** nonnull @to_remove_edges, i32 1) #7, !dbg !11742
  %0 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !11742
  %tobool = icmp eq %struct.VEC_edge_heap* %0, null, !dbg !11742
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !11742

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %0, i64 0, i32 0, !dbg !11742
  br label %cond.end, !dbg !11742

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !11742
  %call1 = tail call fastcc %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %cond, %struct.edge_def* %obj_) #7, !dbg !11742
  ret %struct.edge_def** %call1, !dbg !11742
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.switch_update* @VEC_switch_update_heap_safe_push(%struct.VEC_switch_update_heap** %vec_, %struct.switch_update* %obj_) unnamed_addr #0 !dbg !11743 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_switch_update_heap** @to_update_switch_stmts, metadata !11749, metadata !DIExpression()), !dbg !11751
  call void @llvm.dbg.value(metadata %struct.switch_update* %obj_, metadata !11750, metadata !DIExpression()), !dbg !11751
  %call = tail call fastcc i32 @VEC_switch_update_heap_reserve(%struct.VEC_switch_update_heap** nonnull @to_update_switch_stmts, i32 1) #7, !dbg !11752
  %0 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** @to_update_switch_stmts, align 8, !dbg !11752
  %tobool = icmp eq %struct.VEC_switch_update_heap* %0, null, !dbg !11752
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !11752

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_switch_update_heap, %struct.VEC_switch_update_heap* %0, i64 0, i32 0, !dbg !11752
  br label %cond.end, !dbg !11752

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_switch_update_base* [ %base, %cond.true ], [ null, %entry ], !dbg !11752
  %call1 = tail call fastcc %struct.switch_update* @VEC_switch_update_base_quick_push(%struct.VEC_switch_update_base* %cond, %struct.switch_update* %obj_) #7, !dbg !11752
  ret %struct.switch_update* %call1, !dbg !11752
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !11753 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap** @to_remove_edges, metadata !11757, metadata !DIExpression()), !dbg !11760
  call void @llvm.dbg.value(metadata i32 1, metadata !11758, metadata !DIExpression()), !dbg !11760
  %0 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** @to_remove_edges, align 8, !dbg !11761
  %tobool = icmp eq %struct.VEC_edge_heap* %0, null, !dbg !11761
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !11761

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %0, i64 0, i32 0, !dbg !11761
  br label %cond.end, !dbg !11761

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !11761
  %call = tail call fastcc i32 @VEC_edge_base_space(%struct.VEC_edge_base* %cond, i32 1) #7, !dbg !11761
  %tobool1 = icmp eq i32 %call, 0, !dbg !11761
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !11761
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !11759, metadata !DIExpression()), !dbg !11760
  br i1 %tobool1, label %if.then, label %if.end, !dbg !11761

if.then:                                          ; preds = %cond.end
  %1 = load i8*, i8** bitcast (%struct.VEC_edge_heap** @to_remove_edges to i8**), align 8, !dbg !11762
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %1, i32 1) #6, !dbg !11762
  store i8* %call3, i8** bitcast (%struct.VEC_edge_heap** @to_remove_edges to i8**), align 8, !dbg !11762
  br label %if.end, !dbg !11762

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !11761
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %vec_, %struct.edge_def* %obj_) unnamed_addr #0 !dbg !11764 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !11769, metadata !DIExpression()), !dbg !11772
  call void @llvm.dbg.value(metadata %struct.edge_def* %obj_, metadata !11770, metadata !DIExpression()), !dbg !11772
  %num1 = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 0, !dbg !11773
  %0 = load i32, i32* %num1, align 8, !dbg !11773
  %inc = add i32 %0, 1, !dbg !11773
  store i32 %inc, i32* %num1, align 8, !dbg !11773
  %idxprom = zext i32 %0 to i64, !dbg !11773
  %arrayidx = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !11773
  call void @llvm.dbg.value(metadata %struct.edge_def** %arrayidx, metadata !11771, metadata !DIExpression()), !dbg !11772
  store %struct.edge_def* %obj_, %struct.edge_def** %arrayidx, align 8, !dbg !11773
  ret %struct.edge_def** %arrayidx, !dbg !11773
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_edge_base_space(%struct.VEC_edge_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !11774 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !11778, metadata !DIExpression()), !dbg !11780
  call void @llvm.dbg.value(metadata i32 1, metadata !11779, metadata !DIExpression()), !dbg !11780
  %tobool = icmp eq %struct.VEC_edge_base* %vec_, null, !dbg !11781
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11781

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 1, !dbg !11781
  %0 = load i32, i32* %alloc, align 4, !dbg !11781
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 0, !dbg !11781
  %1 = load i32, i32* %num, align 8, !dbg !11781
  %cmp1 = icmp ne i32 %0, %1, !dbg !11781
  %phitmp = zext i1 %cmp1 to i32, !dbg !11781
  br label %cond.end, !dbg !11781

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11781

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !11781
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_switch_update_heap_reserve(%struct.VEC_switch_update_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !11782 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_switch_update_heap** @to_update_switch_stmts, metadata !11786, metadata !DIExpression()), !dbg !11789
  call void @llvm.dbg.value(metadata i32 1, metadata !11787, metadata !DIExpression()), !dbg !11789
  %0 = load %struct.VEC_switch_update_heap*, %struct.VEC_switch_update_heap** @to_update_switch_stmts, align 8, !dbg !11790
  %tobool = icmp eq %struct.VEC_switch_update_heap* %0, null, !dbg !11790
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !11790

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_switch_update_heap, %struct.VEC_switch_update_heap* %0, i64 0, i32 0, !dbg !11790
  br label %cond.end, !dbg !11790

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_switch_update_base* [ %base, %cond.true ], [ null, %entry ], !dbg !11790
  %call = tail call fastcc i32 @VEC_switch_update_base_space(%struct.VEC_switch_update_base* %cond, i32 1) #7, !dbg !11790
  %tobool1 = icmp eq i32 %call, 0, !dbg !11790
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !11790
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !11788, metadata !DIExpression()), !dbg !11789
  br i1 %tobool1, label %if.then, label %if.end, !dbg !11790

if.then:                                          ; preds = %cond.end
  %1 = load i8*, i8** bitcast (%struct.VEC_switch_update_heap** @to_update_switch_stmts to i8**), align 8, !dbg !11791
  %call3 = tail call i8* @vec_heap_o_reserve(i8* %1, i32 1, i64 8, i64 16) #6, !dbg !11791
  store i8* %call3, i8** bitcast (%struct.VEC_switch_update_heap** @to_update_switch_stmts to i8**), align 8, !dbg !11791
  br label %if.end, !dbg !11791

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !11790
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.switch_update* @VEC_switch_update_base_quick_push(%struct.VEC_switch_update_base* %vec_, %struct.switch_update* %obj_) unnamed_addr #0 !dbg !11793 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_switch_update_base* %vec_, metadata !11797, metadata !DIExpression()), !dbg !11800
  call void @llvm.dbg.value(metadata %struct.switch_update* %obj_, metadata !11798, metadata !DIExpression()), !dbg !11800
  %num1 = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %vec_, i64 0, i32 0, !dbg !11801
  %0 = load i32, i32* %num1, align 8, !dbg !11801
  %inc = add i32 %0, 1, !dbg !11801
  store i32 %inc, i32* %num1, align 8, !dbg !11801
  %idxprom = zext i32 %0 to i64, !dbg !11801
  %arrayidx = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !11801
  call void @llvm.dbg.value(metadata %struct.switch_update* %arrayidx, metadata !11799, metadata !DIExpression()), !dbg !11800
  %tobool = icmp eq %struct.switch_update* %obj_, null, !dbg !11802
  br i1 %tobool, label %if.end, label %if.then, !dbg !11801

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.switch_update* %arrayidx to i8*, !dbg !11802
  %2 = bitcast %struct.switch_update* %obj_ to i8*, !dbg !11802
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %2, i64 16, i1 false), !dbg !11802
  br label %if.end, !dbg !11802

if.end:                                           ; preds = %entry, %if.then
  ret %struct.switch_update* %arrayidx, !dbg !11801
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_switch_update_base_space(%struct.VEC_switch_update_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !11804 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_switch_update_base* %vec_, metadata !11808, metadata !DIExpression()), !dbg !11810
  call void @llvm.dbg.value(metadata i32 1, metadata !11809, metadata !DIExpression()), !dbg !11810
  %tobool = icmp eq %struct.VEC_switch_update_base* %vec_, null, !dbg !11811
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11811

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %vec_, i64 0, i32 1, !dbg !11811
  %0 = load i32, i32* %alloc, align 4, !dbg !11811
  %num = getelementptr inbounds %struct.VEC_switch_update_base, %struct.VEC_switch_update_base* %vec_, i64 0, i32 0, !dbg !11811
  %1 = load i32, i32* %num, align 8, !dbg !11811
  %cmp1 = icmp ne i32 %0, %1, !dbg !11811
  %phitmp = zext i1 %cmp1 to i32, !dbg !11811
  br label %cond.end, !dbg !11811

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11811

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !11811
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @search_for_addr_array(%union.tree_node* %t, i32 %location) unnamed_addr #5 !dbg !11812 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !11816, metadata !DIExpression()), !dbg !11820
  call void @llvm.dbg.value(metadata i32 %location, metadata !11817, metadata !DIExpression()), !dbg !11820
  br label %while.cond, !dbg !11821

while.cond:                                       ; preds = %cleanup, %entry
  %t.addr.0 = phi %union.tree_node* [ %t, %entry ], [ %t.addr.1, %cleanup ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0, metadata !11816, metadata !DIExpression()), !dbg !11820
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11822
  %bf.load = load i64, i64* %0, align 8, !dbg !11822
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !11823
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !11823
  br i1 %cmp, label %while.body, label %while.end, !dbg !11821

while.body:                                       ; preds = %while.cond
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !11824
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !11824
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %1, align 8, !dbg !11824
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %2, metadata !11818, metadata !DIExpression()), !dbg !11825
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %2) #7, !dbg !11826
  %cmp1 = icmp eq i32 %call, 6, !dbg !11828
  br i1 %cmp1, label %if.end, label %cleanup, !dbg !11829

if.end:                                           ; preds = %while.body
  %call2 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %2) #7, !dbg !11830
  %call3 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call2) #7, !dbg !11832
  %cmp4 = icmp eq i32 %call3, 3, !dbg !11833
  br i1 %cmp4, label %if.end6, label %cleanup, !dbg !11834

if.end6:                                          ; preds = %if.end
  %call7 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %2) #7, !dbg !11835
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !11816, metadata !DIExpression()), !dbg !11820
  br label %cleanup, !dbg !11836

cleanup:                                          ; preds = %if.end, %while.body, %if.end6
  %cleanup.dest.slot.0 = phi i1 [ true, %if.end6 ], [ false, %while.body ], [ false, %if.end ]
  %t.addr.1 = phi %union.tree_node* [ %call7, %if.end6 ], [ %t.addr.0, %while.body ], [ %t.addr.0, %if.end ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.1, metadata !11816, metadata !DIExpression()), !dbg !11820
  br i1 %cleanup.dest.slot.0, label %while.cond, label %do.end.loopexit4, !llvm.loop !11837

while.end:                                        ; preds = %while.cond
  %t.addr.0.lcssa = phi %union.tree_node* [ %t.addr.0, %while.cond ]
  %bf.load.lcssa = phi i64 [ %bf.load, %while.cond ], !dbg !11822
  %bf.cast1.lcssa = phi i64 [ %bf.cast1, %while.cond ], !dbg !11823
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0.lcssa, metadata !11816, metadata !DIExpression()), !dbg !11820
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0.lcssa, metadata !11816, metadata !DIExpression()), !dbg !11820
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0.lcssa, metadata !11816, metadata !DIExpression()), !dbg !11820
  %cmp12 = icmp eq i64 %bf.cast1.lcssa, 121, !dbg !11838
  br i1 %cmp12, label %do.body.preheader, label %do.end, !dbg !11840

do.body.preheader:                                ; preds = %while.end
  br label %do.body, !dbg !11841

do.body:                                          ; preds = %if.end21.do.body_crit_edge, %do.body.preheader
  %bf.load16 = phi i64 [ %bf.load16.pre, %if.end21.do.body_crit_edge ], [ %bf.load.lcssa, %do.body.preheader ], !dbg !11842
  %t.addr.2 = phi %union.tree_node* [ %3, %if.end21.do.body_crit_edge ], [ %t.addr.0.lcssa, %do.body.preheader ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.2, metadata !11816, metadata !DIExpression()), !dbg !11820
  %bf.cast183 = and i64 %bf.load16, 65535, !dbg !11845
  %cmp19 = icmp eq i64 %bf.cast183, 45, !dbg !11845
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !11846

if.then20:                                        ; preds = %do.body
  tail call fastcc void @check_array_ref(i32 %location, %union.tree_node* %t.addr.2, i8 zeroext 1) #7, !dbg !11847
  br label %if.end21, !dbg !11847

if.end21:                                         ; preds = %if.then20, %do.body
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !11848
  %3 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !11848
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !11816, metadata !DIExpression()), !dbg !11820
  %call22 = tail call fastcc zeroext i8 @handled_component_p(%union.tree_node* %3) #7, !dbg !11849
  %tobool = icmp eq i8 %call22, 0, !dbg !11850
  br i1 %tobool, label %do.end.loopexit, label %if.end21.do.body_crit_edge, !dbg !11850, !llvm.loop !11851

if.end21.do.body_crit_edge:                       ; preds = %if.end21
  %.phi.trans.insert = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11853
  %bf.load16.pre = load i64, i64* %.phi.trans.insert, align 8, !dbg !11842
  br label %do.body, !dbg !11850

do.end.loopexit:                                  ; preds = %if.end21
  br label %do.end, !dbg !11854

do.end.loopexit4:                                 ; preds = %cleanup
  br label %do.end, !dbg !11854

do.end:                                           ; preds = %do.end.loopexit4, %do.end.loopexit, %while.end
  ret void, !dbg !11854
}

declare dso_local i8* @memset(i8*, i32, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32* @gimple_location_ptr(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !11855 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !11861, metadata !DIExpression()), !dbg !11862
  %location = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 2, !dbg !11863
  ret i32* %location, !dbg !11864
}

declare dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @check_array_bounds(%union.tree_node** %tp, i32* %walk_subtree, i8* %data) #5 !dbg !11865 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !11869, metadata !DIExpression()), !dbg !11878
  call void @llvm.dbg.value(metadata i32* %walk_subtree, metadata !11870, metadata !DIExpression()), !dbg !11878
  call void @llvm.dbg.value(metadata i8* %data, metadata !11871, metadata !DIExpression()), !dbg !11878
  %0 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !11879
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !11872, metadata !DIExpression()), !dbg !11878
  call void @llvm.dbg.value(metadata i8* %data, metadata !11873, metadata !DIExpression()), !dbg !11878
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11880
  %bf.load = load i64, i64* %1, align 8, !dbg !11880
  %bf.cast = and i64 %bf.load, 65535, !dbg !11880
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !11880
  %2 = load i32, i32* %arrayidx, align 4, !dbg !11880
  %cmp = icmp ugt i32 %2, 3, !dbg !11880
  br i1 %cmp, label %land.lhs.true, label %cond.end, !dbg !11880

land.lhs.true:                                    ; preds = %entry
  %cmp7 = icmp ult i32 %2, 11, !dbg !11880
  br i1 %cmp7, label %cond.true, label %cond.end, !dbg !11880

cond.true:                                        ; preds = %land.lhs.true
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !11880
  %4 = load i32, i32* %3, align 8, !dbg !11880
  %phitmp = icmp ne i32 %4, 0, !dbg !11880
  br label %cond.end, !dbg !11880

cond.end:                                         ; preds = %entry, %land.lhs.true, %cond.true
  %cond = phi i1 [ %phitmp, %cond.true ], [ false, %land.lhs.true ], [ false, %entry ]
  br i1 %cond, label %if.then, label %if.else, !dbg !11881

if.then:                                          ; preds = %cond.end
  br i1 %cmp, label %land.lhs.true16, label %if.end, !dbg !11882

land.lhs.true16:                                  ; preds = %if.then
  %cmp23 = icmp ult i32 %2, 11, !dbg !11882
  br i1 %cmp23, label %cond.true24, label %if.end, !dbg !11882

cond.true24:                                      ; preds = %land.lhs.true16
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !11882
  %6 = load i32, i32* %5, align 8, !dbg !11882
  br label %if.end, !dbg !11882

if.else:                                          ; preds = %cond.end
  %info = getelementptr inbounds i8, i8* %data, i64 24, !dbg !11883
  %7 = bitcast i8* %info to i32**, !dbg !11883
  %8 = load i32*, i32** %7, align 8, !dbg !11883
  call void @llvm.dbg.value(metadata i32* %8, metadata !11875, metadata !DIExpression()), !dbg !11884
  %9 = load i32, i32* %8, align 4, !dbg !11885
  call void @llvm.dbg.value(metadata i32 %9, metadata !11874, metadata !DIExpression()), !dbg !11878
  br label %if.end

if.end:                                           ; preds = %cond.true24, %land.lhs.true16, %if.then, %if.else
  %location.0 = phi i32 [ %9, %if.else ], [ %6, %cond.true24 ], [ 0, %land.lhs.true16 ], [ 0, %if.then ], !dbg !11886
  call void @llvm.dbg.value(metadata i32 %location.0, metadata !11874, metadata !DIExpression()), !dbg !11878
  store i32 1, i32* %walk_subtree, align 4, !dbg !11887
  %bf.load31 = load i64, i64* %1, align 8, !dbg !11888
  %bf.cast331 = and i64 %bf.load31, 65535, !dbg !11890
  %cmp34 = icmp eq i64 %bf.cast331, 45, !dbg !11890
  br i1 %cmp34, label %if.then35, label %if.end36, !dbg !11891

if.then35:                                        ; preds = %if.end
  tail call fastcc void @check_array_ref(i32 %location.0, %union.tree_node* %0, i8 zeroext 0) #7, !dbg !11892
  %bf.load38.pre = load i64, i64* %1, align 8, !dbg !11893
  br label %if.end36, !dbg !11892

if.end36:                                         ; preds = %if.then35, %if.end
  %bf.load43 = phi i64 [ %bf.load38.pre, %if.then35 ], [ %bf.load31, %if.end ], !dbg !11893
  %bf.cast402 = and i64 %bf.load43, 65535, !dbg !11895
  %cmp41 = icmp eq i64 %bf.cast402, 47, !dbg !11895
  br i1 %cmp41, label %if.end36.if.then50_crit_edge, label %lor.lhs.false, !dbg !11896

if.end36.if.then50_crit_edge:                     ; preds = %if.end36
  %operands52.phi.trans.insert = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !11897
  %.pre = load %union.tree_node*, %union.tree_node** %operands52.phi.trans.insert, align 8, !dbg !11898
  br label %if.then50, !dbg !11896

lor.lhs.false:                                    ; preds = %if.end36
  %cmp46 = icmp eq i64 %bf.cast402, 135, !dbg !11899
  br i1 %cmp46, label %land.lhs.true47, label %if.end54, !dbg !11900

land.lhs.true47:                                  ; preds = %lor.lhs.false
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !11901
  %10 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !11901
  %tobool = icmp eq %union.tree_node* %10, null, !dbg !11901
  br i1 %tobool, label %if.end54, label %if.then50, !dbg !11902

if.then50:                                        ; preds = %if.end36.if.then50_crit_edge, %land.lhs.true47
  %11 = phi %union.tree_node* [ %.pre, %if.end36.if.then50_crit_edge ], [ %10, %land.lhs.true47 ], !dbg !11898
  tail call fastcc void @search_for_addr_array(%union.tree_node* %11, i32 %location.0) #7, !dbg !11903
  %bf.load56.pre = load i64, i64* %1, align 8, !dbg !11904
  br label %if.end54, !dbg !11903

if.end54:                                         ; preds = %land.lhs.true47, %if.then50, %lor.lhs.false
  %bf.load56 = phi i64 [ %bf.load43, %land.lhs.true47 ], [ %bf.load56.pre, %if.then50 ], [ %bf.load43, %lor.lhs.false ], !dbg !11904
  %bf.cast584 = and i64 %bf.load56, 65535, !dbg !11906
  %cmp59 = icmp eq i64 %bf.cast584, 121, !dbg !11906
  br i1 %cmp59, label %if.then60, label %if.end61, !dbg !11907

if.then60:                                        ; preds = %if.end54
  store i32 0, i32* %walk_subtree, align 4, !dbg !11908
  br label %if.end61, !dbg !11909

if.end61:                                         ; preds = %if.then60, %if.end54
  ret %union.tree_node* null, !dbg !11910
}

; Function Attrs: nounwind uwtable
define internal fastcc void @check_array_ref(i32 %location, %union.tree_node* %ref, i8 zeroext %ignore_off_by_one) unnamed_addr #5 !dbg !11911 {
entry:
  call void @llvm.dbg.value(metadata i32 %location, metadata !11915, metadata !DIExpression()), !dbg !11923
  call void @llvm.dbg.value(metadata %union.tree_node* %ref, metadata !11916, metadata !DIExpression()), !dbg !11923
  call void @llvm.dbg.value(metadata i8 %ignore_off_by_one, metadata !11917, metadata !DIExpression()), !dbg !11923
  call void @llvm.dbg.value(metadata %struct.value_range_d* null, metadata !11918, metadata !DIExpression()), !dbg !11923
  %call = tail call %union.tree_node* @array_ref_up_bound(%union.tree_node* %ref) #6, !dbg !11924
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !11922, metadata !DIExpression()), !dbg !11923
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %ref, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !11925
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !11925
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !11925
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !11920, metadata !DIExpression()), !dbg !11923
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !11919, metadata !DIExpression()), !dbg !11923
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !11926
  br i1 %tobool, label %cleanup.cont, label %lor.lhs.false, !dbg !11928

lor.lhs.false:                                    ; preds = %entry
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %ref, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11929
  %bf.load = load i64, i64* %1, align 8, !dbg !11929
  %bf.cast1 = and i64 %bf.load, 8388608, !dbg !11929
  %tobool1 = icmp eq i64 %bf.cast1, 0, !dbg !11929
  br i1 %tobool1, label %lor.lhs.false2, label %cleanup.cont, !dbg !11930

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11931
  %bf.load4 = load i64, i64* %2, align 8, !dbg !11931
  %bf.cast62 = and i64 %bf.load4, 65535, !dbg !11932
  %cmp = icmp eq i64 %bf.cast62, 23, !dbg !11932
  br i1 %cmp, label %lor.lhs.false7, label %cleanup.cont, !dbg !11933

lor.lhs.false7:                                   ; preds = %lor.lhs.false2
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %ref, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !11934
  %3 = bitcast %union.tree_node** %type to %struct.tree_type**, !dbg !11934
  %4 = load %struct.tree_type*, %struct.tree_type** %3, align 8, !dbg !11934
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %4, i64 0, i32 2, !dbg !11934
  %5 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !11934
  %cmp9 = icmp eq %union.tree_node* %5, null, !dbg !11935
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false21, !dbg !11936

land.lhs.true:                                    ; preds = %lor.lhs.false7
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %4, i64 0, i32 1, !dbg !11937
  %6 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !11937
  %cmp13 = icmp eq %union.tree_node* %6, null, !dbg !11938
  br i1 %cmp13, label %lor.lhs.false21, label %land.lhs.true14, !dbg !11939

land.lhs.true14:                                  ; preds = %land.lhs.true
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !11940
  %7 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !11940
  %8 = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !11940
  %cmp20 = icmp eq %union.tree_node* %8, null, !dbg !11941
  br i1 %cmp20, label %cleanup.cont, label %lor.lhs.false21, !dbg !11942

lor.lhs.false21:                                  ; preds = %land.lhs.true, %land.lhs.true14, %lor.lhs.false7
  %call22 = tail call i32 @compare_tree_int(%union.tree_node* nonnull %call, i64 1) #6, !dbg !11943
  %cmp23 = icmp slt i32 %call22, 1, !dbg !11944
  br i1 %cmp23, label %cleanup.cont, label %if.end, !dbg !11945

if.end:                                           ; preds = %lor.lhs.false21
  %call24 = tail call %union.tree_node* @array_ref_low_bound(%union.tree_node* %ref) #6, !dbg !11946
  call void @llvm.dbg.value(metadata %union.tree_node* %call24, metadata !11921, metadata !DIExpression()), !dbg !11923
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11947
  %bf.load26 = load i64, i64* %9, align 8, !dbg !11947
  %bf.cast283 = and i64 %bf.load26, 65535, !dbg !11949
  %cmp29 = icmp eq i64 %bf.cast283, 141, !dbg !11949
  br i1 %cmp29, label %if.then30, label %if.end49, !dbg !11950

if.then30:                                        ; preds = %if.end
  %call31 = tail call fastcc %struct.value_range_d* @get_value_range(%union.tree_node* %0) #7, !dbg !11951
  call void @llvm.dbg.value(metadata %struct.value_range_d* %call31, metadata !11918, metadata !DIExpression()), !dbg !11923
  %type32 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call31, i64 0, i32 0, !dbg !11953
  %10 = load i32, i32* %type32, align 8, !dbg !11953
  %cmp33 = icmp eq i32 %10, 1, !dbg !11955
  br i1 %cmp33, label %if.then37, label %lor.lhs.false34, !dbg !11956

lor.lhs.false34:                                  ; preds = %if.then30
  %cmp36 = icmp eq i32 %10, 2, !dbg !11957
  br i1 %cmp36, label %if.then37, label %if.end49, !dbg !11958

if.then37:                                        ; preds = %lor.lhs.false34, %if.then30
  br i1 %cmp33, label %cond.true, label %cond.false, !dbg !11959

cond.true:                                        ; preds = %if.then37
  %max = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call31, i64 0, i32 2, !dbg !11961
  br label %cond.end, !dbg !11959

cond.false:                                       ; preds = %if.then37
  %min = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call31, i64 0, i32 1, !dbg !11962
  br label %cond.end, !dbg !11959

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi %union.tree_node** [ %max, %cond.true ], [ %min, %cond.false ]
  %cond = load %union.tree_node*, %union.tree_node** %cond.in, align 8, !dbg !11959
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !11919, metadata !DIExpression()), !dbg !11923
  br i1 %cmp33, label %cond.true42, label %cond.false44, !dbg !11963

cond.true42:                                      ; preds = %cond.end
  %min43 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call31, i64 0, i32 1, !dbg !11964
  %11 = load %union.tree_node*, %union.tree_node** %min43, align 8, !dbg !11964
  br label %if.end49, !dbg !11963

cond.false44:                                     ; preds = %cond.end
  %max45 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %call31, i64 0, i32 2, !dbg !11965
  %12 = load %union.tree_node*, %union.tree_node** %max45, align 8, !dbg !11965
  br label %if.end49, !dbg !11963

if.end49:                                         ; preds = %lor.lhs.false34, %cond.false44, %cond.true42, %if.end
  %vr.0 = phi %struct.value_range_d* [ null, %if.end ], [ %call31, %cond.true42 ], [ %call31, %cond.false44 ], [ %call31, %lor.lhs.false34 ], !dbg !11923
  %low_sub.1 = phi %union.tree_node* [ %0, %if.end ], [ %cond, %cond.true42 ], [ %cond, %cond.false44 ], [ %0, %lor.lhs.false34 ], !dbg !11923
  %up_sub.1 = phi %union.tree_node* [ %0, %if.end ], [ %11, %cond.true42 ], [ %12, %cond.false44 ], [ %0, %lor.lhs.false34 ], !dbg !11923
  call void @llvm.dbg.value(metadata %union.tree_node* %up_sub.1, metadata !11920, metadata !DIExpression()), !dbg !11923
  call void @llvm.dbg.value(metadata %union.tree_node* %low_sub.1, metadata !11919, metadata !DIExpression()), !dbg !11923
  call void @llvm.dbg.value(metadata %struct.value_range_d* %vr.0, metadata !11918, metadata !DIExpression()), !dbg !11923
  %tobool50 = icmp eq %struct.value_range_d* %vr.0, null, !dbg !11966
  br i1 %tobool50, label %if.else, label %land.lhs.true51, !dbg !11968

land.lhs.true51:                                  ; preds = %if.end49
  %type52 = getelementptr inbounds %struct.value_range_d, %struct.value_range_d* %vr.0, i64 0, i32 0, !dbg !11969
  %13 = load i32, i32* %type52, align 8, !dbg !11969
  %cmp53 = icmp eq i32 %13, 2, !dbg !11970
  br i1 %cmp53, label %if.then54, label %if.else, !dbg !11971

if.then54:                                        ; preds = %land.lhs.true51
  %14 = getelementptr inbounds %union.tree_node, %union.tree_node* %up_sub.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11972
  %bf.load56 = load i64, i64* %14, align 8, !dbg !11972
  %bf.cast586 = and i64 %bf.load56, 65535, !dbg !11975
  %cmp59 = icmp eq i64 %bf.cast586, 23, !dbg !11975
  br i1 %cmp59, label %land.lhs.true60, label %cleanup.cont, !dbg !11976

land.lhs.true60:                                  ; preds = %if.then54
  %call61 = tail call i32 @tree_int_cst_lt(%union.tree_node* nonnull %call, %union.tree_node* %up_sub.1) #6, !dbg !11977
  %tobool62 = icmp eq i32 %call61, 0, !dbg !11977
  br i1 %tobool62, label %cleanup.cont, label %land.lhs.true63, !dbg !11978

land.lhs.true63:                                  ; preds = %land.lhs.true60
  %15 = getelementptr inbounds %union.tree_node, %union.tree_node* %low_sub.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11979
  %bf.load65 = load i64, i64* %15, align 8, !dbg !11979
  %bf.cast677 = and i64 %bf.load65, 65535, !dbg !11980
  %cmp68 = icmp eq i64 %bf.cast677, 23, !dbg !11980
  br i1 %cmp68, label %land.lhs.true69, label %cleanup.cont, !dbg !11981

land.lhs.true69:                                  ; preds = %land.lhs.true63
  %call70 = tail call i32 @tree_int_cst_lt(%union.tree_node* %low_sub.1, %union.tree_node* %call24) #6, !dbg !11982
  %tobool71 = icmp eq i32 %call70, 0, !dbg !11982
  br i1 %tobool71, label %cleanup.cont, label %if.then72, !dbg !11983

if.then72:                                        ; preds = %land.lhs.true69
  %call73 = tail call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %location, i32 41, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.68, i64 0, i64 0)) #6, !dbg !11984
  %bf.load75 = load i64, i64* %1, align 8, !dbg !11986
  %bf.set = or i64 %bf.load75, 8388608, !dbg !11986
  store i64 %bf.set, i64* %1, align 8, !dbg !11986
  br label %cleanup.cont, !dbg !11987

if.else:                                          ; preds = %if.end49, %land.lhs.true51
  %16 = getelementptr inbounds %union.tree_node, %union.tree_node* %up_sub.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !11988
  %bf.load79 = load i64, i64* %16, align 8, !dbg !11988
  %bf.cast814 = and i64 %bf.load79, 65535, !dbg !11990
  %cmp82 = icmp eq i64 %bf.cast814, 23, !dbg !11990
  br i1 %cmp82, label %land.lhs.true83, label %if.else101, !dbg !11991

land.lhs.true83:                                  ; preds = %if.else
  %call84 = tail call i32 @tree_int_cst_lt(%union.tree_node* nonnull %call, %union.tree_node* %up_sub.1) #6, !dbg !11992
  %tobool85 = icmp eq i32 %call84, 0, !dbg !11992
  br i1 %tobool85, label %if.else101, label %land.lhs.true86, !dbg !11993

land.lhs.true86:                                  ; preds = %land.lhs.true83
  %call87 = tail call i32 @tree_int_cst_equal(%union.tree_node* nonnull %call, %union.tree_node* %up_sub.1) #6, !dbg !11994
  %tobool88 = icmp eq i32 %call87, 0, !dbg !11994
  br i1 %tobool88, label %land.lhs.true89, label %if.else101, !dbg !11995

land.lhs.true89:                                  ; preds = %land.lhs.true86
  %tobool90 = icmp eq i8 %ignore_off_by_one, 0, !dbg !11996
  br i1 %tobool90, label %if.then95, label %lor.lhs.false91, !dbg !11997

lor.lhs.false91:                                  ; preds = %land.lhs.true89
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 14), align 16, !dbg !11998
  %call92 = tail call %union.tree_node* @int_const_binop(i32 63, %union.tree_node* nonnull %call, %union.tree_node* %17, i32 0) #6, !dbg !11999
  %call93 = tail call i32 @tree_int_cst_equal(%union.tree_node* %call92, %union.tree_node* %up_sub.1) #6, !dbg !12000
  %tobool94 = icmp eq i32 %call93, 0, !dbg !12000
  br i1 %tobool94, label %if.then95, label %if.else101, !dbg !12001

if.then95:                                        ; preds = %lor.lhs.false91, %land.lhs.true89
  %call96 = tail call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %location, i32 41, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.69, i64 0, i64 0)) #6, !dbg !12002
  %bf.load98 = load i64, i64* %1, align 8, !dbg !12004
  %bf.set100 = or i64 %bf.load98, 8388608, !dbg !12004
  store i64 %bf.set100, i64* %1, align 8, !dbg !12004
  br label %cleanup.cont, !dbg !12005

if.else101:                                       ; preds = %lor.lhs.false91, %land.lhs.true86, %land.lhs.true83, %if.else
  %18 = getelementptr inbounds %union.tree_node, %union.tree_node* %low_sub.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !12006
  %bf.load103 = load i64, i64* %18, align 8, !dbg !12006
  %bf.cast1055 = and i64 %bf.load103, 65535, !dbg !12008
  %cmp106 = icmp eq i64 %bf.cast1055, 23, !dbg !12008
  br i1 %cmp106, label %land.lhs.true107, label %cleanup.cont, !dbg !12009

land.lhs.true107:                                 ; preds = %if.else101
  %call108 = tail call i32 @tree_int_cst_lt(%union.tree_node* %low_sub.1, %union.tree_node* %call24) #6, !dbg !12010
  %tobool109 = icmp eq i32 %call108, 0, !dbg !12010
  br i1 %tobool109, label %cleanup.cont, label %if.then110, !dbg !12011

if.then110:                                       ; preds = %land.lhs.true107
  %call111 = tail call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %location, i32 41, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.70, i64 0, i64 0)) #6, !dbg !12012
  %bf.load113 = load i64, i64* %1, align 8, !dbg !12014
  %bf.set115 = or i64 %bf.load113, 8388608, !dbg !12014
  store i64 %bf.set115, i64* %1, align 8, !dbg !12014
  br label %cleanup.cont, !dbg !12015

cleanup.cont:                                     ; preds = %land.lhs.true69, %land.lhs.true60, %land.lhs.true107, %lor.lhs.false2, %lor.lhs.false, %entry, %lor.lhs.false21, %land.lhs.true14, %if.then95, %if.then110, %if.else101, %if.then54, %land.lhs.true63, %if.then72
  ret void, !dbg !12016
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @handled_component_p(%union.tree_node* %t) unnamed_addr #0 !dbg !12017 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !12019, metadata !DIExpression()), !dbg !12020
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !12021
  %bf.load = load i64, i64* %0, align 8, !dbg !12021
  %1 = trunc i64 %bf.load to i16, !dbg !12021
  switch i16 %1, label %sw.default [
    i16 42, label %return
    i16 41, label %return
    i16 45, label %return
    i16 46, label %return
    i16 118, label %return
    i16 43, label %return
    i16 44, label %return
  ], !dbg !12022

sw.default:                                       ; preds = %entry
  br label %return, !dbg !12023

return:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.default
  %retval.0 = phi i8 [ 0, %sw.default ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], !dbg !12025
  ret i8 %retval.0, !dbg !12026
}

declare dso_local %union.tree_node* @array_ref_up_bound(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @mark_dfs_back_edges() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !12027 {
entry:
  call void @llvm.dbg.value(metadata i32 20, metadata !12031, metadata !DIExpression()), !dbg !12032
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 20) #6, !dbg !12033
  %0 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !12033
  ret %struct.VEC_tree_heap* %0, !dbg !12033
}

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @potentially_threadable_block(%struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) unnamed_addr #0 !dbg !12034 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !12036, metadata !DIExpression()), !dbg !12039
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !12037, metadata !DIExpression()), !dbg !12040
  %call = tail call fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #7, !dbg !12041
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !12038, metadata !DIExpression()), !dbg !12039
  %call1 = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %call) #7, !dbg !12042
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !12043
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !12044
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !12045
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq2, align 8, !dbg !12046
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !12047
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb3, align 8, !dbg !12048
  ret void, !dbg !12049
}

declare dso_local void @thread_across_edge(%union.gimple_statement_d*, %struct.edge_def*, i8 zeroext, %struct.VEC_tree_heap**, %union.tree_node* (%union.gimple_statement_d*, %union.gimple_statement_d*)*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @simplify_stmt_for_jump_threading(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %within_stmt) #5 !dbg !12050 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !12054, metadata !DIExpression()), !dbg !12056
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %within_stmt, metadata !12055, metadata !DIExpression()), !dbg !12056
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !12057
  %cmp = icmp eq i32 %call, 1, !dbg !12059
  br i1 %cmp, label %if.end, label %return, !dbg !12060

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %stmt) #7, !dbg !12061
  %call2 = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !12062
  %call3 = tail call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %stmt) #7, !dbg !12063
  %call4 = tail call fastcc %union.tree_node* @vrp_evaluate_conditional(i32 %call1, %union.tree_node* %call2, %union.tree_node* %call3, %union.gimple_statement_d* %within_stmt) #7, !dbg !12064
  br label %return, !dbg !12065

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %call4, %if.end ], [ null, %entry ], !dbg !12056
  ret %union.tree_node* %retval.0, !dbg !12066
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !12067 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !12069, metadata !DIExpression()), !dbg !12070
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !12071
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !12071

cond.true:                                        ; preds = %entry
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 1, !dbg !12072
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !12072
  br label %cond.end, !dbg !12071

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !12071
  ret %struct.gimple_seq_node_d* %cond, !dbg !12073
}

declare dso_local %union.tree_node* @fold(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) unnamed_addr #0 !dbg !12074 {
entry:
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !12079, metadata !DIExpression()), !dbg !12081
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !12080, metadata !DIExpression()), !dbg !12081
  %imm_uses = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !12082
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 1, !dbg !12083
  %0 = bitcast %struct.ssa_use_operand_d** %end_p to i40**, !dbg !12084
  store i40* %imm_uses, i40** %0, align 8, !dbg !12084
  %next = getelementptr inbounds i40, i40* %imm_uses, i64 1, !dbg !12085
  %1 = bitcast i40* %next to i64*, !dbg !12085
  %2 = load i64, i64* %1, align 8, !dbg !12085
  %3 = bitcast %struct.immediate_use_iterator_d* %imm to i64*, !dbg !12086
  store i64 %2, i64* %3, align 8, !dbg !12086
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 3, !dbg !12087
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !12088
  %prev = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 0, !dbg !12089
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12090
  %next3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 1, !dbg !12091
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !12092
  %stmt = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 2, i32 0, !dbg !12093
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !12094
  %use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 3, !dbg !12095
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !12096
  %call = tail call fastcc zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #7, !dbg !12097
  %tobool = icmp eq i8 %call, 0, !dbg !12097
  br i1 %tobool, label %if.end, label %return, !dbg !12099

if.end:                                           ; preds = %entry
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 0, !dbg !12100
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !12100
  tail call fastcc void @link_use_stmts_after(%struct.ssa_use_operand_d* %4, %struct.immediate_use_iterator_d* %imm) #7, !dbg !12101
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !12102
  %stmt9 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i64 0, i32 2, i32 0, !dbg !12102
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !12102
  br label %return, !dbg !12103

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.gimple_statement_d* [ %6, %if.end ], [ null, %entry ], !dbg !12081
  ret %union.gimple_statement_d* %retval.0, !dbg !12104
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) unnamed_addr #0 !dbg !12105 {
entry:
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !12111, metadata !DIExpression()), !dbg !12112
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 0, !dbg !12113
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !12113
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 1, !dbg !12114
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !12114
  %cmp = icmp eq %struct.ssa_use_operand_d* %0, %1, !dbg !12115
  %conv1 = zext i1 %cmp to i8, !dbg !12116
  ret i8 %conv1, !dbg !12117
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @first_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) unnamed_addr #0 !dbg !12118 {
entry:
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !12122, metadata !DIExpression()), !dbg !12123
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 0, !dbg !12124
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !12124
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i64 0, i32 1, !dbg !12125
  %1 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !12125
  %2 = load i64, i64* %1, align 8, !dbg !12125
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 3, !dbg !12126
  %3 = bitcast %struct.ssa_use_operand_d** %next_imm_name to i64*, !dbg !12127
  store i64 %2, i64* %3, align 8, !dbg !12127
  ret %struct.ssa_use_operand_d* %0, !dbg !12128
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) unnamed_addr #0 !dbg !12129 {
entry:
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !12131, metadata !DIExpression()), !dbg !12132
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 0, !dbg !12133
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !12133
  %iter_node = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, !dbg !12134
  %cmp = icmp eq %struct.ssa_use_operand_d* %0, %iter_node, !dbg !12135
  %conv1 = zext i1 %cmp to i8, !dbg !12136
  ret i8 %conv1, !dbg !12137
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) unnamed_addr #0 !dbg !12138 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use, metadata !12142, metadata !DIExpression()), !dbg !12144
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !12143, metadata !DIExpression()), !dbg !12144
  tail call fastcc void @delink_imm_use(%struct.ssa_use_operand_d* %use) #7, !dbg !12145
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use, i64 0, i32 3, !dbg !12146
  %0 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !12146
  store %union.tree_node* %val, %union.tree_node** %0, align 8, !dbg !12147
  tail call fastcc void @link_imm_use(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #7, !dbg !12148
  ret void, !dbg !12149
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @next_imm_use_on_stmt(%struct.immediate_use_iterator_d* %imm) unnamed_addr #0 !dbg !12150 {
entry:
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !12152, metadata !DIExpression()), !dbg !12153
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 3, !dbg !12154
  %0 = bitcast %struct.ssa_use_operand_d** %next_imm_name to i64*, !dbg !12154
  %1 = load i64, i64* %0, align 8, !dbg !12154
  %2 = bitcast %struct.immediate_use_iterator_d* %imm to i64*, !dbg !12155
  store i64 %1, i64* %2, align 8, !dbg !12155
  %call = tail call fastcc zeroext i8 @end_imm_use_on_stmt_p(%struct.immediate_use_iterator_d* %imm) #7, !dbg !12156
  %tobool = icmp eq i8 %call, 0, !dbg !12156
  br i1 %tobool, label %if.else, label %return, !dbg !12158

if.else:                                          ; preds = %entry
  %imm_use1 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 0, !dbg !12159
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use1, align 8, !dbg !12159
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i64 0, i32 1, !dbg !12161
  %4 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !12161
  %5 = load i64, i64* %4, align 8, !dbg !12161
  store i64 %5, i64* %0, align 8, !dbg !12162
  br label %return, !dbg !12163

return:                                           ; preds = %entry, %if.else
  %retval.0 = phi %struct.ssa_use_operand_d* [ %3, %if.else ], [ null, %entry ], !dbg !12164
  ret %struct.ssa_use_operand_d* %retval.0, !dbg !12165
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) unnamed_addr #0 !dbg !12166 {
entry:
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !12170, metadata !DIExpression()), !dbg !12171
  %next = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 1, !dbg !12172
  %0 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !12172
  %1 = load i64, i64* %0, align 8, !dbg !12172
  %2 = bitcast %struct.immediate_use_iterator_d* %imm to i64*, !dbg !12173
  store i64 %1, i64* %2, align 8, !dbg !12173
  %call = tail call fastcc zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #7, !dbg !12174
  %tobool = icmp eq i8 %call, 0, !dbg !12174
  br i1 %tobool, label %if.end4, label %if.then, !dbg !12176

if.then:                                          ; preds = %entry
  %prev = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 0, !dbg !12177
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12177
  %cmp = icmp eq %struct.ssa_use_operand_d* %3, null, !dbg !12180
  br i1 %cmp, label %return, label %if.then2, !dbg !12181

if.then2:                                         ; preds = %if.then
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, !dbg !12182
  tail call fastcc void @delink_imm_use(%struct.ssa_use_operand_d* nonnull %iter_node3) #7, !dbg !12183
  br label %return, !dbg !12183

if.end4:                                          ; preds = %entry
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 0, !dbg !12184
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !12184
  tail call fastcc void @link_use_stmts_after(%struct.ssa_use_operand_d* %4, %struct.immediate_use_iterator_d* %imm) #7, !dbg !12185
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !12186
  %stmt = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i64 0, i32 2, i32 0, !dbg !12186
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12186
  br label %return, !dbg !12187

return:                                           ; preds = %if.then, %if.then2, %if.end4
  %retval.0 = phi %union.gimple_statement_d* [ %6, %if.end4 ], [ null, %if.then2 ], [ null, %if.then ], !dbg !12171
  ret %union.gimple_statement_d* %retval.0, !dbg !12188
}

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) local_unnamed_addr #2

declare dso_local void @release_defs(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) unnamed_addr #0 !dbg !12189 {
entry:
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %head, metadata !12193, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !12194, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %head, metadata !12196, metadata !DIExpression()), !dbg !12201
  %stmt = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %head, i64 0, i32 2, i32 0, !dbg !12202
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !12202
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %0, metadata !12197, metadata !DIExpression()), !dbg !12201
  %call = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %head) #7, !dbg !12203
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !12198, metadata !DIExpression()), !dbg !12201
  %1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %op_iter, i64 0, i32 0, !dbg !12204
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %1) #8, !dbg !12204
  %call1 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %call) #6, !dbg !12205
  %tobool = icmp eq i8 %call1, 0, !dbg !12205
  %cond = select i1 %tobool, i32 4, i32 1, !dbg !12205
  call void @llvm.dbg.value(metadata i32 %cond, metadata !12200, metadata !DIExpression()), !dbg !12201
  %call2 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %0) #7, !dbg !12206
  %cmp = icmp eq i32 %call2, 16, !dbg !12208
  br i1 %cmp, label %if.then, label %if.else, !dbg !12209

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !12199, metadata !DIExpression(DW_OP_deref)), !dbg !12201
  %call4 = call fastcc %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* nonnull %op_iter, %union.gimple_statement_d* %0, i32 %cond) #7, !dbg !12210
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call4, metadata !12195, metadata !DIExpression()), !dbg !12201
  br label %for.cond, !dbg !12210

for.cond:                                         ; preds = %for.inc, %if.then
  %use_p.0 = phi %struct.ssa_use_operand_d* [ %call4, %if.then ], [ %call12, %for.inc ], !dbg !12213
  %last_p.0 = phi %struct.ssa_use_operand_d* [ %head, %if.then ], [ %last_p.1, %for.inc ], !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.0, metadata !12196, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_p.0, metadata !12195, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !12199, metadata !DIExpression(DW_OP_deref)), !dbg !12201
  %call5 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %op_iter) #7, !dbg !12214
  %tobool6 = icmp eq i8 %call5, 0, !dbg !12214
  br i1 %tobool6, label %for.body, label %if.end44.loopexit, !dbg !12210

for.body:                                         ; preds = %for.cond
  %call7 = call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_p.0) #7, !dbg !12216
  %cmp8 = icmp eq %union.tree_node* %call7, %call, !dbg !12218
  br i1 %cmp8, label %if.then10, label %for.inc, !dbg !12219

if.then10:                                        ; preds = %for.body
  %call11 = call fastcc %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p.0, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p.0) #7, !dbg !12220
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call11, metadata !12196, metadata !DIExpression()), !dbg !12201
  br label %for.inc, !dbg !12221

for.inc:                                          ; preds = %for.body, %if.then10
  %last_p.1 = phi %struct.ssa_use_operand_d* [ %call11, %if.then10 ], [ %last_p.0, %for.body ], !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.1, metadata !12196, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !12199, metadata !DIExpression(DW_OP_deref)), !dbg !12201
  %call12 = call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* nonnull %op_iter) #7, !dbg !12214
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call12, metadata !12195, metadata !DIExpression()), !dbg !12201
  br label %for.cond, !dbg !12214, !llvm.loop !12222

if.else:                                          ; preds = %entry
  br i1 %tobool, label %if.else31, label %if.then15, !dbg !12224

if.then15:                                        ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !12199, metadata !DIExpression(DW_OP_deref)), !dbg !12201
  %call16 = call fastcc %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* nonnull %op_iter, %union.gimple_statement_d* %0, i32 %cond) #7, !dbg !12226
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call16, metadata !12195, metadata !DIExpression()), !dbg !12201
  br label %for.cond17, !dbg !12226

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %use_p.1 = phi %struct.ssa_use_operand_d* [ %call16, %if.then15 ], [ %call29, %for.inc28 ], !dbg !12230
  %last_p.2 = phi %struct.ssa_use_operand_d* [ %head, %if.then15 ], [ %last_p.3, %for.inc28 ], !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.2, metadata !12196, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_p.1, metadata !12195, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !12199, metadata !DIExpression(DW_OP_deref)), !dbg !12201
  %call18 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %op_iter) #7, !dbg !12231
  %tobool19 = icmp eq i8 %call18, 0, !dbg !12231
  br i1 %tobool19, label %for.body21, label %if.end44.loopexit1, !dbg !12226

for.body21:                                       ; preds = %for.cond17
  %call22 = call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_p.1) #7, !dbg !12233
  %cmp23 = icmp eq %union.tree_node* %call22, %call, !dbg !12235
  br i1 %cmp23, label %if.then25, label %for.inc28, !dbg !12236

if.then25:                                        ; preds = %for.body21
  %call26 = call fastcc %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p.1, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p.2) #7, !dbg !12237
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call26, metadata !12196, metadata !DIExpression()), !dbg !12201
  br label %for.inc28, !dbg !12238

for.inc28:                                        ; preds = %for.body21, %if.then25
  %last_p.3 = phi %struct.ssa_use_operand_d* [ %call26, %if.then25 ], [ %last_p.2, %for.body21 ], !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.3, metadata !12196, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !12199, metadata !DIExpression(DW_OP_deref)), !dbg !12201
  %call29 = call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* nonnull %op_iter) #7, !dbg !12231
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call29, metadata !12195, metadata !DIExpression()), !dbg !12201
  br label %for.cond17, !dbg !12231, !llvm.loop !12239

if.else31:                                        ; preds = %if.else
  %call32 = tail call fastcc %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %0) #7, !dbg !12241
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call32, metadata !12195, metadata !DIExpression()), !dbg !12201
  %cmp33 = icmp eq %struct.ssa_use_operand_d* %call32, null, !dbg !12243
  br i1 %cmp33, label %if.end44, label %if.then35, !dbg !12244

if.then35:                                        ; preds = %if.else31
  %call36 = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* nonnull %call32) #7, !dbg !12245
  %cmp37 = icmp eq %union.tree_node* %call36, %call, !dbg !12248
  br i1 %cmp37, label %if.then39, label %if.end44, !dbg !12249

if.then39:                                        ; preds = %if.then35
  %call40 = tail call fastcc %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* nonnull %call32, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %head) #7, !dbg !12250
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call40, metadata !12196, metadata !DIExpression()), !dbg !12201
  br label %if.end44, !dbg !12251

if.end44.loopexit:                                ; preds = %for.cond
  %last_p.0.lcssa = phi %struct.ssa_use_operand_d* [ %last_p.0, %for.cond ], !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.0.lcssa, metadata !12196, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.0.lcssa, metadata !12196, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.0.lcssa, metadata !12196, metadata !DIExpression()), !dbg !12201
  br label %if.end44, !dbg !12252

if.end44.loopexit1:                               ; preds = %for.cond17
  %last_p.2.lcssa = phi %struct.ssa_use_operand_d* [ %last_p.2, %for.cond17 ], !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.2.lcssa, metadata !12196, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.2.lcssa, metadata !12196, metadata !DIExpression()), !dbg !12201
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.2.lcssa, metadata !12196, metadata !DIExpression()), !dbg !12201
  br label %if.end44, !dbg !12252

if.end44:                                         ; preds = %if.end44.loopexit1, %if.end44.loopexit, %if.else31, %if.then35, %if.then39
  %last_p.7 = phi %struct.ssa_use_operand_d* [ %head, %if.else31 ], [ %call40, %if.then39 ], [ %head, %if.then35 ], [ %last_p.0.lcssa, %if.end44.loopexit ], [ %last_p.2.lcssa, %if.end44.loopexit1 ], !dbg !12254
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.7, metadata !12196, metadata !DIExpression()), !dbg !12201
  %prev = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 0, !dbg !12252
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12252
  %cmp45 = icmp eq %struct.ssa_use_operand_d* %2, null, !dbg !12255
  br i1 %cmp45, label %if.end49, label %if.then47, !dbg !12256

if.then47:                                        ; preds = %if.end44
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, !dbg !12257
  call fastcc void @delink_imm_use(%struct.ssa_use_operand_d* nonnull %iter_node48) #7, !dbg !12258
  br label %if.end49, !dbg !12258

if.end49:                                         ; preds = %if.end44, %if.then47
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, !dbg !12259
  call fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* nonnull %iter_node50, %struct.ssa_use_operand_d* %last_p.7) #7, !dbg !12260
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1) #8, !dbg !12261
  ret void, !dbg !12261
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) unnamed_addr #0 !dbg !12262 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_p, metadata !12266, metadata !DIExpression()), !dbg !12269
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %head, metadata !12267, metadata !DIExpression()), !dbg !12269
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p, metadata !12268, metadata !DIExpression()), !dbg !12269
  %cmp = icmp eq %struct.ssa_use_operand_d* %use_p, %head, !dbg !12270
  br i1 %cmp, label %if.end3, label %if.then, !dbg !12272

if.then:                                          ; preds = %entry
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %last_p, i64 0, i32 1, !dbg !12273
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !12273
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %0, %use_p, !dbg !12276
  br i1 %cmp1, label %if.end3, label %if.else, !dbg !12277

if.else:                                          ; preds = %if.then
  tail call fastcc void @delink_imm_use(%struct.ssa_use_operand_d* %use_p) #7, !dbg !12278
  tail call fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %last_p) #7, !dbg !12280
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_p, metadata !12268, metadata !DIExpression()), !dbg !12269
  br label %if.end3

if.end3:                                          ; preds = %entry, %if.else, %if.then
  %last_p.addr.1 = phi %struct.ssa_use_operand_d* [ %last_p, %entry ], [ %use_p, %if.then ], [ %use_p, %if.else ]
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.addr.1, metadata !12268, metadata !DIExpression()), !dbg !12269
  ret %struct.ssa_use_operand_d* %last_p.addr.1, !dbg !12281
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !12282 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !12284, metadata !DIExpression()), !dbg !12287
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !12285, metadata !DIExpression()), !dbg !12287
  call void @llvm.dbg.value(metadata i32 %flags, metadata !12286, metadata !DIExpression()), !dbg !12287
  %0 = and i32 %flags, 11, !dbg !12288
  %1 = icmp eq i32 %0, 1, !dbg !12288
  br i1 %1, label %cond.end, label %cond.true, !dbg !12288

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.34, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !12288
  br label %cond.end, !dbg !12288

cond.end:                                         ; preds = %entry, %cond.true
  tail call fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #7, !dbg !12289
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !12290
  store i32 2, i32* %iter_type, align 4, !dbg !12291
  %call = tail call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #7, !dbg !12292
  ret %struct.ssa_use_operand_d* %call, !dbg !12293
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !12294 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !12298, metadata !DIExpression()), !dbg !12300
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #7, !dbg !12301
  %tobool = icmp eq i8 %call, 0, !dbg !12301
  br i1 %tobool, label %cleanup, label %if.end, !dbg !12303

if.end:                                           ; preds = %entry
  %use_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !12304
  %0 = bitcast %union.tree_node** %use_ops to %struct.use_optype_d**, !dbg !12304
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %0, align 8, !dbg !12304
  call void @llvm.dbg.value(metadata %struct.use_optype_d* %1, metadata !12299, metadata !DIExpression()), !dbg !12300
  %tobool1 = icmp eq %struct.use_optype_d* %1, null, !dbg !12305
  br i1 %tobool1, label %cleanup, label %land.lhs.true, !dbg !12307

land.lhs.true:                                    ; preds = %if.end
  %use = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %1, i64 0, i32 1, i32 3, !dbg !12308
  %2 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !12308
  %vuse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !12309
  %3 = bitcast %struct.ssa_use_operand_d** %vuse to %union.tree_node**, !dbg !12309
  %cmp = icmp eq %union.tree_node** %2, %3, !dbg !12310
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %1, i64 0, i32 1, !dbg !12311
  %spec.select = select i1 %cmp, %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d* null, !dbg !12312
  ret %struct.ssa_use_operand_d* %spec.select, !dbg !12312

cleanup:                                          ; preds = %if.end, %entry
  ret %struct.ssa_use_operand_d* null, !dbg !12313
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) unnamed_addr #0 !dbg !12314 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !12318, metadata !DIExpression()), !dbg !12319
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !12320
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12320
  %cmp = icmp eq %struct.ssa_use_operand_d* %0, null, !dbg !12322
  br i1 %cmp, label %return, label %if.end, !dbg !12323

if.end:                                           ; preds = %entry
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 1, !dbg !12324
  %1 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !12324
  %2 = load i64, i64* %1, align 8, !dbg !12324
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i64 0, i32 1, !dbg !12325
  %3 = bitcast %struct.ssa_use_operand_d** %next2 to i64*, !dbg !12326
  store i64 %2, i64* %3, align 8, !dbg !12326
  %4 = bitcast %struct.ssa_use_operand_d* %linknode to i64*, !dbg !12327
  %5 = load i64, i64* %4, align 8, !dbg !12327
  %6 = bitcast %struct.ssa_use_operand_d** %next to i64**, !dbg !12328
  %7 = load i64*, i64** %6, align 8, !dbg !12328
  store i64 %5, i64* %7, align 8, !dbg !12329
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12330
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next, align 8, !dbg !12331
  br label %return, !dbg !12332

return:                                           ; preds = %entry, %if.end
  ret void, !dbg !12332
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) unnamed_addr #0 !dbg !12333 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !12337, metadata !DIExpression()), !dbg !12339
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %list, metadata !12338, metadata !DIExpression()), !dbg !12339
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !12340
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12341
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %list, i64 0, i32 1, !dbg !12342
  %0 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !12342
  %1 = load i64, i64* %0, align 8, !dbg !12342
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 1, !dbg !12343
  %2 = bitcast %struct.ssa_use_operand_d** %next1 to i64*, !dbg !12344
  store i64 %1, i64* %2, align 8, !dbg !12344
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !12345
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i64 0, i32 0, !dbg !12346
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !12347
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %next, align 8, !dbg !12348
  ret void, !dbg !12349
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) unnamed_addr #0 !dbg !12350 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !12354, metadata !DIExpression()), !dbg !12357
  call void @llvm.dbg.value(metadata %union.tree_node* %def, metadata !12355, metadata !DIExpression()), !dbg !12357
  %tobool = icmp eq %union.tree_node* %def, null, !dbg !12358
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !12360

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %def, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !12361
  %bf.load = load i64, i64* %0, align 8, !dbg !12361
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !12362
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !12362
  br i1 %cmp, label %if.else, label %if.then, !dbg !12363

if.then:                                          ; preds = %lor.lhs.false, %entry
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !12364
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !12365
  br label %if.end, !dbg !12366

if.else:                                          ; preds = %lor.lhs.false
  %imm_uses = getelementptr inbounds %union.tree_node, %union.tree_node* %def, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !12367
  %1 = bitcast i40* %imm_uses to %struct.ssa_use_operand_d*, !dbg !12367
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %1, metadata !12356, metadata !DIExpression()), !dbg !12357
  tail call fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* nonnull %1) #7, !dbg !12369
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !12370
}

declare dso_local zeroext i8 @thread_through_all_blocks(i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) unnamed_addr #0 !dbg !12371 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** @stack, metadata !12376, metadata !DIExpression()), !dbg !12377
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @stack, align 8, !dbg !12378
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !12378
  br i1 %tobool, label %if.end, label %if.then, !dbg !12380

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_tree_heap* %0 to i8*, !dbg !12380
  tail call void @free(i8* nonnull %1) #6, !dbg !12378
  br label %if.end, !dbg !12378

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** @stack, align 8, !dbg !12380
  ret void, !dbg !12380
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_num_ops(%union.gimple_statement_d* %gs, i32 %num_ops) unnamed_addr #0 !dbg !12381 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !12383, metadata !DIExpression()), !dbg !12385
  call void @llvm.dbg.value(metadata i32 %num_ops, metadata !12384, metadata !DIExpression()), !dbg !12385
  %num_ops1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 3, !dbg !12386
  store i32 %num_ops, i32* %num_ops1, align 4, !dbg !12387
  ret void, !dbg !12388
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind }
attributes #7 = { nobuiltin }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2216, !2217, !2218}
!llvm.ident = !{!2219}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "vr_value", scope: !2, file: !3, line: 107, type: !2108, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !677, globals: !2134, nameTableKind: None)
!3 = !DIFile(filename: "tree-vrp.c", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!4 = !{!5, !134, !329, !338, !342, !348, !353, !358, !376, !383, !390, !397, !404, !580, !587, !626, !652, !658, !663, !669}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !330, line: 31, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./cfgloop.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!331 = !{!332, !333, !334, !335, !336, !337}
!332 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!336 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!337 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!338 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !330, line: 91, baseType: !7, size: 32, elements: !339)
!339 = !{!340, !341}
!340 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!341 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !343, line: 363, baseType: !7, size: 32, elements: !344)
!343 = !DIFile(filename: "./basic-block.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!344 = !{!345, !346, !347}
!345 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!346 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!347 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !343, line: 355, baseType: !7, size: 32, elements: !349)
!349 = !{!350, !351, !352}
!350 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!352 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!353 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !354, line: 474, baseType: !7, size: 32, elements: !355)
!354 = !DIFile(filename: "./config/i386/i386.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!355 = !{!356, !357}
!356 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!358 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !359)
!359 = !{!360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!360 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!376 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !377)
!377 = !{!378, !379, !380, !381, !382}
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!383 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !384)
!384 = !{!385, !386, !387, !388, !389}
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "value_range_type", file: !391, line: 79, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./tree-ssa-propagate.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!392 = !{!393, !394, !395, !396}
!393 = !DIEnumerator(name: "VR_UNDEFINED", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "VR_RANGE", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "VR_ANTI_RANGE", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "VR_VARYING", value: 3, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !398, line: 104, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./tree-pass.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!399 = !{!400, !401, !402, !403}
!400 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!404 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !405, line: 74, baseType: !7, size: 32, elements: !406)
!405 = !DIFile(filename: "./timevar.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!406 = !{!407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579}
!407 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!579 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!580 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !581, line: 119, baseType: !7, size: 32, elements: !582)
!581 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!582 = !{!583, !584, !585, !586}
!583 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!584 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!585 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!586 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!587 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !588, line: 51, baseType: !7, size: 32, elements: !589)
!588 = !DIFile(filename: "./gimple.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!589 = !{!590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625}
!590 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!623 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!624 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!625 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!626 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !588, line: 727, baseType: !7, size: 32, elements: !627)
!627 = !{!628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651}
!628 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!629 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!630 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!631 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!632 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!633 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!634 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!635 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!636 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!637 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!638 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!639 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!640 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!641 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!642 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!643 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!644 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!645 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!646 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!647 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!648 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!649 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!650 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!651 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!652 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !588, line: 80, baseType: !7, size: 32, elements: !653)
!653 = !{!654, !655, !656, !657}
!654 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!655 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!656 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!657 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!658 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_prop_result", file: !391, line: 44, baseType: !7, size: 32, elements: !659)
!659 = !{!660, !661, !662}
!660 = !DIEnumerator(name: "SSA_PROP_NOT_INTERESTING", value: 0, isUnsigned: true)
!661 = !DIEnumerator(name: "SSA_PROP_INTERESTING", value: 1, isUnsigned: true)
!662 = !DIEnumerator(name: "SSA_PROP_VARYING", value: 2, isUnsigned: true)
!663 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ev_direction", file: !664, line: 712, baseType: !7, size: 32, elements: !665)
!664 = !DIFile(filename: "./tree-flow.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!665 = !{!666, !667, !668}
!666 = !DIEnumerator(name: "EV_DIR_GROWS", value: 0, isUnsigned: true)
!667 = !DIEnumerator(name: "EV_DIR_DECREASES", value: 1, isUnsigned: true)
!668 = !DIEnumerator(name: "EV_DIR_UNKNOWN", value: 2, isUnsigned: true)
!669 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "warn_strict_overflow_code", file: !670, line: 367, baseType: !7, size: 32, elements: !671)
!670 = !DIFile(filename: "./flags.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!671 = !{!672, !673, !674, !675, !676}
!672 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_ALL", value: 1, isUnsigned: true)
!673 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_CONDITIONAL", value: 2, isUnsigned: true)
!674 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_COMPARISON", value: 3, isUnsigned: true)
!675 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_MISC", value: 4, isUnsigned: true)
!676 = !DIEnumerator(name: "WARN_STRICT_OVERFLOW_MAGNITUDE", value: 5, isUnsigned: true)
!677 = !{!678, !679, !680, !681, !684, !685, !134, !687, !693, !820, !747, !2046, !1586, !2064, !2065, !1018, !2076, !1051, !682, !7, !2078, !652, !2048, !2083, !2086, !2091, !2108, !749, !941, !2109, !1511, !2115, !2128, !2129, !997}
!678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !679, size: 64)
!679 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!680 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !682, size: 64)
!682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !683, size: 64)
!683 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !686, size: 64)
!686 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !683)
!687 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !688, size: 64)
!688 = !DIDerivedType(tag: DW_TAG_typedef, name: "value_range_t", file: !391, line: 107, baseType: !689)
!689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "value_range_d", file: !391, line: 83, size: 256, elements: !690)
!690 = !{!691, !692, !2044, !2045}
!691 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !689, file: !391, line: 86, baseType: !390, size: 32)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "min", scope: !689, file: !391, line: 99, baseType: !693, size: 64, offset: 64)
!693 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !694, line: 56, baseType: !695)
!694 = !DIFile(filename: "./coretypes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!695 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !696, size: 64)
!696 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !697)
!697 = !{!698, !731, !737, !750, !769, !780, !785, !794, !800, !813, !825, !863, !1373, !1401, !1417, !1418, !1423, !1432, !1438, !1443, !1447, !1451, !1695, !1742, !1748, !1754, !1761, !1774, !1788, !1805, !1817, !1839, !1854, !2026}
!698 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !696, file: !135, line: 3372, baseType: !699, size: 64)
!699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !700)
!700 = !{!701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730}
!701 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !699, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !699, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !699, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !699, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !699, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !699, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !699, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !699, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !699, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!710 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !699, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !699, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!712 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !699, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !699, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !699, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !699, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !699, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !699, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !699, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !699, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !699, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !699, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !699, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !699, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !699, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !699, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !699, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !699, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !699, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !699, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !699, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !696, file: !135, line: 3373, baseType: !732, size: 192)
!732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !733)
!733 = !{!734, !735, !736}
!734 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !732, file: !135, line: 403, baseType: !699, size: 64)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !732, file: !135, line: 404, baseType: !693, size: 64, offset: 64)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !732, file: !135, line: 405, baseType: !693, size: 64, offset: 128)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !696, file: !135, line: 3374, baseType: !738, size: 320)
!738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !739)
!739 = !{!740, !741}
!740 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !738, file: !135, line: 1385, baseType: !732, size: 192)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !738, file: !135, line: 1386, baseType: !742, size: 128, offset: 192)
!742 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !743, line: 58, baseType: !744)
!743 = !DIFile(filename: "./double-int.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!744 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !743, line: 54, size: 128, elements: !745)
!745 = !{!746, !748}
!746 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !744, file: !743, line: 56, baseType: !747, size: 64)
!747 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !744, file: !743, line: 57, baseType: !749, size: 64, offset: 64)
!749 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !696, file: !135, line: 3375, baseType: !751, size: 256)
!751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !752)
!752 = !{!753, !754}
!753 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !751, file: !135, line: 1398, baseType: !732, size: 192)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !751, file: !135, line: 1399, baseType: !755, size: 64, offset: 192)
!755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !756, size: 64)
!756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !757, line: 52, size: 256, elements: !758)
!757 = !DIFile(filename: "./real.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!758 = !{!759, !760, !761, !762, !763, !764, !765}
!759 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !756, file: !757, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !756, file: !757, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !756, file: !757, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !756, file: !757, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !756, file: !757, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !756, file: !757, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !756, file: !757, line: 62, baseType: !766, size: 192, offset: 64)
!766 = !DICompositeType(tag: DW_TAG_array_type, baseType: !747, size: 192, elements: !767)
!767 = !{!768}
!768 = !DISubrange(count: 3)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !696, file: !135, line: 3376, baseType: !770, size: 256)
!770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !771)
!771 = !{!772, !773}
!772 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !770, file: !135, line: 1409, baseType: !732, size: 192)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !770, file: !135, line: 1410, baseType: !774, size: 64, offset: 192)
!774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !775, size: 64)
!775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !776, line: 27, size: 192, elements: !777)
!776 = !DIFile(filename: "./fixed-value.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!777 = !{!778, !779}
!778 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !775, file: !776, line: 29, baseType: !742, size: 128)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !775, file: !776, line: 30, baseType: !5, size: 32, offset: 128)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !696, file: !135, line: 3377, baseType: !781, size: 256)
!781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !782)
!782 = !{!783, !784}
!783 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !781, file: !135, line: 1438, baseType: !732, size: 192)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !781, file: !135, line: 1439, baseType: !693, size: 64, offset: 192)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !696, file: !135, line: 3378, baseType: !786, size: 256)
!786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !787)
!787 = !{!788, !789, !790}
!788 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !786, file: !135, line: 1419, baseType: !732, size: 192)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !786, file: !135, line: 1420, baseType: !680, size: 32, offset: 192)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !786, file: !135, line: 1421, baseType: !791, size: 8, offset: 224)
!791 = !DICompositeType(tag: DW_TAG_array_type, baseType: !683, size: 8, elements: !792)
!792 = !{!793}
!793 = !DISubrange(count: 1)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !696, file: !135, line: 3379, baseType: !795, size: 320)
!795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !796)
!796 = !{!797, !798, !799}
!797 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !795, file: !135, line: 1429, baseType: !732, size: 192)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !795, file: !135, line: 1430, baseType: !693, size: 64, offset: 192)
!799 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !795, file: !135, line: 1431, baseType: !693, size: 64, offset: 256)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !696, file: !135, line: 3380, baseType: !801, size: 320)
!801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !802)
!802 = !{!803, !804}
!803 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !801, file: !135, line: 1461, baseType: !732, size: 192)
!804 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !801, file: !135, line: 1462, baseType: !805, size: 128, offset: 192)
!805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !806, line: 31, size: 128, elements: !807)
!806 = !DIFile(filename: "./symtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!807 = !{!808, !811, !812}
!808 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !805, file: !806, line: 32, baseType: !809, size: 64)
!809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !810, size: 64)
!810 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !679)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !805, file: !806, line: 33, baseType: !7, size: 32, offset: 64)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !805, file: !806, line: 34, baseType: !7, size: 32, offset: 96)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !696, file: !135, line: 3381, baseType: !814, size: 384)
!814 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !815)
!815 = !{!816, !817, !822, !823, !824}
!816 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !814, file: !135, line: 2508, baseType: !732, size: 192)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !814, file: !135, line: 2509, baseType: !818, size: 32, offset: 192)
!818 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !819, line: 58, baseType: !820)
!819 = !DIFile(filename: "./input.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!820 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !821, line: 44, baseType: !7)
!821 = !DIFile(filename: "./line-map.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!822 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !814, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !814, file: !135, line: 2511, baseType: !693, size: 64, offset: 256)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !814, file: !135, line: 2512, baseType: !693, size: 64, offset: 320)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !696, file: !135, line: 3382, baseType: !826, size: 896)
!826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !827)
!827 = !{!828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860}
!828 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !826, file: !135, line: 2653, baseType: !814, size: 384)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !826, file: !135, line: 2654, baseType: !693, size: 64, offset: 384)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !826, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !826, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !826, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !826, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !826, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !826, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !826, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !826, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !826, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !826, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !826, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !826, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !826, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !826, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !826, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !826, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !826, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !826, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !826, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !826, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !826, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !826, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !826, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !826, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !826, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !826, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !826, file: !135, line: 2705, baseType: !693, size: 64, offset: 576)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !826, file: !135, line: 2706, baseType: !693, size: 64, offset: 640)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !826, file: !135, line: 2707, baseType: !693, size: 64, offset: 704)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !826, file: !135, line: 2708, baseType: !693, size: 64, offset: 768)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !826, file: !135, line: 2711, baseType: !861, size: 64, offset: 832)
!861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !862, size: 64)
!862 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !696, file: !135, line: 3383, baseType: !864, size: 960)
!864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !865)
!865 = !{!866, !867}
!866 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !864, file: !135, line: 2757, baseType: !826, size: 896)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !864, file: !135, line: 2758, baseType: !868, size: 64, offset: 896)
!868 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !694, line: 50, baseType: !869)
!869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !870, size: 64)
!870 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !871, line: 240, size: 384, elements: !872)
!871 = !DIFile(filename: "./rtl.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!872 = !{!873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !870, file: !871, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !870, file: !871, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !870, file: !871, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !870, file: !871, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !870, file: !871, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !870, file: !871, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !870, file: !871, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !870, file: !871, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !870, file: !871, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !870, file: !871, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !870, file: !871, line: 321, baseType: !884, size: 320, offset: 64)
!884 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !871, line: 315, size: 320, elements: !885)
!885 = !{!886, !1340, !1342, !1371, !1372}
!886 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !884, file: !871, line: 316, baseType: !887, size: 64)
!887 = !DICompositeType(tag: DW_TAG_array_type, baseType: !888, size: 64, elements: !792)
!888 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !871, line: 183, baseType: !889)
!889 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !871, line: 166, size: 64, elements: !890)
!890 = !{!891, !892, !893, !894, !895, !903, !904, !916, !919, !979, !980, !1317, !1330, !1337}
!891 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !889, file: !871, line: 168, baseType: !680, size: 32)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !889, file: !871, line: 169, baseType: !7, size: 32)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !889, file: !871, line: 170, baseType: !685, size: 64)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !889, file: !871, line: 171, baseType: !868, size: 64)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !889, file: !871, line: 172, baseType: !896, size: 64)
!896 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !694, line: 53, baseType: !897)
!897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !898, size: 64)
!898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !871, line: 359, size: 128, elements: !899)
!899 = !{!900, !901}
!900 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !898, file: !871, line: 360, baseType: !680, size: 32)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !898, file: !871, line: 361, baseType: !902, size: 64, offset: 64)
!902 = !DICompositeType(tag: DW_TAG_array_type, baseType: !868, size: 64, elements: !792)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !889, file: !871, line: 173, baseType: !5, size: 32)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !889, file: !871, line: 174, baseType: !905, size: 32)
!905 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !871, line: 133, baseType: !906)
!906 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !871, line: 115, size: 32, elements: !907)
!907 = !{!908, !909, !910, !911, !912, !913, !914, !915}
!908 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !906, file: !871, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !906, file: !871, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !906, file: !871, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !906, file: !871, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !906, file: !871, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !906, file: !871, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !906, file: !871, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !906, file: !871, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !889, file: !871, line: 175, baseType: !917, size: 64)
!917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !918, size: 64)
!918 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !871, line: 175, flags: DIFlagFwdDecl)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !889, file: !871, line: 176, baseType: !920, size: 64)
!920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !921, size: 64)
!921 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !922, line: 75, size: 256, elements: !923)
!922 = !DIFile(filename: "./bitmap.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!923 = !{!924, !938, !939, !940}
!924 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !921, file: !922, line: 76, baseType: !925, size: 64)
!925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !926, size: 64)
!926 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !922, line: 68, baseType: !927)
!927 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !922, line: 63, size: 320, elements: !928)
!928 = !{!929, !931, !932, !933}
!929 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !927, file: !922, line: 64, baseType: !930, size: 64)
!930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !927, size: 64)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !927, file: !922, line: 65, baseType: !930, size: 64, offset: 64)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !927, file: !922, line: 66, baseType: !7, size: 32, offset: 128)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !927, file: !922, line: 67, baseType: !934, size: 128, offset: 192)
!934 = !DICompositeType(tag: DW_TAG_array_type, baseType: !935, size: 128, elements: !936)
!935 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !922, line: 29, baseType: !747)
!936 = !{!937}
!937 = !DISubrange(count: 2)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !921, file: !922, line: 77, baseType: !925, size: 64, offset: 64)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !921, file: !922, line: 78, baseType: !7, size: 32, offset: 128)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !921, file: !922, line: 79, baseType: !941, size: 64, offset: 192)
!941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !942, size: 64)
!942 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !922, line: 49, baseType: !943)
!943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !922, line: 45, size: 832, elements: !944)
!944 = !{!945, !946, !947}
!945 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !943, file: !922, line: 46, baseType: !930, size: 64)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !943, file: !922, line: 47, baseType: !920, size: 64, offset: 64)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !943, file: !922, line: 48, baseType: !948, size: 704, offset: 128)
!948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !949, line: 164, size: 704, elements: !950)
!949 = !DIFile(filename: "./include/obstack.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!950 = !{!951, !952, !962, !963, !964, !965, !966, !967, !971, !975, !976, !977, !978}
!951 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !948, file: !949, line: 166, baseType: !749, size: 64)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !948, file: !949, line: 167, baseType: !953, size: 64, offset: 64)
!953 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !954, size: 64)
!954 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !949, line: 157, size: 192, elements: !955)
!955 = !{!956, !957, !958}
!956 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !954, file: !949, line: 159, baseType: !682, size: 64)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !954, file: !949, line: 160, baseType: !953, size: 64, offset: 64)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !954, file: !949, line: 161, baseType: !959, size: 32, offset: 128)
!959 = !DICompositeType(tag: DW_TAG_array_type, baseType: !683, size: 32, elements: !960)
!960 = !{!961}
!961 = !DISubrange(count: 4)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !948, file: !949, line: 168, baseType: !682, size: 64, offset: 128)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !948, file: !949, line: 169, baseType: !682, size: 64, offset: 192)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !948, file: !949, line: 170, baseType: !682, size: 64, offset: 256)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !948, file: !949, line: 171, baseType: !749, size: 64, offset: 320)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !948, file: !949, line: 172, baseType: !680, size: 32, offset: 384)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !948, file: !949, line: 176, baseType: !968, size: 64, offset: 448)
!968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !969, size: 64)
!969 = !DISubroutineType(types: !970)
!970 = !{!953, !684, !749}
!971 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !948, file: !949, line: 177, baseType: !972, size: 64, offset: 512)
!972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !973, size: 64)
!973 = !DISubroutineType(types: !974)
!974 = !{null, !684, !953}
!975 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !948, file: !949, line: 178, baseType: !684, size: 64, offset: 576)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !948, file: !949, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !948, file: !949, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !948, file: !949, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !889, file: !871, line: 177, baseType: !693, size: 64)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !889, file: !871, line: 178, baseType: !981, size: 64)
!981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !982, size: 64)
!982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !343, line: 217, size: 832, elements: !983)
!983 = !{!984, !1229, !1230, !1231, !1287, !1291, !1292, !1293, !1311, !1312, !1313, !1314, !1315, !1316}
!984 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !982, file: !343, line: 219, baseType: !985, size: 64)
!985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !986, size: 64)
!986 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !343, line: 151, baseType: !987)
!987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !343, line: 151, size: 128, elements: !988)
!988 = !{!989}
!989 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !987, file: !343, line: 151, baseType: !990, size: 128)
!990 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !343, line: 150, baseType: !991)
!991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !343, line: 150, size: 128, elements: !992)
!992 = !{!993, !994, !995}
!993 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !991, file: !343, line: 150, baseType: !7, size: 32)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !991, file: !343, line: 150, baseType: !7, size: 32, offset: 32)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !991, file: !343, line: 150, baseType: !996, size: 64, offset: 64)
!996 = !DICompositeType(tag: DW_TAG_array_type, baseType: !997, size: 64, elements: !792)
!997 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !694, line: 108, baseType: !998)
!998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !999, size: 64)
!999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !343, line: 122, size: 512, elements: !1000)
!1000 = !{!1001, !1002, !1003, !1221, !1222, !1223, !1224, !1225, !1226, !1227}
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !999, file: !343, line: 124, baseType: !981, size: 64)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !999, file: !343, line: 125, baseType: !981, size: 64, offset: 64)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !999, file: !343, line: 131, baseType: !1004, size: 64, offset: 128)
!1004 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !343, line: 128, size: 64, elements: !1005)
!1005 = !{!1006, !1220}
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1004, file: !343, line: 129, baseType: !1007, size: 64)
!1007 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !694, line: 66, baseType: !1008)
!1008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1009, size: 64)
!1009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !588, line: 143, size: 192, elements: !1010)
!1010 = !{!1011, !1218, !1219}
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1009, file: !588, line: 145, baseType: !1012, size: 64)
!1012 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !694, line: 69, baseType: !1013)
!1013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1014, size: 64)
!1014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !588, line: 136, size: 192, elements: !1015)
!1015 = !{!1016, !1216, !1217}
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1014, file: !588, line: 137, baseType: !1017, size: 64)
!1017 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !694, line: 58, baseType: !1018)
!1018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1019, size: 64)
!1019 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !588, line: 737, size: 768, elements: !1020)
!1020 = !{!1021, !1038, !1071, !1077, !1082, !1087, !1094, !1100, !1106, !1111, !1125, !1130, !1136, !1141, !1151, !1156, !1174, !1181, !1188, !1194, !1199, !1205, !1211}
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1019, file: !588, line: 738, baseType: !1022, size: 256)
!1022 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !588, line: 271, size: 256, elements: !1023)
!1023 = !{!1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037}
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1022, file: !588, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1022, file: !588, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1022, file: !588, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1022, file: !588, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1022, file: !588, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1022, file: !588, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1022, file: !588, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1022, file: !588, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1022, file: !588, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1022, file: !588, line: 312, baseType: !7, size: 32, offset: 32)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1022, file: !588, line: 316, baseType: !818, size: 32, offset: 64)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1022, file: !588, line: 319, baseType: !7, size: 32, offset: 96)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1022, file: !588, line: 323, baseType: !981, size: 64, offset: 128)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1022, file: !588, line: 327, baseType: !693, size: 64, offset: 192)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1019, file: !588, line: 739, baseType: !1039, size: 448)
!1039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !588, line: 350, size: 448, elements: !1040)
!1040 = !{!1041, !1069}
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1039, file: !588, line: 353, baseType: !1042, size: 384)
!1042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !588, line: 333, size: 384, elements: !1043)
!1043 = !{!1044, !1045, !1052}
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1042, file: !588, line: 336, baseType: !1022, size: 256)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1042, file: !588, line: 343, baseType: !1046, size: 64, offset: 256)
!1046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1047, size: 64)
!1047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !581, line: 37, size: 128, elements: !1048)
!1048 = !{!1049, !1050}
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1047, file: !581, line: 39, baseType: !1046, size: 64)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1047, file: !581, line: 40, baseType: !1051, size: 64, offset: 64)
!1051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !693, size: 64)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1042, file: !588, line: 344, baseType: !1053, size: 64, offset: 320)
!1053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1054, size: 64)
!1054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !581, line: 45, size: 320, elements: !1055)
!1055 = !{!1056, !1057}
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1054, file: !581, line: 47, baseType: !1053, size: 64)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1054, file: !581, line: 48, baseType: !1058, size: 256, offset: 64)
!1058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1059)
!1059 = !{!1060, !1062, !1063, !1068}
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1058, file: !135, line: 1884, baseType: !1061, size: 64)
!1061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1058, size: 64)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1058, file: !135, line: 1885, baseType: !1061, size: 64, offset: 64)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1058, file: !135, line: 1891, baseType: !1064, size: 64, offset: 128)
!1064 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1058, file: !135, line: 1891, size: 64, elements: !1065)
!1065 = !{!1066, !1067}
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1064, file: !135, line: 1891, baseType: !1017, size: 64)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1064, file: !135, line: 1891, baseType: !693, size: 64)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1058, file: !135, line: 1892, baseType: !1051, size: 64, offset: 192)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1039, file: !588, line: 359, baseType: !1070, size: 64, offset: 384)
!1070 = !DICompositeType(tag: DW_TAG_array_type, baseType: !693, size: 64, elements: !792)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1019, file: !588, line: 740, baseType: !1072, size: 512)
!1072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !588, line: 365, size: 512, elements: !1073)
!1073 = !{!1074, !1075, !1076}
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1072, file: !588, line: 368, baseType: !1042, size: 384)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1072, file: !588, line: 373, baseType: !693, size: 64, offset: 384)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1072, file: !588, line: 374, baseType: !693, size: 64, offset: 448)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1019, file: !588, line: 741, baseType: !1078, size: 576)
!1078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !588, line: 380, size: 576, elements: !1079)
!1079 = !{!1080, !1081}
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1078, file: !588, line: 383, baseType: !1072, size: 512)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1078, file: !588, line: 389, baseType: !1070, size: 64, offset: 512)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1019, file: !588, line: 742, baseType: !1083, size: 320)
!1083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !588, line: 395, size: 320, elements: !1084)
!1084 = !{!1085, !1086}
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1083, file: !588, line: 397, baseType: !1022, size: 256)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1083, file: !588, line: 400, baseType: !1007, size: 64, offset: 256)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1019, file: !588, line: 743, baseType: !1088, size: 448)
!1088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !588, line: 406, size: 448, elements: !1089)
!1089 = !{!1090, !1091, !1092, !1093}
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1088, file: !588, line: 408, baseType: !1022, size: 256)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1088, file: !588, line: 412, baseType: !693, size: 64, offset: 256)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1088, file: !588, line: 420, baseType: !693, size: 64, offset: 320)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1088, file: !588, line: 423, baseType: !1007, size: 64, offset: 384)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1019, file: !588, line: 744, baseType: !1095, size: 384)
!1095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !588, line: 429, size: 384, elements: !1096)
!1096 = !{!1097, !1098, !1099}
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1095, file: !588, line: 431, baseType: !1022, size: 256)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1095, file: !588, line: 434, baseType: !693, size: 64, offset: 256)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1095, file: !588, line: 437, baseType: !1007, size: 64, offset: 320)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1019, file: !588, line: 745, baseType: !1101, size: 384)
!1101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !588, line: 443, size: 384, elements: !1102)
!1102 = !{!1103, !1104, !1105}
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1101, file: !588, line: 445, baseType: !1022, size: 256)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1101, file: !588, line: 449, baseType: !693, size: 64, offset: 256)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1101, file: !588, line: 453, baseType: !1007, size: 64, offset: 320)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1019, file: !588, line: 746, baseType: !1107, size: 320)
!1107 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !588, line: 459, size: 320, elements: !1108)
!1108 = !{!1109, !1110}
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1107, file: !588, line: 461, baseType: !1022, size: 256)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1107, file: !588, line: 464, baseType: !693, size: 64, offset: 256)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1019, file: !588, line: 747, baseType: !1112, size: 768)
!1112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !588, line: 469, size: 768, elements: !1113)
!1113 = !{!1114, !1115, !1116, !1117, !1118}
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1112, file: !588, line: 471, baseType: !1022, size: 256)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1112, file: !588, line: 474, baseType: !7, size: 32, offset: 256)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1112, file: !588, line: 475, baseType: !7, size: 32, offset: 288)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1112, file: !588, line: 478, baseType: !693, size: 64, offset: 320)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1112, file: !588, line: 481, baseType: !1119, size: 384, offset: 384)
!1119 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1120, size: 384, elements: !792)
!1120 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1121)
!1121 = !{!1122, !1123, !1124}
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1120, file: !135, line: 1920, baseType: !1058, size: 256)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1120, file: !135, line: 1921, baseType: !693, size: 64, offset: 256)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1120, file: !135, line: 1922, baseType: !818, size: 32, offset: 320)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1019, file: !588, line: 748, baseType: !1126, size: 320)
!1126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !588, line: 487, size: 320, elements: !1127)
!1127 = !{!1128, !1129}
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1126, file: !588, line: 490, baseType: !1022, size: 256)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1126, file: !588, line: 494, baseType: !680, size: 32, offset: 256)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1019, file: !588, line: 749, baseType: !1131, size: 384)
!1131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !588, line: 500, size: 384, elements: !1132)
!1132 = !{!1133, !1134, !1135}
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1131, file: !588, line: 502, baseType: !1022, size: 256)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1131, file: !588, line: 506, baseType: !1007, size: 64, offset: 256)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1131, file: !588, line: 510, baseType: !1007, size: 64, offset: 320)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1019, file: !588, line: 750, baseType: !1137, size: 320)
!1137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !588, line: 529, size: 320, elements: !1138)
!1138 = !{!1139, !1140}
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1137, file: !588, line: 531, baseType: !1022, size: 256)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1137, file: !588, line: 540, baseType: !1007, size: 64, offset: 256)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1019, file: !588, line: 751, baseType: !1142, size: 704)
!1142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !588, line: 546, size: 704, elements: !1143)
!1143 = !{!1144, !1145, !1146, !1147, !1148, !1149, !1150}
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1142, file: !588, line: 549, baseType: !1072, size: 512)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1142, file: !588, line: 553, baseType: !685, size: 64, offset: 512)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1142, file: !588, line: 557, baseType: !679, size: 8, offset: 576)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1142, file: !588, line: 558, baseType: !679, size: 8, offset: 584)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1142, file: !588, line: 559, baseType: !679, size: 8, offset: 592)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1142, file: !588, line: 560, baseType: !679, size: 8, offset: 600)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1142, file: !588, line: 566, baseType: !1070, size: 64, offset: 640)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1019, file: !588, line: 752, baseType: !1152, size: 384)
!1152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !588, line: 571, size: 384, elements: !1153)
!1153 = !{!1154, !1155}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1152, file: !588, line: 573, baseType: !1083, size: 320)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1152, file: !588, line: 577, baseType: !693, size: 64, offset: 320)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1019, file: !588, line: 753, baseType: !1157, size: 576)
!1157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !588, line: 600, size: 576, elements: !1158)
!1158 = !{!1159, !1160, !1161, !1164, !1173}
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1157, file: !588, line: 602, baseType: !1083, size: 320)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1157, file: !588, line: 605, baseType: !693, size: 64, offset: 320)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1157, file: !588, line: 609, baseType: !1162, size: 64, offset: 384)
!1162 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1163, line: 46, baseType: !747)
!1163 = !DIFile(filename: "/scratch/install/llvm-install-release/lib/clang/9.0.1/include/stddef.h", directory: "")
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1157, file: !588, line: 612, baseType: !1165, size: 64, offset: 448)
!1165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1166, size: 64)
!1166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !588, line: 581, size: 320, elements: !1167)
!1167 = !{!1168, !1169, !1170, !1171, !1172}
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1166, file: !588, line: 583, baseType: !134, size: 32)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1166, file: !588, line: 586, baseType: !693, size: 64, offset: 64)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1166, file: !588, line: 589, baseType: !693, size: 64, offset: 128)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1166, file: !588, line: 592, baseType: !693, size: 64, offset: 192)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1166, file: !588, line: 595, baseType: !693, size: 64, offset: 256)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1157, file: !588, line: 616, baseType: !1007, size: 64, offset: 512)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1019, file: !588, line: 754, baseType: !1175, size: 512)
!1175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !588, line: 622, size: 512, elements: !1176)
!1176 = !{!1177, !1178, !1179, !1180}
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1175, file: !588, line: 624, baseType: !1083, size: 320)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1175, file: !588, line: 628, baseType: !693, size: 64, offset: 320)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1175, file: !588, line: 632, baseType: !693, size: 64, offset: 384)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1175, file: !588, line: 636, baseType: !693, size: 64, offset: 448)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1019, file: !588, line: 755, baseType: !1182, size: 704)
!1182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !588, line: 642, size: 704, elements: !1183)
!1183 = !{!1184, !1185, !1186, !1187}
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1182, file: !588, line: 644, baseType: !1175, size: 512)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1182, file: !588, line: 648, baseType: !693, size: 64, offset: 512)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1182, file: !588, line: 652, baseType: !693, size: 64, offset: 576)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1182, file: !588, line: 653, baseType: !693, size: 64, offset: 640)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1019, file: !588, line: 756, baseType: !1189, size: 448)
!1189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !588, line: 663, size: 448, elements: !1190)
!1190 = !{!1191, !1192, !1193}
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1189, file: !588, line: 665, baseType: !1083, size: 320)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1189, file: !588, line: 668, baseType: !693, size: 64, offset: 320)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1189, file: !588, line: 673, baseType: !693, size: 64, offset: 384)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1019, file: !588, line: 757, baseType: !1195, size: 384)
!1195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !588, line: 694, size: 384, elements: !1196)
!1196 = !{!1197, !1198}
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1195, file: !588, line: 696, baseType: !1083, size: 320)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1195, file: !588, line: 699, baseType: !693, size: 64, offset: 320)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1019, file: !588, line: 758, baseType: !1200, size: 384)
!1200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !588, line: 681, size: 384, elements: !1201)
!1201 = !{!1202, !1203, !1204}
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1200, file: !588, line: 683, baseType: !1022, size: 256)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1200, file: !588, line: 686, baseType: !693, size: 64, offset: 256)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1200, file: !588, line: 689, baseType: !693, size: 64, offset: 320)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1019, file: !588, line: 759, baseType: !1206, size: 384)
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !588, line: 707, size: 384, elements: !1207)
!1207 = !{!1208, !1209, !1210}
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1206, file: !588, line: 709, baseType: !1022, size: 256)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1206, file: !588, line: 712, baseType: !693, size: 64, offset: 256)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1206, file: !588, line: 712, baseType: !693, size: 64, offset: 320)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1019, file: !588, line: 760, baseType: !1212, size: 320)
!1212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !588, line: 718, size: 320, elements: !1213)
!1213 = !{!1214, !1215}
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1212, file: !588, line: 720, baseType: !1022, size: 256)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1212, file: !588, line: 723, baseType: !693, size: 64, offset: 256)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1014, file: !588, line: 138, baseType: !1013, size: 64, offset: 64)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1014, file: !588, line: 139, baseType: !1013, size: 64, offset: 128)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1009, file: !588, line: 146, baseType: !1012, size: 64, offset: 64)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1009, file: !588, line: 152, baseType: !1007, size: 64, offset: 128)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1004, file: !343, line: 130, baseType: !868, size: 64)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !999, file: !343, line: 134, baseType: !684, size: 64, offset: 192)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !999, file: !343, line: 137, baseType: !693, size: 64, offset: 256)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !999, file: !343, line: 138, baseType: !818, size: 32, offset: 320)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !999, file: !343, line: 142, baseType: !7, size: 32, offset: 352)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !999, file: !343, line: 144, baseType: !680, size: 32, offset: 384)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !999, file: !343, line: 145, baseType: !680, size: 32, offset: 416)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !999, file: !343, line: 146, baseType: !1228, size: 64, offset: 448)
!1228 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !343, line: 119, baseType: !749)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !982, file: !343, line: 220, baseType: !985, size: 64, offset: 64)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !982, file: !343, line: 223, baseType: !684, size: 64, offset: 128)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !982, file: !343, line: 226, baseType: !1232, size: 64, offset: 192)
!1232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1233, size: 64)
!1233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 100, size: 1216, elements: !1234)
!1234 = !{!1235, !1236, !1237, !1238, !1239, !1244, !1245, !1246, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1277, !1285, !1286}
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1233, file: !330, line: 102, baseType: !680, size: 32)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1233, file: !330, line: 105, baseType: !7, size: 32, offset: 32)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1233, file: !330, line: 108, baseType: !981, size: 64, offset: 64)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1233, file: !330, line: 111, baseType: !981, size: 64, offset: 128)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1233, file: !330, line: 114, baseType: !1240, size: 64, offset: 192)
!1240 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !330, line: 41, size: 64, elements: !1241)
!1241 = !{!1242, !1243}
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1240, file: !330, line: 42, baseType: !329, size: 32)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1240, file: !330, line: 43, baseType: !7, size: 32, offset: 32)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1233, file: !330, line: 117, baseType: !7, size: 32, offset: 256)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1233, file: !330, line: 120, baseType: !7, size: 32, offset: 288)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1233, file: !330, line: 123, baseType: !1247, size: 64, offset: 320)
!1247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1248, size: 64)
!1248 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !330, line: 87, baseType: !1249)
!1249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !330, line: 87, size: 128, elements: !1250)
!1250 = !{!1251}
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1249, file: !330, line: 87, baseType: !1252, size: 128)
!1252 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !330, line: 85, baseType: !1253)
!1253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !330, line: 85, size: 128, elements: !1254)
!1254 = !{!1255, !1256, !1257}
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1253, file: !330, line: 85, baseType: !7, size: 32)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1253, file: !330, line: 85, baseType: !7, size: 32, offset: 32)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1253, file: !330, line: 85, baseType: !1258, size: 64, offset: 64)
!1258 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1259, size: 64, elements: !792)
!1259 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !330, line: 84, baseType: !1232)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1233, file: !330, line: 126, baseType: !1232, size: 64, offset: 384)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1233, file: !330, line: 129, baseType: !1232, size: 64, offset: 448)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1233, file: !330, line: 132, baseType: !684, size: 64, offset: 512)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1233, file: !330, line: 139, baseType: !693, size: 64, offset: 576)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1233, file: !330, line: 143, baseType: !742, size: 128, offset: 640)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1233, file: !330, line: 146, baseType: !742, size: 128, offset: 768)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1233, file: !330, line: 148, baseType: !679, size: 8, offset: 896)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1233, file: !330, line: 149, baseType: !679, size: 8, offset: 904)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1233, file: !330, line: 153, baseType: !338, size: 32, offset: 928)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1233, file: !330, line: 156, baseType: !1270, size: 64, offset: 960)
!1270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1271, size: 64)
!1271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !330, line: 48, size: 320, elements: !1272)
!1272 = !{!1273, !1274, !1275, !1276}
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1271, file: !330, line: 50, baseType: !1017, size: 64)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1271, file: !330, line: 59, baseType: !742, size: 128, offset: 64)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1271, file: !330, line: 64, baseType: !679, size: 8, offset: 192)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1271, file: !330, line: 67, baseType: !1270, size: 64, offset: 256)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1233, file: !330, line: 159, baseType: !1278, size: 64, offset: 1024)
!1278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1279, size: 64)
!1279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !330, line: 72, size: 256, elements: !1280)
!1280 = !{!1281, !1282, !1283, !1284}
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1279, file: !330, line: 74, baseType: !998, size: 64)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1279, file: !330, line: 77, baseType: !1278, size: 64, offset: 64)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1279, file: !330, line: 78, baseType: !1278, size: 64, offset: 128)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1279, file: !330, line: 81, baseType: !1278, size: 64, offset: 192)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1233, file: !330, line: 162, baseType: !679, size: 8, offset: 1088)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1233, file: !330, line: 166, baseType: !693, size: 64, offset: 1152)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !982, file: !343, line: 229, baseType: !1288, size: 128, offset: 256)
!1288 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1289, size: 128, elements: !936)
!1289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1290, size: 64)
!1290 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !343, line: 229, flags: DIFlagFwdDecl)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !982, file: !343, line: 232, baseType: !981, size: 64, offset: 384)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !982, file: !343, line: 233, baseType: !981, size: 64, offset: 448)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !982, file: !343, line: 238, baseType: !1294, size: 64, offset: 512)
!1294 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !343, line: 235, size: 64, elements: !1295)
!1295 = !{!1296, !1302}
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1294, file: !343, line: 236, baseType: !1297, size: 64)
!1297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1298, size: 64)
!1298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !343, line: 273, size: 128, elements: !1299)
!1299 = !{!1300, !1301}
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1298, file: !343, line: 275, baseType: !1007, size: 64)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1298, file: !343, line: 278, baseType: !1007, size: 64, offset: 64)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1294, file: !343, line: 237, baseType: !1303, size: 64)
!1303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1304, size: 64)
!1304 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !343, line: 259, size: 320, elements: !1305)
!1305 = !{!1306, !1307, !1308, !1309, !1310}
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1304, file: !343, line: 261, baseType: !868, size: 64)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1304, file: !343, line: 262, baseType: !868, size: 64, offset: 64)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1304, file: !343, line: 266, baseType: !868, size: 64, offset: 128)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1304, file: !343, line: 267, baseType: !868, size: 64, offset: 192)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1304, file: !343, line: 270, baseType: !680, size: 32, offset: 256)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !982, file: !343, line: 241, baseType: !1228, size: 64, offset: 576)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !982, file: !343, line: 244, baseType: !680, size: 32, offset: 640)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !982, file: !343, line: 247, baseType: !680, size: 32, offset: 672)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !982, file: !343, line: 250, baseType: !680, size: 32, offset: 704)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !982, file: !343, line: 253, baseType: !680, size: 32, offset: 736)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !982, file: !343, line: 256, baseType: !680, size: 32, offset: 768)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !889, file: !871, line: 179, baseType: !1318, size: 64)
!1318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1319, size: 64)
!1319 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !871, line: 150, baseType: !1320)
!1320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !871, line: 142, size: 320, elements: !1321)
!1321 = !{!1322, !1323, !1324, !1325, !1328, !1329}
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1320, file: !871, line: 144, baseType: !693, size: 64)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1320, file: !871, line: 145, baseType: !868, size: 64, offset: 64)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1320, file: !871, line: 146, baseType: !868, size: 64, offset: 128)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1320, file: !871, line: 147, baseType: !1326, size: 32, offset: 192)
!1326 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1327, line: 31, baseType: !680)
!1327 = !DIFile(filename: "./alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1320, file: !871, line: 148, baseType: !7, size: 32, offset: 224)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1320, file: !871, line: 149, baseType: !679, size: 8, offset: 256)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !889, file: !871, line: 180, baseType: !1331, size: 64)
!1331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1332, size: 64)
!1332 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !871, line: 162, baseType: !1333)
!1333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !871, line: 159, size: 128, elements: !1334)
!1334 = !{!1335, !1336}
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1333, file: !871, line: 160, baseType: !693, size: 64)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1333, file: !871, line: 161, baseType: !749, size: 64, offset: 64)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !889, file: !871, line: 181, baseType: !1338, size: 64)
!1338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1339, size: 64)
!1339 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !871, line: 181, flags: DIFlagFwdDecl)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !884, file: !871, line: 317, baseType: !1341, size: 64)
!1341 = !DICompositeType(tag: DW_TAG_array_type, baseType: !749, size: 64, elements: !792)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !884, file: !871, line: 318, baseType: !1343, size: 320)
!1343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !871, line: 188, size: 320, elements: !1344)
!1344 = !{!1345, !1347, !1370}
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1343, file: !871, line: 190, baseType: !1346, size: 192)
!1346 = !DICompositeType(tag: DW_TAG_array_type, baseType: !888, size: 192, elements: !767)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1343, file: !871, line: 193, baseType: !1348, size: 64, offset: 192)
!1348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1349, size: 64)
!1349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !871, line: 206, size: 320, elements: !1350)
!1350 = !{!1351, !1355, !1356, !1357, !1369}
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1349, file: !871, line: 208, baseType: !1352, size: 64)
!1352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1353, size: 64)
!1353 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !694, line: 62, baseType: !1354)
!1354 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !694, line: 61, flags: DIFlagFwdDecl)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1349, file: !871, line: 211, baseType: !7, size: 32, offset: 64)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1349, file: !871, line: 214, baseType: !749, size: 64, offset: 128)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1349, file: !871, line: 224, baseType: !1358, size: 64, offset: 192)
!1358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1359, size: 64)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !871, line: 202, baseType: !1360)
!1360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !871, line: 202, size: 128, elements: !1361)
!1361 = !{!1362}
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1360, file: !871, line: 202, baseType: !1363, size: 128)
!1363 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !871, line: 200, baseType: !1364)
!1364 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !871, line: 200, size: 128, elements: !1365)
!1365 = !{!1366, !1367, !1368}
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1364, file: !871, line: 200, baseType: !7, size: 32)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1364, file: !871, line: 200, baseType: !7, size: 32, offset: 32)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1364, file: !871, line: 200, baseType: !902, size: 64, offset: 64)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1349, file: !871, line: 234, baseType: !1358, size: 64, offset: 256)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1343, file: !871, line: 197, baseType: !749, size: 64, offset: 256)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !884, file: !871, line: 319, baseType: !756, size: 256)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !884, file: !871, line: 320, baseType: !775, size: 192)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !696, file: !135, line: 3384, baseType: !1374, size: 1472)
!1374 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !1375)
!1375 = !{!1376, !1397, !1398, !1399, !1400}
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1374, file: !135, line: 3115, baseType: !1377, size: 1216)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !1378)
!1378 = !{!1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1377, file: !135, line: 2985, baseType: !864, size: 960)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1377, file: !135, line: 2986, baseType: !693, size: 64, offset: 960)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1377, file: !135, line: 2987, baseType: !693, size: 64, offset: 1024)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1377, file: !135, line: 2988, baseType: !693, size: 64, offset: 1088)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1377, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1377, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1377, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1377, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1377, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1377, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1377, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1377, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1377, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1377, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1377, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1377, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1377, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1377, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1374, file: !135, line: 3117, baseType: !693, size: 64, offset: 1216)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1374, file: !135, line: 3119, baseType: !693, size: 64, offset: 1280)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1374, file: !135, line: 3121, baseType: !693, size: 64, offset: 1344)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1374, file: !135, line: 3123, baseType: !693, size: 64, offset: 1408)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !696, file: !135, line: 3385, baseType: !1402, size: 1088)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !1403)
!1403 = !{!1404, !1405, !1406}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1402, file: !135, line: 2875, baseType: !864, size: 960)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1402, file: !135, line: 2876, baseType: !868, size: 64, offset: 960)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1402, file: !135, line: 2877, baseType: !1407, size: 64, offset: 1024)
!1407 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1408, size: 64)
!1408 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !664, line: 172, size: 128, elements: !1409)
!1409 = !{!1410, !1411, !1412, !1413, !1414, !1415, !1416}
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1408, file: !664, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1408, file: !664, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1408, file: !664, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1408, file: !664, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1408, file: !664, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1408, file: !664, line: 195, baseType: !7, size: 32, offset: 32)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1408, file: !664, line: 199, baseType: !693, size: 64, offset: 64)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !696, file: !135, line: 3386, baseType: !1377, size: 1216)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !696, file: !135, line: 3387, baseType: !1419, size: 1280)
!1419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !1420)
!1420 = !{!1421, !1422}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1419, file: !135, line: 3094, baseType: !1377, size: 1216)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1419, file: !135, line: 3095, baseType: !1407, size: 64, offset: 1216)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !696, file: !135, line: 3388, baseType: !1424, size: 1216)
!1424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !1425)
!1425 = !{!1426, !1427, !1428, !1429, !1430, !1431}
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1424, file: !135, line: 2825, baseType: !826, size: 896)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1424, file: !135, line: 2827, baseType: !693, size: 64, offset: 896)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1424, file: !135, line: 2828, baseType: !693, size: 64, offset: 960)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1424, file: !135, line: 2829, baseType: !693, size: 64, offset: 1024)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1424, file: !135, line: 2830, baseType: !693, size: 64, offset: 1088)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1424, file: !135, line: 2831, baseType: !693, size: 64, offset: 1152)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !696, file: !135, line: 3389, baseType: !1433, size: 1024)
!1433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !1434)
!1434 = !{!1435, !1436, !1437}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1433, file: !135, line: 2851, baseType: !864, size: 960)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1433, file: !135, line: 2852, baseType: !680, size: 32, offset: 960)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1433, file: !135, line: 2853, baseType: !680, size: 32, offset: 992)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !696, file: !135, line: 3390, baseType: !1439, size: 1024)
!1439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !1440)
!1440 = !{!1441, !1442}
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1439, file: !135, line: 2858, baseType: !864, size: 960)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1439, file: !135, line: 2859, baseType: !1407, size: 64, offset: 960)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !696, file: !135, line: 3391, baseType: !1444, size: 960)
!1444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !1445)
!1445 = !{!1446}
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1444, file: !135, line: 2863, baseType: !864, size: 960)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !696, file: !135, line: 3392, baseType: !1448, size: 1472)
!1448 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !1449)
!1449 = !{!1450}
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1448, file: !135, line: 3305, baseType: !1374, size: 1472)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !696, file: !135, line: 3393, baseType: !1452, size: 1792)
!1452 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !1453)
!1453 = !{!1454, !1455, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1452, file: !135, line: 3249, baseType: !1374, size: 1472)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1452, file: !135, line: 3251, baseType: !1456, size: 64, offset: 1472)
!1456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1457, size: 64)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1458, line: 463, size: 1152, elements: !1459)
!1458 = !DIFile(filename: "./function.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1459 = !{!1460, !1463, !1494, !1495, !1610, !1618, !1619, !1620, !1621, !1622, !1623, !1647, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673}
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1457, file: !1458, line: 464, baseType: !1461, size: 64)
!1461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1462, size: 64)
!1462 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1458, line: 464, flags: DIFlagFwdDecl)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1457, file: !1458, line: 467, baseType: !1464, size: 64, offset: 64)
!1464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1465, size: 64)
!1465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !343, line: 374, size: 640, elements: !1466)
!1466 = !{!1467, !1469, !1470, !1483, !1484, !1485, !1486, !1487, !1488, !1490, !1492, !1493}
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1465, file: !343, line: 377, baseType: !1468, size: 64)
!1468 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !694, line: 111, baseType: !981)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1465, file: !343, line: 378, baseType: !1468, size: 64, offset: 64)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1465, file: !343, line: 381, baseType: !1471, size: 64, offset: 128)
!1471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1472, size: 64)
!1472 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !343, line: 282, baseType: !1473)
!1473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !343, line: 282, size: 128, elements: !1474)
!1474 = !{!1475}
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1473, file: !343, line: 282, baseType: !1476, size: 128)
!1476 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !343, line: 281, baseType: !1477)
!1477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !343, line: 281, size: 128, elements: !1478)
!1478 = !{!1479, !1480, !1481}
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1477, file: !343, line: 281, baseType: !7, size: 32)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1477, file: !343, line: 281, baseType: !7, size: 32, offset: 32)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1477, file: !343, line: 281, baseType: !1482, size: 64, offset: 64)
!1482 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1468, size: 64, elements: !792)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1465, file: !343, line: 384, baseType: !680, size: 32, offset: 192)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1465, file: !343, line: 387, baseType: !680, size: 32, offset: 224)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1465, file: !343, line: 390, baseType: !680, size: 32, offset: 256)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1465, file: !343, line: 394, baseType: !1471, size: 64, offset: 320)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1465, file: !343, line: 396, baseType: !342, size: 32, offset: 384)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1465, file: !343, line: 399, baseType: !1489, size: 64, offset: 416)
!1489 = !DICompositeType(tag: DW_TAG_array_type, baseType: !348, size: 64, elements: !936)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1465, file: !343, line: 402, baseType: !1491, size: 64, offset: 480)
!1491 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !936)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1465, file: !343, line: 406, baseType: !680, size: 32, offset: 544)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1465, file: !343, line: 409, baseType: !680, size: 32, offset: 576)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1457, file: !1458, line: 470, baseType: !1008, size: 64, offset: 128)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1457, file: !1458, line: 473, baseType: !1496, size: 64, offset: 192)
!1496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1497, size: 64)
!1497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !664, line: 39, size: 1152, elements: !1498)
!1498 = !{!1499, !1549, !1562, !1574, !1575, !1587, !1588, !1592, !1593, !1594, !1595, !1596}
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1497, file: !664, line: 41, baseType: !1500, size: 64)
!1500 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1501, line: 144, baseType: !1502)
!1501 = !DIFile(filename: "./include/hashtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1503, size: 64)
!1503 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1501, line: 100, size: 896, elements: !1504)
!1504 = !{!1505, !1513, !1518, !1523, !1525, !1526, !1527, !1528, !1529, !1530, !1535, !1537, !1538, !1543, !1548}
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1503, file: !1501, line: 102, baseType: !1506, size: 64)
!1506 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1501, line: 52, baseType: !1507)
!1507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1508, size: 64)
!1508 = !DISubroutineType(types: !1509)
!1509 = !{!1510, !1511}
!1510 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1501, line: 47, baseType: !7)
!1511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1512, size: 64)
!1512 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1503, file: !1501, line: 105, baseType: !1514, size: 64, offset: 64)
!1514 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1501, line: 59, baseType: !1515)
!1515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1516, size: 64)
!1516 = !DISubroutineType(types: !1517)
!1517 = !{!680, !1511, !1511}
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1503, file: !1501, line: 108, baseType: !1519, size: 64, offset: 128)
!1519 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1501, line: 63, baseType: !1520)
!1520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1521, size: 64)
!1521 = !DISubroutineType(types: !1522)
!1522 = !{null, !684}
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1503, file: !1501, line: 111, baseType: !1524, size: 64, offset: 192)
!1524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !684, size: 64)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1503, file: !1501, line: 114, baseType: !1162, size: 64, offset: 256)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1503, file: !1501, line: 117, baseType: !1162, size: 64, offset: 320)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1503, file: !1501, line: 120, baseType: !1162, size: 64, offset: 384)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1503, file: !1501, line: 124, baseType: !7, size: 32, offset: 448)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1503, file: !1501, line: 128, baseType: !7, size: 32, offset: 480)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1503, file: !1501, line: 131, baseType: !1531, size: 64, offset: 512)
!1531 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1501, line: 75, baseType: !1532)
!1532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1533, size: 64)
!1533 = !DISubroutineType(types: !1534)
!1534 = !{!684, !1162, !1162}
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1503, file: !1501, line: 132, baseType: !1536, size: 64, offset: 576)
!1536 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1501, line: 78, baseType: !1520)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1503, file: !1501, line: 135, baseType: !684, size: 64, offset: 640)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1503, file: !1501, line: 136, baseType: !1539, size: 64, offset: 704)
!1539 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1501, line: 82, baseType: !1540)
!1540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1541, size: 64)
!1541 = !DISubroutineType(types: !1542)
!1542 = !{!684, !684, !1162, !1162}
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1503, file: !1501, line: 137, baseType: !1544, size: 64, offset: 768)
!1544 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1501, line: 83, baseType: !1545)
!1545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1546, size: 64)
!1546 = !DISubroutineType(types: !1547)
!1547 = !{null, !684, !684}
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1503, file: !1501, line: 141, baseType: !7, size: 32, offset: 832)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1497, file: !664, line: 48, baseType: !1550, size: 64, offset: 64)
!1550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1551, size: 64)
!1551 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !588, line: 35, baseType: !1552)
!1552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !588, line: 35, size: 128, elements: !1553)
!1553 = !{!1554}
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1552, file: !588, line: 35, baseType: !1555, size: 128)
!1555 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !588, line: 33, baseType: !1556)
!1556 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !588, line: 33, size: 128, elements: !1557)
!1557 = !{!1558, !1559, !1560}
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1556, file: !588, line: 33, baseType: !7, size: 32)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1556, file: !588, line: 33, baseType: !7, size: 32, offset: 32)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1556, file: !588, line: 33, baseType: !1561, size: 64, offset: 64)
!1561 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1017, size: 64, elements: !792)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1497, file: !664, line: 51, baseType: !1563, size: 64, offset: 128)
!1563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1564, size: 64)
!1564 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !1565)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !1566)
!1566 = !{!1567}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1565, file: !135, line: 183, baseType: !1568, size: 128)
!1568 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !1569)
!1569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !1570)
!1570 = !{!1571, !1572, !1573}
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1569, file: !135, line: 182, baseType: !7, size: 32)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1569, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1569, file: !135, line: 182, baseType: !1070, size: 64, offset: 64)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1497, file: !664, line: 54, baseType: !693, size: 64, offset: 192)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1497, file: !664, line: 57, baseType: !1576, size: 128, offset: 256)
!1576 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1577, line: 31, size: 128, elements: !1578)
!1577 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1578 = !{!1579, !1580, !1581, !1582, !1583, !1584, !1585}
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1576, file: !1577, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1576, file: !1577, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1576, file: !1577, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1576, file: !1577, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1576, file: !1577, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1576, file: !1577, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1576, file: !1577, line: 56, baseType: !1586, size: 64, offset: 64)
!1586 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !694, line: 47, baseType: !920)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1497, file: !664, line: 60, baseType: !1576, size: 128, offset: 384)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1497, file: !664, line: 64, baseType: !1589, size: 64, offset: 512)
!1589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1590, size: 64)
!1590 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1591, line: 33, flags: DIFlagFwdDecl)
!1591 = !DIFile(filename: "./pointer-set.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1497, file: !664, line: 67, baseType: !693, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1497, file: !664, line: 73, baseType: !1500, size: 64, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1497, file: !664, line: 77, baseType: !1586, size: 64, offset: 704)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1497, file: !664, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1497, file: !664, line: 82, baseType: !1597, size: 320, offset: 832)
!1597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !581, line: 62, size: 320, elements: !1598)
!1598 = !{!1599, !1605, !1606, !1607, !1608, !1609}
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1597, file: !581, line: 63, baseType: !1600, size: 64)
!1600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1601, size: 64)
!1601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !581, line: 56, size: 128, elements: !1602)
!1602 = !{!1603, !1604}
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1601, file: !581, line: 57, baseType: !1600, size: 64)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1601, file: !581, line: 58, baseType: !791, size: 8, offset: 64)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1597, file: !581, line: 64, baseType: !7, size: 32, offset: 64)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1597, file: !581, line: 66, baseType: !7, size: 32, offset: 96)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1597, file: !581, line: 68, baseType: !679, size: 8, offset: 128)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1597, file: !581, line: 70, baseType: !1046, size: 64, offset: 192)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1597, file: !581, line: 71, baseType: !1053, size: 64, offset: 256)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1457, file: !1458, line: 476, baseType: !1611, size: 64, offset: 256)
!1611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1612, size: 64)
!1612 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !330, line: 187, size: 256, elements: !1613)
!1613 = !{!1614, !1615, !1616, !1617}
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1612, file: !330, line: 189, baseType: !680, size: 32)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1612, file: !330, line: 192, baseType: !1247, size: 64, offset: 64)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1612, file: !330, line: 197, baseType: !1500, size: 64, offset: 128)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1612, file: !330, line: 200, baseType: !1232, size: 64, offset: 192)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1457, file: !1458, line: 479, baseType: !1500, size: 64, offset: 320)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1457, file: !1458, line: 484, baseType: !693, size: 64, offset: 384)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1457, file: !1458, line: 488, baseType: !693, size: 64, offset: 448)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1457, file: !1458, line: 493, baseType: !693, size: 64, offset: 512)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1457, file: !1458, line: 496, baseType: !693, size: 64, offset: 576)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1457, file: !1458, line: 501, baseType: !1624, size: 64, offset: 640)
!1624 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1625, size: 64)
!1625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !354, line: 2355, size: 576, elements: !1626)
!1626 = !{!1627, !1630, !1631, !1632, !1633, !1635, !1636, !1641, !1642, !1643, !1644, !1645, !1646}
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1625, file: !354, line: 2356, baseType: !1628, size: 64)
!1628 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1629, size: 64)
!1629 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !354, line: 2356, flags: DIFlagFwdDecl)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1625, file: !354, line: 2357, baseType: !685, size: 64, offset: 64)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1625, file: !354, line: 2358, baseType: !680, size: 32, offset: 128)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1625, file: !354, line: 2359, baseType: !680, size: 32, offset: 160)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1625, file: !354, line: 2360, baseType: !1634, size: 128, offset: 192)
!1634 = !DICompositeType(tag: DW_TAG_array_type, baseType: !680, size: 128, elements: !960)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1625, file: !354, line: 2364, baseType: !680, size: 32, offset: 320)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1625, file: !354, line: 2367, baseType: !1637, size: 128, offset: 384)
!1637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !354, line: 2349, size: 128, elements: !1638)
!1638 = !{!1639, !1640}
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1637, file: !354, line: 2351, baseType: !868, size: 64)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1637, file: !354, line: 2352, baseType: !749, size: 64, offset: 64)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1625, file: !354, line: 2371, baseType: !353, size: 32, offset: 512)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1625, file: !354, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1625, file: !354, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1625, file: !354, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1625, file: !354, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1625, file: !354, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1457, file: !1458, line: 504, baseType: !1648, size: 64, offset: 704)
!1648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1649, size: 64)
!1649 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1458, line: 504, flags: DIFlagFwdDecl)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1457, file: !1458, line: 507, baseType: !1500, size: 64, offset: 768)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1457, file: !1458, line: 510, baseType: !680, size: 32, offset: 832)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1457, file: !1458, line: 513, baseType: !680, size: 32, offset: 864)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1457, file: !1458, line: 516, baseType: !818, size: 32, offset: 896)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1457, file: !1458, line: 519, baseType: !818, size: 32, offset: 928)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1457, file: !1458, line: 522, baseType: !7, size: 32, offset: 960)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1457, file: !1458, line: 523, baseType: !7, size: 32, offset: 992)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1457, file: !1458, line: 528, baseType: !685, size: 64, offset: 1024)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1457, file: !1458, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1457, file: !1458, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1457, file: !1458, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1457, file: !1458, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1457, file: !1458, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1457, file: !1458, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1457, file: !1458, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1457, file: !1458, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1457, file: !1458, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1457, file: !1458, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1457, file: !1458, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1457, file: !1458, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1457, file: !1458, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1457, file: !1458, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1457, file: !1458, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1457, file: !1458, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1452, file: !135, line: 3254, baseType: !693, size: 64, offset: 1536)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1452, file: !135, line: 3257, baseType: !693, size: 64, offset: 1600)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1452, file: !135, line: 3258, baseType: !693, size: 64, offset: 1664)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1452, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1452, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1452, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1452, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1452, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1452, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1452, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1452, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1452, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1452, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1452, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1452, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1452, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1452, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1452, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1452, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1452, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1452, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !696, file: !135, line: 3394, baseType: !1696, size: 1344)
!1696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !1697)
!1697 = !{!1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739}
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1696, file: !135, line: 2280, baseType: !732, size: 192)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1696, file: !135, line: 2281, baseType: !693, size: 64, offset: 192)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1696, file: !135, line: 2282, baseType: !693, size: 64, offset: 256)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1696, file: !135, line: 2283, baseType: !693, size: 64, offset: 320)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1696, file: !135, line: 2284, baseType: !693, size: 64, offset: 384)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1696, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1696, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1696, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1696, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1696, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1696, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1696, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1696, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1696, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1696, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1696, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1696, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1696, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1696, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1696, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1696, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1696, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1696, file: !135, line: 2306, baseType: !1326, size: 32, offset: 544)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1696, file: !135, line: 2307, baseType: !693, size: 64, offset: 576)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1696, file: !135, line: 2308, baseType: !693, size: 64, offset: 640)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1696, file: !135, line: 2314, baseType: !1724, size: 64, offset: 704)
!1724 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !1725)
!1725 = !{!1726, !1727, !1728}
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1724, file: !135, line: 2310, baseType: !680, size: 32)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1724, file: !135, line: 2311, baseType: !685, size: 64)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1724, file: !135, line: 2312, baseType: !1729, size: 64)
!1729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1730, size: 64)
!1730 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1696, file: !135, line: 2315, baseType: !693, size: 64, offset: 768)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1696, file: !135, line: 2316, baseType: !693, size: 64, offset: 832)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1696, file: !135, line: 2317, baseType: !693, size: 64, offset: 896)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1696, file: !135, line: 2318, baseType: !693, size: 64, offset: 960)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1696, file: !135, line: 2319, baseType: !693, size: 64, offset: 1024)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1696, file: !135, line: 2320, baseType: !693, size: 64, offset: 1088)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1696, file: !135, line: 2321, baseType: !693, size: 64, offset: 1152)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1696, file: !135, line: 2322, baseType: !693, size: 64, offset: 1216)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1696, file: !135, line: 2324, baseType: !1740, size: 64, offset: 1280)
!1740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1741, size: 64)
!1741 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !696, file: !135, line: 3395, baseType: !1743, size: 320)
!1743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !1744)
!1744 = !{!1745, !1746, !1747}
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1743, file: !135, line: 1470, baseType: !732, size: 192)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1743, file: !135, line: 1471, baseType: !693, size: 64, offset: 192)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1743, file: !135, line: 1472, baseType: !693, size: 64, offset: 256)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !696, file: !135, line: 3396, baseType: !1749, size: 320)
!1749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !1750)
!1750 = !{!1751, !1752, !1753}
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1749, file: !135, line: 1483, baseType: !732, size: 192)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1749, file: !135, line: 1484, baseType: !680, size: 32, offset: 192)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1749, file: !135, line: 1485, baseType: !1070, size: 64, offset: 256)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !696, file: !135, line: 3397, baseType: !1755, size: 384)
!1755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !1756)
!1756 = !{!1757, !1758, !1759, !1760}
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1755, file: !135, line: 1830, baseType: !732, size: 192)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1755, file: !135, line: 1831, baseType: !818, size: 32, offset: 192)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1755, file: !135, line: 1832, baseType: !693, size: 64, offset: 256)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1755, file: !135, line: 1835, baseType: !1070, size: 64, offset: 320)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !696, file: !135, line: 3398, baseType: !1762, size: 704)
!1762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !1763)
!1763 = !{!1764, !1765, !1766, !1767, !1768, !1773}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1762, file: !135, line: 1899, baseType: !732, size: 192)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1762, file: !135, line: 1902, baseType: !693, size: 64, offset: 192)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1762, file: !135, line: 1905, baseType: !1017, size: 64, offset: 256)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1762, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1762, file: !135, line: 1911, baseType: !1769, size: 64, offset: 384)
!1769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1770, size: 64)
!1770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !664, line: 117, size: 128, elements: !1771)
!1771 = !{!1772}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1770, file: !664, line: 120, baseType: !1576, size: 128)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1762, file: !135, line: 1914, baseType: !1058, size: 256, offset: 448)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !696, file: !135, line: 3399, baseType: !1775, size: 704)
!1775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !1776)
!1776 = !{!1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787}
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1775, file: !135, line: 2009, baseType: !732, size: 192)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1775, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1775, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1775, file: !135, line: 2014, baseType: !818, size: 32, offset: 224)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1775, file: !135, line: 2016, baseType: !693, size: 64, offset: 256)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1775, file: !135, line: 2017, baseType: !1563, size: 64, offset: 320)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1775, file: !135, line: 2019, baseType: !693, size: 64, offset: 384)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1775, file: !135, line: 2020, baseType: !693, size: 64, offset: 448)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1775, file: !135, line: 2021, baseType: !693, size: 64, offset: 512)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1775, file: !135, line: 2022, baseType: !693, size: 64, offset: 576)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1775, file: !135, line: 2023, baseType: !693, size: 64, offset: 640)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !696, file: !135, line: 3400, baseType: !1789, size: 832)
!1789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !1790)
!1790 = !{!1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800}
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1789, file: !135, line: 2431, baseType: !732, size: 192)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1789, file: !135, line: 2433, baseType: !693, size: 64, offset: 192)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1789, file: !135, line: 2434, baseType: !693, size: 64, offset: 256)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1789, file: !135, line: 2435, baseType: !693, size: 64, offset: 320)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1789, file: !135, line: 2436, baseType: !693, size: 64, offset: 384)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1789, file: !135, line: 2437, baseType: !1563, size: 64, offset: 448)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1789, file: !135, line: 2438, baseType: !693, size: 64, offset: 512)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1789, file: !135, line: 2440, baseType: !693, size: 64, offset: 576)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1789, file: !135, line: 2441, baseType: !693, size: 64, offset: 640)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1789, file: !135, line: 2443, baseType: !1801, size: 128, offset: 704)
!1801 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !1802)
!1802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !1803)
!1803 = !{!1804}
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1802, file: !135, line: 182, baseType: !1568, size: 128)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !696, file: !135, line: 3401, baseType: !1806, size: 320)
!1806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !1807)
!1807 = !{!1808, !1809, !1816}
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1806, file: !135, line: 3329, baseType: !732, size: 192)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1806, file: !135, line: 3330, baseType: !1810, size: 64, offset: 192)
!1810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1811, size: 64)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !1812)
!1812 = !{!1813, !1814, !1815}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1811, file: !135, line: 3322, baseType: !1810, size: 64)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1811, file: !135, line: 3323, baseType: !1810, size: 64, offset: 64)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1811, file: !135, line: 3324, baseType: !693, size: 64, offset: 128)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1806, file: !135, line: 3331, baseType: !1810, size: 64, offset: 256)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !696, file: !135, line: 3402, baseType: !1818, size: 256)
!1818 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !1819)
!1819 = !{!1820, !1821}
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1818, file: !135, line: 1541, baseType: !732, size: 192)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1818, file: !135, line: 1542, baseType: !1822, size: 64, offset: 192)
!1822 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1823, size: 64)
!1823 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !1824)
!1824 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !1825)
!1825 = !{!1826}
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1824, file: !135, line: 1538, baseType: !1827, size: 192)
!1827 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !1828)
!1828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !1829)
!1829 = !{!1830, !1831, !1832}
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1828, file: !135, line: 1537, baseType: !7, size: 32)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1828, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1828, file: !135, line: 1537, baseType: !1833, size: 128, offset: 64)
!1833 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1834, size: 128, elements: !792)
!1834 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !1835)
!1835 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !1836)
!1836 = !{!1837, !1838}
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1835, file: !135, line: 1533, baseType: !693, size: 64)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1835, file: !135, line: 1534, baseType: !693, size: 64, offset: 64)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !696, file: !135, line: 3403, baseType: !1840, size: 512)
!1840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !1841)
!1841 = !{!1842, !1843, !1844, !1845, !1851, !1852, !1853}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1840, file: !135, line: 1939, baseType: !732, size: 192)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1840, file: !135, line: 1940, baseType: !818, size: 32, offset: 192)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1840, file: !135, line: 1941, baseType: !358, size: 32, offset: 224)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1840, file: !135, line: 1946, baseType: !1846, size: 32, offset: 256)
!1846 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !1847)
!1847 = !{!1848, !1849, !1850}
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1846, file: !135, line: 1943, baseType: !376, size: 32)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1846, file: !135, line: 1944, baseType: !383, size: 32)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1846, file: !135, line: 1945, baseType: !134, size: 32)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1840, file: !135, line: 1950, baseType: !1007, size: 64, offset: 320)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1840, file: !135, line: 1951, baseType: !1007, size: 64, offset: 384)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1840, file: !135, line: 1953, baseType: !1070, size: 64, offset: 448)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !696, file: !135, line: 3404, baseType: !1855, size: 1664)
!1855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !1856)
!1856 = !{!1857, !1858}
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1855, file: !135, line: 3338, baseType: !732, size: 192)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1855, file: !135, line: 3341, baseType: !1859, size: 1472, offset: 192)
!1859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1860, line: 410, size: 1472, elements: !1861)
!1860 = !DIFile(filename: "./options.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1861 = !{!1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025}
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1859, file: !1860, line: 412, baseType: !680, size: 32)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1859, file: !1860, line: 413, baseType: !680, size: 32, offset: 32)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1859, file: !1860, line: 414, baseType: !680, size: 32, offset: 64)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1859, file: !1860, line: 415, baseType: !680, size: 32, offset: 96)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1859, file: !1860, line: 416, baseType: !680, size: 32, offset: 128)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1859, file: !1860, line: 417, baseType: !680, size: 32, offset: 160)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1859, file: !1860, line: 418, baseType: !679, size: 8, offset: 192)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1859, file: !1860, line: 419, baseType: !679, size: 8, offset: 200)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1859, file: !1860, line: 420, baseType: !1871, size: 8, offset: 208)
!1871 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1859, file: !1860, line: 421, baseType: !1871, size: 8, offset: 216)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1859, file: !1860, line: 422, baseType: !1871, size: 8, offset: 224)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1859, file: !1860, line: 423, baseType: !1871, size: 8, offset: 232)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1859, file: !1860, line: 424, baseType: !1871, size: 8, offset: 240)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1859, file: !1860, line: 425, baseType: !1871, size: 8, offset: 248)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1859, file: !1860, line: 426, baseType: !1871, size: 8, offset: 256)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1859, file: !1860, line: 427, baseType: !1871, size: 8, offset: 264)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1859, file: !1860, line: 428, baseType: !1871, size: 8, offset: 272)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1859, file: !1860, line: 429, baseType: !1871, size: 8, offset: 280)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1859, file: !1860, line: 430, baseType: !1871, size: 8, offset: 288)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1859, file: !1860, line: 431, baseType: !1871, size: 8, offset: 296)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1859, file: !1860, line: 432, baseType: !1871, size: 8, offset: 304)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1859, file: !1860, line: 433, baseType: !1871, size: 8, offset: 312)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1859, file: !1860, line: 434, baseType: !1871, size: 8, offset: 320)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1859, file: !1860, line: 435, baseType: !1871, size: 8, offset: 328)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1859, file: !1860, line: 436, baseType: !1871, size: 8, offset: 336)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1859, file: !1860, line: 437, baseType: !1871, size: 8, offset: 344)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1859, file: !1860, line: 438, baseType: !1871, size: 8, offset: 352)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1859, file: !1860, line: 439, baseType: !1871, size: 8, offset: 360)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1859, file: !1860, line: 440, baseType: !1871, size: 8, offset: 368)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1859, file: !1860, line: 441, baseType: !1871, size: 8, offset: 376)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1859, file: !1860, line: 442, baseType: !1871, size: 8, offset: 384)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1859, file: !1860, line: 443, baseType: !1871, size: 8, offset: 392)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1859, file: !1860, line: 444, baseType: !1871, size: 8, offset: 400)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1859, file: !1860, line: 445, baseType: !1871, size: 8, offset: 408)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1859, file: !1860, line: 446, baseType: !1871, size: 8, offset: 416)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1859, file: !1860, line: 447, baseType: !1871, size: 8, offset: 424)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1859, file: !1860, line: 448, baseType: !1871, size: 8, offset: 432)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1859, file: !1860, line: 449, baseType: !1871, size: 8, offset: 440)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1859, file: !1860, line: 450, baseType: !1871, size: 8, offset: 448)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1859, file: !1860, line: 451, baseType: !1871, size: 8, offset: 456)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1859, file: !1860, line: 452, baseType: !1871, size: 8, offset: 464)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1859, file: !1860, line: 453, baseType: !1871, size: 8, offset: 472)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1859, file: !1860, line: 454, baseType: !1871, size: 8, offset: 480)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1859, file: !1860, line: 455, baseType: !1871, size: 8, offset: 488)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1859, file: !1860, line: 456, baseType: !1871, size: 8, offset: 496)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1859, file: !1860, line: 457, baseType: !1871, size: 8, offset: 504)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1859, file: !1860, line: 458, baseType: !1871, size: 8, offset: 512)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1859, file: !1860, line: 459, baseType: !1871, size: 8, offset: 520)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1859, file: !1860, line: 460, baseType: !1871, size: 8, offset: 528)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1859, file: !1860, line: 461, baseType: !1871, size: 8, offset: 536)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1859, file: !1860, line: 462, baseType: !1871, size: 8, offset: 544)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1859, file: !1860, line: 463, baseType: !1871, size: 8, offset: 552)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1859, file: !1860, line: 464, baseType: !1871, size: 8, offset: 560)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1859, file: !1860, line: 465, baseType: !1871, size: 8, offset: 568)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1859, file: !1860, line: 466, baseType: !1871, size: 8, offset: 576)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1859, file: !1860, line: 467, baseType: !1871, size: 8, offset: 584)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1859, file: !1860, line: 468, baseType: !1871, size: 8, offset: 592)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1859, file: !1860, line: 469, baseType: !1871, size: 8, offset: 600)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1859, file: !1860, line: 470, baseType: !1871, size: 8, offset: 608)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1859, file: !1860, line: 471, baseType: !1871, size: 8, offset: 616)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1859, file: !1860, line: 472, baseType: !1871, size: 8, offset: 624)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1859, file: !1860, line: 473, baseType: !1871, size: 8, offset: 632)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1859, file: !1860, line: 474, baseType: !1871, size: 8, offset: 640)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1859, file: !1860, line: 475, baseType: !1871, size: 8, offset: 648)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1859, file: !1860, line: 476, baseType: !1871, size: 8, offset: 656)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1859, file: !1860, line: 477, baseType: !1871, size: 8, offset: 664)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1859, file: !1860, line: 478, baseType: !1871, size: 8, offset: 672)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1859, file: !1860, line: 479, baseType: !1871, size: 8, offset: 680)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1859, file: !1860, line: 480, baseType: !1871, size: 8, offset: 688)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1859, file: !1860, line: 481, baseType: !1871, size: 8, offset: 696)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1859, file: !1860, line: 482, baseType: !1871, size: 8, offset: 704)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1859, file: !1860, line: 483, baseType: !1871, size: 8, offset: 712)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1859, file: !1860, line: 484, baseType: !1871, size: 8, offset: 720)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1859, file: !1860, line: 485, baseType: !1871, size: 8, offset: 728)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1859, file: !1860, line: 486, baseType: !1871, size: 8, offset: 736)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1859, file: !1860, line: 487, baseType: !1871, size: 8, offset: 744)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1859, file: !1860, line: 488, baseType: !1871, size: 8, offset: 752)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1859, file: !1860, line: 489, baseType: !1871, size: 8, offset: 760)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1859, file: !1860, line: 490, baseType: !1871, size: 8, offset: 768)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1859, file: !1860, line: 491, baseType: !1871, size: 8, offset: 776)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1859, file: !1860, line: 492, baseType: !1871, size: 8, offset: 784)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1859, file: !1860, line: 493, baseType: !1871, size: 8, offset: 792)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1859, file: !1860, line: 494, baseType: !1871, size: 8, offset: 800)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1859, file: !1860, line: 495, baseType: !1871, size: 8, offset: 808)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1859, file: !1860, line: 496, baseType: !1871, size: 8, offset: 816)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1859, file: !1860, line: 497, baseType: !1871, size: 8, offset: 824)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1859, file: !1860, line: 498, baseType: !1871, size: 8, offset: 832)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1859, file: !1860, line: 499, baseType: !1871, size: 8, offset: 840)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1859, file: !1860, line: 500, baseType: !1871, size: 8, offset: 848)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1859, file: !1860, line: 501, baseType: !1871, size: 8, offset: 856)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1859, file: !1860, line: 502, baseType: !1871, size: 8, offset: 864)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1859, file: !1860, line: 503, baseType: !1871, size: 8, offset: 872)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1859, file: !1860, line: 504, baseType: !1871, size: 8, offset: 880)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1859, file: !1860, line: 505, baseType: !1871, size: 8, offset: 888)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1859, file: !1860, line: 506, baseType: !1871, size: 8, offset: 896)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1859, file: !1860, line: 507, baseType: !1871, size: 8, offset: 904)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1859, file: !1860, line: 508, baseType: !1871, size: 8, offset: 912)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1859, file: !1860, line: 509, baseType: !1871, size: 8, offset: 920)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1859, file: !1860, line: 510, baseType: !1871, size: 8, offset: 928)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1859, file: !1860, line: 511, baseType: !1871, size: 8, offset: 936)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1859, file: !1860, line: 512, baseType: !1871, size: 8, offset: 944)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1859, file: !1860, line: 513, baseType: !1871, size: 8, offset: 952)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1859, file: !1860, line: 514, baseType: !1871, size: 8, offset: 960)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1859, file: !1860, line: 515, baseType: !1871, size: 8, offset: 968)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1859, file: !1860, line: 516, baseType: !1871, size: 8, offset: 976)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1859, file: !1860, line: 517, baseType: !1871, size: 8, offset: 984)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1859, file: !1860, line: 518, baseType: !1871, size: 8, offset: 992)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1859, file: !1860, line: 519, baseType: !1871, size: 8, offset: 1000)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1859, file: !1860, line: 520, baseType: !1871, size: 8, offset: 1008)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1859, file: !1860, line: 521, baseType: !1871, size: 8, offset: 1016)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1859, file: !1860, line: 522, baseType: !1871, size: 8, offset: 1024)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1859, file: !1860, line: 523, baseType: !1871, size: 8, offset: 1032)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1859, file: !1860, line: 524, baseType: !1871, size: 8, offset: 1040)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1859, file: !1860, line: 525, baseType: !1871, size: 8, offset: 1048)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1859, file: !1860, line: 526, baseType: !1871, size: 8, offset: 1056)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1859, file: !1860, line: 527, baseType: !1871, size: 8, offset: 1064)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1859, file: !1860, line: 528, baseType: !1871, size: 8, offset: 1072)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1859, file: !1860, line: 529, baseType: !1871, size: 8, offset: 1080)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1859, file: !1860, line: 530, baseType: !1871, size: 8, offset: 1088)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1859, file: !1860, line: 531, baseType: !1871, size: 8, offset: 1096)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1859, file: !1860, line: 532, baseType: !1871, size: 8, offset: 1104)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1859, file: !1860, line: 533, baseType: !1871, size: 8, offset: 1112)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1859, file: !1860, line: 534, baseType: !1871, size: 8, offset: 1120)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1859, file: !1860, line: 535, baseType: !1871, size: 8, offset: 1128)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1859, file: !1860, line: 536, baseType: !1871, size: 8, offset: 1136)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1859, file: !1860, line: 537, baseType: !1871, size: 8, offset: 1144)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1859, file: !1860, line: 538, baseType: !1871, size: 8, offset: 1152)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1859, file: !1860, line: 539, baseType: !1871, size: 8, offset: 1160)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1859, file: !1860, line: 540, baseType: !1871, size: 8, offset: 1168)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1859, file: !1860, line: 541, baseType: !1871, size: 8, offset: 1176)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1859, file: !1860, line: 542, baseType: !1871, size: 8, offset: 1184)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1859, file: !1860, line: 543, baseType: !1871, size: 8, offset: 1192)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1859, file: !1860, line: 544, baseType: !1871, size: 8, offset: 1200)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1859, file: !1860, line: 545, baseType: !1871, size: 8, offset: 1208)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1859, file: !1860, line: 546, baseType: !1871, size: 8, offset: 1216)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1859, file: !1860, line: 547, baseType: !1871, size: 8, offset: 1224)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1859, file: !1860, line: 548, baseType: !1871, size: 8, offset: 1232)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1859, file: !1860, line: 549, baseType: !1871, size: 8, offset: 1240)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1859, file: !1860, line: 550, baseType: !1871, size: 8, offset: 1248)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1859, file: !1860, line: 551, baseType: !1871, size: 8, offset: 1256)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1859, file: !1860, line: 552, baseType: !1871, size: 8, offset: 1264)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1859, file: !1860, line: 553, baseType: !1871, size: 8, offset: 1272)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1859, file: !1860, line: 554, baseType: !1871, size: 8, offset: 1280)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1859, file: !1860, line: 555, baseType: !1871, size: 8, offset: 1288)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1859, file: !1860, line: 556, baseType: !1871, size: 8, offset: 1296)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1859, file: !1860, line: 557, baseType: !1871, size: 8, offset: 1304)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1859, file: !1860, line: 558, baseType: !1871, size: 8, offset: 1312)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1859, file: !1860, line: 559, baseType: !1871, size: 8, offset: 1320)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1859, file: !1860, line: 560, baseType: !1871, size: 8, offset: 1328)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1859, file: !1860, line: 561, baseType: !1871, size: 8, offset: 1336)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1859, file: !1860, line: 562, baseType: !1871, size: 8, offset: 1344)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1859, file: !1860, line: 563, baseType: !1871, size: 8, offset: 1352)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1859, file: !1860, line: 564, baseType: !1871, size: 8, offset: 1360)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1859, file: !1860, line: 565, baseType: !1871, size: 8, offset: 1368)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1859, file: !1860, line: 566, baseType: !1871, size: 8, offset: 1376)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1859, file: !1860, line: 567, baseType: !1871, size: 8, offset: 1384)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1859, file: !1860, line: 568, baseType: !1871, size: 8, offset: 1392)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1859, file: !1860, line: 569, baseType: !1871, size: 8, offset: 1400)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1859, file: !1860, line: 570, baseType: !1871, size: 8, offset: 1408)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1859, file: !1860, line: 571, baseType: !1871, size: 8, offset: 1416)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1859, file: !1860, line: 572, baseType: !1871, size: 8, offset: 1424)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1859, file: !1860, line: 573, baseType: !1871, size: 8, offset: 1432)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1859, file: !1860, line: 574, baseType: !1871, size: 8, offset: 1440)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !696, file: !135, line: 3405, baseType: !2027, size: 384)
!2027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2028)
!2028 = !{!2029, !2030}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2027, file: !135, line: 3353, baseType: !732, size: 192)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2027, file: !135, line: 3356, baseType: !2031, size: 192, offset: 192)
!2031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1860, line: 578, size: 192, elements: !2032)
!2032 = !{!2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043}
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2031, file: !1860, line: 580, baseType: !680, size: 32)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2031, file: !1860, line: 581, baseType: !680, size: 32, offset: 32)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2031, file: !1860, line: 582, baseType: !680, size: 32, offset: 64)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2031, file: !1860, line: 583, baseType: !680, size: 32, offset: 96)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2031, file: !1860, line: 584, baseType: !679, size: 8, offset: 128)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2031, file: !1860, line: 585, baseType: !679, size: 8, offset: 136)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2031, file: !1860, line: 586, baseType: !679, size: 8, offset: 144)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2031, file: !1860, line: 587, baseType: !679, size: 8, offset: 152)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2031, file: !1860, line: 588, baseType: !679, size: 8, offset: 160)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2031, file: !1860, line: 589, baseType: !679, size: 8, offset: 168)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2031, file: !1860, line: 590, baseType: !679, size: 8, offset: 176)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !689, file: !391, line: 100, baseType: !693, size: 64, offset: 128)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "equiv", scope: !689, file: !391, line: 104, baseType: !1586, size: 64, offset: 192)
!2046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2047, size: 64)
!2047 = !DIDerivedType(tag: DW_TAG_typedef, name: "assert_locus_t", file: !3, line: 94, baseType: !2048)
!2048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2049, size: 64)
!2049 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "assert_locus_d", file: !3, line: 69, size: 576, elements: !2050)
!2050 = !{!2051, !2052, !2053, !2060, !2061, !2062, !2063}
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2049, file: !3, line: 72, baseType: !1468, size: 64)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !2049, file: !3, line: 76, baseType: !997, size: 64, offset: 64)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "si", scope: !2049, file: !3, line: 79, baseType: !2054, size: 192, offset: 128)
!2054 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !588, line: 265, baseType: !2055)
!2055 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !588, line: 254, size: 192, elements: !2056)
!2056 = !{!2057, !2058, !2059}
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2055, file: !588, line: 257, baseType: !1012, size: 64)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2055, file: !588, line: 263, baseType: !1007, size: 64, offset: 64)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2055, file: !588, line: 264, baseType: !1468, size: 64, offset: 128)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "comp_code", scope: !2049, file: !3, line: 82, baseType: !134, size: 32, offset: 320)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2049, file: !3, line: 85, baseType: !693, size: 64, offset: 384)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2049, file: !3, line: 88, baseType: !693, size: 64, offset: 448)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2049, file: !3, line: 91, baseType: !2048, size: 64, offset: 512)
!2064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !680, size: 64)
!2065 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2066, size: 64)
!2066 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2067, line: 45, baseType: !2068)
!2067 = !DIFile(filename: "./sbitmap.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!2068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2069, size: 64)
!2069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2067, line: 39, size: 192, elements: !2070)
!2070 = !{!2071, !2072, !2073, !2074}
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2069, file: !2067, line: 41, baseType: !678, size: 64)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2069, file: !2067, line: 42, baseType: !7, size: 32, offset: 64)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2069, file: !2067, line: 43, baseType: !7, size: 32, offset: 96)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2069, file: !2067, line: 44, baseType: !2075, size: 64, offset: 128)
!2075 = !DICompositeType(tag: DW_TAG_array_type, baseType: !747, size: 64, elements: !792)
!2076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2077, size: 64)
!2077 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1019)
!2078 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2079, size: 64)
!2079 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2080)
!2080 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !694, line: 59, baseType: !2081)
!2081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2082, size: 64)
!2082 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !696)
!2083 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !581, line: 30, baseType: !2084)
!2084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2085, size: 64)
!2085 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !1058)
!2086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2087, size: 64)
!2087 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !343, line: 152, baseType: !2088)
!2088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !343, line: 152, size: 128, elements: !2089)
!2089 = !{!2090}
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2088, file: !343, line: 152, baseType: !990, size: 128)
!2091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2092, size: 64)
!2092 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_switch_update_heap", file: !3, line: 121, baseType: !2093)
!2093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_switch_update_heap", file: !3, line: 121, size: 192, elements: !2094)
!2094 = !{!2095}
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2093, file: !3, line: 121, baseType: !2096, size: 192)
!2096 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_switch_update_base", file: !3, line: 120, baseType: !2097)
!2097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_switch_update_base", file: !3, line: 120, size: 192, elements: !2098)
!2098 = !{!2099, !2100, !2101}
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2097, file: !3, line: 120, baseType: !7, size: 32)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2097, file: !3, line: 120, baseType: !7, size: 32, offset: 32)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2097, file: !3, line: 120, baseType: !2102, size: 128, offset: 64)
!2102 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2103, size: 128, elements: !792)
!2103 = !DIDerivedType(tag: DW_TAG_typedef, name: "switch_update", file: !3, line: 117, baseType: !2104)
!2104 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 114, size: 128, elements: !2105)
!2105 = !{!2106, !2107}
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !2104, file: !3, line: 115, baseType: !1017, size: 64)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2104, file: !3, line: 116, baseType: !693, size: 64, offset: 64)
!2108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !687, size: 64)
!2109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2110, size: 64)
!2110 = !DIDerivedType(tag: DW_TAG_typedef, name: "prop_value_t", file: !391, line: 74, baseType: !2111)
!2111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "prop_value_d", file: !391, line: 64, size: 128, elements: !2112)
!2112 = !{!2113, !2114}
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "lattice_val", scope: !2111, file: !391, line: 68, baseType: !7, size: 32)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !2111, file: !391, line: 71, baseType: !693, size: 64, offset: 64)
!2115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2116, size: 64)
!2116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !588, line: 4652, size: 448, elements: !2117)
!2117 = !{!2118, !2119, !2120, !2123, !2124, !2125, !2126, !2127}
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !2116, file: !588, line: 4655, baseType: !2054, size: 192)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2116, file: !588, line: 4659, baseType: !684, size: 64, offset: 192)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !2116, file: !588, line: 4664, baseType: !2121, size: 64, offset: 256)
!2121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2122, size: 64)
!2122 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !135, line: 5199, flags: DIFlagFwdDecl)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !2116, file: !588, line: 4678, baseType: !679, size: 8, offset: 320)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !2116, file: !588, line: 4681, baseType: !679, size: 8, offset: 328)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !2116, file: !588, line: 4685, baseType: !679, size: 8, offset: 336)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !2116, file: !588, line: 4688, baseType: !679, size: 8, offset: 344)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !2116, file: !588, line: 4694, baseType: !693, size: 64, offset: 384)
!2128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !818, size: 64)
!2129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2130, size: 64)
!2130 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !2131)
!2131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !2132)
!2132 = !{!2133}
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2131, file: !135, line: 184, baseType: !1568, size: 128)
!2134 = !{!2135, !2163, !2165, !0, !2167, !2169, !2171, !2173, !2175, !2210, !2212, !2214}
!2135 = !DIGlobalVariableExpression(var: !2136, expr: !DIExpression())
!2136 = distinct !DIGlobalVariable(name: "pass_vrp", scope: !2, file: !3, line: 7418, type: !2137, isLocal: false, isDefinition: true)
!2137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !398, line: 156, size: 640, elements: !2138)
!2138 = !{!2139}
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2137, file: !398, line: 158, baseType: !2140, size: 640)
!2140 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !398, line: 114, size: 640, elements: !2141)
!2141 = !{!2142, !2143, !2144, !2148, !2152, !2154, !2155, !2156, !2158, !2159, !2160, !2161, !2162}
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2140, file: !398, line: 117, baseType: !397, size: 32)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2140, file: !398, line: 121, baseType: !685, size: 64, offset: 64)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2140, file: !398, line: 125, baseType: !2145, size: 64, offset: 128)
!2145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2146, size: 64)
!2146 = !DISubroutineType(types: !2147)
!2147 = !{!679}
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2140, file: !398, line: 130, baseType: !2149, size: 64, offset: 192)
!2149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2150, size: 64)
!2150 = !DISubroutineType(types: !2151)
!2151 = !{!7}
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2140, file: !398, line: 133, baseType: !2153, size: 64, offset: 256)
!2153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2140, size: 64)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2140, file: !398, line: 136, baseType: !2153, size: 64, offset: 320)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2140, file: !398, line: 139, baseType: !680, size: 32, offset: 384)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2140, file: !398, line: 143, baseType: !2157, size: 32, offset: 416)
!2157 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !405, line: 80, baseType: !404)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2140, file: !398, line: 146, baseType: !7, size: 32, offset: 448)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2140, file: !398, line: 147, baseType: !7, size: 32, offset: 480)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2140, file: !398, line: 148, baseType: !7, size: 32, offset: 512)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2140, file: !398, line: 151, baseType: !7, size: 32, offset: 544)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2140, file: !398, line: 152, baseType: !7, size: 32, offset: 576)
!2163 = !DIGlobalVariableExpression(var: !2164, expr: !DIExpression())
!2164 = distinct !DIGlobalVariable(name: "need_assert_for", scope: !2, file: !3, line: 98, type: !1586, isLocal: true, isDefinition: true)
!2165 = !DIGlobalVariableExpression(var: !2166, expr: !DIExpression())
!2166 = distinct !DIGlobalVariable(name: "asserts_for", scope: !2, file: !3, line: 103, type: !2046, isLocal: true, isDefinition: true)
!2167 = !DIGlobalVariableExpression(var: !2168, expr: !DIExpression())
!2168 = distinct !DIGlobalVariable(name: "live", scope: !2, file: !3, line: 45, type: !2065, isLocal: true, isDefinition: true)
!2169 = !DIGlobalVariableExpression(var: !2170, expr: !DIExpression())
!2170 = distinct !DIGlobalVariable(name: "to_remove_edges", scope: !2, file: !3, line: 119, type: !2086, isLocal: true, isDefinition: true)
!2171 = !DIGlobalVariableExpression(var: !2172, expr: !DIExpression())
!2172 = distinct !DIGlobalVariable(name: "to_update_switch_stmts", scope: !2, file: !3, line: 122, type: !2091, isLocal: true, isDefinition: true)
!2173 = !DIGlobalVariableExpression(var: !2174, expr: !DIExpression())
!2174 = distinct !DIGlobalVariable(name: "vr_phi_edge_counts", scope: !2, file: !3, line: 112, type: !2064, isLocal: true, isDefinition: true)
!2175 = !DIGlobalVariableExpression(var: !2176, expr: !DIExpression())
!2176 = distinct !DIGlobalVariable(name: "s_obstack", scope: !2177, file: !3, line: 5524, type: !941, isLocal: true, isDefinition: true)
!2177 = distinct !DISubprogram(name: "compare_names", scope: !3, file: !3, line: 5516, type: !2178, scopeLine: 5518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2180)
!2178 = !DISubroutineType(types: !2179)
!2179 = !{!693, !134, !693, !693, !678}
!2180 = !{!2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2197, !2198, !2199, !2200, !2201, !2205, !2209}
!2181 = !DILocalVariable(name: "comp", arg: 1, scope: !2177, file: !3, line: 5516, type: !134)
!2182 = !DILocalVariable(name: "n1", arg: 2, scope: !2177, file: !3, line: 5516, type: !693)
!2183 = !DILocalVariable(name: "n2", arg: 3, scope: !2177, file: !3, line: 5516, type: !693)
!2184 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !2177, file: !3, line: 5517, type: !678)
!2185 = !DILocalVariable(name: "t", scope: !2177, file: !3, line: 5519, type: !693)
!2186 = !DILocalVariable(name: "retval", scope: !2177, file: !3, line: 5519, type: !693)
!2187 = !DILocalVariable(name: "e1", scope: !2177, file: !3, line: 5520, type: !1586)
!2188 = !DILocalVariable(name: "e2", scope: !2177, file: !3, line: 5520, type: !1586)
!2189 = !DILocalVariable(name: "bi1", scope: !2177, file: !3, line: 5521, type: !2190)
!2190 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !922, line: 218, baseType: !2191)
!2191 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !922, line: 203, size: 256, elements: !2192)
!2192 = !{!2193, !2194, !2195, !2196}
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !2191, file: !922, line: 206, baseType: !925, size: 64)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !2191, file: !922, line: 209, baseType: !925, size: 64, offset: 64)
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !2191, file: !922, line: 212, baseType: !7, size: 32, offset: 128)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2191, file: !922, line: 217, baseType: !935, size: 64, offset: 192)
!2197 = !DILocalVariable(name: "bi2", scope: !2177, file: !3, line: 5521, type: !2190)
!2198 = !DILocalVariable(name: "i1", scope: !2177, file: !3, line: 5522, type: !7)
!2199 = !DILocalVariable(name: "i2", scope: !2177, file: !3, line: 5522, type: !7)
!2200 = !DILocalVariable(name: "used_strict_overflow", scope: !2177, file: !3, line: 5523, type: !680)
!2201 = !DILocalVariable(name: "vr1", scope: !2202, file: !3, line: 5572, type: !688)
!2202 = distinct !DILexicalBlock(scope: !2203, file: !3, line: 5571, column: 5)
!2203 = distinct !DILexicalBlock(scope: !2204, file: !3, line: 5570, column: 3)
!2204 = distinct !DILexicalBlock(scope: !2177, file: !3, line: 5570, column: 3)
!2205 = !DILocalVariable(name: "sop", scope: !2206, file: !3, line: 5577, type: !679)
!2206 = distinct !DILexicalBlock(scope: !2207, file: !3, line: 5576, column: 2)
!2207 = distinct !DILexicalBlock(scope: !2208, file: !3, line: 5575, column: 7)
!2208 = distinct !DILexicalBlock(scope: !2202, file: !3, line: 5575, column: 7)
!2209 = !DILocalVariable(name: "vr2", scope: !2206, file: !3, line: 5579, type: !688)
!2210 = !DIGlobalVariableExpression(var: !2211, expr: !DIExpression())
!2211 = distinct !DIGlobalVariable(name: "s_e1", scope: !2177, file: !3, line: 5525, type: !1586, isLocal: true, isDefinition: true)
!2212 = !DIGlobalVariableExpression(var: !2213, expr: !DIExpression())
!2213 = distinct !DIGlobalVariable(name: "s_e2", scope: !2177, file: !3, line: 5525, type: !1586, isLocal: true, isDefinition: true)
!2214 = !DIGlobalVariableExpression(var: !2215, expr: !DIExpression())
!2215 = distinct !DIGlobalVariable(name: "stack", scope: !2, file: !3, line: 7087, type: !2129, isLocal: true, isDefinition: true)
!2216 = !{i32 2, !"Dwarf Version", i32 4}
!2217 = !{i32 2, !"Debug Info Version", i32 3}
!2218 = !{i32 1, !"wchar_size", i32 4}
!2219 = !{!"clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)"}
!2220 = distinct !DISubprogram(name: "vprintf", scope: !2221, file: !2221, line: 39, type: !2222, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2232)
!2221 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdio.h", directory: "")
!2222 = !DISubroutineType(types: !2223)
!2223 = !{!680, !2224, !2225}
!2224 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !685)
!2225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2226, size: 64)
!2226 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, size: 192, elements: !2227)
!2227 = !{!2228, !2229, !2230, !2231}
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2226, file: !3, baseType: !7, size: 32)
!2229 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2226, file: !3, baseType: !7, size: 32, offset: 32)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2226, file: !3, baseType: !684, size: 64, offset: 64)
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2226, file: !3, baseType: !684, size: 64, offset: 128)
!2232 = !{!2233, !2234}
!2233 = !DILocalVariable(name: "__fmt", arg: 1, scope: !2220, file: !2221, line: 39, type: !2224)
!2234 = !DILocalVariable(name: "__arg", arg: 2, scope: !2220, file: !2221, line: 39, type: !2225)
!2235 = !DILocation(line: 0, scope: !2220)
!2236 = !DILocation(line: 41, column: 20, scope: !2220)
!2237 = !DILocation(line: 41, column: 10, scope: !2220)
!2238 = !DILocation(line: 41, column: 3, scope: !2220)
!2239 = distinct !DISubprogram(name: "getchar", scope: !2221, file: !2221, line: 47, type: !2240, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2242)
!2240 = !DISubroutineType(types: !2241)
!2241 = !{!680}
!2242 = !{}
!2243 = !DILocation(line: 49, column: 16, scope: !2239)
!2244 = !DILocation(line: 49, column: 10, scope: !2239)
!2245 = !DILocation(line: 49, column: 3, scope: !2239)
!2246 = distinct !DISubprogram(name: "fgetc_unlocked", scope: !2221, file: !2221, line: 56, type: !2247, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2300)
!2247 = !DISubroutineType(types: !2248)
!2248 = !{!680, !2249}
!2249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2250, size: 64)
!2250 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2251, line: 7, baseType: !2252)
!2251 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2253, line: 49, size: 1728, elements: !2254)
!2253 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2254 = !{!2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2270, !2272, !2273, !2274, !2277, !2279, !2280, !2281, !2284, !2286, !2289, !2292, !2293, !2294, !2295, !2296}
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2252, file: !2253, line: 51, baseType: !680, size: 32)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2252, file: !2253, line: 54, baseType: !682, size: 64, offset: 64)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2252, file: !2253, line: 55, baseType: !682, size: 64, offset: 128)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2252, file: !2253, line: 56, baseType: !682, size: 64, offset: 192)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2252, file: !2253, line: 57, baseType: !682, size: 64, offset: 256)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2252, file: !2253, line: 58, baseType: !682, size: 64, offset: 320)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2252, file: !2253, line: 59, baseType: !682, size: 64, offset: 384)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2252, file: !2253, line: 60, baseType: !682, size: 64, offset: 448)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2252, file: !2253, line: 61, baseType: !682, size: 64, offset: 512)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2252, file: !2253, line: 64, baseType: !682, size: 64, offset: 576)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2252, file: !2253, line: 65, baseType: !682, size: 64, offset: 640)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2252, file: !2253, line: 66, baseType: !682, size: 64, offset: 704)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2252, file: !2253, line: 68, baseType: !2268, size: 64, offset: 768)
!2268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2269, size: 64)
!2269 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2253, line: 36, flags: DIFlagFwdDecl)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2252, file: !2253, line: 70, baseType: !2271, size: 64, offset: 832)
!2271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2252, size: 64)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2252, file: !2253, line: 72, baseType: !680, size: 32, offset: 896)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2252, file: !2253, line: 73, baseType: !680, size: 32, offset: 928)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2252, file: !2253, line: 74, baseType: !2275, size: 64, offset: 960)
!2275 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2276, line: 152, baseType: !749)
!2276 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2252, file: !2253, line: 77, baseType: !2278, size: 16, offset: 1024)
!2278 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2252, file: !2253, line: 78, baseType: !1871, size: 8, offset: 1040)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2252, file: !2253, line: 79, baseType: !791, size: 8, offset: 1048)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2252, file: !2253, line: 81, baseType: !2282, size: 64, offset: 1088)
!2282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2283, size: 64)
!2283 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2253, line: 43, baseType: null)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2252, file: !2253, line: 89, baseType: !2285, size: 64, offset: 1152)
!2285 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2276, line: 153, baseType: !749)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2252, file: !2253, line: 91, baseType: !2287, size: 64, offset: 1216)
!2287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2288, size: 64)
!2288 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2253, line: 37, flags: DIFlagFwdDecl)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2252, file: !2253, line: 92, baseType: !2290, size: 64, offset: 1280)
!2290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2291, size: 64)
!2291 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2253, line: 38, flags: DIFlagFwdDecl)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2252, file: !2253, line: 93, baseType: !2271, size: 64, offset: 1344)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2252, file: !2253, line: 94, baseType: !684, size: 64, offset: 1408)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2252, file: !2253, line: 95, baseType: !1162, size: 64, offset: 1472)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2252, file: !2253, line: 96, baseType: !680, size: 32, offset: 1536)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2252, file: !2253, line: 98, baseType: !2297, size: 160, offset: 1568)
!2297 = !DICompositeType(tag: DW_TAG_array_type, baseType: !683, size: 160, elements: !2298)
!2298 = !{!2299}
!2299 = !DISubrange(count: 20)
!2300 = !{!2301}
!2301 = !DILocalVariable(name: "__fp", arg: 1, scope: !2246, file: !2221, line: 56, type: !2249)
!2302 = !DILocation(line: 0, scope: !2246)
!2303 = !DILocation(line: 58, column: 10, scope: !2246)
!2304 = !DILocation(line: 58, column: 3, scope: !2246)
!2305 = distinct !DISubprogram(name: "getc_unlocked", scope: !2221, file: !2221, line: 66, type: !2247, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2306)
!2306 = !{!2307}
!2307 = !DILocalVariable(name: "__fp", arg: 1, scope: !2305, file: !2221, line: 66, type: !2249)
!2308 = !DILocation(line: 0, scope: !2305)
!2309 = !DILocation(line: 68, column: 10, scope: !2305)
!2310 = !DILocation(line: 68, column: 3, scope: !2305)
!2311 = distinct !DISubprogram(name: "getchar_unlocked", scope: !2221, file: !2221, line: 73, type: !2240, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2242)
!2312 = !DILocation(line: 75, column: 10, scope: !2311)
!2313 = !DILocation(line: 75, column: 3, scope: !2311)
!2314 = distinct !DISubprogram(name: "putchar", scope: !2221, file: !2221, line: 82, type: !2315, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2317)
!2315 = !DISubroutineType(types: !2316)
!2316 = !{!680, !680}
!2317 = !{!2318}
!2318 = !DILocalVariable(name: "__c", arg: 1, scope: !2314, file: !2221, line: 82, type: !680)
!2319 = !DILocation(line: 0, scope: !2314)
!2320 = !DILocation(line: 84, column: 21, scope: !2314)
!2321 = !DILocation(line: 84, column: 10, scope: !2314)
!2322 = !DILocation(line: 84, column: 3, scope: !2314)
!2323 = distinct !DISubprogram(name: "fputc_unlocked", scope: !2221, file: !2221, line: 91, type: !2324, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2326)
!2324 = !DISubroutineType(types: !2325)
!2325 = !{!680, !680, !2249}
!2326 = !{!2327, !2328}
!2327 = !DILocalVariable(name: "__c", arg: 1, scope: !2323, file: !2221, line: 91, type: !680)
!2328 = !DILocalVariable(name: "__stream", arg: 2, scope: !2323, file: !2221, line: 91, type: !2249)
!2329 = !DILocation(line: 0, scope: !2323)
!2330 = !DILocation(line: 93, column: 10, scope: !2323)
!2331 = !DILocation(line: 93, column: 3, scope: !2323)
!2332 = distinct !DISubprogram(name: "putc_unlocked", scope: !2221, file: !2221, line: 101, type: !2324, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2333)
!2333 = !{!2334, !2335}
!2334 = !DILocalVariable(name: "__c", arg: 1, scope: !2332, file: !2221, line: 101, type: !680)
!2335 = !DILocalVariable(name: "__stream", arg: 2, scope: !2332, file: !2221, line: 101, type: !2249)
!2336 = !DILocation(line: 0, scope: !2332)
!2337 = !DILocation(line: 103, column: 10, scope: !2332)
!2338 = !DILocation(line: 103, column: 3, scope: !2332)
!2339 = distinct !DISubprogram(name: "putchar_unlocked", scope: !2221, file: !2221, line: 108, type: !2315, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2340)
!2340 = !{!2341}
!2341 = !DILocalVariable(name: "__c", arg: 1, scope: !2339, file: !2221, line: 108, type: !680)
!2342 = !DILocation(line: 0, scope: !2339)
!2343 = !DILocation(line: 110, column: 10, scope: !2339)
!2344 = !DILocation(line: 110, column: 3, scope: !2339)
!2345 = distinct !DISubprogram(name: "getline", scope: !2221, file: !2221, line: 118, type: !2346, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2350)
!2346 = !DISubroutineType(types: !2347)
!2347 = !{!2348, !681, !2349, !2249}
!2348 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !2276, line: 193, baseType: !749)
!2349 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1162, size: 64)
!2350 = !{!2351, !2352, !2353}
!2351 = !DILocalVariable(name: "__lineptr", arg: 1, scope: !2345, file: !2221, line: 118, type: !681)
!2352 = !DILocalVariable(name: "__n", arg: 2, scope: !2345, file: !2221, line: 118, type: !2349)
!2353 = !DILocalVariable(name: "__stream", arg: 3, scope: !2345, file: !2221, line: 118, type: !2249)
!2354 = !DILocation(line: 0, scope: !2345)
!2355 = !DILocation(line: 120, column: 10, scope: !2345)
!2356 = !DILocation(line: 120, column: 3, scope: !2345)
!2357 = distinct !DISubprogram(name: "feof_unlocked", scope: !2221, file: !2221, line: 128, type: !2247, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2358)
!2358 = !{!2359}
!2359 = !DILocalVariable(name: "__stream", arg: 1, scope: !2357, file: !2221, line: 128, type: !2249)
!2360 = !DILocation(line: 0, scope: !2357)
!2361 = !DILocation(line: 130, column: 10, scope: !2357)
!2362 = !DILocation(line: 130, column: 3, scope: !2357)
!2363 = distinct !DISubprogram(name: "ferror_unlocked", scope: !2221, file: !2221, line: 135, type: !2247, scopeLine: 136, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2364)
!2364 = !{!2365}
!2365 = !DILocalVariable(name: "__stream", arg: 1, scope: !2363, file: !2221, line: 135, type: !2249)
!2366 = !DILocation(line: 0, scope: !2363)
!2367 = !DILocation(line: 137, column: 10, scope: !2363)
!2368 = !DILocation(line: 137, column: 3, scope: !2363)
!2369 = distinct !DISubprogram(name: "tolower", scope: !2370, file: !2370, line: 207, type: !2315, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2371)
!2370 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!2371 = !{!2372}
!2372 = !DILocalVariable(name: "__c", arg: 1, scope: !2369, file: !2370, line: 207, type: !680)
!2373 = !DILocation(line: 0, scope: !2369)
!2374 = !DILocation(line: 209, column: 22, scope: !2369)
!2375 = !DILocation(line: 209, column: 39, scope: !2369)
!2376 = !DILocation(line: 209, column: 38, scope: !2369)
!2377 = !DILocation(line: 209, column: 37, scope: !2369)
!2378 = !DILocation(line: 209, column: 10, scope: !2369)
!2379 = !DILocation(line: 209, column: 3, scope: !2369)
!2380 = distinct !DISubprogram(name: "toupper", scope: !2370, file: !2370, line: 213, type: !2315, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2381)
!2381 = !{!2382}
!2382 = !DILocalVariable(name: "__c", arg: 1, scope: !2380, file: !2370, line: 213, type: !680)
!2383 = !DILocation(line: 0, scope: !2380)
!2384 = !DILocation(line: 215, column: 22, scope: !2380)
!2385 = !DILocation(line: 215, column: 39, scope: !2380)
!2386 = !DILocation(line: 215, column: 38, scope: !2380)
!2387 = !DILocation(line: 215, column: 37, scope: !2380)
!2388 = !DILocation(line: 215, column: 10, scope: !2380)
!2389 = !DILocation(line: 215, column: 3, scope: !2380)
!2390 = distinct !DISubprogram(name: "atoi", scope: !2391, file: !2391, line: 361, type: !2392, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2394)
!2391 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!2392 = !DISubroutineType(types: !2393)
!2393 = !{!680, !685}
!2394 = !{!2395}
!2395 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2390, file: !2391, line: 361, type: !685)
!2396 = !DILocation(line: 0, scope: !2390)
!2397 = !DILocation(line: 363, column: 16, scope: !2390)
!2398 = !DILocation(line: 363, column: 10, scope: !2390)
!2399 = !DILocation(line: 363, column: 3, scope: !2390)
!2400 = distinct !DISubprogram(name: "atol", scope: !2391, file: !2391, line: 366, type: !2401, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2403)
!2401 = !DISubroutineType(types: !2402)
!2402 = !{!749, !685}
!2403 = !{!2404}
!2404 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2400, file: !2391, line: 366, type: !685)
!2405 = !DILocation(line: 0, scope: !2400)
!2406 = !DILocation(line: 368, column: 10, scope: !2400)
!2407 = !DILocation(line: 368, column: 3, scope: !2400)
!2408 = distinct !DISubprogram(name: "atoll", scope: !2391, file: !2391, line: 373, type: !2409, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2412)
!2409 = !DISubroutineType(types: !2410)
!2410 = !{!2411, !685}
!2411 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!2412 = !{!2413}
!2413 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2408, file: !2391, line: 373, type: !685)
!2414 = !DILocation(line: 0, scope: !2408)
!2415 = !DILocation(line: 375, column: 10, scope: !2408)
!2416 = !DILocation(line: 375, column: 3, scope: !2408)
!2417 = distinct !DISubprogram(name: "bsearch", scope: !2418, file: !2418, line: 20, type: !2419, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2422)
!2418 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h", directory: "")
!2419 = !DISubroutineType(types: !2420)
!2420 = !{!684, !1511, !1511, !1162, !1162, !2421}
!2421 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !2391, line: 808, baseType: !1515)
!2422 = !{!2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432}
!2423 = !DILocalVariable(name: "__key", arg: 1, scope: !2417, file: !2418, line: 20, type: !1511)
!2424 = !DILocalVariable(name: "__base", arg: 2, scope: !2417, file: !2418, line: 20, type: !1511)
!2425 = !DILocalVariable(name: "__nmemb", arg: 3, scope: !2417, file: !2418, line: 20, type: !1162)
!2426 = !DILocalVariable(name: "__size", arg: 4, scope: !2417, file: !2418, line: 20, type: !1162)
!2427 = !DILocalVariable(name: "__compar", arg: 5, scope: !2417, file: !2418, line: 21, type: !2421)
!2428 = !DILocalVariable(name: "__l", scope: !2417, file: !2418, line: 23, type: !1162)
!2429 = !DILocalVariable(name: "__u", scope: !2417, file: !2418, line: 23, type: !1162)
!2430 = !DILocalVariable(name: "__idx", scope: !2417, file: !2418, line: 23, type: !1162)
!2431 = !DILocalVariable(name: "__p", scope: !2417, file: !2418, line: 24, type: !1511)
!2432 = !DILocalVariable(name: "__comparison", scope: !2417, file: !2418, line: 25, type: !680)
!2433 = !DILocation(line: 0, scope: !2417)
!2434 = !DILocation(line: 29, column: 3, scope: !2417)
!2435 = !DILocation(line: 27, column: 7, scope: !2417)
!2436 = !DILocation(line: 29, column: 14, scope: !2417)
!2437 = !DILocation(line: 31, column: 20, scope: !2438)
!2438 = distinct !DILexicalBlock(scope: !2417, file: !2418, line: 30, column: 5)
!2439 = !DILocation(line: 31, column: 27, scope: !2438)
!2440 = !DILocation(line: 32, column: 56, scope: !2438)
!2441 = !DILocation(line: 32, column: 47, scope: !2438)
!2442 = !DILocation(line: 33, column: 22, scope: !2438)
!2443 = !DILocation(line: 34, column: 24, scope: !2444)
!2444 = distinct !DILexicalBlock(scope: !2438, file: !2418, line: 34, column: 11)
!2445 = !DILocation(line: 34, column: 11, scope: !2438)
!2446 = !DILocation(line: 36, column: 29, scope: !2447)
!2447 = distinct !DILexicalBlock(scope: !2444, file: !2418, line: 36, column: 16)
!2448 = !DILocation(line: 36, column: 16, scope: !2444)
!2449 = !DILocation(line: 37, column: 14, scope: !2447)
!2450 = distinct !{!2450, !2434, !2451}
!2451 = !DILocation(line: 40, column: 5, scope: !2417)
!2452 = !DILocation(line: 43, column: 1, scope: !2417)
!2453 = distinct !DISubprogram(name: "atof", scope: !2454, file: !2454, line: 25, type: !2455, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2458)
!2454 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h", directory: "")
!2455 = !DISubroutineType(types: !2456)
!2456 = !{!2457, !685}
!2457 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2458 = !{!2459}
!2459 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2453, file: !2454, line: 25, type: !685)
!2460 = !DILocation(line: 0, scope: !2453)
!2461 = !DILocation(line: 27, column: 10, scope: !2453)
!2462 = !DILocation(line: 27, column: 3, scope: !2453)
!2463 = distinct !DISubprogram(name: "strtoimax", scope: !2464, file: !2464, line: 324, type: !2465, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2471)
!2464 = !DIFile(filename: "/usr/include/inttypes.h", directory: "")
!2465 = !DISubroutineType(types: !2466)
!2466 = !{!2467, !2224, !2470, !680}
!2467 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !2468, line: 101, baseType: !2469)
!2468 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!2469 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !2276, line: 72, baseType: !749)
!2470 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !681)
!2471 = !{!2472, !2473, !2474}
!2472 = !DILocalVariable(name: "nptr", arg: 1, scope: !2463, file: !2464, line: 324, type: !2224)
!2473 = !DILocalVariable(name: "endptr", arg: 2, scope: !2463, file: !2464, line: 324, type: !2470)
!2474 = !DILocalVariable(name: "base", arg: 3, scope: !2463, file: !2464, line: 324, type: !680)
!2475 = !DILocation(line: 0, scope: !2463)
!2476 = !DILocation(line: 327, column: 10, scope: !2463)
!2477 = !DILocation(line: 327, column: 3, scope: !2463)
!2478 = distinct !DISubprogram(name: "strtoumax", scope: !2464, file: !2464, line: 336, type: !2479, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2483)
!2479 = !DISubroutineType(types: !2480)
!2480 = !{!2481, !2224, !2470, !680}
!2481 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !2468, line: 102, baseType: !2482)
!2482 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !2276, line: 73, baseType: !747)
!2483 = !{!2484, !2485, !2486}
!2484 = !DILocalVariable(name: "nptr", arg: 1, scope: !2478, file: !2464, line: 336, type: !2224)
!2485 = !DILocalVariable(name: "endptr", arg: 2, scope: !2478, file: !2464, line: 336, type: !2470)
!2486 = !DILocalVariable(name: "base", arg: 3, scope: !2478, file: !2464, line: 336, type: !680)
!2487 = !DILocation(line: 0, scope: !2478)
!2488 = !DILocation(line: 339, column: 10, scope: !2478)
!2489 = !DILocation(line: 339, column: 3, scope: !2478)
!2490 = distinct !DISubprogram(name: "wcstoimax", scope: !2464, file: !2464, line: 348, type: !2491, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2500)
!2491 = !DISubroutineType(types: !2492)
!2492 = !{!2467, !2493, !2497, !680}
!2493 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !2494)
!2494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2495, size: 64)
!2495 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2496)
!2496 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gwchar_t", file: !2464, line: 34, baseType: !680)
!2497 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !2498)
!2498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2499, size: 64)
!2499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2496, size: 64)
!2500 = !{!2501, !2502, !2503}
!2501 = !DILocalVariable(name: "nptr", arg: 1, scope: !2490, file: !2464, line: 348, type: !2493)
!2502 = !DILocalVariable(name: "endptr", arg: 2, scope: !2490, file: !2464, line: 348, type: !2497)
!2503 = !DILocalVariable(name: "base", arg: 3, scope: !2490, file: !2464, line: 348, type: !680)
!2504 = !DILocation(line: 0, scope: !2490)
!2505 = !DILocation(line: 351, column: 10, scope: !2490)
!2506 = !DILocation(line: 351, column: 3, scope: !2490)
!2507 = distinct !DISubprogram(name: "wcstoumax", scope: !2464, file: !2464, line: 362, type: !2508, scopeLine: 364, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2510)
!2508 = !DISubroutineType(types: !2509)
!2509 = !{!2481, !2493, !2497, !680}
!2510 = !{!2511, !2512, !2513}
!2511 = !DILocalVariable(name: "nptr", arg: 1, scope: !2507, file: !2464, line: 362, type: !2493)
!2512 = !DILocalVariable(name: "endptr", arg: 2, scope: !2507, file: !2464, line: 362, type: !2497)
!2513 = !DILocalVariable(name: "base", arg: 3, scope: !2507, file: !2464, line: 362, type: !680)
!2514 = !DILocation(line: 0, scope: !2507)
!2515 = !DILocation(line: 365, column: 10, scope: !2507)
!2516 = !DILocation(line: 365, column: 3, scope: !2507)
!2517 = distinct !DISubprogram(name: "stat", scope: !2518, file: !2518, line: 453, type: !2519, scopeLine: 454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2556)
!2518 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/stat.h", directory: "")
!2519 = !DISubroutineType(types: !2520)
!2520 = !{!680, !685, !2521}
!2521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2522, size: 64)
!2522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !2523, line: 46, size: 1152, elements: !2524)
!2523 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!2524 = !{!2525, !2527, !2529, !2531, !2533, !2535, !2537, !2538, !2539, !2540, !2542, !2544, !2552, !2553, !2554}
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2522, file: !2523, line: 48, baseType: !2526, size: 64)
!2526 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !2276, line: 145, baseType: !747)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2522, file: !2523, line: 53, baseType: !2528, size: 64, offset: 64)
!2528 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !2276, line: 148, baseType: !747)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2522, file: !2523, line: 61, baseType: !2530, size: 64, offset: 128)
!2530 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !2276, line: 151, baseType: !747)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2522, file: !2523, line: 62, baseType: !2532, size: 32, offset: 192)
!2532 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !2276, line: 150, baseType: !7)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2522, file: !2523, line: 64, baseType: !2534, size: 32, offset: 224)
!2534 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !2276, line: 146, baseType: !7)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2522, file: !2523, line: 65, baseType: !2536, size: 32, offset: 256)
!2536 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !2276, line: 147, baseType: !7)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2522, file: !2523, line: 67, baseType: !680, size: 32, offset: 288)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2522, file: !2523, line: 69, baseType: !2526, size: 64, offset: 320)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2522, file: !2523, line: 74, baseType: !2275, size: 64, offset: 384)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2522, file: !2523, line: 78, baseType: !2541, size: 64, offset: 448)
!2541 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !2276, line: 174, baseType: !749)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2522, file: !2523, line: 80, baseType: !2543, size: 64, offset: 512)
!2543 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !2276, line: 179, baseType: !749)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2522, file: !2523, line: 91, baseType: !2545, size: 128, offset: 576)
!2545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !2546, line: 10, size: 128, elements: !2547)
!2546 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!2547 = !{!2548, !2550}
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2545, file: !2546, line: 12, baseType: !2549, size: 64)
!2549 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !2276, line: 160, baseType: !749)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2545, file: !2546, line: 16, baseType: !2551, size: 64, offset: 64)
!2551 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !2276, line: 196, baseType: !749)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2522, file: !2523, line: 92, baseType: !2545, size: 128, offset: 704)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2522, file: !2523, line: 93, baseType: !2545, size: 128, offset: 832)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2522, file: !2523, line: 106, baseType: !2555, size: 192, offset: 960)
!2555 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2551, size: 192, elements: !767)
!2556 = !{!2557, !2558}
!2557 = !DILocalVariable(name: "__path", arg: 1, scope: !2517, file: !2518, line: 453, type: !685)
!2558 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2517, file: !2518, line: 453, type: !2521)
!2559 = !DILocation(line: 0, scope: !2517)
!2560 = !DILocation(line: 455, column: 10, scope: !2517)
!2561 = !DILocation(line: 455, column: 3, scope: !2517)
!2562 = distinct !DISubprogram(name: "lstat", scope: !2518, file: !2518, line: 460, type: !2519, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2563)
!2563 = !{!2564, !2565}
!2564 = !DILocalVariable(name: "__path", arg: 1, scope: !2562, file: !2518, line: 460, type: !685)
!2565 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2562, file: !2518, line: 460, type: !2521)
!2566 = !DILocation(line: 0, scope: !2562)
!2567 = !DILocation(line: 462, column: 10, scope: !2562)
!2568 = !DILocation(line: 462, column: 3, scope: !2562)
!2569 = distinct !DISubprogram(name: "fstat", scope: !2518, file: !2518, line: 467, type: !2570, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2572)
!2570 = !DISubroutineType(types: !2571)
!2571 = !{!680, !680, !2521}
!2572 = !{!2573, !2574}
!2573 = !DILocalVariable(name: "__fd", arg: 1, scope: !2569, file: !2518, line: 467, type: !680)
!2574 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2569, file: !2518, line: 467, type: !2521)
!2575 = !DILocation(line: 0, scope: !2569)
!2576 = !DILocation(line: 469, column: 10, scope: !2569)
!2577 = !DILocation(line: 469, column: 3, scope: !2569)
!2578 = distinct !DISubprogram(name: "fstatat", scope: !2518, file: !2518, line: 474, type: !2579, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2581)
!2579 = !DISubroutineType(types: !2580)
!2580 = !{!680, !680, !685, !2521, !680}
!2581 = !{!2582, !2583, !2584, !2585}
!2582 = !DILocalVariable(name: "__fd", arg: 1, scope: !2578, file: !2518, line: 474, type: !680)
!2583 = !DILocalVariable(name: "__filename", arg: 2, scope: !2578, file: !2518, line: 474, type: !685)
!2584 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2578, file: !2518, line: 474, type: !2521)
!2585 = !DILocalVariable(name: "__flag", arg: 4, scope: !2578, file: !2518, line: 474, type: !680)
!2586 = !DILocation(line: 0, scope: !2578)
!2587 = !DILocation(line: 477, column: 10, scope: !2578)
!2588 = !DILocation(line: 477, column: 3, scope: !2578)
!2589 = distinct !DISubprogram(name: "mknod", scope: !2518, file: !2518, line: 483, type: !2590, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2592)
!2590 = !DISubroutineType(types: !2591)
!2591 = !{!680, !685, !2532, !2526}
!2592 = !{!2593, !2594, !2595}
!2593 = !DILocalVariable(name: "__path", arg: 1, scope: !2589, file: !2518, line: 483, type: !685)
!2594 = !DILocalVariable(name: "__mode", arg: 2, scope: !2589, file: !2518, line: 483, type: !2532)
!2595 = !DILocalVariable(name: "__dev", arg: 3, scope: !2589, file: !2518, line: 483, type: !2526)
!2596 = !DILocation(line: 0, scope: !2589)
!2597 = !DILocation(line: 485, column: 10, scope: !2589)
!2598 = !DILocation(line: 485, column: 3, scope: !2589)
!2599 = distinct !DISubprogram(name: "mknodat", scope: !2518, file: !2518, line: 491, type: !2600, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2602)
!2600 = !DISubroutineType(types: !2601)
!2601 = !{!680, !680, !685, !2532, !2526}
!2602 = !{!2603, !2604, !2605, !2606}
!2603 = !DILocalVariable(name: "__fd", arg: 1, scope: !2599, file: !2518, line: 491, type: !680)
!2604 = !DILocalVariable(name: "__path", arg: 2, scope: !2599, file: !2518, line: 491, type: !685)
!2605 = !DILocalVariable(name: "__mode", arg: 3, scope: !2599, file: !2518, line: 491, type: !2532)
!2606 = !DILocalVariable(name: "__dev", arg: 4, scope: !2599, file: !2518, line: 491, type: !2526)
!2607 = !DILocation(line: 0, scope: !2599)
!2608 = !DILocation(line: 494, column: 10, scope: !2599)
!2609 = !DILocation(line: 494, column: 3, scope: !2599)
!2610 = distinct !DISubprogram(name: "stat64", scope: !2518, file: !2518, line: 502, type: !2611, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2633)
!2611 = !DISubroutineType(types: !2612)
!2612 = !{!680, !685, !2613}
!2613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2614, size: 64)
!2614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !2523, line: 119, size: 1152, elements: !2615)
!2615 = !{!2616, !2617, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2629, !2630, !2631, !2632}
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2614, file: !2523, line: 121, baseType: !2526, size: 64)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2614, file: !2523, line: 123, baseType: !2618, size: 64, offset: 64)
!2618 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino64_t", file: !2276, line: 149, baseType: !747)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2614, file: !2523, line: 124, baseType: !2530, size: 64, offset: 128)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2614, file: !2523, line: 125, baseType: !2532, size: 32, offset: 192)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2614, file: !2523, line: 132, baseType: !2534, size: 32, offset: 224)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2614, file: !2523, line: 133, baseType: !2536, size: 32, offset: 256)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2614, file: !2523, line: 135, baseType: !680, size: 32, offset: 288)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2614, file: !2523, line: 136, baseType: !2526, size: 64, offset: 320)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2614, file: !2523, line: 137, baseType: !2275, size: 64, offset: 384)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2614, file: !2523, line: 143, baseType: !2541, size: 64, offset: 448)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2614, file: !2523, line: 144, baseType: !2628, size: 64, offset: 512)
!2628 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt64_t", file: !2276, line: 180, baseType: !749)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2614, file: !2523, line: 152, baseType: !2545, size: 128, offset: 576)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2614, file: !2523, line: 153, baseType: !2545, size: 128, offset: 704)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2614, file: !2523, line: 154, baseType: !2545, size: 128, offset: 832)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2614, file: !2523, line: 164, baseType: !2555, size: 192, offset: 960)
!2633 = !{!2634, !2635}
!2634 = !DILocalVariable(name: "__path", arg: 1, scope: !2610, file: !2518, line: 502, type: !685)
!2635 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2610, file: !2518, line: 502, type: !2613)
!2636 = !DILocation(line: 0, scope: !2610)
!2637 = !DILocation(line: 504, column: 10, scope: !2610)
!2638 = !DILocation(line: 504, column: 3, scope: !2610)
!2639 = distinct !DISubprogram(name: "lstat64", scope: !2518, file: !2518, line: 509, type: !2611, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2640)
!2640 = !{!2641, !2642}
!2641 = !DILocalVariable(name: "__path", arg: 1, scope: !2639, file: !2518, line: 509, type: !685)
!2642 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2639, file: !2518, line: 509, type: !2613)
!2643 = !DILocation(line: 0, scope: !2639)
!2644 = !DILocation(line: 511, column: 10, scope: !2639)
!2645 = !DILocation(line: 511, column: 3, scope: !2639)
!2646 = distinct !DISubprogram(name: "fstat64", scope: !2518, file: !2518, line: 516, type: !2647, scopeLine: 517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2649)
!2647 = !DISubroutineType(types: !2648)
!2648 = !{!680, !680, !2613}
!2649 = !{!2650, !2651}
!2650 = !DILocalVariable(name: "__fd", arg: 1, scope: !2646, file: !2518, line: 516, type: !680)
!2651 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2646, file: !2518, line: 516, type: !2613)
!2652 = !DILocation(line: 0, scope: !2646)
!2653 = !DILocation(line: 518, column: 10, scope: !2646)
!2654 = !DILocation(line: 518, column: 3, scope: !2646)
!2655 = distinct !DISubprogram(name: "fstatat64", scope: !2518, file: !2518, line: 523, type: !2656, scopeLine: 525, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2658)
!2656 = !DISubroutineType(types: !2657)
!2657 = !{!680, !680, !685, !2613, !680}
!2658 = !{!2659, !2660, !2661, !2662}
!2659 = !DILocalVariable(name: "__fd", arg: 1, scope: !2655, file: !2518, line: 523, type: !680)
!2660 = !DILocalVariable(name: "__filename", arg: 2, scope: !2655, file: !2518, line: 523, type: !685)
!2661 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2655, file: !2518, line: 523, type: !2613)
!2662 = !DILocalVariable(name: "__flag", arg: 4, scope: !2655, file: !2518, line: 523, type: !680)
!2663 = !DILocation(line: 0, scope: !2655)
!2664 = !DILocation(line: 526, column: 10, scope: !2655)
!2665 = !DILocation(line: 526, column: 3, scope: !2655)
!2666 = distinct !DISubprogram(name: "ssa_name_nonnegative_p", scope: !3, file: !3, line: 1354, type: !2667, scopeLine: 1355, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2669)
!2667 = !DISubroutineType(types: !2668)
!2668 = !{!679, !2080}
!2669 = !{!2670, !2671, !2672}
!2670 = !DILocalVariable(name: "t", arg: 1, scope: !2666, file: !3, line: 1354, type: !2080)
!2671 = !DILocalVariable(name: "vr", scope: !2666, file: !3, line: 1356, type: !687)
!2672 = !DILocalVariable(name: "result", scope: !2673, file: !3, line: 1365, type: !680)
!2673 = distinct !DILexicalBlock(scope: !2674, file: !3, line: 1364, column: 5)
!2674 = distinct !DILexicalBlock(scope: !2666, file: !3, line: 1363, column: 7)
!2675 = !DILocation(line: 0, scope: !2666)
!2676 = !DILocation(line: 1356, column: 23, scope: !2666)
!2677 = !DILocation(line: 1358, column: 8, scope: !2678)
!2678 = distinct !DILexicalBlock(scope: !2666, file: !3, line: 1358, column: 7)
!2679 = !DILocation(line: 1358, column: 7, scope: !2666)
!2680 = !DILocation(line: 1363, column: 11, scope: !2674)
!2681 = !DILocation(line: 1363, column: 16, scope: !2674)
!2682 = !DILocation(line: 1363, column: 7, scope: !2666)
!2683 = !DILocation(line: 1365, column: 40, scope: !2673)
!2684 = !DILocation(line: 1365, column: 45, scope: !2673)
!2685 = !DILocation(line: 1365, column: 20, scope: !2673)
!2686 = !DILocation(line: 0, scope: !2673)
!2687 = !DILocation(line: 1367, column: 27, scope: !2673)
!2688 = !DILocation(line: 1367, column: 14, scope: !2673)
!2689 = !DILocation(line: 1370, column: 1, scope: !2666)
!2690 = distinct !DISubprogram(name: "get_value_range", scope: !3, file: !3, line: 633, type: !2691, scopeLine: 634, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2693)
!2691 = !DISubroutineType(types: !2692)
!2692 = !{!687, !2080}
!2693 = !{!2694, !2695, !2696, !2697}
!2694 = !DILocalVariable(name: "var", arg: 1, scope: !2690, file: !3, line: 633, type: !2080)
!2695 = !DILocalVariable(name: "vr", scope: !2690, file: !3, line: 635, type: !687)
!2696 = !DILocalVariable(name: "sym", scope: !2690, file: !3, line: 636, type: !693)
!2697 = !DILocalVariable(name: "ver", scope: !2690, file: !3, line: 637, type: !7)
!2698 = !DILocation(line: 0, scope: !2690)
!2699 = !DILocation(line: 640, column: 9, scope: !2700)
!2700 = distinct !DILexicalBlock(scope: !2690, file: !3, line: 640, column: 7)
!2701 = !DILocation(line: 640, column: 7, scope: !2690)
!2702 = !DILocation(line: 637, column: 18, scope: !2690)
!2703 = !DILocation(line: 643, column: 8, scope: !2690)
!2704 = !DILocation(line: 644, column: 7, scope: !2705)
!2705 = distinct !DILexicalBlock(scope: !2690, file: !3, line: 644, column: 7)
!2706 = !DILocation(line: 644, column: 7, scope: !2690)
!2707 = !DILocation(line: 648, column: 24, scope: !2690)
!2708 = !DILocation(line: 648, column: 3, scope: !2690)
!2709 = !DILocation(line: 648, column: 17, scope: !2690)
!2710 = !DILocation(line: 651, column: 7, scope: !2690)
!2711 = !DILocation(line: 651, column: 13, scope: !2690)
!2712 = !DILocation(line: 655, column: 9, scope: !2690)
!2713 = !DILocation(line: 656, column: 7, scope: !2714)
!2714 = distinct !DILexicalBlock(scope: !2690, file: !3, line: 656, column: 7)
!2715 = !DILocation(line: 656, column: 7, scope: !2690)
!2716 = !DILocation(line: 661, column: 11, scope: !2717)
!2717 = distinct !DILexicalBlock(scope: !2718, file: !3, line: 661, column: 11)
!2718 = distinct !DILexicalBlock(scope: !2714, file: !3, line: 657, column: 5)
!2719 = !DILocation(line: 661, column: 27, scope: !2717)
!2720 = !DILocation(line: 662, column: 4, scope: !2717)
!2721 = !DILocation(line: 662, column: 7, scope: !2717)
!2722 = !DILocation(line: 663, column: 4, scope: !2717)
!2723 = !DILocation(line: 663, column: 7, scope: !2717)
!2724 = !DILocation(line: 661, column: 11, scope: !2718)
!2725 = !DILocation(line: 664, column: 34, scope: !2717)
!2726 = !DILocation(line: 664, column: 2, scope: !2717)
!2727 = !DILocation(line: 666, column: 2, scope: !2717)
!2728 = !DILocation(line: 670, column: 1, scope: !2690)
!2729 = distinct !DISubprogram(name: "compare_values", scope: !3, file: !3, line: 1254, type: !2730, scopeLine: 1255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2732)
!2730 = !DISubroutineType(types: !2731)
!2731 = !{!680, !693, !693}
!2732 = !{!2733, !2734, !2735, !2736}
!2733 = !DILocalVariable(name: "val1", arg: 1, scope: !2729, file: !3, line: 1254, type: !693)
!2734 = !DILocalVariable(name: "val2", arg: 2, scope: !2729, file: !3, line: 1254, type: !693)
!2735 = !DILocalVariable(name: "sop", scope: !2729, file: !3, line: 1256, type: !679)
!2736 = !DILocalVariable(name: "ret", scope: !2729, file: !3, line: 1257, type: !680)
!2737 = !DILocation(line: 0, scope: !2729)
!2738 = !DILocation(line: 1256, column: 3, scope: !2729)
!2739 = !DILocation(line: 1259, column: 7, scope: !2729)
!2740 = !DILocation(line: 1260, column: 9, scope: !2729)
!2741 = !DILocation(line: 1261, column: 7, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2729, file: !3, line: 1261, column: 7)
!2743 = !DILocation(line: 1262, column: 7, scope: !2742)
!2744 = !DILocation(line: 1262, column: 12, scope: !2742)
!2745 = !DILocation(line: 1262, column: 43, scope: !2742)
!2746 = !DILocation(line: 1262, column: 47, scope: !2742)
!2747 = !DILocation(line: 1261, column: 7, scope: !2729)
!2748 = !DILocation(line: 1263, column: 5, scope: !2742)
!2749 = !DILocation(line: 1265, column: 1, scope: !2729)
!2750 = !DILocation(line: 1264, column: 3, scope: !2729)
!2751 = distinct !DISubprogram(name: "dump_value_range", scope: !3, file: !3, line: 3640, type: !2752, scopeLine: 3641, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2754)
!2752 = !DISubroutineType(types: !2753)
!2753 = !{null, !2249, !687}
!2754 = !{!2755, !2756, !2757, !2762, !2765, !2766}
!2755 = !DILocalVariable(name: "file", arg: 1, scope: !2751, file: !3, line: 3640, type: !2249)
!2756 = !DILocalVariable(name: "vr", arg: 2, scope: !2751, file: !3, line: 3640, type: !687)
!2757 = !DILocalVariable(name: "type", scope: !2758, file: !3, line: 3648, type: !693)
!2758 = distinct !DILexicalBlock(scope: !2759, file: !3, line: 3647, column: 5)
!2759 = distinct !DILexicalBlock(scope: !2760, file: !3, line: 3646, column: 12)
!2760 = distinct !DILexicalBlock(scope: !2761, file: !3, line: 3644, column: 12)
!2761 = distinct !DILexicalBlock(scope: !2751, file: !3, line: 3642, column: 7)
!2762 = !DILocalVariable(name: "bi", scope: !2763, file: !3, line: 3675, type: !2190)
!2763 = distinct !DILexicalBlock(scope: !2764, file: !3, line: 3674, column: 2)
!2764 = distinct !DILexicalBlock(scope: !2758, file: !3, line: 3673, column: 11)
!2765 = !DILocalVariable(name: "i", scope: !2763, file: !3, line: 3676, type: !7)
!2766 = !DILocalVariable(name: "c", scope: !2763, file: !3, line: 3676, type: !7)
!2767 = !DILocation(line: 0, scope: !2751)
!2768 = !DILocation(line: 3642, column: 10, scope: !2761)
!2769 = !DILocation(line: 3642, column: 7, scope: !2751)
!2770 = !DILocation(line: 3643, column: 5, scope: !2761)
!2771 = !DILocation(line: 3644, column: 16, scope: !2760)
!2772 = !DILocation(line: 3644, column: 21, scope: !2760)
!2773 = !DILocation(line: 3644, column: 12, scope: !2761)
!2774 = !DILocation(line: 3645, column: 5, scope: !2760)
!2775 = !DILocation(line: 3646, column: 21, scope: !2759)
!2776 = !DILocation(line: 3646, column: 33, scope: !2759)
!2777 = !DILocation(line: 3646, column: 45, scope: !2759)
!2778 = !DILocation(line: 3646, column: 12, scope: !2760)
!2779 = !DILocation(line: 3648, column: 19, scope: !2758)
!2780 = !DILocation(line: 0, scope: !2758)
!2781 = !DILocation(line: 3650, column: 39, scope: !2758)
!2782 = !DILocation(line: 3650, column: 29, scope: !2758)
!2783 = !DILocation(line: 3650, column: 7, scope: !2758)
!2784 = !DILocation(line: 3652, column: 46, scope: !2785)
!2785 = distinct !DILexicalBlock(scope: !2758, file: !3, line: 3652, column: 11)
!2786 = !DILocation(line: 3652, column: 11, scope: !2785)
!2787 = !DILocation(line: 3652, column: 11, scope: !2758)
!2788 = !DILocation(line: 3653, column: 2, scope: !2785)
!2789 = !DILocation(line: 3654, column: 16, scope: !2790)
!2790 = distinct !DILexicalBlock(scope: !2785, file: !3, line: 3654, column: 16)
!2791 = !DILocation(line: 3655, column: 9, scope: !2790)
!2792 = !DILocation(line: 3655, column: 13, scope: !2790)
!2793 = !DILocation(line: 3656, column: 9, scope: !2790)
!2794 = !DILocation(line: 3656, column: 32, scope: !2790)
!2795 = !DILocation(line: 3656, column: 12, scope: !2790)
!2796 = !DILocation(line: 3654, column: 16, scope: !2785)
!2797 = !DILocation(line: 3657, column: 2, scope: !2790)
!2798 = !DILocation(line: 3659, column: 32, scope: !2790)
!2799 = !DILocation(line: 3659, column: 2, scope: !2790)
!2800 = !DILocation(line: 3661, column: 7, scope: !2758)
!2801 = !DILocation(line: 3663, column: 46, scope: !2802)
!2802 = distinct !DILexicalBlock(scope: !2758, file: !3, line: 3663, column: 11)
!2803 = !DILocation(line: 3663, column: 11, scope: !2802)
!2804 = !DILocation(line: 3663, column: 11, scope: !2758)
!2805 = !DILocation(line: 3664, column: 2, scope: !2802)
!2806 = !DILocation(line: 3665, column: 16, scope: !2807)
!2807 = distinct !DILexicalBlock(scope: !2802, file: !3, line: 3665, column: 16)
!2808 = !DILocation(line: 3666, column: 9, scope: !2807)
!2809 = !DILocation(line: 3666, column: 32, scope: !2807)
!2810 = !DILocation(line: 3666, column: 12, scope: !2807)
!2811 = !DILocation(line: 3665, column: 16, scope: !2802)
!2812 = !DILocation(line: 3667, column: 2, scope: !2807)
!2813 = !DILocation(line: 3669, column: 32, scope: !2807)
!2814 = !DILocation(line: 3669, column: 2, scope: !2807)
!2815 = !DILocation(line: 3671, column: 7, scope: !2758)
!2816 = !DILocation(line: 3673, column: 15, scope: !2764)
!2817 = !DILocation(line: 3673, column: 11, scope: !2764)
!2818 = !DILocation(line: 3673, column: 11, scope: !2758)
!2819 = !DILocation(line: 3675, column: 4, scope: !2763)
!2820 = !DILocation(line: 3676, column: 4, scope: !2763)
!2821 = !DILocation(line: 0, scope: !2763)
!2822 = !DILocation(line: 3678, column: 4, scope: !2763)
!2823 = !DILocation(line: 3680, column: 4, scope: !2824)
!2824 = distinct !DILexicalBlock(scope: !2763, file: !3, line: 3680, column: 4)
!2825 = !DILocation(line: 3680, column: 4, scope: !2826)
!2826 = distinct !DILexicalBlock(scope: !2824, file: !3, line: 3680, column: 4)
!2827 = !DILocation(line: 3682, column: 34, scope: !2828)
!2828 = distinct !DILexicalBlock(scope: !2826, file: !3, line: 3681, column: 6)
!2829 = !DILocation(line: 3682, column: 8, scope: !2828)
!2830 = !DILocation(line: 3683, column: 8, scope: !2828)
!2831 = !DILocation(line: 3684, column: 9, scope: !2828)
!2832 = distinct !{!2832, !2823, !2833}
!2833 = !DILocation(line: 3685, column: 6, scope: !2824)
!2834 = !DILocation(line: 3687, column: 4, scope: !2763)
!2835 = !DILocation(line: 3688, column: 2, scope: !2764)
!2836 = !DILocation(line: 3688, column: 2, scope: !2763)
!2837 = !DILocation(line: 3690, column: 21, scope: !2838)
!2838 = distinct !DILexicalBlock(scope: !2759, file: !3, line: 3690, column: 12)
!2839 = !DILocation(line: 3690, column: 12, scope: !2759)
!2840 = !DILocation(line: 3691, column: 5, scope: !2838)
!2841 = !DILocation(line: 3693, column: 5, scope: !2838)
!2842 = !DILocation(line: 3694, column: 1, scope: !2751)
!2843 = distinct !DISubprogram(name: "is_negative_overflow_infinity", scope: !3, file: !3, line: 245, type: !2667, scopeLine: 246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2844)
!2844 = !{!2845}
!2845 = !DILocalVariable(name: "val", arg: 1, scope: !2843, file: !3, line: 245, type: !2080)
!2846 = !DILocation(line: 0, scope: !2843)
!2847 = !DILocation(line: 247, column: 36, scope: !2843)
!2848 = !DILocation(line: 247, column: 11, scope: !2843)
!2849 = !DILocation(line: 248, column: 4, scope: !2843)
!2850 = !DILocation(line: 248, column: 7, scope: !2843)
!2851 = !DILocation(line: 249, column: 4, scope: !2843)
!2852 = !DILocation(line: 249, column: 7, scope: !2843)
!2853 = !DILocation(line: 250, column: 4, scope: !2843)
!2854 = !DILocation(line: 250, column: 7, scope: !2843)
!2855 = !DILocation(line: 247, column: 3, scope: !2843)
!2856 = distinct !DISubprogram(name: "vrp_val_is_min", scope: !3, file: !3, line: 166, type: !2667, scopeLine: 167, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2857)
!2857 = !{!2858, !2859}
!2858 = !DILocalVariable(name: "val", arg: 1, scope: !2856, file: !3, line: 166, type: !2080)
!2859 = !DILocalVariable(name: "type_min", scope: !2856, file: !3, line: 168, type: !693)
!2860 = !DILocation(line: 0, scope: !2856)
!2861 = !DILocation(line: 168, column: 32, scope: !2856)
!2862 = !DILocation(line: 168, column: 19, scope: !2856)
!2863 = !DILocation(line: 169, column: 15, scope: !2856)
!2864 = !DILocation(line: 170, column: 4, scope: !2856)
!2865 = !DILocation(line: 170, column: 17, scope: !2856)
!2866 = !DILocation(line: 171, column: 8, scope: !2856)
!2867 = !DILocation(line: 171, column: 11, scope: !2856)
!2868 = !DILocation(line: 169, column: 3, scope: !2856)
!2869 = distinct !DISubprogram(name: "is_positive_overflow_infinity", scope: !3, file: !3, line: 256, type: !2667, scopeLine: 257, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2870)
!2870 = !{!2871}
!2871 = !DILocalVariable(name: "val", arg: 1, scope: !2869, file: !3, line: 256, type: !2080)
!2872 = !DILocation(line: 0, scope: !2869)
!2873 = !DILocation(line: 258, column: 36, scope: !2869)
!2874 = !DILocation(line: 258, column: 11, scope: !2869)
!2875 = !DILocation(line: 259, column: 4, scope: !2869)
!2876 = !DILocation(line: 259, column: 7, scope: !2869)
!2877 = !DILocation(line: 260, column: 4, scope: !2869)
!2878 = !DILocation(line: 260, column: 7, scope: !2869)
!2879 = !DILocation(line: 261, column: 4, scope: !2869)
!2880 = !DILocation(line: 261, column: 7, scope: !2869)
!2881 = !DILocation(line: 258, column: 3, scope: !2869)
!2882 = distinct !DISubprogram(name: "vrp_val_is_max", scope: !3, file: !3, line: 154, type: !2667, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2883)
!2883 = !{!2884, !2885}
!2884 = !DILocalVariable(name: "val", arg: 1, scope: !2882, file: !3, line: 154, type: !2080)
!2885 = !DILocalVariable(name: "type_max", scope: !2882, file: !3, line: 156, type: !693)
!2886 = !DILocation(line: 0, scope: !2882)
!2887 = !DILocation(line: 156, column: 32, scope: !2882)
!2888 = !DILocation(line: 156, column: 19, scope: !2882)
!2889 = !DILocation(line: 157, column: 15, scope: !2882)
!2890 = !DILocation(line: 158, column: 4, scope: !2882)
!2891 = !DILocation(line: 158, column: 17, scope: !2882)
!2892 = !DILocation(line: 159, column: 8, scope: !2882)
!2893 = !DILocation(line: 159, column: 11, scope: !2882)
!2894 = !DILocation(line: 157, column: 3, scope: !2882)
!2895 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !922, file: !922, line: 224, type: !2896, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2903)
!2896 = !DISubroutineType(types: !2897)
!2897 = !{null, !2898, !2899, !7, !2902}
!2898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2190, size: 64)
!2899 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !694, line: 48, baseType: !2900)
!2900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2901, size: 64)
!2901 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !921)
!2902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!2903 = !{!2904, !2905, !2906, !2907}
!2904 = !DILocalVariable(name: "bi", arg: 1, scope: !2895, file: !922, line: 224, type: !2898)
!2905 = !DILocalVariable(name: "map", arg: 2, scope: !2895, file: !922, line: 224, type: !2899)
!2906 = !DILocalVariable(name: "start_bit", arg: 3, scope: !2895, file: !922, line: 225, type: !7)
!2907 = !DILocalVariable(name: "bit_no", arg: 4, scope: !2895, file: !922, line: 225, type: !2902)
!2908 = !DILocation(line: 0, scope: !2895)
!2909 = !DILocation(line: 227, column: 19, scope: !2895)
!2910 = !DILocation(line: 227, column: 12, scope: !2895)
!2911 = !DILocation(line: 228, column: 7, scope: !2895)
!2912 = !DILocation(line: 228, column: 12, scope: !2895)
!2913 = !DILocation(line: 0, scope: !2914)
!2914 = distinct !DILexicalBlock(scope: !2915, file: !922, line: 233, column: 11)
!2915 = distinct !DILexicalBlock(scope: !2895, file: !922, line: 232, column: 5)
!2916 = !DILocation(line: 231, column: 3, scope: !2895)
!2917 = !DILocation(line: 233, column: 12, scope: !2914)
!2918 = !DILocation(line: 233, column: 11, scope: !2915)
!2919 = !DILocation(line: 235, column: 13, scope: !2920)
!2920 = distinct !DILexicalBlock(scope: !2914, file: !922, line: 234, column: 2)
!2921 = !DILocation(line: 236, column: 4, scope: !2920)
!2922 = !DILocation(line: 239, column: 11, scope: !2915)
!2923 = distinct !{!2923, !2916, !2924}
!2924 = !DILocation(line: 242, column: 5, scope: !2895)
!2925 = !DILocation(line: 245, column: 11, scope: !2926)
!2926 = distinct !DILexicalBlock(scope: !2895, file: !922, line: 245, column: 7)
!2927 = !DILocation(line: 245, column: 17, scope: !2926)
!2928 = !DILocation(line: 245, column: 22, scope: !2926)
!2929 = !DILocation(line: 245, column: 7, scope: !2895)
!2930 = !DILocation(line: 246, column: 27, scope: !2926)
!2931 = !DILocation(line: 246, column: 32, scope: !2926)
!2932 = !DILocation(line: 246, column: 5, scope: !2926)
!2933 = !DILocation(line: 249, column: 7, scope: !2895)
!2934 = !DILocation(line: 249, column: 15, scope: !2895)
!2935 = !DILocation(line: 250, column: 14, scope: !2895)
!2936 = !DILocation(line: 251, column: 7, scope: !2895)
!2937 = !DILocation(line: 251, column: 12, scope: !2895)
!2938 = !DILocation(line: 257, column: 16, scope: !2895)
!2939 = !DILocation(line: 257, column: 13, scope: !2895)
!2940 = !DILocation(line: 259, column: 11, scope: !2895)
!2941 = !DILocation(line: 260, column: 1, scope: !2895)
!2942 = distinct !DISubprogram(name: "bmp_iter_set", scope: !922, file: !922, line: 393, type: !2943, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2945)
!2943 = !DISubroutineType(types: !2944)
!2944 = !{!679, !2898, !2902}
!2945 = !{!2946, !2947, !2948}
!2946 = !DILocalVariable(name: "bi", arg: 1, scope: !2942, file: !922, line: 393, type: !2898)
!2947 = !DILocalVariable(name: "bit_no", arg: 2, scope: !2942, file: !922, line: 393, type: !2902)
!2948 = !DILabel(scope: !2949, name: "next_bit", file: !922, line: 398)
!2949 = distinct !DILexicalBlock(scope: !2950, file: !922, line: 397, column: 5)
!2950 = distinct !DILexicalBlock(scope: !2942, file: !922, line: 396, column: 7)
!2951 = !DILocation(line: 0, scope: !2942)
!2952 = !DILocation(line: 396, column: 11, scope: !2950)
!2953 = !DILocation(line: 396, column: 7, scope: !2950)
!2954 = !DILocation(line: 396, column: 7, scope: !2942)
!2955 = !DILocation(line: 419, column: 15, scope: !2956)
!2956 = distinct !DILexicalBlock(scope: !2957, file: !922, line: 418, column: 2)
!2957 = distinct !DILexicalBlock(scope: !2942, file: !922, line: 415, column: 5)
!2958 = !DILocation(line: 399, column: 7, scope: !2949)
!2959 = !DILocation(line: 398, column: 5, scope: !2949)
!2960 = !DILocation(line: 399, column: 20, scope: !2949)
!2961 = !DILocation(line: 399, column: 25, scope: !2949)
!2962 = !DILocation(line: 399, column: 14, scope: !2949)
!2963 = !DILocation(line: 401, column: 13, scope: !2964)
!2964 = distinct !DILexicalBlock(scope: !2949, file: !922, line: 400, column: 2)
!2965 = !DILocation(line: 402, column: 12, scope: !2964)
!2966 = distinct !{!2966, !2958, !2967}
!2967 = !DILocation(line: 403, column: 2, scope: !2949)
!2968 = !DILocation(line: 410, column: 15, scope: !2942)
!2969 = !DILocation(line: 410, column: 42, scope: !2942)
!2970 = !DILocation(line: 411, column: 26, scope: !2942)
!2971 = !DILocation(line: 410, column: 11, scope: !2942)
!2972 = !DILocation(line: 412, column: 7, scope: !2942)
!2973 = !DILocation(line: 412, column: 14, scope: !2942)
!2974 = !DILocation(line: 0, scope: !2957)
!2975 = !DILocation(line: 414, column: 3, scope: !2942)
!2976 = !DILocation(line: 417, column: 7, scope: !2957)
!2977 = !DILocation(line: 417, column: 18, scope: !2957)
!2978 = !DILocation(line: 417, column: 26, scope: !2957)
!2979 = !DILocation(line: 419, column: 13, scope: !2956)
!2980 = !DILocation(line: 420, column: 8, scope: !2981)
!2981 = distinct !DILexicalBlock(scope: !2956, file: !922, line: 420, column: 8)
!2982 = !DILocation(line: 420, column: 8, scope: !2956)
!2983 = !DILocation(line: 422, column: 12, scope: !2956)
!2984 = !DILocation(line: 423, column: 15, scope: !2956)
!2985 = distinct !{!2985, !2976, !2986}
!2986 = !DILocation(line: 424, column: 2, scope: !2957)
!2987 = !DILocation(line: 427, column: 28, scope: !2957)
!2988 = !DILocation(line: 427, column: 16, scope: !2957)
!2989 = !DILocation(line: 428, column: 12, scope: !2990)
!2990 = distinct !DILexicalBlock(scope: !2957, file: !922, line: 428, column: 11)
!2991 = !DILocation(line: 428, column: 11, scope: !2957)
!2992 = !DILocation(line: 430, column: 27, scope: !2957)
!2993 = !DILocation(line: 430, column: 32, scope: !2957)
!2994 = !DILocation(line: 430, column: 15, scope: !2957)
!2995 = !DILocation(line: 431, column: 19, scope: !2957)
!2996 = distinct !{!2996, !2975, !2997}
!2997 = !DILocation(line: 432, column: 5, scope: !2942)
!2998 = !DILocation(line: 433, column: 1, scope: !2942)
!2999 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !135, file: !135, line: 182, type: !3000, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3004)
!3000 = !DISubroutineType(types: !3001)
!3001 = !{!693, !3002, !7}
!3002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3003, size: 64)
!3003 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1568)
!3004 = !{!3005, !3006}
!3005 = !DILocalVariable(name: "vec_", arg: 1, scope: !2999, file: !135, line: 182, type: !3002)
!3006 = !DILocalVariable(name: "ix_", arg: 2, scope: !2999, file: !135, line: 182, type: !7)
!3007 = !DILocation(line: 0, scope: !2999)
!3008 = !DILocation(line: 182, column: 1, scope: !2999)
!3009 = distinct !DISubprogram(name: "bmp_iter_next", scope: !922, file: !922, line: 382, type: !3010, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3012)
!3010 = !DISubroutineType(types: !3011)
!3011 = !{null, !2898, !2902}
!3012 = !{!3013, !3014}
!3013 = !DILocalVariable(name: "bi", arg: 1, scope: !3009, file: !922, line: 382, type: !2898)
!3014 = !DILocalVariable(name: "bit_no", arg: 2, scope: !3009, file: !922, line: 382, type: !2902)
!3015 = !DILocation(line: 0, scope: !3009)
!3016 = !DILocation(line: 384, column: 7, scope: !3009)
!3017 = !DILocation(line: 384, column: 12, scope: !3009)
!3018 = !DILocation(line: 385, column: 11, scope: !3009)
!3019 = !DILocation(line: 386, column: 1, scope: !3009)
!3020 = distinct !DISubprogram(name: "debug_value_range", scope: !3, file: !3, line: 3700, type: !3021, scopeLine: 3701, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3023)
!3021 = !DISubroutineType(types: !3022)
!3022 = !{null, !687}
!3023 = !{!3024}
!3024 = !DILocalVariable(name: "vr", arg: 1, scope: !3020, file: !3, line: 3700, type: !687)
!3025 = !DILocation(line: 0, scope: !3020)
!3026 = !DILocation(line: 3702, column: 21, scope: !3020)
!3027 = !DILocation(line: 3702, column: 3, scope: !3020)
!3028 = !DILocation(line: 3703, column: 12, scope: !3020)
!3029 = !DILocation(line: 3703, column: 3, scope: !3020)
!3030 = !DILocation(line: 3704, column: 1, scope: !3020)
!3031 = distinct !DISubprogram(name: "dump_all_value_ranges", scope: !3, file: !3, line: 3710, type: !3032, scopeLine: 3711, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3034)
!3032 = !DISubroutineType(types: !3033)
!3033 = !{null, !2249}
!3034 = !{!3035, !3036}
!3035 = !DILocalVariable(name: "file", arg: 1, scope: !3031, file: !3, line: 3710, type: !2249)
!3036 = !DILocalVariable(name: "i", scope: !3031, file: !3, line: 3712, type: !1162)
!3037 = !DILocation(line: 0, scope: !3031)
!3038 = !DILocation(line: 3714, column: 8, scope: !3039)
!3039 = distinct !DILexicalBlock(scope: !3031, file: !3, line: 3714, column: 3)
!3040 = !DILocation(line: 0, scope: !3039)
!3041 = !DILocation(line: 3714, column: 19, scope: !3042)
!3042 = distinct !DILexicalBlock(scope: !3039, file: !3, line: 3714, column: 3)
!3043 = !DILocation(line: 3714, column: 17, scope: !3042)
!3044 = !DILocation(line: 3714, column: 3, scope: !3039)
!3045 = !DILocation(line: 3716, column: 11, scope: !3046)
!3046 = distinct !DILexicalBlock(scope: !3047, file: !3, line: 3716, column: 11)
!3047 = distinct !DILexicalBlock(scope: !3042, file: !3, line: 3715, column: 5)
!3048 = !DILocation(line: 3716, column: 11, scope: !3047)
!3049 = !DILocation(line: 3718, column: 30, scope: !3050)
!3050 = distinct !DILexicalBlock(scope: !3046, file: !3, line: 3717, column: 2)
!3051 = !DILocation(line: 3718, column: 4, scope: !3050)
!3052 = !DILocation(line: 3719, column: 4, scope: !3050)
!3053 = !DILocation(line: 3720, column: 28, scope: !3050)
!3054 = !DILocation(line: 3720, column: 4, scope: !3050)
!3055 = !DILocation(line: 3721, column: 4, scope: !3050)
!3056 = !DILocation(line: 3722, column: 2, scope: !3050)
!3057 = !DILocation(line: 3714, column: 35, scope: !3042)
!3058 = !DILocation(line: 3714, column: 3, scope: !3042)
!3059 = distinct !{!3059, !3044, !3060}
!3060 = !DILocation(line: 3723, column: 5, scope: !3039)
!3061 = !DILocation(line: 3725, column: 3, scope: !3031)
!3062 = !DILocation(line: 3726, column: 1, scope: !3031)
!3063 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !3064, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3066)
!3064 = !DISubroutineType(types: !3065)
!3065 = !{!7, !3002}
!3066 = !{!3067}
!3067 = !DILocalVariable(name: "vec_", arg: 1, scope: !3063, file: !135, line: 182, type: !3002)
!3068 = !DILocation(line: 0, scope: !3063)
!3069 = !DILocation(line: 182, column: 1, scope: !3063)
!3070 = distinct !DISubprogram(name: "debug_all_value_ranges", scope: !3, file: !3, line: 3732, type: !3071, scopeLine: 3733, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2242)
!3071 = !DISubroutineType(types: !3072)
!3072 = !{null}
!3073 = !DILocation(line: 3734, column: 26, scope: !3070)
!3074 = !DILocation(line: 3734, column: 3, scope: !3070)
!3075 = !DILocation(line: 3735, column: 1, scope: !3070)
!3076 = distinct !DISubprogram(name: "dump_asserts_for", scope: !3, file: !3, line: 3853, type: !3077, scopeLine: 3854, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3079)
!3077 = !DISubroutineType(types: !3078)
!3078 = !{null, !2249, !693}
!3079 = !{!3080, !3081, !3082}
!3080 = !DILocalVariable(name: "file", arg: 1, scope: !3076, file: !3, line: 3853, type: !2249)
!3081 = !DILocalVariable(name: "name", arg: 2, scope: !3076, file: !3, line: 3853, type: !693)
!3082 = !DILocalVariable(name: "loc", scope: !3076, file: !3, line: 3855, type: !2047)
!3083 = !DILocation(line: 0, scope: !3076)
!3084 = !DILocation(line: 3857, column: 3, scope: !3076)
!3085 = !DILocation(line: 3858, column: 3, scope: !3076)
!3086 = !DILocation(line: 3859, column: 3, scope: !3076)
!3087 = !DILocation(line: 3861, column: 9, scope: !3076)
!3088 = !DILocation(line: 3861, column: 21, scope: !3076)
!3089 = !DILocation(line: 3862, column: 3, scope: !3076)
!3090 = !DILocation(line: 3864, column: 7, scope: !3091)
!3091 = distinct !DILexicalBlock(scope: !3076, file: !3, line: 3863, column: 5)
!3092 = !DILocation(line: 3865, column: 47, scope: !3091)
!3093 = !DILocation(line: 3865, column: 32, scope: !3091)
!3094 = !DILocation(line: 3865, column: 7, scope: !3091)
!3095 = !DILocation(line: 3866, column: 41, scope: !3091)
!3096 = !DILocation(line: 3866, column: 45, scope: !3091)
!3097 = !DILocation(line: 3866, column: 7, scope: !3091)
!3098 = !DILocation(line: 3867, column: 16, scope: !3099)
!3099 = distinct !DILexicalBlock(scope: !3091, file: !3, line: 3867, column: 11)
!3100 = !DILocation(line: 3867, column: 11, scope: !3099)
!3101 = !DILocation(line: 3867, column: 11, scope: !3091)
!3102 = !DILocation(line: 3869, column: 46, scope: !3103)
!3103 = distinct !DILexicalBlock(scope: !3099, file: !3, line: 3868, column: 2)
!3104 = !DILocation(line: 3869, column: 51, scope: !3103)
!3105 = !DILocation(line: 3870, column: 21, scope: !3103)
!3106 = !DILocation(line: 3870, column: 27, scope: !3103)
!3107 = !DILocation(line: 3869, column: 4, scope: !3103)
!3108 = !DILocation(line: 3871, column: 31, scope: !3103)
!3109 = !DILocation(line: 3871, column: 4, scope: !3103)
!3110 = !DILocation(line: 3872, column: 2, scope: !3103)
!3111 = !DILocation(line: 3873, column: 7, scope: !3091)
!3112 = !DILocation(line: 3874, column: 7, scope: !3091)
!3113 = !DILocation(line: 3875, column: 55, scope: !3091)
!3114 = !DILocation(line: 3875, column: 30, scope: !3091)
!3115 = !DILocation(line: 3875, column: 7, scope: !3091)
!3116 = !DILocation(line: 3876, column: 38, scope: !3091)
!3117 = !DILocation(line: 3876, column: 7, scope: !3091)
!3118 = !DILocation(line: 3877, column: 7, scope: !3091)
!3119 = !DILocation(line: 3878, column: 18, scope: !3091)
!3120 = distinct !{!3120, !3089, !3121}
!3121 = !DILocation(line: 3879, column: 5, scope: !3076)
!3122 = !DILocation(line: 3881, column: 3, scope: !3076)
!3123 = !DILocation(line: 3882, column: 1, scope: !3076)
!3124 = distinct !DISubprogram(name: "gsi_stmt", scope: !588, file: !588, line: 4501, type: !3125, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3127)
!3125 = !DISubroutineType(types: !3126)
!3126 = !{!1017, !2054}
!3127 = !{!3128}
!3128 = !DILocalVariable(name: "i", arg: 1, scope: !3124, file: !588, line: 4501, type: !2054)
!3129 = !DILocation(line: 4501, column: 32, scope: !3124)
!3130 = !DILocation(line: 4503, column: 12, scope: !3124)
!3131 = !DILocation(line: 4503, column: 17, scope: !3124)
!3132 = !DILocation(line: 4503, column: 3, scope: !3124)
!3133 = distinct !DISubprogram(name: "debug_asserts_for", scope: !3, file: !3, line: 3888, type: !3134, scopeLine: 3889, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3136)
!3134 = !DISubroutineType(types: !3135)
!3135 = !{null, !693}
!3136 = !{!3137}
!3137 = !DILocalVariable(name: "name", arg: 1, scope: !3133, file: !3, line: 3888, type: !693)
!3138 = !DILocation(line: 0, scope: !3133)
!3139 = !DILocation(line: 3890, column: 21, scope: !3133)
!3140 = !DILocation(line: 3890, column: 3, scope: !3133)
!3141 = !DILocation(line: 3891, column: 1, scope: !3133)
!3142 = distinct !DISubprogram(name: "dump_all_asserts", scope: !3, file: !3, line: 3897, type: !3032, scopeLine: 3898, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3143)
!3143 = !{!3144, !3145, !3146}
!3144 = !DILocalVariable(name: "file", arg: 1, scope: !3142, file: !3, line: 3897, type: !2249)
!3145 = !DILocalVariable(name: "i", scope: !3142, file: !3, line: 3899, type: !7)
!3146 = !DILocalVariable(name: "bi", scope: !3142, file: !3, line: 3900, type: !2190)
!3147 = !DILocation(line: 0, scope: !3142)
!3148 = !DILocation(line: 3899, column: 3, scope: !3142)
!3149 = !DILocation(line: 3900, column: 3, scope: !3142)
!3150 = !DILocation(line: 3902, column: 3, scope: !3142)
!3151 = !DILocation(line: 3903, column: 3, scope: !3152)
!3152 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 3903, column: 3)
!3153 = !DILocation(line: 3903, column: 3, scope: !3154)
!3154 = distinct !DILexicalBlock(scope: !3152, file: !3, line: 3903, column: 3)
!3155 = !DILocation(line: 3904, column: 29, scope: !3154)
!3156 = !DILocation(line: 3904, column: 5, scope: !3154)
!3157 = distinct !{!3157, !3151, !3158}
!3158 = !DILocation(line: 3904, column: 41, scope: !3152)
!3159 = !DILocation(line: 3905, column: 3, scope: !3142)
!3160 = !DILocation(line: 3906, column: 1, scope: !3142)
!3161 = distinct !DISubprogram(name: "debug_all_asserts", scope: !3, file: !3, line: 3912, type: !3071, scopeLine: 3913, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2242)
!3162 = !DILocation(line: 3914, column: 21, scope: !3161)
!3163 = !DILocation(line: 3914, column: 3, scope: !3161)
!3164 = !DILocation(line: 3915, column: 1, scope: !3161)
!3165 = distinct !DISubprogram(name: "gate_vrp", scope: !3, file: !3, line: 7413, type: !2146, scopeLine: 7414, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2242)
!3166 = !DILocation(line: 7415, column: 10, scope: !3165)
!3167 = !DILocation(line: 7415, column: 24, scope: !3165)
!3168 = !DILocation(line: 7415, column: 3, scope: !3165)
!3169 = distinct !DISubprogram(name: "execute_vrp", scope: !3, file: !3, line: 7345, type: !2150, scopeLine: 7346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3170)
!3170 = !{!3171, !3172, !3173, !3175, !3179, !3180}
!3171 = !DILocalVariable(name: "i", scope: !3169, file: !3, line: 7347, type: !680)
!3172 = !DILocalVariable(name: "e", scope: !3169, file: !3, line: 7348, type: !997)
!3173 = !DILocalVariable(name: "su", scope: !3169, file: !3, line: 7349, type: !3174)
!3174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2103, size: 64)
!3175 = !DILocalVariable(name: "j", scope: !3176, file: !3, line: 7386, type: !1162)
!3176 = distinct !DILexicalBlock(scope: !3177, file: !3, line: 7385, column: 5)
!3177 = distinct !DILexicalBlock(scope: !3178, file: !3, line: 7384, column: 3)
!3178 = distinct !DILexicalBlock(scope: !3169, file: !3, line: 7384, column: 3)
!3179 = !DILocalVariable(name: "n", scope: !3176, file: !3, line: 7387, type: !1162)
!3180 = !DILocalVariable(name: "label", scope: !3176, file: !3, line: 7388, type: !693)
!3181 = !DILocation(line: 7348, column: 3, scope: !3169)
!3182 = !DILocation(line: 7349, column: 3, scope: !3169)
!3183 = !DILocation(line: 7351, column: 3, scope: !3169)
!3184 = !DILocation(line: 7352, column: 3, scope: !3169)
!3185 = !DILocation(line: 7353, column: 3, scope: !3169)
!3186 = !DILocation(line: 7355, column: 3, scope: !3169)
!3187 = !DILocation(line: 7357, column: 21, scope: !3169)
!3188 = !DILocation(line: 7357, column: 19, scope: !3169)
!3189 = !DILocation(line: 7358, column: 28, scope: !3169)
!3190 = !DILocation(line: 7358, column: 26, scope: !3169)
!3191 = !DILocation(line: 7359, column: 3, scope: !3169)
!3192 = !DILocation(line: 7361, column: 3, scope: !3169)
!3193 = !DILocation(line: 7362, column: 3, scope: !3169)
!3194 = !DILocation(line: 7363, column: 3, scope: !3169)
!3195 = !DILocation(line: 7368, column: 3, scope: !3169)
!3196 = !DILocation(line: 7375, column: 3, scope: !3169)
!3197 = !DILocation(line: 7377, column: 3, scope: !3169)
!3198 = !DILocation(line: 0, scope: !3169)
!3199 = !DILocation(line: 7381, column: 8, scope: !3200)
!3200 = distinct !DILexicalBlock(scope: !3169, file: !3, line: 7381, column: 3)
!3201 = !DILocation(line: 0, scope: !3200)
!3202 = !DILocation(line: 7381, column: 15, scope: !3203)
!3203 = distinct !DILexicalBlock(scope: !3200, file: !3, line: 7381, column: 3)
!3204 = !DILocation(line: 7381, column: 3, scope: !3200)
!3205 = !DILocation(line: 7384, column: 3, scope: !3178)
!3206 = !DILocation(line: 7382, column: 18, scope: !3203)
!3207 = !DILocation(line: 7382, column: 5, scope: !3203)
!3208 = !DILocation(line: 7381, column: 58, scope: !3203)
!3209 = !DILocation(line: 7381, column: 3, scope: !3203)
!3210 = distinct !{!3210, !3204, !3211}
!3211 = !DILocation(line: 7382, column: 19, scope: !3200)
!3212 = !DILocation(line: 0, scope: !3178)
!3213 = !DILocation(line: 7384, column: 15, scope: !3177)
!3214 = !DILocation(line: 7387, column: 18, scope: !3176)
!3215 = !DILocation(line: 0, scope: !3176)
!3216 = !DILocation(line: 7389, column: 41, scope: !3176)
!3217 = !DILocation(line: 7389, column: 7, scope: !3176)
!3218 = !DILocation(line: 7390, column: 12, scope: !3219)
!3219 = distinct !DILexicalBlock(scope: !3176, file: !3, line: 7390, column: 7)
!3220 = !DILocation(line: 0, scope: !3219)
!3221 = !DILocation(line: 7390, column: 21, scope: !3222)
!3222 = distinct !DILexicalBlock(scope: !3219, file: !3, line: 7390, column: 7)
!3223 = !DILocation(line: 7390, column: 7, scope: !3219)
!3224 = !DILocation(line: 7391, column: 37, scope: !3222)
!3225 = !DILocation(line: 7391, column: 40, scope: !3222)
!3226 = !DILocation(line: 7391, column: 2, scope: !3222)
!3227 = !DILocation(line: 7390, column: 27, scope: !3222)
!3228 = !DILocation(line: 7390, column: 7, scope: !3222)
!3229 = distinct !{!3229, !3223, !3230}
!3230 = !DILocation(line: 7391, column: 65, scope: !3219)
!3231 = !DILocation(line: 7395, column: 15, scope: !3176)
!3232 = !DILocation(line: 7396, column: 7, scope: !3176)
!3233 = !DILocation(line: 7396, column: 24, scope: !3176)
!3234 = !DILocation(line: 7397, column: 7, scope: !3176)
!3235 = !DILocation(line: 7397, column: 25, scope: !3176)
!3236 = !DILocation(line: 7384, column: 75, scope: !3177)
!3237 = !DILocation(line: 7384, column: 3, scope: !3177)
!3238 = distinct !{!3238, !3205, !3239}
!3239 = !DILocation(line: 7398, column: 5, scope: !3178)
!3240 = !DILocation(line: 7400, column: 7, scope: !3241)
!3241 = distinct !DILexicalBlock(scope: !3169, file: !3, line: 7400, column: 7)
!3242 = !DILocation(line: 7400, column: 42, scope: !3241)
!3243 = !DILocation(line: 7400, column: 7, scope: !3169)
!3244 = !DILocation(line: 7401, column: 5, scope: !3241)
!3245 = !DILocation(line: 7403, column: 3, scope: !3169)
!3246 = !DILocation(line: 7404, column: 3, scope: !3169)
!3247 = !DILocation(line: 7405, column: 3, scope: !3169)
!3248 = !DILocation(line: 7407, column: 3, scope: !3169)
!3249 = !DILocation(line: 7408, column: 3, scope: !3169)
!3250 = !DILocation(line: 7410, column: 1, scope: !3169)
!3251 = !DILocation(line: 7409, column: 3, scope: !3169)
!3252 = distinct !DISubprogram(name: "nonnull_arg_p", scope: !3, file: !3, line: 313, type: !2667, scopeLine: 314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3253)
!3253 = !{!3254, !3255, !3256, !3257, !3258}
!3254 = !DILocalVariable(name: "arg", arg: 1, scope: !3252, file: !3, line: 313, type: !2080)
!3255 = !DILocalVariable(name: "t", scope: !3252, file: !3, line: 315, type: !693)
!3256 = !DILocalVariable(name: "attrs", scope: !3252, file: !3, line: 315, type: !693)
!3257 = !DILocalVariable(name: "fntype", scope: !3252, file: !3, line: 315, type: !693)
!3258 = !DILocalVariable(name: "arg_num", scope: !3252, file: !3, line: 316, type: !747)
!3259 = !DILocation(line: 0, scope: !3252)
!3260 = !DILocation(line: 318, column: 3, scope: !3252)
!3261 = !DILocation(line: 321, column: 14, scope: !3262)
!3262 = distinct !DILexicalBlock(scope: !3252, file: !3, line: 321, column: 7)
!3263 = !DILocation(line: 321, column: 20, scope: !3262)
!3264 = !DILocation(line: 321, column: 11, scope: !3262)
!3265 = !DILocation(line: 321, column: 7, scope: !3252)
!3266 = !DILocation(line: 324, column: 12, scope: !3252)
!3267 = !DILocation(line: 325, column: 40, scope: !3252)
!3268 = !DILocation(line: 325, column: 11, scope: !3252)
!3269 = !DILocation(line: 328, column: 13, scope: !3270)
!3270 = distinct !DILexicalBlock(scope: !3252, file: !3, line: 328, column: 7)
!3271 = !DILocation(line: 328, column: 7, scope: !3252)
!3272 = !DILocation(line: 332, column: 7, scope: !3273)
!3273 = distinct !DILexicalBlock(scope: !3252, file: !3, line: 332, column: 7)
!3274 = !DILocation(line: 332, column: 26, scope: !3273)
!3275 = !DILocation(line: 332, column: 7, scope: !3252)
!3276 = !DILocation(line: 336, column: 25, scope: !3277)
!3277 = distinct !DILexicalBlock(scope: !3252, file: !3, line: 336, column: 3)
!3278 = !DILocation(line: 336, column: 8, scope: !3277)
!3279 = !DILocation(line: 0, scope: !3277)
!3280 = !DILocation(line: 336, column: 3, scope: !3277)
!3281 = !DILocation(line: 340, column: 13, scope: !3282)
!3282 = distinct !DILexicalBlock(scope: !3283, file: !3, line: 340, column: 11)
!3283 = distinct !DILexicalBlock(scope: !3284, file: !3, line: 339, column: 5)
!3284 = distinct !DILexicalBlock(scope: !3277, file: !3, line: 336, column: 3)
!3285 = !DILocation(line: 338, column: 12, scope: !3284)
!3286 = !DILocation(line: 338, column: 35, scope: !3284)
!3287 = !DILocation(line: 336, column: 3, scope: !3284)
!3288 = distinct !{!3288, !3280, !3289}
!3289 = !DILocation(line: 342, column: 5, scope: !3277)
!3290 = !DILocation(line: 344, column: 3, scope: !3252)
!3291 = !DILocation(line: 347, column: 8, scope: !3292)
!3292 = distinct !DILexicalBlock(scope: !3252, file: !3, line: 347, column: 3)
!3293 = !DILocation(line: 0, scope: !3292)
!3294 = !DILocation(line: 347, column: 3, scope: !3292)
!3295 = !DILocation(line: 349, column: 29, scope: !3296)
!3296 = distinct !DILexicalBlock(scope: !3297, file: !3, line: 349, column: 11)
!3297 = distinct !DILexicalBlock(scope: !3298, file: !3, line: 348, column: 5)
!3298 = distinct !DILexicalBlock(scope: !3292, file: !3, line: 347, column: 3)
!3299 = !DILocation(line: 349, column: 11, scope: !3296)
!3300 = !DILocation(line: 349, column: 54, scope: !3296)
!3301 = !DILocation(line: 349, column: 11, scope: !3297)
!3302 = !DILocation(line: 347, column: 39, scope: !3298)
!3303 = !DILocation(line: 347, column: 3, scope: !3298)
!3304 = distinct !{!3304, !3294, !3305}
!3305 = !DILocation(line: 351, column: 5, scope: !3292)
!3306 = !DILocation(line: 354, column: 1, scope: !3252)
!3307 = distinct !DISubprogram(name: "set_value_range_to_nonnull", scope: !3, file: !3, line: 549, type: !3308, scopeLine: 550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3310)
!3308 = !DISubroutineType(types: !3309)
!3309 = !{null, !687, !693}
!3310 = !{!3311, !3312, !3313}
!3311 = !DILocalVariable(name: "vr", arg: 1, scope: !3307, file: !3, line: 549, type: !687)
!3312 = !DILocalVariable(name: "type", arg: 2, scope: !3307, file: !3, line: 549, type: !693)
!3313 = !DILocalVariable(name: "zero", scope: !3307, file: !3, line: 551, type: !693)
!3314 = !DILocation(line: 0, scope: !3307)
!3315 = !DILocation(line: 551, column: 15, scope: !3307)
!3316 = !DILocation(line: 552, column: 55, scope: !3307)
!3317 = !DILocation(line: 552, column: 3, scope: !3307)
!3318 = !DILocation(line: 553, column: 1, scope: !3307)
!3319 = distinct !DISubprogram(name: "set_value_range_to_varying", scope: !3, file: !3, line: 360, type: !3021, scopeLine: 361, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3320)
!3320 = !{!3321}
!3321 = !DILocalVariable(name: "vr", arg: 1, scope: !3319, file: !3, line: 360, type: !687)
!3322 = !DILocation(line: 0, scope: !3319)
!3323 = !DILocation(line: 362, column: 7, scope: !3319)
!3324 = !DILocation(line: 362, column: 12, scope: !3319)
!3325 = !DILocation(line: 363, column: 17, scope: !3319)
!3326 = !DILocation(line: 363, column: 21, scope: !3319)
!3327 = !DILocation(line: 363, column: 7, scope: !3319)
!3328 = !DILocation(line: 363, column: 11, scope: !3319)
!3329 = !DILocation(line: 364, column: 11, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3319, file: !3, line: 364, column: 7)
!3331 = !DILocation(line: 364, column: 7, scope: !3330)
!3332 = !DILocation(line: 364, column: 7, scope: !3319)
!3333 = !DILocation(line: 365, column: 5, scope: !3330)
!3334 = !DILocation(line: 366, column: 1, scope: !3319)
!3335 = distinct !DISubprogram(name: "set_value_range", scope: !3, file: !3, line: 372, type: !3336, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3338)
!3336 = !DISubroutineType(types: !3337)
!3337 = !{null, !687, !390, !693, !693, !1586}
!3338 = !{!3339, !3340, !3341, !3342, !3343}
!3339 = !DILocalVariable(name: "vr", arg: 1, scope: !3335, file: !3, line: 372, type: !687)
!3340 = !DILocalVariable(name: "t", arg: 2, scope: !3335, file: !3, line: 372, type: !390)
!3341 = !DILocalVariable(name: "min", arg: 3, scope: !3335, file: !3, line: 372, type: !693)
!3342 = !DILocalVariable(name: "max", arg: 4, scope: !3335, file: !3, line: 373, type: !693)
!3343 = !DILocalVariable(name: "equiv", arg: 5, scope: !3335, file: !3, line: 373, type: !1586)
!3344 = !DILocation(line: 0, scope: !3335)
!3345 = !DILocation(line: 401, column: 7, scope: !3335)
!3346 = !DILocation(line: 401, column: 12, scope: !3335)
!3347 = !DILocation(line: 402, column: 7, scope: !3335)
!3348 = !DILocation(line: 402, column: 11, scope: !3335)
!3349 = !DILocation(line: 403, column: 7, scope: !3335)
!3350 = !DILocation(line: 403, column: 11, scope: !3335)
!3351 = !DILocation(line: 407, column: 11, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3335, file: !3, line: 407, column: 7)
!3353 = !DILocation(line: 407, column: 17, scope: !3352)
!3354 = !DILocation(line: 408, column: 16, scope: !3352)
!3355 = !DILocation(line: 408, column: 7, scope: !3352)
!3356 = !DILocation(line: 409, column: 17, scope: !3352)
!3357 = !DILocation(line: 409, column: 15, scope: !3352)
!3358 = !DILocation(line: 409, column: 5, scope: !3352)
!3359 = !DILocation(line: 411, column: 20, scope: !3360)
!3360 = distinct !DILexicalBlock(scope: !3335, file: !3, line: 411, column: 7)
!3361 = !DILocation(line: 411, column: 13, scope: !3360)
!3362 = !DILocation(line: 411, column: 7, scope: !3335)
!3363 = !DILocation(line: 413, column: 11, scope: !3364)
!3364 = distinct !DILexicalBlock(scope: !3365, file: !3, line: 413, column: 11)
!3365 = distinct !DILexicalBlock(scope: !3360, file: !3, line: 412, column: 5)
!3366 = !DILocation(line: 413, column: 17, scope: !3364)
!3367 = !DILocation(line: 413, column: 21, scope: !3364)
!3368 = !DILocation(line: 413, column: 11, scope: !3365)
!3369 = !DILocation(line: 414, column: 2, scope: !3364)
!3370 = !DILocation(line: 416, column: 2, scope: !3364)
!3371 = !DILocation(line: 418, column: 1, scope: !3335)
!3372 = distinct !DISubprogram(name: "compare_values_warnv", scope: !3, file: !3, line: 1066, type: !3373, scopeLine: 1067, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3375)
!3373 = !DISubroutineType(types: !3374)
!3374 = !{!680, !693, !693, !678}
!3375 = !{!3376, !3377, !3378, !3379, !3382, !3383, !3384, !3385, !3386, !3387}
!3376 = !DILocalVariable(name: "val1", arg: 1, scope: !3372, file: !3, line: 1066, type: !693)
!3377 = !DILocalVariable(name: "val2", arg: 2, scope: !3372, file: !3, line: 1066, type: !693)
!3378 = !DILocalVariable(name: "strict_overflow_p", arg: 3, scope: !3372, file: !3, line: 1066, type: !678)
!3379 = !DILocalVariable(name: "n1", scope: !3380, file: !3, line: 1087, type: !693)
!3380 = distinct !DILexicalBlock(scope: !3381, file: !3, line: 1086, column: 5)
!3381 = distinct !DILexicalBlock(scope: !3372, file: !3, line: 1080, column: 7)
!3382 = !DILocalVariable(name: "c1", scope: !3380, file: !3, line: 1087, type: !693)
!3383 = !DILocalVariable(name: "n2", scope: !3380, file: !3, line: 1087, type: !693)
!3384 = !DILocalVariable(name: "c2", scope: !3380, file: !3, line: 1087, type: !693)
!3385 = !DILocalVariable(name: "code1", scope: !3380, file: !3, line: 1088, type: !134)
!3386 = !DILocalVariable(name: "code2", scope: !3380, file: !3, line: 1088, type: !134)
!3387 = !DILocalVariable(name: "t", scope: !3388, file: !3, line: 1220, type: !693)
!3388 = distinct !DILexicalBlock(scope: !3389, file: !3, line: 1219, column: 5)
!3389 = distinct !DILexicalBlock(scope: !3372, file: !3, line: 1197, column: 7)
!3390 = !DILocation(line: 0, scope: !3372)
!3391 = !DILocation(line: 1068, column: 12, scope: !3392)
!3392 = distinct !DILexicalBlock(scope: !3372, file: !3, line: 1068, column: 7)
!3393 = !DILocation(line: 1068, column: 7, scope: !3372)
!3394 = !DILocation(line: 1073, column: 3, scope: !3372)
!3395 = !DILocation(line: 1077, column: 10, scope: !3372)
!3396 = !DILocation(line: 1078, column: 3, scope: !3372)
!3397 = !DILocation(line: 1080, column: 8, scope: !3381)
!3398 = !DILocation(line: 1080, column: 25, scope: !3381)
!3399 = !DILocation(line: 1081, column: 8, scope: !3381)
!3400 = !DILocation(line: 1081, column: 28, scope: !3381)
!3401 = !DILocation(line: 1082, column: 8, scope: !3381)
!3402 = !DILocation(line: 1082, column: 28, scope: !3381)
!3403 = !DILocation(line: 1083, column: 7, scope: !3381)
!3404 = !DILocation(line: 1083, column: 11, scope: !3381)
!3405 = !DILocation(line: 1083, column: 28, scope: !3381)
!3406 = !DILocation(line: 1084, column: 4, scope: !3381)
!3407 = !DILocation(line: 1084, column: 24, scope: !3381)
!3408 = !DILocation(line: 1085, column: 4, scope: !3381)
!3409 = !DILocation(line: 1085, column: 24, scope: !3381)
!3410 = !DILocation(line: 1080, column: 7, scope: !3372)
!3411 = !DILocation(line: 1093, column: 11, scope: !3380)
!3412 = !DILocation(line: 1101, column: 12, scope: !3413)
!3413 = distinct !DILexicalBlock(scope: !3414, file: !3, line: 1100, column: 2)
!3414 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1093, column: 11)
!3415 = !DILocation(line: 0, scope: !3380)
!3416 = !DILocation(line: 1102, column: 9, scope: !3413)
!3417 = !DILocation(line: 1103, column: 9, scope: !3413)
!3418 = !DILocation(line: 1104, column: 8, scope: !3419)
!3419 = distinct !DILexicalBlock(scope: !3413, file: !3, line: 1104, column: 8)
!3420 = !DILocation(line: 1104, column: 30, scope: !3419)
!3421 = !DILocation(line: 1104, column: 8, scope: !3413)
!3422 = !DILocation(line: 1106, column: 12, scope: !3423)
!3423 = distinct !DILexicalBlock(scope: !3424, file: !3, line: 1106, column: 12)
!3424 = distinct !DILexicalBlock(scope: !3419, file: !3, line: 1105, column: 6)
!3425 = !DILocation(line: 1106, column: 12, scope: !3424)
!3426 = !DILocation(line: 1108, column: 50, scope: !3424)
!3427 = !DILocation(line: 1108, column: 13, scope: !3424)
!3428 = !DILocation(line: 1109, column: 13, scope: !3429)
!3429 = distinct !DILexicalBlock(scope: !3424, file: !3, line: 1109, column: 12)
!3430 = !DILocation(line: 1109, column: 12, scope: !3424)
!3431 = !DILocation(line: 1111, column: 22, scope: !3424)
!3432 = !DILocation(line: 1111, column: 16, scope: !3424)
!3433 = !DILocation(line: 1112, column: 6, scope: !3424)
!3434 = !DILocation(line: 0, scope: !3414)
!3435 = !DILocation(line: 1115, column: 11, scope: !3436)
!3436 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1115, column: 11)
!3437 = !DILocation(line: 1115, column: 28, scope: !3436)
!3438 = !DILocation(line: 1115, column: 11, scope: !3380)
!3439 = !DILocation(line: 1123, column: 12, scope: !3440)
!3440 = distinct !DILexicalBlock(scope: !3436, file: !3, line: 1122, column: 2)
!3441 = !DILocation(line: 1124, column: 9, scope: !3440)
!3442 = !DILocation(line: 1125, column: 9, scope: !3440)
!3443 = !DILocation(line: 1126, column: 8, scope: !3444)
!3444 = distinct !DILexicalBlock(scope: !3440, file: !3, line: 1126, column: 8)
!3445 = !DILocation(line: 1126, column: 30, scope: !3444)
!3446 = !DILocation(line: 1126, column: 8, scope: !3440)
!3447 = !DILocation(line: 1128, column: 12, scope: !3448)
!3448 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1128, column: 12)
!3449 = distinct !DILexicalBlock(scope: !3444, file: !3, line: 1127, column: 6)
!3450 = !DILocation(line: 1128, column: 12, scope: !3449)
!3451 = !DILocation(line: 1130, column: 50, scope: !3449)
!3452 = !DILocation(line: 1130, column: 13, scope: !3449)
!3453 = !DILocation(line: 1131, column: 13, scope: !3454)
!3454 = distinct !DILexicalBlock(scope: !3449, file: !3, line: 1131, column: 12)
!3455 = !DILocation(line: 1131, column: 12, scope: !3449)
!3456 = !DILocation(line: 1133, column: 22, scope: !3449)
!3457 = !DILocation(line: 1133, column: 16, scope: !3449)
!3458 = !DILocation(line: 1134, column: 6, scope: !3449)
!3459 = !DILocation(line: 0, scope: !3436)
!3460 = !DILocation(line: 1138, column: 14, scope: !3461)
!3461 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1138, column: 11)
!3462 = !DILocation(line: 1138, column: 11, scope: !3380)
!3463 = !DILocation(line: 1141, column: 17, scope: !3464)
!3464 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1141, column: 11)
!3465 = !DILocation(line: 1142, column: 13, scope: !3464)
!3466 = !DILocation(line: 1142, column: 4, scope: !3464)
!3467 = !DILocation(line: 1147, column: 12, scope: !3468)
!3468 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1147, column: 11)
!3469 = !DILocation(line: 1150, column: 29, scope: !3470)
!3470 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1150, column: 11)
!3471 = !DILocation(line: 1151, column: 4, scope: !3470)
!3472 = !DILocation(line: 1151, column: 26, scope: !3470)
!3473 = !DILocation(line: 1151, column: 30, scope: !3470)
!3474 = !DILocation(line: 1152, column: 4, scope: !3470)
!3475 = !DILocation(line: 1152, column: 26, scope: !3470)
!3476 = !DILocation(line: 1152, column: 30, scope: !3470)
!3477 = !DILocation(line: 1150, column: 11, scope: !3380)
!3478 = !DILocation(line: 1153, column: 21, scope: !3470)
!3479 = !DILocation(line: 1153, column: 2, scope: !3470)
!3480 = !DILocation(line: 1155, column: 11, scope: !3380)
!3481 = !DILocation(line: 1157, column: 8, scope: !3482)
!3482 = distinct !DILexicalBlock(scope: !3483, file: !3, line: 1156, column: 2)
!3483 = distinct !DILexicalBlock(scope: !3380, file: !3, line: 1155, column: 11)
!3484 = !DILocation(line: 1162, column: 6, scope: !3485)
!3485 = distinct !DILexicalBlock(scope: !3486, file: !3, line: 1160, column: 13)
!3486 = distinct !DILexicalBlock(scope: !3482, file: !3, line: 1157, column: 8)
!3487 = !DILocation(line: 1166, column: 8, scope: !3488)
!3488 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 1165, column: 2)
!3489 = distinct !DILexicalBlock(scope: !3483, file: !3, line: 1164, column: 16)
!3490 = !DILocation(line: 1171, column: 13, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3492, file: !3, line: 1169, column: 13)
!3492 = distinct !DILexicalBlock(scope: !3488, file: !3, line: 1166, column: 8)
!3493 = !DILocation(line: 1171, column: 6, scope: !3491)
!3494 = !DILocation(line: 1178, column: 8, scope: !3495)
!3495 = distinct !DILexicalBlock(scope: !3496, file: !3, line: 1177, column: 2)
!3496 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 1176, column: 16)
!3497 = !DILocation(line: 1187, column: 13, scope: !3498)
!3498 = distinct !DILexicalBlock(scope: !3499, file: !3, line: 1184, column: 13)
!3499 = distinct !DILexicalBlock(scope: !3500, file: !3, line: 1181, column: 13)
!3500 = distinct !DILexicalBlock(scope: !3495, file: !3, line: 1178, column: 8)
!3501 = !DILocation(line: 1187, column: 6, scope: !3498)
!3502 = !DILocation(line: 1190, column: 7, scope: !3380)
!3503 = !DILocation(line: 1191, column: 5, scope: !3381)
!3504 = !DILocation(line: 1194, column: 8, scope: !3505)
!3505 = distinct !DILexicalBlock(scope: !3372, file: !3, line: 1194, column: 7)
!3506 = !DILocation(line: 1194, column: 39, scope: !3505)
!3507 = !DILocation(line: 1194, column: 43, scope: !3505)
!3508 = !DILocation(line: 1194, column: 7, scope: !3372)
!3509 = !DILocation(line: 1197, column: 8, scope: !3389)
!3510 = !DILocation(line: 1197, column: 7, scope: !3372)
!3511 = !DILocation(line: 1201, column: 11, scope: !3512)
!3512 = distinct !DILexicalBlock(scope: !3513, file: !3, line: 1201, column: 11)
!3513 = distinct !DILexicalBlock(scope: !3389, file: !3, line: 1198, column: 5)
!3514 = !DILocation(line: 1201, column: 32, scope: !3512)
!3515 = !DILocation(line: 1201, column: 35, scope: !3512)
!3516 = !DILocation(line: 1201, column: 11, scope: !3513)
!3517 = !DILocation(line: 1203, column: 26, scope: !3518)
!3518 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1203, column: 8)
!3519 = distinct !DILexicalBlock(scope: !3512, file: !3, line: 1202, column: 2)
!3520 = !DILocation(line: 1203, column: 8, scope: !3519)
!3521 = !DILocation(line: 1204, column: 25, scope: !3518)
!3522 = !DILocation(line: 1204, column: 6, scope: !3518)
!3523 = !DILocation(line: 1205, column: 8, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3519, file: !3, line: 1205, column: 8)
!3525 = !DILocation(line: 0, scope: !3524)
!3526 = !DILocation(line: 1205, column: 8, scope: !3519)
!3527 = !DILocation(line: 1206, column: 13, scope: !3524)
!3528 = !DILocation(line: 1206, column: 6, scope: !3524)
!3529 = !DILocation(line: 1207, column: 13, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3524, file: !3, line: 1207, column: 13)
!3531 = !DILocation(line: 1207, column: 13, scope: !3524)
!3532 = !DILocation(line: 1209, column: 13, scope: !3533)
!3533 = distinct !DILexicalBlock(scope: !3530, file: !3, line: 1209, column: 13)
!3534 = !DILocation(line: 0, scope: !3533)
!3535 = !DILocation(line: 1209, column: 13, scope: !3530)
!3536 = !DILocation(line: 1210, column: 13, scope: !3533)
!3537 = !DILocation(line: 1210, column: 6, scope: !3533)
!3538 = !DILocation(line: 1211, column: 13, scope: !3539)
!3539 = distinct !DILexicalBlock(scope: !3533, file: !3, line: 1211, column: 13)
!3540 = !DILocation(line: 1211, column: 13, scope: !3533)
!3541 = !DILocation(line: 1216, column: 14, scope: !3513)
!3542 = !DILocation(line: 1216, column: 7, scope: !3513)
!3543 = !DILocation(line: 1223, column: 16, scope: !3544)
!3544 = distinct !DILexicalBlock(scope: !3388, file: !3, line: 1223, column: 11)
!3545 = !DILocation(line: 1223, column: 24, scope: !3544)
!3546 = !DILocation(line: 1223, column: 27, scope: !3544)
!3547 = !DILocation(line: 1223, column: 11, scope: !3388)
!3548 = !DILocation(line: 1227, column: 11, scope: !3549)
!3549 = distinct !DILexicalBlock(scope: !3388, file: !3, line: 1227, column: 11)
!3550 = !DILocation(line: 1227, column: 39, scope: !3549)
!3551 = !DILocation(line: 1227, column: 11, scope: !3388)
!3552 = !DILocation(line: 1231, column: 11, scope: !3553)
!3553 = distinct !DILexicalBlock(scope: !3388, file: !3, line: 1231, column: 11)
!3554 = !DILocation(line: 1231, column: 39, scope: !3553)
!3555 = !DILocation(line: 1231, column: 11, scope: !3388)
!3556 = !DILocation(line: 1238, column: 11, scope: !3557)
!3557 = distinct !DILexicalBlock(scope: !3388, file: !3, line: 1238, column: 11)
!3558 = !DILocation(line: 1238, column: 28, scope: !3557)
!3559 = !DILocation(line: 1239, column: 4, scope: !3557)
!3560 = !DILocation(line: 1239, column: 7, scope: !3557)
!3561 = !DILocation(line: 1239, column: 24, scope: !3557)
!3562 = !DILocation(line: 1238, column: 11, scope: !3388)
!3563 = !DILocation(line: 1241, column: 49, scope: !3564)
!3564 = distinct !DILexicalBlock(scope: !3557, file: !3, line: 1240, column: 2)
!3565 = !DILocation(line: 1241, column: 15, scope: !3564)
!3566 = !DILocation(line: 0, scope: !3388)
!3567 = !DILocation(line: 1242, column: 8, scope: !3568)
!3568 = distinct !DILexicalBlock(scope: !3564, file: !3, line: 1242, column: 8)
!3569 = !DILocation(line: 1242, column: 10, scope: !3568)
!3570 = !DILocation(line: 1242, column: 13, scope: !3568)
!3571 = !DILocation(line: 1242, column: 8, scope: !3564)
!3572 = !DILocation(line: 1246, column: 7, scope: !3388)
!3573 = !DILocation(line: 1248, column: 1, scope: !3372)
!3574 = distinct !DISubprogram(name: "operand_less_p", scope: !3, file: !3, line: 1010, type: !2730, scopeLine: 1011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3575)
!3575 = !{!3576, !3577, !3578}
!3576 = !DILocalVariable(name: "val", arg: 1, scope: !3574, file: !3, line: 1010, type: !693)
!3577 = !DILocalVariable(name: "val2", arg: 2, scope: !3574, file: !3, line: 1010, type: !693)
!3578 = !DILocalVariable(name: "tcmp", scope: !3579, file: !3, line: 1025, type: !693)
!3579 = distinct !DILexicalBlock(scope: !3580, file: !3, line: 1024, column: 5)
!3580 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 1013, column: 7)
!3581 = !DILocation(line: 0, scope: !3574)
!3582 = !DILocation(line: 1013, column: 7, scope: !3580)
!3583 = !DILocation(line: 1013, column: 23, scope: !3580)
!3584 = !DILocation(line: 1013, column: 38, scope: !3580)
!3585 = !DILocation(line: 1013, column: 41, scope: !3580)
!3586 = !DILocation(line: 1013, column: 58, scope: !3580)
!3587 = !DILocation(line: 1013, column: 7, scope: !3574)
!3588 = !DILocation(line: 1015, column: 11, scope: !3589)
!3589 = distinct !DILexicalBlock(scope: !3590, file: !3, line: 1015, column: 11)
!3590 = distinct !DILexicalBlock(scope: !3580, file: !3, line: 1014, column: 5)
!3591 = !DILocation(line: 0, scope: !3589)
!3592 = !DILocation(line: 1015, column: 11, scope: !3590)
!3593 = !DILocation(line: 1016, column: 9, scope: !3589)
!3594 = !DILocation(line: 1016, column: 2, scope: !3589)
!3595 = !DILocation(line: 1019, column: 8, scope: !3596)
!3596 = distinct !DILexicalBlock(scope: !3597, file: !3, line: 1019, column: 8)
!3597 = distinct !DILexicalBlock(scope: !3589, file: !3, line: 1018, column: 2)
!3598 = !DILocation(line: 1019, column: 8, scope: !3597)
!3599 = !DILocation(line: 1027, column: 7, scope: !3579)
!3600 = !DILocation(line: 1029, column: 48, scope: !3579)
!3601 = !DILocation(line: 1029, column: 14, scope: !3579)
!3602 = !DILocation(line: 0, scope: !3579)
!3603 = !DILocation(line: 1031, column: 7, scope: !3579)
!3604 = !DILocation(line: 1033, column: 12, scope: !3605)
!3605 = distinct !DILexicalBlock(scope: !3579, file: !3, line: 1033, column: 11)
!3606 = !DILocation(line: 1034, column: 4, scope: !3605)
!3607 = !DILocation(line: 1034, column: 7, scope: !3605)
!3608 = !DILocation(line: 1034, column: 24, scope: !3605)
!3609 = !DILocation(line: 1033, column: 11, scope: !3579)
!3610 = !DILocation(line: 1037, column: 12, scope: !3611)
!3611 = distinct !DILexicalBlock(scope: !3579, file: !3, line: 1037, column: 11)
!3612 = !DILocation(line: 0, scope: !3580)
!3613 = !DILocation(line: 1042, column: 7, scope: !3614)
!3614 = distinct !DILexicalBlock(scope: !3574, file: !3, line: 1042, column: 7)
!3615 = !DILocation(line: 1042, column: 7, scope: !3574)
!3616 = !DILocation(line: 1043, column: 12, scope: !3614)
!3617 = !DILocation(line: 1043, column: 5, scope: !3614)
!3618 = !DILocation(line: 1044, column: 12, scope: !3619)
!3619 = distinct !DILexicalBlock(scope: !3614, file: !3, line: 1044, column: 12)
!3620 = !DILocation(line: 1044, column: 12, scope: !3614)
!3621 = !DILocation(line: 1045, column: 12, scope: !3619)
!3622 = !DILocation(line: 1045, column: 5, scope: !3619)
!3623 = !DILocation(line: 1048, column: 1, scope: !3574)
!3624 = distinct !DISubprogram(name: "needs_overflow_infinity", scope: !3, file: !3, line: 182, type: !2667, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3625)
!3625 = !{!3626}
!3626 = !DILocalVariable(name: "type", arg: 1, scope: !3624, file: !3, line: 182, type: !2080)
!3627 = !DILocation(line: 0, scope: !3624)
!3628 = !DILocation(line: 184, column: 10, scope: !3624)
!3629 = !DILocation(line: 184, column: 33, scope: !3624)
!3630 = !DILocation(line: 184, column: 37, scope: !3624)
!3631 = !DILocation(line: 184, column: 36, scope: !3624)
!3632 = !DILocation(line: 184, column: 3, scope: !3624)
!3633 = distinct !DISubprogram(name: "vrp_val_min", scope: !3, file: !3, line: 139, type: !3634, scopeLine: 140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3636)
!3634 = !DISubroutineType(types: !3635)
!3635 = !{!693, !2080}
!3636 = !{!3637}
!3637 = !DILocalVariable(name: "type", arg: 1, scope: !3633, file: !3, line: 139, type: !2080)
!3638 = !DILocation(line: 0, scope: !3633)
!3639 = !DILocation(line: 141, column: 8, scope: !3640)
!3640 = distinct !DILexicalBlock(scope: !3633, file: !3, line: 141, column: 7)
!3641 = !DILocation(line: 141, column: 7, scope: !3633)
!3642 = !DILocation(line: 144, column: 10, scope: !3633)
!3643 = !DILocation(line: 144, column: 3, scope: !3633)
!3644 = !DILocation(line: 145, column: 1, scope: !3633)
!3645 = distinct !DISubprogram(name: "vrp_val_max", scope: !3, file: !3, line: 128, type: !3634, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3646)
!3646 = !{!3647}
!3647 = !DILocalVariable(name: "type", arg: 1, scope: !3645, file: !3, line: 128, type: !2080)
!3648 = !DILocation(line: 0, scope: !3645)
!3649 = !DILocation(line: 130, column: 8, scope: !3650)
!3650 = distinct !DILexicalBlock(scope: !3645, file: !3, line: 130, column: 7)
!3651 = !DILocation(line: 130, column: 7, scope: !3645)
!3652 = !DILocation(line: 133, column: 10, scope: !3645)
!3653 = !DILocation(line: 133, column: 3, scope: !3645)
!3654 = !DILocation(line: 134, column: 1, scope: !3645)
!3655 = distinct !DISubprogram(name: "insert_range_assertions", scope: !3, file: !3, line: 4979, type: !3071, scopeLine: 4980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2242)
!3656 = !DILocation(line: 4981, column: 21, scope: !3655)
!3657 = !DILocation(line: 4981, column: 19, scope: !3655)
!3658 = !DILocation(line: 4982, column: 17, scope: !3655)
!3659 = !DILocation(line: 4982, column: 15, scope: !3655)
!3660 = !DILocation(line: 4984, column: 3, scope: !3655)
!3661 = !DILocation(line: 4986, column: 7, scope: !3662)
!3662 = distinct !DILexicalBlock(scope: !3655, file: !3, line: 4986, column: 7)
!3663 = !DILocation(line: 4986, column: 7, scope: !3655)
!3664 = !DILocation(line: 4988, column: 7, scope: !3665)
!3665 = distinct !DILexicalBlock(scope: !3662, file: !3, line: 4987, column: 5)
!3666 = !DILocation(line: 4989, column: 7, scope: !3665)
!3667 = !DILocation(line: 4990, column: 5, scope: !3665)
!3668 = !DILocation(line: 4992, column: 7, scope: !3669)
!3669 = distinct !DILexicalBlock(scope: !3655, file: !3, line: 4992, column: 7)
!3670 = !DILocation(line: 4992, column: 17, scope: !3669)
!3671 = !DILocation(line: 4992, column: 21, scope: !3669)
!3672 = !DILocation(line: 4992, column: 32, scope: !3669)
!3673 = !DILocation(line: 4992, column: 7, scope: !3655)
!3674 = !DILocation(line: 4994, column: 7, scope: !3675)
!3675 = distinct !DILexicalBlock(scope: !3669, file: !3, line: 4993, column: 5)
!3676 = !DILocation(line: 4995, column: 30, scope: !3675)
!3677 = !DILocation(line: 4995, column: 53, scope: !3675)
!3678 = !DILocation(line: 4995, column: 64, scope: !3675)
!3679 = !DILocation(line: 4995, column: 7, scope: !3675)
!3680 = !DILocation(line: 4996, column: 5, scope: !3675)
!3681 = !DILocation(line: 4998, column: 9, scope: !3655)
!3682 = !DILocation(line: 4998, column: 3, scope: !3655)
!3683 = !DILocation(line: 4999, column: 3, scope: !3655)
!3684 = !DILocation(line: 5000, column: 1, scope: !3655)
!3685 = distinct !DISubprogram(name: "VEC_edge_heap_alloc", scope: !343, file: !343, line: 152, type: !3686, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3688)
!3686 = !DISubroutineType(types: !3687)
!3687 = !{!2086, !680}
!3688 = !{!3689}
!3689 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3685, file: !343, line: 152, type: !680)
!3690 = !DILocation(line: 0, scope: !3685)
!3691 = !DILocation(line: 152, column: 1, scope: !3685)
!3692 = distinct !DISubprogram(name: "VEC_switch_update_heap_alloc", scope: !3, file: !3, line: 121, type: !3693, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3695)
!3693 = !DISubroutineType(types: !3694)
!3694 = !{!2091, !680}
!3695 = !{!3696}
!3696 = !DILocalVariable(name: "alloc_", arg: 1, scope: !3692, file: !3, line: 121, type: !680)
!3697 = !DILocation(line: 0, scope: !3692)
!3698 = !DILocation(line: 121, column: 1, scope: !3692)
!3699 = distinct !DISubprogram(name: "vrp_initialize", scope: !3, file: !3, line: 5308, type: !3071, scopeLine: 5309, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3700)
!3700 = !{!3701, !3702, !3706, !3710, !3713, !3717, !3733}
!3701 = !DILocalVariable(name: "bb", scope: !3699, file: !3, line: 5310, type: !1468)
!3702 = !DILocalVariable(name: "si", scope: !3703, file: !3, line: 5317, type: !2054)
!3703 = distinct !DILexicalBlock(scope: !3704, file: !3, line: 5316, column: 5)
!3704 = distinct !DILexicalBlock(scope: !3705, file: !3, line: 5315, column: 3)
!3705 = distinct !DILexicalBlock(scope: !3699, file: !3, line: 5315, column: 3)
!3706 = !DILocalVariable(name: "phi", scope: !3707, file: !3, line: 5321, type: !1017)
!3707 = distinct !DILexicalBlock(scope: !3708, file: !3, line: 5320, column: 2)
!3708 = distinct !DILexicalBlock(scope: !3709, file: !3, line: 5319, column: 7)
!3709 = distinct !DILexicalBlock(scope: !3703, file: !3, line: 5319, column: 7)
!3710 = !DILocalVariable(name: "lhs", scope: !3711, file: !3, line: 5324, type: !693)
!3711 = distinct !DILexicalBlock(scope: !3712, file: !3, line: 5323, column: 6)
!3712 = distinct !DILexicalBlock(scope: !3707, file: !3, line: 5322, column: 8)
!3713 = !DILocalVariable(name: "stmt", scope: !3714, file: !3, line: 5334, type: !1017)
!3714 = distinct !DILexicalBlock(scope: !3715, file: !3, line: 5333, column: 9)
!3715 = distinct !DILexicalBlock(scope: !3716, file: !3, line: 5332, column: 7)
!3716 = distinct !DILexicalBlock(scope: !3703, file: !3, line: 5332, column: 7)
!3717 = !DILocalVariable(name: "i", scope: !3718, file: !3, line: 5343, type: !3721)
!3718 = distinct !DILexicalBlock(scope: !3719, file: !3, line: 5342, column: 6)
!3719 = distinct !DILexicalBlock(scope: !3720, file: !3, line: 5341, column: 13)
!3720 = distinct !DILexicalBlock(scope: !3714, file: !3, line: 5339, column: 8)
!3721 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !581, line: 140, baseType: !3722)
!3722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !581, line: 131, size: 320, elements: !3723)
!3723 = !{!3724, !3725, !3726, !3728, !3730, !3731, !3732}
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !3722, file: !581, line: 133, baseType: !679, size: 8)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !3722, file: !581, line: 134, baseType: !580, size: 32, offset: 32)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !3722, file: !581, line: 135, baseType: !3727, size: 64, offset: 64)
!3727 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !581, line: 42, baseType: !1046)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !3722, file: !581, line: 136, baseType: !3729, size: 64, offset: 128)
!3729 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !581, line: 50, baseType: !1053)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !3722, file: !581, line: 137, baseType: !680, size: 32, offset: 192)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !3722, file: !581, line: 138, baseType: !680, size: 32, offset: 224)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !3722, file: !581, line: 139, baseType: !1017, size: 64, offset: 256)
!3733 = !DILocalVariable(name: "def", scope: !3718, file: !3, line: 5344, type: !693)
!3734 = !DILocation(line: 5312, column: 14, scope: !3699)
!3735 = !DILocation(line: 5312, column: 12, scope: !3699)
!3736 = !DILocation(line: 5313, column: 24, scope: !3699)
!3737 = !DILocation(line: 5313, column: 22, scope: !3699)
!3738 = !DILocation(line: 5315, column: 3, scope: !3705)
!3739 = !DILocation(line: 0, scope: !3703)
!3740 = !DILocation(line: 0, scope: !3709)
!3741 = !DILocation(line: 0, scope: !3716)
!3742 = !DILocation(line: 0, scope: !3718)
!3743 = !DILocation(line: 5315, column: 3, scope: !3704)
!3744 = !DILocation(line: 0, scope: !3705)
!3745 = !DILocation(line: 0, scope: !3699)
!3746 = !DILocation(line: 5317, column: 7, scope: !3703)
!3747 = !DILocation(line: 5319, column: 17, scope: !3709)
!3748 = !DILocation(line: 5319, column: 12, scope: !3709)
!3749 = !DILocation(line: 5319, column: 39, scope: !3708)
!3750 = !DILocation(line: 5319, column: 38, scope: !3708)
!3751 = !DILocation(line: 5319, column: 7, scope: !3709)
!3752 = !DILocation(line: 5321, column: 17, scope: !3707)
!3753 = !DILocation(line: 0, scope: !3707)
!3754 = !DILocation(line: 5322, column: 9, scope: !3712)
!3755 = !DILocation(line: 5322, column: 8, scope: !3707)
!3756 = !DILocation(line: 5324, column: 19, scope: !3711)
!3757 = !DILocation(line: 0, scope: !3711)
!3758 = !DILocation(line: 5325, column: 36, scope: !3711)
!3759 = !DILocation(line: 5325, column: 8, scope: !3711)
!3760 = !DILocation(line: 5326, column: 8, scope: !3711)
!3761 = !DILocation(line: 5327, column: 6, scope: !3711)
!3762 = !DILocation(line: 5329, column: 6, scope: !3712)
!3763 = !DILocation(line: 5319, column: 55, scope: !3708)
!3764 = !DILocation(line: 5319, column: 7, scope: !3708)
!3765 = distinct !{!3765, !3751, !3766}
!3766 = !DILocation(line: 5330, column: 2, scope: !3709)
!3767 = !DILocation(line: 5332, column: 17, scope: !3716)
!3768 = !DILocation(line: 5332, column: 12, scope: !3716)
!3769 = !DILocation(line: 5332, column: 37, scope: !3715)
!3770 = !DILocation(line: 5332, column: 36, scope: !3715)
!3771 = !DILocation(line: 5332, column: 7, scope: !3716)
!3772 = !DILocation(line: 5334, column: 18, scope: !3714)
!3773 = !DILocation(line: 0, scope: !3714)
!3774 = !DILocation(line: 5339, column: 8, scope: !3720)
!3775 = !DILocation(line: 5339, column: 8, scope: !3714)
!3776 = !DILocation(line: 5340, column: 6, scope: !3720)
!3777 = !DILocation(line: 5341, column: 14, scope: !3719)
!3778 = !DILocation(line: 5341, column: 13, scope: !3720)
!3779 = !DILocation(line: 5343, column: 8, scope: !3718)
!3780 = !DILocation(line: 5345, column: 8, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3718, file: !3, line: 5345, column: 8)
!3782 = !DILocation(line: 0, scope: !3781)
!3783 = !DILocation(line: 5345, column: 8, scope: !3784)
!3784 = distinct !DILexicalBlock(scope: !3781, file: !3, line: 5345, column: 8)
!3785 = !DILocation(line: 5346, column: 31, scope: !3784)
!3786 = !DILocation(line: 5346, column: 3, scope: !3784)
!3787 = distinct !{!3787, !3780, !3788}
!3788 = !DILocation(line: 5346, column: 52, scope: !3781)
!3789 = !DILocation(line: 5347, column: 8, scope: !3718)
!3790 = !DILocation(line: 5348, column: 6, scope: !3719)
!3791 = !DILocation(line: 5348, column: 6, scope: !3718)
!3792 = !DILocation(line: 5350, column: 6, scope: !3719)
!3793 = !DILocation(line: 5332, column: 53, scope: !3715)
!3794 = !DILocation(line: 5332, column: 7, scope: !3715)
!3795 = distinct !{!3795, !3771, !3796}
!3796 = !DILocation(line: 5351, column: 2, scope: !3716)
!3797 = !DILocation(line: 5352, column: 5, scope: !3704)
!3798 = !DILocation(line: 0, scope: !3704)
!3799 = distinct !{!3799, !3738, !3800}
!3800 = !DILocation(line: 5352, column: 5, scope: !3705)
!3801 = !DILocation(line: 5353, column: 1, scope: !3699)
!3802 = distinct !DISubprogram(name: "vrp_visit_stmt", scope: !3, file: !3, line: 6088, type: !3803, scopeLine: 6089, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3806)
!3803 = !DISubroutineType(types: !3804)
!3804 = !{!658, !1017, !3805, !1051}
!3805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !997, size: 64)
!3806 = !{!3807, !3808, !3809, !3810, !3811}
!3807 = !DILocalVariable(name: "stmt", arg: 1, scope: !3802, file: !3, line: 6088, type: !1017)
!3808 = !DILocalVariable(name: "taken_edge_p", arg: 2, scope: !3802, file: !3, line: 6088, type: !3805)
!3809 = !DILocalVariable(name: "output_p", arg: 3, scope: !3802, file: !3, line: 6088, type: !1051)
!3810 = !DILocalVariable(name: "def", scope: !3802, file: !3, line: 6090, type: !693)
!3811 = !DILocalVariable(name: "iter", scope: !3802, file: !3, line: 6091, type: !3721)
!3812 = !DILocation(line: 0, scope: !3802)
!3813 = !DILocation(line: 6091, column: 3, scope: !3802)
!3814 = !DILocation(line: 6093, column: 7, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3802, file: !3, line: 6093, column: 7)
!3816 = !DILocation(line: 6093, column: 17, scope: !3815)
!3817 = !DILocation(line: 6093, column: 21, scope: !3815)
!3818 = !DILocation(line: 6093, column: 32, scope: !3815)
!3819 = !DILocation(line: 6093, column: 7, scope: !3802)
!3820 = !DILocation(line: 6095, column: 7, scope: !3821)
!3821 = distinct !DILexicalBlock(scope: !3815, file: !3, line: 6094, column: 5)
!3822 = !DILocation(line: 6096, column: 26, scope: !3821)
!3823 = !DILocation(line: 6096, column: 46, scope: !3821)
!3824 = !DILocation(line: 6096, column: 7, scope: !3821)
!3825 = !DILocation(line: 6097, column: 16, scope: !3821)
!3826 = !DILocation(line: 6097, column: 7, scope: !3821)
!3827 = !DILocation(line: 6098, column: 5, scope: !3821)
!3828 = !DILocation(line: 6100, column: 8, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3802, file: !3, line: 6100, column: 7)
!3830 = !DILocation(line: 6100, column: 7, scope: !3802)
!3831 = !DILocation(line: 6101, column: 5, scope: !3829)
!3832 = !DILocation(line: 6102, column: 12, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3829, file: !3, line: 6102, column: 12)
!3834 = !DILocation(line: 6102, column: 36, scope: !3833)
!3835 = !DILocation(line: 6102, column: 39, scope: !3833)
!3836 = !DILocation(line: 6102, column: 12, scope: !3829)
!3837 = !DILocation(line: 6108, column: 12, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3839, file: !3, line: 6108, column: 11)
!3839 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 6103, column: 5)
!3840 = !DILocation(line: 6109, column: 5, scope: !3838)
!3841 = !DILocation(line: 6109, column: 8, scope: !3838)
!3842 = !DILocation(line: 6109, column: 34, scope: !3838)
!3843 = !DILocation(line: 6110, column: 5, scope: !3838)
!3844 = !DILocation(line: 6110, column: 8, scope: !3838)
!3845 = !DILocation(line: 6111, column: 4, scope: !3838)
!3846 = !DILocation(line: 6111, column: 8, scope: !3838)
!3847 = !DILocation(line: 6108, column: 11, scope: !3839)
!3848 = !DILocation(line: 6112, column: 9, scope: !3838)
!3849 = !DILocation(line: 6112, column: 2, scope: !3838)
!3850 = !DILocation(line: 6114, column: 12, scope: !3851)
!3851 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 6114, column: 12)
!3852 = !DILocation(line: 6114, column: 31, scope: !3851)
!3853 = !DILocation(line: 6114, column: 12, scope: !3833)
!3854 = !DILocation(line: 6115, column: 12, scope: !3851)
!3855 = !DILocation(line: 6115, column: 5, scope: !3851)
!3856 = !DILocation(line: 6116, column: 12, scope: !3857)
!3857 = distinct !DILexicalBlock(scope: !3851, file: !3, line: 6116, column: 12)
!3858 = !DILocation(line: 6116, column: 31, scope: !3857)
!3859 = !DILocation(line: 6116, column: 12, scope: !3851)
!3860 = !DILocation(line: 6117, column: 12, scope: !3857)
!3861 = !DILocation(line: 6117, column: 5, scope: !3857)
!3862 = !DILocation(line: 6121, column: 3, scope: !3863)
!3863 = distinct !DILexicalBlock(scope: !3802, file: !3, line: 6121, column: 3)
!3864 = !DILocation(line: 0, scope: !3863)
!3865 = !DILocation(line: 6121, column: 3, scope: !3866)
!3866 = distinct !DILexicalBlock(scope: !3863, file: !3, line: 6121, column: 3)
!3867 = !DILocation(line: 6122, column: 33, scope: !3866)
!3868 = !DILocation(line: 6122, column: 5, scope: !3866)
!3869 = distinct !{!3869, !3862, !3870}
!3870 = !DILocation(line: 6122, column: 54, scope: !3863)
!3871 = !DILocation(line: 6125, column: 1, scope: !3802)
!3872 = distinct !DISubprogram(name: "vrp_visit_phi_node", scope: !3, file: !3, line: 6279, type: !3873, scopeLine: 6280, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3875)
!3873 = !DISubroutineType(types: !3874)
!3874 = !{!658, !1017}
!3875 = !{!3876, !3877, !3878, !3879, !3880, !3881, !3882, !3883, !3884, !3888, !3891, !3892, !3897, !3898}
!3876 = !DILocalVariable(name: "phi", arg: 1, scope: !3872, file: !3, line: 6279, type: !1017)
!3877 = !DILocalVariable(name: "i", scope: !3872, file: !3, line: 6281, type: !1162)
!3878 = !DILocalVariable(name: "lhs", scope: !3872, file: !3, line: 6282, type: !693)
!3879 = !DILocalVariable(name: "lhs_vr", scope: !3872, file: !3, line: 6283, type: !687)
!3880 = !DILocalVariable(name: "vr_result", scope: !3872, file: !3, line: 6284, type: !688)
!3881 = !DILocalVariable(name: "edges", scope: !3872, file: !3, line: 6285, type: !680)
!3882 = !DILocalVariable(name: "old_edges", scope: !3872, file: !3, line: 6285, type: !680)
!3883 = !DILocalVariable(name: "l", scope: !3872, file: !3, line: 6286, type: !1232)
!3884 = !DILocalVariable(name: "e", scope: !3885, file: !3, line: 6299, type: !997)
!3885 = distinct !DILexicalBlock(scope: !3886, file: !3, line: 6298, column: 5)
!3886 = distinct !DILexicalBlock(scope: !3887, file: !3, line: 6297, column: 3)
!3887 = distinct !DILexicalBlock(scope: !3872, file: !3, line: 6297, column: 3)
!3888 = !DILocalVariable(name: "arg", scope: !3889, file: !3, line: 6311, type: !693)
!3889 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 6310, column: 2)
!3890 = distinct !DILexicalBlock(scope: !3885, file: !3, line: 6309, column: 11)
!3891 = !DILocalVariable(name: "vr_arg", scope: !3889, file: !3, line: 6312, type: !688)
!3892 = !DILocalVariable(name: "cmp_min", scope: !3893, file: !3, line: 6373, type: !680)
!3893 = distinct !DILexicalBlock(scope: !3894, file: !3, line: 6372, column: 2)
!3894 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 6371, column: 11)
!3895 = distinct !DILexicalBlock(scope: !3896, file: !3, line: 6370, column: 5)
!3896 = distinct !DILexicalBlock(scope: !3872, file: !3, line: 6368, column: 7)
!3897 = !DILocalVariable(name: "cmp_max", scope: !3893, file: !3, line: 6374, type: !680)
!3898 = !DILabel(scope: !3872, name: "varying", file: !3, line: 6434)
!3899 = !DILocation(line: 0, scope: !3872)
!3900 = !DILocation(line: 6282, column: 14, scope: !3872)
!3901 = !DILocation(line: 6283, column: 27, scope: !3872)
!3902 = !DILocation(line: 6284, column: 3, scope: !3872)
!3903 = !DILocation(line: 6284, column: 17, scope: !3872)
!3904 = !DILocation(line: 6288, column: 3, scope: !3872)
!3905 = !DILocation(line: 6290, column: 7, scope: !3906)
!3906 = distinct !DILexicalBlock(scope: !3872, file: !3, line: 6290, column: 7)
!3907 = !DILocation(line: 6290, column: 17, scope: !3906)
!3908 = !DILocation(line: 6290, column: 21, scope: !3906)
!3909 = !DILocation(line: 6290, column: 32, scope: !3906)
!3910 = !DILocation(line: 6290, column: 7, scope: !3872)
!3911 = !DILocation(line: 6292, column: 7, scope: !3912)
!3912 = distinct !DILexicalBlock(scope: !3906, file: !3, line: 6291, column: 5)
!3913 = !DILocation(line: 6293, column: 26, scope: !3912)
!3914 = !DILocation(line: 6293, column: 45, scope: !3912)
!3915 = !DILocation(line: 6293, column: 7, scope: !3912)
!3916 = !DILocation(line: 6294, column: 5, scope: !3912)
!3917 = !DILocation(line: 0, scope: !3889)
!3918 = !DILocation(line: 0, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 6321, column: 6)
!3920 = distinct !DILexicalBlock(scope: !3889, file: !3, line: 6316, column: 8)
!3921 = !DILocation(line: 0, scope: !3922)
!3922 = distinct !DILexicalBlock(scope: !3889, file: !3, line: 6345, column: 8)
!3923 = !DILocation(line: 6297, column: 8, scope: !3887)
!3924 = !DILocation(line: 0, scope: !3887)
!3925 = !DILocation(line: 6297, column: 19, scope: !3886)
!3926 = !DILocation(line: 6297, column: 17, scope: !3886)
!3927 = !DILocation(line: 6297, column: 3, scope: !3887)
!3928 = !DILocation(line: 6299, column: 16, scope: !3885)
!3929 = !DILocation(line: 0, scope: !3885)
!3930 = !DILocation(line: 6301, column: 11, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3885, file: !3, line: 6301, column: 11)
!3932 = !DILocation(line: 6301, column: 21, scope: !3931)
!3933 = !DILocation(line: 6301, column: 25, scope: !3931)
!3934 = !DILocation(line: 6301, column: 36, scope: !3931)
!3935 = !DILocation(line: 6301, column: 11, scope: !3885)
!3936 = !DILocation(line: 6305, column: 8, scope: !3937)
!3937 = distinct !DILexicalBlock(scope: !3931, file: !3, line: 6302, column: 2)
!3938 = !DILocation(line: 6305, column: 20, scope: !3937)
!3939 = !DILocation(line: 6305, column: 25, scope: !3937)
!3940 = !DILocation(line: 6305, column: 35, scope: !3937)
!3941 = !DILocation(line: 6305, column: 41, scope: !3937)
!3942 = !DILocation(line: 6306, column: 12, scope: !3937)
!3943 = !DILocation(line: 6306, column: 18, scope: !3937)
!3944 = !DILocation(line: 6306, column: 8, scope: !3937)
!3945 = !DILocation(line: 6303, column: 4, scope: !3937)
!3946 = !DILocation(line: 6307, column: 2, scope: !3937)
!3947 = !DILocation(line: 6309, column: 14, scope: !3890)
!3948 = !DILocation(line: 6309, column: 20, scope: !3890)
!3949 = !DILocation(line: 6309, column: 11, scope: !3885)
!3950 = !DILocation(line: 6311, column: 15, scope: !3889)
!3951 = !DILocation(line: 6312, column: 4, scope: !3889)
!3952 = !DILocation(line: 6314, column: 4, scope: !3889)
!3953 = !DILocation(line: 6316, column: 8, scope: !3920)
!3954 = !DILocation(line: 6316, column: 24, scope: !3920)
!3955 = !DILocation(line: 6316, column: 8, scope: !3889)
!3956 = !DILocation(line: 6318, column: 19, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !3920, file: !3, line: 6317, column: 6)
!3958 = !DILocation(line: 6318, column: 17, scope: !3957)
!3959 = !DILocation(line: 6319, column: 6, scope: !3957)
!3960 = !DILocation(line: 6322, column: 12, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3919, file: !3, line: 6322, column: 12)
!3962 = !DILocation(line: 6322, column: 12, scope: !3919)
!3963 = !DILocation(line: 6324, column: 11, scope: !3964)
!3964 = distinct !DILexicalBlock(scope: !3961, file: !3, line: 6323, column: 3)
!3965 = !DILocation(line: 6325, column: 5, scope: !3964)
!3966 = !DILocation(line: 6325, column: 25, scope: !3964)
!3967 = !DILocation(line: 6326, column: 3, scope: !3964)
!3968 = !DILocation(line: 6328, column: 20, scope: !3919)
!3969 = !DILocation(line: 6329, column: 19, scope: !3919)
!3970 = !DILocation(line: 6330, column: 19, scope: !3919)
!3971 = !DILocation(line: 6331, column: 21, scope: !3919)
!3972 = !DILocation(line: 6334, column: 8, scope: !3973)
!3973 = distinct !DILexicalBlock(scope: !3889, file: !3, line: 6334, column: 8)
!3974 = !DILocation(line: 6334, column: 18, scope: !3973)
!3975 = !DILocation(line: 6334, column: 22, scope: !3973)
!3976 = !DILocation(line: 6334, column: 33, scope: !3973)
!3977 = !DILocation(line: 6334, column: 8, scope: !3889)
!3978 = !DILocation(line: 6336, column: 8, scope: !3979)
!3979 = distinct !DILexicalBlock(scope: !3973, file: !3, line: 6335, column: 6)
!3980 = !DILocation(line: 6337, column: 28, scope: !3979)
!3981 = !DILocation(line: 6337, column: 44, scope: !3979)
!3982 = !DILocation(line: 6337, column: 8, scope: !3979)
!3983 = !DILocation(line: 6338, column: 17, scope: !3979)
!3984 = !DILocation(line: 6338, column: 8, scope: !3979)
!3985 = !DILocation(line: 6339, column: 26, scope: !3979)
!3986 = !DILocation(line: 6339, column: 8, scope: !3979)
!3987 = !DILocation(line: 6340, column: 17, scope: !3979)
!3988 = !DILocation(line: 6340, column: 8, scope: !3979)
!3989 = !DILocation(line: 6341, column: 6, scope: !3979)
!3990 = !DILocation(line: 6343, column: 4, scope: !3889)
!3991 = !DILocation(line: 6345, column: 18, scope: !3922)
!3992 = !DILocation(line: 6345, column: 23, scope: !3922)
!3993 = !DILocation(line: 0, scope: !3890)
!3994 = !DILocation(line: 6347, column: 2, scope: !3890)
!3995 = !DILocation(line: 6348, column: 5, scope: !3886)
!3996 = !DILocation(line: 6297, column: 47, scope: !3886)
!3997 = !DILocation(line: 6297, column: 3, scope: !3886)
!3998 = distinct !{!3998, !3927, !3999}
!3999 = !DILocation(line: 6348, column: 5, scope: !3887)
!4000 = !DILocation(line: 6352, column: 7, scope: !4001)
!4001 = distinct !DILexicalBlock(scope: !3872, file: !3, line: 6352, column: 7)
!4002 = !DILocation(line: 6353, column: 7, scope: !4001)
!4003 = !DILocation(line: 6353, column: 15, scope: !4001)
!4004 = !DILocation(line: 6353, column: 13, scope: !4001)
!4005 = !DILocation(line: 6354, column: 7, scope: !4001)
!4006 = !DILocation(line: 6354, column: 13, scope: !4001)
!4007 = !DILocation(line: 6354, column: 23, scope: !4001)
!4008 = !DILocation(line: 6354, column: 20, scope: !4001)
!4009 = !DILocation(line: 6352, column: 7, scope: !3872)
!4010 = !DILocation(line: 6355, column: 5, scope: !4001)
!4011 = !DILocation(line: 6357, column: 17, scope: !4012)
!4012 = distinct !DILexicalBlock(scope: !3872, file: !3, line: 6357, column: 7)
!4013 = !DILocation(line: 6357, column: 22, scope: !4012)
!4014 = !DILocation(line: 6357, column: 7, scope: !3872)
!4015 = !DILocation(line: 6360, column: 15, scope: !3872)
!4016 = !DILocation(line: 6360, column: 34, scope: !3872)
!4017 = !DILocation(line: 6361, column: 46, scope: !3872)
!4018 = !DILocation(line: 6368, column: 15, scope: !3896)
!4019 = !DILocation(line: 6368, column: 20, scope: !3896)
!4020 = !DILocation(line: 6368, column: 32, scope: !3896)
!4021 = !DILocation(line: 6368, column: 45, scope: !3896)
!4022 = !DILocation(line: 6368, column: 50, scope: !3896)
!4023 = !DILocation(line: 6369, column: 16, scope: !3896)
!4024 = !DILocation(line: 6369, column: 7, scope: !3896)
!4025 = !DILocation(line: 6371, column: 12, scope: !3894)
!4026 = !DILocation(line: 6371, column: 11, scope: !3895)
!4027 = !DILocation(line: 6373, column: 42, scope: !3893)
!4028 = !DILocation(line: 6373, column: 57, scope: !3893)
!4029 = !DILocation(line: 6373, column: 18, scope: !3893)
!4030 = !DILocation(line: 0, scope: !3893)
!4031 = !DILocation(line: 6374, column: 42, scope: !3893)
!4032 = !DILocation(line: 6374, column: 57, scope: !3893)
!4033 = !DILocation(line: 6374, column: 18, scope: !3893)
!4034 = !DILocation(line: 6381, column: 20, scope: !4035)
!4035 = distinct !DILexicalBlock(scope: !3893, file: !3, line: 6381, column: 8)
!4036 = !DILocation(line: 6386, column: 38, scope: !4037)
!4037 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 6386, column: 12)
!4038 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 6382, column: 6)
!4039 = !DILocation(line: 6386, column: 12, scope: !4037)
!4040 = !DILocation(line: 6387, column: 5, scope: !4037)
!4041 = !DILocation(line: 6387, column: 24, scope: !4037)
!4042 = !DILocation(line: 6388, column: 20, scope: !4037)
!4043 = !DILocation(line: 6387, column: 8, scope: !4037)
!4044 = !DILocation(line: 6388, column: 25, scope: !4037)
!4045 = !DILocation(line: 6386, column: 12, scope: !4038)
!4046 = !DILocation(line: 6391, column: 38, scope: !4047)
!4047 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 6391, column: 12)
!4048 = !DILocation(line: 6391, column: 13, scope: !4047)
!4049 = !DILocation(line: 6392, column: 5, scope: !4047)
!4050 = !DILocation(line: 6392, column: 9, scope: !4047)
!4051 = !DILocation(line: 6391, column: 12, scope: !4038)
!4052 = !DILocation(line: 6393, column: 19, scope: !4047)
!4053 = !DILocation(line: 6393, column: 17, scope: !4047)
!4054 = !DILocation(line: 6393, column: 3, scope: !4047)
!4055 = !DILocation(line: 6394, column: 45, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4047, file: !3, line: 6394, column: 17)
!4057 = !DILocation(line: 6394, column: 17, scope: !4056)
!4058 = !DILocation(line: 6394, column: 17, scope: !4047)
!4059 = !DILocation(line: 6396, column: 33, scope: !4056)
!4060 = !DILocation(line: 6396, column: 5, scope: !4056)
!4061 = !DILocation(line: 6395, column: 17, scope: !4056)
!4062 = !DILocation(line: 6403, column: 20, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !3893, file: !3, line: 6403, column: 8)
!4064 = !DILocation(line: 6408, column: 38, scope: !4065)
!4065 = distinct !DILexicalBlock(scope: !4066, file: !3, line: 6408, column: 12)
!4066 = distinct !DILexicalBlock(scope: !4063, file: !3, line: 6404, column: 6)
!4067 = !DILocation(line: 6408, column: 12, scope: !4065)
!4068 = !DILocation(line: 6409, column: 5, scope: !4065)
!4069 = !DILocation(line: 6409, column: 24, scope: !4065)
!4070 = !DILocation(line: 6410, column: 20, scope: !4065)
!4071 = !DILocation(line: 6409, column: 8, scope: !4065)
!4072 = !DILocation(line: 6410, column: 25, scope: !4065)
!4073 = !DILocation(line: 6408, column: 12, scope: !4066)
!4074 = !DILocation(line: 6413, column: 38, scope: !4075)
!4075 = distinct !DILexicalBlock(scope: !4066, file: !3, line: 6413, column: 12)
!4076 = !DILocation(line: 6413, column: 13, scope: !4075)
!4077 = !DILocation(line: 6414, column: 5, scope: !4075)
!4078 = !DILocation(line: 6414, column: 9, scope: !4075)
!4079 = !DILocation(line: 6413, column: 12, scope: !4066)
!4080 = !DILocation(line: 6415, column: 19, scope: !4075)
!4081 = !DILocation(line: 6415, column: 17, scope: !4075)
!4082 = !DILocation(line: 6415, column: 3, scope: !4075)
!4083 = !DILocation(line: 6416, column: 45, scope: !4084)
!4084 = distinct !DILexicalBlock(scope: !4075, file: !3, line: 6416, column: 17)
!4085 = !DILocation(line: 6416, column: 17, scope: !4084)
!4086 = !DILocation(line: 6416, column: 17, scope: !4075)
!4087 = !DILocation(line: 6418, column: 33, scope: !4084)
!4088 = !DILocation(line: 6418, column: 5, scope: !4084)
!4089 = !DILocation(line: 6417, column: 17, scope: !4084)
!4090 = !DILocation(line: 6427, column: 7, scope: !4091)
!4091 = distinct !DILexicalBlock(scope: !3872, file: !3, line: 6427, column: 7)
!4092 = !DILocation(line: 6434, column: 1, scope: !3872)
!4093 = !DILocation(line: 6435, column: 3, scope: !3872)
!4094 = !DILocation(line: 6436, column: 3, scope: !3872)
!4095 = !DILocation(line: 6437, column: 1, scope: !3872)
!4096 = distinct !DISubprogram(name: "vrp_finalize", scope: !3, file: !3, line: 7235, type: !3071, scopeLine: 7236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4097)
!4097 = !{!4098, !4099, !4100}
!4098 = !DILocalVariable(name: "i", scope: !4096, file: !3, line: 7237, type: !1162)
!4099 = !DILocalVariable(name: "single_val_range", scope: !4096, file: !3, line: 7238, type: !2109)
!4100 = !DILocalVariable(name: "do_value_subst_p", scope: !4096, file: !3, line: 7239, type: !679)
!4101 = !DILocation(line: 7241, column: 7, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 7241, column: 7)
!4103 = !DILocation(line: 7241, column: 7, scope: !4096)
!4104 = !DILocation(line: 7243, column: 7, scope: !4105)
!4105 = distinct !DILexicalBlock(scope: !4102, file: !3, line: 7242, column: 5)
!4106 = !DILocation(line: 7244, column: 30, scope: !4105)
!4107 = !DILocation(line: 7244, column: 7, scope: !4105)
!4108 = !DILocation(line: 7245, column: 16, scope: !4105)
!4109 = !DILocation(line: 7245, column: 7, scope: !4105)
!4110 = !DILocation(line: 7246, column: 5, scope: !4105)
!4111 = !DILocation(line: 7251, column: 22, scope: !4096)
!4112 = !DILocation(line: 0, scope: !4096)
!4113 = !DILocation(line: 7254, column: 8, scope: !4114)
!4114 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 7254, column: 3)
!4115 = !DILocation(line: 0, scope: !4114)
!4116 = !DILocation(line: 7254, column: 19, scope: !4117)
!4117 = distinct !DILexicalBlock(scope: !4114, file: !3, line: 7254, column: 3)
!4118 = !DILocation(line: 7254, column: 17, scope: !4117)
!4119 = !DILocation(line: 7254, column: 3, scope: !4114)
!4120 = !DILocation(line: 7255, column: 9, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4117, file: !3, line: 7255, column: 9)
!4122 = !DILocation(line: 7256, column: 2, scope: !4121)
!4123 = !DILocation(line: 7256, column: 18, scope: !4121)
!4124 = !DILocation(line: 7256, column: 23, scope: !4121)
!4125 = !DILocation(line: 7257, column: 2, scope: !4121)
!4126 = !DILocation(line: 7257, column: 18, scope: !4121)
!4127 = !DILocation(line: 7257, column: 38, scope: !4121)
!4128 = !DILocation(line: 7257, column: 22, scope: !4121)
!4129 = !DILocation(line: 7258, column: 2, scope: !4121)
!4130 = !DILocation(line: 7258, column: 5, scope: !4121)
!4131 = !DILocation(line: 7255, column: 9, scope: !4117)
!4132 = !DILocation(line: 7260, column: 30, scope: !4133)
!4133 = distinct !DILexicalBlock(scope: !4121, file: !3, line: 7259, column: 7)
!4134 = !DILocation(line: 7260, column: 43, scope: !4133)
!4135 = !DILocation(line: 7260, column: 22, scope: !4133)
!4136 = !DILocation(line: 7260, column: 28, scope: !4133)
!4137 = !DILocation(line: 7262, column: 7, scope: !4133)
!4138 = !DILocation(line: 7254, column: 35, scope: !4117)
!4139 = !DILocation(line: 7254, column: 3, scope: !4117)
!4140 = distinct !{!4140, !4119, !4141}
!4141 = !DILocation(line: 7262, column: 7, scope: !4114)
!4142 = !DILocation(line: 7264, column: 8, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 7264, column: 7)
!4144 = !DILocation(line: 7264, column: 7, scope: !4096)
!4145 = !DILocation(line: 7268, column: 7, scope: !4146)
!4146 = distinct !DILexicalBlock(scope: !4143, file: !3, line: 7265, column: 5)
!4147 = !DILocation(line: 7270, column: 5, scope: !4146)
!4148 = !DILocation(line: 7272, column: 3, scope: !4096)
!4149 = !DILocation(line: 7274, column: 7, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 7274, column: 7)
!4151 = !DILocation(line: 7274, column: 7, scope: !4096)
!4152 = !DILocation(line: 7275, column: 5, scope: !4150)
!4153 = !DILocation(line: 7279, column: 3, scope: !4096)
!4154 = !DILocation(line: 7282, column: 8, scope: !4155)
!4155 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 7282, column: 3)
!4156 = !DILocation(line: 0, scope: !4155)
!4157 = !DILocation(line: 7282, column: 19, scope: !4158)
!4158 = distinct !DILexicalBlock(scope: !4155, file: !3, line: 7282, column: 3)
!4159 = !DILocation(line: 7282, column: 17, scope: !4158)
!4160 = !DILocation(line: 7282, column: 3, scope: !4155)
!4161 = !DILocation(line: 7283, column: 9, scope: !4162)
!4162 = distinct !DILexicalBlock(scope: !4158, file: !3, line: 7283, column: 9)
!4163 = !DILocation(line: 7283, column: 9, scope: !4158)
!4164 = !DILocation(line: 7285, column: 2, scope: !4165)
!4165 = distinct !DILexicalBlock(scope: !4162, file: !3, line: 7284, column: 7)
!4166 = !DILocation(line: 7286, column: 8, scope: !4165)
!4167 = !DILocation(line: 7286, column: 2, scope: !4165)
!4168 = !DILocation(line: 7287, column: 7, scope: !4165)
!4169 = !DILocation(line: 7282, column: 35, scope: !4158)
!4170 = !DILocation(line: 7282, column: 3, scope: !4158)
!4171 = distinct !{!4171, !4160, !4172}
!4172 = !DILocation(line: 7287, column: 7, scope: !4155)
!4173 = !DILocation(line: 7289, column: 3, scope: !4096)
!4174 = !DILocation(line: 7290, column: 9, scope: !4096)
!4175 = !DILocation(line: 7290, column: 3, scope: !4096)
!4176 = !DILocation(line: 7291, column: 9, scope: !4096)
!4177 = !DILocation(line: 7291, column: 3, scope: !4096)
!4178 = !DILocation(line: 7295, column: 12, scope: !4096)
!4179 = !DILocation(line: 7296, column: 22, scope: !4096)
!4180 = !DILocation(line: 7297, column: 1, scope: !4096)
!4181 = distinct !DISubprogram(name: "remove_range_assertions", scope: !3, file: !3, line: 5226, type: !3071, scopeLine: 5227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4182)
!4182 = !{!4183, !4184, !4185, !4191, !4192, !4195, !4196, !4197, !4198}
!4183 = !DILocalVariable(name: "bb", scope: !4181, file: !3, line: 5228, type: !1468)
!4184 = !DILocalVariable(name: "si", scope: !4181, file: !3, line: 5229, type: !2054)
!4185 = !DILocalVariable(name: "stmt", scope: !4186, file: !3, line: 5237, type: !1017)
!4186 = distinct !DILexicalBlock(scope: !4187, file: !3, line: 5236, column: 7)
!4187 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 5235, column: 5)
!4188 = distinct !DILexicalBlock(scope: !4189, file: !3, line: 5235, column: 5)
!4189 = distinct !DILexicalBlock(scope: !4190, file: !3, line: 5234, column: 3)
!4190 = distinct !DILexicalBlock(scope: !4181, file: !3, line: 5234, column: 3)
!4191 = !DILocalVariable(name: "use_stmt", scope: !4186, file: !3, line: 5238, type: !1017)
!4192 = !DILocalVariable(name: "rhs", scope: !4193, file: !3, line: 5243, type: !693)
!4193 = distinct !DILexicalBlock(scope: !4194, file: !3, line: 5242, column: 4)
!4194 = distinct !DILexicalBlock(scope: !4186, file: !3, line: 5240, column: 6)
!4195 = !DILocalVariable(name: "var", scope: !4193, file: !3, line: 5244, type: !693)
!4196 = !DILocalVariable(name: "cond", scope: !4193, file: !3, line: 5245, type: !693)
!4197 = !DILocalVariable(name: "use_p", scope: !4193, file: !3, line: 5246, type: !2083)
!4198 = !DILocalVariable(name: "iter", scope: !4193, file: !3, line: 5247, type: !4199)
!4199 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !664, line: 249, baseType: !4200)
!4200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !664, line: 238, size: 448, elements: !4201)
!4201 = !{!4202, !4203, !4204, !4205}
!4202 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !4200, file: !664, line: 241, baseType: !2084, size: 64)
!4203 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !4200, file: !664, line: 243, baseType: !2084, size: 64, offset: 64)
!4204 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !4200, file: !664, line: 245, baseType: !2085, size: 256, offset: 128)
!4205 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !4200, file: !664, line: 248, baseType: !2084, size: 64, offset: 384)
!4206 = !DILocation(line: 5229, column: 3, scope: !4181)
!4207 = !DILocation(line: 5234, column: 3, scope: !4190)
!4208 = !DILocation(line: 0, scope: !4188)
!4209 = !DILocation(line: 0, scope: !4193)
!4210 = !DILocation(line: 5234, column: 3, scope: !4189)
!4211 = !DILocation(line: 0, scope: !4190)
!4212 = !DILocation(line: 0, scope: !4181)
!4213 = !DILocation(line: 5235, column: 15, scope: !4188)
!4214 = !DILocation(line: 5235, column: 10, scope: !4188)
!4215 = !DILocation(line: 5235, column: 35, scope: !4187)
!4216 = !DILocation(line: 5235, column: 34, scope: !4187)
!4217 = !DILocation(line: 5235, column: 5, scope: !4188)
!4218 = !DILocation(line: 5237, column: 16, scope: !4186)
!4219 = !DILocation(line: 0, scope: !4186)
!4220 = !DILocation(line: 5240, column: 6, scope: !4194)
!4221 = !DILocation(line: 5241, column: 6, scope: !4194)
!4222 = !DILocation(line: 5241, column: 9, scope: !4194)
!4223 = !DILocation(line: 5241, column: 39, scope: !4194)
!4224 = !DILocation(line: 5240, column: 6, scope: !4186)
!4225 = !DILocation(line: 5243, column: 17, scope: !4193)
!4226 = !DILocation(line: 5245, column: 24, scope: !4193)
!4227 = !DILocation(line: 5245, column: 18, scope: !4193)
!4228 = !DILocation(line: 5247, column: 6, scope: !4193)
!4229 = !DILocation(line: 5249, column: 6, scope: !4193)
!4230 = !DILocation(line: 5252, column: 12, scope: !4193)
!4231 = !DILocation(line: 5253, column: 6, scope: !4232)
!4232 = distinct !DILexicalBlock(scope: !4193, file: !3, line: 5253, column: 6)
!4233 = !DILocation(line: 0, scope: !4234)
!4234 = distinct !DILexicalBlock(scope: !4235, file: !3, line: 5256, column: 3)
!4235 = distinct !DILexicalBlock(scope: !4236, file: !3, line: 5255, column: 8)
!4236 = distinct !DILexicalBlock(scope: !4237, file: !3, line: 5255, column: 8)
!4237 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 5253, column: 6)
!4238 = !DILocation(line: 5253, column: 6, scope: !4237)
!4239 = !DILocation(line: 5255, column: 8, scope: !4236)
!4240 = !DILocation(line: 0, scope: !4236)
!4241 = !DILocation(line: 5255, column: 8, scope: !4235)
!4242 = !DILocation(line: 5257, column: 5, scope: !4234)
!4243 = !DILocation(line: 5258, column: 5, scope: !4234)
!4244 = distinct !{!4244, !4239, !4245}
!4245 = !DILocation(line: 5259, column: 3, scope: !4236)
!4246 = distinct !{!4246, !4231, !4247}
!4247 = !DILocation(line: 5259, column: 3, scope: !4232)
!4248 = !DILocation(line: 5262, column: 6, scope: !4193)
!4249 = !DILocation(line: 5263, column: 6, scope: !4193)
!4250 = !DILocation(line: 5264, column: 4, scope: !4194)
!4251 = !DILocation(line: 5264, column: 4, scope: !4193)
!4252 = !DILocation(line: 5266, column: 4, scope: !4194)
!4253 = !DILocation(line: 5235, column: 5, scope: !4187)
!4254 = distinct !{!4254, !4217, !4255}
!4255 = !DILocation(line: 5267, column: 7, scope: !4188)
!4256 = !DILocation(line: 0, scope: !4189)
!4257 = distinct !{!4257, !4207, !4258}
!4258 = !DILocation(line: 5267, column: 7, scope: !4190)
!4259 = !DILocation(line: 5268, column: 1, scope: !4181)
!4260 = distinct !DISubprogram(name: "finalize_jump_threads", scope: !3, file: !3, line: 7225, type: !3071, scopeLine: 7226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2242)
!4261 = !DILocation(line: 7227, column: 3, scope: !4260)
!4262 = !DILocation(line: 7228, column: 3, scope: !4260)
!4263 = !DILocation(line: 7229, column: 1, scope: !4260)
!4264 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !343, file: !343, line: 150, type: !4265, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4269)
!4265 = !DISubroutineType(types: !4266)
!4266 = !{!680, !4267, !7, !3805}
!4267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4268, size: 64)
!4268 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !990)
!4269 = !{!4270, !4271, !4272}
!4270 = !DILocalVariable(name: "vec_", arg: 1, scope: !4264, file: !343, line: 150, type: !4267)
!4271 = !DILocalVariable(name: "ix_", arg: 2, scope: !4264, file: !343, line: 150, type: !7)
!4272 = !DILocalVariable(name: "ptr", arg: 3, scope: !4264, file: !343, line: 150, type: !3805)
!4273 = !DILocation(line: 0, scope: !4264)
!4274 = !DILocation(line: 150, column: 1, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4264, file: !343, line: 150, column: 1)
!4276 = !DILocation(line: 150, column: 1, scope: !4264)
!4277 = !DILocation(line: 150, column: 1, scope: !4278)
!4278 = distinct !DILexicalBlock(scope: !4275, file: !343, line: 150, column: 1)
!4279 = !DILocation(line: 150, column: 1, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4275, file: !343, line: 150, column: 1)
!4281 = !DILocation(line: 0, scope: !4275)
!4282 = distinct !DISubprogram(name: "VEC_switch_update_base_iterate", scope: !3, file: !3, line: 120, type: !4283, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4287)
!4283 = !DISubroutineType(types: !4284)
!4284 = !{!680, !4285, !7, !4286}
!4285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2096, size: 64)
!4286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3174, size: 64)
!4287 = !{!4288, !4289, !4290}
!4288 = !DILocalVariable(name: "vec_", arg: 1, scope: !4282, file: !3, line: 120, type: !4285)
!4289 = !DILocalVariable(name: "ix_", arg: 2, scope: !4282, file: !3, line: 120, type: !7)
!4290 = !DILocalVariable(name: "ptr", arg: 3, scope: !4282, file: !3, line: 120, type: !4286)
!4291 = !DILocation(line: 0, scope: !4282)
!4292 = !DILocation(line: 120, column: 1, scope: !4293)
!4293 = distinct !DILexicalBlock(scope: !4282, file: !3, line: 120, column: 1)
!4294 = !DILocation(line: 120, column: 1, scope: !4282)
!4295 = !DILocation(line: 120, column: 1, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4293, file: !3, line: 120, column: 1)
!4297 = !DILocation(line: 120, column: 1, scope: !4298)
!4298 = distinct !DILexicalBlock(scope: !4293, file: !3, line: 120, column: 1)
!4299 = !DILocation(line: 0, scope: !4293)
!4300 = distinct !DISubprogram(name: "gimple_switch_set_num_labels", scope: !588, file: !588, line: 3170, type: !4301, scopeLine: 3171, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4303)
!4301 = !DISubroutineType(types: !4302)
!4302 = !{null, !1017, !7}
!4303 = !{!4304, !4305}
!4304 = !DILocalVariable(name: "g", arg: 1, scope: !4300, file: !588, line: 3170, type: !1017)
!4305 = !DILocalVariable(name: "nlabels", arg: 2, scope: !4300, file: !588, line: 3170, type: !7)
!4306 = !DILocation(line: 0, scope: !4300)
!4307 = !DILocation(line: 3173, column: 34, scope: !4300)
!4308 = !DILocation(line: 3173, column: 3, scope: !4300)
!4309 = !DILocation(line: 3174, column: 1, scope: !4300)
!4310 = distinct !DISubprogram(name: "gimple_switch_set_label", scope: !588, file: !588, line: 3222, type: !4311, scopeLine: 3223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4313)
!4311 = !DISubroutineType(types: !4312)
!4312 = !{null, !1017, !7, !693}
!4313 = !{!4314, !4315, !4316}
!4314 = !DILocalVariable(name: "gs", arg: 1, scope: !4310, file: !588, line: 3222, type: !1017)
!4315 = !DILocalVariable(name: "index", arg: 2, scope: !4310, file: !588, line: 3222, type: !7)
!4316 = !DILocalVariable(name: "label", arg: 3, scope: !4310, file: !588, line: 3222, type: !693)
!4317 = !DILocation(line: 0, scope: !4310)
!4318 = !DILocation(line: 3225, column: 3, scope: !4310)
!4319 = !DILocation(line: 3226, column: 3, scope: !4310)
!4320 = !DILocation(line: 3227, column: 3, scope: !4310)
!4321 = !DILocation(line: 3228, column: 1, scope: !4310)
!4322 = distinct !DISubprogram(name: "gimple_switch_default_label", scope: !588, file: !588, line: 3233, type: !4323, scopeLine: 3234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4326)
!4323 = !DISubroutineType(types: !4324)
!4324 = !{!693, !4325}
!4325 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !694, line: 60, baseType: !2076)
!4326 = !{!4327}
!4327 = !DILocalVariable(name: "gs", arg: 1, scope: !4322, file: !588, line: 3233, type: !4325)
!4328 = !DILocation(line: 0, scope: !4322)
!4329 = !DILocation(line: 3235, column: 10, scope: !4322)
!4330 = !DILocation(line: 3235, column: 3, scope: !4322)
!4331 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !343, file: !343, line: 150, type: !4332, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4334)
!4332 = !DISubroutineType(types: !4333)
!4333 = !{!7, !4267}
!4334 = !{!4335}
!4335 = !DILocalVariable(name: "vec_", arg: 1, scope: !4331, file: !343, line: 150, type: !4267)
!4336 = !DILocation(line: 0, scope: !4331)
!4337 = !DILocation(line: 150, column: 1, scope: !4331)
!4338 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !343, file: !343, line: 152, type: !4339, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4342)
!4339 = !DISubroutineType(types: !4340)
!4340 = !{null, !4341}
!4341 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2086, size: 64)
!4342 = !{!4343}
!4343 = !DILocalVariable(name: "vec_", arg: 1, scope: !4338, file: !343, line: 152, type: !4341)
!4344 = !DILocation(line: 0, scope: !4338)
!4345 = !DILocation(line: 152, column: 1, scope: !4346)
!4346 = distinct !DILexicalBlock(scope: !4338, file: !343, line: 152, column: 1)
!4347 = !DILocation(line: 152, column: 1, scope: !4338)
!4348 = distinct !DISubprogram(name: "VEC_switch_update_heap_free", scope: !3, file: !3, line: 121, type: !4349, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4352)
!4349 = !DISubroutineType(types: !4350)
!4350 = !{null, !4351}
!4351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2091, size: 64)
!4352 = !{!4353}
!4353 = !DILocalVariable(name: "vec_", arg: 1, scope: !4348, file: !3, line: 121, type: !4351)
!4354 = !DILocation(line: 0, scope: !4348)
!4355 = !DILocation(line: 121, column: 1, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4348, file: !3, line: 121, column: 1)
!4357 = !DILocation(line: 121, column: 1, scope: !4348)
!4358 = distinct !DISubprogram(name: "find_assert_locations", scope: !3, file: !3, line: 4766, type: !2146, scopeLine: 4767, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4359)
!4359 = !{!4360, !4361, !4362, !4363, !4364, !4365, !4366, !4370, !4371, !4378, !4381}
!4360 = !DILocalVariable(name: "rpo", scope: !4358, file: !3, line: 4768, type: !2064)
!4361 = !DILocalVariable(name: "bb_rpo", scope: !4358, file: !3, line: 4769, type: !2064)
!4362 = !DILocalVariable(name: "last_rpo", scope: !4358, file: !3, line: 4770, type: !2064)
!4363 = !DILocalVariable(name: "rpo_cnt", scope: !4358, file: !3, line: 4771, type: !680)
!4364 = !DILocalVariable(name: "i", scope: !4358, file: !3, line: 4771, type: !680)
!4365 = !DILocalVariable(name: "need_asserts", scope: !4358, file: !3, line: 4772, type: !679)
!4366 = !DILocalVariable(name: "bb", scope: !4367, file: !3, line: 4782, type: !1468)
!4367 = distinct !DILexicalBlock(scope: !4368, file: !3, line: 4781, column: 5)
!4368 = distinct !DILexicalBlock(scope: !4369, file: !3, line: 4780, column: 3)
!4369 = distinct !DILexicalBlock(scope: !4358, file: !3, line: 4780, column: 3)
!4370 = !DILocalVariable(name: "e", scope: !4367, file: !3, line: 4783, type: !997)
!4371 = !DILocalVariable(name: "ei", scope: !4367, file: !3, line: 4784, type: !4372)
!4372 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !343, line: 682, baseType: !4373)
!4373 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 679, size: 128, elements: !4374)
!4374 = !{!4375, !4376}
!4375 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4373, file: !343, line: 680, baseType: !7, size: 32)
!4376 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4373, file: !343, line: 681, baseType: !4377, size: 64, offset: 64)
!4377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !985, size: 64)
!4378 = !DILocalVariable(name: "pred_rpo", scope: !4379, file: !3, line: 4799, type: !680)
!4379 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 4798, column: 2)
!4380 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 4797, column: 11)
!4381 = !DILocalVariable(name: "pred", scope: !4382, file: !3, line: 4802, type: !680)
!4382 = distinct !DILexicalBlock(scope: !4383, file: !3, line: 4801, column: 6)
!4383 = distinct !DILexicalBlock(scope: !4384, file: !3, line: 4800, column: 4)
!4384 = distinct !DILexicalBlock(scope: !4379, file: !3, line: 4800, column: 4)
!4385 = !DILocation(line: 4768, column: 14, scope: !4358)
!4386 = !DILocation(line: 0, scope: !4358)
!4387 = !DILocation(line: 4769, column: 17, scope: !4358)
!4388 = !DILocation(line: 4770, column: 19, scope: !4358)
!4389 = !DILocation(line: 4774, column: 10, scope: !4358)
!4390 = !DILocation(line: 4774, column: 8, scope: !4358)
!4391 = !DILocation(line: 4775, column: 13, scope: !4358)
!4392 = !DILocation(line: 4776, column: 8, scope: !4393)
!4393 = distinct !DILexicalBlock(scope: !4358, file: !3, line: 4776, column: 3)
!4394 = !DILocation(line: 0, scope: !4393)
!4395 = !DILocation(line: 4776, column: 17, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 4776, column: 3)
!4397 = !DILocation(line: 4776, column: 3, scope: !4393)
!4398 = !DILocation(line: 4777, column: 12, scope: !4396)
!4399 = !DILocation(line: 4777, column: 5, scope: !4396)
!4400 = !DILocation(line: 4777, column: 20, scope: !4396)
!4401 = !DILocation(line: 4776, column: 28, scope: !4396)
!4402 = !DILocation(line: 4776, column: 3, scope: !4396)
!4403 = distinct !{!4403, !4397, !4404}
!4404 = !DILocation(line: 4777, column: 22, scope: !4393)
!4405 = !DILocation(line: 0, scope: !4367)
!4406 = !DILocation(line: 0, scope: !4384)
!4407 = !DILocation(line: 0, scope: !4383)
!4408 = !DILocation(line: 0, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 4829, column: 7)
!4410 = !DILocation(line: 4780, column: 8, scope: !4369)
!4411 = !DILocation(line: 0, scope: !4369)
!4412 = !DILocation(line: 4780, column: 25, scope: !4368)
!4413 = !DILocation(line: 4780, column: 3, scope: !4369)
!4414 = !DILocation(line: 4782, column: 24, scope: !4367)
!4415 = !DILocation(line: 4783, column: 7, scope: !4367)
!4416 = !DILocation(line: 4784, column: 7, scope: !4367)
!4417 = !DILocation(line: 4786, column: 12, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4367, file: !3, line: 4786, column: 11)
!4419 = !DILocation(line: 4786, column: 17, scope: !4418)
!4420 = !DILocation(line: 4786, column: 11, scope: !4367)
!4421 = !DILocation(line: 4788, column: 34, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !4418, file: !3, line: 4787, column: 2)
!4423 = !DILocation(line: 4788, column: 19, scope: !4422)
!4424 = !DILocation(line: 4788, column: 4, scope: !4422)
!4425 = !DILocation(line: 4788, column: 9, scope: !4422)
!4426 = !DILocation(line: 4788, column: 17, scope: !4422)
!4427 = !DILocation(line: 4789, column: 18, scope: !4422)
!4428 = !DILocation(line: 4789, column: 23, scope: !4422)
!4429 = !DILocation(line: 4789, column: 4, scope: !4422)
!4430 = !DILocation(line: 4794, column: 52, scope: !4367)
!4431 = !DILocation(line: 4794, column: 57, scope: !4367)
!4432 = !DILocation(line: 4790, column: 2, scope: !4422)
!4433 = !DILocation(line: 4794, column: 23, scope: !4367)
!4434 = !DILocation(line: 4794, column: 20, scope: !4367)
!4435 = !DILocation(line: 4797, column: 29, scope: !4380)
!4436 = !DILocation(line: 4797, column: 34, scope: !4380)
!4437 = !DILocation(line: 4797, column: 12, scope: !4380)
!4438 = !DILocation(line: 4797, column: 11, scope: !4367)
!4439 = !DILocation(line: 0, scope: !4379)
!4440 = !DILocation(line: 4800, column: 4, scope: !4384)
!4441 = !DILocation(line: 4799, column: 8, scope: !4379)
!4442 = !DILocation(line: 4800, column: 4, scope: !4383)
!4443 = !DILocation(line: 4802, column: 19, scope: !4382)
!4444 = !DILocation(line: 0, scope: !4382)
!4445 = !DILocation(line: 4803, column: 15, scope: !4446)
!4446 = distinct !DILexicalBlock(scope: !4382, file: !3, line: 4803, column: 12)
!4447 = !DILocation(line: 4803, column: 21, scope: !4446)
!4448 = !DILocation(line: 4803, column: 12, scope: !4382)
!4449 = !DILocation(line: 4802, column: 22, scope: !4382)
!4450 = !DILocation(line: 4802, column: 27, scope: !4382)
!4451 = !DILocation(line: 4806, column: 13, scope: !4452)
!4452 = distinct !DILexicalBlock(scope: !4382, file: !3, line: 4806, column: 12)
!4453 = !DILocation(line: 4806, column: 12, scope: !4382)
!4454 = !DILocation(line: 4808, column: 33, scope: !4455)
!4455 = distinct !DILexicalBlock(scope: !4452, file: !3, line: 4807, column: 3)
!4456 = !DILocation(line: 4808, column: 18, scope: !4455)
!4457 = !DILocation(line: 4808, column: 5, scope: !4455)
!4458 = !DILocation(line: 4808, column: 16, scope: !4455)
!4459 = !DILocation(line: 4809, column: 19, scope: !4455)
!4460 = !DILocation(line: 4809, column: 5, scope: !4455)
!4461 = !DILocation(line: 4811, column: 24, scope: !4382)
!4462 = !DILocation(line: 4810, column: 3, scope: !4455)
!4463 = !DILocation(line: 4811, column: 36, scope: !4382)
!4464 = !DILocation(line: 4811, column: 48, scope: !4382)
!4465 = !DILocation(line: 4811, column: 53, scope: !4382)
!4466 = !DILocation(line: 4811, column: 8, scope: !4382)
!4467 = !DILocation(line: 4813, column: 12, scope: !4468)
!4468 = distinct !DILexicalBlock(scope: !4382, file: !3, line: 4813, column: 12)
!4469 = !DILocation(line: 4813, column: 25, scope: !4468)
!4470 = !DILocation(line: 4813, column: 12, scope: !4382)
!4471 = !DILocation(line: 4814, column: 3, scope: !4468)
!4472 = distinct !{!4472, !4440, !4473}
!4473 = !DILocation(line: 4815, column: 6, scope: !4384)
!4474 = !DILocation(line: 4819, column: 13, scope: !4379)
!4475 = !DILocation(line: 4819, column: 4, scope: !4379)
!4476 = !DILocation(line: 4819, column: 21, scope: !4379)
!4477 = !DILocation(line: 4820, column: 2, scope: !4379)
!4478 = !DILocation(line: 4823, column: 4, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 4822, column: 2)
!4480 = !DILocation(line: 4824, column: 4, scope: !4479)
!4481 = !DILocation(line: 4824, column: 9, scope: !4479)
!4482 = !DILocation(line: 4824, column: 17, scope: !4479)
!4483 = !DILocation(line: 4829, column: 7, scope: !4409)
!4484 = !DILocation(line: 4829, column: 7, scope: !4485)
!4485 = distinct !DILexicalBlock(scope: !4409, file: !3, line: 4829, column: 7)
!4486 = !DILocation(line: 4830, column: 15, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4485, file: !3, line: 4830, column: 6)
!4488 = !DILocation(line: 4830, column: 18, scope: !4487)
!4489 = !DILocation(line: 4830, column: 24, scope: !4487)
!4490 = !DILocation(line: 4830, column: 6, scope: !4487)
!4491 = !DILocation(line: 4830, column: 31, scope: !4487)
!4492 = !DILocation(line: 4831, column: 6, scope: !4487)
!4493 = !DILocation(line: 4831, column: 9, scope: !4487)
!4494 = !DILocation(line: 4830, column: 6, scope: !4485)
!4495 = !DILocation(line: 4833, column: 6, scope: !4496)
!4496 = distinct !DILexicalBlock(scope: !4487, file: !3, line: 4832, column: 4)
!4497 = !DILocation(line: 4834, column: 6, scope: !4496)
!4498 = !DILocation(line: 4834, column: 11, scope: !4496)
!4499 = !DILocation(line: 4834, column: 14, scope: !4496)
!4500 = !DILocation(line: 4834, column: 20, scope: !4496)
!4501 = !DILocation(line: 4834, column: 27, scope: !4496)
!4502 = !DILocation(line: 4835, column: 4, scope: !4496)
!4503 = distinct !{!4503, !4483, !4504}
!4504 = !DILocation(line: 4835, column: 4, scope: !4409)
!4505 = !DILocation(line: 4836, column: 5, scope: !4368)
!4506 = !DILocation(line: 4780, column: 3, scope: !4368)
!4507 = distinct !{!4507, !4413, !4508}
!4508 = !DILocation(line: 4836, column: 5, scope: !4369)
!4509 = !DILocation(line: 4838, column: 3, scope: !4358)
!4510 = !DILocation(line: 4839, column: 3, scope: !4358)
!4511 = !DILocation(line: 4840, column: 3, scope: !4358)
!4512 = !DILocation(line: 4841, column: 8, scope: !4513)
!4513 = distinct !DILexicalBlock(scope: !4358, file: !3, line: 4841, column: 3)
!4514 = !DILocation(line: 0, scope: !4513)
!4515 = !DILocation(line: 4841, column: 19, scope: !4516)
!4516 = distinct !DILexicalBlock(scope: !4513, file: !3, line: 4841, column: 3)
!4517 = !DILocation(line: 4841, column: 36, scope: !4516)
!4518 = !DILocation(line: 4841, column: 17, scope: !4516)
!4519 = !DILocation(line: 4841, column: 3, scope: !4513)
!4520 = !DILocation(line: 4842, column: 9, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4516, file: !3, line: 4842, column: 9)
!4522 = !DILocation(line: 4842, column: 9, scope: !4516)
!4523 = !DILocation(line: 4843, column: 7, scope: !4521)
!4524 = !DILocation(line: 4841, column: 56, scope: !4516)
!4525 = !DILocation(line: 4841, column: 3, scope: !4516)
!4526 = distinct !{!4526, !4519, !4527}
!4527 = !DILocation(line: 4843, column: 7, scope: !4513)
!4528 = !DILocation(line: 4844, column: 3, scope: !4358)
!4529 = !DILocation(line: 4846, column: 3, scope: !4358)
!4530 = distinct !DISubprogram(name: "process_assert_insertions", scope: !3, file: !3, line: 4913, type: !3071, scopeLine: 4914, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4531)
!4531 = !{!4532, !4533, !4534, !4535, !4536, !4540}
!4532 = !DILocalVariable(name: "i", scope: !4530, file: !3, line: 4915, type: !7)
!4533 = !DILocalVariable(name: "bi", scope: !4530, file: !3, line: 4916, type: !2190)
!4534 = !DILocalVariable(name: "update_edges_p", scope: !4530, file: !3, line: 4917, type: !679)
!4535 = !DILocalVariable(name: "num_asserts", scope: !4530, file: !3, line: 4918, type: !680)
!4536 = !DILocalVariable(name: "loc", scope: !4537, file: !3, line: 4925, type: !2047)
!4537 = distinct !DILexicalBlock(scope: !4538, file: !3, line: 4924, column: 5)
!4538 = distinct !DILexicalBlock(scope: !4539, file: !3, line: 4923, column: 3)
!4539 = distinct !DILexicalBlock(scope: !4530, file: !3, line: 4923, column: 3)
!4540 = !DILocalVariable(name: "next", scope: !4541, file: !3, line: 4930, type: !2047)
!4541 = distinct !DILexicalBlock(scope: !4537, file: !3, line: 4929, column: 2)
!4542 = !DILocation(line: 4915, column: 3, scope: !4530)
!4543 = !DILocation(line: 4916, column: 3, scope: !4530)
!4544 = !DILocation(line: 0, scope: !4530)
!4545 = !DILocation(line: 4920, column: 7, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4530, file: !3, line: 4920, column: 7)
!4547 = !DILocation(line: 4920, column: 17, scope: !4546)
!4548 = !DILocation(line: 4920, column: 21, scope: !4546)
!4549 = !DILocation(line: 4920, column: 32, scope: !4546)
!4550 = !DILocation(line: 4920, column: 7, scope: !4530)
!4551 = !DILocation(line: 4921, column: 5, scope: !4546)
!4552 = !DILocation(line: 4923, column: 3, scope: !4539)
!4553 = !DILocation(line: 4918, column: 7, scope: !4530)
!4554 = !DILocation(line: 4917, column: 8, scope: !4530)
!4555 = !DILocation(line: 4923, column: 3, scope: !4538)
!4556 = !DILocation(line: 4925, column: 28, scope: !4537)
!4557 = !DILocation(line: 4925, column: 40, scope: !4537)
!4558 = !DILocation(line: 0, scope: !4537)
!4559 = !DILocation(line: 4926, column: 7, scope: !4537)
!4560 = !DILocation(line: 4928, column: 7, scope: !4537)
!4561 = !DILocation(line: 4930, column: 31, scope: !4541)
!4562 = !DILocation(line: 0, scope: !4541)
!4563 = !DILocation(line: 4931, column: 53, scope: !4541)
!4564 = !DILocation(line: 4931, column: 22, scope: !4541)
!4565 = !DILocation(line: 4931, column: 19, scope: !4541)
!4566 = !DILocation(line: 4932, column: 10, scope: !4541)
!4567 = !DILocation(line: 4932, column: 4, scope: !4541)
!4568 = !DILocation(line: 4934, column: 15, scope: !4541)
!4569 = distinct !{!4569, !4560, !4570}
!4570 = !DILocation(line: 4935, column: 2, scope: !4537)
!4571 = distinct !{!4571, !4552, !4572}
!4572 = !DILocation(line: 4936, column: 5, scope: !4539)
!4573 = !DILocation(line: 4938, column: 7, scope: !4574)
!4574 = distinct !DILexicalBlock(scope: !4530, file: !3, line: 4938, column: 7)
!4575 = !DILocation(line: 4938, column: 7, scope: !4530)
!4576 = !DILocation(line: 4939, column: 5, scope: !4574)
!4577 = !DILocation(line: 4941, column: 29, scope: !4530)
!4578 = !DILocation(line: 4941, column: 3, scope: !4530)
!4579 = !DILocation(line: 4943, column: 1, scope: !4530)
!4580 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !343, file: !343, line: 281, type: !4581, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4585)
!4581 = !DISubroutineType(types: !4582)
!4582 = !{!1468, !4583, !7}
!4583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4584, size: 64)
!4584 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1476)
!4585 = !{!4586, !4587}
!4586 = !DILocalVariable(name: "vec_", arg: 1, scope: !4580, file: !343, line: 281, type: !4583)
!4587 = !DILocalVariable(name: "ix_", arg: 2, scope: !4580, file: !343, line: 281, type: !7)
!4588 = !DILocation(line: 0, scope: !4580)
!4589 = !DILocation(line: 281, column: 1, scope: !4580)
!4590 = distinct !DISubprogram(name: "find_assert_locations_1", scope: !3, file: !3, line: 4645, type: !4591, scopeLine: 4646, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4593)
!4591 = !DISubroutineType(types: !4592)
!4592 = !{!679, !1468, !2066}
!4593 = !{!4594, !4595, !4596, !4597, !4598, !4599, !4600, !4604, !4605, !4606, !4610, !4611, !4616, !4617, !4621, !4622}
!4594 = !DILocalVariable(name: "bb", arg: 1, scope: !4590, file: !3, line: 4645, type: !1468)
!4595 = !DILocalVariable(name: "live", arg: 2, scope: !4590, file: !3, line: 4645, type: !2066)
!4596 = !DILocalVariable(name: "si", scope: !4590, file: !3, line: 4647, type: !2054)
!4597 = !DILocalVariable(name: "last", scope: !4590, file: !3, line: 4648, type: !1017)
!4598 = !DILocalVariable(name: "phi", scope: !4590, file: !3, line: 4649, type: !1017)
!4599 = !DILocalVariable(name: "need_assert", scope: !4590, file: !3, line: 4650, type: !679)
!4600 = !DILocalVariable(name: "stmt", scope: !4601, file: !3, line: 4674, type: !1017)
!4601 = distinct !DILexicalBlock(scope: !4602, file: !3, line: 4673, column: 5)
!4602 = distinct !DILexicalBlock(scope: !4603, file: !3, line: 4672, column: 3)
!4603 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 4672, column: 3)
!4604 = !DILocalVariable(name: "op", scope: !4601, file: !3, line: 4675, type: !693)
!4605 = !DILocalVariable(name: "i", scope: !4601, file: !3, line: 4676, type: !3721)
!4606 = !DILocalVariable(name: "value", scope: !4607, file: !3, line: 4686, type: !693)
!4607 = distinct !DILexicalBlock(scope: !4608, file: !3, line: 4685, column: 2)
!4608 = distinct !DILexicalBlock(scope: !4609, file: !3, line: 4684, column: 7)
!4609 = distinct !DILexicalBlock(scope: !4601, file: !3, line: 4684, column: 7)
!4610 = !DILocalVariable(name: "comp_code", scope: !4607, file: !3, line: 4687, type: !134)
!4611 = !DILocalVariable(name: "t", scope: !4612, file: !3, line: 4705, type: !693)
!4612 = distinct !DILexicalBlock(scope: !4613, file: !3, line: 4704, column: 3)
!4613 = distinct !DILexicalBlock(scope: !4614, file: !3, line: 4703, column: 12)
!4614 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 4696, column: 6)
!4615 = distinct !DILexicalBlock(scope: !4607, file: !3, line: 4695, column: 8)
!4616 = !DILocalVariable(name: "def_stmt", scope: !4612, file: !3, line: 4706, type: !1017)
!4617 = !DILocalVariable(name: "arg_p", scope: !4618, file: !3, line: 4746, type: !2083)
!4618 = distinct !DILexicalBlock(scope: !4619, file: !3, line: 4745, column: 5)
!4619 = distinct !DILexicalBlock(scope: !4620, file: !3, line: 4744, column: 3)
!4620 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 4744, column: 3)
!4621 = !DILocalVariable(name: "i", scope: !4618, file: !3, line: 4747, type: !3721)
!4622 = !DILocalVariable(name: "arg", scope: !4623, file: !3, line: 4752, type: !693)
!4623 = distinct !DILexicalBlock(scope: !4624, file: !3, line: 4751, column: 2)
!4624 = distinct !DILexicalBlock(scope: !4625, file: !3, line: 4750, column: 7)
!4625 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 4750, column: 7)
!4626 = !DILocation(line: 0, scope: !4590)
!4627 = !DILocation(line: 4647, column: 3, scope: !4590)
!4628 = !DILocation(line: 4653, column: 10, scope: !4590)
!4629 = !DILocation(line: 4657, column: 7, scope: !4630)
!4630 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 4657, column: 7)
!4631 = !DILocation(line: 4658, column: 7, scope: !4630)
!4632 = !DILocation(line: 4658, column: 10, scope: !4630)
!4633 = !DILocation(line: 4658, column: 29, scope: !4630)
!4634 = !DILocation(line: 4659, column: 7, scope: !4630)
!4635 = !DILocation(line: 4659, column: 11, scope: !4630)
!4636 = !DILocation(line: 4660, column: 7, scope: !4630)
!4637 = !DILocation(line: 4660, column: 11, scope: !4630)
!4638 = !DILocation(line: 4657, column: 7, scope: !4590)
!4639 = !DILocation(line: 4661, column: 20, scope: !4630)
!4640 = !DILocation(line: 4661, column: 5, scope: !4630)
!4641 = !DILocation(line: 4666, column: 7, scope: !4642)
!4642 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 4665, column: 7)
!4643 = !DILocation(line: 4666, column: 10, scope: !4642)
!4644 = !DILocation(line: 4666, column: 29, scope: !4642)
!4645 = !DILocation(line: 4667, column: 7, scope: !4642)
!4646 = !DILocation(line: 4667, column: 11, scope: !4642)
!4647 = !DILocation(line: 4665, column: 7, scope: !4590)
!4648 = !DILocation(line: 4668, column: 20, scope: !4642)
!4649 = !DILocation(line: 4668, column: 17, scope: !4642)
!4650 = !DILocation(line: 4668, column: 5, scope: !4642)
!4651 = !DILocation(line: 4672, column: 13, scope: !4603)
!4652 = !DILocation(line: 0, scope: !4601)
!4653 = !DILocation(line: 0, scope: !4607)
!4654 = !DILocation(line: 4672, column: 8, scope: !4603)
!4655 = !DILocation(line: 4652, column: 15, scope: !4590)
!4656 = !DILocation(line: 4672, column: 33, scope: !4602)
!4657 = !DILocation(line: 4672, column: 32, scope: !4602)
!4658 = !DILocation(line: 4672, column: 3, scope: !4603)
!4659 = !DILocation(line: 4676, column: 7, scope: !4601)
!4660 = !DILocation(line: 4678, column: 14, scope: !4601)
!4661 = !DILocation(line: 4680, column: 11, scope: !4662)
!4662 = distinct !DILexicalBlock(scope: !4601, file: !3, line: 4680, column: 11)
!4663 = !DILocation(line: 4680, column: 11, scope: !4601)
!4664 = !DILocation(line: 4684, column: 7, scope: !4609)
!4665 = !DILocation(line: 0, scope: !4609)
!4666 = !DILocation(line: 4684, column: 7, scope: !4608)
!4667 = !DILocation(line: 4686, column: 4, scope: !4607)
!4668 = !DILocation(line: 4687, column: 4, scope: !4607)
!4669 = !DILocation(line: 4690, column: 19, scope: !4607)
!4670 = !DILocation(line: 4690, column: 4, scope: !4607)
!4671 = !DILocation(line: 4695, column: 8, scope: !4615)
!4672 = !DILocation(line: 4695, column: 8, scope: !4607)
!4673 = !DILocation(line: 4703, column: 12, scope: !4613)
!4674 = !DILocation(line: 4703, column: 22, scope: !4613)
!4675 = !DILocation(line: 4703, column: 33, scope: !4613)
!4676 = !DILocation(line: 4703, column: 51, scope: !4613)
!4677 = !DILocation(line: 4703, column: 36, scope: !4613)
!4678 = !DILocation(line: 4703, column: 12, scope: !4614)
!4679 = !DILocation(line: 0, scope: !4612)
!4680 = !DILocation(line: 4706, column: 23, scope: !4612)
!4681 = !DILocation(line: 4708, column: 5, scope: !4612)
!4682 = !DILocation(line: 4708, column: 12, scope: !4612)
!4683 = !DILocation(line: 4709, column: 5, scope: !4612)
!4684 = !DILocation(line: 4709, column: 8, scope: !4612)
!4685 = !DILocation(line: 4709, column: 43, scope: !4612)
!4686 = !DILocation(line: 4710, column: 5, scope: !4612)
!4687 = !DILocation(line: 4710, column: 8, scope: !4612)
!4688 = !DILocation(line: 4711, column: 41, scope: !4612)
!4689 = !DILocation(line: 4712, column: 5, scope: !4612)
!4690 = !DILocation(line: 4712, column: 8, scope: !4612)
!4691 = !DILocation(line: 4715, column: 13, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4612, file: !3, line: 4714, column: 7)
!4693 = !DILocation(line: 4716, column: 20, scope: !4692)
!4694 = !DILocation(line: 4721, column: 15, scope: !4695)
!4695 = distinct !DILexicalBlock(scope: !4692, file: !3, line: 4721, column: 13)
!4696 = !DILocation(line: 4721, column: 13, scope: !4692)
!4697 = !DILocation(line: 4723, column: 37, scope: !4698)
!4698 = distinct !DILexicalBlock(scope: !4695, file: !3, line: 4722, column: 4)
!4699 = !DILocation(line: 4723, column: 48, scope: !4698)
!4700 = !DILocation(line: 4723, column: 6, scope: !4698)
!4701 = !DILocation(line: 4726, column: 4, scope: !4698)
!4702 = distinct !{!4702, !4681, !4703}
!4703 = !DILocation(line: 4727, column: 7, scope: !4612)
!4704 = !DILocation(line: 4733, column: 13, scope: !4705)
!4705 = distinct !DILexicalBlock(scope: !4614, file: !3, line: 4733, column: 12)
!4706 = !DILocation(line: 4733, column: 12, scope: !4614)
!4707 = !DILocation(line: 4735, column: 38, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 4734, column: 3)
!4709 = !DILocation(line: 4735, column: 49, scope: !4708)
!4710 = !DILocation(line: 4735, column: 5, scope: !4708)
!4711 = !DILocation(line: 4738, column: 3, scope: !4708)
!4712 = !DILocation(line: 4740, column: 2, scope: !4608)
!4713 = distinct !{!4713, !4664, !4714}
!4714 = !DILocation(line: 4740, column: 2, scope: !4609)
!4715 = !DILocation(line: 4741, column: 5, scope: !4602)
!4716 = !DILocation(line: 4672, column: 49, scope: !4602)
!4717 = !DILocation(line: 4672, column: 3, scope: !4602)
!4718 = distinct !{!4718, !4658, !4719}
!4719 = !DILocation(line: 4741, column: 5, scope: !4603)
!4720 = !DILocation(line: 4744, column: 13, scope: !4620)
!4721 = !DILocation(line: 0, scope: !4618)
!4722 = !DILocation(line: 4744, column: 8, scope: !4620)
!4723 = !DILocation(line: 4744, column: 35, scope: !4619)
!4724 = !DILocation(line: 4744, column: 34, scope: !4619)
!4725 = !DILocation(line: 4744, column: 3, scope: !4620)
!4726 = !DILocation(line: 4747, column: 7, scope: !4618)
!4727 = !DILocation(line: 4748, column: 13, scope: !4618)
!4728 = !DILocation(line: 4750, column: 7, scope: !4625)
!4729 = !DILocation(line: 0, scope: !4625)
!4730 = !DILocation(line: 4750, column: 7, scope: !4624)
!4731 = !DILocation(line: 4752, column: 15, scope: !4623)
!4732 = !DILocation(line: 0, scope: !4623)
!4733 = !DILocation(line: 4753, column: 8, scope: !4734)
!4734 = distinct !DILexicalBlock(scope: !4623, file: !3, line: 4753, column: 8)
!4735 = !DILocation(line: 4753, column: 24, scope: !4734)
!4736 = !DILocation(line: 4753, column: 8, scope: !4623)
!4737 = !DILocation(line: 4754, column: 21, scope: !4734)
!4738 = !DILocation(line: 4754, column: 6, scope: !4734)
!4739 = distinct !{!4739, !4728, !4740}
!4740 = !DILocation(line: 4755, column: 2, scope: !4625)
!4741 = !DILocation(line: 4756, column: 5, scope: !4619)
!4742 = !DILocation(line: 4744, column: 50, scope: !4619)
!4743 = !DILocation(line: 4744, column: 3, scope: !4619)
!4744 = distinct !{!4744, !4725, !4745}
!4745 = !DILocation(line: 4756, column: 5, scope: !4620)
!4746 = !DILocation(line: 4759, column: 1, scope: !4590)
!4747 = !DILocation(line: 4758, column: 3, scope: !4590)
!4748 = distinct !DISubprogram(name: "ei_start_1", scope: !343, file: !343, line: 696, type: !4749, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4751)
!4749 = !DISubroutineType(types: !4750)
!4750 = !{!4372, !4377}
!4751 = !{!4752, !4753}
!4752 = !DILocalVariable(name: "ev", arg: 1, scope: !4748, file: !343, line: 696, type: !4377)
!4753 = !DILocalVariable(name: "i", scope: !4748, file: !343, line: 698, type: !4372)
!4754 = !DILocation(line: 0, scope: !4748)
!4755 = !DILocation(line: 700, column: 5, scope: !4748)
!4756 = !DILocation(line: 700, column: 11, scope: !4748)
!4757 = !DILocation(line: 701, column: 5, scope: !4748)
!4758 = !DILocation(line: 701, column: 15, scope: !4748)
!4759 = !DILocation(line: 703, column: 3, scope: !4748)
!4760 = distinct !DISubprogram(name: "ei_cond", scope: !343, file: !343, line: 771, type: !4761, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4763)
!4761 = !DISubroutineType(types: !4762)
!4762 = !{!679, !4372, !3805}
!4763 = !{!4764, !4765}
!4764 = !DILocalVariable(name: "ei", arg: 1, scope: !4760, file: !343, line: 771, type: !4372)
!4765 = !DILocalVariable(name: "p", arg: 2, scope: !4760, file: !343, line: 771, type: !3805)
!4766 = !DILocation(line: 0, scope: !4760)
!4767 = !DILocation(line: 773, column: 8, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4760, file: !343, line: 773, column: 7)
!4769 = !DILocation(line: 773, column: 7, scope: !4760)
!4770 = !DILocation(line: 775, column: 12, scope: !4771)
!4771 = distinct !DILexicalBlock(scope: !4768, file: !343, line: 774, column: 5)
!4772 = !DILocation(line: 776, column: 7, scope: !4771)
!4773 = !DILocation(line: 781, column: 7, scope: !4774)
!4774 = distinct !DILexicalBlock(scope: !4768, file: !343, line: 779, column: 5)
!4775 = !DILocation(line: 0, scope: !4768)
!4776 = !DILocation(line: 783, column: 1, scope: !4760)
!4777 = distinct !DISubprogram(name: "ei_next", scope: !343, file: !343, line: 736, type: !4778, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4781)
!4778 = !DISubroutineType(types: !4779)
!4779 = !{null, !4780}
!4780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4372, size: 64)
!4781 = !{!4782}
!4782 = !DILocalVariable(name: "i", arg: 1, scope: !4777, file: !343, line: 736, type: !4780)
!4783 = !DILocation(line: 0, scope: !4777)
!4784 = !DILocation(line: 738, column: 3, scope: !4777)
!4785 = !DILocation(line: 739, column: 11, scope: !4777)
!4786 = !DILocation(line: 740, column: 1, scope: !4777)
!4787 = distinct !DISubprogram(name: "gimple_code", scope: !588, file: !588, line: 1052, type: !4788, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4790)
!4788 = !DISubroutineType(types: !4789)
!4789 = !{!587, !4325}
!4790 = !{!4791}
!4791 = !DILocalVariable(name: "g", arg: 1, scope: !4787, file: !588, line: 1052, type: !4325)
!4792 = !DILocation(line: 0, scope: !4787)
!4793 = !DILocation(line: 1054, column: 20, scope: !4787)
!4794 = !DILocation(line: 1054, column: 3, scope: !4787)
!4795 = distinct !DISubprogram(name: "fp_predicate", scope: !3, file: !3, line: 3788, type: !4796, scopeLine: 3789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4798)
!4796 = !DISubroutineType(types: !4797)
!4797 = !{!679, !1017}
!4798 = !{!4799}
!4799 = !DILocalVariable(name: "stmt", arg: 1, scope: !4795, file: !3, line: 3788, type: !1017)
!4800 = !DILocation(line: 0, scope: !4795)
!4801 = !DILocation(line: 3792, column: 10, scope: !4795)
!4802 = !DILocation(line: 3792, column: 3, scope: !4795)
!4803 = distinct !DISubprogram(name: "zero_ssa_operands", scope: !4804, file: !4804, line: 858, type: !4805, scopeLine: 859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4807)
!4804 = !DIFile(filename: "./tree-flow-inline.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!4805 = !DISubroutineType(types: !4806)
!4806 = !{!679, !1017, !680}
!4807 = !{!4808, !4809, !4810}
!4808 = !DILocalVariable(name: "stmt", arg: 1, scope: !4803, file: !4804, line: 858, type: !1017)
!4809 = !DILocalVariable(name: "flags", arg: 2, scope: !4803, file: !4804, line: 858, type: !680)
!4810 = !DILocalVariable(name: "iter", scope: !4803, file: !4804, line: 860, type: !3721)
!4811 = !DILocation(line: 0, scope: !4803)
!4812 = !DILocation(line: 860, column: 3, scope: !4803)
!4813 = !DILocation(line: 862, column: 3, scope: !4803)
!4814 = !DILocation(line: 863, column: 10, scope: !4803)
!4815 = !DILocation(line: 864, column: 1, scope: !4803)
!4816 = !DILocation(line: 863, column: 3, scope: !4803)
!4817 = distinct !DISubprogram(name: "find_conditional_asserts", scope: !3, file: !3, line: 4424, type: !4818, scopeLine: 4425, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4820)
!4818 = !DISubroutineType(types: !4819)
!4819 = !{!679, !1468, !1017}
!4820 = !{!4821, !4822, !4823, !4824, !4825, !4826, !4827, !4828}
!4821 = !DILocalVariable(name: "bb", arg: 1, scope: !4817, file: !3, line: 4424, type: !1468)
!4822 = !DILocalVariable(name: "last", arg: 2, scope: !4817, file: !3, line: 4424, type: !1017)
!4823 = !DILocalVariable(name: "need_assert", scope: !4817, file: !3, line: 4426, type: !679)
!4824 = !DILocalVariable(name: "bsi", scope: !4817, file: !3, line: 4427, type: !2054)
!4825 = !DILocalVariable(name: "op", scope: !4817, file: !3, line: 4428, type: !693)
!4826 = !DILocalVariable(name: "ei", scope: !4817, file: !3, line: 4429, type: !4372)
!4827 = !DILocalVariable(name: "e", scope: !4817, file: !3, line: 4430, type: !997)
!4828 = !DILocalVariable(name: "iter", scope: !4817, file: !3, line: 4431, type: !3721)
!4829 = !DILocation(line: 0, scope: !4817)
!4830 = !DILocation(line: 4427, column: 3, scope: !4817)
!4831 = !DILocation(line: 4429, column: 3, scope: !4817)
!4832 = !DILocation(line: 4430, column: 3, scope: !4817)
!4833 = !DILocation(line: 4431, column: 3, scope: !4817)
!4834 = !DILocation(line: 4434, column: 9, scope: !4817)
!4835 = !DILocation(line: 4440, column: 3, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 4440, column: 3)
!4837 = !DILocation(line: 0, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 4440, column: 3)
!4839 = !DILocation(line: 4433, column: 15, scope: !4817)
!4840 = !DILocation(line: 4440, column: 3, scope: !4838)
!4841 = !DILocation(line: 4442, column: 11, scope: !4842)
!4842 = distinct !DILexicalBlock(scope: !4843, file: !3, line: 4442, column: 11)
!4843 = distinct !DILexicalBlock(scope: !4838, file: !3, line: 4441, column: 5)
!4844 = !DILocation(line: 4442, column: 14, scope: !4842)
!4845 = !DILocation(line: 4442, column: 19, scope: !4842)
!4846 = !DILocation(line: 4442, column: 11, scope: !4843)
!4847 = !DILocation(line: 4447, column: 7, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4843, file: !3, line: 4447, column: 7)
!4849 = !DILocation(line: 0, scope: !4848)
!4850 = !DILocation(line: 4447, column: 7, scope: !4851)
!4851 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 4447, column: 7)
!4852 = !DILocation(line: 4449, column: 49, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 4448, column: 2)
!4854 = !DILocation(line: 4450, column: 10, scope: !4853)
!4855 = !DILocation(line: 4451, column: 10, scope: !4853)
!4856 = !DILocation(line: 4452, column: 10, scope: !4853)
!4857 = !DILocation(line: 4449, column: 19, scope: !4853)
!4858 = !DILocation(line: 4449, column: 16, scope: !4853)
!4859 = distinct !{!4859, !4847, !4860}
!4860 = !DILocation(line: 4453, column: 2, scope: !4848)
!4861 = distinct !{!4861, !4835, !4862}
!4862 = !DILocation(line: 4454, column: 5, scope: !4836)
!4863 = !DILocation(line: 4457, column: 1, scope: !4817)
!4864 = !DILocation(line: 4456, column: 3, scope: !4817)
!4865 = distinct !DISubprogram(name: "find_switch_asserts", scope: !3, file: !3, line: 4495, type: !4818, scopeLine: 4496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4866)
!4866 = !{!4867, !4868, !4869, !4870, !4871, !4872, !4873, !4874, !4875, !4876, !4880, !4881}
!4867 = !DILocalVariable(name: "bb", arg: 1, scope: !4865, file: !3, line: 4495, type: !1468)
!4868 = !DILocalVariable(name: "last", arg: 2, scope: !4865, file: !3, line: 4495, type: !1017)
!4869 = !DILocalVariable(name: "need_assert", scope: !4865, file: !3, line: 4497, type: !679)
!4870 = !DILocalVariable(name: "bsi", scope: !4865, file: !3, line: 4498, type: !2054)
!4871 = !DILocalVariable(name: "op", scope: !4865, file: !3, line: 4499, type: !693)
!4872 = !DILocalVariable(name: "e", scope: !4865, file: !3, line: 4500, type: !997)
!4873 = !DILocalVariable(name: "vec2", scope: !4865, file: !3, line: 4501, type: !693)
!4874 = !DILocalVariable(name: "n", scope: !4865, file: !3, line: 4502, type: !1162)
!4875 = !DILocalVariable(name: "idx", scope: !4865, file: !3, line: 4504, type: !7)
!4876 = !DILocalVariable(name: "min", scope: !4877, file: !3, line: 4528, type: !693)
!4877 = distinct !DILexicalBlock(scope: !4878, file: !3, line: 4527, column: 5)
!4878 = distinct !DILexicalBlock(scope: !4879, file: !3, line: 4526, column: 3)
!4879 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 4526, column: 3)
!4880 = !DILocalVariable(name: "max", scope: !4877, file: !3, line: 4528, type: !693)
!4881 = !DILocalVariable(name: "cl", scope: !4877, file: !3, line: 4529, type: !693)
!4882 = !DILocation(line: 0, scope: !4865)
!4883 = !DILocation(line: 4498, column: 3, scope: !4865)
!4884 = !DILocation(line: 4502, column: 14, scope: !4865)
!4885 = !DILocation(line: 4511, column: 9, scope: !4865)
!4886 = !DILocation(line: 4512, column: 8, scope: !4865)
!4887 = !DILocation(line: 4513, column: 7, scope: !4888)
!4888 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 4513, column: 7)
!4889 = !DILocation(line: 4513, column: 22, scope: !4888)
!4890 = !DILocation(line: 4513, column: 7, scope: !4865)
!4891 = !DILocation(line: 4517, column: 10, scope: !4865)
!4892 = !DILocation(line: 0, scope: !4893)
!4893 = distinct !DILexicalBlock(scope: !4894, file: !3, line: 4518, column: 3)
!4894 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 4518, column: 3)
!4895 = !DILocation(line: 4518, column: 21, scope: !4893)
!4896 = !DILocation(line: 4518, column: 8, scope: !4894)
!4897 = !DILocation(line: 0, scope: !4894)
!4898 = !DILocation(line: 4518, column: 3, scope: !4894)
!4899 = !DILocation(line: 4519, column: 32, scope: !4893)
!4900 = !DILocation(line: 4519, column: 5, scope: !4893)
!4901 = !DILocation(line: 4519, column: 30, scope: !4893)
!4902 = !DILocation(line: 4518, column: 26, scope: !4893)
!4903 = !DILocation(line: 4518, column: 3, scope: !4893)
!4904 = distinct !{!4904, !4898, !4905}
!4905 = !DILocation(line: 4519, column: 62, scope: !4894)
!4906 = !DILocation(line: 4521, column: 15, scope: !4865)
!4907 = !DILocation(line: 4521, column: 3, scope: !4865)
!4908 = !DILocation(line: 0, scope: !4877)
!4909 = !DILocation(line: 4526, column: 8, scope: !4879)
!4910 = !DILocation(line: 0, scope: !4879)
!4911 = !DILocation(line: 4510, column: 15, scope: !4865)
!4912 = !DILocation(line: 4526, column: 21, scope: !4878)
!4913 = !DILocation(line: 4526, column: 3, scope: !4879)
!4914 = !DILocation(line: 4529, column: 17, scope: !4877)
!4915 = !DILocation(line: 4531, column: 13, scope: !4877)
!4916 = !DILocation(line: 4532, column: 13, scope: !4877)
!4917 = !DILocation(line: 4536, column: 15, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4877, file: !3, line: 4536, column: 11)
!4919 = !DILocation(line: 4536, column: 19, scope: !4918)
!4920 = !DILocation(line: 4537, column: 4, scope: !4918)
!4921 = !DILocation(line: 4537, column: 7, scope: !4918)
!4922 = !DILocation(line: 4537, column: 26, scope: !4918)
!4923 = !DILocation(line: 4537, column: 23, scope: !4918)
!4924 = !DILocation(line: 4536, column: 11, scope: !4877)
!4925 = !DILocation(line: 4540, column: 4, scope: !4926)
!4926 = distinct !DILexicalBlock(scope: !4918, file: !3, line: 4538, column: 2)
!4927 = !DILocation(line: 4541, column: 6, scope: !4928)
!4928 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 4540, column: 7)
!4929 = !DILocation(line: 4542, column: 17, scope: !4926)
!4930 = !DILocation(line: 4543, column: 6, scope: !4926)
!4931 = !DILocation(line: 4543, column: 28, scope: !4926)
!4932 = !DILocation(line: 4543, column: 25, scope: !4926)
!4933 = !DILocation(line: 4542, column: 4, scope: !4928)
!4934 = distinct !{!4934, !4925, !4935}
!4935 = !DILocation(line: 4543, column: 65, scope: !4926)
!4936 = !DILocation(line: 4547, column: 8, scope: !4937)
!4937 = distinct !DILexicalBlock(scope: !4926, file: !3, line: 4547, column: 8)
!4938 = !DILocation(line: 4547, column: 8, scope: !4926)
!4939 = !DILocation(line: 4548, column: 6, scope: !4937)
!4940 = !DILocation(line: 4550, column: 12, scope: !4937)
!4941 = !DILocation(line: 4555, column: 15, scope: !4942)
!4942 = distinct !DILexicalBlock(scope: !4877, file: !3, line: 4555, column: 11)
!4943 = !DILocation(line: 4555, column: 11, scope: !4877)
!4944 = !DILocation(line: 4559, column: 26, scope: !4877)
!4945 = !DILocation(line: 4559, column: 11, scope: !4877)
!4946 = !DILocation(line: 4564, column: 13, scope: !4877)
!4947 = !DILocation(line: 4566, column: 13, scope: !4877)
!4948 = !DILocation(line: 4563, column: 22, scope: !4877)
!4949 = !DILocation(line: 4563, column: 19, scope: !4877)
!4950 = !DILocation(line: 4568, column: 11, scope: !4877)
!4951 = !DILocation(line: 4572, column: 10, scope: !4952)
!4952 = distinct !DILexicalBlock(scope: !4953, file: !3, line: 4569, column: 2)
!4953 = distinct !DILexicalBlock(scope: !4877, file: !3, line: 4568, column: 11)
!4954 = !DILocation(line: 4570, column: 19, scope: !4952)
!4955 = !DILocation(line: 4570, column: 16, scope: !4952)
!4956 = !DILocation(line: 4574, column: 2, scope: !4952)
!4957 = !DILocation(line: 4526, column: 26, scope: !4878)
!4958 = !DILocation(line: 4526, column: 3, scope: !4878)
!4959 = distinct !{!4959, !4913, !4960}
!4960 = !DILocation(line: 4575, column: 5, scope: !4879)
!4961 = !DILocation(line: 4578, column: 1, scope: !4865)
!4962 = distinct !DISubprogram(name: "gsi_start_bb", scope: !588, file: !588, line: 4418, type: !4963, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4965)
!4963 = !DISubroutineType(types: !4964)
!4964 = !{!2054, !1468}
!4965 = !{!4966, !4967, !4968}
!4966 = !DILocalVariable(name: "bb", arg: 1, scope: !4962, file: !588, line: 4418, type: !1468)
!4967 = !DILocalVariable(name: "i", scope: !4962, file: !588, line: 4420, type: !2054)
!4968 = !DILocalVariable(name: "seq", scope: !4962, file: !588, line: 4421, type: !1007)
!4969 = !DILocation(line: 0, scope: !4962)
!4970 = !DILocation(line: 4420, column: 24, scope: !4962)
!4971 = !DILocation(line: 4423, column: 9, scope: !4962)
!4972 = !DILocation(line: 4424, column: 11, scope: !4962)
!4973 = !DILocation(line: 4424, column: 5, scope: !4962)
!4974 = !DILocation(line: 4424, column: 9, scope: !4962)
!4975 = !DILocation(line: 4425, column: 5, scope: !4962)
!4976 = !DILocation(line: 4425, column: 9, scope: !4962)
!4977 = !DILocation(line: 4426, column: 5, scope: !4962)
!4978 = !DILocation(line: 4426, column: 8, scope: !4962)
!4979 = !DILocation(line: 4429, column: 1, scope: !4962)
!4980 = distinct !DISubprogram(name: "gsi_end_p", scope: !588, file: !588, line: 4467, type: !4981, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4983)
!4981 = !DISubroutineType(types: !4982)
!4982 = !{!679, !2054}
!4983 = !{!4984}
!4984 = !DILocalVariable(name: "i", arg: 1, scope: !4980, file: !588, line: 4467, type: !2054)
!4985 = !DILocation(line: 4467, column: 33, scope: !4980)
!4986 = !DILocation(line: 4469, column: 12, scope: !4980)
!4987 = !DILocation(line: 4469, column: 16, scope: !4980)
!4988 = !DILocation(line: 4469, column: 10, scope: !4980)
!4989 = !DILocation(line: 4469, column: 3, scope: !4980)
!4990 = distinct !DISubprogram(name: "is_gimple_debug", scope: !588, file: !588, line: 3249, type: !4991, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4993)
!4991 = !DISubroutineType(types: !4992)
!4992 = !{!679, !4325}
!4993 = !{!4994}
!4994 = !DILocalVariable(name: "gs", arg: 1, scope: !4990, file: !588, line: 3249, type: !4325)
!4995 = !DILocation(line: 0, scope: !4990)
!4996 = !DILocation(line: 3251, column: 10, scope: !4990)
!4997 = !DILocation(line: 3251, column: 27, scope: !4990)
!4998 = !DILocation(line: 3251, column: 3, scope: !4990)
!4999 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !4804, file: !4804, line: 792, type: !5000, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5003)
!5000 = !DISubroutineType(types: !5001)
!5001 = !{!693, !5002, !1017, !680}
!5002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3721, size: 64)
!5003 = !{!5004, !5005, !5006}
!5004 = !DILocalVariable(name: "ptr", arg: 1, scope: !4999, file: !4804, line: 792, type: !5002)
!5005 = !DILocalVariable(name: "stmt", arg: 2, scope: !4999, file: !4804, line: 792, type: !1017)
!5006 = !DILocalVariable(name: "flags", arg: 3, scope: !4999, file: !4804, line: 792, type: !680)
!5007 = !DILocation(line: 0, scope: !4999)
!5008 = !DILocation(line: 794, column: 3, scope: !4999)
!5009 = !DILocation(line: 795, column: 8, scope: !4999)
!5010 = !DILocation(line: 795, column: 18, scope: !4999)
!5011 = !DILocation(line: 796, column: 10, scope: !4999)
!5012 = !DILocation(line: 796, column: 3, scope: !4999)
!5013 = distinct !DISubprogram(name: "op_iter_done", scope: !4804, file: !4804, line: 652, type: !5014, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5018)
!5014 = !DISubroutineType(types: !5015)
!5015 = !{!679, !5016}
!5016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5017, size: 64)
!5017 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3721)
!5018 = !{!5019}
!5019 = !DILocalVariable(name: "ptr", arg: 1, scope: !5013, file: !4804, line: 652, type: !5016)
!5020 = !DILocation(line: 0, scope: !5013)
!5021 = !DILocation(line: 654, column: 15, scope: !5013)
!5022 = !DILocation(line: 654, column: 3, scope: !5013)
!5023 = distinct !DISubprogram(name: "SET_BIT", scope: !2067, file: !2067, line: 63, type: !5024, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5026)
!5024 = !DISubroutineType(types: !5025)
!5025 = !{null, !2066, !7}
!5026 = !{!5027, !5028, !5029}
!5027 = !DILocalVariable(name: "map", arg: 1, scope: !5023, file: !2067, line: 63, type: !2066)
!5028 = !DILocalVariable(name: "bitno", arg: 2, scope: !5023, file: !2067, line: 63, type: !7)
!5029 = !DILocalVariable(name: "oldbit", scope: !5030, file: !2067, line: 67, type: !679)
!5030 = distinct !DILexicalBlock(scope: !5031, file: !2067, line: 66, column: 5)
!5031 = distinct !DILexicalBlock(scope: !5023, file: !2067, line: 65, column: 7)
!5032 = !DILocation(line: 0, scope: !5023)
!5033 = !DILocation(line: 65, column: 12, scope: !5031)
!5034 = !DILocation(line: 65, column: 7, scope: !5031)
!5035 = !DILocation(line: 65, column: 7, scope: !5023)
!5036 = !DILocation(line: 73, column: 40, scope: !5023)
!5037 = !DILocation(line: 73, column: 29, scope: !5023)
!5038 = !DILocation(line: 72, column: 19, scope: !5023)
!5039 = !DILocation(line: 72, column: 3, scope: !5023)
!5040 = !DILocation(line: 68, column: 16, scope: !5030)
!5041 = !DILocation(line: 69, column: 12, scope: !5042)
!5042 = distinct !DILexicalBlock(scope: !5030, file: !2067, line: 69, column: 11)
!5043 = !DILocation(line: 69, column: 11, scope: !5030)
!5044 = !DILocation(line: 70, column: 2, scope: !5042)
!5045 = !DILocation(line: 70, column: 41, scope: !5042)
!5046 = !DILocation(line: 73, column: 5, scope: !5023)
!5047 = !DILocation(line: 74, column: 1, scope: !5023)
!5048 = distinct !DISubprogram(name: "infer_value_range", scope: !3, file: !3, line: 3802, type: !5049, scopeLine: 3803, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5052)
!5049 = !DISubroutineType(types: !5050)
!5050 = !{!679, !1017, !693, !5051, !1051}
!5051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!5052 = !{!5053, !5054, !5055, !5056, !5057, !5060, !5061}
!5053 = !DILocalVariable(name: "stmt", arg: 1, scope: !5048, file: !3, line: 3802, type: !1017)
!5054 = !DILocalVariable(name: "op", arg: 2, scope: !5048, file: !3, line: 3802, type: !693)
!5055 = !DILocalVariable(name: "comp_code_p", arg: 3, scope: !5048, file: !3, line: 3802, type: !5051)
!5056 = !DILocalVariable(name: "val_p", arg: 4, scope: !5048, file: !3, line: 3802, type: !1051)
!5057 = !DILocalVariable(name: "num_uses", scope: !5058, file: !3, line: 3830, type: !7)
!5058 = distinct !DILexicalBlock(scope: !5059, file: !3, line: 3829, column: 5)
!5059 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 3826, column: 7)
!5060 = !DILocalVariable(name: "num_loads", scope: !5058, file: !3, line: 3830, type: !7)
!5061 = !DILocalVariable(name: "num_stores", scope: !5058, file: !3, line: 3830, type: !7)
!5062 = !DILocation(line: 0, scope: !5048)
!5063 = !DILocation(line: 3804, column: 10, scope: !5048)
!5064 = !DILocation(line: 3805, column: 16, scope: !5048)
!5065 = !DILocation(line: 3809, column: 7, scope: !5066)
!5066 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 3809, column: 7)
!5067 = !DILocation(line: 3809, column: 7, scope: !5048)
!5068 = !DILocation(line: 3814, column: 7, scope: !5069)
!5069 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 3814, column: 7)
!5070 = !DILocation(line: 3814, column: 7, scope: !5048)
!5071 = !DILocation(line: 3821, column: 7, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !5048, file: !3, line: 3821, column: 7)
!5073 = !DILocation(line: 3821, column: 29, scope: !5072)
!5074 = !DILocation(line: 3821, column: 32, scope: !5072)
!5075 = !DILocation(line: 3821, column: 69, scope: !5072)
!5076 = !DILocation(line: 3821, column: 7, scope: !5048)
!5077 = !DILocation(line: 3826, column: 7, scope: !5059)
!5078 = !DILocation(line: 3827, column: 7, scope: !5059)
!5079 = !DILocation(line: 3827, column: 10, scope: !5059)
!5080 = !DILocation(line: 3828, column: 7, scope: !5059)
!5081 = !DILocation(line: 3828, column: 10, scope: !5059)
!5082 = !DILocation(line: 3828, column: 29, scope: !5059)
!5083 = !DILocation(line: 3826, column: 7, scope: !5048)
!5084 = !DILocation(line: 3830, column: 7, scope: !5058)
!5085 = !DILocation(line: 0, scope: !5058)
!5086 = !DILocation(line: 3832, column: 7, scope: !5058)
!5087 = !DILocation(line: 3833, column: 11, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5058, file: !3, line: 3833, column: 11)
!5089 = !DILocation(line: 3833, column: 23, scope: !5088)
!5090 = !DILocation(line: 3833, column: 34, scope: !5088)
!5091 = !DILocation(line: 3833, column: 11, scope: !5058)
!5092 = !DILocation(line: 3835, column: 28, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 3834, column: 2)
!5094 = !DILocation(line: 3835, column: 13, scope: !5093)
!5095 = !DILocation(line: 3835, column: 11, scope: !5093)
!5096 = !DILocation(line: 3836, column: 17, scope: !5093)
!5097 = !DILocation(line: 3837, column: 4, scope: !5093)
!5098 = !DILocation(line: 3839, column: 5, scope: !5059)
!5099 = !DILocation(line: 3841, column: 3, scope: !5048)
!5100 = !DILocation(line: 3842, column: 1, scope: !5048)
!5101 = distinct !DISubprogram(name: "is_gimple_assign", scope: !588, file: !588, line: 1677, type: !4991, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5102)
!5102 = !{!5103}
!5103 = !DILocalVariable(name: "gs", arg: 1, scope: !5101, file: !588, line: 1677, type: !4325)
!5104 = !DILocation(line: 0, scope: !5101)
!5105 = !DILocation(line: 1679, column: 10, scope: !5101)
!5106 = !DILocation(line: 1679, column: 27, scope: !5101)
!5107 = !DILocation(line: 1679, column: 3, scope: !5101)
!5108 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !588, file: !588, line: 1815, type: !5109, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5111)
!5109 = !DISubroutineType(types: !5110)
!5110 = !{!134, !4325}
!5111 = !{!5112, !5113}
!5112 = !DILocalVariable(name: "gs", arg: 1, scope: !5108, file: !588, line: 1815, type: !4325)
!5113 = !DILocalVariable(name: "code", scope: !5108, file: !588, line: 1817, type: !134)
!5114 = !DILocation(line: 0, scope: !5108)
!5115 = !DILocation(line: 1820, column: 10, scope: !5108)
!5116 = !DILocation(line: 1821, column: 7, scope: !5117)
!5117 = distinct !DILexicalBlock(scope: !5108, file: !588, line: 1821, column: 7)
!5118 = !DILocation(line: 1821, column: 35, scope: !5117)
!5119 = !DILocation(line: 1821, column: 7, scope: !5108)
!5120 = !DILocation(line: 1822, column: 12, scope: !5117)
!5121 = !DILocation(line: 1822, column: 5, scope: !5117)
!5122 = !DILocation(line: 1824, column: 3, scope: !5108)
!5123 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !588, file: !588, line: 1727, type: !4323, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5124)
!5124 = !{!5125}
!5125 = !DILocalVariable(name: "gs", arg: 1, scope: !5123, file: !588, line: 1727, type: !4325)
!5126 = !DILocation(line: 0, scope: !5123)
!5127 = !DILocation(line: 1730, column: 10, scope: !5123)
!5128 = !DILocation(line: 1730, column: 3, scope: !5123)
!5129 = distinct !DISubprogram(name: "has_single_use", scope: !4804, file: !4804, line: 350, type: !2667, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5130)
!5130 = !{!5131, !5132}
!5131 = !DILocalVariable(name: "var", arg: 1, scope: !5129, file: !4804, line: 350, type: !2080)
!5132 = !DILocalVariable(name: "ptr", scope: !5129, file: !4804, line: 352, type: !5133)
!5133 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5134)
!5134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5135, size: 64)
!5135 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2085)
!5136 = !DILocation(line: 0, scope: !5129)
!5137 = !DILocation(line: 352, column: 42, scope: !5129)
!5138 = !DILocation(line: 355, column: 19, scope: !5139)
!5139 = distinct !DILexicalBlock(scope: !5129, file: !4804, line: 355, column: 7)
!5140 = !DILocation(line: 355, column: 11, scope: !5139)
!5141 = !DILocation(line: 355, column: 7, scope: !5129)
!5142 = !DILocation(line: 359, column: 25, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !5129, file: !4804, line: 359, column: 7)
!5144 = !DILocation(line: 359, column: 11, scope: !5143)
!5145 = !DILocation(line: 359, column: 7, scope: !5129)
!5146 = !DILocation(line: 360, column: 30, scope: !5143)
!5147 = !DILocation(line: 360, column: 13, scope: !5143)
!5148 = !DILocation(line: 360, column: 12, scope: !5143)
!5149 = !DILocation(line: 360, column: 5, scope: !5143)
!5150 = !DILocation(line: 363, column: 8, scope: !5151)
!5151 = distinct !DILexicalBlock(scope: !5129, file: !4804, line: 363, column: 7)
!5152 = !DILocation(line: 363, column: 7, scope: !5129)
!5153 = !DILocation(line: 366, column: 10, scope: !5129)
!5154 = !DILocation(line: 366, column: 3, scope: !5129)
!5155 = !DILocation(line: 367, column: 1, scope: !5129)
!5156 = distinct !DISubprogram(name: "register_new_assert_for", scope: !3, file: !3, line: 3930, type: !5157, scopeLine: 3936, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5159)
!5157 = !DISubroutineType(types: !5158)
!5158 = !{null, !693, !693, !134, !693, !1468, !997, !2054}
!5159 = !{!5160, !5161, !5162, !5163, !5164, !5165, !5166, !5167, !5168, !5169, !5170}
!5160 = !DILocalVariable(name: "name", arg: 1, scope: !5156, file: !3, line: 3930, type: !693)
!5161 = !DILocalVariable(name: "expr", arg: 2, scope: !5156, file: !3, line: 3930, type: !693)
!5162 = !DILocalVariable(name: "comp_code", arg: 3, scope: !5156, file: !3, line: 3931, type: !134)
!5163 = !DILocalVariable(name: "val", arg: 4, scope: !5156, file: !3, line: 3932, type: !693)
!5164 = !DILocalVariable(name: "bb", arg: 5, scope: !5156, file: !3, line: 3933, type: !1468)
!5165 = !DILocalVariable(name: "e", arg: 6, scope: !5156, file: !3, line: 3934, type: !997)
!5166 = !DILocalVariable(name: "si", arg: 7, scope: !5156, file: !3, line: 3935, type: !2054)
!5167 = !DILocalVariable(name: "n", scope: !5156, file: !3, line: 3937, type: !2047)
!5168 = !DILocalVariable(name: "loc", scope: !5156, file: !3, line: 3937, type: !2047)
!5169 = !DILocalVariable(name: "last_loc", scope: !5156, file: !3, line: 3937, type: !2047)
!5170 = !DILocalVariable(name: "dest_bb", scope: !5156, file: !3, line: 3938, type: !1468)
!5171 = !DILocation(line: 0, scope: !5156)
!5172 = !DILocation(line: 3935, column: 26, scope: !5156)
!5173 = !DILocation(line: 3951, column: 7, scope: !5174)
!5174 = distinct !DILexicalBlock(scope: !5156, file: !3, line: 3951, column: 7)
!5175 = !DILocation(line: 3951, column: 23, scope: !5174)
!5176 = !DILocation(line: 3952, column: 7, scope: !5174)
!5177 = !DILocation(line: 3952, column: 10, scope: !5174)
!5178 = !DILocation(line: 3951, column: 7, scope: !5156)
!5179 = !DILocation(line: 3953, column: 31, scope: !5174)
!5180 = !DILocation(line: 3954, column: 10, scope: !5174)
!5181 = !DILocation(line: 3954, column: 34, scope: !5174)
!5182 = !DILocation(line: 3953, column: 11, scope: !5174)
!5183 = !DILocation(line: 3953, column: 5, scope: !5174)
!5184 = !DILocation(line: 3971, column: 13, scope: !5156)
!5185 = !DILocation(line: 3971, column: 28, scope: !5156)
!5186 = !DILocation(line: 3984, column: 9, scope: !5156)
!5187 = !DILocation(line: 3984, column: 21, scope: !5156)
!5188 = !DILocation(line: 0, scope: !5189)
!5189 = distinct !DILexicalBlock(scope: !5190, file: !3, line: 4007, column: 15)
!5190 = distinct !DILexicalBlock(scope: !5191, file: !3, line: 3993, column: 2)
!5191 = distinct !DILexicalBlock(scope: !5192, file: !3, line: 3988, column: 11)
!5192 = distinct !DILexicalBlock(scope: !5156, file: !3, line: 3987, column: 5)
!5193 = !DILocation(line: 0, scope: !5194)
!5194 = distinct !DILexicalBlock(scope: !5190, file: !3, line: 4015, column: 8)
!5195 = !DILocation(line: 3986, column: 3, scope: !5156)
!5196 = !DILocation(line: 3988, column: 16, scope: !5191)
!5197 = !DILocation(line: 3988, column: 26, scope: !5191)
!5198 = !DILocation(line: 3989, column: 4, scope: !5191)
!5199 = !DILocation(line: 3989, column: 13, scope: !5191)
!5200 = !DILocation(line: 3989, column: 17, scope: !5191)
!5201 = !DILocation(line: 3990, column: 8, scope: !5191)
!5202 = !DILocation(line: 3990, column: 11, scope: !5191)
!5203 = !DILocation(line: 3991, column: 4, scope: !5191)
!5204 = !DILocation(line: 3991, column: 13, scope: !5191)
!5205 = !DILocation(line: 3991, column: 18, scope: !5191)
!5206 = !DILocation(line: 3992, column: 8, scope: !5191)
!5207 = !DILocation(line: 3992, column: 11, scope: !5191)
!5208 = !DILocation(line: 3988, column: 11, scope: !5192)
!5209 = !DILocation(line: 4008, column: 57, scope: !5189)
!5210 = !DILocation(line: 4008, column: 11, scope: !5189)
!5211 = !DILocation(line: 4007, column: 15, scope: !5190)
!5212 = !DILocation(line: 4015, column: 19, scope: !5194)
!5213 = !DILocation(line: 4016, column: 48, scope: !5194)
!5214 = !DILocation(line: 4015, column: 23, scope: !5194)
!5215 = !DILocation(line: 4016, column: 8, scope: !5194)
!5216 = !DILocation(line: 4016, column: 11, scope: !5194)
!5217 = !DILocation(line: 4015, column: 8, scope: !5190)
!5218 = !DILocation(line: 4027, column: 18, scope: !5192)
!5219 = distinct !{!5219, !5195, !5220}
!5220 = !DILocation(line: 4028, column: 5, scope: !5156)
!5221 = !DILocation(line: 4033, column: 7, scope: !5156)
!5222 = !DILocation(line: 4048, column: 1, scope: !5156)
!5223 = !DILocation(line: 4018, column: 13, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5194, file: !3, line: 4017, column: 6)
!5225 = !DILocation(line: 4018, column: 16, scope: !5224)
!5226 = !DILocation(line: 4019, column: 13, scope: !5224)
!5227 = !DILocation(line: 4019, column: 15, scope: !5224)
!5228 = !DILocation(line: 4020, column: 13, scope: !5224)
!5229 = !DILocation(line: 4020, column: 18, scope: !5224)
!5230 = !DILocation(line: 4021, column: 8, scope: !5224)
!5231 = !DILocation(line: 4034, column: 6, scope: !5156)
!5232 = !DILocation(line: 4034, column: 9, scope: !5156)
!5233 = !DILocation(line: 4035, column: 6, scope: !5156)
!5234 = !DILocation(line: 4035, column: 8, scope: !5156)
!5235 = !DILocation(line: 4036, column: 6, scope: !5156)
!5236 = !DILocation(line: 4036, column: 11, scope: !5156)
!5237 = !DILocation(line: 4037, column: 6, scope: !5156)
!5238 = !DILocation(line: 4037, column: 16, scope: !5156)
!5239 = !DILocation(line: 4038, column: 6, scope: !5156)
!5240 = !DILocation(line: 4038, column: 10, scope: !5156)
!5241 = !DILocation(line: 4039, column: 6, scope: !5156)
!5242 = !DILocation(line: 4039, column: 11, scope: !5156)
!5243 = !DILocation(line: 4040, column: 6, scope: !5156)
!5244 = !DILocation(line: 4040, column: 11, scope: !5156)
!5245 = !DILocation(line: 4042, column: 7, scope: !5246)
!5246 = distinct !DILexicalBlock(scope: !5156, file: !3, line: 4042, column: 7)
!5247 = !DILocation(line: 4042, column: 7, scope: !5156)
!5248 = !DILocation(line: 4043, column: 15, scope: !5246)
!5249 = !DILocation(line: 4043, column: 20, scope: !5246)
!5250 = !DILocation(line: 4043, column: 5, scope: !5246)
!5251 = !DILocation(line: 4045, column: 5, scope: !5246)
!5252 = !DILocation(line: 4045, column: 17, scope: !5246)
!5253 = !DILocation(line: 4045, column: 42, scope: !5246)
!5254 = !DILocation(line: 4047, column: 19, scope: !5156)
!5255 = !DILocation(line: 4047, column: 36, scope: !5156)
!5256 = !DILocation(line: 4047, column: 3, scope: !5156)
!5257 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !4804, file: !4804, line: 699, type: !5258, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5260)
!5258 = !DISubroutineType(types: !5259)
!5259 = !{!693, !5002}
!5260 = !{!5261, !5262}
!5261 = !DILocalVariable(name: "ptr", arg: 1, scope: !5257, file: !4804, line: 699, type: !5002)
!5262 = !DILocalVariable(name: "val", scope: !5257, file: !4804, line: 701, type: !693)
!5263 = !DILocation(line: 0, scope: !5257)
!5264 = !DILocation(line: 705, column: 12, scope: !5265)
!5265 = distinct !DILexicalBlock(scope: !5257, file: !4804, line: 705, column: 7)
!5266 = !DILocation(line: 705, column: 7, scope: !5265)
!5267 = !DILocation(line: 705, column: 7, scope: !5257)
!5268 = !DILocation(line: 707, column: 13, scope: !5269)
!5269 = distinct !DILexicalBlock(scope: !5265, file: !4804, line: 706, column: 5)
!5270 = !DILocation(line: 708, column: 24, scope: !5269)
!5271 = !DILocation(line: 708, column: 30, scope: !5269)
!5272 = !DILocation(line: 708, column: 17, scope: !5269)
!5273 = !DILocation(line: 709, column: 7, scope: !5269)
!5274 = !DILocation(line: 711, column: 12, scope: !5275)
!5275 = distinct !DILexicalBlock(scope: !5257, file: !4804, line: 711, column: 7)
!5276 = !DILocation(line: 711, column: 7, scope: !5275)
!5277 = !DILocation(line: 711, column: 7, scope: !5257)
!5278 = !DILocation(line: 713, column: 13, scope: !5279)
!5279 = distinct !DILexicalBlock(scope: !5275, file: !4804, line: 712, column: 5)
!5280 = !DILocation(line: 714, column: 24, scope: !5279)
!5281 = !DILocation(line: 714, column: 30, scope: !5279)
!5282 = !DILocation(line: 714, column: 17, scope: !5279)
!5283 = !DILocation(line: 715, column: 7, scope: !5279)
!5284 = !DILocation(line: 718, column: 8, scope: !5257)
!5285 = !DILocation(line: 718, column: 13, scope: !5257)
!5286 = !DILocation(line: 719, column: 3, scope: !5257)
!5287 = !DILocation(line: 721, column: 1, scope: !5257)
!5288 = distinct !DISubprogram(name: "gsi_next", scope: !588, file: !588, line: 4485, type: !5289, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5292)
!5289 = !DISubroutineType(types: !5290)
!5290 = !{null, !5291}
!5291 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2054, size: 64)
!5292 = !{!5293}
!5293 = !DILocalVariable(name: "i", arg: 1, scope: !5288, file: !588, line: 4485, type: !5291)
!5294 = !DILocation(line: 0, scope: !5288)
!5295 = !DILocation(line: 4487, column: 15, scope: !5288)
!5296 = !DILocation(line: 4487, column: 20, scope: !5288)
!5297 = !DILocation(line: 4487, column: 10, scope: !5288)
!5298 = !DILocation(line: 4488, column: 1, scope: !5288)
!5299 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !4804, file: !4804, line: 910, type: !5300, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5302)
!5300 = !DISubroutineType(types: !5301)
!5301 = !{!2083, !5002, !1017, !680}
!5302 = !{!5303, !5304, !5305, !5306, !5307}
!5303 = !DILocalVariable(name: "ptr", arg: 1, scope: !5299, file: !4804, line: 910, type: !5002)
!5304 = !DILocalVariable(name: "phi", arg: 2, scope: !5299, file: !4804, line: 910, type: !1017)
!5305 = !DILocalVariable(name: "flags", arg: 3, scope: !5299, file: !4804, line: 910, type: !680)
!5306 = !DILocalVariable(name: "phi_def", scope: !5299, file: !4804, line: 912, type: !693)
!5307 = !DILocalVariable(name: "comp", scope: !5299, file: !4804, line: 913, type: !680)
!5308 = !DILocation(line: 0, scope: !5299)
!5309 = !DILocation(line: 912, column: 18, scope: !5299)
!5310 = !DILocation(line: 915, column: 3, scope: !5299)
!5311 = !DILocation(line: 916, column: 8, scope: !5299)
!5312 = !DILocation(line: 916, column: 13, scope: !5299)
!5313 = !DILocation(line: 918, column: 3, scope: !5299)
!5314 = !DILocation(line: 920, column: 11, scope: !5299)
!5315 = !DILocation(line: 923, column: 14, scope: !5316)
!5316 = distinct !DILexicalBlock(scope: !5299, file: !4804, line: 923, column: 7)
!5317 = !DILocation(line: 923, column: 22, scope: !5316)
!5318 = !DILocation(line: 923, column: 7, scope: !5299)
!5319 = !DILocation(line: 925, column: 17, scope: !5320)
!5320 = distinct !DILexicalBlock(scope: !5316, file: !4804, line: 924, column: 5)
!5321 = !DILocation(line: 926, column: 7, scope: !5320)
!5322 = !DILocation(line: 929, column: 8, scope: !5299)
!5323 = !DILocation(line: 929, column: 17, scope: !5299)
!5324 = !DILocation(line: 930, column: 18, scope: !5299)
!5325 = !DILocation(line: 930, column: 8, scope: !5299)
!5326 = !DILocation(line: 930, column: 16, scope: !5299)
!5327 = !DILocation(line: 931, column: 8, scope: !5299)
!5328 = !DILocation(line: 931, column: 18, scope: !5299)
!5329 = !DILocation(line: 932, column: 10, scope: !5299)
!5330 = !DILocation(line: 932, column: 3, scope: !5299)
!5331 = !DILocation(line: 933, column: 1, scope: !5299)
!5332 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !4804, file: !4804, line: 427, type: !5333, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5335)
!5333 = !DISubroutineType(types: !5334)
!5334 = !{!693, !2083}
!5335 = !{!5336}
!5336 = !DILocalVariable(name: "use", arg: 1, scope: !5332, file: !4804, line: 427, type: !2083)
!5337 = !DILocation(line: 0, scope: !5332)
!5338 = !DILocation(line: 429, column: 17, scope: !5332)
!5339 = !DILocation(line: 429, column: 10, scope: !5332)
!5340 = !DILocation(line: 429, column: 3, scope: !5332)
!5341 = distinct !DISubprogram(name: "op_iter_next_use", scope: !4804, file: !4804, line: 659, type: !5342, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5344)
!5342 = !DISubroutineType(types: !5343)
!5343 = !{!2083, !5002}
!5344 = !{!5345, !5346}
!5345 = !DILocalVariable(name: "ptr", arg: 1, scope: !5341, file: !4804, line: 659, type: !5002)
!5346 = !DILocalVariable(name: "use_p", scope: !5341, file: !4804, line: 661, type: !2083)
!5347 = !DILocation(line: 0, scope: !5341)
!5348 = !DILocation(line: 665, column: 12, scope: !5349)
!5349 = distinct !DILexicalBlock(scope: !5341, file: !4804, line: 665, column: 7)
!5350 = !DILocation(line: 665, column: 7, scope: !5349)
!5351 = !DILocation(line: 665, column: 7, scope: !5341)
!5352 = !DILocation(line: 667, column: 15, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5349, file: !4804, line: 666, column: 5)
!5354 = !DILocation(line: 668, column: 30, scope: !5353)
!5355 = !DILocation(line: 668, column: 17, scope: !5353)
!5356 = !DILocation(line: 669, column: 7, scope: !5353)
!5357 = !DILocation(line: 671, column: 12, scope: !5358)
!5358 = distinct !DILexicalBlock(scope: !5341, file: !4804, line: 671, column: 7)
!5359 = !DILocation(line: 671, column: 25, scope: !5358)
!5360 = !DILocation(line: 671, column: 18, scope: !5358)
!5361 = !DILocation(line: 671, column: 7, scope: !5341)
!5362 = !DILocation(line: 673, column: 14, scope: !5363)
!5363 = distinct !DILexicalBlock(scope: !5358, file: !4804, line: 672, column: 5)
!5364 = !DILocation(line: 673, column: 7, scope: !5363)
!5365 = !DILocation(line: 675, column: 8, scope: !5341)
!5366 = !DILocation(line: 675, column: 13, scope: !5341)
!5367 = !DILocation(line: 676, column: 3, scope: !5341)
!5368 = !DILocation(line: 677, column: 1, scope: !5341)
!5369 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !588, file: !588, line: 2241, type: !4323, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5370)
!5370 = !{!5371}
!5371 = !DILocalVariable(name: "gs", arg: 1, scope: !5369, file: !588, line: 2241, type: !4325)
!5372 = !DILocation(line: 0, scope: !5369)
!5373 = !DILocation(line: 2244, column: 10, scope: !5369)
!5374 = !DILocation(line: 2244, column: 3, scope: !5369)
!5375 = distinct !DISubprogram(name: "gimple_op", scope: !588, file: !588, line: 1631, type: !5376, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5378)
!5376 = !DISubroutineType(types: !5377)
!5377 = !{!693, !4325, !7}
!5378 = !{!5379, !5380}
!5379 = !DILocalVariable(name: "gs", arg: 1, scope: !5375, file: !588, line: 1631, type: !4325)
!5380 = !DILocalVariable(name: "i", arg: 2, scope: !5375, file: !588, line: 1631, type: !7)
!5381 = !DILocation(line: 0, scope: !5375)
!5382 = !DILocation(line: 1633, column: 7, scope: !5383)
!5383 = distinct !DILexicalBlock(scope: !5375, file: !588, line: 1633, column: 7)
!5384 = !DILocation(line: 1633, column: 7, scope: !5375)
!5385 = !DILocation(line: 1638, column: 14, scope: !5386)
!5386 = distinct !DILexicalBlock(scope: !5383, file: !588, line: 1634, column: 5)
!5387 = !DILocation(line: 1638, column: 7, scope: !5386)
!5388 = !DILocation(line: 0, scope: !5383)
!5389 = !DILocation(line: 1642, column: 1, scope: !5375)
!5390 = distinct !DISubprogram(name: "gimple_has_ops", scope: !588, file: !588, line: 1274, type: !4991, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5391)
!5391 = !{!5392}
!5392 = !DILocalVariable(name: "g", arg: 1, scope: !5390, file: !588, line: 1274, type: !4325)
!5393 = !DILocation(line: 0, scope: !5390)
!5394 = !DILocation(line: 1276, column: 10, scope: !5390)
!5395 = !DILocation(line: 1276, column: 26, scope: !5390)
!5396 = !DILocation(line: 1276, column: 41, scope: !5390)
!5397 = !DILocation(line: 1276, column: 44, scope: !5390)
!5398 = !DILocation(line: 1276, column: 60, scope: !5390)
!5399 = !DILocation(line: 1276, column: 3, scope: !5390)
!5400 = distinct !DISubprogram(name: "gimple_ops", scope: !588, file: !588, line: 1614, type: !5401, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5403)
!5401 = !DISubroutineType(types: !5402)
!5402 = !{!1051, !1017}
!5403 = !{!5404, !5405}
!5404 = !DILocalVariable(name: "gs", arg: 1, scope: !5400, file: !588, line: 1614, type: !1017)
!5405 = !DILocalVariable(name: "off", scope: !5400, file: !588, line: 1616, type: !1162)
!5406 = !DILocation(line: 0, scope: !5400)
!5407 = !DILocation(line: 1621, column: 28, scope: !5400)
!5408 = !DILocation(line: 1621, column: 9, scope: !5400)
!5409 = !DILocation(line: 1622, column: 3, scope: !5400)
!5410 = !DILocation(line: 1624, column: 20, scope: !5400)
!5411 = !DILocation(line: 1624, column: 32, scope: !5400)
!5412 = !DILocation(line: 1624, column: 10, scope: !5400)
!5413 = !DILocation(line: 1624, column: 3, scope: !5400)
!5414 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !588, file: !588, line: 1073, type: !5415, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5417)
!5415 = !DISubroutineType(types: !5416)
!5416 = !{!626, !1017}
!5417 = !{!5418}
!5418 = !DILocalVariable(name: "gs", arg: 1, scope: !5414, file: !588, line: 1073, type: !1017)
!5419 = !DILocation(line: 0, scope: !5414)
!5420 = !DILocation(line: 1075, column: 24, scope: !5414)
!5421 = !DILocation(line: 1075, column: 10, scope: !5414)
!5422 = !DILocation(line: 1075, column: 3, scope: !5414)
!5423 = distinct !DISubprogram(name: "gss_for_code", scope: !588, file: !588, line: 1061, type: !5424, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5426)
!5424 = !DISubroutineType(types: !5425)
!5425 = !{!626, !587}
!5426 = !{!5427}
!5427 = !DILocalVariable(name: "code", arg: 1, scope: !5423, file: !588, line: 1061, type: !587)
!5428 = !DILocation(line: 0, scope: !5423)
!5429 = !DILocation(line: 1066, column: 10, scope: !5423)
!5430 = !DILocation(line: 1066, column: 3, scope: !5423)
!5431 = distinct !DISubprogram(name: "register_edge_assert_for", scope: !3, file: !3, line: 4341, type: !5432, scopeLine: 4344, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5434)
!5432 = !DISubroutineType(types: !5433)
!5433 = !{!679, !693, !997, !2054, !134, !693, !693}
!5434 = !{!5435, !5436, !5437, !5438, !5439, !5440, !5441, !5442, !5443, !5444, !5445, !5448, !5451, !5452, !5455, !5458}
!5435 = !DILocalVariable(name: "name", arg: 1, scope: !5431, file: !3, line: 4341, type: !693)
!5436 = !DILocalVariable(name: "e", arg: 2, scope: !5431, file: !3, line: 4341, type: !997)
!5437 = !DILocalVariable(name: "si", arg: 3, scope: !5431, file: !3, line: 4341, type: !2054)
!5438 = !DILocalVariable(name: "cond_code", arg: 4, scope: !5431, file: !3, line: 4342, type: !134)
!5439 = !DILocalVariable(name: "cond_op0", arg: 5, scope: !5431, file: !3, line: 4342, type: !693)
!5440 = !DILocalVariable(name: "cond_op1", arg: 6, scope: !5431, file: !3, line: 4343, type: !693)
!5441 = !DILocalVariable(name: "val", scope: !5431, file: !3, line: 4345, type: !693)
!5442 = !DILocalVariable(name: "comp_code", scope: !5431, file: !3, line: 4346, type: !134)
!5443 = !DILocalVariable(name: "retval", scope: !5431, file: !3, line: 4347, type: !679)
!5444 = !DILocalVariable(name: "is_else_edge", scope: !5431, file: !3, line: 4348, type: !679)
!5445 = !DILocalVariable(name: "def_stmt", scope: !5446, file: !3, line: 4376, type: !1017)
!5446 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 4375, column: 5)
!5447 = distinct !DILexicalBlock(scope: !5431, file: !3, line: 4373, column: 7)
!5448 = !DILocalVariable(name: "op0", scope: !5449, file: !3, line: 4382, type: !693)
!5449 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 4381, column: 2)
!5450 = distinct !DILexicalBlock(scope: !5446, file: !3, line: 4378, column: 11)
!5451 = !DILocalVariable(name: "op1", scope: !5449, file: !3, line: 4383, type: !693)
!5452 = !DILocalVariable(name: "def_stmt", scope: !5453, file: !3, line: 4395, type: !1017)
!5453 = distinct !DILexicalBlock(scope: !5454, file: !3, line: 4394, column: 5)
!5454 = distinct !DILexicalBlock(scope: !5431, file: !3, line: 4392, column: 7)
!5455 = !DILocalVariable(name: "op0", scope: !5456, file: !3, line: 4404, type: !693)
!5456 = distinct !DILexicalBlock(scope: !5457, file: !3, line: 4403, column: 2)
!5457 = distinct !DILexicalBlock(scope: !5453, file: !3, line: 4397, column: 11)
!5458 = !DILocalVariable(name: "op1", scope: !5456, file: !3, line: 4405, type: !693)
!5459 = !DILocation(line: 0, scope: !5431)
!5460 = !DILocation(line: 4341, column: 67, scope: !5431)
!5461 = !DILocation(line: 4345, column: 3, scope: !5431)
!5462 = !DILocation(line: 4346, column: 3, scope: !5431)
!5463 = !DILocation(line: 4348, column: 27, scope: !5431)
!5464 = !DILocation(line: 4348, column: 23, scope: !5431)
!5465 = !DILocation(line: 4352, column: 7, scope: !5466)
!5466 = distinct !DILexicalBlock(scope: !5431, file: !3, line: 4352, column: 7)
!5467 = !DILocation(line: 4352, column: 7, scope: !5431)
!5468 = !DILocation(line: 4355, column: 8, scope: !5469)
!5469 = distinct !DILexicalBlock(scope: !5431, file: !3, line: 4355, column: 7)
!5470 = !DILocation(line: 4355, column: 7, scope: !5431)
!5471 = !DILocation(line: 4362, column: 13, scope: !5431)
!5472 = !DILocation(line: 4373, column: 9, scope: !5447)
!5473 = !DILocation(line: 4373, column: 19, scope: !5447)
!5474 = !DILocation(line: 4373, column: 30, scope: !5447)
!5475 = !DILocation(line: 4373, column: 47, scope: !5447)
!5476 = !DILocation(line: 4373, column: 33, scope: !5447)
!5477 = !DILocation(line: 4374, column: 8, scope: !5447)
!5478 = !DILocation(line: 4374, column: 12, scope: !5447)
!5479 = !DILocation(line: 4374, column: 22, scope: !5447)
!5480 = !DILocation(line: 4374, column: 33, scope: !5447)
!5481 = !DILocation(line: 4374, column: 51, scope: !5447)
!5482 = !DILocation(line: 4374, column: 36, scope: !5447)
!5483 = !DILocation(line: 4373, column: 7, scope: !5431)
!5484 = !DILocation(line: 4376, column: 25, scope: !5446)
!5485 = !DILocation(line: 0, scope: !5446)
!5486 = !DILocation(line: 4378, column: 11, scope: !5450)
!5487 = !DILocation(line: 4379, column: 4, scope: !5450)
!5488 = !DILocation(line: 4379, column: 8, scope: !5450)
!5489 = !DILocation(line: 4379, column: 42, scope: !5450)
!5490 = !DILocation(line: 4380, column: 8, scope: !5450)
!5491 = !DILocation(line: 4380, column: 11, scope: !5450)
!5492 = !DILocation(line: 4380, column: 45, scope: !5450)
!5493 = !DILocation(line: 4378, column: 11, scope: !5446)
!5494 = !DILocation(line: 4382, column: 15, scope: !5449)
!5495 = !DILocation(line: 0, scope: !5449)
!5496 = !DILocation(line: 4383, column: 15, scope: !5449)
!5497 = !DILocation(line: 4384, column: 14, scope: !5449)
!5498 = !DILocation(line: 4384, column: 11, scope: !5449)
!5499 = !DILocation(line: 4385, column: 14, scope: !5449)
!5500 = !DILocation(line: 4385, column: 11, scope: !5449)
!5501 = !DILocation(line: 4386, column: 2, scope: !5449)
!5502 = !DILocation(line: 4392, column: 9, scope: !5454)
!5503 = !DILocation(line: 4392, column: 19, scope: !5454)
!5504 = !DILocation(line: 4392, column: 30, scope: !5454)
!5505 = !DILocation(line: 4392, column: 48, scope: !5454)
!5506 = !DILocation(line: 4392, column: 33, scope: !5454)
!5507 = !DILocation(line: 4393, column: 8, scope: !5454)
!5508 = !DILocation(line: 4393, column: 12, scope: !5454)
!5509 = !DILocation(line: 4393, column: 22, scope: !5454)
!5510 = !DILocation(line: 4393, column: 33, scope: !5454)
!5511 = !DILocation(line: 4393, column: 50, scope: !5454)
!5512 = !DILocation(line: 4393, column: 36, scope: !5454)
!5513 = !DILocation(line: 4392, column: 7, scope: !5431)
!5514 = !DILocation(line: 4395, column: 25, scope: !5453)
!5515 = !DILocation(line: 0, scope: !5453)
!5516 = !DILocation(line: 4397, column: 11, scope: !5457)
!5517 = !DILocation(line: 4398, column: 4, scope: !5457)
!5518 = !DILocation(line: 4398, column: 8, scope: !5457)
!5519 = !DILocation(line: 4398, column: 42, scope: !5457)
!5520 = !DILocation(line: 4401, column: 8, scope: !5457)
!5521 = !DILocation(line: 4401, column: 12, scope: !5457)
!5522 = !DILocation(line: 4401, column: 22, scope: !5457)
!5523 = !DILocation(line: 4402, column: 5, scope: !5457)
!5524 = !DILocation(line: 4402, column: 9, scope: !5457)
!5525 = !DILocation(line: 4402, column: 43, scope: !5457)
!5526 = !DILocation(line: 4397, column: 11, scope: !5453)
!5527 = !DILocation(line: 4404, column: 15, scope: !5456)
!5528 = !DILocation(line: 0, scope: !5456)
!5529 = !DILocation(line: 4405, column: 15, scope: !5456)
!5530 = !DILocation(line: 4406, column: 14, scope: !5456)
!5531 = !DILocation(line: 4406, column: 11, scope: !5456)
!5532 = !DILocation(line: 4407, column: 14, scope: !5456)
!5533 = !DILocation(line: 4407, column: 11, scope: !5456)
!5534 = !DILocation(line: 4408, column: 2, scope: !5456)
!5535 = !DILocation(line: 4412, column: 1, scope: !5431)
!5536 = distinct !DISubprogram(name: "gimple_cond_code", scope: !588, file: !588, line: 2221, type: !5109, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5537)
!5537 = !{!5538}
!5538 = !DILocalVariable(name: "gs", arg: 1, scope: !5536, file: !588, line: 2221, type: !4325)
!5539 = !DILocation(line: 0, scope: !5536)
!5540 = !DILocation(line: 2224, column: 38, scope: !5536)
!5541 = !DILocation(line: 2224, column: 3, scope: !5536)
!5542 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !588, file: !588, line: 2271, type: !4323, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5543)
!5543 = !{!5544}
!5544 = !DILocalVariable(name: "gs", arg: 1, scope: !5542, file: !588, line: 2271, type: !4325)
!5545 = !DILocation(line: 0, scope: !5542)
!5546 = !DILocation(line: 2274, column: 10, scope: !5542)
!5547 = !DILocation(line: 2274, column: 3, scope: !5542)
!5548 = distinct !DISubprogram(name: "extract_code_and_val_from_cond_with_ops", scope: !3, file: !3, line: 4059, type: !5549, scopeLine: 4063, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5551)
!5549 = !DISubroutineType(types: !5550)
!5550 = !{!679, !693, !134, !693, !693, !679, !5051, !1051}
!5551 = !{!5552, !5553, !5554, !5555, !5556, !5557, !5558, !5559, !5560, !5561, !5564}
!5552 = !DILocalVariable(name: "name", arg: 1, scope: !5548, file: !3, line: 4059, type: !693)
!5553 = !DILocalVariable(name: "cond_code", arg: 2, scope: !5548, file: !3, line: 4059, type: !134)
!5554 = !DILocalVariable(name: "cond_op0", arg: 3, scope: !5548, file: !3, line: 4060, type: !693)
!5555 = !DILocalVariable(name: "cond_op1", arg: 4, scope: !5548, file: !3, line: 4060, type: !693)
!5556 = !DILocalVariable(name: "invert", arg: 5, scope: !5548, file: !3, line: 4061, type: !679)
!5557 = !DILocalVariable(name: "code_p", arg: 6, scope: !5548, file: !3, line: 4061, type: !5051)
!5558 = !DILocalVariable(name: "val_p", arg: 7, scope: !5548, file: !3, line: 4062, type: !1051)
!5559 = !DILocalVariable(name: "comp_code", scope: !5548, file: !3, line: 4064, type: !134)
!5560 = !DILocalVariable(name: "val", scope: !5548, file: !3, line: 4065, type: !693)
!5561 = !DILocalVariable(name: "min", scope: !5562, file: !3, line: 4100, type: !693)
!5562 = distinct !DILexicalBlock(scope: !5563, file: !3, line: 4099, column: 5)
!5563 = distinct !DILexicalBlock(scope: !5548, file: !3, line: 4097, column: 7)
!5564 = !DILocalVariable(name: "max", scope: !5562, file: !3, line: 4101, type: !693)
!5565 = !DILocation(line: 0, scope: !5548)
!5566 = !DILocation(line: 4069, column: 12, scope: !5567)
!5567 = distinct !DILexicalBlock(scope: !5548, file: !3, line: 4069, column: 7)
!5568 = !DILocation(line: 4069, column: 7, scope: !5548)
!5569 = !DILocation(line: 4074, column: 19, scope: !5570)
!5570 = distinct !DILexicalBlock(scope: !5567, file: !3, line: 4070, column: 5)
!5571 = !DILocation(line: 4076, column: 5, scope: !5570)
!5572 = !DILocation(line: 0, scope: !5567)
!5573 = !DILocation(line: 4086, column: 7, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5548, file: !3, line: 4086, column: 7)
!5575 = !DILocation(line: 4086, column: 7, scope: !5548)
!5576 = !DILocation(line: 4087, column: 17, scope: !5574)
!5577 = !DILocation(line: 4087, column: 5, scope: !5574)
!5578 = !DILocation(line: 4090, column: 7, scope: !5579)
!5579 = distinct !DILexicalBlock(scope: !5548, file: !3, line: 4090, column: 7)
!5580 = !DILocation(line: 4090, column: 7, scope: !5548)
!5581 = !DILocation(line: 4097, column: 29, scope: !5563)
!5582 = !DILocation(line: 4098, column: 10, scope: !5563)
!5583 = !DILocation(line: 4097, column: 7, scope: !5548)
!5584 = !DILocation(line: 4100, column: 18, scope: !5562)
!5585 = !DILocation(line: 0, scope: !5562)
!5586 = !DILocation(line: 4101, column: 18, scope: !5562)
!5587 = !DILocation(line: 4104, column: 4, scope: !5588)
!5588 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 4103, column: 11)
!5589 = !DILocation(line: 4104, column: 9, scope: !5588)
!5590 = !DILocation(line: 4105, column: 8, scope: !5588)
!5591 = !DILocation(line: 4105, column: 11, scope: !5588)
!5592 = !DILocation(line: 4105, column: 37, scope: !5588)
!5593 = !DILocation(line: 4103, column: 11, scope: !5562)
!5594 = !DILocation(line: 4109, column: 4, scope: !5595)
!5595 = distinct !DILexicalBlock(scope: !5562, file: !3, line: 4108, column: 11)
!5596 = !DILocation(line: 4109, column: 9, scope: !5595)
!5597 = !DILocation(line: 4110, column: 8, scope: !5595)
!5598 = !DILocation(line: 4110, column: 11, scope: !5595)
!5599 = !DILocation(line: 4110, column: 37, scope: !5595)
!5600 = !DILocation(line: 4108, column: 11, scope: !5562)
!5601 = !DILocation(line: 4112, column: 5, scope: !5563)
!5602 = !DILocation(line: 4113, column: 11, scope: !5548)
!5603 = !DILocation(line: 4114, column: 10, scope: !5548)
!5604 = !DILocation(line: 4115, column: 3, scope: !5548)
!5605 = !DILocation(line: 4116, column: 1, scope: !5548)
!5606 = distinct !DISubprogram(name: "register_edge_assert_for_2", scope: !3, file: !3, line: 4124, type: !5607, scopeLine: 4127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5609)
!5607 = !DISubroutineType(types: !5608)
!5608 = !{!679, !693, !997, !2054, !134, !693, !693, !679}
!5609 = !{!5610, !5611, !5612, !5613, !5614, !5615, !5616, !5617, !5618, !5619, !5620, !5623, !5624, !5625, !5626, !5629}
!5610 = !DILocalVariable(name: "name", arg: 1, scope: !5606, file: !3, line: 4124, type: !693)
!5611 = !DILocalVariable(name: "e", arg: 2, scope: !5606, file: !3, line: 4124, type: !997)
!5612 = !DILocalVariable(name: "bsi", arg: 3, scope: !5606, file: !3, line: 4124, type: !2054)
!5613 = !DILocalVariable(name: "cond_code", arg: 4, scope: !5606, file: !3, line: 4125, type: !134)
!5614 = !DILocalVariable(name: "cond_op0", arg: 5, scope: !5606, file: !3, line: 4126, type: !693)
!5615 = !DILocalVariable(name: "cond_op1", arg: 6, scope: !5606, file: !3, line: 4126, type: !693)
!5616 = !DILocalVariable(name: "invert", arg: 7, scope: !5606, file: !3, line: 4126, type: !679)
!5617 = !DILocalVariable(name: "val", scope: !5606, file: !3, line: 4128, type: !693)
!5618 = !DILocalVariable(name: "comp_code", scope: !5606, file: !3, line: 4129, type: !134)
!5619 = !DILocalVariable(name: "retval", scope: !5606, file: !3, line: 4130, type: !679)
!5620 = !DILocalVariable(name: "def_stmt", scope: !5621, file: !3, line: 4156, type: !1017)
!5621 = distinct !DILexicalBlock(scope: !5622, file: !3, line: 4155, column: 5)
!5622 = distinct !DILexicalBlock(scope: !5606, file: !3, line: 4151, column: 7)
!5623 = !DILocalVariable(name: "cst2", scope: !5621, file: !3, line: 4157, type: !693)
!5624 = !DILocalVariable(name: "name2", scope: !5621, file: !3, line: 4157, type: !693)
!5625 = !DILocalVariable(name: "name3", scope: !5621, file: !3, line: 4157, type: !693)
!5626 = !DILocalVariable(name: "tmp", scope: !5627, file: !3, line: 4189, type: !693)
!5627 = distinct !DILexicalBlock(scope: !5628, file: !3, line: 4188, column: 2)
!5628 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 4181, column: 11)
!5629 = !DILocalVariable(name: "tmp", scope: !5630, file: !3, line: 4218, type: !693)
!5630 = distinct !DILexicalBlock(scope: !5631, file: !3, line: 4217, column: 2)
!5631 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 4211, column: 11)
!5632 = !DILocation(line: 0, scope: !5606)
!5633 = !DILocation(line: 4124, column: 69, scope: !5606)
!5634 = !DILocation(line: 4128, column: 3, scope: !5606)
!5635 = !DILocation(line: 4129, column: 3, scope: !5606)
!5636 = !DILocation(line: 4132, column: 8, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !5606, file: !3, line: 4132, column: 7)
!5638 = !DILocation(line: 4132, column: 7, scope: !5606)
!5639 = !DILocation(line: 4140, column: 7, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5606, file: !3, line: 4140, column: 7)
!5641 = !DILocation(line: 4141, column: 7, scope: !5640)
!5642 = !DILocation(line: 4141, column: 11, scope: !5640)
!5643 = !DILocation(line: 4140, column: 7, scope: !5606)
!5644 = !DILocation(line: 4143, column: 44, scope: !5645)
!5645 = distinct !DILexicalBlock(scope: !5640, file: !3, line: 4142, column: 5)
!5646 = !DILocation(line: 4143, column: 55, scope: !5645)
!5647 = !DILocation(line: 4143, column: 7, scope: !5645)
!5648 = !DILocation(line: 4145, column: 5, scope: !5645)
!5649 = !DILocation(line: 4151, column: 8, scope: !5622)
!5650 = !DILocation(line: 4152, column: 8, scope: !5622)
!5651 = !DILocation(line: 4153, column: 10, scope: !5622)
!5652 = !DILocation(line: 4153, column: 26, scope: !5622)
!5653 = !DILocation(line: 4154, column: 7, scope: !5622)
!5654 = !DILocation(line: 4154, column: 10, scope: !5622)
!5655 = !DILocation(line: 4151, column: 7, scope: !5606)
!5656 = !DILocation(line: 4156, column: 25, scope: !5621)
!5657 = !DILocation(line: 0, scope: !5621)
!5658 = !DILocation(line: 4160, column: 11, scope: !5659)
!5659 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 4160, column: 11)
!5660 = !DILocation(line: 4161, column: 4, scope: !5659)
!5661 = !DILocation(line: 4161, column: 7, scope: !5659)
!5662 = !DILocation(line: 4161, column: 41, scope: !5659)
!5663 = !DILocation(line: 4160, column: 11, scope: !5621)
!5664 = !DILocation(line: 4163, column: 12, scope: !5665)
!5665 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 4162, column: 2)
!5666 = !DILocation(line: 4164, column: 11, scope: !5665)
!5667 = !DILocation(line: 4165, column: 8, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 4165, column: 8)
!5669 = !DILocation(line: 4165, column: 26, scope: !5668)
!5670 = !DILocation(line: 4166, column: 8, scope: !5668)
!5671 = !DILocation(line: 4166, column: 11, scope: !5668)
!5672 = !DILocation(line: 4166, column: 28, scope: !5668)
!5673 = !DILocation(line: 4165, column: 8, scope: !5665)
!5674 = !DILocation(line: 4167, column: 17, scope: !5668)
!5675 = !DILocation(line: 4167, column: 6, scope: !5668)
!5676 = !DILocation(line: 4171, column: 11, scope: !5677)
!5677 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 4171, column: 11)
!5678 = !DILocation(line: 4171, column: 11, scope: !5621)
!5679 = !DILocation(line: 4173, column: 8, scope: !5680)
!5680 = distinct !DILexicalBlock(scope: !5681, file: !3, line: 4173, column: 8)
!5681 = distinct !DILexicalBlock(scope: !5677, file: !3, line: 4172, column: 2)
!5682 = !DILocation(line: 4174, column: 8, scope: !5680)
!5683 = !DILocation(line: 4174, column: 13, scope: !5680)
!5684 = !DILocation(line: 4175, column: 8, scope: !5680)
!5685 = !DILocation(line: 4175, column: 12, scope: !5680)
!5686 = !DILocation(line: 4176, column: 8, scope: !5680)
!5687 = !DILocation(line: 4176, column: 5, scope: !5680)
!5688 = !DILocation(line: 4173, column: 8, scope: !5681)
!5689 = !DILocation(line: 4177, column: 14, scope: !5680)
!5690 = !DILocation(line: 4177, column: 6, scope: !5680)
!5691 = !DILocation(line: 4157, column: 49, scope: !5621)
!5692 = !DILocation(line: 4181, column: 17, scope: !5628)
!5693 = !DILocation(line: 4182, column: 10, scope: !5628)
!5694 = !DILocation(line: 4182, column: 13, scope: !5628)
!5695 = !DILocation(line: 4182, column: 31, scope: !5628)
!5696 = !DILocation(line: 4183, column: 4, scope: !5628)
!5697 = !DILocation(line: 4183, column: 13, scope: !5628)
!5698 = !DILocation(line: 4184, column: 8, scope: !5628)
!5699 = !DILocation(line: 4184, column: 11, scope: !5628)
!5700 = !DILocation(line: 4184, column: 28, scope: !5628)
!5701 = !DILocation(line: 4185, column: 4, scope: !5628)
!5702 = !DILocation(line: 4185, column: 7, scope: !5628)
!5703 = !DILocation(line: 4186, column: 4, scope: !5628)
!5704 = !DILocation(line: 4186, column: 7, scope: !5628)
!5705 = !DILocation(line: 4187, column: 4, scope: !5628)
!5706 = !DILocation(line: 4187, column: 8, scope: !5628)
!5707 = !DILocation(line: 4181, column: 11, scope: !5621)
!5708 = !DILocation(line: 4192, column: 10, scope: !5627)
!5709 = !DILocation(line: 0, scope: !5627)
!5710 = !DILocation(line: 4193, column: 8, scope: !5627)
!5711 = !DILocation(line: 4194, column: 12, scope: !5712)
!5712 = distinct !DILexicalBlock(scope: !5627, file: !3, line: 4193, column: 8)
!5713 = !DILocation(line: 4194, column: 6, scope: !5712)
!5714 = !DILocation(line: 4196, column: 8, scope: !5715)
!5715 = distinct !DILexicalBlock(scope: !5627, file: !3, line: 4196, column: 8)
!5716 = !DILocation(line: 4196, column: 8, scope: !5627)
!5717 = !DILocation(line: 4198, column: 8, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5715, file: !3, line: 4197, column: 6)
!5719 = !DILocation(line: 4199, column: 28, scope: !5718)
!5720 = !DILocation(line: 4199, column: 8, scope: !5718)
!5721 = !DILocation(line: 4200, column: 17, scope: !5718)
!5722 = !DILocation(line: 4200, column: 8, scope: !5718)
!5723 = !DILocation(line: 4201, column: 28, scope: !5718)
!5724 = !DILocation(line: 4201, column: 8, scope: !5718)
!5725 = !DILocation(line: 4202, column: 17, scope: !5718)
!5726 = !DILocation(line: 4202, column: 8, scope: !5718)
!5727 = !DILocation(line: 4203, column: 6, scope: !5718)
!5728 = !DILocation(line: 4205, column: 41, scope: !5627)
!5729 = !DILocation(line: 4205, column: 52, scope: !5627)
!5730 = !DILocation(line: 4205, column: 4, scope: !5627)
!5731 = !DILocation(line: 4208, column: 2, scope: !5627)
!5732 = !DILocation(line: 4211, column: 17, scope: !5631)
!5733 = !DILocation(line: 4212, column: 10, scope: !5631)
!5734 = !DILocation(line: 4212, column: 13, scope: !5631)
!5735 = !DILocation(line: 4212, column: 31, scope: !5631)
!5736 = !DILocation(line: 4213, column: 4, scope: !5631)
!5737 = !DILocation(line: 4213, column: 7, scope: !5631)
!5738 = !DILocation(line: 4213, column: 24, scope: !5631)
!5739 = !DILocation(line: 4214, column: 4, scope: !5631)
!5740 = !DILocation(line: 4214, column: 7, scope: !5631)
!5741 = !DILocation(line: 4215, column: 4, scope: !5631)
!5742 = !DILocation(line: 4215, column: 7, scope: !5631)
!5743 = !DILocation(line: 4216, column: 4, scope: !5631)
!5744 = !DILocation(line: 4216, column: 8, scope: !5631)
!5745 = !DILocation(line: 4211, column: 11, scope: !5621)
!5746 = !DILocation(line: 0, scope: !5630)
!5747 = !DILocation(line: 4222, column: 8, scope: !5748)
!5748 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 4222, column: 8)
!5749 = !DILocation(line: 4222, column: 28, scope: !5748)
!5750 = !DILocation(line: 4222, column: 25, scope: !5748)
!5751 = !DILocation(line: 4222, column: 8, scope: !5630)
!5752 = !DILocation(line: 4223, column: 12, scope: !5748)
!5753 = !DILocation(line: 4223, column: 6, scope: !5748)
!5754 = !DILocation(line: 4224, column: 13, scope: !5755)
!5755 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 4224, column: 8)
!5756 = !DILocation(line: 4224, column: 8, scope: !5630)
!5757 = !DILocation(line: 4225, column: 12, scope: !5755)
!5758 = !DILocation(line: 4225, column: 6, scope: !5755)
!5759 = !DILocation(line: 4227, column: 8, scope: !5760)
!5760 = distinct !DILexicalBlock(scope: !5630, file: !3, line: 4227, column: 8)
!5761 = !DILocation(line: 4227, column: 8, scope: !5630)
!5762 = !DILocation(line: 4229, column: 8, scope: !5763)
!5763 = distinct !DILexicalBlock(scope: !5760, file: !3, line: 4228, column: 6)
!5764 = !DILocation(line: 4230, column: 28, scope: !5763)
!5765 = !DILocation(line: 4230, column: 8, scope: !5763)
!5766 = !DILocation(line: 4231, column: 17, scope: !5763)
!5767 = !DILocation(line: 4231, column: 8, scope: !5763)
!5768 = !DILocation(line: 4232, column: 28, scope: !5763)
!5769 = !DILocation(line: 4232, column: 8, scope: !5763)
!5770 = !DILocation(line: 4233, column: 17, scope: !5763)
!5771 = !DILocation(line: 4233, column: 8, scope: !5763)
!5772 = !DILocation(line: 4234, column: 6, scope: !5763)
!5773 = !DILocation(line: 4236, column: 41, scope: !5630)
!5774 = !DILocation(line: 4236, column: 52, scope: !5630)
!5775 = !DILocation(line: 4236, column: 4, scope: !5630)
!5776 = !DILocation(line: 4239, column: 2, scope: !5630)
!5777 = !DILocation(line: 4243, column: 1, scope: !5606)
!5778 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !588, file: !588, line: 1759, type: !4323, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5779)
!5779 = !{!5780}
!5780 = !DILocalVariable(name: "gs", arg: 1, scope: !5778, file: !588, line: 1759, type: !4325)
!5781 = !DILocation(line: 0, scope: !5778)
!5782 = !DILocation(line: 1763, column: 7, scope: !5783)
!5783 = distinct !DILexicalBlock(scope: !5778, file: !588, line: 1763, column: 7)
!5784 = !DILocation(line: 1763, column: 27, scope: !5783)
!5785 = !DILocation(line: 1763, column: 7, scope: !5778)
!5786 = !DILocation(line: 1764, column: 12, scope: !5783)
!5787 = !DILocation(line: 1764, column: 5, scope: !5783)
!5788 = !DILocation(line: 0, scope: !5783)
!5789 = !DILocation(line: 1767, column: 1, scope: !5778)
!5790 = distinct !DISubprogram(name: "register_edge_assert_for_1", scope: !3, file: !3, line: 4253, type: !5791, scopeLine: 4255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5793)
!5791 = !DISubroutineType(types: !5792)
!5792 = !{!679, !693, !134, !997, !2054}
!5793 = !{!5794, !5795, !5796, !5797, !5798, !5799, !5800, !5801, !5802, !5805, !5806}
!5794 = !DILocalVariable(name: "op", arg: 1, scope: !5790, file: !3, line: 4253, type: !693)
!5795 = !DILocalVariable(name: "code", arg: 2, scope: !5790, file: !3, line: 4253, type: !134)
!5796 = !DILocalVariable(name: "e", arg: 3, scope: !5790, file: !3, line: 4254, type: !997)
!5797 = !DILocalVariable(name: "bsi", arg: 4, scope: !5790, file: !3, line: 4254, type: !2054)
!5798 = !DILocalVariable(name: "retval", scope: !5790, file: !3, line: 4256, type: !679)
!5799 = !DILocalVariable(name: "op_def", scope: !5790, file: !3, line: 4257, type: !1017)
!5800 = !DILocalVariable(name: "val", scope: !5790, file: !3, line: 4258, type: !693)
!5801 = !DILocalVariable(name: "rhs_code", scope: !5790, file: !3, line: 4259, type: !134)
!5802 = !DILocalVariable(name: "invert", scope: !5803, file: !3, line: 4289, type: !679)
!5803 = distinct !DILexicalBlock(scope: !5804, file: !3, line: 4288, column: 5)
!5804 = distinct !DILexicalBlock(scope: !5790, file: !3, line: 4287, column: 7)
!5805 = !DILocalVariable(name: "op0", scope: !5803, file: !3, line: 4290, type: !693)
!5806 = !DILocalVariable(name: "op1", scope: !5803, file: !3, line: 4291, type: !693)
!5807 = !DILocation(line: 0, scope: !5790)
!5808 = !DILocation(line: 4254, column: 37, scope: !5790)
!5809 = !DILocation(line: 4262, column: 7, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5790, file: !3, line: 4262, column: 7)
!5811 = !DILocation(line: 4262, column: 22, scope: !5810)
!5812 = !DILocation(line: 4262, column: 7, scope: !5790)
!5813 = !DILocation(line: 4271, column: 8, scope: !5814)
!5814 = distinct !DILexicalBlock(scope: !5790, file: !3, line: 4271, column: 7)
!5815 = !DILocation(line: 4271, column: 7, scope: !5790)
!5816 = !DILocation(line: 4273, column: 28, scope: !5817)
!5817 = distinct !DILexicalBlock(scope: !5814, file: !3, line: 4272, column: 5)
!5818 = !DILocation(line: 4273, column: 13, scope: !5817)
!5819 = !DILocation(line: 4274, column: 7, scope: !5817)
!5820 = !DILocation(line: 4276, column: 5, scope: !5817)
!5821 = !DILocation(line: 4281, column: 12, scope: !5790)
!5822 = !DILocation(line: 4282, column: 7, scope: !5823)
!5823 = distinct !DILexicalBlock(scope: !5790, file: !3, line: 4282, column: 7)
!5824 = !DILocation(line: 4282, column: 28, scope: !5823)
!5825 = !DILocation(line: 4282, column: 7, scope: !5790)
!5826 = !DILocation(line: 4285, column: 14, scope: !5790)
!5827 = !DILocation(line: 4287, column: 7, scope: !5804)
!5828 = !DILocation(line: 4287, column: 34, scope: !5804)
!5829 = !DILocation(line: 4287, column: 7, scope: !5790)
!5830 = !DILocation(line: 4289, column: 27, scope: !5803)
!5831 = !DILocation(line: 4289, column: 21, scope: !5803)
!5832 = !DILocation(line: 0, scope: !5803)
!5833 = !DILocation(line: 4290, column: 18, scope: !5803)
!5834 = !DILocation(line: 4291, column: 18, scope: !5803)
!5835 = !DILocation(line: 4293, column: 11, scope: !5836)
!5836 = distinct !DILexicalBlock(scope: !5803, file: !3, line: 4293, column: 11)
!5837 = !DILocation(line: 4293, column: 27, scope: !5836)
!5838 = !DILocation(line: 4293, column: 11, scope: !5803)
!5839 = !DILocation(line: 4294, column: 19, scope: !5836)
!5840 = !DILocation(line: 4294, column: 16, scope: !5836)
!5841 = !DILocation(line: 4294, column: 9, scope: !5836)
!5842 = !DILocation(line: 4296, column: 11, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5803, file: !3, line: 4296, column: 11)
!5844 = !DILocation(line: 4296, column: 27, scope: !5843)
!5845 = !DILocation(line: 4296, column: 11, scope: !5803)
!5846 = !DILocation(line: 4297, column: 19, scope: !5843)
!5847 = !DILocation(line: 4297, column: 16, scope: !5843)
!5848 = !DILocation(line: 4297, column: 9, scope: !5843)
!5849 = !DILocation(line: 4301, column: 6, scope: !5850)
!5850 = distinct !DILexicalBlock(scope: !5804, file: !3, line: 4300, column: 12)
!5851 = !DILocation(line: 4301, column: 10, scope: !5850)
!5852 = !DILocation(line: 4301, column: 42, scope: !5850)
!5853 = !DILocation(line: 4302, column: 3, scope: !5850)
!5854 = !DILocation(line: 4302, column: 6, scope: !5850)
!5855 = !DILocation(line: 4302, column: 38, scope: !5850)
!5856 = !DILocation(line: 4303, column: 5, scope: !5850)
!5857 = !DILocation(line: 4304, column: 9, scope: !5850)
!5858 = !DILocation(line: 4304, column: 13, scope: !5850)
!5859 = !DILocation(line: 4304, column: 45, scope: !5850)
!5860 = !DILocation(line: 4305, column: 6, scope: !5850)
!5861 = !DILocation(line: 4305, column: 9, scope: !5850)
!5862 = !DILocation(line: 4305, column: 41, scope: !5850)
!5863 = !DILocation(line: 4300, column: 12, scope: !5804)
!5864 = !DILocation(line: 4308, column: 45, scope: !5865)
!5865 = distinct !DILexicalBlock(scope: !5850, file: !3, line: 4306, column: 5)
!5866 = !DILocation(line: 4308, column: 17, scope: !5865)
!5867 = !DILocation(line: 4308, column: 14, scope: !5865)
!5868 = !DILocation(line: 4310, column: 45, scope: !5865)
!5869 = !DILocation(line: 4310, column: 17, scope: !5865)
!5870 = !DILocation(line: 4310, column: 14, scope: !5865)
!5871 = !DILocation(line: 4334, column: 1, scope: !5790)
!5872 = !DILocation(line: 4313, column: 12, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5850, file: !3, line: 4313, column: 12)
!5874 = !DILocation(line: 4313, column: 44, scope: !5873)
!5875 = !DILocation(line: 4313, column: 12, scope: !5850)
!5876 = !DILocation(line: 4316, column: 14, scope: !5877)
!5877 = distinct !DILexicalBlock(scope: !5873, file: !3, line: 4314, column: 5)
!5878 = !DILocation(line: 4317, column: 45, scope: !5877)
!5879 = !DILocation(line: 4317, column: 17, scope: !5877)
!5880 = !DILocation(line: 4317, column: 14, scope: !5877)
!5881 = !DILocation(line: 4320, column: 12, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5873, file: !3, line: 4320, column: 12)
!5883 = !DILocation(line: 4320, column: 44, scope: !5882)
!5884 = !DILocation(line: 4320, column: 12, scope: !5873)
!5885 = !DILocation(line: 4323, column: 45, scope: !5886)
!5886 = distinct !DILexicalBlock(scope: !5882, file: !3, line: 4321, column: 5)
!5887 = !DILocation(line: 4323, column: 17, scope: !5886)
!5888 = !DILocation(line: 4323, column: 14, scope: !5886)
!5889 = !DILocation(line: 4326, column: 12, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !5882, file: !3, line: 4326, column: 12)
!5891 = !DILocation(line: 4326, column: 12, scope: !5882)
!5892 = !DILocation(line: 4329, column: 45, scope: !5893)
!5893 = distinct !DILexicalBlock(scope: !5890, file: !3, line: 4327, column: 5)
!5894 = !DILocation(line: 4329, column: 17, scope: !5893)
!5895 = !DILocation(line: 4329, column: 14, scope: !5893)
!5896 = distinct !DISubprogram(name: "live_on_edge", scope: !3, file: !3, line: 50, type: !5897, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5899)
!5897 = !DISubroutineType(types: !5898)
!5898 = !{!679, !997, !693}
!5899 = !{!5900, !5901}
!5900 = !DILocalVariable(name: "e", arg: 1, scope: !5896, file: !3, line: 50, type: !997)
!5901 = !DILocalVariable(name: "name", arg: 2, scope: !5896, file: !3, line: 50, type: !693)
!5902 = !DILocation(line: 0, scope: !5896)
!5903 = !DILocation(line: 52, column: 11, scope: !5896)
!5904 = !DILocation(line: 52, column: 19, scope: !5896)
!5905 = !DILocation(line: 52, column: 25, scope: !5896)
!5906 = !DILocation(line: 53, column: 4, scope: !5896)
!5907 = !DILocation(line: 53, column: 7, scope: !5896)
!5908 = !DILocation(line: 52, column: 3, scope: !5896)
!5909 = distinct !DISubprogram(name: "gimple_assign_cast_p", scope: !588, file: !588, line: 1853, type: !4796, scopeLine: 1854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5910)
!5910 = !{!5911, !5912}
!5911 = !DILocalVariable(name: "s", arg: 1, scope: !5909, file: !588, line: 1853, type: !1017)
!5912 = !DILocalVariable(name: "sc", scope: !5913, file: !588, line: 1857, type: !134)
!5913 = distinct !DILexicalBlock(scope: !5914, file: !588, line: 1856, column: 5)
!5914 = distinct !DILexicalBlock(scope: !5909, file: !588, line: 1855, column: 7)
!5915 = !DILocation(line: 0, scope: !5909)
!5916 = !DILocation(line: 1855, column: 7, scope: !5914)
!5917 = !DILocation(line: 1855, column: 7, scope: !5909)
!5918 = !DILocation(line: 1857, column: 27, scope: !5913)
!5919 = !DILocation(line: 0, scope: !5913)
!5920 = !DILocation(line: 1858, column: 14, scope: !5913)
!5921 = !DILocation(line: 1860, column: 7, scope: !5913)
!5922 = !DILocation(line: 1864, column: 1, scope: !5909)
!5923 = distinct !DISubprogram(name: "gimple_expr_type", scope: !588, file: !588, line: 4366, type: !4323, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5924)
!5924 = !{!5925, !5926, !5927}
!5925 = !DILocalVariable(name: "stmt", arg: 1, scope: !5923, file: !588, line: 4366, type: !4325)
!5926 = !DILocalVariable(name: "code", scope: !5923, file: !588, line: 4368, type: !587)
!5927 = !DILocalVariable(name: "type", scope: !5928, file: !588, line: 4372, type: !693)
!5928 = distinct !DILexicalBlock(scope: !5929, file: !588, line: 4371, column: 5)
!5929 = distinct !DILexicalBlock(scope: !5923, file: !588, line: 4370, column: 7)
!5930 = !DILocation(line: 0, scope: !5923)
!5931 = !DILocation(line: 4368, column: 27, scope: !5923)
!5932 = !DILocation(line: 4370, column: 29, scope: !5929)
!5933 = !DILocation(line: 4378, column: 9, scope: !5934)
!5934 = distinct !DILexicalBlock(scope: !5928, file: !588, line: 4377, column: 11)
!5935 = !DILocation(line: 0, scope: !5928)
!5936 = !DILocation(line: 4378, column: 2, scope: !5934)
!5937 = !DILocation(line: 4380, column: 10, scope: !5934)
!5938 = !DILocation(line: 4380, column: 2, scope: !5934)
!5939 = !DILocation(line: 4383, column: 13, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !5934, file: !588, line: 4381, column: 4)
!5941 = !DILocation(line: 4384, column: 6, scope: !5940)
!5942 = !DILocation(line: 4388, column: 13, scope: !5940)
!5943 = !DILocation(line: 4389, column: 6, scope: !5940)
!5944 = !DILocation(line: 4394, column: 12, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5929, file: !588, line: 4393, column: 12)
!5946 = !DILocation(line: 4394, column: 5, scope: !5945)
!5947 = !DILocation(line: 4396, column: 12, scope: !5945)
!5948 = !DILocation(line: 4396, column: 5, scope: !5945)
!5949 = !DILocation(line: 0, scope: !5929)
!5950 = !DILocation(line: 4397, column: 1, scope: !5923)
!5951 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !588, file: !588, line: 1966, type: !4323, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5952)
!5952 = !{!5953, !5954, !5955}
!5953 = !DILocalVariable(name: "gs", arg: 1, scope: !5951, file: !588, line: 1966, type: !4325)
!5954 = !DILocalVariable(name: "fn", scope: !5951, file: !588, line: 1968, type: !693)
!5955 = !DILocalVariable(name: "type", scope: !5951, file: !588, line: 1969, type: !693)
!5956 = !DILocation(line: 0, scope: !5951)
!5957 = !DILocation(line: 1968, column: 13, scope: !5951)
!5958 = !DILocation(line: 1969, column: 15, scope: !5951)
!5959 = !DILocation(line: 1972, column: 10, scope: !5951)
!5960 = !DILocation(line: 1976, column: 10, scope: !5951)
!5961 = !DILocation(line: 1976, column: 3, scope: !5951)
!5962 = distinct !DISubprogram(name: "gimple_call_fn", scope: !588, file: !588, line: 1911, type: !4323, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5963)
!5963 = !{!5964}
!5964 = !DILocalVariable(name: "gs", arg: 1, scope: !5962, file: !588, line: 1911, type: !4325)
!5965 = !DILocation(line: 0, scope: !5962)
!5966 = !DILocation(line: 1914, column: 10, scope: !5962)
!5967 = !DILocation(line: 1914, column: 3, scope: !5962)
!5968 = distinct !DISubprogram(name: "gimple_num_ops", scope: !588, file: !588, line: 1596, type: !5969, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5971)
!5969 = !DISubroutineType(types: !5970)
!5970 = !{!7, !4325}
!5971 = !{!5972}
!5972 = !DILocalVariable(name: "gs", arg: 1, scope: !5968, file: !588, line: 1596, type: !4325)
!5973 = !DILocation(line: 0, scope: !5968)
!5974 = !DILocation(line: 1598, column: 21, scope: !5968)
!5975 = !DILocation(line: 1598, column: 3, scope: !5968)
!5976 = distinct !DISubprogram(name: "gimple_switch_num_labels", scope: !588, file: !588, line: 3157, type: !5969, scopeLine: 3158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5977)
!5977 = !{!5978, !5979}
!5978 = !DILocalVariable(name: "gs", arg: 1, scope: !5976, file: !588, line: 3157, type: !4325)
!5979 = !DILocalVariable(name: "num_ops", scope: !5976, file: !588, line: 3159, type: !7)
!5980 = !DILocation(line: 0, scope: !5976)
!5981 = !DILocation(line: 3161, column: 13, scope: !5976)
!5982 = !DILocation(line: 3162, column: 3, scope: !5976)
!5983 = !DILocation(line: 3163, column: 18, scope: !5976)
!5984 = !DILocation(line: 3163, column: 3, scope: !5976)
!5985 = distinct !DISubprogram(name: "gimple_switch_index", scope: !588, file: !588, line: 3180, type: !4323, scopeLine: 3181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5986)
!5986 = !{!5987}
!5987 = !DILocalVariable(name: "gs", arg: 1, scope: !5985, file: !588, line: 3180, type: !4325)
!5988 = !DILocation(line: 0, scope: !5985)
!5989 = !DILocation(line: 3183, column: 10, scope: !5985)
!5990 = !DILocation(line: 3183, column: 3, scope: !5985)
!5991 = distinct !DISubprogram(name: "gimple_switch_label", scope: !588, file: !588, line: 3212, type: !5376, scopeLine: 3213, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5992)
!5992 = !{!5993, !5994}
!5993 = !DILocalVariable(name: "gs", arg: 1, scope: !5991, file: !588, line: 3212, type: !4325)
!5994 = !DILocalVariable(name: "index", arg: 2, scope: !5991, file: !588, line: 3212, type: !7)
!5995 = !DILocation(line: 0, scope: !5991)
!5996 = !DILocation(line: 3215, column: 3, scope: !5991)
!5997 = !DILocation(line: 3216, column: 10, scope: !5991)
!5998 = !DILocation(line: 3216, column: 3, scope: !5991)
!5999 = distinct !DISubprogram(name: "compare_case_labels", scope: !3, file: !3, line: 4463, type: !1516, scopeLine: 4464, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6000)
!6000 = !{!6001, !6002, !6003, !6004, !6005, !6006}
!6001 = !DILocalVariable(name: "p1", arg: 1, scope: !5999, file: !3, line: 4463, type: !1511)
!6002 = !DILocalVariable(name: "p2", arg: 2, scope: !5999, file: !3, line: 4463, type: !1511)
!6003 = !DILocalVariable(name: "case1", scope: !5999, file: !3, line: 4465, type: !2079)
!6004 = !DILocalVariable(name: "case2", scope: !5999, file: !3, line: 4466, type: !2079)
!6005 = !DILocalVariable(name: "uid1", scope: !5999, file: !3, line: 4467, type: !7)
!6006 = !DILocalVariable(name: "uid2", scope: !5999, file: !3, line: 4468, type: !7)
!6007 = !DILocation(line: 0, scope: !5999)
!6008 = !DILocation(line: 4465, column: 29, scope: !5999)
!6009 = !DILocation(line: 4465, column: 28, scope: !5999)
!6010 = !DILocation(line: 4466, column: 29, scope: !5999)
!6011 = !DILocation(line: 4466, column: 28, scope: !5999)
!6012 = !DILocation(line: 4467, column: 23, scope: !5999)
!6013 = !DILocation(line: 4468, column: 23, scope: !5999)
!6014 = !DILocation(line: 4470, column: 12, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !5999, file: !3, line: 4470, column: 7)
!6016 = !DILocation(line: 4470, column: 7, scope: !5999)
!6017 = !DILocation(line: 4472, column: 17, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !6015, file: !3, line: 4472, column: 12)
!6019 = !DILocation(line: 4472, column: 12, scope: !6015)
!6020 = !DILocation(line: 4475, column: 12, scope: !6021)
!6021 = distinct !DILexicalBlock(scope: !6022, file: !3, line: 4475, column: 11)
!6022 = distinct !DILexicalBlock(scope: !6018, file: !3, line: 4473, column: 5)
!6023 = !DILocation(line: 4475, column: 11, scope: !6022)
!6024 = !DILocation(line: 4477, column: 17, scope: !6025)
!6025 = distinct !DILexicalBlock(scope: !6021, file: !3, line: 4477, column: 16)
!6026 = !DILocation(line: 4477, column: 16, scope: !6021)
!6027 = !DILocation(line: 4480, column: 16, scope: !6025)
!6028 = !DILocation(line: 4480, column: 9, scope: !6025)
!6029 = !DILocation(line: 0, scope: !6015)
!6030 = !DILocation(line: 4484, column: 1, scope: !5999)
!6031 = distinct !DISubprogram(name: "bb_seq", scope: !588, file: !588, line: 237, type: !6032, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6037)
!6032 = !DISubroutineType(types: !6033)
!6033 = !{!1007, !6034}
!6034 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !694, line: 112, baseType: !6035)
!6035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6036, size: 64)
!6036 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !982)
!6037 = !{!6038}
!6038 = !DILocalVariable(name: "bb", arg: 1, scope: !6031, file: !588, line: 237, type: !6034)
!6039 = !DILocation(line: 0, scope: !6031)
!6040 = !DILocation(line: 239, column: 17, scope: !6031)
!6041 = !DILocation(line: 239, column: 23, scope: !6031)
!6042 = !DILocation(line: 239, column: 33, scope: !6031)
!6043 = !DILocation(line: 239, column: 43, scope: !6031)
!6044 = !DILocation(line: 239, column: 36, scope: !6031)
!6045 = !DILocation(line: 239, column: 10, scope: !6031)
!6046 = !DILocation(line: 239, column: 68, scope: !6031)
!6047 = !DILocation(line: 239, column: 3, scope: !6031)
!6048 = distinct !DISubprogram(name: "gimple_seq_first", scope: !588, file: !588, line: 159, type: !6049, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6054)
!6049 = !DISubroutineType(types: !6050)
!6050 = !{!1012, !6051}
!6051 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !694, line: 67, baseType: !6052)
!6052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6053, size: 64)
!6053 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1009)
!6054 = !{!6055}
!6055 = !DILocalVariable(name: "s", arg: 1, scope: !6048, file: !588, line: 159, type: !6051)
!6056 = !DILocation(line: 0, scope: !6048)
!6057 = !DILocation(line: 161, column: 10, scope: !6048)
!6058 = !DILocation(line: 161, column: 17, scope: !6048)
!6059 = !DILocation(line: 161, column: 3, scope: !6048)
!6060 = distinct !DISubprogram(name: "op_iter_init", scope: !4804, file: !4804, line: 742, type: !6061, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6063)
!6061 = !DISubroutineType(types: !6062)
!6062 = !{null, !5002, !1017, !680}
!6063 = !{!6064, !6065, !6066}
!6064 = !DILocalVariable(name: "ptr", arg: 1, scope: !6060, file: !4804, line: 742, type: !5002)
!6065 = !DILocalVariable(name: "stmt", arg: 2, scope: !6060, file: !4804, line: 742, type: !1017)
!6066 = !DILocalVariable(name: "flags", arg: 3, scope: !6060, file: !4804, line: 742, type: !680)
!6067 = !DILocation(line: 0, scope: !6060)
!6068 = !DILocation(line: 746, column: 3, scope: !6060)
!6069 = !DILocation(line: 748, column: 22, scope: !6060)
!6070 = !DILocation(line: 748, column: 15, scope: !6060)
!6071 = !DILocation(line: 748, column: 52, scope: !6060)
!6072 = !DILocation(line: 748, column: 8, scope: !6060)
!6073 = !DILocation(line: 748, column: 13, scope: !6060)
!6074 = !DILocation(line: 749, column: 15, scope: !6075)
!6075 = distinct !DILexicalBlock(scope: !6060, file: !4804, line: 749, column: 7)
!6076 = !DILocation(line: 750, column: 7, scope: !6075)
!6077 = !DILocation(line: 750, column: 10, scope: !6075)
!6078 = !DILocation(line: 751, column: 7, scope: !6075)
!6079 = !DILocation(line: 751, column: 10, scope: !6075)
!6080 = !DILocation(line: 751, column: 29, scope: !6075)
!6081 = !DILocation(line: 749, column: 7, scope: !6060)
!6082 = !DILocation(line: 752, column: 22, scope: !6075)
!6083 = !DILocation(line: 752, column: 28, scope: !6075)
!6084 = !DILocation(line: 752, column: 15, scope: !6075)
!6085 = !DILocation(line: 752, column: 5, scope: !6075)
!6086 = !DILocation(line: 753, column: 22, scope: !6060)
!6087 = !DILocation(line: 753, column: 15, scope: !6060)
!6088 = !DILocation(line: 753, column: 52, scope: !6060)
!6089 = !DILocation(line: 753, column: 8, scope: !6060)
!6090 = !DILocation(line: 753, column: 13, scope: !6060)
!6091 = !DILocation(line: 754, column: 15, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6060, file: !4804, line: 754, column: 7)
!6093 = !DILocation(line: 755, column: 7, scope: !6092)
!6094 = !DILocation(line: 755, column: 10, scope: !6092)
!6095 = !DILocation(line: 756, column: 7, scope: !6092)
!6096 = !DILocation(line: 756, column: 10, scope: !6092)
!6097 = !DILocation(line: 756, column: 29, scope: !6092)
!6098 = !DILocation(line: 754, column: 7, scope: !6060)
!6099 = !DILocation(line: 757, column: 22, scope: !6092)
!6100 = !DILocation(line: 757, column: 28, scope: !6092)
!6101 = !DILocation(line: 757, column: 15, scope: !6092)
!6102 = !DILocation(line: 757, column: 5, scope: !6092)
!6103 = !DILocation(line: 758, column: 8, scope: !6060)
!6104 = !DILocation(line: 758, column: 13, scope: !6060)
!6105 = !DILocation(line: 760, column: 8, scope: !6060)
!6106 = !DILocation(line: 760, column: 14, scope: !6060)
!6107 = !DILocation(line: 761, column: 8, scope: !6060)
!6108 = !DILocation(line: 761, column: 16, scope: !6060)
!6109 = !DILocation(line: 762, column: 8, scope: !6060)
!6110 = !DILocation(line: 762, column: 17, scope: !6060)
!6111 = !DILocation(line: 763, column: 1, scope: !6060)
!6112 = distinct !DISubprogram(name: "gimple_def_ops", scope: !588, file: !588, line: 1292, type: !6113, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6115)
!6113 = !DISubroutineType(types: !6114)
!6114 = !{!1046, !4325}
!6115 = !{!6116}
!6116 = !DILocalVariable(name: "g", arg: 1, scope: !6112, file: !588, line: 1292, type: !4325)
!6117 = !DILocation(line: 0, scope: !6112)
!6118 = !DILocation(line: 1294, column: 8, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6112, file: !588, line: 1294, column: 7)
!6120 = !DILocation(line: 1294, column: 7, scope: !6112)
!6121 = !DILocation(line: 1296, column: 26, scope: !6112)
!6122 = !DILocation(line: 1296, column: 3, scope: !6112)
!6123 = !DILocation(line: 1297, column: 1, scope: !6112)
!6124 = distinct !DISubprogram(name: "gimple_vdef", scope: !588, file: !588, line: 1375, type: !4323, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6125)
!6125 = !{!6126}
!6126 = !DILocalVariable(name: "g", arg: 1, scope: !6124, file: !588, line: 1375, type: !4325)
!6127 = !DILocation(line: 0, scope: !6124)
!6128 = !DILocation(line: 1377, column: 8, scope: !6129)
!6129 = distinct !DILexicalBlock(scope: !6124, file: !588, line: 1377, column: 7)
!6130 = !DILocation(line: 1377, column: 7, scope: !6124)
!6131 = !DILocation(line: 1379, column: 23, scope: !6124)
!6132 = !DILocation(line: 1379, column: 3, scope: !6124)
!6133 = !DILocation(line: 1380, column: 1, scope: !6124)
!6134 = distinct !DISubprogram(name: "gimple_use_ops", scope: !588, file: !588, line: 1313, type: !6135, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6137)
!6135 = !DISubroutineType(types: !6136)
!6136 = !{!1053, !4325}
!6137 = !{!6138}
!6138 = !DILocalVariable(name: "g", arg: 1, scope: !6134, file: !588, line: 1313, type: !4325)
!6139 = !DILocation(line: 0, scope: !6134)
!6140 = !DILocation(line: 1315, column: 8, scope: !6141)
!6141 = distinct !DILexicalBlock(scope: !6134, file: !588, line: 1315, column: 7)
!6142 = !DILocation(line: 1315, column: 7, scope: !6134)
!6143 = !DILocation(line: 1317, column: 26, scope: !6134)
!6144 = !DILocation(line: 1317, column: 3, scope: !6134)
!6145 = !DILocation(line: 1318, column: 1, scope: !6134)
!6146 = distinct !DISubprogram(name: "gimple_vuse", scope: !588, file: !588, line: 1365, type: !4323, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6147)
!6147 = !{!6148}
!6148 = !DILocalVariable(name: "g", arg: 1, scope: !6146, file: !588, line: 1365, type: !4325)
!6149 = !DILocation(line: 0, scope: !6146)
!6150 = !DILocation(line: 1367, column: 8, scope: !6151)
!6151 = distinct !DILexicalBlock(scope: !6146, file: !588, line: 1367, column: 7)
!6152 = !DILocation(line: 1367, column: 7, scope: !6146)
!6153 = !DILocation(line: 1369, column: 23, scope: !6146)
!6154 = !DILocation(line: 1369, column: 3, scope: !6146)
!6155 = !DILocation(line: 1370, column: 1, scope: !6146)
!6156 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !588, file: !588, line: 1283, type: !4991, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6157)
!6157 = !{!6158}
!6158 = !DILocalVariable(name: "g", arg: 1, scope: !6156, file: !588, line: 1283, type: !4325)
!6159 = !DILocation(line: 0, scope: !6156)
!6160 = !DILocation(line: 1285, column: 10, scope: !6156)
!6161 = !DILocation(line: 1285, column: 26, scope: !6156)
!6162 = !DILocation(line: 1285, column: 43, scope: !6156)
!6163 = !DILocation(line: 1285, column: 46, scope: !6156)
!6164 = !DILocation(line: 1285, column: 62, scope: !6156)
!6165 = !DILocation(line: 1285, column: 3, scope: !6156)
!6166 = distinct !DISubprogram(name: "gimple_bb", scope: !588, file: !588, line: 1112, type: !6167, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6169)
!6167 = !DISubroutineType(types: !6168)
!6168 = !{!981, !4325}
!6169 = !{!6170}
!6170 = !DILocalVariable(name: "g", arg: 1, scope: !6166, file: !588, line: 1112, type: !4325)
!6171 = !DILocation(line: 0, scope: !6166)
!6172 = !DILocation(line: 1114, column: 20, scope: !6166)
!6173 = !DILocation(line: 1114, column: 3, scope: !6166)
!6174 = distinct !DISubprogram(name: "gimple_expr_code", scope: !588, file: !588, line: 1438, type: !5109, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6175)
!6175 = !{!6176, !6177}
!6176 = !DILocalVariable(name: "stmt", arg: 1, scope: !6174, file: !588, line: 1438, type: !4325)
!6177 = !DILocalVariable(name: "code", scope: !6174, file: !588, line: 1440, type: !587)
!6178 = !DILocation(line: 0, scope: !6174)
!6179 = !DILocation(line: 1440, column: 27, scope: !6174)
!6180 = !DILocation(line: 1441, column: 29, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6174, file: !588, line: 1441, column: 7)
!6182 = !DILocation(line: 1442, column: 42, scope: !6181)
!6183 = !DILocation(line: 1442, column: 5, scope: !6181)
!6184 = !DILocation(line: 1446, column: 5, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6181, file: !588, line: 1443, column: 12)
!6186 = !DILocation(line: 1448, column: 5, scope: !6174)
!6187 = !DILocation(line: 1450, column: 1, scope: !6174)
!6188 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !588, file: !588, line: 1686, type: !6189, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6191)
!6189 = !DISubroutineType(types: !6190)
!6190 = !{!652, !134}
!6191 = !{!6192}
!6192 = !DILocalVariable(name: "code", arg: 1, scope: !6188, file: !588, line: 1686, type: !134)
!6193 = !DILocation(line: 0, scope: !6188)
!6194 = !DILocation(line: 1688, column: 34, scope: !6188)
!6195 = !DILocation(line: 1688, column: 10, scope: !6188)
!6196 = !DILocation(line: 1688, column: 3, scope: !6188)
!6197 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !4804, file: !4804, line: 434, type: !6198, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6201)
!6198 = !DISubroutineType(types: !6199)
!6199 = !{!693, !6200}
!6200 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !581, line: 27, baseType: !1051)
!6201 = !{!6202}
!6202 = !DILocalVariable(name: "def", arg: 1, scope: !6197, file: !4804, line: 434, type: !6200)
!6203 = !DILocation(line: 0, scope: !6197)
!6204 = !DILocation(line: 436, column: 10, scope: !6197)
!6205 = !DILocation(line: 436, column: 3, scope: !6197)
!6206 = distinct !DISubprogram(name: "gimple_phi_result", scope: !588, file: !588, line: 3071, type: !4323, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6207)
!6207 = !{!6208}
!6208 = !DILocalVariable(name: "gs", arg: 1, scope: !6206, file: !588, line: 3071, type: !4325)
!6209 = !DILocation(line: 0, scope: !6206)
!6210 = !DILocation(line: 3074, column: 25, scope: !6206)
!6211 = !DILocation(line: 3074, column: 3, scope: !6206)
!6212 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !4804, file: !4804, line: 729, type: !6213, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6215)
!6213 = !DISubroutineType(types: !6214)
!6214 = !{null, !5002}
!6215 = !{!6216}
!6216 = !DILocalVariable(name: "ptr", arg: 1, scope: !6212, file: !4804, line: 729, type: !5002)
!6217 = !DILocation(line: 0, scope: !6212)
!6218 = !DILocation(line: 731, column: 8, scope: !6212)
!6219 = !DILocation(line: 731, column: 13, scope: !6212)
!6220 = !DILocation(line: 732, column: 8, scope: !6212)
!6221 = !DILocation(line: 732, column: 13, scope: !6212)
!6222 = !DILocation(line: 733, column: 8, scope: !6212)
!6223 = !DILocation(line: 733, column: 18, scope: !6212)
!6224 = !DILocation(line: 734, column: 8, scope: !6212)
!6225 = !DILocation(line: 734, column: 14, scope: !6212)
!6226 = !DILocation(line: 735, column: 8, scope: !6212)
!6227 = !DILocation(line: 735, column: 16, scope: !6212)
!6228 = !DILocation(line: 736, column: 8, scope: !6212)
!6229 = !DILocation(line: 736, column: 17, scope: !6212)
!6230 = !DILocation(line: 737, column: 8, scope: !6212)
!6231 = !DILocation(line: 737, column: 13, scope: !6212)
!6232 = !DILocation(line: 738, column: 1, scope: !6212)
!6233 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !588, file: !588, line: 3061, type: !5969, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6234)
!6234 = !{!6235}
!6235 = !DILocalVariable(name: "gs", arg: 1, scope: !6233, file: !588, line: 3061, type: !4325)
!6236 = !DILocation(line: 0, scope: !6233)
!6237 = !DILocation(line: 3064, column: 25, scope: !6233)
!6238 = !DILocation(line: 3064, column: 3, scope: !6233)
!6239 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !4804, file: !4804, line: 442, type: !6240, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6242)
!6240 = !DISubroutineType(types: !6241)
!6241 = !{!2083, !1017, !680}
!6242 = !{!6243, !6244}
!6243 = !DILocalVariable(name: "gs", arg: 1, scope: !6239, file: !4804, line: 442, type: !1017)
!6244 = !DILocalVariable(name: "i", arg: 2, scope: !6239, file: !4804, line: 442, type: !680)
!6245 = !DILocation(line: 0, scope: !6239)
!6246 = !DILocation(line: 444, column: 11, scope: !6239)
!6247 = !DILocation(line: 444, column: 35, scope: !6239)
!6248 = !DILocation(line: 444, column: 3, scope: !6239)
!6249 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !588, file: !588, line: 3100, type: !6250, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6253)
!6250 = !DISubroutineType(types: !6251)
!6251 = !{!6252, !1017, !7}
!6252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1120, size: 64)
!6253 = !{!6254, !6255}
!6254 = !DILocalVariable(name: "gs", arg: 1, scope: !6249, file: !588, line: 3100, type: !1017)
!6255 = !DILocalVariable(name: "index", arg: 2, scope: !6249, file: !588, line: 3100, type: !7)
!6256 = !DILocation(line: 0, scope: !6249)
!6257 = !DILocation(line: 3103, column: 3, scope: !6249)
!6258 = !DILocation(line: 3104, column: 12, scope: !6249)
!6259 = !DILocation(line: 3104, column: 3, scope: !6249)
!6260 = distinct !DISubprogram(name: "ei_end_p", scope: !343, file: !343, line: 721, type: !6261, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6263)
!6261 = !DISubroutineType(types: !6262)
!6262 = !{!679, !4372}
!6263 = !{!6264}
!6264 = !DILocalVariable(name: "i", arg: 1, scope: !6260, file: !343, line: 721, type: !4372)
!6265 = !DILocation(line: 723, column: 22, scope: !6260)
!6266 = !DILocation(line: 723, column: 19, scope: !6260)
!6267 = !DILocation(line: 723, column: 10, scope: !6260)
!6268 = !DILocation(line: 723, column: 3, scope: !6260)
!6269 = distinct !DISubprogram(name: "ei_edge", scope: !343, file: !343, line: 752, type: !6270, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6272)
!6270 = !DISubroutineType(types: !6271)
!6271 = !{!997, !4372}
!6272 = !{!6273}
!6273 = !DILocalVariable(name: "i", arg: 1, scope: !6269, file: !343, line: 752, type: !4372)
!6274 = !DILocation(line: 754, column: 10, scope: !6269)
!6275 = !DILocation(line: 754, column: 3, scope: !6269)
!6276 = distinct !DISubprogram(name: "ei_container", scope: !343, file: !343, line: 685, type: !6277, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6279)
!6277 = !DISubroutineType(types: !6278)
!6278 = !{!985, !4372}
!6279 = !{!6280}
!6280 = !DILocalVariable(name: "i", arg: 1, scope: !6276, file: !343, line: 685, type: !4372)
!6281 = !DILocation(line: 687, column: 3, scope: !6276)
!6282 = !DILocation(line: 688, column: 10, scope: !6276)
!6283 = !DILocation(line: 688, column: 3, scope: !6276)
!6284 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !343, file: !343, line: 150, type: !6285, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6287)
!6285 = !DISubroutineType(types: !6286)
!6286 = !{!997, !4267, !7}
!6287 = !{!6288, !6289}
!6288 = !DILocalVariable(name: "vec_", arg: 1, scope: !6284, file: !343, line: 150, type: !4267)
!6289 = !DILocalVariable(name: "ix_", arg: 2, scope: !6284, file: !343, line: 150, type: !7)
!6290 = !DILocation(line: 0, scope: !6284)
!6291 = !DILocation(line: 150, column: 1, scope: !6284)
!6292 = distinct !DISubprogram(name: "process_assert_insertions_for", scope: !3, file: !3, line: 4853, type: !6293, scopeLine: 4854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6295)
!6293 = !DISubroutineType(types: !6294)
!6294 = !{!679, !693, !2047}
!6295 = !{!6296, !6297, !6298, !6299, !6300, !6301, !6302}
!6296 = !DILocalVariable(name: "name", arg: 1, scope: !6292, file: !3, line: 4853, type: !693)
!6297 = !DILocalVariable(name: "loc", arg: 2, scope: !6292, file: !3, line: 4853, type: !2047)
!6298 = !DILocalVariable(name: "stmt", scope: !6292, file: !3, line: 4856, type: !1017)
!6299 = !DILocalVariable(name: "cond", scope: !6292, file: !3, line: 4857, type: !693)
!6300 = !DILocalVariable(name: "assert_stmt", scope: !6292, file: !3, line: 4858, type: !1017)
!6301 = !DILocalVariable(name: "ei", scope: !6292, file: !3, line: 4859, type: !4372)
!6302 = !DILocalVariable(name: "e", scope: !6292, file: !3, line: 4860, type: !997)
!6303 = !DILocation(line: 0, scope: !6292)
!6304 = !DILocation(line: 4859, column: 3, scope: !6292)
!6305 = !DILocation(line: 4860, column: 3, scope: !6292)
!6306 = !DILocation(line: 4863, column: 12, scope: !6307)
!6307 = distinct !DILexicalBlock(scope: !6292, file: !3, line: 4863, column: 7)
!6308 = !DILocation(line: 4863, column: 25, scope: !6307)
!6309 = !DILocation(line: 4863, column: 17, scope: !6307)
!6310 = !DILocation(line: 4863, column: 7, scope: !6292)
!6311 = !DILocation(line: 4866, column: 10, scope: !6292)
!6312 = !DILocation(line: 4867, column: 17, scope: !6292)
!6313 = !DILocation(line: 4868, column: 12, scope: !6314)
!6314 = distinct !DILexicalBlock(scope: !6292, file: !3, line: 4868, column: 7)
!6315 = !DILocation(line: 4868, column: 7, scope: !6314)
!6316 = !DILocation(line: 4868, column: 7, scope: !6292)
!6317 = !DILocation(line: 4877, column: 7, scope: !6318)
!6318 = distinct !DILexicalBlock(scope: !6314, file: !3, line: 4869, column: 5)
!6319 = !DILocation(line: 4878, column: 7, scope: !6318)
!6320 = !DILocation(line: 4883, column: 25, scope: !6292)
!6321 = !DILocation(line: 4883, column: 10, scope: !6292)
!6322 = !DILocation(line: 4884, column: 8, scope: !6323)
!6323 = distinct !DILexicalBlock(scope: !6292, file: !3, line: 4884, column: 7)
!6324 = !DILocation(line: 4884, column: 7, scope: !6292)
!6325 = !DILocation(line: 4886, column: 7, scope: !6326)
!6326 = distinct !DILexicalBlock(scope: !6323, file: !3, line: 4885, column: 5)
!6327 = !DILocation(line: 4887, column: 7, scope: !6326)
!6328 = !DILocation(line: 4894, column: 3, scope: !6329)
!6329 = distinct !DILexicalBlock(scope: !6292, file: !3, line: 4894, column: 3)
!6330 = !DILocation(line: 0, scope: !6331)
!6331 = distinct !DILexicalBlock(scope: !6329, file: !3, line: 4894, column: 3)
!6332 = !DILocation(line: 4894, column: 3, scope: !6331)
!6333 = !DILocation(line: 4895, column: 11, scope: !6334)
!6334 = distinct !DILexicalBlock(scope: !6331, file: !3, line: 4895, column: 9)
!6335 = !DILocation(line: 4895, column: 14, scope: !6334)
!6336 = !DILocation(line: 4895, column: 20, scope: !6334)
!6337 = !DILocation(line: 4895, column: 9, scope: !6331)
!6338 = !DILocation(line: 4897, column: 2, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 4896, column: 7)
!6340 = !DILocation(line: 4898, column: 2, scope: !6339)
!6341 = distinct !{!6341, !6328, !6342}
!6342 = !DILocation(line: 4899, column: 7, scope: !6329)
!6343 = !DILocation(line: 4901, column: 3, scope: !6292)
!6344 = !DILocation(line: 4903, column: 5, scope: !6292)
!6345 = !DILocation(line: 4905, column: 1, scope: !6292)
!6346 = distinct !DISubprogram(name: "build_assert_expr_for", scope: !3, file: !3, line: 3743, type: !6347, scopeLine: 3744, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6349)
!6347 = !DISubroutineType(types: !6348)
!6348 = !{!1017, !693, !693}
!6349 = !{!6350, !6351, !6352, !6353, !6354, !6357}
!6350 = !DILocalVariable(name: "cond", arg: 1, scope: !6346, file: !3, line: 3743, type: !693)
!6351 = !DILocalVariable(name: "v", arg: 2, scope: !6346, file: !3, line: 3743, type: !693)
!6352 = !DILocalVariable(name: "n", scope: !6346, file: !3, line: 3745, type: !693)
!6353 = !DILocalVariable(name: "assertion", scope: !6346, file: !3, line: 3746, type: !1017)
!6354 = !DILocalVariable(name: "a", scope: !6355, file: !3, line: 3753, type: !693)
!6355 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 3752, column: 5)
!6356 = distinct !DILexicalBlock(scope: !6346, file: !3, line: 3751, column: 7)
!6357 = !DILocalVariable(name: "op0", scope: !6358, file: !3, line: 3759, type: !693)
!6358 = distinct !DILexicalBlock(scope: !6359, file: !3, line: 3757, column: 5)
!6359 = distinct !DILexicalBlock(scope: !6356, file: !3, line: 3756, column: 12)
!6360 = !DILocation(line: 0, scope: !6346)
!6361 = !DILocation(line: 3748, column: 3, scope: !6346)
!6362 = !DILocation(line: 3749, column: 7, scope: !6346)
!6363 = !DILocation(line: 3751, column: 7, scope: !6356)
!6364 = !DILocation(line: 3751, column: 7, scope: !6346)
!6365 = !DILocation(line: 3753, column: 16, scope: !6355)
!6366 = !DILocation(line: 0, scope: !6355)
!6367 = !DILocation(line: 3754, column: 19, scope: !6355)
!6368 = !DILocation(line: 3755, column: 5, scope: !6355)
!6369 = !DILocation(line: 3756, column: 29, scope: !6359)
!6370 = !DILocation(line: 3756, column: 12, scope: !6356)
!6371 = !DILocation(line: 3759, column: 18, scope: !6358)
!6372 = !DILocation(line: 0, scope: !6358)
!6373 = !DILocation(line: 3760, column: 7, scope: !6358)
!6374 = !DILocation(line: 3761, column: 19, scope: !6358)
!6375 = !DILocation(line: 3762, column: 5, scope: !6358)
!6376 = !DILocation(line: 3763, column: 29, scope: !6377)
!6377 = distinct !DILexicalBlock(scope: !6359, file: !3, line: 3763, column: 12)
!6378 = !DILocation(line: 3763, column: 12, scope: !6359)
!6379 = !DILocation(line: 3766, column: 7, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6377, file: !3, line: 3764, column: 5)
!6381 = !DILocation(line: 3767, column: 19, scope: !6380)
!6382 = !DILocation(line: 3768, column: 5, scope: !6380)
!6383 = !DILocation(line: 3770, column: 5, scope: !6377)
!6384 = !DILocation(line: 0, scope: !6356)
!6385 = !DILocation(line: 3772, column: 3, scope: !6346)
!6386 = !DILocation(line: 3772, column: 25, scope: !6346)
!6387 = !DILocation(line: 3778, column: 3, scope: !6346)
!6388 = !DILocation(line: 3780, column: 3, scope: !6346)
!6389 = distinct !DISubprogram(name: "stmt_interesting_for_vrp", scope: !3, file: !3, line: 5274, type: !4796, scopeLine: 5275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6390)
!6390 = !{!6391, !6392}
!6391 = !DILocalVariable(name: "stmt", arg: 1, scope: !6389, file: !3, line: 5274, type: !1017)
!6392 = !DILocalVariable(name: "lhs", scope: !6393, file: !3, line: 5283, type: !693)
!6393 = distinct !DILexicalBlock(scope: !6394, file: !3, line: 5282, column: 5)
!6394 = distinct !DILexicalBlock(scope: !6395, file: !3, line: 5281, column: 12)
!6395 = distinct !DILexicalBlock(scope: !6389, file: !3, line: 5276, column: 7)
!6396 = !DILocation(line: 0, scope: !6389)
!6397 = !DILocation(line: 5276, column: 7, scope: !6395)
!6398 = !DILocation(line: 5276, column: 26, scope: !6395)
!6399 = !DILocation(line: 5277, column: 7, scope: !6395)
!6400 = !DILocation(line: 5277, column: 25, scope: !6395)
!6401 = !DILocation(line: 5277, column: 10, scope: !6395)
!6402 = !DILocation(line: 5278, column: 7, scope: !6395)
!6403 = !DILocation(line: 5278, column: 11, scope: !6395)
!6404 = !DILocation(line: 5279, column: 4, scope: !6395)
!6405 = !DILocation(line: 5279, column: 7, scope: !6395)
!6406 = !DILocation(line: 5276, column: 7, scope: !6389)
!6407 = !DILocation(line: 5281, column: 12, scope: !6394)
!6408 = !DILocation(line: 5281, column: 36, scope: !6394)
!6409 = !DILocation(line: 5281, column: 39, scope: !6394)
!6410 = !DILocation(line: 5281, column: 12, scope: !6395)
!6411 = !DILocation(line: 5283, column: 18, scope: !6393)
!6412 = !DILocation(line: 0, scope: !6393)
!6413 = !DILocation(line: 5288, column: 11, scope: !6414)
!6414 = distinct !DILexicalBlock(scope: !6393, file: !3, line: 5288, column: 11)
!6415 = !DILocation(line: 5288, column: 15, scope: !6414)
!6416 = !DILocation(line: 5288, column: 18, scope: !6414)
!6417 = !DILocation(line: 5288, column: 34, scope: !6414)
!6418 = !DILocation(line: 5289, column: 4, scope: !6414)
!6419 = !DILocation(line: 5289, column: 8, scope: !6414)
!6420 = !DILocation(line: 5290, column: 8, scope: !6414)
!6421 = !DILocation(line: 5290, column: 11, scope: !6414)
!6422 = !DILocation(line: 5291, column: 4, scope: !6414)
!6423 = !DILocation(line: 5291, column: 9, scope: !6414)
!6424 = !DILocation(line: 5292, column: 9, scope: !6414)
!6425 = !DILocation(line: 5292, column: 12, scope: !6414)
!6426 = !DILocation(line: 5292, column: 38, scope: !6414)
!6427 = !DILocation(line: 5293, column: 9, scope: !6414)
!6428 = !DILocation(line: 5293, column: 12, scope: !6414)
!6429 = !DILocation(line: 5294, column: 8, scope: !6414)
!6430 = !DILocation(line: 5294, column: 12, scope: !6414)
!6431 = !DILocation(line: 5288, column: 11, scope: !6393)
!6432 = !DILocation(line: 5296, column: 5, scope: !6394)
!6433 = !DILocation(line: 5297, column: 12, scope: !6434)
!6434 = distinct !DILexicalBlock(scope: !6394, file: !3, line: 5297, column: 12)
!6435 = !DILocation(line: 5297, column: 31, scope: !6434)
!6436 = !DILocation(line: 5298, column: 5, scope: !6434)
!6437 = !DILocation(line: 5298, column: 8, scope: !6434)
!6438 = !DILocation(line: 5298, column: 27, scope: !6434)
!6439 = !DILocation(line: 5297, column: 12, scope: !6394)
!6440 = !DILocation(line: 5301, column: 3, scope: !6389)
!6441 = !DILocation(line: 5302, column: 1, scope: !6389)
!6442 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !588, file: !588, line: 3080, type: !5401, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6443)
!6443 = !{!6444}
!6444 = !DILocalVariable(name: "gs", arg: 1, scope: !6442, file: !588, line: 3080, type: !1017)
!6445 = !DILocation(line: 0, scope: !6442)
!6446 = !DILocation(line: 3083, column: 26, scope: !6442)
!6447 = !DILocation(line: 3083, column: 3, scope: !6442)
!6448 = distinct !DISubprogram(name: "prop_set_simulate_again", scope: !391, file: !391, line: 28, type: !6449, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6451)
!6449 = !DISubroutineType(types: !6450)
!6450 = !{null, !1017, !679}
!6451 = !{!6452, !6453}
!6452 = !DILocalVariable(name: "s", arg: 1, scope: !6448, file: !391, line: 28, type: !1017)
!6453 = !DILocalVariable(name: "visit_p", arg: 2, scope: !6448, file: !391, line: 28, type: !679)
!6454 = !DILocation(line: 0, scope: !6448)
!6455 = !DILocation(line: 30, column: 3, scope: !6448)
!6456 = !DILocation(line: 31, column: 1, scope: !6448)
!6457 = distinct !DISubprogram(name: "is_gimple_call", scope: !588, file: !588, line: 1870, type: !4991, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6458)
!6458 = !{!6459}
!6459 = !DILocalVariable(name: "gs", arg: 1, scope: !6457, file: !588, line: 1870, type: !4325)
!6460 = !DILocation(line: 0, scope: !6457)
!6461 = !DILocation(line: 1872, column: 10, scope: !6457)
!6462 = !DILocation(line: 1872, column: 27, scope: !6457)
!6463 = !DILocation(line: 1872, column: 3, scope: !6457)
!6464 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !588, file: !588, line: 1954, type: !4323, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6465)
!6465 = !{!6466, !6467}
!6466 = !DILocalVariable(name: "gs", arg: 1, scope: !6464, file: !588, line: 1954, type: !4325)
!6467 = !DILocalVariable(name: "addr", scope: !6464, file: !588, line: 1956, type: !693)
!6468 = !DILocation(line: 0, scope: !6464)
!6469 = !DILocation(line: 1956, column: 15, scope: !6464)
!6470 = !DILocation(line: 1957, column: 7, scope: !6471)
!6471 = distinct !DILexicalBlock(scope: !6464, file: !588, line: 1957, column: 7)
!6472 = !DILocation(line: 1957, column: 24, scope: !6471)
!6473 = !DILocation(line: 1957, column: 7, scope: !6464)
!6474 = !DILocation(line: 1958, column: 12, scope: !6471)
!6475 = !DILocation(line: 1958, column: 5, scope: !6471)
!6476 = !DILocation(line: 1960, column: 1, scope: !6464)
!6477 = distinct !DISubprogram(name: "gimple_set_visited", scope: !588, file: !588, line: 1217, type: !6449, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6478)
!6478 = !{!6479, !6480}
!6479 = !DILocalVariable(name: "stmt", arg: 1, scope: !6477, file: !588, line: 1217, type: !1017)
!6480 = !DILocalVariable(name: "visited_p", arg: 2, scope: !6477, file: !588, line: 1217, type: !679)
!6481 = !DILocation(line: 0, scope: !6477)
!6482 = !DILocation(line: 1219, column: 16, scope: !6477)
!6483 = !DILocation(line: 1219, column: 24, scope: !6477)
!6484 = !DILocation(line: 1220, column: 1, scope: !6477)
!6485 = distinct !DISubprogram(name: "vrp_visit_assignment_or_call", scope: !3, file: !3, line: 5360, type: !6486, scopeLine: 5361, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6488)
!6486 = !DISubroutineType(types: !6487)
!6487 = !{!658, !1017, !1051}
!6488 = !{!6489, !6490, !6491, !6492, !6493, !6494, !6495}
!6489 = !DILocalVariable(name: "stmt", arg: 1, scope: !6485, file: !3, line: 5360, type: !1017)
!6490 = !DILocalVariable(name: "output_p", arg: 2, scope: !6485, file: !3, line: 5360, type: !1051)
!6491 = !DILocalVariable(name: "def", scope: !6485, file: !3, line: 5362, type: !693)
!6492 = !DILocalVariable(name: "lhs", scope: !6485, file: !3, line: 5362, type: !693)
!6493 = !DILocalVariable(name: "iter", scope: !6485, file: !3, line: 5363, type: !3721)
!6494 = !DILocalVariable(name: "code", scope: !6485, file: !3, line: 5364, type: !587)
!6495 = !DILocalVariable(name: "new_vr", scope: !6496, file: !3, line: 5376, type: !688)
!6496 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 5375, column: 5)
!6497 = distinct !DILexicalBlock(scope: !6485, file: !3, line: 5368, column: 7)
!6498 = !DILocation(line: 0, scope: !6485)
!6499 = !DILocation(line: 5363, column: 3, scope: !6485)
!6500 = !DILocation(line: 5364, column: 27, scope: !6485)
!6501 = !DILocation(line: 5365, column: 9, scope: !6485)
!6502 = !DILocation(line: 5368, column: 7, scope: !6497)
!6503 = !DILocation(line: 5368, column: 23, scope: !6497)
!6504 = !DILocation(line: 5369, column: 7, scope: !6497)
!6505 = !DILocation(line: 5369, column: 12, scope: !6497)
!6506 = !DILocation(line: 5372, column: 5, scope: !6497)
!6507 = !DILocation(line: 5372, column: 8, scope: !6497)
!6508 = !DILocation(line: 5373, column: 5, scope: !6497)
!6509 = !DILocation(line: 5373, column: 8, scope: !6497)
!6510 = !DILocation(line: 5374, column: 4, scope: !6497)
!6511 = !DILocation(line: 5374, column: 7, scope: !6497)
!6512 = !DILocation(line: 5368, column: 7, scope: !6485)
!6513 = !DILocation(line: 5376, column: 7, scope: !6496)
!6514 = !DILocation(line: 5376, column: 21, scope: !6496)
!6515 = !DILocation(line: 5378, column: 16, scope: !6516)
!6516 = distinct !DILexicalBlock(scope: !6496, file: !3, line: 5378, column: 11)
!6517 = !DILocation(line: 5378, column: 11, scope: !6496)
!6518 = !DILocation(line: 0, scope: !6496)
!6519 = !DILocation(line: 5379, column: 2, scope: !6516)
!6520 = !DILocation(line: 5381, column: 2, scope: !6516)
!6521 = !DILocation(line: 5383, column: 11, scope: !6522)
!6522 = distinct !DILexicalBlock(scope: !6496, file: !3, line: 5383, column: 11)
!6523 = !DILocation(line: 5383, column: 11, scope: !6496)
!6524 = !DILocation(line: 5385, column: 14, scope: !6525)
!6525 = distinct !DILexicalBlock(scope: !6522, file: !3, line: 5384, column: 2)
!6526 = !DILocation(line: 5387, column: 8, scope: !6527)
!6527 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 5387, column: 8)
!6528 = !DILocation(line: 5387, column: 18, scope: !6527)
!6529 = !DILocation(line: 5387, column: 22, scope: !6527)
!6530 = !DILocation(line: 5387, column: 33, scope: !6527)
!6531 = !DILocation(line: 5387, column: 8, scope: !6525)
!6532 = !DILocation(line: 5389, column: 8, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6527, file: !3, line: 5388, column: 6)
!6534 = !DILocation(line: 5390, column: 28, scope: !6533)
!6535 = !DILocation(line: 5390, column: 8, scope: !6533)
!6536 = !DILocation(line: 5391, column: 17, scope: !6533)
!6537 = !DILocation(line: 5391, column: 8, scope: !6533)
!6538 = !DILocation(line: 5392, column: 26, scope: !6533)
!6539 = !DILocation(line: 5392, column: 8, scope: !6533)
!6540 = !DILocation(line: 5393, column: 17, scope: !6533)
!6541 = !DILocation(line: 5393, column: 8, scope: !6533)
!6542 = !DILocation(line: 5394, column: 6, scope: !6533)
!6543 = !DILocation(line: 5396, column: 15, scope: !6544)
!6544 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 5396, column: 8)
!6545 = !DILocation(line: 5396, column: 20, scope: !6544)
!6546 = !DILocation(line: 0, scope: !6525)
!6547 = !DILocation(line: 5403, column: 5, scope: !6497)
!6548 = !DILocation(line: 5406, column: 3, scope: !6549)
!6549 = distinct !DILexicalBlock(scope: !6485, file: !3, line: 5406, column: 3)
!6550 = !DILocation(line: 0, scope: !6549)
!6551 = !DILocation(line: 5406, column: 3, scope: !6552)
!6552 = distinct !DILexicalBlock(scope: !6549, file: !3, line: 5406, column: 3)
!6553 = !DILocation(line: 5407, column: 33, scope: !6552)
!6554 = !DILocation(line: 5407, column: 5, scope: !6552)
!6555 = distinct !{!6555, !6548, !6556}
!6556 = !DILocation(line: 5407, column: 54, scope: !6549)
!6557 = !DILocation(line: 5410, column: 1, scope: !6485)
!6558 = distinct !DISubprogram(name: "vrp_visit_cond_stmt", scope: !3, file: !3, line: 5781, type: !6559, scopeLine: 5782, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6561)
!6559 = !DISubroutineType(types: !6560)
!6560 = !{!658, !1017, !3805}
!6561 = !{!6562, !6563, !6564, !6565, !6566, !6569}
!6562 = !DILocalVariable(name: "stmt", arg: 1, scope: !6558, file: !3, line: 5781, type: !1017)
!6563 = !DILocalVariable(name: "taken_edge_p", arg: 2, scope: !6558, file: !3, line: 5781, type: !3805)
!6564 = !DILocalVariable(name: "val", scope: !6558, file: !3, line: 5783, type: !693)
!6565 = !DILocalVariable(name: "sop", scope: !6558, file: !3, line: 5784, type: !679)
!6566 = !DILocalVariable(name: "use", scope: !6567, file: !3, line: 5790, type: !693)
!6567 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 5789, column: 5)
!6568 = distinct !DILexicalBlock(scope: !6558, file: !3, line: 5788, column: 7)
!6569 = !DILocalVariable(name: "i", scope: !6567, file: !3, line: 5791, type: !3721)
!6570 = !DILocation(line: 0, scope: !6558)
!6571 = !DILocation(line: 5784, column: 3, scope: !6558)
!6572 = !DILocation(line: 5786, column: 17, scope: !6558)
!6573 = !DILocation(line: 5788, column: 7, scope: !6568)
!6574 = !DILocation(line: 5788, column: 17, scope: !6568)
!6575 = !DILocation(line: 5788, column: 21, scope: !6568)
!6576 = !DILocation(line: 5788, column: 32, scope: !6568)
!6577 = !DILocation(line: 5788, column: 7, scope: !6558)
!6578 = !DILocation(line: 5791, column: 7, scope: !6567)
!6579 = !DILocation(line: 5793, column: 7, scope: !6567)
!6580 = !DILocation(line: 5794, column: 26, scope: !6567)
!6581 = !DILocation(line: 5794, column: 7, scope: !6567)
!6582 = !DILocation(line: 5795, column: 16, scope: !6567)
!6583 = !DILocation(line: 5795, column: 7, scope: !6567)
!6584 = !DILocation(line: 0, scope: !6567)
!6585 = !DILocation(line: 5797, column: 7, scope: !6586)
!6586 = distinct !DILexicalBlock(scope: !6567, file: !3, line: 5797, column: 7)
!6587 = !DILocation(line: 0, scope: !6586)
!6588 = !DILocation(line: 5797, column: 7, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6586, file: !3, line: 5797, column: 7)
!6590 = !DILocation(line: 5799, column: 4, scope: !6591)
!6591 = distinct !DILexicalBlock(scope: !6589, file: !3, line: 5798, column: 2)
!6592 = !DILocation(line: 5800, column: 24, scope: !6591)
!6593 = !DILocation(line: 5800, column: 4, scope: !6591)
!6594 = !DILocation(line: 5801, column: 13, scope: !6591)
!6595 = !DILocation(line: 5801, column: 4, scope: !6591)
!6596 = !DILocation(line: 5802, column: 22, scope: !6591)
!6597 = !DILocation(line: 5802, column: 33, scope: !6591)
!6598 = !DILocation(line: 5802, column: 42, scope: !6591)
!6599 = !DILocation(line: 5802, column: 4, scope: !6591)
!6600 = distinct !{!6600, !6585, !6601}
!6601 = !DILocation(line: 5803, column: 2, scope: !6586)
!6602 = !DILocation(line: 5805, column: 7, scope: !6567)
!6603 = !DILocation(line: 5806, column: 5, scope: !6568)
!6604 = !DILocation(line: 5806, column: 5, scope: !6567)
!6605 = !DILocation(line: 5850, column: 7, scope: !6558)
!6606 = !DILocation(line: 5852, column: 50, scope: !6558)
!6607 = !DILocation(line: 5853, column: 8, scope: !6558)
!6608 = !DILocation(line: 5854, column: 8, scope: !6558)
!6609 = !DILocation(line: 5852, column: 9, scope: !6558)
!6610 = !DILocation(line: 5856, column: 7, scope: !6611)
!6611 = distinct !DILexicalBlock(scope: !6558, file: !3, line: 5856, column: 7)
!6612 = !DILocation(line: 5856, column: 7, scope: !6558)
!6613 = !DILocation(line: 5858, column: 12, scope: !6614)
!6614 = distinct !DILexicalBlock(scope: !6615, file: !3, line: 5858, column: 11)
!6615 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 5857, column: 5)
!6616 = !DILocation(line: 5858, column: 11, scope: !6615)
!6617 = !DILocation(line: 5859, column: 35, scope: !6614)
!6618 = !DILocation(line: 5859, column: 18, scope: !6614)
!6619 = !DILocation(line: 5859, column: 16, scope: !6614)
!6620 = !DILocation(line: 5859, column: 2, scope: !6614)
!6621 = !DILocation(line: 5862, column: 8, scope: !6622)
!6622 = distinct !DILexicalBlock(scope: !6623, file: !3, line: 5862, column: 8)
!6623 = distinct !DILexicalBlock(scope: !6614, file: !3, line: 5861, column: 2)
!6624 = !DILocation(line: 5862, column: 18, scope: !6622)
!6625 = !DILocation(line: 5862, column: 22, scope: !6622)
!6626 = !DILocation(line: 5862, column: 33, scope: !6622)
!6627 = !DILocation(line: 5862, column: 8, scope: !6623)
!6628 = !DILocation(line: 5863, column: 6, scope: !6622)
!6629 = !DILocation(line: 5870, column: 7, scope: !6630)
!6630 = distinct !DILexicalBlock(scope: !6558, file: !3, line: 5870, column: 7)
!6631 = !DILocation(line: 5870, column: 17, scope: !6630)
!6632 = !DILocation(line: 5870, column: 21, scope: !6630)
!6633 = !DILocation(line: 5870, column: 32, scope: !6630)
!6634 = !DILocation(line: 5870, column: 7, scope: !6558)
!6635 = !DILocation(line: 5872, column: 7, scope: !6636)
!6636 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 5871, column: 5)
!6637 = !DILocation(line: 5873, column: 15, scope: !6638)
!6638 = distinct !DILexicalBlock(scope: !6636, file: !3, line: 5873, column: 11)
!6639 = !DILocation(line: 0, scope: !6638)
!6640 = !DILocation(line: 5873, column: 11, scope: !6636)
!6641 = !DILocation(line: 5874, column: 2, scope: !6638)
!6642 = !DILocation(line: 5876, column: 2, scope: !6638)
!6643 = !DILocation(line: 5879, column: 11, scope: !6558)
!6644 = !DILocation(line: 5879, column: 10, scope: !6558)
!6645 = !DILocation(line: 5880, column: 1, scope: !6558)
!6646 = !DILocation(line: 5879, column: 3, scope: !6558)
!6647 = distinct !DISubprogram(name: "vrp_visit_switch_stmt", scope: !3, file: !3, line: 6002, type: !6559, scopeLine: 6003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6648)
!6648 = !{!6649, !6650, !6651, !6652, !6653, !6654, !6655, !6656}
!6649 = !DILocalVariable(name: "stmt", arg: 1, scope: !6647, file: !3, line: 6002, type: !1017)
!6650 = !DILocalVariable(name: "taken_edge_p", arg: 2, scope: !6647, file: !3, line: 6002, type: !3805)
!6651 = !DILocalVariable(name: "op", scope: !6647, file: !3, line: 6004, type: !693)
!6652 = !DILocalVariable(name: "val", scope: !6647, file: !3, line: 6004, type: !693)
!6653 = !DILocalVariable(name: "vr", scope: !6647, file: !3, line: 6005, type: !687)
!6654 = !DILocalVariable(name: "i", scope: !6647, file: !3, line: 6006, type: !1162)
!6655 = !DILocalVariable(name: "j", scope: !6647, file: !3, line: 6006, type: !1162)
!6656 = !DILocalVariable(name: "take_default", scope: !6647, file: !3, line: 6007, type: !679)
!6657 = !DILocation(line: 0, scope: !6647)
!6658 = !DILocation(line: 6006, column: 3, scope: !6647)
!6659 = !DILocation(line: 6006, column: 10, scope: !6647)
!6660 = !DILocation(line: 6006, column: 17, scope: !6647)
!6661 = !DILocation(line: 6009, column: 17, scope: !6647)
!6662 = !DILocation(line: 6010, column: 8, scope: !6647)
!6663 = !DILocation(line: 6011, column: 7, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 6011, column: 7)
!6665 = !DILocation(line: 6011, column: 22, scope: !6664)
!6666 = !DILocation(line: 6011, column: 7, scope: !6647)
!6667 = !DILocation(line: 6014, column: 8, scope: !6647)
!6668 = !DILocation(line: 6015, column: 7, scope: !6669)
!6669 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 6015, column: 7)
!6670 = !DILocation(line: 6015, column: 17, scope: !6669)
!6671 = !DILocation(line: 6015, column: 21, scope: !6669)
!6672 = !DILocation(line: 6015, column: 32, scope: !6669)
!6673 = !DILocation(line: 6015, column: 7, scope: !6647)
!6674 = !DILocation(line: 6017, column: 7, scope: !6675)
!6675 = distinct !DILexicalBlock(scope: !6669, file: !3, line: 6016, column: 5)
!6676 = !DILocation(line: 6018, column: 27, scope: !6675)
!6677 = !DILocation(line: 6018, column: 7, scope: !6675)
!6678 = !DILocation(line: 6019, column: 16, scope: !6675)
!6679 = !DILocation(line: 6019, column: 7, scope: !6675)
!6680 = !DILocation(line: 6020, column: 25, scope: !6675)
!6681 = !DILocation(line: 6020, column: 7, scope: !6675)
!6682 = !DILocation(line: 6021, column: 16, scope: !6675)
!6683 = !DILocation(line: 6021, column: 7, scope: !6675)
!6684 = !DILocation(line: 6022, column: 5, scope: !6675)
!6685 = !DILocation(line: 6024, column: 11, scope: !6686)
!6686 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 6024, column: 7)
!6687 = !DILocation(line: 6024, column: 16, scope: !6686)
!6688 = !DILocation(line: 6025, column: 7, scope: !6686)
!6689 = !DILocation(line: 6025, column: 10, scope: !6686)
!6690 = !DILocation(line: 6024, column: 7, scope: !6647)
!6691 = !DILocation(line: 6029, column: 52, scope: !6647)
!6692 = !DILocation(line: 6029, column: 61, scope: !6647)
!6693 = !DILocation(line: 6029, column: 19, scope: !6647)
!6694 = !DILocation(line: 6029, column: 18, scope: !6647)
!6695 = !DILocation(line: 6033, column: 7, scope: !6696)
!6696 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 6033, column: 7)
!6697 = !DILocation(line: 6033, column: 11, scope: !6696)
!6698 = !DILocation(line: 6033, column: 9, scope: !6696)
!6699 = !DILocation(line: 6033, column: 7, scope: !6647)
!6700 = !DILocation(line: 6035, column: 7, scope: !6701)
!6701 = distinct !DILexicalBlock(scope: !6696, file: !3, line: 6034, column: 5)
!6702 = !DILocation(line: 6036, column: 13, scope: !6701)
!6703 = !DILocation(line: 6037, column: 5, scope: !6701)
!6704 = !DILocation(line: 6043, column: 40, scope: !6705)
!6705 = distinct !DILexicalBlock(scope: !6696, file: !3, line: 6039, column: 5)
!6706 = !DILocation(line: 6043, column: 13, scope: !6705)
!6707 = !DILocation(line: 6045, column: 4, scope: !6708)
!6708 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 6044, column: 11)
!6709 = !DILocation(line: 6045, column: 7, scope: !6708)
!6710 = !DILocation(line: 6046, column: 7, scope: !6708)
!6711 = !DILocation(line: 6046, column: 4, scope: !6708)
!6712 = !DILocation(line: 6044, column: 11, scope: !6705)
!6713 = !DILocation(line: 6048, column: 8, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !6715, file: !3, line: 6048, column: 8)
!6715 = distinct !DILexicalBlock(scope: !6708, file: !3, line: 6047, column: 2)
!6716 = !DILocation(line: 6048, column: 18, scope: !6714)
!6717 = !DILocation(line: 6048, column: 22, scope: !6714)
!6718 = !DILocation(line: 6048, column: 33, scope: !6714)
!6719 = !DILocation(line: 6048, column: 8, scope: !6715)
!6720 = !DILocation(line: 6049, column: 6, scope: !6714)
!6721 = !DILocation(line: 0, scope: !6722)
!6722 = distinct !DILexicalBlock(scope: !6723, file: !3, line: 6055, column: 15)
!6723 = distinct !DILexicalBlock(scope: !6724, file: !3, line: 6054, column: 9)
!6724 = distinct !DILexicalBlock(scope: !6725, file: !3, line: 6053, column: 7)
!6725 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 6053, column: 7)
!6726 = !DILocation(line: 6053, column: 12, scope: !6725)
!6727 = !DILocation(line: 0, scope: !6725)
!6728 = !DILocation(line: 6053, column: 22, scope: !6724)
!6729 = !DILocation(line: 6053, column: 19, scope: !6724)
!6730 = !DILocation(line: 6053, column: 7, scope: !6725)
!6731 = !DILocation(line: 6055, column: 15, scope: !6722)
!6732 = !DILocation(line: 6055, column: 61, scope: !6722)
!6733 = !DILocation(line: 6055, column: 58, scope: !6722)
!6734 = !DILocation(line: 6055, column: 15, scope: !6723)
!6735 = !DILocation(line: 6057, column: 12, scope: !6736)
!6736 = distinct !DILexicalBlock(scope: !6737, file: !3, line: 6057, column: 12)
!6737 = distinct !DILexicalBlock(scope: !6722, file: !3, line: 6056, column: 6)
!6738 = !DILocation(line: 6057, column: 22, scope: !6736)
!6739 = !DILocation(line: 6057, column: 26, scope: !6736)
!6740 = !DILocation(line: 6057, column: 37, scope: !6736)
!6741 = !DILocation(line: 6057, column: 12, scope: !6737)
!6742 = !DILocation(line: 6058, column: 3, scope: !6736)
!6743 = !DILocation(line: 6053, column: 7, scope: !6724)
!6744 = distinct !{!6744, !6730, !6745}
!6745 = !DILocation(line: 6062, column: 9, scope: !6725)
!6746 = !DILocation(line: 6065, column: 30, scope: !6647)
!6747 = !DILocation(line: 0, scope: !6696)
!6748 = !DILocation(line: 6066, column: 9, scope: !6647)
!6749 = !DILocation(line: 6065, column: 19, scope: !6647)
!6750 = !DILocation(line: 6065, column: 17, scope: !6647)
!6751 = !DILocation(line: 6068, column: 7, scope: !6752)
!6752 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 6068, column: 7)
!6753 = !DILocation(line: 6068, column: 17, scope: !6752)
!6754 = !DILocation(line: 6068, column: 21, scope: !6752)
!6755 = !DILocation(line: 6068, column: 32, scope: !6752)
!6756 = !DILocation(line: 6068, column: 7, scope: !6647)
!6757 = !DILocation(line: 6070, column: 7, scope: !6758)
!6758 = distinct !DILexicalBlock(scope: !6752, file: !3, line: 6069, column: 5)
!6759 = !DILocation(line: 6071, column: 27, scope: !6758)
!6760 = !DILocation(line: 6071, column: 38, scope: !6758)
!6761 = !DILocation(line: 6071, column: 7, scope: !6758)
!6762 = !DILocation(line: 6072, column: 5, scope: !6758)
!6763 = !DILocation(line: 6075, column: 1, scope: !6647)
!6764 = distinct !DISubprogram(name: "extract_range_basic", scope: !3, file: !3, line: 3090, type: !6765, scopeLine: 3091, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6767)
!6765 = !DISubroutineType(types: !6766)
!6766 = !{null, !687, !1017}
!6767 = !{!6768, !6769, !6770, !6771}
!6768 = !DILocalVariable(name: "vr", arg: 1, scope: !6764, file: !3, line: 3090, type: !687)
!6769 = !DILocalVariable(name: "stmt", arg: 2, scope: !6764, file: !3, line: 3090, type: !1017)
!6770 = !DILocalVariable(name: "sop", scope: !6764, file: !3, line: 3092, type: !679)
!6771 = !DILocalVariable(name: "type", scope: !6764, file: !3, line: 3093, type: !693)
!6772 = !DILocation(line: 0, scope: !6764)
!6773 = !DILocation(line: 3092, column: 3, scope: !6764)
!6774 = !DILocation(line: 3092, column: 8, scope: !6764)
!6775 = !DILocation(line: 3093, column: 15, scope: !6764)
!6776 = !DILocation(line: 3095, column: 7, scope: !6777)
!6777 = distinct !DILexicalBlock(scope: !6764, file: !3, line: 3095, column: 7)
!6778 = !DILocation(line: 3096, column: 7, scope: !6777)
!6779 = !DILocation(line: 3096, column: 10, scope: !6777)
!6780 = !DILocation(line: 3095, column: 7, scope: !6764)
!6781 = !DILocation(line: 3098, column: 9, scope: !6777)
!6782 = !DILocation(line: 3098, column: 13, scope: !6777)
!6783 = !DILocation(line: 3098, column: 16, scope: !6777)
!6784 = !DILocation(line: 3097, column: 5, scope: !6777)
!6785 = !DILocation(line: 3099, column: 12, scope: !6786)
!6786 = distinct !DILexicalBlock(scope: !6777, file: !3, line: 3099, column: 12)
!6787 = !DILocation(line: 3100, column: 9, scope: !6786)
!6788 = !DILocation(line: 3100, column: 5, scope: !6786)
!6789 = !DILocation(line: 3101, column: 5, scope: !6786)
!6790 = !DILocation(line: 3103, column: 5, scope: !6786)
!6791 = !DILocation(line: 3104, column: 1, scope: !6764)
!6792 = distinct !DISubprogram(name: "extract_range_from_assignment", scope: !3, file: !3, line: 3111, type: !6765, scopeLine: 3112, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6793)
!6793 = !{!6794, !6795, !6796}
!6794 = !DILocalVariable(name: "vr", arg: 1, scope: !6792, file: !3, line: 3111, type: !687)
!6795 = !DILocalVariable(name: "stmt", arg: 2, scope: !6792, file: !3, line: 3111, type: !1017)
!6796 = !DILocalVariable(name: "code", scope: !6792, file: !3, line: 3113, type: !134)
!6797 = !DILocation(line: 0, scope: !6792)
!6798 = !DILocation(line: 3113, column: 25, scope: !6792)
!6799 = !DILocation(line: 3115, column: 7, scope: !6792)
!6800 = !DILocation(line: 3116, column: 36, scope: !6801)
!6801 = distinct !DILexicalBlock(scope: !6792, file: !3, line: 3115, column: 7)
!6802 = !DILocation(line: 3116, column: 5, scope: !6801)
!6803 = !DILocation(line: 3118, column: 38, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !6801, file: !3, line: 3117, column: 12)
!6805 = !DILocation(line: 3118, column: 5, scope: !6804)
!6806 = !DILocation(line: 3119, column: 12, scope: !6807)
!6807 = distinct !DILexicalBlock(scope: !6804, file: !3, line: 3119, column: 12)
!6808 = !DILocation(line: 3119, column: 35, scope: !6807)
!6809 = !DILocation(line: 3120, column: 5, scope: !6807)
!6810 = !DILocation(line: 3123, column: 41, scope: !6807)
!6811 = !DILocation(line: 3124, column: 9, scope: !6807)
!6812 = !DILocation(line: 3125, column: 9, scope: !6807)
!6813 = !DILocation(line: 3126, column: 9, scope: !6807)
!6814 = !DILocation(line: 3123, column: 5, scope: !6807)
!6815 = !DILocation(line: 3127, column: 35, scope: !6816)
!6816 = distinct !DILexicalBlock(scope: !6807, file: !3, line: 3127, column: 12)
!6817 = !DILocation(line: 3127, column: 12, scope: !6807)
!6818 = !DILocation(line: 3128, column: 40, scope: !6816)
!6819 = !DILocation(line: 3129, column: 8, scope: !6816)
!6820 = !DILocation(line: 3130, column: 8, scope: !6816)
!6821 = !DILocation(line: 3128, column: 5, scope: !6816)
!6822 = !DILocation(line: 3131, column: 17, scope: !6823)
!6823 = distinct !DILexicalBlock(scope: !6816, file: !3, line: 3131, column: 12)
!6824 = !DILocation(line: 3131, column: 12, scope: !6816)
!6825 = !DILocation(line: 3132, column: 39, scope: !6823)
!6826 = !DILocation(line: 3132, column: 5, scope: !6823)
!6827 = !DILocation(line: 3133, column: 35, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !6823, file: !3, line: 3133, column: 12)
!6829 = !DILocation(line: 3133, column: 12, scope: !6823)
!6830 = !DILocation(line: 3134, column: 40, scope: !6828)
!6831 = !DILocation(line: 3135, column: 8, scope: !6828)
!6832 = !DILocation(line: 3136, column: 8, scope: !6828)
!6833 = !DILocation(line: 3137, column: 8, scope: !6828)
!6834 = !DILocation(line: 3134, column: 5, scope: !6828)
!6835 = !DILocation(line: 3138, column: 12, scope: !6836)
!6836 = distinct !DILexicalBlock(scope: !6828, file: !3, line: 3138, column: 12)
!6837 = !DILocation(line: 3138, column: 40, scope: !6836)
!6838 = !DILocation(line: 3139, column: 5, scope: !6836)
!6839 = !DILocation(line: 3139, column: 33, scope: !6836)
!6840 = !DILocation(line: 3139, column: 8, scope: !6836)
!6841 = !DILocation(line: 3138, column: 12, scope: !6828)
!6842 = !DILocation(line: 3140, column: 35, scope: !6836)
!6843 = !DILocation(line: 3140, column: 5, scope: !6836)
!6844 = !DILocation(line: 3142, column: 5, scope: !6836)
!6845 = !DILocation(line: 3144, column: 11, scope: !6846)
!6846 = distinct !DILexicalBlock(scope: !6792, file: !3, line: 3144, column: 7)
!6847 = !DILocation(line: 3144, column: 16, scope: !6846)
!6848 = !DILocation(line: 3144, column: 7, scope: !6792)
!6849 = !DILocation(line: 3145, column: 5, scope: !6846)
!6850 = !DILocation(line: 3146, column: 1, scope: !6792)
!6851 = distinct !DISubprogram(name: "update_value_range", scope: !3, file: !3, line: 707, type: !6852, scopeLine: 708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6854)
!6852 = !DISubroutineType(types: !6853)
!6853 = !{!679, !2080, !687}
!6854 = !{!6855, !6856, !6857, !6858}
!6855 = !DILocalVariable(name: "var", arg: 1, scope: !6851, file: !3, line: 707, type: !2080)
!6856 = !DILocalVariable(name: "new_vr", arg: 2, scope: !6851, file: !3, line: 707, type: !687)
!6857 = !DILocalVariable(name: "old_vr", scope: !6851, file: !3, line: 709, type: !687)
!6858 = !DILocalVariable(name: "is_new", scope: !6851, file: !3, line: 710, type: !679)
!6859 = !DILocation(line: 0, scope: !6851)
!6860 = !DILocation(line: 713, column: 12, scope: !6851)
!6861 = !DILocation(line: 714, column: 20, scope: !6851)
!6862 = !DILocation(line: 714, column: 36, scope: !6851)
!6863 = !DILocation(line: 714, column: 25, scope: !6851)
!6864 = !DILocation(line: 715, column: 5, scope: !6851)
!6865 = !DILocation(line: 715, column: 38, scope: !6851)
!6866 = !DILocation(line: 715, column: 51, scope: !6851)
!6867 = !DILocation(line: 715, column: 9, scope: !6851)
!6868 = !DILocation(line: 716, column: 5, scope: !6851)
!6869 = !DILocation(line: 716, column: 38, scope: !6851)
!6870 = !DILocation(line: 716, column: 51, scope: !6851)
!6871 = !DILocation(line: 716, column: 9, scope: !6851)
!6872 = !DILocation(line: 717, column: 5, scope: !6851)
!6873 = !DILocation(line: 717, column: 37, scope: !6851)
!6874 = !DILocation(line: 717, column: 52, scope: !6851)
!6875 = !DILocation(line: 717, column: 9, scope: !6851)
!6876 = !DILocation(line: 717, column: 8, scope: !6851)
!6877 = !DILocation(line: 719, column: 7, scope: !6878)
!6878 = distinct !DILexicalBlock(scope: !6851, file: !3, line: 719, column: 7)
!6879 = !DILocation(line: 719, column: 7, scope: !6851)
!6880 = !DILocation(line: 720, column: 38, scope: !6878)
!6881 = !DILocation(line: 720, column: 52, scope: !6878)
!6882 = !DILocation(line: 720, column: 65, scope: !6878)
!6883 = !DILocation(line: 721, column: 23, scope: !6878)
!6884 = !DILocation(line: 720, column: 5, scope: !6878)
!6885 = !DILocation(line: 723, column: 3, scope: !6851)
!6886 = !DILocation(line: 725, column: 3, scope: !6851)
!6887 = distinct !DISubprogram(name: "gimple_stmt_nonnegative_warnv_p", scope: !3, file: !3, line: 885, type: !6888, scopeLine: 886, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6890)
!6888 = !DISubroutineType(types: !6889)
!6889 = !{!679, !1017, !678}
!6890 = !{!6891, !6892}
!6891 = !DILocalVariable(name: "stmt", arg: 1, scope: !6887, file: !3, line: 885, type: !1017)
!6892 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !6887, file: !3, line: 885, type: !678)
!6893 = !DILocation(line: 0, scope: !6887)
!6894 = !DILocation(line: 887, column: 11, scope: !6887)
!6895 = !DILocation(line: 887, column: 3, scope: !6887)
!6896 = !DILocation(line: 890, column: 14, scope: !6897)
!6897 = distinct !DILexicalBlock(scope: !6887, file: !3, line: 888, column: 5)
!6898 = !DILocation(line: 890, column: 7, scope: !6897)
!6899 = !DILocation(line: 892, column: 14, scope: !6897)
!6900 = !DILocation(line: 892, column: 7, scope: !6897)
!6901 = !DILocation(line: 894, column: 7, scope: !6897)
!6902 = !DILocation(line: 897, column: 5, scope: !6887)
!6903 = !DILocation(line: 899, column: 1, scope: !6887)
!6904 = distinct !DISubprogram(name: "set_value_range_to_nonnegative", scope: !3, file: !3, line: 527, type: !6905, scopeLine: 529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6907)
!6905 = !DISubroutineType(types: !6906)
!6906 = !{null, !687, !693, !679}
!6907 = !{!6908, !6909, !6910, !6911}
!6908 = !DILocalVariable(name: "vr", arg: 1, scope: !6904, file: !3, line: 527, type: !687)
!6909 = !DILocalVariable(name: "type", arg: 2, scope: !6904, file: !3, line: 527, type: !693)
!6910 = !DILocalVariable(name: "overflow_infinity", arg: 3, scope: !6904, file: !3, line: 528, type: !679)
!6911 = !DILocalVariable(name: "zero", scope: !6904, file: !3, line: 530, type: !693)
!6912 = !DILocation(line: 0, scope: !6904)
!6913 = !DILocation(line: 532, column: 7, scope: !6914)
!6914 = distinct !DILexicalBlock(scope: !6904, file: !3, line: 532, column: 7)
!6915 = !DILocation(line: 532, column: 25, scope: !6914)
!6916 = !DILocation(line: 532, column: 29, scope: !6914)
!6917 = !DILocation(line: 532, column: 7, scope: !6904)
!6918 = !DILocation(line: 534, column: 7, scope: !6919)
!6919 = distinct !DILexicalBlock(scope: !6914, file: !3, line: 533, column: 5)
!6920 = !DILocation(line: 535, column: 7, scope: !6919)
!6921 = !DILocation(line: 538, column: 10, scope: !6904)
!6922 = !DILocation(line: 540, column: 7, scope: !6904)
!6923 = !DILocation(line: 541, column: 9, scope: !6904)
!6924 = !DILocation(line: 542, column: 9, scope: !6904)
!6925 = !DILocation(line: 543, column: 10, scope: !6904)
!6926 = !DILocation(line: 539, column: 3, scope: !6904)
!6927 = !DILocation(line: 544, column: 1, scope: !6904)
!6928 = distinct !DISubprogram(name: "stmt_overflow_infinity", scope: !3, file: !3, line: 278, type: !4796, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6929)
!6929 = !{!6930}
!6930 = !DILocalVariable(name: "stmt", arg: 1, scope: !6928, file: !3, line: 278, type: !1017)
!6931 = !DILocation(line: 0, scope: !6928)
!6932 = !DILocation(line: 280, column: 7, scope: !6933)
!6933 = distinct !DILexicalBlock(scope: !6928, file: !3, line: 280, column: 7)
!6934 = !DILocation(line: 281, column: 7, scope: !6933)
!6935 = !DILocation(line: 281, column: 32, scope: !6933)
!6936 = !DILocation(line: 281, column: 10, scope: !6933)
!6937 = !DILocation(line: 281, column: 63, scope: !6933)
!6938 = !DILocation(line: 280, column: 7, scope: !6928)
!6939 = !DILocation(line: 283, column: 34, scope: !6933)
!6940 = !DILocation(line: 283, column: 12, scope: !6933)
!6941 = !DILocation(line: 283, column: 5, scope: !6933)
!6942 = !DILocation(line: 285, column: 1, scope: !6928)
!6943 = distinct !DISubprogram(name: "vrp_stmt_computes_nonzero", scope: !3, file: !3, line: 962, type: !6888, scopeLine: 963, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6944)
!6944 = !{!6945, !6946, !6947, !6950, !6951}
!6945 = !DILocalVariable(name: "stmt", arg: 1, scope: !6943, file: !3, line: 962, type: !1017)
!6946 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !6943, file: !3, line: 962, type: !678)
!6947 = !DILocalVariable(name: "expr", scope: !6948, file: !3, line: 972, type: !693)
!6948 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 971, column: 5)
!6949 = distinct !DILexicalBlock(scope: !6943, file: !3, line: 969, column: 7)
!6950 = !DILocalVariable(name: "base", scope: !6948, file: !3, line: 973, type: !693)
!6951 = !DILocalVariable(name: "vr", scope: !6952, file: !3, line: 979, type: !687)
!6952 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 978, column: 2)
!6953 = distinct !DILexicalBlock(scope: !6948, file: !3, line: 975, column: 11)
!6954 = !DILocation(line: 0, scope: !6943)
!6955 = !DILocation(line: 964, column: 7, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6943, file: !3, line: 964, column: 7)
!6957 = !DILocation(line: 964, column: 7, scope: !6943)
!6958 = !DILocation(line: 969, column: 7, scope: !6949)
!6959 = !DILocation(line: 970, column: 7, scope: !6949)
!6960 = !DILocation(line: 970, column: 10, scope: !6949)
!6961 = !DILocation(line: 970, column: 40, scope: !6949)
!6962 = !DILocation(line: 969, column: 7, scope: !6943)
!6963 = !DILocation(line: 972, column: 19, scope: !6948)
!6964 = !DILocation(line: 0, scope: !6948)
!6965 = !DILocation(line: 973, column: 37, scope: !6948)
!6966 = !DILocation(line: 973, column: 19, scope: !6948)
!6967 = !DILocation(line: 975, column: 16, scope: !6953)
!6968 = !DILocation(line: 976, column: 4, scope: !6953)
!6969 = !DILocation(line: 976, column: 7, scope: !6953)
!6970 = !DILocation(line: 976, column: 24, scope: !6953)
!6971 = !DILocation(line: 977, column: 4, scope: !6953)
!6972 = !DILocation(line: 977, column: 7, scope: !6953)
!6973 = !DILocation(line: 977, column: 42, scope: !6953)
!6974 = !DILocation(line: 975, column: 11, scope: !6948)
!6975 = !DILocation(line: 979, column: 24, scope: !6952)
!6976 = !DILocation(line: 0, scope: !6952)
!6977 = !DILocation(line: 980, column: 8, scope: !6978)
!6978 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 980, column: 8)
!6979 = !DILocation(line: 0, scope: !6953)
!6980 = !DILocation(line: 983, column: 5, scope: !6949)
!6981 = !DILocation(line: 985, column: 3, scope: !6943)
!6982 = !DILocation(line: 986, column: 1, scope: !6943)
!6983 = distinct !DISubprogram(name: "gimple_assign_nonnegative_warnv_p", scope: !3, file: !3, line: 830, type: !6888, scopeLine: 831, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6984)
!6984 = !{!6985, !6986, !6987}
!6985 = !DILocalVariable(name: "stmt", arg: 1, scope: !6983, file: !3, line: 830, type: !1017)
!6986 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !6983, file: !3, line: 830, type: !678)
!6987 = !DILocalVariable(name: "code", scope: !6983, file: !3, line: 832, type: !134)
!6988 = !DILocation(line: 0, scope: !6983)
!6989 = !DILocation(line: 832, column: 25, scope: !6983)
!6990 = !DILocation(line: 833, column: 11, scope: !6983)
!6991 = !DILocation(line: 833, column: 3, scope: !6983)
!6992 = !DILocation(line: 836, column: 46, scope: !6993)
!6993 = distinct !DILexicalBlock(scope: !6983, file: !3, line: 834, column: 5)
!6994 = !DILocation(line: 837, column: 11, scope: !6993)
!6995 = !DILocation(line: 838, column: 11, scope: !6993)
!6996 = !DILocation(line: 836, column: 14, scope: !6993)
!6997 = !DILocation(line: 836, column: 7, scope: !6993)
!6998 = !DILocation(line: 841, column: 47, scope: !6993)
!6999 = !DILocation(line: 842, column: 12, scope: !6993)
!7000 = !DILocation(line: 843, column: 12, scope: !6993)
!7001 = !DILocation(line: 844, column: 12, scope: !6993)
!7002 = !DILocation(line: 841, column: 14, scope: !6993)
!7003 = !DILocation(line: 841, column: 7, scope: !6993)
!7004 = !DILocation(line: 847, column: 47, scope: !6993)
!7005 = !DILocation(line: 847, column: 14, scope: !6993)
!7006 = !DILocation(line: 847, column: 7, scope: !6993)
!7007 = !DILocation(line: 850, column: 7, scope: !6993)
!7008 = !DILocation(line: 852, column: 7, scope: !6993)
!7009 = !DILocation(line: 855, column: 5, scope: !6983)
!7010 = !DILocation(line: 857, column: 1, scope: !6983)
!7011 = distinct !DISubprogram(name: "gimple_call_nonnegative_warnv_p", scope: !3, file: !3, line: 865, type: !6888, scopeLine: 866, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7012)
!7012 = !{!7013, !7014, !7015, !7016}
!7013 = !DILocalVariable(name: "stmt", arg: 1, scope: !7011, file: !3, line: 865, type: !1017)
!7014 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !7011, file: !3, line: 865, type: !678)
!7015 = !DILocalVariable(name: "arg0", scope: !7011, file: !3, line: 867, type: !693)
!7016 = !DILocalVariable(name: "arg1", scope: !7011, file: !3, line: 869, type: !693)
!7017 = !DILocation(line: 0, scope: !7011)
!7018 = !DILocation(line: 867, column: 15, scope: !7011)
!7019 = !DILocation(line: 867, column: 43, scope: !7011)
!7020 = !DILocation(line: 868, column: 5, scope: !7011)
!7021 = !DILocation(line: 869, column: 15, scope: !7011)
!7022 = !DILocation(line: 869, column: 43, scope: !7011)
!7023 = !DILocation(line: 870, column: 5, scope: !7011)
!7024 = !DILocation(line: 872, column: 41, scope: !7011)
!7025 = !DILocation(line: 873, column: 6, scope: !7011)
!7026 = !DILocation(line: 872, column: 10, scope: !7011)
!7027 = !DILocation(line: 872, column: 3, scope: !7011)
!7028 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !588, file: !588, line: 2013, type: !5969, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7029)
!7029 = !{!7030, !7031}
!7030 = !DILocalVariable(name: "gs", arg: 1, scope: !7028, file: !588, line: 2013, type: !4325)
!7031 = !DILocalVariable(name: "num_ops", scope: !7028, file: !588, line: 2015, type: !7)
!7032 = !DILocation(line: 0, scope: !7028)
!7033 = !DILocation(line: 2017, column: 13, scope: !7028)
!7034 = !DILocation(line: 2018, column: 18, scope: !7028)
!7035 = !DILocation(line: 2018, column: 3, scope: !7028)
!7036 = distinct !DISubprogram(name: "gimple_call_arg", scope: !588, file: !588, line: 2025, type: !5376, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7037)
!7037 = !{!7038, !7039}
!7038 = !DILocalVariable(name: "gs", arg: 1, scope: !7036, file: !588, line: 2025, type: !4325)
!7039 = !DILocalVariable(name: "index", arg: 2, scope: !7036, file: !588, line: 2025, type: !7)
!7040 = !DILocation(line: 0, scope: !7036)
!7041 = !DILocation(line: 2028, column: 31, scope: !7036)
!7042 = !DILocation(line: 2028, column: 10, scope: !7036)
!7043 = !DILocation(line: 2028, column: 3, scope: !7036)
!7044 = distinct !DISubprogram(name: "supports_overflow_infinity", scope: !3, file: !3, line: 194, type: !2667, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7045)
!7045 = !{!7046, !7047, !7048}
!7046 = !DILocalVariable(name: "type", arg: 1, scope: !7044, file: !3, line: 194, type: !2080)
!7047 = !DILocalVariable(name: "min", scope: !7044, file: !3, line: 196, type: !693)
!7048 = !DILocalVariable(name: "max", scope: !7044, file: !3, line: 196, type: !693)
!7049 = !DILocation(line: 0, scope: !7044)
!7050 = !DILocation(line: 196, column: 14, scope: !7044)
!7051 = !DILocation(line: 196, column: 40, scope: !7044)
!7052 = !DILocation(line: 200, column: 15, scope: !7044)
!7053 = !DILocation(line: 201, column: 4, scope: !7044)
!7054 = !DILocation(line: 201, column: 7, scope: !7044)
!7055 = !DILocation(line: 202, column: 11, scope: !7044)
!7056 = !DILocation(line: 202, column: 4, scope: !7044)
!7057 = !DILocation(line: 203, column: 7, scope: !7044)
!7058 = !DILocation(line: 200, column: 3, scope: !7044)
!7059 = distinct !DISubprogram(name: "positive_overflow_infinity", scope: !3, file: !3, line: 234, type: !7060, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7062)
!7060 = !DISubroutineType(types: !7061)
!7061 = !{!693, !693}
!7062 = !{!7063}
!7063 = !DILocalVariable(name: "type", arg: 1, scope: !7059, file: !3, line: 234, type: !693)
!7064 = !DILocation(line: 0, scope: !7059)
!7065 = !DILocation(line: 239, column: 34, scope: !7059)
!7066 = !DILocation(line: 239, column: 10, scope: !7059)
!7067 = !DILocation(line: 239, column: 3, scope: !7059)
!7068 = distinct !DISubprogram(name: "make_overflow_infinity", scope: !3, file: !3, line: 210, type: !7060, scopeLine: 211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7069)
!7069 = !{!7070}
!7070 = !DILocalVariable(name: "val", arg: 1, scope: !7068, file: !3, line: 210, type: !693)
!7071 = !DILocation(line: 0, scope: !7068)
!7072 = !DILocation(line: 215, column: 9, scope: !7068)
!7073 = !DILocation(line: 216, column: 3, scope: !7068)
!7074 = !DILocation(line: 216, column: 23, scope: !7068)
!7075 = !DILocation(line: 217, column: 3, scope: !7068)
!7076 = distinct !DISubprogram(name: "is_overflow_infinity", scope: !3, file: !3, line: 267, type: !2667, scopeLine: 268, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7077)
!7077 = !{!7078}
!7078 = !DILocalVariable(name: "val", arg: 1, scope: !7076, file: !3, line: 267, type: !2080)
!7079 = !DILocation(line: 0, scope: !7076)
!7080 = !DILocation(line: 269, column: 36, scope: !7076)
!7081 = !DILocation(line: 269, column: 11, scope: !7076)
!7082 = !DILocation(line: 270, column: 4, scope: !7076)
!7083 = !DILocation(line: 270, column: 7, scope: !7076)
!7084 = !DILocation(line: 271, column: 4, scope: !7076)
!7085 = !DILocation(line: 271, column: 7, scope: !7076)
!7086 = !DILocation(line: 272, column: 4, scope: !7076)
!7087 = !DILocation(line: 272, column: 8, scope: !7076)
!7088 = !DILocation(line: 272, column: 29, scope: !7076)
!7089 = !DILocation(line: 272, column: 32, scope: !7076)
!7090 = !DILocation(line: 269, column: 3, scope: !7076)
!7091 = distinct !DISubprogram(name: "gimple_stmt_nonzero_warnv_p", scope: !3, file: !3, line: 942, type: !6888, scopeLine: 943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7092)
!7092 = !{!7093, !7094}
!7093 = !DILocalVariable(name: "stmt", arg: 1, scope: !7091, file: !3, line: 942, type: !1017)
!7094 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !7091, file: !3, line: 942, type: !678)
!7095 = !DILocation(line: 0, scope: !7091)
!7096 = !DILocation(line: 944, column: 11, scope: !7091)
!7097 = !DILocation(line: 944, column: 3, scope: !7091)
!7098 = !DILocation(line: 947, column: 14, scope: !7099)
!7099 = distinct !DILexicalBlock(scope: !7091, file: !3, line: 945, column: 5)
!7100 = !DILocation(line: 947, column: 7, scope: !7099)
!7101 = !DILocation(line: 949, column: 14, scope: !7099)
!7102 = !DILocation(line: 949, column: 7, scope: !7099)
!7103 = !DILocation(line: 951, column: 7, scope: !7099)
!7104 = !DILocation(line: 954, column: 5, scope: !7091)
!7105 = !DILocation(line: 956, column: 1, scope: !7091)
!7106 = distinct !DISubprogram(name: "range_is_nonnull", scope: !3, file: !3, line: 749, type: !7107, scopeLine: 750, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7109)
!7107 = !DISubroutineType(types: !7108)
!7108 = !{!679, !687}
!7109 = !{!7110}
!7110 = !DILocalVariable(name: "vr", arg: 1, scope: !7106, file: !3, line: 749, type: !687)
!7111 = !DILocation(line: 0, scope: !7106)
!7112 = !DILocation(line: 751, column: 14, scope: !7106)
!7113 = !DILocation(line: 751, column: 19, scope: !7106)
!7114 = !DILocation(line: 752, column: 3, scope: !7106)
!7115 = !DILocation(line: 752, column: 25, scope: !7106)
!7116 = !DILocation(line: 752, column: 6, scope: !7106)
!7117 = !DILocation(line: 753, column: 3, scope: !7106)
!7118 = !DILocation(line: 753, column: 25, scope: !7106)
!7119 = !DILocation(line: 753, column: 6, scope: !7106)
!7120 = !DILocation(line: 751, column: 3, scope: !7106)
!7121 = distinct !DISubprogram(name: "gimple_assign_nonzero_warnv_p", scope: !3, file: !3, line: 907, type: !6888, scopeLine: 908, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7122)
!7122 = !{!7123, !7124, !7125}
!7123 = !DILocalVariable(name: "stmt", arg: 1, scope: !7121, file: !3, line: 907, type: !1017)
!7124 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !7121, file: !3, line: 907, type: !678)
!7125 = !DILocalVariable(name: "code", scope: !7121, file: !3, line: 909, type: !134)
!7126 = !DILocation(line: 0, scope: !7121)
!7127 = !DILocation(line: 909, column: 25, scope: !7121)
!7128 = !DILocation(line: 910, column: 11, scope: !7121)
!7129 = !DILocation(line: 910, column: 3, scope: !7121)
!7130 = !DILocation(line: 913, column: 42, scope: !7131)
!7131 = distinct !DILexicalBlock(scope: !7121, file: !3, line: 911, column: 5)
!7132 = !DILocation(line: 914, column: 7, scope: !7131)
!7133 = !DILocation(line: 915, column: 7, scope: !7131)
!7134 = !DILocation(line: 913, column: 14, scope: !7131)
!7135 = !DILocation(line: 913, column: 7, scope: !7131)
!7136 = !DILocation(line: 918, column: 43, scope: !7131)
!7137 = !DILocation(line: 919, column: 8, scope: !7131)
!7138 = !DILocation(line: 920, column: 8, scope: !7131)
!7139 = !DILocation(line: 921, column: 8, scope: !7131)
!7140 = !DILocation(line: 918, column: 14, scope: !7131)
!7141 = !DILocation(line: 918, column: 7, scope: !7131)
!7142 = !DILocation(line: 924, column: 43, scope: !7131)
!7143 = !DILocation(line: 924, column: 14, scope: !7131)
!7144 = !DILocation(line: 924, column: 7, scope: !7131)
!7145 = !DILocation(line: 927, column: 7, scope: !7131)
!7146 = !DILocation(line: 929, column: 7, scope: !7131)
!7147 = !DILocation(line: 932, column: 5, scope: !7121)
!7148 = !DILocation(line: 934, column: 1, scope: !7121)
!7149 = distinct !DISubprogram(name: "extract_range_from_assert", scope: !3, file: !3, line: 1401, type: !3308, scopeLine: 1402, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7150)
!7150 = !{!7151, !7152, !7153, !7154, !7155, !7156, !7157, !7158, !7159, !7160, !7161, !7162, !7166, !7174, !7181, !7187, !7188, !7189, !7190, !7191, !7192}
!7151 = !DILocalVariable(name: "vr_p", arg: 1, scope: !7149, file: !3, line: 1401, type: !687)
!7152 = !DILocalVariable(name: "expr", arg: 2, scope: !7149, file: !3, line: 1401, type: !693)
!7153 = !DILocalVariable(name: "var", scope: !7149, file: !3, line: 1403, type: !693)
!7154 = !DILocalVariable(name: "cond", scope: !7149, file: !3, line: 1403, type: !693)
!7155 = !DILocalVariable(name: "limit", scope: !7149, file: !3, line: 1403, type: !693)
!7156 = !DILocalVariable(name: "min", scope: !7149, file: !3, line: 1403, type: !693)
!7157 = !DILocalVariable(name: "max", scope: !7149, file: !3, line: 1403, type: !693)
!7158 = !DILocalVariable(name: "type", scope: !7149, file: !3, line: 1403, type: !693)
!7159 = !DILocalVariable(name: "var_vr", scope: !7149, file: !3, line: 1404, type: !687)
!7160 = !DILocalVariable(name: "limit_vr", scope: !7149, file: !3, line: 1404, type: !687)
!7161 = !DILocalVariable(name: "cond_code", scope: !7149, file: !3, line: 1405, type: !134)
!7162 = !DILocalVariable(name: "range_type", scope: !7163, file: !3, line: 1515, type: !390)
!7163 = distinct !DILexicalBlock(scope: !7164, file: !3, line: 1514, column: 5)
!7164 = distinct !DILexicalBlock(scope: !7165, file: !3, line: 1513, column: 12)
!7165 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 1477, column: 7)
!7166 = !DILocalVariable(name: "one", scope: !7167, file: !3, line: 1609, type: !693)
!7167 = distinct !DILexicalBlock(scope: !7168, file: !3, line: 1608, column: 6)
!7168 = distinct !DILexicalBlock(scope: !7169, file: !3, line: 1607, column: 8)
!7169 = distinct !DILexicalBlock(scope: !7170, file: !3, line: 1605, column: 2)
!7170 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 1600, column: 11)
!7171 = distinct !DILexicalBlock(scope: !7172, file: !3, line: 1584, column: 5)
!7172 = distinct !DILexicalBlock(scope: !7173, file: !3, line: 1583, column: 12)
!7173 = distinct !DILexicalBlock(scope: !7164, file: !3, line: 1538, column: 12)
!7174 = !DILocalVariable(name: "one", scope: !7175, file: !3, line: 1644, type: !693)
!7175 = distinct !DILexicalBlock(scope: !7176, file: !3, line: 1643, column: 6)
!7176 = distinct !DILexicalBlock(scope: !7177, file: !3, line: 1642, column: 8)
!7177 = distinct !DILexicalBlock(scope: !7178, file: !3, line: 1640, column: 2)
!7178 = distinct !DILexicalBlock(scope: !7179, file: !3, line: 1635, column: 11)
!7179 = distinct !DILexicalBlock(scope: !7180, file: !3, line: 1619, column: 5)
!7180 = distinct !DILexicalBlock(scope: !7172, file: !3, line: 1618, column: 12)
!7181 = !DILocalVariable(name: "min", scope: !7182, file: !3, line: 1745, type: !693)
!7182 = distinct !DILexicalBlock(scope: !7183, file: !3, line: 1744, column: 2)
!7183 = distinct !DILexicalBlock(scope: !7184, file: !3, line: 1740, column: 11)
!7184 = distinct !DILexicalBlock(scope: !7185, file: !3, line: 1735, column: 5)
!7185 = distinct !DILexicalBlock(scope: !7186, file: !3, line: 1733, column: 12)
!7186 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 1702, column: 7)
!7187 = !DILocalVariable(name: "max", scope: !7182, file: !3, line: 1745, type: !693)
!7188 = !DILocalVariable(name: "anti_min", scope: !7182, file: !3, line: 1745, type: !693)
!7189 = !DILocalVariable(name: "anti_max", scope: !7182, file: !3, line: 1745, type: !693)
!7190 = !DILocalVariable(name: "real_min", scope: !7182, file: !3, line: 1745, type: !693)
!7191 = !DILocalVariable(name: "real_max", scope: !7182, file: !3, line: 1745, type: !693)
!7192 = !DILocalVariable(name: "cmp", scope: !7182, file: !3, line: 1746, type: !680)
!7193 = !DILocation(line: 0, scope: !7149)
!7194 = !DILocation(line: 1407, column: 9, scope: !7149)
!7195 = !DILocation(line: 1408, column: 10, scope: !7149)
!7196 = !DILocation(line: 1410, column: 3, scope: !7149)
!7197 = !DILocation(line: 1413, column: 14, scope: !7198)
!7198 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 1413, column: 7)
!7199 = !DILocation(line: 1413, column: 11, scope: !7198)
!7200 = !DILocation(line: 1414, column: 7, scope: !7198)
!7201 = !DILocation(line: 1414, column: 10, scope: !7198)
!7202 = !DILocation(line: 1414, column: 45, scope: !7198)
!7203 = !DILocation(line: 1415, column: 7, scope: !7198)
!7204 = !DILocation(line: 1415, column: 45, scope: !7198)
!7205 = !DILocation(line: 1413, column: 7, scope: !7149)
!7206 = !DILocation(line: 1419, column: 19, scope: !7207)
!7207 = distinct !DILexicalBlock(scope: !7198, file: !3, line: 1416, column: 5)
!7208 = !DILocation(line: 1420, column: 15, scope: !7207)
!7209 = !DILocation(line: 1422, column: 5, scope: !7207)
!7210 = !DILocation(line: 1428, column: 41, scope: !7211)
!7211 = distinct !DILexicalBlock(scope: !7198, file: !3, line: 1424, column: 5)
!7212 = !DILocation(line: 1428, column: 19, scope: !7211)
!7213 = !DILocation(line: 1430, column: 14, scope: !7211)
!7214 = !DILocation(line: 0, scope: !7198)
!7215 = !DILocation(line: 1433, column: 11, scope: !7149)
!7216 = !DILocation(line: 1435, column: 10, scope: !7149)
!7217 = !DILocation(line: 1436, column: 3, scope: !7149)
!7218 = !DILocation(line: 1440, column: 7, scope: !7219)
!7219 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 1440, column: 7)
!7220 = !DILocation(line: 1440, column: 29, scope: !7219)
!7221 = !DILocation(line: 1440, column: 53, scope: !7219)
!7222 = !DILocation(line: 1442, column: 7, scope: !7223)
!7223 = distinct !DILexicalBlock(scope: !7219, file: !3, line: 1441, column: 5)
!7224 = !DILocation(line: 1443, column: 7, scope: !7223)
!7225 = !DILocation(line: 1449, column: 15, scope: !7149)
!7226 = !DILocation(line: 1449, column: 33, scope: !7149)
!7227 = !DILocation(line: 1449, column: 14, scope: !7149)
!7228 = !DILocation(line: 1449, column: 48, scope: !7149)
!7229 = !DILocation(line: 1452, column: 7, scope: !7230)
!7230 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 1452, column: 7)
!7231 = !DILocation(line: 1453, column: 7, scope: !7230)
!7232 = !DILocation(line: 1453, column: 21, scope: !7230)
!7233 = !DILocation(line: 1453, column: 26, scope: !7230)
!7234 = !DILocation(line: 1454, column: 4, scope: !7230)
!7235 = !DILocation(line: 1454, column: 22, scope: !7230)
!7236 = !DILocation(line: 1455, column: 4, scope: !7230)
!7237 = !DILocation(line: 1455, column: 7, scope: !7230)
!7238 = !DILocation(line: 1452, column: 7, scope: !7149)
!7239 = !DILocation(line: 1456, column: 5, scope: !7230)
!7240 = !DILocation(line: 1463, column: 3, scope: !7149)
!7241 = !DILocation(line: 1464, column: 3, scope: !7149)
!7242 = !DILocation(line: 1477, column: 7, scope: !7165)
!7243 = !DILocation(line: 1477, column: 24, scope: !7165)
!7244 = !DILocation(line: 1478, column: 7, scope: !7165)
!7245 = !DILocation(line: 1478, column: 27, scope: !7165)
!7246 = !DILocation(line: 1477, column: 7, scope: !7149)
!7247 = !DILocation(line: 1480, column: 28, scope: !7248)
!7248 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 1480, column: 11)
!7249 = distinct !DILexicalBlock(scope: !7165, file: !3, line: 1479, column: 5)
!7250 = !DILocation(line: 1480, column: 11, scope: !7249)
!7251 = !DILocation(line: 1482, column: 17, scope: !7252)
!7252 = distinct !DILexicalBlock(scope: !7248, file: !3, line: 1481, column: 9)
!7253 = !DILocation(line: 1484, column: 17, scope: !7252)
!7254 = !DILocation(line: 1486, column: 2, scope: !7252)
!7255 = !DILocation(line: 1489, column: 25, scope: !7256)
!7256 = distinct !DILexicalBlock(scope: !7248, file: !3, line: 1488, column: 2)
!7257 = !DILocation(line: 1489, column: 10, scope: !7256)
!7258 = !DILocation(line: 0, scope: !7248)
!7259 = !DILocation(line: 1496, column: 36, scope: !7249)
!7260 = !DILocation(line: 1496, column: 53, scope: !7249)
!7261 = !DILocation(line: 1497, column: 8, scope: !7249)
!7262 = !DILocation(line: 1496, column: 13, scope: !7249)
!7263 = !DILocation(line: 1498, column: 36, scope: !7249)
!7264 = !DILocation(line: 1498, column: 53, scope: !7249)
!7265 = !DILocation(line: 1499, column: 8, scope: !7249)
!7266 = !DILocation(line: 1498, column: 13, scope: !7249)
!7267 = !DILocation(line: 1504, column: 11, scope: !7249)
!7268 = !DILocation(line: 1506, column: 24, scope: !7269)
!7269 = distinct !DILexicalBlock(scope: !7249, file: !3, line: 1504, column: 11)
!7270 = !DILocation(line: 1505, column: 9, scope: !7269)
!7271 = !DILocation(line: 1509, column: 24, scope: !7272)
!7272 = distinct !DILexicalBlock(scope: !7269, file: !3, line: 1507, column: 16)
!7273 = !DILocation(line: 1508, column: 9, scope: !7272)
!7274 = !DILocation(line: 1511, column: 2, scope: !7272)
!7275 = !DILocation(line: 1513, column: 12, scope: !7165)
!7276 = !DILocation(line: 1517, column: 11, scope: !7277)
!7277 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 1517, column: 11)
!7278 = !DILocation(line: 1517, column: 11, scope: !7163)
!7279 = !DILocation(line: 1519, column: 27, scope: !7280)
!7280 = distinct !DILexicalBlock(scope: !7277, file: !3, line: 1518, column: 2)
!7281 = !DILocation(line: 0, scope: !7163)
!7282 = !DILocation(line: 1520, column: 20, scope: !7280)
!7283 = !DILocation(line: 1521, column: 20, scope: !7280)
!7284 = !DILocation(line: 1522, column: 2, scope: !7280)
!7285 = !DILocation(line: 0, scope: !7277)
!7286 = !DILocation(line: 1530, column: 58, scope: !7163)
!7287 = !DILocation(line: 1530, column: 7, scope: !7163)
!7288 = !DILocation(line: 1535, column: 11, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 1535, column: 11)
!7290 = !DILocation(line: 1535, column: 29, scope: !7289)
!7291 = !DILocation(line: 1535, column: 11, scope: !7163)
!7292 = !DILocation(line: 1536, column: 2, scope: !7289)
!7293 = !DILocation(line: 1560, column: 11, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !7295, file: !3, line: 1560, column: 11)
!7295 = distinct !DILexicalBlock(scope: !7173, file: !3, line: 1539, column: 5)
!7296 = !DILocation(line: 1561, column: 4, scope: !7294)
!7297 = !DILocation(line: 1561, column: 17, scope: !7294)
!7298 = !DILocation(line: 1561, column: 22, scope: !7294)
!7299 = !DILocation(line: 1562, column: 4, scope: !7294)
!7300 = !DILocation(line: 1562, column: 33, scope: !7294)
!7301 = !DILocation(line: 1562, column: 48, scope: !7294)
!7302 = !DILocation(line: 1562, column: 7, scope: !7294)
!7303 = !DILocation(line: 1562, column: 53, scope: !7294)
!7304 = !DILocation(line: 1560, column: 11, scope: !7295)
!7305 = !DILocation(line: 1564, column: 20, scope: !7306)
!7306 = distinct !DILexicalBlock(scope: !7294, file: !3, line: 1563, column: 2)
!7307 = !DILocation(line: 1565, column: 20, scope: !7306)
!7308 = !DILocation(line: 1566, column: 2, scope: !7306)
!7309 = !DILocation(line: 0, scope: !7294)
!7310 = !DILocation(line: 1576, column: 11, scope: !7311)
!7311 = distinct !DILexicalBlock(scope: !7295, file: !3, line: 1576, column: 11)
!7312 = !DILocation(line: 1577, column: 4, scope: !7311)
!7313 = !DILocation(line: 1577, column: 7, scope: !7311)
!7314 = !DILocation(line: 1578, column: 4, scope: !7311)
!7315 = !DILocation(line: 1578, column: 7, scope: !7311)
!7316 = !DILocation(line: 1576, column: 11, scope: !7295)
!7317 = !DILocation(line: 0, scope: !7295)
!7318 = !DILocation(line: 1581, column: 61, scope: !7295)
!7319 = !DILocation(line: 1581, column: 7, scope: !7295)
!7320 = !DILocation(line: 1582, column: 5, scope: !7295)
!7321 = !DILocation(line: 1585, column: 13, scope: !7171)
!7322 = !DILocation(line: 1587, column: 20, scope: !7323)
!7323 = distinct !DILexicalBlock(scope: !7171, file: !3, line: 1587, column: 11)
!7324 = !DILocation(line: 1587, column: 28, scope: !7323)
!7325 = !DILocation(line: 1587, column: 41, scope: !7323)
!7326 = !DILocation(line: 1587, column: 46, scope: !7323)
!7327 = !DILocation(line: 1587, column: 11, scope: !7171)
!7328 = !DILocation(line: 1594, column: 20, scope: !7329)
!7329 = distinct !DILexicalBlock(scope: !7323, file: !3, line: 1590, column: 2)
!7330 = !DILocation(line: 0, scope: !7323)
!7331 = !DILocation(line: 1600, column: 22, scope: !7170)
!7332 = !DILocation(line: 1601, column: 5, scope: !7170)
!7333 = !DILocation(line: 1601, column: 8, scope: !7170)
!7334 = !DILocation(line: 1601, column: 34, scope: !7170)
!7335 = !DILocation(line: 1602, column: 4, scope: !7170)
!7336 = !DILocation(line: 1602, column: 8, scope: !7170)
!7337 = !DILocation(line: 1602, column: 31, scope: !7170)
!7338 = !DILocation(line: 1602, column: 34, scope: !7170)
!7339 = !DILocation(line: 1600, column: 11, scope: !7171)
!7340 = !DILocation(line: 1603, column: 2, scope: !7170)
!7341 = !DILocation(line: 1607, column: 8, scope: !7169)
!7342 = !DILocation(line: 1609, column: 19, scope: !7167)
!7343 = !DILocation(line: 0, scope: !7167)
!7344 = !DILocation(line: 1610, column: 14, scope: !7167)
!7345 = !DILocation(line: 1611, column: 12, scope: !7346)
!7346 = distinct !DILexicalBlock(scope: !7167, file: !3, line: 1611, column: 12)
!7347 = !DILocation(line: 1611, column: 12, scope: !7167)
!7348 = !DILocation(line: 1612, column: 25, scope: !7346)
!7349 = !DILocation(line: 1612, column: 3, scope: !7346)
!7350 = !DILocation(line: 0, scope: !7171)
!7351 = !DILocation(line: 1615, column: 53, scope: !7169)
!7352 = !DILocation(line: 1615, column: 4, scope: !7169)
!7353 = !DILocation(line: 1620, column: 13, scope: !7179)
!7354 = !DILocation(line: 1622, column: 20, scope: !7355)
!7355 = distinct !DILexicalBlock(scope: !7179, file: !3, line: 1622, column: 11)
!7356 = !DILocation(line: 1622, column: 28, scope: !7355)
!7357 = !DILocation(line: 1622, column: 41, scope: !7355)
!7358 = !DILocation(line: 1622, column: 46, scope: !7355)
!7359 = !DILocation(line: 1622, column: 11, scope: !7179)
!7360 = !DILocation(line: 1629, column: 20, scope: !7361)
!7361 = distinct !DILexicalBlock(scope: !7355, file: !3, line: 1625, column: 2)
!7362 = !DILocation(line: 0, scope: !7355)
!7363 = !DILocation(line: 1635, column: 22, scope: !7178)
!7364 = !DILocation(line: 1636, column: 5, scope: !7178)
!7365 = !DILocation(line: 1636, column: 8, scope: !7178)
!7366 = !DILocation(line: 1636, column: 34, scope: !7178)
!7367 = !DILocation(line: 1637, column: 4, scope: !7178)
!7368 = !DILocation(line: 1637, column: 8, scope: !7178)
!7369 = !DILocation(line: 1637, column: 31, scope: !7178)
!7370 = !DILocation(line: 1637, column: 34, scope: !7178)
!7371 = !DILocation(line: 1635, column: 11, scope: !7179)
!7372 = !DILocation(line: 1638, column: 2, scope: !7178)
!7373 = !DILocation(line: 1642, column: 8, scope: !7177)
!7374 = !DILocation(line: 1644, column: 19, scope: !7175)
!7375 = !DILocation(line: 0, scope: !7175)
!7376 = !DILocation(line: 1645, column: 14, scope: !7175)
!7377 = !DILocation(line: 1646, column: 12, scope: !7378)
!7378 = distinct !DILexicalBlock(scope: !7175, file: !3, line: 1646, column: 12)
!7379 = !DILocation(line: 1646, column: 12, scope: !7175)
!7380 = !DILocation(line: 1647, column: 25, scope: !7378)
!7381 = !DILocation(line: 1647, column: 3, scope: !7378)
!7382 = !DILocation(line: 0, scope: !7179)
!7383 = !DILocation(line: 1650, column: 53, scope: !7177)
!7384 = !DILocation(line: 1650, column: 4, scope: !7177)
!7385 = !DILocation(line: 1654, column: 5, scope: !7180)
!7386 = !DILocation(line: 1690, column: 12, scope: !7149)
!7387 = !DILocation(line: 1694, column: 13, scope: !7388)
!7388 = distinct !DILexicalBlock(scope: !7149, file: !3, line: 1694, column: 7)
!7389 = !DILocation(line: 1694, column: 18, scope: !7388)
!7390 = !DILocation(line: 1695, column: 7, scope: !7388)
!7391 = !DILocation(line: 1695, column: 21, scope: !7388)
!7392 = !DILocation(line: 1696, column: 7, scope: !7388)
!7393 = !DILocation(line: 1696, column: 18, scope: !7388)
!7394 = !DILocation(line: 1696, column: 23, scope: !7388)
!7395 = !DILocation(line: 1697, column: 7, scope: !7388)
!7396 = !DILocation(line: 1697, column: 23, scope: !7388)
!7397 = !DILocation(line: 1698, column: 7, scope: !7388)
!7398 = !DILocation(line: 1698, column: 10, scope: !7388)
!7399 = !DILocation(line: 1699, column: 7, scope: !7388)
!7400 = !DILocation(line: 1699, column: 10, scope: !7388)
!7401 = !DILocation(line: 1694, column: 7, scope: !7149)
!7402 = !DILocation(line: 1702, column: 15, scope: !7186)
!7403 = !DILocation(line: 1702, column: 20, scope: !7186)
!7404 = !DILocation(line: 1702, column: 32, scope: !7186)
!7405 = !DILocation(line: 1702, column: 41, scope: !7186)
!7406 = !DILocation(line: 1702, column: 46, scope: !7186)
!7407 = !DILocation(line: 1702, column: 7, scope: !7149)
!7408 = !DILocation(line: 1709, column: 11, scope: !7409)
!7409 = distinct !DILexicalBlock(scope: !7410, file: !3, line: 1709, column: 11)
!7410 = distinct !DILexicalBlock(scope: !7186, file: !3, line: 1703, column: 5)
!7411 = !DILocation(line: 1709, column: 11, scope: !7410)
!7412 = !DILocation(line: 1712, column: 30, scope: !7413)
!7413 = distinct !DILexicalBlock(scope: !7414, file: !3, line: 1712, column: 8)
!7414 = distinct !DILexicalBlock(scope: !7409, file: !3, line: 1710, column: 2)
!7415 = !DILocation(line: 1712, column: 43, scope: !7413)
!7416 = !DILocation(line: 1712, column: 8, scope: !7413)
!7417 = !DILocation(line: 1712, column: 48, scope: !7413)
!7418 = !DILocation(line: 1712, column: 8, scope: !7414)
!7419 = !DILocation(line: 1713, column: 6, scope: !7413)
!7420 = !DILocation(line: 0, scope: !7413)
!7421 = !DILocation(line: 1718, column: 30, scope: !7422)
!7422 = distinct !DILexicalBlock(scope: !7414, file: !3, line: 1718, column: 8)
!7423 = !DILocation(line: 1718, column: 43, scope: !7422)
!7424 = !DILocation(line: 1718, column: 8, scope: !7422)
!7425 = !DILocation(line: 1718, column: 48, scope: !7422)
!7426 = !DILocation(line: 1718, column: 8, scope: !7414)
!7427 = !DILocation(line: 1719, column: 6, scope: !7422)
!7428 = !DILocation(line: 0, scope: !7422)
!7429 = !DILocation(line: 1723, column: 33, scope: !7414)
!7430 = !DILocation(line: 1723, column: 55, scope: !7414)
!7431 = !DILocation(line: 1723, column: 4, scope: !7414)
!7432 = !DILocation(line: 1724, column: 2, scope: !7414)
!7433 = !DILocation(line: 1730, column: 4, scope: !7434)
!7434 = distinct !DILexicalBlock(scope: !7409, file: !3, line: 1726, column: 2)
!7435 = !DILocation(line: 1733, column: 38, scope: !7185)
!7436 = !DILocation(line: 1733, column: 47, scope: !7185)
!7437 = !DILocation(line: 1733, column: 52, scope: !7185)
!7438 = !DILocation(line: 1734, column: 12, scope: !7185)
!7439 = !DILocation(line: 1734, column: 29, scope: !7185)
!7440 = !DILocation(line: 1734, column: 46, scope: !7185)
!7441 = !DILocation(line: 1734, column: 55, scope: !7185)
!7442 = !DILocation(line: 1734, column: 60, scope: !7185)
!7443 = !DILocation(line: 1733, column: 12, scope: !7186)
!7444 = !DILocation(line: 1740, column: 35, scope: !7183)
!7445 = !DILocation(line: 1740, column: 46, scope: !7183)
!7446 = !DILocation(line: 1740, column: 11, scope: !7183)
!7447 = !DILocation(line: 1740, column: 51, scope: !7183)
!7448 = !DILocation(line: 1741, column: 4, scope: !7183)
!7449 = !DILocation(line: 1741, column: 31, scope: !7183)
!7450 = !DILocation(line: 1741, column: 42, scope: !7183)
!7451 = !DILocation(line: 1741, column: 7, scope: !7183)
!7452 = !DILocation(line: 1741, column: 47, scope: !7183)
!7453 = !DILocation(line: 1740, column: 11, scope: !7184)
!7454 = !DILocation(line: 1742, column: 2, scope: !7183)
!7455 = !DILocation(line: 1776, column: 14, scope: !7456)
!7456 = distinct !DILexicalBlock(scope: !7182, file: !3, line: 1776, column: 8)
!7457 = !DILocation(line: 1776, column: 19, scope: !7456)
!7458 = !DILocation(line: 1776, column: 8, scope: !7182)
!7459 = !DILocation(line: 1782, column: 6, scope: !7460)
!7460 = distinct !DILexicalBlock(scope: !7456, file: !3, line: 1777, column: 6)
!7461 = !DILocation(line: 0, scope: !7456)
!7462 = !DILocation(line: 0, scope: !7182)
!7463 = !DILocation(line: 1794, column: 8, scope: !7464)
!7464 = distinct !DILexicalBlock(scope: !7182, file: !3, line: 1794, column: 8)
!7465 = !DILocation(line: 1794, column: 44, scope: !7464)
!7466 = !DILocation(line: 1795, column: 8, scope: !7464)
!7467 = !DILocation(line: 1795, column: 11, scope: !7464)
!7468 = !DILocation(line: 1795, column: 47, scope: !7464)
!7469 = !DILocation(line: 1794, column: 8, scope: !7182)
!7470 = !DILocation(line: 1799, column: 13, scope: !7471)
!7471 = distinct !DILexicalBlock(scope: !7472, file: !3, line: 1799, column: 12)
!7472 = distinct !DILexicalBlock(scope: !7464, file: !3, line: 1796, column: 6)
!7473 = !DILocation(line: 1800, column: 5, scope: !7471)
!7474 = !DILocation(line: 1800, column: 9, scope: !7471)
!7475 = !DILocation(line: 1799, column: 12, scope: !7472)
!7476 = !DILocation(line: 1802, column: 22, scope: !7471)
!7477 = !DILocation(line: 1801, column: 10, scope: !7471)
!7478 = !DILocation(line: 1806, column: 13, scope: !7479)
!7479 = distinct !DILexicalBlock(scope: !7464, file: !3, line: 1806, column: 13)
!7480 = !DILocation(line: 1806, column: 49, scope: !7479)
!7481 = !DILocation(line: 1807, column: 6, scope: !7479)
!7482 = !DILocation(line: 1807, column: 9, scope: !7479)
!7483 = !DILocation(line: 1807, column: 45, scope: !7479)
!7484 = !DILocation(line: 1806, column: 13, scope: !7464)
!7485 = !DILocation(line: 1810, column: 27, scope: !7486)
!7486 = distinct !DILexicalBlock(scope: !7479, file: !3, line: 1808, column: 6)
!7487 = !DILocation(line: 1809, column: 8, scope: !7486)
!7488 = !DILocation(line: 1811, column: 6, scope: !7486)
!7489 = !DILocation(line: 1815, column: 21, scope: !7490)
!7490 = distinct !DILexicalBlock(scope: !7479, file: !3, line: 1815, column: 13)
!7491 = !DILocation(line: 1816, column: 7, scope: !7490)
!7492 = !DILocation(line: 1817, column: 9, scope: !7490)
!7493 = !DILocation(line: 1817, column: 45, scope: !7490)
!7494 = !DILocation(line: 1815, column: 13, scope: !7479)
!7495 = !DILocation(line: 1819, column: 8, scope: !7496)
!7496 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 1818, column: 6)
!7497 = !DILocation(line: 1820, column: 37, scope: !7498)
!7498 = distinct !DILexicalBlock(scope: !7496, file: !3, line: 1820, column: 12)
!7499 = !DILocation(line: 1820, column: 12, scope: !7498)
!7500 = !DILocation(line: 1821, column: 5, scope: !7498)
!7501 = !DILocation(line: 1821, column: 8, scope: !7498)
!7502 = !DILocation(line: 1820, column: 12, scope: !7496)
!7503 = !DILocation(line: 1823, column: 38, scope: !7504)
!7504 = distinct !DILexicalBlock(scope: !7505, file: !3, line: 1823, column: 9)
!7505 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 1822, column: 3)
!7506 = !DILocation(line: 1823, column: 10, scope: !7504)
!7507 = !DILocation(line: 1823, column: 9, scope: !7505)
!7508 = !DILocation(line: 1825, column: 9, scope: !7509)
!7509 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 1824, column: 7)
!7510 = !DILocation(line: 1826, column: 9, scope: !7509)
!7511 = !DILocation(line: 1828, column: 39, scope: !7505)
!7512 = !DILocation(line: 1828, column: 11, scope: !7505)
!7513 = !DILocation(line: 1829, column: 3, scope: !7505)
!7514 = !DILocation(line: 1830, column: 18, scope: !7515)
!7515 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 1830, column: 17)
!7516 = !DILocation(line: 1830, column: 17, scope: !7498)
!7517 = !DILocation(line: 1831, column: 9, scope: !7515)
!7518 = !DILocation(line: 1831, column: 3, scope: !7515)
!7519 = !DILocation(line: 1835, column: 9, scope: !7515)
!7520 = !DILocation(line: 0, scope: !7498)
!7521 = !DILocation(line: 1838, column: 57, scope: !7496)
!7522 = !DILocation(line: 1838, column: 8, scope: !7496)
!7523 = !DILocation(line: 1839, column: 6, scope: !7496)
!7524 = !DILocation(line: 1843, column: 13, scope: !7525)
!7525 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 1843, column: 13)
!7526 = !DILocation(line: 1843, column: 49, scope: !7525)
!7527 = !DILocation(line: 1844, column: 6, scope: !7525)
!7528 = !DILocation(line: 1844, column: 17, scope: !7525)
!7529 = !DILocation(line: 1845, column: 10, scope: !7525)
!7530 = !DILocation(line: 1847, column: 8, scope: !7531)
!7531 = distinct !DILexicalBlock(scope: !7525, file: !3, line: 1846, column: 6)
!7532 = !DILocation(line: 1848, column: 37, scope: !7533)
!7533 = distinct !DILexicalBlock(scope: !7531, file: !3, line: 1848, column: 12)
!7534 = !DILocation(line: 1848, column: 12, scope: !7533)
!7535 = !DILocation(line: 1849, column: 5, scope: !7533)
!7536 = !DILocation(line: 1849, column: 8, scope: !7533)
!7537 = !DILocation(line: 1848, column: 12, scope: !7531)
!7538 = !DILocation(line: 1851, column: 38, scope: !7539)
!7539 = distinct !DILexicalBlock(scope: !7540, file: !3, line: 1851, column: 9)
!7540 = distinct !DILexicalBlock(scope: !7533, file: !3, line: 1850, column: 3)
!7541 = !DILocation(line: 1851, column: 10, scope: !7539)
!7542 = !DILocation(line: 1851, column: 9, scope: !7540)
!7543 = !DILocation(line: 1853, column: 9, scope: !7544)
!7544 = distinct !DILexicalBlock(scope: !7539, file: !3, line: 1852, column: 7)
!7545 = !DILocation(line: 1854, column: 9, scope: !7544)
!7546 = !DILocation(line: 1856, column: 39, scope: !7540)
!7547 = !DILocation(line: 1856, column: 11, scope: !7540)
!7548 = !DILocation(line: 1857, column: 3, scope: !7540)
!7549 = !DILocation(line: 1858, column: 18, scope: !7550)
!7550 = distinct !DILexicalBlock(scope: !7533, file: !3, line: 1858, column: 17)
!7551 = !DILocation(line: 1858, column: 17, scope: !7533)
!7552 = !DILocation(line: 1859, column: 9, scope: !7550)
!7553 = !DILocation(line: 1859, column: 3, scope: !7550)
!7554 = !DILocation(line: 1863, column: 9, scope: !7550)
!7555 = !DILocation(line: 0, scope: !7533)
!7556 = !DILocation(line: 1867, column: 57, scope: !7531)
!7557 = !DILocation(line: 1867, column: 8, scope: !7531)
!7558 = !DILocation(line: 1868, column: 6, scope: !7531)
!7559 = !DILocation(line: 1871, column: 1, scope: !7149)
!7560 = distinct !DISubprogram(name: "extract_range_from_ssa_name", scope: !3, file: !3, line: 1888, type: !3308, scopeLine: 1889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7561)
!7561 = !{!7562, !7563, !7564}
!7562 = !DILocalVariable(name: "vr", arg: 1, scope: !7560, file: !3, line: 1888, type: !687)
!7563 = !DILocalVariable(name: "var", arg: 2, scope: !7560, file: !3, line: 1888, type: !693)
!7564 = !DILocalVariable(name: "var_vr", scope: !7560, file: !3, line: 1890, type: !687)
!7565 = !DILocation(line: 0, scope: !7560)
!7566 = !DILocation(line: 1890, column: 27, scope: !7560)
!7567 = !DILocation(line: 1892, column: 15, scope: !7568)
!7568 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 1892, column: 7)
!7569 = !DILocation(line: 1892, column: 20, scope: !7568)
!7570 = !DILocation(line: 1892, column: 36, scope: !7568)
!7571 = !DILocation(line: 1892, column: 52, scope: !7568)
!7572 = !DILocation(line: 1892, column: 7, scope: !7560)
!7573 = !DILocation(line: 1893, column: 5, scope: !7568)
!7574 = !DILocation(line: 1895, column: 5, scope: !7568)
!7575 = !DILocation(line: 1897, column: 25, scope: !7560)
!7576 = !DILocation(line: 1897, column: 3, scope: !7560)
!7577 = !DILocation(line: 1898, column: 1, scope: !7560)
!7578 = distinct !DISubprogram(name: "extract_range_from_binary_expr", scope: !3, file: !3, line: 2052, type: !7579, scopeLine: 2055, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7581)
!7579 = !DISubroutineType(types: !7580)
!7580 = !{null, !687, !134, !693, !693, !693}
!7581 = !{!7582, !7583, !7584, !7585, !7586, !7587, !7588, !7589, !7590, !7591, !7592, !7593, !7596, !7597, !7600, !7606, !7607, !7608, !7611, !7612, !7619, !7620}
!7582 = !DILocalVariable(name: "vr", arg: 1, scope: !7578, file: !3, line: 2052, type: !687)
!7583 = !DILocalVariable(name: "code", arg: 2, scope: !7578, file: !3, line: 2053, type: !134)
!7584 = !DILocalVariable(name: "expr_type", arg: 3, scope: !7578, file: !3, line: 2054, type: !693)
!7585 = !DILocalVariable(name: "op0", arg: 4, scope: !7578, file: !3, line: 2054, type: !693)
!7586 = !DILocalVariable(name: "op1", arg: 5, scope: !7578, file: !3, line: 2054, type: !693)
!7587 = !DILocalVariable(name: "type", scope: !7578, file: !3, line: 2056, type: !390)
!7588 = !DILocalVariable(name: "min", scope: !7578, file: !3, line: 2057, type: !693)
!7589 = !DILocalVariable(name: "max", scope: !7578, file: !3, line: 2057, type: !693)
!7590 = !DILocalVariable(name: "cmp", scope: !7578, file: !3, line: 2058, type: !680)
!7591 = !DILocalVariable(name: "vr0", scope: !7578, file: !3, line: 2059, type: !688)
!7592 = !DILocalVariable(name: "vr1", scope: !7578, file: !3, line: 2060, type: !688)
!7593 = !DILocalVariable(name: "const_op0", scope: !7594, file: !3, line: 2082, type: !693)
!7594 = distinct !DILexicalBlock(scope: !7595, file: !3, line: 2080, column: 5)
!7595 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2064, column: 7)
!7596 = !DILocalVariable(name: "const_op1", scope: !7594, file: !3, line: 2083, type: !693)
!7597 = !DILocalVariable(name: "tem", scope: !7598, file: !3, line: 2086, type: !693)
!7598 = distinct !DILexicalBlock(scope: !7599, file: !3, line: 2085, column: 2)
!7599 = distinct !DILexicalBlock(scope: !7594, file: !3, line: 2084, column: 11)
!7600 = !DILocalVariable(name: "val", scope: !7601, file: !3, line: 2281, type: !7605)
!7601 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 2280, column: 5)
!7602 = distinct !DILexicalBlock(scope: !7603, file: !3, line: 2273, column: 12)
!7603 = distinct !DILexicalBlock(scope: !7604, file: !3, line: 2234, column: 12)
!7604 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2186, column: 7)
!7605 = !DICompositeType(tag: DW_TAG_array_type, baseType: !693, size: 256, elements: !960)
!7606 = !DILocalVariable(name: "i", scope: !7601, file: !3, line: 2282, type: !1162)
!7607 = !DILocalVariable(name: "sop", scope: !7601, file: !3, line: 2283, type: !679)
!7608 = !DILocalVariable(name: "zero", scope: !7609, file: !3, line: 2358, type: !693)
!7609 = distinct !DILexicalBlock(scope: !7610, file: !3, line: 2357, column: 2)
!7610 = distinct !DILexicalBlock(scope: !7601, file: !3, line: 2348, column: 11)
!7611 = !DILocalVariable(name: "cmp", scope: !7609, file: !3, line: 2359, type: !680)
!7612 = !DILocalVariable(name: "vr0_max", scope: !7613, file: !3, line: 2549, type: !742)
!7613 = distinct !DILexicalBlock(scope: !7614, file: !3, line: 2548, column: 2)
!7614 = distinct !DILexicalBlock(scope: !7615, file: !3, line: 2540, column: 11)
!7615 = distinct !DILexicalBlock(scope: !7616, file: !3, line: 2539, column: 5)
!7616 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 2538, column: 12)
!7617 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 2511, column: 12)
!7618 = distinct !DILexicalBlock(scope: !7602, file: !3, line: 2491, column: 12)
!7619 = !DILocalVariable(name: "vr1_max", scope: !7613, file: !3, line: 2550, type: !742)
!7620 = !DILocalVariable(name: "ior_max", scope: !7613, file: !3, line: 2551, type: !742)
!7621 = !DILocation(line: 0, scope: !7578)
!7622 = !DILocation(line: 2059, column: 3, scope: !7578)
!7623 = !DILocation(line: 2059, column: 17, scope: !7578)
!7624 = !DILocation(line: 2060, column: 3, scope: !7578)
!7625 = !DILocation(line: 2060, column: 17, scope: !7578)
!7626 = !DILocation(line: 2065, column: 7, scope: !7595)
!7627 = !DILocation(line: 2082, column: 24, scope: !7594)
!7628 = !DILocation(line: 0, scope: !7594)
!7629 = !DILocation(line: 2083, column: 24, scope: !7594)
!7630 = !DILocation(line: 2084, column: 11, scope: !7599)
!7631 = !DILocation(line: 2084, column: 24, scope: !7599)
!7632 = !DILocation(line: 2084, column: 21, scope: !7599)
!7633 = !DILocation(line: 2086, column: 15, scope: !7598)
!7634 = !DILocation(line: 0, scope: !7598)
!7635 = !DILocation(line: 2089, column: 8, scope: !7636)
!7636 = distinct !DILexicalBlock(scope: !7598, file: !3, line: 2089, column: 8)
!7637 = !DILocation(line: 2090, column: 8, scope: !7636)
!7638 = !DILocation(line: 2090, column: 11, scope: !7636)
!7639 = !DILocation(line: 2091, column: 8, scope: !7636)
!7640 = !DILocation(line: 2091, column: 12, scope: !7636)
!7641 = !DILocation(line: 2089, column: 8, scope: !7598)
!7642 = !DILocation(line: 2093, column: 8, scope: !7643)
!7643 = distinct !DILexicalBlock(scope: !7636, file: !3, line: 2092, column: 6)
!7644 = !DILocation(line: 2094, column: 8, scope: !7643)
!7645 = !DILocation(line: 2097, column: 7, scope: !7594)
!7646 = !DILocation(line: 2098, column: 7, scope: !7594)
!7647 = !DILocation(line: 2103, column: 7, scope: !7648)
!7648 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2103, column: 7)
!7649 = !DILocation(line: 2103, column: 23, scope: !7648)
!7650 = !DILocation(line: 2103, column: 7, scope: !7578)
!7651 = !DILocation(line: 2104, column: 13, scope: !7648)
!7652 = !DILocation(line: 2104, column: 11, scope: !7648)
!7653 = !DILocation(line: 2104, column: 5, scope: !7648)
!7654 = !DILocation(line: 2105, column: 12, scope: !7655)
!7655 = distinct !DILexicalBlock(scope: !7648, file: !3, line: 2105, column: 12)
!7656 = !DILocation(line: 2105, column: 12, scope: !7648)
!7657 = !DILocation(line: 2106, column: 5, scope: !7655)
!7658 = !DILocation(line: 2108, column: 5, scope: !7655)
!7659 = !DILocation(line: 2110, column: 7, scope: !7660)
!7660 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2110, column: 7)
!7661 = !DILocation(line: 2110, column: 23, scope: !7660)
!7662 = !DILocation(line: 2110, column: 7, scope: !7578)
!7663 = !DILocation(line: 2111, column: 13, scope: !7660)
!7664 = !DILocation(line: 2111, column: 11, scope: !7660)
!7665 = !DILocation(line: 2111, column: 5, scope: !7660)
!7666 = !DILocation(line: 2112, column: 12, scope: !7667)
!7667 = distinct !DILexicalBlock(scope: !7660, file: !3, line: 2112, column: 12)
!7668 = !DILocation(line: 2112, column: 12, scope: !7660)
!7669 = !DILocation(line: 2113, column: 5, scope: !7667)
!7670 = !DILocation(line: 2115, column: 5, scope: !7667)
!7671 = !DILocation(line: 2118, column: 11, scope: !7672)
!7672 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2118, column: 7)
!7673 = !DILocation(line: 2118, column: 16, scope: !7672)
!7674 = !DILocation(line: 2118, column: 32, scope: !7672)
!7675 = !DILocation(line: 2118, column: 39, scope: !7672)
!7676 = !DILocation(line: 2118, column: 44, scope: !7672)
!7677 = !DILocation(line: 2118, column: 7, scope: !7578)
!7678 = !DILocation(line: 2120, column: 7, scope: !7679)
!7679 = distinct !DILexicalBlock(scope: !7672, file: !3, line: 2119, column: 5)
!7680 = !DILocation(line: 2121, column: 7, scope: !7679)
!7681 = !DILocation(line: 2134, column: 7, scope: !7682)
!7682 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2133, column: 7)
!7683 = !DILocation(line: 2141, column: 20, scope: !7682)
!7684 = !DILocation(line: 2142, column: 4, scope: !7682)
!7685 = !DILocation(line: 2142, column: 16, scope: !7682)
!7686 = !DILocation(line: 2143, column: 4, scope: !7682)
!7687 = !DILocation(line: 2143, column: 16, scope: !7682)
!7688 = !DILocation(line: 2144, column: 4, scope: !7682)
!7689 = !DILocation(line: 2144, column: 7, scope: !7682)
!7690 = !DILocation(line: 2145, column: 4, scope: !7682)
!7691 = !DILocation(line: 2145, column: 7, scope: !7682)
!7692 = !DILocation(line: 2133, column: 7, scope: !7578)
!7693 = !DILocation(line: 2147, column: 7, scope: !7694)
!7694 = distinct !DILexicalBlock(scope: !7682, file: !3, line: 2146, column: 5)
!7695 = !DILocation(line: 2148, column: 7, scope: !7694)
!7696 = !DILocation(line: 2152, column: 7, scope: !7697)
!7697 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2152, column: 7)
!7698 = !DILocation(line: 2153, column: 7, scope: !7697)
!7699 = !DILocation(line: 2153, column: 10, scope: !7697)
!7700 = !DILocation(line: 2154, column: 7, scope: !7697)
!7701 = !DILocation(line: 2154, column: 10, scope: !7697)
!7702 = !DILocation(line: 2152, column: 7, scope: !7578)
!7703 = !DILocation(line: 2156, column: 28, scope: !7704)
!7704 = distinct !DILexicalBlock(scope: !7705, file: !3, line: 2156, column: 11)
!7705 = distinct !DILexicalBlock(scope: !7697, file: !3, line: 2155, column: 5)
!7706 = !DILocation(line: 2162, column: 8, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7708, file: !3, line: 2162, column: 8)
!7708 = distinct !DILexicalBlock(scope: !7704, file: !3, line: 2157, column: 2)
!7709 = !DILocation(line: 2162, column: 32, scope: !7707)
!7710 = !DILocation(line: 2162, column: 35, scope: !7707)
!7711 = !DILocation(line: 2162, column: 8, scope: !7708)
!7712 = !DILocation(line: 2163, column: 6, scope: !7707)
!7713 = !DILocation(line: 2164, column: 13, scope: !7714)
!7714 = distinct !DILexicalBlock(scope: !7707, file: !3, line: 2164, column: 13)
!7715 = !DILocation(line: 2164, column: 34, scope: !7714)
!7716 = !DILocation(line: 2164, column: 37, scope: !7714)
!7717 = !DILocation(line: 2164, column: 13, scope: !7707)
!7718 = !DILocation(line: 2165, column: 6, scope: !7714)
!7719 = !DILocation(line: 2167, column: 6, scope: !7714)
!7720 = !DILocation(line: 2171, column: 7, scope: !7705)
!7721 = !DILocation(line: 2174, column: 11, scope: !7722)
!7722 = distinct !DILexicalBlock(scope: !7705, file: !3, line: 2174, column: 11)
!7723 = !DILocation(line: 2174, column: 35, scope: !7722)
!7724 = !DILocation(line: 2174, column: 38, scope: !7722)
!7725 = !DILocation(line: 2174, column: 11, scope: !7705)
!7726 = !DILocation(line: 2175, column: 2, scope: !7722)
!7727 = !DILocation(line: 2176, column: 16, scope: !7728)
!7728 = distinct !DILexicalBlock(scope: !7722, file: !3, line: 2176, column: 16)
!7729 = !DILocation(line: 2176, column: 37, scope: !7728)
!7730 = !DILocation(line: 2176, column: 40, scope: !7728)
!7731 = !DILocation(line: 2176, column: 16, scope: !7722)
!7732 = !DILocation(line: 2177, column: 2, scope: !7728)
!7733 = !DILocation(line: 2179, column: 2, scope: !7728)
!7734 = !DILocation(line: 2187, column: 7, scope: !7604)
!7735 = !DILocation(line: 2192, column: 13, scope: !7736)
!7736 = distinct !DILexicalBlock(scope: !7737, file: !3, line: 2191, column: 11)
!7737 = distinct !DILexicalBlock(scope: !7604, file: !3, line: 2188, column: 5)
!7738 = !DILocation(line: 2192, column: 18, scope: !7736)
!7739 = !DILocation(line: 2193, column: 9, scope: !7736)
!7740 = !DILocation(line: 2193, column: 31, scope: !7736)
!7741 = !DILocation(line: 2193, column: 12, scope: !7736)
!7742 = !DILocation(line: 2194, column: 9, scope: !7736)
!7743 = !DILocation(line: 2194, column: 31, scope: !7736)
!7744 = !DILocation(line: 2194, column: 12, scope: !7736)
!7745 = !DILocation(line: 2195, column: 8, scope: !7736)
!7746 = !DILocation(line: 2195, column: 16, scope: !7736)
!7747 = !DILocation(line: 2195, column: 21, scope: !7736)
!7748 = !DILocation(line: 2196, column: 5, scope: !7736)
!7749 = !DILocation(line: 2196, column: 27, scope: !7736)
!7750 = !DILocation(line: 2196, column: 8, scope: !7736)
!7751 = !DILocation(line: 2197, column: 5, scope: !7736)
!7752 = !DILocation(line: 2197, column: 27, scope: !7736)
!7753 = !DILocation(line: 2197, column: 8, scope: !7736)
!7754 = !DILocation(line: 2191, column: 11, scope: !7737)
!7755 = !DILocation(line: 2200, column: 16, scope: !7756)
!7756 = distinct !DILexicalBlock(scope: !7736, file: !3, line: 2198, column: 2)
!7757 = !DILocation(line: 2201, column: 2, scope: !7756)
!7758 = !DILocation(line: 2205, column: 9, scope: !7759)
!7759 = distinct !DILexicalBlock(scope: !7736, file: !3, line: 2204, column: 16)
!7760 = !DILocation(line: 2205, column: 18, scope: !7759)
!7761 = !DILocation(line: 2205, column: 23, scope: !7759)
!7762 = !DILocation(line: 2206, column: 7, scope: !7759)
!7763 = !DILocation(line: 2206, column: 28, scope: !7759)
!7764 = !DILocation(line: 2206, column: 10, scope: !7759)
!7765 = !DILocation(line: 2207, column: 7, scope: !7759)
!7766 = !DILocation(line: 2207, column: 28, scope: !7759)
!7767 = !DILocation(line: 2207, column: 10, scope: !7759)
!7768 = !DILocation(line: 2208, column: 6, scope: !7759)
!7769 = !DILocation(line: 2208, column: 14, scope: !7759)
!7770 = !DILocation(line: 2208, column: 19, scope: !7759)
!7771 = !DILocation(line: 2209, column: 10, scope: !7759)
!7772 = !DILocation(line: 2209, column: 31, scope: !7759)
!7773 = !DILocation(line: 2209, column: 13, scope: !7759)
!7774 = !DILocation(line: 2210, column: 10, scope: !7759)
!7775 = !DILocation(line: 2210, column: 31, scope: !7759)
!7776 = !DILocation(line: 2210, column: 13, scope: !7759)
!7777 = !DILocation(line: 2204, column: 16, scope: !7736)
!7778 = !DILocation(line: 2213, column: 16, scope: !7779)
!7779 = distinct !DILexicalBlock(scope: !7759, file: !3, line: 2211, column: 2)
!7780 = !DILocation(line: 2214, column: 2, scope: !7779)
!7781 = !DILocation(line: 2215, column: 20, scope: !7782)
!7782 = distinct !DILexicalBlock(scope: !7759, file: !3, line: 2215, column: 16)
!7783 = !DILocation(line: 2215, column: 25, scope: !7782)
!7784 = !DILocation(line: 2216, column: 9, scope: !7782)
!7785 = !DILocation(line: 2216, column: 16, scope: !7782)
!7786 = !DILocation(line: 2216, column: 21, scope: !7782)
!7787 = !DILocation(line: 2217, column: 9, scope: !7782)
!7788 = !DILocation(line: 2217, column: 21, scope: !7782)
!7789 = !DILocation(line: 2218, column: 9, scope: !7782)
!7790 = !DILocation(line: 2218, column: 13, scope: !7782)
!7791 = !DILocation(line: 2219, column: 9, scope: !7782)
!7792 = !DILocation(line: 2219, column: 13, scope: !7782)
!7793 = !DILocation(line: 2220, column: 9, scope: !7782)
!7794 = !DILocation(line: 2220, column: 13, scope: !7782)
!7795 = !DILocation(line: 2221, column: 9, scope: !7782)
!7796 = !DILocation(line: 2221, column: 13, scope: !7782)
!7797 = !DILocation(line: 2215, column: 16, scope: !7759)
!7798 = !DILocation(line: 2224, column: 10, scope: !7799)
!7799 = distinct !DILexicalBlock(scope: !7782, file: !3, line: 2222, column: 2)
!7800 = !DILocation(line: 2225, column: 10, scope: !7799)
!7801 = !DILocation(line: 2230, column: 4, scope: !7802)
!7802 = distinct !DILexicalBlock(scope: !7782, file: !3, line: 2228, column: 2)
!7803 = !DILocation(line: 2231, column: 4, scope: !7802)
!7804 = !DILocation(line: 2245, column: 36, scope: !7805)
!7805 = distinct !DILexicalBlock(scope: !7806, file: !3, line: 2245, column: 11)
!7806 = distinct !DILexicalBlock(scope: !7603, file: !3, line: 2237, column: 5)
!7807 = !DILocation(line: 2245, column: 41, scope: !7805)
!7808 = !DILocation(line: 2245, column: 11, scope: !7806)
!7809 = !DILocation(line: 2247, column: 4, scope: !7810)
!7810 = distinct !DILexicalBlock(scope: !7805, file: !3, line: 2246, column: 2)
!7811 = !DILocation(line: 2248, column: 4, scope: !7810)
!7812 = !DILocation(line: 2254, column: 44, scope: !7806)
!7813 = !DILocation(line: 2254, column: 53, scope: !7806)
!7814 = !DILocation(line: 2254, column: 13, scope: !7806)
!7815 = !DILocation(line: 2255, column: 44, scope: !7806)
!7816 = !DILocation(line: 2255, column: 53, scope: !7806)
!7817 = !DILocation(line: 2255, column: 13, scope: !7806)
!7818 = !DILocation(line: 2261, column: 16, scope: !7819)
!7819 = distinct !DILexicalBlock(scope: !7806, file: !3, line: 2261, column: 11)
!7820 = !DILocation(line: 2262, column: 4, scope: !7819)
!7821 = !DILocation(line: 2262, column: 8, scope: !7819)
!7822 = !DILocation(line: 2262, column: 28, scope: !7819)
!7823 = !DILocation(line: 2262, column: 32, scope: !7819)
!7824 = !DILocation(line: 2263, column: 4, scope: !7819)
!7825 = !DILocation(line: 2263, column: 8, scope: !7819)
!7826 = !DILocation(line: 2263, column: 28, scope: !7819)
!7827 = !DILocation(line: 2263, column: 32, scope: !7819)
!7828 = !DILocation(line: 2261, column: 11, scope: !7806)
!7829 = !DILocation(line: 2265, column: 30, scope: !7830)
!7830 = distinct !DILexicalBlock(scope: !7819, file: !3, line: 2264, column: 2)
!7831 = !DILocation(line: 2266, column: 9, scope: !7830)
!7832 = !DILocation(line: 2267, column: 9, scope: !7830)
!7833 = !DILocation(line: 2265, column: 10, scope: !7830)
!7834 = !DILocation(line: 2268, column: 30, scope: !7830)
!7835 = !DILocation(line: 2269, column: 9, scope: !7830)
!7836 = !DILocation(line: 2270, column: 9, scope: !7830)
!7837 = !DILocation(line: 2268, column: 10, scope: !7830)
!7838 = !DILocation(line: 2271, column: 2, scope: !7830)
!7839 = !DILocation(line: 2281, column: 7, scope: !7601)
!7840 = !DILocation(line: 2281, column: 12, scope: !7601)
!7841 = !DILocation(line: 0, scope: !7601)
!7842 = !DILocation(line: 2283, column: 7, scope: !7601)
!7843 = !DILocation(line: 2294, column: 4, scope: !7844)
!7844 = distinct !DILexicalBlock(scope: !7601, file: !3, line: 2293, column: 11)
!7845 = !DILocation(line: 2294, column: 11, scope: !7844)
!7846 = !DILocation(line: 2294, column: 16, scope: !7844)
!7847 = !DILocation(line: 2295, column: 4, scope: !7844)
!7848 = !DILocation(line: 2295, column: 8, scope: !7844)
!7849 = !DILocation(line: 2297, column: 4, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7844, file: !3, line: 2296, column: 2)
!7851 = !DILocation(line: 2298, column: 4, scope: !7850)
!7852 = !DILocation(line: 2306, column: 11, scope: !7601)
!7853 = !DILocation(line: 2308, column: 12, scope: !7854)
!7854 = distinct !DILexicalBlock(scope: !7855, file: !3, line: 2308, column: 8)
!7855 = distinct !DILexicalBlock(scope: !7856, file: !3, line: 2307, column: 2)
!7856 = distinct !DILexicalBlock(scope: !7601, file: !3, line: 2306, column: 11)
!7857 = !DILocation(line: 2308, column: 17, scope: !7854)
!7858 = !DILocation(line: 2309, column: 8, scope: !7854)
!7859 = !DILocation(line: 2309, column: 12, scope: !7854)
!7860 = !DILocation(line: 2310, column: 8, scope: !7854)
!7861 = !DILocation(line: 2311, column: 21, scope: !7854)
!7862 = !DILocation(line: 2312, column: 7, scope: !7854)
!7863 = !DILocation(line: 2312, column: 34, scope: !7854)
!7864 = !DILocation(line: 2311, column: 6, scope: !7854)
!7865 = !DILocation(line: 2313, column: 10, scope: !7854)
!7866 = !DILocation(line: 2310, column: 12, scope: !7854)
!7867 = !DILocation(line: 2313, column: 15, scope: !7854)
!7868 = !DILocation(line: 2308, column: 8, scope: !7855)
!7869 = !DILocation(line: 2315, column: 8, scope: !7870)
!7870 = distinct !DILexicalBlock(scope: !7854, file: !3, line: 2314, column: 6)
!7871 = !DILocation(line: 2316, column: 8, scope: !7870)
!7872 = !DILocation(line: 2325, column: 17, scope: !7873)
!7873 = distinct !DILexicalBlock(scope: !7856, file: !3, line: 2320, column: 16)
!7874 = !DILocation(line: 2325, column: 22, scope: !7873)
!7875 = !DILocation(line: 2325, column: 34, scope: !7873)
!7876 = !DILocation(line: 2325, column: 37, scope: !7873)
!7877 = !DILocation(line: 2320, column: 16, scope: !7856)
!7878 = !DILocation(line: 2330, column: 12, scope: !7879)
!7879 = distinct !DILexicalBlock(scope: !7880, file: !3, line: 2330, column: 8)
!7880 = distinct !DILexicalBlock(scope: !7873, file: !3, line: 2326, column: 2)
!7881 = !DILocation(line: 2330, column: 17, scope: !7879)
!7882 = !DILocation(line: 2331, column: 8, scope: !7879)
!7883 = !DILocation(line: 2331, column: 12, scope: !7879)
!7884 = !DILocation(line: 2332, column: 8, scope: !7879)
!7885 = !DILocation(line: 2332, column: 12, scope: !7879)
!7886 = !DILocation(line: 2330, column: 8, scope: !7880)
!7887 = !DILocation(line: 2334, column: 17, scope: !7888)
!7888 = distinct !DILexicalBlock(scope: !7879, file: !3, line: 2333, column: 6)
!7889 = !DILocation(line: 2335, column: 31, scope: !7888)
!7890 = !DILocation(line: 2335, column: 18, scope: !7888)
!7891 = !DILocation(line: 2335, column: 12, scope: !7888)
!7892 = !DILocation(line: 2335, column: 16, scope: !7888)
!7893 = !DILocation(line: 2336, column: 31, scope: !7888)
!7894 = !DILocation(line: 2336, column: 18, scope: !7888)
!7895 = !DILocation(line: 2336, column: 12, scope: !7888)
!7896 = !DILocation(line: 2336, column: 16, scope: !7888)
!7897 = !DILocation(line: 2343, column: 2, scope: !7880)
!7898 = !DILocation(line: 2340, column: 8, scope: !7899)
!7899 = distinct !DILexicalBlock(scope: !7879, file: !3, line: 2339, column: 6)
!7900 = !DILocation(line: 2341, column: 8, scope: !7899)
!7901 = !DILocation(line: 2349, column: 5, scope: !7610)
!7902 = !DILocation(line: 2353, column: 11, scope: !7610)
!7903 = !DILocation(line: 2353, column: 16, scope: !7610)
!7904 = !DILocation(line: 2354, column: 4, scope: !7610)
!7905 = !DILocation(line: 2354, column: 12, scope: !7610)
!7906 = !DILocation(line: 2354, column: 17, scope: !7610)
!7907 = !DILocation(line: 2355, column: 8, scope: !7610)
!7908 = !DILocation(line: 2355, column: 11, scope: !7610)
!7909 = !DILocation(line: 2356, column: 8, scope: !7610)
!7910 = !DILocation(line: 2356, column: 11, scope: !7610)
!7911 = !DILocation(line: 2348, column: 11, scope: !7601)
!7912 = !DILocation(line: 2358, column: 31, scope: !7609)
!7913 = !DILocation(line: 2358, column: 16, scope: !7609)
!7914 = !DILocation(line: 0, scope: !7609)
!7915 = !DILocation(line: 2361, column: 8, scope: !7609)
!7916 = !DILocation(line: 2364, column: 8, scope: !7917)
!7917 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 2364, column: 8)
!7918 = !DILocation(line: 2364, column: 54, scope: !7917)
!7919 = !DILocation(line: 2364, column: 50, scope: !7917)
!7920 = !DILocation(line: 2370, column: 34, scope: !7921)
!7921 = distinct !DILexicalBlock(scope: !7917, file: !3, line: 2365, column: 6)
!7922 = !DILocation(line: 2370, column: 14, scope: !7921)
!7923 = !DILocation(line: 2371, column: 12, scope: !7921)
!7924 = !DILocation(line: 2374, column: 13, scope: !7925)
!7925 = distinct !DILexicalBlock(scope: !7926, file: !3, line: 2373, column: 17)
!7926 = distinct !DILexicalBlock(scope: !7921, file: !3, line: 2371, column: 12)
!7927 = !DILocation(line: 2374, column: 3, scope: !7925)
!7928 = !DILocation(line: 2125, column: 8, scope: !7578)
!7929 = !DILocation(line: 0, scope: !7926)
!7930 = !DILocation(line: 2377, column: 34, scope: !7921)
!7931 = !DILocation(line: 2377, column: 14, scope: !7921)
!7932 = !DILocation(line: 2378, column: 12, scope: !7921)
!7933 = !DILocation(line: 2381, column: 13, scope: !7934)
!7934 = distinct !DILexicalBlock(scope: !7935, file: !3, line: 2380, column: 17)
!7935 = distinct !DILexicalBlock(scope: !7921, file: !3, line: 2378, column: 12)
!7936 = !DILocation(line: 2381, column: 3, scope: !7934)
!7937 = !DILocation(line: 2390, column: 34, scope: !7938)
!7938 = distinct !DILexicalBlock(scope: !7917, file: !3, line: 2386, column: 6)
!7939 = !DILocation(line: 2390, column: 43, scope: !7938)
!7940 = !DILocation(line: 2390, column: 8, scope: !7938)
!7941 = !DILocation(line: 2391, column: 8, scope: !7938)
!7942 = !DILocation(line: 0, scope: !7935)
!7943 = !DILocation(line: 2393, column: 13, scope: !7944)
!7944 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 2393, column: 8)
!7945 = !DILocation(line: 2393, column: 8, scope: !7609)
!7946 = !DILocation(line: 2395, column: 8, scope: !7947)
!7947 = distinct !DILexicalBlock(scope: !7944, file: !3, line: 2394, column: 6)
!7948 = !DILocation(line: 2396, column: 8, scope: !7947)
!7949 = !DILocation(line: 2414, column: 4, scope: !7950)
!7950 = distinct !DILexicalBlock(scope: !7610, file: !3, line: 2413, column: 2)
!7951 = !DILocation(line: 2419, column: 8, scope: !7950)
!7952 = !DILocation(line: 2420, column: 44, scope: !7950)
!7953 = !DILocation(line: 2420, column: 53, scope: !7950)
!7954 = !DILocation(line: 2420, column: 13, scope: !7950)
!7955 = !DILocation(line: 2420, column: 4, scope: !7950)
!7956 = !DILocation(line: 2420, column: 11, scope: !7950)
!7957 = !DILocation(line: 2421, column: 15, scope: !7958)
!7958 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 2421, column: 8)
!7959 = !DILocation(line: 2421, column: 8, scope: !7950)
!7960 = !DILocation(line: 2422, column: 10, scope: !7958)
!7961 = !DILocation(line: 2422, column: 6, scope: !7958)
!7962 = !DILocation(line: 2424, column: 12, scope: !7963)
!7963 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 2424, column: 8)
!7964 = !DILocation(line: 2424, column: 23, scope: !7963)
!7965 = !DILocation(line: 2424, column: 16, scope: !7963)
!7966 = !DILocation(line: 2424, column: 8, scope: !7950)
!7967 = !DILocation(line: 2425, column: 6, scope: !7963)
!7968 = !DILocation(line: 2425, column: 13, scope: !7963)
!7969 = !DILocation(line: 2428, column: 48, scope: !7970)
!7970 = distinct !DILexicalBlock(scope: !7963, file: !3, line: 2427, column: 6)
!7971 = !DILocation(line: 2428, column: 17, scope: !7970)
!7972 = !DILocation(line: 2428, column: 8, scope: !7970)
!7973 = !DILocation(line: 2428, column: 15, scope: !7970)
!7974 = !DILocation(line: 2429, column: 19, scope: !7975)
!7975 = distinct !DILexicalBlock(scope: !7970, file: !3, line: 2429, column: 12)
!7976 = !DILocation(line: 2429, column: 12, scope: !7970)
!7977 = !DILocation(line: 2430, column: 7, scope: !7975)
!7978 = !DILocation(line: 2430, column: 3, scope: !7975)
!7979 = !DILocation(line: 2433, column: 12, scope: !7980)
!7980 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 2433, column: 8)
!7981 = !DILocation(line: 2433, column: 23, scope: !7980)
!7982 = !DILocation(line: 2433, column: 16, scope: !7980)
!7983 = !DILocation(line: 2433, column: 8, scope: !7950)
!7984 = !DILocation(line: 2434, column: 6, scope: !7980)
!7985 = !DILocation(line: 2434, column: 13, scope: !7980)
!7986 = !DILocation(line: 2437, column: 57, scope: !7987)
!7987 = distinct !DILexicalBlock(scope: !7980, file: !3, line: 2436, column: 6)
!7988 = !DILocation(line: 2437, column: 17, scope: !7987)
!7989 = !DILocation(line: 2437, column: 8, scope: !7987)
!7990 = !DILocation(line: 2437, column: 15, scope: !7987)
!7991 = !DILocation(line: 2438, column: 19, scope: !7992)
!7992 = distinct !DILexicalBlock(scope: !7987, file: !3, line: 2438, column: 12)
!7993 = !DILocation(line: 2438, column: 12, scope: !7987)
!7994 = !DILocation(line: 2439, column: 7, scope: !7992)
!7995 = !DILocation(line: 2439, column: 3, scope: !7992)
!7996 = !DILocation(line: 2442, column: 12, scope: !7997)
!7997 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 2442, column: 8)
!7998 = !DILocation(line: 2442, column: 23, scope: !7997)
!7999 = !DILocation(line: 2442, column: 16, scope: !7997)
!8000 = !DILocation(line: 2442, column: 27, scope: !7997)
!8001 = !DILocation(line: 2442, column: 34, scope: !7997)
!8002 = !DILocation(line: 2442, column: 45, scope: !7997)
!8003 = !DILocation(line: 2442, column: 38, scope: !7997)
!8004 = !DILocation(line: 2442, column: 8, scope: !7950)
!8005 = !DILocation(line: 2443, column: 6, scope: !7997)
!8006 = !DILocation(line: 2443, column: 13, scope: !7997)
!8007 = !DILocation(line: 2446, column: 17, scope: !8008)
!8008 = distinct !DILexicalBlock(scope: !7997, file: !3, line: 2445, column: 6)
!8009 = !DILocation(line: 2446, column: 8, scope: !8008)
!8010 = !DILocation(line: 2446, column: 15, scope: !8008)
!8011 = !DILocation(line: 2447, column: 19, scope: !8012)
!8012 = distinct !DILexicalBlock(scope: !8008, file: !3, line: 2447, column: 12)
!8013 = !DILocation(line: 2447, column: 12, scope: !8008)
!8014 = !DILocation(line: 2448, column: 7, scope: !8012)
!8015 = !DILocation(line: 2448, column: 3, scope: !8012)
!8016 = !DILocation(line: 2451, column: 8, scope: !8017)
!8017 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 2451, column: 8)
!8018 = !DILocation(line: 2451, column: 8, scope: !7950)
!8019 = !DILocation(line: 2453, column: 8, scope: !8020)
!8020 = distinct !DILexicalBlock(scope: !8017, file: !3, line: 2452, column: 6)
!8021 = !DILocation(line: 2454, column: 8, scope: !8020)
!8022 = !DILocation(line: 2461, column: 9, scope: !8023)
!8023 = distinct !DILexicalBlock(scope: !7950, file: !3, line: 2461, column: 4)
!8024 = !DILocation(line: 0, scope: !7950)
!8025 = !DILocation(line: 0, scope: !8023)
!8026 = !DILocation(line: 2461, column: 18, scope: !8027)
!8027 = distinct !DILexicalBlock(scope: !8023, file: !3, line: 2461, column: 4)
!8028 = !DILocation(line: 2461, column: 4, scope: !8023)
!8029 = !DILocation(line: 2463, column: 13, scope: !8030)
!8030 = distinct !DILexicalBlock(scope: !8031, file: !3, line: 2463, column: 12)
!8031 = distinct !DILexicalBlock(scope: !8027, file: !3, line: 2462, column: 6)
!8032 = !DILocation(line: 2464, column: 5, scope: !8030)
!8033 = !DILocation(line: 2464, column: 9, scope: !8030)
!8034 = !DILocation(line: 2464, column: 29, scope: !8030)
!8035 = !DILocation(line: 2464, column: 33, scope: !8030)
!8036 = !DILocation(line: 2465, column: 5, scope: !8030)
!8037 = !DILocation(line: 2465, column: 9, scope: !8030)
!8038 = !DILocation(line: 2466, column: 5, scope: !8030)
!8039 = !DILocation(line: 2466, column: 9, scope: !8030)
!8040 = !DILocation(line: 2466, column: 29, scope: !8030)
!8041 = !DILocation(line: 2466, column: 33, scope: !8030)
!8042 = !DILocation(line: 2463, column: 12, scope: !8031)
!8043 = !DILocation(line: 2469, column: 12, scope: !8044)
!8044 = distinct !DILexicalBlock(scope: !8031, file: !3, line: 2469, column: 12)
!8045 = !DILocation(line: 2469, column: 12, scope: !8031)
!8046 = !DILocation(line: 2471, column: 10, scope: !8047)
!8047 = distinct !DILexicalBlock(scope: !8048, file: !3, line: 2471, column: 9)
!8048 = distinct !DILexicalBlock(scope: !8044, file: !3, line: 2470, column: 3)
!8049 = !DILocation(line: 2472, column: 9, scope: !8047)
!8050 = !DILocation(line: 2472, column: 13, scope: !8047)
!8051 = !DILocation(line: 2473, column: 6, scope: !8047)
!8052 = !DILocation(line: 2473, column: 10, scope: !8047)
!8053 = !DILocation(line: 2471, column: 9, scope: !8048)
!8054 = !DILocation(line: 2479, column: 9, scope: !8055)
!8055 = distinct !DILexicalBlock(scope: !8047, file: !3, line: 2474, column: 7)
!8056 = !DILocation(line: 2482, column: 9, scope: !8057)
!8057 = distinct !DILexicalBlock(scope: !8048, file: !3, line: 2482, column: 9)
!8058 = !DILocation(line: 2482, column: 38, scope: !8057)
!8059 = !DILocation(line: 2482, column: 9, scope: !8048)
!8060 = !DILocation(line: 2483, column: 7, scope: !8057)
!8061 = !DILocation(line: 2485, column: 9, scope: !8062)
!8062 = distinct !DILexicalBlock(scope: !8048, file: !3, line: 2485, column: 9)
!8063 = !DILocation(line: 2485, column: 38, scope: !8062)
!8064 = !DILocation(line: 2485, column: 9, scope: !8048)
!8065 = !DILocation(line: 2486, column: 7, scope: !8062)
!8066 = !DILocation(line: 2461, column: 24, scope: !8027)
!8067 = !DILocation(line: 2461, column: 4, scope: !8027)
!8068 = distinct !{!8068, !8028, !8069}
!8069 = !DILocation(line: 2488, column: 6, scope: !8023)
!8070 = !DILocation(line: 2490, column: 5, scope: !7602)
!8071 = !DILocation(line: 0, scope: !7610)
!8072 = !DILocation(line: 2500, column: 15, scope: !8073)
!8073 = distinct !DILexicalBlock(scope: !8074, file: !3, line: 2500, column: 11)
!8074 = distinct !DILexicalBlock(scope: !7618, file: !3, line: 2492, column: 5)
!8075 = !DILocation(line: 2500, column: 20, scope: !8073)
!8076 = !DILocation(line: 2500, column: 11, scope: !8074)
!8077 = !DILocation(line: 2502, column: 4, scope: !8078)
!8078 = distinct !DILexicalBlock(scope: !8073, file: !3, line: 2501, column: 2)
!8079 = !DILocation(line: 2503, column: 4, scope: !8078)
!8080 = !DILocation(line: 2508, column: 44, scope: !8074)
!8081 = !DILocation(line: 2508, column: 53, scope: !8074)
!8082 = !DILocation(line: 2508, column: 13, scope: !8074)
!8083 = !DILocation(line: 2509, column: 44, scope: !8074)
!8084 = !DILocation(line: 2509, column: 53, scope: !8074)
!8085 = !DILocation(line: 2509, column: 13, scope: !8074)
!8086 = !DILocation(line: 2510, column: 5, scope: !8074)
!8087 = !DILocation(line: 2513, column: 15, scope: !8088)
!8088 = distinct !DILexicalBlock(scope: !8089, file: !3, line: 2513, column: 11)
!8089 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 2512, column: 5)
!8090 = !DILocation(line: 2513, column: 20, scope: !8088)
!8091 = !DILocation(line: 2514, column: 4, scope: !8088)
!8092 = !DILocation(line: 2514, column: 11, scope: !8088)
!8093 = !DILocation(line: 2514, column: 22, scope: !8088)
!8094 = !DILocation(line: 2514, column: 15, scope: !8088)
!8095 = !DILocation(line: 2515, column: 4, scope: !8088)
!8096 = !DILocation(line: 2515, column: 7, scope: !8088)
!8097 = !DILocation(line: 2515, column: 27, scope: !8088)
!8098 = !DILocation(line: 2516, column: 4, scope: !8088)
!8099 = !DILocation(line: 2516, column: 8, scope: !8088)
!8100 = !DILocation(line: 2517, column: 4, scope: !8088)
!8101 = !DILocation(line: 2517, column: 7, scope: !8088)
!8102 = !DILocation(line: 2517, column: 34, scope: !8088)
!8103 = !DILocation(line: 2513, column: 11, scope: !8089)
!8104 = !DILocation(line: 2519, column: 10, scope: !8105)
!8105 = distinct !DILexicalBlock(scope: !8088, file: !3, line: 2518, column: 2)
!8106 = !DILocation(line: 2520, column: 14, scope: !8105)
!8107 = !DILocation(line: 2521, column: 2, scope: !8105)
!8108 = !DILocation(line: 2522, column: 20, scope: !8109)
!8109 = distinct !DILexicalBlock(scope: !8088, file: !3, line: 2522, column: 16)
!8110 = !DILocation(line: 2522, column: 25, scope: !8109)
!8111 = !DILocation(line: 2523, column: 9, scope: !8109)
!8112 = !DILocation(line: 2523, column: 16, scope: !8109)
!8113 = !DILocation(line: 2523, column: 27, scope: !8109)
!8114 = !DILocation(line: 2523, column: 20, scope: !8109)
!8115 = !DILocation(line: 2524, column: 9, scope: !8109)
!8116 = !DILocation(line: 2524, column: 12, scope: !8109)
!8117 = !DILocation(line: 2524, column: 32, scope: !8109)
!8118 = !DILocation(line: 2525, column: 9, scope: !8109)
!8119 = !DILocation(line: 2525, column: 13, scope: !8109)
!8120 = !DILocation(line: 2526, column: 9, scope: !8109)
!8121 = !DILocation(line: 2526, column: 12, scope: !8109)
!8122 = !DILocation(line: 2526, column: 39, scope: !8109)
!8123 = !DILocation(line: 2522, column: 16, scope: !8088)
!8124 = !DILocation(line: 2529, column: 10, scope: !8125)
!8125 = distinct !DILexicalBlock(scope: !8109, file: !3, line: 2527, column: 2)
!8126 = !DILocation(line: 2530, column: 14, scope: !8125)
!8127 = !DILocation(line: 2534, column: 4, scope: !8128)
!8128 = distinct !DILexicalBlock(scope: !8109, file: !3, line: 2533, column: 2)
!8129 = !DILocation(line: 2535, column: 4, scope: !8128)
!8130 = !DILocation(line: 2540, column: 15, scope: !7614)
!8131 = !DILocation(line: 2540, column: 20, scope: !7614)
!8132 = !DILocation(line: 2541, column: 11, scope: !7614)
!8133 = !DILocation(line: 2541, column: 18, scope: !7614)
!8134 = !DILocation(line: 2541, column: 23, scope: !7614)
!8135 = !DILocation(line: 2542, column: 4, scope: !7614)
!8136 = !DILocation(line: 2542, column: 7, scope: !7614)
!8137 = !DILocation(line: 2542, column: 27, scope: !7614)
!8138 = !DILocation(line: 2543, column: 4, scope: !7614)
!8139 = !DILocation(line: 2543, column: 7, scope: !7614)
!8140 = !DILocation(line: 2543, column: 27, scope: !7614)
!8141 = !DILocation(line: 2544, column: 4, scope: !7614)
!8142 = !DILocation(line: 2544, column: 7, scope: !7614)
!8143 = !DILocation(line: 2544, column: 27, scope: !7614)
!8144 = !DILocation(line: 2545, column: 4, scope: !7614)
!8145 = !DILocation(line: 2545, column: 7, scope: !7614)
!8146 = !DILocation(line: 2545, column: 27, scope: !7614)
!8147 = !DILocation(line: 2546, column: 4, scope: !7614)
!8148 = !DILocation(line: 2546, column: 7, scope: !7614)
!8149 = !DILocation(line: 2546, column: 34, scope: !7614)
!8150 = !DILocation(line: 2547, column: 4, scope: !7614)
!8151 = !DILocation(line: 2547, column: 29, scope: !7614)
!8152 = !DILocation(line: 2547, column: 7, scope: !7614)
!8153 = !DILocation(line: 2547, column: 34, scope: !7614)
!8154 = !DILocation(line: 2540, column: 11, scope: !7615)
!8155 = !DILocation(line: 2549, column: 49, scope: !7613)
!8156 = !DILocation(line: 2549, column: 25, scope: !7613)
!8157 = !DILocation(line: 2550, column: 49, scope: !7613)
!8158 = !DILocation(line: 2550, column: 25, scope: !7613)
!8159 = !DILocation(line: 2555, column: 30, scope: !7613)
!8160 = !DILocation(line: 2556, column: 32, scope: !7613)
!8161 = !DILocation(line: 2557, column: 21, scope: !8162)
!8162 = distinct !DILexicalBlock(scope: !7613, file: !3, line: 2557, column: 8)
!8163 = !DILocation(line: 2557, column: 8, scope: !7613)
!8164 = !DILocation(line: 2561, column: 14, scope: !8165)
!8165 = distinct !DILexicalBlock(scope: !8162, file: !3, line: 2558, column: 6)
!8166 = !DILocation(line: 2561, column: 11, scope: !8165)
!8167 = !DILocation(line: 2561, column: 41, scope: !8165)
!8168 = !DILocation(line: 2560, column: 21, scope: !8165)
!8169 = !DILocation(line: 2562, column: 6, scope: !8165)
!8170 = !DILocation(line: 2563, column: 25, scope: !8171)
!8171 = distinct !DILexicalBlock(scope: !8162, file: !3, line: 2563, column: 13)
!8172 = !DILocation(line: 2563, column: 13, scope: !8162)
!8173 = !DILocation(line: 2565, column: 11, scope: !8171)
!8174 = !DILocation(line: 2565, column: 8, scope: !8171)
!8175 = !DILocation(line: 2565, column: 37, scope: !8171)
!8176 = !DILocation(line: 2564, column: 18, scope: !8171)
!8177 = !DILocation(line: 2564, column: 6, scope: !8171)
!8178 = !DILocation(line: 2569, column: 17, scope: !7613)
!8179 = !DILocation(line: 2568, column: 52, scope: !7613)
!8180 = !DILocation(line: 2568, column: 61, scope: !7613)
!8181 = !DILocation(line: 2568, column: 17, scope: !7613)
!8182 = !DILocation(line: 2576, column: 5, scope: !7615)
!8183 = !DILocation(line: 2573, column: 4, scope: !8184)
!8184 = distinct !DILexicalBlock(scope: !7614, file: !3, line: 2572, column: 2)
!8185 = !DILocation(line: 2574, column: 4, scope: !8184)
!8186 = !DILocation(line: 2578, column: 5, scope: !7616)
!8187 = !DILocation(line: 0, scope: !7604)
!8188 = !DILocation(line: 2583, column: 11, scope: !8189)
!8189 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2583, column: 7)
!8190 = !DILocation(line: 2584, column: 7, scope: !8189)
!8191 = !DILocation(line: 2584, column: 11, scope: !8189)
!8192 = !DILocation(line: 2585, column: 7, scope: !8189)
!8193 = !DILocation(line: 2585, column: 11, scope: !8189)
!8194 = !DILocation(line: 2585, column: 31, scope: !8189)
!8195 = !DILocation(line: 2585, column: 35, scope: !8189)
!8196 = !DILocation(line: 2586, column: 14, scope: !8189)
!8197 = !DILocation(line: 2586, column: 7, scope: !8189)
!8198 = !DILocation(line: 2587, column: 7, scope: !8189)
!8199 = !DILocation(line: 2587, column: 11, scope: !8189)
!8200 = !DILocation(line: 2588, column: 7, scope: !8189)
!8201 = !DILocation(line: 2588, column: 11, scope: !8189)
!8202 = !DILocation(line: 2588, column: 31, scope: !8189)
!8203 = !DILocation(line: 2588, column: 35, scope: !8189)
!8204 = !DILocation(line: 2583, column: 7, scope: !7578)
!8205 = !DILocation(line: 2590, column: 7, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8189, file: !3, line: 2589, column: 5)
!8207 = !DILocation(line: 2591, column: 7, scope: !8206)
!8208 = !DILocation(line: 2602, column: 8, scope: !8209)
!8209 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2602, column: 7)
!8210 = !DILocation(line: 2602, column: 29, scope: !8209)
!8211 = !DILocation(line: 2602, column: 32, scope: !8209)
!8212 = !DILocation(line: 2603, column: 7, scope: !8209)
!8213 = !DILocation(line: 2603, column: 11, scope: !8209)
!8214 = !DILocation(line: 2603, column: 32, scope: !8209)
!8215 = !DILocation(line: 2603, column: 35, scope: !8209)
!8216 = !DILocation(line: 2602, column: 7, scope: !7578)
!8217 = !DILocation(line: 2605, column: 7, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !8209, file: !3, line: 2604, column: 5)
!8219 = !DILocation(line: 2606, column: 7, scope: !8218)
!8220 = !DILocation(line: 2609, column: 9, scope: !7578)
!8221 = !DILocation(line: 2610, column: 17, scope: !8222)
!8222 = distinct !DILexicalBlock(scope: !7578, file: !3, line: 2610, column: 7)
!8223 = !DILocation(line: 2615, column: 7, scope: !8224)
!8224 = distinct !DILexicalBlock(scope: !8222, file: !3, line: 2611, column: 5)
!8225 = !DILocation(line: 2616, column: 5, scope: !8224)
!8226 = !DILocation(line: 2618, column: 5, scope: !8222)
!8227 = !DILocation(line: 2619, column: 1, scope: !7578)
!8228 = distinct !DISubprogram(name: "extract_range_from_unary_expr", scope: !3, file: !3, line: 2626, type: !8229, scopeLine: 2628, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8231)
!8229 = !DISubroutineType(types: !8230)
!8230 = !{null, !687, !134, !693, !693}
!8231 = !{!8232, !8233, !8234, !8235, !8236, !8237, !8238, !8239, !8240, !8245, !8248, !8251, !8252, !8255, !8256, !8267}
!8232 = !DILocalVariable(name: "vr", arg: 1, scope: !8228, file: !3, line: 2626, type: !687)
!8233 = !DILocalVariable(name: "code", arg: 2, scope: !8228, file: !3, line: 2626, type: !134)
!8234 = !DILocalVariable(name: "type", arg: 3, scope: !8228, file: !3, line: 2627, type: !693)
!8235 = !DILocalVariable(name: "op0", arg: 4, scope: !8228, file: !3, line: 2627, type: !693)
!8236 = !DILocalVariable(name: "min", scope: !8228, file: !3, line: 2629, type: !693)
!8237 = !DILocalVariable(name: "max", scope: !8228, file: !3, line: 2629, type: !693)
!8238 = !DILocalVariable(name: "cmp", scope: !8228, file: !3, line: 2630, type: !680)
!8239 = !DILocalVariable(name: "vr0", scope: !8228, file: !3, line: 2631, type: !688)
!8240 = !DILocalVariable(name: "tem", scope: !8241, file: !3, line: 2643, type: !693)
!8241 = distinct !DILexicalBlock(scope: !8242, file: !3, line: 2642, column: 2)
!8242 = distinct !DILexicalBlock(scope: !8243, file: !3, line: 2641, column: 11)
!8243 = distinct !DILexicalBlock(scope: !8244, file: !3, line: 2639, column: 5)
!8244 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2635, column: 7)
!8245 = !DILocalVariable(name: "sop", scope: !8246, file: !3, line: 2687, type: !679)
!8246 = distinct !DILexicalBlock(scope: !8247, file: !3, line: 2686, column: 5)
!8247 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2685, column: 7)
!8248 = !DILocalVariable(name: "inner_type", scope: !8249, file: !3, line: 2707, type: !693)
!8249 = distinct !DILexicalBlock(scope: !8250, file: !3, line: 2706, column: 5)
!8250 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2703, column: 7)
!8251 = !DILocalVariable(name: "outer_type", scope: !8249, file: !3, line: 2708, type: !693)
!8252 = !DILocalVariable(name: "new_min", scope: !8253, file: !3, line: 2738, type: !693)
!8253 = distinct !DILexicalBlock(scope: !8254, file: !3, line: 2737, column: 2)
!8254 = distinct !DILexicalBlock(scope: !8249, file: !3, line: 2726, column: 11)
!8255 = !DILocalVariable(name: "new_max", scope: !8253, file: !3, line: 2738, type: !693)
!8256 = !DILocalVariable(name: "type_min_value", scope: !8257, file: !3, line: 2895, type: !693)
!8257 = distinct !DILexicalBlock(scope: !8258, file: !3, line: 2894, column: 3)
!8258 = distinct !DILexicalBlock(scope: !8259, file: !3, line: 2893, column: 12)
!8259 = distinct !DILexicalBlock(scope: !8260, file: !3, line: 2884, column: 6)
!8260 = distinct !DILexicalBlock(scope: !8261, file: !3, line: 2883, column: 8)
!8261 = distinct !DILexicalBlock(scope: !8262, file: !3, line: 2882, column: 2)
!8262 = distinct !DILexicalBlock(scope: !8263, file: !3, line: 2881, column: 11)
!8263 = distinct !DILexicalBlock(scope: !8264, file: !3, line: 2830, column: 5)
!8264 = distinct !DILexicalBlock(scope: !8265, file: !3, line: 2828, column: 12)
!8265 = distinct !DILexicalBlock(scope: !8266, file: !3, line: 2811, column: 12)
!8266 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2766, column: 7)
!8267 = !DILocalVariable(name: "t", scope: !8268, file: !3, line: 2945, type: !693)
!8268 = distinct !DILexicalBlock(scope: !8269, file: !3, line: 2944, column: 6)
!8269 = distinct !DILexicalBlock(scope: !8270, file: !3, line: 2943, column: 8)
!8270 = distinct !DILexicalBlock(scope: !8271, file: !3, line: 2941, column: 2)
!8271 = distinct !DILexicalBlock(scope: !8262, file: !3, line: 2934, column: 16)
!8272 = !DILocation(line: 0, scope: !8228)
!8273 = !DILocation(line: 2631, column: 3, scope: !8228)
!8274 = !DILocation(line: 2631, column: 17, scope: !8228)
!8275 = !DILocation(line: 2636, column: 7, scope: !8244)
!8276 = !DILocation(line: 2641, column: 18, scope: !8242)
!8277 = !DILocation(line: 2641, column: 64, scope: !8242)
!8278 = !DILocation(line: 2641, column: 11, scope: !8243)
!8279 = !DILocation(line: 2643, column: 15, scope: !8241)
!8280 = !DILocation(line: 0, scope: !8241)
!8281 = !DILocation(line: 2644, column: 8, scope: !8282)
!8282 = distinct !DILexicalBlock(scope: !8241, file: !3, line: 2644, column: 8)
!8283 = !DILocation(line: 2645, column: 8, scope: !8282)
!8284 = !DILocation(line: 2645, column: 11, scope: !8282)
!8285 = !DILocation(line: 2646, column: 8, scope: !8282)
!8286 = !DILocation(line: 2646, column: 12, scope: !8282)
!8287 = !DILocation(line: 2644, column: 8, scope: !8241)
!8288 = !DILocation(line: 2648, column: 8, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8282, file: !3, line: 2647, column: 6)
!8290 = !DILocation(line: 2649, column: 8, scope: !8289)
!8291 = !DILocation(line: 2652, column: 7, scope: !8243)
!8292 = !DILocation(line: 2653, column: 7, scope: !8243)
!8293 = !DILocation(line: 2658, column: 7, scope: !8294)
!8294 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2658, column: 7)
!8295 = !DILocation(line: 2658, column: 23, scope: !8294)
!8296 = !DILocation(line: 2658, column: 7, scope: !8228)
!8297 = !DILocation(line: 2659, column: 13, scope: !8294)
!8298 = !DILocation(line: 2659, column: 11, scope: !8294)
!8299 = !DILocation(line: 2659, column: 5, scope: !8294)
!8300 = !DILocation(line: 2660, column: 12, scope: !8301)
!8301 = distinct !DILexicalBlock(scope: !8294, file: !3, line: 2660, column: 12)
!8302 = !DILocation(line: 2660, column: 12, scope: !8294)
!8303 = !DILocation(line: 2661, column: 5, scope: !8301)
!8304 = !DILocation(line: 2663, column: 5, scope: !8301)
!8305 = !DILocation(line: 2666, column: 11, scope: !8306)
!8306 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2666, column: 7)
!8307 = !DILocation(line: 2666, column: 16, scope: !8306)
!8308 = !DILocation(line: 2666, column: 7, scope: !8228)
!8309 = !DILocation(line: 2668, column: 7, scope: !8310)
!8310 = distinct !DILexicalBlock(scope: !8306, file: !3, line: 2667, column: 5)
!8311 = !DILocation(line: 2669, column: 7, scope: !8310)
!8312 = !DILocation(line: 2674, column: 9, scope: !8313)
!8313 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2674, column: 7)
!8314 = !DILocation(line: 2675, column: 8, scope: !8313)
!8315 = !DILocation(line: 2675, column: 12, scope: !8313)
!8316 = !DILocation(line: 2676, column: 7, scope: !8313)
!8317 = !DILocation(line: 2676, column: 20, scope: !8313)
!8318 = !DILocation(line: 2677, column: 4, scope: !8313)
!8319 = !DILocation(line: 2677, column: 7, scope: !8313)
!8320 = !DILocation(line: 2674, column: 7, scope: !8228)
!8321 = !DILocation(line: 2679, column: 7, scope: !8322)
!8322 = distinct !DILexicalBlock(scope: !8313, file: !3, line: 2678, column: 5)
!8323 = !DILocation(line: 2680, column: 7, scope: !8322)
!8324 = !DILocation(line: 2685, column: 7, scope: !8247)
!8325 = !DILocation(line: 2685, column: 29, scope: !8247)
!8326 = !DILocation(line: 2685, column: 32, scope: !8247)
!8327 = !DILocation(line: 2685, column: 7, scope: !8228)
!8328 = !DILocation(line: 0, scope: !8246)
!8329 = !DILocation(line: 2687, column: 7, scope: !8246)
!8330 = !DILocation(line: 2689, column: 11, scope: !8246)
!8331 = !DILocation(line: 2690, column: 11, scope: !8332)
!8332 = distinct !DILexicalBlock(scope: !8246, file: !3, line: 2690, column: 11)
!8333 = !DILocation(line: 2691, column: 4, scope: !8332)
!8334 = !DILocation(line: 2691, column: 8, scope: !8332)
!8335 = !DILocation(line: 2692, column: 12, scope: !8332)
!8336 = !DILocation(line: 2692, column: 8, scope: !8332)
!8337 = !DILocation(line: 2693, column: 2, scope: !8332)
!8338 = !DILocation(line: 2694, column: 16, scope: !8339)
!8339 = distinct !DILexicalBlock(scope: !8332, file: !3, line: 2694, column: 16)
!8340 = !DILocation(line: 2694, column: 16, scope: !8332)
!8341 = !DILocation(line: 2695, column: 2, scope: !8339)
!8342 = !DILocation(line: 2697, column: 2, scope: !8339)
!8343 = !DILocation(line: 2700, column: 5, scope: !8247)
!8344 = !DILocation(line: 2703, column: 7, scope: !8250)
!8345 = !DILocation(line: 2704, column: 10, scope: !8250)
!8346 = !DILocation(line: 2705, column: 7, scope: !8250)
!8347 = !DILocation(line: 2705, column: 10, scope: !8250)
!8348 = !DILocation(line: 2703, column: 7, scope: !8228)
!8349 = !DILocation(line: 0, scope: !8249)
!8350 = !DILocation(line: 2712, column: 15, scope: !8351)
!8351 = distinct !DILexicalBlock(scope: !8249, file: !3, line: 2712, column: 11)
!8352 = !DILocation(line: 2712, column: 20, scope: !8351)
!8353 = !DILocation(line: 2713, column: 4, scope: !8351)
!8354 = !DILocation(line: 2713, column: 7, scope: !8351)
!8355 = !DILocation(line: 2713, column: 37, scope: !8351)
!8356 = !DILocation(line: 2713, column: 35, scope: !8351)
!8357 = !DILocation(line: 2712, column: 11, scope: !8249)
!8358 = !DILocation(line: 2715, column: 13, scope: !8359)
!8359 = distinct !DILexicalBlock(scope: !8351, file: !3, line: 2714, column: 2)
!8360 = !DILocation(line: 2716, column: 14, scope: !8359)
!8361 = !DILocation(line: 2716, column: 8, scope: !8359)
!8362 = !DILocation(line: 2716, column: 12, scope: !8359)
!8363 = !DILocation(line: 2717, column: 14, scope: !8359)
!8364 = !DILocation(line: 2717, column: 8, scope: !8359)
!8365 = !DILocation(line: 2717, column: 12, scope: !8359)
!8366 = !DILocation(line: 2718, column: 2, scope: !8359)
!8367 = !DILocation(line: 2726, column: 16, scope: !8254)
!8368 = !DILocation(line: 2726, column: 21, scope: !8254)
!8369 = !DILocation(line: 2727, column: 5, scope: !8254)
!8370 = !DILocation(line: 2727, column: 17, scope: !8254)
!8371 = !DILocation(line: 2728, column: 4, scope: !8254)
!8372 = !DILocation(line: 2728, column: 7, scope: !8254)
!8373 = !DILocation(line: 2728, column: 27, scope: !8254)
!8374 = !DILocation(line: 2729, column: 4, scope: !8254)
!8375 = !DILocation(line: 2729, column: 7, scope: !8254)
!8376 = !DILocation(line: 2729, column: 27, scope: !8254)
!8377 = !DILocation(line: 2730, column: 4, scope: !8254)
!8378 = !DILocation(line: 2730, column: 8, scope: !8254)
!8379 = !DILocation(line: 2731, column: 4, scope: !8254)
!8380 = !DILocation(line: 2731, column: 34, scope: !8254)
!8381 = !DILocation(line: 2731, column: 8, scope: !8254)
!8382 = !DILocation(line: 2732, column: 4, scope: !8254)
!8383 = !DILocation(line: 2732, column: 8, scope: !8254)
!8384 = !DILocation(line: 2732, column: 39, scope: !8254)
!8385 = !DILocation(line: 2732, column: 36, scope: !8254)
!8386 = !DILocation(line: 2733, column: 8, scope: !8254)
!8387 = !DILocation(line: 2733, column: 16, scope: !8254)
!8388 = !DILocation(line: 2733, column: 21, scope: !8254)
!8389 = !DILocation(line: 2734, column: 5, scope: !8254)
!8390 = !DILocation(line: 2735, column: 43, scope: !8254)
!8391 = !DILocation(line: 2735, column: 52, scope: !8254)
!8392 = !DILocation(line: 2735, column: 10, scope: !8254)
!8393 = !DILocation(line: 2736, column: 12, scope: !8254)
!8394 = !DILocation(line: 2734, column: 23, scope: !8254)
!8395 = !DILocation(line: 2734, column: 8, scope: !8254)
!8396 = !DILocation(line: 2726, column: 11, scope: !8249)
!8397 = !DILocation(line: 2740, column: 9, scope: !8253)
!8398 = !DILocation(line: 2741, column: 9, scope: !8253)
!8399 = !DILocation(line: 2739, column: 14, scope: !8253)
!8400 = !DILocation(line: 0, scope: !8253)
!8401 = !DILocation(line: 2743, column: 9, scope: !8253)
!8402 = !DILocation(line: 2744, column: 9, scope: !8253)
!8403 = !DILocation(line: 2742, column: 14, scope: !8253)
!8404 = !DILocation(line: 2745, column: 46, scope: !8253)
!8405 = !DILocation(line: 2745, column: 4, scope: !8253)
!8406 = !DILocation(line: 2750, column: 7, scope: !8249)
!8407 = !DILocation(line: 2751, column: 7, scope: !8249)
!8408 = !DILocation(line: 2758, column: 11, scope: !8409)
!8409 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 2758, column: 7)
!8410 = !DILocation(line: 2758, column: 16, scope: !8409)
!8411 = !DILocation(line: 2758, column: 7, scope: !8228)
!8412 = !DILocation(line: 2760, column: 7, scope: !8413)
!8413 = distinct !DILexicalBlock(scope: !8409, file: !3, line: 2759, column: 5)
!8414 = !DILocation(line: 2761, column: 7, scope: !8413)
!8415 = !DILocation(line: 2767, column: 7, scope: !8266)
!8416 = !DILocation(line: 2829, column: 16, scope: !8264)
!8417 = !DILocation(line: 2767, column: 11, scope: !8266)
!8418 = !DILocation(line: 2766, column: 7, scope: !8228)
!8419 = !DILocation(line: 2771, column: 46, scope: !8420)
!8420 = distinct !DILexicalBlock(scope: !8421, file: !3, line: 2771, column: 11)
!8421 = distinct !DILexicalBlock(scope: !8266, file: !3, line: 2768, column: 5)
!8422 = !DILocation(line: 2771, column: 11, scope: !8420)
!8423 = !DILocation(line: 2771, column: 11, scope: !8421)
!8424 = !DILocation(line: 2772, column: 8, scope: !8420)
!8425 = !DILocation(line: 2772, column: 2, scope: !8420)
!8426 = !DILocation(line: 2773, column: 51, scope: !8427)
!8427 = distinct !DILexicalBlock(scope: !8420, file: !3, line: 2773, column: 16)
!8428 = !DILocation(line: 2773, column: 16, scope: !8427)
!8429 = !DILocation(line: 2773, column: 16, scope: !8420)
!8430 = !DILocation(line: 2774, column: 8, scope: !8427)
!8431 = !DILocation(line: 2774, column: 2, scope: !8427)
!8432 = !DILocation(line: 2775, column: 37, scope: !8433)
!8433 = distinct !DILexicalBlock(scope: !8427, file: !3, line: 2775, column: 16)
!8434 = !DILocation(line: 2775, column: 17, scope: !8433)
!8435 = !DILocation(line: 2775, column: 16, scope: !8427)
!8436 = !DILocation(line: 2776, column: 48, scope: !8433)
!8437 = !DILocation(line: 2776, column: 8, scope: !8433)
!8438 = !DILocation(line: 2776, column: 2, scope: !8433)
!8439 = !DILocation(line: 2777, column: 16, scope: !8440)
!8440 = distinct !DILexicalBlock(scope: !8433, file: !3, line: 2777, column: 16)
!8441 = !DILocation(line: 2777, column: 16, scope: !8433)
!8442 = !DILocation(line: 2779, column: 8, scope: !8443)
!8443 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 2779, column: 8)
!8444 = distinct !DILexicalBlock(scope: !8440, file: !3, line: 2778, column: 2)
!8445 = !DILocation(line: 2780, column: 8, scope: !8443)
!8446 = !DILocation(line: 2780, column: 38, scope: !8443)
!8447 = !DILocation(line: 2780, column: 12, scope: !8443)
!8448 = !DILocation(line: 2781, column: 8, scope: !8443)
!8449 = !DILocation(line: 2781, column: 32, scope: !8443)
!8450 = !DILocation(line: 2781, column: 12, scope: !8443)
!8451 = !DILocation(line: 2779, column: 8, scope: !8444)
!8452 = !DILocation(line: 2782, column: 12, scope: !8443)
!8453 = !DILocation(line: 2788, column: 2, scope: !8444)
!8454 = !DILocation(line: 2785, column: 8, scope: !8455)
!8455 = distinct !DILexicalBlock(scope: !8443, file: !3, line: 2784, column: 6)
!8456 = !DILocation(line: 2786, column: 8, scope: !8455)
!8457 = !DILocation(line: 2790, column: 8, scope: !8440)
!8458 = !DILocation(line: 0, scope: !8420)
!8459 = !DILocation(line: 2792, column: 46, scope: !8460)
!8460 = distinct !DILexicalBlock(scope: !8421, file: !3, line: 2792, column: 11)
!8461 = !DILocation(line: 2792, column: 11, scope: !8460)
!8462 = !DILocation(line: 2792, column: 11, scope: !8421)
!8463 = !DILocation(line: 2793, column: 8, scope: !8460)
!8464 = !DILocation(line: 2793, column: 2, scope: !8460)
!8465 = !DILocation(line: 2794, column: 51, scope: !8466)
!8466 = distinct !DILexicalBlock(scope: !8460, file: !3, line: 2794, column: 16)
!8467 = !DILocation(line: 2794, column: 16, scope: !8466)
!8468 = !DILocation(line: 2794, column: 16, scope: !8460)
!8469 = !DILocation(line: 2795, column: 8, scope: !8466)
!8470 = !DILocation(line: 2795, column: 2, scope: !8466)
!8471 = !DILocation(line: 2796, column: 37, scope: !8472)
!8472 = distinct !DILexicalBlock(scope: !8466, file: !3, line: 2796, column: 16)
!8473 = !DILocation(line: 2796, column: 17, scope: !8472)
!8474 = !DILocation(line: 2796, column: 16, scope: !8466)
!8475 = !DILocation(line: 2797, column: 48, scope: !8472)
!8476 = !DILocation(line: 2797, column: 8, scope: !8472)
!8477 = !DILocation(line: 2797, column: 2, scope: !8472)
!8478 = !DILocation(line: 2798, column: 16, scope: !8479)
!8479 = distinct !DILexicalBlock(scope: !8472, file: !3, line: 2798, column: 16)
!8480 = !DILocation(line: 2798, column: 16, scope: !8472)
!8481 = !DILocation(line: 2800, column: 8, scope: !8482)
!8482 = distinct !DILexicalBlock(scope: !8483, file: !3, line: 2800, column: 8)
!8483 = distinct !DILexicalBlock(scope: !8479, file: !3, line: 2799, column: 2)
!8484 = !DILocation(line: 2800, column: 8, scope: !8483)
!8485 = !DILocation(line: 2801, column: 12, scope: !8482)
!8486 = !DILocation(line: 2807, column: 2, scope: !8483)
!8487 = !DILocation(line: 2804, column: 8, scope: !8488)
!8488 = distinct !DILexicalBlock(scope: !8482, file: !3, line: 2803, column: 6)
!8489 = !DILocation(line: 2805, column: 8, scope: !8488)
!8490 = !DILocation(line: 2809, column: 8, scope: !8479)
!8491 = !DILocation(line: 2812, column: 5, scope: !8265)
!8492 = !DILocation(line: 2811, column: 12, scope: !8266)
!8493 = !DILocation(line: 2814, column: 12, scope: !8494)
!8494 = distinct !DILexicalBlock(scope: !8495, file: !3, line: 2814, column: 11)
!8495 = distinct !DILexicalBlock(scope: !8265, file: !3, line: 2813, column: 5)
!8496 = !DILocation(line: 2814, column: 11, scope: !8495)
!8497 = !DILocation(line: 2816, column: 50, scope: !8498)
!8498 = distinct !DILexicalBlock(scope: !8494, file: !3, line: 2815, column: 2)
!8499 = !DILocation(line: 2816, column: 10, scope: !8498)
!8500 = !DILocation(line: 2817, column: 50, scope: !8498)
!8501 = !DILocation(line: 2817, column: 10, scope: !8498)
!8502 = !DILocation(line: 2827, column: 5, scope: !8495)
!8503 = !DILocation(line: 2821, column: 8, scope: !8504)
!8504 = distinct !DILexicalBlock(scope: !8505, file: !3, line: 2821, column: 8)
!8505 = distinct !DILexicalBlock(scope: !8494, file: !3, line: 2820, column: 2)
!8506 = !DILocation(line: 2821, column: 8, scope: !8505)
!8507 = !DILocation(line: 2822, column: 6, scope: !8504)
!8508 = !DILocation(line: 2824, column: 6, scope: !8504)
!8509 = !DILocation(line: 2829, column: 12, scope: !8264)
!8510 = !DILocation(line: 2828, column: 12, scope: !8265)
!8511 = !DILocation(line: 2833, column: 12, scope: !8512)
!8512 = distinct !DILexicalBlock(scope: !8263, file: !3, line: 2833, column: 11)
!8513 = !DILocation(line: 2834, column: 18, scope: !8512)
!8514 = !DILocation(line: 2835, column: 9, scope: !8512)
!8515 = !DILocation(line: 2835, column: 32, scope: !8512)
!8516 = !DILocation(line: 2835, column: 12, scope: !8512)
!8517 = !DILocation(line: 2836, column: 8, scope: !8512)
!8518 = !DILocation(line: 2836, column: 16, scope: !8512)
!8519 = !DILocation(line: 2836, column: 21, scope: !8512)
!8520 = !DILocation(line: 2837, column: 5, scope: !8512)
!8521 = !DILocation(line: 2837, column: 29, scope: !8512)
!8522 = !DILocation(line: 2837, column: 9, scope: !8512)
!8523 = !DILocation(line: 2838, column: 5, scope: !8512)
!8524 = !DILocation(line: 2838, column: 9, scope: !8512)
!8525 = !DILocation(line: 2833, column: 11, scope: !8263)
!8526 = !DILocation(line: 2840, column: 4, scope: !8527)
!8527 = distinct !DILexicalBlock(scope: !8512, file: !3, line: 2839, column: 2)
!8528 = !DILocation(line: 2841, column: 4, scope: !8527)
!8529 = !DILocation(line: 2846, column: 37, scope: !8530)
!8530 = distinct !DILexicalBlock(scope: !8263, file: !3, line: 2846, column: 11)
!8531 = !DILocation(line: 2846, column: 11, scope: !8530)
!8532 = !DILocation(line: 2846, column: 11, scope: !8263)
!8533 = !DILocation(line: 2847, column: 8, scope: !8530)
!8534 = !DILocation(line: 2847, column: 2, scope: !8530)
!8535 = !DILocation(line: 2848, column: 37, scope: !8536)
!8536 = distinct !DILexicalBlock(scope: !8530, file: !3, line: 2848, column: 16)
!8537 = !DILocation(line: 2848, column: 17, scope: !8536)
!8538 = !DILocation(line: 2848, column: 16, scope: !8530)
!8539 = !DILocation(line: 2849, column: 48, scope: !8536)
!8540 = !DILocation(line: 2849, column: 8, scope: !8536)
!8541 = !DILocation(line: 2849, column: 2, scope: !8536)
!8542 = !DILocation(line: 2850, column: 17, scope: !8543)
!8543 = distinct !DILexicalBlock(scope: !8536, file: !3, line: 2850, column: 16)
!8544 = !DILocation(line: 2850, column: 16, scope: !8536)
!8545 = !DILocation(line: 2851, column: 8, scope: !8543)
!8546 = !DILocation(line: 2851, column: 2, scope: !8543)
!8547 = !DILocation(line: 2852, column: 16, scope: !8548)
!8548 = distinct !DILexicalBlock(scope: !8543, file: !3, line: 2852, column: 16)
!8549 = !DILocation(line: 2852, column: 16, scope: !8543)
!8550 = !DILocation(line: 2853, column: 8, scope: !8548)
!8551 = !DILocation(line: 2856, column: 4, scope: !8552)
!8552 = distinct !DILexicalBlock(scope: !8548, file: !3, line: 2855, column: 2)
!8553 = !DILocation(line: 2857, column: 4, scope: !8552)
!8554 = !DILocation(line: 0, scope: !8530)
!8555 = !DILocation(line: 2860, column: 37, scope: !8556)
!8556 = distinct !DILexicalBlock(scope: !8263, file: !3, line: 2860, column: 11)
!8557 = !DILocation(line: 2860, column: 11, scope: !8556)
!8558 = !DILocation(line: 2860, column: 11, scope: !8263)
!8559 = !DILocation(line: 2861, column: 8, scope: !8556)
!8560 = !DILocation(line: 2861, column: 2, scope: !8556)
!8561 = !DILocation(line: 2862, column: 37, scope: !8562)
!8562 = distinct !DILexicalBlock(scope: !8556, file: !3, line: 2862, column: 16)
!8563 = !DILocation(line: 2862, column: 17, scope: !8562)
!8564 = !DILocation(line: 2862, column: 16, scope: !8556)
!8565 = !DILocation(line: 2863, column: 48, scope: !8562)
!8566 = !DILocation(line: 2863, column: 8, scope: !8562)
!8567 = !DILocation(line: 2863, column: 2, scope: !8562)
!8568 = !DILocation(line: 2864, column: 17, scope: !8569)
!8569 = distinct !DILexicalBlock(scope: !8562, file: !3, line: 2864, column: 16)
!8570 = !DILocation(line: 2864, column: 16, scope: !8562)
!8571 = !DILocation(line: 2865, column: 8, scope: !8569)
!8572 = !DILocation(line: 2865, column: 2, scope: !8569)
!8573 = !DILocation(line: 2866, column: 16, scope: !8574)
!8574 = distinct !DILexicalBlock(scope: !8569, file: !3, line: 2866, column: 16)
!8575 = !DILocation(line: 2869, column: 9, scope: !8574)
!8576 = !DILocation(line: 2869, column: 13, scope: !8574)
!8577 = !DILocation(line: 2866, column: 16, scope: !8569)
!8578 = !DILocation(line: 2870, column: 8, scope: !8574)
!8579 = !DILocation(line: 2873, column: 4, scope: !8580)
!8580 = distinct !DILexicalBlock(scope: !8574, file: !3, line: 2872, column: 2)
!8581 = !DILocation(line: 2874, column: 4, scope: !8580)
!8582 = !DILocation(line: 0, scope: !8556)
!8583 = !DILocation(line: 2877, column: 13, scope: !8263)
!8584 = !DILocation(line: 2881, column: 15, scope: !8262)
!8585 = !DILocation(line: 2881, column: 20, scope: !8262)
!8586 = !DILocation(line: 0, scope: !8262)
!8587 = !DILocation(line: 2881, column: 11, scope: !8263)
!8588 = !DILocation(line: 2883, column: 8, scope: !8261)
!8589 = !DILocation(line: 2886, column: 16, scope: !8590)
!8590 = distinct !DILexicalBlock(scope: !8259, file: !3, line: 2886, column: 12)
!8591 = !DILocation(line: 2886, column: 12, scope: !8259)
!8592 = !DILocation(line: 2893, column: 12, scope: !8258)
!8593 = !DILocation(line: 2895, column: 27, scope: !8257)
!8594 = !DILocation(line: 0, scope: !8257)
!8595 = !DILocation(line: 2897, column: 16, scope: !8257)
!8596 = !DILocation(line: 2897, column: 20, scope: !8257)
!8597 = !DILocation(line: 2897, column: 12, scope: !8257)
!8598 = !DILocation(line: 2899, column: 10, scope: !8257)
!8599 = !DILocation(line: 2898, column: 7, scope: !8257)
!8600 = !DILocation(line: 2904, column: 9, scope: !8601)
!8601 = distinct !DILexicalBlock(scope: !8602, file: !3, line: 2904, column: 9)
!8602 = distinct !DILexicalBlock(scope: !8258, file: !3, line: 2903, column: 3)
!8603 = !DILocation(line: 2904, column: 9, scope: !8602)
!8604 = !DILocation(line: 2905, column: 13, scope: !8601)
!8605 = !DILocation(line: 2905, column: 7, scope: !8601)
!8606 = !DILocation(line: 2907, column: 13, scope: !8601)
!8607 = !DILocation(line: 2915, column: 17, scope: !8608)
!8608 = distinct !DILexicalBlock(scope: !8260, file: !3, line: 2911, column: 6)
!8609 = !DILocation(line: 2916, column: 14, scope: !8608)
!8610 = !DILocation(line: 2917, column: 12, scope: !8611)
!8611 = distinct !DILexicalBlock(scope: !8608, file: !3, line: 2917, column: 12)
!8612 = !DILocation(line: 2917, column: 12, scope: !8608)
!8613 = !DILocation(line: 2919, column: 9, scope: !8614)
!8614 = distinct !DILexicalBlock(scope: !8615, file: !3, line: 2919, column: 9)
!8615 = distinct !DILexicalBlock(scope: !8611, file: !3, line: 2918, column: 3)
!8616 = !DILocation(line: 2919, column: 9, scope: !8615)
!8617 = !DILocation(line: 2920, column: 13, scope: !8614)
!8618 = !DILocation(line: 2926, column: 3, scope: !8615)
!8619 = !DILocation(line: 2923, column: 9, scope: !8620)
!8620 = distinct !DILexicalBlock(scope: !8614, file: !3, line: 2922, column: 7)
!8621 = !DILocation(line: 2924, column: 9, scope: !8620)
!8622 = !DILocation(line: 2928, column: 9, scope: !8611)
!8623 = !DILocation(line: 0, scope: !8271)
!8624 = !DILocation(line: 2934, column: 16, scope: !8262)
!8625 = !DILocation(line: 2936, column: 8, scope: !8626)
!8626 = distinct !DILexicalBlock(scope: !8271, file: !3, line: 2935, column: 2)
!8627 = !DILocation(line: 2938, column: 10, scope: !8626)
!8628 = !DILocation(line: 2939, column: 2, scope: !8626)
!8629 = !DILocation(line: 2943, column: 8, scope: !8270)
!8630 = !DILocation(line: 2954, column: 53, scope: !8631)
!8631 = distinct !DILexicalBlock(scope: !8264, file: !3, line: 2952, column: 5)
!8632 = !DILocation(line: 2954, column: 13, scope: !8631)
!8633 = !DILocation(line: 2955, column: 53, scope: !8631)
!8634 = !DILocation(line: 2955, column: 13, scope: !8631)
!8635 = !DILocation(line: 2957, column: 11, scope: !8636)
!8636 = distinct !DILexicalBlock(scope: !8631, file: !3, line: 2957, column: 11)
!8637 = !DILocation(line: 2957, column: 11, scope: !8631)
!8638 = !DILocation(line: 2959, column: 4, scope: !8639)
!8639 = distinct !DILexicalBlock(scope: !8636, file: !3, line: 2958, column: 2)
!8640 = !DILocation(line: 2963, column: 35, scope: !8641)
!8641 = distinct !DILexicalBlock(scope: !8639, file: !3, line: 2963, column: 8)
!8642 = !DILocation(line: 2963, column: 9, scope: !8641)
!8643 = !DILocation(line: 2964, column: 9, scope: !8641)
!8644 = !DILocation(line: 2964, column: 12, scope: !8641)
!8645 = !DILocation(line: 2965, column: 8, scope: !8641)
!8646 = !DILocation(line: 2965, column: 38, scope: !8641)
!8647 = !DILocation(line: 2965, column: 12, scope: !8641)
!8648 = !DILocation(line: 2966, column: 5, scope: !8641)
!8649 = !DILocation(line: 2966, column: 8, scope: !8641)
!8650 = !DILocation(line: 2963, column: 8, scope: !8639)
!8651 = !DILocation(line: 2968, column: 8, scope: !8652)
!8652 = distinct !DILexicalBlock(scope: !8641, file: !3, line: 2967, column: 6)
!8653 = !DILocation(line: 2969, column: 8, scope: !8652)
!8654 = !DILocation(line: 2972, column: 34, scope: !8655)
!8655 = distinct !DILexicalBlock(scope: !8639, file: !3, line: 2972, column: 8)
!8656 = !DILocation(line: 2972, column: 8, scope: !8655)
!8657 = !DILocation(line: 2972, column: 8, scope: !8639)
!8658 = !DILocation(line: 2973, column: 16, scope: !8655)
!8659 = !DILocation(line: 2973, column: 6, scope: !8655)
!8660 = !DILocation(line: 2974, column: 13, scope: !8661)
!8661 = distinct !DILexicalBlock(scope: !8655, file: !3, line: 2974, column: 13)
!8662 = !DILocation(line: 2974, column: 13, scope: !8655)
!8663 = !DILocation(line: 2976, column: 12, scope: !8664)
!8664 = distinct !DILexicalBlock(scope: !8665, file: !3, line: 2976, column: 12)
!8665 = distinct !DILexicalBlock(scope: !8661, file: !3, line: 2975, column: 6)
!8666 = !DILocation(line: 2976, column: 12, scope: !8665)
!8667 = !DILocation(line: 2977, column: 10, scope: !8664)
!8668 = !DILocation(line: 2977, column: 33, scope: !8664)
!8669 = !DILocation(line: 0, scope: !8664)
!8670 = !DILocation(line: 2978, column: 12, scope: !8664)
!8671 = !DILocation(line: 2979, column: 12, scope: !8664)
!8672 = !DILocation(line: 2982, column: 5, scope: !8673)
!8673 = distinct !DILexicalBlock(scope: !8664, file: !3, line: 2981, column: 3)
!8674 = !DILocation(line: 2983, column: 5, scope: !8673)
!8675 = !DILocation(line: 0, scope: !8655)
!8676 = !DILocation(line: 2987, column: 34, scope: !8677)
!8677 = distinct !DILexicalBlock(scope: !8639, file: !3, line: 2987, column: 8)
!8678 = !DILocation(line: 2987, column: 8, scope: !8677)
!8679 = !DILocation(line: 2987, column: 8, scope: !8639)
!8680 = !DILocation(line: 2988, column: 16, scope: !8677)
!8681 = !DILocation(line: 2988, column: 6, scope: !8677)
!8682 = !DILocation(line: 2989, column: 13, scope: !8683)
!8683 = distinct !DILexicalBlock(scope: !8677, file: !3, line: 2989, column: 13)
!8684 = !DILocation(line: 2989, column: 13, scope: !8677)
!8685 = !DILocation(line: 2991, column: 12, scope: !8686)
!8686 = distinct !DILexicalBlock(scope: !8687, file: !3, line: 2991, column: 12)
!8687 = distinct !DILexicalBlock(scope: !8683, file: !3, line: 2990, column: 6)
!8688 = !DILocation(line: 2991, column: 12, scope: !8687)
!8689 = !DILocation(line: 2992, column: 10, scope: !8686)
!8690 = !DILocation(line: 2992, column: 33, scope: !8686)
!8691 = !DILocation(line: 0, scope: !8686)
!8692 = !DILocation(line: 2993, column: 12, scope: !8686)
!8693 = !DILocation(line: 2994, column: 12, scope: !8686)
!8694 = !DILocation(line: 2997, column: 5, scope: !8695)
!8695 = distinct !DILexicalBlock(scope: !8686, file: !3, line: 2996, column: 3)
!8696 = !DILocation(line: 2998, column: 5, scope: !8695)
!8697 = !DILocation(line: 0, scope: !8266)
!8698 = !DILocation(line: 3004, column: 9, scope: !8228)
!8699 = !DILocation(line: 3005, column: 17, scope: !8700)
!8700 = distinct !DILexicalBlock(scope: !8228, file: !3, line: 3005, column: 7)
!8701 = !DILocation(line: 3010, column: 7, scope: !8702)
!8702 = distinct !DILexicalBlock(scope: !8700, file: !3, line: 3006, column: 5)
!8703 = !DILocation(line: 3011, column: 5, scope: !8702)
!8704 = !DILocation(line: 3013, column: 30, scope: !8700)
!8705 = !DILocation(line: 3013, column: 5, scope: !8700)
!8706 = !DILocation(line: 3014, column: 1, scope: !8228)
!8707 = distinct !DISubprogram(name: "extract_range_from_cond_expr", scope: !3, file: !3, line: 3021, type: !3308, scopeLine: 3022, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8708)
!8708 = !{!8709, !8710, !8711, !8712, !8713, !8714}
!8709 = !DILocalVariable(name: "vr", arg: 1, scope: !8707, file: !3, line: 3021, type: !687)
!8710 = !DILocalVariable(name: "expr", arg: 2, scope: !8707, file: !3, line: 3021, type: !693)
!8711 = !DILocalVariable(name: "op0", scope: !8707, file: !3, line: 3023, type: !693)
!8712 = !DILocalVariable(name: "op1", scope: !8707, file: !3, line: 3023, type: !693)
!8713 = !DILocalVariable(name: "vr0", scope: !8707, file: !3, line: 3024, type: !688)
!8714 = !DILocalVariable(name: "vr1", scope: !8707, file: !3, line: 3025, type: !688)
!8715 = !DILocation(line: 0, scope: !8707)
!8716 = !DILocation(line: 3024, column: 3, scope: !8707)
!8717 = !DILocation(line: 3024, column: 17, scope: !8707)
!8718 = !DILocation(line: 3025, column: 3, scope: !8707)
!8719 = !DILocation(line: 3025, column: 17, scope: !8707)
!8720 = !DILocation(line: 3029, column: 9, scope: !8707)
!8721 = !DILocation(line: 3030, column: 7, scope: !8722)
!8722 = distinct !DILexicalBlock(scope: !8707, file: !3, line: 3030, column: 7)
!8723 = !DILocation(line: 3030, column: 23, scope: !8722)
!8724 = !DILocation(line: 3030, column: 7, scope: !8707)
!8725 = !DILocation(line: 3031, column: 13, scope: !8722)
!8726 = !DILocation(line: 3031, column: 11, scope: !8722)
!8727 = !DILocation(line: 3031, column: 5, scope: !8722)
!8728 = !DILocation(line: 3032, column: 12, scope: !8729)
!8729 = distinct !DILexicalBlock(scope: !8722, file: !3, line: 3032, column: 12)
!8730 = !DILocation(line: 3032, column: 12, scope: !8722)
!8731 = !DILocation(line: 3033, column: 5, scope: !8729)
!8732 = !DILocation(line: 3035, column: 5, scope: !8729)
!8733 = !DILocation(line: 3037, column: 9, scope: !8707)
!8734 = !DILocation(line: 3038, column: 7, scope: !8735)
!8735 = distinct !DILexicalBlock(scope: !8707, file: !3, line: 3038, column: 7)
!8736 = !DILocation(line: 3038, column: 23, scope: !8735)
!8737 = !DILocation(line: 3038, column: 7, scope: !8707)
!8738 = !DILocation(line: 3039, column: 13, scope: !8735)
!8739 = !DILocation(line: 3039, column: 11, scope: !8735)
!8740 = !DILocation(line: 3039, column: 5, scope: !8735)
!8741 = !DILocation(line: 3040, column: 12, scope: !8742)
!8742 = distinct !DILexicalBlock(scope: !8735, file: !3, line: 3040, column: 12)
!8743 = !DILocation(line: 3040, column: 12, scope: !8735)
!8744 = !DILocation(line: 3041, column: 5, scope: !8742)
!8745 = !DILocation(line: 3043, column: 5, scope: !8742)
!8746 = !DILocation(line: 3046, column: 3, scope: !8707)
!8747 = !DILocation(line: 3047, column: 3, scope: !8707)
!8748 = !DILocation(line: 3048, column: 1, scope: !8707)
!8749 = distinct !DISubprogram(name: "extract_range_from_comparison", scope: !3, file: !3, line: 3055, type: !7579, scopeLine: 3057, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8750)
!8750 = !{!8751, !8752, !8753, !8754, !8755, !8756, !8757}
!8751 = !DILocalVariable(name: "vr", arg: 1, scope: !8749, file: !3, line: 3055, type: !687)
!8752 = !DILocalVariable(name: "code", arg: 2, scope: !8749, file: !3, line: 3055, type: !134)
!8753 = !DILocalVariable(name: "type", arg: 3, scope: !8749, file: !3, line: 3056, type: !693)
!8754 = !DILocalVariable(name: "op0", arg: 4, scope: !8749, file: !3, line: 3056, type: !693)
!8755 = !DILocalVariable(name: "op1", arg: 5, scope: !8749, file: !3, line: 3056, type: !693)
!8756 = !DILocalVariable(name: "sop", scope: !8749, file: !3, line: 3058, type: !679)
!8757 = !DILocalVariable(name: "val", scope: !8749, file: !3, line: 3059, type: !693)
!8758 = !DILocation(line: 0, scope: !8749)
!8759 = !DILocation(line: 3058, column: 3, scope: !8749)
!8760 = !DILocation(line: 3058, column: 8, scope: !8749)
!8761 = !DILocation(line: 3061, column: 9, scope: !8749)
!8762 = !DILocation(line: 3069, column: 7, scope: !8763)
!8763 = distinct !DILexicalBlock(scope: !8749, file: !3, line: 3069, column: 7)
!8764 = !DILocation(line: 3069, column: 11, scope: !8763)
!8765 = !DILocation(line: 3069, column: 15, scope: !8763)
!8766 = !DILocation(line: 3069, column: 46, scope: !8763)
!8767 = !DILocation(line: 3069, column: 42, scope: !8763)
!8768 = !DILocation(line: 3074, column: 13, scope: !8769)
!8769 = distinct !DILexicalBlock(scope: !8763, file: !3, line: 3070, column: 5)
!8770 = !DILocation(line: 3075, column: 11, scope: !8771)
!8771 = distinct !DILexicalBlock(scope: !8769, file: !3, line: 3075, column: 11)
!8772 = !DILocation(line: 0, scope: !8771)
!8773 = !DILocation(line: 3075, column: 11, scope: !8769)
!8774 = !DILocation(line: 3076, column: 2, scope: !8771)
!8775 = !DILocation(line: 3078, column: 2, scope: !8771)
!8776 = !DILocation(line: 3082, column: 5, scope: !8763)
!8777 = !DILocation(line: 3083, column: 1, scope: !8749)
!8778 = distinct !DISubprogram(name: "set_value_range_to_value", scope: !3, file: !3, line: 513, type: !8779, scopeLine: 514, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8781)
!8779 = !DISubroutineType(types: !8780)
!8780 = !{null, !687, !693, !1586}
!8781 = !{!8782, !8783, !8784}
!8782 = !DILocalVariable(name: "vr", arg: 1, scope: !8778, file: !3, line: 513, type: !687)
!8783 = !DILocalVariable(name: "val", arg: 2, scope: !8778, file: !3, line: 513, type: !693)
!8784 = !DILocalVariable(name: "equiv", arg: 3, scope: !8778, file: !3, line: 513, type: !1586)
!8785 = !DILocation(line: 0, scope: !8778)
!8786 = !DILocation(line: 515, column: 3, scope: !8778)
!8787 = !DILocation(line: 516, column: 9, scope: !8778)
!8788 = !DILocation(line: 517, column: 3, scope: !8778)
!8789 = !DILocation(line: 518, column: 1, scope: !8778)
!8790 = distinct !DISubprogram(name: "avoid_overflow_infinity", scope: !3, file: !3, line: 292, type: !7060, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8791)
!8791 = !{!8792}
!8792 = !DILocalVariable(name: "val", arg: 1, scope: !8790, file: !3, line: 292, type: !693)
!8793 = !DILocation(line: 0, scope: !8790)
!8794 = !DILocation(line: 294, column: 8, scope: !8795)
!8795 = distinct !DILexicalBlock(scope: !8790, file: !3, line: 294, column: 7)
!8796 = !DILocation(line: 294, column: 7, scope: !8790)
!8797 = !DILocation(line: 297, column: 7, scope: !8798)
!8798 = distinct !DILexicalBlock(scope: !8790, file: !3, line: 297, column: 7)
!8799 = !DILocation(line: 0, scope: !8798)
!8800 = !DILocation(line: 297, column: 7, scope: !8790)
!8801 = !DILocation(line: 298, column: 12, scope: !8798)
!8802 = !DILocation(line: 298, column: 5, scope: !8798)
!8803 = !DILocation(line: 304, column: 14, scope: !8804)
!8804 = distinct !DILexicalBlock(scope: !8798, file: !3, line: 300, column: 5)
!8805 = !DILocation(line: 304, column: 7, scope: !8804)
!8806 = !DILocation(line: 306, column: 1, scope: !8790)
!8807 = distinct !DISubprogram(name: "symbolic_range_p", scope: !3, file: !3, line: 771, type: !7107, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8808)
!8808 = !{!8809}
!8809 = !DILocalVariable(name: "vr", arg: 1, scope: !8807, file: !3, line: 771, type: !687)
!8810 = !DILocation(line: 0, scope: !8807)
!8811 = !DILocation(line: 773, column: 41, scope: !8807)
!8812 = !DILocation(line: 773, column: 12, scope: !8807)
!8813 = !DILocation(line: 774, column: 11, scope: !8807)
!8814 = !DILocation(line: 774, column: 44, scope: !8807)
!8815 = !DILocation(line: 774, column: 15, scope: !8807)
!8816 = !DILocation(line: 774, column: 14, scope: !8807)
!8817 = !DILocation(line: 773, column: 3, scope: !8807)
!8818 = distinct !DISubprogram(name: "add_equivalence", scope: !3, file: !3, line: 733, type: !8819, scopeLine: 734, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8822)
!8819 = !DISubroutineType(types: !8820)
!8820 = !{null, !8821, !2080}
!8821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1586, size: 64)
!8822 = !{!8823, !8824, !8825, !8826}
!8823 = !DILocalVariable(name: "equiv", arg: 1, scope: !8818, file: !3, line: 733, type: !8821)
!8824 = !DILocalVariable(name: "var", arg: 2, scope: !8818, file: !3, line: 733, type: !2080)
!8825 = !DILocalVariable(name: "ver", scope: !8818, file: !3, line: 735, type: !7)
!8826 = !DILocalVariable(name: "vr", scope: !8818, file: !3, line: 736, type: !687)
!8827 = !DILocation(line: 0, scope: !8818)
!8828 = !DILocation(line: 735, column: 18, scope: !8818)
!8829 = !DILocation(line: 736, column: 23, scope: !8818)
!8830 = !DILocation(line: 738, column: 7, scope: !8831)
!8831 = distinct !DILexicalBlock(scope: !8818, file: !3, line: 738, column: 7)
!8832 = !DILocation(line: 738, column: 14, scope: !8831)
!8833 = !DILocation(line: 738, column: 7, scope: !8818)
!8834 = !DILocation(line: 739, column: 14, scope: !8831)
!8835 = !DILocation(line: 739, column: 12, scope: !8831)
!8836 = !DILocation(line: 739, column: 5, scope: !8831)
!8837 = !DILocation(line: 740, column: 19, scope: !8818)
!8838 = !DILocation(line: 740, column: 3, scope: !8818)
!8839 = !DILocation(line: 741, column: 7, scope: !8840)
!8840 = distinct !DILexicalBlock(scope: !8818, file: !3, line: 741, column: 7)
!8841 = !DILocation(line: 741, column: 10, scope: !8840)
!8842 = !DILocation(line: 741, column: 17, scope: !8840)
!8843 = !DILocation(line: 741, column: 13, scope: !8840)
!8844 = !DILocation(line: 741, column: 7, scope: !8818)
!8845 = !DILocation(line: 742, column: 22, scope: !8840)
!8846 = !DILocation(line: 742, column: 5, scope: !8840)
!8847 = !DILocation(line: 743, column: 1, scope: !8818)
!8848 = distinct !DISubprogram(name: "set_and_canonicalize_value_range", scope: !3, file: !3, line: 431, type: !3336, scopeLine: 433, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8849)
!8849 = !{!8850, !8851, !8852, !8853, !8854, !8855, !8858, !8859, !8862, !8863, !8867}
!8850 = !DILocalVariable(name: "vr", arg: 1, scope: !8848, file: !3, line: 431, type: !687)
!8851 = !DILocalVariable(name: "t", arg: 2, scope: !8848, file: !3, line: 431, type: !390)
!8852 = !DILocalVariable(name: "min", arg: 3, scope: !8848, file: !3, line: 432, type: !693)
!8853 = !DILocalVariable(name: "max", arg: 4, scope: !8848, file: !3, line: 432, type: !693)
!8854 = !DILocalVariable(name: "equiv", arg: 5, scope: !8848, file: !3, line: 432, type: !1586)
!8855 = !DILocalVariable(name: "one", scope: !8856, file: !3, line: 448, type: !693)
!8856 = distinct !DILexicalBlock(scope: !8857, file: !3, line: 447, column: 5)
!8857 = distinct !DILexicalBlock(scope: !8848, file: !3, line: 446, column: 7)
!8858 = !DILocalVariable(name: "tmp", scope: !8856, file: !3, line: 449, type: !693)
!8859 = !DILocalVariable(name: "is_min", scope: !8860, file: !3, line: 468, type: !679)
!8860 = distinct !DILexicalBlock(scope: !8861, file: !3, line: 467, column: 5)
!8861 = distinct !DILexicalBlock(scope: !8848, file: !3, line: 466, column: 7)
!8862 = !DILocalVariable(name: "is_max", scope: !8860, file: !3, line: 469, type: !679)
!8863 = !DILocalVariable(name: "one", scope: !8864, file: !3, line: 482, type: !693)
!8864 = distinct !DILexicalBlock(scope: !8865, file: !3, line: 481, column: 9)
!8865 = distinct !DILexicalBlock(scope: !8866, file: !3, line: 477, column: 16)
!8866 = distinct !DILexicalBlock(scope: !8860, file: !3, line: 471, column: 11)
!8867 = !DILocalVariable(name: "one", scope: !8868, file: !3, line: 489, type: !693)
!8868 = distinct !DILexicalBlock(scope: !8869, file: !3, line: 488, column: 9)
!8869 = distinct !DILexicalBlock(scope: !8865, file: !3, line: 487, column: 16)
!8870 = !DILocation(line: 0, scope: !8848)
!8871 = !DILocation(line: 436, column: 8, scope: !8872)
!8872 = distinct !DILexicalBlock(scope: !8848, file: !3, line: 435, column: 7)
!8873 = !DILocation(line: 437, column: 10, scope: !8872)
!8874 = !DILocation(line: 437, column: 26, scope: !8872)
!8875 = !DILocation(line: 438, column: 7, scope: !8872)
!8876 = !DILocation(line: 438, column: 10, scope: !8872)
!8877 = !DILocation(line: 438, column: 26, scope: !8872)
!8878 = !DILocation(line: 435, column: 7, scope: !8848)
!8879 = !DILocation(line: 440, column: 7, scope: !8880)
!8880 = distinct !DILexicalBlock(scope: !8872, file: !3, line: 439, column: 5)
!8881 = !DILocation(line: 441, column: 7, scope: !8880)
!8882 = !DILocation(line: 446, column: 7, scope: !8857)
!8883 = !DILocation(line: 446, column: 7, scope: !8848)
!8884 = !DILocation(line: 448, column: 33, scope: !8856)
!8885 = !DILocation(line: 448, column: 18, scope: !8856)
!8886 = !DILocation(line: 0, scope: !8856)
!8887 = !DILocation(line: 449, column: 18, scope: !8856)
!8888 = !DILocation(line: 450, column: 13, scope: !8856)
!8889 = !DILocation(line: 456, column: 11, scope: !8890)
!8890 = distinct !DILexicalBlock(scope: !8856, file: !3, line: 456, column: 11)
!8891 = !DILocation(line: 456, column: 11, scope: !8856)
!8892 = !DILocation(line: 458, column: 4, scope: !8893)
!8893 = distinct !DILexicalBlock(scope: !8890, file: !3, line: 457, column: 2)
!8894 = !DILocation(line: 459, column: 4, scope: !8893)
!8895 = !DILocation(line: 462, column: 13, scope: !8856)
!8896 = !DILocation(line: 462, column: 11, scope: !8856)
!8897 = !DILocation(line: 463, column: 5, scope: !8857)
!8898 = !DILocation(line: 466, column: 9, scope: !8861)
!8899 = !DILocation(line: 466, column: 7, scope: !8848)
!8900 = !DILocation(line: 468, column: 21, scope: !8860)
!8901 = !DILocation(line: 0, scope: !8860)
!8902 = !DILocation(line: 469, column: 21, scope: !8860)
!8903 = !DILocation(line: 471, column: 11, scope: !8866)
!8904 = !DILocation(line: 471, column: 21, scope: !8866)
!8905 = !DILocation(line: 471, column: 18, scope: !8866)
!8906 = !DILocation(line: 474, column: 4, scope: !8907)
!8907 = distinct !DILexicalBlock(scope: !8866, file: !3, line: 472, column: 2)
!8908 = !DILocation(line: 475, column: 4, scope: !8907)
!8909 = !DILocation(line: 477, column: 16, scope: !8865)
!8910 = !DILocation(line: 479, column: 9, scope: !8865)
!8911 = !DILocation(line: 479, column: 14, scope: !8865)
!8912 = !DILocation(line: 480, column: 7, scope: !8865)
!8913 = !DILocation(line: 480, column: 10, scope: !8865)
!8914 = !DILocation(line: 477, column: 16, scope: !8866)
!8915 = !DILocation(line: 482, column: 30, scope: !8864)
!8916 = !DILocation(line: 482, column: 15, scope: !8864)
!8917 = !DILocation(line: 0, scope: !8864)
!8918 = !DILocation(line: 483, column: 10, scope: !8864)
!8919 = !DILocation(line: 484, column: 23, scope: !8864)
!8920 = !DILocation(line: 484, column: 10, scope: !8864)
!8921 = !DILocation(line: 486, column: 9, scope: !8864)
!8922 = !DILocation(line: 487, column: 16, scope: !8869)
!8923 = !DILocation(line: 487, column: 16, scope: !8865)
!8924 = !DILocation(line: 489, column: 30, scope: !8868)
!8925 = !DILocation(line: 489, column: 15, scope: !8868)
!8926 = !DILocation(line: 0, scope: !8868)
!8927 = !DILocation(line: 490, column: 10, scope: !8868)
!8928 = !DILocation(line: 491, column: 23, scope: !8868)
!8929 = !DILocation(line: 491, column: 10, scope: !8868)
!8930 = !DILocation(line: 493, column: 9, scope: !8868)
!8931 = !DILocation(line: 450, column: 11, scope: !8856)
!8932 = !DILocation(line: 451, column: 11, scope: !8856)
!8933 = !DILocation(line: 496, column: 3, scope: !8848)
!8934 = !DILocation(line: 497, column: 1, scope: !8848)
!8935 = distinct !DISubprogram(name: "value_ranges_intersect_p", scope: !3, file: !3, line: 1318, type: !8936, scopeLine: 1319, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8938)
!8936 = !DISubroutineType(types: !8937)
!8937 = !{!679, !687, !687}
!8938 = !{!8939, !8940}
!8939 = !DILocalVariable(name: "vr0", arg: 1, scope: !8935, file: !3, line: 1318, type: !687)
!8940 = !DILocalVariable(name: "vr1", arg: 2, scope: !8935, file: !3, line: 1318, type: !687)
!8941 = !DILocation(line: 0, scope: !8935)
!8942 = !DILocation(line: 1323, column: 28, scope: !8943)
!8943 = distinct !DILexicalBlock(scope: !8935, file: !3, line: 1323, column: 7)
!8944 = !DILocation(line: 1323, column: 38, scope: !8943)
!8945 = !DILocation(line: 1323, column: 7, scope: !8943)
!8946 = !DILocation(line: 1323, column: 43, scope: !8943)
!8947 = !DILocation(line: 1323, column: 7, scope: !8935)
!8948 = !DILocation(line: 1325, column: 28, scope: !8949)
!8949 = distinct !DILexicalBlock(scope: !8935, file: !3, line: 1325, column: 7)
!8950 = !DILocation(line: 1325, column: 38, scope: !8949)
!8951 = !DILocation(line: 1325, column: 7, scope: !8949)
!8952 = !DILocation(line: 1325, column: 43, scope: !8949)
!8953 = !DILocation(line: 1328, column: 1, scope: !8935)
!8954 = distinct !DISubprogram(name: "negative_overflow_infinity", scope: !3, file: !3, line: 223, type: !7060, scopeLine: 224, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8955)
!8955 = !{!8956}
!8956 = !DILocalVariable(name: "type", arg: 1, scope: !8954, file: !3, line: 223, type: !693)
!8957 = !DILocation(line: 0, scope: !8954)
!8958 = !DILocation(line: 228, column: 34, scope: !8954)
!8959 = !DILocation(line: 228, column: 10, scope: !8954)
!8960 = !DILocation(line: 228, column: 3, scope: !8954)
!8961 = distinct !DISubprogram(name: "copy_value_range", scope: !3, file: !3, line: 502, type: !8962, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8964)
!8962 = !DISubroutineType(types: !8963)
!8963 = !{null, !687, !687}
!8964 = !{!8965, !8966}
!8965 = !DILocalVariable(name: "to", arg: 1, scope: !8961, file: !3, line: 502, type: !687)
!8966 = !DILocalVariable(name: "from", arg: 2, scope: !8961, file: !3, line: 502, type: !687)
!8967 = !DILocation(line: 0, scope: !8961)
!8968 = !DILocation(line: 504, column: 30, scope: !8961)
!8969 = !DILocation(line: 504, column: 42, scope: !8961)
!8970 = !DILocation(line: 504, column: 53, scope: !8961)
!8971 = !DILocation(line: 504, column: 64, scope: !8961)
!8972 = !DILocation(line: 504, column: 3, scope: !8961)
!8973 = !DILocation(line: 505, column: 1, scope: !8961)
!8974 = distinct !DISubprogram(name: "op_with_constant_singleton_value_range", scope: !3, file: !3, line: 1377, type: !7060, scopeLine: 1378, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8975)
!8975 = !{!8976, !8977}
!8976 = !DILocalVariable(name: "op", arg: 1, scope: !8974, file: !3, line: 1377, type: !693)
!8977 = !DILocalVariable(name: "vr", scope: !8974, file: !3, line: 1379, type: !687)
!8978 = !DILocation(line: 0, scope: !8974)
!8979 = !DILocation(line: 1381, column: 7, scope: !8980)
!8980 = distinct !DILexicalBlock(scope: !8974, file: !3, line: 1381, column: 7)
!8981 = !DILocation(line: 1381, column: 7, scope: !8974)
!8982 = !DILocation(line: 1384, column: 7, scope: !8983)
!8983 = distinct !DILexicalBlock(scope: !8974, file: !3, line: 1384, column: 7)
!8984 = !DILocation(line: 1384, column: 22, scope: !8983)
!8985 = !DILocation(line: 1384, column: 7, scope: !8974)
!8986 = !DILocation(line: 1387, column: 8, scope: !8974)
!8987 = !DILocation(line: 1388, column: 11, scope: !8988)
!8988 = distinct !DILexicalBlock(scope: !8974, file: !3, line: 1388, column: 7)
!8989 = !DILocation(line: 1388, column: 16, scope: !8988)
!8990 = !DILocation(line: 1389, column: 7, scope: !8988)
!8991 = !DILocation(line: 1389, column: 31, scope: !8988)
!8992 = !DILocation(line: 1389, column: 40, scope: !8988)
!8993 = !DILocation(line: 1389, column: 10, scope: !8988)
!8994 = !DILocation(line: 1390, column: 7, scope: !8988)
!8995 = !DILocation(line: 1390, column: 39, scope: !8988)
!8996 = !DILocation(line: 1390, column: 10, scope: !8988)
!8997 = !DILocation(line: 1388, column: 7, scope: !8974)
!8998 = !DILocation(line: 1391, column: 16, scope: !8988)
!8999 = !DILocation(line: 1391, column: 5, scope: !8988)
!9000 = !DILocation(line: 1394, column: 1, scope: !8974)
!9001 = distinct !DISubprogram(name: "set_value_range_to_undefined", scope: !3, file: !3, line: 582, type: !3021, scopeLine: 583, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9002)
!9002 = !{!9003}
!9003 = !DILocalVariable(name: "vr", arg: 1, scope: !9001, file: !3, line: 582, type: !687)
!9004 = !DILocation(line: 0, scope: !9001)
!9005 = !DILocation(line: 584, column: 7, scope: !9001)
!9006 = !DILocation(line: 584, column: 12, scope: !9001)
!9007 = !DILocation(line: 585, column: 17, scope: !9001)
!9008 = !DILocation(line: 585, column: 21, scope: !9001)
!9009 = !DILocation(line: 585, column: 7, scope: !9001)
!9010 = !DILocation(line: 585, column: 11, scope: !9001)
!9011 = !DILocation(line: 586, column: 11, scope: !9012)
!9012 = distinct !DILexicalBlock(scope: !9001, file: !3, line: 586, column: 7)
!9013 = !DILocation(line: 586, column: 7, scope: !9012)
!9014 = !DILocation(line: 586, column: 7, scope: !9001)
!9015 = !DILocation(line: 587, column: 5, scope: !9012)
!9016 = !DILocation(line: 588, column: 1, scope: !9001)
!9017 = distinct !DISubprogram(name: "range_is_null", scope: !3, file: !3, line: 760, type: !7107, scopeLine: 761, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9018)
!9018 = !{!9019}
!9019 = !DILocalVariable(name: "vr", arg: 1, scope: !9017, file: !3, line: 760, type: !687)
!9020 = !DILocation(line: 0, scope: !9017)
!9021 = !DILocation(line: 762, column: 14, scope: !9017)
!9022 = !DILocation(line: 762, column: 19, scope: !9017)
!9023 = !DILocation(line: 763, column: 3, scope: !9017)
!9024 = !DILocation(line: 763, column: 25, scope: !9017)
!9025 = !DILocation(line: 763, column: 6, scope: !9017)
!9026 = !DILocation(line: 764, column: 3, scope: !9017)
!9027 = !DILocation(line: 764, column: 25, scope: !9017)
!9028 = !DILocation(line: 764, column: 6, scope: !9017)
!9029 = !DILocation(line: 762, column: 3, scope: !9017)
!9030 = distinct !DISubprogram(name: "set_value_range_to_null", scope: !3, file: !3, line: 559, type: !3308, scopeLine: 560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9031)
!9031 = !{!9032, !9033}
!9032 = !DILocalVariable(name: "vr", arg: 1, scope: !9030, file: !3, line: 559, type: !687)
!9033 = !DILocalVariable(name: "type", arg: 2, scope: !9030, file: !3, line: 559, type: !693)
!9034 = !DILocation(line: 0, scope: !9030)
!9035 = !DILocation(line: 561, column: 33, scope: !9030)
!9036 = !DILocation(line: 561, column: 62, scope: !9030)
!9037 = !DILocation(line: 561, column: 3, scope: !9030)
!9038 = !DILocation(line: 562, column: 1, scope: !9030)
!9039 = distinct !DISubprogram(name: "overflow_infinity_range_p", scope: !3, file: !3, line: 780, type: !7107, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9040)
!9040 = !{!9041}
!9041 = !DILocalVariable(name: "vr", arg: 1, scope: !9039, file: !3, line: 780, type: !687)
!9042 = !DILocation(line: 0, scope: !9039)
!9043 = !DILocation(line: 782, column: 15, scope: !9039)
!9044 = !DILocation(line: 782, column: 20, scope: !9039)
!9045 = !DILocation(line: 783, column: 4, scope: !9039)
!9046 = !DILocation(line: 783, column: 34, scope: !9039)
!9047 = !DILocation(line: 783, column: 8, scope: !9039)
!9048 = !DILocation(line: 784, column: 8, scope: !9039)
!9049 = !DILocation(line: 784, column: 37, scope: !9039)
!9050 = !DILocation(line: 784, column: 11, scope: !9039)
!9051 = !DILocation(line: 782, column: 3, scope: !9039)
!9052 = distinct !DISubprogram(name: "set_value_range_to_truthvalue", scope: !3, file: !3, line: 568, type: !3308, scopeLine: 569, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9053)
!9053 = !{!9054, !9055}
!9054 = !DILocalVariable(name: "vr", arg: 1, scope: !9052, file: !3, line: 568, type: !687)
!9055 = !DILocalVariable(name: "type", arg: 2, scope: !9052, file: !3, line: 568, type: !693)
!9056 = !DILocation(line: 0, scope: !9052)
!9057 = !DILocation(line: 570, column: 7, scope: !9058)
!9058 = distinct !DILexicalBlock(scope: !9052, file: !3, line: 570, column: 7)
!9059 = !DILocation(line: 570, column: 29, scope: !9058)
!9060 = !DILocation(line: 570, column: 7, scope: !9052)
!9061 = !DILocation(line: 571, column: 5, scope: !9058)
!9062 = !DILocation(line: 574, column: 8, scope: !9058)
!9063 = !DILocation(line: 574, column: 33, scope: !9058)
!9064 = !DILocation(line: 575, column: 12, scope: !9058)
!9065 = !DILocation(line: 573, column: 5, scope: !9058)
!9066 = !DILocation(line: 576, column: 1, scope: !9052)
!9067 = distinct !DISubprogram(name: "vrp_int_const_binop", scope: !3, file: !3, line: 1908, type: !9068, scopeLine: 1909, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9070)
!9068 = !DISubroutineType(types: !9069)
!9069 = !{!693, !134, !693, !693}
!9070 = !{!9071, !9072, !9073, !9074, !9075, !9078, !9079, !9083, !9084, !9088}
!9071 = !DILocalVariable(name: "code", arg: 1, scope: !9067, file: !3, line: 1908, type: !134)
!9072 = !DILocalVariable(name: "val1", arg: 2, scope: !9067, file: !3, line: 1908, type: !693)
!9073 = !DILocalVariable(name: "val2", arg: 3, scope: !9067, file: !3, line: 1908, type: !693)
!9074 = !DILocalVariable(name: "res", scope: !9067, file: !3, line: 1910, type: !693)
!9075 = !DILocalVariable(name: "checkz", scope: !9076, file: !3, line: 1918, type: !680)
!9076 = distinct !DILexicalBlock(scope: !9077, file: !3, line: 1917, column: 5)
!9077 = distinct !DILexicalBlock(scope: !9067, file: !3, line: 1916, column: 7)
!9078 = !DILocalVariable(name: "overflow", scope: !9076, file: !3, line: 1919, type: !679)
!9079 = !DILocalVariable(name: "tmp", scope: !9080, file: !3, line: 1937, type: !693)
!9080 = distinct !DILexicalBlock(scope: !9081, file: !3, line: 1936, column: 2)
!9081 = distinct !DILexicalBlock(scope: !9082, file: !3, line: 1935, column: 16)
!9082 = distinct !DILexicalBlock(scope: !9076, file: !3, line: 1923, column: 11)
!9083 = !DILocalVariable(name: "check", scope: !9080, file: !3, line: 1940, type: !680)
!9084 = !DILocalVariable(name: "sgn1", scope: !9085, file: !3, line: 1966, type: !680)
!9085 = distinct !DILexicalBlock(scope: !9086, file: !3, line: 1962, column: 5)
!9086 = distinct !DILexicalBlock(scope: !9087, file: !3, line: 1957, column: 12)
!9087 = distinct !DILexicalBlock(scope: !9077, file: !3, line: 1953, column: 12)
!9088 = !DILocalVariable(name: "sgn2", scope: !9085, file: !3, line: 1967, type: !680)
!9089 = !DILocation(line: 0, scope: !9067)
!9090 = !DILocation(line: 1912, column: 9, scope: !9067)
!9091 = !DILocation(line: 1916, column: 7, scope: !9077)
!9092 = !DILocation(line: 1916, column: 7, scope: !9067)
!9093 = !DILocation(line: 1918, column: 20, scope: !9076)
!9094 = !DILocation(line: 0, scope: !9076)
!9095 = !DILocation(line: 1923, column: 17, scope: !9082)
!9096 = !DILocation(line: 1924, column: 5, scope: !9082)
!9097 = !DILocation(line: 1926, column: 8, scope: !9082)
!9098 = !DILocation(line: 1935, column: 34, scope: !9081)
!9099 = !DILocation(line: 1935, column: 38, scope: !9081)
!9100 = !DILocation(line: 1935, column: 16, scope: !9082)
!9101 = !DILocation(line: 1937, column: 15, scope: !9080)
!9102 = !DILocation(line: 0, scope: !9080)
!9103 = !DILocation(line: 1940, column: 16, scope: !9080)
!9104 = !DILocation(line: 1942, column: 14, scope: !9105)
!9105 = distinct !DILexicalBlock(scope: !9080, file: !3, line: 1942, column: 8)
!9106 = !DILocation(line: 1944, column: 2, scope: !9080)
!9107 = !DILocation(line: 1946, column: 11, scope: !9076)
!9108 = !DILocation(line: 1948, column: 10, scope: !9109)
!9109 = distinct !DILexicalBlock(scope: !9110, file: !3, line: 1947, column: 2)
!9110 = distinct !DILexicalBlock(scope: !9076, file: !3, line: 1946, column: 11)
!9111 = !DILocation(line: 1949, column: 4, scope: !9109)
!9112 = !DILocation(line: 1949, column: 24, scope: !9109)
!9113 = !DILocation(line: 1950, column: 2, scope: !9109)
!9114 = !DILocation(line: 1953, column: 12, scope: !9087)
!9115 = !DILocation(line: 1957, column: 13, scope: !9086)
!9116 = !DILocation(line: 1958, column: 6, scope: !9086)
!9117 = !DILocation(line: 1958, column: 10, scope: !9086)
!9118 = !DILocation(line: 1959, column: 6, scope: !9086)
!9119 = !DILocation(line: 1959, column: 10, scope: !9086)
!9120 = !DILocation(line: 1960, column: 5, scope: !9086)
!9121 = !DILocation(line: 1960, column: 8, scope: !9086)
!9122 = !DILocation(line: 1961, column: 5, scope: !9086)
!9123 = !DILocation(line: 1961, column: 8, scope: !9086)
!9124 = !DILocation(line: 1957, column: 12, scope: !9087)
!9125 = !DILocation(line: 1966, column: 18, scope: !9085)
!9126 = !DILocation(line: 0, scope: !9085)
!9127 = !DILocation(line: 1967, column: 18, scope: !9085)
!9128 = !DILocation(line: 1969, column: 36, scope: !9129)
!9129 = distinct !DILexicalBlock(scope: !9085, file: !3, line: 1969, column: 11)
!9130 = !DILocation(line: 1969, column: 11, scope: !9129)
!9131 = !DILocation(line: 1970, column: 4, scope: !9129)
!9132 = !DILocation(line: 1970, column: 36, scope: !9129)
!9133 = !DILocation(line: 1970, column: 8, scope: !9129)
!9134 = !DILocation(line: 1969, column: 11, scope: !9085)
!9135 = !DILocation(line: 1976, column: 18, scope: !9136)
!9136 = distinct !DILexicalBlock(scope: !9085, file: !3, line: 1976, column: 11)
!9137 = !DILocation(line: 1976, column: 39, scope: !9136)
!9138 = !DILocation(line: 1976, column: 31, scope: !9136)
!9139 = !DILocation(line: 1977, column: 14, scope: !9136)
!9140 = !DILocation(line: 1977, column: 36, scope: !9136)
!9141 = !DILocation(line: 1977, column: 28, scope: !9136)
!9142 = !DILocation(line: 1978, column: 7, scope: !9136)
!9143 = !DILocation(line: 1979, column: 4, scope: !9136)
!9144 = !DILocation(line: 1979, column: 7, scope: !9136)
!9145 = !DILocation(line: 1976, column: 11, scope: !9085)
!9146 = !DILocation(line: 1984, column: 5, scope: !9147)
!9147 = distinct !DILexicalBlock(scope: !9085, file: !3, line: 1983, column: 11)
!9148 = !DILocation(line: 1989, column: 8, scope: !9147)
!9149 = !DILocation(line: 1990, column: 8, scope: !9147)
!9150 = !DILocation(line: 1990, column: 11, scope: !9147)
!9151 = !DILocation(line: 1983, column: 11, scope: !9085)
!9152 = !DILocation(line: 2003, column: 17, scope: !9153)
!9153 = distinct !DILexicalBlock(scope: !9085, file: !3, line: 2003, column: 11)
!9154 = !DILocation(line: 2003, column: 38, scope: !9153)
!9155 = !DILocation(line: 2003, column: 30, scope: !9153)
!9156 = !DILocation(line: 2008, column: 4, scope: !9153)
!9157 = !DILocation(line: 2009, column: 8, scope: !9153)
!9158 = !DILocation(line: 2009, column: 17, scope: !9153)
!9159 = !DILocation(line: 2019, column: 4, scope: !9153)
!9160 = !DILocation(line: 2010, column: 8, scope: !9153)
!9161 = !DILocation(line: 2009, column: 12, scope: !9153)
!9162 = !DILocation(line: 2011, column: 7, scope: !9153)
!9163 = !DILocation(line: 2020, column: 8, scope: !9153)
!9164 = !DILocation(line: 2020, column: 17, scope: !9153)
!9165 = !DILocation(line: 2027, column: 4, scope: !9153)
!9166 = !DILocation(line: 2021, column: 8, scope: !9153)
!9167 = !DILocation(line: 2020, column: 12, scope: !9153)
!9168 = !DILocation(line: 2022, column: 7, scope: !9153)
!9169 = !DILocation(line: 2027, column: 13, scope: !9153)
!9170 = !DILocation(line: 2028, column: 8, scope: !9153)
!9171 = !DILocation(line: 2028, column: 16, scope: !9153)
!9172 = !DILocation(line: 2030, column: 4, scope: !9153)
!9173 = !DILocation(line: 2035, column: 35, scope: !9153)
!9174 = !DILocation(line: 2035, column: 10, scope: !9153)
!9175 = !DILocation(line: 0, scope: !9153)
!9176 = !DILocation(line: 2036, column: 5, scope: !9153)
!9177 = !DILocation(line: 2037, column: 5, scope: !9153)
!9178 = !DILocation(line: 2039, column: 35, scope: !9153)
!9179 = !DILocation(line: 2039, column: 10, scope: !9153)
!9180 = !DILocation(line: 2040, column: 5, scope: !9153)
!9181 = !DILocation(line: 2041, column: 5, scope: !9153)
!9182 = !DILocation(line: 2045, column: 1, scope: !9067)
!9183 = distinct !DISubprogram(name: "vrp_expr_computes_nonnegative", scope: !3, file: !3, line: 817, type: !9184, scopeLine: 818, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9186)
!9184 = !DISubroutineType(types: !9185)
!9185 = !{!679, !693, !678}
!9186 = !{!9187, !9188}
!9187 = !DILocalVariable(name: "expr", arg: 1, scope: !9183, file: !3, line: 817, type: !693)
!9188 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !9183, file: !3, line: 817, type: !678)
!9189 = !DILocation(line: 0, scope: !9183)
!9190 = !DILocation(line: 819, column: 11, scope: !9183)
!9191 = !DILocation(line: 820, column: 4, scope: !9183)
!9192 = !DILocation(line: 820, column: 8, scope: !9183)
!9193 = !DILocation(line: 820, column: 25, scope: !9183)
!9194 = !DILocation(line: 821, column: 8, scope: !9183)
!9195 = !DILocation(line: 821, column: 11, scope: !9183)
!9196 = !DILocation(line: 819, column: 3, scope: !9183)
!9197 = distinct !DISubprogram(name: "range_includes_zero_p", scope: !3, file: !3, line: 1338, type: !7107, scopeLine: 1339, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9198)
!9198 = !{!9199, !9200}
!9199 = !DILocalVariable(name: "vr", arg: 1, scope: !9197, file: !3, line: 1338, type: !687)
!9200 = !DILocalVariable(name: "zero", scope: !9197, file: !3, line: 1340, type: !693)
!9201 = !DILocation(line: 0, scope: !9197)
!9202 = !DILocation(line: 1342, column: 3, scope: !9197)
!9203 = !DILocation(line: 1346, column: 25, scope: !9197)
!9204 = !DILocation(line: 1346, column: 10, scope: !9197)
!9205 = !DILocation(line: 1347, column: 11, scope: !9197)
!9206 = !DILocation(line: 1347, column: 41, scope: !9197)
!9207 = !DILocation(line: 1347, column: 10, scope: !9197)
!9208 = !DILocation(line: 1347, column: 3, scope: !9197)
!9209 = distinct !DISubprogram(name: "abs_extent_range", scope: !3, file: !3, line: 595, type: !9210, scopeLine: 596, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9212)
!9210 = !DISubroutineType(types: !9211)
!9211 = !{null, !687, !693, !693}
!9212 = !{!9213, !9214, !9215, !9216}
!9213 = !DILocalVariable(name: "vr", arg: 1, scope: !9209, file: !3, line: 595, type: !687)
!9214 = !DILocalVariable(name: "min", arg: 2, scope: !9209, file: !3, line: 595, type: !693)
!9215 = !DILocalVariable(name: "max", arg: 3, scope: !9209, file: !3, line: 595, type: !693)
!9216 = !DILocalVariable(name: "cmp", scope: !9209, file: !3, line: 597, type: !680)
!9217 = !DILocation(line: 0, scope: !9209)
!9218 = !DILocation(line: 599, column: 3, scope: !9209)
!9219 = !DILocation(line: 600, column: 3, scope: !9209)
!9220 = !DILocation(line: 601, column: 3, scope: !9209)
!9221 = !DILocation(line: 602, column: 3, scope: !9209)
!9222 = !DILocation(line: 603, column: 9, scope: !9209)
!9223 = !DILocation(line: 604, column: 9, scope: !9209)
!9224 = !DILocation(line: 605, column: 7, scope: !9225)
!9225 = distinct !DILexicalBlock(scope: !9209, file: !3, line: 605, column: 7)
!9226 = !DILocation(line: 605, column: 27, scope: !9225)
!9227 = !DILocation(line: 605, column: 30, scope: !9225)
!9228 = !DILocation(line: 605, column: 7, scope: !9209)
!9229 = !DILocation(line: 607, column: 7, scope: !9230)
!9230 = distinct !DILexicalBlock(scope: !9225, file: !3, line: 606, column: 5)
!9231 = !DILocation(line: 608, column: 7, scope: !9230)
!9232 = !DILocation(line: 610, column: 9, scope: !9209)
!9233 = !DILocation(line: 611, column: 7, scope: !9209)
!9234 = !DILocation(line: 612, column: 11, scope: !9235)
!9235 = distinct !DILexicalBlock(scope: !9209, file: !3, line: 611, column: 7)
!9236 = !DILocation(line: 612, column: 5, scope: !9235)
!9237 = !DILocation(line: 616, column: 13, scope: !9238)
!9238 = distinct !DILexicalBlock(scope: !9239, file: !3, line: 614, column: 5)
!9239 = distinct !DILexicalBlock(scope: !9235, file: !3, line: 613, column: 12)
!9240 = !DILocation(line: 620, column: 7, scope: !9241)
!9241 = distinct !DILexicalBlock(scope: !9239, file: !3, line: 619, column: 5)
!9242 = !DILocation(line: 621, column: 7, scope: !9241)
!9243 = !DILocation(line: 0, scope: !9235)
!9244 = !DILocation(line: 623, column: 3, scope: !9209)
!9245 = !DILocation(line: 624, column: 1, scope: !9209)
!9246 = distinct !DISubprogram(name: "value_inside_range", scope: !3, file: !3, line: 1292, type: !9247, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9249)
!9247 = !DISubroutineType(types: !9248)
!9248 = !{!680, !693, !687}
!9249 = !{!9250, !9251, !9252, !9253}
!9250 = !DILocalVariable(name: "val", arg: 1, scope: !9246, file: !3, line: 1292, type: !693)
!9251 = !DILocalVariable(name: "vr", arg: 2, scope: !9246, file: !3, line: 1292, type: !687)
!9252 = !DILocalVariable(name: "cmp1", scope: !9246, file: !3, line: 1294, type: !680)
!9253 = !DILocalVariable(name: "cmp2", scope: !9246, file: !3, line: 1294, type: !680)
!9254 = !DILocation(line: 0, scope: !9246)
!9255 = !DILocation(line: 1296, column: 35, scope: !9246)
!9256 = !DILocation(line: 1296, column: 10, scope: !9246)
!9257 = !DILocation(line: 1297, column: 7, scope: !9246)
!9258 = !DILocation(line: 1300, column: 5, scope: !9259)
!9259 = distinct !DILexicalBlock(scope: !9246, file: !3, line: 1299, column: 7)
!9260 = !DILocation(line: 1302, column: 30, scope: !9246)
!9261 = !DILocation(line: 1302, column: 10, scope: !9246)
!9262 = !DILocation(line: 1303, column: 12, scope: !9263)
!9263 = distinct !DILexicalBlock(scope: !9246, file: !3, line: 1303, column: 7)
!9264 = !DILocation(line: 1303, column: 7, scope: !9246)
!9265 = !DILocation(line: 1306, column: 10, scope: !9246)
!9266 = !DILocation(line: 1306, column: 3, scope: !9246)
!9267 = !DILocation(line: 1307, column: 1, scope: !9246)
!9268 = distinct !DISubprogram(name: "vrp_meet", scope: !3, file: !3, line: 6133, type: !8962, scopeLine: 6134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9269)
!9269 = !{!9270, !9271, !9272, !9275, !9276, !9277}
!9270 = !DILocalVariable(name: "vr0", arg: 1, scope: !9268, file: !3, line: 6133, type: !687)
!9271 = !DILocalVariable(name: "vr1", arg: 2, scope: !9268, file: !3, line: 6133, type: !687)
!9272 = !DILocalVariable(name: "cmp", scope: !9273, file: !3, line: 6161, type: !680)
!9273 = distinct !DILexicalBlock(scope: !9274, file: !3, line: 6160, column: 5)
!9274 = distinct !DILexicalBlock(scope: !9268, file: !3, line: 6159, column: 7)
!9275 = !DILocalVariable(name: "min", scope: !9273, file: !3, line: 6162, type: !693)
!9276 = !DILocalVariable(name: "max", scope: !9273, file: !3, line: 6162, type: !693)
!9277 = !DILabel(scope: !9268, name: "give_up", file: !3, line: 6249)
!9278 = !DILocation(line: 0, scope: !9268)
!9279 = !DILocation(line: 6135, column: 12, scope: !9280)
!9280 = distinct !DILexicalBlock(scope: !9268, file: !3, line: 6135, column: 7)
!9281 = !DILocation(line: 6135, column: 17, scope: !9280)
!9282 = !DILocation(line: 6135, column: 7, scope: !9268)
!9283 = !DILocation(line: 6137, column: 7, scope: !9284)
!9284 = distinct !DILexicalBlock(scope: !9280, file: !3, line: 6136, column: 5)
!9285 = !DILocation(line: 6138, column: 7, scope: !9284)
!9286 = !DILocation(line: 6141, column: 12, scope: !9287)
!9287 = distinct !DILexicalBlock(scope: !9268, file: !3, line: 6141, column: 7)
!9288 = !DILocation(line: 6141, column: 17, scope: !9287)
!9289 = !DILocation(line: 6141, column: 7, scope: !9268)
!9290 = !DILocation(line: 6147, column: 17, scope: !9291)
!9291 = distinct !DILexicalBlock(scope: !9268, file: !3, line: 6147, column: 7)
!9292 = !DILocation(line: 6147, column: 7, scope: !9268)
!9293 = !DILocation(line: 6153, column: 17, scope: !9294)
!9294 = distinct !DILexicalBlock(scope: !9268, file: !3, line: 6153, column: 7)
!9295 = !DILocation(line: 6153, column: 7, scope: !9268)
!9296 = !DILocation(line: 6155, column: 7, scope: !9297)
!9297 = distinct !DILexicalBlock(scope: !9294, file: !3, line: 6154, column: 5)
!9298 = !DILocation(line: 6156, column: 7, scope: !9297)
!9299 = !DILocation(line: 6159, column: 17, scope: !9274)
!9300 = !DILocation(line: 6159, column: 29, scope: !9274)
!9301 = !DILocation(line: 6159, column: 42, scope: !9274)
!9302 = !DILocation(line: 6159, column: 7, scope: !9268)
!9303 = !DILocation(line: 6167, column: 34, scope: !9273)
!9304 = !DILocation(line: 6167, column: 44, scope: !9273)
!9305 = !DILocation(line: 6167, column: 13, scope: !9273)
!9306 = !DILocation(line: 0, scope: !9273)
!9307 = !DILocation(line: 6168, column: 20, scope: !9308)
!9308 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 6168, column: 11)
!9309 = !DILocation(line: 6169, column: 9, scope: !9308)
!9310 = !DILocation(line: 0, scope: !9308)
!9311 = !DILocation(line: 6178, column: 34, scope: !9273)
!9312 = !DILocation(line: 6178, column: 44, scope: !9273)
!9313 = !DILocation(line: 6178, column: 13, scope: !9273)
!9314 = !DILocation(line: 6179, column: 20, scope: !9315)
!9315 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 6179, column: 11)
!9316 = !DILocation(line: 6180, column: 9, scope: !9315)
!9317 = !DILocation(line: 0, scope: !9315)
!9318 = !DILocation(line: 6187, column: 11, scope: !9319)
!9319 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 6187, column: 11)
!9320 = !DILocation(line: 6188, column: 4, scope: !9319)
!9321 = !DILocation(line: 6188, column: 9, scope: !9319)
!9322 = !DILocation(line: 6188, column: 30, scope: !9319)
!9323 = !DILocation(line: 6188, column: 33, scope: !9319)
!9324 = !DILocation(line: 6189, column: 8, scope: !9319)
!9325 = !DILocation(line: 6189, column: 12, scope: !9319)
!9326 = !DILocation(line: 6189, column: 33, scope: !9319)
!9327 = !DILocation(line: 6189, column: 36, scope: !9319)
!9328 = !DILocation(line: 6187, column: 11, scope: !9273)
!9329 = !DILocation(line: 6194, column: 16, scope: !9330)
!9330 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 6194, column: 11)
!9331 = !DILocation(line: 6194, column: 11, scope: !9330)
!9332 = !DILocation(line: 6194, column: 22, scope: !9330)
!9333 = !DILocation(line: 6194, column: 30, scope: !9330)
!9334 = !DILocation(line: 6194, column: 25, scope: !9330)
!9335 = !DILocation(line: 6194, column: 36, scope: !9330)
!9336 = !DILocation(line: 6194, column: 50, scope: !9330)
!9337 = !DILocation(line: 6194, column: 11, scope: !9273)
!9338 = !DILocation(line: 6195, column: 9, scope: !9330)
!9339 = !DILocation(line: 6196, column: 27, scope: !9340)
!9340 = distinct !DILexicalBlock(scope: !9330, file: !3, line: 6196, column: 16)
!9341 = !DILocation(line: 6196, column: 36, scope: !9340)
!9342 = !DILocation(line: 6196, column: 31, scope: !9340)
!9343 = !DILocation(line: 6196, column: 16, scope: !9330)
!9344 = !DILocation(line: 6197, column: 9, scope: !9340)
!9345 = !DILocation(line: 6199, column: 34, scope: !9273)
!9346 = !DILocation(line: 6199, column: 55, scope: !9273)
!9347 = !DILocation(line: 6199, column: 7, scope: !9273)
!9348 = !DILocation(line: 6200, column: 5, scope: !9274)
!9349 = !DILocation(line: 6201, column: 22, scope: !9350)
!9350 = distinct !DILexicalBlock(scope: !9274, file: !3, line: 6201, column: 12)
!9351 = !DILocation(line: 6201, column: 39, scope: !9350)
!9352 = !DILocation(line: 6201, column: 52, scope: !9350)
!9353 = !DILocation(line: 6201, column: 12, scope: !9274)
!9354 = !DILocation(line: 6205, column: 32, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9356, file: !3, line: 6205, column: 11)
!9356 = distinct !DILexicalBlock(scope: !9350, file: !3, line: 6202, column: 5)
!9357 = !DILocation(line: 6205, column: 42, scope: !9355)
!9358 = !DILocation(line: 6205, column: 11, scope: !9355)
!9359 = !DILocation(line: 6205, column: 47, scope: !9355)
!9360 = !DILocation(line: 6206, column: 4, scope: !9355)
!9361 = !DILocation(line: 6206, column: 28, scope: !9355)
!9362 = !DILocation(line: 6206, column: 38, scope: !9355)
!9363 = !DILocation(line: 6206, column: 7, scope: !9355)
!9364 = !DILocation(line: 6206, column: 43, scope: !9355)
!9365 = !DILocation(line: 6207, column: 4, scope: !9355)
!9366 = !DILocation(line: 6207, column: 28, scope: !9355)
!9367 = !DILocation(line: 6207, column: 38, scope: !9355)
!9368 = !DILocation(line: 6207, column: 7, scope: !9355)
!9369 = !DILocation(line: 6207, column: 43, scope: !9355)
!9370 = !DILocation(line: 6205, column: 11, scope: !9356)
!9371 = !DILocation(line: 6211, column: 13, scope: !9372)
!9372 = distinct !DILexicalBlock(scope: !9373, file: !3, line: 6211, column: 8)
!9373 = distinct !DILexicalBlock(scope: !9355, file: !3, line: 6208, column: 2)
!9374 = !DILocation(line: 6211, column: 8, scope: !9372)
!9375 = !DILocation(line: 6211, column: 19, scope: !9372)
!9376 = !DILocation(line: 6211, column: 27, scope: !9372)
!9377 = !DILocation(line: 6211, column: 22, scope: !9372)
!9378 = !DILocation(line: 6211, column: 33, scope: !9372)
!9379 = !DILocation(line: 6211, column: 47, scope: !9372)
!9380 = !DILocation(line: 6211, column: 8, scope: !9373)
!9381 = !DILocation(line: 6212, column: 6, scope: !9372)
!9382 = !DILocation(line: 6213, column: 24, scope: !9383)
!9383 = distinct !DILexicalBlock(scope: !9372, file: !3, line: 6213, column: 13)
!9384 = !DILocation(line: 6213, column: 33, scope: !9383)
!9385 = !DILocation(line: 6213, column: 28, scope: !9383)
!9386 = !DILocation(line: 6213, column: 13, scope: !9372)
!9387 = !DILocation(line: 6214, column: 6, scope: !9383)
!9388 = !DILocation(line: 6219, column: 39, scope: !9389)
!9389 = distinct !DILexicalBlock(scope: !9350, file: !3, line: 6219, column: 12)
!9390 = !DILocation(line: 6219, column: 52, scope: !9389)
!9391 = !DILocation(line: 6219, column: 12, scope: !9350)
!9392 = !DILocation(line: 6224, column: 12, scope: !9393)
!9393 = distinct !DILexicalBlock(scope: !9394, file: !3, line: 6224, column: 11)
!9394 = distinct !DILexicalBlock(scope: !9389, file: !3, line: 6220, column: 5)
!9395 = !DILocation(line: 6225, column: 4, scope: !9393)
!9396 = !DILocation(line: 6225, column: 8, scope: !9393)
!9397 = !DILocation(line: 6226, column: 4, scope: !9393)
!9398 = !DILocation(line: 6226, column: 8, scope: !9393)
!9399 = !DILocation(line: 6224, column: 11, scope: !9394)
!9400 = !DILocation(line: 6231, column: 13, scope: !9401)
!9401 = distinct !DILexicalBlock(scope: !9402, file: !3, line: 6231, column: 8)
!9402 = distinct !DILexicalBlock(scope: !9393, file: !3, line: 6227, column: 2)
!9403 = !DILocation(line: 6231, column: 18, scope: !9401)
!9404 = !DILocation(line: 6231, column: 8, scope: !9402)
!9405 = !DILocation(line: 6232, column: 44, scope: !9401)
!9406 = !DILocation(line: 6232, column: 54, scope: !9401)
!9407 = !DILocation(line: 6232, column: 64, scope: !9401)
!9408 = !DILocation(line: 6232, column: 6, scope: !9401)
!9409 = !DILocation(line: 6236, column: 13, scope: !9410)
!9410 = distinct !DILexicalBlock(scope: !9402, file: !3, line: 6236, column: 8)
!9411 = !DILocation(line: 6236, column: 8, scope: !9410)
!9412 = !DILocation(line: 6236, column: 19, scope: !9410)
!9413 = !DILocation(line: 6236, column: 27, scope: !9410)
!9414 = !DILocation(line: 6236, column: 22, scope: !9410)
!9415 = !DILocation(line: 6236, column: 33, scope: !9410)
!9416 = !DILocation(line: 6236, column: 47, scope: !9410)
!9417 = !DILocation(line: 6236, column: 8, scope: !9402)
!9418 = !DILocation(line: 6237, column: 6, scope: !9410)
!9419 = !DILocation(line: 6238, column: 24, scope: !9420)
!9420 = distinct !DILexicalBlock(scope: !9410, file: !3, line: 6238, column: 13)
!9421 = !DILocation(line: 6238, column: 33, scope: !9420)
!9422 = !DILocation(line: 6238, column: 28, scope: !9420)
!9423 = !DILocation(line: 6238, column: 13, scope: !9410)
!9424 = !DILocation(line: 6239, column: 6, scope: !9420)
!9425 = !DILocation(line: 6245, column: 5, scope: !9389)
!9426 = !DILocation(line: 6249, column: 1, scope: !9268)
!9427 = !DILocation(line: 6255, column: 8, scope: !9428)
!9428 = distinct !DILexicalBlock(scope: !9268, file: !3, line: 6255, column: 7)
!9429 = !DILocation(line: 6256, column: 7, scope: !9428)
!9430 = !DILocation(line: 6256, column: 17, scope: !9428)
!9431 = !DILocation(line: 6256, column: 22, scope: !9428)
!9432 = !DILocation(line: 6256, column: 34, scope: !9428)
!9433 = !DILocation(line: 6256, column: 38, scope: !9428)
!9434 = !DILocation(line: 6257, column: 4, scope: !9428)
!9435 = !DILocation(line: 6257, column: 13, scope: !9428)
!9436 = !DILocation(line: 6257, column: 18, scope: !9428)
!9437 = !DILocation(line: 6257, column: 35, scope: !9428)
!9438 = !DILocation(line: 6257, column: 38, scope: !9428)
!9439 = !DILocation(line: 6258, column: 7, scope: !9428)
!9440 = !DILocation(line: 6258, column: 11, scope: !9428)
!9441 = !DILocation(line: 6259, column: 7, scope: !9428)
!9442 = !DILocation(line: 6259, column: 17, scope: !9428)
!9443 = !DILocation(line: 6259, column: 22, scope: !9428)
!9444 = !DILocation(line: 6259, column: 34, scope: !9428)
!9445 = !DILocation(line: 6259, column: 38, scope: !9428)
!9446 = !DILocation(line: 6260, column: 4, scope: !9428)
!9447 = !DILocation(line: 6260, column: 13, scope: !9428)
!9448 = !DILocation(line: 6260, column: 18, scope: !9428)
!9449 = !DILocation(line: 6260, column: 35, scope: !9428)
!9450 = !DILocation(line: 6260, column: 38, scope: !9428)
!9451 = !DILocation(line: 6255, column: 7, scope: !9268)
!9452 = !DILocation(line: 6262, column: 40, scope: !9453)
!9453 = distinct !DILexicalBlock(scope: !9428, file: !3, line: 6261, column: 5)
!9454 = !DILocation(line: 6262, column: 7, scope: !9453)
!9455 = !DILocation(line: 6266, column: 16, scope: !9456)
!9456 = distinct !DILexicalBlock(scope: !9453, file: !3, line: 6266, column: 11)
!9457 = !DILocation(line: 6266, column: 11, scope: !9456)
!9458 = !DILocation(line: 6266, column: 11, scope: !9453)
!9459 = !DILocation(line: 6267, column: 2, scope: !9456)
!9460 = !DILocation(line: 6270, column: 5, scope: !9428)
!9461 = !DILocation(line: 6271, column: 1, scope: !9268)
!9462 = distinct !DISubprogram(name: "vrp_evaluate_conditional_warnv_with_ops", scope: !3, file: !3, line: 5646, type: !9463, scopeLine: 5649, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9465)
!9463 = !DISubroutineType(types: !9464)
!9464 = !{!693, !134, !693, !693, !679, !678, !678}
!9465 = !{!9466, !9467, !9468, !9469, !9470, !9471, !9472}
!9466 = !DILocalVariable(name: "code", arg: 1, scope: !9462, file: !3, line: 5646, type: !134)
!9467 = !DILocalVariable(name: "op0", arg: 2, scope: !9462, file: !3, line: 5646, type: !693)
!9468 = !DILocalVariable(name: "op1", arg: 3, scope: !9462, file: !3, line: 5647, type: !693)
!9469 = !DILocalVariable(name: "use_equiv_p", arg: 4, scope: !9462, file: !3, line: 5647, type: !679)
!9470 = !DILocalVariable(name: "strict_overflow_p", arg: 5, scope: !9462, file: !3, line: 5648, type: !678)
!9471 = !DILocalVariable(name: "only_ranges", arg: 6, scope: !9462, file: !3, line: 5648, type: !678)
!9472 = !DILocalVariable(name: "ret", scope: !9462, file: !3, line: 5650, type: !693)
!9473 = !DILocation(line: 0, scope: !9462)
!9474 = !DILocation(line: 5651, column: 7, scope: !9475)
!9475 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5651, column: 7)
!9476 = !DILocation(line: 5651, column: 7, scope: !9462)
!9477 = !DILocation(line: 5652, column: 18, scope: !9475)
!9478 = !DILocation(line: 5652, column: 5, scope: !9475)
!9479 = !DILocation(line: 5655, column: 8, scope: !9480)
!9480 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5655, column: 7)
!9481 = !DILocation(line: 5656, column: 7, scope: !9480)
!9482 = !DILocation(line: 5656, column: 11, scope: !9480)
!9483 = !DILocation(line: 5655, column: 7, scope: !9462)
!9484 = !DILocation(line: 5659, column: 7, scope: !9485)
!9485 = distinct !DILexicalBlock(scope: !9462, file: !3, line: 5659, column: 7)
!9486 = !DILocation(line: 5659, column: 7, scope: !9462)
!9487 = !DILocation(line: 5662, column: 11, scope: !9488)
!9488 = distinct !DILexicalBlock(scope: !9489, file: !3, line: 5661, column: 11)
!9489 = distinct !DILexicalBlock(scope: !9485, file: !3, line: 5660, column: 5)
!9490 = !DILocation(line: 5662, column: 21, scope: !9488)
!9491 = !DILocation(line: 5662, column: 19, scope: !9488)
!9492 = !DILocation(line: 5661, column: 11, scope: !9489)
!9493 = !DILocation(line: 5665, column: 20, scope: !9489)
!9494 = !DILocation(line: 5666, column: 11, scope: !9495)
!9495 = distinct !DILexicalBlock(scope: !9489, file: !3, line: 5666, column: 11)
!9496 = !DILocation(line: 5666, column: 27, scope: !9495)
!9497 = !DILocation(line: 5666, column: 39, scope: !9495)
!9498 = !DILocation(line: 5666, column: 42, scope: !9495)
!9499 = !DILocation(line: 5666, column: 58, scope: !9495)
!9500 = !DILocation(line: 5666, column: 11, scope: !9489)
!9501 = !DILocation(line: 5667, column: 9, scope: !9495)
!9502 = !DILocation(line: 5667, column: 2, scope: !9495)
!9503 = !DILocation(line: 5668, column: 16, scope: !9495)
!9504 = !DILocation(line: 5669, column: 9, scope: !9505)
!9505 = distinct !DILexicalBlock(scope: !9495, file: !3, line: 5668, column: 16)
!9506 = !DILocation(line: 5669, column: 2, scope: !9505)
!9507 = !DILocation(line: 5670, column: 16, scope: !9508)
!9508 = distinct !DILexicalBlock(scope: !9505, file: !3, line: 5670, column: 16)
!9509 = !DILocation(line: 5670, column: 32, scope: !9508)
!9510 = !DILocation(line: 5670, column: 16, scope: !9505)
!9511 = !DILocation(line: 5672, column: 4, scope: !9508)
!9512 = !DILocation(line: 5671, column: 10, scope: !9508)
!9513 = !DILocation(line: 5671, column: 2, scope: !9508)
!9514 = !DILocation(line: 5675, column: 12, scope: !9485)
!9515 = !DILocation(line: 5675, column: 5, scope: !9485)
!9516 = !DILocation(line: 5678, column: 1, scope: !9462)
!9517 = distinct !DISubprogram(name: "vrp_evaluate_conditional_warnv_with_ops_using_ranges", scope: !3, file: !3, line: 5624, type: !2178, scopeLine: 5627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9518)
!9518 = !{!9519, !9520, !9521, !9522, !9523, !9524}
!9519 = !DILocalVariable(name: "code", arg: 1, scope: !9517, file: !3, line: 5624, type: !134)
!9520 = !DILocalVariable(name: "op0", arg: 2, scope: !9517, file: !3, line: 5625, type: !693)
!9521 = !DILocalVariable(name: "op1", arg: 3, scope: !9517, file: !3, line: 5625, type: !693)
!9522 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !9517, file: !3, line: 5626, type: !678)
!9523 = !DILocalVariable(name: "vr0", scope: !9517, file: !3, line: 5628, type: !687)
!9524 = !DILocalVariable(name: "vr1", scope: !9517, file: !3, line: 5628, type: !687)
!9525 = !DILocation(line: 0, scope: !9517)
!9526 = !DILocation(line: 5630, column: 10, scope: !9517)
!9527 = !DILocation(line: 5630, column: 26, scope: !9517)
!9528 = !DILocation(line: 5630, column: 9, scope: !9517)
!9529 = !DILocation(line: 5630, column: 41, scope: !9517)
!9530 = !DILocation(line: 5631, column: 10, scope: !9517)
!9531 = !DILocation(line: 5631, column: 26, scope: !9517)
!9532 = !DILocation(line: 5631, column: 9, scope: !9517)
!9533 = !DILocation(line: 5631, column: 41, scope: !9517)
!9534 = !DILocation(line: 5633, column: 7, scope: !9535)
!9535 = distinct !DILexicalBlock(scope: !9517, file: !3, line: 5633, column: 7)
!9536 = !DILocation(line: 5633, column: 14, scope: !9535)
!9537 = !DILocation(line: 5633, column: 11, scope: !9535)
!9538 = !DILocation(line: 5634, column: 12, scope: !9535)
!9539 = !DILocation(line: 5634, column: 5, scope: !9535)
!9540 = !DILocation(line: 5635, column: 23, scope: !9541)
!9541 = distinct !DILexicalBlock(scope: !9535, file: !3, line: 5635, column: 12)
!9542 = !DILocation(line: 5635, column: 16, scope: !9541)
!9543 = !DILocation(line: 5636, column: 12, scope: !9541)
!9544 = !DILocation(line: 5636, column: 5, scope: !9541)
!9545 = !DILocation(line: 5637, column: 16, scope: !9546)
!9546 = distinct !DILexicalBlock(scope: !9541, file: !3, line: 5637, column: 12)
!9547 = !DILocation(line: 5637, column: 24, scope: !9546)
!9548 = !DILocation(line: 5639, column: 7, scope: !9546)
!9549 = !DILocation(line: 5638, column: 13, scope: !9546)
!9550 = !DILocation(line: 5638, column: 5, scope: !9546)
!9551 = !DILocation(line: 5641, column: 1, scope: !9517)
!9552 = !DILocation(line: 0, scope: !2177)
!9553 = !DILocation(line: 5521, column: 3, scope: !2177)
!9554 = !DILocation(line: 5522, column: 3, scope: !2177)
!9555 = !DILocation(line: 5529, column: 8, scope: !2177)
!9556 = !DILocation(line: 5529, column: 30, scope: !2177)
!9557 = !DILocation(line: 5530, column: 8, scope: !2177)
!9558 = !DILocation(line: 5530, column: 30, scope: !2177)
!9559 = !DILocation(line: 5533, column: 7, scope: !9560)
!9560 = distinct !DILexicalBlock(scope: !2177, file: !3, line: 5533, column: 7)
!9561 = !DILocation(line: 5533, column: 17, scope: !9560)
!9562 = !DILocation(line: 5533, column: 7, scope: !2177)
!9563 = !DILocation(line: 5542, column: 7, scope: !2177)
!9564 = !DILocation(line: 5535, column: 19, scope: !9565)
!9565 = distinct !DILexicalBlock(scope: !9560, file: !3, line: 5534, column: 5)
!9566 = !DILocation(line: 5535, column: 17, scope: !9565)
!9567 = !DILocation(line: 5536, column: 34, scope: !9565)
!9568 = !DILocation(line: 5536, column: 7, scope: !9565)
!9569 = !DILocation(line: 5537, column: 14, scope: !9565)
!9570 = !DILocation(line: 5537, column: 12, scope: !9565)
!9571 = !DILocation(line: 5538, column: 14, scope: !9565)
!9572 = !DILocation(line: 5538, column: 12, scope: !9565)
!9573 = !DILocation(line: 5539, column: 5, scope: !9565)
!9574 = !DILocation(line: 5540, column: 10, scope: !9575)
!9575 = distinct !DILexicalBlock(scope: !2177, file: !3, line: 5540, column: 7)
!9576 = !DILocation(line: 5541, column: 10, scope: !9575)
!9577 = !DILocation(line: 5540, column: 7, scope: !2177)
!9578 = !DILocation(line: 5542, column: 10, scope: !9579)
!9579 = distinct !DILexicalBlock(scope: !2177, file: !3, line: 5542, column: 7)
!9580 = !DILocation(line: 5548, column: 23, scope: !2177)
!9581 = !DILocation(line: 5548, column: 3, scope: !2177)
!9582 = !DILocation(line: 5549, column: 23, scope: !2177)
!9583 = !DILocation(line: 5549, column: 3, scope: !2177)
!9584 = !DILocation(line: 5553, column: 7, scope: !9585)
!9585 = distinct !DILexicalBlock(scope: !2177, file: !3, line: 5553, column: 7)
!9586 = !DILocation(line: 5553, column: 7, scope: !2177)
!9587 = !DILocation(line: 5555, column: 29, scope: !9588)
!9588 = distinct !DILexicalBlock(scope: !9585, file: !3, line: 5554, column: 5)
!9589 = !DILocation(line: 5555, column: 7, scope: !9588)
!9590 = !DILocation(line: 5556, column: 29, scope: !9588)
!9591 = !DILocation(line: 5556, column: 7, scope: !9588)
!9592 = !DILocation(line: 5558, column: 31, scope: !9588)
!9593 = !DILocation(line: 5559, column: 9, scope: !9588)
!9594 = !DILocation(line: 5558, column: 14, scope: !9588)
!9595 = !DILocation(line: 5560, column: 9, scope: !9588)
!9596 = !DILocation(line: 5570, column: 3, scope: !2204)
!9597 = !DILocation(line: 0, scope: !2202)
!9598 = !DILocation(line: 0, scope: !2206)
!9599 = !DILocation(line: 5565, column: 24, scope: !2177)
!9600 = !DILocation(line: 5570, column: 3, scope: !2203)
!9601 = !DILocation(line: 5572, column: 7, scope: !2202)
!9602 = !DILocation(line: 5572, column: 50, scope: !2202)
!9603 = !DILocation(line: 5572, column: 27, scope: !2202)
!9604 = !DILocation(line: 5575, column: 7, scope: !2208)
!9605 = !DILocation(line: 5574, column: 18, scope: !2202)
!9606 = !DILocation(line: 5575, column: 7, scope: !2207)
!9607 = !DILocation(line: 5577, column: 4, scope: !2206)
!9608 = !DILocation(line: 5577, column: 9, scope: !2206)
!9609 = !DILocation(line: 5579, column: 4, scope: !2206)
!9610 = !DILocation(line: 5579, column: 47, scope: !2206)
!9611 = !DILocation(line: 5579, column: 24, scope: !2206)
!9612 = !DILocation(line: 5581, column: 8, scope: !2206)
!9613 = !DILocation(line: 5582, column: 8, scope: !9614)
!9614 = distinct !DILexicalBlock(scope: !2206, file: !3, line: 5582, column: 8)
!9615 = !DILocation(line: 5582, column: 8, scope: !2206)
!9616 = !DILocation(line: 5588, column: 19, scope: !9617)
!9617 = distinct !DILexicalBlock(scope: !9618, file: !3, line: 5588, column: 12)
!9618 = distinct !DILexicalBlock(scope: !9614, file: !3, line: 5583, column: 6)
!9619 = !DILocation(line: 5589, column: 10, scope: !9617)
!9620 = !DILocation(line: 5589, column: 5, scope: !9617)
!9621 = !DILocation(line: 5591, column: 27, scope: !9622)
!9622 = distinct !DILexicalBlock(scope: !9617, file: !3, line: 5590, column: 3)
!9623 = !DILocation(line: 5591, column: 5, scope: !9622)
!9624 = !DILocation(line: 5592, column: 27, scope: !9622)
!9625 = !DILocation(line: 5592, column: 5, scope: !9622)
!9626 = !DILocation(line: 5593, column: 5, scope: !9622)
!9627 = !DILocation(line: 5597, column: 13, scope: !9628)
!9628 = distinct !DILexicalBlock(scope: !9618, file: !3, line: 5597, column: 12)
!9629 = !DILocation(line: 5597, column: 12, scope: !9618)
!9630 = !DILocation(line: 5602, column: 2, scope: !2207)
!9631 = distinct !{!9631, !9604, !9632}
!9632 = !DILocation(line: 5602, column: 2, scope: !2208)
!9633 = !DILocation(line: 5604, column: 11, scope: !9634)
!9634 = distinct !DILexicalBlock(scope: !2202, file: !3, line: 5604, column: 11)
!9635 = !DILocation(line: 5604, column: 11, scope: !2202)
!9636 = !DILocation(line: 5606, column: 26, scope: !9637)
!9637 = distinct !DILexicalBlock(scope: !9634, file: !3, line: 5605, column: 2)
!9638 = !DILocation(line: 5606, column: 4, scope: !9637)
!9639 = !DILocation(line: 5607, column: 26, scope: !9637)
!9640 = !DILocation(line: 5607, column: 4, scope: !9637)
!9641 = !DILocation(line: 5608, column: 29, scope: !9642)
!9642 = distinct !DILexicalBlock(scope: !9637, file: !3, line: 5608, column: 8)
!9643 = !DILocation(line: 5608, column: 8, scope: !9637)
!9644 = !DILocation(line: 5609, column: 25, scope: !9642)
!9645 = !DILocation(line: 5609, column: 6, scope: !9642)
!9646 = !DILocation(line: 5612, column: 5, scope: !2203)
!9647 = distinct !{!9647, !9596, !9648}
!9648 = !DILocation(line: 5612, column: 5, scope: !2204)
!9649 = !DILocation(line: 5616, column: 25, scope: !2177)
!9650 = !DILocation(line: 5616, column: 3, scope: !2177)
!9651 = !DILocation(line: 5617, column: 25, scope: !2177)
!9652 = !DILocation(line: 5617, column: 3, scope: !2177)
!9653 = !DILocation(line: 5618, column: 3, scope: !2177)
!9654 = !DILocation(line: 5619, column: 1, scope: !2177)
!9655 = distinct !DISubprogram(name: "compare_name_with_value", scope: !3, file: !3, line: 5440, type: !2178, scopeLine: 5442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9656)
!9656 = !{!9657, !9658, !9659, !9660, !9661, !9662, !9663, !9664, !9665, !9666, !9667, !9668}
!9657 = !DILocalVariable(name: "comp", arg: 1, scope: !9655, file: !3, line: 5440, type: !134)
!9658 = !DILocalVariable(name: "var", arg: 2, scope: !9655, file: !3, line: 5440, type: !693)
!9659 = !DILocalVariable(name: "val", arg: 3, scope: !9655, file: !3, line: 5440, type: !693)
!9660 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !9655, file: !3, line: 5441, type: !678)
!9661 = !DILocalVariable(name: "bi", scope: !9655, file: !3, line: 5443, type: !2190)
!9662 = !DILocalVariable(name: "i", scope: !9655, file: !3, line: 5444, type: !7)
!9663 = !DILocalVariable(name: "e", scope: !9655, file: !3, line: 5445, type: !1586)
!9664 = !DILocalVariable(name: "retval", scope: !9655, file: !3, line: 5446, type: !693)
!9665 = !DILocalVariable(name: "t", scope: !9655, file: !3, line: 5446, type: !693)
!9666 = !DILocalVariable(name: "used_strict_overflow", scope: !9655, file: !3, line: 5447, type: !680)
!9667 = !DILocalVariable(name: "sop", scope: !9655, file: !3, line: 5448, type: !679)
!9668 = !DILocalVariable(name: "equiv_vr", scope: !9655, file: !3, line: 5449, type: !688)
!9669 = !DILocation(line: 0, scope: !9655)
!9670 = !DILocation(line: 5443, column: 3, scope: !9655)
!9671 = !DILocation(line: 5444, column: 3, scope: !9655)
!9672 = !DILocation(line: 5448, column: 3, scope: !9655)
!9673 = !DILocation(line: 5449, column: 3, scope: !9655)
!9674 = !DILocation(line: 5452, column: 7, scope: !9655)
!9675 = !DILocation(line: 5452, column: 30, scope: !9655)
!9676 = !DILocation(line: 5459, column: 14, scope: !9655)
!9677 = !DILocation(line: 5459, column: 37, scope: !9655)
!9678 = !DILocation(line: 5460, column: 7, scope: !9655)
!9679 = !DILocation(line: 5461, column: 12, scope: !9655)
!9680 = !DILocation(line: 5462, column: 7, scope: !9681)
!9681 = distinct !DILexicalBlock(scope: !9655, file: !3, line: 5462, column: 7)
!9682 = !DILocation(line: 5462, column: 7, scope: !9655)
!9683 = !DILocation(line: 5463, column: 28, scope: !9681)
!9684 = !DILocation(line: 5463, column: 5, scope: !9681)
!9685 = !DILocation(line: 5466, column: 9, scope: !9686)
!9686 = distinct !DILexicalBlock(scope: !9655, file: !3, line: 5466, column: 7)
!9687 = !DILocation(line: 5466, column: 7, scope: !9655)
!9688 = !DILocation(line: 5468, column: 11, scope: !9689)
!9689 = distinct !DILexicalBlock(scope: !9690, file: !3, line: 5468, column: 11)
!9690 = distinct !DILexicalBlock(scope: !9686, file: !3, line: 5467, column: 5)
!9691 = !DILocation(line: 5469, column: 28, scope: !9689)
!9692 = !DILocation(line: 5469, column: 4, scope: !9689)
!9693 = !DILocation(line: 5470, column: 21, scope: !9689)
!9694 = !DILocation(line: 5470, column: 2, scope: !9689)
!9695 = !DILocation(line: 5474, column: 3, scope: !9696)
!9696 = distinct !DILexicalBlock(scope: !9655, file: !3, line: 5474, column: 3)
!9697 = !DILocation(line: 0, scope: !9698)
!9698 = distinct !DILexicalBlock(scope: !9699, file: !3, line: 5475, column: 5)
!9699 = distinct !DILexicalBlock(scope: !9696, file: !3, line: 5474, column: 3)
!9700 = !DILocation(line: 5474, column: 3, scope: !9699)
!9701 = !DILocation(line: 5476, column: 18, scope: !9698)
!9702 = !DILocation(line: 5476, column: 41, scope: !9698)
!9703 = !DILocation(line: 5477, column: 11, scope: !9698)
!9704 = !DILocation(line: 5478, column: 11, scope: !9698)
!9705 = !DILocation(line: 5479, column: 11, scope: !9706)
!9706 = distinct !DILexicalBlock(scope: !9698, file: !3, line: 5479, column: 11)
!9707 = !DILocation(line: 5479, column: 11, scope: !9698)
!9708 = !DILocation(line: 5485, column: 15, scope: !9709)
!9709 = distinct !DILexicalBlock(scope: !9710, file: !3, line: 5485, column: 8)
!9710 = distinct !DILexicalBlock(scope: !9706, file: !3, line: 5480, column: 2)
!9711 = !DILocation(line: 5486, column: 13, scope: !9709)
!9712 = !DILocation(line: 5486, column: 8, scope: !9709)
!9713 = !DILocation(line: 5493, column: 9, scope: !9714)
!9714 = distinct !DILexicalBlock(scope: !9710, file: !3, line: 5493, column: 8)
!9715 = !DILocation(line: 5493, column: 8, scope: !9710)
!9716 = distinct !{!9716, !9695, !9717}
!9717 = !DILocation(line: 5498, column: 5, scope: !9696)
!9718 = !DILocation(line: 5500, column: 7, scope: !9719)
!9719 = distinct !DILexicalBlock(scope: !9655, file: !3, line: 5500, column: 7)
!9720 = !DILocation(line: 5501, column: 31, scope: !9719)
!9721 = !DILocation(line: 5501, column: 7, scope: !9719)
!9722 = !DILocation(line: 5502, column: 24, scope: !9719)
!9723 = !DILocation(line: 5502, column: 5, scope: !9719)
!9724 = !DILocation(line: 5505, column: 1, scope: !9655)
!9725 = distinct !DISubprogram(name: "compare_ranges", scope: !3, file: !3, line: 3344, type: !9726, scopeLine: 3346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9728)
!9726 = !DISubroutineType(types: !9727)
!9727 = !{!693, !134, !687, !687, !678}
!9728 = !{!9729, !9730, !9731, !9732, !9733, !9738, !9741, !9746, !9747, !9750, !9751}
!9729 = !DILocalVariable(name: "comp", arg: 1, scope: !9725, file: !3, line: 3344, type: !134)
!9730 = !DILocalVariable(name: "vr0", arg: 2, scope: !9725, file: !3, line: 3344, type: !687)
!9731 = !DILocalVariable(name: "vr1", arg: 3, scope: !9725, file: !3, line: 3344, type: !687)
!9732 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !9725, file: !3, line: 3345, type: !678)
!9733 = !DILocalVariable(name: "tmp", scope: !9734, file: !3, line: 3374, type: !687)
!9734 = distinct !DILexicalBlock(scope: !9735, file: !3, line: 3372, column: 2)
!9735 = distinct !DILexicalBlock(scope: !9736, file: !3, line: 3371, column: 11)
!9736 = distinct !DILexicalBlock(scope: !9737, file: !3, line: 3356, column: 5)
!9737 = distinct !DILexicalBlock(scope: !9725, file: !3, line: 3355, column: 7)
!9738 = !DILocalVariable(name: "tmp", scope: !9739, file: !3, line: 3396, type: !687)
!9739 = distinct !DILexicalBlock(scope: !9740, file: !3, line: 3395, column: 5)
!9740 = distinct !DILexicalBlock(scope: !9725, file: !3, line: 3394, column: 7)
!9741 = !DILocalVariable(name: "cmp_min", scope: !9742, file: !3, line: 3410, type: !680)
!9742 = distinct !DILexicalBlock(scope: !9743, file: !3, line: 3409, column: 2)
!9743 = distinct !DILexicalBlock(scope: !9744, file: !3, line: 3407, column: 11)
!9744 = distinct !DILexicalBlock(scope: !9745, file: !3, line: 3404, column: 5)
!9745 = distinct !DILexicalBlock(scope: !9725, file: !3, line: 3403, column: 7)
!9746 = !DILocalVariable(name: "cmp_max", scope: !9742, file: !3, line: 3412, type: !680)
!9747 = !DILocalVariable(name: "cmp1", scope: !9748, file: !3, line: 3430, type: !680)
!9748 = distinct !DILexicalBlock(scope: !9749, file: !3, line: 3429, column: 5)
!9749 = distinct !DILexicalBlock(scope: !9745, file: !3, line: 3428, column: 12)
!9750 = !DILocalVariable(name: "cmp2", scope: !9748, file: !3, line: 3430, type: !680)
!9751 = !DILocalVariable(name: "tst", scope: !9752, file: !3, line: 3460, type: !680)
!9752 = distinct !DILexicalBlock(scope: !9753, file: !3, line: 3459, column: 5)
!9753 = distinct !DILexicalBlock(scope: !9749, file: !3, line: 3458, column: 12)
!9754 = !DILocation(line: 0, scope: !9725)
!9755 = !DILocation(line: 3348, column: 12, scope: !9756)
!9756 = distinct !DILexicalBlock(scope: !9725, file: !3, line: 3348, column: 7)
!9757 = !DILocation(line: 3348, column: 17, scope: !9756)
!9758 = !DILocation(line: 3349, column: 7, scope: !9756)
!9759 = !DILocation(line: 3349, column: 20, scope: !9756)
!9760 = !DILocation(line: 3350, column: 7, scope: !9756)
!9761 = !DILocation(line: 3350, column: 15, scope: !9756)
!9762 = !DILocation(line: 3350, column: 20, scope: !9756)
!9763 = !DILocation(line: 3351, column: 7, scope: !9756)
!9764 = !DILocation(line: 3351, column: 20, scope: !9756)
!9765 = !DILocation(line: 3348, column: 7, scope: !9725)
!9766 = !DILocation(line: 3355, column: 17, scope: !9737)
!9767 = !DILocation(line: 3355, column: 34, scope: !9737)
!9768 = !DILocation(line: 3355, column: 47, scope: !9737)
!9769 = !DILocation(line: 3355, column: 7, scope: !9725)
!9770 = !DILocation(line: 3359, column: 38, scope: !9771)
!9771 = distinct !DILexicalBlock(scope: !9736, file: !3, line: 3359, column: 11)
!9772 = !DILocation(line: 3359, column: 51, scope: !9771)
!9773 = !DILocation(line: 3359, column: 11, scope: !9736)
!9774 = !DILocation(line: 3364, column: 4, scope: !9775)
!9775 = distinct !DILexicalBlock(scope: !9736, file: !3, line: 3363, column: 11)
!9776 = !DILocation(line: 3371, column: 21, scope: !9735)
!9777 = !DILocation(line: 3371, column: 11, scope: !9736)
!9778 = !DILocation(line: 3379, column: 7, scope: !9736)
!9779 = !DILocation(line: 3381, column: 38, scope: !9780)
!9780 = distinct !DILexicalBlock(scope: !9736, file: !3, line: 3381, column: 11)
!9781 = !DILocation(line: 3381, column: 48, scope: !9780)
!9782 = !DILocation(line: 3381, column: 11, scope: !9780)
!9783 = !DILocation(line: 3381, column: 72, scope: !9780)
!9784 = !DILocation(line: 3382, column: 4, scope: !9780)
!9785 = !DILocation(line: 3382, column: 34, scope: !9780)
!9786 = !DILocation(line: 3382, column: 44, scope: !9780)
!9787 = !DILocation(line: 3382, column: 7, scope: !9780)
!9788 = !DILocation(line: 3382, column: 68, scope: !9780)
!9789 = !DILocation(line: 3381, column: 11, scope: !9736)
!9790 = !DILocation(line: 3383, column: 15, scope: !9780)
!9791 = !DILocation(line: 3383, column: 9, scope: !9780)
!9792 = !DILocation(line: 3388, column: 8, scope: !9793)
!9793 = distinct !DILexicalBlock(scope: !9725, file: !3, line: 3388, column: 7)
!9794 = !DILocation(line: 3389, column: 7, scope: !9793)
!9795 = !DILocation(line: 3389, column: 11, scope: !9793)
!9796 = !DILocation(line: 3388, column: 7, scope: !9725)
!9797 = !DILocation(line: 3394, column: 23, scope: !9740)
!9798 = !DILocation(line: 3397, column: 20, scope: !9739)
!9799 = !DILocation(line: 3397, column: 14, scope: !9739)
!9800 = !DILocation(line: 0, scope: !9739)
!9801 = !DILocation(line: 3401, column: 5, scope: !9739)
!9802 = !DILocation(line: 3403, column: 7, scope: !9725)
!9803 = !DILocation(line: 3407, column: 38, scope: !9743)
!9804 = !DILocation(line: 3407, column: 48, scope: !9743)
!9805 = !DILocation(line: 3407, column: 11, scope: !9743)
!9806 = !DILocation(line: 3407, column: 72, scope: !9743)
!9807 = !DILocation(line: 3408, column: 4, scope: !9743)
!9808 = !DILocation(line: 3408, column: 34, scope: !9743)
!9809 = !DILocation(line: 3408, column: 44, scope: !9743)
!9810 = !DILocation(line: 3408, column: 7, scope: !9743)
!9811 = !DILocation(line: 3408, column: 68, scope: !9743)
!9812 = !DILocation(line: 3407, column: 11, scope: !9744)
!9813 = !DILocation(line: 3410, column: 45, scope: !9742)
!9814 = !DILocation(line: 3410, column: 55, scope: !9742)
!9815 = !DILocation(line: 3410, column: 18, scope: !9742)
!9816 = !DILocation(line: 0, scope: !9742)
!9817 = !DILocation(line: 3412, column: 45, scope: !9742)
!9818 = !DILocation(line: 3412, column: 55, scope: !9742)
!9819 = !DILocation(line: 3412, column: 18, scope: !9742)
!9820 = !DILocation(line: 3414, column: 21, scope: !9821)
!9821 = distinct !DILexicalBlock(scope: !9742, file: !3, line: 3414, column: 8)
!9822 = !DILocation(line: 3415, column: 6, scope: !9821)
!9823 = !DILocation(line: 3416, column: 21, scope: !9824)
!9824 = distinct !DILexicalBlock(scope: !9821, file: !3, line: 3416, column: 13)
!9825 = !DILocation(line: 3416, column: 38, scope: !9824)
!9826 = !DILocation(line: 3416, column: 27, scope: !9824)
!9827 = !DILocation(line: 0, scope: !9821)
!9828 = !DILocation(line: 3420, column: 43, scope: !9829)
!9829 = distinct !DILexicalBlock(scope: !9743, file: !3, line: 3420, column: 16)
!9830 = !DILocation(line: 3420, column: 53, scope: !9829)
!9831 = !DILocation(line: 3420, column: 16, scope: !9829)
!9832 = !DILocation(line: 3421, column: 29, scope: !9829)
!9833 = !DILocation(line: 3422, column: 9, scope: !9829)
!9834 = !DILocation(line: 3422, column: 39, scope: !9829)
!9835 = !DILocation(line: 3422, column: 49, scope: !9829)
!9836 = !DILocation(line: 3422, column: 12, scope: !9829)
!9837 = !DILocation(line: 3423, column: 25, scope: !9829)
!9838 = !DILocation(line: 3420, column: 16, scope: !9743)
!9839 = !DILocation(line: 3424, column: 9, scope: !9829)
!9840 = !DILocation(line: 3424, column: 2, scope: !9829)
!9841 = !DILocation(line: 3426, column: 7, scope: !9744)
!9842 = !DILocation(line: 3437, column: 41, scope: !9748)
!9843 = !DILocation(line: 3437, column: 51, scope: !9748)
!9844 = !DILocation(line: 3437, column: 14, scope: !9748)
!9845 = !DILocation(line: 0, scope: !9748)
!9846 = !DILocation(line: 3438, column: 41, scope: !9748)
!9847 = !DILocation(line: 3438, column: 51, scope: !9748)
!9848 = !DILocation(line: 3438, column: 14, scope: !9748)
!9849 = !DILocation(line: 3439, column: 23, scope: !9850)
!9850 = distinct !DILexicalBlock(scope: !9748, file: !3, line: 3439, column: 11)
!9851 = !DILocation(line: 3439, column: 47, scope: !9850)
!9852 = !DILocation(line: 3439, column: 60, scope: !9850)
!9853 = !DILocation(line: 3439, column: 52, scope: !9850)
!9854 = !DILocation(line: 3440, column: 9, scope: !9850)
!9855 = !DILocation(line: 3440, column: 2, scope: !9850)
!9856 = !DILocation(line: 3444, column: 43, scope: !9857)
!9857 = distinct !DILexicalBlock(scope: !9850, file: !3, line: 3444, column: 16)
!9858 = !DILocation(line: 3444, column: 53, scope: !9857)
!9859 = !DILocation(line: 3444, column: 16, scope: !9857)
!9860 = !DILocation(line: 3445, column: 29, scope: !9857)
!9861 = !DILocation(line: 3446, column: 9, scope: !9857)
!9862 = !DILocation(line: 3446, column: 39, scope: !9857)
!9863 = !DILocation(line: 3446, column: 49, scope: !9857)
!9864 = !DILocation(line: 3446, column: 12, scope: !9857)
!9865 = !DILocation(line: 3447, column: 25, scope: !9857)
!9866 = !DILocation(line: 3448, column: 9, scope: !9857)
!9867 = !DILocation(line: 3448, column: 39, scope: !9857)
!9868 = !DILocation(line: 3448, column: 49, scope: !9857)
!9869 = !DILocation(line: 3448, column: 12, scope: !9857)
!9870 = !DILocation(line: 3449, column: 25, scope: !9857)
!9871 = !DILocation(line: 3450, column: 9, scope: !9857)
!9872 = !DILocation(line: 3450, column: 39, scope: !9857)
!9873 = !DILocation(line: 3450, column: 49, scope: !9857)
!9874 = !DILocation(line: 3450, column: 12, scope: !9857)
!9875 = !DILocation(line: 3451, column: 25, scope: !9857)
!9876 = !DILocation(line: 3452, column: 9, scope: !9857)
!9877 = !DILocation(line: 3444, column: 16, scope: !9850)
!9878 = !DILocation(line: 3463, column: 40, scope: !9752)
!9879 = !DILocation(line: 3463, column: 50, scope: !9752)
!9880 = !DILocation(line: 3463, column: 13, scope: !9752)
!9881 = !DILocation(line: 0, scope: !9752)
!9882 = !DILocation(line: 3464, column: 17, scope: !9883)
!9883 = distinct !DILexicalBlock(scope: !9752, file: !3, line: 3464, column: 11)
!9884 = !DILocation(line: 3464, column: 35, scope: !9883)
!9885 = !DILocation(line: 3464, column: 28, scope: !9883)
!9886 = !DILocation(line: 3465, column: 13, scope: !9883)
!9887 = !DILocation(line: 3465, column: 24, scope: !9883)
!9888 = !DILocation(line: 3465, column: 38, scope: !9883)
!9889 = !DILocation(line: 3467, column: 8, scope: !9890)
!9890 = distinct !DILexicalBlock(scope: !9891, file: !3, line: 3467, column: 8)
!9891 = distinct !DILexicalBlock(scope: !9883, file: !3, line: 3466, column: 2)
!9892 = !DILocation(line: 3468, column: 8, scope: !9890)
!9893 = !DILocation(line: 3468, column: 11, scope: !9890)
!9894 = !DILocation(line: 3467, column: 8, scope: !9891)
!9895 = !DILocation(line: 3469, column: 25, scope: !9890)
!9896 = !DILocation(line: 3469, column: 6, scope: !9890)
!9897 = !DILocation(line: 3470, column: 11, scope: !9891)
!9898 = !DILocation(line: 3470, column: 4, scope: !9891)
!9899 = !DILocation(line: 3474, column: 40, scope: !9752)
!9900 = !DILocation(line: 3474, column: 50, scope: !9752)
!9901 = !DILocation(line: 3474, column: 13, scope: !9752)
!9902 = !DILocation(line: 3475, column: 28, scope: !9903)
!9903 = distinct !DILexicalBlock(scope: !9752, file: !3, line: 3475, column: 11)
!9904 = !DILocation(line: 3475, column: 41, scope: !9903)
!9905 = !DILocation(line: 3476, column: 24, scope: !9903)
!9906 = !DILocation(line: 3476, column: 31, scope: !9903)
!9907 = !DILocation(line: 3475, column: 11, scope: !9752)
!9908 = !DILocation(line: 3478, column: 8, scope: !9909)
!9909 = distinct !DILexicalBlock(scope: !9910, file: !3, line: 3478, column: 8)
!9910 = distinct !DILexicalBlock(scope: !9903, file: !3, line: 3477, column: 2)
!9911 = !DILocation(line: 3479, column: 8, scope: !9909)
!9912 = !DILocation(line: 3479, column: 11, scope: !9909)
!9913 = !DILocation(line: 3478, column: 8, scope: !9910)
!9914 = !DILocation(line: 3480, column: 25, scope: !9909)
!9915 = !DILocation(line: 3480, column: 6, scope: !9909)
!9916 = !DILocation(line: 3481, column: 11, scope: !9910)
!9917 = !DILocation(line: 3481, column: 4, scope: !9910)
!9918 = !DILocation(line: 3488, column: 3, scope: !9725)
!9919 = !DILocation(line: 3490, column: 5, scope: !9725)
!9920 = !DILocation(line: 3492, column: 1, scope: !9725)
!9921 = distinct !DISubprogram(name: "compare_range_with_value", scope: !3, file: !3, line: 3504, type: !9922, scopeLine: 3506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9924)
!9922 = !DISubroutineType(types: !9923)
!9923 = !{!693, !134, !687, !693, !678}
!9924 = !{!9925, !9926, !9927, !9928, !9929, !9934, !9938}
!9925 = !DILocalVariable(name: "comp", arg: 1, scope: !9921, file: !3, line: 3504, type: !134)
!9926 = !DILocalVariable(name: "vr", arg: 2, scope: !9921, file: !3, line: 3504, type: !687)
!9927 = !DILocalVariable(name: "val", arg: 3, scope: !9921, file: !3, line: 3504, type: !693)
!9928 = !DILocalVariable(name: "strict_overflow_p", arg: 4, scope: !9921, file: !3, line: 3505, type: !678)
!9929 = !DILocalVariable(name: "cmp", scope: !9930, file: !3, line: 3537, type: !680)
!9930 = distinct !DILexicalBlock(scope: !9931, file: !3, line: 3536, column: 2)
!9931 = distinct !DILexicalBlock(scope: !9932, file: !3, line: 3535, column: 11)
!9932 = distinct !DILexicalBlock(scope: !9933, file: !3, line: 3532, column: 5)
!9933 = distinct !DILexicalBlock(scope: !9921, file: !3, line: 3531, column: 7)
!9934 = !DILocalVariable(name: "tst", scope: !9935, file: !3, line: 3567, type: !680)
!9935 = distinct !DILexicalBlock(scope: !9936, file: !3, line: 3566, column: 5)
!9936 = distinct !DILexicalBlock(scope: !9937, file: !3, line: 3565, column: 12)
!9937 = distinct !DILexicalBlock(scope: !9933, file: !3, line: 3549, column: 12)
!9938 = !DILocalVariable(name: "tst", scope: !9939, file: !3, line: 3594, type: !680)
!9939 = distinct !DILexicalBlock(scope: !9940, file: !3, line: 3593, column: 5)
!9940 = distinct !DILexicalBlock(scope: !9936, file: !3, line: 3592, column: 12)
!9941 = !DILocation(line: 0, scope: !9921)
!9942 = !DILocation(line: 3507, column: 11, scope: !9943)
!9943 = distinct !DILexicalBlock(scope: !9921, file: !3, line: 3507, column: 7)
!9944 = !DILocation(line: 3507, column: 16, scope: !9943)
!9945 = !DILocation(line: 3507, column: 30, scope: !9943)
!9946 = !DILocation(line: 3507, column: 42, scope: !9943)
!9947 = !DILocation(line: 3507, column: 7, scope: !9921)
!9948 = !DILocation(line: 3511, column: 16, scope: !9949)
!9949 = distinct !DILexicalBlock(scope: !9921, file: !3, line: 3511, column: 7)
!9950 = !DILocation(line: 3511, column: 7, scope: !9921)
!9951 = !DILocation(line: 3516, column: 4, scope: !9952)
!9952 = distinct !DILexicalBlock(scope: !9953, file: !3, line: 3515, column: 11)
!9953 = distinct !DILexicalBlock(scope: !9949, file: !3, line: 3512, column: 5)
!9954 = !DILocation(line: 3522, column: 11, scope: !9955)
!9955 = distinct !DILexicalBlock(scope: !9953, file: !3, line: 3522, column: 11)
!9956 = !DILocation(line: 3522, column: 40, scope: !9955)
!9957 = !DILocation(line: 3522, column: 11, scope: !9953)
!9958 = !DILocation(line: 3523, column: 15, scope: !9955)
!9959 = !DILocation(line: 3523, column: 9, scope: !9955)
!9960 = !DILocation(line: 3528, column: 8, scope: !9961)
!9961 = distinct !DILexicalBlock(scope: !9921, file: !3, line: 3528, column: 7)
!9962 = !DILocation(line: 3528, column: 7, scope: !9921)
!9963 = !DILocation(line: 3531, column: 7, scope: !9921)
!9964 = !DILocation(line: 3535, column: 37, scope: !9931)
!9965 = !DILocation(line: 3535, column: 46, scope: !9931)
!9966 = !DILocation(line: 3535, column: 11, scope: !9931)
!9967 = !DILocation(line: 3535, column: 70, scope: !9931)
!9968 = !DILocation(line: 0, scope: !9931)
!9969 = !DILocation(line: 3535, column: 11, scope: !9932)
!9970 = !DILocation(line: 3537, column: 14, scope: !9930)
!9971 = !DILocation(line: 0, scope: !9930)
!9972 = !DILocation(line: 3538, column: 8, scope: !9930)
!9973 = !DILocation(line: 3539, column: 13, scope: !9974)
!9974 = distinct !DILexicalBlock(scope: !9930, file: !3, line: 3538, column: 8)
!9975 = !DILocation(line: 3539, column: 6, scope: !9974)
!9976 = !DILocation(line: 3541, column: 13, scope: !9977)
!9977 = distinct !DILexicalBlock(scope: !9974, file: !3, line: 3540, column: 13)
!9978 = !DILocation(line: 3541, column: 6, scope: !9977)
!9979 = !DILocation(line: 3543, column: 16, scope: !9980)
!9980 = distinct !DILexicalBlock(scope: !9931, file: !3, line: 3543, column: 16)
!9981 = !DILocation(line: 3543, column: 71, scope: !9980)
!9982 = !DILocation(line: 3544, column: 9, scope: !9980)
!9983 = !DILocation(line: 3544, column: 38, scope: !9980)
!9984 = !DILocation(line: 3544, column: 12, scope: !9980)
!9985 = !DILocation(line: 3544, column: 67, scope: !9980)
!9986 = !DILocation(line: 3543, column: 16, scope: !9931)
!9987 = !DILocation(line: 3545, column: 9, scope: !9980)
!9988 = !DILocation(line: 3545, column: 2, scope: !9980)
!9989 = !DILocation(line: 3547, column: 7, scope: !9932)
!9990 = !DILocation(line: 3552, column: 37, scope: !9991)
!9991 = distinct !DILexicalBlock(scope: !9992, file: !3, line: 3552, column: 11)
!9992 = distinct !DILexicalBlock(scope: !9937, file: !3, line: 3550, column: 5)
!9993 = !DILocation(line: 3552, column: 11, scope: !9991)
!9994 = !DILocation(line: 3552, column: 66, scope: !9991)
!9995 = !DILocation(line: 3553, column: 4, scope: !9991)
!9996 = !DILocation(line: 3553, column: 33, scope: !9991)
!9997 = !DILocation(line: 3553, column: 7, scope: !9991)
!9998 = !DILocation(line: 3553, column: 62, scope: !9991)
!9999 = !DILocation(line: 3552, column: 11, scope: !9992)
!10000 = !DILocation(line: 3554, column: 9, scope: !9991)
!10001 = !DILocation(line: 3554, column: 2, scope: !9991)
!10002 = !DILocation(line: 3558, column: 37, scope: !10003)
!10003 = distinct !DILexicalBlock(scope: !9992, file: !3, line: 3558, column: 11)
!10004 = !DILocation(line: 3558, column: 46, scope: !10003)
!10005 = !DILocation(line: 3558, column: 11, scope: !10003)
!10006 = !DILocation(line: 3558, column: 70, scope: !10003)
!10007 = !DILocation(line: 3559, column: 4, scope: !10003)
!10008 = !DILocation(line: 3559, column: 33, scope: !10003)
!10009 = !DILocation(line: 3559, column: 7, scope: !10003)
!10010 = !DILocation(line: 3559, column: 62, scope: !10003)
!10011 = !DILocation(line: 3560, column: 9, scope: !10003)
!10012 = !DILocation(line: 3558, column: 11, scope: !9992)
!10013 = !DILocation(line: 3570, column: 39, scope: !9935)
!10014 = !DILocation(line: 3570, column: 13, scope: !9935)
!10015 = !DILocation(line: 0, scope: !9935)
!10016 = !DILocation(line: 3571, column: 17, scope: !10017)
!10017 = distinct !DILexicalBlock(scope: !9935, file: !3, line: 3571, column: 11)
!10018 = !DILocation(line: 3571, column: 35, scope: !10017)
!10019 = !DILocation(line: 3571, column: 28, scope: !10017)
!10020 = !DILocation(line: 3572, column: 13, scope: !10017)
!10021 = !DILocation(line: 3572, column: 24, scope: !10017)
!10022 = !DILocation(line: 3572, column: 38, scope: !10017)
!10023 = !DILocation(line: 3574, column: 8, scope: !10024)
!10024 = distinct !DILexicalBlock(scope: !10025, file: !3, line: 3574, column: 8)
!10025 = distinct !DILexicalBlock(scope: !10017, file: !3, line: 3573, column: 2)
!10026 = !DILocation(line: 3574, column: 8, scope: !10025)
!10027 = !DILocation(line: 3575, column: 25, scope: !10024)
!10028 = !DILocation(line: 3575, column: 6, scope: !10024)
!10029 = !DILocation(line: 3576, column: 11, scope: !10025)
!10030 = !DILocation(line: 3576, column: 4, scope: !10025)
!10031 = !DILocation(line: 3580, column: 39, scope: !9935)
!10032 = !DILocation(line: 3580, column: 13, scope: !9935)
!10033 = !DILocation(line: 3581, column: 28, scope: !10034)
!10034 = distinct !DILexicalBlock(scope: !9935, file: !3, line: 3581, column: 11)
!10035 = !DILocation(line: 3581, column: 41, scope: !10034)
!10036 = !DILocation(line: 3582, column: 24, scope: !10034)
!10037 = !DILocation(line: 3582, column: 31, scope: !10034)
!10038 = !DILocation(line: 3581, column: 11, scope: !9935)
!10039 = !DILocation(line: 3584, column: 8, scope: !10040)
!10040 = distinct !DILexicalBlock(scope: !10041, file: !3, line: 3584, column: 8)
!10041 = distinct !DILexicalBlock(scope: !10034, file: !3, line: 3583, column: 2)
!10042 = !DILocation(line: 3584, column: 8, scope: !10041)
!10043 = !DILocation(line: 3585, column: 25, scope: !10040)
!10044 = !DILocation(line: 3585, column: 6, scope: !10040)
!10045 = !DILocation(line: 3586, column: 11, scope: !10041)
!10046 = !DILocation(line: 3586, column: 4, scope: !10041)
!10047 = !DILocation(line: 3597, column: 39, scope: !9939)
!10048 = !DILocation(line: 3597, column: 13, scope: !9939)
!10049 = !DILocation(line: 0, scope: !9939)
!10050 = !DILocation(line: 3598, column: 17, scope: !10051)
!10051 = distinct !DILexicalBlock(scope: !9939, file: !3, line: 3598, column: 11)
!10052 = !DILocation(line: 3598, column: 35, scope: !10051)
!10053 = !DILocation(line: 3598, column: 28, scope: !10051)
!10054 = !DILocation(line: 3599, column: 13, scope: !10051)
!10055 = !DILocation(line: 3599, column: 37, scope: !10051)
!10056 = !DILocation(line: 3599, column: 24, scope: !10051)
!10057 = !DILocation(line: 3601, column: 8, scope: !10058)
!10058 = distinct !DILexicalBlock(scope: !10059, file: !3, line: 3601, column: 8)
!10059 = distinct !DILexicalBlock(scope: !10051, file: !3, line: 3600, column: 2)
!10060 = !DILocation(line: 3601, column: 8, scope: !10059)
!10061 = !DILocation(line: 3602, column: 25, scope: !10058)
!10062 = !DILocation(line: 3602, column: 6, scope: !10058)
!10063 = !DILocation(line: 3603, column: 11, scope: !10059)
!10064 = !DILocation(line: 3603, column: 4, scope: !10059)
!10065 = !DILocation(line: 3607, column: 39, scope: !9939)
!10066 = !DILocation(line: 3607, column: 13, scope: !9939)
!10067 = !DILocation(line: 3608, column: 28, scope: !10068)
!10068 = distinct !DILexicalBlock(scope: !9939, file: !3, line: 3608, column: 11)
!10069 = !DILocation(line: 3608, column: 42, scope: !10068)
!10070 = !DILocation(line: 3609, column: 24, scope: !10068)
!10071 = !DILocation(line: 3609, column: 31, scope: !10068)
!10072 = !DILocation(line: 3608, column: 11, scope: !9939)
!10073 = !DILocation(line: 3611, column: 8, scope: !10074)
!10074 = distinct !DILexicalBlock(scope: !10075, file: !3, line: 3611, column: 8)
!10075 = distinct !DILexicalBlock(scope: !10068, file: !3, line: 3610, column: 2)
!10076 = !DILocation(line: 3611, column: 8, scope: !10075)
!10077 = !DILocation(line: 3612, column: 25, scope: !10074)
!10078 = !DILocation(line: 3612, column: 6, scope: !10074)
!10079 = !DILocation(line: 3613, column: 11, scope: !10075)
!10080 = !DILocation(line: 3613, column: 4, scope: !10075)
!10081 = !DILocation(line: 3620, column: 3, scope: !9921)
!10082 = !DILocation(line: 3622, column: 5, scope: !9921)
!10083 = !DILocation(line: 3624, column: 1, scope: !9921)
!10084 = distinct !DISubprogram(name: "usable_range_p", scope: !3, file: !3, line: 794, type: !10085, scopeLine: 795, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10087)
!10085 = !DISubroutineType(types: !10086)
!10086 = !{!679, !687, !678}
!10087 = !{!10088, !10089}
!10088 = !DILocalVariable(name: "vr", arg: 1, scope: !10084, file: !3, line: 794, type: !687)
!10089 = !DILocalVariable(name: "strict_overflow_p", arg: 2, scope: !10084, file: !3, line: 794, type: !678)
!10090 = !DILocation(line: 0, scope: !10084)
!10091 = !DILocation(line: 796, column: 3, scope: !10084)
!10092 = !DILocation(line: 797, column: 33, scope: !10093)
!10093 = distinct !DILexicalBlock(scope: !10084, file: !3, line: 797, column: 7)
!10094 = !DILocation(line: 797, column: 7, scope: !10093)
!10095 = !DILocation(line: 797, column: 7, scope: !10084)
!10096 = !DILocation(line: 799, column: 26, scope: !10097)
!10097 = distinct !DILexicalBlock(scope: !10093, file: !3, line: 798, column: 5)
!10098 = !DILocation(line: 800, column: 12, scope: !10099)
!10099 = distinct !DILexicalBlock(scope: !10097, file: !3, line: 800, column: 11)
!10100 = !DILocation(line: 803, column: 33, scope: !10101)
!10101 = distinct !DILexicalBlock(scope: !10084, file: !3, line: 803, column: 7)
!10102 = !DILocation(line: 803, column: 7, scope: !10101)
!10103 = !DILocation(line: 803, column: 7, scope: !10084)
!10104 = !DILocation(line: 805, column: 26, scope: !10105)
!10105 = distinct !DILexicalBlock(scope: !10101, file: !3, line: 804, column: 5)
!10106 = !DILocation(line: 806, column: 12, scope: !10107)
!10107 = distinct !DILexicalBlock(scope: !10105, file: !3, line: 806, column: 11)
!10108 = !DILocation(line: 809, column: 3, scope: !10084)
!10109 = !DILocation(line: 810, column: 1, scope: !10084)
!10110 = distinct !DISubprogram(name: "get_vr_for_comparison", scope: !3, file: !3, line: 5417, type: !10111, scopeLine: 5418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10113)
!10111 = !DISubroutineType(types: !10112)
!10112 = !{!688, !680}
!10113 = !{!10114, !10115}
!10114 = !DILocalVariable(name: "i", arg: 1, scope: !10110, file: !3, line: 5417, type: !680)
!10115 = !DILocalVariable(name: "vr", scope: !10110, file: !3, line: 5419, type: !688)
!10116 = !DILocation(line: 0, scope: !10110)
!10117 = !DILocation(line: 5419, column: 17, scope: !10110)
!10118 = !DILocation(line: 5419, column: 24, scope: !10110)
!10119 = !DILocation(line: 5419, column: 22, scope: !10110)
!10120 = !DILocation(line: 5424, column: 10, scope: !10121)
!10121 = distinct !DILexicalBlock(scope: !10110, file: !3, line: 5424, column: 7)
!10122 = !DILocation(line: 5424, column: 15, scope: !10121)
!10123 = !DILocation(line: 5424, column: 29, scope: !10121)
!10124 = !DILocation(line: 5424, column: 40, scope: !10121)
!10125 = !DILocation(line: 5424, column: 7, scope: !10110)
!10126 = !DILocation(line: 5426, column: 15, scope: !10127)
!10127 = distinct !DILexicalBlock(scope: !10121, file: !3, line: 5425, column: 5)
!10128 = !DILocation(line: 5427, column: 16, scope: !10127)
!10129 = !DILocation(line: 5427, column: 10, scope: !10127)
!10130 = !DILocation(line: 5427, column: 14, scope: !10127)
!10131 = !DILocation(line: 5428, column: 16, scope: !10127)
!10132 = !DILocation(line: 5428, column: 10, scope: !10127)
!10133 = !DILocation(line: 5428, column: 14, scope: !10127)
!10134 = !DILocation(line: 5429, column: 5, scope: !10127)
!10135 = !DILocation(line: 5431, column: 3, scope: !10110)
!10136 = distinct !DISubprogram(name: "vrp_operand_equal_p", scope: !3, file: !3, line: 675, type: !10137, scopeLine: 676, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10139)
!10137 = !DISubroutineType(types: !10138)
!10138 = !{!679, !2080, !2080}
!10139 = !{!10140, !10141}
!10140 = !DILocalVariable(name: "val1", arg: 1, scope: !10136, file: !3, line: 675, type: !2080)
!10141 = !DILocalVariable(name: "val2", arg: 2, scope: !10136, file: !3, line: 675, type: !2080)
!10142 = !DILocation(line: 0, scope: !10136)
!10143 = !DILocation(line: 677, column: 12, scope: !10144)
!10144 = distinct !DILexicalBlock(scope: !10136, file: !3, line: 677, column: 7)
!10145 = !DILocation(line: 677, column: 7, scope: !10136)
!10146 = !DILocation(line: 679, column: 8, scope: !10147)
!10147 = distinct !DILexicalBlock(scope: !10136, file: !3, line: 679, column: 7)
!10148 = !DILocation(line: 679, column: 17, scope: !10147)
!10149 = !DILocation(line: 679, column: 13, scope: !10147)
!10150 = !DILocation(line: 679, column: 26, scope: !10147)
!10151 = !DILocation(line: 679, column: 7, scope: !10136)
!10152 = !DILocation(line: 681, column: 7, scope: !10153)
!10153 = distinct !DILexicalBlock(scope: !10136, file: !3, line: 681, column: 7)
!10154 = !DILocation(line: 681, column: 7, scope: !10136)
!10155 = !DILocation(line: 682, column: 12, scope: !10153)
!10156 = !DILocation(line: 682, column: 5, scope: !10153)
!10157 = !DILocation(line: 684, column: 1, scope: !10136)
!10158 = distinct !DISubprogram(name: "vrp_bitmap_equal_p", scope: !3, file: !3, line: 689, type: !10159, scopeLine: 690, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10161)
!10159 = !DISubroutineType(types: !10160)
!10160 = !{!679, !2899, !2899}
!10161 = !{!10162, !10163}
!10162 = !DILocalVariable(name: "b1", arg: 1, scope: !10158, file: !3, line: 689, type: !2899)
!10163 = !DILocalVariable(name: "b2", arg: 2, scope: !10158, file: !3, line: 689, type: !2899)
!10164 = !DILocation(line: 0, scope: !10158)
!10165 = !DILocation(line: 691, column: 14, scope: !10158)
!10166 = !DILocation(line: 692, column: 4, scope: !10158)
!10167 = !DILocation(line: 692, column: 8, scope: !10158)
!10168 = !DILocation(line: 692, column: 14, scope: !10158)
!10169 = !DILocation(line: 692, column: 11, scope: !10158)
!10170 = !DILocation(line: 693, column: 11, scope: !10158)
!10171 = !DILocation(line: 693, column: 8, scope: !10158)
!10172 = !DILocation(line: 691, column: 3, scope: !10158)
!10173 = distinct !DISubprogram(name: "find_case_label_range", scope: !3, file: !3, line: 5946, type: !10174, scopeLine: 5948, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10176)
!10174 = !DISubroutineType(types: !10175)
!10175 = !{!679, !1017, !693, !693, !2349, !2349}
!10176 = !{!10177, !10178, !10179, !10180, !10181, !10182, !10183, !10184, !10185, !10186, !10189, !10190, !10191}
!10177 = !DILocalVariable(name: "stmt", arg: 1, scope: !10173, file: !3, line: 5946, type: !1017)
!10178 = !DILocalVariable(name: "min", arg: 2, scope: !10173, file: !3, line: 5946, type: !693)
!10179 = !DILocalVariable(name: "max", arg: 3, scope: !10173, file: !3, line: 5946, type: !693)
!10180 = !DILocalVariable(name: "min_idx", arg: 4, scope: !10173, file: !3, line: 5946, type: !2349)
!10181 = !DILocalVariable(name: "max_idx", arg: 5, scope: !10173, file: !3, line: 5947, type: !2349)
!10182 = !DILocalVariable(name: "i", scope: !10173, file: !3, line: 5949, type: !1162)
!10183 = !DILocalVariable(name: "j", scope: !10173, file: !3, line: 5949, type: !1162)
!10184 = !DILocalVariable(name: "min_take_default", scope: !10173, file: !3, line: 5950, type: !679)
!10185 = !DILocalVariable(name: "max_take_default", scope: !10173, file: !3, line: 5951, type: !679)
!10186 = !DILocalVariable(name: "take_default", scope: !10187, file: !3, line: 5965, type: !679)
!10187 = distinct !DILexicalBlock(scope: !10188, file: !3, line: 5964, column: 5)
!10188 = distinct !DILexicalBlock(scope: !10173, file: !3, line: 5953, column: 7)
!10189 = !DILocalVariable(name: "low", scope: !10187, file: !3, line: 5966, type: !693)
!10190 = !DILocalVariable(name: "high", scope: !10187, file: !3, line: 5966, type: !693)
!10191 = !DILocalVariable(name: "k", scope: !10187, file: !3, line: 5967, type: !1162)
!10192 = !DILocation(line: 0, scope: !10173)
!10193 = !DILocation(line: 5949, column: 3, scope: !10173)
!10194 = !DILocation(line: 5950, column: 28, scope: !10173)
!10195 = !DILocation(line: 5951, column: 57, scope: !10173)
!10196 = !DILocation(line: 5951, column: 28, scope: !10173)
!10197 = !DILocation(line: 5951, column: 27, scope: !10173)
!10198 = !DILocation(line: 5953, column: 7, scope: !10188)
!10199 = !DILocation(line: 5953, column: 12, scope: !10188)
!10200 = !DILocation(line: 5953, column: 9, scope: !10188)
!10201 = !DILocation(line: 5954, column: 7, scope: !10188)
!10202 = !DILocation(line: 5961, column: 7, scope: !10203)
!10203 = distinct !DILexicalBlock(scope: !10188, file: !3, line: 5956, column: 5)
!10204 = !DILocation(line: 5950, column: 27, scope: !10173)
!10205 = !DILocation(line: 5965, column: 44, scope: !10187)
!10206 = !DILocation(line: 0, scope: !10187)
!10207 = !DILocation(line: 5969, column: 11, scope: !10187)
!10208 = !DILocation(line: 5970, column: 3, scope: !10209)
!10209 = distinct !DILexicalBlock(scope: !10187, file: !3, line: 5969, column: 11)
!10210 = !DILocation(line: 5970, column: 2, scope: !10209)
!10211 = !DILocation(line: 5974, column: 14, scope: !10187)
!10212 = !DILocation(line: 5975, column: 11, scope: !10213)
!10213 = distinct !DILexicalBlock(scope: !10187, file: !3, line: 5975, column: 11)
!10214 = !DILocation(line: 5975, column: 11, scope: !10187)
!10215 = !DILocation(line: 5976, column: 9, scope: !10213)
!10216 = !DILocation(line: 5976, column: 2, scope: !10213)
!10217 = !DILocation(line: 5977, column: 16, scope: !10218)
!10218 = distinct !DILexicalBlock(scope: !10187, file: !3, line: 5977, column: 7)
!10219 = !DILocation(line: 5977, column: 12, scope: !10218)
!10220 = !DILocation(line: 0, scope: !10218)
!10221 = !DILocation(line: 5977, column: 28, scope: !10222)
!10222 = distinct !DILexicalBlock(scope: !10218, file: !3, line: 5977, column: 7)
!10223 = !DILocation(line: 5977, column: 25, scope: !10222)
!10224 = !DILocation(line: 5977, column: 7, scope: !10218)
!10225 = !DILocation(line: 5979, column: 10, scope: !10226)
!10226 = distinct !DILexicalBlock(scope: !10222, file: !3, line: 5978, column: 2)
!10227 = !DILocation(line: 5980, column: 23, scope: !10228)
!10228 = distinct !DILexicalBlock(scope: !10226, file: !3, line: 5980, column: 8)
!10229 = !DILocation(line: 5980, column: 9, scope: !10228)
!10230 = !DILocation(line: 5980, column: 8, scope: !10226)
!10231 = !DILocation(line: 5991, column: 18, scope: !10187)
!10232 = !DILocation(line: 5986, column: 8, scope: !10233)
!10233 = distinct !DILexicalBlock(scope: !10226, file: !3, line: 5986, column: 8)
!10234 = !DILocation(line: 5986, column: 8, scope: !10226)
!10235 = !DILocation(line: 5987, column: 13, scope: !10233)
!10236 = !DILocation(line: 5987, column: 6, scope: !10233)
!10237 = !DILocation(line: 0, scope: !10226)
!10238 = !DILocation(line: 5977, column: 7, scope: !10222)
!10239 = distinct !{!10239, !10224, !10240}
!10240 = !DILocation(line: 5988, column: 2, scope: !10218)
!10241 = !DILocation(line: 5990, column: 18, scope: !10187)
!10242 = !DILocation(line: 0, scope: !10188)
!10243 = !DILocation(line: 5994, column: 1, scope: !10173)
!10244 = distinct !DISubprogram(name: "find_case_label_index", scope: !3, file: !3, line: 5896, type: !10245, scopeLine: 5897, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10247)
!10245 = !DISubroutineType(types: !10246)
!10246 = !{!679, !1017, !1162, !693, !2349}
!10247 = !{!10248, !10249, !10250, !10251, !10252, !10253, !10254, !10255, !10259, !10260}
!10248 = !DILocalVariable(name: "stmt", arg: 1, scope: !10244, file: !3, line: 5896, type: !1017)
!10249 = !DILocalVariable(name: "start_idx", arg: 2, scope: !10244, file: !3, line: 5896, type: !1162)
!10250 = !DILocalVariable(name: "val", arg: 3, scope: !10244, file: !3, line: 5896, type: !693)
!10251 = !DILocalVariable(name: "idx", arg: 4, scope: !10244, file: !3, line: 5896, type: !2349)
!10252 = !DILocalVariable(name: "n", scope: !10244, file: !3, line: 5898, type: !1162)
!10253 = !DILocalVariable(name: "low", scope: !10244, file: !3, line: 5899, type: !1162)
!10254 = !DILocalVariable(name: "high", scope: !10244, file: !3, line: 5899, type: !1162)
!10255 = !DILocalVariable(name: "t", scope: !10256, file: !3, line: 5906, type: !693)
!10256 = distinct !DILexicalBlock(scope: !10257, file: !3, line: 5905, column: 5)
!10257 = distinct !DILexicalBlock(scope: !10258, file: !3, line: 5904, column: 3)
!10258 = distinct !DILexicalBlock(scope: !10244, file: !3, line: 5904, column: 3)
!10259 = !DILocalVariable(name: "cmp", scope: !10256, file: !3, line: 5907, type: !680)
!10260 = !DILocalVariable(name: "i", scope: !10256, file: !3, line: 5909, type: !1162)
!10261 = !DILocation(line: 0, scope: !10244)
!10262 = !DILocation(line: 5898, column: 14, scope: !10244)
!10263 = !DILocation(line: 5904, column: 8, scope: !10258)
!10264 = !DILocation(line: 5904, column: 12, scope: !10258)
!10265 = !DILocation(line: 5904, column: 30, scope: !10258)
!10266 = !DILocation(line: 5904, column: 40, scope: !10257)
!10267 = !DILocation(line: 5904, column: 3, scope: !10258)
!10268 = !DILocation(line: 5909, column: 24, scope: !10256)
!10269 = !DILocation(line: 5909, column: 31, scope: !10256)
!10270 = !DILocation(line: 0, scope: !10256)
!10271 = !DILocation(line: 5910, column: 38, scope: !10256)
!10272 = !DILocation(line: 5910, column: 11, scope: !10256)
!10273 = !DILocation(line: 5913, column: 35, scope: !10256)
!10274 = !DILocation(line: 5913, column: 13, scope: !10256)
!10275 = !DILocation(line: 5915, column: 15, scope: !10276)
!10276 = distinct !DILexicalBlock(scope: !10256, file: !3, line: 5915, column: 11)
!10277 = !DILocation(line: 5915, column: 11, scope: !10256)
!10278 = !DILocation(line: 5918, column: 9, scope: !10279)
!10279 = distinct !DILexicalBlock(scope: !10276, file: !3, line: 5916, column: 2)
!10280 = !DILocation(line: 5919, column: 4, scope: !10279)
!10281 = !DILocation(line: 5921, column: 20, scope: !10282)
!10282 = distinct !DILexicalBlock(scope: !10276, file: !3, line: 5921, column: 16)
!10283 = !DILocation(line: 5921, column: 16, scope: !10276)
!10284 = !DILocation(line: 5925, column: 12, scope: !10285)
!10285 = distinct !DILexicalBlock(scope: !10282, file: !3, line: 5924, column: 2)
!10286 = !DILocation(line: 5926, column: 8, scope: !10287)
!10287 = distinct !DILexicalBlock(scope: !10285, file: !3, line: 5926, column: 8)
!10288 = !DILocation(line: 5926, column: 22, scope: !10287)
!10289 = !DILocation(line: 5927, column: 8, scope: !10287)
!10290 = !DILocation(line: 5927, column: 11, scope: !10287)
!10291 = !DILocation(line: 5927, column: 53, scope: !10287)
!10292 = !DILocation(line: 5926, column: 8, scope: !10285)
!10293 = !DILocation(line: 5929, column: 13, scope: !10294)
!10294 = distinct !DILexicalBlock(scope: !10287, file: !3, line: 5928, column: 6)
!10295 = !DILocation(line: 5930, column: 8, scope: !10294)
!10296 = !DILocation(line: 0, scope: !10258)
!10297 = distinct !{!10297, !10267, !10298}
!10298 = !DILocation(line: 5933, column: 5, scope: !10258)
!10299 = !DILocation(line: 5935, column: 8, scope: !10244)
!10300 = !DILocation(line: 5936, column: 3, scope: !10244)
!10301 = !DILocation(line: 5937, column: 1, scope: !10244)
!10302 = distinct !DISubprogram(name: "gimple_phi_arg_edge", scope: !4804, file: !4804, line: 467, type: !10303, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10305)
!10303 = !DISubroutineType(types: !10304)
!10304 = !{!997, !1017, !1162}
!10305 = !{!10306, !10307}
!10306 = !DILocalVariable(name: "gs", arg: 1, scope: !10302, file: !4804, line: 467, type: !1017)
!10307 = !DILocalVariable(name: "i", arg: 2, scope: !10302, file: !4804, line: 467, type: !1162)
!10308 = !DILocation(line: 0, scope: !10302)
!10309 = !DILocation(line: 469, column: 10, scope: !10302)
!10310 = !DILocation(line: 469, column: 3, scope: !10302)
!10311 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !4804, file: !4804, line: 617, type: !10312, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10314)
!10312 = !DISubroutineType(types: !10313)
!10313 = !{!1232, !1017}
!10314 = !{!10315, !10316}
!10315 = !DILocalVariable(name: "stmt", arg: 1, scope: !10311, file: !4804, line: 617, type: !1017)
!10316 = !DILocalVariable(name: "bb", scope: !10311, file: !4804, line: 619, type: !1468)
!10317 = !DILocation(line: 0, scope: !10311)
!10318 = !DILocation(line: 619, column: 20, scope: !10311)
!10319 = !DILocation(line: 620, column: 8, scope: !10320)
!10320 = distinct !DILexicalBlock(scope: !10311, file: !4804, line: 620, column: 7)
!10321 = !DILocation(line: 620, column: 7, scope: !10311)
!10322 = !DILocation(line: 623, column: 14, scope: !10311)
!10323 = !DILocation(line: 623, column: 3, scope: !10311)
!10324 = !DILocation(line: 624, column: 1, scope: !10311)
!10325 = distinct !DISubprogram(name: "adjust_range_with_scev", scope: !3, file: !3, line: 3153, type: !10326, scopeLine: 3155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10328)
!10326 = !DISubroutineType(types: !10327)
!10327 = !{null, !687, !1232, !1017, !693}
!10328 = !{!10329, !10330, !10331, !10332, !10333, !10334, !10335, !10336, !10337, !10338, !10339, !10340, !10341}
!10329 = !DILocalVariable(name: "vr", arg: 1, scope: !10325, file: !3, line: 3153, type: !687)
!10330 = !DILocalVariable(name: "loop", arg: 2, scope: !10325, file: !3, line: 3153, type: !1232)
!10331 = !DILocalVariable(name: "stmt", arg: 3, scope: !10325, file: !3, line: 3154, type: !1017)
!10332 = !DILocalVariable(name: "var", arg: 4, scope: !10325, file: !3, line: 3154, type: !693)
!10333 = !DILocalVariable(name: "init", scope: !10325, file: !3, line: 3156, type: !693)
!10334 = !DILocalVariable(name: "step", scope: !10325, file: !3, line: 3156, type: !693)
!10335 = !DILocalVariable(name: "chrec", scope: !10325, file: !3, line: 3156, type: !693)
!10336 = !DILocalVariable(name: "tmin", scope: !10325, file: !3, line: 3156, type: !693)
!10337 = !DILocalVariable(name: "tmax", scope: !10325, file: !3, line: 3156, type: !693)
!10338 = !DILocalVariable(name: "min", scope: !10325, file: !3, line: 3156, type: !693)
!10339 = !DILocalVariable(name: "max", scope: !10325, file: !3, line: 3156, type: !693)
!10340 = !DILocalVariable(name: "type", scope: !10325, file: !3, line: 3156, type: !693)
!10341 = !DILocalVariable(name: "dir", scope: !10325, file: !3, line: 3157, type: !663)
!10342 = !DILocation(line: 0, scope: !10325)
!10343 = !DILocation(line: 3161, column: 11, scope: !10344)
!10344 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3161, column: 7)
!10345 = !DILocation(line: 3161, column: 16, scope: !10344)
!10346 = !DILocation(line: 3161, column: 7, scope: !10325)
!10347 = !DILocation(line: 3164, column: 41, scope: !10325)
!10348 = !DILocation(line: 3164, column: 11, scope: !10325)
!10349 = !DILocation(line: 3167, column: 7, scope: !10350)
!10350 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3167, column: 7)
!10351 = !DILocation(line: 3167, column: 7, scope: !10325)
!10352 = !DILocation(line: 3169, column: 48, scope: !10353)
!10353 = distinct !DILexicalBlock(scope: !10350, file: !3, line: 3168, column: 5)
!10354 = !DILocation(line: 3169, column: 7, scope: !10353)
!10355 = !DILocation(line: 3170, column: 7, scope: !10353)
!10356 = !DILocation(line: 3173, column: 7, scope: !10357)
!10357 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3173, column: 7)
!10358 = !DILocation(line: 3173, column: 25, scope: !10357)
!10359 = !DILocation(line: 3173, column: 7, scope: !10325)
!10360 = !DILocation(line: 3176, column: 54, scope: !10325)
!10361 = !DILocation(line: 3176, column: 10, scope: !10325)
!10362 = !DILocation(line: 3177, column: 51, scope: !10325)
!10363 = !DILocation(line: 3177, column: 10, scope: !10325)
!10364 = !DILocation(line: 3183, column: 12, scope: !10365)
!10365 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3183, column: 7)
!10366 = !DILocation(line: 3184, column: 7, scope: !10365)
!10367 = !DILocation(line: 3184, column: 11, scope: !10365)
!10368 = !DILocation(line: 3185, column: 7, scope: !10365)
!10369 = !DILocation(line: 3185, column: 11, scope: !10365)
!10370 = !DILocation(line: 3183, column: 7, scope: !10325)
!10371 = !DILocation(line: 3188, column: 9, scope: !10325)
!10372 = !DILocation(line: 3191, column: 11, scope: !10373)
!10373 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3191, column: 7)
!10374 = !DILocation(line: 3193, column: 7, scope: !10373)
!10375 = !DILocation(line: 3193, column: 51, scope: !10373)
!10376 = !DILocation(line: 3193, column: 10, scope: !10373)
!10377 = !DILocation(line: 3191, column: 7, scope: !10325)
!10378 = !DILocation(line: 3202, column: 10, scope: !10325)
!10379 = !DILocation(line: 3203, column: 7, scope: !10380)
!10380 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3203, column: 7)
!10381 = !DILocation(line: 3203, column: 29, scope: !10380)
!10382 = !DILocation(line: 3203, column: 33, scope: !10380)
!10383 = !DILocation(line: 3203, column: 7, scope: !10325)
!10384 = !DILocation(line: 3204, column: 12, scope: !10380)
!10385 = !DILocation(line: 3207, column: 7, scope: !10386)
!10386 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3207, column: 7)
!10387 = !DILocation(line: 3204, column: 5, scope: !10380)
!10388 = !DILocation(line: 0, scope: !10380)
!10389 = !DILocation(line: 3207, column: 29, scope: !10386)
!10390 = !DILocation(line: 3207, column: 33, scope: !10386)
!10391 = !DILocation(line: 3207, column: 7, scope: !10325)
!10392 = !DILocation(line: 3208, column: 12, scope: !10386)
!10393 = !DILocation(line: 3208, column: 5, scope: !10386)
!10394 = !DILocation(line: 0, scope: !10386)
!10395 = !DILocation(line: 3212, column: 11, scope: !10396)
!10396 = distinct !DILexicalBlock(scope: !10325, file: !3, line: 3212, column: 7)
!10397 = !DILocation(line: 3212, column: 16, scope: !10396)
!10398 = !DILocation(line: 3212, column: 30, scope: !10396)
!10399 = !DILocation(line: 3212, column: 42, scope: !10396)
!10400 = !DILocation(line: 3212, column: 7, scope: !10325)
!10401 = !DILocation(line: 3220, column: 15, scope: !10402)
!10402 = distinct !DILexicalBlock(scope: !10403, file: !3, line: 3220, column: 11)
!10403 = distinct !DILexicalBlock(scope: !10396, file: !3, line: 3213, column: 5)
!10404 = !DILocation(line: 3229, column: 11, scope: !10405)
!10405 = distinct !DILexicalBlock(scope: !10403, file: !3, line: 3229, column: 11)
!10406 = !DILocation(line: 3229, column: 37, scope: !10405)
!10407 = !DILocation(line: 3229, column: 11, scope: !10403)
!10408 = !DILocation(line: 3232, column: 52, scope: !10403)
!10409 = !DILocation(line: 3232, column: 7, scope: !10403)
!10410 = !DILocation(line: 3233, column: 5, scope: !10403)
!10411 = !DILocation(line: 3234, column: 21, scope: !10412)
!10412 = distinct !DILexicalBlock(scope: !10396, file: !3, line: 3234, column: 12)
!10413 = !DILocation(line: 3234, column: 12, scope: !10396)
!10414 = !DILocation(line: 3236, column: 17, scope: !10415)
!10415 = distinct !DILexicalBlock(scope: !10412, file: !3, line: 3235, column: 5)
!10416 = !DILocation(line: 3237, column: 17, scope: !10415)
!10417 = !DILocation(line: 3239, column: 15, scope: !10418)
!10418 = distinct !DILexicalBlock(scope: !10415, file: !3, line: 3239, column: 11)
!10419 = !DILocation(line: 3239, column: 11, scope: !10415)
!10420 = !DILocation(line: 3243, column: 8, scope: !10421)
!10421 = distinct !DILexicalBlock(scope: !10422, file: !3, line: 3243, column: 8)
!10422 = distinct !DILexicalBlock(scope: !10418, file: !3, line: 3240, column: 2)
!10423 = !DILocation(line: 3243, column: 35, scope: !10421)
!10424 = !DILocation(line: 3243, column: 8, scope: !10422)
!10425 = !DILocation(line: 3251, column: 12, scope: !10426)
!10426 = distinct !DILexicalBlock(scope: !10427, file: !3, line: 3251, column: 12)
!10427 = distinct !DILexicalBlock(scope: !10421, file: !3, line: 3244, column: 6)
!10428 = !DILocation(line: 3251, column: 38, scope: !10426)
!10429 = !DILocation(line: 3251, column: 12, scope: !10427)
!10430 = !DILocation(line: 0, scope: !10415)
!10431 = !DILocation(line: 3259, column: 8, scope: !10432)
!10432 = distinct !DILexicalBlock(scope: !10422, file: !3, line: 3259, column: 8)
!10433 = !DILocation(line: 3259, column: 8, scope: !10422)
!10434 = !DILocation(line: 3261, column: 2, scope: !10422)
!10435 = !DILocation(line: 3265, column: 8, scope: !10436)
!10436 = distinct !DILexicalBlock(scope: !10437, file: !3, line: 3265, column: 8)
!10437 = distinct !DILexicalBlock(scope: !10418, file: !3, line: 3263, column: 2)
!10438 = !DILocation(line: 3265, column: 35, scope: !10436)
!10439 = !DILocation(line: 3265, column: 8, scope: !10437)
!10440 = !DILocation(line: 3270, column: 12, scope: !10441)
!10441 = distinct !DILexicalBlock(scope: !10442, file: !3, line: 3270, column: 12)
!10442 = distinct !DILexicalBlock(scope: !10436, file: !3, line: 3266, column: 6)
!10443 = !DILocation(line: 3270, column: 38, scope: !10441)
!10444 = !DILocation(line: 3270, column: 12, scope: !10442)
!10445 = !DILocation(line: 3274, column: 8, scope: !10446)
!10446 = distinct !DILexicalBlock(scope: !10437, file: !3, line: 3274, column: 8)
!10447 = !DILocation(line: 3274, column: 8, scope: !10437)
!10448 = !DILocation(line: 0, scope: !10418)
!10449 = !DILocation(line: 3278, column: 52, scope: !10415)
!10450 = !DILocation(line: 3278, column: 7, scope: !10415)
!10451 = !DILocation(line: 3279, column: 5, scope: !10415)
!10452 = !DILocation(line: 3280, column: 1, scope: !10325)
!10453 = distinct !DISubprogram(name: "vrp_var_may_overflow", scope: !3, file: !3, line: 3287, type: !10454, scopeLine: 3288, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10456)
!10454 = !DISubroutineType(types: !10455)
!10455 = !{!679, !693, !1017}
!10456 = !{!10457, !10458, !10459, !10460, !10461, !10462}
!10457 = !DILocalVariable(name: "var", arg: 1, scope: !10453, file: !3, line: 3287, type: !693)
!10458 = !DILocalVariable(name: "stmt", arg: 2, scope: !10453, file: !3, line: 3287, type: !1017)
!10459 = !DILocalVariable(name: "l", scope: !10453, file: !3, line: 3289, type: !1232)
!10460 = !DILocalVariable(name: "chrec", scope: !10453, file: !3, line: 3290, type: !693)
!10461 = !DILocalVariable(name: "init", scope: !10453, file: !3, line: 3290, type: !693)
!10462 = !DILocalVariable(name: "step", scope: !10453, file: !3, line: 3290, type: !693)
!10463 = !DILocation(line: 0, scope: !10453)
!10464 = !DILocation(line: 3292, column: 7, scope: !10465)
!10465 = distinct !DILexicalBlock(scope: !10453, file: !3, line: 3292, column: 7)
!10466 = !DILocation(line: 3292, column: 21, scope: !10465)
!10467 = !DILocation(line: 3292, column: 7, scope: !10453)
!10468 = !DILocation(line: 3295, column: 7, scope: !10453)
!10469 = !DILocation(line: 3296, column: 9, scope: !10470)
!10470 = distinct !DILexicalBlock(scope: !10453, file: !3, line: 3296, column: 7)
!10471 = !DILocation(line: 3297, column: 7, scope: !10470)
!10472 = !DILocation(line: 3297, column: 11, scope: !10470)
!10473 = !DILocation(line: 3296, column: 7, scope: !10453)
!10474 = !DILocation(line: 3300, column: 38, scope: !10453)
!10475 = !DILocation(line: 3300, column: 11, scope: !10453)
!10476 = !DILocation(line: 3301, column: 7, scope: !10477)
!10477 = distinct !DILexicalBlock(scope: !10453, file: !3, line: 3301, column: 7)
!10478 = !DILocation(line: 3301, column: 25, scope: !10477)
!10479 = !DILocation(line: 3301, column: 7, scope: !10453)
!10480 = !DILocation(line: 3304, column: 51, scope: !10453)
!10481 = !DILocation(line: 3304, column: 10, scope: !10453)
!10482 = !DILocation(line: 3305, column: 48, scope: !10453)
!10483 = !DILocation(line: 3305, column: 10, scope: !10453)
!10484 = !DILocation(line: 3307, column: 12, scope: !10485)
!10485 = distinct !DILexicalBlock(scope: !10453, file: !3, line: 3307, column: 7)
!10486 = !DILocation(line: 3308, column: 7, scope: !10485)
!10487 = !DILocation(line: 3308, column: 11, scope: !10485)
!10488 = !DILocation(line: 3309, column: 7, scope: !10485)
!10489 = !DILocation(line: 3309, column: 11, scope: !10485)
!10490 = !DILocation(line: 3307, column: 7, scope: !10453)
!10491 = !DILocation(line: 3315, column: 48, scope: !10492)
!10492 = distinct !DILexicalBlock(scope: !10453, file: !3, line: 3315, column: 7)
!10493 = !DILocation(line: 3315, column: 7, scope: !10492)
!10494 = !DILocation(line: 3315, column: 7, scope: !10453)
!10495 = !DILocation(line: 3319, column: 7, scope: !10496)
!10496 = distinct !DILexicalBlock(scope: !10453, file: !3, line: 3319, column: 7)
!10497 = !DILocation(line: 3319, column: 17, scope: !10496)
!10498 = !DILocation(line: 3319, column: 21, scope: !10496)
!10499 = !DILocation(line: 3319, column: 32, scope: !10496)
!10500 = !DILocation(line: 3319, column: 47, scope: !10496)
!10501 = !DILocation(line: 3319, column: 7, scope: !10453)
!10502 = !DILocation(line: 3321, column: 7, scope: !10503)
!10503 = distinct !DILexicalBlock(scope: !10496, file: !3, line: 3320, column: 5)
!10504 = !DILocation(line: 3322, column: 16, scope: !10503)
!10505 = !DILocation(line: 3322, column: 7, scope: !10503)
!10506 = !DILocation(line: 3323, column: 5, scope: !10503)
!10507 = !DILocation(line: 3326, column: 1, scope: !10453)
!10508 = distinct !DISubprogram(name: "instantiate_parameters", scope: !10509, file: !10509, line: 57, type: !10510, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10512)
!10509 = !DIFile(filename: "./tree-scalar-evolution.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!10510 = !DISubroutineType(types: !10511)
!10511 = !{!693, !1232, !693}
!10512 = !{!10513, !10514}
!10513 = !DILocalVariable(name: "loop", arg: 1, scope: !10508, file: !10509, line: 57, type: !1232)
!10514 = !DILocalVariable(name: "chrec", arg: 2, scope: !10508, file: !10509, line: 57, type: !693)
!10515 = !DILocation(line: 0, scope: !10508)
!10516 = !DILocation(line: 59, column: 28, scope: !10508)
!10517 = !DILocation(line: 59, column: 10, scope: !10508)
!10518 = !DILocation(line: 59, column: 3, scope: !10508)
!10519 = distinct !DISubprogram(name: "valid_value_p", scope: !3, file: !3, line: 992, type: !10520, scopeLine: 993, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10522)
!10520 = !DISubroutineType(types: !10521)
!10521 = !{!679, !693}
!10522 = !{!10523}
!10523 = !DILocalVariable(name: "expr", arg: 1, scope: !10519, file: !3, line: 992, type: !693)
!10524 = !DILocation(line: 0, scope: !10519)
!10525 = !DILocation(line: 994, column: 7, scope: !10526)
!10526 = distinct !DILexicalBlock(scope: !10519, file: !3, line: 994, column: 7)
!10527 = !DILocation(line: 994, column: 24, scope: !10526)
!10528 = !DILocation(line: 994, column: 7, scope: !10519)
!10529 = !DILocation(line: 997, column: 24, scope: !10530)
!10530 = distinct !DILexicalBlock(scope: !10519, file: !3, line: 997, column: 7)
!10531 = !DILocation(line: 998, column: 7, scope: !10530)
!10532 = !DILocation(line: 998, column: 27, scope: !10530)
!10533 = !DILocation(line: 997, column: 7, scope: !10519)
!10534 = !DILocation(line: 999, column: 13, scope: !10530)
!10535 = !DILocation(line: 999, column: 48, scope: !10530)
!10536 = !DILocation(line: 1000, column: 6, scope: !10530)
!10537 = !DILocation(line: 1000, column: 9, scope: !10530)
!10538 = !DILocation(line: 1000, column: 44, scope: !10530)
!10539 = !DILocation(line: 999, column: 5, scope: !10530)
!10540 = !DILocation(line: 1002, column: 10, scope: !10519)
!10541 = !DILocation(line: 1002, column: 3, scope: !10519)
!10542 = !DILocation(line: 1003, column: 1, scope: !10519)
!10543 = distinct !DISubprogram(name: "get_chrec_loop", scope: !10509, file: !10509, line: 65, type: !10544, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10546)
!10544 = !DISubroutineType(types: !10545)
!10545 = !{!1232, !2080}
!10546 = !{!10547}
!10547 = !DILocalVariable(name: "chrec", arg: 1, scope: !10543, file: !10509, line: 65, type: !2080)
!10548 = !DILocation(line: 0, scope: !10543)
!10549 = !DILocation(line: 67, column: 20, scope: !10543)
!10550 = !DILocation(line: 67, column: 10, scope: !10543)
!10551 = !DILocation(line: 67, column: 3, scope: !10543)
!10552 = distinct !DISubprogram(name: "block_before_loop", scope: !10509, file: !10509, line: 46, type: !10553, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10555)
!10553 = !DISubroutineType(types: !10554)
!10554 = !{!1468, !1259}
!10555 = !{!10556, !10557}
!10556 = !DILocalVariable(name: "loop", arg: 1, scope: !10552, file: !10509, line: 46, type: !1259)
!10557 = !DILocalVariable(name: "preheader", scope: !10552, file: !10509, line: 48, type: !997)
!10558 = !DILocation(line: 0, scope: !10552)
!10559 = !DILocation(line: 48, column: 20, scope: !10552)
!10560 = !DILocation(line: 49, column: 11, scope: !10552)
!10561 = !DILocation(line: 49, column: 34, scope: !10552)
!10562 = !DILocation(line: 49, column: 40, scope: !10552)
!10563 = !DILocation(line: 49, column: 3, scope: !10552)
!10564 = distinct !DISubprogram(name: "get_loop", scope: !330, file: !330, line: 417, type: !10565, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10567)
!10565 = !DISubroutineType(types: !10566)
!10566 = !{!1232, !7}
!10567 = !{!10568}
!10568 = !DILocalVariable(name: "num", arg: 1, scope: !10564, file: !330, line: 417, type: !7)
!10569 = !DILocation(line: 0, scope: !10564)
!10570 = !DILocation(line: 419, column: 10, scope: !10564)
!10571 = !DILocation(line: 419, column: 3, scope: !10564)
!10572 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !330, file: !330, line: 85, type: !10573, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10577)
!10573 = !DISubroutineType(types: !10574)
!10574 = !{!1259, !10575, !7}
!10575 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10576, size: 64)
!10576 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1252)
!10577 = !{!10578, !10579}
!10578 = !DILocalVariable(name: "vec_", arg: 1, scope: !10572, file: !330, line: 85, type: !10575)
!10579 = !DILocalVariable(name: "ix_", arg: 2, scope: !10572, file: !330, line: 85, type: !7)
!10580 = !DILocation(line: 0, scope: !10572)
!10581 = !DILocation(line: 85, column: 1, scope: !10572)
!10582 = distinct !DISubprogram(name: "loop_outer", scope: !330, file: !330, line: 434, type: !10583, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10587)
!10583 = !DISubroutineType(types: !10584)
!10584 = !{!1232, !10585}
!10585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10586, size: 64)
!10586 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1233)
!10587 = !{!10588, !10589}
!10588 = !DILocalVariable(name: "loop", arg: 1, scope: !10582, file: !330, line: 434, type: !10585)
!10589 = !DILocalVariable(name: "n", scope: !10582, file: !330, line: 436, type: !7)
!10590 = !DILocation(line: 0, scope: !10582)
!10591 = !DILocation(line: 436, column: 16, scope: !10582)
!10592 = !DILocation(line: 438, column: 9, scope: !10593)
!10593 = distinct !DILexicalBlock(scope: !10582, file: !330, line: 438, column: 7)
!10594 = !DILocation(line: 438, column: 7, scope: !10582)
!10595 = !DILocation(line: 441, column: 10, scope: !10582)
!10596 = !DILocation(line: 441, column: 3, scope: !10582)
!10597 = !DILocation(line: 442, column: 1, scope: !10582)
!10598 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !330, file: !330, line: 85, type: !10599, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10601)
!10599 = !DISubroutineType(types: !10600)
!10600 = !{!7, !10575}
!10601 = !{!10602}
!10602 = !DILocalVariable(name: "vec_", arg: 1, scope: !10598, file: !330, line: 85, type: !10575)
!10603 = !DILocation(line: 0, scope: !10598)
!10604 = !DILocation(line: 85, column: 1, scope: !10598)
!10605 = distinct !DISubprogram(name: "vrp_fold_stmt", scope: !3, file: !3, line: 7074, type: !10606, scopeLine: 7075, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10608)
!10606 = !DISubroutineType(types: !10607)
!10607 = !{!679, !5291}
!10608 = !{!10609}
!10609 = !DILocalVariable(name: "si", arg: 1, scope: !10605, file: !3, line: 7074, type: !5291)
!10610 = !DILocation(line: 0, scope: !10605)
!10611 = !DILocation(line: 7076, column: 7, scope: !10612)
!10612 = distinct !DILexicalBlock(scope: !10605, file: !3, line: 7076, column: 7)
!10613 = !DILocation(line: 7076, column: 7, scope: !10605)
!10614 = !DILocation(line: 7079, column: 10, scope: !10605)
!10615 = !DILocation(line: 7079, column: 3, scope: !10605)
!10616 = !DILocation(line: 7080, column: 1, scope: !10605)
!10617 = distinct !DISubprogram(name: "check_all_array_refs", scope: !3, file: !3, line: 5153, type: !3071, scopeLine: 5154, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10618)
!10618 = !{!10619, !10620, !10621, !10625, !10626, !10627, !10631, !10632, !10635, !10636}
!10619 = !DILocalVariable(name: "bb", scope: !10617, file: !3, line: 5155, type: !1468)
!10620 = !DILocalVariable(name: "si", scope: !10617, file: !3, line: 5156, type: !2054)
!10621 = !DILocalVariable(name: "ei", scope: !10622, file: !3, line: 5160, type: !4372)
!10622 = distinct !DILexicalBlock(scope: !10623, file: !3, line: 5159, column: 5)
!10623 = distinct !DILexicalBlock(scope: !10624, file: !3, line: 5158, column: 3)
!10624 = distinct !DILexicalBlock(scope: !10617, file: !3, line: 5158, column: 3)
!10625 = !DILocalVariable(name: "e", scope: !10622, file: !3, line: 5161, type: !997)
!10626 = !DILocalVariable(name: "executable", scope: !10622, file: !3, line: 5162, type: !679)
!10627 = !DILocalVariable(name: "stmt", scope: !10628, file: !3, line: 5172, type: !1017)
!10628 = distinct !DILexicalBlock(scope: !10629, file: !3, line: 5171, column: 2)
!10629 = distinct !DILexicalBlock(scope: !10630, file: !3, line: 5170, column: 7)
!10630 = distinct !DILexicalBlock(scope: !10622, file: !3, line: 5170, column: 7)
!10631 = !DILocalVariable(name: "wi", scope: !10628, file: !3, line: 5173, type: !2116)
!10632 = !DILocalVariable(name: "i", scope: !10633, file: !3, line: 5179, type: !1162)
!10633 = distinct !DILexicalBlock(scope: !10634, file: !3, line: 5178, column: 6)
!10634 = distinct !DILexicalBlock(scope: !10628, file: !3, line: 5177, column: 8)
!10635 = !DILocalVariable(name: "n", scope: !10633, file: !3, line: 5180, type: !1162)
!10636 = !DILocalVariable(name: "arg", scope: !10637, file: !3, line: 5183, type: !693)
!10637 = distinct !DILexicalBlock(scope: !10638, file: !3, line: 5182, column: 3)
!10638 = distinct !DILexicalBlock(scope: !10639, file: !3, line: 5181, column: 8)
!10639 = distinct !DILexicalBlock(scope: !10633, file: !3, line: 5181, column: 8)
!10640 = !DILocation(line: 5156, column: 3, scope: !10617)
!10641 = !DILocation(line: 5158, column: 3, scope: !10624)
!10642 = !DILocation(line: 0, scope: !10622)
!10643 = !DILocation(line: 0, scope: !10644)
!10644 = distinct !DILexicalBlock(scope: !10622, file: !3, line: 5165, column: 7)
!10645 = !DILocation(line: 0, scope: !10646)
!10646 = distinct !DILexicalBlock(scope: !10644, file: !3, line: 5165, column: 7)
!10647 = !DILocation(line: 0, scope: !10630)
!10648 = !DILocation(line: 0, scope: !10628)
!10649 = !DILocation(line: 0, scope: !10650)
!10650 = distinct !DILexicalBlock(scope: !10634, file: !3, line: 5188, column: 6)
!10651 = !DILocation(line: 5158, column: 3, scope: !10623)
!10652 = !DILocation(line: 0, scope: !10624)
!10653 = !DILocation(line: 0, scope: !10617)
!10654 = !DILocation(line: 5160, column: 7, scope: !10622)
!10655 = !DILocation(line: 5161, column: 7, scope: !10622)
!10656 = !DILocation(line: 5165, column: 7, scope: !10644)
!10657 = !DILocation(line: 5165, column: 7, scope: !10646)
!10658 = !DILocation(line: 5166, column: 19, scope: !10646)
!10659 = !DILocation(line: 5166, column: 22, scope: !10646)
!10660 = !DILocation(line: 5166, column: 16, scope: !10646)
!10661 = !DILocation(line: 5166, column: 13, scope: !10646)
!10662 = distinct !{!10662, !10656, !10663}
!10663 = !DILocation(line: 5166, column: 45, scope: !10644)
!10664 = !DILocation(line: 5167, column: 12, scope: !10665)
!10665 = distinct !DILexicalBlock(scope: !10622, file: !3, line: 5167, column: 11)
!10666 = !DILocation(line: 5167, column: 11, scope: !10622)
!10667 = !DILocation(line: 5170, column: 17, scope: !10630)
!10668 = !DILocation(line: 5170, column: 12, scope: !10630)
!10669 = !DILocation(line: 5170, column: 37, scope: !10629)
!10670 = !DILocation(line: 5170, column: 36, scope: !10629)
!10671 = !DILocation(line: 5170, column: 7, scope: !10630)
!10672 = !DILocation(line: 5172, column: 18, scope: !10628)
!10673 = !DILocation(line: 5173, column: 4, scope: !10628)
!10674 = !DILocation(line: 5174, column: 9, scope: !10675)
!10675 = distinct !DILexicalBlock(scope: !10628, file: !3, line: 5174, column: 8)
!10676 = !DILocation(line: 5174, column: 8, scope: !10628)
!10677 = !DILocation(line: 5177, column: 8, scope: !10634)
!10678 = !DILocation(line: 5177, column: 8, scope: !10628)
!10679 = !DILocation(line: 5180, column: 19, scope: !10633)
!10680 = !DILocation(line: 0, scope: !10633)
!10681 = !DILocation(line: 5181, column: 13, scope: !10639)
!10682 = !DILocation(line: 0, scope: !10639)
!10683 = !DILocation(line: 5181, column: 22, scope: !10638)
!10684 = !DILocation(line: 5181, column: 8, scope: !10639)
!10685 = !DILocation(line: 5183, column: 39, scope: !10637)
!10686 = !DILocation(line: 5183, column: 16, scope: !10637)
!10687 = !DILocation(line: 0, scope: !10637)
!10688 = !DILocation(line: 5184, column: 33, scope: !10637)
!10689 = !DILocation(line: 5184, column: 5, scope: !10637)
!10690 = !DILocation(line: 5181, column: 28, scope: !10638)
!10691 = !DILocation(line: 5181, column: 8, scope: !10638)
!10692 = distinct !{!10692, !10684, !10693}
!10693 = !DILocation(line: 5185, column: 3, scope: !10639)
!10694 = !DILocation(line: 5189, column: 8, scope: !10650)
!10695 = !DILocation(line: 5190, column: 18, scope: !10650)
!10696 = !DILocation(line: 5190, column: 16, scope: !10650)
!10697 = !DILocation(line: 5193, column: 24, scope: !10650)
!10698 = !DILocation(line: 5193, column: 8, scope: !10650)
!10699 = !DILocation(line: 5197, column: 2, scope: !10629)
!10700 = !DILocation(line: 5170, column: 53, scope: !10629)
!10701 = !DILocation(line: 5170, column: 7, scope: !10629)
!10702 = distinct !{!10702, !10671, !10703}
!10703 = !DILocation(line: 5197, column: 2, scope: !10630)
!10704 = !DILocation(line: 5198, column: 5, scope: !10623)
!10705 = !DILocation(line: 0, scope: !10623)
!10706 = distinct !{!10706, !10641, !10707}
!10707 = !DILocation(line: 5198, column: 5, scope: !10624)
!10708 = !DILocation(line: 5199, column: 1, scope: !10617)
!10709 = distinct !DISubprogram(name: "identify_jump_threads", scope: !3, file: !3, line: 7129, type: !3071, scopeLine: 7130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10710)
!10710 = !{!10711, !10712, !10713, !10714, !10715, !10719}
!10711 = !DILocalVariable(name: "bb", scope: !10709, file: !3, line: 7131, type: !1468)
!10712 = !DILocalVariable(name: "dummy", scope: !10709, file: !3, line: 7132, type: !1017)
!10713 = !DILocalVariable(name: "i", scope: !10709, file: !3, line: 7133, type: !680)
!10714 = !DILocalVariable(name: "e", scope: !10709, file: !3, line: 7134, type: !997)
!10715 = !DILocalVariable(name: "last", scope: !10716, file: !3, line: 7172, type: !1017)
!10716 = distinct !DILexicalBlock(scope: !10717, file: !3, line: 7171, column: 5)
!10717 = distinct !DILexicalBlock(scope: !10718, file: !3, line: 7170, column: 3)
!10718 = distinct !DILexicalBlock(scope: !10709, file: !3, line: 7170, column: 3)
!10719 = !DILocalVariable(name: "ei", scope: !10720, file: !3, line: 7194, type: !4372)
!10720 = distinct !DILexicalBlock(scope: !10721, file: !3, line: 7193, column: 2)
!10721 = distinct !DILexicalBlock(scope: !10716, file: !3, line: 7188, column: 11)
!10722 = !DILocation(line: 7134, column: 3, scope: !10709)
!10723 = !DILocation(line: 7139, column: 3, scope: !10709)
!10724 = !DILocation(line: 7146, column: 3, scope: !10709)
!10725 = !DILocation(line: 0, scope: !10709)
!10726 = !DILocation(line: 7150, column: 8, scope: !10727)
!10727 = distinct !DILexicalBlock(scope: !10709, file: !3, line: 7150, column: 3)
!10728 = !DILocation(line: 0, scope: !10727)
!10729 = !DILocation(line: 7150, column: 15, scope: !10730)
!10730 = distinct !DILexicalBlock(scope: !10727, file: !3, line: 7150, column: 3)
!10731 = !DILocation(line: 7150, column: 3, scope: !10727)
!10732 = !DILocation(line: 7151, column: 5, scope: !10730)
!10733 = !DILocation(line: 7151, column: 8, scope: !10730)
!10734 = !DILocation(line: 7151, column: 14, scope: !10730)
!10735 = !DILocation(line: 7150, column: 58, scope: !10730)
!10736 = !DILocation(line: 7150, column: 3, scope: !10730)
!10737 = distinct !{!10737, !10731, !10738}
!10738 = !DILocation(line: 7151, column: 17, scope: !10727)
!10739 = !DILocation(line: 7155, column: 11, scope: !10709)
!10740 = !DILocation(line: 7155, column: 9, scope: !10709)
!10741 = !DILocation(line: 7161, column: 9, scope: !10709)
!10742 = !DILocation(line: 7160, column: 11, scope: !10709)
!10743 = !DILocation(line: 7170, column: 3, scope: !10718)
!10744 = !DILocation(line: 0, scope: !10720)
!10745 = !DILocation(line: 0, scope: !10746)
!10746 = distinct !DILexicalBlock(scope: !10720, file: !3, line: 7200, column: 4)
!10747 = !DILocation(line: 0, scope: !10748)
!10748 = distinct !DILexicalBlock(scope: !10746, file: !3, line: 7200, column: 4)
!10749 = !DILocation(line: 7170, column: 3, scope: !10717)
!10750 = !DILocation(line: 0, scope: !10718)
!10751 = !DILocation(line: 7176, column: 13, scope: !10752)
!10752 = distinct !DILexicalBlock(scope: !10716, file: !3, line: 7176, column: 11)
!10753 = !DILocation(line: 7176, column: 11, scope: !10716)
!10754 = !DILocation(line: 7182, column: 24, scope: !10716)
!10755 = !DILocation(line: 7182, column: 14, scope: !10716)
!10756 = !DILocation(line: 0, scope: !10716)
!10757 = !DILocation(line: 7183, column: 11, scope: !10758)
!10758 = distinct !DILexicalBlock(scope: !10716, file: !3, line: 7183, column: 11)
!10759 = !DILocation(line: 7183, column: 30, scope: !10758)
!10760 = !DILocation(line: 7183, column: 11, scope: !10716)
!10761 = !DILocation(line: 7188, column: 11, scope: !10721)
!10762 = !DILocation(line: 7188, column: 46, scope: !10721)
!10763 = !DILocation(line: 7189, column: 4, scope: !10721)
!10764 = !DILocation(line: 7189, column: 7, scope: !10721)
!10765 = !DILocation(line: 7190, column: 4, scope: !10721)
!10766 = !DILocation(line: 7190, column: 8, scope: !10721)
!10767 = !DILocation(line: 7190, column: 43, scope: !10721)
!10768 = !DILocation(line: 7191, column: 8, scope: !10721)
!10769 = !DILocation(line: 7191, column: 36, scope: !10721)
!10770 = !DILocation(line: 7191, column: 11, scope: !10721)
!10771 = !DILocation(line: 7192, column: 4, scope: !10721)
!10772 = !DILocation(line: 7192, column: 7, scope: !10721)
!10773 = !DILocation(line: 7188, column: 11, scope: !10716)
!10774 = !DILocation(line: 7194, column: 4, scope: !10720)
!10775 = !DILocation(line: 7200, column: 4, scope: !10746)
!10776 = !DILocation(line: 7200, column: 4, scope: !10748)
!10777 = !DILocation(line: 7204, column: 12, scope: !10778)
!10778 = distinct !DILexicalBlock(scope: !10779, file: !3, line: 7204, column: 12)
!10779 = distinct !DILexicalBlock(scope: !10748, file: !3, line: 7201, column: 6)
!10780 = !DILocation(line: 7204, column: 15, scope: !10778)
!10781 = !DILocation(line: 7204, column: 21, scope: !10778)
!10782 = !DILocation(line: 7204, column: 12, scope: !10779)
!10783 = !DILocation(line: 7207, column: 8, scope: !10779)
!10784 = !DILocation(line: 7209, column: 6, scope: !10779)
!10785 = distinct !{!10785, !10775, !10786}
!10786 = !DILocation(line: 7209, column: 6, scope: !10746)
!10787 = !DILocation(line: 7210, column: 2, scope: !10721)
!10788 = !DILocation(line: 7210, column: 2, scope: !10720)
!10789 = !DILocation(line: 0, scope: !10717)
!10790 = distinct !{!10790, !10743, !10791}
!10791 = !DILocation(line: 7211, column: 5, scope: !10718)
!10792 = !DILocation(line: 7216, column: 1, scope: !10709)
!10793 = distinct !DISubprogram(name: "fold_predicate_in", scope: !3, file: !3, line: 7015, type: !10606, scopeLine: 7016, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10794)
!10794 = !{!10795, !10796, !10797, !10798}
!10795 = !DILocalVariable(name: "si", arg: 1, scope: !10793, file: !3, line: 7015, type: !5291)
!10796 = !DILocalVariable(name: "assignment_p", scope: !10793, file: !3, line: 7017, type: !679)
!10797 = !DILocalVariable(name: "val", scope: !10793, file: !3, line: 7018, type: !693)
!10798 = !DILocalVariable(name: "stmt", scope: !10793, file: !3, line: 7019, type: !1017)
!10799 = !DILocation(line: 0, scope: !10793)
!10800 = !DILocation(line: 7019, column: 17, scope: !10793)
!10801 = !DILocation(line: 7021, column: 7, scope: !10802)
!10802 = distinct !DILexicalBlock(scope: !10793, file: !3, line: 7021, column: 7)
!10803 = !DILocation(line: 7022, column: 7, scope: !10802)
!10804 = !DILocation(line: 7022, column: 10, scope: !10802)
!10805 = !DILocation(line: 7022, column: 58, scope: !10802)
!10806 = !DILocation(line: 7021, column: 7, scope: !10793)
!10807 = !DILocation(line: 7025, column: 39, scope: !10808)
!10808 = distinct !DILexicalBlock(scope: !10802, file: !3, line: 7023, column: 5)
!10809 = !DILocation(line: 7026, column: 11, scope: !10808)
!10810 = !DILocation(line: 7027, column: 11, scope: !10808)
!10811 = !DILocation(line: 7025, column: 13, scope: !10808)
!10812 = !DILocation(line: 7029, column: 5, scope: !10808)
!10813 = !DILocation(line: 7030, column: 12, scope: !10814)
!10814 = distinct !DILexicalBlock(scope: !10802, file: !3, line: 7030, column: 12)
!10815 = !DILocation(line: 7030, column: 31, scope: !10814)
!10816 = !DILocation(line: 7030, column: 12, scope: !10802)
!10817 = !DILocation(line: 7031, column: 37, scope: !10814)
!10818 = !DILocation(line: 7032, column: 9, scope: !10814)
!10819 = !DILocation(line: 7033, column: 9, scope: !10814)
!10820 = !DILocation(line: 7031, column: 11, scope: !10814)
!10821 = !DILocation(line: 0, scope: !10802)
!10822 = !DILocation(line: 7038, column: 7, scope: !10823)
!10823 = distinct !DILexicalBlock(scope: !10793, file: !3, line: 7038, column: 7)
!10824 = !DILocation(line: 7038, column: 7, scope: !10793)
!10825 = !DILocation(line: 7040, column: 11, scope: !10826)
!10826 = distinct !DILexicalBlock(scope: !10827, file: !3, line: 7040, column: 11)
!10827 = distinct !DILexicalBlock(scope: !10823, file: !3, line: 7039, column: 5)
!10828 = !DILocation(line: 7040, column: 11, scope: !10827)
!10829 = !DILocation(line: 7041, column: 15, scope: !10826)
!10830 = !DILocation(line: 7041, column: 9, scope: !10826)
!10831 = !DILocation(line: 7043, column: 11, scope: !10832)
!10832 = distinct !DILexicalBlock(scope: !10827, file: !3, line: 7043, column: 11)
!10833 = !DILocation(line: 7043, column: 11, scope: !10827)
!10834 = !DILocation(line: 7045, column: 4, scope: !10835)
!10835 = distinct !DILexicalBlock(scope: !10832, file: !3, line: 7044, column: 2)
!10836 = !DILocation(line: 7046, column: 23, scope: !10835)
!10837 = !DILocation(line: 7046, column: 4, scope: !10835)
!10838 = !DILocation(line: 7047, column: 13, scope: !10835)
!10839 = !DILocation(line: 7047, column: 4, scope: !10835)
!10840 = !DILocation(line: 7048, column: 24, scope: !10835)
!10841 = !DILocation(line: 7048, column: 4, scope: !10835)
!10842 = !DILocation(line: 7049, column: 13, scope: !10835)
!10843 = !DILocation(line: 7049, column: 4, scope: !10835)
!10844 = !DILocation(line: 7050, column: 2, scope: !10835)
!10845 = !DILocation(line: 7052, column: 11, scope: !10846)
!10846 = distinct !DILexicalBlock(scope: !10827, file: !3, line: 7052, column: 11)
!10847 = !DILocation(line: 7052, column: 11, scope: !10827)
!10848 = !DILocation(line: 7053, column: 2, scope: !10846)
!10849 = !DILocation(line: 7056, column: 4, scope: !10850)
!10850 = distinct !DILexicalBlock(scope: !10846, file: !3, line: 7055, column: 2)
!10851 = !DILocation(line: 7057, column: 8, scope: !10852)
!10852 = distinct !DILexicalBlock(scope: !10850, file: !3, line: 7057, column: 8)
!10853 = !DILocation(line: 7057, column: 8, scope: !10850)
!10854 = !DILocation(line: 7058, column: 6, scope: !10852)
!10855 = !DILocation(line: 7059, column: 13, scope: !10856)
!10856 = distinct !DILexicalBlock(scope: !10852, file: !3, line: 7059, column: 13)
!10857 = !DILocation(line: 7059, column: 13, scope: !10852)
!10858 = !DILocation(line: 7060, column: 6, scope: !10856)
!10859 = !DILocation(line: 7062, column: 6, scope: !10856)
!10860 = !DILocation(line: 7069, column: 1, scope: !10793)
!10861 = distinct !DISubprogram(name: "simplify_stmt_using_ranges", scope: !3, file: !3, line: 6958, type: !10606, scopeLine: 6959, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10862)
!10862 = !{!10863, !10864, !10865}
!10863 = !DILocalVariable(name: "gsi", arg: 1, scope: !10861, file: !3, line: 6958, type: !5291)
!10864 = !DILocalVariable(name: "stmt", scope: !10861, file: !3, line: 6960, type: !1017)
!10865 = !DILocalVariable(name: "rhs_code", scope: !10866, file: !3, line: 6963, type: !134)
!10866 = distinct !DILexicalBlock(scope: !10867, file: !3, line: 6962, column: 5)
!10867 = distinct !DILexicalBlock(scope: !10861, file: !3, line: 6961, column: 7)
!10868 = !DILocation(line: 0, scope: !10861)
!10869 = !DILocation(line: 6960, column: 17, scope: !10861)
!10870 = !DILocation(line: 6961, column: 7, scope: !10867)
!10871 = !DILocation(line: 6961, column: 7, scope: !10861)
!10872 = !DILocation(line: 6963, column: 33, scope: !10866)
!10873 = !DILocation(line: 0, scope: !10866)
!10874 = !DILocation(line: 6965, column: 7, scope: !10866)
!10875 = !DILocation(line: 6977, column: 8, scope: !10876)
!10876 = distinct !DILexicalBlock(scope: !10877, file: !3, line: 6977, column: 8)
!10877 = distinct !DILexicalBlock(scope: !10866, file: !3, line: 6966, column: 2)
!10878 = !DILocation(line: 6977, column: 8, scope: !10877)
!10879 = !DILocation(line: 6978, column: 13, scope: !10876)
!10880 = !DILocation(line: 6978, column: 6, scope: !10876)
!10881 = !DILocation(line: 6986, column: 8, scope: !10882)
!10882 = distinct !DILexicalBlock(scope: !10877, file: !3, line: 6986, column: 8)
!10883 = !DILocation(line: 6987, column: 8, scope: !10882)
!10884 = !DILocation(line: 6987, column: 26, scope: !10882)
!10885 = !DILocation(line: 6987, column: 11, scope: !10882)
!10886 = !DILocation(line: 6986, column: 8, scope: !10877)
!10887 = !DILocation(line: 6988, column: 13, scope: !10882)
!10888 = !DILocation(line: 6988, column: 6, scope: !10882)
!10889 = !DILocation(line: 6993, column: 8, scope: !10890)
!10890 = distinct !DILexicalBlock(scope: !10877, file: !3, line: 6993, column: 8)
!10891 = !DILocation(line: 6993, column: 46, scope: !10890)
!10892 = !DILocation(line: 6994, column: 8, scope: !10890)
!10893 = !DILocation(line: 6994, column: 11, scope: !10890)
!10894 = !DILocation(line: 6993, column: 8, scope: !10877)
!10895 = !DILocation(line: 6995, column: 13, scope: !10890)
!10896 = !DILocation(line: 6995, column: 6, scope: !10890)
!10897 = !DILocation(line: 7002, column: 12, scope: !10898)
!10898 = distinct !DILexicalBlock(scope: !10867, file: !3, line: 7002, column: 12)
!10899 = !DILocation(line: 7002, column: 31, scope: !10898)
!10900 = !DILocation(line: 7002, column: 12, scope: !10867)
!10901 = !DILocation(line: 7003, column: 12, scope: !10898)
!10902 = !DILocation(line: 7003, column: 5, scope: !10898)
!10903 = !DILocation(line: 7004, column: 12, scope: !10904)
!10904 = distinct !DILexicalBlock(scope: !10898, file: !3, line: 7004, column: 12)
!10905 = !DILocation(line: 7004, column: 31, scope: !10904)
!10906 = !DILocation(line: 7004, column: 12, scope: !10898)
!10907 = !DILocation(line: 7005, column: 12, scope: !10904)
!10908 = !DILocation(line: 7005, column: 5, scope: !10904)
!10909 = !DILocation(line: 7007, column: 3, scope: !10861)
!10910 = !DILocation(line: 7008, column: 1, scope: !10861)
!10911 = distinct !DISubprogram(name: "vrp_evaluate_conditional", scope: !3, file: !3, line: 5688, type: !10912, scopeLine: 5689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10914)
!10912 = !DISubroutineType(types: !10913)
!10913 = !{!693, !134, !693, !693, !1017}
!10914 = !{!10915, !10916, !10917, !10918, !10919, !10920, !10921, !10922, !10925, !10926, !10929, !10932, !10933}
!10915 = !DILocalVariable(name: "code", arg: 1, scope: !10911, file: !3, line: 5688, type: !134)
!10916 = !DILocalVariable(name: "op0", arg: 2, scope: !10911, file: !3, line: 5688, type: !693)
!10917 = !DILocalVariable(name: "op1", arg: 3, scope: !10911, file: !3, line: 5688, type: !693)
!10918 = !DILocalVariable(name: "stmt", arg: 4, scope: !10911, file: !3, line: 5688, type: !1017)
!10919 = !DILocalVariable(name: "sop", scope: !10911, file: !3, line: 5690, type: !679)
!10920 = !DILocalVariable(name: "ret", scope: !10911, file: !3, line: 5691, type: !693)
!10921 = !DILocalVariable(name: "only_ranges", scope: !10911, file: !3, line: 5692, type: !679)
!10922 = !DILocalVariable(name: "wc", scope: !10923, file: !3, line: 5708, type: !669)
!10923 = distinct !DILexicalBlock(scope: !10924, file: !3, line: 5707, column: 5)
!10924 = distinct !DILexicalBlock(scope: !10911, file: !3, line: 5706, column: 7)
!10925 = !DILocalVariable(name: "warnmsg", scope: !10923, file: !3, line: 5709, type: !685)
!10926 = !DILocalVariable(name: "location", scope: !10927, file: !3, line: 5726, type: !818)
!10927 = distinct !DILexicalBlock(scope: !10928, file: !3, line: 5725, column: 2)
!10928 = distinct !DILexicalBlock(scope: !10923, file: !3, line: 5724, column: 11)
!10929 = !DILocalVariable(name: "type", scope: !10930, file: !3, line: 5746, type: !693)
!10930 = distinct !DILexicalBlock(scope: !10931, file: !3, line: 5740, column: 5)
!10931 = distinct !DILexicalBlock(scope: !10911, file: !3, line: 5736, column: 7)
!10932 = !DILocalVariable(name: "vr0", scope: !10930, file: !3, line: 5747, type: !687)
!10933 = !DILocalVariable(name: "location", scope: !10934, file: !3, line: 5755, type: !818)
!10934 = distinct !DILexicalBlock(scope: !10935, file: !3, line: 5754, column: 2)
!10935 = distinct !DILexicalBlock(scope: !10930, file: !3, line: 5749, column: 11)
!10936 = !DILocation(line: 0, scope: !10911)
!10937 = !DILocation(line: 5690, column: 3, scope: !10911)
!10938 = !DILocation(line: 5692, column: 3, scope: !10911)
!10939 = !DILocation(line: 5696, column: 8, scope: !10940)
!10940 = distinct !DILexicalBlock(scope: !10911, file: !3, line: 5696, column: 7)
!10941 = !DILocation(line: 5696, column: 24, scope: !10940)
!10942 = !DILocation(line: 5697, column: 8, scope: !10940)
!10943 = !DILocation(line: 5697, column: 11, scope: !10940)
!10944 = !DILocation(line: 5698, column: 7, scope: !10940)
!10945 = !DILocation(line: 5698, column: 11, scope: !10940)
!10946 = !DILocation(line: 5698, column: 27, scope: !10940)
!10947 = !DILocation(line: 5699, column: 4, scope: !10940)
!10948 = !DILocation(line: 5699, column: 7, scope: !10940)
!10949 = !DILocation(line: 5696, column: 7, scope: !10911)
!10950 = !DILocation(line: 5702, column: 7, scope: !10911)
!10951 = !DILocation(line: 5703, column: 9, scope: !10911)
!10952 = !DILocation(line: 5706, column: 7, scope: !10924)
!10953 = !DILocation(line: 5706, column: 11, scope: !10924)
!10954 = !DILocation(line: 5706, column: 14, scope: !10924)
!10955 = !DILocation(line: 5706, column: 7, scope: !10911)
!10956 = !DILocation(line: 5711, column: 11, scope: !10957)
!10957 = distinct !DILexicalBlock(scope: !10923, file: !3, line: 5711, column: 11)
!10958 = !DILocation(line: 0, scope: !10923)
!10959 = !DILocation(line: 5724, column: 11, scope: !10928)
!10960 = !DILocation(line: 5724, column: 11, scope: !10923)
!10961 = !DILocation(line: 5728, column: 9, scope: !10962)
!10962 = distinct !DILexicalBlock(scope: !10927, file: !3, line: 5728, column: 8)
!10963 = !DILocation(line: 5728, column: 8, scope: !10927)
!10964 = !DILocation(line: 5729, column: 17, scope: !10962)
!10965 = !DILocation(line: 0, scope: !10927)
!10966 = !DILocation(line: 5729, column: 6, scope: !10962)
!10967 = !DILocation(line: 5731, column: 17, scope: !10962)
!10968 = !DILocation(line: 0, scope: !10962)
!10969 = !DILocation(line: 5732, column: 4, scope: !10927)
!10970 = !DILocation(line: 5733, column: 2, scope: !10927)
!10971 = !DILocation(line: 5736, column: 7, scope: !10931)
!10972 = !DILocation(line: 5737, column: 10, scope: !10931)
!10973 = !DILocation(line: 5737, column: 7, scope: !10931)
!10974 = !DILocation(line: 5737, column: 17, scope: !10931)
!10975 = !DILocation(line: 5738, column: 7, scope: !10931)
!10976 = !DILocation(line: 5738, column: 10, scope: !10931)
!10977 = !DILocation(line: 5738, column: 33, scope: !10931)
!10978 = !DILocation(line: 5739, column: 7, scope: !10931)
!10979 = !DILocation(line: 5739, column: 10, scope: !10931)
!10980 = !DILocation(line: 5739, column: 26, scope: !10931)
!10981 = !DILocation(line: 5736, column: 7, scope: !10911)
!10982 = !DILocation(line: 5746, column: 19, scope: !10930)
!10983 = !DILocation(line: 0, scope: !10930)
!10984 = !DILocation(line: 5747, column: 28, scope: !10930)
!10985 = !DILocation(line: 5749, column: 16, scope: !10935)
!10986 = !DILocation(line: 5749, column: 21, scope: !10935)
!10987 = !DILocation(line: 5750, column: 4, scope: !10935)
!10988 = !DILocation(line: 5750, column: 7, scope: !10935)
!10989 = !DILocation(line: 5751, column: 4, scope: !10935)
!10990 = !DILocation(line: 5751, column: 28, scope: !10935)
!10991 = !DILocation(line: 5751, column: 7, scope: !10935)
!10992 = !DILocation(line: 5752, column: 4, scope: !10935)
!10993 = !DILocation(line: 5752, column: 28, scope: !10935)
!10994 = !DILocation(line: 5752, column: 7, scope: !10935)
!10995 = !DILocation(line: 5753, column: 4, scope: !10935)
!10996 = !DILocation(line: 5753, column: 7, scope: !10935)
!10997 = !DILocation(line: 5749, column: 11, scope: !10930)
!10998 = !DILocation(line: 5757, column: 9, scope: !10999)
!10999 = distinct !DILexicalBlock(scope: !10934, file: !3, line: 5757, column: 8)
!11000 = !DILocation(line: 5757, column: 8, scope: !10934)
!11001 = !DILocation(line: 5758, column: 17, scope: !10999)
!11002 = !DILocation(line: 0, scope: !10934)
!11003 = !DILocation(line: 5758, column: 6, scope: !10999)
!11004 = !DILocation(line: 5760, column: 17, scope: !10999)
!11005 = !DILocation(line: 0, scope: !10999)
!11006 = !DILocation(line: 5763, column: 9, scope: !10934)
!11007 = !DILocation(line: 5762, column: 4, scope: !10934)
!11008 = !DILocation(line: 5768, column: 2, scope: !10934)
!11009 = !DILocation(line: 5772, column: 1, scope: !10911)
!11010 = distinct !DISubprogram(name: "gimple_cond_make_false", scope: !588, file: !588, line: 2346, type: !11011, scopeLine: 2347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11013)
!11011 = !DISubroutineType(types: !11012)
!11012 = !{null, !1017}
!11013 = !{!11014}
!11014 = !DILocalVariable(name: "gs", arg: 1, scope: !11010, file: !588, line: 2346, type: !1017)
!11015 = !DILocation(line: 0, scope: !11010)
!11016 = !DILocation(line: 2348, column: 28, scope: !11010)
!11017 = !DILocation(line: 2348, column: 3, scope: !11010)
!11018 = !DILocation(line: 2349, column: 28, scope: !11010)
!11019 = !DILocation(line: 2349, column: 3, scope: !11010)
!11020 = !DILocation(line: 2350, column: 14, scope: !11010)
!11021 = !DILocation(line: 2350, column: 22, scope: !11010)
!11022 = !DILocation(line: 2351, column: 1, scope: !11010)
!11023 = distinct !DISubprogram(name: "gimple_cond_make_true", scope: !588, file: !588, line: 2357, type: !11011, scopeLine: 2358, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11024)
!11024 = !{!11025}
!11025 = !DILocalVariable(name: "gs", arg: 1, scope: !11023, file: !588, line: 2357, type: !1017)
!11026 = !DILocation(line: 0, scope: !11023)
!11027 = !DILocation(line: 2359, column: 28, scope: !11023)
!11028 = !DILocation(line: 2359, column: 3, scope: !11023)
!11029 = !DILocation(line: 2360, column: 28, scope: !11023)
!11030 = !DILocation(line: 2360, column: 3, scope: !11023)
!11031 = !DILocation(line: 2361, column: 14, scope: !11023)
!11032 = !DILocation(line: 2361, column: 22, scope: !11023)
!11033 = !DILocation(line: 2362, column: 1, scope: !11023)
!11034 = distinct !DISubprogram(name: "gimple_has_location", scope: !588, file: !588, line: 1165, type: !4991, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11035)
!11035 = !{!11036}
!11036 = !DILocalVariable(name: "g", arg: 1, scope: !11034, file: !588, line: 1165, type: !4325)
!11037 = !DILocation(line: 0, scope: !11034)
!11038 = !DILocation(line: 1167, column: 10, scope: !11034)
!11039 = !DILocation(line: 1167, column: 30, scope: !11034)
!11040 = !DILocation(line: 1167, column: 3, scope: !11034)
!11041 = distinct !DISubprogram(name: "gimple_location", scope: !588, file: !588, line: 1139, type: !11042, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11044)
!11042 = !DISubroutineType(types: !11043)
!11043 = !{!818, !4325}
!11044 = !{!11045}
!11045 = !DILocalVariable(name: "g", arg: 1, scope: !11041, file: !588, line: 1139, type: !4325)
!11046 = !DILocation(line: 0, scope: !11041)
!11047 = !DILocation(line: 1141, column: 20, scope: !11041)
!11048 = !DILocation(line: 1141, column: 3, scope: !11041)
!11049 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !588, file: !588, line: 2261, type: !11050, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11052)
!11050 = !DISubroutineType(types: !11051)
!11051 = !{null, !1017, !693}
!11052 = !{!11053, !11054}
!11053 = !DILocalVariable(name: "gs", arg: 1, scope: !11049, file: !588, line: 2261, type: !1017)
!11054 = !DILocalVariable(name: "lhs", arg: 2, scope: !11049, file: !588, line: 2261, type: !693)
!11055 = !DILocation(line: 0, scope: !11049)
!11056 = !DILocation(line: 2264, column: 3, scope: !11049)
!11057 = !DILocation(line: 2265, column: 1, scope: !11049)
!11058 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !588, file: !588, line: 2292, type: !11050, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11059)
!11059 = !{!11060, !11061}
!11060 = !DILocalVariable(name: "gs", arg: 1, scope: !11058, file: !588, line: 2292, type: !1017)
!11061 = !DILocalVariable(name: "rhs", arg: 2, scope: !11058, file: !588, line: 2292, type: !693)
!11062 = !DILocation(line: 0, scope: !11058)
!11063 = !DILocation(line: 2295, column: 3, scope: !11058)
!11064 = !DILocation(line: 2296, column: 1, scope: !11058)
!11065 = distinct !DISubprogram(name: "gimple_set_op", scope: !588, file: !588, line: 1663, type: !4311, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11066)
!11066 = !{!11067, !11068, !11069}
!11067 = !DILocalVariable(name: "gs", arg: 1, scope: !11065, file: !588, line: 1663, type: !1017)
!11068 = !DILocalVariable(name: "i", arg: 2, scope: !11065, file: !588, line: 1663, type: !7)
!11069 = !DILocalVariable(name: "op", arg: 3, scope: !11065, file: !588, line: 1663, type: !693)
!11070 = !DILocation(line: 0, scope: !11065)
!11071 = !DILocation(line: 1665, column: 3, scope: !11065)
!11072 = !DILocation(line: 1671, column: 3, scope: !11065)
!11073 = !DILocation(line: 1671, column: 22, scope: !11065)
!11074 = !DILocation(line: 1672, column: 1, scope: !11065)
!11075 = distinct !DISubprogram(name: "simplify_truth_ops_using_ranges", scope: !3, file: !3, line: 6442, type: !11076, scopeLine: 6443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11078)
!11076 = !DISubroutineType(types: !11077)
!11077 = !{!679, !5291, !1017}
!11078 = !{!11079, !11080, !11081, !11082, !11083, !11084, !11085, !11086, !11087, !11088}
!11079 = !DILocalVariable(name: "gsi", arg: 1, scope: !11075, file: !3, line: 6442, type: !5291)
!11080 = !DILocalVariable(name: "stmt", arg: 2, scope: !11075, file: !3, line: 6442, type: !1017)
!11081 = !DILocalVariable(name: "rhs_code", scope: !11075, file: !3, line: 6444, type: !134)
!11082 = !DILocalVariable(name: "val", scope: !11075, file: !3, line: 6445, type: !693)
!11083 = !DILocalVariable(name: "op0", scope: !11075, file: !3, line: 6446, type: !693)
!11084 = !DILocalVariable(name: "op1", scope: !11075, file: !3, line: 6446, type: !693)
!11085 = !DILocalVariable(name: "vr", scope: !11075, file: !3, line: 6447, type: !687)
!11086 = !DILocalVariable(name: "sop", scope: !11075, file: !3, line: 6448, type: !679)
!11087 = !DILocalVariable(name: "need_conversion", scope: !11075, file: !3, line: 6449, type: !679)
!11088 = !DILocalVariable(name: "location", scope: !11089, file: !3, line: 6519, type: !818)
!11089 = distinct !DILexicalBlock(scope: !11090, file: !3, line: 6518, column: 5)
!11090 = distinct !DILexicalBlock(scope: !11075, file: !3, line: 6517, column: 7)
!11091 = !DILocation(line: 0, scope: !11075)
!11092 = !DILocation(line: 6444, column: 29, scope: !11075)
!11093 = !DILocation(line: 6448, column: 3, scope: !11075)
!11094 = !DILocation(line: 6448, column: 8, scope: !11075)
!11095 = !DILocation(line: 6451, column: 9, scope: !11075)
!11096 = !DILocation(line: 6452, column: 7, scope: !11097)
!11097 = distinct !DILexicalBlock(scope: !11075, file: !3, line: 6452, column: 7)
!11098 = !DILocation(line: 6452, column: 40, scope: !11097)
!11099 = !DILocation(line: 6452, column: 7, scope: !11075)
!11100 = !DILocation(line: 6454, column: 11, scope: !11101)
!11101 = distinct !DILexicalBlock(scope: !11102, file: !3, line: 6454, column: 11)
!11102 = distinct !DILexicalBlock(scope: !11097, file: !3, line: 6453, column: 5)
!11103 = !DILocation(line: 6454, column: 27, scope: !11101)
!11104 = !DILocation(line: 6454, column: 11, scope: !11102)
!11105 = !DILocation(line: 6456, column: 12, scope: !11102)
!11106 = !DILocation(line: 6458, column: 52, scope: !11102)
!11107 = !DILocation(line: 6458, column: 13, scope: !11102)
!11108 = !DILocation(line: 6459, column: 12, scope: !11109)
!11109 = distinct !DILexicalBlock(scope: !11102, file: !3, line: 6459, column: 11)
!11110 = !DILocation(line: 6459, column: 16, scope: !11109)
!11111 = !DILocation(line: 6459, column: 20, scope: !11109)
!11112 = !DILocation(line: 6459, column: 11, scope: !11102)
!11113 = !DILocation(line: 6462, column: 52, scope: !11102)
!11114 = !DILocation(line: 6462, column: 13, scope: !11102)
!11115 = !DILocation(line: 6463, column: 12, scope: !11116)
!11116 = distinct !DILexicalBlock(scope: !11102, file: !3, line: 6463, column: 11)
!11117 = !DILocation(line: 6463, column: 16, scope: !11116)
!11118 = !DILocation(line: 6463, column: 20, scope: !11116)
!11119 = !DILocation(line: 6463, column: 11, scope: !11102)
!11120 = !DILocation(line: 6467, column: 16, scope: !11121)
!11121 = distinct !DILexicalBlock(scope: !11075, file: !3, line: 6467, column: 7)
!11122 = !DILocation(line: 6467, column: 7, scope: !11075)
!11123 = !DILocation(line: 6470, column: 28, scope: !11124)
!11124 = distinct !DILexicalBlock(scope: !11121, file: !3, line: 6468, column: 5)
!11125 = !DILocation(line: 6470, column: 13, scope: !11124)
!11126 = !DILocation(line: 6471, column: 5, scope: !11124)
!11127 = !DILocation(line: 6474, column: 13, scope: !11128)
!11128 = distinct !DILexicalBlock(scope: !11121, file: !3, line: 6473, column: 5)
!11129 = !DILocation(line: 6477, column: 11, scope: !11130)
!11130 = distinct !DILexicalBlock(scope: !11128, file: !3, line: 6477, column: 11)
!11131 = !DILocation(line: 6477, column: 11, scope: !11128)
!11132 = !DILocation(line: 6481, column: 8, scope: !11133)
!11133 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 6480, column: 8)
!11134 = distinct !DILexicalBlock(scope: !11130, file: !3, line: 6478, column: 2)
!11135 = !DILocation(line: 6485, column: 9, scope: !11136)
!11136 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 6485, column: 8)
!11137 = !DILocation(line: 6486, column: 8, scope: !11136)
!11138 = !DILocation(line: 6486, column: 12, scope: !11136)
!11139 = !DILocation(line: 6487, column: 8, scope: !11136)
!11140 = !DILocation(line: 6487, column: 12, scope: !11136)
!11141 = !DILocation(line: 6485, column: 8, scope: !11134)
!11142 = !DILocation(line: 6491, column: 17, scope: !11143)
!11143 = distinct !DILexicalBlock(scope: !11134, file: !3, line: 6491, column: 8)
!11144 = !DILocation(line: 6491, column: 8, scope: !11134)
!11145 = !DILocation(line: 6494, column: 14, scope: !11146)
!11146 = distinct !DILexicalBlock(scope: !11143, file: !3, line: 6492, column: 6)
!11147 = !DILocation(line: 6495, column: 6, scope: !11146)
!11148 = !DILocation(line: 6500, column: 17, scope: !11149)
!11149 = distinct !DILexicalBlock(scope: !11150, file: !3, line: 6500, column: 8)
!11150 = distinct !DILexicalBlock(scope: !11130, file: !3, line: 6498, column: 2)
!11151 = !DILocation(line: 6500, column: 8, scope: !11150)
!11152 = !DILocation(line: 6503, column: 8, scope: !11153)
!11153 = distinct !DILexicalBlock(scope: !11150, file: !3, line: 6503, column: 8)
!11154 = !DILocation(line: 6503, column: 41, scope: !11153)
!11155 = !DILocation(line: 6503, column: 8, scope: !11150)
!11156 = !DILocation(line: 6505, column: 13, scope: !11157)
!11157 = distinct !DILexicalBlock(scope: !11153, file: !3, line: 6504, column: 6)
!11158 = !DILocation(line: 6506, column: 53, scope: !11157)
!11159 = !DILocation(line: 6506, column: 14, scope: !11157)
!11160 = !DILocation(line: 6507, column: 13, scope: !11161)
!11161 = distinct !DILexicalBlock(scope: !11157, file: !3, line: 6507, column: 12)
!11162 = !DILocation(line: 6507, column: 17, scope: !11161)
!11163 = !DILocation(line: 6507, column: 21, scope: !11161)
!11164 = !DILocation(line: 6507, column: 12, scope: !11157)
!11165 = !DILocation(line: 6510, column: 53, scope: !11157)
!11166 = !DILocation(line: 6510, column: 14, scope: !11157)
!11167 = !DILocation(line: 6511, column: 13, scope: !11168)
!11168 = distinct !DILexicalBlock(scope: !11157, file: !3, line: 6511, column: 12)
!11169 = !DILocation(line: 6511, column: 17, scope: !11168)
!11170 = !DILocation(line: 6511, column: 21, scope: !11168)
!11171 = !DILocation(line: 6511, column: 12, scope: !11157)
!11172 = !DILocation(line: 0, scope: !11121)
!11173 = !DILocation(line: 6517, column: 7, scope: !11090)
!11174 = !DILocation(line: 6517, column: 14, scope: !11090)
!11175 = !DILocation(line: 6517, column: 11, scope: !11090)
!11176 = !DILocation(line: 6521, column: 12, scope: !11177)
!11177 = distinct !DILexicalBlock(scope: !11089, file: !3, line: 6521, column: 11)
!11178 = !DILocation(line: 6521, column: 11, scope: !11089)
!11179 = !DILocation(line: 6522, column: 13, scope: !11177)
!11180 = !DILocation(line: 0, scope: !11089)
!11181 = !DILocation(line: 6522, column: 2, scope: !11177)
!11182 = !DILocation(line: 6524, column: 13, scope: !11177)
!11183 = !DILocation(line: 0, scope: !11177)
!11184 = !DILocation(line: 6526, column: 38, scope: !11185)
!11185 = distinct !DILexicalBlock(scope: !11089, file: !3, line: 6526, column: 11)
!11186 = !DILocation(line: 6527, column: 9, scope: !11185)
!11187 = !DILocation(line: 6531, column: 9, scope: !11185)
!11188 = !DILocation(line: 6537, column: 33, scope: !11075)
!11189 = !DILocation(line: 6538, column: 12, scope: !11075)
!11190 = !DILocation(line: 6537, column: 6, scope: !11075)
!11191 = !DILocation(line: 6537, column: 5, scope: !11075)
!11192 = !DILocation(line: 6542, column: 7, scope: !11193)
!11193 = distinct !DILexicalBlock(scope: !11075, file: !3, line: 6541, column: 7)
!11194 = !DILocation(line: 6542, column: 11, scope: !11193)
!11195 = !DILocation(line: 6543, column: 7, scope: !11193)
!11196 = !DILocation(line: 6543, column: 10, scope: !11193)
!11197 = !DILocation(line: 6543, column: 43, scope: !11193)
!11198 = !DILocation(line: 6541, column: 7, scope: !11075)
!11199 = !DILocation(line: 6546, column: 3, scope: !11075)
!11200 = !DILocation(line: 6553, column: 7, scope: !11201)
!11201 = distinct !DILexicalBlock(scope: !11075, file: !3, line: 6547, column: 5)
!11202 = !DILocation(line: 6556, column: 11, scope: !11203)
!11203 = distinct !DILexicalBlock(scope: !11201, file: !3, line: 6556, column: 11)
!11204 = !DILocation(line: 6556, column: 11, scope: !11201)
!11205 = !DILocation(line: 6559, column: 8, scope: !11206)
!11206 = distinct !DILexicalBlock(scope: !11203, file: !3, line: 6557, column: 2)
!11207 = !DILocation(line: 6558, column: 4, scope: !11206)
!11208 = !DILocation(line: 6561, column: 17, scope: !11206)
!11209 = !DILocation(line: 6561, column: 4, scope: !11206)
!11210 = !DILocation(line: 6562, column: 4, scope: !11206)
!11211 = !DILocation(line: 6568, column: 7, scope: !11201)
!11212 = !DILocation(line: 6569, column: 5, scope: !11201)
!11213 = !DILocation(line: 6571, column: 7, scope: !11075)
!11214 = !DILocation(line: 6574, column: 3, scope: !11075)
!11215 = !DILocation(line: 6575, column: 16, scope: !11075)
!11216 = !DILocation(line: 6575, column: 3, scope: !11075)
!11217 = !DILocation(line: 6576, column: 3, scope: !11075)
!11218 = !DILocation(line: 6577, column: 1, scope: !11075)
!11219 = distinct !DISubprogram(name: "simplify_div_or_mod_using_ranges", scope: !3, file: !3, line: 6584, type: !4796, scopeLine: 6585, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11220)
!11220 = !{!11221, !11222, !11223, !11224, !11225, !11226, !11227, !11230, !11233}
!11221 = !DILocalVariable(name: "stmt", arg: 1, scope: !11219, file: !3, line: 6584, type: !1017)
!11222 = !DILocalVariable(name: "rhs_code", scope: !11219, file: !3, line: 6586, type: !134)
!11223 = !DILocalVariable(name: "val", scope: !11219, file: !3, line: 6587, type: !693)
!11224 = !DILocalVariable(name: "op0", scope: !11219, file: !3, line: 6588, type: !693)
!11225 = !DILocalVariable(name: "op1", scope: !11219, file: !3, line: 6589, type: !693)
!11226 = !DILocalVariable(name: "vr", scope: !11219, file: !3, line: 6590, type: !687)
!11227 = !DILocalVariable(name: "sop", scope: !11228, file: !3, line: 6598, type: !679)
!11228 = distinct !DILexicalBlock(scope: !11229, file: !3, line: 6597, column: 5)
!11229 = distinct !DILexicalBlock(scope: !11219, file: !3, line: 6592, column: 7)
!11230 = !DILocalVariable(name: "location", scope: !11231, file: !3, line: 6607, type: !818)
!11231 = distinct !DILexicalBlock(scope: !11232, file: !3, line: 6606, column: 2)
!11232 = distinct !DILexicalBlock(scope: !11228, file: !3, line: 6602, column: 11)
!11233 = !DILocalVariable(name: "t", scope: !11234, file: !3, line: 6621, type: !693)
!11234 = distinct !DILexicalBlock(scope: !11235, file: !3, line: 6620, column: 5)
!11235 = distinct !DILexicalBlock(scope: !11219, file: !3, line: 6619, column: 7)
!11236 = !DILocation(line: 0, scope: !11219)
!11237 = !DILocation(line: 6586, column: 29, scope: !11219)
!11238 = !DILocation(line: 6588, column: 14, scope: !11219)
!11239 = !DILocation(line: 6589, column: 14, scope: !11219)
!11240 = !DILocation(line: 6590, column: 40, scope: !11219)
!11241 = !DILocation(line: 6590, column: 23, scope: !11219)
!11242 = !DILocation(line: 6592, column: 7, scope: !11229)
!11243 = !DILocation(line: 6592, column: 7, scope: !11219)
!11244 = !DILocation(line: 6594, column: 13, scope: !11245)
!11245 = distinct !DILexicalBlock(scope: !11229, file: !3, line: 6593, column: 5)
!11246 = !DILocation(line: 6595, column: 5, scope: !11245)
!11247 = !DILocation(line: 0, scope: !11228)
!11248 = !DILocation(line: 6598, column: 7, scope: !11228)
!11249 = !DILocation(line: 6598, column: 12, scope: !11228)
!11250 = !DILocation(line: 6600, column: 52, scope: !11228)
!11251 = !DILocation(line: 6600, column: 13, scope: !11228)
!11252 = !DILocation(line: 6602, column: 11, scope: !11232)
!11253 = !DILocation(line: 6603, column: 4, scope: !11232)
!11254 = !DILocation(line: 6603, column: 7, scope: !11232)
!11255 = !DILocation(line: 6604, column: 4, scope: !11232)
!11256 = !DILocation(line: 6604, column: 7, scope: !11232)
!11257 = !DILocation(line: 6605, column: 7, scope: !11232)
!11258 = !DILocation(line: 6605, column: 4, scope: !11232)
!11259 = !DILocation(line: 6609, column: 9, scope: !11260)
!11260 = distinct !DILexicalBlock(scope: !11231, file: !3, line: 6609, column: 8)
!11261 = !DILocation(line: 6609, column: 8, scope: !11231)
!11262 = !DILocation(line: 6610, column: 17, scope: !11260)
!11263 = !DILocation(line: 0, scope: !11231)
!11264 = !DILocation(line: 6610, column: 6, scope: !11260)
!11265 = !DILocation(line: 6612, column: 17, scope: !11260)
!11266 = !DILocation(line: 0, scope: !11260)
!11267 = !DILocation(line: 6613, column: 4, scope: !11231)
!11268 = !DILocation(line: 6616, column: 2, scope: !11231)
!11269 = !DILocation(line: 6617, column: 5, scope: !11229)
!11270 = !DILocation(line: 0, scope: !11229)
!11271 = !DILocation(line: 6619, column: 7, scope: !11235)
!11272 = !DILocation(line: 6619, column: 11, scope: !11235)
!11273 = !DILocation(line: 6619, column: 14, scope: !11235)
!11274 = !DILocation(line: 6619, column: 7, scope: !11219)
!11275 = !DILocation(line: 6623, column: 20, scope: !11276)
!11276 = distinct !DILexicalBlock(scope: !11234, file: !3, line: 6623, column: 11)
!11277 = !DILocation(line: 6623, column: 11, scope: !11234)
!11278 = !DILocation(line: 6625, column: 34, scope: !11279)
!11279 = distinct !DILexicalBlock(scope: !11276, file: !3, line: 6624, column: 2)
!11280 = !DILocation(line: 6625, column: 8, scope: !11279)
!11281 = !DILocation(line: 0, scope: !11234)
!11282 = !DILocation(line: 6626, column: 4, scope: !11279)
!11283 = !DILocation(line: 6627, column: 4, scope: !11279)
!11284 = !DILocation(line: 6628, column: 4, scope: !11279)
!11285 = !DILocation(line: 6629, column: 2, scope: !11279)
!11286 = !DILocation(line: 6632, column: 23, scope: !11287)
!11287 = distinct !DILexicalBlock(scope: !11276, file: !3, line: 6631, column: 2)
!11288 = !DILocation(line: 6632, column: 8, scope: !11287)
!11289 = !DILocation(line: 6633, column: 8, scope: !11287)
!11290 = !DILocation(line: 6634, column: 8, scope: !11287)
!11291 = !DILocation(line: 6636, column: 4, scope: !11287)
!11292 = !DILocation(line: 6637, column: 4, scope: !11287)
!11293 = !DILocation(line: 6638, column: 4, scope: !11287)
!11294 = !DILocation(line: 6641, column: 7, scope: !11234)
!11295 = !DILocation(line: 6646, column: 1, scope: !11219)
!11296 = distinct !DISubprogram(name: "simplify_abs_using_ranges", scope: !3, file: !3, line: 6653, type: !4796, scopeLine: 6654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11297)
!11297 = !{!11298, !11299, !11300, !11301, !11302, !11303, !11307}
!11298 = !DILocalVariable(name: "stmt", arg: 1, scope: !11296, file: !3, line: 6653, type: !1017)
!11299 = !DILocalVariable(name: "val", scope: !11296, file: !3, line: 6655, type: !693)
!11300 = !DILocalVariable(name: "op", scope: !11296, file: !3, line: 6656, type: !693)
!11301 = !DILocalVariable(name: "type", scope: !11296, file: !3, line: 6657, type: !693)
!11302 = !DILocalVariable(name: "vr", scope: !11296, file: !3, line: 6658, type: !687)
!11303 = !DILocalVariable(name: "sop", scope: !11304, file: !3, line: 6666, type: !679)
!11304 = distinct !DILexicalBlock(scope: !11305, file: !3, line: 6665, column: 5)
!11305 = distinct !DILexicalBlock(scope: !11306, file: !3, line: 6664, column: 12)
!11306 = distinct !DILexicalBlock(scope: !11296, file: !3, line: 6660, column: 7)
!11307 = !DILocalVariable(name: "location", scope: !11308, file: !3, line: 6689, type: !818)
!11308 = distinct !DILexicalBlock(scope: !11309, file: !3, line: 6688, column: 6)
!11309 = distinct !DILexicalBlock(scope: !11310, file: !3, line: 6687, column: 8)
!11310 = distinct !DILexicalBlock(scope: !11311, file: !3, line: 6686, column: 2)
!11311 = distinct !DILexicalBlock(scope: !11304, file: !3, line: 6684, column: 11)
!11312 = !DILocation(line: 0, scope: !11296)
!11313 = !DILocation(line: 6656, column: 13, scope: !11296)
!11314 = !DILocation(line: 6657, column: 15, scope: !11296)
!11315 = !DILocation(line: 6658, column: 23, scope: !11296)
!11316 = !DILocation(line: 6660, column: 7, scope: !11306)
!11317 = !DILocation(line: 6660, column: 7, scope: !11296)
!11318 = !DILocation(line: 6663, column: 5, scope: !11319)
!11319 = distinct !DILexicalBlock(scope: !11306, file: !3, line: 6661, column: 5)
!11320 = !DILocation(line: 6664, column: 12, scope: !11305)
!11321 = !DILocation(line: 6664, column: 12, scope: !11306)
!11322 = !DILocation(line: 0, scope: !11304)
!11323 = !DILocation(line: 6666, column: 7, scope: !11304)
!11324 = !DILocation(line: 6666, column: 12, scope: !11304)
!11325 = !DILocation(line: 6668, column: 52, scope: !11304)
!11326 = !DILocation(line: 6668, column: 13, scope: !11304)
!11327 = !DILocation(line: 6669, column: 12, scope: !11328)
!11328 = distinct !DILexicalBlock(scope: !11304, file: !3, line: 6669, column: 11)
!11329 = !DILocation(line: 6669, column: 11, scope: !11304)
!11330 = !DILocation(line: 6671, column: 8, scope: !11331)
!11331 = distinct !DILexicalBlock(scope: !11328, file: !3, line: 6670, column: 2)
!11332 = !DILocation(line: 6672, column: 49, scope: !11331)
!11333 = !DILocation(line: 6672, column: 10, scope: !11331)
!11334 = !DILocation(line: 6675, column: 8, scope: !11335)
!11335 = distinct !DILexicalBlock(scope: !11331, file: !3, line: 6675, column: 8)
!11336 = !DILocation(line: 6675, column: 8, scope: !11331)
!11337 = !DILocation(line: 6677, column: 12, scope: !11338)
!11338 = distinct !DILexicalBlock(scope: !11339, file: !3, line: 6677, column: 12)
!11339 = distinct !DILexicalBlock(scope: !11335, file: !3, line: 6676, column: 6)
!11340 = !DILocation(line: 6677, column: 12, scope: !11339)
!11341 = !DILocation(line: 6678, column: 9, scope: !11338)
!11342 = !DILocation(line: 6678, column: 3, scope: !11338)
!11343 = !DILocation(line: 6679, column: 17, scope: !11344)
!11344 = distinct !DILexicalBlock(scope: !11338, file: !3, line: 6679, column: 17)
!11345 = !DILocation(line: 6680, column: 9, scope: !11344)
!11346 = !DILocation(line: 6679, column: 17, scope: !11338)
!11347 = !DILocation(line: 6684, column: 11, scope: !11311)
!11348 = !DILocation(line: 6685, column: 4, scope: !11311)
!11349 = !DILocation(line: 6685, column: 8, scope: !11311)
!11350 = !DILocation(line: 6685, column: 27, scope: !11311)
!11351 = !DILocation(line: 6685, column: 30, scope: !11311)
!11352 = !DILocation(line: 6684, column: 11, scope: !11304)
!11353 = !DILocation(line: 6687, column: 8, scope: !11309)
!11354 = !DILocation(line: 6687, column: 15, scope: !11309)
!11355 = !DILocation(line: 6687, column: 12, scope: !11309)
!11356 = !DILocation(line: 6691, column: 13, scope: !11357)
!11357 = distinct !DILexicalBlock(scope: !11308, file: !3, line: 6691, column: 12)
!11358 = !DILocation(line: 6691, column: 12, scope: !11308)
!11359 = !DILocation(line: 6692, column: 14, scope: !11357)
!11360 = !DILocation(line: 0, scope: !11308)
!11361 = !DILocation(line: 6692, column: 3, scope: !11357)
!11362 = !DILocation(line: 6694, column: 14, scope: !11357)
!11363 = !DILocation(line: 0, scope: !11357)
!11364 = !DILocation(line: 6695, column: 8, scope: !11308)
!11365 = !DILocation(line: 6698, column: 6, scope: !11308)
!11366 = !DILocation(line: 6700, column: 4, scope: !11310)
!11367 = !DILocation(line: 6701, column: 8, scope: !11368)
!11368 = distinct !DILexicalBlock(scope: !11310, file: !3, line: 6701, column: 8)
!11369 = !DILocation(line: 6701, column: 8, scope: !11310)
!11370 = !DILocation(line: 6702, column: 6, scope: !11368)
!11371 = !DILocation(line: 6704, column: 6, scope: !11368)
!11372 = !DILocation(line: 6705, column: 4, scope: !11310)
!11373 = !DILocation(line: 6706, column: 4, scope: !11310)
!11374 = !DILocation(line: 6708, column: 5, scope: !11305)
!11375 = !DILocation(line: 6710, column: 3, scope: !11296)
!11376 = !DILocation(line: 6711, column: 1, scope: !11296)
!11377 = distinct !DISubprogram(name: "simplify_cond_using_ranges", scope: !3, file: !3, line: 6782, type: !4796, scopeLine: 6783, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11378)
!11378 = !{!11379, !11380, !11381, !11382, !11383, !11386}
!11379 = !DILocalVariable(name: "stmt", arg: 1, scope: !11377, file: !3, line: 6782, type: !1017)
!11380 = !DILocalVariable(name: "op0", scope: !11377, file: !3, line: 6784, type: !693)
!11381 = !DILocalVariable(name: "op1", scope: !11377, file: !3, line: 6785, type: !693)
!11382 = !DILocalVariable(name: "cond_code", scope: !11377, file: !3, line: 6786, type: !134)
!11383 = !DILocalVariable(name: "vr", scope: !11384, file: !3, line: 6794, type: !687)
!11384 = distinct !DILexicalBlock(scope: !11385, file: !3, line: 6793, column: 5)
!11385 = distinct !DILexicalBlock(scope: !11377, file: !3, line: 6788, column: 7)
!11386 = !DILocalVariable(name: "new_tree", scope: !11387, file: !3, line: 6800, type: !693)
!11387 = distinct !DILexicalBlock(scope: !11388, file: !3, line: 6799, column: 2)
!11388 = distinct !DILexicalBlock(scope: !11384, file: !3, line: 6798, column: 11)
!11389 = !DILocation(line: 0, scope: !11377)
!11390 = !DILocation(line: 6784, column: 14, scope: !11377)
!11391 = !DILocation(line: 6785, column: 14, scope: !11377)
!11392 = !DILocation(line: 6786, column: 30, scope: !11377)
!11393 = !DILocation(line: 6789, column: 7, scope: !11385)
!11394 = !DILocation(line: 6790, column: 10, scope: !11385)
!11395 = !DILocation(line: 6790, column: 26, scope: !11385)
!11396 = !DILocation(line: 6791, column: 7, scope: !11385)
!11397 = !DILocation(line: 6791, column: 10, scope: !11385)
!11398 = !DILocation(line: 6792, column: 7, scope: !11385)
!11399 = !DILocation(line: 6792, column: 10, scope: !11385)
!11400 = !DILocation(line: 6788, column: 7, scope: !11377)
!11401 = !DILocation(line: 6794, column: 27, scope: !11384)
!11402 = !DILocation(line: 0, scope: !11384)
!11403 = !DILocation(line: 6798, column: 15, scope: !11388)
!11404 = !DILocation(line: 6798, column: 20, scope: !11388)
!11405 = !DILocation(line: 6798, column: 11, scope: !11384)
!11406 = !DILocation(line: 6800, column: 20, scope: !11387)
!11407 = !DILocation(line: 0, scope: !11387)
!11408 = !DILocation(line: 6802, column: 8, scope: !11409)
!11409 = distinct !DILexicalBlock(scope: !11387, file: !3, line: 6802, column: 8)
!11410 = !DILocation(line: 6802, column: 8, scope: !11387)
!11411 = !DILocation(line: 6804, column: 12, scope: !11412)
!11412 = distinct !DILexicalBlock(scope: !11413, file: !3, line: 6804, column: 12)
!11413 = distinct !DILexicalBlock(scope: !11409, file: !3, line: 6803, column: 6)
!11414 = !DILocation(line: 6804, column: 12, scope: !11413)
!11415 = !DILocation(line: 6806, column: 5, scope: !11416)
!11416 = distinct !DILexicalBlock(scope: !11412, file: !3, line: 6805, column: 3)
!11417 = !DILocation(line: 6807, column: 24, scope: !11416)
!11418 = !DILocation(line: 6807, column: 5, scope: !11416)
!11419 = !DILocation(line: 6808, column: 14, scope: !11416)
!11420 = !DILocation(line: 6808, column: 5, scope: !11416)
!11421 = !DILocation(line: 6809, column: 3, scope: !11416)
!11422 = !DILocation(line: 6811, column: 8, scope: !11413)
!11423 = !DILocation(line: 6812, column: 8, scope: !11413)
!11424 = !DILocation(line: 6813, column: 8, scope: !11413)
!11425 = !DILocation(line: 6815, column: 8, scope: !11413)
!11426 = !DILocation(line: 6817, column: 12, scope: !11427)
!11427 = distinct !DILexicalBlock(scope: !11413, file: !3, line: 6817, column: 12)
!11428 = !DILocation(line: 6817, column: 12, scope: !11413)
!11429 = !DILocation(line: 6819, column: 5, scope: !11430)
!11430 = distinct !DILexicalBlock(scope: !11427, file: !3, line: 6818, column: 3)
!11431 = !DILocation(line: 6820, column: 14, scope: !11430)
!11432 = !DILocation(line: 6820, column: 5, scope: !11430)
!11433 = !DILocation(line: 6821, column: 3, scope: !11430)
!11434 = !DILocation(line: 6829, column: 16, scope: !11387)
!11435 = !DILocation(line: 6830, column: 15, scope: !11387)
!11436 = !DILocation(line: 6832, column: 8, scope: !11437)
!11437 = distinct !DILexicalBlock(scope: !11387, file: !3, line: 6832, column: 8)
!11438 = !DILocation(line: 6832, column: 8, scope: !11387)
!11439 = !DILocation(line: 6834, column: 12, scope: !11440)
!11440 = distinct !DILexicalBlock(scope: !11441, file: !3, line: 6834, column: 12)
!11441 = distinct !DILexicalBlock(scope: !11437, file: !3, line: 6833, column: 6)
!11442 = !DILocation(line: 6834, column: 12, scope: !11441)
!11443 = !DILocation(line: 6836, column: 5, scope: !11444)
!11444 = distinct !DILexicalBlock(scope: !11440, file: !3, line: 6835, column: 3)
!11445 = !DILocation(line: 6837, column: 24, scope: !11444)
!11446 = !DILocation(line: 6837, column: 5, scope: !11444)
!11447 = !DILocation(line: 6838, column: 14, scope: !11444)
!11448 = !DILocation(line: 6838, column: 5, scope: !11444)
!11449 = !DILocation(line: 6839, column: 3, scope: !11444)
!11450 = !DILocation(line: 6841, column: 8, scope: !11441)
!11451 = !DILocation(line: 6842, column: 8, scope: !11441)
!11452 = !DILocation(line: 6843, column: 8, scope: !11441)
!11453 = !DILocation(line: 6845, column: 8, scope: !11441)
!11454 = !DILocation(line: 6847, column: 12, scope: !11455)
!11455 = distinct !DILexicalBlock(scope: !11441, file: !3, line: 6847, column: 12)
!11456 = !DILocation(line: 6847, column: 12, scope: !11441)
!11457 = !DILocation(line: 6849, column: 5, scope: !11458)
!11458 = distinct !DILexicalBlock(scope: !11455, file: !3, line: 6848, column: 3)
!11459 = !DILocation(line: 6850, column: 14, scope: !11458)
!11460 = !DILocation(line: 6850, column: 5, scope: !11458)
!11461 = !DILocation(line: 6851, column: 3, scope: !11458)
!11462 = !DILocation(line: 6856, column: 5, scope: !11385)
!11463 = !DILocation(line: 6858, column: 3, scope: !11377)
!11464 = !DILocation(line: 6859, column: 1, scope: !11377)
!11465 = distinct !DISubprogram(name: "simplify_switch_using_ranges", scope: !3, file: !3, line: 6865, type: !4796, scopeLine: 6866, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11466)
!11466 = !{!11467, !11468, !11469, !11470, !11471, !11472, !11473, !11474, !11475, !11476, !11477, !11478}
!11467 = !DILocalVariable(name: "stmt", arg: 1, scope: !11465, file: !3, line: 6865, type: !1017)
!11468 = !DILocalVariable(name: "op", scope: !11465, file: !3, line: 6867, type: !693)
!11469 = !DILocalVariable(name: "vr", scope: !11465, file: !3, line: 6868, type: !687)
!11470 = !DILocalVariable(name: "take_default", scope: !11465, file: !3, line: 6869, type: !679)
!11471 = !DILocalVariable(name: "e", scope: !11465, file: !3, line: 6870, type: !997)
!11472 = !DILocalVariable(name: "ei", scope: !11465, file: !3, line: 6871, type: !4372)
!11473 = !DILocalVariable(name: "i", scope: !11465, file: !3, line: 6872, type: !1162)
!11474 = !DILocalVariable(name: "j", scope: !11465, file: !3, line: 6872, type: !1162)
!11475 = !DILocalVariable(name: "n", scope: !11465, file: !3, line: 6872, type: !1162)
!11476 = !DILocalVariable(name: "n2", scope: !11465, file: !3, line: 6872, type: !1162)
!11477 = !DILocalVariable(name: "vec2", scope: !11465, file: !3, line: 6873, type: !693)
!11478 = !DILocalVariable(name: "su", scope: !11465, file: !3, line: 6874, type: !2103)
!11479 = !DILocation(line: 0, scope: !11465)
!11480 = !DILocation(line: 6867, column: 13, scope: !11465)
!11481 = !DILocation(line: 6870, column: 3, scope: !11465)
!11482 = !DILocation(line: 6871, column: 3, scope: !11465)
!11483 = !DILocation(line: 6872, column: 3, scope: !11465)
!11484 = !DILocation(line: 6872, column: 10, scope: !11465)
!11485 = !DILocation(line: 6872, column: 17, scope: !11465)
!11486 = !DILocation(line: 6874, column: 3, scope: !11465)
!11487 = !DILocation(line: 6876, column: 7, scope: !11488)
!11488 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 6876, column: 7)
!11489 = !DILocation(line: 6876, column: 22, scope: !11488)
!11490 = !DILocation(line: 6876, column: 7, scope: !11465)
!11491 = !DILocation(line: 6878, column: 12, scope: !11492)
!11492 = distinct !DILexicalBlock(scope: !11488, file: !3, line: 6877, column: 5)
!11493 = !DILocation(line: 6881, column: 15, scope: !11494)
!11494 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 6881, column: 11)
!11495 = !DILocation(line: 6881, column: 20, scope: !11494)
!11496 = !DILocation(line: 6882, column: 4, scope: !11494)
!11497 = !DILocation(line: 6882, column: 7, scope: !11494)
!11498 = !DILocation(line: 6881, column: 11, scope: !11492)
!11499 = !DILocation(line: 6886, column: 56, scope: !11492)
!11500 = !DILocation(line: 6886, column: 65, scope: !11492)
!11501 = !DILocation(line: 6886, column: 23, scope: !11492)
!11502 = !DILocation(line: 6886, column: 22, scope: !11492)
!11503 = !DILocation(line: 6887, column: 5, scope: !11492)
!11504 = !DILocation(line: 6888, column: 27, scope: !11505)
!11505 = distinct !DILexicalBlock(scope: !11488, file: !3, line: 6888, column: 12)
!11506 = !DILocation(line: 6888, column: 12, scope: !11488)
!11507 = !DILocation(line: 6890, column: 23, scope: !11508)
!11508 = distinct !DILexicalBlock(scope: !11505, file: !3, line: 6889, column: 5)
!11509 = !DILocation(line: 6890, column: 22, scope: !11508)
!11510 = !DILocation(line: 6891, column: 11, scope: !11508)
!11511 = !DILocation(line: 6893, column: 6, scope: !11512)
!11512 = distinct !DILexicalBlock(scope: !11513, file: !3, line: 6892, column: 2)
!11513 = distinct !DILexicalBlock(scope: !11508, file: !3, line: 6891, column: 11)
!11514 = !DILocation(line: 6894, column: 6, scope: !11512)
!11515 = !DILocation(line: 6895, column: 2, scope: !11512)
!11516 = !DILocation(line: 6898, column: 8, scope: !11517)
!11517 = distinct !DILexicalBlock(scope: !11513, file: !3, line: 6897, column: 2)
!11518 = !DILocation(line: 6898, column: 6, scope: !11517)
!11519 = !DILocation(line: 0, scope: !11488)
!11520 = !DILocation(line: 6904, column: 7, scope: !11465)
!11521 = !DILocation(line: 6907, column: 7, scope: !11522)
!11522 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 6907, column: 7)
!11523 = !DILocation(line: 6907, column: 9, scope: !11522)
!11524 = !DILocation(line: 6908, column: 7, scope: !11522)
!11525 = !DILocation(line: 6913, column: 10, scope: !11465)
!11526 = !DILocation(line: 6908, column: 10, scope: !11522)
!11527 = !DILocation(line: 6908, column: 17, scope: !11522)
!11528 = !DILocation(line: 6908, column: 12, scope: !11522)
!11529 = !DILocation(line: 6909, column: 10, scope: !11522)
!11530 = !DILocation(line: 6909, column: 7, scope: !11522)
!11531 = !DILocation(line: 6917, column: 7, scope: !11532)
!11532 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 6917, column: 7)
!11533 = !DILocation(line: 6917, column: 7, scope: !11465)
!11534 = !DILocation(line: 6918, column: 33, scope: !11532)
!11535 = !DILocation(line: 6918, column: 5, scope: !11532)
!11536 = !DILocation(line: 6918, column: 31, scope: !11532)
!11537 = !DILocation(line: 0, scope: !11538)
!11538 = distinct !DILexicalBlock(scope: !11539, file: !3, line: 6920, column: 3)
!11539 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 6920, column: 3)
!11540 = !DILocation(line: 6920, column: 10, scope: !11538)
!11541 = !DILocation(line: 6920, column: 3, scope: !11465)
!11542 = !DILocation(line: 6920, column: 15, scope: !11538)
!11543 = !DILocation(line: 6920, column: 12, scope: !11538)
!11544 = !DILocation(line: 6920, column: 3, scope: !11539)
!11545 = !DILocation(line: 6921, column: 58, scope: !11538)
!11546 = !DILocation(line: 6921, column: 31, scope: !11538)
!11547 = !DILocation(line: 6921, column: 5, scope: !11538)
!11548 = !DILocation(line: 6921, column: 29, scope: !11538)
!11549 = !DILocation(line: 6920, column: 18, scope: !11538)
!11550 = !DILocation(line: 6920, column: 23, scope: !11538)
!11551 = !DILocation(line: 6920, column: 3, scope: !11538)
!11552 = distinct !{!11552, !11544, !11553}
!11553 = !DILocation(line: 6921, column: 59, scope: !11539)
!11554 = !DILocation(line: 6924, column: 8, scope: !11555)
!11555 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 6924, column: 3)
!11556 = !DILocation(line: 0, scope: !11555)
!11557 = !DILocation(line: 6924, column: 17, scope: !11558)
!11558 = distinct !DILexicalBlock(scope: !11555, file: !3, line: 6924, column: 3)
!11559 = !DILocation(line: 6924, column: 3, scope: !11555)
!11560 = !DILocation(line: 6926, column: 22, scope: !11561)
!11561 = distinct !DILexicalBlock(scope: !11558, file: !3, line: 6925, column: 5)
!11562 = !DILocation(line: 6927, column: 8, scope: !11561)
!11563 = !DILocation(line: 6926, column: 11, scope: !11561)
!11564 = !DILocation(line: 6926, column: 9, scope: !11561)
!11565 = !DILocation(line: 6928, column: 10, scope: !11561)
!11566 = !DILocation(line: 6928, column: 14, scope: !11561)
!11567 = !DILocation(line: 6924, column: 23, scope: !11558)
!11568 = !DILocation(line: 6924, column: 3, scope: !11558)
!11569 = distinct !{!11569, !11559, !11570}
!11570 = !DILocation(line: 6929, column: 5, scope: !11555)
!11571 = !DILocation(line: 6932, column: 3, scope: !11572)
!11572 = distinct !DILexicalBlock(scope: !11465, file: !3, line: 6932, column: 3)
!11573 = !DILocation(line: 0, scope: !11574)
!11574 = distinct !DILexicalBlock(scope: !11572, file: !3, line: 6932, column: 3)
!11575 = !DILocation(line: 6932, column: 3, scope: !11574)
!11576 = !DILocation(line: 6934, column: 11, scope: !11577)
!11577 = distinct !DILexicalBlock(scope: !11578, file: !3, line: 6934, column: 11)
!11578 = distinct !DILexicalBlock(scope: !11574, file: !3, line: 6933, column: 5)
!11579 = !DILocation(line: 6934, column: 14, scope: !11577)
!11580 = !DILocation(line: 6934, column: 18, scope: !11577)
!11581 = !DILocation(line: 6934, column: 11, scope: !11578)
!11582 = !DILocation(line: 6936, column: 11, scope: !11583)
!11583 = distinct !DILexicalBlock(scope: !11577, file: !3, line: 6935, column: 2)
!11584 = !DILocation(line: 6937, column: 4, scope: !11583)
!11585 = !DILocation(line: 6940, column: 11, scope: !11586)
!11586 = distinct !DILexicalBlock(scope: !11578, file: !3, line: 6940, column: 11)
!11587 = !DILocation(line: 6940, column: 21, scope: !11586)
!11588 = !DILocation(line: 6940, column: 25, scope: !11586)
!11589 = !DILocation(line: 6940, column: 36, scope: !11586)
!11590 = !DILocation(line: 6940, column: 11, scope: !11578)
!11591 = !DILocation(line: 6942, column: 4, scope: !11592)
!11592 = distinct !DILexicalBlock(scope: !11586, file: !3, line: 6941, column: 2)
!11593 = !DILocation(line: 6944, column: 7, scope: !11578)
!11594 = !DILocation(line: 6943, column: 2, scope: !11592)
!11595 = !DILocation(line: 6945, column: 7, scope: !11578)
!11596 = !DILocation(line: 6945, column: 10, scope: !11578)
!11597 = !DILocation(line: 6945, column: 16, scope: !11578)
!11598 = !DILocation(line: 6946, column: 5, scope: !11578)
!11599 = distinct !{!11599, !11571, !11600}
!11600 = !DILocation(line: 6946, column: 5, scope: !11572)
!11601 = !DILocation(line: 6949, column: 6, scope: !11465)
!11602 = !DILocation(line: 6949, column: 11, scope: !11465)
!11603 = !DILocation(line: 6950, column: 6, scope: !11465)
!11604 = !DILocation(line: 6950, column: 10, scope: !11465)
!11605 = !DILocation(line: 6951, column: 3, scope: !11465)
!11606 = !DILocation(line: 6952, column: 3, scope: !11465)
!11607 = !DILocation(line: 6953, column: 1, scope: !11465)
!11608 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !588, file: !588, line: 1694, type: !4323, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11609)
!11609 = !{!11610}
!11610 = !DILocalVariable(name: "gs", arg: 1, scope: !11608, file: !588, line: 1694, type: !4325)
!11611 = !DILocation(line: 0, scope: !11608)
!11612 = !DILocation(line: 1697, column: 10, scope: !11608)
!11613 = !DILocation(line: 1697, column: 3, scope: !11608)
!11614 = distinct !DISubprogram(name: "update_stmt", scope: !588, file: !588, line: 1456, type: !11011, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11615)
!11615 = !{!11616}
!11616 = !DILocalVariable(name: "s", arg: 1, scope: !11614, file: !588, line: 1456, type: !1017)
!11617 = !DILocation(line: 0, scope: !11614)
!11618 = !DILocation(line: 1458, column: 7, scope: !11619)
!11619 = distinct !DILexicalBlock(scope: !11614, file: !588, line: 1458, column: 7)
!11620 = !DILocation(line: 1458, column: 7, scope: !11614)
!11621 = !DILocation(line: 1460, column: 7, scope: !11622)
!11622 = distinct !DILexicalBlock(scope: !11619, file: !588, line: 1459, column: 5)
!11623 = !DILocation(line: 1461, column: 7, scope: !11622)
!11624 = !DILocation(line: 1462, column: 5, scope: !11622)
!11625 = !DILocation(line: 1463, column: 1, scope: !11614)
!11626 = distinct !DISubprogram(name: "gimple_assign_set_rhs_code", scope: !588, file: !588, line: 1832, type: !11627, scopeLine: 1833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11629)
!11627 = !DISubroutineType(types: !11628)
!11628 = !{null, !1017, !134}
!11629 = !{!11630, !11631}
!11630 = !DILocalVariable(name: "s", arg: 1, scope: !11626, file: !588, line: 1832, type: !1017)
!11631 = !DILocalVariable(name: "code", arg: 2, scope: !11626, file: !588, line: 1832, type: !134)
!11632 = !DILocation(line: 0, scope: !11626)
!11633 = !DILocation(line: 1835, column: 13, scope: !11626)
!11634 = !DILocation(line: 1835, column: 21, scope: !11626)
!11635 = !DILocation(line: 1836, column: 1, scope: !11626)
!11636 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !588, file: !588, line: 1747, type: !11050, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11637)
!11637 = !{!11638, !11639}
!11638 = !DILocalVariable(name: "gs", arg: 1, scope: !11636, file: !588, line: 1747, type: !1017)
!11639 = !DILocalVariable(name: "rhs", arg: 2, scope: !11636, file: !588, line: 1747, type: !693)
!11640 = !DILocation(line: 0, scope: !11636)
!11641 = !DILocation(line: 1751, column: 3, scope: !11636)
!11642 = !DILocation(line: 1752, column: 1, scope: !11636)
!11643 = distinct !DISubprogram(name: "gimple_assign_set_rhs2", scope: !588, file: !588, line: 1784, type: !11050, scopeLine: 1785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11644)
!11644 = !{!11645, !11646}
!11645 = !DILocalVariable(name: "gs", arg: 1, scope: !11643, file: !588, line: 1784, type: !1017)
!11646 = !DILocalVariable(name: "rhs", arg: 2, scope: !11643, file: !588, line: 1784, type: !693)
!11647 = !DILocation(line: 0, scope: !11643)
!11648 = !DILocation(line: 1788, column: 3, scope: !11643)
!11649 = !DILocation(line: 1789, column: 1, scope: !11643)
!11650 = distinct !DISubprogram(name: "test_for_singularity", scope: !3, file: !3, line: 6720, type: !11651, scopeLine: 6722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11653)
!11651 = !DISubroutineType(types: !11652)
!11652 = !{!693, !134, !693, !693, !687}
!11653 = !{!11654, !11655, !11656, !11657, !11658, !11659, !11660, !11665}
!11654 = !DILocalVariable(name: "cond_code", arg: 1, scope: !11650, file: !3, line: 6720, type: !134)
!11655 = !DILocalVariable(name: "op0", arg: 2, scope: !11650, file: !3, line: 6720, type: !693)
!11656 = !DILocalVariable(name: "op1", arg: 3, scope: !11650, file: !3, line: 6721, type: !693)
!11657 = !DILocalVariable(name: "vr", arg: 4, scope: !11650, file: !3, line: 6721, type: !687)
!11658 = !DILocalVariable(name: "min", scope: !11650, file: !3, line: 6723, type: !693)
!11659 = !DILocalVariable(name: "max", scope: !11650, file: !3, line: 6724, type: !693)
!11660 = !DILocalVariable(name: "one", scope: !11661, file: !3, line: 6737, type: !693)
!11661 = distinct !DILexicalBlock(scope: !11662, file: !3, line: 6736, column: 2)
!11662 = distinct !DILexicalBlock(scope: !11663, file: !3, line: 6735, column: 11)
!11663 = distinct !DILexicalBlock(scope: !11664, file: !3, line: 6729, column: 5)
!11664 = distinct !DILexicalBlock(scope: !11650, file: !3, line: 6728, column: 7)
!11665 = !DILocalVariable(name: "one", scope: !11666, file: !3, line: 6752, type: !693)
!11666 = distinct !DILexicalBlock(scope: !11667, file: !3, line: 6751, column: 2)
!11667 = distinct !DILexicalBlock(scope: !11668, file: !3, line: 6750, column: 11)
!11668 = distinct !DILexicalBlock(scope: !11669, file: !3, line: 6744, column: 5)
!11669 = distinct !DILexicalBlock(scope: !11664, file: !3, line: 6743, column: 12)
!11670 = !DILocation(line: 0, scope: !11650)
!11671 = !DILocation(line: 6728, column: 28, scope: !11664)
!11672 = !DILocation(line: 6732, column: 13, scope: !11663)
!11673 = !DILocation(line: 6735, column: 21, scope: !11662)
!11674 = !DILocation(line: 6735, column: 32, scope: !11662)
!11675 = !DILocation(line: 6735, column: 36, scope: !11662)
!11676 = !DILocation(line: 6735, column: 11, scope: !11663)
!11677 = !DILocation(line: 6737, column: 30, scope: !11661)
!11678 = !DILocation(line: 6737, column: 15, scope: !11661)
!11679 = !DILocation(line: 0, scope: !11661)
!11680 = !DILocation(line: 6738, column: 10, scope: !11661)
!11681 = !DILocation(line: 6739, column: 8, scope: !11682)
!11682 = distinct !DILexicalBlock(scope: !11661, file: !3, line: 6739, column: 8)
!11683 = !DILocation(line: 6739, column: 8, scope: !11661)
!11684 = !DILocation(line: 6740, column: 28, scope: !11682)
!11685 = !DILocation(line: 6740, column: 6, scope: !11682)
!11686 = !DILocation(line: 6747, column: 13, scope: !11668)
!11687 = !DILocation(line: 6750, column: 21, scope: !11667)
!11688 = !DILocation(line: 6750, column: 32, scope: !11667)
!11689 = !DILocation(line: 6750, column: 36, scope: !11667)
!11690 = !DILocation(line: 6750, column: 11, scope: !11668)
!11691 = !DILocation(line: 6752, column: 30, scope: !11666)
!11692 = !DILocation(line: 6752, column: 15, scope: !11666)
!11693 = !DILocation(line: 0, scope: !11666)
!11694 = !DILocation(line: 6753, column: 10, scope: !11666)
!11695 = !DILocation(line: 6754, column: 8, scope: !11696)
!11696 = distinct !DILexicalBlock(scope: !11666, file: !3, line: 6754, column: 8)
!11697 = !DILocation(line: 6754, column: 8, scope: !11666)
!11698 = !DILocation(line: 6755, column: 28, scope: !11696)
!11699 = !DILocation(line: 6755, column: 6, scope: !11696)
!11700 = !DILocation(line: 0, scope: !11664)
!11701 = !DILocation(line: 6761, column: 7, scope: !11702)
!11702 = distinct !DILexicalBlock(scope: !11650, file: !3, line: 6761, column: 7)
!11703 = !DILocation(line: 6761, column: 14, scope: !11702)
!11704 = !DILocation(line: 6761, column: 11, scope: !11702)
!11705 = !DILocation(line: 6763, column: 31, scope: !11706)
!11706 = distinct !DILexicalBlock(scope: !11707, file: !3, line: 6763, column: 11)
!11707 = distinct !DILexicalBlock(scope: !11702, file: !3, line: 6762, column: 5)
!11708 = !DILocation(line: 6763, column: 11, scope: !11706)
!11709 = !DILocation(line: 6763, column: 41, scope: !11706)
!11710 = !DILocation(line: 6763, column: 11, scope: !11707)
!11711 = !DILocation(line: 6764, column: 12, scope: !11706)
!11712 = !DILocation(line: 6764, column: 2, scope: !11706)
!11713 = !DILocation(line: 6765, column: 31, scope: !11714)
!11714 = distinct !DILexicalBlock(scope: !11707, file: !3, line: 6765, column: 11)
!11715 = !DILocation(line: 6765, column: 11, scope: !11714)
!11716 = !DILocation(line: 6765, column: 41, scope: !11714)
!11717 = !DILocation(line: 6765, column: 11, scope: !11707)
!11718 = !DILocation(line: 6766, column: 12, scope: !11714)
!11719 = !DILocation(line: 6766, column: 2, scope: !11714)
!11720 = !DILocation(line: 6771, column: 11, scope: !11721)
!11721 = distinct !DILexicalBlock(scope: !11707, file: !3, line: 6771, column: 11)
!11722 = !DILocation(line: 6771, column: 41, scope: !11721)
!11723 = !DILocation(line: 6771, column: 44, scope: !11721)
!11724 = !DILocation(line: 6771, column: 11, scope: !11707)
!11725 = !DILocation(line: 6774, column: 3, scope: !11650)
!11726 = !DILocation(line: 6775, column: 1, scope: !11650)
!11727 = distinct !DISubprogram(name: "gimple_cond_set_code", scope: !588, file: !588, line: 2231, type: !11627, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11728)
!11728 = !{!11729, !11730}
!11729 = !DILocalVariable(name: "gs", arg: 1, scope: !11727, file: !588, line: 2231, type: !1017)
!11730 = !DILocalVariable(name: "code", arg: 2, scope: !11727, file: !588, line: 2231, type: !134)
!11731 = !DILocation(line: 0, scope: !11727)
!11732 = !DILocation(line: 2234, column: 14, scope: !11727)
!11733 = !DILocation(line: 2234, column: 22, scope: !11727)
!11734 = !DILocation(line: 2235, column: 1, scope: !11727)
!11735 = distinct !DISubprogram(name: "VEC_edge_heap_safe_push", scope: !343, file: !343, line: 152, type: !11736, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11738)
!11736 = !DISubroutineType(types: !11737)
!11737 = !{!3805, !4341, !997}
!11738 = !{!11739, !11740}
!11739 = !DILocalVariable(name: "vec_", arg: 1, scope: !11735, file: !343, line: 152, type: !4341)
!11740 = !DILocalVariable(name: "obj_", arg: 2, scope: !11735, file: !343, line: 152, type: !997)
!11741 = !DILocation(line: 0, scope: !11735)
!11742 = !DILocation(line: 152, column: 1, scope: !11735)
!11743 = distinct !DISubprogram(name: "VEC_switch_update_heap_safe_push", scope: !3, file: !3, line: 121, type: !11744, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11748)
!11744 = !DISubroutineType(types: !11745)
!11745 = !{!3174, !4351, !11746}
!11746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11747, size: 64)
!11747 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2103)
!11748 = !{!11749, !11750}
!11749 = !DILocalVariable(name: "vec_", arg: 1, scope: !11743, file: !3, line: 121, type: !4351)
!11750 = !DILocalVariable(name: "obj_", arg: 2, scope: !11743, file: !3, line: 121, type: !11746)
!11751 = !DILocation(line: 0, scope: !11743)
!11752 = !DILocation(line: 121, column: 1, scope: !11743)
!11753 = distinct !DISubprogram(name: "VEC_edge_heap_reserve", scope: !343, file: !343, line: 152, type: !11754, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11756)
!11754 = !DISubroutineType(types: !11755)
!11755 = !{!680, !4341, !680}
!11756 = !{!11757, !11758, !11759}
!11757 = !DILocalVariable(name: "vec_", arg: 1, scope: !11753, file: !343, line: 152, type: !4341)
!11758 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11753, file: !343, line: 152, type: !680)
!11759 = !DILocalVariable(name: "extend", scope: !11753, file: !343, line: 152, type: !680)
!11760 = !DILocation(line: 0, scope: !11753)
!11761 = !DILocation(line: 152, column: 1, scope: !11753)
!11762 = !DILocation(line: 152, column: 1, scope: !11763)
!11763 = distinct !DILexicalBlock(scope: !11753, file: !343, line: 152, column: 1)
!11764 = distinct !DISubprogram(name: "VEC_edge_base_quick_push", scope: !343, file: !343, line: 150, type: !11765, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11768)
!11765 = !DISubroutineType(types: !11766)
!11766 = !{!3805, !11767, !997}
!11767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !990, size: 64)
!11768 = !{!11769, !11770, !11771}
!11769 = !DILocalVariable(name: "vec_", arg: 1, scope: !11764, file: !343, line: 150, type: !11767)
!11770 = !DILocalVariable(name: "obj_", arg: 2, scope: !11764, file: !343, line: 150, type: !997)
!11771 = !DILocalVariable(name: "slot_", scope: !11764, file: !343, line: 150, type: !3805)
!11772 = !DILocation(line: 0, scope: !11764)
!11773 = !DILocation(line: 150, column: 1, scope: !11764)
!11774 = distinct !DISubprogram(name: "VEC_edge_base_space", scope: !343, file: !343, line: 150, type: !11775, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11777)
!11775 = !DISubroutineType(types: !11776)
!11776 = !{!680, !11767, !680}
!11777 = !{!11778, !11779}
!11778 = !DILocalVariable(name: "vec_", arg: 1, scope: !11774, file: !343, line: 150, type: !11767)
!11779 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11774, file: !343, line: 150, type: !680)
!11780 = !DILocation(line: 0, scope: !11774)
!11781 = !DILocation(line: 150, column: 1, scope: !11774)
!11782 = distinct !DISubprogram(name: "VEC_switch_update_heap_reserve", scope: !3, file: !3, line: 121, type: !11783, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11785)
!11783 = !DISubroutineType(types: !11784)
!11784 = !{!680, !4351, !680}
!11785 = !{!11786, !11787, !11788}
!11786 = !DILocalVariable(name: "vec_", arg: 1, scope: !11782, file: !3, line: 121, type: !4351)
!11787 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11782, file: !3, line: 121, type: !680)
!11788 = !DILocalVariable(name: "extend", scope: !11782, file: !3, line: 121, type: !680)
!11789 = !DILocation(line: 0, scope: !11782)
!11790 = !DILocation(line: 121, column: 1, scope: !11782)
!11791 = !DILocation(line: 121, column: 1, scope: !11792)
!11792 = distinct !DILexicalBlock(scope: !11782, file: !3, line: 121, column: 1)
!11793 = distinct !DISubprogram(name: "VEC_switch_update_base_quick_push", scope: !3, file: !3, line: 120, type: !11794, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11796)
!11794 = !DISubroutineType(types: !11795)
!11795 = !{!3174, !4285, !11746}
!11796 = !{!11797, !11798, !11799}
!11797 = !DILocalVariable(name: "vec_", arg: 1, scope: !11793, file: !3, line: 120, type: !4285)
!11798 = !DILocalVariable(name: "obj_", arg: 2, scope: !11793, file: !3, line: 120, type: !11746)
!11799 = !DILocalVariable(name: "slot_", scope: !11793, file: !3, line: 120, type: !3174)
!11800 = !DILocation(line: 0, scope: !11793)
!11801 = !DILocation(line: 120, column: 1, scope: !11793)
!11802 = !DILocation(line: 120, column: 1, scope: !11803)
!11803 = distinct !DILexicalBlock(scope: !11793, file: !3, line: 120, column: 1)
!11804 = distinct !DISubprogram(name: "VEC_switch_update_base_space", scope: !3, file: !3, line: 120, type: !11805, scopeLine: 120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11807)
!11805 = !DISubroutineType(types: !11806)
!11806 = !{!680, !4285, !680}
!11807 = !{!11808, !11809}
!11808 = !DILocalVariable(name: "vec_", arg: 1, scope: !11804, file: !3, line: 120, type: !4285)
!11809 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11804, file: !3, line: 120, type: !680)
!11810 = !DILocation(line: 0, scope: !11804)
!11811 = !DILocation(line: 120, column: 1, scope: !11804)
!11812 = distinct !DISubprogram(name: "search_for_addr_array", scope: !3, file: !3, line: 5081, type: !11813, scopeLine: 5082, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11815)
!11813 = !DISubroutineType(types: !11814)
!11814 = !{null, !693, !818}
!11815 = !{!11816, !11817, !11818}
!11816 = !DILocalVariable(name: "t", arg: 1, scope: !11812, file: !3, line: 5081, type: !693)
!11817 = !DILocalVariable(name: "location", arg: 2, scope: !11812, file: !3, line: 5081, type: !818)
!11818 = !DILocalVariable(name: "g", scope: !11819, file: !3, line: 5085, type: !1017)
!11819 = distinct !DILexicalBlock(scope: !11812, file: !3, line: 5084, column: 5)
!11820 = !DILocation(line: 0, scope: !11812)
!11821 = !DILocation(line: 5083, column: 3, scope: !11812)
!11822 = !DILocation(line: 5083, column: 10, scope: !11812)
!11823 = !DILocation(line: 5083, column: 24, scope: !11812)
!11824 = !DILocation(line: 5085, column: 18, scope: !11819)
!11825 = !DILocation(line: 0, scope: !11819)
!11826 = !DILocation(line: 5087, column: 11, scope: !11827)
!11827 = distinct !DILexicalBlock(scope: !11819, file: !3, line: 5087, column: 11)
!11828 = !DILocation(line: 5087, column: 27, scope: !11827)
!11829 = !DILocation(line: 5087, column: 11, scope: !11819)
!11830 = !DILocation(line: 5090, column: 33, scope: !11831)
!11831 = distinct !DILexicalBlock(scope: !11819, file: !3, line: 5090, column: 11)
!11832 = !DILocation(line: 5090, column: 11, scope: !11831)
!11833 = !DILocation(line: 5091, column: 4, scope: !11831)
!11834 = !DILocation(line: 5090, column: 11, scope: !11819)
!11835 = !DILocation(line: 5094, column: 11, scope: !11819)
!11836 = !DILocation(line: 5095, column: 5, scope: !11812)
!11837 = distinct !{!11837, !11821, !11836}
!11838 = !DILocation(line: 5099, column: 21, scope: !11839)
!11839 = distinct !DILexicalBlock(scope: !11812, file: !3, line: 5099, column: 7)
!11840 = !DILocation(line: 5099, column: 7, scope: !11812)
!11841 = !DILocation(line: 5103, column: 3, scope: !11812)
!11842 = !DILocation(line: 5105, column: 11, scope: !11843)
!11843 = distinct !DILexicalBlock(scope: !11844, file: !3, line: 5105, column: 11)
!11844 = distinct !DILexicalBlock(scope: !11812, file: !3, line: 5104, column: 5)
!11845 = !DILocation(line: 5105, column: 25, scope: !11843)
!11846 = !DILocation(line: 5105, column: 11, scope: !11844)
!11847 = !DILocation(line: 5106, column: 2, scope: !11843)
!11848 = !DILocation(line: 5108, column: 11, scope: !11844)
!11849 = !DILocation(line: 5110, column: 10, scope: !11812)
!11850 = !DILocation(line: 5109, column: 5, scope: !11844)
!11851 = distinct !{!11851, !11841, !11852}
!11852 = !DILocation(line: 5110, column: 33, scope: !11812)
!11853 = !DILocation(line: 0, scope: !11843)
!11854 = !DILocation(line: 5111, column: 1, scope: !11812)
!11855 = distinct !DISubprogram(name: "gimple_location_ptr", scope: !588, file: !588, line: 1147, type: !11856, scopeLine: 1148, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11860)
!11856 = !DISubroutineType(types: !11857)
!11857 = !{!11858, !4325}
!11858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11859, size: 64)
!11859 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !818)
!11860 = !{!11861}
!11861 = !DILocalVariable(name: "g", arg: 1, scope: !11855, file: !588, line: 1147, type: !4325)
!11862 = !DILocation(line: 0, scope: !11855)
!11863 = !DILocation(line: 1149, column: 21, scope: !11855)
!11864 = !DILocation(line: 1149, column: 3, scope: !11855)
!11865 = distinct !DISubprogram(name: "check_array_bounds", scope: !3, file: !3, line: 5120, type: !11866, scopeLine: 5121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11868)
!11866 = !DISubroutineType(types: !11867)
!11867 = !{!693, !1051, !2064, !684}
!11868 = !{!11869, !11870, !11871, !11872, !11873, !11874, !11875}
!11869 = !DILocalVariable(name: "tp", arg: 1, scope: !11865, file: !3, line: 5120, type: !1051)
!11870 = !DILocalVariable(name: "walk_subtree", arg: 2, scope: !11865, file: !3, line: 5120, type: !2064)
!11871 = !DILocalVariable(name: "data", arg: 3, scope: !11865, file: !3, line: 5120, type: !684)
!11872 = !DILocalVariable(name: "t", scope: !11865, file: !3, line: 5122, type: !693)
!11873 = !DILocalVariable(name: "wi", scope: !11865, file: !3, line: 5123, type: !2115)
!11874 = !DILocalVariable(name: "location", scope: !11865, file: !3, line: 5124, type: !818)
!11875 = !DILocalVariable(name: "locp", scope: !11876, file: !3, line: 5130, type: !2128)
!11876 = distinct !DILexicalBlock(scope: !11877, file: !3, line: 5129, column: 5)
!11877 = distinct !DILexicalBlock(scope: !11865, file: !3, line: 5126, column: 7)
!11878 = !DILocation(line: 0, scope: !11865)
!11879 = !DILocation(line: 5122, column: 12, scope: !11865)
!11880 = !DILocation(line: 5126, column: 7, scope: !11877)
!11881 = !DILocation(line: 5126, column: 7, scope: !11865)
!11882 = !DILocation(line: 5127, column: 16, scope: !11877)
!11883 = !DILocation(line: 5130, column: 45, scope: !11876)
!11884 = !DILocation(line: 0, scope: !11876)
!11885 = !DILocation(line: 5131, column: 18, scope: !11876)
!11886 = !DILocation(line: 0, scope: !11877)
!11887 = !DILocation(line: 5134, column: 17, scope: !11865)
!11888 = !DILocation(line: 5136, column: 7, scope: !11889)
!11889 = distinct !DILexicalBlock(scope: !11865, file: !3, line: 5136, column: 7)
!11890 = !DILocation(line: 5136, column: 21, scope: !11889)
!11891 = !DILocation(line: 5136, column: 7, scope: !11865)
!11892 = !DILocation(line: 5137, column: 5, scope: !11889)
!11893 = !DILocation(line: 5139, column: 7, scope: !11894)
!11894 = distinct !DILexicalBlock(scope: !11865, file: !3, line: 5139, column: 7)
!11895 = !DILocation(line: 5139, column: 21, scope: !11894)
!11896 = !DILocation(line: 5140, column: 7, scope: !11894)
!11897 = !DILocation(line: 0, scope: !11894)
!11898 = !DILocation(line: 5141, column: 28, scope: !11894)
!11899 = !DILocation(line: 5140, column: 25, scope: !11894)
!11900 = !DILocation(line: 5140, column: 40, scope: !11894)
!11901 = !DILocation(line: 5140, column: 43, scope: !11894)
!11902 = !DILocation(line: 5139, column: 7, scope: !11865)
!11903 = !DILocation(line: 5141, column: 5, scope: !11894)
!11904 = !DILocation(line: 5143, column: 7, scope: !11905)
!11905 = distinct !DILexicalBlock(scope: !11865, file: !3, line: 5143, column: 7)
!11906 = !DILocation(line: 5143, column: 21, scope: !11905)
!11907 = !DILocation(line: 5143, column: 7, scope: !11865)
!11908 = !DILocation(line: 5144, column: 19, scope: !11905)
!11909 = !DILocation(line: 5144, column: 5, scope: !11905)
!11910 = !DILocation(line: 5146, column: 3, scope: !11865)
!11911 = distinct !DISubprogram(name: "check_array_ref", scope: !3, file: !3, line: 5010, type: !11912, scopeLine: 5011, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !11914)
!11912 = !DISubroutineType(types: !11913)
!11913 = !{null, !818, !693, !679}
!11914 = !{!11915, !11916, !11917, !11918, !11919, !11920, !11921, !11922}
!11915 = !DILocalVariable(name: "location", arg: 1, scope: !11911, file: !3, line: 5010, type: !818)
!11916 = !DILocalVariable(name: "ref", arg: 2, scope: !11911, file: !3, line: 5010, type: !693)
!11917 = !DILocalVariable(name: "ignore_off_by_one", arg: 3, scope: !11911, file: !3, line: 5010, type: !679)
!11918 = !DILocalVariable(name: "vr", scope: !11911, file: !3, line: 5012, type: !687)
!11919 = !DILocalVariable(name: "low_sub", scope: !11911, file: !3, line: 5013, type: !693)
!11920 = !DILocalVariable(name: "up_sub", scope: !11911, file: !3, line: 5013, type: !693)
!11921 = !DILocalVariable(name: "low_bound", scope: !11911, file: !3, line: 5014, type: !693)
!11922 = !DILocalVariable(name: "up_bound", scope: !11911, file: !3, line: 5014, type: !693)
!11923 = !DILocation(line: 0, scope: !11911)
!11924 = !DILocation(line: 5014, column: 30, scope: !11911)
!11925 = !DILocation(line: 5016, column: 22, scope: !11911)
!11926 = !DILocation(line: 5018, column: 8, scope: !11927)
!11927 = distinct !DILexicalBlock(scope: !11911, file: !3, line: 5018, column: 7)
!11928 = !DILocation(line: 5018, column: 17, scope: !11927)
!11929 = !DILocation(line: 5018, column: 20, scope: !11927)
!11930 = !DILocation(line: 5019, column: 7, scope: !11927)
!11931 = !DILocation(line: 5019, column: 10, scope: !11927)
!11932 = !DILocation(line: 5019, column: 31, scope: !11927)
!11933 = !DILocation(line: 5021, column: 7, scope: !11927)
!11934 = !DILocation(line: 5021, column: 11, scope: !11927)
!11935 = !DILocation(line: 5021, column: 39, scope: !11927)
!11936 = !DILocation(line: 5022, column: 11, scope: !11927)
!11937 = !DILocation(line: 5022, column: 14, scope: !11927)
!11938 = !DILocation(line: 5022, column: 44, scope: !11927)
!11939 = !DILocation(line: 5023, column: 11, scope: !11927)
!11940 = !DILocation(line: 5023, column: 14, scope: !11927)
!11941 = !DILocation(line: 5023, column: 61, scope: !11927)
!11942 = !DILocation(line: 5027, column: 7, scope: !11927)
!11943 = !DILocation(line: 5027, column: 10, scope: !11927)
!11944 = !DILocation(line: 5027, column: 41, scope: !11927)
!11945 = !DILocation(line: 5018, column: 7, scope: !11911)
!11946 = !DILocation(line: 5030, column: 15, scope: !11911)
!11947 = !DILocation(line: 5032, column: 7, scope: !11948)
!11948 = distinct !DILexicalBlock(scope: !11911, file: !3, line: 5032, column: 7)
!11949 = !DILocation(line: 5032, column: 27, scope: !11948)
!11950 = !DILocation(line: 5032, column: 7, scope: !11911)
!11951 = !DILocation(line: 5034, column: 12, scope: !11952)
!11952 = distinct !DILexicalBlock(scope: !11948, file: !3, line: 5033, column: 5)
!11953 = !DILocation(line: 5035, column: 15, scope: !11954)
!11954 = distinct !DILexicalBlock(scope: !11952, file: !3, line: 5035, column: 11)
!11955 = !DILocation(line: 5035, column: 20, scope: !11954)
!11956 = !DILocation(line: 5035, column: 32, scope: !11954)
!11957 = !DILocation(line: 5035, column: 44, scope: !11954)
!11958 = !DILocation(line: 5035, column: 11, scope: !11952)
!11959 = !DILocation(line: 5037, column: 21, scope: !11960)
!11960 = distinct !DILexicalBlock(scope: !11954, file: !3, line: 5036, column: 9)
!11961 = !DILocation(line: 5037, column: 48, scope: !11960)
!11962 = !DILocation(line: 5037, column: 58, scope: !11960)
!11963 = !DILocation(line: 5038, column: 20, scope: !11960)
!11964 = !DILocation(line: 5038, column: 47, scope: !11960)
!11965 = !DILocation(line: 5038, column: 57, scope: !11960)
!11966 = !DILocation(line: 5042, column: 7, scope: !11967)
!11967 = distinct !DILexicalBlock(scope: !11911, file: !3, line: 5042, column: 7)
!11968 = !DILocation(line: 5042, column: 10, scope: !11967)
!11969 = !DILocation(line: 5042, column: 17, scope: !11967)
!11970 = !DILocation(line: 5042, column: 22, scope: !11967)
!11971 = !DILocation(line: 5042, column: 7, scope: !11911)
!11972 = !DILocation(line: 5044, column: 11, scope: !11973)
!11973 = distinct !DILexicalBlock(scope: !11974, file: !3, line: 5044, column: 11)
!11974 = distinct !DILexicalBlock(scope: !11967, file: !3, line: 5043, column: 5)
!11975 = !DILocation(line: 5044, column: 30, scope: !11973)
!11976 = !DILocation(line: 5045, column: 11, scope: !11973)
!11977 = !DILocation(line: 5045, column: 14, scope: !11973)
!11978 = !DILocation(line: 5046, column: 11, scope: !11973)
!11979 = !DILocation(line: 5046, column: 14, scope: !11973)
!11980 = !DILocation(line: 5046, column: 34, scope: !11973)
!11981 = !DILocation(line: 5047, column: 11, scope: !11973)
!11982 = !DILocation(line: 5047, column: 14, scope: !11973)
!11983 = !DILocation(line: 5044, column: 11, scope: !11974)
!11984 = !DILocation(line: 5049, column: 11, scope: !11985)
!11985 = distinct !DILexicalBlock(scope: !11973, file: !3, line: 5048, column: 9)
!11986 = !DILocation(line: 5051, column: 33, scope: !11985)
!11987 = !DILocation(line: 5052, column: 9, scope: !11985)
!11988 = !DILocation(line: 5054, column: 12, scope: !11989)
!11989 = distinct !DILexicalBlock(scope: !11967, file: !3, line: 5054, column: 12)
!11990 = !DILocation(line: 5054, column: 31, scope: !11989)
!11991 = !DILocation(line: 5055, column: 12, scope: !11989)
!11992 = !DILocation(line: 5055, column: 15, scope: !11989)
!11993 = !DILocation(line: 5056, column: 12, scope: !11989)
!11994 = !DILocation(line: 5056, column: 16, scope: !11989)
!11995 = !DILocation(line: 5057, column: 12, scope: !11989)
!11996 = !DILocation(line: 5057, column: 17, scope: !11989)
!11997 = !DILocation(line: 5058, column: 16, scope: !11989)
!11998 = !DILocation(line: 5060, column: 57, scope: !11989)
!11999 = !DILocation(line: 5058, column: 40, scope: !11989)
!12000 = !DILocation(line: 5058, column: 20, scope: !11989)
!12001 = !DILocation(line: 5054, column: 12, scope: !11967)
!12002 = !DILocation(line: 5064, column: 7, scope: !12003)
!12003 = distinct !DILexicalBlock(scope: !11989, file: !3, line: 5063, column: 5)
!12004 = !DILocation(line: 5066, column: 29, scope: !12003)
!12005 = !DILocation(line: 5067, column: 5, scope: !12003)
!12006 = !DILocation(line: 5068, column: 12, scope: !12007)
!12007 = distinct !DILexicalBlock(scope: !11989, file: !3, line: 5068, column: 12)
!12008 = !DILocation(line: 5068, column: 32, scope: !12007)
!12009 = !DILocation(line: 5069, column: 12, scope: !12007)
!12010 = !DILocation(line: 5069, column: 15, scope: !12007)
!12011 = !DILocation(line: 5068, column: 12, scope: !11989)
!12012 = !DILocation(line: 5071, column: 7, scope: !12013)
!12013 = distinct !DILexicalBlock(scope: !12007, file: !3, line: 5070, column: 5)
!12014 = !DILocation(line: 5073, column: 29, scope: !12013)
!12015 = !DILocation(line: 5074, column: 5, scope: !12013)
!12016 = !DILocation(line: 5075, column: 1, scope: !11911)
!12017 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !2667, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12018)
!12018 = !{!12019}
!12019 = !DILocalVariable(name: "t", arg: 1, scope: !12017, file: !135, line: 4551, type: !2080)
!12020 = !DILocation(line: 0, scope: !12017)
!12021 = !DILocation(line: 4553, column: 11, scope: !12017)
!12022 = !DILocation(line: 4553, column: 3, scope: !12017)
!12023 = !DILocation(line: 4565, column: 7, scope: !12024)
!12024 = distinct !DILexicalBlock(scope: !12017, file: !135, line: 4554, column: 5)
!12025 = !DILocation(line: 0, scope: !12024)
!12026 = !DILocation(line: 4567, column: 1, scope: !12017)
!12027 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !135, file: !135, line: 184, type: !12028, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12030)
!12028 = !DISubroutineType(types: !12029)
!12029 = !{!2129, !680}
!12030 = !{!12031}
!12031 = !DILocalVariable(name: "alloc_", arg: 1, scope: !12027, file: !135, line: 184, type: !680)
!12032 = !DILocation(line: 0, scope: !12027)
!12033 = !DILocation(line: 184, column: 1, scope: !12027)
!12034 = distinct !DISubprogram(name: "gsi_last_bb", scope: !588, file: !588, line: 4450, type: !4963, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12035)
!12035 = !{!12036, !12037, !12038}
!12036 = !DILocalVariable(name: "bb", arg: 1, scope: !12034, file: !588, line: 4450, type: !1468)
!12037 = !DILocalVariable(name: "i", scope: !12034, file: !588, line: 4452, type: !2054)
!12038 = !DILocalVariable(name: "seq", scope: !12034, file: !588, line: 4453, type: !1007)
!12039 = !DILocation(line: 0, scope: !12034)
!12040 = !DILocation(line: 4452, column: 24, scope: !12034)
!12041 = !DILocation(line: 4455, column: 9, scope: !12034)
!12042 = !DILocation(line: 4456, column: 11, scope: !12034)
!12043 = !DILocation(line: 4456, column: 5, scope: !12034)
!12044 = !DILocation(line: 4456, column: 9, scope: !12034)
!12045 = !DILocation(line: 4457, column: 5, scope: !12034)
!12046 = !DILocation(line: 4457, column: 9, scope: !12034)
!12047 = !DILocation(line: 4458, column: 5, scope: !12034)
!12048 = !DILocation(line: 4458, column: 8, scope: !12034)
!12049 = !DILocation(line: 4461, column: 1, scope: !12034)
!12050 = distinct !DISubprogram(name: "simplify_stmt_for_jump_threading", scope: !3, file: !3, line: 7095, type: !12051, scopeLine: 7096, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12053)
!12051 = !DISubroutineType(types: !12052)
!12052 = !{!693, !1017, !1017}
!12053 = !{!12054, !12055}
!12054 = !DILocalVariable(name: "stmt", arg: 1, scope: !12050, file: !3, line: 7095, type: !1017)
!12055 = !DILocalVariable(name: "within_stmt", arg: 2, scope: !12050, file: !3, line: 7095, type: !1017)
!12056 = !DILocation(line: 0, scope: !12050)
!12057 = !DILocation(line: 7100, column: 7, scope: !12058)
!12058 = distinct !DILexicalBlock(scope: !12050, file: !3, line: 7100, column: 7)
!12059 = !DILocation(line: 7100, column: 26, scope: !12058)
!12060 = !DILocation(line: 7100, column: 7, scope: !12050)
!12061 = !DILocation(line: 7103, column: 36, scope: !12050)
!12062 = !DILocation(line: 7104, column: 8, scope: !12050)
!12063 = !DILocation(line: 7105, column: 8, scope: !12050)
!12064 = !DILocation(line: 7103, column: 10, scope: !12050)
!12065 = !DILocation(line: 7103, column: 3, scope: !12050)
!12066 = !DILocation(line: 7106, column: 1, scope: !12050)
!12067 = distinct !DISubprogram(name: "gimple_seq_last", scope: !588, file: !588, line: 178, type: !6049, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12068)
!12068 = !{!12069}
!12069 = !DILocalVariable(name: "s", arg: 1, scope: !12067, file: !588, line: 178, type: !6051)
!12070 = !DILocation(line: 0, scope: !12067)
!12071 = !DILocation(line: 180, column: 10, scope: !12067)
!12072 = !DILocation(line: 180, column: 17, scope: !12067)
!12073 = !DILocation(line: 180, column: 3, scope: !12067)
!12074 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !4804, file: !4804, line: 1058, type: !12075, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12078)
!12075 = !DISubroutineType(types: !12076)
!12076 = !{!1017, !12077, !693}
!12077 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4199, size: 64)
!12078 = !{!12079, !12080}
!12079 = !DILocalVariable(name: "imm", arg: 1, scope: !12074, file: !4804, line: 1058, type: !12077)
!12080 = !DILocalVariable(name: "var", arg: 2, scope: !12074, file: !4804, line: 1058, type: !693)
!12081 = !DILocation(line: 0, scope: !12074)
!12082 = !DILocation(line: 1060, column: 18, scope: !12074)
!12083 = !DILocation(line: 1060, column: 8, scope: !12074)
!12084 = !DILocation(line: 1060, column: 14, scope: !12074)
!12085 = !DILocation(line: 1061, column: 30, scope: !12074)
!12086 = !DILocation(line: 1061, column: 16, scope: !12074)
!12087 = !DILocation(line: 1062, column: 8, scope: !12074)
!12088 = !DILocation(line: 1062, column: 22, scope: !12074)
!12089 = !DILocation(line: 1067, column: 18, scope: !12074)
!12090 = !DILocation(line: 1067, column: 23, scope: !12074)
!12091 = !DILocation(line: 1068, column: 18, scope: !12074)
!12092 = !DILocation(line: 1068, column: 23, scope: !12074)
!12093 = !DILocation(line: 1069, column: 22, scope: !12074)
!12094 = !DILocation(line: 1069, column: 27, scope: !12074)
!12095 = !DILocation(line: 1070, column: 18, scope: !12074)
!12096 = !DILocation(line: 1070, column: 22, scope: !12074)
!12097 = !DILocation(line: 1072, column: 7, scope: !12098)
!12098 = distinct !DILexicalBlock(scope: !12074, file: !4804, line: 1072, column: 7)
!12099 = !DILocation(line: 1072, column: 7, scope: !12074)
!12100 = !DILocation(line: 1075, column: 30, scope: !12074)
!12101 = !DILocation(line: 1075, column: 3, scope: !12074)
!12102 = !DILocation(line: 1077, column: 10, scope: !12074)
!12103 = !DILocation(line: 1077, column: 3, scope: !12074)
!12104 = !DILocation(line: 1078, column: 1, scope: !12074)
!12105 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !4804, file: !4804, line: 969, type: !12106, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12110)
!12106 = !DISubroutineType(types: !12107)
!12107 = !{!679, !12108}
!12108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12109, size: 64)
!12109 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4199)
!12110 = !{!12111}
!12111 = !DILocalVariable(name: "imm", arg: 1, scope: !12105, file: !4804, line: 969, type: !12108)
!12112 = !DILocation(line: 0, scope: !12105)
!12113 = !DILocation(line: 971, column: 16, scope: !12105)
!12114 = !DILocation(line: 971, column: 32, scope: !12105)
!12115 = !DILocation(line: 971, column: 24, scope: !12105)
!12116 = !DILocation(line: 971, column: 10, scope: !12105)
!12117 = !DILocation(line: 971, column: 3, scope: !12105)
!12118 = distinct !DISubprogram(name: "first_imm_use_on_stmt", scope: !4804, file: !4804, line: 1101, type: !12119, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12121)
!12119 = !DISubroutineType(types: !12120)
!12120 = !{!2083, !12077}
!12121 = !{!12122}
!12122 = !DILocalVariable(name: "imm", arg: 1, scope: !12118, file: !4804, line: 1101, type: !12077)
!12123 = !DILocation(line: 0, scope: !12118)
!12124 = !DILocation(line: 1103, column: 29, scope: !12118)
!12125 = !DILocation(line: 1103, column: 38, scope: !12118)
!12126 = !DILocation(line: 1103, column: 8, scope: !12118)
!12127 = !DILocation(line: 1103, column: 22, scope: !12118)
!12128 = !DILocation(line: 1104, column: 3, scope: !12118)
!12129 = distinct !DISubprogram(name: "end_imm_use_on_stmt_p", scope: !4804, file: !4804, line: 1110, type: !12106, scopeLine: 1111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12130)
!12130 = !{!12131}
!12131 = !DILocalVariable(name: "imm", arg: 1, scope: !12129, file: !4804, line: 1110, type: !12108)
!12132 = !DILocation(line: 0, scope: !12129)
!12133 = !DILocation(line: 1112, column: 16, scope: !12129)
!12134 = !DILocation(line: 1112, column: 34, scope: !12129)
!12135 = !DILocation(line: 1112, column: 24, scope: !12129)
!12136 = !DILocation(line: 1112, column: 10, scope: !12129)
!12137 = !DILocation(line: 1112, column: 3, scope: !12129)
!12138 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !4804, file: !4804, line: 233, type: !12139, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12141)
!12139 = !DISubroutineType(types: !12140)
!12140 = !{null, !2083, !693}
!12141 = !{!12142, !12143}
!12142 = !DILocalVariable(name: "use", arg: 1, scope: !12138, file: !4804, line: 233, type: !2083)
!12143 = !DILocalVariable(name: "val", arg: 2, scope: !12138, file: !4804, line: 233, type: !693)
!12144 = !DILocation(line: 0, scope: !12138)
!12145 = !DILocation(line: 235, column: 3, scope: !12138)
!12146 = !DILocation(line: 236, column: 10, scope: !12138)
!12147 = !DILocation(line: 236, column: 15, scope: !12138)
!12148 = !DILocation(line: 237, column: 3, scope: !12138)
!12149 = !DILocation(line: 238, column: 1, scope: !12138)
!12150 = distinct !DISubprogram(name: "next_imm_use_on_stmt", scope: !4804, file: !4804, line: 1118, type: !12119, scopeLine: 1119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12151)
!12151 = !{!12152}
!12152 = !DILocalVariable(name: "imm", arg: 1, scope: !12150, file: !4804, line: 1118, type: !12077)
!12153 = !DILocation(line: 0, scope: !12150)
!12154 = !DILocation(line: 1120, column: 23, scope: !12150)
!12155 = !DILocation(line: 1120, column: 16, scope: !12150)
!12156 = !DILocation(line: 1121, column: 7, scope: !12157)
!12157 = distinct !DILexicalBlock(scope: !12150, file: !4804, line: 1121, column: 7)
!12158 = !DILocation(line: 1121, column: 7, scope: !12150)
!12159 = !DILocation(line: 1125, column: 33, scope: !12160)
!12160 = distinct !DILexicalBlock(scope: !12157, file: !4804, line: 1124, column: 5)
!12161 = !DILocation(line: 1125, column: 42, scope: !12160)
!12162 = !DILocation(line: 1125, column: 26, scope: !12160)
!12163 = !DILocation(line: 1126, column: 7, scope: !12160)
!12164 = !DILocation(line: 0, scope: !12157)
!12165 = !DILocation(line: 1128, column: 1, scope: !12150)
!12166 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !4804, file: !4804, line: 1083, type: !12167, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12169)
!12167 = !DISubroutineType(types: !12168)
!12168 = !{!1017, !12077}
!12169 = !{!12170}
!12170 = !DILocalVariable(name: "imm", arg: 1, scope: !12166, file: !4804, line: 1083, type: !12077)
!12171 = !DILocation(line: 0, scope: !12166)
!12172 = !DILocation(line: 1085, column: 33, scope: !12166)
!12173 = !DILocation(line: 1085, column: 16, scope: !12166)
!12174 = !DILocation(line: 1086, column: 7, scope: !12175)
!12175 = distinct !DILexicalBlock(scope: !12166, file: !4804, line: 1086, column: 7)
!12176 = !DILocation(line: 1086, column: 7, scope: !12166)
!12177 = !DILocation(line: 1088, column: 26, scope: !12178)
!12178 = distinct !DILexicalBlock(scope: !12179, file: !4804, line: 1088, column: 11)
!12179 = distinct !DILexicalBlock(scope: !12175, file: !4804, line: 1087, column: 5)
!12180 = !DILocation(line: 1088, column: 31, scope: !12178)
!12181 = !DILocation(line: 1088, column: 11, scope: !12179)
!12182 = !DILocation(line: 1089, column: 24, scope: !12178)
!12183 = !DILocation(line: 1089, column: 2, scope: !12178)
!12184 = !DILocation(line: 1093, column: 30, scope: !12166)
!12185 = !DILocation(line: 1093, column: 3, scope: !12166)
!12186 = !DILocation(line: 1094, column: 10, scope: !12166)
!12187 = !DILocation(line: 1094, column: 3, scope: !12166)
!12188 = !DILocation(line: 1095, column: 1, scope: !12166)
!12189 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !4804, file: !4804, line: 1018, type: !12190, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12192)
!12190 = !DISubroutineType(types: !12191)
!12191 = !{null, !2083, !12077}
!12192 = !{!12193, !12194, !12195, !12196, !12197, !12198, !12199, !12200}
!12193 = !DILocalVariable(name: "head", arg: 1, scope: !12189, file: !4804, line: 1018, type: !2083)
!12194 = !DILocalVariable(name: "imm", arg: 2, scope: !12189, file: !4804, line: 1018, type: !12077)
!12195 = !DILocalVariable(name: "use_p", scope: !12189, file: !4804, line: 1020, type: !2083)
!12196 = !DILocalVariable(name: "last_p", scope: !12189, file: !4804, line: 1021, type: !2083)
!12197 = !DILocalVariable(name: "head_stmt", scope: !12189, file: !4804, line: 1022, type: !1017)
!12198 = !DILocalVariable(name: "use", scope: !12189, file: !4804, line: 1023, type: !693)
!12199 = !DILocalVariable(name: "op_iter", scope: !12189, file: !4804, line: 1024, type: !3721)
!12200 = !DILocalVariable(name: "flag", scope: !12189, file: !4804, line: 1025, type: !680)
!12201 = !DILocation(line: 0, scope: !12189)
!12202 = !DILocation(line: 1022, column: 22, scope: !12189)
!12203 = !DILocation(line: 1023, column: 14, scope: !12189)
!12204 = !DILocation(line: 1024, column: 3, scope: !12189)
!12205 = !DILocation(line: 1028, column: 11, scope: !12189)
!12206 = !DILocation(line: 1030, column: 7, scope: !12207)
!12207 = distinct !DILexicalBlock(scope: !12189, file: !4804, line: 1030, column: 7)
!12208 = !DILocation(line: 1030, column: 31, scope: !12207)
!12209 = !DILocation(line: 1030, column: 7, scope: !12189)
!12210 = !DILocation(line: 1032, column: 7, scope: !12211)
!12211 = distinct !DILexicalBlock(scope: !12212, file: !4804, line: 1032, column: 7)
!12212 = distinct !DILexicalBlock(scope: !12207, file: !4804, line: 1031, column: 5)
!12213 = !DILocation(line: 0, scope: !12211)
!12214 = !DILocation(line: 1032, column: 7, scope: !12215)
!12215 = distinct !DILexicalBlock(scope: !12211, file: !4804, line: 1032, column: 7)
!12216 = !DILocation(line: 1033, column: 6, scope: !12217)
!12217 = distinct !DILexicalBlock(scope: !12215, file: !4804, line: 1033, column: 6)
!12218 = !DILocation(line: 1033, column: 27, scope: !12217)
!12219 = !DILocation(line: 1033, column: 6, scope: !12215)
!12220 = !DILocation(line: 1034, column: 13, scope: !12217)
!12221 = !DILocation(line: 1034, column: 4, scope: !12217)
!12222 = distinct !{!12222, !12210, !12223}
!12223 = !DILocation(line: 1034, column: 53, scope: !12211)
!12224 = !DILocation(line: 1038, column: 11, scope: !12225)
!12225 = distinct !DILexicalBlock(scope: !12207, file: !4804, line: 1037, column: 5)
!12226 = !DILocation(line: 1040, column: 4, scope: !12227)
!12227 = distinct !DILexicalBlock(scope: !12228, file: !4804, line: 1040, column: 4)
!12228 = distinct !DILexicalBlock(scope: !12229, file: !4804, line: 1039, column: 2)
!12229 = distinct !DILexicalBlock(scope: !12225, file: !4804, line: 1038, column: 11)
!12230 = !DILocation(line: 0, scope: !12227)
!12231 = !DILocation(line: 1040, column: 4, scope: !12232)
!12232 = distinct !DILexicalBlock(scope: !12227, file: !4804, line: 1040, column: 4)
!12233 = !DILocation(line: 1041, column: 10, scope: !12234)
!12234 = distinct !DILexicalBlock(scope: !12232, file: !4804, line: 1041, column: 10)
!12235 = !DILocation(line: 1041, column: 31, scope: !12234)
!12236 = !DILocation(line: 1041, column: 10, scope: !12232)
!12237 = !DILocation(line: 1042, column: 17, scope: !12234)
!12238 = !DILocation(line: 1042, column: 8, scope: !12234)
!12239 = distinct !{!12239, !12226, !12240}
!12240 = !DILocation(line: 1042, column: 57, scope: !12227)
!12241 = !DILocation(line: 1044, column: 25, scope: !12242)
!12242 = distinct !DILexicalBlock(scope: !12229, file: !4804, line: 1044, column: 16)
!12243 = !DILocation(line: 1044, column: 53, scope: !12242)
!12244 = !DILocation(line: 1044, column: 16, scope: !12229)
!12245 = !DILocation(line: 1046, column: 8, scope: !12246)
!12246 = distinct !DILexicalBlock(scope: !12247, file: !4804, line: 1046, column: 8)
!12247 = distinct !DILexicalBlock(scope: !12242, file: !4804, line: 1045, column: 2)
!12248 = !DILocation(line: 1046, column: 29, scope: !12246)
!12249 = !DILocation(line: 1046, column: 8, scope: !12247)
!12250 = !DILocation(line: 1047, column: 15, scope: !12246)
!12251 = !DILocation(line: 1047, column: 6, scope: !12246)
!12252 = !DILocation(line: 1051, column: 22, scope: !12253)
!12253 = distinct !DILexicalBlock(scope: !12189, file: !4804, line: 1051, column: 7)
!12254 = !DILocation(line: 1021, column: 17, scope: !12189)
!12255 = !DILocation(line: 1051, column: 27, scope: !12253)
!12256 = !DILocation(line: 1051, column: 7, scope: !12189)
!12257 = !DILocation(line: 1052, column: 27, scope: !12253)
!12258 = !DILocation(line: 1052, column: 5, scope: !12253)
!12259 = !DILocation(line: 1053, column: 32, scope: !12189)
!12260 = !DILocation(line: 1053, column: 3, scope: !12189)
!12261 = !DILocation(line: 1054, column: 1, scope: !12189)
!12262 = distinct !DISubprogram(name: "move_use_after_head", scope: !4804, file: !4804, line: 990, type: !12263, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12265)
!12263 = !DISubroutineType(types: !12264)
!12264 = !{!2083, !2083, !2083, !2083}
!12265 = !{!12266, !12267, !12268}
!12266 = !DILocalVariable(name: "use_p", arg: 1, scope: !12262, file: !4804, line: 990, type: !2083)
!12267 = !DILocalVariable(name: "head", arg: 2, scope: !12262, file: !4804, line: 990, type: !2083)
!12268 = !DILocalVariable(name: "last_p", arg: 3, scope: !12262, file: !4804, line: 991, type: !2083)
!12269 = !DILocation(line: 0, scope: !12262)
!12270 = !DILocation(line: 997, column: 13, scope: !12271)
!12271 = distinct !DILexicalBlock(scope: !12262, file: !4804, line: 997, column: 7)
!12272 = !DILocation(line: 997, column: 7, scope: !12262)
!12273 = !DILocation(line: 1000, column: 19, scope: !12274)
!12274 = distinct !DILexicalBlock(scope: !12275, file: !4804, line: 1000, column: 11)
!12275 = distinct !DILexicalBlock(scope: !12271, file: !4804, line: 998, column: 5)
!12276 = !DILocation(line: 1000, column: 24, scope: !12274)
!12277 = !DILocation(line: 1000, column: 11, scope: !12275)
!12278 = !DILocation(line: 1005, column: 4, scope: !12279)
!12279 = distinct !DILexicalBlock(scope: !12274, file: !4804, line: 1003, column: 2)
!12280 = !DILocation(line: 1006, column: 4, scope: !12279)
!12281 = !DILocation(line: 1010, column: 3, scope: !12262)
!12282 = distinct !DISubprogram(name: "op_iter_init_use", scope: !4804, file: !4804, line: 768, type: !5300, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12283)
!12283 = !{!12284, !12285, !12286}
!12284 = !DILocalVariable(name: "ptr", arg: 1, scope: !12282, file: !4804, line: 768, type: !5002)
!12285 = !DILocalVariable(name: "stmt", arg: 2, scope: !12282, file: !4804, line: 768, type: !1017)
!12286 = !DILocalVariable(name: "flags", arg: 3, scope: !12282, file: !4804, line: 768, type: !680)
!12287 = !DILocation(line: 0, scope: !12282)
!12288 = !DILocation(line: 770, column: 3, scope: !12282)
!12289 = !DILocation(line: 772, column: 3, scope: !12282)
!12290 = !DILocation(line: 773, column: 8, scope: !12282)
!12291 = !DILocation(line: 773, column: 18, scope: !12282)
!12292 = !DILocation(line: 774, column: 10, scope: !12282)
!12293 = !DILocation(line: 774, column: 3, scope: !12282)
!12294 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !588, file: !588, line: 1334, type: !12295, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12297)
!12295 = !DISubroutineType(types: !12296)
!12296 = !{!2083, !4325}
!12297 = !{!12298, !12299}
!12298 = !DILocalVariable(name: "g", arg: 1, scope: !12294, file: !588, line: 1334, type: !4325)
!12299 = !DILocalVariable(name: "ops", scope: !12294, file: !588, line: 1336, type: !1053)
!12300 = !DILocation(line: 0, scope: !12294)
!12301 = !DILocation(line: 1337, column: 8, scope: !12302)
!12302 = distinct !DILexicalBlock(scope: !12294, file: !588, line: 1337, column: 7)
!12303 = !DILocation(line: 1337, column: 7, scope: !12294)
!12304 = !DILocation(line: 1339, column: 25, scope: !12294)
!12305 = !DILocation(line: 1340, column: 7, scope: !12306)
!12306 = distinct !DILexicalBlock(scope: !12294, file: !588, line: 1340, column: 7)
!12307 = !DILocation(line: 1341, column: 7, scope: !12306)
!12308 = !DILocation(line: 1341, column: 28, scope: !12306)
!12309 = !DILocation(line: 1341, column: 49, scope: !12306)
!12310 = !DILocation(line: 1341, column: 32, scope: !12306)
!12311 = !DILocation(line: 1342, column: 12, scope: !12306)
!12312 = !DILocation(line: 1340, column: 7, scope: !12294)
!12313 = !DILocation(line: 1344, column: 1, scope: !12294)
!12314 = distinct !DISubprogram(name: "delink_imm_use", scope: !4804, file: !4804, line: 188, type: !12315, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12317)
!12315 = !DISubroutineType(types: !12316)
!12316 = !{null, !2084}
!12317 = !{!12318}
!12318 = !DILocalVariable(name: "linknode", arg: 1, scope: !12314, file: !4804, line: 188, type: !2084)
!12319 = !DILocation(line: 0, scope: !12314)
!12320 = !DILocation(line: 191, column: 17, scope: !12321)
!12321 = distinct !DILexicalBlock(scope: !12314, file: !4804, line: 191, column: 7)
!12322 = !DILocation(line: 191, column: 22, scope: !12321)
!12323 = !DILocation(line: 191, column: 7, scope: !12314)
!12324 = !DILocation(line: 194, column: 36, scope: !12314)
!12325 = !DILocation(line: 194, column: 19, scope: !12314)
!12326 = !DILocation(line: 194, column: 24, scope: !12314)
!12327 = !DILocation(line: 195, column: 36, scope: !12314)
!12328 = !DILocation(line: 195, column: 13, scope: !12314)
!12329 = !DILocation(line: 195, column: 24, scope: !12314)
!12330 = !DILocation(line: 196, column: 18, scope: !12314)
!12331 = !DILocation(line: 197, column: 18, scope: !12314)
!12332 = !DILocation(line: 198, column: 1, scope: !12314)
!12333 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !4804, file: !4804, line: 202, type: !12334, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12336)
!12334 = !DISubroutineType(types: !12335)
!12335 = !{null, !2084, !2084}
!12336 = !{!12337, !12338}
!12337 = !DILocalVariable(name: "linknode", arg: 1, scope: !12333, file: !4804, line: 202, type: !2084)
!12338 = !DILocalVariable(name: "list", arg: 2, scope: !12333, file: !4804, line: 202, type: !2084)
!12339 = !DILocation(line: 0, scope: !12333)
!12340 = !DILocation(line: 206, column: 13, scope: !12333)
!12341 = !DILocation(line: 206, column: 18, scope: !12333)
!12342 = !DILocation(line: 207, column: 26, scope: !12333)
!12343 = !DILocation(line: 207, column: 13, scope: !12333)
!12344 = !DILocation(line: 207, column: 18, scope: !12333)
!12345 = !DILocation(line: 208, column: 9, scope: !12333)
!12346 = !DILocation(line: 208, column: 15, scope: !12333)
!12347 = !DILocation(line: 208, column: 20, scope: !12333)
!12348 = !DILocation(line: 209, column: 14, scope: !12333)
!12349 = !DILocation(line: 210, column: 1, scope: !12333)
!12350 = distinct !DISubprogram(name: "link_imm_use", scope: !4804, file: !4804, line: 214, type: !12351, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12353)
!12351 = !DISubroutineType(types: !12352)
!12352 = !{null, !2084, !693}
!12353 = !{!12354, !12355, !12356}
!12354 = !DILocalVariable(name: "linknode", arg: 1, scope: !12350, file: !4804, line: 214, type: !2084)
!12355 = !DILocalVariable(name: "def", arg: 2, scope: !12350, file: !4804, line: 214, type: !693)
!12356 = !DILocalVariable(name: "root", scope: !12350, file: !4804, line: 216, type: !2084)
!12357 = !DILocation(line: 0, scope: !12350)
!12358 = !DILocation(line: 218, column: 8, scope: !12359)
!12359 = distinct !DILexicalBlock(scope: !12350, file: !4804, line: 218, column: 7)
!12360 = !DILocation(line: 218, column: 12, scope: !12359)
!12361 = !DILocation(line: 218, column: 15, scope: !12359)
!12362 = !DILocation(line: 218, column: 31, scope: !12359)
!12363 = !DILocation(line: 218, column: 7, scope: !12350)
!12364 = !DILocation(line: 219, column: 15, scope: !12359)
!12365 = !DILocation(line: 219, column: 20, scope: !12359)
!12366 = !DILocation(line: 219, column: 5, scope: !12359)
!12367 = !DILocation(line: 222, column: 16, scope: !12368)
!12368 = distinct !DILexicalBlock(scope: !12359, file: !4804, line: 221, column: 5)
!12369 = !DILocation(line: 227, column: 7, scope: !12368)
!12370 = !DILocation(line: 229, column: 1, scope: !12350)
!12371 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !12372, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12375)
!12372 = !DISubroutineType(types: !12373)
!12373 = !{null, !12374}
!12374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2129, size: 64)
!12375 = !{!12376}
!12376 = !DILocalVariable(name: "vec_", arg: 1, scope: !12371, file: !135, line: 184, type: !12374)
!12377 = !DILocation(line: 0, scope: !12371)
!12378 = !DILocation(line: 184, column: 1, scope: !12379)
!12379 = distinct !DILexicalBlock(scope: !12371, file: !135, line: 184, column: 1)
!12380 = !DILocation(line: 184, column: 1, scope: !12371)
!12381 = distinct !DISubprogram(name: "gimple_set_num_ops", scope: !588, file: !588, line: 1605, type: !4301, scopeLine: 1606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !12382)
!12382 = !{!12383, !12384}
!12383 = !DILocalVariable(name: "gs", arg: 1, scope: !12381, file: !588, line: 1605, type: !1017)
!12384 = !DILocalVariable(name: "num_ops", arg: 2, scope: !12381, file: !588, line: 1605, type: !7)
!12385 = !DILocation(line: 0, scope: !12381)
!12386 = !DILocation(line: 1607, column: 14, scope: !12381)
!12387 = !DILocation(line: 1607, column: 22, scope: !12381)
!12388 = !DILocation(line: 1608, column: 1, scope: !12381)
