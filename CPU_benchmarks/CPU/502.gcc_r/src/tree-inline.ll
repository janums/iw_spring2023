; ModuleID = 'tree-inline.bc'
source_filename = "tree-inline.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.processor_costs = type { i32, i32, i32, i32, [5 x i32], i32, [5 x i32], i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, [3 x i32], [3 x i32], i32, [2 x i32], [2 x i32], i32, [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x %struct.stringop_algs], [2 x %struct.stringop_algs], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stringop_algs = type { i32, [4 x %struct.stringop_strategy] }
%struct.stringop_strategy = type { i32, i32 }
%struct.eni_weights_d = type { i32, i32, i32, i32, i8 }
%struct.diagnostic_context = type { %struct.pretty_print_info*, [12 x i32], i8, i8, [870 x i32], i8, i8, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (%struct.diagnostic_context*, %struct.diagnostic_info*)*, void (i8*, [1 x %struct.__va_list_tag]*)*, %union.tree_node*, %struct.line_map*, i32, i8 }
%struct.pretty_print_info = type { %struct.output_buffer*, i8*, i32, i32, i32, %struct.pp_wrapping_mode_t, i8 (%struct.pretty_print_info*, %struct.text_info*, i8*, i32, i8, i8, i8)*, i8, i8, i8 }
%struct.output_buffer = type { %struct.obstack, %struct.obstack, %struct.obstack*, %struct.chunk_info*, %struct._IO_FILE*, i32, [128 x i8] }
%struct.chunk_info = type { %struct.chunk_info*, [60 x i8*] }
%struct.pp_wrapping_mode_t = type { i32, i32 }
%struct.text_info = type { i8*, [1 x %struct.__va_list_tag]*, i32, i32*, %union.tree_node** }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.diagnostic_info = type { %struct.text_info, i32, i32, %union.tree_node*, i32, i32 }
%struct.line_map = type { i8*, i32, i32, i32, i8, i8, i8 }
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void ()*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i8 (%union.tree_node*)*, void (i32, i8*, i32, i8)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)*, void (i32)*, void (%struct.rtx_def*)*, void ()*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void (i32)*, void (%union.tree_node*, %union.tree_node*)*, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.copy_body_data = type { %union.tree_node*, %union.tree_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.function*, %union.tree_node*, %struct.pointer_map_t*, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)*, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.pointer_map_t*, i32, i8, i8, i8, i8, i32, void (%union.tree_node*)*, %struct.pointer_set_t*, %struct.basic_block_def*, %struct.VEC_gimple_heap*, %struct.pointer_map_t* }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type { %struct.opt_pass, void ()*, void (%struct.cgraph_node_set_def*)*, void ()*, void (%struct.cgraph_node*)*, void (%struct.cgraph_node*, %union.gimple_statement_d**)*, i32, i32 (%struct.cgraph_node*)*, void (%struct.varpool_node*)* }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.cgraph_node_set_def = type { %struct.htab*, %struct.VEC_cgraph_node_ptr_gc*, i8* }
%struct.VEC_cgraph_node_ptr_gc = type { %struct.VEC_cgraph_node_ptr_base }
%struct.VEC_cgraph_node_ptr_base = type { i32, i32, [1 x %struct.cgraph_node*] }
%struct.varpool_node = type { %union.tree_node*, %struct.varpool_node*, %struct.varpool_node*, %struct.varpool_node*, i32, i8 }
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.pointer_set_t = type opaque
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.var_ann_d = type { i8, i32, %union.tree_node* }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.tree_stmt_iterator = type { %struct.tree_statement_list_node*, %union.tree_node* }
%struct.tree_statement_list_node = type { %struct.tree_statement_list_node*, %struct.tree_statement_list_node*, %union.tree_node* }
%struct.tree_constructor = type { %struct.tree_common, %struct.VEC_constructor_elt_gc* }
%struct.VEC_constructor_elt_gc = type { %struct.VEC_constructor_elt_base }
%struct.VEC_constructor_elt_base = type { i32, i32, [1 x %struct.constructor_elt_d] }
%struct.constructor_elt_d = type { %union.tree_node*, %union.tree_node* }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.gimplify_ctx = type { %struct.gimplify_ctx*, %struct.VEC_gimple_heap*, %union.tree_node*, %struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %struct.VEC_tree_heap*, %struct.htab*, i32, i8, i8, i8 }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.tree_block = type { %struct.tree_common, i32, i32, %union.tree_node*, %struct.VEC_tree_gc*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.call_expr_arg_iterator_d = type { %union.tree_node*, i32, i32 }
%struct.gimple_omp_for_iter = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }

@stdout = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@processing_debug_stmt = internal unnamed_addr global i32 0, align 4, !dbg !0
@tree_code_type = external dso_local local_unnamed_addr constant [0 x i32], align 4
@cfun = external dso_local local_unnamed_addr global %struct.function*, align 8
@.str = private unnamed_addr constant [14 x i8] c"tree-inline.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@global_trees = external dso_local local_unnamed_addr global [131 x %union.tree_node*], align 16
@warn_inline = external dso_local local_unnamed_addr global i32, align 4
@.str.2 = private unnamed_addr constant [14 x i8] c"always_inline\00", align 1
@flag_no_inline = external dso_local local_unnamed_addr global i32, align 4
@.str.3 = private unnamed_addr constant [78 x i8] c"function %q+F can never be inlined because it is suppressed using -fno-inline\00", align 1
@targetm = external dso_local local_unnamed_addr global %struct.gcc_target, align 8
@.str.4 = private unnamed_addr constant [88 x i8] c"function %q+F can never be inlined because it uses attributes conflicting with inlining\00", align 1
@inline_forbidden_reason = internal unnamed_addr global i8* null, align 8, !dbg !2406
@optimize_size = external dso_local local_unnamed_addr global i32, align 4
@ix86_cost = external dso_local local_unnamed_addr global %struct.processor_costs*, align 8
@eni_size_weights = common dso_local local_unnamed_addr global %struct.eni_weights_d zeroinitializer, align 4, !dbg !2402
@eni_time_weights = common dso_local local_unnamed_addr global %struct.eni_weights_d zeroinitializer, align 4, !dbg !2404
@global_dc = external dso_local local_unnamed_addr global %struct.diagnostic_context*, align 8
@current_function_decl = external dso_local local_unnamed_addr global %union.tree_node*, align 8
@flag_mudflap = external dso_local local_unnamed_addr global i32, align 4
@lang_hooks = external dso_local local_unnamed_addr global %struct.lang_hooks, align 8
@.str.5 = private unnamed_addr constant [8 x i8] c"noclone\00", align 1
@debug_hooks = external dso_local local_unnamed_addr global %struct.gcc_debug_hooks*, align 8
@eni_inlining_weights = common dso_local local_unnamed_addr global %struct.eni_weights_d zeroinitializer, align 4, !dbg !2392
@.str.6 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@optimize = external dso_local local_unnamed_addr global i32, align 4
@debug_info_level = external dso_local local_unnamed_addr global i32, align 4
@.str.7 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_ops_offset_ = external dso_local local_unnamed_addr constant [0 x i64], align 8
@gss_for_code_ = external dso_local local_unnamed_addr constant [0 x i32], align 4
@.str.8 = private unnamed_addr constant [103 x i8] c"function %q+F can never be inlined because it uses alloca (override using the always_inline attribute)\00", align 1
@.str.9 = private unnamed_addr constant [58 x i8] c"function %q+F can never be inlined because it uses setjmp\00", align 1
@.str.10 = private unnamed_addr constant [75 x i8] c"function %q+F can never be inlined because it uses variable argument lists\00", align 1
@.str.11 = private unnamed_addr constant [85 x i8] c"function %q+F can never be inlined because it uses setjmp-longjmp exception handling\00", align 1
@.str.12 = private unnamed_addr constant [66 x i8] c"function %q+F can never be inlined because it uses non-local goto\00", align 1
@.str.13 = private unnamed_addr constant [92 x i8] c"function %q+F can never be inlined because it uses __builtin_return or __builtin_apply_args\00", align 1
@.str.14 = private unnamed_addr constant [71 x i8] c"function %q+F can never be inlined because it contains a computed goto\00", align 1
@gimple_rhs_class_table = external dso_local local_unnamed_addr constant [0 x i8], align 1
@input_location = external dso_local local_unnamed_addr global i32, align 4
@cgraph_global_info_ready = external dso_local local_unnamed_addr global i8, align 1
@.str.15 = private unnamed_addr constant [36 x i8] c"inlining failed in call to %q+F: %s\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"called from here\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"noinline\00", align 1
@.str.18 = private unnamed_addr constant [5 x i8] c"cold\00", align 1
@dump_file = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@dump_flags = external dso_local local_unnamed_addr global i32, align 4
@.str.19 = private unnamed_addr constant [10 x i8] c"Inlining \00", align 1
@.str.20 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c" with frequency %i\0A\00", align 1
@tree_contains_struct = external dso_local local_unnamed_addr global [191 x [64 x i8]], align 16
@.str.22 = private unnamed_addr constant [71 x i8] c"function %q+F can never be copied because it receives a non-local goto\00", align 1
@.str.23 = private unnamed_addr constant [95 x i8] c"function %q+F can never be copied because it saves address of local label in a static variable\00", align 1
@flag_var_tracking_assignments = external dso_local local_unnamed_addr global i32, align 4
@integer_types = external dso_local local_unnamed_addr global [11 x %union.tree_node*], align 16
@.str.24 = private unnamed_addr constant [74 x i8] c"Edge frequency estimated by cgraph %i diverge from inliner's estimate %i\0A\00", align 1
@.str.25 = private unnamed_addr constant [46 x i8] c"Orig bb: %i, orig bb freq %i, new bb freq %i\0A\00", align 1
@.str.26 = private unnamed_addr constant [30 x i8] c"Created new direct edge to %s\00", align 1
@.str.27 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @vprintf(i8* noalias %__fmt, %struct.__va_list_tag* %__arg) local_unnamed_addr #0 !dbg !2412 {
entry:
  call void @llvm.dbg.value(metadata i8* %__fmt, metadata !2425, metadata !DIExpression()), !dbg !2427
  call void @llvm.dbg.value(metadata %struct.__va_list_tag* %__arg, metadata !2426, metadata !DIExpression()), !dbg !2427
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2428
  %call = tail call i32 @vfprintf(%struct._IO_FILE* %0, i8* %__fmt, %struct.__va_list_tag* %__arg) #6, !dbg !2429
  ret i32 %call, !dbg !2430
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 !dbg !2431 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !2435
  %call = tail call i32 @getc(%struct._IO_FILE* %0) #6, !dbg !2436
  ret i32 %call, !dbg !2437
}

declare dso_local i32 @getc(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fgetc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !2438 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !2492, metadata !DIExpression()), !dbg !2493
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !2494
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !2494
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !2494
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !2494
  %cmp = icmp uge i8* %0, %1, !dbg !2494
  %conv1 = zext i1 %cmp to i64, !dbg !2494
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2494
  %tobool = icmp eq i64 %expval, 0, !dbg !2494
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2494

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !2494
  br label %cond.end, !dbg !2494

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2494
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !2494
  %2 = load i8, i8* %0, align 1, !dbg !2494
  %conv3 = zext i8 %2 to i32, !dbg !2494
  br label %cond.end, !dbg !2494

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !2494
  ret i32 %cond, !dbg !2495
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #3

declare dso_local i32 @__uflow(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !2496 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !2498, metadata !DIExpression()), !dbg !2499
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !2500
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !2500
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !2500
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !2500
  %cmp = icmp uge i8* %0, %1, !dbg !2500
  %conv1 = zext i1 %cmp to i64, !dbg !2500
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2500
  %tobool = icmp eq i64 %expval, 0, !dbg !2500
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2500

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !2500
  br label %cond.end, !dbg !2500

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2500
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !2500
  %2 = load i8, i8* %0, align 1, !dbg !2500
  %conv3 = zext i8 %2 to i32, !dbg !2500
  br label %cond.end, !dbg !2500

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !2500
  ret i32 %cond, !dbg !2501
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #0 !dbg !2502 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !2503
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 1, !dbg !2503
  %1 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !2503
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 2, !dbg !2503
  %2 = load i8*, i8** %_IO_read_end, align 8, !dbg !2503
  %cmp = icmp uge i8* %1, %2, !dbg !2503
  %conv1 = zext i1 %cmp to i64, !dbg !2503
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2503
  %tobool = icmp eq i64 %expval, 0, !dbg !2503
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2503

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %0) #6, !dbg !2503
  br label %cond.end, !dbg !2503

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !2503
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !2503
  %3 = load i8, i8* %1, align 1, !dbg !2503
  %conv3 = zext i8 %3 to i32, !dbg !2503
  br label %cond.end, !dbg !2503

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !2503
  ret i32 %cond, !dbg !2504
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar(i32 %__c) local_unnamed_addr #0 !dbg !2505 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2509, metadata !DIExpression()), !dbg !2510
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2511
  %call = tail call i32 @putc(i32 %__c, %struct._IO_FILE* %0) #6, !dbg !2512
  ret i32 %call, !dbg !2513
}

declare dso_local i32 @putc(i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fputc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2514 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2518, metadata !DIExpression()), !dbg !2520
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2519, metadata !DIExpression()), !dbg !2520
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !2521
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2521
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !2521
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !2521
  %cmp = icmp uge i8* %0, %1, !dbg !2521
  %conv1 = zext i1 %cmp to i64, !dbg !2521
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2521
  %tobool = icmp eq i64 %expval, 0, !dbg !2521
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2521

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2521
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !2521
  br label %cond.end, !dbg !2521

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !2521
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2521
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2521
  store i8 %conv2, i8* %0, align 1, !dbg !2521
  %conv6 = and i32 %__c, 255, !dbg !2521
  br label %cond.end, !dbg !2521

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2521
  ret i32 %cond, !dbg !2522
}

declare dso_local i32 @__overflow(%struct._IO_FILE*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2523 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2525, metadata !DIExpression()), !dbg !2527
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2526, metadata !DIExpression()), !dbg !2527
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !2528
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2528
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !2528
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !2528
  %cmp = icmp uge i8* %0, %1, !dbg !2528
  %conv1 = zext i1 %cmp to i64, !dbg !2528
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2528
  %tobool = icmp eq i64 %expval, 0, !dbg !2528
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2528

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2528
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !2528
  br label %cond.end, !dbg !2528

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !2528
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2528
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2528
  store i8 %conv2, i8* %0, align 1, !dbg !2528
  %conv6 = and i32 %__c, 255, !dbg !2528
  br label %cond.end, !dbg !2528

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2528
  ret i32 %cond, !dbg !2529
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar_unlocked(i32 %__c) local_unnamed_addr #0 !dbg !2530 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2532, metadata !DIExpression()), !dbg !2533
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2534
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 5, !dbg !2534
  %1 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2534
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 6, !dbg !2534
  %2 = load i8*, i8** %_IO_write_end, align 8, !dbg !2534
  %cmp = icmp uge i8* %1, %2, !dbg !2534
  %conv1 = zext i1 %cmp to i64, !dbg !2534
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2534
  %tobool = icmp eq i64 %expval, 0, !dbg !2534
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2534

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2534
  %call = tail call i32 @__overflow(%struct._IO_FILE* %0, i32 %conv3) #6, !dbg !2534
  br label %cond.end, !dbg !2534

cond.false:                                       ; preds = %entry
  %conv4 = trunc i32 %__c to i8, !dbg !2534
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !2534
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2534
  store i8 %conv4, i8* %1, align 1, !dbg !2534
  %conv6 = and i32 %__c, 255, !dbg !2534
  br label %cond.end, !dbg !2534

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2534
  ret i32 %cond, !dbg !2535
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @getline(i8** %__lineptr, i64* %__n, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2536 {
entry:
  call void @llvm.dbg.value(metadata i8** %__lineptr, metadata !2542, metadata !DIExpression()), !dbg !2545
  call void @llvm.dbg.value(metadata i64* %__n, metadata !2543, metadata !DIExpression()), !dbg !2545
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2544, metadata !DIExpression()), !dbg !2545
  %call = tail call i64 @__getdelim(i8** %__lineptr, i64* %__n, i32 10, %struct._IO_FILE* %__stream) #6, !dbg !2546
  ret i64 %call, !dbg !2547
}

declare dso_local i64 @__getdelim(i8**, i64*, i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @feof_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2548 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2550, metadata !DIExpression()), !dbg !2551
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !2552
  %0 = load i32, i32* %_flags, align 8, !dbg !2552
  %and = lshr i32 %0, 4, !dbg !2552
  %and.lobit = and i32 %and, 1, !dbg !2552
  ret i32 %and.lobit, !dbg !2553
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @ferror_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2554 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2556, metadata !DIExpression()), !dbg !2557
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !2558
  %0 = load i32, i32* %_flags, align 8, !dbg !2558
  %and = lshr i32 %0, 5, !dbg !2558
  %and.lobit = and i32 %and, 1, !dbg !2558
  ret i32 %and.lobit, !dbg !2559
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @tolower(i32 %__c) local_unnamed_addr #0 !dbg !2560 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2563, metadata !DIExpression()), !dbg !2564
  %__c.off = add i32 %__c, 128, !dbg !2565
  %0 = icmp ult i32 %__c.off, 384, !dbg !2565
  br i1 %0, label %cond.true, label %cond.end, !dbg !2565

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_tolower_loc() #6, !dbg !2566
  %1 = load i32*, i32** %call, align 8, !dbg !2567
  %idxprom = sext i32 %__c to i64, !dbg !2568
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !2568
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2568
  br label %cond.end, !dbg !2569

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !2569
  ret i32 %cond, !dbg !2570
}

declare dso_local i32** @__ctype_tolower_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @toupper(i32 %__c) local_unnamed_addr #0 !dbg !2571 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2573, metadata !DIExpression()), !dbg !2574
  %__c.off = add i32 %__c, 128, !dbg !2575
  %0 = icmp ult i32 %__c.off, 384, !dbg !2575
  br i1 %0, label %cond.true, label %cond.end, !dbg !2575

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_toupper_loc() #6, !dbg !2576
  %1 = load i32*, i32** %call, align 8, !dbg !2577
  %idxprom = sext i32 %__c to i64, !dbg !2578
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !2578
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2578
  br label %cond.end, !dbg !2579

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !2579
  ret i32 %cond, !dbg !2580
}

declare dso_local i32** @__ctype_toupper_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @atoi(i8* %__nptr) local_unnamed_addr #0 !dbg !2581 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2586, metadata !DIExpression()), !dbg !2587
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !2588
  %conv = trunc i64 %call to i32, !dbg !2589
  ret i32 %conv, !dbg !2590
}

declare dso_local i64 @strtol(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atol(i8* %__nptr) local_unnamed_addr #0 !dbg !2591 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2595, metadata !DIExpression()), !dbg !2596
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !2597
  ret i64 %call, !dbg !2598
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atoll(i8* %__nptr) local_unnamed_addr #0 !dbg !2599 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2604, metadata !DIExpression()), !dbg !2605
  %call = tail call i64 @strtoll(i8* %__nptr, i8** null, i32 10) #6, !dbg !2606
  ret i64 %call, !dbg !2607
}

declare dso_local i64 @strtoll(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i8* @bsearch(i8* %__key, i8* %__base, i64 %__nmemb, i64 %__size, i32 (i8*, i8*)* %__compar) local_unnamed_addr #0 !dbg !2608 {
entry:
  call void @llvm.dbg.value(metadata i8* %__key, metadata !2614, metadata !DIExpression()), !dbg !2624
  call void @llvm.dbg.value(metadata i8* %__base, metadata !2615, metadata !DIExpression()), !dbg !2624
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !2616, metadata !DIExpression()), !dbg !2624
  call void @llvm.dbg.value(metadata i64 %__size, metadata !2617, metadata !DIExpression()), !dbg !2624
  call void @llvm.dbg.value(metadata i32 (i8*, i8*)* %__compar, metadata !2618, metadata !DIExpression()), !dbg !2624
  call void @llvm.dbg.value(metadata i64 0, metadata !2619, metadata !DIExpression()), !dbg !2624
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !2620, metadata !DIExpression()), !dbg !2624
  br label %while.cond, !dbg !2625

while.cond:                                       ; preds = %if.end6, %entry
  %__l.0 = phi i64 [ 0, %entry ], [ %__l.1, %if.end6 ], !dbg !2626
  %__u.0 = phi i64 [ %__nmemb, %entry ], [ %__u.1, %if.end6 ], !dbg !2624
  call void @llvm.dbg.value(metadata i64 %__u.0, metadata !2620, metadata !DIExpression()), !dbg !2624
  call void @llvm.dbg.value(metadata i64 %__l.0, metadata !2619, metadata !DIExpression()), !dbg !2624
  %cmp = icmp ult i64 %__l.0, %__u.0, !dbg !2627
  br i1 %cmp, label %while.body, label %cleanup, !dbg !2625

while.body:                                       ; preds = %while.cond
  %add = add i64 %__l.0, %__u.0, !dbg !2628
  %div = lshr i64 %add, 1, !dbg !2630
  call void @llvm.dbg.value(metadata i64 %div, metadata !2621, metadata !DIExpression()), !dbg !2624
  %mul = mul i64 %div, %__size, !dbg !2631
  %add.ptr = getelementptr inbounds i8, i8* %__base, i64 %mul, !dbg !2632
  call void @llvm.dbg.value(metadata i8* %add.ptr, metadata !2622, metadata !DIExpression()), !dbg !2624
  %call = tail call i32 %__compar(i8* %__key, i8* %add.ptr) #6, !dbg !2633
  call void @llvm.dbg.value(metadata i32 %call, metadata !2623, metadata !DIExpression()), !dbg !2624
  %cmp1 = icmp slt i32 %call, 0, !dbg !2634
  br i1 %cmp1, label %if.end6, label %if.else, !dbg !2636

if.else:                                          ; preds = %while.body
  %cmp2 = icmp eq i32 %call, 0, !dbg !2637
  br i1 %cmp2, label %cleanup, label %if.then3, !dbg !2639

if.then3:                                         ; preds = %if.else
  %add4 = add nuw i64 %div, 1, !dbg !2640
  call void @llvm.dbg.value(metadata i64 %add4, metadata !2619, metadata !DIExpression()), !dbg !2624
  br label %if.end6

if.end6:                                          ; preds = %while.body, %if.then3
  %__l.1 = phi i64 [ %add4, %if.then3 ], [ %__l.0, %while.body ], !dbg !2624
  %__u.1 = phi i64 [ %__u.0, %if.then3 ], [ %div, %while.body ], !dbg !2624
  call void @llvm.dbg.value(metadata i64 %__u.1, metadata !2620, metadata !DIExpression()), !dbg !2624
  call void @llvm.dbg.value(metadata i64 %__l.1, metadata !2619, metadata !DIExpression()), !dbg !2624
  br label %while.cond, !dbg !2625, !llvm.loop !2641

cleanup:                                          ; preds = %if.else, %while.cond
  %retval.0 = phi i8* [ %add.ptr, %if.else ], [ null, %while.cond ], !dbg !2624
  ret i8* %retval.0, !dbg !2643
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: inlinehint nounwind uwtable
define dso_local double @atof(i8* %__nptr) local_unnamed_addr #0 !dbg !2644 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2650, metadata !DIExpression()), !dbg !2651
  %call = tail call double @strtod(i8* %__nptr, i8** null) #6, !dbg !2652
  ret double %call, !dbg !2653
}

declare dso_local double @strtod(i8*, i8**) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoimax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2654 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !2663, metadata !DIExpression()), !dbg !2666
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !2664, metadata !DIExpression()), !dbg !2666
  call void @llvm.dbg.value(metadata i32 %base, metadata !2665, metadata !DIExpression()), !dbg !2666
  %call = tail call i64 @__strtol_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !2667
  ret i64 %call, !dbg !2668
}

declare dso_local i64 @__strtol_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoumax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2669 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !2675, metadata !DIExpression()), !dbg !2678
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !2676, metadata !DIExpression()), !dbg !2678
  call void @llvm.dbg.value(metadata i32 %base, metadata !2677, metadata !DIExpression()), !dbg !2678
  %call = tail call i64 @__strtoul_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !2679
  ret i64 %call, !dbg !2680
}

declare dso_local i64 @__strtoul_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoimax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2681 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !2692, metadata !DIExpression()), !dbg !2695
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !2693, metadata !DIExpression()), !dbg !2695
  call void @llvm.dbg.value(metadata i32 %base, metadata !2694, metadata !DIExpression()), !dbg !2695
  %call = tail call i64 @__wcstol_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !2696
  ret i64 %call, !dbg !2697
}

declare dso_local i64 @__wcstol_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoumax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2698 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !2702, metadata !DIExpression()), !dbg !2705
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !2703, metadata !DIExpression()), !dbg !2705
  call void @llvm.dbg.value(metadata i32 %base, metadata !2704, metadata !DIExpression()), !dbg !2705
  %call = tail call i64 @__wcstoul_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !2706
  ret i64 %call, !dbg !2707
}

declare dso_local i64 @__wcstoul_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2708 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2748, metadata !DIExpression()), !dbg !2750
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2749, metadata !DIExpression()), !dbg !2750
  %call = tail call i32 @__xstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !2751
  ret i32 %call, !dbg !2752
}

declare dso_local i32 @__xstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2753 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2755, metadata !DIExpression()), !dbg !2757
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2756, metadata !DIExpression()), !dbg !2757
  %call = tail call i32 @__lxstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !2758
  ret i32 %call, !dbg !2759
}

declare dso_local i32 @__lxstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat(i32 %__fd, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2760 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2764, metadata !DIExpression()), !dbg !2766
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2765, metadata !DIExpression()), !dbg !2766
  %call = tail call i32 @__fxstat(i32 1, i32 %__fd, %struct.stat* %__statbuf) #6, !dbg !2767
  ret i32 %call, !dbg !2768
}

declare dso_local i32 @__fxstat(i32, i32, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat(i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2769 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2773, metadata !DIExpression()), !dbg !2777
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2774, metadata !DIExpression()), !dbg !2777
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2775, metadata !DIExpression()), !dbg !2777
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2776, metadata !DIExpression()), !dbg !2777
  %call = tail call i32 @__fxstatat(i32 1, i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) #6, !dbg !2778
  ret i32 %call, !dbg !2779
}

declare dso_local i32 @__fxstatat(i32, i32, i8*, %struct.stat*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknod(i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2780 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2784, metadata !DIExpression()), !dbg !2787
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2785, metadata !DIExpression()), !dbg !2787
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2786, metadata !DIExpression()), !dbg !2787
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2786, metadata !DIExpression(DW_OP_deref)), !dbg !2787
  %call = call i32 @__xmknod(i32 0, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !2788
  ret i32 %call, !dbg !2789
}

declare dso_local i32 @__xmknod(i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknodat(i32 %__fd, i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2790 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2794, metadata !DIExpression()), !dbg !2798
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2795, metadata !DIExpression()), !dbg !2798
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2796, metadata !DIExpression()), !dbg !2798
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2797, metadata !DIExpression()), !dbg !2798
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2797, metadata !DIExpression(DW_OP_deref)), !dbg !2798
  %call = call i32 @__xmknodat(i32 0, i32 %__fd, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !2799
  ret i32 %call, !dbg !2800
}

declare dso_local i32 @__xmknodat(i32, i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2801 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2825, metadata !DIExpression()), !dbg !2827
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2826, metadata !DIExpression()), !dbg !2827
  %call = tail call i32 @__xstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !2828
  ret i32 %call, !dbg !2829
}

declare dso_local i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2830 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2832, metadata !DIExpression()), !dbg !2834
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2833, metadata !DIExpression()), !dbg !2834
  %call = tail call i32 @__lxstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !2835
  ret i32 %call, !dbg !2836
}

declare dso_local i32 @__lxstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat64(i32 %__fd, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2837 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2841, metadata !DIExpression()), !dbg !2843
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2842, metadata !DIExpression()), !dbg !2843
  %call = tail call i32 @__fxstat64(i32 1, i32 %__fd, %struct.stat64* %__statbuf) #6, !dbg !2844
  ret i32 %call, !dbg !2845
}

declare dso_local i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat64(i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2846 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2850, metadata !DIExpression()), !dbg !2854
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2851, metadata !DIExpression()), !dbg !2854
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2852, metadata !DIExpression()), !dbg !2854
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2853, metadata !DIExpression()), !dbg !2854
  %call = tail call i32 @__fxstatat64(i32 1, i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) #6, !dbg !2855
  ret i32 %call, !dbg !2856
}

declare dso_local i32 @__fxstatat64(i32, i32, i8*, %struct.stat64*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %key, %union.tree_node* %value) local_unnamed_addr #5 !dbg !2857 {
entry:
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !2861, metadata !DIExpression()), !dbg !2864
  call void @llvm.dbg.value(metadata %union.tree_node* %key, metadata !2862, metadata !DIExpression()), !dbg !2864
  call void @llvm.dbg.value(metadata %union.tree_node* %value, metadata !2863, metadata !DIExpression()), !dbg !2864
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !2865
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !2865
  %1 = bitcast %union.tree_node* %key to i8*, !dbg !2866
  %call = tail call i8** @pointer_map_insert(%struct.pointer_map_t* %0, i8* %1) #6, !dbg !2867
  %2 = bitcast i8** %call to %union.tree_node**, !dbg !2868
  store %union.tree_node* %value, %union.tree_node** %2, align 8, !dbg !2868
  %cmp = icmp eq %union.tree_node* %key, %value, !dbg !2869
  br i1 %cmp, label %if.end, label %if.then, !dbg !2871

if.then:                                          ; preds = %entry
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !2872
  %4 = bitcast %union.tree_node* %value to i8*, !dbg !2873
  %call2 = tail call i8** @pointer_map_insert(%struct.pointer_map_t* %3, i8* %4) #6, !dbg !2874
  %5 = bitcast i8** %call2 to %union.tree_node**, !dbg !2875
  store %union.tree_node* %value, %union.tree_node** %5, align 8, !dbg !2875
  br label %if.end, !dbg !2876

if.end:                                           ; preds = %entry, %if.then
  ret void, !dbg !2877
}

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @remap_decl(%union.tree_node* %decl, %struct.copy_body_data* %id) local_unnamed_addr #5 !dbg !2878 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !2882, metadata !DIExpression()), !dbg !2888
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !2883, metadata !DIExpression()), !dbg !2888
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !2889
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !2889
  %1 = bitcast %union.tree_node* %decl to i8*, !dbg !2890
  %call = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %1) #6, !dbg !2891
  %2 = bitcast i8** %call to %union.tree_node**, !dbg !2892
  call void @llvm.dbg.value(metadata %union.tree_node** %2, metadata !2884, metadata !DIExpression()), !dbg !2888
  %tobool = icmp eq i8** %call, null, !dbg !2893
  %3 = load i32, i32* @processing_debug_stmt, align 4, !dbg !2895
  %tobool1 = icmp ne i32 %3, 0, !dbg !2895
  %or.cond = and i1 %tobool, %tobool1, !dbg !2896
  br i1 %or.cond, label %if.then, label %if.end, !dbg !2896

if.then:                                          ; preds = %entry
  store i32 -1, i32* @processing_debug_stmt, align 4, !dbg !2897
  br label %cleanup73, !dbg !2899

if.end:                                           ; preds = %entry
  br i1 %tobool, label %if.then3, label %if.end69, !dbg !2900

if.then3:                                         ; preds = %if.end
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 7, !dbg !2901
  %4 = load %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)*, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !2901
  %call4 = tail call %union.tree_node* %4(%union.tree_node* %decl, %struct.copy_body_data* %id) #6, !dbg !2902
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !2885, metadata !DIExpression()), !dbg !2903
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %decl, %union.tree_node* %call4) #7, !dbg !2904
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2905
  %bf.load = load i64, i64* %5, align 8, !dbg !2905
  %bf.cast = and i64 %bf.load, 65535, !dbg !2905
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !2905
  %6 = load i32, i32* %arrayidx, align 4, !dbg !2905
  %cmp = icmp eq i32 %6, 3, !dbg !2905
  br i1 %cmp, label %if.end6, label %cleanup73, !dbg !2907

if.end6:                                          ; preds = %if.then3
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2908
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2908
  %call7 = tail call %union.tree_node* @remap_type(%union.tree_node* %7, %struct.copy_body_data* %id) #7, !dbg !2909
  store %union.tree_node* %call7, %union.tree_node** %type, align 8, !dbg !2910
  %bf.load11 = load i64, i64* %5, align 8, !dbg !2911
  %bf.cast131 = and i64 %bf.load11, 65535, !dbg !2913
  %cmp14 = icmp eq i64 %bf.cast131, 35, !dbg !2913
  br i1 %cmp14, label %if.then15, label %if.end19, !dbg !2914

if.then15:                                        ; preds = %if.end6
  %result = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 3, !dbg !2915
  %8 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !2915
  %call16 = tail call %union.tree_node* @remap_type(%union.tree_node* %8, %struct.copy_body_data* %id) #7, !dbg !2916
  store %union.tree_node* %call16, %union.tree_node** %result, align 8, !dbg !2917
  br label %if.end19, !dbg !2918

if.end19:                                         ; preds = %if.then15, %if.end6
  %size = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !2919
  %9 = bitcast %struct.copy_body_data* %id to i8*, !dbg !2919
  %call20 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %size, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %9, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !2919
  %size_unit = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !2920
  %call22 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %size_unit, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %9, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !2920
  %bf.load24 = load i64, i64* %5, align 8, !dbg !2921
  %bf.cast262 = and i64 %bf.load24, 65535, !dbg !2923
  %cmp27 = icmp eq i64 %bf.cast262, 31, !dbg !2923
  br i1 %cmp27, label %if.then28, label %if.end39, !dbg !2924

if.then28:                                        ; preds = %if.end19
  %offset = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !2925
  %10 = bitcast %struct.rtx_def** %offset to %union.tree_node**, !dbg !2925
  %call29 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %10, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %9, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !2925
  %context = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !2927
  %11 = bitcast %union.tree_node** %context to i64**, !dbg !2927
  %12 = load i64*, i64** %11, align 8, !dbg !2927
  %bf.load31 = load i64, i64* %12, align 8, !dbg !2927
  %bf.cast336 = and i64 %bf.load31, 65535, !dbg !2929
  %cmp34 = icmp eq i64 %bf.cast336, 18, !dbg !2929
  br i1 %cmp34, label %if.then35, label %if.end39, !dbg !2930

if.then35:                                        ; preds = %if.then28
  %13 = getelementptr inbounds %union.tree_node, %union.tree_node* %call4, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !2931
  %call37 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %13, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %9, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !2931
  br label %if.end39, !dbg !2931

if.end39:                                         ; preds = %if.then28, %if.then35, %if.end19
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2932
  %tobool40 = icmp eq %struct.function* %14, null, !dbg !2932
  br i1 %tobool40, label %cleanup73, label %land.lhs.true41, !dbg !2934

land.lhs.true41:                                  ; preds = %if.end39
  %call43 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* nonnull %14) #7, !dbg !2935
  %tobool44 = icmp eq i8 %call43, 0, !dbg !2935
  br i1 %tobool44, label %cleanup73, label %land.lhs.true45, !dbg !2936

land.lhs.true45:                                  ; preds = %land.lhs.true41
  %bf.load47 = load i64, i64* %5, align 8, !dbg !2937
  %bf.cast493 = and i64 %bf.load47, 65535, !dbg !2938
  %cmp50 = icmp eq i64 %bf.cast493, 32, !dbg !2938
  br i1 %cmp50, label %if.then65, label %lor.lhs.false, !dbg !2939

lor.lhs.false:                                    ; preds = %land.lhs.true45
  %cmp56 = icmp eq i64 %bf.cast493, 36, !dbg !2940
  br i1 %cmp56, label %if.then65, label %lor.lhs.false58, !dbg !2941

lor.lhs.false58:                                  ; preds = %lor.lhs.false
  %cmp63 = icmp eq i64 %bf.cast493, 34, !dbg !2942
  br i1 %cmp63, label %if.then65, label %cleanup73, !dbg !2943

if.then65:                                        ; preds = %lor.lhs.false58, %lor.lhs.false, %land.lhs.true45
  %call66 = tail call fastcc %struct.var_ann_d* @get_var_ann(%union.tree_node* %call4) #7, !dbg !2944
  %call67 = tail call zeroext i8 @add_referenced_var(%union.tree_node* %call4) #6, !dbg !2946
  br label %cleanup73, !dbg !2947

if.end69:                                         ; preds = %if.end
  %do_not_unshare = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 16, !dbg !2948
  %15 = load i8, i8* %do_not_unshare, align 1, !dbg !2948
  %tobool70 = icmp eq i8 %15, 0, !dbg !2950
  %16 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !2951
  br i1 %tobool70, label %if.else, label %cleanup73, !dbg !2952

if.else:                                          ; preds = %if.end69
  %call72 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %16) #6, !dbg !2953
  br label %cleanup73, !dbg !2954

cleanup73:                                        ; preds = %if.end69, %land.lhs.true41, %if.end39, %if.then3, %if.then65, %lor.lhs.false58, %if.else, %if.then
  %retval.1 = phi %union.tree_node* [ %call72, %if.else ], [ %decl, %if.then ], [ %call4, %if.end39 ], [ %call4, %land.lhs.true41 ], [ %call4, %lor.lhs.false58 ], [ %call4, %if.then65 ], [ %call4, %if.then3 ], [ %16, %if.end69 ], !dbg !2888
  ret %union.tree_node* %retval.1, !dbg !2955
}

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @remap_type(%union.tree_node* %type, %struct.copy_body_data* %id) local_unnamed_addr #5 !dbg !2956 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !2958, metadata !DIExpression()), !dbg !2962
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !2959, metadata !DIExpression()), !dbg !2962
  %cmp = icmp eq %union.tree_node* %type, null, !dbg !2963
  br i1 %cmp, label %cleanup, label %if.end, !dbg !2965

if.end:                                           ; preds = %entry
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !2966
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !2966
  %1 = bitcast %union.tree_node* %type to i8*, !dbg !2967
  %call = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* nonnull %1) #6, !dbg !2968
  call void @llvm.dbg.value(metadata i8** %call, metadata !2960, metadata !DIExpression()), !dbg !2962
  %tobool = icmp eq i8** %call, null, !dbg !2969
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !2971

if.then1:                                         ; preds = %if.end
  %2 = bitcast i8** %call to %union.tree_node**, !dbg !2972
  call void @llvm.dbg.value(metadata %union.tree_node** %2, metadata !2960, metadata !DIExpression()), !dbg !2962
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !2973
  br label %cleanup, !dbg !2974

if.end2:                                          ; preds = %if.end
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 0, !dbg !2975
  %4 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !2975
  %call3 = tail call zeroext i8 @variably_modified_type_p(%union.tree_node* nonnull %type, %union.tree_node* %4) #6, !dbg !2977
  %tobool4 = icmp eq i8 %call3, 0, !dbg !2977
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !2978

if.then5:                                         ; preds = %if.end2
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* nonnull %type, %union.tree_node* nonnull %type) #7, !dbg !2979
  br label %cleanup, !dbg !2981

if.end6:                                          ; preds = %if.end2
  %remapping_type_depth = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 17, !dbg !2982
  %5 = load i32, i32* %remapping_type_depth, align 8, !dbg !2983
  %inc = add nsw i32 %5, 1, !dbg !2983
  store i32 %inc, i32* %remapping_type_depth, align 8, !dbg !2983
  %call7 = tail call fastcc %union.tree_node* @remap_type_1(%union.tree_node* nonnull %type, %struct.copy_body_data* %id) #7, !dbg !2984
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !2961, metadata !DIExpression()), !dbg !2962
  %6 = load i32, i32* %remapping_type_depth, align 8, !dbg !2985
  %dec = add nsw i32 %6, -1, !dbg !2985
  store i32 %dec, i32* %remapping_type_depth, align 8, !dbg !2985
  br label %cleanup, !dbg !2986

cleanup:                                          ; preds = %entry, %if.end6, %if.then5, %if.then1
  %retval.0 = phi %union.tree_node* [ %3, %if.then1 ], [ %call7, %if.end6 ], [ %type, %if.then5 ], [ null, %entry ], !dbg !2962
  ret %union.tree_node* %retval.0, !dbg !2987
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @copy_tree_body_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #5 !dbg !2988 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !2993, metadata !DIExpression()), !dbg !3038
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !2994, metadata !DIExpression()), !dbg !3038
  call void @llvm.dbg.value(metadata i8* %data, metadata !2995, metadata !DIExpression()), !dbg !3038
  %0 = bitcast i8* %data to %struct.copy_body_data*, !dbg !3039
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %0, metadata !2996, metadata !DIExpression()), !dbg !3038
  %src_fn = bitcast i8* %data to %union.tree_node**, !dbg !3040
  %1 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !3040
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !2997, metadata !DIExpression()), !dbg !3038
  %2 = bitcast %union.tree_node** %tp to i64**, !dbg !3041
  %3 = load i64*, i64** %2, align 8, !dbg !3041
  %bf.load = load i64, i64* %3, align 8, !dbg !3041
  %bf.cast7 = and i64 %bf.load, 65535, !dbg !3042
  %cmp = icmp eq i64 %bf.cast7, 135, !dbg !3042
  br i1 %cmp, label %land.lhs.true, label %if.else10, !dbg !3043

land.lhs.true:                                    ; preds = %entry
  %4 = getelementptr inbounds i8, i8* %data, i64 101, !dbg !3044
  %5 = load i8, i8* %4, align 1, !dbg !3044
  %tobool = icmp eq i8 %5, 0, !dbg !3045
  br i1 %tobool, label %if.else10, label %if.then, !dbg !3046

if.then:                                          ; preds = %land.lhs.true
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 5, !dbg !3047
  %6 = bitcast i64* %arrayidx to %union.tree_node**, !dbg !3047
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !3047
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !2999, metadata !DIExpression()), !dbg !3048
  %tobool1 = icmp eq %union.tree_node* %7, null, !dbg !3049
  br i1 %tobool1, label %if.else, label %land.lhs.true2, !dbg !3051

land.lhs.true2:                                   ; preds = %if.then
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3052
  %bf.load4 = load i64, i64* %8, align 8, !dbg !3052
  %bf.cast634 = and i64 %bf.load4, 65535, !dbg !3053
  %cmp7 = icmp eq i64 %bf.cast634, 53, !dbg !3053
  br i1 %cmp7, label %if.then9, label %if.else, !dbg !3054

if.then9:                                         ; preds = %land.lhs.true2
  %call = tail call %union.tree_node* @copy_node_stat(%union.tree_node* nonnull %7) #6, !dbg !3055
  br label %cleanup, !dbg !3057

if.else:                                          ; preds = %if.then, %land.lhs.true2
  br label %cleanup, !dbg !3058

cleanup:                                          ; preds = %if.then9, %if.else
  %storemerge = phi %union.tree_node* [ null, %if.else ], [ %call, %if.then9 ], !dbg !3060
  %cleanup.dest.slot.0 = phi i1 [ false, %if.else ], [ true, %if.then9 ]
  store %union.tree_node* %storemerge, %union.tree_node** %tp, align 8, !dbg !3060
  br i1 %cleanup.dest.slot.0, label %if.end513, label %cleanup514

if.else10:                                        ; preds = %land.lhs.true, %entry
  %cmp15 = icmp eq i64 %bf.cast7, 141, !dbg !3061
  %.cast = bitcast i64* %3 to %union.tree_node*, !dbg !3062
  br i1 %cmp15, label %if.then17, label %if.else19, !dbg !3063

if.then17:                                        ; preds = %if.else10
  %call18 = tail call fastcc %union.tree_node* @remap_ssa_name(%union.tree_node* %.cast, %struct.copy_body_data* %0) #7, !dbg !3064
  store %union.tree_node* %call18, %union.tree_node** %tp, align 8, !dbg !3066
  store i32 0, i32* %walk_subtrees, align 4, !dbg !3067
  br label %cleanup514, !dbg !3068

if.else19:                                        ; preds = %if.else10
  %call20 = tail call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %.cast, %union.tree_node* %1) #6, !dbg !3069
  %tobool21 = icmp eq i8 %call20, 0, !dbg !3069
  %9 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !3070
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3071
  %11 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !3071
  br i1 %tobool21, label %if.else60, label %if.then22, !dbg !3071

if.then22:                                        ; preds = %if.else19
  %call23 = tail call %union.tree_node* @remap_decl(%union.tree_node* %9, %struct.copy_body_data* %0) #7, !dbg !3072
  call void @llvm.dbg.value(metadata %union.tree_node* %call23, metadata !3002, metadata !DIExpression()), !dbg !3073
  %tobool24 = icmp eq %union.tree_node* %call23, null, !dbg !3074
  br i1 %tobool24, label %cond.true, label %cond.end, !dbg !3074

cond.true:                                        ; preds = %if.then22
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 958, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !3074
  br label %cond.end, !dbg !3074

cond.end:                                         ; preds = %if.then22, %cond.true
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3073
  br label %while.cond, !dbg !3075

while.cond:                                       ; preds = %while.body, %cond.end
  %new_decl.0 = phi %union.tree_node* [ %call23, %cond.end ], [ %16, %while.body ], !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0, metadata !3002, metadata !DIExpression()), !dbg !3073
  %13 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3075
  %bf.load26 = load i64, i64* %13, align 8, !dbg !3075
  %bf.cast2831 = and i64 %bf.load26, 65535, !dbg !3075
  %cmp29 = icmp eq i64 %bf.cast2831, 116, !dbg !3075
  br i1 %cmp29, label %land.lhs.true44, label %lor.lhs.false, !dbg !3075

lor.lhs.false:                                    ; preds = %while.cond
  %14 = or i64 %bf.cast2831, 4, !dbg !3075
  %15 = icmp eq i64 %14, 117, !dbg !3075
  br i1 %15, label %land.lhs.true44, label %while.end, !dbg !3075

land.lhs.true44:                                  ; preds = %lor.lhs.false, %while.cond
  %operands46 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3075
  %16 = load %union.tree_node*, %union.tree_node** %operands46, align 8, !dbg !3075
  %cmp48 = icmp eq %union.tree_node* %16, %12, !dbg !3075
  br i1 %cmp48, label %while.end, label %land.rhs, !dbg !3075

land.rhs:                                         ; preds = %land.lhs.true44
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3075
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3075
  %type54 = getelementptr inbounds %union.tree_node, %union.tree_node* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3075
  %18 = load %union.tree_node*, %union.tree_node** %type54, align 8, !dbg !3075
  %cmp55 = icmp eq %union.tree_node* %17, %18, !dbg !3075
  br i1 %cmp55, label %while.body, label %while.end, !dbg !3075

while.body:                                       ; preds = %land.rhs
  call void @llvm.dbg.value(metadata %union.tree_node* %16, metadata !3002, metadata !DIExpression()), !dbg !3073
  br label %while.cond, !dbg !3075, !llvm.loop !3076

while.end:                                        ; preds = %lor.lhs.false, %land.lhs.true44, %land.rhs
  %new_decl.0.lcssa = phi %union.tree_node* [ %new_decl.0, %lor.lhs.false ], [ %new_decl.0, %land.lhs.true44 ], [ %new_decl.0, %land.rhs ], !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !3002, metadata !DIExpression()), !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !3002, metadata !DIExpression()), !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !3002, metadata !DIExpression()), !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !3002, metadata !DIExpression()), !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !3002, metadata !DIExpression()), !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !3002, metadata !DIExpression()), !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !3002, metadata !DIExpression()), !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !3002, metadata !DIExpression()), !dbg !3073
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !3002, metadata !DIExpression()), !dbg !3073
  store %union.tree_node* %new_decl.0.lcssa, %union.tree_node** %tp, align 8, !dbg !3077
  store i32 0, i32* %walk_subtrees, align 4, !dbg !3078
  br label %if.end513, !dbg !3079

if.else60:                                        ; preds = %if.else19
  %19 = getelementptr inbounds %union.tree_node, %union.tree_node* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3080
  %bf.load62 = load i64, i64* %19, align 8, !dbg !3080
  %bf.cast649 = and i64 %bf.load62, 65535, !dbg !3081
  %cmp65 = icmp eq i64 %bf.cast649, 147, !dbg !3081
  br i1 %cmp65, label %if.then67, label %if.else68, !dbg !3082

if.then67:                                        ; preds = %if.else60
  tail call fastcc void @copy_statement_list(%union.tree_node** %tp) #7, !dbg !3083
  br label %if.end513, !dbg !3083

if.else68:                                        ; preds = %if.else60
  %cmp73 = icmp eq i64 %bf.cast649, 120, !dbg !3084
  br i1 %cmp73, label %if.then82, label %lor.lhs.false75, !dbg !3085

lor.lhs.false75:                                  ; preds = %if.else68
  %cmp80 = icmp eq i64 %bf.cast649, 55, !dbg !3086
  br i1 %cmp80, label %if.then82, label %if.else83, !dbg !3087

if.then82:                                        ; preds = %lor.lhs.false75, %if.else68
  %decl_map = getelementptr inbounds i8, i8* %data, i64 48, !dbg !3088
  %20 = bitcast i8* %decl_map to i8**, !dbg !3088
  %21 = load i8*, i8** %20, align 8, !dbg !3088
  tail call fastcc void @remap_save_expr(%union.tree_node** %tp, i8* %21, i32* %walk_subtrees) #7, !dbg !3089
  br label %if.end513, !dbg !3089

if.else83:                                        ; preds = %lor.lhs.false75
  %cmp88 = icmp eq i64 %bf.cast649, 30, !dbg !3090
  br i1 %cmp88, label %land.lhs.true90, label %if.else99, !dbg !3091

land.lhs.true90:                                  ; preds = %if.else83
  %context = getelementptr inbounds %union.tree_node, %union.tree_node* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3092
  %22 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3092
  %tobool91 = icmp eq %union.tree_node* %22, null, !dbg !3092
  br i1 %tobool91, label %if.then97, label %lor.lhs.false92, !dbg !3093

lor.lhs.false92:                                  ; preds = %land.lhs.true90
  %call93 = tail call %union.tree_node* @decl_function_context(%union.tree_node* %9) #6, !dbg !3094
  %23 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !3095
  %cmp95 = icmp eq %union.tree_node* %call93, %23, !dbg !3096
  br i1 %cmp95, label %lor.lhs.false92.if.then97_crit_edge, label %lor.lhs.false92.if.else99_crit_edge, !dbg !3097

lor.lhs.false92.if.then97_crit_edge:              ; preds = %lor.lhs.false92
  %.pre44 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !3098
  br label %if.then97, !dbg !3097

lor.lhs.false92.if.else99_crit_edge:              ; preds = %lor.lhs.false92
  %.pre = load i64*, i64** %2, align 8, !dbg !3099
  %bf.load101.pre = load i64, i64* %.pre, align 8, !dbg !3099
  %24 = bitcast i64* %.pre to %union.tree_node*, !dbg !3097
  %25 = bitcast i64* %.pre to %struct.tree_exp*, !dbg !3097
  br label %if.else99, !dbg !3097

if.then97:                                        ; preds = %lor.lhs.false92.if.then97_crit_edge, %land.lhs.true90
  %26 = phi %union.tree_node* [ %.pre44, %lor.lhs.false92.if.then97_crit_edge ], [ %9, %land.lhs.true90 ], !dbg !3098
  %call98 = tail call %union.tree_node* @remap_decl(%union.tree_node* %26, %struct.copy_body_data* %0) #7, !dbg !3100
  store %union.tree_node* %call98, %union.tree_node** %tp, align 8, !dbg !3101
  br label %if.end513, !dbg !3102

if.else99:                                        ; preds = %lor.lhs.false92.if.else99_crit_edge, %if.else83
  %27 = phi %struct.tree_exp* [ %25, %lor.lhs.false92.if.else99_crit_edge ], [ %11, %if.else83 ]
  %28 = phi %struct.tree_exp* [ %25, %lor.lhs.false92.if.else99_crit_edge ], [ %11, %if.else83 ]
  %29 = phi %struct.tree_exp* [ %25, %lor.lhs.false92.if.else99_crit_edge ], [ %11, %if.else83 ]
  %30 = phi %union.tree_node* [ %24, %lor.lhs.false92.if.else99_crit_edge ], [ %9, %if.else83 ]
  %31 = phi i64* [ %.pre, %lor.lhs.false92.if.else99_crit_edge ], [ %10, %if.else83 ]
  %bf.load119 = phi i64 [ %bf.load101.pre, %lor.lhs.false92.if.else99_crit_edge ], [ %bf.load62, %if.else83 ], !dbg !3099
  %bf.cast10313 = and i64 %bf.load119, 65535, !dbg !3103
  %cmp104 = icmp eq i64 %bf.cast10313, 58, !dbg !3103
  br i1 %cmp104, label %if.then106, label %if.else107, !dbg !3104

if.then106:                                       ; preds = %if.else99
  tail call fastcc void @copy_bind_expr(%union.tree_node** %tp, i32* %walk_subtrees, %struct.copy_body_data* %0) #7, !dbg !3105
  br label %if.end513, !dbg !3105

if.else107:                                       ; preds = %if.else99
  %arrayidx112 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast10313, !dbg !3106
  %32 = load i32, i32* %arrayidx112, align 4, !dbg !3106
  %cmp113 = icmp eq i32 %32, 2, !dbg !3106
  br i1 %cmp113, label %if.then115, label %if.else117, !dbg !3107

if.then115:                                       ; preds = %if.else107
  %.cast14 = bitcast i64* %31 to %union.tree_node*, !dbg !3108
  %call116 = tail call %union.tree_node* @remap_type(%union.tree_node* %.cast14, %struct.copy_body_data* %0) #7, !dbg !3109
  store %union.tree_node* %call116, %union.tree_node** %tp, align 8, !dbg !3110
  br label %if.end513, !dbg !3111

if.else117:                                       ; preds = %if.else107
  %cmp124 = icmp eq i32 %32, 1, !dbg !3112
  br i1 %cmp124, label %if.then126, label %if.else153, !dbg !3113

if.then126:                                       ; preds = %if.else117
  %type128 = getelementptr inbounds %union.tree_node, %union.tree_node* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3114
  %33 = load %union.tree_node*, %union.tree_node** %type128, align 8, !dbg !3114
  %call129 = tail call %union.tree_node* @remap_type(%union.tree_node* %33, %struct.copy_body_data* %0) #7, !dbg !3115
  call void @llvm.dbg.value(metadata %union.tree_node* %call129, metadata !3006, metadata !DIExpression()), !dbg !3116
  %34 = bitcast %union.tree_node** %tp to %struct.tree_common**, !dbg !3117
  %35 = load %struct.tree_common*, %struct.tree_common** %34, align 8, !dbg !3117
  %type131 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %35, i64 0, i32 2, !dbg !3117
  %36 = load %union.tree_node*, %union.tree_node** %type131, align 8, !dbg !3117
  %cmp132 = icmp eq %union.tree_node* %call129, %36, !dbg !3119
  br i1 %cmp132, label %if.then134, label %if.else135, !dbg !3120

if.then134:                                       ; preds = %if.then126
  store i32 0, i32* %walk_subtrees, align 4, !dbg !3121
  br label %if.end513, !dbg !3122

if.else135:                                       ; preds = %if.then126
  %37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %35, i64 0, i32 0, i32 0, !dbg !3120
  %bf.load137 = load i64, i64* %37, align 8, !dbg !3123
  %bf.cast13928 = and i64 %bf.load137, 65535, !dbg !3125
  %cmp140 = icmp eq i64 %bf.cast13928, 23, !dbg !3125
  br i1 %cmp140, label %if.then142, label %if.else147, !dbg !3126

if.then142:                                       ; preds = %if.else135
  %int_cst143 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %35, i64 1, i32 0, i32 0, !dbg !3127
  %38 = load i64, i64* %int_cst143, align 8, !dbg !3127
  %high = getelementptr inbounds %struct.tree_common, %struct.tree_common* %35, i64 1, i32 1, !dbg !3128
  %39 = bitcast %union.tree_node** %high to i64*, !dbg !3128
  %40 = load i64, i64* %39, align 8, !dbg !3128
  %call146 = tail call %union.tree_node* @build_int_cst_wide(%union.tree_node* %call129, i64 %38, i64 %40) #6, !dbg !3129
  store %union.tree_node* %call146, %union.tree_node** %tp, align 8, !dbg !3130
  br label %if.end513, !dbg !3131

if.else147:                                       ; preds = %if.else135
  %.cast29 = bitcast %struct.tree_common* %35 to %union.tree_node*, !dbg !3132
  %call148 = tail call %union.tree_node* @copy_node_stat(%union.tree_node* %.cast29) #6, !dbg !3133
  store %union.tree_node* %call148, %union.tree_node** %tp, align 8, !dbg !3135
  %type150 = getelementptr inbounds %union.tree_node, %union.tree_node* %call148, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3136
  store %union.tree_node* %call129, %union.tree_node** %type150, align 8, !dbg !3137
  br label %if.end513

if.else153:                                       ; preds = %if.else117
  %41 = getelementptr inbounds %union.tree_node, %union.tree_node* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3138
  %bf.load155 = load i64, i64* %41, align 8, !dbg !3138
  %bf.cast15715 = and i64 %bf.load155, 65535, !dbg !3139
  %cmp158 = icmp eq i64 %bf.cast15715, 53, !dbg !3139
  br i1 %cmp158, label %land.lhs.true160, label %if.else271, !dbg !3140

land.lhs.true160:                                 ; preds = %if.else153
  %42 = bitcast %union.tree_node** %tp to %struct.tree_exp**, !dbg !3141
  %arrayidx163 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %29, i64 0, i32 3, i64 0, !dbg !3141
  %43 = load %union.tree_node*, %union.tree_node** %arrayidx163, align 8, !dbg !3141
  %arrayidx166 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %29, i64 0, i32 3, i64 1, !dbg !3142
  %44 = load %union.tree_node*, %union.tree_node** %arrayidx166, align 8, !dbg !3142
  %cmp167 = icmp eq %union.tree_node* %43, %44, !dbg !3143
  br i1 %cmp167, label %land.lhs.true169, label %if.else271, !dbg !3144

land.lhs.true169:                                 ; preds = %land.lhs.true160
  %arrayidx172 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %28, i64 0, i32 3, i64 0, !dbg !3145
  %45 = load %union.tree_node*, %union.tree_node** %arrayidx172, align 8, !dbg !3145
  %call173 = tail call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %45, %union.tree_node* %1) #6, !dbg !3146
  %tobool175 = icmp eq i8 %call173, 0, !dbg !3147
  br i1 %tobool175, label %land.lhs.true169.if.else271_crit_edge, label %if.then176, !dbg !3148

land.lhs.true169.if.else271_crit_edge:            ; preds = %land.lhs.true169
  %.pre38 = load i64*, i64** %2, align 8, !dbg !3149
  %bf.load273.pre = load i64, i64* %.pre38, align 8, !dbg !3149
  %46 = bitcast i64* %.pre38 to %struct.tree_exp*, !dbg !3148
  br label %if.else271, !dbg !3148

if.then176:                                       ; preds = %land.lhs.true169
  %47 = load %struct.tree_exp*, %struct.tree_exp** %42, align 8, !dbg !3150
  %arrayidx179 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %47, i64 0, i32 3, i64 0, !dbg !3150
  %48 = bitcast %union.tree_node** %arrayidx179 to i8**, !dbg !3150
  %49 = load i8*, i8** %48, align 8, !dbg !3150
  %decl_map180 = getelementptr inbounds i8, i8* %data, i64 48, !dbg !3151
  %50 = bitcast i8* %decl_map180 to %struct.pointer_map_t**, !dbg !3151
  %51 = load %struct.pointer_map_t*, %struct.pointer_map_t** %50, align 8, !dbg !3151
  %call181 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %51, i8* %49) #6, !dbg !3152
  call void @llvm.dbg.value(metadata i8** %call181, metadata !3019, metadata !DIExpression()), !dbg !3153
  %tobool182 = icmp eq i8** %call181, null, !dbg !3154
  br i1 %tobool182, label %cleanup266, label %if.then183, !dbg !3156

if.then183:                                       ; preds = %if.then176
  %52 = bitcast i8** %call181 to %union.tree_node**, !dbg !3157
  call void @llvm.dbg.value(metadata %union.tree_node** %52, metadata !3019, metadata !DIExpression()), !dbg !3153
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3158
  %value.0.pre = load %union.tree_node*, %union.tree_node** %52, align 8, !dbg !3158
  br label %while.cond184, !dbg !3160

while.cond184:                                    ; preds = %while.body222, %if.then183
  %value.0 = phi %union.tree_node* [ %value.0.pre, %if.then183 ], [ %57, %while.body222 ], !dbg !3158
  call void @llvm.dbg.value(metadata %union.tree_node* %value.0, metadata !3018, metadata !DIExpression()), !dbg !3153
  %54 = getelementptr inbounds %union.tree_node, %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3160
  %bf.load186 = load i64, i64* %54, align 8, !dbg !3160
  %bf.cast18823 = and i64 %bf.load186, 65535, !dbg !3160
  %cmp189 = icmp eq i64 %bf.cast18823, 116, !dbg !3160
  br i1 %cmp189, label %land.lhs.true205, label %lor.lhs.false191, !dbg !3160

lor.lhs.false191:                                 ; preds = %while.cond184
  %55 = or i64 %bf.cast18823, 4, !dbg !3160
  %56 = icmp eq i64 %55, 117, !dbg !3160
  br i1 %56, label %land.lhs.true205, label %while.end226, !dbg !3160

land.lhs.true205:                                 ; preds = %lor.lhs.false191, %while.cond184
  %operands207 = getelementptr inbounds %union.tree_node, %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3160
  %57 = load %union.tree_node*, %union.tree_node** %operands207, align 8, !dbg !3160
  %cmp209 = icmp eq %union.tree_node* %57, %53, !dbg !3160
  br i1 %cmp209, label %while.end226, label %land.rhs211, !dbg !3160

land.rhs211:                                      ; preds = %land.lhs.true205
  %type213 = getelementptr inbounds %union.tree_node, %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3160
  %58 = load %union.tree_node*, %union.tree_node** %type213, align 8, !dbg !3160
  %type218 = getelementptr inbounds %union.tree_node, %union.tree_node* %57, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3160
  %59 = load %union.tree_node*, %union.tree_node** %type218, align 8, !dbg !3160
  %cmp219 = icmp eq %union.tree_node* %58, %59, !dbg !3160
  br i1 %cmp219, label %while.body222, label %while.end226, !dbg !3160

while.body222:                                    ; preds = %land.rhs211
  br label %while.cond184, !dbg !3160, !llvm.loop !3161

while.end226:                                     ; preds = %lor.lhs.false191, %land.lhs.true205, %land.rhs211
  %bf.load186.lcssa = phi i64 [ %bf.load186, %lor.lhs.false191 ], [ %bf.load186, %land.lhs.true205 ], [ %bf.load186, %land.rhs211 ], !dbg !3160
  %bf.cast23026 = and i64 %bf.load186.lcssa, 131072, !dbg !3162
  %tobool231 = icmp eq i64 %bf.cast23026, 0, !dbg !3162
  br i1 %tobool231, label %lor.lhs.false232, label %if.then239, !dbg !3164

lor.lhs.false232:                                 ; preds = %while.end226
  %bf.cast23727 = and i64 %bf.load186.lcssa, 1048576, !dbg !3165
  %tobool238 = icmp eq i64 %bf.cast23727, 0, !dbg !3165
  br i1 %tobool238, label %cleanup266, label %if.then239, !dbg !3166

if.then239:                                       ; preds = %lor.lhs.false232, %while.end226
  %60 = load i64*, i64** %2, align 8, !dbg !3167
  %bf.load241 = load i64, i64* %60, align 8, !dbg !3167
  %bf.cast243 = and i64 %bf.load241, 65535, !dbg !3167
  %arrayidx245 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast243, !dbg !3167
  %61 = load i32, i32* %arrayidx245, align 4, !dbg !3167
  %cmp246 = icmp ugt i32 %61, 3, !dbg !3167
  br i1 %cmp246, label %land.lhs.true248, label %cond.end260, !dbg !3167

land.lhs.true248:                                 ; preds = %if.then239
  %cmp255 = icmp ult i32 %61, 11, !dbg !3167
  br i1 %cmp255, label %cond.true257, label %cond.end260, !dbg !3167

cond.true257:                                     ; preds = %land.lhs.true248
  %locus = getelementptr inbounds i64, i64* %60, i64 3, !dbg !3167
  %62 = bitcast i64* %locus to i32*, !dbg !3167
  %63 = load i32, i32* %62, align 8, !dbg !3167
  br label %cond.end260, !dbg !3167

cond.end260:                                      ; preds = %if.then239, %land.lhs.true248, %cond.true257
  %cond261 = phi i32 [ %63, %cond.true257 ], [ 0, %land.lhs.true248 ], [ 0, %if.then239 ], !dbg !3167
  %call262 = tail call %union.tree_node* @build_empty_stmt(i32 %cond261) #6, !dbg !3169
  store %union.tree_node* %call262, %union.tree_node** %tp, align 8, !dbg !3170
  %call263 = tail call %union.tree_node* @copy_tree_body_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #7, !dbg !3171
  br label %cleanup266, !dbg !3172

cleanup266:                                       ; preds = %lor.lhs.false232, %if.then176, %cond.end260
  %cleanup.dest.slot.1 = phi i1 [ false, %cond.end260 ], [ true, %lor.lhs.false232 ], [ true, %if.then176 ]
  %retval.1 = phi %union.tree_node* [ %call263, %cond.end260 ], [ undef, %lor.lhs.false232 ], [ undef, %if.then176 ]
  br i1 %cleanup.dest.slot.1, label %if.end371, label %cleanup514

if.else271:                                       ; preds = %land.lhs.true169.if.else271_crit_edge, %land.lhs.true160, %if.else153
  %64 = phi %struct.tree_exp* [ %46, %land.lhs.true169.if.else271_crit_edge ], [ %27, %land.lhs.true160 ], [ %27, %if.else153 ]
  %bf.load273 = phi i64 [ %bf.load273.pre, %land.lhs.true169.if.else271_crit_edge ], [ %bf.load119, %land.lhs.true160 ], [ %bf.load119, %if.else153 ], !dbg !3149
  %bf.cast27516 = and i64 %bf.load273, 65535, !dbg !3173
  %cmp276 = icmp eq i64 %bf.cast27516, 47, !dbg !3173
  br i1 %cmp276, label %if.then278, label %if.end371, !dbg !3174

if.then278:                                       ; preds = %if.else271
  %arrayidx282 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %64, i64 0, i32 3, i64 0, !dbg !3175
  %65 = bitcast %union.tree_node** %arrayidx282 to i8**, !dbg !3175
  %66 = load i8*, i8** %65, align 8, !dbg !3175
  %decl_map284 = getelementptr inbounds i8, i8* %data, i64 48, !dbg !3176
  %67 = bitcast i8* %decl_map284 to %struct.pointer_map_t**, !dbg !3176
  %68 = load %struct.pointer_map_t*, %struct.pointer_map_t** %67, align 8, !dbg !3176
  %call285 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %68, i8* %66) #6, !dbg !3177
  call void @llvm.dbg.value(metadata i8** %call285, metadata !3023, metadata !DIExpression()), !dbg !3178
  %tobool286 = icmp eq i8** %call285, null, !dbg !3179
  br i1 %tobool286, label %cleanup366, label %if.then287, !dbg !3180

if.then287:                                       ; preds = %if.then278
  %69 = bitcast i8** %call285 to %struct.tree_common**, !dbg !3181
  %70 = load %struct.tree_common*, %struct.tree_common** %69, align 8, !dbg !3181
  %type290 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %70, i64 0, i32 2, !dbg !3181
  %71 = bitcast %union.tree_node** %type290 to %struct.tree_common**, !dbg !3181
  %72 = load %struct.tree_common*, %struct.tree_common** %71, align 8, !dbg !3181
  %type292 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %72, i64 0, i32 2, !dbg !3181
  %73 = load %union.tree_node*, %union.tree_node** %type292, align 8, !dbg !3181
  call void @llvm.dbg.value(metadata %union.tree_node* %73, metadata !3028, metadata !DIExpression()), !dbg !3182
  %74 = getelementptr inbounds i8, i8* %data, i64 103, !dbg !3183
  %75 = load i8, i8* %74, align 1, !dbg !3183
  %tobool293 = icmp eq i8 %75, 0, !dbg !3185
  %76 = bitcast %struct.tree_common* %70 to %union.tree_node*, !dbg !3186
  br i1 %tobool293, label %if.else295, label %if.end297, !dbg !3187

if.else295:                                       ; preds = %if.then287
  %call296 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %76) #6, !dbg !3188
  call void @llvm.dbg.value(metadata %union.tree_node* %call296, metadata !3024, metadata !DIExpression()), !dbg !3182
  br label %if.end297

if.end297:                                        ; preds = %if.then287, %if.else295
  %new_tree.0 = phi %union.tree_node* [ %call296, %if.else295 ], [ %76, %if.then287 ], !dbg !3186
  call void @llvm.dbg.value(metadata %union.tree_node* %new_tree.0, metadata !3024, metadata !DIExpression()), !dbg !3182
  %77 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !3189
  call void @llvm.dbg.value(metadata %union.tree_node* %77, metadata !3027, metadata !DIExpression()), !dbg !3182
  %call298 = tail call %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node* %new_tree.0) #6, !dbg !3190
  store %union.tree_node* %call298, %union.tree_node** %tp, align 8, !dbg !3191
  %tobool299 = icmp eq %union.tree_node* %call298, null, !dbg !3192
  br i1 %tobool299, label %if.then300, label %if.end361, !dbg !3194

if.then300:                                       ; preds = %if.end297
  %78 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_tree.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3195
  %bf.load302 = load i64, i64* %78, align 8, !dbg !3195
  %bf.cast30422 = and i64 %bf.load302, 65535, !dbg !3198
  %cmp305 = icmp eq i64 %bf.cast30422, 121, !dbg !3198
  br i1 %cmp305, label %if.then307, label %if.else338, !dbg !3199

if.then307:                                       ; preds = %if.then300
  %79 = load i32, i32* getelementptr inbounds ([0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 121), align 4, !dbg !3200
  %cmp314 = icmp ugt i32 %79, 3, !dbg !3200
  br i1 %cmp314, label %land.lhs.true316, label %cond.end329, !dbg !3200

land.lhs.true316:                                 ; preds = %if.then307
  %cmp323 = icmp ult i32 %79, 11, !dbg !3200
  br i1 %cmp323, label %cond.true325, label %cond.end329, !dbg !3200

cond.true325:                                     ; preds = %land.lhs.true316
  %80 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_tree.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3200
  %81 = load i32, i32* %80, align 8, !dbg !3200
  br label %cond.end329, !dbg !3200

cond.end329:                                      ; preds = %if.then307, %land.lhs.true316, %cond.true325
  %cond330 = phi i32 [ %81, %cond.true325 ], [ 0, %land.lhs.true316 ], [ 0, %if.then307 ], !dbg !3200
  %call331 = tail call %union.tree_node* @fold_indirect_ref_1(i32 %cond330, %union.tree_node* %73, %union.tree_node* %new_tree.0) #6, !dbg !3202
  store %union.tree_node* %call331, %union.tree_node** %tp, align 8, !dbg !3203
  %tobool332 = icmp eq %union.tree_node* %call331, null, !dbg !3204
  br i1 %tobool332, label %if.then333, label %if.end361, !dbg !3206

if.then333:                                       ; preds = %cond.end329
  %operands335 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_tree.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3207
  %82 = bitcast %union.tree_node** %operands335 to i64*, !dbg !3207
  %83 = load i64, i64* %82, align 8, !dbg !3207
  %84 = bitcast %union.tree_node** %tp to i64*, !dbg !3208
  store i64 %83, i64* %84, align 8, !dbg !3208
  br label %if.end361, !dbg !3209

if.else338:                                       ; preds = %if.then300
  %call339 = tail call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %73, %union.tree_node* %new_tree.0) #6, !dbg !3210
  store %union.tree_node* %call339, %union.tree_node** %tp, align 8, !dbg !3212
  %85 = getelementptr inbounds %union.tree_node, %union.tree_node* %77, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3213
  %bf.load341 = load i64, i64* %85, align 8, !dbg !3213
  %bf.cast344 = and i64 %bf.load341, 524288, !dbg !3213
  %.cast35 = getelementptr inbounds %union.tree_node, %union.tree_node* %call339, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3214
  %bf.load346 = load i64, i64* %.cast35, align 8, !dbg !3215
  %bf.clear347 = and i64 %bf.load346, -524289, !dbg !3215
  %bf.set = or i64 %bf.clear347, %bf.cast344, !dbg !3215
  store i64 %bf.set, i64* %.cast35, align 8, !dbg !3215
  %bf.load349 = load i64, i64* %85, align 8, !dbg !3216
  %bf.cast352 = and i64 %bf.load349, 65536, !dbg !3216
  %86 = load i64*, i64** %2, align 8, !dbg !3217
  %bf.load354 = load i64, i64* %86, align 8, !dbg !3218
  %bf.clear357 = and i64 %bf.load354, -65537, !dbg !3218
  %bf.set358 = or i64 %bf.clear357, %bf.cast352, !dbg !3218
  store i64 %bf.set358, i64* %86, align 8, !dbg !3218
  br label %if.end361

if.end361:                                        ; preds = %cond.end329, %if.end297, %if.else338, %if.then333
  store i32 0, i32* %walk_subtrees, align 4, !dbg !3219
  br label %cleanup366

cleanup366:                                       ; preds = %if.then278, %if.end361
  %cleanup.dest.slot.2 = phi i1 [ false, %if.end361 ], [ true, %if.then278 ]
  br i1 %cleanup.dest.slot.2, label %if.end371, label %cleanup514

if.end371:                                        ; preds = %if.else271, %cleanup366, %cleanup266
  %call372 = tail call %union.tree_node* @copy_tree_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* null) #7, !dbg !3220
  %87 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3221
  %call373 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %87) #7, !dbg !3223
  %tobool375 = icmp eq i8 %call373, 0, !dbg !3223
  br i1 %tobool375, label %if.end390, label %land.lhs.true376, !dbg !3224

land.lhs.true376:                                 ; preds = %if.end371
  %88 = load i64*, i64** %2, align 8, !dbg !3225
  %bf.load378 = load i64, i64* %88, align 8, !dbg !3225
  %bf.cast38021 = and i64 %bf.load378, 65535, !dbg !3226
  %cmp381 = icmp eq i64 %bf.cast38021, 32, !dbg !3226
  %89 = bitcast i64* %88 to %union.tree_node*, !dbg !3227
  br i1 %cmp381, label %land.lhs.true383, label %if.end390, !dbg !3227

land.lhs.true383:                                 ; preds = %land.lhs.true376
  %remapping_type_depth = getelementptr inbounds i8, i8* %data, i64 104, !dbg !3228
  %90 = bitcast i8* %remapping_type_depth to i32*, !dbg !3228
  %91 = load i32, i32* %90, align 8, !dbg !3228
  %92 = load i32, i32* @processing_debug_stmt, align 4, !dbg !3229
  %93 = or i32 %91, %92, !dbg !3230
  %94 = icmp eq i32 %93, 0, !dbg !3230
  br i1 %94, label %if.then388, label %if.end390, !dbg !3230

if.then388:                                       ; preds = %land.lhs.true383
  %call389 = tail call zeroext i8 @add_referenced_var(%union.tree_node* %89) #6, !dbg !3231
  br label %if.end390, !dbg !3231

if.end390:                                        ; preds = %land.lhs.true383, %if.end371, %if.then388, %land.lhs.true376
  %95 = load i64*, i64** %2, align 8, !dbg !3232
  %bf.load392 = load i64, i64* %95, align 8, !dbg !3232
  %bf.cast394 = and i64 %bf.load392, 65535, !dbg !3232
  %arrayidx396 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast394, !dbg !3232
  %96 = load i32, i32* %arrayidx396, align 4, !dbg !3232
  %cmp397 = icmp ugt i32 %96, 3, !dbg !3232
  %97 = bitcast i64* %95 to %union.tree_node*, !dbg !3232
  %98 = bitcast i64* %95 to %struct.tree_common*, !dbg !3232
  %99 = bitcast i64* %95 to %struct.tree_exp*, !dbg !3232
  br i1 %cmp397, label %land.lhs.true399, label %if.end430, !dbg !3232

land.lhs.true399:                                 ; preds = %if.end390
  %cmp406 = icmp ult i32 %96, 11, !dbg !3232
  br i1 %cmp406, label %if.then408, label %if.end430, !dbg !3233

if.then408:                                       ; preds = %land.lhs.true399
  %remapping_type_depth409 = getelementptr inbounds i8, i8* %data, i64 104, !dbg !3234
  %100 = bitcast i8* %remapping_type_depth409 to i32*, !dbg !3234
  %101 = load i32, i32* %100, align 8, !dbg !3234
  %cmp410 = icmp eq i32 %101, 0, !dbg !3235
  br i1 %cmp410, label %cond.true412, label %cond.end414, !dbg !3236

cond.true412:                                     ; preds = %if.then408
  %block = getelementptr inbounds i8, i8* %data, i64 64, !dbg !3237
  %102 = bitcast i8* %block to %union.tree_node**, !dbg !3237
  %103 = load %union.tree_node*, %union.tree_node** %102, align 8, !dbg !3237
  br label %cond.end414, !dbg !3236

cond.end414:                                      ; preds = %if.then408, %cond.true412
  %cond415 = phi %union.tree_node* [ %103, %cond.true412 ], [ null, %if.then408 ], !dbg !3236
  call void @llvm.dbg.value(metadata %union.tree_node* %cond415, metadata !2998, metadata !DIExpression()), !dbg !3038
  %call416 = tail call %union.tree_node** @tree_block(%union.tree_node* %97) #6, !dbg !3238
  %104 = load %union.tree_node*, %union.tree_node** %call416, align 8, !dbg !3238
  %tobool417 = icmp eq %union.tree_node* %104, null, !dbg !3238
  br i1 %tobool417, label %if.end428, label %if.then418, !dbg !3239

if.then418:                                       ; preds = %cond.end414
  %decl_map420 = getelementptr inbounds i8, i8* %data, i64 48, !dbg !3240
  %105 = bitcast i8* %decl_map420 to %struct.pointer_map_t**, !dbg !3240
  %106 = load %struct.pointer_map_t*, %struct.pointer_map_t** %105, align 8, !dbg !3240
  %107 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !3241
  %call421 = tail call %union.tree_node** @tree_block(%union.tree_node* %107) #6, !dbg !3241
  %108 = bitcast %union.tree_node** %call421 to i8**, !dbg !3241
  %109 = load i8*, i8** %108, align 8, !dbg !3241
  %call422 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %106, i8* %109) #6, !dbg !3242
  %110 = bitcast i8** %call422 to %union.tree_node**, !dbg !3243
  call void @llvm.dbg.value(metadata %union.tree_node** %110, metadata !3029, metadata !DIExpression()), !dbg !3244
  %tobool423 = icmp eq i8** %call422, null, !dbg !3245
  br i1 %tobool423, label %cond.true424, label %cond.end426, !dbg !3245

cond.true424:                                     ; preds = %if.then418
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !3245
  br label %cond.end426, !dbg !3245

cond.end426:                                      ; preds = %if.then418, %cond.true424
  %111 = load %union.tree_node*, %union.tree_node** %110, align 8, !dbg !3246
  call void @llvm.dbg.value(metadata %union.tree_node* %111, metadata !2998, metadata !DIExpression()), !dbg !3038
  br label %if.end428, !dbg !3247

if.end428:                                        ; preds = %cond.end414, %cond.end426
  %new_block.0 = phi %union.tree_node* [ %111, %cond.end426 ], [ %cond415, %cond.end414 ], !dbg !3248
  call void @llvm.dbg.value(metadata %union.tree_node* %new_block.0, metadata !2998, metadata !DIExpression()), !dbg !3038
  %112 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !3249
  %call429 = tail call %union.tree_node** @tree_block(%union.tree_node* %112) #6, !dbg !3249
  store %union.tree_node* %new_block.0, %union.tree_node** %call429, align 8, !dbg !3250
  %.pre40 = load i64*, i64** %2, align 8, !dbg !3251
  %bf.load432.pre = load i64, i64* %.pre40, align 8, !dbg !3251
  %113 = bitcast i64* %.pre40 to %struct.tree_common*, !dbg !3253
  %114 = bitcast i64* %.pre40 to %struct.tree_exp*, !dbg !3253
  %115 = bitcast i64* %.pre40 to %union.tree_node*, !dbg !3253
  %.pre45 = and i64 %bf.load432.pre, 65535, !dbg !3254
  br label %if.end430, !dbg !3253

if.end430:                                        ; preds = %if.end428, %land.lhs.true399, %if.end390
  %bf.cast43417.pre-phi = phi i64 [ %.pre45, %if.end428 ], [ %bf.cast394, %land.lhs.true399 ], [ %bf.cast394, %if.end390 ], !dbg !3254
  %116 = phi %union.tree_node* [ %115, %if.end428 ], [ %97, %land.lhs.true399 ], [ %97, %if.end390 ]
  %117 = phi %struct.tree_exp* [ %114, %if.end428 ], [ %99, %land.lhs.true399 ], [ %99, %if.end390 ]
  %118 = phi %struct.tree_exp* [ %114, %if.end428 ], [ %99, %land.lhs.true399 ], [ %99, %if.end390 ]
  %119 = phi %struct.tree_common* [ %113, %if.end428 ], [ %98, %land.lhs.true399 ], [ %98, %if.end390 ]
  %bf.load432 = phi i64 [ %bf.load432.pre, %if.end428 ], [ %bf.load392, %land.lhs.true399 ], [ %bf.load392, %if.end390 ], !dbg !3251
  %cmp435 = icmp eq i64 %bf.cast43417.pre-phi, 163, !dbg !3254
  br i1 %cmp435, label %if.end443, label %if.then437, !dbg !3255

if.then437:                                       ; preds = %if.end430
  %120 = bitcast %union.tree_node** %tp to %struct.tree_common**, !dbg !3256
  %type439 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %119, i64 0, i32 2, !dbg !3256
  %121 = load %union.tree_node*, %union.tree_node** %type439, align 8, !dbg !3256
  %call440 = tail call %union.tree_node* @remap_type(%union.tree_node* %121, %struct.copy_body_data* %0) #7, !dbg !3257
  %122 = load %struct.tree_common*, %struct.tree_common** %120, align 8, !dbg !3258
  %type442 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %122, i64 0, i32 2, !dbg !3258
  store %union.tree_node* %call440, %union.tree_node** %type442, align 8, !dbg !3259
  %.pre42 = load i64*, i64** %2, align 8, !dbg !3260
  %bf.load445.pre = load i64, i64* %.pre42, align 8, !dbg !3260
  %123 = bitcast i64* %.pre42 to %struct.tree_exp*, !dbg !3258
  %124 = bitcast i64* %.pre42 to %union.tree_node*, !dbg !3258
  br label %if.end443, !dbg !3258

if.end443:                                        ; preds = %if.end430, %if.then437
  %125 = phi %union.tree_node* [ %116, %if.end430 ], [ %124, %if.then437 ]
  %126 = phi %struct.tree_exp* [ %117, %if.end430 ], [ %123, %if.then437 ]
  %127 = phi %struct.tree_exp* [ %118, %if.end430 ], [ %123, %if.then437 ]
  %bf.load467 = phi i64 [ %bf.load432, %if.end430 ], [ %bf.load445.pre, %if.then437 ], !dbg !3260
  %bf.cast44718 = and i64 %bf.load467, 65535, !dbg !3261
  %cmp448 = icmp eq i64 %bf.cast44718, 55, !dbg !3261
  br i1 %cmp448, label %land.lhs.true450, label %if.else465, !dbg !3262

land.lhs.true450:                                 ; preds = %if.end443
  %arrayidx453 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %127, i64 0, i32 3, i64 3, !dbg !3263
  %128 = load %union.tree_node*, %union.tree_node** %arrayidx453, align 8, !dbg !3263
  %tobool454 = icmp eq %union.tree_node* %128, null, !dbg !3263
  br i1 %tobool454, label %if.else465, label %if.then455, !dbg !3264

if.then455:                                       ; preds = %land.lhs.true450
  %129 = bitcast %union.tree_node** %tp to %struct.tree_exp**, !dbg !3263
  %arrayidx458 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %126, i64 0, i32 3, i64 3, !dbg !3265
  %130 = bitcast %union.tree_node** %arrayidx458 to i64*, !dbg !3265
  %131 = load i64, i64* %130, align 8, !dbg !3265
  %arrayidx461 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %126, i64 0, i32 3, i64 1, !dbg !3267
  %132 = bitcast %union.tree_node** %arrayidx461 to i64*, !dbg !3268
  store i64 %131, i64* %132, align 8, !dbg !3268
  %133 = load %struct.tree_exp*, %struct.tree_exp** %129, align 8, !dbg !3269
  %arrayidx464 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %133, i64 0, i32 3, i64 3, !dbg !3269
  store %union.tree_node* null, %union.tree_node** %arrayidx464, align 8, !dbg !3270
  br label %if.end513, !dbg !3271

if.else465:                                       ; preds = %land.lhs.true450, %if.end443
  %cmp470 = icmp eq i64 %bf.cast44718, 121, !dbg !3272
  br i1 %cmp470, label %if.then472, label %if.end513, !dbg !3273

if.then472:                                       ; preds = %if.else465
  %call473 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %125) #6, !dbg !3274
  call void @llvm.dbg.value(metadata i8 %call473, metadata !3034, metadata !DIExpression()), !dbg !3275
  %134 = bitcast %union.tree_node** %tp to %struct.tree_exp**, !dbg !3276
  %135 = load %struct.tree_exp*, %struct.tree_exp** %134, align 8, !dbg !3276
  %arrayidx477 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %135, i64 0, i32 3, i64 0, !dbg !3276
  %call478 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %arrayidx477, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %data, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !3276
  %136 = load %struct.tree_exp*, %struct.tree_exp** %134, align 8, !dbg !3277
  %arrayidx481 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %136, i64 0, i32 3, i64 0, !dbg !3277
  %137 = bitcast %union.tree_node** %arrayidx481 to i64**, !dbg !3277
  %138 = load i64*, i64** %137, align 8, !dbg !3277
  %bf.load483 = load i64, i64* %138, align 8, !dbg !3277
  %bf.cast48520 = and i64 %bf.load483, 65535, !dbg !3279
  %cmp486 = icmp eq i64 %bf.cast48520, 47, !dbg !3279
  br i1 %cmp486, label %if.then488, label %if.else495, !dbg !3280

if.then488:                                       ; preds = %if.then472
  %arrayidx494 = getelementptr inbounds i64, i64* %138, i64 5, !dbg !3281
  %139 = load i64, i64* %arrayidx494, align 8, !dbg !3281
  %140 = bitcast %union.tree_node** %tp to i64*, !dbg !3282
  store i64 %139, i64* %140, align 8, !dbg !3282
  br label %if.end496, !dbg !3283

if.else495:                                       ; preds = %if.then472
  %141 = bitcast %struct.tree_exp* %136 to %union.tree_node*, !dbg !3284
  tail call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %141) #6, !dbg !3285
  br label %if.end496

if.end496:                                        ; preds = %if.else495, %if.then488
  %tobool497 = icmp eq i8 %call473, 0, !dbg !3286
  br i1 %tobool497, label %if.end502, label %land.lhs.true498, !dbg !3288

land.lhs.true498:                                 ; preds = %if.end496
  %142 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !3289
  %call499 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %142) #6, !dbg !3290
  %tobool500 = icmp eq i8 %call499, 0, !dbg !3290
  br i1 %tobool500, label %if.then501, label %if.end502, !dbg !3291

if.then501:                                       ; preds = %land.lhs.true498
  %143 = getelementptr inbounds i8, i8* %data, i64 102, !dbg !3292
  store i8 1, i8* %143, align 2, !dbg !3293
  br label %if.end502, !dbg !3294

if.end502:                                        ; preds = %land.lhs.true498, %if.end496, %if.then501
  store i32 0, i32* %walk_subtrees, align 4, !dbg !3295
  br label %if.end513, !dbg !3296

if.end513:                                        ; preds = %if.then67, %if.then97, %if.then115, %if.then455, %if.end502, %if.else465, %if.then134, %if.else147, %if.then142, %if.then106, %if.then82, %while.end, %cleanup
  br label %cleanup514, !dbg !3297

cleanup514:                                       ; preds = %cleanup, %cleanup266, %cleanup366, %if.end513, %if.then17
  %retval.3 = phi %union.tree_node* [ inttoptr (i64 1 to %union.tree_node*), %cleanup ], [ null, %if.end513 ], [ null, %if.then17 ], [ %retval.1, %cleanup266 ], [ null, %cleanup366 ]
  ret %union.tree_node* %retval.3, !dbg !3298
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %fun) unnamed_addr #0 !dbg !3299 {
entry:
  call void @llvm.dbg.value(metadata %struct.function* %fun, metadata !3306, metadata !DIExpression()), !dbg !3307
  %tobool = icmp eq %struct.function* %fun, null, !dbg !3308
  br i1 %tobool, label %land.end, label %land.lhs.true, !dbg !3309

land.lhs.true:                                    ; preds = %entry
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %fun, i64 0, i32 3, !dbg !3310
  %0 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !3310
  %tobool1 = icmp eq %struct.gimple_df* %0, null, !dbg !3311
  br i1 %tobool1, label %land.end, label %land.rhs, !dbg !3312

land.rhs:                                         ; preds = %land.lhs.true
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %0, i64 0, i32 10, !dbg !3313
  %bf.load = load i8, i8* %in_ssa_p, align 8, !dbg !3313
  %bf.clear = and i8 %bf.load, 1, !dbg !3313
  br label %land.end

land.end:                                         ; preds = %land.lhs.true, %entry, %land.rhs
  %1 = phi i8 [ 0, %land.lhs.true ], [ 0, %entry ], [ %bf.clear, %land.rhs ]
  ret i8 %1, !dbg !3314
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.var_ann_d* @get_var_ann(%union.tree_node* %var) unnamed_addr #0 !dbg !3315 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !3320, metadata !DIExpression()), !dbg !3323
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3324
  %bf.load = load i64, i64* %0, align 8, !dbg !3324
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3324
  %cmp = icmp eq i64 %bf.cast1, 32, !dbg !3324
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !3324

cond.true:                                        ; preds = %entry
  %ann = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 1, !dbg !3324
  %1 = bitcast %union.tree_node** %ann to %struct.var_ann_d**, !dbg !3324
  br label %cond.end19, !dbg !3324

cond.false:                                       ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 34, !dbg !3324
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !3324

cond.true6:                                       ; preds = %cond.false
  %ann7 = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !3324
  %2 = bitcast %union.tree_node** %ann7 to %struct.var_ann_d**, !dbg !3324
  br label %cond.end19, !dbg !3324

cond.false8:                                      ; preds = %cond.false
  %cmp13 = icmp eq i64 %bf.cast1, 36, !dbg !3324
  %ann15 = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !3324
  %3 = bitcast %union.tree_node** %ann15 to %struct.var_ann_d**, !dbg !3324
  %cond = select i1 %cmp13, %struct.var_ann_d** %3, %struct.var_ann_d** null, !dbg !3324
  br label %cond.end19, !dbg !3324

cond.end19:                                       ; preds = %cond.true6, %cond.false8, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %1, %cond.true ], [ %2, %cond.true6 ], [ %cond, %cond.false8 ], !dbg !3324
  call void @llvm.dbg.value(metadata %struct.var_ann_d** %cond20, metadata !3321, metadata !DIExpression()), !dbg !3323
  %tobool = icmp eq %struct.var_ann_d** %cond20, null, !dbg !3325
  br i1 %tobool, label %cond.true21, label %cond.end23, !dbg !3325

cond.true21:                                      ; preds = %cond.end19
  tail call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !3325
  br label %cond.end23, !dbg !3325

cond.end23:                                       ; preds = %cond.end19, %cond.true21
  %4 = load %struct.var_ann_d*, %struct.var_ann_d** %cond20, align 8, !dbg !3326
  %tobool25 = icmp eq %struct.var_ann_d* %4, null, !dbg !3326
  br i1 %tobool25, label %cond.false27, label %cond.true26, !dbg !3326

cond.true26:                                      ; preds = %cond.end23
  br label %cond.end28, !dbg !3326

cond.false27:                                     ; preds = %cond.end23
  %call = tail call %struct.var_ann_d* @create_var_ann(%union.tree_node* %var) #6, !dbg !3327
  br label %cond.end28, !dbg !3326

cond.end28:                                       ; preds = %cond.false27, %cond.true26
  %cond29 = phi %struct.var_ann_d* [ %4, %cond.true26 ], [ %call, %cond.false27 ], !dbg !3326
  ret %struct.var_ann_d* %cond29, !dbg !3328
}

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @variably_modified_type_p(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @remap_type_1(%union.tree_node* %type, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !3329 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !3331, metadata !DIExpression()), !dbg !3339
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !3332, metadata !DIExpression()), !dbg !3339
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3340
  %bf.load = load i64, i64* %0, align 8, !dbg !3340
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3342
  %cmp = icmp eq i64 %bf.cast1, 10, !dbg !3342
  br i1 %cmp, label %if.then, label %if.else, !dbg !3343

if.then:                                          ; preds = %entry
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3344
  %1 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !3344
  %call = tail call %union.tree_node* @remap_type(%union.tree_node* %1, %struct.copy_body_data* %id) #7, !dbg !3346
  %bf.load3 = load i64, i64* %0, align 8, !dbg !3347
  %bf.cast512 = and i64 %bf.load3, 65535, !dbg !3347
  %cmp6 = icmp eq i64 %bf.cast512, 14, !dbg !3347
  br i1 %cmp6, label %cond.true, label %cond.false, !dbg !3347

cond.true:                                        ; preds = %if.then
  %call7 = tail call i32 @vector_type_mode(%union.tree_node* %type) #6, !dbg !3347
  %bf.load12.pre = load i64, i64* %0, align 8, !dbg !3348
  br label %cond.end, !dbg !3347

cond.false:                                       ; preds = %if.then
  %type8 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !3347
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i64 0, i32 6, !dbg !3347
  %bf.load9 = load i32, i32* %mode, align 4, !dbg !3347
  %bf.lshr = lshr i32 %bf.load9, 16, !dbg !3347
  %bf.clear10 = and i32 %bf.lshr, 255, !dbg !3347
  br label %cond.end, !dbg !3347

cond.end:                                         ; preds = %cond.false, %cond.true
  %bf.load12 = phi i64 [ %bf.load12.pre, %cond.true ], [ %bf.load3, %cond.false ], !dbg !3348
  %cond = phi i32 [ %call7, %cond.true ], [ %bf.clear10, %cond.false ], !dbg !3347
  %bf.lshr13 = lshr i64 %bf.load12, 26, !dbg !3348
  %2 = trunc i64 %bf.lshr13 to i8, !dbg !3348
  %bf.cast15 = and i8 %2, 1, !dbg !3348
  %call16 = tail call %union.tree_node* @build_pointer_type_for_mode(%union.tree_node* %call, i32 %cond, i8 zeroext %bf.cast15) #6, !dbg !3349
  call void @llvm.dbg.value(metadata %union.tree_node* %call16, metadata !3333, metadata !DIExpression()), !dbg !3339
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3350
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !3350
  %tobool = icmp eq %union.tree_node* %4, null, !dbg !3350
  br i1 %tobool, label %lor.lhs.false, label %cond.end.if.then41_crit_edge, !dbg !3352

cond.end.if.then41_crit_edge:                     ; preds = %cond.end
  %bf.load45.pre = load i64, i64* %0, align 8, !dbg !3353
  %type57.phi.trans.insert = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !3354
  %restrict_flag58.phi.trans.insert = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type57.phi.trans.insert, i64 0, i32 6, !dbg !3354
  %bf.load59.pre = load i32, i32* %restrict_flag58.phi.trans.insert, align 4, !dbg !3353
  %.pre = lshr i64 %bf.load45.pre, 20, !dbg !3353
  %.pre27 = trunc i64 %.pre to i32, !dbg !3353
  %.pre28 = and i32 %.pre27, 1, !dbg !3353
  %.pre29 = lshr i64 %bf.load45.pre, 18, !dbg !3353
  %.pre31 = trunc i64 %.pre29 to i32, !dbg !3353
  %.pre33 = and i32 %.pre31, 2, !dbg !3353
  %.pre34 = or i32 %.pre28, %.pre33, !dbg !3353
  %.pre35 = lshr i32 %bf.load59.pre, 11, !dbg !3353
  %.pre37 = and i32 %.pre35, 4, !dbg !3353
  %.pre38 = or i32 %.pre34, %.pre37, !dbg !3353
  %.pre39 = lshr i64 %bf.load45.pre, 48, !dbg !3353
  %.pre41 = trunc i64 %.pre39 to i32, !dbg !3353
  %.pre43 = and i32 %.pre41, 65280, !dbg !3353
  %.pre44 = or i32 %.pre38, %.pre43, !dbg !3353
  br label %if.then41, !dbg !3352

lor.lhs.false:                                    ; preds = %cond.end
  %bf.load19 = load i64, i64* %0, align 8, !dbg !3355
  %bf.lshr20 = lshr i64 %bf.load19, 20, !dbg !3355
  %5 = trunc i64 %bf.lshr20 to i32, !dbg !3355
  %bf.cast22 = and i32 %5, 1, !dbg !3355
  %6 = lshr i64 %bf.load19, 18, !dbg !3355
  %7 = trunc i64 %6 to i32, !dbg !3355
  %mul28 = and i32 %7, 2, !dbg !3355
  %or = or i32 %bf.cast22, %mul28, !dbg !3355
  %type29 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !3355
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type29, i64 0, i32 6, !dbg !3355
  %bf.load30 = load i32, i32* %restrict_flag, align 4, !dbg !3355
  %8 = lshr i32 %bf.load30, 11, !dbg !3355
  %mul33 = and i32 %8, 4, !dbg !3355
  %or34 = or i32 %or, %mul33, !dbg !3355
  %9 = lshr i64 %bf.load19, 48, !dbg !3355
  %10 = trunc i64 %9 to i32, !dbg !3355
  %shl = and i32 %10, 65280, !dbg !3355
  %or39 = or i32 %or34, %shl, !dbg !3355
  %tobool40 = icmp eq i32 %or39, 0, !dbg !3355
  br i1 %tobool40, label %if.end, label %if.then41, !dbg !3356

if.then41:                                        ; preds = %cond.end.if.then41_crit_edge, %lor.lhs.false
  %or70.pre-phi = phi i32 [ %.pre44, %cond.end.if.then41_crit_edge ], [ %or39, %lor.lhs.false ], !dbg !3353
  %call71 = tail call %union.tree_node* @build_type_attribute_qual_variant(%union.tree_node* %call16, %union.tree_node* %4, i32 %or70.pre-phi) #6, !dbg !3357
  call void @llvm.dbg.value(metadata %union.tree_node* %call71, metadata !3333, metadata !DIExpression()), !dbg !3339
  br label %if.end, !dbg !3358

if.end:                                           ; preds = %lor.lhs.false, %if.then41
  %new_tree.0 = phi %union.tree_node* [ %call71, %if.then41 ], [ %call16, %lor.lhs.false ], !dbg !3359
  call void @llvm.dbg.value(metadata %union.tree_node* %new_tree.0, metadata !3333, metadata !DIExpression()), !dbg !3339
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %type, %union.tree_node* %new_tree.0) #7, !dbg !3360
  br label %cleanup, !dbg !3361

if.else:                                          ; preds = %entry
  %cmp76 = icmp eq i64 %bf.cast1, 12, !dbg !3362
  br i1 %cmp76, label %if.then78, label %if.else169, !dbg !3364

if.then78:                                        ; preds = %if.else
  %type80 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3365
  %11 = load %union.tree_node*, %union.tree_node** %type80, align 8, !dbg !3365
  %call81 = tail call %union.tree_node* @remap_type(%union.tree_node* %11, %struct.copy_body_data* %id) #7, !dbg !3367
  %bf.load83 = load i64, i64* %0, align 8, !dbg !3368
  %bf.cast855 = and i64 %bf.load83, 65535, !dbg !3368
  %cmp86 = icmp eq i64 %bf.cast855, 14, !dbg !3368
  br i1 %cmp86, label %cond.true88, label %cond.false90, !dbg !3368

cond.true88:                                      ; preds = %if.then78
  %call89 = tail call i32 @vector_type_mode(%union.tree_node* %type) #6, !dbg !3368
  %bf.load99.pre = load i64, i64* %0, align 8, !dbg !3369
  br label %cond.end96, !dbg !3368

cond.false90:                                     ; preds = %if.then78
  %type91 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !3368
  %mode92 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i64 0, i32 6, !dbg !3368
  %bf.load93 = load i32, i32* %mode92, align 4, !dbg !3368
  %bf.lshr94 = lshr i32 %bf.load93, 16, !dbg !3368
  %bf.clear95 = and i32 %bf.lshr94, 255, !dbg !3368
  br label %cond.end96, !dbg !3368

cond.end96:                                       ; preds = %cond.false90, %cond.true88
  %bf.load99 = phi i64 [ %bf.load99.pre, %cond.true88 ], [ %bf.load83, %cond.false90 ], !dbg !3369
  %cond97 = phi i32 [ %call89, %cond.true88 ], [ %bf.clear95, %cond.false90 ], !dbg !3368
  %bf.lshr100 = lshr i64 %bf.load99, 26, !dbg !3369
  %12 = trunc i64 %bf.lshr100 to i8, !dbg !3369
  %bf.cast102 = and i8 %12, 1, !dbg !3369
  %call104 = tail call %union.tree_node* @build_reference_type_for_mode(%union.tree_node* %call81, i32 %cond97, i8 zeroext %bf.cast102) #6, !dbg !3370
  call void @llvm.dbg.value(metadata %union.tree_node* %call104, metadata !3333, metadata !DIExpression()), !dbg !3339
  %13 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3371
  %14 = load %union.tree_node*, %union.tree_node** %13, align 8, !dbg !3371
  %tobool107 = icmp eq %union.tree_node* %14, null, !dbg !3371
  br i1 %tobool107, label %lor.lhs.false108, label %cond.end96.if.then137_crit_edge, !dbg !3373

cond.end96.if.then137_crit_edge:                  ; preds = %cond.end96
  %bf.load141.pre = load i64, i64* %0, align 8, !dbg !3374
  %type153.phi.trans.insert = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !3375
  %restrict_flag154.phi.trans.insert = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type153.phi.trans.insert, i64 0, i32 6, !dbg !3375
  %bf.load155.pre = load i32, i32* %restrict_flag154.phi.trans.insert, align 4, !dbg !3374
  %.pre45 = lshr i64 %bf.load141.pre, 20, !dbg !3374
  %.pre46 = trunc i64 %.pre45 to i32, !dbg !3374
  %.pre48 = and i32 %.pre46, 1, !dbg !3374
  %.pre49 = lshr i64 %bf.load141.pre, 18, !dbg !3374
  %.pre51 = trunc i64 %.pre49 to i32, !dbg !3374
  %.pre53 = and i32 %.pre51, 2, !dbg !3374
  %.pre54 = or i32 %.pre48, %.pre53, !dbg !3374
  %.pre55 = lshr i32 %bf.load155.pre, 11, !dbg !3374
  %.pre57 = and i32 %.pre55, 4, !dbg !3374
  %.pre58 = or i32 %.pre54, %.pre57, !dbg !3374
  %.pre59 = lshr i64 %bf.load141.pre, 48, !dbg !3374
  %.pre61 = trunc i64 %.pre59 to i32, !dbg !3374
  %.pre63 = and i32 %.pre61, 65280, !dbg !3374
  %.pre64 = or i32 %.pre58, %.pre63, !dbg !3374
  br label %if.then137, !dbg !3373

lor.lhs.false108:                                 ; preds = %cond.end96
  %bf.load110 = load i64, i64* %0, align 8, !dbg !3376
  %bf.lshr111 = lshr i64 %bf.load110, 20, !dbg !3376
  %15 = trunc i64 %bf.lshr111 to i32, !dbg !3376
  %bf.cast113 = and i32 %15, 1, !dbg !3376
  %16 = lshr i64 %bf.load110, 18, !dbg !3376
  %17 = trunc i64 %16 to i32, !dbg !3376
  %mul120 = and i32 %17, 2, !dbg !3376
  %or121 = or i32 %bf.cast113, %mul120, !dbg !3376
  %type122 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !3376
  %restrict_flag123 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type122, i64 0, i32 6, !dbg !3376
  %bf.load124 = load i32, i32* %restrict_flag123, align 4, !dbg !3376
  %18 = lshr i32 %bf.load124, 11, !dbg !3376
  %mul127 = and i32 %18, 4, !dbg !3376
  %or128 = or i32 %or121, %mul127, !dbg !3376
  %19 = lshr i64 %bf.load110, 48, !dbg !3376
  %20 = trunc i64 %19 to i32, !dbg !3376
  %shl134 = and i32 %20, 65280, !dbg !3376
  %or135 = or i32 %or128, %shl134, !dbg !3376
  %tobool136 = icmp eq i32 %or135, 0, !dbg !3376
  br i1 %tobool136, label %if.end168, label %if.then137, !dbg !3377

if.then137:                                       ; preds = %cond.end96.if.then137_crit_edge, %lor.lhs.false108
  %or166.pre-phi = phi i32 [ %.pre64, %cond.end96.if.then137_crit_edge ], [ %or135, %lor.lhs.false108 ], !dbg !3374
  %call167 = tail call %union.tree_node* @build_type_attribute_qual_variant(%union.tree_node* %call104, %union.tree_node* %14, i32 %or166.pre-phi) #6, !dbg !3378
  call void @llvm.dbg.value(metadata %union.tree_node* %call167, metadata !3333, metadata !DIExpression()), !dbg !3339
  br label %if.end168, !dbg !3379

if.end168:                                        ; preds = %lor.lhs.false108, %if.then137
  %new_tree.1 = phi %union.tree_node* [ %call167, %if.then137 ], [ %call104, %lor.lhs.false108 ], !dbg !3380
  call void @llvm.dbg.value(metadata %union.tree_node* %new_tree.1, metadata !3333, metadata !DIExpression()), !dbg !3339
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %type, %union.tree_node* %new_tree.1) #7, !dbg !3381
  br label %cleanup, !dbg !3382

if.else169:                                       ; preds = %if.else
  %call170 = tail call %union.tree_node* @copy_node_stat(%union.tree_node* %type) #6, !dbg !3383
  call void @llvm.dbg.value(metadata %union.tree_node* %call170, metadata !3333, metadata !DIExpression()), !dbg !3339
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %type, %union.tree_node* %call170) #7, !dbg !3384
  %21 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !3385
  %22 = load %union.tree_node*, %union.tree_node** %21, align 8, !dbg !3385
  call void @llvm.dbg.value(metadata %union.tree_node* %22, metadata !3334, metadata !DIExpression()), !dbg !3339
  %cmp174 = icmp eq %union.tree_node* %22, %type, !dbg !3386
  br i1 %cmp174, label %if.else185, label %if.then176, !dbg !3388

if.then176:                                       ; preds = %if.else169
  %call177 = tail call %union.tree_node* @remap_type(%union.tree_node* %22, %struct.copy_body_data* %id) #7, !dbg !3389
  call void @llvm.dbg.value(metadata %union.tree_node* %call177, metadata !3334, metadata !DIExpression()), !dbg !3339
  %23 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !3391
  store %union.tree_node* %call177, %union.tree_node** %23, align 8, !dbg !3392
  %24 = getelementptr inbounds %union.tree_node, %union.tree_node* %call177, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !3393
  %25 = bitcast %union.tree_node** %24 to i64*, !dbg !3393
  %26 = load i64, i64* %25, align 8, !dbg !3393
  %27 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !3394
  %28 = bitcast %union.tree_node** %27 to i64*, !dbg !3395
  store i64 %26, i64* %28, align 8, !dbg !3395
  store %union.tree_node* %call170, %union.tree_node** %24, align 8, !dbg !3396
  br label %if.end190, !dbg !3397

if.else185:                                       ; preds = %if.else169
  %29 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !3398
  store %union.tree_node* %call170, %union.tree_node** %29, align 8, !dbg !3400
  %30 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !3401
  store %union.tree_node* null, %union.tree_node** %30, align 8, !dbg !3402
  br label %if.end190

if.end190:                                        ; preds = %if.else185, %if.then176
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3403
  %31 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3403
  %tobool192 = icmp eq %union.tree_node* %31, null, !dbg !3403
  br i1 %tobool192, label %if.end199, label %if.then193, !dbg !3405

if.then193:                                       ; preds = %if.end190
  %call196 = tail call %union.tree_node* @remap_decl(%union.tree_node* nonnull %31, %struct.copy_body_data* %id) #7, !dbg !3406
  %chain198 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3407
  store %union.tree_node* %call196, %union.tree_node** %chain198, align 8, !dbg !3408
  br label %if.end199, !dbg !3407

if.end199:                                        ; preds = %if.end190, %if.then193
  %32 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3409
  store %union.tree_node* null, %union.tree_node** %32, align 8, !dbg !3410
  %33 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, !dbg !3411
  store %union.tree_node* null, %union.tree_node** %33, align 8, !dbg !3412
  %34 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3413
  %bf.load203 = load i64, i64* %34, align 8, !dbg !3413
  %35 = trunc i64 %bf.load203 to i16, !dbg !3413
  switch i16 %35, label %sw.default [
    i16 8, label %sw.bb
    i16 9, label %sw.bb
    i16 11, label %sw.bb
    i16 6, label %sw.bb
    i16 7, label %sw.bb
    i16 20, label %sw.bb233
    i16 15, label %sw.bb241
    i16 16, label %sw.bb252
    i16 17, label %sw.bb252
    i16 18, label %sw.bb252
  ], !dbg !3414

sw.bb:                                            ; preds = %if.end199, %if.end199, %if.end199, %if.end199, %if.end199
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !3415
  %36 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !3415
  %37 = load %union.tree_node*, %union.tree_node** %36, align 8, !dbg !3415
  call void @llvm.dbg.value(metadata %union.tree_node* %37, metadata !3334, metadata !DIExpression()), !dbg !3339
  %tobool207 = icmp eq %union.tree_node* %37, null, !dbg !3416
  br i1 %tobool207, label %if.end218, label %land.lhs.true, !dbg !3418

land.lhs.true:                                    ; preds = %sw.bb
  %38 = getelementptr inbounds %union.tree_node, %union.tree_node* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3419
  %bf.load209 = load i64, i64* %38, align 8, !dbg !3419
  %bf.cast2114 = and i64 %bf.load209, 65535, !dbg !3420
  %cmp212 = icmp eq i64 %bf.cast2114, 23, !dbg !3420
  br i1 %cmp212, label %if.end218, label %if.then214, !dbg !3421

if.then214:                                       ; preds = %land.lhs.true
  %39 = bitcast %struct.copy_body_data* %id to i8*, !dbg !3422
  %call217 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %36, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %39, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !3422
  br label %if.end218, !dbg !3422

if.end218:                                        ; preds = %land.lhs.true, %sw.bb, %if.then214
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3423
  %40 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !3423
  %41 = load %union.tree_node*, %union.tree_node** %40, align 8, !dbg !3423
  call void @llvm.dbg.value(metadata %union.tree_node* %41, metadata !3334, metadata !DIExpression()), !dbg !3339
  %tobool220 = icmp eq %union.tree_node* %41, null, !dbg !3424
  br i1 %tobool220, label %cleanup, label %land.lhs.true221, !dbg !3426

land.lhs.true221:                                 ; preds = %if.end218
  %42 = getelementptr inbounds %union.tree_node, %union.tree_node* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3427
  %bf.load223 = load i64, i64* %42, align 8, !dbg !3427
  %bf.cast2253 = and i64 %bf.load223, 65535, !dbg !3428
  %cmp226 = icmp eq i64 %bf.cast2253, 23, !dbg !3428
  br i1 %cmp226, label %cleanup, label %if.then228, !dbg !3429

if.then228:                                       ; preds = %land.lhs.true221
  %43 = bitcast %struct.copy_body_data* %id to i8*, !dbg !3430
  %call231 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %40, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %43, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !3430
  br label %cleanup, !dbg !3430

sw.bb233:                                         ; preds = %if.end199
  %type235 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3431
  %44 = load %union.tree_node*, %union.tree_node** %type235, align 8, !dbg !3431
  %call236 = tail call %union.tree_node* @remap_type(%union.tree_node* %44, %struct.copy_body_data* %id) #7, !dbg !3432
  store %union.tree_node* %call236, %union.tree_node** %type235, align 8, !dbg !3433
  %values = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3434
  %45 = bitcast i32* %values to %union.tree_node**, !dbg !3434
  %46 = bitcast %struct.copy_body_data* %id to i8*, !dbg !3434
  %call240 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %45, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %46, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !3434
  br label %cleanup, !dbg !3435

sw.bb241:                                         ; preds = %if.end199
  %type243 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3436
  %47 = load %union.tree_node*, %union.tree_node** %type243, align 8, !dbg !3436
  %call244 = tail call %union.tree_node* @remap_type(%union.tree_node* %47, %struct.copy_body_data* %id) #7, !dbg !3437
  store %union.tree_node* %call244, %union.tree_node** %type243, align 8, !dbg !3438
  %values248 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3439
  %48 = bitcast i32* %values248 to %union.tree_node**, !dbg !3439
  %49 = load %union.tree_node*, %union.tree_node** %48, align 8, !dbg !3439
  %call249 = tail call %union.tree_node* @remap_type(%union.tree_node* %49, %struct.copy_body_data* %id) #7, !dbg !3440
  store %union.tree_node* %call249, %union.tree_node** %48, align 8, !dbg !3441
  br label %sw.epilog, !dbg !3442

sw.bb252:                                         ; preds = %if.end199, %if.end199, %if.end199
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !3338, metadata !DIExpression()), !dbg !3443
  %values254 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3444
  %50 = bitcast i32* %values254 to %union.tree_node**, !dbg !3444
  br label %for.cond, !dbg !3446

for.cond:                                         ; preds = %for.body, %sw.bb252
  %f.0.in = phi %union.tree_node** [ %50, %sw.bb252 ], [ %chain260, %for.body ]
  %nf.0 = phi %union.tree_node* [ null, %sw.bb252 ], [ %call256, %for.body ], !dbg !3443
  %f.0 = load %union.tree_node*, %union.tree_node** %f.0.in, align 8, !dbg !3447
  call void @llvm.dbg.value(metadata %union.tree_node* %nf.0, metadata !3338, metadata !DIExpression()), !dbg !3443
  call void @llvm.dbg.value(metadata %union.tree_node* %f.0, metadata !3335, metadata !DIExpression()), !dbg !3443
  %tobool255 = icmp eq %union.tree_node* %f.0, null, !dbg !3448
  br i1 %tobool255, label %for.end, label %for.body, !dbg !3448

for.body:                                         ; preds = %for.cond
  %call256 = tail call %union.tree_node* @remap_decl(%union.tree_node* nonnull %f.0, %struct.copy_body_data* %id) #7, !dbg !3449
  call void @llvm.dbg.value(metadata %union.tree_node* %call256, metadata !3334, metadata !DIExpression()), !dbg !3339
  %context = getelementptr inbounds %union.tree_node, %union.tree_node* %call256, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3452
  store %union.tree_node* %call170, %union.tree_node** %context, align 8, !dbg !3453
  %chain258 = getelementptr inbounds %union.tree_node, %union.tree_node* %call256, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3454
  store %union.tree_node* %nf.0, %union.tree_node** %chain258, align 8, !dbg !3455
  call void @llvm.dbg.value(metadata %union.tree_node* %call256, metadata !3338, metadata !DIExpression()), !dbg !3443
  %chain260 = getelementptr inbounds %union.tree_node, %union.tree_node* %f.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3456
  br label %for.cond, !dbg !3457, !llvm.loop !3458

for.end:                                          ; preds = %for.cond
  %nf.0.lcssa = phi %union.tree_node* [ %nf.0, %for.cond ], !dbg !3443
  call void @llvm.dbg.value(metadata %union.tree_node* %nf.0.lcssa, metadata !3338, metadata !DIExpression()), !dbg !3443
  call void @llvm.dbg.value(metadata %union.tree_node* %nf.0.lcssa, metadata !3338, metadata !DIExpression()), !dbg !3443
  call void @llvm.dbg.value(metadata %union.tree_node* %nf.0.lcssa, metadata !3338, metadata !DIExpression()), !dbg !3443
  %call261 = tail call %union.tree_node* @nreverse(%union.tree_node* %nf.0.lcssa) #6, !dbg !3460
  store %union.tree_node* %call261, %union.tree_node** %50, align 8, !dbg !3461
  br label %sw.epilog, !dbg !3462

sw.default:                                       ; preds = %if.end199
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 432, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !3463
  br label %sw.epilog, !dbg !3464

sw.epilog:                                        ; preds = %sw.default, %for.end, %sw.bb241
  %51 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3465
  %52 = bitcast %struct.copy_body_data* %id to i8*, !dbg !3465
  %call266 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %51, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %52, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !3465
  %53 = getelementptr inbounds %union.tree_node, %union.tree_node* %call170, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3466
  %call268 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %53, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %52, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !3466
  br label %cleanup, !dbg !3467

cleanup:                                          ; preds = %land.lhs.true221, %if.end218, %if.then228, %sw.epilog, %sw.bb233, %if.end168, %if.end
  %retval.0 = phi %union.tree_node* [ %new_tree.0, %if.end ], [ %new_tree.1, %if.end168 ], [ %call170, %sw.epilog ], [ %call170, %sw.bb233 ], [ %call170, %if.then228 ], [ %call170, %land.lhs.true221 ], [ %call170, %if.end218 ], !dbg !3339
  ret %union.tree_node* %retval.0, !dbg !3468
}

; Function Attrs: nounwind uwtable
define dso_local %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %body, %struct.copy_body_data* %id) local_unnamed_addr #5 !dbg !3469 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %new_body = alloca %struct.gimple_seq_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3473, metadata !DIExpression()), !dbg !3481
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !3474, metadata !DIExpression()), !dbg !3481
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !3482
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !3482
  %1 = bitcast %struct.gimple_seq_d** %new_body to i8*, !dbg !3483
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3483
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* null, metadata !3476, metadata !DIExpression()), !dbg !3481
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %new_body, align 8, !dbg !3484
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3485
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #8, !dbg !3485
  call fastcc void @gsi_start(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.gimple_seq_d* %body) #7, !dbg !3485
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %2, i64 24, i1 false), !dbg !3485
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #8, !dbg !3485
  br label %for.cond, !dbg !3486

for.cond:                                         ; preds = %for.body, %entry
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3475, metadata !DIExpression(DW_OP_deref)), !dbg !3481
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !3487
  %tobool = icmp eq i8 %call, 0, !dbg !3488
  br i1 %tobool, label %for.body, label %for.end, !dbg !3489

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3475, metadata !DIExpression(DW_OP_deref)), !dbg !3481
  %call1 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !3490
  %call2 = call fastcc %union.gimple_statement_d* @remap_gimple_stmt(%union.gimple_statement_d* %call1, %struct.copy_body_data* %id) #7, !dbg !3491
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call2, metadata !3477, metadata !DIExpression()), !dbg !3492
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d** %new_body, metadata !3476, metadata !DIExpression(DW_OP_deref)), !dbg !3481
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** nonnull %new_body, %union.gimple_statement_d* %call2) #6, !dbg !3493
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3475, metadata !DIExpression(DW_OP_deref)), !dbg !3481
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !3494
  br label %for.cond, !dbg !3495, !llvm.loop !3496

for.end:                                          ; preds = %for.cond
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_body, align 8, !dbg !3498
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %3, metadata !3476, metadata !DIExpression()), !dbg !3481
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3499
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !3499
  ret %struct.gimple_seq_d* %3, !dbg !3500
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) unnamed_addr #0 !dbg !3501 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq, metadata !3505, metadata !DIExpression()), !dbg !3507
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3506, metadata !DIExpression()), !dbg !3508
  %call = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %seq) #7, !dbg !3509
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !3510
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3511
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !3512
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq1, align 8, !dbg !3513
  %tobool = icmp eq %struct.gimple_seq_node_d* %call, null, !dbg !3514
  br i1 %tobool, label %cond.end, label %land.lhs.true, !dbg !3515

land.lhs.true:                                    ; preds = %entry
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %call, i64 0, i32 0, !dbg !3516
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3516
  %tobool4 = icmp eq %union.gimple_statement_d* %0, null, !dbg !3517
  br i1 %tobool4, label %cond.end, label %cond.true, !dbg !3518

cond.true:                                        ; preds = %land.lhs.true
  %call7 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* nonnull %0) #7, !dbg !3519
  br label %cond.end, !dbg !3518

cond.end:                                         ; preds = %land.lhs.true, %entry, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %land.lhs.true ], [ null, %entry ], !dbg !3518
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !3520
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !3521
  ret void, !dbg !3522
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !3523 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3527, metadata !DIExpression()), !dbg !3528
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3529
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3529
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3530
  %conv1 = zext i1 %cmp to i8, !dbg !3531
  ret i8 %conv1, !dbg !3532
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @remap_gimple_stmt(%union.gimple_statement_d* %stmt, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !3533 {
entry:
  %wi = alloca %struct.walk_stmt_info, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3537, metadata !DIExpression()), !dbg !3571
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !3538, metadata !DIExpression()), !dbg !3571
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !3539, metadata !DIExpression()), !dbg !3571
  %0 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !3572
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %0) #8, !dbg !3572
  call void @llvm.dbg.value(metadata i8 0, metadata !3542, metadata !DIExpression()), !dbg !3571
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !3573
  %cmp = icmp eq i32 %call, 9, !dbg !3574
  br i1 %cmp, label %land.lhs.true, label %if.else10, !dbg !3575

land.lhs.true:                                    ; preds = %entry
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 14, !dbg !3576
  %1 = load i8, i8* %transform_return_to_modify, align 1, !dbg !3576
  %tobool = icmp eq i8 %1, 0, !dbg !3577
  br i1 %tobool, label %if.else10, label %if.then, !dbg !3578

if.then:                                          ; preds = %land.lhs.true
  %call2 = tail call fastcc %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %stmt) #7, !dbg !3579
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !3543, metadata !DIExpression()), !dbg !3580
  %tobool3 = icmp eq %union.tree_node* %call2, null, !dbg !3581
  br i1 %tobool3, label %if.else, label %land.lhs.true4, !dbg !3583

land.lhs.true4:                                   ; preds = %if.then
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3584
  %bf.load = load i64, i64* %2, align 8, !dbg !3584
  %bf.cast9 = and i64 %bf.load, 65535, !dbg !3585
  %cmp5 = icmp eq i64 %bf.cast9, 36, !dbg !3585
  br i1 %cmp5, label %if.else, label %if.then7, !dbg !3586

if.then7:                                         ; preds = %land.lhs.true4
  %retvar = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 5, !dbg !3587
  %3 = load %union.tree_node*, %union.tree_node** %retvar, align 8, !dbg !3587
  %call8 = tail call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %3, %union.tree_node* nonnull %call2) #6, !dbg !3587
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call8, metadata !3539, metadata !DIExpression()), !dbg !3571
  call void @llvm.dbg.value(metadata i8 1, metadata !3542, metadata !DIExpression()), !dbg !3571
  br label %cleanup, !dbg !3589

if.else:                                          ; preds = %land.lhs.true4, %if.then
  %call9 = tail call %union.gimple_statement_d* @gimple_build_nop() #6, !dbg !3590
  br label %cleanup, !dbg !3591

cleanup:                                          ; preds = %if.then7, %if.else
  %cleanup.dest.slot.0 = phi i1 [ true, %if.then7 ], [ false, %if.else ]
  %skip_first.0 = phi i8 [ 1, %if.then7 ], [ 0, %if.else ], !dbg !3571
  %copy.0 = phi %union.gimple_statement_d* [ %call8, %if.then7 ], [ null, %if.else ], !dbg !3571
  %retval.0 = phi %union.gimple_statement_d* [ undef, %if.then7 ], [ %call9, %if.else ]
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %copy.0, metadata !3539, metadata !DIExpression()), !dbg !3571
  call void @llvm.dbg.value(metadata i8 %skip_first.0, metadata !3542, metadata !DIExpression()), !dbg !3571
  br i1 %cleanup.dest.slot.0, label %if.end216, label %cleanup242

if.else10:                                        ; preds = %land.lhs.true, %entry
  %call11 = tail call fastcc zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %stmt) #7, !dbg !3592
  %tobool12 = icmp eq i8 %call11, 0, !dbg !3592
  br i1 %tobool12, label %if.else97, label %if.then13, !dbg !3593

if.then13:                                        ; preds = %if.else10
  %call14 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !3594
  switch i32 %call14, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb16
    i32 12, label %sw.bb21
    i32 17, label %sw.bb26
    i32 34, label %sw.bb33
    i32 26, label %sw.bb37
    i32 27, label %sw.bb44
    i32 23, label %sw.bb54
    i32 24, label %sw.bb70
    i32 25, label %sw.bb74
    i32 29, label %sw.bb78
    i32 30, label %sw.bb82
    i32 32, label %sw.bb87
    i32 22, label %sw.bb92
  ], !dbg !3595

sw.bb:                                            ; preds = %if.then13
  %call15 = tail call fastcc %union.gimple_statement_d* @copy_gimple_bind(%union.gimple_statement_d* %stmt, %struct.copy_body_data* %id) #7, !dbg !3596
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call15, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3597

sw.bb16:                                          ; preds = %if.then13
  %call17 = tail call fastcc %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %stmt) #7, !dbg !3598
  %call18 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call17, %struct.copy_body_data* %id) #7, !dbg !3599
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call18, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call19 = tail call fastcc %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %stmt) #7, !dbg !3601
  %call20 = tail call %union.gimple_statement_d* @gimple_build_catch(%union.tree_node* %call19, %struct.gimple_seq_d* %call18) #6, !dbg !3602
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call20, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3603

sw.bb21:                                          ; preds = %if.then13
  %call22 = tail call fastcc %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %stmt) #7, !dbg !3604
  %call23 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call22, %struct.copy_body_data* %id) #7, !dbg !3605
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call23, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call24 = tail call fastcc %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %stmt) #7, !dbg !3606
  %call25 = tail call %union.gimple_statement_d* @gimple_build_eh_filter(%union.tree_node* %call24, %struct.gimple_seq_d* %call23) #6, !dbg !3607
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call25, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3608

sw.bb26:                                          ; preds = %if.then13
  %call27 = tail call fastcc %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %stmt) #7, !dbg !3609
  %call28 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call27, %struct.copy_body_data* %id) #7, !dbg !3610
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call28, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call29 = tail call fastcc %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %stmt) #7, !dbg !3611
  %call30 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call29, %struct.copy_body_data* %id) #7, !dbg !3612
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call30, metadata !3549, metadata !DIExpression()), !dbg !3600
  %call31 = tail call fastcc i32 @gimple_try_kind(%union.gimple_statement_d* %stmt) #7, !dbg !3613
  %call32 = tail call %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d* %call28, %struct.gimple_seq_d* %call30, i32 %call31) #6, !dbg !3614
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call32, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3615

sw.bb33:                                          ; preds = %if.then13
  %call34 = tail call fastcc %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %stmt) #7, !dbg !3616
  %call35 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call34, %struct.copy_body_data* %id) #7, !dbg !3617
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call35, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call36 = tail call %union.gimple_statement_d* @gimple_build_wce(%struct.gimple_seq_d* %call35) #6, !dbg !3618
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call36, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3619

sw.bb37:                                          ; preds = %if.then13
  %call38 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !3620
  %call39 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call38, %struct.copy_body_data* %id) #7, !dbg !3621
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call39, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call40 = tail call fastcc %union.tree_node* @gimple_omp_parallel_clauses(%union.gimple_statement_d* %stmt) #7, !dbg !3622
  %call41 = tail call fastcc %union.tree_node* @gimple_omp_parallel_child_fn(%union.gimple_statement_d* %stmt) #7, !dbg !3623
  %call42 = tail call fastcc %union.tree_node* @gimple_omp_parallel_data_arg(%union.gimple_statement_d* %stmt) #7, !dbg !3624
  %call43 = tail call %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d* %call39, %union.tree_node* %call40, %union.tree_node* %call41, %union.tree_node* %call42) #6, !dbg !3625
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call43, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3626

sw.bb44:                                          ; preds = %if.then13
  %call45 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !3627
  %call46 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call45, %struct.copy_body_data* %id) #7, !dbg !3628
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call46, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call47 = tail call fastcc %union.tree_node* @gimple_omp_task_clauses(%union.gimple_statement_d* %stmt) #7, !dbg !3629
  %call48 = tail call fastcc %union.tree_node* @gimple_omp_task_child_fn(%union.gimple_statement_d* %stmt) #7, !dbg !3630
  %call49 = tail call fastcc %union.tree_node* @gimple_omp_task_data_arg(%union.gimple_statement_d* %stmt) #7, !dbg !3631
  %call50 = tail call fastcc %union.tree_node* @gimple_omp_task_copy_fn(%union.gimple_statement_d* %stmt) #7, !dbg !3632
  %call51 = tail call fastcc %union.tree_node* @gimple_omp_task_arg_size(%union.gimple_statement_d* %stmt) #7, !dbg !3633
  %call52 = tail call fastcc %union.tree_node* @gimple_omp_task_arg_align(%union.gimple_statement_d* %stmt) #7, !dbg !3634
  %call53 = tail call %union.gimple_statement_d* @gimple_build_omp_task(%struct.gimple_seq_d* %call46, %union.tree_node* %call47, %union.tree_node* %call48, %union.tree_node* %call49, %union.tree_node* %call50, %union.tree_node* %call51, %union.tree_node* %call52) #6, !dbg !3635
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call53, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3636

sw.bb54:                                          ; preds = %if.then13
  %call55 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !3637
  %call56 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call55, %struct.copy_body_data* %id) #7, !dbg !3638
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call56, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call57 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %stmt) #7, !dbg !3639
  %call58 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call57, %struct.copy_body_data* %id) #7, !dbg !3640
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call58, metadata !3549, metadata !DIExpression()), !dbg !3600
  %call59 = tail call fastcc %union.tree_node* @gimple_omp_for_clauses(%union.gimple_statement_d* %stmt) #7, !dbg !3641
  %call60 = tail call fastcc i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %stmt) #7, !dbg !3642
  %call61 = tail call %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d* %call56, %union.tree_node* %call59, i64 %call60, %struct.gimple_seq_d* %call58) #6, !dbg !3643
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call61, metadata !3539, metadata !DIExpression()), !dbg !3571
  call void @llvm.dbg.value(metadata i64 0, metadata !3550, metadata !DIExpression()), !dbg !3644
  br label %for.cond, !dbg !3645

for.cond:                                         ; preds = %for.body, %sw.bb54
  %i.0 = phi i64 [ 0, %sw.bb54 ], [ %inc, %for.body ], !dbg !3647
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !3550, metadata !DIExpression()), !dbg !3644
  %call62 = tail call fastcc i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %stmt) #7, !dbg !3648
  %cmp63 = icmp ult i64 %i.0, %call62, !dbg !3650
  br i1 %cmp63, label %for.body, label %if.end216.loopexit, !dbg !3651

for.body:                                         ; preds = %for.cond
  %call65 = tail call fastcc %union.tree_node* @gimple_omp_for_index(%union.gimple_statement_d* %stmt, i64 %i.0) #7, !dbg !3652
  tail call fastcc void @gimple_omp_for_set_index(%union.gimple_statement_d* %call61, i64 %i.0, %union.tree_node* %call65) #7, !dbg !3654
  %call66 = tail call fastcc %union.tree_node* @gimple_omp_for_initial(%union.gimple_statement_d* %stmt, i64 %i.0) #7, !dbg !3655
  tail call fastcc void @gimple_omp_for_set_initial(%union.gimple_statement_d* %call61, i64 %i.0, %union.tree_node* %call66) #7, !dbg !3656
  %call67 = tail call fastcc %union.tree_node* @gimple_omp_for_final(%union.gimple_statement_d* %stmt, i64 %i.0) #7, !dbg !3657
  tail call fastcc void @gimple_omp_for_set_final(%union.gimple_statement_d* %call61, i64 %i.0, %union.tree_node* %call67) #7, !dbg !3658
  %call68 = tail call fastcc %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %stmt, i64 %i.0) #7, !dbg !3659
  tail call fastcc void @gimple_omp_for_set_incr(%union.gimple_statement_d* %call61, i64 %i.0, %union.tree_node* %call68) #7, !dbg !3660
  %call69 = tail call fastcc i32 @gimple_omp_for_cond(%union.gimple_statement_d* %stmt, i64 %i.0) #7, !dbg !3661
  tail call fastcc void @gimple_omp_for_set_cond(%union.gimple_statement_d* %call61, i64 %i.0, i32 %call69) #7, !dbg !3662
  %inc = add i64 %i.0, 1, !dbg !3663
  call void @llvm.dbg.value(metadata i64 %inc, metadata !3550, metadata !DIExpression()), !dbg !3644
  br label %for.cond, !dbg !3664, !llvm.loop !3665

sw.bb70:                                          ; preds = %if.then13
  %call71 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !3667
  %call72 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call71, %struct.copy_body_data* %id) #7, !dbg !3668
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call72, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call73 = tail call %union.gimple_statement_d* @gimple_build_omp_master(%struct.gimple_seq_d* %call72) #6, !dbg !3669
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call73, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3670

sw.bb74:                                          ; preds = %if.then13
  %call75 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !3671
  %call76 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call75, %struct.copy_body_data* %id) #7, !dbg !3672
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call76, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call77 = tail call %union.gimple_statement_d* @gimple_build_omp_ordered(%struct.gimple_seq_d* %call76) #6, !dbg !3673
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call77, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3674

sw.bb78:                                          ; preds = %if.then13
  %call79 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !3675
  %call80 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call79, %struct.copy_body_data* %id) #7, !dbg !3676
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call80, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call81 = tail call %union.gimple_statement_d* @gimple_build_omp_section(%struct.gimple_seq_d* %call80) #6, !dbg !3677
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call81, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3678

sw.bb82:                                          ; preds = %if.then13
  %call83 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !3679
  %call84 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call83, %struct.copy_body_data* %id) #7, !dbg !3680
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call84, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call85 = tail call fastcc %union.tree_node* @gimple_omp_sections_clauses(%union.gimple_statement_d* %stmt) #7, !dbg !3681
  %call86 = tail call %union.gimple_statement_d* @gimple_build_omp_sections(%struct.gimple_seq_d* %call84, %union.tree_node* %call85) #6, !dbg !3682
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call86, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3683

sw.bb87:                                          ; preds = %if.then13
  %call88 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !3684
  %call89 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call88, %struct.copy_body_data* %id) #7, !dbg !3685
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call89, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call90 = tail call fastcc %union.tree_node* @gimple_omp_single_clauses(%union.gimple_statement_d* %stmt) #7, !dbg !3686
  %call91 = tail call %union.gimple_statement_d* @gimple_build_omp_single(%struct.gimple_seq_d* %call89, %union.tree_node* %call90) #6, !dbg !3687
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call91, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3688

sw.bb92:                                          ; preds = %if.then13
  %call93 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !3689
  %call94 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call93, %struct.copy_body_data* %id) #7, !dbg !3690
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call94, metadata !3546, metadata !DIExpression()), !dbg !3600
  %call95 = tail call fastcc %union.tree_node* @gimple_omp_critical_name(%union.gimple_statement_d* %stmt) #7, !dbg !3691
  %call96 = tail call %union.gimple_statement_d* @gimple_build_omp_critical(%struct.gimple_seq_d* %call94, %union.tree_node* %call95) #6, !dbg !3692
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call96, metadata !3539, metadata !DIExpression()), !dbg !3571
  br label %if.end216, !dbg !3693

sw.default:                                       ; preds = %if.then13
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1326, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !3694
  br label %if.end216, !dbg !3695

if.else97:                                        ; preds = %if.else10
  %call98 = tail call zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %stmt) #6, !dbg !3696
  %tobool100 = icmp eq i8 %call98, 0, !dbg !3696
  br i1 %tobool100, label %if.end169, label %land.lhs.true101, !dbg !3697

land.lhs.true101:                                 ; preds = %if.else97
  %call102 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !3698
  %call103 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !3699
  %cmp104 = icmp eq %union.tree_node* %call102, %call103, !dbg !3700
  br i1 %cmp104, label %land.lhs.true106, label %if.end169, !dbg !3701

land.lhs.true106:                                 ; preds = %land.lhs.true101
  %call107 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !3702
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 0, !dbg !3703
  %4 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !3703
  %call108 = tail call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %call107, %union.tree_node* %4) #6, !dbg !3704
  %tobool110 = icmp eq i8 %call108, 0, !dbg !3704
  br i1 %tobool110, label %if.end169, label %if.then111, !dbg !3705

if.then111:                                       ; preds = %land.lhs.true106
  %call112 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !3706
  call void @llvm.dbg.value(metadata %union.tree_node* %call112, metadata !3553, metadata !DIExpression()), !dbg !3707
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !3708
  %5 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !3708
  %6 = bitcast %union.tree_node* %call112 to i8*, !dbg !3709
  %call113 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %5, i8* %6) #6, !dbg !3710
  call void @llvm.dbg.value(metadata i8** %call113, metadata !3558, metadata !DIExpression()), !dbg !3707
  %tobool114 = icmp eq i8** %call113, null, !dbg !3711
  br i1 %tobool114, label %cleanup164, label %if.then115, !dbg !3713

if.then115:                                       ; preds = %if.then111
  %7 = bitcast i8** %call113 to %union.tree_node**, !dbg !3714
  call void @llvm.dbg.value(metadata %union.tree_node** %7, metadata !3558, metadata !DIExpression()), !dbg !3707
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !3715
  %value.0.pre = load %union.tree_node*, %union.tree_node** %7, align 8, !dbg !3715
  br label %while.cond, !dbg !3717

while.cond:                                       ; preds = %while.body, %if.then115
  %value.0 = phi %union.tree_node* [ %value.0.pre, %if.then115 ], [ %12, %while.body ], !dbg !3715
  call void @llvm.dbg.value(metadata %union.tree_node* %value.0, metadata !3557, metadata !DIExpression()), !dbg !3707
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3717
  %bf.load117 = load i64, i64* %9, align 8, !dbg !3717
  %bf.cast1194 = and i64 %bf.load117, 65535, !dbg !3717
  %cmp120 = icmp eq i64 %bf.cast1194, 116, !dbg !3717
  br i1 %cmp120, label %land.lhs.true135, label %lor.lhs.false, !dbg !3717

lor.lhs.false:                                    ; preds = %while.cond
  %10 = or i64 %bf.cast1194, 4, !dbg !3717
  %11 = icmp eq i64 %10, 117, !dbg !3717
  br i1 %11, label %land.lhs.true135, label %while.end, !dbg !3717

land.lhs.true135:                                 ; preds = %lor.lhs.false, %while.cond
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3717
  %12 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !3717
  %cmp136 = icmp eq %union.tree_node* %12, %8, !dbg !3717
  br i1 %cmp136, label %while.end, label %land.rhs, !dbg !3717

land.rhs:                                         ; preds = %land.lhs.true135
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %value.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3717
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3717
  %type142 = getelementptr inbounds %union.tree_node, %union.tree_node* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3717
  %14 = load %union.tree_node*, %union.tree_node** %type142, align 8, !dbg !3717
  %cmp143 = icmp eq %union.tree_node* %13, %14, !dbg !3717
  br i1 %cmp143, label %while.body, label %while.end, !dbg !3717

while.body:                                       ; preds = %land.rhs
  br label %while.cond, !dbg !3717, !llvm.loop !3718

while.end:                                        ; preds = %lor.lhs.false, %land.lhs.true135, %land.rhs
  %bf.load117.lcssa = phi i64 [ %bf.load117, %lor.lhs.false ], [ %bf.load117, %land.lhs.true135 ], [ %bf.load117, %land.rhs ], !dbg !3717
  %bf.cast1517 = and i64 %bf.load117.lcssa, 131072, !dbg !3719
  %tobool152 = icmp eq i64 %bf.cast1517, 0, !dbg !3719
  br i1 %tobool152, label %lor.lhs.false153, label %if.then160, !dbg !3721

lor.lhs.false153:                                 ; preds = %while.end
  %bf.cast1588 = and i64 %bf.load117.lcssa, 1048576, !dbg !3722
  %tobool159 = icmp eq i64 %bf.cast1588, 0, !dbg !3722
  br i1 %tobool159, label %cleanup164, label %if.then160, !dbg !3723

if.then160:                                       ; preds = %lor.lhs.false153, %while.end
  %call161 = tail call %union.gimple_statement_d* @gimple_build_nop() #6, !dbg !3724
  br label %cleanup164, !dbg !3725

cleanup164:                                       ; preds = %lor.lhs.false153, %if.then111, %if.then160
  %cleanup.dest.slot.1 = phi i1 [ false, %if.then160 ], [ true, %lor.lhs.false153 ], [ true, %if.then111 ]
  %retval.1 = phi %union.gimple_statement_d* [ %call161, %if.then160 ], [ undef, %lor.lhs.false153 ], [ undef, %if.then111 ]
  br i1 %cleanup.dest.slot.1, label %if.end169, label %cleanup242

if.end169:                                        ; preds = %land.lhs.true106, %if.else97, %cleanup164, %land.lhs.true101
  %call170 = tail call fastcc zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %stmt) #7, !dbg !3726
  %tobool171 = icmp eq i8 %call170, 0, !dbg !3726
  br i1 %tobool171, label %if.end177, label %if.then172, !dbg !3728

if.then172:                                       ; preds = %if.end169
  %call173 = tail call fastcc %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %stmt) #7, !dbg !3729
  %call174 = tail call fastcc %union.tree_node* @gimple_debug_bind_get_value(%union.gimple_statement_d* %stmt) #7, !dbg !3729
  %call175 = tail call %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* %call173, %union.tree_node* %call174, %union.gimple_statement_d* %stmt) #6, !dbg !3729
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call175, metadata !3539, metadata !DIExpression()), !dbg !3571
  %debug_stmts = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 21, !dbg !3731
  %call176 = tail call fastcc %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** nonnull %debug_stmts, %union.gimple_statement_d* %call175) #7, !dbg !3731
  br label %cleanup242, !dbg !3732

if.end177:                                        ; preds = %if.end169
  %call178 = tail call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %stmt) #6, !dbg !3733
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call178, metadata !3539, metadata !DIExpression()), !dbg !3571
  %eh_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 11, !dbg !3734
  %15 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !3734
  %tobool179 = icmp eq %struct.pointer_map_t* %15, null, !dbg !3735
  br i1 %tobool179, label %if.end216, label %if.then180, !dbg !3736

if.then180:                                       ; preds = %if.end177
  %call181 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call178) #7, !dbg !3737
  switch i32 %call181, label %if.end216 [
    i32 8, label %sw.bb182
    i32 14, label %sw.bb204
    i32 15, label %sw.bb208
  ], !dbg !3738

sw.bb182:                                         ; preds = %if.then180
  %call183 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %call178) #7, !dbg !3739
  call void @llvm.dbg.value(metadata %union.tree_node* %call183, metadata !3563, metadata !DIExpression()), !dbg !3740
  %tobool184 = icmp eq %union.tree_node* %call183, null, !dbg !3741
  br i1 %tobool184, label %if.end216, label %land.lhs.true185, !dbg !3743

land.lhs.true185:                                 ; preds = %sw.bb182
  %built_in_class = getelementptr inbounds %union.tree_node, %union.tree_node* %call183, i64 0, i32 0, i32 5, !dbg !3744
  %bf.load186 = load i32, i32* %built_in_class, align 8, !dbg !3744
  %bf.clear188 = and i32 %bf.load186, 6144, !dbg !3744
  %cmp189 = icmp eq i32 %bf.clear188, 6144, !dbg !3745
  br i1 %cmp189, label %if.then191, label %if.end216, !dbg !3746

if.then191:                                       ; preds = %land.lhs.true185
  %bf.clear194 = and i32 %bf.load186, 2047, !dbg !3747
  switch i32 %bf.clear194, label %if.end216 [
    i32 554, label %sw.bb195
    i32 552, label %sw.bb198
    i32 553, label %sw.bb198
  ], !dbg !3748

sw.bb195:                                         ; preds = %if.then191
  %call196 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %call178, i32 1) #7, !dbg !3749
  call void @llvm.dbg.value(metadata %union.tree_node* %call196, metadata !3559, metadata !DIExpression()), !dbg !3740
  %call197 = tail call fastcc %union.tree_node* @remap_eh_region_tree_nr(%union.tree_node* %call196, %struct.copy_body_data* %id) #7, !dbg !3751
  call void @llvm.dbg.value(metadata %union.tree_node* %call197, metadata !3559, metadata !DIExpression()), !dbg !3740
  tail call fastcc void @gimple_call_set_arg(%union.gimple_statement_d* %call178, i32 1, %union.tree_node* %call197) #7, !dbg !3752
  br label %sw.bb198, !dbg !3752

sw.bb198:                                         ; preds = %if.then191, %if.then191, %sw.bb195
  %call199 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %call178, i32 0) #7, !dbg !3753
  call void @llvm.dbg.value(metadata %union.tree_node* %call199, metadata !3559, metadata !DIExpression()), !dbg !3740
  %call200 = tail call fastcc %union.tree_node* @remap_eh_region_tree_nr(%union.tree_node* %call199, %struct.copy_body_data* %id) #7, !dbg !3754
  call void @llvm.dbg.value(metadata %union.tree_node* %call200, metadata !3559, metadata !DIExpression()), !dbg !3740
  tail call fastcc void @gimple_call_set_arg(%union.gimple_statement_d* %call178, i32 0, %union.tree_node* %call200) #7, !dbg !3755
  br label %if.end216, !dbg !3756

sw.bb204:                                         ; preds = %if.then180
  %call206 = tail call fastcc i32 @gimple_resx_region(%union.gimple_statement_d* %call178) #7, !dbg !3757
  call void @llvm.dbg.value(metadata i32 %call206, metadata !3564, metadata !DIExpression()), !dbg !3758
  %call207 = tail call fastcc i32 @remap_eh_region_nr(i32 %call206, %struct.copy_body_data* %id) #7, !dbg !3759
  call void @llvm.dbg.value(metadata i32 %call207, metadata !3564, metadata !DIExpression()), !dbg !3758
  tail call fastcc void @gimple_resx_set_region(%union.gimple_statement_d* %call178, i32 %call207) #7, !dbg !3760
  br label %if.end216, !dbg !3761

sw.bb208:                                         ; preds = %if.then180
  %call210 = tail call fastcc i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %call178) #7, !dbg !3762
  call void @llvm.dbg.value(metadata i32 %call210, metadata !3566, metadata !DIExpression()), !dbg !3763
  %call211 = tail call fastcc i32 @remap_eh_region_nr(i32 %call210, %struct.copy_body_data* %id) #7, !dbg !3764
  call void @llvm.dbg.value(metadata i32 %call211, metadata !3566, metadata !DIExpression()), !dbg !3763
  tail call fastcc void @gimple_eh_dispatch_set_region(%union.gimple_statement_d* %call178, i32 %call211) #7, !dbg !3765
  br label %if.end216, !dbg !3766

if.end216.loopexit:                               ; preds = %for.cond
  br label %if.end216, !dbg !3767

if.end216:                                        ; preds = %if.end216.loopexit, %sw.bb182, %if.end177, %sw.default, %sw.bb92, %sw.bb87, %sw.bb82, %sw.bb78, %sw.bb74, %sw.bb70, %sw.bb44, %sw.bb37, %sw.bb33, %sw.bb26, %sw.bb21, %sw.bb16, %sw.bb, %sw.bb204, %sw.bb208, %sw.bb198, %if.then191, %land.lhs.true185, %if.then180, %cleanup
  %skip_first.1 = phi i8 [ %skip_first.0, %cleanup ], [ 0, %if.end177 ], [ 0, %if.then180 ], [ 0, %sw.bb182 ], [ 0, %land.lhs.true185 ], [ 0, %if.then191 ], [ 0, %sw.bb198 ], [ 0, %sw.bb208 ], [ 0, %sw.bb204 ], [ 0, %sw.bb ], [ 0, %sw.bb16 ], [ 0, %sw.bb21 ], [ 0, %sw.bb26 ], [ 0, %sw.bb33 ], [ 0, %sw.bb37 ], [ 0, %sw.bb44 ], [ 0, %sw.bb70 ], [ 0, %sw.bb74 ], [ 0, %sw.bb78 ], [ 0, %sw.bb82 ], [ 0, %sw.bb87 ], [ 0, %sw.bb92 ], [ 0, %sw.default ], [ 0, %if.end216.loopexit ], !dbg !3571
  %copy.3 = phi %union.gimple_statement_d* [ %copy.0, %cleanup ], [ %call178, %if.end177 ], [ %call178, %if.then180 ], [ %call178, %sw.bb182 ], [ %call178, %land.lhs.true185 ], [ %call178, %if.then191 ], [ %call178, %sw.bb198 ], [ %call178, %sw.bb208 ], [ %call178, %sw.bb204 ], [ %call15, %sw.bb ], [ %call20, %sw.bb16 ], [ %call25, %sw.bb21 ], [ %call32, %sw.bb26 ], [ %call36, %sw.bb33 ], [ %call43, %sw.bb37 ], [ %call53, %sw.bb44 ], [ %call73, %sw.bb70 ], [ %call77, %sw.bb74 ], [ %call81, %sw.bb78 ], [ %call86, %sw.bb82 ], [ %call91, %sw.bb87 ], [ %call96, %sw.bb92 ], [ null, %sw.default ], [ %call61, %if.end216.loopexit ], !dbg !3571
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %copy.3, metadata !3539, metadata !DIExpression()), !dbg !3571
  call void @llvm.dbg.value(metadata i8 %skip_first.1, metadata !3542, metadata !DIExpression()), !dbg !3571
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 8, !dbg !3767
  %16 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3767
  call void @llvm.dbg.value(metadata %union.tree_node* %16, metadata !3541, metadata !DIExpression()), !dbg !3571
  %call217 = tail call fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* %copy.3) #7, !dbg !3768
  %tobool218 = icmp eq %union.tree_node* %call217, null, !dbg !3768
  br i1 %tobool218, label %if.end225, label %if.then219, !dbg !3769

if.then219:                                       ; preds = %if.end216
  %decl_map221 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !3770
  %17 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map221, align 8, !dbg !3770
  %call222 = tail call fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* %copy.3) #7, !dbg !3771
  %18 = bitcast %union.tree_node* %call222 to i8*, !dbg !3771
  %call223 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %17, i8* %18) #6, !dbg !3772
  %19 = bitcast i8** %call223 to %union.tree_node**, !dbg !3773
  call void @llvm.dbg.value(metadata %union.tree_node** %19, metadata !3568, metadata !DIExpression()), !dbg !3774
  %tobool224 = icmp eq i8** %call223, null, !dbg !3775
  br i1 %tobool224, label %cond.true, label %cond.end, !dbg !3775

cond.true:                                        ; preds = %if.then219
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1426, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !3775
  br label %cond.end, !dbg !3775

cond.end:                                         ; preds = %if.then219, %cond.true
  %20 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !3776
  call void @llvm.dbg.value(metadata %union.tree_node* %20, metadata !3541, metadata !DIExpression()), !dbg !3571
  br label %if.end225, !dbg !3777

if.end225:                                        ; preds = %if.end216, %cond.end
  %new_block.0 = phi %union.tree_node* [ %20, %cond.end ], [ %16, %if.end216 ], !dbg !3571
  call void @llvm.dbg.value(metadata %union.tree_node* %new_block.0, metadata !3541, metadata !DIExpression()), !dbg !3571
  tail call fastcc void @gimple_set_block(%union.gimple_statement_d* %copy.3, %union.tree_node* %new_block.0) #7, !dbg !3778
  %call226 = tail call fastcc zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %copy.3) #7, !dbg !3779
  %tobool227 = icmp eq i8 %call226, 0, !dbg !3779
  br i1 %tobool227, label %if.end229, label %cleanup242, !dbg !3781

if.end229:                                        ; preds = %if.end225
  %call230 = call i8* @memset(i8* nonnull %0, i32 0, i64 56) #6, !dbg !3782
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 1, !dbg !3783
  %21 = bitcast i8** %info to %struct.copy_body_data**, !dbg !3784
  store %struct.copy_body_data* %id, %struct.copy_body_data** %21, align 8, !dbg !3784
  %tobool231 = icmp eq i8 %skip_first.1, 0, !dbg !3785
  br i1 %tobool231, label %if.else235, label %if.then232, !dbg !3787

if.then232:                                       ; preds = %if.end229
  %call233 = call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %copy.3, i32 1) #7, !dbg !3788
  %call234 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call233, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @remap_gimple_op_r, i8* nonnull %0, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !3788
  br label %if.end237, !dbg !3788

if.else235:                                       ; preds = %if.end229
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !3540, metadata !DIExpression(DW_OP_deref)), !dbg !3571
  %call236 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %copy.3, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @remap_gimple_op_r, %struct.walk_stmt_info* nonnull %wi) #6, !dbg !3789
  br label %if.end237

if.end237:                                        ; preds = %if.else235, %if.then232
  %call238 = call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %copy.3) #7, !dbg !3790
  %tobool239 = icmp eq i8 %call238, 0, !dbg !3790
  br i1 %tobool239, label %cleanup242, label %if.then240, !dbg !3792

if.then240:                                       ; preds = %if.end237
  call fastcc void @gimple_set_vdef(%union.gimple_statement_d* %copy.3, %union.tree_node* null) #7, !dbg !3793
  call fastcc void @gimple_set_vuse(%union.gimple_statement_d* %copy.3, %union.tree_node* null) #7, !dbg !3795
  br label %cleanup242, !dbg !3796

cleanup242:                                       ; preds = %if.end237, %if.end225, %if.then240, %cleanup, %cleanup164, %if.then172
  %retval.2 = phi %union.gimple_statement_d* [ %retval.0, %cleanup ], [ %retval.1, %cleanup164 ], [ %call175, %if.then172 ], [ %copy.3, %if.end225 ], [ %copy.3, %if.then240 ], [ %copy.3, %if.end237 ]
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %0) #8, !dbg !3797
  ret %union.gimple_statement_d* %retval.2, !dbg !3797
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !3798 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3802, metadata !DIExpression()), !dbg !3803
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3804
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3804
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 0, !dbg !3805
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3805
  ret %union.gimple_statement_d* %1, !dbg !3806
}

declare dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d**, %union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_next(%struct.gimple_stmt_iterator* %i) unnamed_addr #0 !dbg !3807 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !3812, metadata !DIExpression()), !dbg !3813
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3814
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3814
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 2, !dbg !3815
  %1 = bitcast %struct.gimple_seq_node_d** %next to i64*, !dbg !3815
  %2 = load i64, i64* %1, align 8, !dbg !3815
  %3 = bitcast %struct.gimple_stmt_iterator* %i to i64*, !dbg !3816
  store i64 %2, i64* %3, align 8, !dbg !3816
  ret void, !dbg !3817
}

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @remap_ssa_name(%union.tree_node* %name, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !3818 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !3820, metadata !DIExpression()), !dbg !3832
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !3821, metadata !DIExpression()), !dbg !3832
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3833
  %bf.load = load i64, i64* %0, align 8, !dbg !3833
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3833
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !3833
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !3833

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 188, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !3833
  br label %cond.end, !dbg !3833

cond.end:                                         ; preds = %entry, %cond.true
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !3834
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !3834
  %2 = bitcast %union.tree_node* %name to i8*, !dbg !3835
  %call = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %1, i8* %2) #6, !dbg !3836
  call void @llvm.dbg.value(metadata i8** %call, metadata !3823, metadata !DIExpression()), !dbg !3832
  %tobool = icmp eq i8** %call, null, !dbg !3837
  br i1 %tobool, label %if.end, label %if.then, !dbg !3839

if.then:                                          ; preds = %cond.end
  %3 = bitcast i8** %call to %union.tree_node**, !dbg !3840
  call void @llvm.dbg.value(metadata %union.tree_node** %3, metadata !3823, metadata !DIExpression()), !dbg !3832
  %4 = load %union.tree_node*, %union.tree_node** %3, align 8, !dbg !3841
  %call1 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %4) #6, !dbg !3842
  br label %cleanup, !dbg !3843

if.end:                                           ; preds = %cond.end
  %5 = load i32, i32* @processing_debug_stmt, align 4, !dbg !3844
  %tobool2 = icmp eq i32 %5, 0, !dbg !3844
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !3846

if.then3:                                         ; preds = %if.end
  store i32 -1, i32* @processing_debug_stmt, align 4, !dbg !3847
  br label %cleanup, !dbg !3849

if.end4:                                          ; preds = %if.end
  %var = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3850
  %6 = bitcast i32* %var to %union.tree_node**, !dbg !3850
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !3850
  %call5 = tail call %union.tree_node* @remap_decl(%union.tree_node* %7, %struct.copy_body_data* %id) #7, !dbg !3851
  call void @llvm.dbg.value(metadata %union.tree_node* %call5, metadata !3822, metadata !DIExpression()), !dbg !3832
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %call5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3852
  %bf.load7 = load i64, i64* %8, align 8, !dbg !3852
  %bf.cast92 = and i64 %bf.load7, 65535, !dbg !3853
  %cmp10 = icmp eq i64 %bf.cast92, 32, !dbg !3853
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false, !dbg !3854

lor.lhs.false:                                    ; preds = %if.end4
  %cmp15 = icmp eq i64 %bf.cast92, 34, !dbg !3855
  br i1 %cmp15, label %land.lhs.true, label %if.else108, !dbg !3856

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end4
  %9 = bitcast i32* %var to i64**, !dbg !3857
  %10 = load i64*, i64** %9, align 8, !dbg !3857
  %bf.load19 = load i64, i64* %10, align 8, !dbg !3857
  %bf.cast214 = and i64 %bf.load19, 65535, !dbg !3858
  %cmp22 = icmp eq i64 %bf.cast214, 36, !dbg !3858
  br i1 %cmp22, label %lor.lhs.false23, label %if.then25, !dbg !3859

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 14, !dbg !3860
  %11 = load i8, i8* %transform_return_to_modify, align 1, !dbg !3860
  %tobool24 = icmp eq i8 %11, 0, !dbg !3861
  br i1 %tobool24, label %if.then25, label %if.else108, !dbg !3862

if.then25:                                        ; preds = %lor.lhs.false23, %land.lhs.true
  %call26 = tail call fastcc %union.tree_node* @make_ssa_name(%union.tree_node* %call5, %union.gimple_statement_d* null) #7, !dbg !3863
  call void @llvm.dbg.value(metadata %union.tree_node* %call26, metadata !3822, metadata !DIExpression()), !dbg !3832
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %name, %union.tree_node* %call26) #7, !dbg !3864
  %bf.load28 = load i64, i64* %0, align 8, !dbg !3865
  %bf.cast30 = and i64 %bf.load28, 4194304, !dbg !3865
  %12 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3866
  %bf.load32 = load i64, i64* %12, align 8, !dbg !3867
  %bf.clear33 = and i64 %bf.load32, -4194305, !dbg !3867
  %bf.set = or i64 %bf.clear33, %bf.cast30, !dbg !3867
  store i64 %bf.set, i64* %12, align 8, !dbg !3867
  %var35 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3868
  %13 = bitcast i32* %var35 to %struct.tree_common**, !dbg !3868
  %14 = load %struct.tree_common*, %struct.tree_common** %13, align 8, !dbg !3868
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %14, i64 0, i32 2, !dbg !3868
  %15 = bitcast %union.tree_node** %type to i64*, !dbg !3868
  %16 = load i64, i64* %15, align 8, !dbg !3868
  %type37 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3869
  %17 = bitcast %union.tree_node** %type37 to i64*, !dbg !3870
  store i64 %16, i64* %17, align 8, !dbg !3870
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3871
  %18 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !3871
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %18, align 8, !dbg !3871
  %call39 = tail call fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %19) #7, !dbg !3872
  %tobool40 = icmp eq i8 %call39, 0, !dbg !3872
  br i1 %tobool40, label %cleanup, label %if.then41, !dbg !3873

if.then41:                                        ; preds = %if.then25
  %entry_bb = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 20, !dbg !3874
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !3874
  %tobool42 = icmp eq %struct.basic_block_def* %20, null, !dbg !3875
  br i1 %tobool42, label %if.else, label %land.lhs.true43, !dbg !3876

land.lhs.true43:                                  ; preds = %if.then41
  %21 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !3877
  %call46 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %21) #6, !dbg !3878
  %tobool47 = icmp eq i8 %call46, 0, !dbg !3878
  br i1 %tobool47, label %if.else, label %land.lhs.true48, !dbg !3879

land.lhs.true48:                                  ; preds = %land.lhs.true43
  %22 = load i64*, i64** %9, align 8, !dbg !3880
  %bf.load52 = load i64, i64* %22, align 8, !dbg !3880
  %bf.cast545 = and i64 %bf.load52, 65535, !dbg !3881
  %cmp55 = icmp eq i64 %bf.cast545, 34, !dbg !3881
  br i1 %cmp55, label %if.else, label %land.lhs.true57, !dbg !3882

land.lhs.true57:                                  ; preds = %land.lhs.true48
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !3883
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3884
  %cfg = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, i32 1, !dbg !3884
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3884
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i64 0, i32 0, !dbg !3884
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3884
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i64 0, i32 1, !dbg !3884
  %27 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3884
  %tobool59 = icmp eq %struct.VEC_edge_gc* %27, null, !dbg !3884
  br i1 %tobool59, label %cond.end67, label %cond.true60, !dbg !3884

cond.true60:                                      ; preds = %land.lhs.true57
  %base65 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %27, i64 0, i32 0, !dbg !3884
  br label %cond.end67, !dbg !3884

cond.end67:                                       ; preds = %land.lhs.true57, %cond.true60
  %cond68 = phi %struct.VEC_edge_base* [ %base65, %cond.true60 ], [ null, %land.lhs.true57 ], !dbg !3884
  %call69 = tail call fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond68, i32 0) #7, !dbg !3884
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call69, i64 0, i32 1, !dbg !3885
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3885
  %cmp70 = icmp eq %struct.basic_block_def* %23, %28, !dbg !3886
  br i1 %cmp70, label %lor.lhs.false72, label %if.then85, !dbg !3887

lor.lhs.false72:                                  ; preds = %cond.end67
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !3888
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i64 0, i32 0, !dbg !3888
  %30 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !3888
  %tobool74 = icmp eq %struct.VEC_edge_gc* %30, null, !dbg !3888
  br i1 %tobool74, label %cond.end80, label %cond.true75, !dbg !3888

cond.true75:                                      ; preds = %lor.lhs.false72
  %base78 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %30, i64 0, i32 0, !dbg !3888
  br label %cond.end80, !dbg !3888

cond.end80:                                       ; preds = %lor.lhs.false72, %cond.true75
  %cond81 = phi %struct.VEC_edge_base* [ %base78, %cond.true75 ], [ null, %lor.lhs.false72 ], !dbg !3888
  %call82 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond81) #7, !dbg !3888
  %cmp83 = icmp eq i32 %call82, 1, !dbg !3889
  br i1 %cmp83, label %if.else, label %if.then85, !dbg !3890

if.then85:                                        ; preds = %cond.end80, %cond.end67
  %31 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3891
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #8, !dbg !3891
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %entry_bb, align 8, !dbg !3892
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3824, metadata !DIExpression(DW_OP_deref)), !dbg !3893
  call fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* nonnull sret %gsi, %struct.basic_block_def* %32) #7, !dbg !3894
  %33 = load %union.tree_node*, %union.tree_node** %type37, align 8, !dbg !3895
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !3895
  %call89 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %33, %union.tree_node* %34) #6, !dbg !3895
  %call90 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call26, %union.tree_node* %call89) #6, !dbg !3895
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call90, metadata !3831, metadata !DIExpression()), !dbg !3893
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3824, metadata !DIExpression(DW_OP_deref)), !dbg !3893
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %call90, i32 0) #6, !dbg !3896
  %bf.load92 = load i64, i64* %12, align 8, !dbg !3897
  %bf.clear93 = and i64 %bf.load92, -4294967297, !dbg !3897
  store i64 %bf.clear93, i64* %12, align 8, !dbg !3897
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #8, !dbg !3898
  br label %cleanup, !dbg !3899

if.else:                                          ; preds = %cond.end80, %land.lhs.true48, %land.lhs.true43, %if.then41
  %call94 = tail call %union.gimple_statement_d* @gimple_build_nop() #6, !dbg !3900
  %def_stmt96 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3902
  %35 = bitcast %union.tree_node** %def_stmt96 to %union.gimple_statement_d**, !dbg !3902
  store %union.gimple_statement_d* %call94, %union.gimple_statement_d** %35, align 8, !dbg !3903
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !3904
  %36 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !3904
  %37 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !3906
  %call99 = tail call %union.tree_node* @gimple_default_def(%struct.function* %36, %union.tree_node* %37) #6, !dbg !3907
  %cmp100 = icmp eq %union.tree_node* %call99, %name, !dbg !3908
  br i1 %cmp100, label %if.then102, label %cleanup, !dbg !3909

if.then102:                                       ; preds = %if.else
  %38 = bitcast i32* %var35 to %union.tree_node**, !dbg !3910
  %39 = load %union.tree_node*, %union.tree_node** %38, align 8, !dbg !3910
  tail call void @set_default_def(%union.tree_node* %39, %union.tree_node* %call26) #6, !dbg !3911
  br label %cleanup, !dbg !3911

if.else108:                                       ; preds = %lor.lhs.false23, %lor.lhs.false
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %name, %union.tree_node* %call5) #7, !dbg !3912
  br label %cleanup

cleanup:                                          ; preds = %if.then25, %if.else108, %if.then85, %if.then102, %if.else, %if.then3, %if.then
  %retval.0 = phi %union.tree_node* [ %call1, %if.then ], [ %name, %if.then3 ], [ %call5, %if.else108 ], [ %call26, %if.then85 ], [ %call26, %if.then102 ], [ %call26, %if.else ], [ %call26, %if.then25 ], !dbg !3832
  ret %union.tree_node* %retval.0, !dbg !3913
}

declare dso_local zeroext i8 @auto_var_in_fn_p(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local void @fancy_abort(i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @copy_statement_list(%union.tree_node** %tp) unnamed_addr #5 !dbg !3914 {
entry:
  %oi = alloca %struct.tree_stmt_iterator, align 8
  %ni = alloca %struct.tree_stmt_iterator, align 8
  %tmp = alloca %struct.tree_stmt_iterator, align 8
  %tmp2 = alloca %struct.tree_stmt_iterator, align 8
  %stmt = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !3918, metadata !DIExpression()), !dbg !3932
  %0 = bitcast %struct.tree_stmt_iterator* %oi to i8*, !dbg !3933
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !3933
  %1 = bitcast %struct.tree_stmt_iterator* %ni to i8*, !dbg !3933
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !3933
  %call = tail call %union.tree_node* @alloc_stmt_list() #6, !dbg !3934
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !3927, metadata !DIExpression()), !dbg !3932
  %2 = bitcast %struct.tree_stmt_iterator* %tmp to i8*, !dbg !3935
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !3935
  %call1 = tail call fastcc { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_start(%union.tree_node* %call) #7, !dbg !3935
  %3 = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %tmp, i64 0, i32 0, !dbg !3935
  %4 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call1, 0, !dbg !3935
  store %struct.tree_statement_list_node* %4, %struct.tree_statement_list_node** %3, align 8, !dbg !3935
  %5 = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %tmp, i64 0, i32 1, !dbg !3935
  %6 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call1, 1, !dbg !3935
  store %union.tree_node* %6, %union.tree_node** %5, align 8, !dbg !3935
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %2, i64 16, i1 false), !dbg !3935
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !3935
  %7 = bitcast %struct.tree_stmt_iterator* %tmp2 to i8*, !dbg !3936
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8, !dbg !3936
  %8 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !3937
  %call3 = tail call fastcc { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_start(%union.tree_node* %8) #7, !dbg !3936
  %9 = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %tmp2, i64 0, i32 0, !dbg !3936
  %10 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call3, 0, !dbg !3936
  store %struct.tree_statement_list_node* %10, %struct.tree_statement_list_node** %9, align 8, !dbg !3936
  %11 = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %tmp2, i64 0, i32 1, !dbg !3936
  %12 = extractvalue { %struct.tree_statement_list_node*, %union.tree_node* } %call3, 1, !dbg !3936
  store %union.tree_node* %12, %union.tree_node** %11, align 8, !dbg !3936
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %7, i64 16, i1 false), !dbg !3936
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8, !dbg !3936
  %13 = bitcast %union.tree_node** %tp to %struct.tree_common**, !dbg !3938
  %14 = load %struct.tree_common*, %struct.tree_common** %13, align 8, !dbg !3938
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %14, i64 0, i32 2, !dbg !3938
  %15 = bitcast %union.tree_node** %type to i64*, !dbg !3938
  %16 = load i64, i64* %15, align 8, !dbg !3938
  %type5 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3939
  %17 = bitcast %union.tree_node** %type5 to i64*, !dbg !3940
  store i64 %16, i64* %17, align 8, !dbg !3940
  store %union.tree_node* %call, %union.tree_node** %tp, align 8, !dbg !3941
  %18 = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %oi, i64 0, i32 0, !dbg !3942
  %19 = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %oi, i64 0, i32 1, !dbg !3942
  %20 = bitcast %union.tree_node** %stmt to i8*, !dbg !3943
  br label %for.cond, !dbg !3944

for.cond:                                         ; preds = %if.end, %entry
  %21 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %18, align 8, !dbg !3945
  %22 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !3945
  %call6 = call fastcc zeroext i8 @tsi_end_p(%struct.tree_statement_list_node* %21, %union.tree_node* %22) #7, !dbg !3945
  %tobool = icmp eq i8 %call6, 0, !dbg !3946
  br i1 %tobool, label %for.body, label %for.end, !dbg !3947

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8, !dbg !3948
  %23 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %18, align 8, !dbg !3949
  %24 = load %union.tree_node*, %union.tree_node** %19, align 8, !dbg !3949
  %call7 = call fastcc %union.tree_node* @tsi_stmt(%struct.tree_statement_list_node* %23, %union.tree_node* %24) #7, !dbg !3949
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !3928, metadata !DIExpression()), !dbg !3943
  store %union.tree_node* %call7, %union.tree_node** %stmt, align 8, !dbg !3950
  %.cast = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3951
  %bf.load = load i64, i64* %.cast, align 8, !dbg !3951
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3953
  %cmp = icmp eq i64 %bf.cast1, 147, !dbg !3953
  br i1 %cmp, label %if.then, label %if.end, !dbg !3954

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata %union.tree_node** %stmt, metadata !3928, metadata !DIExpression(DW_OP_deref)), !dbg !3943
  call fastcc void @copy_statement_list(%union.tree_node** nonnull %stmt) #7, !dbg !3955
  %.pre = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !3956
  br label %if.end, !dbg !3955

if.end:                                           ; preds = %if.then, %for.body
  %25 = phi %union.tree_node* [ %.pre, %if.then ], [ %call7, %for.body ], !dbg !3956
  call void @llvm.dbg.value(metadata %union.tree_node* %25, metadata !3928, metadata !DIExpression()), !dbg !3943
  call void @llvm.dbg.value(metadata %struct.tree_stmt_iterator* %ni, metadata !3926, metadata !DIExpression(DW_OP_deref)), !dbg !3932
  call void @tsi_link_after(%struct.tree_stmt_iterator* nonnull %ni, %union.tree_node* %25, i32 4) #6, !dbg !3957
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8, !dbg !3958
  call void @llvm.dbg.value(metadata %struct.tree_stmt_iterator* %oi, metadata !3919, metadata !DIExpression(DW_OP_deref)), !dbg !3932
  call fastcc void @tsi_next(%struct.tree_stmt_iterator* nonnull %oi) #7, !dbg !3959
  br label %for.cond, !dbg !3960, !llvm.loop !3961

for.end:                                          ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !3963
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !3963
  ret void, !dbg !3963
}

; Function Attrs: nounwind uwtable
define internal fastcc void @remap_save_expr(%union.tree_node** %tp, i8* %st_, i32* %walk_subtrees) unnamed_addr #5 !dbg !3964 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !3968, metadata !DIExpression()), !dbg !3974
  call void @llvm.dbg.value(metadata i8* %st_, metadata !3969, metadata !DIExpression()), !dbg !3974
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !3970, metadata !DIExpression()), !dbg !3974
  %0 = bitcast i8* %st_ to %struct.pointer_map_t*, !dbg !3975
  call void @llvm.dbg.value(metadata %struct.pointer_map_t* %0, metadata !3971, metadata !DIExpression()), !dbg !3974
  %1 = bitcast %union.tree_node** %tp to i8**, !dbg !3976
  %2 = load i8*, i8** %1, align 8, !dbg !3976
  %call = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %2) #6, !dbg !3977
  call void @llvm.dbg.value(metadata i8** %call, metadata !3972, metadata !DIExpression()), !dbg !3974
  %tobool = icmp eq i8** %call, null, !dbg !3978
  br i1 %tobool, label %if.then, label %if.else, !dbg !3980

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !3981
  %call1 = tail call %union.tree_node* @copy_node_stat(%union.tree_node* %3) #6, !dbg !3981
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !3973, metadata !DIExpression()), !dbg !3974
  %4 = load i8*, i8** %1, align 8, !dbg !3983
  %call2 = tail call i8** @pointer_map_insert(%struct.pointer_map_t* %0, i8* %4) #6, !dbg !3984
  %5 = bitcast i8** %call2 to %union.tree_node**, !dbg !3985
  store %union.tree_node* %call1, %union.tree_node** %5, align 8, !dbg !3985
  %6 = bitcast %union.tree_node* %call1 to i8*, !dbg !3986
  %call3 = tail call i8** @pointer_map_insert(%struct.pointer_map_t* %0, i8* %6) #6, !dbg !3987
  %7 = bitcast i8** %call3 to %union.tree_node**, !dbg !3988
  store %union.tree_node* %call1, %union.tree_node** %7, align 8, !dbg !3988
  br label %if.end, !dbg !3989

if.else:                                          ; preds = %entry
  %8 = bitcast i8** %call to %union.tree_node**, !dbg !3990
  call void @llvm.dbg.value(metadata %union.tree_node** %8, metadata !3972, metadata !DIExpression()), !dbg !3974
  store i32 0, i32* %walk_subtrees, align 4, !dbg !3991
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !3993
  call void @llvm.dbg.value(metadata %union.tree_node* %9, metadata !3973, metadata !DIExpression()), !dbg !3974
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %t.0 = phi %union.tree_node* [ %9, %if.else ], [ %call1, %if.then ], !dbg !3994
  call void @llvm.dbg.value(metadata %union.tree_node* %t.0, metadata !3973, metadata !DIExpression()), !dbg !3974
  store %union.tree_node* %t.0, %union.tree_node** %tp, align 8, !dbg !3995
  ret void, !dbg !3996
}

declare dso_local %union.tree_node* @decl_function_context(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @copy_bind_expr(%union.tree_node** %tp, i32* %walk_subtrees, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !3997 {
entry:
  %block = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !4001, metadata !DIExpression()), !dbg !4005
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !4002, metadata !DIExpression()), !dbg !4005
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !4003, metadata !DIExpression()), !dbg !4005
  %0 = bitcast %union.tree_node** %block to i8*, !dbg !4006
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !4006
  %1 = bitcast %union.tree_node** %tp to %struct.tree_exp**, !dbg !4007
  %2 = load %struct.tree_exp*, %struct.tree_exp** %1, align 8, !dbg !4007
  %arrayidx = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %2, i64 0, i32 3, i64 2, !dbg !4007
  %3 = bitcast %union.tree_node** %arrayidx to i64*, !dbg !4007
  %4 = load i64, i64* %3, align 8, !dbg !4007
  %5 = bitcast %union.tree_node** %block to i64*, !dbg !4008
  store i64 %4, i64* %5, align 8, !dbg !4008
  %call = tail call %union.tree_node* @copy_tree_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* null) #7, !dbg !4009
  call void @llvm.dbg.value(metadata i64 %4, metadata !4004, metadata !DIExpression()), !dbg !4005
  %tobool = icmp eq i64 %4, 0, !dbg !4010
  br i1 %tobool, label %if.end, label %if.then, !dbg !4012

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata %union.tree_node** %block, metadata !4004, metadata !DIExpression(DW_OP_deref)), !dbg !4005
  call fastcc void @remap_block(%union.tree_node** nonnull %block, %struct.copy_body_data* %id) #7, !dbg !4013
  %6 = load i64, i64* %5, align 8, !dbg !4015
  %7 = load %struct.tree_exp*, %struct.tree_exp** %1, align 8, !dbg !4016
  %arrayidx3 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %7, i64 0, i32 3, i64 2, !dbg !4016
  %8 = bitcast %union.tree_node** %arrayidx3 to i64*, !dbg !4017
  store i64 %6, i64* %8, align 8, !dbg !4017
  br label %if.end, !dbg !4018

if.end:                                           ; preds = %entry, %if.then
  %9 = load %struct.tree_exp*, %struct.tree_exp** %1, align 8, !dbg !4019
  %arrayidx6 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %9, i64 0, i32 3, i64 0, !dbg !4019
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx6, align 8, !dbg !4019
  %tobool7 = icmp eq %union.tree_node* %10, null, !dbg !4019
  br i1 %tobool7, label %if.end16, label %if.then8, !dbg !4021

if.then8:                                         ; preds = %if.end
  %call12 = call fastcc %union.tree_node* @remap_decls(%union.tree_node* nonnull %10, %struct.VEC_tree_gc** null, %struct.copy_body_data* %id) #7, !dbg !4022
  %11 = load %struct.tree_exp*, %struct.tree_exp** %1, align 8, !dbg !4023
  %arrayidx15 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %11, i64 0, i32 3, i64 0, !dbg !4023
  store %union.tree_node* %call12, %union.tree_node** %arrayidx15, align 8, !dbg !4024
  br label %if.end16, !dbg !4023

if.end16:                                         ; preds = %if.end, %if.then8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !4025
  ret void, !dbg !4025
}

declare dso_local %union.tree_node* @build_int_cst_wide(%union.tree_node*, i64, i64) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_empty_stmt(i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @fold_indirect_ref_1(i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @copy_tree_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) local_unnamed_addr #5 !dbg !4026 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !4028, metadata !DIExpression()), !dbg !4040
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !4029, metadata !DIExpression()), !dbg !4040
  call void @llvm.dbg.value(metadata i8* %data, metadata !4030, metadata !DIExpression()), !dbg !4040
  %0 = bitcast %union.tree_node** %tp to i64**, !dbg !4041
  %1 = load i64*, i64** %0, align 8, !dbg !4041
  %bf.load = load i64, i64* %1, align 8, !dbg !4041
  %2 = trunc i64 %bf.load to i32, !dbg !4041
  %bf.cast = and i32 %2, 65535, !dbg !4041
  call void @llvm.dbg.value(metadata i32 %bf.cast, metadata !4031, metadata !DIExpression()), !dbg !4040
  %idxprom = zext i32 %bf.cast to i64, !dbg !4042
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !4042
  %3 = load i32, i32* %arrayidx, align 4, !dbg !4042
  call void @llvm.dbg.value(metadata i32 %3, metadata !4032, metadata !DIExpression()), !dbg !4040
  %.off = add i32 %3, -4, !dbg !4043
  %4 = icmp ult i32 %.off, 7, !dbg !4043
  %5 = bitcast i64* %1 to %union.tree_node*, !dbg !4043
  br i1 %4, label %if.then, label %switch.early.test, !dbg !4043

switch.early.test:                                ; preds = %entry
  %trunc = trunc i64 %bf.load to i16, !dbg !4043
  switch i16 %trunc, label %if.else50 [
    i16 163, label %if.then
    i16 35, label %if.then
    i16 3, label %if.then
    i16 2, label %if.then
    i16 51, label %if.then33
  ], !dbg !4043

if.then:                                          ; preds = %switch.early.test, %switch.early.test, %switch.early.test, %switch.early.test, %entry
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !4033, metadata !DIExpression()), !dbg !4044
  %chain9 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !4045
  %6 = load i64, i64* %chain9, align 8, !dbg !4045
  %.cast = bitcast i64* %1 to %union.tree_node*, !dbg !4046
  %call = tail call %union.tree_node* @copy_node_stat(%union.tree_node* %.cast) #6, !dbg !4046
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !4036, metadata !DIExpression()), !dbg !4044
  %7 = load i32, i32* @flag_mudflap, align 4, !dbg !4047
  %tobool = icmp eq i32 %7, 0, !dbg !4047
  br i1 %tobool, label %if.end, label %land.lhs.true10, !dbg !4049

land.lhs.true10:                                  ; preds = %if.then
  %8 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !4050
  %call11 = tail call i32 @mf_marked_p(%union.tree_node* %8) #6, !dbg !4051
  %tobool12 = icmp eq i32 %call11, 0, !dbg !4051
  br i1 %tobool12, label %if.end, label %if.then13, !dbg !4052

if.then13:                                        ; preds = %land.lhs.true10
  %call14 = tail call %union.tree_node* @mf_mark(%union.tree_node* %call) #6, !dbg !4053
  br label %if.end, !dbg !4053

if.end:                                           ; preds = %land.lhs.true10, %if.then, %if.then13
  store %union.tree_node* %call, %union.tree_node** %tp, align 8, !dbg !4054
  %trunc5 = trunc i64 %bf.load to i16, !dbg !4055
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4055
  %10 = bitcast %union.tree_node* %call to %struct.tree_exp*, !dbg !4055
  switch i16 %trunc5, label %if.end23 [
    i16 34, label %if.then20
    i16 2, label %if.then20
    i16 163, label %if.then20
  ], !dbg !4055

if.then20:                                        ; preds = %if.end, %if.end, %if.end
  %chain22 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4057
  %11 = bitcast %union.tree_node** %chain22 to i64*, !dbg !4058
  store i64 %6, i64* %11, align 8, !dbg !4058
  %.pre = load i64*, i64** %0, align 8, !dbg !4059
  %12 = bitcast i64* %.pre to %struct.tree_exp*, !dbg !4057
  br label %if.end23, !dbg !4057

if.end23:                                         ; preds = %if.end, %if.then20
  %13 = phi %struct.tree_exp* [ %10, %if.end ], [ %12, %if.then20 ]
  %14 = phi i64* [ %9, %if.end ], [ %.pre, %if.then20 ], !dbg !4059
  %bf.load25 = load i64, i64* %14, align 8, !dbg !4059
  %bf.cast276 = and i64 %bf.load25, 65535, !dbg !4061
  %cmp28 = icmp eq i64 %bf.cast276, 58, !dbg !4061
  br i1 %cmp28, label %if.then29, label %if.end75, !dbg !4062

if.then29:                                        ; preds = %if.end23
  %arrayidx30 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %13, i64 0, i32 3, i64 2, !dbg !4063
  store %union.tree_node* null, %union.tree_node** %arrayidx30, align 8, !dbg !4064
  br label %if.end75, !dbg !4063

if.then33:                                        ; preds = %switch.early.test
  %call35 = tail call %union.tree_node* @copy_node_stat(%union.tree_node* %5) #6, !dbg !4065
  call void @llvm.dbg.value(metadata %union.tree_node* %call35, metadata !4037, metadata !DIExpression()), !dbg !4066
  %15 = load i32, i32* @flag_mudflap, align 4, !dbg !4067
  %tobool36 = icmp eq i32 %15, 0, !dbg !4067
  br i1 %tobool36, label %if.end42, label %land.lhs.true37, !dbg !4069

land.lhs.true37:                                  ; preds = %if.then33
  %16 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !4070
  %call38 = tail call i32 @mf_marked_p(%union.tree_node* %16) #6, !dbg !4071
  %tobool39 = icmp eq i32 %call38, 0, !dbg !4071
  br i1 %tobool39, label %if.end42, label %if.then40, !dbg !4072

if.then40:                                        ; preds = %land.lhs.true37
  %call41 = tail call %union.tree_node* @mf_mark(%union.tree_node* %call35) #6, !dbg !4073
  br label %if.end42, !dbg !4073

if.end42:                                         ; preds = %land.lhs.true37, %if.then33, %if.then40
  %17 = bitcast %union.tree_node** %tp to %struct.tree_constructor**, !dbg !4074
  %18 = load %struct.tree_constructor*, %struct.tree_constructor** %17, align 8, !dbg !4074
  %elts = getelementptr inbounds %struct.tree_constructor, %struct.tree_constructor* %18, i64 0, i32 1, !dbg !4074
  %19 = load %struct.VEC_constructor_elt_gc*, %struct.VEC_constructor_elt_gc** %elts, align 8, !dbg !4074
  %tobool43 = icmp eq %struct.VEC_constructor_elt_gc* %19, null, !dbg !4074
  br i1 %tobool43, label %cond.end, label %cond.true, !dbg !4074

cond.true:                                        ; preds = %if.end42
  %base46 = getelementptr inbounds %struct.VEC_constructor_elt_gc, %struct.VEC_constructor_elt_gc* %19, i64 0, i32 0, !dbg !4074
  br label %cond.end, !dbg !4074

cond.end:                                         ; preds = %if.end42, %cond.true
  %cond = phi %struct.VEC_constructor_elt_base* [ %base46, %cond.true ], [ null, %if.end42 ], !dbg !4074
  %call47 = tail call fastcc %struct.VEC_constructor_elt_gc* @VEC_constructor_elt_gc_copy(%struct.VEC_constructor_elt_base* %cond) #7, !dbg !4074
  %elts49 = getelementptr inbounds %union.tree_node, %union.tree_node* %call35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4075
  %20 = bitcast i32* %elts49 to %struct.VEC_constructor_elt_gc**, !dbg !4075
  store %struct.VEC_constructor_elt_gc* %call47, %struct.VEC_constructor_elt_gc** %20, align 8, !dbg !4076
  store %union.tree_node* %call35, %union.tree_node** %tp, align 8, !dbg !4077
  br label %if.end75, !dbg !4078

if.else50:                                        ; preds = %switch.early.test
  %cmp53 = icmp eq i32 %3, 2, !dbg !4079
  br i1 %cmp53, label %if.then54, label %if.else55, !dbg !4081

if.then54:                                        ; preds = %if.else50
  store i32 0, i32* %walk_subtrees, align 4, !dbg !4082
  br label %if.end75, !dbg !4083

if.else55:                                        ; preds = %if.else50
  %cmp58 = icmp eq i32 %3, 3, !dbg !4084
  br i1 %cmp58, label %if.then59, label %if.else60, !dbg !4086

if.then59:                                        ; preds = %if.else55
  store i32 0, i32* %walk_subtrees, align 4, !dbg !4087
  br label %if.end75, !dbg !4088

if.else60:                                        ; preds = %if.else55
  %cmp63 = icmp eq i32 %3, 1, !dbg !4089
  br i1 %cmp63, label %if.then64, label %if.else65, !dbg !4091

if.then64:                                        ; preds = %if.else60
  store i32 0, i32* %walk_subtrees, align 4, !dbg !4092
  br label %if.end75, !dbg !4093

if.else65:                                        ; preds = %if.else60
  %cmp66 = icmp eq i32 %bf.cast, 147, !dbg !4094
  br i1 %cmp66, label %cond.true67, label %if.end75, !dbg !4094

cond.true67:                                      ; preds = %if.else65
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4093, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !4094
  br label %if.end75, !dbg !4094

if.end75:                                         ; preds = %if.else65, %cond.end, %if.then59, %cond.true67, %if.then64, %if.then54, %if.end23, %if.then29
  ret %union.tree_node* null, !dbg !4095
}

declare dso_local %union.tree_node** @tree_block(%union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) local_unnamed_addr #2

declare dso_local void @recompute_tree_invariant_for_addr_expr(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @tree_inlinable_function_p(%union.tree_node* %fn) local_unnamed_addr #5 !dbg !4096 {
entry:
  %tmp = alloca %struct.expanded_location, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %fn, metadata !4100, metadata !DIExpression()), !dbg !4104
  call void @llvm.dbg.value(metadata i8 1, metadata !4101, metadata !DIExpression()), !dbg !4104
  %uninlinable = getelementptr inbounds %union.tree_node, %union.tree_node* %fn, i64 0, i32 0, i32 5, !dbg !4105
  %bf.load = load i32, i32* %uninlinable, align 8, !dbg !4105
  %0 = trunc i32 %bf.load to i16, !dbg !4105
  %tobool = icmp slt i16 %0, 0, !dbg !4105
  br i1 %tobool, label %cleanup, label %if.end, !dbg !4107

if.end:                                           ; preds = %entry
  %1 = load i32, i32* @warn_inline, align 4, !dbg !4108
  %tobool1 = icmp eq i32 %1, 0, !dbg !4108
  br i1 %tobool1, label %land.end, label %land.lhs.true, !dbg !4109

land.lhs.true:                                    ; preds = %if.end
  %bf.clear5 = and i32 %bf.load, 2097152, !dbg !4110
  %tobool6 = icmp eq i32 %bf.clear5, 0, !dbg !4110
  br i1 %tobool6, label %land.end, label %land.lhs.true7, !dbg !4111

land.lhs.true7:                                   ; preds = %land.lhs.true
  %bf.clear11 = and i32 %bf.load, 8388608, !dbg !4112
  %tobool12 = icmp eq i32 %bf.clear11, 0, !dbg !4112
  br i1 %tobool12, label %land.rhs, label %land.end, !dbg !4113

land.rhs:                                         ; preds = %land.lhs.true7
  %locus = getelementptr inbounds %union.tree_node, %union.tree_node* %fn, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4114
  %2 = load i32, i32* %locus, align 8, !dbg !4114
  call void @expand_location(%struct.expanded_location* nonnull sret %tmp, i32 %2) #6, !dbg !4114
  %sysp = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i64 0, i32 3, !dbg !4114
  %3 = load i8, i8* %sysp, align 8, !dbg !4114
  %cmp = icmp eq i8 %3, 0, !dbg !4114
  %phitmp = zext i1 %cmp to i8
  br label %land.end

land.end:                                         ; preds = %land.lhs.true7, %land.lhs.true, %if.end, %land.rhs
  %4 = phi i8 [ 0, %land.lhs.true7 ], [ 0, %land.lhs.true ], [ 0, %if.end ], [ %phitmp, %land.rhs ]
  call void @llvm.dbg.value(metadata i8 %4, metadata !4102, metadata !DIExpression()), !dbg !4104
  %attributes = getelementptr inbounds %union.tree_node, %union.tree_node* %fn, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, !dbg !4115
  %5 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !4115
  %call = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), %union.tree_node* %5) #6, !dbg !4116
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !4103, metadata !DIExpression()), !dbg !4104
  %6 = load i32, i32* @flag_no_inline, align 4, !dbg !4117
  %tobool15 = icmp ne i32 %6, 0, !dbg !4117
  %cmp17 = icmp eq %union.tree_node* %call, null, !dbg !4119
  %or.cond = and i1 %tobool15, %cmp17, !dbg !4120
  br i1 %or.cond, label %if.then19, label %if.else, !dbg !4120

if.then19:                                        ; preds = %land.end
  %tobool20 = icmp eq i8 %4, 0, !dbg !4121
  br i1 %tobool20, label %if.end62, label %if.then21, !dbg !4124

if.then21:                                        ; preds = %if.then19
  %call22 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), %union.tree_node* %fn) #6, !dbg !4125
  br label %if.end62, !dbg !4125

if.else:                                          ; preds = %land.end
  %bf.load26 = load i32, i32* %uninlinable, align 8, !dbg !4126
  %bf.clear28 = and i32 %bf.load26, 2097152, !dbg !4126
  %tobool29 = icmp eq i32 %bf.clear28, 0, !dbg !4126
  br i1 %tobool29, label %land.lhs.true30, label %if.else39, !dbg !4128

land.lhs.true30:                                  ; preds = %if.else
  %comdat_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %fn, i64 0, i32 0, i32 0, i32 0, i32 4, !dbg !4129
  %7 = bitcast i24* %comdat_flag to i32*, !dbg !4129
  %bf.load31 = load i32, i32* %7, align 8, !dbg !4129
  %bf.clear33 = and i32 %bf.load31, 512, !dbg !4129
  %tobool34 = icmp eq i32 %bf.clear33, 0, !dbg !4129
  br i1 %tobool34, label %land.lhs.true35, label %if.else39, !dbg !4129

land.lhs.true35:                                  ; preds = %land.lhs.true30
  %8 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i64 0, i32 49), align 8, !dbg !4129
  %call36 = call zeroext i8 %8(%union.tree_node* %fn) #6, !dbg !4129
  %tobool37 = icmp eq i8 %call36, 0, !dbg !4129
  br i1 %tobool37, label %if.end62, label %if.else39, !dbg !4130

if.else39:                                        ; preds = %land.lhs.true35, %land.lhs.true30, %if.else
  %call40 = call zeroext i8 @function_attribute_inlinable_p(%union.tree_node* %fn) #6, !dbg !4131
  %tobool41 = icmp eq i8 %call40, 0, !dbg !4131
  br i1 %tobool41, label %if.then42, label %if.else47, !dbg !4133

if.then42:                                        ; preds = %if.else39
  %tobool43 = icmp eq i8 %4, 0, !dbg !4134
  br i1 %tobool43, label %if.end62, label %if.then44, !dbg !4137

if.then44:                                        ; preds = %if.then42
  %call45 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str.4, i64 0, i64 0), %union.tree_node* %fn) #6, !dbg !4138
  br label %if.end62, !dbg !4138

if.else47:                                        ; preds = %if.else39
  %call48 = call fastcc zeroext i8 @inline_forbidden_p(%union.tree_node* %fn) #7, !dbg !4139
  %tobool49 = icmp eq i8 %call48, 0, !dbg !4139
  br i1 %tobool49, label %if.end62, label %if.then50, !dbg !4141

if.then50:                                        ; preds = %if.else47
  br i1 %cmp17, label %if.else53, label %if.then52, !dbg !4142

if.then52:                                        ; preds = %if.then50
  %9 = load i8*, i8** @inline_forbidden_reason, align 8, !dbg !4144
  call void (i8*, ...) @sorry(i8* %9, %union.tree_node* %fn) #6, !dbg !4146
  br label %if.end62, !dbg !4146

if.else53:                                        ; preds = %if.then50
  %tobool54 = icmp eq i8 %4, 0, !dbg !4147
  br i1 %tobool54, label %if.end62, label %if.then55, !dbg !4149

if.then55:                                        ; preds = %if.else53
  %10 = load i8*, i8** @inline_forbidden_reason, align 8, !dbg !4150
  %call56 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* %10, %union.tree_node* %fn) #6, !dbg !4151
  br label %if.end62, !dbg !4151

if.end62:                                         ; preds = %if.then19, %if.else53, %if.else47, %if.then42, %land.lhs.true35, %if.then55, %if.then52, %if.then44, %if.then21
  %inlinable.3 = phi i8 [ 0, %if.then21 ], [ 0, %if.then19 ], [ 0, %land.lhs.true35 ], [ 0, %if.then44 ], [ 0, %if.then42 ], [ 1, %if.else47 ], [ 0, %if.else53 ], [ 0, %if.then55 ], [ 0, %if.then52 ], !dbg !4152
  call void @llvm.dbg.value(metadata i8 %inlinable.3, metadata !4101, metadata !DIExpression()), !dbg !4104
  %11 = xor i8 %inlinable.3, 1, !dbg !4153
  %12 = zext i8 %11 to i32, !dbg !4153
  %bf.load67 = load i32, i32* %uninlinable, align 8, !dbg !4154
  %bf.shl = shl nuw nsw i32 %12, 15, !dbg !4154
  %bf.clear68 = and i32 %bf.load67, -32769, !dbg !4154
  %bf.set = or i32 %bf.clear68, %bf.shl, !dbg !4154
  store i32 %bf.set, i32* %uninlinable, align 8, !dbg !4154
  br label %cleanup, !dbg !4155

cleanup:                                          ; preds = %entry, %if.end62
  %retval.0 = phi i8 [ %inlinable.3, %if.end62 ], [ 0, %entry ], !dbg !4104
  ret i8 %retval.0, !dbg !4156
}

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @lookup_attribute(i8*, %union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @warning(i32, i8*, ...) local_unnamed_addr #2

declare dso_local zeroext i8 @function_attribute_inlinable_p(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @inline_forbidden_p(%union.tree_node* %fndecl) unnamed_addr #5 !dbg !4157 {
entry:
  %wi = alloca %struct.walk_stmt_info, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %fndecl, metadata !4159, metadata !DIExpression()), !dbg !4170
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %fndecl, i64 0, i32 0, i32 1, !dbg !4171
  %0 = load %struct.function*, %struct.function** %f, align 8, !dbg !4171
  call void @llvm.dbg.value(metadata %struct.function* %0, metadata !4160, metadata !DIExpression()), !dbg !4170
  %1 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4172
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1) #8, !dbg !4172
  call void @llvm.dbg.value(metadata i8 0, metadata !4164, metadata !DIExpression()), !dbg !4170
  %call = tail call fastcc i8* @copy_forbidden(%struct.function* %0, %union.tree_node* %fndecl) #7, !dbg !4173
  store i8* %call, i8** @inline_forbidden_reason, align 8, !dbg !4174
  %cmp = icmp eq i8* %call, null, !dbg !4175
  br i1 %cmp, label %if.end, label %cleanup13, !dbg !4177

if.end:                                           ; preds = %entry
  %call1 = tail call %struct.pointer_set_t* @pointer_set_create() #6, !dbg !4178
  call void @llvm.dbg.value(metadata %struct.pointer_set_t* %call1, metadata !4162, metadata !DIExpression()), !dbg !4170
  %call2 = call i8* @memset(i8* nonnull %1, i32 0, i64 56) #6, !dbg !4179
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 1, !dbg !4180
  %2 = bitcast i8** %info to %union.tree_node**, !dbg !4181
  store %union.tree_node* %fndecl, %union.tree_node** %2, align 8, !dbg !4181
  %pset = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 2, !dbg !4182
  store %struct.pointer_set_t* %call1, %struct.pointer_set_t** %pset, align 8, !dbg !4183
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !4184
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4184
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i64 0, i32 0, !dbg !4184
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4184
  br label %for.cond, !dbg !4184

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = phi %struct.control_flow_graph* [ %3, %if.end ], [ %.pre, %for.inc ], !dbg !4185
  %.pn = phi %struct.basic_block_def* [ %4, %if.end ], [ %bb.0, %for.inc ]
  %forbidden_p.0 = phi i8 [ 0, %if.end ], [ %conv8, %for.inc ], !dbg !4170
  %bb.0.in = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %.pn, i64 0, i32 6, !dbg !4186
  %bb.0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.0.in, align 8, !dbg !4186
  call void @llvm.dbg.value(metadata i8 %forbidden_p.0, metadata !4164, metadata !DIExpression()), !dbg !4170
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !4163, metadata !DIExpression()), !dbg !4170
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i64 0, i32 1, !dbg !4185
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4185
  %cmp4 = icmp eq %struct.basic_block_def* %bb.0, %6, !dbg !4185
  br i1 %cmp4, label %for.end, label %for.body, !dbg !4184

for.body:                                         ; preds = %for.cond
  %call5 = call fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb.0) #7, !dbg !4187
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call5, metadata !4169, metadata !DIExpression()), !dbg !4188
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !4161, metadata !DIExpression(DW_OP_deref)), !dbg !4170
  %call6 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call5, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* nonnull @inline_forbidden_p_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.walk_stmt_info* nonnull %wi) #6, !dbg !4189
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call6, metadata !4165, metadata !DIExpression()), !dbg !4188
  %cmp7 = icmp ne %union.gimple_statement_d* %call6, null, !dbg !4190
  %conv8 = zext i1 %cmp7 to i8, !dbg !4191
  call void @llvm.dbg.value(metadata i8 %conv8, metadata !4164, metadata !DIExpression()), !dbg !4170
  br i1 %cmp7, label %for.end, label %for.inc

for.inc:                                          ; preds = %for.body
  %.pre = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4185
  br label %for.cond, !dbg !4185, !llvm.loop !4192

for.end:                                          ; preds = %for.cond, %for.body
  %forbidden_p.1 = phi i8 [ %conv8, %for.body ], [ %forbidden_p.0, %for.cond ], !dbg !4170
  call void @llvm.dbg.value(metadata i8 %forbidden_p.1, metadata !4164, metadata !DIExpression()), !dbg !4170
  call void @pointer_set_destroy(%struct.pointer_set_t* %call1) #6, !dbg !4194
  br label %cleanup13, !dbg !4195

cleanup13:                                        ; preds = %entry, %for.end
  %retval.0 = phi i8 [ %forbidden_p.1, %for.end ], [ 1, %entry ], !dbg !4170
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1) #8, !dbg !4196
  ret i8 %retval.0, !dbg !4196
}

declare dso_local void @sorry(i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local i32 @estimate_move_cost(%union.tree_node* %type) local_unnamed_addr #5 !dbg !4197 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !4201, metadata !DIExpression()), !dbg !4203
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4204
  %bf.load = load i64, i64* %0, align 8, !dbg !4204
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4204
  %cmp = icmp eq i64 %bf.cast1, 19, !dbg !4204
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !4204

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3016, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !4204
  br label %cond.end, !dbg !4204

cond.end:                                         ; preds = %entry, %cond.true
  %call = tail call i64 @int_size_in_bytes(%union.tree_node* %type) #6, !dbg !4205
  call void @llvm.dbg.value(metadata i64 %call, metadata !4202, metadata !DIExpression()), !dbg !4203
  %cmp1 = icmp slt i64 %call, 0, !dbg !4206
  br i1 %cmp1, label %cleanup, label %lor.lhs.false, !dbg !4208

lor.lhs.false:                                    ; preds = %cond.end
  %1 = load i32, i32* @optimize_size, align 4, !dbg !4209
  %tobool = icmp eq i32 %1, 0, !dbg !4209
  br i1 %tobool, label %cond.true2, label %cond.end4, !dbg !4209

cond.true2:                                       ; preds = %lor.lhs.false
  %2 = load %struct.processor_costs*, %struct.processor_costs** @ix86_cost, align 8, !dbg !4209
  %move_ratio = getelementptr inbounds %struct.processor_costs, %struct.processor_costs* %2, i64 0, i32 10, !dbg !4209
  %3 = load i32, i32* %move_ratio, align 4, !dbg !4209
  %phitmp = shl i32 %3, 2, !dbg !4209
  %phitmp2 = sext i32 %phitmp to i64, !dbg !4209
  br label %cond.end4, !dbg !4209

cond.end4:                                        ; preds = %lor.lhs.false, %cond.true2
  %cond5 = phi i64 [ %phitmp2, %cond.true2 ], [ 12, %lor.lhs.false ]
  %cmp6 = icmp sgt i64 %call, %cond5, !dbg !4210
  br i1 %cmp6, label %cleanup, label %if.else, !dbg !4211

if.else:                                          ; preds = %cond.end4
  %sub = add nsw i64 %call, 3, !dbg !4212
  %div = sdiv i64 %sub, 4, !dbg !4213
  %conv8 = trunc i64 %div to i32, !dbg !4214
  br label %cleanup, !dbg !4215

cleanup:                                          ; preds = %cond.end, %cond.end4, %if.else
  %retval.0 = phi i32 [ %conv8, %if.else ], [ 4, %cond.end4 ], [ 4, %cond.end ], !dbg !4216
  ret i32 %retval.0, !dbg !4217
}

declare dso_local i64 @int_size_in_bytes(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local i32 @estimate_num_insns(%union.gimple_statement_d* %stmt, %struct.eni_weights_d* %weights) local_unnamed_addr #5 !dbg !4218 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4223, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.value(metadata %struct.eni_weights_d* %weights, metadata !4224, metadata !DIExpression()), !dbg !4246
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !4247
  call void @llvm.dbg.value(metadata i32 %call, metadata !4227, metadata !DIExpression()), !dbg !4246
  switch i32 %call, label %sw.default215 [
    i32 6, label %sw.bb
    i32 1, label %sw.bb21
    i32 5, label %sw.bb27
    i32 8, label %sw.bb36
    i32 3, label %cleanup217
    i32 4, label %cleanup217
    i32 18, label %cleanup217
    i32 16, label %cleanup217
    i32 9, label %cleanup217
    i32 33, label %cleanup217
    i32 2, label %cleanup217
    i32 7, label %sw.bb180
    i32 14, label %sw.bb183
    i32 15, label %sw.bb184
    i32 10, label %sw.bb185
    i32 12, label %sw.bb188
    i32 11, label %sw.bb191
    i32 17, label %sw.bb194
    i32 28, label %cleanup217
    i32 31, label %cleanup217
    i32 20, label %cleanup217
    i32 21, label %cleanup217
    i32 19, label %sw.bb201
    i32 23, label %sw.bb202
    i32 26, label %sw.bb210
    i32 27, label %sw.bb210
    i32 22, label %sw.bb210
    i32 24, label %sw.bb210
    i32 25, label %sw.bb210
    i32 29, label %sw.bb210
    i32 30, label %sw.bb210
    i32 32, label %sw.bb210
  ], !dbg !4248

sw.bb:                                            ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !4249
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !4228, metadata !DIExpression()), !dbg !4246
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !4250
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !4229, metadata !DIExpression()), !dbg !4246
  %call3 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %call1) #6, !dbg !4251
  %tobool = icmp eq i8 %call3, 0, !dbg !4251
  br i1 %tobool, label %if.else, label %if.end, !dbg !4253

if.else:                                          ; preds = %sw.bb
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4254
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4254
  %call4 = tail call i32 @estimate_move_cost(%union.tree_node* %0) #7, !dbg !4255
  call void @llvm.dbg.value(metadata i32 %call4, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %if.end

if.end:                                           ; preds = %sw.bb, %if.else
  %cost.0 = phi i32 [ %call4, %if.else ], [ 0, %sw.bb ], !dbg !4256
  call void @llvm.dbg.value(metadata i32 %cost.0, metadata !4225, metadata !DIExpression()), !dbg !4246
  %call5 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %call2) #6, !dbg !4257
  %tobool6 = icmp eq i8 %call5, 0, !dbg !4257
  br i1 %tobool6, label %land.lhs.true, label %if.end13, !dbg !4259

land.lhs.true:                                    ; preds = %if.end
  %call7 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call2) #6, !dbg !4260
  %tobool8 = icmp eq i8 %call7, 0, !dbg !4260
  br i1 %tobool8, label %if.then9, label %if.end13, !dbg !4261

if.then9:                                         ; preds = %land.lhs.true
  %type11 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4262
  %1 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !4262
  %call12 = tail call i32 @estimate_move_cost(%union.tree_node* %1) #7, !dbg !4263
  %add = add i32 %cost.0, %call12, !dbg !4264
  call void @llvm.dbg.value(metadata i32 %add, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %if.end13, !dbg !4265

if.end13:                                         ; preds = %land.lhs.true, %if.end, %if.then9
  %cost.1 = phi i32 [ %cost.0, %if.end ], [ %cost.0, %land.lhs.true ], [ %add, %if.then9 ], !dbg !4266
  call void @llvm.dbg.value(metadata i32 %cost.1, metadata !4225, metadata !DIExpression()), !dbg !4246
  %call14 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !4267
  %call15 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !4268
  %call16 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !4269
  %call17 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call16) #7, !dbg !4270
  %cmp = icmp eq i32 %call17, 1, !dbg !4271
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !4270

cond.true:                                        ; preds = %if.end13
  %call18 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #7, !dbg !4272
  br label %cond.end, !dbg !4270

cond.end:                                         ; preds = %if.end13, %cond.true
  %cond = phi %union.tree_node* [ %call18, %cond.true ], [ null, %if.end13 ], !dbg !4270
  %call19 = tail call fastcc i32 @estimate_operator_cost(i32 %call14, %struct.eni_weights_d* %weights, %union.tree_node* %call15, %union.tree_node* %cond) #7, !dbg !4273
  %add20 = add i32 %cost.1, %call19, !dbg !4274
  call void @llvm.dbg.value(metadata i32 %add20, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %sw.epilog216, !dbg !4275

sw.bb21:                                          ; preds = %entry
  %call22 = tail call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %stmt) #7, !dbg !4276
  %call23 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %stmt, i32 0) #7, !dbg !4277
  %call24 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %stmt, i32 1) #7, !dbg !4278
  %call25 = tail call fastcc i32 @estimate_operator_cost(i32 %call22, %struct.eni_weights_d* %weights, %union.tree_node* %call23, %union.tree_node* %call24) #7, !dbg !4279
  %add26 = add nsw i32 %call25, 1, !dbg !4280
  call void @llvm.dbg.value(metadata i32 %add26, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %sw.epilog216, !dbg !4281

sw.bb27:                                          ; preds = %entry
  %time_based = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %weights, i64 0, i32 4, !dbg !4282
  %2 = load i8, i8* %time_based, align 4, !dbg !4282
  %tobool28 = icmp eq i8 %2, 0, !dbg !4284
  %call30 = tail call fastcc i32 @gimple_switch_num_labels(%union.gimple_statement_d* %stmt) #7, !dbg !4285
  br i1 %tobool28, label %if.else32, label %if.then29, !dbg !4286

if.then29:                                        ; preds = %sw.bb27
  %conv = zext i32 %call30 to i64, !dbg !4287
  %call31 = tail call i32 @floor_log2(i64 %conv) #6, !dbg !4288
  %mul = shl nsw i32 %call31, 1, !dbg !4289
  call void @llvm.dbg.value(metadata i32 %mul, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %sw.epilog216, !dbg !4290

if.else32:                                        ; preds = %sw.bb27
  %mul34 = shl i32 %call30, 1, !dbg !4291
  call void @llvm.dbg.value(metadata i32 %mul34, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %sw.epilog216

sw.bb36:                                          ; preds = %entry
  %call37 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %stmt) #7, !dbg !4292
  call void @llvm.dbg.value(metadata %union.tree_node* %call37, metadata !4230, metadata !DIExpression()), !dbg !4293
  %call38 = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %stmt) #7, !dbg !4294
  call void @llvm.dbg.value(metadata %union.tree_node* %call38, metadata !4233, metadata !DIExpression()), !dbg !4293
  %type40 = getelementptr inbounds %union.tree_node, %union.tree_node* %call38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4295
  %3 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !4295
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !4234, metadata !DIExpression()), !dbg !4293
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4296
  %bf.load = load i64, i64* %4, align 8, !dbg !4296
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !4296
  %cmp41 = icmp eq i64 %bf.cast2, 10, !dbg !4296
  br i1 %cmp41, label %if.then49, label %lor.lhs.false, !dbg !4296

lor.lhs.false:                                    ; preds = %sw.bb36
  %cmp47 = icmp eq i64 %bf.cast2, 12, !dbg !4296
  br i1 %cmp47, label %if.then49, label %if.end52, !dbg !4298

if.then49:                                        ; preds = %lor.lhs.false, %sw.bb36
  %type51 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4299
  %5 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !4299
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !4234, metadata !DIExpression()), !dbg !4293
  br label %if.end52, !dbg !4300

if.end52:                                         ; preds = %if.then49, %lor.lhs.false
  %funtype.0 = phi %union.tree_node* [ %5, %if.then49 ], [ %3, %lor.lhs.false ], !dbg !4293
  call void @llvm.dbg.value(metadata %union.tree_node* %funtype.0, metadata !4234, metadata !DIExpression()), !dbg !4293
  %tobool53 = icmp eq %union.tree_node* %call37, null, !dbg !4301
  br i1 %tobool53, label %if.else60, label %land.lhs.true54, !dbg !4303

land.lhs.true54:                                  ; preds = %if.end52
  %built_in_class = getelementptr inbounds %union.tree_node, %union.tree_node* %call37, i64 0, i32 0, i32 5, !dbg !4304
  %bf.load55 = load i32, i32* %built_in_class, align 8, !dbg !4304
  %bf.clear56 = and i32 %bf.load55, 6144, !dbg !4304
  %cmp57 = icmp eq i32 %bf.clear56, 4096, !dbg !4305
  br i1 %cmp57, label %if.then59, label %if.else60, !dbg !4306

if.then59:                                        ; preds = %land.lhs.true54
  %target_builtin_call_cost = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %weights, i64 0, i32 1, !dbg !4307
  br label %if.end61, !dbg !4308

if.else60:                                        ; preds = %if.end52, %land.lhs.true54
  %call_cost = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %weights, i64 0, i32 0, !dbg !4309
  br label %if.end61

if.end61:                                         ; preds = %if.else60, %if.then59
  %cost.3.in = phi i32* [ %target_builtin_call_cost, %if.then59 ], [ %call_cost, %if.else60 ]
  %cost.3 = load i32, i32* %cost.3.in, align 4, !dbg !4310
  call void @llvm.dbg.value(metadata i32 %cost.3, metadata !4225, metadata !DIExpression()), !dbg !4246
  br i1 %tobool53, label %if.end80, label %land.lhs.true63, !dbg !4311

land.lhs.true63:                                  ; preds = %if.end61
  %built_in_class65 = getelementptr inbounds %union.tree_node, %union.tree_node* %call37, i64 0, i32 0, i32 5, !dbg !4313
  %bf.load66 = load i32, i32* %built_in_class65, align 8, !dbg !4313
  %bf.clear68 = and i32 %bf.load66, 6144, !dbg !4313
  %cmp69 = icmp eq i32 %bf.clear68, 6144, !dbg !4314
  br i1 %cmp69, label %if.then71, label %if.end80, !dbg !4315

if.then71:                                        ; preds = %land.lhs.true63
  %bf.clear74 = and i32 %bf.load66, 2047, !dbg !4316
  switch i32 %bf.clear74, label %if.end80 [
    i32 428, label %cleanup
    i32 446, label %cleanup
    i32 501, label %sw.bb77
    i32 553, label %cleanup
    i32 552, label %cleanup
    i32 554, label %cleanup
  ], !dbg !4317

sw.bb77:                                          ; preds = %if.then71
  %target_builtin_call_cost78 = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %weights, i64 0, i32 1, !dbg !4318
  %6 = load i32, i32* %target_builtin_call_cost78, align 4, !dbg !4318
  call void @llvm.dbg.value(metadata i32 %6, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %if.end80, !dbg !4320

if.end80:                                         ; preds = %if.end61, %sw.bb77, %if.then71, %land.lhs.true63
  %cost.5 = phi i32 [ %cost.3, %land.lhs.true63 ], [ %cost.3, %if.end61 ], [ %6, %sw.bb77 ], [ %cost.3, %if.then71 ], !dbg !4321
  call void @llvm.dbg.value(metadata i32 %cost.5, metadata !4225, metadata !DIExpression()), !dbg !4246
  br i1 %tobool53, label %if.end85, label %if.then82, !dbg !4322

if.then82:                                        ; preds = %if.end80
  %type84 = getelementptr inbounds %union.tree_node, %union.tree_node* %call37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4323
  %7 = load %union.tree_node*, %union.tree_node** %type84, align 8, !dbg !4323
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !4234, metadata !DIExpression()), !dbg !4293
  br label %if.end85, !dbg !4325

if.end85:                                         ; preds = %if.end80, %if.then82
  %funtype.1 = phi %union.tree_node* [ %7, %if.then82 ], [ %funtype.0, %if.end80 ], !dbg !4293
  call void @llvm.dbg.value(metadata %union.tree_node* %funtype.1, metadata !4234, metadata !DIExpression()), !dbg !4293
  %type87 = getelementptr inbounds %union.tree_node, %union.tree_node* %funtype.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4326
  %8 = bitcast %union.tree_node** %type87 to i64**, !dbg !4326
  %9 = load i64*, i64** %8, align 8, !dbg !4326
  %bf.load89 = load i64, i64* %9, align 8, !dbg !4326
  %bf.cast914 = and i64 %bf.load89, 65535, !dbg !4326
  %cmp92 = icmp eq i64 %bf.cast914, 19, !dbg !4326
  br i1 %cmp92, label %if.end99, label %if.then94, !dbg !4328

if.then94:                                        ; preds = %if.end85
  %10 = bitcast i64* %9 to %union.tree_node*, !dbg !4328
  %call97 = tail call i32 @estimate_move_cost(%union.tree_node* %10) #7, !dbg !4329
  %add98 = add i32 %cost.5, %call97, !dbg !4330
  call void @llvm.dbg.value(metadata i32 %add98, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %if.end99, !dbg !4331

if.end99:                                         ; preds = %if.then94, %if.end85
  %cost.6 = phi i32 [ %cost.5, %if.end85 ], [ %add98, %if.then94 ], !dbg !4293
  call void @llvm.dbg.value(metadata i32 %cost.6, metadata !4225, metadata !DIExpression()), !dbg !4246
  br i1 %tobool53, label %if.else122, label %land.lhs.true101, !dbg !4332

land.lhs.true101:                                 ; preds = %if.end99
  %arguments = getelementptr inbounds %union.tree_node, %union.tree_node* %call37, i64 0, i32 0, i32 0, i32 2, !dbg !4333
  %11 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !4333
  %tobool102 = icmp eq %union.tree_node* %11, null, !dbg !4333
  br i1 %tobool102, label %if.else122, label %if.then103, !dbg !4334

if.then103:                                       ; preds = %land.lhs.true101
  br label %for.cond, !dbg !4335

for.cond:                                         ; preds = %for.inc, %if.then103
  %arg.0 = phi %union.tree_node* [ %11, %if.then103 ], [ %arg.0.pre, %for.inc ], !dbg !4337
  %cost.7 = phi i32 [ %cost.6, %if.then103 ], [ %cost.8, %for.inc ], !dbg !4321
  call void @llvm.dbg.value(metadata %union.tree_node* %arg.0, metadata !4235, metadata !DIExpression()), !dbg !4338
  call void @llvm.dbg.value(metadata i32 %cost.7, metadata !4225, metadata !DIExpression()), !dbg !4246
  %tobool106 = icmp eq %union.tree_node* %arg.0, null, !dbg !4339
  br i1 %tobool106, label %cleanup.loopexit9, label %for.body, !dbg !4339

for.body:                                         ; preds = %for.cond
  %type108 = getelementptr inbounds %union.tree_node, %union.tree_node* %arg.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4340
  %12 = bitcast %union.tree_node** %type108 to i64**, !dbg !4340
  %13 = load i64*, i64** %12, align 8, !dbg !4340
  %bf.load110 = load i64, i64* %13, align 8, !dbg !4340
  %bf.cast1127 = and i64 %bf.load110, 65535, !dbg !4340
  %cmp113 = icmp eq i64 %bf.cast1127, 19, !dbg !4340
  br i1 %cmp113, label %for.inc, label %if.then115, !dbg !4343

if.then115:                                       ; preds = %for.body
  %14 = bitcast i64* %13 to %union.tree_node*, !dbg !4343
  %call118 = tail call i32 @estimate_move_cost(%union.tree_node* %14) #7, !dbg !4344
  %add119 = add i32 %cost.7, %call118, !dbg !4345
  call void @llvm.dbg.value(metadata i32 %add119, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %for.inc, !dbg !4346

for.inc:                                          ; preds = %for.body, %if.then115
  %cost.8 = phi i32 [ %cost.7, %for.body ], [ %add119, %if.then115 ], !dbg !4293
  call void @llvm.dbg.value(metadata i32 %cost.8, metadata !4225, metadata !DIExpression()), !dbg !4246
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %arg.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4347
  %arg.0.pre = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !4337
  br label %for.cond, !dbg !4348, !llvm.loop !4349

if.else122:                                       ; preds = %land.lhs.true101, %if.end99
  %tobool123 = icmp eq %union.tree_node* %funtype.1, null, !dbg !4351
  br i1 %tobool123, label %if.else151, label %land.lhs.true124, !dbg !4352

land.lhs.true124:                                 ; preds = %if.else122
  %call125 = tail call zeroext i8 @prototype_p(%union.tree_node* nonnull %funtype.1) #6, !dbg !4353
  %tobool127 = icmp eq i8 %call125, 0, !dbg !4353
  br i1 %tobool127, label %if.else151, label %if.then128, !dbg !4354

if.then128:                                       ; preds = %land.lhs.true124
  %values = getelementptr inbounds %union.tree_node, %union.tree_node* %funtype.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4355
  %15 = bitcast i32* %values to %union.tree_node**, !dbg !4355
  br label %for.cond130, !dbg !4357

for.cond130:                                      ; preds = %for.inc147, %if.then128
  %cost.9 = phi i32 [ %cost.6, %if.then128 ], [ %cost.10, %for.inc147 ], !dbg !4321
  %t.0.in = phi %union.tree_node** [ %15, %if.then128 ], [ %chain149, %for.inc147 ]
  %t.0 = load %union.tree_node*, %union.tree_node** %t.0.in, align 8, !dbg !4358
  call void @llvm.dbg.value(metadata %union.tree_node* %t.0, metadata !4238, metadata !DIExpression()), !dbg !4359
  call void @llvm.dbg.value(metadata i32 %cost.9, metadata !4225, metadata !DIExpression()), !dbg !4246
  %tobool131 = icmp ne %union.tree_node* %t.0, null, !dbg !4360
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 55), align 8, !dbg !4362
  %cmp132 = icmp ne %union.tree_node* %t.0, %16, !dbg !4362
  %17 = and i1 %cmp132, %tobool131, !dbg !4362
  br i1 %17, label %for.body134, label %cleanup.loopexit8, !dbg !4363

for.body134:                                      ; preds = %for.cond130
  %18 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4364
  %19 = bitcast %union.tree_node** %18 to i64**, !dbg !4364
  %20 = load i64*, i64** %19, align 8, !dbg !4364
  %bf.load136 = load i64, i64* %20, align 8, !dbg !4364
  %bf.cast1386 = and i64 %bf.load136, 65535, !dbg !4364
  %cmp139 = icmp eq i64 %bf.cast1386, 19, !dbg !4364
  br i1 %cmp139, label %for.inc147, label %if.then141, !dbg !4366

if.then141:                                       ; preds = %for.body134
  %21 = bitcast i64* %20 to %union.tree_node*, !dbg !4366
  %call144 = tail call i32 @estimate_move_cost(%union.tree_node* %21) #7, !dbg !4367
  %add145 = add i32 %cost.9, %call144, !dbg !4368
  call void @llvm.dbg.value(metadata i32 %add145, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %for.inc147, !dbg !4369

for.inc147:                                       ; preds = %for.body134, %if.then141
  %cost.10 = phi i32 [ %cost.9, %for.body134 ], [ %add145, %if.then141 ], !dbg !4293
  call void @llvm.dbg.value(metadata i32 %cost.10, metadata !4225, metadata !DIExpression()), !dbg !4246
  %chain149 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4370
  br label %for.cond130, !dbg !4371, !llvm.loop !4372

if.else151:                                       ; preds = %land.lhs.true124, %if.else122
  call void @llvm.dbg.value(metadata i32 0, metadata !4226, metadata !DIExpression()), !dbg !4246
  br label %for.cond152, !dbg !4374

for.cond152:                                      ; preds = %for.inc173, %if.else151
  %i.0 = phi i32 [ 0, %if.else151 ], [ %inc, %for.inc173 ], !dbg !4375
  %cost.11 = phi i32 [ %cost.6, %if.else151 ], [ %cost.12, %for.inc173 ], !dbg !4321
  call void @llvm.dbg.value(metadata i32 %cost.11, metadata !4225, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !4226, metadata !DIExpression()), !dbg !4246
  %call153 = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #7, !dbg !4376
  %cmp154 = icmp ult i32 %i.0, %call153, !dbg !4377
  br i1 %cmp154, label %for.body156, label %cleanup.loopexit, !dbg !4378

for.body156:                                      ; preds = %for.cond152
  %call158 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %stmt, i32 %i.0) #7, !dbg !4379
  call void @llvm.dbg.value(metadata %union.tree_node* %call158, metadata !4241, metadata !DIExpression()), !dbg !4380
  %type160 = getelementptr inbounds %union.tree_node, %union.tree_node* %call158, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4381
  %22 = bitcast %union.tree_node** %type160 to i64**, !dbg !4381
  %23 = load i64*, i64** %22, align 8, !dbg !4381
  %bf.load162 = load i64, i64* %23, align 8, !dbg !4381
  %bf.cast1645 = and i64 %bf.load162, 65535, !dbg !4381
  %cmp165 = icmp eq i64 %bf.cast1645, 19, !dbg !4381
  br i1 %cmp165, label %for.inc173, label %if.then167, !dbg !4383

if.then167:                                       ; preds = %for.body156
  %24 = bitcast i64* %23 to %union.tree_node*, !dbg !4383
  %call170 = tail call i32 @estimate_move_cost(%union.tree_node* %24) #7, !dbg !4384
  %add171 = add i32 %cost.11, %call170, !dbg !4385
  call void @llvm.dbg.value(metadata i32 %add171, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %for.inc173, !dbg !4386

for.inc173:                                       ; preds = %for.body156, %if.then167
  %cost.12 = phi i32 [ %cost.11, %for.body156 ], [ %add171, %if.then167 ], !dbg !4293
  call void @llvm.dbg.value(metadata i32 %cost.12, metadata !4225, metadata !DIExpression()), !dbg !4246
  %inc = add i32 %i.0, 1, !dbg !4387
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4226, metadata !DIExpression()), !dbg !4246
  br label %for.cond152, !dbg !4388, !llvm.loop !4389

cleanup.loopexit:                                 ; preds = %for.cond152
  %cost.11.lcssa = phi i32 [ %cost.11, %for.cond152 ], !dbg !4321
  call void @llvm.dbg.value(metadata i32 %cost.11.lcssa, metadata !4225, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.value(metadata i32 %cost.11.lcssa, metadata !4225, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.value(metadata i32 %cost.11.lcssa, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %cleanup

cleanup.loopexit8:                                ; preds = %for.cond130
  %cost.9.lcssa = phi i32 [ %cost.9, %for.cond130 ], !dbg !4321
  call void @llvm.dbg.value(metadata i32 %cost.9.lcssa, metadata !4225, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.value(metadata i32 %cost.9.lcssa, metadata !4225, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.value(metadata i32 %cost.9.lcssa, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %cleanup

cleanup.loopexit9:                                ; preds = %for.cond
  %cost.7.lcssa = phi i32 [ %cost.7, %for.cond ], !dbg !4321
  call void @llvm.dbg.value(metadata i32 %cost.7.lcssa, metadata !4225, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.value(metadata i32 %cost.7.lcssa, metadata !4225, metadata !DIExpression()), !dbg !4246
  call void @llvm.dbg.value(metadata i32 %cost.7.lcssa, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit9, %cleanup.loopexit8, %cleanup.loopexit, %if.then71, %if.then71, %if.then71, %if.then71, %if.then71
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then71 ], [ false, %if.then71 ], [ false, %if.then71 ], [ false, %if.then71 ], [ false, %if.then71 ], [ true, %cleanup.loopexit ], [ true, %cleanup.loopexit8 ], [ true, %cleanup.loopexit9 ]
  %cost.15 = phi i32 [ %cost.3, %if.then71 ], [ %cost.3, %if.then71 ], [ %cost.3, %if.then71 ], [ %cost.3, %if.then71 ], [ %cost.3, %if.then71 ], [ %cost.11.lcssa, %cleanup.loopexit ], [ %cost.9.lcssa, %cleanup.loopexit8 ], [ %cost.7.lcssa, %cleanup.loopexit9 ], !dbg !4321
  call void @llvm.dbg.value(metadata i32 %cost.15, metadata !4225, metadata !DIExpression()), !dbg !4246
  br i1 %cleanup.dest.slot.0, label %sw.epilog216, label %cleanup217

sw.bb180:                                         ; preds = %entry
  %call181 = tail call fastcc i8* @gimple_asm_string(%union.gimple_statement_d* %stmt) #7, !dbg !4391
  %call182 = tail call i32 @asm_str_count(i8* %call181) #6, !dbg !4392
  br label %cleanup217, !dbg !4393

sw.bb183:                                         ; preds = %entry
  br label %cleanup217, !dbg !4394

sw.bb184:                                         ; preds = %entry
  br label %cleanup217, !dbg !4395

sw.bb185:                                         ; preds = %entry
  %call186 = tail call fastcc %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %stmt) #7, !dbg !4396
  %call187 = tail call fastcc i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call186, %struct.eni_weights_d* %weights) #7, !dbg !4397
  br label %cleanup217, !dbg !4398

sw.bb188:                                         ; preds = %entry
  %call189 = tail call fastcc %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %stmt) #7, !dbg !4399
  %call190 = tail call fastcc i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call189, %struct.eni_weights_d* %weights) #7, !dbg !4400
  br label %cleanup217, !dbg !4401

sw.bb191:                                         ; preds = %entry
  %call192 = tail call fastcc %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %stmt) #7, !dbg !4402
  %call193 = tail call fastcc i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call192, %struct.eni_weights_d* %weights) #7, !dbg !4403
  br label %cleanup217, !dbg !4404

sw.bb194:                                         ; preds = %entry
  %call195 = tail call fastcc %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %stmt) #7, !dbg !4405
  %call196 = tail call fastcc i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call195, %struct.eni_weights_d* %weights) #7, !dbg !4406
  %call197 = tail call fastcc %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %stmt) #7, !dbg !4407
  %call198 = tail call fastcc i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call197, %struct.eni_weights_d* %weights) #7, !dbg !4408
  %add199 = add nsw i32 %call196, %call198, !dbg !4409
  br label %cleanup217, !dbg !4410

sw.bb201:                                         ; preds = %entry
  %omp_cost = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %weights, i64 0, i32 3, !dbg !4411
  %25 = load i32, i32* %omp_cost, align 4, !dbg !4411
  br label %cleanup217, !dbg !4412

sw.bb202:                                         ; preds = %entry
  %omp_cost203 = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %weights, i64 0, i32 3, !dbg !4413
  %26 = load i32, i32* %omp_cost203, align 4, !dbg !4413
  %call204 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !4414
  %call205 = tail call fastcc i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call204, %struct.eni_weights_d* %weights) #7, !dbg !4415
  %add206 = add i32 %26, %call205, !dbg !4416
  %call207 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %stmt) #7, !dbg !4417
  %call208 = tail call fastcc i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call207, %struct.eni_weights_d* %weights) #7, !dbg !4418
  %add209 = add i32 %add206, %call208, !dbg !4419
  br label %cleanup217, !dbg !4420

sw.bb210:                                         ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %omp_cost211 = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %weights, i64 0, i32 3, !dbg !4421
  %27 = load i32, i32* %omp_cost211, align 4, !dbg !4421
  %call212 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #7, !dbg !4422
  %call213 = tail call fastcc i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %call212, %struct.eni_weights_d* %weights) #7, !dbg !4423
  %add214 = add i32 %27, %call213, !dbg !4424
  br label %cleanup217, !dbg !4425

sw.default215:                                    ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3378, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !4426
  br label %sw.epilog216, !dbg !4427

sw.epilog216:                                     ; preds = %if.then29, %if.else32, %cleanup, %sw.default215, %sw.bb21, %cond.end
  %cost.16 = phi i32 [ undef, %sw.default215 ], [ %cost.15, %cleanup ], [ %add26, %sw.bb21 ], [ %add20, %cond.end ], [ %mul, %if.then29 ], [ %mul34, %if.else32 ]
  call void @llvm.dbg.value(metadata i32 %cost.16, metadata !4225, metadata !DIExpression()), !dbg !4246
  br label %cleanup217, !dbg !4428

cleanup217:                                       ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %cleanup, %sw.epilog216, %sw.bb210, %sw.bb202, %sw.bb201, %sw.bb194, %sw.bb191, %sw.bb188, %sw.bb185, %sw.bb184, %sw.bb183, %sw.bb180
  %retval.1 = phi i32 [ %cost.16, %sw.epilog216 ], [ %add214, %sw.bb210 ], [ %add209, %sw.bb202 ], [ %25, %sw.bb201 ], [ %add199, %sw.bb194 ], [ %call193, %sw.bb191 ], [ %call190, %sw.bb188 ], [ %call187, %sw.bb185 ], [ 10, %sw.bb184 ], [ 2, %sw.bb183 ], [ %call182, %sw.bb180 ], [ 0, %cleanup ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ]
  ret i32 %retval.1, !dbg !4429
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_code(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4430 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4435, metadata !DIExpression()), !dbg !4436
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 0, !dbg !4437
  %bf.load = load i32, i32* %0, align 8, !dbg !4437
  %bf.clear = and i32 %bf.load, 255, !dbg !4437
  ret i32 %bf.clear, !dbg !4438
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4439 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4443, metadata !DIExpression()), !dbg !4444
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !4445
  ret %union.tree_node* %call, !dbg !4446
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4447 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4449, metadata !DIExpression()), !dbg !4450
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #7, !dbg !4451
  ret %union.tree_node* %call, !dbg !4452
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc i32 @estimate_operator_cost(i32 %code, %struct.eni_weights_d* %weights, %union.tree_node* %op1, %union.tree_node* %op2) unnamed_addr #5 !dbg !4453 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !4457, metadata !DIExpression()), !dbg !4461
  call void @llvm.dbg.value(metadata %struct.eni_weights_d* %weights, metadata !4458, metadata !DIExpression()), !dbg !4461
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !4459, metadata !DIExpression()), !dbg !4461
  call void @llvm.dbg.value(metadata %union.tree_node* %op2, metadata !4460, metadata !DIExpression()), !dbg !4461
  switch i32 %code, label %sw.default [
    i32 111, label %return
    i32 116, label %return
    i32 113, label %return
    i32 123, label %return
    i32 112, label %return
    i32 56, label %sw.bb1
    i32 57, label %sw.bb1
    i32 63, label %sw.bb1
    i32 66, label %sw.bb1
    i32 64, label %sw.bb1
    i32 65, label %sw.bb1
    i32 114, label %sw.bb1
    i32 115, label %sw.bb1
    i32 77, label %sw.bb1
    i32 79, label %sw.bb1
    i32 78, label %sw.bb1
    i32 80, label %sw.bb1
    i32 81, label %sw.bb1
    i32 82, label %sw.bb1
    i32 83, label %sw.bb1
    i32 84, label %sw.bb1
    i32 85, label %sw.bb1
    i32 86, label %sw.bb1
    i32 170, label %sw.bb1
    i32 171, label %sw.bb1
    i32 87, label %sw.bb1
    i32 88, label %sw.bb1
    i32 89, label %sw.bb1
    i32 90, label %sw.bb1
    i32 91, label %sw.bb1
    i32 92, label %sw.bb1
    i32 93, label %sw.bb1
    i32 94, label %sw.bb1
    i32 95, label %sw.bb1
    i32 96, label %sw.bb1
    i32 97, label %sw.bb1
    i32 98, label %sw.bb1
    i32 99, label %sw.bb1
    i32 100, label %sw.bb1
    i32 101, label %sw.bb1
    i32 102, label %sw.bb1
    i32 104, label %sw.bb1
    i32 103, label %sw.bb1
    i32 105, label %sw.bb1
    i32 106, label %sw.bb1
    i32 107, label %sw.bb1
    i32 108, label %sw.bb1
    i32 109, label %sw.bb1
    i32 110, label %sw.bb1
    i32 124, label %sw.bb1
    i32 125, label %sw.bb1
    i32 126, label %sw.bb1
    i32 127, label %sw.bb1
    i32 128, label %sw.bb1
    i32 151, label %sw.bb1
    i32 164, label %sw.bb1
    i32 165, label %sw.bb1
    i32 166, label %sw.bb1
    i32 168, label %sw.bb1
    i32 169, label %sw.bb1
    i32 167, label %sw.bb1
    i32 172, label %sw.bb1
    i32 173, label %sw.bb1
    i32 174, label %sw.bb1
    i32 175, label %sw.bb1
    i32 176, label %sw.bb1
    i32 177, label %sw.bb1
    i32 178, label %sw.bb1
    i32 179, label %sw.bb1
    i32 180, label %sw.bb1
    i32 181, label %sw.bb1
    i32 182, label %sw.bb1
    i32 183, label %sw.bb1
    i32 184, label %sw.bb1
    i32 67, label %sw.bb2
    i32 68, label %sw.bb2
    i32 69, label %sw.bb2
    i32 70, label %sw.bb2
    i32 76, label %sw.bb2
    i32 71, label %sw.bb2
    i32 72, label %sw.bb2
    i32 73, label %sw.bb2
    i32 74, label %sw.bb2
    i32 75, label %sw.bb2
  ], !dbg !4462

sw.bb1:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  br label %return, !dbg !4463

sw.bb2:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %op2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4465
  %bf.load = load i64, i64* %0, align 8, !dbg !4465
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4467
  %cmp = icmp eq i64 %bf.cast1, 23, !dbg !4467
  br i1 %cmp, label %return, label %if.then, !dbg !4468

if.then:                                          ; preds = %sw.bb2
  %div_mod_cost = getelementptr inbounds %struct.eni_weights_d, %struct.eni_weights_d* %weights, i64 0, i32 2, !dbg !4469
  %1 = load i32, i32* %div_mod_cost, align 4, !dbg !4469
  br label %return, !dbg !4470

sw.default:                                       ; preds = %entry
  %call = tail call fastcc i32 @get_gimple_rhs_class(i32 %code) #7, !dbg !4471
  %cmp3 = icmp eq i32 %call, 3, !dbg !4471
  br i1 %cmp3, label %return, label %cond.true, !dbg !4471

cond.true:                                        ; preds = %sw.default
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3148, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !4471
  br label %return, !dbg !4471

return:                                           ; preds = %sw.bb2, %cond.true, %sw.default, %entry, %entry, %entry, %entry, %entry, %if.then, %sw.bb1
  %retval.0 = phi i32 [ %1, %if.then ], [ 1, %sw.bb1 ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 0, %entry ], [ 1, %sw.bb2 ], [ 0, %sw.default ], [ 0, %cond.true ], !dbg !4472
  ret i32 %retval.0, !dbg !4473
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4474 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4478, metadata !DIExpression()), !dbg !4480
  %call = tail call fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %gs) #7, !dbg !4481
  call void @llvm.dbg.value(metadata i32 %call, metadata !4479, metadata !DIExpression()), !dbg !4480
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #7, !dbg !4482
  %cmp = icmp eq i32 %call1, 3, !dbg !4484
  br i1 %cmp, label %if.then, label %if.end, !dbg !4485

if.then:                                          ; preds = %entry
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #7, !dbg !4486
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4486
  %bf.load = load i64, i64* %0, align 8, !dbg !4486
  %1 = trunc i64 %bf.load to i32, !dbg !4486
  %bf.cast = and i32 %1, 65535, !dbg !4486
  call void @llvm.dbg.value(metadata i32 %bf.cast, metadata !4479, metadata !DIExpression()), !dbg !4480
  br label %if.end, !dbg !4487

if.end:                                           ; preds = %if.then, %entry
  %code.0 = phi i32 [ %bf.cast, %if.then ], [ %call, %entry ], !dbg !4480
  call void @llvm.dbg.value(metadata i32 %code.0, metadata !4479, metadata !DIExpression()), !dbg !4480
  ret i32 %code.0, !dbg !4488
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @get_gimple_rhs_class(i32 %code) unnamed_addr #0 !dbg !4489 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !4493, metadata !DIExpression()), !dbg !4494
  %idxprom = sext i32 %code to i64, !dbg !4495
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !4495
  %0 = load i8, i8* %arrayidx, align 1, !dbg !4495
  %conv = zext i8 %0 to i32, !dbg !4496
  ret i32 %conv, !dbg !4497
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4498 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4500, metadata !DIExpression()), !dbg !4501
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !4502
  %cmp = icmp ugt i32 %call, 2, !dbg !4504
  br i1 %cmp, label %if.then, label %return, !dbg !4505

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 2) #7, !dbg !4506
  br label %return, !dbg !4507

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %call1, %if.then ], [ null, %entry ], !dbg !4508
  ret %union.tree_node* %retval.0, !dbg !4509
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4510 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4512, metadata !DIExpression()), !dbg !4513
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !4514
  %bf.load = load i32, i32* %0, align 8, !dbg !4514
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4514
  ret i32 %bf.lshr, !dbg !4515
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !4516 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4520, metadata !DIExpression()), !dbg !4522
  call void @llvm.dbg.value(metadata i32 %i, metadata !4521, metadata !DIExpression()), !dbg !4522
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #7, !dbg !4523
  %tobool = icmp eq i8 %call, 0, !dbg !4523
  br i1 %tobool, label %return, label %if.then, !dbg !4525

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #7, !dbg !4526
  %idxprom = zext i32 %i to i64, !dbg !4526
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !4526
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4526
  br label %return, !dbg !4528

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %0, %if.then ], [ null, %entry ], !dbg !4529
  ret %union.tree_node* %retval.0, !dbg !4530
}

declare dso_local i32 @floor_log2(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_switch_num_labels(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4531 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4535, metadata !DIExpression()), !dbg !4537
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !4538
  call void @llvm.dbg.value(metadata i32 %call, metadata !4536, metadata !DIExpression()), !dbg !4537
  %cmp = icmp ugt i32 %call, 1, !dbg !4539
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !4539

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3162, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !4539
  br label %cond.end, !dbg !4539

cond.end:                                         ; preds = %entry, %cond.true
  %sub = add i32 %call, -1, !dbg !4540
  ret i32 %sub, !dbg !4541
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4542 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4544, metadata !DIExpression()), !dbg !4546
  %call = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #7, !dbg !4547
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !4545, metadata !DIExpression()), !dbg !4546
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4548
  %bf.load = load i64, i64* %0, align 8, !dbg !4548
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4550
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !4550
  br i1 %cmp, label %if.then, label %cleanup, !dbg !4551

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4552
  %1 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !4552
  br label %cleanup, !dbg !4553

cleanup:                                          ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %1, %if.then ], [ null, %entry ], !dbg !4546
  ret %union.tree_node* %retval.0, !dbg !4554
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4555 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4557, metadata !DIExpression()), !dbg !4558
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #7, !dbg !4559
  ret %union.tree_node* %call, !dbg !4560
}

declare dso_local zeroext i8 @prototype_p(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4561 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4563, metadata !DIExpression()), !dbg !4565
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !4566
  call void @llvm.dbg.value(metadata i32 %call, metadata !4564, metadata !DIExpression()), !dbg !4565
  %sub = add i32 %call, -3, !dbg !4567
  ret i32 %sub, !dbg !4568
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !4569 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4571, metadata !DIExpression()), !dbg !4573
  call void @llvm.dbg.value(metadata i32 %index, metadata !4572, metadata !DIExpression()), !dbg !4573
  %add = add i32 %index, 3, !dbg !4574
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %add) #7, !dbg !4575
  ret %union.tree_node* %call, !dbg !4576
}

declare dso_local i32 @asm_str_count(i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8* @gimple_asm_string(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4577 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4581, metadata !DIExpression()), !dbg !4582
  %string = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 2, !dbg !4583
  %0 = bitcast %union.anon* %string to i8**, !dbg !4583
  %1 = load i8*, i8** %0, align 8, !dbg !4583
  ret i8* %1, !dbg !4584
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @estimate_num_insns_seq(%struct.gimple_seq_d* %stmts, %struct.eni_weights_d* %weights) unnamed_addr #5 !dbg !4585 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %stmts, metadata !4589, metadata !DIExpression()), !dbg !4593
  call void @llvm.dbg.value(metadata %struct.eni_weights_d* %weights, metadata !4590, metadata !DIExpression()), !dbg !4593
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4594
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4594
  call void @llvm.dbg.value(metadata i32 0, metadata !4591, metadata !DIExpression()), !dbg !4593
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4595
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4595
  call fastcc void @gsi_start(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.gimple_seq_d* %stmts) #7, !dbg !4595
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4595
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4595
  br label %for.cond, !dbg !4597

for.cond:                                         ; preds = %for.body, %entry
  %cost.0 = phi i32 [ 0, %entry ], [ %add, %for.body ], !dbg !4593
  call void @llvm.dbg.value(metadata i32 %cost.0, metadata !4591, metadata !DIExpression()), !dbg !4593
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4592, metadata !DIExpression(DW_OP_deref)), !dbg !4593
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4598
  %tobool = icmp eq i8 %call, 0, !dbg !4600
  br i1 %tobool, label %for.body, label %for.end, !dbg !4601

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4592, metadata !DIExpression(DW_OP_deref)), !dbg !4593
  %call1 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4602
  %call2 = call i32 @estimate_num_insns(%union.gimple_statement_d* %call1, %struct.eni_weights_d* %weights) #7, !dbg !4603
  %add = add nsw i32 %cost.0, %call2, !dbg !4604
  call void @llvm.dbg.value(metadata i32 %add, metadata !4591, metadata !DIExpression()), !dbg !4593
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4592, metadata !DIExpression(DW_OP_deref)), !dbg !4593
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #7, !dbg !4605
  br label %for.cond, !dbg !4606, !llvm.loop !4607

for.end:                                          ; preds = %for.cond
  %cost.0.lcssa = phi i32 [ %cost.0, %for.cond ], !dbg !4593
  call void @llvm.dbg.value(metadata i32 %cost.0.lcssa, metadata !4591, metadata !DIExpression()), !dbg !4593
  call void @llvm.dbg.value(metadata i32 %cost.0.lcssa, metadata !4591, metadata !DIExpression()), !dbg !4593
  call void @llvm.dbg.value(metadata i32 %cost.0.lcssa, metadata !4591, metadata !DIExpression()), !dbg !4593
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4609
  ret i32 %cost.0.lcssa, !dbg !4610
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4611 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4615, metadata !DIExpression()), !dbg !4616
  %body = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !4617
  %0 = bitcast [1 x %struct.phi_arg_d]* %body to %struct.gimple_seq_d**, !dbg !4617
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !4617
  ret %struct.gimple_seq_d* %1, !dbg !4618
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4619 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4621, metadata !DIExpression()), !dbg !4622
  %failure = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !4623
  %0 = bitcast %union.tree_node** %failure to %struct.gimple_seq_d**, !dbg !4623
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !4623
  ret %struct.gimple_seq_d* %1, !dbg !4624
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4625 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4627, metadata !DIExpression()), !dbg !4628
  %handler = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !4629
  %0 = bitcast %union.tree_node** %handler to %struct.gimple_seq_d**, !dbg !4629
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !4629
  ret %struct.gimple_seq_d* %1, !dbg !4630
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4631 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4633, metadata !DIExpression()), !dbg !4634
  %eval = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !4635
  %0 = bitcast i32* %eval to %struct.gimple_seq_d**, !dbg !4635
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !4635
  ret %struct.gimple_seq_d* %1, !dbg !4636
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4637 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4639, metadata !DIExpression()), !dbg !4640
  %cleanup = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !4641
  %0 = bitcast %union.tree_node** %cleanup to %struct.gimple_seq_d**, !dbg !4641
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !4641
  ret %struct.gimple_seq_d* %1, !dbg !4642
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4643 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4645, metadata !DIExpression()), !dbg !4646
  %body = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !4647
  %0 = bitcast i32* %body to %struct.gimple_seq_d**, !dbg !4647
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !4647
  ret %struct.gimple_seq_d* %1, !dbg !4648
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4649 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4651, metadata !DIExpression()), !dbg !4652
  %pre_body = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 2, !dbg !4653
  %0 = bitcast %union.anon* %pre_body to %struct.gimple_seq_d**, !dbg !4653
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !4653
  ret %struct.gimple_seq_d* %1, !dbg !4654
}

; Function Attrs: nounwind uwtable
define dso_local i32 @estimate_num_insns_fn(%union.tree_node* %fndecl, %struct.eni_weights_d* %weights) local_unnamed_addr #5 !dbg !4655 {
entry:
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %fndecl, metadata !4659, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.value(metadata %struct.eni_weights_d* %weights, metadata !4660, metadata !DIExpression()), !dbg !4665
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %fndecl, i64 0, i32 0, i32 1, !dbg !4666
  %0 = load %struct.function*, %struct.function** %f, align 8, !dbg !4666
  call void @llvm.dbg.value(metadata %struct.function* %0, metadata !4661, metadata !DIExpression()), !dbg !4665
  %1 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4667
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4667
  call void @llvm.dbg.value(metadata i32 0, metadata !4664, metadata !DIExpression()), !dbg !4665
  %tobool = icmp eq %struct.function* %0, null, !dbg !4668
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !4668

land.lhs.true:                                    ; preds = %entry
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !4668
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4668
  %tobool1 = icmp eq %struct.control_flow_graph* %2, null, !dbg !4668
  br i1 %tobool1, label %cond.true, label %cond.end, !dbg !4668

cond.true:                                        ; preds = %land.lhs.true, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3396, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !4668
  %cfg2.phi.trans.insert = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !4669
  %.pre = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2.phi.trans.insert, align 8, !dbg !4671
  br label %cond.end, !dbg !4668

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %3 = phi %struct.control_flow_graph* [ %2, %land.lhs.true ], [ %.pre, %cond.true ], !dbg !4671
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !4671
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i64 0, i32 0, !dbg !4671
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4671
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4672
  br label %for.cond, !dbg !4671

for.cond:                                         ; preds = %for.inc9, %cond.end
  %6 = phi %struct.control_flow_graph* [ %3, %cond.end ], [ %.pre1, %for.inc9 ], !dbg !4676
  %.pn = phi %struct.basic_block_def* [ %4, %cond.end ], [ %bb.0, %for.inc9 ]
  %n.0 = phi i32 [ 0, %cond.end ], [ %n.1.lcssa, %for.inc9 ], !dbg !4677
  %bb.0.in = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %.pn, i64 0, i32 6, !dbg !4669
  %bb.0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.0.in, align 8, !dbg !4669
  call void @llvm.dbg.value(metadata i32 %n.0, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !4663, metadata !DIExpression()), !dbg !4665
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i64 0, i32 1, !dbg !4676
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4676
  %cmp = icmp eq %struct.basic_block_def* %bb.0, %7, !dbg !4676
  br i1 %cmp, label %for.end11, label %for.body, !dbg !4671

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #8, !dbg !4678
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb.0) #7, !dbg !4678
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %5, i64 24, i1 false), !dbg !4678
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #8, !dbg !4678
  br label %for.cond4, !dbg !4679

for.cond4:                                        ; preds = %for.body6, %for.body
  %n.1 = phi i32 [ %n.0, %for.body ], [ %add, %for.body6 ], !dbg !4665
  call void @llvm.dbg.value(metadata i32 %n.1, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4662, metadata !DIExpression(DW_OP_deref)), !dbg !4665
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !4680
  %tobool5 = icmp eq i8 %call, 0, !dbg !4682
  br i1 %tobool5, label %for.body6, label %for.inc9, !dbg !4683

for.body6:                                        ; preds = %for.cond4
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4662, metadata !DIExpression(DW_OP_deref)), !dbg !4665
  %call7 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !4684
  %call8 = call i32 @estimate_num_insns(%union.gimple_statement_d* %call7, %struct.eni_weights_d* %weights) #7, !dbg !4685
  %add = add nsw i32 %n.1, %call8, !dbg !4686
  call void @llvm.dbg.value(metadata i32 %add, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4662, metadata !DIExpression(DW_OP_deref)), !dbg !4665
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %bsi) #7, !dbg !4687
  br label %for.cond4, !dbg !4688, !llvm.loop !4689

for.inc9:                                         ; preds = %for.cond4
  %n.1.lcssa = phi i32 [ %n.1, %for.cond4 ], !dbg !4665
  call void @llvm.dbg.value(metadata i32 %n.1.lcssa, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.value(metadata i32 %n.1.lcssa, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.value(metadata i32 %n.1.lcssa, metadata !4664, metadata !DIExpression()), !dbg !4665
  %.pre1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !4676
  br label %for.cond, !dbg !4676, !llvm.loop !4691

for.end11:                                        ; preds = %for.cond
  %n.0.lcssa = phi i32 [ %n.0, %for.cond ], !dbg !4677
  call void @llvm.dbg.value(metadata i32 %n.0.lcssa, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.value(metadata i32 %n.0.lcssa, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.dbg.value(metadata i32 %n.0.lcssa, metadata !4664, metadata !DIExpression()), !dbg !4665
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4693
  ret i32 %n.0.lcssa, !dbg !4694
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) unnamed_addr #0 !dbg !4695 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4699, metadata !DIExpression()), !dbg !4702
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4700, metadata !DIExpression()), !dbg !4703
  %call = tail call fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #7, !dbg !4704
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !4701, metadata !DIExpression()), !dbg !4702
  %call1 = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %call) #7, !dbg !4705
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !4706
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4707
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !4708
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq2, align 8, !dbg !4709
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !4710
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb3, align 8, !dbg !4711
  ret void, !dbg !4712
}

; Function Attrs: nounwind uwtable
define dso_local void @init_inline_once() local_unnamed_addr #5 !dbg !4713 {
entry:
  store i32 1, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i64 0, i32 0), align 4, !dbg !4714
  store i32 1, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i64 0, i32 1), align 4, !dbg !4715
  store i32 1, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i64 0, i32 2), align 4, !dbg !4716
  store i32 40, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i64 0, i32 3), align 4, !dbg !4717
  store i8 0, i8* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_size_weights, i64 0, i32 4), align 4, !dbg !4718
  store i32 10, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i64 0, i32 0), align 4, !dbg !4719
  store i32 10, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i64 0, i32 1), align 4, !dbg !4720
  store i32 10, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i64 0, i32 2), align 4, !dbg !4721
  store i32 40, i32* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i64 0, i32 3), align 4, !dbg !4722
  store i8 1, i8* getelementptr inbounds (%struct.eni_weights_d, %struct.eni_weights_d* @eni_time_weights, i64 0, i32 4), align 4, !dbg !4723
  ret void, !dbg !4724
}

; Function Attrs: nounwind uwtable
define dso_local i32 @count_insns_seq(%struct.gimple_seq_d* %seq, %struct.eni_weights_d* %weights) local_unnamed_addr #5 !dbg !4725 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq, metadata !4727, metadata !DIExpression()), !dbg !4731
  call void @llvm.dbg.value(metadata %struct.eni_weights_d* %weights, metadata !4728, metadata !DIExpression()), !dbg !4731
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4732
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4732
  call void @llvm.dbg.value(metadata i32 0, metadata !4730, metadata !DIExpression()), !dbg !4731
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4733
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4733
  call fastcc void @gsi_start(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.gimple_seq_d* %seq) #7, !dbg !4733
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4733
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4733
  br label %for.cond, !dbg !4735

for.cond:                                         ; preds = %for.body, %entry
  %n.0 = phi i32 [ 0, %entry ], [ %add, %for.body ], !dbg !4731
  call void @llvm.dbg.value(metadata i32 %n.0, metadata !4730, metadata !DIExpression()), !dbg !4731
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4729, metadata !DIExpression(DW_OP_deref)), !dbg !4731
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4736
  %tobool = icmp eq i8 %call, 0, !dbg !4738
  br i1 %tobool, label %for.body, label %for.end, !dbg !4739

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4729, metadata !DIExpression(DW_OP_deref)), !dbg !4731
  %call1 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4740
  %call2 = call i32 @estimate_num_insns(%union.gimple_statement_d* %call1, %struct.eni_weights_d* %weights) #7, !dbg !4741
  %add = add nsw i32 %n.0, %call2, !dbg !4742
  call void @llvm.dbg.value(metadata i32 %add, metadata !4730, metadata !DIExpression()), !dbg !4731
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4729, metadata !DIExpression(DW_OP_deref)), !dbg !4731
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #7, !dbg !4743
  br label %for.cond, !dbg !4744, !llvm.loop !4745

for.end:                                          ; preds = %for.cond
  %n.0.lcssa = phi i32 [ %n.0, %for.cond ], !dbg !4731
  call void @llvm.dbg.value(metadata i32 %n.0.lcssa, metadata !4730, metadata !DIExpression()), !dbg !4731
  call void @llvm.dbg.value(metadata i32 %n.0.lcssa, metadata !4730, metadata !DIExpression()), !dbg !4731
  call void @llvm.dbg.value(metadata i32 %n.0.lcssa, metadata !4730, metadata !DIExpression()), !dbg !4731
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4747
  ret i32 %n.0.lcssa, !dbg !4748
}

; Function Attrs: nounwind uwtable
define dso_local i32 @optimize_inline_calls(%union.tree_node* %fn) local_unnamed_addr #5 !dbg !4749 {
entry:
  %id = alloca %struct.copy_body_data, align 8
  %gctx = alloca %struct.gimplify_ctx, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %fn, metadata !4753, metadata !DIExpression()), !dbg !4773
  %0 = bitcast %struct.copy_body_data* %id to i8*, !dbg !4774
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %0) #8, !dbg !4774
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4775
  %cfg = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, i32 1, !dbg !4775
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4775
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i64 0, i32 3, !dbg !4775
  %3 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !4775
  call void @llvm.dbg.value(metadata i32 %3, metadata !4756, metadata !DIExpression()), !dbg !4773
  %4 = bitcast %struct.gimplify_ctx* %gctx to i8*, !dbg !4776
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %4) #8, !dbg !4776
  %5 = load %struct.diagnostic_context*, %struct.diagnostic_context** @global_dc, align 8, !dbg !4777
  %arrayidx = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %5, i64 0, i32 1, i64 4, !dbg !4777
  %6 = load i32, i32* %arrayidx, align 8, !dbg !4777
  %tobool = icmp eq i32 %6, 0, !dbg !4777
  br i1 %tobool, label %lor.lhs.false, label %cleanup, !dbg !4779

lor.lhs.false:                                    ; preds = %entry
  %arrayidx2 = getelementptr inbounds %struct.diagnostic_context, %struct.diagnostic_context* %5, i64 0, i32 1, i64 5, !dbg !4780
  %7 = load i32, i32* %arrayidx2, align 4, !dbg !4780
  %tobool3 = icmp eq i32 %7, 0, !dbg !4780
  br i1 %tobool3, label %if.end, label %cleanup, !dbg !4781

if.end:                                           ; preds = %lor.lhs.false
  %call = call i8* @memset(i8* nonnull %0, i32 0, i64 152) #6, !dbg !4782
  %call4 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* %fn) #6, !dbg !4783
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 3, !dbg !4784
  store %struct.cgraph_node* %call4, %struct.cgraph_node** %dst_node, align 8, !dbg !4785
  %src_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 2, !dbg !4786
  store %struct.cgraph_node* %call4, %struct.cgraph_node** %src_node, align 8, !dbg !4787
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !4788
  store %union.tree_node* %fn, %union.tree_node** %dst_fn, align 8, !dbg !4789
  %8 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4790
  %tobool5 = icmp eq %union.tree_node* %8, null, !dbg !4790
  br i1 %tobool5, label %if.end8, label %if.then6, !dbg !4792

if.then6:                                         ; preds = %if.end
  %9 = ptrtoint %union.tree_node* %8 to i64, !dbg !4792
  %10 = bitcast %union.tree_node** %dst_fn to i64*, !dbg !4793
  store i64 %9, i64* %10, align 8, !dbg !4793
  br label %if.end8, !dbg !4794

if.end8:                                          ; preds = %if.end, %if.then6
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 7, !dbg !4795
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_maybe_to_var, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !4796
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 12, !dbg !4797
  store i32 0, i32* %transform_call_graph_edges, align 8, !dbg !4798
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 13, !dbg !4799
  store i8 0, i8* %transform_new_cfg, align 4, !dbg !4800
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 14, !dbg !4801
  store i8 1, i8* %transform_return_to_modify, align 1, !dbg !4802
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 18, !dbg !4803
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !4804
  %call9 = call %struct.pointer_set_t* @pointer_set_create() #6, !dbg !4805
  %statements_to_fold = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 19, !dbg !4806
  store %struct.pointer_set_t* %call9, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !4807
  call void @llvm.dbg.value(metadata %struct.gimplify_ctx* %gctx, metadata !4757, metadata !DIExpression(DW_OP_deref)), !dbg !4773
  call void @push_gimplify_context(%struct.gimplify_ctx* nonnull %gctx) #6, !dbg !4808
  call void @free_dominance_info(i32 1) #6, !dbg !4809
  call void @free_dominance_info(i32 2) #6, !dbg !4810
  call void @gimple_register_cfg_hooks() #6, !dbg !4811
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4812
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, i32 1, !dbg !4812
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !4812
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i64 0, i32 0, !dbg !4812
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4812
  br label %for.cond, !dbg !4812

for.cond:                                         ; preds = %for.body, %if.end8
  %14 = phi %struct.control_flow_graph* [ %12, %if.end8 ], [ %.pre1, %for.body ], !dbg !4814
  %.pn = phi %struct.basic_block_def* [ %13, %if.end8 ], [ %bb.0, %for.body ]
  %bb.0.in = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %.pn, i64 0, i32 6, !dbg !4816
  %bb.0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.0.in, align 8, !dbg !4816
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !4755, metadata !DIExpression()), !dbg !4773
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i64 0, i32 1, !dbg !4814
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4814
  %cmp = icmp eq %struct.basic_block_def* %bb.0, %15, !dbg !4814
  br i1 %cmp, label %for.end, label %for.body, !dbg !4812

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !4754, metadata !DIExpression(DW_OP_deref)), !dbg !4773
  %call14 = call fastcc zeroext i8 @gimple_expand_calls_inline(%struct.basic_block_def* %bb.0, %struct.copy_body_data* nonnull %id) #7, !dbg !4817
  %.pre = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4814
  %cfg13.phi.trans.insert = getelementptr inbounds %struct.function, %struct.function* %.pre, i64 0, i32 1, !dbg !4818
  %.pre1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13.phi.trans.insert, align 8, !dbg !4814
  br label %for.cond, !dbg !4814, !llvm.loop !4819

for.end:                                          ; preds = %for.cond
  call void @pop_gimplify_context(%union.gimple_statement_d* null) #6, !dbg !4821
  %16 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !4822
  call fastcc void @fold_marked_statements(i32 %3, %struct.pointer_set_t* %16) #7, !dbg !4823
  %17 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !4824
  call void @pointer_set_destroy(%struct.pointer_set_t* %17) #6, !dbg !4825
  %debug_stmts = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 21, !dbg !4826
  %18 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %debug_stmts, align 8, !dbg !4826
  %tobool18 = icmp eq %struct.VEC_gimple_heap* %18, null, !dbg !4826
  br i1 %tobool18, label %cond.end, label %cond.true, !dbg !4826

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4005, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !4826
  br label %cond.end, !dbg !4826

cond.end:                                         ; preds = %for.end, %cond.true
  call void @compact_blocks() #6, !dbg !4827
  call void @number_blocks(%union.tree_node* %fn) #6, !dbg !4828
  call void @fold_cond_expr_cond() #6, !dbg !4829
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !4754, metadata !DIExpression(DW_OP_deref)), !dbg !4773
  %call19 = call fastcc zeroext i8 @delete_unreachable_blocks_update_callgraph(%struct.copy_body_data* nonnull %id) #7, !dbg !4830
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4831
  %call21 = call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %19) #7, !dbg !4832
  %tobool22 = icmp eq i8 %call21, 0, !dbg !4832
  %or = select i1 %tobool22, i32 2080, i32 34848, !dbg !4833
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4834
  %cfg25 = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, i32 1, !dbg !4834
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg25, align 8, !dbg !4834
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i64 0, i32 7, !dbg !4834
  %22 = load i32, i32* %x_profile_status, align 8, !dbg !4834
  %cmp26 = icmp eq i32 %22, 0, !dbg !4835
  %cond28 = select i1 %cmp26, i32 0, i32 512, !dbg !4834
  %or29 = or i32 %or, %cond28, !dbg !4836
  br label %cleanup, !dbg !4837

cleanup:                                          ; preds = %lor.lhs.false, %entry, %cond.end
  %retval.0 = phi i32 [ %or29, %cond.end ], [ 0, %lor.lhs.false ], [ 0, %entry ], !dbg !4773
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %4) #8, !dbg !4838
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %0) #8, !dbg !4838
  ret i32 %retval.0, !dbg !4838
}

declare dso_local i8* @memset(i8*, i32, i64) local_unnamed_addr #2

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @copy_decl_maybe_to_var(%union.tree_node* %decl, %struct.copy_body_data* %id) #5 !dbg !4839 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !4841, metadata !DIExpression()), !dbg !4843
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !4842, metadata !DIExpression()), !dbg !4843
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4844
  %bf.load = load i64, i64* %0, align 8, !dbg !4844
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4846
  %cmp = icmp eq i64 %bf.cast1, 34, !dbg !4846
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4847

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 36, !dbg !4848
  br i1 %cmp5, label %if.then, label %if.else, !dbg !4849

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call = tail call fastcc %union.tree_node* @copy_decl_to_var(%union.tree_node* %decl, %struct.copy_body_data* %id) #7, !dbg !4850
  br label %return, !dbg !4851

if.else:                                          ; preds = %lor.lhs.false
  %call6 = tail call %union.tree_node* @copy_decl_no_change(%union.tree_node* %decl, %struct.copy_body_data* %id) #7, !dbg !4852
  br label %return, !dbg !4853

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi %union.tree_node* [ %call, %if.then ], [ %call6, %if.else ], !dbg !4854
  ret %union.tree_node* %retval.0, !dbg !4855
}

declare dso_local %struct.pointer_set_t* @pointer_set_create() local_unnamed_addr #2

declare dso_local void @push_gimplify_context(%struct.gimplify_ctx*) local_unnamed_addr #2

declare dso_local void @free_dominance_info(i32) local_unnamed_addr #2

declare dso_local void @gimple_register_cfg_hooks() local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @gimple_expand_calls_inline(%struct.basic_block_def* %bb, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !4856 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4860, metadata !DIExpression()), !dbg !4867
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !4861, metadata !DIExpression()), !dbg !4867
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4868
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4868
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4869
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4869
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb) #7, !dbg !4869
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4869
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4869
  br label %for.cond, !dbg !4870

for.cond:                                         ; preds = %for.inc, %entry
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4862, metadata !DIExpression(DW_OP_deref)), !dbg !4867
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4871
  %tobool = icmp eq i8 %call, 0, !dbg !4872
  br i1 %tobool, label %for.body, label %cleanup7, !dbg !4873

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4862, metadata !DIExpression(DW_OP_deref)), !dbg !4867
  %call1 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4874
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call1, metadata !4863, metadata !DIExpression()), !dbg !4875
  %call2 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %call1) #7, !dbg !4876
  %tobool3 = icmp eq i8 %call2, 0, !dbg !4876
  br i1 %tobool3, label %if.end, label %land.lhs.true, !dbg !4878

land.lhs.true:                                    ; preds = %for.body
  %call4 = call fastcc zeroext i8 @expand_call_inline(%struct.basic_block_def* %bb, %union.gimple_statement_d* %call1, %struct.copy_body_data* %id) #7, !dbg !4879
  %tobool6 = icmp eq i8 %call4, 0, !dbg !4879
  br i1 %tobool6, label %if.end, label %cleanup, !dbg !4880

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %cleanup, !dbg !4881

cleanup:                                          ; preds = %land.lhs.true, %if.end
  %cleanup.dest.slot.0 = phi i1 [ true, %if.end ], [ false, %land.lhs.true ]
  br i1 %cleanup.dest.slot.0, label %for.inc, label %cleanup7

for.inc:                                          ; preds = %cleanup
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4862, metadata !DIExpression(DW_OP_deref)), !dbg !4867
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #7, !dbg !4882
  br label %for.cond, !dbg !4883, !llvm.loop !4884

cleanup7:                                         ; preds = %for.cond, %cleanup
  %retval.2 = phi i8 [ 1, %cleanup ], [ 0, %for.cond ], !dbg !4867
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4886
  ret i8 %retval.2, !dbg !4886
}

declare dso_local void @pop_gimplify_context(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @fold_marked_statements(i32 %first, %struct.pointer_set_t* %statements) unnamed_addr #5 !dbg !4887 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %i2 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp46 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata i32 %first, metadata !4891, metadata !DIExpression()), !dbg !4913
  call void @llvm.dbg.value(metadata %struct.pointer_set_t* %statements, metadata !4892, metadata !DIExpression()), !dbg !4913
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4914
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4915
  %2 = bitcast %struct.gimple_stmt_iterator* %i2 to i8*, !dbg !4916
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp46 to i8*, !dbg !4917
  br label %for.cond, !dbg !4919

for.cond:                                         ; preds = %for.inc121, %entry
  %first.addr.0 = phi i32 [ %first, %entry ], [ %inc, %for.inc121 ]
  call void @llvm.dbg.value(metadata i32 %first.addr.0, metadata !4891, metadata !DIExpression()), !dbg !4913
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4920
  %cfg = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, i32 1, !dbg !4920
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4920
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i64 0, i32 3, !dbg !4920
  %6 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !4920
  %cmp = icmp slt i32 %first.addr.0, %6, !dbg !4921
  br i1 %cmp, label %for.body, label %for.end122, !dbg !4922

for.body:                                         ; preds = %for.cond
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i64 0, i32 2, !dbg !4923
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !4923
  %tobool = icmp eq %struct.VEC_basic_block_gc* %7, null, !dbg !4923
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4923

cond.true:                                        ; preds = %for.body
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %7, i64 0, i32 0, !dbg !4923
  br label %cond.end, !dbg !4923

cond.end:                                         ; preds = %for.body, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %for.body ], !dbg !4923
  %call = call fastcc %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %first.addr.0) #7, !dbg !4923
  %tobool6 = icmp eq %struct.basic_block_def* %call, null, !dbg !4923
  br i1 %tobool6, label %for.inc121, label %if.then, !dbg !4924

if.then:                                          ; preds = %cond.end
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4925
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4926
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4927
  %cfg8 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, i32 1, !dbg !4927
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg8, align 8, !dbg !4927
  %x_basic_block_info9 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i64 0, i32 2, !dbg !4927
  %10 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info9, align 8, !dbg !4927
  %tobool10 = icmp eq %struct.VEC_basic_block_gc* %10, null, !dbg !4927
  br i1 %tobool10, label %cond.end17, label %cond.true11, !dbg !4927

cond.true11:                                      ; preds = %if.then
  %base15 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %10, i64 0, i32 0, !dbg !4927
  br label %cond.end17, !dbg !4927

cond.end17:                                       ; preds = %if.then, %cond.true11
  %cond18 = phi %struct.VEC_basic_block_base* [ %base15, %cond.true11 ], [ null, %if.then ], !dbg !4927
  %call19 = call fastcc %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond18, i32 %first.addr.0) #7, !dbg !4927
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %call19) #7, !dbg !4926
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4926
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4926
  br label %for.cond20, !dbg !4928

for.cond20:                                       ; preds = %for.inc, %cond.end17
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4893, metadata !DIExpression(DW_OP_deref)), !dbg !4914
  %call21 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4929
  %tobool22 = icmp eq i8 %call21, 0, !dbg !4930
  br i1 %tobool22, label %for.body23, label %for.end, !dbg !4931

for.body23:                                       ; preds = %for.cond20
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4893, metadata !DIExpression(DW_OP_deref)), !dbg !4914
  %call24 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4932
  %11 = bitcast %union.gimple_statement_d* %call24 to i8*, !dbg !4932
  %call25 = call i32 @pointer_set_contains(%struct.pointer_set_t* %statements, i8* %11) #6, !dbg !4933
  %tobool26 = icmp eq i32 %call25, 0, !dbg !4933
  br i1 %tobool26, label %for.inc, label %if.then27, !dbg !4934

if.then27:                                        ; preds = %for.body23
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4893, metadata !DIExpression(DW_OP_deref)), !dbg !4914
  %call28 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4935
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call28, metadata !4898, metadata !DIExpression()), !dbg !4936
  %call29 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %call28) #7, !dbg !4937
  %tobool30 = icmp eq i8 %call29, 0, !dbg !4937
  br i1 %tobool30, label %cond.end34, label %cond.true31, !dbg !4937

cond.true31:                                      ; preds = %if.then27
  %call32 = call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %call28) #7, !dbg !4938
  br label %cond.end34, !dbg !4937

cond.end34:                                       ; preds = %if.then27, %cond.true31
  %cond35 = phi %union.tree_node* [ %call32, %cond.true31 ], [ null, %if.then27 ], !dbg !4937
  call void @llvm.dbg.value(metadata %union.tree_node* %cond35, metadata !4903, metadata !DIExpression()), !dbg !4936
  %tobool36 = icmp eq %union.tree_node* %cond35, null, !dbg !4939
  br i1 %tobool36, label %if.else85, label %land.lhs.true, !dbg !4940

land.lhs.true:                                    ; preds = %cond.end34
  %built_in_class = getelementptr inbounds %union.tree_node, %union.tree_node* %cond35, i64 0, i32 0, i32 5, !dbg !4941
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !4941
  %bf.clear = and i32 %bf.load, 6144, !dbg !4941
  %cmp37 = icmp eq i32 %bf.clear, 0, !dbg !4941
  br i1 %cmp37, label %if.else85, label %if.then39, !dbg !4942

if.then39:                                        ; preds = %land.lhs.true
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #8, !dbg !4943
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %0, i64 24, i1 false), !dbg !4944
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i2, metadata !4904, metadata !DIExpression(DW_OP_deref)), !dbg !4916
  call fastcc void @gsi_prev(%struct.gimple_stmt_iterator* nonnull %i2) #7, !dbg !4945
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4893, metadata !DIExpression(DW_OP_deref)), !dbg !4914
  %call40 = call zeroext i8 @fold_stmt(%struct.gimple_stmt_iterator* nonnull %gsi) #6, !dbg !4946
  %tobool41 = icmp eq i8 %call40, 0, !dbg !4946
  br i1 %tobool41, label %if.end84, label %if.then42, !dbg !4947

if.then42:                                        ; preds = %if.then39
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i2, metadata !4904, metadata !DIExpression(DW_OP_deref)), !dbg !4916
  %call43 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %i2) #7, !dbg !4948
  %tobool44 = icmp eq i8 %call43, 0, !dbg !4948
  br i1 %tobool44, label %if.else, label %if.then45, !dbg !4949

if.then45:                                        ; preds = %if.then42
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #8, !dbg !4950
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4951
  %cfg48 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, i32 1, !dbg !4951
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg48, align 8, !dbg !4951
  %x_basic_block_info49 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i64 0, i32 2, !dbg !4951
  %14 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info49, align 8, !dbg !4951
  %tobool50 = icmp eq %struct.VEC_basic_block_gc* %14, null, !dbg !4951
  br i1 %tobool50, label %cond.end57, label %cond.true51, !dbg !4951

cond.true51:                                      ; preds = %if.then45
  %base55 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %14, i64 0, i32 0, !dbg !4951
  br label %cond.end57, !dbg !4951

cond.end57:                                       ; preds = %if.then45, %cond.true51
  %cond58 = phi %struct.VEC_basic_block_base* [ %base55, %cond.true51 ], [ null, %if.then45 ], !dbg !4951
  %call59 = call fastcc %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond58, i32 %first.addr.0) #7, !dbg !4951
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp46, %struct.basic_block_def* %call59) #7, !dbg !4950
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %3, i64 24, i1 false), !dbg !4950
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #8, !dbg !4950
  br label %if.end, !dbg !4952

if.else:                                          ; preds = %if.then42
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i2, metadata !4904, metadata !DIExpression(DW_OP_deref)), !dbg !4916
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %i2) #7, !dbg !4953
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end57
  br label %while.cond, !dbg !4954

while.cond:                                       ; preds = %if.end83, %if.end
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i2, metadata !4904, metadata !DIExpression(DW_OP_deref)), !dbg !4916
  %call60 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %i2) #7, !dbg !4955
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call60, metadata !4907, metadata !DIExpression()), !dbg !4957
  call fastcc void @update_stmt(%union.gimple_statement_d* %call60) #7, !dbg !4958
  call void @cgraph_update_edges_for_call_stmt(%union.gimple_statement_d* %call28, %union.tree_node* nonnull %cond35, %union.gimple_statement_d* %call60) #6, !dbg !4959
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4893, metadata !DIExpression(DW_OP_deref)), !dbg !4914
  %call61 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4960
  %cmp62 = icmp eq %union.gimple_statement_d* %call60, %call61, !dbg !4962
  br i1 %cmp62, label %if.then64, label %if.end83, !dbg !4963

if.then64:                                        ; preds = %while.cond
  %call60.lcssa = phi %union.gimple_statement_d* [ %call60, %while.cond ], !dbg !4955
  %call65 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %call28, %union.gimple_statement_d* %call60.lcssa) #6, !dbg !4964
  %tobool66 = icmp eq i8 %call65, 0, !dbg !4964
  br i1 %tobool66, label %if.end84, label %if.then67, !dbg !4967

if.then67:                                        ; preds = %if.then64
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4968
  %cfg69 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, i32 1, !dbg !4968
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg69, align 8, !dbg !4968
  %x_basic_block_info70 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i64 0, i32 2, !dbg !4968
  %17 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info70, align 8, !dbg !4968
  %tobool71 = icmp eq %struct.VEC_basic_block_gc* %17, null, !dbg !4968
  br i1 %tobool71, label %cond.end78, label %cond.true72, !dbg !4968

cond.true72:                                      ; preds = %if.then67
  %base76 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %17, i64 0, i32 0, !dbg !4968
  br label %cond.end78, !dbg !4968

cond.end78:                                       ; preds = %if.then67, %cond.true72
  %cond79 = phi %struct.VEC_basic_block_base* [ %base76, %cond.true72 ], [ null, %if.then67 ], !dbg !4968
  %call80 = call fastcc %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond79, i32 %first.addr.0) #7, !dbg !4968
  %call81 = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %call80) #6, !dbg !4969
  br label %if.end84, !dbg !4969

if.end83:                                         ; preds = %while.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i2, metadata !4904, metadata !DIExpression(DW_OP_deref)), !dbg !4916
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %i2) #7, !dbg !4970
  br label %while.cond, !dbg !4954, !llvm.loop !4971

if.end84:                                         ; preds = %if.then64, %if.then39, %cond.end78
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #8, !dbg !4973
  br label %for.inc, !dbg !4974

if.else85:                                        ; preds = %land.lhs.true, %cond.end34
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4893, metadata !DIExpression(DW_OP_deref)), !dbg !4914
  %call86 = call zeroext i8 @fold_stmt(%struct.gimple_stmt_iterator* nonnull %gsi) #6, !dbg !4975
  %tobool87 = icmp eq i8 %call86, 0, !dbg !4975
  br i1 %tobool87, label %for.inc, label %if.then88, !dbg !4976

if.then88:                                        ; preds = %if.else85
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4893, metadata !DIExpression(DW_OP_deref)), !dbg !4914
  %call90 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !4977
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call90, metadata !4910, metadata !DIExpression()), !dbg !4978
  call fastcc void @update_stmt(%union.gimple_statement_d* %call90) #7, !dbg !4979
  %call91 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %call28) #7, !dbg !4980
  %tobool93 = icmp eq i8 %call91, 0, !dbg !4980
  br i1 %tobool93, label %lor.lhs.false, label %if.then97, !dbg !4982

lor.lhs.false:                                    ; preds = %if.then88
  %call94 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %call90) #7, !dbg !4983
  %tobool96 = icmp eq i8 %call94, 0, !dbg !4983
  br i1 %tobool96, label %if.end98, label %if.then97, !dbg !4984

if.then97:                                        ; preds = %lor.lhs.false, %if.then88
  call void @cgraph_update_edges_for_call_stmt(%union.gimple_statement_d* %call28, %union.tree_node* %cond35, %union.gimple_statement_d* %call90) #6, !dbg !4985
  br label %if.end98, !dbg !4985

if.end98:                                         ; preds = %lor.lhs.false, %if.then97
  %call99 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %call28, %union.gimple_statement_d* %call90) #6, !dbg !4986
  %tobool100 = icmp eq i8 %call99, 0, !dbg !4986
  br i1 %tobool100, label %for.inc, label %if.then101, !dbg !4988

if.then101:                                       ; preds = %if.end98
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4989
  %cfg103 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, i32 1, !dbg !4989
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg103, align 8, !dbg !4989
  %x_basic_block_info104 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i64 0, i32 2, !dbg !4989
  %20 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info104, align 8, !dbg !4989
  %tobool105 = icmp eq %struct.VEC_basic_block_gc* %20, null, !dbg !4989
  br i1 %tobool105, label %cond.end112, label %cond.true106, !dbg !4989

cond.true106:                                     ; preds = %if.then101
  %base110 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %20, i64 0, i32 0, !dbg !4989
  br label %cond.end112, !dbg !4989

cond.end112:                                      ; preds = %if.then101, %cond.true106
  %cond113 = phi %struct.VEC_basic_block_base* [ %base110, %cond.true106 ], [ null, %if.then101 ], !dbg !4989
  %call114 = call fastcc %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond113, i32 %first.addr.0) #7, !dbg !4989
  %call115 = call zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def* %call114) #6, !dbg !4990
  br label %for.inc, !dbg !4990

for.inc:                                          ; preds = %if.end98, %if.else85, %for.body23, %cond.end112, %if.end84
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4893, metadata !DIExpression(DW_OP_deref)), !dbg !4914
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #7, !dbg !4991
  br label %for.cond20, !dbg !4992, !llvm.loop !4993

for.end:                                          ; preds = %for.cond20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4995
  br label %for.inc121, !dbg !4996

for.inc121:                                       ; preds = %cond.end, %for.end
  %inc = add nsw i32 %first.addr.0, 1, !dbg !4997
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4891, metadata !DIExpression()), !dbg !4913
  br label %for.cond, !dbg !4998, !llvm.loop !4999

for.end122:                                       ; preds = %for.cond
  ret void, !dbg !5001
}

declare dso_local void @pointer_set_destroy(%struct.pointer_set_t*) local_unnamed_addr #2

declare dso_local void @compact_blocks() local_unnamed_addr #2

declare dso_local void @number_blocks(%union.tree_node*) local_unnamed_addr #2

declare dso_local void @fold_cond_expr_cond() local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @delete_unreachable_blocks_update_callgraph(%struct.copy_body_data* %id) unnamed_addr #5 !dbg !5002 {
entry:
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5006, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.value(metadata i8 0, metadata !5007, metadata !DIExpression()), !dbg !5022
  tail call void @find_unreachable_blocks() #6, !dbg !5023
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5024
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !5024
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5024
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i64 0, i32 0, !dbg !5024
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5024
  %next_bb1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i64 0, i32 6, !dbg !5025
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb1, align 8, !dbg !5025
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %3, metadata !5008, metadata !DIExpression()), !dbg !5022
  %4 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !5026
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5027
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 3, !dbg !5028
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 12, !dbg !5030
  br label %for.cond, !dbg !5032

for.cond:                                         ; preds = %for.inc65, %entry
  %.pre2 = phi %struct.function* [ %0, %entry ], [ %.pre, %for.inc65 ]
  %6 = phi %struct.control_flow_graph* [ %1, %entry ], [ %.pre1, %for.inc65 ], !dbg !5033
  %b.0 = phi %struct.basic_block_def* [ %3, %entry ], [ %8, %for.inc65 ], !dbg !5034
  %changed.0 = phi i8 [ 0, %entry ], [ %changed.1, %for.inc65 ], !dbg !5035
  call void @llvm.dbg.value(metadata i8 %changed.0, metadata !5007, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %b.0, metadata !5008, metadata !DIExpression()), !dbg !5022
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i64 0, i32 1, !dbg !5033
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5033
  %cmp = icmp eq %struct.basic_block_def* %b.0, %7, !dbg !5036
  br i1 %cmp, label %for.end66, label %for.body, !dbg !5037

for.body:                                         ; preds = %for.cond
  %next_bb4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %b.0, i64 0, i32 6, !dbg !5038
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb4, align 8, !dbg !5038
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %8, metadata !5009, metadata !DIExpression()), !dbg !5022
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %b.0, i64 0, i32 13, !dbg !5039
  %9 = load i32, i32* %flags, align 8, !dbg !5039
  %and = and i32 %9, 2, !dbg !5040
  %tobool = icmp eq i32 %and, 0, !dbg !5040
  br i1 %tobool, label %if.then, label %for.inc65, !dbg !5041

if.then:                                          ; preds = %for.body
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8, !dbg !5042
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #8, !dbg !5043
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %b.0) #7, !dbg !5043
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* nonnull align 8 %5, i64 24, i1 false), !dbg !5043
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #8, !dbg !5043
  br label %for.cond5, !dbg !5044

for.cond5:                                        ; preds = %for.inc, %if.then
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5010, metadata !DIExpression(DW_OP_deref)), !dbg !5026
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5045
  %tobool6 = icmp eq i8 %call, 0, !dbg !5046
  br i1 %tobool6, label %for.body7, label %for.end63, !dbg !5047

for.body7:                                        ; preds = %for.cond5
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5010, metadata !DIExpression(DW_OP_deref)), !dbg !5026
  %call8 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5048
  %call9 = call fastcc i32 @gimple_code(%union.gimple_statement_d* %call8) #7, !dbg !5049
  %cmp10 = icmp eq i32 %call9, 8, !dbg !5050
  br i1 %cmp10, label %if.then11, label %for.inc, !dbg !5051

if.then11:                                        ; preds = %for.body7
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !5052
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5010, metadata !DIExpression(DW_OP_deref)), !dbg !5026
  %call12 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5053
  %call13 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %10, %union.gimple_statement_d* %call12) #6, !dbg !5054
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %call13, metadata !5016, metadata !DIExpression()), !dbg !5055
  %cmp14 = icmp eq %struct.cgraph_edge* %call13, null, !dbg !5056
  br i1 %cmp14, label %if.end18, label %if.then15, !dbg !5057

if.then15:                                        ; preds = %if.then11
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call13, i64 0, i32 9, !dbg !5058
  %11 = load i32, i32* %inline_failed, align 8, !dbg !5058
  %tobool16 = icmp eq i32 %11, 0, !dbg !5061
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !5062

if.then17:                                        ; preds = %if.then15
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call13, i64 0, i32 2, !dbg !5063
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !5063
  call void @cgraph_remove_node_and_inline_clones(%struct.cgraph_node* %12) #6, !dbg !5064
  br label %if.end18, !dbg !5064

if.else:                                          ; preds = %if.then15
  call void @cgraph_remove_edge(%struct.cgraph_edge* nonnull %call13) #6, !dbg !5065
  br label %if.end18

if.end18:                                         ; preds = %if.then11, %if.then17, %if.else
  %13 = load i32, i32* %transform_call_graph_edges, align 8, !dbg !5066
  %cmp19 = icmp eq i32 %13, 2, !dbg !5067
  br i1 %cmp19, label %land.lhs.true, label %for.inc, !dbg !5068

land.lhs.true:                                    ; preds = %if.end18
  %14 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !5069
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %14, i64 0, i32 11, !dbg !5070
  %15 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !5070
  %tobool21 = icmp eq %struct.cgraph_node* %15, null, !dbg !5071
  br i1 %tobool21, label %for.inc, label %if.then22, !dbg !5072

if.then22:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %15, metadata !5021, metadata !DIExpression()), !dbg !5055
  br label %for.cond25, !dbg !5073

for.cond25:                                       ; preds = %if.end60, %if.then22
  %16 = phi %struct.cgraph_node* [ %14, %if.then22 ], [ %.pre4, %if.end60 ], !dbg !5075
  %node.0 = phi %struct.cgraph_node* [ %15, %if.then22 ], [ %node.4, %if.end60 ], !dbg !5077
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.0, metadata !5021, metadata !DIExpression()), !dbg !5055
  %cmp27 = icmp eq %struct.cgraph_node* %node.0, %16, !dbg !5078
  br i1 %cmp27, label %for.inc.loopexit, label %for.body28, !dbg !5079

for.body28:                                       ; preds = %for.cond25
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5010, metadata !DIExpression(DW_OP_deref)), !dbg !5026
  %call29 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !5080
  %call30 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %node.0, %union.gimple_statement_d* %call29) #6, !dbg !5083
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %call30, metadata !5016, metadata !DIExpression()), !dbg !5055
  %cmp31 = icmp eq %struct.cgraph_edge* %call30, null, !dbg !5084
  br i1 %cmp31, label %if.end39, label %if.then32, !dbg !5085

if.then32:                                        ; preds = %for.body28
  %inline_failed33 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call30, i64 0, i32 9, !dbg !5086
  %17 = load i32, i32* %inline_failed33, align 8, !dbg !5086
  %tobool34 = icmp eq i32 %17, 0, !dbg !5089
  br i1 %tobool34, label %if.then35, label %if.else37, !dbg !5090

if.then35:                                        ; preds = %if.then32
  %callee36 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call30, i64 0, i32 2, !dbg !5091
  %18 = load %struct.cgraph_node*, %struct.cgraph_node** %callee36, align 8, !dbg !5091
  call void @cgraph_remove_node_and_inline_clones(%struct.cgraph_node* %18) #6, !dbg !5092
  br label %if.end39, !dbg !5092

if.else37:                                        ; preds = %if.then32
  call void @cgraph_remove_edge(%struct.cgraph_edge* nonnull %call30) #6, !dbg !5093
  br label %if.end39

if.end39:                                         ; preds = %for.body28, %if.then35, %if.else37
  %clones40 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.0, i64 0, i32 11, !dbg !5094
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %clones40, align 8, !dbg !5094
  %tobool41 = icmp eq %struct.cgraph_node* %19, null, !dbg !5096
  br i1 %tobool41, label %if.else44, label %if.then42, !dbg !5097

if.then42:                                        ; preds = %if.end39
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %19, metadata !5021, metadata !DIExpression()), !dbg !5055
  br label %if.end60, !dbg !5098

if.else44:                                        ; preds = %if.end39
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.0, i64 0, i32 9, !dbg !5099
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !5099
  %tobool45 = icmp eq %struct.cgraph_node* %20, null, !dbg !5101
  br i1 %tobool45, label %while.cond.preheader, label %if.then46, !dbg !5102

while.cond.preheader:                             ; preds = %if.else44
  %21 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !5103
  br label %while.cond, !dbg !5105

if.then46:                                        ; preds = %if.else44
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %20, metadata !5021, metadata !DIExpression()), !dbg !5055
  br label %if.end60, !dbg !5106

while.cond:                                       ; preds = %while.cond.preheader, %while.body
  %node.1 = phi %struct.cgraph_node* [ %23, %while.body ], [ %node.0, %while.cond.preheader ], !dbg !5077
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1, metadata !5021, metadata !DIExpression()), !dbg !5055
  %cmp50 = icmp eq %struct.cgraph_node* %node.1, %21, !dbg !5107
  br i1 %cmp50, label %while.end, label %land.rhs, !dbg !5108

land.rhs:                                         ; preds = %while.cond
  %next_sibling_clone51 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.1, i64 0, i32 9, !dbg !5109
  %22 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone51, align 8, !dbg !5109
  %tobool52 = icmp eq %struct.cgraph_node* %22, null, !dbg !5110
  br i1 %tobool52, label %while.body, label %while.end, !dbg !5105

while.body:                                       ; preds = %land.rhs
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.1, i64 0, i32 12, !dbg !5111
  %23 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !5111
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %23, metadata !5021, metadata !DIExpression()), !dbg !5055
  br label %while.cond, !dbg !5105, !llvm.loop !5112

while.end:                                        ; preds = %while.cond, %land.rhs
  %node.1.lcssa = phi %struct.cgraph_node* [ %node.1, %while.cond ], [ %node.1, %land.rhs ], !dbg !5077
  %cmp50.lcssa = phi i1 [ %cmp50, %while.cond ], [ %cmp50, %land.rhs ], !dbg !5107
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !5021, metadata !DIExpression()), !dbg !5055
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !5021, metadata !DIExpression()), !dbg !5055
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !5021, metadata !DIExpression()), !dbg !5055
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !5021, metadata !DIExpression()), !dbg !5055
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !5021, metadata !DIExpression()), !dbg !5055
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !5021, metadata !DIExpression()), !dbg !5055
  br i1 %cmp50.lcssa, label %if.end60, label %if.then56, !dbg !5113

if.then56:                                        ; preds = %while.end
  %next_sibling_clone57 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.1.lcssa, i64 0, i32 9, !dbg !5114
  %24 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone57, align 8, !dbg !5114
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %24, metadata !5021, metadata !DIExpression()), !dbg !5055
  br label %if.end60, !dbg !5116

if.end60:                                         ; preds = %while.end, %if.then46, %if.then56, %if.then42
  %node.4 = phi %struct.cgraph_node* [ %19, %if.then42 ], [ %20, %if.then46 ], [ %24, %if.then56 ], [ %21, %while.end ], !dbg !5117
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.4, metadata !5021, metadata !DIExpression()), !dbg !5055
  %.pre4 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !5075
  br label %for.cond25, !dbg !5118, !llvm.loop !5119

for.inc.loopexit:                                 ; preds = %for.cond25
  br label %for.inc, !dbg !5121

for.inc:                                          ; preds = %for.inc.loopexit, %land.lhs.true, %for.body7, %if.end18
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !5010, metadata !DIExpression(DW_OP_deref)), !dbg !5026
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %bsi) #7, !dbg !5121
  br label %for.cond5, !dbg !5122, !llvm.loop !5123

for.end63:                                        ; preds = %for.cond5
  call void @delete_basic_block(%struct.basic_block_def* %b.0) #6, !dbg !5125
  call void @llvm.dbg.value(metadata i8 1, metadata !5007, metadata !DIExpression()), !dbg !5022
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8, !dbg !5126
  %.pre.pre = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5033
  br label %for.inc65, !dbg !5127

for.inc65:                                        ; preds = %for.body, %for.end63
  %.pre = phi %struct.function* [ %.pre2, %for.body ], [ %.pre.pre, %for.end63 ], !dbg !5033
  %changed.1 = phi i8 [ %changed.0, %for.body ], [ 1, %for.end63 ], !dbg !5022
  call void @llvm.dbg.value(metadata i8 %changed.1, metadata !5007, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %8, metadata !5008, metadata !DIExpression()), !dbg !5022
  %cfg3.phi.trans.insert = getelementptr inbounds %struct.function, %struct.function* %.pre, i64 0, i32 1, !dbg !5128
  %.pre1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3.phi.trans.insert, align 8, !dbg !5033
  br label %for.cond, !dbg !5129, !llvm.loop !5130

for.end66:                                        ; preds = %for.cond
  %changed.0.lcssa = phi i8 [ %changed.0, %for.cond ], !dbg !5035
  call void @llvm.dbg.value(metadata i8 %changed.0.lcssa, metadata !5007, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.value(metadata i8 %changed.0.lcssa, metadata !5007, metadata !DIExpression()), !dbg !5022
  call void @llvm.dbg.value(metadata i8 %changed.0.lcssa, metadata !5007, metadata !DIExpression()), !dbg !5022
  %tobool67 = icmp eq i8 %changed.0.lcssa, 0, !dbg !5132
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !5134

if.then68:                                        ; preds = %for.end66
  call void @tidy_fallthru_edges() #6, !dbg !5135
  br label %if.end69, !dbg !5135

if.end69:                                         ; preds = %for.end66, %if.then68
  ret i8 %changed.0.lcssa, !dbg !5136
}

declare dso_local i32 @mf_marked_p(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @mf_mark(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_constructor_elt_gc* @VEC_constructor_elt_gc_copy(%struct.VEC_constructor_elt_base* %vec_) unnamed_addr #0 !dbg !5137 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_constructor_elt_base* %vec_, metadata !5142, metadata !DIExpression()), !dbg !5145
  %tobool = icmp eq %struct.VEC_constructor_elt_base* %vec_, null, !dbg !5146
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5146

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %vec_, i64 0, i32 0, !dbg !5146
  %0 = load i32, i32* %num, align 8, !dbg !5146
  %phitmp = zext i32 %0 to i64, !dbg !5146
  br label %cond.end, !dbg !5146

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i64 [ %phitmp, %cond.true ], [ 0, %entry ]
  call void @llvm.dbg.value(metadata i64 %cond, metadata !5143, metadata !DIExpression()), !dbg !5145
  call void @llvm.dbg.value(metadata %struct.VEC_constructor_elt_gc* null, metadata !5144, metadata !DIExpression()), !dbg !5145
  %tobool1 = icmp eq i64 %cond, 0, !dbg !5147
  br i1 %tobool1, label %if.end, label %if.then, !dbg !5146

if.then:                                          ; preds = %cond.end
  %conv2 = trunc i64 %cond to i32, !dbg !5149
  %call = tail call i8* @vec_gc_o_reserve_exact(i8* null, i32 %conv2, i64 8, i64 16) #6, !dbg !5149
  %1 = bitcast i8* %call to %struct.VEC_constructor_elt_gc*, !dbg !5149
  call void @llvm.dbg.value(metadata %struct.VEC_constructor_elt_gc* %1, metadata !5144, metadata !DIExpression()), !dbg !5145
  %num4 = bitcast i8* %call to i32*, !dbg !5149
  store i32 %conv2, i32* %num4, align 8, !dbg !5149
  %vec = getelementptr inbounds i8, i8* %call, i64 8, !dbg !5149
  %arraydecay7 = getelementptr inbounds %struct.VEC_constructor_elt_base, %struct.VEC_constructor_elt_base* %vec_, i64 0, i32 2, i64 0, !dbg !5149
  %2 = bitcast %struct.constructor_elt_d* %arraydecay7 to i8*, !dbg !5149
  %mul = shl nuw nsw i64 %cond, 4, !dbg !5149
  %call8 = tail call i8* @memcpy(i8* nonnull %vec, i8* nonnull %2, i64 %mul) #6, !dbg !5149
  br label %if.end, !dbg !5149

if.end:                                           ; preds = %cond.end, %if.then
  %new_vec_.0 = phi %struct.VEC_constructor_elt_gc* [ %1, %if.then ], [ null, %cond.end ], !dbg !5145
  call void @llvm.dbg.value(metadata %struct.VEC_constructor_elt_gc* %new_vec_.0, metadata !5144, metadata !DIExpression()), !dbg !5145
  ret %struct.VEC_constructor_elt_gc* %new_vec_.0, !dbg !5146
}

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @unsave_expr_now(%union.tree_node* %expr) local_unnamed_addr #5 !dbg !5151 {
entry:
  %expr.addr = alloca %union.tree_node*, align 8
  %id = alloca %struct.copy_body_data, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !5155, metadata !DIExpression()), !dbg !5157
  store %union.tree_node* %expr, %union.tree_node** %expr.addr, align 8
  %0 = bitcast %struct.copy_body_data* %id to i8*, !dbg !5158
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %0) #8, !dbg !5158
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !5155, metadata !DIExpression()), !dbg !5157
  %cmp = icmp eq %union.tree_node* %expr, null, !dbg !5159
  br i1 %cmp, label %if.then, label %if.end, !dbg !5161

if.then:                                          ; preds = %entry
  br label %cleanup, !dbg !5162

if.end:                                           ; preds = %entry
  %call = call i8* @memset(i8* nonnull %0, i32 0, i64 152) #6, !dbg !5163
  %1 = load i64, i64* bitcast (%union.tree_node** @current_function_decl to i64*), align 8, !dbg !5164
  %2 = bitcast %struct.copy_body_data* %id to i64*, !dbg !5165
  store i64 %1, i64* %2, align 8, !dbg !5165
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !5166
  %3 = bitcast %union.tree_node** %dst_fn to i64*, !dbg !5167
  store i64 %1, i64* %3, align 8, !dbg !5167
  %call1 = call %struct.pointer_map_t* @pointer_map_create() #6, !dbg !5168
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !5169
  store %struct.pointer_map_t* %call1, %struct.pointer_map_t** %decl_map, align 8, !dbg !5170
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 22, !dbg !5171
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map, align 8, !dbg !5172
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 7, !dbg !5173
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !5174
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 12, !dbg !5175
  store i32 0, i32* %transform_call_graph_edges, align 8, !dbg !5176
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 13, !dbg !5177
  store i8 0, i8* %transform_new_cfg, align 4, !dbg !5178
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 14, !dbg !5179
  store i8 0, i8* %transform_return_to_modify, align 1, !dbg !5180
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 18, !dbg !5181
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !5182
  call void @llvm.dbg.value(metadata %union.tree_node** %expr.addr, metadata !5155, metadata !DIExpression(DW_OP_deref)), !dbg !5157
  %call2 = call %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node** nonnull %expr.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @mark_local_for_remap_r, i8* nonnull %0, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !5183
  call void @llvm.dbg.value(metadata %union.tree_node** %expr.addr, metadata !5155, metadata !DIExpression(DW_OP_deref)), !dbg !5157
  %call3 = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %expr.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @unsave_r, i8* nonnull %0, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !5184
  %4 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !5185
  call void @pointer_map_destroy(%struct.pointer_map_t* %4) #6, !dbg !5186
  %5 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !5187
  %tobool = icmp eq %struct.pointer_map_t* %5, null, !dbg !5189
  br i1 %tobool, label %if.end8, label %if.then6, !dbg !5190

if.then6:                                         ; preds = %if.end
  call void @pointer_map_destroy(%struct.pointer_map_t* nonnull %5) #6, !dbg !5191
  br label %if.end8, !dbg !5191

if.end8:                                          ; preds = %if.end, %if.then6
  %retval.0.pre = load %union.tree_node*, %union.tree_node** %expr.addr, align 8, !dbg !5157
  br label %cleanup, !dbg !5192

cleanup:                                          ; preds = %if.end8, %if.then
  %retval.0 = phi %union.tree_node* [ %retval.0.pre, %if.end8 ], [ null, %if.then ], !dbg !5157
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %0) #8, !dbg !5193
  ret %union.tree_node* %retval.0, !dbg !5193
}

declare dso_local %struct.pointer_map_t* @pointer_map_create() local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @copy_decl_no_change(%union.tree_node* %decl, %struct.copy_body_data* %id) #5 !dbg !5194 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !5196, metadata !DIExpression()), !dbg !5199
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5197, metadata !DIExpression()), !dbg !5199
  %call = tail call %union.tree_node* @copy_node_stat(%union.tree_node* %decl) #6, !dbg !5200
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5198, metadata !DIExpression()), !dbg !5199
  %abstract_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5201
  %0 = bitcast i40* %abstract_flag to i64*, !dbg !5201
  %bf.load = load i64, i64* %0, align 8, !dbg !5202
  %bf.clear = and i64 %bf.load, -2049, !dbg !5202
  store i64 %bf.clear, i64* %0, align 8, !dbg !5202
  %1 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i64 0, i32 15), align 8, !dbg !5203
  tail call void %1(%union.tree_node* %call) #6, !dbg !5204
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5205
  %bf.load1 = load i64, i64* %2, align 8, !dbg !5205
  %bf.cast1 = and i64 %bf.load1, 65535, !dbg !5207
  %cmp = icmp eq i64 %bf.cast1, 30, !dbg !5207
  br i1 %cmp, label %if.then, label %if.end, !dbg !5208

if.then:                                          ; preds = %entry
  %bf.clear5 = and i64 %bf.load1, -262145, !dbg !5209
  store i64 %bf.clear5, i64* %2, align 8, !dbg !5209
  %label_decl_uid = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !5211
  %3 = bitcast %union.tree_node** %label_decl_uid to i32*, !dbg !5211
  store i32 -1, i32* %3, align 8, !dbg !5212
  br label %if.end, !dbg !5213

if.end:                                           ; preds = %if.then, %entry
  %call6 = tail call fastcc %union.tree_node* @copy_decl_for_dup_finish(%struct.copy_body_data* %id, %union.tree_node* %decl, %union.tree_node* %call) #7, !dbg !5214
  ret %union.tree_node* %call6, !dbg !5215
}

declare dso_local %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @mark_local_for_remap_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #5 !dbg !5216 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !5218, metadata !DIExpression()), !dbg !5226
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !5219, metadata !DIExpression()), !dbg !5226
  call void @llvm.dbg.value(metadata i8* %data, metadata !5220, metadata !DIExpression()), !dbg !5226
  %0 = bitcast i8* %data to %struct.copy_body_data*, !dbg !5227
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %0, metadata !5221, metadata !DIExpression()), !dbg !5226
  %1 = bitcast %union.tree_node** %tp to i64**, !dbg !5228
  %2 = load i64*, i64** %1, align 8, !dbg !5228
  %bf.load = load i64, i64* %2, align 8, !dbg !5228
  %bf.cast = and i64 %bf.load, 65535, !dbg !5228
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !5228
  %3 = load i32, i32* %arrayidx, align 4, !dbg !5228
  %cmp = icmp eq i32 %3, 2, !dbg !5228
  br i1 %cmp, label %if.then, label %if.else, !dbg !5229

if.then:                                          ; preds = %entry
  store i32 0, i32* %walk_subtrees, align 4, !dbg !5230
  br label %if.end8, !dbg !5231

if.else:                                          ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast, 133, !dbg !5232
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !5233

if.then6:                                         ; preds = %if.else
  %arrayidx7 = getelementptr inbounds i64, i64* %2, i64 5, !dbg !5234
  %4 = bitcast i64* %arrayidx7 to %union.tree_node**, !dbg !5234
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !5234
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !5222, metadata !DIExpression()), !dbg !5235
  %copy_decl = getelementptr inbounds i8, i8* %data, i64 56, !dbg !5236
  %6 = bitcast i8* %copy_decl to %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)**, !dbg !5236
  %7 = load %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)*, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %6, align 8, !dbg !5236
  %call = tail call %union.tree_node* %7(%union.tree_node* %5, %struct.copy_body_data* %0) #6, !dbg !5237
  tail call void @insert_decl_map(%struct.copy_body_data* %0, %union.tree_node* %5, %union.tree_node* %call) #7, !dbg !5238
  br label %if.end8, !dbg !5239

if.end8:                                          ; preds = %if.else, %if.then6, %if.then
  ret %union.tree_node* null, !dbg !5240
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @unsave_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #5 !dbg !5241 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !5243, metadata !DIExpression()), !dbg !5249
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !5244, metadata !DIExpression()), !dbg !5249
  call void @llvm.dbg.value(metadata i8* %data, metadata !5245, metadata !DIExpression()), !dbg !5249
  %0 = bitcast i8* %data to %struct.copy_body_data*, !dbg !5250
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %0, metadata !5246, metadata !DIExpression()), !dbg !5249
  %decl_map = getelementptr inbounds i8, i8* %data, i64 48, !dbg !5251
  %1 = bitcast i8* %decl_map to %struct.pointer_map_t**, !dbg !5251
  %2 = load %struct.pointer_map_t*, %struct.pointer_map_t** %1, align 8, !dbg !5251
  call void @llvm.dbg.value(metadata %struct.pointer_map_t* %2, metadata !5247, metadata !DIExpression()), !dbg !5249
  %3 = bitcast %union.tree_node** %tp to i64**, !dbg !5252
  %4 = load i64*, i64** %3, align 8, !dbg !5252
  %bf.load = load i64, i64* %4, align 8, !dbg !5252
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5254
  %cmp = icmp eq i64 %bf.cast1, 32, !dbg !5254
  %5 = bitcast i64* %4 to i8*, !dbg !5255
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5255

land.lhs.true:                                    ; preds = %entry
  %bf.cast47 = and i64 %bf.load, 67108864, !dbg !5256
  %tobool = icmp eq i64 %bf.cast47, 0, !dbg !5256
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5257

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %cmp9 = icmp eq i64 %bf.cast1, 30, !dbg !5258
  br i1 %cmp9, label %if.then, label %if.else, !dbg !5259

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %call = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %2, i8* %5) #6, !dbg !5260
  call void @llvm.dbg.value(metadata i8** %call, metadata !5248, metadata !DIExpression()), !dbg !5249
  %tobool10 = icmp eq i8** %call, null, !dbg !5262
  br i1 %tobool10, label %if.end43, label %if.then11, !dbg !5264

if.then11:                                        ; preds = %if.then
  %6 = bitcast i8** %call to i64*, !dbg !5265
  call void @llvm.dbg.value(metadata i64* %6, metadata !5248, metadata !DIExpression()), !dbg !5249
  %7 = load i64, i64* %6, align 8, !dbg !5265
  %8 = bitcast %union.tree_node** %tp to i64*, !dbg !5266
  store i64 %7, i64* %8, align 8, !dbg !5266
  br label %if.end43, !dbg !5267

if.else:                                          ; preds = %lor.lhs.false
  %cmp16 = icmp eq i64 %bf.cast1, 147, !dbg !5268
  br i1 %cmp16, label %if.then17, label %if.else18, !dbg !5270

if.then17:                                        ; preds = %if.else
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4207, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5271
  br label %if.end43, !dbg !5271

if.else18:                                        ; preds = %if.else
  %cmp23 = icmp eq i64 %bf.cast1, 58, !dbg !5272
  br i1 %cmp23, label %if.then24, label %if.else25, !dbg !5274

if.then24:                                        ; preds = %if.else18
  tail call fastcc void @copy_bind_expr(%union.tree_node** %tp, i32* %walk_subtrees, %struct.copy_body_data* %0) #7, !dbg !5275
  br label %if.end43, !dbg !5275

if.else25:                                        ; preds = %if.else18
  %cmp30 = icmp eq i64 %bf.cast1, 120, !dbg !5276
  br i1 %cmp30, label %if.then37, label %lor.lhs.false31, !dbg !5278

lor.lhs.false31:                                  ; preds = %if.else25
  %cmp36 = icmp eq i64 %bf.cast1, 55, !dbg !5279
  br i1 %cmp36, label %if.then37, label %if.else38, !dbg !5280

if.then37:                                        ; preds = %lor.lhs.false31, %if.else25
  %9 = bitcast %struct.pointer_map_t* %2 to i8*, !dbg !5281
  tail call fastcc void @remap_save_expr(%union.tree_node** %tp, i8* %9, i32* %walk_subtrees) #7, !dbg !5282
  br label %if.end43, !dbg !5282

if.else38:                                        ; preds = %lor.lhs.false31
  %call39 = tail call %union.tree_node* @copy_tree_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* null) #7, !dbg !5283
  %10 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !5285
  tail call fastcc void @unsave_expr_1(%union.tree_node* %10) #7, !dbg !5286
  br label %if.end43

if.end43:                                         ; preds = %if.then, %if.then17, %if.then37, %if.else38, %if.then24, %if.then11
  ret %union.tree_node* null, !dbg !5287
}

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %struct.gimple_seq_d* @copy_gimple_seq_and_replace_locals(%struct.gimple_seq_d* %seq) local_unnamed_addr #5 !dbg !5288 {
entry:
  %id = alloca %struct.copy_body_data, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq, metadata !5292, metadata !DIExpression()), !dbg !5297
  %0 = bitcast %struct.copy_body_data* %id to i8*, !dbg !5298
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %0) #8, !dbg !5298
  %1 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5299
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1) #8, !dbg !5299
  %cmp = icmp eq %struct.gimple_seq_d* %seq, null, !dbg !5300
  br i1 %cmp, label %cleanup, label %if.end, !dbg !5302

if.end:                                           ; preds = %entry
  %call = call i8* @memset(i8* nonnull %0, i32 0, i64 152) #6, !dbg !5303
  %2 = load i64, i64* bitcast (%union.tree_node** @current_function_decl to i64*), align 8, !dbg !5304
  %3 = bitcast %struct.copy_body_data* %id to i64*, !dbg !5305
  store i64 %2, i64* %3, align 8, !dbg !5305
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !5306
  %4 = bitcast %union.tree_node** %dst_fn to i64*, !dbg !5307
  store i64 %2, i64* %4, align 8, !dbg !5307
  %call1 = call %struct.pointer_map_t* @pointer_map_create() #6, !dbg !5308
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !5309
  store %struct.pointer_map_t* %call1, %struct.pointer_map_t** %decl_map, align 8, !dbg !5310
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 22, !dbg !5311
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map, align 8, !dbg !5312
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 7, !dbg !5313
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !5314
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 12, !dbg !5315
  store i32 0, i32* %transform_call_graph_edges, align 8, !dbg !5316
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 13, !dbg !5317
  store i8 0, i8* %transform_new_cfg, align 4, !dbg !5318
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 14, !dbg !5319
  store i8 0, i8* %transform_return_to_modify, align 1, !dbg !5320
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 18, !dbg !5321
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !5322
  %call2 = call i8* @memset(i8* nonnull %1, i32 0, i64 56) #6, !dbg !5323
  %call3 = call %struct.pointer_set_t* @pointer_set_create() #6, !dbg !5324
  call void @llvm.dbg.value(metadata %struct.pointer_set_t* %call3, metadata !5295, metadata !DIExpression()), !dbg !5297
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 1, !dbg !5325
  %5 = bitcast i8** %info to %struct.copy_body_data**, !dbg !5326
  store %struct.copy_body_data* %id, %struct.copy_body_data** %5, align 8, !dbg !5326
  %pset = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 2, !dbg !5327
  store %struct.pointer_set_t* %call3, %struct.pointer_set_t** %pset, align 8, !dbg !5328
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !5294, metadata !DIExpression(DW_OP_deref)), !dbg !5297
  %call4 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* nonnull %seq, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* nonnull @mark_local_labels_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* null, %struct.walk_stmt_info* nonnull %wi) #6, !dbg !5329
  call void @pointer_set_destroy(%struct.pointer_set_t* %call3) #6, !dbg !5330
  %call5 = call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* nonnull %seq) #6, !dbg !5331
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call5, metadata !5296, metadata !DIExpression()), !dbg !5297
  %call6 = call i8* @memset(i8* nonnull %1, i32 0, i64 56) #6, !dbg !5332
  store %struct.copy_body_data* %id, %struct.copy_body_data** %5, align 8, !dbg !5333
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !5294, metadata !DIExpression(DW_OP_deref)), !dbg !5297
  %call8 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call5, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* nonnull @replace_locals_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @replace_locals_op, %struct.walk_stmt_info* nonnull %wi) #6, !dbg !5334
  %6 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !5335
  call void @pointer_map_destroy(%struct.pointer_map_t* %6) #6, !dbg !5336
  %7 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !5337
  %tobool = icmp eq %struct.pointer_map_t* %7, null, !dbg !5339
  br i1 %tobool, label %cleanup, label %if.then11, !dbg !5340

if.then11:                                        ; preds = %if.end
  call void @pointer_map_destroy(%struct.pointer_map_t* nonnull %7) #6, !dbg !5341
  br label %cleanup, !dbg !5341

cleanup:                                          ; preds = %if.end, %if.then11, %entry
  %retval.0 = phi %struct.gimple_seq_d* [ null, %entry ], [ %call5, %if.then11 ], [ %call5, %if.end ], !dbg !5297
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1) #8, !dbg !5342
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %0) #8, !dbg !5342
  ret %struct.gimple_seq_d* %retval.0, !dbg !5342
}

declare dso_local %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d*, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @mark_local_labels_stmt(%struct.gimple_stmt_iterator* %gsip, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #5 !dbg !5343 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsip, metadata !5347, metadata !DIExpression()), !dbg !5355
  call void @llvm.dbg.value(metadata i8* %handled_ops_p, metadata !5348, metadata !DIExpression()), !dbg !5355
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !5349, metadata !DIExpression()), !dbg !5355
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 1, !dbg !5356
  %0 = bitcast i8** %info to %struct.copy_body_data**, !dbg !5356
  %1 = load %struct.copy_body_data*, %struct.copy_body_data** %0, align 8, !dbg !5356
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %1, metadata !5350, metadata !DIExpression()), !dbg !5355
  %call = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsip) #7, !dbg !5357
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !5351, metadata !DIExpression()), !dbg !5355
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call) #7, !dbg !5358
  %cmp = icmp eq i32 %call1, 4, !dbg !5359
  br i1 %cmp, label %if.then, label %if.end, !dbg !5360

if.then:                                          ; preds = %entry
  %call2 = tail call fastcc %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %call) #7, !dbg !5361
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !5352, metadata !DIExpression()), !dbg !5362
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %1, i64 0, i32 7, !dbg !5363
  %2 = load %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)*, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !5363
  %call3 = tail call %union.tree_node* %2(%union.tree_node* %call2, %struct.copy_body_data* %1) #6, !dbg !5364
  tail call void @insert_decl_map(%struct.copy_body_data* %1, %union.tree_node* %call2, %union.tree_node* %call3) #7, !dbg !5365
  br label %if.end, !dbg !5366

if.end:                                           ; preds = %if.then, %entry
  ret %union.tree_node* null, !dbg !5367
}

declare dso_local %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @replace_locals_stmt(%struct.gimple_stmt_iterator* %gsip, i8* %handled_ops_p, %struct.walk_stmt_info* %wi) #5 !dbg !5368 {
entry:
  %block = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsip, metadata !5370, metadata !DIExpression()), !dbg !5378
  call void @llvm.dbg.value(metadata i8* %handled_ops_p, metadata !5371, metadata !DIExpression()), !dbg !5378
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !5372, metadata !DIExpression()), !dbg !5378
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 1, !dbg !5379
  %0 = bitcast i8** %info to %struct.copy_body_data**, !dbg !5379
  %1 = load %struct.copy_body_data*, %struct.copy_body_data** %0, align 8, !dbg !5379
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %1, metadata !5373, metadata !DIExpression()), !dbg !5378
  %call = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsip) #7, !dbg !5380
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !5374, metadata !DIExpression()), !dbg !5378
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call) #7, !dbg !5381
  %cmp = icmp eq i32 %call1, 10, !dbg !5382
  br i1 %cmp, label %if.then, label %if.end10, !dbg !5383

if.then:                                          ; preds = %entry
  %2 = bitcast %union.tree_node** %block to i8*, !dbg !5384
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #8, !dbg !5384
  %call2 = tail call fastcc %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %call) #7, !dbg !5385
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !5375, metadata !DIExpression()), !dbg !5386
  store %union.tree_node* %call2, %union.tree_node** %block, align 8, !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !5375, metadata !DIExpression()), !dbg !5386
  %tobool = icmp eq %union.tree_node* %call2, null, !dbg !5388
  br i1 %tobool, label %if.end, label %if.then3, !dbg !5390

if.then3:                                         ; preds = %if.then
  call void @llvm.dbg.value(metadata %union.tree_node** %block, metadata !5375, metadata !DIExpression(DW_OP_deref)), !dbg !5386
  call fastcc void @remap_block(%union.tree_node** nonnull %block, %struct.copy_body_data* %1) #7, !dbg !5391
  %3 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !5393
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !5375, metadata !DIExpression()), !dbg !5386
  call fastcc void @gimple_bind_set_block(%union.gimple_statement_d* %call, %union.tree_node* %3) #7, !dbg !5394
  br label %if.end, !dbg !5395

if.end:                                           ; preds = %if.then, %if.then3
  %call4 = call fastcc %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %call) #7, !dbg !5396
  %tobool5 = icmp eq %union.tree_node* %call4, null, !dbg !5396
  br i1 %tobool5, label %if.end9, label %if.then6, !dbg !5398

if.then6:                                         ; preds = %if.end
  %call7 = call fastcc %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %call) #7, !dbg !5399
  %call8 = call fastcc %union.tree_node* @remap_decls(%union.tree_node* %call7, %struct.VEC_tree_gc** null, %struct.copy_body_data* %1) #7, !dbg !5400
  call fastcc void @gimple_bind_set_vars(%union.gimple_statement_d* %call, %union.tree_node* %call8) #7, !dbg !5401
  br label %if.end9, !dbg !5401

if.end9:                                          ; preds = %if.end, %if.then6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #8, !dbg !5402
  br label %if.end10, !dbg !5403

if.end10:                                         ; preds = %if.end9, %entry
  ret %union.tree_node* null, !dbg !5404
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @replace_locals_op(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #5 !dbg !5405 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !5407, metadata !DIExpression()), !dbg !5415
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !5408, metadata !DIExpression()), !dbg !5415
  call void @llvm.dbg.value(metadata i8* %data, metadata !5409, metadata !DIExpression()), !dbg !5415
  call void @llvm.dbg.value(metadata i8* %data, metadata !5410, metadata !DIExpression()), !dbg !5415
  %info = getelementptr inbounds i8, i8* %data, i64 24, !dbg !5416
  %0 = bitcast i8* %info to %struct.copy_body_data**, !dbg !5416
  %1 = load %struct.copy_body_data*, %struct.copy_body_data** %0, align 8, !dbg !5416
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %1, metadata !5411, metadata !DIExpression()), !dbg !5415
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %1, i64 0, i32 6, !dbg !5417
  %2 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !5417
  call void @llvm.dbg.value(metadata %struct.pointer_map_t* %2, metadata !5412, metadata !DIExpression()), !dbg !5415
  %3 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !5418
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !5414, metadata !DIExpression()), !dbg !5415
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5419
  %bf.load = load i64, i64* %4, align 8, !dbg !5419
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5421
  %cmp = icmp eq i64 %bf.cast1, 32, !dbg !5421
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !5422

land.lhs.true:                                    ; preds = %entry
  %bf.cast47 = and i64 %bf.load, 67108864, !dbg !5423
  %tobool = icmp eq i64 %bf.cast47, 0, !dbg !5423
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5424

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %cmp9 = icmp eq i64 %bf.cast1, 30, !dbg !5425
  br i1 %cmp9, label %if.then, label %if.else, !dbg !5426

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %5 = bitcast %union.tree_node* %3 to i8*, !dbg !5427
  %call = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %2, i8* %5) #6, !dbg !5429
  call void @llvm.dbg.value(metadata i8** %call, metadata !5413, metadata !DIExpression()), !dbg !5415
  %tobool10 = icmp eq i8** %call, null, !dbg !5430
  br i1 %tobool10, label %if.end, label %if.then11, !dbg !5432

if.then11:                                        ; preds = %if.then
  %6 = bitcast i8** %call to i64*, !dbg !5433
  call void @llvm.dbg.value(metadata i64* %6, metadata !5413, metadata !DIExpression()), !dbg !5415
  %7 = load i64, i64* %6, align 8, !dbg !5433
  %8 = bitcast %union.tree_node** %tp to i64*, !dbg !5434
  store i64 %7, i64* %8, align 8, !dbg !5434
  br label %if.end, !dbg !5435

if.end:                                           ; preds = %if.then, %if.then11
  store i32 0, i32* %walk_subtrees, align 4, !dbg !5436
  br label %if.end51, !dbg !5437

if.else:                                          ; preds = %lor.lhs.false
  %cmp16 = icmp eq i64 %bf.cast1, 147, !dbg !5438
  br i1 %cmp16, label %if.then29, label %lor.lhs.false17, !dbg !5440

lor.lhs.false17:                                  ; preds = %if.else
  %cmp22 = icmp eq i64 %bf.cast1, 58, !dbg !5441
  br i1 %cmp22, label %if.then29, label %lor.lhs.false23, !dbg !5442

lor.lhs.false23:                                  ; preds = %lor.lhs.false17
  %cmp28 = icmp eq i64 %bf.cast1, 120, !dbg !5443
  br i1 %cmp28, label %if.then29, label %if.else30, !dbg !5444

if.then29:                                        ; preds = %lor.lhs.false23, %lor.lhs.false17, %if.else
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4318, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5445
  br label %if.end51, !dbg !5445

if.else30:                                        ; preds = %lor.lhs.false23
  %cmp35 = icmp eq i64 %bf.cast1, 55, !dbg !5446
  br i1 %cmp35, label %if.then36, label %if.end51, !dbg !5448

if.then36:                                        ; preds = %if.else30
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5449
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !5449
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5449
  %tobool37 = icmp eq %union.tree_node* %9, null, !dbg !5449
  br i1 %tobool37, label %if.then38, label %if.end51, !dbg !5452

if.then38:                                        ; preds = %if.then36
  %arrayidx41 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 3, !dbg !5453
  %10 = bitcast %union.tree_node** %arrayidx41 to i64*, !dbg !5453
  %11 = load i64, i64* %10, align 8, !dbg !5453
  %12 = bitcast %union.tree_node** %arrayidx to i64*, !dbg !5455
  store i64 %11, i64* %12, align 8, !dbg !5455
  store %union.tree_node* null, %union.tree_node** %arrayidx41, align 8, !dbg !5456
  br label %if.end51, !dbg !5457

if.end51:                                         ; preds = %if.then36, %if.then29, %if.then38, %if.else30, %if.end
  ret %union.tree_node* null, !dbg !5458
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @debug_find_tree(%union.tree_node* %top, %union.tree_node* %search) local_unnamed_addr #5 !dbg !5459 {
entry:
  %top.addr = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %top, metadata !5463, metadata !DIExpression()), !dbg !5465
  store %union.tree_node* %top, %union.tree_node** %top.addr, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %search, metadata !5464, metadata !DIExpression()), !dbg !5465
  %0 = bitcast %union.tree_node* %search to i8*, !dbg !5466
  call void @llvm.dbg.value(metadata %union.tree_node** %top.addr, metadata !5463, metadata !DIExpression(DW_OP_deref)), !dbg !5465
  %call = call %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node** nonnull %top.addr, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @debug_find_tree_1, i8* %0, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !5466
  %cmp = icmp ne %union.tree_node* %call, null, !dbg !5467
  %conv1 = zext i1 %cmp to i8, !dbg !5466
  ret i8 %conv1, !dbg !5468
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @debug_find_tree_1(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #5 !dbg !5469 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !5471, metadata !DIExpression()), !dbg !5474
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !5472, metadata !DIExpression()), !dbg !5474
  call void @llvm.dbg.value(metadata i8* %data, metadata !5473, metadata !DIExpression()), !dbg !5474
  %0 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !5475
  %1 = bitcast i8* %data to %union.tree_node*, !dbg !5477
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !5478
  %retval.0 = select i1 %cmp, %union.tree_node* %1, %union.tree_node* null, !dbg !5479
  ret %union.tree_node* %retval.0, !dbg !5480
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @copy_decl_for_dup_finish(%struct.copy_body_data* %id, %union.tree_node* %decl, %union.tree_node* %copy) unnamed_addr #5 !dbg !5481 {
entry:
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5485, metadata !DIExpression()), !dbg !5488
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !5486, metadata !DIExpression()), !dbg !5488
  call void @llvm.dbg.value(metadata %union.tree_node* %copy, metadata !5487, metadata !DIExpression()), !dbg !5488
  %artificial_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5489
  %0 = bitcast i40* %artificial_flag to i64*, !dbg !5489
  %bf.load = load i64, i64* %0, align 8, !dbg !5489
  %bf.cast = and i64 %bf.load, 4096, !dbg !5489
  %artificial_flag2 = getelementptr inbounds %union.tree_node, %union.tree_node* %copy, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5490
  %1 = bitcast i40* %artificial_flag2 to i64*, !dbg !5490
  %bf.load3 = load i64, i64* %1, align 8, !dbg !5491
  %bf.clear4 = and i64 %bf.load3, -4097, !dbg !5491
  %bf.set = or i64 %bf.clear4, %bf.cast, !dbg !5491
  store i64 %bf.set, i64* %1, align 8, !dbg !5491
  %bf.load6 = load i64, i64* %0, align 8, !dbg !5492
  %bf.cast9 = and i64 %bf.load6, 1024, !dbg !5492
  %bf.clear15 = and i64 %bf.set, -1025, !dbg !5493
  %bf.set16 = or i64 %bf.clear15, %bf.cast9, !dbg !5493
  store i64 %bf.set16, i64* %1, align 8, !dbg !5493
  %abstract_origin = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, !dbg !5494
  %2 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !5494
  %tobool = icmp eq %union.tree_node* %2, null, !dbg !5494
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5494

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !5494

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %union.tree_node* [ %2, %cond.true ], [ %decl, %entry ], !dbg !5494
  %abstract_origin22 = getelementptr inbounds %union.tree_node, %union.tree_node* %copy, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, !dbg !5495
  store %union.tree_node* %cond, %union.tree_node** %abstract_origin22, align 8, !dbg !5496
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %copy, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5497
  %bf.load23 = load i64, i64* %3, align 8, !dbg !5497
  %bf.cast25 = and i64 %bf.load23, 65535, !dbg !5497
  %arrayidx26 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %bf.cast25, i64 11, !dbg !5497
  %4 = load i8, i8* %arrayidx26, align 1, !dbg !5497
  %tobool27 = icmp eq i8 %4, 0, !dbg !5497
  br i1 %tobool27, label %if.end, label %land.lhs.true, !dbg !5499

land.lhs.true:                                    ; preds = %cond.end
  %bf.cast322 = and i64 %bf.load23, 67108864, !dbg !5500
  %tobool33 = icmp eq i64 %bf.cast322, 0, !dbg !5500
  br i1 %tobool33, label %land.lhs.true34, label %if.end, !dbg !5501

land.lhs.true34:                                  ; preds = %land.lhs.true
  %bf.cast393 = and i64 %bf.load3, 33554432, !dbg !5502
  %tobool40 = icmp eq i64 %bf.cast393, 0, !dbg !5502
  br i1 %tobool40, label %if.then, label %if.end, !dbg !5503

if.then:                                          ; preds = %land.lhs.true34
  tail call void @set_decl_rtl(%union.tree_node* %copy, %struct.rtx_def* null) #6, !dbg !5504
  %bf.load42.pre = load i64, i64* %3, align 8, !dbg !5505
  br label %if.end, !dbg !5504

if.end:                                           ; preds = %land.lhs.true34, %land.lhs.true, %cond.end, %if.then
  %bf.load42 = phi i64 [ %bf.load23, %land.lhs.true34 ], [ %bf.load23, %land.lhs.true ], [ %bf.load23, %cond.end ], [ %bf.load42.pre, %if.then ], !dbg !5505
  %bf.set44 = or i64 %bf.load42, 16777216, !dbg !5505
  store i64 %bf.set44, i64* %3, align 8, !dbg !5505
  %context = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5506
  %5 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !5506
  %tobool45 = icmp eq %union.tree_node* %5, null, !dbg !5506
  br i1 %tobool45, label %if.end64, label %if.else, !dbg !5508

if.else:                                          ; preds = %if.end
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 0, !dbg !5509
  %6 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !5509
  %cmp = icmp eq %union.tree_node* %5, %6, !dbg !5511
  br i1 %cmp, label %if.else51, label %if.end64, !dbg !5512

if.else51:                                        ; preds = %if.else
  %7 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5513
  %bf.load53 = load i64, i64* %7, align 8, !dbg !5513
  %bf.cast561 = and i64 %bf.load53, 67108864, !dbg !5513
  %tobool57 = icmp eq i64 %bf.cast561, 0, !dbg !5513
  br i1 %tobool57, label %if.else59, label %if.end64, !dbg !5515

if.else59:                                        ; preds = %if.else51
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !5516
  %8 = bitcast %union.tree_node** %dst_fn to i64*, !dbg !5516
  %9 = load i64, i64* %8, align 8, !dbg !5516
  %context61 = getelementptr inbounds %union.tree_node, %union.tree_node* %copy, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5517
  %10 = bitcast %union.tree_node** %context61 to i64*, !dbg !5518
  store i64 %9, i64* %10, align 8, !dbg !5518
  br label %if.end64

if.end64:                                         ; preds = %if.else51, %if.else, %if.end, %if.else59
  ret %union.tree_node* %copy, !dbg !5519
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @tree_versionable_function_p(%union.tree_node* %fndecl) local_unnamed_addr #5 !dbg !5520 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %fndecl, metadata !5522, metadata !DIExpression()), !dbg !5523
  %attributes = getelementptr inbounds %union.tree_node, %union.tree_node* %fndecl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, !dbg !5524
  %0 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !5524
  %call = tail call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), %union.tree_node* %0) #6, !dbg !5525
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !5525
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5526

land.rhs:                                         ; preds = %entry
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %fndecl, i64 0, i32 0, i32 1, !dbg !5527
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !5527
  %call1 = tail call fastcc i8* @copy_forbidden(%struct.function* %1, %union.tree_node* %fndecl) #7, !dbg !5528
  %cmp = icmp eq i8* %call1, null, !dbg !5529
  %phitmp = zext i1 %cmp to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %2 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %2, !dbg !5530
}

; Function Attrs: nounwind uwtable
define internal fastcc i8* @copy_forbidden(%struct.function* %fun, %union.tree_node* %fndecl) unnamed_addr #5 !dbg !5531 {
entry:
  call void @llvm.dbg.value(metadata %struct.function* %fun, metadata !5535, metadata !DIExpression()), !dbg !5544
  call void @llvm.dbg.value(metadata %union.tree_node* %fndecl, metadata !5536, metadata !DIExpression()), !dbg !5544
  %cannot_be_copied_reason = getelementptr inbounds %struct.function, %struct.function* %fun, i64 0, i32 19, !dbg !5545
  %0 = load i8*, i8** %cannot_be_copied_reason, align 8, !dbg !5545
  call void @llvm.dbg.value(metadata i8* %0, metadata !5537, metadata !DIExpression()), !dbg !5544
  %cannot_be_copied_set = getelementptr inbounds %struct.function, %struct.function* %fun, i64 0, i32 20, !dbg !5546
  %bf.load = load i32, i32* %cannot_be_copied_set, align 8, !dbg !5546
  %bf.clear = and i32 %bf.load, 2097152, !dbg !5546
  %tobool = icmp eq i32 %bf.clear, 0, !dbg !5548
  br i1 %tobool, label %if.end, label %cleanup35, !dbg !5549

if.end:                                           ; preds = %entry
  %bf.clear3 = and i32 %bf.load, 1048576, !dbg !5550
  %tobool4 = icmp eq i32 %bf.clear3, 0, !dbg !5552
  br i1 %tobool4, label %if.end6, label %fail, !dbg !5553

if.end6:                                          ; preds = %if.end
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %fun, i64 0, i32 9, !dbg !5554
  %1 = bitcast %union.tree_node* %fndecl to i8*, !dbg !5555
  br label %for.cond, !dbg !5557

for.cond:                                         ; preds = %for.inc, %if.end6
  %reason.0 = phi i8* [ %0, %if.end6 ], [ %reason.1, %for.inc ], !dbg !5558
  %step.0.in = phi %union.tree_node** [ %local_decls, %if.end6 ], [ %chain, %for.inc ]
  %step.0 = load %union.tree_node*, %union.tree_node** %step.0.in, align 8, !dbg !5559
  call void @llvm.dbg.value(metadata %union.tree_node* %step.0, metadata !5538, metadata !DIExpression()), !dbg !5544
  call void @llvm.dbg.value(metadata i8* %reason.0, metadata !5537, metadata !DIExpression()), !dbg !5544
  %tobool7 = icmp eq %union.tree_node* %step.0, null, !dbg !5560
  br i1 %tobool7, label %fail.loopexit, label %for.body, !dbg !5560

for.body:                                         ; preds = %for.cond
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %step.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5561
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !5561
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !5539, metadata !DIExpression()), !dbg !5562
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5563
  %bf.load8 = load i64, i64* %4, align 8, !dbg !5563
  %bf.cast2 = and i64 %bf.load8, 65535, !dbg !5564
  %cmp = icmp eq i64 %bf.cast2, 32, !dbg !5564
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !5565

land.lhs.true:                                    ; preds = %for.body
  %bf.cast143 = and i64 %bf.load8, 67108864, !dbg !5566
  %tobool15 = icmp eq i64 %bf.cast143, 0, !dbg !5566
  br i1 %tobool15, label %if.end30, label %land.lhs.true16, !dbg !5567

land.lhs.true16:                                  ; preds = %land.lhs.true
  %decl_flag_1 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5568
  %5 = bitcast i40* %decl_flag_1 to i64*, !dbg !5568
  %bf.load17 = load i64, i64* %5, align 8, !dbg !5568
  %bf.cast204 = and i64 %bf.load17, 33554432, !dbg !5568
  %tobool21 = icmp eq i64 %bf.cast204, 0, !dbg !5568
  br i1 %tobool21, label %land.lhs.true22, label %if.end30, !dbg !5569

land.lhs.true22:                                  ; preds = %land.lhs.true16
  %initial = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, !dbg !5570
  %6 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5570
  %tobool24 = icmp eq %union.tree_node* %6, null, !dbg !5570
  br i1 %tobool24, label %if.end30, label %land.lhs.true25, !dbg !5571

land.lhs.true25:                                  ; preds = %land.lhs.true22
  %call = tail call %union.tree_node* @walk_tree_without_duplicates_1(%union.tree_node** nonnull %initial, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @has_label_address_in_static_1, i8* %1, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !5572
  %tobool28 = icmp eq %union.tree_node* %call, null, !dbg !5572
  br i1 %tobool28, label %if.end30, label %cleanup, !dbg !5573

if.end30:                                         ; preds = %land.lhs.true25, %land.lhs.true22, %land.lhs.true16, %land.lhs.true, %for.body
  br label %cleanup, !dbg !5574

cleanup:                                          ; preds = %land.lhs.true25, %if.end30
  %reason.1 = phi i8* [ %reason.0, %if.end30 ], [ getelementptr inbounds ([95 x i8], [95 x i8]* @.str.23, i64 0, i64 0), %land.lhs.true25 ], !dbg !5544
  %cleanup.dest.slot.0 = phi i1 [ true, %if.end30 ], [ false, %land.lhs.true25 ]
  call void @llvm.dbg.value(metadata i8* %reason.1, metadata !5537, metadata !DIExpression()), !dbg !5544
  br i1 %cleanup.dest.slot.0, label %for.inc, label %fail.loopexit

for.inc:                                          ; preds = %cleanup
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %step.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !5575
  br label %for.cond, !dbg !5576, !llvm.loop !5577

fail.loopexit:                                    ; preds = %cleanup, %for.cond
  %reason.2.ph = phi i8* [ %reason.0, %for.cond ], [ %reason.1, %cleanup ]
  %bf.load33.pre = load i32, i32* %cannot_be_copied_set, align 8, !dbg !5579
  br label %fail, !dbg !5580

fail:                                             ; preds = %fail.loopexit, %if.end
  %bf.load33 = phi i32 [ %bf.load, %if.end ], [ %bf.load33.pre, %fail.loopexit ], !dbg !5579
  %reason.2 = phi i8* [ getelementptr inbounds ([71 x i8], [71 x i8]* @.str.22, i64 0, i64 0), %if.end ], [ %reason.2.ph, %fail.loopexit ], !dbg !5544
  call void @llvm.dbg.value(metadata i8* %reason.2, metadata !5537, metadata !DIExpression()), !dbg !5544
  call void @llvm.dbg.label(metadata !5543), !dbg !5581
  store i8* %reason.2, i8** %cannot_be_copied_reason, align 8, !dbg !5582
  %bf.set = or i32 %bf.load33, 2097152, !dbg !5579
  store i32 %bf.set, i32* %cannot_be_copied_set, align 8, !dbg !5579
  br label %cleanup35, !dbg !5583

cleanup35:                                        ; preds = %entry, %fail
  %retval.0 = phi i8* [ %reason.2, %fail ], [ %0, %entry ]
  ret i8* %retval.0, !dbg !5584
}

; Function Attrs: nounwind uwtable
define dso_local void @tree_function_versioning(%union.tree_node* %old_decl, %union.tree_node* %new_decl, %struct.VEC_ipa_replace_map_p_gc* %tree_map, i8 zeroext %update_clones, %struct.bitmap_head_def* %args_to_skip) local_unnamed_addr #5 !dbg !5585 {
entry:
  %id = alloca %struct.copy_body_data, align 8
  %init_stmts = alloca %struct.VEC_gimple_heap*, align 8
  %vars = alloca %union.tree_node*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %old_decl, metadata !5589, metadata !DIExpression()), !dbg !5629
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl, metadata !5590, metadata !DIExpression()), !dbg !5629
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_replace_map_p_gc* %tree_map, metadata !5591, metadata !DIExpression()), !dbg !5629
  call void @llvm.dbg.value(metadata i8 %update_clones, metadata !5592, metadata !DIExpression()), !dbg !5629
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %args_to_skip, metadata !5593, metadata !DIExpression()), !dbg !5629
  %0 = bitcast %struct.copy_body_data* %id to i8*, !dbg !5630
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %0) #8, !dbg !5630
  %1 = bitcast %struct.VEC_gimple_heap** %init_stmts to i8*, !dbg !5631
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !5631
  %call = tail call fastcc %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 10) #7, !dbg !5632
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %call, metadata !5602, metadata !DIExpression()), !dbg !5629
  store %struct.VEC_gimple_heap* %call, %struct.VEC_gimple_heap** %init_stmts, align 8, !dbg !5633
  %2 = load i64, i64* bitcast (%union.tree_node** @current_function_decl to i64*), align 8, !dbg !5634
  %3 = bitcast %union.tree_node** %vars to i8*, !dbg !5635
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #8, !dbg !5635
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !5605, metadata !DIExpression()), !dbg !5629
  store %union.tree_node* null, %union.tree_node** %vars, align 8, !dbg !5636
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %old_decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5637
  %bf.load = load i64, i64* %4, align 8, !dbg !5637
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5637
  %cmp = icmp eq i64 %bf.cast1, 29, !dbg !5637
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !5637

land.lhs.true:                                    ; preds = %entry
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5637
  %bf.load2 = load i64, i64* %5, align 8, !dbg !5637
  %bf.cast48 = and i64 %bf.load2, 65535, !dbg !5637
  %cmp5 = icmp eq i64 %bf.cast48, 29, !dbg !5637
  br i1 %cmp5, label %cond.end, label %cond.true, !dbg !5637

cond.true:                                        ; preds = %land.lhs.true, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4777, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5637
  br label %cond.end, !dbg !5637

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %possibly_inlined = getelementptr inbounds %union.tree_node, %union.tree_node* %old_decl, i64 0, i32 0, i32 5, !dbg !5638
  %bf.load6 = load i32, i32* %possibly_inlined, align 8, !dbg !5639
  %bf.set = or i32 %bf.load6, 65536, !dbg !5639
  store i32 %bf.set, i32* %possibly_inlined, align 8, !dbg !5639
  %call8 = tail call %struct.cgraph_node* @cgraph_node(%union.tree_node* %old_decl) #6, !dbg !5640
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %call8, metadata !5594, metadata !DIExpression()), !dbg !5629
  %call9 = tail call %struct.cgraph_node* @cgraph_node(%union.tree_node* %new_decl) #6, !dbg !5641
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %call9, metadata !5595, metadata !DIExpression()), !dbg !5629
  %6 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !5642
  %outlining_inline_function = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %6, i64 0, i32 21, !dbg !5643
  %7 = load void (%union.tree_node*)*, void (%union.tree_node*)** %outlining_inline_function, align 8, !dbg !5643
  tail call void %7(%union.tree_node* %old_decl) #6, !dbg !5644
  %artificial_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5645
  %8 = bitcast i40* %artificial_flag to i64*, !dbg !5645
  %bf.load10 = load i64, i64* %8, align 8, !dbg !5646
  %bf.set12 = or i64 %bf.load10, 4096, !dbg !5646
  store i64 %bf.set12, i64* %8, align 8, !dbg !5646
  %abstract_origin = getelementptr inbounds %union.tree_node, %union.tree_node* %old_decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, !dbg !5647
  %9 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !5647
  %tobool = icmp eq %union.tree_node* %9, null, !dbg !5647
  br i1 %tobool, label %cond.end18, label %cond.true14, !dbg !5647

cond.true14:                                      ; preds = %cond.end
  br label %cond.end18, !dbg !5647

cond.end18:                                       ; preds = %cond.end, %cond.true14
  %cond19 = phi %union.tree_node* [ %9, %cond.true14 ], [ %old_decl, %cond.end ], !dbg !5647
  %abstract_origin21 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, !dbg !5648
  store %union.tree_node* %cond19, %union.tree_node** %abstract_origin21, align 8, !dbg !5649
  %personality = getelementptr inbounds %union.tree_node, %union.tree_node* %old_decl, i64 0, i32 0, i32 2, !dbg !5650
  %10 = bitcast %union.tree_node** %personality to i64*, !dbg !5650
  %11 = load i64, i64* %10, align 8, !dbg !5650
  %personality24 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl, i64 0, i32 0, i32 2, !dbg !5651
  %12 = bitcast %union.tree_node** %personality24 to i64*, !dbg !5652
  store i64 %11, i64* %12, align 8, !dbg !5652
  %call25 = call i8* @memset(i8* nonnull %0, i32 0, i64 152) #6, !dbg !5653
  %call26 = call %struct.pointer_set_t* @pointer_set_create() #6, !dbg !5654
  %statements_to_fold = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 19, !dbg !5655
  store %struct.pointer_set_t* %call26, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !5656
  %call27 = call %struct.pointer_map_t* @pointer_map_create() #6, !dbg !5657
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !5658
  store %struct.pointer_map_t* %call27, %struct.pointer_map_t** %decl_map, align 8, !dbg !5659
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 22, !dbg !5660
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map, align 8, !dbg !5661
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 0, !dbg !5662
  store %union.tree_node* %old_decl, %union.tree_node** %src_fn, align 8, !dbg !5663
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !5664
  store %union.tree_node* %new_decl, %union.tree_node** %dst_fn, align 8, !dbg !5665
  %src_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 2, !dbg !5666
  store %struct.cgraph_node* %call8, %struct.cgraph_node** %src_node, align 8, !dbg !5667
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 3, !dbg !5668
  store %struct.cgraph_node* %call9, %struct.cgraph_node** %dst_node, align 8, !dbg !5669
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %old_decl, i64 0, i32 0, i32 1, !dbg !5670
  %13 = bitcast %struct.function** %f to i64*, !dbg !5670
  %14 = load i64, i64* %13, align 8, !dbg !5670
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !5671
  %15 = bitcast %struct.function** %src_cfun to i64*, !dbg !5672
  store i64 %14, i64* %15, align 8, !dbg !5672
  %ipa_transforms_to_apply = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %call8, i64 0, i32 17, !dbg !5673
  %16 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply, align 8, !dbg !5673
  %tobool30 = icmp eq %struct.VEC_ipa_opt_pass_heap* %16, null, !dbg !5674
  %17 = inttoptr i64 %14 to %struct.function*, !dbg !5675
  br i1 %tobool30, label %if.end, label %if.then, !dbg !5675

if.then:                                          ; preds = %cond.end18
  %ipa_transforms_to_apply32 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %call9, i64 0, i32 17, !dbg !5676
  %18 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply32, align 8, !dbg !5676
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_heap* %18, metadata !5606, metadata !DIExpression()), !dbg !5677
  br i1 false, label %if.then.cond.end42_crit_edge, label %cond.true37, !dbg !5678

if.then.cond.end42_crit_edge:                     ; preds = %if.then
  br label %cond.end42, !dbg !5678

cond.true37:                                      ; preds = %if.then
  %base40 = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %16, i64 0, i32 0, !dbg !5678
  br label %cond.end42, !dbg !5678

cond.end42:                                       ; preds = %if.then.cond.end42_crit_edge, %cond.true37
  %cond43 = phi %struct.VEC_ipa_opt_pass_base* [ %base40, %cond.true37 ], [ undef, %if.then.cond.end42_crit_edge ], !dbg !5678
  %call44 = call fastcc %struct.VEC_ipa_opt_pass_heap* @VEC_ipa_opt_pass_heap_copy(%struct.VEC_ipa_opt_pass_base* %cond43) #7, !dbg !5678
  %19 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !5679
  %ipa_transforms_to_apply46 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %19, i64 0, i32 17, !dbg !5680
  store %struct.VEC_ipa_opt_pass_heap* %call44, %struct.VEC_ipa_opt_pass_heap** %ipa_transforms_to_apply46, align 8, !dbg !5681
  call void @llvm.dbg.value(metadata i32 0, metadata !5609, metadata !DIExpression()), !dbg !5677
  %base49 = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %18, i64 0, i32 0, !dbg !5682
  br label %for.cond, !dbg !5685

for.cond:                                         ; preds = %for.body, %cond.end42
  %i33.0 = phi i32 [ 0, %cond.end42 ], [ %inc, %for.body ], !dbg !5686
  call void @llvm.dbg.value(metadata i32 %i33.0, metadata !5609, metadata !DIExpression()), !dbg !5677
  %call53 = call fastcc i32 @VEC_ipa_opt_pass_base_length(%struct.VEC_ipa_opt_pass_base* %base49) #7, !dbg !5687
  %cmp54 = icmp ult i32 %i33.0, %call53, !dbg !5688
  br i1 %cmp54, label %for.body, label %if.end.loopexit, !dbg !5689

for.body:                                         ; preds = %for.cond
  %20 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !5690
  %ipa_transforms_to_apply56 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %20, i64 0, i32 17, !dbg !5690
  %call63 = call fastcc %struct.ipa_opt_pass_d* @VEC_ipa_opt_pass_base_index(%struct.VEC_ipa_opt_pass_base* %base49, i32 %i33.0) #7, !dbg !5690
  %call64 = call fastcc %struct.ipa_opt_pass_d** @VEC_ipa_opt_pass_heap_safe_push(%struct.VEC_ipa_opt_pass_heap** nonnull %ipa_transforms_to_apply56, %struct.ipa_opt_pass_d* %call63) #7, !dbg !5690
  %inc = add i32 %i33.0, 1, !dbg !5691
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5609, metadata !DIExpression()), !dbg !5677
  br label %for.cond, !dbg !5692, !llvm.loop !5693

if.end.loopexit:                                  ; preds = %for.cond
  %.pre = load %struct.function*, %struct.function** %f, align 8, !dbg !5695
  br label %if.end, !dbg !5696

if.end:                                           ; preds = %if.end.loopexit, %cond.end18
  %21 = phi %struct.function* [ %.pre, %if.end.loopexit ], [ %17, %cond.end18 ], !dbg !5695
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 7, !dbg !5696
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !5697
  %tobool65 = icmp eq i8 %update_clones, 0, !dbg !5698
  %cond66 = select i1 %tobool65, i32 1, i32 2, !dbg !5698
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 12, !dbg !5699
  store i32 %cond66, i32* %transform_call_graph_edges, align 8, !dbg !5700
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 13, !dbg !5701
  store i8 1, i8* %transform_new_cfg, align 4, !dbg !5702
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 14, !dbg !5703
  store i8 0, i8* %transform_return_to_modify, align 1, !dbg !5704
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 18, !dbg !5705
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !5706
  store %union.tree_node* %new_decl, %union.tree_node** @current_function_decl, align 8, !dbg !5707
  %cfg = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, i32 1, !dbg !5695
  %22 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5695
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %22, i64 0, i32 0, !dbg !5695
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5695
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %23, metadata !5600, metadata !DIExpression()), !dbg !5629
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i64 0, i32 8, !dbg !5708
  %24 = load i64, i64* %count, align 8, !dbg !5708
  call fastcc void @initialize_cfun(%union.tree_node* %new_decl, %union.tree_node* %old_decl, i64 %24) #7, !dbg !5709
  %f70 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl, i64 0, i32 0, i32 1, !dbg !5710
  %25 = load %struct.function*, %struct.function** %f70, align 8, !dbg !5710
  call void @push_cfun(%struct.function* %25) #6, !dbg !5711
  %26 = load %struct.function*, %struct.function** %f, align 8, !dbg !5712
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %26, i64 0, i32 7, !dbg !5713
  %27 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !5713
  call void @llvm.dbg.value(metadata %union.tree_node* %27, metadata !5597, metadata !DIExpression()), !dbg !5629
  %tobool73 = icmp eq %union.tree_node* %27, null, !dbg !5714
  br i1 %tobool73, label %if.end82, label %if.then74, !dbg !5716

if.then74:                                        ; preds = %if.end
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call78 = call fastcc %union.tree_node* @copy_static_chain(%union.tree_node* nonnull %27, %struct.copy_body_data* nonnull %id) #7, !dbg !5717
  %28 = load %struct.function*, %struct.function** %f70, align 8, !dbg !5718
  %static_chain_decl81 = getelementptr inbounds %struct.function, %struct.function* %28, i64 0, i32 7, !dbg !5719
  store %union.tree_node* %call78, %union.tree_node** %static_chain_decl81, align 8, !dbg !5720
  br label %if.end82, !dbg !5718

if.end82:                                         ; preds = %if.end, %if.then74
  %tobool83 = icmp eq %struct.VEC_ipa_replace_map_p_gc* %tree_map, null, !dbg !5721
  br i1 %tobool83, label %if.end161, label %for.cond85.preheader, !dbg !5722

for.cond85.preheader:                             ; preds = %if.end82
  %base88 = getelementptr inbounds %struct.VEC_ipa_replace_map_p_gc, %struct.VEC_ipa_replace_map_p_gc* %tree_map, i64 0, i32 0, !dbg !5723
  br label %for.cond85, !dbg !5724

for.cond85:                                       ; preds = %for.cond85.preheader, %for.inc158
  %i.0 = phi i32 [ %inc159, %for.inc158 ], [ 0, %for.cond85.preheader ], !dbg !5725
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5598, metadata !DIExpression()), !dbg !5629
  %call92 = call fastcc i32 @VEC_ipa_replace_map_p_base_length(%struct.VEC_ipa_replace_map_p_base* nonnull %base88) #7, !dbg !5726
  %cmp93 = icmp ult i32 %i.0, %call92, !dbg !5727
  br i1 %cmp93, label %for.body95, label %if.end161.loopexit, !dbg !5724

for.body95:                                       ; preds = %for.cond85
  %call102 = call fastcc %struct.ipa_replace_map* @VEC_ipa_replace_map_p_base_index(%struct.VEC_ipa_replace_map_p_base* nonnull %base88, i32 %i.0) #7, !dbg !5728
  call void @llvm.dbg.value(metadata %struct.ipa_replace_map* %call102, metadata !5599, metadata !DIExpression()), !dbg !5629
  %replace_p = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %call102, i64 0, i32 2, !dbg !5729
  %29 = load i8, i8* %replace_p, align 8, !dbg !5729
  %tobool103 = icmp eq i8 %29, 0, !dbg !5730
  br i1 %tobool103, label %for.inc158, label %if.then104, !dbg !5731

if.then104:                                       ; preds = %for.body95
  %new_tree = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %call102, i64 0, i32 1, !dbg !5732
  %30 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5732
  call void @llvm.dbg.value(metadata %union.tree_node* %30, metadata !5615, metadata !DIExpression()), !dbg !5733
  %call105 = call %union.tree_node* @tree_strip_nop_conversions(%union.tree_node* %30) #6, !dbg !5734
  call void @llvm.dbg.value(metadata %union.tree_node* %call105, metadata !5615, metadata !DIExpression()), !dbg !5733
  %31 = getelementptr inbounds %union.tree_node, %union.tree_node* %call105, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5735
  %bf.load107 = load i64, i64* %31, align 8, !dbg !5735
  %bf.cast1094 = and i64 %bf.load107, 65535, !dbg !5737
  %cmp110 = icmp eq i64 %bf.cast1094, 118, !dbg !5737
  br i1 %cmp110, label %if.then112, label %if.end113, !dbg !5738

if.then112:                                       ; preds = %if.then104
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call105, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5739
  %32 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !5739
  call void @llvm.dbg.value(metadata %union.tree_node* %32, metadata !5615, metadata !DIExpression()), !dbg !5733
  %.phi.trans.insert = getelementptr inbounds %union.tree_node, %union.tree_node* %32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5740
  %bf.load115.pre = load i64, i64* %.phi.trans.insert, align 8, !dbg !5742
  br label %if.end113, !dbg !5743

if.end113:                                        ; preds = %if.then112, %if.then104
  %bf.load115 = phi i64 [ %bf.load115.pre, %if.then112 ], [ %bf.load107, %if.then104 ], !dbg !5742
  %op.0 = phi %union.tree_node* [ %32, %if.then112 ], [ %call105, %if.then104 ], !dbg !5733
  call void @llvm.dbg.value(metadata %union.tree_node* %op.0, metadata !5615, metadata !DIExpression()), !dbg !5733
  %bf.cast1175 = and i64 %bf.load115, 65535, !dbg !5744
  %cmp118 = icmp eq i64 %bf.cast1175, 121, !dbg !5744
  br i1 %cmp118, label %if.then120, label %if.end138, !dbg !5745

if.then120:                                       ; preds = %if.end113
  br label %while.cond, !dbg !5746

while.cond:                                       ; preds = %while.body, %if.then120
  %op.0.pn = phi %union.tree_node* [ %op.0, %if.then120 ], [ %op.1, %while.body ]
  %op.1.in = getelementptr inbounds %union.tree_node, %union.tree_node* %op.0.pn, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5748
  %op.1 = load %union.tree_node*, %union.tree_node** %op.1.in, align 8, !dbg !5748
  call void @llvm.dbg.value(metadata %union.tree_node* %op.1, metadata !5615, metadata !DIExpression()), !dbg !5733
  %call124 = call fastcc zeroext i8 @handled_component_p(%union.tree_node* %op.1) #7, !dbg !5749
  %tobool125 = icmp eq i8 %call124, 0, !dbg !5746
  br i1 %tobool125, label %while.end, label %while.body, !dbg !5746

while.body:                                       ; preds = %while.cond
  br label %while.cond, !dbg !5746, !llvm.loop !5750

while.end:                                        ; preds = %while.cond
  %op.1.lcssa = phi %union.tree_node* [ %op.1, %while.cond ], !dbg !5748
  %33 = getelementptr inbounds %union.tree_node, %union.tree_node* %op.1.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5752
  %bf.load130 = load i64, i64* %33, align 8, !dbg !5752
  %bf.cast1327 = and i64 %bf.load130, 65535, !dbg !5754
  %cmp133 = icmp eq i64 %bf.cast1327, 32, !dbg !5754
  br i1 %cmp133, label %if.then135, label %if.end138, !dbg !5755

if.then135:                                       ; preds = %while.end
  %call136 = call zeroext i8 @add_referenced_var(%union.tree_node* %op.1.lcssa) #6, !dbg !5756
  br label %if.end138, !dbg !5756

if.end138:                                        ; preds = %while.end, %if.then135, %if.end113
  %34 = bitcast %struct.ipa_replace_map* %call102 to i64**, !dbg !5757
  %35 = load i64*, i64** %34, align 8, !dbg !5757
  %bf.load140 = load i64, i64* %35, align 8, !dbg !5757
  %bf.cast1426 = and i64 %bf.load140, 65535, !dbg !5757
  %cmp143 = icmp eq i64 %bf.cast1426, 34, !dbg !5757
  %36 = bitcast i64* %35 to %union.tree_node*, !dbg !5757
  br i1 %cmp143, label %cond.end147, label %cond.true145, !dbg !5757

cond.true145:                                     ; preds = %if.end138
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4864, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5757
  %old_tree149.phi.trans.insert = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %call102, i64 0, i32 0, !dbg !5733
  %.pre10 = load %union.tree_node*, %union.tree_node** %old_tree149.phi.trans.insert, align 8, !dbg !5758
  br label %cond.end147, !dbg !5757

cond.end147:                                      ; preds = %if.end138, %cond.true145
  %37 = phi %union.tree_node* [ %36, %if.end138 ], [ %.pre10, %cond.true145 ], !dbg !5758
  %38 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !5759
  %39 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !5760
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  call void @llvm.dbg.value(metadata %union.tree_node** %vars, metadata !5605, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call152 = call fastcc %union.gimple_statement_d* @setup_one_parameter(%struct.copy_body_data* nonnull %id, %union.tree_node* %37, %union.tree_node* %38, %union.tree_node* %39, %struct.basic_block_def* null, %union.tree_node** nonnull %vars) #7, !dbg !5761
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call152, metadata !5610, metadata !DIExpression()), !dbg !5762
  %tobool153 = icmp eq %union.gimple_statement_d* %call152, null, !dbg !5763
  br i1 %tobool153, label %for.inc158, label %if.then154, !dbg !5765

if.then154:                                       ; preds = %cond.end147
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %init_stmts, metadata !5602, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call155 = call fastcc %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** nonnull %init_stmts, %union.gimple_statement_d* nonnull %call152) #7, !dbg !5766
  br label %for.inc158, !dbg !5766

for.inc158:                                       ; preds = %cond.end147, %for.body95, %if.then154
  %inc159 = add i32 %i.0, 1, !dbg !5767
  call void @llvm.dbg.value(metadata i32 %inc159, metadata !5598, metadata !DIExpression()), !dbg !5629
  br label %for.cond85, !dbg !5768, !llvm.loop !5769

if.end161.loopexit:                               ; preds = %for.cond85
  br label %if.end161, !dbg !5771

if.end161:                                        ; preds = %if.end161.loopexit, %if.end82
  %arguments = getelementptr inbounds %union.tree_node, %union.tree_node* %old_decl, i64 0, i32 0, i32 0, i32 2, !dbg !5771
  %40 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !5771
  %cmp162 = icmp eq %union.tree_node* %40, null, !dbg !5773
  br i1 %cmp162, label %if.end170, label %if.then164, !dbg !5774

if.then164:                                       ; preds = %if.end161
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  call void @llvm.dbg.value(metadata %union.tree_node** %vars, metadata !5605, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call167 = call fastcc %union.tree_node* @copy_arguments_for_versioning(%union.tree_node* nonnull %40, %struct.copy_body_data* nonnull %id, %struct.bitmap_head_def* %args_to_skip, %union.tree_node** nonnull %vars) #7, !dbg !5775
  %arguments169 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl, i64 0, i32 0, i32 0, i32 2, !dbg !5776
  store %union.tree_node* %call167, %union.tree_node** %arguments169, align 8, !dbg !5777
  br label %if.end170, !dbg !5776

if.end170:                                        ; preds = %if.end161, %if.then164
  %41 = bitcast %struct.copy_body_data* %id to %struct.tree_decl_common**, !dbg !5778
  %42 = load %struct.tree_decl_common*, %struct.tree_decl_common** %41, align 8, !dbg !5778
  %initial = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %42, i64 0, i32 5, !dbg !5778
  %43 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5778
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call173 = call fastcc %union.tree_node* @remap_blocks(%union.tree_node* %43, %struct.copy_body_data* nonnull %id) #7, !dbg !5779
  %initial175 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, !dbg !5780
  store %union.tree_node* %call173, %union.tree_node** %initial175, align 8, !dbg !5781
  %44 = load %union.tree_node*, %union.tree_node** %dst_fn, align 8, !dbg !5782
  call void @number_blocks(%union.tree_node* %44) #6, !dbg !5783
  %45 = load %union.tree_node*, %union.tree_node** %initial175, align 8, !dbg !5784
  %46 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !5785
  call void @llvm.dbg.value(metadata %union.tree_node* %46, metadata !5605, metadata !DIExpression()), !dbg !5629
  call fastcc void @declare_inline_vars(%union.tree_node* %45, %union.tree_node* %46) #7, !dbg !5786
  %47 = load %struct.function*, %struct.function** %f, align 8, !dbg !5787
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, i32 9, !dbg !5788
  %48 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !5788
  %cmp181 = icmp eq %union.tree_node* %48, null, !dbg !5789
  br i1 %cmp181, label %if.end220, label %if.then183, !dbg !5790

if.then183:                                       ; preds = %if.end170
  br label %for.cond187, !dbg !5791

for.cond187:                                      ; preds = %for.inc218, %if.then183
  %t_step.0 = phi %union.tree_node* [ %48, %if.then183 ], [ %t_step.0.pre, %for.inc218 ], !dbg !5792
  call void @llvm.dbg.value(metadata %union.tree_node* %t_step.0, metadata !5603, metadata !DIExpression()), !dbg !5629
  %tobool188 = icmp eq %union.tree_node* %t_step.0, null, !dbg !5793
  br i1 %tobool188, label %if.end220.loopexit, label %for.body189, !dbg !5793

for.body189:                                      ; preds = %for.cond187
  %49 = getelementptr inbounds %union.tree_node, %union.tree_node* %t_step.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5794
  %50 = load %union.tree_node*, %union.tree_node** %49, align 8, !dbg !5794
  call void @llvm.dbg.value(metadata %union.tree_node* %50, metadata !5618, metadata !DIExpression()), !dbg !5795
  %51 = getelementptr inbounds %union.tree_node, %union.tree_node* %50, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5796
  %bf.load191 = load i64, i64* %51, align 8, !dbg !5796
  %bf.cast1932 = and i64 %bf.load191, 67108864, !dbg !5796
  %tobool194 = icmp eq i64 %bf.cast1932, 0, !dbg !5796
  br i1 %tobool194, label %if.else, label %land.lhs.true195, !dbg !5798

land.lhs.true195:                                 ; preds = %for.body189
  %bf.cast2003 = and i64 %bf.load191, 4194304, !dbg !5799
  %tobool201 = icmp eq i64 %bf.cast2003, 0, !dbg !5799
  br i1 %tobool201, label %if.then202, label %if.else, !dbg !5800

if.then202:                                       ; preds = %land.lhs.true195
  %52 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5801
  %local_decls203 = getelementptr inbounds %struct.function, %struct.function* %52, i64 0, i32 9, !dbg !5801
  %53 = load %union.tree_node*, %union.tree_node** %local_decls203, align 8, !dbg !5801
  %call204 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %50, %union.tree_node* %53) #6, !dbg !5801
  %54 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5802
  %local_decls206 = getelementptr inbounds %struct.function, %struct.function* %54, i64 0, i32 9, !dbg !5803
  store %union.tree_node* %call204, %union.tree_node** %local_decls206, align 8, !dbg !5804
  br label %for.inc218, !dbg !5802

if.else:                                          ; preds = %land.lhs.true195, %for.body189
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call207 = call fastcc zeroext i8 @can_be_nonlocal(%union.tree_node* %50, %struct.copy_body_data* nonnull %id) #7, !dbg !5805
  %tobool208 = icmp eq i8 %call207, 0, !dbg !5805
  br i1 %tobool208, label %if.then209, label %for.inc218, !dbg !5807

if.then209:                                       ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call210 = call %union.tree_node* @remap_decl(%union.tree_node* %50, %struct.copy_body_data* nonnull %id) #7, !dbg !5808
  %55 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5808
  %local_decls212 = getelementptr inbounds %struct.function, %struct.function* %55, i64 0, i32 9, !dbg !5808
  %56 = load %union.tree_node*, %union.tree_node** %local_decls212, align 8, !dbg !5808
  %call213 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call210, %union.tree_node* %56) #6, !dbg !5808
  %57 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5809
  %local_decls215 = getelementptr inbounds %struct.function, %struct.function* %57, i64 0, i32 9, !dbg !5810
  store %union.tree_node* %call213, %union.tree_node** %local_decls215, align 8, !dbg !5811
  br label %for.inc218, !dbg !5809

for.inc218:                                       ; preds = %if.else, %if.then202, %if.then209
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %t_step.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !5812
  %t_step.0.pre = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5792
  br label %for.cond187, !dbg !5813, !llvm.loop !5814

if.end220.loopexit:                               ; preds = %for.cond187
  br label %if.end220, !dbg !5816

if.end220:                                        ; preds = %if.end220.loopexit, %if.end170
  %58 = load i64, i64* %count, align 8, !dbg !5816
  %59 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5817
  %cfg223 = getelementptr inbounds %struct.function, %struct.function* %59, i64 0, i32 1, !dbg !5817
  %60 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg223, align 8, !dbg !5817
  %x_entry_block_ptr224 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %60, i64 0, i32 0, !dbg !5817
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr224, align 8, !dbg !5817
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %60, i64 0, i32 1, !dbg !5818
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5818
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call227 = call fastcc %union.tree_node* @copy_body(%struct.copy_body_data* nonnull %id, i64 %58, i32 10000, %struct.basic_block_def* %61, %struct.basic_block_def* %62) #7, !dbg !5819
  %result = getelementptr inbounds %union.tree_node, %union.tree_node* %old_decl, i64 0, i32 0, i32 0, i32 3, !dbg !5820
  %63 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5820
  %cmp229 = icmp eq %union.tree_node* %63, null, !dbg !5821
  br i1 %cmp229, label %if.end239, label %if.then231, !dbg !5822

if.then231:                                       ; preds = %if.end220
  call void @llvm.dbg.value(metadata %union.tree_node** %result, metadata !5623, metadata !DIExpression()), !dbg !5823
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call234 = call %union.tree_node* @remap_decl(%union.tree_node* nonnull %63, %struct.copy_body_data* nonnull %id) #7, !dbg !5824
  %result236 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl, i64 0, i32 0, i32 0, i32 3, !dbg !5825
  store %union.tree_node* %call234, %union.tree_node** %result236, align 8, !dbg !5826
  %64 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i64 0, i32 15), align 8, !dbg !5827
  call void %64(%union.tree_node* %call234) #6, !dbg !5828
  br label %if.end239, !dbg !5829

if.end239:                                        ; preds = %if.end220, %if.then231
  call void @number_blocks(%union.tree_node* %new_decl) #6, !dbg !5830
  %65 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5831
  %cfg241 = getelementptr inbounds %struct.function, %struct.function* %65, i64 0, i32 1, !dbg !5831
  %66 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg241, align 8, !dbg !5831
  %x_entry_block_ptr242 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %66, i64 0, i32 0, !dbg !5831
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr242, align 8, !dbg !5831
  %call243 = call fastcc %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %67) #7, !dbg !5832
  %call244 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call243) #6, !dbg !5833
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call244, metadata !5601, metadata !DIExpression()), !dbg !5629
  br label %while.cond245, !dbg !5834

while.cond245:                                    ; preds = %while.body254, %if.end239
  %68 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %init_stmts, align 8, !dbg !5835
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %68, metadata !5602, metadata !DIExpression()), !dbg !5629
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %68, metadata !5602, metadata !DIExpression()), !dbg !5629
  %base248 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %68, i64 0, i32 0, !dbg !5835
  %call252 = call fastcc i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %base248) #7, !dbg !5835
  %tobool253 = icmp eq i32 %call252, 0, !dbg !5834
  br i1 %tobool253, label %while.end262, label %while.body254, !dbg !5834

while.body254:                                    ; preds = %while.cond245
  %69 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %init_stmts, align 8, !dbg !5836
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %69, metadata !5602, metadata !DIExpression()), !dbg !5629
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %69, metadata !5602, metadata !DIExpression()), !dbg !5629
  %base257 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %69, i64 0, i32 0, !dbg !5836
  %call261 = call fastcc %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %base257) #7, !dbg !5836
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  call fastcc void @insert_init_stmt(%struct.copy_body_data* nonnull %id, %struct.basic_block_def* %call244, %union.gimple_statement_d* %call261) #7, !dbg !5837
  br label %while.cond245, !dbg !5834, !llvm.loop !5838

while.end262:                                     ; preds = %while.cond245
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  call fastcc void @update_clone_info(%struct.copy_body_data* nonnull %id) #7, !dbg !5840
  %70 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5841
  %nonlocal_goto_save_area = getelementptr inbounds %struct.function, %struct.function* %70, i64 0, i32 8, !dbg !5842
  %71 = load %union.tree_node*, %union.tree_node** %nonlocal_goto_save_area, align 8, !dbg !5842
  %tobool264 = icmp eq %union.tree_node* %71, null, !dbg !5841
  br i1 %tobool264, label %if.end270, label %if.then265, !dbg !5843

if.then265:                                       ; preds = %while.end262
  %72 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !5844
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %72) #8, !dbg !5844
  %call266 = call i8* @memset(i8* nonnull %72, i32 0, i64 56) #6, !dbg !5845
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 1, !dbg !5846
  %73 = bitcast i8** %info to %struct.copy_body_data**, !dbg !5847
  store %struct.copy_body_data* %id, %struct.copy_body_data** %73, align 8, !dbg !5847
  %74 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5848
  %nonlocal_goto_save_area268 = getelementptr inbounds %struct.function, %struct.function* %74, i64 0, i32 8, !dbg !5848
  %call269 = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %nonlocal_goto_save_area268, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @remap_gimple_op_r, i8* nonnull %72, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !5848
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %72) #8, !dbg !5849
  br label %if.end270, !dbg !5850

if.end270:                                        ; preds = %while.end262, %if.then265
  %75 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !5851
  call void @pointer_map_destroy(%struct.pointer_map_t* %75) #6, !dbg !5852
  %76 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !5853
  %tobool273 = icmp eq %struct.pointer_map_t* %76, null, !dbg !5855
  br i1 %tobool273, label %if.end276, label %if.then274, !dbg !5856

if.then274:                                       ; preds = %if.end270
  call void @pointer_map_destroy(%struct.pointer_map_t* nonnull %76) #6, !dbg !5857
  br label %if.end276, !dbg !5857

if.end276:                                        ; preds = %if.end270, %if.then274
  call void @free_dominance_info(i32 1) #6, !dbg !5858
  call void @free_dominance_info(i32 2) #6, !dbg !5859
  %77 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !5860
  call fastcc void @fold_marked_statements(i32 0, %struct.pointer_set_t* %77) #7, !dbg !5861
  %78 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !5862
  call void @pointer_set_destroy(%struct.pointer_set_t* %78) #6, !dbg !5863
  call void @fold_cond_expr_cond() #6, !dbg !5864
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !5596, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  %call279 = call fastcc zeroext i8 @delete_unreachable_blocks_update_callgraph(%struct.copy_body_data* nonnull %id) #7, !dbg !5865
  call void @update_ssa(i32 2048) #6, !dbg !5866
  call void @free_dominance_info(i32 1) #6, !dbg !5867
  call void @free_dominance_info(i32 2) #6, !dbg !5868
  %debug_stmts = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 21, !dbg !5869
  %79 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %debug_stmts, align 8, !dbg !5869
  %tobool280 = icmp eq %struct.VEC_gimple_heap* %79, null, !dbg !5869
  br i1 %tobool280, label %cond.end283, label %cond.true281, !dbg !5869

cond.true281:                                     ; preds = %if.end276
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4947, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5869
  br label %cond.end283, !dbg !5869

cond.end283:                                      ; preds = %if.end276, %cond.true281
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %init_stmts, metadata !5602, metadata !DIExpression(DW_OP_deref)), !dbg !5629
  call fastcc void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** nonnull %init_stmts) #7, !dbg !5870
  call void @pop_cfun() #6, !dbg !5871
  store i64 %2, i64* bitcast (%union.tree_node** @current_function_decl to i64*), align 8, !dbg !5872
  %tobool285 = icmp eq i64 %2, 0, !dbg !5873
  br i1 %tobool285, label %cond.end293, label %lor.lhs.false, !dbg !5873

lor.lhs.false:                                    ; preds = %cond.end283
  %80 = inttoptr i64 %2 to %struct.tree_function_decl*, !dbg !5873
  %f287 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %80, i64 0, i32 1, !dbg !5873
  %81 = load %struct.function*, %struct.function** %f287, align 8, !dbg !5873
  %82 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5873
  %cmp289 = icmp eq %struct.function* %81, %82, !dbg !5873
  br i1 %cmp289, label %cond.end293, label %cond.true291, !dbg !5873

cond.true291:                                     ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4952, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5873
  br label %cond.end293, !dbg !5873

cond.end293:                                      ; preds = %cond.end283, %lor.lhs.false, %cond.true291
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #8, !dbg !5874
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !5874
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %0) #8, !dbg !5874
  ret void, !dbg !5874
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !5875 {
entry:
  call void @llvm.dbg.value(metadata i32 10, metadata !5879, metadata !DIExpression()), !dbg !5880
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 10) #6, !dbg !5881
  %0 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !5881
  ret %struct.VEC_gimple_heap* %0, !dbg !5881
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_ipa_opt_pass_heap* @VEC_ipa_opt_pass_heap_copy(%struct.VEC_ipa_opt_pass_base* %vec_) unnamed_addr #0 !dbg !5882 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_base* %vec_, metadata !5887, metadata !DIExpression()), !dbg !5890
  %tobool = icmp eq %struct.VEC_ipa_opt_pass_base* %vec_, null, !dbg !5891
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5891

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %vec_, i64 0, i32 0, !dbg !5891
  %0 = load i32, i32* %num, align 8, !dbg !5891
  %phitmp = zext i32 %0 to i64, !dbg !5891
  br label %cond.end, !dbg !5891

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i64 [ %phitmp, %cond.true ], [ 0, %entry ]
  call void @llvm.dbg.value(metadata i64 %cond, metadata !5888, metadata !DIExpression()), !dbg !5890
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_heap* null, metadata !5889, metadata !DIExpression()), !dbg !5890
  %tobool1 = icmp eq i64 %cond, 0, !dbg !5892
  br i1 %tobool1, label %if.end, label %if.then, !dbg !5891

if.then:                                          ; preds = %cond.end
  %conv2 = trunc i64 %cond to i32, !dbg !5894
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 %conv2) #6, !dbg !5894
  %1 = bitcast i8* %call to %struct.VEC_ipa_opt_pass_heap*, !dbg !5894
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_heap* %1, metadata !5889, metadata !DIExpression()), !dbg !5890
  %num4 = bitcast i8* %call to i32*, !dbg !5894
  store i32 %conv2, i32* %num4, align 8, !dbg !5894
  %vec = getelementptr inbounds i8, i8* %call, i64 8, !dbg !5894
  %arraydecay7 = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %vec_, i64 0, i32 2, i64 0, !dbg !5894
  %2 = bitcast %struct.ipa_opt_pass_d** %arraydecay7 to i8*, !dbg !5894
  %mul = shl nuw nsw i64 %cond, 3, !dbg !5894
  %call8 = tail call i8* @memcpy(i8* nonnull %vec, i8* nonnull %2, i64 %mul) #6, !dbg !5894
  br label %if.end, !dbg !5894

if.end:                                           ; preds = %cond.end, %if.then
  %new_vec_.0 = phi %struct.VEC_ipa_opt_pass_heap* [ %1, %if.then ], [ null, %cond.end ], !dbg !5890
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_heap* %new_vec_.0, metadata !5889, metadata !DIExpression()), !dbg !5890
  ret %struct.VEC_ipa_opt_pass_heap* %new_vec_.0, !dbg !5891
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_ipa_opt_pass_base_length(%struct.VEC_ipa_opt_pass_base* %vec_) unnamed_addr #0 !dbg !5896 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_base* %vec_, metadata !5902, metadata !DIExpression()), !dbg !5903
  %tobool = icmp eq %struct.VEC_ipa_opt_pass_base* %vec_, null, !dbg !5904
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5904

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %vec_, i64 0, i32 0, !dbg !5904
  %0 = load i32, i32* %num, align 8, !dbg !5904
  br label %cond.end, !dbg !5904

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !5904
  ret i32 %cond, !dbg !5904
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ipa_opt_pass_d** @VEC_ipa_opt_pass_heap_safe_push(%struct.VEC_ipa_opt_pass_heap** %vec_, %struct.ipa_opt_pass_d* %obj_) unnamed_addr #0 !dbg !5905 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_heap** %vec_, metadata !5911, metadata !DIExpression()), !dbg !5913
  call void @llvm.dbg.value(metadata %struct.ipa_opt_pass_d* %obj_, metadata !5912, metadata !DIExpression()), !dbg !5913
  %call = tail call fastcc i32 @VEC_ipa_opt_pass_heap_reserve(%struct.VEC_ipa_opt_pass_heap** %vec_, i32 1) #7, !dbg !5914
  %0 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %vec_, align 8, !dbg !5914
  %tobool = icmp eq %struct.VEC_ipa_opt_pass_heap* %0, null, !dbg !5914
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5914

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %0, i64 0, i32 0, !dbg !5914
  br label %cond.end, !dbg !5914

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_ipa_opt_pass_base* [ %base, %cond.true ], [ null, %entry ], !dbg !5914
  %call1 = tail call fastcc %struct.ipa_opt_pass_d** @VEC_ipa_opt_pass_base_quick_push(%struct.VEC_ipa_opt_pass_base* %cond, %struct.ipa_opt_pass_d* %obj_) #7, !dbg !5914
  ret %struct.ipa_opt_pass_d** %call1, !dbg !5914
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ipa_opt_pass_d* @VEC_ipa_opt_pass_base_index(%struct.VEC_ipa_opt_pass_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !5915 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_base* %vec_, metadata !5919, metadata !DIExpression()), !dbg !5921
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !5920, metadata !DIExpression()), !dbg !5921
  br label %land.end, !dbg !5922

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !5922
  %arrayidx = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !5922
  %0 = load %struct.ipa_opt_pass_d*, %struct.ipa_opt_pass_d** %arrayidx, align 8, !dbg !5922
  ret %struct.ipa_opt_pass_d* %0, !dbg !5922
}

; Function Attrs: nounwind uwtable
define internal fastcc void @initialize_cfun(%union.tree_node* %new_fndecl, %union.tree_node* %callee_fndecl, i64 %count) unnamed_addr #5 !dbg !5923 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %new_fndecl, metadata !5927, metadata !DIExpression()), !dbg !5932
  call void @llvm.dbg.value(metadata %union.tree_node* %callee_fndecl, metadata !5928, metadata !DIExpression()), !dbg !5932
  call void @llvm.dbg.value(metadata i64 %count, metadata !5929, metadata !DIExpression()), !dbg !5932
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %callee_fndecl, i64 0, i32 0, i32 1, !dbg !5933
  %0 = load %struct.function*, %struct.function** %f, align 8, !dbg !5933
  call void @llvm.dbg.value(metadata %struct.function* %0, metadata !5930, metadata !DIExpression()), !dbg !5932
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !5934
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5934
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i64 0, i32 0, !dbg !5934
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5934
  %count1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i64 0, i32 8, !dbg !5936
  %3 = load i64, i64* %count1, align 8, !dbg !5936
  %tobool = icmp eq i64 %3, 0, !dbg !5934
  br i1 %tobool, label %if.end, label %if.then, !dbg !5937

if.then:                                          ; preds = %entry
  %mul = mul nsw i64 %count, 10000, !dbg !5938
  %div = sdiv i64 %mul, %3, !dbg !5939
  call void @llvm.dbg.value(metadata i64 %div, metadata !5931, metadata !DIExpression()), !dbg !5932
  br label %if.end, !dbg !5940

if.end:                                           ; preds = %entry, %if.then
  %count_scale.0 = phi i64 [ %div, %if.then ], [ 10000, %entry ], !dbg !5941
  call void @llvm.dbg.value(metadata i64 %count_scale.0, metadata !5931, metadata !DIExpression()), !dbg !5932
  tail call void @gimple_register_cfg_hooks() #6, !dbg !5942
  tail call void @push_struct_function(%union.tree_node* %new_fndecl) #6, !dbg !5943
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5944
  %value_histograms = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, i32 5, !dbg !5944
  %5 = load %struct.htab*, %struct.htab** %value_histograms, align 8, !dbg !5944
  %cmp = icmp eq %struct.htab* %5, null, !dbg !5944
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5944

cond.true:                                        ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1989, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5944
  %.pre = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5945
  br label %cond.end, !dbg !5944

cond.end:                                         ; preds = %if.end, %cond.true
  %6 = phi %struct.function* [ %4, %if.end ], [ %.pre, %cond.true ], !dbg !5945
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, i32 9, !dbg !5945
  %7 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !5945
  %cmp6 = icmp eq %union.tree_node* %7, null, !dbg !5945
  br i1 %cmp6, label %cond.end9, label %cond.true7, !dbg !5945

cond.true7:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1990, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5945
  %.pre1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5946
  br label %cond.end9, !dbg !5945

cond.end9:                                        ; preds = %cond.end, %cond.true7
  %8 = phi %struct.function* [ %6, %cond.end ], [ %.pre1, %cond.true7 ], !dbg !5946
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, i32 1, !dbg !5946
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !5946
  %cmp13 = icmp eq %struct.control_flow_graph* %9, null, !dbg !5946
  br i1 %cmp13, label %cond.end16, label %cond.true14, !dbg !5946

cond.true14:                                      ; preds = %cond.end9
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1991, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5946
  %.pre2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5947
  br label %cond.end16, !dbg !5946

cond.end16:                                       ; preds = %cond.end9, %cond.true14
  %10 = phi %struct.function* [ %8, %cond.end9 ], [ %.pre2, %cond.true14 ], !dbg !5947
  %decl = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, i32 6, !dbg !5947
  %11 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !5947
  %cmp19 = icmp eq %union.tree_node* %11, %new_fndecl, !dbg !5947
  br i1 %cmp19, label %cond.end22, label %cond.true20, !dbg !5947

cond.true20:                                      ; preds = %cond.end16
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1992, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !5947
  %.pre3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5948
  br label %cond.end22, !dbg !5947

cond.end22:                                       ; preds = %cond.end16, %cond.true20
  %12 = phi %struct.function* [ %10, %cond.end16 ], [ %.pre3, %cond.true20 ], !dbg !5949
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 7, !dbg !5950
  %13 = bitcast %union.tree_node** %static_chain_decl to i64*, !dbg !5950
  %14 = load i64, i64* %13, align 8, !dbg !5950
  %static_chain_decl25 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, i32 7, !dbg !5951
  %15 = bitcast %union.tree_node** %static_chain_decl25 to i64*, !dbg !5952
  store i64 %14, i64* %15, align 8, !dbg !5952
  %nonlocal_goto_save_area = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 8, !dbg !5953
  %16 = bitcast %union.tree_node** %nonlocal_goto_save_area to i64*, !dbg !5953
  %17 = load i64, i64* %16, align 8, !dbg !5953
  %nonlocal_goto_save_area27 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, i32 8, !dbg !5954
  %18 = bitcast %union.tree_node** %nonlocal_goto_save_area27 to i64*, !dbg !5955
  store i64 %17, i64* %18, align 8, !dbg !5955
  %function_end_locus = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 16, !dbg !5956
  %19 = load i32, i32* %function_end_locus, align 4, !dbg !5956
  %function_end_locus29 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, i32 16, !dbg !5957
  store i32 %19, i32* %function_end_locus29, align 4, !dbg !5958
  %curr_properties = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 17, !dbg !5959
  %20 = load i32, i32* %curr_properties, align 8, !dbg !5959
  %curr_properties31 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, i32 17, !dbg !5960
  store i32 %20, i32* %curr_properties31, align 8, !dbg !5961
  %last_verified = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 18, !dbg !5962
  %21 = load i32, i32* %last_verified, align 4, !dbg !5962
  %last_verified33 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, i32 18, !dbg !5963
  store i32 %21, i32* %last_verified33, align 4, !dbg !5964
  %va_list_gpr_size = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 20, !dbg !5965
  %bf.load = load i32, i32* %va_list_gpr_size, align 8, !dbg !5965
  %bf.clear = and i32 %bf.load, 255, !dbg !5965
  %va_list_gpr_size35 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, i32 20, !dbg !5966
  %bf.load36 = load i32, i32* %va_list_gpr_size35, align 8, !dbg !5967
  %bf.clear37 = and i32 %bf.load36, -256, !dbg !5967
  %bf.set = or i32 %bf.clear37, %bf.clear, !dbg !5967
  store i32 %bf.set, i32* %va_list_gpr_size35, align 8, !dbg !5967
  %bf.load38 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5968
  %bf.clear39 = and i32 %bf.load38, 65280, !dbg !5968
  %bf.clear44 = and i32 %bf.set, -65281, !dbg !5969
  %bf.set45 = or i32 %bf.clear44, %bf.clear39, !dbg !5969
  store i32 %bf.set45, i32* %va_list_gpr_size35, align 8, !dbg !5969
  %bf.load46 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5970
  %bf.clear48 = and i32 %bf.load46, 196608, !dbg !5970
  %bf.clear54 = and i32 %bf.set45, -196609, !dbg !5971
  %bf.set55 = or i32 %bf.clear54, %bf.clear48, !dbg !5971
  store i32 %bf.set55, i32* %va_list_gpr_size35, align 8, !dbg !5971
  %bf.load56 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5972
  %bf.clear58 = and i32 %bf.load56, 1048576, !dbg !5972
  %bf.clear64 = and i32 %bf.set55, -1048577, !dbg !5973
  %bf.set65 = or i32 %bf.clear64, %bf.clear58, !dbg !5973
  store i32 %bf.set65, i32* %va_list_gpr_size35, align 8, !dbg !5973
  %bf.load66 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5974
  %bf.clear68 = and i32 %bf.load66, 4194304, !dbg !5974
  %bf.clear74 = and i32 %bf.set65, -4194305, !dbg !5975
  %bf.set75 = or i32 %bf.clear74, %bf.clear68, !dbg !5975
  store i32 %bf.set75, i32* %va_list_gpr_size35, align 8, !dbg !5975
  %bf.load76 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5976
  %bf.clear78 = and i32 %bf.load76, 8388608, !dbg !5976
  %bf.clear84 = and i32 %bf.set75, -8388609, !dbg !5977
  %bf.set85 = or i32 %bf.clear84, %bf.clear78, !dbg !5977
  store i32 %bf.set85, i32* %va_list_gpr_size35, align 8, !dbg !5977
  %bf.load86 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5978
  %bf.clear88 = and i32 %bf.load86, 16777216, !dbg !5978
  %bf.clear94 = and i32 %bf.set85, -16777217, !dbg !5979
  %bf.set95 = or i32 %bf.clear94, %bf.clear88, !dbg !5979
  store i32 %bf.set95, i32* %va_list_gpr_size35, align 8, !dbg !5979
  %bf.load96 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5980
  %bf.clear98 = and i32 %bf.load96, 67108864, !dbg !5980
  %bf.clear104 = and i32 %bf.set95, -67108865, !dbg !5981
  %bf.set105 = or i32 %bf.clear104, %bf.clear98, !dbg !5981
  store i32 %bf.set105, i32* %va_list_gpr_size35, align 8, !dbg !5981
  %bf.load106 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5982
  %bf.clear108 = and i32 %bf.load106, 134217728, !dbg !5982
  %bf.clear114 = and i32 %bf.set105, -134217729, !dbg !5983
  %bf.set115 = or i32 %bf.clear114, %bf.clear108, !dbg !5983
  store i32 %bf.set115, i32* %va_list_gpr_size35, align 8, !dbg !5983
  %bf.load116 = load i32, i32* %va_list_gpr_size, align 8, !dbg !5984
  %bf.clear118 = and i32 %bf.load116, 268435456, !dbg !5984
  %bf.clear124 = and i32 %bf.set115, -268435457, !dbg !5985
  %bf.set125 = or i32 %bf.clear124, %bf.clear118, !dbg !5985
  store i32 %bf.set125, i32* %va_list_gpr_size35, align 8, !dbg !5985
  tail call void @init_empty_tree_cfg() #6, !dbg !5986
  %22 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5987
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %22, i64 0, i32 7, !dbg !5987
  %23 = load i32, i32* %x_profile_status, align 8, !dbg !5987
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5988
  %cfg128 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, i32 1, !dbg !5988
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg128, align 8, !dbg !5988
  %x_profile_status129 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i64 0, i32 7, !dbg !5988
  store i32 %23, i32* %x_profile_status129, align 8, !dbg !5989
  %26 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5990
  %x_entry_block_ptr131 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %26, i64 0, i32 0, !dbg !5990
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr131, align 8, !dbg !5990
  %count132 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i64 0, i32 8, !dbg !5991
  %28 = load i64, i64* %count132, align 8, !dbg !5991
  %mul133 = mul nsw i64 %28, %count_scale.0, !dbg !5992
  %div134 = sdiv i64 %mul133, 10000, !dbg !5993
  %29 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg128, align 8, !dbg !5994
  %x_entry_block_ptr137 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %29, i64 0, i32 0, !dbg !5994
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr137, align 8, !dbg !5994
  %count138 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i64 0, i32 8, !dbg !5995
  store i64 %div134, i64* %count138, align 8, !dbg !5996
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5997
  %x_entry_block_ptr140 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i64 0, i32 0, !dbg !5997
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr140, align 8, !dbg !5997
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i64 0, i32 11, !dbg !5998
  %33 = load i32, i32* %frequency, align 8, !dbg !5998
  %34 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg128, align 8, !dbg !5999
  %x_entry_block_ptr143 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %34, i64 0, i32 0, !dbg !5999
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr143, align 8, !dbg !5999
  %frequency144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i64 0, i32 11, !dbg !6000
  store i32 %33, i32* %frequency144, align 8, !dbg !6001
  %36 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6002
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %36, i64 0, i32 1, !dbg !6002
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !6002
  %count146 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i64 0, i32 8, !dbg !6003
  %38 = load i64, i64* %count146, align 8, !dbg !6003
  %mul147 = mul nsw i64 %38, %count_scale.0, !dbg !6004
  %div148 = sdiv i64 %mul147, 10000, !dbg !6005
  %39 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg128, align 8, !dbg !6006
  %x_exit_block_ptr151 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %39, i64 0, i32 1, !dbg !6006
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr151, align 8, !dbg !6006
  %count152 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i64 0, i32 8, !dbg !6007
  store i64 %div148, i64* %count152, align 8, !dbg !6008
  %41 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6009
  %x_exit_block_ptr154 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %41, i64 0, i32 1, !dbg !6009
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr154, align 8, !dbg !6009
  %frequency155 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i64 0, i32 11, !dbg !6010
  %43 = load i32, i32* %frequency155, align 8, !dbg !6010
  %44 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg128, align 8, !dbg !6011
  %x_exit_block_ptr158 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %44, i64 0, i32 1, !dbg !6011
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr158, align 8, !dbg !6011
  %frequency159 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i64 0, i32 11, !dbg !6012
  store i32 %43, i32* %frequency159, align 8, !dbg !6013
  %eh = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 0, !dbg !6014
  %46 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !6014
  %tobool160 = icmp eq %struct.eh_status* %46, null, !dbg !6016
  br i1 %tobool160, label %if.end162, label %if.then161, !dbg !6017

if.then161:                                       ; preds = %cond.end22
  tail call void @init_eh_for_function() #6, !dbg !6018
  br label %if.end162, !dbg !6018

if.end162:                                        ; preds = %cond.end22, %if.then161
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 3, !dbg !6019
  %47 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6019
  %tobool163 = icmp eq %struct.gimple_df* %47, null, !dbg !6021
  br i1 %tobool163, label %if.end171, label %if.then164, !dbg !6022

if.then164:                                       ; preds = %if.end162
  %48 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6023
  tail call void @init_tree_ssa(%struct.function* %48) #6, !dbg !6025
  %49 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6026
  %gimple_df167 = getelementptr inbounds %struct.function, %struct.function* %49, i64 0, i32 3, !dbg !6027
  %50 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df167, align 8, !dbg !6027
  %in_ssa_p = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %50, i64 0, i32 10, !dbg !6028
  %bf.load168 = load i8, i8* %in_ssa_p, align 8, !dbg !6029
  %bf.set170 = or i8 %bf.load168, 1, !dbg !6029
  store i8 %bf.set170, i8* %in_ssa_p, align 8, !dbg !6029
  tail call void @init_ssa_operands() #6, !dbg !6030
  br label %if.end171, !dbg !6031

if.end171:                                        ; preds = %if.end162, %if.then164
  tail call void @pop_cfun() #6, !dbg !6032
  ret void, !dbg !6033
}

declare dso_local void @push_cfun(%struct.function*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @copy_static_chain(%union.tree_node* %static_chain, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !6034 {
entry:
  %static_chain.addr = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %static_chain, metadata !6036, metadata !DIExpression()), !dbg !6044
  store %union.tree_node* %static_chain, %union.tree_node** %static_chain.addr, align 8
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6037, metadata !DIExpression()), !dbg !6044
  call void @llvm.dbg.value(metadata %union.tree_node** %static_chain.addr, metadata !6038, metadata !DIExpression()), !dbg !6044
  call void @llvm.dbg.value(metadata %union.tree_node** %static_chain.addr, metadata !6039, metadata !DIExpression()), !dbg !6044
  br label %for.cond, !dbg !6045

for.cond:                                         ; preds = %for.body, %entry
  %0 = phi %union.tree_node* [ %static_chain, %entry ], [ %.pre, %for.body ], !dbg !6046
  %pvar.0 = phi %union.tree_node** [ %static_chain.addr, %entry ], [ %chain2, %for.body ], !dbg !6047
  call void @llvm.dbg.value(metadata %union.tree_node** %pvar.0, metadata !6039, metadata !DIExpression()), !dbg !6044
  %tobool = icmp eq %union.tree_node* %0, null, !dbg !6048
  br i1 %tobool, label %for.end, label %for.body, !dbg !6048

for.body:                                         ; preds = %for.cond
  %call = tail call %union.tree_node* @remap_decl(%union.tree_node* nonnull %0, %struct.copy_body_data* %id) #7, !dbg !6049
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6040, metadata !DIExpression()), !dbg !6050
  %1 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i64 0, i32 15), align 8, !dbg !6051
  tail call void %1(%union.tree_node* %call) #6, !dbg !6052
  %2 = bitcast %union.tree_node** %pvar.0 to %struct.tree_common**, !dbg !6053
  %3 = load %struct.tree_common*, %struct.tree_common** %2, align 8, !dbg !6053
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3, i64 0, i32 1, !dbg !6053
  %4 = bitcast %union.tree_node** %chain to i64*, !dbg !6053
  %5 = load i64, i64* %4, align 8, !dbg !6053
  %chain2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6054
  %6 = bitcast %union.tree_node** %chain2 to i64*, !dbg !6055
  store i64 %5, i64* %6, align 8, !dbg !6055
  store %union.tree_node* %call, %union.tree_node** %pvar.0, align 8, !dbg !6056
  call void @llvm.dbg.value(metadata %union.tree_node** %chain2, metadata !6039, metadata !DIExpression()), !dbg !6044
  %.pre = load %union.tree_node*, %union.tree_node** %chain2, align 8, !dbg !6046
  br label %for.cond, !dbg !6057, !llvm.loop !6058

for.end:                                          ; preds = %for.cond
  %7 = load %union.tree_node*, %union.tree_node** %static_chain.addr, align 8, !dbg !6060
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !6036, metadata !DIExpression()), !dbg !6044
  ret %union.tree_node* %7, !dbg !6061
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_ipa_replace_map_p_base_length(%struct.VEC_ipa_replace_map_p_base* %vec_) unnamed_addr #0 !dbg !6062 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_replace_map_p_base* %vec_, metadata !6068, metadata !DIExpression()), !dbg !6069
  %tobool = icmp eq %struct.VEC_ipa_replace_map_p_base* %vec_, null, !dbg !6070
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6070

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_ipa_replace_map_p_base, %struct.VEC_ipa_replace_map_p_base* %vec_, i64 0, i32 0, !dbg !6070
  %0 = load i32, i32* %num, align 8, !dbg !6070
  br label %cond.end, !dbg !6070

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !6070
  ret i32 %cond, !dbg !6070
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ipa_replace_map* @VEC_ipa_replace_map_p_base_index(%struct.VEC_ipa_replace_map_p_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !6071 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_replace_map_p_base* %vec_, metadata !6075, metadata !DIExpression()), !dbg !6077
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !6076, metadata !DIExpression()), !dbg !6077
  br label %land.end, !dbg !6078

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !6078
  %arrayidx = getelementptr inbounds %struct.VEC_ipa_replace_map_p_base, %struct.VEC_ipa_replace_map_p_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6078
  %0 = load %struct.ipa_replace_map*, %struct.ipa_replace_map** %arrayidx, align 8, !dbg !6078
  ret %struct.ipa_replace_map* %0, !dbg !6078
}

declare dso_local %union.tree_node* @tree_strip_nop_conversions(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @handled_component_p(%union.tree_node* %t) unnamed_addr #0 !dbg !6079 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6084, metadata !DIExpression()), !dbg !6085
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6086
  %bf.load = load i64, i64* %0, align 8, !dbg !6086
  %1 = trunc i64 %bf.load to i16, !dbg !6086
  switch i16 %1, label %sw.default [
    i16 42, label %return
    i16 41, label %return
    i16 45, label %return
    i16 46, label %return
    i16 118, label %return
    i16 43, label %return
    i16 44, label %return
  ], !dbg !6087

sw.default:                                       ; preds = %entry
  br label %return, !dbg !6088

return:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.default
  %retval.0 = phi i8 [ 0, %sw.default ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], !dbg !6090
  ret i8 %retval.0, !dbg !6091
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @setup_one_parameter(%struct.copy_body_data* %id, %union.tree_node* %p, %union.tree_node* %value, %union.tree_node* %fn, %struct.basic_block_def* %bb, %union.tree_node** %vars) unnamed_addr #5 !dbg !6092 {
entry:
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6096, metadata !DIExpression()), !dbg !6106
  call void @llvm.dbg.value(metadata %union.tree_node* %p, metadata !6097, metadata !DIExpression()), !dbg !6106
  call void @llvm.dbg.value(metadata %union.tree_node* %value, metadata !6098, metadata !DIExpression()), !dbg !6106
  call void @llvm.dbg.value(metadata %union.tree_node* %fn, metadata !6099, metadata !DIExpression()), !dbg !6106
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6100, metadata !DIExpression()), !dbg !6106
  call void @llvm.dbg.value(metadata %union.tree_node** %vars, metadata !6101, metadata !DIExpression()), !dbg !6106
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !6102, metadata !DIExpression()), !dbg !6106
  call void @llvm.dbg.value(metadata %union.tree_node* %value, metadata !6104, metadata !DIExpression()), !dbg !6106
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6107
  %call = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %0) #7, !dbg !6108
  %tobool = icmp eq i8 %call, 0, !dbg !6108
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6108

cond.true:                                        ; preds = %entry
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !6109
  %1 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !6109
  %call1 = tail call %union.tree_node* @gimple_default_def(%struct.function* %1, %union.tree_node* %p) #6, !dbg !6110
  br label %cond.end, !dbg !6108

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %union.tree_node* [ %call1, %cond.true ], [ null, %entry ], !dbg !6108
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !6105, metadata !DIExpression()), !dbg !6106
  %tobool2 = icmp ne %union.tree_node* %value, null, !dbg !6111
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6113
  %cmp = icmp ne %union.tree_node* %2, %value, !dbg !6114
  %or.cond = and i1 %tobool2, %cmp, !dbg !6115
  br i1 %or.cond, label %land.lhs.true4, label %if.end20, !dbg !6115

land.lhs.true4:                                   ; preds = %cond.end
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %p, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6116
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6116
  %type6 = getelementptr inbounds %union.tree_node, %union.tree_node* %value, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6117
  %4 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !6117
  %call7 = tail call zeroext i8 @useless_type_conversion_p(%union.tree_node* %3, %union.tree_node* %4) #6, !dbg !6118
  %tobool8 = icmp eq i8 %call7, 0, !dbg !6118
  br i1 %tobool8, label %if.then, label %if.end20, !dbg !6119

if.then:                                          ; preds = %land.lhs.true4
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6120
  %call11 = tail call zeroext i8 @fold_convertible_p(%union.tree_node* %5, %union.tree_node* nonnull %value) #6, !dbg !6123
  %tobool12 = icmp eq i8 %call11, 0, !dbg !6123
  %6 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6124
  br i1 %tobool12, label %if.else, label %if.then13, !dbg !6125

if.then13:                                        ; preds = %if.then
  %call16 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 116, %union.tree_node* %6, %union.tree_node* nonnull %value) #6, !dbg !6126
  call void @llvm.dbg.value(metadata %union.tree_node* %call16, metadata !6104, metadata !DIExpression()), !dbg !6106
  br label %if.end20, !dbg !6127

if.else:                                          ; preds = %if.then
  %call19 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 118, %union.tree_node* %6, %union.tree_node* nonnull %value) #6, !dbg !6128
  call void @llvm.dbg.value(metadata %union.tree_node* %call19, metadata !6104, metadata !DIExpression()), !dbg !6106
  br label %if.end20

if.end20:                                         ; preds = %land.lhs.true4, %if.then13, %if.else, %cond.end
  %rhs.1 = phi %union.tree_node* [ %value, %land.lhs.true4 ], [ %value, %cond.end ], [ %call16, %if.then13 ], [ %call19, %if.else ], !dbg !6106
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs.1, metadata !6104, metadata !DIExpression()), !dbg !6106
  %call21 = tail call fastcc %union.tree_node* @copy_decl_to_var(%union.tree_node* %p, %struct.copy_body_data* %id) #7, !dbg !6129
  call void @llvm.dbg.value(metadata %union.tree_node* %call21, metadata !6103, metadata !DIExpression()), !dbg !6106
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6130
  %call23 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %7) #7, !dbg !6132
  %tobool25 = icmp eq i8 %call23, 0, !dbg !6132
  br i1 %tobool25, label %if.end32, label %land.lhs.true26, !dbg !6133

land.lhs.true26:                                  ; preds = %if.end20
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %call21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6134
  %bf.load = load i64, i64* %8, align 8, !dbg !6134
  %bf.cast14 = and i64 %bf.load, 65535, !dbg !6135
  %cmp27 = icmp eq i64 %bf.cast14, 32, !dbg !6135
  br i1 %cmp27, label %if.then29, label %if.end32, !dbg !6136

if.then29:                                        ; preds = %land.lhs.true26
  %call30 = tail call fastcc %struct.var_ann_d* @get_var_ann(%union.tree_node* %call21) #7, !dbg !6137
  %call31 = tail call zeroext i8 @add_referenced_var(%union.tree_node* %call21) #6, !dbg !6139
  br label %if.end32, !dbg !6140

if.end32:                                         ; preds = %if.end20, %if.then29, %land.lhs.true26
  %9 = bitcast %union.tree_node** %vars to i64*, !dbg !6141
  %10 = load i64, i64* %9, align 8, !dbg !6141
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %call21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6142
  %11 = bitcast %union.tree_node** %chain to i64*, !dbg !6143
  store i64 %10, i64* %11, align 8, !dbg !6143
  store %union.tree_node* %call21, %union.tree_node** %vars, align 8, !dbg !6144
  %seen_in_bind_expr = getelementptr inbounds %union.tree_node, %union.tree_node* %call21, i64 0, i32 0, i32 0, i32 0, i32 4, !dbg !6145
  %12 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !6145
  %bf.load34 = load i32, i32* %12, align 8, !dbg !6146
  %bf.set = or i32 %bf.load34, 256, !dbg !6146
  store i32 %bf.set, i32* %12, align 8, !dbg !6146
  %13 = getelementptr inbounds %union.tree_node, %union.tree_node* %p, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6147
  %bf.load37 = load i64, i64* %13, align 8, !dbg !6147
  %bf.cast397 = and i64 %bf.load37, 1048576, !dbg !6147
  %tobool40 = icmp eq i64 %bf.cast397, 0, !dbg !6147
  br i1 %tobool40, label %if.end77, label %land.lhs.true41, !dbg !6149

land.lhs.true41:                                  ; preds = %if.end32
  %bf.cast4612 = and i64 %bf.load37, 262144, !dbg !6150
  %tobool47 = icmp eq i64 %bf.cast4612, 0, !dbg !6150
  %or.cond1 = and i1 %tobool47, %tobool2, !dbg !6151
  br i1 %or.cond1, label %land.lhs.true50, label %if.end77, !dbg !6151

land.lhs.true50:                                  ; preds = %land.lhs.true41
  %14 = getelementptr inbounds %union.tree_node, %union.tree_node* %value, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6152
  %bf.load52 = load i64, i64* %14, align 8, !dbg !6152
  %bf.cast5513 = and i64 %bf.load52, 65536, !dbg !6152
  %tobool56 = icmp ne i64 %bf.cast5513, 0, !dbg !6152
  %tobool58 = icmp ne %union.tree_node* %cond, null, !dbg !6153
  %or.cond2 = or i1 %tobool56, %tobool58, !dbg !6154
  br i1 %or.cond2, label %if.end77, label %if.then59, !dbg !6154

if.then59:                                        ; preds = %land.lhs.true50
  %call60 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %value) #6, !dbg !6155
  %tobool62 = icmp eq i8 %call60, 0, !dbg !6155
  br i1 %tobool62, label %if.end77, label %land.lhs.true63, !dbg !6158

land.lhs.true63:                                  ; preds = %if.then59
  %type65 = getelementptr inbounds %union.tree_node, %union.tree_node* %p, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6159
  %15 = load %union.tree_node*, %union.tree_node** %type65, align 8, !dbg !6159
  %type67 = getelementptr inbounds %union.tree_node, %union.tree_node* %value, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6160
  %16 = load %union.tree_node*, %union.tree_node** %type67, align 8, !dbg !6160
  %call68 = tail call zeroext i8 @useless_type_conversion_p(%union.tree_node* %15, %union.tree_node* %16) #6, !dbg !6161
  %tobool70 = icmp eq i8 %call68, 0, !dbg !6161
  br i1 %tobool70, label %if.end77, label %land.lhs.true71, !dbg !6162

land.lhs.true71:                                  ; preds = %land.lhs.true63
  %call72 = tail call fastcc zeroext i8 @self_inlining_addr_expr(%union.tree_node* nonnull %value, %union.tree_node* %fn) #7, !dbg !6163
  %tobool73 = icmp eq i8 %call72, 0, !dbg !6163
  br i1 %tobool73, label %if.then74, label %if.end77, !dbg !6164

if.then74:                                        ; preds = %land.lhs.true71
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %p, %union.tree_node* nonnull %value) #7, !dbg !6165
  tail call fastcc void @insert_debug_decl_map(%struct.copy_body_data* %id, %union.tree_node* %p, %union.tree_node* %call21) #7, !dbg !6167
  %call75 = tail call fastcc %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, %union.tree_node* %call21, %union.tree_node* nonnull %value, %union.gimple_statement_d* null) #7, !dbg !6168
  br label %cleanup, !dbg !6169

if.end77:                                         ; preds = %land.lhs.true71, %land.lhs.true63, %if.then59, %if.end32, %land.lhs.true41, %land.lhs.true50
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %p, %union.tree_node* %call21) #7, !dbg !6170
  %type79 = getelementptr inbounds %union.tree_node, %union.tree_node* %p, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6171
  %17 = bitcast %union.tree_node** %type79 to %struct.tree_type**, !dbg !6171
  %18 = load %struct.tree_type*, %struct.tree_type** %17, align 8, !dbg !6171
  %needs_constructing_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %18, i64 0, i32 6, !dbg !6171
  %bf.load81 = load i32, i32* %needs_constructing_flag, align 4, !dbg !6171
  %bf.clear83 = and i32 %bf.load81, 2048, !dbg !6171
  %tobool84 = icmp eq i32 %bf.clear83, 0, !dbg !6171
  br i1 %tobool84, label %if.end89, label %if.then85, !dbg !6173

if.then85:                                        ; preds = %if.end77
  %19 = getelementptr inbounds %union.tree_node, %union.tree_node* %call21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6174
  %bf.load87 = load i64, i64* %19, align 8, !dbg !6175
  %bf.clear88 = and i64 %bf.load87, -1048577, !dbg !6175
  store i64 %bf.clear88, i64* %19, align 8, !dbg !6175
  br label %if.end89, !dbg !6174

if.end89:                                         ; preds = %if.end77, %if.then85
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6176
  %call91 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %20) #7, !dbg !6178
  %tobool93 = icmp ne i8 %call91, 0, !dbg !6178
  %tobool95 = icmp ne %union.tree_node* %rhs.1, null, !dbg !6179
  %or.cond3 = and i1 %tobool93, %tobool95, !dbg !6180
  %tobool97 = icmp ne %union.tree_node* %cond, null, !dbg !6181
  %or.cond4 = and i1 %or.cond3, %tobool97, !dbg !6180
  br i1 %or.cond4, label %land.lhs.true98, label %if.end134, !dbg !6180

land.lhs.true98:                                  ; preds = %if.end89
  %call99 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %p) #6, !dbg !6182
  %tobool101 = icmp eq i8 %call99, 0, !dbg !6182
  br i1 %tobool101, label %if.end134, label %land.lhs.true102, !dbg !6183

land.lhs.true102:                                 ; preds = %land.lhs.true98
  %21 = load i32, i32* @optimize, align 4, !dbg !6184
  %tobool103 = icmp eq i32 %21, 0, !dbg !6184
  br i1 %tobool103, label %lor.lhs.false, label %land.lhs.true114, !dbg !6185

lor.lhs.false:                                    ; preds = %land.lhs.true102
  %bf.load105 = load i64, i64* %13, align 8, !dbg !6186
  %bf.cast1089 = and i64 %bf.load105, 1048576, !dbg !6186
  %tobool109 = icmp eq i64 %bf.cast1089, 0, !dbg !6186
  br i1 %tobool109, label %if.end134, label %land.lhs.true110, !dbg !6187

land.lhs.true110:                                 ; preds = %lor.lhs.false
  %call111 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %rhs.1) #6, !dbg !6188
  %tobool113 = icmp eq i8 %call111, 0, !dbg !6188
  br i1 %tobool113, label %if.end134, label %land.lhs.true114, !dbg !6189

land.lhs.true114:                                 ; preds = %land.lhs.true110, %land.lhs.true102
  %22 = getelementptr inbounds %union.tree_node, %union.tree_node* %rhs.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6190
  %bf.load116 = load i64, i64* %22, align 8, !dbg !6190
  %bf.cast11810 = and i64 %bf.load116, 65535, !dbg !6191
  %cmp119 = icmp eq i64 %bf.cast11810, 141, !dbg !6191
  br i1 %cmp119, label %land.lhs.true125, label %lor.lhs.false121, !dbg !6192

lor.lhs.false121:                                 ; preds = %land.lhs.true114
  %call122 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %rhs.1) #6, !dbg !6193
  %tobool124 = icmp eq i8 %call122, 0, !dbg !6193
  br i1 %tobool124, label %if.end134, label %land.lhs.true125, !dbg !6194

land.lhs.true125:                                 ; preds = %lor.lhs.false121, %land.lhs.true114
  %23 = getelementptr inbounds %union.tree_node, %union.tree_node* %cond, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6195
  %bf.load127 = load i64, i64* %23, align 8, !dbg !6195
  %bf.cast13011 = and i64 %bf.load127, 4194304, !dbg !6195
  %tobool131 = icmp eq i64 %bf.cast13011, 0, !dbg !6195
  br i1 %tobool131, label %if.then132, label %if.end134, !dbg !6196

if.then132:                                       ; preds = %land.lhs.true125
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* nonnull %cond, %union.tree_node* nonnull %rhs.1) #7, !dbg !6197
  %call133 = tail call fastcc %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, %union.tree_node* %call21, %union.tree_node* nonnull %rhs.1, %union.gimple_statement_d* null) #7, !dbg !6199
  br label %cleanup, !dbg !6200

if.end134:                                        ; preds = %land.lhs.true125, %lor.lhs.false121, %land.lhs.true110, %lor.lhs.false, %land.lhs.true98, %if.end89
  %24 = load i32, i32* @optimize, align 4, !dbg !6201
  %tobool135 = icmp eq i32 %24, 0, !dbg !6201
  br i1 %tobool135, label %if.end161, label %land.lhs.true136, !dbg !6203

land.lhs.true136:                                 ; preds = %if.end134
  %25 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6204
  %call138 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %25) #7, !dbg !6205
  %tobool140 = icmp eq i8 %call138, 0, !dbg !6205
  %or.cond5 = or i1 %tobool140, %tobool97, !dbg !6206
  br i1 %or.cond5, label %if.end161, label %land.lhs.true143, !dbg !6206

land.lhs.true143:                                 ; preds = %land.lhs.true136
  %call144 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %p) #6, !dbg !6207
  %tobool146 = icmp eq i8 %call144, 0, !dbg !6207
  br i1 %tobool146, label %if.end161, label %if.then147, !dbg !6208

if.then147:                                       ; preds = %land.lhs.true143
  %tobool148 = icmp eq %union.tree_node* %value, null, !dbg !6209
  br i1 %tobool148, label %cond.end158, label %lor.lhs.false149, !dbg !6209

lor.lhs.false149:                                 ; preds = %if.then147
  %26 = getelementptr inbounds %union.tree_node, %union.tree_node* %value, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6209
  %bf.load151 = load i64, i64* %26, align 8, !dbg !6209
  %bf.cast1548 = and i64 %bf.load151, 65536, !dbg !6209
  %tobool155 = icmp eq i64 %bf.cast1548, 0, !dbg !6209
  br i1 %tobool155, label %cond.end158, label %cond.true156, !dbg !6209

cond.true156:                                     ; preds = %lor.lhs.false149
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2452, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !6209
  br label %cond.end158, !dbg !6209

cond.end158:                                      ; preds = %lor.lhs.false149, %if.then147, %cond.true156
  %call160 = tail call fastcc %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, %union.tree_node* %call21, %union.tree_node* %rhs.1, %union.gimple_statement_d* null) #7, !dbg !6211
  br label %cleanup, !dbg !6212

if.end161:                                        ; preds = %land.lhs.true143, %if.end134, %land.lhs.true136
  %tobool162 = icmp eq %union.tree_node* %value, null, !dbg !6213
  br i1 %tobool162, label %cleanup, label %if.then163, !dbg !6215

if.then163:                                       ; preds = %if.end161
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6216
  %cmp164 = icmp eq %union.tree_node* %rhs.1, %27, !dbg !6219
  br i1 %cmp164, label %if.then166, label %if.end168, !dbg !6220

if.then166:                                       ; preds = %if.then163
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %p, %union.tree_node* %call21) #7, !dbg !6221
  %call167 = tail call fastcc %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, %union.tree_node* %call21, %union.tree_node* %rhs.1, %union.gimple_statement_d* null) #7, !dbg !6223
  br label %cleanup, !dbg !6224

if.end168:                                        ; preds = %if.then163
  %call169 = tail call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %rhs.1) #6, !dbg !6225
  call void @llvm.dbg.value(metadata %union.tree_node* %call169, metadata !6104, metadata !DIExpression()), !dbg !6106
  %tobool170 = icmp eq %union.tree_node* %cond, null, !dbg !6226
  br i1 %tobool170, label %if.else186, label %land.lhs.true171, !dbg !6228

land.lhs.true171:                                 ; preds = %if.end168
  %28 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6229
  %call173 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %28) #7, !dbg !6230
  %tobool175 = icmp eq i8 %call173, 0, !dbg !6230
  br i1 %tobool175, label %if.else186, label %land.lhs.true176, !dbg !6231

land.lhs.true176:                                 ; preds = %land.lhs.true171
  %call177 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %p) #6, !dbg !6232
  %tobool179 = icmp eq i8 %call177, 0, !dbg !6232
  br i1 %tobool179, label %if.else186, label %if.then180, !dbg !6233

if.then180:                                       ; preds = %land.lhs.true176
  %call181 = tail call fastcc %union.tree_node* @remap_ssa_name(%union.tree_node* nonnull %cond, %struct.copy_body_data* %id) #7, !dbg !6234
  call void @llvm.dbg.value(metadata %union.tree_node* %call181, metadata !6105, metadata !DIExpression()), !dbg !6106
  %call182 = tail call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call181, %union.tree_node* %call169) #6, !dbg !6236
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call182, metadata !6102, metadata !DIExpression()), !dbg !6106
  %29 = getelementptr inbounds %union.tree_node, %union.tree_node* %call181, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6237
  %bf.load184 = load i64, i64* %29, align 8, !dbg !6238
  %bf.clear185 = and i64 %bf.load184, -4294967297, !dbg !6238
  store i64 %bf.clear185, i64* %29, align 8, !dbg !6238
  tail call void @set_default_def(%union.tree_node* %call21, %union.tree_node* null) #6, !dbg !6239
  br label %if.end188, !dbg !6240

if.else186:                                       ; preds = %land.lhs.true176, %land.lhs.true171, %if.end168
  %call187 = tail call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call21, %union.tree_node* %call169) #6, !dbg !6241
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call187, metadata !6102, metadata !DIExpression()), !dbg !6106
  br label %if.end188

if.end188:                                        ; preds = %if.else186, %if.then180
  %init_stmt.0 = phi %union.gimple_statement_d* [ %call182, %if.then180 ], [ %call187, %if.else186 ], !dbg !6242
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %init_stmt.0, metadata !6102, metadata !DIExpression()), !dbg !6106
  %tobool189 = icmp ne %struct.basic_block_def* %bb, null, !dbg !6243
  %tobool191 = icmp ne %union.gimple_statement_d* %init_stmt.0, null, !dbg !6245
  %or.cond6 = and i1 %tobool189, %tobool191, !dbg !6246
  br i1 %or.cond6, label %if.then192, label %cleanup, !dbg !6246

if.then192:                                       ; preds = %if.end188
  tail call fastcc void @insert_init_stmt(%struct.copy_body_data* %id, %struct.basic_block_def* nonnull %bb, %union.gimple_statement_d* nonnull %init_stmt.0) #7, !dbg !6247
  br label %cleanup, !dbg !6247

cleanup:                                          ; preds = %if.end161, %if.then192, %if.end188, %if.then166, %cond.end158, %if.then132, %if.then74
  %retval.0 = phi %union.gimple_statement_d* [ %call167, %if.then166 ], [ %call160, %cond.end158 ], [ %call133, %if.then132 ], [ %call75, %if.then74 ], [ null, %if.end161 ], [ %init_stmt.0, %if.then192 ], [ %init_stmt.0, %if.end188 ], !dbg !6106
  ret %union.gimple_statement_d* %retval.0, !dbg !6248
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) unnamed_addr #0 !dbg !6249 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %vec_, metadata !6254, metadata !DIExpression()), !dbg !6256
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %obj_, metadata !6255, metadata !DIExpression()), !dbg !6256
  %call = tail call fastcc i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 1) #7, !dbg !6257
  %0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_, align 8, !dbg !6257
  %tobool = icmp eq %struct.VEC_gimple_heap* %0, null, !dbg !6257
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6257

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %0, i64 0, i32 0, !dbg !6257
  br label %cond.end, !dbg !6257

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6257
  %call1 = tail call fastcc %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %obj_) #7, !dbg !6257
  ret %union.gimple_statement_d** %call1, !dbg !6257
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @copy_arguments_for_versioning(%union.tree_node* %orig_parm, %struct.copy_body_data* %id, %struct.bitmap_head_def* %args_to_skip, %union.tree_node** %vars) unnamed_addr #5 !dbg !6258 {
entry:
  %new_parm = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %orig_parm, metadata !6262, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6263, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %args_to_skip, metadata !6264, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %union.tree_node** %vars, metadata !6265, metadata !DIExpression()), !dbg !6278
  %0 = bitcast %union.tree_node** %new_parm to i8*, !dbg !6279
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !6279
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !6268, metadata !DIExpression()), !dbg !6278
  store %union.tree_node* null, %union.tree_node** %new_parm, align 8, !dbg !6280
  call void @llvm.dbg.value(metadata i32 0, metadata !6269, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %union.tree_node** %new_parm, metadata !6267, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %union.tree_node* %orig_parm, metadata !6266, metadata !DIExpression()), !dbg !6278
  %tobool1 = icmp eq %struct.bitmap_head_def* %args_to_skip, null, !dbg !6281
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !6282
  %1 = bitcast %union.tree_node** %vars to i64*, !dbg !6283
  br i1 %tobool1, label %entry.split.us, label %entry.entry.split_crit_edge, !dbg !6284

entry.entry.split_crit_edge:                      ; preds = %entry
  br label %for.cond, !dbg !6284

entry.split.us:                                   ; preds = %entry
  br label %for.cond.us, !dbg !6284

for.cond.us:                                      ; preds = %for.body.us, %entry.split.us
  %arg.0.us = phi %union.tree_node* [ %orig_parm, %entry.split.us ], [ %3, %for.body.us ], !dbg !6285
  %parg.0.us = phi %union.tree_node** [ %new_parm, %entry.split.us ], [ %chain.us, %for.body.us ], !dbg !6286
  call void @llvm.dbg.value(metadata i32 undef, metadata !6269, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %union.tree_node** %parg.0.us, metadata !6267, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %union.tree_node* %arg.0.us, metadata !6266, metadata !DIExpression()), !dbg !6278
  %tobool.us = icmp eq %union.tree_node* %arg.0.us, null, !dbg !6287
  br i1 %tobool.us, label %for.end.us-lcssa.us, label %for.body.us, !dbg !6287

for.body.us:                                      ; preds = %for.cond.us
  %call3.us = tail call %union.tree_node* @remap_decl(%union.tree_node* nonnull %arg.0.us, %struct.copy_body_data* %id) #7, !dbg !6288
  call void @llvm.dbg.value(metadata %union.tree_node* %call3.us, metadata !6270, metadata !DIExpression()), !dbg !6289
  %2 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i64 0, i32 15), align 8, !dbg !6290
  tail call void %2(%union.tree_node* %call3.us) #6, !dbg !6291
  store %union.tree_node* %call3.us, %union.tree_node** %parg.0.us, align 8, !dbg !6292
  call void @llvm.dbg.value(metadata %union.tree_node* %call3.us, metadata !6267, metadata !DIExpression(DW_OP_plus_uconst, 8, DW_OP_stack_value)), !dbg !6278
  %chain.us = getelementptr inbounds %union.tree_node, %union.tree_node* %call3.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6293
  call void @llvm.dbg.value(metadata %union.tree_node** %chain.us, metadata !6267, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %union.tree_node** %chain.us, metadata !6267, metadata !DIExpression()), !dbg !6278
  %chain14.us = getelementptr inbounds %union.tree_node, %union.tree_node* %arg.0.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6294
  %3 = load %union.tree_node*, %union.tree_node** %chain14.us, align 8, !dbg !6294
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !6266, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata i32 undef, metadata !6269, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !6278
  br label %for.cond.us, !dbg !6295, !llvm.loop !6296

for.end.us-lcssa.us:                              ; preds = %for.cond.us
  br label %for.end, !dbg !6298

for.cond:                                         ; preds = %for.inc, %entry.entry.split_crit_edge
  %arg.0 = phi %union.tree_node* [ %orig_parm, %entry.entry.split_crit_edge ], [ %9, %for.inc ], !dbg !6285
  %parg.0 = phi %union.tree_node** [ %new_parm, %entry.entry.split_crit_edge ], [ %parg.1, %for.inc ], !dbg !6286
  %i.0 = phi i32 [ 0, %entry.entry.split_crit_edge ], [ %inc, %for.inc ], !dbg !6278
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !6269, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %union.tree_node** %parg.0, metadata !6267, metadata !DIExpression()), !dbg !6278
  call void @llvm.dbg.value(metadata %union.tree_node* %arg.0, metadata !6266, metadata !DIExpression()), !dbg !6278
  %tobool = icmp eq %union.tree_node* %arg.0, null, !dbg !6287
  br i1 %tobool, label %for.end.us-lcssa, label %for.body, !dbg !6287

for.body:                                         ; preds = %for.cond
  %call = tail call i32 @bitmap_bit_p(%struct.bitmap_head_def* nonnull %args_to_skip, i32 %i.0) #6, !dbg !6299
  %tobool2 = icmp eq i32 %call, 0, !dbg !6299
  br i1 %tobool2, label %if.then, label %if.else, !dbg !6300

if.then:                                          ; preds = %for.body
  %call3 = tail call %union.tree_node* @remap_decl(%union.tree_node* nonnull %arg.0, %struct.copy_body_data* %id) #7, !dbg !6288
  call void @llvm.dbg.value(metadata %union.tree_node* %call3, metadata !6270, metadata !DIExpression()), !dbg !6289
  %4 = load void (%union.tree_node*)*, void (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i64 0, i32 15), align 8, !dbg !6290
  tail call void %4(%union.tree_node* %call3) #6, !dbg !6291
  store %union.tree_node* %call3, %union.tree_node** %parg.0, align 8, !dbg !6292
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %call3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6293
  call void @llvm.dbg.value(metadata %union.tree_node** %chain, metadata !6267, metadata !DIExpression()), !dbg !6278
  br label %for.inc, !dbg !6301

if.else:                                          ; preds = %for.body
  %5 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !6302
  %6 = bitcast %union.tree_node* %arg.0 to i8*, !dbg !6303
  %call4 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %5, i8* nonnull %6) #6, !dbg !6304
  %tobool5 = icmp eq i8** %call4, null, !dbg !6304
  br i1 %tobool5, label %if.then6, label %for.inc, !dbg !6305

if.then6:                                         ; preds = %if.else
  %call7 = tail call fastcc %union.tree_node* @copy_decl_to_var(%union.tree_node* nonnull %arg.0, %struct.copy_body_data* %id) #7, !dbg !6306
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !6275, metadata !DIExpression()), !dbg !6283
  %call8 = tail call fastcc %struct.var_ann_d* @get_var_ann(%union.tree_node* %call7) #7, !dbg !6307
  %call9 = tail call zeroext i8 @add_referenced_var(%union.tree_node* %call7) #6, !dbg !6308
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* nonnull %arg.0, %union.tree_node* %call7) #7, !dbg !6309
  %7 = load i64, i64* %1, align 8, !dbg !6310
  %chain11 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6311
  %8 = bitcast %union.tree_node** %chain11 to i64*, !dbg !6312
  store i64 %7, i64* %8, align 8, !dbg !6312
  store %union.tree_node* %call7, %union.tree_node** %vars, align 8, !dbg !6313
  br label %for.inc, !dbg !6314

for.inc:                                          ; preds = %if.else, %if.then, %if.then6
  %parg.1 = phi %union.tree_node** [ %chain, %if.then ], [ %parg.0, %if.then6 ], [ %parg.0, %if.else ], !dbg !6278
  call void @llvm.dbg.value(metadata %union.tree_node** %parg.1, metadata !6267, metadata !DIExpression()), !dbg !6278
  %chain14 = getelementptr inbounds %union.tree_node, %union.tree_node* %arg.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6294
  %9 = load %union.tree_node*, %union.tree_node** %chain14, align 8, !dbg !6294
  call void @llvm.dbg.value(metadata %union.tree_node* %9, metadata !6266, metadata !DIExpression()), !dbg !6278
  %inc = add nuw nsw i32 %i.0, 1, !dbg !6315
  call void @llvm.dbg.value(metadata i32 %inc, metadata !6269, metadata !DIExpression()), !dbg !6278
  br label %for.cond, !dbg !6295, !llvm.loop !6296

for.end.us-lcssa:                                 ; preds = %for.cond
  br label %for.end, !dbg !6298

for.end:                                          ; preds = %for.end.us-lcssa.us, %for.end.us-lcssa
  %10 = load %union.tree_node*, %union.tree_node** %new_parm, align 8, !dbg !6298
  call void @llvm.dbg.value(metadata %union.tree_node* %10, metadata !6268, metadata !DIExpression()), !dbg !6278
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !6316
  ret %union.tree_node* %10, !dbg !6317
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @remap_blocks(%union.tree_node* %block, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !6318 {
entry:
  %new_tree = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %block, metadata !6320, metadata !DIExpression()), !dbg !6324
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6321, metadata !DIExpression()), !dbg !6324
  %0 = bitcast %union.tree_node** %new_tree to i8*, !dbg !6325
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !6325
  call void @llvm.dbg.value(metadata %union.tree_node* %block, metadata !6323, metadata !DIExpression()), !dbg !6324
  store %union.tree_node* %block, %union.tree_node** %new_tree, align 8, !dbg !6326
  %tobool = icmp eq %union.tree_node* %block, null, !dbg !6327
  br i1 %tobool, label %cleanup, label %if.end, !dbg !6329

if.end:                                           ; preds = %entry
  call void @llvm.dbg.value(metadata %union.tree_node** %new_tree, metadata !6323, metadata !DIExpression(DW_OP_deref)), !dbg !6324
  call fastcc void @remap_block(%union.tree_node** nonnull %new_tree, %struct.copy_body_data* %id) #7, !dbg !6330
  %1 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !6331
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !6323, metadata !DIExpression()), !dbg !6324
  %cmp = icmp eq %union.tree_node* %1, %block, !dbg !6331
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !6331

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 620, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !6331
  br label %cond.end, !dbg !6331

cond.end:                                         ; preds = %if.end, %cond.true
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %block, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6332
  br label %for.cond, !dbg !6334

for.cond:                                         ; preds = %for.body, %cond.end
  %t.0.in = phi %union.tree_node** [ %2, %cond.end ], [ %chain, %for.body ]
  %t.0 = load %union.tree_node*, %union.tree_node** %t.0.in, align 8, !dbg !6335
  call void @llvm.dbg.value(metadata %union.tree_node* %t.0, metadata !6322, metadata !DIExpression()), !dbg !6324
  %tobool2 = icmp eq %union.tree_node* %t.0, null, !dbg !6336
  %3 = load %union.tree_node*, %union.tree_node** %new_tree, align 8, !dbg !6324
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !6323, metadata !DIExpression()), !dbg !6324
  br i1 %tobool2, label %for.end, label %for.body, !dbg !6336

for.body:                                         ; preds = %for.cond
  %call = call fastcc %union.tree_node* @remap_blocks(%union.tree_node* nonnull %t.0, %struct.copy_body_data* %id) #7, !dbg !6337
  call fastcc void @prepend_lexical_block(%union.tree_node* %3, %union.tree_node* %call) #7, !dbg !6339
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %t.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6340
  br label %for.cond, !dbg !6341, !llvm.loop !6342

for.end:                                          ; preds = %for.cond
  %.lcssa = phi %union.tree_node* [ %3, %for.cond ], !dbg !6324
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6344
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !6344
  %call5 = call %union.tree_node* @blocks_nreverse(%union.tree_node* %5) #6, !dbg !6345
  %6 = bitcast %union.tree_node** %new_tree to %struct.tree_block**, !dbg !6346
  %7 = load %struct.tree_block*, %struct.tree_block** %6, align 8, !dbg !6346
  %subblocks7 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %7, i64 0, i32 5, !dbg !6346
  store %union.tree_node* %call5, %union.tree_node** %subblocks7, align 8, !dbg !6347
  %.cast = bitcast %struct.tree_block* %7 to %union.tree_node*, !dbg !6348
  call void @llvm.dbg.value(metadata %union.tree_node* %.cast, metadata !6323, metadata !DIExpression()), !dbg !6324
  br label %cleanup, !dbg !6349

cleanup:                                          ; preds = %entry, %for.end
  %retval.0 = phi %union.tree_node* [ %.cast, %for.end ], [ null, %entry ], !dbg !6324
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !6350
  ret %union.tree_node* %retval.0, !dbg !6350
}

; Function Attrs: nounwind uwtable
define internal fastcc void @declare_inline_vars(%union.tree_node* %block, %union.tree_node* %vars) unnamed_addr #5 !dbg !6351 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %block, metadata !6355, metadata !DIExpression()), !dbg !6358
  call void @llvm.dbg.value(metadata %union.tree_node* %vars, metadata !6356, metadata !DIExpression()), !dbg !6358
  call void @llvm.dbg.value(metadata %union.tree_node* %vars, metadata !6357, metadata !DIExpression()), !dbg !6358
  br label %for.cond, !dbg !6359

for.cond:                                         ; preds = %cond.end, %entry
  %t.0 = phi %union.tree_node* [ %vars, %entry ], [ %5, %cond.end ], !dbg !6361
  call void @llvm.dbg.value(metadata %union.tree_node* %t.0, metadata !6357, metadata !DIExpression()), !dbg !6358
  %tobool = icmp eq %union.tree_node* %t.0, null, !dbg !6362
  br i1 %tobool, label %for.end, label %for.body, !dbg !6362

for.body:                                         ; preds = %for.cond
  %seen_in_bind_expr = getelementptr inbounds %union.tree_node, %union.tree_node* %t.0, i64 0, i32 0, i32 0, i32 0, i32 4, !dbg !6363
  %0 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !6363
  %bf.load = load i32, i32* %0, align 8, !dbg !6366
  %bf.set = or i32 %bf.load, 256, !dbg !6366
  store i32 %bf.set, i32* %0, align 8, !dbg !6366
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6367
  %bf.load1 = load i64, i64* %1, align 8, !dbg !6367
  %bf.cast1 = and i64 %bf.load1, 67108864, !dbg !6367
  %tobool3 = icmp eq i64 %bf.cast1, 0, !dbg !6367
  br i1 %tobool3, label %land.lhs.true, label %cond.true, !dbg !6367

land.lhs.true:                                    ; preds = %for.body
  %bf.cast82 = and i64 %bf.load1, 4194304, !dbg !6367
  %tobool9 = icmp eq i64 %bf.cast82, 0, !dbg !6367
  br i1 %tobool9, label %cond.end, label %cond.true, !dbg !6367

cond.true:                                        ; preds = %land.lhs.true, %for.body
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4451, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !6367
  br label %cond.end, !dbg !6367

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6368
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, i32 9, !dbg !6368
  %3 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !6368
  %call = tail call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* nonnull %t.0, %union.tree_node* %3) #6, !dbg !6368
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6369
  %local_decls11 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, i32 9, !dbg !6370
  store %union.tree_node* %call, %union.tree_node** %local_decls11, align 8, !dbg !6371
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %t.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6372
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6372
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !6357, metadata !DIExpression()), !dbg !6358
  br label %for.cond, !dbg !6373, !llvm.loop !6374

for.end:                                          ; preds = %for.cond
  %tobool12 = icmp eq %union.tree_node* %block, null, !dbg !6376
  br i1 %tobool12, label %if.end, label %if.then, !dbg !6378

if.then:                                          ; preds = %for.end
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %block, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !6379
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !6379
  %call15 = tail call %union.tree_node* @chainon(%union.tree_node* %7, %union.tree_node* %vars) #6, !dbg !6380
  store %union.tree_node* %call15, %union.tree_node** %6, align 8, !dbg !6381
  br label %if.end, !dbg !6382

if.end:                                           ; preds = %for.end, %if.then
  ret void, !dbg !6383
}

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @can_be_nonlocal(%union.tree_node* %decl, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !6384 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !6388, metadata !DIExpression()), !dbg !6390
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6389, metadata !DIExpression()), !dbg !6390
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6391
  %bf.load = load i64, i64* %0, align 8, !dbg !6391
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6393
  %cmp = icmp eq i64 %bf.cast1, 29, !dbg !6393
  br i1 %cmp, label %return, label %if.end, !dbg !6394

if.end:                                           ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 32, !dbg !6395
  br i1 %cmp5, label %land.lhs.true, label %if.end7, !dbg !6397

land.lhs.true:                                    ; preds = %if.end
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 0, !dbg !6398
  %1 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !6398
  %call = tail call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %decl, %union.tree_node* %1) #6, !dbg !6399
  %tobool = icmp eq i8 %call, 0, !dbg !6399
  br i1 %tobool, label %return, label %land.lhs.true.if.end7_crit_edge, !dbg !6400

land.lhs.true.if.end7_crit_edge:                  ; preds = %land.lhs.true
  %bf.load9.pre = load i64, i64* %0, align 8, !dbg !6401
  %.pre = and i64 %bf.load9.pre, 65535, !dbg !6403
  br label %if.end7, !dbg !6400

if.end7:                                          ; preds = %land.lhs.true.if.end7_crit_edge, %if.end
  %bf.cast113.pre-phi = phi i64 [ %.pre, %land.lhs.true.if.end7_crit_edge ], [ %bf.cast1, %if.end ], !dbg !6403
  %cmp12 = icmp eq i64 %bf.cast113.pre-phi, 32, !dbg !6403
  br i1 %cmp12, label %if.end20, label %land.lhs.true13, !dbg !6404

land.lhs.true13:                                  ; preds = %if.end7
  %cmp18 = icmp eq i64 %bf.cast113.pre-phi, 34, !dbg !6405
  br i1 %cmp18, label %if.end20, label %return, !dbg !6406

if.end20:                                         ; preds = %land.lhs.true13, %if.end7
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6407
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6407
  %call23 = tail call fastcc %union.tree_node* @remapped_type(%union.tree_node* %2, %struct.copy_body_data* %id) #7, !dbg !6409
  %cmp24 = icmp eq %union.tree_node* %2, %call23, !dbg !6410
  br i1 %cmp24, label %if.end26, label %return, !dbg !6411

if.end26:                                         ; preds = %if.end20
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6412
  %call27 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %3) #7, !dbg !6414
  %tobool28 = icmp eq i8 %call27, 0, !dbg !6414
  br i1 %tobool28, label %return, label %if.end30, !dbg !6415

if.end30:                                         ; preds = %if.end26
  %call31 = tail call fastcc %struct.var_ann_d* @var_ann(%union.tree_node* %decl) #7, !dbg !6416
  %tobool32 = icmp eq %struct.var_ann_d* %call31, null, !dbg !6416
  %. = zext i1 %tobool32 to i8, !dbg !6390
  br label %return, !dbg !6390

return:                                           ; preds = %land.lhs.true, %land.lhs.true13, %if.end26, %if.end20, %if.end30, %entry
  %retval.0 = phi i8 [ 1, %entry ], [ 1, %land.lhs.true ], [ 0, %land.lhs.true13 ], [ 0, %if.end20 ], [ 0, %if.end26 ], [ %., %if.end30 ], !dbg !6390
  ret i8 %retval.0, !dbg !6418
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @copy_body(%struct.copy_body_data* %id, i64 %count, i32 %frequency_scale, %struct.basic_block_def* %entry_block_map, %struct.basic_block_def* %exit_block_map) unnamed_addr #5 !dbg !6419 {
entry:
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6423, metadata !DIExpression()), !dbg !6430
  call void @llvm.dbg.value(metadata i64 %count, metadata !6424, metadata !DIExpression()), !dbg !6430
  call void @llvm.dbg.value(metadata i32 %frequency_scale, metadata !6425, metadata !DIExpression()), !dbg !6430
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %entry_block_map, metadata !6426, metadata !DIExpression()), !dbg !6430
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %exit_block_map, metadata !6427, metadata !DIExpression()), !dbg !6430
  %0 = bitcast %struct.copy_body_data* %id to %struct.tree_function_decl**, !dbg !6431
  %1 = load %struct.tree_function_decl*, %struct.tree_function_decl** %0, align 8, !dbg !6431
  %f = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %1, i64 0, i32 1, !dbg !6432
  %2 = load %struct.function*, %struct.function** %f, align 8, !dbg !6432
  %cfg = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, i32 1, !dbg !6432
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !6432
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i64 0, i32 0, !dbg !6432
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !6432
  %tobool = icmp eq %struct.basic_block_def* %4, null, !dbg !6432
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !6432

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2224, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !6432
  br label %cond.end, !dbg !6432

cond.end:                                         ; preds = %entry, %cond.true
  %call = tail call fastcc %union.tree_node* @copy_cfg_body(%struct.copy_body_data* %id, i64 %count, i32 %frequency_scale, %struct.basic_block_def* %entry_block_map, %struct.basic_block_def* %exit_block_map) #7, !dbg !6433
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !6429, metadata !DIExpression()), !dbg !6430
  tail call fastcc void @copy_debug_stmts(%struct.copy_body_data* %id) #7, !dbg !6434
  ret %union.tree_node* undef, !dbg !6435
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !6436 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6443, metadata !DIExpression()), !dbg !6444
  %call = tail call fastcc zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #7, !dbg !6445
  %tobool = icmp eq i8 %call, 0, !dbg !6445
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !6445

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !6445
  br label %cond.end, !dbg !6445

cond.end:                                         ; preds = %entry, %cond.true
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 1, !dbg !6446
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6446
  %tobool1 = icmp eq %struct.VEC_edge_gc* %0, null, !dbg !6446
  br i1 %tobool1, label %cond.end5, label %cond.true2, !dbg !6446

cond.true2:                                       ; preds = %cond.end
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %0, i64 0, i32 0, !dbg !6446
  br label %cond.end5, !dbg !6446

cond.end5:                                        ; preds = %cond.end, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.end ], !dbg !6446
  %call7 = tail call fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0) #7, !dbg !6446
  ret %struct.edge_def* %call7, !dbg !6447
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) unnamed_addr #0 !dbg !6448 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !6454, metadata !DIExpression()), !dbg !6455
  %tobool = icmp eq %struct.VEC_gimple_base* %vec_, null, !dbg !6456
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6456

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !6456
  %0 = load i32, i32* %num, align 8, !dbg !6456
  br label %cond.end, !dbg !6456

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !6456
  ret i32 %cond, !dbg !6456
}

; Function Attrs: nounwind uwtable
define internal fastcc void @insert_init_stmt(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, %union.gimple_statement_d* %init_stmt) unnamed_addr #5 !dbg !6457 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6461, metadata !DIExpression()), !dbg !6474
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6462, metadata !DIExpression()), !dbg !6474
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %init_stmt, metadata !6463, metadata !DIExpression()), !dbg !6474
  %tobool = icmp eq %union.gimple_statement_d* %init_stmt, null, !dbg !6475
  br i1 %tobool, label %if.end35, label %if.then, !dbg !6476

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !6477
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !6477
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !6464, metadata !DIExpression(DW_OP_deref)), !dbg !6478
  call fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* nonnull sret %si, %struct.basic_block_def* %bb) #7, !dbg !6479
  %call = call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6480
  %tobool1 = icmp eq i8 %call, 0, !dbg !6480
  br i1 %tobool1, label %land.lhs.true, label %if.end, !dbg !6481

land.lhs.true:                                    ; preds = %if.then
  %call2 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6482
  %call3 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call2) #6, !dbg !6483
  %tobool4 = icmp eq i8 %call3, 0, !dbg !6483
  br i1 %tobool4, label %land.lhs.true5, label %if.end, !dbg !6484

land.lhs.true5:                                   ; preds = %land.lhs.true
  %call6 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6485
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6485
  %1 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6485
  %call7 = call zeroext i8 @is_gimple_reg_type(%union.tree_node* %1) #6, !dbg !6486
  %tobool8 = icmp eq i8 %call7, 0, !dbg !6486
  br i1 %tobool8, label %if.end, label %land.lhs.true9, !dbg !6487

land.lhs.true9:                                   ; preds = %land.lhs.true5
  %call10 = call fastcc i32 @gimple_assign_rhs_class(%union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6488
  %cmp = icmp eq i32 %call10, 2, !dbg !6489
  br i1 %cmp, label %if.then12, label %if.end, !dbg !6490

if.then12:                                        ; preds = %land.lhs.true9
  %call13 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6491
  %call14 = call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6491
  %call15 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6491
  %call16 = call %union.tree_node* @build1_stat(i32 %call13, %union.tree_node* %call14, %union.tree_node* %call15) #6, !dbg !6491
  call void @llvm.dbg.value(metadata %union.tree_node* %call16, metadata !6467, metadata !DIExpression()), !dbg !6492
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !6464, metadata !DIExpression(DW_OP_deref)), !dbg !6478
  %call17 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* nonnull %si, %union.tree_node* %call16, i8 zeroext 1, %union.tree_node* null, i8 zeroext 0, i32 0) #6, !dbg !6493
  call void @llvm.dbg.value(metadata %union.tree_node* %call17, metadata !6467, metadata !DIExpression()), !dbg !6492
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6494
  %bf.load = load i64, i64* %2, align 8, !dbg !6494
  %3 = trunc i64 %bf.load to i32, !dbg !6494
  %bf.cast = and i32 %3, 65535, !dbg !6494
  call fastcc void @gimple_assign_set_rhs_code(%union.gimple_statement_d* nonnull %init_stmt, i32 %bf.cast) #7, !dbg !6495
  call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* nonnull %init_stmt, %union.tree_node* %call17) #7, !dbg !6496
  br label %if.end, !dbg !6497

if.end:                                           ; preds = %land.lhs.true5, %land.lhs.true, %if.then, %if.then12, %land.lhs.true9
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !6464, metadata !DIExpression(DW_OP_deref)), !dbg !6478
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %si, %union.gimple_statement_d* nonnull %init_stmt, i32 0) #6, !dbg !6498
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !6464, metadata !DIExpression(DW_OP_deref)), !dbg !6478
  call void @gimple_regimplify_operands(%union.gimple_statement_d* nonnull %init_stmt, %struct.gimple_stmt_iterator* nonnull %si) #6, !dbg !6499
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* nonnull %init_stmt) #6, !dbg !6500
  %call18 = call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6501
  %tobool19 = icmp eq i8 %call18, 0, !dbg !6501
  %4 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !6502
  %tobool21 = icmp ne i32 %4, 0, !dbg !6502
  %or.cond = and i1 %tobool19, %tobool21, !dbg !6503
  br i1 %or.cond, label %if.then22, label %if.end34, !dbg !6503

if.then22:                                        ; preds = %if.end
  %call23 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6504
  call void @llvm.dbg.value(metadata %union.tree_node* %call23, metadata !6473, metadata !DIExpression()), !dbg !6505
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %call23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6506
  %bf.load25 = load i64, i64* %5, align 8, !dbg !6506
  %bf.cast271 = and i64 %bf.load25, 65535, !dbg !6508
  %cmp28 = icmp eq i64 %bf.cast271, 141, !dbg !6508
  br i1 %cmp28, label %if.then30, label %if.end32, !dbg !6509

if.then30:                                        ; preds = %if.then22
  %var31 = getelementptr inbounds %union.tree_node, %union.tree_node* %call23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6510
  %6 = bitcast i32* %var31 to %union.tree_node**, !dbg !6510
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !6510
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !6470, metadata !DIExpression()), !dbg !6505
  br label %if.end32, !dbg !6511

if.end32:                                         ; preds = %if.then22, %if.then30
  %var.0 = phi %union.tree_node* [ %7, %if.then30 ], [ %call23, %if.then22 ], !dbg !6512
  call void @llvm.dbg.value(metadata %union.tree_node* %var.0, metadata !6470, metadata !DIExpression()), !dbg !6505
  %call33 = call fastcc %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, %union.tree_node* %var.0, %union.tree_node* %call23, %union.gimple_statement_d* nonnull %init_stmt) #7, !dbg !6513
  br label %if.end34, !dbg !6514

if.end34:                                         ; preds = %if.end, %if.end32
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !6515
  br label %if.end35, !dbg !6516

if.end35:                                         ; preds = %entry, %if.end34
  ret void, !dbg !6517
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @VEC_gimple_base_pop(%struct.VEC_gimple_base* %vec_) unnamed_addr #0 !dbg !6518 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !6523, metadata !DIExpression()), !dbg !6525
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !6526
  %0 = load i32, i32* %num1, align 8, !dbg !6526
  %dec = add i32 %0, -1, !dbg !6526
  store i32 %dec, i32* %num1, align 8, !dbg !6526
  %idxprom = zext i32 %dec to i64, !dbg !6526
  %arrayidx = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6526
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !6526
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %1, metadata !6524, metadata !DIExpression()), !dbg !6525
  ret %union.gimple_statement_d* %1, !dbg !6526
}

; Function Attrs: nounwind uwtable
define internal fastcc void @update_clone_info(%struct.copy_body_data* %id) unnamed_addr #5 !dbg !6527 {
entry:
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6531, metadata !DIExpression()), !dbg !6543
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 3, !dbg !6544
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !6544
  %clones = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i64 0, i32 11, !dbg !6546
  %1 = load %struct.cgraph_node*, %struct.cgraph_node** %clones, align 8, !dbg !6546
  %tobool = icmp eq %struct.cgraph_node* %1, null, !dbg !6547
  br i1 %tobool, label %cleanup.cont, label %if.end, !dbg !6548

if.end:                                           ; preds = %entry
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %1, metadata !6532, metadata !DIExpression()), !dbg !6543
  %2 = bitcast %struct.copy_body_data* %id to i8*, !dbg !6549
  br label %for.cond, !dbg !6550

for.cond:                                         ; preds = %if.end46, %if.end
  %3 = phi %struct.cgraph_node* [ %0, %if.end ], [ %.pre, %if.end46 ], !dbg !6551
  %node.0 = phi %struct.cgraph_node* [ %1, %if.end ], [ %node.4, %if.end46 ], !dbg !6552
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.0, metadata !6532, metadata !DIExpression()), !dbg !6543
  %cmp = icmp eq %struct.cgraph_node* %node.0, %3, !dbg !6553
  br i1 %cmp, label %cleanup.cont.loopexit, label %for.body, !dbg !6554

for.body:                                         ; preds = %for.cond
  %tree_map = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.0, i64 0, i32 21, i32 0, !dbg !6555
  %4 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map, align 8, !dbg !6555
  %tobool4 = icmp eq %struct.VEC_ipa_replace_map_p_gc* %4, null, !dbg !6556
  br i1 %tobool4, label %if.end27, label %for.cond6.preheader, !dbg !6557

for.cond6.preheader:                              ; preds = %for.body
  br label %for.cond6, !dbg !6558

for.cond6:                                        ; preds = %for.cond6.preheader, %cond.end22
  %5 = phi %struct.VEC_ipa_replace_map_p_gc* [ %.pre1, %cond.end22 ], [ %4, %for.cond6.preheader ], !dbg !6559
  %i.0 = phi i32 [ %inc, %cond.end22 ], [ 0, %for.cond6.preheader ], !dbg !6560
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !6533, metadata !DIExpression()), !dbg !6561
  %tobool9 = icmp eq %struct.VEC_ipa_replace_map_p_gc* %5, null, !dbg !6559
  br i1 %tobool9, label %cond.end, label %cond.true, !dbg !6559

cond.true:                                        ; preds = %for.cond6
  %base = getelementptr inbounds %struct.VEC_ipa_replace_map_p_gc, %struct.VEC_ipa_replace_map_p_gc* %5, i64 0, i32 0, !dbg !6559
  br label %cond.end, !dbg !6559

cond.end:                                         ; preds = %for.cond6, %cond.true
  %cond = phi %struct.VEC_ipa_replace_map_p_base* [ %base, %cond.true ], [ null, %for.cond6 ], !dbg !6559
  %call = tail call fastcc i32 @VEC_ipa_replace_map_p_base_length(%struct.VEC_ipa_replace_map_p_base* %cond) #7, !dbg !6559
  %cmp12 = icmp ult i32 %i.0, %call, !dbg !6562
  br i1 %cmp12, label %for.body13, label %if.end27.loopexit, !dbg !6558

for.body13:                                       ; preds = %cond.end
  %6 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map, align 8, !dbg !6563
  %tobool16 = icmp eq %struct.VEC_ipa_replace_map_p_gc* %6, null, !dbg !6563
  br i1 %tobool16, label %cond.end22, label %cond.true17, !dbg !6563

cond.true17:                                      ; preds = %for.body13
  %base20 = getelementptr inbounds %struct.VEC_ipa_replace_map_p_gc, %struct.VEC_ipa_replace_map_p_gc* %6, i64 0, i32 0, !dbg !6563
  br label %cond.end22, !dbg !6563

cond.end22:                                       ; preds = %for.body13, %cond.true17
  %cond23 = phi %struct.VEC_ipa_replace_map_p_base* [ %base20, %cond.true17 ], [ null, %for.body13 ], !dbg !6563
  %call24 = tail call fastcc %struct.ipa_replace_map* @VEC_ipa_replace_map_p_base_index(%struct.VEC_ipa_replace_map_p_base* %cond23, i32 %i.0) #7, !dbg !6563
  call void @llvm.dbg.value(metadata %struct.ipa_replace_map* %call24, metadata !6539, metadata !DIExpression()), !dbg !6549
  %old_tree = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %call24, i64 0, i32 0, !dbg !6564
  %call25 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %old_tree, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %2, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !6564
  %new_tree = getelementptr inbounds %struct.ipa_replace_map, %struct.ipa_replace_map* %call24, i64 0, i32 1, !dbg !6565
  %call26 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %new_tree, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %2, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !6565
  %inc = add i32 %i.0, 1, !dbg !6566
  call void @llvm.dbg.value(metadata i32 %inc, metadata !6533, metadata !DIExpression()), !dbg !6561
  %.pre1 = load %struct.VEC_ipa_replace_map_p_gc*, %struct.VEC_ipa_replace_map_p_gc** %tree_map, align 8, !dbg !6559
  br label %for.cond6, !dbg !6567, !llvm.loop !6568

if.end27.loopexit:                                ; preds = %cond.end
  br label %if.end27, !dbg !6570

if.end27:                                         ; preds = %if.end27.loopexit, %for.body
  %clones28 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.0, i64 0, i32 11, !dbg !6570
  %7 = load %struct.cgraph_node*, %struct.cgraph_node** %clones28, align 8, !dbg !6570
  %tobool29 = icmp eq %struct.cgraph_node* %7, null, !dbg !6572
  br i1 %tobool29, label %if.else, label %if.then30, !dbg !6573

if.then30:                                        ; preds = %if.end27
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %7, metadata !6532, metadata !DIExpression()), !dbg !6543
  br label %if.end46, !dbg !6574

if.else:                                          ; preds = %if.end27
  %next_sibling_clone = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.0, i64 0, i32 9, !dbg !6575
  %8 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone, align 8, !dbg !6575
  %tobool32 = icmp eq %struct.cgraph_node* %8, null, !dbg !6577
  br i1 %tobool32, label %while.cond.preheader, label %if.then33, !dbg !6578

while.cond.preheader:                             ; preds = %if.else
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !6579
  br label %while.cond, !dbg !6581

if.then33:                                        ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %8, metadata !6532, metadata !DIExpression()), !dbg !6543
  br label %if.end46, !dbg !6582

while.cond:                                       ; preds = %while.cond.preheader, %while.body
  %node.1 = phi %struct.cgraph_node* [ %11, %while.body ], [ %node.0, %while.cond.preheader ], !dbg !6552
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1, metadata !6532, metadata !DIExpression()), !dbg !6543
  %cmp37 = icmp eq %struct.cgraph_node* %node.1, %9, !dbg !6583
  br i1 %cmp37, label %while.end, label %land.rhs, !dbg !6584

land.rhs:                                         ; preds = %while.cond
  %next_sibling_clone38 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.1, i64 0, i32 9, !dbg !6585
  %10 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone38, align 8, !dbg !6585
  %tobool39 = icmp eq %struct.cgraph_node* %10, null, !dbg !6586
  br i1 %tobool39, label %while.body, label %while.end, !dbg !6581

while.body:                                       ; preds = %land.rhs
  %clone_of = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.1, i64 0, i32 12, !dbg !6587
  %11 = load %struct.cgraph_node*, %struct.cgraph_node** %clone_of, align 8, !dbg !6587
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %11, metadata !6532, metadata !DIExpression()), !dbg !6543
  br label %while.cond, !dbg !6581, !llvm.loop !6588

while.end:                                        ; preds = %while.cond, %land.rhs
  %node.1.lcssa = phi %struct.cgraph_node* [ %node.1, %while.cond ], [ %node.1, %land.rhs ], !dbg !6552
  %cmp37.lcssa = phi i1 [ %cmp37, %while.cond ], [ %cmp37, %land.rhs ], !dbg !6583
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !6532, metadata !DIExpression()), !dbg !6543
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !6532, metadata !DIExpression()), !dbg !6543
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !6532, metadata !DIExpression()), !dbg !6543
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !6532, metadata !DIExpression()), !dbg !6543
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !6532, metadata !DIExpression()), !dbg !6543
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.1.lcssa, metadata !6532, metadata !DIExpression()), !dbg !6543
  br i1 %cmp37.lcssa, label %if.end46, label %if.then42, !dbg !6589

if.then42:                                        ; preds = %while.end
  %next_sibling_clone43 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %node.1.lcssa, i64 0, i32 9, !dbg !6590
  %12 = load %struct.cgraph_node*, %struct.cgraph_node** %next_sibling_clone43, align 8, !dbg !6590
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %12, metadata !6532, metadata !DIExpression()), !dbg !6543
  br label %if.end46, !dbg !6592

if.end46:                                         ; preds = %while.end, %if.then33, %if.then42, %if.then30
  %node.4 = phi %struct.cgraph_node* [ %7, %if.then30 ], [ %8, %if.then33 ], [ %12, %if.then42 ], [ %9, %while.end ], !dbg !6593
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node.4, metadata !6532, metadata !DIExpression()), !dbg !6543
  %.pre = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !6551
  br label %for.cond, !dbg !6594, !llvm.loop !6595

cleanup.cont.loopexit:                            ; preds = %for.cond
  br label %cleanup.cont, !dbg !6597

cleanup.cont:                                     ; preds = %cleanup.cont.loopexit, %entry
  ret void, !dbg !6597
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @remap_gimple_op_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #5 !dbg !6598 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !6600, metadata !DIExpression()), !dbg !6632
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !6601, metadata !DIExpression()), !dbg !6632
  call void @llvm.dbg.value(metadata i8* %data, metadata !6602, metadata !DIExpression()), !dbg !6632
  call void @llvm.dbg.value(metadata i8* %data, metadata !6603, metadata !DIExpression()), !dbg !6632
  %info = getelementptr inbounds i8, i8* %data, i64 24, !dbg !6633
  %0 = bitcast i8* %info to %struct.copy_body_data**, !dbg !6633
  %1 = load %struct.copy_body_data*, %struct.copy_body_data** %0, align 8, !dbg !6633
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %1, metadata !6604, metadata !DIExpression()), !dbg !6632
  call void @llvm.dbg.value(metadata %union.tree_node* undef, metadata !6605, metadata !DIExpression()), !dbg !6632
  %2 = bitcast %union.tree_node** %tp to i64**, !dbg !6634
  %3 = load i64*, i64** %2, align 8, !dbg !6634
  %bf.load = load i64, i64* %3, align 8, !dbg !6634
  %bf.cast3 = and i64 %bf.load, 65535, !dbg !6635
  %cmp = icmp eq i64 %bf.cast3, 141, !dbg !6635
  %.cast = bitcast i64* %3 to %union.tree_node*, !dbg !6636
  br i1 %cmp, label %if.then, label %if.else, !dbg !6637

if.then:                                          ; preds = %entry
  %call = tail call fastcc %union.tree_node* @remap_ssa_name(%union.tree_node* %.cast, %struct.copy_body_data* %1) #7, !dbg !6638
  store %union.tree_node* %call, %union.tree_node** %tp, align 8, !dbg !6640
  store i32 0, i32* %walk_subtrees, align 4, !dbg !6641
  br label %cleanup325, !dbg !6642

if.else:                                          ; preds = %entry
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %1, i64 0, i32 0, !dbg !6643
  %4 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !6643
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !6605, metadata !DIExpression()), !dbg !6632
  %call1 = tail call zeroext i8 @auto_var_in_fn_p(%union.tree_node* %.cast, %union.tree_node* %4) #6, !dbg !6644
  %tobool = icmp eq i8 %call1, 0, !dbg !6644
  %5 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !6645
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6646
  %7 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !6646
  br i1 %tobool, label %if.else47, label %if.then2, !dbg !6646

if.then2:                                         ; preds = %if.else
  %call3 = tail call %union.tree_node* @remap_decl(%union.tree_node* %5, %struct.copy_body_data* %1) #7, !dbg !6647
  call void @llvm.dbg.value(metadata %union.tree_node* %call3, metadata !6606, metadata !DIExpression()), !dbg !6648
  %tobool4 = icmp eq %union.tree_node* %call3, null, !dbg !6649
  br i1 %tobool4, label %cond.true, label %cond.end, !dbg !6649

cond.true:                                        ; preds = %if.then2
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 748, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !6649
  br label %cond.end, !dbg !6649

cond.end:                                         ; preds = %if.then2, %cond.true
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !6648
  br label %while.cond, !dbg !6650

while.cond:                                       ; preds = %while.body, %cond.end
  %new_decl.0 = phi %union.tree_node* [ %call3, %cond.end ], [ %12, %while.body ], !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0, metadata !6606, metadata !DIExpression()), !dbg !6648
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6650
  %bf.load6 = load i64, i64* %9, align 8, !dbg !6650
  %bf.cast819 = and i64 %bf.load6, 65535, !dbg !6650
  %cmp9 = icmp eq i64 %bf.cast819, 116, !dbg !6650
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false, !dbg !6650

lor.lhs.false:                                    ; preds = %while.cond
  %10 = or i64 %bf.cast819, 4, !dbg !6650
  %11 = icmp eq i64 %10, 117, !dbg !6650
  br i1 %11, label %land.lhs.true, label %while.end, !dbg !6650

land.lhs.true:                                    ; preds = %lor.lhs.false, %while.cond
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6650
  %12 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6650
  %cmp21 = icmp eq %union.tree_node* %12, %8, !dbg !6650
  br i1 %cmp21, label %while.end, label %land.rhs, !dbg !6650

land.rhs:                                         ; preds = %land.lhs.true
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6650
  %13 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6650
  %type26 = getelementptr inbounds %union.tree_node, %union.tree_node* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6650
  %14 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !6650
  %cmp27 = icmp eq %union.tree_node* %13, %14, !dbg !6650
  br i1 %cmp27, label %while.body, label %while.end, !dbg !6650

while.body:                                       ; preds = %land.rhs
  call void @llvm.dbg.value(metadata %union.tree_node* %12, metadata !6606, metadata !DIExpression()), !dbg !6648
  br label %while.cond, !dbg !6650, !llvm.loop !6651

while.end:                                        ; preds = %lor.lhs.false, %land.lhs.true, %land.rhs
  %new_decl.0.lcssa = phi %union.tree_node* [ %new_decl.0, %lor.lhs.false ], [ %new_decl.0, %land.lhs.true ], [ %new_decl.0, %land.rhs ], !dbg !6648
  %bf.cast819.lcssa = phi i64 [ %bf.cast819, %lor.lhs.false ], [ %bf.cast819, %land.lhs.true ], [ %bf.cast819, %land.rhs ], !dbg !6650
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !6606, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !6606, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !6606, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !6606, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !6606, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !6606, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !6606, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !6606, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.0.lcssa, metadata !6606, metadata !DIExpression()), !dbg !6648
  %cmp35 = icmp eq i64 %bf.cast819.lcssa, 23, !dbg !6652
  br i1 %cmp35, label %land.lhs.true36, label %if.end, !dbg !6654

land.lhs.true36:                                  ; preds = %while.end
  %15 = bitcast %union.tree_node** %tp to %struct.tree_common**, !dbg !6655
  %16 = load %struct.tree_common*, %struct.tree_common** %15, align 8, !dbg !6655
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %16, i64 0, i32 2, !dbg !6655
  %17 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !6655
  %type40 = getelementptr inbounds %union.tree_node, %union.tree_node* %new_decl.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6656
  %18 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !6656
  %call41 = tail call zeroext i8 @useless_type_conversion_p(%union.tree_node* %17, %union.tree_node* %18) #6, !dbg !6657
  %tobool42 = icmp eq i8 %call41, 0, !dbg !6657
  br i1 %tobool42, label %if.then43, label %if.end, !dbg !6658

if.then43:                                        ; preds = %land.lhs.true36
  %19 = load %struct.tree_common*, %struct.tree_common** %15, align 8, !dbg !6659
  %type45 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %19, i64 0, i32 2, !dbg !6659
  %20 = load %union.tree_node*, %union.tree_node** %type45, align 8, !dbg !6659
  %call46 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %20, %union.tree_node* %new_decl.0.lcssa) #6, !dbg !6659
  call void @llvm.dbg.value(metadata %union.tree_node* %call46, metadata !6606, metadata !DIExpression()), !dbg !6648
  br label %if.end, !dbg !6660

if.end:                                           ; preds = %land.lhs.true36, %if.then43, %while.end
  %new_decl.1 = phi %union.tree_node* [ %new_decl.0.lcssa, %land.lhs.true36 ], [ %call46, %if.then43 ], [ %new_decl.0.lcssa, %while.end ], !dbg !6648
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decl.1, metadata !6606, metadata !DIExpression()), !dbg !6648
  store %union.tree_node* %new_decl.1, %union.tree_node** %tp, align 8, !dbg !6661
  store i32 0, i32* %walk_subtrees, align 4, !dbg !6662
  br label %cleanup325, !dbg !6663

if.else47:                                        ; preds = %if.else
  %21 = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6664
  %bf.load49 = load i64, i64* %21, align 8, !dbg !6664
  %bf.cast514 = and i64 %bf.load49, 65535, !dbg !6665
  %cmp52 = icmp eq i64 %bf.cast514, 147, !dbg !6665
  br i1 %cmp52, label %if.then53, label %if.else54, !dbg !6666

if.then53:                                        ; preds = %if.else47
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 762, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !6667
  br label %cleanup325, !dbg !6667

if.else54:                                        ; preds = %if.else47
  %cmp59 = icmp eq i64 %bf.cast514, 120, !dbg !6668
  br i1 %cmp59, label %if.then60, label %if.else61, !dbg !6669

if.then60:                                        ; preds = %if.else54
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 764, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !6670
  br label %cleanup325, !dbg !6670

if.else61:                                        ; preds = %if.else54
  %cmp66 = icmp eq i64 %bf.cast514, 30, !dbg !6671
  br i1 %cmp66, label %land.lhs.true67, label %if.else75, !dbg !6672

land.lhs.true67:                                  ; preds = %if.else61
  %context = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6673
  %22 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !6673
  %tobool68 = icmp eq %union.tree_node* %22, null, !dbg !6673
  br i1 %tobool68, label %if.then73, label %lor.lhs.false69, !dbg !6674

lor.lhs.false69:                                  ; preds = %land.lhs.true67
  %call70 = tail call %union.tree_node* @decl_function_context(%union.tree_node* %5) #6, !dbg !6675
  %23 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !6676
  %cmp72 = icmp eq %union.tree_node* %call70, %23, !dbg !6677
  br i1 %cmp72, label %lor.lhs.false69.if.then73_crit_edge, label %lor.lhs.false69.if.else75_crit_edge, !dbg !6678

lor.lhs.false69.if.then73_crit_edge:              ; preds = %lor.lhs.false69
  %.pre27 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !6679
  br label %if.then73, !dbg !6678

lor.lhs.false69.if.else75_crit_edge:              ; preds = %lor.lhs.false69
  %.pre = load i64*, i64** %2, align 8, !dbg !6680
  %bf.load77.pre = load i64, i64* %.pre, align 8, !dbg !6680
  %24 = bitcast i64* %.pre to %union.tree_node*, !dbg !6678
  %25 = bitcast i64* %.pre to %struct.tree_exp*, !dbg !6678
  %.pre28 = and i64 %bf.load77.pre, 65535, !dbg !6680
  br label %if.else75, !dbg !6678

if.then73:                                        ; preds = %lor.lhs.false69.if.then73_crit_edge, %land.lhs.true67
  %26 = phi %union.tree_node* [ %.pre27, %lor.lhs.false69.if.then73_crit_edge ], [ %5, %land.lhs.true67 ], !dbg !6679
  %call74 = tail call %union.tree_node* @remap_decl(%union.tree_node* %26, %struct.copy_body_data* %1) #7, !dbg !6681
  store %union.tree_node* %call74, %union.tree_node** %tp, align 8, !dbg !6682
  br label %cleanup325, !dbg !6683

if.else75:                                        ; preds = %lor.lhs.false69.if.else75_crit_edge, %if.else61
  %bf.cast79.pre-phi = phi i64 [ %.pre28, %lor.lhs.false69.if.else75_crit_edge ], [ %bf.cast514, %if.else61 ], !dbg !6680
  %27 = phi %struct.tree_exp* [ %25, %lor.lhs.false69.if.else75_crit_edge ], [ %7, %if.else61 ]
  %28 = phi %union.tree_node* [ %24, %lor.lhs.false69.if.else75_crit_edge ], [ %5, %if.else61 ]
  %29 = phi i64* [ %.pre, %lor.lhs.false69.if.else75_crit_edge ], [ %6, %if.else61 ], !dbg !6680
  %arrayidx80 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast79.pre-phi, !dbg !6680
  %30 = load i32, i32* %arrayidx80, align 4, !dbg !6680
  %cmp81 = icmp eq i32 %30, 2, !dbg !6680
  br i1 %cmp81, label %if.then82, label %if.else84, !dbg !6684

if.then82:                                        ; preds = %if.else75
  %.cast7 = bitcast i64* %29 to %union.tree_node*, !dbg !6685
  %call83 = tail call %union.tree_node* @remap_type(%union.tree_node* %.cast7, %struct.copy_body_data* %1) #7, !dbg !6686
  store %union.tree_node* %call83, %union.tree_node** %tp, align 8, !dbg !6687
  br label %cleanup325, !dbg !6688

if.else84:                                        ; preds = %if.else75
  %cmp91 = icmp eq i32 %30, 1, !dbg !6689
  br i1 %cmp91, label %if.then92, label %if.else117, !dbg !6690

if.then92:                                        ; preds = %if.else84
  %type94 = getelementptr inbounds %union.tree_node, %union.tree_node* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6691
  %31 = load %union.tree_node*, %union.tree_node** %type94, align 8, !dbg !6691
  %call95 = tail call %union.tree_node* @remap_type(%union.tree_node* %31, %struct.copy_body_data* %1) #7, !dbg !6692
  call void @llvm.dbg.value(metadata %union.tree_node* %call95, metadata !6610, metadata !DIExpression()), !dbg !6693
  %32 = bitcast %union.tree_node** %tp to %struct.tree_common**, !dbg !6694
  %33 = load %struct.tree_common*, %struct.tree_common** %32, align 8, !dbg !6694
  %type97 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %33, i64 0, i32 2, !dbg !6694
  %34 = load %union.tree_node*, %union.tree_node** %type97, align 8, !dbg !6694
  %cmp98 = icmp eq %union.tree_node* %call95, %34, !dbg !6696
  br i1 %cmp98, label %if.then99, label %if.else100, !dbg !6697

if.then99:                                        ; preds = %if.then92
  store i32 0, i32* %walk_subtrees, align 4, !dbg !6698
  br label %cleanup325, !dbg !6699

if.else100:                                       ; preds = %if.then92
  %35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %33, i64 0, i32 0, i32 0, !dbg !6697
  %bf.load102 = load i64, i64* %35, align 8, !dbg !6700
  %bf.cast10416 = and i64 %bf.load102, 65535, !dbg !6702
  %cmp105 = icmp eq i64 %bf.cast10416, 23, !dbg !6702
  br i1 %cmp105, label %if.then106, label %if.else111, !dbg !6703

if.then106:                                       ; preds = %if.else100
  %int_cst107 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %33, i64 1, i32 0, i32 0, !dbg !6704
  %36 = load i64, i64* %int_cst107, align 8, !dbg !6704
  %high = getelementptr inbounds %struct.tree_common, %struct.tree_common* %33, i64 1, i32 1, !dbg !6705
  %37 = bitcast %union.tree_node** %high to i64*, !dbg !6705
  %38 = load i64, i64* %37, align 8, !dbg !6705
  %call110 = tail call %union.tree_node* @build_int_cst_wide(%union.tree_node* %call95, i64 %36, i64 %38) #6, !dbg !6706
  store %union.tree_node* %call110, %union.tree_node** %tp, align 8, !dbg !6707
  br label %cleanup325, !dbg !6708

if.else111:                                       ; preds = %if.else100
  %.cast17 = bitcast %struct.tree_common* %33 to %union.tree_node*, !dbg !6709
  %call112 = tail call %union.tree_node* @copy_node_stat(%union.tree_node* %.cast17) #6, !dbg !6710
  store %union.tree_node* %call112, %union.tree_node** %tp, align 8, !dbg !6712
  %type114 = getelementptr inbounds %union.tree_node, %union.tree_node* %call112, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6713
  store %union.tree_node* %call95, %union.tree_node** %type114, align 8, !dbg !6714
  br label %cleanup325

if.else117:                                       ; preds = %if.else84
  %39 = getelementptr inbounds %union.tree_node, %union.tree_node* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6715
  %bf.load119 = load i64, i64* %39, align 8, !dbg !6715
  %bf.cast1218 = and i64 %bf.load119, 65535, !dbg !6716
  %cmp122 = icmp eq i64 %bf.cast1218, 47, !dbg !6716
  br i1 %cmp122, label %if.then123, label %if.end197, !dbg !6717

if.then123:                                       ; preds = %if.else117
  %arrayidx126 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %27, i64 0, i32 3, i64 0, !dbg !6718
  %40 = bitcast %union.tree_node** %arrayidx126 to i8**, !dbg !6718
  %41 = load i8*, i8** %40, align 8, !dbg !6718
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %1, i64 0, i32 6, !dbg !6719
  %42 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !6719
  %call127 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %42, i8* %41) #6, !dbg !6720
  call void @llvm.dbg.value(metadata i8** %call127, metadata !6621, metadata !DIExpression()), !dbg !6721
  %tobool128 = icmp eq i8** %call127, null, !dbg !6722
  br i1 %tobool128, label %cleanup, label %if.then129, !dbg !6723

if.then129:                                       ; preds = %if.then123
  call void @llvm.dbg.value(metadata i8** %call127, metadata !6621, metadata !DIExpression()), !dbg !6721
  %43 = bitcast i8** %call127 to %struct.tree_common**, !dbg !6724
  %44 = load %struct.tree_common*, %struct.tree_common** %43, align 8, !dbg !6724
  %type132 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %44, i64 0, i32 2, !dbg !6724
  %45 = bitcast %union.tree_node** %type132 to %struct.tree_common**, !dbg !6724
  %46 = load %struct.tree_common*, %struct.tree_common** %45, align 8, !dbg !6724
  %type134 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %46, i64 0, i32 2, !dbg !6724
  %47 = load %union.tree_node*, %union.tree_node** %type134, align 8, !dbg !6724
  call void @llvm.dbg.value(metadata %union.tree_node* %47, metadata !6622, metadata !DIExpression()), !dbg !6725
  %.cast14 = bitcast %struct.tree_common* %44 to %union.tree_node*, !dbg !6726
  %call135 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %.cast14) #6, !dbg !6727
  call void @llvm.dbg.value(metadata %union.tree_node* %call135, metadata !6625, metadata !DIExpression()), !dbg !6725
  %48 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !6728
  call void @llvm.dbg.value(metadata %union.tree_node* %48, metadata !6626, metadata !DIExpression()), !dbg !6725
  %call136 = tail call %union.tree_node* @gimple_fold_indirect_ref(%union.tree_node* %call135) #6, !dbg !6729
  store %union.tree_node* %call136, %union.tree_node** %tp, align 8, !dbg !6730
  %tobool137 = icmp eq %union.tree_node* %call136, null, !dbg !6731
  br i1 %tobool137, label %if.then138, label %if.end194, !dbg !6733

if.then138:                                       ; preds = %if.then129
  %49 = getelementptr inbounds %union.tree_node, %union.tree_node* %call135, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6734
  %bf.load140 = load i64, i64* %49, align 8, !dbg !6734
  %bf.cast14215 = and i64 %bf.load140, 65535, !dbg !6737
  %cmp143 = icmp eq i64 %bf.cast14215, 121, !dbg !6737
  br i1 %cmp143, label %if.then144, label %if.else172, !dbg !6738

if.then144:                                       ; preds = %if.then138
  %50 = load i32, i32* getelementptr inbounds ([0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 121), align 4, !dbg !6739
  %cmp151 = icmp ugt i32 %50, 3, !dbg !6739
  br i1 %cmp151, label %land.lhs.true152, label %cond.end163, !dbg !6739

land.lhs.true152:                                 ; preds = %if.then144
  %cmp159 = icmp ult i32 %50, 11, !dbg !6739
  br i1 %cmp159, label %cond.true160, label %cond.end163, !dbg !6739

cond.true160:                                     ; preds = %land.lhs.true152
  %51 = getelementptr inbounds %union.tree_node, %union.tree_node* %call135, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6739
  %52 = load i32, i32* %51, align 8, !dbg !6739
  br label %cond.end163, !dbg !6739

cond.end163:                                      ; preds = %if.then144, %land.lhs.true152, %cond.true160
  %cond164 = phi i32 [ %52, %cond.true160 ], [ 0, %land.lhs.true152 ], [ 0, %if.then144 ], !dbg !6739
  %call165 = tail call %union.tree_node* @fold_indirect_ref_1(i32 %cond164, %union.tree_node* %47, %union.tree_node* %call135) #6, !dbg !6741
  store %union.tree_node* %call165, %union.tree_node** %tp, align 8, !dbg !6742
  %tobool166 = icmp eq %union.tree_node* %call165, null, !dbg !6743
  br i1 %tobool166, label %if.then167, label %if.end194, !dbg !6745

if.then167:                                       ; preds = %cond.end163
  %operands169 = getelementptr inbounds %union.tree_node, %union.tree_node* %call135, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6746
  %53 = bitcast %union.tree_node** %operands169 to i64*, !dbg !6746
  %54 = load i64, i64* %53, align 8, !dbg !6746
  %55 = bitcast %union.tree_node** %tp to i64*, !dbg !6747
  store i64 %54, i64* %55, align 8, !dbg !6747
  br label %if.end194, !dbg !6748

if.else172:                                       ; preds = %if.then138
  %call173 = tail call %union.tree_node* @build1_stat(i32 47, %union.tree_node* %47, %union.tree_node* %call135) #6, !dbg !6749
  store %union.tree_node* %call173, %union.tree_node** %tp, align 8, !dbg !6751
  %56 = getelementptr inbounds %union.tree_node, %union.tree_node* %48, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6752
  %bf.load175 = load i64, i64* %56, align 8, !dbg !6752
  %bf.cast177 = and i64 %bf.load175, 524288, !dbg !6752
  %.cast23 = getelementptr inbounds %union.tree_node, %union.tree_node* %call173, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6753
  %bf.load179 = load i64, i64* %.cast23, align 8, !dbg !6754
  %bf.clear180 = and i64 %bf.load179, -524289, !dbg !6754
  %bf.set = or i64 %bf.clear180, %bf.cast177, !dbg !6754
  store i64 %bf.set, i64* %.cast23, align 8, !dbg !6754
  %bf.load182 = load i64, i64* %56, align 8, !dbg !6755
  %bf.cast185 = and i64 %bf.load182, 8388608, !dbg !6755
  %57 = load i64*, i64** %2, align 8, !dbg !6756
  %bf.load187 = load i64, i64* %57, align 8, !dbg !6757
  %bf.clear190 = and i64 %bf.load187, -8388609, !dbg !6757
  %bf.set191 = or i64 %bf.clear190, %bf.cast185, !dbg !6757
  store i64 %bf.set191, i64* %57, align 8, !dbg !6757
  br label %if.end194

if.end194:                                        ; preds = %cond.end163, %if.then129, %if.else172, %if.then167
  store i32 0, i32* %walk_subtrees, align 4, !dbg !6758
  br label %cleanup

cleanup:                                          ; preds = %if.then123, %if.end194
  %cleanup.dest.slot.0 = phi i1 [ false, %if.end194 ], [ true, %if.then123 ]
  br i1 %cleanup.dest.slot.0, label %if.end197, label %cleanup325

if.end197:                                        ; preds = %cleanup, %if.else117
  %call198 = tail call %union.tree_node* @copy_tree_r(%union.tree_node** %tp, i32* %walk_subtrees, i8* null) #7, !dbg !6759
  %58 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6760
  %call199 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %58) #7, !dbg !6762
  %tobool200 = icmp eq i8 %call199, 0, !dbg !6762
  br i1 %tobool200, label %if.end215, label %land.lhs.true201, !dbg !6763

land.lhs.true201:                                 ; preds = %if.end197
  %59 = load i64*, i64** %2, align 8, !dbg !6764
  %bf.load203 = load i64, i64* %59, align 8, !dbg !6764
  %bf.cast20513 = and i64 %bf.load203, 65535, !dbg !6765
  %cmp206 = icmp eq i64 %bf.cast20513, 32, !dbg !6765
  %60 = bitcast i64* %59 to %union.tree_node*, !dbg !6766
  br i1 %cmp206, label %land.lhs.true208, label %if.end215, !dbg !6766

land.lhs.true208:                                 ; preds = %land.lhs.true201
  %remapping_type_depth = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %1, i64 0, i32 17, !dbg !6767
  %61 = load i32, i32* %remapping_type_depth, align 8, !dbg !6767
  %62 = load i32, i32* @processing_debug_stmt, align 4, !dbg !6768
  %63 = or i32 %61, %62, !dbg !6769
  %64 = icmp eq i32 %63, 0, !dbg !6769
  br i1 %64, label %if.then213, label %if.end215, !dbg !6769

if.then213:                                       ; preds = %land.lhs.true208
  %call214 = tail call zeroext i8 @add_referenced_var(%union.tree_node* %60) #6, !dbg !6770
  br label %if.end215, !dbg !6770

if.end215:                                        ; preds = %land.lhs.true208, %if.end197, %if.then213, %land.lhs.true201
  %65 = load i64*, i64** %2, align 8, !dbg !6771
  %bf.load217 = load i64, i64* %65, align 8, !dbg !6771
  %bf.cast219 = and i64 %bf.load217, 65535, !dbg !6771
  %arrayidx221 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast219, !dbg !6771
  %66 = load i32, i32* %arrayidx221, align 4, !dbg !6771
  %cmp222 = icmp ugt i32 %66, 3, !dbg !6771
  %67 = bitcast i64* %65 to %union.tree_node*, !dbg !6771
  br i1 %cmp222, label %land.lhs.true224, label %if.end240, !dbg !6771

land.lhs.true224:                                 ; preds = %if.end215
  %cmp231 = icmp ult i32 %66, 11, !dbg !6771
  br i1 %cmp231, label %if.then233, label %if.end240, !dbg !6773

if.then233:                                       ; preds = %land.lhs.true224
  %call234 = tail call %union.tree_node** @tree_block(%union.tree_node* %67) #6, !dbg !6774
  %68 = load %union.tree_node*, %union.tree_node** %call234, align 8, !dbg !6774
  %tobool235 = icmp eq %union.tree_node* %68, null, !dbg !6774
  br i1 %tobool235, label %if.end240, label %cond.true236, !dbg !6774

cond.true236:                                     ; preds = %if.then233
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 856, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !6774
  br label %if.end240, !dbg !6774

if.end240:                                        ; preds = %if.then233, %cond.true236, %land.lhs.true224, %if.end215
  %69 = load i64*, i64** %2, align 8, !dbg !6775
  %bf.load242 = load i64, i64* %69, align 8, !dbg !6775
  %bf.cast2449 = and i64 %bf.load242, 65535, !dbg !6777
  %cmp245 = icmp eq i64 %bf.cast2449, 163, !dbg !6777
  %70 = bitcast i64* %69 to %struct.tree_exp*, !dbg !6778
  br i1 %cmp245, label %if.end253, label %if.then247, !dbg !6778

if.then247:                                       ; preds = %if.end240
  %71 = bitcast %union.tree_node** %tp to %struct.tree_common**, !dbg !6779
  %type249 = getelementptr inbounds i64, i64* %69, i64 2, !dbg !6779
  %72 = bitcast i64* %type249 to %union.tree_node**, !dbg !6779
  %73 = load %union.tree_node*, %union.tree_node** %72, align 8, !dbg !6779
  %call250 = tail call %union.tree_node* @remap_type(%union.tree_node* %73, %struct.copy_body_data* %1) #7, !dbg !6780
  %74 = load %struct.tree_common*, %struct.tree_common** %71, align 8, !dbg !6781
  %type252 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %74, i64 0, i32 2, !dbg !6781
  store %union.tree_node* %call250, %union.tree_node** %type252, align 8, !dbg !6782
  %.pre25 = load i64*, i64** %2, align 8, !dbg !6783
  %bf.load255.pre = load i64, i64* %.pre25, align 8, !dbg !6783
  %75 = bitcast i64* %.pre25 to %struct.tree_exp*, !dbg !6781
  br label %if.end253, !dbg !6781

if.end253:                                        ; preds = %if.end240, %if.then247
  %.in = phi i64* [ %69, %if.end240 ], [ %.pre25, %if.then247 ]
  %76 = phi %struct.tree_exp* [ %70, %if.end240 ], [ %75, %if.then247 ]
  %77 = phi %struct.tree_exp* [ %70, %if.end240 ], [ %75, %if.then247 ]
  %bf.load277 = phi i64 [ %bf.load242, %if.end240 ], [ %bf.load255.pre, %if.then247 ], !dbg !6783
  %78 = bitcast i64* %.in to %union.tree_node*, !dbg !6784
  %bf.cast25710 = and i64 %bf.load277, 65535, !dbg !6785
  %cmp258 = icmp eq i64 %bf.cast25710, 55, !dbg !6785
  br i1 %cmp258, label %land.lhs.true260, label %if.else275, !dbg !6786

land.lhs.true260:                                 ; preds = %if.end253
  %arrayidx263 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %77, i64 0, i32 3, i64 3, !dbg !6787
  %79 = load %union.tree_node*, %union.tree_node** %arrayidx263, align 8, !dbg !6787
  %tobool264 = icmp eq %union.tree_node* %79, null, !dbg !6787
  br i1 %tobool264, label %if.else275, label %if.then265, !dbg !6788

if.then265:                                       ; preds = %land.lhs.true260
  %80 = bitcast %union.tree_node** %tp to %struct.tree_exp**, !dbg !6787
  %arrayidx268 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %76, i64 0, i32 3, i64 3, !dbg !6789
  %81 = bitcast %union.tree_node** %arrayidx268 to i64*, !dbg !6789
  %82 = load i64, i64* %81, align 8, !dbg !6789
  %arrayidx271 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %76, i64 0, i32 3, i64 1, !dbg !6791
  %83 = bitcast %union.tree_node** %arrayidx271 to i64*, !dbg !6792
  store i64 %82, i64* %83, align 8, !dbg !6792
  %84 = load %struct.tree_exp*, %struct.tree_exp** %80, align 8, !dbg !6793
  %arrayidx274 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %84, i64 0, i32 3, i64 3, !dbg !6793
  store %union.tree_node* null, %union.tree_node** %arrayidx274, align 8, !dbg !6794
  br label %cleanup325, !dbg !6795

if.else275:                                       ; preds = %land.lhs.true260, %if.end253
  %cmp280 = icmp eq i64 %bf.cast25710, 121, !dbg !6796
  br i1 %cmp280, label %if.then282, label %cleanup325, !dbg !6797

if.then282:                                       ; preds = %if.else275
  %call283 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %78) #6, !dbg !6798
  call void @llvm.dbg.value(metadata i8 %call283, metadata !6627, metadata !DIExpression()), !dbg !6799
  %block285 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %1, i64 0, i32 8, !dbg !6800
  %85 = bitcast %union.tree_node** %block285 to i64*, !dbg !6800
  %86 = load i64, i64* %85, align 8, !dbg !6800
  store %union.tree_node* null, %union.tree_node** %block285, align 8, !dbg !6801
  %87 = bitcast %union.tree_node** %tp to %struct.tree_exp**, !dbg !6802
  %88 = load %struct.tree_exp*, %struct.tree_exp** %87, align 8, !dbg !6802
  %arrayidx289 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %88, i64 0, i32 3, i64 0, !dbg !6802
  %89 = bitcast %struct.copy_body_data* %1 to i8*, !dbg !6802
  %call290 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %arrayidx289, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %89, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !6802
  store i64 %86, i64* %85, align 8, !dbg !6803
  %90 = load %struct.tree_exp*, %struct.tree_exp** %87, align 8, !dbg !6804
  %arrayidx294 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %90, i64 0, i32 3, i64 0, !dbg !6804
  %91 = bitcast %union.tree_node** %arrayidx294 to i64**, !dbg !6804
  %92 = load i64*, i64** %91, align 8, !dbg !6804
  %bf.load296 = load i64, i64* %92, align 8, !dbg !6804
  %bf.cast29812 = and i64 %bf.load296, 65535, !dbg !6806
  %cmp299 = icmp eq i64 %bf.cast29812, 47, !dbg !6806
  br i1 %cmp299, label %if.then301, label %if.else308, !dbg !6807

if.then301:                                       ; preds = %if.then282
  %arrayidx307 = getelementptr inbounds i64, i64* %92, i64 5, !dbg !6808
  %93 = load i64, i64* %arrayidx307, align 8, !dbg !6808
  %94 = bitcast %union.tree_node** %tp to i64*, !dbg !6809
  store i64 %93, i64* %94, align 8, !dbg !6809
  br label %if.end309, !dbg !6810

if.else308:                                       ; preds = %if.then282
  %95 = bitcast %struct.tree_exp* %90 to %union.tree_node*, !dbg !6811
  tail call void @recompute_tree_invariant_for_addr_expr(%union.tree_node* %95) #6, !dbg !6812
  br label %if.end309

if.end309:                                        ; preds = %if.else308, %if.then301
  %tobool310 = icmp eq i8 %call283, 0, !dbg !6813
  br i1 %tobool310, label %if.end315, label %land.lhs.true311, !dbg !6815

land.lhs.true311:                                 ; preds = %if.end309
  %96 = load %union.tree_node*, %union.tree_node** %tp, align 8, !dbg !6816
  %call312 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %96) #6, !dbg !6817
  %tobool313 = icmp eq i8 %call312, 0, !dbg !6817
  br i1 %tobool313, label %if.then314, label %if.end315, !dbg !6818

if.then314:                                       ; preds = %land.lhs.true311
  %regimplify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %1, i64 0, i32 15, !dbg !6819
  store i8 1, i8* %regimplify, align 2, !dbg !6820
  br label %if.end315, !dbg !6821

if.end315:                                        ; preds = %land.lhs.true311, %if.end309, %if.then314
  store i32 0, i32* %walk_subtrees, align 4, !dbg !6822
  br label %cleanup325, !dbg !6823

cleanup325:                                       ; preds = %if.then53, %if.then73, %if.then106, %if.else111, %if.then99, %if.else275, %if.end315, %if.then265, %if.then82, %if.then60, %if.end, %cleanup, %if.then
  ret %union.tree_node* null, !dbg !6824
}

declare dso_local void @update_ssa(i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) unnamed_addr #0 !dbg !6825 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %vec_, metadata !6829, metadata !DIExpression()), !dbg !6830
  %0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_, align 8, !dbg !6831
  %tobool = icmp eq %struct.VEC_gimple_heap* %0, null, !dbg !6831
  br i1 %tobool, label %if.end, label %if.then, !dbg !6833

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_gimple_heap* %0 to i8*, !dbg !6833
  tail call void @free(i8* nonnull %1) #6, !dbg !6831
  br label %if.end, !dbg !6831

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %vec_, align 8, !dbg !6833
  ret void, !dbg !6833
}

declare dso_local void @pop_cfun() local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @maybe_inline_call_in_expr(%union.tree_node* %exp) local_unnamed_addr #5 !dbg !6834 {
entry:
  %iter = alloca %struct.call_expr_arg_iterator_d, align 8
  %id = alloca %struct.copy_body_data, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %exp, metadata !6836, metadata !DIExpression()), !dbg !6852
  %call = tail call %union.tree_node* @get_callee_fndecl(%union.tree_node* %exp) #6, !dbg !6853
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6837, metadata !DIExpression()), !dbg !6852
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !6854
  br i1 %tobool, label %if.end24, label %land.lhs.true, !dbg !6855

land.lhs.true:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6856
  %bf.load = load i64, i64* %0, align 8, !dbg !6856
  %bf.cast1 = and i64 %bf.load, 1048576, !dbg !6856
  %tobool1 = icmp eq i64 %bf.cast1, 0, !dbg !6856
  br i1 %tobool1, label %if.end24, label %land.lhs.true2, !dbg !6857

land.lhs.true2:                                   ; preds = %land.lhs.true
  %saved_tree = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 1, !dbg !6858
  %1 = load %union.tree_node*, %union.tree_node** %saved_tree, align 8, !dbg !6858
  %tobool3 = icmp eq %union.tree_node* %1, null, !dbg !6858
  br i1 %tobool3, label %if.end24, label %if.then, !dbg !6859

if.then:                                          ; preds = %land.lhs.true2
  %call4 = tail call %struct.pointer_map_t* @pointer_map_create() #6, !dbg !6860
  call void @llvm.dbg.value(metadata %struct.pointer_map_t* %call4, metadata !6838, metadata !DIExpression()), !dbg !6861
  %2 = bitcast %struct.call_expr_arg_iterator_d* %iter to i8*, !dbg !6862
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !6862
  %3 = bitcast %struct.copy_body_data* %id to i8*, !dbg !6863
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %3) #8, !dbg !6863
  %arguments = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 2, !dbg !6864
  %4 = load %union.tree_node*, %union.tree_node** %arguments, align 8, !dbg !6864
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !6849, metadata !DIExpression()), !dbg !6861
  call void @llvm.dbg.value(metadata %struct.call_expr_arg_iterator_d* %iter, metadata !6841, metadata !DIExpression(DW_OP_deref)), !dbg !6861
  %call6 = call fastcc %union.tree_node* @first_call_expr_arg(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* nonnull %iter) #7, !dbg !6866
  call void @llvm.dbg.value(metadata %union.tree_node* %call6, metadata !6850, metadata !DIExpression()), !dbg !6861
  br label %for.cond, !dbg !6867

for.cond:                                         ; preds = %for.body, %if.then
  %.in = phi %union.tree_node* [ %4, %if.then ], [ %7, %for.body ]
  %param.0 = phi %union.tree_node* [ %4, %if.then ], [ %7, %for.body ], !dbg !6868
  %arg.0 = phi %union.tree_node* [ %call6, %if.then ], [ %call9, %for.body ], !dbg !6868
  call void @llvm.dbg.value(metadata %union.tree_node* %arg.0, metadata !6850, metadata !DIExpression()), !dbg !6861
  call void @llvm.dbg.value(metadata %union.tree_node* %param.0, metadata !6849, metadata !DIExpression()), !dbg !6861
  %tobool7 = icmp eq %union.tree_node* %param.0, null, !dbg !6869
  br i1 %tobool7, label %for.end, label %for.body, !dbg !6869

for.body:                                         ; preds = %for.cond
  %5 = bitcast %union.tree_node* %.in to i8*, !dbg !6868
  %call8 = call i8** @pointer_map_insert(%struct.pointer_map_t* %call4, i8* %5) #6, !dbg !6870
  %6 = bitcast i8** %call8 to %union.tree_node**, !dbg !6872
  store %union.tree_node* %arg.0, %union.tree_node** %6, align 8, !dbg !6872
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %param.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6873
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !6873
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !6849, metadata !DIExpression()), !dbg !6861
  call void @llvm.dbg.value(metadata %struct.call_expr_arg_iterator_d* %iter, metadata !6841, metadata !DIExpression(DW_OP_deref)), !dbg !6861
  %call9 = call fastcc %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* nonnull %iter) #7, !dbg !6874
  call void @llvm.dbg.value(metadata %union.tree_node* %call9, metadata !6850, metadata !DIExpression()), !dbg !6861
  br label %for.cond, !dbg !6875, !llvm.loop !6876

for.end:                                          ; preds = %for.cond
  %call10 = call i8* @memset(i8* nonnull %3, i32 0, i64 152) #6, !dbg !6878
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 0, !dbg !6879
  store %union.tree_node* %call, %union.tree_node** %src_fn, align 8, !dbg !6880
  %8 = load i64, i64* bitcast (%union.tree_node** @current_function_decl to i64*), align 8, !dbg !6881
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !6882
  %9 = bitcast %union.tree_node** %dst_fn to i64*, !dbg !6883
  store i64 %8, i64* %9, align 8, !dbg !6883
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 1, !dbg !6884
  %10 = bitcast %struct.function** %f to i64*, !dbg !6884
  %11 = load i64, i64* %10, align 8, !dbg !6884
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !6885
  %12 = bitcast %struct.function** %src_cfun to i64*, !dbg !6886
  store i64 %11, i64* %12, align 8, !dbg !6886
  %decl_map11 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !6887
  store %struct.pointer_map_t* %call4, %struct.pointer_map_t** %decl_map11, align 8, !dbg !6888
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 7, !dbg !6889
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !6890
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 12, !dbg !6891
  store i32 0, i32* %transform_call_graph_edges, align 8, !dbg !6892
  %transform_new_cfg = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 13, !dbg !6893
  store i8 0, i8* %transform_new_cfg, align 4, !dbg !6894
  %transform_return_to_modify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 14, !dbg !6895
  store i8 1, i8* %transform_return_to_modify, align 1, !dbg !6896
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 18, !dbg !6897
  store void (%union.tree_node*)* null, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !6898
  %regimplify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 15, !dbg !6899
  store i8 0, i8* %regimplify, align 2, !dbg !6900
  %do_not_unshare = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 16, !dbg !6901
  store i8 1, i8* %do_not_unshare, align 1, !dbg !6902
  %eh_lp_nr = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 10, !dbg !6903
  store i32 0, i32* %eh_lp_nr, align 8, !dbg !6904
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6848, metadata !DIExpression(DW_OP_deref)), !dbg !6861
  %call12 = call fastcc %union.tree_node* @copy_tree_body(%struct.copy_body_data* nonnull %id) #7, !dbg !6905
  call void @llvm.dbg.value(metadata %union.tree_node* %call12, metadata !6851, metadata !DIExpression()), !dbg !6861
  call void @pointer_map_destroy(%struct.pointer_map_t* %call4) #6, !dbg !6906
  %13 = getelementptr inbounds %union.tree_node, %union.tree_node* %call12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6907
  %bf.load14 = load i64, i64* %13, align 8, !dbg !6907
  %bf.cast162 = and i64 %bf.load14, 65535, !dbg !6909
  %cmp = icmp eq i64 %bf.cast162, 53, !dbg !6909
  br i1 %cmp, label %if.then17, label %cleanup, !dbg !6910

if.then17:                                        ; preds = %for.end
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6911
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !6911
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6911
  br label %cleanup, !dbg !6912

cleanup:                                          ; preds = %for.end, %if.then17
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then17 ], [ true, %for.end ]
  %retval.0 = phi %union.tree_node* [ %14, %if.then17 ], [ undef, %for.end ]
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %3) #8, !dbg !6913
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !6913
  br i1 %cleanup.dest.slot.0, label %if.end24, label %cleanup25

if.end24:                                         ; preds = %land.lhs.true2, %land.lhs.true, %entry, %cleanup
  br label %cleanup25, !dbg !6914

cleanup25:                                        ; preds = %cleanup, %if.end24
  %retval.1 = phi %union.tree_node* [ %retval.0, %cleanup ], [ null, %if.end24 ], !dbg !6852
  ret %union.tree_node* %retval.1, !dbg !6915
}

declare dso_local %union.tree_node* @get_callee_fndecl(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @first_call_expr_arg(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* %iter) unnamed_addr #0 !dbg !6916 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %exp, metadata !6921, metadata !DIExpression()), !dbg !6923
  call void @llvm.dbg.value(metadata %struct.call_expr_arg_iterator_d* %iter, metadata !6922, metadata !DIExpression()), !dbg !6923
  tail call fastcc void @init_call_expr_arg_iterator(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* %iter) #7, !dbg !6924
  %call = tail call fastcc %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter) #7, !dbg !6925
  ret %union.tree_node* %call, !dbg !6926
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter) unnamed_addr #0 !dbg !6927 {
entry:
  call void @llvm.dbg.value(metadata %struct.call_expr_arg_iterator_d* %iter, metadata !6931, metadata !DIExpression()), !dbg !6933
  %i = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %iter, i64 0, i32 2, !dbg !6934
  %0 = load i32, i32* %i, align 4, !dbg !6934
  %n = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %iter, i64 0, i32 1, !dbg !6936
  %1 = load i32, i32* %n, align 8, !dbg !6936
  %cmp = icmp slt i32 %0, %1, !dbg !6937
  br i1 %cmp, label %if.end, label %cleanup, !dbg !6938

if.end:                                           ; preds = %entry
  %2 = bitcast %struct.call_expr_arg_iterator_d* %iter to %struct.tree_exp**, !dbg !6939
  %3 = load %struct.tree_exp*, %struct.tree_exp** %2, align 8, !dbg !6939
  %add = add nsw i32 %0, 3, !dbg !6939
  %idxprom = sext i32 %add to i64, !dbg !6939
  %arrayidx = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %3, i64 0, i32 3, i64 %idxprom, !dbg !6939
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6939
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !6932, metadata !DIExpression()), !dbg !6933
  %inc = add nsw i32 %0, 1, !dbg !6940
  store i32 %inc, i32* %i, align 4, !dbg !6940
  br label %cleanup, !dbg !6941

cleanup:                                          ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %4, %if.end ], [ null, %entry ], !dbg !6933
  ret %union.tree_node* %retval.0, !dbg !6942
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @copy_tree_body(%struct.copy_body_data* %id) unnamed_addr #5 !dbg !6943 {
entry:
  %body = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6947, metadata !DIExpression()), !dbg !6950
  %0 = bitcast %struct.copy_body_data* %id to %struct.tree_decl_non_common**, !dbg !6951
  %1 = load %struct.tree_decl_non_common*, %struct.tree_decl_non_common** %0, align 8, !dbg !6951
  %2 = bitcast %union.tree_node** %body to i8*, !dbg !6952
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #8, !dbg !6952
  %saved_tree = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %1, i64 0, i32 1, !dbg !6953
  %3 = bitcast %union.tree_node** %saved_tree to i64*, !dbg !6953
  %4 = load i64, i64* %3, align 8, !dbg !6953
  %5 = bitcast %union.tree_node** %body to i64*, !dbg !6954
  store i64 %4, i64* %5, align 8, !dbg !6954
  %6 = bitcast %struct.copy_body_data* %id to i8*, !dbg !6955
  call void @llvm.dbg.value(metadata %union.tree_node** %body, metadata !6949, metadata !DIExpression(DW_OP_deref)), !dbg !6950
  %call = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %body, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %6, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !6955
  %7 = load %union.tree_node*, %union.tree_node** %body, align 8, !dbg !6956
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !6949, metadata !DIExpression()), !dbg !6950
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #8, !dbg !6957
  ret %union.tree_node* %7, !dbg !6958
}

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @build_duplicate_type(%union.tree_node* %type) local_unnamed_addr #5 !dbg !6959 {
entry:
  %id = alloca %struct.copy_body_data, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !6961, metadata !DIExpression()), !dbg !6963
  %0 = bitcast %struct.copy_body_data* %id to i8*, !dbg !6964
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %0) #8, !dbg !6964
  %call = call i8* @memset(i8* nonnull %0, i32 0, i64 152) #6, !dbg !6965
  %1 = load i64, i64* bitcast (%union.tree_node** @current_function_decl to i64*), align 8, !dbg !6966
  %2 = bitcast %struct.copy_body_data* %id to i64*, !dbg !6967
  store i64 %1, i64* %2, align 8, !dbg !6967
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !6968
  %3 = bitcast %union.tree_node** %dst_fn to i64*, !dbg !6969
  store i64 %1, i64* %3, align 8, !dbg !6969
  %4 = load i64, i64* bitcast (%struct.function** @cfun to i64*), align 8, !dbg !6970
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !6971
  %5 = bitcast %struct.function** %src_cfun to i64*, !dbg !6972
  store i64 %4, i64* %5, align 8, !dbg !6972
  %call1 = call %struct.pointer_map_t* @pointer_map_create() #6, !dbg !6973
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !6974
  store %struct.pointer_map_t* %call1, %struct.pointer_map_t** %decl_map, align 8, !dbg !6975
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 22, !dbg !6976
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map, align 8, !dbg !6977
  %copy_decl = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 7, !dbg !6978
  store %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)* @copy_decl_no_change, %union.tree_node* (%union.tree_node*, %struct.copy_body_data*)** %copy_decl, align 8, !dbg !6979
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !6962, metadata !DIExpression(DW_OP_deref)), !dbg !6963
  %call2 = call fastcc %union.tree_node* @remap_type_1(%union.tree_node* %type, %struct.copy_body_data* nonnull %id) #7, !dbg !6980
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !6961, metadata !DIExpression()), !dbg !6963
  %6 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !6981
  call void @pointer_map_destroy(%struct.pointer_map_t* %6) #6, !dbg !6982
  %7 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !6983
  %tobool = icmp eq %struct.pointer_map_t* %7, null, !dbg !6985
  br i1 %tobool, label %if.end, label %if.then, !dbg !6986

if.then:                                          ; preds = %entry
  call void @pointer_map_destroy(%struct.pointer_map_t* nonnull %7) #6, !dbg !6987
  br label %if.end, !dbg !6987

if.end:                                           ; preds = %entry, %if.then
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 1, !dbg !6988
  store %union.tree_node* %call2, %union.tree_node** %8, align 8, !dbg !6989
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %0) #8, !dbg !6990
  ret %union.tree_node* %call2, !dbg !6991
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @tree_can_inline_p(%struct.cgraph_edge* %e) local_unnamed_addr #5 !dbg !6992 {
entry:
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %e, metadata !6996, metadata !DIExpression()), !dbg !6999
  %caller1 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 1, !dbg !7000
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %caller1, align 8, !dbg !7000
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i64 0, i32 0, !dbg !7001
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !7001
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !6997, metadata !DIExpression()), !dbg !6999
  %callee2 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 2, !dbg !7002
  %2 = load %struct.cgraph_node*, %struct.cgraph_node** %callee2, align 8, !dbg !7002
  %decl3 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %2, i64 0, i32 0, !dbg !7003
  %3 = load %union.tree_node*, %union.tree_node** %decl3, align 8, !dbg !7003
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !6998, metadata !DIExpression()), !dbg !6999
  %personality = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 2, !dbg !7004
  %4 = load %union.tree_node*, %union.tree_node** %personality, align 8, !dbg !7004
  %tobool = icmp eq %union.tree_node* %4, null, !dbg !7004
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !7006

land.lhs.true:                                    ; preds = %entry
  %personality5 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 2, !dbg !7007
  %5 = load %union.tree_node*, %union.tree_node** %personality5, align 8, !dbg !7007
  %tobool6 = icmp eq %union.tree_node* %5, null, !dbg !7007
  br i1 %tobool6, label %if.end, label %land.lhs.true7, !dbg !7008

land.lhs.true7:                                   ; preds = %land.lhs.true
  %cmp = icmp eq %union.tree_node* %4, %5, !dbg !7009
  br i1 %cmp, label %if.end, label %if.then, !dbg !7010

if.then:                                          ; preds = %land.lhs.true7
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 9, !dbg !7011
  store i32 1, i32* %inline_failed, align 8, !dbg !7013
  %call_stmt = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 7, !dbg !7014
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt, align 8, !dbg !7014
  tail call fastcc void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %6, i8 zeroext 1) #7, !dbg !7015
  br label %cleanup, !dbg !7016

if.end:                                           ; preds = %land.lhs.true7, %land.lhs.true, %entry
  %7 = load i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i64 0, i32 107, i32 5), align 8, !dbg !7017
  %call = tail call zeroext i8 %7(%union.tree_node* %1, %union.tree_node* %3) #6, !dbg !7019
  %tobool12 = icmp eq i8 %call, 0, !dbg !7019
  br i1 %tobool12, label %if.then13, label %if.end16, !dbg !7020

if.then13:                                        ; preds = %if.end
  %inline_failed14 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 9, !dbg !7021
  store i32 16, i32* %inline_failed14, align 8, !dbg !7023
  %call_stmt15 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 7, !dbg !7024
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt15, align 8, !dbg !7024
  tail call fastcc void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %8, i8 zeroext 1) #7, !dbg !7025
  %call_stmt_cannot_inline_p = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 14, !dbg !7026
  %bf.load = load i8, i8* %call_stmt_cannot_inline_p, align 2, !dbg !7027
  %bf.set = or i8 %bf.load, 2, !dbg !7027
  store i8 %bf.set, i8* %call_stmt_cannot_inline_p, align 2, !dbg !7027
  br label %cleanup, !dbg !7028

if.end16:                                         ; preds = %if.end
  %call_stmt17 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 7, !dbg !7029
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt17, align 8, !dbg !7029
  %tobool18 = icmp eq %union.gimple_statement_d* %9, null, !dbg !7031
  br i1 %tobool18, label %cleanup, label %land.lhs.true19, !dbg !7032

land.lhs.true19:                                  ; preds = %if.end16
  %call21 = tail call zeroext i8 @gimple_check_call_args(%union.gimple_statement_d* nonnull %9) #6, !dbg !7033
  %tobool22 = icmp eq i8 %call21, 0, !dbg !7033
  br i1 %tobool22, label %if.then23, label %cleanup, !dbg !7034

if.then23:                                        ; preds = %land.lhs.true19
  %inline_failed24 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 9, !dbg !7035
  store i32 17, i32* %inline_failed24, align 8, !dbg !7037
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %call_stmt17, align 8, !dbg !7038
  tail call fastcc void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %10, i8 zeroext 1) #7, !dbg !7039
  %call_stmt_cannot_inline_p26 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %e, i64 0, i32 14, !dbg !7040
  %bf.load27 = load i8, i8* %call_stmt_cannot_inline_p26, align 2, !dbg !7041
  %bf.set29 = or i8 %bf.load27, 2, !dbg !7041
  store i8 %bf.set29, i8* %call_stmt_cannot_inline_p26, align 2, !dbg !7041
  br label %cleanup, !dbg !7042

cleanup:                                          ; preds = %land.lhs.true19, %if.end16, %if.then23, %if.then13, %if.then
  %retval.0 = phi i8 [ 0, %if.then ], [ 0, %if.then23 ], [ 0, %if.then13 ], [ 1, %land.lhs.true19 ], [ 1, %if.end16 ], !dbg !6999
  ret i8 %retval.0, !dbg !7043
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %s, i8 zeroext %inlinable_p) unnamed_addr #0 !dbg !7044 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !7048, metadata !DIExpression()), !dbg !7050
  call void @llvm.dbg.value(metadata i8 1, metadata !7049, metadata !DIExpression()), !dbg !7050
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !7051
  %bf.load = load i32, i32* %0, align 8, !dbg !7051
  %bf.lshr = and i32 %bf.load, -131072, !dbg !7053
  %or = or i32 %bf.lshr, 65536, !dbg !7053
  %bf.clear = and i32 %bf.load, 65535, !dbg !7053
  %bf.set = or i32 %bf.clear, %or, !dbg !7053
  store i32 %bf.set, i32* %0, align 8, !dbg !7051
  ret void, !dbg !7054
}

declare dso_local zeroext i8 @gimple_check_call_args(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local %struct.var_ann_d* @create_var_ann(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_pointer_type_for_mode(%union.tree_node*, i32, i8 zeroext) local_unnamed_addr #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_type_attribute_qual_variant(%union.tree_node*, %union.tree_node*, i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_reference_type_for_mode(%union.tree_node*, i32, i8 zeroext) local_unnamed_addr #2

declare dso_local %union.tree_node* @nreverse(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !7055 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !7062, metadata !DIExpression()), !dbg !7063
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !7064
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7064

cond.true:                                        ; preds = %entry
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 0, !dbg !7065
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !7065
  br label %cond.end, !dbg !7064

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !7064
  ret %struct.gimple_seq_node_d* %cond, !dbg !7066
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7067 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7071, metadata !DIExpression()), !dbg !7072
  %bb = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 4, !dbg !7073
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7073
  ret %struct.basic_block_def* %0, !dbg !7074
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !7075 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !7079, metadata !DIExpression()), !dbg !7081
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !7080, metadata !DIExpression()), !dbg !7081
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7082
  %call = tail call %union.tree_node* @make_ssa_name_fn(%struct.function* %0, %union.tree_node* %var, %union.gimple_statement_d* null) #6, !dbg !7083
  ret %union.tree_node* %call, !dbg !7084
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7085 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7089, metadata !DIExpression()), !dbg !7090
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !7091
  %cmp = icmp eq i32 %call, 18, !dbg !7092
  %conv1 = zext i1 %cmp to i8, !dbg !7091
  ret i8 %conv1, !dbg !7093
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !7094 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !7100, metadata !DIExpression()), !dbg !7102
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !7101, metadata !DIExpression()), !dbg !7102
  br label %land.end, !dbg !7103

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !7103
  %arrayidx = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !7103
  %0 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7103
  ret %struct.edge_def* %0, !dbg !7103
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) unnamed_addr #0 !dbg !7104 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !7108, metadata !DIExpression()), !dbg !7109
  %tobool = icmp eq %struct.VEC_edge_base* %vec_, null, !dbg !7110
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7110

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 0, !dbg !7110
  %0 = load i32, i32* %num, align 8, !dbg !7110
  br label %cond.end, !dbg !7110

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !7110
  ret i32 %cond, !dbg !7110
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) unnamed_addr #0 !dbg !7111 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !7113, metadata !DIExpression()), !dbg !7116
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !7114, metadata !DIExpression()), !dbg !7117
  %call = tail call fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #7, !dbg !7118
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !7115, metadata !DIExpression()), !dbg !7116
  %call1 = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %call) #7, !dbg !7119
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !7120
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !7121
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !7122
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq2, align 8, !dbg !7123
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !7124
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb3, align 8, !dbg !7125
  ret void, !dbg !7126
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) local_unnamed_addr #2

declare dso_local %union.gimple_statement_d* @gimple_build_nop() local_unnamed_addr #2

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) local_unnamed_addr #2

declare dso_local void @set_default_def(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !7127 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !7131, metadata !DIExpression()), !dbg !7132
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 13, !dbg !7133
  %0 = load i32, i32* %flags, align 8, !dbg !7133
  %and = and i32 %0, 512, !dbg !7134
  %tobool = icmp eq i32 %and, 0, !dbg !7134
  br i1 %tobool, label %land.lhs.true, label %cond.end, !dbg !7135

land.lhs.true:                                    ; preds = %entry
  %gimple = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 7, i32 0, !dbg !7136
  %1 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !7136
  %tobool1 = icmp eq %struct.gimple_bb_info* %1, null, !dbg !7137
  br i1 %tobool1, label %cond.end, label %cond.true, !dbg !7138

cond.true:                                        ; preds = %land.lhs.true
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %1, i64 0, i32 0, !dbg !7139
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !7139
  br label %cond.end, !dbg !7138

cond.end:                                         ; preds = %land.lhs.true, %entry, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %2, %cond.true ], [ null, %land.lhs.true ], [ null, %entry ], !dbg !7138
  ret %struct.gimple_seq_d* %cond, !dbg !7140
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !7141 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !7143, metadata !DIExpression()), !dbg !7144
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !7145
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7145

cond.true:                                        ; preds = %entry
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 1, !dbg !7146
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !7146
  br label %cond.end, !dbg !7145

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !7145
  ret %struct.gimple_seq_node_d* %cond, !dbg !7147
}

declare dso_local %union.tree_node* @alloc_stmt_list() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc { %struct.tree_statement_list_node*, %union.tree_node* } @tsi_start(%union.tree_node* %t) unnamed_addr #0 !dbg !7148 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !7152, metadata !DIExpression()), !dbg !7154
  %head = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7155
  %0 = bitcast i32* %head to %struct.tree_statement_list_node**, !dbg !7155
  %1 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %0, align 8, !dbg !7155
  %2 = insertvalue { %struct.tree_statement_list_node*, %union.tree_node* } undef, %struct.tree_statement_list_node* %1, 0, !dbg !7156
  %3 = insertvalue { %struct.tree_statement_list_node*, %union.tree_node* } %2, %union.tree_node* %t, 1, !dbg !7156
  ret { %struct.tree_statement_list_node*, %union.tree_node* } %3, !dbg !7156
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @tsi_end_p(%struct.tree_statement_list_node* %i.coerce0, %union.tree_node* %i.coerce1) unnamed_addr #0 !dbg !7157 {
entry:
  %cmp = icmp eq %struct.tree_statement_list_node* %i.coerce0, null, !dbg !7162
  %conv1 = zext i1 %cmp to i8, !dbg !7163
  ret i8 %conv1, !dbg !7164
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @tsi_stmt(%struct.tree_statement_list_node* %i.coerce0, %union.tree_node* %i.coerce1) unnamed_addr #0 !dbg !7165 {
entry:
  %stmt = getelementptr inbounds %struct.tree_statement_list_node, %struct.tree_statement_list_node* %i.coerce0, i64 0, i32 2, !dbg !7170
  %0 = load %union.tree_node*, %union.tree_node** %stmt, align 8, !dbg !7170
  ret %union.tree_node* %0, !dbg !7171
}

declare dso_local void @tsi_link_after(%struct.tree_stmt_iterator*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @tsi_next(%struct.tree_stmt_iterator* %i) unnamed_addr #0 !dbg !7172 {
entry:
  call void @llvm.dbg.value(metadata %struct.tree_stmt_iterator* %i, metadata !7177, metadata !DIExpression()), !dbg !7178
  %ptr = getelementptr inbounds %struct.tree_stmt_iterator, %struct.tree_stmt_iterator* %i, i64 0, i32 0, !dbg !7179
  %0 = load %struct.tree_statement_list_node*, %struct.tree_statement_list_node** %ptr, align 8, !dbg !7179
  %next = getelementptr inbounds %struct.tree_statement_list_node, %struct.tree_statement_list_node* %0, i64 0, i32 1, !dbg !7180
  %1 = bitcast %struct.tree_statement_list_node** %next to i64*, !dbg !7180
  %2 = load i64, i64* %1, align 8, !dbg !7180
  %3 = bitcast %struct.tree_stmt_iterator* %i to i64*, !dbg !7181
  store i64 %2, i64* %3, align 8, !dbg !7181
  ret void, !dbg !7182
}

; Function Attrs: nounwind uwtable
define internal fastcc void @remap_block(%union.tree_node** %block, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !7183 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %block, metadata !7187, metadata !DIExpression()), !dbg !7191
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !7188, metadata !DIExpression()), !dbg !7191
  %0 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7192
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !7189, metadata !DIExpression()), !dbg !7191
  %call = tail call %union.tree_node* @make_node_stat(i32 4) #6, !dbg !7193
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !7190, metadata !DIExpression()), !dbg !7191
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7194
  %bf.load = load i64, i64* %1, align 8, !dbg !7194
  %bf.cast = and i64 %bf.load, 16777216, !dbg !7194
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7195
  %bf.load2 = load i64, i64* %2, align 8, !dbg !7196
  %bf.clear3 = and i64 %bf.load2, -16777217, !dbg !7196
  %bf.set = or i64 %bf.clear3, %bf.cast, !dbg !7196
  store i64 %bf.set, i64* %2, align 8, !dbg !7196
  %abstract_origin = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7197
  %3 = bitcast i32* %abstract_origin to %union.tree_node**, !dbg !7197
  store %union.tree_node* %0, %union.tree_node** %3, align 8, !dbg !7198
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7199
  %5 = load i32, i32* %4, align 4, !dbg !7199
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7200
  store i32 %5, i32* %6, align 4, !dbg !7201
  %nonlocalized_vars = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7202
  %7 = bitcast %union.tree_node** %nonlocalized_vars to %struct.VEC_tree_gc**, !dbg !7202
  %8 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %7, align 8, !dbg !7202
  %tobool = icmp eq %struct.VEC_tree_gc* %8, null, !dbg !7202
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7202

cond.true:                                        ; preds = %entry
  %base11 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %8, i64 0, i32 0, !dbg !7202
  br label %cond.end, !dbg !7202

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base11, %cond.true ], [ null, %entry ], !dbg !7202
  %call12 = tail call fastcc %struct.VEC_tree_gc* @VEC_tree_gc_copy(%struct.VEC_tree_base* %cond) #7, !dbg !7202
  %nonlocalized_vars14 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7203
  %9 = bitcast %union.tree_node** %nonlocalized_vars14 to %struct.VEC_tree_gc**, !dbg !7203
  store %struct.VEC_tree_gc* %call12, %struct.VEC_tree_gc** %9, align 8, !dbg !7204
  store %union.tree_node* %call, %union.tree_node** %block, align 8, !dbg !7205
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7206
  %11 = load %union.tree_node*, %union.tree_node** %10, align 8, !dbg !7206
  %call18 = tail call fastcc %union.tree_node* @remap_decls(%union.tree_node* %11, %struct.VEC_tree_gc** nonnull %9, %struct.copy_body_data* %id) #7, !dbg !7207
  %12 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7208
  store %union.tree_node* %call18, %union.tree_node** %12, align 8, !dbg !7209
  %transform_lang_insert_block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 18, !dbg !7210
  %13 = load void (%union.tree_node*)*, void (%union.tree_node*)** %transform_lang_insert_block, align 8, !dbg !7210
  %tobool21 = icmp eq void (%union.tree_node*)* %13, null, !dbg !7212
  br i1 %tobool21, label %if.end, label %if.then, !dbg !7213

if.then:                                          ; preds = %cond.end
  tail call void %13(%union.tree_node* %call) #6, !dbg !7214
  br label %if.end, !dbg !7214

if.end:                                           ; preds = %cond.end, %if.then
  tail call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* %0, %union.tree_node* %call) #7, !dbg !7215
  ret void, !dbg !7216
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @remap_decls(%union.tree_node* %decls, %struct.VEC_tree_gc** %nonlocalized_list, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !7217 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decls, metadata !7222, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc** %nonlocalized_list, metadata !7223, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !7224, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !7226, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.value(metadata %union.tree_node* %decls, metadata !7225, metadata !DIExpression()), !dbg !7231
  %tobool27 = icmp eq %struct.VEC_tree_gc** %nonlocalized_list, null, !dbg !7232
  %retvar = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 5, !dbg !7236
  br i1 %tobool27, label %entry.entry.split_crit_edge, label %entry.split.us, !dbg !7238

entry.entry.split_crit_edge:                      ; preds = %entry
  br label %for.cond, !dbg !7238

entry.split.us:                                   ; preds = %entry
  br label %for.cond.us, !dbg !7238

for.cond.us:                                      ; preds = %cleanup.us, %entry.split.us
  %old_var.0.us = phi %union.tree_node* [ %decls, %entry.split.us ], [ %15, %cleanup.us ], !dbg !7239
  %new_decls.0.us = phi %union.tree_node* [ null, %entry.split.us ], [ %new_decls.3.us, %cleanup.us ], !dbg !7240
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decls.0.us, metadata !7226, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.value(metadata %union.tree_node* %old_var.0.us, metadata !7225, metadata !DIExpression()), !dbg !7231
  %tobool.us = icmp eq %union.tree_node* %old_var.0.us, null, !dbg !7241
  br i1 %tobool.us, label %for.end.us-lcssa.us, label %for.body.us, !dbg !7241

for.body.us:                                      ; preds = %for.cond.us
  %call.us = tail call fastcc zeroext i8 @can_be_nonlocal(%union.tree_node* nonnull %old_var.0.us, %struct.copy_body_data* %id) #7, !dbg !7242
  %tobool1.us = icmp eq i8 %call.us, 0, !dbg !7242
  br i1 %tobool1.us, label %if.end31.us, label %if.then.us, !dbg !7243

if.then.us:                                       ; preds = %for.body.us
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %old_var.0.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7244
  %bf.load.us = load i64, i64* %0, align 8, !dbg !7244
  %bf.cast5.us = and i64 %bf.load.us, 65535, !dbg !7246
  %cmp.us = icmp eq i64 %bf.cast5.us, 32, !dbg !7246
  br i1 %cmp.us, label %land.lhs.true.us, label %if.end.us, !dbg !7247

land.lhs.true.us:                                 ; preds = %if.then.us
  %decl_flag_1.us = getelementptr inbounds %union.tree_node, %union.tree_node* %old_var.0.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7248
  %1 = bitcast i40* %decl_flag_1.us to i64*, !dbg !7248
  %bf.load2.us = load i64, i64* %1, align 8, !dbg !7248
  %bf.cast47.us = and i64 %bf.load2.us, 33554432, !dbg !7248
  %tobool5.us = icmp eq i64 %bf.cast47.us, 0, !dbg !7248
  br i1 %tobool5.us, label %land.lhs.true6.us, label %if.end.us, !dbg !7249

land.lhs.true6.us:                                ; preds = %land.lhs.true.us
  %call7.us = tail call fastcc %struct.var_ann_d* @var_ann(%union.tree_node* nonnull %old_var.0.us) #7, !dbg !7250
  %tobool8.us = icmp eq %struct.var_ann_d* %call7.us, null, !dbg !7250
  br i1 %tobool8.us, label %lor.lhs.false.us, label %if.then11.us, !dbg !7251

lor.lhs.false.us:                                 ; preds = %land.lhs.true6.us
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7252
  %call9.us = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %2) #7, !dbg !7253
  %tobool10.us = icmp eq i8 %call9.us, 0, !dbg !7253
  br i1 %tobool10.us, label %if.then11.us, label %if.end.us, !dbg !7254

if.then11.us:                                     ; preds = %lor.lhs.false.us, %land.lhs.true6.us
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7255
  %local_decls.us = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, i32 9, !dbg !7255
  %4 = load %union.tree_node*, %union.tree_node** %local_decls.us, align 8, !dbg !7255
  %call13.us = tail call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* nonnull %old_var.0.us, %union.tree_node* %4) #6, !dbg !7255
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7256
  %local_decls15.us = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, i32 9, !dbg !7257
  store %union.tree_node* %call13.us, %union.tree_node** %local_decls15.us, align 8, !dbg !7258
  br label %if.end.us, !dbg !7256

if.end.us:                                        ; preds = %if.then11.us, %lor.lhs.false.us, %land.lhs.true.us, %if.then.us
  %6 = load i32, i32* @optimize, align 4, !dbg !7259
  %tobool16.us = icmp eq i32 %6, 0, !dbg !7259
  %7 = load i32, i32* @debug_info_level, align 4, !dbg !7260
  %cmp18.us = icmp ugt i32 %7, 1, !dbg !7261
  %or.cond.us = or i1 %tobool16.us, %cmp18.us, !dbg !7262
  br i1 %or.cond.us, label %land.lhs.true19.us, label %cleanup.us, !dbg !7262

land.lhs.true19.us:                               ; preds = %if.end.us
  %ignored_flag.us = getelementptr inbounds %union.tree_node, %union.tree_node* %old_var.0.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7263
  %8 = bitcast i40* %ignored_flag.us to i64*, !dbg !7263
  %bf.load21.us = load i64, i64* %8, align 8, !dbg !7263
  %bf.cast246.us = and i64 %bf.load21.us, 1024, !dbg !7263
  %tobool25.us = icmp eq i64 %bf.cast246.us, 0, !dbg !7263
  br i1 %tobool25.us, label %if.then28.us, label %cleanup.us, !dbg !7264

if.then28.us:                                     ; preds = %land.lhs.true19.us
  %call29.us = tail call fastcc %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** nonnull %nonlocalized_list, %union.tree_node* nonnull %old_var.0.us) #7, !dbg !7265
  br label %cleanup.us, !dbg !7265

if.end31.us:                                      ; preds = %for.body.us
  %call32.us = tail call %union.tree_node* @remap_decl(%union.tree_node* nonnull %old_var.0.us, %struct.copy_body_data* %id) #7, !dbg !7266
  call void @llvm.dbg.value(metadata %union.tree_node* %call32.us, metadata !7227, metadata !DIExpression()), !dbg !7267
  %9 = load %union.tree_node*, %union.tree_node** %retvar, align 8, !dbg !7268
  %cmp33.us = icmp eq %union.tree_node* %call32.us, %9, !dbg !7269
  br i1 %cmp33.us, label %cleanup.us, label %if.else.us, !dbg !7270

if.else.us:                                       ; preds = %if.end31.us
  %tobool35.us = icmp eq %union.tree_node* %call32.us, null, !dbg !7271
  br i1 %tobool35.us, label %if.then36.us, label %if.else53.us, !dbg !7273

if.else53.us:                                     ; preds = %if.else.us
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call32.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7274
  %bf.load55.us = load i64, i64* %10, align 8, !dbg !7274
  %bf.cast57.us = and i64 %bf.load55.us, 65535, !dbg !7274
  %arrayidx.us = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast57.us, !dbg !7274
  %11 = load i32, i32* %arrayidx.us, align 4, !dbg !7274
  %cmp58.us = icmp eq i32 %11, 3, !dbg !7274
  br i1 %cmp58.us, label %cond.end.us, label %cond.true.us, !dbg !7274

cond.true.us:                                     ; preds = %if.else53.us
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 569, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7274
  br label %cond.end.us, !dbg !7274

cond.end.us:                                      ; preds = %cond.true.us, %if.else53.us
  %chain.us = getelementptr inbounds %union.tree_node, %union.tree_node* %call32.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7276
  store %union.tree_node* %new_decls.0.us, %union.tree_node** %chain.us, align 8, !dbg !7277
  call void @llvm.dbg.value(metadata %union.tree_node* %call32.us, metadata !7226, metadata !DIExpression()), !dbg !7231
  br label %cleanup.us

if.then36.us:                                     ; preds = %if.else.us
  %12 = load i32, i32* @optimize, align 4, !dbg !7278
  %tobool37.us = icmp eq i32 %12, 0, !dbg !7278
  %13 = load i32, i32* @debug_info_level, align 4, !dbg !7281
  %cmp39.us = icmp ugt i32 %13, 1, !dbg !7282
  %or.cond2.us = or i1 %tobool37.us, %cmp39.us, !dbg !7283
  br i1 %or.cond2.us, label %land.lhs.true40.us, label %cleanup.us, !dbg !7283

land.lhs.true40.us:                               ; preds = %if.then36.us
  %ignored_flag42.us = getelementptr inbounds %union.tree_node, %union.tree_node* %old_var.0.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7284
  %14 = bitcast i40* %ignored_flag42.us to i64*, !dbg !7284
  %bf.load43.us = load i64, i64* %14, align 8, !dbg !7284
  %bf.cast464.us = and i64 %bf.load43.us, 1024, !dbg !7284
  %tobool47.us = icmp eq i64 %bf.cast464.us, 0, !dbg !7284
  br i1 %tobool47.us, label %if.then50.us, label %cleanup.us, !dbg !7285

if.then50.us:                                     ; preds = %land.lhs.true40.us
  %call51.us = tail call fastcc %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** nonnull %nonlocalized_list, %union.tree_node* nonnull %old_var.0.us) #7, !dbg !7286
  br label %cleanup.us, !dbg !7286

cleanup.us:                                       ; preds = %if.then50.us, %land.lhs.true40.us, %if.then36.us, %cond.end.us, %if.end31.us, %if.then28.us, %land.lhs.true19.us, %if.end.us
  %new_decls.3.us = phi %union.tree_node* [ %new_decls.0.us, %land.lhs.true19.us ], [ %new_decls.0.us, %if.end.us ], [ %new_decls.0.us, %if.then28.us ], [ %new_decls.0.us, %if.end31.us ], [ %call32.us, %cond.end.us ], [ %new_decls.0.us, %land.lhs.true40.us ], [ %new_decls.0.us, %if.then36.us ], [ %new_decls.0.us, %if.then50.us ], !dbg !7240
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decls.3.us, metadata !7226, metadata !DIExpression()), !dbg !7231
  %chain62.us = getelementptr inbounds %union.tree_node, %union.tree_node* %old_var.0.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7287
  %15 = load %union.tree_node*, %union.tree_node** %chain62.us, align 8, !dbg !7287
  call void @llvm.dbg.value(metadata %union.tree_node* %15, metadata !7225, metadata !DIExpression()), !dbg !7231
  br label %for.cond.us, !dbg !7288, !llvm.loop !7289

for.end.us-lcssa.us:                              ; preds = %for.cond.us
  %new_decls.0.us.lcssa = phi %union.tree_node* [ %new_decls.0.us, %for.cond.us ], !dbg !7240
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decls.0.us.lcssa, metadata !7226, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decls.0.us.lcssa, metadata !7226, metadata !DIExpression()), !dbg !7231
  br label %for.end, !dbg !7291

for.cond:                                         ; preds = %cleanup, %entry.entry.split_crit_edge
  %old_var.0 = phi %union.tree_node* [ %decls, %entry.entry.split_crit_edge ], [ %29, %cleanup ], !dbg !7239
  %new_decls.0 = phi %union.tree_node* [ null, %entry.entry.split_crit_edge ], [ %new_decls.3, %cleanup ], !dbg !7240
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decls.0, metadata !7226, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.value(metadata %union.tree_node* %old_var.0, metadata !7225, metadata !DIExpression()), !dbg !7231
  %tobool = icmp eq %union.tree_node* %old_var.0, null, !dbg !7241
  br i1 %tobool, label %for.end.us-lcssa, label %for.body, !dbg !7241

for.body:                                         ; preds = %for.cond
  %call = tail call fastcc zeroext i8 @can_be_nonlocal(%union.tree_node* nonnull %old_var.0, %struct.copy_body_data* %id) #7, !dbg !7242
  %tobool1 = icmp eq i8 %call, 0, !dbg !7242
  br i1 %tobool1, label %if.end31, label %if.then, !dbg !7243

if.then:                                          ; preds = %for.body
  %16 = getelementptr inbounds %union.tree_node, %union.tree_node* %old_var.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7244
  %bf.load = load i64, i64* %16, align 8, !dbg !7244
  %bf.cast5 = and i64 %bf.load, 65535, !dbg !7246
  %cmp = icmp eq i64 %bf.cast5, 32, !dbg !7246
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !7247

land.lhs.true:                                    ; preds = %if.then
  %decl_flag_1 = getelementptr inbounds %union.tree_node, %union.tree_node* %old_var.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7248
  %17 = bitcast i40* %decl_flag_1 to i64*, !dbg !7248
  %bf.load2 = load i64, i64* %17, align 8, !dbg !7248
  %bf.cast47 = and i64 %bf.load2, 33554432, !dbg !7248
  %tobool5 = icmp eq i64 %bf.cast47, 0, !dbg !7248
  br i1 %tobool5, label %land.lhs.true6, label %if.end, !dbg !7249

land.lhs.true6:                                   ; preds = %land.lhs.true
  %call7 = tail call fastcc %struct.var_ann_d* @var_ann(%union.tree_node* nonnull %old_var.0) #7, !dbg !7250
  %tobool8 = icmp eq %struct.var_ann_d* %call7, null, !dbg !7250
  br i1 %tobool8, label %lor.lhs.false, label %if.then11, !dbg !7251

lor.lhs.false:                                    ; preds = %land.lhs.true6
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7252
  %call9 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %18) #7, !dbg !7253
  %tobool10 = icmp eq i8 %call9, 0, !dbg !7253
  br i1 %tobool10, label %if.then11, label %if.end, !dbg !7254

if.then11:                                        ; preds = %lor.lhs.false, %land.lhs.true6
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7255
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, i32 9, !dbg !7255
  %20 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !7255
  %call13 = tail call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* nonnull %old_var.0, %union.tree_node* %20) #6, !dbg !7255
  %21 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7256
  %local_decls15 = getelementptr inbounds %struct.function, %struct.function* %21, i64 0, i32 9, !dbg !7257
  store %union.tree_node* %call13, %union.tree_node** %local_decls15, align 8, !dbg !7258
  br label %if.end, !dbg !7256

if.end:                                           ; preds = %lor.lhs.false, %land.lhs.true, %if.then11, %if.then
  %22 = load i32, i32* @optimize, align 4, !dbg !7259
  %tobool16 = icmp eq i32 %22, 0, !dbg !7259
  %23 = load i32, i32* @debug_info_level, align 4, !dbg !7260
  %cmp18 = icmp ugt i32 %23, 1, !dbg !7261
  %or.cond = or i1 %tobool16, %cmp18, !dbg !7262
  br i1 %or.cond, label %land.lhs.true19, label %cleanup, !dbg !7262

land.lhs.true19:                                  ; preds = %if.end
  br label %cleanup, !dbg !7264

if.end31:                                         ; preds = %for.body
  %call32 = tail call %union.tree_node* @remap_decl(%union.tree_node* nonnull %old_var.0, %struct.copy_body_data* %id) #7, !dbg !7266
  call void @llvm.dbg.value(metadata %union.tree_node* %call32, metadata !7227, metadata !DIExpression()), !dbg !7267
  %24 = load %union.tree_node*, %union.tree_node** %retvar, align 8, !dbg !7268
  %cmp33 = icmp eq %union.tree_node* %call32, %24, !dbg !7269
  br i1 %cmp33, label %cleanup, label %if.else, !dbg !7270

if.else:                                          ; preds = %if.end31
  %tobool35 = icmp eq %union.tree_node* %call32, null, !dbg !7271
  br i1 %tobool35, label %if.then36, label %if.else53, !dbg !7273

if.then36:                                        ; preds = %if.else
  %25 = load i32, i32* @optimize, align 4, !dbg !7278
  %tobool37 = icmp eq i32 %25, 0, !dbg !7278
  %26 = load i32, i32* @debug_info_level, align 4, !dbg !7281
  %cmp39 = icmp ugt i32 %26, 1, !dbg !7282
  %or.cond2 = or i1 %tobool37, %cmp39, !dbg !7283
  br i1 %or.cond2, label %land.lhs.true40, label %cleanup, !dbg !7283

land.lhs.true40:                                  ; preds = %if.then36
  br i1 false, label %if.then50, label %cleanup, !dbg !7285

if.then50:                                        ; preds = %land.lhs.true40
  br label %cleanup, !dbg !7286

if.else53:                                        ; preds = %if.else
  %27 = getelementptr inbounds %union.tree_node, %union.tree_node* %call32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7274
  %bf.load55 = load i64, i64* %27, align 8, !dbg !7274
  %bf.cast57 = and i64 %bf.load55, 65535, !dbg !7274
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast57, !dbg !7274
  %28 = load i32, i32* %arrayidx, align 4, !dbg !7274
  %cmp58 = icmp eq i32 %28, 3, !dbg !7274
  br i1 %cmp58, label %cond.end, label %cond.true, !dbg !7274

cond.true:                                        ; preds = %if.else53
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 569, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7274
  br label %cond.end, !dbg !7274

cond.end:                                         ; preds = %if.else53, %cond.true
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %call32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7276
  store %union.tree_node* %new_decls.0, %union.tree_node** %chain, align 8, !dbg !7277
  call void @llvm.dbg.value(metadata %union.tree_node* %call32, metadata !7226, metadata !DIExpression()), !dbg !7231
  br label %cleanup

cleanup:                                          ; preds = %land.lhs.true19, %if.end31, %if.then50, %if.then36, %land.lhs.true40, %cond.end, %if.end
  %new_decls.3 = phi %union.tree_node* [ %new_decls.0, %land.lhs.true19 ], [ %new_decls.0, %if.end ], [ %new_decls.0, %if.end31 ], [ %call32, %cond.end ], [ %new_decls.0, %land.lhs.true40 ], [ %new_decls.0, %if.then36 ], [ undef, %if.then50 ], !dbg !7240
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decls.3, metadata !7226, metadata !DIExpression()), !dbg !7231
  %chain62 = getelementptr inbounds %union.tree_node, %union.tree_node* %old_var.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7287
  %29 = load %union.tree_node*, %union.tree_node** %chain62, align 8, !dbg !7287
  call void @llvm.dbg.value(metadata %union.tree_node* %29, metadata !7225, metadata !DIExpression()), !dbg !7231
  br label %for.cond, !dbg !7288, !llvm.loop !7289

for.end.us-lcssa:                                 ; preds = %for.cond
  %new_decls.0.lcssa9 = phi %union.tree_node* [ %new_decls.0, %for.cond ], !dbg !7240
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decls.0.lcssa9, metadata !7226, metadata !DIExpression()), !dbg !7231
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decls.0.lcssa9, metadata !7226, metadata !DIExpression()), !dbg !7231
  br label %for.end, !dbg !7291

for.end:                                          ; preds = %for.end.us-lcssa.us, %for.end.us-lcssa
  %new_decls.0.lcssa = phi %union.tree_node* [ %new_decls.0.lcssa9, %for.end.us-lcssa ], [ %new_decls.0.us.lcssa, %for.end.us-lcssa.us ], !dbg !7240
  call void @llvm.dbg.value(metadata %union.tree_node* %new_decls.0.lcssa, metadata !7226, metadata !DIExpression()), !dbg !7231
  %call63 = tail call %union.tree_node* @nreverse(%union.tree_node* %new_decls.0.lcssa) #6, !dbg !7291
  ret %union.tree_node* %call63, !dbg !7292
}

declare dso_local %union.tree_node* @make_node_stat(i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_tree_gc* @VEC_tree_gc_copy(%struct.VEC_tree_base* %vec_) unnamed_addr #0 !dbg !7293 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !7298, metadata !DIExpression()), !dbg !7301
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !7302
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7302

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !7302
  %0 = load i32, i32* %num, align 8, !dbg !7302
  %phitmp = zext i32 %0 to i64, !dbg !7302
  br label %cond.end, !dbg !7302

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i64 [ %phitmp, %cond.true ], [ 0, %entry ]
  call void @llvm.dbg.value(metadata i64 %cond, metadata !7299, metadata !DIExpression()), !dbg !7301
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc* null, metadata !7300, metadata !DIExpression()), !dbg !7301
  %tobool1 = icmp eq i64 %cond, 0, !dbg !7303
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7302

if.then:                                          ; preds = %cond.end
  %conv2 = trunc i64 %cond to i32, !dbg !7305
  %call = tail call i8* @vec_gc_p_reserve_exact(i8* null, i32 %conv2) #6, !dbg !7305
  %1 = bitcast i8* %call to %struct.VEC_tree_gc*, !dbg !7305
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc* %1, metadata !7300, metadata !DIExpression()), !dbg !7301
  %num4 = bitcast i8* %call to i32*, !dbg !7305
  store i32 %conv2, i32* %num4, align 8, !dbg !7305
  %vec = getelementptr inbounds i8, i8* %call, i64 8, !dbg !7305
  %arraydecay7 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 0, !dbg !7305
  %2 = bitcast %union.tree_node** %arraydecay7 to i8*, !dbg !7305
  %mul = shl nuw nsw i64 %cond, 3, !dbg !7305
  %call8 = tail call i8* @memcpy(i8* nonnull %vec, i8* nonnull %2, i64 %mul) #6, !dbg !7305
  br label %if.end, !dbg !7305

if.end:                                           ; preds = %cond.end, %if.then
  %new_vec_.0 = phi %struct.VEC_tree_gc* [ %1, %if.then ], [ null, %cond.end ], !dbg !7301
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc* %new_vec_.0, metadata !7300, metadata !DIExpression()), !dbg !7301
  ret %struct.VEC_tree_gc* %new_vec_.0, !dbg !7302
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) local_unnamed_addr #2

declare dso_local i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.var_ann_d* @var_ann(%union.tree_node* %t) unnamed_addr #0 !dbg !7307 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !7311, metadata !DIExpression()), !dbg !7315
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7316
  %bf.load = load i64, i64* %0, align 8, !dbg !7316
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !7316
  %cmp = icmp eq i64 %bf.cast1, 32, !dbg !7316
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7316

cond.true:                                        ; preds = %entry
  %ann = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 1, !dbg !7316
  %1 = bitcast %union.tree_node** %ann to %struct.var_ann_d**, !dbg !7316
  br label %cond.end19, !dbg !7316

cond.false:                                       ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 34, !dbg !7316
  br i1 %cmp5, label %cond.true6, label %cond.false8, !dbg !7316

cond.true6:                                       ; preds = %cond.false
  %ann7 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !7316
  %2 = bitcast %union.tree_node** %ann7 to %struct.var_ann_d**, !dbg !7316
  br label %cond.end19, !dbg !7316

cond.false8:                                      ; preds = %cond.false
  %cmp13 = icmp eq i64 %bf.cast1, 36, !dbg !7316
  %ann15 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !7316
  %3 = bitcast %union.tree_node** %ann15 to %struct.var_ann_d**, !dbg !7316
  %cond = select i1 %cmp13, %struct.var_ann_d** %3, %struct.var_ann_d** null, !dbg !7316
  br label %cond.end19, !dbg !7316

cond.end19:                                       ; preds = %cond.true6, %cond.false8, %cond.true
  %cond20 = phi %struct.var_ann_d** [ %1, %cond.true ], [ %2, %cond.true6 ], [ %cond, %cond.false8 ], !dbg !7316
  call void @llvm.dbg.value(metadata %struct.var_ann_d** %cond20, metadata !7312, metadata !DIExpression()), !dbg !7315
  %tobool = icmp eq %struct.var_ann_d** %cond20, null, !dbg !7317
  br i1 %tobool, label %cond.end23, label %cond.true21, !dbg !7317

cond.true21:                                      ; preds = %cond.end19
  %4 = load %struct.var_ann_d*, %struct.var_ann_d** %cond20, align 8, !dbg !7318
  br label %cond.end23, !dbg !7317

cond.end23:                                       ; preds = %cond.end19, %cond.true21
  %cond24 = phi %struct.var_ann_d* [ %4, %cond.true21 ], [ null, %cond.end19 ], !dbg !7317
  ret %struct.var_ann_d* %cond24, !dbg !7319
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @VEC_tree_gc_safe_push(%struct.VEC_tree_gc** %vec_, %union.tree_node* %obj_) unnamed_addr #0 !dbg !7320 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc** %vec_, metadata !7324, metadata !DIExpression()), !dbg !7326
  call void @llvm.dbg.value(metadata %union.tree_node* %obj_, metadata !7325, metadata !DIExpression()), !dbg !7326
  %call = tail call fastcc i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %vec_, i32 1) #7, !dbg !7327
  %0 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %vec_, align 8, !dbg !7327
  %tobool = icmp eq %struct.VEC_tree_gc* %0, null, !dbg !7327
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7327

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %0, i64 0, i32 0, !dbg !7327
  br label %cond.end, !dbg !7327

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !7327
  %call1 = tail call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %obj_) #7, !dbg !7327
  ret %union.tree_node** %call1, !dbg !7327
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_gc_reserve(%struct.VEC_tree_gc** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !7328 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc** %vec_, metadata !7332, metadata !DIExpression()), !dbg !7335
  call void @llvm.dbg.value(metadata i32 1, metadata !7333, metadata !DIExpression()), !dbg !7335
  %0 = load %struct.VEC_tree_gc*, %struct.VEC_tree_gc** %vec_, align 8, !dbg !7336
  %tobool = icmp eq %struct.VEC_tree_gc* %0, null, !dbg !7336
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7336

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %0, i64 0, i32 0, !dbg !7336
  br label %cond.end, !dbg !7336

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !7336
  %call = tail call fastcc i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 1) #7, !dbg !7336
  %tobool1 = icmp eq i32 %call, 0, !dbg !7336
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !7336
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !7334, metadata !DIExpression()), !dbg !7335
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7336

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_tree_gc** %vec_ to i8**, !dbg !7337
  %2 = load i8*, i8** %1, align 8, !dbg !7337
  %call3 = tail call i8* @vec_gc_p_reserve(i8* %2, i32 1) #6, !dbg !7337
  store i8* %call3, i8** %1, align 8, !dbg !7337
  br label %if.end, !dbg !7337

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !7336
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) unnamed_addr #0 !dbg !7339 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !7343, metadata !DIExpression()), !dbg !7346
  call void @llvm.dbg.value(metadata %union.tree_node* %obj_, metadata !7344, metadata !DIExpression()), !dbg !7346
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !7347
  %0 = load i32, i32* %num1, align 8, !dbg !7347
  %inc = add i32 %0, 1, !dbg !7347
  store i32 %inc, i32* %num1, align 8, !dbg !7347
  %idxprom = zext i32 %0 to i64, !dbg !7347
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !7347
  call void @llvm.dbg.value(metadata %union.tree_node** %arrayidx, metadata !7345, metadata !DIExpression()), !dbg !7346
  store %union.tree_node* %obj_, %union.tree_node** %arrayidx, align 8, !dbg !7347
  ret %union.tree_node** %arrayidx, !dbg !7347
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !7348 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !7352, metadata !DIExpression()), !dbg !7354
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !7353, metadata !DIExpression()), !dbg !7354
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !7355
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7355

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 1, !dbg !7355
  %0 = load i32, i32* %alloc, align 4, !dbg !7355
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !7355
  %1 = load i32, i32* %num, align 8, !dbg !7355
  %sub = sub i32 %0, %1, !dbg !7355
  %cmp1 = icmp uge i32 %sub, %alloc_, !dbg !7355
  br label %cond.end, !dbg !7355

cond.false:                                       ; preds = %entry
  %tobool3 = icmp eq i32 %alloc_, 0, !dbg !7355
  br label %cond.end, !dbg !7355

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i1 [ %cmp1, %cond.true ], [ %tobool3, %cond.false ]
  %cond = zext i1 %cond.in to i32, !dbg !7355
  ret i32 %cond, !dbg !7355
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7356 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7358, metadata !DIExpression()), !dbg !7359
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !7360
  ret %union.tree_node* %call, !dbg !7361
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7362 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7366, metadata !DIExpression()), !dbg !7367
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !7368
  switch i32 %call, label %sw.default [
    i32 10, label %return
    i32 11, label %return
    i32 12, label %return
    i32 17, label %return
    i32 23, label %return
    i32 24, label %return
    i32 25, label %return
    i32 29, label %return
    i32 26, label %return
    i32 27, label %return
    i32 30, label %return
    i32 32, label %return
    i32 22, label %return
    i32 34, label %return
  ], !dbg !7369

sw.default:                                       ; preds = %entry
  br label %return, !dbg !7370

return:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.default
  %retval.0 = phi i8 [ 0, %sw.default ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], !dbg !7372
  ret i8 %retval.0, !dbg !7373
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @copy_gimple_bind(%union.gimple_statement_d* %stmt, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !7374 {
entry:
  %new_block = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7376, metadata !DIExpression()), !dbg !7383
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !7377, metadata !DIExpression()), !dbg !7383
  %0 = bitcast %union.tree_node** %new_block to i8*, !dbg !7384
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !7384
  %call = tail call fastcc %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %stmt) #7, !dbg !7385
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !7381, metadata !DIExpression()), !dbg !7383
  %call1 = tail call %struct.gimple_seq_d* @remap_gimple_seq(%struct.gimple_seq_d* %call, %struct.copy_body_data* %id) #7, !dbg !7386
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call1, metadata !7382, metadata !DIExpression()), !dbg !7383
  %call2 = tail call fastcc %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %stmt) #7, !dbg !7387
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !7379, metadata !DIExpression()), !dbg !7383
  store %union.tree_node* %call2, %union.tree_node** %new_block, align 8, !dbg !7388
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !7379, metadata !DIExpression()), !dbg !7383
  %tobool = icmp eq %union.tree_node* %call2, null, !dbg !7389
  br i1 %tobool, label %if.end, label %if.then, !dbg !7391

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata %union.tree_node** %new_block, metadata !7379, metadata !DIExpression(DW_OP_deref)), !dbg !7383
  call fastcc void @remap_block(%union.tree_node** nonnull %new_block, %struct.copy_body_data* %id) #7, !dbg !7392
  br label %if.end, !dbg !7392

if.end:                                           ; preds = %entry, %if.then
  %call3 = call fastcc %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %stmt) #7, !dbg !7393
  call void @llvm.dbg.value(metadata %union.tree_node* %call3, metadata !7380, metadata !DIExpression()), !dbg !7383
  %tobool4 = icmp eq %union.tree_node* %call3, null, !dbg !7394
  br i1 %tobool4, label %if.end7, label %if.then5, !dbg !7396

if.then5:                                         ; preds = %if.end
  %call6 = call fastcc %union.tree_node* @remap_decls(%union.tree_node* nonnull %call3, %struct.VEC_tree_gc** null, %struct.copy_body_data* %id) #7, !dbg !7397
  call void @llvm.dbg.value(metadata %union.tree_node* %call6, metadata !7380, metadata !DIExpression()), !dbg !7383
  br label %if.end7, !dbg !7398

if.end7:                                          ; preds = %if.end, %if.then5
  %new_vars.0 = phi %union.tree_node* [ %call6, %if.then5 ], [ null, %if.end ], !dbg !7383
  call void @llvm.dbg.value(metadata %union.tree_node* %new_vars.0, metadata !7380, metadata !DIExpression()), !dbg !7383
  %1 = load %union.tree_node*, %union.tree_node** %new_block, align 8, !dbg !7399
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !7379, metadata !DIExpression()), !dbg !7383
  %call8 = call %union.gimple_statement_d* @gimple_build_bind(%union.tree_node* %new_vars.0, %struct.gimple_seq_d* %call1, %union.tree_node* %1) #6, !dbg !7400
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call8, metadata !7378, metadata !DIExpression()), !dbg !7383
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !7401
  ret %union.gimple_statement_d* %call8, !dbg !7402
}

declare dso_local %union.gimple_statement_d* @gimple_build_catch(%union.tree_node*, %struct.gimple_seq_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7403 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7405, metadata !DIExpression()), !dbg !7406
  %types = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !7407
  %0 = bitcast i32* %types to %union.tree_node**, !dbg !7407
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7407
  ret %union.tree_node* %1, !dbg !7408
}

declare dso_local %union.gimple_statement_d* @gimple_build_eh_filter(%union.tree_node*, %struct.gimple_seq_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7409 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7411, metadata !DIExpression()), !dbg !7412
  %types = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !7413
  %0 = bitcast i32* %types to %union.tree_node**, !dbg !7413
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7413
  ret %union.tree_node* %1, !dbg !7414
}

declare dso_local %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d*, %struct.gimple_seq_d*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_try_kind(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7415 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7419, metadata !DIExpression()), !dbg !7420
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !7421
  %bf.load = load i32, i32* %0, align 8, !dbg !7421
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7421
  %and = and i32 %bf.lshr, 3, !dbg !7422
  ret i32 %and, !dbg !7423
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7424 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7426, metadata !DIExpression()), !dbg !7427
  %cleanup = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !7428
  %0 = bitcast i32* %cleanup to %struct.gimple_seq_d**, !dbg !7428
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !7428
  ret %struct.gimple_seq_d* %1, !dbg !7429
}

declare dso_local %union.gimple_statement_d* @gimple_build_wce(%struct.gimple_seq_d*) local_unnamed_addr #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_parallel_clauses(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7430 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7432, metadata !DIExpression()), !dbg !7433
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !7434
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7434
  ret %union.tree_node* %1, !dbg !7435
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_parallel_child_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7436 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7438, metadata !DIExpression()), !dbg !7439
  %child_fn = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7440
  %0 = bitcast [1 x %struct.phi_arg_d]* %child_fn to %union.tree_node**, !dbg !7440
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7440
  ret %union.tree_node* %1, !dbg !7441
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_parallel_data_arg(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7442 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7444, metadata !DIExpression()), !dbg !7445
  %data_arg = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7446
  %0 = bitcast %struct.ssa_use_operand_d** %data_arg to %union.tree_node**, !dbg !7446
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7446
  ret %union.tree_node* %1, !dbg !7447
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_task(%struct.gimple_seq_d*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_clauses(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7448 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7450, metadata !DIExpression()), !dbg !7451
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !7452
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7452
  ret %union.tree_node* %1, !dbg !7453
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_child_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7454 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7456, metadata !DIExpression()), !dbg !7457
  %child_fn = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7458
  %0 = bitcast [1 x %struct.phi_arg_d]* %child_fn to %union.tree_node**, !dbg !7458
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7458
  ret %union.tree_node* %1, !dbg !7459
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_data_arg(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7460 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7462, metadata !DIExpression()), !dbg !7463
  %data_arg = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7464
  %0 = bitcast %struct.ssa_use_operand_d** %data_arg to %union.tree_node**, !dbg !7464
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7464
  ret %union.tree_node* %1, !dbg !7465
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_copy_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7466 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7468, metadata !DIExpression()), !dbg !7469
  %copy_fn = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 2, !dbg !7470
  %0 = bitcast %union.anon* %copy_fn to %union.tree_node**, !dbg !7470
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7470
  ret %union.tree_node* %1, !dbg !7471
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_arg_size(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7472 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7474, metadata !DIExpression()), !dbg !7475
  %arg_size = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !7476
  %0 = bitcast %union.tree_node*** %arg_size to %union.tree_node**, !dbg !7476
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7476
  ret %union.tree_node* %1, !dbg !7477
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_arg_align(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7478 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7480, metadata !DIExpression()), !dbg !7481
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 1, !dbg !7482
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7482
  ret %union.tree_node* %1, !dbg !7483
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d*, %union.tree_node*, i64, %struct.gimple_seq_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_clauses(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7484 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7486, metadata !DIExpression()), !dbg !7487
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !7488
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7488
  ret %union.tree_node* %1, !dbg !7489
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7490 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7494, metadata !DIExpression()), !dbg !7495
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7496
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7496
  %1 = load i64, i64* %0, align 8, !dbg !7496
  ret i64 %1, !dbg !7497
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_index(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %index) unnamed_addr #0 !dbg !7498 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7502, metadata !DIExpression()), !dbg !7505
  call void @llvm.dbg.value(metadata i64 %i, metadata !7503, metadata !DIExpression()), !dbg !7505
  call void @llvm.dbg.value(metadata %union.tree_node* %index, metadata !7504, metadata !DIExpression()), !dbg !7505
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7506
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7506
  %1 = load i64, i64* %0, align 8, !dbg !7506
  %cmp = icmp ugt i64 %1, %i, !dbg !7506
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7506

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3475, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7506
  br label %cond.end, !dbg !7506

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7507
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7507
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !7507
  %index2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 1, !dbg !7508
  store %union.tree_node* %index, %union.tree_node** %index2, align 8, !dbg !7509
  ret void, !dbg !7510
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_index(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !7511 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7515, metadata !DIExpression()), !dbg !7517
  call void @llvm.dbg.value(metadata i64 %i, metadata !7516, metadata !DIExpression()), !dbg !7517
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7518
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7518
  %1 = load i64, i64* %0, align 8, !dbg !7518
  %cmp = icmp ugt i64 %1, %i, !dbg !7518
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7518

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3453, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7518
  br label %cond.end, !dbg !7518

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7519
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7519
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !7519
  %index = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 1, !dbg !7520
  %4 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !7520
  ret %union.tree_node* %4, !dbg !7521
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_initial(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %initial) unnamed_addr #0 !dbg !7522 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7524, metadata !DIExpression()), !dbg !7527
  call void @llvm.dbg.value(metadata i64 %i, metadata !7525, metadata !DIExpression()), !dbg !7527
  call void @llvm.dbg.value(metadata %union.tree_node* %initial, metadata !7526, metadata !DIExpression()), !dbg !7527
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7528
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7528
  %1 = load i64, i64* %0, align 8, !dbg !7528
  %cmp = icmp ugt i64 %1, %i, !dbg !7528
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7528

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3508, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7528
  br label %cond.end, !dbg !7528

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7529
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7529
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !7529
  %initial2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 2, !dbg !7530
  store %union.tree_node* %initial, %union.tree_node** %initial2, align 8, !dbg !7531
  ret void, !dbg !7532
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_initial(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !7533 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7535, metadata !DIExpression()), !dbg !7537
  call void @llvm.dbg.value(metadata i64 %i, metadata !7536, metadata !DIExpression()), !dbg !7537
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7538
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7538
  %1 = load i64, i64* %0, align 8, !dbg !7538
  %cmp = icmp ugt i64 %1, %i, !dbg !7538
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7538

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3486, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7538
  br label %cond.end, !dbg !7538

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7539
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7539
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !7539
  %initial = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 2, !dbg !7540
  %4 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !7540
  ret %union.tree_node* %4, !dbg !7541
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_final(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %final) unnamed_addr #0 !dbg !7542 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7544, metadata !DIExpression()), !dbg !7547
  call void @llvm.dbg.value(metadata i64 %i, metadata !7545, metadata !DIExpression()), !dbg !7547
  call void @llvm.dbg.value(metadata %union.tree_node* %final, metadata !7546, metadata !DIExpression()), !dbg !7547
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7548
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7548
  %1 = load i64, i64* %0, align 8, !dbg !7548
  %cmp = icmp ugt i64 %1, %i, !dbg !7548
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7548

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3541, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7548
  br label %cond.end, !dbg !7548

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7549
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7549
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !7549
  %final2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 3, !dbg !7550
  store %union.tree_node* %final, %union.tree_node** %final2, align 8, !dbg !7551
  ret void, !dbg !7552
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_final(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !7553 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7555, metadata !DIExpression()), !dbg !7557
  call void @llvm.dbg.value(metadata i64 %i, metadata !7556, metadata !DIExpression()), !dbg !7557
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7558
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7558
  %1 = load i64, i64* %0, align 8, !dbg !7558
  %cmp = icmp ugt i64 %1, %i, !dbg !7558
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7558

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3519, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7558
  br label %cond.end, !dbg !7558

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7559
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7559
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !7559
  %final = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 3, !dbg !7560
  %4 = load %union.tree_node*, %union.tree_node** %final, align 8, !dbg !7560
  ret %union.tree_node* %4, !dbg !7561
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_incr(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %incr) unnamed_addr #0 !dbg !7562 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7564, metadata !DIExpression()), !dbg !7567
  call void @llvm.dbg.value(metadata i64 %i, metadata !7565, metadata !DIExpression()), !dbg !7567
  call void @llvm.dbg.value(metadata %union.tree_node* %incr, metadata !7566, metadata !DIExpression()), !dbg !7567
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7568
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7568
  %1 = load i64, i64* %0, align 8, !dbg !7568
  %cmp = icmp ugt i64 %1, %i, !dbg !7568
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7568

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7568
  br label %cond.end, !dbg !7568

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7569
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7569
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !7569
  %incr2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 4, !dbg !7570
  store %union.tree_node* %incr, %union.tree_node** %incr2, align 8, !dbg !7571
  ret void, !dbg !7572
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !7573 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7575, metadata !DIExpression()), !dbg !7577
  call void @llvm.dbg.value(metadata i64 %i, metadata !7576, metadata !DIExpression()), !dbg !7577
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7578
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7578
  %1 = load i64, i64* %0, align 8, !dbg !7578
  %cmp = icmp ugt i64 %1, %i, !dbg !7578
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7578

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3552, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7578
  br label %cond.end, !dbg !7578

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7579
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7579
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !7579
  %incr = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 4, !dbg !7580
  %4 = load %union.tree_node*, %union.tree_node** %incr, align 8, !dbg !7580
  ret %union.tree_node* %4, !dbg !7581
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_cond(%union.gimple_statement_d* %gs, i64 %i, i32 %cond) unnamed_addr #0 !dbg !7582 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7586, metadata !DIExpression()), !dbg !7589
  call void @llvm.dbg.value(metadata i64 %i, metadata !7587, metadata !DIExpression()), !dbg !7589
  call void @llvm.dbg.value(metadata i32 %cond, metadata !7588, metadata !DIExpression()), !dbg !7589
  %idxprom = sext i32 %cond to i64, !dbg !7590
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !7590
  %0 = load i32, i32* %arrayidx, align 4, !dbg !7590
  %cmp = icmp eq i32 %0, 5, !dbg !7590
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7590

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 4076, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7590
  br label %cond.end, !dbg !7590

cond.end:                                         ; preds = %entry, %cond.true
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7591
  %1 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7591
  %2 = load i64, i64* %1, align 8, !dbg !7591
  %cmp2 = icmp ugt i64 %2, %i, !dbg !7591
  br i1 %cmp2, label %cond.end5, label %cond.true3, !dbg !7591

cond.true3:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 4077, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7591
  br label %cond.end5, !dbg !7591

cond.end5:                                        ; preds = %cond.end, %cond.true3
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7592
  %3 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7592
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %3, align 8, !dbg !7592
  %cond9 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %i, i32 0, !dbg !7593
  store i32 %cond, i32* %cond9, align 8, !dbg !7594
  ret void, !dbg !7595
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_omp_for_cond(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !7596 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7600, metadata !DIExpression()), !dbg !7602
  call void @llvm.dbg.value(metadata i64 %i, metadata !7601, metadata !DIExpression()), !dbg !7602
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !7603
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !7603
  %1 = load i64, i64* %0, align 8, !dbg !7603
  %cmp = icmp ugt i64 %1, %i, !dbg !7603
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7603

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 4088, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7603
  br label %cond.end, !dbg !7603

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7604
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !7604
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !7604
  %cond2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 0, !dbg !7605
  %4 = load i32, i32* %cond2, align 8, !dbg !7605
  ret i32 %4, !dbg !7606
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_master(%struct.gimple_seq_d*) local_unnamed_addr #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_ordered(%struct.gimple_seq_d*) local_unnamed_addr #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_section(%struct.gimple_seq_d*) local_unnamed_addr #2

declare dso_local %union.gimple_statement_d* @gimple_build_omp_sections(%struct.gimple_seq_d*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_sections_clauses(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7607 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7609, metadata !DIExpression()), !dbg !7610
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !7611
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7611
  ret %union.tree_node* %1, !dbg !7612
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_single(%struct.gimple_seq_d*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_single_clauses(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7613 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7615, metadata !DIExpression()), !dbg !7616
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !7617
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7617
  ret %union.tree_node* %1, !dbg !7618
}

declare dso_local %union.gimple_statement_d* @gimple_build_omp_critical(%struct.gimple_seq_d*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_critical_name(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7619 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7621, metadata !DIExpression()), !dbg !7622
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !7623
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7623
  ret %union.tree_node* %1, !dbg !7624
}

declare dso_local zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_debug_bind_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !7625 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !7627, metadata !DIExpression()), !dbg !7628
  %call = tail call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %s) #7, !dbg !7629
  %tobool = icmp eq i8 %call, 0, !dbg !7629
  br i1 %tobool, label %return, label %if.then, !dbg !7631

if.then:                                          ; preds = %entry
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !7632
  %bf.load = load i32, i32* %0, align 8, !dbg !7632
  %cmp = icmp ult i32 %bf.load, 65536, !dbg !7633
  %conv1 = zext i1 %cmp to i8, !dbg !7634
  br label %return, !dbg !7635

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi i8 [ %conv1, %if.then ], [ 0, %entry ], !dbg !7628
  ret i8 %retval.0, !dbg !7636
}

declare dso_local %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node*, %union.tree_node*, %union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %dbg) unnamed_addr #0 !dbg !7637 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %dbg, metadata !7641, metadata !DIExpression()), !dbg !7642
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %dbg, i32 0) #7, !dbg !7643
  ret %union.tree_node* %call, !dbg !7644
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_debug_bind_get_value(%union.gimple_statement_d* %dbg) unnamed_addr #0 !dbg !7645 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %dbg, metadata !7647, metadata !DIExpression()), !dbg !7648
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %dbg, i32 1) #7, !dbg !7649
  ret %union.tree_node* %call, !dbg !7650
}

declare dso_local %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @remap_eh_region_tree_nr(%union.tree_node* %old_t_nr, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !7651 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %old_t_nr, metadata !7653, metadata !DIExpression()), !dbg !7657
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !7654, metadata !DIExpression()), !dbg !7657
  %call = tail call i64 @tree_low_cst(%union.tree_node* %old_t_nr, i32 0) #6, !dbg !7658
  %conv = trunc i64 %call to i32, !dbg !7658
  call void @llvm.dbg.value(metadata i32 %conv, metadata !7655, metadata !DIExpression()), !dbg !7657
  %call1 = tail call fastcc i32 @remap_eh_region_nr(i32 %conv, %struct.copy_body_data* %id) #7, !dbg !7659
  call void @llvm.dbg.value(metadata i32 %call1, metadata !7656, metadata !DIExpression()), !dbg !7657
  %conv2 = sext i32 %call1 to i64, !dbg !7660
  %call3 = tail call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv2) #6, !dbg !7661
  ret %union.tree_node* %call3, !dbg !7662
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_arg(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %arg) unnamed_addr #0 !dbg !7663 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7667, metadata !DIExpression()), !dbg !7670
  call void @llvm.dbg.value(metadata i32 %index, metadata !7668, metadata !DIExpression()), !dbg !7670
  call void @llvm.dbg.value(metadata %union.tree_node* %arg, metadata !7669, metadata !DIExpression()), !dbg !7670
  %add = add i32 %index, 3, !dbg !7671
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %add, %union.tree_node* %arg) #7, !dbg !7672
  ret void, !dbg !7673
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_resx_region(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7674 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7678, metadata !DIExpression()), !dbg !7679
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !7680
  %1 = load i32, i32* %0, align 8, !dbg !7680
  ret i32 %1, !dbg !7681
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @remap_eh_region_nr(i32 %old_nr, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !7682 {
entry:
  call void @llvm.dbg.value(metadata i32 %old_nr, metadata !7686, metadata !DIExpression()), !dbg !7691
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !7687, metadata !DIExpression()), !dbg !7691
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !7692
  %0 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !7692
  %call = tail call %struct.eh_region_d* @get_eh_region_from_number_fn(%struct.function* %0, i32 %old_nr) #6, !dbg !7693
  call void @llvm.dbg.value(metadata %struct.eh_region_d* %call, metadata !7688, metadata !DIExpression()), !dbg !7691
  %eh_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 11, !dbg !7694
  %1 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !7694
  %2 = bitcast %struct.eh_region_d* %call to i8*, !dbg !7695
  %call1 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %1, i8* %2) #6, !dbg !7696
  call void @llvm.dbg.value(metadata i8** %call1, metadata !7690, metadata !DIExpression()), !dbg !7691
  %3 = bitcast i8** %call1 to %struct.eh_region_d**, !dbg !7697
  %4 = load %struct.eh_region_d*, %struct.eh_region_d** %3, align 8, !dbg !7697
  call void @llvm.dbg.value(metadata %struct.eh_region_d* %4, metadata !7689, metadata !DIExpression()), !dbg !7691
  %index = getelementptr inbounds %struct.eh_region_d, %struct.eh_region_d* %4, i64 0, i32 3, !dbg !7698
  %5 = load i32, i32* %index, align 8, !dbg !7698
  ret i32 %5, !dbg !7699
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_resx_set_region(%union.gimple_statement_d* %gs, i32 %region) unnamed_addr #0 !dbg !7700 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7704, metadata !DIExpression()), !dbg !7706
  call void @llvm.dbg.value(metadata i32 %region, metadata !7705, metadata !DIExpression()), !dbg !7706
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !7707
  store i32 %region, i32* %0, align 8, !dbg !7708
  ret void, !dbg !7709
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_eh_dispatch_region(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7710 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7712, metadata !DIExpression()), !dbg !7713
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !7714
  %1 = load i32, i32* %0, align 8, !dbg !7714
  ret i32 %1, !dbg !7715
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_eh_dispatch_set_region(%union.gimple_statement_d* %gs, i32 %region) unnamed_addr #0 !dbg !7716 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7718, metadata !DIExpression()), !dbg !7720
  call void @llvm.dbg.value(metadata i32 %region, metadata !7719, metadata !DIExpression()), !dbg !7720
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !7721
  store i32 %region, i32* %0, align 8, !dbg !7722
  ret void, !dbg !7723
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7724 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7726, metadata !DIExpression()), !dbg !7727
  %block = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 5, !dbg !7728
  %0 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !7728
  ret %union.tree_node* %0, !dbg !7729
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_block(%union.gimple_statement_d* %g, %union.tree_node* %block) unnamed_addr #0 !dbg !7730 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7734, metadata !DIExpression()), !dbg !7736
  call void @llvm.dbg.value(metadata %union.tree_node* %block, metadata !7735, metadata !DIExpression()), !dbg !7736
  %block1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 5, !dbg !7737
  store %union.tree_node* %block, %union.tree_node** %block1, align 8, !dbg !7738
  ret void, !dbg !7739
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !7740 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7744, metadata !DIExpression()), !dbg !7746
  call void @llvm.dbg.value(metadata i32 %i, metadata !7745, metadata !DIExpression()), !dbg !7746
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #7, !dbg !7747
  %tobool = icmp eq i8 %call, 0, !dbg !7747
  br i1 %tobool, label %return, label %if.then, !dbg !7749

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #7, !dbg !7750
  %idx.ext = zext i32 %i to i64, !dbg !7752
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !7752
  br label %return, !dbg !7753

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node** [ %add.ptr, %if.then ], [ null, %entry ], !dbg !7754
  ret %union.tree_node** %retval.0, !dbg !7755
}

declare dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, %struct.walk_stmt_info*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7756 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7758, metadata !DIExpression()), !dbg !7759
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !7760
  %cmp = icmp ugt i32 %call, 5, !dbg !7761
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7762

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !7763
  %cmp2 = icmp ult i32 %call1, 10, !dbg !7764
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !7765
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_vdef(%union.gimple_statement_d* %g, %union.tree_node* %vdef) unnamed_addr #0 !dbg !7766 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7768, metadata !DIExpression()), !dbg !7770
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !7769, metadata !DIExpression()), !dbg !7770
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #7, !dbg !7771
  %tobool = icmp eq i8 %call, 0, !dbg !7771
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !7771

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1416, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7771
  br label %cond.end, !dbg !7771

cond.end:                                         ; preds = %entry, %cond.true
  %vdef1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, !dbg !7772
  %0 = bitcast [1 x %struct.phi_arg_d]* %vdef1 to %union.tree_node**, !dbg !7772
  store %union.tree_node* null, %union.tree_node** %0, align 8, !dbg !7773
  ret void, !dbg !7774
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_vuse(%union.gimple_statement_d* %g, %union.tree_node* %vuse) unnamed_addr #0 !dbg !7775 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7777, metadata !DIExpression()), !dbg !7779
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !7778, metadata !DIExpression()), !dbg !7779
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #7, !dbg !7780
  %tobool = icmp eq i8 %call, 0, !dbg !7780
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !7780

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1407, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7780
  br label %cond.end, !dbg !7780

cond.end:                                         ; preds = %entry, %cond.true
  %vuse1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7781
  %0 = bitcast %struct.ssa_use_operand_d** %vuse1 to %union.tree_node**, !dbg !7781
  store %union.tree_node* null, %union.tree_node** %0, align 8, !dbg !7782
  ret void, !dbg !7783
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7784 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7786, metadata !DIExpression()), !dbg !7787
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !7788
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7788
  ret %union.tree_node* %1, !dbg !7789
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7790 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7792, metadata !DIExpression()), !dbg !7793
  %vars = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !7794
  %0 = bitcast i32* %vars to %union.tree_node**, !dbg !7794
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7794
  ret %union.tree_node* %1, !dbg !7795
}

declare dso_local %union.gimple_statement_d* @gimple_build_bind(%union.tree_node*, %struct.gimple_seq_d*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7796 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7798, metadata !DIExpression()), !dbg !7799
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !7800
  %cmp = icmp eq i32 %call, 2, !dbg !7801
  %conv1 = zext i1 %cmp to i8, !dbg !7800
  ret i8 %conv1, !dbg !7802
}

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) unnamed_addr #0 !dbg !7803 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7805, metadata !DIExpression()), !dbg !7808
  call void @llvm.dbg.value(metadata i32 %i, metadata !7806, metadata !DIExpression()), !dbg !7808
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !7807, metadata !DIExpression()), !dbg !7808
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #7, !dbg !7809
  %tobool = icmp eq i8 %call, 0, !dbg !7809
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !7809

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !7809
  %cmp = icmp ugt i32 %call1, %i, !dbg !7809
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !7809

cond.true:                                        ; preds = %entry, %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7809
  br label %cond.end, !dbg !7809

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %call3 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #7, !dbg !7810
  %idxprom = zext i32 %i to i64, !dbg !7810
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !7810
  store %union.tree_node* %op, %union.tree_node** %arrayidx, align 8, !dbg !7811
  ret void, !dbg !7812
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7813 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7815, metadata !DIExpression()), !dbg !7816
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !7817
  %cmp = icmp eq i32 %call, 0, !dbg !7818
  br i1 %cmp, label %land.end, label %land.rhs, !dbg !7819

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !7820
  %cmp2 = icmp ult i32 %call1, 10, !dbg !7821
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !7822
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7823 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7825, metadata !DIExpression()), !dbg !7826
  %num_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 3, !dbg !7827
  %0 = load i32, i32* %num_ops, align 4, !dbg !7827
  ret i32 %0, !dbg !7828
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7829 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7833, metadata !DIExpression()), !dbg !7835
  %call = tail call fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #7, !dbg !7836
  %idxprom = zext i32 %call to i64, !dbg !7837
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !7837
  %0 = load i64, i64* %arrayidx, align 8, !dbg !7837
  call void @llvm.dbg.value(metadata i64 %0, metadata !7834, metadata !DIExpression()), !dbg !7835
  %cmp = icmp eq i64 %0, 0, !dbg !7838
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !7838

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7838
  br label %cond.end, !dbg !7838

cond.end:                                         ; preds = %entry, %cond.true
  %1 = bitcast %union.gimple_statement_d* %gs to i8*, !dbg !7839
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !7840
  %2 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !7841
  ret %union.tree_node** %2, !dbg !7842
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7843 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7847, metadata !DIExpression()), !dbg !7848
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !7849
  %call1 = tail call fastcc i32 @gss_for_code(i32 %call) #7, !dbg !7850
  ret i32 %call1, !dbg !7851
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gss_for_code(i32 %code) unnamed_addr #0 !dbg !7852 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !7856, metadata !DIExpression()), !dbg !7857
  %idxprom = zext i32 %code to i64, !dbg !7858
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7858
  %0 = load i32, i32* %arrayidx, align 4, !dbg !7858
  ret i32 %0, !dbg !7859
}

declare dso_local %struct.eh_region_d* @get_eh_region_from_number_fn(%struct.function*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @inline_forbidden_p_stmt(%struct.gimple_stmt_iterator* %gsi, i8* %handled_ops_p, %struct.walk_stmt_info* %wip) #5 !dbg !7860 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7862, metadata !DIExpression()), !dbg !7868
  call void @llvm.dbg.value(metadata i8* %handled_ops_p, metadata !7863, metadata !DIExpression()), !dbg !7868
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wip, metadata !7864, metadata !DIExpression()), !dbg !7868
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wip, i64 0, i32 1, !dbg !7869
  %0 = bitcast i8** %info to %union.tree_node**, !dbg !7869
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7869
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !7865, metadata !DIExpression()), !dbg !7868
  %call = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !7870
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !7867, metadata !DIExpression()), !dbg !7868
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call) #7, !dbg !7871
  switch i32 %call1, label %sw.epilog33 [
    i32 8, label %sw.bb
    i32 3, label %sw.bb24
  ], !dbg !7872

sw.bb:                                            ; preds = %entry
  %call2 = tail call zeroext i8 @gimple_alloca_call_p(%union.gimple_statement_d* %call) #6, !dbg !7873
  %tobool = icmp eq i8 %call2, 0, !dbg !7873
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !7876

land.lhs.true:                                    ; preds = %sw.bb
  %attributes = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, !dbg !7877
  %2 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !7877
  %call3 = tail call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), %union.tree_node* %2) #6, !dbg !7878
  %tobool4 = icmp eq %union.tree_node* %call3, null, !dbg !7878
  br i1 %tobool4, label %if.then, label %if.end, !dbg !7879

if.then:                                          ; preds = %land.lhs.true
  store i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.8, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !7880
  store i8 1, i8* %handled_ops_p, align 1, !dbg !7882
  br label %cleanup, !dbg !7883

if.end:                                           ; preds = %land.lhs.true, %sw.bb
  %call5 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %call) #7, !dbg !7884
  call void @llvm.dbg.value(metadata %union.tree_node* %call5, metadata !7866, metadata !DIExpression()), !dbg !7868
  %cmp = icmp eq %union.tree_node* %call5, null, !dbg !7885
  br i1 %cmp, label %sw.epilog33, label %if.end8, !dbg !7887

if.end8:                                          ; preds = %if.end
  %call9 = tail call i32 @setjmp_call_p(%union.tree_node* nonnull %call5) #6, !dbg !7888
  %tobool10 = icmp eq i32 %call9, 0, !dbg !7888
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !7890

if.then11:                                        ; preds = %if.end8
  store i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.9, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !7891
  store i8 1, i8* %handled_ops_p, align 1, !dbg !7893
  br label %cleanup, !dbg !7894

if.end12:                                         ; preds = %if.end8
  %built_in_class = getelementptr inbounds %union.tree_node, %union.tree_node* %call5, i64 0, i32 0, i32 5, !dbg !7895
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !7895
  %bf.clear = and i32 %bf.load, 6144, !dbg !7895
  %cmp13 = icmp eq i32 %bf.clear, 6144, !dbg !7897
  br i1 %cmp13, label %if.then15, label %sw.epilog33, !dbg !7898

if.then15:                                        ; preds = %if.end12
  %bf.clear18 = and i32 %bf.load, 2047, !dbg !7899
  switch i32 %bf.clear18, label %sw.epilog33 [
    i32 515, label %sw.bb19
    i32 492, label %sw.bb19
    i32 514, label %sw.bb19
    i32 490, label %sw.bb20
    i32 522, label %sw.bb21
    i32 503, label %sw.bb22
    i32 417, label %sw.bb22
  ], !dbg !7900

sw.bb19:                                          ; preds = %if.then15, %if.then15, %if.then15
  store i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.10, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !7901
  store i8 1, i8* %handled_ops_p, align 1, !dbg !7903
  br label %cleanup, !dbg !7904

sw.bb20:                                          ; preds = %if.then15
  store i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.11, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !7905
  store i8 1, i8* %handled_ops_p, align 1, !dbg !7906
  br label %cleanup, !dbg !7907

sw.bb21:                                          ; preds = %if.then15
  store i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.12, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !7908
  store i8 1, i8* %handled_ops_p, align 1, !dbg !7909
  br label %cleanup, !dbg !7910

sw.bb22:                                          ; preds = %if.then15, %if.then15
  store i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.13, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !7911
  store i8 1, i8* %handled_ops_p, align 1, !dbg !7912
  br label %cleanup, !dbg !7913

sw.bb24:                                          ; preds = %entry
  %call25 = tail call fastcc %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %call) #7, !dbg !7914
  call void @llvm.dbg.value(metadata %union.tree_node* %call25, metadata !7866, metadata !DIExpression()), !dbg !7868
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7915
  %bf.load26 = load i64, i64* %3, align 8, !dbg !7915
  %bf.cast1 = and i64 %bf.load26, 65535, !dbg !7917
  %cmp28 = icmp eq i64 %bf.cast1, 30, !dbg !7917
  br i1 %cmp28, label %sw.epilog33, label %if.then30, !dbg !7918

if.then30:                                        ; preds = %sw.bb24
  store i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.14, i64 0, i64 0), i8** @inline_forbidden_reason, align 8, !dbg !7919
  store i8 1, i8* %handled_ops_p, align 1, !dbg !7921
  br label %cleanup, !dbg !7922

sw.epilog33:                                      ; preds = %sw.bb24, %entry, %if.end12, %if.then15, %if.end
  store i8 0, i8* %handled_ops_p, align 1, !dbg !7923
  br label %cleanup, !dbg !7924

cleanup:                                          ; preds = %sw.epilog33, %if.then30, %sw.bb22, %sw.bb21, %sw.bb20, %sw.bb19, %if.then11, %if.then
  %retval.0 = phi %union.tree_node* [ null, %sw.epilog33 ], [ %call25, %if.then30 ], [ %call5, %if.then11 ], [ %call5, %sw.bb22 ], [ %call5, %sw.bb21 ], [ %call5, %sw.bb20 ], [ %call5, %sw.bb19 ], [ %1, %if.then ], !dbg !7868
  ret %union.tree_node* %retval.0, !dbg !7925
}

declare dso_local zeroext i8 @gimple_alloca_call_p(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local i32 @setjmp_call_p(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_goto_dest(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7926 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7928, metadata !DIExpression()), !dbg !7929
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !7930
  ret %union.tree_node* %call, !dbg !7931
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !7932 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7934, metadata !DIExpression()), !dbg !7936
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !7937
  call void @llvm.dbg.value(metadata i32 %call, metadata !7935, metadata !DIExpression()), !dbg !7936
  switch i32 %call, label %if.else4 [
    i32 6, label %if.then
    i32 1, label %if.then
    i32 8, label %cleanup
  ], !dbg !7938

if.then:                                          ; preds = %entry, %entry
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !7940
  %bf.load = load i32, i32* %0, align 8, !dbg !7940
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7940
  br label %cleanup, !dbg !7941

if.else4:                                         ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !7942
  br label %cleanup, !dbg !7944

cleanup:                                          ; preds = %entry, %if.else4, %if.then
  %retval.0 = phi i32 [ %bf.lshr, %if.then ], [ 0, %if.else4 ], [ 59, %entry ], !dbg !7936
  ret i32 %retval.0, !dbg !7945
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7946 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7948, metadata !DIExpression()), !dbg !7949
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !7950
  %cmp = icmp eq i32 %call, 8, !dbg !7951
  %conv1 = zext i1 %cmp to i8, !dbg !7950
  ret i8 %conv1, !dbg !7952
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @expand_call_inline(%struct.basic_block_def* %bb, %union.gimple_statement_d* %stmt, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !7953 {
entry:
  %reason = alloca i32, align 4
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmt_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.expanded_location, align 8
  %tmp117 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp118 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp124 = alloca %struct.gimple_stmt_iterator, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !7957, metadata !DIExpression()), !dbg !7990
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7958, metadata !DIExpression()), !dbg !7990
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !7959, metadata !DIExpression()), !dbg !7990
  %0 = bitcast i32* %reason to i8*, !dbg !7991
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #8, !dbg !7991
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !7992
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !7992
  %2 = bitcast %struct.gimple_stmt_iterator* %stmt_gsi to i8*, !dbg !7992
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #8, !dbg !7992
  call void @llvm.dbg.value(metadata i8 0, metadata !7973, metadata !DIExpression()), !dbg !7990
  %3 = load i32, i32* @input_location, align 4, !dbg !7993
  call void @llvm.dbg.value(metadata i32 %3, metadata !7966, metadata !DIExpression()), !dbg !7990
  %call = tail call fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %stmt) #7, !dbg !7994
  %tobool = icmp eq i8 %call, 0, !dbg !7994
  br i1 %tobool, label %if.end, label %if.then, !dbg !7996

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_location(%union.gimple_statement_d* %stmt) #7, !dbg !7997
  store i32 %call1, i32* @input_location, align 4, !dbg !7998
  br label %if.end, !dbg !7999

if.end:                                           ; preds = %entry, %if.then
  %call2 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !8000
  %cmp = icmp eq i32 %call2, 8, !dbg !8002
  br i1 %cmp, label %if.end4, label %egress, !dbg !8003

if.end4:                                          ; preds = %if.end
  %call5 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %stmt) #7, !dbg !8004
  call void @llvm.dbg.value(metadata %union.tree_node* %call5, metadata !7961, metadata !DIExpression()), !dbg !7990
  %tobool6 = icmp eq %union.tree_node* %call5, null, !dbg !8005
  br i1 %tobool6, label %if.then7, label %if.end12, !dbg !8007

if.then7:                                         ; preds = %if.end4
  %dst_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 3, !dbg !8008
  %4 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node, align 8, !dbg !8008
  %call8 = tail call fastcc %union.tree_node* @get_indirect_callee_fndecl(%struct.cgraph_node* %4, %union.gimple_statement_d* %stmt) #7, !dbg !8010
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !7961, metadata !DIExpression()), !dbg !7990
  %tobool9 = icmp eq %union.tree_node* %call8, null, !dbg !8011
  br i1 %tobool9, label %egress, label %if.end12, !dbg !8013

if.end12:                                         ; preds = %if.then7, %if.end4
  %fn.0 = phi %union.tree_node* [ %call5, %if.end4 ], [ %call8, %if.then7 ], !dbg !7990
  call void @llvm.dbg.value(metadata %union.tree_node* %fn.0, metadata !7961, metadata !DIExpression()), !dbg !7990
  %call13 = tail call %struct.cgraph_node* @cgraph_node(%union.tree_node* %fn.0) #6, !dbg !8014
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %call13, i64 0, i32 0, !dbg !8015
  %5 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8015
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !7961, metadata !DIExpression()), !dbg !7990
  %initial = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, !dbg !8016
  %6 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !8016
  %tobool14 = icmp eq %union.tree_node* %6, null, !dbg !8016
  br i1 %tobool14, label %land.lhs.true, label %if.end25, !dbg !8018

land.lhs.true:                                    ; preds = %if.end12
  %abstract_origin = getelementptr inbounds %union.tree_node, %union.tree_node* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, !dbg !8019
  %7 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !8019
  %tobool16 = icmp eq %union.tree_node* %7, null, !dbg !8019
  br i1 %tobool16, label %if.end25, label %land.lhs.true17, !dbg !8020

land.lhs.true17:                                  ; preds = %land.lhs.true
  %call20 = tail call zeroext i8 @gimple_has_body_p(%union.tree_node* nonnull %7) #6, !dbg !8021
  %tobool21 = icmp eq i8 %call20, 0, !dbg !8021
  br i1 %tobool21, label %if.end25, label %if.then22, !dbg !8022

if.then22:                                        ; preds = %land.lhs.true17
  %8 = load %union.tree_node*, %union.tree_node** %abstract_origin, align 8, !dbg !8023
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !7961, metadata !DIExpression()), !dbg !7990
  br label %if.end25, !dbg !8024

if.end25:                                         ; preds = %land.lhs.true17, %land.lhs.true, %if.end12, %if.then22
  %fn.1 = phi %union.tree_node* [ %5, %if.end12 ], [ %8, %if.then22 ], [ %5, %land.lhs.true17 ], [ %5, %land.lhs.true ], !dbg !7990
  call void @llvm.dbg.value(metadata %union.tree_node* %fn.1, metadata !7961, metadata !DIExpression()), !dbg !7990
  %dst_node26 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 3, !dbg !8025
  %9 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node26, align 8, !dbg !8025
  %analyzed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %9, i64 0, i32 27, !dbg !8027
  %bf.load = load i16, i16* %analyzed, align 4, !dbg !8027
  %bf.clear = and i16 %bf.load, 32, !dbg !8027
  %tobool27 = icmp eq i16 %bf.clear, 0, !dbg !8028
  br i1 %tobool27, label %egress, label %if.end29, !dbg !8029

if.end29:                                         ; preds = %if.end25
  %call31 = tail call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %9, %union.gimple_statement_d* %stmt) #6, !dbg !8030
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %call31, metadata !7967, metadata !DIExpression()), !dbg !7990
  %caller = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call31, i64 0, i32 1, !dbg !8031
  %10 = bitcast %struct.cgraph_node** %caller to %struct.tree_function_decl***, !dbg !8031
  %11 = load %struct.tree_function_decl**, %struct.tree_function_decl*** %10, align 8, !dbg !8031
  %12 = load %struct.tree_function_decl*, %struct.tree_function_decl** %11, align 8, !dbg !8031
  %personality = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %12, i64 0, i32 2, !dbg !8031
  %13 = load %union.tree_node*, %union.tree_node** %personality, align 8, !dbg !8031
  %tobool33 = icmp eq %union.tree_node* %13, null, !dbg !8031
  br i1 %tobool33, label %if.end51, label %land.lhs.true34, !dbg !8033

land.lhs.true34:                                  ; preds = %if.end29
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call31, i64 0, i32 2, !dbg !8034
  %14 = bitcast %struct.cgraph_node** %callee to %struct.tree_function_decl***, !dbg !8034
  %15 = load %struct.tree_function_decl**, %struct.tree_function_decl*** %14, align 8, !dbg !8034
  %16 = load %struct.tree_function_decl*, %struct.tree_function_decl** %15, align 8, !dbg !8034
  %personality37 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %16, i64 0, i32 2, !dbg !8034
  %17 = load %union.tree_node*, %union.tree_node** %personality37, align 8, !dbg !8034
  %tobool38 = icmp eq %union.tree_node* %17, null, !dbg !8034
  br i1 %tobool38, label %if.end51, label %land.lhs.true39, !dbg !8035

land.lhs.true39:                                  ; preds = %land.lhs.true34
  %cmp48 = icmp eq %union.tree_node* %13, %17, !dbg !8036
  br i1 %cmp48, label %if.end51, label %egress, !dbg !8037

if.end51:                                         ; preds = %land.lhs.true39, %land.lhs.true34, %if.end29
  call void @llvm.dbg.value(metadata i32* %reason, metadata !7968, metadata !DIExpression(DW_OP_deref)), !dbg !7990
  %call52 = call zeroext i8 @cgraph_inline_p(%struct.cgraph_edge* %call31, i32* nonnull %reason) #6, !dbg !8038
  %tobool53 = icmp eq i8 %call52, 0, !dbg !8038
  br i1 %tobool53, label %if.then54, label %if.end97, !dbg !8040

if.then54:                                        ; preds = %if.end51
  %indirect_call = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call31, i64 0, i32 14, !dbg !8041
  %bf.load55 = load i8, i8* %indirect_call, align 2, !dbg !8041
  %bf.clear56 = and i8 %bf.load55, 1, !dbg !8041
  %tobool58 = icmp eq i8 %bf.clear56, 0, !dbg !8044
  br i1 %tobool58, label %if.end60, label %egress, !dbg !8045

if.end60:                                         ; preds = %if.then54
  %attributes = getelementptr inbounds %union.tree_node, %union.tree_node* %fn.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, !dbg !8046
  %18 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !8046
  %call62 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0), %union.tree_node* %18) #6, !dbg !8048
  %tobool63 = icmp eq %union.tree_node* %call62, null, !dbg !8048
  br i1 %tobool63, label %if.else, label %land.lhs.true64, !dbg !8049

land.lhs.true64:                                  ; preds = %if.end60
  %19 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !8050
  %tobool66 = icmp eq i8 %19, 0, !dbg !8050
  br i1 %tobool66, label %if.else, label %if.then67, !dbg !8051

if.then67:                                        ; preds = %land.lhs.true64
  %20 = load i32, i32* %reason, align 4, !dbg !8052
  call void @llvm.dbg.value(metadata i32 %20, metadata !7968, metadata !DIExpression()), !dbg !7990
  %call68 = call i8* @cgraph_inline_failed_string(i32 %20) #6, !dbg !8054
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.15, i64 0, i64 0), %union.tree_node* %fn.1, i8* %call68) #6, !dbg !8055
  call void (i8*, ...) @sorry(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !8056
  br label %egress, !dbg !8057

if.else:                                          ; preds = %land.lhs.true64, %if.end60
  %21 = load i32, i32* @warn_inline, align 4, !dbg !8058
  %tobool69 = icmp eq i32 %21, 0, !dbg !8058
  br i1 %tobool69, label %egress, label %land.lhs.true70, !dbg !8060

land.lhs.true70:                                  ; preds = %if.else
  %declared_inline_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %fn.1, i64 0, i32 0, i32 5, !dbg !8061
  %bf.load72 = load i32, i32* %declared_inline_flag, align 8, !dbg !8061
  %bf.clear74 = and i32 %bf.load72, 2097152, !dbg !8061
  %tobool75 = icmp eq i32 %bf.clear74, 0, !dbg !8061
  br i1 %tobool75, label %egress, label %land.lhs.true76, !dbg !8062

land.lhs.true76:                                  ; preds = %land.lhs.true70
  %locus = getelementptr inbounds %union.tree_node, %union.tree_node* %fn.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8063
  %22 = load i32, i32* %locus, align 8, !dbg !8063
  call void @expand_location(%struct.expanded_location* nonnull sret %tmp, i32 %22) #6, !dbg !8063
  %sysp = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i64 0, i32 3, !dbg !8063
  %23 = load i8, i8* %sysp, align 8, !dbg !8063
  %cmp78 = icmp eq i8 %23, 0, !dbg !8063
  %24 = load i32, i32* %reason, align 4, !dbg !8064
  call void @llvm.dbg.value(metadata i32 %24, metadata !7968, metadata !DIExpression()), !dbg !7990
  %cmp81 = icmp ne i32 %24, 1, !dbg !8065
  %or.cond = and i1 %cmp78, %cmp81, !dbg !8066
  br i1 %or.cond, label %land.lhs.true83, label %egress, !dbg !8066

land.lhs.true83:                                  ; preds = %land.lhs.true76
  %25 = load %union.tree_node*, %union.tree_node** %attributes, align 8, !dbg !8067
  %call86 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i64 0, i64 0), %union.tree_node* %25) #6, !dbg !8068
  %tobool87 = icmp eq %union.tree_node* %call86, null, !dbg !8068
  br i1 %tobool87, label %land.lhs.true88, label %egress, !dbg !8069

land.lhs.true88:                                  ; preds = %land.lhs.true83
  %26 = load i8, i8* @cgraph_global_info_ready, align 1, !dbg !8070
  %tobool90 = icmp eq i8 %26, 0, !dbg !8070
  br i1 %tobool90, label %egress, label %if.then91, !dbg !8071

if.then91:                                        ; preds = %land.lhs.true88
  %27 = load i32, i32* %reason, align 4, !dbg !8072
  call void @llvm.dbg.value(metadata i32 %27, metadata !7968, metadata !DIExpression()), !dbg !7990
  %call92 = call i8* @cgraph_inline_failed_string(i32 %27) #6, !dbg !8074
  %call93 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.15, i64 0, i64 0), %union.tree_node* %fn.1, i8* %call92) #6, !dbg !8075
  %call94 = call zeroext i8 (i32, i8*, ...) @warning(i32 110, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !8076
  br label %egress, !dbg !8077

if.end97:                                         ; preds = %if.end51
  %callee98 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call31, i64 0, i32 2, !dbg !8078
  %28 = load %struct.cgraph_node*, %struct.cgraph_node** %callee98, align 8, !dbg !8078
  %decl99 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %28, i64 0, i32 0, !dbg !8079
  %29 = load %union.tree_node*, %union.tree_node** %decl99, align 8, !dbg !8079
  call void @llvm.dbg.value(metadata %union.tree_node* %29, metadata !7961, metadata !DIExpression()), !dbg !7990
  %call100 = call i32 @lookup_stmt_eh_lp(%union.gimple_statement_d* %stmt) #6, !dbg !8080
  %eh_lp_nr = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 10, !dbg !8081
  store i32 %call100, i32* %eh_lp_nr, align 8, !dbg !8082
  %30 = bitcast %struct.cgraph_node** %callee98 to %struct.tree_function_decl***, !dbg !8083
  %31 = load %struct.tree_function_decl**, %struct.tree_function_decl*** %30, align 8, !dbg !8083
  %32 = load %struct.tree_function_decl*, %struct.tree_function_decl** %31, align 8, !dbg !8083
  %personality104 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %32, i64 0, i32 2, !dbg !8083
  %33 = load %union.tree_node*, %union.tree_node** %personality104, align 8, !dbg !8083
  %tobool105 = icmp eq %union.tree_node* %33, null, !dbg !8083
  br i1 %tobool105, label %if.end115, label %if.then106, !dbg !8085

if.then106:                                       ; preds = %if.end97
  %34 = ptrtoint %union.tree_node* %33 to i64, !dbg !8085
  %35 = load %struct.tree_function_decl**, %struct.tree_function_decl*** %10, align 8, !dbg !8086
  %36 = load %struct.tree_function_decl*, %struct.tree_function_decl** %35, align 8, !dbg !8086
  %personality114 = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %36, i64 0, i32 2, !dbg !8086
  %37 = bitcast %union.tree_node** %personality114 to i64*, !dbg !8087
  store i64 %34, i64* %37, align 8, !dbg !8087
  br label %if.end115, !dbg !8086

if.end115:                                        ; preds = %if.end97, %if.then106
  %38 = bitcast %union.gimple_statement_d* %stmt to i8*, !dbg !8088
  %call116 = call %struct.edge_def* @split_block(%struct.basic_block_def* %bb, i8* %38) #6, !dbg !8089
  call void @llvm.dbg.value(metadata %struct.edge_def* %call116, metadata !7970, metadata !DIExpression()), !dbg !7990
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call116, i64 0, i32 0, !dbg !8090
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !8090
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %39, metadata !7957, metadata !DIExpression()), !dbg !7990
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call116, i64 0, i32 1, !dbg !8091
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8091
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %40, metadata !7969, metadata !DIExpression()), !dbg !7990
  call void @remove_edge(%struct.edge_def* %call116) #6, !dbg !8092
  %41 = bitcast %struct.gimple_stmt_iterator* %tmp117 to i8*, !dbg !8093
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %41) #8, !dbg !8093
  call fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp117, %struct.basic_block_def* %39) #7, !dbg !8093
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %41, i64 24, i1 false), !dbg !8093
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %41) #8, !dbg !8093
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %stmt_gsi, metadata !7972, metadata !DIExpression(DW_OP_deref)), !dbg !7990
  call void @gsi_remove(%struct.gimple_stmt_iterator* nonnull %stmt_gsi, i8 zeroext 0) #6, !dbg !8094
  %42 = bitcast %struct.gimple_stmt_iterator* %tmp118 to i8*, !dbg !8095
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %42) #8, !dbg !8095
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp118, %struct.basic_block_def* %40) #7, !dbg !8095
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %42, i64 24, i1 false), !dbg !8095
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %42) #8, !dbg !8095
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7971, metadata !DIExpression(DW_OP_deref)), !dbg !7990
  %call119 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !8096
  %tobool120 = icmp eq i8 %call119, 0, !dbg !8096
  br i1 %tobool120, label %if.else122, label %if.then121, !dbg !8098

if.then121:                                       ; preds = %if.end115
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7971, metadata !DIExpression(DW_OP_deref)), !dbg !7990
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %stmt, i32 0) #6, !dbg !8099
  call void @llvm.dbg.value(metadata i8 1, metadata !7974, metadata !DIExpression()), !dbg !7990
  br label %if.end123, !dbg !8101

if.else122:                                       ; preds = %if.end115
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !7971, metadata !DIExpression(DW_OP_deref)), !dbg !7990
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %stmt, i32 0) #6, !dbg !8102
  call void @llvm.dbg.value(metadata i8 0, metadata !7974, metadata !DIExpression()), !dbg !7990
  br label %if.end123

if.end123:                                        ; preds = %if.else122, %if.then121
  %purge_dead_abnormal_edges.0 = phi i8 [ 1, %if.then121 ], [ 0, %if.else122 ], !dbg !8104
  call void @llvm.dbg.value(metadata i8 %purge_dead_abnormal_edges.0, metadata !7974, metadata !DIExpression()), !dbg !7990
  %43 = bitcast %struct.gimple_stmt_iterator* %tmp124 to i8*, !dbg !8105
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #8, !dbg !8105
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp124, %struct.basic_block_def* %40) #7, !dbg !8105
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %43, i64 24, i1 false), !dbg !8105
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #8, !dbg !8105
  %call125 = call %union.tree_node* @make_node_stat(i32 4) #6, !dbg !8106
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 8, !dbg !8107
  store %union.tree_node* %call125, %union.tree_node** %block, align 8, !dbg !8108
  %abstract_origin128 = getelementptr inbounds %union.tree_node, %union.tree_node* %call125, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8109
  %44 = bitcast i32* %abstract_origin128 to %union.tree_node**, !dbg !8109
  store %union.tree_node* %29, %union.tree_node** %44, align 8, !dbg !8110
  %45 = load i32, i32* @input_location, align 4, !dbg !8111
  %46 = bitcast %union.tree_node** %block to %struct.tree_block**, !dbg !8112
  %47 = load %struct.tree_block*, %struct.tree_block** %46, align 8, !dbg !8112
  %locus131 = getelementptr inbounds %struct.tree_block, %struct.tree_block* %47, i64 0, i32 2, !dbg !8112
  store i32 %45, i32* %locus131, align 4, !dbg !8113
  %call132 = call fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* %stmt) #7, !dbg !8114
  %48 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !8115
  call fastcc void @prepend_lexical_block(%union.tree_node* %call132, %union.tree_node* %48) #7, !dbg !8116
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !8117
  %49 = bitcast %struct.pointer_map_t** %decl_map to i64*, !dbg !8117
  %50 = load i64, i64* %49, align 8, !dbg !8117
  %call134 = call %struct.pointer_map_t* @pointer_map_create() #6, !dbg !8118
  store %struct.pointer_map_t* %call134, %struct.pointer_map_t** %decl_map, align 8, !dbg !8119
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 22, !dbg !8120
  %51 = bitcast %struct.pointer_map_t** %debug_map to i64*, !dbg !8120
  %52 = load i64, i64* %51, align 8, !dbg !8120
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %debug_map, align 8, !dbg !8121
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 0, !dbg !8122
  store %union.tree_node* %29, %union.tree_node** %src_fn, align 8, !dbg !8123
  %53 = bitcast %struct.cgraph_node** %callee98 to i64*, !dbg !8124
  %54 = load i64, i64* %53, align 8, !dbg !8124
  %src_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 2, !dbg !8125
  %55 = bitcast %struct.cgraph_node** %src_node to i64*, !dbg !8126
  store i64 %54, i64* %55, align 8, !dbg !8126
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %29, i64 0, i32 0, i32 1, !dbg !8127
  %56 = bitcast %struct.function** %f to i64*, !dbg !8127
  %57 = load i64, i64* %56, align 8, !dbg !8127
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !8128
  %58 = bitcast %struct.function** %src_cfun to i64*, !dbg !8129
  store i64 %57, i64* %58, align 8, !dbg !8129
  %gimple_call = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 9, !dbg !8130
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %gimple_call, align 8, !dbg !8131
  %.cast = inttoptr i64 %57 to %struct.function*, !dbg !8132
  %after_inlining = getelementptr inbounds %struct.function, %struct.function* %.cast, i64 0, i32 20, !dbg !8132
  %bf.load140 = load i32, i32* %after_inlining, align 8, !dbg !8132
  %bf.clear142 = and i32 %bf.load140, 16777216, !dbg !8132
  %tobool143 = icmp eq i32 %bf.clear142, 0, !dbg !8132
  br i1 %tobool143, label %cond.end, label %cond.true, !dbg !8132

cond.true:                                        ; preds = %if.end123
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3635, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8132
  br label %cond.end, !dbg !8132

cond.end:                                         ; preds = %if.end123, %cond.true
  %entry_bb = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 20, !dbg !8133
  store %struct.basic_block_def* %39, %struct.basic_block_def** %entry_bb, align 8, !dbg !8134
  %attributes145 = getelementptr inbounds %union.tree_node, %union.tree_node* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 6, !dbg !8135
  %59 = load %union.tree_node*, %union.tree_node** %attributes145, align 8, !dbg !8135
  %call146 = call %union.tree_node* @lookup_attribute(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i64 0, i64 0), %union.tree_node* %59) #6, !dbg !8136
  %tobool147 = icmp eq %union.tree_node* %call146, null, !dbg !8136
  br i1 %tobool147, label %if.end150, label %if.then148, !dbg !8137

if.then148:                                       ; preds = %cond.end
  %60 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !8138
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %60) #8, !dbg !8138
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !7977, metadata !DIExpression(DW_OP_deref)), !dbg !8139
  call fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* nonnull sret %si, %struct.basic_block_def* %39) #7, !dbg !8140
  %call149 = call %union.gimple_statement_d* @gimple_build_predict(i32 10, i32 0) #6, !dbg !8141
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !7977, metadata !DIExpression(DW_OP_deref)), !dbg !8139
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %si, %union.gimple_statement_d* %call149, i32 0) #6, !dbg !8142
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %60) #8, !dbg !8143
  br label %if.end150, !dbg !8144

if.end150:                                        ; preds = %cond.end, %if.then148
  call fastcc void @initialize_inlined_parameters(%struct.copy_body_data* %id, %union.gimple_statement_d* %stmt, %union.tree_node* %29, %struct.basic_block_def* %39) #7, !dbg !8145
  %initial152 = getelementptr inbounds %union.tree_node, %union.tree_node* %29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, !dbg !8146
  %61 = load %union.tree_node*, %union.tree_node** %initial152, align 8, !dbg !8146
  %tobool153 = icmp eq %union.tree_node* %61, null, !dbg !8146
  br i1 %tobool153, label %if.end159, label %if.then154, !dbg !8148

if.then154:                                       ; preds = %if.end150
  %62 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !8149
  %call158 = call fastcc %union.tree_node* @remap_blocks(%union.tree_node* nonnull %61, %struct.copy_body_data* %id) #7, !dbg !8150
  call fastcc void @prepend_lexical_block(%union.tree_node* %62, %union.tree_node* %call158) #7, !dbg !8151
  %.pre = load %union.tree_node*, %union.tree_node** %initial152, align 8, !dbg !8152
  br label %if.end159, !dbg !8151

if.end159:                                        ; preds = %if.end150, %if.then154
  %.pn = phi %union.tree_node* [ %61, %if.end150 ], [ %.pre, %if.then154 ]
  %63 = phi %union.tree_node* [ null, %if.end150 ], [ %.pre, %if.then154 ], !dbg !8152
  %tobool162 = icmp eq %union.tree_node* %63, null, !dbg !8152
  br i1 %tobool162, label %cond.true163, label %if.end159.cond.end165_crit_edge, !dbg !8152

if.end159.cond.end165_crit_edge:                  ; preds = %if.end159
  %64 = getelementptr inbounds %union.tree_node, %union.tree_node* %.pn, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7990
  br label %cond.end165, !dbg !8152

cond.true163:                                     ; preds = %if.end159
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3652, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8152
  %.phi.trans.insert = bitcast %union.tree_node** %initial152 to i64**, !dbg !7990
  %.pre8 = load i64*, i64** %.phi.trans.insert, align 8, !dbg !8153
  br label %cond.end165, !dbg !8152

cond.end165:                                      ; preds = %if.end159.cond.end165_crit_edge, %cond.true163
  %65 = phi i64* [ %64, %if.end159.cond.end165_crit_edge ], [ %.pre8, %cond.true163 ], !dbg !8153
  %bf.load169 = load i64, i64* %65, align 8, !dbg !8153
  %bf.cast1714 = and i64 %bf.load169, 65535, !dbg !8153
  %cmp172 = icmp eq i64 %bf.cast1714, 4, !dbg !8153
  br i1 %cmp172, label %cond.end176, label %cond.true174, !dbg !8153

cond.true174:                                     ; preds = %cond.end165
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3653, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8153
  br label %cond.end176, !dbg !8153

cond.end176:                                      ; preds = %cond.end165, %cond.true174
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !7964, metadata !DIExpression()), !dbg !7990
  %call178 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !8154
  %tobool179 = icmp eq %union.tree_node* %call178, null, !dbg !8154
  br i1 %tobool179, label %if.end198, label %if.then180, !dbg !8156

if.then180:                                       ; preds = %cond.end176
  %call181 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !8157
  call void @llvm.dbg.value(metadata %union.tree_node* %call181, metadata !7965, metadata !DIExpression()), !dbg !7990
  %66 = getelementptr inbounds %union.tree_node, %union.tree_node* %call181, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8159
  %bf.load183 = load i64, i64* %66, align 8, !dbg !8159
  %bf.cast185 = and i64 %bf.load183, 65535, !dbg !8159
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast185, !dbg !8159
  %67 = load i32, i32* %arrayidx, align 4, !dbg !8159
  %cmp186 = icmp eq i32 %67, 3, !dbg !8159
  br i1 %cmp186, label %if.then188, label %if.end192, !dbg !8161

if.then188:                                       ; preds = %if.then180
  %bf.set = or i64 %bf.load183, 8388608, !dbg !8162
  store i64 %bf.set, i64* %66, align 8, !dbg !8162
  br label %if.end192, !dbg !8163

if.end192:                                        ; preds = %if.then188, %if.then180
  %call193 = call fastcc zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %stmt) #7, !dbg !8164
  %tobool194 = icmp ne i8 %call193, 0, !dbg !8164
  %spec.select = select i1 %tobool194, %union.tree_node* %call181, %union.tree_node* null, !dbg !8166
  %spec.select1 = select i1 %tobool194, %union.tree_node* null, %union.tree_node* %call181, !dbg !8166
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select1, metadata !7965, metadata !DIExpression()), !dbg !7990
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select, metadata !7964, metadata !DIExpression()), !dbg !7990
  br label %if.end198, !dbg !8167

if.end198:                                        ; preds = %cond.end176, %if.end192
  %return_slot.1 = phi %union.tree_node* [ %spec.select, %if.end192 ], [ null, %cond.end176 ], !dbg !7990
  %modify_dest.1 = phi %union.tree_node* [ %spec.select1, %if.end192 ], [ null, %cond.end176 ], !dbg !8168
  call void @llvm.dbg.value(metadata %union.tree_node* %modify_dest.1, metadata !7965, metadata !DIExpression()), !dbg !7990
  call void @llvm.dbg.value(metadata %union.tree_node* %return_slot.1, metadata !7964, metadata !DIExpression()), !dbg !7990
  %operator_new_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %29, i64 0, i32 0, i32 5, !dbg !8169
  %bf.load200 = load i32, i32* %operator_new_flag, align 8, !dbg !8169
  %bf.clear202 = and i32 %bf.load200, 1048576, !dbg !8169
  %tobool203 = icmp ne i32 %bf.clear202, 0, !dbg !8169
  %spec.select2 = select i1 %tobool203, %union.tree_node* null, %union.tree_node* %return_slot.1, !dbg !8171
  %spec.select3 = select i1 %tobool203, %union.tree_node* null, %union.tree_node* %modify_dest.1, !dbg !8171
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select3, metadata !7965, metadata !DIExpression()), !dbg !7990
  call void @llvm.dbg.value(metadata %union.tree_node* %spec.select2, metadata !7964, metadata !DIExpression()), !dbg !7990
  %call206 = call fastcc %union.tree_node* @declare_return_variable(%struct.copy_body_data* %id, %union.tree_node* %spec.select2, %union.tree_node* %spec.select3) #7, !dbg !8172
  call void @llvm.dbg.value(metadata %union.tree_node* %call206, metadata !7960, metadata !DIExpression()), !dbg !7990
  %68 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8173
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %68, i64 0, i32 9, !dbg !8174
  br label %for.cond, !dbg !8175

for.cond:                                         ; preds = %for.inc, %if.end198
  %t_step.0.in = phi %union.tree_node** [ %local_decls, %if.end198 ], [ %chain, %for.inc ]
  %t_step.0 = load %union.tree_node*, %union.tree_node** %t_step.0.in, align 8, !dbg !7990
  call void @llvm.dbg.value(metadata %union.tree_node* %t_step.0, metadata !7975, metadata !DIExpression()), !dbg !7990
  %tobool208 = icmp eq %union.tree_node* %t_step.0, null, !dbg !8176
  br i1 %tobool208, label %for.end, label %for.body, !dbg !8176

for.body:                                         ; preds = %for.cond
  %69 = getelementptr inbounds %union.tree_node, %union.tree_node* %t_step.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8178
  %70 = load %union.tree_node*, %union.tree_node** %69, align 8, !dbg !8178
  call void @llvm.dbg.value(metadata %union.tree_node* %70, metadata !7976, metadata !DIExpression()), !dbg !7990
  %71 = getelementptr inbounds %union.tree_node, %union.tree_node* %70, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8181
  %bf.load210 = load i64, i64* %71, align 8, !dbg !8181
  %bf.cast2136 = and i64 %bf.load210, 67108864, !dbg !8181
  %tobool214 = icmp eq i64 %bf.cast2136, 0, !dbg !8181
  br i1 %tobool214, label %if.else235, label %land.lhs.true215, !dbg !8183

land.lhs.true215:                                 ; preds = %for.body
  %bf.cast2207 = and i64 %bf.load210, 4194304, !dbg !8184
  %tobool221 = icmp eq i64 %bf.cast2207, 0, !dbg !8184
  br i1 %tobool221, label %if.then222, label %if.else235, !dbg !8185

if.then222:                                       ; preds = %land.lhs.true215
  %call223 = call fastcc %struct.var_ann_d* @var_ann(%union.tree_node* %70) #7, !dbg !8186
  %tobool224 = icmp eq %struct.var_ann_d* %call223, null, !dbg !8186
  br i1 %tobool224, label %for.inc, label %land.lhs.true225, !dbg !8189

land.lhs.true225:                                 ; preds = %if.then222
  %call226 = call zeroext i8 @add_referenced_var(%union.tree_node* %70) #6, !dbg !8190
  %tobool228 = icmp eq i8 %call226, 0, !dbg !8190
  br i1 %tobool228, label %for.inc, label %if.then229, !dbg !8191

if.then229:                                       ; preds = %land.lhs.true225
  %72 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8192
  %local_decls230 = getelementptr inbounds %struct.function, %struct.function* %72, i64 0, i32 9, !dbg !8192
  %73 = load %union.tree_node*, %union.tree_node** %local_decls230, align 8, !dbg !8192
  %call231 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %70, %union.tree_node* %73) #6, !dbg !8192
  %74 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8193
  %local_decls233 = getelementptr inbounds %struct.function, %struct.function* %74, i64 0, i32 9, !dbg !8194
  store %union.tree_node* %call231, %union.tree_node** %local_decls233, align 8, !dbg !8195
  br label %for.inc, !dbg !8193

if.else235:                                       ; preds = %land.lhs.true215, %for.body
  %call236 = call fastcc zeroext i8 @can_be_nonlocal(%union.tree_node* %70, %struct.copy_body_data* %id) #7, !dbg !8196
  %tobool237 = icmp eq i8 %call236, 0, !dbg !8196
  br i1 %tobool237, label %if.then238, label %for.inc, !dbg !8198

if.then238:                                       ; preds = %if.else235
  %call239 = call %union.tree_node* @remap_decl(%union.tree_node* %70, %struct.copy_body_data* %id) #7, !dbg !8199
  %75 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8199
  %local_decls241 = getelementptr inbounds %struct.function, %struct.function* %75, i64 0, i32 9, !dbg !8199
  %76 = load %union.tree_node*, %union.tree_node** %local_decls241, align 8, !dbg !8199
  %call242 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call239, %union.tree_node* %76) #6, !dbg !8199
  %77 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8200
  %local_decls244 = getelementptr inbounds %struct.function, %struct.function* %77, i64 0, i32 9, !dbg !8201
  store %union.tree_node* %call242, %union.tree_node** %local_decls244, align 8, !dbg !8202
  br label %for.inc, !dbg !8200

for.inc:                                          ; preds = %land.lhs.true225, %if.then222, %if.else235, %if.then229, %if.then238
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %t_step.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8203
  br label %for.cond, !dbg !8204, !llvm.loop !8205

for.end:                                          ; preds = %for.cond
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8207
  %tobool247 = icmp eq %struct._IO_FILE* %78, null, !dbg !8207
  br i1 %tobool247, label %if.end255, label %land.lhs.true248, !dbg !8209

land.lhs.true248:                                 ; preds = %for.end
  %79 = load i32, i32* @dump_flags, align 4, !dbg !8210
  %and = and i32 %79, 8, !dbg !8211
  %tobool249 = icmp eq i32 %and, 0, !dbg !8211
  br i1 %tobool249, label %if.end255, label %if.then250, !dbg !8212

if.then250:                                       ; preds = %land.lhs.true248
  %call251 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %78, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !8213
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8215
  %81 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !8216
  call void @print_generic_expr(%struct._IO_FILE* %80, %union.tree_node* %81, i32 0) #6, !dbg !8217
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8218
  %call253 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20, i64 0, i64 0)) #6, !dbg !8219
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8220
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !8221
  %84 = load %union.tree_node*, %union.tree_node** %dst_fn, align 8, !dbg !8221
  call void @print_generic_expr(%struct._IO_FILE* %83, %union.tree_node* %84, i32 0) #6, !dbg !8222
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !8223
  %frequency = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call31, i64 0, i32 11, !dbg !8224
  %86 = load i32, i32* %frequency, align 8, !dbg !8224
  %call254 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %85, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0), i32 %86) #6, !dbg !8225
  br label %if.end255, !dbg !8226

if.end255:                                        ; preds = %land.lhs.true248, %for.end, %if.then250
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i64 0, i32 8, !dbg !8227
  %87 = load i64, i64* %count, align 8, !dbg !8227
  %frequency256 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call31, i64 0, i32 11, !dbg !8228
  %88 = load i32, i32* %frequency256, align 8, !dbg !8228
  %div = mul nsw i32 %88, 10, !dbg !8229
  %call257 = call fastcc %union.tree_node* @copy_body(%struct.copy_body_data* %id, i64 %87, i32 %div, %struct.basic_block_def* %39, %struct.basic_block_def* %40) #7, !dbg !8230
  %89 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8231
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %89, i64 0, i32 3, !dbg !8233
  %90 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !8233
  %tobool259 = icmp eq %struct.gimple_df* %90, null, !dbg !8231
  br i1 %tobool259, label %if.end265, label %if.then260, !dbg !8234

if.then260:                                       ; preds = %if.end255
  %escaped = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %90, i64 0, i32 4, !dbg !8235
  call void @pt_solution_reset(%struct.pt_solution* nonnull %escaped) #6, !dbg !8237
  %91 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8238
  %gimple_df264 = getelementptr inbounds %struct.function, %struct.function* %91, i64 0, i32 3, !dbg !8239
  %92 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df264, align 8, !dbg !8239
  %callused = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %92, i64 0, i32 5, !dbg !8240
  call void @pt_solution_reset(%struct.pt_solution* nonnull %callused) #6, !dbg !8241
  br label %if.end265, !dbg !8242

if.end265:                                        ; preds = %if.end255, %if.then260
  %93 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !8243
  %tobool267 = icmp eq %struct.pointer_map_t* %93, null, !dbg !8245
  br i1 %tobool267, label %if.end271, label %if.then268, !dbg !8246

if.then268:                                       ; preds = %if.end265
  call void @pointer_map_destroy(%struct.pointer_map_t* nonnull %93) #6, !dbg !8247
  store i64 %52, i64* %51, align 8, !dbg !8249
  br label %if.end271, !dbg !8250

if.end271:                                        ; preds = %if.end265, %if.then268
  %94 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !8251
  call void @pointer_map_destroy(%struct.pointer_map_t* %94) #6, !dbg !8252
  store i64 %50, i64* %49, align 8, !dbg !8253
  call void @unlink_stmt_vdef(%union.gimple_statement_d* %stmt) #6, !dbg !8254
  %tobool274 = icmp eq %union.tree_node* %call206, null, !dbg !8255
  br i1 %tobool274, label %if.else287, label %land.lhs.true275, !dbg !8256

land.lhs.true275:                                 ; preds = %if.end271
  %call276 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !8257
  %tobool277 = icmp eq %union.tree_node* %call276, null, !dbg !8257
  br i1 %tobool277, label %if.else287, label %if.then278, !dbg !8258

if.then278:                                       ; preds = %land.lhs.true275
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7980, metadata !DIExpression()), !dbg !8259
  %call279 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !8260
  %call280 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call279, %union.tree_node* nonnull %call206) #6, !dbg !8260
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call280, metadata !7958, metadata !DIExpression()), !dbg !7990
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %stmt_gsi, metadata !7972, metadata !DIExpression(DW_OP_deref)), !dbg !7990
  call void @gsi_replace(%struct.gimple_stmt_iterator* nonnull %stmt_gsi, %union.gimple_statement_d* %call280, i8 zeroext 0) #6, !dbg !8261
  %95 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8262
  %call282 = call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %95) #7, !dbg !8264
  %tobool283 = icmp eq i8 %call282, 0, !dbg !8264
  br i1 %tobool283, label %if.end285, label %if.then284, !dbg !8265

if.then284:                                       ; preds = %if.then278
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %call280) #6, !dbg !8266
  br label %if.end285, !dbg !8266

if.end285:                                        ; preds = %if.then278, %if.then284
  %call286 = call zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %call280) #6, !dbg !8267
  br label %if.end314, !dbg !8268

if.else287:                                       ; preds = %land.lhs.true275, %if.end271
  %call288 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !8269
  %tobool289 = icmp eq %union.tree_node* %call288, null, !dbg !8269
  br i1 %tobool289, label %if.else312, label %land.lhs.true290, !dbg !8270

land.lhs.true290:                                 ; preds = %if.else287
  %call291 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !8271
  %96 = getelementptr inbounds %union.tree_node, %union.tree_node* %call291, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8271
  %bf.load293 = load i64, i64* %96, align 8, !dbg !8271
  %bf.cast2955 = and i64 %bf.load293, 65535, !dbg !8272
  %cmp296 = icmp eq i64 %bf.cast2955, 141, !dbg !8272
  br i1 %cmp296, label %if.then298, label %if.else312, !dbg !8273

if.then298:                                       ; preds = %land.lhs.true290
  %call299 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !8274
  call void @llvm.dbg.value(metadata %union.tree_node* %call299, metadata !7983, metadata !DIExpression()), !dbg !8275
  %var301 = getelementptr inbounds %union.tree_node, %union.tree_node* %call299, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8276
  %97 = bitcast i32* %var301 to %union.tree_node**, !dbg !8276
  %98 = load %union.tree_node*, %union.tree_node** %97, align 8, !dbg !8276
  call void @llvm.dbg.value(metadata %union.tree_node* %98, metadata !7987, metadata !DIExpression()), !dbg !8275
  %99 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8277
  %call303 = call %union.tree_node* @gimple_default_def(%struct.function* %99, %union.tree_node* %98) #6, !dbg !8278
  call void @llvm.dbg.value(metadata %union.tree_node* %call303, metadata !7988, metadata !DIExpression()), !dbg !8275
  %tobool304 = icmp eq %union.tree_node* %call303, null, !dbg !8279
  br i1 %tobool304, label %if.else308, label %if.then305, !dbg !8281

if.then305:                                       ; preds = %if.then298
  %call306 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !8282
  %call307 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call306, %union.tree_node* nonnull %call303) #6, !dbg !8282
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call307, metadata !7958, metadata !DIExpression()), !dbg !7990
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %stmt_gsi, metadata !7972, metadata !DIExpression(DW_OP_deref)), !dbg !7990
  call void @gsi_replace(%struct.gimple_stmt_iterator* nonnull %stmt_gsi, %union.gimple_statement_d* %call307, i8 zeroext 1) #6, !dbg !8284
  br label %if.end314, !dbg !8285

if.else308:                                       ; preds = %if.then298
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %stmt_gsi, metadata !7972, metadata !DIExpression(DW_OP_deref)), !dbg !7990
  call void @gsi_remove(%struct.gimple_stmt_iterator* nonnull %stmt_gsi, i8 zeroext 1) #6, !dbg !8286
  call void @set_default_def(%union.tree_node* %98, %union.tree_node* %call299) #6, !dbg !8288
  %call309 = call %union.gimple_statement_d* @gimple_build_nop() #6, !dbg !8289
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %call299, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8290
  %100 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !8290
  store %union.gimple_statement_d* %call309, %union.gimple_statement_d** %100, align 8, !dbg !8291
  br label %if.end314

if.else312:                                       ; preds = %if.else287, %land.lhs.true290
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %stmt_gsi, metadata !7972, metadata !DIExpression(DW_OP_deref)), !dbg !7990
  call void @gsi_remove(%struct.gimple_stmt_iterator* nonnull %stmt_gsi, i8 zeroext 1) #6, !dbg !8292
  br label %if.end314

if.end314:                                        ; preds = %if.else312, %if.else308, %if.then305, %if.end285
  %stmt.addr.2 = phi %union.gimple_statement_d* [ %call280, %if.end285 ], [ %stmt, %if.else312 ], [ %call307, %if.then305 ], [ %stmt, %if.else308 ], !dbg !8293
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt.addr.2, metadata !7958, metadata !DIExpression()), !dbg !7990
  %tobool315 = icmp eq i8 %purge_dead_abnormal_edges.0, 0, !dbg !8294
  br i1 %tobool315, label %if.end318, label %if.then316, !dbg !8296

if.then316:                                       ; preds = %if.end314
  %call317 = call zeroext i8 @gimple_purge_dead_abnormal_call_edges(%struct.basic_block_def* %40) #6, !dbg !8297
  br label %if.end318, !dbg !8297

if.end318:                                        ; preds = %if.end314, %if.then316
  %call319 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %stmt.addr.2) #7, !dbg !8298
  %tobool320 = icmp eq i8 %call319, 0, !dbg !8298
  br i1 %tobool320, label %if.end341, label %if.then321, !dbg !8300

if.then321:                                       ; preds = %if.end318
  %call322 = call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %stmt.addr.2) #6, !dbg !8301
  %tobool324 = icmp eq i8 %call322, 0, !dbg !8301
  br i1 %tobool324, label %lor.lhs.false, label %cond.end334, !dbg !8301

lor.lhs.false:                                    ; preds = %if.then321
  %call325 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt.addr.2) #7, !dbg !8301
  %cmp326 = icmp eq i32 %call325, 116, !dbg !8301
  br i1 %cmp326, label %cond.end334, label %lor.lhs.false328, !dbg !8301

lor.lhs.false328:                                 ; preds = %lor.lhs.false
  %call329 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt.addr.2) #7, !dbg !8301
  %cmp330 = icmp eq i32 %call329, 113, !dbg !8301
  br i1 %cmp330, label %cond.end334, label %cond.true332, !dbg !8301

cond.true332:                                     ; preds = %lor.lhs.false328
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 3798, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8301
  br label %cond.end334, !dbg !8301

cond.end334:                                      ; preds = %if.then321, %lor.lhs.false, %lor.lhs.false328, %cond.true332
  %call336 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt.addr.2) #7, !dbg !8303
  %101 = getelementptr inbounds %union.tree_node, %union.tree_node* %call336, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8303
  %bf.load338 = load i64, i64* %101, align 8, !dbg !8304
  %bf.set340 = or i64 %bf.load338, 16777216, !dbg !8304
  store i64 %bf.set340, i64* %101, align 8, !dbg !8304
  br label %if.end341, !dbg !8305

if.end341:                                        ; preds = %if.end318, %cond.end334
  %102 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !8306
  %outlining_inline_function = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %102, i64 0, i32 21, !dbg !8307
  %103 = load void (%union.tree_node*)*, void (%union.tree_node*)** %outlining_inline_function, align 8, !dbg !8307
  %104 = load %struct.cgraph_node*, %struct.cgraph_node** %callee98, align 8, !dbg !8308
  %decl343 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %104, i64 0, i32 0, !dbg !8309
  %105 = load %union.tree_node*, %union.tree_node** %decl343, align 8, !dbg !8309
  call void %103(%union.tree_node* %105) #6, !dbg !8310
  %106 = load %struct.cgraph_node*, %struct.cgraph_node** %callee98, align 8, !dbg !8311
  call void @cgraph_remove_node(%struct.cgraph_node* %106) #6, !dbg !8312
  store %union.tree_node* null, %union.tree_node** %block, align 8, !dbg !8313
  call void @llvm.dbg.value(metadata i8 1, metadata !7973, metadata !DIExpression()), !dbg !7990
  br label %egress, !dbg !8314

egress:                                           ; preds = %land.lhs.true39, %land.lhs.true88, %land.lhs.true83, %land.lhs.true70, %if.else, %if.then54, %if.end25, %if.then7, %if.end, %if.then67, %land.lhs.true76, %if.then91, %if.end341
  %successfully_inlined.0 = phi i8 [ 1, %if.end341 ], [ 0, %if.end ], [ 0, %if.then7 ], [ 0, %if.end25 ], [ 0, %land.lhs.true39 ], [ 0, %if.then54 ], [ 0, %if.else ], [ 0, %land.lhs.true70 ], [ 0, %land.lhs.true83 ], [ 0, %land.lhs.true88 ], [ 0, %if.then91 ], [ 0, %land.lhs.true76 ], [ 0, %if.then67 ], !dbg !7990
  call void @llvm.dbg.value(metadata i8 %successfully_inlined.0, metadata !7973, metadata !DIExpression()), !dbg !7990
  call void @llvm.dbg.label(metadata !7989), !dbg !8315
  store i32 %3, i32* @input_location, align 4, !dbg !8316
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #8, !dbg !8317
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !8317
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #8, !dbg !8317
  ret i8 %successfully_inlined.0, !dbg !8318
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !8319 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !8321, metadata !DIExpression()), !dbg !8322
  %call = tail call fastcc i32 @gimple_location(%union.gimple_statement_d* %g) #7, !dbg !8323
  %cmp = icmp ne i32 %call, 0, !dbg !8324
  %conv1 = zext i1 %cmp to i8, !dbg !8323
  ret i8 %conv1, !dbg !8325
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_location(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !8326 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !8330, metadata !DIExpression()), !dbg !8331
  %location = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 2, !dbg !8332
  %0 = load i32, i32* %location, align 8, !dbg !8332
  ret i32 %0, !dbg !8333
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @get_indirect_callee_fndecl(%struct.cgraph_node* %node, %union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !8334 {
entry:
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %node, metadata !8338, metadata !DIExpression()), !dbg !8341
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !8339, metadata !DIExpression()), !dbg !8341
  %call = tail call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %node, %union.gimple_statement_d* %stmt) #6, !dbg !8342
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %call, metadata !8340, metadata !DIExpression()), !dbg !8341
  %tobool = icmp eq %struct.cgraph_edge* %call, null, !dbg !8343
  br i1 %tobool, label %cleanup, label %if.then, !dbg !8345

if.then:                                          ; preds = %entry
  %callee = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call, i64 0, i32 2, !dbg !8346
  %0 = load %struct.cgraph_node*, %struct.cgraph_node** %callee, align 8, !dbg !8346
  %decl = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %0, i64 0, i32 0, !dbg !8347
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !8347
  br label %cleanup, !dbg !8348

cleanup:                                          ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %1, %if.then ], [ null, %entry ], !dbg !8341
  ret %union.tree_node* %retval.0, !dbg !8349
}

declare dso_local zeroext i8 @gimple_has_body_p(%union.tree_node*) local_unnamed_addr #2

declare dso_local %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node*, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @cgraph_inline_p(%struct.cgraph_edge*, i32*) local_unnamed_addr #2

declare dso_local i8* @cgraph_inline_failed_string(i32) local_unnamed_addr #2

declare dso_local i32 @lookup_stmt_eh_lp(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local %struct.edge_def* @split_block(%struct.basic_block_def*, i8*) local_unnamed_addr #2

declare dso_local void @remove_edge(%struct.edge_def*) local_unnamed_addr #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) local_unnamed_addr #2

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @prepend_lexical_block(%union.tree_node* %current_block, %union.tree_node* %new_block) unnamed_addr #5 !dbg !8350 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %current_block, metadata !8352, metadata !DIExpression()), !dbg !8354
  call void @llvm.dbg.value(metadata %union.tree_node* %new_block, metadata !8353, metadata !DIExpression()), !dbg !8354
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %current_block, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8355
  %1 = bitcast %union.tree_node** %0 to i64*, !dbg !8355
  %2 = load i64, i64* %1, align 8, !dbg !8355
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %new_block, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8356
  %3 = bitcast %union.tree_node** %chain to i64*, !dbg !8357
  store i64 %2, i64* %3, align 8, !dbg !8357
  store %union.tree_node* %new_block, %union.tree_node** %0, align 8, !dbg !8358
  %supercontext = getelementptr inbounds %union.tree_node, %union.tree_node* %new_block, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8359
  %4 = bitcast i40* %supercontext to %union.tree_node**, !dbg !8359
  store %union.tree_node* %current_block, %union.tree_node** %4, align 8, !dbg !8360
  ret void, !dbg !8361
}

declare dso_local %union.gimple_statement_d* @gimple_build_predict(i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @initialize_inlined_parameters(%struct.copy_body_data* %id, %union.gimple_statement_d* %stmt, %union.tree_node* %fn, %struct.basic_block_def* %bb) unnamed_addr #5 !dbg !8362 {
entry:
  %vars = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !8366, metadata !DIExpression()), !dbg !8379
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !8367, metadata !DIExpression()), !dbg !8379
  call void @llvm.dbg.value(metadata %union.tree_node* %fn, metadata !8368, metadata !DIExpression()), !dbg !8379
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !8369, metadata !DIExpression()), !dbg !8379
  %0 = bitcast %union.tree_node** %vars to i8*, !dbg !8380
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !8380
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !8373, metadata !DIExpression()), !dbg !8379
  store %union.tree_node* null, %union.tree_node** %vars, align 8, !dbg !8381
  %call = tail call fastcc %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %stmt) #7, !dbg !8382
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !8374, metadata !DIExpression()), !dbg !8379
  %arguments = getelementptr inbounds %union.tree_node, %union.tree_node* %fn, i64 0, i32 0, i32 0, i32 2, !dbg !8383
  call void @llvm.dbg.value(metadata i64 0, metadata !8371, metadata !DIExpression()), !dbg !8379
  br label %for.cond, !dbg !8384

for.cond:                                         ; preds = %cond.end, %entry
  %i.0 = phi i64 [ 0, %entry ], [ %inc, %cond.end ], !dbg !8385
  %p.0.in = phi %union.tree_node** [ %arguments, %entry ], [ %chain, %cond.end ]
  %p.0 = load %union.tree_node*, %union.tree_node** %p.0.in, align 8, !dbg !8385
  call void @llvm.dbg.value(metadata %union.tree_node* %p.0, metadata !8372, metadata !DIExpression()), !dbg !8379
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !8371, metadata !DIExpression()), !dbg !8379
  %tobool = icmp eq %union.tree_node* %p.0, null, !dbg !8386
  br i1 %tobool, label %for.end, label %for.body, !dbg !8386

for.body:                                         ; preds = %for.cond
  %call1 = call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #7, !dbg !8387
  %conv = zext i32 %call1 to i64, !dbg !8387
  %cmp = icmp ult i64 %i.0, %conv, !dbg !8388
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !8389

cond.true:                                        ; preds = %for.body
  %conv3 = trunc i64 %i.0 to i32, !dbg !8390
  %call4 = call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %stmt, i32 %conv3) #7, !dbg !8391
  br label %cond.end, !dbg !8389

cond.end:                                         ; preds = %for.body, %cond.true
  %cond = phi %union.tree_node* [ %call4, %cond.true ], [ null, %for.body ], !dbg !8389
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !8375, metadata !DIExpression()), !dbg !8392
  call void @llvm.dbg.value(metadata %union.tree_node** %vars, metadata !8373, metadata !DIExpression(DW_OP_deref)), !dbg !8379
  %call5 = call fastcc %union.gimple_statement_d* @setup_one_parameter(%struct.copy_body_data* %id, %union.tree_node* nonnull %p.0, %union.tree_node* %cond, %union.tree_node* %fn, %struct.basic_block_def* %bb, %union.tree_node** nonnull %vars) #7, !dbg !8393
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %p.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8394
  %inc = add i64 %i.0, 1, !dbg !8395
  call void @llvm.dbg.value(metadata i64 %inc, metadata !8371, metadata !DIExpression()), !dbg !8379
  br label %for.cond, !dbg !8396, !llvm.loop !8397

for.end:                                          ; preds = %for.cond
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %fn, i64 0, i32 0, i32 1, !dbg !8399
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !8399
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, i32 7, !dbg !8400
  %2 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !8400
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !8372, metadata !DIExpression()), !dbg !8379
  %3 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !8401
  %cmp6 = icmp eq %union.tree_node* %3, %fn, !dbg !8401
  br i1 %cmp6, label %cond.true8, label %cond.end10, !dbg !8401

cond.true8:                                       ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2513, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8401
  br label %cond.end10, !dbg !8401

cond.end10:                                       ; preds = %for.end, %cond.true8
  %tobool12 = icmp eq %union.tree_node* %2, null, !dbg !8402
  br i1 %tobool12, label %if.end, label %if.then, !dbg !8404

if.then:                                          ; preds = %cond.end10
  %tobool13 = icmp eq %union.tree_node* %call, null, !dbg !8405
  br i1 %tobool13, label %cond.true14, label %cond.end16, !dbg !8405

cond.true14:                                      ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2517, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8405
  br label %cond.end16, !dbg !8405

cond.end16:                                       ; preds = %if.then, %cond.true14
  call void @llvm.dbg.value(metadata %union.tree_node** %vars, metadata !8373, metadata !DIExpression(DW_OP_deref)), !dbg !8379
  %call18 = call fastcc %union.gimple_statement_d* @setup_one_parameter(%struct.copy_body_data* %id, %union.tree_node* nonnull %2, %union.tree_node* %call, %union.tree_node* %fn, %struct.basic_block_def* %bb, %union.tree_node** nonnull %vars) #7, !dbg !8407
  br label %if.end, !dbg !8408

if.end:                                           ; preds = %cond.end10, %cond.end16
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 8, !dbg !8409
  %4 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !8409
  %5 = load %union.tree_node*, %union.tree_node** %vars, align 8, !dbg !8410
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !8373, metadata !DIExpression()), !dbg !8379
  call fastcc void @declare_inline_vars(%union.tree_node* %4, %union.tree_node* %5) #7, !dbg !8411
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !8412
  ret void, !dbg !8412
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !8413 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8415, metadata !DIExpression()), !dbg !8416
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !8417
  ret %union.tree_node* %call, !dbg !8418
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !8419 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !8421, metadata !DIExpression()), !dbg !8422
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !8423
  %bf.load = load i32, i32* %0, align 8, !dbg !8423
  %and = lshr i32 %bf.load, 18, !dbg !8424
  %1 = trunc i32 %and to i8, !dbg !8424
  %2 = and i8 %1, 1, !dbg !8424
  ret i8 %2, !dbg !8425
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @declare_return_variable(%struct.copy_body_data* %id, %union.tree_node* %return_slot, %union.tree_node* %modify_dest) unnamed_addr #5 !dbg !8426 {
entry:
  %bitsize = alloca i64, align 8
  %bitpos = alloca i64, align 8
  %offset = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %volatilep = alloca i32, align 4
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !8428, metadata !DIExpression()), !dbg !8461
  call void @llvm.dbg.value(metadata %union.tree_node* %return_slot, metadata !8429, metadata !DIExpression()), !dbg !8461
  call void @llvm.dbg.value(metadata %union.tree_node* %modify_dest, metadata !8430, metadata !DIExpression()), !dbg !8461
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 0, !dbg !8462
  %0 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !8462
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !8431, metadata !DIExpression()), !dbg !8461
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !8463
  %1 = load %union.tree_node*, %union.tree_node** %dst_fn, align 8, !dbg !8463
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !8432, metadata !DIExpression()), !dbg !8461
  %result1 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 3, !dbg !8464
  %2 = load %union.tree_node*, %union.tree_node** %result1, align 8, !dbg !8464
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !8433, metadata !DIExpression()), !dbg !8461
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8465
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8465
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !8434, metadata !DIExpression()), !dbg !8461
  %tobool = icmp eq %union.tree_node* %modify_dest, null, !dbg !8466
  br i1 %tobool, label %if.else, label %if.then, !dbg !8468

if.then:                                          ; preds = %entry
  %type3 = getelementptr inbounds %union.tree_node, %union.tree_node* %modify_dest, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8469
  br label %if.end, !dbg !8470

if.else:                                          ; preds = %entry
  %type5 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8471
  %4 = bitcast %union.tree_node** %type5 to %struct.tree_common**, !dbg !8471
  %5 = load %struct.tree_common*, %struct.tree_common** %4, align 8, !dbg !8471
  %type7 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %5, i64 0, i32 2, !dbg !8471
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %caller_type.0.in = phi %union.tree_node** [ %type3, %if.then ], [ %type7, %if.else ]
  %caller_type.0 = load %union.tree_node*, %union.tree_node** %caller_type.0.in, align 8, !dbg !8472
  call void @llvm.dbg.value(metadata %union.tree_node* %caller_type.0, metadata !8435, metadata !DIExpression()), !dbg !8461
  %tobool8 = icmp eq %union.tree_node* %2, null, !dbg !8473
  br i1 %tobool8, label %cleanup263, label %lor.lhs.false, !dbg !8475

lor.lhs.false:                                    ; preds = %if.end
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8476
  %bf.load = load i64, i64* %6, align 8, !dbg !8476
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8476
  %cmp = icmp eq i64 %bf.cast1, 19, !dbg !8476
  br i1 %cmp, label %cleanup263, label %if.end10, !dbg !8477

if.end10:                                         ; preds = %lor.lhs.false
  %tobool11 = icmp eq %union.tree_node* %return_slot, null, !dbg !8478
  br i1 %tobool11, label %if.end107, label %if.then12, !dbg !8479

if.then12:                                        ; preds = %if.end10
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8480

cond.true:                                        ; preds = %if.then12
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2566, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8480
  br label %cond.end, !dbg !8480

cond.end:                                         ; preds = %if.then12, %cond.true
  %decl_by_reference_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8481
  %7 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !8481
  %bf.load14 = load i64, i64* %7, align 8, !dbg !8481
  %bf.cast1613 = and i64 %bf.load14, 268435456, !dbg !8481
  %tobool17 = icmp eq i64 %bf.cast1613, 0, !dbg !8481
  br i1 %tobool17, label %if.else50, label %if.then18, !dbg !8482

if.then18:                                        ; preds = %cond.end
  %call = tail call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* nonnull %return_slot) #6, !dbg !8483
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !8438, metadata !DIExpression()), !dbg !8484
  %call19 = tail call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %call) #6, !dbg !8485
  call void @llvm.dbg.value(metadata %union.tree_node* %call19, metadata !8438, metadata !DIExpression()), !dbg !8484
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %return_slot, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8486
  %bf.load21 = load i64, i64* %8, align 8, !dbg !8486
  %bf.cast2321 = and i64 %bf.load21, 65535, !dbg !8486
  %cmp24 = icmp eq i64 %bf.cast2321, 141, !dbg !8486
  br i1 %cmp24, label %cond.true25, label %cond.end27, !dbg !8486

cond.true25:                                      ; preds = %if.then18
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2578, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8486
  br label %cond.end27, !dbg !8486

cond.end27:                                       ; preds = %if.then18, %cond.true25
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8487
  %call29 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %9) #7, !dbg !8488
  %tobool30 = icmp eq i8 %call29, 0, !dbg !8488
  br i1 %tobool30, label %if.end72, label %if.then31, !dbg !8489

if.then31:                                        ; preds = %cond.end27
  %10 = bitcast i64* %bitsize to i8*, !dbg !8490
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #8, !dbg !8490
  %11 = bitcast i64* %bitpos to i8*, !dbg !8491
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #8, !dbg !8491
  %12 = bitcast %union.tree_node** %offset to i8*, !dbg !8492
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8, !dbg !8492
  %13 = bitcast i32* %mode to i8*, !dbg !8493
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #8, !dbg !8493
  %14 = bitcast i32* %unsignedp to i8*, !dbg !8494
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #8, !dbg !8494
  %15 = bitcast i32* %volatilep to i8*, !dbg !8495
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #8, !dbg !8495
  call void @llvm.dbg.value(metadata i64* %bitsize, metadata !8443, metadata !DIExpression(DW_OP_deref)), !dbg !8496
  call void @llvm.dbg.value(metadata i64* %bitpos, metadata !8446, metadata !DIExpression(DW_OP_deref)), !dbg !8496
  call void @llvm.dbg.value(metadata %union.tree_node** %offset, metadata !8447, metadata !DIExpression(DW_OP_deref)), !dbg !8496
  call void @llvm.dbg.value(metadata i32* %mode, metadata !8448, metadata !DIExpression(DW_OP_deref)), !dbg !8496
  call void @llvm.dbg.value(metadata i32* %unsignedp, metadata !8449, metadata !DIExpression(DW_OP_deref)), !dbg !8496
  call void @llvm.dbg.value(metadata i32* %volatilep, metadata !8450, metadata !DIExpression(DW_OP_deref)), !dbg !8496
  %call33 = call %union.tree_node* @get_inner_reference(%union.tree_node* nonnull %return_slot, i64* nonnull %bitsize, i64* nonnull %bitpos, %union.tree_node** nonnull %offset, i32* nonnull %mode, i32* nonnull %unsignedp, i32* nonnull %volatilep, i8 zeroext 0) #6, !dbg !8497
  call void @llvm.dbg.value(metadata %union.tree_node* %call33, metadata !8451, metadata !DIExpression()), !dbg !8496
  %16 = getelementptr inbounds %union.tree_node, %union.tree_node* %call33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8498
  %bf.load35 = load i64, i64* %16, align 8, !dbg !8498
  %bf.cast3722 = and i64 %bf.load35, 65535, !dbg !8500
  %cmp38 = icmp eq i64 %bf.cast3722, 47, !dbg !8500
  br i1 %cmp38, label %if.then39, label %if.end40, !dbg !8501

if.then39:                                        ; preds = %if.then31
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call33, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !8502
  %17 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !8502
  call void @llvm.dbg.value(metadata %union.tree_node* %17, metadata !8451, metadata !DIExpression()), !dbg !8496
  %.phi.trans.insert = getelementptr inbounds %union.tree_node, %union.tree_node* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8503
  %bf.load42.pre = load i64, i64* %.phi.trans.insert, align 8, !dbg !8505
  br label %if.end40, !dbg !8506

if.end40:                                         ; preds = %if.then39, %if.then31
  %bf.load42 = phi i64 [ %bf.load42.pre, %if.then39 ], [ %bf.load35, %if.then31 ], !dbg !8505
  %base32.0 = phi %union.tree_node* [ %17, %if.then39 ], [ %call33, %if.then31 ], !dbg !8496
  call void @llvm.dbg.value(metadata %union.tree_node* %base32.0, metadata !8451, metadata !DIExpression()), !dbg !8496
  %bf.cast4423 = and i64 %bf.load42, 65535, !dbg !8507
  %cmp45 = icmp eq i64 %bf.cast4423, 141, !dbg !8507
  br i1 %cmp45, label %if.then46, label %if.end48, !dbg !8508

if.then46:                                        ; preds = %if.end40
  %var47 = getelementptr inbounds %union.tree_node, %union.tree_node* %base32.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8509
  %18 = bitcast i32* %var47 to %union.tree_node**, !dbg !8509
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !8509
  call void @llvm.dbg.value(metadata %union.tree_node* %19, metadata !8451, metadata !DIExpression()), !dbg !8496
  br label %if.end48, !dbg !8510

if.end48:                                         ; preds = %if.then46, %if.end40
  %base32.1 = phi %union.tree_node* [ %19, %if.then46 ], [ %base32.0, %if.end40 ], !dbg !8496
  call void @llvm.dbg.value(metadata %union.tree_node* %base32.1, metadata !8451, metadata !DIExpression()), !dbg !8496
  call void @mark_sym_for_renaming(%union.tree_node* %base32.1) #6, !dbg !8511
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #8, !dbg !8512
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #8, !dbg !8512
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #8, !dbg !8512
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8, !dbg !8512
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #8, !dbg !8512
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #8, !dbg !8512
  br label %if.end72, !dbg !8513

if.else50:                                        ; preds = %cond.end
  call void @llvm.dbg.value(metadata %union.tree_node* %return_slot, metadata !8436, metadata !DIExpression()), !dbg !8461
  %20 = getelementptr inbounds %union.tree_node, %union.tree_node* %return_slot, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8514
  %bf.load52 = load i64, i64* %20, align 8, !dbg !8514
  %bf.cast5414 = and i64 %bf.load52, 65535, !dbg !8514
  %cmp55 = icmp eq i64 %bf.cast5414, 141, !dbg !8514
  br i1 %cmp55, label %cond.true56, label %cond.end58, !dbg !8514

cond.true56:                                      ; preds = %if.else50
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2603, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8514
  %bf.load66.pre = load i64, i64* %20, align 8, !dbg !8516
  br label %cond.end58, !dbg !8514

cond.end58:                                       ; preds = %if.else50, %cond.true56
  %bf.load66 = phi i64 [ %bf.load52, %if.else50 ], [ %bf.load66.pre, %cond.true56 ], !dbg !8516
  %21 = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8517
  %bf.load61 = load i64, i64* %21, align 8, !dbg !8517
  %22 = and i64 %bf.load61, 262144, !dbg !8516
  %bf.set = or i64 %22, %bf.load66, !dbg !8516
  store i64 %bf.set, i64* %20, align 8, !dbg !8516
  br label %if.end72

if.end72:                                         ; preds = %cond.end27, %if.end48, %cond.end58
  %var.0 = phi %union.tree_node* [ %return_slot, %cond.end58 ], [ %call19, %if.end48 ], [ %call19, %cond.end27 ], !dbg !8518
  call void @llvm.dbg.value(metadata %union.tree_node* %var.0, metadata !8436, metadata !DIExpression()), !dbg !8461
  %23 = bitcast %union.tree_node** %type to i64**, !dbg !8519
  %24 = load i64*, i64** %23, align 8, !dbg !8519
  %bf.load76 = load i64, i64* %24, align 8, !dbg !8519
  %bf.cast7818 = and i64 %bf.load76, 65535, !dbg !8521
  %cmp79 = icmp eq i64 %bf.cast7818, 13, !dbg !8521
  br i1 %cmp79, label %land.lhs.true, label %lor.lhs.false80, !dbg !8522

lor.lhs.false80:                                  ; preds = %if.end72
  %cmp87 = icmp eq i64 %bf.cast7818, 14, !dbg !8523
  br i1 %cmp87, label %land.lhs.true, label %done, !dbg !8524

land.lhs.true:                                    ; preds = %lor.lhs.false80, %if.end72
  %bf.load89 = load i64, i64* %7, align 8, !dbg !8525
  %bf.cast9220 = and i64 %bf.load89, 134217728, !dbg !8525
  %tobool93 = icmp eq i64 %bf.cast9220, 0, !dbg !8525
  br i1 %tobool93, label %land.lhs.true94, label %done, !dbg !8526

land.lhs.true94:                                  ; preds = %land.lhs.true
  %25 = getelementptr inbounds %union.tree_node, %union.tree_node* %var.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8527
  %bf.load96 = load i64, i64* %25, align 8, !dbg !8527
  %bf.cast98 = and i64 %bf.load96, 65535, !dbg !8527
  %arrayidx99 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast98, !dbg !8527
  %26 = load i32, i32* %arrayidx99, align 4, !dbg !8527
  %cmp100 = icmp eq i32 %26, 3, !dbg !8527
  br i1 %cmp100, label %if.then101, label %done, !dbg !8528

if.then101:                                       ; preds = %land.lhs.true94
  %gimple_reg_flag103 = getelementptr inbounds %union.tree_node, %union.tree_node* %var.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8529
  %27 = bitcast i40* %gimple_reg_flag103 to i64*, !dbg !8529
  %bf.load104 = load i64, i64* %27, align 8, !dbg !8530
  %bf.clear105 = and i64 %bf.load104, -134217729, !dbg !8530
  store i64 %bf.clear105, i64* %27, align 8, !dbg !8530
  br label %done, !dbg !8529

if.end107:                                        ; preds = %if.end10
  %bf.cast1122 = and i64 %bf.load, 262144, !dbg !8531
  %tobool113 = icmp eq i64 %bf.cast1122, 0, !dbg !8531
  br i1 %tobool113, label %cond.end116, label %cond.true114, !dbg !8531

cond.true114:                                     ; preds = %if.end107
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2616, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8531
  br label %cond.end116, !dbg !8531

cond.end116:                                      ; preds = %if.end107, %cond.true114
  br i1 %tobool, label %if.end210, label %land.lhs.true119, !dbg !8532

land.lhs.true119:                                 ; preds = %cond.end116
  %28 = getelementptr inbounds %union.tree_node, %union.tree_node* %modify_dest, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8533
  %bf.load121 = load i64, i64* %28, align 8, !dbg !8533
  %bf.cast1235 = and i64 %bf.load121, 65535, !dbg !8534
  %cmp124 = icmp eq i64 %bf.cast1235, 141, !dbg !8534
  br i1 %cmp124, label %if.end210, label %if.then125, !dbg !8535

if.then125:                                       ; preds = %land.lhs.true119
  call void @llvm.dbg.value(metadata i8 0, metadata !8452, metadata !DIExpression()), !dbg !8536
  %call126 = tail call zeroext i8 @useless_type_conversion_p(%union.tree_node* %3, %union.tree_node* %caller_type.0) #6, !dbg !8537
  %tobool127 = icmp eq i8 %call126, 0, !dbg !8537
  br i1 %tobool127, label %if.end206, label %if.else129, !dbg !8538

if.else129:                                       ; preds = %if.then125
  %29 = getelementptr inbounds %union.tree_node, %union.tree_node* %caller_type.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !8539
  %30 = bitcast %union.tree_node** %29 to i64**, !dbg !8539
  %31 = load i64*, i64** %30, align 8, !dbg !8539
  %bf.load132 = load i64, i64* %31, align 8, !dbg !8539
  %bf.cast1346 = and i64 %bf.load132, 65535, !dbg !8540
  %cmp135 = icmp eq i64 %bf.cast1346, 23, !dbg !8540
  br i1 %cmp135, label %if.else137, label %if.end206, !dbg !8541

if.else137:                                       ; preds = %if.else129
  %32 = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8542
  %bf.load139 = load i64, i64* %32, align 8, !dbg !8542
  %bf.cast1427 = and i64 %bf.load139, 262144, !dbg !8542
  %tobool143 = icmp eq i64 %bf.cast1427, 0, !dbg !8542
  br i1 %tobool143, label %if.else145, label %if.end206, !dbg !8543

if.else145:                                       ; preds = %if.else137
  %call146 = tail call %union.tree_node* @get_base_address(%union.tree_node* nonnull %modify_dest) #6, !dbg !8544
  call void @llvm.dbg.value(metadata %union.tree_node* %call146, metadata !8455, metadata !DIExpression()), !dbg !8545
  %33 = getelementptr inbounds %union.tree_node, %union.tree_node* %call146, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8546
  %bf.load148 = load i64, i64* %33, align 8, !dbg !8546
  %bf.cast150 = and i64 %bf.load148, 65535, !dbg !8546
  %arrayidx152 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast150, !dbg !8546
  %34 = load i32, i32* %arrayidx152, align 4, !dbg !8546
  %cmp153 = icmp eq i32 %34, 3, !dbg !8546
  br i1 %cmp153, label %if.else155, label %if.end206, !dbg !8548

if.else155:                                       ; preds = %if.else145
  %call156 = tail call fastcc zeroext i8 @is_global_var(%union.tree_node* %call146) #7, !dbg !8549
  %tobool157 = icmp eq i8 %call156, 0, !dbg !8549
  br i1 %tobool157, label %if.else159, label %if.end206, !dbg !8551

if.else159:                                       ; preds = %if.else155
  %35 = bitcast %union.tree_node** %type to i64**, !dbg !8552
  %36 = load i64*, i64** %35, align 8, !dbg !8552
  %bf.load163 = load i64, i64* %36, align 8, !dbg !8552
  %bf.cast1658 = and i64 %bf.load163, 65535, !dbg !8554
  %cmp166 = icmp eq i64 %bf.cast1658, 13, !dbg !8554
  br i1 %cmp166, label %land.lhs.true175, label %lor.lhs.false167, !dbg !8555

lor.lhs.false167:                                 ; preds = %if.else159
  %cmp174 = icmp eq i64 %bf.cast1658, 14, !dbg !8556
  br i1 %cmp174, label %land.lhs.true175, label %if.else192, !dbg !8557

land.lhs.true175:                                 ; preds = %lor.lhs.false167, %if.else159
  %gimple_reg_flag177 = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8558
  %37 = bitcast i40* %gimple_reg_flag177 to i64*, !dbg !8558
  %bf.load178 = load i64, i64* %37, align 8, !dbg !8558
  %bf.cast18111 = and i64 %bf.load178, 134217728, !dbg !8558
  %tobool182 = icmp eq i64 %bf.cast18111, 0, !dbg !8558
  br i1 %tobool182, label %land.lhs.true183, label %if.else192, !dbg !8559

land.lhs.true183:                                 ; preds = %land.lhs.true175
  %gimple_reg_flag185 = getelementptr inbounds %union.tree_node, %union.tree_node* %call146, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8560
  %38 = bitcast i40* %gimple_reg_flag185 to i64*, !dbg !8560
  %bf.load186 = load i64, i64* %38, align 8, !dbg !8560
  %bf.cast18912 = and i64 %bf.load186, 134217728, !dbg !8560
  %tobool190 = icmp eq i64 %bf.cast18912, 0, !dbg !8560
  br i1 %tobool190, label %if.else192, label %if.end206, !dbg !8561

if.else192:                                       ; preds = %land.lhs.true183, %land.lhs.true175, %lor.lhs.false167
  %bf.load194 = load i64, i64* %33, align 8, !dbg !8562
  %bf.cast19710 = and i64 %bf.load194, 262144, !dbg !8562
  %tobool198 = icmp eq i64 %bf.cast19710, 0, !dbg !8562
  br label %if.end206

if.end206:                                        ; preds = %land.lhs.true183, %if.else155, %if.else137, %if.else129, %if.then125, %if.else145, %if.else192
  %use_it.6 = phi i1 [ false, %if.then125 ], [ true, %if.else129 ], [ false, %if.else137 ], [ false, %if.else145 ], [ false, %if.else155 ], [ %tobool198, %if.else192 ], [ false, %land.lhs.true183 ]
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !8437, metadata !DIExpression()), !dbg !8461
  call void @llvm.dbg.value(metadata %union.tree_node* %modify_dest, metadata !8436, metadata !DIExpression()), !dbg !8461
  br i1 %use_it.6, label %done, label %if.end210

if.end210:                                        ; preds = %land.lhs.true119, %cond.end116, %if.end206
  %39 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !8564
  %40 = bitcast %union.tree_node** %39 to i64**, !dbg !8564
  %41 = load i64*, i64** %40, align 8, !dbg !8564
  %bf.load214 = load i64, i64* %41, align 8, !dbg !8564
  %bf.cast2163 = and i64 %bf.load214, 65535, !dbg !8564
  %cmp217 = icmp eq i64 %bf.cast2163, 23, !dbg !8564
  br i1 %cmp217, label %cond.end220, label %cond.true218, !dbg !8564

cond.true218:                                     ; preds = %if.end210
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2666, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8564
  br label %cond.end220, !dbg !8564

cond.end220:                                      ; preds = %if.end210, %cond.true218
  %call222 = tail call fastcc %union.tree_node* @copy_result_decl_to_var(%union.tree_node* nonnull %2, %struct.copy_body_data* %id) #7, !dbg !8565
  call void @llvm.dbg.value(metadata %union.tree_node* %call222, metadata !8436, metadata !DIExpression()), !dbg !8461
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8566
  %call224 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %42) #7, !dbg !8568
  %tobool225 = icmp eq i8 %call224, 0, !dbg !8568
  br i1 %tobool225, label %if.end229, label %if.then226, !dbg !8569

if.then226:                                       ; preds = %cond.end220
  %call227 = tail call fastcc %struct.var_ann_d* @get_var_ann(%union.tree_node* %call222) #7, !dbg !8570
  %call228 = tail call zeroext i8 @add_referenced_var(%union.tree_node* %call222) #6, !dbg !8572
  br label %if.end229, !dbg !8573

if.end229:                                        ; preds = %cond.end220, %if.then226
  %seen_in_bind_expr = getelementptr inbounds %union.tree_node, %union.tree_node* %call222, i64 0, i32 0, i32 0, i32 0, i32 4, !dbg !8574
  %43 = bitcast i24* %seen_in_bind_expr to i32*, !dbg !8574
  %bf.load230 = load i32, i32* %43, align 8, !dbg !8575
  %bf.set232 = or i32 %bf.load230, 256, !dbg !8575
  store i32 %bf.set232, i32* %43, align 8, !dbg !8575
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 1, !dbg !8576
  %44 = load %struct.function*, %struct.function** %f, align 8, !dbg !8576
  %local_decls = getelementptr inbounds %struct.function, %struct.function* %44, i64 0, i32 9, !dbg !8576
  %45 = load %union.tree_node*, %union.tree_node** %local_decls, align 8, !dbg !8576
  %call233 = tail call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call222, %union.tree_node* %45) #6, !dbg !8576
  %46 = load %struct.function*, %struct.function** %f, align 8, !dbg !8577
  %local_decls236 = getelementptr inbounds %struct.function, %struct.function* %46, i64 0, i32 9, !dbg !8578
  store %union.tree_node* %call233, %union.tree_node** %local_decls236, align 8, !dbg !8579
  %47 = getelementptr inbounds %union.tree_node, %union.tree_node* %call222, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8580
  %bf.load238 = load i64, i64* %47, align 8, !dbg !8581
  %bf.set240 = or i64 %bf.load238, 8388608, !dbg !8581
  store i64 %bf.set240, i64* %47, align 8, !dbg !8581
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 8, !dbg !8582
  %48 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !8582
  tail call fastcc void @declare_inline_vars(%union.tree_node* %48, %union.tree_node* %call222) #7, !dbg !8583
  call void @llvm.dbg.value(metadata %union.tree_node* %call222, metadata !8437, metadata !DIExpression()), !dbg !8461
  %type242 = getelementptr inbounds %union.tree_node, %union.tree_node* %call222, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8584
  %49 = load %union.tree_node*, %union.tree_node** %type242, align 8, !dbg !8584
  %call243 = tail call zeroext i8 @useless_type_conversion_p(%union.tree_node* %caller_type.0, %union.tree_node* %49) #6, !dbg !8586
  %tobool244 = icmp eq i8 %call243, 0, !dbg !8586
  br i1 %tobool244, label %if.then245, label %if.end247, !dbg !8587

if.then245:                                       ; preds = %if.end229
  %call246 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %caller_type.0, %union.tree_node* %call222) #6, !dbg !8588
  call void @llvm.dbg.value(metadata %union.tree_node* %call246, metadata !8437, metadata !DIExpression()), !dbg !8461
  br label %if.end247, !dbg !8589

if.end247:                                        ; preds = %if.end229, %if.then245
  %use.1 = phi %union.tree_node* [ %call222, %if.end229 ], [ %call246, %if.then245 ], !dbg !8461
  call void @llvm.dbg.value(metadata %union.tree_node* %use.1, metadata !8437, metadata !DIExpression()), !dbg !8461
  %call248 = tail call %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node* %use.1) #6, !dbg !8590
  call void @llvm.dbg.value(metadata %union.tree_node* %call248, metadata !8437, metadata !DIExpression()), !dbg !8461
  %decl_by_reference_flag250 = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8591
  %50 = bitcast i40* %decl_by_reference_flag250 to i64*, !dbg !8591
  %bf.load251 = load i64, i64* %50, align 8, !dbg !8591
  %bf.cast2544 = and i64 %bf.load251, 268435456, !dbg !8591
  %tobool255 = icmp eq i64 %bf.cast2544, 0, !dbg !8591
  br i1 %tobool255, label %done, label %if.then256, !dbg !8593

if.then256:                                       ; preds = %if.end247
  %bf.load258 = load i64, i64* %47, align 8, !dbg !8594
  %bf.set260 = or i64 %bf.load258, 262144, !dbg !8594
  store i64 %bf.set260, i64* %47, align 8, !dbg !8594
  %call261 = tail call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %call222) #6, !dbg !8596
  call void @llvm.dbg.value(metadata %union.tree_node* %call261, metadata !8436, metadata !DIExpression()), !dbg !8461
  br label %done, !dbg !8597

done:                                             ; preds = %land.lhs.true, %if.end247, %if.end206, %if.then256, %lor.lhs.false80, %land.lhs.true94, %if.then101
  %var.3 = phi %union.tree_node* [ %modify_dest, %if.end206 ], [ %var.0, %if.then101 ], [ %var.0, %land.lhs.true94 ], [ %var.0, %land.lhs.true ], [ %var.0, %lor.lhs.false80 ], [ %call261, %if.then256 ], [ %call222, %if.end247 ], !dbg !8461
  %use.2 = phi %union.tree_node* [ null, %if.end206 ], [ null, %if.then101 ], [ null, %land.lhs.true94 ], [ null, %land.lhs.true ], [ null, %lor.lhs.false80 ], [ %call248, %if.then256 ], [ %call248, %if.end247 ], !dbg !8461
  call void @llvm.dbg.value(metadata %union.tree_node* %use.2, metadata !8437, metadata !DIExpression()), !dbg !8461
  call void @llvm.dbg.value(metadata %union.tree_node* %var.3, metadata !8436, metadata !DIExpression()), !dbg !8461
  call void @llvm.dbg.label(metadata !8460), !dbg !8598
  call void @insert_decl_map(%struct.copy_body_data* %id, %union.tree_node* nonnull %2, %union.tree_node* %var.3) #7, !dbg !8599
  %retvar = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 5, !dbg !8600
  store %union.tree_node* %var.3, %union.tree_node** %retvar, align 8, !dbg !8601
  br label %cleanup263, !dbg !8602

cleanup263:                                       ; preds = %if.end, %lor.lhs.false, %done
  %retval.0 = phi %union.tree_node* [ %use.2, %done ], [ null, %lor.lhs.false ], [ null, %if.end ]
  ret %union.tree_node* %retval.0, !dbg !8603
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) local_unnamed_addr #2

declare dso_local void @pt_solution_reset(%struct.pt_solution*) local_unnamed_addr #2

declare dso_local void @unlink_stmt_vdef(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) local_unnamed_addr #2

declare dso_local void @mark_symbols_for_renaming(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @maybe_clean_or_replace_eh_stmt(%union.gimple_statement_d*, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @gimple_purge_dead_abnormal_call_edges(%struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !8604 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8606, metadata !DIExpression()), !dbg !8607
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !8608
  %cmp = icmp eq i32 %call, 6, !dbg !8609
  %conv1 = zext i1 %cmp to i8, !dbg !8608
  ret i8 %conv1, !dbg !8610
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @cgraph_remove_node(%struct.cgraph_node*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !8611 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8613, metadata !DIExpression()), !dbg !8614
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 2) #7, !dbg !8615
  ret %union.tree_node* %call, !dbg !8616
}

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @tree_ssa_strip_useless_type_conversions(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @get_inner_reference(%union.tree_node*, i64*, i64*, %union.tree_node**, i32*, i32*, i32*, i8 zeroext) local_unnamed_addr #2

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_global_var(%union.tree_node* %t) unnamed_addr #0 !dbg !8617 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !8619, metadata !DIExpression()), !dbg !8620
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8621
  %bf.load = load i64, i64* %0, align 8, !dbg !8621
  %bf.cast1 = and i64 %bf.load, 67108864, !dbg !8621
  %tobool = icmp eq i64 %bf.cast1, 0, !dbg !8621
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !8622

lor.rhs:                                          ; preds = %entry
  %decl_flag_1 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8623
  %1 = bitcast i40* %decl_flag_1 to i64*, !dbg !8623
  %bf.load1 = load i64, i64* %1, align 8, !dbg !8623
  %bf.cast42 = lshr i64 %bf.load1, 25, !dbg !8622
  %2 = trunc i64 %bf.cast42 to i8, !dbg !8622
  %3 = and i8 %2, 1, !dbg !8622
  br label %lor.end, !dbg !8622

lor.end:                                          ; preds = %entry, %lor.rhs
  %4 = phi i8 [ 1, %entry ], [ %3, %lor.rhs ]
  ret i8 %4, !dbg !8624
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @copy_result_decl_to_var(%union.tree_node* %decl, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !8625 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !8627, metadata !DIExpression()), !dbg !8631
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !8628, metadata !DIExpression()), !dbg !8631
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8632
  %bf.load = load i64, i64* %0, align 8, !dbg !8632
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8632
  %cmp = icmp eq i64 %bf.cast1, 34, !dbg !8632
  br i1 %cmp, label %cond.end, label %lor.lhs.false, !dbg !8632

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 36, !dbg !8632
  br i1 %cmp5, label %cond.end, label %cond.true, !dbg !8632

cond.true:                                        ; preds = %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4532, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8632
  br label %cond.end, !dbg !8632

cond.end:                                         ; preds = %entry, %lor.lhs.false, %cond.true
  %type6 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8633
  %1 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !8633
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !8630, metadata !DIExpression()), !dbg !8631
  %decl_by_reference_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8634
  %2 = bitcast i40* %decl_by_reference_flag to i64*, !dbg !8634
  %bf.load7 = load i64, i64* %2, align 8, !dbg !8634
  %bf.cast93 = and i64 %bf.load7, 268435456, !dbg !8634
  %tobool = icmp eq i64 %bf.cast93, 0, !dbg !8634
  br i1 %tobool, label %if.end, label %if.then, !dbg !8636

if.then:                                          ; preds = %cond.end
  %type11 = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8637
  %3 = load %union.tree_node*, %union.tree_node** %type11, align 8, !dbg !8637
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !8630, metadata !DIExpression()), !dbg !8631
  br label %if.end, !dbg !8638

if.end:                                           ; preds = %cond.end, %if.then
  %type.0 = phi %union.tree_node* [ %3, %if.then ], [ %1, %cond.end ], !dbg !8631
  call void @llvm.dbg.value(metadata %union.tree_node* %type.0, metadata !8630, metadata !DIExpression()), !dbg !8631
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !8639
  %4 = bitcast %union.tree_node** %dst_fn to %struct.tree_decl_minimal**, !dbg !8639
  %5 = load %struct.tree_decl_minimal*, %struct.tree_decl_minimal** %4, align 8, !dbg !8639
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %5, i64 0, i32 1, !dbg !8639
  %6 = load i32, i32* %locus, align 8, !dbg !8639
  %name = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8639
  %7 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8639
  %call = tail call %union.tree_node* @build_decl_stat(i32 %6, i32 32, %union.tree_node* %7, %union.tree_node* %type.0) #6, !dbg !8639
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !8629, metadata !DIExpression()), !dbg !8631
  %bf.load14 = load i64, i64* %0, align 8, !dbg !8640
  %bf.cast17 = and i64 %bf.load14, 1048576, !dbg !8640
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8641
  %bf.load19 = load i64, i64* %8, align 8, !dbg !8642
  %bf.clear20 = and i64 %bf.load19, -1048577, !dbg !8642
  %bf.set = or i64 %bf.clear20, %bf.cast17, !dbg !8642
  store i64 %bf.set, i64* %8, align 8, !dbg !8642
  %bf.load22 = load i64, i64* %0, align 8, !dbg !8643
  %bf.cast25 = and i64 %bf.load22, 524288, !dbg !8643
  %bf.clear30 = and i64 %bf.set, -524289, !dbg !8644
  %bf.set31 = or i64 %bf.clear30, %bf.cast25, !dbg !8644
  store i64 %bf.set31, i64* %8, align 8, !dbg !8644
  %bf.load35 = load i64, i64* %2, align 8, !dbg !8645
  %bf.cast384 = and i64 %bf.load35, 268435456, !dbg !8645
  %tobool39 = icmp eq i64 %bf.cast384, 0, !dbg !8645
  br i1 %tobool39, label %if.then40, label %if.end66, !dbg !8647

if.then40:                                        ; preds = %if.end
  %bf.load42 = load i64, i64* %0, align 8, !dbg !8648
  %bf.cast45 = and i64 %bf.load42, 262144, !dbg !8648
  %bf.clear50 = and i64 %bf.set31, -262145, !dbg !8650
  %bf.set51 = or i64 %bf.clear50, %bf.cast45, !dbg !8650
  store i64 %bf.set51, i64* %8, align 8, !dbg !8650
  %bf.load54 = load i64, i64* %2, align 8, !dbg !8651
  %bf.cast57 = and i64 %bf.load54, 134217728, !dbg !8651
  %gimple_reg_flag59 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8652
  %9 = bitcast i40* %gimple_reg_flag59 to i64*, !dbg !8652
  %bf.load60 = load i64, i64* %9, align 8, !dbg !8653
  %bf.clear63 = and i64 %bf.load60, -134217729, !dbg !8653
  %bf.set64 = or i64 %bf.clear63, %bf.cast57, !dbg !8653
  store i64 %bf.set64, i64* %9, align 8, !dbg !8653
  br label %if.end66, !dbg !8654

if.end66:                                         ; preds = %if.end, %if.then40
  %call67 = tail call fastcc %union.tree_node* @copy_decl_for_dup_finish(%struct.copy_body_data* %id, %union.tree_node* %decl, %union.tree_node* %call) #7, !dbg !8655
  ret %union.tree_node* %call67, !dbg !8656
}

declare dso_local %union.tree_node* @build_decl_stat(i32, i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !8657 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_basic_block_base* %vec_, metadata !8663, metadata !DIExpression()), !dbg !8665
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !8664, metadata !DIExpression()), !dbg !8665
  br label %land.end, !dbg !8666

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !8666
  %arrayidx = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8666
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !8666
  ret %struct.basic_block_def* %0, !dbg !8666
}

declare dso_local i32 @pointer_set_contains(%struct.pointer_set_t*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_prev(%struct.gimple_stmt_iterator* %i) unnamed_addr #0 !dbg !8667 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !8669, metadata !DIExpression()), !dbg !8670
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !8671
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !8671
  %prev = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 1, !dbg !8672
  %1 = bitcast %struct.gimple_seq_node_d** %prev to i64*, !dbg !8672
  %2 = load i64, i64* %1, align 8, !dbg !8672
  %3 = bitcast %struct.gimple_stmt_iterator* %i to i64*, !dbg !8673
  store i64 %2, i64* %3, align 8, !dbg !8673
  ret void, !dbg !8674
}

declare dso_local zeroext i8 @fold_stmt(%struct.gimple_stmt_iterator*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @update_stmt(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !8675 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !8679, metadata !DIExpression()), !dbg !8680
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %s) #7, !dbg !8681
  %tobool = icmp eq i8 %call, 0, !dbg !8681
  br i1 %tobool, label %if.end, label %if.then, !dbg !8683

if.then:                                          ; preds = %entry
  tail call void @gimple_set_modified(%union.gimple_statement_d* %s, i8 zeroext 1) #6, !dbg !8684
  tail call void @update_stmt_operands(%union.gimple_statement_d* %s) #6, !dbg !8686
  br label %if.end, !dbg !8687

if.end:                                           ; preds = %entry, %if.then
  ret void, !dbg !8688
}

declare dso_local void @cgraph_update_edges_for_call_stmt(%union.gimple_statement_d*, %union.tree_node*, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @gimple_purge_dead_eh_edges(%struct.basic_block_def*) local_unnamed_addr #2

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) local_unnamed_addr #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local i8* @vec_gc_o_reserve_exact(i8*, i32, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @unsave_expr_1(%union.tree_node* %expr) unnamed_addr #5 !dbg !8689 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !8691, metadata !DIExpression()), !dbg !8692
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8693
  %bf.load = load i64, i64* %0, align 8, !dbg !8693
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8694
  %cond = icmp eq i64 %bf.cast1, 55, !dbg !8694
  br i1 %cond, label %sw.bb, label %sw.epilog, !dbg !8694

sw.bb:                                            ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !8695
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !8695
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8695
  %tobool = icmp eq %union.tree_node* %1, null, !dbg !8695
  br i1 %tobool, label %if.end, label %sw.epilog, !dbg !8698

if.end:                                           ; preds = %sw.bb
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 3, !dbg !8699
  %2 = bitcast %union.tree_node** %arrayidx3 to i64*, !dbg !8699
  %3 = load i64, i64* %2, align 8, !dbg !8699
  %4 = bitcast %union.tree_node** %arrayidx to i64*, !dbg !8700
  store i64 %3, i64* %4, align 8, !dbg !8700
  store %union.tree_node* null, %union.tree_node** %arrayidx3, align 8, !dbg !8701
  br label %sw.epilog, !dbg !8702

sw.epilog:                                        ; preds = %sw.bb, %entry, %if.end
  ret void, !dbg !8703
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !8704 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8706, metadata !DIExpression()), !dbg !8707
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !8708
  ret %union.tree_node* %call, !dbg !8709
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_bind_set_block(%union.gimple_statement_d* %gs, %union.tree_node* %block) unnamed_addr #0 !dbg !8710 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8712, metadata !DIExpression()), !dbg !8714
  call void @llvm.dbg.value(metadata %union.tree_node* %block, metadata !8713, metadata !DIExpression()), !dbg !8714
  %cmp = icmp eq %union.tree_node* %block, null, !dbg !8715
  br i1 %cmp, label %cond.end, label %lor.lhs.false, !dbg !8715

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %block, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8715
  %bf.load = load i64, i64* %0, align 8, !dbg !8715
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8715
  %cmp1 = icmp eq i64 %bf.cast1, 4, !dbg !8715
  br i1 %cmp1, label %cond.end, label %cond.true, !dbg !8715

cond.true:                                        ; preds = %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 2573, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8715
  br label %cond.end, !dbg !8715

cond.end:                                         ; preds = %entry, %lor.lhs.false, %cond.true
  %1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !8716
  store %union.tree_node* %block, %union.tree_node** %1, align 8, !dbg !8717
  ret void, !dbg !8718
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_bind_set_vars(%union.gimple_statement_d* %gs, %union.tree_node* %vars) unnamed_addr #0 !dbg !8719 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8721, metadata !DIExpression()), !dbg !8723
  call void @llvm.dbg.value(metadata %union.tree_node* %vars, metadata !8722, metadata !DIExpression()), !dbg !8723
  %vars1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !8724
  %0 = bitcast i32* %vars1 to %union.tree_node**, !dbg !8724
  store %union.tree_node* %vars, %union.tree_node** %0, align 8, !dbg !8725
  ret void, !dbg !8726
}

declare dso_local void @set_decl_rtl(%union.tree_node*, %struct.rtx_def*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @copy_decl_to_var(%union.tree_node* %decl, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !8727 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !8729, metadata !DIExpression()), !dbg !8733
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !8730, metadata !DIExpression()), !dbg !8733
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8734
  %bf.load = load i64, i64* %0, align 8, !dbg !8734
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8734
  %cmp = icmp eq i64 %bf.cast1, 34, !dbg !8734
  br i1 %cmp, label %cond.end, label %lor.lhs.false, !dbg !8734

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 36, !dbg !8734
  br i1 %cmp5, label %cond.end, label %cond.true, !dbg !8734

cond.true:                                        ; preds = %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 4509, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8734
  br label %cond.end, !dbg !8734

cond.end:                                         ; preds = %entry, %lor.lhs.false, %cond.true
  %type6 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8735
  %1 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !8735
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !8732, metadata !DIExpression()), !dbg !8733
  %dst_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 1, !dbg !8736
  %2 = bitcast %union.tree_node** %dst_fn to %struct.tree_decl_minimal**, !dbg !8736
  %3 = load %struct.tree_decl_minimal*, %struct.tree_decl_minimal** %2, align 8, !dbg !8736
  %locus = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %3, i64 0, i32 1, !dbg !8736
  %4 = load i32, i32* %locus, align 8, !dbg !8736
  %name = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8736
  %5 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8736
  %call = tail call %union.tree_node* @build_decl_stat(i32 %4, i32 32, %union.tree_node* %5, %union.tree_node* %1) #6, !dbg !8736
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !8731, metadata !DIExpression()), !dbg !8733
  %bf.load9 = load i64, i64* %0, align 8, !dbg !8737
  %bf.cast11 = and i64 %bf.load9, 262144, !dbg !8737
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8738
  %bf.load13 = load i64, i64* %6, align 8, !dbg !8739
  %bf.clear14 = and i64 %bf.load13, -262145, !dbg !8739
  %bf.set = or i64 %bf.clear14, %bf.cast11, !dbg !8739
  store i64 %bf.set, i64* %6, align 8, !dbg !8739
  %bf.load16 = load i64, i64* %0, align 8, !dbg !8740
  %bf.cast19 = and i64 %bf.load16, 1048576, !dbg !8740
  %bf.clear24 = and i64 %bf.set, -1048577, !dbg !8741
  %bf.set25 = or i64 %bf.clear24, %bf.cast19, !dbg !8741
  store i64 %bf.set25, i64* %6, align 8, !dbg !8741
  %bf.load28 = load i64, i64* %0, align 8, !dbg !8742
  %bf.cast31 = and i64 %bf.load28, 524288, !dbg !8742
  %bf.clear36 = and i64 %bf.set25, -524289, !dbg !8743
  %bf.set37 = or i64 %bf.clear36, %bf.cast31, !dbg !8743
  store i64 %bf.set37, i64* %6, align 8, !dbg !8743
  %gimple_reg_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8744
  %7 = bitcast i40* %gimple_reg_flag to i64*, !dbg !8744
  %bf.load39 = load i64, i64* %7, align 8, !dbg !8744
  %bf.cast42 = and i64 %bf.load39, 134217728, !dbg !8744
  %gimple_reg_flag44 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8745
  %8 = bitcast i40* %gimple_reg_flag44 to i64*, !dbg !8745
  %bf.load45 = load i64, i64* %8, align 8, !dbg !8746
  %bf.clear48 = and i64 %bf.load45, -134217729, !dbg !8746
  %bf.set49 = or i64 %bf.clear48, %bf.cast42, !dbg !8746
  store i64 %bf.set49, i64* %8, align 8, !dbg !8746
  %call51 = tail call fastcc %union.tree_node* @copy_decl_for_dup_finish(%struct.copy_body_data* %id, %union.tree_node* %decl, %union.tree_node* %call) #7, !dbg !8747
  ret %union.tree_node* %call51, !dbg !8748
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @has_label_address_in_static_1(%union.tree_node** %nodep, i32* %walk_subtrees, i8* %fnp) #5 !dbg !8749 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %nodep, metadata !8751, metadata !DIExpression()), !dbg !8756
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !8752, metadata !DIExpression()), !dbg !8756
  call void @llvm.dbg.value(metadata i8* %fnp, metadata !8753, metadata !DIExpression()), !dbg !8756
  %0 = load %union.tree_node*, %union.tree_node** %nodep, align 8, !dbg !8757
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !8754, metadata !DIExpression()), !dbg !8756
  call void @llvm.dbg.value(metadata i8* %fnp, metadata !8755, metadata !DIExpression()), !dbg !8756
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8758
  %bf.load = load i64, i64* %1, align 8, !dbg !8758
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8760
  %cmp = icmp eq i64 %bf.cast1, 30, !dbg !8760
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8761

land.lhs.true:                                    ; preds = %entry
  %2 = bitcast i8* %fnp to %union.tree_node*, !dbg !8762
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !8755, metadata !DIExpression()), !dbg !8756
  %context = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !8763
  %3 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !8763
  %cmp1 = icmp eq %union.tree_node* %3, %2, !dbg !8764
  br i1 %cmp1, label %cleanup, label %if.end, !dbg !8765

if.end:                                           ; preds = %land.lhs.true, %entry
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast1, !dbg !8766
  %4 = load i32, i32* %arrayidx, align 4, !dbg !8766
  %cmp6 = icmp eq i32 %4, 2, !dbg !8766
  br i1 %cmp6, label %if.then7, label %cleanup, !dbg !8768

if.then7:                                         ; preds = %if.end
  store i32 0, i32* %walk_subtrees, align 4, !dbg !8769
  br label %cleanup, !dbg !8770

cleanup:                                          ; preds = %if.end, %if.then7, %land.lhs.true
  %retval.0 = phi %union.tree_node* [ %0, %land.lhs.true ], [ null, %if.then7 ], [ null, %if.end ], !dbg !8756
  ret %union.tree_node* %retval.0, !dbg !8771
}

declare dso_local void @find_unreachable_blocks() local_unnamed_addr #2

declare dso_local void @cgraph_remove_node_and_inline_clones(%struct.cgraph_node*) local_unnamed_addr #2

declare dso_local void @cgraph_remove_edge(%struct.cgraph_edge*) local_unnamed_addr #2

declare dso_local void @delete_basic_block(%struct.basic_block_def*) local_unnamed_addr #2

declare dso_local void @tidy_fallthru_edges() local_unnamed_addr #2

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_ipa_opt_pass_heap_reserve(%struct.VEC_ipa_opt_pass_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8772 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_heap** %vec_, metadata !8776, metadata !DIExpression()), !dbg !8779
  call void @llvm.dbg.value(metadata i32 1, metadata !8777, metadata !DIExpression()), !dbg !8779
  %0 = load %struct.VEC_ipa_opt_pass_heap*, %struct.VEC_ipa_opt_pass_heap** %vec_, align 8, !dbg !8780
  %tobool = icmp eq %struct.VEC_ipa_opt_pass_heap* %0, null, !dbg !8780
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8780

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_ipa_opt_pass_heap, %struct.VEC_ipa_opt_pass_heap* %0, i64 0, i32 0, !dbg !8780
  br label %cond.end, !dbg !8780

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_ipa_opt_pass_base* [ %base, %cond.true ], [ null, %entry ], !dbg !8780
  %call = tail call fastcc i32 @VEC_ipa_opt_pass_base_space(%struct.VEC_ipa_opt_pass_base* %cond, i32 1) #7, !dbg !8780
  %tobool1 = icmp eq i32 %call, 0, !dbg !8780
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !8780
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !8778, metadata !DIExpression()), !dbg !8779
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8780

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_ipa_opt_pass_heap** %vec_ to i8**, !dbg !8781
  %2 = load i8*, i8** %1, align 8, !dbg !8781
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %2, i32 1) #6, !dbg !8781
  store i8* %call3, i8** %1, align 8, !dbg !8781
  br label %if.end, !dbg !8781

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !8780
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ipa_opt_pass_d** @VEC_ipa_opt_pass_base_quick_push(%struct.VEC_ipa_opt_pass_base* %vec_, %struct.ipa_opt_pass_d* %obj_) unnamed_addr #0 !dbg !8783 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_base* %vec_, metadata !8787, metadata !DIExpression()), !dbg !8790
  call void @llvm.dbg.value(metadata %struct.ipa_opt_pass_d* %obj_, metadata !8788, metadata !DIExpression()), !dbg !8790
  %num1 = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %vec_, i64 0, i32 0, !dbg !8791
  %0 = load i32, i32* %num1, align 8, !dbg !8791
  %inc = add i32 %0, 1, !dbg !8791
  store i32 %inc, i32* %num1, align 8, !dbg !8791
  %idxprom = zext i32 %0 to i64, !dbg !8791
  %arrayidx = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8791
  call void @llvm.dbg.value(metadata %struct.ipa_opt_pass_d** %arrayidx, metadata !8789, metadata !DIExpression()), !dbg !8790
  store %struct.ipa_opt_pass_d* %obj_, %struct.ipa_opt_pass_d** %arrayidx, align 8, !dbg !8791
  ret %struct.ipa_opt_pass_d** %arrayidx, !dbg !8791
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_ipa_opt_pass_base_space(%struct.VEC_ipa_opt_pass_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8792 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ipa_opt_pass_base* %vec_, metadata !8796, metadata !DIExpression()), !dbg !8798
  call void @llvm.dbg.value(metadata i32 1, metadata !8797, metadata !DIExpression()), !dbg !8798
  %tobool = icmp eq %struct.VEC_ipa_opt_pass_base* %vec_, null, !dbg !8799
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8799

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %vec_, i64 0, i32 1, !dbg !8799
  %0 = load i32, i32* %alloc, align 4, !dbg !8799
  %num = getelementptr inbounds %struct.VEC_ipa_opt_pass_base, %struct.VEC_ipa_opt_pass_base* %vec_, i64 0, i32 0, !dbg !8799
  %1 = load i32, i32* %num, align 8, !dbg !8799
  %cmp1 = icmp ne i32 %0, %1, !dbg !8799
  %phitmp = zext i1 %cmp1 to i32, !dbg !8799
  br label %cond.end, !dbg !8799

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8799

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !8799
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) local_unnamed_addr #2

declare dso_local void @push_struct_function(%union.tree_node*) local_unnamed_addr #2

declare dso_local void @init_empty_tree_cfg() local_unnamed_addr #2

declare dso_local void @init_eh_for_function() local_unnamed_addr #2

declare dso_local void @init_tree_ssa(%struct.function*) local_unnamed_addr #2

declare dso_local void @init_ssa_operands() local_unnamed_addr #2

declare dso_local zeroext i8 @fold_convertible_p(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @self_inlining_addr_expr(%union.tree_node* %value, %union.tree_node* %fn) unnamed_addr #5 !dbg !8800 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %value, metadata !8802, metadata !DIExpression()), !dbg !8805
  call void @llvm.dbg.value(metadata %union.tree_node* %fn, metadata !8803, metadata !DIExpression()), !dbg !8805
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %value, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8806
  %bf.load = load i64, i64* %0, align 8, !dbg !8806
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8808
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !8808
  br i1 %cmp, label %if.end, label %cleanup, !dbg !8809

if.end:                                           ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %value, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !8810
  %1 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !8810
  %call = tail call %union.tree_node* @get_base_address(%union.tree_node* %1) #6, !dbg !8811
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !8804, metadata !DIExpression()), !dbg !8805
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !8812
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !8813

land.rhs:                                         ; preds = %if.end
  %call1 = tail call zeroext i8 @auto_var_in_fn_p(%union.tree_node* nonnull %call, %union.tree_node* %fn) #6, !dbg !8814
  %tobool2 = icmp ne i8 %call1, 0, !dbg !8813
  %phitmp = zext i1 %tobool2 to i8
  br label %land.end

land.end:                                         ; preds = %if.end, %land.rhs
  %2 = phi i8 [ 0, %if.end ], [ %phitmp, %land.rhs ]
  br label %cleanup, !dbg !8815

cleanup:                                          ; preds = %entry, %land.end
  %retval.0 = phi i8 [ %2, %land.end ], [ 0, %entry ], !dbg !8805
  ret i8 %retval.0, !dbg !8816
}

; Function Attrs: nounwind uwtable
define internal fastcc void @insert_debug_decl_map(%struct.copy_body_data* %id, %union.tree_node* %key, %union.tree_node* %value) unnamed_addr #5 !dbg !8817 {
entry:
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !8819, metadata !DIExpression()), !dbg !8822
  call void @llvm.dbg.value(metadata %union.tree_node* %key, metadata !8820, metadata !DIExpression()), !dbg !8822
  call void @llvm.dbg.value(metadata %union.tree_node* %value, metadata !8821, metadata !DIExpression()), !dbg !8822
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !8823
  %0 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8823
  %call = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %0) #7, !dbg !8825
  %tobool = icmp ne i8 %call, 0, !dbg !8825
  %1 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !8826
  %tobool1 = icmp ne i32 %1, 0, !dbg !8826
  %or.cond = and i1 %tobool, %tobool1, !dbg !8828
  br i1 %or.cond, label %if.end3, label %return, !dbg !8828

if.end3:                                          ; preds = %entry
  %call4 = tail call %union.tree_node* @target_for_debug_bind(%union.tree_node* %key) #6, !dbg !8829
  %tobool5 = icmp eq %union.tree_node* %call4, null, !dbg !8829
  br i1 %tobool5, label %return, label %if.end7, !dbg !8831

if.end7:                                          ; preds = %if.end3
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %key, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8832
  %bf.load = load i64, i64* %2, align 8, !dbg !8832
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8832
  %cmp = icmp eq i64 %bf.cast1, 34, !dbg !8832
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !8832

cond.true:                                        ; preds = %if.end7
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 165, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8832
  br label %cond.end, !dbg !8832

cond.end:                                         ; preds = %if.end7, %cond.true
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %value, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8833
  %bf.load9 = load i64, i64* %3, align 8, !dbg !8833
  %bf.cast112 = and i64 %bf.load9, 65535, !dbg !8833
  %cmp12 = icmp eq i64 %bf.cast112, 32, !dbg !8833
  br i1 %cmp12, label %cond.end15, label %cond.true13, !dbg !8833

cond.true13:                                      ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 166, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8833
  br label %cond.end15, !dbg !8833

cond.end15:                                       ; preds = %cond.end, %cond.true13
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 22, !dbg !8834
  %4 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !8834
  %tobool17 = icmp eq %struct.pointer_map_t* %4, null, !dbg !8836
  br i1 %tobool17, label %if.then18, label %if.end21, !dbg !8837

if.then18:                                        ; preds = %cond.end15
  %call19 = tail call %struct.pointer_map_t* @pointer_map_create() #6, !dbg !8838
  store %struct.pointer_map_t* %call19, %struct.pointer_map_t** %debug_map, align 8, !dbg !8839
  br label %if.end21, !dbg !8840

if.end21:                                         ; preds = %cond.end15, %if.then18
  %5 = phi %struct.pointer_map_t* [ %4, %cond.end15 ], [ %call19, %if.then18 ], !dbg !8841
  %6 = bitcast %union.tree_node* %key to i8*, !dbg !8842
  %call23 = tail call i8** @pointer_map_insert(%struct.pointer_map_t* %5, i8* %6) #6, !dbg !8843
  %7 = bitcast i8** %call23 to %union.tree_node**, !dbg !8844
  store %union.tree_node* %value, %union.tree_node** %7, align 8, !dbg !8844
  br label %return, !dbg !8845

return:                                           ; preds = %if.end3, %entry, %if.end21
  ret void, !dbg !8845
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @insert_init_debug_bind(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, %union.tree_node* %var, %union.tree_node* %value, %union.gimple_statement_d* %base_stmt) unnamed_addr #5 !dbg !8846 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !8850, metadata !DIExpression()), !dbg !8858
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !8851, metadata !DIExpression()), !dbg !8858
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !8852, metadata !DIExpression()), !dbg !8858
  call void @llvm.dbg.value(metadata %union.tree_node* %value, metadata !8853, metadata !DIExpression()), !dbg !8858
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %base_stmt, metadata !8854, metadata !DIExpression()), !dbg !8858
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !8859
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !8859
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !8860
  %1 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !8860
  %call = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %1) #7, !dbg !8862
  %tobool = icmp ne i8 %call, 0, !dbg !8862
  %2 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !8863
  %tobool1 = icmp ne i32 %2, 0, !dbg !8863
  %or.cond = and i1 %tobool, %tobool1, !dbg !8865
  br i1 %or.cond, label %if.end3, label %cleanup, !dbg !8865

if.end3:                                          ; preds = %entry
  %call4 = tail call %union.tree_node* @target_for_debug_bind(%union.tree_node* %var) #6, !dbg !8866
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !8857, metadata !DIExpression()), !dbg !8858
  %tobool5 = icmp eq %union.tree_node* %call4, null, !dbg !8867
  br i1 %tobool5, label %cleanup, label %if.end7, !dbg !8869

if.end7:                                          ; preds = %if.end3
  %tobool8 = icmp eq %struct.basic_block_def* %bb, null, !dbg !8870
  br i1 %tobool8, label %if.end16, label %if.then9, !dbg !8872

if.then9:                                         ; preds = %if.end7
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !8873
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #8, !dbg !8873
  call fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* nonnull %bb) #7, !dbg !8873
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %3, i64 24, i1 false), !dbg !8873
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #8, !dbg !8873
  %tobool10 = icmp eq %union.gimple_statement_d* %base_stmt, null, !dbg !8875
  br i1 %tobool10, label %land.lhs.true, label %if.end16, !dbg !8877

land.lhs.true:                                    ; preds = %if.then9
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8856, metadata !DIExpression(DW_OP_deref)), !dbg !8858
  %call11 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !8878
  %tobool12 = icmp eq i8 %call11, 0, !dbg !8878
  br i1 %tobool12, label %if.then13, label %if.end16, !dbg !8879

if.then13:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8856, metadata !DIExpression(DW_OP_deref)), !dbg !8858
  %call14 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !8880
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call14, metadata !8854, metadata !DIExpression()), !dbg !8858
  br label %if.end16, !dbg !8881

if.end16:                                         ; preds = %land.lhs.true, %if.then9, %if.end7, %if.then13
  %base_stmt.addr.1 = phi %union.gimple_statement_d* [ %base_stmt, %if.end7 ], [ %base_stmt, %if.then9 ], [ null, %land.lhs.true ], [ %call14, %if.then13 ]
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %base_stmt.addr.1, metadata !8854, metadata !DIExpression()), !dbg !8858
  %call17 = call %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* nonnull %call4, %union.tree_node* %value, %union.gimple_statement_d* %base_stmt.addr.1) #6, !dbg !8882
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call17, metadata !8855, metadata !DIExpression()), !dbg !8858
  br i1 %tobool8, label %cleanup, label %if.then19, !dbg !8883

if.then19:                                        ; preds = %if.end16
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8856, metadata !DIExpression(DW_OP_deref)), !dbg !8858
  %call20 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !8884
  %tobool21 = icmp eq i8 %call20, 0, !dbg !8884
  br i1 %tobool21, label %if.then22, label %if.else, !dbg !8888

if.then22:                                        ; preds = %if.then19
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8856, metadata !DIExpression(DW_OP_deref)), !dbg !8858
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %call17, i32 1) #6, !dbg !8889
  br label %cleanup, !dbg !8889

if.else:                                          ; preds = %if.then19
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !8856, metadata !DIExpression(DW_OP_deref)), !dbg !8858
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %call17, i32 1) #6, !dbg !8890
  br label %cleanup

cleanup:                                          ; preds = %if.end16, %if.end3, %if.else, %if.then22, %entry
  %retval.0 = phi %union.gimple_statement_d* [ null, %entry ], [ null, %if.end3 ], [ %call17, %if.then22 ], [ %call17, %if.else ], [ %call17, %if.end16 ], !dbg !8858
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !8891
  ret %union.gimple_statement_d* %retval.0, !dbg !8891
}

declare dso_local %union.tree_node* @target_for_debug_bind(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8892 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %vec_, metadata !8896, metadata !DIExpression()), !dbg !8899
  call void @llvm.dbg.value(metadata i32 1, metadata !8897, metadata !DIExpression()), !dbg !8899
  %0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_, align 8, !dbg !8900
  %tobool = icmp eq %struct.VEC_gimple_heap* %0, null, !dbg !8900
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8900

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %0, i64 0, i32 0, !dbg !8900
  br label %cond.end, !dbg !8900

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %entry ], !dbg !8900
  %call = tail call fastcc i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 1) #7, !dbg !8900
  %tobool1 = icmp eq i32 %call, 0, !dbg !8900
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !8900
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !8898, metadata !DIExpression()), !dbg !8899
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8900

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_gimple_heap** %vec_ to i8**, !dbg !8901
  %2 = load i8*, i8** %1, align 8, !dbg !8901
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %2, i32 1) #6, !dbg !8901
  store i8* %call3, i8** %1, align 8, !dbg !8901
  br label %if.end, !dbg !8901

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !8900
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) unnamed_addr #0 !dbg !8903 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !8907, metadata !DIExpression()), !dbg !8910
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %obj_, metadata !8908, metadata !DIExpression()), !dbg !8910
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !8911
  %0 = load i32, i32* %num1, align 8, !dbg !8911
  %inc = add i32 %0, 1, !dbg !8911
  store i32 %inc, i32* %num1, align 8, !dbg !8911
  %idxprom = zext i32 %0 to i64, !dbg !8911
  %arrayidx = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8911
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %arrayidx, metadata !8909, metadata !DIExpression()), !dbg !8910
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %arrayidx, align 8, !dbg !8911
  ret %union.gimple_statement_d** %arrayidx, !dbg !8911
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8912 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !8916, metadata !DIExpression()), !dbg !8918
  call void @llvm.dbg.value(metadata i32 1, metadata !8917, metadata !DIExpression()), !dbg !8918
  %tobool = icmp eq %struct.VEC_gimple_base* %vec_, null, !dbg !8919
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8919

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 1, !dbg !8919
  %0 = load i32, i32* %alloc, align 4, !dbg !8919
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !8919
  %1 = load i32, i32* %num, align 8, !dbg !8919
  %cmp1 = icmp ne i32 %0, %1, !dbg !8919
  %phitmp = zext i1 %cmp1 to i32, !dbg !8919
  br label %cond.end, !dbg !8919

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8919

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !8919
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @blocks_nreverse(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @chainon(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @remapped_type(%union.tree_node* %type, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !8920 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !8922, metadata !DIExpression()), !dbg !8925
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !8923, metadata !DIExpression()), !dbg !8925
  %cmp = icmp eq %union.tree_node* %type, null, !dbg !8926
  br i1 %cmp, label %cleanup, label %if.end, !dbg !8928

if.end:                                           ; preds = %entry
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !8929
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !8929
  %1 = bitcast %union.tree_node* %type to i8*, !dbg !8930
  %call = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* nonnull %1) #6, !dbg !8931
  call void @llvm.dbg.value(metadata i8** %call, metadata !8924, metadata !DIExpression()), !dbg !8925
  %tobool = icmp eq i8** %call, null, !dbg !8932
  br i1 %tobool, label %cleanup, label %if.then1, !dbg !8934

if.then1:                                         ; preds = %if.end
  %2 = bitcast i8** %call to %union.tree_node**, !dbg !8935
  call void @llvm.dbg.value(metadata %union.tree_node** %2, metadata !8924, metadata !DIExpression()), !dbg !8925
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !8936
  br label %cleanup, !dbg !8937

cleanup:                                          ; preds = %if.end, %entry, %if.then1
  %retval.0 = phi %union.tree_node* [ %3, %if.then1 ], [ null, %entry ], [ null, %if.end ], !dbg !8925
  ret %union.tree_node* %retval.0, !dbg !8938
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @copy_cfg_body(%struct.copy_body_data* %id, i64 %count, i32 %frequency_scale, %struct.basic_block_def* %entry_block_map, %struct.basic_block_def* %exit_block_map) unnamed_addr #5 !dbg !8939 {
entry:
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !8941, metadata !DIExpression()), !dbg !8957
  call void @llvm.dbg.value(metadata i64 %count, metadata !8942, metadata !DIExpression()), !dbg !8957
  call void @llvm.dbg.value(metadata i32 %frequency_scale, metadata !8943, metadata !DIExpression()), !dbg !8957
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %entry_block_map, metadata !8944, metadata !DIExpression()), !dbg !8957
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %exit_block_map, metadata !8945, metadata !DIExpression()), !dbg !8957
  %src_fn = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 0, !dbg !8958
  %0 = load %union.tree_node*, %union.tree_node** %src_fn, align 8, !dbg !8958
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !8946, metadata !DIExpression()), !dbg !8957
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 1, !dbg !8959
  %1 = load %struct.function*, %struct.function** %f, align 8, !dbg !8959
  call void @llvm.dbg.value(metadata %struct.function* %1, metadata !8947, metadata !DIExpression()), !dbg !8957
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !8950, metadata !DIExpression()), !dbg !8957
  %cfg = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, i32 1, !dbg !8960
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8960
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i64 0, i32 0, !dbg !8960
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8960
  %count1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i64 0, i32 8, !dbg !8962
  %4 = load i64, i64* %count1, align 8, !dbg !8962
  %tobool = icmp eq i64 %4, 0, !dbg !8960
  br i1 %tobool, label %if.end, label %if.then, !dbg !8963

if.then:                                          ; preds = %entry
  %mul = mul nsw i64 %count, 10000, !dbg !8964
  %div = sdiv i64 %mul, %4, !dbg !8965
  call void @llvm.dbg.value(metadata i64 %div, metadata !8951, metadata !DIExpression()), !dbg !8957
  br label %if.end, !dbg !8966

if.end:                                           ; preds = %entry, %if.then
  %count_scale.0 = phi i64 [ %div, %if.then ], [ 10000, %entry ], !dbg !8967
  call void @llvm.dbg.value(metadata i64 %count_scale.0, metadata !8951, metadata !DIExpression()), !dbg !8957
  tail call void @gimple_register_cfg_hooks() #6, !dbg !8968
  %5 = load %struct.function*, %struct.function** %f, align 8, !dbg !8969
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, i32 1, !dbg !8969
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !8969
  %x_entry_block_ptr8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i64 0, i32 0, !dbg !8969
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr8, align 8, !dbg !8969
  %tobool9 = icmp eq %struct.basic_block_def* %7, null, !dbg !8969
  br i1 %tobool9, label %cond.true, label %cond.end, !dbg !8969

cond.true:                                        ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2063, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !8969
  %.pre = load %struct.function*, %struct.function** %f, align 8, !dbg !8970
  br label %cond.end, !dbg !8969

cond.end:                                         ; preds = %if.end, %cond.true
  %8 = phi %struct.function* [ %5, %if.end ], [ %.pre, %cond.true ], !dbg !8970
  %src_cfun12 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !8971
  store %struct.function* %8, %struct.function** %src_cfun12, align 8, !dbg !8972
  call void @llvm.dbg.value(metadata %struct.function* %8, metadata !8948, metadata !DIExpression()), !dbg !8957
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, i32 1, !dbg !8973
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !8973
  %x_entry_block_ptr14 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i64 0, i32 0, !dbg !8973
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr14, align 8, !dbg !8973
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i64 0, i32 2, !dbg !8974
  %11 = bitcast i8** %aux to %struct.basic_block_def**, !dbg !8975
  store %struct.basic_block_def* %entry_block_map, %struct.basic_block_def** %11, align 8, !dbg !8975
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !8976
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i64 0, i32 1, !dbg !8976
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8976
  %aux16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i64 0, i32 2, !dbg !8977
  %14 = bitcast i8** %aux16 to %struct.basic_block_def**, !dbg !8978
  store %struct.basic_block_def* %exit_block_map, %struct.basic_block_def** %14, align 8, !dbg !8978
  %15 = bitcast %struct.control_flow_graph** %cfg13 to i64**, !dbg !8979
  %16 = load i64*, i64** %15, align 8, !dbg !8979
  %17 = load i64, i64* %16, align 8, !dbg !8979
  %aux19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %entry_block_map, i64 0, i32 2, !dbg !8980
  %18 = bitcast i8** %aux19 to i64*, !dbg !8981
  store i64 %17, i64* %18, align 8, !dbg !8981
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !8982
  %x_exit_block_ptr21 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i64 0, i32 1, !dbg !8982
  %20 = bitcast %struct.basic_block_def** %x_exit_block_ptr21 to i64*, !dbg !8982
  %21 = load i64, i64* %20, align 8, !dbg !8982
  %aux22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %exit_block_map, i64 0, i32 2, !dbg !8983
  %22 = bitcast i8** %aux22 to i64*, !dbg !8984
  store i64 %21, i64* %22, align 8, !dbg !8984
  %23 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8985
  %eh = getelementptr inbounds %struct.function, %struct.function* %23, i64 0, i32 0, !dbg !8987
  %24 = load %struct.eh_status*, %struct.eh_status** %eh, align 8, !dbg !8987
  %tobool23 = icmp eq %struct.eh_status* %24, null, !dbg !8985
  br i1 %tobool23, label %if.end25, label %if.then24, !dbg !8988

if.then24:                                        ; preds = %cond.end
  %eh_lp_nr = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 10, !dbg !8989
  %25 = load i32, i32* %eh_lp_nr, align 8, !dbg !8989
  %26 = bitcast %struct.copy_body_data* %id to i8*, !dbg !8990
  %call = tail call %struct.pointer_map_t* @duplicate_eh_regions(%struct.function* %8, %struct.eh_region_d* null, i32 %25, %union.tree_node* (%union.tree_node*, i8*)* nonnull @remap_decl_1, i8* %26) #6, !dbg !8991
  %eh_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 11, !dbg !8992
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** %eh_map, align 8, !dbg !8993
  br label %if.end25, !dbg !8994

if.end25:                                         ; preds = %cond.end, %if.then24
  %27 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !8995
  %x_entry_block_ptr27 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %27, i64 0, i32 0, !dbg !8995
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr27, align 8, !dbg !8995
  br label %for.cond, !dbg !8995

for.cond:                                         ; preds = %for.body, %if.end25
  %29 = phi %struct.control_flow_graph* [ %27, %if.end25 ], [ %.pre1, %for.body ], !dbg !8996
  %.pn = phi %struct.basic_block_def* [ %28, %if.end25 ], [ %bb.0, %for.body ]
  %bb.0.in = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %.pn, i64 0, i32 6, !dbg !8997
  %bb.0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.0.in, align 8, !dbg !8997
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !8949, metadata !DIExpression()), !dbg !8957
  %x_exit_block_ptr29 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %29, i64 0, i32 1, !dbg !8996
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr29, align 8, !dbg !8996
  %cmp = icmp eq %struct.basic_block_def* %bb.0, %30, !dbg !8996
  br i1 %cmp, label %for.end, label %for.body, !dbg !8995

for.body:                                         ; preds = %for.cond
  %call30 = tail call fastcc %struct.basic_block_def* @copy_bb(%struct.copy_body_data* %id, %struct.basic_block_def* %bb.0, i32 %frequency_scale, i64 %count_scale.0) #7, !dbg !8998
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call30, metadata !8953, metadata !DIExpression()), !dbg !8999
  %aux31 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb.0, i64 0, i32 2, !dbg !9000
  %31 = bitcast i8** %aux31 to %struct.basic_block_def**, !dbg !9001
  store %struct.basic_block_def* %call30, %struct.basic_block_def** %31, align 8, !dbg !9001
  %aux32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call30, i64 0, i32 2, !dbg !9002
  %32 = bitcast i8** %aux32 to %struct.basic_block_def**, !dbg !9003
  store %struct.basic_block_def* %bb.0, %struct.basic_block_def** %32, align 8, !dbg !9003
  %.pre1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !8996
  br label %for.cond, !dbg !8996, !llvm.loop !9004

for.end:                                          ; preds = %for.cond
  %.lcssa = phi %struct.control_flow_graph* [ %29, %for.cond ], !dbg !8996
  %33 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9006
  %cfg35 = getelementptr inbounds %struct.function, %struct.function* %33, i64 0, i32 1, !dbg !9006
  %34 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg35, align 8, !dbg !9006
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %34, i64 0, i32 5, !dbg !9006
  %35 = load i32, i32* %x_last_basic_block, align 8, !dbg !9006
  call void @llvm.dbg.value(metadata i32 %35, metadata !8952, metadata !DIExpression()), !dbg !8957
  %x_entry_block_ptr37 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %.lcssa, i64 0, i32 0, !dbg !9007
  br label %for.cond38, !dbg !9007

for.cond38:                                       ; preds = %for.body40, %for.end
  %bb.1.in = phi %struct.basic_block_def** [ %x_entry_block_ptr37, %for.end ], [ %next_bb42, %for.body40 ]
  %bb.1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.1.in, align 8, !dbg !9009
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.1, metadata !8949, metadata !DIExpression()), !dbg !8957
  %tobool39 = icmp eq %struct.basic_block_def* %bb.1, null, !dbg !9007
  br i1 %tobool39, label %for.end43, label %for.body40, !dbg !9007

for.body40:                                       ; preds = %for.cond38
  tail call fastcc void @copy_edges_for_bb(%struct.basic_block_def* nonnull %bb.1, i64 %count_scale.0, %struct.basic_block_def* %exit_block_map) #7, !dbg !9010
  %next_bb42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb.1, i64 0, i32 6, !dbg !9012
  br label %for.cond38, !dbg !9012, !llvm.loop !9013

for.end43:                                        ; preds = %for.cond38
  %36 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9015
  %call45 = tail call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %36) #7, !dbg !9017
  %tobool46 = icmp eq i8 %call45, 0, !dbg !9017
  br i1 %tobool46, label %if.end56, label %if.then47, !dbg !9018

if.then47:                                        ; preds = %for.end43
  %37 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !9019
  %x_entry_block_ptr49 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %37, i64 0, i32 0, !dbg !9019
  br label %for.cond50, !dbg !9019

for.cond50:                                       ; preds = %for.body52, %if.then47
  %bb.2.in = phi %struct.basic_block_def** [ %x_entry_block_ptr49, %if.then47 ], [ %next_bb54, %for.body52 ]
  %bb.2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.2.in, align 8, !dbg !9021
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.2, metadata !8949, metadata !DIExpression()), !dbg !8957
  %tobool51 = icmp eq %struct.basic_block_def* %bb.2, null, !dbg !9019
  br i1 %tobool51, label %if.end56.loopexit, label %for.body52, !dbg !9019

for.body52:                                       ; preds = %for.cond50
  tail call fastcc void @copy_phis_for_bb(%struct.basic_block_def* nonnull %bb.2, %struct.copy_body_data* %id) #7, !dbg !9022
  %next_bb54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb.2, i64 0, i32 6, !dbg !9024
  br label %for.cond50, !dbg !9024, !llvm.loop !9025

if.end56.loopexit:                                ; preds = %for.cond50
  br label %if.end56, !dbg !9027

if.end56:                                         ; preds = %if.end56.loopexit, %for.end43
  %38 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !9027
  %x_entry_block_ptr58 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %38, i64 0, i32 0, !dbg !9027
  br label %for.cond59, !dbg !9027

for.cond59:                                       ; preds = %for.body61, %if.end56
  %bb.3.in = phi %struct.basic_block_def** [ %x_entry_block_ptr58, %if.end56 ], [ %next_bb66, %for.body61 ]
  %bb.3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.3.in, align 8, !dbg !9029
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.3, metadata !8949, metadata !DIExpression()), !dbg !8957
  %tobool60 = icmp eq %struct.basic_block_def* %bb.3, null, !dbg !9027
  br i1 %tobool60, label %for.cond68.preheader, label %for.body61, !dbg !9027

for.cond68.preheader:                             ; preds = %for.cond59
  br label %for.cond68, !dbg !9030

for.body61:                                       ; preds = %for.cond59
  %aux62 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb.3, i64 0, i32 2, !dbg !9032
  %39 = bitcast i8** %aux62 to %struct.basic_block_def**, !dbg !9032
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %39, align 8, !dbg !9032
  %aux63 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i64 0, i32 2, !dbg !9035
  store i8* null, i8** %aux63, align 8, !dbg !9036
  store i8* null, i8** %aux62, align 8, !dbg !9037
  %next_bb66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb.3, i64 0, i32 6, !dbg !9038
  br label %for.cond59, !dbg !9038, !llvm.loop !9039

for.cond68:                                       ; preds = %for.cond68.preheader, %cond.end82
  %last.0 = phi i32 [ %inc, %cond.end82 ], [ %35, %for.cond68.preheader ], !dbg !8957
  call void @llvm.dbg.value(metadata i32 %last.0, metadata !8952, metadata !DIExpression()), !dbg !8957
  %41 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9041
  %cfg70 = getelementptr inbounds %struct.function, %struct.function* %41, i64 0, i32 1, !dbg !9041
  %42 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg70, align 8, !dbg !9041
  %x_last_basic_block71 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i64 0, i32 5, !dbg !9041
  %43 = load i32, i32* %x_last_basic_block71, align 8, !dbg !9041
  %cmp72 = icmp slt i32 %last.0, %43, !dbg !9043
  br i1 %cmp72, label %for.body73, label %for.end87, !dbg !9030

for.body73:                                       ; preds = %for.cond68
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %42, i64 0, i32 2, !dbg !9044
  %44 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !9044
  %tobool76 = icmp eq %struct.VEC_basic_block_gc* %44, null, !dbg !9044
  br i1 %tobool76, label %cond.end82, label %cond.true77, !dbg !9044

cond.true77:                                      ; preds = %for.body73
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %44, i64 0, i32 0, !dbg !9044
  br label %cond.end82, !dbg !9044

cond.end82:                                       ; preds = %for.body73, %cond.true77
  %cond83 = phi %struct.VEC_basic_block_base* [ %base, %cond.true77 ], [ null, %for.body73 ], !dbg !9044
  %call84 = tail call fastcc %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond83, i32 %last.0) #7, !dbg !9044
  %aux85 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call84, i64 0, i32 2, !dbg !9045
  store i8* null, i8** %aux85, align 8, !dbg !9046
  %inc = add nsw i32 %last.0, 1, !dbg !9047
  call void @llvm.dbg.value(metadata i32 %inc, metadata !8952, metadata !DIExpression()), !dbg !8957
  br label %for.cond68, !dbg !9048, !llvm.loop !9049

for.end87:                                        ; preds = %for.cond68
  store i8* null, i8** %aux19, align 8, !dbg !9051
  store i8* null, i8** %aux22, align 8, !dbg !9052
  %eh_map90 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 11, !dbg !9053
  %45 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map90, align 8, !dbg !9053
  %tobool91 = icmp eq %struct.pointer_map_t* %45, null, !dbg !9055
  br i1 %tobool91, label %if.end95, label %if.then92, !dbg !9056

if.then92:                                        ; preds = %for.end87
  tail call void @pointer_map_destroy(%struct.pointer_map_t* nonnull %45) #6, !dbg !9057
  store %struct.pointer_map_t* null, %struct.pointer_map_t** %eh_map90, align 8, !dbg !9059
  br label %if.end95, !dbg !9060

if.end95:                                         ; preds = %for.end87, %if.then92
  ret %union.tree_node* undef, !dbg !9061
}

; Function Attrs: nounwind uwtable
define internal fastcc void @copy_debug_stmts(%struct.copy_body_data* %id) unnamed_addr #5 !dbg !9062 {
entry:
  %stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !9064, metadata !DIExpression()), !dbg !9067
  %0 = bitcast %union.gimple_statement_d** %stmt to i8*, !dbg !9068
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !9068
  %debug_stmts = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 21, !dbg !9069
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %debug_stmts, align 8, !dbg !9069
  %tobool = icmp eq %struct.VEC_gimple_heap* %1, null, !dbg !9071
  br i1 %tobool, label %cleanup, label %for.cond.preheader, !dbg !9072

for.cond.preheader:                               ; preds = %entry
  br label %for.cond, !dbg !9073

for.cond:                                         ; preds = %for.cond.preheader, %for.body
  %2 = phi %struct.VEC_gimple_heap* [ %.pre, %for.body ], [ %1, %for.cond.preheader ], !dbg !9075
  %i.0 = phi i64 [ %inc, %for.body ], [ 0, %for.cond.preheader ], !dbg !9077
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !9065, metadata !DIExpression()), !dbg !9067
  %tobool2 = icmp eq %struct.VEC_gimple_heap* %2, null, !dbg !9075
  br i1 %tobool2, label %cond.end, label %cond.true, !dbg !9075

cond.true:                                        ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %2, i64 0, i32 0, !dbg !9075
  br label %cond.end, !dbg !9075

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %for.cond ], !dbg !9075
  %conv = trunc i64 %i.0 to i32, !dbg !9075
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !9066, metadata !DIExpression(DW_OP_deref)), !dbg !9067
  %call = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %conv, %union.gimple_statement_d** nonnull %stmt) #7, !dbg !9075
  %tobool4 = icmp eq i32 %call, 0, !dbg !9073
  br i1 %tobool4, label %for.end, label %for.body, !dbg !9073

for.body:                                         ; preds = %cond.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !9078
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %3, metadata !9066, metadata !DIExpression()), !dbg !9067
  call fastcc void @copy_debug_stmt(%union.gimple_statement_d* %3, %struct.copy_body_data* %id) #7, !dbg !9079
  %inc = add i64 %i.0, 1, !dbg !9080
  call void @llvm.dbg.value(metadata i64 %inc, metadata !9065, metadata !DIExpression()), !dbg !9067
  %.pre = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %debug_stmts, align 8, !dbg !9075
  br label %for.cond, !dbg !9081, !llvm.loop !9082

for.end:                                          ; preds = %cond.end
  call fastcc void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** nonnull %debug_stmts) #7, !dbg !9084
  br label %cleanup, !dbg !9085

cleanup:                                          ; preds = %entry, %for.end
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !9085
  ret void, !dbg !9085
}

declare dso_local %struct.pointer_map_t* @duplicate_eh_regions(%struct.function*, %struct.eh_region_d*, i32, %union.tree_node* (%union.tree_node*, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @remap_decl_1(%union.tree_node* %decl, i8* %data) #5 !dbg !9086 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !9090, metadata !DIExpression()), !dbg !9092
  call void @llvm.dbg.value(metadata i8* %data, metadata !9091, metadata !DIExpression()), !dbg !9092
  %0 = bitcast i8* %data to %struct.copy_body_data*, !dbg !9093
  %call = tail call %union.tree_node* @remap_decl(%union.tree_node* %decl, %struct.copy_body_data* %0) #7, !dbg !9094
  ret %union.tree_node* %call, !dbg !9095
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.basic_block_def* @copy_bb(%struct.copy_body_data* %id, %struct.basic_block_def* %bb, i32 %frequency_scale, i64 %count_scale) unnamed_addr #5 !dbg !9096 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %copy_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %seq_gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp8 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp38 = alloca %struct.gimple_stmt_iterator, align 8
  %argarray = alloca %struct.VEC_tree_heap*, align 8
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  %tmp299 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !9100, metadata !DIExpression()), !dbg !9160
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !9101, metadata !DIExpression()), !dbg !9160
  call void @llvm.dbg.value(metadata i32 %frequency_scale, metadata !9102, metadata !DIExpression()), !dbg !9160
  call void @llvm.dbg.value(metadata i64 %count_scale, metadata !9103, metadata !DIExpression()), !dbg !9160
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !9161
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !9161
  %1 = bitcast %struct.gimple_stmt_iterator* %copy_gsi to i8*, !dbg !9161
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !9161
  %2 = bitcast %struct.gimple_stmt_iterator* %seq_gsi to i8*, !dbg !9161
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #8, !dbg !9161
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 5, !dbg !9162
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !9162
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i64 0, i32 2, !dbg !9163
  %4 = bitcast i8** %aux to %struct.basic_block_def**, !dbg !9163
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8, !dbg !9163
  %call = tail call %struct.basic_block_def* @create_basic_block(i8* null, i8* null, %struct.basic_block_def* %5) #6, !dbg !9164
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call, metadata !9107, metadata !DIExpression()), !dbg !9160
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 8, !dbg !9165
  %6 = load i64, i64* %count, align 8, !dbg !9165
  %mul = mul nsw i64 %6, %count_scale, !dbg !9166
  %div = sdiv i64 %mul, 10000, !dbg !9167
  %count1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i64 0, i32 8, !dbg !9168
  store i64 %div, i64* %count1, align 8, !dbg !9169
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 11, !dbg !9170
  %7 = load i32, i32* %frequency, align 8, !dbg !9170
  %conv = sext i32 %7 to i64, !dbg !9171
  %conv2 = sext i32 %frequency_scale to i64, !dbg !9172
  %mul3 = mul nsw i64 %conv, %conv2, !dbg !9173
  %div4 = sdiv i64 %mul3, 10000, !dbg !9174
  call void @llvm.dbg.value(metadata i64 %div4, metadata !9109, metadata !DIExpression()), !dbg !9160
  %8 = icmp slt i64 %div4, 10000, !dbg !9175
  %spec.select = select i1 %8, i64 %div4, i64 10000, !dbg !9175
  call void @llvm.dbg.value(metadata i64 %spec.select, metadata !9109, metadata !DIExpression()), !dbg !9160
  %conv6 = trunc i64 %spec.select to i32, !dbg !9176
  %frequency7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i64 0, i32 11, !dbg !9177
  store i32 %conv6, i32* %frequency7, align 8, !dbg !9178
  %9 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9179
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8, !dbg !9179
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %call) #7, !dbg !9179
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %9, i64 24, i1 false), !dbg !9179
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8, !dbg !9179
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp8 to i8*, !dbg !9180
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #8, !dbg !9180
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp8, %struct.basic_block_def* %bb) #7, !dbg !9180
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %10, i64 24, i1 false), !dbg !9180
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #8, !dbg !9180
  %regimplify = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 15, !dbg !9181
  %src_cfun = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 4, !dbg !9181
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp38 to i8*, !dbg !9182
  %gimple_call = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 9, !dbg !9184
  %12 = bitcast %struct.VEC_tree_heap** %argarray to i8*, !dbg !9185
  %13 = bitcast %struct.copy_body_data* %id to %struct.tree_decl_non_common**, !dbg !9186
  %statements_to_fold = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 19, !dbg !9188
  %transform_call_graph_edges = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 12, !dbg !9190
  %dst_node180 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 3, !dbg !9191
  %src_node = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 2, !dbg !9191
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 9, !dbg !9192
  %loop_depth = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 10, !dbg !9195
  %eh_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 11, !dbg !9197
  %eh_lp_nr = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 10, !dbg !9197
  %14 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %i, i64 0, i32 0, !dbg !9198
  %15 = bitcast %struct.gimple_stmt_iterator* %tmp299 to i8*, !dbg !9181
  br label %for.cond, !dbg !9199

for.cond:                                         ; preds = %cleanup, %entry
  %edge.0 = phi %struct.cgraph_edge* [ undef, %entry ], [ %edge.5, %cleanup ]
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %edge.0, metadata !9133, metadata !DIExpression()), !dbg !9190
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !9104, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  %call9 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !9200
  %tobool = icmp eq i8 %call9, 0, !dbg !9201
  br i1 %tobool, label %for.body, label %for.end302, !dbg !9202

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !9104, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  %call10 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #7, !dbg !9203
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call10, metadata !9110, metadata !DIExpression()), !dbg !9181
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call10, metadata !9114, metadata !DIExpression()), !dbg !9181
  store i8 0, i8* %regimplify, align 2, !dbg !9204
  %call11 = call fastcc %union.gimple_statement_d* @remap_gimple_stmt(%union.gimple_statement_d* %call10, %struct.copy_body_data* %id) #7, !dbg !9205
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call11, metadata !9110, metadata !DIExpression()), !dbg !9181
  %call12 = call fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %call11) #7, !dbg !9206
  %tobool13 = icmp eq i8 %call12, 0, !dbg !9206
  br i1 %tobool13, label %if.end15, label %cleanup, !dbg !9208

if.end15:                                         ; preds = %for.body
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9209
  %17 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !9210
  call void @gimple_duplicate_stmt_histograms(%struct.function* %16, %union.gimple_statement_d* %call11, %struct.function* %17, %union.gimple_statement_d* %call10) #6, !dbg !9211
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !9212
  %call16 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %call11) #7, !dbg !9213
  %tobool18 = icmp eq i8 %call16, 0, !dbg !9213
  br i1 %tobool18, label %if.end30, label %land.lhs.true, !dbg !9214

land.lhs.true:                                    ; preds = %if.end15
  %call19 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %call11) #7, !dbg !9215
  %cmp20 = icmp eq i32 %call19, 116, !dbg !9216
  br i1 %cmp20, label %land.lhs.true22, label %if.end30, !dbg !9217

land.lhs.true22:                                  ; preds = %land.lhs.true
  %call23 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call11) #7, !dbg !9218
  %call24 = call zeroext i8 @is_gimple_val(%union.tree_node* %call23) #6, !dbg !9219
  %tobool25 = icmp eq i8 %call24, 0, !dbg !9219
  br i1 %tobool25, label %if.then26, label %if.end30, !dbg !9220

if.then26:                                        ; preds = %land.lhs.true22
  %call27 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call11) #7, !dbg !9221
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %seq_gsi, metadata !9106, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  %call28 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* nonnull %seq_gsi, %union.tree_node* %call27, i8 zeroext 1, %union.tree_node* null, i8 zeroext 0, i32 0) #6, !dbg !9222
  call void @llvm.dbg.value(metadata %union.tree_node* %call28, metadata !9115, metadata !DIExpression()), !dbg !9223
  call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %call11, %union.tree_node* %call28) #7, !dbg !9224
  store i8 0, i8* %regimplify, align 2, !dbg !9225
  br label %if.end30, !dbg !9226

if.end30:                                         ; preds = %land.lhs.true22, %if.end15, %if.then26, %land.lhs.true
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %seq_gsi, metadata !9106, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %seq_gsi, %union.gimple_statement_d* %call11, i32 0) #6, !dbg !9227
  %18 = load i8, i8* %regimplify, align 2, !dbg !9228
  %tobool32 = icmp eq i8 %18, 0, !dbg !9230
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !9231

if.then33:                                        ; preds = %if.end30
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %seq_gsi, metadata !9106, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  call void @gimple_regimplify_operands(%union.gimple_statement_d* %call11, %struct.gimple_stmt_iterator* nonnull %seq_gsi) #6, !dbg !9232
  br label %if.end34, !dbg !9232

if.end34:                                         ; preds = %if.end30, %if.then33
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %copy_gsi, metadata !9105, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  %call35 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %copy_gsi) #7, !dbg !9233
  %tobool36 = icmp eq i8 %call35, 0, !dbg !9233
  br i1 %tobool36, label %if.else, label %if.then37, !dbg !9234

if.then37:                                        ; preds = %if.end34
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #8, !dbg !9235
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp38, %struct.basic_block_def* %call) #7, !dbg !9235
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %11, i64 24, i1 false), !dbg !9235
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #8, !dbg !9235
  br label %if.end39, !dbg !9236

if.else:                                          ; preds = %if.end34
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %copy_gsi, metadata !9105, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %copy_gsi) #7, !dbg !9237
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then37
  br label %do.body, !dbg !9238

do.body:                                          ; preds = %if.end295, %if.end39
  %edge.1 = phi %struct.cgraph_edge* [ %edge.0, %if.end39 ], [ %edge.4, %if.end295 ]
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %edge.1, metadata !9133, metadata !DIExpression()), !dbg !9190
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %copy_gsi, metadata !9105, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  %call40 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %copy_gsi) #7, !dbg !9239
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call40, metadata !9110, metadata !DIExpression()), !dbg !9181
  %call41 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %call40) #7, !dbg !9240
  %tobool43 = icmp eq i8 %call41, 0, !dbg !9240
  br i1 %tobool43, label %if.else91, label %land.lhs.true44, !dbg !9241

land.lhs.true44:                                  ; preds = %do.body
  %call45 = call fastcc zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %call40) #7, !dbg !9242
  %tobool47 = icmp eq i8 %call45, 0, !dbg !9242
  br i1 %tobool47, label %if.else91, label %land.lhs.true48, !dbg !9243

land.lhs.true48:                                  ; preds = %land.lhs.true44
  %19 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call, align 8, !dbg !9244
  %tobool49 = icmp eq %union.gimple_statement_d* %19, null, !dbg !9245
  br i1 %tobool49, label %if.else91, label %if.then50, !dbg !9246

if.then50:                                        ; preds = %land.lhs.true48
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #8, !dbg !9247
  %call52 = call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* nonnull %19) #7, !dbg !9248
  %conv53 = zext i32 %call52 to i64, !dbg !9248
  call void @llvm.dbg.value(metadata i64 %conv53, metadata !9125, metadata !DIExpression()), !dbg !9185
  %20 = load %struct.tree_decl_non_common*, %struct.tree_decl_non_common** %13, align 8, !dbg !9249
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %20, i64 0, i32 2, !dbg !9249
  br label %for.cond54, !dbg !9250

for.cond54:                                       ; preds = %for.body56, %if.then50
  %p.0.in = phi %union.tree_node** [ %arguments, %if.then50 ], [ %chain, %for.body56 ]
  %nargs.0 = phi i64 [ %conv53, %if.then50 ], [ %dec, %for.body56 ], !dbg !9185
  %p.0 = load %union.tree_node*, %union.tree_node** %p.0.in, align 8, !dbg !9186
  call void @llvm.dbg.value(metadata i64 %nargs.0, metadata !9125, metadata !DIExpression()), !dbg !9185
  call void @llvm.dbg.value(metadata %union.tree_node* %p.0, metadata !9120, metadata !DIExpression()), !dbg !9185
  %tobool55 = icmp eq %union.tree_node* %p.0, null, !dbg !9251
  br i1 %tobool55, label %for.end, label %for.body56, !dbg !9251

for.body56:                                       ; preds = %for.cond54
  %dec = add i64 %nargs.0, -1, !dbg !9252
  call void @llvm.dbg.value(metadata i64 %dec, metadata !9125, metadata !DIExpression()), !dbg !9185
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %p.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !9254
  br label %for.cond54, !dbg !9255, !llvm.loop !9256

for.end:                                          ; preds = %for.cond54
  %nargs.0.lcssa = phi i64 [ %nargs.0, %for.cond54 ], !dbg !9185
  call void @llvm.dbg.value(metadata i64 %nargs.0.lcssa, metadata !9125, metadata !DIExpression()), !dbg !9185
  call void @llvm.dbg.value(metadata i64 %nargs.0.lcssa, metadata !9125, metadata !DIExpression()), !dbg !9185
  call void @llvm.dbg.value(metadata i64 %nargs.0.lcssa, metadata !9125, metadata !DIExpression()), !dbg !9185
  %call57 = call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %call40) #7, !dbg !9258
  %21 = trunc i64 %nargs.0.lcssa to i32, !dbg !9259
  %conv59 = add i32 %call57, %21, !dbg !9259
  %call60 = call fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %conv59) #7, !dbg !9259
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %call60, metadata !9124, metadata !DIExpression()), !dbg !9185
  store %struct.VEC_tree_heap* %call60, %struct.VEC_tree_heap** %argarray, align 8, !dbg !9260
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %argarray, metadata !9124, metadata !DIExpression(DW_OP_deref)), !dbg !9185
  call fastcc void @VEC_tree_heap_safe_grow(%struct.VEC_tree_heap** nonnull %argarray, i32 %conv59) #7, !dbg !9261
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %argarray, align 8, !dbg !9262
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %22, metadata !9124, metadata !DIExpression()), !dbg !9185
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %22, metadata !9124, metadata !DIExpression()), !dbg !9185
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %22, i64 0, i32 0, !dbg !9262
  %call63 = call fastcc %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %base) #7, !dbg !9262
  %23 = bitcast %union.tree_node** %call63 to i8*, !dbg !9262
  %call64 = call fastcc %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %call40, i32 0) #7, !dbg !9263
  %24 = bitcast %union.tree_node** %call64 to i8*, !dbg !9263
  %call65 = call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %call40) #7, !dbg !9264
  %conv66 = zext i32 %call65 to i64, !dbg !9264
  %mul67 = shl nuw nsw i64 %conv66, 3, !dbg !9265
  %call68 = call i8* @memcpy(i8* %23, i8* %24, i64 %mul67) #6, !dbg !9266
  %25 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %argarray, align 8, !dbg !9267
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %25, metadata !9124, metadata !DIExpression()), !dbg !9185
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %25, metadata !9124, metadata !DIExpression()), !dbg !9185
  %base71 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %25, i64 0, i32 0, !dbg !9267
  %call75 = call fastcc %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %base71) #7, !dbg !9267
  %call76 = call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %call40) #7, !dbg !9268
  %idx.ext = zext i32 %call76 to i64, !dbg !9269
  %add.ptr77 = getelementptr inbounds %union.tree_node*, %union.tree_node** %call75, i64 %idx.ext, !dbg !9269
  %26 = bitcast %union.tree_node** %add.ptr77 to i8*, !dbg !9267
  %27 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call, align 8, !dbg !9270
  %call79 = call fastcc %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %27, i32 0) #7, !dbg !9271
  %28 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call, align 8, !dbg !9272
  %call81 = call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %28) #7, !dbg !9273
  %conv82 = zext i32 %call81 to i64, !dbg !9273
  %sub = sub i64 %conv82, %nargs.0.lcssa, !dbg !9274
  %add.ptr83 = getelementptr inbounds %union.tree_node*, %union.tree_node** %call79, i64 %sub, !dbg !9275
  %29 = bitcast %union.tree_node** %add.ptr83 to i8*, !dbg !9271
  %mul84 = shl i64 %nargs.0.lcssa, 3, !dbg !9276
  %call85 = call i8* @memcpy(i8* %26, i8* %29, i64 %mul84) #6, !dbg !9277
  %call86 = call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %call40) #7, !dbg !9278
  %30 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %argarray, align 8, !dbg !9279
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %30, metadata !9124, metadata !DIExpression()), !dbg !9185
  %call87 = call %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %call86, %struct.VEC_tree_heap* %30) #6, !dbg !9280
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call87, metadata !9123, metadata !DIExpression()), !dbg !9185
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %argarray, metadata !9124, metadata !DIExpression(DW_OP_deref)), !dbg !9185
  call fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** nonnull %argarray) #7, !dbg !9281
  call fastcc void @gimple_call_copy_flags(%union.gimple_statement_d* %call87, %union.gimple_statement_d* %call40) #7, !dbg !9282
  call fastcc void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %call87, i8 zeroext 0) #7, !dbg !9283
  %call88 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %call40) #7, !dbg !9284
  call fastcc void @gimple_set_location(%union.gimple_statement_d* %call87, i32 %call88) #7, !dbg !9285
  %call89 = call fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* %call40) #7, !dbg !9286
  call fastcc void @gimple_set_block(%union.gimple_statement_d* %call87, %union.tree_node* %call89) #7, !dbg !9287
  %call90 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %call40) #7, !dbg !9288
  call fastcc void @gimple_call_set_lhs(%union.gimple_statement_d* %call87, %union.tree_node* %call90) #7, !dbg !9289
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %copy_gsi, metadata !9105, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  call void @gsi_replace(%struct.gimple_stmt_iterator* nonnull %copy_gsi, %union.gimple_statement_d* %call87, i8 zeroext 0) #6, !dbg !9290
  call void @gimple_set_bb(%union.gimple_statement_d* %call40, %struct.basic_block_def* null) #6, !dbg !9291
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call87, metadata !9110, metadata !DIExpression()), !dbg !9181
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #8, !dbg !9292
  br label %if.end132, !dbg !9293

if.else91:                                        ; preds = %land.lhs.true48, %land.lhs.true44, %do.body
  %call92 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %call40) #7, !dbg !9294
  %tobool94 = icmp eq i8 %call92, 0, !dbg !9294
  br i1 %tobool94, label %if.end132, label %land.lhs.true95, !dbg !9295

land.lhs.true95:                                  ; preds = %if.else91
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call, align 8, !dbg !9296
  %tobool97 = icmp eq %union.gimple_statement_d* %31, null, !dbg !9297
  br i1 %tobool97, label %if.end132, label %land.lhs.true98, !dbg !9298

land.lhs.true98:                                  ; preds = %land.lhs.true95
  %call99 = call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %call40) #7, !dbg !9299
  call void @llvm.dbg.value(metadata %union.tree_node* %call99, metadata !9108, metadata !DIExpression()), !dbg !9160
  %tobool100 = icmp eq %union.tree_node* %call99, null, !dbg !9300
  br i1 %tobool100, label %if.end132, label %land.lhs.true101, !dbg !9301

land.lhs.true101:                                 ; preds = %land.lhs.true98
  %built_in_class = getelementptr inbounds %union.tree_node, %union.tree_node* %call99, i64 0, i32 0, i32 5, !dbg !9302
  %bf.load = load i32, i32* %built_in_class, align 8, !dbg !9302
  %bf.clear = and i32 %bf.load, 6144, !dbg !9302
  %cmp102 = icmp eq i32 %bf.clear, 6144, !dbg !9303
  br i1 %cmp102, label %land.lhs.true104, label %if.end132, !dbg !9304

land.lhs.true104:                                 ; preds = %land.lhs.true101
  %bf.clear107 = and i32 %bf.load, 2047, !dbg !9305
  %cmp108 = icmp eq i32 %bf.clear107, 517, !dbg !9306
  br i1 %cmp108, label %if.then110, label %if.end132, !dbg !9307

if.then110:                                       ; preds = %land.lhs.true104
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gimple_call, align 8, !dbg !9308
  %call113 = call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %32) #7, !dbg !9309
  %conv114 = zext i32 %call113 to i64, !dbg !9309
  call void @llvm.dbg.value(metadata i64 %conv114, metadata !9127, metadata !DIExpression()), !dbg !9310
  %33 = load %struct.tree_decl_non_common*, %struct.tree_decl_non_common** %13, align 8, !dbg !9311
  %arguments119 = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %33, i64 0, i32 2, !dbg !9311
  br label %for.cond120, !dbg !9313

for.cond120:                                      ; preds = %for.body122, %if.then110
  %nargs111.0 = phi i64 [ %conv114, %if.then110 ], [ %dec123, %for.body122 ], !dbg !9310
  %p116.0.in = phi %union.tree_node** [ %arguments119, %if.then110 ], [ %chain126, %for.body122 ]
  %p116.0 = load %union.tree_node*, %union.tree_node** %p116.0.in, align 8, !dbg !9314
  call void @llvm.dbg.value(metadata %union.tree_node* %p116.0, metadata !9131, metadata !DIExpression()), !dbg !9310
  call void @llvm.dbg.value(metadata i64 %nargs111.0, metadata !9127, metadata !DIExpression()), !dbg !9310
  %tobool121 = icmp eq %union.tree_node* %p116.0, null, !dbg !9315
  br i1 %tobool121, label %for.end127, label %for.body122, !dbg !9315

for.body122:                                      ; preds = %for.cond120
  %dec123 = add i64 %nargs111.0, -1, !dbg !9316
  call void @llvm.dbg.value(metadata i64 %dec123, metadata !9127, metadata !DIExpression()), !dbg !9310
  %chain126 = getelementptr inbounds %union.tree_node, %union.tree_node* %p116.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !9318
  br label %for.cond120, !dbg !9319, !llvm.loop !9320

for.end127:                                       ; preds = %for.cond120
  %nargs111.0.lcssa = phi i64 [ %nargs111.0, %for.cond120 ], !dbg !9310
  call void @llvm.dbg.value(metadata i64 %nargs111.0.lcssa, metadata !9127, metadata !DIExpression()), !dbg !9310
  call void @llvm.dbg.value(metadata i64 %nargs111.0.lcssa, metadata !9127, metadata !DIExpression()), !dbg !9310
  call void @llvm.dbg.value(metadata i64 %nargs111.0.lcssa, metadata !9127, metadata !DIExpression()), !dbg !9310
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !9322
  %call128 = call %union.tree_node* @build_int_cst(%union.tree_node* %34, i64 %nargs111.0.lcssa) #6, !dbg !9323
  call void @llvm.dbg.value(metadata %union.tree_node* %call128, metadata !9130, metadata !DIExpression()), !dbg !9310
  %call129 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %call40) #7, !dbg !9324
  %call130 = call %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %call129, %union.tree_node* %call128) #6, !dbg !9324
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call130, metadata !9132, metadata !DIExpression()), !dbg !9310
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %copy_gsi, metadata !9105, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  call void @gsi_replace(%struct.gimple_stmt_iterator* nonnull %copy_gsi, %union.gimple_statement_d* %call130, i8 zeroext 0) #6, !dbg !9325
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call130, metadata !9110, metadata !DIExpression()), !dbg !9181
  br label %if.end132, !dbg !9326

if.end132:                                        ; preds = %land.lhs.true98, %land.lhs.true95, %if.else91, %land.lhs.true101, %land.lhs.true104, %for.end127, %for.end
  %stmt.1 = phi %union.gimple_statement_d* [ %call87, %for.end ], [ %call130, %for.end127 ], [ %call40, %land.lhs.true104 ], [ %call40, %land.lhs.true101 ], [ %call40, %land.lhs.true98 ], [ %call40, %land.lhs.true95 ], [ %call40, %if.else91 ], !dbg !9184
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt.1, metadata !9110, metadata !DIExpression()), !dbg !9181
  %35 = load %struct.pointer_set_t*, %struct.pointer_set_t** %statements_to_fold, align 8, !dbg !9327
  %tobool133 = icmp eq %struct.pointer_set_t* %35, null, !dbg !9328
  br i1 %tobool133, label %if.end137, label %if.then134, !dbg !9329

if.then134:                                       ; preds = %if.end132
  %36 = bitcast %union.gimple_statement_d* %stmt.1 to i8*, !dbg !9330
  %call136 = call i32 @pointer_set_insert(%struct.pointer_set_t* nonnull %35, i8* %36) #6, !dbg !9331
  br label %if.end137, !dbg !9331

if.end137:                                        ; preds = %if.end132, %if.then134
  %call138 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %stmt.1) #7, !dbg !9332
  %tobool139 = icmp eq i8 %call138, 0, !dbg !9332
  br i1 %tobool139, label %if.end265, label %if.then140, !dbg !9333

if.then140:                                       ; preds = %if.end137
  %37 = load i32, i32* %transform_call_graph_edges, align 8, !dbg !9334
  switch i32 %37, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb175
    i32 1, label %sw.bb179
  ], !dbg !9335

sw.bb:                                            ; preds = %if.then140
  %38 = load %struct.cgraph_node*, %struct.cgraph_node** %src_node, align 8, !dbg !9336
  %call141 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %38, %union.gimple_statement_d* %call10) #6, !dbg !9337
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %call141, metadata !9133, metadata !DIExpression()), !dbg !9190
  %tobool142 = icmp eq %struct.cgraph_edge* %call141, null, !dbg !9338
  br i1 %tobool142, label %sw.epilog, label %if.then143, !dbg !9339

if.then143:                                       ; preds = %sw.bb
  %frequency144 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call141, i64 0, i32 11, !dbg !9340
  %39 = load i32, i32* %frequency144, align 8, !dbg !9340
  call void @llvm.dbg.value(metadata i32 %39, metadata !9137, metadata !DIExpression()), !dbg !9341
  %40 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node180, align 8, !dbg !9342
  %call145 = call fastcc i32 @gimple_uid(%union.gimple_statement_d* %stmt.1) #7, !dbg !9343
  %41 = load i32, i32* %frequency144, align 8, !dbg !9344
  %call147 = call %struct.cgraph_edge* @cgraph_clone_edge(%struct.cgraph_edge* nonnull %call141, %struct.cgraph_node* %40, %union.gimple_statement_d* %stmt.1, i32 %call145, i64 10000, i32 1000, i32 %41, i8 zeroext 1) #6, !dbg !9345
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %call147, metadata !9133, metadata !DIExpression()), !dbg !9190
  %42 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node180, align 8, !dbg !9346
  %decl149 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %42, i64 0, i32 0, !dbg !9347
  %43 = load %union.tree_node*, %union.tree_node** %decl149, align 8, !dbg !9347
  %call150 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %43, %struct.basic_block_def* %call) #6, !dbg !9348
  %frequency151 = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call147, i64 0, i32 11, !dbg !9349
  store i32 %call150, i32* %frequency151, align 8, !dbg !9350
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9351
  %tobool152 = icmp eq %struct._IO_FILE* %44, null, !dbg !9351
  br i1 %tobool152, label %if.end172, label %land.lhs.true153, !dbg !9352

land.lhs.true153:                                 ; preds = %if.then143
  %45 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9353
  %cfg = getelementptr inbounds %struct.function, %struct.function* %45, i64 0, i32 1, !dbg !9353
  %46 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9353
  %x_profile_status = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %46, i64 0, i32 7, !dbg !9353
  %47 = load i32, i32* %x_profile_status, align 8, !dbg !9353
  %cmp155 = icmp eq i32 %47, 0, !dbg !9354
  br i1 %cmp155, label %if.end172, label %land.lhs.true157, !dbg !9355

land.lhs.true157:                                 ; preds = %land.lhs.true153
  %add159 = add nsw i32 %call150, 10, !dbg !9356
  %cmp160 = icmp sgt i32 %39, %add159, !dbg !9357
  br i1 %cmp160, label %if.then166, label %lor.lhs.false, !dbg !9358

lor.lhs.false:                                    ; preds = %land.lhs.true157
  %sub163 = add nsw i32 %call150, -10, !dbg !9359
  %cmp164 = icmp slt i32 %39, %sub163, !dbg !9360
  br i1 %cmp164, label %if.then166, label %if.end172, !dbg !9361

if.then166:                                       ; preds = %lor.lhs.false, %land.lhs.true157
  %call168 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %44, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.24, i64 0, i64 0), i32 %39, i32 %call150) #6, !dbg !9362
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9363
  %49 = load i32, i32* %index, align 8, !dbg !9364
  %50 = load i32, i32* %frequency, align 8, !dbg !9365
  %51 = load i32, i32* %frequency7, align 8, !dbg !9366
  %call171 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.25, i64 0, i64 0), i32 %49, i32 %50, i32 %51) #6, !dbg !9367
  br label %if.end172, !dbg !9368

if.end172:                                        ; preds = %land.lhs.true153, %if.then143, %if.then166, %lor.lhs.false
  %call173 = call %union.gimple_statement_d* @cgraph_redirect_edge_call_stmt_to_callee(%struct.cgraph_edge* %call147) #6, !dbg !9369
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call173, metadata !9110, metadata !DIExpression()), !dbg !9181
  br label %sw.epilog, !dbg !9370

sw.bb175:                                         ; preds = %if.then140
  %52 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node180, align 8, !dbg !9371
  call void @cgraph_set_call_stmt_including_clones(%struct.cgraph_node* %52, %union.gimple_statement_d* %call10, %union.gimple_statement_d* %stmt.1) #6, !dbg !9372
  %53 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node180, align 8, !dbg !9373
  %call178 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %53, %union.gimple_statement_d* %stmt.1) #6, !dbg !9374
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %call178, metadata !9133, metadata !DIExpression()), !dbg !9190
  br label %sw.epilog, !dbg !9375

sw.bb179:                                         ; preds = %if.then140
  %54 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node180, align 8, !dbg !9376
  %call181 = call %struct.cgraph_edge* @cgraph_edge(%struct.cgraph_node* %54, %union.gimple_statement_d* %call10) #6, !dbg !9377
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %call181, metadata !9133, metadata !DIExpression()), !dbg !9190
  %tobool182 = icmp eq %struct.cgraph_edge* %call181, null, !dbg !9378
  br i1 %tobool182, label %sw.epilog, label %if.then183, !dbg !9380

if.then183:                                       ; preds = %sw.bb179
  call void @cgraph_set_call_stmt(%struct.cgraph_edge* nonnull %call181, %union.gimple_statement_d* %stmt.1) #6, !dbg !9381
  br label %sw.epilog, !dbg !9381

sw.default:                                       ; preds = %if.then140
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1670, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !9382
  br label %sw.epilog, !dbg !9383

sw.epilog:                                        ; preds = %sw.bb, %sw.bb179, %if.then183, %if.end172, %sw.default, %sw.bb175
  %stmt.3 = phi %union.gimple_statement_d* [ %stmt.1, %sw.default ], [ %stmt.1, %sw.bb175 ], [ %call173, %if.end172 ], [ %stmt.1, %sw.bb ], [ %stmt.1, %if.then183 ], [ %stmt.1, %sw.bb179 ], !dbg !9197
  %edge.3 = phi %struct.cgraph_edge* [ %edge.1, %sw.default ], [ %call178, %sw.bb175 ], [ %call147, %if.end172 ], [ null, %sw.bb ], [ %call181, %if.then183 ], [ null, %sw.bb179 ]
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %edge.3, metadata !9133, metadata !DIExpression()), !dbg !9190
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt.3, metadata !9110, metadata !DIExpression()), !dbg !9181
  %tobool185 = icmp eq %struct.cgraph_edge* %edge.3, null, !dbg !9384
  br i1 %tobool185, label %land.lhs.true194, label %lor.lhs.false186, !dbg !9385

lor.lhs.false186:                                 ; preds = %sw.epilog
  %indirect_call = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %edge.3, i64 0, i32 14, !dbg !9386
  %bf.load187 = load i8, i8* %indirect_call, align 2, !dbg !9386
  %bf.clear188 = and i8 %bf.load187, 1, !dbg !9386
  %tobool189 = icmp eq i8 %bf.clear188, 0, !dbg !9387
  br i1 %tobool189, label %if.end249, label %land.lhs.true190, !dbg !9388

land.lhs.true190:                                 ; preds = %lor.lhs.false186
  %55 = load i32, i32* %transform_call_graph_edges, align 8, !dbg !9389
  %cmp192 = icmp eq i32 %55, 2, !dbg !9390
  br i1 %cmp192, label %land.lhs.true194, label %if.end249, !dbg !9391

land.lhs.true194:                                 ; preds = %sw.epilog, %land.lhs.true190
  %call195 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %stmt.3) #7, !dbg !9392
  %tobool197 = icmp eq i8 %call195, 0, !dbg !9392
  br i1 %tobool197, label %if.end249, label %land.lhs.true198, !dbg !9393

land.lhs.true198:                                 ; preds = %land.lhs.true194
  %call199 = call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %stmt.3) #7, !dbg !9394
  call void @llvm.dbg.value(metadata %union.tree_node* %call199, metadata !9118, metadata !DIExpression()), !dbg !9197
  %cmp200 = icmp eq %union.tree_node* %call199, null, !dbg !9395
  br i1 %cmp200, label %if.end249, label %if.then202, !dbg !9396

if.then202:                                       ; preds = %land.lhs.true198
  %call203 = call %struct.cgraph_node* @cgraph_node(%union.tree_node* nonnull %call199) #6, !dbg !9397
  call void @llvm.dbg.value(metadata %struct.cgraph_node* %call203, metadata !9141, metadata !DIExpression()), !dbg !9398
  %needed = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %call203, i64 0, i32 27, !dbg !9399
  %bf.load204 = load i16, i16* %needed, align 4, !dbg !9399
  %bf.clear205 = and i16 %bf.load204, 1, !dbg !9399
  %tobool207 = icmp eq i16 %bf.clear205, 0, !dbg !9399
  br i1 %tobool207, label %lor.lhs.false208, label %cond.end224, !dbg !9399

lor.lhs.false208:                                 ; preds = %if.then202
  %bf.clear211 = and i16 %bf.load204, 32, !dbg !9399
  %tobool213 = icmp eq i16 %bf.clear211, 0, !dbg !9399
  br i1 %tobool213, label %cond.end224, label %lor.lhs.false214, !dbg !9399

lor.lhs.false214:                                 ; preds = %lor.lhs.false208
  %56 = load %struct.cgraph_node*, %struct.cgraph_node** %src_node, align 8, !dbg !9399
  %analyzed216 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %56, i64 0, i32 27, !dbg !9399
  %bf.load217 = load i16, i16* %analyzed216, align 4, !dbg !9399
  %bf.clear219 = and i16 %bf.load217, 32, !dbg !9399
  %tobool221 = icmp eq i16 %bf.clear219, 0, !dbg !9399
  br i1 %tobool221, label %cond.end224, label %cond.true222, !dbg !9399

cond.true222:                                     ; preds = %lor.lhs.false214
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1690, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !9399
  br label %cond.end224, !dbg !9399

cond.end224:                                      ; preds = %lor.lhs.false214, %lor.lhs.false208, %if.then202, %cond.true222
  %57 = load i32, i32* %transform_call_graph_edges, align 8, !dbg !9400
  %cmp227 = icmp eq i32 %57, 2, !dbg !9401
  %58 = load %struct.cgraph_node*, %struct.cgraph_node** %dst_node180, align 8, !dbg !9195
  %59 = load i64, i64* %count, align 8, !dbg !9195
  %decl233 = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %58, i64 0, i32 0, !dbg !9195
  %60 = load %union.tree_node*, %union.tree_node** %decl233, align 8, !dbg !9195
  %call234 = call i32 @compute_call_stmt_bb_frequency(%union.tree_node* %60, %struct.basic_block_def* %call) #6, !dbg !9195
  %61 = load i32, i32* %loop_depth, align 4, !dbg !9195
  br i1 %cmp227, label %if.then229, label %if.else235, !dbg !9402

if.then229:                                       ; preds = %cond.end224
  call void @cgraph_create_edge_including_clones(%struct.cgraph_node* %58, %struct.cgraph_node* %call203, %union.gimple_statement_d* %call10, %union.gimple_statement_d* %stmt.3, i64 %59, i32 %call234, i32 %61, i32 18) #6, !dbg !9403
  br label %if.end243, !dbg !9403

if.else235:                                       ; preds = %cond.end224
  %call242 = call %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node* %58, %struct.cgraph_node* %call203, %union.gimple_statement_d* %stmt.3, i64 %59, i32 %call234, i32 %61) #6, !dbg !9404
  %inline_failed = getelementptr inbounds %struct.cgraph_edge, %struct.cgraph_edge* %call242, i64 0, i32 9, !dbg !9405
  store i32 18, i32* %inline_failed, align 8, !dbg !9406
  br label %if.end243

if.end243:                                        ; preds = %if.else235, %if.then229
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9407
  %tobool244 = icmp eq %struct._IO_FILE* %62, null, !dbg !9407
  br i1 %tobool244, label %if.end249, label %if.then245, !dbg !9409

if.then245:                                       ; preds = %if.end243
  %call246 = call i8* @cgraph_node_name(%struct.cgraph_node* %call203) #6, !dbg !9410
  %call247 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %62, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.26, i64 0, i64 0), i8* %call246) #6, !dbg !9412
  br label %if.end249, !dbg !9413

if.end249:                                        ; preds = %lor.lhs.false186, %if.end243, %land.lhs.true198, %land.lhs.true194, %if.then245, %land.lhs.true190
  %call250 = call i32 @gimple_call_flags(%union.gimple_statement_d* %stmt.3) #6, !dbg !9414
  call void @llvm.dbg.value(metadata i32 %call250, metadata !9136, metadata !DIExpression()), !dbg !9190
  %and = and i32 %call250, 32, !dbg !9415
  %tobool251 = icmp eq i32 %and, 0, !dbg !9415
  br i1 %tobool251, label %if.end256, label %if.then252, !dbg !9417

if.then252:                                       ; preds = %if.end249
  %63 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9418
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %63, i64 0, i32 20, !dbg !9419
  %bf.load254 = load i32, i32* %calls_alloca, align 8, !dbg !9420
  %bf.set = or i32 %bf.load254, 524288, !dbg !9420
  store i32 %bf.set, i32* %calls_alloca, align 8, !dbg !9420
  br label %if.end256, !dbg !9418

if.end256:                                        ; preds = %if.end249, %if.then252
  %64 = trunc i32 %call250 to i8, !dbg !9421
  %tobool258 = icmp slt i8 %64, 0, !dbg !9421
  br i1 %tobool258, label %if.then259, label %if.end265, !dbg !9423

if.then259:                                       ; preds = %if.end256
  %65 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9424
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %65, i64 0, i32 20, !dbg !9425
  %bf.load261 = load i32, i32* %calls_setjmp, align 8, !dbg !9426
  %bf.set263 = or i32 %bf.load261, 262144, !dbg !9426
  store i32 %bf.set263, i32* %calls_setjmp, align 8, !dbg !9426
  br label %if.end265, !dbg !9424

if.end265:                                        ; preds = %if.end137, %if.end256, %if.then259
  %stmt.4 = phi %union.gimple_statement_d* [ %stmt.1, %if.end137 ], [ %stmt.3, %if.then259 ], [ %stmt.3, %if.end256 ], !dbg !9427
  %edge.4 = phi %struct.cgraph_edge* [ %edge.1, %if.end137 ], [ %edge.3, %if.then259 ], [ %edge.3, %if.end256 ]
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %edge.4, metadata !9133, metadata !DIExpression()), !dbg !9190
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt.4, metadata !9110, metadata !DIExpression()), !dbg !9181
  %66 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9428
  %67 = load %struct.function*, %struct.function** %src_cfun, align 8, !dbg !9429
  %68 = load %struct.pointer_map_t*, %struct.pointer_map_t** %eh_map, align 8, !dbg !9430
  %69 = load i32, i32* %eh_lp_nr, align 8, !dbg !9431
  %call268 = call zeroext i8 @maybe_duplicate_eh_stmt_fn(%struct.function* %66, %union.gimple_statement_d* %stmt.4, %struct.function* %67, %union.gimple_statement_d* %call10, %struct.pointer_map_t* %68, i32 %69) #6, !dbg !9432
  %70 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9433
  %call270 = call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %70) #7, !dbg !9434
  %tobool272 = icmp eq i8 %call270, 0, !dbg !9434
  br i1 %tobool272, label %if.end295, label %land.lhs.true273, !dbg !9435

land.lhs.true273:                                 ; preds = %if.end265
  %call274 = call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %stmt.4) #7, !dbg !9436
  %tobool275 = icmp eq i8 %call274, 0, !dbg !9436
  br i1 %tobool275, label %if.then276, label %if.end295, !dbg !9437

if.then276:                                       ; preds = %land.lhs.true273
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #8, !dbg !9438
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %copy_gsi, metadata !9105, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  %call277 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %copy_gsi) #7, !dbg !9439
  call void @find_new_referenced_vars(%union.gimple_statement_d* %call277) #6, !dbg !9440
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !9144, metadata !DIExpression(DW_OP_deref)), !dbg !9198
  %call278 = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %i, %union.gimple_statement_d* %stmt.4, i32 2) #7, !dbg !9441
  call void @llvm.dbg.value(metadata %union.tree_node* %call278, metadata !9159, metadata !DIExpression()), !dbg !9198
  br label %for.cond279, !dbg !9441

for.cond279:                                      ; preds = %for.inc292, %if.then276
  %def.0 = phi %union.tree_node* [ %call278, %if.then276 ], [ %call293, %for.inc292 ], !dbg !9443
  call void @llvm.dbg.value(metadata %union.tree_node* %def.0, metadata !9159, metadata !DIExpression()), !dbg !9198
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !9144, metadata !DIExpression(DW_OP_deref)), !dbg !9198
  %call280 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %i) #7, !dbg !9444
  %tobool281 = icmp eq i8 %call280, 0, !dbg !9444
  br i1 %tobool281, label %for.body283, label %for.end294, !dbg !9441

for.body283:                                      ; preds = %for.cond279
  %71 = getelementptr inbounds %union.tree_node, %union.tree_node* %def.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9446
  %bf.load285 = load i64, i64* %71, align 8, !dbg !9446
  %bf.cast2871 = and i64 %bf.load285, 65535, !dbg !9448
  %cmp288 = icmp eq i64 %bf.cast2871, 141, !dbg !9448
  br i1 %cmp288, label %if.then290, label %for.inc292, !dbg !9449

if.then290:                                       ; preds = %for.body283
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %def.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !9450
  %72 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !9450
  store %union.gimple_statement_d* %stmt.4, %union.gimple_statement_d** %72, align 8, !dbg !9451
  br label %for.inc292, !dbg !9450

for.inc292:                                       ; preds = %for.body283, %if.then290
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !9144, metadata !DIExpression(DW_OP_deref)), !dbg !9198
  %call293 = call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* nonnull %i) #7, !dbg !9444
  call void @llvm.dbg.value(metadata %union.tree_node* %call293, metadata !9159, metadata !DIExpression()), !dbg !9198
  br label %for.cond279, !dbg !9444, !llvm.loop !9452

for.end294:                                       ; preds = %for.cond279
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %14) #8, !dbg !9454
  br label %if.end295, !dbg !9455

if.end295:                                        ; preds = %land.lhs.true273, %if.end265, %for.end294
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %copy_gsi, metadata !9105, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %copy_gsi) #7, !dbg !9456
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %copy_gsi, metadata !9105, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  %call296 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %copy_gsi) #7, !dbg !9457
  %tobool297 = icmp eq i8 %call296, 0, !dbg !9458
  br i1 %tobool297, label %do.body, label %do.end, !dbg !9459, !llvm.loop !9460

do.end:                                           ; preds = %if.end295
  %edge.4.lcssa = phi %struct.cgraph_edge* [ %edge.4, %if.end295 ]
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %edge.4.lcssa, metadata !9133, metadata !DIExpression()), !dbg !9190
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %edge.4.lcssa, metadata !9133, metadata !DIExpression()), !dbg !9190
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %edge.4.lcssa, metadata !9133, metadata !DIExpression()), !dbg !9190
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #8, !dbg !9462
  call fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp299, %struct.basic_block_def* %call) #7, !dbg !9462
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %15, i64 24, i1 false), !dbg !9462
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #8, !dbg !9462
  br label %cleanup, !dbg !9463

cleanup:                                          ; preds = %for.body, %do.end
  %edge.5 = phi %struct.cgraph_edge* [ %edge.4.lcssa, %do.end ], [ %edge.0, %for.body ]
  call void @llvm.dbg.value(metadata %struct.cgraph_edge* %edge.5, metadata !9133, metadata !DIExpression()), !dbg !9190
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !9104, metadata !DIExpression(DW_OP_deref)), !dbg !9160
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #7, !dbg !9464
  br label %for.cond, !dbg !9465, !llvm.loop !9466

for.end302:                                       ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #8, !dbg !9468
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !9468
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !9468
  ret %struct.basic_block_def* %call, !dbg !9469
}

; Function Attrs: nounwind uwtable
define internal fastcc void @copy_edges_for_bb(%struct.basic_block_def* %bb, i64 %count_scale, %struct.basic_block_def* %ret_bb) unnamed_addr #5 !dbg !9470 {
entry:
  %ei = alloca %struct.edge_iterator, align 8
  %old_edge = alloca %struct.edge_def*, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp24 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp53 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !9474, metadata !DIExpression()), !dbg !9504
  call void @llvm.dbg.value(metadata i64 %count_scale, metadata !9475, metadata !DIExpression()), !dbg !9504
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %ret_bb, metadata !9476, metadata !DIExpression()), !dbg !9504
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 2, !dbg !9505
  %0 = bitcast i8** %aux to %struct.basic_block_def**, !dbg !9505
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %0, align 8, !dbg !9505
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %1, metadata !9477, metadata !DIExpression()), !dbg !9504
  %2 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9506
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !9506
  %3 = bitcast %struct.edge_def** %old_edge to i8*, !dbg !9507
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #8, !dbg !9507
  %4 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !9508
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8, !dbg !9508
  %5 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9509
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8, !dbg !9509
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 1, !dbg !9509
  %call = tail call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** nonnull %succs) #7, !dbg !9509
  %6 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 0, !dbg !9509
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !9509
  store i32 %7, i32* %6, align 8, !dbg !9509
  %8 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 1, !dbg !9509
  %9 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !9509
  store %struct.VEC_edge_gc** %9, %struct.VEC_edge_gc*** %8, align 8, !dbg !9509
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %5, i64 16, i1 false), !dbg !9509
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8, !dbg !9509
  %10 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !9510
  %11 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !9510
  br label %for.cond, !dbg !9509

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i32, i32* %10, align 8, !dbg !9511
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9511
  call void @llvm.dbg.value(metadata %struct.edge_def** %old_edge, metadata !9485, metadata !DIExpression(DW_OP_deref)), !dbg !9504
  %call1 = call fastcc zeroext i8 @ei_cond(i32 %12, %struct.VEC_edge_gc** %13, %struct.edge_def** nonnull %old_edge) #7, !dbg !9511
  %tobool = icmp eq i8 %call1, 0, !dbg !9509
  br i1 %tobool, label %for.end, label %for.body, !dbg !9509

for.body:                                         ; preds = %for.cond
  %14 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !9512
  call void @llvm.dbg.value(metadata %struct.edge_def* %14, metadata !9485, metadata !DIExpression()), !dbg !9504
  %flags2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i64 0, i32 7, !dbg !9513
  %15 = load i32, i32* %flags2, align 8, !dbg !9513
  %and = and i32 %15, 8, !dbg !9514
  %tobool3 = icmp eq i32 %and, 0, !dbg !9514
  br i1 %tobool3, label %if.then, label %for.inc, !dbg !9515

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.edge_def* %14, metadata !9485, metadata !DIExpression()), !dbg !9504
  call void @llvm.dbg.value(metadata i32 %15, metadata !9487, metadata !DIExpression()), !dbg !9504
  call void @llvm.dbg.value(metadata %struct.edge_def* %14, metadata !9485, metadata !DIExpression()), !dbg !9504
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i64 0, i32 1, !dbg !9516
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9516
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i64 0, i32 9, !dbg !9518
  %17 = load i32, i32* %index, align 8, !dbg !9518
  %cmp = icmp eq i32 %17, 1, !dbg !9519
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !9520

land.lhs.true:                                    ; preds = %if.then
  call void @llvm.dbg.value(metadata %struct.edge_def* %14, metadata !9485, metadata !DIExpression()), !dbg !9504
  %tobool6 = icmp eq i32 %15, 0, !dbg !9521
  br i1 %tobool6, label %land.lhs.true7, label %if.end, !dbg !9522

land.lhs.true7:                                   ; preds = %land.lhs.true
  call void @llvm.dbg.value(metadata %struct.edge_def* %14, metadata !9485, metadata !DIExpression()), !dbg !9504
  %aux9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i64 0, i32 2, !dbg !9523
  %18 = load i8*, i8** %aux9, align 8, !dbg !9523
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9524
  %cfg = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, i32 1, !dbg !9524
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9524
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i64 0, i32 1, !dbg !9524
  %21 = bitcast %struct.basic_block_def** %x_exit_block_ptr to i8**, !dbg !9524
  %22 = load i8*, i8** %21, align 8, !dbg !9524
  %cmp10 = icmp ne i8* %18, %22, !dbg !9525
  %or = zext i1 %cmp10 to i32, !dbg !9526
  br label %if.end, !dbg !9526

if.end:                                           ; preds = %land.lhs.true, %land.lhs.true7, %if.then
  %flags.0 = phi i32 [ %15, %land.lhs.true ], [ %15, %if.then ], [ %or, %land.lhs.true7 ], !dbg !9527
  call void @llvm.dbg.value(metadata i32 %flags.0, metadata !9487, metadata !DIExpression()), !dbg !9504
  call void @llvm.dbg.value(metadata %struct.edge_def* %14, metadata !9485, metadata !DIExpression()), !dbg !9504
  %aux13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i64 0, i32 2, !dbg !9528
  %23 = bitcast i8** %aux13 to %struct.basic_block_def**, !dbg !9528
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %23, align 8, !dbg !9528
  %call14 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %1, %struct.basic_block_def* %24, i32 %flags.0) #6, !dbg !9529
  call void @llvm.dbg.value(metadata %struct.edge_def* %call14, metadata !9488, metadata !DIExpression()), !dbg !9527
  %25 = load %struct.edge_def*, %struct.edge_def** %old_edge, align 8, !dbg !9530
  call void @llvm.dbg.value(metadata %struct.edge_def* %25, metadata !9485, metadata !DIExpression()), !dbg !9504
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i64 0, i32 9, !dbg !9531
  %26 = load i64, i64* %count, align 8, !dbg !9531
  %mul = mul nsw i64 %26, %count_scale, !dbg !9532
  %div = sdiv i64 %mul, 10000, !dbg !9533
  %count15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call14, i64 0, i32 9, !dbg !9534
  store i64 %div, i64* %count15, align 8, !dbg !9535
  call void @llvm.dbg.value(metadata %struct.edge_def* %25, metadata !9485, metadata !DIExpression()), !dbg !9504
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i64 0, i32 8, !dbg !9536
  %27 = load i32, i32* %probability, align 4, !dbg !9536
  %probability16 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call14, i64 0, i32 8, !dbg !9537
  store i32 %27, i32* %probability16, align 4, !dbg !9538
  br label %for.inc, !dbg !9539

for.inc:                                          ; preds = %for.body, %if.end
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !9478, metadata !DIExpression(DW_OP_deref)), !dbg !9504
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !9511
  br label %for.cond, !dbg !9511, !llvm.loop !9540

for.end:                                          ; preds = %for.cond
  %index18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 9, !dbg !9542
  %28 = load i32, i32* %index18, align 8, !dbg !9542
  %cmp19 = icmp eq i32 %28, 0, !dbg !9544
  br i1 %cmp19, label %cleanup, label %lor.lhs.false, !dbg !9545

lor.lhs.false:                                    ; preds = %for.end
  %cmp21 = icmp eq i32 %28, 1, !dbg !9546
  br i1 %cmp21, label %cleanup, label %if.end23, !dbg !9547

if.end23:                                         ; preds = %lor.lhs.false
  %29 = bitcast %struct.gimple_stmt_iterator* %tmp24 to i8*, !dbg !9548
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %29) #8, !dbg !9548
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp24, %struct.basic_block_def* %1) #7, !dbg !9548
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* nonnull align 8 %29, i64 24, i1 false), !dbg !9548
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %29) #8, !dbg !9548
  %30 = bitcast %struct.gimple_stmt_iterator* %tmp53 to i8*, !dbg !9549
  br label %for.cond25, !dbg !9550

for.cond25:                                       ; preds = %if.end81, %if.end23
  %new_bb.0 = phi %struct.basic_block_def* [ %1, %if.end23 ], [ %new_bb.2, %if.end81 ], !dbg !9551
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %new_bb.0, metadata !9477, metadata !DIExpression()), !dbg !9504
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !9486, metadata !DIExpression(DW_OP_deref)), !dbg !9504
  %call26 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !9552
  %tobool27 = icmp eq i8 %call26, 0, !dbg !9553
  br i1 %tobool27, label %for.body28, label %cleanup.loopexit, !dbg !9554

for.body28:                                       ; preds = %for.cond25
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !9486, metadata !DIExpression(DW_OP_deref)), !dbg !9504
  %call29 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !9555
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call29, metadata !9493, metadata !DIExpression()), !dbg !9556
  %call30 = call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call29) #7, !dbg !9557
  %tobool31 = icmp eq i8 %call30, 0, !dbg !9557
  br i1 %tobool31, label %if.then32, label %if.end38, !dbg !9559

if.then32:                                        ; preds = %for.body28
  call fastcc void @update_stmt(%union.gimple_statement_d* %call29) #7, !dbg !9560
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9562
  %call34 = call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %31) #7, !dbg !9564
  %tobool35 = icmp eq i8 %call34, 0, !dbg !9564
  br i1 %tobool35, label %if.end38, label %if.then36, !dbg !9565

if.then36:                                        ; preds = %if.then32
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %call29) #6, !dbg !9566
  br label %if.end38, !dbg !9566

if.end38:                                         ; preds = %if.then32, %for.body28, %if.then36
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !9486, metadata !DIExpression(DW_OP_deref)), !dbg !9504
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !9567
  %call39 = call zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d* %call29) #6, !dbg !9568
  call void @llvm.dbg.value(metadata i8 %call39, metadata !9497, metadata !DIExpression()), !dbg !9556
  %call40 = call zeroext i8 @stmt_can_make_abnormal_goto(%union.gimple_statement_d* %call29) #6, !dbg !9569
  call void @llvm.dbg.value(metadata i8 %call40, metadata !9498, metadata !DIExpression()), !dbg !9556
  %32 = or i8 %call39, %call40, !dbg !9570
  %33 = icmp eq i8 %32, 0, !dbg !9570
  br i1 %33, label %if.end55, label %if.then45, !dbg !9570

if.then45:                                        ; preds = %if.end38
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !9486, metadata !DIExpression(DW_OP_deref)), !dbg !9504
  %call46 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !9571
  %tobool47 = icmp eq i8 %call46, 0, !dbg !9571
  br i1 %tobool47, label %if.then48, label %if.end55, !dbg !9572

if.then48:                                        ; preds = %if.then45
  %34 = bitcast %union.gimple_statement_d* %call29 to i8*, !dbg !9573
  %call49 = call %struct.edge_def* @split_block(%struct.basic_block_def* %new_bb.0, i8* %34) #6, !dbg !9574
  call void @llvm.dbg.value(metadata %struct.edge_def* %call49, metadata !9499, metadata !DIExpression()), !dbg !9549
  %dest50 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call49, i64 0, i32 1, !dbg !9575
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest50, align 8, !dbg !9575
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %35, metadata !9477, metadata !DIExpression()), !dbg !9504
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call49, i64 0, i32 0, !dbg !9576
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9576
  %aux51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i64 0, i32 2, !dbg !9577
  %37 = bitcast i8** %aux51 to i64*, !dbg !9577
  %38 = load i64, i64* %37, align 8, !dbg !9577
  %aux52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i64 0, i32 2, !dbg !9578
  %39 = bitcast i8** %aux52 to i64*, !dbg !9579
  store i64 %38, i64* %39, align 8, !dbg !9579
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #8, !dbg !9580
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp53, %struct.basic_block_def* %35) #7, !dbg !9580
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* nonnull align 8 %30, i64 24, i1 false), !dbg !9580
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #8, !dbg !9580
  br label %if.end55, !dbg !9581

if.end55:                                         ; preds = %if.then45, %if.end38, %if.then48
  %new_bb.2 = phi %struct.basic_block_def* [ %new_bb.0, %if.end38 ], [ %new_bb.0, %if.then45 ], [ %35, %if.then48 ], !dbg !9551
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %new_bb.2, metadata !9477, metadata !DIExpression()), !dbg !9504
  %call56 = call fastcc i32 @gimple_code(%union.gimple_statement_d* %call29) #7, !dbg !9582
  %cmp57 = icmp eq i32 %call56, 15, !dbg !9584
  br i1 %cmp57, label %if.then59, label %if.else, !dbg !9585

if.then59:                                        ; preds = %if.end55
  %call60 = call zeroext i8 @make_eh_dispatch_edges(%union.gimple_statement_d* %call29) #6, !dbg !9586
  br label %if.end64, !dbg !9586

if.else:                                          ; preds = %if.end55
  %tobool61 = icmp eq i8 %call39, 0, !dbg !9587
  br i1 %tobool61, label %if.end64, label %if.then62, !dbg !9589

if.then62:                                        ; preds = %if.else
  call void @make_eh_edges(%union.gimple_statement_d* %call29) #6, !dbg !9590
  br label %if.end64, !dbg !9590

if.end64:                                         ; preds = %if.else, %if.then62, %if.then59
  %tobool65 = icmp eq i8 %call40, 0, !dbg !9591
  br i1 %tobool65, label %if.end68, label %if.then66, !dbg !9593

if.then66:                                        ; preds = %if.end64
  %call67 = call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %call29) #7, !dbg !9594
  call void @make_abnormal_goto_edges(%struct.basic_block_def* %call67, i8 zeroext 1) #6, !dbg !9595
  br label %if.end68, !dbg !9595

if.end68:                                         ; preds = %if.end64, %if.then66
  br i1 %33, label %if.end81, label %land.lhs.true74, !dbg !9596

land.lhs.true74:                                  ; preds = %if.end68
  %40 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9598
  %call76 = call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %40) #7, !dbg !9599
  %tobool78 = icmp eq i8 %call76, 0, !dbg !9599
  br i1 %tobool78, label %if.end81, label %if.then79, !dbg !9600

if.then79:                                        ; preds = %land.lhs.true74
  %call80 = call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %call29) #7, !dbg !9601
  call fastcc void @update_ssa_across_abnormal_edges(%struct.basic_block_def* %call80, %struct.basic_block_def* %ret_bb, i8 zeroext %call39, i8 zeroext %call40) #7, !dbg !9602
  br label %if.end81, !dbg !9602

if.end81:                                         ; preds = %land.lhs.true74, %if.end68, %if.then79
  br label %for.cond25, !dbg !9603, !llvm.loop !9604

cleanup.loopexit:                                 ; preds = %for.cond25
  br label %cleanup, !dbg !9606

cleanup:                                          ; preds = %cleanup.loopexit, %for.end, %lor.lhs.false
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8, !dbg !9606
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #8, !dbg !9606
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !9606
  ret void, !dbg !9606
}

; Function Attrs: nounwind uwtable
define internal fastcc void @copy_phis_for_bb(%struct.basic_block_def* %bb, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !9607 {
entry:
  %ei = alloca %struct.edge_iterator, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %new_res = alloca %union.tree_node*, align 8
  %new_edge = alloca %struct.edge_def*, align 8
  %tmp9 = alloca %struct.edge_iterator, align 8
  %new_arg = alloca %union.tree_node*, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !9611, metadata !DIExpression()), !dbg !9638
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !9612, metadata !DIExpression()), !dbg !9638
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 2, !dbg !9639
  %0 = bitcast i8** %aux to %struct.basic_block_def**, !dbg !9639
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %0, align 8, !dbg !9639
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %1, metadata !9613, metadata !DIExpression()), !dbg !9638
  %2 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9640
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !9640
  %3 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !9641
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #8, !dbg !9641
  %4 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !9642
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #8, !dbg !9642
  %call = tail call fastcc %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) #7, !dbg !9643
  call fastcc void @gsi_start(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.gimple_seq_d* %call) #7, !dbg !9642
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* nonnull align 8 %4, i64 24, i1 false), !dbg !9642
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #8, !dbg !9642
  %5 = bitcast %union.tree_node** %new_res to i8*, !dbg !9644
  %6 = bitcast %struct.edge_def** %new_edge to i8*, !dbg !9644
  %7 = bitcast %struct.copy_body_data* %id to i8*, !dbg !9645
  %8 = bitcast %union.tree_node** %new_res to %struct.tree_ssa_name**, !dbg !9645
  %9 = bitcast %struct.edge_iterator* %tmp9 to i8*, !dbg !9646
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i64 0, i32 0, !dbg !9646
  %10 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp9, i64 0, i32 0, !dbg !9646
  %11 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp9, i64 0, i32 1, !dbg !9646
  %12 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !9647
  %13 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !9647
  %14 = bitcast %union.tree_node** %new_arg to i8*, !dbg !9648
  %block19 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 8, !dbg !9648
  %15 = bitcast %union.tree_node** %block19 to i64*, !dbg !9648
  %16 = bitcast %union.tree_node** %new_arg to i64**, !dbg !9649
  %17 = bitcast %struct.gimple_seq_d** %stmts to i8*, !dbg !9650
  br label %for.cond, !dbg !9651

for.cond:                                         ; preds = %if.end36, %entry
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !9617, metadata !DIExpression(DW_OP_deref)), !dbg !9638
  %call1 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !9652
  %tobool = icmp eq i8 %call1, 0, !dbg !9653
  br i1 %tobool, label %for.body, label %for.end38, !dbg !9654

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8, !dbg !9655
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8, !dbg !9656
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !9617, metadata !DIExpression(DW_OP_deref)), !dbg !9638
  %call2 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !9657
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call2, metadata !9616, metadata !DIExpression()), !dbg !9638
  %call3 = call fastcc %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %call2) #7, !dbg !9658
  %call4 = call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %call3) #7, !dbg !9658
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !9618, metadata !DIExpression()), !dbg !9644
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !9622, metadata !DIExpression()), !dbg !9644
  store %union.tree_node* %call4, %union.tree_node** %new_res, align 8, !dbg !9659
  %call5 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call4) #6, !dbg !9660
  %tobool6 = icmp eq i8 %call5, 0, !dbg !9660
  br i1 %tobool6, label %if.end36, label %if.then, !dbg !9661

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata %union.tree_node** %new_res, metadata !9622, metadata !DIExpression(DW_OP_deref)), !dbg !9644
  %call7 = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %new_res, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %7, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !9662
  %18 = load %union.tree_node*, %union.tree_node** %new_res, align 8, !dbg !9663
  call void @llvm.dbg.value(metadata %union.tree_node* %18, metadata !9622, metadata !DIExpression()), !dbg !9644
  %call8 = call %union.gimple_statement_d* @create_phi_node(%union.tree_node* %18, %struct.basic_block_def* %1) #6, !dbg !9664
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call8, metadata !9623, metadata !DIExpression()), !dbg !9644
  %19 = load %struct.tree_ssa_name*, %struct.tree_ssa_name** %8, align 8, !dbg !9665
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %19, i64 0, i32 2, !dbg !9665
  store %union.gimple_statement_d* %call8, %union.gimple_statement_d** %def_stmt, align 8, !dbg !9666
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8, !dbg !9667
  %call10 = call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds) #7, !dbg !9667
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 0, !dbg !9667
  store i32 %20, i32* %10, align 8, !dbg !9667
  %21 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 1, !dbg !9667
  store %struct.VEC_edge_gc** %21, %struct.VEC_edge_gc*** %11, align 8, !dbg !9667
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %9, i64 16, i1 false), !dbg !9667
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8, !dbg !9667
  br label %for.cond11, !dbg !9667

for.cond11:                                       ; preds = %if.end, %if.then
  %22 = load i32, i32* %12, align 8, !dbg !9668
  %23 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %13, align 8, !dbg !9668
  call void @llvm.dbg.value(metadata %struct.edge_def** %new_edge, metadata !9624, metadata !DIExpression(DW_OP_deref)), !dbg !9644
  %call12 = call fastcc zeroext i8 @ei_cond(i32 %22, %struct.VEC_edge_gc** %23, %struct.edge_def** nonnull %new_edge) #7, !dbg !9668
  %tobool13 = icmp eq i8 %call12, 0, !dbg !9667
  br i1 %tobool13, label %if.end36.loopexit, label %for.body14, !dbg !9667

for.body14:                                       ; preds = %for.cond11
  %24 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !9669
  call void @llvm.dbg.value(metadata %struct.edge_def* %24, metadata !9624, metadata !DIExpression()), !dbg !9644
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i64 0, i32 0, !dbg !9670
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9670
  %aux15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i64 0, i32 2, !dbg !9671
  %26 = bitcast i8** %aux15 to %struct.basic_block_def**, !dbg !9671
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %26, align 8, !dbg !9671
  %call16 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %27, %struct.basic_block_def* %bb) #6, !dbg !9672
  call void @llvm.dbg.value(metadata %struct.edge_def* %call16, metadata !9625, metadata !DIExpression()), !dbg !9648
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call16, i64 0, i32 6, !dbg !9673
  %28 = load i32, i32* %dest_idx, align 4, !dbg !9673
  %call17 = call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %call2, i32 %28) #7, !dbg !9673
  %call18 = call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call17) #7, !dbg !9673
  call void @llvm.dbg.value(metadata %union.tree_node* %call18, metadata !9632, metadata !DIExpression()), !dbg !9648
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #8, !dbg !9674
  call void @llvm.dbg.value(metadata %union.tree_node* %call18, metadata !9633, metadata !DIExpression()), !dbg !9648
  store %union.tree_node* %call18, %union.tree_node** %new_arg, align 8, !dbg !9675
  %29 = load i64, i64* %15, align 8, !dbg !9676
  store %union.tree_node* null, %union.tree_node** %block19, align 8, !dbg !9677
  call void @llvm.dbg.value(metadata %union.tree_node** %new_arg, metadata !9633, metadata !DIExpression(DW_OP_deref)), !dbg !9648
  %call21 = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %new_arg, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @copy_tree_body_r, i8* %7, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !9678
  store i64 %29, i64* %15, align 8, !dbg !9679
  %30 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !9680
  call void @llvm.dbg.value(metadata %union.tree_node* %30, metadata !9633, metadata !DIExpression()), !dbg !9648
  %tobool23 = icmp eq %union.tree_node* %30, null, !dbg !9680
  %31 = getelementptr inbounds %union.tree_node, %union.tree_node* %30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9680
  br i1 %tobool23, label %cond.true, label %cond.end, !dbg !9680

cond.true:                                        ; preds = %for.body14
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1940, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !9680
  %.pre = load i64*, i64** %16, align 8, !dbg !9681
  %32 = bitcast i64* %.pre to %union.tree_node*, !dbg !9680
  br label %cond.end, !dbg !9680

cond.end:                                         ; preds = %for.body14, %cond.true
  %33 = phi %union.tree_node* [ %30, %for.body14 ], [ %32, %cond.true ]
  %34 = phi i64* [ %31, %for.body14 ], [ %.pre, %cond.true ]
  %35 = phi i64* [ %31, %for.body14 ], [ %.pre, %cond.true ], !dbg !9681
  %bf.load = load i64, i64* %35, align 8, !dbg !9681
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !9682
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !9682
  br i1 %cmp, label %if.end, label %land.lhs.true, !dbg !9683

land.lhs.true:                                    ; preds = %cond.end
  %bf.load25 = load i64, i64* %34, align 8, !dbg !9684
  %bf.cast272 = and i64 %bf.load25, 65535, !dbg !9685
  %cmp28 = icmp eq i64 %bf.cast272, 29, !dbg !9685
  br i1 %cmp28, label %if.end, label %land.lhs.true29, !dbg !9686

land.lhs.true29:                                  ; preds = %land.lhs.true
  call void @llvm.dbg.value(metadata %union.tree_node* %33, metadata !9633, metadata !DIExpression()), !dbg !9648
  %call30 = call zeroext i8 @is_gimple_val(%union.tree_node* %33) #6, !dbg !9687
  %tobool31 = icmp eq i8 %call30, 0, !dbg !9687
  br i1 %tobool31, label %if.then32, label %if.end, !dbg !9688

if.then32:                                        ; preds = %land.lhs.true29
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8, !dbg !9689
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* null, metadata !9635, metadata !DIExpression()), !dbg !9650
  store %struct.gimple_seq_d* null, %struct.gimple_seq_d** %stmts, align 8, !dbg !9690
  %36 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !9691
  call void @llvm.dbg.value(metadata %union.tree_node* %36, metadata !9633, metadata !DIExpression()), !dbg !9648
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d** %stmts, metadata !9635, metadata !DIExpression(DW_OP_deref)), !dbg !9650
  %call33 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %36, %struct.gimple_seq_d** nonnull %stmts, i8 zeroext 1, %union.tree_node* null) #6, !dbg !9692
  call void @llvm.dbg.value(metadata %union.tree_node* %call33, metadata !9633, metadata !DIExpression()), !dbg !9648
  store %union.tree_node* %call33, %union.tree_node** %new_arg, align 8, !dbg !9693
  %37 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !9694
  call void @llvm.dbg.value(metadata %struct.edge_def* %37, metadata !9624, metadata !DIExpression()), !dbg !9644
  %38 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !9695
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %38, metadata !9635, metadata !DIExpression()), !dbg !9650
  %call34 = call %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def* %37, %struct.gimple_seq_d* %38) #6, !dbg !9696
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8, !dbg !9697
  br label %if.end, !dbg !9698

if.end:                                           ; preds = %land.lhs.true29, %land.lhs.true, %cond.end, %if.then32
  %39 = load %union.tree_node*, %union.tree_node** %new_arg, align 8, !dbg !9699
  call void @llvm.dbg.value(metadata %union.tree_node* %39, metadata !9633, metadata !DIExpression()), !dbg !9648
  %40 = load %struct.edge_def*, %struct.edge_def** %new_edge, align 8, !dbg !9700
  call void @llvm.dbg.value(metadata %struct.edge_def* %40, metadata !9624, metadata !DIExpression()), !dbg !9644
  %call35 = call fastcc i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %call2, %struct.edge_def* %call16) #7, !dbg !9701
  call void @add_phi_arg(%union.gimple_statement_d* %call8, %union.tree_node* %39, %struct.edge_def* %40, i32 %call35) #6, !dbg !9702
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #8, !dbg !9703
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !9615, metadata !DIExpression(DW_OP_deref)), !dbg !9638
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !9668
  br label %for.cond11, !dbg !9668, !llvm.loop !9704

if.end36.loopexit:                                ; preds = %for.cond11
  br label %if.end36, !dbg !9706

if.end36:                                         ; preds = %if.end36.loopexit, %for.body
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8, !dbg !9706
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8, !dbg !9706
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !9617, metadata !DIExpression(DW_OP_deref)), !dbg !9638
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !9707
  br label %for.cond, !dbg !9708, !llvm.loop !9709

for.end38:                                        ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #8, !dbg !9711
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !9711
  ret void, !dbg !9711
}

declare dso_local %struct.basic_block_def* @create_basic_block(i8*, i8*, %struct.basic_block_def*) local_unnamed_addr #2

declare dso_local void @gimple_duplicate_stmt_histograms(%struct.function*, %union.gimple_statement_d*, %struct.function*, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @is_gimple_val(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !9712 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !9714, metadata !DIExpression()), !dbg !9716
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !9715, metadata !DIExpression()), !dbg !9716
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 1, %union.tree_node* %rhs) #7, !dbg !9717
  ret void, !dbg !9718
}

declare dso_local void @gimple_regimplify_operands(%union.gimple_statement_d*, %struct.gimple_stmt_iterator*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !9719 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !9721, metadata !DIExpression()), !dbg !9722
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !9723
  %bf.load = load i32, i32* %0, align 8, !dbg !9723
  %and = lshr i32 %bf.load, 20, !dbg !9724
  %1 = trunc i32 %and to i8, !dbg !9724
  %2 = and i8 %1, 1, !dbg !9724
  ret i8 %2, !dbg !9725
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !9726 {
entry:
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !9730, metadata !DIExpression()), !dbg !9731
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 %alloc_) #6, !dbg !9732
  %0 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !9732
  ret %struct.VEC_tree_heap* %0, !dbg !9732
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_tree_heap_safe_grow(%struct.VEC_tree_heap** %vec_, i32 %size_) unnamed_addr #0 !dbg !9733 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_, metadata !9738, metadata !DIExpression()), !dbg !9740
  call void @llvm.dbg.value(metadata i32 %size_, metadata !9739, metadata !DIExpression()), !dbg !9740
  %cmp = icmp sgt i32 %size_, -1, !dbg !9741
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !9741

land.rhs:                                         ; preds = %entry
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_, align 8, !dbg !9741
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !9741
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !9741

cond.true:                                        ; preds = %land.rhs
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %0, i64 0, i32 0, !dbg !9741
  br label %cond.end, !dbg !9741

cond.end:                                         ; preds = %land.rhs, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %land.rhs ], !dbg !9741
  %call = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond) #7, !dbg !9741
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %1 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_, align 8, !dbg !9741
  %tobool2 = icmp eq %struct.VEC_tree_heap* %1, null, !dbg !9741
  br i1 %tobool2, label %cond.end11, label %cond.true3, !dbg !9741

cond.true3:                                       ; preds = %land.end
  %num = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %1, i64 0, i32 0, i32 0, !dbg !9741
  %2 = load i32, i32* %num, align 8, !dbg !9741
  br label %cond.end11, !dbg !9741

cond.end11:                                       ; preds = %land.end, %cond.true3
  %cond12 = phi i32 [ %2, %cond.true3 ], [ 0, %land.end ], !dbg !9741
  %sub = sub nsw i32 %size_, %cond12, !dbg !9741
  %call13 = tail call fastcc i32 @VEC_tree_heap_reserve_exact(%struct.VEC_tree_heap** %vec_, i32 %sub) #7, !dbg !9741
  %3 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_, align 8, !dbg !9741
  %num20 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %3, i64 0, i32 0, i32 0, !dbg !9741
  store i32 %size_, i32* %num20, align 8, !dbg !9741
  ret void, !dbg !9741
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @VEC_tree_base_address(%struct.VEC_tree_base* %vec_) unnamed_addr #0 !dbg !9742 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !9746, metadata !DIExpression()), !dbg !9747
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !9748
  %arraydecay = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 0, !dbg !9748
  %cond = select i1 %tobool, %union.tree_node** null, %union.tree_node** %arraydecay, !dbg !9748
  ret %union.tree_node** %cond, !dbg !9748
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !9749 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !9751, metadata !DIExpression()), !dbg !9753
  call void @llvm.dbg.value(metadata i32 0, metadata !9752, metadata !DIExpression()), !dbg !9753
  %call = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 3) #7, !dbg !9754
  ret %union.tree_node** %call, !dbg !9755
}

declare dso_local %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node*, %struct.VEC_tree_heap*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) unnamed_addr #0 !dbg !9756 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_, metadata !9760, metadata !DIExpression()), !dbg !9761
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_, align 8, !dbg !9762
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !9762
  br i1 %tobool, label %if.end, label %if.then, !dbg !9764

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_tree_heap* %0 to i8*, !dbg !9764
  tail call void @free(i8* nonnull %1) #6, !dbg !9762
  br label %if.end, !dbg !9762

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %vec_, align 8, !dbg !9764
  ret void, !dbg !9764
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_copy_flags(%union.gimple_statement_d* %dest_call, %union.gimple_statement_d* %orig_call) unnamed_addr #0 !dbg !9765 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %dest_call, metadata !9769, metadata !DIExpression()), !dbg !9771
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %orig_call, metadata !9770, metadata !DIExpression()), !dbg !9771
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %orig_call, i64 0, i32 0, i32 0, i32 0, !dbg !9772
  %bf.load = load i32, i32* %0, align 8, !dbg !9772
  %bf.lshr = and i32 %bf.load, -65536, !dbg !9773
  %1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %dest_call, i64 0, i32 0, i32 0, i32 0, !dbg !9774
  %bf.load2 = load i32, i32* %1, align 8, !dbg !9773
  %bf.clear = and i32 %bf.load2, 65535, !dbg !9773
  %bf.set = or i32 %bf.clear, %bf.lshr, !dbg !9773
  store i32 %bf.set, i32* %1, align 8, !dbg !9773
  ret void, !dbg !9775
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %s, i8 zeroext %pass_arg_pack_p) unnamed_addr #0 !dbg !9776 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !9778, metadata !DIExpression()), !dbg !9780
  call void @llvm.dbg.value(metadata i8 0, metadata !9779, metadata !DIExpression()), !dbg !9780
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !9781
  %bf.load = load i32, i32* %0, align 8, !dbg !9781
  %bf.set9 = and i32 %bf.load, -1048577, !dbg !9783
  store i32 %bf.set9, i32* %0, align 8, !dbg !9781
  ret void, !dbg !9784
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) unnamed_addr #0 !dbg !9785 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !9789, metadata !DIExpression()), !dbg !9791
  call void @llvm.dbg.value(metadata i32 %location, metadata !9790, metadata !DIExpression()), !dbg !9791
  %location1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 2, !dbg !9792
  store i32 %location, i32* %location1, align 8, !dbg !9793
  ret void, !dbg !9794
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) unnamed_addr #0 !dbg !9795 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !9797, metadata !DIExpression()), !dbg !9799
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !9798, metadata !DIExpression()), !dbg !9799
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %lhs) #7, !dbg !9800
  %tobool = icmp eq %union.tree_node* %lhs, null, !dbg !9801
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !9803

land.lhs.true:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !9804
  %bf.load = load i64, i64* %0, align 8, !dbg !9804
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !9805
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !9805
  br i1 %cmp, label %if.then, label %if.end, !dbg !9806

if.then:                                          ; preds = %land.lhs.true
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !9807
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !9807
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %1, align 8, !dbg !9808
  br label %if.end, !dbg !9807

if.end:                                           ; preds = %entry, %if.then, %land.lhs.true
  ret void, !dbg !9809
}

declare dso_local void @gimple_set_bb(%union.gimple_statement_d*, %struct.basic_block_def*) local_unnamed_addr #2

declare dso_local i32 @pointer_set_insert(%struct.pointer_set_t*, i8*) local_unnamed_addr #2

declare dso_local %struct.cgraph_edge* @cgraph_clone_edge(%struct.cgraph_edge*, %struct.cgraph_node*, %union.gimple_statement_d*, i32, i64, i32, i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_uid(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !9810 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !9812, metadata !DIExpression()), !dbg !9813
  %uid = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 1, !dbg !9814
  %0 = load i32, i32* %uid, align 4, !dbg !9814
  ret i32 %0, !dbg !9815
}

declare dso_local i32 @compute_call_stmt_bb_frequency(%union.tree_node*, %struct.basic_block_def*) local_unnamed_addr #2

declare dso_local %union.gimple_statement_d* @cgraph_redirect_edge_call_stmt_to_callee(%struct.cgraph_edge*) local_unnamed_addr #2

declare dso_local void @cgraph_set_call_stmt_including_clones(%struct.cgraph_node*, %union.gimple_statement_d*, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @cgraph_set_call_stmt(%struct.cgraph_edge*, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @cgraph_create_edge_including_clones(%struct.cgraph_node*, %struct.cgraph_node*, %union.gimple_statement_d*, %union.gimple_statement_d*, i64, i32, i32, i32) local_unnamed_addr #2

declare dso_local %struct.cgraph_edge* @cgraph_create_edge(%struct.cgraph_node*, %struct.cgraph_node*, %union.gimple_statement_d*, i64, i32, i32) local_unnamed_addr #2

declare dso_local i8* @cgraph_node_name(%struct.cgraph_node*) local_unnamed_addr #2

declare dso_local i32 @gimple_call_flags(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @maybe_duplicate_eh_stmt_fn(%struct.function*, %union.gimple_statement_d*, %struct.function*, %union.gimple_statement_d*, %struct.pointer_map_t*, i32) local_unnamed_addr #2

declare dso_local void @find_new_referenced_vars(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !9816 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !9821, metadata !DIExpression()), !dbg !9824
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !9822, metadata !DIExpression()), !dbg !9824
  call void @llvm.dbg.value(metadata i32 2, metadata !9823, metadata !DIExpression()), !dbg !9824
  tail call fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 2) #7, !dbg !9825
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !9826
  store i32 1, i32* %iter_type, align 4, !dbg !9827
  %call = tail call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #7, !dbg !9828
  ret %union.tree_node* %call, !dbg !9829
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !9830 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !9836, metadata !DIExpression()), !dbg !9837
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !9838
  %0 = load i8, i8* %done, align 8, !dbg !9838
  ret i8 %0, !dbg !9839
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !9840 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !9844, metadata !DIExpression()), !dbg !9846
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !9847
  %0 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !9847
  %tobool = icmp eq %struct.use_optype_d* %0, null, !dbg !9849
  br i1 %tobool, label %if.end, label %if.then, !dbg !9850

if.then:                                          ; preds = %entry
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %0, i64 0, i32 1, !dbg !9851
  %call = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* nonnull %use_ptr) #7, !dbg !9851
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !9845, metadata !DIExpression()), !dbg !9846
  %1 = bitcast %struct.use_optype_d** %uses to i64**, !dbg !9853
  %2 = load i64*, i64** %1, align 8, !dbg !9853
  %3 = load i64, i64* %2, align 8, !dbg !9854
  %4 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !9855
  store i64 %3, i64* %4, align 8, !dbg !9855
  br label %cleanup, !dbg !9856

if.end:                                           ; preds = %entry
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !9857
  %5 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !9857
  %tobool4 = icmp eq %struct.def_optype_d* %5, null, !dbg !9859
  br i1 %tobool4, label %if.end11, label %if.then5, !dbg !9860

if.then5:                                         ; preds = %if.end
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %5, i64 0, i32 1, !dbg !9861
  %6 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !9861
  %call7 = tail call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %6) #7, !dbg !9861
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !9845, metadata !DIExpression()), !dbg !9846
  %7 = bitcast %struct.def_optype_d** %defs to i64**, !dbg !9863
  %8 = load i64*, i64** %7, align 8, !dbg !9863
  %9 = load i64, i64* %8, align 8, !dbg !9864
  %10 = bitcast %struct.def_optype_d** %defs to i64*, !dbg !9865
  store i64 %9, i64* %10, align 8, !dbg !9865
  br label %cleanup, !dbg !9866

if.end11:                                         ; preds = %if.end
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !9867
  store i8 1, i8* %done, align 8, !dbg !9868
  br label %cleanup, !dbg !9869

cleanup:                                          ; preds = %if.end11, %if.then5, %if.then
  %retval.0 = phi %union.tree_node* [ %call, %if.then ], [ %call7, %if.then5 ], [ null, %if.end11 ], !dbg !9846
  ret %union.tree_node* %retval.0, !dbg !9870
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) unnamed_addr #0 !dbg !9871 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !9877, metadata !DIExpression()), !dbg !9878
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !9879
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !9879

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !9879
  %0 = load i32, i32* %num, align 8, !dbg !9879
  br label %cond.end, !dbg !9879

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !9879
  ret i32 %cond, !dbg !9879
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_heap_reserve_exact(%struct.VEC_tree_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !9880 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_, metadata !9884, metadata !DIExpression()), !dbg !9887
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !9885, metadata !DIExpression()), !dbg !9887
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_, align 8, !dbg !9888
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !9888
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !9888

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %0, i64 0, i32 0, !dbg !9888
  br label %cond.end, !dbg !9888

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !9888
  %call = tail call fastcc i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 %alloc_) #7, !dbg !9888
  %tobool1 = icmp eq i32 %call, 0, !dbg !9888
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !9888
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !9886, metadata !DIExpression()), !dbg !9887
  br i1 %tobool1, label %if.then, label %if.end, !dbg !9888

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_tree_heap** %vec_ to i8**, !dbg !9889
  %2 = load i8*, i8** %1, align 8, !dbg !9889
  %call3 = tail call i8* @vec_heap_p_reserve_exact(i8* %2, i32 %alloc_) #6, !dbg !9889
  store i8* %call3, i8** %1, align 8, !dbg !9889
  br label %if.end, !dbg !9889

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !9888
}

declare dso_local void @free(i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !9891 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !9895, metadata !DIExpression()), !dbg !9898
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !9896, metadata !DIExpression()), !dbg !9898
  call void @llvm.dbg.value(metadata i32 2, metadata !9897, metadata !DIExpression()), !dbg !9898
  br i1 false, label %entry.cond.end12_crit_edge, label %cond.true10, !dbg !9899

entry.cond.end12_crit_edge:                       ; preds = %entry
  br label %cond.end12, !dbg !9899

cond.true10:                                      ; preds = %entry
  %call = tail call fastcc %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %stmt) #7, !dbg !9900
  br label %cond.end12, !dbg !9899

cond.end12:                                       ; preds = %entry.cond.end12_crit_edge, %cond.true10
  %0 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ undef, %entry.cond.end12_crit_edge ], !dbg !9899
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !9901
  store %struct.def_optype_d* %0, %struct.def_optype_d** %defs, align 8, !dbg !9902
  br i1 true, label %land.lhs.true16, label %cond.end12.if.end_crit_edge, !dbg !9903

cond.end12.if.end_crit_edge:                      ; preds = %cond.end12
  br label %if.end, !dbg !9903

land.lhs.true16:                                  ; preds = %cond.end12
  %tobool18 = icmp eq %struct.def_optype_d* %0, null, !dbg !9905
  br i1 %tobool18, label %if.end, label %land.lhs.true19, !dbg !9906

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %call20 = tail call fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %stmt) #7, !dbg !9907
  %cmp = icmp eq %union.tree_node* %call20, null, !dbg !9908
  br i1 %cmp, label %if.end, label %if.then, !dbg !9909

if.then:                                          ; preds = %land.lhs.true19
  %1 = bitcast %struct.def_optype_d** %defs to i64**, !dbg !9910
  %2 = load i64*, i64** %1, align 8, !dbg !9910
  %3 = load i64, i64* %2, align 8, !dbg !9911
  %4 = bitcast %struct.def_optype_d** %defs to i64*, !dbg !9912
  store i64 %3, i64* %4, align 8, !dbg !9912
  br label %if.end, !dbg !9913

if.end:                                           ; preds = %cond.end12.if.end_crit_edge, %land.lhs.true19, %land.lhs.true16, %if.then
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !9914
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !9915
  br i1 true, label %land.lhs.true32, label %if.end.if.end42_crit_edge, !dbg !9916

if.end.if.end42_crit_edge:                        ; preds = %if.end
  br label %if.end42, !dbg !9916

land.lhs.true32:                                  ; preds = %if.end
  br i1 true, label %if.end42, label %land.lhs.true35, !dbg !9918

land.lhs.true35:                                  ; preds = %land.lhs.true32
  br i1 undef, label %land.lhs.true35.if.end42_crit_edge, label %if.then38, !dbg !9919

land.lhs.true35.if.end42_crit_edge:               ; preds = %land.lhs.true35
  br label %if.end42, !dbg !9919

if.then38:                                        ; preds = %land.lhs.true35
  br label %if.end42, !dbg !9920

if.end42:                                         ; preds = %land.lhs.true35.if.end42_crit_edge, %if.end.if.end42_crit_edge, %land.lhs.true32, %if.then38
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !9921
  store i8 0, i8* %done, align 8, !dbg !9922
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !9923
  store i32 0, i32* %phi_i, align 8, !dbg !9924
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !9925
  store i32 0, i32* %num_phi, align 4, !dbg !9926
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !9927
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !9928
  ret void, !dbg !9929
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !9930 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !9934, metadata !DIExpression()), !dbg !9935
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #7, !dbg !9936
  %tobool = icmp eq i8 %call, 0, !dbg !9936
  br i1 %tobool, label %return, label %if.end, !dbg !9938

if.end:                                           ; preds = %entry
  %def_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !9939
  %0 = bitcast i32* %def_ops to %struct.def_optype_d**, !dbg !9939
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %0, align 8, !dbg !9939
  br label %return, !dbg !9940

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %struct.def_optype_d* [ %1, %if.end ], [ null, %entry ], !dbg !9935
  ret %struct.def_optype_d* %retval.0, !dbg !9941
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !9942 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !9944, metadata !DIExpression()), !dbg !9945
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #7, !dbg !9946
  %tobool = icmp eq i8 %call, 0, !dbg !9946
  br i1 %tobool, label %return, label %if.end, !dbg !9948

if.end:                                           ; preds = %entry
  %vdef = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, !dbg !9949
  %0 = bitcast [1 x %struct.phi_arg_d]* %vdef to %union.tree_node**, !dbg !9949
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9949
  br label %return, !dbg !9950

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !9945
  ret %union.tree_node* %retval.0, !dbg !9951
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !9952 {
entry:
  unreachable, !dbg !9957
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !9958 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !9960, metadata !DIExpression()), !dbg !9961
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #7, !dbg !9962
  %tobool = icmp eq i8 %call, 0, !dbg !9962
  br i1 %tobool, label %return, label %if.end, !dbg !9964

if.end:                                           ; preds = %entry
  %vuse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !9965
  %0 = bitcast %struct.ssa_use_operand_d** %vuse to %union.tree_node**, !dbg !9965
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9965
  br label %return, !dbg !9966

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !9961
  ret %union.tree_node* %retval.0, !dbg !9967
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) unnamed_addr #0 !dbg !9968 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use, metadata !9975, metadata !DIExpression()), !dbg !9976
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use, i64 0, i32 3, !dbg !9977
  %0 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !9977
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !9978
  ret %union.tree_node* %1, !dbg !9979
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) unnamed_addr #0 !dbg !9980 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %def, metadata !9985, metadata !DIExpression()), !dbg !9986
  %0 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9987
  ret %union.tree_node* %0, !dbg !9988
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) unnamed_addr #0 !dbg !9989 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.VEC_edge_gc** %ev, metadata !9993, metadata !DIExpression()), !dbg !9995
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i64 0, i32 0, !dbg !9996
  store i32 0, i32* %index, align 8, !dbg !9997
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i64 0, i32 1, !dbg !9998
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %container, align 8, !dbg !9999
  %0 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !10000
  %1 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, align 8, !dbg !10000
  ret { i32, %struct.VEC_edge_gc** } %1, !dbg !10000
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) unnamed_addr #0 !dbg !10001 {
entry:
  call void @llvm.dbg.value(metadata %struct.edge_def** %p, metadata !10007, metadata !DIExpression()), !dbg !10008
  %call = tail call fastcc zeroext i8 @ei_end_p(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1) #7, !dbg !10009
  %tobool = icmp eq i8 %call, 0, !dbg !10009
  br i1 %tobool, label %if.then, label %if.else, !dbg !10011

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %struct.edge_def* @ei_edge(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1) #7, !dbg !10012
  br label %return, !dbg !10014

if.else:                                          ; preds = %entry
  br label %return, !dbg !10015

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct.edge_def* [ %call1, %if.then ], [ null, %if.else ], !dbg !10017
  %retval.0 = phi i8 [ 1, %if.then ], [ 0, %if.else ], !dbg !10017
  store %struct.edge_def* %storemerge, %struct.edge_def** %p, align 8, !dbg !10017
  ret i8 %retval.0, !dbg !10018
}

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @ei_next(%struct.edge_iterator* %i) unnamed_addr #0 !dbg !10019 {
entry:
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %i, metadata !10024, metadata !DIExpression()), !dbg !10025
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i64 0, i32 0, !dbg !10026
  %0 = load i32, i32* %index, align 8, !dbg !10026
  %1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i64 0, i32 1, !dbg !10026
  %2 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %1, align 8, !dbg !10026
  %call = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %0, %struct.VEC_edge_gc** %2) #7, !dbg !10026
  %tobool = icmp eq %struct.VEC_edge_gc* %call, null, !dbg !10026
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10026

cond.true:                                        ; preds = %entry
  %3 = load i32, i32* %index, align 8, !dbg !10026
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %1, align 8, !dbg !10026
  %call1 = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %3, %struct.VEC_edge_gc** %4) #7, !dbg !10026
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i64 0, i32 0, !dbg !10026
  br label %cond.end, !dbg !10026

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !10026
  %call2 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #7, !dbg !10026
  %cmp = icmp ult i32 %0, %call2, !dbg !10026
  br i1 %cmp, label %cond.end5, label %cond.true3, !dbg !10026

cond.true3:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10026
  br label %cond.end5, !dbg !10026

cond.end5:                                        ; preds = %cond.end, %cond.true3
  %5 = load i32, i32* %index, align 8, !dbg !10027
  %inc = add i32 %5, 1, !dbg !10027
  store i32 %inc, i32* %index, align 8, !dbg !10027
  ret void, !dbg !10028
}

declare dso_local zeroext i8 @stmt_can_throw_internal(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @stmt_can_make_abnormal_goto(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @make_eh_dispatch_edges(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @make_eh_edges(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @make_abnormal_goto_edges(%struct.basic_block_def*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @update_ssa_across_abnormal_edges(%struct.basic_block_def* %bb, %struct.basic_block_def* %ret_bb, i8 zeroext %can_throw, i8 zeroext %nonlocal_goto) unnamed_addr #5 !dbg !10029 {
entry:
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp18 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !10033, metadata !DIExpression()), !dbg !10049
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %ret_bb, metadata !10034, metadata !DIExpression()), !dbg !10049
  call void @llvm.dbg.value(metadata i8 %can_throw, metadata !10035, metadata !DIExpression()), !dbg !10049
  call void @llvm.dbg.value(metadata i8 %nonlocal_goto, metadata !10036, metadata !DIExpression()), !dbg !10049
  %0 = bitcast %struct.edge_def** %e to i8*, !dbg !10050
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !10050
  %1 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10051
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !10051
  %2 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10052
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !10052
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 1, !dbg !10052
  %call = tail call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** nonnull %succs) #7, !dbg !10052
  %3 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 0, !dbg !10052
  %4 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !10052
  store i32 %4, i32* %3, align 8, !dbg !10052
  %5 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp, i64 0, i32 1, !dbg !10052
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !10052
  store %struct.VEC_edge_gc** %6, %struct.VEC_edge_gc*** %5, align 8, !dbg !10052
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %2, i64 16, i1 false), !dbg !10052
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !10052
  %7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !10053
  %8 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !10053
  %9 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !10054
  %tobool5 = icmp eq i8 %nonlocal_goto, 0, !dbg !10055
  %tobool8 = icmp eq i8 %can_throw, 0, !dbg !10057
  %10 = bitcast %struct.gimple_stmt_iterator* %tmp18 to i8*, !dbg !10059
  br label %for.cond, !dbg !10052

for.cond:                                         ; preds = %for.inc72, %entry
  %11 = load i32, i32* %7, align 8, !dbg !10060
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %8, align 8, !dbg !10060
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !10037, metadata !DIExpression(DW_OP_deref)), !dbg !10049
  %call1 = call fastcc zeroext i8 @ei_cond(i32 %11, %struct.VEC_edge_gc** %12, %struct.edge_def** nonnull %e) #7, !dbg !10060
  %tobool = icmp eq i8 %call1, 0, !dbg !10052
  br i1 %tobool, label %for.end73, label %for.body, !dbg !10052

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10061
  call void @llvm.dbg.value(metadata %struct.edge_def* %13, metadata !10037, metadata !DIExpression()), !dbg !10049
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i64 0, i32 1, !dbg !10062
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !10062
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i64 0, i32 2, !dbg !10063
  %15 = load i8*, i8** %aux, align 8, !dbg !10063
  %tobool2 = icmp eq i8* %15, null, !dbg !10061
  br i1 %tobool2, label %if.then, label %lor.lhs.false, !dbg !10064

lor.lhs.false:                                    ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.edge_def* %13, metadata !10037, metadata !DIExpression()), !dbg !10049
  %index = getelementptr inbounds i8, i8* %15, i64 80, !dbg !10065
  %16 = bitcast i8* %index to i32*, !dbg !10065
  %17 = load i32, i32* %16, align 8, !dbg !10065
  %cmp = icmp eq i32 %17, 0, !dbg !10066
  br i1 %cmp, label %if.then, label %for.inc72, !dbg !10067

if.then:                                          ; preds = %for.body, %lor.lhs.false
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %9) #8, !dbg !10068
  br i1 %tobool5, label %if.then6, label %if.end, !dbg !10069

if.then6:                                         ; preds = %if.then
  call void @llvm.dbg.value(metadata %struct.edge_def* %13, metadata !10037, metadata !DIExpression()), !dbg !10049
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i64 0, i32 7, !dbg !10070
  %18 = load i32, i32* %flags, align 8, !dbg !10070
  %and = and i32 %18, 8, !dbg !10070
  %tobool7 = icmp eq i32 %and, 0, !dbg !10070
  br i1 %tobool7, label %cond.true, label %if.end, !dbg !10070

cond.true:                                        ; preds = %if.then6
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1775, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10070
  br label %if.end, !dbg !10070

if.end:                                           ; preds = %if.then6, %if.then, %cond.true
  br i1 %tobool8, label %if.then9, label %if.end17, !dbg !10071

if.then9:                                         ; preds = %if.end
  %19 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10072
  call void @llvm.dbg.value(metadata %struct.edge_def* %19, metadata !10037, metadata !DIExpression()), !dbg !10049
  %flags10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i64 0, i32 7, !dbg !10072
  %20 = load i32, i32* %flags10, align 8, !dbg !10072
  %and11 = and i32 %20, 8, !dbg !10072
  %tobool12 = icmp eq i32 %and11, 0, !dbg !10072
  br i1 %tobool12, label %if.end17, label %cond.true13, !dbg !10072

cond.true13:                                      ; preds = %if.then9
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1778, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10072
  br label %if.end17, !dbg !10072

if.end17:                                         ; preds = %if.then9, %if.end, %cond.true13
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #8, !dbg !10073
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10074
  call void @llvm.dbg.value(metadata %struct.edge_def* %21, metadata !10037, metadata !DIExpression()), !dbg !10049
  %dest19 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i64 0, i32 1, !dbg !10075
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dest19, align 8, !dbg !10075
  call void @gsi_start_phis(%struct.gimple_stmt_iterator* nonnull sret %tmp18, %struct.basic_block_def* %22) #6, !dbg !10073
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %9, i8* nonnull align 8 %10, i64 24, i1 false), !dbg !10073
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #8, !dbg !10073
  br label %for.cond20, !dbg !10076

for.cond20:                                       ; preds = %cleanup, %if.end17
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !10044, metadata !DIExpression(DW_OP_deref)), !dbg !10054
  %call21 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !10077
  %tobool22 = icmp eq i8 %call21, 0, !dbg !10078
  br i1 %tobool22, label %for.body23, label %for.end, !dbg !10079

for.body23:                                       ; preds = %for.cond20
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !10044, metadata !DIExpression(DW_OP_deref)), !dbg !10054
  %call24 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #7, !dbg !10080
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call24, metadata !10039, metadata !DIExpression()), !dbg !10054
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10081
  call void @llvm.dbg.value(metadata %struct.edge_def* %23, metadata !10037, metadata !DIExpression()), !dbg !10049
  %dest25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i64 0, i32 1, !dbg !10081
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %dest25, align 8, !dbg !10081
  %aux26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i64 0, i32 2, !dbg !10081
  %25 = load i8*, i8** %aux26, align 8, !dbg !10081
  %tobool27 = icmp eq i8* %25, null, !dbg !10081
  br i1 %tobool27, label %cond.end30, label %cond.true28, !dbg !10081

cond.true28:                                      ; preds = %for.body23
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1787, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10081
  %.pre = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10082
  br label %cond.end30, !dbg !10081

cond.end30:                                       ; preds = %for.body23, %cond.true28
  %26 = phi %struct.edge_def* [ %23, %for.body23 ], [ %.pre, %cond.true28 ], !dbg !10082
  call void @llvm.dbg.value(metadata %struct.edge_def* %26, metadata !10037, metadata !DIExpression()), !dbg !10049
  %flags32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i64 0, i32 7, !dbg !10082
  %27 = load i32, i32* %flags32, align 8, !dbg !10082
  %and33 = and i32 %27, 8, !dbg !10082
  %tobool34 = icmp eq i32 %and33, 0, !dbg !10082
  br i1 %tobool34, label %lor.lhs.false35, label %cond.end41, !dbg !10082

lor.lhs.false35:                                  ; preds = %cond.end30
  %call36 = call fastcc %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %call24) #7, !dbg !10082
  %call37 = call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %call36) #7, !dbg !10082
  %28 = getelementptr inbounds %union.tree_node, %union.tree_node* %call37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10082
  %bf.load = load i64, i64* %28, align 8, !dbg !10082
  %bf.cast1 = and i64 %bf.load, 4194304, !dbg !10082
  %tobool38 = icmp eq i64 %bf.cast1, 0, !dbg !10082
  br i1 %tobool38, label %cond.true39, label %cond.end41, !dbg !10082

cond.true39:                                      ; preds = %lor.lhs.false35
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1790, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10082
  br label %cond.end41, !dbg !10082

cond.end41:                                       ; preds = %lor.lhs.false35, %cond.end30, %cond.true39
  %call43 = call fastcc %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %call24) #7, !dbg !10083
  %call44 = call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %call43) #7, !dbg !10083
  %call45 = call zeroext i8 @is_gimple_reg(%union.tree_node* %call44) #6, !dbg !10085
  %tobool46 = icmp eq i8 %call45, 0, !dbg !10085
  br i1 %tobool46, label %if.then47, label %if.end50, !dbg !10086

if.then47:                                        ; preds = %cond.end41
  %call48 = call fastcc %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %call24) #7, !dbg !10087
  %call49 = call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %call48) #7, !dbg !10087
  %var = getelementptr inbounds %union.tree_node, %union.tree_node* %call49, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !10087
  %29 = bitcast i32* %var to %union.tree_node**, !dbg !10087
  %30 = load %union.tree_node*, %union.tree_node** %29, align 8, !dbg !10087
  call void @mark_sym_for_renaming(%union.tree_node* %30) #6, !dbg !10089
  br label %cleanup, !dbg !10090

if.end50:                                         ; preds = %cond.end41
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10091
  call void @llvm.dbg.value(metadata %struct.edge_def* %31, metadata !10037, metadata !DIExpression()), !dbg !10049
  %dest51 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i64 0, i32 1, !dbg !10092
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %dest51, align 8, !dbg !10092
  %call52 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %ret_bb, %struct.basic_block_def* %32) #6, !dbg !10093
  call void @llvm.dbg.value(metadata %struct.edge_def* %call52, metadata !10045, metadata !DIExpression()), !dbg !10094
  %tobool53 = icmp eq %struct.edge_def* %call52, null, !dbg !10095
  br i1 %tobool53, label %cond.true54, label %cond.end56, !dbg !10095

cond.true54:                                      ; preds = %if.end50
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1799, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10095
  br label %cond.end56, !dbg !10095

cond.end56:                                       ; preds = %if.end50, %cond.true54
  %flags58 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call52, i64 0, i32 7, !dbg !10096
  %33 = load i32, i32* %flags58, align 8, !dbg !10096
  %34 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10096
  call void @llvm.dbg.value(metadata %struct.edge_def* %34, metadata !10037, metadata !DIExpression()), !dbg !10049
  %flags60 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i64 0, i32 7, !dbg !10096
  %35 = load i32, i32* %flags60, align 8, !dbg !10096
  %36 = xor i32 %33, %35, !dbg !10096
  %37 = and i32 %36, 10, !dbg !10096
  %cmp62 = icmp eq i32 %37, 0, !dbg !10096
  br i1 %cmp62, label %cond.end65, label %cond.true63, !dbg !10096

cond.true63:                                      ; preds = %cond.end56
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 1801, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10096
  %.pre2 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10097
  br label %cond.end65, !dbg !10096

cond.end65:                                       ; preds = %cond.end56, %cond.true63
  %38 = phi %struct.edge_def* [ %34, %cond.end56 ], [ %.pre2, %cond.true63 ], !dbg !10097
  call void @llvm.dbg.value(metadata %struct.edge_def* %38, metadata !10037, metadata !DIExpression()), !dbg !10049
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i64 0, i32 6, !dbg !10097
  %39 = load i32, i32* %dest_idx, align 4, !dbg !10097
  %call67 = call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %call24, i32 %39) #7, !dbg !10097
  %dest_idx68 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call52, i64 0, i32 6, !dbg !10097
  %40 = load i32, i32* %dest_idx68, align 4, !dbg !10097
  %call69 = call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %call24, i32 %40) #7, !dbg !10097
  %call70 = call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call69) #7, !dbg !10097
  call fastcc void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %call67, %union.tree_node* %call70) #7, !dbg !10097
  br label %cleanup, !dbg !10098

cleanup:                                          ; preds = %cond.end65, %if.then47
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !10044, metadata !DIExpression(DW_OP_deref)), !dbg !10054
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #7, !dbg !10099
  br label %for.cond20, !dbg !10100, !llvm.loop !10101

for.end:                                          ; preds = %for.cond20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %9) #8, !dbg !10103
  br label %for.inc72, !dbg !10104

for.inc72:                                        ; preds = %lor.lhs.false, %for.end
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !10038, metadata !DIExpression(DW_OP_deref)), !dbg !10049
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #7, !dbg !10060
  br label %for.cond, !dbg !10060, !llvm.loop !10105

for.end73:                                        ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !10107
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !10107
  ret void, !dbg !10107
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) unnamed_addr #0 !dbg !10108 {
entry:
  %call = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #7, !dbg !10113
  %tobool = icmp eq %struct.VEC_edge_gc* %call, null, !dbg !10113
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10113

cond.true:                                        ; preds = %entry
  %call1 = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #7, !dbg !10113
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i64 0, i32 0, !dbg !10113
  br label %cond.end, !dbg !10113

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !10113
  %call2 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #7, !dbg !10113
  %cmp = icmp eq i32 %call2, %i.coerce0, !dbg !10114
  %conv3 = zext i1 %cmp to i8, !dbg !10115
  ret i8 %conv3, !dbg !10116
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) unnamed_addr #0 !dbg !10117 {
entry:
  %call = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #7, !dbg !10122
  %tobool = icmp eq %struct.VEC_edge_gc* %call, null, !dbg !10122
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10122

cond.true:                                        ; preds = %entry
  %call1 = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #7, !dbg !10122
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i64 0, i32 0, !dbg !10122
  br label %cond.end, !dbg !10122

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !10122
  %call2 = tail call fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %i.coerce0) #7, !dbg !10122
  ret %struct.edge_def* %call2, !dbg !10123
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) unnamed_addr #0 !dbg !10124 {
entry:
  %tobool = icmp eq %struct.VEC_edge_gc** %i.coerce1, null, !dbg !10129
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !10129

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10129
  br label %cond.end, !dbg !10129

cond.end:                                         ; preds = %entry, %cond.true
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %i.coerce1, align 8, !dbg !10130
  ret %struct.VEC_edge_gc* %0, !dbg !10131
}

declare dso_local void @gsi_start_phis(%struct.gimple_stmt_iterator* sret, %struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_phi_result_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !10132 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !10134, metadata !DIExpression()), !dbg !10135
  %result = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !10136
  ret %union.tree_node** %result, !dbg !10137
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) unnamed_addr #0 !dbg !10138 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use, metadata !10142, metadata !DIExpression()), !dbg !10144
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !10143, metadata !DIExpression()), !dbg !10144
  tail call fastcc void @delink_imm_use(%struct.ssa_use_operand_d* %use) #7, !dbg !10145
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use, i64 0, i32 3, !dbg !10146
  %0 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !10146
  store %union.tree_node* %val, %union.tree_node** %0, align 8, !dbg !10147
  tail call fastcc void @link_imm_use(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #7, !dbg !10148
  ret void, !dbg !10149
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !10150 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !10154, metadata !DIExpression()), !dbg !10156
  call void @llvm.dbg.value(metadata i32 %i, metadata !10155, metadata !DIExpression()), !dbg !10156
  %call = tail call fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %i) #7, !dbg !10157
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i64 0, i32 0, !dbg !10158
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !10159
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) unnamed_addr #0 !dbg !10160 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !10164, metadata !DIExpression()), !dbg !10165
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !10166
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10166
  %cmp = icmp eq %struct.ssa_use_operand_d* %0, null, !dbg !10168
  br i1 %cmp, label %return, label %if.end, !dbg !10169

if.end:                                           ; preds = %entry
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 1, !dbg !10170
  %1 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !10170
  %2 = load i64, i64* %1, align 8, !dbg !10170
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i64 0, i32 1, !dbg !10171
  %3 = bitcast %struct.ssa_use_operand_d** %next2 to i64*, !dbg !10172
  store i64 %2, i64* %3, align 8, !dbg !10172
  %4 = bitcast %struct.ssa_use_operand_d* %linknode to i64*, !dbg !10173
  %5 = load i64, i64* %4, align 8, !dbg !10173
  %6 = bitcast %struct.ssa_use_operand_d** %next to i64**, !dbg !10174
  %7 = load i64*, i64** %6, align 8, !dbg !10174
  store i64 %5, i64* %7, align 8, !dbg !10175
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10176
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next, align 8, !dbg !10177
  br label %return, !dbg !10178

return:                                           ; preds = %entry, %if.end
  ret void, !dbg !10178
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) unnamed_addr #0 !dbg !10179 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !10183, metadata !DIExpression()), !dbg !10186
  call void @llvm.dbg.value(metadata %union.tree_node* %def, metadata !10184, metadata !DIExpression()), !dbg !10186
  %tobool = icmp eq %union.tree_node* %def, null, !dbg !10187
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !10189

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %def, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10190
  %bf.load = load i64, i64* %0, align 8, !dbg !10190
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !10191
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !10191
  br i1 %cmp, label %if.else, label %if.then, !dbg !10192

if.then:                                          ; preds = %lor.lhs.false, %entry
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !10193
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10194
  br label %if.end, !dbg !10195

if.else:                                          ; preds = %lor.lhs.false
  %imm_uses = getelementptr inbounds %union.tree_node, %union.tree_node* %def, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10196
  %1 = bitcast i40* %imm_uses to %struct.ssa_use_operand_d*, !dbg !10196
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %1, metadata !10185, metadata !DIExpression()), !dbg !10186
  tail call fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* nonnull %1) #7, !dbg !10198
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !10199
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) unnamed_addr #0 !dbg !10200 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !10204, metadata !DIExpression()), !dbg !10206
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %list, metadata !10205, metadata !DIExpression()), !dbg !10206
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !10207
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %prev, align 8, !dbg !10208
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %list, i64 0, i32 1, !dbg !10209
  %0 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !10209
  %1 = load i64, i64* %0, align 8, !dbg !10209
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 1, !dbg !10210
  %2 = bitcast %struct.ssa_use_operand_d** %next1 to i64*, !dbg !10211
  store i64 %1, i64* %2, align 8, !dbg !10211
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !10212
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i64 0, i32 0, !dbg !10213
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !10214
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %next, align 8, !dbg !10215
  ret void, !dbg !10216
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !10217 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !10222, metadata !DIExpression()), !dbg !10224
  call void @llvm.dbg.value(metadata i32 %index, metadata !10223, metadata !DIExpression()), !dbg !10224
  %capacity = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !10225
  %0 = load i32, i32* %capacity, align 8, !dbg !10225
  %cmp = icmp ult i32 %0, %index, !dbg !10225
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !10225

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10225
  br label %cond.end, !dbg !10225

cond.end:                                         ; preds = %entry, %cond.true
  %idxprom = zext i32 %index to i64, !dbg !10226
  %arrayidx = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 %idxprom, !dbg !10226
  ret %struct.phi_arg_d* %arrayidx, !dbg !10227
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @phi_nodes(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !10228 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !10230, metadata !DIExpression()), !dbg !10231
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 13, !dbg !10232
  %0 = load i32, i32* %flags, align 8, !dbg !10232
  %and = and i32 %0, 512, !dbg !10232
  %tobool = icmp eq i32 %and, 0, !dbg !10232
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10232

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10232
  br label %cond.end, !dbg !10232

cond.end:                                         ; preds = %entry, %cond.true
  %gimple = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 7, i32 0, !dbg !10233
  %1 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !10233
  %tobool1 = icmp eq %struct.gimple_bb_info* %1, null, !dbg !10235
  br i1 %tobool1, label %return, label %if.end, !dbg !10236

if.end:                                           ; preds = %cond.end
  %phi_nodes = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %1, i64 0, i32 1, !dbg !10237
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %phi_nodes, align 8, !dbg !10237
  br label %return, !dbg !10238

return:                                           ; preds = %cond.end, %if.end
  %retval.0 = phi %struct.gimple_seq_d* [ %2, %if.end ], [ null, %cond.end ], !dbg !10231
  ret %struct.gimple_seq_d* %retval.0, !dbg !10239
}

declare dso_local %union.gimple_statement_d* @create_phi_node(%union.tree_node*, %struct.basic_block_def*) local_unnamed_addr #2

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) local_unnamed_addr #2

declare dso_local %struct.basic_block_def* @gsi_insert_seq_on_edge_immediate(%struct.edge_def*, %struct.gimple_seq_d*) local_unnamed_addr #2

declare dso_local void @add_phi_arg(%union.gimple_statement_d*, %union.tree_node*, %struct.edge_def*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_phi_arg_location_from_edge(%union.gimple_statement_d* %gs, %struct.edge_def* %e) unnamed_addr #0 !dbg !10240 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !10244, metadata !DIExpression()), !dbg !10246
  call void @llvm.dbg.value(metadata %struct.edge_def* %e, metadata !10245, metadata !DIExpression()), !dbg !10246
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %e, i64 0, i32 6, !dbg !10247
  %0 = load i32, i32* %dest_idx, align 4, !dbg !10247
  %call = tail call fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %0) #7, !dbg !10248
  %locus = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i64 0, i32 2, !dbg !10249
  %1 = load i32, i32* %locus, align 8, !dbg !10249
  ret i32 %1, !dbg !10250
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) unnamed_addr #0 !dbg !10251 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !10255, metadata !DIExpression()), !dbg !10258
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !10256, metadata !DIExpression()), !dbg !10258
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %ptr, metadata !10257, metadata !DIExpression()), !dbg !10258
  %tobool = icmp eq %struct.VEC_gimple_base* %vec_, null, !dbg !10259
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !10259

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !10259
  %0 = load i32, i32* %num, align 8, !dbg !10259
  %cmp = icmp ugt i32 %0, %ix_, !dbg !10259
  br i1 %cmp, label %if.then, label %if.else, !dbg !10261

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !10262
  %arrayidx = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !10262
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !10262
  br label %return, !dbg !10262

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !10264

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %union.gimple_statement_d* [ null, %if.else ], [ %1, %if.then ], !dbg !10266
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !10266
  store %union.gimple_statement_d* %storemerge, %union.gimple_statement_d** %ptr, align 8, !dbg !10266
  ret i32 %retval.0, !dbg !10261
}

; Function Attrs: nounwind uwtable
define internal fastcc void @copy_debug_stmt(%union.gimple_statement_d* %stmt, %struct.copy_body_data* %id) unnamed_addr #5 !dbg !10267 {
entry:
  %t = alloca %union.tree_node*, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !10271, metadata !DIExpression()), !dbg !10279
  call void @llvm.dbg.value(metadata %struct.copy_body_data* %id, metadata !10272, metadata !DIExpression()), !dbg !10279
  %0 = bitcast %union.tree_node** %t to i8*, !dbg !10280
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !10280
  %1 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !10281
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1) #8, !dbg !10281
  %block = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 8, !dbg !10282
  %2 = bitcast %union.tree_node** %block to i64*, !dbg !10282
  %3 = load i64, i64* %2, align 8, !dbg !10282
  %4 = bitcast %union.tree_node** %t to i64*, !dbg !10283
  store i64 %3, i64* %4, align 8, !dbg !10283
  %call = tail call fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* %stmt) #7, !dbg !10284
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !10284
  %5 = inttoptr i64 %3 to %union.tree_node*, !dbg !10285
  br i1 %tobool, label %if.end6, label %if.then, !dbg !10285

if.then:                                          ; preds = %entry
  %decl_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !10286
  %6 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map, align 8, !dbg !10286
  %call2 = tail call fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* %stmt) #7, !dbg !10287
  %7 = bitcast %union.tree_node* %call2 to i8*, !dbg !10287
  %call3 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %6, i8* %7) #6, !dbg !10288
  call void @llvm.dbg.value(metadata i8** %call3, metadata !10276, metadata !DIExpression()), !dbg !10289
  %tobool4 = icmp eq i8** %call3, null, !dbg !10290
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !10292

if.then5:                                         ; preds = %if.then
  %8 = bitcast i8** %call3 to i64*, !dbg !10293
  call void @llvm.dbg.value(metadata i64* %8, metadata !10276, metadata !DIExpression()), !dbg !10289
  %9 = load i64, i64* %8, align 8, !dbg !10293
  store i64 %9, i64* %4, align 8, !dbg !10294
  %10 = inttoptr i64 %9 to %union.tree_node*, !dbg !10295
  br label %if.end6, !dbg !10295

if.end6:                                          ; preds = %if.then, %entry, %if.then5
  %11 = phi %union.tree_node* [ %5, %if.then ], [ %5, %entry ], [ %10, %if.then5 ], !dbg !10296
  call void @llvm.dbg.value(metadata %union.tree_node* %11, metadata !10273, metadata !DIExpression()), !dbg !10279
  tail call fastcc void @gimple_set_block(%union.gimple_statement_d* %stmt, %union.tree_node* %11) #7, !dbg !10297
  %call7 = call i8* @memset(i8* nonnull %1, i32 0, i64 56) #6, !dbg !10298
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 1, !dbg !10299
  %12 = bitcast i8** %info to %struct.copy_body_data**, !dbg !10300
  store %struct.copy_body_data* %id, %struct.copy_body_data** %12, align 8, !dbg !10300
  store i32 1, i32* @processing_debug_stmt, align 4, !dbg !10301
  %call8 = call fastcc %union.tree_node* @gimple_debug_bind_get_var(%union.gimple_statement_d* %stmt) #7, !dbg !10302
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !10273, metadata !DIExpression()), !dbg !10279
  store %union.tree_node* %call8, %union.tree_node** %t, align 8, !dbg !10303
  %.cast = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !10304
  %bf.load = load i64, i64* %.cast, align 8, !dbg !10304
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !10306
  %cmp = icmp eq i64 %bf.cast1, 34, !dbg !10306
  %13 = bitcast %union.tree_node* %call8 to i8*, !dbg !10307
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !10307

land.lhs.true:                                    ; preds = %if.end6
  %debug_map = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 22, !dbg !10308
  %14 = load %struct.pointer_map_t*, %struct.pointer_map_t** %debug_map, align 8, !dbg !10308
  %tobool9 = icmp eq %struct.pointer_map_t* %14, null, !dbg !10309
  br i1 %tobool9, label %if.else, label %land.lhs.true10, !dbg !10310

land.lhs.true10:                                  ; preds = %land.lhs.true
  %call12 = call i8** @pointer_map_contains(%struct.pointer_map_t* nonnull %14, i8* %13) #6, !dbg !10311
  call void @llvm.dbg.value(metadata i8** %call12, metadata !10274, metadata !DIExpression()), !dbg !10279
  %tobool13 = icmp eq i8** %call12, null, !dbg !10312
  br i1 %tobool13, label %land.lhs.true10.if.else_crit_edge, label %if.then14, !dbg !10313

land.lhs.true10.if.else_crit_edge:                ; preds = %land.lhs.true10
  %.phi.trans.insert5 = bitcast %union.tree_node** %t to i64**, !dbg !10314
  %.pre6 = load i64*, i64** %.phi.trans.insert5, align 8, !dbg !10316
  %bf.load21.pre = load i64, i64* %.pre6, align 8, !dbg !10316
  br label %if.else, !dbg !10313

if.then14:                                        ; preds = %land.lhs.true10
  %15 = bitcast i8** %call12 to i64**, !dbg !10317
  %16 = load i64*, i64** %15, align 8, !dbg !10317
  %bf.load16 = load i64, i64* %16, align 8, !dbg !10317
  %bf.cast184 = and i64 %bf.load16, 65535, !dbg !10317
  %cmp19 = icmp eq i64 %bf.cast184, 32, !dbg !10317
  br i1 %cmp19, label %if.then14.cond.end_crit_edge, label %cond.true, !dbg !10317

if.then14.cond.end_crit_edge:                     ; preds = %if.then14
  %17 = ptrtoint i64* %16 to i64, !dbg !10317
  br label %cond.end, !dbg !10317

cond.true:                                        ; preds = %if.then14
  call void @fancy_abort(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i32 2150, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !10317
  %.phi.trans.insert = bitcast i8** %call12 to i64*, !dbg !10319
  %.pre = load i64, i64* %.phi.trans.insert, align 8, !dbg !10320
  br label %cond.end, !dbg !10317

cond.end:                                         ; preds = %if.then14.cond.end_crit_edge, %cond.true
  %18 = phi i64 [ %17, %if.then14.cond.end_crit_edge ], [ %.pre, %cond.true ], !dbg !10320
  store i64 %18, i64* %4, align 8, !dbg !10321
  br label %if.end45, !dbg !10322

if.else:                                          ; preds = %land.lhs.true10.if.else_crit_edge, %land.lhs.true, %if.end6
  %bf.load27 = phi i64 [ %bf.load21.pre, %land.lhs.true10.if.else_crit_edge ], [ %bf.load, %land.lhs.true ], [ %bf.load, %if.end6 ], !dbg !10316
  %bf.cast232 = and i64 %bf.load27, 65535, !dbg !10323
  %cmp24 = icmp eq i64 %bf.cast232, 32, !dbg !10323
  br i1 %cmp24, label %land.lhs.true25, label %if.else42, !dbg !10324

land.lhs.true25:                                  ; preds = %if.else
  %bf.cast293 = and i64 %bf.load27, 67108864, !dbg !10325
  %tobool30 = icmp eq i64 %bf.cast293, 0, !dbg !10325
  br i1 %tobool30, label %land.lhs.true31, label %if.else42, !dbg !10326

land.lhs.true31:                                  ; preds = %land.lhs.true25
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10327
  %call32 = call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %19) #7, !dbg !10328
  %tobool33 = icmp eq i8 %call32, 0, !dbg !10328
  br i1 %tobool33, label %if.else42, label %land.lhs.true34, !dbg !10329

land.lhs.true34:                                  ; preds = %land.lhs.true31
  %decl_map35 = getelementptr inbounds %struct.copy_body_data, %struct.copy_body_data* %id, i64 0, i32 6, !dbg !10330
  %20 = load %struct.pointer_map_t*, %struct.pointer_map_t** %decl_map35, align 8, !dbg !10330
  %21 = bitcast %union.tree_node** %t to i8**, !dbg !10331
  %22 = load i8*, i8** %21, align 8, !dbg !10331
  %call36 = call i8** @pointer_map_contains(%struct.pointer_map_t* %20, i8* %22) #6, !dbg !10332
  %tobool37 = icmp eq i8** %call36, null, !dbg !10332
  br i1 %tobool37, label %land.lhs.true38, label %if.else42, !dbg !10333

land.lhs.true38:                                  ; preds = %land.lhs.true34
  %23 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10334
  call void @llvm.dbg.value(metadata %union.tree_node* %23, metadata !10273, metadata !DIExpression()), !dbg !10279
  %call39 = call fastcc %struct.var_ann_d* @var_ann(%union.tree_node* %23) #7, !dbg !10335
  %tobool40 = icmp eq %struct.var_ann_d* %call39, null, !dbg !10335
  br i1 %tobool40, label %if.end45, label %if.else42, !dbg !10336

if.else42:                                        ; preds = %land.lhs.true38, %land.lhs.true34, %land.lhs.true31, %land.lhs.true25, %if.else
  call void @llvm.dbg.value(metadata %union.tree_node** %t, metadata !10273, metadata !DIExpression(DW_OP_deref)), !dbg !10279
  %call43 = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %t, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @remap_gimple_op_r, i8* nonnull %1, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !10337
  br label %if.end45

if.end45:                                         ; preds = %land.lhs.true38, %if.else42, %cond.end
  %24 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !10338
  call void @llvm.dbg.value(metadata %union.tree_node* %24, metadata !10273, metadata !DIExpression()), !dbg !10279
  call fastcc void @gimple_debug_bind_set_var(%union.gimple_statement_d* %stmt, %union.tree_node* %24) #7, !dbg !10339
  %call46 = call fastcc zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %stmt) #7, !dbg !10340
  %tobool47 = icmp eq i8 %call46, 0, !dbg !10340
  br i1 %tobool47, label %if.end51, label %if.then48, !dbg !10342

if.then48:                                        ; preds = %if.end45
  %call49 = call fastcc %union.tree_node** @gimple_debug_bind_get_value_ptr(%union.gimple_statement_d* %stmt) #7, !dbg !10343
  %call50 = call %union.tree_node* @walk_tree_1(%union.tree_node** %call49, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @remap_gimple_op_r, i8* nonnull %1, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #6, !dbg !10343
  br label %if.end51, !dbg !10343

if.end51:                                         ; preds = %if.end45, %if.then48
  %25 = load i32, i32* @processing_debug_stmt, align 4, !dbg !10344
  %cmp52 = icmp slt i32 %25, 0, !dbg !10346
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !10347

if.then54:                                        ; preds = %if.end51
  call fastcc void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %stmt) #7, !dbg !10348
  br label %if.end55, !dbg !10348

if.end55:                                         ; preds = %if.then54, %if.end51
  store i32 0, i32* @processing_debug_stmt, align 4, !dbg !10349
  call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #7, !dbg !10350
  %26 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10351
  %call57 = call fastcc zeroext i8 @gimple_in_ssa_p(%struct.function* %26) #7, !dbg !10353
  %tobool58 = icmp eq i8 %call57, 0, !dbg !10353
  br i1 %tobool58, label %if.end60, label %if.then59, !dbg !10354

if.then59:                                        ; preds = %if.end55
  call void @mark_symbols_for_renaming(%union.gimple_statement_d* %stmt) #6, !dbg !10355
  br label %if.end60, !dbg !10355

if.end60:                                         ; preds = %if.end55, %if.then59
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1) #8, !dbg !10356
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !10356
  ret void, !dbg !10356
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_debug_bind_set_var(%union.gimple_statement_d* %dbg, %union.tree_node* %var) unnamed_addr #0 !dbg !10357 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %dbg, metadata !10359, metadata !DIExpression()), !dbg !10361
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !10360, metadata !DIExpression()), !dbg !10361
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %dbg, i32 0, %union.tree_node* %var) #7, !dbg !10362
  ret void, !dbg !10363
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_debug_bind_has_value_p(%union.gimple_statement_d* %dbg) unnamed_addr #0 !dbg !10364 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %dbg, metadata !10366, metadata !DIExpression()), !dbg !10367
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %dbg, i32 1) #7, !dbg !10368
  %cmp = icmp ne %union.tree_node* %call, null, !dbg !10369
  %conv1 = zext i1 %cmp to i8, !dbg !10368
  ret i8 %conv1, !dbg !10370
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_debug_bind_get_value_ptr(%union.gimple_statement_d* %dbg) unnamed_addr #0 !dbg !10371 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %dbg, metadata !10373, metadata !DIExpression()), !dbg !10374
  %call = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %dbg, i32 1) #7, !dbg !10375
  ret %union.tree_node** %call, !dbg !10376
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_debug_bind_reset_value(%union.gimple_statement_d* %dbg) unnamed_addr #0 !dbg !10377 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %dbg, metadata !10379, metadata !DIExpression()), !dbg !10380
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %dbg, i32 1, %union.tree_node* null) #7, !dbg !10381
  ret void, !dbg !10382
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !10383 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !10387, metadata !DIExpression()), !dbg !10388
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 1, !dbg !10389
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !10389
  %tobool = icmp eq %struct.VEC_edge_gc* %0, null, !dbg !10389
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !10389

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %0, i64 0, i32 0, !dbg !10389
  br label %cond.end, !dbg !10389

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !10389
  %call = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #7, !dbg !10389
  %cmp = icmp eq i32 %call, 1, !dbg !10390
  %conv2 = zext i1 %cmp to i8, !dbg !10389
  ret i8 %conv2, !dbg !10391
}

declare dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !10392 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !10396, metadata !DIExpression()), !dbg !10397
  %call = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #7, !dbg !10398
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #7, !dbg !10399
  ret i32 %call1, !dbg !10400
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !10401 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !10403, metadata !DIExpression()), !dbg !10408
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !10409
  call void @llvm.dbg.value(metadata i32 %call, metadata !10404, metadata !DIExpression()), !dbg !10408
  switch i32 %call, label %if.else14 [
    i32 8, label %if.then3
    i32 6, label %if.else
    i32 1, label %if.then13
  ], !dbg !10410

if.then3:                                         ; preds = %entry
  %call4 = tail call fastcc %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %stmt) #7, !dbg !10411
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !10405, metadata !DIExpression()), !dbg !10413
  br label %cleanup, !dbg !10414

if.else:                                          ; preds = %entry
  %call5 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !10415
  %cond = icmp eq i32 %call5, 66, !dbg !10416
  br i1 %cond, label %sw.bb, label %sw.default, !dbg !10416

sw.bb:                                            ; preds = %if.else
  %call6 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !10417
  %type7 = getelementptr inbounds %union.tree_node, %union.tree_node* %call6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10417
  %0 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !10417
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !10405, metadata !DIExpression()), !dbg !10413
  br label %cleanup, !dbg !10419

sw.default:                                       ; preds = %if.else
  %call8 = tail call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %stmt) #6, !dbg !10420
  %type10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10420
  %1 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !10420
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !10405, metadata !DIExpression()), !dbg !10413
  br label %cleanup, !dbg !10421

if.then13:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !10422
  br label %cleanup, !dbg !10424

if.else14:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !10425
  br label %cleanup, !dbg !10426

cleanup:                                          ; preds = %if.then3, %sw.default, %sw.bb, %if.else14, %if.then13
  %retval.0 = phi %union.tree_node* [ %2, %if.then13 ], [ %3, %if.else14 ], [ %call4, %if.then3 ], [ %1, %sw.default ], [ %0, %sw.bb ], !dbg !10427
  ret %union.tree_node* %retval.0, !dbg !10428
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_rhs_code(%union.gimple_statement_d* %s, i32 %code) unnamed_addr #0 !dbg !10429 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !10433, metadata !DIExpression()), !dbg !10435
  call void @llvm.dbg.value(metadata i32 %code, metadata !10434, metadata !DIExpression()), !dbg !10435
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !10436
  %bf.load = load i32, i32* %0, align 8, !dbg !10437
  %bf.shl = shl i32 %code, 16, !dbg !10437
  %bf.clear = and i32 %bf.load, 65535, !dbg !10437
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !10437
  store i32 %bf.set, i32* %0, align 8, !dbg !10437
  ret void, !dbg !10438
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !10439 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !10441, metadata !DIExpression()), !dbg !10444
  %call = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #7, !dbg !10445
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !10442, metadata !DIExpression()), !dbg !10444
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !10446
  %0 = bitcast %union.tree_node** %type1 to %struct.tree_common**, !dbg !10446
  %1 = load %struct.tree_common*, %struct.tree_common** %0, align 8, !dbg !10446
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1, i64 0, i32 2, !dbg !10447
  %2 = bitcast %union.tree_node** %type3 to %struct.tree_common**, !dbg !10447
  %3 = load %struct.tree_common*, %struct.tree_common** %2, align 8, !dbg !10447
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3, i64 0, i32 2, !dbg !10448
  %4 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !10448
  ret %union.tree_node* %4, !dbg !10449
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @init_call_expr_arg_iterator(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* %iter) unnamed_addr #0 !dbg !10450 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %exp, metadata !10454, metadata !DIExpression()), !dbg !10456
  call void @llvm.dbg.value(metadata %struct.call_expr_arg_iterator_d* %iter, metadata !10455, metadata !DIExpression()), !dbg !10456
  %t = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %iter, i64 0, i32 0, !dbg !10457
  store %union.tree_node* %exp, %union.tree_node** %t, align 8, !dbg !10458
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %exp, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !10459
  %0 = bitcast %union.tree_node** %operands to %struct.tree_int_cst**, !dbg !10459
  %1 = load %struct.tree_int_cst*, %struct.tree_int_cst** %0, align 8, !dbg !10459
  %low = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %1, i64 0, i32 1, i32 0, !dbg !10459
  %2 = load i64, i64* %low, align 8, !dbg !10459
  %conv = trunc i64 %2 to i32, !dbg !10459
  %sub = add nsw i32 %conv, -3, !dbg !10459
  %n = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %iter, i64 0, i32 1, !dbg !10460
  store i32 %sub, i32* %n, align 8, !dbg !10461
  %i = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %iter, i64 0, i32 2, !dbg !10462
  store i32 0, i32* %i, align 4, !dbg !10463
  ret void, !dbg !10464
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind }
attributes #7 = { nobuiltin }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2408, !2409, !2410}
!llvm.ident = !{!2411}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "processing_debug_stmt", scope: !2, file: !3, line: 178, type: !696, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !693, globals: !2391, nameTableKind: None)
!3 = !DIFile(filename: "tree-inline.c", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!4 = !{!5, !134, !329, !336, !342, !347, !352, !370, !377, !384, !407, !414, !590, !596, !635, !648, !654, !680, !686}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !330, line: 30, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./except.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!331 = !{!332, !333, !334, !335}
!332 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !337, line: 363, baseType: !7, size: 32, elements: !338)
!337 = !DIFile(filename: "./basic-block.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!338 = !{!339, !340, !341}
!339 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!340 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!341 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !337, line: 355, baseType: !7, size: 32, elements: !343)
!343 = !{!344, !345, !346}
!344 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!345 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!346 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!347 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !348, line: 474, baseType: !7, size: 32, elements: !349)
!348 = !DIFile(filename: "./config/i386/i386.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!349 = !{!350, !351}
!350 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!352 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !353)
!353 = !{!354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369}
!354 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!356 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!370 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !371)
!371 = !{!372, !373, !374, !375, !376}
!372 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !378)
!378 = !{!379, !380, !381, !382, !383}
!379 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!384 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !385, line: 309, baseType: !7, size: 32, elements: !386)
!385 = !DIFile(filename: "./cgraph.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!386 = !{!387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406}
!387 = !DIEnumerator(name: "CIF_OK", value: 0, isUnsigned: true)
!388 = !DIEnumerator(name: "CIF_UNSPECIFIED", value: 1, isUnsigned: true)
!389 = !DIEnumerator(name: "CIF_FUNCTION_NOT_CONSIDERED", value: 2, isUnsigned: true)
!390 = !DIEnumerator(name: "CIF_BODY_NOT_AVAILABLE", value: 3, isUnsigned: true)
!391 = !DIEnumerator(name: "CIF_REDEFINED_EXTERN_INLINE", value: 4, isUnsigned: true)
!392 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINABLE", value: 5, isUnsigned: true)
!393 = !DIEnumerator(name: "CIF_FUNCTION_NOT_INLINE_CANDIDATE", value: 6, isUnsigned: true)
!394 = !DIEnumerator(name: "CIF_LARGE_FUNCTION_GROWTH_LIMIT", value: 7, isUnsigned: true)
!395 = !DIEnumerator(name: "CIF_LARGE_STACK_FRAME_GROWTH_LIMIT", value: 8, isUnsigned: true)
!396 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_SINGLE_LIMIT", value: 9, isUnsigned: true)
!397 = !DIEnumerator(name: "CIF_MAX_INLINE_INSNS_AUTO_LIMIT", value: 10, isUnsigned: true)
!398 = !DIEnumerator(name: "CIF_INLINE_UNIT_GROWTH_LIMIT", value: 11, isUnsigned: true)
!399 = !DIEnumerator(name: "CIF_RECURSIVE_INLINING", value: 12, isUnsigned: true)
!400 = !DIEnumerator(name: "CIF_UNLIKELY_CALL", value: 13, isUnsigned: true)
!401 = !DIEnumerator(name: "CIF_NOT_DECLARED_INLINED", value: 14, isUnsigned: true)
!402 = !DIEnumerator(name: "CIF_OPTIMIZING_FOR_SIZE", value: 15, isUnsigned: true)
!403 = !DIEnumerator(name: "CIF_TARGET_OPTION_MISMATCH", value: 16, isUnsigned: true)
!404 = !DIEnumerator(name: "CIF_MISMATCHED_ARGUMENTS", value: 17, isUnsigned: true)
!405 = !DIEnumerator(name: "CIF_ORIGINALLY_INDIRECT_CALL", value: 18, isUnsigned: true)
!406 = !DIEnumerator(name: "CIF_N_REASONS", value: 19, isUnsigned: true)
!407 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !408, line: 104, baseType: !7, size: 32, elements: !409)
!408 = !DIFile(filename: "./tree-pass.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!409 = !{!410, !411, !412, !413}
!410 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!411 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!412 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!413 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!414 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !415, line: 74, baseType: !7, size: 32, elements: !416)
!415 = !DIFile(filename: "./timevar.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!416 = !{!417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589}
!417 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!572 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!573 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!574 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!575 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!576 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!577 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!578 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!579 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!580 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!581 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!582 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!583 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!584 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!585 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!586 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!587 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!588 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!589 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!590 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "copy_body_cge_which", file: !591, line: 33, baseType: !7, size: 32, elements: !592)
!591 = !DIFile(filename: "./tree-inline.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!592 = !{!593, !594, !595}
!593 = !DIEnumerator(name: "CB_CGE_DUPLICATE", value: 0, isUnsigned: true)
!594 = !DIEnumerator(name: "CB_CGE_MOVE", value: 1, isUnsigned: true)
!595 = !DIEnumerator(name: "CB_CGE_MOVE_CLONES", value: 2, isUnsigned: true)
!596 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !597, line: 51, baseType: !7, size: 32, elements: !598)
!597 = !DIFile(filename: "./gimple.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!598 = !{!599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634}
!599 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!613 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!614 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!618 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!619 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!620 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!621 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!622 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!623 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!624 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!625 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!626 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!627 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!628 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!629 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!630 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!631 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!632 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!633 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!634 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!635 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !135, line: 58, baseType: !7, size: 32, elements: !636)
!636 = !{!637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647}
!637 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!638 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!639 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!640 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!641 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!642 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!643 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!644 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!645 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!646 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!647 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!648 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_try_flags", file: !597, line: 514, baseType: !7, size: 32, elements: !649)
!649 = !{!650, !651, !652, !653}
!650 = !DIEnumerator(name: "GIMPLE_TRY_CATCH", value: 1, isUnsigned: true)
!651 = !DIEnumerator(name: "GIMPLE_TRY_FINALLY", value: 2, isUnsigned: true)
!652 = !DIEnumerator(name: "GIMPLE_TRY_KIND", value: 3, isUnsigned: true)
!653 = !DIEnumerator(name: "GIMPLE_TRY_CATCH_IS_CLEANUP", value: 4, isUnsigned: true)
!654 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !597, line: 727, baseType: !7, size: 32, elements: !655)
!655 = !{!656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679}
!656 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!657 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!658 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!659 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!660 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!661 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!662 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!663 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!664 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!665 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!666 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!667 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!668 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!669 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!670 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!671 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!672 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!673 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!674 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!675 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!676 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!677 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!678 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!679 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!680 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !597, line: 80, baseType: !7, size: 32, elements: !681)
!681 = !{!682, !683, !684, !685}
!682 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!683 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!684 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!685 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!686 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !687, line: 119, baseType: !7, size: 32, elements: !688)
!687 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!688 = !{!689, !690, !691, !692}
!689 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!690 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!691 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!692 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!693 = !{!694, !695, !696, !697, !700, !701, !703, !134, !2095, !704, !831, !706, !2365, !1549, !7, !648, !698, !1423, !1029, !2367, !680, !1873, !1645, !2369, !879, !2359, !2145, !1584, !1238, !2386, !1028}
!694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !695, size: 64)
!695 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!696 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !698, size: 64)
!698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !699, size: 64)
!699 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !702, size: 64)
!702 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !699)
!703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !705, line: 56, baseType: !706)
!705 = !DIFile(filename: "./coretypes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !707, size: 64)
!707 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !708)
!708 = !{!709, !742, !748, !761, !780, !791, !796, !805, !811, !824, !836, !874, !1330, !1358, !1375, !1376, !1381, !1390, !1396, !1401, !1405, !1409, !1746, !1793, !1799, !1805, !1812, !1825, !1839, !1856, !1868, !1890, !1905, !2077}
!709 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !707, file: !135, line: 3372, baseType: !710, size: 64)
!710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !711)
!711 = !{!712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741}
!712 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !710, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !710, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !710, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !710, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !710, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !710, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !710, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !710, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !710, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !710, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !710, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !710, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !710, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !710, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !710, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !710, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !710, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !710, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !710, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !710, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !710, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !710, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !710, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !710, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !710, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !710, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !710, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !710, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !710, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !710, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !707, file: !135, line: 3373, baseType: !743, size: 192)
!743 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !744)
!744 = !{!745, !746, !747}
!745 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !743, file: !135, line: 403, baseType: !710, size: 64)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !743, file: !135, line: 404, baseType: !704, size: 64, offset: 64)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !743, file: !135, line: 405, baseType: !704, size: 64, offset: 128)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !707, file: !135, line: 3374, baseType: !749, size: 320)
!749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !750)
!750 = !{!751, !752}
!751 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !749, file: !135, line: 1385, baseType: !743, size: 192)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !749, file: !135, line: 1386, baseType: !753, size: 128, offset: 192)
!753 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !754, line: 58, baseType: !755)
!754 = !DIFile(filename: "./double-int.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!755 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !754, line: 54, size: 128, elements: !756)
!756 = !{!757, !759}
!757 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !755, file: !754, line: 56, baseType: !758, size: 64)
!758 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !755, file: !754, line: 57, baseType: !760, size: 64, offset: 64)
!760 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !707, file: !135, line: 3375, baseType: !762, size: 256)
!762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !763)
!763 = !{!764, !765}
!764 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !762, file: !135, line: 1398, baseType: !743, size: 192)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !762, file: !135, line: 1399, baseType: !766, size: 64, offset: 192)
!766 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !767, size: 64)
!767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !768, line: 52, size: 256, elements: !769)
!768 = !DIFile(filename: "./real.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!769 = !{!770, !771, !772, !773, !774, !775, !776}
!770 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !767, file: !768, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!771 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !767, file: !768, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!772 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !767, file: !768, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !767, file: !768, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !767, file: !768, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !767, file: !768, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !767, file: !768, line: 62, baseType: !777, size: 192, offset: 64)
!777 = !DICompositeType(tag: DW_TAG_array_type, baseType: !758, size: 192, elements: !778)
!778 = !{!779}
!779 = !DISubrange(count: 3)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !707, file: !135, line: 3376, baseType: !781, size: 256)
!781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !782)
!782 = !{!783, !784}
!783 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !781, file: !135, line: 1409, baseType: !743, size: 192)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !781, file: !135, line: 1410, baseType: !785, size: 64, offset: 192)
!785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !786, size: 64)
!786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !787, line: 27, size: 192, elements: !788)
!787 = !DIFile(filename: "./fixed-value.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!788 = !{!789, !790}
!789 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !786, file: !787, line: 29, baseType: !753, size: 128)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !786, file: !787, line: 30, baseType: !5, size: 32, offset: 128)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !707, file: !135, line: 3377, baseType: !792, size: 256)
!792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !793)
!793 = !{!794, !795}
!794 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !792, file: !135, line: 1438, baseType: !743, size: 192)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !792, file: !135, line: 1439, baseType: !704, size: 64, offset: 192)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !707, file: !135, line: 3378, baseType: !797, size: 256)
!797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !798)
!798 = !{!799, !800, !801}
!799 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !797, file: !135, line: 1419, baseType: !743, size: 192)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !797, file: !135, line: 1420, baseType: !696, size: 32, offset: 192)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !797, file: !135, line: 1421, baseType: !802, size: 8, offset: 224)
!802 = !DICompositeType(tag: DW_TAG_array_type, baseType: !699, size: 8, elements: !803)
!803 = !{!804}
!804 = !DISubrange(count: 1)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !707, file: !135, line: 3379, baseType: !806, size: 320)
!806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !807)
!807 = !{!808, !809, !810}
!808 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !806, file: !135, line: 1429, baseType: !743, size: 192)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !806, file: !135, line: 1430, baseType: !704, size: 64, offset: 192)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !806, file: !135, line: 1431, baseType: !704, size: 64, offset: 256)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !707, file: !135, line: 3380, baseType: !812, size: 320)
!812 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !813)
!813 = !{!814, !815}
!814 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !812, file: !135, line: 1461, baseType: !743, size: 192)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !812, file: !135, line: 1462, baseType: !816, size: 128, offset: 192)
!816 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !817, line: 31, size: 128, elements: !818)
!817 = !DIFile(filename: "./symtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!818 = !{!819, !822, !823}
!819 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !816, file: !817, line: 32, baseType: !820, size: 64)
!820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !821, size: 64)
!821 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !695)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !816, file: !817, line: 33, baseType: !7, size: 32, offset: 64)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !816, file: !817, line: 34, baseType: !7, size: 32, offset: 96)
!824 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !707, file: !135, line: 3381, baseType: !825, size: 384)
!825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !826)
!826 = !{!827, !828, !833, !834, !835}
!827 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !825, file: !135, line: 2508, baseType: !743, size: 192)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !825, file: !135, line: 2509, baseType: !829, size: 32, offset: 192)
!829 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !830, line: 58, baseType: !831)
!830 = !DIFile(filename: "./input.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!831 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !832, line: 44, baseType: !7)
!832 = !DIFile(filename: "./line-map.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!833 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !825, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !825, file: !135, line: 2511, baseType: !704, size: 64, offset: 256)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !825, file: !135, line: 2512, baseType: !704, size: 64, offset: 320)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !707, file: !135, line: 3382, baseType: !837, size: 896)
!837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !838)
!838 = !{!839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871}
!839 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !837, file: !135, line: 2653, baseType: !825, size: 384)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !837, file: !135, line: 2654, baseType: !704, size: 64, offset: 384)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !837, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !837, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !837, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !837, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !837, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !837, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !837, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !837, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !837, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !837, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !837, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !837, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !837, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !837, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !837, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !837, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !837, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !837, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !837, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !837, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !837, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !837, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !837, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !837, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !837, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !837, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !837, file: !135, line: 2705, baseType: !704, size: 64, offset: 576)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !837, file: !135, line: 2706, baseType: !704, size: 64, offset: 640)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !837, file: !135, line: 2707, baseType: !704, size: 64, offset: 704)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !837, file: !135, line: 2708, baseType: !704, size: 64, offset: 768)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !837, file: !135, line: 2711, baseType: !872, size: 64, offset: 832)
!872 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !873, size: 64)
!873 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !707, file: !135, line: 3383, baseType: !875, size: 960)
!875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !876)
!876 = !{!877, !878}
!877 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !875, file: !135, line: 2757, baseType: !837, size: 896)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !875, file: !135, line: 2758, baseType: !879, size: 64, offset: 896)
!879 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !705, line: 50, baseType: !880)
!880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !881, size: 64)
!881 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !882, line: 240, size: 384, elements: !883)
!882 = !DIFile(filename: "./rtl.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!883 = !{!884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894}
!884 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !881, file: !882, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !881, file: !882, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !881, file: !882, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !881, file: !882, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !881, file: !882, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !881, file: !882, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !881, file: !882, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !881, file: !882, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !881, file: !882, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !881, file: !882, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !881, file: !882, line: 321, baseType: !895, size: 320, offset: 64)
!895 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !882, line: 315, size: 320, elements: !896)
!896 = !{!897, !1297, !1299, !1328, !1329}
!897 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !895, file: !882, line: 316, baseType: !898, size: 64)
!898 = !DICompositeType(tag: DW_TAG_array_type, baseType: !899, size: 64, elements: !803)
!899 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !882, line: 183, baseType: !900)
!900 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !882, line: 166, size: 64, elements: !901)
!901 = !{!902, !903, !904, !905, !906, !914, !915, !927, !930, !990, !991, !1274, !1287, !1294}
!902 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !900, file: !882, line: 168, baseType: !696, size: 32)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !900, file: !882, line: 169, baseType: !7, size: 32)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !900, file: !882, line: 170, baseType: !701, size: 64)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !900, file: !882, line: 171, baseType: !879, size: 64)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !900, file: !882, line: 172, baseType: !907, size: 64)
!907 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !705, line: 53, baseType: !908)
!908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !909, size: 64)
!909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !882, line: 359, size: 128, elements: !910)
!910 = !{!911, !912}
!911 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !909, file: !882, line: 360, baseType: !696, size: 32)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !909, file: !882, line: 361, baseType: !913, size: 64, offset: 64)
!913 = !DICompositeType(tag: DW_TAG_array_type, baseType: !879, size: 64, elements: !803)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !900, file: !882, line: 173, baseType: !5, size: 32)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !900, file: !882, line: 174, baseType: !916, size: 32)
!916 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !882, line: 133, baseType: !917)
!917 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !882, line: 115, size: 32, elements: !918)
!918 = !{!919, !920, !921, !922, !923, !924, !925, !926}
!919 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !917, file: !882, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !917, file: !882, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !917, file: !882, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !917, file: !882, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !917, file: !882, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !917, file: !882, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !917, file: !882, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !917, file: !882, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !900, file: !882, line: 175, baseType: !928, size: 64)
!928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !929, size: 64)
!929 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !882, line: 175, flags: DIFlagFwdDecl)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !900, file: !882, line: 176, baseType: !931, size: 64)
!931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !932, size: 64)
!932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !933, line: 75, size: 256, elements: !934)
!933 = !DIFile(filename: "./bitmap.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!934 = !{!935, !949, !950, !951}
!935 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !932, file: !933, line: 76, baseType: !936, size: 64)
!936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !937, size: 64)
!937 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !933, line: 68, baseType: !938)
!938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !933, line: 63, size: 320, elements: !939)
!939 = !{!940, !942, !943, !944}
!940 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !938, file: !933, line: 64, baseType: !941, size: 64)
!941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !938, file: !933, line: 65, baseType: !941, size: 64, offset: 64)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !938, file: !933, line: 66, baseType: !7, size: 32, offset: 128)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !938, file: !933, line: 67, baseType: !945, size: 128, offset: 192)
!945 = !DICompositeType(tag: DW_TAG_array_type, baseType: !946, size: 128, elements: !947)
!946 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !933, line: 29, baseType: !758)
!947 = !{!948}
!948 = !DISubrange(count: 2)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !932, file: !933, line: 77, baseType: !936, size: 64, offset: 64)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !932, file: !933, line: 78, baseType: !7, size: 32, offset: 128)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !932, file: !933, line: 79, baseType: !952, size: 64, offset: 192)
!952 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !953, size: 64)
!953 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !933, line: 49, baseType: !954)
!954 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !933, line: 45, size: 832, elements: !955)
!955 = !{!956, !957, !958}
!956 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !954, file: !933, line: 46, baseType: !941, size: 64)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !954, file: !933, line: 47, baseType: !931, size: 64, offset: 64)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !954, file: !933, line: 48, baseType: !959, size: 704, offset: 128)
!959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !960, line: 164, size: 704, elements: !961)
!960 = !DIFile(filename: "./include/obstack.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!961 = !{!962, !963, !973, !974, !975, !976, !977, !978, !982, !986, !987, !988, !989}
!962 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !959, file: !960, line: 166, baseType: !760, size: 64)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !959, file: !960, line: 167, baseType: !964, size: 64, offset: 64)
!964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !965, size: 64)
!965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !960, line: 157, size: 192, elements: !966)
!966 = !{!967, !968, !969}
!967 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !965, file: !960, line: 159, baseType: !698, size: 64)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !965, file: !960, line: 160, baseType: !964, size: 64, offset: 64)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !965, file: !960, line: 161, baseType: !970, size: 32, offset: 128)
!970 = !DICompositeType(tag: DW_TAG_array_type, baseType: !699, size: 32, elements: !971)
!971 = !{!972}
!972 = !DISubrange(count: 4)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !959, file: !960, line: 168, baseType: !698, size: 64, offset: 128)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !959, file: !960, line: 169, baseType: !698, size: 64, offset: 192)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !959, file: !960, line: 170, baseType: !698, size: 64, offset: 256)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !959, file: !960, line: 171, baseType: !760, size: 64, offset: 320)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !959, file: !960, line: 172, baseType: !696, size: 32, offset: 384)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !959, file: !960, line: 176, baseType: !979, size: 64, offset: 448)
!979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !980, size: 64)
!980 = !DISubroutineType(types: !981)
!981 = !{!964, !700, !760}
!982 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !959, file: !960, line: 177, baseType: !983, size: 64, offset: 512)
!983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !984, size: 64)
!984 = !DISubroutineType(types: !985)
!985 = !{null, !700, !964}
!986 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !959, file: !960, line: 178, baseType: !700, size: 64, offset: 576)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !959, file: !960, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !959, file: !960, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !959, file: !960, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !900, file: !882, line: 177, baseType: !704, size: 64)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !900, file: !882, line: 178, baseType: !992, size: 64)
!992 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !993, size: 64)
!993 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !337, line: 217, size: 832, elements: !994)
!994 = !{!995, !1239, !1240, !1241, !1244, !1248, !1249, !1250, !1268, !1269, !1270, !1271, !1272, !1273}
!995 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !993, file: !337, line: 219, baseType: !996, size: 64)
!996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !997, size: 64)
!997 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !337, line: 151, baseType: !998)
!998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !337, line: 151, size: 128, elements: !999)
!999 = !{!1000}
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !998, file: !337, line: 151, baseType: !1001, size: 128)
!1001 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !337, line: 150, baseType: !1002)
!1002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !337, line: 150, size: 128, elements: !1003)
!1003 = !{!1004, !1005, !1006}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1002, file: !337, line: 150, baseType: !7, size: 32)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1002, file: !337, line: 150, baseType: !7, size: 32, offset: 32)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1002, file: !337, line: 150, baseType: !1007, size: 64, offset: 64)
!1007 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1008, size: 64, elements: !803)
!1008 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !705, line: 108, baseType: !1009)
!1009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1010, size: 64)
!1010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !337, line: 122, size: 512, elements: !1011)
!1011 = !{!1012, !1013, !1014, !1231, !1232, !1233, !1234, !1235, !1236, !1237}
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1010, file: !337, line: 124, baseType: !992, size: 64)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1010, file: !337, line: 125, baseType: !992, size: 64, offset: 64)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1010, file: !337, line: 131, baseType: !1015, size: 64, offset: 128)
!1015 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !337, line: 128, size: 64, elements: !1016)
!1016 = !{!1017, !1230}
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1015, file: !337, line: 129, baseType: !1018, size: 64)
!1018 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !705, line: 66, baseType: !1019)
!1019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1020, size: 64)
!1020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !597, line: 143, size: 192, elements: !1021)
!1021 = !{!1022, !1228, !1229}
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1020, file: !597, line: 145, baseType: !1023, size: 64)
!1023 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !705, line: 69, baseType: !1024)
!1024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1025, size: 64)
!1025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !597, line: 136, size: 192, elements: !1026)
!1026 = !{!1027, !1226, !1227}
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1025, file: !597, line: 137, baseType: !1028, size: 64)
!1028 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !705, line: 58, baseType: !1029)
!1029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1030, size: 64)
!1030 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !597, line: 737, size: 768, elements: !1031)
!1031 = !{!1032, !1049, !1081, !1087, !1092, !1097, !1104, !1110, !1116, !1121, !1135, !1140, !1146, !1151, !1161, !1166, !1184, !1191, !1198, !1204, !1209, !1215, !1221}
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1030, file: !597, line: 738, baseType: !1033, size: 256)
!1033 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !597, line: 271, size: 256, elements: !1034)
!1034 = !{!1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048}
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1033, file: !597, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1033, file: !597, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1033, file: !597, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1033, file: !597, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1033, file: !597, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1033, file: !597, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1033, file: !597, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1033, file: !597, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1033, file: !597, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1033, file: !597, line: 312, baseType: !7, size: 32, offset: 32)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1033, file: !597, line: 316, baseType: !829, size: 32, offset: 64)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1033, file: !597, line: 319, baseType: !7, size: 32, offset: 96)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1033, file: !597, line: 323, baseType: !992, size: 64, offset: 128)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1033, file: !597, line: 327, baseType: !704, size: 64, offset: 192)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1030, file: !597, line: 739, baseType: !1050, size: 448)
!1050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !597, line: 350, size: 448, elements: !1051)
!1051 = !{!1052, !1079}
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1050, file: !597, line: 353, baseType: !1053, size: 384)
!1053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !597, line: 333, size: 384, elements: !1054)
!1054 = !{!1055, !1056, !1062}
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1053, file: !597, line: 336, baseType: !1033, size: 256)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1053, file: !597, line: 343, baseType: !1057, size: 64, offset: 256)
!1057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1058, size: 64)
!1058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !687, line: 37, size: 128, elements: !1059)
!1059 = !{!1060, !1061}
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1058, file: !687, line: 39, baseType: !1057, size: 64)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1058, file: !687, line: 40, baseType: !703, size: 64, offset: 64)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1053, file: !597, line: 344, baseType: !1063, size: 64, offset: 320)
!1063 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1064, size: 64)
!1064 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !687, line: 45, size: 320, elements: !1065)
!1065 = !{!1066, !1067}
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1064, file: !687, line: 47, baseType: !1063, size: 64)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1064, file: !687, line: 48, baseType: !1068, size: 256, offset: 64)
!1068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1069)
!1069 = !{!1070, !1072, !1073, !1078}
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1068, file: !135, line: 1884, baseType: !1071, size: 64)
!1071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1068, size: 64)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1068, file: !135, line: 1885, baseType: !1071, size: 64, offset: 64)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1068, file: !135, line: 1891, baseType: !1074, size: 64, offset: 128)
!1074 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1068, file: !135, line: 1891, size: 64, elements: !1075)
!1075 = !{!1076, !1077}
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1074, file: !135, line: 1891, baseType: !1028, size: 64)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1074, file: !135, line: 1891, baseType: !704, size: 64)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1068, file: !135, line: 1892, baseType: !703, size: 64, offset: 192)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1050, file: !597, line: 359, baseType: !1080, size: 64, offset: 384)
!1080 = !DICompositeType(tag: DW_TAG_array_type, baseType: !704, size: 64, elements: !803)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1030, file: !597, line: 740, baseType: !1082, size: 512)
!1082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !597, line: 365, size: 512, elements: !1083)
!1083 = !{!1084, !1085, !1086}
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1082, file: !597, line: 368, baseType: !1053, size: 384)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1082, file: !597, line: 373, baseType: !704, size: 64, offset: 384)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1082, file: !597, line: 374, baseType: !704, size: 64, offset: 448)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1030, file: !597, line: 741, baseType: !1088, size: 576)
!1088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !597, line: 380, size: 576, elements: !1089)
!1089 = !{!1090, !1091}
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1088, file: !597, line: 383, baseType: !1082, size: 512)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1088, file: !597, line: 389, baseType: !1080, size: 64, offset: 512)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1030, file: !597, line: 742, baseType: !1093, size: 320)
!1093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !597, line: 395, size: 320, elements: !1094)
!1094 = !{!1095, !1096}
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1093, file: !597, line: 397, baseType: !1033, size: 256)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1093, file: !597, line: 400, baseType: !1018, size: 64, offset: 256)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1030, file: !597, line: 743, baseType: !1098, size: 448)
!1098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !597, line: 406, size: 448, elements: !1099)
!1099 = !{!1100, !1101, !1102, !1103}
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1098, file: !597, line: 408, baseType: !1033, size: 256)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1098, file: !597, line: 412, baseType: !704, size: 64, offset: 256)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1098, file: !597, line: 420, baseType: !704, size: 64, offset: 320)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1098, file: !597, line: 423, baseType: !1018, size: 64, offset: 384)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1030, file: !597, line: 744, baseType: !1105, size: 384)
!1105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !597, line: 429, size: 384, elements: !1106)
!1106 = !{!1107, !1108, !1109}
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1105, file: !597, line: 431, baseType: !1033, size: 256)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1105, file: !597, line: 434, baseType: !704, size: 64, offset: 256)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1105, file: !597, line: 437, baseType: !1018, size: 64, offset: 320)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1030, file: !597, line: 745, baseType: !1111, size: 384)
!1111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !597, line: 443, size: 384, elements: !1112)
!1112 = !{!1113, !1114, !1115}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1111, file: !597, line: 445, baseType: !1033, size: 256)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1111, file: !597, line: 449, baseType: !704, size: 64, offset: 256)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1111, file: !597, line: 453, baseType: !1018, size: 64, offset: 320)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1030, file: !597, line: 746, baseType: !1117, size: 320)
!1117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !597, line: 459, size: 320, elements: !1118)
!1118 = !{!1119, !1120}
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1117, file: !597, line: 461, baseType: !1033, size: 256)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1117, file: !597, line: 464, baseType: !704, size: 64, offset: 256)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1030, file: !597, line: 747, baseType: !1122, size: 768)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !597, line: 469, size: 768, elements: !1123)
!1123 = !{!1124, !1125, !1126, !1127, !1128}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1122, file: !597, line: 471, baseType: !1033, size: 256)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1122, file: !597, line: 474, baseType: !7, size: 32, offset: 256)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1122, file: !597, line: 475, baseType: !7, size: 32, offset: 288)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1122, file: !597, line: 478, baseType: !704, size: 64, offset: 320)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1122, file: !597, line: 481, baseType: !1129, size: 384, offset: 384)
!1129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1130, size: 384, elements: !803)
!1130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1131)
!1131 = !{!1132, !1133, !1134}
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1130, file: !135, line: 1920, baseType: !1068, size: 256)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1130, file: !135, line: 1921, baseType: !704, size: 64, offset: 256)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1130, file: !135, line: 1922, baseType: !829, size: 32, offset: 320)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1030, file: !597, line: 748, baseType: !1136, size: 320)
!1136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !597, line: 487, size: 320, elements: !1137)
!1137 = !{!1138, !1139}
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1136, file: !597, line: 490, baseType: !1033, size: 256)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1136, file: !597, line: 494, baseType: !696, size: 32, offset: 256)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1030, file: !597, line: 749, baseType: !1141, size: 384)
!1141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !597, line: 500, size: 384, elements: !1142)
!1142 = !{!1143, !1144, !1145}
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1141, file: !597, line: 502, baseType: !1033, size: 256)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1141, file: !597, line: 506, baseType: !1018, size: 64, offset: 256)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1141, file: !597, line: 510, baseType: !1018, size: 64, offset: 320)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1030, file: !597, line: 750, baseType: !1147, size: 320)
!1147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !597, line: 529, size: 320, elements: !1148)
!1148 = !{!1149, !1150}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1147, file: !597, line: 531, baseType: !1033, size: 256)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1147, file: !597, line: 540, baseType: !1018, size: 64, offset: 256)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1030, file: !597, line: 751, baseType: !1152, size: 704)
!1152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !597, line: 546, size: 704, elements: !1153)
!1153 = !{!1154, !1155, !1156, !1157, !1158, !1159, !1160}
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1152, file: !597, line: 549, baseType: !1082, size: 512)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1152, file: !597, line: 553, baseType: !701, size: 64, offset: 512)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1152, file: !597, line: 557, baseType: !695, size: 8, offset: 576)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1152, file: !597, line: 558, baseType: !695, size: 8, offset: 584)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1152, file: !597, line: 559, baseType: !695, size: 8, offset: 592)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1152, file: !597, line: 560, baseType: !695, size: 8, offset: 600)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1152, file: !597, line: 566, baseType: !1080, size: 64, offset: 640)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1030, file: !597, line: 752, baseType: !1162, size: 384)
!1162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !597, line: 571, size: 384, elements: !1163)
!1163 = !{!1164, !1165}
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1162, file: !597, line: 573, baseType: !1093, size: 320)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1162, file: !597, line: 577, baseType: !704, size: 64, offset: 320)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1030, file: !597, line: 753, baseType: !1167, size: 576)
!1167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !597, line: 600, size: 576, elements: !1168)
!1168 = !{!1169, !1170, !1171, !1174, !1183}
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1167, file: !597, line: 602, baseType: !1093, size: 320)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1167, file: !597, line: 605, baseType: !704, size: 64, offset: 320)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1167, file: !597, line: 609, baseType: !1172, size: 64, offset: 384)
!1172 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1173, line: 46, baseType: !758)
!1173 = !DIFile(filename: "/scratch/install/llvm-install-release/lib/clang/9.0.1/include/stddef.h", directory: "")
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1167, file: !597, line: 612, baseType: !1175, size: 64, offset: 448)
!1175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1176, size: 64)
!1176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !597, line: 581, size: 320, elements: !1177)
!1177 = !{!1178, !1179, !1180, !1181, !1182}
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1176, file: !597, line: 583, baseType: !134, size: 32)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1176, file: !597, line: 586, baseType: !704, size: 64, offset: 64)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1176, file: !597, line: 589, baseType: !704, size: 64, offset: 128)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1176, file: !597, line: 592, baseType: !704, size: 64, offset: 192)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1176, file: !597, line: 595, baseType: !704, size: 64, offset: 256)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1167, file: !597, line: 616, baseType: !1018, size: 64, offset: 512)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1030, file: !597, line: 754, baseType: !1185, size: 512)
!1185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !597, line: 622, size: 512, elements: !1186)
!1186 = !{!1187, !1188, !1189, !1190}
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1185, file: !597, line: 624, baseType: !1093, size: 320)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1185, file: !597, line: 628, baseType: !704, size: 64, offset: 320)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1185, file: !597, line: 632, baseType: !704, size: 64, offset: 384)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1185, file: !597, line: 636, baseType: !704, size: 64, offset: 448)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1030, file: !597, line: 755, baseType: !1192, size: 704)
!1192 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !597, line: 642, size: 704, elements: !1193)
!1193 = !{!1194, !1195, !1196, !1197}
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1192, file: !597, line: 644, baseType: !1185, size: 512)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1192, file: !597, line: 648, baseType: !704, size: 64, offset: 512)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1192, file: !597, line: 652, baseType: !704, size: 64, offset: 576)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1192, file: !597, line: 653, baseType: !704, size: 64, offset: 640)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1030, file: !597, line: 756, baseType: !1199, size: 448)
!1199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !597, line: 663, size: 448, elements: !1200)
!1200 = !{!1201, !1202, !1203}
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1199, file: !597, line: 665, baseType: !1093, size: 320)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1199, file: !597, line: 668, baseType: !704, size: 64, offset: 320)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1199, file: !597, line: 673, baseType: !704, size: 64, offset: 384)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1030, file: !597, line: 757, baseType: !1205, size: 384)
!1205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !597, line: 694, size: 384, elements: !1206)
!1206 = !{!1207, !1208}
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1205, file: !597, line: 696, baseType: !1093, size: 320)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1205, file: !597, line: 699, baseType: !704, size: 64, offset: 320)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1030, file: !597, line: 758, baseType: !1210, size: 384)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !597, line: 681, size: 384, elements: !1211)
!1211 = !{!1212, !1213, !1214}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1210, file: !597, line: 683, baseType: !1033, size: 256)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1210, file: !597, line: 686, baseType: !704, size: 64, offset: 256)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1210, file: !597, line: 689, baseType: !704, size: 64, offset: 320)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1030, file: !597, line: 759, baseType: !1216, size: 384)
!1216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !597, line: 707, size: 384, elements: !1217)
!1217 = !{!1218, !1219, !1220}
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1216, file: !597, line: 709, baseType: !1033, size: 256)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1216, file: !597, line: 712, baseType: !704, size: 64, offset: 256)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1216, file: !597, line: 712, baseType: !704, size: 64, offset: 320)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1030, file: !597, line: 760, baseType: !1222, size: 320)
!1222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !597, line: 718, size: 320, elements: !1223)
!1223 = !{!1224, !1225}
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1222, file: !597, line: 720, baseType: !1033, size: 256)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1222, file: !597, line: 723, baseType: !704, size: 64, offset: 256)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1025, file: !597, line: 138, baseType: !1024, size: 64, offset: 64)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1025, file: !597, line: 139, baseType: !1024, size: 64, offset: 128)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1020, file: !597, line: 146, baseType: !1023, size: 64, offset: 64)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1020, file: !597, line: 152, baseType: !1018, size: 64, offset: 128)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1015, file: !337, line: 130, baseType: !879, size: 64)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1010, file: !337, line: 134, baseType: !700, size: 64, offset: 192)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1010, file: !337, line: 137, baseType: !704, size: 64, offset: 256)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1010, file: !337, line: 138, baseType: !829, size: 32, offset: 320)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1010, file: !337, line: 142, baseType: !7, size: 32, offset: 352)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1010, file: !337, line: 144, baseType: !696, size: 32, offset: 384)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1010, file: !337, line: 145, baseType: !696, size: 32, offset: 416)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1010, file: !337, line: 146, baseType: !1238, size: 64, offset: 448)
!1238 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !337, line: 119, baseType: !760)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !993, file: !337, line: 220, baseType: !996, size: 64, offset: 64)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !993, file: !337, line: 223, baseType: !700, size: 64, offset: 128)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !993, file: !337, line: 226, baseType: !1242, size: 64, offset: 192)
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !337, line: 185, flags: DIFlagFwdDecl)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !993, file: !337, line: 229, baseType: !1245, size: 128, offset: 256)
!1245 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1246, size: 128, elements: !947)
!1246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1247, size: 64)
!1247 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !337, line: 229, flags: DIFlagFwdDecl)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !993, file: !337, line: 232, baseType: !992, size: 64, offset: 384)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !993, file: !337, line: 233, baseType: !992, size: 64, offset: 448)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !993, file: !337, line: 238, baseType: !1251, size: 64, offset: 512)
!1251 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !337, line: 235, size: 64, elements: !1252)
!1252 = !{!1253, !1259}
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1251, file: !337, line: 236, baseType: !1254, size: 64)
!1254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1255, size: 64)
!1255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !337, line: 273, size: 128, elements: !1256)
!1256 = !{!1257, !1258}
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1255, file: !337, line: 275, baseType: !1018, size: 64)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1255, file: !337, line: 278, baseType: !1018, size: 64, offset: 64)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1251, file: !337, line: 237, baseType: !1260, size: 64)
!1260 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1261, size: 64)
!1261 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !337, line: 259, size: 320, elements: !1262)
!1262 = !{!1263, !1264, !1265, !1266, !1267}
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1261, file: !337, line: 261, baseType: !879, size: 64)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1261, file: !337, line: 262, baseType: !879, size: 64, offset: 64)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1261, file: !337, line: 266, baseType: !879, size: 64, offset: 128)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1261, file: !337, line: 267, baseType: !879, size: 64, offset: 192)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1261, file: !337, line: 270, baseType: !696, size: 32, offset: 256)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !993, file: !337, line: 241, baseType: !1238, size: 64, offset: 576)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !993, file: !337, line: 244, baseType: !696, size: 32, offset: 640)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !993, file: !337, line: 247, baseType: !696, size: 32, offset: 672)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !993, file: !337, line: 250, baseType: !696, size: 32, offset: 704)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !993, file: !337, line: 253, baseType: !696, size: 32, offset: 736)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !993, file: !337, line: 256, baseType: !696, size: 32, offset: 768)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !900, file: !882, line: 179, baseType: !1275, size: 64)
!1275 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1276, size: 64)
!1276 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !882, line: 150, baseType: !1277)
!1277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !882, line: 142, size: 320, elements: !1278)
!1278 = !{!1279, !1280, !1281, !1282, !1285, !1286}
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1277, file: !882, line: 144, baseType: !704, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1277, file: !882, line: 145, baseType: !879, size: 64, offset: 64)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1277, file: !882, line: 146, baseType: !879, size: 64, offset: 128)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1277, file: !882, line: 147, baseType: !1283, size: 32, offset: 192)
!1283 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1284, line: 31, baseType: !696)
!1284 = !DIFile(filename: "./alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1277, file: !882, line: 148, baseType: !7, size: 32, offset: 224)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1277, file: !882, line: 149, baseType: !695, size: 8, offset: 256)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !900, file: !882, line: 180, baseType: !1288, size: 64)
!1288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1289, size: 64)
!1289 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !882, line: 162, baseType: !1290)
!1290 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !882, line: 159, size: 128, elements: !1291)
!1291 = !{!1292, !1293}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1290, file: !882, line: 160, baseType: !704, size: 64)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1290, file: !882, line: 161, baseType: !760, size: 64, offset: 64)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !900, file: !882, line: 181, baseType: !1295, size: 64)
!1295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1296, size: 64)
!1296 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !882, line: 181, flags: DIFlagFwdDecl)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !895, file: !882, line: 317, baseType: !1298, size: 64)
!1298 = !DICompositeType(tag: DW_TAG_array_type, baseType: !760, size: 64, elements: !803)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !895, file: !882, line: 318, baseType: !1300, size: 320)
!1300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !882, line: 188, size: 320, elements: !1301)
!1301 = !{!1302, !1304, !1327}
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1300, file: !882, line: 190, baseType: !1303, size: 192)
!1303 = !DICompositeType(tag: DW_TAG_array_type, baseType: !899, size: 192, elements: !778)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1300, file: !882, line: 193, baseType: !1305, size: 64, offset: 192)
!1305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1306, size: 64)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !882, line: 206, size: 320, elements: !1307)
!1307 = !{!1308, !1312, !1313, !1314, !1326}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1306, file: !882, line: 208, baseType: !1309, size: 64)
!1309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1310, size: 64)
!1310 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !705, line: 62, baseType: !1311)
!1311 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !705, line: 61, flags: DIFlagFwdDecl)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1306, file: !882, line: 211, baseType: !7, size: 32, offset: 64)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1306, file: !882, line: 214, baseType: !760, size: 64, offset: 128)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1306, file: !882, line: 224, baseType: !1315, size: 64, offset: 192)
!1315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1316, size: 64)
!1316 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !882, line: 202, baseType: !1317)
!1317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !882, line: 202, size: 128, elements: !1318)
!1318 = !{!1319}
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1317, file: !882, line: 202, baseType: !1320, size: 128)
!1320 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !882, line: 200, baseType: !1321)
!1321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !882, line: 200, size: 128, elements: !1322)
!1322 = !{!1323, !1324, !1325}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1321, file: !882, line: 200, baseType: !7, size: 32)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1321, file: !882, line: 200, baseType: !7, size: 32, offset: 32)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1321, file: !882, line: 200, baseType: !913, size: 64, offset: 64)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1306, file: !882, line: 234, baseType: !1315, size: 64, offset: 256)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1300, file: !882, line: 197, baseType: !760, size: 64, offset: 256)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !895, file: !882, line: 319, baseType: !767, size: 256)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !895, file: !882, line: 320, baseType: !786, size: 192)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !707, file: !135, line: 3384, baseType: !1331, size: 1472)
!1331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !1332)
!1332 = !{!1333, !1354, !1355, !1356, !1357}
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1331, file: !135, line: 3115, baseType: !1334, size: 1216)
!1334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !1335)
!1335 = !{!1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1334, file: !135, line: 2985, baseType: !875, size: 960)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1334, file: !135, line: 2986, baseType: !704, size: 64, offset: 960)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1334, file: !135, line: 2987, baseType: !704, size: 64, offset: 1024)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1334, file: !135, line: 2988, baseType: !704, size: 64, offset: 1088)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1334, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1334, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1334, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1334, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1334, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1334, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1334, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1334, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1334, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1334, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1334, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1334, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1334, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1334, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1331, file: !135, line: 3117, baseType: !704, size: 64, offset: 1216)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1331, file: !135, line: 3119, baseType: !704, size: 64, offset: 1280)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1331, file: !135, line: 3121, baseType: !704, size: 64, offset: 1344)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1331, file: !135, line: 3123, baseType: !704, size: 64, offset: 1408)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !707, file: !135, line: 3385, baseType: !1359, size: 1088)
!1359 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !1360)
!1360 = !{!1361, !1362, !1363}
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1359, file: !135, line: 2875, baseType: !875, size: 960)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1359, file: !135, line: 2876, baseType: !879, size: 64, offset: 960)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1359, file: !135, line: 2877, baseType: !1364, size: 64, offset: 1024)
!1364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1365, size: 64)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1366, line: 172, size: 128, elements: !1367)
!1366 = !DIFile(filename: "./tree-flow.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1367 = !{!1368, !1369, !1370, !1371, !1372, !1373, !1374}
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1365, file: !1366, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1365, file: !1366, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1365, file: !1366, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1365, file: !1366, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1365, file: !1366, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1365, file: !1366, line: 195, baseType: !7, size: 32, offset: 32)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1365, file: !1366, line: 199, baseType: !704, size: 64, offset: 64)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !707, file: !135, line: 3386, baseType: !1334, size: 1216)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !707, file: !135, line: 3387, baseType: !1377, size: 1280)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !1378)
!1378 = !{!1379, !1380}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1377, file: !135, line: 3094, baseType: !1334, size: 1216)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1377, file: !135, line: 3095, baseType: !1364, size: 64, offset: 1216)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !707, file: !135, line: 3388, baseType: !1382, size: 1216)
!1382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !1383)
!1383 = !{!1384, !1385, !1386, !1387, !1388, !1389}
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1382, file: !135, line: 2825, baseType: !837, size: 896)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1382, file: !135, line: 2827, baseType: !704, size: 64, offset: 896)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1382, file: !135, line: 2828, baseType: !704, size: 64, offset: 960)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1382, file: !135, line: 2829, baseType: !704, size: 64, offset: 1024)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1382, file: !135, line: 2830, baseType: !704, size: 64, offset: 1088)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1382, file: !135, line: 2831, baseType: !704, size: 64, offset: 1152)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !707, file: !135, line: 3389, baseType: !1391, size: 1024)
!1391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !1392)
!1392 = !{!1393, !1394, !1395}
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1391, file: !135, line: 2851, baseType: !875, size: 960)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1391, file: !135, line: 2852, baseType: !696, size: 32, offset: 960)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1391, file: !135, line: 2853, baseType: !696, size: 32, offset: 992)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !707, file: !135, line: 3390, baseType: !1397, size: 1024)
!1397 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !1398)
!1398 = !{!1399, !1400}
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1397, file: !135, line: 2858, baseType: !875, size: 960)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1397, file: !135, line: 2859, baseType: !1364, size: 64, offset: 960)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !707, file: !135, line: 3391, baseType: !1402, size: 960)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !1403)
!1403 = !{!1404}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1402, file: !135, line: 2863, baseType: !875, size: 960)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !707, file: !135, line: 3392, baseType: !1406, size: 1472)
!1406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !1407)
!1407 = !{!1408}
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1406, file: !135, line: 3305, baseType: !1331, size: 1472)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !707, file: !135, line: 3393, baseType: !1410, size: 1792)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !1411)
!1411 = !{!1412, !1413, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1410, file: !135, line: 3249, baseType: !1331, size: 1472)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1410, file: !135, line: 3251, baseType: !1414, size: 64, offset: 1472)
!1414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1415, size: 64)
!1415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1416, line: 463, size: 1152, elements: !1417)
!1416 = !DIFile(filename: "./function.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1417 = !{!1418, !1579, !1610, !1611, !1666, !1669, !1670, !1671, !1672, !1673, !1674, !1698, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724}
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1415, file: !1416, line: 464, baseType: !1419, size: 64)
!1419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1420, size: 64)
!1420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !330, line: 194, size: 384, elements: !1421)
!1421 = !{!1422, !1471, !1484, !1498, !1548, !1560}
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1420, file: !330, line: 197, baseType: !1423, size: 64)
!1423 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !330, line: 182, baseType: !1424)
!1424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1425, size: 64)
!1425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !330, line: 116, size: 704, elements: !1426)
!1426 = !{!1427, !1428, !1429, !1430, !1431, !1432, !1459, !1468, !1469, !1470}
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1425, file: !330, line: 119, baseType: !1424, size: 64)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1425, file: !330, line: 122, baseType: !1424, size: 64, offset: 64)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1425, file: !330, line: 123, baseType: !1424, size: 64, offset: 128)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1425, file: !330, line: 126, baseType: !696, size: 32, offset: 192)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1425, file: !330, line: 129, baseType: !329, size: 32, offset: 224)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1425, file: !330, line: 165, baseType: !1433, size: 192, offset: 256)
!1433 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !330, line: 132, size: 192, elements: !1434)
!1434 = !{!1435, !1448, !1454}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1433, file: !330, line: 137, baseType: !1436, size: 128)
!1436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !330, line: 133, size: 128, elements: !1437)
!1437 = !{!1438, !1447}
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1436, file: !330, line: 135, baseType: !1439, size: 64)
!1439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1440, size: 64)
!1440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !330, line: 93, size: 320, elements: !1441)
!1441 = !{!1442, !1443, !1444, !1445, !1446}
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1440, file: !330, line: 96, baseType: !1439, size: 64)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1440, file: !330, line: 97, baseType: !1439, size: 64, offset: 64)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1440, file: !330, line: 101, baseType: !704, size: 64, offset: 128)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1440, file: !330, line: 106, baseType: !704, size: 64, offset: 192)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1440, file: !330, line: 111, baseType: !704, size: 64, offset: 256)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1436, file: !330, line: 136, baseType: !1439, size: 64, offset: 64)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1433, file: !330, line: 151, baseType: !1449, size: 192)
!1449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !330, line: 139, size: 192, elements: !1450)
!1450 = !{!1451, !1452, !1453}
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1449, file: !330, line: 141, baseType: !704, size: 64)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1449, file: !330, line: 145, baseType: !704, size: 64, offset: 64)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1449, file: !330, line: 150, baseType: !696, size: 32, offset: 128)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1433, file: !330, line: 164, baseType: !1455, size: 128)
!1455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !330, line: 153, size: 128, elements: !1456)
!1456 = !{!1457, !1458}
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1455, file: !330, line: 161, baseType: !704, size: 64)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1455, file: !330, line: 163, baseType: !829, size: 32, offset: 64)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1425, file: !330, line: 168, baseType: !1460, size: 64, offset: 448)
!1460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1461, size: 64)
!1461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !330, line: 67, size: 320, elements: !1462)
!1462 = !{!1463, !1464, !1465, !1466, !1467}
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1461, file: !330, line: 70, baseType: !1460, size: 64)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1461, file: !330, line: 73, baseType: !1424, size: 64, offset: 64)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1461, file: !330, line: 78, baseType: !704, size: 64, offset: 128)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1461, file: !330, line: 85, baseType: !879, size: 64, offset: 192)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1461, file: !330, line: 88, baseType: !696, size: 32, offset: 256)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1425, file: !330, line: 173, baseType: !879, size: 64, offset: 512)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1425, file: !330, line: 173, baseType: !879, size: 64, offset: 576)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1425, file: !330, line: 177, baseType: !695, size: 8, offset: 640)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1420, file: !330, line: 200, baseType: !1472, size: 64, offset: 64)
!1472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1473, size: 64)
!1473 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !330, line: 185, baseType: !1474)
!1474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !330, line: 185, size: 128, elements: !1475)
!1475 = !{!1476}
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1474, file: !330, line: 185, baseType: !1477, size: 128)
!1477 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !330, line: 184, baseType: !1478)
!1478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !330, line: 184, size: 128, elements: !1479)
!1479 = !{!1480, !1481, !1482}
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1478, file: !330, line: 184, baseType: !7, size: 32)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1478, file: !330, line: 184, baseType: !7, size: 32, offset: 32)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1478, file: !330, line: 184, baseType: !1483, size: 64, offset: 64)
!1483 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1423, size: 64, elements: !803)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1420, file: !330, line: 203, baseType: !1485, size: 64, offset: 128)
!1485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1486, size: 64)
!1486 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, baseType: !1487)
!1487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !330, line: 189, size: 128, elements: !1488)
!1488 = !{!1489}
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1487, file: !330, line: 189, baseType: !1490, size: 128)
!1490 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !330, line: 188, baseType: !1491)
!1491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !330, line: 188, size: 128, elements: !1492)
!1492 = !{!1493, !1494, !1495}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1491, file: !330, line: 188, baseType: !7, size: 32)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1491, file: !330, line: 188, baseType: !7, size: 32, offset: 32)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1491, file: !330, line: 188, baseType: !1496, size: 64, offset: 64)
!1496 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1497, size: 64, elements: !803)
!1497 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !330, line: 180, baseType: !1460)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1420, file: !330, line: 207, baseType: !1499, size: 64, offset: 192)
!1499 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1500, line: 144, baseType: !1501)
!1500 = !DIFile(filename: "./include/hashtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1502, size: 64)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1500, line: 100, size: 896, elements: !1503)
!1503 = !{!1504, !1512, !1517, !1522, !1524, !1525, !1526, !1527, !1528, !1529, !1534, !1536, !1537, !1542, !1547}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1502, file: !1500, line: 102, baseType: !1505, size: 64)
!1505 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1500, line: 52, baseType: !1506)
!1506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1507, size: 64)
!1507 = !DISubroutineType(types: !1508)
!1508 = !{!1509, !1510}
!1509 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1500, line: 47, baseType: !7)
!1510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1511, size: 64)
!1511 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1502, file: !1500, line: 105, baseType: !1513, size: 64, offset: 64)
!1513 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1500, line: 59, baseType: !1514)
!1514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1515, size: 64)
!1515 = !DISubroutineType(types: !1516)
!1516 = !{!696, !1510, !1510}
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1502, file: !1500, line: 108, baseType: !1518, size: 64, offset: 128)
!1518 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1500, line: 63, baseType: !1519)
!1519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1520, size: 64)
!1520 = !DISubroutineType(types: !1521)
!1521 = !{null, !700}
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1502, file: !1500, line: 111, baseType: !1523, size: 64, offset: 192)
!1523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !700, size: 64)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1502, file: !1500, line: 114, baseType: !1172, size: 64, offset: 256)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1502, file: !1500, line: 117, baseType: !1172, size: 64, offset: 320)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1502, file: !1500, line: 120, baseType: !1172, size: 64, offset: 384)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1502, file: !1500, line: 124, baseType: !7, size: 32, offset: 448)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1502, file: !1500, line: 128, baseType: !7, size: 32, offset: 480)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1502, file: !1500, line: 131, baseType: !1530, size: 64, offset: 512)
!1530 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1500, line: 75, baseType: !1531)
!1531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1532, size: 64)
!1532 = !DISubroutineType(types: !1533)
!1533 = !{!700, !1172, !1172}
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1502, file: !1500, line: 132, baseType: !1535, size: 64, offset: 576)
!1535 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1500, line: 78, baseType: !1519)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1502, file: !1500, line: 135, baseType: !700, size: 64, offset: 640)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1502, file: !1500, line: 136, baseType: !1538, size: 64, offset: 704)
!1538 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1500, line: 82, baseType: !1539)
!1539 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1540, size: 64)
!1540 = !DISubroutineType(types: !1541)
!1541 = !{!700, !700, !1172, !1172}
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1502, file: !1500, line: 137, baseType: !1543, size: 64, offset: 768)
!1543 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1500, line: 83, baseType: !1544)
!1544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1545, size: 64)
!1545 = !DISubroutineType(types: !1546)
!1546 = !{null, !700, !700}
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1502, file: !1500, line: 141, baseType: !7, size: 32, offset: 832)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1420, file: !330, line: 211, baseType: !1549, size: 64, offset: 256)
!1549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1550, size: 64)
!1550 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !1551)
!1551 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !1552)
!1552 = !{!1553}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1551, file: !135, line: 183, baseType: !1554, size: 128)
!1554 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !1555)
!1555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !1556)
!1556 = !{!1557, !1558, !1559}
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1555, file: !135, line: 182, baseType: !7, size: 32)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1555, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1555, file: !135, line: 182, baseType: !1080, size: 64, offset: 64)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1420, file: !330, line: 220, baseType: !1561, size: 64, offset: 320)
!1561 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !330, line: 217, size: 64, elements: !1562)
!1562 = !{!1563, !1564}
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1561, file: !330, line: 218, baseType: !1549, size: 64)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1561, file: !330, line: 219, baseType: !1565, size: 64)
!1565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1566, size: 64)
!1566 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1567, line: 29, baseType: !1568)
!1567 = !DIFile(filename: "./vecprim.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1568 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1567, line: 29, size: 96, elements: !1569)
!1569 = !{!1570}
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1568, file: !1567, line: 29, baseType: !1571, size: 96)
!1571 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1567, line: 27, baseType: !1572)
!1572 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1567, line: 27, size: 96, elements: !1573)
!1573 = !{!1574, !1575, !1576}
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1572, file: !1567, line: 27, baseType: !7, size: 32)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1572, file: !1567, line: 27, baseType: !7, size: 32, offset: 32)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1572, file: !1567, line: 27, baseType: !1577, size: 8, offset: 64)
!1577 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1578, size: 8, elements: !803)
!1578 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1567, line: 26, baseType: !695)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1415, file: !1416, line: 467, baseType: !1580, size: 64, offset: 64)
!1580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1581, size: 64)
!1581 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !337, line: 374, size: 640, elements: !1582)
!1582 = !{!1583, !1585, !1586, !1599, !1600, !1601, !1602, !1603, !1604, !1606, !1608, !1609}
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1581, file: !337, line: 377, baseType: !1584, size: 64)
!1584 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !705, line: 111, baseType: !992)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1581, file: !337, line: 378, baseType: !1584, size: 64, offset: 64)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1581, file: !337, line: 381, baseType: !1587, size: 64, offset: 128)
!1587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1588, size: 64)
!1588 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !337, line: 282, baseType: !1589)
!1589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !337, line: 282, size: 128, elements: !1590)
!1590 = !{!1591}
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1589, file: !337, line: 282, baseType: !1592, size: 128)
!1592 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !337, line: 281, baseType: !1593)
!1593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !337, line: 281, size: 128, elements: !1594)
!1594 = !{!1595, !1596, !1597}
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1593, file: !337, line: 281, baseType: !7, size: 32)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1593, file: !337, line: 281, baseType: !7, size: 32, offset: 32)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1593, file: !337, line: 281, baseType: !1598, size: 64, offset: 64)
!1598 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1584, size: 64, elements: !803)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1581, file: !337, line: 384, baseType: !696, size: 32, offset: 192)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1581, file: !337, line: 387, baseType: !696, size: 32, offset: 224)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1581, file: !337, line: 390, baseType: !696, size: 32, offset: 256)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1581, file: !337, line: 394, baseType: !1587, size: 64, offset: 320)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1581, file: !337, line: 396, baseType: !336, size: 32, offset: 384)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1581, file: !337, line: 399, baseType: !1605, size: 64, offset: 416)
!1605 = !DICompositeType(tag: DW_TAG_array_type, baseType: !342, size: 64, elements: !947)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1581, file: !337, line: 402, baseType: !1607, size: 64, offset: 480)
!1607 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !947)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1581, file: !337, line: 406, baseType: !696, size: 32, offset: 544)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1581, file: !337, line: 409, baseType: !696, size: 32, offset: 576)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1415, file: !1416, line: 470, baseType: !1019, size: 64, offset: 128)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1415, file: !1416, line: 473, baseType: !1612, size: 64, offset: 192)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1366, line: 39, size: 1152, elements: !1614)
!1614 = !{!1615, !1616, !1629, !1630, !1631, !1643, !1644, !1648, !1649, !1650, !1651, !1652}
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1613, file: !1366, line: 41, baseType: !1499, size: 64)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1613, file: !1366, line: 48, baseType: !1617, size: 64, offset: 64)
!1617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1618, size: 64)
!1618 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !597, line: 35, baseType: !1619)
!1619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !597, line: 35, size: 128, elements: !1620)
!1620 = !{!1621}
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1619, file: !597, line: 35, baseType: !1622, size: 128)
!1622 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !597, line: 33, baseType: !1623)
!1623 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !597, line: 33, size: 128, elements: !1624)
!1624 = !{!1625, !1626, !1627}
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1623, file: !597, line: 33, baseType: !7, size: 32)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1623, file: !597, line: 33, baseType: !7, size: 32, offset: 32)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1623, file: !597, line: 33, baseType: !1628, size: 64, offset: 64)
!1628 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1028, size: 64, elements: !803)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1613, file: !1366, line: 51, baseType: !1549, size: 64, offset: 128)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1613, file: !1366, line: 54, baseType: !704, size: 64, offset: 192)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1613, file: !1366, line: 57, baseType: !1632, size: 128, offset: 256)
!1632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1633, line: 31, size: 128, elements: !1634)
!1633 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1634 = !{!1635, !1636, !1637, !1638, !1639, !1640, !1641}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1632, file: !1633, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1632, file: !1633, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1632, file: !1633, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1632, file: !1633, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1632, file: !1633, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1632, file: !1633, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1632, file: !1633, line: 56, baseType: !1642, size: 64, offset: 64)
!1642 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !705, line: 47, baseType: !931)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1613, file: !1366, line: 60, baseType: !1632, size: 128, offset: 384)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1613, file: !1366, line: 64, baseType: !1645, size: 64, offset: 512)
!1645 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1646, size: 64)
!1646 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1647, line: 33, flags: DIFlagFwdDecl)
!1647 = !DIFile(filename: "./pointer-set.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1613, file: !1366, line: 67, baseType: !704, size: 64, offset: 576)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1613, file: !1366, line: 73, baseType: !1499, size: 64, offset: 640)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1613, file: !1366, line: 77, baseType: !1642, size: 64, offset: 704)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1613, file: !1366, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1613, file: !1366, line: 82, baseType: !1653, size: 320, offset: 832)
!1653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !687, line: 62, size: 320, elements: !1654)
!1654 = !{!1655, !1661, !1662, !1663, !1664, !1665}
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1653, file: !687, line: 63, baseType: !1656, size: 64)
!1656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1657, size: 64)
!1657 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !687, line: 56, size: 128, elements: !1658)
!1658 = !{!1659, !1660}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1657, file: !687, line: 57, baseType: !1656, size: 64)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1657, file: !687, line: 58, baseType: !802, size: 8, offset: 64)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1653, file: !687, line: 64, baseType: !7, size: 32, offset: 64)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1653, file: !687, line: 66, baseType: !7, size: 32, offset: 96)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1653, file: !687, line: 68, baseType: !695, size: 8, offset: 128)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1653, file: !687, line: 70, baseType: !1057, size: 64, offset: 192)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1653, file: !687, line: 71, baseType: !1063, size: 64, offset: 256)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1415, file: !1416, line: 476, baseType: !1667, size: 64, offset: 256)
!1667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1668, size: 64)
!1668 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !1416, line: 476, flags: DIFlagFwdDecl)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1415, file: !1416, line: 479, baseType: !1499, size: 64, offset: 320)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1415, file: !1416, line: 484, baseType: !704, size: 64, offset: 384)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1415, file: !1416, line: 488, baseType: !704, size: 64, offset: 448)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1415, file: !1416, line: 493, baseType: !704, size: 64, offset: 512)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1415, file: !1416, line: 496, baseType: !704, size: 64, offset: 576)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1415, file: !1416, line: 501, baseType: !1675, size: 64, offset: 640)
!1675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1676, size: 64)
!1676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !348, line: 2355, size: 576, elements: !1677)
!1677 = !{!1678, !1681, !1682, !1683, !1684, !1686, !1687, !1692, !1693, !1694, !1695, !1696, !1697}
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1676, file: !348, line: 2356, baseType: !1679, size: 64)
!1679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1680, size: 64)
!1680 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !348, line: 2356, flags: DIFlagFwdDecl)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1676, file: !348, line: 2357, baseType: !701, size: 64, offset: 64)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1676, file: !348, line: 2358, baseType: !696, size: 32, offset: 128)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1676, file: !348, line: 2359, baseType: !696, size: 32, offset: 160)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1676, file: !348, line: 2360, baseType: !1685, size: 128, offset: 192)
!1685 = !DICompositeType(tag: DW_TAG_array_type, baseType: !696, size: 128, elements: !971)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1676, file: !348, line: 2364, baseType: !696, size: 32, offset: 320)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1676, file: !348, line: 2367, baseType: !1688, size: 128, offset: 384)
!1688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !348, line: 2349, size: 128, elements: !1689)
!1689 = !{!1690, !1691}
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1688, file: !348, line: 2351, baseType: !879, size: 64)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1688, file: !348, line: 2352, baseType: !760, size: 64, offset: 64)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1676, file: !348, line: 2371, baseType: !347, size: 32, offset: 512)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1676, file: !348, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1676, file: !348, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1676, file: !348, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1676, file: !348, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1676, file: !348, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1415, file: !1416, line: 504, baseType: !1699, size: 64, offset: 704)
!1699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1700, size: 64)
!1700 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1416, line: 504, flags: DIFlagFwdDecl)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1415, file: !1416, line: 507, baseType: !1499, size: 64, offset: 768)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1415, file: !1416, line: 510, baseType: !696, size: 32, offset: 832)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1415, file: !1416, line: 513, baseType: !696, size: 32, offset: 864)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1415, file: !1416, line: 516, baseType: !829, size: 32, offset: 896)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1415, file: !1416, line: 519, baseType: !829, size: 32, offset: 928)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1415, file: !1416, line: 522, baseType: !7, size: 32, offset: 960)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1415, file: !1416, line: 523, baseType: !7, size: 32, offset: 992)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1415, file: !1416, line: 528, baseType: !701, size: 64, offset: 1024)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1415, file: !1416, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1415, file: !1416, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1415, file: !1416, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1415, file: !1416, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1415, file: !1416, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1415, file: !1416, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1415, file: !1416, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1415, file: !1416, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1415, file: !1416, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1415, file: !1416, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1415, file: !1416, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1415, file: !1416, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1415, file: !1416, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1415, file: !1416, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1415, file: !1416, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1415, file: !1416, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1410, file: !135, line: 3254, baseType: !704, size: 64, offset: 1536)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1410, file: !135, line: 3257, baseType: !704, size: 64, offset: 1600)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1410, file: !135, line: 3258, baseType: !704, size: 64, offset: 1664)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1410, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1410, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1410, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1410, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1410, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1410, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1410, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1410, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1410, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1410, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1410, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1410, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1410, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1410, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1410, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1410, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1410, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1410, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !707, file: !135, line: 3394, baseType: !1747, size: 1344)
!1747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !1748)
!1748 = !{!1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790}
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1747, file: !135, line: 2280, baseType: !743, size: 192)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1747, file: !135, line: 2281, baseType: !704, size: 64, offset: 192)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1747, file: !135, line: 2282, baseType: !704, size: 64, offset: 256)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1747, file: !135, line: 2283, baseType: !704, size: 64, offset: 320)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1747, file: !135, line: 2284, baseType: !704, size: 64, offset: 384)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1747, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1747, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1747, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1747, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1747, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1747, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1747, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1747, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1747, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1747, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1747, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1747, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1747, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1747, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1747, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1747, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1747, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1747, file: !135, line: 2306, baseType: !1283, size: 32, offset: 544)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1747, file: !135, line: 2307, baseType: !704, size: 64, offset: 576)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1747, file: !135, line: 2308, baseType: !704, size: 64, offset: 640)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1747, file: !135, line: 2314, baseType: !1775, size: 64, offset: 704)
!1775 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !1776)
!1776 = !{!1777, !1778, !1779}
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1775, file: !135, line: 2310, baseType: !696, size: 32)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1775, file: !135, line: 2311, baseType: !701, size: 64)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1775, file: !135, line: 2312, baseType: !1780, size: 64)
!1780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1781, size: 64)
!1781 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1747, file: !135, line: 2315, baseType: !704, size: 64, offset: 768)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1747, file: !135, line: 2316, baseType: !704, size: 64, offset: 832)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1747, file: !135, line: 2317, baseType: !704, size: 64, offset: 896)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1747, file: !135, line: 2318, baseType: !704, size: 64, offset: 960)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1747, file: !135, line: 2319, baseType: !704, size: 64, offset: 1024)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1747, file: !135, line: 2320, baseType: !704, size: 64, offset: 1088)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1747, file: !135, line: 2321, baseType: !704, size: 64, offset: 1152)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1747, file: !135, line: 2322, baseType: !704, size: 64, offset: 1216)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1747, file: !135, line: 2324, baseType: !1791, size: 64, offset: 1280)
!1791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1792, size: 64)
!1792 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !707, file: !135, line: 3395, baseType: !1794, size: 320)
!1794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !1795)
!1795 = !{!1796, !1797, !1798}
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1794, file: !135, line: 1470, baseType: !743, size: 192)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1794, file: !135, line: 1471, baseType: !704, size: 64, offset: 192)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1794, file: !135, line: 1472, baseType: !704, size: 64, offset: 256)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !707, file: !135, line: 3396, baseType: !1800, size: 320)
!1800 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !1801)
!1801 = !{!1802, !1803, !1804}
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1800, file: !135, line: 1483, baseType: !743, size: 192)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1800, file: !135, line: 1484, baseType: !696, size: 32, offset: 192)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1800, file: !135, line: 1485, baseType: !1080, size: 64, offset: 256)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !707, file: !135, line: 3397, baseType: !1806, size: 384)
!1806 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !1807)
!1807 = !{!1808, !1809, !1810, !1811}
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1806, file: !135, line: 1830, baseType: !743, size: 192)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1806, file: !135, line: 1831, baseType: !829, size: 32, offset: 192)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1806, file: !135, line: 1832, baseType: !704, size: 64, offset: 256)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1806, file: !135, line: 1835, baseType: !1080, size: 64, offset: 320)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !707, file: !135, line: 3398, baseType: !1813, size: 704)
!1813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !1814)
!1814 = !{!1815, !1816, !1817, !1818, !1819, !1824}
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1813, file: !135, line: 1899, baseType: !743, size: 192)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1813, file: !135, line: 1902, baseType: !704, size: 64, offset: 192)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1813, file: !135, line: 1905, baseType: !1028, size: 64, offset: 256)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1813, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1813, file: !135, line: 1911, baseType: !1820, size: 64, offset: 384)
!1820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1821, size: 64)
!1821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1366, line: 117, size: 128, elements: !1822)
!1822 = !{!1823}
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1821, file: !1366, line: 120, baseType: !1632, size: 128)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1813, file: !135, line: 1914, baseType: !1068, size: 256, offset: 448)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !707, file: !135, line: 3399, baseType: !1826, size: 704)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !1827)
!1827 = !{!1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838}
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1826, file: !135, line: 2009, baseType: !743, size: 192)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1826, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1826, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1826, file: !135, line: 2014, baseType: !829, size: 32, offset: 224)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1826, file: !135, line: 2016, baseType: !704, size: 64, offset: 256)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1826, file: !135, line: 2017, baseType: !1549, size: 64, offset: 320)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1826, file: !135, line: 2019, baseType: !704, size: 64, offset: 384)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1826, file: !135, line: 2020, baseType: !704, size: 64, offset: 448)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1826, file: !135, line: 2021, baseType: !704, size: 64, offset: 512)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1826, file: !135, line: 2022, baseType: !704, size: 64, offset: 576)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1826, file: !135, line: 2023, baseType: !704, size: 64, offset: 640)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !707, file: !135, line: 3400, baseType: !1840, size: 832)
!1840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !1841)
!1841 = !{!1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1840, file: !135, line: 2431, baseType: !743, size: 192)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1840, file: !135, line: 2433, baseType: !704, size: 64, offset: 192)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1840, file: !135, line: 2434, baseType: !704, size: 64, offset: 256)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1840, file: !135, line: 2435, baseType: !704, size: 64, offset: 320)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1840, file: !135, line: 2436, baseType: !704, size: 64, offset: 384)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1840, file: !135, line: 2437, baseType: !1549, size: 64, offset: 448)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1840, file: !135, line: 2438, baseType: !704, size: 64, offset: 512)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1840, file: !135, line: 2440, baseType: !704, size: 64, offset: 576)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1840, file: !135, line: 2441, baseType: !704, size: 64, offset: 640)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1840, file: !135, line: 2443, baseType: !1852, size: 128, offset: 704)
!1852 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !1853)
!1853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !1854)
!1854 = !{!1855}
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1853, file: !135, line: 182, baseType: !1554, size: 128)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !707, file: !135, line: 3401, baseType: !1857, size: 320)
!1857 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !1858)
!1858 = !{!1859, !1860, !1867}
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1857, file: !135, line: 3329, baseType: !743, size: 192)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1857, file: !135, line: 3330, baseType: !1861, size: 64, offset: 192)
!1861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1862, size: 64)
!1862 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !1863)
!1863 = !{!1864, !1865, !1866}
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1862, file: !135, line: 3322, baseType: !1861, size: 64)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1862, file: !135, line: 3323, baseType: !1861, size: 64, offset: 64)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1862, file: !135, line: 3324, baseType: !704, size: 64, offset: 128)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1857, file: !135, line: 3331, baseType: !1861, size: 64, offset: 256)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !707, file: !135, line: 3402, baseType: !1869, size: 256)
!1869 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !1870)
!1870 = !{!1871, !1872}
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1869, file: !135, line: 1541, baseType: !743, size: 192)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1869, file: !135, line: 1542, baseType: !1873, size: 64, offset: 192)
!1873 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1874, size: 64)
!1874 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !1875)
!1875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !1876)
!1876 = !{!1877}
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1875, file: !135, line: 1538, baseType: !1878, size: 192)
!1878 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !1879)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !1880)
!1880 = !{!1881, !1882, !1883}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1879, file: !135, line: 1537, baseType: !7, size: 32)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1879, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1879, file: !135, line: 1537, baseType: !1884, size: 128, offset: 64)
!1884 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1885, size: 128, elements: !803)
!1885 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !1886)
!1886 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !1887)
!1887 = !{!1888, !1889}
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1886, file: !135, line: 1533, baseType: !704, size: 64)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1886, file: !135, line: 1534, baseType: !704, size: 64, offset: 64)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !707, file: !135, line: 3403, baseType: !1891, size: 512)
!1891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !1892)
!1892 = !{!1893, !1894, !1895, !1896, !1902, !1903, !1904}
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1891, file: !135, line: 1939, baseType: !743, size: 192)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1891, file: !135, line: 1940, baseType: !829, size: 32, offset: 192)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1891, file: !135, line: 1941, baseType: !352, size: 32, offset: 224)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1891, file: !135, line: 1946, baseType: !1897, size: 32, offset: 256)
!1897 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !1898)
!1898 = !{!1899, !1900, !1901}
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1897, file: !135, line: 1943, baseType: !370, size: 32)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1897, file: !135, line: 1944, baseType: !377, size: 32)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1897, file: !135, line: 1945, baseType: !134, size: 32)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1891, file: !135, line: 1950, baseType: !1018, size: 64, offset: 320)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1891, file: !135, line: 1951, baseType: !1018, size: 64, offset: 384)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1891, file: !135, line: 1953, baseType: !1080, size: 64, offset: 448)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !707, file: !135, line: 3404, baseType: !1906, size: 1664)
!1906 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !1907)
!1907 = !{!1908, !1909}
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1906, file: !135, line: 3338, baseType: !743, size: 192)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1906, file: !135, line: 3341, baseType: !1910, size: 1472, offset: 192)
!1910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1911, line: 410, size: 1472, elements: !1912)
!1911 = !DIFile(filename: "./options.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1912 = !{!1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076}
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1910, file: !1911, line: 412, baseType: !696, size: 32)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1910, file: !1911, line: 413, baseType: !696, size: 32, offset: 32)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1910, file: !1911, line: 414, baseType: !696, size: 32, offset: 64)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1910, file: !1911, line: 415, baseType: !696, size: 32, offset: 96)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1910, file: !1911, line: 416, baseType: !696, size: 32, offset: 128)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1910, file: !1911, line: 417, baseType: !696, size: 32, offset: 160)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1910, file: !1911, line: 418, baseType: !695, size: 8, offset: 192)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1910, file: !1911, line: 419, baseType: !695, size: 8, offset: 200)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1910, file: !1911, line: 420, baseType: !1922, size: 8, offset: 208)
!1922 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1910, file: !1911, line: 421, baseType: !1922, size: 8, offset: 216)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1910, file: !1911, line: 422, baseType: !1922, size: 8, offset: 224)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1910, file: !1911, line: 423, baseType: !1922, size: 8, offset: 232)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1910, file: !1911, line: 424, baseType: !1922, size: 8, offset: 240)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1910, file: !1911, line: 425, baseType: !1922, size: 8, offset: 248)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1910, file: !1911, line: 426, baseType: !1922, size: 8, offset: 256)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1910, file: !1911, line: 427, baseType: !1922, size: 8, offset: 264)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1910, file: !1911, line: 428, baseType: !1922, size: 8, offset: 272)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1910, file: !1911, line: 429, baseType: !1922, size: 8, offset: 280)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1910, file: !1911, line: 430, baseType: !1922, size: 8, offset: 288)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1910, file: !1911, line: 431, baseType: !1922, size: 8, offset: 296)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1910, file: !1911, line: 432, baseType: !1922, size: 8, offset: 304)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1910, file: !1911, line: 433, baseType: !1922, size: 8, offset: 312)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1910, file: !1911, line: 434, baseType: !1922, size: 8, offset: 320)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1910, file: !1911, line: 435, baseType: !1922, size: 8, offset: 328)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1910, file: !1911, line: 436, baseType: !1922, size: 8, offset: 336)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1910, file: !1911, line: 437, baseType: !1922, size: 8, offset: 344)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1910, file: !1911, line: 438, baseType: !1922, size: 8, offset: 352)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1910, file: !1911, line: 439, baseType: !1922, size: 8, offset: 360)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1910, file: !1911, line: 440, baseType: !1922, size: 8, offset: 368)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1910, file: !1911, line: 441, baseType: !1922, size: 8, offset: 376)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1910, file: !1911, line: 442, baseType: !1922, size: 8, offset: 384)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1910, file: !1911, line: 443, baseType: !1922, size: 8, offset: 392)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1910, file: !1911, line: 444, baseType: !1922, size: 8, offset: 400)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1910, file: !1911, line: 445, baseType: !1922, size: 8, offset: 408)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1910, file: !1911, line: 446, baseType: !1922, size: 8, offset: 416)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1910, file: !1911, line: 447, baseType: !1922, size: 8, offset: 424)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1910, file: !1911, line: 448, baseType: !1922, size: 8, offset: 432)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1910, file: !1911, line: 449, baseType: !1922, size: 8, offset: 440)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1910, file: !1911, line: 450, baseType: !1922, size: 8, offset: 448)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1910, file: !1911, line: 451, baseType: !1922, size: 8, offset: 456)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1910, file: !1911, line: 452, baseType: !1922, size: 8, offset: 464)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1910, file: !1911, line: 453, baseType: !1922, size: 8, offset: 472)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1910, file: !1911, line: 454, baseType: !1922, size: 8, offset: 480)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1910, file: !1911, line: 455, baseType: !1922, size: 8, offset: 488)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1910, file: !1911, line: 456, baseType: !1922, size: 8, offset: 496)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1910, file: !1911, line: 457, baseType: !1922, size: 8, offset: 504)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1910, file: !1911, line: 458, baseType: !1922, size: 8, offset: 512)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1910, file: !1911, line: 459, baseType: !1922, size: 8, offset: 520)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1910, file: !1911, line: 460, baseType: !1922, size: 8, offset: 528)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1910, file: !1911, line: 461, baseType: !1922, size: 8, offset: 536)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1910, file: !1911, line: 462, baseType: !1922, size: 8, offset: 544)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1910, file: !1911, line: 463, baseType: !1922, size: 8, offset: 552)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1910, file: !1911, line: 464, baseType: !1922, size: 8, offset: 560)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1910, file: !1911, line: 465, baseType: !1922, size: 8, offset: 568)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1910, file: !1911, line: 466, baseType: !1922, size: 8, offset: 576)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1910, file: !1911, line: 467, baseType: !1922, size: 8, offset: 584)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1910, file: !1911, line: 468, baseType: !1922, size: 8, offset: 592)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1910, file: !1911, line: 469, baseType: !1922, size: 8, offset: 600)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1910, file: !1911, line: 470, baseType: !1922, size: 8, offset: 608)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1910, file: !1911, line: 471, baseType: !1922, size: 8, offset: 616)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1910, file: !1911, line: 472, baseType: !1922, size: 8, offset: 624)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1910, file: !1911, line: 473, baseType: !1922, size: 8, offset: 632)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1910, file: !1911, line: 474, baseType: !1922, size: 8, offset: 640)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1910, file: !1911, line: 475, baseType: !1922, size: 8, offset: 648)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1910, file: !1911, line: 476, baseType: !1922, size: 8, offset: 656)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1910, file: !1911, line: 477, baseType: !1922, size: 8, offset: 664)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1910, file: !1911, line: 478, baseType: !1922, size: 8, offset: 672)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1910, file: !1911, line: 479, baseType: !1922, size: 8, offset: 680)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1910, file: !1911, line: 480, baseType: !1922, size: 8, offset: 688)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1910, file: !1911, line: 481, baseType: !1922, size: 8, offset: 696)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1910, file: !1911, line: 482, baseType: !1922, size: 8, offset: 704)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1910, file: !1911, line: 483, baseType: !1922, size: 8, offset: 712)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1910, file: !1911, line: 484, baseType: !1922, size: 8, offset: 720)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1910, file: !1911, line: 485, baseType: !1922, size: 8, offset: 728)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1910, file: !1911, line: 486, baseType: !1922, size: 8, offset: 736)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1910, file: !1911, line: 487, baseType: !1922, size: 8, offset: 744)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1910, file: !1911, line: 488, baseType: !1922, size: 8, offset: 752)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1910, file: !1911, line: 489, baseType: !1922, size: 8, offset: 760)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1910, file: !1911, line: 490, baseType: !1922, size: 8, offset: 768)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1910, file: !1911, line: 491, baseType: !1922, size: 8, offset: 776)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1910, file: !1911, line: 492, baseType: !1922, size: 8, offset: 784)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1910, file: !1911, line: 493, baseType: !1922, size: 8, offset: 792)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1910, file: !1911, line: 494, baseType: !1922, size: 8, offset: 800)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1910, file: !1911, line: 495, baseType: !1922, size: 8, offset: 808)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1910, file: !1911, line: 496, baseType: !1922, size: 8, offset: 816)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1910, file: !1911, line: 497, baseType: !1922, size: 8, offset: 824)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1910, file: !1911, line: 498, baseType: !1922, size: 8, offset: 832)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1910, file: !1911, line: 499, baseType: !1922, size: 8, offset: 840)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1910, file: !1911, line: 500, baseType: !1922, size: 8, offset: 848)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1910, file: !1911, line: 501, baseType: !1922, size: 8, offset: 856)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1910, file: !1911, line: 502, baseType: !1922, size: 8, offset: 864)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1910, file: !1911, line: 503, baseType: !1922, size: 8, offset: 872)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1910, file: !1911, line: 504, baseType: !1922, size: 8, offset: 880)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1910, file: !1911, line: 505, baseType: !1922, size: 8, offset: 888)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1910, file: !1911, line: 506, baseType: !1922, size: 8, offset: 896)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1910, file: !1911, line: 507, baseType: !1922, size: 8, offset: 904)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1910, file: !1911, line: 508, baseType: !1922, size: 8, offset: 912)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1910, file: !1911, line: 509, baseType: !1922, size: 8, offset: 920)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1910, file: !1911, line: 510, baseType: !1922, size: 8, offset: 928)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1910, file: !1911, line: 511, baseType: !1922, size: 8, offset: 936)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1910, file: !1911, line: 512, baseType: !1922, size: 8, offset: 944)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1910, file: !1911, line: 513, baseType: !1922, size: 8, offset: 952)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1910, file: !1911, line: 514, baseType: !1922, size: 8, offset: 960)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1910, file: !1911, line: 515, baseType: !1922, size: 8, offset: 968)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1910, file: !1911, line: 516, baseType: !1922, size: 8, offset: 976)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1910, file: !1911, line: 517, baseType: !1922, size: 8, offset: 984)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1910, file: !1911, line: 518, baseType: !1922, size: 8, offset: 992)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1910, file: !1911, line: 519, baseType: !1922, size: 8, offset: 1000)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1910, file: !1911, line: 520, baseType: !1922, size: 8, offset: 1008)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1910, file: !1911, line: 521, baseType: !1922, size: 8, offset: 1016)
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1910, file: !1911, line: 522, baseType: !1922, size: 8, offset: 1024)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1910, file: !1911, line: 523, baseType: !1922, size: 8, offset: 1032)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1910, file: !1911, line: 524, baseType: !1922, size: 8, offset: 1040)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1910, file: !1911, line: 525, baseType: !1922, size: 8, offset: 1048)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1910, file: !1911, line: 526, baseType: !1922, size: 8, offset: 1056)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1910, file: !1911, line: 527, baseType: !1922, size: 8, offset: 1064)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1910, file: !1911, line: 528, baseType: !1922, size: 8, offset: 1072)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1910, file: !1911, line: 529, baseType: !1922, size: 8, offset: 1080)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1910, file: !1911, line: 530, baseType: !1922, size: 8, offset: 1088)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1910, file: !1911, line: 531, baseType: !1922, size: 8, offset: 1096)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1910, file: !1911, line: 532, baseType: !1922, size: 8, offset: 1104)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1910, file: !1911, line: 533, baseType: !1922, size: 8, offset: 1112)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1910, file: !1911, line: 534, baseType: !1922, size: 8, offset: 1120)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1910, file: !1911, line: 535, baseType: !1922, size: 8, offset: 1128)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1910, file: !1911, line: 536, baseType: !1922, size: 8, offset: 1136)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1910, file: !1911, line: 537, baseType: !1922, size: 8, offset: 1144)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1910, file: !1911, line: 538, baseType: !1922, size: 8, offset: 1152)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1910, file: !1911, line: 539, baseType: !1922, size: 8, offset: 1160)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1910, file: !1911, line: 540, baseType: !1922, size: 8, offset: 1168)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1910, file: !1911, line: 541, baseType: !1922, size: 8, offset: 1176)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1910, file: !1911, line: 542, baseType: !1922, size: 8, offset: 1184)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1910, file: !1911, line: 543, baseType: !1922, size: 8, offset: 1192)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1910, file: !1911, line: 544, baseType: !1922, size: 8, offset: 1200)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1910, file: !1911, line: 545, baseType: !1922, size: 8, offset: 1208)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1910, file: !1911, line: 546, baseType: !1922, size: 8, offset: 1216)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1910, file: !1911, line: 547, baseType: !1922, size: 8, offset: 1224)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1910, file: !1911, line: 548, baseType: !1922, size: 8, offset: 1232)
!2051 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1910, file: !1911, line: 549, baseType: !1922, size: 8, offset: 1240)
!2052 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1910, file: !1911, line: 550, baseType: !1922, size: 8, offset: 1248)
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1910, file: !1911, line: 551, baseType: !1922, size: 8, offset: 1256)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1910, file: !1911, line: 552, baseType: !1922, size: 8, offset: 1264)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1910, file: !1911, line: 553, baseType: !1922, size: 8, offset: 1272)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1910, file: !1911, line: 554, baseType: !1922, size: 8, offset: 1280)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1910, file: !1911, line: 555, baseType: !1922, size: 8, offset: 1288)
!2058 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1910, file: !1911, line: 556, baseType: !1922, size: 8, offset: 1296)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1910, file: !1911, line: 557, baseType: !1922, size: 8, offset: 1304)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1910, file: !1911, line: 558, baseType: !1922, size: 8, offset: 1312)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1910, file: !1911, line: 559, baseType: !1922, size: 8, offset: 1320)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1910, file: !1911, line: 560, baseType: !1922, size: 8, offset: 1328)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1910, file: !1911, line: 561, baseType: !1922, size: 8, offset: 1336)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1910, file: !1911, line: 562, baseType: !1922, size: 8, offset: 1344)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1910, file: !1911, line: 563, baseType: !1922, size: 8, offset: 1352)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1910, file: !1911, line: 564, baseType: !1922, size: 8, offset: 1360)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1910, file: !1911, line: 565, baseType: !1922, size: 8, offset: 1368)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1910, file: !1911, line: 566, baseType: !1922, size: 8, offset: 1376)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1910, file: !1911, line: 567, baseType: !1922, size: 8, offset: 1384)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1910, file: !1911, line: 568, baseType: !1922, size: 8, offset: 1392)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1910, file: !1911, line: 569, baseType: !1922, size: 8, offset: 1400)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1910, file: !1911, line: 570, baseType: !1922, size: 8, offset: 1408)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1910, file: !1911, line: 571, baseType: !1922, size: 8, offset: 1416)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1910, file: !1911, line: 572, baseType: !1922, size: 8, offset: 1424)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1910, file: !1911, line: 573, baseType: !1922, size: 8, offset: 1432)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1910, file: !1911, line: 574, baseType: !1922, size: 8, offset: 1440)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !707, file: !135, line: 3405, baseType: !2078, size: 384)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2079)
!2079 = !{!2080, !2081}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2078, file: !135, line: 3353, baseType: !743, size: 192)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2078, file: !135, line: 3356, baseType: !2082, size: 192, offset: 192)
!2082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1911, line: 578, size: 192, elements: !2083)
!2083 = !{!2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094}
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2082, file: !1911, line: 580, baseType: !696, size: 32)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2082, file: !1911, line: 581, baseType: !696, size: 32, offset: 32)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2082, file: !1911, line: 582, baseType: !696, size: 32, offset: 64)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2082, file: !1911, line: 583, baseType: !696, size: 32, offset: 96)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2082, file: !1911, line: 584, baseType: !695, size: 8, offset: 128)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2082, file: !1911, line: 585, baseType: !695, size: 8, offset: 136)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2082, file: !1911, line: 586, baseType: !695, size: 8, offset: 144)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2082, file: !1911, line: 587, baseType: !695, size: 8, offset: 152)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2082, file: !1911, line: 588, baseType: !695, size: 8, offset: 160)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2082, file: !1911, line: 589, baseType: !695, size: 8, offset: 168)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2082, file: !1911, line: 590, baseType: !695, size: 8, offset: 176)
!2095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2096, size: 64)
!2096 = !DIDerivedType(tag: DW_TAG_typedef, name: "copy_body_data", file: !591, line: 129, baseType: !2097)
!2097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "copy_body_data", file: !591, line: 42, size: 1216, elements: !2098)
!2098 = !{!2099, !2100, !2101, !2331, !2332, !2333, !2334, !2335, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2354, !2357, !2358, !2364}
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "src_fn", scope: !2097, file: !591, line: 46, baseType: !704, size: 64)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "dst_fn", scope: !2097, file: !591, line: 50, baseType: !704, size: 64, offset: 64)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "src_node", scope: !2097, file: !591, line: 53, baseType: !2102, size: 64, offset: 128)
!2102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2103, size: 64)
!2103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node", file: !385, line: 181, size: 2496, elements: !2104)
!2104 = !{!2105, !2106, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2246, !2268, !2278, !2282, !2308, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330}
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2103, file: !385, line: 182, baseType: !704, size: 64)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "callees", scope: !2103, file: !385, line: 183, baseType: !2107, size: 64, offset: 64)
!2107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2108, size: 64)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_edge", file: !385, line: 314, size: 768, elements: !2109)
!2109 = !{!2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2121, !2122, !2123, !2124, !2126, !2127, !2128}
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2108, file: !385, line: 316, baseType: !1238, size: 64)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !2108, file: !385, line: 317, baseType: !2102, size: 64, offset: 64)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "callee", scope: !2108, file: !385, line: 318, baseType: !2102, size: 64, offset: 128)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "prev_caller", scope: !2108, file: !385, line: 319, baseType: !2107, size: 64, offset: 192)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "next_caller", scope: !2108, file: !385, line: 320, baseType: !2107, size: 64, offset: 256)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "prev_callee", scope: !2108, file: !385, line: 321, baseType: !2107, size: 64, offset: 320)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "next_callee", scope: !2108, file: !385, line: 322, baseType: !2107, size: 64, offset: 384)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt", scope: !2108, file: !385, line: 323, baseType: !1028, size: 64, offset: 448)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2108, file: !385, line: 324, baseType: !700, size: 64, offset: 512)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "inline_failed", scope: !2108, file: !385, line: 327, baseType: !2120, size: 32, offset: 576)
!2120 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_inline_failed_t", file: !385, line: 312, baseType: !384)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "lto_stmt_uid", scope: !2108, file: !385, line: 330, baseType: !7, size: 32, offset: 608)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2108, file: !385, line: 334, baseType: !696, size: 32, offset: 640)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2108, file: !385, line: 336, baseType: !696, size: 32, offset: 672)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !2108, file: !385, line: 338, baseType: !2125, size: 16, offset: 704)
!2125 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "indirect_call", scope: !2108, file: !385, line: 340, baseType: !7, size: 1, offset: 720, flags: DIFlagBitField, extraData: i64 720)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "call_stmt_cannot_inline_p", scope: !2108, file: !385, line: 342, baseType: !7, size: 1, offset: 721, flags: DIFlagBitField, extraData: i64 720)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "can_throw_external", scope: !2108, file: !385, line: 344, baseType: !7, size: 1, offset: 722, flags: DIFlagBitField, extraData: i64 720)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "callers", scope: !2103, file: !385, line: 184, baseType: !2107, size: 64, offset: 128)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2103, file: !385, line: 185, baseType: !2102, size: 64, offset: 192)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "previous", scope: !2103, file: !385, line: 186, baseType: !2102, size: 64, offset: 256)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "origin", scope: !2103, file: !385, line: 188, baseType: !2102, size: 64, offset: 320)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "nested", scope: !2103, file: !385, line: 190, baseType: !2102, size: 64, offset: 384)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "next_nested", scope: !2103, file: !385, line: 192, baseType: !2102, size: 64, offset: 448)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2103, file: !385, line: 194, baseType: !2102, size: 64, offset: 512)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "next_sibling_clone", scope: !2103, file: !385, line: 196, baseType: !2102, size: 64, offset: 576)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sibling_clone", scope: !2103, file: !385, line: 197, baseType: !2102, size: 64, offset: 640)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "clones", scope: !2103, file: !385, line: 198, baseType: !2102, size: 64, offset: 704)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "clone_of", scope: !2103, file: !385, line: 199, baseType: !2102, size: 64, offset: 768)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "same_body", scope: !2103, file: !385, line: 202, baseType: !2102, size: 64, offset: 832)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "same_comdat_group", scope: !2103, file: !385, line: 204, baseType: !2102, size: 64, offset: 896)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "call_site_hash", scope: !2103, file: !385, line: 207, baseType: !1499, size: 64, offset: 960)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2103, file: !385, line: 209, baseType: !700, size: 64, offset: 1024)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "ipa_transforms_to_apply", scope: !2103, file: !385, line: 214, baseType: !2145, size: 64, offset: 1088)
!2145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2146, size: 64)
!2146 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_heap", file: !1416, line: 177, baseType: !2147)
!2147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_heap", file: !1416, line: 177, size: 128, elements: !2148)
!2148 = !{!2149}
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2147, file: !1416, line: 177, baseType: !2150, size: 128)
!2150 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_opt_pass_base", file: !1416, line: 176, baseType: !2151)
!2151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_opt_pass_base", file: !1416, line: 176, size: 128, elements: !2152)
!2152 = !{!2153, !2154, !2155}
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2151, file: !1416, line: 176, baseType: !7, size: 32)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2151, file: !1416, line: 176, baseType: !7, size: 32, offset: 32)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2151, file: !1416, line: 176, baseType: !2156, size: 64, offset: 64)
!2156 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2157, size: 64, elements: !803)
!2157 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_opt_pass", file: !1416, line: 174, baseType: !2158)
!2158 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2159, size: 64)
!2159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_opt_pass_d", file: !408, line: 173, size: 1152, elements: !2160)
!2160 = !{!2161, !2185, !2189, !2212, !2213, !2217, !2222, !2223, !2227}
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2159, file: !408, line: 175, baseType: !2162, size: 640)
!2162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !408, line: 114, size: 640, elements: !2163)
!2163 = !{!2164, !2165, !2166, !2170, !2174, !2176, !2177, !2178, !2180, !2181, !2182, !2183, !2184}
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2162, file: !408, line: 117, baseType: !407, size: 32)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2162, file: !408, line: 121, baseType: !701, size: 64, offset: 64)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2162, file: !408, line: 125, baseType: !2167, size: 64, offset: 128)
!2167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2168, size: 64)
!2168 = !DISubroutineType(types: !2169)
!2169 = !{!695}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2162, file: !408, line: 130, baseType: !2171, size: 64, offset: 192)
!2171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2172, size: 64)
!2172 = !DISubroutineType(types: !2173)
!2173 = !{!7}
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2162, file: !408, line: 133, baseType: !2175, size: 64, offset: 256)
!2175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2162, size: 64)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2162, file: !408, line: 136, baseType: !2175, size: 64, offset: 320)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2162, file: !408, line: 139, baseType: !696, size: 32, offset: 384)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2162, file: !408, line: 143, baseType: !2179, size: 32, offset: 416)
!2179 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !415, line: 80, baseType: !414)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2162, file: !408, line: 146, baseType: !7, size: 32, offset: 448)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2162, file: !408, line: 147, baseType: !7, size: 32, offset: 480)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2162, file: !408, line: 148, baseType: !7, size: 32, offset: 512)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2162, file: !408, line: 151, baseType: !7, size: 32, offset: 544)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2162, file: !408, line: 152, baseType: !7, size: 32, offset: 576)
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "generate_summary", scope: !2159, file: !408, line: 179, baseType: !2186, size: 64, offset: 640)
!2186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2187, size: 64)
!2187 = !DISubroutineType(types: !2188)
!2188 = !{null}
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "write_summary", scope: !2159, file: !408, line: 182, baseType: !2190, size: 64, offset: 704)
!2190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2191, size: 64)
!2191 = !DISubroutineType(types: !2192)
!2192 = !{null, !2193}
!2193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2194, size: 64)
!2194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_node_set_def", file: !385, line: 276, size: 192, elements: !2195)
!2195 = !{!2196, !2197, !2211}
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "hashtab", scope: !2194, file: !385, line: 278, baseType: !1499, size: 64)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "nodes", scope: !2194, file: !385, line: 279, baseType: !2198, size: 64, offset: 64)
!2198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2199, size: 64)
!2199 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_gc", file: !385, line: 272, baseType: !2200)
!2200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_gc", file: !385, line: 272, size: 128, elements: !2201)
!2201 = !{!2202}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2200, file: !385, line: 272, baseType: !2203, size: 128)
!2203 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_cgraph_node_ptr_base", file: !385, line: 270, baseType: !2204)
!2204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_cgraph_node_ptr_base", file: !385, line: 270, size: 128, elements: !2205)
!2205 = !{!2206, !2207, !2208}
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2204, file: !385, line: 270, baseType: !7, size: 32)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2204, file: !385, line: 270, baseType: !7, size: 32, offset: 32)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2204, file: !385, line: 270, baseType: !2209, size: 64, offset: 64)
!2209 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2210, size: 64, elements: !803)
!2210 = !DIDerivedType(tag: DW_TAG_typedef, name: "cgraph_node_ptr", file: !385, line: 268, baseType: !2102)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2194, file: !385, line: 280, baseType: !700, size: 64, offset: 128)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "read_summary", scope: !2159, file: !408, line: 187, baseType: !2186, size: 64, offset: 768)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "function_read_summary", scope: !2159, file: !408, line: 188, baseType: !2214, size: 64, offset: 832)
!2214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2215, size: 64)
!2215 = !DISubroutineType(types: !2216)
!2216 = !{null, !2102}
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_fixup", scope: !2159, file: !408, line: 191, baseType: !2218, size: 64, offset: 896)
!2218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2219, size: 64)
!2219 = !DISubroutineType(types: !2220)
!2220 = !{null, !2102, !2221}
!2221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1028, size: 64)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform_todo_flags_start", scope: !2159, file: !408, line: 195, baseType: !7, size: 32, offset: 960)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "function_transform", scope: !2159, file: !408, line: 196, baseType: !2224, size: 64, offset: 1024)
!2224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2225, size: 64)
!2225 = !DISubroutineType(types: !2226)
!2226 = !{!7, !2102}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "variable_transform", scope: !2159, file: !408, line: 197, baseType: !2228, size: 64, offset: 1088)
!2228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2229, size: 64)
!2229 = !DISubroutineType(types: !2230)
!2230 = !{null, !2231}
!2231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2232, size: 64)
!2232 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "varpool_node", file: !385, line: 358, size: 320, elements: !2233)
!2233 = !{!2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245}
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2232, file: !385, line: 359, baseType: !704, size: 64)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2232, file: !385, line: 361, baseType: !2231, size: 64, offset: 64)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "next_needed", scope: !2232, file: !385, line: 363, baseType: !2231, size: 64, offset: 128)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "extra_name", scope: !2232, file: !385, line: 366, baseType: !2231, size: 64, offset: 192)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2232, file: !385, line: 368, baseType: !696, size: 32, offset: 256)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2232, file: !385, line: 372, baseType: !7, size: 1, offset: 288, flags: DIFlagBitField, extraData: i64 288)
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "force_output", scope: !2232, file: !385, line: 375, baseType: !7, size: 1, offset: 289, flags: DIFlagBitField, extraData: i64 288)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2232, file: !385, line: 378, baseType: !7, size: 1, offset: 290, flags: DIFlagBitField, extraData: i64 288)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2232, file: !385, line: 380, baseType: !7, size: 1, offset: 291, flags: DIFlagBitField, extraData: i64 288)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "output", scope: !2232, file: !385, line: 382, baseType: !7, size: 1, offset: 292, flags: DIFlagBitField, extraData: i64 288)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2232, file: !385, line: 384, baseType: !7, size: 1, offset: 293, flags: DIFlagBitField, extraData: i64 288)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2232, file: !385, line: 387, baseType: !7, size: 1, offset: 294, flags: DIFlagBitField, extraData: i64 288)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2103, file: !385, line: 216, baseType: !2247, size: 320, offset: 1152)
!2247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_local_info", file: !385, line: 88, size: 320, elements: !2248)
!2248 = !{!2249, !2252, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267}
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "lto_file_data", scope: !2247, file: !385, line: 90, baseType: !2250, size: 64)
!2250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2251, size: 64)
!2251 = !DICompositeType(tag: DW_TAG_structure_type, name: "lto_file_decl_data", file: !385, line: 51, flags: DIFlagFwdDecl)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "inline_summary", scope: !2247, file: !385, line: 92, baseType: !2253, size: 192, offset: 64)
!2253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inline_summary", file: !385, line: 57, size: 192, elements: !2254)
!2254 = !{!2255, !2256, !2257, !2258, !2259}
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_self_stack_size", scope: !2253, file: !385, line: 60, baseType: !760, size: 64)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "self_size", scope: !2253, file: !385, line: 63, baseType: !696, size: 32, offset: 64)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "size_inlining_benefit", scope: !2253, file: !385, line: 65, baseType: !696, size: 32, offset: 96)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "self_time", scope: !2253, file: !385, line: 67, baseType: !696, size: 32, offset: 128)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "time_inlining_benefit", scope: !2253, file: !385, line: 69, baseType: !696, size: 32, offset: 160)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "local", scope: !2247, file: !385, line: 96, baseType: !7, size: 1, offset: 256, flags: DIFlagBitField, extraData: i64 256)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "externally_visible", scope: !2247, file: !385, line: 99, baseType: !7, size: 1, offset: 257, flags: DIFlagBitField, extraData: i64 256)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "finalized", scope: !2247, file: !385, line: 102, baseType: !7, size: 1, offset: 258, flags: DIFlagBitField, extraData: i64 256)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "inlinable", scope: !2247, file: !385, line: 105, baseType: !7, size: 1, offset: 259, flags: DIFlagBitField, extraData: i64 256)
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2247, file: !385, line: 108, baseType: !7, size: 1, offset: 260, flags: DIFlagBitField, extraData: i64 256)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "redefined_extern_inline", scope: !2247, file: !385, line: 112, baseType: !7, size: 1, offset: 261, flags: DIFlagBitField, extraData: i64 256)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "for_functions_valid", scope: !2247, file: !385, line: 116, baseType: !7, size: 1, offset: 262, flags: DIFlagBitField, extraData: i64 256)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "vtable_method", scope: !2247, file: !385, line: 120, baseType: !7, size: 1, offset: 263, flags: DIFlagBitField, extraData: i64 256)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "global", scope: !2103, file: !385, line: 217, baseType: !2269, size: 320, offset: 1472)
!2269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_global_info", file: !385, line: 126, size: 320, elements: !2270)
!2270 = !{!2271, !2272, !2273, !2274, !2275, !2276, !2277}
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_stack_size", scope: !2269, file: !385, line: 128, baseType: !760, size: 64)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "stack_frame_offset", scope: !2269, file: !385, line: 130, baseType: !760, size: 64, offset: 64)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "inlined_to", scope: !2269, file: !385, line: 134, baseType: !2102, size: 64, offset: 128)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !2269, file: !385, line: 137, baseType: !696, size: 32, offset: 192)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2269, file: !385, line: 138, baseType: !696, size: 32, offset: 224)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "estimated_growth", scope: !2269, file: !385, line: 141, baseType: !696, size: 32, offset: 256)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "inlined", scope: !2269, file: !385, line: 144, baseType: !695, size: 8, offset: 288)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2103, file: !385, line: 218, baseType: !2279, size: 32, offset: 1792)
!2279 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !385, line: 150, size: 32, elements: !2280)
!2280 = !{!2281}
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !2279, file: !385, line: 151, baseType: !7, size: 32)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "clone", scope: !2103, file: !385, line: 219, baseType: !2283, size: 192, offset: 1856)
!2283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_clone_info", file: !385, line: 171, size: 192, elements: !2284)
!2284 = !{!2285, !2306, !2307}
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "tree_map", scope: !2283, file: !385, line: 173, baseType: !2286, size: 64)
!2286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2287, size: 64)
!2287 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_gc", file: !385, line: 169, baseType: !2288)
!2288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_gc", file: !385, line: 169, size: 128, elements: !2289)
!2289 = !{!2290}
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2288, file: !385, line: 169, baseType: !2291, size: 128)
!2291 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ipa_replace_map_p_base", file: !385, line: 168, baseType: !2292)
!2292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ipa_replace_map_p_base", file: !385, line: 168, size: 128, elements: !2293)
!2293 = !{!2294, !2295, !2296}
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2292, file: !385, line: 168, baseType: !7, size: 32)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2292, file: !385, line: 168, baseType: !7, size: 32, offset: 32)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2292, file: !385, line: 168, baseType: !2297, size: 64, offset: 64)
!2297 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2298, size: 64, elements: !803)
!2298 = !DIDerivedType(tag: DW_TAG_typedef, name: "ipa_replace_map_p", file: !385, line: 167, baseType: !2299)
!2299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2300, size: 64)
!2300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ipa_replace_map", file: !385, line: 156, size: 192, elements: !2301)
!2301 = !{!2302, !2303, !2304, !2305}
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "old_tree", scope: !2300, file: !385, line: 159, baseType: !704, size: 64)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "new_tree", scope: !2300, file: !385, line: 161, baseType: !704, size: 64, offset: 64)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "replace_p", scope: !2300, file: !385, line: 163, baseType: !695, size: 8, offset: 128)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "ref_p", scope: !2300, file: !385, line: 165, baseType: !695, size: 8, offset: 136)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "args_to_skip", scope: !2283, file: !385, line: 174, baseType: !1642, size: 64, offset: 64)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "combined_args_to_skip", scope: !2283, file: !385, line: 175, baseType: !1642, size: 64, offset: 128)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "thunk", scope: !2103, file: !385, line: 220, baseType: !2309, size: 256, offset: 2048)
!2309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_thunk_info", file: !385, line: 74, size: 256, elements: !2310)
!2310 = !{!2311, !2312, !2313, !2314, !2315, !2316}
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_offset", scope: !2309, file: !385, line: 76, baseType: !760, size: 64)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_value", scope: !2309, file: !385, line: 77, baseType: !760, size: 64, offset: 64)
!2313 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2309, file: !385, line: 78, baseType: !704, size: 64, offset: 128)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "this_adjusting", scope: !2309, file: !385, line: 79, baseType: !695, size: 8, offset: 192)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_offset_p", scope: !2309, file: !385, line: 80, baseType: !695, size: 8, offset: 200)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "thunk_p", scope: !2309, file: !385, line: 82, baseType: !695, size: 8, offset: 208)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2103, file: !385, line: 223, baseType: !1238, size: 64, offset: 2304)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2103, file: !385, line: 225, baseType: !696, size: 32, offset: 2368)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "order", scope: !2103, file: !385, line: 227, baseType: !696, size: 32, offset: 2400)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !2103, file: !385, line: 231, baseType: !696, size: 32, offset: 2432)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "needed", scope: !2103, file: !385, line: 238, baseType: !7, size: 1, offset: 2464, flags: DIFlagBitField, extraData: i64 2464)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "address_taken", scope: !2103, file: !385, line: 241, baseType: !7, size: 1, offset: 2465, flags: DIFlagBitField, extraData: i64 2464)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_and_needed", scope: !2103, file: !385, line: 244, baseType: !7, size: 1, offset: 2466, flags: DIFlagBitField, extraData: i64 2464)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "reachable", scope: !2103, file: !385, line: 251, baseType: !7, size: 1, offset: 2467, flags: DIFlagBitField, extraData: i64 2464)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "lowered", scope: !2103, file: !385, line: 253, baseType: !7, size: 1, offset: 2468, flags: DIFlagBitField, extraData: i64 2464)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed", scope: !2103, file: !385, line: 256, baseType: !7, size: 1, offset: 2469, flags: DIFlagBitField, extraData: i64 2464)
!2327 = !DIDerivedType(tag: DW_TAG_member, name: "process", scope: !2103, file: !385, line: 258, baseType: !7, size: 1, offset: 2470, flags: DIFlagBitField, extraData: i64 2464)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2103, file: !385, line: 260, baseType: !7, size: 1, offset: 2471, flags: DIFlagBitField, extraData: i64 2464)
!2329 = !DIDerivedType(tag: DW_TAG_member, name: "finalized_by_frontend", scope: !2103, file: !385, line: 262, baseType: !7, size: 1, offset: 2472, flags: DIFlagBitField, extraData: i64 2464)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "same_body_alias", scope: !2103, file: !385, line: 265, baseType: !7, size: 1, offset: 2473, flags: DIFlagBitField, extraData: i64 2464)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "dst_node", scope: !2097, file: !591, line: 56, baseType: !2102, size: 64, offset: 192)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "src_cfun", scope: !2097, file: !591, line: 61, baseType: !1414, size: 64, offset: 256)
!2333 = !DIDerivedType(tag: DW_TAG_member, name: "retvar", scope: !2097, file: !591, line: 64, baseType: !704, size: 64, offset: 320)
!2334 = !DIDerivedType(tag: DW_TAG_member, name: "decl_map", scope: !2097, file: !591, line: 68, baseType: !1645, size: 64, offset: 384)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "copy_decl", scope: !2097, file: !591, line: 71, baseType: !2336, size: 64, offset: 448)
!2336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2337, size: 64)
!2337 = !DISubroutineType(types: !2338)
!2338 = !{!704, !704, !2339}
!2339 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2097, size: 64)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2097, file: !591, line: 74, baseType: !704, size: 64, offset: 512)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_call", scope: !2097, file: !591, line: 78, baseType: !1028, size: 64, offset: 576)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "eh_lp_nr", scope: !2097, file: !591, line: 81, baseType: !696, size: 32, offset: 640)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "eh_map", scope: !2097, file: !591, line: 85, baseType: !1645, size: 64, offset: 704)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "transform_call_graph_edges", scope: !2097, file: !591, line: 92, baseType: !590, size: 32, offset: 768)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "transform_new_cfg", scope: !2097, file: !591, line: 96, baseType: !695, size: 8, offset: 800)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "transform_return_to_modify", scope: !2097, file: !591, line: 101, baseType: !695, size: 8, offset: 808)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "regimplify", scope: !2097, file: !591, line: 104, baseType: !695, size: 8, offset: 816)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "do_not_unshare", scope: !2097, file: !591, line: 107, baseType: !695, size: 8, offset: 824)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "remapping_type_depth", scope: !2097, file: !591, line: 110, baseType: !696, size: 32, offset: 832)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "transform_lang_insert_block", scope: !2097, file: !591, line: 113, baseType: !2351, size: 64, offset: 896)
!2351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2352, size: 64)
!2352 = !DISubroutineType(types: !2353)
!2353 = !{null, !704}
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "statements_to_fold", scope: !2097, file: !591, line: 116, baseType: !2355, size: 64, offset: 960)
!2355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2356, size: 64)
!2356 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !135, line: 5199, flags: DIFlagFwdDecl)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "entry_bb", scope: !2097, file: !591, line: 119, baseType: !992, size: 64, offset: 1024)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "debug_stmts", scope: !2097, file: !591, line: 122, baseType: !2359, size: 64, offset: 1088)
!2359 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2360, size: 64)
!2360 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !597, line: 34, baseType: !2361)
!2361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !597, line: 34, size: 128, elements: !2362)
!2362 = !{!2363}
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2361, file: !597, line: 34, baseType: !1622, size: 128)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "debug_map", scope: !2097, file: !591, line: 128, baseType: !1645, size: 64, offset: 1152)
!2365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2366, size: 64)
!2366 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !707)
!2367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2368, size: 64)
!2368 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1030)
!2369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2370, size: 64)
!2370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !597, line: 4652, size: 448, elements: !2371)
!2371 = !{!2372, !2379, !2380, !2381, !2382, !2383, !2384, !2385}
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !2370, file: !597, line: 4655, baseType: !2373, size: 192)
!2373 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !597, line: 265, baseType: !2374)
!2374 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !597, line: 254, size: 192, elements: !2375)
!2375 = !{!2376, !2377, !2378}
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2374, file: !597, line: 257, baseType: !1023, size: 64)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2374, file: !597, line: 263, baseType: !1018, size: 64, offset: 64)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2374, file: !597, line: 264, baseType: !1584, size: 64, offset: 128)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2370, file: !597, line: 4659, baseType: !700, size: 64, offset: 192)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !2370, file: !597, line: 4664, baseType: !2355, size: 64, offset: 256)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !2370, file: !597, line: 4678, baseType: !695, size: 8, offset: 320)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !2370, file: !597, line: 4681, baseType: !695, size: 8, offset: 328)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !2370, file: !597, line: 4685, baseType: !695, size: 8, offset: 336)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !2370, file: !597, line: 4688, baseType: !695, size: 8, offset: 344)
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !2370, file: !597, line: 4694, baseType: !704, size: 64, offset: 384)
!2386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2387, size: 64)
!2387 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !2388)
!2388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !2389)
!2389 = !{!2390}
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2388, file: !135, line: 184, baseType: !1554, size: 128)
!2391 = !{!2392, !2402, !2404, !2406, !0}
!2392 = !DIGlobalVariableExpression(var: !2393, expr: !DIExpression())
!2393 = distinct !DIGlobalVariable(name: "eni_inlining_weights", scope: !2, file: !3, line: 107, type: !2394, isLocal: false, isDefinition: true)
!2394 = !DIDerivedType(tag: DW_TAG_typedef, name: "eni_weights", file: !591, line: 151, baseType: !2395)
!2395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eni_weights_d", file: !591, line: 133, size: 160, elements: !2396)
!2396 = !{!2397, !2398, !2399, !2400, !2401}
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "call_cost", scope: !2395, file: !591, line: 136, baseType: !7, size: 32)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "target_builtin_call_cost", scope: !2395, file: !591, line: 139, baseType: !7, size: 32, offset: 32)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "div_mod_cost", scope: !2395, file: !591, line: 142, baseType: !7, size: 32, offset: 64)
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "omp_cost", scope: !2395, file: !591, line: 145, baseType: !7, size: 32, offset: 96)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "time_based", scope: !2395, file: !591, line: 150, baseType: !695, size: 8, offset: 128)
!2402 = !DIGlobalVariableExpression(var: !2403, expr: !DIExpression())
!2403 = distinct !DIGlobalVariable(name: "eni_size_weights", scope: !2, file: !3, line: 112, type: !2394, isLocal: false, isDefinition: true)
!2404 = !DIGlobalVariableExpression(var: !2405, expr: !DIExpression())
!2405 = distinct !DIGlobalVariable(name: "eni_time_weights", scope: !2, file: !3, line: 117, type: !2394, isLocal: false, isDefinition: true)
!2406 = !DIGlobalVariableExpression(var: !2407, expr: !DIExpression())
!2407 = distinct !DIGlobalVariable(name: "inline_forbidden_reason", scope: !2, file: !3, line: 2781, type: !701, isLocal: true, isDefinition: true)
!2408 = !{i32 2, !"Dwarf Version", i32 4}
!2409 = !{i32 2, !"Debug Info Version", i32 3}
!2410 = !{i32 1, !"wchar_size", i32 4}
!2411 = !{!"clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)"}
!2412 = distinct !DISubprogram(name: "vprintf", scope: !2413, file: !2413, line: 39, type: !2414, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2424)
!2413 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdio.h", directory: "")
!2414 = !DISubroutineType(types: !2415)
!2415 = !{!696, !2416, !2417}
!2416 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !701)
!2417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2418, size: 64)
!2418 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, size: 192, elements: !2419)
!2419 = !{!2420, !2421, !2422, !2423}
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2418, file: !3, baseType: !7, size: 32)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2418, file: !3, baseType: !7, size: 32, offset: 32)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2418, file: !3, baseType: !700, size: 64, offset: 64)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2418, file: !3, baseType: !700, size: 64, offset: 128)
!2424 = !{!2425, !2426}
!2425 = !DILocalVariable(name: "__fmt", arg: 1, scope: !2412, file: !2413, line: 39, type: !2416)
!2426 = !DILocalVariable(name: "__arg", arg: 2, scope: !2412, file: !2413, line: 39, type: !2417)
!2427 = !DILocation(line: 0, scope: !2412)
!2428 = !DILocation(line: 41, column: 20, scope: !2412)
!2429 = !DILocation(line: 41, column: 10, scope: !2412)
!2430 = !DILocation(line: 41, column: 3, scope: !2412)
!2431 = distinct !DISubprogram(name: "getchar", scope: !2413, file: !2413, line: 47, type: !2432, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2434)
!2432 = !DISubroutineType(types: !2433)
!2433 = !{!696}
!2434 = !{}
!2435 = !DILocation(line: 49, column: 16, scope: !2431)
!2436 = !DILocation(line: 49, column: 10, scope: !2431)
!2437 = !DILocation(line: 49, column: 3, scope: !2431)
!2438 = distinct !DISubprogram(name: "fgetc_unlocked", scope: !2413, file: !2413, line: 56, type: !2439, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2491)
!2439 = !DISubroutineType(types: !2440)
!2440 = !{!696, !2441}
!2441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2442, size: 64)
!2442 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2443, line: 7, baseType: !2444)
!2443 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2445, line: 49, size: 1728, elements: !2446)
!2445 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2446 = !{!2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2462, !2464, !2465, !2466, !2469, !2470, !2471, !2472, !2475, !2477, !2480, !2483, !2484, !2485, !2486, !2487}
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2444, file: !2445, line: 51, baseType: !696, size: 32)
!2448 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2444, file: !2445, line: 54, baseType: !698, size: 64, offset: 64)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2444, file: !2445, line: 55, baseType: !698, size: 64, offset: 128)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2444, file: !2445, line: 56, baseType: !698, size: 64, offset: 192)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2444, file: !2445, line: 57, baseType: !698, size: 64, offset: 256)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2444, file: !2445, line: 58, baseType: !698, size: 64, offset: 320)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2444, file: !2445, line: 59, baseType: !698, size: 64, offset: 384)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2444, file: !2445, line: 60, baseType: !698, size: 64, offset: 448)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2444, file: !2445, line: 61, baseType: !698, size: 64, offset: 512)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2444, file: !2445, line: 64, baseType: !698, size: 64, offset: 576)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2444, file: !2445, line: 65, baseType: !698, size: 64, offset: 640)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2444, file: !2445, line: 66, baseType: !698, size: 64, offset: 704)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2444, file: !2445, line: 68, baseType: !2460, size: 64, offset: 768)
!2460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2461, size: 64)
!2461 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2445, line: 36, flags: DIFlagFwdDecl)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2444, file: !2445, line: 70, baseType: !2463, size: 64, offset: 832)
!2463 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2444, size: 64)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2444, file: !2445, line: 72, baseType: !696, size: 32, offset: 896)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2444, file: !2445, line: 73, baseType: !696, size: 32, offset: 928)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2444, file: !2445, line: 74, baseType: !2467, size: 64, offset: 960)
!2467 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2468, line: 152, baseType: !760)
!2468 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2444, file: !2445, line: 77, baseType: !2125, size: 16, offset: 1024)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2444, file: !2445, line: 78, baseType: !1922, size: 8, offset: 1040)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2444, file: !2445, line: 79, baseType: !802, size: 8, offset: 1048)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2444, file: !2445, line: 81, baseType: !2473, size: 64, offset: 1088)
!2473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2474, size: 64)
!2474 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2445, line: 43, baseType: null)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2444, file: !2445, line: 89, baseType: !2476, size: 64, offset: 1152)
!2476 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2468, line: 153, baseType: !760)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2444, file: !2445, line: 91, baseType: !2478, size: 64, offset: 1216)
!2478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2479, size: 64)
!2479 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2445, line: 37, flags: DIFlagFwdDecl)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2444, file: !2445, line: 92, baseType: !2481, size: 64, offset: 1280)
!2481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2482, size: 64)
!2482 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2445, line: 38, flags: DIFlagFwdDecl)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2444, file: !2445, line: 93, baseType: !2463, size: 64, offset: 1344)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2444, file: !2445, line: 94, baseType: !700, size: 64, offset: 1408)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2444, file: !2445, line: 95, baseType: !1172, size: 64, offset: 1472)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2444, file: !2445, line: 96, baseType: !696, size: 32, offset: 1536)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2444, file: !2445, line: 98, baseType: !2488, size: 160, offset: 1568)
!2488 = !DICompositeType(tag: DW_TAG_array_type, baseType: !699, size: 160, elements: !2489)
!2489 = !{!2490}
!2490 = !DISubrange(count: 20)
!2491 = !{!2492}
!2492 = !DILocalVariable(name: "__fp", arg: 1, scope: !2438, file: !2413, line: 56, type: !2441)
!2493 = !DILocation(line: 0, scope: !2438)
!2494 = !DILocation(line: 58, column: 10, scope: !2438)
!2495 = !DILocation(line: 58, column: 3, scope: !2438)
!2496 = distinct !DISubprogram(name: "getc_unlocked", scope: !2413, file: !2413, line: 66, type: !2439, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2497)
!2497 = !{!2498}
!2498 = !DILocalVariable(name: "__fp", arg: 1, scope: !2496, file: !2413, line: 66, type: !2441)
!2499 = !DILocation(line: 0, scope: !2496)
!2500 = !DILocation(line: 68, column: 10, scope: !2496)
!2501 = !DILocation(line: 68, column: 3, scope: !2496)
!2502 = distinct !DISubprogram(name: "getchar_unlocked", scope: !2413, file: !2413, line: 73, type: !2432, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2434)
!2503 = !DILocation(line: 75, column: 10, scope: !2502)
!2504 = !DILocation(line: 75, column: 3, scope: !2502)
!2505 = distinct !DISubprogram(name: "putchar", scope: !2413, file: !2413, line: 82, type: !2506, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2508)
!2506 = !DISubroutineType(types: !2507)
!2507 = !{!696, !696}
!2508 = !{!2509}
!2509 = !DILocalVariable(name: "__c", arg: 1, scope: !2505, file: !2413, line: 82, type: !696)
!2510 = !DILocation(line: 0, scope: !2505)
!2511 = !DILocation(line: 84, column: 21, scope: !2505)
!2512 = !DILocation(line: 84, column: 10, scope: !2505)
!2513 = !DILocation(line: 84, column: 3, scope: !2505)
!2514 = distinct !DISubprogram(name: "fputc_unlocked", scope: !2413, file: !2413, line: 91, type: !2515, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2517)
!2515 = !DISubroutineType(types: !2516)
!2516 = !{!696, !696, !2441}
!2517 = !{!2518, !2519}
!2518 = !DILocalVariable(name: "__c", arg: 1, scope: !2514, file: !2413, line: 91, type: !696)
!2519 = !DILocalVariable(name: "__stream", arg: 2, scope: !2514, file: !2413, line: 91, type: !2441)
!2520 = !DILocation(line: 0, scope: !2514)
!2521 = !DILocation(line: 93, column: 10, scope: !2514)
!2522 = !DILocation(line: 93, column: 3, scope: !2514)
!2523 = distinct !DISubprogram(name: "putc_unlocked", scope: !2413, file: !2413, line: 101, type: !2515, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2524)
!2524 = !{!2525, !2526}
!2525 = !DILocalVariable(name: "__c", arg: 1, scope: !2523, file: !2413, line: 101, type: !696)
!2526 = !DILocalVariable(name: "__stream", arg: 2, scope: !2523, file: !2413, line: 101, type: !2441)
!2527 = !DILocation(line: 0, scope: !2523)
!2528 = !DILocation(line: 103, column: 10, scope: !2523)
!2529 = !DILocation(line: 103, column: 3, scope: !2523)
!2530 = distinct !DISubprogram(name: "putchar_unlocked", scope: !2413, file: !2413, line: 108, type: !2506, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2531)
!2531 = !{!2532}
!2532 = !DILocalVariable(name: "__c", arg: 1, scope: !2530, file: !2413, line: 108, type: !696)
!2533 = !DILocation(line: 0, scope: !2530)
!2534 = !DILocation(line: 110, column: 10, scope: !2530)
!2535 = !DILocation(line: 110, column: 3, scope: !2530)
!2536 = distinct !DISubprogram(name: "getline", scope: !2413, file: !2413, line: 118, type: !2537, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2541)
!2537 = !DISubroutineType(types: !2538)
!2538 = !{!2539, !697, !2540, !2441}
!2539 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !2468, line: 193, baseType: !760)
!2540 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1172, size: 64)
!2541 = !{!2542, !2543, !2544}
!2542 = !DILocalVariable(name: "__lineptr", arg: 1, scope: !2536, file: !2413, line: 118, type: !697)
!2543 = !DILocalVariable(name: "__n", arg: 2, scope: !2536, file: !2413, line: 118, type: !2540)
!2544 = !DILocalVariable(name: "__stream", arg: 3, scope: !2536, file: !2413, line: 118, type: !2441)
!2545 = !DILocation(line: 0, scope: !2536)
!2546 = !DILocation(line: 120, column: 10, scope: !2536)
!2547 = !DILocation(line: 120, column: 3, scope: !2536)
!2548 = distinct !DISubprogram(name: "feof_unlocked", scope: !2413, file: !2413, line: 128, type: !2439, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2549)
!2549 = !{!2550}
!2550 = !DILocalVariable(name: "__stream", arg: 1, scope: !2548, file: !2413, line: 128, type: !2441)
!2551 = !DILocation(line: 0, scope: !2548)
!2552 = !DILocation(line: 130, column: 10, scope: !2548)
!2553 = !DILocation(line: 130, column: 3, scope: !2548)
!2554 = distinct !DISubprogram(name: "ferror_unlocked", scope: !2413, file: !2413, line: 135, type: !2439, scopeLine: 136, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2555)
!2555 = !{!2556}
!2556 = !DILocalVariable(name: "__stream", arg: 1, scope: !2554, file: !2413, line: 135, type: !2441)
!2557 = !DILocation(line: 0, scope: !2554)
!2558 = !DILocation(line: 137, column: 10, scope: !2554)
!2559 = !DILocation(line: 137, column: 3, scope: !2554)
!2560 = distinct !DISubprogram(name: "tolower", scope: !2561, file: !2561, line: 207, type: !2506, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2562)
!2561 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!2562 = !{!2563}
!2563 = !DILocalVariable(name: "__c", arg: 1, scope: !2560, file: !2561, line: 207, type: !696)
!2564 = !DILocation(line: 0, scope: !2560)
!2565 = !DILocation(line: 209, column: 22, scope: !2560)
!2566 = !DILocation(line: 209, column: 39, scope: !2560)
!2567 = !DILocation(line: 209, column: 38, scope: !2560)
!2568 = !DILocation(line: 209, column: 37, scope: !2560)
!2569 = !DILocation(line: 209, column: 10, scope: !2560)
!2570 = !DILocation(line: 209, column: 3, scope: !2560)
!2571 = distinct !DISubprogram(name: "toupper", scope: !2561, file: !2561, line: 213, type: !2506, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2572)
!2572 = !{!2573}
!2573 = !DILocalVariable(name: "__c", arg: 1, scope: !2571, file: !2561, line: 213, type: !696)
!2574 = !DILocation(line: 0, scope: !2571)
!2575 = !DILocation(line: 215, column: 22, scope: !2571)
!2576 = !DILocation(line: 215, column: 39, scope: !2571)
!2577 = !DILocation(line: 215, column: 38, scope: !2571)
!2578 = !DILocation(line: 215, column: 37, scope: !2571)
!2579 = !DILocation(line: 215, column: 10, scope: !2571)
!2580 = !DILocation(line: 215, column: 3, scope: !2571)
!2581 = distinct !DISubprogram(name: "atoi", scope: !2582, file: !2582, line: 361, type: !2583, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2585)
!2582 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!2583 = !DISubroutineType(types: !2584)
!2584 = !{!696, !701}
!2585 = !{!2586}
!2586 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2581, file: !2582, line: 361, type: !701)
!2587 = !DILocation(line: 0, scope: !2581)
!2588 = !DILocation(line: 363, column: 16, scope: !2581)
!2589 = !DILocation(line: 363, column: 10, scope: !2581)
!2590 = !DILocation(line: 363, column: 3, scope: !2581)
!2591 = distinct !DISubprogram(name: "atol", scope: !2582, file: !2582, line: 366, type: !2592, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2594)
!2592 = !DISubroutineType(types: !2593)
!2593 = !{!760, !701}
!2594 = !{!2595}
!2595 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2591, file: !2582, line: 366, type: !701)
!2596 = !DILocation(line: 0, scope: !2591)
!2597 = !DILocation(line: 368, column: 10, scope: !2591)
!2598 = !DILocation(line: 368, column: 3, scope: !2591)
!2599 = distinct !DISubprogram(name: "atoll", scope: !2582, file: !2582, line: 373, type: !2600, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2603)
!2600 = !DISubroutineType(types: !2601)
!2601 = !{!2602, !701}
!2602 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!2603 = !{!2604}
!2604 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2599, file: !2582, line: 373, type: !701)
!2605 = !DILocation(line: 0, scope: !2599)
!2606 = !DILocation(line: 375, column: 10, scope: !2599)
!2607 = !DILocation(line: 375, column: 3, scope: !2599)
!2608 = distinct !DISubprogram(name: "bsearch", scope: !2609, file: !2609, line: 20, type: !2610, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2613)
!2609 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h", directory: "")
!2610 = !DISubroutineType(types: !2611)
!2611 = !{!700, !1510, !1510, !1172, !1172, !2612}
!2612 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !2582, line: 808, baseType: !1514)
!2613 = !{!2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623}
!2614 = !DILocalVariable(name: "__key", arg: 1, scope: !2608, file: !2609, line: 20, type: !1510)
!2615 = !DILocalVariable(name: "__base", arg: 2, scope: !2608, file: !2609, line: 20, type: !1510)
!2616 = !DILocalVariable(name: "__nmemb", arg: 3, scope: !2608, file: !2609, line: 20, type: !1172)
!2617 = !DILocalVariable(name: "__size", arg: 4, scope: !2608, file: !2609, line: 20, type: !1172)
!2618 = !DILocalVariable(name: "__compar", arg: 5, scope: !2608, file: !2609, line: 21, type: !2612)
!2619 = !DILocalVariable(name: "__l", scope: !2608, file: !2609, line: 23, type: !1172)
!2620 = !DILocalVariable(name: "__u", scope: !2608, file: !2609, line: 23, type: !1172)
!2621 = !DILocalVariable(name: "__idx", scope: !2608, file: !2609, line: 23, type: !1172)
!2622 = !DILocalVariable(name: "__p", scope: !2608, file: !2609, line: 24, type: !1510)
!2623 = !DILocalVariable(name: "__comparison", scope: !2608, file: !2609, line: 25, type: !696)
!2624 = !DILocation(line: 0, scope: !2608)
!2625 = !DILocation(line: 29, column: 3, scope: !2608)
!2626 = !DILocation(line: 27, column: 7, scope: !2608)
!2627 = !DILocation(line: 29, column: 14, scope: !2608)
!2628 = !DILocation(line: 31, column: 20, scope: !2629)
!2629 = distinct !DILexicalBlock(scope: !2608, file: !2609, line: 30, column: 5)
!2630 = !DILocation(line: 31, column: 27, scope: !2629)
!2631 = !DILocation(line: 32, column: 56, scope: !2629)
!2632 = !DILocation(line: 32, column: 47, scope: !2629)
!2633 = !DILocation(line: 33, column: 22, scope: !2629)
!2634 = !DILocation(line: 34, column: 24, scope: !2635)
!2635 = distinct !DILexicalBlock(scope: !2629, file: !2609, line: 34, column: 11)
!2636 = !DILocation(line: 34, column: 11, scope: !2629)
!2637 = !DILocation(line: 36, column: 29, scope: !2638)
!2638 = distinct !DILexicalBlock(scope: !2635, file: !2609, line: 36, column: 16)
!2639 = !DILocation(line: 36, column: 16, scope: !2635)
!2640 = !DILocation(line: 37, column: 14, scope: !2638)
!2641 = distinct !{!2641, !2625, !2642}
!2642 = !DILocation(line: 40, column: 5, scope: !2608)
!2643 = !DILocation(line: 43, column: 1, scope: !2608)
!2644 = distinct !DISubprogram(name: "atof", scope: !2645, file: !2645, line: 25, type: !2646, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2649)
!2645 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h", directory: "")
!2646 = !DISubroutineType(types: !2647)
!2647 = !{!2648, !701}
!2648 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2649 = !{!2650}
!2650 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2644, file: !2645, line: 25, type: !701)
!2651 = !DILocation(line: 0, scope: !2644)
!2652 = !DILocation(line: 27, column: 10, scope: !2644)
!2653 = !DILocation(line: 27, column: 3, scope: !2644)
!2654 = distinct !DISubprogram(name: "strtoimax", scope: !2655, file: !2655, line: 324, type: !2656, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2662)
!2655 = !DIFile(filename: "/usr/include/inttypes.h", directory: "")
!2656 = !DISubroutineType(types: !2657)
!2657 = !{!2658, !2416, !2661, !696}
!2658 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !2659, line: 101, baseType: !2660)
!2659 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!2660 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !2468, line: 72, baseType: !760)
!2661 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !697)
!2662 = !{!2663, !2664, !2665}
!2663 = !DILocalVariable(name: "nptr", arg: 1, scope: !2654, file: !2655, line: 324, type: !2416)
!2664 = !DILocalVariable(name: "endptr", arg: 2, scope: !2654, file: !2655, line: 324, type: !2661)
!2665 = !DILocalVariable(name: "base", arg: 3, scope: !2654, file: !2655, line: 324, type: !696)
!2666 = !DILocation(line: 0, scope: !2654)
!2667 = !DILocation(line: 327, column: 10, scope: !2654)
!2668 = !DILocation(line: 327, column: 3, scope: !2654)
!2669 = distinct !DISubprogram(name: "strtoumax", scope: !2655, file: !2655, line: 336, type: !2670, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2674)
!2670 = !DISubroutineType(types: !2671)
!2671 = !{!2672, !2416, !2661, !696}
!2672 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !2659, line: 102, baseType: !2673)
!2673 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !2468, line: 73, baseType: !758)
!2674 = !{!2675, !2676, !2677}
!2675 = !DILocalVariable(name: "nptr", arg: 1, scope: !2669, file: !2655, line: 336, type: !2416)
!2676 = !DILocalVariable(name: "endptr", arg: 2, scope: !2669, file: !2655, line: 336, type: !2661)
!2677 = !DILocalVariable(name: "base", arg: 3, scope: !2669, file: !2655, line: 336, type: !696)
!2678 = !DILocation(line: 0, scope: !2669)
!2679 = !DILocation(line: 339, column: 10, scope: !2669)
!2680 = !DILocation(line: 339, column: 3, scope: !2669)
!2681 = distinct !DISubprogram(name: "wcstoimax", scope: !2655, file: !2655, line: 348, type: !2682, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2691)
!2682 = !DISubroutineType(types: !2683)
!2683 = !{!2658, !2684, !2688, !696}
!2684 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !2685)
!2685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2686, size: 64)
!2686 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2687)
!2687 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gwchar_t", file: !2655, line: 34, baseType: !696)
!2688 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !2689)
!2689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2690, size: 64)
!2690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2687, size: 64)
!2691 = !{!2692, !2693, !2694}
!2692 = !DILocalVariable(name: "nptr", arg: 1, scope: !2681, file: !2655, line: 348, type: !2684)
!2693 = !DILocalVariable(name: "endptr", arg: 2, scope: !2681, file: !2655, line: 348, type: !2688)
!2694 = !DILocalVariable(name: "base", arg: 3, scope: !2681, file: !2655, line: 348, type: !696)
!2695 = !DILocation(line: 0, scope: !2681)
!2696 = !DILocation(line: 351, column: 10, scope: !2681)
!2697 = !DILocation(line: 351, column: 3, scope: !2681)
!2698 = distinct !DISubprogram(name: "wcstoumax", scope: !2655, file: !2655, line: 362, type: !2699, scopeLine: 364, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2701)
!2699 = !DISubroutineType(types: !2700)
!2700 = !{!2672, !2684, !2688, !696}
!2701 = !{!2702, !2703, !2704}
!2702 = !DILocalVariable(name: "nptr", arg: 1, scope: !2698, file: !2655, line: 362, type: !2684)
!2703 = !DILocalVariable(name: "endptr", arg: 2, scope: !2698, file: !2655, line: 362, type: !2688)
!2704 = !DILocalVariable(name: "base", arg: 3, scope: !2698, file: !2655, line: 362, type: !696)
!2705 = !DILocation(line: 0, scope: !2698)
!2706 = !DILocation(line: 365, column: 10, scope: !2698)
!2707 = !DILocation(line: 365, column: 3, scope: !2698)
!2708 = distinct !DISubprogram(name: "stat", scope: !2709, file: !2709, line: 453, type: !2710, scopeLine: 454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2747)
!2709 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/stat.h", directory: "")
!2710 = !DISubroutineType(types: !2711)
!2711 = !{!696, !701, !2712}
!2712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2713, size: 64)
!2713 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !2714, line: 46, size: 1152, elements: !2715)
!2714 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!2715 = !{!2716, !2718, !2720, !2722, !2724, !2726, !2728, !2729, !2730, !2731, !2733, !2735, !2743, !2744, !2745}
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2713, file: !2714, line: 48, baseType: !2717, size: 64)
!2717 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !2468, line: 145, baseType: !758)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2713, file: !2714, line: 53, baseType: !2719, size: 64, offset: 64)
!2719 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !2468, line: 148, baseType: !758)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2713, file: !2714, line: 61, baseType: !2721, size: 64, offset: 128)
!2721 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !2468, line: 151, baseType: !758)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2713, file: !2714, line: 62, baseType: !2723, size: 32, offset: 192)
!2723 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !2468, line: 150, baseType: !7)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2713, file: !2714, line: 64, baseType: !2725, size: 32, offset: 224)
!2725 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !2468, line: 146, baseType: !7)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2713, file: !2714, line: 65, baseType: !2727, size: 32, offset: 256)
!2727 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !2468, line: 147, baseType: !7)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2713, file: !2714, line: 67, baseType: !696, size: 32, offset: 288)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2713, file: !2714, line: 69, baseType: !2717, size: 64, offset: 320)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2713, file: !2714, line: 74, baseType: !2467, size: 64, offset: 384)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2713, file: !2714, line: 78, baseType: !2732, size: 64, offset: 448)
!2732 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !2468, line: 174, baseType: !760)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2713, file: !2714, line: 80, baseType: !2734, size: 64, offset: 512)
!2734 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !2468, line: 179, baseType: !760)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2713, file: !2714, line: 91, baseType: !2736, size: 128, offset: 576)
!2736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !2737, line: 10, size: 128, elements: !2738)
!2737 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!2738 = !{!2739, !2741}
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2736, file: !2737, line: 12, baseType: !2740, size: 64)
!2740 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !2468, line: 160, baseType: !760)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2736, file: !2737, line: 16, baseType: !2742, size: 64, offset: 64)
!2742 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !2468, line: 196, baseType: !760)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2713, file: !2714, line: 92, baseType: !2736, size: 128, offset: 704)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2713, file: !2714, line: 93, baseType: !2736, size: 128, offset: 832)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2713, file: !2714, line: 106, baseType: !2746, size: 192, offset: 960)
!2746 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2742, size: 192, elements: !778)
!2747 = !{!2748, !2749}
!2748 = !DILocalVariable(name: "__path", arg: 1, scope: !2708, file: !2709, line: 453, type: !701)
!2749 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2708, file: !2709, line: 453, type: !2712)
!2750 = !DILocation(line: 0, scope: !2708)
!2751 = !DILocation(line: 455, column: 10, scope: !2708)
!2752 = !DILocation(line: 455, column: 3, scope: !2708)
!2753 = distinct !DISubprogram(name: "lstat", scope: !2709, file: !2709, line: 460, type: !2710, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2754)
!2754 = !{!2755, !2756}
!2755 = !DILocalVariable(name: "__path", arg: 1, scope: !2753, file: !2709, line: 460, type: !701)
!2756 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2753, file: !2709, line: 460, type: !2712)
!2757 = !DILocation(line: 0, scope: !2753)
!2758 = !DILocation(line: 462, column: 10, scope: !2753)
!2759 = !DILocation(line: 462, column: 3, scope: !2753)
!2760 = distinct !DISubprogram(name: "fstat", scope: !2709, file: !2709, line: 467, type: !2761, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2763)
!2761 = !DISubroutineType(types: !2762)
!2762 = !{!696, !696, !2712}
!2763 = !{!2764, !2765}
!2764 = !DILocalVariable(name: "__fd", arg: 1, scope: !2760, file: !2709, line: 467, type: !696)
!2765 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2760, file: !2709, line: 467, type: !2712)
!2766 = !DILocation(line: 0, scope: !2760)
!2767 = !DILocation(line: 469, column: 10, scope: !2760)
!2768 = !DILocation(line: 469, column: 3, scope: !2760)
!2769 = distinct !DISubprogram(name: "fstatat", scope: !2709, file: !2709, line: 474, type: !2770, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2772)
!2770 = !DISubroutineType(types: !2771)
!2771 = !{!696, !696, !701, !2712, !696}
!2772 = !{!2773, !2774, !2775, !2776}
!2773 = !DILocalVariable(name: "__fd", arg: 1, scope: !2769, file: !2709, line: 474, type: !696)
!2774 = !DILocalVariable(name: "__filename", arg: 2, scope: !2769, file: !2709, line: 474, type: !701)
!2775 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2769, file: !2709, line: 474, type: !2712)
!2776 = !DILocalVariable(name: "__flag", arg: 4, scope: !2769, file: !2709, line: 474, type: !696)
!2777 = !DILocation(line: 0, scope: !2769)
!2778 = !DILocation(line: 477, column: 10, scope: !2769)
!2779 = !DILocation(line: 477, column: 3, scope: !2769)
!2780 = distinct !DISubprogram(name: "mknod", scope: !2709, file: !2709, line: 483, type: !2781, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2783)
!2781 = !DISubroutineType(types: !2782)
!2782 = !{!696, !701, !2723, !2717}
!2783 = !{!2784, !2785, !2786}
!2784 = !DILocalVariable(name: "__path", arg: 1, scope: !2780, file: !2709, line: 483, type: !701)
!2785 = !DILocalVariable(name: "__mode", arg: 2, scope: !2780, file: !2709, line: 483, type: !2723)
!2786 = !DILocalVariable(name: "__dev", arg: 3, scope: !2780, file: !2709, line: 483, type: !2717)
!2787 = !DILocation(line: 0, scope: !2780)
!2788 = !DILocation(line: 485, column: 10, scope: !2780)
!2789 = !DILocation(line: 485, column: 3, scope: !2780)
!2790 = distinct !DISubprogram(name: "mknodat", scope: !2709, file: !2709, line: 491, type: !2791, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2793)
!2791 = !DISubroutineType(types: !2792)
!2792 = !{!696, !696, !701, !2723, !2717}
!2793 = !{!2794, !2795, !2796, !2797}
!2794 = !DILocalVariable(name: "__fd", arg: 1, scope: !2790, file: !2709, line: 491, type: !696)
!2795 = !DILocalVariable(name: "__path", arg: 2, scope: !2790, file: !2709, line: 491, type: !701)
!2796 = !DILocalVariable(name: "__mode", arg: 3, scope: !2790, file: !2709, line: 491, type: !2723)
!2797 = !DILocalVariable(name: "__dev", arg: 4, scope: !2790, file: !2709, line: 491, type: !2717)
!2798 = !DILocation(line: 0, scope: !2790)
!2799 = !DILocation(line: 494, column: 10, scope: !2790)
!2800 = !DILocation(line: 494, column: 3, scope: !2790)
!2801 = distinct !DISubprogram(name: "stat64", scope: !2709, file: !2709, line: 502, type: !2802, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2824)
!2802 = !DISubroutineType(types: !2803)
!2803 = !{!696, !701, !2804}
!2804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2805, size: 64)
!2805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !2714, line: 119, size: 1152, elements: !2806)
!2806 = !{!2807, !2808, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2820, !2821, !2822, !2823}
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2805, file: !2714, line: 121, baseType: !2717, size: 64)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2805, file: !2714, line: 123, baseType: !2809, size: 64, offset: 64)
!2809 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino64_t", file: !2468, line: 149, baseType: !758)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2805, file: !2714, line: 124, baseType: !2721, size: 64, offset: 128)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2805, file: !2714, line: 125, baseType: !2723, size: 32, offset: 192)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2805, file: !2714, line: 132, baseType: !2725, size: 32, offset: 224)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2805, file: !2714, line: 133, baseType: !2727, size: 32, offset: 256)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2805, file: !2714, line: 135, baseType: !696, size: 32, offset: 288)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2805, file: !2714, line: 136, baseType: !2717, size: 64, offset: 320)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2805, file: !2714, line: 137, baseType: !2467, size: 64, offset: 384)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2805, file: !2714, line: 143, baseType: !2732, size: 64, offset: 448)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2805, file: !2714, line: 144, baseType: !2819, size: 64, offset: 512)
!2819 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt64_t", file: !2468, line: 180, baseType: !760)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2805, file: !2714, line: 152, baseType: !2736, size: 128, offset: 576)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2805, file: !2714, line: 153, baseType: !2736, size: 128, offset: 704)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2805, file: !2714, line: 154, baseType: !2736, size: 128, offset: 832)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2805, file: !2714, line: 164, baseType: !2746, size: 192, offset: 960)
!2824 = !{!2825, !2826}
!2825 = !DILocalVariable(name: "__path", arg: 1, scope: !2801, file: !2709, line: 502, type: !701)
!2826 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2801, file: !2709, line: 502, type: !2804)
!2827 = !DILocation(line: 0, scope: !2801)
!2828 = !DILocation(line: 504, column: 10, scope: !2801)
!2829 = !DILocation(line: 504, column: 3, scope: !2801)
!2830 = distinct !DISubprogram(name: "lstat64", scope: !2709, file: !2709, line: 509, type: !2802, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2831)
!2831 = !{!2832, !2833}
!2832 = !DILocalVariable(name: "__path", arg: 1, scope: !2830, file: !2709, line: 509, type: !701)
!2833 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2830, file: !2709, line: 509, type: !2804)
!2834 = !DILocation(line: 0, scope: !2830)
!2835 = !DILocation(line: 511, column: 10, scope: !2830)
!2836 = !DILocation(line: 511, column: 3, scope: !2830)
!2837 = distinct !DISubprogram(name: "fstat64", scope: !2709, file: !2709, line: 516, type: !2838, scopeLine: 517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2840)
!2838 = !DISubroutineType(types: !2839)
!2839 = !{!696, !696, !2804}
!2840 = !{!2841, !2842}
!2841 = !DILocalVariable(name: "__fd", arg: 1, scope: !2837, file: !2709, line: 516, type: !696)
!2842 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2837, file: !2709, line: 516, type: !2804)
!2843 = !DILocation(line: 0, scope: !2837)
!2844 = !DILocation(line: 518, column: 10, scope: !2837)
!2845 = !DILocation(line: 518, column: 3, scope: !2837)
!2846 = distinct !DISubprogram(name: "fstatat64", scope: !2709, file: !2709, line: 523, type: !2847, scopeLine: 525, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2849)
!2847 = !DISubroutineType(types: !2848)
!2848 = !{!696, !696, !701, !2804, !696}
!2849 = !{!2850, !2851, !2852, !2853}
!2850 = !DILocalVariable(name: "__fd", arg: 1, scope: !2846, file: !2709, line: 523, type: !696)
!2851 = !DILocalVariable(name: "__filename", arg: 2, scope: !2846, file: !2709, line: 523, type: !701)
!2852 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2846, file: !2709, line: 523, type: !2804)
!2853 = !DILocalVariable(name: "__flag", arg: 4, scope: !2846, file: !2709, line: 523, type: !696)
!2854 = !DILocation(line: 0, scope: !2846)
!2855 = !DILocation(line: 526, column: 10, scope: !2846)
!2856 = !DILocation(line: 526, column: 3, scope: !2846)
!2857 = distinct !DISubprogram(name: "insert_decl_map", scope: !3, file: !3, line: 140, type: !2858, scopeLine: 141, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2860)
!2858 = !DISubroutineType(types: !2859)
!2859 = !{null, !2095, !704, !704}
!2860 = !{!2861, !2862, !2863}
!2861 = !DILocalVariable(name: "id", arg: 1, scope: !2857, file: !3, line: 140, type: !2095)
!2862 = !DILocalVariable(name: "key", arg: 2, scope: !2857, file: !3, line: 140, type: !704)
!2863 = !DILocalVariable(name: "value", arg: 3, scope: !2857, file: !3, line: 140, type: !704)
!2864 = !DILocation(line: 0, scope: !2857)
!2865 = !DILocation(line: 142, column: 28, scope: !2857)
!2866 = !DILocation(line: 142, column: 38, scope: !2857)
!2867 = !DILocation(line: 142, column: 4, scope: !2857)
!2868 = !DILocation(line: 142, column: 43, scope: !2857)
!2869 = !DILocation(line: 146, column: 11, scope: !2870)
!2870 = distinct !DILexicalBlock(scope: !2857, file: !3, line: 146, column: 7)
!2871 = !DILocation(line: 146, column: 7, scope: !2857)
!2872 = !DILocation(line: 147, column: 30, scope: !2870)
!2873 = !DILocation(line: 147, column: 40, scope: !2870)
!2874 = !DILocation(line: 147, column: 6, scope: !2870)
!2875 = !DILocation(line: 147, column: 47, scope: !2870)
!2876 = !DILocation(line: 147, column: 5, scope: !2870)
!2877 = !DILocation(line: 148, column: 1, scope: !2857)
!2878 = distinct !DISubprogram(name: "remap_decl", scope: !3, file: !3, line: 262, type: !2879, scopeLine: 263, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2881)
!2879 = !DISubroutineType(types: !2880)
!2880 = !{!704, !704, !2095}
!2881 = !{!2882, !2883, !2884, !2885}
!2882 = !DILocalVariable(name: "decl", arg: 1, scope: !2878, file: !3, line: 262, type: !704)
!2883 = !DILocalVariable(name: "id", arg: 2, scope: !2878, file: !3, line: 262, type: !2095)
!2884 = !DILocalVariable(name: "n", scope: !2878, file: !3, line: 264, type: !703)
!2885 = !DILocalVariable(name: "t", scope: !2886, file: !3, line: 283, type: !704)
!2886 = distinct !DILexicalBlock(scope: !2887, file: !3, line: 281, column: 5)
!2887 = distinct !DILexicalBlock(scope: !2878, file: !3, line: 280, column: 7)
!2888 = !DILocation(line: 0, scope: !2878)
!2889 = !DILocation(line: 270, column: 42, scope: !2878)
!2890 = !DILocation(line: 270, column: 52, scope: !2878)
!2891 = !DILocation(line: 270, column: 16, scope: !2878)
!2892 = !DILocation(line: 270, column: 7, scope: !2878)
!2893 = !DILocation(line: 272, column: 8, scope: !2894)
!2894 = distinct !DILexicalBlock(scope: !2878, file: !3, line: 272, column: 7)
!2895 = !DILocation(line: 272, column: 13, scope: !2894)
!2896 = !DILocation(line: 272, column: 10, scope: !2894)
!2897 = !DILocation(line: 274, column: 29, scope: !2898)
!2898 = distinct !DILexicalBlock(scope: !2894, file: !3, line: 273, column: 5)
!2899 = !DILocation(line: 275, column: 7, scope: !2898)
!2900 = !DILocation(line: 280, column: 7, scope: !2878)
!2901 = !DILocation(line: 283, column: 20, scope: !2886)
!2902 = !DILocation(line: 283, column: 16, scope: !2886)
!2903 = !DILocation(line: 0, scope: !2886)
!2904 = !DILocation(line: 288, column: 7, scope: !2886)
!2905 = !DILocation(line: 290, column: 12, scope: !2906)
!2906 = distinct !DILexicalBlock(scope: !2886, file: !3, line: 290, column: 11)
!2907 = !DILocation(line: 290, column: 11, scope: !2886)
!2908 = !DILocation(line: 294, column: 35, scope: !2886)
!2909 = !DILocation(line: 294, column: 23, scope: !2886)
!2910 = !DILocation(line: 294, column: 21, scope: !2886)
!2911 = !DILocation(line: 295, column: 11, scope: !2912)
!2912 = distinct !DILexicalBlock(scope: !2886, file: !3, line: 295, column: 11)
!2913 = !DILocation(line: 295, column: 25, scope: !2912)
!2914 = !DILocation(line: 295, column: 11, scope: !2886)
!2915 = !DILocation(line: 296, column: 46, scope: !2912)
!2916 = !DILocation(line: 296, column: 34, scope: !2912)
!2917 = !DILocation(line: 296, column: 32, scope: !2912)
!2918 = !DILocation(line: 296, column: 9, scope: !2912)
!2919 = !DILocation(line: 299, column: 7, scope: !2886)
!2920 = !DILocation(line: 300, column: 7, scope: !2886)
!2921 = !DILocation(line: 303, column: 11, scope: !2922)
!2922 = distinct !DILexicalBlock(scope: !2886, file: !3, line: 303, column: 11)
!2923 = !DILocation(line: 303, column: 25, scope: !2922)
!2924 = !DILocation(line: 303, column: 11, scope: !2886)
!2925 = !DILocation(line: 305, column: 4, scope: !2926)
!2926 = distinct !DILexicalBlock(scope: !2922, file: !3, line: 304, column: 2)
!2927 = !DILocation(line: 306, column: 8, scope: !2928)
!2928 = distinct !DILexicalBlock(scope: !2926, file: !3, line: 306, column: 8)
!2929 = !DILocation(line: 306, column: 37, scope: !2928)
!2930 = !DILocation(line: 306, column: 8, scope: !2926)
!2931 = !DILocation(line: 307, column: 6, scope: !2928)
!2932 = !DILocation(line: 310, column: 11, scope: !2933)
!2933 = distinct !DILexicalBlock(scope: !2886, file: !3, line: 310, column: 11)
!2934 = !DILocation(line: 310, column: 16, scope: !2933)
!2935 = !DILocation(line: 310, column: 19, scope: !2933)
!2936 = !DILocation(line: 311, column: 4, scope: !2933)
!2937 = !DILocation(line: 311, column: 8, scope: !2933)
!2938 = !DILocation(line: 311, column: 22, scope: !2933)
!2939 = !DILocation(line: 312, column: 8, scope: !2933)
!2940 = !DILocation(line: 312, column: 25, scope: !2933)
!2941 = !DILocation(line: 312, column: 40, scope: !2933)
!2942 = !DILocation(line: 312, column: 57, scope: !2933)
!2943 = !DILocation(line: 310, column: 11, scope: !2886)
!2944 = !DILocation(line: 314, column: 4, scope: !2945)
!2945 = distinct !DILexicalBlock(scope: !2933, file: !3, line: 313, column: 2)
!2946 = !DILocation(line: 315, column: 4, scope: !2945)
!2947 = !DILocation(line: 316, column: 2, scope: !2945)
!2948 = !DILocation(line: 320, column: 11, scope: !2949)
!2949 = distinct !DILexicalBlock(scope: !2878, file: !3, line: 320, column: 7)
!2950 = !DILocation(line: 320, column: 7, scope: !2949)
!2951 = !DILocation(line: 0, scope: !2949)
!2952 = !DILocation(line: 320, column: 7, scope: !2878)
!2953 = !DILocation(line: 323, column: 12, scope: !2949)
!2954 = !DILocation(line: 323, column: 5, scope: !2949)
!2955 = !DILocation(line: 324, column: 1, scope: !2878)
!2956 = distinct !DISubprogram(name: "remap_type", scope: !3, file: !3, line: 442, type: !2879, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2957)
!2957 = !{!2958, !2959, !2960, !2961}
!2958 = !DILocalVariable(name: "type", arg: 1, scope: !2956, file: !3, line: 442, type: !704)
!2959 = !DILocalVariable(name: "id", arg: 2, scope: !2956, file: !3, line: 442, type: !2095)
!2960 = !DILocalVariable(name: "node", scope: !2956, file: !3, line: 444, type: !703)
!2961 = !DILocalVariable(name: "tmp", scope: !2956, file: !3, line: 445, type: !704)
!2962 = !DILocation(line: 0, scope: !2956)
!2963 = !DILocation(line: 447, column: 12, scope: !2964)
!2964 = distinct !DILexicalBlock(scope: !2956, file: !3, line: 447, column: 7)
!2965 = !DILocation(line: 447, column: 7, scope: !2956)
!2966 = !DILocation(line: 451, column: 45, scope: !2956)
!2967 = !DILocation(line: 451, column: 55, scope: !2956)
!2968 = !DILocation(line: 451, column: 19, scope: !2956)
!2969 = !DILocation(line: 452, column: 7, scope: !2970)
!2970 = distinct !DILexicalBlock(scope: !2956, file: !3, line: 452, column: 7)
!2971 = !DILocation(line: 452, column: 7, scope: !2956)
!2972 = !DILocation(line: 451, column: 10, scope: !2956)
!2973 = !DILocation(line: 453, column: 12, scope: !2970)
!2974 = !DILocation(line: 453, column: 5, scope: !2970)
!2975 = !DILocation(line: 456, column: 45, scope: !2976)
!2976 = distinct !DILexicalBlock(scope: !2956, file: !3, line: 456, column: 7)
!2977 = !DILocation(line: 456, column: 9, scope: !2976)
!2978 = !DILocation(line: 456, column: 7, scope: !2956)
!2979 = !DILocation(line: 458, column: 7, scope: !2980)
!2980 = distinct !DILexicalBlock(scope: !2976, file: !3, line: 457, column: 5)
!2981 = !DILocation(line: 459, column: 7, scope: !2980)
!2982 = !DILocation(line: 462, column: 7, scope: !2956)
!2983 = !DILocation(line: 462, column: 27, scope: !2956)
!2984 = !DILocation(line: 463, column: 9, scope: !2956)
!2985 = !DILocation(line: 464, column: 27, scope: !2956)
!2986 = !DILocation(line: 466, column: 3, scope: !2956)
!2987 = !DILocation(line: 467, column: 1, scope: !2956)
!2988 = distinct !DISubprogram(name: "copy_tree_body_r", scope: !3, file: !3, line: 905, type: !2989, scopeLine: 906, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2992)
!2989 = !DISubroutineType(types: !2990)
!2990 = !{!704, !703, !2991, !700}
!2991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !696, size: 64)
!2992 = !{!2993, !2994, !2995, !2996, !2997, !2998, !2999, !3002, !3006, !3014, !3018, !3019, !3020, !3023, !3024, !3027, !3028, !3029, !3034}
!2993 = !DILocalVariable(name: "tp", arg: 1, scope: !2988, file: !3, line: 905, type: !703)
!2994 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !2988, file: !3, line: 905, type: !2991)
!2995 = !DILocalVariable(name: "data", arg: 3, scope: !2988, file: !3, line: 905, type: !700)
!2996 = !DILocalVariable(name: "id", scope: !2988, file: !3, line: 907, type: !2095)
!2997 = !DILocalVariable(name: "fn", scope: !2988, file: !3, line: 908, type: !704)
!2998 = !DILocalVariable(name: "new_block", scope: !2988, file: !3, line: 909, type: !704)
!2999 = !DILocalVariable(name: "assignment", scope: !3000, file: !3, line: 922, type: !704)
!3000 = distinct !DILexicalBlock(scope: !3001, file: !3, line: 921, column: 5)
!3001 = distinct !DILexicalBlock(scope: !2988, file: !3, line: 920, column: 7)
!3002 = !DILocalVariable(name: "new_decl", scope: !3003, file: !3, line: 954, type: !704)
!3003 = distinct !DILexicalBlock(scope: !3004, file: !3, line: 953, column: 5)
!3004 = distinct !DILexicalBlock(scope: !3005, file: !3, line: 952, column: 12)
!3005 = distinct !DILexicalBlock(scope: !3001, file: !3, line: 941, column: 12)
!3006 = !DILocalVariable(name: "new_type", scope: !3007, file: !3, line: 984, type: !704)
!3007 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 983, column: 5)
!3008 = distinct !DILexicalBlock(scope: !3009, file: !3, line: 982, column: 12)
!3009 = distinct !DILexicalBlock(scope: !3010, file: !3, line: 977, column: 12)
!3010 = distinct !DILexicalBlock(scope: !3011, file: !3, line: 974, column: 12)
!3011 = distinct !DILexicalBlock(scope: !3012, file: !3, line: 969, column: 12)
!3012 = distinct !DILexicalBlock(scope: !3013, file: !3, line: 966, column: 12)
!3013 = distinct !DILexicalBlock(scope: !3004, file: !3, line: 964, column: 12)
!3014 = !DILocalVariable(name: "decl", scope: !3015, file: !3, line: 1013, type: !704)
!3015 = distinct !DILexicalBlock(scope: !3016, file: !3, line: 1009, column: 2)
!3016 = distinct !DILexicalBlock(scope: !3017, file: !3, line: 1006, column: 11)
!3017 = distinct !DILexicalBlock(scope: !3008, file: !3, line: 1002, column: 5)
!3018 = !DILocalVariable(name: "value", scope: !3015, file: !3, line: 1013, type: !704)
!3019 = !DILocalVariable(name: "n", scope: !3015, file: !3, line: 1014, type: !703)
!3020 = !DILocalVariable(name: "decl", scope: !3021, file: !3, line: 1032, type: !704)
!3021 = distinct !DILexicalBlock(scope: !3022, file: !3, line: 1029, column: 2)
!3022 = distinct !DILexicalBlock(scope: !3016, file: !3, line: 1028, column: 16)
!3023 = !DILocalVariable(name: "n", scope: !3021, file: !3, line: 1033, type: !703)
!3024 = !DILocalVariable(name: "new_tree", scope: !3025, file: !3, line: 1038, type: !704)
!3025 = distinct !DILexicalBlock(scope: !3026, file: !3, line: 1037, column: 6)
!3026 = distinct !DILexicalBlock(scope: !3021, file: !3, line: 1036, column: 8)
!3027 = !DILocalVariable(name: "old", scope: !3025, file: !3, line: 1039, type: !704)
!3028 = !DILocalVariable(name: "type", scope: !3025, file: !3, line: 1046, type: !704)
!3029 = !DILocalVariable(name: "n", scope: !3030, file: !3, line: 1097, type: !703)
!3030 = distinct !DILexicalBlock(scope: !3031, file: !3, line: 1096, column: 6)
!3031 = distinct !DILexicalBlock(scope: !3032, file: !3, line: 1095, column: 8)
!3032 = distinct !DILexicalBlock(scope: !3033, file: !3, line: 1093, column: 2)
!3033 = distinct !DILexicalBlock(scope: !3017, file: !3, line: 1092, column: 11)
!3034 = !DILocalVariable(name: "invariant", scope: !3035, file: !3, line: 1122, type: !696)
!3035 = distinct !DILexicalBlock(scope: !3036, file: !3, line: 1121, column: 2)
!3036 = distinct !DILexicalBlock(scope: !3037, file: !3, line: 1120, column: 16)
!3037 = distinct !DILexicalBlock(scope: !3017, file: !3, line: 1111, column: 11)
!3038 = !DILocation(line: 0, scope: !2988)
!3039 = !DILocation(line: 907, column: 24, scope: !2988)
!3040 = !DILocation(line: 908, column: 17, scope: !2988)
!3041 = !DILocation(line: 920, column: 7, scope: !3001)
!3042 = !DILocation(line: 920, column: 23, scope: !3001)
!3043 = !DILocation(line: 920, column: 38, scope: !3001)
!3044 = !DILocation(line: 920, column: 45, scope: !3001)
!3045 = !DILocation(line: 920, column: 41, scope: !3001)
!3046 = !DILocation(line: 920, column: 7, scope: !2988)
!3047 = !DILocation(line: 922, column: 25, scope: !3000)
!3048 = !DILocation(line: 0, scope: !3000)
!3049 = !DILocation(line: 929, column: 11, scope: !3050)
!3050 = distinct !DILexicalBlock(scope: !3000, file: !3, line: 929, column: 11)
!3051 = !DILocation(line: 929, column: 22, scope: !3050)
!3052 = !DILocation(line: 929, column: 25, scope: !3050)
!3053 = !DILocation(line: 929, column: 48, scope: !3050)
!3054 = !DILocation(line: 929, column: 11, scope: !3000)
!3055 = !DILocation(line: 933, column: 10, scope: !3056)
!3056 = distinct !DILexicalBlock(scope: !3050, file: !3, line: 930, column: 2)
!3057 = !DILocation(line: 940, column: 5, scope: !3001)
!3058 = !DILocation(line: 938, column: 4, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !3050, file: !3, line: 936, column: 2)
!3060 = !DILocation(line: 0, scope: !3050)
!3061 = !DILocation(line: 941, column: 28, scope: !3005)
!3062 = !DILocation(line: 0, scope: !3005)
!3063 = !DILocation(line: 941, column: 12, scope: !3001)
!3064 = !DILocation(line: 943, column: 13, scope: !3065)
!3065 = distinct !DILexicalBlock(scope: !3005, file: !3, line: 942, column: 5)
!3066 = !DILocation(line: 943, column: 11, scope: !3065)
!3067 = !DILocation(line: 944, column: 22, scope: !3065)
!3068 = !DILocation(line: 945, column: 7, scope: !3065)
!3069 = !DILocation(line: 952, column: 12, scope: !3004)
!3070 = !DILocation(line: 0, scope: !3004)
!3071 = !DILocation(line: 952, column: 12, scope: !3005)
!3072 = !DILocation(line: 957, column: 18, scope: !3003)
!3073 = !DILocation(line: 0, scope: !3003)
!3074 = !DILocation(line: 958, column: 7, scope: !3003)
!3075 = !DILocation(line: 960, column: 7, scope: !3003)
!3076 = distinct !{!3076, !3075, !3075}
!3077 = !DILocation(line: 961, column: 11, scope: !3003)
!3078 = !DILocation(line: 962, column: 22, scope: !3003)
!3079 = !DILocation(line: 963, column: 5, scope: !3003)
!3080 = !DILocation(line: 964, column: 12, scope: !3013)
!3081 = !DILocation(line: 964, column: 28, scope: !3013)
!3082 = !DILocation(line: 964, column: 12, scope: !3004)
!3083 = !DILocation(line: 965, column: 5, scope: !3013)
!3084 = !DILocation(line: 966, column: 28, scope: !3012)
!3085 = !DILocation(line: 967, column: 5, scope: !3012)
!3086 = !DILocation(line: 967, column: 24, scope: !3012)
!3087 = !DILocation(line: 966, column: 12, scope: !3013)
!3088 = !DILocation(line: 968, column: 30, scope: !3012)
!3089 = !DILocation(line: 968, column: 5, scope: !3012)
!3090 = !DILocation(line: 969, column: 28, scope: !3011)
!3091 = !DILocation(line: 970, column: 5, scope: !3011)
!3092 = !DILocation(line: 970, column: 11, scope: !3011)
!3093 = !DILocation(line: 971, column: 9, scope: !3011)
!3094 = !DILocation(line: 971, column: 12, scope: !3011)
!3095 = !DILocation(line: 971, column: 47, scope: !3011)
!3096 = !DILocation(line: 971, column: 40, scope: !3011)
!3097 = !DILocation(line: 969, column: 12, scope: !3012)
!3098 = !DILocation(line: 973, column: 23, scope: !3011)
!3099 = !DILocation(line: 974, column: 12, scope: !3010)
!3100 = !DILocation(line: 973, column: 11, scope: !3011)
!3101 = !DILocation(line: 973, column: 9, scope: !3011)
!3102 = !DILocation(line: 973, column: 5, scope: !3011)
!3103 = !DILocation(line: 974, column: 28, scope: !3010)
!3104 = !DILocation(line: 974, column: 12, scope: !3011)
!3105 = !DILocation(line: 975, column: 5, scope: !3010)
!3106 = !DILocation(line: 977, column: 12, scope: !3009)
!3107 = !DILocation(line: 977, column: 12, scope: !3010)
!3108 = !DILocation(line: 0, scope: !3009)
!3109 = !DILocation(line: 978, column: 11, scope: !3009)
!3110 = !DILocation(line: 978, column: 9, scope: !3009)
!3111 = !DILocation(line: 978, column: 5, scope: !3009)
!3112 = !DILocation(line: 982, column: 12, scope: !3008)
!3113 = !DILocation(line: 982, column: 12, scope: !3009)
!3114 = !DILocation(line: 984, column: 35, scope: !3007)
!3115 = !DILocation(line: 984, column: 23, scope: !3007)
!3116 = !DILocation(line: 0, scope: !3007)
!3117 = !DILocation(line: 986, column: 23, scope: !3118)
!3118 = distinct !DILexicalBlock(scope: !3007, file: !3, line: 986, column: 11)
!3119 = !DILocation(line: 986, column: 20, scope: !3118)
!3120 = !DILocation(line: 986, column: 11, scope: !3007)
!3121 = !DILocation(line: 987, column: 17, scope: !3118)
!3122 = !DILocation(line: 987, column: 2, scope: !3118)
!3123 = !DILocation(line: 989, column: 16, scope: !3124)
!3124 = distinct !DILexicalBlock(scope: !3118, file: !3, line: 989, column: 16)
!3125 = !DILocation(line: 989, column: 32, scope: !3124)
!3126 = !DILocation(line: 989, column: 16, scope: !3118)
!3127 = !DILocation(line: 990, column: 38, scope: !3124)
!3128 = !DILocation(line: 991, column: 7, scope: !3124)
!3129 = !DILocation(line: 990, column: 8, scope: !3124)
!3130 = !DILocation(line: 990, column: 6, scope: !3124)
!3131 = !DILocation(line: 990, column: 2, scope: !3124)
!3132 = !DILocation(line: 0, scope: !3124)
!3133 = !DILocation(line: 994, column: 10, scope: !3134)
!3134 = distinct !DILexicalBlock(scope: !3124, file: !3, line: 993, column: 2)
!3135 = !DILocation(line: 994, column: 8, scope: !3134)
!3136 = !DILocation(line: 995, column: 4, scope: !3134)
!3137 = !DILocation(line: 995, column: 20, scope: !3134)
!3138 = !DILocation(line: 1006, column: 11, scope: !3016)
!3139 = !DILocation(line: 1006, column: 27, scope: !3016)
!3140 = !DILocation(line: 1007, column: 4, scope: !3016)
!3141 = !DILocation(line: 1007, column: 7, scope: !3016)
!3142 = !DILocation(line: 1007, column: 32, scope: !3016)
!3143 = !DILocation(line: 1007, column: 29, scope: !3016)
!3144 = !DILocation(line: 1008, column: 4, scope: !3016)
!3145 = !DILocation(line: 1008, column: 26, scope: !3016)
!3146 = !DILocation(line: 1008, column: 8, scope: !3016)
!3147 = !DILocation(line: 1008, column: 7, scope: !3016)
!3148 = !DILocation(line: 1006, column: 11, scope: !3017)
!3149 = !DILocation(line: 1028, column: 16, scope: !3022)
!3150 = !DILocation(line: 1013, column: 16, scope: !3015)
!3151 = !DILocation(line: 1016, column: 43, scope: !3015)
!3152 = !DILocation(line: 1016, column: 17, scope: !3015)
!3153 = !DILocation(line: 0, scope: !3015)
!3154 = !DILocation(line: 1017, column: 8, scope: !3155)
!3155 = distinct !DILexicalBlock(scope: !3015, file: !3, line: 1017, column: 8)
!3156 = !DILocation(line: 1017, column: 8, scope: !3015)
!3157 = !DILocation(line: 1016, column: 8, scope: !3015)
!3158 = !DILocation(line: 0, scope: !3159)
!3159 = distinct !DILexicalBlock(scope: !3155, file: !3, line: 1018, column: 6)
!3160 = !DILocation(line: 1020, column: 8, scope: !3159)
!3161 = distinct !{!3161, !3160, !3160}
!3162 = !DILocation(line: 1021, column: 12, scope: !3163)
!3163 = distinct !DILexicalBlock(scope: !3159, file: !3, line: 1021, column: 12)
!3164 = !DILocation(line: 1021, column: 34, scope: !3163)
!3165 = !DILocation(line: 1021, column: 37, scope: !3163)
!3166 = !DILocation(line: 1021, column: 12, scope: !3159)
!3167 = !DILocation(line: 1023, column: 29, scope: !3168)
!3168 = distinct !DILexicalBlock(scope: !3163, file: !3, line: 1022, column: 3)
!3169 = !DILocation(line: 1023, column: 11, scope: !3168)
!3170 = !DILocation(line: 1023, column: 9, scope: !3168)
!3171 = !DILocation(line: 1024, column: 12, scope: !3168)
!3172 = !DILocation(line: 1024, column: 5, scope: !3168)
!3173 = !DILocation(line: 1028, column: 32, scope: !3022)
!3174 = !DILocation(line: 1028, column: 16, scope: !3016)
!3175 = !DILocation(line: 1032, column: 16, scope: !3021)
!3176 = !DILocation(line: 1035, column: 43, scope: !3021)
!3177 = !DILocation(line: 1035, column: 17, scope: !3021)
!3178 = !DILocation(line: 0, scope: !3021)
!3179 = !DILocation(line: 1036, column: 8, scope: !3026)
!3180 = !DILocation(line: 1036, column: 8, scope: !3021)
!3181 = !DILocation(line: 1046, column: 20, scope: !3025)
!3182 = !DILocation(line: 0, scope: !3025)
!3183 = !DILocation(line: 1047, column: 16, scope: !3184)
!3184 = distinct !DILexicalBlock(scope: !3025, file: !3, line: 1047, column: 12)
!3185 = !DILocation(line: 1047, column: 12, scope: !3184)
!3186 = !DILocation(line: 0, scope: !3184)
!3187 = !DILocation(line: 1047, column: 12, scope: !3025)
!3188 = !DILocation(line: 1050, column: 14, scope: !3184)
!3189 = !DILocation(line: 1051, column: 14, scope: !3025)
!3190 = !DILocation(line: 1052, column: 14, scope: !3025)
!3191 = !DILocation(line: 1052, column: 12, scope: !3025)
!3192 = !DILocation(line: 1053, column: 14, scope: !3193)
!3193 = distinct !DILexicalBlock(scope: !3025, file: !3, line: 1053, column: 12)
!3194 = !DILocation(line: 1053, column: 12, scope: !3025)
!3195 = !DILocation(line: 1055, column: 9, scope: !3196)
!3196 = distinct !DILexicalBlock(scope: !3197, file: !3, line: 1055, column: 9)
!3197 = distinct !DILexicalBlock(scope: !3193, file: !3, line: 1054, column: 10)
!3198 = !DILocation(line: 1055, column: 30, scope: !3196)
!3199 = !DILocation(line: 1055, column: 9, scope: !3197)
!3200 = !DILocation(line: 1057, column: 36, scope: !3201)
!3201 = distinct !DILexicalBlock(scope: !3196, file: !3, line: 1056, column: 7)
!3202 = !DILocation(line: 1057, column: 15, scope: !3201)
!3203 = !DILocation(line: 1057, column: 13, scope: !3201)
!3204 = !DILocation(line: 1062, column: 15, scope: !3205)
!3205 = distinct !DILexicalBlock(scope: !3201, file: !3, line: 1062, column: 13)
!3206 = !DILocation(line: 1062, column: 13, scope: !3201)
!3207 = !DILocation(line: 1063, column: 10, scope: !3205)
!3208 = !DILocation(line: 1063, column: 8, scope: !3205)
!3209 = !DILocation(line: 1063, column: 4, scope: !3205)
!3210 = !DILocation(line: 1067, column: 22, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3196, file: !3, line: 1066, column: 7)
!3212 = !DILocation(line: 1067, column: 20, scope: !3211)
!3213 = !DILocation(line: 1068, column: 36, scope: !3211)
!3214 = !DILocation(line: 1068, column: 9, scope: !3211)
!3215 = !DILocation(line: 1068, column: 34, scope: !3211)
!3216 = !DILocation(line: 1069, column: 35, scope: !3211)
!3217 = !DILocation(line: 1069, column: 9, scope: !3211)
!3218 = !DILocation(line: 1069, column: 33, scope: !3211)
!3219 = !DILocation(line: 1072, column: 23, scope: !3025)
!3220 = !DILocation(line: 1079, column: 7, scope: !3017)
!3221 = !DILocation(line: 1083, column: 28, scope: !3222)
!3222 = distinct !DILexicalBlock(scope: !3017, file: !3, line: 1083, column: 11)
!3223 = !DILocation(line: 1083, column: 11, scope: !3222)
!3224 = !DILocation(line: 1084, column: 4, scope: !3222)
!3225 = !DILocation(line: 1084, column: 7, scope: !3222)
!3226 = !DILocation(line: 1084, column: 23, scope: !3222)
!3227 = !DILocation(line: 1085, column: 4, scope: !3222)
!3228 = !DILocation(line: 1085, column: 11, scope: !3222)
!3229 = !DILocation(line: 1086, column: 8, scope: !3222)
!3230 = !DILocation(line: 1086, column: 4, scope: !3222)
!3231 = !DILocation(line: 1087, column: 2, scope: !3222)
!3232 = !DILocation(line: 1092, column: 11, scope: !3033)
!3233 = !DILocation(line: 1092, column: 11, scope: !3017)
!3234 = !DILocation(line: 1094, column: 20, scope: !3032)
!3235 = !DILocation(line: 1094, column: 41, scope: !3032)
!3236 = !DILocation(line: 1094, column: 16, scope: !3032)
!3237 = !DILocation(line: 1094, column: 52, scope: !3032)
!3238 = !DILocation(line: 1095, column: 8, scope: !3031)
!3239 = !DILocation(line: 1095, column: 8, scope: !3032)
!3240 = !DILocation(line: 1098, column: 47, scope: !3030)
!3241 = !DILocation(line: 1099, column: 8, scope: !3030)
!3242 = !DILocation(line: 1098, column: 21, scope: !3030)
!3243 = !DILocation(line: 1098, column: 12, scope: !3030)
!3244 = !DILocation(line: 0, scope: !3030)
!3245 = !DILocation(line: 1100, column: 8, scope: !3030)
!3246 = !DILocation(line: 1101, column: 20, scope: !3030)
!3247 = !DILocation(line: 1102, column: 6, scope: !3030)
!3248 = !DILocation(line: 0, scope: !3032)
!3249 = !DILocation(line: 1103, column: 4, scope: !3032)
!3250 = !DILocation(line: 1103, column: 21, scope: !3032)
!3251 = !DILocation(line: 1106, column: 11, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3017, file: !3, line: 1106, column: 11)
!3253 = !DILocation(line: 1104, column: 2, scope: !3032)
!3254 = !DILocation(line: 1106, column: 27, scope: !3252)
!3255 = !DILocation(line: 1106, column: 11, scope: !3017)
!3256 = !DILocation(line: 1107, column: 32, scope: !3252)
!3257 = !DILocation(line: 1107, column: 20, scope: !3252)
!3258 = !DILocation(line: 1107, column: 2, scope: !3252)
!3259 = !DILocation(line: 1107, column: 18, scope: !3252)
!3260 = !DILocation(line: 1111, column: 11, scope: !3037)
!3261 = !DILocation(line: 1111, column: 27, scope: !3037)
!3262 = !DILocation(line: 1111, column: 42, scope: !3037)
!3263 = !DILocation(line: 1111, column: 45, scope: !3037)
!3264 = !DILocation(line: 1111, column: 11, scope: !3017)
!3265 = !DILocation(line: 1113, column: 28, scope: !3266)
!3266 = distinct !DILexicalBlock(scope: !3037, file: !3, line: 1112, column: 2)
!3267 = !DILocation(line: 1113, column: 4, scope: !3266)
!3268 = !DILocation(line: 1113, column: 26, scope: !3266)
!3269 = !DILocation(line: 1114, column: 4, scope: !3266)
!3270 = !DILocation(line: 1114, column: 26, scope: !3266)
!3271 = !DILocation(line: 1115, column: 2, scope: !3266)
!3272 = !DILocation(line: 1120, column: 32, scope: !3036)
!3273 = !DILocation(line: 1120, column: 16, scope: !3037)
!3274 = !DILocation(line: 1122, column: 20, scope: !3035)
!3275 = !DILocation(line: 0, scope: !3035)
!3276 = !DILocation(line: 1123, column: 4, scope: !3035)
!3277 = !DILocation(line: 1127, column: 8, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3035, file: !3, line: 1127, column: 8)
!3279 = !DILocation(line: 1127, column: 42, scope: !3278)
!3280 = !DILocation(line: 1127, column: 8, scope: !3035)
!3281 = !DILocation(line: 1128, column: 12, scope: !3278)
!3282 = !DILocation(line: 1128, column: 10, scope: !3278)
!3283 = !DILocation(line: 1128, column: 6, scope: !3278)
!3284 = !DILocation(line: 0, scope: !3278)
!3285 = !DILocation(line: 1130, column: 6, scope: !3278)
!3286 = !DILocation(line: 1134, column: 8, scope: !3287)
!3287 = distinct !DILexicalBlock(scope: !3035, file: !3, line: 1134, column: 8)
!3288 = !DILocation(line: 1134, column: 18, scope: !3287)
!3289 = !DILocation(line: 1134, column: 47, scope: !3287)
!3290 = !DILocation(line: 1134, column: 22, scope: !3287)
!3291 = !DILocation(line: 1134, column: 8, scope: !3035)
!3292 = !DILocation(line: 1135, column: 10, scope: !3287)
!3293 = !DILocation(line: 1135, column: 21, scope: !3287)
!3294 = !DILocation(line: 1135, column: 6, scope: !3287)
!3295 = !DILocation(line: 1137, column: 19, scope: !3035)
!3296 = !DILocation(line: 1138, column: 2, scope: !3035)
!3297 = !DILocation(line: 1142, column: 3, scope: !2988)
!3298 = !DILocation(line: 1143, column: 1, scope: !2988)
!3299 = distinct !DISubprogram(name: "gimple_in_ssa_p", scope: !3300, file: !3300, line: 33, type: !3301, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3305)
!3300 = !DIFile(filename: "./tree-flow-inline.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!3301 = !DISubroutineType(types: !3302)
!3302 = !{!695, !3303}
!3303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3304, size: 64)
!3304 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1415)
!3305 = !{!3306}
!3306 = !DILocalVariable(name: "fun", arg: 1, scope: !3299, file: !3300, line: 33, type: !3303)
!3307 = !DILocation(line: 0, scope: !3299)
!3308 = !DILocation(line: 35, column: 10, scope: !3299)
!3309 = !DILocation(line: 35, column: 14, scope: !3299)
!3310 = !DILocation(line: 35, column: 22, scope: !3299)
!3311 = !DILocation(line: 35, column: 17, scope: !3299)
!3312 = !DILocation(line: 35, column: 32, scope: !3299)
!3313 = !DILocation(line: 35, column: 51, scope: !3299)
!3314 = !DILocation(line: 35, column: 3, scope: !3299)
!3315 = distinct !DISubprogram(name: "get_var_ann", scope: !3300, file: !3300, line: 141, type: !3316, scopeLine: 142, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3319)
!3316 = !DISubroutineType(types: !3317)
!3317 = !{!3318, !704}
!3318 = !DIDerivedType(tag: DW_TAG_typedef, name: "var_ann_t", file: !1366, line: 297, baseType: !1364)
!3319 = !{!3320, !3321}
!3320 = !DILocalVariable(name: "var", arg: 1, scope: !3315, file: !3300, line: 141, type: !704)
!3321 = !DILocalVariable(name: "p", scope: !3315, file: !3300, line: 143, type: !3322)
!3322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3318, size: 64)
!3323 = !DILocation(line: 0, scope: !3315)
!3324 = !DILocation(line: 143, column: 18, scope: !3315)
!3325 = !DILocation(line: 144, column: 3, scope: !3315)
!3326 = !DILocation(line: 145, column: 10, scope: !3315)
!3327 = !DILocation(line: 145, column: 20, scope: !3315)
!3328 = !DILocation(line: 145, column: 3, scope: !3315)
!3329 = distinct !DISubprogram(name: "remap_type_1", scope: !3, file: !3, line: 327, type: !2879, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3330)
!3330 = !{!3331, !3332, !3333, !3334, !3335, !3338}
!3331 = !DILocalVariable(name: "type", arg: 1, scope: !3329, file: !3, line: 327, type: !704)
!3332 = !DILocalVariable(name: "id", arg: 2, scope: !3329, file: !3, line: 327, type: !2095)
!3333 = !DILocalVariable(name: "new_tree", scope: !3329, file: !3, line: 329, type: !704)
!3334 = !DILocalVariable(name: "t", scope: !3329, file: !3, line: 329, type: !704)
!3335 = !DILocalVariable(name: "f", scope: !3336, file: !3, line: 416, type: !704)
!3336 = distinct !DILexicalBlock(scope: !3337, file: !3, line: 415, column: 7)
!3337 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 387, column: 5)
!3338 = !DILocalVariable(name: "nf", scope: !3336, file: !3, line: 416, type: !704)
!3339 = !DILocation(line: 0, scope: !3329)
!3340 = !DILocation(line: 334, column: 7, scope: !3341)
!3341 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 334, column: 7)
!3342 = !DILocation(line: 334, column: 24, scope: !3341)
!3343 = !DILocation(line: 334, column: 7, scope: !3329)
!3344 = !DILocation(line: 336, column: 59, scope: !3345)
!3345 = distinct !DILexicalBlock(scope: !3341, file: !3, line: 335, column: 5)
!3346 = !DILocation(line: 336, column: 47, scope: !3345)
!3347 = !DILocation(line: 337, column: 7, scope: !3345)
!3348 = !DILocation(line: 338, column: 7, scope: !3345)
!3349 = !DILocation(line: 336, column: 18, scope: !3345)
!3350 = !DILocation(line: 339, column: 11, scope: !3351)
!3351 = distinct !DILexicalBlock(scope: !3345, file: !3, line: 339, column: 11)
!3352 = !DILocation(line: 339, column: 34, scope: !3351)
!3353 = !DILocation(line: 342, column: 13, scope: !3351)
!3354 = !DILocation(line: 0, scope: !3351)
!3355 = !DILocation(line: 339, column: 37, scope: !3351)
!3356 = !DILocation(line: 339, column: 11, scope: !3345)
!3357 = !DILocation(line: 340, column: 13, scope: !3351)
!3358 = !DILocation(line: 340, column: 2, scope: !3351)
!3359 = !DILocation(line: 0, scope: !3345)
!3360 = !DILocation(line: 343, column: 7, scope: !3345)
!3361 = !DILocation(line: 344, column: 7, scope: !3345)
!3362 = !DILocation(line: 346, column: 29, scope: !3363)
!3363 = distinct !DILexicalBlock(scope: !3341, file: !3, line: 346, column: 12)
!3364 = !DILocation(line: 346, column: 12, scope: !3341)
!3365 = !DILocation(line: 348, column: 61, scope: !3366)
!3366 = distinct !DILexicalBlock(scope: !3363, file: !3, line: 347, column: 5)
!3367 = !DILocation(line: 348, column: 49, scope: !3366)
!3368 = !DILocation(line: 349, column: 10, scope: !3366)
!3369 = !DILocation(line: 350, column: 10, scope: !3366)
!3370 = !DILocation(line: 348, column: 18, scope: !3366)
!3371 = !DILocation(line: 351, column: 11, scope: !3372)
!3372 = distinct !DILexicalBlock(scope: !3366, file: !3, line: 351, column: 11)
!3373 = !DILocation(line: 351, column: 34, scope: !3372)
!3374 = !DILocation(line: 354, column: 13, scope: !3372)
!3375 = !DILocation(line: 0, scope: !3372)
!3376 = !DILocation(line: 351, column: 37, scope: !3372)
!3377 = !DILocation(line: 351, column: 11, scope: !3366)
!3378 = !DILocation(line: 352, column: 13, scope: !3372)
!3379 = !DILocation(line: 352, column: 2, scope: !3372)
!3380 = !DILocation(line: 0, scope: !3366)
!3381 = !DILocation(line: 355, column: 7, scope: !3366)
!3382 = !DILocation(line: 356, column: 7, scope: !3366)
!3383 = !DILocation(line: 359, column: 16, scope: !3363)
!3384 = !DILocation(line: 361, column: 3, scope: !3329)
!3385 = !DILocation(line: 365, column: 7, scope: !3329)
!3386 = !DILocation(line: 366, column: 12, scope: !3387)
!3387 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 366, column: 7)
!3388 = !DILocation(line: 366, column: 7, scope: !3329)
!3389 = !DILocation(line: 368, column: 11, scope: !3390)
!3390 = distinct !DILexicalBlock(scope: !3387, file: !3, line: 367, column: 5)
!3391 = !DILocation(line: 369, column: 7, scope: !3390)
!3392 = !DILocation(line: 369, column: 36, scope: !3390)
!3393 = !DILocation(line: 370, column: 38, scope: !3390)
!3394 = !DILocation(line: 370, column: 7, scope: !3390)
!3395 = !DILocation(line: 370, column: 36, scope: !3390)
!3396 = !DILocation(line: 371, column: 29, scope: !3390)
!3397 = !DILocation(line: 372, column: 5, scope: !3390)
!3398 = !DILocation(line: 375, column: 7, scope: !3399)
!3399 = distinct !DILexicalBlock(scope: !3387, file: !3, line: 374, column: 5)
!3400 = !DILocation(line: 375, column: 36, scope: !3399)
!3401 = !DILocation(line: 376, column: 7, scope: !3399)
!3402 = !DILocation(line: 376, column: 36, scope: !3399)
!3403 = !DILocation(line: 379, column: 7, scope: !3404)
!3404 = distinct !DILexicalBlock(scope: !3329, file: !3, line: 379, column: 7)
!3405 = !DILocation(line: 379, column: 7, scope: !3329)
!3406 = !DILocation(line: 380, column: 33, scope: !3404)
!3407 = !DILocation(line: 380, column: 5, scope: !3404)
!3408 = !DILocation(line: 380, column: 31, scope: !3404)
!3409 = !DILocation(line: 383, column: 3, scope: !3329)
!3410 = !DILocation(line: 383, column: 30, scope: !3329)
!3411 = !DILocation(line: 384, column: 3, scope: !3329)
!3412 = !DILocation(line: 384, column: 32, scope: !3329)
!3413 = !DILocation(line: 386, column: 11, scope: !3329)
!3414 = !DILocation(line: 386, column: 3, scope: !3329)
!3415 = !DILocation(line: 393, column: 11, scope: !3337)
!3416 = !DILocation(line: 394, column: 11, scope: !3417)
!3417 = distinct !DILexicalBlock(scope: !3337, file: !3, line: 394, column: 11)
!3418 = !DILocation(line: 394, column: 13, scope: !3417)
!3419 = !DILocation(line: 394, column: 16, scope: !3417)
!3420 = !DILocation(line: 394, column: 30, scope: !3417)
!3421 = !DILocation(line: 394, column: 11, scope: !3337)
!3422 = !DILocation(line: 395, column: 9, scope: !3417)
!3423 = !DILocation(line: 397, column: 11, scope: !3337)
!3424 = !DILocation(line: 398, column: 11, scope: !3425)
!3425 = distinct !DILexicalBlock(scope: !3337, file: !3, line: 398, column: 11)
!3426 = !DILocation(line: 398, column: 13, scope: !3425)
!3427 = !DILocation(line: 398, column: 16, scope: !3425)
!3428 = !DILocation(line: 398, column: 30, scope: !3425)
!3429 = !DILocation(line: 398, column: 11, scope: !3337)
!3430 = !DILocation(line: 399, column: 9, scope: !3425)
!3431 = !DILocation(line: 403, column: 42, scope: !3337)
!3432 = !DILocation(line: 403, column: 30, scope: !3337)
!3433 = !DILocation(line: 403, column: 28, scope: !3337)
!3434 = !DILocation(line: 404, column: 7, scope: !3337)
!3435 = !DILocation(line: 405, column: 7, scope: !3337)
!3436 = !DILocation(line: 408, column: 42, scope: !3337)
!3437 = !DILocation(line: 408, column: 30, scope: !3337)
!3438 = !DILocation(line: 408, column: 28, scope: !3337)
!3439 = !DILocation(line: 409, column: 44, scope: !3337)
!3440 = !DILocation(line: 409, column: 32, scope: !3337)
!3441 = !DILocation(line: 409, column: 30, scope: !3337)
!3442 = !DILocation(line: 410, column: 7, scope: !3337)
!3443 = !DILocation(line: 0, scope: !3336)
!3444 = !DILocation(line: 418, column: 11, scope: !3445)
!3445 = distinct !DILexicalBlock(scope: !3336, file: !3, line: 418, column: 2)
!3446 = !DILocation(line: 418, column: 7, scope: !3445)
!3447 = !DILocation(line: 0, scope: !3445)
!3448 = !DILocation(line: 418, column: 2, scope: !3445)
!3449 = !DILocation(line: 420, column: 10, scope: !3450)
!3450 = distinct !DILexicalBlock(scope: !3451, file: !3, line: 419, column: 4)
!3451 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 418, column: 2)
!3452 = !DILocation(line: 421, column: 6, scope: !3450)
!3453 = !DILocation(line: 421, column: 23, scope: !3450)
!3454 = !DILocation(line: 422, column: 6, scope: !3450)
!3455 = !DILocation(line: 422, column: 21, scope: !3450)
!3456 = !DILocation(line: 418, column: 43, scope: !3451)
!3457 = !DILocation(line: 418, column: 2, scope: !3451)
!3458 = distinct !{!3458, !3448, !3459}
!3459 = !DILocation(line: 424, column: 4, scope: !3445)
!3460 = !DILocation(line: 425, column: 27, scope: !3336)
!3461 = !DILocation(line: 425, column: 25, scope: !3336)
!3462 = !DILocation(line: 427, column: 7, scope: !3337)
!3463 = !DILocation(line: 432, column: 7, scope: !3337)
!3464 = !DILocation(line: 433, column: 5, scope: !3337)
!3465 = !DILocation(line: 435, column: 3, scope: !3329)
!3466 = !DILocation(line: 436, column: 3, scope: !3329)
!3467 = !DILocation(line: 438, column: 3, scope: !3329)
!3468 = !DILocation(line: 439, column: 1, scope: !3329)
!3469 = distinct !DISubprogram(name: "remap_gimple_seq", scope: !3, file: !3, line: 673, type: !3470, scopeLine: 674, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3472)
!3470 = !DISubroutineType(types: !3471)
!3471 = !{!1018, !1018, !2095}
!3472 = !{!3473, !3474, !3475, !3476, !3477}
!3473 = !DILocalVariable(name: "body", arg: 1, scope: !3469, file: !3, line: 673, type: !1018)
!3474 = !DILocalVariable(name: "id", arg: 2, scope: !3469, file: !3, line: 673, type: !2095)
!3475 = !DILocalVariable(name: "si", scope: !3469, file: !3, line: 675, type: !2373)
!3476 = !DILocalVariable(name: "new_body", scope: !3469, file: !3, line: 676, type: !1018)
!3477 = !DILocalVariable(name: "new_stmt", scope: !3478, file: !3, line: 680, type: !1028)
!3478 = distinct !DILexicalBlock(scope: !3479, file: !3, line: 679, column: 5)
!3479 = distinct !DILexicalBlock(scope: !3480, file: !3, line: 678, column: 3)
!3480 = distinct !DILexicalBlock(scope: !3469, file: !3, line: 678, column: 3)
!3481 = !DILocation(line: 0, scope: !3469)
!3482 = !DILocation(line: 675, column: 3, scope: !3469)
!3483 = !DILocation(line: 676, column: 3, scope: !3469)
!3484 = !DILocation(line: 676, column: 14, scope: !3469)
!3485 = !DILocation(line: 678, column: 13, scope: !3480)
!3486 = !DILocation(line: 678, column: 8, scope: !3480)
!3487 = !DILocation(line: 678, column: 32, scope: !3479)
!3488 = !DILocation(line: 678, column: 31, scope: !3479)
!3489 = !DILocation(line: 678, column: 3, scope: !3480)
!3490 = !DILocation(line: 680, column: 44, scope: !3478)
!3491 = !DILocation(line: 680, column: 25, scope: !3478)
!3492 = !DILocation(line: 0, scope: !3478)
!3493 = !DILocation(line: 681, column: 7, scope: !3478)
!3494 = !DILocation(line: 678, column: 48, scope: !3479)
!3495 = !DILocation(line: 678, column: 3, scope: !3479)
!3496 = distinct !{!3496, !3489, !3497}
!3497 = !DILocation(line: 682, column: 5, scope: !3480)
!3498 = !DILocation(line: 684, column: 10, scope: !3469)
!3499 = !DILocation(line: 685, column: 1, scope: !3469)
!3500 = !DILocation(line: 684, column: 3, scope: !3469)
!3501 = distinct !DISubprogram(name: "gsi_start", scope: !597, file: !597, line: 4403, type: !3502, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3504)
!3502 = !DISubroutineType(types: !3503)
!3503 = !{!2373, !1018}
!3504 = !{!3505, !3506}
!3505 = !DILocalVariable(name: "seq", arg: 1, scope: !3501, file: !597, line: 4403, type: !1018)
!3506 = !DILocalVariable(name: "i", scope: !3501, file: !597, line: 4405, type: !2373)
!3507 = !DILocation(line: 0, scope: !3501)
!3508 = !DILocation(line: 4405, column: 24, scope: !3501)
!3509 = !DILocation(line: 4407, column: 11, scope: !3501)
!3510 = !DILocation(line: 4407, column: 5, scope: !3501)
!3511 = !DILocation(line: 4407, column: 9, scope: !3501)
!3512 = !DILocation(line: 4408, column: 5, scope: !3501)
!3513 = !DILocation(line: 4408, column: 9, scope: !3501)
!3514 = !DILocation(line: 4409, column: 11, scope: !3501)
!3515 = !DILocation(line: 4409, column: 17, scope: !3501)
!3516 = !DILocation(line: 4409, column: 27, scope: !3501)
!3517 = !DILocation(line: 4409, column: 20, scope: !3501)
!3518 = !DILocation(line: 4409, column: 10, scope: !3501)
!3519 = !DILocation(line: 4409, column: 35, scope: !3501)
!3520 = !DILocation(line: 4409, column: 5, scope: !3501)
!3521 = !DILocation(line: 4409, column: 8, scope: !3501)
!3522 = !DILocation(line: 4411, column: 3, scope: !3501)
!3523 = distinct !DISubprogram(name: "gsi_end_p", scope: !597, file: !597, line: 4467, type: !3524, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3526)
!3524 = !DISubroutineType(types: !3525)
!3525 = !{!695, !2373}
!3526 = !{!3527}
!3527 = !DILocalVariable(name: "i", arg: 1, scope: !3523, file: !597, line: 4467, type: !2373)
!3528 = !DILocation(line: 4467, column: 33, scope: !3523)
!3529 = !DILocation(line: 4469, column: 12, scope: !3523)
!3530 = !DILocation(line: 4469, column: 16, scope: !3523)
!3531 = !DILocation(line: 4469, column: 10, scope: !3523)
!3532 = !DILocation(line: 4469, column: 3, scope: !3523)
!3533 = distinct !DISubprogram(name: "remap_gimple_stmt", scope: !3, file: !3, line: 1179, type: !3534, scopeLine: 1180, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3536)
!3534 = !DISubroutineType(types: !3535)
!3535 = !{!1028, !1028, !2095}
!3536 = !{!3537, !3538, !3539, !3540, !3541, !3542, !3543, !3546, !3549, !3550, !3553, !3557, !3558, !3559, !3563, !3564, !3566, !3568}
!3537 = !DILocalVariable(name: "stmt", arg: 1, scope: !3533, file: !3, line: 1179, type: !1028)
!3538 = !DILocalVariable(name: "id", arg: 2, scope: !3533, file: !3, line: 1179, type: !2095)
!3539 = !DILocalVariable(name: "copy", scope: !3533, file: !3, line: 1181, type: !1028)
!3540 = !DILocalVariable(name: "wi", scope: !3533, file: !3, line: 1182, type: !2370)
!3541 = !DILocalVariable(name: "new_block", scope: !3533, file: !3, line: 1183, type: !704)
!3542 = !DILocalVariable(name: "skip_first", scope: !3533, file: !3, line: 1184, type: !695)
!3543 = !DILocalVariable(name: "retval", scope: !3544, file: !3, line: 1198, type: !704)
!3544 = distinct !DILexicalBlock(scope: !3545, file: !3, line: 1197, column: 5)
!3545 = distinct !DILexicalBlock(scope: !3533, file: !3, line: 1196, column: 7)
!3546 = !DILocalVariable(name: "s1", scope: !3547, file: !3, line: 1216, type: !1018)
!3547 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 1215, column: 5)
!3548 = distinct !DILexicalBlock(scope: !3545, file: !3, line: 1214, column: 12)
!3549 = !DILocalVariable(name: "s2", scope: !3547, file: !3, line: 1216, type: !1018)
!3550 = !DILocalVariable(name: "i", scope: !3551, file: !3, line: 1275, type: !1172)
!3551 = distinct !DILexicalBlock(scope: !3552, file: !3, line: 1274, column: 4)
!3552 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 1222, column: 2)
!3553 = !DILocalVariable(name: "decl", scope: !3554, file: !3, line: 1342, type: !704)
!3554 = distinct !DILexicalBlock(scope: !3555, file: !3, line: 1334, column: 2)
!3555 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 1331, column: 11)
!3556 = distinct !DILexicalBlock(scope: !3548, file: !3, line: 1330, column: 5)
!3557 = !DILocalVariable(name: "value", scope: !3554, file: !3, line: 1342, type: !704)
!3558 = !DILocalVariable(name: "n", scope: !3554, file: !3, line: 1343, type: !703)
!3559 = !DILocalVariable(name: "r", scope: !3560, file: !3, line: 1374, type: !704)
!3560 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 1373, column: 6)
!3561 = distinct !DILexicalBlock(scope: !3562, file: !3, line: 1371, column: 4)
!3562 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 1369, column: 11)
!3563 = !DILocalVariable(name: "fndecl", scope: !3560, file: !3, line: 1374, type: !704)
!3564 = !DILocalVariable(name: "r", scope: !3565, file: !3, line: 1399, type: !696)
!3565 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 1398, column: 6)
!3566 = !DILocalVariable(name: "r", scope: !3567, file: !3, line: 1407, type: !696)
!3567 = distinct !DILexicalBlock(scope: !3561, file: !3, line: 1406, column: 6)
!3568 = !DILocalVariable(name: "n", scope: !3569, file: !3, line: 1424, type: !703)
!3569 = distinct !DILexicalBlock(scope: !3570, file: !3, line: 1423, column: 5)
!3570 = distinct !DILexicalBlock(scope: !3533, file: !3, line: 1422, column: 7)
!3571 = !DILocation(line: 0, scope: !3533)
!3572 = !DILocation(line: 1182, column: 3, scope: !3533)
!3573 = !DILocation(line: 1196, column: 7, scope: !3545)
!3574 = !DILocation(line: 1196, column: 26, scope: !3545)
!3575 = !DILocation(line: 1196, column: 43, scope: !3545)
!3576 = !DILocation(line: 1196, column: 50, scope: !3545)
!3577 = !DILocation(line: 1196, column: 46, scope: !3545)
!3578 = !DILocation(line: 1196, column: 7, scope: !3533)
!3579 = !DILocation(line: 1198, column: 21, scope: !3544)
!3580 = !DILocation(line: 0, scope: !3544)
!3581 = !DILocation(line: 1205, column: 11, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3544, file: !3, line: 1205, column: 11)
!3583 = !DILocation(line: 1205, column: 18, scope: !3582)
!3584 = !DILocation(line: 1205, column: 21, scope: !3582)
!3585 = !DILocation(line: 1205, column: 40, scope: !3582)
!3586 = !DILocation(line: 1205, column: 11, scope: !3544)
!3587 = !DILocation(line: 1207, column: 11, scope: !3588)
!3588 = distinct !DILexicalBlock(scope: !3582, file: !3, line: 1206, column: 9)
!3589 = !DILocation(line: 1213, column: 5, scope: !3545)
!3590 = !DILocation(line: 1212, column: 9, scope: !3582)
!3591 = !DILocation(line: 1212, column: 2, scope: !3582)
!3592 = !DILocation(line: 1214, column: 12, scope: !3548)
!3593 = !DILocation(line: 1214, column: 12, scope: !3545)
!3594 = !DILocation(line: 1221, column: 15, scope: !3547)
!3595 = !DILocation(line: 1221, column: 7, scope: !3547)
!3596 = !DILocation(line: 1224, column: 11, scope: !3552)
!3597 = !DILocation(line: 1225, column: 4, scope: !3552)
!3598 = !DILocation(line: 1228, column: 27, scope: !3552)
!3599 = !DILocation(line: 1228, column: 9, scope: !3552)
!3600 = !DILocation(line: 0, scope: !3547)
!3601 = !DILocation(line: 1229, column: 31, scope: !3552)
!3602 = !DILocation(line: 1229, column: 11, scope: !3552)
!3603 = !DILocation(line: 1230, column: 4, scope: !3552)
!3604 = !DILocation(line: 1233, column: 27, scope: !3552)
!3605 = !DILocation(line: 1233, column: 9, scope: !3552)
!3606 = !DILocation(line: 1234, column: 35, scope: !3552)
!3607 = !DILocation(line: 1234, column: 11, scope: !3552)
!3608 = !DILocation(line: 1235, column: 4, scope: !3552)
!3609 = !DILocation(line: 1238, column: 27, scope: !3552)
!3610 = !DILocation(line: 1238, column: 9, scope: !3552)
!3611 = !DILocation(line: 1239, column: 27, scope: !3552)
!3612 = !DILocation(line: 1239, column: 9, scope: !3552)
!3613 = !DILocation(line: 1240, column: 37, scope: !3552)
!3614 = !DILocation(line: 1240, column: 11, scope: !3552)
!3615 = !DILocation(line: 1241, column: 4, scope: !3552)
!3616 = !DILocation(line: 1244, column: 27, scope: !3552)
!3617 = !DILocation(line: 1244, column: 9, scope: !3552)
!3618 = !DILocation(line: 1245, column: 11, scope: !3552)
!3619 = !DILocation(line: 1246, column: 4, scope: !3552)
!3620 = !DILocation(line: 1249, column: 27, scope: !3552)
!3621 = !DILocation(line: 1249, column: 9, scope: !3552)
!3622 = !DILocation(line: 1252, column: 7, scope: !3552)
!3623 = !DILocation(line: 1253, column: 7, scope: !3552)
!3624 = !DILocation(line: 1254, column: 7, scope: !3552)
!3625 = !DILocation(line: 1250, column: 11, scope: !3552)
!3626 = !DILocation(line: 1255, column: 4, scope: !3552)
!3627 = !DILocation(line: 1258, column: 27, scope: !3552)
!3628 = !DILocation(line: 1258, column: 9, scope: !3552)
!3629 = !DILocation(line: 1261, column: 7, scope: !3552)
!3630 = !DILocation(line: 1262, column: 7, scope: !3552)
!3631 = !DILocation(line: 1263, column: 7, scope: !3552)
!3632 = !DILocation(line: 1264, column: 7, scope: !3552)
!3633 = !DILocation(line: 1265, column: 7, scope: !3552)
!3634 = !DILocation(line: 1266, column: 7, scope: !3552)
!3635 = !DILocation(line: 1259, column: 11, scope: !3552)
!3636 = !DILocation(line: 1267, column: 4, scope: !3552)
!3637 = !DILocation(line: 1270, column: 27, scope: !3552)
!3638 = !DILocation(line: 1270, column: 9, scope: !3552)
!3639 = !DILocation(line: 1271, column: 27, scope: !3552)
!3640 = !DILocation(line: 1271, column: 9, scope: !3552)
!3641 = !DILocation(line: 1272, column: 37, scope: !3552)
!3642 = !DILocation(line: 1273, column: 12, scope: !3552)
!3643 = !DILocation(line: 1272, column: 11, scope: !3552)
!3644 = !DILocation(line: 0, scope: !3551)
!3645 = !DILocation(line: 1276, column: 11, scope: !3646)
!3646 = distinct !DILexicalBlock(scope: !3551, file: !3, line: 1276, column: 6)
!3647 = !DILocation(line: 0, scope: !3646)
!3648 = !DILocation(line: 1276, column: 22, scope: !3649)
!3649 = distinct !DILexicalBlock(scope: !3646, file: !3, line: 1276, column: 6)
!3650 = !DILocation(line: 1276, column: 20, scope: !3649)
!3651 = !DILocation(line: 1276, column: 6, scope: !3646)
!3652 = !DILocation(line: 1279, column: 8, scope: !3653)
!3653 = distinct !DILexicalBlock(scope: !3649, file: !3, line: 1277, column: 8)
!3654 = !DILocation(line: 1278, column: 3, scope: !3653)
!3655 = !DILocation(line: 1281, column: 10, scope: !3653)
!3656 = !DILocation(line: 1280, column: 3, scope: !3653)
!3657 = !DILocation(line: 1283, column: 8, scope: !3653)
!3658 = !DILocation(line: 1282, column: 3, scope: !3653)
!3659 = !DILocation(line: 1285, column: 7, scope: !3653)
!3660 = !DILocation(line: 1284, column: 3, scope: !3653)
!3661 = !DILocation(line: 1287, column: 7, scope: !3653)
!3662 = !DILocation(line: 1286, column: 3, scope: !3653)
!3663 = !DILocation(line: 1276, column: 55, scope: !3649)
!3664 = !DILocation(line: 1276, column: 6, scope: !3649)
!3665 = distinct !{!3665, !3651, !3666}
!3666 = !DILocation(line: 1288, column: 8, scope: !3646)
!3667 = !DILocation(line: 1293, column: 27, scope: !3552)
!3668 = !DILocation(line: 1293, column: 9, scope: !3552)
!3669 = !DILocation(line: 1294, column: 11, scope: !3552)
!3670 = !DILocation(line: 1295, column: 4, scope: !3552)
!3671 = !DILocation(line: 1298, column: 27, scope: !3552)
!3672 = !DILocation(line: 1298, column: 9, scope: !3552)
!3673 = !DILocation(line: 1299, column: 11, scope: !3552)
!3674 = !DILocation(line: 1300, column: 4, scope: !3552)
!3675 = !DILocation(line: 1303, column: 27, scope: !3552)
!3676 = !DILocation(line: 1303, column: 9, scope: !3552)
!3677 = !DILocation(line: 1304, column: 11, scope: !3552)
!3678 = !DILocation(line: 1305, column: 4, scope: !3552)
!3679 = !DILocation(line: 1308, column: 27, scope: !3552)
!3680 = !DILocation(line: 1308, column: 9, scope: !3552)
!3681 = !DILocation(line: 1310, column: 18, scope: !3552)
!3682 = !DILocation(line: 1309, column: 11, scope: !3552)
!3683 = !DILocation(line: 1311, column: 4, scope: !3552)
!3684 = !DILocation(line: 1314, column: 27, scope: !3552)
!3685 = !DILocation(line: 1314, column: 9, scope: !3552)
!3686 = !DILocation(line: 1316, column: 18, scope: !3552)
!3687 = !DILocation(line: 1315, column: 11, scope: !3552)
!3688 = !DILocation(line: 1317, column: 4, scope: !3552)
!3689 = !DILocation(line: 1320, column: 27, scope: !3552)
!3690 = !DILocation(line: 1320, column: 9, scope: !3552)
!3691 = !DILocation(line: 1322, column: 39, scope: !3552)
!3692 = !DILocation(line: 1322, column: 8, scope: !3552)
!3693 = !DILocation(line: 1323, column: 4, scope: !3552)
!3694 = !DILocation(line: 1326, column: 4, scope: !3552)
!3695 = !DILocation(line: 1327, column: 2, scope: !3552)
!3696 = !DILocation(line: 1331, column: 11, scope: !3555)
!3697 = !DILocation(line: 1332, column: 4, scope: !3555)
!3698 = !DILocation(line: 1332, column: 7, scope: !3555)
!3699 = !DILocation(line: 1332, column: 35, scope: !3555)
!3700 = !DILocation(line: 1332, column: 32, scope: !3555)
!3701 = !DILocation(line: 1333, column: 4, scope: !3555)
!3702 = !DILocation(line: 1333, column: 25, scope: !3555)
!3703 = !DILocation(line: 1333, column: 55, scope: !3555)
!3704 = !DILocation(line: 1333, column: 7, scope: !3555)
!3705 = !DILocation(line: 1331, column: 11, scope: !3556)
!3706 = !DILocation(line: 1342, column: 16, scope: !3554)
!3707 = !DILocation(line: 0, scope: !3554)
!3708 = !DILocation(line: 1345, column: 43, scope: !3554)
!3709 = !DILocation(line: 1345, column: 53, scope: !3554)
!3710 = !DILocation(line: 1345, column: 17, scope: !3554)
!3711 = !DILocation(line: 1346, column: 8, scope: !3712)
!3712 = distinct !DILexicalBlock(scope: !3554, file: !3, line: 1346, column: 8)
!3713 = !DILocation(line: 1346, column: 8, scope: !3554)
!3714 = !DILocation(line: 1345, column: 8, scope: !3554)
!3715 = !DILocation(line: 0, scope: !3716)
!3716 = distinct !DILexicalBlock(scope: !3712, file: !3, line: 1347, column: 6)
!3717 = !DILocation(line: 1349, column: 8, scope: !3716)
!3718 = distinct !{!3718, !3717, !3717}
!3719 = !DILocation(line: 1350, column: 12, scope: !3720)
!3720 = distinct !DILexicalBlock(scope: !3716, file: !3, line: 1350, column: 12)
!3721 = !DILocation(line: 1350, column: 34, scope: !3720)
!3722 = !DILocation(line: 1350, column: 37, scope: !3720)
!3723 = !DILocation(line: 1350, column: 12, scope: !3716)
!3724 = !DILocation(line: 1351, column: 10, scope: !3720)
!3725 = !DILocation(line: 1351, column: 3, scope: !3720)
!3726 = !DILocation(line: 1355, column: 11, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3556, file: !3, line: 1355, column: 11)
!3728 = !DILocation(line: 1355, column: 11, scope: !3556)
!3729 = !DILocation(line: 1357, column: 11, scope: !3730)
!3730 = distinct !DILexicalBlock(scope: !3727, file: !3, line: 1356, column: 2)
!3731 = !DILocation(line: 1360, column: 4, scope: !3730)
!3732 = !DILocation(line: 1361, column: 4, scope: !3730)
!3733 = !DILocation(line: 1365, column: 14, scope: !3556)
!3734 = !DILocation(line: 1369, column: 15, scope: !3562)
!3735 = !DILocation(line: 1369, column: 11, scope: !3562)
!3736 = !DILocation(line: 1369, column: 11, scope: !3556)
!3737 = !DILocation(line: 1370, column: 10, scope: !3562)
!3738 = !DILocation(line: 1370, column: 2, scope: !3562)
!3739 = !DILocation(line: 1374, column: 25, scope: !3560)
!3740 = !DILocation(line: 0, scope: !3560)
!3741 = !DILocation(line: 1375, column: 12, scope: !3742)
!3742 = distinct !DILexicalBlock(scope: !3560, file: !3, line: 1375, column: 12)
!3743 = !DILocation(line: 1375, column: 19, scope: !3742)
!3744 = !DILocation(line: 1375, column: 22, scope: !3742)
!3745 = !DILocation(line: 1375, column: 51, scope: !3742)
!3746 = !DILocation(line: 1375, column: 12, scope: !3560)
!3747 = !DILocation(line: 1376, column: 11, scope: !3742)
!3748 = !DILocation(line: 1376, column: 3, scope: !3742)
!3749 = !DILocation(line: 1379, column: 11, scope: !3750)
!3750 = distinct !DILexicalBlock(scope: !3742, file: !3, line: 1377, column: 5)
!3751 = !DILocation(line: 1380, column: 11, scope: !3750)
!3752 = !DILocation(line: 1381, column: 7, scope: !3750)
!3753 = !DILocation(line: 1386, column: 11, scope: !3750)
!3754 = !DILocation(line: 1387, column: 11, scope: !3750)
!3755 = !DILocation(line: 1388, column: 7, scope: !3750)
!3756 = !DILocation(line: 1389, column: 7, scope: !3750)
!3757 = !DILocation(line: 1399, column: 16, scope: !3565)
!3758 = !DILocation(line: 0, scope: !3565)
!3759 = !DILocation(line: 1400, column: 12, scope: !3565)
!3760 = !DILocation(line: 1401, column: 8, scope: !3565)
!3761 = !DILocation(line: 1403, column: 6, scope: !3561)
!3762 = !DILocation(line: 1407, column: 16, scope: !3567)
!3763 = !DILocation(line: 0, scope: !3567)
!3764 = !DILocation(line: 1408, column: 12, scope: !3567)
!3765 = !DILocation(line: 1409, column: 8, scope: !3567)
!3766 = !DILocation(line: 1411, column: 6, scope: !3561)
!3767 = !DILocation(line: 1421, column: 19, scope: !3533)
!3768 = !DILocation(line: 1422, column: 7, scope: !3570)
!3769 = !DILocation(line: 1422, column: 7, scope: !3533)
!3770 = !DILocation(line: 1425, column: 46, scope: !3569)
!3771 = !DILocation(line: 1425, column: 56, scope: !3569)
!3772 = !DILocation(line: 1425, column: 20, scope: !3569)
!3773 = !DILocation(line: 1425, column: 11, scope: !3569)
!3774 = !DILocation(line: 0, scope: !3569)
!3775 = !DILocation(line: 1426, column: 7, scope: !3569)
!3776 = !DILocation(line: 1427, column: 19, scope: !3569)
!3777 = !DILocation(line: 1428, column: 5, scope: !3569)
!3778 = !DILocation(line: 1430, column: 3, scope: !3533)
!3779 = !DILocation(line: 1432, column: 7, scope: !3780)
!3780 = distinct !DILexicalBlock(scope: !3533, file: !3, line: 1432, column: 7)
!3781 = !DILocation(line: 1432, column: 7, scope: !3533)
!3782 = !DILocation(line: 1436, column: 3, scope: !3533)
!3783 = !DILocation(line: 1437, column: 6, scope: !3533)
!3784 = !DILocation(line: 1437, column: 11, scope: !3533)
!3785 = !DILocation(line: 1438, column: 7, scope: !3786)
!3786 = distinct !DILexicalBlock(scope: !3533, file: !3, line: 1438, column: 7)
!3787 = !DILocation(line: 1438, column: 7, scope: !3533)
!3788 = !DILocation(line: 1439, column: 5, scope: !3786)
!3789 = !DILocation(line: 1441, column: 5, scope: !3786)
!3790 = !DILocation(line: 1445, column: 7, scope: !3791)
!3791 = distinct !DILexicalBlock(scope: !3533, file: !3, line: 1445, column: 7)
!3792 = !DILocation(line: 1445, column: 7, scope: !3533)
!3793 = !DILocation(line: 1447, column: 7, scope: !3794)
!3794 = distinct !DILexicalBlock(scope: !3791, file: !3, line: 1446, column: 5)
!3795 = !DILocation(line: 1448, column: 7, scope: !3794)
!3796 = !DILocation(line: 1449, column: 5, scope: !3794)
!3797 = !DILocation(line: 1452, column: 1, scope: !3533)
!3798 = distinct !DISubprogram(name: "gsi_stmt", scope: !597, file: !597, line: 4501, type: !3799, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3801)
!3799 = !DISubroutineType(types: !3800)
!3800 = !{!1028, !2373}
!3801 = !{!3802}
!3802 = !DILocalVariable(name: "i", arg: 1, scope: !3798, file: !597, line: 4501, type: !2373)
!3803 = !DILocation(line: 4501, column: 32, scope: !3798)
!3804 = !DILocation(line: 4503, column: 12, scope: !3798)
!3805 = !DILocation(line: 4503, column: 17, scope: !3798)
!3806 = !DILocation(line: 4503, column: 3, scope: !3798)
!3807 = distinct !DISubprogram(name: "gsi_next", scope: !597, file: !597, line: 4485, type: !3808, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3811)
!3808 = !DISubroutineType(types: !3809)
!3809 = !{null, !3810}
!3810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2373, size: 64)
!3811 = !{!3812}
!3812 = !DILocalVariable(name: "i", arg: 1, scope: !3807, file: !597, line: 4485, type: !3810)
!3813 = !DILocation(line: 0, scope: !3807)
!3814 = !DILocation(line: 4487, column: 15, scope: !3807)
!3815 = !DILocation(line: 4487, column: 20, scope: !3807)
!3816 = !DILocation(line: 4487, column: 10, scope: !3807)
!3817 = !DILocation(line: 4488, column: 1, scope: !3807)
!3818 = distinct !DISubprogram(name: "remap_ssa_name", scope: !3, file: !3, line: 183, type: !2879, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3819)
!3819 = !{!3820, !3821, !3822, !3823, !3824, !3831}
!3820 = !DILocalVariable(name: "name", arg: 1, scope: !3818, file: !3, line: 183, type: !704)
!3821 = !DILocalVariable(name: "id", arg: 2, scope: !3818, file: !3, line: 183, type: !2095)
!3822 = !DILocalVariable(name: "new_tree", scope: !3818, file: !3, line: 185, type: !704)
!3823 = !DILocalVariable(name: "n", scope: !3818, file: !3, line: 186, type: !703)
!3824 = !DILocalVariable(name: "gsi", scope: !3825, file: !3, line: 236, type: !2373)
!3825 = distinct !DILexicalBlock(scope: !3826, file: !3, line: 235, column: 6)
!3826 = distinct !DILexicalBlock(scope: !3827, file: !3, line: 230, column: 8)
!3827 = distinct !DILexicalBlock(scope: !3828, file: !3, line: 220, column: 2)
!3828 = distinct !DILexicalBlock(scope: !3829, file: !3, line: 219, column: 11)
!3829 = distinct !DILexicalBlock(scope: !3830, file: !3, line: 213, column: 5)
!3830 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 210, column: 7)
!3831 = !DILocalVariable(name: "init_stmt", scope: !3825, file: !3, line: 237, type: !1028)
!3832 = !DILocation(line: 0, scope: !3818)
!3833 = !DILocation(line: 188, column: 3, scope: !3818)
!3834 = !DILocation(line: 190, column: 42, scope: !3818)
!3835 = !DILocation(line: 190, column: 52, scope: !3818)
!3836 = !DILocation(line: 190, column: 16, scope: !3818)
!3837 = !DILocation(line: 191, column: 7, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 191, column: 7)
!3839 = !DILocation(line: 191, column: 7, scope: !3818)
!3840 = !DILocation(line: 190, column: 7, scope: !3818)
!3841 = !DILocation(line: 192, column: 26, scope: !3838)
!3842 = !DILocation(line: 192, column: 12, scope: !3838)
!3843 = !DILocation(line: 192, column: 5, scope: !3838)
!3844 = !DILocation(line: 194, column: 7, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 194, column: 7)
!3846 = !DILocation(line: 194, column: 7, scope: !3818)
!3847 = !DILocation(line: 196, column: 29, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 195, column: 5)
!3849 = !DILocation(line: 197, column: 7, scope: !3848)
!3850 = !DILocation(line: 202, column: 26, scope: !3818)
!3851 = !DILocation(line: 202, column: 14, scope: !3818)
!3852 = !DILocation(line: 210, column: 8, scope: !3830)
!3853 = !DILocation(line: 210, column: 29, scope: !3830)
!3854 = !DILocation(line: 210, column: 41, scope: !3830)
!3855 = !DILocation(line: 210, column: 65, scope: !3830)
!3856 = !DILocation(line: 211, column: 7, scope: !3830)
!3857 = !DILocation(line: 211, column: 11, scope: !3830)
!3858 = !DILocation(line: 211, column: 43, scope: !3830)
!3859 = !DILocation(line: 212, column: 4, scope: !3830)
!3860 = !DILocation(line: 212, column: 12, scope: !3830)
!3861 = !DILocation(line: 212, column: 8, scope: !3830)
!3862 = !DILocation(line: 210, column: 7, scope: !3818)
!3863 = !DILocation(line: 214, column: 18, scope: !3829)
!3864 = !DILocation(line: 215, column: 7, scope: !3829)
!3865 = !DILocation(line: 217, column: 4, scope: !3829)
!3866 = !DILocation(line: 216, column: 7, scope: !3829)
!3867 = !DILocation(line: 217, column: 2, scope: !3829)
!3868 = !DILocation(line: 218, column: 30, scope: !3829)
!3869 = !DILocation(line: 218, column: 7, scope: !3829)
!3870 = !DILocation(line: 218, column: 28, scope: !3829)
!3871 = !DILocation(line: 219, column: 25, scope: !3828)
!3872 = !DILocation(line: 219, column: 11, scope: !3828)
!3873 = !DILocation(line: 219, column: 11, scope: !3829)
!3874 = !DILocation(line: 230, column: 12, scope: !3826)
!3875 = !DILocation(line: 230, column: 8, scope: !3826)
!3876 = !DILocation(line: 231, column: 8, scope: !3826)
!3877 = !DILocation(line: 231, column: 26, scope: !3826)
!3878 = !DILocation(line: 231, column: 11, scope: !3826)
!3879 = !DILocation(line: 232, column: 8, scope: !3826)
!3880 = !DILocation(line: 232, column: 11, scope: !3826)
!3881 = !DILocation(line: 232, column: 43, scope: !3826)
!3882 = !DILocation(line: 233, column: 8, scope: !3826)
!3883 = !DILocation(line: 233, column: 16, scope: !3826)
!3884 = !DILocation(line: 233, column: 28, scope: !3826)
!3885 = !DILocation(line: 233, column: 60, scope: !3826)
!3886 = !DILocation(line: 233, column: 25, scope: !3826)
!3887 = !DILocation(line: 234, column: 5, scope: !3826)
!3888 = !DILocation(line: 234, column: 8, scope: !3826)
!3889 = !DILocation(line: 234, column: 41, scope: !3826)
!3890 = !DILocation(line: 230, column: 8, scope: !3827)
!3891 = !DILocation(line: 236, column: 8, scope: !3825)
!3892 = !DILocation(line: 236, column: 52, scope: !3825)
!3893 = !DILocation(line: 0, scope: !3825)
!3894 = !DILocation(line: 236, column: 35, scope: !3825)
!3895 = !DILocation(line: 239, column: 20, scope: !3825)
!3896 = !DILocation(line: 242, column: 8, scope: !3825)
!3897 = !DILocation(line: 243, column: 43, scope: !3825)
!3898 = !DILocation(line: 244, column: 6, scope: !3826)
!3899 = !DILocation(line: 244, column: 6, scope: !3825)
!3900 = !DILocation(line: 247, column: 39, scope: !3901)
!3901 = distinct !DILexicalBlock(scope: !3826, file: !3, line: 246, column: 6)
!3902 = !DILocation(line: 247, column: 8, scope: !3901)
!3903 = !DILocation(line: 247, column: 37, scope: !3901)
!3904 = !DILocation(line: 248, column: 36, scope: !3905)
!3905 = distinct !DILexicalBlock(scope: !3901, file: !3, line: 248, column: 12)
!3906 = !DILocation(line: 248, column: 46, scope: !3905)
!3907 = !DILocation(line: 248, column: 12, scope: !3905)
!3908 = !DILocation(line: 249, column: 5, scope: !3905)
!3909 = !DILocation(line: 248, column: 12, scope: !3901)
!3910 = !DILocation(line: 250, column: 27, scope: !3905)
!3911 = !DILocation(line: 250, column: 10, scope: !3905)
!3912 = !DILocation(line: 255, column: 5, scope: !3830)
!3913 = !DILocation(line: 257, column: 1, scope: !3818)
!3914 = distinct !DISubprogram(name: "copy_statement_list", scope: !3, file: !3, line: 630, type: !3915, scopeLine: 631, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3917)
!3915 = !DISubroutineType(types: !3916)
!3916 = !{null, !703}
!3917 = !{!3918, !3919, !3926, !3927, !3928}
!3918 = !DILocalVariable(name: "tp", arg: 1, scope: !3914, file: !3, line: 630, type: !703)
!3919 = !DILocalVariable(name: "oi", scope: !3914, file: !3, line: 632, type: !3920)
!3920 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree_stmt_iterator", file: !3921, line: 35, baseType: !3922)
!3921 = !DIFile(filename: "./tree-iterator.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!3922 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3921, line: 32, size: 128, elements: !3923)
!3923 = !{!3924, !3925}
!3924 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3922, file: !3921, line: 33, baseType: !1861, size: 64)
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !3922, file: !3921, line: 34, baseType: !704, size: 64, offset: 64)
!3926 = !DILocalVariable(name: "ni", scope: !3914, file: !3, line: 632, type: !3920)
!3927 = !DILocalVariable(name: "new_tree", scope: !3914, file: !3, line: 633, type: !704)
!3928 = !DILocalVariable(name: "stmt", scope: !3929, file: !3, line: 643, type: !704)
!3929 = distinct !DILexicalBlock(scope: !3930, file: !3, line: 642, column: 5)
!3930 = distinct !DILexicalBlock(scope: !3931, file: !3, line: 641, column: 3)
!3931 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 641, column: 3)
!3932 = !DILocation(line: 0, scope: !3914)
!3933 = !DILocation(line: 632, column: 3, scope: !3914)
!3934 = !DILocation(line: 635, column: 14, scope: !3914)
!3935 = !DILocation(line: 636, column: 8, scope: !3914)
!3936 = !DILocation(line: 637, column: 8, scope: !3914)
!3937 = !DILocation(line: 637, column: 19, scope: !3914)
!3938 = !DILocation(line: 638, column: 26, scope: !3914)
!3939 = !DILocation(line: 638, column: 3, scope: !3914)
!3940 = !DILocation(line: 638, column: 24, scope: !3914)
!3941 = !DILocation(line: 639, column: 7, scope: !3914)
!3942 = !DILocation(line: 0, scope: !3930)
!3943 = !DILocation(line: 0, scope: !3929)
!3944 = !DILocation(line: 641, column: 3, scope: !3914)
!3945 = !DILocation(line: 641, column: 11, scope: !3930)
!3946 = !DILocation(line: 641, column: 10, scope: !3930)
!3947 = !DILocation(line: 641, column: 3, scope: !3931)
!3948 = !DILocation(line: 643, column: 7, scope: !3929)
!3949 = !DILocation(line: 643, column: 19, scope: !3929)
!3950 = !DILocation(line: 643, column: 12, scope: !3929)
!3951 = !DILocation(line: 644, column: 11, scope: !3952)
!3952 = distinct !DILexicalBlock(scope: !3929, file: !3, line: 644, column: 11)
!3953 = !DILocation(line: 644, column: 28, scope: !3952)
!3954 = !DILocation(line: 644, column: 11, scope: !3929)
!3955 = !DILocation(line: 645, column: 2, scope: !3952)
!3956 = !DILocation(line: 646, column: 28, scope: !3929)
!3957 = !DILocation(line: 646, column: 7, scope: !3929)
!3958 = !DILocation(line: 647, column: 5, scope: !3930)
!3959 = !DILocation(line: 641, column: 27, scope: !3930)
!3960 = !DILocation(line: 641, column: 3, scope: !3930)
!3961 = distinct !{!3961, !3947, !3962}
!3962 = !DILocation(line: 647, column: 5, scope: !3931)
!3963 = !DILocation(line: 648, column: 1, scope: !3914)
!3964 = distinct !DISubprogram(name: "remap_save_expr", scope: !3, file: !3, line: 4103, type: !3965, scopeLine: 4104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3967)
!3965 = !DISubroutineType(types: !3966)
!3966 = !{null, !703, !700, !2991}
!3967 = !{!3968, !3969, !3970, !3971, !3972, !3973}
!3968 = !DILocalVariable(name: "tp", arg: 1, scope: !3964, file: !3, line: 4103, type: !703)
!3969 = !DILocalVariable(name: "st_", arg: 2, scope: !3964, file: !3, line: 4103, type: !700)
!3970 = !DILocalVariable(name: "walk_subtrees", arg: 3, scope: !3964, file: !3, line: 4103, type: !2991)
!3971 = !DILocalVariable(name: "st", scope: !3964, file: !3, line: 4105, type: !1645)
!3972 = !DILocalVariable(name: "n", scope: !3964, file: !3, line: 4106, type: !703)
!3973 = !DILocalVariable(name: "t", scope: !3964, file: !3, line: 4107, type: !704)
!3974 = !DILocation(line: 0, scope: !3964)
!3975 = !DILocation(line: 4105, column: 30, scope: !3964)
!3976 = !DILocation(line: 4110, column: 42, scope: !3964)
!3977 = !DILocation(line: 4110, column: 16, scope: !3964)
!3978 = !DILocation(line: 4113, column: 8, scope: !3979)
!3979 = distinct !DILexicalBlock(scope: !3964, file: !3, line: 4113, column: 7)
!3980 = !DILocation(line: 4113, column: 7, scope: !3964)
!3981 = !DILocation(line: 4115, column: 11, scope: !3982)
!3982 = distinct !DILexicalBlock(scope: !3979, file: !3, line: 4114, column: 5)
!3983 = !DILocation(line: 4118, column: 32, scope: !3982)
!3984 = !DILocation(line: 4118, column: 8, scope: !3982)
!3985 = !DILocation(line: 4118, column: 37, scope: !3982)
!3986 = !DILocation(line: 4120, column: 32, scope: !3982)
!3987 = !DILocation(line: 4120, column: 8, scope: !3982)
!3988 = !DILocation(line: 4120, column: 35, scope: !3982)
!3989 = !DILocation(line: 4121, column: 5, scope: !3982)
!3990 = !DILocation(line: 4110, column: 7, scope: !3964)
!3991 = !DILocation(line: 4125, column: 22, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3979, file: !3, line: 4123, column: 5)
!3993 = !DILocation(line: 4126, column: 11, scope: !3992)
!3994 = !DILocation(line: 0, scope: !3979)
!3995 = !DILocation(line: 4130, column: 7, scope: !3964)
!3996 = !DILocation(line: 4131, column: 1, scope: !3964)
!3997 = distinct !DISubprogram(name: "copy_bind_expr", scope: !3, file: !3, line: 651, type: !3998, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4000)
!3998 = !DISubroutineType(types: !3999)
!3999 = !{null, !703, !2991, !2095}
!4000 = !{!4001, !4002, !4003, !4004}
!4001 = !DILocalVariable(name: "tp", arg: 1, scope: !3997, file: !3, line: 651, type: !703)
!4002 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !3997, file: !3, line: 651, type: !2991)
!4003 = !DILocalVariable(name: "id", arg: 3, scope: !3997, file: !3, line: 651, type: !2095)
!4004 = !DILocalVariable(name: "block", scope: !3997, file: !3, line: 653, type: !704)
!4005 = !DILocation(line: 0, scope: !3997)
!4006 = !DILocation(line: 653, column: 3, scope: !3997)
!4007 = !DILocation(line: 653, column: 16, scope: !3997)
!4008 = !DILocation(line: 653, column: 8, scope: !3997)
!4009 = !DILocation(line: 655, column: 3, scope: !3997)
!4010 = !DILocation(line: 656, column: 7, scope: !4011)
!4011 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 656, column: 7)
!4012 = !DILocation(line: 656, column: 7, scope: !3997)
!4013 = !DILocation(line: 658, column: 7, scope: !4014)
!4014 = distinct !DILexicalBlock(scope: !4011, file: !3, line: 657, column: 5)
!4015 = !DILocation(line: 659, column: 31, scope: !4014)
!4016 = !DILocation(line: 659, column: 7, scope: !4014)
!4017 = !DILocation(line: 659, column: 29, scope: !4014)
!4018 = !DILocation(line: 660, column: 5, scope: !4014)
!4019 = !DILocation(line: 662, column: 7, scope: !4020)
!4020 = distinct !DILexicalBlock(scope: !3997, file: !3, line: 662, column: 7)
!4021 = !DILocation(line: 662, column: 7, scope: !3997)
!4022 = !DILocation(line: 665, column: 28, scope: !4020)
!4023 = !DILocation(line: 665, column: 5, scope: !4020)
!4024 = !DILocation(line: 665, column: 26, scope: !4020)
!4025 = !DILocation(line: 666, column: 1, scope: !3997)
!4026 = distinct !DISubprogram(name: "copy_tree_r", scope: !3, file: !3, line: 4031, type: !2989, scopeLine: 4032, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4027)
!4027 = !{!4028, !4029, !4030, !4031, !4032, !4033, !4036, !4037}
!4028 = !DILocalVariable(name: "tp", arg: 1, scope: !4026, file: !3, line: 4031, type: !703)
!4029 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !4026, file: !3, line: 4031, type: !2991)
!4030 = !DILocalVariable(name: "data", arg: 3, scope: !4026, file: !3, line: 4031, type: !700)
!4031 = !DILocalVariable(name: "code", scope: !4026, file: !3, line: 4033, type: !134)
!4032 = !DILocalVariable(name: "cl", scope: !4026, file: !3, line: 4034, type: !635)
!4033 = !DILocalVariable(name: "chain", scope: !4034, file: !3, line: 4045, type: !704)
!4034 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 4042, column: 5)
!4035 = distinct !DILexicalBlock(scope: !4026, file: !3, line: 4037, column: 7)
!4036 = !DILocalVariable(name: "new_tree", scope: !4034, file: !3, line: 4045, type: !704)
!4037 = !DILocalVariable(name: "new_tree", scope: !4038, file: !3, line: 4074, type: !704)
!4038 = distinct !DILexicalBlock(scope: !4039, file: !3, line: 4071, column: 5)
!4039 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 4070, column: 12)
!4040 = !DILocation(line: 0, scope: !4026)
!4041 = !DILocation(line: 4033, column: 25, scope: !4026)
!4042 = !DILocation(line: 4034, column: 29, scope: !4026)
!4043 = !DILocation(line: 4037, column: 7, scope: !4035)
!4044 = !DILocation(line: 0, scope: !4034)
!4045 = !DILocation(line: 4047, column: 15, scope: !4034)
!4046 = !DILocation(line: 4050, column: 18, scope: !4034)
!4047 = !DILocation(line: 4053, column: 11, scope: !4048)
!4048 = distinct !DILexicalBlock(scope: !4034, file: !3, line: 4053, column: 11)
!4049 = !DILocation(line: 4053, column: 24, scope: !4048)
!4050 = !DILocation(line: 4053, column: 40, scope: !4048)
!4051 = !DILocation(line: 4053, column: 27, scope: !4048)
!4052 = !DILocation(line: 4053, column: 11, scope: !4034)
!4053 = !DILocation(line: 4054, column: 9, scope: !4048)
!4054 = !DILocation(line: 4056, column: 11, scope: !4034)
!4055 = !DILocation(line: 4061, column: 4, scope: !4056)
!4056 = distinct !DILexicalBlock(scope: !4034, file: !3, line: 4060, column: 11)
!4057 = !DILocation(line: 4063, column: 2, scope: !4056)
!4058 = !DILocation(line: 4063, column: 19, scope: !4056)
!4059 = !DILocation(line: 4067, column: 11, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4034, file: !3, line: 4067, column: 11)
!4061 = !DILocation(line: 4067, column: 27, scope: !4060)
!4062 = !DILocation(line: 4067, column: 11, scope: !4034)
!4063 = !DILocation(line: 4068, column: 2, scope: !4060)
!4064 = !DILocation(line: 4068, column: 24, scope: !4060)
!4065 = !DILocation(line: 4076, column: 18, scope: !4038)
!4066 = !DILocation(line: 0, scope: !4038)
!4067 = !DILocation(line: 4079, column: 11, scope: !4068)
!4068 = distinct !DILexicalBlock(scope: !4038, file: !3, line: 4079, column: 11)
!4069 = !DILocation(line: 4079, column: 24, scope: !4068)
!4070 = !DILocation(line: 4079, column: 40, scope: !4068)
!4071 = !DILocation(line: 4079, column: 27, scope: !4068)
!4072 = !DILocation(line: 4079, column: 11, scope: !4038)
!4073 = !DILocation(line: 4080, column: 9, scope: !4068)
!4074 = !DILocation(line: 4082, column: 37, scope: !4038)
!4075 = !DILocation(line: 4082, column: 7, scope: !4038)
!4076 = !DILocation(line: 4082, column: 35, scope: !4038)
!4077 = !DILocation(line: 4084, column: 11, scope: !4038)
!4078 = !DILocation(line: 4085, column: 5, scope: !4038)
!4079 = !DILocation(line: 4086, column: 35, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !4039, file: !3, line: 4086, column: 12)
!4081 = !DILocation(line: 4086, column: 12, scope: !4039)
!4082 = !DILocation(line: 4087, column: 20, scope: !4080)
!4083 = !DILocation(line: 4087, column: 5, scope: !4080)
!4084 = !DILocation(line: 4088, column: 35, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4080, file: !3, line: 4088, column: 12)
!4086 = !DILocation(line: 4088, column: 12, scope: !4080)
!4087 = !DILocation(line: 4089, column: 20, scope: !4085)
!4088 = !DILocation(line: 4089, column: 5, scope: !4085)
!4089 = !DILocation(line: 4090, column: 35, scope: !4090)
!4090 = distinct !DILexicalBlock(scope: !4085, file: !3, line: 4090, column: 12)
!4091 = !DILocation(line: 4090, column: 12, scope: !4085)
!4092 = !DILocation(line: 4091, column: 20, scope: !4090)
!4093 = !DILocation(line: 4091, column: 5, scope: !4090)
!4094 = !DILocation(line: 4093, column: 5, scope: !4090)
!4095 = !DILocation(line: 4094, column: 3, scope: !4026)
!4096 = distinct !DISubprogram(name: "tree_inlinable_function_p", scope: !3, file: !3, line: 2943, type: !4097, scopeLine: 2944, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4099)
!4097 = !DISubroutineType(types: !4098)
!4098 = !{!695, !704}
!4099 = !{!4100, !4101, !4102, !4103}
!4100 = !DILocalVariable(name: "fn", arg: 1, scope: !4096, file: !3, line: 2943, type: !704)
!4101 = !DILocalVariable(name: "inlinable", scope: !4096, file: !3, line: 2945, type: !695)
!4102 = !DILocalVariable(name: "do_warning", scope: !4096, file: !3, line: 2946, type: !695)
!4103 = !DILocalVariable(name: "always_inline", scope: !4096, file: !3, line: 2947, type: !704)
!4104 = !DILocation(line: 0, scope: !4096)
!4105 = !DILocation(line: 2951, column: 7, scope: !4106)
!4106 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 2951, column: 7)
!4107 = !DILocation(line: 2951, column: 7, scope: !4096)
!4108 = !DILocation(line: 2955, column: 17, scope: !4096)
!4109 = !DILocation(line: 2956, column: 3, scope: !4096)
!4110 = !DILocation(line: 2956, column: 6, scope: !4096)
!4111 = !DILocation(line: 2957, column: 3, scope: !4096)
!4112 = !DILocation(line: 2957, column: 7, scope: !4096)
!4113 = !DILocation(line: 2958, column: 3, scope: !4096)
!4114 = !DILocation(line: 2958, column: 7, scope: !4096)
!4115 = !DILocation(line: 2960, column: 54, scope: !4096)
!4116 = !DILocation(line: 2960, column: 19, scope: !4096)
!4117 = !DILocation(line: 2962, column: 7, scope: !4118)
!4118 = distinct !DILexicalBlock(scope: !4096, file: !3, line: 2962, column: 7)
!4119 = !DILocation(line: 2963, column: 24, scope: !4118)
!4120 = !DILocation(line: 2963, column: 7, scope: !4118)
!4121 = !DILocation(line: 2965, column: 11, scope: !4122)
!4122 = distinct !DILexicalBlock(scope: !4123, file: !3, line: 2965, column: 11)
!4123 = distinct !DILexicalBlock(scope: !4118, file: !3, line: 2964, column: 5)
!4124 = !DILocation(line: 2965, column: 11, scope: !4123)
!4125 = !DILocation(line: 2966, column: 9, scope: !4122)
!4126 = !DILocation(line: 2973, column: 13, scope: !4127)
!4127 = distinct !DILexicalBlock(scope: !4118, file: !3, line: 2973, column: 12)
!4128 = !DILocation(line: 2974, column: 5, scope: !4127)
!4129 = !DILocation(line: 2974, column: 8, scope: !4127)
!4130 = !DILocation(line: 2973, column: 12, scope: !4118)
!4131 = !DILocation(line: 2977, column: 13, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4127, file: !3, line: 2977, column: 12)
!4133 = !DILocation(line: 2977, column: 12, scope: !4127)
!4134 = !DILocation(line: 2979, column: 11, scope: !4135)
!4135 = distinct !DILexicalBlock(scope: !4136, file: !3, line: 2979, column: 11)
!4136 = distinct !DILexicalBlock(scope: !4132, file: !3, line: 2978, column: 5)
!4137 = !DILocation(line: 2979, column: 11, scope: !4136)
!4138 = !DILocation(line: 2980, column: 9, scope: !4135)
!4139 = !DILocation(line: 2985, column: 12, scope: !4140)
!4140 = distinct !DILexicalBlock(scope: !4132, file: !3, line: 2985, column: 12)
!4141 = !DILocation(line: 2985, column: 12, scope: !4132)
!4142 = !DILocation(line: 2994, column: 11, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !4140, file: !3, line: 2986, column: 5)
!4144 = !DILocation(line: 2995, column: 9, scope: !4145)
!4145 = distinct !DILexicalBlock(scope: !4143, file: !3, line: 2994, column: 11)
!4146 = !DILocation(line: 2995, column: 2, scope: !4145)
!4147 = !DILocation(line: 2996, column: 16, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !4145, file: !3, line: 2996, column: 16)
!4149 = !DILocation(line: 2996, column: 16, scope: !4145)
!4150 = !DILocation(line: 2997, column: 24, scope: !4148)
!4151 = !DILocation(line: 2997, column: 2, scope: !4148)
!4152 = !DILocation(line: 0, scope: !4118)
!4153 = !DILocation(line: 3003, column: 27, scope: !4096)
!4154 = !DILocation(line: 3003, column: 25, scope: !4096)
!4155 = !DILocation(line: 3005, column: 3, scope: !4096)
!4156 = !DILocation(line: 3006, column: 1, scope: !4096)
!4157 = distinct !DISubprogram(name: "inline_forbidden_p", scope: !3, file: !3, line: 2905, type: !4097, scopeLine: 2906, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4158)
!4158 = !{!4159, !4160, !4161, !4162, !4163, !4164, !4165, !4169}
!4159 = !DILocalVariable(name: "fndecl", arg: 1, scope: !4157, file: !3, line: 2905, type: !704)
!4160 = !DILocalVariable(name: "fun", scope: !4157, file: !3, line: 2907, type: !1414)
!4161 = !DILocalVariable(name: "wi", scope: !4157, file: !3, line: 2908, type: !2370)
!4162 = !DILocalVariable(name: "visited_nodes", scope: !4157, file: !3, line: 2909, type: !2355)
!4163 = !DILocalVariable(name: "bb", scope: !4157, file: !3, line: 2910, type: !1584)
!4164 = !DILocalVariable(name: "forbidden_p", scope: !4157, file: !3, line: 2911, type: !695)
!4165 = !DILocalVariable(name: "ret", scope: !4166, file: !3, line: 2927, type: !1028)
!4166 = distinct !DILexicalBlock(scope: !4167, file: !3, line: 2926, column: 5)
!4167 = distinct !DILexicalBlock(scope: !4168, file: !3, line: 2925, column: 3)
!4168 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 2925, column: 3)
!4169 = !DILocalVariable(name: "seq", scope: !4166, file: !3, line: 2928, type: !1018)
!4170 = !DILocation(line: 0, scope: !4157)
!4171 = !DILocation(line: 2907, column: 26, scope: !4157)
!4172 = !DILocation(line: 2908, column: 3, scope: !4157)
!4173 = !DILocation(line: 2914, column: 29, scope: !4157)
!4174 = !DILocation(line: 2914, column: 27, scope: !4157)
!4175 = !DILocation(line: 2915, column: 31, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 2915, column: 7)
!4177 = !DILocation(line: 2915, column: 7, scope: !4157)
!4178 = !DILocation(line: 2920, column: 19, scope: !4157)
!4179 = !DILocation(line: 2921, column: 3, scope: !4157)
!4180 = !DILocation(line: 2922, column: 6, scope: !4157)
!4181 = !DILocation(line: 2922, column: 11, scope: !4157)
!4182 = !DILocation(line: 2923, column: 6, scope: !4157)
!4183 = !DILocation(line: 2923, column: 11, scope: !4157)
!4184 = !DILocation(line: 2925, column: 3, scope: !4168)
!4185 = !DILocation(line: 2925, column: 3, scope: !4167)
!4186 = !DILocation(line: 0, scope: !4168)
!4187 = !DILocation(line: 2928, column: 24, scope: !4166)
!4188 = !DILocation(line: 0, scope: !4166)
!4189 = !DILocation(line: 2929, column: 13, scope: !4166)
!4190 = !DILocation(line: 2930, column: 26, scope: !4166)
!4191 = !DILocation(line: 2930, column: 21, scope: !4166)
!4192 = distinct !{!4192, !4184, !4193}
!4193 = !DILocation(line: 2933, column: 5, scope: !4168)
!4194 = !DILocation(line: 2935, column: 3, scope: !4157)
!4195 = !DILocation(line: 2936, column: 3, scope: !4157)
!4196 = !DILocation(line: 2937, column: 1, scope: !4157)
!4197 = distinct !DISubprogram(name: "estimate_move_cost", scope: !3, file: !3, line: 3012, type: !4198, scopeLine: 3013, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4200)
!4198 = !DISubroutineType(types: !4199)
!4199 = !{!696, !704}
!4200 = !{!4201, !4202}
!4201 = !DILocalVariable(name: "type", arg: 1, scope: !4197, file: !3, line: 3012, type: !704)
!4202 = !DILocalVariable(name: "size", scope: !4197, file: !3, line: 3014, type: !760)
!4203 = !DILocation(line: 0, scope: !4197)
!4204 = !DILocation(line: 3016, column: 3, scope: !4197)
!4205 = !DILocation(line: 3018, column: 10, scope: !4197)
!4206 = !DILocation(line: 3020, column: 12, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4197, file: !3, line: 3020, column: 7)
!4208 = !DILocation(line: 3020, column: 16, scope: !4207)
!4209 = !DILocation(line: 3020, column: 44, scope: !4207)
!4210 = !DILocation(line: 3020, column: 24, scope: !4207)
!4211 = !DILocation(line: 3020, column: 7, scope: !4197)
!4212 = !DILocation(line: 3024, column: 37, scope: !4207)
!4213 = !DILocation(line: 3024, column: 42, scope: !4207)
!4214 = !DILocation(line: 3024, column: 12, scope: !4207)
!4215 = !DILocation(line: 3024, column: 5, scope: !4207)
!4216 = !DILocation(line: 0, scope: !4207)
!4217 = !DILocation(line: 3025, column: 1, scope: !4197)
!4218 = distinct !DISubprogram(name: "estimate_num_insns", scope: !3, file: !3, line: 3176, type: !4219, scopeLine: 3177, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4222)
!4219 = !DISubroutineType(types: !4220)
!4220 = !{!696, !1028, !4221}
!4221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2394, size: 64)
!4222 = !{!4223, !4224, !4225, !4226, !4227, !4228, !4229, !4230, !4233, !4234, !4235, !4238, !4241}
!4223 = !DILocalVariable(name: "stmt", arg: 1, scope: !4218, file: !3, line: 3176, type: !1028)
!4224 = !DILocalVariable(name: "weights", arg: 2, scope: !4218, file: !3, line: 3176, type: !4221)
!4225 = !DILocalVariable(name: "cost", scope: !4218, file: !3, line: 3178, type: !7)
!4226 = !DILocalVariable(name: "i", scope: !4218, file: !3, line: 3178, type: !7)
!4227 = !DILocalVariable(name: "code", scope: !4218, file: !3, line: 3179, type: !596)
!4228 = !DILocalVariable(name: "lhs", scope: !4218, file: !3, line: 3180, type: !704)
!4229 = !DILocalVariable(name: "rhs", scope: !4218, file: !3, line: 3181, type: !704)
!4230 = !DILocalVariable(name: "decl", scope: !4231, file: !3, line: 3242, type: !704)
!4231 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 3241, column: 7)
!4232 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 3184, column: 5)
!4233 = !DILocalVariable(name: "addr", scope: !4231, file: !3, line: 3243, type: !704)
!4234 = !DILocalVariable(name: "funtype", scope: !4231, file: !3, line: 3244, type: !704)
!4235 = !DILocalVariable(name: "arg", scope: !4236, file: !3, line: 3287, type: !704)
!4236 = distinct !DILexicalBlock(scope: !4237, file: !3, line: 3286, column: 4)
!4237 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 3285, column: 6)
!4238 = !DILocalVariable(name: "t", scope: !4239, file: !3, line: 3294, type: !704)
!4239 = distinct !DILexicalBlock(scope: !4240, file: !3, line: 3293, column: 4)
!4240 = distinct !DILexicalBlock(scope: !4237, file: !3, line: 3292, column: 11)
!4241 = !DILocalVariable(name: "arg", scope: !4242, file: !3, line: 3304, type: !704)
!4242 = distinct !DILexicalBlock(scope: !4243, file: !3, line: 3303, column: 8)
!4243 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 3302, column: 6)
!4244 = distinct !DILexicalBlock(scope: !4245, file: !3, line: 3302, column: 6)
!4245 = distinct !DILexicalBlock(scope: !4240, file: !3, line: 3301, column: 4)
!4246 = !DILocation(line: 0, scope: !4218)
!4247 = !DILocation(line: 3179, column: 27, scope: !4218)
!4248 = !DILocation(line: 3183, column: 3, scope: !4218)
!4249 = !DILocation(line: 3204, column: 13, scope: !4232)
!4250 = !DILocation(line: 3205, column: 13, scope: !4232)
!4251 = !DILocation(line: 3207, column: 11, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 3207, column: 11)
!4253 = !DILocation(line: 3207, column: 11, scope: !4232)
!4254 = !DILocation(line: 3210, column: 29, scope: !4252)
!4255 = !DILocation(line: 3210, column: 9, scope: !4252)
!4256 = !DILocation(line: 0, scope: !4252)
!4257 = !DILocation(line: 3212, column: 12, scope: !4258)
!4258 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 3212, column: 11)
!4259 = !DILocation(line: 3212, column: 32, scope: !4258)
!4260 = !DILocation(line: 3212, column: 36, scope: !4258)
!4261 = !DILocation(line: 3212, column: 11, scope: !4232)
!4262 = !DILocation(line: 3213, column: 30, scope: !4258)
!4263 = !DILocation(line: 3213, column: 10, scope: !4258)
!4264 = !DILocation(line: 3213, column: 7, scope: !4258)
!4265 = !DILocation(line: 3213, column: 2, scope: !4258)
!4266 = !DILocation(line: 0, scope: !4232)
!4267 = !DILocation(line: 3215, column: 39, scope: !4232)
!4268 = !DILocation(line: 3216, column: 17, scope: !4232)
!4269 = !DILocation(line: 3217, column: 33, scope: !4232)
!4270 = !DILocation(line: 3217, column: 11, scope: !4232)
!4271 = !DILocation(line: 3218, column: 11, scope: !4232)
!4272 = !DILocation(line: 3219, column: 13, scope: !4232)
!4273 = !DILocation(line: 3215, column: 15, scope: !4232)
!4274 = !DILocation(line: 3215, column: 12, scope: !4232)
!4275 = !DILocation(line: 3220, column: 7, scope: !4232)
!4276 = !DILocation(line: 3223, column: 42, scope: !4232)
!4277 = !DILocation(line: 3224, column: 20, scope: !4232)
!4278 = !DILocation(line: 3225, column: 14, scope: !4232)
!4279 = !DILocation(line: 3223, column: 18, scope: !4232)
!4280 = !DILocation(line: 3223, column: 16, scope: !4232)
!4281 = !DILocation(line: 3226, column: 7, scope: !4232)
!4282 = !DILocation(line: 3234, column: 20, scope: !4283)
!4283 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 3234, column: 11)
!4284 = !DILocation(line: 3234, column: 11, scope: !4283)
!4285 = !DILocation(line: 0, scope: !4283)
!4286 = !DILocation(line: 3234, column: 11, scope: !4232)
!4287 = !DILocation(line: 3235, column: 28, scope: !4283)
!4288 = !DILocation(line: 3235, column: 16, scope: !4283)
!4289 = !DILocation(line: 3235, column: 61, scope: !4283)
!4290 = !DILocation(line: 3235, column: 9, scope: !4283)
!4291 = !DILocation(line: 3237, column: 48, scope: !4283)
!4292 = !DILocation(line: 3242, column: 14, scope: !4231)
!4293 = !DILocation(line: 0, scope: !4231)
!4294 = !DILocation(line: 3243, column: 14, scope: !4231)
!4295 = !DILocation(line: 3244, column: 17, scope: !4231)
!4296 = !DILocation(line: 3246, column: 6, scope: !4297)
!4297 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 3246, column: 6)
!4298 = !DILocation(line: 3246, column: 6, scope: !4231)
!4299 = !DILocation(line: 3247, column: 14, scope: !4297)
!4300 = !DILocation(line: 3247, column: 4, scope: !4297)
!4301 = !DILocation(line: 3249, column: 6, scope: !4302)
!4302 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 3249, column: 6)
!4303 = !DILocation(line: 3249, column: 11, scope: !4302)
!4304 = !DILocation(line: 3249, column: 14, scope: !4302)
!4305 = !DILocation(line: 3249, column: 41, scope: !4302)
!4306 = !DILocation(line: 3249, column: 6, scope: !4231)
!4307 = !DILocation(line: 3250, column: 20, scope: !4302)
!4308 = !DILocation(line: 3250, column: 4, scope: !4302)
!4309 = !DILocation(line: 3252, column: 20, scope: !4302)
!4310 = !DILocation(line: 0, scope: !4302)
!4311 = !DILocation(line: 3254, column: 11, scope: !4312)
!4312 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 3254, column: 6)
!4313 = !DILocation(line: 3254, column: 14, scope: !4312)
!4314 = !DILocation(line: 3254, column: 41, scope: !4312)
!4315 = !DILocation(line: 3254, column: 6, scope: !4231)
!4316 = !DILocation(line: 3255, column: 12, scope: !4312)
!4317 = !DILocation(line: 3255, column: 4, scope: !4312)
!4318 = !DILocation(line: 3264, column: 24, scope: !4319)
!4319 = distinct !DILexicalBlock(scope: !4312, file: !3, line: 3256, column: 6)
!4320 = !DILocation(line: 3265, column: 8, scope: !4319)
!4321 = !DILocation(line: 3250, column: 9, scope: !4302)
!4322 = !DILocation(line: 3277, column: 6, scope: !4231)
!4323 = !DILocation(line: 3278, column: 14, scope: !4324)
!4324 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 3277, column: 6)
!4325 = !DILocation(line: 3278, column: 4, scope: !4324)
!4326 = !DILocation(line: 3280, column: 7, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 3280, column: 6)
!4328 = !DILocation(line: 3280, column: 6, scope: !4231)
!4329 = !DILocation(line: 3281, column: 12, scope: !4327)
!4330 = !DILocation(line: 3281, column: 9, scope: !4327)
!4331 = !DILocation(line: 3281, column: 4, scope: !4327)
!4332 = !DILocation(line: 3285, column: 11, scope: !4237)
!4333 = !DILocation(line: 3285, column: 14, scope: !4237)
!4334 = !DILocation(line: 3285, column: 6, scope: !4231)
!4335 = !DILocation(line: 3288, column: 11, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4236, file: !3, line: 3288, column: 6)
!4337 = !DILocation(line: 0, scope: !4336)
!4338 = !DILocation(line: 0, scope: !4236)
!4339 = !DILocation(line: 3288, column: 6, scope: !4336)
!4340 = !DILocation(line: 3289, column: 13, scope: !4341)
!4341 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 3289, column: 12)
!4342 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 3288, column: 6)
!4343 = !DILocation(line: 3289, column: 12, scope: !4342)
!4344 = !DILocation(line: 3290, column: 18, scope: !4341)
!4345 = !DILocation(line: 3290, column: 15, scope: !4341)
!4346 = !DILocation(line: 3290, column: 10, scope: !4341)
!4347 = !DILocation(line: 3288, column: 51, scope: !4342)
!4348 = !DILocation(line: 3288, column: 6, scope: !4342)
!4349 = distinct !{!4349, !4339, !4350}
!4350 = !DILocation(line: 3290, column: 53, scope: !4336)
!4351 = !DILocation(line: 3292, column: 11, scope: !4240)
!4352 = !DILocation(line: 3292, column: 19, scope: !4240)
!4353 = !DILocation(line: 3292, column: 22, scope: !4240)
!4354 = !DILocation(line: 3292, column: 11, scope: !4237)
!4355 = !DILocation(line: 3295, column: 15, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4239, file: !3, line: 3295, column: 6)
!4357 = !DILocation(line: 3295, column: 11, scope: !4356)
!4358 = !DILocation(line: 0, scope: !4356)
!4359 = !DILocation(line: 0, scope: !4239)
!4360 = !DILocation(line: 3295, column: 41, scope: !4361)
!4361 = distinct !DILexicalBlock(scope: !4356, file: !3, line: 3295, column: 6)
!4362 = !DILocation(line: 3295, column: 43, scope: !4361)
!4363 = !DILocation(line: 3295, column: 6, scope: !4356)
!4364 = !DILocation(line: 3297, column: 13, scope: !4365)
!4365 = distinct !DILexicalBlock(scope: !4361, file: !3, line: 3297, column: 12)
!4366 = !DILocation(line: 3297, column: 12, scope: !4361)
!4367 = !DILocation(line: 3298, column: 18, scope: !4365)
!4368 = !DILocation(line: 3298, column: 15, scope: !4365)
!4369 = !DILocation(line: 3298, column: 10, scope: !4365)
!4370 = !DILocation(line: 3296, column: 12, scope: !4361)
!4371 = !DILocation(line: 3295, column: 6, scope: !4361)
!4372 = distinct !{!4372, !4363, !4373}
!4373 = !DILocation(line: 3298, column: 52, scope: !4356)
!4374 = !DILocation(line: 3302, column: 11, scope: !4244)
!4375 = !DILocation(line: 0, scope: !4244)
!4376 = !DILocation(line: 3302, column: 22, scope: !4243)
!4377 = !DILocation(line: 3302, column: 20, scope: !4243)
!4378 = !DILocation(line: 3302, column: 6, scope: !4244)
!4379 = !DILocation(line: 3304, column: 14, scope: !4242)
!4380 = !DILocation(line: 0, scope: !4242)
!4381 = !DILocation(line: 3305, column: 15, scope: !4382)
!4382 = distinct !DILexicalBlock(scope: !4242, file: !3, line: 3305, column: 14)
!4383 = !DILocation(line: 3305, column: 14, scope: !4242)
!4384 = !DILocation(line: 3306, column: 13, scope: !4382)
!4385 = !DILocation(line: 3306, column: 10, scope: !4382)
!4386 = !DILocation(line: 3306, column: 5, scope: !4382)
!4387 = !DILocation(line: 3302, column: 52, scope: !4243)
!4388 = !DILocation(line: 3302, column: 6, scope: !4243)
!4389 = distinct !{!4389, !4378, !4390}
!4390 = !DILocation(line: 3307, column: 8, scope: !4244)
!4391 = !DILocation(line: 3323, column: 29, scope: !4232)
!4392 = !DILocation(line: 3323, column: 14, scope: !4232)
!4393 = !DILocation(line: 3323, column: 7, scope: !4232)
!4394 = !DILocation(line: 3328, column: 7, scope: !4232)
!4395 = !DILocation(line: 3334, column: 7, scope: !4232)
!4396 = !DILocation(line: 3337, column: 38, scope: !4232)
!4397 = !DILocation(line: 3337, column: 14, scope: !4232)
!4398 = !DILocation(line: 3337, column: 7, scope: !4232)
!4399 = !DILocation(line: 3340, column: 38, scope: !4232)
!4400 = !DILocation(line: 3340, column: 14, scope: !4232)
!4401 = !DILocation(line: 3340, column: 7, scope: !4232)
!4402 = !DILocation(line: 3343, column: 38, scope: !4232)
!4403 = !DILocation(line: 3343, column: 14, scope: !4232)
!4404 = !DILocation(line: 3343, column: 7, scope: !4232)
!4405 = !DILocation(line: 3346, column: 39, scope: !4232)
!4406 = !DILocation(line: 3346, column: 15, scope: !4232)
!4407 = !DILocation(line: 3347, column: 41, scope: !4232)
!4408 = !DILocation(line: 3347, column: 17, scope: !4232)
!4409 = !DILocation(line: 3347, column: 15, scope: !4232)
!4410 = !DILocation(line: 3346, column: 7, scope: !4232)
!4411 = !DILocation(line: 3359, column: 23, scope: !4232)
!4412 = !DILocation(line: 3359, column: 7, scope: !4232)
!4413 = !DILocation(line: 3362, column: 24, scope: !4232)
!4414 = !DILocation(line: 3363, column: 41, scope: !4232)
!4415 = !DILocation(line: 3363, column: 17, scope: !4232)
!4416 = !DILocation(line: 3363, column: 15, scope: !4232)
!4417 = !DILocation(line: 3364, column: 41, scope: !4232)
!4418 = !DILocation(line: 3364, column: 17, scope: !4232)
!4419 = !DILocation(line: 3364, column: 15, scope: !4232)
!4420 = !DILocation(line: 3362, column: 7, scope: !4232)
!4421 = !DILocation(line: 3374, column: 24, scope: !4232)
!4422 = !DILocation(line: 3375, column: 41, scope: !4232)
!4423 = !DILocation(line: 3375, column: 17, scope: !4232)
!4424 = !DILocation(line: 3375, column: 15, scope: !4232)
!4425 = !DILocation(line: 3374, column: 7, scope: !4232)
!4426 = !DILocation(line: 3378, column: 7, scope: !4232)
!4427 = !DILocation(line: 3379, column: 5, scope: !4232)
!4428 = !DILocation(line: 3381, column: 3, scope: !4218)
!4429 = !DILocation(line: 3382, column: 1, scope: !4218)
!4430 = distinct !DISubprogram(name: "gimple_code", scope: !597, file: !597, line: 1052, type: !4431, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4434)
!4431 = !DISubroutineType(types: !4432)
!4432 = !{!596, !4433}
!4433 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !705, line: 60, baseType: !2367)
!4434 = !{!4435}
!4435 = !DILocalVariable(name: "g", arg: 1, scope: !4430, file: !597, line: 1052, type: !4433)
!4436 = !DILocation(line: 0, scope: !4430)
!4437 = !DILocation(line: 1054, column: 20, scope: !4430)
!4438 = !DILocation(line: 1054, column: 3, scope: !4430)
!4439 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !597, file: !597, line: 1694, type: !4440, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4442)
!4440 = !DISubroutineType(types: !4441)
!4441 = !{!704, !4433}
!4442 = !{!4443}
!4443 = !DILocalVariable(name: "gs", arg: 1, scope: !4439, file: !597, line: 1694, type: !4433)
!4444 = !DILocation(line: 0, scope: !4439)
!4445 = !DILocation(line: 1697, column: 10, scope: !4439)
!4446 = !DILocation(line: 1697, column: 3, scope: !4439)
!4447 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !597, file: !597, line: 1727, type: !4440, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4448)
!4448 = !{!4449}
!4449 = !DILocalVariable(name: "gs", arg: 1, scope: !4447, file: !597, line: 1727, type: !4433)
!4450 = !DILocation(line: 0, scope: !4447)
!4451 = !DILocation(line: 1730, column: 10, scope: !4447)
!4452 = !DILocation(line: 1730, column: 3, scope: !4447)
!4453 = distinct !DISubprogram(name: "estimate_operator_cost", scope: !3, file: !3, line: 3030, type: !4454, scopeLine: 3032, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4456)
!4454 = !DISubroutineType(types: !4455)
!4455 = !{!696, !134, !4221, !704, !704}
!4456 = !{!4457, !4458, !4459, !4460}
!4457 = !DILocalVariable(name: "code", arg: 1, scope: !4453, file: !3, line: 3030, type: !134)
!4458 = !DILocalVariable(name: "weights", arg: 2, scope: !4453, file: !3, line: 3030, type: !4221)
!4459 = !DILocalVariable(name: "op1", arg: 3, scope: !4453, file: !3, line: 3031, type: !704)
!4460 = !DILocalVariable(name: "op2", arg: 4, scope: !4453, file: !3, line: 3031, type: !704)
!4461 = !DILocation(line: 0, scope: !4453)
!4462 = !DILocation(line: 3033, column: 3, scope: !4453)
!4463 = !DILocation(line: 3128, column: 7, scope: !4464)
!4464 = distinct !DILexicalBlock(scope: !4453, file: !3, line: 3034, column: 5)
!4465 = !DILocation(line: 3142, column: 11, scope: !4466)
!4466 = distinct !DILexicalBlock(scope: !4464, file: !3, line: 3142, column: 11)
!4467 = !DILocation(line: 3142, column: 27, scope: !4466)
!4468 = !DILocation(line: 3142, column: 11, scope: !4464)
!4469 = !DILocation(line: 3143, column: 25, scope: !4466)
!4470 = !DILocation(line: 3143, column: 9, scope: !4466)
!4471 = !DILocation(line: 3148, column: 7, scope: !4464)
!4472 = !DILocation(line: 0, scope: !4464)
!4473 = !DILocation(line: 3151, column: 1, scope: !4453)
!4474 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !597, file: !597, line: 1815, type: !4475, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4477)
!4475 = !DISubroutineType(types: !4476)
!4476 = !{!134, !4433}
!4477 = !{!4478, !4479}
!4478 = !DILocalVariable(name: "gs", arg: 1, scope: !4474, file: !597, line: 1815, type: !4433)
!4479 = !DILocalVariable(name: "code", scope: !4474, file: !597, line: 1817, type: !134)
!4480 = !DILocation(line: 0, scope: !4474)
!4481 = !DILocation(line: 1820, column: 10, scope: !4474)
!4482 = !DILocation(line: 1821, column: 7, scope: !4483)
!4483 = distinct !DILexicalBlock(scope: !4474, file: !597, line: 1821, column: 7)
!4484 = !DILocation(line: 1821, column: 35, scope: !4483)
!4485 = !DILocation(line: 1821, column: 7, scope: !4474)
!4486 = !DILocation(line: 1822, column: 12, scope: !4483)
!4487 = !DILocation(line: 1822, column: 5, scope: !4483)
!4488 = !DILocation(line: 1824, column: 3, scope: !4474)
!4489 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !597, file: !597, line: 1686, type: !4490, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4492)
!4490 = !DISubroutineType(types: !4491)
!4491 = !{!680, !134}
!4492 = !{!4493}
!4493 = !DILocalVariable(name: "code", arg: 1, scope: !4489, file: !597, line: 1686, type: !134)
!4494 = !DILocation(line: 0, scope: !4489)
!4495 = !DILocation(line: 1688, column: 34, scope: !4489)
!4496 = !DILocation(line: 1688, column: 10, scope: !4489)
!4497 = !DILocation(line: 1688, column: 3, scope: !4489)
!4498 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !597, file: !597, line: 1759, type: !4440, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4499)
!4499 = !{!4500}
!4500 = !DILocalVariable(name: "gs", arg: 1, scope: !4498, file: !597, line: 1759, type: !4433)
!4501 = !DILocation(line: 0, scope: !4498)
!4502 = !DILocation(line: 1763, column: 7, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4498, file: !597, line: 1763, column: 7)
!4504 = !DILocation(line: 1763, column: 27, scope: !4503)
!4505 = !DILocation(line: 1763, column: 7, scope: !4498)
!4506 = !DILocation(line: 1764, column: 12, scope: !4503)
!4507 = !DILocation(line: 1764, column: 5, scope: !4503)
!4508 = !DILocation(line: 0, scope: !4503)
!4509 = !DILocation(line: 1767, column: 1, scope: !4498)
!4510 = distinct !DISubprogram(name: "gimple_cond_code", scope: !597, file: !597, line: 2221, type: !4475, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4511)
!4511 = !{!4512}
!4512 = !DILocalVariable(name: "gs", arg: 1, scope: !4510, file: !597, line: 2221, type: !4433)
!4513 = !DILocation(line: 0, scope: !4510)
!4514 = !DILocation(line: 2224, column: 38, scope: !4510)
!4515 = !DILocation(line: 2224, column: 3, scope: !4510)
!4516 = distinct !DISubprogram(name: "gimple_op", scope: !597, file: !597, line: 1631, type: !4517, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4519)
!4517 = !DISubroutineType(types: !4518)
!4518 = !{!704, !4433, !7}
!4519 = !{!4520, !4521}
!4520 = !DILocalVariable(name: "gs", arg: 1, scope: !4516, file: !597, line: 1631, type: !4433)
!4521 = !DILocalVariable(name: "i", arg: 2, scope: !4516, file: !597, line: 1631, type: !7)
!4522 = !DILocation(line: 0, scope: !4516)
!4523 = !DILocation(line: 1633, column: 7, scope: !4524)
!4524 = distinct !DILexicalBlock(scope: !4516, file: !597, line: 1633, column: 7)
!4525 = !DILocation(line: 1633, column: 7, scope: !4516)
!4526 = !DILocation(line: 1638, column: 14, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4524, file: !597, line: 1634, column: 5)
!4528 = !DILocation(line: 1638, column: 7, scope: !4527)
!4529 = !DILocation(line: 0, scope: !4524)
!4530 = !DILocation(line: 1642, column: 1, scope: !4516)
!4531 = distinct !DISubprogram(name: "gimple_switch_num_labels", scope: !597, file: !597, line: 3157, type: !4532, scopeLine: 3158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4534)
!4532 = !DISubroutineType(types: !4533)
!4533 = !{!7, !4433}
!4534 = !{!4535, !4536}
!4535 = !DILocalVariable(name: "gs", arg: 1, scope: !4531, file: !597, line: 3157, type: !4433)
!4536 = !DILocalVariable(name: "num_ops", scope: !4531, file: !597, line: 3159, type: !7)
!4537 = !DILocation(line: 0, scope: !4531)
!4538 = !DILocation(line: 3161, column: 13, scope: !4531)
!4539 = !DILocation(line: 3162, column: 3, scope: !4531)
!4540 = !DILocation(line: 3163, column: 18, scope: !4531)
!4541 = !DILocation(line: 3163, column: 3, scope: !4531)
!4542 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !597, file: !597, line: 1954, type: !4440, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4543)
!4543 = !{!4544, !4545}
!4544 = !DILocalVariable(name: "gs", arg: 1, scope: !4542, file: !597, line: 1954, type: !4433)
!4545 = !DILocalVariable(name: "addr", scope: !4542, file: !597, line: 1956, type: !704)
!4546 = !DILocation(line: 0, scope: !4542)
!4547 = !DILocation(line: 1956, column: 15, scope: !4542)
!4548 = !DILocation(line: 1957, column: 7, scope: !4549)
!4549 = distinct !DILexicalBlock(scope: !4542, file: !597, line: 1957, column: 7)
!4550 = !DILocation(line: 1957, column: 24, scope: !4549)
!4551 = !DILocation(line: 1957, column: 7, scope: !4542)
!4552 = !DILocation(line: 1958, column: 12, scope: !4549)
!4553 = !DILocation(line: 1958, column: 5, scope: !4549)
!4554 = !DILocation(line: 1960, column: 1, scope: !4542)
!4555 = distinct !DISubprogram(name: "gimple_call_fn", scope: !597, file: !597, line: 1911, type: !4440, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4556)
!4556 = !{!4557}
!4557 = !DILocalVariable(name: "gs", arg: 1, scope: !4555, file: !597, line: 1911, type: !4433)
!4558 = !DILocation(line: 0, scope: !4555)
!4559 = !DILocation(line: 1914, column: 10, scope: !4555)
!4560 = !DILocation(line: 1914, column: 3, scope: !4555)
!4561 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !597, file: !597, line: 2013, type: !4532, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4562)
!4562 = !{!4563, !4564}
!4563 = !DILocalVariable(name: "gs", arg: 1, scope: !4561, file: !597, line: 2013, type: !4433)
!4564 = !DILocalVariable(name: "num_ops", scope: !4561, file: !597, line: 2015, type: !7)
!4565 = !DILocation(line: 0, scope: !4561)
!4566 = !DILocation(line: 2017, column: 13, scope: !4561)
!4567 = !DILocation(line: 2018, column: 18, scope: !4561)
!4568 = !DILocation(line: 2018, column: 3, scope: !4561)
!4569 = distinct !DISubprogram(name: "gimple_call_arg", scope: !597, file: !597, line: 2025, type: !4517, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4570)
!4570 = !{!4571, !4572}
!4571 = !DILocalVariable(name: "gs", arg: 1, scope: !4569, file: !597, line: 2025, type: !4433)
!4572 = !DILocalVariable(name: "index", arg: 2, scope: !4569, file: !597, line: 2025, type: !7)
!4573 = !DILocation(line: 0, scope: !4569)
!4574 = !DILocation(line: 2028, column: 31, scope: !4569)
!4575 = !DILocation(line: 2028, column: 10, scope: !4569)
!4576 = !DILocation(line: 2028, column: 3, scope: !4569)
!4577 = distinct !DISubprogram(name: "gimple_asm_string", scope: !597, file: !597, line: 2729, type: !4578, scopeLine: 2730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4580)
!4578 = !DISubroutineType(types: !4579)
!4579 = !{!701, !4433}
!4580 = !{!4581}
!4581 = !DILocalVariable(name: "gs", arg: 1, scope: !4577, file: !597, line: 2729, type: !4433)
!4582 = !DILocation(line: 0, scope: !4577)
!4583 = !DILocation(line: 2732, column: 25, scope: !4577)
!4584 = !DILocation(line: 2732, column: 3, scope: !4577)
!4585 = distinct !DISubprogram(name: "estimate_num_insns_seq", scope: !3, file: !3, line: 3159, type: !4586, scopeLine: 3160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4588)
!4586 = !DISubroutineType(types: !4587)
!4587 = !{!696, !1018, !4221}
!4588 = !{!4589, !4590, !4591, !4592}
!4589 = !DILocalVariable(name: "stmts", arg: 1, scope: !4585, file: !3, line: 3159, type: !1018)
!4590 = !DILocalVariable(name: "weights", arg: 2, scope: !4585, file: !3, line: 3159, type: !4221)
!4591 = !DILocalVariable(name: "cost", scope: !4585, file: !3, line: 3161, type: !696)
!4592 = !DILocalVariable(name: "gsi", scope: !4585, file: !3, line: 3162, type: !2373)
!4593 = !DILocation(line: 0, scope: !4585)
!4594 = !DILocation(line: 3162, column: 3, scope: !4585)
!4595 = !DILocation(line: 3165, column: 14, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4585, file: !3, line: 3165, column: 3)
!4597 = !DILocation(line: 3165, column: 8, scope: !4596)
!4598 = !DILocation(line: 3165, column: 34, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 3165, column: 3)
!4600 = !DILocation(line: 3165, column: 33, scope: !4599)
!4601 = !DILocation(line: 3165, column: 3, scope: !4596)
!4602 = !DILocation(line: 3166, column: 33, scope: !4599)
!4603 = !DILocation(line: 3166, column: 13, scope: !4599)
!4604 = !DILocation(line: 3166, column: 10, scope: !4599)
!4605 = !DILocation(line: 3165, column: 51, scope: !4599)
!4606 = !DILocation(line: 3165, column: 3, scope: !4599)
!4607 = distinct !{!4607, !4601, !4608}
!4608 = !DILocation(line: 3166, column: 56, scope: !4596)
!4609 = !DILocation(line: 3169, column: 1, scope: !4585)
!4610 = !DILocation(line: 3168, column: 3, scope: !4585)
!4611 = distinct !DISubprogram(name: "gimple_bind_body", scope: !597, file: !597, line: 2517, type: !4612, scopeLine: 2518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4614)
!4612 = !DISubroutineType(types: !4613)
!4613 = !{!1018, !1028}
!4614 = !{!4615}
!4615 = !DILocalVariable(name: "gs", arg: 1, scope: !4611, file: !597, line: 2517, type: !1028)
!4616 = !DILocation(line: 0, scope: !4611)
!4617 = !DILocation(line: 2520, column: 26, scope: !4611)
!4618 = !DILocation(line: 2520, column: 3, scope: !4611)
!4619 = distinct !DISubprogram(name: "gimple_eh_filter_failure", scope: !597, file: !597, line: 2869, type: !4612, scopeLine: 2870, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4620)
!4620 = !{!4621}
!4621 = !DILocalVariable(name: "gs", arg: 1, scope: !4619, file: !597, line: 2869, type: !1028)
!4622 = !DILocation(line: 0, scope: !4619)
!4623 = !DILocation(line: 2872, column: 31, scope: !4619)
!4624 = !DILocation(line: 2872, column: 3, scope: !4619)
!4625 = distinct !DISubprogram(name: "gimple_catch_handler", scope: !597, file: !597, line: 2806, type: !4612, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4626)
!4626 = !{!4627}
!4627 = !DILocalVariable(name: "gs", arg: 1, scope: !4625, file: !597, line: 2806, type: !1028)
!4628 = !DILocation(line: 0, scope: !4625)
!4629 = !DILocation(line: 2809, column: 27, scope: !4625)
!4630 = !DILocation(line: 2809, column: 3, scope: !4625)
!4631 = distinct !DISubprogram(name: "gimple_try_eval", scope: !597, file: !597, line: 2953, type: !4612, scopeLine: 2954, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4632)
!4632 = !{!4633}
!4633 = !DILocalVariable(name: "gs", arg: 1, scope: !4631, file: !597, line: 2953, type: !1028)
!4634 = !DILocation(line: 0, scope: !4631)
!4635 = !DILocation(line: 2956, column: 25, scope: !4631)
!4636 = !DILocation(line: 2956, column: 3, scope: !4631)
!4637 = distinct !DISubprogram(name: "gimple_try_cleanup", scope: !597, file: !597, line: 2964, type: !4612, scopeLine: 2965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4638)
!4638 = !{!4639}
!4639 = !DILocalVariable(name: "gs", arg: 1, scope: !4637, file: !597, line: 2964, type: !1028)
!4640 = !DILocation(line: 0, scope: !4637)
!4641 = !DILocation(line: 2967, column: 25, scope: !4637)
!4642 = !DILocation(line: 2967, column: 3, scope: !4637)
!4643 = distinct !DISubprogram(name: "gimple_omp_body", scope: !597, file: !597, line: 3363, type: !4612, scopeLine: 3364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4644)
!4644 = !{!4645}
!4645 = !DILocalVariable(name: "gs", arg: 1, scope: !4643, file: !597, line: 3363, type: !1028)
!4646 = !DILocation(line: 0, scope: !4643)
!4647 = !DILocation(line: 3365, column: 18, scope: !4643)
!4648 = !DILocation(line: 3365, column: 3, scope: !4643)
!4649 = distinct !DISubprogram(name: "gimple_omp_for_pre_body", scope: !597, file: !597, line: 3583, type: !4612, scopeLine: 3584, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4650)
!4650 = !{!4651}
!4651 = !DILocalVariable(name: "gs", arg: 1, scope: !4649, file: !597, line: 3583, type: !1028)
!4652 = !DILocation(line: 0, scope: !4649)
!4653 = !DILocation(line: 3586, column: 29, scope: !4649)
!4654 = !DILocation(line: 3586, column: 3, scope: !4649)
!4655 = distinct !DISubprogram(name: "estimate_num_insns_fn", scope: !3, file: !3, line: 3389, type: !4656, scopeLine: 3390, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4658)
!4656 = !DISubroutineType(types: !4657)
!4657 = !{!696, !704, !4221}
!4658 = !{!4659, !4660, !4661, !4662, !4663, !4664}
!4659 = !DILocalVariable(name: "fndecl", arg: 1, scope: !4655, file: !3, line: 3389, type: !704)
!4660 = !DILocalVariable(name: "weights", arg: 2, scope: !4655, file: !3, line: 3389, type: !4221)
!4661 = !DILocalVariable(name: "my_function", scope: !4655, file: !3, line: 3391, type: !1414)
!4662 = !DILocalVariable(name: "bsi", scope: !4655, file: !3, line: 3392, type: !2373)
!4663 = !DILocalVariable(name: "bb", scope: !4655, file: !3, line: 3393, type: !1584)
!4664 = !DILocalVariable(name: "n", scope: !4655, file: !3, line: 3394, type: !696)
!4665 = !DILocation(line: 0, scope: !4655)
!4666 = !DILocation(line: 3391, column: 34, scope: !4655)
!4667 = !DILocation(line: 3392, column: 3, scope: !4655)
!4668 = !DILocation(line: 3396, column: 3, scope: !4655)
!4669 = !DILocation(line: 0, scope: !4670)
!4670 = distinct !DILexicalBlock(scope: !4655, file: !3, line: 3397, column: 3)
!4671 = !DILocation(line: 3397, column: 3, scope: !4670)
!4672 = !DILocation(line: 0, scope: !4673)
!4673 = distinct !DILexicalBlock(scope: !4674, file: !3, line: 3399, column: 7)
!4674 = distinct !DILexicalBlock(scope: !4675, file: !3, line: 3398, column: 5)
!4675 = distinct !DILexicalBlock(scope: !4670, file: !3, line: 3397, column: 3)
!4676 = !DILocation(line: 3397, column: 3, scope: !4675)
!4677 = !DILocation(line: 3394, column: 7, scope: !4655)
!4678 = !DILocation(line: 3399, column: 18, scope: !4673)
!4679 = !DILocation(line: 3399, column: 12, scope: !4673)
!4680 = !DILocation(line: 3399, column: 38, scope: !4681)
!4681 = distinct !DILexicalBlock(scope: !4673, file: !3, line: 3399, column: 7)
!4682 = !DILocation(line: 3399, column: 37, scope: !4681)
!4683 = !DILocation(line: 3399, column: 7, scope: !4673)
!4684 = !DILocation(line: 3400, column: 27, scope: !4681)
!4685 = !DILocation(line: 3400, column: 7, scope: !4681)
!4686 = !DILocation(line: 3400, column: 4, scope: !4681)
!4687 = !DILocation(line: 3399, column: 55, scope: !4681)
!4688 = !DILocation(line: 3399, column: 7, scope: !4681)
!4689 = distinct !{!4689, !4683, !4690}
!4690 = !DILocation(line: 3400, column: 50, scope: !4673)
!4691 = distinct !{!4691, !4671, !4692}
!4692 = !DILocation(line: 3401, column: 5, scope: !4670)
!4693 = !DILocation(line: 3404, column: 1, scope: !4655)
!4694 = !DILocation(line: 3403, column: 3, scope: !4655)
!4695 = distinct !DISubprogram(name: "gsi_start_bb", scope: !597, file: !597, line: 4418, type: !4696, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4698)
!4696 = !DISubroutineType(types: !4697)
!4697 = !{!2373, !1584}
!4698 = !{!4699, !4700, !4701}
!4699 = !DILocalVariable(name: "bb", arg: 1, scope: !4695, file: !597, line: 4418, type: !1584)
!4700 = !DILocalVariable(name: "i", scope: !4695, file: !597, line: 4420, type: !2373)
!4701 = !DILocalVariable(name: "seq", scope: !4695, file: !597, line: 4421, type: !1018)
!4702 = !DILocation(line: 0, scope: !4695)
!4703 = !DILocation(line: 4420, column: 24, scope: !4695)
!4704 = !DILocation(line: 4423, column: 9, scope: !4695)
!4705 = !DILocation(line: 4424, column: 11, scope: !4695)
!4706 = !DILocation(line: 4424, column: 5, scope: !4695)
!4707 = !DILocation(line: 4424, column: 9, scope: !4695)
!4708 = !DILocation(line: 4425, column: 5, scope: !4695)
!4709 = !DILocation(line: 4425, column: 9, scope: !4695)
!4710 = !DILocation(line: 4426, column: 5, scope: !4695)
!4711 = !DILocation(line: 4426, column: 8, scope: !4695)
!4712 = !DILocation(line: 4429, column: 1, scope: !4695)
!4713 = distinct !DISubprogram(name: "init_inline_once", scope: !3, file: !3, line: 3410, type: !2187, scopeLine: 3411, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2434)
!4714 = !DILocation(line: 3412, column: 30, scope: !4713)
!4715 = !DILocation(line: 3413, column: 45, scope: !4713)
!4716 = !DILocation(line: 3414, column: 33, scope: !4713)
!4717 = !DILocation(line: 3415, column: 29, scope: !4713)
!4718 = !DILocation(line: 3416, column: 31, scope: !4713)
!4719 = !DILocation(line: 3422, column: 30, scope: !4713)
!4720 = !DILocation(line: 3423, column: 45, scope: !4713)
!4721 = !DILocation(line: 3424, column: 33, scope: !4713)
!4722 = !DILocation(line: 3425, column: 29, scope: !4713)
!4723 = !DILocation(line: 3426, column: 31, scope: !4713)
!4724 = !DILocation(line: 3427, column: 1, scope: !4713)
!4725 = distinct !DISubprogram(name: "count_insns_seq", scope: !3, file: !3, line: 3432, type: !4586, scopeLine: 3433, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4726)
!4726 = !{!4727, !4728, !4729, !4730}
!4727 = !DILocalVariable(name: "seq", arg: 1, scope: !4725, file: !3, line: 3432, type: !1018)
!4728 = !DILocalVariable(name: "weights", arg: 2, scope: !4725, file: !3, line: 3432, type: !4221)
!4729 = !DILocalVariable(name: "gsi", scope: !4725, file: !3, line: 3434, type: !2373)
!4730 = !DILocalVariable(name: "n", scope: !4725, file: !3, line: 3435, type: !696)
!4731 = !DILocation(line: 0, scope: !4725)
!4732 = !DILocation(line: 3434, column: 3, scope: !4725)
!4733 = !DILocation(line: 3436, column: 14, scope: !4734)
!4734 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 3436, column: 3)
!4735 = !DILocation(line: 3436, column: 8, scope: !4734)
!4736 = !DILocation(line: 3436, column: 32, scope: !4737)
!4737 = distinct !DILexicalBlock(scope: !4734, file: !3, line: 3436, column: 3)
!4738 = !DILocation(line: 3436, column: 31, scope: !4737)
!4739 = !DILocation(line: 3436, column: 3, scope: !4734)
!4740 = !DILocation(line: 3437, column: 30, scope: !4737)
!4741 = !DILocation(line: 3437, column: 10, scope: !4737)
!4742 = !DILocation(line: 3437, column: 7, scope: !4737)
!4743 = !DILocation(line: 3436, column: 49, scope: !4737)
!4744 = !DILocation(line: 3436, column: 3, scope: !4737)
!4745 = distinct !{!4745, !4739, !4746}
!4746 = !DILocation(line: 3437, column: 53, scope: !4734)
!4747 = !DILocation(line: 3440, column: 1, scope: !4725)
!4748 = !DILocation(line: 3439, column: 3, scope: !4725)
!4749 = distinct !DISubprogram(name: "optimize_inline_calls", scope: !3, file: !3, line: 3940, type: !4750, scopeLine: 3941, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4752)
!4750 = !DISubroutineType(types: !4751)
!4751 = !{!7, !704}
!4752 = !{!4753, !4754, !4755, !4756, !4757}
!4753 = !DILocalVariable(name: "fn", arg: 1, scope: !4749, file: !3, line: 3940, type: !704)
!4754 = !DILocalVariable(name: "id", scope: !4749, file: !3, line: 3942, type: !2096)
!4755 = !DILocalVariable(name: "bb", scope: !4749, file: !3, line: 3943, type: !1584)
!4756 = !DILocalVariable(name: "last", scope: !4749, file: !3, line: 3944, type: !696)
!4757 = !DILocalVariable(name: "gctx", scope: !4749, file: !3, line: 3945, type: !4758)
!4758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimplify_ctx", file: !597, line: 980, size: 576, elements: !4759)
!4759 = !{!4760, !4762, !4763, !4764, !4765, !4766, !4767, !4768, !4769, !4770, !4771, !4772}
!4760 = !DIDerivedType(tag: DW_TAG_member, name: "prev_context", scope: !4758, file: !597, line: 982, baseType: !4761, size: 64)
!4761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4758, size: 64)
!4762 = !DIDerivedType(tag: DW_TAG_member, name: "bind_expr_stack", scope: !4758, file: !597, line: 984, baseType: !2359, size: 64, offset: 64)
!4763 = !DIDerivedType(tag: DW_TAG_member, name: "temps", scope: !4758, file: !597, line: 985, baseType: !704, size: 64, offset: 128)
!4764 = !DIDerivedType(tag: DW_TAG_member, name: "conditional_cleanups", scope: !4758, file: !597, line: 986, baseType: !1018, size: 64, offset: 192)
!4765 = !DIDerivedType(tag: DW_TAG_member, name: "exit_label", scope: !4758, file: !597, line: 987, baseType: !704, size: 64, offset: 256)
!4766 = !DIDerivedType(tag: DW_TAG_member, name: "return_temp", scope: !4758, file: !597, line: 988, baseType: !704, size: 64, offset: 320)
!4767 = !DIDerivedType(tag: DW_TAG_member, name: "case_labels", scope: !4758, file: !597, line: 990, baseType: !2386, size: 64, offset: 384)
!4768 = !DIDerivedType(tag: DW_TAG_member, name: "temp_htab", scope: !4758, file: !597, line: 992, baseType: !1499, size: 64, offset: 448)
!4769 = !DIDerivedType(tag: DW_TAG_member, name: "conditions", scope: !4758, file: !597, line: 994, baseType: !696, size: 32, offset: 512)
!4770 = !DIDerivedType(tag: DW_TAG_member, name: "save_stack", scope: !4758, file: !597, line: 995, baseType: !695, size: 8, offset: 544)
!4771 = !DIDerivedType(tag: DW_TAG_member, name: "into_ssa", scope: !4758, file: !597, line: 996, baseType: !695, size: 8, offset: 552)
!4772 = !DIDerivedType(tag: DW_TAG_member, name: "allow_rhs_cond_expr", scope: !4758, file: !597, line: 997, baseType: !695, size: 8, offset: 560)
!4773 = !DILocation(line: 0, scope: !4749)
!4774 = !DILocation(line: 3942, column: 3, scope: !4749)
!4775 = !DILocation(line: 3944, column: 14, scope: !4749)
!4776 = !DILocation(line: 3945, column: 3, scope: !4749)
!4777 = !DILocation(line: 3950, column: 7, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4749, file: !3, line: 3950, column: 7)
!4779 = !DILocation(line: 3950, column: 18, scope: !4778)
!4780 = !DILocation(line: 3950, column: 21, scope: !4778)
!4781 = !DILocation(line: 3950, column: 7, scope: !4749)
!4782 = !DILocation(line: 3954, column: 3, scope: !4749)
!4783 = !DILocation(line: 3956, column: 31, scope: !4749)
!4784 = !DILocation(line: 3956, column: 20, scope: !4749)
!4785 = !DILocation(line: 3956, column: 29, scope: !4749)
!4786 = !DILocation(line: 3956, column: 6, scope: !4749)
!4787 = !DILocation(line: 3956, column: 15, scope: !4749)
!4788 = !DILocation(line: 3957, column: 6, scope: !4749)
!4789 = !DILocation(line: 3957, column: 13, scope: !4749)
!4790 = !DILocation(line: 3959, column: 7, scope: !4791)
!4791 = distinct !DILexicalBlock(scope: !4749, file: !3, line: 3959, column: 7)
!4792 = !DILocation(line: 3959, column: 7, scope: !4749)
!4793 = !DILocation(line: 3960, column: 15, scope: !4791)
!4794 = !DILocation(line: 3960, column: 5, scope: !4791)
!4795 = !DILocation(line: 3962, column: 6, scope: !4749)
!4796 = !DILocation(line: 3962, column: 16, scope: !4749)
!4797 = !DILocation(line: 3963, column: 6, scope: !4749)
!4798 = !DILocation(line: 3963, column: 33, scope: !4749)
!4799 = !DILocation(line: 3964, column: 6, scope: !4749)
!4800 = !DILocation(line: 3964, column: 24, scope: !4749)
!4801 = !DILocation(line: 3965, column: 6, scope: !4749)
!4802 = !DILocation(line: 3965, column: 33, scope: !4749)
!4803 = !DILocation(line: 3966, column: 6, scope: !4749)
!4804 = !DILocation(line: 3966, column: 34, scope: !4749)
!4805 = !DILocation(line: 3967, column: 27, scope: !4749)
!4806 = !DILocation(line: 3967, column: 6, scope: !4749)
!4807 = !DILocation(line: 3967, column: 25, scope: !4749)
!4808 = !DILocation(line: 3969, column: 3, scope: !4749)
!4809 = !DILocation(line: 3972, column: 3, scope: !4749)
!4810 = !DILocation(line: 3973, column: 3, scope: !4749)
!4811 = !DILocation(line: 3976, column: 3, scope: !4749)
!4812 = !DILocation(line: 3984, column: 3, scope: !4813)
!4813 = distinct !DILexicalBlock(scope: !4749, file: !3, line: 3984, column: 3)
!4814 = !DILocation(line: 3984, column: 3, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4813, file: !3, line: 3984, column: 3)
!4816 = !DILocation(line: 0, scope: !4813)
!4817 = !DILocation(line: 3985, column: 5, scope: !4815)
!4818 = !DILocation(line: 0, scope: !4815)
!4819 = distinct !{!4819, !4812, !4820}
!4820 = !DILocation(line: 3985, column: 40, scope: !4813)
!4821 = !DILocation(line: 3987, column: 3, scope: !4749)
!4822 = !DILocation(line: 4002, column: 36, scope: !4749)
!4823 = !DILocation(line: 4002, column: 3, scope: !4749)
!4824 = !DILocation(line: 4003, column: 27, scope: !4749)
!4825 = !DILocation(line: 4003, column: 3, scope: !4749)
!4826 = !DILocation(line: 4005, column: 3, scope: !4749)
!4827 = !DILocation(line: 4008, column: 3, scope: !4749)
!4828 = !DILocation(line: 4010, column: 3, scope: !4749)
!4829 = !DILocation(line: 4012, column: 3, scope: !4749)
!4830 = !DILocation(line: 4013, column: 3, scope: !4749)
!4831 = !DILocation(line: 4024, column: 24, scope: !4749)
!4832 = !DILocation(line: 4024, column: 7, scope: !4749)
!4833 = !DILocation(line: 4024, column: 4, scope: !4749)
!4834 = !DILocation(line: 4025, column: 7, scope: !4749)
!4835 = !DILocation(line: 4025, column: 22, scope: !4749)
!4836 = !DILocation(line: 4025, column: 4, scope: !4749)
!4837 = !DILocation(line: 4022, column: 3, scope: !4749)
!4838 = !DILocation(line: 4026, column: 1, scope: !4749)
!4839 = distinct !DISubprogram(name: "copy_decl_maybe_to_var", scope: !3, file: !3, line: 4574, type: !2879, scopeLine: 4575, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4840)
!4840 = !{!4841, !4842}
!4841 = !DILocalVariable(name: "decl", arg: 1, scope: !4839, file: !3, line: 4574, type: !704)
!4842 = !DILocalVariable(name: "id", arg: 2, scope: !4839, file: !3, line: 4574, type: !2095)
!4843 = !DILocation(line: 0, scope: !4839)
!4844 = !DILocation(line: 4576, column: 7, scope: !4845)
!4845 = distinct !DILexicalBlock(scope: !4839, file: !3, line: 4576, column: 7)
!4846 = !DILocation(line: 4576, column: 24, scope: !4845)
!4847 = !DILocation(line: 4576, column: 37, scope: !4845)
!4848 = !DILocation(line: 4576, column: 57, scope: !4845)
!4849 = !DILocation(line: 4576, column: 7, scope: !4839)
!4850 = !DILocation(line: 4577, column: 12, scope: !4845)
!4851 = !DILocation(line: 4577, column: 5, scope: !4845)
!4852 = !DILocation(line: 4579, column: 12, scope: !4845)
!4853 = !DILocation(line: 4579, column: 5, scope: !4845)
!4854 = !DILocation(line: 0, scope: !4845)
!4855 = !DILocation(line: 4580, column: 1, scope: !4839)
!4856 = distinct !DISubprogram(name: "gimple_expand_calls_inline", scope: !3, file: !3, line: 3826, type: !4857, scopeLine: 3827, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4859)
!4857 = !DISubroutineType(types: !4858)
!4858 = !{!695, !1584, !2095}
!4859 = !{!4860, !4861, !4862, !4863}
!4860 = !DILocalVariable(name: "bb", arg: 1, scope: !4856, file: !3, line: 3826, type: !1584)
!4861 = !DILocalVariable(name: "id", arg: 2, scope: !4856, file: !3, line: 3826, type: !2095)
!4862 = !DILocalVariable(name: "gsi", scope: !4856, file: !3, line: 3828, type: !2373)
!4863 = !DILocalVariable(name: "stmt", scope: !4864, file: !3, line: 3832, type: !1028)
!4864 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 3831, column: 5)
!4865 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 3830, column: 3)
!4866 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 3830, column: 3)
!4867 = !DILocation(line: 0, scope: !4856)
!4868 = !DILocation(line: 3828, column: 3, scope: !4856)
!4869 = !DILocation(line: 3830, column: 14, scope: !4866)
!4870 = !DILocation(line: 3830, column: 8, scope: !4866)
!4871 = !DILocation(line: 3830, column: 34, scope: !4865)
!4872 = !DILocation(line: 3830, column: 33, scope: !4865)
!4873 = !DILocation(line: 3830, column: 3, scope: !4866)
!4874 = !DILocation(line: 3832, column: 21, scope: !4864)
!4875 = !DILocation(line: 0, scope: !4864)
!4876 = !DILocation(line: 3834, column: 11, scope: !4877)
!4877 = distinct !DILexicalBlock(scope: !4864, file: !3, line: 3834, column: 11)
!4878 = !DILocation(line: 3835, column: 4, scope: !4877)
!4879 = !DILocation(line: 3835, column: 7, scope: !4877)
!4880 = !DILocation(line: 3834, column: 11, scope: !4864)
!4881 = !DILocation(line: 3837, column: 5, scope: !4865)
!4882 = !DILocation(line: 3830, column: 51, scope: !4865)
!4883 = !DILocation(line: 3830, column: 3, scope: !4865)
!4884 = distinct !{!4884, !4873, !4885}
!4885 = !DILocation(line: 3837, column: 5, scope: !4866)
!4886 = !DILocation(line: 3840, column: 1, scope: !4856)
!4887 = distinct !DISubprogram(name: "fold_marked_statements", scope: !3, file: !3, line: 3847, type: !4888, scopeLine: 3848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4890)
!4888 = !DISubroutineType(types: !4889)
!4889 = !{null, !696, !2355}
!4890 = !{!4891, !4892, !4893, !4898, !4903, !4904, !4907, !4910}
!4891 = !DILocalVariable(name: "first", arg: 1, scope: !4887, file: !3, line: 3847, type: !696)
!4892 = !DILocalVariable(name: "statements", arg: 2, scope: !4887, file: !3, line: 3847, type: !2355)
!4893 = !DILocalVariable(name: "gsi", scope: !4894, file: !3, line: 3852, type: !2373)
!4894 = distinct !DILexicalBlock(scope: !4895, file: !3, line: 3851, column: 7)
!4895 = distinct !DILexicalBlock(scope: !4896, file: !3, line: 3850, column: 9)
!4896 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 3849, column: 3)
!4897 = distinct !DILexicalBlock(scope: !4887, file: !3, line: 3849, column: 3)
!4898 = !DILocalVariable(name: "old_stmt", scope: !4899, file: !3, line: 3859, type: !1028)
!4899 = distinct !DILexicalBlock(scope: !4900, file: !3, line: 3858, column: 6)
!4900 = distinct !DILexicalBlock(scope: !4901, file: !3, line: 3857, column: 8)
!4901 = distinct !DILexicalBlock(scope: !4902, file: !3, line: 3854, column: 2)
!4902 = distinct !DILexicalBlock(scope: !4894, file: !3, line: 3854, column: 2)
!4903 = !DILocalVariable(name: "old_decl", scope: !4899, file: !3, line: 3860, type: !704)
!4904 = !DILocalVariable(name: "i2", scope: !4905, file: !3, line: 3866, type: !2373)
!4905 = distinct !DILexicalBlock(scope: !4906, file: !3, line: 3863, column: 3)
!4906 = distinct !DILexicalBlock(scope: !4899, file: !3, line: 3862, column: 12)
!4907 = !DILocalVariable(name: "new_stmt", scope: !4908, file: !3, line: 3870, type: !1028)
!4908 = distinct !DILexicalBlock(scope: !4909, file: !3, line: 3869, column: 7)
!4909 = distinct !DILexicalBlock(scope: !4905, file: !3, line: 3868, column: 9)
!4910 = !DILocalVariable(name: "new_stmt", scope: !4911, file: !3, line: 3907, type: !1028)
!4911 = distinct !DILexicalBlock(scope: !4912, file: !3, line: 3904, column: 3)
!4912 = distinct !DILexicalBlock(scope: !4906, file: !3, line: 3903, column: 17)
!4913 = !DILocation(line: 0, scope: !4887)
!4914 = !DILocation(line: 0, scope: !4894)
!4915 = !DILocation(line: 0, scope: !4902)
!4916 = !DILocation(line: 0, scope: !4905)
!4917 = !DILocation(line: 0, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4908, file: !3, line: 3871, column: 13)
!4919 = !DILocation(line: 3849, column: 3, scope: !4887)
!4920 = !DILocation(line: 3849, column: 18, scope: !4896)
!4921 = !DILocation(line: 3849, column: 16, scope: !4896)
!4922 = !DILocation(line: 3849, column: 3, scope: !4897)
!4923 = !DILocation(line: 3850, column: 9, scope: !4895)
!4924 = !DILocation(line: 3850, column: 9, scope: !4896)
!4925 = !DILocation(line: 3852, column: 9, scope: !4894)
!4926 = !DILocation(line: 3854, column: 13, scope: !4902)
!4927 = !DILocation(line: 3854, column: 27, scope: !4902)
!4928 = !DILocation(line: 3854, column: 7, scope: !4902)
!4929 = !DILocation(line: 3855, column: 8, scope: !4901)
!4930 = !DILocation(line: 3855, column: 7, scope: !4901)
!4931 = !DILocation(line: 3854, column: 2, scope: !4902)
!4932 = !DILocation(line: 3857, column: 42, scope: !4900)
!4933 = !DILocation(line: 3857, column: 8, scope: !4900)
!4934 = !DILocation(line: 3857, column: 8, scope: !4901)
!4935 = !DILocation(line: 3859, column: 26, scope: !4899)
!4936 = !DILocation(line: 0, scope: !4899)
!4937 = !DILocation(line: 3860, column: 24, scope: !4899)
!4938 = !DILocation(line: 3860, column: 52, scope: !4899)
!4939 = !DILocation(line: 3862, column: 12, scope: !4906)
!4940 = !DILocation(line: 3862, column: 21, scope: !4906)
!4941 = !DILocation(line: 3862, column: 24, scope: !4906)
!4942 = !DILocation(line: 3862, column: 12, scope: !4899)
!4943 = !DILocation(line: 3866, column: 5, scope: !4905)
!4944 = !DILocation(line: 3866, column: 31, scope: !4905)
!4945 = !DILocation(line: 3867, column: 5, scope: !4905)
!4946 = !DILocation(line: 3868, column: 9, scope: !4909)
!4947 = !DILocation(line: 3868, column: 9, scope: !4905)
!4948 = !DILocation(line: 3871, column: 13, scope: !4918)
!4949 = !DILocation(line: 3871, column: 13, scope: !4908)
!4950 = !DILocation(line: 3872, column: 9, scope: !4918)
!4951 = !DILocation(line: 3872, column: 23, scope: !4918)
!4952 = !DILocation(line: 3872, column: 4, scope: !4918)
!4953 = !DILocation(line: 3874, column: 4, scope: !4918)
!4954 = !DILocation(line: 3875, column: 9, scope: !4908)
!4955 = !DILocation(line: 3877, column: 17, scope: !4956)
!4956 = distinct !DILexicalBlock(scope: !4908, file: !3, line: 3876, column: 4)
!4957 = !DILocation(line: 0, scope: !4908)
!4958 = !DILocation(line: 3878, column: 6, scope: !4956)
!4959 = !DILocation(line: 3879, column: 6, scope: !4956)
!4960 = !DILocation(line: 3882, column: 22, scope: !4961)
!4961 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 3882, column: 10)
!4962 = !DILocation(line: 3882, column: 19, scope: !4961)
!4963 = !DILocation(line: 3882, column: 10, scope: !4956)
!4964 = !DILocation(line: 3894, column: 14, scope: !4965)
!4965 = distinct !DILexicalBlock(scope: !4966, file: !3, line: 3894, column: 14)
!4966 = distinct !DILexicalBlock(scope: !4961, file: !3, line: 3883, column: 8)
!4967 = !DILocation(line: 3894, column: 14, scope: !4966)
!4968 = !DILocation(line: 3896, column: 33, scope: !4965)
!4969 = !DILocation(line: 3896, column: 5, scope: !4965)
!4970 = !DILocation(line: 3899, column: 6, scope: !4956)
!4971 = distinct !{!4971, !4954, !4972}
!4972 = !DILocation(line: 3900, column: 4, scope: !4908)
!4973 = !DILocation(line: 3902, column: 3, scope: !4906)
!4974 = !DILocation(line: 3902, column: 3, scope: !4905)
!4975 = !DILocation(line: 3903, column: 17, scope: !4912)
!4976 = !DILocation(line: 3903, column: 17, scope: !4906)
!4977 = !DILocation(line: 3907, column: 23, scope: !4911)
!4978 = !DILocation(line: 0, scope: !4911)
!4979 = !DILocation(line: 3908, column: 5, scope: !4911)
!4980 = !DILocation(line: 3910, column: 9, scope: !4981)
!4981 = distinct !DILexicalBlock(scope: !4911, file: !3, line: 3910, column: 9)
!4982 = !DILocation(line: 3911, column: 9, scope: !4981)
!4983 = !DILocation(line: 3911, column: 12, scope: !4981)
!4984 = !DILocation(line: 3910, column: 9, scope: !4911)
!4985 = !DILocation(line: 3912, column: 7, scope: !4981)
!4986 = !DILocation(line: 3915, column: 9, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !4911, file: !3, line: 3915, column: 9)
!4988 = !DILocation(line: 3915, column: 9, scope: !4911)
!4989 = !DILocation(line: 3916, column: 35, scope: !4987)
!4990 = !DILocation(line: 3916, column: 7, scope: !4987)
!4991 = !DILocation(line: 3856, column: 7, scope: !4901)
!4992 = !DILocation(line: 3854, column: 2, scope: !4901)
!4993 = distinct !{!4993, !4931, !4994}
!4994 = !DILocation(line: 3918, column: 6, scope: !4902)
!4995 = !DILocation(line: 3919, column: 7, scope: !4895)
!4996 = !DILocation(line: 3919, column: 7, scope: !4894)
!4997 = !DILocation(line: 3849, column: 39, scope: !4896)
!4998 = !DILocation(line: 3849, column: 3, scope: !4896)
!4999 = distinct !{!4999, !4922, !5000}
!5000 = !DILocation(line: 3919, column: 7, scope: !4897)
!5001 = !DILocation(line: 3920, column: 1, scope: !4887)
!5002 = distinct !DISubprogram(name: "delete_unreachable_blocks_update_callgraph", scope: !3, file: !3, line: 4649, type: !5003, scopeLine: 4650, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5005)
!5003 = !DISubroutineType(types: !5004)
!5004 = !{!695, !2095}
!5005 = !{!5006, !5007, !5008, !5009, !5010, !5016, !5021}
!5006 = !DILocalVariable(name: "id", arg: 1, scope: !5002, file: !3, line: 4649, type: !2095)
!5007 = !DILocalVariable(name: "changed", scope: !5002, file: !3, line: 4651, type: !695)
!5008 = !DILocalVariable(name: "b", scope: !5002, file: !3, line: 4652, type: !1584)
!5009 = !DILocalVariable(name: "next_bb", scope: !5002, file: !3, line: 4652, type: !1584)
!5010 = !DILocalVariable(name: "bsi", scope: !5011, file: !3, line: 4664, type: !2373)
!5011 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 4663, column: 2)
!5012 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 4662, column: 11)
!5013 = distinct !DILexicalBlock(scope: !5014, file: !3, line: 4659, column: 5)
!5014 = distinct !DILexicalBlock(scope: !5015, file: !3, line: 4658, column: 3)
!5015 = distinct !DILexicalBlock(scope: !5002, file: !3, line: 4658, column: 3)
!5016 = !DILocalVariable(name: "e", scope: !5017, file: !3, line: 4669, type: !2107)
!5017 = distinct !DILexicalBlock(scope: !5018, file: !3, line: 4668, column: 8)
!5018 = distinct !DILexicalBlock(scope: !5019, file: !3, line: 4667, column: 10)
!5019 = distinct !DILexicalBlock(scope: !5020, file: !3, line: 4666, column: 11)
!5020 = distinct !DILexicalBlock(scope: !5011, file: !3, line: 4666, column: 11)
!5021 = !DILocalVariable(name: "node", scope: !5017, file: !3, line: 4670, type: !2102)
!5022 = !DILocation(line: 0, scope: !5002)
!5023 = !DILocation(line: 4654, column: 3, scope: !5002)
!5024 = !DILocation(line: 4658, column: 12, scope: !5015)
!5025 = !DILocation(line: 4658, column: 29, scope: !5015)
!5026 = !DILocation(line: 0, scope: !5011)
!5027 = !DILocation(line: 0, scope: !5020)
!5028 = !DILocation(line: 0, scope: !5029)
!5029 = distinct !DILexicalBlock(scope: !5017, file: !3, line: 4672, column: 14)
!5030 = !DILocation(line: 0, scope: !5031)
!5031 = distinct !DILexicalBlock(scope: !5017, file: !3, line: 4679, column: 7)
!5032 = !DILocation(line: 4658, column: 8, scope: !5015)
!5033 = !DILocation(line: 4658, column: 43, scope: !5014)
!5034 = !DILocation(line: 0, scope: !5015)
!5035 = !DILocation(line: 4651, column: 8, scope: !5002)
!5036 = !DILocation(line: 4658, column: 40, scope: !5014)
!5037 = !DILocation(line: 4658, column: 3, scope: !5015)
!5038 = !DILocation(line: 4660, column: 20, scope: !5013)
!5039 = !DILocation(line: 4662, column: 16, scope: !5012)
!5040 = !DILocation(line: 4662, column: 22, scope: !5012)
!5041 = !DILocation(line: 4662, column: 11, scope: !5013)
!5042 = !DILocation(line: 4664, column: 11, scope: !5011)
!5043 = !DILocation(line: 4666, column: 22, scope: !5020)
!5044 = !DILocation(line: 4666, column: 16, scope: !5020)
!5045 = !DILocation(line: 4666, column: 41, scope: !5019)
!5046 = !DILocation(line: 4666, column: 40, scope: !5019)
!5047 = !DILocation(line: 4666, column: 11, scope: !5020)
!5048 = !DILocation(line: 4667, column: 23, scope: !5018)
!5049 = !DILocation(line: 4667, column: 10, scope: !5018)
!5050 = !DILocation(line: 4667, column: 39, scope: !5018)
!5051 = !DILocation(line: 4667, column: 10, scope: !5019)
!5052 = !DILocation(line: 4672, column: 36, scope: !5029)
!5053 = !DILocation(line: 4672, column: 46, scope: !5029)
!5054 = !DILocation(line: 4672, column: 19, scope: !5029)
!5055 = !DILocation(line: 0, scope: !5017)
!5056 = !DILocation(line: 4672, column: 63, scope: !5029)
!5057 = !DILocation(line: 4672, column: 14, scope: !5017)
!5058 = !DILocation(line: 4674, column: 15, scope: !5059)
!5059 = distinct !DILexicalBlock(scope: !5060, file: !3, line: 4674, column: 11)
!5060 = distinct !DILexicalBlock(scope: !5029, file: !3, line: 4673, column: 5)
!5061 = !DILocation(line: 4674, column: 12, scope: !5059)
!5062 = !DILocation(line: 4674, column: 11, scope: !5060)
!5063 = !DILocation(line: 4675, column: 50, scope: !5059)
!5064 = !DILocation(line: 4675, column: 9, scope: !5059)
!5065 = !DILocation(line: 4677, column: 16, scope: !5059)
!5066 = !DILocation(line: 4679, column: 11, scope: !5031)
!5067 = !DILocation(line: 4679, column: 38, scope: !5031)
!5068 = !DILocation(line: 4680, column: 7, scope: !5031)
!5069 = !DILocation(line: 4680, column: 14, scope: !5031)
!5070 = !DILocation(line: 4680, column: 24, scope: !5031)
!5071 = !DILocation(line: 4680, column: 10, scope: !5031)
!5072 = !DILocation(line: 4679, column: 7, scope: !5017)
!5073 = !DILocation(line: 4681, column: 15, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5031, file: !3, line: 4681, column: 10)
!5075 = !DILocation(line: 4681, column: 56, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5074, file: !3, line: 4681, column: 10)
!5077 = !DILocation(line: 0, scope: !5074)
!5078 = !DILocation(line: 4681, column: 49, scope: !5076)
!5079 = !DILocation(line: 4681, column: 10, scope: !5074)
!5080 = !DILocation(line: 4683, column: 44, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !5082, file: !3, line: 4683, column: 20)
!5082 = distinct !DILexicalBlock(scope: !5076, file: !3, line: 4682, column: 7)
!5083 = !DILocation(line: 4683, column: 25, scope: !5081)
!5084 = !DILocation(line: 4683, column: 61, scope: !5081)
!5085 = !DILocation(line: 4683, column: 20, scope: !5082)
!5086 = !DILocation(line: 4685, column: 21, scope: !5087)
!5087 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 4685, column: 17)
!5088 = distinct !DILexicalBlock(scope: !5081, file: !3, line: 4684, column: 4)
!5089 = !DILocation(line: 4685, column: 18, scope: !5087)
!5090 = !DILocation(line: 4685, column: 17, scope: !5088)
!5091 = !DILocation(line: 4686, column: 56, scope: !5087)
!5092 = !DILocation(line: 4686, column: 15, scope: !5087)
!5093 = !DILocation(line: 4688, column: 22, scope: !5087)
!5094 = !DILocation(line: 4691, column: 19, scope: !5095)
!5095 = distinct !DILexicalBlock(scope: !5082, file: !3, line: 4691, column: 13)
!5096 = !DILocation(line: 4691, column: 13, scope: !5095)
!5097 = !DILocation(line: 4691, column: 13, scope: !5082)
!5098 = !DILocation(line: 4692, column: 4, scope: !5095)
!5099 = !DILocation(line: 4693, column: 24, scope: !5100)
!5100 = distinct !DILexicalBlock(scope: !5095, file: !3, line: 4693, column: 18)
!5101 = !DILocation(line: 4693, column: 18, scope: !5100)
!5102 = !DILocation(line: 4693, column: 18, scope: !5095)
!5103 = !DILocation(line: 0, scope: !5104)
!5104 = distinct !DILexicalBlock(scope: !5100, file: !3, line: 4696, column: 4)
!5105 = !DILocation(line: 4697, column: 6, scope: !5104)
!5106 = !DILocation(line: 4694, column: 4, scope: !5100)
!5107 = !DILocation(line: 4697, column: 18, scope: !5104)
!5108 = !DILocation(line: 4697, column: 34, scope: !5104)
!5109 = !DILocation(line: 4697, column: 44, scope: !5104)
!5110 = !DILocation(line: 4697, column: 37, scope: !5104)
!5111 = !DILocation(line: 4698, column: 21, scope: !5104)
!5112 = distinct !{!5112, !5105, !5111}
!5113 = !DILocation(line: 4699, column: 10, scope: !5104)
!5114 = !DILocation(line: 4700, column: 21, scope: !5115)
!5115 = distinct !DILexicalBlock(scope: !5104, file: !3, line: 4699, column: 10)
!5116 = !DILocation(line: 4700, column: 8, scope: !5115)
!5117 = !DILocation(line: 0, scope: !5095)
!5118 = !DILocation(line: 4681, column: 10, scope: !5076)
!5119 = distinct !{!5119, !5079, !5120}
!5120 = !DILocation(line: 4702, column: 7, scope: !5074)
!5121 = !DILocation(line: 4666, column: 58, scope: !5019)
!5122 = !DILocation(line: 4666, column: 11, scope: !5019)
!5123 = distinct !{!5123, !5047, !5124}
!5124 = !DILocation(line: 4703, column: 8, scope: !5020)
!5125 = !DILocation(line: 4704, column: 4, scope: !5011)
!5126 = !DILocation(line: 4706, column: 2, scope: !5012)
!5127 = !DILocation(line: 4706, column: 2, scope: !5011)
!5128 = !DILocation(line: 0, scope: !5014)
!5129 = !DILocation(line: 4658, column: 3, scope: !5014)
!5130 = distinct !{!5130, !5037, !5131}
!5131 = !DILocation(line: 4707, column: 5, scope: !5015)
!5132 = !DILocation(line: 4709, column: 7, scope: !5133)
!5133 = distinct !DILexicalBlock(scope: !5002, file: !3, line: 4709, column: 7)
!5134 = !DILocation(line: 4709, column: 7, scope: !5002)
!5135 = !DILocation(line: 4710, column: 5, scope: !5133)
!5136 = !DILocation(line: 4711, column: 3, scope: !5002)
!5137 = distinct !DISubprogram(name: "VEC_constructor_elt_gc_copy", scope: !135, file: !135, line: 1538, type: !5138, scopeLine: 1538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5141)
!5138 = !DISubroutineType(types: !5139)
!5139 = !{!1873, !5140}
!5140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1878, size: 64)
!5141 = !{!5142, !5143, !5144}
!5142 = !DILocalVariable(name: "vec_", arg: 1, scope: !5137, file: !135, line: 1538, type: !5140)
!5143 = !DILocalVariable(name: "len_", scope: !5137, file: !135, line: 1538, type: !1172)
!5144 = !DILocalVariable(name: "new_vec_", scope: !5137, file: !135, line: 1538, type: !1873)
!5145 = !DILocation(line: 0, scope: !5137)
!5146 = !DILocation(line: 1538, column: 1, scope: !5137)
!5147 = !DILocation(line: 1538, column: 1, scope: !5148)
!5148 = distinct !DILexicalBlock(scope: !5137, file: !135, line: 1538, column: 1)
!5149 = !DILocation(line: 1538, column: 1, scope: !5150)
!5150 = distinct !DILexicalBlock(scope: !5148, file: !135, line: 1538, column: 1)
!5151 = distinct !DISubprogram(name: "unsave_expr_now", scope: !3, file: !3, line: 4229, type: !5152, scopeLine: 4230, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5154)
!5152 = !DISubroutineType(types: !5153)
!5153 = !{!704, !704}
!5154 = !{!5155, !5156}
!5155 = !DILocalVariable(name: "expr", arg: 1, scope: !5151, file: !3, line: 4229, type: !704)
!5156 = !DILocalVariable(name: "id", scope: !5151, file: !3, line: 4231, type: !2096)
!5157 = !DILocation(line: 0, scope: !5151)
!5158 = !DILocation(line: 4231, column: 3, scope: !5151)
!5159 = !DILocation(line: 4234, column: 12, scope: !5160)
!5160 = distinct !DILexicalBlock(scope: !5151, file: !3, line: 4234, column: 7)
!5161 = !DILocation(line: 4234, column: 7, scope: !5151)
!5162 = !DILocation(line: 4235, column: 5, scope: !5160)
!5163 = !DILocation(line: 4238, column: 3, scope: !5151)
!5164 = !DILocation(line: 4239, column: 15, scope: !5151)
!5165 = !DILocation(line: 4239, column: 13, scope: !5151)
!5166 = !DILocation(line: 4240, column: 6, scope: !5151)
!5167 = !DILocation(line: 4240, column: 13, scope: !5151)
!5168 = !DILocation(line: 4241, column: 17, scope: !5151)
!5169 = !DILocation(line: 4241, column: 6, scope: !5151)
!5170 = !DILocation(line: 4241, column: 15, scope: !5151)
!5171 = !DILocation(line: 4242, column: 6, scope: !5151)
!5172 = !DILocation(line: 4242, column: 16, scope: !5151)
!5173 = !DILocation(line: 4244, column: 6, scope: !5151)
!5174 = !DILocation(line: 4244, column: 16, scope: !5151)
!5175 = !DILocation(line: 4245, column: 6, scope: !5151)
!5176 = !DILocation(line: 4245, column: 33, scope: !5151)
!5177 = !DILocation(line: 4246, column: 6, scope: !5151)
!5178 = !DILocation(line: 4246, column: 24, scope: !5151)
!5179 = !DILocation(line: 4247, column: 6, scope: !5151)
!5180 = !DILocation(line: 4247, column: 33, scope: !5151)
!5181 = !DILocation(line: 4248, column: 6, scope: !5151)
!5182 = !DILocation(line: 4248, column: 34, scope: !5151)
!5183 = !DILocation(line: 4251, column: 3, scope: !5151)
!5184 = !DILocation(line: 4254, column: 3, scope: !5151)
!5185 = !DILocation(line: 4257, column: 27, scope: !5151)
!5186 = !DILocation(line: 4257, column: 3, scope: !5151)
!5187 = !DILocation(line: 4258, column: 10, scope: !5188)
!5188 = distinct !DILexicalBlock(scope: !5151, file: !3, line: 4258, column: 7)
!5189 = !DILocation(line: 4258, column: 7, scope: !5188)
!5190 = !DILocation(line: 4258, column: 7, scope: !5151)
!5191 = !DILocation(line: 4259, column: 5, scope: !5188)
!5192 = !DILocation(line: 4261, column: 3, scope: !5151)
!5193 = !DILocation(line: 4262, column: 1, scope: !5151)
!5194 = distinct !DISubprogram(name: "copy_decl_no_change", scope: !3, file: !3, line: 4552, type: !2879, scopeLine: 4553, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5195)
!5195 = !{!5196, !5197, !5198}
!5196 = !DILocalVariable(name: "decl", arg: 1, scope: !5194, file: !3, line: 4552, type: !704)
!5197 = !DILocalVariable(name: "id", arg: 2, scope: !5194, file: !3, line: 4552, type: !2095)
!5198 = !DILocalVariable(name: "copy", scope: !5194, file: !3, line: 4554, type: !704)
!5199 = !DILocation(line: 0, scope: !5194)
!5200 = !DILocation(line: 4556, column: 10, scope: !5194)
!5201 = !DILocation(line: 4559, column: 3, scope: !5194)
!5202 = !DILocation(line: 4559, column: 24, scope: !5194)
!5203 = !DILocation(line: 4560, column: 14, scope: !5194)
!5204 = !DILocation(line: 4560, column: 3, scope: !5194)
!5205 = !DILocation(line: 4564, column: 7, scope: !5206)
!5206 = distinct !DILexicalBlock(scope: !5194, file: !3, line: 4564, column: 7)
!5207 = !DILocation(line: 4564, column: 24, scope: !5206)
!5208 = !DILocation(line: 4564, column: 7, scope: !5194)
!5209 = !DILocation(line: 4566, column: 31, scope: !5210)
!5210 = distinct !DILexicalBlock(scope: !5206, file: !3, line: 4565, column: 5)
!5211 = !DILocation(line: 4567, column: 7, scope: !5210)
!5212 = !DILocation(line: 4567, column: 29, scope: !5210)
!5213 = !DILocation(line: 4568, column: 5, scope: !5210)
!5214 = !DILocation(line: 4570, column: 10, scope: !5194)
!5215 = !DILocation(line: 4570, column: 3, scope: !5194)
!5216 = distinct !DISubprogram(name: "mark_local_for_remap_r", scope: !3, file: !3, line: 4138, type: !2989, scopeLine: 4140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5217)
!5217 = !{!5218, !5219, !5220, !5221, !5222}
!5218 = !DILocalVariable(name: "tp", arg: 1, scope: !5216, file: !3, line: 4138, type: !703)
!5219 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !5216, file: !3, line: 4138, type: !2991)
!5220 = !DILocalVariable(name: "data", arg: 3, scope: !5216, file: !3, line: 4139, type: !700)
!5221 = !DILocalVariable(name: "id", scope: !5216, file: !3, line: 4141, type: !2095)
!5222 = !DILocalVariable(name: "decl", scope: !5223, file: !3, line: 4149, type: !704)
!5223 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 4148, column: 5)
!5224 = distinct !DILexicalBlock(scope: !5225, file: !3, line: 4147, column: 12)
!5225 = distinct !DILexicalBlock(scope: !5216, file: !3, line: 4144, column: 7)
!5226 = !DILocation(line: 0, scope: !5216)
!5227 = !DILocation(line: 4141, column: 24, scope: !5216)
!5228 = !DILocation(line: 4144, column: 7, scope: !5225)
!5229 = !DILocation(line: 4144, column: 7, scope: !5216)
!5230 = !DILocation(line: 4145, column: 20, scope: !5225)
!5231 = !DILocation(line: 4145, column: 5, scope: !5225)
!5232 = !DILocation(line: 4147, column: 28, scope: !5224)
!5233 = !DILocation(line: 4147, column: 12, scope: !5225)
!5234 = !DILocation(line: 4149, column: 19, scope: !5223)
!5235 = !DILocation(line: 0, scope: !5223)
!5236 = !DILocation(line: 4152, column: 38, scope: !5223)
!5237 = !DILocation(line: 4152, column: 34, scope: !5223)
!5238 = !DILocation(line: 4152, column: 7, scope: !5223)
!5239 = !DILocation(line: 4153, column: 5, scope: !5223)
!5240 = !DILocation(line: 4155, column: 3, scope: !5216)
!5241 = distinct !DISubprogram(name: "unsave_r", scope: !3, file: !3, line: 4188, type: !2989, scopeLine: 4189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5242)
!5242 = !{!5243, !5244, !5245, !5246, !5247, !5248}
!5243 = !DILocalVariable(name: "tp", arg: 1, scope: !5241, file: !3, line: 4188, type: !703)
!5244 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !5241, file: !3, line: 4188, type: !2991)
!5245 = !DILocalVariable(name: "data", arg: 3, scope: !5241, file: !3, line: 4188, type: !700)
!5246 = !DILocalVariable(name: "id", scope: !5241, file: !3, line: 4190, type: !2095)
!5247 = !DILocalVariable(name: "st", scope: !5241, file: !3, line: 4191, type: !1645)
!5248 = !DILocalVariable(name: "n", scope: !5241, file: !3, line: 4192, type: !703)
!5249 = !DILocation(line: 0, scope: !5241)
!5250 = !DILocation(line: 4190, column: 24, scope: !5241)
!5251 = !DILocation(line: 4191, column: 34, scope: !5241)
!5252 = !DILocation(line: 4195, column: 8, scope: !5253)
!5253 = distinct !DILexicalBlock(scope: !5241, file: !3, line: 4195, column: 7)
!5254 = !DILocation(line: 4195, column: 24, scope: !5253)
!5255 = !DILocation(line: 4195, column: 36, scope: !5253)
!5256 = !DILocation(line: 4195, column: 40, scope: !5253)
!5257 = !DILocation(line: 4196, column: 7, scope: !5253)
!5258 = !DILocation(line: 4196, column: 26, scope: !5253)
!5259 = !DILocation(line: 4195, column: 7, scope: !5241)
!5260 = !DILocation(line: 4199, column: 20, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5253, file: !3, line: 4197, column: 5)
!5262 = !DILocation(line: 4202, column: 11, scope: !5263)
!5263 = distinct !DILexicalBlock(scope: !5261, file: !3, line: 4202, column: 11)
!5264 = !DILocation(line: 4202, column: 11, scope: !5261)
!5265 = !DILocation(line: 4203, column: 8, scope: !5263)
!5266 = !DILocation(line: 4203, column: 6, scope: !5263)
!5267 = !DILocation(line: 4203, column: 2, scope: !5263)
!5268 = !DILocation(line: 4206, column: 28, scope: !5269)
!5269 = distinct !DILexicalBlock(scope: !5253, file: !3, line: 4206, column: 12)
!5270 = !DILocation(line: 4206, column: 12, scope: !5253)
!5271 = !DILocation(line: 4207, column: 5, scope: !5269)
!5272 = !DILocation(line: 4208, column: 28, scope: !5273)
!5273 = distinct !DILexicalBlock(scope: !5269, file: !3, line: 4208, column: 12)
!5274 = !DILocation(line: 4208, column: 12, scope: !5269)
!5275 = !DILocation(line: 4209, column: 5, scope: !5273)
!5276 = !DILocation(line: 4210, column: 28, scope: !5277)
!5277 = distinct !DILexicalBlock(scope: !5273, file: !3, line: 4210, column: 12)
!5278 = !DILocation(line: 4211, column: 5, scope: !5277)
!5279 = !DILocation(line: 4211, column: 24, scope: !5277)
!5280 = !DILocation(line: 4210, column: 12, scope: !5273)
!5281 = !DILocation(line: 4212, column: 26, scope: !5277)
!5282 = !DILocation(line: 4212, column: 5, scope: !5277)
!5283 = !DILocation(line: 4215, column: 7, scope: !5284)
!5284 = distinct !DILexicalBlock(scope: !5277, file: !3, line: 4214, column: 5)
!5285 = !DILocation(line: 4218, column: 22, scope: !5284)
!5286 = !DILocation(line: 4218, column: 7, scope: !5284)
!5287 = !DILocation(line: 4222, column: 3, scope: !5241)
!5288 = distinct !DISubprogram(name: "copy_gimple_seq_and_replace_locals", scope: !3, file: !3, line: 4375, type: !5289, scopeLine: 4376, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5291)
!5289 = !DISubroutineType(types: !5290)
!5290 = !{!1018, !1018}
!5291 = !{!5292, !5293, !5294, !5295, !5296}
!5292 = !DILocalVariable(name: "seq", arg: 1, scope: !5288, file: !3, line: 4375, type: !1018)
!5293 = !DILocalVariable(name: "id", scope: !5288, file: !3, line: 4377, type: !2096)
!5294 = !DILocalVariable(name: "wi", scope: !5288, file: !3, line: 4378, type: !2370)
!5295 = !DILocalVariable(name: "visited", scope: !5288, file: !3, line: 4379, type: !2355)
!5296 = !DILocalVariable(name: "copy", scope: !5288, file: !3, line: 4380, type: !1018)
!5297 = !DILocation(line: 0, scope: !5288)
!5298 = !DILocation(line: 4377, column: 3, scope: !5288)
!5299 = !DILocation(line: 4378, column: 3, scope: !5288)
!5300 = !DILocation(line: 4383, column: 11, scope: !5301)
!5301 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 4383, column: 7)
!5302 = !DILocation(line: 4383, column: 7, scope: !5288)
!5303 = !DILocation(line: 4387, column: 3, scope: !5288)
!5304 = !DILocation(line: 4388, column: 15, scope: !5288)
!5305 = !DILocation(line: 4388, column: 13, scope: !5288)
!5306 = !DILocation(line: 4389, column: 6, scope: !5288)
!5307 = !DILocation(line: 4389, column: 13, scope: !5288)
!5308 = !DILocation(line: 4390, column: 17, scope: !5288)
!5309 = !DILocation(line: 4390, column: 6, scope: !5288)
!5310 = !DILocation(line: 4390, column: 15, scope: !5288)
!5311 = !DILocation(line: 4391, column: 6, scope: !5288)
!5312 = !DILocation(line: 4391, column: 16, scope: !5288)
!5313 = !DILocation(line: 4393, column: 6, scope: !5288)
!5314 = !DILocation(line: 4393, column: 16, scope: !5288)
!5315 = !DILocation(line: 4394, column: 6, scope: !5288)
!5316 = !DILocation(line: 4394, column: 33, scope: !5288)
!5317 = !DILocation(line: 4395, column: 6, scope: !5288)
!5318 = !DILocation(line: 4395, column: 24, scope: !5288)
!5319 = !DILocation(line: 4396, column: 6, scope: !5288)
!5320 = !DILocation(line: 4396, column: 33, scope: !5288)
!5321 = !DILocation(line: 4397, column: 6, scope: !5288)
!5322 = !DILocation(line: 4397, column: 34, scope: !5288)
!5323 = !DILocation(line: 4400, column: 3, scope: !5288)
!5324 = !DILocation(line: 4401, column: 13, scope: !5288)
!5325 = !DILocation(line: 4402, column: 6, scope: !5288)
!5326 = !DILocation(line: 4402, column: 11, scope: !5288)
!5327 = !DILocation(line: 4403, column: 6, scope: !5288)
!5328 = !DILocation(line: 4403, column: 11, scope: !5288)
!5329 = !DILocation(line: 4404, column: 3, scope: !5288)
!5330 = !DILocation(line: 4405, column: 3, scope: !5288)
!5331 = !DILocation(line: 4407, column: 10, scope: !5288)
!5332 = !DILocation(line: 4410, column: 3, scope: !5288)
!5333 = !DILocation(line: 4411, column: 11, scope: !5288)
!5334 = !DILocation(line: 4412, column: 3, scope: !5288)
!5335 = !DILocation(line: 4415, column: 27, scope: !5288)
!5336 = !DILocation(line: 4415, column: 3, scope: !5288)
!5337 = !DILocation(line: 4416, column: 10, scope: !5338)
!5338 = distinct !DILexicalBlock(scope: !5288, file: !3, line: 4416, column: 7)
!5339 = !DILocation(line: 4416, column: 7, scope: !5338)
!5340 = !DILocation(line: 4416, column: 7, scope: !5288)
!5341 = !DILocation(line: 4417, column: 5, scope: !5338)
!5342 = !DILocation(line: 4420, column: 1, scope: !5288)
!5343 = distinct !DISubprogram(name: "mark_local_labels_stmt", scope: !3, file: !3, line: 4269, type: !5344, scopeLine: 4272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5346)
!5344 = !DISubroutineType(types: !5345)
!5345 = !{!704, !3810, !694, !2369}
!5346 = !{!5347, !5348, !5349, !5350, !5351, !5352}
!5347 = !DILocalVariable(name: "gsip", arg: 1, scope: !5343, file: !3, line: 4269, type: !3810)
!5348 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !5343, file: !3, line: 4270, type: !694)
!5349 = !DILocalVariable(name: "wi", arg: 3, scope: !5343, file: !3, line: 4271, type: !2369)
!5350 = !DILocalVariable(name: "id", scope: !5343, file: !3, line: 4273, type: !2095)
!5351 = !DILocalVariable(name: "stmt", scope: !5343, file: !3, line: 4274, type: !1028)
!5352 = !DILocalVariable(name: "decl", scope: !5353, file: !3, line: 4278, type: !704)
!5353 = distinct !DILexicalBlock(scope: !5354, file: !3, line: 4277, column: 5)
!5354 = distinct !DILexicalBlock(scope: !5343, file: !3, line: 4276, column: 7)
!5355 = !DILocation(line: 0, scope: !5343)
!5356 = !DILocation(line: 4273, column: 47, scope: !5343)
!5357 = !DILocation(line: 4274, column: 17, scope: !5343)
!5358 = !DILocation(line: 4276, column: 7, scope: !5354)
!5359 = !DILocation(line: 4276, column: 26, scope: !5354)
!5360 = !DILocation(line: 4276, column: 7, scope: !5343)
!5361 = !DILocation(line: 4278, column: 19, scope: !5353)
!5362 = !DILocation(line: 0, scope: !5353)
!5363 = !DILocation(line: 4281, column: 38, scope: !5353)
!5364 = !DILocation(line: 4281, column: 34, scope: !5353)
!5365 = !DILocation(line: 4281, column: 7, scope: !5353)
!5366 = !DILocation(line: 4282, column: 5, scope: !5353)
!5367 = !DILocation(line: 4284, column: 3, scope: !5343)
!5368 = distinct !DISubprogram(name: "replace_locals_stmt", scope: !3, file: !3, line: 4343, type: !5344, scopeLine: 4346, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5369)
!5369 = !{!5370, !5371, !5372, !5373, !5374, !5375}
!5370 = !DILocalVariable(name: "gsip", arg: 1, scope: !5368, file: !3, line: 4343, type: !3810)
!5371 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !5368, file: !3, line: 4344, type: !694)
!5372 = !DILocalVariable(name: "wi", arg: 3, scope: !5368, file: !3, line: 4345, type: !2369)
!5373 = !DILocalVariable(name: "id", scope: !5368, file: !3, line: 4347, type: !2095)
!5374 = !DILocalVariable(name: "stmt", scope: !5368, file: !3, line: 4348, type: !1028)
!5375 = !DILocalVariable(name: "block", scope: !5376, file: !3, line: 4352, type: !704)
!5376 = distinct !DILexicalBlock(scope: !5377, file: !3, line: 4351, column: 5)
!5377 = distinct !DILexicalBlock(scope: !5368, file: !3, line: 4350, column: 7)
!5378 = !DILocation(line: 0, scope: !5368)
!5379 = !DILocation(line: 4347, column: 47, scope: !5368)
!5380 = !DILocation(line: 4348, column: 17, scope: !5368)
!5381 = !DILocation(line: 4350, column: 7, scope: !5377)
!5382 = !DILocation(line: 4350, column: 26, scope: !5377)
!5383 = !DILocation(line: 4350, column: 7, scope: !5368)
!5384 = !DILocation(line: 4352, column: 7, scope: !5376)
!5385 = !DILocation(line: 4352, column: 20, scope: !5376)
!5386 = !DILocation(line: 0, scope: !5376)
!5387 = !DILocation(line: 4352, column: 12, scope: !5376)
!5388 = !DILocation(line: 4354, column: 11, scope: !5389)
!5389 = distinct !DILexicalBlock(scope: !5376, file: !3, line: 4354, column: 11)
!5390 = !DILocation(line: 4354, column: 11, scope: !5376)
!5391 = !DILocation(line: 4356, column: 4, scope: !5392)
!5392 = distinct !DILexicalBlock(scope: !5389, file: !3, line: 4355, column: 2)
!5393 = !DILocation(line: 4357, column: 33, scope: !5392)
!5394 = !DILocation(line: 4357, column: 4, scope: !5392)
!5395 = !DILocation(line: 4358, column: 2, scope: !5392)
!5396 = !DILocation(line: 4362, column: 11, scope: !5397)
!5397 = distinct !DILexicalBlock(scope: !5376, file: !3, line: 4362, column: 11)
!5398 = !DILocation(line: 4362, column: 11, scope: !5376)
!5399 = !DILocation(line: 4363, column: 43, scope: !5397)
!5400 = !DILocation(line: 4363, column: 30, scope: !5397)
!5401 = !DILocation(line: 4363, column: 2, scope: !5397)
!5402 = !DILocation(line: 4364, column: 5, scope: !5377)
!5403 = !DILocation(line: 4364, column: 5, scope: !5376)
!5404 = !DILocation(line: 4367, column: 3, scope: !5368)
!5405 = distinct !DISubprogram(name: "replace_locals_op", scope: !3, file: !3, line: 4294, type: !2989, scopeLine: 4295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5406)
!5406 = !{!5407, !5408, !5409, !5410, !5411, !5412, !5413, !5414}
!5407 = !DILocalVariable(name: "tp", arg: 1, scope: !5405, file: !3, line: 4294, type: !703)
!5408 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !5405, file: !3, line: 4294, type: !2991)
!5409 = !DILocalVariable(name: "data", arg: 3, scope: !5405, file: !3, line: 4294, type: !700)
!5410 = !DILocalVariable(name: "wi", scope: !5405, file: !3, line: 4296, type: !2369)
!5411 = !DILocalVariable(name: "id", scope: !5405, file: !3, line: 4297, type: !2095)
!5412 = !DILocalVariable(name: "st", scope: !5405, file: !3, line: 4298, type: !1645)
!5413 = !DILocalVariable(name: "n", scope: !5405, file: !3, line: 4299, type: !703)
!5414 = !DILocalVariable(name: "expr", scope: !5405, file: !3, line: 4300, type: !704)
!5415 = !DILocation(line: 0, scope: !5405)
!5416 = !DILocation(line: 4297, column: 47, scope: !5405)
!5417 = !DILocation(line: 4298, column: 34, scope: !5405)
!5418 = !DILocation(line: 4300, column: 15, scope: !5405)
!5419 = !DILocation(line: 4303, column: 8, scope: !5420)
!5420 = distinct !DILexicalBlock(scope: !5405, file: !3, line: 4303, column: 7)
!5421 = !DILocation(line: 4303, column: 25, scope: !5420)
!5422 = !DILocation(line: 4304, column: 8, scope: !5420)
!5423 = !DILocation(line: 4304, column: 12, scope: !5420)
!5424 = !DILocation(line: 4305, column: 7, scope: !5420)
!5425 = !DILocation(line: 4305, column: 27, scope: !5420)
!5426 = !DILocation(line: 4303, column: 7, scope: !5405)
!5427 = !DILocation(line: 4308, column: 46, scope: !5428)
!5428 = distinct !DILexicalBlock(scope: !5420, file: !3, line: 4306, column: 5)
!5429 = !DILocation(line: 4308, column: 20, scope: !5428)
!5430 = !DILocation(line: 4311, column: 11, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5428, file: !3, line: 4311, column: 11)
!5432 = !DILocation(line: 4311, column: 11, scope: !5428)
!5433 = !DILocation(line: 4312, column: 8, scope: !5431)
!5434 = !DILocation(line: 4312, column: 6, scope: !5431)
!5435 = !DILocation(line: 4312, column: 2, scope: !5431)
!5436 = !DILocation(line: 4313, column: 22, scope: !5428)
!5437 = !DILocation(line: 4314, column: 5, scope: !5428)
!5438 = !DILocation(line: 4315, column: 29, scope: !5439)
!5439 = distinct !DILexicalBlock(scope: !5420, file: !3, line: 4315, column: 12)
!5440 = !DILocation(line: 4316, column: 5, scope: !5439)
!5441 = !DILocation(line: 4316, column: 25, scope: !5439)
!5442 = !DILocation(line: 4317, column: 5, scope: !5439)
!5443 = !DILocation(line: 4317, column: 25, scope: !5439)
!5444 = !DILocation(line: 4315, column: 12, scope: !5420)
!5445 = !DILocation(line: 4318, column: 5, scope: !5439)
!5446 = !DILocation(line: 4319, column: 29, scope: !5447)
!5447 = distinct !DILexicalBlock(scope: !5439, file: !3, line: 4319, column: 12)
!5448 = !DILocation(line: 4319, column: 12, scope: !5439)
!5449 = !DILocation(line: 4325, column: 12, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5451, file: !3, line: 4325, column: 11)
!5451 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 4320, column: 5)
!5452 = !DILocation(line: 4325, column: 11, scope: !5451)
!5453 = !DILocation(line: 4327, column: 29, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 4326, column: 2)
!5455 = !DILocation(line: 4327, column: 27, scope: !5454)
!5456 = !DILocation(line: 4328, column: 27, scope: !5454)
!5457 = !DILocation(line: 4329, column: 2, scope: !5454)
!5458 = !DILocation(line: 4333, column: 3, scope: !5405)
!5459 = distinct !DISubprogram(name: "debug_find_tree", scope: !3, file: !3, line: 4435, type: !5460, scopeLine: 4436, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5462)
!5460 = !DISubroutineType(types: !5461)
!5461 = !{!695, !704, !704}
!5462 = !{!5463, !5464}
!5463 = !DILocalVariable(name: "top", arg: 1, scope: !5459, file: !3, line: 4435, type: !704)
!5464 = !DILocalVariable(name: "search", arg: 2, scope: !5459, file: !3, line: 4435, type: !704)
!5465 = !DILocation(line: 0, scope: !5459)
!5466 = !DILocation(line: 4437, column: 10, scope: !5459)
!5467 = !DILocation(line: 4437, column: 73, scope: !5459)
!5468 = !DILocation(line: 4437, column: 3, scope: !5459)
!5469 = distinct !DISubprogram(name: "debug_find_tree_1", scope: !3, file: !3, line: 4426, type: !2989, scopeLine: 4427, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5470)
!5470 = !{!5471, !5472, !5473}
!5471 = !DILocalVariable(name: "tp", arg: 1, scope: !5469, file: !3, line: 4426, type: !703)
!5472 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !5469, file: !3, line: 4426, type: !2991)
!5473 = !DILocalVariable(name: "data", arg: 3, scope: !5469, file: !3, line: 4426, type: !700)
!5474 = !DILocation(line: 0, scope: !5469)
!5475 = !DILocation(line: 4428, column: 7, scope: !5476)
!5476 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 4428, column: 7)
!5477 = !DILocation(line: 4428, column: 14, scope: !5476)
!5478 = !DILocation(line: 4428, column: 11, scope: !5476)
!5479 = !DILocation(line: 4428, column: 7, scope: !5469)
!5480 = !DILocation(line: 4432, column: 1, scope: !5469)
!5481 = distinct !DISubprogram(name: "copy_decl_for_dup_finish", scope: !3, file: !3, line: 4464, type: !5482, scopeLine: 4465, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5484)
!5482 = !DISubroutineType(types: !5483)
!5483 = !{!704, !2095, !704, !704}
!5484 = !{!5485, !5486, !5487}
!5485 = !DILocalVariable(name: "id", arg: 1, scope: !5481, file: !3, line: 4464, type: !2095)
!5486 = !DILocalVariable(name: "decl", arg: 2, scope: !5481, file: !3, line: 4464, type: !704)
!5487 = !DILocalVariable(name: "copy", arg: 3, scope: !5481, file: !3, line: 4464, type: !704)
!5488 = !DILocation(line: 0, scope: !5481)
!5489 = !DILocation(line: 4468, column: 28, scope: !5481)
!5490 = !DILocation(line: 4468, column: 3, scope: !5481)
!5491 = !DILocation(line: 4468, column: 26, scope: !5481)
!5492 = !DILocation(line: 4469, column: 27, scope: !5481)
!5493 = !DILocation(line: 4469, column: 25, scope: !5481)
!5494 = !DILocation(line: 4473, column: 33, scope: !5481)
!5495 = !DILocation(line: 4473, column: 3, scope: !5481)
!5496 = !DILocation(line: 4473, column: 31, scope: !5481)
!5497 = !DILocation(line: 4476, column: 7, scope: !5498)
!5498 = distinct !DILexicalBlock(scope: !5481, file: !3, line: 4476, column: 7)
!5499 = !DILocation(line: 4477, column: 7, scope: !5498)
!5500 = !DILocation(line: 4477, column: 11, scope: !5498)
!5501 = !DILocation(line: 4477, column: 30, scope: !5498)
!5502 = !DILocation(line: 4477, column: 34, scope: !5498)
!5503 = !DILocation(line: 4476, column: 7, scope: !5481)
!5504 = !DILocation(line: 4478, column: 5, scope: !5498)
!5505 = !DILocation(line: 4481, column: 20, scope: !5481)
!5506 = !DILocation(line: 4484, column: 8, scope: !5507)
!5507 = distinct !DILexicalBlock(scope: !5481, file: !3, line: 4484, column: 7)
!5508 = !DILocation(line: 4484, column: 7, scope: !5481)
!5509 = !DILocation(line: 4487, column: 39, scope: !5510)
!5510 = distinct !DILexicalBlock(scope: !5507, file: !3, line: 4487, column: 12)
!5511 = !DILocation(line: 4487, column: 32, scope: !5510)
!5512 = !DILocation(line: 4487, column: 12, scope: !5507)
!5513 = !DILocation(line: 4491, column: 12, scope: !5514)
!5514 = distinct !DILexicalBlock(scope: !5510, file: !3, line: 4491, column: 12)
!5515 = !DILocation(line: 4491, column: 12, scope: !5510)
!5516 = !DILocation(line: 4498, column: 31, scope: !5514)
!5517 = !DILocation(line: 4498, column: 5, scope: !5514)
!5518 = !DILocation(line: 4498, column: 25, scope: !5514)
!5519 = !DILocation(line: 4500, column: 3, scope: !5481)
!5520 = distinct !DISubprogram(name: "tree_versionable_function_p", scope: !3, file: !3, line: 4638, type: !4097, scopeLine: 4639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5521)
!5521 = !{!5522}
!5522 = !DILocalVariable(name: "fndecl", arg: 1, scope: !5520, file: !3, line: 4638, type: !704)
!5523 = !DILocation(line: 0, scope: !5520)
!5524 = !DILocation(line: 4640, column: 41, scope: !5520)
!5525 = !DILocation(line: 4640, column: 12, scope: !5520)
!5526 = !DILocation(line: 4641, column: 4, scope: !5520)
!5527 = !DILocation(line: 4641, column: 23, scope: !5520)
!5528 = !DILocation(line: 4641, column: 7, scope: !5520)
!5529 = !DILocation(line: 4641, column: 62, scope: !5520)
!5530 = !DILocation(line: 4640, column: 3, scope: !5520)
!5531 = distinct !DISubprogram(name: "copy_forbidden", scope: !3, file: !3, line: 2734, type: !5532, scopeLine: 2735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5534)
!5532 = !DISubroutineType(types: !5533)
!5533 = !{!701, !1414, !704}
!5534 = !{!5535, !5536, !5537, !5538, !5539, !5543}
!5535 = !DILocalVariable(name: "fun", arg: 1, scope: !5531, file: !3, line: 2734, type: !1414)
!5536 = !DILocalVariable(name: "fndecl", arg: 2, scope: !5531, file: !3, line: 2734, type: !704)
!5537 = !DILocalVariable(name: "reason", scope: !5531, file: !3, line: 2736, type: !701)
!5538 = !DILocalVariable(name: "step", scope: !5531, file: !3, line: 2737, type: !704)
!5539 = !DILocalVariable(name: "decl", scope: !5540, file: !3, line: 2758, type: !704)
!5540 = distinct !DILexicalBlock(scope: !5541, file: !3, line: 2757, column: 5)
!5541 = distinct !DILexicalBlock(scope: !5542, file: !3, line: 2756, column: 3)
!5542 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 2756, column: 3)
!5543 = !DILabel(scope: !5531, name: "fail", file: !3, line: 2774)
!5544 = !DILocation(line: 0, scope: !5531)
!5545 = !DILocation(line: 2736, column: 29, scope: !5531)
!5546 = !DILocation(line: 2740, column: 12, scope: !5547)
!5547 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 2740, column: 7)
!5548 = !DILocation(line: 2740, column: 7, scope: !5547)
!5549 = !DILocation(line: 2740, column: 7, scope: !5531)
!5550 = !DILocation(line: 2749, column: 12, scope: !5551)
!5551 = distinct !DILexicalBlock(scope: !5531, file: !3, line: 2749, column: 7)
!5552 = !DILocation(line: 2749, column: 7, scope: !5551)
!5553 = !DILocation(line: 2749, column: 7, scope: !5531)
!5554 = !DILocation(line: 2756, column: 20, scope: !5542)
!5555 = !DILocation(line: 0, scope: !5556)
!5556 = distinct !DILexicalBlock(scope: !5540, file: !3, line: 2760, column: 11)
!5557 = !DILocation(line: 2756, column: 8, scope: !5542)
!5558 = !DILocation(line: 2736, column: 15, scope: !5531)
!5559 = !DILocation(line: 0, scope: !5542)
!5560 = !DILocation(line: 2756, column: 3, scope: !5542)
!5561 = !DILocation(line: 2758, column: 19, scope: !5540)
!5562 = !DILocation(line: 0, scope: !5540)
!5563 = !DILocation(line: 2760, column: 11, scope: !5556)
!5564 = !DILocation(line: 2760, column: 28, scope: !5556)
!5565 = !DILocation(line: 2761, column: 4, scope: !5556)
!5566 = !DILocation(line: 2761, column: 7, scope: !5556)
!5567 = !DILocation(line: 2762, column: 4, scope: !5556)
!5568 = !DILocation(line: 2762, column: 8, scope: !5556)
!5569 = !DILocation(line: 2763, column: 4, scope: !5556)
!5570 = !DILocation(line: 2763, column: 7, scope: !5556)
!5571 = !DILocation(line: 2764, column: 4, scope: !5556)
!5572 = !DILocation(line: 2764, column: 7, scope: !5556)
!5573 = !DILocation(line: 2760, column: 11, scope: !5540)
!5574 = !DILocation(line: 2772, column: 5, scope: !5541)
!5575 = !DILocation(line: 2756, column: 46, scope: !5541)
!5576 = !DILocation(line: 2756, column: 3, scope: !5541)
!5577 = distinct !{!5577, !5560, !5578}
!5578 = !DILocation(line: 2772, column: 5, scope: !5542)
!5579 = !DILocation(line: 2776, column: 29, scope: !5531)
!5580 = !DILocation(line: 2775, column: 8, scope: !5531)
!5581 = !DILocation(line: 2774, column: 2, scope: !5531)
!5582 = !DILocation(line: 2775, column: 32, scope: !5531)
!5583 = !DILocation(line: 2777, column: 3, scope: !5531)
!5584 = !DILocation(line: 2778, column: 1, scope: !5531)
!5585 = distinct !DISubprogram(name: "tree_function_versioning", scope: !3, file: !3, line: 4759, type: !5586, scopeLine: 4762, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5588)
!5586 = !DISubroutineType(types: !5587)
!5587 = !{null, !704, !704, !2286, !695, !1642}
!5588 = !{!5589, !5590, !5591, !5592, !5593, !5594, !5595, !5596, !5597, !5598, !5599, !5600, !5601, !5602, !5603, !5604, !5605, !5606, !5609, !5610, !5615, !5618, !5623, !5626}
!5589 = !DILocalVariable(name: "old_decl", arg: 1, scope: !5585, file: !3, line: 4759, type: !704)
!5590 = !DILocalVariable(name: "new_decl", arg: 2, scope: !5585, file: !3, line: 4759, type: !704)
!5591 = !DILocalVariable(name: "tree_map", arg: 3, scope: !5585, file: !3, line: 4760, type: !2286)
!5592 = !DILocalVariable(name: "update_clones", arg: 4, scope: !5585, file: !3, line: 4761, type: !695)
!5593 = !DILocalVariable(name: "args_to_skip", arg: 5, scope: !5585, file: !3, line: 4761, type: !1642)
!5594 = !DILocalVariable(name: "old_version_node", scope: !5585, file: !3, line: 4763, type: !2102)
!5595 = !DILocalVariable(name: "new_version_node", scope: !5585, file: !3, line: 4764, type: !2102)
!5596 = !DILocalVariable(name: "id", scope: !5585, file: !3, line: 4765, type: !2096)
!5597 = !DILocalVariable(name: "p", scope: !5585, file: !3, line: 4766, type: !704)
!5598 = !DILocalVariable(name: "i", scope: !5585, file: !3, line: 4767, type: !7)
!5599 = !DILocalVariable(name: "replace_info", scope: !5585, file: !3, line: 4768, type: !2299)
!5600 = !DILocalVariable(name: "old_entry_block", scope: !5585, file: !3, line: 4769, type: !1584)
!5601 = !DILocalVariable(name: "bb", scope: !5585, file: !3, line: 4769, type: !1584)
!5602 = !DILocalVariable(name: "init_stmts", scope: !5585, file: !3, line: 4770, type: !2359)
!5603 = !DILocalVariable(name: "t_step", scope: !5585, file: !3, line: 4772, type: !704)
!5604 = !DILocalVariable(name: "old_current_function_decl", scope: !5585, file: !3, line: 4773, type: !704)
!5605 = !DILocalVariable(name: "vars", scope: !5585, file: !3, line: 4774, type: !704)
!5606 = !DILocalVariable(name: "old_transforms_to_apply", scope: !5607, file: !3, line: 4808, type: !2145)
!5607 = distinct !DILexicalBlock(scope: !5608, file: !3, line: 4807, column: 5)
!5608 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 4806, column: 7)
!5609 = !DILocalVariable(name: "i", scope: !5607, file: !3, line: 4809, type: !7)
!5610 = !DILocalVariable(name: "init", scope: !5611, file: !3, line: 4845, type: !1028)
!5611 = distinct !DILexicalBlock(scope: !5612, file: !3, line: 4844, column: 7)
!5612 = distinct !DILexicalBlock(scope: !5613, file: !3, line: 4843, column: 5)
!5613 = distinct !DILexicalBlock(scope: !5614, file: !3, line: 4843, column: 5)
!5614 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 4842, column: 7)
!5615 = !DILocalVariable(name: "op", scope: !5616, file: !3, line: 4849, type: !704)
!5616 = distinct !DILexicalBlock(scope: !5617, file: !3, line: 4848, column: 4)
!5617 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 4847, column: 6)
!5618 = !DILocalVariable(name: "var", scope: !5619, file: !3, line: 4891, type: !704)
!5619 = distinct !DILexicalBlock(scope: !5620, file: !3, line: 4890, column: 7)
!5620 = distinct !DILexicalBlock(scope: !5621, file: !3, line: 4888, column: 5)
!5621 = distinct !DILexicalBlock(scope: !5622, file: !3, line: 4888, column: 5)
!5622 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 4886, column: 7)
!5623 = !DILocalVariable(name: "res_decl", scope: !5624, file: !3, line: 4906, type: !703)
!5624 = distinct !DILexicalBlock(scope: !5625, file: !3, line: 4905, column: 5)
!5625 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 4904, column: 7)
!5626 = !DILocalVariable(name: "wi", scope: !5627, file: !3, line: 4925, type: !2370)
!5627 = distinct !DILexicalBlock(scope: !5628, file: !3, line: 4924, column: 5)
!5628 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 4923, column: 7)
!5629 = !DILocation(line: 0, scope: !5585)
!5630 = !DILocation(line: 4765, column: 3, scope: !5585)
!5631 = !DILocation(line: 4770, column: 3, scope: !5585)
!5632 = !DILocation(line: 4770, column: 36, scope: !5585)
!5633 = !DILocation(line: 4770, column: 23, scope: !5585)
!5634 = !DILocation(line: 4773, column: 36, scope: !5585)
!5635 = !DILocation(line: 4774, column: 3, scope: !5585)
!5636 = !DILocation(line: 4774, column: 8, scope: !5585)
!5637 = !DILocation(line: 4776, column: 3, scope: !5585)
!5638 = !DILocation(line: 4778, column: 3, scope: !5585)
!5639 = !DILocation(line: 4778, column: 36, scope: !5585)
!5640 = !DILocation(line: 4780, column: 22, scope: !5585)
!5641 = !DILocation(line: 4781, column: 22, scope: !5585)
!5642 = !DILocation(line: 4787, column: 5, scope: !5585)
!5643 = !DILocation(line: 4787, column: 18, scope: !5585)
!5644 = !DILocation(line: 4787, column: 3, scope: !5585)
!5645 = !DILocation(line: 4789, column: 3, scope: !5585)
!5646 = !DILocation(line: 4789, column: 30, scope: !5585)
!5647 = !DILocation(line: 4790, column: 37, scope: !5585)
!5648 = !DILocation(line: 4790, column: 3, scope: !5585)
!5649 = !DILocation(line: 4790, column: 35, scope: !5585)
!5650 = !DILocation(line: 4791, column: 42, scope: !5585)
!5651 = !DILocation(line: 4791, column: 3, scope: !5585)
!5652 = !DILocation(line: 4791, column: 40, scope: !5585)
!5653 = !DILocation(line: 4794, column: 3, scope: !5585)
!5654 = !DILocation(line: 4797, column: 27, scope: !5585)
!5655 = !DILocation(line: 4797, column: 6, scope: !5585)
!5656 = !DILocation(line: 4797, column: 25, scope: !5585)
!5657 = !DILocation(line: 4799, column: 17, scope: !5585)
!5658 = !DILocation(line: 4799, column: 6, scope: !5585)
!5659 = !DILocation(line: 4799, column: 15, scope: !5585)
!5660 = !DILocation(line: 4800, column: 6, scope: !5585)
!5661 = !DILocation(line: 4800, column: 16, scope: !5585)
!5662 = !DILocation(line: 4801, column: 6, scope: !5585)
!5663 = !DILocation(line: 4801, column: 13, scope: !5585)
!5664 = !DILocation(line: 4802, column: 6, scope: !5585)
!5665 = !DILocation(line: 4802, column: 13, scope: !5585)
!5666 = !DILocation(line: 4803, column: 6, scope: !5585)
!5667 = !DILocation(line: 4803, column: 15, scope: !5585)
!5668 = !DILocation(line: 4804, column: 6, scope: !5585)
!5669 = !DILocation(line: 4804, column: 15, scope: !5585)
!5670 = !DILocation(line: 4805, column: 17, scope: !5585)
!5671 = !DILocation(line: 4805, column: 6, scope: !5585)
!5672 = !DILocation(line: 4805, column: 15, scope: !5585)
!5673 = !DILocation(line: 4806, column: 20, scope: !5608)
!5674 = !DILocation(line: 4806, column: 7, scope: !5608)
!5675 = !DILocation(line: 4806, column: 7, scope: !5585)
!5676 = !DILocation(line: 4808, column: 71, scope: !5607)
!5677 = !DILocation(line: 0, scope: !5607)
!5678 = !DILocation(line: 4811, column: 46, scope: !5607)
!5679 = !DILocation(line: 4811, column: 10, scope: !5607)
!5680 = !DILocation(line: 4811, column: 20, scope: !5607)
!5681 = !DILocation(line: 4811, column: 44, scope: !5607)
!5682 = !DILocation(line: 0, scope: !5683)
!5683 = distinct !DILexicalBlock(scope: !5684, file: !3, line: 4813, column: 7)
!5684 = distinct !DILexicalBlock(scope: !5607, file: !3, line: 4813, column: 7)
!5685 = !DILocation(line: 4813, column: 12, scope: !5684)
!5686 = !DILocation(line: 0, scope: !5684)
!5687 = !DILocation(line: 4813, column: 23, scope: !5683)
!5688 = !DILocation(line: 4813, column: 21, scope: !5683)
!5689 = !DILocation(line: 4813, column: 7, scope: !5684)
!5690 = !DILocation(line: 4814, column: 9, scope: !5683)
!5691 = !DILocation(line: 4813, column: 76, scope: !5683)
!5692 = !DILocation(line: 4813, column: 7, scope: !5683)
!5693 = distinct !{!5693, !5689, !5694}
!5694 = !DILocation(line: 4814, column: 9, scope: !5684)
!5695 = !DILocation(line: 4828, column: 21, scope: !5585)
!5696 = !DILocation(line: 4820, column: 6, scope: !5585)
!5697 = !DILocation(line: 4820, column: 16, scope: !5585)
!5698 = !DILocation(line: 4822, column: 7, scope: !5585)
!5699 = !DILocation(line: 4821, column: 6, scope: !5585)
!5700 = !DILocation(line: 4822, column: 5, scope: !5585)
!5701 = !DILocation(line: 4823, column: 6, scope: !5585)
!5702 = !DILocation(line: 4823, column: 24, scope: !5585)
!5703 = !DILocation(line: 4824, column: 6, scope: !5585)
!5704 = !DILocation(line: 4824, column: 33, scope: !5585)
!5705 = !DILocation(line: 4825, column: 6, scope: !5585)
!5706 = !DILocation(line: 4825, column: 34, scope: !5585)
!5707 = !DILocation(line: 4827, column: 25, scope: !5585)
!5708 = !DILocation(line: 4831, column: 23, scope: !5585)
!5709 = !DILocation(line: 4830, column: 3, scope: !5585)
!5710 = !DILocation(line: 4832, column: 14, scope: !5585)
!5711 = !DILocation(line: 4832, column: 3, scope: !5585)
!5712 = !DILocation(line: 4835, column: 7, scope: !5585)
!5713 = !DILocation(line: 4835, column: 40, scope: !5585)
!5714 = !DILocation(line: 4836, column: 7, scope: !5715)
!5715 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 4836, column: 7)
!5716 = !DILocation(line: 4836, column: 7, scope: !5585)
!5717 = !DILocation(line: 4838, column: 7, scope: !5715)
!5718 = !DILocation(line: 4837, column: 5, scope: !5715)
!5719 = !DILocation(line: 4837, column: 38, scope: !5715)
!5720 = !DILocation(line: 4837, column: 56, scope: !5715)
!5721 = !DILocation(line: 4842, column: 7, scope: !5614)
!5722 = !DILocation(line: 4842, column: 7, scope: !5585)
!5723 = !DILocation(line: 0, scope: !5612)
!5724 = !DILocation(line: 4843, column: 5, scope: !5613)
!5725 = !DILocation(line: 0, scope: !5613)
!5726 = !DILocation(line: 4843, column: 21, scope: !5612)
!5727 = !DILocation(line: 4843, column: 19, scope: !5612)
!5728 = !DILocation(line: 4846, column: 17, scope: !5611)
!5729 = !DILocation(line: 4847, column: 20, scope: !5617)
!5730 = !DILocation(line: 4847, column: 6, scope: !5617)
!5731 = !DILocation(line: 4847, column: 6, scope: !5611)
!5732 = !DILocation(line: 4849, column: 30, scope: !5616)
!5733 = !DILocation(line: 0, scope: !5616)
!5734 = !DILocation(line: 4851, column: 6, scope: !5616)
!5735 = !DILocation(line: 4853, column: 10, scope: !5736)
!5736 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 4853, column: 10)
!5737 = !DILocation(line: 4853, column: 25, scope: !5736)
!5738 = !DILocation(line: 4853, column: 10, scope: !5616)
!5739 = !DILocation(line: 4854, column: 13, scope: !5736)
!5740 = !DILocation(line: 0, scope: !5741)
!5741 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 4856, column: 10)
!5742 = !DILocation(line: 4856, column: 10, scope: !5741)
!5743 = !DILocation(line: 4854, column: 8, scope: !5736)
!5744 = !DILocation(line: 4856, column: 25, scope: !5741)
!5745 = !DILocation(line: 4856, column: 10, scope: !5616)
!5746 = !DILocation(line: 4859, column: 3, scope: !5747)
!5747 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 4857, column: 8)
!5748 = !DILocation(line: 0, scope: !5747)
!5749 = !DILocation(line: 4859, column: 10, scope: !5747)
!5750 = distinct !{!5750, !5746, !5751}
!5751 = !DILocation(line: 4860, column: 10, scope: !5747)
!5752 = !DILocation(line: 4861, column: 7, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5747, file: !3, line: 4861, column: 7)
!5754 = !DILocation(line: 4861, column: 22, scope: !5753)
!5755 = !DILocation(line: 4861, column: 7, scope: !5747)
!5756 = !DILocation(line: 4862, column: 5, scope: !5753)
!5757 = !DILocation(line: 4864, column: 6, scope: !5616)
!5758 = !DILocation(line: 4865, column: 53, scope: !5616)
!5759 = !DILocation(line: 4866, column: 31, scope: !5616)
!5760 = !DILocation(line: 4866, column: 44, scope: !5616)
!5761 = !DILocation(line: 4865, column: 13, scope: !5616)
!5762 = !DILocation(line: 0, scope: !5611)
!5763 = !DILocation(line: 4869, column: 10, scope: !5764)
!5764 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 4869, column: 10)
!5765 = !DILocation(line: 4869, column: 10, scope: !5616)
!5766 = !DILocation(line: 4870, column: 8, scope: !5764)
!5767 = !DILocation(line: 4843, column: 64, scope: !5612)
!5768 = !DILocation(line: 4843, column: 5, scope: !5612)
!5769 = distinct !{!5769, !5724, !5770}
!5770 = !DILocation(line: 4872, column: 7, scope: !5613)
!5771 = !DILocation(line: 4874, column: 7, scope: !5772)
!5772 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 4874, column: 7)
!5773 = !DILocation(line: 4874, column: 33, scope: !5772)
!5774 = !DILocation(line: 4874, column: 7, scope: !5585)
!5775 = !DILocation(line: 4876, column: 7, scope: !5772)
!5776 = !DILocation(line: 4875, column: 5, scope: !5772)
!5777 = !DILocation(line: 4875, column: 31, scope: !5772)
!5778 = !DILocation(line: 4879, column: 43, scope: !5585)
!5779 = !DILocation(line: 4879, column: 29, scope: !5585)
!5780 = !DILocation(line: 4879, column: 3, scope: !5585)
!5781 = !DILocation(line: 4879, column: 27, scope: !5585)
!5782 = !DILocation(line: 4882, column: 21, scope: !5585)
!5783 = !DILocation(line: 4882, column: 3, scope: !5585)
!5784 = !DILocation(line: 4884, column: 24, scope: !5585)
!5785 = !DILocation(line: 4884, column: 49, scope: !5585)
!5786 = !DILocation(line: 4884, column: 3, scope: !5585)
!5787 = !DILocation(line: 4886, column: 7, scope: !5622)
!5788 = !DILocation(line: 4886, column: 40, scope: !5622)
!5789 = !DILocation(line: 4886, column: 52, scope: !5622)
!5790 = !DILocation(line: 4886, column: 7, scope: !5585)
!5791 = !DILocation(line: 4888, column: 10, scope: !5621)
!5792 = !DILocation(line: 0, scope: !5621)
!5793 = !DILocation(line: 4888, column: 5, scope: !5621)
!5794 = !DILocation(line: 4891, column: 13, scope: !5619)
!5795 = !DILocation(line: 0, scope: !5619)
!5796 = !DILocation(line: 4892, column: 6, scope: !5797)
!5797 = distinct !DILexicalBlock(scope: !5619, file: !3, line: 4892, column: 6)
!5798 = !DILocation(line: 4892, column: 24, scope: !5797)
!5799 = !DILocation(line: 4892, column: 28, scope: !5797)
!5800 = !DILocation(line: 4892, column: 6, scope: !5619)
!5801 = !DILocation(line: 4893, column: 24, scope: !5797)
!5802 = !DILocation(line: 4893, column: 4, scope: !5797)
!5803 = !DILocation(line: 4893, column: 10, scope: !5797)
!5804 = !DILocation(line: 4893, column: 22, scope: !5797)
!5805 = !DILocation(line: 4894, column: 12, scope: !5806)
!5806 = distinct !DILexicalBlock(scope: !5797, file: !3, line: 4894, column: 11)
!5807 = !DILocation(line: 4894, column: 11, scope: !5797)
!5808 = !DILocation(line: 4896, column: 6, scope: !5806)
!5809 = !DILocation(line: 4895, column: 4, scope: !5806)
!5810 = !DILocation(line: 4895, column: 10, scope: !5806)
!5811 = !DILocation(line: 4895, column: 22, scope: !5806)
!5812 = !DILocation(line: 4889, column: 20, scope: !5620)
!5813 = !DILocation(line: 4888, column: 5, scope: !5620)
!5814 = distinct !{!5814, !5793, !5815}
!5815 = !DILocation(line: 4898, column: 7, scope: !5621)
!5816 = !DILocation(line: 4901, column: 36, scope: !5585)
!5817 = !DILocation(line: 4902, column: 7, scope: !5585)
!5818 = !DILocation(line: 4902, column: 24, scope: !5585)
!5819 = !DILocation(line: 4901, column: 3, scope: !5585)
!5820 = !DILocation(line: 4904, column: 7, scope: !5625)
!5821 = !DILocation(line: 4904, column: 30, scope: !5625)
!5822 = !DILocation(line: 4904, column: 7, scope: !5585)
!5823 = !DILocation(line: 0, scope: !5624)
!5824 = !DILocation(line: 4907, column: 32, scope: !5624)
!5825 = !DILocation(line: 4907, column: 7, scope: !5624)
!5826 = !DILocation(line: 4907, column: 30, scope: !5624)
!5827 = !DILocation(line: 4908, column: 18, scope: !5624)
!5828 = !DILocation(line: 4908, column: 7, scope: !5624)
!5829 = !DILocation(line: 4909, column: 5, scope: !5624)
!5830 = !DILocation(line: 4912, column: 3, scope: !5585)
!5831 = !DILocation(line: 4917, column: 38, scope: !5585)
!5832 = !DILocation(line: 4917, column: 20, scope: !5585)
!5833 = !DILocation(line: 4917, column: 8, scope: !5585)
!5834 = !DILocation(line: 4918, column: 3, scope: !5585)
!5835 = !DILocation(line: 4918, column: 10, scope: !5585)
!5836 = !DILocation(line: 4919, column: 32, scope: !5585)
!5837 = !DILocation(line: 4919, column: 5, scope: !5585)
!5838 = distinct !{!5838, !5834, !5839}
!5839 = !DILocation(line: 4919, column: 60, scope: !5585)
!5840 = !DILocation(line: 4920, column: 3, scope: !5585)
!5841 = !DILocation(line: 4923, column: 7, scope: !5628)
!5842 = !DILocation(line: 4923, column: 13, scope: !5628)
!5843 = !DILocation(line: 4923, column: 7, scope: !5585)
!5844 = !DILocation(line: 4925, column: 7, scope: !5627)
!5845 = !DILocation(line: 4927, column: 7, scope: !5627)
!5846 = !DILocation(line: 4928, column: 10, scope: !5627)
!5847 = !DILocation(line: 4928, column: 15, scope: !5627)
!5848 = !DILocation(line: 4929, column: 7, scope: !5627)
!5849 = !DILocation(line: 4930, column: 5, scope: !5628)
!5850 = !DILocation(line: 4930, column: 5, scope: !5627)
!5851 = !DILocation(line: 4933, column: 27, scope: !5585)
!5852 = !DILocation(line: 4933, column: 3, scope: !5585)
!5853 = !DILocation(line: 4934, column: 10, scope: !5854)
!5854 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 4934, column: 7)
!5855 = !DILocation(line: 4934, column: 7, scope: !5854)
!5856 = !DILocation(line: 4934, column: 7, scope: !5585)
!5857 = !DILocation(line: 4935, column: 5, scope: !5854)
!5858 = !DILocation(line: 4936, column: 3, scope: !5585)
!5859 = !DILocation(line: 4937, column: 3, scope: !5585)
!5860 = !DILocation(line: 4939, column: 33, scope: !5585)
!5861 = !DILocation(line: 4939, column: 3, scope: !5585)
!5862 = !DILocation(line: 4940, column: 27, scope: !5585)
!5863 = !DILocation(line: 4940, column: 3, scope: !5585)
!5864 = !DILocation(line: 4941, column: 3, scope: !5585)
!5865 = !DILocation(line: 4942, column: 3, scope: !5585)
!5866 = !DILocation(line: 4943, column: 3, scope: !5585)
!5867 = !DILocation(line: 4944, column: 3, scope: !5585)
!5868 = !DILocation(line: 4945, column: 3, scope: !5585)
!5869 = !DILocation(line: 4947, column: 3, scope: !5585)
!5870 = !DILocation(line: 4948, column: 3, scope: !5585)
!5871 = !DILocation(line: 4949, column: 3, scope: !5585)
!5872 = !DILocation(line: 4950, column: 25, scope: !5585)
!5873 = !DILocation(line: 4951, column: 3, scope: !5585)
!5874 = !DILocation(line: 4954, column: 1, scope: !5585)
!5875 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !597, file: !597, line: 34, type: !5876, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5878)
!5876 = !DISubroutineType(types: !5877)
!5877 = !{!2359, !696}
!5878 = !{!5879}
!5879 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5875, file: !597, line: 34, type: !696)
!5880 = !DILocation(line: 0, scope: !5875)
!5881 = !DILocation(line: 34, column: 1, scope: !5875)
!5882 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_heap_copy", scope: !1416, file: !1416, line: 177, type: !5883, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5886)
!5883 = !DISubroutineType(types: !5884)
!5884 = !{!2145, !5885}
!5885 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2150, size: 64)
!5886 = !{!5887, !5888, !5889}
!5887 = !DILocalVariable(name: "vec_", arg: 1, scope: !5882, file: !1416, line: 177, type: !5885)
!5888 = !DILocalVariable(name: "len_", scope: !5882, file: !1416, line: 177, type: !1172)
!5889 = !DILocalVariable(name: "new_vec_", scope: !5882, file: !1416, line: 177, type: !2145)
!5890 = !DILocation(line: 0, scope: !5882)
!5891 = !DILocation(line: 177, column: 1, scope: !5882)
!5892 = !DILocation(line: 177, column: 1, scope: !5893)
!5893 = distinct !DILexicalBlock(scope: !5882, file: !1416, line: 177, column: 1)
!5894 = !DILocation(line: 177, column: 1, scope: !5895)
!5895 = distinct !DILexicalBlock(scope: !5893, file: !1416, line: 177, column: 1)
!5896 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_base_length", scope: !1416, file: !1416, line: 176, type: !5897, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5901)
!5897 = !DISubroutineType(types: !5898)
!5898 = !{!7, !5899}
!5899 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5900, size: 64)
!5900 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2150)
!5901 = !{!5902}
!5902 = !DILocalVariable(name: "vec_", arg: 1, scope: !5896, file: !1416, line: 176, type: !5899)
!5903 = !DILocation(line: 0, scope: !5896)
!5904 = !DILocation(line: 176, column: 1, scope: !5896)
!5905 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_heap_safe_push", scope: !1416, file: !1416, line: 177, type: !5906, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5910)
!5906 = !DISubroutineType(types: !5907)
!5907 = !{!5908, !5909, !2157}
!5908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2157, size: 64)
!5909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2145, size: 64)
!5910 = !{!5911, !5912}
!5911 = !DILocalVariable(name: "vec_", arg: 1, scope: !5905, file: !1416, line: 177, type: !5909)
!5912 = !DILocalVariable(name: "obj_", arg: 2, scope: !5905, file: !1416, line: 177, type: !2157)
!5913 = !DILocation(line: 0, scope: !5905)
!5914 = !DILocation(line: 177, column: 1, scope: !5905)
!5915 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_base_index", scope: !1416, file: !1416, line: 176, type: !5916, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5918)
!5916 = !DISubroutineType(types: !5917)
!5917 = !{!2157, !5899, !7}
!5918 = !{!5919, !5920}
!5919 = !DILocalVariable(name: "vec_", arg: 1, scope: !5915, file: !1416, line: 176, type: !5899)
!5920 = !DILocalVariable(name: "ix_", arg: 2, scope: !5915, file: !1416, line: 176, type: !7)
!5921 = !DILocation(line: 0, scope: !5915)
!5922 = !DILocation(line: 176, column: 1, scope: !5915)
!5923 = distinct !DISubprogram(name: "initialize_cfun", scope: !3, file: !3, line: 1971, type: !5924, scopeLine: 1972, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5926)
!5924 = !DISubroutineType(types: !5925)
!5925 = !{null, !704, !704, !1238}
!5926 = !{!5927, !5928, !5929, !5930, !5931}
!5927 = !DILocalVariable(name: "new_fndecl", arg: 1, scope: !5923, file: !3, line: 1971, type: !704)
!5928 = !DILocalVariable(name: "callee_fndecl", arg: 2, scope: !5923, file: !3, line: 1971, type: !704)
!5929 = !DILocalVariable(name: "count", arg: 3, scope: !5923, file: !3, line: 1971, type: !1238)
!5930 = !DILocalVariable(name: "src_cfun", scope: !5923, file: !3, line: 1973, type: !1414)
!5931 = !DILocalVariable(name: "count_scale", scope: !5923, file: !3, line: 1974, type: !1238)
!5932 = !DILocation(line: 0, scope: !5923)
!5933 = !DILocation(line: 1973, column: 31, scope: !5923)
!5934 = !DILocation(line: 1976, column: 7, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 1976, column: 7)
!5936 = !DILocation(line: 1976, column: 48, scope: !5935)
!5937 = !DILocation(line: 1976, column: 7, scope: !5923)
!5938 = !DILocation(line: 1977, column: 37, scope: !5935)
!5939 = !DILocation(line: 1978, column: 6, scope: !5935)
!5940 = !DILocation(line: 1977, column: 5, scope: !5935)
!5941 = !DILocation(line: 0, scope: !5935)
!5942 = !DILocation(line: 1983, column: 3, scope: !5923)
!5943 = !DILocation(line: 1986, column: 3, scope: !5923)
!5944 = !DILocation(line: 1989, column: 3, scope: !5923)
!5945 = !DILocation(line: 1990, column: 3, scope: !5923)
!5946 = !DILocation(line: 1991, column: 3, scope: !5923)
!5947 = !DILocation(line: 1992, column: 3, scope: !5923)
!5948 = !DILocation(line: 1995, column: 3, scope: !5923)
!5949 = !DILocation(line: 2009, column: 3, scope: !5923)
!5950 = !DILocation(line: 1995, column: 39, scope: !5923)
!5951 = !DILocation(line: 1995, column: 9, scope: !5923)
!5952 = !DILocation(line: 1995, column: 27, scope: !5923)
!5953 = !DILocation(line: 1996, column: 45, scope: !5923)
!5954 = !DILocation(line: 1996, column: 9, scope: !5923)
!5955 = !DILocation(line: 1996, column: 33, scope: !5923)
!5956 = !DILocation(line: 1997, column: 40, scope: !5923)
!5957 = !DILocation(line: 1997, column: 9, scope: !5923)
!5958 = !DILocation(line: 1997, column: 28, scope: !5923)
!5959 = !DILocation(line: 1998, column: 37, scope: !5923)
!5960 = !DILocation(line: 1998, column: 9, scope: !5923)
!5961 = !DILocation(line: 1998, column: 25, scope: !5923)
!5962 = !DILocation(line: 1999, column: 35, scope: !5923)
!5963 = !DILocation(line: 1999, column: 9, scope: !5923)
!5964 = !DILocation(line: 1999, column: 23, scope: !5923)
!5965 = !DILocation(line: 2000, column: 38, scope: !5923)
!5966 = !DILocation(line: 2000, column: 9, scope: !5923)
!5967 = !DILocation(line: 2000, column: 26, scope: !5923)
!5968 = !DILocation(line: 2001, column: 38, scope: !5923)
!5969 = !DILocation(line: 2001, column: 26, scope: !5923)
!5970 = !DILocation(line: 2002, column: 40, scope: !5923)
!5971 = !DILocation(line: 2002, column: 28, scope: !5923)
!5972 = !DILocation(line: 2003, column: 40, scope: !5923)
!5973 = !DILocation(line: 2003, column: 28, scope: !5923)
!5974 = !DILocation(line: 2004, column: 28, scope: !5923)
!5975 = !DILocation(line: 2004, column: 16, scope: !5923)
!5976 = !DILocation(line: 2005, column: 47, scope: !5923)
!5977 = !DILocation(line: 2005, column: 35, scope: !5923)
!5978 = !DILocation(line: 2006, column: 36, scope: !5923)
!5979 = !DILocation(line: 2006, column: 24, scope: !5923)
!5980 = !DILocation(line: 2007, column: 36, scope: !5923)
!5981 = !DILocation(line: 2007, column: 24, scope: !5923)
!5982 = !DILocation(line: 2008, column: 40, scope: !5923)
!5983 = !DILocation(line: 2008, column: 28, scope: !5923)
!5984 = !DILocation(line: 2009, column: 40, scope: !5923)
!5985 = !DILocation(line: 2009, column: 28, scope: !5923)
!5986 = !DILocation(line: 2011, column: 3, scope: !5923)
!5987 = !DILocation(line: 2013, column: 40, scope: !5923)
!5988 = !DILocation(line: 2013, column: 3, scope: !5923)
!5989 = !DILocation(line: 2013, column: 38, scope: !5923)
!5990 = !DILocation(line: 2015, column: 6, scope: !5923)
!5991 = !DILocation(line: 2015, column: 47, scope: !5923)
!5992 = !DILocation(line: 2015, column: 53, scope: !5923)
!5993 = !DILocation(line: 2015, column: 67, scope: !5923)
!5994 = !DILocation(line: 2014, column: 3, scope: !5923)
!5995 = !DILocation(line: 2014, column: 20, scope: !5923)
!5996 = !DILocation(line: 2014, column: 26, scope: !5923)
!5997 = !DILocation(line: 2018, column: 7, scope: !5923)
!5998 = !DILocation(line: 2018, column: 48, scope: !5923)
!5999 = !DILocation(line: 2017, column: 3, scope: !5923)
!6000 = !DILocation(line: 2017, column: 20, scope: !5923)
!6001 = !DILocation(line: 2018, column: 5, scope: !5923)
!6002 = !DILocation(line: 2020, column: 6, scope: !5923)
!6003 = !DILocation(line: 2020, column: 46, scope: !5923)
!6004 = !DILocation(line: 2020, column: 52, scope: !5923)
!6005 = !DILocation(line: 2020, column: 66, scope: !5923)
!6006 = !DILocation(line: 2019, column: 3, scope: !5923)
!6007 = !DILocation(line: 2019, column: 19, scope: !5923)
!6008 = !DILocation(line: 2019, column: 25, scope: !5923)
!6009 = !DILocation(line: 2023, column: 5, scope: !5923)
!6010 = !DILocation(line: 2023, column: 45, scope: !5923)
!6011 = !DILocation(line: 2022, column: 3, scope: !5923)
!6012 = !DILocation(line: 2022, column: 19, scope: !5923)
!6013 = !DILocation(line: 2022, column: 29, scope: !5923)
!6014 = !DILocation(line: 2024, column: 17, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 2024, column: 7)
!6016 = !DILocation(line: 2024, column: 7, scope: !6015)
!6017 = !DILocation(line: 2024, column: 7, scope: !5923)
!6018 = !DILocation(line: 2025, column: 5, scope: !6015)
!6019 = !DILocation(line: 2027, column: 17, scope: !6020)
!6020 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 2027, column: 7)
!6021 = !DILocation(line: 2027, column: 7, scope: !6020)
!6022 = !DILocation(line: 2027, column: 7, scope: !5923)
!6023 = !DILocation(line: 2029, column: 22, scope: !6024)
!6024 = distinct !DILexicalBlock(scope: !6020, file: !3, line: 2028, column: 5)
!6025 = !DILocation(line: 2029, column: 7, scope: !6024)
!6026 = !DILocation(line: 2030, column: 7, scope: !6024)
!6027 = !DILocation(line: 2030, column: 13, scope: !6024)
!6028 = !DILocation(line: 2030, column: 24, scope: !6024)
!6029 = !DILocation(line: 2030, column: 33, scope: !6024)
!6030 = !DILocation(line: 2031, column: 7, scope: !6024)
!6031 = !DILocation(line: 2032, column: 5, scope: !6024)
!6032 = !DILocation(line: 2033, column: 3, scope: !5923)
!6033 = !DILocation(line: 2034, column: 1, scope: !5923)
!6034 = distinct !DISubprogram(name: "copy_static_chain", scope: !3, file: !3, line: 4619, type: !2879, scopeLine: 4620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6035)
!6035 = !{!6036, !6037, !6038, !6039, !6040}
!6036 = !DILocalVariable(name: "static_chain", arg: 1, scope: !6034, file: !3, line: 4619, type: !704)
!6037 = !DILocalVariable(name: "id", arg: 2, scope: !6034, file: !3, line: 4619, type: !2095)
!6038 = !DILocalVariable(name: "chain_copy", scope: !6034, file: !3, line: 4621, type: !703)
!6039 = !DILocalVariable(name: "pvar", scope: !6034, file: !3, line: 4621, type: !703)
!6040 = !DILocalVariable(name: "new_tree", scope: !6041, file: !3, line: 4626, type: !704)
!6041 = distinct !DILexicalBlock(scope: !6042, file: !3, line: 4625, column: 5)
!6042 = distinct !DILexicalBlock(scope: !6043, file: !3, line: 4624, column: 3)
!6043 = distinct !DILexicalBlock(scope: !6034, file: !3, line: 4624, column: 3)
!6044 = !DILocation(line: 0, scope: !6034)
!6045 = !DILocation(line: 4624, column: 8, scope: !6043)
!6046 = !DILocation(line: 4624, column: 27, scope: !6042)
!6047 = !DILocation(line: 0, scope: !6043)
!6048 = !DILocation(line: 4624, column: 3, scope: !6043)
!6049 = !DILocation(line: 4626, column: 23, scope: !6041)
!6050 = !DILocation(line: 0, scope: !6041)
!6051 = !DILocation(line: 4627, column: 18, scope: !6041)
!6052 = !DILocation(line: 4627, column: 7, scope: !6041)
!6053 = !DILocation(line: 4628, column: 31, scope: !6041)
!6054 = !DILocation(line: 4628, column: 7, scope: !6041)
!6055 = !DILocation(line: 4628, column: 29, scope: !6041)
!6056 = !DILocation(line: 4629, column: 13, scope: !6041)
!6057 = !DILocation(line: 4624, column: 3, scope: !6042)
!6058 = distinct !{!6058, !6048, !6059}
!6059 = !DILocation(line: 4630, column: 5, scope: !6043)
!6060 = !DILocation(line: 4631, column: 10, scope: !6034)
!6061 = !DILocation(line: 4631, column: 3, scope: !6034)
!6062 = distinct !DISubprogram(name: "VEC_ipa_replace_map_p_base_length", scope: !385, file: !385, line: 168, type: !6063, scopeLine: 168, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6067)
!6063 = !DISubroutineType(types: !6064)
!6064 = !{!7, !6065}
!6065 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6066, size: 64)
!6066 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2291)
!6067 = !{!6068}
!6068 = !DILocalVariable(name: "vec_", arg: 1, scope: !6062, file: !385, line: 168, type: !6065)
!6069 = !DILocation(line: 0, scope: !6062)
!6070 = !DILocation(line: 168, column: 1, scope: !6062)
!6071 = distinct !DISubprogram(name: "VEC_ipa_replace_map_p_base_index", scope: !385, file: !385, line: 168, type: !6072, scopeLine: 168, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6074)
!6072 = !DISubroutineType(types: !6073)
!6073 = !{!2298, !6065, !7}
!6074 = !{!6075, !6076}
!6075 = !DILocalVariable(name: "vec_", arg: 1, scope: !6071, file: !385, line: 168, type: !6065)
!6076 = !DILocalVariable(name: "ix_", arg: 2, scope: !6071, file: !385, line: 168, type: !7)
!6077 = !DILocation(line: 0, scope: !6071)
!6078 = !DILocation(line: 168, column: 1, scope: !6071)
!6079 = distinct !DISubprogram(name: "handled_component_p", scope: !135, file: !135, line: 4551, type: !6080, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6083)
!6080 = !DISubroutineType(types: !6081)
!6081 = !{!695, !6082}
!6082 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !705, line: 59, baseType: !2365)
!6083 = !{!6084}
!6084 = !DILocalVariable(name: "t", arg: 1, scope: !6079, file: !135, line: 4551, type: !6082)
!6085 = !DILocation(line: 0, scope: !6079)
!6086 = !DILocation(line: 4553, column: 11, scope: !6079)
!6087 = !DILocation(line: 4553, column: 3, scope: !6079)
!6088 = !DILocation(line: 4565, column: 7, scope: !6089)
!6089 = distinct !DILexicalBlock(scope: !6079, file: !135, line: 4554, column: 5)
!6090 = !DILocation(line: 0, scope: !6089)
!6091 = !DILocation(line: 4567, column: 1, scope: !6079)
!6092 = distinct !DISubprogram(name: "setup_one_parameter", scope: !3, file: !3, line: 2338, type: !6093, scopeLine: 2340, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6095)
!6093 = !DISubroutineType(types: !6094)
!6094 = !{!1028, !2095, !704, !704, !704, !1584, !703}
!6095 = !{!6096, !6097, !6098, !6099, !6100, !6101, !6102, !6103, !6104, !6105}
!6096 = !DILocalVariable(name: "id", arg: 1, scope: !6092, file: !3, line: 2338, type: !2095)
!6097 = !DILocalVariable(name: "p", arg: 2, scope: !6092, file: !3, line: 2338, type: !704)
!6098 = !DILocalVariable(name: "value", arg: 3, scope: !6092, file: !3, line: 2338, type: !704)
!6099 = !DILocalVariable(name: "fn", arg: 4, scope: !6092, file: !3, line: 2338, type: !704)
!6100 = !DILocalVariable(name: "bb", arg: 5, scope: !6092, file: !3, line: 2339, type: !1584)
!6101 = !DILocalVariable(name: "vars", arg: 6, scope: !6092, file: !3, line: 2339, type: !703)
!6102 = !DILocalVariable(name: "init_stmt", scope: !6092, file: !3, line: 2341, type: !1028)
!6103 = !DILocalVariable(name: "var", scope: !6092, file: !3, line: 2342, type: !704)
!6104 = !DILocalVariable(name: "rhs", scope: !6092, file: !3, line: 2343, type: !704)
!6105 = !DILocalVariable(name: "def", scope: !6092, file: !3, line: 2344, type: !704)
!6106 = !DILocation(line: 0, scope: !6092)
!6107 = !DILocation(line: 2344, column: 32, scope: !6092)
!6108 = !DILocation(line: 2344, column: 15, scope: !6092)
!6109 = !DILocation(line: 2345, column: 34, scope: !6092)
!6110 = !DILocation(line: 2345, column: 10, scope: !6092)
!6111 = !DILocation(line: 2347, column: 7, scope: !6112)
!6112 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 2347, column: 7)
!6113 = !DILocation(line: 2348, column: 19, scope: !6112)
!6114 = !DILocation(line: 2348, column: 16, scope: !6112)
!6115 = !DILocation(line: 2348, column: 7, scope: !6112)
!6116 = !DILocation(line: 2349, column: 38, scope: !6112)
!6117 = !DILocation(line: 2349, column: 53, scope: !6112)
!6118 = !DILocation(line: 2349, column: 11, scope: !6112)
!6119 = !DILocation(line: 2347, column: 7, scope: !6092)
!6120 = !DILocation(line: 2351, column: 31, scope: !6121)
!6121 = distinct !DILexicalBlock(scope: !6122, file: !3, line: 2351, column: 11)
!6122 = distinct !DILexicalBlock(scope: !6112, file: !3, line: 2350, column: 5)
!6123 = !DILocation(line: 2351, column: 11, scope: !6121)
!6124 = !DILocation(line: 0, scope: !6121)
!6125 = !DILocation(line: 2351, column: 11, scope: !6122)
!6126 = !DILocation(line: 2352, column: 8, scope: !6121)
!6127 = !DILocation(line: 2352, column: 2, scope: !6121)
!6128 = !DILocation(line: 2358, column: 8, scope: !6121)
!6129 = !DILocation(line: 2364, column: 9, scope: !6092)
!6130 = !DILocation(line: 2367, column: 24, scope: !6131)
!6131 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 2367, column: 7)
!6132 = !DILocation(line: 2367, column: 7, scope: !6131)
!6133 = !DILocation(line: 2367, column: 30, scope: !6131)
!6134 = !DILocation(line: 2367, column: 33, scope: !6131)
!6135 = !DILocation(line: 2367, column: 49, scope: !6131)
!6136 = !DILocation(line: 2367, column: 7, scope: !6092)
!6137 = !DILocation(line: 2369, column: 7, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6131, file: !3, line: 2368, column: 5)
!6139 = !DILocation(line: 2370, column: 7, scope: !6138)
!6140 = !DILocation(line: 2371, column: 5, scope: !6138)
!6141 = !DILocation(line: 2374, column: 22, scope: !6092)
!6142 = !DILocation(line: 2374, column: 3, scope: !6092)
!6143 = !DILocation(line: 2374, column: 20, scope: !6092)
!6144 = !DILocation(line: 2375, column: 9, scope: !6092)
!6145 = !DILocation(line: 2378, column: 3, scope: !6092)
!6146 = !DILocation(line: 2378, column: 34, scope: !6092)
!6147 = !DILocation(line: 2384, column: 7, scope: !6148)
!6148 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 2384, column: 7)
!6149 = !DILocation(line: 2385, column: 7, scope: !6148)
!6150 = !DILocation(line: 2385, column: 11, scope: !6148)
!6151 = !DILocation(line: 2386, column: 7, scope: !6148)
!6152 = !DILocation(line: 2386, column: 20, scope: !6148)
!6153 = !DILocation(line: 2387, column: 11, scope: !6148)
!6154 = !DILocation(line: 2387, column: 7, scope: !6148)
!6155 = !DILocation(line: 2393, column: 11, scope: !6156)
!6156 = distinct !DILexicalBlock(scope: !6157, file: !3, line: 2393, column: 11)
!6157 = distinct !DILexicalBlock(scope: !6148, file: !3, line: 2388, column: 5)
!6158 = !DILocation(line: 2394, column: 4, scope: !6156)
!6159 = !DILocation(line: 2394, column: 34, scope: !6156)
!6160 = !DILocation(line: 2395, column: 8, scope: !6156)
!6161 = !DILocation(line: 2394, column: 7, scope: !6156)
!6162 = !DILocation(line: 2401, column: 4, scope: !6156)
!6163 = !DILocation(line: 2401, column: 9, scope: !6156)
!6164 = !DILocation(line: 2393, column: 11, scope: !6157)
!6165 = !DILocation(line: 2403, column: 4, scope: !6166)
!6166 = distinct !DILexicalBlock(scope: !6156, file: !3, line: 2402, column: 2)
!6167 = !DILocation(line: 2404, column: 4, scope: !6166)
!6168 = !DILocation(line: 2405, column: 11, scope: !6166)
!6169 = !DILocation(line: 2405, column: 4, scope: !6166)
!6170 = !DILocation(line: 2412, column: 3, scope: !6092)
!6171 = !DILocation(line: 2423, column: 7, scope: !6172)
!6172 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 2423, column: 7)
!6173 = !DILocation(line: 2423, column: 7, scope: !6092)
!6174 = !DILocation(line: 2424, column: 5, scope: !6172)
!6175 = !DILocation(line: 2424, column: 25, scope: !6172)
!6176 = !DILocation(line: 2436, column: 24, scope: !6177)
!6177 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 2436, column: 7)
!6178 = !DILocation(line: 2436, column: 7, scope: !6177)
!6179 = !DILocation(line: 2436, column: 33, scope: !6177)
!6180 = !DILocation(line: 2436, column: 30, scope: !6177)
!6181 = !DILocation(line: 2436, column: 40, scope: !6177)
!6182 = !DILocation(line: 2436, column: 47, scope: !6177)
!6183 = !DILocation(line: 2437, column: 7, scope: !6177)
!6184 = !DILocation(line: 2437, column: 11, scope: !6177)
!6185 = !DILocation(line: 2438, column: 11, scope: !6177)
!6186 = !DILocation(line: 2438, column: 15, scope: !6177)
!6187 = !DILocation(line: 2439, column: 8, scope: !6177)
!6188 = !DILocation(line: 2439, column: 11, scope: !6177)
!6189 = !DILocation(line: 2440, column: 7, scope: !6177)
!6190 = !DILocation(line: 2440, column: 11, scope: !6177)
!6191 = !DILocation(line: 2440, column: 27, scope: !6177)
!6192 = !DILocation(line: 2441, column: 4, scope: !6177)
!6193 = !DILocation(line: 2441, column: 7, scope: !6177)
!6194 = !DILocation(line: 2442, column: 7, scope: !6177)
!6195 = !DILocation(line: 2442, column: 11, scope: !6177)
!6196 = !DILocation(line: 2436, column: 7, scope: !6092)
!6197 = !DILocation(line: 2444, column: 7, scope: !6198)
!6198 = distinct !DILexicalBlock(scope: !6177, file: !3, line: 2443, column: 5)
!6199 = !DILocation(line: 2445, column: 14, scope: !6198)
!6200 = !DILocation(line: 2445, column: 7, scope: !6198)
!6201 = !DILocation(line: 2450, column: 7, scope: !6202)
!6202 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 2450, column: 7)
!6203 = !DILocation(line: 2450, column: 16, scope: !6202)
!6204 = !DILocation(line: 2450, column: 36, scope: !6202)
!6205 = !DILocation(line: 2450, column: 19, scope: !6202)
!6206 = !DILocation(line: 2450, column: 42, scope: !6202)
!6207 = !DILocation(line: 2450, column: 53, scope: !6202)
!6208 = !DILocation(line: 2450, column: 7, scope: !6092)
!6209 = !DILocation(line: 2452, column: 7, scope: !6210)
!6210 = distinct !DILexicalBlock(scope: !6202, file: !3, line: 2451, column: 5)
!6211 = !DILocation(line: 2453, column: 14, scope: !6210)
!6212 = !DILocation(line: 2453, column: 7, scope: !6210)
!6213 = !DILocation(line: 2458, column: 7, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 2458, column: 7)
!6215 = !DILocation(line: 2458, column: 7, scope: !6092)
!6216 = !DILocation(line: 2460, column: 18, scope: !6217)
!6217 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 2460, column: 11)
!6218 = distinct !DILexicalBlock(scope: !6214, file: !3, line: 2459, column: 5)
!6219 = !DILocation(line: 2460, column: 15, scope: !6217)
!6220 = !DILocation(line: 2460, column: 11, scope: !6218)
!6221 = !DILocation(line: 2462, column: 4, scope: !6222)
!6222 = distinct !DILexicalBlock(scope: !6217, file: !3, line: 2461, column: 2)
!6223 = !DILocation(line: 2463, column: 11, scope: !6222)
!6224 = !DILocation(line: 2463, column: 4, scope: !6222)
!6225 = !DILocation(line: 2466, column: 7, scope: !6218)
!6226 = !DILocation(line: 2470, column: 11, scope: !6227)
!6227 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 2470, column: 11)
!6228 = !DILocation(line: 2470, column: 15, scope: !6227)
!6229 = !DILocation(line: 2470, column: 35, scope: !6227)
!6230 = !DILocation(line: 2470, column: 18, scope: !6227)
!6231 = !DILocation(line: 2470, column: 41, scope: !6227)
!6232 = !DILocation(line: 2470, column: 44, scope: !6227)
!6233 = !DILocation(line: 2470, column: 11, scope: !6218)
!6234 = !DILocation(line: 2472, column: 10, scope: !6235)
!6235 = distinct !DILexicalBlock(scope: !6227, file: !3, line: 2471, column: 2)
!6236 = !DILocation(line: 2473, column: 23, scope: !6235)
!6237 = !DILocation(line: 2474, column: 4, scope: !6235)
!6238 = !DILocation(line: 2474, column: 34, scope: !6235)
!6239 = !DILocation(line: 2475, column: 4, scope: !6235)
!6240 = !DILocation(line: 2476, column: 2, scope: !6235)
!6241 = !DILocation(line: 2478, column: 21, scope: !6227)
!6242 = !DILocation(line: 0, scope: !6227)
!6243 = !DILocation(line: 2480, column: 11, scope: !6244)
!6244 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 2480, column: 11)
!6245 = !DILocation(line: 2480, column: 17, scope: !6244)
!6246 = !DILocation(line: 2480, column: 14, scope: !6244)
!6247 = !DILocation(line: 2481, column: 9, scope: !6244)
!6248 = !DILocation(line: 2484, column: 1, scope: !6092)
!6249 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !597, file: !597, line: 34, type: !6250, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6253)
!6250 = !DISubroutineType(types: !6251)
!6251 = !{!2221, !6252, !1028}
!6252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2359, size: 64)
!6253 = !{!6254, !6255}
!6254 = !DILocalVariable(name: "vec_", arg: 1, scope: !6249, file: !597, line: 34, type: !6252)
!6255 = !DILocalVariable(name: "obj_", arg: 2, scope: !6249, file: !597, line: 34, type: !1028)
!6256 = !DILocation(line: 0, scope: !6249)
!6257 = !DILocation(line: 34, column: 1, scope: !6249)
!6258 = distinct !DISubprogram(name: "copy_arguments_for_versioning", scope: !3, file: !3, line: 4584, type: !6259, scopeLine: 4586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6261)
!6259 = !DISubroutineType(types: !6260)
!6260 = !{!704, !704, !2095, !1642, !703}
!6261 = !{!6262, !6263, !6264, !6265, !6266, !6267, !6268, !6269, !6270, !6275}
!6262 = !DILocalVariable(name: "orig_parm", arg: 1, scope: !6258, file: !3, line: 4584, type: !704)
!6263 = !DILocalVariable(name: "id", arg: 2, scope: !6258, file: !3, line: 4584, type: !2095)
!6264 = !DILocalVariable(name: "args_to_skip", arg: 3, scope: !6258, file: !3, line: 4585, type: !1642)
!6265 = !DILocalVariable(name: "vars", arg: 4, scope: !6258, file: !3, line: 4585, type: !703)
!6266 = !DILocalVariable(name: "arg", scope: !6258, file: !3, line: 4587, type: !704)
!6267 = !DILocalVariable(name: "parg", scope: !6258, file: !3, line: 4587, type: !703)
!6268 = !DILocalVariable(name: "new_parm", scope: !6258, file: !3, line: 4588, type: !704)
!6269 = !DILocalVariable(name: "i", scope: !6258, file: !3, line: 4589, type: !696)
!6270 = !DILocalVariable(name: "new_tree", scope: !6271, file: !3, line: 4596, type: !704)
!6271 = distinct !DILexicalBlock(scope: !6272, file: !3, line: 4595, column: 7)
!6272 = distinct !DILexicalBlock(scope: !6273, file: !3, line: 4594, column: 9)
!6273 = distinct !DILexicalBlock(scope: !6274, file: !3, line: 4593, column: 3)
!6274 = distinct !DILexicalBlock(scope: !6258, file: !3, line: 4593, column: 3)
!6275 = !DILocalVariable(name: "var", scope: !6276, file: !3, line: 4606, type: !704)
!6276 = distinct !DILexicalBlock(scope: !6277, file: !3, line: 4602, column: 7)
!6277 = distinct !DILexicalBlock(scope: !6272, file: !3, line: 4601, column: 14)
!6278 = !DILocation(line: 0, scope: !6258)
!6279 = !DILocation(line: 4588, column: 3, scope: !6258)
!6280 = !DILocation(line: 4588, column: 8, scope: !6258)
!6281 = !DILocation(line: 0, scope: !6272)
!6282 = !DILocation(line: 0, scope: !6277)
!6283 = !DILocation(line: 0, scope: !6276)
!6284 = !DILocation(line: 4593, column: 8, scope: !6274)
!6285 = !DILocation(line: 0, scope: !6274)
!6286 = !DILocation(line: 4591, column: 8, scope: !6258)
!6287 = !DILocation(line: 4593, column: 3, scope: !6274)
!6288 = !DILocation(line: 4596, column: 25, scope: !6271)
!6289 = !DILocation(line: 0, scope: !6271)
!6290 = !DILocation(line: 4597, column: 20, scope: !6271)
!6291 = !DILocation(line: 4597, column: 9, scope: !6271)
!6292 = !DILocation(line: 4598, column: 15, scope: !6271)
!6293 = !DILocation(line: 4599, column: 10, scope: !6271)
!6294 = !DILocation(line: 4593, column: 36, scope: !6273)
!6295 = !DILocation(line: 4593, column: 3, scope: !6273)
!6296 = distinct !{!6296, !6287, !6297}
!6297 = !DILocation(line: 4613, column: 7, scope: !6274)
!6298 = !DILocation(line: 4614, column: 10, scope: !6258)
!6299 = !DILocation(line: 4594, column: 27, scope: !6272)
!6300 = !DILocation(line: 4594, column: 9, scope: !6273)
!6301 = !DILocation(line: 4600, column: 7, scope: !6271)
!6302 = !DILocation(line: 4601, column: 41, scope: !6277)
!6303 = !DILocation(line: 4601, column: 51, scope: !6277)
!6304 = !DILocation(line: 4601, column: 15, scope: !6277)
!6305 = !DILocation(line: 4601, column: 14, scope: !6272)
!6306 = !DILocation(line: 4606, column: 13, scope: !6276)
!6307 = !DILocation(line: 4607, column: 2, scope: !6276)
!6308 = !DILocation(line: 4608, column: 2, scope: !6276)
!6309 = !DILocation(line: 4609, column: 2, scope: !6276)
!6310 = !DILocation(line: 4611, column: 28, scope: !6276)
!6311 = !DILocation(line: 4611, column: 9, scope: !6276)
!6312 = !DILocation(line: 4611, column: 26, scope: !6276)
!6313 = !DILocation(line: 4612, column: 15, scope: !6276)
!6314 = !DILocation(line: 4613, column: 7, scope: !6276)
!6315 = !DILocation(line: 4593, column: 55, scope: !6273)
!6316 = !DILocation(line: 4615, column: 1, scope: !6258)
!6317 = !DILocation(line: 4614, column: 3, scope: !6258)
!6318 = distinct !DISubprogram(name: "remap_blocks", scope: !3, file: !3, line: 611, type: !2879, scopeLine: 612, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6319)
!6319 = !{!6320, !6321, !6322, !6323}
!6320 = !DILocalVariable(name: "block", arg: 1, scope: !6318, file: !3, line: 611, type: !704)
!6321 = !DILocalVariable(name: "id", arg: 2, scope: !6318, file: !3, line: 611, type: !2095)
!6322 = !DILocalVariable(name: "t", scope: !6318, file: !3, line: 613, type: !704)
!6323 = !DILocalVariable(name: "new_tree", scope: !6318, file: !3, line: 614, type: !704)
!6324 = !DILocation(line: 0, scope: !6318)
!6325 = !DILocation(line: 614, column: 3, scope: !6318)
!6326 = !DILocation(line: 614, column: 8, scope: !6318)
!6327 = !DILocation(line: 616, column: 8, scope: !6328)
!6328 = distinct !DILexicalBlock(scope: !6318, file: !3, line: 616, column: 7)
!6329 = !DILocation(line: 616, column: 7, scope: !6318)
!6330 = !DILocation(line: 619, column: 3, scope: !6318)
!6331 = !DILocation(line: 620, column: 3, scope: !6318)
!6332 = !DILocation(line: 621, column: 12, scope: !6333)
!6333 = distinct !DILexicalBlock(scope: !6318, file: !3, line: 621, column: 3)
!6334 = !DILocation(line: 621, column: 8, scope: !6333)
!6335 = !DILocation(line: 0, scope: !6333)
!6336 = !DILocation(line: 621, column: 3, scope: !6333)
!6337 = !DILocation(line: 622, column: 38, scope: !6338)
!6338 = distinct !DILexicalBlock(scope: !6333, file: !3, line: 621, column: 3)
!6339 = !DILocation(line: 622, column: 5, scope: !6338)
!6340 = !DILocation(line: 621, column: 45, scope: !6338)
!6341 = !DILocation(line: 621, column: 3, scope: !6338)
!6342 = distinct !{!6342, !6336, !6343}
!6343 = !DILocation(line: 622, column: 58, scope: !6333)
!6344 = !DILocation(line: 625, column: 49, scope: !6318)
!6345 = !DILocation(line: 625, column: 32, scope: !6318)
!6346 = !DILocation(line: 625, column: 3, scope: !6318)
!6347 = !DILocation(line: 625, column: 30, scope: !6318)
!6348 = !DILocation(line: 626, column: 10, scope: !6318)
!6349 = !DILocation(line: 626, column: 3, scope: !6318)
!6350 = !DILocation(line: 627, column: 1, scope: !6318)
!6351 = distinct !DISubprogram(name: "declare_inline_vars", scope: !3, file: !3, line: 4445, type: !6352, scopeLine: 4446, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6354)
!6352 = !DISubroutineType(types: !6353)
!6353 = !{null, !704, !704}
!6354 = !{!6355, !6356, !6357}
!6355 = !DILocalVariable(name: "block", arg: 1, scope: !6351, file: !3, line: 4445, type: !704)
!6356 = !DILocalVariable(name: "vars", arg: 2, scope: !6351, file: !3, line: 4445, type: !704)
!6357 = !DILocalVariable(name: "t", scope: !6351, file: !3, line: 4447, type: !704)
!6358 = !DILocation(line: 0, scope: !6351)
!6359 = !DILocation(line: 4448, column: 8, scope: !6360)
!6360 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 4448, column: 3)
!6361 = !DILocation(line: 0, scope: !6360)
!6362 = !DILocation(line: 4448, column: 3, scope: !6360)
!6363 = !DILocation(line: 4450, column: 7, scope: !6364)
!6364 = distinct !DILexicalBlock(scope: !6365, file: !3, line: 4449, column: 5)
!6365 = distinct !DILexicalBlock(scope: !6360, file: !3, line: 4448, column: 3)
!6366 = !DILocation(line: 4450, column: 36, scope: !6364)
!6367 = !DILocation(line: 4451, column: 7, scope: !6364)
!6368 = !DILocation(line: 4452, column: 27, scope: !6364)
!6369 = !DILocation(line: 4452, column: 7, scope: !6364)
!6370 = !DILocation(line: 4452, column: 13, scope: !6364)
!6371 = !DILocation(line: 4452, column: 25, scope: !6364)
!6372 = !DILocation(line: 4448, column: 25, scope: !6365)
!6373 = !DILocation(line: 4448, column: 3, scope: !6365)
!6374 = distinct !{!6374, !6362, !6375}
!6375 = !DILocation(line: 4453, column: 5, scope: !6360)
!6376 = !DILocation(line: 4455, column: 7, scope: !6377)
!6377 = distinct !DILexicalBlock(scope: !6351, file: !3, line: 4455, column: 7)
!6378 = !DILocation(line: 4455, column: 7, scope: !6351)
!6379 = !DILocation(line: 4456, column: 35, scope: !6377)
!6380 = !DILocation(line: 4456, column: 26, scope: !6377)
!6381 = !DILocation(line: 4456, column: 24, scope: !6377)
!6382 = !DILocation(line: 4456, column: 5, scope: !6377)
!6383 = !DILocation(line: 4457, column: 1, scope: !6351)
!6384 = distinct !DISubprogram(name: "can_be_nonlocal", scope: !3, file: !3, line: 492, type: !6385, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6387)
!6385 = !DISubroutineType(types: !6386)
!6386 = !{!695, !704, !2095}
!6387 = !{!6388, !6389}
!6388 = !DILocalVariable(name: "decl", arg: 1, scope: !6384, file: !3, line: 492, type: !704)
!6389 = !DILocalVariable(name: "id", arg: 2, scope: !6384, file: !3, line: 492, type: !2095)
!6390 = !DILocation(line: 0, scope: !6384)
!6391 = !DILocation(line: 495, column: 7, scope: !6392)
!6392 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 495, column: 7)
!6393 = !DILocation(line: 495, column: 24, scope: !6392)
!6394 = !DILocation(line: 495, column: 7, scope: !6384)
!6395 = !DILocation(line: 500, column: 24, scope: !6396)
!6396 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 500, column: 7)
!6397 = !DILocation(line: 501, column: 7, scope: !6396)
!6398 = !DILocation(line: 501, column: 39, scope: !6396)
!6399 = !DILocation(line: 501, column: 11, scope: !6396)
!6400 = !DILocation(line: 500, column: 7, scope: !6384)
!6401 = !DILocation(line: 506, column: 7, scope: !6402)
!6402 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 506, column: 7)
!6403 = !DILocation(line: 506, column: 24, scope: !6402)
!6404 = !DILocation(line: 506, column: 36, scope: !6402)
!6405 = !DILocation(line: 506, column: 56, scope: !6402)
!6406 = !DILocation(line: 506, column: 7, scope: !6384)
!6407 = !DILocation(line: 512, column: 7, scope: !6408)
!6408 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 512, column: 7)
!6409 = !DILocation(line: 512, column: 27, scope: !6408)
!6410 = !DILocation(line: 512, column: 24, scope: !6408)
!6411 = !DILocation(line: 512, column: 7, scope: !6384)
!6412 = !DILocation(line: 516, column: 25, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 516, column: 7)
!6414 = !DILocation(line: 516, column: 8, scope: !6413)
!6415 = !DILocation(line: 516, column: 7, scope: !6384)
!6416 = !DILocation(line: 520, column: 7, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 520, column: 7)
!6418 = !DILocation(line: 524, column: 1, scope: !6384)
!6419 = distinct !DISubprogram(name: "copy_body", scope: !3, file: !3, line: 2217, type: !6420, scopeLine: 2219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6422)
!6420 = !DISubroutineType(types: !6421)
!6421 = !{!704, !2095, !1238, !696, !1584, !1584}
!6422 = !{!6423, !6424, !6425, !6426, !6427, !6428, !6429}
!6423 = !DILocalVariable(name: "id", arg: 1, scope: !6419, file: !3, line: 2217, type: !2095)
!6424 = !DILocalVariable(name: "count", arg: 2, scope: !6419, file: !3, line: 2217, type: !1238)
!6425 = !DILocalVariable(name: "frequency_scale", arg: 3, scope: !6419, file: !3, line: 2217, type: !696)
!6426 = !DILocalVariable(name: "entry_block_map", arg: 4, scope: !6419, file: !3, line: 2218, type: !1584)
!6427 = !DILocalVariable(name: "exit_block_map", arg: 5, scope: !6419, file: !3, line: 2218, type: !1584)
!6428 = !DILocalVariable(name: "fndecl", scope: !6419, file: !3, line: 2220, type: !704)
!6429 = !DILocalVariable(name: "body", scope: !6419, file: !3, line: 2221, type: !704)
!6430 = !DILocation(line: 0, scope: !6419)
!6431 = !DILocation(line: 2220, column: 21, scope: !6419)
!6432 = !DILocation(line: 2224, column: 3, scope: !6419)
!6433 = !DILocation(line: 2225, column: 10, scope: !6419)
!6434 = !DILocation(line: 2226, column: 3, scope: !6419)
!6435 = !DILocation(line: 2228, column: 3, scope: !6419)
!6436 = distinct !DISubprogram(name: "single_succ_edge", scope: !337, file: !337, line: 643, type: !6437, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6442)
!6437 = !DISubroutineType(types: !6438)
!6438 = !{!1008, !6439}
!6439 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !705, line: 112, baseType: !6440)
!6440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6441, size: 64)
!6441 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !993)
!6442 = !{!6443}
!6443 = !DILocalVariable(name: "bb", arg: 1, scope: !6436, file: !337, line: 643, type: !6439)
!6444 = !DILocation(line: 0, scope: !6436)
!6445 = !DILocation(line: 645, column: 3, scope: !6436)
!6446 = !DILocation(line: 646, column: 10, scope: !6436)
!6447 = !DILocation(line: 646, column: 3, scope: !6436)
!6448 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !597, file: !597, line: 33, type: !6449, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6453)
!6449 = !DISubroutineType(types: !6450)
!6450 = !{!7, !6451}
!6451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6452, size: 64)
!6452 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1622)
!6453 = !{!6454}
!6454 = !DILocalVariable(name: "vec_", arg: 1, scope: !6448, file: !597, line: 33, type: !6451)
!6455 = !DILocation(line: 0, scope: !6448)
!6456 = !DILocation(line: 33, column: 1, scope: !6448)
!6457 = distinct !DISubprogram(name: "insert_init_stmt", scope: !3, file: !3, line: 2291, type: !6458, scopeLine: 2292, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6460)
!6458 = !DISubroutineType(types: !6459)
!6459 = !{null, !2095, !1584, !1028}
!6460 = !{!6461, !6462, !6463, !6464, !6467, !6470, !6473}
!6461 = !DILocalVariable(name: "id", arg: 1, scope: !6457, file: !3, line: 2291, type: !2095)
!6462 = !DILocalVariable(name: "bb", arg: 2, scope: !6457, file: !3, line: 2291, type: !1584)
!6463 = !DILocalVariable(name: "init_stmt", arg: 3, scope: !6457, file: !3, line: 2291, type: !1028)
!6464 = !DILocalVariable(name: "si", scope: !6465, file: !3, line: 2297, type: !2373)
!6465 = distinct !DILexicalBlock(scope: !6466, file: !3, line: 2296, column: 5)
!6466 = distinct !DILexicalBlock(scope: !6457, file: !3, line: 2295, column: 7)
!6467 = !DILocalVariable(name: "rhs", scope: !6468, file: !3, line: 2308, type: !704)
!6468 = distinct !DILexicalBlock(scope: !6469, file: !3, line: 2307, column: 2)
!6469 = distinct !DILexicalBlock(scope: !6465, file: !3, line: 2303, column: 11)
!6470 = !DILocalVariable(name: "var", scope: !6471, file: !3, line: 2322, type: !704)
!6471 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 2321, column: 2)
!6472 = distinct !DILexicalBlock(scope: !6465, file: !3, line: 2320, column: 11)
!6473 = !DILocalVariable(name: "def", scope: !6471, file: !3, line: 2322, type: !704)
!6474 = !DILocation(line: 0, scope: !6457)
!6475 = !DILocation(line: 2295, column: 7, scope: !6466)
!6476 = !DILocation(line: 2295, column: 7, scope: !6457)
!6477 = !DILocation(line: 2297, column: 7, scope: !6465)
!6478 = !DILocation(line: 0, scope: !6465)
!6479 = !DILocation(line: 2297, column: 33, scope: !6465)
!6480 = !DILocation(line: 2303, column: 12, scope: !6469)
!6481 = !DILocation(line: 2304, column: 4, scope: !6469)
!6482 = !DILocation(line: 2304, column: 23, scope: !6469)
!6483 = !DILocation(line: 2304, column: 8, scope: !6469)
!6484 = !DILocation(line: 2305, column: 4, scope: !6469)
!6485 = !DILocation(line: 2305, column: 27, scope: !6469)
!6486 = !DILocation(line: 2305, column: 7, scope: !6469)
!6487 = !DILocation(line: 2306, column: 4, scope: !6469)
!6488 = !DILocation(line: 2306, column: 7, scope: !6469)
!6489 = !DILocation(line: 2306, column: 43, scope: !6469)
!6490 = !DILocation(line: 2303, column: 11, scope: !6465)
!6491 = !DILocation(line: 2308, column: 15, scope: !6468)
!6492 = !DILocation(line: 0, scope: !6468)
!6493 = !DILocation(line: 2311, column: 10, scope: !6468)
!6494 = !DILocation(line: 2313, column: 43, scope: !6468)
!6495 = !DILocation(line: 2313, column: 4, scope: !6468)
!6496 = !DILocation(line: 2314, column: 4, scope: !6468)
!6497 = !DILocation(line: 2315, column: 2, scope: !6468)
!6498 = !DILocation(line: 2316, column: 7, scope: !6465)
!6499 = !DILocation(line: 2317, column: 7, scope: !6465)
!6500 = !DILocation(line: 2318, column: 7, scope: !6465)
!6501 = !DILocation(line: 2320, column: 12, scope: !6472)
!6502 = !DILocation(line: 2320, column: 43, scope: !6472)
!6503 = !DILocation(line: 2320, column: 40, scope: !6472)
!6504 = !DILocation(line: 2322, column: 20, scope: !6471)
!6505 = !DILocation(line: 0, scope: !6471)
!6506 = !DILocation(line: 2324, column: 8, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6471, file: !3, line: 2324, column: 8)
!6508 = !DILocation(line: 2324, column: 24, scope: !6507)
!6509 = !DILocation(line: 2324, column: 8, scope: !6471)
!6510 = !DILocation(line: 2325, column: 12, scope: !6507)
!6511 = !DILocation(line: 2325, column: 6, scope: !6507)
!6512 = !DILocation(line: 0, scope: !6507)
!6513 = !DILocation(line: 2329, column: 4, scope: !6471)
!6514 = !DILocation(line: 2330, column: 2, scope: !6471)
!6515 = !DILocation(line: 2331, column: 5, scope: !6466)
!6516 = !DILocation(line: 2331, column: 5, scope: !6465)
!6517 = !DILocation(line: 2332, column: 1, scope: !6457)
!6518 = distinct !DISubprogram(name: "VEC_gimple_base_pop", scope: !597, file: !597, line: 33, type: !6519, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6522)
!6519 = !DISubroutineType(types: !6520)
!6520 = !{!1028, !6521}
!6521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1622, size: 64)
!6522 = !{!6523, !6524}
!6523 = !DILocalVariable(name: "vec_", arg: 1, scope: !6518, file: !597, line: 33, type: !6521)
!6524 = !DILocalVariable(name: "obj_", scope: !6518, file: !597, line: 33, type: !1028)
!6525 = !DILocation(line: 0, scope: !6518)
!6526 = !DILocation(line: 33, column: 1, scope: !6518)
!6527 = distinct !DISubprogram(name: "update_clone_info", scope: !3, file: !3, line: 4717, type: !6528, scopeLine: 4718, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6530)
!6528 = !DISubroutineType(types: !6529)
!6529 = !{null, !2095}
!6530 = !{!6531, !6532, !6533, !6539}
!6531 = !DILocalVariable(name: "id", arg: 1, scope: !6527, file: !3, line: 4717, type: !2095)
!6532 = !DILocalVariable(name: "node", scope: !6527, file: !3, line: 4719, type: !2102)
!6533 = !DILocalVariable(name: "i", scope: !6534, file: !3, line: 4727, type: !7)
!6534 = distinct !DILexicalBlock(scope: !6535, file: !3, line: 4726, column: 9)
!6535 = distinct !DILexicalBlock(scope: !6536, file: !3, line: 4725, column: 11)
!6536 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 4723, column: 5)
!6537 = distinct !DILexicalBlock(scope: !6538, file: !3, line: 4722, column: 3)
!6538 = distinct !DILexicalBlock(scope: !6527, file: !3, line: 4722, column: 3)
!6539 = !DILocalVariable(name: "replace_info", scope: !6540, file: !3, line: 4730, type: !2299)
!6540 = distinct !DILexicalBlock(scope: !6541, file: !3, line: 4729, column: 6)
!6541 = distinct !DILexicalBlock(scope: !6542, file: !3, line: 4728, column: 11)
!6542 = distinct !DILexicalBlock(scope: !6534, file: !3, line: 4728, column: 11)
!6543 = !DILocation(line: 0, scope: !6527)
!6544 = !DILocation(line: 4720, column: 12, scope: !6545)
!6545 = distinct !DILexicalBlock(scope: !6527, file: !3, line: 4720, column: 7)
!6546 = !DILocation(line: 4720, column: 22, scope: !6545)
!6547 = !DILocation(line: 4720, column: 8, scope: !6545)
!6548 = !DILocation(line: 4720, column: 7, scope: !6527)
!6549 = !DILocation(line: 0, scope: !6540)
!6550 = !DILocation(line: 4722, column: 8, scope: !6538)
!6551 = !DILocation(line: 4722, column: 49, scope: !6537)
!6552 = !DILocation(line: 0, scope: !6538)
!6553 = !DILocation(line: 4722, column: 42, scope: !6537)
!6554 = !DILocation(line: 4722, column: 3, scope: !6538)
!6555 = !DILocation(line: 4725, column: 23, scope: !6535)
!6556 = !DILocation(line: 4725, column: 11, scope: !6535)
!6557 = !DILocation(line: 4725, column: 11, scope: !6536)
!6558 = !DILocation(line: 4728, column: 11, scope: !6542)
!6559 = !DILocation(line: 4728, column: 27, scope: !6541)
!6560 = !DILocation(line: 0, scope: !6542)
!6561 = !DILocation(line: 0, scope: !6534)
!6562 = !DILocation(line: 4728, column: 25, scope: !6541)
!6563 = !DILocation(line: 4731, column: 23, scope: !6540)
!6564 = !DILocation(line: 4732, column: 8, scope: !6540)
!6565 = !DILocation(line: 4733, column: 8, scope: !6540)
!6566 = !DILocation(line: 4728, column: 82, scope: !6541)
!6567 = !DILocation(line: 4728, column: 11, scope: !6541)
!6568 = distinct !{!6568, !6558, !6569}
!6569 = !DILocation(line: 4734, column: 6, scope: !6542)
!6570 = !DILocation(line: 4736, column: 17, scope: !6571)
!6571 = distinct !DILexicalBlock(scope: !6536, file: !3, line: 4736, column: 11)
!6572 = !DILocation(line: 4736, column: 11, scope: !6571)
!6573 = !DILocation(line: 4736, column: 11, scope: !6536)
!6574 = !DILocation(line: 4737, column: 2, scope: !6571)
!6575 = !DILocation(line: 4738, column: 22, scope: !6576)
!6576 = distinct !DILexicalBlock(scope: !6571, file: !3, line: 4738, column: 16)
!6577 = !DILocation(line: 4738, column: 16, scope: !6576)
!6578 = !DILocation(line: 4738, column: 16, scope: !6571)
!6579 = !DILocation(line: 0, scope: !6580)
!6580 = distinct !DILexicalBlock(scope: !6576, file: !3, line: 4741, column: 2)
!6581 = !DILocation(line: 4742, column: 4, scope: !6580)
!6582 = !DILocation(line: 4739, column: 2, scope: !6576)
!6583 = !DILocation(line: 4742, column: 16, scope: !6580)
!6584 = !DILocation(line: 4742, column: 32, scope: !6580)
!6585 = !DILocation(line: 4742, column: 42, scope: !6580)
!6586 = !DILocation(line: 4742, column: 35, scope: !6580)
!6587 = !DILocation(line: 4743, column: 19, scope: !6580)
!6588 = distinct !{!6588, !6581, !6587}
!6589 = !DILocation(line: 4744, column: 8, scope: !6580)
!6590 = !DILocation(line: 4745, column: 19, scope: !6591)
!6591 = distinct !DILexicalBlock(scope: !6580, file: !3, line: 4744, column: 8)
!6592 = !DILocation(line: 4745, column: 6, scope: !6591)
!6593 = !DILocation(line: 0, scope: !6571)
!6594 = !DILocation(line: 4722, column: 3, scope: !6537)
!6595 = distinct !{!6595, !6554, !6596}
!6596 = !DILocation(line: 4747, column: 5, scope: !6538)
!6597 = !DILocation(line: 4748, column: 1, scope: !6527)
!6598 = distinct !DISubprogram(name: "remap_gimple_op_r", scope: !3, file: !3, line: 725, type: !2989, scopeLine: 726, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6599)
!6599 = !{!6600, !6601, !6602, !6603, !6604, !6605, !6606, !6610, !6617, !6621, !6622, !6625, !6626, !6627, !6631}
!6600 = !DILocalVariable(name: "tp", arg: 1, scope: !6598, file: !3, line: 725, type: !703)
!6601 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !6598, file: !3, line: 725, type: !2991)
!6602 = !DILocalVariable(name: "data", arg: 3, scope: !6598, file: !3, line: 725, type: !700)
!6603 = !DILocalVariable(name: "wi_p", scope: !6598, file: !3, line: 727, type: !2369)
!6604 = !DILocalVariable(name: "id", scope: !6598, file: !3, line: 728, type: !2095)
!6605 = !DILocalVariable(name: "fn", scope: !6598, file: !3, line: 729, type: !704)
!6606 = !DILocalVariable(name: "new_decl", scope: !6607, file: !3, line: 744, type: !704)
!6607 = distinct !DILexicalBlock(scope: !6608, file: !3, line: 738, column: 5)
!6608 = distinct !DILexicalBlock(scope: !6609, file: !3, line: 737, column: 12)
!6609 = distinct !DILexicalBlock(scope: !6598, file: !3, line: 731, column: 7)
!6610 = !DILocalVariable(name: "new_type", scope: !6611, file: !3, line: 777, type: !704)
!6611 = distinct !DILexicalBlock(scope: !6612, file: !3, line: 774, column: 5)
!6612 = distinct !DILexicalBlock(scope: !6613, file: !3, line: 773, column: 12)
!6613 = distinct !DILexicalBlock(scope: !6614, file: !3, line: 770, column: 12)
!6614 = distinct !DILexicalBlock(scope: !6615, file: !3, line: 765, column: 12)
!6615 = distinct !DILexicalBlock(scope: !6616, file: !3, line: 763, column: 12)
!6616 = distinct !DILexicalBlock(scope: !6608, file: !3, line: 761, column: 12)
!6617 = !DILocalVariable(name: "decl", scope: !6618, file: !3, line: 799, type: !704)
!6618 = distinct !DILexicalBlock(scope: !6619, file: !3, line: 796, column: 2)
!6619 = distinct !DILexicalBlock(scope: !6620, file: !3, line: 795, column: 11)
!6620 = distinct !DILexicalBlock(scope: !6612, file: !3, line: 792, column: 5)
!6621 = !DILocalVariable(name: "n", scope: !6618, file: !3, line: 800, type: !703)
!6622 = !DILocalVariable(name: "type", scope: !6623, file: !3, line: 805, type: !704)
!6623 = distinct !DILexicalBlock(scope: !6624, file: !3, line: 804, column: 6)
!6624 = distinct !DILexicalBlock(scope: !6618, file: !3, line: 803, column: 8)
!6625 = !DILocalVariable(name: "new_tree", scope: !6623, file: !3, line: 805, type: !704)
!6626 = !DILocalVariable(name: "old", scope: !6623, file: !3, line: 805, type: !704)
!6627 = !DILocalVariable(name: "invariant", scope: !6628, file: !3, line: 874, type: !696)
!6628 = distinct !DILexicalBlock(scope: !6629, file: !3, line: 869, column: 2)
!6629 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 868, column: 16)
!6630 = distinct !DILexicalBlock(scope: !6620, file: !3, line: 861, column: 11)
!6631 = !DILocalVariable(name: "block", scope: !6628, file: !3, line: 875, type: !704)
!6632 = !DILocation(line: 0, scope: !6598)
!6633 = !DILocation(line: 728, column: 49, scope: !6598)
!6634 = !DILocation(line: 731, column: 7, scope: !6609)
!6635 = !DILocation(line: 731, column: 23, scope: !6609)
!6636 = !DILocation(line: 0, scope: !6609)
!6637 = !DILocation(line: 731, column: 7, scope: !6598)
!6638 = !DILocation(line: 733, column: 13, scope: !6639)
!6639 = distinct !DILexicalBlock(scope: !6609, file: !3, line: 732, column: 5)
!6640 = !DILocation(line: 733, column: 11, scope: !6639)
!6641 = !DILocation(line: 734, column: 22, scope: !6639)
!6642 = !DILocation(line: 735, column: 7, scope: !6639)
!6643 = !DILocation(line: 729, column: 17, scope: !6598)
!6644 = !DILocation(line: 737, column: 12, scope: !6608)
!6645 = !DILocation(line: 0, scope: !6608)
!6646 = !DILocation(line: 737, column: 12, scope: !6609)
!6647 = !DILocation(line: 747, column: 18, scope: !6607)
!6648 = !DILocation(line: 0, scope: !6607)
!6649 = !DILocation(line: 748, column: 7, scope: !6607)
!6650 = !DILocation(line: 750, column: 7, scope: !6607)
!6651 = distinct !{!6651, !6650, !6650}
!6652 = !DILocation(line: 755, column: 32, scope: !6653)
!6653 = distinct !DILexicalBlock(scope: !6607, file: !3, line: 755, column: 11)
!6654 = !DILocation(line: 756, column: 4, scope: !6653)
!6655 = !DILocation(line: 756, column: 35, scope: !6653)
!6656 = !DILocation(line: 756, column: 52, scope: !6653)
!6657 = !DILocation(line: 756, column: 8, scope: !6653)
!6658 = !DILocation(line: 755, column: 11, scope: !6607)
!6659 = !DILocation(line: 757, column: 13, scope: !6653)
!6660 = !DILocation(line: 757, column: 2, scope: !6653)
!6661 = !DILocation(line: 758, column: 11, scope: !6607)
!6662 = !DILocation(line: 759, column: 22, scope: !6607)
!6663 = !DILocation(line: 760, column: 5, scope: !6607)
!6664 = !DILocation(line: 761, column: 12, scope: !6616)
!6665 = !DILocation(line: 761, column: 28, scope: !6616)
!6666 = !DILocation(line: 761, column: 12, scope: !6608)
!6667 = !DILocation(line: 762, column: 5, scope: !6616)
!6668 = !DILocation(line: 763, column: 28, scope: !6615)
!6669 = !DILocation(line: 763, column: 12, scope: !6616)
!6670 = !DILocation(line: 764, column: 5, scope: !6615)
!6671 = !DILocation(line: 765, column: 28, scope: !6614)
!6672 = !DILocation(line: 766, column: 5, scope: !6614)
!6673 = !DILocation(line: 766, column: 10, scope: !6614)
!6674 = !DILocation(line: 767, column: 9, scope: !6614)
!6675 = !DILocation(line: 767, column: 12, scope: !6614)
!6676 = !DILocation(line: 767, column: 47, scope: !6614)
!6677 = !DILocation(line: 767, column: 40, scope: !6614)
!6678 = !DILocation(line: 765, column: 12, scope: !6615)
!6679 = !DILocation(line: 769, column: 23, scope: !6614)
!6680 = !DILocation(line: 770, column: 12, scope: !6613)
!6681 = !DILocation(line: 769, column: 11, scope: !6614)
!6682 = !DILocation(line: 769, column: 9, scope: !6614)
!6683 = !DILocation(line: 769, column: 5, scope: !6614)
!6684 = !DILocation(line: 770, column: 12, scope: !6614)
!6685 = !DILocation(line: 0, scope: !6613)
!6686 = !DILocation(line: 772, column: 11, scope: !6613)
!6687 = !DILocation(line: 772, column: 9, scope: !6613)
!6688 = !DILocation(line: 772, column: 5, scope: !6613)
!6689 = !DILocation(line: 773, column: 12, scope: !6612)
!6690 = !DILocation(line: 773, column: 12, scope: !6613)
!6691 = !DILocation(line: 777, column: 35, scope: !6611)
!6692 = !DILocation(line: 777, column: 23, scope: !6611)
!6693 = !DILocation(line: 0, scope: !6611)
!6694 = !DILocation(line: 779, column: 23, scope: !6695)
!6695 = distinct !DILexicalBlock(scope: !6611, file: !3, line: 779, column: 11)
!6696 = !DILocation(line: 779, column: 20, scope: !6695)
!6697 = !DILocation(line: 779, column: 11, scope: !6611)
!6698 = !DILocation(line: 780, column: 17, scope: !6695)
!6699 = !DILocation(line: 780, column: 2, scope: !6695)
!6700 = !DILocation(line: 782, column: 16, scope: !6701)
!6701 = distinct !DILexicalBlock(scope: !6695, file: !3, line: 782, column: 16)
!6702 = !DILocation(line: 782, column: 32, scope: !6701)
!6703 = !DILocation(line: 782, column: 16, scope: !6695)
!6704 = !DILocation(line: 783, column: 38, scope: !6701)
!6705 = !DILocation(line: 784, column: 7, scope: !6701)
!6706 = !DILocation(line: 783, column: 8, scope: !6701)
!6707 = !DILocation(line: 783, column: 6, scope: !6701)
!6708 = !DILocation(line: 783, column: 2, scope: !6701)
!6709 = !DILocation(line: 0, scope: !6701)
!6710 = !DILocation(line: 787, column: 10, scope: !6711)
!6711 = distinct !DILexicalBlock(scope: !6701, file: !3, line: 786, column: 2)
!6712 = !DILocation(line: 787, column: 8, scope: !6711)
!6713 = !DILocation(line: 788, column: 4, scope: !6711)
!6714 = !DILocation(line: 788, column: 20, scope: !6711)
!6715 = !DILocation(line: 795, column: 11, scope: !6619)
!6716 = !DILocation(line: 795, column: 27, scope: !6619)
!6717 = !DILocation(line: 795, column: 11, scope: !6620)
!6718 = !DILocation(line: 799, column: 16, scope: !6618)
!6719 = !DILocation(line: 802, column: 43, scope: !6618)
!6720 = !DILocation(line: 802, column: 17, scope: !6618)
!6721 = !DILocation(line: 0, scope: !6618)
!6722 = !DILocation(line: 803, column: 8, scope: !6624)
!6723 = !DILocation(line: 803, column: 8, scope: !6618)
!6724 = !DILocation(line: 814, column: 15, scope: !6623)
!6725 = !DILocation(line: 0, scope: !6623)
!6726 = !DILocation(line: 815, column: 33, scope: !6623)
!6727 = !DILocation(line: 815, column: 19, scope: !6623)
!6728 = !DILocation(line: 816, column: 14, scope: !6623)
!6729 = !DILocation(line: 817, column: 14, scope: !6623)
!6730 = !DILocation(line: 817, column: 12, scope: !6623)
!6731 = !DILocation(line: 818, column: 13, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6623, file: !3, line: 818, column: 12)
!6733 = !DILocation(line: 818, column: 12, scope: !6623)
!6734 = !DILocation(line: 820, column: 9, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6736, file: !3, line: 820, column: 9)
!6736 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 819, column: 10)
!6737 = !DILocation(line: 820, column: 30, scope: !6735)
!6738 = !DILocation(line: 820, column: 9, scope: !6736)
!6739 = !DILocation(line: 822, column: 36, scope: !6740)
!6740 = distinct !DILexicalBlock(scope: !6735, file: !3, line: 821, column: 7)
!6741 = !DILocation(line: 822, column: 15, scope: !6740)
!6742 = !DILocation(line: 822, column: 13, scope: !6740)
!6743 = !DILocation(line: 827, column: 15, scope: !6744)
!6744 = distinct !DILexicalBlock(scope: !6740, file: !3, line: 827, column: 13)
!6745 = !DILocation(line: 827, column: 13, scope: !6740)
!6746 = !DILocation(line: 828, column: 10, scope: !6744)
!6747 = !DILocation(line: 828, column: 8, scope: !6744)
!6748 = !DILocation(line: 828, column: 4, scope: !6744)
!6749 = !DILocation(line: 832, column: 22, scope: !6750)
!6750 = distinct !DILexicalBlock(scope: !6735, file: !3, line: 831, column: 7)
!6751 = !DILocation(line: 832, column: 20, scope: !6750)
!6752 = !DILocation(line: 833, column: 36, scope: !6750)
!6753 = !DILocation(line: 833, column: 9, scope: !6750)
!6754 = !DILocation(line: 833, column: 34, scope: !6750)
!6755 = !DILocation(line: 834, column: 33, scope: !6750)
!6756 = !DILocation(line: 834, column: 9, scope: !6750)
!6757 = !DILocation(line: 834, column: 31, scope: !6750)
!6758 = !DILocation(line: 837, column: 23, scope: !6623)
!6759 = !DILocation(line: 844, column: 7, scope: !6620)
!6760 = !DILocation(line: 848, column: 28, scope: !6761)
!6761 = distinct !DILexicalBlock(scope: !6620, file: !3, line: 848, column: 11)
!6762 = !DILocation(line: 848, column: 11, scope: !6761)
!6763 = !DILocation(line: 849, column: 4, scope: !6761)
!6764 = !DILocation(line: 849, column: 7, scope: !6761)
!6765 = !DILocation(line: 849, column: 23, scope: !6761)
!6766 = !DILocation(line: 850, column: 4, scope: !6761)
!6767 = !DILocation(line: 850, column: 11, scope: !6761)
!6768 = !DILocation(line: 851, column: 8, scope: !6761)
!6769 = !DILocation(line: 851, column: 4, scope: !6761)
!6770 = !DILocation(line: 852, column: 2, scope: !6761)
!6771 = !DILocation(line: 855, column: 11, scope: !6772)
!6772 = distinct !DILexicalBlock(scope: !6620, file: !3, line: 855, column: 11)
!6773 = !DILocation(line: 855, column: 11, scope: !6620)
!6774 = !DILocation(line: 856, column: 2, scope: !6772)
!6775 = !DILocation(line: 858, column: 11, scope: !6776)
!6776 = distinct !DILexicalBlock(scope: !6620, file: !3, line: 858, column: 11)
!6777 = !DILocation(line: 858, column: 27, scope: !6776)
!6778 = !DILocation(line: 858, column: 11, scope: !6620)
!6779 = !DILocation(line: 859, column: 32, scope: !6776)
!6780 = !DILocation(line: 859, column: 20, scope: !6776)
!6781 = !DILocation(line: 859, column: 2, scope: !6776)
!6782 = !DILocation(line: 859, column: 18, scope: !6776)
!6783 = !DILocation(line: 861, column: 11, scope: !6630)
!6784 = !DILocation(line: 0, scope: !6620)
!6785 = !DILocation(line: 861, column: 27, scope: !6630)
!6786 = !DILocation(line: 861, column: 42, scope: !6630)
!6787 = !DILocation(line: 861, column: 45, scope: !6630)
!6788 = !DILocation(line: 861, column: 11, scope: !6620)
!6789 = !DILocation(line: 865, column: 28, scope: !6790)
!6790 = distinct !DILexicalBlock(scope: !6630, file: !3, line: 862, column: 2)
!6791 = !DILocation(line: 865, column: 4, scope: !6790)
!6792 = !DILocation(line: 865, column: 26, scope: !6790)
!6793 = !DILocation(line: 866, column: 4, scope: !6790)
!6794 = !DILocation(line: 866, column: 26, scope: !6790)
!6795 = !DILocation(line: 867, column: 2, scope: !6790)
!6796 = !DILocation(line: 868, column: 32, scope: !6629)
!6797 = !DILocation(line: 868, column: 16, scope: !6630)
!6798 = !DILocation(line: 874, column: 20, scope: !6628)
!6799 = !DILocation(line: 0, scope: !6628)
!6800 = !DILocation(line: 875, column: 21, scope: !6628)
!6801 = !DILocation(line: 876, column: 14, scope: !6628)
!6802 = !DILocation(line: 877, column: 4, scope: !6628)
!6803 = !DILocation(line: 878, column: 14, scope: !6628)
!6804 = !DILocation(line: 882, column: 8, scope: !6805)
!6805 = distinct !DILexicalBlock(scope: !6628, file: !3, line: 882, column: 8)
!6806 = !DILocation(line: 882, column: 42, scope: !6805)
!6807 = !DILocation(line: 882, column: 8, scope: !6628)
!6808 = !DILocation(line: 883, column: 12, scope: !6805)
!6809 = !DILocation(line: 883, column: 10, scope: !6805)
!6810 = !DILocation(line: 883, column: 6, scope: !6805)
!6811 = !DILocation(line: 0, scope: !6805)
!6812 = !DILocation(line: 885, column: 6, scope: !6805)
!6813 = !DILocation(line: 889, column: 8, scope: !6814)
!6814 = distinct !DILexicalBlock(scope: !6628, file: !3, line: 889, column: 8)
!6815 = !DILocation(line: 889, column: 18, scope: !6814)
!6816 = !DILocation(line: 889, column: 47, scope: !6814)
!6817 = !DILocation(line: 889, column: 22, scope: !6814)
!6818 = !DILocation(line: 889, column: 8, scope: !6628)
!6819 = !DILocation(line: 890, column: 10, scope: !6814)
!6820 = !DILocation(line: 890, column: 21, scope: !6814)
!6821 = !DILocation(line: 890, column: 6, scope: !6814)
!6822 = !DILocation(line: 892, column: 19, scope: !6628)
!6823 = !DILocation(line: 893, column: 2, scope: !6628)
!6824 = !DILocation(line: 898, column: 1, scope: !6598)
!6825 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !597, file: !597, line: 34, type: !6826, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6828)
!6826 = !DISubroutineType(types: !6827)
!6827 = !{null, !6252}
!6828 = !{!6829}
!6829 = !DILocalVariable(name: "vec_", arg: 1, scope: !6825, file: !597, line: 34, type: !6252)
!6830 = !DILocation(line: 0, scope: !6825)
!6831 = !DILocation(line: 34, column: 1, scope: !6832)
!6832 = distinct !DILexicalBlock(scope: !6825, file: !597, line: 34, column: 1)
!6833 = !DILocation(line: 34, column: 1, scope: !6825)
!6834 = distinct !DISubprogram(name: "maybe_inline_call_in_expr", scope: !3, file: !3, line: 4960, type: !5152, scopeLine: 4961, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6835)
!6835 = !{!6836, !6837, !6838, !6841, !6848, !6849, !6850, !6851}
!6836 = !DILocalVariable(name: "exp", arg: 1, scope: !6834, file: !3, line: 4960, type: !704)
!6837 = !DILocalVariable(name: "fn", scope: !6834, file: !3, line: 4962, type: !704)
!6838 = !DILocalVariable(name: "decl_map", scope: !6839, file: !3, line: 4967, type: !1645)
!6839 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 4966, column: 5)
!6840 = distinct !DILexicalBlock(scope: !6834, file: !3, line: 4965, column: 7)
!6841 = !DILocalVariable(name: "iter", scope: !6839, file: !3, line: 4968, type: !6842)
!6842 = !DIDerivedType(tag: DW_TAG_typedef, name: "call_expr_arg_iterator", file: !135, line: 5364, baseType: !6843)
!6843 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "call_expr_arg_iterator_d", file: !135, line: 5360, size: 128, elements: !6844)
!6844 = !{!6845, !6846, !6847}
!6845 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !6843, file: !135, line: 5361, baseType: !704, size: 64)
!6846 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !6843, file: !135, line: 5362, baseType: !696, size: 32, offset: 64)
!6847 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !6843, file: !135, line: 5363, baseType: !696, size: 32, offset: 96)
!6848 = !DILocalVariable(name: "id", scope: !6839, file: !3, line: 4969, type: !2096)
!6849 = !DILocalVariable(name: "param", scope: !6839, file: !3, line: 4970, type: !704)
!6850 = !DILocalVariable(name: "arg", scope: !6839, file: !3, line: 4970, type: !704)
!6851 = !DILocalVariable(name: "t", scope: !6839, file: !3, line: 4970, type: !704)
!6852 = !DILocation(line: 0, scope: !6834)
!6853 = !DILocation(line: 4962, column: 13, scope: !6834)
!6854 = !DILocation(line: 4965, column: 7, scope: !6840)
!6855 = !DILocation(line: 4965, column: 10, scope: !6840)
!6856 = !DILocation(line: 4965, column: 13, scope: !6840)
!6857 = !DILocation(line: 4965, column: 32, scope: !6840)
!6858 = !DILocation(line: 4965, column: 35, scope: !6840)
!6859 = !DILocation(line: 4965, column: 7, scope: !6834)
!6860 = !DILocation(line: 4967, column: 40, scope: !6839)
!6861 = !DILocation(line: 0, scope: !6839)
!6862 = !DILocation(line: 4968, column: 7, scope: !6839)
!6863 = !DILocation(line: 4969, column: 7, scope: !6839)
!6864 = !DILocation(line: 4973, column: 20, scope: !6865)
!6865 = distinct !DILexicalBlock(scope: !6839, file: !3, line: 4973, column: 7)
!6866 = !DILocation(line: 4973, column: 47, scope: !6865)
!6867 = !DILocation(line: 4973, column: 12, scope: !6865)
!6868 = !DILocation(line: 0, scope: !6865)
!6869 = !DILocation(line: 4973, column: 7, scope: !6865)
!6870 = !DILocation(line: 4976, column: 3, scope: !6871)
!6871 = distinct !DILexicalBlock(scope: !6865, file: !3, line: 4973, column: 7)
!6872 = !DILocation(line: 4976, column: 40, scope: !6871)
!6873 = !DILocation(line: 4975, column: 13, scope: !6871)
!6874 = !DILocation(line: 4975, column: 39, scope: !6871)
!6875 = !DILocation(line: 4973, column: 7, scope: !6871)
!6876 = distinct !{!6876, !6869, !6877}
!6877 = !DILocation(line: 4976, column: 42, scope: !6865)
!6878 = !DILocation(line: 4978, column: 7, scope: !6839)
!6879 = !DILocation(line: 4979, column: 10, scope: !6839)
!6880 = !DILocation(line: 4979, column: 17, scope: !6839)
!6881 = !DILocation(line: 4980, column: 19, scope: !6839)
!6882 = !DILocation(line: 4980, column: 10, scope: !6839)
!6883 = !DILocation(line: 4980, column: 17, scope: !6839)
!6884 = !DILocation(line: 4981, column: 21, scope: !6839)
!6885 = !DILocation(line: 4981, column: 10, scope: !6839)
!6886 = !DILocation(line: 4981, column: 19, scope: !6839)
!6887 = !DILocation(line: 4982, column: 10, scope: !6839)
!6888 = !DILocation(line: 4982, column: 19, scope: !6839)
!6889 = !DILocation(line: 4984, column: 10, scope: !6839)
!6890 = !DILocation(line: 4984, column: 20, scope: !6839)
!6891 = !DILocation(line: 4985, column: 10, scope: !6839)
!6892 = !DILocation(line: 4985, column: 37, scope: !6839)
!6893 = !DILocation(line: 4986, column: 10, scope: !6839)
!6894 = !DILocation(line: 4986, column: 28, scope: !6839)
!6895 = !DILocation(line: 4987, column: 10, scope: !6839)
!6896 = !DILocation(line: 4987, column: 37, scope: !6839)
!6897 = !DILocation(line: 4988, column: 10, scope: !6839)
!6898 = !DILocation(line: 4988, column: 38, scope: !6839)
!6899 = !DILocation(line: 4992, column: 10, scope: !6839)
!6900 = !DILocation(line: 4992, column: 21, scope: !6839)
!6901 = !DILocation(line: 4993, column: 10, scope: !6839)
!6902 = !DILocation(line: 4993, column: 25, scope: !6839)
!6903 = !DILocation(line: 4996, column: 10, scope: !6839)
!6904 = !DILocation(line: 4996, column: 19, scope: !6839)
!6905 = !DILocation(line: 4998, column: 11, scope: !6839)
!6906 = !DILocation(line: 4999, column: 7, scope: !6839)
!6907 = !DILocation(line: 5003, column: 11, scope: !6908)
!6908 = distinct !DILexicalBlock(scope: !6839, file: !3, line: 5003, column: 11)
!6909 = !DILocation(line: 5003, column: 25, scope: !6908)
!6910 = !DILocation(line: 5003, column: 11, scope: !6839)
!6911 = !DILocation(line: 5004, column: 9, scope: !6908)
!6912 = !DILocation(line: 5004, column: 2, scope: !6908)
!6913 = !DILocation(line: 5005, column: 5, scope: !6840)
!6914 = !DILocation(line: 5007, column: 4, scope: !6834)
!6915 = !DILocation(line: 5008, column: 1, scope: !6834)
!6916 = distinct !DISubprogram(name: "first_call_expr_arg", scope: !135, file: !135, line: 5419, type: !6917, scopeLine: 5420, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6920)
!6917 = !DISubroutineType(types: !6918)
!6918 = !{!704, !704, !6919}
!6919 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6842, size: 64)
!6920 = !{!6921, !6922}
!6921 = !DILocalVariable(name: "exp", arg: 1, scope: !6916, file: !135, line: 5419, type: !704)
!6922 = !DILocalVariable(name: "iter", arg: 2, scope: !6916, file: !135, line: 5419, type: !6919)
!6923 = !DILocation(line: 0, scope: !6916)
!6924 = !DILocation(line: 5421, column: 3, scope: !6916)
!6925 = !DILocation(line: 5422, column: 10, scope: !6916)
!6926 = !DILocation(line: 5422, column: 3, scope: !6916)
!6927 = distinct !DISubprogram(name: "next_call_expr_arg", scope: !135, file: !135, line: 5393, type: !6928, scopeLine: 5394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6930)
!6928 = !DISubroutineType(types: !6929)
!6929 = !{!704, !6919}
!6930 = !{!6931, !6932}
!6931 = !DILocalVariable(name: "iter", arg: 1, scope: !6927, file: !135, line: 5393, type: !6919)
!6932 = !DILocalVariable(name: "result", scope: !6927, file: !135, line: 5395, type: !704)
!6933 = !DILocation(line: 0, scope: !6927)
!6934 = !DILocation(line: 5396, column: 13, scope: !6935)
!6935 = distinct !DILexicalBlock(scope: !6927, file: !135, line: 5396, column: 7)
!6936 = !DILocation(line: 5396, column: 24, scope: !6935)
!6937 = !DILocation(line: 5396, column: 15, scope: !6935)
!6938 = !DILocation(line: 5396, column: 7, scope: !6927)
!6939 = !DILocation(line: 5398, column: 12, scope: !6927)
!6940 = !DILocation(line: 5399, column: 10, scope: !6927)
!6941 = !DILocation(line: 5400, column: 3, scope: !6927)
!6942 = !DILocation(line: 5401, column: 1, scope: !6927)
!6943 = distinct !DISubprogram(name: "copy_tree_body", scope: !3, file: !3, line: 2203, type: !6944, scopeLine: 2204, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6946)
!6944 = !DISubroutineType(types: !6945)
!6945 = !{!704, !2095}
!6946 = !{!6947, !6948, !6949}
!6947 = !DILocalVariable(name: "id", arg: 1, scope: !6943, file: !3, line: 2203, type: !2095)
!6948 = !DILocalVariable(name: "fndecl", scope: !6943, file: !3, line: 2205, type: !704)
!6949 = !DILocalVariable(name: "body", scope: !6943, file: !3, line: 2206, type: !704)
!6950 = !DILocation(line: 0, scope: !6943)
!6951 = !DILocation(line: 2205, column: 21, scope: !6943)
!6952 = !DILocation(line: 2206, column: 3, scope: !6943)
!6953 = !DILocation(line: 2206, column: 15, scope: !6943)
!6954 = !DILocation(line: 2206, column: 8, scope: !6943)
!6955 = !DILocation(line: 2208, column: 3, scope: !6943)
!6956 = !DILocation(line: 2210, column: 10, scope: !6943)
!6957 = !DILocation(line: 2211, column: 1, scope: !6943)
!6958 = !DILocation(line: 2210, column: 3, scope: !6943)
!6959 = distinct !DISubprogram(name: "build_duplicate_type", scope: !3, file: !3, line: 5013, type: !5152, scopeLine: 5014, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6960)
!6960 = !{!6961, !6962}
!6961 = !DILocalVariable(name: "type", arg: 1, scope: !6959, file: !3, line: 5013, type: !704)
!6962 = !DILocalVariable(name: "id", scope: !6959, file: !3, line: 5015, type: !2097)
!6963 = !DILocation(line: 0, scope: !6959)
!6964 = !DILocation(line: 5015, column: 3, scope: !6959)
!6965 = !DILocation(line: 5017, column: 3, scope: !6959)
!6966 = !DILocation(line: 5018, column: 15, scope: !6959)
!6967 = !DILocation(line: 5018, column: 13, scope: !6959)
!6968 = !DILocation(line: 5019, column: 6, scope: !6959)
!6969 = !DILocation(line: 5019, column: 13, scope: !6959)
!6970 = !DILocation(line: 5020, column: 17, scope: !6959)
!6971 = !DILocation(line: 5020, column: 6, scope: !6959)
!6972 = !DILocation(line: 5020, column: 15, scope: !6959)
!6973 = !DILocation(line: 5021, column: 17, scope: !6959)
!6974 = !DILocation(line: 5021, column: 6, scope: !6959)
!6975 = !DILocation(line: 5021, column: 15, scope: !6959)
!6976 = !DILocation(line: 5022, column: 6, scope: !6959)
!6977 = !DILocation(line: 5022, column: 16, scope: !6959)
!6978 = !DILocation(line: 5023, column: 6, scope: !6959)
!6979 = !DILocation(line: 5023, column: 16, scope: !6959)
!6980 = !DILocation(line: 5025, column: 10, scope: !6959)
!6981 = !DILocation(line: 5027, column: 27, scope: !6959)
!6982 = !DILocation(line: 5027, column: 3, scope: !6959)
!6983 = !DILocation(line: 5028, column: 10, scope: !6984)
!6984 = distinct !DILexicalBlock(scope: !6959, file: !3, line: 5028, column: 7)
!6985 = !DILocation(line: 5028, column: 7, scope: !6984)
!6986 = !DILocation(line: 5028, column: 7, scope: !6959)
!6987 = !DILocation(line: 5029, column: 5, scope: !6984)
!6988 = !DILocation(line: 5031, column: 3, scope: !6959)
!6989 = !DILocation(line: 5031, column: 25, scope: !6959)
!6990 = !DILocation(line: 5034, column: 1, scope: !6959)
!6991 = !DILocation(line: 5033, column: 3, scope: !6959)
!6992 = distinct !DISubprogram(name: "tree_can_inline_p", scope: !3, file: !3, line: 5040, type: !6993, scopeLine: 5041, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6995)
!6993 = !DISubroutineType(types: !6994)
!6994 = !{!695, !2107}
!6995 = !{!6996, !6997, !6998}
!6996 = !DILocalVariable(name: "e", arg: 1, scope: !6992, file: !3, line: 5040, type: !2107)
!6997 = !DILocalVariable(name: "caller", scope: !6992, file: !3, line: 5069, type: !704)
!6998 = !DILocalVariable(name: "callee", scope: !6992, file: !3, line: 5069, type: !704)
!6999 = !DILocation(line: 0, scope: !6992)
!7000 = !DILocation(line: 5071, column: 15, scope: !6992)
!7001 = !DILocation(line: 5071, column: 23, scope: !6992)
!7002 = !DILocation(line: 5072, column: 15, scope: !6992)
!7003 = !DILocation(line: 5072, column: 23, scope: !6992)
!7004 = !DILocation(line: 5076, column: 7, scope: !7005)
!7005 = distinct !DILexicalBlock(scope: !6992, file: !3, line: 5076, column: 7)
!7006 = !DILocation(line: 5077, column: 7, scope: !7005)
!7007 = !DILocation(line: 5077, column: 10, scope: !7005)
!7008 = !DILocation(line: 5078, column: 7, scope: !7005)
!7009 = !DILocation(line: 5079, column: 4, scope: !7005)
!7010 = !DILocation(line: 5076, column: 7, scope: !6992)
!7011 = !DILocation(line: 5081, column: 10, scope: !7012)
!7012 = distinct !DILexicalBlock(scope: !7005, file: !3, line: 5080, column: 5)
!7013 = !DILocation(line: 5081, column: 24, scope: !7012)
!7014 = !DILocation(line: 5082, column: 41, scope: !7012)
!7015 = !DILocation(line: 5082, column: 7, scope: !7012)
!7016 = !DILocation(line: 5083, column: 7, scope: !7012)
!7017 = !DILocation(line: 5087, column: 30, scope: !7018)
!7018 = distinct !DILexicalBlock(scope: !6992, file: !3, line: 5087, column: 7)
!7019 = !DILocation(line: 5087, column: 8, scope: !7018)
!7020 = !DILocation(line: 5087, column: 7, scope: !6992)
!7021 = !DILocation(line: 5089, column: 10, scope: !7022)
!7022 = distinct !DILexicalBlock(scope: !7018, file: !3, line: 5088, column: 5)
!7023 = !DILocation(line: 5089, column: 24, scope: !7022)
!7024 = !DILocation(line: 5090, column: 41, scope: !7022)
!7025 = !DILocation(line: 5090, column: 7, scope: !7022)
!7026 = !DILocation(line: 5091, column: 10, scope: !7022)
!7027 = !DILocation(line: 5091, column: 36, scope: !7022)
!7028 = !DILocation(line: 5092, column: 7, scope: !7022)
!7029 = !DILocation(line: 5095, column: 10, scope: !7030)
!7030 = distinct !DILexicalBlock(scope: !6992, file: !3, line: 5095, column: 7)
!7031 = !DILocation(line: 5095, column: 7, scope: !7030)
!7032 = !DILocation(line: 5096, column: 7, scope: !7030)
!7033 = !DILocation(line: 5096, column: 11, scope: !7030)
!7034 = !DILocation(line: 5095, column: 7, scope: !6992)
!7035 = !DILocation(line: 5098, column: 10, scope: !7036)
!7036 = distinct !DILexicalBlock(scope: !7030, file: !3, line: 5097, column: 5)
!7037 = !DILocation(line: 5098, column: 24, scope: !7036)
!7038 = !DILocation(line: 5099, column: 41, scope: !7036)
!7039 = !DILocation(line: 5099, column: 7, scope: !7036)
!7040 = !DILocation(line: 5100, column: 10, scope: !7036)
!7041 = !DILocation(line: 5100, column: 36, scope: !7036)
!7042 = !DILocation(line: 5101, column: 7, scope: !7036)
!7043 = !DILocation(line: 5105, column: 1, scope: !6992)
!7044 = distinct !DISubprogram(name: "gimple_call_set_cannot_inline", scope: !597, file: !597, line: 2081, type: !7045, scopeLine: 2082, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7047)
!7045 = !DISubroutineType(types: !7046)
!7046 = !{null, !1028, !695}
!7047 = !{!7048, !7049}
!7048 = !DILocalVariable(name: "s", arg: 1, scope: !7044, file: !597, line: 2081, type: !1028)
!7049 = !DILocalVariable(name: "inlinable_p", arg: 2, scope: !7044, file: !597, line: 2081, type: !695)
!7050 = !DILocation(line: 0, scope: !7044)
!7051 = !DILocation(line: 0, scope: !7052)
!7052 = distinct !DILexicalBlock(scope: !7044, file: !597, line: 2084, column: 7)
!7053 = !DILocation(line: 2085, column: 23, scope: !7052)
!7054 = !DILocation(line: 2088, column: 1, scope: !7044)
!7055 = distinct !DISubprogram(name: "gimple_seq_first", scope: !597, file: !597, line: 159, type: !7056, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7061)
!7056 = !DISubroutineType(types: !7057)
!7057 = !{!1023, !7058}
!7058 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !705, line: 67, baseType: !7059)
!7059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7060, size: 64)
!7060 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1020)
!7061 = !{!7062}
!7062 = !DILocalVariable(name: "s", arg: 1, scope: !7055, file: !597, line: 159, type: !7058)
!7063 = !DILocation(line: 0, scope: !7055)
!7064 = !DILocation(line: 161, column: 10, scope: !7055)
!7065 = !DILocation(line: 161, column: 17, scope: !7055)
!7066 = !DILocation(line: 161, column: 3, scope: !7055)
!7067 = distinct !DISubprogram(name: "gimple_bb", scope: !597, file: !597, line: 1112, type: !7068, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7070)
!7068 = !DISubroutineType(types: !7069)
!7069 = !{!992, !4433}
!7070 = !{!7071}
!7071 = !DILocalVariable(name: "g", arg: 1, scope: !7067, file: !597, line: 1112, type: !4433)
!7072 = !DILocation(line: 0, scope: !7067)
!7073 = !DILocation(line: 1114, column: 20, scope: !7067)
!7074 = !DILocation(line: 1114, column: 3, scope: !7067)
!7075 = distinct !DISubprogram(name: "make_ssa_name", scope: !3300, file: !3300, line: 1245, type: !7076, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7078)
!7076 = !DISubroutineType(types: !7077)
!7077 = !{!704, !704, !1028}
!7078 = !{!7079, !7080}
!7079 = !DILocalVariable(name: "var", arg: 1, scope: !7075, file: !3300, line: 1245, type: !704)
!7080 = !DILocalVariable(name: "stmt", arg: 2, scope: !7075, file: !3300, line: 1245, type: !1028)
!7081 = !DILocation(line: 0, scope: !7075)
!7082 = !DILocation(line: 1247, column: 28, scope: !7075)
!7083 = !DILocation(line: 1247, column: 10, scope: !7075)
!7084 = !DILocation(line: 1247, column: 3, scope: !7075)
!7085 = distinct !DISubprogram(name: "gimple_nop_p", scope: !597, file: !597, line: 4304, type: !7086, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7088)
!7086 = !DISubroutineType(types: !7087)
!7087 = !{!695, !4433}
!7088 = !{!7089}
!7089 = !DILocalVariable(name: "g", arg: 1, scope: !7085, file: !597, line: 4304, type: !4433)
!7090 = !DILocation(line: 0, scope: !7085)
!7091 = !DILocation(line: 4306, column: 10, scope: !7085)
!7092 = !DILocation(line: 4306, column: 26, scope: !7085)
!7093 = !DILocation(line: 4306, column: 3, scope: !7085)
!7094 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !337, file: !337, line: 150, type: !7095, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7099)
!7095 = !DISubroutineType(types: !7096)
!7096 = !{!1008, !7097, !7}
!7097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7098, size: 64)
!7098 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1001)
!7099 = !{!7100, !7101}
!7100 = !DILocalVariable(name: "vec_", arg: 1, scope: !7094, file: !337, line: 150, type: !7097)
!7101 = !DILocalVariable(name: "ix_", arg: 2, scope: !7094, file: !337, line: 150, type: !7)
!7102 = !DILocation(line: 0, scope: !7094)
!7103 = !DILocation(line: 150, column: 1, scope: !7094)
!7104 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !337, file: !337, line: 150, type: !7105, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7107)
!7105 = !DISubroutineType(types: !7106)
!7106 = !{!7, !7097}
!7107 = !{!7108}
!7108 = !DILocalVariable(name: "vec_", arg: 1, scope: !7104, file: !337, line: 150, type: !7097)
!7109 = !DILocation(line: 0, scope: !7104)
!7110 = !DILocation(line: 150, column: 1, scope: !7104)
!7111 = distinct !DISubprogram(name: "gsi_last_bb", scope: !597, file: !597, line: 4450, type: !4696, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7112)
!7112 = !{!7113, !7114, !7115}
!7113 = !DILocalVariable(name: "bb", arg: 1, scope: !7111, file: !597, line: 4450, type: !1584)
!7114 = !DILocalVariable(name: "i", scope: !7111, file: !597, line: 4452, type: !2373)
!7115 = !DILocalVariable(name: "seq", scope: !7111, file: !597, line: 4453, type: !1018)
!7116 = !DILocation(line: 0, scope: !7111)
!7117 = !DILocation(line: 4452, column: 24, scope: !7111)
!7118 = !DILocation(line: 4455, column: 9, scope: !7111)
!7119 = !DILocation(line: 4456, column: 11, scope: !7111)
!7120 = !DILocation(line: 4456, column: 5, scope: !7111)
!7121 = !DILocation(line: 4456, column: 9, scope: !7111)
!7122 = !DILocation(line: 4457, column: 5, scope: !7111)
!7123 = !DILocation(line: 4457, column: 9, scope: !7111)
!7124 = !DILocation(line: 4458, column: 5, scope: !7111)
!7125 = !DILocation(line: 4458, column: 8, scope: !7111)
!7126 = !DILocation(line: 4461, column: 1, scope: !7111)
!7127 = distinct !DISubprogram(name: "bb_seq", scope: !597, file: !597, line: 237, type: !7128, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7130)
!7128 = !DISubroutineType(types: !7129)
!7129 = !{!1018, !6439}
!7130 = !{!7131}
!7131 = !DILocalVariable(name: "bb", arg: 1, scope: !7127, file: !597, line: 237, type: !6439)
!7132 = !DILocation(line: 0, scope: !7127)
!7133 = !DILocation(line: 239, column: 17, scope: !7127)
!7134 = !DILocation(line: 239, column: 23, scope: !7127)
!7135 = !DILocation(line: 239, column: 33, scope: !7127)
!7136 = !DILocation(line: 239, column: 43, scope: !7127)
!7137 = !DILocation(line: 239, column: 36, scope: !7127)
!7138 = !DILocation(line: 239, column: 10, scope: !7127)
!7139 = !DILocation(line: 239, column: 68, scope: !7127)
!7140 = !DILocation(line: 239, column: 3, scope: !7127)
!7141 = distinct !DISubprogram(name: "gimple_seq_last", scope: !597, file: !597, line: 178, type: !7056, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7142)
!7142 = !{!7143}
!7143 = !DILocalVariable(name: "s", arg: 1, scope: !7141, file: !597, line: 178, type: !7058)
!7144 = !DILocation(line: 0, scope: !7141)
!7145 = !DILocation(line: 180, column: 10, scope: !7141)
!7146 = !DILocation(line: 180, column: 17, scope: !7141)
!7147 = !DILocation(line: 180, column: 3, scope: !7141)
!7148 = distinct !DISubprogram(name: "tsi_start", scope: !3921, file: !3921, line: 38, type: !7149, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7151)
!7149 = !DISubroutineType(types: !7150)
!7150 = !{!3920, !704}
!7151 = !{!7152, !7153}
!7152 = !DILocalVariable(name: "t", arg: 1, scope: !7148, file: !3921, line: 38, type: !704)
!7153 = !DILocalVariable(name: "i", scope: !7148, file: !3921, line: 40, type: !3920)
!7154 = !DILocation(line: 0, scope: !7148)
!7155 = !DILocation(line: 42, column: 11, scope: !7148)
!7156 = !DILocation(line: 45, column: 3, scope: !7148)
!7157 = distinct !DISubprogram(name: "tsi_end_p", scope: !3921, file: !3921, line: 60, type: !7158, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7160)
!7158 = !DISubroutineType(types: !7159)
!7159 = !{!695, !3920}
!7160 = !{!7161}
!7161 = !DILocalVariable(name: "i", arg: 1, scope: !7157, file: !3921, line: 60, type: !3920)
!7162 = !DILocation(line: 62, column: 16, scope: !7157)
!7163 = !DILocation(line: 62, column: 10, scope: !7157)
!7164 = !DILocation(line: 62, column: 3, scope: !7157)
!7165 = distinct !DISubprogram(name: "tsi_stmt", scope: !3921, file: !3921, line: 90, type: !7166, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7168)
!7166 = !DISubroutineType(types: !7167)
!7167 = !{!704, !3920}
!7168 = !{!7169}
!7169 = !DILocalVariable(name: "i", arg: 1, scope: !7165, file: !3921, line: 90, type: !3920)
!7170 = !DILocation(line: 92, column: 17, scope: !7165)
!7171 = !DILocation(line: 92, column: 3, scope: !7165)
!7172 = distinct !DISubprogram(name: "tsi_next", scope: !3921, file: !3921, line: 72, type: !7173, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7176)
!7173 = !DISubroutineType(types: !7174)
!7174 = !{null, !7175}
!7175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3920, size: 64)
!7176 = !{!7177}
!7177 = !DILocalVariable(name: "i", arg: 1, scope: !7172, file: !3921, line: 72, type: !7175)
!7178 = !DILocation(line: 0, scope: !7172)
!7179 = !DILocation(line: 74, column: 15, scope: !7172)
!7180 = !DILocation(line: 74, column: 20, scope: !7172)
!7181 = !DILocation(line: 74, column: 10, scope: !7172)
!7182 = !DILocation(line: 75, column: 1, scope: !7172)
!7183 = distinct !DISubprogram(name: "remap_block", scope: !3, file: !3, line: 582, type: !7184, scopeLine: 583, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7186)
!7184 = !DISubroutineType(types: !7185)
!7185 = !{null, !703, !2095}
!7186 = !{!7187, !7188, !7189, !7190}
!7187 = !DILocalVariable(name: "block", arg: 1, scope: !7183, file: !3, line: 582, type: !703)
!7188 = !DILocalVariable(name: "id", arg: 2, scope: !7183, file: !3, line: 582, type: !2095)
!7189 = !DILocalVariable(name: "old_block", scope: !7183, file: !3, line: 584, type: !704)
!7190 = !DILocalVariable(name: "new_block", scope: !7183, file: !3, line: 585, type: !704)
!7191 = !DILocation(line: 0, scope: !7183)
!7192 = !DILocation(line: 588, column: 15, scope: !7183)
!7193 = !DILocation(line: 589, column: 15, scope: !7183)
!7194 = !DILocation(line: 590, column: 27, scope: !7183)
!7195 = !DILocation(line: 590, column: 3, scope: !7183)
!7196 = !DILocation(line: 590, column: 25, scope: !7183)
!7197 = !DILocation(line: 591, column: 3, scope: !7183)
!7198 = !DILocation(line: 591, column: 37, scope: !7183)
!7199 = !DILocation(line: 592, column: 39, scope: !7183)
!7200 = !DILocation(line: 592, column: 3, scope: !7183)
!7201 = !DILocation(line: 592, column: 37, scope: !7183)
!7202 = !DILocation(line: 594, column: 7, scope: !7183)
!7203 = !DILocation(line: 593, column: 3, scope: !7183)
!7204 = !DILocation(line: 594, column: 5, scope: !7183)
!7205 = !DILocation(line: 595, column: 10, scope: !7183)
!7206 = !DILocation(line: 598, column: 41, scope: !7183)
!7207 = !DILocation(line: 598, column: 28, scope: !7183)
!7208 = !DILocation(line: 598, column: 3, scope: !7183)
!7209 = !DILocation(line: 598, column: 26, scope: !7183)
!7210 = !DILocation(line: 602, column: 11, scope: !7211)
!7211 = distinct !DILexicalBlock(scope: !7183, file: !3, line: 602, column: 7)
!7212 = !DILocation(line: 602, column: 7, scope: !7211)
!7213 = !DILocation(line: 602, column: 7, scope: !7183)
!7214 = !DILocation(line: 603, column: 5, scope: !7211)
!7215 = !DILocation(line: 606, column: 3, scope: !7183)
!7216 = !DILocation(line: 607, column: 1, scope: !7183)
!7217 = distinct !DISubprogram(name: "remap_decls", scope: !3, file: !3, line: 527, type: !7218, scopeLine: 528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7221)
!7218 = !DISubroutineType(types: !7219)
!7219 = !{!704, !704, !7220, !2095}
!7220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1549, size: 64)
!7221 = !{!7222, !7223, !7224, !7225, !7226, !7227}
!7222 = !DILocalVariable(name: "decls", arg: 1, scope: !7217, file: !3, line: 527, type: !704)
!7223 = !DILocalVariable(name: "nonlocalized_list", arg: 2, scope: !7217, file: !3, line: 527, type: !7220)
!7224 = !DILocalVariable(name: "id", arg: 3, scope: !7217, file: !3, line: 527, type: !2095)
!7225 = !DILocalVariable(name: "old_var", scope: !7217, file: !3, line: 529, type: !704)
!7226 = !DILocalVariable(name: "new_decls", scope: !7217, file: !3, line: 530, type: !704)
!7227 = !DILocalVariable(name: "new_var", scope: !7228, file: !3, line: 535, type: !704)
!7228 = distinct !DILexicalBlock(scope: !7229, file: !3, line: 534, column: 5)
!7229 = distinct !DILexicalBlock(scope: !7230, file: !3, line: 533, column: 3)
!7230 = distinct !DILexicalBlock(scope: !7217, file: !3, line: 533, column: 3)
!7231 = !DILocation(line: 0, scope: !7217)
!7232 = !DILocation(line: 0, scope: !7233)
!7233 = distinct !DILexicalBlock(scope: !7234, file: !3, line: 544, column: 8)
!7234 = distinct !DILexicalBlock(scope: !7235, file: !3, line: 538, column: 2)
!7235 = distinct !DILexicalBlock(scope: !7228, file: !3, line: 537, column: 11)
!7236 = !DILocation(line: 0, scope: !7237)
!7237 = distinct !DILexicalBlock(scope: !7228, file: !3, line: 558, column: 11)
!7238 = !DILocation(line: 533, column: 8, scope: !7230)
!7239 = !DILocation(line: 0, scope: !7230)
!7240 = !DILocation(line: 530, column: 8, scope: !7217)
!7241 = !DILocation(line: 533, column: 3, scope: !7230)
!7242 = !DILocation(line: 537, column: 11, scope: !7235)
!7243 = !DILocation(line: 537, column: 11, scope: !7228)
!7244 = !DILocation(line: 539, column: 8, scope: !7245)
!7245 = distinct !DILexicalBlock(scope: !7234, file: !3, line: 539, column: 8)
!7246 = !DILocation(line: 539, column: 28, scope: !7245)
!7247 = !DILocation(line: 540, column: 8, scope: !7245)
!7248 = !DILocation(line: 540, column: 13, scope: !7245)
!7249 = !DILocation(line: 541, column: 8, scope: !7245)
!7250 = !DILocation(line: 541, column: 12, scope: !7245)
!7251 = !DILocation(line: 541, column: 30, scope: !7245)
!7252 = !DILocation(line: 541, column: 51, scope: !7245)
!7253 = !DILocation(line: 541, column: 34, scope: !7245)
!7254 = !DILocation(line: 539, column: 8, scope: !7234)
!7255 = !DILocation(line: 542, column: 26, scope: !7245)
!7256 = !DILocation(line: 542, column: 6, scope: !7245)
!7257 = !DILocation(line: 542, column: 12, scope: !7245)
!7258 = !DILocation(line: 542, column: 24, scope: !7245)
!7259 = !DILocation(line: 544, column: 10, scope: !7233)
!7260 = !DILocation(line: 544, column: 22, scope: !7233)
!7261 = !DILocation(line: 544, column: 39, scope: !7233)
!7262 = !DILocation(line: 544, column: 19, scope: !7233)
!7263 = !DILocation(line: 545, column: 12, scope: !7233)
!7264 = !DILocation(line: 546, column: 8, scope: !7233)
!7265 = !DILocation(line: 547, column: 6, scope: !7233)
!7266 = !DILocation(line: 552, column: 17, scope: !7228)
!7267 = !DILocation(line: 0, scope: !7228)
!7268 = !DILocation(line: 558, column: 26, scope: !7237)
!7269 = !DILocation(line: 558, column: 19, scope: !7237)
!7270 = !DILocation(line: 558, column: 11, scope: !7228)
!7271 = !DILocation(line: 560, column: 17, scope: !7272)
!7272 = distinct !DILexicalBlock(scope: !7237, file: !3, line: 560, column: 16)
!7273 = !DILocation(line: 560, column: 16, scope: !7237)
!7274 = !DILocation(line: 569, column: 4, scope: !7275)
!7275 = distinct !DILexicalBlock(scope: !7272, file: !3, line: 568, column: 2)
!7276 = !DILocation(line: 570, column: 4, scope: !7275)
!7277 = !DILocation(line: 570, column: 25, scope: !7275)
!7278 = !DILocation(line: 562, column: 10, scope: !7279)
!7279 = distinct !DILexicalBlock(scope: !7280, file: !3, line: 562, column: 8)
!7280 = distinct !DILexicalBlock(scope: !7272, file: !3, line: 561, column: 9)
!7281 = !DILocation(line: 562, column: 22, scope: !7279)
!7282 = !DILocation(line: 562, column: 39, scope: !7279)
!7283 = !DILocation(line: 562, column: 19, scope: !7279)
!7284 = !DILocation(line: 563, column: 12, scope: !7279)
!7285 = !DILocation(line: 564, column: 8, scope: !7279)
!7286 = !DILocation(line: 565, column: 6, scope: !7279)
!7287 = !DILocation(line: 533, column: 44, scope: !7229)
!7288 = !DILocation(line: 533, column: 3, scope: !7229)
!7289 = distinct !{!7289, !7241, !7290}
!7290 = !DILocation(line: 573, column: 5, scope: !7230)
!7291 = !DILocation(line: 575, column: 10, scope: !7217)
!7292 = !DILocation(line: 575, column: 3, scope: !7217)
!7293 = distinct !DISubprogram(name: "VEC_tree_gc_copy", scope: !135, file: !135, line: 183, type: !7294, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7297)
!7294 = !DISubroutineType(types: !7295)
!7295 = !{!1549, !7296}
!7296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1554, size: 64)
!7297 = !{!7298, !7299, !7300}
!7298 = !DILocalVariable(name: "vec_", arg: 1, scope: !7293, file: !135, line: 183, type: !7296)
!7299 = !DILocalVariable(name: "len_", scope: !7293, file: !135, line: 183, type: !1172)
!7300 = !DILocalVariable(name: "new_vec_", scope: !7293, file: !135, line: 183, type: !1549)
!7301 = !DILocation(line: 0, scope: !7293)
!7302 = !DILocation(line: 183, column: 1, scope: !7293)
!7303 = !DILocation(line: 183, column: 1, scope: !7304)
!7304 = distinct !DILexicalBlock(scope: !7293, file: !135, line: 183, column: 1)
!7305 = !DILocation(line: 183, column: 1, scope: !7306)
!7306 = distinct !DILexicalBlock(scope: !7304, file: !135, line: 183, column: 1)
!7307 = distinct !DISubprogram(name: "var_ann", scope: !3300, file: !3300, line: 132, type: !7308, scopeLine: 133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7310)
!7308 = !DISubroutineType(types: !7309)
!7309 = !{!3318, !6082}
!7310 = !{!7311, !7312}
!7311 = !DILocalVariable(name: "t", arg: 1, scope: !7307, file: !3300, line: 132, type: !6082)
!7312 = !DILocalVariable(name: "p", scope: !7307, file: !3300, line: 134, type: !7313)
!7313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7314, size: 64)
!7314 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3318)
!7315 = !DILocation(line: 0, scope: !7307)
!7316 = !DILocation(line: 134, column: 24, scope: !7307)
!7317 = !DILocation(line: 135, column: 10, scope: !7307)
!7318 = !DILocation(line: 135, column: 14, scope: !7307)
!7319 = !DILocation(line: 135, column: 3, scope: !7307)
!7320 = distinct !DISubprogram(name: "VEC_tree_gc_safe_push", scope: !135, file: !135, line: 183, type: !7321, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7323)
!7321 = !DISubroutineType(types: !7322)
!7322 = !{!703, !7220, !704}
!7323 = !{!7324, !7325}
!7324 = !DILocalVariable(name: "vec_", arg: 1, scope: !7320, file: !135, line: 183, type: !7220)
!7325 = !DILocalVariable(name: "obj_", arg: 2, scope: !7320, file: !135, line: 183, type: !704)
!7326 = !DILocation(line: 0, scope: !7320)
!7327 = !DILocation(line: 183, column: 1, scope: !7320)
!7328 = distinct !DISubprogram(name: "VEC_tree_gc_reserve", scope: !135, file: !135, line: 183, type: !7329, scopeLine: 183, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7331)
!7329 = !DISubroutineType(types: !7330)
!7330 = !{!696, !7220, !696}
!7331 = !{!7332, !7333, !7334}
!7332 = !DILocalVariable(name: "vec_", arg: 1, scope: !7328, file: !135, line: 183, type: !7220)
!7333 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7328, file: !135, line: 183, type: !696)
!7334 = !DILocalVariable(name: "extend", scope: !7328, file: !135, line: 183, type: !696)
!7335 = !DILocation(line: 0, scope: !7328)
!7336 = !DILocation(line: 183, column: 1, scope: !7328)
!7337 = !DILocation(line: 183, column: 1, scope: !7338)
!7338 = distinct !DILexicalBlock(scope: !7328, file: !135, line: 183, column: 1)
!7339 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !7340, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7342)
!7340 = !DISubroutineType(types: !7341)
!7341 = !{!703, !7296, !704}
!7342 = !{!7343, !7344, !7345}
!7343 = !DILocalVariable(name: "vec_", arg: 1, scope: !7339, file: !135, line: 182, type: !7296)
!7344 = !DILocalVariable(name: "obj_", arg: 2, scope: !7339, file: !135, line: 182, type: !704)
!7345 = !DILocalVariable(name: "slot_", scope: !7339, file: !135, line: 182, type: !703)
!7346 = !DILocation(line: 0, scope: !7339)
!7347 = !DILocation(line: 182, column: 1, scope: !7339)
!7348 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !7349, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7351)
!7349 = !DISubroutineType(types: !7350)
!7350 = !{!696, !7296, !696}
!7351 = !{!7352, !7353}
!7352 = !DILocalVariable(name: "vec_", arg: 1, scope: !7348, file: !135, line: 182, type: !7296)
!7353 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7348, file: !135, line: 182, type: !696)
!7354 = !DILocation(line: 0, scope: !7348)
!7355 = !DILocation(line: 182, column: 1, scope: !7348)
!7356 = distinct !DISubprogram(name: "gimple_return_retval", scope: !597, file: !597, line: 4253, type: !4440, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7357)
!7357 = !{!7358}
!7358 = !DILocalVariable(name: "gs", arg: 1, scope: !7356, file: !597, line: 4253, type: !4433)
!7359 = !DILocation(line: 0, scope: !7356)
!7360 = !DILocation(line: 4256, column: 10, scope: !7356)
!7361 = !DILocation(line: 4256, column: 3, scope: !7356)
!7362 = distinct !DISubprogram(name: "gimple_has_substatements", scope: !597, file: !597, line: 1083, type: !7363, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7365)
!7363 = !DISubroutineType(types: !7364)
!7364 = !{!695, !1028}
!7365 = !{!7366}
!7366 = !DILocalVariable(name: "g", arg: 1, scope: !7362, file: !597, line: 1083, type: !1028)
!7367 = !DILocation(line: 0, scope: !7362)
!7368 = !DILocation(line: 1085, column: 11, scope: !7362)
!7369 = !DILocation(line: 1085, column: 3, scope: !7362)
!7370 = !DILocation(line: 1104, column: 7, scope: !7371)
!7371 = distinct !DILexicalBlock(scope: !7362, file: !597, line: 1086, column: 5)
!7372 = !DILocation(line: 0, scope: !7371)
!7373 = !DILocation(line: 1106, column: 1, scope: !7362)
!7374 = distinct !DISubprogram(name: "copy_gimple_bind", scope: !3, file: !3, line: 692, type: !3534, scopeLine: 693, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7375)
!7375 = !{!7376, !7377, !7378, !7379, !7380, !7381, !7382}
!7376 = !DILocalVariable(name: "stmt", arg: 1, scope: !7374, file: !3, line: 692, type: !1028)
!7377 = !DILocalVariable(name: "id", arg: 2, scope: !7374, file: !3, line: 692, type: !2095)
!7378 = !DILocalVariable(name: "new_bind", scope: !7374, file: !3, line: 694, type: !1028)
!7379 = !DILocalVariable(name: "new_block", scope: !7374, file: !3, line: 695, type: !704)
!7380 = !DILocalVariable(name: "new_vars", scope: !7374, file: !3, line: 695, type: !704)
!7381 = !DILocalVariable(name: "body", scope: !7374, file: !3, line: 696, type: !1018)
!7382 = !DILocalVariable(name: "new_body", scope: !7374, file: !3, line: 696, type: !1018)
!7383 = !DILocation(line: 0, scope: !7374)
!7384 = !DILocation(line: 695, column: 3, scope: !7374)
!7385 = !DILocation(line: 700, column: 10, scope: !7374)
!7386 = !DILocation(line: 701, column: 14, scope: !7374)
!7387 = !DILocation(line: 703, column: 15, scope: !7374)
!7388 = !DILocation(line: 703, column: 13, scope: !7374)
!7389 = !DILocation(line: 704, column: 7, scope: !7390)
!7390 = distinct !DILexicalBlock(scope: !7374, file: !3, line: 704, column: 7)
!7391 = !DILocation(line: 704, column: 7, scope: !7374)
!7392 = !DILocation(line: 705, column: 5, scope: !7390)
!7393 = !DILocation(line: 709, column: 14, scope: !7374)
!7394 = !DILocation(line: 710, column: 7, scope: !7395)
!7395 = distinct !DILexicalBlock(scope: !7374, file: !3, line: 710, column: 7)
!7396 = !DILocation(line: 710, column: 7, scope: !7374)
!7397 = !DILocation(line: 711, column: 16, scope: !7395)
!7398 = !DILocation(line: 711, column: 5, scope: !7395)
!7399 = !DILocation(line: 713, column: 53, scope: !7374)
!7400 = !DILocation(line: 713, column: 14, scope: !7374)
!7401 = !DILocation(line: 716, column: 1, scope: !7374)
!7402 = !DILocation(line: 715, column: 3, scope: !7374)
!7403 = distinct !DISubprogram(name: "gimple_catch_types", scope: !597, file: !597, line: 2785, type: !4440, scopeLine: 2786, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7404)
!7404 = !{!7405}
!7405 = !DILocalVariable(name: "gs", arg: 1, scope: !7403, file: !597, line: 2785, type: !4433)
!7406 = !DILocation(line: 0, scope: !7403)
!7407 = !DILocation(line: 2788, column: 27, scope: !7403)
!7408 = !DILocation(line: 2788, column: 3, scope: !7403)
!7409 = distinct !DISubprogram(name: "gimple_eh_filter_types", scope: !597, file: !597, line: 2847, type: !4440, scopeLine: 2848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7410)
!7410 = !{!7411}
!7411 = !DILocalVariable(name: "gs", arg: 1, scope: !7409, file: !597, line: 2847, type: !4433)
!7412 = !DILocation(line: 0, scope: !7409)
!7413 = !DILocation(line: 2850, column: 31, scope: !7409)
!7414 = !DILocation(line: 2850, column: 3, scope: !7409)
!7415 = distinct !DISubprogram(name: "gimple_try_kind", scope: !597, file: !597, line: 2921, type: !7416, scopeLine: 2922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7418)
!7416 = !DISubroutineType(types: !7417)
!7417 = !{!648, !4433}
!7418 = !{!7419}
!7419 = !DILocalVariable(name: "gs", arg: 1, scope: !7415, file: !597, line: 2921, type: !4433)
!7420 = !DILocation(line: 0, scope: !7415)
!7421 = !DILocation(line: 2924, column: 46, scope: !7415)
!7422 = !DILocation(line: 2924, column: 54, scope: !7415)
!7423 = !DILocation(line: 2924, column: 3, scope: !7415)
!7424 = distinct !DISubprogram(name: "gimple_wce_cleanup", scope: !597, file: !597, line: 3009, type: !4612, scopeLine: 3010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7425)
!7425 = !{!7426}
!7426 = !DILocalVariable(name: "gs", arg: 1, scope: !7424, file: !597, line: 3009, type: !1028)
!7427 = !DILocation(line: 0, scope: !7424)
!7428 = !DILocation(line: 3012, column: 25, scope: !7424)
!7429 = !DILocation(line: 3012, column: 3, scope: !7424)
!7430 = distinct !DISubprogram(name: "gimple_omp_parallel_clauses", scope: !597, file: !597, line: 3604, type: !4440, scopeLine: 3605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7431)
!7431 = !{!7432}
!7432 = !DILocalVariable(name: "gs", arg: 1, scope: !7430, file: !597, line: 3604, type: !4433)
!7433 = !DILocation(line: 0, scope: !7430)
!7434 = !DILocation(line: 3607, column: 34, scope: !7430)
!7435 = !DILocation(line: 3607, column: 3, scope: !7430)
!7436 = distinct !DISubprogram(name: "gimple_omp_parallel_child_fn", scope: !597, file: !597, line: 3635, type: !4440, scopeLine: 3636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7437)
!7437 = !{!7438}
!7438 = !DILocalVariable(name: "gs", arg: 1, scope: !7436, file: !597, line: 3635, type: !4433)
!7439 = !DILocation(line: 0, scope: !7436)
!7440 = !DILocation(line: 3638, column: 34, scope: !7436)
!7441 = !DILocation(line: 3638, column: 3, scope: !7436)
!7442 = distinct !DISubprogram(name: "gimple_omp_parallel_data_arg", scope: !597, file: !597, line: 3666, type: !4440, scopeLine: 3667, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7443)
!7443 = !{!7444}
!7444 = !DILocalVariable(name: "gs", arg: 1, scope: !7442, file: !597, line: 3666, type: !4433)
!7445 = !DILocation(line: 0, scope: !7442)
!7446 = !DILocation(line: 3669, column: 34, scope: !7442)
!7447 = !DILocation(line: 3669, column: 3, scope: !7442)
!7448 = distinct !DISubprogram(name: "gimple_omp_task_clauses", scope: !597, file: !597, line: 3696, type: !4440, scopeLine: 3697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7449)
!7449 = !{!7450}
!7450 = !DILocalVariable(name: "gs", arg: 1, scope: !7448, file: !597, line: 3696, type: !4433)
!7451 = !DILocation(line: 0, scope: !7448)
!7452 = !DILocation(line: 3699, column: 34, scope: !7448)
!7453 = !DILocation(line: 3699, column: 3, scope: !7448)
!7454 = distinct !DISubprogram(name: "gimple_omp_task_child_fn", scope: !597, file: !597, line: 3727, type: !4440, scopeLine: 3728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7455)
!7455 = !{!7456}
!7456 = !DILocalVariable(name: "gs", arg: 1, scope: !7454, file: !597, line: 3727, type: !4433)
!7457 = !DILocation(line: 0, scope: !7454)
!7458 = !DILocation(line: 3730, column: 34, scope: !7454)
!7459 = !DILocation(line: 3730, column: 3, scope: !7454)
!7460 = distinct !DISubprogram(name: "gimple_omp_task_data_arg", scope: !597, file: !597, line: 3758, type: !4440, scopeLine: 3759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7461)
!7461 = !{!7462}
!7462 = !DILocalVariable(name: "gs", arg: 1, scope: !7460, file: !597, line: 3758, type: !4433)
!7463 = !DILocation(line: 0, scope: !7460)
!7464 = !DILocation(line: 3761, column: 34, scope: !7460)
!7465 = !DILocation(line: 3761, column: 3, scope: !7460)
!7466 = distinct !DISubprogram(name: "gimple_omp_task_copy_fn", scope: !597, file: !597, line: 3889, type: !4440, scopeLine: 3890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7467)
!7467 = !{!7468}
!7468 = !DILocalVariable(name: "gs", arg: 1, scope: !7466, file: !597, line: 3889, type: !4433)
!7469 = !DILocation(line: 0, scope: !7466)
!7470 = !DILocation(line: 3892, column: 30, scope: !7466)
!7471 = !DILocation(line: 3892, column: 3, scope: !7466)
!7472 = distinct !DISubprogram(name: "gimple_omp_task_arg_size", scope: !597, file: !597, line: 3919, type: !4440, scopeLine: 3920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7473)
!7473 = !{!7474}
!7474 = !DILocalVariable(name: "gs", arg: 1, scope: !7472, file: !597, line: 3919, type: !4433)
!7475 = !DILocation(line: 0, scope: !7472)
!7476 = !DILocation(line: 3922, column: 30, scope: !7472)
!7477 = !DILocation(line: 3922, column: 3, scope: !7472)
!7478 = distinct !DISubprogram(name: "gimple_omp_task_arg_align", scope: !597, file: !597, line: 3949, type: !4440, scopeLine: 3950, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7479)
!7479 = !{!7480}
!7480 = !DILocalVariable(name: "gs", arg: 1, scope: !7478, file: !597, line: 3949, type: !4433)
!7481 = !DILocation(line: 0, scope: !7478)
!7482 = !DILocation(line: 3952, column: 30, scope: !7478)
!7483 = !DILocation(line: 3952, column: 3, scope: !7478)
!7484 = distinct !DISubprogram(name: "gimple_omp_for_clauses", scope: !597, file: !597, line: 3410, type: !4440, scopeLine: 3411, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7485)
!7485 = !{!7486}
!7486 = !DILocalVariable(name: "gs", arg: 1, scope: !7484, file: !597, line: 3410, type: !4433)
!7487 = !DILocation(line: 0, scope: !7484)
!7488 = !DILocation(line: 3413, column: 29, scope: !7484)
!7489 = !DILocation(line: 3413, column: 3, scope: !7484)
!7490 = distinct !DISubprogram(name: "gimple_omp_for_collapse", scope: !597, file: !597, line: 3440, type: !7491, scopeLine: 3441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7493)
!7491 = !DISubroutineType(types: !7492)
!7492 = !{!1172, !1028}
!7493 = !{!7494}
!7494 = !DILocalVariable(name: "gs", arg: 1, scope: !7490, file: !597, line: 3440, type: !1028)
!7495 = !DILocation(line: 0, scope: !7490)
!7496 = !DILocation(line: 3443, column: 29, scope: !7490)
!7497 = !DILocation(line: 3443, column: 3, scope: !7490)
!7498 = distinct !DISubprogram(name: "gimple_omp_for_set_index", scope: !597, file: !597, line: 3472, type: !7499, scopeLine: 3473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7501)
!7499 = !DISubroutineType(types: !7500)
!7500 = !{null, !1028, !1172, !704}
!7501 = !{!7502, !7503, !7504}
!7502 = !DILocalVariable(name: "gs", arg: 1, scope: !7498, file: !597, line: 3472, type: !1028)
!7503 = !DILocalVariable(name: "i", arg: 2, scope: !7498, file: !597, line: 3472, type: !1172)
!7504 = !DILocalVariable(name: "index", arg: 3, scope: !7498, file: !597, line: 3472, type: !704)
!7505 = !DILocation(line: 0, scope: !7498)
!7506 = !DILocation(line: 3475, column: 3, scope: !7498)
!7507 = !DILocation(line: 3476, column: 22, scope: !7498)
!7508 = !DILocation(line: 3476, column: 30, scope: !7498)
!7509 = !DILocation(line: 3476, column: 36, scope: !7498)
!7510 = !DILocation(line: 3477, column: 1, scope: !7498)
!7511 = distinct !DISubprogram(name: "gimple_omp_for_index", scope: !597, file: !597, line: 3450, type: !7512, scopeLine: 3451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7514)
!7512 = !DISubroutineType(types: !7513)
!7513 = !{!704, !4433, !1172}
!7514 = !{!7515, !7516}
!7515 = !DILocalVariable(name: "gs", arg: 1, scope: !7511, file: !597, line: 3450, type: !4433)
!7516 = !DILocalVariable(name: "i", arg: 2, scope: !7511, file: !597, line: 3450, type: !1172)
!7517 = !DILocation(line: 0, scope: !7511)
!7518 = !DILocation(line: 3453, column: 3, scope: !7511)
!7519 = !DILocation(line: 3454, column: 29, scope: !7511)
!7520 = !DILocation(line: 3454, column: 37, scope: !7511)
!7521 = !DILocation(line: 3454, column: 3, scope: !7511)
!7522 = distinct !DISubprogram(name: "gimple_omp_for_set_initial", scope: !597, file: !597, line: 3505, type: !7499, scopeLine: 3506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7523)
!7523 = !{!7524, !7525, !7526}
!7524 = !DILocalVariable(name: "gs", arg: 1, scope: !7522, file: !597, line: 3505, type: !1028)
!7525 = !DILocalVariable(name: "i", arg: 2, scope: !7522, file: !597, line: 3505, type: !1172)
!7526 = !DILocalVariable(name: "initial", arg: 3, scope: !7522, file: !597, line: 3505, type: !704)
!7527 = !DILocation(line: 0, scope: !7522)
!7528 = !DILocation(line: 3508, column: 3, scope: !7522)
!7529 = !DILocation(line: 3509, column: 22, scope: !7522)
!7530 = !DILocation(line: 3509, column: 30, scope: !7522)
!7531 = !DILocation(line: 3509, column: 38, scope: !7522)
!7532 = !DILocation(line: 3510, column: 1, scope: !7522)
!7533 = distinct !DISubprogram(name: "gimple_omp_for_initial", scope: !597, file: !597, line: 3483, type: !7512, scopeLine: 3484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7534)
!7534 = !{!7535, !7536}
!7535 = !DILocalVariable(name: "gs", arg: 1, scope: !7533, file: !597, line: 3483, type: !4433)
!7536 = !DILocalVariable(name: "i", arg: 2, scope: !7533, file: !597, line: 3483, type: !1172)
!7537 = !DILocation(line: 0, scope: !7533)
!7538 = !DILocation(line: 3486, column: 3, scope: !7533)
!7539 = !DILocation(line: 3487, column: 29, scope: !7533)
!7540 = !DILocation(line: 3487, column: 37, scope: !7533)
!7541 = !DILocation(line: 3487, column: 3, scope: !7533)
!7542 = distinct !DISubprogram(name: "gimple_omp_for_set_final", scope: !597, file: !597, line: 3538, type: !7499, scopeLine: 3539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7543)
!7543 = !{!7544, !7545, !7546}
!7544 = !DILocalVariable(name: "gs", arg: 1, scope: !7542, file: !597, line: 3538, type: !1028)
!7545 = !DILocalVariable(name: "i", arg: 2, scope: !7542, file: !597, line: 3538, type: !1172)
!7546 = !DILocalVariable(name: "final", arg: 3, scope: !7542, file: !597, line: 3538, type: !704)
!7547 = !DILocation(line: 0, scope: !7542)
!7548 = !DILocation(line: 3541, column: 3, scope: !7542)
!7549 = !DILocation(line: 3542, column: 22, scope: !7542)
!7550 = !DILocation(line: 3542, column: 30, scope: !7542)
!7551 = !DILocation(line: 3542, column: 36, scope: !7542)
!7552 = !DILocation(line: 3543, column: 1, scope: !7542)
!7553 = distinct !DISubprogram(name: "gimple_omp_for_final", scope: !597, file: !597, line: 3516, type: !7512, scopeLine: 3517, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7554)
!7554 = !{!7555, !7556}
!7555 = !DILocalVariable(name: "gs", arg: 1, scope: !7553, file: !597, line: 3516, type: !4433)
!7556 = !DILocalVariable(name: "i", arg: 2, scope: !7553, file: !597, line: 3516, type: !1172)
!7557 = !DILocation(line: 0, scope: !7553)
!7558 = !DILocation(line: 3519, column: 3, scope: !7553)
!7559 = !DILocation(line: 3520, column: 29, scope: !7553)
!7560 = !DILocation(line: 3520, column: 37, scope: !7553)
!7561 = !DILocation(line: 3520, column: 3, scope: !7553)
!7562 = distinct !DISubprogram(name: "gimple_omp_for_set_incr", scope: !597, file: !597, line: 3571, type: !7499, scopeLine: 3572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7563)
!7563 = !{!7564, !7565, !7566}
!7564 = !DILocalVariable(name: "gs", arg: 1, scope: !7562, file: !597, line: 3571, type: !1028)
!7565 = !DILocalVariable(name: "i", arg: 2, scope: !7562, file: !597, line: 3571, type: !1172)
!7566 = !DILocalVariable(name: "incr", arg: 3, scope: !7562, file: !597, line: 3571, type: !704)
!7567 = !DILocation(line: 0, scope: !7562)
!7568 = !DILocation(line: 3574, column: 3, scope: !7562)
!7569 = !DILocation(line: 3575, column: 22, scope: !7562)
!7570 = !DILocation(line: 3575, column: 30, scope: !7562)
!7571 = !DILocation(line: 3575, column: 35, scope: !7562)
!7572 = !DILocation(line: 3576, column: 1, scope: !7562)
!7573 = distinct !DISubprogram(name: "gimple_omp_for_incr", scope: !597, file: !597, line: 3549, type: !7512, scopeLine: 3550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7574)
!7574 = !{!7575, !7576}
!7575 = !DILocalVariable(name: "gs", arg: 1, scope: !7573, file: !597, line: 3549, type: !4433)
!7576 = !DILocalVariable(name: "i", arg: 2, scope: !7573, file: !597, line: 3549, type: !1172)
!7577 = !DILocation(line: 0, scope: !7573)
!7578 = !DILocation(line: 3552, column: 3, scope: !7573)
!7579 = !DILocation(line: 3553, column: 29, scope: !7573)
!7580 = !DILocation(line: 3553, column: 37, scope: !7573)
!7581 = !DILocation(line: 3553, column: 3, scope: !7573)
!7582 = distinct !DISubprogram(name: "gimple_omp_for_set_cond", scope: !597, file: !597, line: 4073, type: !7583, scopeLine: 4074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7585)
!7583 = !DISubroutineType(types: !7584)
!7584 = !{null, !1028, !1172, !134}
!7585 = !{!7586, !7587, !7588}
!7586 = !DILocalVariable(name: "gs", arg: 1, scope: !7582, file: !597, line: 4073, type: !1028)
!7587 = !DILocalVariable(name: "i", arg: 2, scope: !7582, file: !597, line: 4073, type: !1172)
!7588 = !DILocalVariable(name: "cond", arg: 3, scope: !7582, file: !597, line: 4073, type: !134)
!7589 = !DILocation(line: 0, scope: !7582)
!7590 = !DILocation(line: 4076, column: 3, scope: !7582)
!7591 = !DILocation(line: 4077, column: 3, scope: !7582)
!7592 = !DILocation(line: 4078, column: 22, scope: !7582)
!7593 = !DILocation(line: 4078, column: 30, scope: !7582)
!7594 = !DILocation(line: 4078, column: 35, scope: !7582)
!7595 = !DILocation(line: 4079, column: 1, scope: !7582)
!7596 = distinct !DISubprogram(name: "gimple_omp_for_cond", scope: !597, file: !597, line: 4085, type: !7597, scopeLine: 4086, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7599)
!7597 = !DISubroutineType(types: !7598)
!7598 = !{!134, !4433, !1172}
!7599 = !{!7600, !7601}
!7600 = !DILocalVariable(name: "gs", arg: 1, scope: !7596, file: !597, line: 4085, type: !4433)
!7601 = !DILocalVariable(name: "i", arg: 2, scope: !7596, file: !597, line: 4085, type: !1172)
!7602 = !DILocation(line: 0, scope: !7596)
!7603 = !DILocation(line: 4088, column: 3, scope: !7596)
!7604 = !DILocation(line: 4089, column: 29, scope: !7596)
!7605 = !DILocation(line: 4089, column: 37, scope: !7596)
!7606 = !DILocation(line: 4089, column: 3, scope: !7596)
!7607 = distinct !DISubprogram(name: "gimple_omp_sections_clauses", scope: !597, file: !597, line: 4009, type: !4440, scopeLine: 4010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7608)
!7608 = !{!7609}
!7609 = !DILocalVariable(name: "gs", arg: 1, scope: !7607, file: !597, line: 4009, type: !4433)
!7610 = !DILocation(line: 0, scope: !7607)
!7611 = !DILocation(line: 4012, column: 34, scope: !7607)
!7612 = !DILocation(line: 4012, column: 3, scope: !7607)
!7613 = distinct !DISubprogram(name: "gimple_omp_single_clauses", scope: !597, file: !597, line: 3979, type: !4440, scopeLine: 3980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7614)
!7614 = !{!7615}
!7615 = !DILocalVariable(name: "gs", arg: 1, scope: !7613, file: !597, line: 3979, type: !4433)
!7616 = !DILocation(line: 0, scope: !7613)
!7617 = !DILocation(line: 3982, column: 32, scope: !7613)
!7618 = !DILocation(line: 3982, column: 3, scope: !7613)
!7619 = distinct !DISubprogram(name: "gimple_omp_critical_name", scope: !597, file: !597, line: 3380, type: !4440, scopeLine: 3381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7620)
!7620 = !{!7621}
!7621 = !DILocalVariable(name: "gs", arg: 1, scope: !7619, file: !597, line: 3380, type: !4433)
!7622 = !DILocation(line: 0, scope: !7619)
!7623 = !DILocation(line: 3383, column: 34, scope: !7619)
!7624 = !DILocation(line: 3383, column: 3, scope: !7619)
!7625 = distinct !DISubprogram(name: "gimple_debug_bind_p", scope: !597, file: !597, line: 3257, type: !7086, scopeLine: 3258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7626)
!7626 = !{!7627}
!7627 = !DILocalVariable(name: "s", arg: 1, scope: !7625, file: !597, line: 3257, type: !4433)
!7628 = !DILocation(line: 0, scope: !7625)
!7629 = !DILocation(line: 3259, column: 7, scope: !7630)
!7630 = distinct !DILexicalBlock(scope: !7625, file: !597, line: 3259, column: 7)
!7631 = !DILocation(line: 3259, column: 7, scope: !7625)
!7632 = !DILocation(line: 3260, column: 22, scope: !7630)
!7633 = !DILocation(line: 3260, column: 30, scope: !7630)
!7634 = !DILocation(line: 3260, column: 12, scope: !7630)
!7635 = !DILocation(line: 3260, column: 5, scope: !7630)
!7636 = !DILocation(line: 3263, column: 1, scope: !7625)
!7637 = distinct !DISubprogram(name: "gimple_debug_bind_get_var", scope: !597, file: !597, line: 3268, type: !7638, scopeLine: 3269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7640)
!7638 = !DISubroutineType(types: !7639)
!7639 = !{!704, !1028}
!7640 = !{!7641}
!7641 = !DILocalVariable(name: "dbg", arg: 1, scope: !7637, file: !597, line: 3268, type: !1028)
!7642 = !DILocation(line: 0, scope: !7637)
!7643 = !DILocation(line: 3274, column: 10, scope: !7637)
!7644 = !DILocation(line: 3274, column: 3, scope: !7637)
!7645 = distinct !DISubprogram(name: "gimple_debug_bind_get_value", scope: !597, file: !597, line: 3281, type: !7638, scopeLine: 3282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7646)
!7646 = !{!7647}
!7647 = !DILocalVariable(name: "dbg", arg: 1, scope: !7645, file: !597, line: 3281, type: !1028)
!7648 = !DILocation(line: 0, scope: !7645)
!7649 = !DILocation(line: 3287, column: 10, scope: !7645)
!7650 = !DILocation(line: 3287, column: 3, scope: !7645)
!7651 = distinct !DISubprogram(name: "remap_eh_region_tree_nr", scope: !3, file: !3, line: 1165, type: !2879, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7652)
!7652 = !{!7653, !7654, !7655, !7656}
!7653 = !DILocalVariable(name: "old_t_nr", arg: 1, scope: !7651, file: !3, line: 1165, type: !704)
!7654 = !DILocalVariable(name: "id", arg: 2, scope: !7651, file: !3, line: 1165, type: !2095)
!7655 = !DILocalVariable(name: "old_nr", scope: !7651, file: !3, line: 1167, type: !696)
!7656 = !DILocalVariable(name: "new_nr", scope: !7651, file: !3, line: 1167, type: !696)
!7657 = !DILocation(line: 0, scope: !7651)
!7658 = !DILocation(line: 1169, column: 12, scope: !7651)
!7659 = !DILocation(line: 1170, column: 12, scope: !7651)
!7660 = !DILocation(line: 1172, column: 31, scope: !7651)
!7661 = !DILocation(line: 1172, column: 10, scope: !7651)
!7662 = !DILocation(line: 1172, column: 3, scope: !7651)
!7663 = distinct !DISubprogram(name: "gimple_call_set_arg", scope: !597, file: !597, line: 2046, type: !7664, scopeLine: 2047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7666)
!7664 = !DISubroutineType(types: !7665)
!7665 = !{null, !1028, !7, !704}
!7666 = !{!7667, !7668, !7669}
!7667 = !DILocalVariable(name: "gs", arg: 1, scope: !7663, file: !597, line: 2046, type: !1028)
!7668 = !DILocalVariable(name: "index", arg: 2, scope: !7663, file: !597, line: 2046, type: !7)
!7669 = !DILocalVariable(name: "arg", arg: 3, scope: !7663, file: !597, line: 2046, type: !704)
!7670 = !DILocation(line: 0, scope: !7663)
!7671 = !DILocation(line: 2049, column: 28, scope: !7663)
!7672 = !DILocation(line: 2049, column: 3, scope: !7663)
!7673 = !DILocation(line: 2050, column: 1, scope: !7663)
!7674 = distinct !DISubprogram(name: "gimple_resx_region", scope: !597, file: !597, line: 3121, type: !7675, scopeLine: 3122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7677)
!7675 = !DISubroutineType(types: !7676)
!7676 = !{!696, !4433}
!7677 = !{!7678}
!7678 = !DILocalVariable(name: "gs", arg: 1, scope: !7674, file: !597, line: 3121, type: !4433)
!7679 = !DILocation(line: 0, scope: !7674)
!7680 = !DILocation(line: 3124, column: 29, scope: !7674)
!7681 = !DILocation(line: 3124, column: 3, scope: !7674)
!7682 = distinct !DISubprogram(name: "remap_eh_region_nr", scope: !3, file: !3, line: 1150, type: !7683, scopeLine: 1151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7685)
!7683 = !DISubroutineType(types: !7684)
!7684 = !{!696, !696, !2095}
!7685 = !{!7686, !7687, !7688, !7689, !7690}
!7686 = !DILocalVariable(name: "old_nr", arg: 1, scope: !7682, file: !3, line: 1150, type: !696)
!7687 = !DILocalVariable(name: "id", arg: 2, scope: !7682, file: !3, line: 1150, type: !2095)
!7688 = !DILocalVariable(name: "old_r", scope: !7682, file: !3, line: 1152, type: !1423)
!7689 = !DILocalVariable(name: "new_r", scope: !7682, file: !3, line: 1152, type: !1423)
!7690 = !DILocalVariable(name: "slot", scope: !7682, file: !3, line: 1153, type: !1523)
!7691 = !DILocation(line: 0, scope: !7682)
!7692 = !DILocation(line: 1155, column: 45, scope: !7682)
!7693 = !DILocation(line: 1155, column: 11, scope: !7682)
!7694 = !DILocation(line: 1156, column: 36, scope: !7682)
!7695 = !DILocation(line: 1156, column: 44, scope: !7682)
!7696 = !DILocation(line: 1156, column: 10, scope: !7682)
!7697 = !DILocation(line: 1157, column: 23, scope: !7682)
!7698 = !DILocation(line: 1159, column: 17, scope: !7682)
!7699 = !DILocation(line: 1159, column: 3, scope: !7682)
!7700 = distinct !DISubprogram(name: "gimple_resx_set_region", scope: !597, file: !597, line: 3130, type: !7701, scopeLine: 3131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7703)
!7701 = !DISubroutineType(types: !7702)
!7702 = !{null, !1028, !696}
!7703 = !{!7704, !7705}
!7704 = !DILocalVariable(name: "gs", arg: 1, scope: !7700, file: !597, line: 3130, type: !1028)
!7705 = !DILocalVariable(name: "region", arg: 2, scope: !7700, file: !597, line: 3130, type: !696)
!7706 = !DILocation(line: 0, scope: !7700)
!7707 = !DILocation(line: 3133, column: 22, scope: !7700)
!7708 = !DILocation(line: 3133, column: 29, scope: !7700)
!7709 = !DILocation(line: 3134, column: 1, scope: !7700)
!7710 = distinct !DISubprogram(name: "gimple_eh_dispatch_region", scope: !597, file: !597, line: 3139, type: !7675, scopeLine: 3140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7711)
!7711 = !{!7712}
!7712 = !DILocalVariable(name: "gs", arg: 1, scope: !7710, file: !597, line: 3139, type: !4433)
!7713 = !DILocation(line: 0, scope: !7710)
!7714 = !DILocation(line: 3142, column: 29, scope: !7710)
!7715 = !DILocation(line: 3142, column: 3, scope: !7710)
!7716 = distinct !DISubprogram(name: "gimple_eh_dispatch_set_region", scope: !597, file: !597, line: 3148, type: !7701, scopeLine: 3149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7717)
!7717 = !{!7718, !7719}
!7718 = !DILocalVariable(name: "gs", arg: 1, scope: !7716, file: !597, line: 3148, type: !1028)
!7719 = !DILocalVariable(name: "region", arg: 2, scope: !7716, file: !597, line: 3148, type: !696)
!7720 = !DILocation(line: 0, scope: !7716)
!7721 = !DILocation(line: 3151, column: 22, scope: !7716)
!7722 = !DILocation(line: 3151, column: 29, scope: !7716)
!7723 = !DILocation(line: 3152, column: 1, scope: !7716)
!7724 = distinct !DISubprogram(name: "gimple_block", scope: !597, file: !597, line: 1121, type: !4440, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7725)
!7725 = !{!7726}
!7726 = !DILocalVariable(name: "g", arg: 1, scope: !7724, file: !597, line: 1121, type: !4433)
!7727 = !DILocation(line: 0, scope: !7724)
!7728 = !DILocation(line: 1123, column: 20, scope: !7724)
!7729 = !DILocation(line: 1123, column: 3, scope: !7724)
!7730 = distinct !DISubprogram(name: "gimple_set_block", scope: !597, file: !597, line: 1130, type: !7731, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7733)
!7731 = !DISubroutineType(types: !7732)
!7732 = !{null, !1028, !704}
!7733 = !{!7734, !7735}
!7734 = !DILocalVariable(name: "g", arg: 1, scope: !7730, file: !597, line: 1130, type: !1028)
!7735 = !DILocalVariable(name: "block", arg: 2, scope: !7730, file: !597, line: 1130, type: !704)
!7736 = !DILocation(line: 0, scope: !7730)
!7737 = !DILocation(line: 1132, column: 13, scope: !7730)
!7738 = !DILocation(line: 1132, column: 19, scope: !7730)
!7739 = !DILocation(line: 1133, column: 1, scope: !7730)
!7740 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !597, file: !597, line: 1647, type: !7741, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7743)
!7741 = !DISubroutineType(types: !7742)
!7742 = !{!703, !4433, !7}
!7743 = !{!7744, !7745}
!7744 = !DILocalVariable(name: "gs", arg: 1, scope: !7740, file: !597, line: 1647, type: !4433)
!7745 = !DILocalVariable(name: "i", arg: 2, scope: !7740, file: !597, line: 1647, type: !7)
!7746 = !DILocation(line: 0, scope: !7740)
!7747 = !DILocation(line: 1649, column: 7, scope: !7748)
!7748 = distinct !DILexicalBlock(scope: !7740, file: !597, line: 1649, column: 7)
!7749 = !DILocation(line: 1649, column: 7, scope: !7740)
!7750 = !DILocation(line: 1654, column: 14, scope: !7751)
!7751 = distinct !DILexicalBlock(scope: !7748, file: !597, line: 1650, column: 5)
!7752 = !DILocation(line: 1654, column: 50, scope: !7751)
!7753 = !DILocation(line: 1654, column: 7, scope: !7751)
!7754 = !DILocation(line: 0, scope: !7748)
!7755 = !DILocation(line: 1658, column: 1, scope: !7740)
!7756 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !597, file: !597, line: 1283, type: !7086, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7757)
!7757 = !{!7758}
!7758 = !DILocalVariable(name: "g", arg: 1, scope: !7756, file: !597, line: 1283, type: !4433)
!7759 = !DILocation(line: 0, scope: !7756)
!7760 = !DILocation(line: 1285, column: 10, scope: !7756)
!7761 = !DILocation(line: 1285, column: 26, scope: !7756)
!7762 = !DILocation(line: 1285, column: 43, scope: !7756)
!7763 = !DILocation(line: 1285, column: 46, scope: !7756)
!7764 = !DILocation(line: 1285, column: 62, scope: !7756)
!7765 = !DILocation(line: 1285, column: 3, scope: !7756)
!7766 = distinct !DISubprogram(name: "gimple_set_vdef", scope: !597, file: !597, line: 1414, type: !7731, scopeLine: 1415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7767)
!7767 = !{!7768, !7769}
!7768 = !DILocalVariable(name: "g", arg: 1, scope: !7766, file: !597, line: 1414, type: !1028)
!7769 = !DILocalVariable(name: "vdef", arg: 2, scope: !7766, file: !597, line: 1414, type: !704)
!7770 = !DILocation(line: 0, scope: !7766)
!7771 = !DILocation(line: 1416, column: 3, scope: !7766)
!7772 = !DILocation(line: 1417, column: 16, scope: !7766)
!7773 = !DILocation(line: 1417, column: 21, scope: !7766)
!7774 = !DILocation(line: 1418, column: 1, scope: !7766)
!7775 = distinct !DISubprogram(name: "gimple_set_vuse", scope: !597, file: !597, line: 1405, type: !7731, scopeLine: 1406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7776)
!7776 = !{!7777, !7778}
!7777 = !DILocalVariable(name: "g", arg: 1, scope: !7775, file: !597, line: 1405, type: !1028)
!7778 = !DILocalVariable(name: "vuse", arg: 2, scope: !7775, file: !597, line: 1405, type: !704)
!7779 = !DILocation(line: 0, scope: !7775)
!7780 = !DILocation(line: 1407, column: 3, scope: !7775)
!7781 = !DILocation(line: 1408, column: 16, scope: !7775)
!7782 = !DILocation(line: 1408, column: 21, scope: !7775)
!7783 = !DILocation(line: 1409, column: 1, scope: !7775)
!7784 = distinct !DISubprogram(name: "gimple_bind_block", scope: !597, file: !597, line: 2559, type: !4440, scopeLine: 2560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7785)
!7785 = !{!7786}
!7786 = !DILocalVariable(name: "gs", arg: 1, scope: !7784, file: !597, line: 2559, type: !4433)
!7787 = !DILocation(line: 0, scope: !7784)
!7788 = !DILocation(line: 2562, column: 26, scope: !7784)
!7789 = !DILocation(line: 2562, column: 3, scope: !7784)
!7790 = distinct !DISubprogram(name: "gimple_bind_vars", scope: !597, file: !597, line: 2485, type: !4440, scopeLine: 2486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7791)
!7791 = !{!7792}
!7792 = !DILocalVariable(name: "gs", arg: 1, scope: !7790, file: !597, line: 2485, type: !4433)
!7793 = !DILocation(line: 0, scope: !7790)
!7794 = !DILocation(line: 2488, column: 26, scope: !7790)
!7795 = !DILocation(line: 2488, column: 3, scope: !7790)
!7796 = distinct !DISubprogram(name: "is_gimple_debug", scope: !597, file: !597, line: 3249, type: !7086, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7797)
!7797 = !{!7798}
!7798 = !DILocalVariable(name: "gs", arg: 1, scope: !7796, file: !597, line: 3249, type: !4433)
!7799 = !DILocation(line: 0, scope: !7796)
!7800 = !DILocation(line: 3251, column: 10, scope: !7796)
!7801 = !DILocation(line: 3251, column: 27, scope: !7796)
!7802 = !DILocation(line: 3251, column: 3, scope: !7796)
!7803 = distinct !DISubprogram(name: "gimple_set_op", scope: !597, file: !597, line: 1663, type: !7664, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7804)
!7804 = !{!7805, !7806, !7807}
!7805 = !DILocalVariable(name: "gs", arg: 1, scope: !7803, file: !597, line: 1663, type: !1028)
!7806 = !DILocalVariable(name: "i", arg: 2, scope: !7803, file: !597, line: 1663, type: !7)
!7807 = !DILocalVariable(name: "op", arg: 3, scope: !7803, file: !597, line: 1663, type: !704)
!7808 = !DILocation(line: 0, scope: !7803)
!7809 = !DILocation(line: 1665, column: 3, scope: !7803)
!7810 = !DILocation(line: 1671, column: 3, scope: !7803)
!7811 = !DILocation(line: 1671, column: 22, scope: !7803)
!7812 = !DILocation(line: 1672, column: 1, scope: !7803)
!7813 = distinct !DISubprogram(name: "gimple_has_ops", scope: !597, file: !597, line: 1274, type: !7086, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7814)
!7814 = !{!7815}
!7815 = !DILocalVariable(name: "g", arg: 1, scope: !7813, file: !597, line: 1274, type: !4433)
!7816 = !DILocation(line: 0, scope: !7813)
!7817 = !DILocation(line: 1276, column: 10, scope: !7813)
!7818 = !DILocation(line: 1276, column: 26, scope: !7813)
!7819 = !DILocation(line: 1276, column: 41, scope: !7813)
!7820 = !DILocation(line: 1276, column: 44, scope: !7813)
!7821 = !DILocation(line: 1276, column: 60, scope: !7813)
!7822 = !DILocation(line: 1276, column: 3, scope: !7813)
!7823 = distinct !DISubprogram(name: "gimple_num_ops", scope: !597, file: !597, line: 1596, type: !4532, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7824)
!7824 = !{!7825}
!7825 = !DILocalVariable(name: "gs", arg: 1, scope: !7823, file: !597, line: 1596, type: !4433)
!7826 = !DILocation(line: 0, scope: !7823)
!7827 = !DILocation(line: 1598, column: 21, scope: !7823)
!7828 = !DILocation(line: 1598, column: 3, scope: !7823)
!7829 = distinct !DISubprogram(name: "gimple_ops", scope: !597, file: !597, line: 1614, type: !7830, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7832)
!7830 = !DISubroutineType(types: !7831)
!7831 = !{!703, !1028}
!7832 = !{!7833, !7834}
!7833 = !DILocalVariable(name: "gs", arg: 1, scope: !7829, file: !597, line: 1614, type: !1028)
!7834 = !DILocalVariable(name: "off", scope: !7829, file: !597, line: 1616, type: !1172)
!7835 = !DILocation(line: 0, scope: !7829)
!7836 = !DILocation(line: 1621, column: 28, scope: !7829)
!7837 = !DILocation(line: 1621, column: 9, scope: !7829)
!7838 = !DILocation(line: 1622, column: 3, scope: !7829)
!7839 = !DILocation(line: 1624, column: 20, scope: !7829)
!7840 = !DILocation(line: 1624, column: 32, scope: !7829)
!7841 = !DILocation(line: 1624, column: 10, scope: !7829)
!7842 = !DILocation(line: 1624, column: 3, scope: !7829)
!7843 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !597, file: !597, line: 1073, type: !7844, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7846)
!7844 = !DISubroutineType(types: !7845)
!7845 = !{!654, !1028}
!7846 = !{!7847}
!7847 = !DILocalVariable(name: "gs", arg: 1, scope: !7843, file: !597, line: 1073, type: !1028)
!7848 = !DILocation(line: 0, scope: !7843)
!7849 = !DILocation(line: 1075, column: 24, scope: !7843)
!7850 = !DILocation(line: 1075, column: 10, scope: !7843)
!7851 = !DILocation(line: 1075, column: 3, scope: !7843)
!7852 = distinct !DISubprogram(name: "gss_for_code", scope: !597, file: !597, line: 1061, type: !7853, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7855)
!7853 = !DISubroutineType(types: !7854)
!7854 = !{!654, !596}
!7855 = !{!7856}
!7856 = !DILocalVariable(name: "code", arg: 1, scope: !7852, file: !597, line: 1061, type: !596)
!7857 = !DILocation(line: 0, scope: !7852)
!7858 = !DILocation(line: 1066, column: 10, scope: !7852)
!7859 = !DILocation(line: 1066, column: 3, scope: !7852)
!7860 = distinct !DISubprogram(name: "inline_forbidden_p_stmt", scope: !3, file: !3, line: 2787, type: !5344, scopeLine: 2789, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7861)
!7861 = !{!7862, !7863, !7864, !7865, !7866, !7867}
!7862 = !DILocalVariable(name: "gsi", arg: 1, scope: !7860, file: !3, line: 2787, type: !3810)
!7863 = !DILocalVariable(name: "handled_ops_p", arg: 2, scope: !7860, file: !3, line: 2787, type: !694)
!7864 = !DILocalVariable(name: "wip", arg: 3, scope: !7860, file: !3, line: 2788, type: !2369)
!7865 = !DILocalVariable(name: "fn", scope: !7860, file: !3, line: 2790, type: !704)
!7866 = !DILocalVariable(name: "t", scope: !7860, file: !3, line: 2791, type: !704)
!7867 = !DILocalVariable(name: "stmt", scope: !7860, file: !3, line: 2792, type: !1028)
!7868 = !DILocation(line: 0, scope: !7860)
!7869 = !DILocation(line: 2790, column: 25, scope: !7860)
!7870 = !DILocation(line: 2792, column: 17, scope: !7860)
!7871 = !DILocation(line: 2794, column: 11, scope: !7860)
!7872 = !DILocation(line: 2794, column: 3, scope: !7860)
!7873 = !DILocation(line: 2802, column: 11, scope: !7874)
!7874 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 2802, column: 11)
!7875 = distinct !DILexicalBlock(scope: !7860, file: !3, line: 2795, column: 5)
!7876 = !DILocation(line: 2803, column: 4, scope: !7874)
!7877 = !DILocation(line: 2803, column: 43, scope: !7874)
!7878 = !DILocation(line: 2803, column: 8, scope: !7874)
!7879 = !DILocation(line: 2802, column: 11, scope: !7875)
!7880 = !DILocation(line: 2806, column: 6, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7874, file: !3, line: 2804, column: 2)
!7882 = !DILocation(line: 2808, column: 19, scope: !7881)
!7883 = !DILocation(line: 2809, column: 4, scope: !7881)
!7884 = !DILocation(line: 2812, column: 11, scope: !7875)
!7885 = !DILocation(line: 2813, column: 13, scope: !7886)
!7886 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 2813, column: 11)
!7887 = !DILocation(line: 2813, column: 11, scope: !7875)
!7888 = !DILocation(line: 2817, column: 11, scope: !7889)
!7889 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 2817, column: 11)
!7890 = !DILocation(line: 2817, column: 11, scope: !7875)
!7891 = !DILocation(line: 2820, column: 6, scope: !7892)
!7892 = distinct !DILexicalBlock(scope: !7889, file: !3, line: 2818, column: 2)
!7893 = !DILocation(line: 2821, column: 19, scope: !7892)
!7894 = !DILocation(line: 2822, column: 4, scope: !7892)
!7895 = !DILocation(line: 2825, column: 11, scope: !7896)
!7896 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 2825, column: 11)
!7897 = !DILocation(line: 2825, column: 35, scope: !7896)
!7898 = !DILocation(line: 2825, column: 11, scope: !7875)
!7899 = !DILocation(line: 2826, column: 10, scope: !7896)
!7900 = !DILocation(line: 2826, column: 2, scope: !7896)
!7901 = !DILocation(line: 2834, column: 8, scope: !7902)
!7902 = distinct !DILexicalBlock(scope: !7896, file: !3, line: 2827, column: 4)
!7903 = !DILocation(line: 2836, column: 21, scope: !7902)
!7904 = !DILocation(line: 2837, column: 6, scope: !7902)
!7905 = !DILocation(line: 2846, column: 8, scope: !7902)
!7906 = !DILocation(line: 2848, column: 21, scope: !7902)
!7907 = !DILocation(line: 2849, column: 6, scope: !7902)
!7908 = !DILocation(line: 2854, column: 8, scope: !7902)
!7909 = !DILocation(line: 2856, column: 21, scope: !7902)
!7910 = !DILocation(line: 2857, column: 6, scope: !7902)
!7911 = !DILocation(line: 2866, column: 8, scope: !7902)
!7912 = !DILocation(line: 2868, column: 21, scope: !7902)
!7913 = !DILocation(line: 2869, column: 6, scope: !7902)
!7914 = !DILocation(line: 2877, column: 11, scope: !7875)
!7915 = !DILocation(line: 2883, column: 11, scope: !7916)
!7916 = distinct !DILexicalBlock(scope: !7875, file: !3, line: 2883, column: 11)
!7917 = !DILocation(line: 2883, column: 25, scope: !7916)
!7918 = !DILocation(line: 2883, column: 11, scope: !7875)
!7919 = !DILocation(line: 2886, column: 6, scope: !7920)
!7920 = distinct !DILexicalBlock(scope: !7916, file: !3, line: 2884, column: 2)
!7921 = !DILocation(line: 2888, column: 19, scope: !7920)
!7922 = !DILocation(line: 2889, column: 4, scope: !7920)
!7923 = !DILocation(line: 2897, column: 18, scope: !7860)
!7924 = !DILocation(line: 2898, column: 3, scope: !7860)
!7925 = !DILocation(line: 2899, column: 1, scope: !7860)
!7926 = distinct !DISubprogram(name: "gimple_goto_dest", scope: !597, file: !597, line: 2465, type: !4440, scopeLine: 2466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7927)
!7927 = !{!7928}
!7928 = !DILocalVariable(name: "gs", arg: 1, scope: !7926, file: !597, line: 2465, type: !4433)
!7929 = !DILocation(line: 0, scope: !7926)
!7930 = !DILocation(line: 2468, column: 10, scope: !7926)
!7931 = !DILocation(line: 2468, column: 3, scope: !7926)
!7932 = distinct !DISubprogram(name: "gimple_expr_code", scope: !597, file: !597, line: 1438, type: !4475, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7933)
!7933 = !{!7934, !7935}
!7934 = !DILocalVariable(name: "stmt", arg: 1, scope: !7932, file: !597, line: 1438, type: !4433)
!7935 = !DILocalVariable(name: "code", scope: !7932, file: !597, line: 1440, type: !596)
!7936 = !DILocation(line: 0, scope: !7932)
!7937 = !DILocation(line: 1440, column: 27, scope: !7932)
!7938 = !DILocation(line: 1441, column: 29, scope: !7939)
!7939 = distinct !DILexicalBlock(scope: !7932, file: !597, line: 1441, column: 7)
!7940 = !DILocation(line: 1442, column: 42, scope: !7939)
!7941 = !DILocation(line: 1442, column: 5, scope: !7939)
!7942 = !DILocation(line: 1446, column: 5, scope: !7943)
!7943 = distinct !DILexicalBlock(scope: !7939, file: !597, line: 1443, column: 12)
!7944 = !DILocation(line: 1448, column: 5, scope: !7932)
!7945 = !DILocation(line: 1450, column: 1, scope: !7932)
!7946 = distinct !DISubprogram(name: "is_gimple_call", scope: !597, file: !597, line: 1870, type: !7086, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7947)
!7947 = !{!7948}
!7948 = !DILocalVariable(name: "gs", arg: 1, scope: !7946, file: !597, line: 1870, type: !4433)
!7949 = !DILocation(line: 0, scope: !7946)
!7950 = !DILocation(line: 1872, column: 10, scope: !7946)
!7951 = !DILocation(line: 1872, column: 27, scope: !7946)
!7952 = !DILocation(line: 1872, column: 3, scope: !7946)
!7953 = distinct !DISubprogram(name: "expand_call_inline", scope: !3, file: !3, line: 3470, type: !7954, scopeLine: 3471, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7956)
!7954 = !DISubroutineType(types: !7955)
!7955 = !{!695, !1584, !1028, !2095}
!7956 = !{!7957, !7958, !7959, !7960, !7961, !7962, !7963, !7964, !7965, !7966, !7967, !7968, !7969, !7970, !7971, !7972, !7973, !7974, !7975, !7976, !7977, !7980, !7983, !7987, !7988, !7989}
!7957 = !DILocalVariable(name: "bb", arg: 1, scope: !7953, file: !3, line: 3470, type: !1584)
!7958 = !DILocalVariable(name: "stmt", arg: 2, scope: !7953, file: !3, line: 3470, type: !1028)
!7959 = !DILocalVariable(name: "id", arg: 3, scope: !7953, file: !3, line: 3470, type: !2095)
!7960 = !DILocalVariable(name: "use_retvar", scope: !7953, file: !3, line: 3472, type: !704)
!7961 = !DILocalVariable(name: "fn", scope: !7953, file: !3, line: 3473, type: !704)
!7962 = !DILocalVariable(name: "st", scope: !7953, file: !3, line: 3474, type: !1645)
!7963 = !DILocalVariable(name: "dst", scope: !7953, file: !3, line: 3474, type: !1645)
!7964 = !DILocalVariable(name: "return_slot", scope: !7953, file: !3, line: 3475, type: !704)
!7965 = !DILocalVariable(name: "modify_dest", scope: !7953, file: !3, line: 3476, type: !704)
!7966 = !DILocalVariable(name: "saved_location", scope: !7953, file: !3, line: 3477, type: !829)
!7967 = !DILocalVariable(name: "cg_edge", scope: !7953, file: !3, line: 3478, type: !2107)
!7968 = !DILocalVariable(name: "reason", scope: !7953, file: !3, line: 3479, type: !2120)
!7969 = !DILocalVariable(name: "return_block", scope: !7953, file: !3, line: 3480, type: !1584)
!7970 = !DILocalVariable(name: "e", scope: !7953, file: !3, line: 3481, type: !1008)
!7971 = !DILocalVariable(name: "gsi", scope: !7953, file: !3, line: 3482, type: !2373)
!7972 = !DILocalVariable(name: "stmt_gsi", scope: !7953, file: !3, line: 3482, type: !2373)
!7973 = !DILocalVariable(name: "successfully_inlined", scope: !7953, file: !3, line: 3483, type: !695)
!7974 = !DILocalVariable(name: "purge_dead_abnormal_edges", scope: !7953, file: !3, line: 3484, type: !695)
!7975 = !DILocalVariable(name: "t_step", scope: !7953, file: !3, line: 3485, type: !704)
!7976 = !DILocalVariable(name: "var", scope: !7953, file: !3, line: 3486, type: !704)
!7977 = !DILocalVariable(name: "si", scope: !7978, file: !3, line: 3640, type: !2373)
!7978 = distinct !DILexicalBlock(scope: !7979, file: !3, line: 3639, column: 5)
!7979 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3638, column: 7)
!7980 = !DILocalVariable(name: "old_stmt", scope: !7981, file: !3, line: 3752, type: !1028)
!7981 = distinct !DILexicalBlock(scope: !7982, file: !3, line: 3751, column: 5)
!7982 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3750, column: 7)
!7983 = !DILocalVariable(name: "name", scope: !7984, file: !3, line: 3766, type: !704)
!7984 = distinct !DILexicalBlock(scope: !7985, file: !3, line: 3765, column: 2)
!7985 = distinct !DILexicalBlock(scope: !7986, file: !3, line: 3763, column: 11)
!7986 = distinct !DILexicalBlock(scope: !7982, file: !3, line: 3760, column: 5)
!7987 = !DILocalVariable(name: "var", scope: !7984, file: !3, line: 3767, type: !704)
!7988 = !DILocalVariable(name: "def", scope: !7984, file: !3, line: 3768, type: !704)
!7989 = !DILabel(scope: !7953, name: "egress", file: !3, line: 3814)
!7990 = !DILocation(line: 0, scope: !7953)
!7991 = !DILocation(line: 3479, column: 3, scope: !7953)
!7992 = !DILocation(line: 3482, column: 3, scope: !7953)
!7993 = !DILocation(line: 3490, column: 20, scope: !7953)
!7994 = !DILocation(line: 3491, column: 7, scope: !7995)
!7995 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3491, column: 7)
!7996 = !DILocation(line: 3491, column: 7, scope: !7953)
!7997 = !DILocation(line: 3492, column: 22, scope: !7995)
!7998 = !DILocation(line: 3492, column: 20, scope: !7995)
!7999 = !DILocation(line: 3492, column: 5, scope: !7995)
!8000 = !DILocation(line: 3495, column: 7, scope: !8001)
!8001 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3495, column: 7)
!8002 = !DILocation(line: 3495, column: 26, scope: !8001)
!8003 = !DILocation(line: 3495, column: 7, scope: !7953)
!8004 = !DILocation(line: 3500, column: 8, scope: !7953)
!8005 = !DILocation(line: 3501, column: 8, scope: !8006)
!8006 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3501, column: 7)
!8007 = !DILocation(line: 3501, column: 7, scope: !7953)
!8008 = !DILocation(line: 3503, column: 44, scope: !8009)
!8009 = distinct !DILexicalBlock(scope: !8006, file: !3, line: 3502, column: 5)
!8010 = !DILocation(line: 3503, column: 12, scope: !8009)
!8011 = !DILocation(line: 3504, column: 12, scope: !8012)
!8012 = distinct !DILexicalBlock(scope: !8009, file: !3, line: 3504, column: 11)
!8013 = !DILocation(line: 3504, column: 11, scope: !8009)
!8014 = !DILocation(line: 3509, column: 8, scope: !7953)
!8015 = !DILocation(line: 3509, column: 26, scope: !7953)
!8016 = !DILocation(line: 3518, column: 8, scope: !8017)
!8017 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3518, column: 7)
!8018 = !DILocation(line: 3519, column: 7, scope: !8017)
!8019 = !DILocation(line: 3519, column: 10, scope: !8017)
!8020 = !DILocation(line: 3520, column: 7, scope: !8017)
!8021 = !DILocation(line: 3520, column: 10, scope: !8017)
!8022 = !DILocation(line: 3518, column: 7, scope: !7953)
!8023 = !DILocation(line: 3521, column: 10, scope: !8017)
!8024 = !DILocation(line: 3521, column: 5, scope: !8017)
!8025 = !DILocation(line: 3525, column: 12, scope: !8026)
!8026 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3525, column: 7)
!8027 = !DILocation(line: 3525, column: 22, scope: !8026)
!8028 = !DILocation(line: 3525, column: 8, scope: !8026)
!8029 = !DILocation(line: 3525, column: 7, scope: !7953)
!8030 = !DILocation(line: 3528, column: 13, scope: !7953)
!8031 = !DILocation(line: 3531, column: 7, scope: !8032)
!8032 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3531, column: 7)
!8033 = !DILocation(line: 3532, column: 7, scope: !8032)
!8034 = !DILocation(line: 3532, column: 10, scope: !8032)
!8035 = !DILocation(line: 3533, column: 7, scope: !8032)
!8036 = !DILocation(line: 3534, column: 4, scope: !8032)
!8037 = !DILocation(line: 3531, column: 7, scope: !7953)
!8038 = !DILocation(line: 3539, column: 8, scope: !8039)
!8039 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3539, column: 7)
!8040 = !DILocation(line: 3539, column: 7, scope: !7953)
!8041 = !DILocation(line: 3544, column: 20, scope: !8042)
!8042 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 3544, column: 11)
!8043 = distinct !DILexicalBlock(scope: !8039, file: !3, line: 3540, column: 5)
!8044 = !DILocation(line: 3544, column: 11, scope: !8042)
!8045 = !DILocation(line: 3544, column: 11, scope: !8043)
!8046 = !DILocation(line: 3547, column: 46, scope: !8047)
!8047 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 3547, column: 11)
!8048 = !DILocation(line: 3547, column: 11, scope: !8047)
!8049 = !DILocation(line: 3549, column: 4, scope: !8047)
!8050 = !DILocation(line: 3549, column: 7, scope: !8047)
!8051 = !DILocation(line: 3547, column: 11, scope: !8043)
!8052 = !DILocation(line: 3552, column: 33, scope: !8053)
!8053 = distinct !DILexicalBlock(scope: !8047, file: !3, line: 3550, column: 2)
!8054 = !DILocation(line: 3552, column: 4, scope: !8053)
!8055 = !DILocation(line: 3551, column: 4, scope: !8053)
!8056 = !DILocation(line: 3553, column: 4, scope: !8053)
!8057 = !DILocation(line: 3554, column: 2, scope: !8053)
!8058 = !DILocation(line: 3555, column: 16, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !8047, file: !3, line: 3555, column: 16)
!8060 = !DILocation(line: 3555, column: 28, scope: !8059)
!8061 = !DILocation(line: 3555, column: 31, scope: !8059)
!8062 = !DILocation(line: 3556, column: 9, scope: !8059)
!8063 = !DILocation(line: 3556, column: 13, scope: !8059)
!8064 = !DILocation(line: 3557, column: 12, scope: !8059)
!8065 = !DILocation(line: 3557, column: 19, scope: !8059)
!8066 = !DILocation(line: 3557, column: 9, scope: !8059)
!8067 = !DILocation(line: 3558, column: 43, scope: !8059)
!8068 = !DILocation(line: 3558, column: 13, scope: !8059)
!8069 = !DILocation(line: 3560, column: 9, scope: !8059)
!8070 = !DILocation(line: 3560, column: 12, scope: !8059)
!8071 = !DILocation(line: 3555, column: 16, scope: !8047)
!8072 = !DILocation(line: 3563, column: 39, scope: !8073)
!8073 = distinct !DILexicalBlock(scope: !8059, file: !3, line: 3561, column: 2)
!8074 = !DILocation(line: 3563, column: 10, scope: !8073)
!8075 = !DILocation(line: 3562, column: 4, scope: !8073)
!8076 = !DILocation(line: 3564, column: 4, scope: !8073)
!8077 = !DILocation(line: 3565, column: 2, scope: !8073)
!8078 = !DILocation(line: 3568, column: 17, scope: !7953)
!8079 = !DILocation(line: 3568, column: 25, scope: !7953)
!8080 = !DILocation(line: 3576, column: 18, scope: !7953)
!8081 = !DILocation(line: 3576, column: 7, scope: !7953)
!8082 = !DILocation(line: 3576, column: 16, scope: !7953)
!8083 = !DILocation(line: 3579, column: 7, scope: !8084)
!8084 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3579, column: 7)
!8085 = !DILocation(line: 3579, column: 7, scope: !7953)
!8086 = !DILocation(line: 3580, column: 5, scope: !8084)
!8087 = !DILocation(line: 3581, column: 7, scope: !8084)
!8088 = !DILocation(line: 3584, column: 24, scope: !7953)
!8089 = !DILocation(line: 3584, column: 7, scope: !7953)
!8090 = !DILocation(line: 3585, column: 11, scope: !7953)
!8091 = !DILocation(line: 3586, column: 21, scope: !7953)
!8092 = !DILocation(line: 3587, column: 3, scope: !7953)
!8093 = !DILocation(line: 3593, column: 14, scope: !7953)
!8094 = !DILocation(line: 3594, column: 3, scope: !7953)
!8095 = !DILocation(line: 3599, column: 9, scope: !7953)
!8096 = !DILocation(line: 3600, column: 7, scope: !8097)
!8097 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3600, column: 7)
!8098 = !DILocation(line: 3600, column: 7, scope: !7953)
!8099 = !DILocation(line: 3602, column: 7, scope: !8100)
!8100 = distinct !DILexicalBlock(scope: !8097, file: !3, line: 3601, column: 5)
!8101 = !DILocation(line: 3604, column: 5, scope: !8100)
!8102 = !DILocation(line: 3607, column: 7, scope: !8103)
!8103 = distinct !DILexicalBlock(scope: !8097, file: !3, line: 3606, column: 5)
!8104 = !DILocation(line: 0, scope: !8097)
!8105 = !DILocation(line: 3611, column: 14, scope: !7953)
!8106 = !DILocation(line: 3617, column: 15, scope: !7953)
!8107 = !DILocation(line: 3617, column: 7, scope: !7953)
!8108 = !DILocation(line: 3617, column: 13, scope: !7953)
!8109 = !DILocation(line: 3618, column: 3, scope: !7953)
!8110 = !DILocation(line: 3618, column: 37, scope: !7953)
!8111 = !DILocation(line: 3619, column: 39, scope: !7953)
!8112 = !DILocation(line: 3619, column: 3, scope: !7953)
!8113 = !DILocation(line: 3619, column: 37, scope: !7953)
!8114 = !DILocation(line: 3620, column: 26, scope: !7953)
!8115 = !DILocation(line: 3620, column: 51, scope: !7953)
!8116 = !DILocation(line: 3620, column: 3, scope: !7953)
!8117 = !DILocation(line: 3624, column: 12, scope: !7953)
!8118 = !DILocation(line: 3625, column: 18, scope: !7953)
!8119 = !DILocation(line: 3625, column: 16, scope: !7953)
!8120 = !DILocation(line: 3626, column: 13, scope: !7953)
!8121 = !DILocation(line: 3627, column: 17, scope: !7953)
!8122 = !DILocation(line: 3630, column: 7, scope: !7953)
!8123 = !DILocation(line: 3630, column: 14, scope: !7953)
!8124 = !DILocation(line: 3631, column: 27, scope: !7953)
!8125 = !DILocation(line: 3631, column: 7, scope: !7953)
!8126 = !DILocation(line: 3631, column: 16, scope: !7953)
!8127 = !DILocation(line: 3632, column: 18, scope: !7953)
!8128 = !DILocation(line: 3632, column: 7, scope: !7953)
!8129 = !DILocation(line: 3632, column: 16, scope: !7953)
!8130 = !DILocation(line: 3633, column: 7, scope: !7953)
!8131 = !DILocation(line: 3633, column: 19, scope: !7953)
!8132 = !DILocation(line: 3635, column: 3, scope: !7953)
!8133 = !DILocation(line: 3637, column: 7, scope: !7953)
!8134 = !DILocation(line: 3637, column: 16, scope: !7953)
!8135 = !DILocation(line: 3638, column: 33, scope: !7979)
!8136 = !DILocation(line: 3638, column: 7, scope: !7979)
!8137 = !DILocation(line: 3638, column: 7, scope: !7953)
!8138 = !DILocation(line: 3640, column: 7, scope: !7978)
!8139 = !DILocation(line: 0, scope: !7978)
!8140 = !DILocation(line: 3640, column: 33, scope: !7978)
!8141 = !DILocation(line: 3641, column: 30, scope: !7978)
!8142 = !DILocation(line: 3641, column: 7, scope: !7978)
!8143 = !DILocation(line: 3644, column: 5, scope: !7979)
!8144 = !DILocation(line: 3644, column: 5, scope: !7978)
!8145 = !DILocation(line: 3645, column: 3, scope: !7953)
!8146 = !DILocation(line: 3647, column: 7, scope: !8147)
!8147 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3647, column: 7)
!8148 = !DILocation(line: 3647, column: 7, scope: !7953)
!8149 = !DILocation(line: 3648, column: 32, scope: !8147)
!8150 = !DILocation(line: 3648, column: 39, scope: !8147)
!8151 = !DILocation(line: 3648, column: 5, scope: !8147)
!8152 = !DILocation(line: 3652, column: 3, scope: !7953)
!8153 = !DILocation(line: 3653, column: 3, scope: !7953)
!8154 = !DILocation(line: 3657, column: 7, scope: !8155)
!8155 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3657, column: 7)
!8156 = !DILocation(line: 3657, column: 7, scope: !7953)
!8157 = !DILocation(line: 3659, column: 21, scope: !8158)
!8158 = distinct !DILexicalBlock(scope: !8155, file: !3, line: 3658, column: 5)
!8159 = !DILocation(line: 3667, column: 11, scope: !8160)
!8160 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 3667, column: 11)
!8161 = !DILocation(line: 3667, column: 11, scope: !8158)
!8162 = !DILocation(line: 3668, column: 32, scope: !8160)
!8163 = !DILocation(line: 3668, column: 2, scope: !8160)
!8164 = !DILocation(line: 3670, column: 11, scope: !8165)
!8165 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 3670, column: 11)
!8166 = !DILocation(line: 3670, column: 11, scope: !8158)
!8167 = !DILocation(line: 3675, column: 5, scope: !8158)
!8168 = !DILocation(line: 0, scope: !8155)
!8169 = !DILocation(line: 3684, column: 7, scope: !8170)
!8170 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3684, column: 7)
!8171 = !DILocation(line: 3684, column: 7, scope: !7953)
!8172 = !DILocation(line: 3691, column: 16, scope: !7953)
!8173 = !DILocation(line: 3694, column: 16, scope: !7953)
!8174 = !DILocation(line: 3694, column: 26, scope: !7953)
!8175 = !DILocation(line: 3695, column: 3, scope: !7953)
!8176 = !DILocation(line: 3695, column: 3, scope: !8177)
!8177 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3695, column: 3)
!8178 = !DILocation(line: 3697, column: 13, scope: !8179)
!8179 = distinct !DILexicalBlock(scope: !8180, file: !3, line: 3696, column: 5)
!8180 = distinct !DILexicalBlock(scope: !8177, file: !3, line: 3695, column: 3)
!8181 = !DILocation(line: 3698, column: 11, scope: !8182)
!8182 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 3698, column: 11)
!8183 = !DILocation(line: 3698, column: 29, scope: !8182)
!8184 = !DILocation(line: 3698, column: 33, scope: !8182)
!8185 = !DILocation(line: 3698, column: 11, scope: !8179)
!8186 = !DILocation(line: 3700, column: 8, scope: !8187)
!8187 = distinct !DILexicalBlock(scope: !8188, file: !3, line: 3700, column: 8)
!8188 = distinct !DILexicalBlock(scope: !8182, file: !3, line: 3699, column: 2)
!8189 = !DILocation(line: 3700, column: 22, scope: !8187)
!8190 = !DILocation(line: 3700, column: 25, scope: !8187)
!8191 = !DILocation(line: 3700, column: 8, scope: !8188)
!8192 = !DILocation(line: 3701, column: 26, scope: !8187)
!8193 = !DILocation(line: 3701, column: 6, scope: !8187)
!8194 = !DILocation(line: 3701, column: 12, scope: !8187)
!8195 = !DILocation(line: 3701, column: 24, scope: !8187)
!8196 = !DILocation(line: 3704, column: 17, scope: !8197)
!8197 = distinct !DILexicalBlock(scope: !8182, file: !3, line: 3704, column: 16)
!8198 = !DILocation(line: 3704, column: 16, scope: !8182)
!8199 = !DILocation(line: 3705, column: 22, scope: !8197)
!8200 = !DILocation(line: 3705, column: 2, scope: !8197)
!8201 = !DILocation(line: 3705, column: 8, scope: !8197)
!8202 = !DILocation(line: 3705, column: 20, scope: !8197)
!8203 = !DILocation(line: 3695, column: 27, scope: !8180)
!8204 = !DILocation(line: 3695, column: 3, scope: !8180)
!8205 = distinct !{!8205, !8176, !8206}
!8206 = !DILocation(line: 3707, column: 5, scope: !8177)
!8207 = !DILocation(line: 3709, column: 7, scope: !8208)
!8208 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3709, column: 7)
!8209 = !DILocation(line: 3709, column: 17, scope: !8208)
!8210 = !DILocation(line: 3709, column: 21, scope: !8208)
!8211 = !DILocation(line: 3709, column: 32, scope: !8208)
!8212 = !DILocation(line: 3709, column: 7, scope: !7953)
!8213 = !DILocation(line: 3711, column: 7, scope: !8214)
!8214 = distinct !DILexicalBlock(scope: !8208, file: !3, line: 3710, column: 5)
!8215 = !DILocation(line: 3712, column: 27, scope: !8214)
!8216 = !DILocation(line: 3712, column: 42, scope: !8214)
!8217 = !DILocation(line: 3712, column: 7, scope: !8214)
!8218 = !DILocation(line: 3713, column: 16, scope: !8214)
!8219 = !DILocation(line: 3713, column: 7, scope: !8214)
!8220 = !DILocation(line: 3714, column: 27, scope: !8214)
!8221 = !DILocation(line: 3714, column: 42, scope: !8214)
!8222 = !DILocation(line: 3714, column: 7, scope: !8214)
!8223 = !DILocation(line: 3715, column: 16, scope: !8214)
!8224 = !DILocation(line: 3715, column: 60, scope: !8214)
!8225 = !DILocation(line: 3715, column: 7, scope: !8214)
!8226 = !DILocation(line: 3716, column: 5, scope: !8214)
!8227 = !DILocation(line: 3723, column: 22, scope: !7953)
!8228 = !DILocation(line: 3724, column: 18, scope: !7953)
!8229 = !DILocation(line: 3724, column: 47, scope: !7953)
!8230 = !DILocation(line: 3723, column: 3, scope: !7953)
!8231 = !DILocation(line: 3728, column: 7, scope: !8232)
!8232 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3728, column: 7)
!8233 = !DILocation(line: 3728, column: 13, scope: !8232)
!8234 = !DILocation(line: 3728, column: 7, scope: !7953)
!8235 = !DILocation(line: 3730, column: 44, scope: !8236)
!8236 = distinct !DILexicalBlock(scope: !8232, file: !3, line: 3729, column: 5)
!8237 = !DILocation(line: 3730, column: 7, scope: !8236)
!8238 = !DILocation(line: 3731, column: 27, scope: !8236)
!8239 = !DILocation(line: 3731, column: 33, scope: !8236)
!8240 = !DILocation(line: 3731, column: 44, scope: !8236)
!8241 = !DILocation(line: 3731, column: 7, scope: !8236)
!8242 = !DILocation(line: 3732, column: 5, scope: !8236)
!8243 = !DILocation(line: 3735, column: 11, scope: !8244)
!8244 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3735, column: 7)
!8245 = !DILocation(line: 3735, column: 7, scope: !8244)
!8246 = !DILocation(line: 3735, column: 7, scope: !7953)
!8247 = !DILocation(line: 3737, column: 7, scope: !8248)
!8248 = distinct !DILexicalBlock(scope: !8244, file: !3, line: 3736, column: 5)
!8249 = !DILocation(line: 3738, column: 21, scope: !8248)
!8250 = !DILocation(line: 3739, column: 5, scope: !8248)
!8251 = !DILocation(line: 3740, column: 28, scope: !7953)
!8252 = !DILocation(line: 3740, column: 3, scope: !7953)
!8253 = !DILocation(line: 3741, column: 16, scope: !7953)
!8254 = !DILocation(line: 3744, column: 3, scope: !7953)
!8255 = !DILocation(line: 3750, column: 7, scope: !7982)
!8256 = !DILocation(line: 3750, column: 18, scope: !7982)
!8257 = !DILocation(line: 3750, column: 21, scope: !7982)
!8258 = !DILocation(line: 3750, column: 7, scope: !7953)
!8259 = !DILocation(line: 0, scope: !7981)
!8260 = !DILocation(line: 3753, column: 14, scope: !7981)
!8261 = !DILocation(line: 3754, column: 7, scope: !7981)
!8262 = !DILocation(line: 3755, column: 28, scope: !8263)
!8263 = distinct !DILexicalBlock(scope: !7981, file: !3, line: 3755, column: 11)
!8264 = !DILocation(line: 3755, column: 11, scope: !8263)
!8265 = !DILocation(line: 3755, column: 11, scope: !7981)
!8266 = !DILocation(line: 3756, column: 2, scope: !8263)
!8267 = !DILocation(line: 3757, column: 7, scope: !7981)
!8268 = !DILocation(line: 3758, column: 5, scope: !7981)
!8269 = !DILocation(line: 3763, column: 11, scope: !7985)
!8270 = !DILocation(line: 3764, column: 4, scope: !7985)
!8271 = !DILocation(line: 3764, column: 7, scope: !7985)
!8272 = !DILocation(line: 3764, column: 42, scope: !7985)
!8273 = !DILocation(line: 3763, column: 11, scope: !7986)
!8274 = !DILocation(line: 3766, column: 16, scope: !7984)
!8275 = !DILocation(line: 0, scope: !7984)
!8276 = !DILocation(line: 3767, column: 15, scope: !7984)
!8277 = !DILocation(line: 3768, column: 35, scope: !7984)
!8278 = !DILocation(line: 3768, column: 15, scope: !7984)
!8279 = !DILocation(line: 3770, column: 8, scope: !8280)
!8280 = distinct !DILexicalBlock(scope: !7984, file: !3, line: 3770, column: 8)
!8281 = !DILocation(line: 3770, column: 8, scope: !7984)
!8282 = !DILocation(line: 3774, column: 15, scope: !8283)
!8283 = distinct !DILexicalBlock(scope: !8280, file: !3, line: 3771, column: 6)
!8284 = !DILocation(line: 3775, column: 8, scope: !8283)
!8285 = !DILocation(line: 3776, column: 6, scope: !8283)
!8286 = !DILocation(line: 3780, column: 8, scope: !8287)
!8287 = distinct !DILexicalBlock(scope: !8280, file: !3, line: 3778, column: 6)
!8288 = !DILocation(line: 3781, column: 8, scope: !8287)
!8289 = !DILocation(line: 3782, column: 35, scope: !8287)
!8290 = !DILocation(line: 3782, column: 8, scope: !8287)
!8291 = !DILocation(line: 3782, column: 33, scope: !8287)
!8292 = !DILocation(line: 3786, column: 9, scope: !7985)
!8293 = !DILocation(line: 0, scope: !7982)
!8294 = !DILocation(line: 3789, column: 7, scope: !8295)
!8295 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3789, column: 7)
!8296 = !DILocation(line: 3789, column: 7, scope: !7953)
!8297 = !DILocation(line: 3790, column: 5, scope: !8295)
!8298 = !DILocation(line: 3795, column: 7, scope: !8299)
!8299 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 3795, column: 7)
!8300 = !DILocation(line: 3795, column: 7, scope: !7953)
!8301 = !DILocation(line: 3797, column: 7, scope: !8302)
!8302 = distinct !DILexicalBlock(scope: !8299, file: !3, line: 3796, column: 5)
!8303 = !DILocation(line: 3799, column: 7, scope: !8302)
!8304 = !DILocation(line: 3799, column: 45, scope: !8302)
!8305 = !DILocation(line: 3800, column: 5, scope: !8302)
!8306 = !DILocation(line: 3806, column: 5, scope: !7953)
!8307 = !DILocation(line: 3806, column: 18, scope: !7953)
!8308 = !DILocation(line: 3806, column: 55, scope: !7953)
!8309 = !DILocation(line: 3806, column: 63, scope: !7953)
!8310 = !DILocation(line: 3806, column: 3, scope: !7953)
!8311 = !DILocation(line: 3809, column: 32, scope: !7953)
!8312 = !DILocation(line: 3809, column: 3, scope: !7953)
!8313 = !DILocation(line: 3811, column: 13, scope: !7953)
!8314 = !DILocation(line: 3812, column: 3, scope: !7953)
!8315 = !DILocation(line: 3814, column: 2, scope: !7953)
!8316 = !DILocation(line: 3815, column: 18, scope: !7953)
!8317 = !DILocation(line: 3817, column: 1, scope: !7953)
!8318 = !DILocation(line: 3816, column: 3, scope: !7953)
!8319 = distinct !DISubprogram(name: "gimple_has_location", scope: !597, file: !597, line: 1165, type: !7086, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8320)
!8320 = !{!8321}
!8321 = !DILocalVariable(name: "g", arg: 1, scope: !8319, file: !597, line: 1165, type: !4433)
!8322 = !DILocation(line: 0, scope: !8319)
!8323 = !DILocation(line: 1167, column: 10, scope: !8319)
!8324 = !DILocation(line: 1167, column: 30, scope: !8319)
!8325 = !DILocation(line: 1167, column: 3, scope: !8319)
!8326 = distinct !DISubprogram(name: "gimple_location", scope: !597, file: !597, line: 1139, type: !8327, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8329)
!8327 = !DISubroutineType(types: !8328)
!8328 = !{!829, !4433}
!8329 = !{!8330}
!8330 = !DILocalVariable(name: "g", arg: 1, scope: !8326, file: !597, line: 1139, type: !4433)
!8331 = !DILocation(line: 0, scope: !8326)
!8332 = !DILocation(line: 1141, column: 20, scope: !8326)
!8333 = !DILocation(line: 1141, column: 3, scope: !8326)
!8334 = distinct !DISubprogram(name: "get_indirect_callee_fndecl", scope: !3, file: !3, line: 3456, type: !8335, scopeLine: 3457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8337)
!8335 = !DISubroutineType(types: !8336)
!8336 = !{!704, !2102, !1028}
!8337 = !{!8338, !8339, !8340}
!8338 = !DILocalVariable(name: "node", arg: 1, scope: !8334, file: !3, line: 3456, type: !2102)
!8339 = !DILocalVariable(name: "stmt", arg: 2, scope: !8334, file: !3, line: 3456, type: !1028)
!8340 = !DILocalVariable(name: "cs", scope: !8334, file: !3, line: 3458, type: !2107)
!8341 = !DILocation(line: 0, scope: !8334)
!8342 = !DILocation(line: 3460, column: 8, scope: !8334)
!8343 = !DILocation(line: 3461, column: 7, scope: !8344)
!8344 = distinct !DILexicalBlock(scope: !8334, file: !3, line: 3461, column: 7)
!8345 = !DILocation(line: 3461, column: 7, scope: !8334)
!8346 = !DILocation(line: 3462, column: 16, scope: !8344)
!8347 = !DILocation(line: 3462, column: 24, scope: !8344)
!8348 = !DILocation(line: 3462, column: 5, scope: !8344)
!8349 = !DILocation(line: 3465, column: 1, scope: !8334)
!8350 = distinct !DISubprogram(name: "prepend_lexical_block", scope: !3, file: !3, line: 3446, type: !6352, scopeLine: 3447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8351)
!8351 = !{!8352, !8353}
!8352 = !DILocalVariable(name: "current_block", arg: 1, scope: !8350, file: !3, line: 3446, type: !704)
!8353 = !DILocalVariable(name: "new_block", arg: 2, scope: !8350, file: !3, line: 3446, type: !704)
!8354 = !DILocation(line: 0, scope: !8350)
!8355 = !DILocation(line: 3448, column: 29, scope: !8350)
!8356 = !DILocation(line: 3448, column: 3, scope: !8350)
!8357 = !DILocation(line: 3448, column: 27, scope: !8350)
!8358 = !DILocation(line: 3449, column: 35, scope: !8350)
!8359 = !DILocation(line: 3450, column: 3, scope: !8350)
!8360 = !DILocation(line: 3450, column: 34, scope: !8350)
!8361 = !DILocation(line: 3451, column: 1, scope: !8350)
!8362 = distinct !DISubprogram(name: "initialize_inlined_parameters", scope: !3, file: !3, line: 2490, type: !8363, scopeLine: 2492, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8365)
!8363 = !DISubroutineType(types: !8364)
!8364 = !{null, !2095, !1028, !704, !1584}
!8365 = !{!8366, !8367, !8368, !8369, !8370, !8371, !8372, !8373, !8374, !8375}
!8366 = !DILocalVariable(name: "id", arg: 1, scope: !8362, file: !3, line: 2490, type: !2095)
!8367 = !DILocalVariable(name: "stmt", arg: 2, scope: !8362, file: !3, line: 2490, type: !1028)
!8368 = !DILocalVariable(name: "fn", arg: 3, scope: !8362, file: !3, line: 2491, type: !704)
!8369 = !DILocalVariable(name: "bb", arg: 4, scope: !8362, file: !3, line: 2491, type: !1584)
!8370 = !DILocalVariable(name: "parms", scope: !8362, file: !3, line: 2493, type: !704)
!8371 = !DILocalVariable(name: "i", scope: !8362, file: !3, line: 2494, type: !1172)
!8372 = !DILocalVariable(name: "p", scope: !8362, file: !3, line: 2495, type: !704)
!8373 = !DILocalVariable(name: "vars", scope: !8362, file: !3, line: 2496, type: !704)
!8374 = !DILocalVariable(name: "static_chain", scope: !8362, file: !3, line: 2497, type: !704)
!8375 = !DILocalVariable(name: "val", scope: !8376, file: !3, line: 2506, type: !704)
!8376 = distinct !DILexicalBlock(scope: !8377, file: !3, line: 2505, column: 5)
!8377 = distinct !DILexicalBlock(scope: !8378, file: !3, line: 2504, column: 3)
!8378 = distinct !DILexicalBlock(scope: !8362, file: !3, line: 2504, column: 3)
!8379 = !DILocation(line: 0, scope: !8362)
!8380 = !DILocation(line: 2496, column: 3, scope: !8362)
!8381 = !DILocation(line: 2496, column: 8, scope: !8362)
!8382 = !DILocation(line: 2497, column: 23, scope: !8362)
!8383 = !DILocation(line: 2500, column: 11, scope: !8362)
!8384 = !DILocation(line: 2504, column: 8, scope: !8378)
!8385 = !DILocation(line: 0, scope: !8378)
!8386 = !DILocation(line: 2504, column: 3, scope: !8378)
!8387 = !DILocation(line: 2507, column: 17, scope: !8376)
!8388 = !DILocation(line: 2507, column: 15, scope: !8376)
!8389 = !DILocation(line: 2507, column: 13, scope: !8376)
!8390 = !DILocation(line: 2507, column: 70, scope: !8376)
!8391 = !DILocation(line: 2507, column: 47, scope: !8376)
!8392 = !DILocation(line: 0, scope: !8376)
!8393 = !DILocation(line: 2508, column: 7, scope: !8376)
!8394 = !DILocation(line: 2504, column: 33, scope: !8377)
!8395 = !DILocation(line: 2504, column: 50, scope: !8377)
!8396 = !DILocation(line: 2504, column: 3, scope: !8377)
!8397 = distinct !{!8397, !8386, !8398}
!8398 = !DILocation(line: 2509, column: 5, scope: !8378)
!8399 = !DILocation(line: 2512, column: 7, scope: !8362)
!8400 = !DILocation(line: 2512, column: 34, scope: !8362)
!8401 = !DILocation(line: 2513, column: 3, scope: !8362)
!8402 = !DILocation(line: 2514, column: 7, scope: !8403)
!8403 = distinct !DILexicalBlock(scope: !8362, file: !3, line: 2514, column: 7)
!8404 = !DILocation(line: 2514, column: 7, scope: !8362)
!8405 = !DILocation(line: 2517, column: 7, scope: !8406)
!8406 = distinct !DILexicalBlock(scope: !8403, file: !3, line: 2515, column: 5)
!8407 = !DILocation(line: 2519, column: 7, scope: !8406)
!8408 = !DILocation(line: 2520, column: 5, scope: !8406)
!8409 = !DILocation(line: 2522, column: 28, scope: !8362)
!8410 = !DILocation(line: 2522, column: 35, scope: !8362)
!8411 = !DILocation(line: 2522, column: 3, scope: !8362)
!8412 = !DILocation(line: 2523, column: 1, scope: !8362)
!8413 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !597, file: !597, line: 1878, type: !4440, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8414)
!8414 = !{!8415}
!8415 = !DILocalVariable(name: "gs", arg: 1, scope: !8413, file: !597, line: 1878, type: !4433)
!8416 = !DILocation(line: 0, scope: !8413)
!8417 = !DILocation(line: 1881, column: 10, scope: !8413)
!8418 = !DILocation(line: 1881, column: 3, scope: !8413)
!8419 = distinct !DISubprogram(name: "gimple_call_return_slot_opt_p", scope: !597, file: !597, line: 2119, type: !7363, scopeLine: 2120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8420)
!8420 = !{!8421}
!8421 = !DILocalVariable(name: "s", arg: 1, scope: !8419, file: !597, line: 2119, type: !1028)
!8422 = !DILocation(line: 0, scope: !8419)
!8423 = !DILocation(line: 2122, column: 21, scope: !8419)
!8424 = !DILocation(line: 2122, column: 10, scope: !8419)
!8425 = !DILocation(line: 2122, column: 3, scope: !8419)
!8426 = distinct !DISubprogram(name: "declare_return_variable", scope: !3, file: !3, line: 2539, type: !5482, scopeLine: 2540, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8427)
!8427 = !{!8428, !8429, !8430, !8431, !8432, !8433, !8434, !8435, !8436, !8437, !8438, !8443, !8446, !8447, !8448, !8449, !8450, !8451, !8452, !8455, !8460}
!8428 = !DILocalVariable(name: "id", arg: 1, scope: !8426, file: !3, line: 2539, type: !2095)
!8429 = !DILocalVariable(name: "return_slot", arg: 2, scope: !8426, file: !3, line: 2539, type: !704)
!8430 = !DILocalVariable(name: "modify_dest", arg: 3, scope: !8426, file: !3, line: 2539, type: !704)
!8431 = !DILocalVariable(name: "callee", scope: !8426, file: !3, line: 2541, type: !704)
!8432 = !DILocalVariable(name: "caller", scope: !8426, file: !3, line: 2542, type: !704)
!8433 = !DILocalVariable(name: "result", scope: !8426, file: !3, line: 2543, type: !704)
!8434 = !DILocalVariable(name: "callee_type", scope: !8426, file: !3, line: 2544, type: !704)
!8435 = !DILocalVariable(name: "caller_type", scope: !8426, file: !3, line: 2545, type: !704)
!8436 = !DILocalVariable(name: "var", scope: !8426, file: !3, line: 2546, type: !704)
!8437 = !DILocalVariable(name: "use", scope: !8426, file: !3, line: 2546, type: !704)
!8438 = !DILocalVariable(name: "return_slot_addr", scope: !8439, file: !3, line: 2569, type: !704)
!8439 = distinct !DILexicalBlock(scope: !8440, file: !3, line: 2568, column: 2)
!8440 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 2567, column: 11)
!8441 = distinct !DILexicalBlock(scope: !8442, file: !3, line: 2563, column: 5)
!8442 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 2562, column: 7)
!8443 = !DILocalVariable(name: "bitsize", scope: !8444, file: !3, line: 2581, type: !760)
!8444 = distinct !DILexicalBlock(scope: !8445, file: !3, line: 2580, column: 6)
!8445 = distinct !DILexicalBlock(scope: !8439, file: !3, line: 2579, column: 8)
!8446 = !DILocalVariable(name: "bitpos", scope: !8444, file: !3, line: 2582, type: !760)
!8447 = !DILocalVariable(name: "offset", scope: !8444, file: !3, line: 2583, type: !704)
!8448 = !DILocalVariable(name: "mode", scope: !8444, file: !3, line: 2584, type: !5)
!8449 = !DILocalVariable(name: "unsignedp", scope: !8444, file: !3, line: 2585, type: !696)
!8450 = !DILocalVariable(name: "volatilep", scope: !8444, file: !3, line: 2586, type: !696)
!8451 = !DILocalVariable(name: "base", scope: !8444, file: !3, line: 2587, type: !704)
!8452 = !DILocalVariable(name: "use_it", scope: !8453, file: !3, line: 2622, type: !695)
!8453 = distinct !DILexicalBlock(scope: !8454, file: !3, line: 2621, column: 5)
!8454 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 2619, column: 7)
!8455 = !DILocalVariable(name: "base_m", scope: !8456, file: !3, line: 2641, type: !704)
!8456 = distinct !DILexicalBlock(scope: !8457, file: !3, line: 2640, column: 2)
!8457 = distinct !DILexicalBlock(scope: !8458, file: !3, line: 2637, column: 16)
!8458 = distinct !DILexicalBlock(scope: !8459, file: !3, line: 2631, column: 16)
!8459 = distinct !DILexicalBlock(scope: !8453, file: !3, line: 2625, column: 11)
!8460 = !DILabel(scope: !8426, name: "done", file: !3, line: 2700)
!8461 = !DILocation(line: 0, scope: !8426)
!8462 = !DILocation(line: 2541, column: 21, scope: !8426)
!8463 = !DILocation(line: 2542, column: 21, scope: !8426)
!8464 = !DILocation(line: 2543, column: 17, scope: !8426)
!8465 = !DILocation(line: 2544, column: 22, scope: !8426)
!8466 = !DILocation(line: 2550, column: 7, scope: !8467)
!8467 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 2550, column: 7)
!8468 = !DILocation(line: 2550, column: 7, scope: !8426)
!8469 = !DILocation(line: 2551, column: 19, scope: !8467)
!8470 = !DILocation(line: 2551, column: 5, scope: !8467)
!8471 = !DILocation(line: 2553, column: 19, scope: !8467)
!8472 = !DILocation(line: 0, scope: !8467)
!8473 = !DILocation(line: 2557, column: 8, scope: !8474)
!8474 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 2557, column: 7)
!8475 = !DILocation(line: 2557, column: 15, scope: !8474)
!8476 = !DILocation(line: 2557, column: 18, scope: !8474)
!8477 = !DILocation(line: 2557, column: 7, scope: !8426)
!8478 = !DILocation(line: 2562, column: 7, scope: !8442)
!8479 = !DILocation(line: 2562, column: 7, scope: !8426)
!8480 = !DILocation(line: 2566, column: 7, scope: !8441)
!8481 = !DILocation(line: 2567, column: 11, scope: !8440)
!8482 = !DILocation(line: 2567, column: 11, scope: !8441)
!8483 = !DILocation(line: 2569, column: 28, scope: !8439)
!8484 = !DILocation(line: 0, scope: !8439)
!8485 = !DILocation(line: 2570, column: 4, scope: !8439)
!8486 = !DILocation(line: 2578, column: 4, scope: !8439)
!8487 = !DILocation(line: 2579, column: 25, scope: !8445)
!8488 = !DILocation(line: 2579, column: 8, scope: !8445)
!8489 = !DILocation(line: 2579, column: 8, scope: !8439)
!8490 = !DILocation(line: 2581, column: 8, scope: !8444)
!8491 = !DILocation(line: 2582, column: 8, scope: !8444)
!8492 = !DILocation(line: 2583, column: 8, scope: !8444)
!8493 = !DILocation(line: 2584, column: 8, scope: !8444)
!8494 = !DILocation(line: 2585, column: 8, scope: !8444)
!8495 = !DILocation(line: 2586, column: 8, scope: !8444)
!8496 = !DILocation(line: 0, scope: !8444)
!8497 = !DILocation(line: 2588, column: 15, scope: !8444)
!8498 = !DILocation(line: 2592, column: 12, scope: !8499)
!8499 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 2592, column: 12)
!8500 = !DILocation(line: 2592, column: 29, scope: !8499)
!8501 = !DILocation(line: 2592, column: 12, scope: !8444)
!8502 = !DILocation(line: 2593, column: 10, scope: !8499)
!8503 = !DILocation(line: 0, scope: !8504)
!8504 = distinct !DILexicalBlock(scope: !8444, file: !3, line: 2594, column: 12)
!8505 = !DILocation(line: 2594, column: 12, scope: !8504)
!8506 = !DILocation(line: 2593, column: 3, scope: !8499)
!8507 = !DILocation(line: 2594, column: 29, scope: !8504)
!8508 = !DILocation(line: 2594, column: 12, scope: !8444)
!8509 = !DILocation(line: 2595, column: 10, scope: !8504)
!8510 = !DILocation(line: 2595, column: 3, scope: !8504)
!8511 = !DILocation(line: 2596, column: 8, scope: !8444)
!8512 = !DILocation(line: 2597, column: 6, scope: !8445)
!8513 = !DILocation(line: 2597, column: 6, scope: !8444)
!8514 = !DILocation(line: 2603, column: 4, scope: !8515)
!8515 = distinct !DILexicalBlock(scope: !8440, file: !3, line: 2601, column: 2)
!8516 = !DILocation(line: 2604, column: 27, scope: !8515)
!8517 = !DILocation(line: 2604, column: 30, scope: !8515)
!8518 = !DILocation(line: 0, scope: !8440)
!8519 = !DILocation(line: 2606, column: 12, scope: !8520)
!8520 = distinct !DILexicalBlock(scope: !8441, file: !3, line: 2606, column: 11)
!8521 = !DILocation(line: 2606, column: 43, scope: !8520)
!8522 = !DILocation(line: 2607, column: 12, scope: !8520)
!8523 = !DILocation(line: 2607, column: 46, scope: !8520)
!8524 = !DILocation(line: 2608, column: 4, scope: !8520)
!8525 = !DILocation(line: 2608, column: 8, scope: !8520)
!8526 = !DILocation(line: 2609, column: 4, scope: !8520)
!8527 = !DILocation(line: 2609, column: 7, scope: !8520)
!8528 = !DILocation(line: 2606, column: 11, scope: !8441)
!8529 = !DILocation(line: 2610, column: 2, scope: !8520)
!8530 = !DILocation(line: 2610, column: 26, scope: !8520)
!8531 = !DILocation(line: 2616, column: 3, scope: !8426)
!8532 = !DILocation(line: 2620, column: 7, scope: !8454)
!8533 = !DILocation(line: 2620, column: 10, scope: !8454)
!8534 = !DILocation(line: 2620, column: 34, scope: !8454)
!8535 = !DILocation(line: 2619, column: 7, scope: !8426)
!8536 = !DILocation(line: 0, scope: !8453)
!8537 = !DILocation(line: 2625, column: 12, scope: !8459)
!8538 = !DILocation(line: 2625, column: 11, scope: !8453)
!8539 = !DILocation(line: 2631, column: 16, scope: !8458)
!8540 = !DILocation(line: 2631, column: 57, scope: !8458)
!8541 = !DILocation(line: 2631, column: 16, scope: !8459)
!8542 = !DILocation(line: 2637, column: 16, scope: !8457)
!8543 = !DILocation(line: 2637, column: 16, scope: !8458)
!8544 = !DILocation(line: 2641, column: 18, scope: !8456)
!8545 = !DILocation(line: 0, scope: !8456)
!8546 = !DILocation(line: 2645, column: 9, scope: !8547)
!8547 = distinct !DILexicalBlock(scope: !8456, file: !3, line: 2645, column: 8)
!8548 = !DILocation(line: 2645, column: 8, scope: !8456)
!8549 = !DILocation(line: 2647, column: 13, scope: !8550)
!8550 = distinct !DILexicalBlock(scope: !8547, file: !3, line: 2647, column: 13)
!8551 = !DILocation(line: 2647, column: 13, scope: !8547)
!8552 = !DILocation(line: 2649, column: 14, scope: !8553)
!8553 = distinct !DILexicalBlock(scope: !8550, file: !3, line: 2649, column: 13)
!8554 = !DILocation(line: 2649, column: 45, scope: !8553)
!8555 = !DILocation(line: 2650, column: 7, scope: !8553)
!8556 = !DILocation(line: 2650, column: 41, scope: !8553)
!8557 = !DILocation(line: 2651, column: 6, scope: !8553)
!8558 = !DILocation(line: 2651, column: 10, scope: !8553)
!8559 = !DILocation(line: 2652, column: 6, scope: !8553)
!8560 = !DILocation(line: 2652, column: 9, scope: !8553)
!8561 = !DILocation(line: 2649, column: 13, scope: !8550)
!8562 = !DILocation(line: 2654, column: 14, scope: !8563)
!8563 = distinct !DILexicalBlock(scope: !8553, file: !3, line: 2654, column: 13)
!8564 = !DILocation(line: 2666, column: 3, scope: !8426)
!8565 = !DILocation(line: 2668, column: 9, scope: !8426)
!8566 = !DILocation(line: 2669, column: 24, scope: !8567)
!8567 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 2669, column: 7)
!8568 = !DILocation(line: 2669, column: 7, scope: !8567)
!8569 = !DILocation(line: 2669, column: 7, scope: !8426)
!8570 = !DILocation(line: 2671, column: 7, scope: !8571)
!8571 = distinct !DILexicalBlock(scope: !8567, file: !3, line: 2670, column: 5)
!8572 = !DILocation(line: 2672, column: 7, scope: !8571)
!8573 = !DILocation(line: 2673, column: 5, scope: !8571)
!8574 = !DILocation(line: 2675, column: 3, scope: !8426)
!8575 = !DILocation(line: 2675, column: 34, scope: !8426)
!8576 = !DILocation(line: 2677, column: 7, scope: !8426)
!8577 = !DILocation(line: 2676, column: 3, scope: !8426)
!8578 = !DILocation(line: 2676, column: 34, scope: !8426)
!8579 = !DILocation(line: 2677, column: 5, scope: !8426)
!8580 = !DILocation(line: 2682, column: 3, scope: !8426)
!8581 = !DILocation(line: 2682, column: 25, scope: !8426)
!8582 = !DILocation(line: 2684, column: 28, scope: !8426)
!8583 = !DILocation(line: 2684, column: 3, scope: !8426)
!8584 = !DILocation(line: 2689, column: 48, scope: !8585)
!8585 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 2689, column: 7)
!8586 = !DILocation(line: 2689, column: 8, scope: !8585)
!8587 = !DILocation(line: 2689, column: 7, scope: !8426)
!8588 = !DILocation(line: 2690, column: 11, scope: !8585)
!8589 = !DILocation(line: 2690, column: 5, scope: !8585)
!8590 = !DILocation(line: 2692, column: 3, scope: !8426)
!8591 = !DILocation(line: 2694, column: 7, scope: !8592)
!8592 = distinct !DILexicalBlock(scope: !8426, file: !3, line: 2694, column: 7)
!8593 = !DILocation(line: 2694, column: 7, scope: !8426)
!8594 = !DILocation(line: 2696, column: 30, scope: !8595)
!8595 = distinct !DILexicalBlock(scope: !8592, file: !3, line: 2695, column: 5)
!8596 = !DILocation(line: 2697, column: 13, scope: !8595)
!8597 = !DILocation(line: 2698, column: 5, scope: !8595)
!8598 = !DILocation(line: 2700, column: 2, scope: !8426)
!8599 = !DILocation(line: 2704, column: 3, scope: !8426)
!8600 = !DILocation(line: 2707, column: 7, scope: !8426)
!8601 = !DILocation(line: 2707, column: 14, scope: !8426)
!8602 = !DILocation(line: 2709, column: 3, scope: !8426)
!8603 = !DILocation(line: 2710, column: 1, scope: !8426)
!8604 = distinct !DISubprogram(name: "is_gimple_assign", scope: !597, file: !597, line: 1677, type: !7086, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8605)
!8605 = !{!8606}
!8606 = !DILocalVariable(name: "gs", arg: 1, scope: !8604, file: !597, line: 1677, type: !4433)
!8607 = !DILocation(line: 0, scope: !8604)
!8608 = !DILocation(line: 1679, column: 10, scope: !8604)
!8609 = !DILocation(line: 1679, column: 27, scope: !8604)
!8610 = !DILocation(line: 1679, column: 3, scope: !8604)
!8611 = distinct !DISubprogram(name: "gimple_call_chain", scope: !597, file: !597, line: 1983, type: !4440, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8612)
!8612 = !{!8613}
!8613 = !DILocalVariable(name: "gs", arg: 1, scope: !8611, file: !597, line: 1983, type: !4433)
!8614 = !DILocation(line: 0, scope: !8611)
!8615 = !DILocation(line: 1986, column: 10, scope: !8611)
!8616 = !DILocation(line: 1986, column: 3, scope: !8611)
!8617 = distinct !DISubprogram(name: "is_global_var", scope: !3300, file: !3300, line: 575, type: !6080, scopeLine: 576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8618)
!8618 = !{!8619}
!8619 = !DILocalVariable(name: "t", arg: 1, scope: !8617, file: !3300, line: 575, type: !6082)
!8620 = !DILocation(line: 0, scope: !8617)
!8621 = !DILocation(line: 577, column: 11, scope: !8617)
!8622 = !DILocation(line: 577, column: 27, scope: !8617)
!8623 = !DILocation(line: 577, column: 30, scope: !8617)
!8624 = !DILocation(line: 577, column: 3, scope: !8617)
!8625 = distinct !DISubprogram(name: "copy_result_decl_to_var", scope: !3, file: !3, line: 4527, type: !2879, scopeLine: 4528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8626)
!8626 = !{!8627, !8628, !8629, !8630}
!8627 = !DILocalVariable(name: "decl", arg: 1, scope: !8625, file: !3, line: 4527, type: !704)
!8628 = !DILocalVariable(name: "id", arg: 2, scope: !8625, file: !3, line: 4527, type: !2095)
!8629 = !DILocalVariable(name: "copy", scope: !8625, file: !3, line: 4529, type: !704)
!8630 = !DILocalVariable(name: "type", scope: !8625, file: !3, line: 4529, type: !704)
!8631 = !DILocation(line: 0, scope: !8625)
!8632 = !DILocation(line: 4531, column: 3, scope: !8625)
!8633 = !DILocation(line: 4534, column: 10, scope: !8625)
!8634 = !DILocation(line: 4535, column: 7, scope: !8635)
!8635 = distinct !DILexicalBlock(scope: !8625, file: !3, line: 4535, column: 7)
!8636 = !DILocation(line: 4535, column: 7, scope: !8625)
!8637 = !DILocation(line: 4536, column: 12, scope: !8635)
!8638 = !DILocation(line: 4536, column: 5, scope: !8635)
!8639 = !DILocation(line: 4538, column: 10, scope: !8625)
!8640 = !DILocation(line: 4540, column: 26, scope: !8625)
!8641 = !DILocation(line: 4540, column: 3, scope: !8625)
!8642 = !DILocation(line: 4540, column: 24, scope: !8625)
!8643 = !DILocation(line: 4541, column: 31, scope: !8625)
!8644 = !DILocation(line: 4541, column: 29, scope: !8625)
!8645 = !DILocation(line: 4542, column: 8, scope: !8646)
!8646 = distinct !DILexicalBlock(scope: !8625, file: !3, line: 4542, column: 7)
!8647 = !DILocation(line: 4542, column: 7, scope: !8625)
!8648 = !DILocation(line: 4544, column: 33, scope: !8649)
!8649 = distinct !DILexicalBlock(scope: !8646, file: !3, line: 4543, column: 5)
!8650 = !DILocation(line: 4544, column: 31, scope: !8649)
!8651 = !DILocation(line: 4545, column: 34, scope: !8649)
!8652 = !DILocation(line: 4545, column: 7, scope: !8649)
!8653 = !DILocation(line: 4545, column: 32, scope: !8649)
!8654 = !DILocation(line: 4546, column: 5, scope: !8649)
!8655 = !DILocation(line: 4548, column: 10, scope: !8625)
!8656 = !DILocation(line: 4548, column: 3, scope: !8625)
!8657 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !337, file: !337, line: 281, type: !8658, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8662)
!8658 = !DISubroutineType(types: !8659)
!8659 = !{!1584, !8660, !7}
!8660 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8661, size: 64)
!8661 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1592)
!8662 = !{!8663, !8664}
!8663 = !DILocalVariable(name: "vec_", arg: 1, scope: !8657, file: !337, line: 281, type: !8660)
!8664 = !DILocalVariable(name: "ix_", arg: 2, scope: !8657, file: !337, line: 281, type: !7)
!8665 = !DILocation(line: 0, scope: !8657)
!8666 = !DILocation(line: 281, column: 1, scope: !8657)
!8667 = distinct !DISubprogram(name: "gsi_prev", scope: !597, file: !597, line: 4493, type: !3808, scopeLine: 4494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8668)
!8668 = !{!8669}
!8669 = !DILocalVariable(name: "i", arg: 1, scope: !8667, file: !597, line: 4493, type: !3810)
!8670 = !DILocation(line: 0, scope: !8667)
!8671 = !DILocation(line: 4495, column: 15, scope: !8667)
!8672 = !DILocation(line: 4495, column: 20, scope: !8667)
!8673 = !DILocation(line: 4495, column: 10, scope: !8667)
!8674 = !DILocation(line: 4496, column: 1, scope: !8667)
!8675 = distinct !DISubprogram(name: "update_stmt", scope: !597, file: !597, line: 1456, type: !8676, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8678)
!8676 = !DISubroutineType(types: !8677)
!8677 = !{null, !1028}
!8678 = !{!8679}
!8679 = !DILocalVariable(name: "s", arg: 1, scope: !8675, file: !597, line: 1456, type: !1028)
!8680 = !DILocation(line: 0, scope: !8675)
!8681 = !DILocation(line: 1458, column: 7, scope: !8682)
!8682 = distinct !DILexicalBlock(scope: !8675, file: !597, line: 1458, column: 7)
!8683 = !DILocation(line: 1458, column: 7, scope: !8675)
!8684 = !DILocation(line: 1460, column: 7, scope: !8685)
!8685 = distinct !DILexicalBlock(scope: !8682, file: !597, line: 1459, column: 5)
!8686 = !DILocation(line: 1461, column: 7, scope: !8685)
!8687 = !DILocation(line: 1462, column: 5, scope: !8685)
!8688 = !DILocation(line: 1463, column: 1, scope: !8675)
!8689 = distinct !DISubprogram(name: "unsave_expr_1", scope: !3, file: !3, line: 4162, type: !2352, scopeLine: 4163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8690)
!8690 = !{!8691}
!8691 = !DILocalVariable(name: "expr", arg: 1, scope: !8689, file: !3, line: 4162, type: !704)
!8692 = !DILocation(line: 0, scope: !8689)
!8693 = !DILocation(line: 4164, column: 11, scope: !8689)
!8694 = !DILocation(line: 4164, column: 3, scope: !8689)
!8695 = !DILocation(line: 4171, column: 11, scope: !8696)
!8696 = distinct !DILexicalBlock(scope: !8697, file: !3, line: 4171, column: 11)
!8697 = distinct !DILexicalBlock(scope: !8689, file: !3, line: 4165, column: 5)
!8698 = !DILocation(line: 4171, column: 11, scope: !8697)
!8699 = !DILocation(line: 4174, column: 32, scope: !8697)
!8700 = !DILocation(line: 4174, column: 30, scope: !8697)
!8701 = !DILocation(line: 4175, column: 30, scope: !8697)
!8702 = !DILocation(line: 4176, column: 7, scope: !8697)
!8703 = !DILocation(line: 4181, column: 1, scope: !8689)
!8704 = distinct !DISubprogram(name: "gimple_label_label", scope: !597, file: !597, line: 2444, type: !4440, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8705)
!8705 = !{!8706}
!8706 = !DILocalVariable(name: "gs", arg: 1, scope: !8704, file: !597, line: 2444, type: !4433)
!8707 = !DILocation(line: 0, scope: !8704)
!8708 = !DILocation(line: 2447, column: 10, scope: !8704)
!8709 = !DILocation(line: 2447, column: 3, scope: !8704)
!8710 = distinct !DISubprogram(name: "gimple_bind_set_block", scope: !597, file: !597, line: 2570, type: !7731, scopeLine: 2571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8711)
!8711 = !{!8712, !8713}
!8712 = !DILocalVariable(name: "gs", arg: 1, scope: !8710, file: !597, line: 2570, type: !1028)
!8713 = !DILocalVariable(name: "block", arg: 2, scope: !8710, file: !597, line: 2570, type: !704)
!8714 = !DILocation(line: 0, scope: !8710)
!8715 = !DILocation(line: 2573, column: 3, scope: !8710)
!8716 = !DILocation(line: 2574, column: 19, scope: !8710)
!8717 = !DILocation(line: 2574, column: 25, scope: !8710)
!8718 = !DILocation(line: 2575, column: 1, scope: !8710)
!8719 = distinct !DISubprogram(name: "gimple_bind_set_vars", scope: !597, file: !597, line: 2496, type: !7731, scopeLine: 2497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8720)
!8720 = !{!8721, !8722}
!8721 = !DILocalVariable(name: "gs", arg: 1, scope: !8719, file: !597, line: 2496, type: !1028)
!8722 = !DILocalVariable(name: "vars", arg: 2, scope: !8719, file: !597, line: 2496, type: !704)
!8723 = !DILocation(line: 0, scope: !8719)
!8724 = !DILocation(line: 2499, column: 19, scope: !8719)
!8725 = !DILocation(line: 2499, column: 24, scope: !8719)
!8726 = !DILocation(line: 2500, column: 1, scope: !8719)
!8727 = distinct !DISubprogram(name: "copy_decl_to_var", scope: !3, file: !3, line: 4504, type: !2879, scopeLine: 4505, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8728)
!8728 = !{!8729, !8730, !8731, !8732}
!8729 = !DILocalVariable(name: "decl", arg: 1, scope: !8727, file: !3, line: 4504, type: !704)
!8730 = !DILocalVariable(name: "id", arg: 2, scope: !8727, file: !3, line: 4504, type: !2095)
!8731 = !DILocalVariable(name: "copy", scope: !8727, file: !3, line: 4506, type: !704)
!8732 = !DILocalVariable(name: "type", scope: !8727, file: !3, line: 4506, type: !704)
!8733 = !DILocation(line: 0, scope: !8727)
!8734 = !DILocation(line: 4508, column: 3, scope: !8727)
!8735 = !DILocation(line: 4511, column: 10, scope: !8727)
!8736 = !DILocation(line: 4513, column: 10, scope: !8727)
!8737 = !DILocation(line: 4515, column: 29, scope: !8727)
!8738 = !DILocation(line: 4515, column: 3, scope: !8727)
!8739 = !DILocation(line: 4515, column: 27, scope: !8727)
!8740 = !DILocation(line: 4516, column: 26, scope: !8727)
!8741 = !DILocation(line: 4516, column: 24, scope: !8727)
!8742 = !DILocation(line: 4517, column: 31, scope: !8727)
!8743 = !DILocation(line: 4517, column: 29, scope: !8727)
!8744 = !DILocation(line: 4518, column: 30, scope: !8727)
!8745 = !DILocation(line: 4518, column: 3, scope: !8727)
!8746 = !DILocation(line: 4518, column: 28, scope: !8727)
!8747 = !DILocation(line: 4520, column: 10, scope: !8727)
!8748 = !DILocation(line: 4520, column: 3, scope: !8727)
!8749 = distinct !DISubprogram(name: "has_label_address_in_static_1", scope: !3, file: !3, line: 2716, type: !2989, scopeLine: 2717, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8750)
!8750 = !{!8751, !8752, !8753, !8754, !8755}
!8751 = !DILocalVariable(name: "nodep", arg: 1, scope: !8749, file: !3, line: 2716, type: !703)
!8752 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !8749, file: !3, line: 2716, type: !2991)
!8753 = !DILocalVariable(name: "fnp", arg: 3, scope: !8749, file: !3, line: 2716, type: !700)
!8754 = !DILocalVariable(name: "node", scope: !8749, file: !3, line: 2718, type: !704)
!8755 = !DILocalVariable(name: "fn", scope: !8749, file: !3, line: 2719, type: !704)
!8756 = !DILocation(line: 0, scope: !8749)
!8757 = !DILocation(line: 2718, column: 15, scope: !8749)
!8758 = !DILocation(line: 2721, column: 7, scope: !8759)
!8759 = distinct !DILexicalBlock(scope: !8749, file: !3, line: 2721, column: 7)
!8760 = !DILocation(line: 2721, column: 24, scope: !8759)
!8761 = !DILocation(line: 2721, column: 38, scope: !8759)
!8762 = !DILocation(line: 2719, column: 13, scope: !8749)
!8763 = !DILocation(line: 2721, column: 41, scope: !8759)
!8764 = !DILocation(line: 2721, column: 61, scope: !8759)
!8765 = !DILocation(line: 2721, column: 7, scope: !8749)
!8766 = !DILocation(line: 2724, column: 7, scope: !8767)
!8767 = distinct !DILexicalBlock(scope: !8749, file: !3, line: 2724, column: 7)
!8768 = !DILocation(line: 2724, column: 7, scope: !8749)
!8769 = !DILocation(line: 2725, column: 20, scope: !8767)
!8770 = !DILocation(line: 2725, column: 5, scope: !8767)
!8771 = !DILocation(line: 2728, column: 1, scope: !8749)
!8772 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_heap_reserve", scope: !1416, file: !1416, line: 177, type: !8773, scopeLine: 177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8775)
!8773 = !DISubroutineType(types: !8774)
!8774 = !{!696, !5909, !696}
!8775 = !{!8776, !8777, !8778}
!8776 = !DILocalVariable(name: "vec_", arg: 1, scope: !8772, file: !1416, line: 177, type: !5909)
!8777 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8772, file: !1416, line: 177, type: !696)
!8778 = !DILocalVariable(name: "extend", scope: !8772, file: !1416, line: 177, type: !696)
!8779 = !DILocation(line: 0, scope: !8772)
!8780 = !DILocation(line: 177, column: 1, scope: !8772)
!8781 = !DILocation(line: 177, column: 1, scope: !8782)
!8782 = distinct !DILexicalBlock(scope: !8772, file: !1416, line: 177, column: 1)
!8783 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_base_quick_push", scope: !1416, file: !1416, line: 176, type: !8784, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8786)
!8784 = !DISubroutineType(types: !8785)
!8785 = !{!5908, !5885, !2157}
!8786 = !{!8787, !8788, !8789}
!8787 = !DILocalVariable(name: "vec_", arg: 1, scope: !8783, file: !1416, line: 176, type: !5885)
!8788 = !DILocalVariable(name: "obj_", arg: 2, scope: !8783, file: !1416, line: 176, type: !2157)
!8789 = !DILocalVariable(name: "slot_", scope: !8783, file: !1416, line: 176, type: !5908)
!8790 = !DILocation(line: 0, scope: !8783)
!8791 = !DILocation(line: 176, column: 1, scope: !8783)
!8792 = distinct !DISubprogram(name: "VEC_ipa_opt_pass_base_space", scope: !1416, file: !1416, line: 176, type: !8793, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8795)
!8793 = !DISubroutineType(types: !8794)
!8794 = !{!696, !5885, !696}
!8795 = !{!8796, !8797}
!8796 = !DILocalVariable(name: "vec_", arg: 1, scope: !8792, file: !1416, line: 176, type: !5885)
!8797 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8792, file: !1416, line: 176, type: !696)
!8798 = !DILocation(line: 0, scope: !8792)
!8799 = !DILocation(line: 176, column: 1, scope: !8792)
!8800 = distinct !DISubprogram(name: "self_inlining_addr_expr", scope: !3, file: !3, line: 2235, type: !5460, scopeLine: 2236, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8801)
!8801 = !{!8802, !8803, !8804}
!8802 = !DILocalVariable(name: "value", arg: 1, scope: !8800, file: !3, line: 2235, type: !704)
!8803 = !DILocalVariable(name: "fn", arg: 2, scope: !8800, file: !3, line: 2235, type: !704)
!8804 = !DILocalVariable(name: "var", scope: !8800, file: !3, line: 2237, type: !704)
!8805 = !DILocation(line: 0, scope: !8800)
!8806 = !DILocation(line: 2239, column: 7, scope: !8807)
!8807 = distinct !DILexicalBlock(scope: !8800, file: !3, line: 2239, column: 7)
!8808 = !DILocation(line: 2239, column: 25, scope: !8807)
!8809 = !DILocation(line: 2239, column: 7, scope: !8800)
!8810 = !DILocation(line: 2242, column: 27, scope: !8800)
!8811 = !DILocation(line: 2242, column: 9, scope: !8800)
!8812 = !DILocation(line: 2244, column: 10, scope: !8800)
!8813 = !DILocation(line: 2244, column: 14, scope: !8800)
!8814 = !DILocation(line: 2244, column: 17, scope: !8800)
!8815 = !DILocation(line: 2244, column: 3, scope: !8800)
!8816 = !DILocation(line: 2245, column: 1, scope: !8800)
!8817 = distinct !DISubprogram(name: "insert_debug_decl_map", scope: !3, file: !3, line: 154, type: !2858, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8818)
!8818 = !{!8819, !8820, !8821}
!8819 = !DILocalVariable(name: "id", arg: 1, scope: !8817, file: !3, line: 154, type: !2095)
!8820 = !DILocalVariable(name: "key", arg: 2, scope: !8817, file: !3, line: 154, type: !704)
!8821 = !DILocalVariable(name: "value", arg: 3, scope: !8817, file: !3, line: 154, type: !704)
!8822 = !DILocation(line: 0, scope: !8817)
!8823 = !DILocation(line: 156, column: 29, scope: !8824)
!8824 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 156, column: 7)
!8825 = !DILocation(line: 156, column: 8, scope: !8824)
!8826 = !DILocation(line: 159, column: 8, scope: !8827)
!8827 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 159, column: 7)
!8828 = !DILocation(line: 156, column: 7, scope: !8817)
!8829 = !DILocation(line: 162, column: 8, scope: !8830)
!8830 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 162, column: 7)
!8831 = !DILocation(line: 162, column: 7, scope: !8817)
!8832 = !DILocation(line: 165, column: 3, scope: !8817)
!8833 = !DILocation(line: 166, column: 3, scope: !8817)
!8834 = !DILocation(line: 168, column: 12, scope: !8835)
!8835 = distinct !DILexicalBlock(scope: !8817, file: !3, line: 168, column: 7)
!8836 = !DILocation(line: 168, column: 8, scope: !8835)
!8837 = !DILocation(line: 168, column: 7, scope: !8817)
!8838 = !DILocation(line: 169, column: 21, scope: !8835)
!8839 = !DILocation(line: 169, column: 19, scope: !8835)
!8840 = !DILocation(line: 169, column: 5, scope: !8835)
!8841 = !DILocation(line: 171, column: 28, scope: !8817)
!8842 = !DILocation(line: 171, column: 39, scope: !8817)
!8843 = !DILocation(line: 171, column: 4, scope: !8817)
!8844 = !DILocation(line: 171, column: 44, scope: !8817)
!8845 = !DILocation(line: 172, column: 1, scope: !8817)
!8846 = distinct !DISubprogram(name: "insert_init_debug_bind", scope: !3, file: !3, line: 2252, type: !8847, scopeLine: 2255, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8849)
!8847 = !DISubroutineType(types: !8848)
!8848 = !{!1028, !2095, !1584, !704, !704, !1028}
!8849 = !{!8850, !8851, !8852, !8853, !8854, !8855, !8856, !8857}
!8850 = !DILocalVariable(name: "id", arg: 1, scope: !8846, file: !3, line: 2252, type: !2095)
!8851 = !DILocalVariable(name: "bb", arg: 2, scope: !8846, file: !3, line: 2253, type: !1584)
!8852 = !DILocalVariable(name: "var", arg: 3, scope: !8846, file: !3, line: 2253, type: !704)
!8853 = !DILocalVariable(name: "value", arg: 4, scope: !8846, file: !3, line: 2253, type: !704)
!8854 = !DILocalVariable(name: "base_stmt", arg: 5, scope: !8846, file: !3, line: 2254, type: !1028)
!8855 = !DILocalVariable(name: "note", scope: !8846, file: !3, line: 2256, type: !1028)
!8856 = !DILocalVariable(name: "gsi", scope: !8846, file: !3, line: 2257, type: !2373)
!8857 = !DILocalVariable(name: "tracked_var", scope: !8846, file: !3, line: 2258, type: !704)
!8858 = !DILocation(line: 0, scope: !8846)
!8859 = !DILocation(line: 2257, column: 3, scope: !8846)
!8860 = !DILocation(line: 2260, column: 29, scope: !8861)
!8861 = distinct !DILexicalBlock(scope: !8846, file: !3, line: 2260, column: 7)
!8862 = !DILocation(line: 2260, column: 8, scope: !8861)
!8863 = !DILocation(line: 2263, column: 8, scope: !8864)
!8864 = distinct !DILexicalBlock(scope: !8846, file: !3, line: 2263, column: 7)
!8865 = !DILocation(line: 2260, column: 7, scope: !8846)
!8866 = !DILocation(line: 2266, column: 17, scope: !8846)
!8867 = !DILocation(line: 2267, column: 8, scope: !8868)
!8868 = distinct !DILexicalBlock(scope: !8846, file: !3, line: 2267, column: 7)
!8869 = !DILocation(line: 2267, column: 7, scope: !8846)
!8870 = !DILocation(line: 2270, column: 7, scope: !8871)
!8871 = distinct !DILexicalBlock(scope: !8846, file: !3, line: 2270, column: 7)
!8872 = !DILocation(line: 2270, column: 7, scope: !8846)
!8873 = !DILocation(line: 2272, column: 13, scope: !8874)
!8874 = distinct !DILexicalBlock(scope: !8871, file: !3, line: 2271, column: 5)
!8875 = !DILocation(line: 2273, column: 12, scope: !8876)
!8876 = distinct !DILexicalBlock(scope: !8874, file: !3, line: 2273, column: 11)
!8877 = !DILocation(line: 2273, column: 22, scope: !8876)
!8878 = !DILocation(line: 2273, column: 26, scope: !8876)
!8879 = !DILocation(line: 2273, column: 11, scope: !8874)
!8880 = !DILocation(line: 2274, column: 14, scope: !8876)
!8881 = !DILocation(line: 2274, column: 2, scope: !8876)
!8882 = !DILocation(line: 2277, column: 10, scope: !8846)
!8883 = !DILocation(line: 2279, column: 7, scope: !8846)
!8884 = !DILocation(line: 2281, column: 12, scope: !8885)
!8885 = distinct !DILexicalBlock(scope: !8886, file: !3, line: 2281, column: 11)
!8886 = distinct !DILexicalBlock(scope: !8887, file: !3, line: 2280, column: 5)
!8887 = distinct !DILexicalBlock(scope: !8846, file: !3, line: 2279, column: 7)
!8888 = !DILocation(line: 2281, column: 11, scope: !8886)
!8889 = !DILocation(line: 2282, column: 2, scope: !8885)
!8890 = !DILocation(line: 2284, column: 2, scope: !8885)
!8891 = !DILocation(line: 2288, column: 1, scope: !8846)
!8892 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !597, file: !597, line: 34, type: !8893, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8895)
!8893 = !DISubroutineType(types: !8894)
!8894 = !{!696, !6252, !696}
!8895 = !{!8896, !8897, !8898}
!8896 = !DILocalVariable(name: "vec_", arg: 1, scope: !8892, file: !597, line: 34, type: !6252)
!8897 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8892, file: !597, line: 34, type: !696)
!8898 = !DILocalVariable(name: "extend", scope: !8892, file: !597, line: 34, type: !696)
!8899 = !DILocation(line: 0, scope: !8892)
!8900 = !DILocation(line: 34, column: 1, scope: !8892)
!8901 = !DILocation(line: 34, column: 1, scope: !8902)
!8902 = distinct !DILexicalBlock(scope: !8892, file: !597, line: 34, column: 1)
!8903 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !597, file: !597, line: 33, type: !8904, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8906)
!8904 = !DISubroutineType(types: !8905)
!8905 = !{!2221, !6521, !1028}
!8906 = !{!8907, !8908, !8909}
!8907 = !DILocalVariable(name: "vec_", arg: 1, scope: !8903, file: !597, line: 33, type: !6521)
!8908 = !DILocalVariable(name: "obj_", arg: 2, scope: !8903, file: !597, line: 33, type: !1028)
!8909 = !DILocalVariable(name: "slot_", scope: !8903, file: !597, line: 33, type: !2221)
!8910 = !DILocation(line: 0, scope: !8903)
!8911 = !DILocation(line: 33, column: 1, scope: !8903)
!8912 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !597, file: !597, line: 33, type: !8913, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8915)
!8913 = !DISubroutineType(types: !8914)
!8914 = !{!696, !6521, !696}
!8915 = !{!8916, !8917}
!8916 = !DILocalVariable(name: "vec_", arg: 1, scope: !8912, file: !597, line: 33, type: !6521)
!8917 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8912, file: !597, line: 33, type: !696)
!8918 = !DILocation(line: 0, scope: !8912)
!8919 = !DILocation(line: 33, column: 1, scope: !8912)
!8920 = distinct !DISubprogram(name: "remapped_type", scope: !3, file: !3, line: 473, type: !2879, scopeLine: 474, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8921)
!8921 = !{!8922, !8923, !8924}
!8922 = !DILocalVariable(name: "type", arg: 1, scope: !8920, file: !3, line: 473, type: !704)
!8923 = !DILocalVariable(name: "id", arg: 2, scope: !8920, file: !3, line: 473, type: !2095)
!8924 = !DILocalVariable(name: "node", scope: !8920, file: !3, line: 475, type: !703)
!8925 = !DILocation(line: 0, scope: !8920)
!8926 = !DILocation(line: 477, column: 12, scope: !8927)
!8927 = distinct !DILexicalBlock(scope: !8920, file: !3, line: 477, column: 7)
!8928 = !DILocation(line: 477, column: 7, scope: !8920)
!8929 = !DILocation(line: 481, column: 45, scope: !8920)
!8930 = !DILocation(line: 481, column: 55, scope: !8920)
!8931 = !DILocation(line: 481, column: 19, scope: !8920)
!8932 = !DILocation(line: 482, column: 7, scope: !8933)
!8933 = distinct !DILexicalBlock(scope: !8920, file: !3, line: 482, column: 7)
!8934 = !DILocation(line: 482, column: 7, scope: !8920)
!8935 = !DILocation(line: 481, column: 10, scope: !8920)
!8936 = !DILocation(line: 483, column: 12, scope: !8933)
!8937 = !DILocation(line: 483, column: 5, scope: !8933)
!8938 = !DILocation(line: 486, column: 1, scope: !8920)
!8939 = distinct !DISubprogram(name: "copy_cfg_body", scope: !3, file: !3, line: 2040, type: !6420, scopeLine: 2042, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8940)
!8940 = !{!8941, !8942, !8943, !8944, !8945, !8946, !8947, !8948, !8949, !8950, !8951, !8952, !8953}
!8941 = !DILocalVariable(name: "id", arg: 1, scope: !8939, file: !3, line: 2040, type: !2095)
!8942 = !DILocalVariable(name: "count", arg: 2, scope: !8939, file: !3, line: 2040, type: !1238)
!8943 = !DILocalVariable(name: "frequency_scale", arg: 3, scope: !8939, file: !3, line: 2040, type: !696)
!8944 = !DILocalVariable(name: "entry_block_map", arg: 4, scope: !8939, file: !3, line: 2041, type: !1584)
!8945 = !DILocalVariable(name: "exit_block_map", arg: 5, scope: !8939, file: !3, line: 2041, type: !1584)
!8946 = !DILocalVariable(name: "callee_fndecl", scope: !8939, file: !3, line: 2043, type: !704)
!8947 = !DILocalVariable(name: "src_cfun", scope: !8939, file: !3, line: 2045, type: !1414)
!8948 = !DILocalVariable(name: "cfun_to_copy", scope: !8939, file: !3, line: 2046, type: !1414)
!8949 = !DILocalVariable(name: "bb", scope: !8939, file: !3, line: 2047, type: !1584)
!8950 = !DILocalVariable(name: "new_fndecl", scope: !8939, file: !3, line: 2048, type: !704)
!8951 = !DILocalVariable(name: "count_scale", scope: !8939, file: !3, line: 2049, type: !1238)
!8952 = !DILocalVariable(name: "last", scope: !8939, file: !3, line: 2050, type: !696)
!8953 = !DILocalVariable(name: "new_bb", scope: !8954, file: !3, line: 2080, type: !1584)
!8954 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 2079, column: 5)
!8955 = distinct !DILexicalBlock(scope: !8956, file: !3, line: 2078, column: 3)
!8956 = distinct !DILexicalBlock(scope: !8939, file: !3, line: 2078, column: 3)
!8957 = !DILocation(line: 0, scope: !8939)
!8958 = !DILocation(line: 2043, column: 28, scope: !8939)
!8959 = !DILocation(line: 2045, column: 31, scope: !8939)
!8960 = !DILocation(line: 2052, column: 7, scope: !8961)
!8961 = distinct !DILexicalBlock(scope: !8939, file: !3, line: 2052, column: 7)
!8962 = !DILocation(line: 2052, column: 48, scope: !8961)
!8963 = !DILocation(line: 2052, column: 7, scope: !8939)
!8964 = !DILocation(line: 2053, column: 37, scope: !8961)
!8965 = !DILocation(line: 2054, column: 6, scope: !8961)
!8966 = !DILocation(line: 2053, column: 5, scope: !8961)
!8967 = !DILocation(line: 0, scope: !8961)
!8968 = !DILocation(line: 2059, column: 3, scope: !8939)
!8969 = !DILocation(line: 2062, column: 3, scope: !8939)
!8970 = !DILocation(line: 2065, column: 33, scope: !8939)
!8971 = !DILocation(line: 2065, column: 22, scope: !8939)
!8972 = !DILocation(line: 2065, column: 31, scope: !8939)
!8973 = !DILocation(line: 2067, column: 3, scope: !8939)
!8974 = !DILocation(line: 2067, column: 48, scope: !8939)
!8975 = !DILocation(line: 2067, column: 52, scope: !8939)
!8976 = !DILocation(line: 2068, column: 3, scope: !8939)
!8977 = !DILocation(line: 2068, column: 47, scope: !8939)
!8978 = !DILocation(line: 2068, column: 51, scope: !8939)
!8979 = !DILocation(line: 2069, column: 26, scope: !8939)
!8980 = !DILocation(line: 2069, column: 20, scope: !8939)
!8981 = !DILocation(line: 2069, column: 24, scope: !8939)
!8982 = !DILocation(line: 2070, column: 25, scope: !8939)
!8983 = !DILocation(line: 2070, column: 19, scope: !8939)
!8984 = !DILocation(line: 2070, column: 23, scope: !8939)
!8985 = !DILocation(line: 2073, column: 7, scope: !8986)
!8986 = distinct !DILexicalBlock(scope: !8939, file: !3, line: 2073, column: 7)
!8987 = !DILocation(line: 2073, column: 13, scope: !8986)
!8988 = !DILocation(line: 2073, column: 7, scope: !8939)
!8989 = !DILocation(line: 2074, column: 64, scope: !8986)
!8990 = !DILocation(line: 2075, column: 26, scope: !8986)
!8991 = !DILocation(line: 2074, column: 18, scope: !8986)
!8992 = !DILocation(line: 2074, column: 9, scope: !8986)
!8993 = !DILocation(line: 2074, column: 16, scope: !8986)
!8994 = !DILocation(line: 2074, column: 5, scope: !8986)
!8995 = !DILocation(line: 2078, column: 3, scope: !8956)
!8996 = !DILocation(line: 2078, column: 3, scope: !8955)
!8997 = !DILocation(line: 0, scope: !8956)
!8998 = !DILocation(line: 2080, column: 28, scope: !8954)
!8999 = !DILocation(line: 0, scope: !8954)
!9000 = !DILocation(line: 2081, column: 11, scope: !8954)
!9001 = !DILocation(line: 2081, column: 15, scope: !8954)
!9002 = !DILocation(line: 2082, column: 15, scope: !8954)
!9003 = !DILocation(line: 2082, column: 19, scope: !8954)
!9004 = distinct !{!9004, !8995, !9005}
!9005 = !DILocation(line: 2083, column: 5, scope: !8956)
!9006 = !DILocation(line: 2085, column: 10, scope: !8939)
!9007 = !DILocation(line: 2088, column: 3, scope: !9008)
!9008 = distinct !DILexicalBlock(scope: !8939, file: !3, line: 2088, column: 3)
!9009 = !DILocation(line: 0, scope: !9008)
!9010 = !DILocation(line: 2089, column: 5, scope: !9011)
!9011 = distinct !DILexicalBlock(scope: !9008, file: !3, line: 2088, column: 3)
!9012 = !DILocation(line: 2088, column: 3, scope: !9011)
!9013 = distinct !{!9013, !9007, !9014}
!9014 = !DILocation(line: 2089, column: 55, scope: !9008)
!9015 = !DILocation(line: 2091, column: 24, scope: !9016)
!9016 = distinct !DILexicalBlock(scope: !8939, file: !3, line: 2091, column: 7)
!9017 = !DILocation(line: 2091, column: 7, scope: !9016)
!9018 = !DILocation(line: 2091, column: 7, scope: !8939)
!9019 = !DILocation(line: 2092, column: 5, scope: !9020)
!9020 = distinct !DILexicalBlock(scope: !9016, file: !3, line: 2092, column: 5)
!9021 = !DILocation(line: 0, scope: !9020)
!9022 = !DILocation(line: 2093, column: 7, scope: !9023)
!9023 = distinct !DILexicalBlock(scope: !9020, file: !3, line: 2092, column: 5)
!9024 = !DILocation(line: 2092, column: 5, scope: !9023)
!9025 = distinct !{!9025, !9019, !9026}
!9026 = !DILocation(line: 2093, column: 31, scope: !9020)
!9027 = !DILocation(line: 2095, column: 3, scope: !9028)
!9028 = distinct !DILexicalBlock(scope: !8939, file: !3, line: 2095, column: 3)
!9029 = !DILocation(line: 0, scope: !9028)
!9030 = !DILocation(line: 2103, column: 3, scope: !9031)
!9031 = distinct !DILexicalBlock(scope: !8939, file: !3, line: 2103, column: 3)
!9032 = !DILocation(line: 2097, column: 25, scope: !9033)
!9033 = distinct !DILexicalBlock(scope: !9034, file: !3, line: 2096, column: 5)
!9034 = distinct !DILexicalBlock(scope: !9028, file: !3, line: 2095, column: 3)
!9035 = !DILocation(line: 2097, column: 31, scope: !9033)
!9036 = !DILocation(line: 2097, column: 35, scope: !9033)
!9037 = !DILocation(line: 2098, column: 15, scope: !9033)
!9038 = !DILocation(line: 2095, column: 3, scope: !9034)
!9039 = distinct !{!9039, !9027, !9040}
!9040 = !DILocation(line: 2099, column: 5, scope: !9028)
!9041 = !DILocation(line: 2103, column: 17, scope: !9042)
!9042 = distinct !DILexicalBlock(scope: !9031, file: !3, line: 2103, column: 3)
!9043 = !DILocation(line: 2103, column: 15, scope: !9042)
!9044 = !DILocation(line: 2104, column: 5, scope: !9042)
!9045 = !DILocation(line: 2104, column: 25, scope: !9042)
!9046 = !DILocation(line: 2104, column: 29, scope: !9042)
!9047 = !DILocation(line: 2103, column: 39, scope: !9042)
!9048 = !DILocation(line: 2103, column: 3, scope: !9042)
!9049 = distinct !{!9049, !9030, !9050}
!9050 = !DILocation(line: 2104, column: 31, scope: !9031)
!9051 = !DILocation(line: 2105, column: 24, scope: !8939)
!9052 = !DILocation(line: 2106, column: 23, scope: !8939)
!9053 = !DILocation(line: 2108, column: 11, scope: !9054)
!9054 = distinct !DILexicalBlock(scope: !8939, file: !3, line: 2108, column: 7)
!9055 = !DILocation(line: 2108, column: 7, scope: !9054)
!9056 = !DILocation(line: 2108, column: 7, scope: !8939)
!9057 = !DILocation(line: 2110, column: 7, scope: !9058)
!9058 = distinct !DILexicalBlock(scope: !9054, file: !3, line: 2109, column: 5)
!9059 = !DILocation(line: 2111, column: 18, scope: !9058)
!9060 = !DILocation(line: 2112, column: 5, scope: !9058)
!9061 = !DILocation(line: 2114, column: 3, scope: !8939)
!9062 = distinct !DISubprogram(name: "copy_debug_stmts", scope: !3, file: !3, line: 2185, type: !6528, scopeLine: 2186, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9063)
!9063 = !{!9064, !9065, !9066}
!9064 = !DILocalVariable(name: "id", arg: 1, scope: !9062, file: !3, line: 2185, type: !2095)
!9065 = !DILocalVariable(name: "i", scope: !9062, file: !3, line: 2187, type: !1172)
!9066 = !DILocalVariable(name: "stmt", scope: !9062, file: !3, line: 2188, type: !1028)
!9067 = !DILocation(line: 0, scope: !9062)
!9068 = !DILocation(line: 2188, column: 3, scope: !9062)
!9069 = !DILocation(line: 2190, column: 12, scope: !9070)
!9070 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 2190, column: 7)
!9071 = !DILocation(line: 2190, column: 8, scope: !9070)
!9072 = !DILocation(line: 2190, column: 7, scope: !9062)
!9073 = !DILocation(line: 2193, column: 3, scope: !9074)
!9074 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 2193, column: 3)
!9075 = !DILocation(line: 2193, column: 15, scope: !9076)
!9076 = distinct !DILexicalBlock(scope: !9074, file: !3, line: 2193, column: 3)
!9077 = !DILocation(line: 0, scope: !9074)
!9078 = !DILocation(line: 2194, column: 22, scope: !9076)
!9079 = !DILocation(line: 2194, column: 5, scope: !9076)
!9080 = !DILocation(line: 2193, column: 64, scope: !9076)
!9081 = !DILocation(line: 2193, column: 3, scope: !9076)
!9082 = distinct !{!9082, !9073, !9083}
!9083 = !DILocation(line: 2194, column: 30, scope: !9074)
!9084 = !DILocation(line: 2196, column: 3, scope: !9062)
!9085 = !DILocation(line: 2197, column: 1, scope: !9062)
!9086 = distinct !DISubprogram(name: "remap_decl_1", scope: !3, file: !3, line: 1962, type: !9087, scopeLine: 1963, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9089)
!9087 = !DISubroutineType(types: !9088)
!9088 = !{!704, !704, !700}
!9089 = !{!9090, !9091}
!9090 = !DILocalVariable(name: "decl", arg: 1, scope: !9086, file: !3, line: 1962, type: !704)
!9091 = !DILocalVariable(name: "data", arg: 2, scope: !9086, file: !3, line: 1962, type: !700)
!9092 = !DILocation(line: 0, scope: !9086)
!9093 = !DILocation(line: 1964, column: 28, scope: !9086)
!9094 = !DILocation(line: 1964, column: 10, scope: !9086)
!9095 = !DILocation(line: 1964, column: 3, scope: !9086)
!9096 = distinct !DISubprogram(name: "copy_bb", scope: !3, file: !3, line: 1459, type: !9097, scopeLine: 1461, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9099)
!9097 = !DISubroutineType(types: !9098)
!9098 = !{!1584, !2095, !1584, !696, !1238}
!9099 = !{!9100, !9101, !9102, !9103, !9104, !9105, !9106, !9107, !9108, !9109, !9110, !9114, !9115, !9118, !9120, !9123, !9124, !9125, !9126, !9127, !9130, !9131, !9132, !9133, !9136, !9137, !9141, !9144, !9159}
!9100 = !DILocalVariable(name: "id", arg: 1, scope: !9096, file: !3, line: 1459, type: !2095)
!9101 = !DILocalVariable(name: "bb", arg: 2, scope: !9096, file: !3, line: 1459, type: !1584)
!9102 = !DILocalVariable(name: "frequency_scale", arg: 3, scope: !9096, file: !3, line: 1459, type: !696)
!9103 = !DILocalVariable(name: "count_scale", arg: 4, scope: !9096, file: !3, line: 1460, type: !1238)
!9104 = !DILocalVariable(name: "gsi", scope: !9096, file: !3, line: 1462, type: !2373)
!9105 = !DILocalVariable(name: "copy_gsi", scope: !9096, file: !3, line: 1462, type: !2373)
!9106 = !DILocalVariable(name: "seq_gsi", scope: !9096, file: !3, line: 1462, type: !2373)
!9107 = !DILocalVariable(name: "copy_basic_block", scope: !9096, file: !3, line: 1463, type: !1584)
!9108 = !DILocalVariable(name: "decl", scope: !9096, file: !3, line: 1464, type: !704)
!9109 = !DILocalVariable(name: "freq", scope: !9096, file: !3, line: 1465, type: !1238)
!9110 = !DILocalVariable(name: "stmt", scope: !9111, file: !3, line: 1486, type: !1028)
!9111 = distinct !DILexicalBlock(scope: !9112, file: !3, line: 1485, column: 5)
!9112 = distinct !DILexicalBlock(scope: !9113, file: !3, line: 1484, column: 3)
!9113 = distinct !DILexicalBlock(scope: !9096, file: !3, line: 1484, column: 3)
!9114 = !DILocalVariable(name: "orig_stmt", scope: !9111, file: !3, line: 1487, type: !1028)
!9115 = !DILocalVariable(name: "new_rhs", scope: !9116, file: !3, line: 1503, type: !704)
!9116 = distinct !DILexicalBlock(scope: !9117, file: !3, line: 1502, column: 2)
!9117 = distinct !DILexicalBlock(scope: !9111, file: !3, line: 1499, column: 11)
!9118 = !DILocalVariable(name: "fn", scope: !9119, file: !3, line: 1528, type: !704)
!9119 = distinct !DILexicalBlock(scope: !9111, file: !3, line: 1527, column: 2)
!9120 = !DILocalVariable(name: "p", scope: !9121, file: !3, line: 1537, type: !704)
!9121 = distinct !DILexicalBlock(scope: !9122, file: !3, line: 1534, column: 6)
!9122 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 1531, column: 8)
!9123 = !DILocalVariable(name: "new_call", scope: !9121, file: !3, line: 1538, type: !1028)
!9124 = !DILocalVariable(name: "argarray", scope: !9121, file: !3, line: 1539, type: !2386)
!9125 = !DILocalVariable(name: "nargs", scope: !9121, file: !3, line: 1540, type: !1172)
!9126 = !DILocalVariable(name: "n", scope: !9121, file: !3, line: 1541, type: !1172)
!9127 = !DILocalVariable(name: "nargs", scope: !9128, file: !3, line: 1587, type: !1172)
!9128 = distinct !DILexicalBlock(scope: !9129, file: !3, line: 1584, column: 6)
!9129 = distinct !DILexicalBlock(scope: !9122, file: !3, line: 1579, column: 13)
!9130 = !DILocalVariable(name: "count", scope: !9128, file: !3, line: 1588, type: !704)
!9131 = !DILocalVariable(name: "p", scope: !9128, file: !3, line: 1588, type: !704)
!9132 = !DILocalVariable(name: "new_stmt", scope: !9128, file: !3, line: 1589, type: !1028)
!9133 = !DILocalVariable(name: "edge", scope: !9134, file: !3, line: 1618, type: !2107)
!9134 = distinct !DILexicalBlock(scope: !9135, file: !3, line: 1617, column: 6)
!9135 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 1616, column: 8)
!9136 = !DILocalVariable(name: "flags", scope: !9134, file: !3, line: 1619, type: !696)
!9137 = !DILocalVariable(name: "edge_freq", scope: !9138, file: !3, line: 1627, type: !696)
!9138 = distinct !DILexicalBlock(scope: !9139, file: !3, line: 1626, column: 7)
!9139 = distinct !DILexicalBlock(scope: !9140, file: !3, line: 1625, column: 9)
!9140 = distinct !DILexicalBlock(scope: !9134, file: !3, line: 1622, column: 3)
!9141 = !DILocalVariable(name: "dest", scope: !9142, file: !3, line: 1681, type: !2102)
!9142 = distinct !DILexicalBlock(scope: !9143, file: !3, line: 1680, column: 3)
!9143 = distinct !DILexicalBlock(scope: !9134, file: !3, line: 1675, column: 12)
!9144 = !DILocalVariable(name: "i", scope: !9145, file: !3, line: 1723, type: !9147)
!9145 = distinct !DILexicalBlock(scope: !9146, file: !3, line: 1722, column: 6)
!9146 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 1721, column: 8)
!9147 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !687, line: 140, baseType: !9148)
!9148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !687, line: 131, size: 320, elements: !9149)
!9149 = !{!9150, !9151, !9152, !9154, !9156, !9157, !9158}
!9150 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !9148, file: !687, line: 133, baseType: !695, size: 8)
!9151 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !9148, file: !687, line: 134, baseType: !686, size: 32, offset: 32)
!9152 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !9148, file: !687, line: 135, baseType: !9153, size: 64, offset: 64)
!9153 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !687, line: 42, baseType: !1057)
!9154 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !9148, file: !687, line: 136, baseType: !9155, size: 64, offset: 128)
!9155 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !687, line: 50, baseType: !1063)
!9156 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !9148, file: !687, line: 137, baseType: !696, size: 32, offset: 192)
!9157 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !9148, file: !687, line: 138, baseType: !696, size: 32, offset: 224)
!9158 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !9148, file: !687, line: 139, baseType: !1028, size: 64, offset: 256)
!9159 = !DILocalVariable(name: "def", scope: !9145, file: !3, line: 1724, type: !704)
!9160 = !DILocation(line: 0, scope: !9096)
!9161 = !DILocation(line: 1462, column: 3, scope: !9096)
!9162 = !DILocation(line: 1470, column: 60, scope: !9096)
!9163 = !DILocation(line: 1470, column: 69, scope: !9096)
!9164 = !DILocation(line: 1469, column: 22, scope: !9096)
!9165 = !DILocation(line: 1471, column: 33, scope: !9096)
!9166 = !DILocation(line: 1471, column: 39, scope: !9096)
!9167 = !DILocation(line: 1471, column: 53, scope: !9096)
!9168 = !DILocation(line: 1471, column: 21, scope: !9096)
!9169 = !DILocation(line: 1471, column: 27, scope: !9096)
!9170 = !DILocation(line: 1475, column: 26, scope: !9096)
!9171 = !DILocation(line: 1475, column: 11, scope: !9096)
!9172 = !DILocation(line: 1475, column: 38, scope: !9096)
!9173 = !DILocation(line: 1475, column: 36, scope: !9096)
!9174 = !DILocation(line: 1475, column: 54, scope: !9096)
!9175 = !DILocation(line: 1478, column: 7, scope: !9096)
!9176 = !DILocation(line: 1480, column: 33, scope: !9096)
!9177 = !DILocation(line: 1480, column: 21, scope: !9096)
!9178 = !DILocation(line: 1480, column: 31, scope: !9096)
!9179 = !DILocation(line: 1482, column: 14, scope: !9096)
!9180 = !DILocation(line: 1484, column: 14, scope: !9113)
!9181 = !DILocation(line: 0, scope: !9111)
!9182 = !DILocation(line: 0, scope: !9183)
!9183 = distinct !DILexicalBlock(scope: !9111, file: !3, line: 1518, column: 11)
!9184 = !DILocation(line: 0, scope: !9122)
!9185 = !DILocation(line: 0, scope: !9121)
!9186 = !DILocation(line: 0, scope: !9187)
!9187 = distinct !DILexicalBlock(scope: !9121, file: !3, line: 1543, column: 8)
!9188 = !DILocation(line: 0, scope: !9189)
!9189 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 1611, column: 8)
!9190 = !DILocation(line: 0, scope: !9134)
!9191 = !DILocation(line: 0, scope: !9140)
!9192 = !DILocation(line: 0, scope: !9193)
!9193 = distinct !DILexicalBlock(scope: !9194, file: !3, line: 1642, column: 4)
!9194 = distinct !DILexicalBlock(scope: !9138, file: !3, line: 1638, column: 13)
!9195 = !DILocation(line: 0, scope: !9196)
!9196 = distinct !DILexicalBlock(scope: !9142, file: !3, line: 1691, column: 9)
!9197 = !DILocation(line: 0, scope: !9119)
!9198 = !DILocation(line: 0, scope: !9145)
!9199 = !DILocation(line: 1484, column: 8, scope: !9113)
!9200 = !DILocation(line: 1484, column: 34, scope: !9112)
!9201 = !DILocation(line: 1484, column: 33, scope: !9112)
!9202 = !DILocation(line: 1484, column: 3, scope: !9113)
!9203 = !DILocation(line: 1486, column: 21, scope: !9111)
!9204 = !DILocation(line: 1489, column: 22, scope: !9111)
!9205 = !DILocation(line: 1490, column: 14, scope: !9111)
!9206 = !DILocation(line: 1491, column: 11, scope: !9207)
!9207 = distinct !DILexicalBlock(scope: !9111, file: !3, line: 1491, column: 11)
!9208 = !DILocation(line: 1491, column: 11, scope: !9111)
!9209 = !DILocation(line: 1494, column: 41, scope: !9111)
!9210 = !DILocation(line: 1494, column: 57, scope: !9111)
!9211 = !DILocation(line: 1494, column: 7, scope: !9111)
!9212 = !DILocation(line: 1495, column: 17, scope: !9111)
!9213 = !DILocation(line: 1499, column: 11, scope: !9117)
!9214 = !DILocation(line: 1500, column: 4, scope: !9117)
!9215 = !DILocation(line: 1500, column: 7, scope: !9117)
!9216 = !DILocation(line: 1500, column: 37, scope: !9117)
!9217 = !DILocation(line: 1501, column: 4, scope: !9117)
!9218 = !DILocation(line: 1501, column: 23, scope: !9117)
!9219 = !DILocation(line: 1501, column: 8, scope: !9117)
!9220 = !DILocation(line: 1499, column: 11, scope: !9111)
!9221 = !DILocation(line: 1505, column: 12, scope: !9116)
!9222 = !DILocation(line: 1504, column: 14, scope: !9116)
!9223 = !DILocation(line: 0, scope: !9116)
!9224 = !DILocation(line: 1507, column: 4, scope: !9116)
!9225 = !DILocation(line: 1508, column: 19, scope: !9116)
!9226 = !DILocation(line: 1509, column: 2, scope: !9116)
!9227 = !DILocation(line: 1511, column: 7, scope: !9111)
!9228 = !DILocation(line: 1513, column: 15, scope: !9229)
!9229 = distinct !DILexicalBlock(scope: !9111, file: !3, line: 1513, column: 11)
!9230 = !DILocation(line: 1513, column: 11, scope: !9229)
!9231 = !DILocation(line: 1513, column: 11, scope: !9111)
!9232 = !DILocation(line: 1514, column: 2, scope: !9229)
!9233 = !DILocation(line: 1518, column: 11, scope: !9183)
!9234 = !DILocation(line: 1518, column: 11, scope: !9111)
!9235 = !DILocation(line: 1519, column: 13, scope: !9183)
!9236 = !DILocation(line: 1519, column: 2, scope: !9183)
!9237 = !DILocation(line: 1521, column: 2, scope: !9183)
!9238 = !DILocation(line: 1526, column: 7, scope: !9111)
!9239 = !DILocation(line: 1530, column: 11, scope: !9119)
!9240 = !DILocation(line: 1531, column: 8, scope: !9122)
!9241 = !DILocation(line: 1532, column: 8, scope: !9122)
!9242 = !DILocation(line: 1532, column: 11, scope: !9122)
!9243 = !DILocation(line: 1533, column: 8, scope: !9122)
!9244 = !DILocation(line: 1533, column: 15, scope: !9122)
!9245 = !DILocation(line: 1533, column: 11, scope: !9122)
!9246 = !DILocation(line: 1531, column: 8, scope: !9119)
!9247 = !DILocation(line: 1539, column: 8, scope: !9121)
!9248 = !DILocation(line: 1540, column: 23, scope: !9121)
!9249 = !DILocation(line: 1543, column: 17, scope: !9187)
!9250 = !DILocation(line: 1543, column: 13, scope: !9187)
!9251 = !DILocation(line: 1543, column: 8, scope: !9187)
!9252 = !DILocation(line: 1544, column: 8, scope: !9253)
!9253 = distinct !DILexicalBlock(scope: !9187, file: !3, line: 1543, column: 8)
!9254 = !DILocation(line: 1543, column: 53, scope: !9253)
!9255 = !DILocation(line: 1543, column: 8, scope: !9253)
!9256 = distinct !{!9256, !9251, !9257}
!9257 = !DILocation(line: 1544, column: 8, scope: !9187)
!9258 = !DILocation(line: 1547, column: 20, scope: !9121)
!9259 = !DILocation(line: 1548, column: 19, scope: !9121)
!9260 = !DILocation(line: 1548, column: 17, scope: !9121)
!9261 = !DILocation(line: 1549, column: 8, scope: !9121)
!9262 = !DILocation(line: 1552, column: 16, scope: !9121)
!9263 = !DILocation(line: 1553, column: 9, scope: !9121)
!9264 = !DILocation(line: 1554, column: 9, scope: !9121)
!9265 = !DILocation(line: 1554, column: 37, scope: !9121)
!9266 = !DILocation(line: 1552, column: 8, scope: !9121)
!9267 = !DILocation(line: 1557, column: 16, scope: !9121)
!9268 = !DILocation(line: 1557, column: 46, scope: !9121)
!9269 = !DILocation(line: 1557, column: 44, scope: !9121)
!9270 = !DILocation(line: 1558, column: 34, scope: !9121)
!9271 = !DILocation(line: 1558, column: 9, scope: !9121)
!9272 = !DILocation(line: 1559, column: 33, scope: !9121)
!9273 = !DILocation(line: 1559, column: 7, scope: !9121)
!9274 = !DILocation(line: 1559, column: 46, scope: !9121)
!9275 = !DILocation(line: 1559, column: 4, scope: !9121)
!9276 = !DILocation(line: 1560, column: 15, scope: !9121)
!9277 = !DILocation(line: 1557, column: 8, scope: !9121)
!9278 = !DILocation(line: 1562, column: 42, scope: !9121)
!9279 = !DILocation(line: 1563, column: 7, scope: !9121)
!9280 = !DILocation(line: 1562, column: 19, scope: !9121)
!9281 = !DILocation(line: 1565, column: 8, scope: !9121)
!9282 = !DILocation(line: 1569, column: 8, scope: !9121)
!9283 = !DILocation(line: 1570, column: 8, scope: !9121)
!9284 = !DILocation(line: 1571, column: 39, scope: !9121)
!9285 = !DILocation(line: 1571, column: 8, scope: !9121)
!9286 = !DILocation(line: 1572, column: 36, scope: !9121)
!9287 = !DILocation(line: 1572, column: 8, scope: !9121)
!9288 = !DILocation(line: 1573, column: 39, scope: !9121)
!9289 = !DILocation(line: 1573, column: 8, scope: !9121)
!9290 = !DILocation(line: 1575, column: 8, scope: !9121)
!9291 = !DILocation(line: 1576, column: 8, scope: !9121)
!9292 = !DILocation(line: 1578, column: 6, scope: !9122)
!9293 = !DILocation(line: 1578, column: 6, scope: !9121)
!9294 = !DILocation(line: 1579, column: 13, scope: !9129)
!9295 = !DILocation(line: 1580, column: 6, scope: !9129)
!9296 = !DILocation(line: 1580, column: 13, scope: !9129)
!9297 = !DILocation(line: 1580, column: 9, scope: !9129)
!9298 = !DILocation(line: 1581, column: 6, scope: !9129)
!9299 = !DILocation(line: 1581, column: 17, scope: !9129)
!9300 = !DILocation(line: 1581, column: 15, scope: !9129)
!9301 = !DILocation(line: 1582, column: 6, scope: !9129)
!9302 = !DILocation(line: 1582, column: 9, scope: !9129)
!9303 = !DILocation(line: 1582, column: 36, scope: !9129)
!9304 = !DILocation(line: 1583, column: 6, scope: !9129)
!9305 = !DILocation(line: 1583, column: 9, scope: !9129)
!9306 = !DILocation(line: 1583, column: 35, scope: !9129)
!9307 = !DILocation(line: 1579, column: 13, scope: !9122)
!9308 = !DILocation(line: 1587, column: 49, scope: !9128)
!9309 = !DILocation(line: 1587, column: 23, scope: !9128)
!9310 = !DILocation(line: 0, scope: !9128)
!9311 = !DILocation(line: 1591, column: 17, scope: !9312)
!9312 = distinct !DILexicalBlock(scope: !9128, file: !3, line: 1591, column: 8)
!9313 = !DILocation(line: 1591, column: 13, scope: !9312)
!9314 = !DILocation(line: 0, scope: !9312)
!9315 = !DILocation(line: 1591, column: 8, scope: !9312)
!9316 = !DILocation(line: 1592, column: 8, scope: !9317)
!9317 = distinct !DILexicalBlock(scope: !9312, file: !3, line: 1591, column: 8)
!9318 = !DILocation(line: 1591, column: 53, scope: !9317)
!9319 = !DILocation(line: 1591, column: 8, scope: !9317)
!9320 = distinct !{!9320, !9315, !9321}
!9321 = !DILocation(line: 1592, column: 8, scope: !9312)
!9322 = !DILocation(line: 1594, column: 31, scope: !9128)
!9323 = !DILocation(line: 1594, column: 16, scope: !9128)
!9324 = !DILocation(line: 1595, column: 19, scope: !9128)
!9325 = !DILocation(line: 1596, column: 8, scope: !9128)
!9326 = !DILocation(line: 1598, column: 6, scope: !9128)
!9327 = !DILocation(line: 1611, column: 12, scope: !9189)
!9328 = !DILocation(line: 1611, column: 8, scope: !9189)
!9329 = !DILocation(line: 1611, column: 8, scope: !9119)
!9330 = !DILocation(line: 1612, column: 50, scope: !9189)
!9331 = !DILocation(line: 1612, column: 6, scope: !9189)
!9332 = !DILocation(line: 1616, column: 8, scope: !9135)
!9333 = !DILocation(line: 1616, column: 8, scope: !9119)
!9334 = !DILocation(line: 1621, column: 20, scope: !9134)
!9335 = !DILocation(line: 1621, column: 8, scope: !9134)
!9336 = !DILocation(line: 1624, column: 29, scope: !9140)
!9337 = !DILocation(line: 1624, column: 12, scope: !9140)
!9338 = !DILocation(line: 1625, column: 9, scope: !9139)
!9339 = !DILocation(line: 1625, column: 9, scope: !9140)
!9340 = !DILocation(line: 1627, column: 31, scope: !9138)
!9341 = !DILocation(line: 0, scope: !9138)
!9342 = !DILocation(line: 1628, column: 45, scope: !9138)
!9343 = !DILocation(line: 1629, column: 14, scope: !9138)
!9344 = !DILocation(line: 1631, column: 20, scope: !9138)
!9345 = !DILocation(line: 1628, column: 16, scope: !9138)
!9346 = !DILocation(line: 1636, column: 49, scope: !9138)
!9347 = !DILocation(line: 1636, column: 59, scope: !9138)
!9348 = !DILocation(line: 1636, column: 13, scope: !9138)
!9349 = !DILocation(line: 1635, column: 15, scope: !9138)
!9350 = !DILocation(line: 1636, column: 11, scope: !9138)
!9351 = !DILocation(line: 1638, column: 13, scope: !9194)
!9352 = !DILocation(line: 1639, column: 12, scope: !9194)
!9353 = !DILocation(line: 1639, column: 15, scope: !9194)
!9354 = !DILocation(line: 1639, column: 50, scope: !9194)
!9355 = !DILocation(line: 1640, column: 6, scope: !9194)
!9356 = !DILocation(line: 1640, column: 38, scope: !9194)
!9357 = !DILocation(line: 1640, column: 20, scope: !9194)
!9358 = !DILocation(line: 1641, column: 10, scope: !9194)
!9359 = !DILocation(line: 1641, column: 41, scope: !9194)
!9360 = !DILocation(line: 1641, column: 23, scope: !9194)
!9361 = !DILocation(line: 1638, column: 13, scope: !9138)
!9362 = !DILocation(line: 1643, column: 6, scope: !9193)
!9363 = !DILocation(line: 1647, column: 15, scope: !9193)
!9364 = !DILocation(line: 1649, column: 12, scope: !9193)
!9365 = !DILocation(line: 1650, column: 12, scope: !9193)
!9366 = !DILocation(line: 1651, column: 26, scope: !9193)
!9367 = !DILocation(line: 1647, column: 6, scope: !9193)
!9368 = !DILocation(line: 1652, column: 4, scope: !9193)
!9369 = !DILocation(line: 1653, column: 16, scope: !9138)
!9370 = !DILocation(line: 1654, column: 7, scope: !9138)
!9371 = !DILocation(line: 1658, column: 48, scope: !9140)
!9372 = !DILocation(line: 1658, column: 5, scope: !9140)
!9373 = !DILocation(line: 1660, column: 29, scope: !9140)
!9374 = !DILocation(line: 1660, column: 12, scope: !9140)
!9375 = !DILocation(line: 1661, column: 5, scope: !9140)
!9376 = !DILocation(line: 1664, column: 29, scope: !9140)
!9377 = !DILocation(line: 1664, column: 12, scope: !9140)
!9378 = !DILocation(line: 1665, column: 9, scope: !9379)
!9379 = distinct !DILexicalBlock(scope: !9140, file: !3, line: 1665, column: 9)
!9380 = !DILocation(line: 1665, column: 9, scope: !9140)
!9381 = !DILocation(line: 1666, column: 7, scope: !9379)
!9382 = !DILocation(line: 1670, column: 5, scope: !9140)
!9383 = !DILocation(line: 1671, column: 3, scope: !9140)
!9384 = !DILocation(line: 1675, column: 14, scope: !9143)
!9385 = !DILocation(line: 1676, column: 6, scope: !9143)
!9386 = !DILocation(line: 1676, column: 16, scope: !9143)
!9387 = !DILocation(line: 1676, column: 10, scope: !9143)
!9388 = !DILocation(line: 1677, column: 10, scope: !9143)
!9389 = !DILocation(line: 1677, column: 17, scope: !9143)
!9390 = !DILocation(line: 1677, column: 44, scope: !9143)
!9391 = !DILocation(line: 1678, column: 5, scope: !9143)
!9392 = !DILocation(line: 1678, column: 8, scope: !9143)
!9393 = !DILocation(line: 1679, column: 5, scope: !9143)
!9394 = !DILocation(line: 1679, column: 14, scope: !9143)
!9395 = !DILocation(line: 1679, column: 41, scope: !9143)
!9396 = !DILocation(line: 1675, column: 12, scope: !9134)
!9397 = !DILocation(line: 1681, column: 32, scope: !9142)
!9398 = !DILocation(line: 0, scope: !9142)
!9399 = !DILocation(line: 1689, column: 5, scope: !9142)
!9400 = !DILocation(line: 1691, column: 13, scope: !9196)
!9401 = !DILocation(line: 1691, column: 40, scope: !9196)
!9402 = !DILocation(line: 1691, column: 9, scope: !9142)
!9403 = !DILocation(line: 1692, column: 7, scope: !9196)
!9404 = !DILocation(line: 1698, column: 7, scope: !9196)
!9405 = !DILocation(line: 1702, column: 23, scope: !9196)
!9406 = !DILocation(line: 1703, column: 9, scope: !9196)
!9407 = !DILocation(line: 1704, column: 9, scope: !9408)
!9408 = distinct !DILexicalBlock(scope: !9142, file: !3, line: 1704, column: 9)
!9409 = !DILocation(line: 1704, column: 9, scope: !9142)
!9410 = !DILocation(line: 1707, column: 11, scope: !9411)
!9411 = distinct !DILexicalBlock(scope: !9408, file: !3, line: 1705, column: 7)
!9412 = !DILocation(line: 1706, column: 9, scope: !9411)
!9413 = !DILocation(line: 1708, column: 7, scope: !9411)
!9414 = !DILocation(line: 1711, column: 16, scope: !9134)
!9415 = !DILocation(line: 1712, column: 18, scope: !9416)
!9416 = distinct !DILexicalBlock(scope: !9134, file: !3, line: 1712, column: 12)
!9417 = !DILocation(line: 1712, column: 12, scope: !9134)
!9418 = !DILocation(line: 1713, column: 3, scope: !9416)
!9419 = !DILocation(line: 1713, column: 9, scope: !9416)
!9420 = !DILocation(line: 1713, column: 22, scope: !9416)
!9421 = !DILocation(line: 1714, column: 18, scope: !9422)
!9422 = distinct !DILexicalBlock(scope: !9134, file: !3, line: 1714, column: 12)
!9423 = !DILocation(line: 1714, column: 12, scope: !9134)
!9424 = !DILocation(line: 1715, column: 3, scope: !9422)
!9425 = !DILocation(line: 1715, column: 9, scope: !9422)
!9426 = !DILocation(line: 1715, column: 22, scope: !9422)
!9427 = !DILocation(line: 1577, column: 13, scope: !9121)
!9428 = !DILocation(line: 1718, column: 32, scope: !9119)
!9429 = !DILocation(line: 1718, column: 48, scope: !9119)
!9430 = !DILocation(line: 1719, column: 15, scope: !9119)
!9431 = !DILocation(line: 1719, column: 27, scope: !9119)
!9432 = !DILocation(line: 1718, column: 4, scope: !9119)
!9433 = !DILocation(line: 1721, column: 25, scope: !9146)
!9434 = !DILocation(line: 1721, column: 8, scope: !9146)
!9435 = !DILocation(line: 1721, column: 31, scope: !9146)
!9436 = !DILocation(line: 1721, column: 35, scope: !9146)
!9437 = !DILocation(line: 1721, column: 8, scope: !9119)
!9438 = !DILocation(line: 1723, column: 8, scope: !9145)
!9439 = !DILocation(line: 1726, column: 34, scope: !9145)
!9440 = !DILocation(line: 1726, column: 8, scope: !9145)
!9441 = !DILocation(line: 1727, column: 8, scope: !9442)
!9442 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 1727, column: 8)
!9443 = !DILocation(line: 0, scope: !9442)
!9444 = !DILocation(line: 1727, column: 8, scope: !9445)
!9445 = distinct !DILexicalBlock(scope: !9442, file: !3, line: 1727, column: 8)
!9446 = !DILocation(line: 1728, column: 7, scope: !9447)
!9447 = distinct !DILexicalBlock(scope: !9445, file: !3, line: 1728, column: 7)
!9448 = !DILocation(line: 1728, column: 23, scope: !9447)
!9449 = !DILocation(line: 1728, column: 7, scope: !9445)
!9450 = !DILocation(line: 1729, column: 5, scope: !9447)
!9451 = !DILocation(line: 1729, column: 29, scope: !9447)
!9452 = distinct !{!9452, !9441, !9453}
!9453 = !DILocation(line: 1729, column: 31, scope: !9442)
!9454 = !DILocation(line: 1730, column: 6, scope: !9146)
!9455 = !DILocation(line: 1730, column: 6, scope: !9145)
!9456 = !DILocation(line: 1732, column: 4, scope: !9119)
!9457 = !DILocation(line: 1734, column: 15, scope: !9111)
!9458 = !DILocation(line: 1734, column: 14, scope: !9111)
!9459 = !DILocation(line: 1733, column: 2, scope: !9119)
!9460 = distinct !{!9460, !9238, !9461}
!9461 = !DILocation(line: 1734, column: 35, scope: !9111)
!9462 = !DILocation(line: 1736, column: 18, scope: !9111)
!9463 = !DILocation(line: 1737, column: 5, scope: !9112)
!9464 = !DILocation(line: 1484, column: 51, scope: !9112)
!9465 = !DILocation(line: 1484, column: 3, scope: !9112)
!9466 = distinct !{!9466, !9202, !9467}
!9467 = !DILocation(line: 1737, column: 5, scope: !9113)
!9468 = !DILocation(line: 1740, column: 1, scope: !9096)
!9469 = !DILocation(line: 1739, column: 3, scope: !9096)
!9470 = distinct !DISubprogram(name: "copy_edges_for_bb", scope: !3, file: !3, line: 1815, type: !9471, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9473)
!9471 = !DISubroutineType(types: !9472)
!9472 = !{null, !1584, !1238, !1584}
!9473 = !{!9474, !9475, !9476, !9477, !9478, !9485, !9486, !9487, !9488, !9493, !9497, !9498, !9499}
!9474 = !DILocalVariable(name: "bb", arg: 1, scope: !9470, file: !3, line: 1815, type: !1584)
!9475 = !DILocalVariable(name: "count_scale", arg: 2, scope: !9470, file: !3, line: 1815, type: !1238)
!9476 = !DILocalVariable(name: "ret_bb", arg: 3, scope: !9470, file: !3, line: 1815, type: !1584)
!9477 = !DILocalVariable(name: "new_bb", scope: !9470, file: !3, line: 1817, type: !1584)
!9478 = !DILocalVariable(name: "ei", scope: !9470, file: !3, line: 1818, type: !9479)
!9479 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !337, line: 682, baseType: !9480)
!9480 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !337, line: 679, size: 128, elements: !9481)
!9481 = !{!9482, !9483}
!9482 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !9480, file: !337, line: 680, baseType: !7, size: 32)
!9483 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !9480, file: !337, line: 681, baseType: !9484, size: 64, offset: 64)
!9484 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !996, size: 64)
!9485 = !DILocalVariable(name: "old_edge", scope: !9470, file: !3, line: 1819, type: !1008)
!9486 = !DILocalVariable(name: "si", scope: !9470, file: !3, line: 1820, type: !2373)
!9487 = !DILocalVariable(name: "flags", scope: !9470, file: !3, line: 1821, type: !696)
!9488 = !DILocalVariable(name: "new_edge", scope: !9489, file: !3, line: 1828, type: !1008)
!9489 = distinct !DILexicalBlock(scope: !9490, file: !3, line: 1827, column: 7)
!9490 = distinct !DILexicalBlock(scope: !9491, file: !3, line: 1826, column: 9)
!9491 = distinct !DILexicalBlock(scope: !9492, file: !3, line: 1825, column: 3)
!9492 = distinct !DILexicalBlock(scope: !9470, file: !3, line: 1825, column: 3)
!9493 = !DILocalVariable(name: "copy_stmt", scope: !9494, file: !3, line: 1846, type: !1028)
!9494 = distinct !DILexicalBlock(scope: !9495, file: !3, line: 1845, column: 5)
!9495 = distinct !DILexicalBlock(scope: !9496, file: !3, line: 1844, column: 3)
!9496 = distinct !DILexicalBlock(scope: !9470, file: !3, line: 1844, column: 3)
!9497 = !DILocalVariable(name: "can_throw", scope: !9494, file: !3, line: 1847, type: !695)
!9498 = !DILocalVariable(name: "nonlocal_goto", scope: !9494, file: !3, line: 1847, type: !695)
!9499 = !DILocalVariable(name: "e", scope: !9500, file: !3, line: 1880, type: !1008)
!9500 = distinct !DILexicalBlock(scope: !9501, file: !3, line: 1879, column: 6)
!9501 = distinct !DILexicalBlock(scope: !9502, file: !3, line: 1876, column: 8)
!9502 = distinct !DILexicalBlock(scope: !9503, file: !3, line: 1875, column: 2)
!9503 = distinct !DILexicalBlock(scope: !9494, file: !3, line: 1874, column: 11)
!9504 = !DILocation(line: 0, scope: !9470)
!9505 = !DILocation(line: 1817, column: 42, scope: !9470)
!9506 = !DILocation(line: 1818, column: 3, scope: !9470)
!9507 = !DILocation(line: 1819, column: 3, scope: !9470)
!9508 = !DILocation(line: 1820, column: 3, scope: !9470)
!9509 = !DILocation(line: 1825, column: 3, scope: !9492)
!9510 = !DILocation(line: 0, scope: !9491)
!9511 = !DILocation(line: 1825, column: 3, scope: !9491)
!9512 = !DILocation(line: 1826, column: 11, scope: !9490)
!9513 = !DILocation(line: 1826, column: 21, scope: !9490)
!9514 = !DILocation(line: 1826, column: 27, scope: !9490)
!9515 = !DILocation(line: 1826, column: 9, scope: !9491)
!9516 = !DILocation(line: 1833, column: 16, scope: !9517)
!9517 = distinct !DILexicalBlock(scope: !9489, file: !3, line: 1833, column: 6)
!9518 = !DILocation(line: 1833, column: 22, scope: !9517)
!9519 = !DILocation(line: 1833, column: 28, scope: !9517)
!9520 = !DILocation(line: 1833, column: 42, scope: !9517)
!9521 = !DILocation(line: 1833, column: 46, scope: !9517)
!9522 = !DILocation(line: 1834, column: 6, scope: !9517)
!9523 = !DILocation(line: 1834, column: 25, scope: !9517)
!9524 = !DILocation(line: 1834, column: 32, scope: !9517)
!9525 = !DILocation(line: 1834, column: 29, scope: !9517)
!9526 = !DILocation(line: 1833, column: 6, scope: !9489)
!9527 = !DILocation(line: 0, scope: !9489)
!9528 = !DILocation(line: 1836, column: 62, scope: !9489)
!9529 = !DILocation(line: 1836, column: 13, scope: !9489)
!9530 = !DILocation(line: 1837, column: 20, scope: !9489)
!9531 = !DILocation(line: 1837, column: 30, scope: !9489)
!9532 = !DILocation(line: 1837, column: 36, scope: !9489)
!9533 = !DILocation(line: 1837, column: 50, scope: !9489)
!9534 = !DILocation(line: 1837, column: 12, scope: !9489)
!9535 = !DILocation(line: 1837, column: 18, scope: !9489)
!9536 = !DILocation(line: 1838, column: 36, scope: !9489)
!9537 = !DILocation(line: 1838, column: 12, scope: !9489)
!9538 = !DILocation(line: 1838, column: 24, scope: !9489)
!9539 = !DILocation(line: 1839, column: 7, scope: !9489)
!9540 = distinct !{!9540, !9509, !9541}
!9541 = !DILocation(line: 1839, column: 7, scope: !9492)
!9542 = !DILocation(line: 1841, column: 11, scope: !9543)
!9543 = distinct !DILexicalBlock(scope: !9470, file: !3, line: 1841, column: 7)
!9544 = !DILocation(line: 1841, column: 17, scope: !9543)
!9545 = !DILocation(line: 1841, column: 32, scope: !9543)
!9546 = !DILocation(line: 1841, column: 45, scope: !9543)
!9547 = !DILocation(line: 1841, column: 7, scope: !9470)
!9548 = !DILocation(line: 1844, column: 13, scope: !9496)
!9549 = !DILocation(line: 0, scope: !9500)
!9550 = !DILocation(line: 1844, column: 8, scope: !9496)
!9551 = !DILocation(line: 1817, column: 15, scope: !9470)
!9552 = !DILocation(line: 1844, column: 37, scope: !9495)
!9553 = !DILocation(line: 1844, column: 36, scope: !9495)
!9554 = !DILocation(line: 1844, column: 3, scope: !9496)
!9555 = !DILocation(line: 1849, column: 19, scope: !9494)
!9556 = !DILocation(line: 0, scope: !9494)
!9557 = !DILocation(line: 1850, column: 12, scope: !9558)
!9558 = distinct !DILexicalBlock(scope: !9494, file: !3, line: 1850, column: 11)
!9559 = !DILocation(line: 1850, column: 11, scope: !9494)
!9560 = !DILocation(line: 1852, column: 4, scope: !9561)
!9561 = distinct !DILexicalBlock(scope: !9558, file: !3, line: 1851, column: 2)
!9562 = !DILocation(line: 1853, column: 25, scope: !9563)
!9563 = distinct !DILexicalBlock(scope: !9561, file: !3, line: 1853, column: 8)
!9564 = !DILocation(line: 1853, column: 8, scope: !9563)
!9565 = !DILocation(line: 1853, column: 8, scope: !9561)
!9566 = !DILocation(line: 1854, column: 6, scope: !9563)
!9567 = !DILocation(line: 1858, column: 7, scope: !9494)
!9568 = !DILocation(line: 1871, column: 19, scope: !9494)
!9569 = !DILocation(line: 1872, column: 23, scope: !9494)
!9570 = !DILocation(line: 1874, column: 21, scope: !9503)
!9571 = !DILocation(line: 1876, column: 9, scope: !9501)
!9572 = !DILocation(line: 1876, column: 8, scope: !9502)
!9573 = !DILocation(line: 1880, column: 38, scope: !9500)
!9574 = !DILocation(line: 1880, column: 17, scope: !9500)
!9575 = !DILocation(line: 1882, column: 20, scope: !9500)
!9576 = !DILocation(line: 1883, column: 25, scope: !9500)
!9577 = !DILocation(line: 1883, column: 30, scope: !9500)
!9578 = !DILocation(line: 1883, column: 16, scope: !9500)
!9579 = !DILocation(line: 1883, column: 20, scope: !9500)
!9580 = !DILocation(line: 1884, column: 13, scope: !9500)
!9581 = !DILocation(line: 1885, column: 6, scope: !9500)
!9582 = !DILocation(line: 1888, column: 11, scope: !9583)
!9583 = distinct !DILexicalBlock(scope: !9494, file: !3, line: 1888, column: 11)
!9584 = !DILocation(line: 1888, column: 35, scope: !9583)
!9585 = !DILocation(line: 1888, column: 11, scope: !9494)
!9586 = !DILocation(line: 1889, column: 2, scope: !9583)
!9587 = !DILocation(line: 1890, column: 16, scope: !9588)
!9588 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 1890, column: 16)
!9589 = !DILocation(line: 1890, column: 16, scope: !9583)
!9590 = !DILocation(line: 1891, column: 2, scope: !9588)
!9591 = !DILocation(line: 1893, column: 11, scope: !9592)
!9592 = distinct !DILexicalBlock(scope: !9494, file: !3, line: 1893, column: 11)
!9593 = !DILocation(line: 1893, column: 11, scope: !9494)
!9594 = !DILocation(line: 1894, column: 28, scope: !9592)
!9595 = !DILocation(line: 1894, column: 2, scope: !9592)
!9596 = !DILocation(line: 1896, column: 22, scope: !9597)
!9597 = distinct !DILexicalBlock(scope: !9494, file: !3, line: 1896, column: 11)
!9598 = !DILocation(line: 1897, column: 24, scope: !9597)
!9599 = !DILocation(line: 1897, column: 7, scope: !9597)
!9600 = !DILocation(line: 1896, column: 11, scope: !9494)
!9601 = !DILocation(line: 1898, column: 36, scope: !9597)
!9602 = !DILocation(line: 1898, column: 2, scope: !9597)
!9603 = !DILocation(line: 1844, column: 3, scope: !9495)
!9604 = distinct !{!9604, !9554, !9605}
!9605 = !DILocation(line: 1900, column: 5, scope: !9496)
!9606 = !DILocation(line: 1901, column: 1, scope: !9470)
!9607 = distinct !DISubprogram(name: "copy_phis_for_bb", scope: !3, file: !3, line: 1909, type: !9608, scopeLine: 1910, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9610)
!9608 = !DISubroutineType(types: !9609)
!9609 = !{null, !1584, !2095}
!9610 = !{!9611, !9612, !9613, !9615, !9616, !9617, !9618, !9622, !9623, !9624, !9625, !9632, !9633, !9634, !9635}
!9611 = !DILocalVariable(name: "bb", arg: 1, scope: !9607, file: !3, line: 1909, type: !1584)
!9612 = !DILocalVariable(name: "id", arg: 2, scope: !9607, file: !3, line: 1909, type: !2095)
!9613 = !DILocalVariable(name: "new_bb", scope: !9607, file: !3, line: 1911, type: !9614)
!9614 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1584)
!9615 = !DILocalVariable(name: "ei", scope: !9607, file: !3, line: 1912, type: !9479)
!9616 = !DILocalVariable(name: "phi", scope: !9607, file: !3, line: 1913, type: !1028)
!9617 = !DILocalVariable(name: "si", scope: !9607, file: !3, line: 1914, type: !2373)
!9618 = !DILocalVariable(name: "res", scope: !9619, file: !3, line: 1918, type: !704)
!9619 = distinct !DILexicalBlock(scope: !9620, file: !3, line: 1917, column: 5)
!9620 = distinct !DILexicalBlock(scope: !9621, file: !3, line: 1916, column: 3)
!9621 = distinct !DILexicalBlock(scope: !9607, file: !3, line: 1916, column: 3)
!9622 = !DILocalVariable(name: "new_res", scope: !9619, file: !3, line: 1918, type: !704)
!9623 = !DILocalVariable(name: "new_phi", scope: !9619, file: !3, line: 1919, type: !1028)
!9624 = !DILocalVariable(name: "new_edge", scope: !9619, file: !3, line: 1920, type: !1008)
!9625 = !DILocalVariable(name: "old_edge", scope: !9626, file: !3, line: 1932, type: !9631)
!9626 = distinct !DILexicalBlock(scope: !9627, file: !3, line: 1931, column: 6)
!9627 = distinct !DILexicalBlock(scope: !9628, file: !3, line: 1930, column: 4)
!9628 = distinct !DILexicalBlock(scope: !9629, file: !3, line: 1930, column: 4)
!9629 = distinct !DILexicalBlock(scope: !9630, file: !3, line: 1926, column: 2)
!9630 = distinct !DILexicalBlock(scope: !9619, file: !3, line: 1925, column: 11)
!9631 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1008)
!9632 = !DILocalVariable(name: "arg", scope: !9626, file: !3, line: 1934, type: !704)
!9633 = !DILocalVariable(name: "new_arg", scope: !9626, file: !3, line: 1935, type: !704)
!9634 = !DILocalVariable(name: "block", scope: !9626, file: !3, line: 1936, type: !704)
!9635 = !DILocalVariable(name: "stmts", scope: !9636, file: !3, line: 1947, type: !1018)
!9636 = distinct !DILexicalBlock(scope: !9637, file: !3, line: 1946, column: 3)
!9637 = distinct !DILexicalBlock(scope: !9626, file: !3, line: 1943, column: 12)
!9638 = !DILocation(line: 0, scope: !9607)
!9639 = !DILocation(line: 1911, column: 48, scope: !9607)
!9640 = !DILocation(line: 1912, column: 3, scope: !9607)
!9641 = !DILocation(line: 1914, column: 3, scope: !9607)
!9642 = !DILocation(line: 1916, column: 13, scope: !9621)
!9643 = !DILocation(line: 1916, column: 24, scope: !9621)
!9644 = !DILocation(line: 0, scope: !9619)
!9645 = !DILocation(line: 0, scope: !9629)
!9646 = !DILocation(line: 0, scope: !9628)
!9647 = !DILocation(line: 0, scope: !9627)
!9648 = !DILocation(line: 0, scope: !9626)
!9649 = !DILocation(line: 0, scope: !9637)
!9650 = !DILocation(line: 0, scope: !9636)
!9651 = !DILocation(line: 1916, column: 8, scope: !9621)
!9652 = !DILocation(line: 1916, column: 42, scope: !9620)
!9653 = !DILocation(line: 1916, column: 41, scope: !9620)
!9654 = !DILocation(line: 1916, column: 3, scope: !9621)
!9655 = !DILocation(line: 1918, column: 7, scope: !9619)
!9656 = !DILocation(line: 1920, column: 7, scope: !9619)
!9657 = !DILocation(line: 1922, column: 13, scope: !9619)
!9658 = !DILocation(line: 1923, column: 13, scope: !9619)
!9659 = !DILocation(line: 1924, column: 15, scope: !9619)
!9660 = !DILocation(line: 1925, column: 11, scope: !9630)
!9661 = !DILocation(line: 1925, column: 11, scope: !9619)
!9662 = !DILocation(line: 1927, column: 4, scope: !9629)
!9663 = !DILocation(line: 1929, column: 35, scope: !9629)
!9664 = !DILocation(line: 1929, column: 18, scope: !9629)
!9665 = !DILocation(line: 1928, column: 4, scope: !9629)
!9666 = !DILocation(line: 1929, column: 6, scope: !9629)
!9667 = !DILocation(line: 1930, column: 4, scope: !9628)
!9668 = !DILocation(line: 1930, column: 4, scope: !9627)
!9669 = !DILocation(line: 1933, column: 30, scope: !9626)
!9670 = !DILocation(line: 1933, column: 40, scope: !9626)
!9671 = !DILocation(line: 1933, column: 45, scope: !9626)
!9672 = !DILocation(line: 1933, column: 5, scope: !9626)
!9673 = !DILocation(line: 1934, column: 19, scope: !9626)
!9674 = !DILocation(line: 1935, column: 8, scope: !9626)
!9675 = !DILocation(line: 1935, column: 13, scope: !9626)
!9676 = !DILocation(line: 1936, column: 25, scope: !9626)
!9677 = !DILocation(line: 1937, column: 18, scope: !9626)
!9678 = !DILocation(line: 1938, column: 8, scope: !9626)
!9679 = !DILocation(line: 1939, column: 18, scope: !9626)
!9680 = !DILocation(line: 1940, column: 8, scope: !9626)
!9681 = !DILocation(line: 1943, column: 12, scope: !9637)
!9682 = !DILocation(line: 1943, column: 32, scope: !9637)
!9683 = !DILocation(line: 1944, column: 5, scope: !9637)
!9684 = !DILocation(line: 1944, column: 8, scope: !9637)
!9685 = !DILocation(line: 1944, column: 28, scope: !9637)
!9686 = !DILocation(line: 1945, column: 5, scope: !9637)
!9687 = !DILocation(line: 1945, column: 9, scope: !9637)
!9688 = !DILocation(line: 1943, column: 12, scope: !9626)
!9689 = !DILocation(line: 1947, column: 5, scope: !9636)
!9690 = !DILocation(line: 1947, column: 16, scope: !9636)
!9691 = !DILocation(line: 1948, column: 37, scope: !9636)
!9692 = !DILocation(line: 1948, column: 15, scope: !9636)
!9693 = !DILocation(line: 1948, column: 13, scope: !9636)
!9694 = !DILocation(line: 1949, column: 39, scope: !9636)
!9695 = !DILocation(line: 1949, column: 49, scope: !9636)
!9696 = !DILocation(line: 1949, column: 5, scope: !9636)
!9697 = !DILocation(line: 1950, column: 3, scope: !9637)
!9698 = !DILocation(line: 1950, column: 3, scope: !9636)
!9699 = !DILocation(line: 1951, column: 30, scope: !9626)
!9700 = !DILocation(line: 1951, column: 39, scope: !9626)
!9701 = !DILocation(line: 1952, column: 7, scope: !9626)
!9702 = !DILocation(line: 1951, column: 8, scope: !9626)
!9703 = !DILocation(line: 1953, column: 6, scope: !9627)
!9704 = distinct !{!9704, !9667, !9705}
!9705 = !DILocation(line: 1953, column: 6, scope: !9628)
!9706 = !DILocation(line: 1955, column: 5, scope: !9620)
!9707 = !DILocation(line: 1916, column: 58, scope: !9620)
!9708 = !DILocation(line: 1916, column: 3, scope: !9620)
!9709 = distinct !{!9709, !9654, !9710}
!9710 = !DILocation(line: 1955, column: 5, scope: !9621)
!9711 = !DILocation(line: 1956, column: 1, scope: !9607)
!9712 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !597, file: !597, line: 1747, type: !7731, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9713)
!9713 = !{!9714, !9715}
!9714 = !DILocalVariable(name: "gs", arg: 1, scope: !9712, file: !597, line: 1747, type: !1028)
!9715 = !DILocalVariable(name: "rhs", arg: 2, scope: !9712, file: !597, line: 1747, type: !704)
!9716 = !DILocation(line: 0, scope: !9712)
!9717 = !DILocation(line: 1751, column: 3, scope: !9712)
!9718 = !DILocation(line: 1752, column: 1, scope: !9712)
!9719 = distinct !DISubprogram(name: "gimple_call_va_arg_pack_p", scope: !597, file: !597, line: 2168, type: !7363, scopeLine: 2169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9720)
!9720 = !{!9721}
!9721 = !DILocalVariable(name: "s", arg: 1, scope: !9719, file: !597, line: 2168, type: !1028)
!9722 = !DILocation(line: 0, scope: !9719)
!9723 = !DILocation(line: 2171, column: 21, scope: !9719)
!9724 = !DILocation(line: 2171, column: 10, scope: !9719)
!9725 = !DILocation(line: 2171, column: 3, scope: !9719)
!9726 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !135, file: !135, line: 184, type: !9727, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9729)
!9727 = !DISubroutineType(types: !9728)
!9728 = !{!2386, !696}
!9729 = !{!9730}
!9730 = !DILocalVariable(name: "alloc_", arg: 1, scope: !9726, file: !135, line: 184, type: !696)
!9731 = !DILocation(line: 0, scope: !9726)
!9732 = !DILocation(line: 184, column: 1, scope: !9726)
!9733 = distinct !DISubprogram(name: "VEC_tree_heap_safe_grow", scope: !135, file: !135, line: 184, type: !9734, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9737)
!9734 = !DISubroutineType(types: !9735)
!9735 = !{null, !9736, !696}
!9736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2386, size: 64)
!9737 = !{!9738, !9739}
!9738 = !DILocalVariable(name: "vec_", arg: 1, scope: !9733, file: !135, line: 184, type: !9736)
!9739 = !DILocalVariable(name: "size_", arg: 2, scope: !9733, file: !135, line: 184, type: !696)
!9740 = !DILocation(line: 0, scope: !9733)
!9741 = !DILocation(line: 184, column: 1, scope: !9733)
!9742 = distinct !DISubprogram(name: "VEC_tree_base_address", scope: !135, file: !135, line: 182, type: !9743, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9745)
!9743 = !DISubroutineType(types: !9744)
!9744 = !{!703, !7296}
!9745 = !{!9746}
!9746 = !DILocalVariable(name: "vec_", arg: 1, scope: !9742, file: !135, line: 182, type: !7296)
!9747 = !DILocation(line: 0, scope: !9742)
!9748 = !DILocation(line: 182, column: 1, scope: !9742)
!9749 = distinct !DISubprogram(name: "gimple_call_arg_ptr", scope: !597, file: !597, line: 2036, type: !7741, scopeLine: 2037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9750)
!9750 = !{!9751, !9752}
!9751 = !DILocalVariable(name: "gs", arg: 1, scope: !9749, file: !597, line: 2036, type: !4433)
!9752 = !DILocalVariable(name: "index", arg: 2, scope: !9749, file: !597, line: 2036, type: !7)
!9753 = !DILocation(line: 0, scope: !9749)
!9754 = !DILocation(line: 2039, column: 10, scope: !9749)
!9755 = !DILocation(line: 2039, column: 3, scope: !9749)
!9756 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !9757, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9759)
!9757 = !DISubroutineType(types: !9758)
!9758 = !{null, !9736}
!9759 = !{!9760}
!9760 = !DILocalVariable(name: "vec_", arg: 1, scope: !9756, file: !135, line: 184, type: !9736)
!9761 = !DILocation(line: 0, scope: !9756)
!9762 = !DILocation(line: 184, column: 1, scope: !9763)
!9763 = distinct !DILexicalBlock(scope: !9756, file: !135, line: 184, column: 1)
!9764 = !DILocation(line: 184, column: 1, scope: !9756)
!9765 = distinct !DISubprogram(name: "gimple_call_copy_flags", scope: !597, file: !597, line: 2198, type: !9766, scopeLine: 2199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9768)
!9766 = !DISubroutineType(types: !9767)
!9767 = !{null, !1028, !1028}
!9768 = !{!9769, !9770}
!9769 = !DILocalVariable(name: "dest_call", arg: 1, scope: !9765, file: !597, line: 2198, type: !1028)
!9770 = !DILocalVariable(name: "orig_call", arg: 2, scope: !9765, file: !597, line: 2198, type: !1028)
!9771 = !DILocation(line: 0, scope: !9765)
!9772 = !DILocation(line: 2202, column: 49, scope: !9765)
!9773 = !DILocation(line: 2202, column: 29, scope: !9765)
!9774 = !DILocation(line: 2202, column: 21, scope: !9765)
!9775 = !DILocation(line: 2203, column: 1, scope: !9765)
!9776 = distinct !DISubprogram(name: "gimple_call_set_va_arg_pack", scope: !597, file: !597, line: 2154, type: !7045, scopeLine: 2155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9777)
!9777 = !{!9778, !9779}
!9778 = !DILocalVariable(name: "s", arg: 1, scope: !9776, file: !597, line: 2154, type: !1028)
!9779 = !DILocalVariable(name: "pass_arg_pack_p", arg: 2, scope: !9776, file: !597, line: 2154, type: !695)
!9780 = !DILocation(line: 0, scope: !9776)
!9781 = !DILocation(line: 0, scope: !9782)
!9782 = distinct !DILexicalBlock(scope: !9776, file: !597, line: 2157, column: 7)
!9783 = !DILocation(line: 2160, column: 23, scope: !9782)
!9784 = !DILocation(line: 2161, column: 1, scope: !9776)
!9785 = distinct !DISubprogram(name: "gimple_set_location", scope: !597, file: !597, line: 1156, type: !9786, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9788)
!9786 = !DISubroutineType(types: !9787)
!9787 = !{null, !1028, !829}
!9788 = !{!9789, !9790}
!9789 = !DILocalVariable(name: "g", arg: 1, scope: !9785, file: !597, line: 1156, type: !1028)
!9790 = !DILocalVariable(name: "location", arg: 2, scope: !9785, file: !597, line: 1156, type: !829)
!9791 = !DILocation(line: 0, scope: !9785)
!9792 = !DILocation(line: 1158, column: 13, scope: !9785)
!9793 = !DILocation(line: 1158, column: 22, scope: !9785)
!9794 = !DILocation(line: 1159, column: 1, scope: !9785)
!9795 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !597, file: !597, line: 1898, type: !7731, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9796)
!9796 = !{!9797, !9798}
!9797 = !DILocalVariable(name: "gs", arg: 1, scope: !9795, file: !597, line: 1898, type: !1028)
!9798 = !DILocalVariable(name: "lhs", arg: 2, scope: !9795, file: !597, line: 1898, type: !704)
!9799 = !DILocation(line: 0, scope: !9795)
!9800 = !DILocation(line: 1901, column: 3, scope: !9795)
!9801 = !DILocation(line: 1902, column: 7, scope: !9802)
!9802 = distinct !DILexicalBlock(scope: !9795, file: !597, line: 1902, column: 7)
!9803 = !DILocation(line: 1902, column: 11, scope: !9802)
!9804 = !DILocation(line: 1902, column: 14, scope: !9802)
!9805 = !DILocation(line: 1902, column: 30, scope: !9802)
!9806 = !DILocation(line: 1902, column: 7, scope: !9795)
!9807 = !DILocation(line: 1903, column: 5, scope: !9802)
!9808 = !DILocation(line: 1903, column: 29, scope: !9802)
!9809 = !DILocation(line: 1904, column: 1, scope: !9795)
!9810 = distinct !DISubprogram(name: "gimple_uid", scope: !597, file: !597, line: 1265, type: !4532, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9811)
!9811 = !{!9812}
!9812 = !DILocalVariable(name: "g", arg: 1, scope: !9810, file: !597, line: 1265, type: !4433)
!9813 = !DILocation(line: 0, scope: !9810)
!9814 = !DILocation(line: 1267, column: 20, scope: !9810)
!9815 = !DILocation(line: 1267, column: 3, scope: !9810)
!9816 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !3300, file: !3300, line: 792, type: !9817, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9820)
!9817 = !DISubroutineType(types: !9818)
!9818 = !{!704, !9819, !1028, !696}
!9819 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9147, size: 64)
!9820 = !{!9821, !9822, !9823}
!9821 = !DILocalVariable(name: "ptr", arg: 1, scope: !9816, file: !3300, line: 792, type: !9819)
!9822 = !DILocalVariable(name: "stmt", arg: 2, scope: !9816, file: !3300, line: 792, type: !1028)
!9823 = !DILocalVariable(name: "flags", arg: 3, scope: !9816, file: !3300, line: 792, type: !696)
!9824 = !DILocation(line: 0, scope: !9816)
!9825 = !DILocation(line: 794, column: 3, scope: !9816)
!9826 = !DILocation(line: 795, column: 8, scope: !9816)
!9827 = !DILocation(line: 795, column: 18, scope: !9816)
!9828 = !DILocation(line: 796, column: 10, scope: !9816)
!9829 = !DILocation(line: 796, column: 3, scope: !9816)
!9830 = distinct !DISubprogram(name: "op_iter_done", scope: !3300, file: !3300, line: 652, type: !9831, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9835)
!9831 = !DISubroutineType(types: !9832)
!9832 = !{!695, !9833}
!9833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9834, size: 64)
!9834 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9147)
!9835 = !{!9836}
!9836 = !DILocalVariable(name: "ptr", arg: 1, scope: !9830, file: !3300, line: 652, type: !9833)
!9837 = !DILocation(line: 0, scope: !9830)
!9838 = !DILocation(line: 654, column: 15, scope: !9830)
!9839 = !DILocation(line: 654, column: 3, scope: !9830)
!9840 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !3300, file: !3300, line: 699, type: !9841, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9843)
!9841 = !DISubroutineType(types: !9842)
!9842 = !{!704, !9819}
!9843 = !{!9844, !9845}
!9844 = !DILocalVariable(name: "ptr", arg: 1, scope: !9840, file: !3300, line: 699, type: !9819)
!9845 = !DILocalVariable(name: "val", scope: !9840, file: !3300, line: 701, type: !704)
!9846 = !DILocation(line: 0, scope: !9840)
!9847 = !DILocation(line: 705, column: 12, scope: !9848)
!9848 = distinct !DILexicalBlock(scope: !9840, file: !3300, line: 705, column: 7)
!9849 = !DILocation(line: 705, column: 7, scope: !9848)
!9850 = !DILocation(line: 705, column: 7, scope: !9840)
!9851 = !DILocation(line: 707, column: 13, scope: !9852)
!9852 = distinct !DILexicalBlock(scope: !9848, file: !3300, line: 706, column: 5)
!9853 = !DILocation(line: 708, column: 24, scope: !9852)
!9854 = !DILocation(line: 708, column: 30, scope: !9852)
!9855 = !DILocation(line: 708, column: 17, scope: !9852)
!9856 = !DILocation(line: 709, column: 7, scope: !9852)
!9857 = !DILocation(line: 711, column: 12, scope: !9858)
!9858 = distinct !DILexicalBlock(scope: !9840, file: !3300, line: 711, column: 7)
!9859 = !DILocation(line: 711, column: 7, scope: !9858)
!9860 = !DILocation(line: 711, column: 7, scope: !9840)
!9861 = !DILocation(line: 713, column: 13, scope: !9862)
!9862 = distinct !DILexicalBlock(scope: !9858, file: !3300, line: 712, column: 5)
!9863 = !DILocation(line: 714, column: 24, scope: !9862)
!9864 = !DILocation(line: 714, column: 30, scope: !9862)
!9865 = !DILocation(line: 714, column: 17, scope: !9862)
!9866 = !DILocation(line: 715, column: 7, scope: !9862)
!9867 = !DILocation(line: 718, column: 8, scope: !9840)
!9868 = !DILocation(line: 718, column: 13, scope: !9840)
!9869 = !DILocation(line: 719, column: 3, scope: !9840)
!9870 = !DILocation(line: 721, column: 1, scope: !9840)
!9871 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !135, file: !135, line: 182, type: !9872, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9876)
!9872 = !DISubroutineType(types: !9873)
!9873 = !{!7, !9874}
!9874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9875, size: 64)
!9875 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1554)
!9876 = !{!9877}
!9877 = !DILocalVariable(name: "vec_", arg: 1, scope: !9871, file: !135, line: 182, type: !9874)
!9878 = !DILocation(line: 0, scope: !9871)
!9879 = !DILocation(line: 182, column: 1, scope: !9871)
!9880 = distinct !DISubprogram(name: "VEC_tree_heap_reserve_exact", scope: !135, file: !135, line: 184, type: !9881, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9883)
!9881 = !DISubroutineType(types: !9882)
!9882 = !{!696, !9736, !696}
!9883 = !{!9884, !9885, !9886}
!9884 = !DILocalVariable(name: "vec_", arg: 1, scope: !9880, file: !135, line: 184, type: !9736)
!9885 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9880, file: !135, line: 184, type: !696)
!9886 = !DILocalVariable(name: "extend", scope: !9880, file: !135, line: 184, type: !696)
!9887 = !DILocation(line: 0, scope: !9880)
!9888 = !DILocation(line: 184, column: 1, scope: !9880)
!9889 = !DILocation(line: 184, column: 1, scope: !9890)
!9890 = distinct !DILexicalBlock(scope: !9880, file: !135, line: 184, column: 1)
!9891 = distinct !DISubprogram(name: "op_iter_init", scope: !3300, file: !3300, line: 742, type: !9892, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9894)
!9892 = !DISubroutineType(types: !9893)
!9893 = !{null, !9819, !1028, !696}
!9894 = !{!9895, !9896, !9897}
!9895 = !DILocalVariable(name: "ptr", arg: 1, scope: !9891, file: !3300, line: 742, type: !9819)
!9896 = !DILocalVariable(name: "stmt", arg: 2, scope: !9891, file: !3300, line: 742, type: !1028)
!9897 = !DILocalVariable(name: "flags", arg: 3, scope: !9891, file: !3300, line: 742, type: !696)
!9898 = !DILocation(line: 0, scope: !9891)
!9899 = !DILocation(line: 748, column: 15, scope: !9891)
!9900 = !DILocation(line: 748, column: 52, scope: !9891)
!9901 = !DILocation(line: 748, column: 8, scope: !9891)
!9902 = !DILocation(line: 748, column: 13, scope: !9891)
!9903 = !DILocation(line: 750, column: 7, scope: !9904)
!9904 = distinct !DILexicalBlock(scope: !9891, file: !3300, line: 749, column: 7)
!9905 = !DILocation(line: 750, column: 10, scope: !9904)
!9906 = !DILocation(line: 751, column: 7, scope: !9904)
!9907 = !DILocation(line: 751, column: 10, scope: !9904)
!9908 = !DILocation(line: 751, column: 29, scope: !9904)
!9909 = !DILocation(line: 749, column: 7, scope: !9891)
!9910 = !DILocation(line: 752, column: 22, scope: !9904)
!9911 = !DILocation(line: 752, column: 28, scope: !9904)
!9912 = !DILocation(line: 752, column: 15, scope: !9904)
!9913 = !DILocation(line: 752, column: 5, scope: !9904)
!9914 = !DILocation(line: 753, column: 8, scope: !9891)
!9915 = !DILocation(line: 753, column: 13, scope: !9891)
!9916 = !DILocation(line: 755, column: 7, scope: !9917)
!9917 = distinct !DILexicalBlock(scope: !9891, file: !3300, line: 754, column: 7)
!9918 = !DILocation(line: 756, column: 7, scope: !9917)
!9919 = !DILocation(line: 754, column: 7, scope: !9891)
!9920 = !DILocation(line: 757, column: 5, scope: !9917)
!9921 = !DILocation(line: 758, column: 8, scope: !9891)
!9922 = !DILocation(line: 758, column: 13, scope: !9891)
!9923 = !DILocation(line: 760, column: 8, scope: !9891)
!9924 = !DILocation(line: 760, column: 14, scope: !9891)
!9925 = !DILocation(line: 761, column: 8, scope: !9891)
!9926 = !DILocation(line: 761, column: 16, scope: !9891)
!9927 = !DILocation(line: 762, column: 8, scope: !9891)
!9928 = !DILocation(line: 762, column: 17, scope: !9891)
!9929 = !DILocation(line: 763, column: 1, scope: !9891)
!9930 = distinct !DISubprogram(name: "gimple_def_ops", scope: !597, file: !597, line: 1292, type: !9931, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9933)
!9931 = !DISubroutineType(types: !9932)
!9932 = !{!1057, !4433}
!9933 = !{!9934}
!9934 = !DILocalVariable(name: "g", arg: 1, scope: !9930, file: !597, line: 1292, type: !4433)
!9935 = !DILocation(line: 0, scope: !9930)
!9936 = !DILocation(line: 1294, column: 8, scope: !9937)
!9937 = distinct !DILexicalBlock(scope: !9930, file: !597, line: 1294, column: 7)
!9938 = !DILocation(line: 1294, column: 7, scope: !9930)
!9939 = !DILocation(line: 1296, column: 26, scope: !9930)
!9940 = !DILocation(line: 1296, column: 3, scope: !9930)
!9941 = !DILocation(line: 1297, column: 1, scope: !9930)
!9942 = distinct !DISubprogram(name: "gimple_vdef", scope: !597, file: !597, line: 1375, type: !4440, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9943)
!9943 = !{!9944}
!9944 = !DILocalVariable(name: "g", arg: 1, scope: !9942, file: !597, line: 1375, type: !4433)
!9945 = !DILocation(line: 0, scope: !9942)
!9946 = !DILocation(line: 1377, column: 8, scope: !9947)
!9947 = distinct !DILexicalBlock(scope: !9942, file: !597, line: 1377, column: 7)
!9948 = !DILocation(line: 1377, column: 7, scope: !9942)
!9949 = !DILocation(line: 1379, column: 23, scope: !9942)
!9950 = !DILocation(line: 1379, column: 3, scope: !9942)
!9951 = !DILocation(line: 1380, column: 1, scope: !9942)
!9952 = distinct !DISubprogram(name: "gimple_use_ops", scope: !597, file: !597, line: 1313, type: !9953, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9955)
!9953 = !DISubroutineType(types: !9954)
!9954 = !{!1063, !4433}
!9955 = !{!9956}
!9956 = !DILocalVariable(name: "g", arg: 1, scope: !9952, file: !597, line: 1313, type: !4433)
!9957 = !DILocation(line: 0, scope: !9952)
!9958 = distinct !DISubprogram(name: "gimple_vuse", scope: !597, file: !597, line: 1365, type: !4440, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9959)
!9959 = !{!9960}
!9960 = !DILocalVariable(name: "g", arg: 1, scope: !9958, file: !597, line: 1365, type: !4433)
!9961 = !DILocation(line: 0, scope: !9958)
!9962 = !DILocation(line: 1367, column: 8, scope: !9963)
!9963 = distinct !DILexicalBlock(scope: !9958, file: !597, line: 1367, column: 7)
!9964 = !DILocation(line: 1367, column: 7, scope: !9958)
!9965 = !DILocation(line: 1369, column: 23, scope: !9958)
!9966 = !DILocation(line: 1369, column: 3, scope: !9958)
!9967 = !DILocation(line: 1370, column: 1, scope: !9958)
!9968 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3300, file: !3300, line: 427, type: !9969, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9974)
!9969 = !DISubroutineType(types: !9970)
!9970 = !{!704, !9971}
!9971 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !687, line: 30, baseType: !9972)
!9972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9973, size: 64)
!9973 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !1068)
!9974 = !{!9975}
!9975 = !DILocalVariable(name: "use", arg: 1, scope: !9968, file: !3300, line: 427, type: !9971)
!9976 = !DILocation(line: 0, scope: !9968)
!9977 = !DILocation(line: 429, column: 17, scope: !9968)
!9978 = !DILocation(line: 429, column: 10, scope: !9968)
!9979 = !DILocation(line: 429, column: 3, scope: !9968)
!9980 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !3300, file: !3300, line: 434, type: !9981, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9984)
!9981 = !DISubroutineType(types: !9982)
!9982 = !{!704, !9983}
!9983 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !687, line: 27, baseType: !703)
!9984 = !{!9985}
!9985 = !DILocalVariable(name: "def", arg: 1, scope: !9980, file: !3300, line: 434, type: !9983)
!9986 = !DILocation(line: 0, scope: !9980)
!9987 = !DILocation(line: 436, column: 10, scope: !9980)
!9988 = !DILocation(line: 436, column: 3, scope: !9980)
!9989 = distinct !DISubprogram(name: "ei_start_1", scope: !337, file: !337, line: 696, type: !9990, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9992)
!9990 = !DISubroutineType(types: !9991)
!9991 = !{!9479, !9484}
!9992 = !{!9993, !9994}
!9993 = !DILocalVariable(name: "ev", arg: 1, scope: !9989, file: !337, line: 696, type: !9484)
!9994 = !DILocalVariable(name: "i", scope: !9989, file: !337, line: 698, type: !9479)
!9995 = !DILocation(line: 0, scope: !9989)
!9996 = !DILocation(line: 700, column: 5, scope: !9989)
!9997 = !DILocation(line: 700, column: 11, scope: !9989)
!9998 = !DILocation(line: 701, column: 5, scope: !9989)
!9999 = !DILocation(line: 701, column: 15, scope: !9989)
!10000 = !DILocation(line: 703, column: 3, scope: !9989)
!10001 = distinct !DISubprogram(name: "ei_cond", scope: !337, file: !337, line: 771, type: !10002, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10005)
!10002 = !DISubroutineType(types: !10003)
!10003 = !{!695, !9479, !10004}
!10004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1008, size: 64)
!10005 = !{!10006, !10007}
!10006 = !DILocalVariable(name: "ei", arg: 1, scope: !10001, file: !337, line: 771, type: !9479)
!10007 = !DILocalVariable(name: "p", arg: 2, scope: !10001, file: !337, line: 771, type: !10004)
!10008 = !DILocation(line: 0, scope: !10001)
!10009 = !DILocation(line: 773, column: 8, scope: !10010)
!10010 = distinct !DILexicalBlock(scope: !10001, file: !337, line: 773, column: 7)
!10011 = !DILocation(line: 773, column: 7, scope: !10001)
!10012 = !DILocation(line: 775, column: 12, scope: !10013)
!10013 = distinct !DILexicalBlock(scope: !10010, file: !337, line: 774, column: 5)
!10014 = !DILocation(line: 776, column: 7, scope: !10013)
!10015 = !DILocation(line: 781, column: 7, scope: !10016)
!10016 = distinct !DILexicalBlock(scope: !10010, file: !337, line: 779, column: 5)
!10017 = !DILocation(line: 0, scope: !10010)
!10018 = !DILocation(line: 783, column: 1, scope: !10001)
!10019 = distinct !DISubprogram(name: "ei_next", scope: !337, file: !337, line: 736, type: !10020, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10023)
!10020 = !DISubroutineType(types: !10021)
!10021 = !{null, !10022}
!10022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9479, size: 64)
!10023 = !{!10024}
!10024 = !DILocalVariable(name: "i", arg: 1, scope: !10019, file: !337, line: 736, type: !10022)
!10025 = !DILocation(line: 0, scope: !10019)
!10026 = !DILocation(line: 738, column: 3, scope: !10019)
!10027 = !DILocation(line: 739, column: 11, scope: !10019)
!10028 = !DILocation(line: 740, column: 1, scope: !10019)
!10029 = distinct !DISubprogram(name: "update_ssa_across_abnormal_edges", scope: !3, file: !3, line: 1761, type: !10030, scopeLine: 1763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10032)
!10030 = !DISubroutineType(types: !10031)
!10031 = !{null, !1584, !1584, !695, !695}
!10032 = !{!10033, !10034, !10035, !10036, !10037, !10038, !10039, !10044, !10045}
!10033 = !DILocalVariable(name: "bb", arg: 1, scope: !10029, file: !3, line: 1761, type: !1584)
!10034 = !DILocalVariable(name: "ret_bb", arg: 2, scope: !10029, file: !3, line: 1761, type: !1584)
!10035 = !DILocalVariable(name: "can_throw", arg: 3, scope: !10029, file: !3, line: 1762, type: !695)
!10036 = !DILocalVariable(name: "nonlocal_goto", arg: 4, scope: !10029, file: !3, line: 1762, type: !695)
!10037 = !DILocalVariable(name: "e", scope: !10029, file: !3, line: 1764, type: !1008)
!10038 = !DILocalVariable(name: "ei", scope: !10029, file: !3, line: 1765, type: !9479)
!10039 = !DILocalVariable(name: "phi", scope: !10040, file: !3, line: 1771, type: !1028)
!10040 = distinct !DILexicalBlock(scope: !10041, file: !3, line: 1770, column: 7)
!10041 = distinct !DILexicalBlock(scope: !10042, file: !3, line: 1768, column: 9)
!10042 = distinct !DILexicalBlock(scope: !10043, file: !3, line: 1767, column: 3)
!10043 = distinct !DILexicalBlock(scope: !10029, file: !3, line: 1767, column: 3)
!10044 = !DILocalVariable(name: "si", scope: !10040, file: !3, line: 1772, type: !2373)
!10045 = !DILocalVariable(name: "re", scope: !10046, file: !3, line: 1782, type: !1008)
!10046 = distinct !DILexicalBlock(scope: !10047, file: !3, line: 1781, column: 4)
!10047 = distinct !DILexicalBlock(scope: !10048, file: !3, line: 1780, column: 2)
!10048 = distinct !DILexicalBlock(scope: !10040, file: !3, line: 1780, column: 2)
!10049 = !DILocation(line: 0, scope: !10029)
!10050 = !DILocation(line: 1764, column: 3, scope: !10029)
!10051 = !DILocation(line: 1765, column: 3, scope: !10029)
!10052 = !DILocation(line: 1767, column: 3, scope: !10043)
!10053 = !DILocation(line: 0, scope: !10042)
!10054 = !DILocation(line: 0, scope: !10040)
!10055 = !DILocation(line: 0, scope: !10056)
!10056 = distinct !DILexicalBlock(scope: !10040, file: !3, line: 1774, column: 6)
!10057 = !DILocation(line: 0, scope: !10058)
!10058 = distinct !DILexicalBlock(scope: !10040, file: !3, line: 1777, column: 6)
!10059 = !DILocation(line: 0, scope: !10048)
!10060 = !DILocation(line: 1767, column: 3, scope: !10042)
!10061 = !DILocation(line: 1768, column: 10, scope: !10041)
!10062 = !DILocation(line: 1768, column: 13, scope: !10041)
!10063 = !DILocation(line: 1768, column: 19, scope: !10041)
!10064 = !DILocation(line: 1769, column: 2, scope: !10041)
!10065 = !DILocation(line: 1769, column: 34, scope: !10041)
!10066 = !DILocation(line: 1769, column: 40, scope: !10041)
!10067 = !DILocation(line: 1768, column: 9, scope: !10042)
!10068 = !DILocation(line: 1772, column: 2, scope: !10040)
!10069 = !DILocation(line: 1774, column: 6, scope: !10040)
!10070 = !DILocation(line: 1775, column: 4, scope: !10056)
!10071 = !DILocation(line: 1777, column: 6, scope: !10040)
!10072 = !DILocation(line: 1778, column: 4, scope: !10058)
!10073 = !DILocation(line: 1780, column: 12, scope: !10048)
!10074 = !DILocation(line: 1780, column: 28, scope: !10048)
!10075 = !DILocation(line: 1780, column: 31, scope: !10048)
!10076 = !DILocation(line: 1780, column: 7, scope: !10048)
!10077 = !DILocation(line: 1780, column: 39, scope: !10047)
!10078 = !DILocation(line: 1780, column: 38, scope: !10047)
!10079 = !DILocation(line: 1780, column: 2, scope: !10048)
!10080 = !DILocation(line: 1784, column: 12, scope: !10046)
!10081 = !DILocation(line: 1787, column: 6, scope: !10046)
!10082 = !DILocation(line: 1789, column: 6, scope: !10046)
!10083 = !DILocation(line: 1792, column: 26, scope: !10084)
!10084 = distinct !DILexicalBlock(scope: !10046, file: !3, line: 1792, column: 10)
!10085 = !DILocation(line: 1792, column: 11, scope: !10084)
!10086 = !DILocation(line: 1792, column: 10, scope: !10046)
!10087 = !DILocation(line: 1794, column: 26, scope: !10088)
!10088 = distinct !DILexicalBlock(scope: !10084, file: !3, line: 1793, column: 8)
!10089 = !DILocation(line: 1794, column: 3, scope: !10088)
!10090 = !DILocation(line: 1795, column: 3, scope: !10088)
!10091 = !DILocation(line: 1798, column: 30, scope: !10046)
!10092 = !DILocation(line: 1798, column: 33, scope: !10046)
!10093 = !DILocation(line: 1798, column: 11, scope: !10046)
!10094 = !DILocation(line: 0, scope: !10046)
!10095 = !DILocation(line: 1799, column: 6, scope: !10046)
!10096 = !DILocation(line: 1800, column: 6, scope: !10046)
!10097 = !DILocation(line: 1803, column: 6, scope: !10046)
!10098 = !DILocation(line: 1805, column: 4, scope: !10047)
!10099 = !DILocation(line: 1780, column: 55, scope: !10047)
!10100 = !DILocation(line: 1780, column: 2, scope: !10047)
!10101 = distinct !{!10101, !10079, !10102}
!10102 = !DILocation(line: 1805, column: 4, scope: !10048)
!10103 = !DILocation(line: 1806, column: 7, scope: !10041)
!10104 = !DILocation(line: 1806, column: 7, scope: !10040)
!10105 = distinct !{!10105, !10052, !10106}
!10106 = !DILocation(line: 1806, column: 7, scope: !10043)
!10107 = !DILocation(line: 1807, column: 1, scope: !10029)
!10108 = distinct !DISubprogram(name: "ei_end_p", scope: !337, file: !337, line: 721, type: !10109, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10111)
!10109 = !DISubroutineType(types: !10110)
!10110 = !{!695, !9479}
!10111 = !{!10112}
!10112 = !DILocalVariable(name: "i", arg: 1, scope: !10108, file: !337, line: 721, type: !9479)
!10113 = !DILocation(line: 723, column: 22, scope: !10108)
!10114 = !DILocation(line: 723, column: 19, scope: !10108)
!10115 = !DILocation(line: 723, column: 10, scope: !10108)
!10116 = !DILocation(line: 723, column: 3, scope: !10108)
!10117 = distinct !DISubprogram(name: "ei_edge", scope: !337, file: !337, line: 752, type: !10118, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10120)
!10118 = !DISubroutineType(types: !10119)
!10119 = !{!1008, !9479}
!10120 = !{!10121}
!10121 = !DILocalVariable(name: "i", arg: 1, scope: !10117, file: !337, line: 752, type: !9479)
!10122 = !DILocation(line: 754, column: 10, scope: !10117)
!10123 = !DILocation(line: 754, column: 3, scope: !10117)
!10124 = distinct !DISubprogram(name: "ei_container", scope: !337, file: !337, line: 685, type: !10125, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10127)
!10125 = !DISubroutineType(types: !10126)
!10126 = !{!996, !9479}
!10127 = !{!10128}
!10128 = !DILocalVariable(name: "i", arg: 1, scope: !10124, file: !337, line: 685, type: !9479)
!10129 = !DILocation(line: 687, column: 3, scope: !10124)
!10130 = !DILocation(line: 688, column: 10, scope: !10124)
!10131 = !DILocation(line: 688, column: 3, scope: !10124)
!10132 = distinct !DISubprogram(name: "gimple_phi_result_ptr", scope: !597, file: !597, line: 3080, type: !7830, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10133)
!10133 = !{!10134}
!10134 = !DILocalVariable(name: "gs", arg: 1, scope: !10132, file: !597, line: 3080, type: !1028)
!10135 = !DILocation(line: 0, scope: !10132)
!10136 = !DILocation(line: 3083, column: 26, scope: !10132)
!10137 = !DILocation(line: 3083, column: 3, scope: !10132)
!10138 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !3300, file: !3300, line: 233, type: !10139, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10141)
!10139 = !DISubroutineType(types: !10140)
!10140 = !{null, !9971, !704}
!10141 = !{!10142, !10143}
!10142 = !DILocalVariable(name: "use", arg: 1, scope: !10138, file: !3300, line: 233, type: !9971)
!10143 = !DILocalVariable(name: "val", arg: 2, scope: !10138, file: !3300, line: 233, type: !704)
!10144 = !DILocation(line: 0, scope: !10138)
!10145 = !DILocation(line: 235, column: 3, scope: !10138)
!10146 = !DILocation(line: 236, column: 10, scope: !10138)
!10147 = !DILocation(line: 236, column: 15, scope: !10138)
!10148 = !DILocation(line: 237, column: 3, scope: !10138)
!10149 = !DILocation(line: 238, column: 1, scope: !10138)
!10150 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3300, file: !3300, line: 442, type: !10151, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10153)
!10151 = !DISubroutineType(types: !10152)
!10152 = !{!9971, !1028, !696}
!10153 = !{!10154, !10155}
!10154 = !DILocalVariable(name: "gs", arg: 1, scope: !10150, file: !3300, line: 442, type: !1028)
!10155 = !DILocalVariable(name: "i", arg: 2, scope: !10150, file: !3300, line: 442, type: !696)
!10156 = !DILocation(line: 0, scope: !10150)
!10157 = !DILocation(line: 444, column: 11, scope: !10150)
!10158 = !DILocation(line: 444, column: 35, scope: !10150)
!10159 = !DILocation(line: 444, column: 3, scope: !10150)
!10160 = distinct !DISubprogram(name: "delink_imm_use", scope: !3300, file: !3300, line: 188, type: !10161, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10163)
!10161 = !DISubroutineType(types: !10162)
!10162 = !{null, !9972}
!10163 = !{!10164}
!10164 = !DILocalVariable(name: "linknode", arg: 1, scope: !10160, file: !3300, line: 188, type: !9972)
!10165 = !DILocation(line: 0, scope: !10160)
!10166 = !DILocation(line: 191, column: 17, scope: !10167)
!10167 = distinct !DILexicalBlock(scope: !10160, file: !3300, line: 191, column: 7)
!10168 = !DILocation(line: 191, column: 22, scope: !10167)
!10169 = !DILocation(line: 191, column: 7, scope: !10160)
!10170 = !DILocation(line: 194, column: 36, scope: !10160)
!10171 = !DILocation(line: 194, column: 19, scope: !10160)
!10172 = !DILocation(line: 194, column: 24, scope: !10160)
!10173 = !DILocation(line: 195, column: 36, scope: !10160)
!10174 = !DILocation(line: 195, column: 13, scope: !10160)
!10175 = !DILocation(line: 195, column: 24, scope: !10160)
!10176 = !DILocation(line: 196, column: 18, scope: !10160)
!10177 = !DILocation(line: 197, column: 18, scope: !10160)
!10178 = !DILocation(line: 198, column: 1, scope: !10160)
!10179 = distinct !DISubprogram(name: "link_imm_use", scope: !3300, file: !3300, line: 214, type: !10180, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10182)
!10180 = !DISubroutineType(types: !10181)
!10181 = !{null, !9972, !704}
!10182 = !{!10183, !10184, !10185}
!10183 = !DILocalVariable(name: "linknode", arg: 1, scope: !10179, file: !3300, line: 214, type: !9972)
!10184 = !DILocalVariable(name: "def", arg: 2, scope: !10179, file: !3300, line: 214, type: !704)
!10185 = !DILocalVariable(name: "root", scope: !10179, file: !3300, line: 216, type: !9972)
!10186 = !DILocation(line: 0, scope: !10179)
!10187 = !DILocation(line: 218, column: 8, scope: !10188)
!10188 = distinct !DILexicalBlock(scope: !10179, file: !3300, line: 218, column: 7)
!10189 = !DILocation(line: 218, column: 12, scope: !10188)
!10190 = !DILocation(line: 218, column: 15, scope: !10188)
!10191 = !DILocation(line: 218, column: 31, scope: !10188)
!10192 = !DILocation(line: 218, column: 7, scope: !10179)
!10193 = !DILocation(line: 219, column: 15, scope: !10188)
!10194 = !DILocation(line: 219, column: 20, scope: !10188)
!10195 = !DILocation(line: 219, column: 5, scope: !10188)
!10196 = !DILocation(line: 222, column: 16, scope: !10197)
!10197 = distinct !DILexicalBlock(scope: !10188, file: !3300, line: 221, column: 5)
!10198 = !DILocation(line: 227, column: 7, scope: !10197)
!10199 = !DILocation(line: 229, column: 1, scope: !10179)
!10200 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !3300, file: !3300, line: 202, type: !10201, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10203)
!10201 = !DISubroutineType(types: !10202)
!10202 = !{null, !9972, !9972}
!10203 = !{!10204, !10205}
!10204 = !DILocalVariable(name: "linknode", arg: 1, scope: !10200, file: !3300, line: 202, type: !9972)
!10205 = !DILocalVariable(name: "list", arg: 2, scope: !10200, file: !3300, line: 202, type: !9972)
!10206 = !DILocation(line: 0, scope: !10200)
!10207 = !DILocation(line: 206, column: 13, scope: !10200)
!10208 = !DILocation(line: 206, column: 18, scope: !10200)
!10209 = !DILocation(line: 207, column: 26, scope: !10200)
!10210 = !DILocation(line: 207, column: 13, scope: !10200)
!10211 = !DILocation(line: 207, column: 18, scope: !10200)
!10212 = !DILocation(line: 208, column: 9, scope: !10200)
!10213 = !DILocation(line: 208, column: 15, scope: !10200)
!10214 = !DILocation(line: 208, column: 20, scope: !10200)
!10215 = !DILocation(line: 209, column: 14, scope: !10200)
!10216 = !DILocation(line: 210, column: 1, scope: !10200)
!10217 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !597, file: !597, line: 3100, type: !10218, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10221)
!10218 = !DISubroutineType(types: !10219)
!10219 = !{!10220, !1028, !7}
!10220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1130, size: 64)
!10221 = !{!10222, !10223}
!10222 = !DILocalVariable(name: "gs", arg: 1, scope: !10217, file: !597, line: 3100, type: !1028)
!10223 = !DILocalVariable(name: "index", arg: 2, scope: !10217, file: !597, line: 3100, type: !7)
!10224 = !DILocation(line: 0, scope: !10217)
!10225 = !DILocation(line: 3103, column: 3, scope: !10217)
!10226 = !DILocation(line: 3104, column: 12, scope: !10217)
!10227 = !DILocation(line: 3104, column: 3, scope: !10217)
!10228 = distinct !DISubprogram(name: "phi_nodes", scope: !3300, file: !3300, line: 508, type: !7128, scopeLine: 509, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10229)
!10229 = !{!10230}
!10230 = !DILocalVariable(name: "bb", arg: 1, scope: !10228, file: !3300, line: 508, type: !6439)
!10231 = !DILocation(line: 0, scope: !10228)
!10232 = !DILocation(line: 510, column: 3, scope: !10228)
!10233 = !DILocation(line: 511, column: 15, scope: !10234)
!10234 = distinct !DILexicalBlock(scope: !10228, file: !3300, line: 511, column: 7)
!10235 = !DILocation(line: 511, column: 8, scope: !10234)
!10236 = !DILocation(line: 511, column: 7, scope: !10228)
!10237 = !DILocation(line: 513, column: 25, scope: !10228)
!10238 = !DILocation(line: 513, column: 3, scope: !10228)
!10239 = !DILocation(line: 514, column: 1, scope: !10228)
!10240 = distinct !DISubprogram(name: "gimple_phi_arg_location_from_edge", scope: !3300, file: !3300, line: 483, type: !10241, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10243)
!10241 = !DISubroutineType(types: !10242)
!10242 = !{!831, !1028, !1008}
!10243 = !{!10244, !10245}
!10244 = !DILocalVariable(name: "gs", arg: 1, scope: !10240, file: !3300, line: 483, type: !1028)
!10245 = !DILocalVariable(name: "e", arg: 2, scope: !10240, file: !3300, line: 483, type: !1008)
!10246 = !DILocation(line: 0, scope: !10240)
!10247 = !DILocation(line: 485, column: 33, scope: !10240)
!10248 = !DILocation(line: 485, column: 10, scope: !10240)
!10249 = !DILocation(line: 485, column: 44, scope: !10240)
!10250 = !DILocation(line: 485, column: 3, scope: !10240)
!10251 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !597, file: !597, line: 33, type: !10252, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10254)
!10252 = !DISubroutineType(types: !10253)
!10253 = !{!696, !6451, !7, !2221}
!10254 = !{!10255, !10256, !10257}
!10255 = !DILocalVariable(name: "vec_", arg: 1, scope: !10251, file: !597, line: 33, type: !6451)
!10256 = !DILocalVariable(name: "ix_", arg: 2, scope: !10251, file: !597, line: 33, type: !7)
!10257 = !DILocalVariable(name: "ptr", arg: 3, scope: !10251, file: !597, line: 33, type: !2221)
!10258 = !DILocation(line: 0, scope: !10251)
!10259 = !DILocation(line: 33, column: 1, scope: !10260)
!10260 = distinct !DILexicalBlock(scope: !10251, file: !597, line: 33, column: 1)
!10261 = !DILocation(line: 33, column: 1, scope: !10251)
!10262 = !DILocation(line: 33, column: 1, scope: !10263)
!10263 = distinct !DILexicalBlock(scope: !10260, file: !597, line: 33, column: 1)
!10264 = !DILocation(line: 33, column: 1, scope: !10265)
!10265 = distinct !DILexicalBlock(scope: !10260, file: !597, line: 33, column: 1)
!10266 = !DILocation(line: 0, scope: !10260)
!10267 = distinct !DISubprogram(name: "copy_debug_stmt", scope: !3, file: !3, line: 2124, type: !10268, scopeLine: 2125, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10270)
!10268 = !DISubroutineType(types: !10269)
!10269 = !{null, !1028, !2095}
!10270 = !{!10271, !10272, !10273, !10274, !10275, !10276}
!10271 = !DILocalVariable(name: "stmt", arg: 1, scope: !10267, file: !3, line: 2124, type: !1028)
!10272 = !DILocalVariable(name: "id", arg: 2, scope: !10267, file: !3, line: 2124, type: !2095)
!10273 = !DILocalVariable(name: "t", scope: !10267, file: !3, line: 2126, type: !704)
!10274 = !DILocalVariable(name: "n", scope: !10267, file: !3, line: 2126, type: !703)
!10275 = !DILocalVariable(name: "wi", scope: !10267, file: !3, line: 2127, type: !2370)
!10276 = !DILocalVariable(name: "n", scope: !10277, file: !3, line: 2132, type: !703)
!10277 = distinct !DILexicalBlock(scope: !10278, file: !3, line: 2131, column: 5)
!10278 = distinct !DILexicalBlock(scope: !10267, file: !3, line: 2130, column: 7)
!10279 = !DILocation(line: 0, scope: !10267)
!10280 = !DILocation(line: 2126, column: 3, scope: !10267)
!10281 = !DILocation(line: 2127, column: 3, scope: !10267)
!10282 = !DILocation(line: 2129, column: 11, scope: !10267)
!10283 = !DILocation(line: 2129, column: 5, scope: !10267)
!10284 = !DILocation(line: 2130, column: 7, scope: !10278)
!10285 = !DILocation(line: 2130, column: 7, scope: !10267)
!10286 = !DILocation(line: 2133, column: 46, scope: !10277)
!10287 = !DILocation(line: 2133, column: 56, scope: !10277)
!10288 = !DILocation(line: 2133, column: 20, scope: !10277)
!10289 = !DILocation(line: 0, scope: !10277)
!10290 = !DILocation(line: 2134, column: 11, scope: !10291)
!10291 = distinct !DILexicalBlock(scope: !10277, file: !3, line: 2134, column: 11)
!10292 = !DILocation(line: 2134, column: 11, scope: !10277)
!10293 = !DILocation(line: 2135, column: 6, scope: !10291)
!10294 = !DILocation(line: 2135, column: 4, scope: !10291)
!10295 = !DILocation(line: 2135, column: 2, scope: !10291)
!10296 = !DILocation(line: 2137, column: 27, scope: !10267)
!10297 = !DILocation(line: 2137, column: 3, scope: !10267)
!10298 = !DILocation(line: 2140, column: 3, scope: !10267)
!10299 = !DILocation(line: 2141, column: 6, scope: !10267)
!10300 = !DILocation(line: 2141, column: 11, scope: !10267)
!10301 = !DILocation(line: 2143, column: 25, scope: !10267)
!10302 = !DILocation(line: 2145, column: 7, scope: !10267)
!10303 = !DILocation(line: 2145, column: 5, scope: !10267)
!10304 = !DILocation(line: 2147, column: 7, scope: !10305)
!10305 = distinct !DILexicalBlock(scope: !10267, file: !3, line: 2147, column: 7)
!10306 = !DILocation(line: 2147, column: 21, scope: !10305)
!10307 = !DILocation(line: 2147, column: 34, scope: !10305)
!10308 = !DILocation(line: 2147, column: 41, scope: !10305)
!10309 = !DILocation(line: 2147, column: 37, scope: !10305)
!10310 = !DILocation(line: 2148, column: 7, scope: !10305)
!10311 = !DILocation(line: 2148, column: 24, scope: !10305)
!10312 = !DILocation(line: 2148, column: 13, scope: !10305)
!10313 = !DILocation(line: 2147, column: 7, scope: !10267)
!10314 = !DILocation(line: 0, scope: !10315)
!10315 = distinct !DILexicalBlock(scope: !10305, file: !3, line: 2153, column: 12)
!10316 = !DILocation(line: 2153, column: 12, scope: !10315)
!10317 = !DILocation(line: 2150, column: 7, scope: !10318)
!10318 = distinct !DILexicalBlock(scope: !10305, file: !3, line: 2149, column: 5)
!10319 = !DILocation(line: 0, scope: !10318)
!10320 = !DILocation(line: 2151, column: 11, scope: !10318)
!10321 = !DILocation(line: 2151, column: 9, scope: !10318)
!10322 = !DILocation(line: 2152, column: 5, scope: !10318)
!10323 = !DILocation(line: 2153, column: 26, scope: !10315)
!10324 = !DILocation(line: 2154, column: 5, scope: !10315)
!10325 = !DILocation(line: 2154, column: 9, scope: !10315)
!10326 = !DILocation(line: 2155, column: 5, scope: !10315)
!10327 = !DILocation(line: 2155, column: 25, scope: !10315)
!10328 = !DILocation(line: 2155, column: 8, scope: !10315)
!10329 = !DILocation(line: 2156, column: 5, scope: !10315)
!10330 = !DILocation(line: 2156, column: 35, scope: !10315)
!10331 = !DILocation(line: 2156, column: 45, scope: !10315)
!10332 = !DILocation(line: 2156, column: 9, scope: !10315)
!10333 = !DILocation(line: 2157, column: 5, scope: !10315)
!10334 = !DILocation(line: 2157, column: 18, scope: !10315)
!10335 = !DILocation(line: 2157, column: 9, scope: !10315)
!10336 = !DILocation(line: 2153, column: 12, scope: !10305)
!10337 = !DILocation(line: 2160, column: 5, scope: !10315)
!10338 = !DILocation(line: 2162, column: 36, scope: !10267)
!10339 = !DILocation(line: 2162, column: 3, scope: !10267)
!10340 = !DILocation(line: 2164, column: 7, scope: !10341)
!10341 = distinct !DILexicalBlock(scope: !10267, file: !3, line: 2164, column: 7)
!10342 = !DILocation(line: 2164, column: 7, scope: !10267)
!10343 = !DILocation(line: 2165, column: 5, scope: !10341)
!10344 = !DILocation(line: 2169, column: 7, scope: !10345)
!10345 = distinct !DILexicalBlock(scope: !10267, file: !3, line: 2169, column: 7)
!10346 = !DILocation(line: 2169, column: 29, scope: !10345)
!10347 = !DILocation(line: 2169, column: 7, scope: !10267)
!10348 = !DILocation(line: 2170, column: 5, scope: !10345)
!10349 = !DILocation(line: 2172, column: 25, scope: !10267)
!10350 = !DILocation(line: 2174, column: 3, scope: !10267)
!10351 = !DILocation(line: 2175, column: 24, scope: !10352)
!10352 = distinct !DILexicalBlock(scope: !10267, file: !3, line: 2175, column: 7)
!10353 = !DILocation(line: 2175, column: 7, scope: !10352)
!10354 = !DILocation(line: 2175, column: 7, scope: !10267)
!10355 = !DILocation(line: 2176, column: 5, scope: !10352)
!10356 = !DILocation(line: 2177, column: 1, scope: !10267)
!10357 = distinct !DISubprogram(name: "gimple_debug_bind_set_var", scope: !597, file: !597, line: 3306, type: !7731, scopeLine: 3307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10358)
!10358 = !{!10359, !10360}
!10359 = !DILocalVariable(name: "dbg", arg: 1, scope: !10357, file: !597, line: 3306, type: !1028)
!10360 = !DILocalVariable(name: "var", arg: 2, scope: !10357, file: !597, line: 3306, type: !704)
!10361 = !DILocation(line: 0, scope: !10357)
!10362 = !DILocation(line: 3312, column: 3, scope: !10357)
!10363 = !DILocation(line: 3313, column: 1, scope: !10357)
!10364 = distinct !DISubprogram(name: "gimple_debug_bind_has_value_p", scope: !597, file: !597, line: 3349, type: !7363, scopeLine: 3350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10365)
!10365 = !{!10366}
!10366 = !DILocalVariable(name: "dbg", arg: 1, scope: !10364, file: !597, line: 3349, type: !1028)
!10367 = !DILocation(line: 0, scope: !10364)
!10368 = !DILocation(line: 3355, column: 10, scope: !10364)
!10369 = !DILocation(line: 3355, column: 29, scope: !10364)
!10370 = !DILocation(line: 3355, column: 3, scope: !10364)
!10371 = distinct !DISubprogram(name: "gimple_debug_bind_get_value_ptr", scope: !597, file: !597, line: 3294, type: !7830, scopeLine: 3295, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10372)
!10372 = !{!10373}
!10373 = !DILocalVariable(name: "dbg", arg: 1, scope: !10371, file: !597, line: 3294, type: !1028)
!10374 = !DILocation(line: 0, scope: !10371)
!10375 = !DILocation(line: 3300, column: 10, scope: !10371)
!10376 = !DILocation(line: 3300, column: 3, scope: !10371)
!10377 = distinct !DISubprogram(name: "gimple_debug_bind_reset_value", scope: !597, file: !597, line: 3336, type: !8676, scopeLine: 3337, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10378)
!10378 = !{!10379}
!10379 = !DILocalVariable(name: "dbg", arg: 1, scope: !10377, file: !597, line: 3336, type: !1028)
!10380 = !DILocation(line: 0, scope: !10377)
!10381 = !DILocation(line: 3342, column: 3, scope: !10377)
!10382 = !DILocation(line: 3343, column: 1, scope: !10377)
!10383 = distinct !DISubprogram(name: "single_succ_p", scope: !337, file: !337, line: 626, type: !10384, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10386)
!10384 = !DISubroutineType(types: !10385)
!10385 = !{!695, !6439}
!10386 = !{!10387}
!10387 = !DILocalVariable(name: "bb", arg: 1, scope: !10383, file: !337, line: 626, type: !6439)
!10388 = !DILocation(line: 0, scope: !10383)
!10389 = !DILocation(line: 628, column: 10, scope: !10383)
!10390 = !DILocation(line: 628, column: 33, scope: !10383)
!10391 = !DILocation(line: 628, column: 3, scope: !10383)
!10392 = distinct !DISubprogram(name: "gimple_assign_rhs_class", scope: !597, file: !597, line: 1844, type: !10393, scopeLine: 1845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10395)
!10393 = !DISubroutineType(types: !10394)
!10394 = !{!680, !4433}
!10395 = !{!10396}
!10396 = !DILocalVariable(name: "gs", arg: 1, scope: !10392, file: !597, line: 1844, type: !4433)
!10397 = !DILocation(line: 0, scope: !10392)
!10398 = !DILocation(line: 1846, column: 32, scope: !10392)
!10399 = !DILocation(line: 1846, column: 10, scope: !10392)
!10400 = !DILocation(line: 1846, column: 3, scope: !10392)
!10401 = distinct !DISubprogram(name: "gimple_expr_type", scope: !597, file: !597, line: 4366, type: !4440, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10402)
!10402 = !{!10403, !10404, !10405}
!10403 = !DILocalVariable(name: "stmt", arg: 1, scope: !10401, file: !597, line: 4366, type: !4433)
!10404 = !DILocalVariable(name: "code", scope: !10401, file: !597, line: 4368, type: !596)
!10405 = !DILocalVariable(name: "type", scope: !10406, file: !597, line: 4372, type: !704)
!10406 = distinct !DILexicalBlock(scope: !10407, file: !597, line: 4371, column: 5)
!10407 = distinct !DILexicalBlock(scope: !10401, file: !597, line: 4370, column: 7)
!10408 = !DILocation(line: 0, scope: !10401)
!10409 = !DILocation(line: 4368, column: 27, scope: !10401)
!10410 = !DILocation(line: 4370, column: 29, scope: !10407)
!10411 = !DILocation(line: 4378, column: 9, scope: !10412)
!10412 = distinct !DILexicalBlock(scope: !10406, file: !597, line: 4377, column: 11)
!10413 = !DILocation(line: 0, scope: !10406)
!10414 = !DILocation(line: 4378, column: 2, scope: !10412)
!10415 = !DILocation(line: 4380, column: 10, scope: !10412)
!10416 = !DILocation(line: 4380, column: 2, scope: !10412)
!10417 = !DILocation(line: 4383, column: 13, scope: !10418)
!10418 = distinct !DILexicalBlock(scope: !10412, file: !597, line: 4381, column: 4)
!10419 = !DILocation(line: 4384, column: 6, scope: !10418)
!10420 = !DILocation(line: 4388, column: 13, scope: !10418)
!10421 = !DILocation(line: 4389, column: 6, scope: !10418)
!10422 = !DILocation(line: 4394, column: 12, scope: !10423)
!10423 = distinct !DILexicalBlock(scope: !10407, file: !597, line: 4393, column: 12)
!10424 = !DILocation(line: 4394, column: 5, scope: !10423)
!10425 = !DILocation(line: 4396, column: 12, scope: !10423)
!10426 = !DILocation(line: 4396, column: 5, scope: !10423)
!10427 = !DILocation(line: 0, scope: !10407)
!10428 = !DILocation(line: 4397, column: 1, scope: !10401)
!10429 = distinct !DISubprogram(name: "gimple_assign_set_rhs_code", scope: !597, file: !597, line: 1832, type: !10430, scopeLine: 1833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10432)
!10430 = !DISubroutineType(types: !10431)
!10431 = !{null, !1028, !134}
!10432 = !{!10433, !10434}
!10433 = !DILocalVariable(name: "s", arg: 1, scope: !10429, file: !597, line: 1832, type: !1028)
!10434 = !DILocalVariable(name: "code", arg: 2, scope: !10429, file: !597, line: 1832, type: !134)
!10435 = !DILocation(line: 0, scope: !10429)
!10436 = !DILocation(line: 1835, column: 13, scope: !10429)
!10437 = !DILocation(line: 1835, column: 21, scope: !10429)
!10438 = !DILocation(line: 1836, column: 1, scope: !10429)
!10439 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !597, file: !597, line: 1966, type: !4440, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10440)
!10440 = !{!10441, !10442, !10443}
!10441 = !DILocalVariable(name: "gs", arg: 1, scope: !10439, file: !597, line: 1966, type: !4433)
!10442 = !DILocalVariable(name: "fn", scope: !10439, file: !597, line: 1968, type: !704)
!10443 = !DILocalVariable(name: "type", scope: !10439, file: !597, line: 1969, type: !704)
!10444 = !DILocation(line: 0, scope: !10439)
!10445 = !DILocation(line: 1968, column: 13, scope: !10439)
!10446 = !DILocation(line: 1969, column: 15, scope: !10439)
!10447 = !DILocation(line: 1972, column: 10, scope: !10439)
!10448 = !DILocation(line: 1976, column: 10, scope: !10439)
!10449 = !DILocation(line: 1976, column: 3, scope: !10439)
!10450 = distinct !DISubprogram(name: "init_call_expr_arg_iterator", scope: !135, file: !135, line: 5375, type: !10451, scopeLine: 5376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !10453)
!10451 = !DISubroutineType(types: !10452)
!10452 = !{null, !704, !6919}
!10453 = !{!10454, !10455}
!10454 = !DILocalVariable(name: "exp", arg: 1, scope: !10450, file: !135, line: 5375, type: !704)
!10455 = !DILocalVariable(name: "iter", arg: 2, scope: !10450, file: !135, line: 5375, type: !6919)
!10456 = !DILocation(line: 0, scope: !10450)
!10457 = !DILocation(line: 5377, column: 9, scope: !10450)
!10458 = !DILocation(line: 5377, column: 11, scope: !10450)
!10459 = !DILocation(line: 5378, column: 13, scope: !10450)
!10460 = !DILocation(line: 5378, column: 9, scope: !10450)
!10461 = !DILocation(line: 5378, column: 11, scope: !10450)
!10462 = !DILocation(line: 5379, column: 9, scope: !10450)
!10463 = !DILocation(line: 5379, column: 11, scope: !10450)
!10464 = !DILocation(line: 5380, column: 1, scope: !10450)
