; ModuleID = 'tree-ssa-loop-niter.bc'
source_filename = "tree-ssa-loop-niter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.tree_niter_desc = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.double_int, %struct.affine_iv, %union.tree_node*, i32 }
%struct.affine_iv = type { %union.tree_node*, %union.tree_node*, i8 }
%struct.expanded_location = type { i8*, i32, i32, i8 }
%struct.bounds = type { [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct] }
%struct.__mpz_struct = type { i32, i32, i64* }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.ilb_data = type { %struct.loop*, %union.gimple_statement_d*, i8 }

@stdout = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@tree_code_type = external dso_local local_unnamed_addr constant [0 x i32], align 4
@global_trees = external dso_local local_unnamed_addr global [131 x %union.tree_node*], align 16
@optimize = external dso_local local_unnamed_addr global i32, align 4
@flag_unsafe_loop_optimizations = external dso_local local_unnamed_addr global i32, align 4
@.str = private unnamed_addr constant [39 x i8] c"assuming that the loop is not infinite\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"cannot optimize possibly infinite loops\00", align 1
@.str.2 = private unnamed_addr constant [49 x i8] c"assuming that the loop counter does not overflow\00", align 1
@.str.3 = private unnamed_addr constant [52 x i8] c"cannot optimize loop, the loop counter may overflow\00", align 1
@input_location = external dso_local local_unnamed_addr global i32, align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@integer_types = external dso_local local_unnamed_addr global [11 x %union.tree_node*], align 16
@chrec_dont_know = external dso_local local_unnamed_addr global %union.tree_node*, align 8
@current_function_decl = external dso_local local_unnamed_addr global %union.tree_node*, align 8
@dump_file = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@dump_flags = external dso_local local_unnamed_addr global i32, align 4
@.str.5 = private unnamed_addr constant [66 x i8] c"Found loop %i to be finite: it is within pure or const function.\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"Found loop %i to be finite: iterating \00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c" times\0A\00", align 1
@compiler_params = external dso_local local_unnamed_addr global %struct.param_info*, align 8
@.str.8 = private unnamed_addr constant [58 x i8] c"Proved that loop %d iterates %d times using brute force.\0A\00", align 1
@flag_expensive_optimizations = external dso_local local_unnamed_addr global i32, align 4
@.str.9 = private unnamed_addr constant [22 x i8] c"tree-ssa-loop-niter.c\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@flag_wrapv = external dso_local local_unnamed_addr global i32, align 4
@flag_trapv = external dso_local local_unnamed_addr global i32, align 4
@flag_strict_overflow = external dso_local local_unnamed_addr global i32, align 4
@tree_code_length = external dso_local local_unnamed_addr constant [0 x i8], align 1
@.str.11 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@.str.12 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@gimple_ops_offset_ = external dso_local local_unnamed_addr constant [0 x i64], align 8
@gss_for_code_ = external dso_local local_unnamed_addr constant [0 x i32], align 4
@gimple_rhs_class_table = external dso_local local_unnamed_addr constant [0 x i8], align 1
@.str.13 = private unnamed_addr constant [38 x i8] c"Analyzing # of iterations of loop %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"  exit condition \00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c" %s \00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"!=\00", align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.18 = private unnamed_addr constant [3 x i8] c"<=\00", align 1
@.str.19 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.20 = private unnamed_addr constant [34 x i8] c"  bounds on difference of bases: \00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c" ... \00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"  result:\0A\00", align 1
@.str.23 = private unnamed_addr constant [23 x i8] c"    under assumptions \00", align 1
@.str.24 = private unnamed_addr constant [13 x i8] c"    zero if \00", align 1
@.str.25 = private unnamed_addr constant [21 x i8] c"    # of iterations \00", align 1
@.str.26 = private unnamed_addr constant [14 x i8] c", bounded by \00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"  failed\0A\0A\00", align 1
@cfun = external dso_local local_unnamed_addr global %struct.function*, align 8
@.str.28 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.29 = private unnamed_addr constant [7 x i8] c", + , \00", align 1
@.str.30 = private unnamed_addr constant [4 x i8] c"]%s\00", align 1
@.str.31 = private unnamed_addr constant [14 x i8] c"(no_overflow)\00", align 1
@.str.32 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@sizetype_tab = external dso_local local_unnamed_addr global [4 x %union.tree_node*], align 16
@.str.33 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.34 = private unnamed_addr constant [13 x i8] c"Statement %s\00", align 1
@.str.35 = private unnamed_addr constant [7 x i8] c"(exit)\00", align 1
@.str.36 = private unnamed_addr constant [24 x i8] c" is %sexecuted at most \00", align 1
@.str.37 = private unnamed_addr constant [10 x i8] c"probably \00", align 1
@.str.38 = private unnamed_addr constant [14 x i8] c" (bounded by \00", align 1
@.str.39 = private unnamed_addr constant [25 x i8] c") + 1 times in loop %d.\0A\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"Induction variable (\00", align 1
@.str.41 = private unnamed_addr constant [3 x i8] c") \00", align 1
@.str.42 = private unnamed_addr constant [4 x i8] c" + \00", align 1
@.str.43 = private unnamed_addr constant [41 x i8] c" * iteration does not wrap in statement \00", align 1
@.str.44 = private unnamed_addr constant [14 x i8] c" in loop %d.\0A\00", align 1

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @vprintf(i8* noalias %__fmt, %struct.__va_list_tag* %__arg) local_unnamed_addr #0 !dbg !1887 {
entry:
  call void @llvm.dbg.value(metadata i8* %__fmt, metadata !1900, metadata !DIExpression()), !dbg !1902
  call void @llvm.dbg.value(metadata %struct.__va_list_tag* %__arg, metadata !1901, metadata !DIExpression()), !dbg !1902
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1903
  %call = tail call i32 @vfprintf(%struct._IO_FILE* %0, i8* %__fmt, %struct.__va_list_tag* %__arg) #6, !dbg !1904
  ret i32 %call, !dbg !1905
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 !dbg !1906 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !1910
  %call = tail call i32 @getc(%struct._IO_FILE* %0) #6, !dbg !1911
  ret i32 %call, !dbg !1912
}

declare dso_local i32 @getc(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fgetc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !1913 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !1968, metadata !DIExpression()), !dbg !1969
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !1970
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !1970
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !1970
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !1970
  %cmp = icmp uge i8* %0, %1, !dbg !1970
  %conv1 = zext i1 %cmp to i64, !dbg !1970
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1970
  %tobool = icmp eq i64 %expval, 0, !dbg !1970
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1970

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !1970
  br label %cond.end, !dbg !1970

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !1970
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !1970
  %2 = load i8, i8* %0, align 1, !dbg !1970
  %conv3 = zext i8 %2 to i32, !dbg !1970
  br label %cond.end, !dbg !1970

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !1970
  ret i32 %cond, !dbg !1971
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #3

declare dso_local i32 @__uflow(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !1972 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !1974, metadata !DIExpression()), !dbg !1975
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !1976
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !1976
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !1976
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !1976
  %cmp = icmp uge i8* %0, %1, !dbg !1976
  %conv1 = zext i1 %cmp to i64, !dbg !1976
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1976
  %tobool = icmp eq i64 %expval, 0, !dbg !1976
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1976

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !1976
  br label %cond.end, !dbg !1976

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !1976
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !1976
  %2 = load i8, i8* %0, align 1, !dbg !1976
  %conv3 = zext i8 %2 to i32, !dbg !1976
  br label %cond.end, !dbg !1976

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !1976
  ret i32 %cond, !dbg !1977
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #0 !dbg !1978 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !1979
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 1, !dbg !1979
  %1 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !1979
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 2, !dbg !1979
  %2 = load i8*, i8** %_IO_read_end, align 8, !dbg !1979
  %cmp = icmp uge i8* %1, %2, !dbg !1979
  %conv1 = zext i1 %cmp to i64, !dbg !1979
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1979
  %tobool = icmp eq i64 %expval, 0, !dbg !1979
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1979

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %0) #6, !dbg !1979
  br label %cond.end, !dbg !1979

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !1979
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !1979
  %3 = load i8, i8* %1, align 1, !dbg !1979
  %conv3 = zext i8 %3 to i32, !dbg !1979
  br label %cond.end, !dbg !1979

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !1979
  ret i32 %cond, !dbg !1980
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar(i32 %__c) local_unnamed_addr #0 !dbg !1981 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !1985, metadata !DIExpression()), !dbg !1986
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1987
  %call = tail call i32 @putc(i32 %__c, %struct._IO_FILE* %0) #6, !dbg !1988
  ret i32 %call, !dbg !1989
}

declare dso_local i32 @putc(i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fputc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !1990 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !1994, metadata !DIExpression()), !dbg !1996
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !1995, metadata !DIExpression()), !dbg !1996
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !1997
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !1997
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !1997
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !1997
  %cmp = icmp uge i8* %0, %1, !dbg !1997
  %conv1 = zext i1 %cmp to i64, !dbg !1997
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1997
  %tobool = icmp eq i64 %expval, 0, !dbg !1997
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1997

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !1997
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !1997
  br label %cond.end, !dbg !1997

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !1997
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !1997
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !1997
  store i8 %conv2, i8* %0, align 1, !dbg !1997
  %conv6 = and i32 %__c, 255, !dbg !1997
  br label %cond.end, !dbg !1997

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !1997
  ret i32 %cond, !dbg !1998
}

declare dso_local i32 @__overflow(%struct._IO_FILE*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !1999 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2001, metadata !DIExpression()), !dbg !2003
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2002, metadata !DIExpression()), !dbg !2003
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !2004
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2004
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !2004
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !2004
  %cmp = icmp uge i8* %0, %1, !dbg !2004
  %conv1 = zext i1 %cmp to i64, !dbg !2004
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2004
  %tobool = icmp eq i64 %expval, 0, !dbg !2004
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2004

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2004
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !2004
  br label %cond.end, !dbg !2004

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !2004
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2004
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2004
  store i8 %conv2, i8* %0, align 1, !dbg !2004
  %conv6 = and i32 %__c, 255, !dbg !2004
  br label %cond.end, !dbg !2004

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2004
  ret i32 %cond, !dbg !2005
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar_unlocked(i32 %__c) local_unnamed_addr #0 !dbg !2006 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2008, metadata !DIExpression()), !dbg !2009
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2010
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 5, !dbg !2010
  %1 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2010
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 6, !dbg !2010
  %2 = load i8*, i8** %_IO_write_end, align 8, !dbg !2010
  %cmp = icmp uge i8* %1, %2, !dbg !2010
  %conv1 = zext i1 %cmp to i64, !dbg !2010
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2010
  %tobool = icmp eq i64 %expval, 0, !dbg !2010
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2010

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2010
  %call = tail call i32 @__overflow(%struct._IO_FILE* %0, i32 %conv3) #6, !dbg !2010
  br label %cond.end, !dbg !2010

cond.false:                                       ; preds = %entry
  %conv4 = trunc i32 %__c to i8, !dbg !2010
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !2010
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2010
  store i8 %conv4, i8* %1, align 1, !dbg !2010
  %conv6 = and i32 %__c, 255, !dbg !2010
  br label %cond.end, !dbg !2010

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2010
  ret i32 %cond, !dbg !2011
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @getline(i8** %__lineptr, i64* %__n, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2012 {
entry:
  call void @llvm.dbg.value(metadata i8** %__lineptr, metadata !2018, metadata !DIExpression()), !dbg !2021
  call void @llvm.dbg.value(metadata i64* %__n, metadata !2019, metadata !DIExpression()), !dbg !2021
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2020, metadata !DIExpression()), !dbg !2021
  %call = tail call i64 @__getdelim(i8** %__lineptr, i64* %__n, i32 10, %struct._IO_FILE* %__stream) #6, !dbg !2022
  ret i64 %call, !dbg !2023
}

declare dso_local i64 @__getdelim(i8**, i64*, i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @feof_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2024 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2026, metadata !DIExpression()), !dbg !2027
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !2028
  %0 = load i32, i32* %_flags, align 8, !dbg !2028
  %and = lshr i32 %0, 4, !dbg !2028
  %and.lobit = and i32 %and, 1, !dbg !2028
  ret i32 %and.lobit, !dbg !2029
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @ferror_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2030 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2032, metadata !DIExpression()), !dbg !2033
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !2034
  %0 = load i32, i32* %_flags, align 8, !dbg !2034
  %and = lshr i32 %0, 5, !dbg !2034
  %and.lobit = and i32 %and, 1, !dbg !2034
  ret i32 %and.lobit, !dbg !2035
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @tolower(i32 %__c) local_unnamed_addr #0 !dbg !2036 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2039, metadata !DIExpression()), !dbg !2040
  %__c.off = add i32 %__c, 128, !dbg !2041
  %0 = icmp ult i32 %__c.off, 384, !dbg !2041
  br i1 %0, label %cond.true, label %cond.end, !dbg !2041

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_tolower_loc() #6, !dbg !2042
  %1 = load i32*, i32** %call, align 8, !dbg !2043
  %idxprom = sext i32 %__c to i64, !dbg !2044
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !2044
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2044
  br label %cond.end, !dbg !2045

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !2045
  ret i32 %cond, !dbg !2046
}

declare dso_local i32** @__ctype_tolower_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @toupper(i32 %__c) local_unnamed_addr #0 !dbg !2047 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2049, metadata !DIExpression()), !dbg !2050
  %__c.off = add i32 %__c, 128, !dbg !2051
  %0 = icmp ult i32 %__c.off, 384, !dbg !2051
  br i1 %0, label %cond.true, label %cond.end, !dbg !2051

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_toupper_loc() #6, !dbg !2052
  %1 = load i32*, i32** %call, align 8, !dbg !2053
  %idxprom = sext i32 %__c to i64, !dbg !2054
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !2054
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2054
  br label %cond.end, !dbg !2055

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !2055
  ret i32 %cond, !dbg !2056
}

declare dso_local i32** @__ctype_toupper_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @atoi(i8* %__nptr) local_unnamed_addr #0 !dbg !2057 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2062, metadata !DIExpression()), !dbg !2063
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !2064
  %conv = trunc i64 %call to i32, !dbg !2065
  ret i32 %conv, !dbg !2066
}

declare dso_local i64 @strtol(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atol(i8* %__nptr) local_unnamed_addr #0 !dbg !2067 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2071, metadata !DIExpression()), !dbg !2072
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !2073
  ret i64 %call, !dbg !2074
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atoll(i8* %__nptr) local_unnamed_addr #0 !dbg !2075 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2080, metadata !DIExpression()), !dbg !2081
  %call = tail call i64 @strtoll(i8* %__nptr, i8** null, i32 10) #6, !dbg !2082
  ret i64 %call, !dbg !2083
}

declare dso_local i64 @strtoll(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i8* @bsearch(i8* %__key, i8* %__base, i64 %__nmemb, i64 %__size, i32 (i8*, i8*)* %__compar) local_unnamed_addr #0 !dbg !2084 {
entry:
  call void @llvm.dbg.value(metadata i8* %__key, metadata !2090, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.value(metadata i8* %__base, metadata !2091, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !2092, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.value(metadata i64 %__size, metadata !2093, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.value(metadata i32 (i8*, i8*)* %__compar, metadata !2094, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.value(metadata i64 0, metadata !2095, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !2096, metadata !DIExpression()), !dbg !2100
  br label %while.cond, !dbg !2101

while.cond:                                       ; preds = %if.end6, %entry
  %__l.0 = phi i64 [ 0, %entry ], [ %__l.1, %if.end6 ], !dbg !2102
  %__u.0 = phi i64 [ %__nmemb, %entry ], [ %__u.1, %if.end6 ], !dbg !2100
  call void @llvm.dbg.value(metadata i64 %__u.0, metadata !2096, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.value(metadata i64 %__l.0, metadata !2095, metadata !DIExpression()), !dbg !2100
  %cmp = icmp ult i64 %__l.0, %__u.0, !dbg !2103
  br i1 %cmp, label %while.body, label %cleanup, !dbg !2101

while.body:                                       ; preds = %while.cond
  %add = add i64 %__l.0, %__u.0, !dbg !2104
  %div = lshr i64 %add, 1, !dbg !2106
  call void @llvm.dbg.value(metadata i64 %div, metadata !2097, metadata !DIExpression()), !dbg !2100
  %mul = mul i64 %div, %__size, !dbg !2107
  %add.ptr = getelementptr inbounds i8, i8* %__base, i64 %mul, !dbg !2108
  call void @llvm.dbg.value(metadata i8* %add.ptr, metadata !2098, metadata !DIExpression()), !dbg !2100
  %call = tail call i32 %__compar(i8* %__key, i8* %add.ptr) #6, !dbg !2109
  call void @llvm.dbg.value(metadata i32 %call, metadata !2099, metadata !DIExpression()), !dbg !2100
  %cmp1 = icmp slt i32 %call, 0, !dbg !2110
  br i1 %cmp1, label %if.end6, label %if.else, !dbg !2112

if.else:                                          ; preds = %while.body
  %cmp2 = icmp eq i32 %call, 0, !dbg !2113
  br i1 %cmp2, label %cleanup, label %if.then3, !dbg !2115

if.then3:                                         ; preds = %if.else
  %add4 = add nuw i64 %div, 1, !dbg !2116
  call void @llvm.dbg.value(metadata i64 %add4, metadata !2095, metadata !DIExpression()), !dbg !2100
  br label %if.end6

if.end6:                                          ; preds = %while.body, %if.then3
  %__l.1 = phi i64 [ %add4, %if.then3 ], [ %__l.0, %while.body ], !dbg !2100
  %__u.1 = phi i64 [ %__u.0, %if.then3 ], [ %div, %while.body ], !dbg !2100
  call void @llvm.dbg.value(metadata i64 %__u.1, metadata !2096, metadata !DIExpression()), !dbg !2100
  call void @llvm.dbg.value(metadata i64 %__l.1, metadata !2095, metadata !DIExpression()), !dbg !2100
  br label %while.cond, !dbg !2101, !llvm.loop !2117

cleanup:                                          ; preds = %if.else, %while.cond
  %retval.0 = phi i8* [ %add.ptr, %if.else ], [ null, %while.cond ], !dbg !2100
  ret i8* %retval.0, !dbg !2119
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: inlinehint nounwind uwtable
define dso_local double @atof(i8* %__nptr) local_unnamed_addr #0 !dbg !2120 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2126, metadata !DIExpression()), !dbg !2127
  %call = tail call double @strtod(i8* %__nptr, i8** null) #6, !dbg !2128
  ret double %call, !dbg !2129
}

declare dso_local double @strtod(i8*, i8**) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoimax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2130 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !2139, metadata !DIExpression()), !dbg !2142
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !2140, metadata !DIExpression()), !dbg !2142
  call void @llvm.dbg.value(metadata i32 %base, metadata !2141, metadata !DIExpression()), !dbg !2142
  %call = tail call i64 @__strtol_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !2143
  ret i64 %call, !dbg !2144
}

declare dso_local i64 @__strtol_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoumax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2145 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !2151, metadata !DIExpression()), !dbg !2154
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !2152, metadata !DIExpression()), !dbg !2154
  call void @llvm.dbg.value(metadata i32 %base, metadata !2153, metadata !DIExpression()), !dbg !2154
  %call = tail call i64 @__strtoul_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !2155
  ret i64 %call, !dbg !2156
}

declare dso_local i64 @__strtoul_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoimax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2157 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !2168, metadata !DIExpression()), !dbg !2171
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !2169, metadata !DIExpression()), !dbg !2171
  call void @llvm.dbg.value(metadata i32 %base, metadata !2170, metadata !DIExpression()), !dbg !2171
  %call = tail call i64 @__wcstol_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !2172
  ret i64 %call, !dbg !2173
}

declare dso_local i64 @__wcstol_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoumax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2174 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !2178, metadata !DIExpression()), !dbg !2181
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !2179, metadata !DIExpression()), !dbg !2181
  call void @llvm.dbg.value(metadata i32 %base, metadata !2180, metadata !DIExpression()), !dbg !2181
  %call = tail call i64 @__wcstoul_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !2182
  ret i64 %call, !dbg !2183
}

declare dso_local i64 @__wcstoul_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2184 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2224, metadata !DIExpression()), !dbg !2226
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2225, metadata !DIExpression()), !dbg !2226
  %call = tail call i32 @__xstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !2227
  ret i32 %call, !dbg !2228
}

declare dso_local i32 @__xstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2229 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2231, metadata !DIExpression()), !dbg !2233
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2232, metadata !DIExpression()), !dbg !2233
  %call = tail call i32 @__lxstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !2234
  ret i32 %call, !dbg !2235
}

declare dso_local i32 @__lxstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat(i32 %__fd, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2236 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2240, metadata !DIExpression()), !dbg !2242
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2241, metadata !DIExpression()), !dbg !2242
  %call = tail call i32 @__fxstat(i32 1, i32 %__fd, %struct.stat* %__statbuf) #6, !dbg !2243
  ret i32 %call, !dbg !2244
}

declare dso_local i32 @__fxstat(i32, i32, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat(i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2245 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2249, metadata !DIExpression()), !dbg !2253
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2250, metadata !DIExpression()), !dbg !2253
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2251, metadata !DIExpression()), !dbg !2253
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2252, metadata !DIExpression()), !dbg !2253
  %call = tail call i32 @__fxstatat(i32 1, i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) #6, !dbg !2254
  ret i32 %call, !dbg !2255
}

declare dso_local i32 @__fxstatat(i32, i32, i8*, %struct.stat*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknod(i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2256 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2260, metadata !DIExpression()), !dbg !2263
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2261, metadata !DIExpression()), !dbg !2263
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2262, metadata !DIExpression()), !dbg !2263
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2262, metadata !DIExpression(DW_OP_deref)), !dbg !2263
  %call = call i32 @__xmknod(i32 0, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !2264
  ret i32 %call, !dbg !2265
}

declare dso_local i32 @__xmknod(i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknodat(i32 %__fd, i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2266 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2270, metadata !DIExpression()), !dbg !2274
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2271, metadata !DIExpression()), !dbg !2274
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2272, metadata !DIExpression()), !dbg !2274
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2273, metadata !DIExpression()), !dbg !2274
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2273, metadata !DIExpression(DW_OP_deref)), !dbg !2274
  %call = call i32 @__xmknodat(i32 0, i32 %__fd, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !2275
  ret i32 %call, !dbg !2276
}

declare dso_local i32 @__xmknodat(i32, i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2277 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2301, metadata !DIExpression()), !dbg !2303
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2302, metadata !DIExpression()), !dbg !2303
  %call = tail call i32 @__xstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !2304
  ret i32 %call, !dbg !2305
}

declare dso_local i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2306 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2308, metadata !DIExpression()), !dbg !2310
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2309, metadata !DIExpression()), !dbg !2310
  %call = tail call i32 @__lxstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !2311
  ret i32 %call, !dbg !2312
}

declare dso_local i32 @__lxstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat64(i32 %__fd, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2313 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2317, metadata !DIExpression()), !dbg !2319
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2318, metadata !DIExpression()), !dbg !2319
  %call = tail call i32 @__fxstat64(i32 1, i32 %__fd, %struct.stat64* %__statbuf) #6, !dbg !2320
  ret i32 %call, !dbg !2321
}

declare dso_local i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat64(i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2322 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2326, metadata !DIExpression()), !dbg !2330
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2327, metadata !DIExpression()), !dbg !2330
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2328, metadata !DIExpression()), !dbg !2330
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2329, metadata !DIExpression()), !dbg !2330
  %call = tail call i32 @__fxstatat64(i32 1, i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) #6, !dbg !2331
  ret i32 %call, !dbg !2332
}

declare dso_local i32 @__fxstatat64(i32, i32, i8*, %struct.stat64*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @expand_simple_operations(%union.tree_node* %expr) local_unnamed_addr #5 !dbg !2333 {
entry:
  br label %tailrecurse, !dbg !2350

tailrecurse:                                      ; preds = %tailrecurse.backedge, %entry
  %expr.tr = phi %union.tree_node* [ %expr, %entry ], [ %expr.tr.be, %tailrecurse.backedge ]
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.tr, metadata !2337, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !2340, metadata !DIExpression()), !dbg !2354
  %cmp = icmp eq %union.tree_node* %expr.tr, null, !dbg !2355
  br i1 %cmp, label %cleanup90.loopexit, label %if.end, !dbg !2357

if.end:                                           ; preds = %tailrecurse
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %expr.tr) #6, !dbg !2358
  %tobool = icmp eq i8 %call, 0, !dbg !2358
  br i1 %tobool, label %if.end2, label %cleanup90.loopexit, !dbg !2360

if.end2:                                          ; preds = %if.end
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2361
  %bf.load = load i64, i64* %0, align 8, !dbg !2361
  %bf.cast = and i64 %bf.load, 65535, !dbg !2361
  call void @llvm.dbg.value(metadata i64 %bf.cast, metadata !2344, metadata !DIExpression()), !dbg !2354
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !2362
  %1 = load i32, i32* %arrayidx, align 4, !dbg !2362
  %cmp3 = icmp ugt i32 %1, 3, !dbg !2362
  br i1 %cmp3, label %land.lhs.true, label %if.end28, !dbg !2362

land.lhs.true:                                    ; preds = %if.end2
  %cmp6 = icmp ult i32 %1, 11, !dbg !2362
  br i1 %cmp6, label %if.then7, label %if.end28, !dbg !2364

if.then7:                                         ; preds = %land.lhs.true
  %expr.tr.lcssa7 = phi %union.tree_node* [ %expr.tr, %land.lhs.true ]
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.tr.lcssa7, metadata !2337, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.tr.lcssa7, metadata !2337, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.tr.lcssa7, metadata !2337, metadata !DIExpression()), !dbg !2354
  %call8 = tail call fastcc i32 @tree_operand_length(%union.tree_node* nonnull %expr.tr.lcssa7) #7, !dbg !2365
  call void @llvm.dbg.value(metadata i32 %call8, metadata !2339, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata i32 0, metadata !2338, metadata !DIExpression()), !dbg !2354
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %expr.tr.lcssa7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !2367
  %wide.trip.count = zext i32 %call8 to i64, !dbg !2371
  br label %for.cond, !dbg !2372

for.cond:                                         ; preds = %for.inc, %if.then7
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %if.then7 ], !dbg !2373
  %ret.0 = phi %union.tree_node* [ %ret.2, %for.inc ], [ null, %if.then7 ], !dbg !2373
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !2338, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0, metadata !2340, metadata !DIExpression()), !dbg !2354
  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count, !dbg !2371
  br i1 %exitcond, label %for.end, label %for.body, !dbg !2374

for.body:                                         ; preds = %for.cond
  %arrayidx11 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 %indvars.iv, !dbg !2375
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !2375
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !2341, metadata !DIExpression()), !dbg !2354
  %call12 = tail call %union.tree_node* @expand_simple_operations(%union.tree_node* %2) #7, !dbg !2376
  call void @llvm.dbg.value(metadata %union.tree_node* %call12, metadata !2342, metadata !DIExpression()), !dbg !2354
  %cmp13 = icmp eq %union.tree_node* %2, %call12, !dbg !2377
  br i1 %cmp13, label %for.inc, label %if.end15, !dbg !2379

if.end15:                                         ; preds = %for.body
  %tobool16 = icmp eq %union.tree_node* %ret.0, null, !dbg !2380
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !2382

if.then17:                                        ; preds = %if.end15
  %call18 = tail call %union.tree_node* @copy_node_stat(%union.tree_node* nonnull %expr.tr.lcssa7) #6, !dbg !2383
  call void @llvm.dbg.value(metadata %union.tree_node* %call18, metadata !2340, metadata !DIExpression()), !dbg !2354
  br label %if.end19, !dbg !2384

if.end19:                                         ; preds = %if.end15, %if.then17
  %ret.1 = phi %union.tree_node* [ %ret.0, %if.end15 ], [ %call18, %if.then17 ], !dbg !2354
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.1, metadata !2340, metadata !DIExpression()), !dbg !2354
  %operands21 = getelementptr inbounds %union.tree_node, %union.tree_node* %ret.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !2385
  %arrayidx23 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands21, i64 %indvars.iv, !dbg !2385
  store %union.tree_node* %call12, %union.tree_node** %arrayidx23, align 8, !dbg !2386
  br label %for.inc, !dbg !2387

for.inc:                                          ; preds = %for.body, %if.end19
  %ret.2 = phi %union.tree_node* [ %ret.1, %if.end19 ], [ %ret.0, %for.body ], !dbg !2373
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.2, metadata !2340, metadata !DIExpression()), !dbg !2354
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !2388
  br label %for.cond, !dbg !2389, !llvm.loop !2390

for.end:                                          ; preds = %for.cond
  %ret.0.lcssa = phi %union.tree_node* [ %ret.0, %for.cond ], !dbg !2373
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0.lcssa, metadata !2340, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0.lcssa, metadata !2340, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0.lcssa, metadata !2340, metadata !DIExpression()), !dbg !2354
  %tobool24 = icmp eq %union.tree_node* %ret.0.lcssa, null, !dbg !2392
  br i1 %tobool24, label %cleanup90, label %if.end26, !dbg !2394

if.end26:                                         ; preds = %for.end
  tail call void @fold_defer_overflow_warnings() #6, !dbg !2395
  %call27 = tail call %union.tree_node* @fold(%union.tree_node* nonnull %ret.0.lcssa) #6, !dbg !2396
  call void @llvm.dbg.value(metadata %union.tree_node* %call27, metadata !2340, metadata !DIExpression()), !dbg !2354
  tail call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !2397
  br label %cleanup90, !dbg !2398

if.end28:                                         ; preds = %land.lhs.true, %if.end2
  %bf.cast321 = and i64 %bf.load, 65535, !dbg !2399
  %cmp33 = icmp eq i64 %bf.cast321, 141, !dbg !2399
  br i1 %cmp33, label %if.end35, label %cleanup90.loopexit, !dbg !2401

if.end35:                                         ; preds = %if.end28
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %expr.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !2402
  %3 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !2402
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %3, align 8, !dbg !2402
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %4, metadata !2345, metadata !DIExpression()), !dbg !2354
  %call36 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %4) #7, !dbg !2403
  %cmp37 = icmp eq i32 %call36, 16, !dbg !2404
  br i1 %cmp37, label %if.then38, label %if.end59, !dbg !2405

if.then38:                                        ; preds = %if.end35
  %call39 = tail call fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %4) #7, !dbg !2406
  %cmp40 = icmp eq i32 %call39, 1, !dbg !2408
  br i1 %cmp40, label %if.end42, label %cleanup90.loopexit, !dbg !2409

if.end42:                                         ; preds = %if.then38
  %call43 = tail call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %4, i32 0) #7, !dbg !2410
  %call44 = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call43) #7, !dbg !2410
  call void @llvm.dbg.value(metadata %union.tree_node* %call44, metadata !2341, metadata !DIExpression()), !dbg !2354
  %call45 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %4) #7, !dbg !2411
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call45, metadata !2349, metadata !DIExpression()), !dbg !2412
  %call46 = tail call fastcc %struct.basic_block_def* @single_pred(%struct.basic_block_def* %call45) #7, !dbg !2413
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call46, metadata !2346, metadata !DIExpression()), !dbg !2412
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %call44, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2414
  %bf.load48 = load i64, i64* %5, align 8, !dbg !2414
  %bf.cast502 = and i64 %bf.load48, 65535, !dbg !2416
  %cmp51 = icmp eq i64 %bf.cast502, 141, !dbg !2416
  br i1 %cmp51, label %land.lhs.true52, label %if.end56, !dbg !2417

land.lhs.true52:                                  ; preds = %if.end42
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call46, i64 0, i32 3, !dbg !2418
  %6 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2418
  %loop_father53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call45, i64 0, i32 3, !dbg !2419
  %7 = load %struct.loop*, %struct.loop** %loop_father53, align 8, !dbg !2419
  %cmp54 = icmp eq %struct.loop* %6, %7, !dbg !2420
  br i1 %cmp54, label %if.end56, label %cleanup90.loopexit, !dbg !2421

if.end56:                                         ; preds = %land.lhs.true52, %if.end42
  br label %tailrecurse.backedge, !dbg !2422

if.end59:                                         ; preds = %if.end35
  %call60 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %4) #7, !dbg !2423
  %cmp61 = icmp eq i32 %call60, 6, !dbg !2425
  br i1 %cmp61, label %if.end63, label %cleanup90.loopexit, !dbg !2426

if.end63:                                         ; preds = %if.end59
  %call64 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4) #7, !dbg !2427
  call void @llvm.dbg.value(metadata %union.tree_node* %call64, metadata !2341, metadata !DIExpression()), !dbg !2354
  %call65 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %4) #7, !dbg !2428
  call void @llvm.dbg.value(metadata i32 %call65, metadata !2344, metadata !DIExpression()), !dbg !2354
  %call66 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call65) #7, !dbg !2429
  %cmp67 = icmp eq i32 %call66, 3, !dbg !2430
  br i1 %cmp67, label %if.then68, label %if.end77, !dbg !2431

if.then68:                                        ; preds = %if.end63
  %call69 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call64) #6, !dbg !2432
  %tobool70 = icmp eq i8 %call69, 0, !dbg !2432
  br i1 %tobool70, label %if.end72, label %cleanup90.loopexit, !dbg !2434

if.end72:                                         ; preds = %if.then68
  %cmp73 = icmp eq i32 %call65, 141, !dbg !2435
  br i1 %cmp73, label %if.then74, label %cleanup90.loopexit, !dbg !2436

if.then74:                                        ; preds = %if.end72
  br label %tailrecurse.backedge, !dbg !2350

tailrecurse.backedge:                             ; preds = %if.then74, %if.end56
  %expr.tr.be = phi %union.tree_node* [ %call64, %if.then74 ], [ %call44, %if.end56 ]
  br label %tailrecurse, !dbg !2354

if.end77:                                         ; preds = %if.end63
  %expr.tr.lcssa8 = phi %union.tree_node* [ %expr.tr, %if.end63 ]
  %call64.lcssa = phi %union.tree_node* [ %call64, %if.end63 ], !dbg !2427
  %call65.lcssa = phi i32 [ %call65, %if.end63 ], !dbg !2428
  %.lcssa = phi %union.gimple_statement_d* [ %4, %if.end63 ], !dbg !2402
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.tr.lcssa8, metadata !2337, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.tr.lcssa8, metadata !2337, metadata !DIExpression()), !dbg !2354
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.tr.lcssa8, metadata !2337, metadata !DIExpression()), !dbg !2354
  switch i32 %call65.lcssa, label %cleanup90 [
    i32 116, label %sw.bb
    i32 113, label %sw.bb
    i32 63, label %sw.bb80
    i32 64, label %sw.bb80
    i32 66, label %sw.bb80
  ], !dbg !2437

sw.bb:                                            ; preds = %if.end77, %if.end77
  %call78 = tail call %union.tree_node* @expand_simple_operations(%union.tree_node* %call64.lcssa) #7, !dbg !2438
  call void @llvm.dbg.value(metadata %union.tree_node* %call78, metadata !2342, metadata !DIExpression()), !dbg !2354
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %expr.tr.lcssa8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2440
  %8 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2440
  %call79 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %call65.lcssa, %union.tree_node* %8, %union.tree_node* %call78) #6, !dbg !2440
  ret %union.tree_node* %call79, !dbg !2441

sw.bb80:                                          ; preds = %if.end77, %if.end77, %if.end77
  %call81 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %.lcssa) #7, !dbg !2442
  call void @llvm.dbg.value(metadata %union.tree_node* %call81, metadata !2343, metadata !DIExpression()), !dbg !2354
  %call82 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call81) #6, !dbg !2443
  %tobool83 = icmp eq i8 %call82, 0, !dbg !2443
  br i1 %tobool83, label %cleanup90, label %if.end85, !dbg !2445

if.end85:                                         ; preds = %sw.bb80
  %call86 = tail call %union.tree_node* @expand_simple_operations(%union.tree_node* %call64.lcssa) #7, !dbg !2446
  call void @llvm.dbg.value(metadata %union.tree_node* %call86, metadata !2342, metadata !DIExpression()), !dbg !2354
  %type88 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr.tr.lcssa8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2447
  %9 = load %union.tree_node*, %union.tree_node** %type88, align 8, !dbg !2447
  %call89 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %call65.lcssa, %union.tree_node* %9, %union.tree_node* %call86, %union.tree_node* %call81) #6, !dbg !2447
  ret %union.tree_node* %call89, !dbg !2441

cleanup90.loopexit:                               ; preds = %tailrecurse, %if.end72, %if.end, %if.end28, %if.end59, %if.then68, %if.then38, %land.lhs.true52
  %retval.1.ph = phi %union.tree_node* [ %expr.tr, %if.end72 ], [ %call64, %if.then68 ], [ %expr.tr, %if.end59 ], [ %expr.tr, %land.lhs.true52 ], [ %expr.tr, %if.then38 ], [ %expr.tr, %if.end28 ], [ %expr.tr, %if.end ], [ null, %tailrecurse ]
  br label %cleanup90, !dbg !2441

cleanup90:                                        ; preds = %cleanup90.loopexit, %for.end, %sw.bb80, %if.end77, %if.end26
  %retval.1 = phi %union.tree_node* [ %call27, %if.end26 ], [ %expr.tr.lcssa7, %for.end ], [ %expr.tr.lcssa8, %sw.bb80 ], [ %expr.tr.lcssa8, %if.end77 ], [ %retval.1.ph, %cleanup90.loopexit ], !dbg !2354
  ret %union.tree_node* %retval.1, !dbg !2441
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @tree_operand_length(%union.tree_node* %node) unnamed_addr #0 !dbg !2448 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %node, metadata !2453, metadata !DIExpression()), !dbg !2454
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %node, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2455
  %bf.load = load i64, i64* %0, align 8, !dbg !2455
  %bf.cast = and i64 %bf.load, 65535, !dbg !2455
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !2455
  %1 = load i32, i32* %arrayidx, align 4, !dbg !2455
  %cmp = icmp eq i32 %1, 9, !dbg !2455
  br i1 %cmp, label %if.then, label %if.else, !dbg !2457

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %node, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !2458
  %2 = bitcast %union.tree_node** %operands to %struct.tree_int_cst**, !dbg !2458
  %3 = load %struct.tree_int_cst*, %struct.tree_int_cst** %2, align 8, !dbg !2458
  %low = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %3, i64 0, i32 1, i32 0, !dbg !2458
  %4 = load i64, i64* %low, align 8, !dbg !2458
  %conv = trunc i64 %4 to i32, !dbg !2458
  br label %return, !dbg !2459

if.else:                                          ; preds = %entry
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %bf.cast, !dbg !2460
  %5 = load i8, i8* %arrayidx8, align 1, !dbg !2460
  %conv9 = zext i8 %5 to i32, !dbg !2460
  br label %return, !dbg !2461

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %conv, %if.then ], [ %conv9, %if.else ], !dbg !2462
  ret i32 %retval.0, !dbg !2463
}

declare dso_local %union.tree_node* @copy_node_stat(%union.tree_node*) local_unnamed_addr #2

declare dso_local void @fold_defer_overflow_warnings() local_unnamed_addr #2

declare dso_local %union.tree_node* @fold(%union.tree_node*) local_unnamed_addr #2

declare dso_local void @fold_undefer_and_ignore_overflow_warnings() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_code(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !2464 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !2469, metadata !DIExpression()), !dbg !2470
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 0, !dbg !2471
  %bf.load = load i32, i32* %0, align 8, !dbg !2471
  %bf.clear = and i32 %bf.load, 255, !dbg !2471
  ret i32 %bf.clear, !dbg !2472
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !2473 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2477, metadata !DIExpression()), !dbg !2478
  %nargs = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 2, !dbg !2479
  %0 = load i32, i32* %nargs, align 4, !dbg !2479
  ret i32 %0, !dbg !2480
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) unnamed_addr #0 !dbg !2481 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use, metadata !2489, metadata !DIExpression()), !dbg !2490
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use, i64 0, i32 3, !dbg !2491
  %0 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !2491
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !2492
  ret %union.tree_node* %1, !dbg !2493
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !2494 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2498, metadata !DIExpression()), !dbg !2500
  call void @llvm.dbg.value(metadata i32 %i, metadata !2499, metadata !DIExpression()), !dbg !2500
  %call = tail call fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %i) #7, !dbg !2501
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i64 0, i32 0, !dbg !2502
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !2503
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !2504 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !2508, metadata !DIExpression()), !dbg !2509
  %bb = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 4, !dbg !2510
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2510
  ret %struct.basic_block_def* %0, !dbg !2511
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @single_pred(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !2512 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !2519, metadata !DIExpression()), !dbg !2520
  %call = tail call fastcc %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #7, !dbg !2521
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i64 0, i32 0, !dbg !2522
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2522
  ret %struct.basic_block_def* %0, !dbg !2523
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !2524 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2528, metadata !DIExpression()), !dbg !2529
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #7, !dbg !2530
  ret %union.tree_node* %call, !dbg !2531
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !2532 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2536, metadata !DIExpression()), !dbg !2538
  %call = tail call fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %gs) #7, !dbg !2539
  call void @llvm.dbg.value(metadata i32 %call, metadata !2537, metadata !DIExpression()), !dbg !2538
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #7, !dbg !2540
  %cmp = icmp eq i32 %call1, 3, !dbg !2542
  br i1 %cmp, label %if.then, label %if.end, !dbg !2543

if.then:                                          ; preds = %entry
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #7, !dbg !2544
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2544
  %bf.load = load i64, i64* %0, align 8, !dbg !2544
  %1 = trunc i64 %bf.load to i32, !dbg !2544
  %bf.cast = and i32 %1, 65535, !dbg !2544
  call void @llvm.dbg.value(metadata i32 %bf.cast, metadata !2537, metadata !DIExpression()), !dbg !2538
  br label %if.end, !dbg !2545

if.end:                                           ; preds = %if.then, %entry
  %code.0 = phi i32 [ %bf.cast, %if.then ], [ %call, %entry ], !dbg !2538
  call void @llvm.dbg.value(metadata i32 %code.0, metadata !2537, metadata !DIExpression()), !dbg !2538
  ret i32 %code.0, !dbg !2546
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @get_gimple_rhs_class(i32 %code) unnamed_addr #0 !dbg !2547 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !2551, metadata !DIExpression()), !dbg !2552
  %idxprom = sext i32 %code to i64, !dbg !2553
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !2553
  %0 = load i8, i8* %arrayidx, align 1, !dbg !2553
  %conv = zext i8 %0 to i32, !dbg !2554
  ret i32 %conv, !dbg !2555
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !2556 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2558, metadata !DIExpression()), !dbg !2559
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !2560
  %cmp = icmp ugt i32 %call, 2, !dbg !2562
  br i1 %cmp, label %if.then, label %return, !dbg !2563

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 2) #7, !dbg !2564
  br label %return, !dbg !2565

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %call1, %if.then ], [ null, %entry ], !dbg !2566
  ret %union.tree_node* %retval.0, !dbg !2567
}

declare dso_local %union.tree_node* @fold_build2_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @loop_only_exit_p(%struct.loop* %loop, %struct.edge_def* %exit) local_unnamed_addr #5 !dbg !2568 {
entry:
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !2577, metadata !DIExpression()), !dbg !2590
  call void @llvm.dbg.value(metadata %struct.edge_def* %exit, metadata !2578, metadata !DIExpression()), !dbg !2590
  %0 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !2591
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !2591
  %call1 = tail call %struct.edge_def* @single_exit(%struct.loop* %loop) #6, !dbg !2592
  %cmp = icmp eq %struct.edge_def* %call1, %exit, !dbg !2594
  br i1 %cmp, label %if.end, label %cleanup, !dbg !2595

if.end:                                           ; preds = %entry
  %call2 = tail call %struct.basic_block_def** @get_loop_body(%struct.loop* %loop) #6, !dbg !2596
  call void @llvm.dbg.value(metadata %struct.basic_block_def** %call2, metadata !2579, metadata !DIExpression()), !dbg !2590
  call void @llvm.dbg.value(metadata i32 0, metadata !2588, metadata !DIExpression()), !dbg !2590
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 6, !dbg !2597
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2600
  br label %for.cond, !dbg !2603

for.cond:                                         ; preds = %for.inc16, %if.end
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc16 ], [ 0, %if.end ], !dbg !2604
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !2588, metadata !DIExpression()), !dbg !2590
  %2 = load i32, i32* %num_nodes, align 4, !dbg !2605
  %3 = zext i32 %2 to i64, !dbg !2606
  %cmp3 = icmp ult i64 %indvars.iv, %3, !dbg !2606
  br i1 %cmp3, label %for.body, label %for.end17, !dbg !2607

for.body:                                         ; preds = %for.cond
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !2608
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %call2, i64 %indvars.iv, !dbg !2609
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2609
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %4) #7, !dbg !2608
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !2608
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !2608
  br label %for.cond4, !dbg !2610

for.cond4:                                        ; preds = %for.inc, %for.body
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !2581, metadata !DIExpression(DW_OP_deref)), !dbg !2590
  %call5 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !2611
  %tobool = icmp eq i8 %call5, 0, !dbg !2613
  br i1 %tobool, label %for.body6, label %for.inc16, !dbg !2614

for.body6:                                        ; preds = %for.cond4
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !2581, metadata !DIExpression(DW_OP_deref)), !dbg !2590
  %call7 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !2615
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call7, metadata !2589, metadata !DIExpression()), !dbg !2590
  %call8 = call fastcc i32 @gimple_code(%union.gimple_statement_d* %call7) #7, !dbg !2617
  %cmp9 = icmp eq i32 %call8, 8, !dbg !2619
  br i1 %cmp9, label %if.end11, label %for.inc, !dbg !2620

if.end11:                                         ; preds = %for.body6
  %call12 = call zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %call7) #6, !dbg !2621
  %tobool13 = icmp eq i8 %call12, 0, !dbg !2621
  br i1 %tobool13, label %for.inc, label %if.then14, !dbg !2623

if.then14:                                        ; preds = %if.end11
  %5 = bitcast %struct.basic_block_def** %call2 to i8*, !dbg !2624
  call void @free(i8* %5) #6, !dbg !2626
  br label %cleanup, !dbg !2627

for.inc:                                          ; preds = %if.end11, %for.body6
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !2581, metadata !DIExpression(DW_OP_deref)), !dbg !2590
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %bsi) #7, !dbg !2628
  br label %for.cond4, !dbg !2629, !llvm.loop !2630

for.inc16:                                        ; preds = %for.cond4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !2632
  br label %for.cond, !dbg !2633, !llvm.loop !2634

for.end17:                                        ; preds = %for.cond
  %6 = bitcast %struct.basic_block_def** %call2 to i8*, !dbg !2636
  call void @free(i8* %6) #6, !dbg !2637
  br label %cleanup, !dbg !2638

cleanup:                                          ; preds = %entry, %for.end17, %if.then14
  %retval.0 = phi i8 [ 0, %if.then14 ], [ 1, %for.end17 ], [ 0, %entry ], !dbg !2590
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !2639
  ret i8 %retval.0, !dbg !2639
}

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) local_unnamed_addr #2

declare dso_local %struct.basic_block_def** @get_loop_body(%struct.loop*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) unnamed_addr #0 !dbg !2640 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !2644, metadata !DIExpression()), !dbg !2647
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !2645, metadata !DIExpression()), !dbg !2648
  %call = tail call fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #7, !dbg !2649
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !2646, metadata !DIExpression()), !dbg !2647
  %call1 = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %call) #7, !dbg !2650
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !2651
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2652
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !2653
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq2, align 8, !dbg !2654
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !2655
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb3, align 8, !dbg !2656
  ret void, !dbg !2657
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !2658 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !2662, metadata !DIExpression()), !dbg !2663
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !2664
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2664
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !2665
  %conv1 = zext i1 %cmp to i8, !dbg !2666
  ret i8 %conv1, !dbg !2667
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !2668 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !2672, metadata !DIExpression()), !dbg !2673
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !2674
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2674
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 0, !dbg !2675
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2675
  ret %union.gimple_statement_d* %1, !dbg !2676
}

declare dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @free(i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_next(%struct.gimple_stmt_iterator* %i) unnamed_addr #0 !dbg !2677 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !2682, metadata !DIExpression()), !dbg !2683
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !2684
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !2684
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 2, !dbg !2685
  %1 = bitcast %struct.gimple_seq_node_d** %next to i64*, !dbg !2685
  %2 = load i64, i64* %1, align 8, !dbg !2685
  %3 = bitcast %struct.gimple_stmt_iterator* %i to i64*, !dbg !2686
  store i64 %2, i64* %3, align 8, !dbg !2686
  ret void, !dbg !2687
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @number_of_iterations_exit(%struct.loop* %loop, %struct.edge_def* %exit, %struct.tree_niter_desc* %niter, i8 zeroext %warn) local_unnamed_addr #5 !dbg !2688 {
entry:
  %iv0 = alloca %struct.affine_iv, align 8
  %iv1 = alloca %struct.affine_iv, align 8
  %tmp = alloca %struct.expanded_location, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !2708, metadata !DIExpression()), !dbg !2723
  call void @llvm.dbg.value(metadata %struct.edge_def* %exit, metadata !2709, metadata !DIExpression()), !dbg !2723
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %niter, metadata !2710, metadata !DIExpression()), !dbg !2723
  call void @llvm.dbg.value(metadata i8 %warn, metadata !2711, metadata !DIExpression()), !dbg !2723
  %0 = bitcast %struct.affine_iv* %iv0 to i8*, !dbg !2724
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !2724
  %1 = bitcast %struct.affine_iv* %iv1 to i8*, !dbg !2724
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !2724
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 3, !dbg !2725
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !2725
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %exit, i64 0, i32 0, !dbg !2727
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2727
  %call = tail call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %2, %struct.basic_block_def* %3) #6, !dbg !2728
  %tobool = icmp eq i8 %call, 0, !dbg !2728
  br i1 %tobool, label %cleanup, label %if.end, !dbg !2729

if.end:                                           ; preds = %entry
  %4 = load i64, i64* bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25) to i64*), align 8, !dbg !2730
  %5 = bitcast %struct.tree_niter_desc* %niter to i64*, !dbg !2731
  store i64 %4, i64* %5, align 8, !dbg !2731
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2732
  %call2 = tail call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %6) #6, !dbg !2733
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call2, metadata !2712, metadata !DIExpression()), !dbg !2723
  %tobool3 = icmp eq %union.gimple_statement_d* %call2, null, !dbg !2734
  br i1 %tobool3, label %cleanup, label %lor.lhs.false, !dbg !2736

lor.lhs.false:                                    ; preds = %if.end
  %call4 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* nonnull %call2) #7, !dbg !2737
  %cmp = icmp eq i32 %call4, 1, !dbg !2738
  br i1 %cmp, label %if.end6, label %cleanup, !dbg !2739

if.end6:                                          ; preds = %lor.lhs.false
  %call7 = tail call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* nonnull %call2) #7, !dbg !2740
  call void @llvm.dbg.value(metadata i32 %call7, metadata !2716, metadata !DIExpression()), !dbg !2723
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %exit, i64 0, i32 7, !dbg !2741
  %7 = load i32, i32* %flags, align 8, !dbg !2741
  %and = and i32 %7, 1024, !dbg !2743
  %tobool8 = icmp eq i32 %and, 0, !dbg !2743
  br i1 %tobool8, label %if.end11, label %if.then9, !dbg !2744

if.then9:                                         ; preds = %if.end6
  %call10 = tail call i32 @invert_tree_comparison(i32 %call7, i8 zeroext 0) #6, !dbg !2745
  call void @llvm.dbg.value(metadata i32 %call10, metadata !2716, metadata !DIExpression()), !dbg !2723
  br label %if.end11, !dbg !2746

if.end11:                                         ; preds = %if.end6, %if.then9
  %code.0 = phi i32 [ %call10, %if.then9 ], [ %call7, %if.end6 ], !dbg !2723
  call void @llvm.dbg.value(metadata i32 %code.0, metadata !2716, metadata !DIExpression()), !dbg !2723
  switch i32 %code.0, label %cleanup [
    i32 99, label %sw.epilog
    i32 100, label %sw.epilog
    i32 102, label %sw.epilog
    i32 97, label %sw.epilog
    i32 98, label %sw.epilog
  ], !dbg !2747

sw.epilog:                                        ; preds = %if.end11, %if.end11, %if.end11, %if.end11, %if.end11
  %call12 = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* nonnull %call2) #7, !dbg !2748
  call void @llvm.dbg.value(metadata %union.tree_node* %call12, metadata !2714, metadata !DIExpression()), !dbg !2723
  %call13 = tail call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* nonnull %call2) #7, !dbg !2749
  call void @llvm.dbg.value(metadata %union.tree_node* %call13, metadata !2715, metadata !DIExpression()), !dbg !2723
  %type14 = getelementptr inbounds %union.tree_node, %union.tree_node* %call12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2750
  %8 = load %union.tree_node*, %union.tree_node** %type14, align 8, !dbg !2750
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !2713, metadata !DIExpression()), !dbg !2723
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2751
  %bf.load = load i64, i64* %9, align 8, !dbg !2751
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2753
  %cmp15 = icmp eq i64 %bf.cast1, 8, !dbg !2753
  br i1 %cmp15, label %if.end28, label %land.lhs.true, !dbg !2754

land.lhs.true:                                    ; preds = %sw.epilog
  %cmp20 = icmp eq i64 %bf.cast1, 10, !dbg !2755
  br i1 %cmp20, label %if.end28, label %lor.lhs.false21, !dbg !2755

lor.lhs.false21:                                  ; preds = %land.lhs.true
  %cmp26 = icmp eq i64 %bf.cast1, 12, !dbg !2755
  br i1 %cmp26, label %if.end28, label %cleanup, !dbg !2756

if.end28:                                         ; preds = %sw.epilog, %lor.lhs.false21, %land.lhs.true
  %call29 = tail call fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* nonnull %call2) #7, !dbg !2757
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0, metadata !2717, metadata !DIExpression(DW_OP_deref)), !dbg !2723
  %call30 = call zeroext i8 @simple_iv(%struct.loop* %loop, %struct.loop* %call29, %union.tree_node* %call12, %struct.affine_iv* nonnull %iv0, i8 zeroext 0) #6, !dbg !2759
  %tobool31 = icmp eq i8 %call30, 0, !dbg !2759
  br i1 %tobool31, label %cleanup, label %if.end33, !dbg !2760

if.end33:                                         ; preds = %if.end28
  %call34 = call fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* nonnull %call2) #7, !dbg !2761
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1, metadata !2718, metadata !DIExpression(DW_OP_deref)), !dbg !2723
  %call35 = call zeroext i8 @simple_iv(%struct.loop* %loop, %struct.loop* %call34, %union.tree_node* %call13, %struct.affine_iv* nonnull %iv1, i8 zeroext 0) #6, !dbg !2763
  %tobool36 = icmp eq i8 %call35, 0, !dbg !2763
  br i1 %tobool36, label %cleanup, label %if.end38, !dbg !2764

if.end38:                                         ; preds = %if.end33
  call void @fold_defer_overflow_warnings() #6, !dbg !2765
  %base39 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !2766
  %10 = load %union.tree_node*, %union.tree_node** %base39, align 8, !dbg !2766
  %call40 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %10) #7, !dbg !2767
  store %union.tree_node* %call40, %union.tree_node** %base39, align 8, !dbg !2768
  %base42 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !2769
  %11 = load %union.tree_node*, %union.tree_node** %base42, align 8, !dbg !2769
  %call43 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %11) #7, !dbg !2770
  store %union.tree_node* %call43, %union.tree_node** %base42, align 8, !dbg !2771
  %call45 = call zeroext i8 @loop_only_exit_p(%struct.loop* %loop, %struct.edge_def* %exit) #7, !dbg !2772
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0, metadata !2717, metadata !DIExpression(DW_OP_deref)), !dbg !2723
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1, metadata !2718, metadata !DIExpression(DW_OP_deref)), !dbg !2723
  %call46 = call fastcc zeroext i8 @number_of_iterations_cond(%struct.loop* %loop, %union.tree_node* %8, %struct.affine_iv* nonnull %iv0, i32 %code.0, %struct.affine_iv* nonnull %iv1, %struct.tree_niter_desc* %niter, i8 zeroext %call45) #7, !dbg !2774
  %tobool47 = icmp eq i8 %call46, 0, !dbg !2774
  br i1 %tobool47, label %if.then48, label %if.end49, !dbg !2775

if.then48:                                        ; preds = %if.end38
  call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !2776
  br label %cleanup, !dbg !2778

if.end49:                                         ; preds = %if.end38
  %12 = load i32, i32* @optimize, align 4, !dbg !2779
  %cmp50 = icmp sgt i32 %12, 2, !dbg !2781
  br i1 %cmp50, label %if.then51, label %if.end60, !dbg !2782

if.then51:                                        ; preds = %if.end49
  %assumptions52 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 0, !dbg !2783
  %13 = load %union.tree_node*, %union.tree_node** %assumptions52, align 8, !dbg !2783
  %call53 = call fastcc %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %loop, %union.tree_node* %13) #7, !dbg !2785
  store %union.tree_node* %call53, %union.tree_node** %assumptions52, align 8, !dbg !2786
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 1, !dbg !2787
  %14 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !2787
  %call55 = call fastcc %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %loop, %union.tree_node* %14) #7, !dbg !2788
  store %union.tree_node* %call55, %union.tree_node** %may_be_zero, align 8, !dbg !2789
  %niter57 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 2, !dbg !2790
  %15 = load %union.tree_node*, %union.tree_node** %niter57, align 8, !dbg !2790
  %call58 = call fastcc %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %loop, %union.tree_node* %15) #7, !dbg !2791
  store %union.tree_node* %call58, %union.tree_node** %niter57, align 8, !dbg !2792
  br label %if.end60, !dbg !2793

if.end60:                                         ; preds = %if.then51, %if.end49
  %assumptions61 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 0, !dbg !2794
  %16 = load %union.tree_node*, %union.tree_node** %assumptions61, align 8, !dbg !2794
  %call62 = call fastcc %union.tree_node* @simplify_using_initial_conditions(%struct.loop* %loop, %union.tree_node* %16) #7, !dbg !2795
  store %union.tree_node* %call62, %union.tree_node** %assumptions61, align 8, !dbg !2796
  %may_be_zero64 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 1, !dbg !2797
  %17 = load %union.tree_node*, %union.tree_node** %may_be_zero64, align 8, !dbg !2797
  %call65 = call fastcc %union.tree_node* @simplify_using_initial_conditions(%struct.loop* %loop, %union.tree_node* %17) #7, !dbg !2798
  store %union.tree_node* %call65, %union.tree_node** %may_be_zero64, align 8, !dbg !2799
  call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !2800
  %18 = load %union.tree_node*, %union.tree_node** %assumptions61, align 8, !dbg !2801
  %call68 = call i32 @integer_onep(%union.tree_node* %18) #6, !dbg !2803
  %tobool69 = icmp eq i32 %call68, 0, !dbg !2803
  br i1 %tobool69, label %if.end71, label %cleanup, !dbg !2804

if.end71:                                         ; preds = %if.end60
  %19 = load %union.tree_node*, %union.tree_node** %assumptions61, align 8, !dbg !2805
  %call73 = call i32 @integer_zerop(%union.tree_node* %19) #6, !dbg !2807
  %tobool74 = icmp eq i32 %call73, 0, !dbg !2807
  br i1 %tobool74, label %if.end76, label %cleanup, !dbg !2808

if.end76:                                         ; preds = %if.end71
  %20 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !2809
  %tobool77 = icmp eq i32 %20, 0, !dbg !2809
  br i1 %tobool77, label %if.end80, label %if.then78, !dbg !2811

if.then78:                                        ; preds = %if.end76
  %21 = load i64, i64* bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26) to i64*), align 16, !dbg !2812
  store i64 %21, i64* %5, align 8, !dbg !2813
  br label %if.end80, !dbg !2814

if.end80:                                         ; preds = %if.end76, %if.then78
  %tobool81 = icmp eq i8 %warn, 0, !dbg !2815
  br i1 %tobool81, label %if.end114, label %if.then82, !dbg !2816

if.then82:                                        ; preds = %if.end80
  %call83 = call fastcc i32 @gimple_location(%union.gimple_statement_d* nonnull %call2) #7, !dbg !2817
  call void @llvm.dbg.value(metadata i32 %call83, metadata !2722, metadata !DIExpression()), !dbg !2818
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 1, !dbg !2819
  %22 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !2819
  %call84 = call i32 @integer_zerop(%union.tree_node* %22) #6, !dbg !2821
  %tobool85 = icmp eq i32 %call84, 0, !dbg !2821
  %step97 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 1, !dbg !2822
  %23 = load %union.tree_node*, %union.tree_node** %step97, align 8, !dbg !2822
  br i1 %tobool85, label %cond.true, label %cond.false, !dbg !2823

cond.true:                                        ; preds = %if.then82
  %call87 = call i32 @integer_zerop(%union.tree_node* %23) #6, !dbg !2824
  %tobool88 = icmp eq i32 %call87, 0, !dbg !2824
  br i1 %tobool88, label %if.else, label %land.lhs.true89, !dbg !2825

land.lhs.true89:                                  ; preds = %cond.true
  %24 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !2826
  %call91 = call i32 @integer_onep(%union.tree_node* %24) #6, !dbg !2827
  %tobool92 = icmp eq i32 %call91, 0, !dbg !2827
  br i1 %tobool92, label %lor.lhs.false93, label %if.then104, !dbg !2828

lor.lhs.false93:                                  ; preds = %land.lhs.true89
  %25 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !2829
  %call95 = call i32 @integer_all_onesp(%union.tree_node* %25) #6, !dbg !2830
  %tobool96 = icmp eq i32 %call95, 0, !dbg !2830
  br i1 %tobool96, label %if.else, label %if.then104, !dbg !2831

cond.false:                                       ; preds = %if.then82
  %call98 = call i32 @integer_onep(%union.tree_node* %23) #6, !dbg !2832
  %tobool99 = icmp eq i32 %call98, 0, !dbg !2832
  br i1 %tobool99, label %lor.lhs.false100, label %if.then104, !dbg !2833

lor.lhs.false100:                                 ; preds = %cond.false
  %26 = load %union.tree_node*, %union.tree_node** %step97, align 8, !dbg !2834
  %call102 = call i32 @integer_all_onesp(%union.tree_node* %26) #6, !dbg !2835
  %tobool103 = icmp eq i32 %call102, 0, !dbg !2835
  br i1 %tobool103, label %if.else, label %if.then104, !dbg !2823

if.then104:                                       ; preds = %lor.lhs.false100, %cond.false, %lor.lhs.false93, %land.lhs.true89
  %27 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !2836
  %tobool105 = icmp eq i32 %27, 0, !dbg !2836
  %cond = select i1 %tobool105, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), !dbg !2836
  call void @llvm.dbg.value(metadata i8* %cond, metadata !2719, metadata !DIExpression()), !dbg !2818
  br label %if.end108, !dbg !2837

if.else:                                          ; preds = %lor.lhs.false100, %lor.lhs.false93, %cond.true
  %28 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !2838
  %tobool106 = icmp eq i32 %28, 0, !dbg !2838
  %cond107 = select i1 %tobool106, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0), !dbg !2838
  call void @llvm.dbg.value(metadata i8* %cond107, metadata !2719, metadata !DIExpression()), !dbg !2818
  br label %if.end108

if.end108:                                        ; preds = %if.else, %if.then104
  %wording.0 = phi i8* [ %cond, %if.then104 ], [ %cond107, %if.else ], !dbg !2822
  call void @llvm.dbg.value(metadata i8* %wording.0, metadata !2719, metadata !DIExpression()), !dbg !2818
  call void @expand_location(%struct.expanded_location* nonnull sret %tmp, i32 %call83) #6, !dbg !2839
  %line = getelementptr inbounds %struct.expanded_location, %struct.expanded_location* %tmp, i64 0, i32 1, !dbg !2839
  %29 = load i32, i32* %line, align 8, !dbg !2839
  %cmp109 = icmp sgt i32 %29, 0, !dbg !2840
  %30 = load i32, i32* @input_location, align 4, !dbg !2841
  %cond112 = select i1 %cmp109, i32 %call83, i32 %30, !dbg !2841
  %call113 = call zeroext i8 (i32, i32, i8*, ...) @warning_at(i32 %cond112, i32 216, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %wording.0) #6, !dbg !2842
  br label %if.end114, !dbg !2843

if.end114:                                        ; preds = %if.end80, %if.end108
  %31 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !2844
  %conv = trunc i32 %31 to i8, !dbg !2844
  br label %cleanup, !dbg !2845

cleanup:                                          ; preds = %if.end71, %if.end60, %if.end33, %if.end28, %lor.lhs.false, %if.end, %entry, %lor.lhs.false21, %if.end11, %if.end114, %if.then48
  %retval.0 = phi i8 [ %conv, %if.end114 ], [ 0, %if.then48 ], [ 0, %entry ], [ 0, %lor.lhs.false ], [ 0, %if.end ], [ 0, %if.end11 ], [ 0, %lor.lhs.false21 ], [ 0, %if.end28 ], [ 0, %if.end33 ], [ 1, %if.end60 ], [ 0, %if.end71 ], !dbg !2723
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !2846
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !2846
  ret i8 %retval.0, !dbg !2846
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) local_unnamed_addr #2

declare dso_local %union.gimple_statement_d* @last_stmt(%struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !2847 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2849, metadata !DIExpression()), !dbg !2850
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !2851
  %bf.load = load i32, i32* %0, align 8, !dbg !2851
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !2851
  ret i32 %bf.lshr, !dbg !2852
}

declare dso_local i32 @invert_tree_comparison(i32, i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !2853 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2855, metadata !DIExpression()), !dbg !2856
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !2857
  ret %union.tree_node* %call, !dbg !2858
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !2859 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2861, metadata !DIExpression()), !dbg !2862
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #7, !dbg !2863
  ret %union.tree_node* %call, !dbg !2864
}

declare dso_local zeroext i8 @simple_iv(%struct.loop*, %struct.loop*, %union.tree_node*, %struct.affine_iv*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !2865 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !2869, metadata !DIExpression()), !dbg !2871
  %call = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #7, !dbg !2872
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call, metadata !2870, metadata !DIExpression()), !dbg !2871
  %tobool = icmp eq %struct.basic_block_def* %call, null, !dbg !2873
  br i1 %tobool, label %cleanup, label %if.end, !dbg !2875

if.end:                                           ; preds = %entry
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i64 0, i32 3, !dbg !2876
  %0 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2876
  br label %cleanup, !dbg !2877

cleanup:                                          ; preds = %entry, %if.end
  %retval.0 = phi %struct.loop* [ %0, %if.end ], [ null, %entry ], !dbg !2871
  ret %struct.loop* %retval.0, !dbg !2878
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @number_of_iterations_cond(%struct.loop* %loop, %union.tree_node* %type, %struct.affine_iv* %iv0, i32 %code, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, i8 zeroext %only_exit) unnamed_addr #5 !dbg !2879 {
entry:
  %bnds = alloca %struct.bounds, align 8
  %tmp = alloca %struct.double_int, align 8
  %tmp100 = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !2884, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !2885, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0, metadata !2886, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata i32 %code, metadata !2887, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1, metadata !2888, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %niter, metadata !2889, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata i8 %only_exit, metadata !2890, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata i8 0, metadata !2891, metadata !DIExpression()), !dbg !2914
  %0 = bitcast %struct.bounds* %bnds to i8*, !dbg !2915
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #8, !dbg !2915
  %1 = load i64, i64* bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26) to i64*), align 16, !dbg !2916
  %2 = bitcast %struct.tree_niter_desc* %niter to i64*, !dbg !2917
  store i64 %1, i64* %2, align 8, !dbg !2917
  %3 = load i64, i64* bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25) to i64*), align 8, !dbg !2918
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 1, !dbg !2919
  %4 = bitcast %union.tree_node** %may_be_zero to i64*, !dbg !2920
  store i64 %3, i64* %4, align 8, !dbg !2920
  %niter1 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 2, !dbg !2921
  store %union.tree_node* null, %union.tree_node** %niter1, align 8, !dbg !2922
  %max = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 3, !dbg !2923
  %5 = bitcast %struct.double_int* %tmp to i8*, !dbg !2924
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8, !dbg !2924
  %call = tail call fastcc { i64, i64 } @shwi_to_double_int(i64 0) #7, !dbg !2924
  %6 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 0, !dbg !2924
  %7 = extractvalue { i64, i64 } %call, 0, !dbg !2924
  store i64 %7, i64* %6, align 8, !dbg !2924
  %8 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 1, !dbg !2924
  %9 = extractvalue { i64, i64 } %call, 1, !dbg !2924
  store i64 %9, i64* %8, align 8, !dbg !2924
  %10 = bitcast %struct.double_int* %max to i8*, !dbg !2924
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* nonnull align 8 %5, i64 16, i1 false), !dbg !2924
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8, !dbg !2924
  %bound = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 5, !dbg !2925
  store %union.tree_node* null, %union.tree_node** %bound, align 8, !dbg !2926
  %cmp = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 6, !dbg !2927
  store i32 0, i32* %cmp, align 8, !dbg !2928
  switch i32 %code, label %if.end [
    i32 100, label %do.end
    i32 99, label %do.end
    i32 102, label %land.lhs.true
  ], !dbg !2929

land.lhs.true:                                    ; preds = %entry
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 1, !dbg !2930
  %11 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !2930
  %call6 = tail call i32 @integer_zerop(%union.tree_node* %11) #6, !dbg !2931
  %tobool = icmp eq i32 %call6, 0, !dbg !2931
  br i1 %tobool, label %if.end, label %do.end, !dbg !2932

do.end:                                           ; preds = %land.lhs.true, %entry, %entry
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1, metadata !2886, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0, metadata !2888, metadata !DIExpression()), !dbg !2914
  %call8 = tail call i32 @swap_tree_comparison(i32 %code) #6, !dbg !2933
  call void @llvm.dbg.value(metadata i32 %call8, metadata !2887, metadata !DIExpression()), !dbg !2914
  br label %if.end, !dbg !2934

if.end:                                           ; preds = %land.lhs.true, %entry, %do.end
  %iv1.addr.0 = phi %struct.affine_iv* [ %iv0, %do.end ], [ %iv1, %land.lhs.true ], [ %iv1, %entry ]
  %code.addr.0 = phi i32 [ %call8, %do.end ], [ 102, %land.lhs.true ], [ %code, %entry ]
  %iv0.addr.0 = phi %struct.affine_iv* [ %iv1, %do.end ], [ %iv0, %land.lhs.true ], [ %iv0, %entry ]
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0.addr.0, metadata !2886, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata i32 %code.addr.0, metadata !2887, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1.addr.0, metadata !2888, metadata !DIExpression()), !dbg !2914
  %12 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2935
  %bf.load = load i64, i64* %12, align 8, !dbg !2935
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2935
  %cmp9 = icmp eq i64 %bf.cast1, 10, !dbg !2935
  br i1 %cmp9, label %if.then16, label %lor.lhs.false10, !dbg !2935

lor.lhs.false10:                                  ; preds = %if.end
  %cmp15 = icmp eq i64 %bf.cast1, 12, !dbg !2935
  br i1 %cmp15, label %if.then16, label %if.end18, !dbg !2937

if.then16:                                        ; preds = %lor.lhs.false10, %if.end
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0.addr.0, i64 0, i32 2, !dbg !2938
  store i8 1, i8* %no_overflow, align 8, !dbg !2940
  %no_overflow17 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1.addr.0, i64 0, i32 2, !dbg !2941
  store i8 1, i8* %no_overflow17, align 8, !dbg !2942
  br label %if.end18, !dbg !2943

if.end18:                                         ; preds = %if.then16, %lor.lhs.false10
  %tobool19 = icmp eq i8 %only_exit, 0, !dbg !2944
  br i1 %tobool19, label %if.end38, label %if.then20, !dbg !2946

if.then20:                                        ; preds = %if.end18
  %step21 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0.addr.0, i64 0, i32 1, !dbg !2947
  %13 = load %union.tree_node*, %union.tree_node** %step21, align 8, !dbg !2947
  %call22 = tail call i32 @integer_zerop(%union.tree_node* %13) #6, !dbg !2950
  %tobool23 = icmp eq i32 %call22, 0, !dbg !2950
  br i1 %tobool23, label %land.lhs.true24, label %if.else, !dbg !2951

land.lhs.true24:                                  ; preds = %if.then20
  %no_overflow25 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0.addr.0, i64 0, i32 2, !dbg !2952
  %14 = load i8, i8* %no_overflow25, align 8, !dbg !2952
  %tobool26 = icmp eq i8 %14, 0, !dbg !2953
  br i1 %tobool26, label %if.else, label %if.end38, !dbg !2954

if.else:                                          ; preds = %land.lhs.true24, %if.then20
  %step28 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1.addr.0, i64 0, i32 1, !dbg !2955
  %15 = load %union.tree_node*, %union.tree_node** %step28, align 8, !dbg !2955
  %call29 = tail call i32 @integer_zerop(%union.tree_node* %15) #6, !dbg !2957
  %tobool30 = icmp eq i32 %call29, 0, !dbg !2957
  br i1 %tobool30, label %land.lhs.true31, label %if.end38, !dbg !2958

land.lhs.true31:                                  ; preds = %if.else
  %no_overflow32 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1.addr.0, i64 0, i32 2, !dbg !2959
  %16 = load i8, i8* %no_overflow32, align 8, !dbg !2959
  %tobool34 = icmp ne i8 %16, 0, !dbg !2960
  %spec.select = zext i1 %tobool34 to i8, !dbg !2961
  br label %if.end38, !dbg !2961

if.end38:                                         ; preds = %if.else, %land.lhs.true24, %if.end18, %land.lhs.true31
  %exit_must_be_taken.2 = phi i8 [ 0, %if.end18 ], [ 1, %land.lhs.true24 ], [ 0, %if.else ], [ %spec.select, %land.lhs.true31 ], !dbg !2962
  call void @llvm.dbg.value(metadata i8 %exit_must_be_taken.2, metadata !2891, metadata !DIExpression()), !dbg !2914
  %step39 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0.addr.0, i64 0, i32 1, !dbg !2963
  %17 = load %union.tree_node*, %union.tree_node** %step39, align 8, !dbg !2963
  %call40 = tail call i32 @integer_zerop(%union.tree_node* %17) #6, !dbg !2965
  %tobool41 = icmp eq i32 %call40, 0, !dbg !2965
  br i1 %tobool41, label %land.lhs.true42, label %if.end59, !dbg !2966

land.lhs.true42:                                  ; preds = %if.end38
  %step43 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1.addr.0, i64 0, i32 1, !dbg !2967
  %18 = load %union.tree_node*, %union.tree_node** %step43, align 8, !dbg !2967
  %call44 = tail call i32 @integer_zerop(%union.tree_node* %18) #6, !dbg !2968
  %tobool45 = icmp eq i32 %call44, 0, !dbg !2968
  br i1 %tobool45, label %if.then46, label %if.end59, !dbg !2969

if.then46:                                        ; preds = %land.lhs.true42
  %cmp47 = icmp eq i32 %code.addr.0, 102, !dbg !2970
  br i1 %cmp47, label %if.end50, label %cleanup, !dbg !2973

if.end50:                                         ; preds = %if.then46
  %19 = load %union.tree_node*, %union.tree_node** %step39, align 8, !dbg !2974
  %20 = load %union.tree_node*, %union.tree_node** %step43, align 8, !dbg !2975
  %call53 = tail call %union.tree_node* @fold_binary_to_constant(i32 64, %union.tree_node* %type, %union.tree_node* %19, %union.tree_node* %20) #6, !dbg !2976
  store %union.tree_node* %call53, %union.tree_node** %step39, align 8, !dbg !2977
  %no_overflow55 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0.addr.0, i64 0, i32 2, !dbg !2978
  store i8 0, i8* %no_overflow55, align 8, !dbg !2979
  %call56 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type, i64 0) #6, !dbg !2980
  store %union.tree_node* %call56, %union.tree_node** %step43, align 8, !dbg !2981
  %no_overflow58 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1.addr.0, i64 0, i32 2, !dbg !2982
  store i8 1, i8* %no_overflow58, align 8, !dbg !2983
  br label %if.end59, !dbg !2984

if.end59:                                         ; preds = %land.lhs.true42, %if.end38, %if.end50
  %21 = load %union.tree_node*, %union.tree_node** %step39, align 8, !dbg !2985
  %call61 = tail call i32 @integer_zerop(%union.tree_node* %21) #6, !dbg !2987
  %tobool62 = icmp eq i32 %call61, 0, !dbg !2987
  br i1 %tobool62, label %if.end68, label %land.lhs.true63, !dbg !2988

land.lhs.true63:                                  ; preds = %if.end59
  %step64 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1.addr.0, i64 0, i32 1, !dbg !2989
  %22 = load %union.tree_node*, %union.tree_node** %step64, align 8, !dbg !2989
  %call65 = tail call i32 @integer_zerop(%union.tree_node* %22) #6, !dbg !2990
  %tobool66 = icmp eq i32 %call65, 0, !dbg !2990
  br i1 %tobool66, label %if.end68, label %cleanup, !dbg !2991

if.end68:                                         ; preds = %land.lhs.true63, %if.end59
  %cmp69 = icmp eq i32 %code.addr.0, 102, !dbg !2992
  br i1 %cmp69, label %if.end89, label %if.then71, !dbg !2994

if.then71:                                        ; preds = %if.end68
  %23 = load %union.tree_node*, %union.tree_node** %step39, align 8, !dbg !2995
  %tobool73 = icmp eq %union.tree_node* %23, null, !dbg !2998
  br i1 %tobool73, label %if.end79, label %land.lhs.true74, !dbg !2999

land.lhs.true74:                                  ; preds = %if.then71
  %call76 = tail call i32 @tree_int_cst_sign_bit(%union.tree_node* nonnull %23) #6, !dbg !3000
  %tobool77 = icmp eq i32 %call76, 0, !dbg !3000
  br i1 %tobool77, label %if.end79, label %cleanup, !dbg !3001

if.end79:                                         ; preds = %land.lhs.true74, %if.then71
  %step80 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1.addr.0, i64 0, i32 1, !dbg !3002
  %24 = load %union.tree_node*, %union.tree_node** %step80, align 8, !dbg !3002
  %call81 = tail call i32 @integer_zerop(%union.tree_node* %24) #6, !dbg !3004
  %tobool82 = icmp eq i32 %call81, 0, !dbg !3004
  br i1 %tobool82, label %land.lhs.true83, label %if.end89, !dbg !3005

land.lhs.true83:                                  ; preds = %if.end79
  %25 = load %union.tree_node*, %union.tree_node** %step80, align 8, !dbg !3006
  %call85 = tail call i32 @tree_int_cst_sign_bit(%union.tree_node* %25) #6, !dbg !3007
  %tobool86 = icmp eq i32 %call85, 0, !dbg !3007
  br i1 %tobool86, label %cleanup, label %if.end89, !dbg !3008

if.end89:                                         ; preds = %land.lhs.true83, %if.end79, %if.end68
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3009
  %base90 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0.addr.0, i64 0, i32 0, !dbg !3009
  %27 = load %union.tree_node*, %union.tree_node** %base90, align 8, !dbg !3009
  %base91 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1.addr.0, i64 0, i32 0, !dbg !3009
  %28 = load %union.tree_node*, %union.tree_node** %base91, align 8, !dbg !3009
  %call92 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %code.addr.0, %union.tree_node* %26, %union.tree_node* %27, %union.tree_node* %28) #6, !dbg !3009
  %call93 = tail call i32 @integer_zerop(%union.tree_node* %call92) #6, !dbg !3011
  %tobool94 = icmp eq i32 %call93, 0, !dbg !3011
  br i1 %tobool94, label %if.end102, label %if.then95, !dbg !3012

if.then95:                                        ; preds = %if.end89
  %call96 = tail call %union.tree_node* @unsigned_type_for(%union.tree_node* %type) #6, !dbg !3013
  %call97 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %call96, i64 0) #6, !dbg !3015
  store %union.tree_node* %call97, %union.tree_node** %niter1, align 8, !dbg !3016
  %29 = bitcast %struct.double_int* %tmp100 to i8*, !dbg !3017
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #8, !dbg !3017
  %call101 = tail call fastcc { i64, i64 } @shwi_to_double_int(i64 0) #7, !dbg !3017
  %30 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp100, i64 0, i32 0, !dbg !3017
  %31 = extractvalue { i64, i64 } %call101, 0, !dbg !3017
  store i64 %31, i64* %30, align 8, !dbg !3017
  %32 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp100, i64 0, i32 1, !dbg !3017
  %33 = extractvalue { i64, i64 } %call101, 1, !dbg !3017
  store i64 %33, i64* %32, align 8, !dbg !3017
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %10, i8* nonnull align 8 %29, i64 16, i1 false), !dbg !3017
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #8, !dbg !3017
  br label %cleanup, !dbg !3018

if.end102:                                        ; preds = %if.end89
  %34 = load %union.tree_node*, %union.tree_node** %base91, align 8, !dbg !3019
  %35 = load %union.tree_node*, %union.tree_node** %base90, align 8, !dbg !3020
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !2893, metadata !DIExpression(DW_OP_deref)), !dbg !2914
  call fastcc void @bound_difference(%struct.loop* %loop, %union.tree_node* %34, %union.tree_node* %35, %struct.bounds* nonnull %bnds) #7, !dbg !3021
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3022
  %tobool105 = icmp eq %struct._IO_FILE* %36, null, !dbg !3022
  br i1 %tobool105, label %if.end124, label %land.lhs.true106, !dbg !3024

land.lhs.true106:                                 ; preds = %if.end102
  %37 = load i32, i32* @dump_flags, align 4, !dbg !3025
  %and = and i32 %37, 8, !dbg !3026
  %tobool107 = icmp eq i32 %and, 0, !dbg !3026
  br i1 %tobool107, label %if.end124, label %if.then108, !dbg !3027

if.then108:                                       ; preds = %land.lhs.true106
  %num = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 0, !dbg !3028
  %38 = load i32, i32* %num, align 8, !dbg !3028
  %call109 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %36, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i64 0, i64 0), i32 %38) #6, !dbg !3030
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3031
  %call110 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0)) #6, !dbg !3032
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3033
  call fastcc void @dump_affine_iv(%struct._IO_FILE* %40, %struct.affine_iv* %iv0.addr.0) #7, !dbg !3034
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3035
  br i1 %cmp69, label %cond.end, label %cond.false, !dbg !3036

cond.false:                                       ; preds = %if.then108
  %cmp113 = icmp eq i32 %code.addr.0, 97, !dbg !3037
  %cond = select i1 %cmp113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18, i64 0, i64 0), !dbg !3038
  br label %cond.end, !dbg !3036

cond.end:                                         ; preds = %if.then108, %cond.false
  %cond115 = phi i8* [ %cond, %cond.false ], [ getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), %if.then108 ], !dbg !3036
  %call116 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0), i8* %cond115) #6, !dbg !3039
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3040
  call fastcc void @dump_affine_iv(%struct._IO_FILE* %42, %struct.affine_iv* %iv1.addr.0) #7, !dbg !3041
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3042
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !3043
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3044
  %call118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.20, i64 0, i64 0)) #6, !dbg !3045
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3046
  %arraydecay = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !3047
  %call119 = call i64 @mpz_out_str(%struct._IO_FILE* %45, i32 10, %struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !3048
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3049
  %call120 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !3050
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3051
  %arraydecay121 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !3052
  %call122 = call i64 @mpz_out_str(%struct._IO_FILE* %47, i32 10, %struct.__mpz_struct* nonnull %arraydecay121) #6, !dbg !3053
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3054
  %call123 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !3055
  br label %if.end124, !dbg !3056

if.end124:                                        ; preds = %land.lhs.true106, %if.end102, %cond.end
  switch i32 %code.addr.0, label %sw.default [
    i32 102, label %sw.bb
    i32 97, label %sw.bb134
    i32 98, label %sw.bb136
  ], !dbg !3057

sw.bb:                                            ; preds = %if.end124
  %step125 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1.addr.0, i64 0, i32 1, !dbg !3058
  %49 = load %union.tree_node*, %union.tree_node** %step125, align 8, !dbg !3058
  %call126 = call i32 @integer_zerop(%union.tree_node* %49) #6, !dbg !3058
  %tobool127 = icmp eq i32 %call126, 0, !dbg !3058
  br i1 %tobool127, label %cond.true128, label %cond.end130, !dbg !3058

cond.true128:                                     ; preds = %sw.bb
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 1314, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !3058
  br label %cond.end130, !dbg !3058

cond.end130:                                      ; preds = %sw.bb, %cond.true128
  %50 = load %union.tree_node*, %union.tree_node** %base91, align 8, !dbg !3060
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !2893, metadata !DIExpression(DW_OP_deref)), !dbg !2914
  %call133 = call fastcc zeroext i8 @number_of_iterations_ne(%union.tree_node* %type, %struct.affine_iv* %iv0.addr.0, %union.tree_node* %50, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken.2, %struct.bounds* nonnull %bnds) #7, !dbg !3061
  call void @llvm.dbg.value(metadata i8 1, metadata !2892, metadata !DIExpression()), !dbg !2914
  br label %sw.epilog, !dbg !3062

sw.bb134:                                         ; preds = %if.end124
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !2893, metadata !DIExpression(DW_OP_deref)), !dbg !2914
  %call135 = call fastcc zeroext i8 @number_of_iterations_lt(%union.tree_node* %type, %struct.affine_iv* %iv0.addr.0, %struct.affine_iv* %iv1.addr.0, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken.2, %struct.bounds* nonnull %bnds) #7, !dbg !3063
  call void @llvm.dbg.value(metadata i8 %call135, metadata !2892, metadata !DIExpression()), !dbg !2914
  br label %sw.epilog, !dbg !3064

sw.bb136:                                         ; preds = %if.end124
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !2893, metadata !DIExpression(DW_OP_deref)), !dbg !2914
  %call137 = call fastcc zeroext i8 @number_of_iterations_le(%union.tree_node* %type, %struct.affine_iv* %iv0.addr.0, %struct.affine_iv* %iv1.addr.0, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken.2, %struct.bounds* nonnull %bnds) #7, !dbg !3065
  call void @llvm.dbg.value(metadata i8 %call137, metadata !2892, metadata !DIExpression()), !dbg !2914
  br label %sw.epilog, !dbg !3066

sw.default:                                       ; preds = %if.end124
  call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 1330, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !3067
  br label %sw.epilog, !dbg !3068

sw.epilog:                                        ; preds = %sw.default, %sw.bb136, %sw.bb134, %cond.end130
  %ret.0 = phi i8 [ undef, %sw.default ], [ %call137, %sw.bb136 ], [ %call135, %sw.bb134 ], [ 1, %cond.end130 ]
  call void @llvm.dbg.value(metadata i8 %ret.0, metadata !2892, metadata !DIExpression()), !dbg !2914
  %arraydecay139 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !3069
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay139) #6, !dbg !3070
  %arraydecay141 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !3071
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay141) #6, !dbg !3072
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3073
  %tobool142 = icmp eq %struct._IO_FILE* %51, null, !dbg !3073
  br i1 %tobool142, label %cleanup, label %land.lhs.true143, !dbg !3075

land.lhs.true143:                                 ; preds = %sw.epilog
  %52 = load i32, i32* @dump_flags, align 4, !dbg !3076
  %and144 = and i32 %52, 8, !dbg !3077
  %tobool145 = icmp eq i32 %and144, 0, !dbg !3077
  br i1 %tobool145, label %cleanup, label %if.then146, !dbg !3078

if.then146:                                       ; preds = %land.lhs.true143
  %tobool147 = icmp eq i8 %ret.0, 0, !dbg !3079
  br i1 %tobool147, label %if.else171, label %if.then148, !dbg !3082

if.then148:                                       ; preds = %if.then146
  %call149 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %51, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0)) #6, !dbg !3083
  %assumptions150 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 0, !dbg !3085
  %53 = load %union.tree_node*, %union.tree_node** %assumptions150, align 8, !dbg !3085
  %call151 = call i32 @integer_nonzerop(%union.tree_node* %53) #6, !dbg !3087
  %tobool152 = icmp eq i32 %call151, 0, !dbg !3087
  br i1 %tobool152, label %if.then153, label %if.end157, !dbg !3088

if.then153:                                       ; preds = %if.then148
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3089
  %call154 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.23, i64 0, i64 0)) #6, !dbg !3091
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3092
  %56 = load %union.tree_node*, %union.tree_node** %assumptions150, align 8, !dbg !3093
  call void @print_generic_expr(%struct._IO_FILE* %55, %union.tree_node* %56, i32 2) #6, !dbg !3094
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3095
  %call156 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !3096
  br label %if.end157, !dbg !3097

if.end157:                                        ; preds = %if.then148, %if.then153
  %58 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !3098
  %call159 = call i32 @integer_zerop(%union.tree_node* %58) #6, !dbg !3100
  %tobool160 = icmp eq i32 %call159, 0, !dbg !3100
  br i1 %tobool160, label %if.then161, label %if.end165, !dbg !3101

if.then161:                                       ; preds = %if.end157
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3102
  %call162 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.24, i64 0, i64 0)) #6, !dbg !3104
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3105
  %61 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !3106
  call void @print_generic_expr(%struct._IO_FILE* %60, %union.tree_node* %61, i32 2) #6, !dbg !3107
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3108
  %call164 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !3109
  br label %if.end165, !dbg !3110

if.end165:                                        ; preds = %if.end157, %if.then161
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3111
  %call166 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.25, i64 0, i64 0)) #6, !dbg !3112
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3113
  %65 = load %union.tree_node*, %union.tree_node** %niter1, align 8, !dbg !3114
  call void @print_generic_expr(%struct._IO_FILE* %64, %union.tree_node* %65, i32 2) #6, !dbg !3115
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3116
  %call168 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26, i64 0, i64 0)) #6, !dbg !3117
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3118
  %68 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 3, i32 0, !dbg !3119
  %69 = load i64, i64* %68, align 8, !dbg !3119
  %70 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 3, i32 1, !dbg !3119
  %71 = load i64, i64* %70, align 8, !dbg !3119
  call void @dump_double_int(%struct._IO_FILE* %67, i64 %69, i64 %71, i8 zeroext 1) #6, !dbg !3119
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3120
  %call170 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !3121
  br label %cleanup, !dbg !3122

if.else171:                                       ; preds = %if.then146
  %call172 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %51, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i64 0, i64 0)) #6, !dbg !3123
  br label %cleanup

cleanup:                                          ; preds = %land.lhs.true63, %land.lhs.true74, %land.lhs.true83, %land.lhs.true143, %sw.epilog, %if.then46, %if.else171, %if.end165, %if.then95
  %retval.0 = phi i8 [ 1, %if.then95 ], [ 0, %if.then46 ], [ 0, %land.lhs.true63 ], [ 0, %land.lhs.true74 ], [ 0, %land.lhs.true83 ], [ %ret.0, %if.end165 ], [ 0, %if.else171 ], [ %ret.0, %land.lhs.true143 ], [ %ret.0, %sw.epilog ], !dbg !2914
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #8, !dbg !3124
  ret i8 %retval.0, !dbg !3124
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %loop, %union.tree_node* %expr) unnamed_addr #5 !dbg !3125 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3129, metadata !DIExpression()), !dbg !3137
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !3130, metadata !DIExpression()), !dbg !3137
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3138
  %bf.load = load i64, i64* %0, align 8, !dbg !3138
  %1 = trunc i64 %bf.load to i32, !dbg !3138
  %bf.cast = and i32 %1, 65535, !dbg !3138
  call void @llvm.dbg.value(metadata i32 %bf.cast, metadata !3131, metadata !DIExpression()), !dbg !3137
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %expr) #6, !dbg !3139
  %tobool = icmp eq i8 %call, 0, !dbg !3139
  br i1 %tobool, label %if.end, label %cleanup, !dbg !3141

if.end:                                           ; preds = %entry
  %trunc = trunc i64 %bf.load to i16, !dbg !3142
  switch i16 %trunc, label %if.end44 [
    i16 94, label %if.then4
    i16 93, label %if.then4
    i16 56, label %if.then4
  ], !dbg !3142

if.then4:                                         ; preds = %if.end, %if.end, %if.end
  call void @llvm.dbg.value(metadata i8 0, metadata !3132, metadata !DIExpression()), !dbg !3137
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3144
  %2 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !3144
  %call5 = tail call fastcc %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %loop, %union.tree_node* %2) #7, !dbg !3146
  call void @llvm.dbg.value(metadata %union.tree_node* %call5, metadata !3134, metadata !DIExpression()), !dbg !3137
  %3 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !3147
  %cmp9 = icmp ne %union.tree_node* %3, %call5, !dbg !3149
  call void @llvm.dbg.value(metadata i1 %cmp9, metadata !3132, metadata !DIExpression()), !dbg !3137
  %arrayidx14 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !3150
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !3150
  %call15 = tail call fastcc %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %loop, %union.tree_node* %4) #7, !dbg !3151
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !3135, metadata !DIExpression()), !dbg !3137
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !3152
  %cmp19 = icmp ne %union.tree_node* %5, %call15, !dbg !3154
  %narrow = or i1 %cmp9, %cmp19, !dbg !3155
  call void @llvm.dbg.value(metadata i1 %narrow, metadata !3132, metadata !DIExpression()), !dbg !3137
  %cmp22 = icmp eq i32 %bf.cast, 56, !dbg !3156
  br i1 %cmp22, label %if.then23, label %if.end34, !dbg !3158

if.then23:                                        ; preds = %if.then4
  %arrayidx26 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !3159
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !3159
  %call27 = tail call fastcc %union.tree_node* @simplify_using_outer_evolutions(%struct.loop* %loop, %union.tree_node* %6) #7, !dbg !3161
  call void @llvm.dbg.value(metadata %union.tree_node* %call27, metadata !3136, metadata !DIExpression()), !dbg !3137
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !3162
  %cmp31 = icmp ne %union.tree_node* %7, %call27, !dbg !3164
  %narrow2 = or i1 %narrow, %cmp31, !dbg !3165
  call void @llvm.dbg.value(metadata i1 %narrow2, metadata !3132, metadata !DIExpression()), !dbg !3137
  br label %if.end34, !dbg !3166

if.end34:                                         ; preds = %if.then4, %if.then23
  %changed.3.in = phi i1 [ %narrow2, %if.then23 ], [ %narrow, %if.then4 ]
  %e2.0 = phi %union.tree_node* [ %call27, %if.then23 ], [ null, %if.then4 ], !dbg !3167
  call void @llvm.dbg.value(metadata %union.tree_node* %e2.0, metadata !3136, metadata !DIExpression()), !dbg !3137
  call void @llvm.dbg.value(metadata i1 %changed.3.in, metadata !3132, metadata !DIExpression()), !dbg !3137
  br i1 %changed.3.in, label %if.then36, label %cleanup, !dbg !3168

if.then36:                                        ; preds = %if.end34
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3169
  br i1 %cmp22, label %if.then38, label %if.else40, !dbg !3173

if.then38:                                        ; preds = %if.then36
  %call39 = tail call %union.tree_node* @fold_build3_stat_loc(i32 0, i32 56, %union.tree_node* %8, %union.tree_node* %call5, %union.tree_node* %call15, %union.tree_node* %e2.0) #6, !dbg !3174
  call void @llvm.dbg.value(metadata %union.tree_node* %call39, metadata !3130, metadata !DIExpression()), !dbg !3137
  br label %cleanup, !dbg !3175

if.else40:                                        ; preds = %if.then36
  %call41 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %bf.cast, %union.tree_node* %8, %union.tree_node* %call5, %union.tree_node* %call15) #6, !dbg !3176
  call void @llvm.dbg.value(metadata %union.tree_node* %call41, metadata !3130, metadata !DIExpression()), !dbg !3137
  br label %cleanup

if.end44:                                         ; preds = %if.end
  %call45 = tail call fastcc %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %expr) #7, !dbg !3177
  call void @llvm.dbg.value(metadata %union.tree_node* %call45, metadata !3133, metadata !DIExpression()), !dbg !3137
  %call46 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call45) #6, !dbg !3178
  %tobool47 = icmp eq i8 %call46, 0, !dbg !3178
  %call45.expr = select i1 %tobool47, %union.tree_node* %expr, %union.tree_node* %call45, !dbg !3137
  br label %cleanup, !dbg !3137

cleanup:                                          ; preds = %if.end34, %entry, %if.end44, %if.else40, %if.then38
  %retval.0 = phi %union.tree_node* [ %expr, %entry ], [ %expr, %if.end34 ], [ %call39, %if.then38 ], [ %call41, %if.else40 ], [ %call45.expr, %if.end44 ], !dbg !3137
  ret %union.tree_node* %retval.0, !dbg !3180
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @simplify_using_initial_conditions(%struct.loop* %loop, %union.tree_node* %expr) unnamed_addr #5 !dbg !3181 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3183, metadata !DIExpression()), !dbg !3190
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !3184, metadata !DIExpression()), !dbg !3190
  call void @llvm.dbg.value(metadata i32 0, metadata !3189, metadata !DIExpression()), !dbg !3190
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3191
  %bf.load = load i64, i64* %0, align 8, !dbg !3191
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3193
  %cmp = icmp eq i64 %bf.cast1, 23, !dbg !3193
  br i1 %cmp, label %cleanup, label %if.end, !dbg !3194

if.end:                                           ; preds = %entry
  %header = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 2, !dbg !3195
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3195
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %1, metadata !3186, metadata !DIExpression()), !dbg !3190
  br label %for.cond, !dbg !3197

for.cond:                                         ; preds = %for.inc, %if.end
  %bb.0 = phi %struct.basic_block_def* [ %1, %if.end ], [ %call21, %for.inc ], !dbg !3198
  %cnt.0 = phi i32 [ 0, %if.end ], [ %cnt.1, %for.inc ], !dbg !3190
  %expr.addr.0 = phi %union.tree_node* [ %expr, %if.end ], [ %expr.addr.1, %for.inc ]
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.addr.0, metadata !3184, metadata !DIExpression()), !dbg !3190
  call void @llvm.dbg.value(metadata i32 %cnt.0, metadata !3189, metadata !DIExpression()), !dbg !3190
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !3186, metadata !DIExpression()), !dbg !3190
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3199
  %cfg = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, i32 1, !dbg !3199
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3199
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i64 0, i32 0, !dbg !3199
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3199
  %cmp1 = icmp ne %struct.basic_block_def* %bb.0, %4, !dbg !3201
  %cmp2 = icmp slt i32 %cnt.0, 8, !dbg !3202
  %spec.select = and i1 %cmp2, %cmp1, !dbg !3203
  br i1 %spec.select, label %for.body, label %cleanup.loopexit, !dbg !3204

for.body:                                         ; preds = %for.cond
  %call = tail call fastcc zeroext i8 @single_pred_p(%struct.basic_block_def* %bb.0) #7, !dbg !3205
  %tobool = icmp eq i8 %call, 0, !dbg !3205
  br i1 %tobool, label %for.inc, label %if.end4, !dbg !3208

if.end4:                                          ; preds = %for.body
  %call5 = tail call fastcc %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb.0) #7, !dbg !3209
  call void @llvm.dbg.value(metadata %struct.edge_def* %call5, metadata !3185, metadata !DIExpression()), !dbg !3190
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call5, i64 0, i32 7, !dbg !3210
  %5 = load i32, i32* %flags, align 8, !dbg !3210
  %and = and i32 %5, 3072, !dbg !3212
  %tobool6 = icmp eq i32 %and, 0, !dbg !3212
  br i1 %tobool6, label %for.inc, label %if.end8, !dbg !3213

if.end8:                                          ; preds = %if.end4
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call5, i64 0, i32 0, !dbg !3214
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3214
  %call9 = tail call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %6) #6, !dbg !3215
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call9, metadata !3187, metadata !DIExpression()), !dbg !3190
  %call10 = tail call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %call9) #7, !dbg !3216
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3216
  %call11 = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %call9) #7, !dbg !3216
  %call12 = tail call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %call9) #7, !dbg !3216
  %call13 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %call10, %union.tree_node* %7, %union.tree_node* %call11, %union.tree_node* %call12) #6, !dbg !3216
  call void @llvm.dbg.value(metadata %union.tree_node* %call13, metadata !3188, metadata !DIExpression()), !dbg !3190
  %8 = load i32, i32* %flags, align 8, !dbg !3217
  %and15 = and i32 %8, 2048, !dbg !3219
  %tobool16 = icmp eq i32 %and15, 0, !dbg !3219
  br i1 %tobool16, label %if.end19, label %if.then17, !dbg !3220

if.then17:                                        ; preds = %if.end8
  %call18 = tail call %union.tree_node* @invert_truthvalue_loc(i32 0, %union.tree_node* %call13) #6, !dbg !3221
  call void @llvm.dbg.value(metadata %union.tree_node* %call18, metadata !3188, metadata !DIExpression()), !dbg !3190
  br label %if.end19, !dbg !3222

if.end19:                                         ; preds = %if.end8, %if.then17
  %cond.0 = phi %union.tree_node* [ %call18, %if.then17 ], [ %call13, %if.end8 ], !dbg !3223
  call void @llvm.dbg.value(metadata %union.tree_node* %cond.0, metadata !3188, metadata !DIExpression()), !dbg !3190
  %call20 = tail call fastcc %union.tree_node* @tree_simplify_using_condition(%union.tree_node* %cond.0, %union.tree_node* %expr.addr.0) #7, !dbg !3224
  call void @llvm.dbg.value(metadata %union.tree_node* %call20, metadata !3184, metadata !DIExpression()), !dbg !3190
  %inc = add nsw i32 %cnt.0, 1, !dbg !3225
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3189, metadata !DIExpression()), !dbg !3190
  br label %for.inc, !dbg !3226

for.inc:                                          ; preds = %if.end4, %for.body, %if.end19
  %cnt.1 = phi i32 [ %inc, %if.end19 ], [ %cnt.0, %for.body ], [ %cnt.0, %if.end4 ], !dbg !3190
  %expr.addr.1 = phi %union.tree_node* [ %call20, %if.end19 ], [ %expr.addr.0, %for.body ], [ %expr.addr.0, %if.end4 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.addr.1, metadata !3184, metadata !DIExpression()), !dbg !3190
  call void @llvm.dbg.value(metadata i32 %cnt.1, metadata !3189, metadata !DIExpression()), !dbg !3190
  %call21 = tail call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %bb.0) #6, !dbg !3227
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call21, metadata !3186, metadata !DIExpression()), !dbg !3190
  br label %for.cond, !dbg !3228, !llvm.loop !3229

cleanup.loopexit:                                 ; preds = %for.cond
  %expr.addr.0.lcssa = phi %union.tree_node* [ %expr.addr.0, %for.cond ]
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.addr.0.lcssa, metadata !3184, metadata !DIExpression()), !dbg !3190
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.addr.0.lcssa, metadata !3184, metadata !DIExpression()), !dbg !3190
  call void @llvm.dbg.value(metadata %union.tree_node* %expr.addr.0.lcssa, metadata !3184, metadata !DIExpression()), !dbg !3190
  br label %cleanup, !dbg !3231

cleanup:                                          ; preds = %cleanup.loopexit, %entry
  %retval.0 = phi %union.tree_node* [ %expr, %entry ], [ %expr.addr.0.lcssa, %cleanup.loopexit ], !dbg !3190
  ret %union.tree_node* %retval.0, !dbg !3231
}

declare dso_local i32 @integer_onep(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @integer_zerop(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_location(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !3232 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3236, metadata !DIExpression()), !dbg !3237
  %location = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 2, !dbg !3238
  %0 = load i32, i32* %location, align 8, !dbg !3238
  ret i32 %0, !dbg !3239
}

declare dso_local i32 @integer_all_onesp(%union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @warning_at(i32, i32, i8*, ...) local_unnamed_addr #2

declare dso_local void @expand_location(%struct.expanded_location* sret, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @find_loop_niter(%struct.loop* %loop, %struct.edge_def** %exit) local_unnamed_addr #5 !dbg !3240 {
entry:
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %ex = alloca %struct.edge_def*, align 8
  %desc = alloca %struct.tree_niter_desc, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3245, metadata !DIExpression()), !dbg !3258
  call void @llvm.dbg.value(metadata %struct.edge_def** %exit, metadata !3246, metadata !DIExpression()), !dbg !3258
  %0 = bitcast %struct.VEC_edge_heap** %exits to i8*, !dbg !3259
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3259
  %call = tail call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %loop) #6, !dbg !3260
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %call, metadata !3248, metadata !DIExpression()), !dbg !3258
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !3261
  %1 = bitcast %struct.edge_def** %ex to i8*, !dbg !3262
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3262
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !3255, metadata !DIExpression()), !dbg !3258
  %2 = bitcast %struct.tree_niter_desc* %desc to i8*, !dbg !3263
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %2) #8, !dbg !3263
  store %struct.edge_def* null, %struct.edge_def** %exit, align 8, !dbg !3264
  call void @llvm.dbg.value(metadata i32 0, metadata !3247, metadata !DIExpression()), !dbg !3258
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i64 0, i32 1, !dbg !3265
  %niter19 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i64 0, i32 2, !dbg !3270
  %3 = bitcast %struct.edge_def** %ex to i64*, !dbg !3271
  %4 = bitcast %struct.edge_def** %exit to i64*, !dbg !3271
  br label %for.cond, !dbg !3274

for.cond:                                         ; preds = %for.inc, %entry
  %5 = phi %struct.VEC_edge_heap* [ %call, %entry ], [ %.pre, %for.inc ], !dbg !3275
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !3276
  %niter.0 = phi %union.tree_node* [ null, %entry ], [ %niter.1, %for.inc ], !dbg !3277
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.0, metadata !3255, metadata !DIExpression()), !dbg !3258
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3247, metadata !DIExpression()), !dbg !3258
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %5, metadata !3248, metadata !DIExpression()), !dbg !3258
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %5, metadata !3248, metadata !DIExpression()), !dbg !3258
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %5, i64 0, i32 0, !dbg !3275
  call void @llvm.dbg.value(metadata %struct.edge_def** %ex, metadata !3254, metadata !DIExpression(DW_OP_deref)), !dbg !3258
  %call1 = call fastcc i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %base, i32 %i.0, %struct.edge_def** nonnull %ex) #7, !dbg !3275
  %tobool2 = icmp eq i32 %call1, 0, !dbg !3278
  br i1 %tobool2, label %for.end.loopexit, label %for.body, !dbg !3278

for.body:                                         ; preds = %for.cond
  %6 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !3279
  call void @llvm.dbg.value(metadata %struct.edge_def* %6, metadata !3254, metadata !DIExpression()), !dbg !3258
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i64 0, i32 0, !dbg !3281
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3281
  %call3 = call zeroext i8 @just_once_each_iteration_p(%struct.loop* %loop, %struct.basic_block_def* %7) #6, !dbg !3282
  %tobool4 = icmp eq i8 %call3, 0, !dbg !3282
  br i1 %tobool4, label %for.inc, label %if.end, !dbg !3283

if.end:                                           ; preds = %for.body
  %8 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !3284
  call void @llvm.dbg.value(metadata %struct.edge_def* %8, metadata !3254, metadata !DIExpression()), !dbg !3258
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %desc, metadata !3257, metadata !DIExpression(DW_OP_deref)), !dbg !3258
  %call5 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %loop, %struct.edge_def* %8, %struct.tree_niter_desc* nonnull %desc, i8 zeroext 0) #7, !dbg !3286
  %tobool6 = icmp eq i8 %call5, 0, !dbg !3286
  br i1 %tobool6, label %for.inc, label %if.end8, !dbg !3287

if.end8:                                          ; preds = %if.end
  %9 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !3288
  %call9 = call i32 @integer_nonzerop(%union.tree_node* %9) #6, !dbg !3289
  %tobool10 = icmp eq i32 %call9, 0, !dbg !3289
  br i1 %tobool10, label %if.end13, label %if.then11, !dbg !3290

if.then11:                                        ; preds = %if.end8
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !3291
  %call12 = call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 0) #6, !dbg !3293
  call void @llvm.dbg.value(metadata %union.tree_node* %call12, metadata !3255, metadata !DIExpression()), !dbg !3258
  %11 = load i64, i64* %3, align 8, !dbg !3294
  store i64 %11, i64* %4, align 8, !dbg !3295
  br label %for.end, !dbg !3296

if.end13:                                         ; preds = %if.end8
  %12 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !3297
  %call15 = call i32 @integer_zerop(%union.tree_node* %12) #6, !dbg !3299
  %tobool16 = icmp eq i32 %call15, 0, !dbg !3299
  br i1 %tobool16, label %for.inc, label %if.end18, !dbg !3300

if.end18:                                         ; preds = %if.end13
  %13 = load %union.tree_node*, %union.tree_node** %niter19, align 8, !dbg !3301
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !3256, metadata !DIExpression()), !dbg !3258
  %tobool20 = icmp eq %union.tree_node* %niter.0, null, !dbg !3302
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !3304

if.then21:                                        ; preds = %if.end18
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !3255, metadata !DIExpression()), !dbg !3258
  %14 = load i64, i64* %3, align 8, !dbg !3305
  store i64 %14, i64* %4, align 8, !dbg !3307
  br label %for.inc, !dbg !3308

if.end22:                                         ; preds = %if.end18
  %15 = getelementptr inbounds %union.tree_node, %union.tree_node* %13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3309
  %bf.load = load i64, i64* %15, align 8, !dbg !3309
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3311
  %cmp = icmp eq i64 %bf.cast1, 23, !dbg !3311
  br i1 %cmp, label %if.end25, label %for.inc, !dbg !3312

if.end25:                                         ; preds = %if.end22
  %16 = getelementptr inbounds %union.tree_node, %union.tree_node* %niter.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3313
  %bf.load27 = load i64, i64* %16, align 8, !dbg !3313
  %bf.cast292 = and i64 %bf.load27, 65535, !dbg !3314
  %cmp30 = icmp eq i64 %bf.cast292, 23, !dbg !3314
  br i1 %cmp30, label %if.end32, label %if.then31, !dbg !3315

if.then31:                                        ; preds = %if.end25
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !3255, metadata !DIExpression()), !dbg !3258
  %17 = load i64, i64* %3, align 8, !dbg !3316
  store i64 %17, i64* %4, align 8, !dbg !3317
  br label %for.inc, !dbg !3318

if.end32:                                         ; preds = %if.end25
  %call33 = call i32 @tree_int_cst_lt(%union.tree_node* %13, %union.tree_node* nonnull %niter.0) #6, !dbg !3319
  %tobool34 = icmp eq i32 %call33, 0, !dbg !3319
  br i1 %tobool34, label %for.inc, label %if.then35, !dbg !3321

if.then35:                                        ; preds = %if.end32
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !3255, metadata !DIExpression()), !dbg !3258
  %18 = load i64, i64* %3, align 8, !dbg !3322
  store i64 %18, i64* %4, align 8, !dbg !3324
  br label %for.inc, !dbg !3325

for.inc:                                          ; preds = %if.end32, %if.end22, %if.end13, %if.end, %for.body, %if.then35, %if.then31, %if.then21
  %niter.1 = phi %union.tree_node* [ %13, %if.then31 ], [ %13, %if.then35 ], [ %13, %if.then21 ], [ %niter.0, %for.body ], [ %niter.0, %if.end ], [ %niter.0, %if.end13 ], [ %niter.0, %if.end22 ], [ %niter.0, %if.end32 ], !dbg !3258
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.1, metadata !3255, metadata !DIExpression()), !dbg !3258
  %inc = add i32 %i.0, 1, !dbg !3326
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3247, metadata !DIExpression()), !dbg !3258
  %.pre = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !3275
  br label %for.cond, !dbg !3327, !llvm.loop !3328

for.end.loopexit:                                 ; preds = %for.cond
  %niter.0.lcssa = phi %union.tree_node* [ %niter.0, %for.cond ], !dbg !3277
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.0.lcssa, metadata !3255, metadata !DIExpression()), !dbg !3258
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.0.lcssa, metadata !3255, metadata !DIExpression()), !dbg !3258
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.0.lcssa, metadata !3255, metadata !DIExpression()), !dbg !3258
  br label %for.end, !dbg !3330

for.end:                                          ; preds = %for.end.loopexit, %if.then11
  %niter.2 = phi %union.tree_node* [ %call12, %if.then11 ], [ %niter.0.lcssa, %for.end.loopexit ], !dbg !3258
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.2, metadata !3255, metadata !DIExpression()), !dbg !3258
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap** %exits, metadata !3248, metadata !DIExpression(DW_OP_deref)), !dbg !3258
  call fastcc void @VEC_edge_heap_free(%struct.VEC_edge_heap** nonnull %exits) #7, !dbg !3330
  %tobool37 = icmp eq %union.tree_node* %niter.2, null, !dbg !3331
  %19 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3331
  %cond41 = select i1 %tobool37, %union.tree_node* %19, %union.tree_node* %niter.2, !dbg !3331
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %2) #8, !dbg !3332
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3332
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3332
  ret %union.tree_node* %cond41, !dbg !3333
}

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) unnamed_addr #0 !dbg !3334 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !3340, metadata !DIExpression()), !dbg !3343
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !3341, metadata !DIExpression()), !dbg !3343
  call void @llvm.dbg.value(metadata %struct.edge_def** %ptr, metadata !3342, metadata !DIExpression()), !dbg !3343
  %tobool = icmp eq %struct.VEC_edge_base* %vec_, null, !dbg !3344
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !3344

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 0, !dbg !3344
  %0 = load i32, i32* %num, align 8, !dbg !3344
  %cmp = icmp ugt i32 %0, %ix_, !dbg !3344
  br i1 %cmp, label %if.then, label %if.else, !dbg !3346

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !3347
  %arrayidx = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !3347
  %1 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !3347
  br label %return, !dbg !3347

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !3349

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct.edge_def* [ null, %if.else ], [ %1, %if.then ], !dbg !3351
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !3351
  store %struct.edge_def* %storemerge, %struct.edge_def** %ptr, align 8, !dbg !3351
  ret i32 %retval.0, !dbg !3346
}

declare dso_local zeroext i8 @just_once_each_iteration_p(%struct.loop*, %struct.basic_block_def*) local_unnamed_addr #2

declare dso_local i32 @integer_nonzerop(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) local_unnamed_addr #2

declare dso_local i32 @tree_int_cst_lt(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) unnamed_addr #0 !dbg !3352 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap** %vec_, metadata !3357, metadata !DIExpression()), !dbg !3358
  %0 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %vec_, align 8, !dbg !3359
  %tobool = icmp eq %struct.VEC_edge_heap* %0, null, !dbg !3359
  br i1 %tobool, label %if.end, label %if.then, !dbg !3361

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_edge_heap* %0 to i8*, !dbg !3361
  tail call void @free(i8* nonnull %1) #6, !dbg !3359
  br label %if.end, !dbg !3359

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %vec_, align 8, !dbg !3361
  ret void, !dbg !3361
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @finite_loop_p(%struct.loop* %loop) local_unnamed_addr #5 !dbg !3362 {
entry:
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %ex = alloca %struct.edge_def*, align 8
  %desc = alloca %struct.tree_niter_desc, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3366, metadata !DIExpression()), !dbg !3372
  %0 = bitcast %struct.VEC_edge_heap** %exits to i8*, !dbg !3373
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3373
  %1 = bitcast %struct.edge_def** %ex to i8*, !dbg !3374
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3374
  %2 = bitcast %struct.tree_niter_desc* %desc to i8*, !dbg !3375
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %2) #8, !dbg !3375
  call void @llvm.dbg.value(metadata i8 0, metadata !3371, metadata !DIExpression()), !dbg !3372
  %3 = load i32, i32* @flag_unsafe_loop_optimizations, align 4, !dbg !3376
  %tobool = icmp eq i32 %3, 0, !dbg !3376
  br i1 %tobool, label %if.end, label %cleanup, !dbg !3378

if.end:                                           ; preds = %entry
  %4 = load i64*, i64** bitcast (%union.tree_node** @current_function_decl to i64**), align 8, !dbg !3379
  %bf.load = load i64, i64* %4, align 8, !dbg !3379
  %bf.cast1 = and i64 %bf.load, 1048576, !dbg !3379
  %tobool1 = icmp eq i64 %bf.cast1, 0, !dbg !3379
  br i1 %tobool1, label %lor.lhs.false, label %if.end.land.lhs.true_crit_edge, !dbg !3381

if.end.land.lhs.true_crit_edge:                   ; preds = %if.end
  %looping_const_or_pure_flag.phi.trans.insert = getelementptr inbounds i64, i64* %4, i64 27, !dbg !3382
  %5 = bitcast i64* %looping_const_or_pure_flag.phi.trans.insert to i32*, !dbg !3382
  %bf.load7.pre = load i32, i32* %5, align 8, !dbg !3383
  br label %land.lhs.true, !dbg !3381

lor.lhs.false:                                    ; preds = %if.end
  %pure_flag = getelementptr inbounds i64, i64* %4, i64 27, !dbg !3384
  %6 = bitcast i64* %pure_flag to i32*, !dbg !3384
  %bf.load2 = load i32, i32* %6, align 8, !dbg !3384
  %bf.clear4 = and i32 %bf.load2, 134217728, !dbg !3384
  %tobool5 = icmp eq i32 %bf.clear4, 0, !dbg !3384
  br i1 %tobool5, label %if.end17, label %land.lhs.true, !dbg !3385

land.lhs.true:                                    ; preds = %if.end.land.lhs.true_crit_edge, %lor.lhs.false
  %bf.load7 = phi i32 [ %bf.load7.pre, %if.end.land.lhs.true_crit_edge ], [ %bf.load2, %lor.lhs.false ], !dbg !3383
  %bf.clear9 = and i32 %bf.load7, 268435456, !dbg !3383
  %tobool10 = icmp eq i32 %bf.clear9, 0, !dbg !3383
  br i1 %tobool10, label %if.then11, label %if.end17, !dbg !3386

if.then11:                                        ; preds = %land.lhs.true
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3387
  %tobool12 = icmp eq %struct._IO_FILE* %7, null, !dbg !3387
  br i1 %tobool12, label %cleanup, label %land.lhs.true13, !dbg !3390

land.lhs.true13:                                  ; preds = %if.then11
  %8 = load i32, i32* @dump_flags, align 4, !dbg !3391
  %and = and i32 %8, 8, !dbg !3392
  %tobool14 = icmp eq i32 %and, 0, !dbg !3392
  br i1 %tobool14, label %cleanup, label %if.then15, !dbg !3393

if.then15:                                        ; preds = %land.lhs.true13
  %num = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 0, !dbg !3394
  %9 = load i32, i32* %num, align 8, !dbg !3394
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %7, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.5, i64 0, i64 0), i32 %9) #6, !dbg !3395
  br label %cleanup, !dbg !3395

if.end17:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %call18 = tail call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %loop) #6, !dbg !3396
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %call18, metadata !3368, metadata !DIExpression()), !dbg !3372
  store %struct.VEC_edge_heap* %call18, %struct.VEC_edge_heap** %exits, align 8, !dbg !3397
  call void @llvm.dbg.value(metadata i32 0, metadata !3367, metadata !DIExpression()), !dbg !3372
  br label %for.cond, !dbg !3398

for.cond:                                         ; preds = %for.inc, %if.end17
  %10 = phi %struct.VEC_edge_heap* [ %call18, %if.end17 ], [ %.pre, %for.inc ], !dbg !3400
  %i.0 = phi i32 [ 0, %if.end17 ], [ %inc, %for.inc ], !dbg !3402
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3367, metadata !DIExpression()), !dbg !3372
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %10, metadata !3368, metadata !DIExpression()), !dbg !3372
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %10, metadata !3368, metadata !DIExpression()), !dbg !3372
  %base20 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %10, i64 0, i32 0, !dbg !3400
  call void @llvm.dbg.value(metadata %struct.edge_def** %ex, metadata !3369, metadata !DIExpression(DW_OP_deref)), !dbg !3372
  %call21 = call fastcc i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %base20, i32 %i.0, %struct.edge_def** nonnull %ex) #7, !dbg !3400
  %tobool22 = icmp eq i32 %call21, 0, !dbg !3403
  br i1 %tobool22, label %for.end.loopexit, label %for.body, !dbg !3403

for.body:                                         ; preds = %for.cond
  %11 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !3404
  call void @llvm.dbg.value(metadata %struct.edge_def* %11, metadata !3369, metadata !DIExpression()), !dbg !3372
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i64 0, i32 0, !dbg !3407
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3407
  %call23 = call zeroext i8 @just_once_each_iteration_p(%struct.loop* %loop, %struct.basic_block_def* %12) #6, !dbg !3408
  %tobool24 = icmp eq i8 %call23, 0, !dbg !3408
  br i1 %tobool24, label %for.inc, label %if.end26, !dbg !3409

if.end26:                                         ; preds = %for.body
  %13 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !3410
  call void @llvm.dbg.value(metadata %struct.edge_def* %13, metadata !3369, metadata !DIExpression()), !dbg !3372
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %desc, metadata !3370, metadata !DIExpression(DW_OP_deref)), !dbg !3372
  %call27 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %loop, %struct.edge_def* %13, %struct.tree_niter_desc* nonnull %desc, i8 zeroext 0) #7, !dbg !3412
  %tobool28 = icmp eq i8 %call27, 0, !dbg !3412
  br i1 %tobool28, label %for.inc, label %if.then29, !dbg !3413

if.then29:                                        ; preds = %if.end26
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3414
  %tobool30 = icmp eq %struct._IO_FILE* %14, null, !dbg !3414
  br i1 %tobool30, label %for.end, label %land.lhs.true31, !dbg !3417

land.lhs.true31:                                  ; preds = %if.then29
  %15 = load i32, i32* @dump_flags, align 4, !dbg !3418
  %and32 = and i32 %15, 8, !dbg !3419
  %tobool33 = icmp eq i32 %and32, 0, !dbg !3419
  br i1 %tobool33, label %for.end, label %if.then34, !dbg !3420

if.then34:                                        ; preds = %land.lhs.true31
  %num35 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 0, !dbg !3421
  %16 = load i32, i32* %num35, align 8, !dbg !3421
  %call36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %14, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0), i32 %16) #6, !dbg !3423
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3424
  %niter = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %desc, i64 0, i32 2, !dbg !3425
  %18 = load %union.tree_node*, %union.tree_node** %niter, align 8, !dbg !3425
  call void @print_generic_expr(%struct._IO_FILE* %17, %union.tree_node* %18, i32 2) #6, !dbg !3426
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3427
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0)) #6, !dbg !3428
  br label %for.end, !dbg !3429

for.inc:                                          ; preds = %if.end26, %for.body
  %inc = add i32 %i.0, 1, !dbg !3430
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3367, metadata !DIExpression()), !dbg !3372
  %.pre = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !3400
  br label %for.cond, !dbg !3431, !llvm.loop !3432

for.end.loopexit:                                 ; preds = %for.cond
  br label %for.end, !dbg !3434

for.end:                                          ; preds = %for.end.loopexit, %land.lhs.true31, %if.then29, %if.then34
  %finite.0 = phi i8 [ 1, %if.then34 ], [ 1, %land.lhs.true31 ], [ 1, %if.then29 ], [ 0, %for.end.loopexit ], !dbg !3372
  call void @llvm.dbg.value(metadata i8 %finite.0, metadata !3371, metadata !DIExpression()), !dbg !3372
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap** %exits, metadata !3368, metadata !DIExpression(DW_OP_deref)), !dbg !3372
  call fastcc void @VEC_edge_heap_free(%struct.VEC_edge_heap** nonnull %exits) #7, !dbg !3434
  br label %cleanup, !dbg !3435

cleanup:                                          ; preds = %land.lhs.true13, %if.then11, %entry, %if.then15, %for.end
  %retval.0 = phi i8 [ %finite.0, %for.end ], [ 1, %entry ], [ 1, %if.then15 ], [ 1, %land.lhs.true13 ], [ 1, %if.then11 ], !dbg !3372
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %2) #8, !dbg !3436
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3436
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3436
  ret i8 %retval.0, !dbg !3436
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @loop_niter_by_eval(%struct.loop* %loop, %struct.edge_def* %exit) local_unnamed_addr #5 !dbg !3437 {
entry:
  %op = alloca [2 x %union.tree_node*], align 16
  %val = alloca [2 x %union.tree_node*], align 16
  %next = alloca [2 x %union.tree_node*], align 16
  %aval = alloca [2 x %union.tree_node*], align 16
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3441, metadata !DIExpression()), !dbg !3454
  call void @llvm.dbg.value(metadata %struct.edge_def* %exit, metadata !3442, metadata !DIExpression()), !dbg !3454
  %0 = bitcast [2 x %union.tree_node*]* %op to i8*, !dbg !3455
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !3455
  call void @llvm.dbg.declare(metadata [2 x %union.tree_node*]* %op, metadata !3444, metadata !DIExpression()), !dbg !3456
  %1 = bitcast [2 x %union.tree_node*]* %val to i8*, !dbg !3455
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !3455
  call void @llvm.dbg.declare(metadata [2 x %union.tree_node*]* %val, metadata !3446, metadata !DIExpression()), !dbg !3457
  %2 = bitcast [2 x %union.tree_node*]* %next to i8*, !dbg !3455
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !3455
  call void @llvm.dbg.declare(metadata [2 x %union.tree_node*]* %next, metadata !3447, metadata !DIExpression()), !dbg !3458
  %3 = bitcast [2 x %union.tree_node*]* %aval to i8*, !dbg !3455
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #8, !dbg !3455
  call void @llvm.dbg.declare(metadata [2 x %union.tree_node*]* %aval, metadata !3448, metadata !DIExpression()), !dbg !3459
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %exit, i64 0, i32 0, !dbg !3460
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3460
  %call = tail call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %4) #6, !dbg !3461
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3450, metadata !DIExpression()), !dbg !3454
  %tobool = icmp eq %union.gimple_statement_d* %call, null, !dbg !3462
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !3464

lor.lhs.false:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* nonnull %call) #7, !dbg !3465
  %cmp2 = icmp eq i32 %call1, 1, !dbg !3466
  br i1 %cmp2, label %if.end, label %if.then, !dbg !3467

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3468
  br label %cleanup, !dbg !3469

if.end:                                           ; preds = %lor.lhs.false
  %call3 = tail call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* nonnull %call) #7, !dbg !3470
  call void @llvm.dbg.value(metadata i32 %call3, metadata !3453, metadata !DIExpression()), !dbg !3454
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %exit, i64 0, i32 7, !dbg !3471
  %6 = load i32, i32* %flags, align 8, !dbg !3471
  %and = and i32 %6, 1024, !dbg !3473
  %tobool4 = icmp eq i32 %and, 0, !dbg !3473
  br i1 %tobool4, label %if.end7, label %if.then5, !dbg !3474

if.then5:                                         ; preds = %if.end
  %call6 = tail call i32 @invert_tree_comparison(i32 %call3, i8 zeroext 0) #6, !dbg !3475
  call void @llvm.dbg.value(metadata i32 %call6, metadata !3453, metadata !DIExpression()), !dbg !3454
  br label %if.end7, !dbg !3476

if.end7:                                          ; preds = %if.end, %if.then5
  %cmp.0 = phi i32 [ %call6, %if.then5 ], [ %call3, %if.end ], !dbg !3454
  call void @llvm.dbg.value(metadata i32 %cmp.0, metadata !3453, metadata !DIExpression()), !dbg !3454
  %cmp.0.off = add i32 %cmp.0, -97, !dbg !3477
  %switch = icmp ult i32 %cmp.0.off, 6, !dbg !3477
  br i1 %switch, label %sw.bb, label %sw.default, !dbg !3477

sw.bb:                                            ; preds = %if.end7
  %call8 = tail call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* nonnull %call) #7, !dbg !3478
  %arrayidx = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 0, !dbg !3480
  store %union.tree_node* %call8, %union.tree_node** %arrayidx, align 16, !dbg !3481
  %call9 = tail call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* nonnull %call) #7, !dbg !3482
  %arrayidx10 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 1, !dbg !3483
  store %union.tree_node* %call9, %union.tree_node** %arrayidx10, align 8, !dbg !3484
  call void @llvm.dbg.value(metadata i32 0, metadata !3452, metadata !DIExpression()), !dbg !3454
  br label %for.cond, !dbg !3485

sw.default:                                       ; preds = %if.end7
  %7 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3487
  br label %cleanup, !dbg !3488

for.cond:                                         ; preds = %for.inc, %sw.bb
  %indvars.iv8 = phi i64 [ %indvars.iv.next9, %for.inc ], [ 0, %sw.bb ], !dbg !3489
  call void @llvm.dbg.value(metadata i64 %indvars.iv8, metadata !3452, metadata !DIExpression()), !dbg !3454
  %exitcond10 = icmp eq i64 %indvars.iv8, 2, !dbg !3490
  br i1 %exitcond10, label %for.end, label %for.body, !dbg !3492

for.body:                                         ; preds = %for.cond
  %arrayidx12 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 %indvars.iv8, !dbg !3493
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx12, align 8, !dbg !3493
  %call13 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %8) #6, !dbg !3496
  %tobool14 = icmp eq i8 %call13, 0, !dbg !3496
  br i1 %tobool14, label %if.else, label %if.then15, !dbg !3497

if.then15:                                        ; preds = %for.body
  %arrayidx19 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %indvars.iv8, !dbg !3498
  store %union.tree_node* %8, %union.tree_node** %arrayidx19, align 8, !dbg !3500
  %arrayidx21 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %next, i64 0, i64 %indvars.iv8, !dbg !3501
  store %union.tree_node* null, %union.tree_node** %arrayidx21, align 8, !dbg !3502
  store %union.tree_node* null, %union.tree_node** %arrayidx12, align 8, !dbg !3503
  br label %for.inc, !dbg !3504

if.else:                                          ; preds = %for.body
  %call26 = tail call fastcc %union.gimple_statement_d* @get_base_for(%struct.loop* %loop, %union.tree_node* %8) #7, !dbg !3505
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call26, metadata !3449, metadata !DIExpression()), !dbg !3454
  %tobool27 = icmp eq %union.gimple_statement_d* %call26, null, !dbg !3507
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !3509

if.then28:                                        ; preds = %if.else
  %9 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3510
  br label %cleanup, !dbg !3511

if.end29:                                         ; preds = %if.else
  %call30 = tail call %struct.edge_def* @loop_preheader_edge(%struct.loop* %loop) #6, !dbg !3512
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call30, i64 0, i32 6, !dbg !3512
  %10 = load i32, i32* %dest_idx, align 4, !dbg !3512
  %call31 = tail call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* nonnull %call26, i32 %10) #7, !dbg !3512
  %call32 = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call31) #7, !dbg !3512
  %arrayidx34 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %indvars.iv8, !dbg !3513
  store %union.tree_node* %call32, %union.tree_node** %arrayidx34, align 8, !dbg !3514
  %call35 = tail call %struct.edge_def* @loop_latch_edge(%struct.loop* %loop) #6, !dbg !3515
  %dest_idx36 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call35, i64 0, i32 6, !dbg !3515
  %11 = load i32, i32* %dest_idx36, align 4, !dbg !3515
  %call37 = tail call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* nonnull %call26, i32 %11) #7, !dbg !3515
  %call38 = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call37) #7, !dbg !3515
  %arrayidx40 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %next, i64 0, i64 %indvars.iv8, !dbg !3516
  store %union.tree_node* %call38, %union.tree_node** %arrayidx40, align 8, !dbg !3517
  br label %for.inc

for.inc:                                          ; preds = %if.then15, %if.end29
  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1, !dbg !3518
  call void @llvm.dbg.value(metadata i32 undef, metadata !3452, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !3454
  br label %for.cond, !dbg !3519, !llvm.loop !3520

for.end:                                          ; preds = %for.cond
  tail call void @fold_defer_overflow_warnings() #6, !dbg !3522
  call void @llvm.dbg.value(metadata i32 0, metadata !3451, metadata !DIExpression()), !dbg !3454
  %arrayidx59 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %aval, i64 0, i64 0, !dbg !3523
  %arrayidx60 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %aval, i64 0, i64 1, !dbg !3523
  br label %for.cond42, !dbg !3527

for.cond42:                                       ; preds = %for.inc95, %for.end
  %i.0 = phi i32 [ 0, %for.end ], [ %inc96, %for.inc95 ], !dbg !3528
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3451, metadata !DIExpression()), !dbg !3454
  %12 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !3529
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %12, i64 37, i32 1, !dbg !3529
  %13 = load i32, i32* %value, align 8, !dbg !3529
  %cmp44 = icmp ult i32 %i.0, %13, !dbg !3530
  br i1 %cmp44, label %for.cond46.preheader, label %for.end97, !dbg !3531

for.cond46.preheader:                             ; preds = %for.cond42
  br label %for.cond46, !dbg !3532

for.cond46:                                       ; preds = %for.cond46.preheader, %for.body48
  %indvars.iv = phi i64 [ 0, %for.cond46.preheader ], [ %indvars.iv.next, %for.body48 ], !dbg !3534
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !3452, metadata !DIExpression()), !dbg !3454
  %exitcond = icmp eq i64 %indvars.iv, 2, !dbg !3535
  br i1 %exitcond, label %for.end58, label %for.body48, !dbg !3532

for.body48:                                       ; preds = %for.cond46
  %arrayidx50 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %op, i64 0, i64 %indvars.iv, !dbg !3537
  %14 = load %union.tree_node*, %union.tree_node** %arrayidx50, align 8, !dbg !3537
  %arrayidx52 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %indvars.iv, !dbg !3538
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx52, align 8, !dbg !3538
  %call53 = tail call fastcc %union.tree_node* @get_val_for(%union.tree_node* %14, %union.tree_node* %15) #7, !dbg !3539
  %arrayidx55 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %aval, i64 0, i64 %indvars.iv, !dbg !3540
  store %union.tree_node* %call53, %union.tree_node** %arrayidx55, align 8, !dbg !3541
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !3542
  call void @llvm.dbg.value(metadata i32 undef, metadata !3452, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !3454
  br label %for.cond46, !dbg !3543, !llvm.loop !3544

for.end58:                                        ; preds = %for.cond46
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !3546
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx59, align 16, !dbg !3546
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx60, align 8, !dbg !3546
  %call61 = tail call %union.tree_node* @fold_binary_loc(i32 0, i32 %cmp.0, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %18) #6, !dbg !3546
  call void @llvm.dbg.value(metadata %union.tree_node* %call61, metadata !3443, metadata !DIExpression()), !dbg !3454
  %tobool62 = icmp eq %union.tree_node* %call61, null, !dbg !3547
  br i1 %tobool62, label %if.end74, label %land.lhs.true, !dbg !3549

land.lhs.true:                                    ; preds = %for.end58
  %call63 = tail call i32 @integer_zerop(%union.tree_node* nonnull %call61) #6, !dbg !3550
  %tobool64 = icmp eq i32 %call63, 0, !dbg !3550
  br i1 %tobool64, label %if.end74, label %if.then65, !dbg !3551

if.then65:                                        ; preds = %land.lhs.true
  %i.0.lcssa11 = phi i32 [ %i.0, %land.lhs.true ], !dbg !3528
  call void @llvm.dbg.value(metadata i32 %i.0.lcssa11, metadata !3451, metadata !DIExpression()), !dbg !3454
  call void @llvm.dbg.value(metadata i32 %i.0.lcssa11, metadata !3451, metadata !DIExpression()), !dbg !3454
  call void @llvm.dbg.value(metadata i32 %i.0.lcssa11, metadata !3451, metadata !DIExpression()), !dbg !3454
  tail call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !3552
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3554
  %tobool66 = icmp eq %struct._IO_FILE* %19, null, !dbg !3554
  br i1 %tobool66, label %if.end72, label %land.lhs.true67, !dbg !3556

land.lhs.true67:                                  ; preds = %if.then65
  %20 = load i32, i32* @dump_flags, align 4, !dbg !3557
  %and68 = and i32 %20, 8, !dbg !3558
  %tobool69 = icmp eq i32 %and68, 0, !dbg !3558
  br i1 %tobool69, label %if.end72, label %if.then70, !dbg !3559

if.then70:                                        ; preds = %land.lhs.true67
  %num = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 0, !dbg !3560
  %21 = load i32, i32* %num, align 8, !dbg !3560
  %call71 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %19, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.8, i64 0, i64 0), i32 %21, i32 %i.0.lcssa11) #6, !dbg !3561
  br label %if.end72, !dbg !3561

if.end72:                                         ; preds = %land.lhs.true67, %if.then65, %if.then70
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !3562
  %conv = zext i32 %i.0.lcssa11 to i64, !dbg !3563
  %call73 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %22, i64 %conv) #6, !dbg !3564
  br label %cleanup, !dbg !3565

if.end74:                                         ; preds = %land.lhs.true, %for.end58
  call void @llvm.dbg.value(metadata i32 0, metadata !3452, metadata !DIExpression()), !dbg !3454
  br label %for.cond75, !dbg !3566

for.cond75:                                       ; preds = %for.inc92, %if.end74
  %indvars.iv5 = phi i64 [ %indvars.iv.next6, %for.inc92 ], [ 0, %if.end74 ], !dbg !3568
  call void @llvm.dbg.value(metadata i64 %indvars.iv5, metadata !3452, metadata !DIExpression()), !dbg !3454
  %exitcond7 = icmp eq i64 %indvars.iv5, 2, !dbg !3569
  br i1 %exitcond7, label %for.inc95, label %for.body78, !dbg !3571

for.body78:                                       ; preds = %for.cond75
  %arrayidx80 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %next, i64 0, i64 %indvars.iv5, !dbg !3572
  %23 = load %union.tree_node*, %union.tree_node** %arrayidx80, align 8, !dbg !3572
  %arrayidx82 = getelementptr inbounds [2 x %union.tree_node*], [2 x %union.tree_node*]* %val, i64 0, i64 %indvars.iv5, !dbg !3574
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx82, align 8, !dbg !3574
  %call83 = tail call fastcc %union.tree_node* @get_val_for(%union.tree_node* %23, %union.tree_node* %24) #7, !dbg !3575
  store %union.tree_node* %call83, %union.tree_node** %arrayidx82, align 8, !dbg !3576
  %call88 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call83) #6, !dbg !3577
  %tobool89 = icmp eq i8 %call88, 0, !dbg !3577
  br i1 %tobool89, label %if.then90, label %for.inc92, !dbg !3579

if.then90:                                        ; preds = %for.body78
  tail call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !3580
  %25 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3582
  br label %cleanup, !dbg !3583

for.inc92:                                        ; preds = %for.body78
  %indvars.iv.next6 = add nuw nsw i64 %indvars.iv5, 1, !dbg !3584
  call void @llvm.dbg.value(metadata i32 undef, metadata !3452, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !3454
  br label %for.cond75, !dbg !3585, !llvm.loop !3586

for.inc95:                                        ; preds = %for.cond75
  %inc96 = add i32 %i.0, 1, !dbg !3588
  call void @llvm.dbg.value(metadata i32 %inc96, metadata !3451, metadata !DIExpression()), !dbg !3454
  br label %for.cond42, !dbg !3589, !llvm.loop !3590

for.end97:                                        ; preds = %for.cond42
  tail call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !3592
  %26 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3593
  br label %cleanup, !dbg !3594

cleanup:                                          ; preds = %for.end97, %if.then90, %if.end72, %if.then28, %sw.default, %if.then
  %retval.0 = phi %union.tree_node* [ %5, %if.then ], [ %7, %sw.default ], [ %9, %if.then28 ], [ %call73, %if.end72 ], [ %25, %if.then90 ], [ %26, %for.end97 ], !dbg !3454
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #8, !dbg !3595
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !3595
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !3595
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !3595
  ret %union.tree_node* %retval.0, !dbg !3595
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @get_base_for(%struct.loop* %loop, %union.tree_node* %x) unnamed_addr #5 !dbg !3596 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3600, metadata !DIExpression()), !dbg !3605
  call void @llvm.dbg.value(metadata %union.tree_node* %x, metadata !3601, metadata !DIExpression()), !dbg !3605
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %x) #6, !dbg !3606
  %tobool = icmp eq i8 %call, 0, !dbg !3606
  br i1 %tobool, label %if.end, label %cleanup, !dbg !3608

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc %union.gimple_statement_d* @chain_of_csts_start(%struct.loop* %loop, %union.tree_node* %x) #7, !dbg !3609
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call1, metadata !3602, metadata !DIExpression()), !dbg !3605
  %tobool2 = icmp eq %union.gimple_statement_d* %call1, null, !dbg !3610
  br i1 %tobool2, label %cleanup, label %if.end4, !dbg !3612

if.end4:                                          ; preds = %if.end
  %call5 = tail call %struct.edge_def* @loop_preheader_edge(%struct.loop* %loop) #6, !dbg !3613
  %dest_idx = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call5, i64 0, i32 6, !dbg !3613
  %0 = load i32, i32* %dest_idx, align 4, !dbg !3613
  %call6 = tail call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* nonnull %call1, i32 %0) #7, !dbg !3613
  %call7 = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call6) #7, !dbg !3613
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !3603, metadata !DIExpression()), !dbg !3605
  %call8 = tail call %struct.edge_def* @loop_latch_edge(%struct.loop* %loop) #6, !dbg !3614
  %dest_idx9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call8, i64 0, i32 6, !dbg !3614
  %1 = load i32, i32* %dest_idx9, align 4, !dbg !3614
  %call10 = tail call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* nonnull %call1, i32 %1) #7, !dbg !3614
  %call11 = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call10) #7, !dbg !3614
  call void @llvm.dbg.value(metadata %union.tree_node* %call11, metadata !3604, metadata !DIExpression()), !dbg !3605
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3615
  %bf.load = load i64, i64* %2, align 8, !dbg !3615
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3617
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !3617
  br i1 %cmp, label %if.end13, label %cleanup, !dbg !3618

if.end13:                                         ; preds = %if.end4
  %call14 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call7) #6, !dbg !3619
  %tobool15 = icmp eq i8 %call14, 0, !dbg !3619
  br i1 %tobool15, label %cleanup, label %if.end17, !dbg !3621

if.end17:                                         ; preds = %if.end13
  %call18 = tail call fastcc %union.gimple_statement_d* @chain_of_csts_start(%struct.loop* %loop, %union.tree_node* %call11) #7, !dbg !3622
  %cmp19 = icmp eq %union.gimple_statement_d* %call18, %call1, !dbg !3624
  %.call1 = select i1 %cmp19, %union.gimple_statement_d* %call1, %union.gimple_statement_d* null, !dbg !3605
  br label %cleanup, !dbg !3605

cleanup:                                          ; preds = %if.end13, %if.end4, %if.end, %entry, %if.end17
  %retval.0 = phi %union.gimple_statement_d* [ null, %entry ], [ null, %if.end ], [ null, %if.end4 ], [ null, %if.end13 ], [ %.call1, %if.end17 ], !dbg !3605
  ret %union.gimple_statement_d* %retval.0, !dbg !3625
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) local_unnamed_addr #2

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @get_val_for(%union.tree_node* %x, %union.tree_node* %base) unnamed_addr #5 !dbg !3626 {
entry:
  br label %tailrecurse, !dbg !3639

tailrecurse:                                      ; preds = %if.then13, %entry
  %x.tr = phi %union.tree_node* [ %x, %entry ], [ %call14, %if.then13 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %x.tr, metadata !3630, metadata !DIExpression()), !dbg !3640
  call void @llvm.dbg.value(metadata %union.tree_node* %base, metadata !3631, metadata !DIExpression()), !dbg !3640
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %base) #6, !dbg !3641
  %tobool = icmp eq i8 %call, 0, !dbg !3641
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !3641

cond.true:                                        ; preds = %tailrecurse
  tail call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2107, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !3641
  br label %cond.end, !dbg !3641

cond.end:                                         ; preds = %tailrecurse, %cond.true
  %tobool1 = icmp eq %union.tree_node* %x.tr, null, !dbg !3642
  br i1 %tobool1, label %cleanup.loopexit, label %if.end, !dbg !3644

if.end:                                           ; preds = %cond.end
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %x.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3645
  %0 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !3645
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %0, align 8, !dbg !3645
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %1, metadata !3632, metadata !DIExpression()), !dbg !3640
  %call2 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %1) #7, !dbg !3646
  %cmp = icmp eq i32 %call2, 16, !dbg !3648
  br i1 %cmp, label %cleanup.loopexit, label %if.end4, !dbg !3649

if.end4:                                          ; preds = %if.end
  %call5 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %1) #7, !dbg !3650
  %tobool6 = icmp eq i8 %call5, 0, !dbg !3650
  br i1 %tobool6, label %cond.true7, label %cond.end9, !dbg !3650

cond.true7:                                       ; preds = %if.end4
  tail call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2116, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !3650
  br label %cond.end9, !dbg !3650

cond.end9:                                        ; preds = %if.end4, %cond.true7
  %call11 = tail call zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d* %1) #6, !dbg !3651
  %tobool12 = icmp eq i8 %call11, 0, !dbg !3651
  br i1 %tobool12, label %if.else, label %if.then13, !dbg !3652

if.then13:                                        ; preds = %cond.end9
  %call14 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1) #7, !dbg !3653
  br label %tailrecurse, !dbg !3639

if.else:                                          ; preds = %cond.end9
  %.lcssa = phi %union.gimple_statement_d* [ %1, %cond.end9 ], !dbg !3645
  %call16 = tail call fastcc i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %.lcssa) #7, !dbg !3654
  %cmp17 = icmp eq i32 %call16, 2, !dbg !3655
  br i1 %cmp17, label %land.lhs.true, label %if.else27, !dbg !3656

land.lhs.true:                                    ; preds = %if.else
  %call18 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %.lcssa) #7, !dbg !3657
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3657
  %bf.load = load i64, i64* %2, align 8, !dbg !3657
  %bf.cast3 = and i64 %bf.load, 65535, !dbg !3658
  %cmp20 = icmp eq i64 %bf.cast3, 141, !dbg !3658
  br i1 %cmp20, label %if.then21, label %if.else27, !dbg !3659

if.then21:                                        ; preds = %land.lhs.true
  %call22 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %.lcssa) #7, !dbg !3660
  %call23 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %.lcssa) #7, !dbg !3660
  %call24 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %.lcssa) #7, !dbg !3660
  %call25 = tail call fastcc %union.tree_node* @get_val_for(%union.tree_node* %call24, %union.tree_node* %base) #7, !dbg !3660
  %call26 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 %call22, %union.tree_node* %call23, %union.tree_node* %call25) #6, !dbg !3660
  ret %union.tree_node* %call26, !dbg !3662

if.else27:                                        ; preds = %land.lhs.true, %if.else
  %call28 = tail call fastcc i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %.lcssa) #7, !dbg !3663
  %cmp29 = icmp eq i32 %call28, 1, !dbg !3664
  br i1 %cmp29, label %if.then30, label %if.else54, !dbg !3665

if.then30:                                        ; preds = %if.else27
  %call31 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %.lcssa) #7, !dbg !3666
  call void @llvm.dbg.value(metadata %union.tree_node* %call31, metadata !3633, metadata !DIExpression()), !dbg !3667
  %call32 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %.lcssa) #7, !dbg !3668
  call void @llvm.dbg.value(metadata %union.tree_node* %call32, metadata !3638, metadata !DIExpression()), !dbg !3667
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3669
  %bf.load34 = load i64, i64* %3, align 8, !dbg !3669
  %bf.cast361 = and i64 %bf.load34, 65535, !dbg !3671
  %cmp37 = icmp eq i64 %bf.cast361, 141, !dbg !3671
  br i1 %cmp37, label %if.then38, label %if.else40, !dbg !3672

if.then38:                                        ; preds = %if.then30
  %call39 = tail call fastcc %union.tree_node* @get_val_for(%union.tree_node* %call31, %union.tree_node* %base) #7, !dbg !3673
  call void @llvm.dbg.value(metadata %union.tree_node* %call39, metadata !3633, metadata !DIExpression()), !dbg !3667
  br label %if.end50, !dbg !3674

if.else40:                                        ; preds = %if.then30
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %call32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3675
  %bf.load42 = load i64, i64* %4, align 8, !dbg !3675
  %bf.cast442 = and i64 %bf.load42, 65535, !dbg !3677
  %cmp45 = icmp eq i64 %bf.cast442, 141, !dbg !3677
  br i1 %cmp45, label %if.then46, label %if.else48, !dbg !3678

if.then46:                                        ; preds = %if.else40
  %call47 = tail call fastcc %union.tree_node* @get_val_for(%union.tree_node* %call32, %union.tree_node* %base) #7, !dbg !3679
  call void @llvm.dbg.value(metadata %union.tree_node* %call47, metadata !3638, metadata !DIExpression()), !dbg !3667
  br label %if.end50, !dbg !3680

if.else48:                                        ; preds = %if.else40
  tail call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2139, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !3681
  br label %if.end50

if.end50:                                         ; preds = %if.then46, %if.else48, %if.then38
  %rhs1.0 = phi %union.tree_node* [ %call39, %if.then38 ], [ %call31, %if.else48 ], [ %call31, %if.then46 ], !dbg !3667
  %rhs2.1 = phi %union.tree_node* [ %call32, %if.then38 ], [ %call32, %if.else48 ], [ %call47, %if.then46 ], !dbg !3667
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs2.1, metadata !3638, metadata !DIExpression()), !dbg !3667
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs1.0, metadata !3633, metadata !DIExpression()), !dbg !3667
  %call51 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %.lcssa) #7, !dbg !3682
  %call52 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %.lcssa) #7, !dbg !3682
  %call53 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %call51, %union.tree_node* %call52, %union.tree_node* %rhs1.0, %union.tree_node* %rhs2.1) #6, !dbg !3682
  br label %cleanup

if.else54:                                        ; preds = %if.else27
  tail call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !3683
  br label %cleanup, !dbg !3684

cleanup.loopexit:                                 ; preds = %if.end, %cond.end
  br label %cleanup, !dbg !3662

cleanup:                                          ; preds = %cleanup.loopexit, %if.else54, %if.end50
  %retval.0 = phi %union.tree_node* [ %call53, %if.end50 ], [ null, %if.else54 ], [ %base, %cleanup.loopexit ], !dbg !3640
  ret %union.tree_node* %retval.0, !dbg !3662
}

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @find_loop_niter_by_eval(%struct.loop* %loop, %struct.edge_def** %exit) local_unnamed_addr #5 !dbg !3685 {
entry:
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %ex = alloca %struct.edge_def*, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3687, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.value(metadata %struct.edge_def** %exit, metadata !3688, metadata !DIExpression()), !dbg !3694
  %0 = bitcast %struct.VEC_edge_heap** %exits to i8*, !dbg !3695
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3695
  %call = tail call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %loop) #6, !dbg !3696
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %call, metadata !3690, metadata !DIExpression()), !dbg !3694
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !3697
  %1 = bitcast %struct.edge_def** %ex to i8*, !dbg !3698
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3698
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !3692, metadata !DIExpression()), !dbg !3694
  store %struct.edge_def* null, %struct.edge_def** %exit, align 8, !dbg !3699
  %2 = load i32, i32* @flag_expensive_optimizations, align 4, !dbg !3700
  %tobool = icmp eq i32 %2, 0, !dbg !3700
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3702

land.lhs.true:                                    ; preds = %entry
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %call, metadata !3690, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %call, metadata !3690, metadata !DIExpression()), !dbg !3694
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %call, i64 0, i32 0, !dbg !3703
  %call2 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %base) #7, !dbg !3703
  %cmp = icmp ugt i32 %call2, 1, !dbg !3704
  br i1 %cmp, label %if.then, label %if.end, !dbg !3705

if.then:                                          ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3706
  br label %cleanup, !dbg !3707

if.end:                                           ; preds = %entry, %land.lhs.true
  call void @llvm.dbg.value(metadata i32 0, metadata !3689, metadata !DIExpression()), !dbg !3694
  %4 = bitcast %struct.edge_def** %ex to i64*, !dbg !3708
  %5 = bitcast %struct.edge_def** %exit to i64*, !dbg !3708
  br label %for.cond, !dbg !3712

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = phi %struct.VEC_edge_heap* [ %call, %if.end ], [ %.pre, %for.inc ], !dbg !3713
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.inc ], !dbg !3714
  %niter.0 = phi %union.tree_node* [ null, %if.end ], [ %niter.1, %for.inc ], !dbg !3715
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.0, metadata !3692, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3689, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %6, metadata !3690, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %6, metadata !3690, metadata !DIExpression()), !dbg !3694
  %base5 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %6, i64 0, i32 0, !dbg !3713
  call void @llvm.dbg.value(metadata %struct.edge_def** %ex, metadata !3691, metadata !DIExpression(DW_OP_deref)), !dbg !3694
  %call9 = call fastcc i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %base5, i32 %i.0, %struct.edge_def** nonnull %ex) #7, !dbg !3713
  %tobool10 = icmp eq i32 %call9, 0, !dbg !3716
  br i1 %tobool10, label %for.end, label %for.body, !dbg !3716

for.body:                                         ; preds = %for.cond
  %7 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !3717
  call void @llvm.dbg.value(metadata %struct.edge_def* %7, metadata !3691, metadata !DIExpression()), !dbg !3694
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i64 0, i32 0, !dbg !3719
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3719
  %call11 = call zeroext i8 @just_once_each_iteration_p(%struct.loop* %loop, %struct.basic_block_def* %8) #6, !dbg !3720
  %tobool12 = icmp eq i8 %call11, 0, !dbg !3720
  br i1 %tobool12, label %for.inc, label %if.end14, !dbg !3721

if.end14:                                         ; preds = %for.body
  %9 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !3722
  call void @llvm.dbg.value(metadata %struct.edge_def* %9, metadata !3691, metadata !DIExpression()), !dbg !3694
  %call15 = call %union.tree_node* @loop_niter_by_eval(%struct.loop* %loop, %struct.edge_def* %9) #7, !dbg !3723
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !3693, metadata !DIExpression()), !dbg !3694
  %call16 = call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %call15) #6, !dbg !3724
  %tobool17 = icmp eq i8 %call16, 0, !dbg !3724
  br i1 %tobool17, label %if.end19, label %for.inc, !dbg !3726

if.end19:                                         ; preds = %if.end14
  %tobool20 = icmp eq %union.tree_node* %niter.0, null, !dbg !3727
  br i1 %tobool20, label %if.end25, label %land.lhs.true21, !dbg !3729

land.lhs.true21:                                  ; preds = %if.end19
  %call22 = call i32 @tree_int_cst_lt(%union.tree_node* %call15, %union.tree_node* nonnull %niter.0) #6, !dbg !3730
  %tobool23 = icmp eq i32 %call22, 0, !dbg !3730
  br i1 %tobool23, label %for.inc, label %if.end25, !dbg !3731

if.end25:                                         ; preds = %land.lhs.true21, %if.end19
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !3692, metadata !DIExpression()), !dbg !3694
  %10 = load i64, i64* %4, align 8, !dbg !3732
  store i64 %10, i64* %5, align 8, !dbg !3733
  br label %for.inc, !dbg !3734

for.inc:                                          ; preds = %land.lhs.true21, %if.end14, %for.body, %if.end25
  %niter.1 = phi %union.tree_node* [ %call15, %if.end25 ], [ %niter.0, %for.body ], [ %niter.0, %if.end14 ], [ %niter.0, %land.lhs.true21 ], !dbg !3694
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.1, metadata !3692, metadata !DIExpression()), !dbg !3694
  %inc = add i32 %i.0, 1, !dbg !3735
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3689, metadata !DIExpression()), !dbg !3694
  %.pre = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !3713
  br label %for.cond, !dbg !3736, !llvm.loop !3737

for.end:                                          ; preds = %for.cond
  %niter.0.lcssa = phi %union.tree_node* [ %niter.0, %for.cond ], !dbg !3715
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.0.lcssa, metadata !3692, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.0.lcssa, metadata !3692, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.0.lcssa, metadata !3692, metadata !DIExpression()), !dbg !3694
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap** %exits, metadata !3690, metadata !DIExpression(DW_OP_deref)), !dbg !3694
  call fastcc void @VEC_edge_heap_free(%struct.VEC_edge_heap** nonnull %exits) #7, !dbg !3739
  %tobool26 = icmp eq %union.tree_node* %niter.0.lcssa, null, !dbg !3740
  %11 = load %union.tree_node*, %union.tree_node** @chrec_dont_know, align 8, !dbg !3740
  %cond30 = select i1 %tobool26, %union.tree_node* %11, %union.tree_node* %niter.0.lcssa, !dbg !3740
  br label %cleanup, !dbg !3740

cleanup:                                          ; preds = %for.end, %if.then
  %retval.0 = phi %union.tree_node* [ %3, %if.then ], [ %cond30, %for.end ], !dbg !3694
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !3741
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3741
  ret %union.tree_node* %retval.0, !dbg !3741
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) unnamed_addr #0 !dbg !3742 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !3746, metadata !DIExpression()), !dbg !3747
  %tobool = icmp eq %struct.VEC_edge_base* %vec_, null, !dbg !3748
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3748

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 0, !dbg !3748
  %0 = load i32, i32* %num, align 8, !dbg !3748
  br label %cond.end, !dbg !3748

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !3748
  ret i32 %cond, !dbg !3748
}

declare dso_local zeroext i8 @chrec_contains_undetermined(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @array_at_struct_end_p(%union.tree_node* %ref) local_unnamed_addr #5 !dbg !3749 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %ref, metadata !3753, metadata !DIExpression()), !dbg !3757
  %call = tail call %union.tree_node* @get_base_address(%union.tree_node* %ref) #6, !dbg !3758
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !3754, metadata !DIExpression()), !dbg !3757
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !3759
  br i1 %tobool, label %cleanup, label %lor.lhs.false, !dbg !3761

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3762
  %bf.load = load i64, i64* %0, align 8, !dbg !3762
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3762
  %cmp = icmp eq i64 %bf.cast1, 47, !dbg !3762
  br i1 %cmp, label %if.end, label %lor.lhs.false2, !dbg !3762

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %cmp7 = icmp eq i64 %bf.cast1, 48, !dbg !3762
  br i1 %cmp7, label %if.end, label %lor.lhs.false8, !dbg !3762

lor.lhs.false8:                                   ; preds = %lor.lhs.false2
  %cmp13 = icmp eq i64 %bf.cast1, 49, !dbg !3762
  br i1 %cmp13, label %if.end, label %cleanup, !dbg !3763

if.end:                                           ; preds = %lor.lhs.false8, %lor.lhs.false2, %lor.lhs.false
  br label %for.cond, !dbg !3764

for.cond:                                         ; preds = %for.inc, %if.end
  %ref.addr.0 = phi %union.tree_node* [ %ref, %if.end ], [ %1, %for.inc ]
  call void @llvm.dbg.value(metadata %union.tree_node* %ref.addr.0, metadata !3753, metadata !DIExpression()), !dbg !3757
  %call14 = tail call fastcc zeroext i8 @handled_component_p(%union.tree_node* %ref.addr.0) #7, !dbg !3765
  %tobool15 = icmp eq i8 %call14, 0, !dbg !3768
  br i1 %tobool15, label %for.end, label %for.body, !dbg !3768

for.body:                                         ; preds = %for.cond
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %ref.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !3769
  %1 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !3769
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !3755, metadata !DIExpression()), !dbg !3757
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %ref.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3771
  %bf.load17 = load i64, i64* %2, align 8, !dbg !3771
  %bf.cast197 = and i64 %bf.load17, 65535, !dbg !3773
  %cmp20 = icmp eq i64 %bf.cast197, 41, !dbg !3773
  br i1 %cmp20, label %if.then21, label %for.inc, !dbg !3774

if.then21:                                        ; preds = %for.body
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3775
  %3 = bitcast %union.tree_node** %type to i64**, !dbg !3775
  %4 = load i64*, i64** %3, align 8, !dbg !3775
  %bf.load23 = load i64, i64* %4, align 8, !dbg !3775
  %bf.cast258 = and i64 %bf.load23, 65535, !dbg !3778
  %cmp26 = icmp eq i64 %bf.cast258, 17, !dbg !3778
  br i1 %cmp26, label %for.inc, label %if.end28, !dbg !3779

if.end28:                                         ; preds = %if.then21
  %arrayidx31 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !3780
  %5 = bitcast %union.tree_node** %arrayidx31 to %struct.tree_common**, !dbg !3780
  %6 = load %struct.tree_common*, %struct.tree_common** %5, align 8, !dbg !3780
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %6, i64 0, i32 1, !dbg !3781
  %7 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !3781
  %tobool33 = icmp eq %union.tree_node* %7, null, !dbg !3781
  br i1 %tobool33, label %for.inc, label %cleanup.loopexit, !dbg !3783

for.inc:                                          ; preds = %if.end28, %for.body, %if.then21
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !3753, metadata !DIExpression()), !dbg !3757
  br label %for.cond, !dbg !3784, !llvm.loop !3785

for.end:                                          ; preds = %for.cond
  %ref.addr.0.lcssa = phi %union.tree_node* [ %ref.addr.0, %for.cond ]
  call void @llvm.dbg.value(metadata %union.tree_node* %ref.addr.0.lcssa, metadata !3753, metadata !DIExpression()), !dbg !3757
  call void @llvm.dbg.value(metadata %union.tree_node* %ref.addr.0.lcssa, metadata !3753, metadata !DIExpression()), !dbg !3757
  call void @llvm.dbg.value(metadata %union.tree_node* %ref.addr.0.lcssa, metadata !3753, metadata !DIExpression()), !dbg !3757
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %ref.addr.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3787
  %bf.load38 = load i64, i64* %8, align 8, !dbg !3787
  %bf.cast404 = and i64 %bf.load38, 65535, !dbg !3787
  %cmp41 = icmp eq i64 %bf.cast404, 47, !dbg !3787
  br i1 %cmp41, label %cleanup, label %lor.lhs.false42, !dbg !3787

lor.lhs.false42:                                  ; preds = %for.end
  %cmp47 = icmp eq i64 %bf.cast404, 48, !dbg !3787
  br i1 %cmp47, label %cleanup, label %lor.lhs.false48, !dbg !3787

lor.lhs.false48:                                  ; preds = %lor.lhs.false42
  %cmp53 = icmp eq i64 %bf.cast404, 49, !dbg !3787
  br i1 %cmp53, label %cleanup, label %cond.true, !dbg !3787

cond.true:                                        ; preds = %lor.lhs.false48
  tail call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 2654, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !3787
  br label %cleanup, !dbg !3787

cleanup.loopexit:                                 ; preds = %if.end28
  br label %cleanup, !dbg !3788

cleanup:                                          ; preds = %cleanup.loopexit, %entry, %cond.true, %lor.lhs.false48, %lor.lhs.false42, %for.end, %lor.lhs.false8
  %retval.0 = phi i8 [ 0, %lor.lhs.false8 ], [ 0, %entry ], [ 1, %for.end ], [ 1, %lor.lhs.false42 ], [ 1, %lor.lhs.false48 ], [ 1, %cond.true ], [ 0, %cleanup.loopexit ], !dbg !3757
  ret i8 %retval.0, !dbg !3788
}

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @handled_component_p(%union.tree_node* %t) unnamed_addr #0 !dbg !3789 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !3793, metadata !DIExpression()), !dbg !3794
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3795
  %bf.load = load i64, i64* %0, align 8, !dbg !3795
  %1 = trunc i64 %bf.load to i16, !dbg !3795
  switch i16 %1, label %sw.default [
    i16 42, label %return
    i16 41, label %return
    i16 45, label %return
    i16 46, label %return
    i16 118, label %return
    i16 43, label %return
    i16 44, label %return
  ], !dbg !3796

sw.default:                                       ; preds = %entry
  br label %return, !dbg !3797

return:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.default
  %retval.0 = phi i8 [ 0, %sw.default ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], !dbg !3799
  ret i8 %retval.0, !dbg !3800
}

declare dso_local void @fancy_abort(i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @estimate_numbers_of_iterations_loop(%struct.loop* %loop) local_unnamed_addr #5 !dbg !3801 {
entry:
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %niter_desc = alloca %struct.tree_niter_desc, align 8
  %ex = alloca %struct.edge_def*, align 8
  %bound = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3805, metadata !DIExpression()), !dbg !3816
  %0 = bitcast %struct.VEC_edge_heap** %exits to i8*, !dbg !3817
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3817
  %1 = bitcast %struct.tree_niter_desc* %niter_desc to i8*, !dbg !3818
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %1) #8, !dbg !3818
  %2 = bitcast %struct.edge_def** %ex to i8*, !dbg !3819
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #8, !dbg !3819
  %3 = bitcast %struct.double_int* %bound to i8*, !dbg !3820
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #8, !dbg !3820
  %estimate_state = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 16, !dbg !3821
  %4 = load i32, i32* %estimate_state, align 4, !dbg !3821
  %cmp = icmp eq i32 %4, 0, !dbg !3823
  br i1 %cmp, label %if.end, label %cleanup, !dbg !3824

if.end:                                           ; preds = %entry
  store i32 1, i32* %estimate_state, align 4, !dbg !3825
  %any_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 14, !dbg !3826
  store i8 0, i8* %any_upper_bound, align 8, !dbg !3827
  %any_estimate = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 15, !dbg !3828
  store i8 0, i8* %any_estimate, align 1, !dbg !3829
  %call = tail call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %loop) #6, !dbg !3830
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %call, metadata !3806, metadata !DIExpression()), !dbg !3816
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !3831
  call void @llvm.dbg.value(metadata i32 0, metadata !3809, metadata !DIExpression()), !dbg !3816
  %niter8 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i64 0, i32 2, !dbg !3832
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i64 0, i32 1, !dbg !3836
  %5 = bitcast %union.tree_node** %may_be_zero to i64**, !dbg !3836
  %6 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i64 0, i32 3, i32 0, !dbg !3832
  %7 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter_desc, i64 0, i32 3, i32 1, !dbg !3832
  br label %for.cond, !dbg !3838

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = phi %struct.VEC_edge_heap* [ %call, %if.end ], [ %.pre, %for.inc ], !dbg !3839
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.inc ], !dbg !3840
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3809, metadata !DIExpression()), !dbg !3816
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %8, metadata !3806, metadata !DIExpression()), !dbg !3816
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap* %8, metadata !3806, metadata !DIExpression()), !dbg !3816
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %8, i64 0, i32 0, !dbg !3839
  call void @llvm.dbg.value(metadata %struct.edge_def** %ex, metadata !3811, metadata !DIExpression(DW_OP_deref)), !dbg !3816
  %call2 = call fastcc i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %base, i32 %i.0, %struct.edge_def** nonnull %ex) #7, !dbg !3839
  %tobool3 = icmp eq i32 %call2, 0, !dbg !3841
  br i1 %tobool3, label %for.end, label %for.body, !dbg !3841

for.body:                                         ; preds = %for.cond
  %9 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !3842
  call void @llvm.dbg.value(metadata %struct.edge_def* %9, metadata !3811, metadata !DIExpression()), !dbg !3816
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %niter_desc, metadata !3810, metadata !DIExpression(DW_OP_deref)), !dbg !3816
  %call4 = call zeroext i8 @number_of_iterations_exit(%struct.loop* %loop, %struct.edge_def* %9, %struct.tree_niter_desc* nonnull %niter_desc, i8 zeroext 0) #7, !dbg !3844
  %tobool5 = icmp eq i8 %call4, 0, !dbg !3844
  br i1 %tobool5, label %for.inc, label %if.end7, !dbg !3845

if.end7:                                          ; preds = %for.body
  %10 = load %union.tree_node*, %union.tree_node** %niter8, align 8, !dbg !3846
  call void @llvm.dbg.value(metadata %union.tree_node* %10, metadata !3807, metadata !DIExpression()), !dbg !3816
  %type9 = getelementptr inbounds %union.tree_node, %union.tree_node* %10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3847
  %11 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !3847
  call void @llvm.dbg.value(metadata %union.tree_node* %11, metadata !3808, metadata !DIExpression()), !dbg !3816
  %12 = load i64*, i64** %5, align 8, !dbg !3848
  %bf.load = load i64, i64* %12, align 8, !dbg !3848
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3849
  %cmp11 = icmp eq i64 %bf.cast1, 23, !dbg !3849
  br i1 %cmp11, label %if.end16, label %if.then12, !dbg !3850

if.then12:                                        ; preds = %if.end7
  %13 = bitcast i64* %12 to %union.tree_node*, !dbg !3850
  %call14 = call %union.tree_node* @build_int_cst(%union.tree_node* %11, i64 0) #6, !dbg !3851
  %call15 = call %union.tree_node* @build3_stat(i32 56, %union.tree_node* %11, %union.tree_node* %13, %union.tree_node* %call14, %union.tree_node* %10) #6, !dbg !3851
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !3807, metadata !DIExpression()), !dbg !3816
  br label %if.end16, !dbg !3852

if.end16:                                         ; preds = %if.end7, %if.then12
  %niter.0 = phi %union.tree_node* [ %call15, %if.then12 ], [ %10, %if.end7 ], !dbg !3832
  call void @llvm.dbg.value(metadata %union.tree_node* %niter.0, metadata !3807, metadata !DIExpression()), !dbg !3816
  %14 = load %struct.edge_def*, %struct.edge_def** %ex, align 8, !dbg !3853
  call void @llvm.dbg.value(metadata %struct.edge_def* %14, metadata !3811, metadata !DIExpression()), !dbg !3816
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i64 0, i32 0, !dbg !3854
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3854
  %call17 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %15) #6, !dbg !3855
  %16 = load i64, i64* %6, align 8, !dbg !3856
  %17 = load i64, i64* %7, align 8, !dbg !3856
  call fastcc void @record_estimate(%struct.loop* %loop, %union.tree_node* %niter.0, i64 %16, i64 %17, %union.gimple_statement_d* %call17, i8 zeroext 1, i8 zeroext 1, i8 zeroext 1) #7, !dbg !3856
  br label %for.inc, !dbg !3857

for.inc:                                          ; preds = %for.body, %if.end16
  %inc = add i32 %i.0, 1, !dbg !3858
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3809, metadata !DIExpression()), !dbg !3816
  %.pre = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !3839
  br label %for.cond, !dbg !3859, !llvm.loop !3860

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.VEC_edge_heap** %exits, metadata !3806, metadata !DIExpression(DW_OP_deref)), !dbg !3816
  call fastcc void @VEC_edge_heap_free(%struct.VEC_edge_heap** nonnull %exits) #7, !dbg !3862
  call fastcc void @infer_loop_bounds_from_undefined(%struct.loop* %loop) #7, !dbg !3863
  %header = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 2, !dbg !3864
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3864
  %count = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i64 0, i32 8, !dbg !3865
  %19 = load i64, i64* %count, align 8, !dbg !3865
  %cmp18 = icmp eq i64 %19, 0, !dbg !3866
  br i1 %cmp18, label %if.end22, label %if.then19, !dbg !3867

if.then19:                                        ; preds = %for.end
  %call20 = call i64 @expected_loop_iterations_unbounded(%struct.loop* %loop) #6, !dbg !3868
  %add = add nsw i64 %call20, 1, !dbg !3869
  call void @llvm.dbg.value(metadata i64 %add, metadata !3813, metadata !DIExpression()), !dbg !3870
  %20 = bitcast %struct.double_int* %tmp to i8*, !dbg !3871
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #8, !dbg !3871
  %call21 = call fastcc { i64, i64 } @gcov_type_to_double_int(i64 %add) #7, !dbg !3871
  %21 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 0, !dbg !3871
  %22 = extractvalue { i64, i64 } %call21, 0, !dbg !3871
  store i64 %22, i64* %21, align 8, !dbg !3871
  %23 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 1, !dbg !3871
  %24 = extractvalue { i64, i64 } %call21, 1, !dbg !3871
  store i64 %24, i64* %23, align 8, !dbg !3871
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* nonnull align 8 %20, i64 16, i1 false), !dbg !3871
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #8, !dbg !3871
  %25 = getelementptr inbounds %struct.double_int, %struct.double_int* %bound, i64 0, i32 0, !dbg !3872
  %26 = load i64, i64* %25, align 8, !dbg !3872
  %27 = getelementptr inbounds %struct.double_int, %struct.double_int* %bound, i64 0, i32 1, !dbg !3872
  %28 = load i64, i64* %27, align 8, !dbg !3872
  call fastcc void @record_niter_bound(%struct.loop* %loop, i64 %26, i64 %28, i8 zeroext 1, i8 zeroext 0) #7, !dbg !3872
  br label %if.end22, !dbg !3873

if.end22:                                         ; preds = %for.end, %if.then19
  %29 = load i8, i8* %any_upper_bound, align 8, !dbg !3874
  %tobool24 = icmp eq i8 %29, 0, !dbg !3876
  br i1 %tobool24, label %cleanup, label %land.lhs.true, !dbg !3877

land.lhs.true:                                    ; preds = %if.end22
  %30 = load i8, i8* %any_estimate, align 1, !dbg !3878
  %tobool27 = icmp eq i8 %30, 0, !dbg !3879
  br i1 %tobool27, label %cleanup, label %land.lhs.true28, !dbg !3880

land.lhs.true28:                                  ; preds = %land.lhs.true
  %31 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 12, i32 0, !dbg !3881
  %32 = load i64, i64* %31, align 8, !dbg !3881
  %33 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 12, i32 1, !dbg !3881
  %34 = load i64, i64* %33, align 8, !dbg !3881
  %35 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 13, i32 0, !dbg !3881
  %36 = load i64, i64* %35, align 8, !dbg !3881
  %37 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 13, i32 1, !dbg !3881
  %38 = load i64, i64* %37, align 8, !dbg !3881
  %call29 = call i32 @double_int_ucmp(i64 %32, i64 %34, i64 %36, i64 %38) #6, !dbg !3881
  %cmp30 = icmp slt i32 %call29, 0, !dbg !3882
  br i1 %cmp30, label %if.then32, label %cleanup, !dbg !3883

if.then32:                                        ; preds = %land.lhs.true28
  %nb_iterations_estimate33 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 13, !dbg !3884
  %nb_iterations_upper_bound34 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 12, !dbg !3885
  %39 = bitcast %struct.double_int* %nb_iterations_estimate33 to i8*, !dbg !3885
  %40 = bitcast %struct.double_int* %nb_iterations_upper_bound34 to i8*, !dbg !3885
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %39, i8* nonnull align 8 %40, i64 16, i1 false), !dbg !3885
  br label %cleanup, !dbg !3886

cleanup:                                          ; preds = %land.lhs.true, %if.end22, %entry, %land.lhs.true28, %if.then32
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #8, !dbg !3887
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #8, !dbg !3887
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %1) #8, !dbg !3887
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !3887
  ret void, !dbg !3887
}

declare dso_local %union.tree_node* @build3_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @record_estimate(%struct.loop* %loop, %union.tree_node* %bound, i64 %i_bound.coerce0, i64 %i_bound.coerce1, %union.gimple_statement_d* %at_stmt, i8 zeroext %is_exit, i8 zeroext %realistic, i8 zeroext %upper) unnamed_addr #5 !dbg !3888 {
entry:
  %i_bound = alloca %struct.double_int, align 8
  %delta = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  %tmp36 = alloca %struct.double_int, align 8
  %tmp39 = alloca %struct.double_int, align 8
  %0 = getelementptr inbounds %struct.double_int, %struct.double_int* %i_bound, i64 0, i32 0
  store i64 %i_bound.coerce0, i64* %0, align 8
  %1 = getelementptr inbounds %struct.double_int, %struct.double_int* %i_bound, i64 0, i32 1
  store i64 %i_bound.coerce1, i64* %1, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3892, metadata !DIExpression()), !dbg !3904
  call void @llvm.dbg.value(metadata %union.tree_node* %bound, metadata !3893, metadata !DIExpression()), !dbg !3904
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %at_stmt, metadata !3895, metadata !DIExpression()), !dbg !3904
  call void @llvm.dbg.value(metadata i8 %is_exit, metadata !3896, metadata !DIExpression()), !dbg !3904
  call void @llvm.dbg.value(metadata i8 %realistic, metadata !3897, metadata !DIExpression()), !dbg !3904
  call void @llvm.dbg.value(metadata i8 %upper, metadata !3898, metadata !DIExpression()), !dbg !3904
  %2 = bitcast %struct.double_int* %delta to i8*, !dbg !3905
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !3905
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3906
  %tobool = icmp eq %struct._IO_FILE* %3, null, !dbg !3906
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !3908

land.lhs.true:                                    ; preds = %entry
  %4 = load i32, i32* @dump_flags, align 4, !dbg !3909
  %and = and i32 %4, 8, !dbg !3910
  %tobool1 = icmp eq i32 %and, 0, !dbg !3910
  br i1 %tobool1, label %if.end, label %if.then, !dbg !3911

if.then:                                          ; preds = %land.lhs.true
  %tobool2 = icmp eq i8 %is_exit, 0, !dbg !3912
  %cond = select i1 %tobool2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35, i64 0, i64 0), !dbg !3912
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.34, i64 0, i64 0), i8* %cond) #6, !dbg !3914
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3915
  tail call void @print_gimple_stmt(%struct._IO_FILE* %5, %union.gimple_statement_d* %at_stmt, i32 0, i32 2) #6, !dbg !3916
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3917
  %tobool4 = icmp eq i8 %upper, 0, !dbg !3918
  %cond5 = select i1 %tobool4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i64 0, i64 0), !dbg !3918
  %call6 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.36, i64 0, i64 0), i8* %cond5) #6, !dbg !3919
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3920
  tail call void @print_generic_expr(%struct._IO_FILE* %7, %union.tree_node* %bound, i32 2) #6, !dbg !3921
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3922
  %call7 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.38, i64 0, i64 0)) #6, !dbg !3923
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3924
  tail call void @dump_double_int(%struct._IO_FILE* %9, i64 %i_bound.coerce0, i64 %i_bound.coerce1, i8 zeroext 1) #6, !dbg !3925
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3926
  %num = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 0, !dbg !3927
  %11 = load i32, i32* %num, align 8, !dbg !3927
  %call8 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.39, i64 0, i64 0), i32 %11) #6, !dbg !3928
  br label %if.end, !dbg !3929

if.end:                                           ; preds = %land.lhs.true, %entry, %if.then
  %12 = getelementptr inbounds %union.tree_node, %union.tree_node* %bound, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3930
  %bf.load = load i64, i64* %12, align 8, !dbg !3930
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3932
  %cmp = icmp eq i64 %bf.cast1, 23, !dbg !3932
  %spec.select = select i1 %cmp, i8 %realistic, i8 0, !dbg !3933
  call void @llvm.dbg.value(metadata i8 %spec.select, metadata !3897, metadata !DIExpression()), !dbg !3904
  %13 = or i8 %spec.select, %upper, !dbg !3934
  %14 = icmp eq i8 %13, 0, !dbg !3934
  br i1 %14, label %cleanup, label %if.end16, !dbg !3934

if.end16:                                         ; preds = %if.end
  %tobool17 = icmp eq i8 %upper, 0, !dbg !3936
  br i1 %tobool17, label %if.end23, label %if.then18, !dbg !3937

if.then18:                                        ; preds = %if.end16
  %call19 = tail call i8* @ggc_alloc_stat(i64 40) #6, !dbg !3938
  call void @llvm.dbg.value(metadata i8* %call19, metadata !3901, metadata !DIExpression()), !dbg !3939
  %bound20 = getelementptr inbounds i8, i8* %call19, i64 8, !dbg !3940
  %15 = bitcast %struct.double_int* %i_bound to i8*, !dbg !3941
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %bound20, i8* nonnull align 8 %15, i64 16, i1 false), !dbg !3941
  %stmt = bitcast i8* %call19 to %union.gimple_statement_d**, !dbg !3942
  store %union.gimple_statement_d* %at_stmt, %union.gimple_statement_d** %stmt, align 8, !dbg !3943
  %16 = getelementptr inbounds i8, i8* %call19, i64 24, !dbg !3944
  store i8 %is_exit, i8* %16, align 8, !dbg !3945
  %bounds = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 17, !dbg !3946
  %17 = bitcast %struct.nb_iter_bound** %bounds to i64*, !dbg !3946
  %18 = load i64, i64* %17, align 8, !dbg !3946
  %next = getelementptr inbounds i8, i8* %call19, i64 32, !dbg !3947
  %19 = bitcast i8* %next to i64*, !dbg !3948
  store i64 %18, i64* %19, align 8, !dbg !3948
  %20 = bitcast %struct.nb_iter_bound** %bounds to i8**, !dbg !3949
  store i8* %call19, i8** %20, align 8, !dbg !3949
  br label %if.end23, !dbg !3950

if.end23:                                         ; preds = %if.end16, %if.then18
  %call24 = tail call %struct.edge_def* @single_exit(%struct.loop* %loop) #6, !dbg !3951
  call void @llvm.dbg.value(metadata %struct.edge_def* %call24, metadata !3900, metadata !DIExpression()), !dbg !3904
  %tobool26 = icmp eq i8 %is_exit, 0, !dbg !3952
  br i1 %tobool26, label %lor.lhs.false, label %if.then34, !dbg !3954

lor.lhs.false:                                    ; preds = %if.end23
  %cmp27 = icmp eq %struct.edge_def* %call24, null, !dbg !3955
  br i1 %cmp27, label %if.else, label %land.lhs.true29, !dbg !3956

land.lhs.true29:                                  ; preds = %lor.lhs.false
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call24, i64 0, i32 0, !dbg !3957
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3957
  %call30 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %at_stmt) #7, !dbg !3958
  %call31 = tail call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %21, %struct.basic_block_def* %call30) #6, !dbg !3959
  %tobool33 = icmp eq i8 %call31, 0, !dbg !3959
  br i1 %tobool33, label %if.else, label %if.then34, !dbg !3960

if.then34:                                        ; preds = %land.lhs.true29, %if.end23
  %22 = bitcast %struct.double_int* %tmp to i8*, !dbg !3961
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #8, !dbg !3961
  %call35 = tail call fastcc { i64, i64 } @shwi_to_double_int(i64 1) #7, !dbg !3961
  %23 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 0, !dbg !3961
  %24 = extractvalue { i64, i64 } %call35, 0, !dbg !3961
  store i64 %24, i64* %23, align 8, !dbg !3961
  %25 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 1, !dbg !3961
  %26 = extractvalue { i64, i64 } %call35, 1, !dbg !3961
  store i64 %26, i64* %25, align 8, !dbg !3961
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %22, i64 16, i1 false), !dbg !3961
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #8, !dbg !3961
  br label %if.end38, !dbg !3962

if.else:                                          ; preds = %land.lhs.true29, %lor.lhs.false
  %27 = bitcast %struct.double_int* %tmp36 to i8*, !dbg !3963
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %27) #8, !dbg !3963
  %call37 = tail call fastcc { i64, i64 } @shwi_to_double_int(i64 2) #7, !dbg !3963
  %28 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp36, i64 0, i32 0, !dbg !3963
  %29 = extractvalue { i64, i64 } %call37, 0, !dbg !3963
  store i64 %29, i64* %28, align 8, !dbg !3963
  %30 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp36, i64 0, i32 1, !dbg !3963
  %31 = extractvalue { i64, i64 } %call37, 1, !dbg !3963
  store i64 %31, i64* %30, align 8, !dbg !3963
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %27, i64 16, i1 false), !dbg !3963
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %27) #8, !dbg !3963
  br label %if.end38

if.end38:                                         ; preds = %if.else, %if.then34
  %32 = bitcast %struct.double_int* %tmp39 to i8*, !dbg !3964
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %32) #8, !dbg !3964
  %33 = getelementptr inbounds %struct.double_int, %struct.double_int* %delta, i64 0, i32 0, !dbg !3964
  %34 = load i64, i64* %33, align 8, !dbg !3964
  %35 = getelementptr inbounds %struct.double_int, %struct.double_int* %delta, i64 0, i32 1, !dbg !3964
  %36 = load i64, i64* %35, align 8, !dbg !3964
  %call40 = tail call { i64, i64 } @double_int_add(i64 %i_bound.coerce0, i64 %i_bound.coerce1, i64 %34, i64 %36) #6, !dbg !3964
  %37 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp39, i64 0, i32 0, !dbg !3964
  %38 = extractvalue { i64, i64 } %call40, 0, !dbg !3964
  store i64 %38, i64* %37, align 8, !dbg !3964
  %39 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp39, i64 0, i32 1, !dbg !3964
  %40 = extractvalue { i64, i64 } %call40, 1, !dbg !3964
  store i64 %40, i64* %39, align 8, !dbg !3964
  %41 = bitcast %struct.double_int* %i_bound to i8*, !dbg !3964
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %41, i8* nonnull align 8 %32, i64 16, i1 false), !dbg !3964
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %32) #8, !dbg !3964
  %42 = load i64, i64* %0, align 8, !dbg !3965
  %43 = load i64, i64* %1, align 8, !dbg !3965
  %call41 = tail call i32 @double_int_ucmp(i64 %42, i64 %43, i64 %34, i64 %36) #6, !dbg !3965
  %cmp42 = icmp slt i32 %call41, 0, !dbg !3967
  br i1 %cmp42, label %cleanup, label %if.end45, !dbg !3968

if.end45:                                         ; preds = %if.end38
  tail call fastcc void @record_niter_bound(%struct.loop* %loop, i64 %42, i64 %43, i8 zeroext %spec.select, i8 zeroext %upper) #7, !dbg !3969
  br label %cleanup, !dbg !3970

cleanup:                                          ; preds = %if.end, %if.end38, %if.end45
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !3970
  ret void, !dbg !3970
}

; Function Attrs: nounwind uwtable
define internal fastcc void @infer_loop_bounds_from_undefined(%struct.loop* %loop) unnamed_addr #5 !dbg !3971 {
entry:
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3973, metadata !DIExpression()), !dbg !3986
  %0 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !3987
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !3987
  %call = tail call %struct.basic_block_def** @get_loop_body(%struct.loop* %loop) #6, !dbg !3988
  call void @llvm.dbg.value(metadata %struct.basic_block_def** %call, metadata !3975, metadata !DIExpression()), !dbg !3986
  call void @llvm.dbg.value(metadata i32 0, metadata !3974, metadata !DIExpression()), !dbg !3986
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 6, !dbg !3989
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 3, !dbg !3990
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3991
  br label %for.cond, !dbg !3992

for.cond:                                         ; preds = %for.inc7, %entry
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc7 ], [ 0, %entry ], !dbg !3993
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !3974, metadata !DIExpression()), !dbg !3986
  %2 = load i32, i32* %num_nodes, align 4, !dbg !3994
  %3 = zext i32 %2 to i64, !dbg !3995
  %cmp = icmp ult i64 %indvars.iv, %3, !dbg !3995
  br i1 %cmp, label %for.body, label %for.end8, !dbg !3996

for.body:                                         ; preds = %for.cond
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %call, i64 %indvars.iv, !dbg !3997
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3997
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %4, metadata !3977, metadata !DIExpression()), !dbg !3986
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3998
  %call1 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %5, %struct.basic_block_def* %4) #6, !dbg !3999
  call void @llvm.dbg.value(metadata i8 %call1, metadata !3978, metadata !DIExpression()), !dbg !3986
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4000
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %4) #7, !dbg !4000
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4000
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4000
  %tobool6 = icmp eq i8 %call1, 0, !dbg !4001
  br i1 %tobool6, label %for.body.split.us, label %for.body.for.body.split_crit_edge, !dbg !4003

for.body.for.body.split_crit_edge:                ; preds = %for.body
  br label %for.cond2, !dbg !4003

for.body.split.us:                                ; preds = %for.body
  br label %for.cond2.us, !dbg !4003

for.cond2.us:                                     ; preds = %for.body4.us, %for.body.split.us
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !3976, metadata !DIExpression(DW_OP_deref)), !dbg !3986
  %call3.us = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !4004
  %tobool.us = icmp eq i8 %call3.us, 0, !dbg !4005
  br i1 %tobool.us, label %for.body4.us, label %for.inc7.us-lcssa.us, !dbg !4006

for.body4.us:                                     ; preds = %for.cond2.us
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !3976, metadata !DIExpression(DW_OP_deref)), !dbg !3986
  %call5.us = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !4007
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call5.us, metadata !3979, metadata !DIExpression()), !dbg !4008
  call fastcc void @infer_loop_bounds_from_array(%struct.loop* %loop, %union.gimple_statement_d* %call5.us, i8 zeroext 0) #7, !dbg !4009
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !3976, metadata !DIExpression(DW_OP_deref)), !dbg !3986
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %bsi) #7, !dbg !4010
  br label %for.cond2.us, !dbg !4011, !llvm.loop !4012

for.inc7.us-lcssa.us:                             ; preds = %for.cond2.us
  br label %for.inc7, !dbg !4014

for.cond2:                                        ; preds = %for.body4, %for.body.for.body.split_crit_edge
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !3976, metadata !DIExpression(DW_OP_deref)), !dbg !3986
  %call3 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !4004
  %tobool = icmp eq i8 %call3, 0, !dbg !4005
  br i1 %tobool, label %for.body4, label %for.inc7.us-lcssa, !dbg !4006

for.body4:                                        ; preds = %for.cond2
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !3976, metadata !DIExpression(DW_OP_deref)), !dbg !3986
  %call5 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !4007
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call5, metadata !3979, metadata !DIExpression()), !dbg !4008
  call fastcc void @infer_loop_bounds_from_array(%struct.loop* %loop, %union.gimple_statement_d* %call5, i8 zeroext %call1) #7, !dbg !4009
  call fastcc void @infer_loop_bounds_from_signedness(%struct.loop* %loop, %union.gimple_statement_d* %call5) #7, !dbg !4015
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !3976, metadata !DIExpression(DW_OP_deref)), !dbg !3986
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %bsi) #7, !dbg !4010
  br label %for.cond2, !dbg !4011, !llvm.loop !4012

for.inc7.us-lcssa:                                ; preds = %for.cond2
  br label %for.inc7, !dbg !4014

for.inc7:                                         ; preds = %for.inc7.us-lcssa.us, %for.inc7.us-lcssa
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !4014
  br label %for.cond, !dbg !4016, !llvm.loop !4017

for.end8:                                         ; preds = %for.cond
  %6 = bitcast %struct.basic_block_def** %call to i8*, !dbg !4019
  call void @free(i8* %6) #6, !dbg !4020
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4021
  ret void, !dbg !4021
}

declare dso_local i64 @expected_loop_iterations_unbounded(%struct.loop*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc { i64, i64 } @gcov_type_to_double_int(i64 %val) unnamed_addr #5 !dbg !4022 {
entry:
  call void @llvm.dbg.value(metadata i64 %val, metadata !4026, metadata !DIExpression()), !dbg !4028
  %shr = ashr i64 %val, 63, !dbg !4029
  call void @llvm.dbg.value(metadata i64 %shr, metadata !4026, metadata !DIExpression()), !dbg !4028
  call void @llvm.dbg.value(metadata i64 %shr, metadata !4026, metadata !DIExpression()), !dbg !4028
  %0 = insertvalue { i64, i64 } undef, i64 %val, 0, !dbg !4030
  %1 = insertvalue { i64, i64 } %0, i64 %shr, 1, !dbg !4030
  ret { i64, i64 } %1, !dbg !4030
}

; Function Attrs: nounwind uwtable
define internal fastcc void @record_niter_bound(%struct.loop* %loop, i64 %i_bound.coerce0, i64 %i_bound.coerce1, i8 zeroext %realistic, i8 zeroext %upper) unnamed_addr #5 !dbg !4031 {
entry:
  %i_bound = alloca %struct.double_int, align 8
  %0 = getelementptr inbounds %struct.double_int, %struct.double_int* %i_bound, i64 0, i32 0
  store i64 %i_bound.coerce0, i64* %0, align 8
  %1 = getelementptr inbounds %struct.double_int, %struct.double_int* %i_bound, i64 0, i32 1
  store i64 %i_bound.coerce1, i64* %1, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !4035, metadata !DIExpression()), !dbg !4039
  call void @llvm.dbg.value(metadata i8 %realistic, metadata !4037, metadata !DIExpression()), !dbg !4039
  call void @llvm.dbg.value(metadata i8 %upper, metadata !4038, metadata !DIExpression()), !dbg !4039
  %tobool = icmp eq i8 %upper, 0, !dbg !4040
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4042

land.lhs.true:                                    ; preds = %entry
  %any_upper_bound = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 14, !dbg !4043
  %2 = load i8, i8* %any_upper_bound, align 8, !dbg !4043
  %tobool1 = icmp eq i8 %2, 0, !dbg !4044
  br i1 %tobool1, label %if.then, label %lor.lhs.false, !dbg !4045

lor.lhs.false:                                    ; preds = %land.lhs.true
  %3 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 12, i32 0, !dbg !4046
  %4 = load i64, i64* %3, align 8, !dbg !4046
  %5 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 12, i32 1, !dbg !4046
  %6 = load i64, i64* %5, align 8, !dbg !4046
  %call = tail call i32 @double_int_ucmp(i64 %i_bound.coerce0, i64 %i_bound.coerce1, i64 %4, i64 %6) #6, !dbg !4046
  %cmp = icmp slt i32 %call, 0, !dbg !4047
  br i1 %cmp, label %if.then, label %if.end, !dbg !4048

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false
  store i8 1, i8* %any_upper_bound, align 8, !dbg !4049
  %nb_iterations_upper_bound4 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 12, !dbg !4051
  %7 = bitcast %struct.double_int* %nb_iterations_upper_bound4 to i8*, !dbg !4052
  %8 = bitcast %struct.double_int* %i_bound to i8*, !dbg !4052
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %7, i8* nonnull align 8 %8, i64 16, i1 false), !dbg !4052
  br label %if.end, !dbg !4053

if.end:                                           ; preds = %entry, %if.then, %lor.lhs.false
  %tobool6 = icmp eq i8 %realistic, 0, !dbg !4054
  br i1 %tobool6, label %if.end16, label %land.lhs.true7, !dbg !4056

land.lhs.true7:                                   ; preds = %if.end
  %any_estimate = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 15, !dbg !4057
  %9 = load i8, i8* %any_estimate, align 1, !dbg !4057
  %tobool8 = icmp eq i8 %9, 0, !dbg !4058
  br i1 %tobool8, label %if.then13, label %lor.lhs.false9, !dbg !4059

lor.lhs.false9:                                   ; preds = %land.lhs.true7
  %10 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 13, i32 0, !dbg !4060
  %11 = load i64, i64* %10, align 8, !dbg !4060
  %12 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 13, i32 1, !dbg !4060
  %13 = load i64, i64* %12, align 8, !dbg !4060
  %call10 = tail call i32 @double_int_ucmp(i64 %i_bound.coerce0, i64 %i_bound.coerce1, i64 %11, i64 %13) #6, !dbg !4060
  %cmp11 = icmp slt i32 %call10, 0, !dbg !4061
  br i1 %cmp11, label %if.then13, label %if.end16, !dbg !4062

if.then13:                                        ; preds = %land.lhs.true7, %lor.lhs.false9
  store i8 1, i8* %any_estimate, align 1, !dbg !4063
  %nb_iterations_estimate15 = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 13, !dbg !4065
  %14 = bitcast %struct.double_int* %nb_iterations_estimate15 to i8*, !dbg !4066
  %15 = bitcast %struct.double_int* %i_bound to i8*, !dbg !4066
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* nonnull align 8 %15, i64 16, i1 false), !dbg !4066
  br label %if.end16, !dbg !4067

if.end16:                                         ; preds = %if.end, %if.then13, %lor.lhs.false9
  ret void, !dbg !4068
}

declare dso_local i32 @double_int_ucmp(i64, i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @estimate_numbers_of_iterations() local_unnamed_addr #5 !dbg !4069 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %0 = bitcast %struct.loop_iterator* %li to i8*, !dbg !4080
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !4080
  %1 = bitcast %struct.loop** %loop to i8*, !dbg !4081
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !4081
  tail call void @fold_defer_overflow_warnings() #6, !dbg !4082
  call void @llvm.dbg.value(metadata %struct.loop_iterator* %li, metadata !4073, metadata !DIExpression(DW_OP_deref)), !dbg !4083
  call void @llvm.dbg.value(metadata %struct.loop** %loop, metadata !4079, metadata !DIExpression(DW_OP_deref)), !dbg !4083
  call fastcc void @fel_init(%struct.loop_iterator* nonnull %li, %struct.loop** nonnull %loop, i32 0) #7, !dbg !4084
  br label %for.cond, !dbg !4084

for.cond:                                         ; preds = %for.body, %entry
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4086
  call void @llvm.dbg.value(metadata %struct.loop* %2, metadata !4079, metadata !DIExpression()), !dbg !4083
  %tobool = icmp eq %struct.loop* %2, null, !dbg !4084
  br i1 %tobool, label %for.end, label %for.body, !dbg !4084

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.loop* %2, metadata !4079, metadata !DIExpression()), !dbg !4083
  call void @estimate_numbers_of_iterations_loop(%struct.loop* nonnull %2) #7, !dbg !4088
  call void @llvm.dbg.value(metadata %struct.loop_iterator* %li, metadata !4073, metadata !DIExpression(DW_OP_deref)), !dbg !4083
  call void @llvm.dbg.value(metadata %struct.loop** %loop, metadata !4079, metadata !DIExpression(DW_OP_deref)), !dbg !4083
  call fastcc void @fel_next(%struct.loop_iterator* nonnull %li, %struct.loop** nonnull %loop) #7, !dbg !4086
  br label %for.cond, !dbg !4086, !llvm.loop !4090

for.end:                                          ; preds = %for.cond
  call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !4092
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !4093
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !4093
  ret void, !dbg !4093
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) unnamed_addr #0 !dbg !4094 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop_iterator* %li, metadata !4100, metadata !DIExpression()), !dbg !4106
  call void @llvm.dbg.value(metadata %struct.loop** %loop, metadata !4101, metadata !DIExpression()), !dbg !4106
  call void @llvm.dbg.value(metadata i32 0, metadata !4102, metadata !DIExpression()), !dbg !4106
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %li, i64 0, i32 1, !dbg !4107
  store i32 0, i32* %idx, align 8, !dbg !4108
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4109
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 4, !dbg !4109
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !4109
  %tobool = icmp eq %struct.loops* %1, null, !dbg !4109
  br i1 %tobool, label %if.then, label %if.end, !dbg !4111

if.then:                                          ; preds = %entry
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %li, i64 0, i32 0, !dbg !4112
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !4114
  store %struct.loop* null, %struct.loop** %loop, align 8, !dbg !4115
  br label %cleanup, !dbg !4116

if.end:                                           ; preds = %entry
  %call = tail call fastcc i32 @number_of_loops() #7, !dbg !4117
  %call1 = tail call fastcc %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call) #7, !dbg !4117
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %li, i64 0, i32 0, !dbg !4118
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !4119
  call void @llvm.dbg.value(metadata i32 1, metadata !4105, metadata !DIExpression()), !dbg !4106
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4120
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, i32 4, !dbg !4120
  %3 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !4120
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %3, i64 0, i32 3, !dbg !4120
  %4 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !4120
  br label %while.cond79, !dbg !4123

while.cond79:                                     ; preds = %if.end, %if.end111
  %5 = phi %struct.loop* [ %4, %if.end ], [ %25, %if.end111 ]
  %6 = phi %struct.loop* [ %4, %if.end ], [ %26, %if.end111 ]
  %7 = phi %struct.loop* [ %4, %if.end ], [ %27, %if.end111 ]
  %8 = phi %struct.loop* [ %4, %if.end ], [ %28, %if.end111 ]
  %9 = phi %struct.loop* [ %4, %if.end ], [ %29, %if.end111 ]
  %10 = phi %struct.loop* [ %4, %if.end ], [ %30, %if.end111 ]
  %11 = phi %struct.loop* [ %4, %if.end ], [ %31, %if.end111 ]
  %12 = phi %struct.loop* [ %4, %if.end ], [ %32, %if.end111 ], !dbg !4125
  call void @llvm.dbg.value(metadata %struct.loop* %12, metadata !4103, metadata !DIExpression()), !dbg !4106
  %num81 = getelementptr inbounds %struct.loop, %struct.loop* %12, i64 0, i32 0, !dbg !4128
  %13 = load i32, i32* %num81, align 8, !dbg !4128
  %cmp82 = icmp slt i32 %13, 1, !dbg !4129
  br i1 %cmp82, label %if.end94, label %if.then83, !dbg !4130

if.then83:                                        ; preds = %while.cond79
  %14 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !4131
  %tobool85 = icmp eq %struct.VEC_int_heap* %14, null, !dbg !4131
  br i1 %tobool85, label %cond.end90, label %cond.true86, !dbg !4131

cond.true86:                                      ; preds = %if.then83
  %base88 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %14, i64 0, i32 0, !dbg !4131
  br label %cond.end90, !dbg !4131

cond.end90:                                       ; preds = %if.then83, %cond.true86
  %cond91 = phi %struct.VEC_int_base* [ %base88, %cond.true86 ], [ null, %if.then83 ], !dbg !4131
  call void @llvm.dbg.value(metadata %struct.loop* %11, metadata !4103, metadata !DIExpression()), !dbg !4106
  %num92 = getelementptr inbounds %struct.loop, %struct.loop* %11, i64 0, i32 0, !dbg !4131
  %15 = load i32, i32* %num92, align 8, !dbg !4131
  %call93 = tail call fastcc i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond91, i32 %15) #7, !dbg !4131
  br label %if.end94, !dbg !4131

if.end94:                                         ; preds = %while.cond79, %cond.end90
  call void @llvm.dbg.value(metadata %struct.loop* %10, metadata !4103, metadata !DIExpression()), !dbg !4106
  %inner95 = getelementptr inbounds %struct.loop, %struct.loop* %10, i64 0, i32 8, !dbg !4132
  %16 = load %struct.loop*, %struct.loop** %inner95, align 8, !dbg !4132
  %cmp96 = icmp eq %struct.loop* %16, null, !dbg !4134
  br i1 %cmp96, label %while.cond100.preheader, label %if.then97, !dbg !4135

while.cond100.preheader:                          ; preds = %if.end94
  br label %while.cond100, !dbg !4136

if.then97:                                        ; preds = %if.end94
  call void @llvm.dbg.value(metadata %struct.loop* %9, metadata !4103, metadata !DIExpression()), !dbg !4106
  %inner98 = getelementptr inbounds %struct.loop, %struct.loop* %9, i64 0, i32 8, !dbg !4138
  %17 = load %struct.loop*, %struct.loop** %inner98, align 8, !dbg !4138
  br label %if.end111, !dbg !4139

while.cond100:                                    ; preds = %while.cond100.preheader, %while.body104
  %18 = phi %struct.loop* [ %5, %while.cond100.preheader ], [ %call105, %while.body104 ]
  %19 = phi %struct.loop* [ %6, %while.cond100.preheader ], [ %call105, %while.body104 ]
  %20 = phi %struct.loop* [ %7, %while.cond100.preheader ], [ %call105, %while.body104 ]
  %21 = phi %struct.loop* [ %8, %while.cond100.preheader ], [ %call105, %while.body104 ], !dbg !4140
  call void @llvm.dbg.value(metadata %struct.loop* %21, metadata !4103, metadata !DIExpression()), !dbg !4106
  %cmp101 = icmp eq %struct.loop* %21, null, !dbg !4141
  br i1 %cmp101, label %land.end, label %land.rhs, !dbg !4142

land.rhs:                                         ; preds = %while.cond100
  call void @llvm.dbg.value(metadata %struct.loop* %20, metadata !4103, metadata !DIExpression()), !dbg !4106
  %next102 = getelementptr inbounds %struct.loop, %struct.loop* %20, i64 0, i32 9, !dbg !4143
  %22 = load %struct.loop*, %struct.loop** %next102, align 8, !dbg !4143
  %cmp103 = icmp eq %struct.loop* %22, null, !dbg !4144
  br label %land.end

land.end:                                         ; preds = %while.cond100, %land.rhs
  %23 = phi i1 [ false, %while.cond100 ], [ %cmp103, %land.rhs ], !dbg !4145
  call void @llvm.dbg.value(metadata %struct.loop* %19, metadata !4103, metadata !DIExpression()), !dbg !4106
  br i1 %23, label %while.body104, label %while.end106, !dbg !4136

while.body104:                                    ; preds = %land.end
  %call105 = tail call fastcc %struct.loop* @loop_outer(%struct.loop* %19) #7, !dbg !4146
  call void @llvm.dbg.value(metadata %struct.loop* %call105, metadata !4103, metadata !DIExpression()), !dbg !4106
  br label %while.cond100, !dbg !4136, !llvm.loop !4147

while.end106:                                     ; preds = %land.end
  %.lcssa4 = phi %struct.loop* [ %18, %land.end ]
  %.lcssa = phi %struct.loop* [ %19, %land.end ]
  %cmp107 = icmp eq %struct.loop* %.lcssa, null, !dbg !4149
  br i1 %cmp107, label %if.end114.loopexit, label %if.end109, !dbg !4151

if.end109:                                        ; preds = %while.end106
  call void @llvm.dbg.value(metadata %struct.loop* %.lcssa4, metadata !4103, metadata !DIExpression()), !dbg !4106
  %next110 = getelementptr inbounds %struct.loop, %struct.loop* %.lcssa4, i64 0, i32 9, !dbg !4152
  %24 = load %struct.loop*, %struct.loop** %next110, align 8, !dbg !4152
  br label %if.end111

if.end111:                                        ; preds = %if.end109, %if.then97
  %25 = phi %struct.loop* [ %24, %if.end109 ], [ %17, %if.then97 ]
  %26 = phi %struct.loop* [ %24, %if.end109 ], [ %17, %if.then97 ]
  %27 = phi %struct.loop* [ %24, %if.end109 ], [ %17, %if.then97 ]
  %28 = phi %struct.loop* [ %24, %if.end109 ], [ %17, %if.then97 ]
  %29 = phi %struct.loop* [ %24, %if.end109 ], [ %17, %if.then97 ]
  %30 = phi %struct.loop* [ %24, %if.end109 ], [ %17, %if.then97 ]
  %31 = phi %struct.loop* [ %24, %if.end109 ], [ %17, %if.then97 ]
  %32 = phi %struct.loop* [ %24, %if.end109 ], [ %17, %if.then97 ]
  br label %while.cond79, !dbg !4123, !llvm.loop !4153

if.end114.loopexit:                               ; preds = %while.end106
  call fastcc void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #7, !dbg !4155
  br label %cleanup, !dbg !4156

cleanup:                                          ; preds = %if.end114.loopexit, %if.then
  ret void, !dbg !4156
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) unnamed_addr #0 !dbg !4157 {
entry:
  %anum = alloca i32, align 4
  call void @llvm.dbg.value(metadata %struct.loop_iterator* %li, metadata !4161, metadata !DIExpression()), !dbg !4164
  call void @llvm.dbg.value(metadata %struct.loop** %loop, metadata !4162, metadata !DIExpression()), !dbg !4164
  %0 = bitcast i32* %anum to i8*, !dbg !4165
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #8, !dbg !4165
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %li, i64 0, i32 0, !dbg !4164
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %li, i64 0, i32 1, !dbg !4164
  br label %while.cond, !dbg !4166

while.cond:                                       ; preds = %while.body, %entry
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !4167
  %tobool = icmp eq %struct.VEC_int_heap* %1, null, !dbg !4167
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4167

cond.true:                                        ; preds = %while.cond
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %1, i64 0, i32 0, !dbg !4167
  br label %cond.end, !dbg !4167

cond.end:                                         ; preds = %while.cond, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %while.cond ], !dbg !4167
  %2 = load i32, i32* %idx, align 8, !dbg !4167
  call void @llvm.dbg.value(metadata i32* %anum, metadata !4163, metadata !DIExpression(DW_OP_deref)), !dbg !4164
  %call = call fastcc i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %2, i32* nonnull %anum) #7, !dbg !4167
  %tobool2 = icmp eq i32 %call, 0, !dbg !4166
  br i1 %tobool2, label %while.end, label %while.body, !dbg !4166

while.body:                                       ; preds = %cond.end
  %3 = load i32, i32* %idx, align 8, !dbg !4168
  %inc = add i32 %3, 1, !dbg !4168
  store i32 %inc, i32* %idx, align 8, !dbg !4168
  %4 = load i32, i32* %anum, align 4, !dbg !4170
  call void @llvm.dbg.value(metadata i32 %4, metadata !4163, metadata !DIExpression()), !dbg !4164
  %call4 = call fastcc %struct.loop* @get_loop(i32 %4) #7, !dbg !4171
  store %struct.loop* %call4, %struct.loop** %loop, align 8, !dbg !4172
  %tobool5 = icmp eq %struct.loop* %call4, null, !dbg !4173
  br i1 %tobool5, label %while.cond, label %cleanup.loopexit, !dbg !4175, !llvm.loop !4176

while.end:                                        ; preds = %cond.end
  call fastcc void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit) #7, !dbg !4178
  store %struct.loop* null, %struct.loop** %loop, align 8, !dbg !4179
  br label %cleanup, !dbg !4180

cleanup.loopexit:                                 ; preds = %while.body
  br label %cleanup, !dbg !4180

cleanup:                                          ; preds = %cleanup.loopexit, %while.end
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #8, !dbg !4180
  ret void, !dbg !4180
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d* %s1, %union.gimple_statement_d* %s2) local_unnamed_addr #5 !dbg !4181 {
entry:
  %bsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s1, metadata !4185, metadata !DIExpression()), !dbg !4192
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s2, metadata !4186, metadata !DIExpression()), !dbg !4192
  %call = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %s1) #7, !dbg !4193
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call, metadata !4187, metadata !DIExpression()), !dbg !4192
  %call1 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %s2) #7, !dbg !4194
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call1, metadata !4188, metadata !DIExpression()), !dbg !4192
  %tobool = icmp eq %struct.basic_block_def* %call, null, !dbg !4195
  %cmp = icmp eq %union.gimple_statement_d* %s1, %s2, !dbg !4197
  %or.cond = or i1 %tobool, %cmp, !dbg !4198
  br i1 %or.cond, label %cleanup20, label %if.end, !dbg !4198

if.end:                                           ; preds = %entry
  %cmp2 = icmp eq %struct.basic_block_def* %call, %call1, !dbg !4199
  br i1 %cmp2, label %if.then3, label %if.end18, !dbg !4200

if.then3:                                         ; preds = %if.end
  %0 = bitcast %struct.gimple_stmt_iterator* %bsi to i8*, !dbg !4201
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4201
  %call4 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %s2) #7, !dbg !4202
  %cmp5 = icmp eq i32 %call4, 16, !dbg !4204
  br i1 %cmp5, label %cleanup, label %if.end7, !dbg !4205

if.end7:                                          ; preds = %if.then3
  %call8 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %s1) #7, !dbg !4206
  %cmp9 = icmp eq i32 %call8, 16, !dbg !4208
  br i1 %cmp9, label %cleanup, label %if.end11, !dbg !4209

if.end11:                                         ; preds = %if.end7
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4210
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4210
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %call) #7, !dbg !4210
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4210
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #8, !dbg !4210
  br label %for.cond, !dbg !4212

for.cond:                                         ; preds = %for.inc, %if.end11
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4189, metadata !DIExpression(DW_OP_deref)), !dbg !4213
  %call12 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !4214
  %cmp13 = icmp eq %union.gimple_statement_d* %call12, %s2, !dbg !4216
  br i1 %cmp13, label %cleanup.loopexit, label %for.body, !dbg !4217

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4189, metadata !DIExpression(DW_OP_deref)), !dbg !4213
  %call14 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %bsi) #7, !dbg !4218
  %cmp15 = icmp eq %union.gimple_statement_d* %call14, %s1, !dbg !4220
  br i1 %cmp15, label %cleanup.loopexit, label %for.inc, !dbg !4221

for.inc:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %bsi, metadata !4189, metadata !DIExpression(DW_OP_deref)), !dbg !4213
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %bsi) #7, !dbg !4222
  br label %for.cond, !dbg !4223, !llvm.loop !4224

cleanup.loopexit:                                 ; preds = %for.body, %for.cond
  %retval.0.ph = phi i8 [ 0, %for.cond ], [ 1, %for.body ]
  br label %cleanup, !dbg !4226

cleanup:                                          ; preds = %cleanup.loopexit, %if.end7, %if.then3
  %retval.0 = phi i8 [ 0, %if.then3 ], [ 1, %if.end7 ], [ %retval.0.ph, %cleanup.loopexit ], !dbg !4213
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !4226
  br label %cleanup20

if.end18:                                         ; preds = %if.end
  %call19 = tail call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %call1, %struct.basic_block_def* %call) #6, !dbg !4227
  br label %cleanup20, !dbg !4228

cleanup20:                                        ; preds = %entry, %if.end18, %cleanup
  %retval.1 = phi i8 [ %retval.0, %cleanup ], [ %call19, %if.end18 ], [ 1, %entry ], !dbg !4192
  ret i8 %retval.1, !dbg !4229
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @nowrap_type_p(%union.tree_node* %type) local_unnamed_addr #5 !dbg !4230 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !4232, metadata !DIExpression()), !dbg !4233
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4234
  %bf.load = load i64, i64* %0, align 8, !dbg !4234
  %bf.cast3 = and i64 %bf.load, 65535, !dbg !4234
  %cmp = icmp eq i64 %bf.cast3, 6, !dbg !4234
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4234

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast3, 7, !dbg !4234
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false6, !dbg !4234

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %cmp11 = icmp eq i64 %bf.cast3, 8, !dbg !4234
  br i1 %cmp11, label %land.lhs.true, label %if.end, !dbg !4236

land.lhs.true:                                    ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %bf.cast158 = and i64 %bf.load, 2097152, !dbg !4237
  %tobool = icmp eq i64 %bf.cast158, 0, !dbg !4237
  %1 = load i32, i32* @flag_wrapv, align 4, !dbg !4237
  %2 = load i32, i32* @flag_trapv, align 4, !dbg !4237
  %3 = or i32 %1, %2, !dbg !4237
  %4 = icmp eq i32 %3, 0, !dbg !4237
  %or.cond1.not = and i1 %tobool, %4, !dbg !4237
  %5 = load i32, i32* @flag_strict_overflow, align 4, !dbg !4237
  %tobool21 = icmp ne i32 %5, 0, !dbg !4237
  %or.cond2 = and i1 %or.cond1.not, %tobool21, !dbg !4237
  br i1 %or.cond2, label %return, label %if.end, !dbg !4237

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false6
  %cmp26 = icmp eq i64 %bf.cast3, 10, !dbg !4238
  br i1 %cmp26, label %return, label %lor.lhs.false27, !dbg !4238

lor.lhs.false27:                                  ; preds = %if.end
  %cmp32 = icmp eq i64 %bf.cast3, 12, !dbg !4238
  %spec.select = zext i1 %cmp32 to i8, !dbg !4240
  ret i8 %spec.select, !dbg !4240

return:                                           ; preds = %if.end, %land.lhs.true
  ret i8 1, !dbg !4241
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @scev_probably_wraps_p(%union.tree_node* %base, %union.tree_node* %step, %union.gimple_statement_d* %at_stmt, %struct.loop* %loop, i8 zeroext %use_overflow_semantics) local_unnamed_addr #5 !dbg !4242 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %base, metadata !4246, metadata !DIExpression()), !dbg !4262
  call void @llvm.dbg.value(metadata %union.tree_node* %step, metadata !4247, metadata !DIExpression()), !dbg !4262
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %at_stmt, metadata !4248, metadata !DIExpression()), !dbg !4262
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !4249, metadata !DIExpression()), !dbg !4262
  call void @llvm.dbg.value(metadata i8 %use_overflow_semantics, metadata !4250, metadata !DIExpression()), !dbg !4262
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %step, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4263
  %0 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4263
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !4256, metadata !DIExpression()), !dbg !4262
  %call = tail call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %base) #6, !dbg !4264
  %tobool = icmp eq i8 %call, 0, !dbg !4264
  br i1 %tobool, label %lor.lhs.false, label %cleanup, !dbg !4266

lor.lhs.false:                                    ; preds = %entry
  %call2 = tail call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %step) #6, !dbg !4267
  %tobool4 = icmp eq i8 %call2, 0, !dbg !4267
  br i1 %tobool4, label %if.end, label %cleanup, !dbg !4268

if.end:                                           ; preds = %lor.lhs.false
  %call5 = tail call i32 @integer_zerop(%union.tree_node* %step) #6, !dbg !4269
  %tobool6 = icmp eq i32 %call5, 0, !dbg !4269
  br i1 %tobool6, label %if.end8, label %cleanup, !dbg !4271

if.end8:                                          ; preds = %if.end
  %tobool10 = icmp eq i8 %use_overflow_semantics, 0, !dbg !4272
  br i1 %tobool10, label %if.end17, label %land.lhs.true, !dbg !4274

land.lhs.true:                                    ; preds = %if.end8
  %type12 = getelementptr inbounds %union.tree_node, %union.tree_node* %base, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4275
  %1 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !4275
  %call13 = tail call zeroext i8 @nowrap_type_p(%union.tree_node* %1) #7, !dbg !4276
  %tobool15 = icmp eq i8 %call13, 0, !dbg !4276
  br i1 %tobool15, label %if.end17, label %cleanup, !dbg !4277

if.end17:                                         ; preds = %land.lhs.true, %if.end8
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %step, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4278
  %bf.load = load i64, i64* %2, align 8, !dbg !4278
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4280
  %cmp = icmp eq i64 %bf.cast1, 23, !dbg !4280
  br i1 %cmp, label %if.end21, label %cleanup, !dbg !4281

if.end21:                                         ; preds = %if.end17
  tail call void @fold_defer_overflow_warnings() #6, !dbg !4282
  %call22 = tail call %union.tree_node* @unsigned_type_for(%union.tree_node* %0) #6, !dbg !4283
  call void @llvm.dbg.value(metadata %union.tree_node* %call22, metadata !4254, metadata !DIExpression()), !dbg !4262
  %call23 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call22, %union.tree_node* %base) #6, !dbg !4284
  call void @llvm.dbg.value(metadata %union.tree_node* %call23, metadata !4246, metadata !DIExpression()), !dbg !4262
  %call24 = tail call i32 @tree_int_cst_sign_bit(%union.tree_node* %step) #6, !dbg !4285
  %tobool25 = icmp eq i32 %call24, 0, !dbg !4285
  br i1 %tobool25, label %if.else, label %if.then26, !dbg !4286

if.then26:                                        ; preds = %if.end21
  %call27 = tail call %union.tree_node* @lower_bound_in_type(%union.tree_node* %0, %union.tree_node* %0) #6, !dbg !4287
  %call28 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call22, %union.tree_node* %call27) #6, !dbg !4287
  call void @llvm.dbg.value(metadata %union.tree_node* %call28, metadata !4257, metadata !DIExpression()), !dbg !4288
  %call29 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %call22, %union.tree_node* %call23, %union.tree_node* %call28) #6, !dbg !4289
  call void @llvm.dbg.value(metadata %union.tree_node* %call29, metadata !4252, metadata !DIExpression()), !dbg !4262
  %call30 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call22, %union.tree_node* %step) #6, !dbg !4290
  %call31 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %call22, %union.tree_node* %call30) #6, !dbg !4290
  call void @llvm.dbg.value(metadata %union.tree_node* %call31, metadata !4253, metadata !DIExpression()), !dbg !4262
  br label %if.end37, !dbg !4291

if.else:                                          ; preds = %if.end21
  %call33 = tail call %union.tree_node* @upper_bound_in_type(%union.tree_node* %0, %union.tree_node* %0) #6, !dbg !4292
  %call34 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call22, %union.tree_node* %call33) #6, !dbg !4292
  call void @llvm.dbg.value(metadata %union.tree_node* %call34, metadata !4260, metadata !DIExpression()), !dbg !4293
  %call35 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %call22, %union.tree_node* %call34, %union.tree_node* %call23) #6, !dbg !4294
  call void @llvm.dbg.value(metadata %union.tree_node* %call35, metadata !4252, metadata !DIExpression()), !dbg !4262
  %call36 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call22, %union.tree_node* %step) #6, !dbg !4295
  call void @llvm.dbg.value(metadata %union.tree_node* %call36, metadata !4253, metadata !DIExpression()), !dbg !4262
  br label %if.end37

if.end37:                                         ; preds = %if.else, %if.then26
  %delta.0 = phi %union.tree_node* [ %call29, %if.then26 ], [ %call35, %if.else ], !dbg !4296
  %step_abs.0 = phi %union.tree_node* [ %call31, %if.then26 ], [ %call36, %if.else ], !dbg !4296
  call void @llvm.dbg.value(metadata %union.tree_node* %step_abs.0, metadata !4253, metadata !DIExpression()), !dbg !4262
  call void @llvm.dbg.value(metadata %union.tree_node* %delta.0, metadata !4252, metadata !DIExpression()), !dbg !4262
  %call38 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 69, %union.tree_node* %call22, %union.tree_node* %delta.0, %union.tree_node* %step_abs.0) #6, !dbg !4297
  call void @llvm.dbg.value(metadata %union.tree_node* %call38, metadata !4255, metadata !DIExpression()), !dbg !4262
  tail call void @estimate_numbers_of_iterations_loop(%struct.loop* %loop) #7, !dbg !4298
  %bounds = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 17, !dbg !4299
  br label %for.cond, !dbg !4301

for.cond:                                         ; preds = %for.inc, %if.end37
  %bound.0.in = phi %struct.nb_iter_bound** [ %bounds, %if.end37 ], [ %next, %for.inc ]
  %bound.0 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bound.0.in, align 8, !dbg !4302
  call void @llvm.dbg.value(metadata %struct.nb_iter_bound* %bound.0, metadata !4251, metadata !DIExpression()), !dbg !4262
  %tobool39 = icmp eq %struct.nb_iter_bound* %bound.0, null, !dbg !4303
  br i1 %tobool39, label %for.end, label %for.body, !dbg !4303

for.body:                                         ; preds = %for.cond
  %call40 = tail call fastcc zeroext i8 @n_of_executions_at_most(%union.gimple_statement_d* %at_stmt, %struct.nb_iter_bound* nonnull %bound.0, %union.tree_node* %call38) #7, !dbg !4304
  %tobool41 = icmp eq i8 %call40, 0, !dbg !4304
  br i1 %tobool41, label %for.inc, label %if.then42, !dbg !4308

if.then42:                                        ; preds = %for.body
  tail call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !4309
  br label %cleanup, !dbg !4311

for.inc:                                          ; preds = %for.body
  %next = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %bound.0, i64 0, i32 3, !dbg !4312
  br label %for.cond, !dbg !4313, !llvm.loop !4314

for.end:                                          ; preds = %for.cond
  tail call void @fold_undefer_and_ignore_overflow_warnings() #6, !dbg !4316
  br label %cleanup, !dbg !4317

cleanup:                                          ; preds = %land.lhs.true, %if.end17, %if.end, %lor.lhs.false, %entry, %for.end, %if.then42
  %retval.0 = phi i8 [ 0, %if.then42 ], [ 1, %for.end ], [ 1, %lor.lhs.false ], [ 1, %entry ], [ 0, %if.end ], [ 0, %land.lhs.true ], [ 1, %if.end17 ], !dbg !4262
  ret i8 %retval.0, !dbg !4318
}

declare dso_local %union.tree_node* @unsigned_type_for(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @tree_int_cst_sign_bit(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @lower_bound_in_type(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @upper_bound_in_type(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @n_of_executions_at_most(%union.gimple_statement_d* %stmt, %struct.nb_iter_bound* %niter_bound, %union.tree_node* %niter) unnamed_addr #5 !dbg !4319 {
entry:
  %bound = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4323, metadata !DIExpression()), !dbg !4330
  call void @llvm.dbg.value(metadata %struct.nb_iter_bound* %niter_bound, metadata !4324, metadata !DIExpression()), !dbg !4330
  call void @llvm.dbg.value(metadata %union.tree_node* %niter, metadata !4325, metadata !DIExpression()), !dbg !4330
  %0 = bitcast %struct.double_int* %bound to i8*, !dbg !4331
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !4331
  %bound1 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %niter_bound, i64 0, i32 1, !dbg !4332
  %1 = bitcast %struct.double_int* %bound1 to i8*, !dbg !4332
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !4332
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %niter, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4333
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4333
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !4327, metadata !DIExpression()), !dbg !4330
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4334
  %bf.load = load i64, i64* %3, align 8, !dbg !4334
  %bf.cast1 = and i64 %bf.load, 2097152, !dbg !4334
  %tobool = icmp eq i64 %bf.cast1, 0, !dbg !4334
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !4334

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 3026, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !4334
  br label %cond.end, !dbg !4334

cond.end:                                         ; preds = %entry, %cond.true
  %4 = getelementptr inbounds %struct.double_int, %struct.double_int* %bound, i64 0, i32 0, !dbg !4335
  %5 = load i64, i64* %4, align 8, !dbg !4335
  %6 = getelementptr inbounds %struct.double_int, %struct.double_int* %bound, i64 0, i32 1, !dbg !4335
  %7 = load i64, i64* %6, align 8, !dbg !4335
  %call = tail call zeroext i8 @double_int_fits_to_tree_p(%union.tree_node* %2, i64 %5, i64 %7) #6, !dbg !4335
  %tobool2 = icmp eq i8 %call, 0, !dbg !4335
  br i1 %tobool2, label %cleanup, label %if.end, !dbg !4337

if.end:                                           ; preds = %cond.end
  %is_exit = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %niter_bound, i64 0, i32 2, !dbg !4338
  %8 = load i8, i8* %is_exit, align 8, !dbg !4338
  %tobool3 = icmp eq i8 %8, 0, !dbg !4340
  %tobool5 = icmp ne %union.gimple_statement_d* %stmt, null, !dbg !4341
  br i1 %tobool3, label %if.else14, label %if.then4, !dbg !4342

if.then4:                                         ; preds = %if.end
  br i1 %tobool5, label %land.lhs.true, label %if.else, !dbg !4343

land.lhs.true:                                    ; preds = %if.then4
  %stmt6 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %niter_bound, i64 0, i32 0, !dbg !4346
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !4346
  %cmp7 = icmp eq %union.gimple_statement_d* %9, %stmt, !dbg !4347
  br i1 %cmp7, label %if.else, label %land.lhs.true8, !dbg !4348

land.lhs.true8:                                   ; preds = %land.lhs.true
  %call10 = tail call zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d* %9, %union.gimple_statement_d* nonnull %stmt) #7, !dbg !4349
  %tobool11 = icmp eq i8 %call10, 0, !dbg !4349
  br i1 %tobool11, label %if.else, label %if.end37, !dbg !4350

if.else:                                          ; preds = %land.lhs.true8, %land.lhs.true, %if.then4
  call void @llvm.dbg.value(metadata i32 99, metadata !4329, metadata !DIExpression()), !dbg !4330
  br label %if.end37

if.else14:                                        ; preds = %if.end
  br i1 %tobool5, label %lor.lhs.false, label %if.then25, !dbg !4351

lor.lhs.false:                                    ; preds = %if.else14
  %call16 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* nonnull %stmt) #7, !dbg !4354
  %stmt17 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %niter_bound, i64 0, i32 0, !dbg !4355
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt17, align 8, !dbg !4355
  %call18 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %10) #7, !dbg !4356
  %cmp19 = icmp eq %struct.basic_block_def* %call16, %call18, !dbg !4357
  br i1 %cmp19, label %if.end37, label %land.lhs.true21, !dbg !4358

land.lhs.true21:                                  ; preds = %lor.lhs.false
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt17, align 8, !dbg !4359
  %call23 = tail call zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d* %11, %union.gimple_statement_d* nonnull %stmt) #7, !dbg !4360
  %tobool24 = icmp eq i8 %call23, 0, !dbg !4360
  br i1 %tobool24, label %if.then25, label %if.end37, !dbg !4361

if.then25:                                        ; preds = %land.lhs.true21, %if.else14
  %12 = bitcast %struct.double_int* %tmp to i8*, !dbg !4362
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %12) #8, !dbg !4362
  %call26 = tail call fastcc { i64, i64 } @shwi_to_double_int(i64 1) #7, !dbg !4364
  %13 = extractvalue { i64, i64 } %call26, 0, !dbg !4364
  %14 = extractvalue { i64, i64 } %call26, 1, !dbg !4364
  %call27 = tail call { i64, i64 } @double_int_add(i64 %5, i64 %7, i64 %13, i64 %14) #6, !dbg !4362
  %15 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 0, !dbg !4362
  %16 = extractvalue { i64, i64 } %call27, 0, !dbg !4362
  store i64 %16, i64* %15, align 8, !dbg !4362
  %17 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 1, !dbg !4362
  %18 = extractvalue { i64, i64 } %call27, 1, !dbg !4362
  store i64 %18, i64* %17, align 8, !dbg !4362
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %12, i64 16, i1 false), !dbg !4362
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %12) #8, !dbg !4362
  %19 = load i64, i64* %4, align 8, !dbg !4365
  %20 = load i64, i64* %6, align 8, !dbg !4365
  %call28 = tail call fastcc zeroext i8 @double_int_zero_p(i64 %19, i64 %20) #7, !dbg !4365
  %tobool30 = icmp eq i8 %call28, 0, !dbg !4365
  br i1 %tobool30, label %lor.lhs.false31, label %cleanup, !dbg !4367

lor.lhs.false31:                                  ; preds = %if.then25
  %call32 = tail call zeroext i8 @double_int_fits_to_tree_p(%union.tree_node* %2, i64 %19, i64 %20) #6, !dbg !4368
  %tobool33 = icmp eq i8 %call32, 0, !dbg !4368
  br i1 %tobool33, label %cleanup, label %if.end37, !dbg !4369

if.end37:                                         ; preds = %land.lhs.true8, %land.lhs.true21, %lor.lhs.false, %lor.lhs.false31, %if.else
  %21 = phi i64 [ %7, %if.else ], [ %7, %land.lhs.true8 ], [ %20, %lor.lhs.false31 ], [ %7, %land.lhs.true21 ], [ %7, %lor.lhs.false ], !dbg !4370
  %22 = phi i64 [ %5, %if.else ], [ %5, %land.lhs.true8 ], [ %19, %lor.lhs.false31 ], [ %5, %land.lhs.true21 ], [ %5, %lor.lhs.false ], !dbg !4370
  %cmp.1 = phi i32 [ 99, %if.else ], [ 100, %land.lhs.true8 ], [ 99, %lor.lhs.false31 ], [ 99, %land.lhs.true21 ], [ 99, %lor.lhs.false ], !dbg !4341
  call void @llvm.dbg.value(metadata i32 %cmp.1, metadata !4329, metadata !DIExpression()), !dbg !4330
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4370
  %call38 = tail call %union.tree_node* @double_int_to_tree(%union.tree_node* %2, i64 %22, i64 %21) #6, !dbg !4370
  %call39 = tail call %union.tree_node* @fold_binary_loc(i32 0, i32 %cmp.1, %union.tree_node* %23, %union.tree_node* %niter, %union.tree_node* %call38) #6, !dbg !4370
  call void @llvm.dbg.value(metadata %union.tree_node* %call39, metadata !4328, metadata !DIExpression()), !dbg !4330
  %tobool40 = icmp eq %union.tree_node* %call39, null, !dbg !4371
  br i1 %tobool40, label %land.end, label %land.rhs, !dbg !4372

land.rhs:                                         ; preds = %if.end37
  %call41 = tail call i32 @integer_nonzerop(%union.tree_node* nonnull %call39) #6, !dbg !4373
  %tobool42 = icmp ne i32 %call41, 0, !dbg !4372
  %phitmp = zext i1 %tobool42 to i8
  br label %land.end

land.end:                                         ; preds = %if.end37, %land.rhs
  %24 = phi i8 [ 0, %if.end37 ], [ %phitmp, %land.rhs ]
  br label %cleanup, !dbg !4374

cleanup:                                          ; preds = %lor.lhs.false31, %if.then25, %cond.end, %land.end
  %retval.0 = phi i8 [ %24, %land.end ], [ 0, %cond.end ], [ 0, %lor.lhs.false31 ], [ 0, %if.then25 ], !dbg !4330
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !4375
  ret i8 %retval.0, !dbg !4375
}

; Function Attrs: nounwind uwtable
define dso_local void @free_numbers_of_iterations_estimates_loop(%struct.loop* %loop) local_unnamed_addr #5 !dbg !4376 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !4378, metadata !DIExpression()), !dbg !4381
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 11, !dbg !4382
  store %union.tree_node* null, %union.tree_node** %nb_iterations, align 8, !dbg !4383
  %estimate_state = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 16, !dbg !4384
  store i32 0, i32* %estimate_state, align 4, !dbg !4385
  %bounds = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 17, !dbg !4386
  %0 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %bounds, align 8, !dbg !4386
  call void @llvm.dbg.value(metadata %struct.nb_iter_bound* %0, metadata !4379, metadata !DIExpression()), !dbg !4381
  br label %for.cond, !dbg !4388

for.cond:                                         ; preds = %for.body, %entry
  %.in = phi %struct.nb_iter_bound* [ %0, %entry ], [ %2, %for.body ]
  %bound.0 = phi %struct.nb_iter_bound* [ %0, %entry ], [ %2, %for.body ], !dbg !4389
  call void @llvm.dbg.value(metadata %struct.nb_iter_bound* %bound.0, metadata !4379, metadata !DIExpression()), !dbg !4381
  %tobool = icmp eq %struct.nb_iter_bound* %bound.0, null, !dbg !4390
  br i1 %tobool, label %for.end, label %for.body, !dbg !4390

for.body:                                         ; preds = %for.cond
  %1 = bitcast %struct.nb_iter_bound* %.in to i8*, !dbg !4389
  %next1 = getelementptr inbounds %struct.nb_iter_bound, %struct.nb_iter_bound* %bound.0, i64 0, i32 3, !dbg !4391
  %2 = load %struct.nb_iter_bound*, %struct.nb_iter_bound** %next1, align 8, !dbg !4391
  call void @llvm.dbg.value(metadata %struct.nb_iter_bound* %2, metadata !4380, metadata !DIExpression()), !dbg !4381
  tail call void @ggc_free(i8* %1) #6, !dbg !4394
  call void @llvm.dbg.value(metadata %struct.nb_iter_bound* %2, metadata !4379, metadata !DIExpression()), !dbg !4381
  br label %for.cond, !dbg !4395, !llvm.loop !4396

for.end:                                          ; preds = %for.cond
  store %struct.nb_iter_bound* null, %struct.nb_iter_bound** %bounds, align 8, !dbg !4398
  ret void, !dbg !4399
}

declare dso_local void @ggc_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @free_numbers_of_iterations_estimates() local_unnamed_addr #5 !dbg !4400 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %0 = bitcast %struct.loop_iterator* %li to i8*, !dbg !4404
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !4404
  %1 = bitcast %struct.loop** %loop to i8*, !dbg !4405
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !4405
  call void @llvm.dbg.value(metadata %struct.loop_iterator* %li, metadata !4402, metadata !DIExpression(DW_OP_deref)), !dbg !4406
  call void @llvm.dbg.value(metadata %struct.loop** %loop, metadata !4403, metadata !DIExpression(DW_OP_deref)), !dbg !4406
  call fastcc void @fel_init(%struct.loop_iterator* nonnull %li, %struct.loop** nonnull %loop, i32 0) #7, !dbg !4407
  br label %for.cond, !dbg !4407

for.cond:                                         ; preds = %for.body, %entry
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !4409
  call void @llvm.dbg.value(metadata %struct.loop* %2, metadata !4403, metadata !DIExpression()), !dbg !4406
  %tobool = icmp eq %struct.loop* %2, null, !dbg !4407
  br i1 %tobool, label %for.end, label %for.body, !dbg !4407

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.loop* %2, metadata !4403, metadata !DIExpression()), !dbg !4406
  call void @free_numbers_of_iterations_estimates_loop(%struct.loop* nonnull %2) #7, !dbg !4411
  call void @llvm.dbg.value(metadata %struct.loop_iterator* %li, metadata !4402, metadata !DIExpression(DW_OP_deref)), !dbg !4406
  call void @llvm.dbg.value(metadata %struct.loop** %loop, metadata !4403, metadata !DIExpression(DW_OP_deref)), !dbg !4406
  call fastcc void @fel_next(%struct.loop_iterator* nonnull %li, %struct.loop** nonnull %loop) #7, !dbg !4409
  br label %for.cond, !dbg !4409, !llvm.loop !4413

for.end:                                          ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !4415
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !4415
  ret void, !dbg !4415
}

; Function Attrs: nounwind uwtable
define dso_local void @substitute_in_loop_info(%struct.loop* %loop, %union.tree_node* %name, %union.tree_node* %val) local_unnamed_addr #5 !dbg !4416 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !4420, metadata !DIExpression()), !dbg !4423
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !4421, metadata !DIExpression()), !dbg !4423
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !4422, metadata !DIExpression()), !dbg !4423
  %nb_iterations = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 11, !dbg !4424
  %0 = load %union.tree_node*, %union.tree_node** %nb_iterations, align 8, !dbg !4424
  %call = tail call fastcc %union.tree_node* @simplify_replace_tree(%union.tree_node* %0, %union.tree_node* %name, %union.tree_node* %val) #7, !dbg !4425
  store %union.tree_node* %call, %union.tree_node** %nb_iterations, align 8, !dbg !4426
  ret void, !dbg !4427
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @simplify_replace_tree(%union.tree_node* %expr, %union.tree_node* %old, %union.tree_node* %new_tree) unnamed_addr #5 !dbg !4428 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !4432, metadata !DIExpression()), !dbg !4440
  call void @llvm.dbg.value(metadata %union.tree_node* %old, metadata !4433, metadata !DIExpression()), !dbg !4440
  call void @llvm.dbg.value(metadata %union.tree_node* %new_tree, metadata !4434, metadata !DIExpression()), !dbg !4440
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !4437, metadata !DIExpression()), !dbg !4440
  %tobool = icmp eq %union.tree_node* %expr, null, !dbg !4441
  br i1 %tobool, label %cleanup, label %if.end, !dbg !4443

if.end:                                           ; preds = %entry
  %cmp = icmp eq %union.tree_node* %expr, %old, !dbg !4444
  br i1 %cmp, label %if.then2, label %lor.lhs.false, !dbg !4446

lor.lhs.false:                                    ; preds = %if.end
  %call = tail call i32 @operand_equal_p(%union.tree_node* nonnull %expr, %union.tree_node* %old, i32 0) #6, !dbg !4447
  %tobool1 = icmp eq i32 %call, 0, !dbg !4447
  br i1 %tobool1, label %if.end4, label %if.then2, !dbg !4448

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  %call3 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %new_tree) #6, !dbg !4449
  br label %cleanup, !dbg !4450

if.end4:                                          ; preds = %lor.lhs.false
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4451
  %bf.load = load i64, i64* %0, align 8, !dbg !4451
  %bf.cast = and i64 %bf.load, 65535, !dbg !4451
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !4451
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4451
  %cmp5 = icmp ugt i32 %1, 3, !dbg !4451
  br i1 %cmp5, label %land.lhs.true, label %cleanup, !dbg !4451

land.lhs.true:                                    ; preds = %if.end4
  %cmp12 = icmp ult i32 %1, 11, !dbg !4451
  br i1 %cmp12, label %if.end14, label %cleanup, !dbg !4453

if.end14:                                         ; preds = %land.lhs.true
  %call15 = tail call fastcc i32 @tree_operand_length(%union.tree_node* nonnull %expr) #7, !dbg !4454
  call void @llvm.dbg.value(metadata i32 %call15, metadata !4436, metadata !DIExpression()), !dbg !4440
  call void @llvm.dbg.value(metadata i32 0, metadata !4435, metadata !DIExpression()), !dbg !4440
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4455
  %wide.trip.count = zext i32 %call15 to i64, !dbg !4459
  br label %for.cond, !dbg !4460

for.cond:                                         ; preds = %for.inc, %if.end14
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %if.end14 ], !dbg !4461
  %ret.0 = phi %union.tree_node* [ %ret.2, %for.inc ], [ null, %if.end14 ], !dbg !4462
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0, metadata !4437, metadata !DIExpression()), !dbg !4440
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !4435, metadata !DIExpression()), !dbg !4440
  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count, !dbg !4459
  br i1 %exitcond, label %for.end, label %for.body, !dbg !4463

for.body:                                         ; preds = %for.cond
  %arrayidx18 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 %indvars.iv, !dbg !4464
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx18, align 8, !dbg !4464
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !4438, metadata !DIExpression()), !dbg !4440
  %call19 = tail call fastcc %union.tree_node* @simplify_replace_tree(%union.tree_node* %2, %union.tree_node* %old, %union.tree_node* %new_tree) #7, !dbg !4465
  call void @llvm.dbg.value(metadata %union.tree_node* %call19, metadata !4439, metadata !DIExpression()), !dbg !4440
  %cmp20 = icmp eq %union.tree_node* %2, %call19, !dbg !4466
  br i1 %cmp20, label %for.inc, label %if.end22, !dbg !4468

if.end22:                                         ; preds = %for.body
  %tobool23 = icmp eq %union.tree_node* %ret.0, null, !dbg !4469
  br i1 %tobool23, label %if.then24, label %if.end26, !dbg !4471

if.then24:                                        ; preds = %if.end22
  %call25 = tail call %union.tree_node* @copy_node_stat(%union.tree_node* nonnull %expr) #6, !dbg !4472
  call void @llvm.dbg.value(metadata %union.tree_node* %call25, metadata !4437, metadata !DIExpression()), !dbg !4440
  br label %if.end26, !dbg !4473

if.end26:                                         ; preds = %if.end22, %if.then24
  %ret.1 = phi %union.tree_node* [ %ret.0, %if.end22 ], [ %call25, %if.then24 ], !dbg !4440
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.1, metadata !4437, metadata !DIExpression()), !dbg !4440
  %operands28 = getelementptr inbounds %union.tree_node, %union.tree_node* %ret.1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4474
  %arrayidx30 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands28, i64 %indvars.iv, !dbg !4474
  store %union.tree_node* %call19, %union.tree_node** %arrayidx30, align 8, !dbg !4475
  br label %for.inc, !dbg !4476

for.inc:                                          ; preds = %for.body, %if.end26
  %ret.2 = phi %union.tree_node* [ %ret.1, %if.end26 ], [ %ret.0, %for.body ], !dbg !4462
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.2, metadata !4437, metadata !DIExpression()), !dbg !4440
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !4477
  br label %for.cond, !dbg !4478, !llvm.loop !4479

for.end:                                          ; preds = %for.cond
  %ret.0.lcssa = phi %union.tree_node* [ %ret.0, %for.cond ], !dbg !4462
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0.lcssa, metadata !4437, metadata !DIExpression()), !dbg !4440
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0.lcssa, metadata !4437, metadata !DIExpression()), !dbg !4440
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0.lcssa, metadata !4437, metadata !DIExpression()), !dbg !4440
  %tobool31 = icmp eq %union.tree_node* %ret.0.lcssa, null, !dbg !4481
  br i1 %tobool31, label %cleanup, label %cond.true, !dbg !4481

cond.true:                                        ; preds = %for.end
  %call32 = tail call %union.tree_node* @fold(%union.tree_node* nonnull %ret.0.lcssa) #6, !dbg !4482
  br label %cleanup, !dbg !4481

cleanup:                                          ; preds = %for.end, %entry, %cond.true, %if.end4, %land.lhs.true, %if.then2
  %retval.0 = phi %union.tree_node* [ %call3, %if.then2 ], [ null, %entry ], [ %expr, %land.lhs.true ], [ %expr, %if.end4 ], [ %call32, %cond.true ], [ %expr, %for.end ], !dbg !4440
  ret %union.tree_node* %retval.0, !dbg !4483
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !4484 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4489, metadata !DIExpression()), !dbg !4491
  call void @llvm.dbg.value(metadata i32 %index, metadata !4490, metadata !DIExpression()), !dbg !4491
  %capacity = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !4492
  %0 = load i32, i32* %capacity, align 8, !dbg !4492
  %cmp = icmp ult i32 %0, %index, !dbg !4492
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !4492

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !4492
  br label %cond.end, !dbg !4492

cond.end:                                         ; preds = %entry, %cond.true
  %idxprom = zext i32 %index to i64, !dbg !4493
  %arrayidx = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 %idxprom, !dbg !4493
  ret %struct.phi_arg_d* %arrayidx, !dbg !4494
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !4495 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4499, metadata !DIExpression()), !dbg !4500
  %call = tail call fastcc zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #7, !dbg !4501
  %tobool = icmp eq i8 %call, 0, !dbg !4501
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !4501

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.12, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !4501
  br label %cond.end, !dbg !4501

cond.end:                                         ; preds = %entry, %cond.true
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 0, !dbg !4502
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4502
  %tobool1 = icmp eq %struct.VEC_edge_gc* %0, null, !dbg !4502
  br i1 %tobool1, label %cond.end5, label %cond.true2, !dbg !4502

cond.true2:                                       ; preds = %cond.end
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %0, i64 0, i32 0, !dbg !4502
  br label %cond.end5, !dbg !4502

cond.end5:                                        ; preds = %cond.end, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.end ], !dbg !4502
  %call7 = tail call fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0) #7, !dbg !4502
  ret %struct.edge_def* %call7, !dbg !4503
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !4504 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4508, metadata !DIExpression()), !dbg !4509
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 0, !dbg !4510
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4510
  %tobool = icmp eq %struct.VEC_edge_gc* %0, null, !dbg !4510
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4510

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %0, i64 0, i32 0, !dbg !4510
  br label %cond.end, !dbg !4510

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !4510
  %call = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #7, !dbg !4510
  %cmp = icmp eq i32 %call, 1, !dbg !4511
  %conv2 = zext i1 %cmp to i8, !dbg !4510
  ret i8 %conv2, !dbg !4512
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !4513 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !4517, metadata !DIExpression()), !dbg !4519
  call void @llvm.dbg.value(metadata i32 0, metadata !4518, metadata !DIExpression()), !dbg !4519
  br label %land.end, !dbg !4520

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %arrayidx = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 2, i64 0, !dbg !4520
  %0 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4520
  ret %struct.edge_def* %0, !dbg !4520
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !4521 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4525, metadata !DIExpression()), !dbg !4527
  call void @llvm.dbg.value(metadata i32 %i, metadata !4526, metadata !DIExpression()), !dbg !4527
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #7, !dbg !4528
  %tobool = icmp eq i8 %call, 0, !dbg !4528
  br i1 %tobool, label %return, label %if.then, !dbg !4530

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #7, !dbg !4531
  %idxprom = zext i32 %i to i64, !dbg !4531
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !4531
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4531
  br label %return, !dbg !4533

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %0, %if.then ], [ null, %entry ], !dbg !4534
  ret %union.tree_node* %retval.0, !dbg !4535
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4536 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4540, metadata !DIExpression()), !dbg !4541
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !4542
  %cmp = icmp eq i32 %call, 0, !dbg !4543
  br i1 %cmp, label %land.end, label %land.rhs, !dbg !4544

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !4545
  %cmp2 = icmp ult i32 %call1, 10, !dbg !4546
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !4547
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4548 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4552, metadata !DIExpression()), !dbg !4554
  %call = tail call fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #7, !dbg !4555
  %idxprom = zext i32 %call to i64, !dbg !4556
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !4556
  %0 = load i64, i64* %arrayidx, align 8, !dbg !4556
  call void @llvm.dbg.value(metadata i64 %0, metadata !4553, metadata !DIExpression()), !dbg !4554
  %cmp = icmp eq i64 %0, 0, !dbg !4557
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !4557

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !4557
  br label %cond.end, !dbg !4557

cond.end:                                         ; preds = %entry, %cond.true
  %1 = bitcast %union.gimple_statement_d* %gs to i8*, !dbg !4558
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !4559
  %2 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !4560
  ret %union.tree_node** %2, !dbg !4561
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4562 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4566, metadata !DIExpression()), !dbg !4567
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !4568
  %call1 = tail call fastcc i32 @gss_for_code(i32 %call) #7, !dbg !4569
  ret i32 %call1, !dbg !4570
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gss_for_code(i32 %code) unnamed_addr #0 !dbg !4571 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !4575, metadata !DIExpression()), !dbg !4576
  %idxprom = zext i32 %code to i64, !dbg !4577
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !4577
  %0 = load i32, i32* %arrayidx, align 4, !dbg !4577
  ret i32 %0, !dbg !4578
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !4579 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4581, metadata !DIExpression()), !dbg !4583
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !4584
  call void @llvm.dbg.value(metadata i32 %call, metadata !4582, metadata !DIExpression()), !dbg !4583
  switch i32 %call, label %if.else4 [
    i32 6, label %if.then
    i32 1, label %if.then
    i32 8, label %cleanup
  ], !dbg !4585

if.then:                                          ; preds = %entry, %entry
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !4587
  %bf.load = load i32, i32* %0, align 8, !dbg !4587
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4587
  br label %cleanup, !dbg !4588

if.else4:                                         ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !4589
  br label %cleanup, !dbg !4591

cleanup:                                          ; preds = %entry, %if.else4, %if.then
  %retval.0 = phi i32 [ %bf.lshr, %if.then ], [ 0, %if.else4 ], [ 59, %entry ], !dbg !4583
  ret i32 %retval.0, !dbg !4592
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4593 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4595, metadata !DIExpression()), !dbg !4596
  %num_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 3, !dbg !4597
  %0 = load i32, i32* %num_ops, align 4, !dbg !4597
  ret i32 %0, !dbg !4598
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !4599 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4603, metadata !DIExpression()), !dbg !4604
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 13, !dbg !4605
  %0 = load i32, i32* %flags, align 8, !dbg !4605
  %and = and i32 %0, 512, !dbg !4606
  %tobool = icmp eq i32 %and, 0, !dbg !4606
  br i1 %tobool, label %land.lhs.true, label %cond.end, !dbg !4607

land.lhs.true:                                    ; preds = %entry
  %gimple = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 7, i32 0, !dbg !4608
  %1 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !4608
  %tobool1 = icmp eq %struct.gimple_bb_info* %1, null, !dbg !4609
  br i1 %tobool1, label %cond.end, label %cond.true, !dbg !4610

cond.true:                                        ; preds = %land.lhs.true
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %1, i64 0, i32 0, !dbg !4611
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !4611
  br label %cond.end, !dbg !4610

cond.end:                                         ; preds = %land.lhs.true, %entry, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %2, %cond.true ], [ null, %land.lhs.true ], [ null, %entry ], !dbg !4610
  ret %struct.gimple_seq_d* %cond, !dbg !4612
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !4613 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !4620, metadata !DIExpression()), !dbg !4621
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !4622
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4622

cond.true:                                        ; preds = %entry
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 0, !dbg !4623
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !4623
  br label %cond.end, !dbg !4622

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !4622
  ret %struct.gimple_seq_node_d* %cond, !dbg !4624
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc { i64, i64 } @shwi_to_double_int(i64 %cst) unnamed_addr #0 !dbg !4625 {
entry:
  call void @llvm.dbg.value(metadata i64 %cst, metadata !4629, metadata !DIExpression()), !dbg !4631
  %cst.lobit = ashr i64 %cst, 63, !dbg !4632
  %0 = insertvalue { i64, i64 } undef, i64 %cst, 0, !dbg !4633
  %1 = insertvalue { i64, i64 } %0, i64 %cst.lobit, 1, !dbg !4633
  ret { i64, i64 } %1, !dbg !4633
}

declare dso_local i32 @swap_tree_comparison(i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @fold_binary_to_constant(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @bound_difference(%struct.loop* %loop, %union.tree_node* %x, %union.tree_node* %y, %struct.bounds* %bnds) unnamed_addr #5 !dbg !4634 {
entry:
  %varx = alloca %union.tree_node*, align 8
  %vary = alloca %union.tree_node*, align 8
  %offx = alloca [1 x %struct.__mpz_struct], align 16
  %offy = alloca [1 x %struct.__mpz_struct], align 16
  %minx = alloca [1 x %struct.__mpz_struct], align 16
  %maxx = alloca [1 x %struct.__mpz_struct], align 16
  %miny = alloca [1 x %struct.__mpz_struct], align 16
  %maxy = alloca [1 x %struct.__mpz_struct], align 16
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !4639, metadata !DIExpression()), !dbg !4660
  call void @llvm.dbg.value(metadata %union.tree_node* %x, metadata !4640, metadata !DIExpression()), !dbg !4660
  call void @llvm.dbg.value(metadata %union.tree_node* %y, metadata !4641, metadata !DIExpression()), !dbg !4660
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !4642, metadata !DIExpression()), !dbg !4660
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %x, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4661
  %0 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4661
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !4643, metadata !DIExpression()), !dbg !4660
  %1 = bitcast %union.tree_node** %varx to i8*, !dbg !4662
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !4662
  %2 = bitcast %union.tree_node** %vary to i8*, !dbg !4662
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #8, !dbg !4662
  %3 = bitcast [1 x %struct.__mpz_struct]* %offx to i8*, !dbg !4663
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #8, !dbg !4663
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %offx, metadata !4646, metadata !DIExpression()), !dbg !4664
  %4 = bitcast [1 x %struct.__mpz_struct]* %offy to i8*, !dbg !4663
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #8, !dbg !4663
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %offy, metadata !4647, metadata !DIExpression()), !dbg !4665
  %5 = bitcast [1 x %struct.__mpz_struct]* %minx to i8*, !dbg !4666
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8, !dbg !4666
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %minx, metadata !4648, metadata !DIExpression()), !dbg !4667
  %6 = bitcast [1 x %struct.__mpz_struct]* %maxx to i8*, !dbg !4666
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8, !dbg !4666
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %maxx, metadata !4649, metadata !DIExpression()), !dbg !4668
  %7 = bitcast [1 x %struct.__mpz_struct]* %miny to i8*, !dbg !4666
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8, !dbg !4666
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %miny, metadata !4650, metadata !DIExpression()), !dbg !4669
  %8 = bitcast [1 x %struct.__mpz_struct]* %maxy to i8*, !dbg !4666
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #8, !dbg !4666
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %maxy, metadata !4651, metadata !DIExpression()), !dbg !4670
  call void @llvm.dbg.value(metadata i32 0, metadata !4652, metadata !DIExpression()), !dbg !4660
  %call = tail call %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node* %x) #6, !dbg !4671
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !4640, metadata !DIExpression()), !dbg !4660
  %call2 = tail call %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node* %y) #6, !dbg !4672
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !4641, metadata !DIExpression()), !dbg !4660
  %arraydecay = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !4673
  tail call void @mpz_init(%struct.__mpz_struct* %arraydecay) #6, !dbg !4674
  %arraydecay3 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !4675
  tail call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay3) #6, !dbg !4676
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offx, i64 0, i64 0, !dbg !4677
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay4) #6, !dbg !4678
  %arraydecay5 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offy, i64 0, i64 0, !dbg !4679
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay5) #6, !dbg !4680
  call void @llvm.dbg.value(metadata %union.tree_node** %varx, metadata !4644, metadata !DIExpression(DW_OP_deref)), !dbg !4660
  call fastcc void @split_to_var_and_offset(%union.tree_node* %call, %union.tree_node** nonnull %varx, %struct.__mpz_struct* nonnull %arraydecay4) #7, !dbg !4681
  call void @llvm.dbg.value(metadata %union.tree_node** %vary, metadata !4645, metadata !DIExpression(DW_OP_deref)), !dbg !4660
  call fastcc void @split_to_var_and_offset(%union.tree_node* %call2, %union.tree_node** nonnull %vary, %struct.__mpz_struct* nonnull %arraydecay5) #7, !dbg !4682
  %9 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !4683
  call void @llvm.dbg.value(metadata %union.tree_node* %9, metadata !4644, metadata !DIExpression()), !dbg !4660
  %call8 = call i32 @integer_zerop(%union.tree_node* %9) #6, !dbg !4685
  %tobool = icmp eq i32 %call8, 0, !dbg !4685
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4686

land.lhs.true:                                    ; preds = %entry
  %10 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !4687
  call void @llvm.dbg.value(metadata %union.tree_node* %10, metadata !4644, metadata !DIExpression()), !dbg !4660
  %11 = load %union.tree_node*, %union.tree_node** %vary, align 8, !dbg !4688
  call void @llvm.dbg.value(metadata %union.tree_node* %11, metadata !4645, metadata !DIExpression()), !dbg !4660
  %call9 = call i32 @operand_equal_p(%union.tree_node* %10, %union.tree_node* %11, i32 0) #6, !dbg !4689
  %tobool10 = icmp eq i32 %call9, 0, !dbg !4689
  br i1 %tobool10, label %if.else, label %if.then, !dbg !4690

if.then:                                          ; preds = %land.lhs.true
  call fastcc void @bound_difference_of_offsetted_base(%union.tree_node* %0, %struct.__mpz_struct* nonnull %arraydecay4, %struct.__mpz_struct* nonnull %arraydecay5, %struct.bounds* %bnds) #7, !dbg !4691
  br label %if.end, !dbg !4693

if.else:                                          ; preds = %land.lhs.true, %entry
  %arraydecay13 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %minx, i64 0, i64 0, !dbg !4694
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay13) #6, !dbg !4696
  %arraydecay14 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxx, i64 0, i64 0, !dbg !4697
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay14) #6, !dbg !4698
  %arraydecay15 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %miny, i64 0, i64 0, !dbg !4699
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay15) #6, !dbg !4700
  %arraydecay16 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %maxy, i64 0, i64 0, !dbg !4701
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay16) #6, !dbg !4702
  %12 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !4703
  call void @llvm.dbg.value(metadata %union.tree_node* %12, metadata !4644, metadata !DIExpression()), !dbg !4660
  call fastcc void @determine_value_range(%union.tree_node* %0, %union.tree_node* %12, %struct.__mpz_struct* nonnull %arraydecay4, %struct.__mpz_struct* nonnull %arraydecay13, %struct.__mpz_struct* nonnull %arraydecay14) #7, !dbg !4704
  %13 = load %union.tree_node*, %union.tree_node** %vary, align 8, !dbg !4705
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !4645, metadata !DIExpression()), !dbg !4660
  call fastcc void @determine_value_range(%union.tree_node* %0, %union.tree_node* %13, %struct.__mpz_struct* nonnull %arraydecay5, %struct.__mpz_struct* nonnull %arraydecay15, %struct.__mpz_struct* nonnull %arraydecay16) #7, !dbg !4706
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay, %struct.__mpz_struct* nonnull %arraydecay13, %struct.__mpz_struct* nonnull %arraydecay16) #6, !dbg !4707
  call void @mpz_sub(%struct.__mpz_struct* nonnull %arraydecay3, %struct.__mpz_struct* nonnull %arraydecay14, %struct.__mpz_struct* nonnull %arraydecay15) #6, !dbg !4708
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay13) #6, !dbg !4709
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay14) #6, !dbg !4710
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay15) #6, !dbg !4711
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay16) #6, !dbg !4712
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !4713
  call void @llvm.dbg.value(metadata %union.tree_node* %14, metadata !4644, metadata !DIExpression()), !dbg !4660
  %call35 = call i32 @integer_zerop(%union.tree_node* %14) #6, !dbg !4715
  %tobool36 = icmp eq i32 %call35, 0, !dbg !4715
  br i1 %tobool36, label %if.end41, label %land.lhs.true37, !dbg !4716

land.lhs.true37:                                  ; preds = %if.end
  %15 = load %union.tree_node*, %union.tree_node** %vary, align 8, !dbg !4717
  call void @llvm.dbg.value(metadata %union.tree_node* %15, metadata !4645, metadata !DIExpression()), !dbg !4660
  %call38 = call i32 @integer_zerop(%union.tree_node* %15) #6, !dbg !4718
  %tobool39 = icmp eq i32 %call38, 0, !dbg !4718
  br i1 %tobool39, label %if.end41, label %end, !dbg !4719

if.end41:                                         ; preds = %land.lhs.true37, %if.end
  %header = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 2, !dbg !4720
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4720
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %16, metadata !4654, metadata !DIExpression()), !dbg !4660
  br label %for.cond, !dbg !4722

for.cond:                                         ; preds = %for.inc, %if.end41
  %cnt.0 = phi i32 [ 0, %if.end41 ], [ %cnt.1, %for.inc ], !dbg !4660
  %bb.0 = phi %struct.basic_block_def* [ %16, %if.end41 ], [ %call64, %for.inc ], !dbg !4723
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb.0, metadata !4654, metadata !DIExpression()), !dbg !4660
  call void @llvm.dbg.value(metadata i32 %cnt.0, metadata !4652, metadata !DIExpression()), !dbg !4660
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4724
  %cfg = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, i32 1, !dbg !4724
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4724
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i64 0, i32 0, !dbg !4724
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4724
  %cmp42 = icmp ne %struct.basic_block_def* %bb.0, %19, !dbg !4726
  %cmp43 = icmp slt i32 %cnt.0, 8, !dbg !4727
  %spec.select = and i1 %cmp43, %cmp42, !dbg !4728
  br i1 %spec.select, label %for.body, label %end.loopexit, !dbg !4729

for.body:                                         ; preds = %for.cond
  %call44 = call fastcc zeroext i8 @single_pred_p(%struct.basic_block_def* %bb.0) #7, !dbg !4730
  %tobool45 = icmp eq i8 %call44, 0, !dbg !4730
  br i1 %tobool45, label %for.inc, label %if.end47, !dbg !4733

if.end47:                                         ; preds = %for.body
  %call48 = call fastcc %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb.0) #7, !dbg !4734
  call void @llvm.dbg.value(metadata %struct.edge_def* %call48, metadata !4653, metadata !DIExpression()), !dbg !4660
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call48, i64 0, i32 7, !dbg !4735
  %20 = load i32, i32* %flags, align 8, !dbg !4735
  %and = and i32 %20, 3072, !dbg !4737
  %tobool49 = icmp eq i32 %and, 0, !dbg !4737
  br i1 %tobool49, label %for.inc, label %if.end51, !dbg !4738

if.end51:                                         ; preds = %if.end47
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call48, i64 0, i32 0, !dbg !4739
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4739
  %call52 = call %union.gimple_statement_d* @last_stmt(%struct.basic_block_def* %21) #6, !dbg !4740
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call52, metadata !4657, metadata !DIExpression()), !dbg !4660
  %call53 = call fastcc %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %call52) #7, !dbg !4741
  call void @llvm.dbg.value(metadata %union.tree_node* %call53, metadata !4655, metadata !DIExpression()), !dbg !4660
  %call54 = call fastcc i32 @gimple_cond_code(%union.gimple_statement_d* %call52) #7, !dbg !4742
  call void @llvm.dbg.value(metadata i32 %call54, metadata !4658, metadata !DIExpression()), !dbg !4660
  %call55 = call fastcc %union.tree_node* @gimple_cond_rhs(%union.gimple_statement_d* %call52) #7, !dbg !4743
  call void @llvm.dbg.value(metadata %union.tree_node* %call55, metadata !4656, metadata !DIExpression()), !dbg !4660
  %22 = load i32, i32* %flags, align 8, !dbg !4744
  %and57 = and i32 %22, 2048, !dbg !4746
  %tobool58 = icmp eq i32 %and57, 0, !dbg !4746
  br i1 %tobool58, label %if.end61, label %if.then59, !dbg !4747

if.then59:                                        ; preds = %if.end51
  %call60 = call i32 @invert_tree_comparison(i32 %call54, i8 zeroext 0) #6, !dbg !4748
  call void @llvm.dbg.value(metadata i32 %call60, metadata !4658, metadata !DIExpression()), !dbg !4660
  br label %if.end61, !dbg !4749

if.end61:                                         ; preds = %if.end51, %if.then59
  %cmp.0 = phi i32 [ %call60, %if.then59 ], [ %call54, %if.end51 ], !dbg !4750
  call void @llvm.dbg.value(metadata i32 %cmp.0, metadata !4658, metadata !DIExpression()), !dbg !4660
  %23 = load %union.tree_node*, %union.tree_node** %varx, align 8, !dbg !4751
  call void @llvm.dbg.value(metadata %union.tree_node* %23, metadata !4644, metadata !DIExpression()), !dbg !4660
  %24 = load %union.tree_node*, %union.tree_node** %vary, align 8, !dbg !4752
  call void @llvm.dbg.value(metadata %union.tree_node* %24, metadata !4645, metadata !DIExpression()), !dbg !4660
  call fastcc void @refine_bounds_using_guard(%union.tree_node* %0, %union.tree_node* %23, %struct.__mpz_struct* nonnull %arraydecay4, %union.tree_node* %24, %struct.__mpz_struct* nonnull %arraydecay5, %union.tree_node* %call53, i32 %cmp.0, %union.tree_node* %call55, %struct.bounds* %bnds) #7, !dbg !4753
  %inc = add nsw i32 %cnt.0, 1, !dbg !4754
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4652, metadata !DIExpression()), !dbg !4660
  br label %for.inc, !dbg !4755

for.inc:                                          ; preds = %if.end47, %for.body, %if.end61
  %cnt.1 = phi i32 [ %inc, %if.end61 ], [ %cnt.0, %for.body ], [ %cnt.0, %if.end47 ], !dbg !4660
  call void @llvm.dbg.value(metadata i32 %cnt.1, metadata !4652, metadata !DIExpression()), !dbg !4660
  %call64 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %bb.0) #6, !dbg !4756
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call64, metadata !4654, metadata !DIExpression()), !dbg !4660
  br label %for.cond, !dbg !4757, !llvm.loop !4758

end.loopexit:                                     ; preds = %for.cond
  br label %end, !dbg !4760

end:                                              ; preds = %end.loopexit, %land.lhs.true37
  call void @llvm.dbg.label(metadata !4659), !dbg !4761
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay4) #6, !dbg !4762
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay5) #6, !dbg !4763
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #8, !dbg !4764
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8, !dbg !4764
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8, !dbg !4764
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8, !dbg !4764
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #8, !dbg !4764
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #8, !dbg !4764
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #8, !dbg !4764
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !4764
  ret void, !dbg !4764
}

; Function Attrs: nounwind uwtable
define internal fastcc void @dump_affine_iv(%struct._IO_FILE* %file, %struct.affine_iv* %iv) unnamed_addr #5 !dbg !4765 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %file, metadata !4769, metadata !DIExpression()), !dbg !4771
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv, metadata !4770, metadata !DIExpression()), !dbg !4771
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i64 0, i32 1, !dbg !4772
  %0 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4772
  %call = tail call i32 @integer_zerop(%union.tree_node* %0) #6, !dbg !4774
  %tobool = icmp eq i32 %call, 0, !dbg !4774
  br i1 %tobool, label %if.then, label %if.end, !dbg !4775

if.then:                                          ; preds = %entry
  %call1 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !4776
  br label %if.end, !dbg !4776

if.end:                                           ; preds = %entry, %if.then
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4777
  %base = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i64 0, i32 0, !dbg !4778
  %2 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4778
  tail call void @print_generic_expr(%struct._IO_FILE* %1, %union.tree_node* %2, i32 2) #6, !dbg !4779
  %3 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4780
  %call3 = tail call i32 @integer_zerop(%union.tree_node* %3) #6, !dbg !4782
  %tobool4 = icmp eq i32 %call3, 0, !dbg !4782
  br i1 %tobool4, label %if.then5, label %if.end10, !dbg !4783

if.then5:                                         ; preds = %if.end
  %call6 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.29, i64 0, i64 0)) #6, !dbg !4784
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4786
  %5 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4787
  tail call void @print_generic_expr(%struct._IO_FILE* %4, %union.tree_node* %5, i32 2) #6, !dbg !4788
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i64 0, i32 2, !dbg !4789
  %6 = load i8, i8* %no_overflow, align 8, !dbg !4789
  %tobool8 = icmp eq i8 %6, 0, !dbg !4790
  %cond = select i1 %tobool8, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.32, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i64 0, i64 0), !dbg !4790
  %call9 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0), i8* %cond) #6, !dbg !4791
  br label %if.end10, !dbg !4792

if.end10:                                         ; preds = %if.end, %if.then5
  ret void, !dbg !4793
}

declare dso_local i64 @mpz_out_str(%struct._IO_FILE*, i32, %struct.__mpz_struct*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @number_of_iterations_ne(%union.tree_node* %type, %struct.affine_iv* %iv, %union.tree_node* %final, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) unnamed_addr #5 !dbg !4794 {
entry:
  %max = alloca [1 x %struct.__mpz_struct], align 16
  %tmp17 = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !4798, metadata !DIExpression()), !dbg !4813
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv, metadata !4799, metadata !DIExpression()), !dbg !4813
  call void @llvm.dbg.value(metadata %union.tree_node* %final, metadata !4800, metadata !DIExpression()), !dbg !4813
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %niter, metadata !4801, metadata !DIExpression()), !dbg !4813
  call void @llvm.dbg.value(metadata i8 %exit_must_be_taken, metadata !4802, metadata !DIExpression()), !dbg !4813
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !4803, metadata !DIExpression()), !dbg !4813
  %call = tail call %union.tree_node* @unsigned_type_for(%union.tree_node* %type) #6, !dbg !4814
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !4804, metadata !DIExpression()), !dbg !4813
  %0 = bitcast [1 x %struct.__mpz_struct]* %max to i8*, !dbg !4815
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !4815
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %max, metadata !4812, metadata !DIExpression()), !dbg !4816
  %control = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 4, !dbg !4817
  %1 = bitcast %struct.affine_iv* %control to i8*, !dbg !4818
  %2 = bitcast %struct.affine_iv* %iv to i8*, !dbg !4818
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* align 8 %2, i64 24, i1 false), !dbg !4818
  %bound1 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 5, !dbg !4819
  store %union.tree_node* %final, %union.tree_node** %bound1, align 8, !dbg !4820
  %cmp = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 6, !dbg !4821
  store i32 102, i32* %cmp, align 8, !dbg !4822
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i64 0, i32 1, !dbg !4823
  %3 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4823
  %call2 = tail call i32 @tree_int_cst_sign_bit(%union.tree_node* %3) #6, !dbg !4825
  %tobool = icmp eq i32 %call2, 0, !dbg !4825
  %4 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !4826
  br i1 %tobool, label %if.else, label %if.then, !dbg !4827

if.then:                                          ; preds = %entry
  %call4 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %type, %union.tree_node* %4) #6, !dbg !4828
  %call5 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %call4) #6, !dbg !4828
  call void @llvm.dbg.value(metadata %union.tree_node* %call5, metadata !4805, metadata !DIExpression()), !dbg !4813
  %base = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i64 0, i32 0, !dbg !4830
  %5 = load %union.tree_node*, %union.tree_node** %base, align 8, !dbg !4830
  %call6 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %5) #6, !dbg !4830
  %call7 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %final) #6, !dbg !4830
  %call8 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %call, %union.tree_node* %call6, %union.tree_node* %call7) #6, !dbg !4830
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !4806, metadata !DIExpression()), !dbg !4813
  tail call fastcc void @bounds_negate(%struct.bounds* %bnds) #7, !dbg !4831
  br label %if.end, !dbg !4832

if.else:                                          ; preds = %entry
  %call10 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %4) #6, !dbg !4833
  call void @llvm.dbg.value(metadata %union.tree_node* %call10, metadata !4805, metadata !DIExpression()), !dbg !4813
  %call11 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %final) #6, !dbg !4835
  %base12 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i64 0, i32 0, !dbg !4835
  %6 = load %union.tree_node*, %union.tree_node** %base12, align 8, !dbg !4835
  %call13 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %6) #6, !dbg !4835
  %call14 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %call, %union.tree_node* %call11, %union.tree_node* %call13) #6, !dbg !4835
  call void @llvm.dbg.value(metadata %union.tree_node* %call14, metadata !4806, metadata !DIExpression()), !dbg !4813
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %s.0 = phi %union.tree_node* [ %call5, %if.then ], [ %call10, %if.else ], !dbg !4826
  %c.0 = phi %union.tree_node* [ %call8, %if.then ], [ %call14, %if.else ], !dbg !4826
  call void @llvm.dbg.value(metadata %union.tree_node* %c.0, metadata !4806, metadata !DIExpression()), !dbg !4813
  call void @llvm.dbg.value(metadata %union.tree_node* %s.0, metadata !4805, metadata !DIExpression()), !dbg !4813
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !4836
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !4837
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv, i64 0, i32 2, !dbg !4838
  %7 = load i8, i8* %no_overflow, align 8, !dbg !4838
  call fastcc void @number_of_iterations_ne_max(%struct.__mpz_struct* nonnull %arraydecay, i8 zeroext %7, %union.tree_node* %c.0, %union.tree_node* %s.0, %struct.bounds* %bnds) #7, !dbg !4839
  %max16 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 3, !dbg !4840
  %8 = bitcast %struct.double_int* %tmp17 to i8*, !dbg !4841
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #8, !dbg !4841
  %call19 = call { i64, i64 } @mpz_get_double_int(%union.tree_node* %call, %struct.__mpz_struct* nonnull %arraydecay, i8 zeroext 0) #6, !dbg !4841
  %9 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp17, i64 0, i32 0, !dbg !4841
  %10 = extractvalue { i64, i64 } %call19, 0, !dbg !4841
  store i64 %10, i64* %9, align 8, !dbg !4841
  %11 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp17, i64 0, i32 1, !dbg !4841
  %12 = extractvalue { i64, i64 } %call19, 1, !dbg !4841
  store i64 %12, i64* %11, align 8, !dbg !4841
  %13 = bitcast %struct.double_int* %max16 to i8*, !dbg !4841
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %13, i8* nonnull align 8 %8, i64 16, i1 false), !dbg !4841
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #8, !dbg !4841
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !4842
  %call21 = call i32 @integer_onep(%union.tree_node* %s.0) #6, !dbg !4843
  %tobool22 = icmp eq i32 %call21, 0, !dbg !4843
  br i1 %tobool22, label %if.end25, label %if.then23, !dbg !4845

if.then23:                                        ; preds = %if.end
  %niter24 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 2, !dbg !4846
  store %union.tree_node* %c.0, %union.tree_node** %niter24, align 8, !dbg !4848
  br label %cleanup, !dbg !4849

if.end25:                                         ; preds = %if.end
  %call26 = call %union.tree_node* @num_ending_zeros(%union.tree_node* %s.0) #6, !dbg !4850
  call void @llvm.dbg.value(metadata %union.tree_node* %call26, metadata !4808, metadata !DIExpression()), !dbg !4813
  %type27 = bitcast %union.tree_node* %call to %struct.tree_type*, !dbg !4851
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i64 0, i32 6, !dbg !4851
  %bf.load = load i32, i32* %precision, align 4, !dbg !4851
  %bf.clear = and i32 %bf.load, 1023, !dbg !4851
  %call28 = call i64 @tree_low_cst(%union.tree_node* %call26, i32 1) #6, !dbg !4852
  %14 = trunc i64 %call28 to i32, !dbg !4853
  %conv29 = sub i32 %bf.clear, %14, !dbg !4853
  %call30 = call %union.tree_node* @build_low_bits_mask(%union.tree_node* %call, i32 %conv29) #6, !dbg !4854
  call void @llvm.dbg.value(metadata %union.tree_node* %call30, metadata !4811, metadata !DIExpression()), !dbg !4813
  %call31 = call %union.tree_node* @build_int_cst(%union.tree_node* %call, i64 1) #6, !dbg !4855
  %call32 = call %union.tree_node* @fold_binary_to_constant(i32 83, %union.tree_node* %call, %union.tree_node* %call31, %union.tree_node* %call26) #6, !dbg !4856
  call void @llvm.dbg.value(metadata %union.tree_node* %call32, metadata !4807, metadata !DIExpression()), !dbg !4813
  %call33 = call %union.tree_node* @fold_binary_to_constant(i32 84, %union.tree_node* %call, %union.tree_node* %s.0, %union.tree_node* %call26) #6, !dbg !4857
  call void @llvm.dbg.value(metadata %union.tree_node* %call33, metadata !4805, metadata !DIExpression()), !dbg !4813
  %tobool34 = icmp eq i8 %exit_must_be_taken, 0, !dbg !4858
  br i1 %tobool34, label %if.then35, label %if.end45, !dbg !4860

if.then35:                                        ; preds = %if.end25
  %call36 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 73, %union.tree_node* %call, %union.tree_node* %c.0, %union.tree_node* %call32) #6, !dbg !4861
  call void @llvm.dbg.value(metadata %union.tree_node* %call36, metadata !4809, metadata !DIExpression()), !dbg !4813
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4863
  %call37 = call %union.tree_node* @build_int_cst(%union.tree_node* %call, i64 0) #6, !dbg !4863
  %call38 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 101, %union.tree_node* %15, %union.tree_node* %call36, %union.tree_node* %call37) #6, !dbg !4863
  call void @llvm.dbg.value(metadata %union.tree_node* %call38, metadata !4809, metadata !DIExpression()), !dbg !4813
  %call39 = call i32 @integer_nonzerop(%union.tree_node* %call38) #6, !dbg !4864
  %tobool40 = icmp eq i32 %call39, 0, !dbg !4864
  br i1 %tobool40, label %if.then41, label %if.end45, !dbg !4866

if.then41:                                        ; preds = %if.then35
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4867
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 0, !dbg !4867
  %17 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !4867
  %call42 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %16, %union.tree_node* %17, %union.tree_node* %call38) #6, !dbg !4867
  store %union.tree_node* %call42, %union.tree_node** %assumptions, align 8, !dbg !4868
  br label %if.end45, !dbg !4869

if.end45:                                         ; preds = %if.then35, %if.end25, %if.then41
  %call46 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 76, %union.tree_node* %call, %union.tree_node* %c.0, %union.tree_node* %call32) #6, !dbg !4870
  call void @llvm.dbg.value(metadata %union.tree_node* %call46, metadata !4806, metadata !DIExpression()), !dbg !4813
  %call47 = call fastcc %union.tree_node* @inverse(%union.tree_node* %call33, %union.tree_node* %call30) #7, !dbg !4871
  %call48 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 65, %union.tree_node* %call, %union.tree_node* %call46, %union.tree_node* %call47) #6, !dbg !4871
  call void @llvm.dbg.value(metadata %union.tree_node* %call48, metadata !4810, metadata !DIExpression()), !dbg !4813
  %call49 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 89, %union.tree_node* %call, %union.tree_node* %call48, %union.tree_node* %call30) #6, !dbg !4872
  %niter50 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 2, !dbg !4873
  store %union.tree_node* %call49, %union.tree_node** %niter50, align 8, !dbg !4874
  br label %cleanup, !dbg !4875

cleanup:                                          ; preds = %if.end45, %if.then23
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !4876
  ret i8 undef, !dbg !4876
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @number_of_iterations_lt(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) unnamed_addr #5 !dbg !4877 {
entry:
  %delta = alloca %union.tree_node*, align 8
  %mstep = alloca [1 x %struct.__mpz_struct], align 16
  %tmp = alloca [1 x %struct.__mpz_struct], align 16
  %tmp34 = alloca %struct.double_int, align 8
  %zps = alloca %struct.affine_iv, align 8
  %tmp80 = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !4881, metadata !DIExpression()), !dbg !4896
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0, metadata !4882, metadata !DIExpression()), !dbg !4896
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1, metadata !4883, metadata !DIExpression()), !dbg !4896
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %niter, metadata !4884, metadata !DIExpression()), !dbg !4896
  call void @llvm.dbg.value(metadata i8 %exit_must_be_taken, metadata !4885, metadata !DIExpression()), !dbg !4896
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !4886, metadata !DIExpression()), !dbg !4896
  %call = tail call %union.tree_node* @unsigned_type_for(%union.tree_node* %type) #6, !dbg !4897
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !4887, metadata !DIExpression()), !dbg !4896
  %0 = bitcast %union.tree_node** %delta to i8*, !dbg !4898
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !4898
  %1 = bitcast [1 x %struct.__mpz_struct]* %mstep to i8*, !dbg !4899
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !4899
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %mstep, metadata !4891, metadata !DIExpression()), !dbg !4900
  %2 = bitcast [1 x %struct.__mpz_struct]* %tmp to i8*, !dbg !4899
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !4899
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tmp, metadata !4892, metadata !DIExpression()), !dbg !4901
  %step1 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 1, !dbg !4902
  %3 = load %union.tree_node*, %union.tree_node** %step1, align 8, !dbg !4902
  %call2 = tail call i32 @integer_nonzerop(%union.tree_node* %3) #6, !dbg !4904
  %tobool = icmp eq i32 %call2, 0, !dbg !4904
  %control = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 4, !dbg !4905
  %4 = bitcast %struct.affine_iv* %control to i8*, !dbg !4905
  br i1 %tobool, label %if.else, label %if.then, !dbg !4906

if.then:                                          ; preds = %entry
  %5 = bitcast %struct.affine_iv* %iv0 to i8*, !dbg !4907
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %5, i64 24, i1 false), !dbg !4907
  %cmp = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 6, !dbg !4909
  store i32 97, i32* %cmp, align 8, !dbg !4910
  %6 = bitcast %struct.affine_iv* %iv1 to i64*, !dbg !4911
  %7 = load i64, i64* %6, align 8, !dbg !4911
  %bound = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 5, !dbg !4912
  %8 = bitcast %union.tree_node** %bound to i64*, !dbg !4913
  store i64 %7, i64* %8, align 8, !dbg !4913
  br label %if.end, !dbg !4914

if.else:                                          ; preds = %entry
  %9 = bitcast %struct.affine_iv* %iv1 to i8*, !dbg !4915
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %9, i64 24, i1 false), !dbg !4915
  %cmp4 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 6, !dbg !4917
  store i32 99, i32* %cmp4, align 8, !dbg !4918
  %10 = bitcast %struct.affine_iv* %iv0 to i64*, !dbg !4919
  %11 = load i64, i64* %10, align 8, !dbg !4919
  %bound6 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 5, !dbg !4920
  %12 = bitcast %union.tree_node** %bound6 to i64*, !dbg !4921
  store i64 %11, i64* %12, align 8, !dbg !4921
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %base7 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !4922
  %13 = load %union.tree_node*, %union.tree_node** %base7, align 8, !dbg !4922
  %call8 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %13) #6, !dbg !4922
  %base9 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !4922
  %14 = load %union.tree_node*, %union.tree_node** %base9, align 8, !dbg !4922
  %call10 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %14) #6, !dbg !4922
  %call11 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %call, %union.tree_node* %call8, %union.tree_node* %call10) #6, !dbg !4922
  call void @llvm.dbg.value(metadata %union.tree_node* %call11, metadata !4888, metadata !DIExpression()), !dbg !4896
  store %union.tree_node* %call11, %union.tree_node** %delta, align 8, !dbg !4923
  %15 = load %union.tree_node*, %union.tree_node** %step1, align 8, !dbg !4924
  %call13 = tail call i32 @integer_onep(%union.tree_node* %15) #6, !dbg !4926
  %tobool14 = icmp eq i32 %call13, 0, !dbg !4926
  %16 = ptrtoint %union.tree_node* %call11 to i64, !dbg !4927
  br i1 %tobool14, label %lor.lhs.false, label %land.lhs.true, !dbg !4927

land.lhs.true:                                    ; preds = %if.end
  %step15 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 1, !dbg !4928
  %17 = load %union.tree_node*, %union.tree_node** %step15, align 8, !dbg !4928
  %call16 = tail call i32 @integer_zerop(%union.tree_node* %17) #6, !dbg !4929
  %tobool17 = icmp eq i32 %call16, 0, !dbg !4929
  br i1 %tobool17, label %lor.lhs.false, label %if.then25, !dbg !4930

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end
  %step18 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 1, !dbg !4931
  %18 = load %union.tree_node*, %union.tree_node** %step18, align 8, !dbg !4931
  %call19 = tail call i32 @integer_all_onesp(%union.tree_node* %18) #6, !dbg !4932
  %tobool20 = icmp eq i32 %call19, 0, !dbg !4932
  br i1 %tobool20, label %if.end37, label %land.lhs.true21, !dbg !4933

land.lhs.true21:                                  ; preds = %lor.lhs.false
  %19 = load %union.tree_node*, %union.tree_node** %step1, align 8, !dbg !4934
  %call23 = tail call i32 @integer_zerop(%union.tree_node* %19) #6, !dbg !4935
  %tobool24 = icmp eq i32 %call23, 0, !dbg !4935
  br i1 %tobool24, label %if.end37, label %if.then25, !dbg !4936

if.then25:                                        ; preds = %land.lhs.true, %land.lhs.true21
  %arraydecay = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !4937
  %call26 = tail call i32 @mpz_sgn(%struct.__mpz_struct* %arraydecay) #6, !dbg !4940
  %cmp27 = icmp slt i32 %call26, 0, !dbg !4941
  br i1 %cmp27, label %if.then28, label %if.end32, !dbg !4942

if.then28:                                        ; preds = %if.then25
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !4943
  %21 = load %union.tree_node*, %union.tree_node** %base7, align 8, !dbg !4943
  %22 = load %union.tree_node*, %union.tree_node** %base9, align 8, !dbg !4943
  %call31 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 97, %union.tree_node* %20, %union.tree_node* %21, %union.tree_node* %22) #6, !dbg !4943
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 1, !dbg !4944
  store %union.tree_node* %call31, %union.tree_node** %may_be_zero, align 8, !dbg !4945
  br label %if.end32, !dbg !4946

if.end32:                                         ; preds = %if.then28, %if.then25
  %niter33 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 2, !dbg !4947
  %23 = bitcast %union.tree_node** %niter33 to i64*, !dbg !4948
  store i64 %16, i64* %23, align 8, !dbg !4948
  %max = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 3, !dbg !4949
  %24 = bitcast %struct.double_int* %tmp34 to i8*, !dbg !4950
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #8, !dbg !4950
  %arraydecay35 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !4951
  %call36 = tail call { i64, i64 } @mpz_get_double_int(%union.tree_node* %call, %struct.__mpz_struct* nonnull %arraydecay35, i8 zeroext 0) #6, !dbg !4950
  %25 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp34, i64 0, i32 0, !dbg !4950
  %26 = extractvalue { i64, i64 } %call36, 0, !dbg !4950
  store i64 %26, i64* %25, align 8, !dbg !4950
  %27 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp34, i64 0, i32 1, !dbg !4950
  %28 = extractvalue { i64, i64 } %call36, 1, !dbg !4950
  store i64 %28, i64* %27, align 8, !dbg !4950
  %29 = bitcast %struct.double_int* %max to i8*, !dbg !4950
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %29, i8* nonnull align 8 %24, i64 16, i1 false), !dbg !4950
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #8, !dbg !4950
  br label %cleanup, !dbg !4952

if.end37:                                         ; preds = %land.lhs.true21, %lor.lhs.false
  %30 = load %union.tree_node*, %union.tree_node** %step1, align 8, !dbg !4953
  %call39 = tail call i32 @integer_nonzerop(%union.tree_node* %30) #6, !dbg !4955
  %tobool40 = icmp eq i32 %call39, 0, !dbg !4955
  br i1 %tobool40, label %if.else44, label %if.then41, !dbg !4956

if.then41:                                        ; preds = %if.end37
  %31 = load %union.tree_node*, %union.tree_node** %step1, align 8, !dbg !4957
  %call43 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %31) #6, !dbg !4957
  call void @llvm.dbg.value(metadata %union.tree_node* %call43, metadata !4889, metadata !DIExpression()), !dbg !4896
  br label %if.end48, !dbg !4958

if.else44:                                        ; preds = %if.end37
  %32 = load %union.tree_node*, %union.tree_node** %step18, align 8, !dbg !4959
  %call46 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %type, %union.tree_node* %32) #6, !dbg !4959
  %call47 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call, %union.tree_node* %call46) #6, !dbg !4959
  call void @llvm.dbg.value(metadata %union.tree_node* %call47, metadata !4889, metadata !DIExpression()), !dbg !4896
  br label %if.end48

if.end48:                                         ; preds = %if.else44, %if.then41
  %step.0 = phi %union.tree_node* [ %call43, %if.then41 ], [ %call47, %if.else44 ], !dbg !4960
  call void @llvm.dbg.value(metadata %union.tree_node* %step.0, metadata !4889, metadata !DIExpression()), !dbg !4896
  call void @llvm.dbg.value(metadata %union.tree_node** %delta, metadata !4888, metadata !DIExpression(DW_OP_deref)), !dbg !4896
  %call49 = call fastcc zeroext i8 @number_of_iterations_lt_to_ne(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, %union.tree_node** nonnull %delta, %union.tree_node* %step.0, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) #7, !dbg !4961
  %tobool50 = icmp eq i8 %call49, 0, !dbg !4961
  br i1 %tobool50, label %if.end56, label %if.then51, !dbg !4962

if.then51:                                        ; preds = %if.end48
  %33 = bitcast %struct.affine_iv* %zps to i8*, !dbg !4963
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %33) #8, !dbg !4963
  %call52 = call %union.tree_node* @build_int_cst(%union.tree_node* %call, i64 0) #6, !dbg !4964
  %base53 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %zps, i64 0, i32 0, !dbg !4965
  store %union.tree_node* %call52, %union.tree_node** %base53, align 8, !dbg !4966
  %step54 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %zps, i64 0, i32 1, !dbg !4967
  store %union.tree_node* %step.0, %union.tree_node** %step54, align 8, !dbg !4968
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %zps, i64 0, i32 2, !dbg !4969
  store i8 1, i8* %no_overflow, align 8, !dbg !4970
  %34 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !4971
  call void @llvm.dbg.value(metadata %union.tree_node* %34, metadata !4888, metadata !DIExpression()), !dbg !4896
  call void @llvm.dbg.value(metadata %struct.affine_iv* %zps, metadata !4893, metadata !DIExpression(DW_OP_deref)), !dbg !4972
  %call55 = call fastcc zeroext i8 @number_of_iterations_ne(%union.tree_node* %type, %struct.affine_iv* nonnull %zps, %union.tree_node* %34, %struct.tree_niter_desc* %niter, i8 zeroext 1, %struct.bounds* %bnds) #7, !dbg !4973
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %33) #8, !dbg !4974
  br label %cleanup

if.end56:                                         ; preds = %if.end48
  %call57 = call fastcc zeroext i8 @assert_no_overflow_lt(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, %union.tree_node* %step.0) #7, !dbg !4975
  %tobool58 = icmp eq i8 %call57, 0, !dbg !4975
  br i1 %tobool58, label %cleanup, label %if.end60, !dbg !4977

if.end60:                                         ; preds = %if.end56
  call fastcc void @assert_loop_rolls_lt(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, %struct.bounds* %bnds) #7, !dbg !4978
  %call61 = call %union.tree_node* @build_int_cst(%union.tree_node* %call, i64 1) #6, !dbg !4979
  %call62 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %call, %union.tree_node* %step.0, %union.tree_node* %call61) #6, !dbg !4979
  call void @llvm.dbg.value(metadata %union.tree_node* %call62, metadata !4890, metadata !DIExpression()), !dbg !4896
  %35 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !4980
  call void @llvm.dbg.value(metadata %union.tree_node* %35, metadata !4888, metadata !DIExpression()), !dbg !4896
  %call63 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %call, %union.tree_node* %35, %union.tree_node* %call62) #6, !dbg !4980
  call void @llvm.dbg.value(metadata %union.tree_node* %call63, metadata !4888, metadata !DIExpression()), !dbg !4896
  store %union.tree_node* %call63, %union.tree_node** %delta, align 8, !dbg !4981
  call void @llvm.dbg.value(metadata %union.tree_node* %call63, metadata !4888, metadata !DIExpression()), !dbg !4896
  %call64 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 69, %union.tree_node* %call, %union.tree_node* %call63, %union.tree_node* %step.0) #6, !dbg !4982
  %niter65 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 2, !dbg !4983
  store %union.tree_node* %call64, %union.tree_node** %niter65, align 8, !dbg !4984
  %arraydecay66 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !4985
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay66) #6, !dbg !4986
  %arraydecay67 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !4987
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay67) #6, !dbg !4988
  %call69 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %step.0) #6, !dbg !4989
  %36 = extractvalue { i64, i64 } %call69, 0, !dbg !4989
  %37 = extractvalue { i64, i64 } %call69, 1, !dbg !4989
  call void @mpz_set_double_int(%struct.__mpz_struct* nonnull %arraydecay66, i64 %36, i64 %37, i8 zeroext 1) #6, !dbg !4990
  %arraydecay72 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !4991
  call void @mpz_add(%struct.__mpz_struct* nonnull %arraydecay67, %struct.__mpz_struct* nonnull %arraydecay72, %struct.__mpz_struct* nonnull %arraydecay66) #6, !dbg !4992
  call void @mpz_sub_ui(%struct.__mpz_struct* nonnull %arraydecay67, %struct.__mpz_struct* nonnull %arraydecay67, i64 1) #6, !dbg !4993
  call void @mpz_fdiv_q(%struct.__mpz_struct* nonnull %arraydecay67, %struct.__mpz_struct* nonnull %arraydecay67, %struct.__mpz_struct* nonnull %arraydecay66) #6, !dbg !4994
  %max79 = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 3, !dbg !4995
  %38 = bitcast %struct.double_int* %tmp80 to i8*, !dbg !4996
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %38) #8, !dbg !4996
  %call82 = call { i64, i64 } @mpz_get_double_int(%union.tree_node* %call, %struct.__mpz_struct* nonnull %arraydecay67, i8 zeroext 0) #6, !dbg !4996
  %39 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp80, i64 0, i32 0, !dbg !4996
  %40 = extractvalue { i64, i64 } %call82, 0, !dbg !4996
  store i64 %40, i64* %39, align 8, !dbg !4996
  %41 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp80, i64 0, i32 1, !dbg !4996
  %42 = extractvalue { i64, i64 } %call82, 1, !dbg !4996
  store i64 %42, i64* %41, align 8, !dbg !4996
  %43 = bitcast %struct.double_int* %max79 to i8*, !dbg !4996
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %43, i8* nonnull align 8 %38, i64 16, i1 false), !dbg !4996
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %38) #8, !dbg !4996
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay66) #6, !dbg !4997
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay67) #6, !dbg !4998
  br label %cleanup, !dbg !4999

cleanup:                                          ; preds = %if.end56, %if.end60, %if.then51, %if.end32
  %retval.0 = phi i8 [ 1, %if.end32 ], [ 1, %if.then51 ], [ 1, %if.end60 ], [ 0, %if.end56 ], !dbg !4896
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !5000
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !5000
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !5000
  ret i8 %retval.0, !dbg !5000
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @number_of_iterations_le(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) unnamed_addr #5 !dbg !5001 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5003, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0, metadata !5004, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1, metadata !5005, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %niter, metadata !5006, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.value(metadata i8 %exit_must_be_taken, metadata !5007, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !5008, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5010, metadata !DIExpression()), !dbg !5011
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5012
  %bf.load = load i64, i64* %0, align 8, !dbg !5012
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5012
  %cmp = icmp eq i64 %bf.cast1, 10, !dbg !5012
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5012

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 12, !dbg !5012
  br i1 %cmp5, label %if.then, label %if.end, !dbg !5014

if.then:                                          ; preds = %lor.lhs.false, %entry
  %1 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5015
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !5010, metadata !DIExpression()), !dbg !5011
  br label %if.end, !dbg !5016

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %type1.0 = phi %union.tree_node* [ %1, %if.then ], [ %type, %lor.lhs.false ], !dbg !5011
  call void @llvm.dbg.value(metadata %union.tree_node* %type1.0, metadata !5010, metadata !DIExpression()), !dbg !5011
  %tobool = icmp eq i8 %exit_must_be_taken, 0, !dbg !5017
  br i1 %tobool, label %land.lhs.true, label %if.end37, !dbg !5019

land.lhs.true:                                    ; preds = %if.end
  br i1 %cmp, label %if.end37, label %lor.lhs.false11, !dbg !5020

lor.lhs.false11:                                  ; preds = %land.lhs.true
  %cmp16 = icmp eq i64 %bf.cast1, 12, !dbg !5020
  br i1 %cmp16, label %if.end37, label %if.then17, !dbg !5021

if.then17:                                        ; preds = %lor.lhs.false11
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 1, !dbg !5022
  %2 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5022
  %call = tail call i32 @integer_nonzerop(%union.tree_node* %2) #6, !dbg !5025
  %tobool18 = icmp eq i32 %call, 0, !dbg !5025
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5026
  br i1 %tobool18, label %if.else, label %if.then19, !dbg !5027

if.then19:                                        ; preds = %if.then17
  %base20 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5028
  %4 = load %union.tree_node*, %union.tree_node** %base20, align 8, !dbg !5028
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !5028
  %5 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !5028
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !5028
  %call22 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 102, %union.tree_node* %3, %union.tree_node* %4, %union.tree_node* %6) #6, !dbg !5028
  call void @llvm.dbg.value(metadata %union.tree_node* %call22, metadata !5009, metadata !DIExpression()), !dbg !5011
  br label %if.end26, !dbg !5029

if.else:                                          ; preds = %if.then17
  %base23 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5030
  %7 = load %union.tree_node*, %union.tree_node** %base23, align 8, !dbg !5030
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !5030
  %8 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !5030
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !5030
  %call25 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 102, %union.tree_node* %3, %union.tree_node* %7, %union.tree_node* %9) #6, !dbg !5030
  call void @llvm.dbg.value(metadata %union.tree_node* %call25, metadata !5009, metadata !DIExpression()), !dbg !5011
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then19
  %assumption.0 = phi %union.tree_node* [ %call22, %if.then19 ], [ %call25, %if.else ], !dbg !5026
  call void @llvm.dbg.value(metadata %union.tree_node* %assumption.0, metadata !5009, metadata !DIExpression()), !dbg !5011
  %call27 = tail call i32 @integer_zerop(%union.tree_node* %assumption.0) #6, !dbg !5031
  %tobool28 = icmp eq i32 %call27, 0, !dbg !5031
  br i1 %tobool28, label %if.end30, label %cleanup, !dbg !5033

if.end30:                                         ; preds = %if.end26
  %call31 = tail call i32 @integer_nonzerop(%union.tree_node* %assumption.0) #6, !dbg !5034
  %tobool32 = icmp eq i32 %call31, 0, !dbg !5034
  br i1 %tobool32, label %if.then33, label %if.end37, !dbg !5036

if.then33:                                        ; preds = %if.end30
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5037
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 0, !dbg !5037
  %11 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !5037
  %call34 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* %assumption.0) #6, !dbg !5037
  store %union.tree_node* %call34, %union.tree_node** %assumptions, align 8, !dbg !5038
  br label %if.end37, !dbg !5039

if.end37:                                         ; preds = %if.end30, %if.end, %if.then33, %lor.lhs.false11, %land.lhs.true
  %step38 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 1, !dbg !5040
  %12 = load %union.tree_node*, %union.tree_node** %step38, align 8, !dbg !5040
  %call39 = tail call i32 @integer_nonzerop(%union.tree_node* %12) #6, !dbg !5042
  %tobool40 = icmp eq i32 %call39, 0, !dbg !5042
  %bf.load43 = load i64, i64* %0, align 8, !dbg !5043
  %bf.cast455 = and i64 %bf.load43, 65535, !dbg !5043
  %cmp46 = icmp eq i64 %bf.cast455, 10, !dbg !5043
  br i1 %tobool40, label %if.else64, label %if.then41, !dbg !5044

if.then41:                                        ; preds = %if.end37
  br i1 %cmp46, label %if.then53, label %lor.lhs.false47, !dbg !5045

lor.lhs.false47:                                  ; preds = %if.then41
  %cmp52 = icmp eq i64 %bf.cast455, 12, !dbg !5045
  br i1 %cmp52, label %if.then53, label %if.else58, !dbg !5048

if.then53:                                        ; preds = %lor.lhs.false47, %if.then41
  %base54 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5049
  %13 = load %union.tree_node*, %union.tree_node** %base54, align 8, !dbg !5049
  %call55 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type1.0, i64 1) #6, !dbg !5049
  %call56 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %type, %union.tree_node* %13, %union.tree_node* %call55) #6, !dbg !5049
  store %union.tree_node* %call56, %union.tree_node** %base54, align 8, !dbg !5050
  br label %if.end88, !dbg !5051

if.else58:                                        ; preds = %lor.lhs.false47
  %base59 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5052
  %14 = load %union.tree_node*, %union.tree_node** %base59, align 8, !dbg !5052
  %call60 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type1.0, i64 1) #6, !dbg !5052
  %call61 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %type1.0, %union.tree_node* %14, %union.tree_node* %call60) #6, !dbg !5052
  store %union.tree_node* %call61, %union.tree_node** %base59, align 8, !dbg !5053
  br label %if.end88

if.else64:                                        ; preds = %if.end37
  br i1 %cmp46, label %if.then76, label %lor.lhs.false70, !dbg !5054

lor.lhs.false70:                                  ; preds = %if.else64
  %cmp75 = icmp eq i64 %bf.cast455, 12, !dbg !5054
  br i1 %cmp75, label %if.then76, label %if.else82, !dbg !5056

if.then76:                                        ; preds = %lor.lhs.false70, %if.else64
  %base77 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5057
  %15 = load %union.tree_node*, %union.tree_node** %base77, align 8, !dbg !5057
  %call78 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type1.0, i64 1) #6, !dbg !5057
  %call79 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %type1.0, %union.tree_node* %call78) #6, !dbg !5057
  %call80 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %type, %union.tree_node* %15, %union.tree_node* %call79) #6, !dbg !5057
  store %union.tree_node* %call80, %union.tree_node** %base77, align 8, !dbg !5058
  br label %if.end88, !dbg !5059

if.else82:                                        ; preds = %lor.lhs.false70
  %base83 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5060
  %16 = load %union.tree_node*, %union.tree_node** %base83, align 8, !dbg !5060
  %call84 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %type1.0, i64 1) #6, !dbg !5060
  %call85 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %type1.0, %union.tree_node* %16, %union.tree_node* %call84) #6, !dbg !5060
  store %union.tree_node* %call85, %union.tree_node** %base83, align 8, !dbg !5061
  br label %if.end88

if.end88:                                         ; preds = %if.then76, %if.else82, %if.then53, %if.else58
  %call89 = tail call fastcc { i64, i64 } @shwi_to_double_int(i64 1) #7, !dbg !5062
  %17 = extractvalue { i64, i64 } %call89, 0, !dbg !5062
  %18 = extractvalue { i64, i64 } %call89, 1, !dbg !5062
  tail call fastcc void @bounds_add(%struct.bounds* %bnds, i64 %17, i64 %18, %union.tree_node* %type1.0) #7, !dbg !5063
  %call90 = tail call fastcc zeroext i8 @number_of_iterations_lt(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) #7, !dbg !5064
  br label %cleanup, !dbg !5065

cleanup:                                          ; preds = %if.end26, %if.end88
  %retval.0 = phi i8 [ %call90, %if.end88 ], [ 0, %if.end26 ], !dbg !5011
  ret i8 %retval.0, !dbg !5066
}

declare dso_local void @mpz_clear(%struct.__mpz_struct*) local_unnamed_addr #2

declare dso_local void @dump_double_int(%struct._IO_FILE*, i64, i64, i8 zeroext) local_unnamed_addr #2

declare dso_local %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node*) local_unnamed_addr #2

declare dso_local void @mpz_init(%struct.__mpz_struct*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @split_to_var_and_offset(%union.tree_node* %expr, %union.tree_node** %var, %struct.__mpz_struct* %offset) unnamed_addr #5 !dbg !5067 {
entry:
  %off = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  %tmp11 = alloca %struct.double_int, align 8
  %tmp14 = alloca %struct.double_int, align 8
  %tmp21 = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !5072, metadata !DIExpression()), !dbg !5080
  call void @llvm.dbg.value(metadata %union.tree_node** %var, metadata !5073, metadata !DIExpression()), !dbg !5080
  call void @llvm.dbg.value(metadata %struct.__mpz_struct* %offset, metadata !5074, metadata !DIExpression()), !dbg !5080
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5081
  %0 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5081
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !5075, metadata !DIExpression()), !dbg !5080
  %1 = bitcast %struct.double_int* %off to i8*, !dbg !5082
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !5082
  call void @llvm.dbg.value(metadata i8 0, metadata !5079, metadata !DIExpression()), !dbg !5080
  store %union.tree_node* %expr, %union.tree_node** %var, align 8, !dbg !5083
  tail call void @mpz_set_ui(%struct.__mpz_struct* %offset, i64 0) #6, !dbg !5084
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5085
  %bf.load = load i64, i64* %2, align 8, !dbg !5085
  %3 = trunc i64 %bf.load to i16, !dbg !5085
  switch i16 %3, label %sw.epilog [
    i16 64, label %sw.bb
    i16 63, label %sw.bb2
    i16 66, label %sw.bb2
    i16 23, label %sw.bb19
  ], !dbg !5086

sw.bb:                                            ; preds = %entry
  call void @llvm.dbg.value(metadata i8 1, metadata !5079, metadata !DIExpression()), !dbg !5080
  br label %sw.bb2, !dbg !5087

sw.bb2:                                           ; preds = %entry, %entry, %sw.bb
  %negate.0 = phi i8 [ 0, %entry ], [ 0, %entry ], [ 1, %sw.bb ], !dbg !5080
  call void @llvm.dbg.value(metadata i8 %negate.0, metadata !5079, metadata !DIExpression()), !dbg !5080
  call void @llvm.dbg.value(metadata %union.tree_node* undef, metadata !5076, metadata !DIExpression()), !dbg !5080
  %operands4 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5089
  %arrayidx5 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands4, i64 1, !dbg !5089
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !5089
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !5077, metadata !DIExpression()), !dbg !5080
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5090
  %bf.load7 = load i64, i64* %5, align 8, !dbg !5090
  %bf.cast91 = and i64 %bf.load7, 65535, !dbg !5092
  %cmp = icmp eq i64 %bf.cast91, 23, !dbg !5092
  br i1 %cmp, label %if.end, label %sw.epilog, !dbg !5093

if.end:                                           ; preds = %sw.bb2
  %6 = bitcast %union.tree_node** %operands4 to i64*, !dbg !5094
  %7 = load i64, i64* %6, align 8, !dbg !5094
  %8 = bitcast %union.tree_node** %var to i64*, !dbg !5095
  store i64 %7, i64* %8, align 8, !dbg !5095
  %9 = bitcast %struct.double_int* %tmp to i8*, !dbg !5096
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #8, !dbg !5096
  %call = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %4) #6, !dbg !5096
  %10 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 0, !dbg !5096
  %11 = extractvalue { i64, i64 } %call, 0, !dbg !5096
  store i64 %11, i64* %10, align 8, !dbg !5096
  %12 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 1, !dbg !5096
  %13 = extractvalue { i64, i64 } %call, 1, !dbg !5096
  store i64 %13, i64* %12, align 8, !dbg !5096
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %9, i64 16, i1 false), !dbg !5096
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #8, !dbg !5096
  %tobool = icmp eq i8 %negate.0, 0, !dbg !5097
  br i1 %tobool, label %if.end13, label %if.then10, !dbg !5099

if.then10:                                        ; preds = %if.end
  %14 = bitcast %struct.double_int* %tmp11 to i8*, !dbg !5100
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #8, !dbg !5100
  %15 = getelementptr inbounds %struct.double_int, %struct.double_int* %off, i64 0, i32 0, !dbg !5100
  %16 = load i64, i64* %15, align 8, !dbg !5100
  %17 = getelementptr inbounds %struct.double_int, %struct.double_int* %off, i64 0, i32 1, !dbg !5100
  %18 = load i64, i64* %17, align 8, !dbg !5100
  %call12 = tail call { i64, i64 } @double_int_neg(i64 %16, i64 %18) #6, !dbg !5100
  %19 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp11, i64 0, i32 0, !dbg !5100
  %20 = extractvalue { i64, i64 } %call12, 0, !dbg !5100
  store i64 %20, i64* %19, align 8, !dbg !5100
  %21 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp11, i64 0, i32 1, !dbg !5100
  %22 = extractvalue { i64, i64 } %call12, 1, !dbg !5100
  store i64 %22, i64* %21, align 8, !dbg !5100
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %14, i64 16, i1 false), !dbg !5100
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #8, !dbg !5100
  br label %if.end13, !dbg !5101

if.end13:                                         ; preds = %if.end, %if.then10
  %23 = bitcast %struct.double_int* %tmp14 to i8*, !dbg !5102
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #8, !dbg !5102
  %type15 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !5103
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type15, i64 0, i32 6, !dbg !5103
  %bf.load16 = load i32, i32* %precision, align 4, !dbg !5103
  %bf.clear17 = and i32 %bf.load16, 1023, !dbg !5103
  %24 = getelementptr inbounds %struct.double_int, %struct.double_int* %off, i64 0, i32 0, !dbg !5102
  %25 = load i64, i64* %24, align 8, !dbg !5102
  %26 = getelementptr inbounds %struct.double_int, %struct.double_int* %off, i64 0, i32 1, !dbg !5102
  %27 = load i64, i64* %26, align 8, !dbg !5102
  %call18 = tail call { i64, i64 } @double_int_sext(i64 %25, i64 %27, i32 %bf.clear17) #6, !dbg !5102
  %28 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp14, i64 0, i32 0, !dbg !5102
  %29 = extractvalue { i64, i64 } %call18, 0, !dbg !5102
  store i64 %29, i64* %28, align 8, !dbg !5102
  %30 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp14, i64 0, i32 1, !dbg !5102
  %31 = extractvalue { i64, i64 } %call18, 1, !dbg !5102
  store i64 %31, i64* %30, align 8, !dbg !5102
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %23, i64 16, i1 false), !dbg !5102
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #8, !dbg !5102
  %32 = load i64, i64* %24, align 8, !dbg !5104
  %33 = load i64, i64* %26, align 8, !dbg !5104
  tail call void @mpz_set_double_int(%struct.__mpz_struct* %offset, i64 %32, i64 %33, i8 zeroext 0) #6, !dbg !5104
  br label %sw.epilog, !dbg !5105

sw.bb19:                                          ; preds = %entry
  %call20 = tail call %union.tree_node* @build_int_cst_type(%union.tree_node* %0, i64 0) #6, !dbg !5106
  store %union.tree_node* %call20, %union.tree_node** %var, align 8, !dbg !5107
  %34 = bitcast %struct.double_int* %tmp21 to i8*, !dbg !5108
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %34) #8, !dbg !5108
  %call22 = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %expr) #6, !dbg !5108
  %35 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp21, i64 0, i32 0, !dbg !5108
  %36 = extractvalue { i64, i64 } %call22, 0, !dbg !5108
  store i64 %36, i64* %35, align 8, !dbg !5108
  %37 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp21, i64 0, i32 1, !dbg !5108
  %38 = extractvalue { i64, i64 } %call22, 1, !dbg !5108
  store i64 %38, i64* %37, align 8, !dbg !5108
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %34, i64 16, i1 false), !dbg !5108
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %34) #8, !dbg !5108
  %39 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5109
  %bf.load24 = load i64, i64* %39, align 8, !dbg !5109
  %bf.lshr = lshr i64 %bf.load24, 21, !dbg !5109
  %40 = trunc i64 %bf.lshr to i8, !dbg !5109
  %bf.cast26 = and i8 %40, 1, !dbg !5109
  %41 = getelementptr inbounds %struct.double_int, %struct.double_int* %off, i64 0, i32 0, !dbg !5110
  %42 = load i64, i64* %41, align 8, !dbg !5110
  %43 = getelementptr inbounds %struct.double_int, %struct.double_int* %off, i64 0, i32 1, !dbg !5110
  %44 = load i64, i64* %43, align 8, !dbg !5110
  tail call void @mpz_set_double_int(%struct.__mpz_struct* %offset, i64 %42, i64 %44, i8 zeroext %bf.cast26) #6, !dbg !5110
  br label %sw.epilog, !dbg !5111

sw.epilog:                                        ; preds = %sw.bb2, %entry, %sw.bb19, %if.end13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !5112
  ret void, !dbg !5112
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @bound_difference_of_offsetted_base(%union.tree_node* %type, %struct.__mpz_struct* %x, %struct.__mpz_struct* %y, %struct.bounds* %bnds) unnamed_addr #5 !dbg !5113 {
entry:
  %m = alloca [1 x %struct.__mpz_struct], align 16
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5117, metadata !DIExpression()), !dbg !5124
  call void @llvm.dbg.value(metadata %struct.__mpz_struct* %x, metadata !5118, metadata !DIExpression()), !dbg !5124
  call void @llvm.dbg.value(metadata %struct.__mpz_struct* %y, metadata !5119, metadata !DIExpression()), !dbg !5124
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !5120, metadata !DIExpression()), !dbg !5124
  %call = tail call i32 @mpz_cmp(%struct.__mpz_struct* %x, %struct.__mpz_struct* %y) #6, !dbg !5125
  call void @llvm.dbg.value(metadata i32 %call, metadata !5121, metadata !DIExpression()), !dbg !5124
  %call1 = tail call zeroext i8 @nowrap_type_p(%union.tree_node* %type) #7, !dbg !5126
  call void @llvm.dbg.value(metadata i8 undef, metadata !5122, metadata !DIExpression()), !dbg !5124
  %0 = bitcast [1 x %struct.__mpz_struct]* %m to i8*, !dbg !5127
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !5127
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %m, metadata !5123, metadata !DIExpression()), !dbg !5128
  %cmp = icmp eq i32 %call, 0, !dbg !5129
  br i1 %cmp, label %if.then, label %if.end, !dbg !5131

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !5132
  tail call void @mpz_set_ui(%struct.__mpz_struct* %arraydecay, i64 0) #6, !dbg !5134
  %arraydecay3 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !5135
  tail call void @mpz_set_ui(%struct.__mpz_struct* nonnull %arraydecay3, i64 0) #6, !dbg !5136
  br label %cleanup, !dbg !5137

if.end:                                           ; preds = %entry
  %tobool = icmp eq i8 %call1, 0, !dbg !5138
  call void @llvm.dbg.value(metadata i1 %tobool, metadata !5122, metadata !DIExpression()), !dbg !5124
  %arraydecay4 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %m, i64 0, i64 0, !dbg !5139
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay4) #6, !dbg !5140
  %type6 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !5141
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i64 0, i32 6, !dbg !5141
  %bf.load = load i32, i32* %precision, align 4, !dbg !5141
  %bf.clear = and i32 %bf.load, 1023, !dbg !5141
  %call7 = call { i64, i64 } @double_int_mask(i32 %bf.clear) #6, !dbg !5142
  %1 = extractvalue { i64, i64 } %call7, 0, !dbg !5142
  %2 = extractvalue { i64, i64 } %call7, 1, !dbg !5142
  call void @mpz_set_double_int(%struct.__mpz_struct* nonnull %arraydecay4, i64 %1, i64 %2, i8 zeroext 1) #6, !dbg !5143
  call void @mpz_add_ui(%struct.__mpz_struct* nonnull %arraydecay4, %struct.__mpz_struct* nonnull %arraydecay4, i64 1) #6, !dbg !5144
  %arraydecay11 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !5145
  call void @mpz_sub(%struct.__mpz_struct* nonnull %arraydecay11, %struct.__mpz_struct* %x, %struct.__mpz_struct* %y) #6, !dbg !5146
  %arraydecay13 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !5147
  call void @mpz_set(%struct.__mpz_struct* %arraydecay13, %struct.__mpz_struct* nonnull %arraydecay11) #6, !dbg !5148
  br i1 %tobool, label %if.then17, label %if.end32, !dbg !5149

if.then17:                                        ; preds = %if.end
  %cmp18 = icmp sgt i32 %call, 0, !dbg !5150
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !5154

if.then20:                                        ; preds = %if.then17
  call void @mpz_sub(%struct.__mpz_struct* %arraydecay13, %struct.__mpz_struct* %arraydecay13, %struct.__mpz_struct* nonnull %arraydecay4) #6, !dbg !5155
  br label %if.end32, !dbg !5155

if.else:                                          ; preds = %if.then17
  call void @mpz_add(%struct.__mpz_struct* nonnull %arraydecay11, %struct.__mpz_struct* nonnull %arraydecay11, %struct.__mpz_struct* nonnull %arraydecay4) #6, !dbg !5156
  br label %if.end32

if.end32:                                         ; preds = %if.then20, %if.else, %if.end
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay4) #6, !dbg !5157
  br label %cleanup, !dbg !5158

cleanup:                                          ; preds = %if.end32, %if.then
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !5158
  ret void, !dbg !5158
}

; Function Attrs: nounwind uwtable
define internal fastcc void @determine_value_range(%union.tree_node* %type, %union.tree_node* %var, %struct.__mpz_struct* %off, %struct.__mpz_struct* %min, %struct.__mpz_struct* %max) unnamed_addr #5 !dbg !5159 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5163, metadata !DIExpression()), !dbg !5168
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !5164, metadata !DIExpression()), !dbg !5168
  call void @llvm.dbg.value(metadata %struct.__mpz_struct* %off, metadata !5165, metadata !DIExpression()), !dbg !5168
  call void @llvm.dbg.value(metadata %struct.__mpz_struct* %min, metadata !5166, metadata !DIExpression()), !dbg !5168
  call void @llvm.dbg.value(metadata %struct.__mpz_struct* %max, metadata !5167, metadata !DIExpression()), !dbg !5168
  %call = tail call i32 @integer_zerop(%union.tree_node* %var) #6, !dbg !5169
  %tobool = icmp eq i32 %call, 0, !dbg !5169
  br i1 %tobool, label %if.end, label %if.then, !dbg !5171

if.then:                                          ; preds = %entry
  tail call void @mpz_set(%struct.__mpz_struct* %min, %struct.__mpz_struct* %off) #6, !dbg !5172
  tail call void @mpz_set(%struct.__mpz_struct* %max, %struct.__mpz_struct* %off) #6, !dbg !5174
  br label %if.end7, !dbg !5175

if.end:                                           ; preds = %entry
  tail call void @get_type_static_bounds(%union.tree_node* %type, %struct.__mpz_struct* %min, %struct.__mpz_struct* %max) #6, !dbg !5176
  %call1 = tail call zeroext i8 @nowrap_type_p(%union.tree_node* %type) #7, !dbg !5177
  %tobool2 = icmp eq i8 %call1, 0, !dbg !5177
  br i1 %tobool2, label %if.end7, label %if.end4, !dbg !5179

if.end4:                                          ; preds = %if.end
  %call5 = tail call i32 @mpz_sgn(%struct.__mpz_struct* %off) #6, !dbg !5180
  %cmp = icmp slt i32 %call5, 0, !dbg !5182
  br i1 %cmp, label %if.then6, label %if.else, !dbg !5183

if.then6:                                         ; preds = %if.end4
  tail call void @mpz_add(%struct.__mpz_struct* %max, %struct.__mpz_struct* %max, %struct.__mpz_struct* %off) #6, !dbg !5184
  br label %if.end7, !dbg !5184

if.else:                                          ; preds = %if.end4
  tail call void @mpz_add(%struct.__mpz_struct* %min, %struct.__mpz_struct* %min, %struct.__mpz_struct* %off) #6, !dbg !5185
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then, %if.else, %if.then6
  ret void, !dbg !5186
}

declare dso_local void @mpz_sub(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @refine_bounds_using_guard(%union.tree_node* %type, %union.tree_node* %varx, %struct.__mpz_struct* %offx, %union.tree_node* %vary, %struct.__mpz_struct* %offy, %union.tree_node* %c0, i32 %cmp, %union.tree_node* %c1, %struct.bounds* %bnds) unnamed_addr #5 !dbg !5187 {
entry:
  %varc0 = alloca %union.tree_node*, align 8
  %varc1 = alloca %union.tree_node*, align 8
  %offc0 = alloca [1 x %struct.__mpz_struct], align 16
  %offc1 = alloca [1 x %struct.__mpz_struct], align 16
  %loffx = alloca [1 x %struct.__mpz_struct], align 16
  %loffy = alloca [1 x %struct.__mpz_struct], align 16
  %bnd = alloca [1 x %struct.__mpz_struct], align 16
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5191, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %union.tree_node* %varx, metadata !5192, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %struct.__mpz_struct* %offx, metadata !5193, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %union.tree_node* %vary, metadata !5194, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %struct.__mpz_struct* %offy, metadata !5195, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %union.tree_node* %c0, metadata !5196, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata i32 %cmp, metadata !5197, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %union.tree_node* %c1, metadata !5198, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !5199, metadata !DIExpression()), !dbg !5214
  %0 = bitcast %union.tree_node** %varc0 to i8*, !dbg !5215
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #8, !dbg !5215
  %1 = bitcast %union.tree_node** %varc1 to i8*, !dbg !5215
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !5215
  %2 = bitcast [1 x %struct.__mpz_struct]* %offc0 to i8*, !dbg !5216
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !5216
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %offc0, metadata !5204, metadata !DIExpression()), !dbg !5217
  %3 = bitcast [1 x %struct.__mpz_struct]* %offc1 to i8*, !dbg !5216
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #8, !dbg !5216
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %offc1, metadata !5205, metadata !DIExpression()), !dbg !5218
  %4 = bitcast [1 x %struct.__mpz_struct]* %loffx to i8*, !dbg !5216
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %4) #8, !dbg !5216
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %loffx, metadata !5206, metadata !DIExpression()), !dbg !5219
  %5 = bitcast [1 x %struct.__mpz_struct]* %loffy to i8*, !dbg !5216
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8, !dbg !5216
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %loffy, metadata !5207, metadata !DIExpression()), !dbg !5220
  %6 = bitcast [1 x %struct.__mpz_struct]* %bnd to i8*, !dbg !5216
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #8, !dbg !5216
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %bnd, metadata !5208, metadata !DIExpression()), !dbg !5221
  call void @llvm.dbg.value(metadata i8 0, metadata !5209, metadata !DIExpression()), !dbg !5214
  %call = tail call zeroext i8 @nowrap_type_p(%union.tree_node* %type) #7, !dbg !5222
  call void @llvm.dbg.value(metadata i8 %call, metadata !5210, metadata !DIExpression()), !dbg !5214
  switch i32 %cmp, label %cleanup [
    i32 97, label %sw.bb
    i32 98, label %sw.bb
    i32 99, label %sw.bb
    i32 100, label %sw.bb
    i32 102, label %sw.bb6
  ], !dbg !5223

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry
  %call1 = tail call %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node* %c0) #6, !dbg !5224
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !5196, metadata !DIExpression()), !dbg !5214
  %call2 = tail call %union.tree_node* @tree_strip_sign_nop_conversions(%union.tree_node* %c1) #6, !dbg !5226
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !5198, metadata !DIExpression()), !dbg !5214
  %type3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5227
  %7 = load %union.tree_node*, %union.tree_node** %type3, align 8, !dbg !5227
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !5203, metadata !DIExpression()), !dbg !5214
  %call4 = tail call zeroext i8 @useless_type_conversion_p(%union.tree_node* %7, %union.tree_node* %type) #6, !dbg !5228
  %tobool = icmp eq i8 %call4, 0, !dbg !5228
  br i1 %tobool, label %cleanup, label %sw.epilog, !dbg !5230

sw.bb6:                                           ; preds = %entry
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %c1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5231
  %bf.load = load i64, i64* %8, align 8, !dbg !5231
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5233
  %cmp7 = icmp eq i64 %bf.cast1, 23, !dbg !5233
  br i1 %cmp7, label %lor.lhs.false, label %cleanup, !dbg !5234

lor.lhs.false:                                    ; preds = %sw.bb6
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5235
  %bf.load9 = load i64, i64* %9, align 8, !dbg !5235
  %bf.cast112 = and i64 %bf.load9, 65535, !dbg !5235
  %cmp12 = icmp eq i64 %bf.cast112, 6, !dbg !5235
  br i1 %cmp12, label %if.end26, label %lor.lhs.false13, !dbg !5235

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %cmp18 = icmp eq i64 %bf.cast112, 7, !dbg !5235
  br i1 %cmp18, label %if.end26, label %lor.lhs.false19, !dbg !5235

lor.lhs.false19:                                  ; preds = %lor.lhs.false13
  %cmp24 = icmp eq i64 %bf.cast112, 8, !dbg !5235
  br i1 %cmp24, label %if.end26, label %cleanup, !dbg !5236

if.end26:                                         ; preds = %lor.lhs.false19, %lor.lhs.false13, %lor.lhs.false
  %type28 = getelementptr inbounds %union.tree_node, %union.tree_node* %c0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5237
  %10 = bitcast %union.tree_node** %type28 to %struct.tree_type**, !dbg !5237
  %11 = load %struct.tree_type*, %struct.tree_type** %10, align 8, !dbg !5237
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %11, i64 0, i32 6, !dbg !5238
  %bf.load30 = load i32, i32* %precision, align 4, !dbg !5238
  %type32 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !5240
  %precision33 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type32, i64 0, i32 6, !dbg !5240
  %bf.load34 = load i32, i32* %precision33, align 4, !dbg !5240
  %12 = xor i32 %bf.load30, %bf.load34, !dbg !5241
  %13 = and i32 %12, 1023, !dbg !5241
  %cmp36 = icmp eq i32 %13, 0, !dbg !5241
  br i1 %cmp36, label %if.end38, label %cleanup, !dbg !5242

if.end38:                                         ; preds = %if.end26
  %call39 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type, %union.tree_node* %c0) #6, !dbg !5243
  call void @llvm.dbg.value(metadata %union.tree_node* %call39, metadata !5196, metadata !DIExpression()), !dbg !5214
  %call40 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type, %union.tree_node* %c1) #6, !dbg !5244
  call void @llvm.dbg.value(metadata %union.tree_node* %call40, metadata !5198, metadata !DIExpression()), !dbg !5214
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !5245
  %14 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !5245
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !5245
  %tobool42 = icmp eq %union.tree_node* %15, null, !dbg !5245
  br i1 %tobool42, label %if.end48, label %land.lhs.true, !dbg !5247

land.lhs.true:                                    ; preds = %if.end38
  %call45 = tail call i32 @operand_equal_p(%union.tree_node* %call40, %union.tree_node* nonnull %15, i32 0) #6, !dbg !5248
  %tobool46 = icmp eq i32 %call45, 0, !dbg !5248
  br i1 %tobool46, label %if.end48, label %sw.epilog, !dbg !5249

if.end48:                                         ; preds = %land.lhs.true, %if.end38
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !5250
  %16 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !5250
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !5250
  %tobool50 = icmp eq %union.tree_node* %17, null, !dbg !5250
  br i1 %tobool50, label %cleanup, label %land.lhs.true51, !dbg !5252

land.lhs.true51:                                  ; preds = %if.end48
  %call54 = tail call i32 @operand_equal_p(%union.tree_node* %call40, %union.tree_node* nonnull %17, i32 0) #6, !dbg !5253
  %tobool55 = icmp eq i32 %call54, 0, !dbg !5253
  br i1 %tobool55, label %cleanup, label %sw.epilog, !dbg !5254

sw.epilog:                                        ; preds = %sw.bb, %land.lhs.true, %land.lhs.true51
  %c1.addr.0 = phi %union.tree_node* [ %call2, %sw.bb ], [ %call40, %land.lhs.true ], [ %call40, %land.lhs.true51 ], !dbg !5255
  %cmp.addr.0 = phi i32 [ %cmp, %sw.bb ], [ 99, %land.lhs.true ], [ 97, %land.lhs.true51 ]
  %c0.addr.0 = phi %union.tree_node* [ %call1, %sw.bb ], [ %call39, %land.lhs.true ], [ %call39, %land.lhs.true51 ], !dbg !5255
  call void @llvm.dbg.value(metadata %union.tree_node* %c0.addr.0, metadata !5196, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata i32 %cmp.addr.0, metadata !5197, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %union.tree_node* %c1.addr.0, metadata !5198, metadata !DIExpression()), !dbg !5214
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc0, i64 0, i64 0, !dbg !5256
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5257
  %arraydecay58 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %offc1, i64 0, i64 0, !dbg !5258
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay58) #6, !dbg !5259
  %call59 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %c0.addr.0) #7, !dbg !5260
  call void @llvm.dbg.value(metadata %union.tree_node** %varc0, metadata !5200, metadata !DIExpression(DW_OP_deref)), !dbg !5214
  call fastcc void @split_to_var_and_offset(%union.tree_node* %call59, %union.tree_node** nonnull %varc0, %struct.__mpz_struct* nonnull %arraydecay) #7, !dbg !5261
  %call61 = call %union.tree_node* @expand_simple_operations(%union.tree_node* %c1.addr.0) #7, !dbg !5262
  call void @llvm.dbg.value(metadata %union.tree_node** %varc1, metadata !5201, metadata !DIExpression(DW_OP_deref)), !dbg !5214
  call fastcc void @split_to_var_and_offset(%union.tree_node* %call61, %union.tree_node** nonnull %varc1, %struct.__mpz_struct* nonnull %arraydecay58) #7, !dbg !5263
  %18 = load %union.tree_node*, %union.tree_node** %varc1, align 8, !dbg !5264
  call void @llvm.dbg.value(metadata %union.tree_node* %18, metadata !5201, metadata !DIExpression()), !dbg !5214
  %call63 = call i32 @operand_equal_p(%union.tree_node* %varx, %union.tree_node* %18, i32 0) #6, !dbg !5266
  %tobool64 = icmp eq i32 %call63, 0, !dbg !5266
  br i1 %tobool64, label %if.end69, label %if.then65, !dbg !5267

if.then65:                                        ; preds = %sw.epilog
  %19 = bitcast %union.tree_node** %varc0 to i64*, !dbg !5268
  %20 = load i64, i64* %19, align 8, !dbg !5268
  %21 = bitcast %union.tree_node** %varc1 to i64*, !dbg !5270
  %22 = load i64, i64* %21, align 8, !dbg !5270
  store i64 %22, i64* %19, align 8, !dbg !5271
  store i64 %20, i64* %21, align 8, !dbg !5272
  call void @mpz_swap(%struct.__mpz_struct* nonnull %arraydecay, %struct.__mpz_struct* nonnull %arraydecay58) #6, !dbg !5273
  %call68 = call i32 @swap_tree_comparison(i32 %cmp.addr.0) #6, !dbg !5274
  call void @llvm.dbg.value(metadata i32 %call68, metadata !5197, metadata !DIExpression()), !dbg !5214
  br label %if.end69, !dbg !5275

if.end69:                                         ; preds = %sw.epilog, %if.then65
  %cmp.addr.1 = phi i32 [ %call68, %if.then65 ], [ %cmp.addr.0, %sw.epilog ], !dbg !5214
  call void @llvm.dbg.value(metadata i32 %cmp.addr.1, metadata !5197, metadata !DIExpression()), !dbg !5214
  %23 = load %union.tree_node*, %union.tree_node** %varc0, align 8, !dbg !5276
  call void @llvm.dbg.value(metadata %union.tree_node* %23, metadata !5200, metadata !DIExpression()), !dbg !5214
  %call70 = call i32 @operand_equal_p(%union.tree_node* %varx, %union.tree_node* %23, i32 0) #6, !dbg !5278
  %tobool71 = icmp eq i32 %call70, 0, !dbg !5278
  br i1 %tobool71, label %end, label %lor.lhs.false72, !dbg !5279

lor.lhs.false72:                                  ; preds = %if.end69
  %24 = load %union.tree_node*, %union.tree_node** %varc1, align 8, !dbg !5280
  call void @llvm.dbg.value(metadata %union.tree_node* %24, metadata !5201, metadata !DIExpression()), !dbg !5214
  %call73 = call i32 @operand_equal_p(%union.tree_node* %vary, %union.tree_node* %24, i32 0) #6, !dbg !5281
  %tobool74 = icmp eq i32 %call73, 0, !dbg !5281
  br i1 %tobool74, label %end, label %if.end76, !dbg !5282

if.end76:                                         ; preds = %lor.lhs.false72
  %arraydecay77 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffx, i64 0, i64 0, !dbg !5283
  call void @mpz_init_set(%struct.__mpz_struct* nonnull %arraydecay77, %struct.__mpz_struct* %offx) #6, !dbg !5284
  %arraydecay78 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %loffy, i64 0, i64 0, !dbg !5285
  call void @mpz_init_set(%struct.__mpz_struct* nonnull %arraydecay78, %struct.__mpz_struct* %offy) #6, !dbg !5286
  %cmp.addr.1.off = add i32 %cmp.addr.1, -99, !dbg !5287
  %switch = icmp ult i32 %cmp.addr.1.off, 2, !dbg !5287
  br i1 %switch, label %if.then82, label %if.end88, !dbg !5287

if.then82:                                        ; preds = %if.end76
  call void @llvm.dbg.value(metadata %union.tree_node* %varx, metadata !5202, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %union.tree_node* %vary, metadata !5192, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %union.tree_node* %varx, metadata !5194, metadata !DIExpression()), !dbg !5214
  call void @mpz_swap(%struct.__mpz_struct* nonnull %arraydecay, %struct.__mpz_struct* nonnull %arraydecay58) #6, !dbg !5289
  call void @mpz_swap(%struct.__mpz_struct* nonnull %arraydecay77, %struct.__mpz_struct* nonnull %arraydecay78) #6, !dbg !5291
  %call87 = call i32 @swap_tree_comparison(i32 %cmp.addr.1) #6, !dbg !5292
  call void @llvm.dbg.value(metadata i32 %call87, metadata !5197, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata i8 1, metadata !5209, metadata !DIExpression()), !dbg !5214
  br label %if.end88, !dbg !5293

if.end88:                                         ; preds = %if.end76, %if.then82
  %lbound.0 = phi i8 [ 1, %if.then82 ], [ 0, %if.end76 ], !dbg !5214
  %cmp.addr.2 = phi i32 [ %call87, %if.then82 ], [ %cmp.addr.1, %if.end76 ], !dbg !5214
  %vary.addr.0 = phi %union.tree_node* [ %varx, %if.then82 ], [ %vary, %if.end76 ]
  %varx.addr.0 = phi %union.tree_node* [ %vary, %if.then82 ], [ %varx, %if.end76 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %varx.addr.0, metadata !5192, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata %union.tree_node* %vary.addr.0, metadata !5194, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata i32 %cmp.addr.2, metadata !5197, metadata !DIExpression()), !dbg !5214
  call void @llvm.dbg.value(metadata i8 %lbound.0, metadata !5209, metadata !DIExpression()), !dbg !5214
  %tobool89 = icmp eq i8 %call, 0, !dbg !5294
  br i1 %tobool89, label %if.else, label %if.end108, !dbg !5296

if.else:                                          ; preds = %if.end88
  %call91 = call i32 @integer_zerop(%union.tree_node* %varx.addr.0) #6, !dbg !5297
  %tobool92 = icmp eq i32 %call91, 0, !dbg !5297
  br i1 %tobool92, label %lor.rhs, label %lor.end, !dbg !5299

lor.rhs:                                          ; preds = %if.else
  %call95 = call i32 @mpz_cmp(%struct.__mpz_struct* nonnull %arraydecay77, %struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5300
  %call95.lobit = lshr i32 %call95, 31, !dbg !5299
  %.not = xor i32 %call95.lobit, 1, !dbg !5299
  br label %lor.end, !dbg !5299

lor.end:                                          ; preds = %if.else, %lor.rhs
  %25 = phi i32 [ 1, %if.else ], [ %.not, %lor.rhs ]
  %call97 = call i32 @integer_zerop(%union.tree_node* %vary.addr.0) #6, !dbg !5301
  %tobool98 = icmp eq i32 %call97, 0, !dbg !5301
  br i1 %tobool98, label %lor.rhs99, label %lor.end105, !dbg !5302

lor.rhs99:                                        ; preds = %lor.end
  %call102 = call i32 @mpz_cmp(%struct.__mpz_struct* nonnull %arraydecay78, %struct.__mpz_struct* nonnull %arraydecay58) #6, !dbg !5303
  %cmp103 = icmp slt i32 %call102, 1, !dbg !5304
  %phitmp = zext i1 %cmp103 to i32, !dbg !5302
  br label %lor.end105, !dbg !5302

lor.end105:                                       ; preds = %lor.end, %lor.rhs99
  %26 = phi i32 [ 1, %lor.end ], [ %phitmp, %lor.rhs99 ]
  br label %if.end108

if.end108:                                        ; preds = %if.end88, %lor.end105
  %x_ok.0 = phi i32 [ %25, %lor.end105 ], [ 1, %if.end88 ], !dbg !5305
  %y_ok.0 = phi i32 [ %26, %lor.end105 ], [ 1, %if.end88 ], !dbg !5305
  %conv109 = and i32 %x_ok.0, 255, !dbg !5306
  %tobool110 = icmp ne i32 %conv109, 0, !dbg !5306
  %conv112 = and i32 %y_ok.0, 255, !dbg !5308
  %tobool113 = icmp ne i32 %conv112, 0, !dbg !5308
  %or.cond = and i1 %tobool110, %tobool113, !dbg !5309
  br i1 %or.cond, label %if.then114, label %if.end158, !dbg !5309

if.then114:                                       ; preds = %if.end108
  %arraydecay115 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %bnd, i64 0, i64 0, !dbg !5310
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay115) #6, !dbg !5312
  call void @mpz_sub(%struct.__mpz_struct* nonnull %arraydecay115, %struct.__mpz_struct* nonnull %arraydecay77, %struct.__mpz_struct* nonnull %arraydecay78) #6, !dbg !5313
  call void @mpz_add(%struct.__mpz_struct* nonnull %arraydecay115, %struct.__mpz_struct* nonnull %arraydecay115, %struct.__mpz_struct* nonnull %arraydecay58) #6, !dbg !5314
  call void @mpz_sub(%struct.__mpz_struct* nonnull %arraydecay115, %struct.__mpz_struct* nonnull %arraydecay115, %struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5315
  %cmp125 = icmp eq i32 %cmp.addr.2, 97, !dbg !5316
  br i1 %cmp125, label %if.then127, label %if.end130, !dbg !5318

if.then127:                                       ; preds = %if.then114
  call void @mpz_sub_ui(%struct.__mpz_struct* nonnull %arraydecay115, %struct.__mpz_struct* nonnull %arraydecay115, i64 1) #6, !dbg !5319
  br label %if.end130, !dbg !5319

if.end130:                                        ; preds = %if.then127, %if.then114
  %tobool131 = icmp eq i8 %lbound.0, 0, !dbg !5320
  br i1 %tobool131, label %if.else145, label %if.then132, !dbg !5322

if.then132:                                       ; preds = %if.end130
  call void @mpz_neg(%struct.__mpz_struct* nonnull %arraydecay115, %struct.__mpz_struct* nonnull %arraydecay115) #6, !dbg !5323
  %arraydecay135 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !5325
  %call137 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay135, %struct.__mpz_struct* nonnull %arraydecay115) #6, !dbg !5327
  %cmp138 = icmp slt i32 %call137, 0, !dbg !5328
  br i1 %cmp138, label %if.then140, label %if.end156, !dbg !5329

if.then140:                                       ; preds = %if.then132
  call void @mpz_set(%struct.__mpz_struct* %arraydecay135, %struct.__mpz_struct* nonnull %arraydecay115) #6, !dbg !5330
  br label %if.end156, !dbg !5330

if.else145:                                       ; preds = %if.end130
  %arraydecay147 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !5331
  %call148 = call i32 @mpz_cmp(%struct.__mpz_struct* nonnull %arraydecay115, %struct.__mpz_struct* nonnull %arraydecay147) #6, !dbg !5334
  %cmp149 = icmp slt i32 %call148, 0, !dbg !5335
  br i1 %cmp149, label %if.then151, label %if.end156, !dbg !5336

if.then151:                                       ; preds = %if.else145
  call void @mpz_set(%struct.__mpz_struct* nonnull %arraydecay147, %struct.__mpz_struct* nonnull %arraydecay115) #6, !dbg !5337
  br label %if.end156, !dbg !5337

if.end156:                                        ; preds = %if.else145, %if.then151, %if.then132, %if.then140
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay115) #6, !dbg !5338
  br label %if.end158, !dbg !5339

if.end158:                                        ; preds = %if.end156, %if.end108
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay77) #6, !dbg !5340
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay78) #6, !dbg !5341
  br label %end, !dbg !5341

end:                                              ; preds = %lor.lhs.false72, %if.end69, %if.end158
  call void @llvm.dbg.label(metadata !5213), !dbg !5342
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5343
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay58) #6, !dbg !5344
  br label %cleanup, !dbg !5345

cleanup:                                          ; preds = %sw.bb, %land.lhs.true51, %if.end48, %if.end26, %sw.bb6, %entry, %lor.lhs.false19, %end
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #8, !dbg !5345
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8, !dbg !5345
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %4) #8, !dbg !5345
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #8, !dbg !5345
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !5345
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !5345
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #8, !dbg !5345
  ret void, !dbg !5345
}

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @mpz_set_ui(%struct.__mpz_struct*, i64) local_unnamed_addr #2

declare dso_local { i64, i64 } @tree_to_double_int(%union.tree_node*) local_unnamed_addr #2

declare dso_local { i64, i64 } @double_int_neg(i64, i64) local_unnamed_addr #2

declare dso_local { i64, i64 } @double_int_sext(i64, i64, i32) local_unnamed_addr #2

declare dso_local void @mpz_set_double_int(%struct.__mpz_struct*, i64, i64, i8 zeroext) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_int_cst_type(%union.tree_node*, i64) local_unnamed_addr #2

declare dso_local i32 @mpz_cmp(%struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #2

declare dso_local { i64, i64 } @double_int_mask(i32) local_unnamed_addr #2

declare dso_local void @mpz_add_ui(%struct.__mpz_struct*, %struct.__mpz_struct*, i64) local_unnamed_addr #2

declare dso_local void @mpz_set(%struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #2

declare dso_local void @mpz_add(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #2

declare dso_local void @get_type_static_bounds(%union.tree_node*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #2

declare dso_local i32 @mpz_sgn(%struct.__mpz_struct*) local_unnamed_addr #2

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local void @mpz_swap(%struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #2

declare dso_local void @mpz_init_set(%struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #2

declare dso_local void @mpz_sub_ui(%struct.__mpz_struct*, %struct.__mpz_struct*, i64) local_unnamed_addr #2

declare dso_local void @mpz_neg(%struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @bounds_negate(%struct.bounds* %bnds) unnamed_addr #5 !dbg !5346 {
entry:
  %tmp = alloca [1 x %struct.__mpz_struct], align 16
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !5350, metadata !DIExpression()), !dbg !5352
  %0 = bitcast [1 x %struct.__mpz_struct]* %tmp to i8*, !dbg !5353
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !5353
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %tmp, metadata !5351, metadata !DIExpression()), !dbg !5354
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %tmp, i64 0, i64 0, !dbg !5355
  %arraydecay1 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !5356
  call void @mpz_init_set(%struct.__mpz_struct* nonnull %arraydecay, %struct.__mpz_struct* nonnull %arraydecay1) #6, !dbg !5357
  %arraydecay4 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !5358
  call void @mpz_neg(%struct.__mpz_struct* nonnull %arraydecay1, %struct.__mpz_struct* %arraydecay4) #6, !dbg !5359
  call void @mpz_neg(%struct.__mpz_struct* %arraydecay4, %struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5360
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5361
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !5362
  ret void, !dbg !5362
}

; Function Attrs: nounwind uwtable
define internal fastcc void @number_of_iterations_ne_max(%struct.__mpz_struct* %bnd, i8 zeroext %no_overflow, %union.tree_node* %c, %union.tree_node* %s, %struct.bounds* %bnds) unnamed_addr #5 !dbg !5363 {
entry:
  %max = alloca %struct.double_int, align 8
  %d = alloca [1 x %struct.__mpz_struct], align 16
  %tmp = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %struct.__mpz_struct* %bnd, metadata !5367, metadata !DIExpression()), !dbg !5374
  call void @llvm.dbg.value(metadata i8 %no_overflow, metadata !5368, metadata !DIExpression()), !dbg !5374
  call void @llvm.dbg.value(metadata %union.tree_node* %c, metadata !5369, metadata !DIExpression()), !dbg !5374
  call void @llvm.dbg.value(metadata %union.tree_node* %s, metadata !5370, metadata !DIExpression()), !dbg !5374
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !5371, metadata !DIExpression()), !dbg !5374
  %0 = bitcast %struct.double_int* %max to i8*, !dbg !5375
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !5375
  %1 = bitcast [1 x %struct.__mpz_struct]* %d to i8*, !dbg !5376
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !5376
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %d, metadata !5373, metadata !DIExpression()), !dbg !5377
  %tobool = icmp eq i8 %no_overflow, 0, !dbg !5378
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5380

land.lhs.true:                                    ; preds = %entry
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %c, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5381
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5381
  %call = tail call i32 @multiple_of_p(%union.tree_node* %2, %union.tree_node* %c, %union.tree_node* %s) #6, !dbg !5382
  %tobool1 = icmp eq i32 %call, 0, !dbg !5382
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5383

if.then:                                          ; preds = %land.lhs.true
  %3 = bitcast %struct.double_int* %tmp to i8*, !dbg !5384
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #8, !dbg !5384
  %4 = bitcast %union.tree_node** %type to %struct.tree_type**, !dbg !5386
  %5 = load %struct.tree_type*, %struct.tree_type** %4, align 8, !dbg !5386
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %5, i64 0, i32 6, !dbg !5386
  %bf.load = load i32, i32* %precision, align 4, !dbg !5386
  %bf.clear = and i32 %bf.load, 1023, !dbg !5386
  %call5 = tail call %union.tree_node* @num_ending_zeros(%union.tree_node* %s) #6, !dbg !5387
  %call6 = tail call i64 @tree_low_cst(%union.tree_node* %call5, i32 1) #6, !dbg !5388
  %6 = trunc i64 %call6 to i32, !dbg !5386
  %conv7 = sub i32 %bf.clear, %6, !dbg !5386
  %call8 = tail call { i64, i64 } @double_int_mask(i32 %conv7) #6, !dbg !5384
  %7 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 0, !dbg !5384
  %8 = extractvalue { i64, i64 } %call8, 0, !dbg !5384
  store i64 %8, i64* %7, align 8, !dbg !5384
  %9 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 1, !dbg !5384
  %10 = extractvalue { i64, i64 } %call8, 1, !dbg !5384
  store i64 %10, i64* %9, align 8, !dbg !5384
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %3, i64 16, i1 false), !dbg !5384
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #8, !dbg !5384
  %11 = getelementptr inbounds %struct.double_int, %struct.double_int* %max, i64 0, i32 0, !dbg !5389
  %12 = load i64, i64* %11, align 8, !dbg !5389
  %13 = getelementptr inbounds %struct.double_int, %struct.double_int* %max, i64 0, i32 1, !dbg !5389
  %14 = load i64, i64* %13, align 8, !dbg !5389
  tail call void @mpz_set_double_int(%struct.__mpz_struct* %bnd, i64 %12, i64 %14, i8 zeroext 1) #6, !dbg !5389
  br label %cleanup, !dbg !5390

if.end:                                           ; preds = %land.lhs.true, %entry
  br i1 %tobool, label %lor.lhs.false, label %if.then13, !dbg !5391

lor.lhs.false:                                    ; preds = %if.end
  %arraydecay = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !5393
  %call11 = tail call i32 @mpz_sgn(%struct.__mpz_struct* %arraydecay) #6, !dbg !5394
  %cmp = icmp sgt i32 %call11, -1, !dbg !5395
  br i1 %cmp, label %if.then13, label %if.else, !dbg !5396

if.then13:                                        ; preds = %if.end, %lor.lhs.false
  %arraydecay14 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !5397
  tail call void @mpz_set(%struct.__mpz_struct* %bnd, %struct.__mpz_struct* nonnull %arraydecay14) #6, !dbg !5398
  br label %if.end31, !dbg !5398

if.else:                                          ; preds = %lor.lhs.false
  %15 = getelementptr inbounds %union.tree_node, %union.tree_node* %c, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5399
  %bf.load15 = load i64, i64* %15, align 8, !dbg !5399
  %bf.cast1 = and i64 %bf.load15, 65535, !dbg !5401
  %cmp17 = icmp eq i64 %bf.cast1, 23, !dbg !5401
  br i1 %cmp17, label %if.then19, label %if.else21, !dbg !5402

if.then19:                                        ; preds = %if.else
  %call20 = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %c) #6, !dbg !5403
  %16 = extractvalue { i64, i64 } %call20, 0, !dbg !5403
  %17 = extractvalue { i64, i64 } %call20, 1, !dbg !5403
  tail call void @mpz_set_double_int(%struct.__mpz_struct* %bnd, i64 %16, i64 %17, i8 zeroext 1) #6, !dbg !5404
  br label %if.end31, !dbg !5404

if.else21:                                        ; preds = %if.else
  %type24 = getelementptr inbounds %union.tree_node, %union.tree_node* %c, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5405
  %18 = bitcast %union.tree_node** %type24 to %struct.tree_type**, !dbg !5405
  %19 = load %struct.tree_type*, %struct.tree_type** %18, align 8, !dbg !5405
  %precision26 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %19, i64 0, i32 6, !dbg !5405
  %bf.load27 = load i32, i32* %precision26, align 4, !dbg !5405
  %bf.clear28 = and i32 %bf.load27, 1023, !dbg !5405
  %call29 = tail call { i64, i64 } @double_int_mask(i32 %bf.clear28) #6, !dbg !5406
  %20 = extractvalue { i64, i64 } %call29, 0, !dbg !5406
  %21 = extractvalue { i64, i64 } %call29, 1, !dbg !5406
  tail call void @mpz_set_double_int(%struct.__mpz_struct* %bnd, i64 %20, i64 %21, i8 zeroext 1) #6, !dbg !5407
  br label %if.end31

if.end31:                                         ; preds = %if.then19, %if.else21, %if.then13
  %arraydecay32 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %d, i64 0, i64 0, !dbg !5408
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay32) #6, !dbg !5409
  %call35 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %s) #6, !dbg !5410
  %22 = extractvalue { i64, i64 } %call35, 0, !dbg !5410
  %23 = extractvalue { i64, i64 } %call35, 1, !dbg !5410
  call void @mpz_set_double_int(%struct.__mpz_struct* nonnull %arraydecay32, i64 %22, i64 %23, i8 zeroext 1) #6, !dbg !5411
  call void @mpz_fdiv_q(%struct.__mpz_struct* %bnd, %struct.__mpz_struct* %bnd, %struct.__mpz_struct* nonnull %arraydecay32) #6, !dbg !5412
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay32) #6, !dbg !5413
  br label %cleanup, !dbg !5414

cleanup:                                          ; preds = %if.end31, %if.then
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !5414
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !5414
  ret void, !dbg !5414
}

declare dso_local { i64, i64 } @mpz_get_double_int(%union.tree_node*, %struct.__mpz_struct*, i8 zeroext) local_unnamed_addr #2

declare dso_local %union.tree_node* @num_ending_zeros(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_low_bits_mask(%union.tree_node*, i32) local_unnamed_addr #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @inverse(%union.tree_node* %x, %union.tree_node* %mask) unnamed_addr #5 !dbg !5415 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %x, metadata !5417, metadata !DIExpression()), !dbg !5427
  call void @llvm.dbg.value(metadata %union.tree_node* %mask, metadata !5418, metadata !DIExpression()), !dbg !5427
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %x, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5428
  %0 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5428
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !5419, metadata !DIExpression()), !dbg !5427
  %call = tail call i32 @tree_floor_log2(%union.tree_node* %mask) #6, !dbg !5429
  call void @llvm.dbg.value(metadata i32 %call, metadata !5421, metadata !DIExpression()), !dbg !5427
  %type2 = bitcast %union.tree_node* %0 to %struct.tree_type*, !dbg !5430
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type2, i64 0, i32 6, !dbg !5430
  %bf.load = load i32, i32* %precision, align 4, !dbg !5430
  %bf.clear = and i32 %bf.load, 1023, !dbg !5430
  %cmp = icmp ult i32 %bf.clear, 65, !dbg !5431
  br i1 %cmp, label %if.then, label %if.else, !dbg !5432

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i64 1, metadata !5426, metadata !DIExpression()), !dbg !5433
  %call3 = tail call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %x) #6, !dbg !5434
  %tobool = icmp eq i8 %call3, 0, !dbg !5434
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !5434

cond.true:                                        ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 509, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !5434
  br label %cond.end, !dbg !5434

cond.end:                                         ; preds = %if.then, %cond.true
  %call4 = tail call zeroext i8 @cst_and_fits_in_hwi(%union.tree_node* %mask) #6, !dbg !5435
  %tobool5 = icmp eq i8 %call4, 0, !dbg !5435
  br i1 %tobool5, label %cond.true6, label %cond.end8, !dbg !5435

cond.true6:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i32 510, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !5435
  br label %cond.end8, !dbg !5435

cond.end8:                                        ; preds = %cond.end, %cond.true6
  %call10 = tail call i64 @int_cst_value(%union.tree_node* %x) #6, !dbg !5436
  call void @llvm.dbg.value(metadata i64 %call10, metadata !5422, metadata !DIExpression()), !dbg !5433
  %call11 = tail call i64 @int_cst_value(%union.tree_node* %mask) #6, !dbg !5437
  call void @llvm.dbg.value(metadata i64 %call11, metadata !5425, metadata !DIExpression()), !dbg !5433
  br label %for.cond, !dbg !5438

for.cond:                                         ; preds = %for.body, %cond.end8
  %ctr.0 = phi i32 [ %call, %cond.end8 ], [ %dec, %for.body ], !dbg !5427
  %ix.0 = phi i64 [ %call10, %cond.end8 ], [ %mul13, %for.body ], !dbg !5433
  %irslt.0 = phi i64 [ 1, %cond.end8 ], [ %mul, %for.body ], !dbg !5433
  call void @llvm.dbg.value(metadata i64 %irslt.0, metadata !5426, metadata !DIExpression()), !dbg !5433
  call void @llvm.dbg.value(metadata i64 %ix.0, metadata !5422, metadata !DIExpression()), !dbg !5433
  call void @llvm.dbg.value(metadata i32 %ctr.0, metadata !5421, metadata !DIExpression()), !dbg !5427
  %tobool12 = icmp eq i32 %ctr.0, 0, !dbg !5439
  br i1 %tobool12, label %for.end, label %for.body, !dbg !5439

for.body:                                         ; preds = %for.cond
  %mul = mul i64 %irslt.0, %ix.0, !dbg !5441
  call void @llvm.dbg.value(metadata i64 %mul, metadata !5426, metadata !DIExpression()), !dbg !5433
  %mul13 = mul i64 %ix.0, %ix.0, !dbg !5444
  call void @llvm.dbg.value(metadata i64 %mul13, metadata !5422, metadata !DIExpression()), !dbg !5433
  %dec = add i32 %ctr.0, -1, !dbg !5445
  call void @llvm.dbg.value(metadata i32 %dec, metadata !5421, metadata !DIExpression()), !dbg !5427
  br label %for.cond, !dbg !5446, !llvm.loop !5447

for.end:                                          ; preds = %for.cond
  %irslt.0.lcssa = phi i64 [ %irslt.0, %for.cond ], !dbg !5433
  call void @llvm.dbg.value(metadata i64 %irslt.0.lcssa, metadata !5426, metadata !DIExpression()), !dbg !5433
  call void @llvm.dbg.value(metadata i64 %irslt.0.lcssa, metadata !5426, metadata !DIExpression()), !dbg !5433
  call void @llvm.dbg.value(metadata i64 %irslt.0.lcssa, metadata !5426, metadata !DIExpression()), !dbg !5433
  %and = and i64 %irslt.0.lcssa, %call11, !dbg !5449
  call void @llvm.dbg.value(metadata i64 %and, metadata !5426, metadata !DIExpression()), !dbg !5433
  %call14 = tail call %union.tree_node* @build_int_cst_type(%union.tree_node* %0, i64 %and) #6, !dbg !5450
  call void @llvm.dbg.value(metadata %union.tree_node* %call14, metadata !5420, metadata !DIExpression()), !dbg !5427
  br label %if.end, !dbg !5451

if.else:                                          ; preds = %entry
  %call15 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %0, i64 1) #6, !dbg !5452
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !5420, metadata !DIExpression()), !dbg !5427
  br label %for.cond16, !dbg !5454

for.cond16:                                       ; preds = %for.body18, %if.else
  %ctr.1 = phi i32 [ %call, %if.else ], [ %dec22, %for.body18 ], !dbg !5427
  %rslt.0 = phi %union.tree_node* [ %call15, %if.else ], [ %call19, %for.body18 ], !dbg !5455
  %x.addr.0 = phi %union.tree_node* [ %x, %if.else ], [ %call20, %for.body18 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %x.addr.0, metadata !5417, metadata !DIExpression()), !dbg !5427
  call void @llvm.dbg.value(metadata %union.tree_node* %rslt.0, metadata !5420, metadata !DIExpression()), !dbg !5427
  call void @llvm.dbg.value(metadata i32 %ctr.1, metadata !5421, metadata !DIExpression()), !dbg !5427
  %tobool17 = icmp eq i32 %ctr.1, 0, !dbg !5456
  br i1 %tobool17, label %for.end23, label %for.body18, !dbg !5456

for.body18:                                       ; preds = %for.cond16
  %call19 = tail call %union.tree_node* @int_const_binop(i32 65, %union.tree_node* %rslt.0, %union.tree_node* %x.addr.0, i32 0) #6, !dbg !5458
  call void @llvm.dbg.value(metadata %union.tree_node* %call19, metadata !5420, metadata !DIExpression()), !dbg !5427
  %call20 = tail call %union.tree_node* @int_const_binop(i32 65, %union.tree_node* %x.addr.0, %union.tree_node* %x.addr.0, i32 0) #6, !dbg !5461
  call void @llvm.dbg.value(metadata %union.tree_node* %call20, metadata !5417, metadata !DIExpression()), !dbg !5427
  %dec22 = add i32 %ctr.1, -1, !dbg !5462
  call void @llvm.dbg.value(metadata i32 %dec22, metadata !5421, metadata !DIExpression()), !dbg !5427
  br label %for.cond16, !dbg !5463, !llvm.loop !5464

for.end23:                                        ; preds = %for.cond16
  %rslt.0.lcssa = phi %union.tree_node* [ %rslt.0, %for.cond16 ], !dbg !5455
  call void @llvm.dbg.value(metadata %union.tree_node* %rslt.0.lcssa, metadata !5420, metadata !DIExpression()), !dbg !5427
  call void @llvm.dbg.value(metadata %union.tree_node* %rslt.0.lcssa, metadata !5420, metadata !DIExpression()), !dbg !5427
  call void @llvm.dbg.value(metadata %union.tree_node* %rslt.0.lcssa, metadata !5420, metadata !DIExpression()), !dbg !5427
  %call24 = tail call %union.tree_node* @int_const_binop(i32 89, %union.tree_node* %rslt.0.lcssa, %union.tree_node* %mask, i32 0) #6, !dbg !5466
  call void @llvm.dbg.value(metadata %union.tree_node* %call24, metadata !5420, metadata !DIExpression()), !dbg !5427
  br label %if.end

if.end:                                           ; preds = %for.end23, %for.end
  %rslt.1 = phi %union.tree_node* [ %call14, %for.end ], [ %call24, %for.end23 ], !dbg !5467
  call void @llvm.dbg.value(metadata %union.tree_node* %rslt.1, metadata !5420, metadata !DIExpression()), !dbg !5427
  ret %union.tree_node* %rslt.1, !dbg !5468
}

declare dso_local i32 @multiple_of_p(%union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local void @mpz_fdiv_q(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*) local_unnamed_addr #2

declare dso_local i32 @tree_floor_log2(%union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @cst_and_fits_in_hwi(%union.tree_node*) local_unnamed_addr #2

declare dso_local i64 @int_cst_value(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @int_const_binop(i32, %union.tree_node*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @number_of_iterations_lt_to_ne(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, %union.tree_node** %delta, %union.tree_node* %step, i8 zeroext %exit_must_be_taken, %struct.bounds* %bnds) unnamed_addr #5 !dbg !5469 {
entry:
  %mmod = alloca [1 x %struct.__mpz_struct], align 16
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5473, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0, metadata !5474, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1, metadata !5475, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %niter, metadata !5476, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata %union.tree_node** %delta, metadata !5477, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata %union.tree_node* %step, metadata !5478, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata i8 %exit_must_be_taken, metadata !5479, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !5480, metadata !DIExpression()), !dbg !5492
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %step, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5493
  %0 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5493
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !5481, metadata !DIExpression()), !dbg !5492
  %1 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !5494
  %call = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 73, %union.tree_node* %0, %union.tree_node* %1, %union.tree_node* %step) #6, !dbg !5494
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5482, metadata !DIExpression()), !dbg !5492
  %2 = bitcast [1 x %struct.__mpz_struct]* %mmod to i8*, !dbg !5495
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !5495
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %mmod, metadata !5484, metadata !DIExpression()), !dbg !5496
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !5497
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !5485, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata i8 0, metadata !5488, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5490, metadata !DIExpression()), !dbg !5492
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5498
  %bf.load = load i64, i64* %4, align 8, !dbg !5498
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5498
  %cmp = icmp eq i64 %bf.cast1, 10, !dbg !5498
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5498

lor.lhs.false:                                    ; preds = %entry
  %cmp7 = icmp eq i64 %bf.cast1, 12, !dbg !5498
  br i1 %cmp7, label %if.then, label %if.end, !dbg !5500

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5501
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !5490, metadata !DIExpression()), !dbg !5492
  br label %if.end, !dbg !5502

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %type12.0 = phi %union.tree_node* [ %5, %if.then ], [ %type, %lor.lhs.false ], !dbg !5492
  call void @llvm.dbg.value(metadata %union.tree_node* %type12.0, metadata !5490, metadata !DIExpression()), !dbg !5492
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5503
  %bf.load9 = load i64, i64* %6, align 8, !dbg !5503
  %bf.cast113 = and i64 %bf.load9, 65535, !dbg !5505
  %cmp12 = icmp eq i64 %bf.cast113, 23, !dbg !5505
  br i1 %cmp12, label %if.end14, label %cleanup, !dbg !5506

if.end14:                                         ; preds = %if.end
  %call15 = tail call i32 @integer_nonzerop(%union.tree_node* %call) #6, !dbg !5507
  %tobool = icmp eq i32 %call15, 0, !dbg !5507
  br i1 %tobool, label %if.end18, label %if.then16, !dbg !5509

if.then16:                                        ; preds = %if.end14
  %call17 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %0, %union.tree_node* %step, %union.tree_node* %call) #6, !dbg !5510
  call void @llvm.dbg.value(metadata %union.tree_node* %call17, metadata !5482, metadata !DIExpression()), !dbg !5492
  br label %if.end18, !dbg !5511

if.end18:                                         ; preds = %if.end14, %if.then16
  %mod.0 = phi %union.tree_node* [ %call17, %if.then16 ], [ %call, %if.end14 ], !dbg !5492
  call void @llvm.dbg.value(metadata %union.tree_node* %mod.0, metadata !5482, metadata !DIExpression()), !dbg !5492
  %call19 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type12.0, %union.tree_node* %mod.0) #6, !dbg !5512
  call void @llvm.dbg.value(metadata %union.tree_node* %call19, metadata !5483, metadata !DIExpression()), !dbg !5492
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mmod, i64 0, i64 0, !dbg !5513
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5514
  %call21 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %mod.0) #6, !dbg !5515
  %7 = extractvalue { i64, i64 } %call21, 0, !dbg !5515
  %8 = extractvalue { i64, i64 } %call21, 1, !dbg !5515
  call void @mpz_set_double_int(%struct.__mpz_struct* nonnull %arraydecay, i64 %7, i64 %8, i8 zeroext 1) #6, !dbg !5516
  call void @mpz_neg(%struct.__mpz_struct* nonnull %arraydecay, %struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5517
  %call24 = call i32 @integer_zerop(%union.tree_node* %mod.0) #6, !dbg !5518
  %tobool25 = icmp eq i32 %call24, 0, !dbg !5518
  br i1 %tobool25, label %lor.lhs.false26, label %if.end54, !dbg !5520

lor.lhs.false26:                                  ; preds = %if.end18
  %bf.load28 = load i64, i64* %4, align 8, !dbg !5521
  %bf.cast304 = and i64 %bf.load28, 65535, !dbg !5521
  %cmp31 = icmp eq i64 %bf.cast304, 10, !dbg !5521
  br i1 %cmp31, label %if.end54, label %lor.lhs.false32, !dbg !5521

lor.lhs.false32:                                  ; preds = %lor.lhs.false26
  %cmp37 = icmp eq i64 %bf.cast304, 12, !dbg !5521
  br i1 %cmp37, label %if.end54, label %if.else, !dbg !5522

if.else:                                          ; preds = %lor.lhs.false32
  %tobool39 = icmp eq i8 %exit_must_be_taken, 0, !dbg !5523
  br i1 %tobool39, label %if.end54, label %if.else41, !dbg !5525

if.else41:                                        ; preds = %if.else
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 2, !dbg !5526
  %9 = load i8, i8* %no_overflow, align 8, !dbg !5526
  %tobool42 = icmp eq i8 %9, 0, !dbg !5527
  br i1 %tobool42, label %lor.rhs, label %land.lhs.true, !dbg !5528

land.lhs.true:                                    ; preds = %if.else41
  %step43 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 1, !dbg !5529
  %10 = load %union.tree_node*, %union.tree_node** %step43, align 8, !dbg !5529
  %call44 = call i32 @integer_nonzerop(%union.tree_node* %10) #6, !dbg !5530
  %tobool45 = icmp eq i32 %call44, 0, !dbg !5530
  br i1 %tobool45, label %lor.rhs, label %lor.end, !dbg !5531

lor.rhs:                                          ; preds = %land.lhs.true, %if.else41
  %no_overflow46 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 2, !dbg !5532
  %11 = load i8, i8* %no_overflow46, align 8, !dbg !5532
  %tobool48 = icmp eq i8 %11, 0, !dbg !5533
  br i1 %tobool48, label %lor.end, label %land.rhs, !dbg !5534

land.rhs:                                         ; preds = %lor.rhs
  %step49 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 1, !dbg !5535
  %12 = load %union.tree_node*, %union.tree_node** %step49, align 8, !dbg !5535
  %call50 = call i32 @integer_nonzerop(%union.tree_node* %12) #6, !dbg !5536
  %tobool51 = icmp ne i32 %call50, 0, !dbg !5534
  br label %lor.end

lor.end:                                          ; preds = %land.lhs.true, %lor.rhs, %land.rhs
  %13 = phi i1 [ true, %land.lhs.true ], [ false, %lor.rhs ], [ %tobool51, %land.rhs ]
  br label %if.end54

if.end54:                                         ; preds = %if.else, %if.end18, %lor.end, %lor.lhs.false26, %lor.lhs.false32
  %fv_comp_no_overflow.1 = phi i1 [ true, %lor.lhs.false32 ], [ true, %lor.lhs.false26 ], [ true, %if.end18 ], [ %13, %lor.end ], [ false, %if.else ]
  %step55 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 1, !dbg !5537
  %14 = load %union.tree_node*, %union.tree_node** %step55, align 8, !dbg !5537
  %call56 = call i32 @integer_nonzerop(%union.tree_node* %14) #6, !dbg !5539
  %tobool57 = icmp eq i32 %call56, 0, !dbg !5539
  br i1 %tobool57, label %if.else102, label %if.then58, !dbg !5540

if.then58:                                        ; preds = %if.end54
  br i1 %fv_comp_no_overflow.1, label %if.end69, label %if.then60, !dbg !5541

if.then60:                                        ; preds = %if.then58
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %type12.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !5543
  %15 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !5543
  %16 = load %union.tree_node*, %union.tree_node** %15, align 8, !dbg !5543
  %call62 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %type12.0, %union.tree_node* %16, %union.tree_node* %call19) #6, !dbg !5543
  call void @llvm.dbg.value(metadata %union.tree_node* %call62, metadata !5486, metadata !DIExpression()), !dbg !5492
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5546
  %base63 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5546
  %18 = load %union.tree_node*, %union.tree_node** %base63, align 8, !dbg !5546
  %call64 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %17, %union.tree_node* %18, %union.tree_node* %call62) #6, !dbg !5546
  call void @llvm.dbg.value(metadata %union.tree_node* %call64, metadata !5485, metadata !DIExpression()), !dbg !5492
  %call65 = call i32 @integer_zerop(%union.tree_node* %call64) #6, !dbg !5547
  %tobool66 = icmp eq i32 %call65, 0, !dbg !5547
  br i1 %tobool66, label %if.end69, label %end, !dbg !5549

if.end69:                                         ; preds = %if.then60, %if.then58
  %assumption.0 = phi %union.tree_node* [ %3, %if.then58 ], [ %call64, %if.then60 ], !dbg !5492
  call void @llvm.dbg.value(metadata %union.tree_node* %assumption.0, metadata !5485, metadata !DIExpression()), !dbg !5492
  %arraydecay71 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !5550
  %call72 = call i32 @mpz_cmp(%struct.__mpz_struct* nonnull %arraydecay, %struct.__mpz_struct* %arraydecay71) #6, !dbg !5552
  %cmp73 = icmp slt i32 %call72, 0, !dbg !5553
  br i1 %cmp73, label %if.then75, label %if.else76, !dbg !5554

if.then75:                                        ; preds = %if.end69
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !5555
  call void @llvm.dbg.value(metadata %union.tree_node* %19, metadata !5487, metadata !DIExpression()), !dbg !5492
  br label %if.end148, !dbg !5556

if.else76:                                        ; preds = %if.end69
  %bf.load78 = load i64, i64* %4, align 8, !dbg !5557
  %bf.cast808 = and i64 %bf.load78, 65535, !dbg !5557
  %cmp81 = icmp eq i64 %bf.cast808, 10, !dbg !5557
  br i1 %cmp81, label %if.then90, label %lor.lhs.false83, !dbg !5557

lor.lhs.false83:                                  ; preds = %if.else76
  %cmp88 = icmp eq i64 %bf.cast808, 12, !dbg !5557
  br i1 %cmp88, label %if.then90, label %if.else95, !dbg !5559

if.then90:                                        ; preds = %lor.lhs.false83, %if.else76
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5560
  %base91 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5560
  %21 = load %union.tree_node*, %union.tree_node** %base91, align 8, !dbg !5560
  %base92 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5560
  %22 = load %union.tree_node*, %union.tree_node** %base92, align 8, !dbg !5560
  %call93 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %type, %union.tree_node* %22, %union.tree_node* %call19) #6, !dbg !5560
  %call94 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %20, %union.tree_node* %21, %union.tree_node* %call93) #6, !dbg !5560
  call void @llvm.dbg.value(metadata %union.tree_node* %call94, metadata !5487, metadata !DIExpression()), !dbg !5492
  br label %if.end148, !dbg !5561

if.else95:                                        ; preds = %lor.lhs.false83
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5562
  %base96 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5562
  %24 = load %union.tree_node*, %union.tree_node** %base96, align 8, !dbg !5562
  %base97 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5562
  %25 = load %union.tree_node*, %union.tree_node** %base97, align 8, !dbg !5562
  %call98 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %type12.0, %union.tree_node* %25, %union.tree_node* %call19) #6, !dbg !5562
  %call99 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %23, %union.tree_node* %24, %union.tree_node* %call98) #6, !dbg !5562
  call void @llvm.dbg.value(metadata %union.tree_node* %call99, metadata !5487, metadata !DIExpression()), !dbg !5492
  br label %if.end148

if.else102:                                       ; preds = %if.end54
  br i1 %fv_comp_no_overflow.1, label %if.end113, label %if.then104, !dbg !5563

if.then104:                                       ; preds = %if.else102
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %type12.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !5565
  %26 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !5565
  %27 = load %union.tree_node*, %union.tree_node** %26, align 8, !dbg !5565
  %call106 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %type12.0, %union.tree_node* %27, %union.tree_node* %call19) #6, !dbg !5565
  call void @llvm.dbg.value(metadata %union.tree_node* %call106, metadata !5486, metadata !DIExpression()), !dbg !5492
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5568
  %base107 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5568
  %29 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !5568
  %call108 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 100, %union.tree_node* %28, %union.tree_node* %29, %union.tree_node* %call106) #6, !dbg !5568
  call void @llvm.dbg.value(metadata %union.tree_node* %call108, metadata !5485, metadata !DIExpression()), !dbg !5492
  %call109 = call i32 @integer_zerop(%union.tree_node* %call108) #6, !dbg !5569
  %tobool110 = icmp eq i32 %call109, 0, !dbg !5569
  br i1 %tobool110, label %if.end113, label %end, !dbg !5571

if.end113:                                        ; preds = %if.then104, %if.else102
  %assumption.1 = phi %union.tree_node* [ %3, %if.else102 ], [ %call108, %if.then104 ], !dbg !5492
  call void @llvm.dbg.value(metadata %union.tree_node* %assumption.1, metadata !5485, metadata !DIExpression()), !dbg !5492
  %arraydecay116 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !5572
  %call117 = call i32 @mpz_cmp(%struct.__mpz_struct* nonnull %arraydecay, %struct.__mpz_struct* %arraydecay116) #6, !dbg !5574
  %cmp118 = icmp slt i32 %call117, 0, !dbg !5575
  br i1 %cmp118, label %if.then120, label %if.else121, !dbg !5576

if.then120:                                       ; preds = %if.end113
  %30 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 25), align 8, !dbg !5577
  call void @llvm.dbg.value(metadata %union.tree_node* %30, metadata !5487, metadata !DIExpression()), !dbg !5492
  br label %if.end148, !dbg !5578

if.else121:                                       ; preds = %if.end113
  %bf.load123 = load i64, i64* %4, align 8, !dbg !5579
  %bf.cast1256 = and i64 %bf.load123, 65535, !dbg !5579
  %cmp126 = icmp eq i64 %bf.cast1256, 10, !dbg !5579
  br i1 %cmp126, label %if.then135, label %lor.lhs.false128, !dbg !5579

lor.lhs.false128:                                 ; preds = %if.else121
  %cmp133 = icmp eq i64 %bf.cast1256, 12, !dbg !5579
  br i1 %cmp133, label %if.then135, label %if.else141, !dbg !5581

if.then135:                                       ; preds = %lor.lhs.false128, %if.else121
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5582
  %base136 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5582
  %32 = load %union.tree_node*, %union.tree_node** %base136, align 8, !dbg !5582
  %call137 = call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %type12.0, %union.tree_node* %call19) #6, !dbg !5582
  %call138 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 66, %union.tree_node* %type, %union.tree_node* %32, %union.tree_node* %call137) #6, !dbg !5582
  %base139 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5582
  %33 = load %union.tree_node*, %union.tree_node** %base139, align 8, !dbg !5582
  %call140 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %31, %union.tree_node* %call138, %union.tree_node* %33) #6, !dbg !5582
  call void @llvm.dbg.value(metadata %union.tree_node* %call140, metadata !5487, metadata !DIExpression()), !dbg !5492
  br label %if.end148, !dbg !5583

if.else141:                                       ; preds = %lor.lhs.false128
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5584
  %base142 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5584
  %35 = load %union.tree_node*, %union.tree_node** %base142, align 8, !dbg !5584
  %call143 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %type12.0, %union.tree_node* %35, %union.tree_node* %call19) #6, !dbg !5584
  %base144 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5584
  %36 = load %union.tree_node*, %union.tree_node** %base144, align 8, !dbg !5584
  %call145 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %34, %union.tree_node* %call143, %union.tree_node* %36) #6, !dbg !5584
  call void @llvm.dbg.value(metadata %union.tree_node* %call145, metadata !5487, metadata !DIExpression()), !dbg !5492
  br label %if.end148

if.end148:                                        ; preds = %if.then120, %if.else141, %if.then135, %if.then75, %if.else95, %if.then90
  %assumption.2 = phi %union.tree_node* [ %assumption.0, %if.then90 ], [ %assumption.0, %if.else95 ], [ %assumption.0, %if.then75 ], [ %assumption.1, %if.then135 ], [ %assumption.1, %if.else141 ], [ %assumption.1, %if.then120 ], !dbg !5585
  %noloop.4 = phi %union.tree_node* [ %call94, %if.then90 ], [ %call99, %if.else95 ], [ %19, %if.then75 ], [ %call140, %if.then135 ], [ %call145, %if.else141 ], [ %30, %if.then120 ], !dbg !5586
  call void @llvm.dbg.value(metadata %union.tree_node* %noloop.4, metadata !5487, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.value(metadata %union.tree_node* %assumption.2, metadata !5485, metadata !DIExpression()), !dbg !5492
  %call149 = call i32 @integer_nonzerop(%union.tree_node* %assumption.2) #6, !dbg !5587
  %tobool150 = icmp eq i32 %call149, 0, !dbg !5587
  br i1 %tobool150, label %if.then151, label %if.end154, !dbg !5589

if.then151:                                       ; preds = %if.end148
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5590
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 0, !dbg !5590
  %38 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !5590
  %call152 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %37, %union.tree_node* %38, %union.tree_node* %assumption.2) #6, !dbg !5590
  store %union.tree_node* %call152, %union.tree_node** %assumptions, align 8, !dbg !5591
  br label %if.end154, !dbg !5592

if.end154:                                        ; preds = %if.end148, %if.then151
  %call155 = call i32 @integer_zerop(%union.tree_node* %noloop.4) #6, !dbg !5593
  %tobool156 = icmp eq i32 %call155, 0, !dbg !5593
  br i1 %tobool156, label %if.then157, label %if.end160, !dbg !5595

if.then157:                                       ; preds = %if.end154
  %39 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5596
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 1, !dbg !5596
  %40 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !5596
  %call158 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 94, %union.tree_node* %39, %union.tree_node* %40, %union.tree_node* %noloop.4) #6, !dbg !5596
  store %union.tree_node* %call158, %union.tree_node** %may_be_zero, align 8, !dbg !5597
  br label %if.end160, !dbg !5598

if.end160:                                        ; preds = %if.end154, %if.then157
  %call162 = call { i64, i64 } @tree_to_double_int(%union.tree_node* %mod.0) #6, !dbg !5599
  %41 = extractvalue { i64, i64 } %call162, 0, !dbg !5599
  %42 = extractvalue { i64, i64 } %call162, 1, !dbg !5599
  call fastcc void @bounds_add(%struct.bounds* %bnds, i64 %41, i64 %42, %union.tree_node* %type) #7, !dbg !5600
  %43 = load %union.tree_node*, %union.tree_node** %delta, align 8, !dbg !5601
  %call163 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %0, %union.tree_node* %43, %union.tree_node* %mod.0) #6, !dbg !5601
  store %union.tree_node* %call163, %union.tree_node** %delta, align 8, !dbg !5602
  call void @llvm.dbg.value(metadata i8 1, metadata !5488, metadata !DIExpression()), !dbg !5492
  br label %end, !dbg !5603

end:                                              ; preds = %if.then60, %if.then104, %if.end160
  %ret.0 = phi i8 [ 1, %if.end160 ], [ 0, %if.then60 ], [ 0, %if.then104 ], !dbg !5492
  call void @llvm.dbg.value(metadata i8 %ret.0, metadata !5488, metadata !DIExpression()), !dbg !5492
  call void @llvm.dbg.label(metadata !5491), !dbg !5604
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5605
  br label %cleanup, !dbg !5606

cleanup:                                          ; preds = %if.end, %end
  %retval.0 = phi i8 [ %ret.0, %end ], [ 0, %if.end ], !dbg !5492
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !5607
  ret i8 %retval.0, !dbg !5607
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @assert_no_overflow_lt(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, %union.tree_node* %step) unnamed_addr #5 !dbg !5608 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5612, metadata !DIExpression()), !dbg !5622
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0, metadata !5613, metadata !DIExpression()), !dbg !5622
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1, metadata !5614, metadata !DIExpression()), !dbg !5622
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %niter, metadata !5615, metadata !DIExpression()), !dbg !5622
  call void @llvm.dbg.value(metadata %union.tree_node* %step, metadata !5616, metadata !DIExpression()), !dbg !5622
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %step, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5623
  %0 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !5623
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !5621, metadata !DIExpression()), !dbg !5622
  %step2 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 1, !dbg !5624
  %1 = load %union.tree_node*, %union.tree_node** %step2, align 8, !dbg !5624
  %call = tail call i32 @integer_nonzerop(%union.tree_node* %1) #6, !dbg !5626
  %tobool = icmp eq i32 %call, 0, !dbg !5626
  br i1 %tobool, label %if.else22, label %if.then, !dbg !5627

if.then:                                          ; preds = %entry
  %no_overflow = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 2, !dbg !5628
  %2 = load i8, i8* %no_overflow, align 8, !dbg !5628
  %tobool3 = icmp eq i8 %2, 0, !dbg !5631
  br i1 %tobool3, label %if.end, label %cleanup, !dbg !5632

if.end:                                           ; preds = %if.then
  %3 = bitcast %struct.affine_iv* %iv0 to i64**, !dbg !5633
  %4 = load i64*, i64** %3, align 8, !dbg !5633
  %bf.load = load i64, i64* %4, align 8, !dbg !5633
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !5635
  %cmp = icmp eq i64 %bf.cast2, 23, !dbg !5635
  br i1 %cmp, label %if.then6, label %if.else, !dbg !5636

if.then6:                                         ; preds = %if.end
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !5637
  %5 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !5637
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !5637
  %call8 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %0, %union.tree_node* %6) #6, !dbg !5637
  %base9 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5637
  %7 = load %union.tree_node*, %union.tree_node** %base9, align 8, !dbg !5637
  %call10 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %0, %union.tree_node* %7) #6, !dbg !5637
  %call11 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %0, %union.tree_node* %call8, %union.tree_node* %call10) #6, !dbg !5637
  call void @llvm.dbg.value(metadata %union.tree_node* %call11, metadata !5618, metadata !DIExpression()), !dbg !5622
  %call12 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 73, %union.tree_node* %0, %union.tree_node* %call11, %union.tree_node* %step) #6, !dbg !5639
  call void @llvm.dbg.value(metadata %union.tree_node* %call12, metadata !5620, metadata !DIExpression()), !dbg !5622
  br label %if.end15, !dbg !5640

if.else:                                          ; preds = %if.end
  %call13 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %0, i64 1) #6, !dbg !5641
  %call14 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %0, %union.tree_node* %step, %union.tree_node* %call13) #6, !dbg !5641
  call void @llvm.dbg.value(metadata %union.tree_node* %call14, metadata !5620, metadata !DIExpression()), !dbg !5622
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then6
  %diff.0 = phi %union.tree_node* [ %call12, %if.then6 ], [ %call14, %if.else ], !dbg !5642
  call void @llvm.dbg.value(metadata %union.tree_node* %diff.0, metadata !5620, metadata !DIExpression()), !dbg !5622
  %maxval17 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !5643
  %8 = bitcast %struct.rtx_def** %maxval17 to %union.tree_node**, !dbg !5643
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !5643
  %call18 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type, %union.tree_node* %diff.0) #6, !dbg !5643
  %call19 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %type, %union.tree_node* %9, %union.tree_node* %call18) #6, !dbg !5643
  call void @llvm.dbg.value(metadata %union.tree_node* %call19, metadata !5617, metadata !DIExpression()), !dbg !5622
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5644
  %base20 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5644
  %11 = load %union.tree_node*, %union.tree_node** %base20, align 8, !dbg !5644
  %call21 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %10, %union.tree_node* %11, %union.tree_node* %call19) #6, !dbg !5644
  call void @llvm.dbg.value(metadata %union.tree_node* %call21, metadata !5619, metadata !DIExpression()), !dbg !5622
  br label %if.end50, !dbg !5645

if.else22:                                        ; preds = %entry
  %no_overflow23 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 2, !dbg !5646
  %12 = load i8, i8* %no_overflow23, align 8, !dbg !5646
  %tobool24 = icmp eq i8 %12, 0, !dbg !5649
  br i1 %tobool24, label %if.end26, label %cleanup, !dbg !5650

if.end26:                                         ; preds = %if.else22
  %13 = bitcast %struct.affine_iv* %iv1 to i64**, !dbg !5651
  %14 = load i64*, i64** %13, align 8, !dbg !5651
  %bf.load29 = load i64, i64* %14, align 8, !dbg !5651
  %bf.cast311 = and i64 %bf.load29, 65535, !dbg !5653
  %cmp32 = icmp eq i64 %bf.cast311, 23, !dbg !5653
  br i1 %cmp32, label %if.then33, label %if.else40, !dbg !5654

if.then33:                                        ; preds = %if.end26
  %15 = bitcast i64* %14 to %union.tree_node*, !dbg !5654
  %call35 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %0, %union.tree_node* %15) #6, !dbg !5655
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !5655
  %16 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !5655
  %17 = load %union.tree_node*, %union.tree_node** %16, align 8, !dbg !5655
  %call37 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %0, %union.tree_node* %17) #6, !dbg !5655
  %call38 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %0, %union.tree_node* %call35, %union.tree_node* %call37) #6, !dbg !5655
  call void @llvm.dbg.value(metadata %union.tree_node* %call38, metadata !5618, metadata !DIExpression()), !dbg !5622
  %call39 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 73, %union.tree_node* %0, %union.tree_node* %call38, %union.tree_node* %step) #6, !dbg !5657
  call void @llvm.dbg.value(metadata %union.tree_node* %call39, metadata !5620, metadata !DIExpression()), !dbg !5622
  br label %if.end43, !dbg !5658

if.else40:                                        ; preds = %if.end26
  %call41 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %0, i64 1) #6, !dbg !5659
  %call42 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %0, %union.tree_node* %step, %union.tree_node* %call41) #6, !dbg !5659
  call void @llvm.dbg.value(metadata %union.tree_node* %call42, metadata !5620, metadata !DIExpression()), !dbg !5622
  br label %if.end43

if.end43:                                         ; preds = %if.else40, %if.then33
  %diff.1 = phi %union.tree_node* [ %call39, %if.then33 ], [ %call42, %if.else40 ], !dbg !5660
  call void @llvm.dbg.value(metadata %union.tree_node* %diff.1, metadata !5620, metadata !DIExpression()), !dbg !5622
  %minval45 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !5661
  %18 = bitcast %struct.lang_decl** %minval45 to %union.tree_node**, !dbg !5661
  %19 = load %union.tree_node*, %union.tree_node** %18, align 8, !dbg !5661
  %call46 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type, %union.tree_node* %diff.1) #6, !dbg !5661
  %call47 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %type, %union.tree_node* %19, %union.tree_node* %call46) #6, !dbg !5661
  call void @llvm.dbg.value(metadata %union.tree_node* %call47, metadata !5617, metadata !DIExpression()), !dbg !5622
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5662
  %base48 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5662
  %21 = load %union.tree_node*, %union.tree_node** %base48, align 8, !dbg !5662
  %call49 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 100, %union.tree_node* %20, %union.tree_node* %21, %union.tree_node* %call47) #6, !dbg !5662
  call void @llvm.dbg.value(metadata %union.tree_node* %call49, metadata !5619, metadata !DIExpression()), !dbg !5622
  br label %if.end50

if.end50:                                         ; preds = %if.end43, %if.end15
  %assumption.0 = phi %union.tree_node* [ %call21, %if.end15 ], [ %call49, %if.end43 ], !dbg !5663
  call void @llvm.dbg.value(metadata %union.tree_node* %assumption.0, metadata !5619, metadata !DIExpression()), !dbg !5622
  %call51 = tail call i32 @integer_zerop(%union.tree_node* %assumption.0) #6, !dbg !5664
  %tobool52 = icmp eq i32 %call51, 0, !dbg !5664
  br i1 %tobool52, label %if.end54, label %cleanup, !dbg !5666

if.end54:                                         ; preds = %if.end50
  %call55 = tail call i32 @integer_nonzerop(%union.tree_node* %assumption.0) #6, !dbg !5667
  %tobool56 = icmp eq i32 %call55, 0, !dbg !5667
  br i1 %tobool56, label %if.then57, label %if.end60, !dbg !5669

if.then57:                                        ; preds = %if.end54
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5670
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 0, !dbg !5670
  %23 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !5670
  %call58 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %assumption.0) #6, !dbg !5670
  store %union.tree_node* %call58, %union.tree_node** %assumptions, align 8, !dbg !5671
  br label %if.end60, !dbg !5672

if.end60:                                         ; preds = %if.end54, %if.then57
  %no_overflow61 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 2, !dbg !5673
  store i8 1, i8* %no_overflow61, align 8, !dbg !5674
  %no_overflow62 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 2, !dbg !5675
  store i8 1, i8* %no_overflow62, align 8, !dbg !5676
  br label %cleanup, !dbg !5677

cleanup:                                          ; preds = %if.then, %if.end50, %if.else22, %if.end60
  %retval.0 = phi i8 [ 1, %if.end60 ], [ 1, %if.then ], [ 1, %if.else22 ], [ 0, %if.end50 ], !dbg !5622
  ret i8 %retval.0, !dbg !5678
}

; Function Attrs: nounwind uwtable
define internal fastcc void @assert_loop_rolls_lt(%union.tree_node* %type, %struct.affine_iv* %iv0, %struct.affine_iv* %iv1, %struct.tree_niter_desc* %niter, %struct.bounds* %bnds) unnamed_addr #5 !dbg !5679 {
entry:
  %dstep = alloca %struct.double_int, align 8
  %mstep = alloca [1 x %struct.__mpz_struct], align 16
  %max = alloca [1 x %struct.__mpz_struct], align 16
  %tmp = alloca %struct.double_int, align 8
  %tmp3 = alloca %struct.double_int, align 8
  %tmp8 = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5683, metadata !DIExpression()), !dbg !5700
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv0, metadata !5684, metadata !DIExpression()), !dbg !5700
  call void @llvm.dbg.value(metadata %struct.affine_iv* %iv1, metadata !5685, metadata !DIExpression()), !dbg !5700
  call void @llvm.dbg.value(metadata %struct.tree_niter_desc* %niter, metadata !5686, metadata !DIExpression()), !dbg !5700
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !5687, metadata !DIExpression()), !dbg !5700
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !5701
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !5688, metadata !DIExpression()), !dbg !5700
  %1 = bitcast %struct.double_int* %dstep to i8*, !dbg !5702
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !5702
  %2 = bitcast [1 x %struct.__mpz_struct]* %mstep to i8*, !dbg !5703
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !5703
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %mstep, metadata !5698, metadata !DIExpression()), !dbg !5704
  %3 = bitcast [1 x %struct.__mpz_struct]* %max to i8*, !dbg !5703
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #8, !dbg !5703
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %max, metadata !5699, metadata !DIExpression()), !dbg !5705
  %step = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 1, !dbg !5706
  %4 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5706
  %call = tail call i32 @integer_nonzerop(%union.tree_node* %4) #6, !dbg !5708
  %tobool = icmp eq i32 %call, 0, !dbg !5708
  br i1 %tobool, label %if.else, label %if.then, !dbg !5709

if.then:                                          ; preds = %entry
  %5 = bitcast %struct.double_int* %tmp to i8*, !dbg !5710
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #8, !dbg !5710
  %6 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5711
  %call2 = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %6) #6, !dbg !5710
  %7 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 0, !dbg !5710
  %8 = extractvalue { i64, i64 } %call2, 0, !dbg !5710
  store i64 %8, i64* %7, align 8, !dbg !5710
  %9 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 1, !dbg !5710
  %10 = extractvalue { i64, i64 } %call2, 1, !dbg !5710
  store i64 %10, i64* %9, align 8, !dbg !5710
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %5, i64 16, i1 false), !dbg !5710
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #8, !dbg !5710
  %.pre = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !5712
  br label %if.end, !dbg !5713

if.else:                                          ; preds = %entry
  %11 = bitcast %struct.double_int* %tmp3 to i8*, !dbg !5714
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #8, !dbg !5714
  %step4 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 1, !dbg !5716
  %12 = load %union.tree_node*, %union.tree_node** %step4, align 8, !dbg !5716
  %call5 = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %12) #6, !dbg !5717
  %13 = extractvalue { i64, i64 } %call5, 0, !dbg !5717
  %14 = extractvalue { i64, i64 } %call5, 1, !dbg !5717
  %type6 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !5718
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type6, i64 0, i32 6, !dbg !5718
  %bf.load = load i32, i32* %precision, align 4, !dbg !5718
  %bf.clear = and i32 %bf.load, 1023, !dbg !5718
  %call7 = tail call { i64, i64 } @double_int_sext(i64 %13, i64 %14, i32 %bf.clear) #6, !dbg !5714
  %15 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp3, i64 0, i32 0, !dbg !5714
  %16 = extractvalue { i64, i64 } %call7, 0, !dbg !5714
  store i64 %16, i64* %15, align 8, !dbg !5714
  %17 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp3, i64 0, i32 1, !dbg !5714
  %18 = extractvalue { i64, i64 } %call7, 1, !dbg !5714
  store i64 %18, i64* %17, align 8, !dbg !5714
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %11, i64 16, i1 false), !dbg !5714
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #8, !dbg !5714
  %19 = bitcast %struct.double_int* %tmp8 to i8*, !dbg !5719
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #8, !dbg !5719
  %20 = getelementptr inbounds %struct.double_int, %struct.double_int* %dstep, i64 0, i32 0, !dbg !5719
  %21 = load i64, i64* %20, align 8, !dbg !5719
  %22 = getelementptr inbounds %struct.double_int, %struct.double_int* %dstep, i64 0, i32 1, !dbg !5719
  %23 = load i64, i64* %22, align 8, !dbg !5719
  %call9 = tail call { i64, i64 } @double_int_neg(i64 %21, i64 %23) #6, !dbg !5719
  %24 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp8, i64 0, i32 0, !dbg !5719
  %25 = extractvalue { i64, i64 } %call9, 0, !dbg !5719
  store i64 %25, i64* %24, align 8, !dbg !5719
  %26 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp8, i64 0, i32 1, !dbg !5719
  %27 = extractvalue { i64, i64 } %call9, 1, !dbg !5719
  store i64 %27, i64* %26, align 8, !dbg !5719
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %19, i64 16, i1 false), !dbg !5719
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #8, !dbg !5719
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %type22.pre-phi = phi %struct.tree_type* [ %type6, %if.else ], [ %.pre, %if.then ], !dbg !5712
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mstep, i64 0, i64 0, !dbg !5720
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5721
  %28 = getelementptr inbounds %struct.double_int, %struct.double_int* %dstep, i64 0, i32 0, !dbg !5722
  %29 = load i64, i64* %28, align 8, !dbg !5722
  %30 = getelementptr inbounds %struct.double_int, %struct.double_int* %dstep, i64 0, i32 1, !dbg !5722
  %31 = load i64, i64* %30, align 8, !dbg !5722
  call void @mpz_set_double_int(%struct.__mpz_struct* nonnull %arraydecay, i64 %29, i64 %31, i8 zeroext 1) #6, !dbg !5722
  call void @mpz_neg(%struct.__mpz_struct* nonnull %arraydecay, %struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5723
  call void @mpz_add_ui(%struct.__mpz_struct* nonnull %arraydecay, %struct.__mpz_struct* nonnull %arraydecay, i64 1) #6, !dbg !5724
  %arraydecay16 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !5725
  %call17 = call i32 @mpz_cmp(%struct.__mpz_struct* nonnull %arraydecay, %struct.__mpz_struct* %arraydecay16) #6, !dbg !5726
  %cmp = icmp slt i32 %call17, 1, !dbg !5727
  call void @llvm.dbg.value(metadata i1 %cmp, metadata !5695, metadata !DIExpression()), !dbg !5700
  %arraydecay19 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !5728
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay19) #6, !dbg !5729
  %precision23 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type22.pre-phi, i64 0, i32 6, !dbg !5712
  %bf.load24 = load i32, i32* %precision23, align 4, !dbg !5712
  %bf.clear25 = and i32 %bf.load24, 1023, !dbg !5712
  %call26 = call { i64, i64 } @double_int_mask(i32 %bf.clear25) #6, !dbg !5730
  %32 = extractvalue { i64, i64 } %call26, 0, !dbg !5730
  %33 = extractvalue { i64, i64 } %call26, 1, !dbg !5730
  call void @mpz_set_double_int(%struct.__mpz_struct* nonnull %arraydecay19, i64 %32, i64 %33, i8 zeroext 1) #6, !dbg !5731
  call void @mpz_add(%struct.__mpz_struct* nonnull %arraydecay19, %struct.__mpz_struct* nonnull %arraydecay19, %struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5732
  %arraydecay30 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !5733
  %call32 = call i32 @mpz_cmp(%struct.__mpz_struct* nonnull %arraydecay30, %struct.__mpz_struct* nonnull %arraydecay19) #6, !dbg !5734
  %cmp33 = icmp slt i32 %call32, 1, !dbg !5735
  br i1 %cmp33, label %lor.end46, label %lor.rhs, !dbg !5736

lor.rhs:                                          ; preds = %if.end
  %34 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5737
  %bf.load35 = load i64, i64* %34, align 8, !dbg !5737
  %bf.cast1 = and i64 %bf.load35, 65535, !dbg !5737
  %cmp37 = icmp eq i64 %bf.cast1, 10, !dbg !5737
  br i1 %cmp37, label %lor.end46, label %lor.rhs39, !dbg !5737

lor.rhs39:                                        ; preds = %lor.rhs
  %cmp44 = icmp eq i64 %bf.cast1, 12, !dbg !5737
  br label %lor.end46, !dbg !5737

lor.end46:                                        ; preds = %lor.rhs, %lor.rhs39, %if.end
  %35 = phi i1 [ true, %if.end ], [ true, %lor.rhs ], [ %cmp44, %lor.rhs39 ]
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5738
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay19) #6, !dbg !5739
  %or.cond = and i1 %cmp, %35, !dbg !5740
  br i1 %or.cond, label %cleanup, label %if.end55, !dbg !5740

if.end55:                                         ; preds = %lor.end46
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5694, metadata !DIExpression()), !dbg !5700
  %36 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5742
  %bf.load57 = load i64, i64* %36, align 8, !dbg !5742
  %bf.cast594 = and i64 %bf.load57, 65535, !dbg !5742
  %cmp60 = icmp eq i64 %bf.cast594, 10, !dbg !5742
  br i1 %cmp60, label %if.then68, label %lor.lhs.false, !dbg !5742

lor.lhs.false:                                    ; preds = %if.end55
  %cmp66 = icmp eq i64 %bf.cast594, 12, !dbg !5742
  br i1 %cmp66, label %if.then68, label %if.end69, !dbg !5744

if.then68:                                        ; preds = %lor.lhs.false, %if.end55
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !5745
  call void @llvm.dbg.value(metadata %union.tree_node* %37, metadata !5694, metadata !DIExpression()), !dbg !5700
  br label %if.end69, !dbg !5746

if.end69:                                         ; preds = %if.then68, %lor.lhs.false
  %type1.0 = phi %union.tree_node* [ %37, %if.then68 ], [ %type, %lor.lhs.false ], !dbg !5700
  call void @llvm.dbg.value(metadata %union.tree_node* %type1.0, metadata !5694, metadata !DIExpression()), !dbg !5700
  %38 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5747
  %call71 = call i32 @integer_nonzerop(%union.tree_node* %38) #6, !dbg !5749
  %tobool72 = icmp eq i32 %call71, 0, !dbg !5749
  br i1 %tobool72, label %if.else101, label %if.then73, !dbg !5750

if.then73:                                        ; preds = %if.end69
  %39 = load %union.tree_node*, %union.tree_node** %step, align 8, !dbg !5751
  %call75 = call %union.tree_node* @build_int_cst(%union.tree_node* %type1.0, i64 1) #6, !dbg !5751
  %call76 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %type1.0, %union.tree_node* %39, %union.tree_node* %call75) #6, !dbg !5751
  call void @llvm.dbg.value(metadata %union.tree_node* %call76, metadata !5690, metadata !DIExpression()), !dbg !5700
  %bf.load78 = load i64, i64* %36, align 8, !dbg !5753
  %bf.cast808 = and i64 %bf.load78, 65535, !dbg !5753
  %cmp81 = icmp eq i64 %bf.cast808, 10, !dbg !5753
  br i1 %cmp81, label %if.end95, label %lor.lhs.false83, !dbg !5753

lor.lhs.false83:                                  ; preds = %if.then73
  %cmp88 = icmp eq i64 %bf.cast808, 12, !dbg !5753
  br i1 %cmp88, label %if.end95, label %if.then90, !dbg !5755

if.then90:                                        ; preds = %lor.lhs.false83
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !5756
  %40 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !5756
  %41 = load %union.tree_node*, %union.tree_node** %40, align 8, !dbg !5756
  %call92 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %type1.0, %union.tree_node* %41, %union.tree_node* %call76) #6, !dbg !5756
  call void @llvm.dbg.value(metadata %union.tree_node* %call92, metadata !5689, metadata !DIExpression()), !dbg !5700
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5758
  %base93 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5758
  %43 = load %union.tree_node*, %union.tree_node** %base93, align 8, !dbg !5758
  %call94 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 100, %union.tree_node* %42, %union.tree_node* %43, %union.tree_node* %call92) #6, !dbg !5758
  call void @llvm.dbg.value(metadata %union.tree_node* %call94, metadata !5688, metadata !DIExpression()), !dbg !5700
  br label %if.end95, !dbg !5759

if.end95:                                         ; preds = %if.then90, %lor.lhs.false83, %if.then73
  %assumption.0 = phi %union.tree_node* [ %0, %if.then73 ], [ %0, %lor.lhs.false83 ], [ %call94, %if.then90 ], !dbg !5700
  call void @llvm.dbg.value(metadata %union.tree_node* %assumption.0, metadata !5688, metadata !DIExpression()), !dbg !5700
  %base96 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5760
  %44 = load %union.tree_node*, %union.tree_node** %base96, align 8, !dbg !5760
  %call97 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type1.0, %union.tree_node* %44) #6, !dbg !5760
  %call98 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %type1.0, %union.tree_node* %call97, %union.tree_node* %call76) #6, !dbg !5760
  call void @llvm.dbg.value(metadata %union.tree_node* %call98, metadata !5692, metadata !DIExpression()), !dbg !5700
  %base99 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5761
  %45 = load %union.tree_node*, %union.tree_node** %base99, align 8, !dbg !5761
  %call100 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type1.0, %union.tree_node* %45) #6, !dbg !5761
  call void @llvm.dbg.value(metadata %union.tree_node* %call100, metadata !5693, metadata !DIExpression()), !dbg !5700
  br label %if.end129, !dbg !5762

if.else101:                                       ; preds = %if.end69
  %step102 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 1, !dbg !5763
  %46 = load %union.tree_node*, %union.tree_node** %step102, align 8, !dbg !5763
  %call103 = call %union.tree_node* @build_int_cst(%union.tree_node* %type1.0, i64 1) #6, !dbg !5763
  %call104 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %type1.0, %union.tree_node* %46, %union.tree_node* %call103) #6, !dbg !5763
  call void @llvm.dbg.value(metadata %union.tree_node* %call104, metadata !5690, metadata !DIExpression()), !dbg !5700
  %bf.load106 = load i64, i64* %36, align 8, !dbg !5765
  %bf.cast1086 = and i64 %bf.load106, 65535, !dbg !5765
  %cmp109 = icmp eq i64 %bf.cast1086, 10, !dbg !5765
  br i1 %cmp109, label %if.end123, label %lor.lhs.false111, !dbg !5765

lor.lhs.false111:                                 ; preds = %if.else101
  %cmp116 = icmp eq i64 %bf.cast1086, 12, !dbg !5765
  br i1 %cmp116, label %if.end123, label %if.then118, !dbg !5767

if.then118:                                       ; preds = %lor.lhs.false111
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !5768
  %47 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !5768
  %48 = load %union.tree_node*, %union.tree_node** %47, align 8, !dbg !5768
  %call120 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 63, %union.tree_node* %type1.0, %union.tree_node* %48, %union.tree_node* %call104) #6, !dbg !5768
  call void @llvm.dbg.value(metadata %union.tree_node* %call120, metadata !5689, metadata !DIExpression()), !dbg !5700
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5770
  %base121 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5770
  %50 = load %union.tree_node*, %union.tree_node** %base121, align 8, !dbg !5770
  %call122 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 98, %union.tree_node* %49, %union.tree_node* %50, %union.tree_node* %call120) #6, !dbg !5770
  call void @llvm.dbg.value(metadata %union.tree_node* %call122, metadata !5688, metadata !DIExpression()), !dbg !5700
  br label %if.end123, !dbg !5771

if.end123:                                        ; preds = %if.then118, %lor.lhs.false111, %if.else101
  %assumption.1 = phi %union.tree_node* [ %0, %if.else101 ], [ %0, %lor.lhs.false111 ], [ %call122, %if.then118 ], !dbg !5700
  call void @llvm.dbg.value(metadata %union.tree_node* %assumption.1, metadata !5688, metadata !DIExpression()), !dbg !5700
  %base124 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv0, i64 0, i32 0, !dbg !5772
  %51 = load %union.tree_node*, %union.tree_node** %base124, align 8, !dbg !5772
  %call125 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type1.0, %union.tree_node* %51) #6, !dbg !5772
  call void @llvm.dbg.value(metadata %union.tree_node* %call125, metadata !5692, metadata !DIExpression()), !dbg !5700
  %base126 = getelementptr inbounds %struct.affine_iv, %struct.affine_iv* %iv1, i64 0, i32 0, !dbg !5773
  %52 = load %union.tree_node*, %union.tree_node** %base126, align 8, !dbg !5773
  %call127 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %type1.0, %union.tree_node* %52) #6, !dbg !5773
  %call128 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %type1.0, %union.tree_node* %call127, %union.tree_node* %call104) #6, !dbg !5773
  call void @llvm.dbg.value(metadata %union.tree_node* %call128, metadata !5693, metadata !DIExpression()), !dbg !5700
  br label %if.end129

if.end129:                                        ; preds = %if.end123, %if.end95
  %assumption.2 = phi %union.tree_node* [ %assumption.0, %if.end95 ], [ %assumption.1, %if.end123 ], !dbg !5774
  %mbzl.0 = phi %union.tree_node* [ %call98, %if.end95 ], [ %call125, %if.end123 ], !dbg !5775
  %mbzr.0 = phi %union.tree_node* [ %call100, %if.end95 ], [ %call128, %if.end123 ], !dbg !5775
  call void @llvm.dbg.value(metadata %union.tree_node* %mbzr.0, metadata !5693, metadata !DIExpression()), !dbg !5700
  call void @llvm.dbg.value(metadata %union.tree_node* %mbzl.0, metadata !5692, metadata !DIExpression()), !dbg !5700
  call void @llvm.dbg.value(metadata %union.tree_node* %assumption.2, metadata !5688, metadata !DIExpression()), !dbg !5700
  %call130 = call i32 @integer_nonzerop(%union.tree_node* %assumption.2) #6, !dbg !5776
  %tobool131 = icmp eq i32 %call130, 0, !dbg !5776
  br i1 %tobool131, label %if.then132, label %if.end135, !dbg !5778

if.then132:                                       ; preds = %if.end129
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5779
  %assumptions = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 0, !dbg !5779
  %54 = load %union.tree_node*, %union.tree_node** %assumptions, align 8, !dbg !5779
  %call133 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 93, %union.tree_node* %53, %union.tree_node* %54, %union.tree_node* %assumption.2) #6, !dbg !5779
  store %union.tree_node* %call133, %union.tree_node** %assumptions, align 8, !dbg !5780
  br label %if.end135, !dbg !5781

if.end135:                                        ; preds = %if.end129, %if.then132
  br i1 %cmp, label %cleanup, label %if.then137, !dbg !5782

if.then137:                                       ; preds = %if.end135
  %55 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5783
  %call138 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 99, %union.tree_node* %55, %union.tree_node* %mbzl.0, %union.tree_node* %mbzr.0) #6, !dbg !5783
  call void @llvm.dbg.value(metadata %union.tree_node* %call138, metadata !5691, metadata !DIExpression()), !dbg !5700
  %56 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5786
  %may_be_zero = getelementptr inbounds %struct.tree_niter_desc, %struct.tree_niter_desc* %niter, i64 0, i32 1, !dbg !5786
  %57 = load %union.tree_node*, %union.tree_node** %may_be_zero, align 8, !dbg !5786
  %call139 = call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 94, %union.tree_node* %56, %union.tree_node* %57, %union.tree_node* %call138) #6, !dbg !5786
  store %union.tree_node* %call139, %union.tree_node** %may_be_zero, align 8, !dbg !5787
  br label %cleanup, !dbg !5788

cleanup:                                          ; preds = %if.end135, %if.then137, %lor.end46
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #8, !dbg !5789
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !5789
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !5789
  ret void, !dbg !5789
}

; Function Attrs: nounwind uwtable
define internal fastcc void @bounds_add(%struct.bounds* %bnds, i64 %delta.coerce0, i64 %delta.coerce1, %union.tree_node* %type) unnamed_addr #5 !dbg !5790 {
entry:
  %mdelta = alloca [1 x %struct.__mpz_struct], align 16
  %max = alloca [1 x %struct.__mpz_struct], align 16
  call void @llvm.dbg.value(metadata %struct.bounds* %bnds, metadata !5794, metadata !DIExpression()), !dbg !5799
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !5796, metadata !DIExpression()), !dbg !5799
  %0 = bitcast [1 x %struct.__mpz_struct]* %mdelta to i8*, !dbg !5800
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !5800
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %mdelta, metadata !5797, metadata !DIExpression()), !dbg !5801
  %1 = bitcast [1 x %struct.__mpz_struct]* %max to i8*, !dbg !5800
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !5800
  call void @llvm.dbg.declare(metadata [1 x %struct.__mpz_struct]* %max, metadata !5798, metadata !DIExpression()), !dbg !5802
  %arraydecay = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %mdelta, i64 0, i64 0, !dbg !5803
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5804
  call void @mpz_set_double_int(%struct.__mpz_struct* nonnull %arraydecay, i64 %delta.coerce0, i64 %delta.coerce1, i8 zeroext 0) #6, !dbg !5805
  %arraydecay2 = getelementptr inbounds [1 x %struct.__mpz_struct], [1 x %struct.__mpz_struct]* %max, i64 0, i64 0, !dbg !5806
  call void @mpz_init(%struct.__mpz_struct* nonnull %arraydecay2) #6, !dbg !5807
  %type4 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !5808
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type4, i64 0, i32 6, !dbg !5808
  %bf.load = load i32, i32* %precision, align 4, !dbg !5808
  %bf.clear = and i32 %bf.load, 1023, !dbg !5808
  %call = call { i64, i64 } @double_int_mask(i32 %bf.clear) #6, !dbg !5809
  %2 = extractvalue { i64, i64 } %call, 0, !dbg !5809
  %3 = extractvalue { i64, i64 } %call, 1, !dbg !5809
  call void @mpz_set_double_int(%struct.__mpz_struct* nonnull %arraydecay2, i64 %2, i64 %3, i8 zeroext 1) #6, !dbg !5810
  %arraydecay5 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 1, i64 0, !dbg !5811
  call void @mpz_add(%struct.__mpz_struct* nonnull %arraydecay5, %struct.__mpz_struct* nonnull %arraydecay5, %struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5812
  %arraydecay9 = getelementptr inbounds %struct.bounds, %struct.bounds* %bnds, i64 0, i32 0, i64 0, !dbg !5813
  call void @mpz_add(%struct.__mpz_struct* %arraydecay9, %struct.__mpz_struct* %arraydecay9, %struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5814
  %call16 = call i32 @mpz_cmp(%struct.__mpz_struct* nonnull %arraydecay5, %struct.__mpz_struct* nonnull %arraydecay2) #6, !dbg !5815
  %cmp = icmp sgt i32 %call16, 0, !dbg !5817
  br i1 %cmp, label %if.then, label %if.end, !dbg !5818

if.then:                                          ; preds = %entry
  call void @mpz_set(%struct.__mpz_struct* nonnull %arraydecay5, %struct.__mpz_struct* nonnull %arraydecay2) #6, !dbg !5819
  br label %if.end, !dbg !5819

if.end:                                           ; preds = %if.then, %entry
  call void @mpz_neg(%struct.__mpz_struct* nonnull %arraydecay2, %struct.__mpz_struct* nonnull %arraydecay2) #6, !dbg !5820
  %call25 = call i32 @mpz_cmp(%struct.__mpz_struct* %arraydecay9, %struct.__mpz_struct* nonnull %arraydecay2) #6, !dbg !5821
  %cmp26 = icmp slt i32 %call25, 0, !dbg !5823
  br i1 %cmp26, label %if.then27, label %if.end31, !dbg !5824

if.then27:                                        ; preds = %if.end
  call void @mpz_set(%struct.__mpz_struct* %arraydecay9, %struct.__mpz_struct* nonnull %arraydecay2) #6, !dbg !5825
  br label %if.end31, !dbg !5825

if.end31:                                         ; preds = %if.then27, %if.end
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay) #6, !dbg !5826
  call void @mpz_clear(%struct.__mpz_struct* nonnull %arraydecay2) #6, !dbg !5827
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !5828
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !5828
  ret void, !dbg !5828
}

declare dso_local %union.tree_node* @fold_build3_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %chrec) unnamed_addr #0 !dbg !5829 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !5832, metadata !DIExpression()), !dbg !5834
  call void @llvm.dbg.value(metadata %union.tree_node* %chrec, metadata !5833, metadata !DIExpression()), !dbg !5834
  %call = tail call fastcc %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) #7, !dbg !5835
  %call1 = tail call %union.tree_node* @instantiate_scev(%struct.basic_block_def* %call, %struct.loop* %loop, %union.tree_node* %chrec) #6, !dbg !5836
  ret %union.tree_node* %call1, !dbg !5837
}

declare dso_local %union.tree_node* @instantiate_scev(%struct.basic_block_def*, %struct.loop*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @block_before_loop(%struct.loop* %loop) unnamed_addr #0 !dbg !5838 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !5842, metadata !DIExpression()), !dbg !5844
  %call = tail call %struct.edge_def* @loop_preheader_edge(%struct.loop* %loop) #6, !dbg !5845
  call void @llvm.dbg.value(metadata %struct.edge_def* %call, metadata !5843, metadata !DIExpression()), !dbg !5844
  %tobool = icmp eq %struct.edge_def* %call, null, !dbg !5846
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5846

cond.true:                                        ; preds = %entry
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i64 0, i32 0, !dbg !5847
  br label %cond.end, !dbg !5846

cond.false:                                       ; preds = %entry
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5848
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !5848
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5848
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i64 0, i32 0, !dbg !5848
  br label %cond.end, !dbg !5846

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi %struct.basic_block_def** [ %src, %cond.true ], [ %x_entry_block_ptr, %cond.false ]
  %cond = load %struct.basic_block_def*, %struct.basic_block_def** %cond.in, align 8, !dbg !5846
  ret %struct.basic_block_def* %cond, !dbg !5849
}

declare dso_local %union.tree_node* @invert_truthvalue_loc(i32, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @tree_simplify_using_condition(%union.tree_node* %cond, %union.tree_node* %expr) unnamed_addr #5 !dbg !5850 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !5852, metadata !DIExpression()), !dbg !5854
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !5853, metadata !DIExpression()), !dbg !5854
  %call = tail call %union.tree_node* @expand_simple_operations(%union.tree_node* %cond) #7, !dbg !5855
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5852, metadata !DIExpression()), !dbg !5854
  %call1 = tail call fastcc %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %call, %union.tree_node* %expr) #7, !dbg !5856
  ret %union.tree_node* %call1, !dbg !5857
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %cond, %union.tree_node* %expr) unnamed_addr #5 !dbg !5858 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !5860, metadata !DIExpression()), !dbg !5870
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !5861, metadata !DIExpression()), !dbg !5870
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5871
  %bf.load = load i64, i64* %0, align 8, !dbg !5871
  %1 = trunc i64 %bf.load to i32, !dbg !5871
  %bf.cast = and i32 %1, 65535, !dbg !5871
  call void @llvm.dbg.value(metadata i32 %bf.cast, metadata !5869, metadata !DIExpression()), !dbg !5870
  %trunc = trunc i64 %bf.load to i16, !dbg !5872
  switch i16 %trunc, label %if.end43 [
    i16 23, label %cleanup
    i16 94, label %if.then5
    i16 93, label %if.then5
    i16 56, label %if.then5
  ], !dbg !5872

if.then5:                                         ; preds = %entry, %entry, %entry
  call void @llvm.dbg.value(metadata i8 0, metadata !5862, metadata !DIExpression()), !dbg !5870
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5873
  %2 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !5873
  %call = tail call fastcc %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %cond, %union.tree_node* %2) #7, !dbg !5876
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5865, metadata !DIExpression()), !dbg !5870
  %3 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !5877
  %cmp9 = icmp ne %union.tree_node* %3, %call, !dbg !5879
  call void @llvm.dbg.value(metadata i1 %cmp9, metadata !5862, metadata !DIExpression()), !dbg !5870
  %arrayidx14 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !5880
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !5880
  %call15 = tail call fastcc %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %cond, %union.tree_node* %4) #7, !dbg !5881
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !5866, metadata !DIExpression()), !dbg !5870
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !5882
  %cmp19 = icmp ne %union.tree_node* %5, %call15, !dbg !5884
  %narrow = or i1 %cmp9, %cmp19, !dbg !5885
  call void @llvm.dbg.value(metadata i1 %narrow, metadata !5862, metadata !DIExpression()), !dbg !5870
  %cmp22 = icmp eq i32 %bf.cast, 56, !dbg !5886
  br i1 %cmp22, label %if.then23, label %if.end34, !dbg !5888

if.then23:                                        ; preds = %if.then5
  %arrayidx26 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !5889
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !5889
  %call27 = tail call fastcc %union.tree_node* @tree_simplify_using_condition_1(%union.tree_node* %cond, %union.tree_node* %6) #7, !dbg !5891
  call void @llvm.dbg.value(metadata %union.tree_node* %call27, metadata !5867, metadata !DIExpression()), !dbg !5870
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx26, align 8, !dbg !5892
  %cmp31 = icmp ne %union.tree_node* %7, %call27, !dbg !5894
  %narrow2 = or i1 %narrow, %cmp31, !dbg !5895
  call void @llvm.dbg.value(metadata i1 %narrow2, metadata !5862, metadata !DIExpression()), !dbg !5870
  br label %if.end34, !dbg !5896

if.end34:                                         ; preds = %if.then5, %if.then23
  %e2.0 = phi %union.tree_node* [ %call27, %if.then23 ], [ null, %if.then5 ], !dbg !5897
  %changed.3.in = phi i1 [ %narrow2, %if.then23 ], [ %narrow, %if.then5 ]
  call void @llvm.dbg.value(metadata i1 %changed.3.in, metadata !5862, metadata !DIExpression()), !dbg !5870
  call void @llvm.dbg.value(metadata %union.tree_node* %e2.0, metadata !5867, metadata !DIExpression()), !dbg !5870
  br i1 %changed.3.in, label %if.then35, label %cleanup, !dbg !5898

if.then35:                                        ; preds = %if.end34
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5899
  br i1 %cmp22, label %if.then37, label %if.else39, !dbg !5903

if.then37:                                        ; preds = %if.then35
  %call38 = tail call %union.tree_node* @fold_build3_stat_loc(i32 0, i32 56, %union.tree_node* %8, %union.tree_node* %call, %union.tree_node* %call15, %union.tree_node* %e2.0) #6, !dbg !5904
  call void @llvm.dbg.value(metadata %union.tree_node* %call38, metadata !5861, metadata !DIExpression()), !dbg !5870
  br label %cleanup, !dbg !5905

if.else39:                                        ; preds = %if.then35
  %call40 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 %bf.cast, %union.tree_node* %8, %union.tree_node* %call, %union.tree_node* %call15) #6, !dbg !5906
  call void @llvm.dbg.value(metadata %union.tree_node* %call40, metadata !5861, metadata !DIExpression()), !dbg !5870
  br label %cleanup

if.end43:                                         ; preds = %entry
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %cond, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5907
  %bf.load45 = load i64, i64* %9, align 8, !dbg !5907
  %bf.cast473 = and i64 %bf.load45, 65535, !dbg !5909
  %cmp48 = icmp eq i64 %bf.cast473, 101, !dbg !5909
  br i1 %cmp48, label %if.then49, label %if.end72, !dbg !5910

if.then49:                                        ; preds = %if.end43
  %operands51 = getelementptr inbounds %union.tree_node, %union.tree_node* %cond, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5911
  %10 = load %union.tree_node*, %union.tree_node** %operands51, align 8, !dbg !5911
  call void @llvm.dbg.value(metadata %union.tree_node* %10, metadata !5865, metadata !DIExpression()), !dbg !5870
  %arrayidx55 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands51, i64 1, !dbg !5913
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx55, align 8, !dbg !5913
  call void @llvm.dbg.value(metadata %union.tree_node* %11, metadata !5866, metadata !DIExpression()), !dbg !5870
  %call56 = tail call fastcc %union.tree_node* @simplify_replace_tree(%union.tree_node* %expr, %union.tree_node* %10, %union.tree_node* %11) #7, !dbg !5914
  call void @llvm.dbg.value(metadata %union.tree_node* %call56, metadata !5863, metadata !DIExpression()), !dbg !5870
  %call57 = tail call i32 @integer_zerop(%union.tree_node* %call56) #6, !dbg !5915
  %tobool58 = icmp eq i32 %call57, 0, !dbg !5915
  br i1 %tobool58, label %lor.lhs.false59, label %cleanup, !dbg !5917

lor.lhs.false59:                                  ; preds = %if.then49
  %call60 = tail call i32 @integer_nonzerop(%union.tree_node* %call56) #6, !dbg !5918
  %tobool61 = icmp eq i32 %call60, 0, !dbg !5918
  br i1 %tobool61, label %if.end63, label %cleanup, !dbg !5919

if.end63:                                         ; preds = %lor.lhs.false59
  %call64 = tail call fastcc %union.tree_node* @simplify_replace_tree(%union.tree_node* %expr, %union.tree_node* %11, %union.tree_node* %10) #7, !dbg !5920
  call void @llvm.dbg.value(metadata %union.tree_node* %call64, metadata !5863, metadata !DIExpression()), !dbg !5870
  %call65 = tail call i32 @integer_zerop(%union.tree_node* %call64) #6, !dbg !5921
  %tobool66 = icmp eq i32 %call65, 0, !dbg !5921
  br i1 %tobool66, label %lor.lhs.false67, label %cleanup, !dbg !5923

lor.lhs.false67:                                  ; preds = %if.end63
  %call68 = tail call i32 @integer_nonzerop(%union.tree_node* %call64) #6, !dbg !5924
  %tobool69 = icmp eq i32 %call68, 0, !dbg !5924
  br i1 %tobool69, label %lor.lhs.false67.if.end72_crit_edge, label %cleanup, !dbg !5925

lor.lhs.false67.if.end72_crit_edge:               ; preds = %lor.lhs.false67
  %bf.load74.pre = load i64, i64* %0, align 8, !dbg !5926
  br label %if.end72, !dbg !5925

if.end72:                                         ; preds = %lor.lhs.false67.if.end72_crit_edge, %if.end43
  %bf.load74 = phi i64 [ %bf.load74.pre, %lor.lhs.false67.if.end72_crit_edge ], [ %bf.load, %if.end43 ], !dbg !5926
  %bf.cast764 = and i64 %bf.load74, 65535, !dbg !5928
  %cmp77 = icmp eq i64 %bf.cast764, 101, !dbg !5928
  br i1 %cmp77, label %if.then78, label %if.end95, !dbg !5929

if.then78:                                        ; preds = %if.end72
  %operands80 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5930
  %12 = load %union.tree_node*, %union.tree_node** %operands80, align 8, !dbg !5930
  call void @llvm.dbg.value(metadata %union.tree_node* %12, metadata !5865, metadata !DIExpression()), !dbg !5870
  %arrayidx84 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands80, i64 1, !dbg !5932
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx84, align 8, !dbg !5932
  call void @llvm.dbg.value(metadata %union.tree_node* %13, metadata !5866, metadata !DIExpression()), !dbg !5870
  %call85 = tail call fastcc %union.tree_node* @simplify_replace_tree(%union.tree_node* %cond, %union.tree_node* %12, %union.tree_node* %13) #7, !dbg !5933
  call void @llvm.dbg.value(metadata %union.tree_node* %call85, metadata !5863, metadata !DIExpression()), !dbg !5870
  %call86 = tail call i32 @integer_zerop(%union.tree_node* %call85) #6, !dbg !5934
  %tobool87 = icmp eq i32 %call86, 0, !dbg !5934
  br i1 %tobool87, label %if.end89, label %cleanup, !dbg !5936

if.end89:                                         ; preds = %if.then78
  %call90 = tail call fastcc %union.tree_node* @simplify_replace_tree(%union.tree_node* %cond, %union.tree_node* %13, %union.tree_node* %12) #7, !dbg !5937
  call void @llvm.dbg.value(metadata %union.tree_node* %call90, metadata !5863, metadata !DIExpression()), !dbg !5870
  %call91 = tail call i32 @integer_zerop(%union.tree_node* %call90) #6, !dbg !5938
  %tobool92 = icmp eq i32 %call91, 0, !dbg !5938
  br i1 %tobool92, label %if.end89.if.end95_crit_edge, label %cleanup, !dbg !5940

if.end89.if.end95_crit_edge:                      ; preds = %if.end89
  %bf.load97.pre = load i64, i64* %0, align 8, !dbg !5941
  br label %if.end95, !dbg !5940

if.end95:                                         ; preds = %if.end89.if.end95_crit_edge, %if.end72
  %bf.load97 = phi i64 [ %bf.load97.pre, %if.end89.if.end95_crit_edge ], [ %bf.load74, %if.end72 ], !dbg !5941
  %bf.cast995 = and i64 %bf.load97, 65535, !dbg !5943
  %cmp100 = icmp eq i64 %bf.cast995, 102, !dbg !5943
  br i1 %cmp100, label %if.then101, label %if.end118, !dbg !5944

if.then101:                                       ; preds = %if.end95
  %operands103 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5945
  %14 = load %union.tree_node*, %union.tree_node** %operands103, align 8, !dbg !5945
  call void @llvm.dbg.value(metadata %union.tree_node* %14, metadata !5865, metadata !DIExpression()), !dbg !5870
  %arrayidx107 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands103, i64 1, !dbg !5947
  %15 = load %union.tree_node*, %union.tree_node** %arrayidx107, align 8, !dbg !5947
  call void @llvm.dbg.value(metadata %union.tree_node* %15, metadata !5866, metadata !DIExpression()), !dbg !5870
  %call108 = tail call fastcc %union.tree_node* @simplify_replace_tree(%union.tree_node* %cond, %union.tree_node* %14, %union.tree_node* %15) #7, !dbg !5948
  call void @llvm.dbg.value(metadata %union.tree_node* %call108, metadata !5863, metadata !DIExpression()), !dbg !5870
  %call109 = tail call i32 @integer_zerop(%union.tree_node* %call108) #6, !dbg !5949
  %tobool110 = icmp eq i32 %call109, 0, !dbg !5949
  br i1 %tobool110, label %if.end112, label %if.then111, !dbg !5951

if.then111:                                       ; preds = %if.then101
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !5952
  br label %cleanup, !dbg !5953

if.end112:                                        ; preds = %if.then101
  %call113 = tail call fastcc %union.tree_node* @simplify_replace_tree(%union.tree_node* %cond, %union.tree_node* %15, %union.tree_node* %14) #7, !dbg !5954
  call void @llvm.dbg.value(metadata %union.tree_node* %call113, metadata !5863, metadata !DIExpression()), !dbg !5870
  %call114 = tail call i32 @integer_zerop(%union.tree_node* %call113) #6, !dbg !5955
  %tobool115 = icmp eq i32 %call114, 0, !dbg !5955
  br i1 %tobool115, label %if.end118, label %if.then116, !dbg !5957

if.then116:                                       ; preds = %if.end112
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 26), align 16, !dbg !5958
  br label %cleanup, !dbg !5959

if.end118:                                        ; preds = %if.end112, %if.end95
  %call119 = tail call %union.tree_node* @expand_simple_operations(%union.tree_node* %expr) #7, !dbg !5960
  call void @llvm.dbg.value(metadata %union.tree_node* %call119, metadata !5864, metadata !DIExpression()), !dbg !5870
  %call120 = tail call %union.tree_node* @invert_truthvalue_loc(i32 0, %union.tree_node* %cond) #6, !dbg !5961
  call void @llvm.dbg.value(metadata %union.tree_node* %call120, metadata !5868, metadata !DIExpression()), !dbg !5870
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5962
  %call121 = tail call %union.tree_node* @fold_binary_loc(i32 0, i32 94, %union.tree_node* %18, %union.tree_node* %call120, %union.tree_node* %call119) #6, !dbg !5962
  call void @llvm.dbg.value(metadata %union.tree_node* %call121, metadata !5863, metadata !DIExpression()), !dbg !5870
  %tobool122 = icmp eq %union.tree_node* %call121, null, !dbg !5963
  br i1 %tobool122, label %if.end126, label %land.lhs.true, !dbg !5965

land.lhs.true:                                    ; preds = %if.end118
  %call123 = tail call i32 @integer_nonzerop(%union.tree_node* nonnull %call121) #6, !dbg !5966
  %tobool124 = icmp eq i32 %call123, 0, !dbg !5966
  br i1 %tobool124, label %if.end126, label %cleanup, !dbg !5967

if.end126:                                        ; preds = %land.lhs.true, %if.end118
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !5968
  %call127 = tail call %union.tree_node* @fold_binary_loc(i32 0, i32 93, %union.tree_node* %19, %union.tree_node* %cond, %union.tree_node* %call119) #6, !dbg !5968
  call void @llvm.dbg.value(metadata %union.tree_node* %call127, metadata !5863, metadata !DIExpression()), !dbg !5870
  %tobool128 = icmp eq %union.tree_node* %call127, null, !dbg !5969
  br i1 %tobool128, label %if.end133, label %land.lhs.true129, !dbg !5971

land.lhs.true129:                                 ; preds = %if.end126
  %call130 = tail call i32 @integer_zerop(%union.tree_node* nonnull %call127) #6, !dbg !5972
  %tobool131 = icmp eq i32 %call130, 0, !dbg !5972
  br i1 %tobool131, label %if.end133, label %cleanup, !dbg !5973

if.end133:                                        ; preds = %land.lhs.true129, %if.end126
  br label %cleanup, !dbg !5974

cleanup:                                          ; preds = %lor.lhs.false67, %if.end63, %lor.lhs.false59, %if.then49, %if.end89, %if.then78, %land.lhs.true, %land.lhs.true129, %if.end34, %if.else39, %if.then37, %entry, %if.end133, %if.then116, %if.then111
  %retval.0 = phi %union.tree_node* [ %16, %if.then111 ], [ %17, %if.then116 ], [ %expr, %if.end133 ], [ %expr, %entry ], [ %expr, %if.end34 ], [ %call38, %if.then37 ], [ %call40, %if.else39 ], [ %call56, %lor.lhs.false59 ], [ %call56, %if.then49 ], [ %call64, %lor.lhs.false67 ], [ %call64, %if.end63 ], [ %call85, %if.then78 ], [ %call90, %if.end89 ], [ %call121, %land.lhs.true ], [ %call127, %land.lhs.true129 ], !dbg !5870
  ret %union.tree_node* %retval.0, !dbg !5975
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @chain_of_csts_start(%struct.loop* %loop, %union.tree_node* %x) unnamed_addr #5 !dbg !5976 {
entry:
  br label %tailrecurse, !dbg !5984

tailrecurse:                                      ; preds = %if.end31, %entry
  %x.tr = phi %union.tree_node* [ %x, %entry ], [ %call27, %if.end31 ]
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !5978, metadata !DIExpression()), !dbg !5985
  call void @llvm.dbg.value(metadata %union.tree_node* %x.tr, metadata !5979, metadata !DIExpression()), !dbg !5985
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %x.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5986
  %0 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !5986
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %0, align 8, !dbg !5986
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %1, metadata !5980, metadata !DIExpression()), !dbg !5985
  %call = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %1) #7, !dbg !5987
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call, metadata !5982, metadata !DIExpression()), !dbg !5985
  %tobool = icmp eq %struct.basic_block_def* %call, null, !dbg !5988
  br i1 %tobool, label %cleanup.loopexit, label %lor.lhs.false, !dbg !5990

lor.lhs.false:                                    ; preds = %tailrecurse
  %call1 = tail call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %loop, %struct.basic_block_def* nonnull %call) #6, !dbg !5991
  %tobool2 = icmp eq i8 %call1, 0, !dbg !5991
  br i1 %tobool2, label %cleanup.loopexit, label %if.end, !dbg !5992

if.end:                                           ; preds = %lor.lhs.false
  %call3 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %1) #7, !dbg !5993
  %cmp = icmp eq i32 %call3, 16, !dbg !5995
  br i1 %cmp, label %if.then4, label %if.end8, !dbg !5996

if.then4:                                         ; preds = %if.end
  %.lcssa6 = phi %union.gimple_statement_d* [ %1, %if.end ], !dbg !5986
  %call.lcssa5 = phi %struct.basic_block_def* [ %call, %if.end ], !dbg !5987
  %header = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 2, !dbg !5997
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5997
  %cmp5 = icmp eq %struct.basic_block_def* %call.lcssa5, %2, !dbg !6000
  %. = select i1 %cmp5, %union.gimple_statement_d* %.lcssa6, %union.gimple_statement_d* null, !dbg !6001
  br label %cleanup, !dbg !6001

if.end8:                                          ; preds = %if.end
  %call9 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %1) #7, !dbg !6002
  %cmp10 = icmp eq i32 %call9, 6, !dbg !6004
  br i1 %cmp10, label %if.end12, label %cleanup.loopexit, !dbg !6005

if.end12:                                         ; preds = %if.end8
  %call13 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1) #7, !dbg !6006
  call void @llvm.dbg.value(metadata i32 %call13, metadata !5983, metadata !DIExpression()), !dbg !5985
  %call14 = tail call fastcc zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %1) #7, !dbg !6007
  %tobool15 = icmp eq i8 %call14, 0, !dbg !6007
  br i1 %tobool15, label %lor.lhs.false16, label %cleanup.loopexit, !dbg !6009

lor.lhs.false16:                                  ; preds = %if.end12
  %idxprom = sext i32 %call13 to i64, !dbg !6010
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6010
  %3 = load i32, i32* %arrayidx, align 4, !dbg !6010
  %cmp17 = icmp eq i32 %3, 4, !dbg !6011
  br i1 %cmp17, label %cleanup.loopexit, label %lor.lhs.false19, !dbg !6012

lor.lhs.false19:                                  ; preds = %lor.lhs.false16
  %cmp20 = icmp eq i32 %call13, 121, !dbg !6013
  br i1 %cmp20, label %land.lhs.true, label %if.end26, !dbg !6014

land.lhs.true:                                    ; preds = %lor.lhs.false19
  %call22 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1) #7, !dbg !6015
  %call23 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %call22) #6, !dbg !6016
  %tobool24 = icmp eq i8 %call23, 0, !dbg !6016
  br i1 %tobool24, label %cleanup.loopexit, label %if.end26, !dbg !6017

if.end26:                                         ; preds = %land.lhs.true, %lor.lhs.false19
  %call27 = tail call fastcc %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %1, i32 1) #7, !dbg !6018
  call void @llvm.dbg.value(metadata %union.tree_node* %call27, metadata !5981, metadata !DIExpression()), !dbg !5985
  %cmp28 = icmp eq %union.tree_node* %call27, null, !dbg !6019
  br i1 %cmp28, label %cleanup.loopexit, label %if.end31, !dbg !6021

if.end31:                                         ; preds = %if.end26
  br label %tailrecurse, !dbg !5984

cleanup.loopexit:                                 ; preds = %lor.lhs.false16, %if.end26, %tailrecurse, %lor.lhs.false, %if.end8, %if.end12, %land.lhs.true
  br label %cleanup, !dbg !6022

cleanup:                                          ; preds = %cleanup.loopexit, %if.then4
  %retval.0 = phi %union.gimple_statement_d* [ %., %if.then4 ], [ null, %cleanup.loopexit ], !dbg !5985
  ret %union.gimple_statement_d* %retval.0, !dbg !6022
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_references_memory_p(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !6023 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6027, metadata !DIExpression()), !dbg !6028
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %stmt) #7, !dbg !6029
  %tobool = icmp eq i8 %call, 0, !dbg !6029
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6030

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %stmt) #7, !dbg !6031
  %tobool2 = icmp ne %union.tree_node* %call1, null, !dbg !6030
  %phitmp = zext i1 %tobool2 to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !6032
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @single_ssa_tree_operand(%union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !6033 {
entry:
  %iter = alloca %struct.ssa_operand_iterator_d, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6037, metadata !DIExpression()), !dbg !6053
  call void @llvm.dbg.value(metadata i32 1, metadata !6038, metadata !DIExpression()), !dbg !6053
  %0 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %iter, i64 0, i32 0, !dbg !6054
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #8, !dbg !6054
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6040, metadata !DIExpression(DW_OP_deref)), !dbg !6053
  %call = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %iter, %union.gimple_statement_d* %stmt, i32 1) #7, !dbg !6055
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6039, metadata !DIExpression()), !dbg !6053
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6040, metadata !DIExpression(DW_OP_deref)), !dbg !6053
  %call1 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !6056
  %tobool = icmp eq i8 %call1, 0, !dbg !6056
  br i1 %tobool, label %if.end, label %cleanup, !dbg !6058

if.end:                                           ; preds = %entry
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6040, metadata !DIExpression(DW_OP_deref)), !dbg !6053
  %call2 = call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !6059
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %iter, metadata !6040, metadata !DIExpression(DW_OP_deref)), !dbg !6053
  %call3 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %iter) #7, !dbg !6060
  %tobool4 = icmp eq i8 %call3, 0, !dbg !6060
  %call. = select i1 %tobool4, %union.tree_node* null, %union.tree_node* %call, !dbg !6053
  br label %cleanup, !dbg !6053

cleanup:                                          ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ null, %entry ], [ %call., %if.end ], !dbg !6053
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #8, !dbg !6062
  ret %union.tree_node* %retval.0, !dbg !6062
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6063 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6065, metadata !DIExpression()), !dbg !6066
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !6067
  %cmp = icmp ugt i32 %call, 5, !dbg !6068
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6069

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #7, !dbg !6070
  %cmp2 = icmp ult i32 %call1, 10, !dbg !6071
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !6072
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6073 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6075, metadata !DIExpression()), !dbg !6076
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #7, !dbg !6077
  %tobool = icmp eq i8 %call, 0, !dbg !6077
  br i1 %tobool, label %return, label %if.end, !dbg !6079

if.end:                                           ; preds = %entry
  %vuse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !6080
  %0 = bitcast %struct.ssa_use_operand_d** %vuse to %union.tree_node**, !dbg !6080
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6080
  br label %return, !dbg !6081

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !6076
  ret %union.tree_node* %retval.0, !dbg !6082
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !6083 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6088, metadata !DIExpression()), !dbg !6091
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6089, metadata !DIExpression()), !dbg !6091
  call void @llvm.dbg.value(metadata i32 1, metadata !6090, metadata !DIExpression()), !dbg !6091
  tail call fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 1) #7, !dbg !6092
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !6093
  store i32 1, i32* %iter_type, align 4, !dbg !6094
  %call = tail call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #7, !dbg !6095
  ret %union.tree_node* %call, !dbg !6096
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !6097 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6103, metadata !DIExpression()), !dbg !6104
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !6105
  %0 = load i8, i8* %done, align 8, !dbg !6105
  ret i8 %0, !dbg !6106
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !6107 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6111, metadata !DIExpression()), !dbg !6113
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !6114
  %0 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6114
  %tobool = icmp eq %struct.use_optype_d* %0, null, !dbg !6116
  br i1 %tobool, label %if.end, label %if.then, !dbg !6117

if.then:                                          ; preds = %entry
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %0, i64 0, i32 1, !dbg !6118
  %call = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* nonnull %use_ptr) #7, !dbg !6118
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6112, metadata !DIExpression()), !dbg !6113
  %1 = bitcast %struct.use_optype_d** %uses to i64**, !dbg !6120
  %2 = load i64*, i64** %1, align 8, !dbg !6120
  %3 = load i64, i64* %2, align 8, !dbg !6121
  %4 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !6122
  store i64 %3, i64* %4, align 8, !dbg !6122
  br label %cleanup, !dbg !6123

if.end:                                           ; preds = %entry
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !6124
  %5 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !6124
  %tobool4 = icmp eq %struct.def_optype_d* %5, null, !dbg !6126
  br i1 %tobool4, label %if.end11, label %if.then5, !dbg !6127

if.then5:                                         ; preds = %if.end
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %5, i64 0, i32 1, !dbg !6128
  %6 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !6128
  %call7 = tail call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %6) #7, !dbg !6128
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !6112, metadata !DIExpression()), !dbg !6113
  %7 = bitcast %struct.def_optype_d** %defs to i64**, !dbg !6130
  %8 = load i64*, i64** %7, align 8, !dbg !6130
  %9 = load i64, i64* %8, align 8, !dbg !6131
  %10 = bitcast %struct.def_optype_d** %defs to i64*, !dbg !6132
  store i64 %9, i64* %10, align 8, !dbg !6132
  br label %cleanup, !dbg !6133

if.end11:                                         ; preds = %if.end
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !6134
  store i8 1, i8* %done, align 8, !dbg !6135
  br label %cleanup, !dbg !6136

cleanup:                                          ; preds = %if.end11, %if.then5, %if.then
  %retval.0 = phi %union.tree_node* [ %call, %if.then ], [ %call7, %if.then5 ], [ null, %if.end11 ], !dbg !6113
  ret %union.tree_node* %retval.0, !dbg !6137
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !6138 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6142, metadata !DIExpression()), !dbg !6145
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6143, metadata !DIExpression()), !dbg !6145
  call void @llvm.dbg.value(metadata i32 1, metadata !6144, metadata !DIExpression()), !dbg !6145
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !6146
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !6147
  br i1 true, label %land.lhs.true16, label %entry.if.end_crit_edge, !dbg !6148

entry.if.end_crit_edge:                           ; preds = %entry
  br label %if.end, !dbg !6148

land.lhs.true16:                                  ; preds = %entry
  br i1 true, label %if.end, label %land.lhs.true19, !dbg !6150

land.lhs.true19:                                  ; preds = %land.lhs.true16
  br i1 undef, label %land.lhs.true19.if.end_crit_edge, label %if.then, !dbg !6151

land.lhs.true19.if.end_crit_edge:                 ; preds = %land.lhs.true19
  br label %if.end, !dbg !6151

if.then:                                          ; preds = %land.lhs.true19
  br label %if.end, !dbg !6152

if.end:                                           ; preds = %land.lhs.true19.if.end_crit_edge, %entry.if.end_crit_edge, %land.lhs.true16, %if.then
  br i1 false, label %if.end.cond.end28_crit_edge, label %cond.true25, !dbg !6153

if.end.cond.end28_crit_edge:                      ; preds = %if.end
  br label %cond.end28, !dbg !6153

cond.true25:                                      ; preds = %if.end
  %call26 = tail call fastcc %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %stmt) #7, !dbg !6154
  br label %cond.end28, !dbg !6153

cond.end28:                                       ; preds = %if.end.cond.end28_crit_edge, %cond.true25
  %0 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ undef, %if.end.cond.end28_crit_edge ], !dbg !6153
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !6155
  store %struct.use_optype_d* %0, %struct.use_optype_d** %uses, align 8, !dbg !6156
  br i1 true, label %land.lhs.true32, label %cond.end28.if.end42_crit_edge, !dbg !6157

cond.end28.if.end42_crit_edge:                    ; preds = %cond.end28
  br label %if.end42, !dbg !6157

land.lhs.true32:                                  ; preds = %cond.end28
  %tobool34 = icmp eq %struct.use_optype_d* %0, null, !dbg !6159
  br i1 %tobool34, label %if.end42, label %land.lhs.true35, !dbg !6160

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %call36 = tail call fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %stmt) #7, !dbg !6161
  %cmp37 = icmp eq %union.tree_node* %call36, null, !dbg !6162
  br i1 %cmp37, label %if.end42, label %if.then38, !dbg !6163

if.then38:                                        ; preds = %land.lhs.true35
  %1 = bitcast %struct.use_optype_d** %uses to i64**, !dbg !6164
  %2 = load i64*, i64** %1, align 8, !dbg !6164
  %3 = load i64, i64* %2, align 8, !dbg !6165
  %4 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !6166
  store i64 %3, i64* %4, align 8, !dbg !6166
  br label %if.end42, !dbg !6167

if.end42:                                         ; preds = %cond.end28.if.end42_crit_edge, %land.lhs.true35, %land.lhs.true32, %if.then38
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !6168
  store i8 0, i8* %done, align 8, !dbg !6169
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !6170
  store i32 0, i32* %phi_i, align 8, !dbg !6171
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !6172
  store i32 0, i32* %num_phi, align 4, !dbg !6173
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !6174
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6175
  ret void, !dbg !6176
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6177 {
entry:
  unreachable, !dbg !6182
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6183 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6185, metadata !DIExpression()), !dbg !6186
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #7, !dbg !6187
  %tobool = icmp eq i8 %call, 0, !dbg !6187
  br i1 %tobool, label %return, label %if.end, !dbg !6189

if.end:                                           ; preds = %entry
  %vdef = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, !dbg !6190
  %0 = bitcast [1 x %struct.phi_arg_d]* %vdef to %union.tree_node**, !dbg !6190
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6190
  br label %return, !dbg !6191

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !6186
  ret %union.tree_node* %retval.0, !dbg !6192
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !6193 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !6197, metadata !DIExpression()), !dbg !6198
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #7, !dbg !6199
  %tobool = icmp eq i8 %call, 0, !dbg !6199
  br i1 %tobool, label %return, label %if.end, !dbg !6201

if.end:                                           ; preds = %entry
  %use_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !6202
  %0 = bitcast %union.tree_node** %use_ops to %struct.use_optype_d**, !dbg !6202
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %0, align 8, !dbg !6202
  br label %return, !dbg !6203

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %struct.use_optype_d* [ %1, %if.end ], [ null, %entry ], !dbg !6198
  ret %struct.use_optype_d* %retval.0, !dbg !6204
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) unnamed_addr #0 !dbg !6205 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %def, metadata !6210, metadata !DIExpression()), !dbg !6211
  %0 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !6212
  ret %union.tree_node* %0, !dbg !6213
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6214 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6216, metadata !DIExpression()), !dbg !6217
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !6218
  %cmp = icmp eq i32 %call, 6, !dbg !6219
  %conv1 = zext i1 %cmp to i8, !dbg !6218
  ret i8 %conv1, !dbg !6220
}

declare dso_local zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_assign_rhs_class(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6221 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6225, metadata !DIExpression()), !dbg !6226
  %call = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #7, !dbg !6227
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #7, !dbg !6228
  ret i32 %call1, !dbg !6229
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !6230 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6232, metadata !DIExpression()), !dbg !6237
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !6238
  call void @llvm.dbg.value(metadata i32 %call, metadata !6233, metadata !DIExpression()), !dbg !6237
  switch i32 %call, label %if.else14 [
    i32 8, label %if.then3
    i32 6, label %if.else
    i32 1, label %if.then13
  ], !dbg !6239

if.then3:                                         ; preds = %entry
  %call4 = tail call fastcc %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %stmt) #7, !dbg !6240
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !6234, metadata !DIExpression()), !dbg !6242
  br label %cleanup, !dbg !6243

if.else:                                          ; preds = %entry
  %call5 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6244
  %cond = icmp eq i32 %call5, 66, !dbg !6245
  br i1 %cond, label %sw.bb, label %sw.default, !dbg !6245

sw.bb:                                            ; preds = %if.else
  %call6 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6246
  %type7 = getelementptr inbounds %union.tree_node, %union.tree_node* %call6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6246
  %0 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !6246
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !6234, metadata !DIExpression()), !dbg !6242
  br label %cleanup, !dbg !6248

sw.default:                                       ; preds = %if.else
  %call8 = tail call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %stmt) #6, !dbg !6249
  %type10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6249
  %1 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !6249
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !6234, metadata !DIExpression()), !dbg !6242
  br label %cleanup, !dbg !6250

if.then13:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6251
  br label %cleanup, !dbg !6253

if.else14:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !6254
  br label %cleanup, !dbg !6255

cleanup:                                          ; preds = %if.then3, %sw.default, %sw.bb, %if.else14, %if.then13
  %retval.0 = phi %union.tree_node* [ %2, %if.then13 ], [ %3, %if.else14 ], [ %call4, %if.then3 ], [ %1, %sw.default ], [ %0, %sw.bb ], !dbg !6256
  ret %union.tree_node* %retval.0, !dbg !6257
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6258 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6260, metadata !DIExpression()), !dbg !6263
  %call = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #7, !dbg !6264
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6261, metadata !DIExpression()), !dbg !6263
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6265
  %0 = bitcast %union.tree_node** %type1 to %struct.tree_common**, !dbg !6265
  %1 = load %struct.tree_common*, %struct.tree_common** %0, align 8, !dbg !6265
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1, i64 0, i32 2, !dbg !6266
  %2 = bitcast %union.tree_node** %type3 to %struct.tree_common**, !dbg !6266
  %3 = load %struct.tree_common*, %struct.tree_common** %2, align 8, !dbg !6266
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3, i64 0, i32 2, !dbg !6267
  %4 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !6267
  ret %union.tree_node* %4, !dbg !6268
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6269 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6271, metadata !DIExpression()), !dbg !6272
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #7, !dbg !6273
  ret %union.tree_node* %call, !dbg !6274
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) local_unnamed_addr #2

declare dso_local i8* @ggc_alloc_stat(i64) local_unnamed_addr #2

declare dso_local { i64, i64 } @double_int_add(i64, i64, i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @infer_loop_bounds_from_array(%struct.loop* %loop, %union.gimple_statement_d* %stmt, i8 zeroext %reliable) unnamed_addr #5 !dbg !6275 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !6279, metadata !DIExpression()), !dbg !6292
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6280, metadata !DIExpression()), !dbg !6292
  call void @llvm.dbg.value(metadata i8 %reliable, metadata !6281, metadata !DIExpression()), !dbg !6292
  %call = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %stmt) #7, !dbg !6293
  %tobool = icmp eq i8 %call, 0, !dbg !6293
  br i1 %tobool, label %if.else, label %if.then, !dbg !6294

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !6295
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !6282, metadata !DIExpression()), !dbg !6296
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6297
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !6285, metadata !DIExpression()), !dbg !6296
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6298
  %bf.load = load i64, i64* %0, align 8, !dbg !6298
  %bf.cast = and i64 %bf.load, 65535, !dbg !6298
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !6298
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6298
  %cmp = icmp eq i32 %1, 4, !dbg !6298
  br i1 %cmp, label %if.then3, label %if.end, !dbg !6300

if.then3:                                         ; preds = %if.then
  tail call fastcc void @infer_loop_bounds_from_ref(%struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node* %call1, i8 zeroext %reliable) #7, !dbg !6301
  br label %if.end, !dbg !6301

if.end:                                           ; preds = %if.then3, %if.then
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6302
  %bf.load5 = load i64, i64* %2, align 8, !dbg !6302
  %bf.cast7 = and i64 %bf.load5, 65535, !dbg !6302
  %arrayidx9 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast7, !dbg !6302
  %3 = load i32, i32* %arrayidx9, align 4, !dbg !6302
  %cmp10 = icmp eq i32 %3, 4, !dbg !6302
  br i1 %cmp10, label %if.then11, label %if.end40, !dbg !6304

if.then11:                                        ; preds = %if.end
  tail call fastcc void @infer_loop_bounds_from_ref(%struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node* %call2, i8 zeroext %reliable) #7, !dbg !6305
  br label %if.end40, !dbg !6305

if.else:                                          ; preds = %entry
  %call13 = tail call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %stmt) #7, !dbg !6306
  %tobool14 = icmp eq i8 %call13, 0, !dbg !6306
  br i1 %tobool14, label %if.end40, label %if.then15, !dbg !6307

if.then15:                                        ; preds = %if.else
  %call16 = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #7, !dbg !6308
  call void @llvm.dbg.value(metadata i32 %call16, metadata !6291, metadata !DIExpression()), !dbg !6309
  %call17 = tail call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !6310
  call void @llvm.dbg.value(metadata %union.tree_node* %call17, metadata !6289, metadata !DIExpression()), !dbg !6309
  %tobool18 = icmp eq %union.tree_node* %call17, null, !dbg !6311
  br i1 %tobool18, label %if.end27, label %land.lhs.true, !dbg !6313

land.lhs.true:                                    ; preds = %if.then15
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %call17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6314
  %bf.load20 = load i64, i64* %4, align 8, !dbg !6314
  %bf.cast22 = and i64 %bf.load20, 65535, !dbg !6314
  %arrayidx24 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast22, !dbg !6314
  %5 = load i32, i32* %arrayidx24, align 4, !dbg !6314
  %cmp25 = icmp eq i32 %5, 4, !dbg !6314
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !6315

if.then26:                                        ; preds = %land.lhs.true
  tail call fastcc void @infer_loop_bounds_from_ref(%struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call17, i8 zeroext %reliable) #7, !dbg !6316
  br label %if.end27, !dbg !6316

if.end27:                                         ; preds = %if.then15, %if.then26, %land.lhs.true
  call void @llvm.dbg.value(metadata i32 0, metadata !6290, metadata !DIExpression()), !dbg !6309
  br label %for.cond, !dbg !6317

for.cond:                                         ; preds = %for.inc, %if.end27
  %i.0 = phi i32 [ 0, %if.end27 ], [ %inc, %for.inc ], !dbg !6319
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !6290, metadata !DIExpression()), !dbg !6309
  %exitcond = icmp eq i32 %i.0, %call16, !dbg !6320
  br i1 %exitcond, label %if.end40.loopexit, label %for.body, !dbg !6322

for.body:                                         ; preds = %for.cond
  %call29 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %stmt, i32 %i.0) #7, !dbg !6323
  call void @llvm.dbg.value(metadata %union.tree_node* %call29, metadata !6286, metadata !DIExpression()), !dbg !6309
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call29, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6325
  %bf.load31 = load i64, i64* %6, align 8, !dbg !6325
  %bf.cast33 = and i64 %bf.load31, 65535, !dbg !6325
  %arrayidx35 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast33, !dbg !6325
  %7 = load i32, i32* %arrayidx35, align 4, !dbg !6325
  %cmp36 = icmp eq i32 %7, 4, !dbg !6325
  br i1 %cmp36, label %if.then37, label %for.inc, !dbg !6327

if.then37:                                        ; preds = %for.body
  tail call fastcc void @infer_loop_bounds_from_ref(%struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node* %call29, i8 zeroext %reliable) #7, !dbg !6328
  br label %for.inc, !dbg !6328

for.inc:                                          ; preds = %for.body, %if.then37
  %inc = add i32 %i.0, 1, !dbg !6329
  call void @llvm.dbg.value(metadata i32 %inc, metadata !6290, metadata !DIExpression()), !dbg !6309
  br label %for.cond, !dbg !6330, !llvm.loop !6331

if.end40.loopexit:                                ; preds = %for.cond
  br label %if.end40, !dbg !6333

if.end40:                                         ; preds = %if.end40.loopexit, %if.else, %if.end, %if.then11
  ret void, !dbg !6333
}

; Function Attrs: nounwind uwtable
define internal fastcc void @infer_loop_bounds_from_signedness(%struct.loop* %loop, %union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !6334 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !6338, metadata !DIExpression()), !dbg !6347
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6339, metadata !DIExpression()), !dbg !6347
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #7, !dbg !6348
  %cmp = icmp eq i32 %call, 6, !dbg !6350
  br i1 %cmp, label %if.end, label %cleanup.cont, !dbg !6351

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !6352
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !6340, metadata !DIExpression()), !dbg !6347
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6353
  %bf.load = load i64, i64* %0, align 8, !dbg !6353
  %bf.cast4 = and i64 %bf.load, 65535, !dbg !6355
  %cmp3 = icmp eq i64 %bf.cast4, 141, !dbg !6355
  br i1 %cmp3, label %if.end5, label %cleanup.cont, !dbg !6356

if.end5:                                          ; preds = %if.end
  %type6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6357
  %1 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !6357
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !6344, metadata !DIExpression()), !dbg !6347
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6358
  %bf.load8 = load i64, i64* %2, align 8, !dbg !6358
  %bf.cast105 = and i64 %bf.load8, 65535, !dbg !6358
  %cmp11 = icmp eq i64 %bf.cast105, 6, !dbg !6358
  br i1 %cmp11, label %lor.lhs.false23, label %lor.lhs.false, !dbg !6358

lor.lhs.false:                                    ; preds = %if.end5
  %cmp16 = icmp eq i64 %bf.cast105, 7, !dbg !6358
  br i1 %cmp16, label %lor.lhs.false23, label %lor.lhs.false17, !dbg !6358

lor.lhs.false17:                                  ; preds = %lor.lhs.false
  %cmp22 = icmp eq i64 %bf.cast105, 8, !dbg !6358
  br i1 %cmp22, label %lor.lhs.false23, label %cleanup.cont, !dbg !6360

lor.lhs.false23:                                  ; preds = %lor.lhs.false17, %lor.lhs.false, %if.end5
  %bf.cast278 = and i64 %bf.load8, 2097152, !dbg !6361
  %tobool = icmp eq i64 %bf.cast278, 0, !dbg !6361
  %3 = load i32, i32* @flag_wrapv, align 4, !dbg !6361
  %4 = load i32, i32* @flag_trapv, align 4, !dbg !6361
  %5 = or i32 %3, %4, !dbg !6361
  %6 = icmp eq i32 %5, 0, !dbg !6361
  %or.cond1.not = and i1 %tobool, %6, !dbg !6361
  %7 = load i32, i32* @flag_strict_overflow, align 4, !dbg !6361
  %tobool32 = icmp ne i32 %7, 0, !dbg !6361
  %or.cond2 = and i1 %or.cond1.not, %tobool32, !dbg !6361
  br i1 %or.cond2, label %if.end34, label %cleanup.cont, !dbg !6361

if.end34:                                         ; preds = %lor.lhs.false23
  %call35 = tail call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %loop, %union.tree_node* %call1) #6, !dbg !6362
  %call36 = tail call fastcc %union.tree_node* @instantiate_parameters(%struct.loop* %loop, %union.tree_node* %call35) #7, !dbg !6363
  call void @llvm.dbg.value(metadata %union.tree_node* %call36, metadata !6343, metadata !DIExpression()), !dbg !6347
  %call37 = tail call zeroext i8 @chrec_contains_undetermined(%union.tree_node* %call36) #6, !dbg !6364
  %tobool38 = icmp eq i8 %call37, 0, !dbg !6364
  br i1 %tobool38, label %if.end40, label %cleanup.cont, !dbg !6366

if.end40:                                         ; preds = %if.end34
  %num = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 0, !dbg !6367
  %8 = load i32, i32* %num, align 8, !dbg !6367
  %call41 = tail call %union.tree_node* @initial_condition_in_loop_num(%union.tree_node* %call36, i32 %8) #6, !dbg !6368
  call void @llvm.dbg.value(metadata %union.tree_node* %call41, metadata !6341, metadata !DIExpression()), !dbg !6347
  %9 = load i32, i32* %num, align 8, !dbg !6369
  %call43 = tail call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %call36, i32 %9) #6, !dbg !6370
  call void @llvm.dbg.value(metadata %union.tree_node* %call43, metadata !6342, metadata !DIExpression()), !dbg !6347
  %tobool44 = icmp ne %union.tree_node* %call41, null, !dbg !6371
  %tobool46 = icmp ne %union.tree_node* %call43, null, !dbg !6373
  %or.cond3 = and i1 %tobool44, %tobool46, !dbg !6374
  br i1 %or.cond3, label %lor.lhs.false47, label %cleanup.cont, !dbg !6374

lor.lhs.false47:                                  ; preds = %if.end40
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6375
  %bf.load49 = load i64, i64* %10, align 8, !dbg !6375
  %bf.cast519 = and i64 %bf.load49, 65535, !dbg !6376
  %cmp52 = icmp eq i64 %bf.cast519, 23, !dbg !6376
  br i1 %cmp52, label %lor.lhs.false53, label %cleanup.cont, !dbg !6377

lor.lhs.false53:                                  ; preds = %lor.lhs.false47
  %call54 = tail call zeroext i8 @tree_contains_chrecs(%union.tree_node* nonnull %call41, i32* null) #6, !dbg !6378
  %tobool55 = icmp eq i8 %call54, 0, !dbg !6378
  br i1 %tobool55, label %lor.lhs.false56, label %cleanup.cont, !dbg !6379

lor.lhs.false56:                                  ; preds = %lor.lhs.false53
  %11 = load i32, i32* %num, align 8, !dbg !6380
  %call58 = tail call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* nonnull %call41, i32 %11) #6, !dbg !6381
  %tobool60 = icmp eq i8 %call58, 0, !dbg !6381
  br i1 %tobool60, label %if.end62, label %cleanup.cont, !dbg !6382

if.end62:                                         ; preds = %lor.lhs.false56
  %call63 = tail call %union.tree_node* @lower_bound_in_type(%union.tree_node* %1, %union.tree_node* %1) #6, !dbg !6383
  call void @llvm.dbg.value(metadata %union.tree_node* %call63, metadata !6345, metadata !DIExpression()), !dbg !6347
  %call64 = tail call %union.tree_node* @upper_bound_in_type(%union.tree_node* %1, %union.tree_node* %1) #6, !dbg !6384
  call void @llvm.dbg.value(metadata %union.tree_node* %call64, metadata !6346, metadata !DIExpression()), !dbg !6347
  tail call fastcc void @record_nonwrapping_iv(%struct.loop* %loop, %union.tree_node* nonnull %call41, %union.tree_node* nonnull %call43, %union.gimple_statement_d* %stmt, %union.tree_node* %call63, %union.tree_node* %call64, i8 zeroext 0, i8 zeroext 1) #7, !dbg !6385
  br label %cleanup.cont, !dbg !6386

cleanup.cont:                                     ; preds = %lor.lhs.false56, %lor.lhs.false53, %lor.lhs.false47, %if.end34, %if.end, %entry, %if.end62, %lor.lhs.false23, %lor.lhs.false17, %if.end40
  ret void, !dbg !6386
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6387 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6389, metadata !DIExpression()), !dbg !6390
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !6391
  ret %union.tree_node* %call, !dbg !6392
}

; Function Attrs: nounwind uwtable
define internal fastcc void @infer_loop_bounds_from_ref(%struct.loop* %loop, %union.gimple_statement_d* %stmt, %union.tree_node* %ref, i8 zeroext %reliable) unnamed_addr #5 !dbg !6393 {
entry:
  %ref.addr = alloca %union.tree_node*, align 8
  %data = alloca %struct.ilb_data, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !6397, metadata !DIExpression()), !dbg !6402
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6398, metadata !DIExpression()), !dbg !6402
  call void @llvm.dbg.value(metadata %union.tree_node* %ref, metadata !6399, metadata !DIExpression()), !dbg !6402
  store %union.tree_node* %ref, %union.tree_node** %ref.addr, align 8
  call void @llvm.dbg.value(metadata i8 %reliable, metadata !6400, metadata !DIExpression()), !dbg !6402
  %0 = bitcast %struct.ilb_data* %data to i8*, !dbg !6403
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #8, !dbg !6403
  %loop1 = getelementptr inbounds %struct.ilb_data, %struct.ilb_data* %data, i64 0, i32 0, !dbg !6404
  store %struct.loop* %loop, %struct.loop** %loop1, align 8, !dbg !6405
  %stmt2 = getelementptr inbounds %struct.ilb_data, %struct.ilb_data* %data, i64 0, i32 1, !dbg !6406
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt2, align 8, !dbg !6407
  %reliable3 = getelementptr inbounds %struct.ilb_data, %struct.ilb_data* %data, i64 0, i32 2, !dbg !6408
  store i8 %reliable, i8* %reliable3, align 8, !dbg !6409
  call void @llvm.dbg.value(metadata %union.tree_node** %ref.addr, metadata !6399, metadata !DIExpression(DW_OP_deref)), !dbg !6402
  %call = call zeroext i8 @for_each_index(%union.tree_node** nonnull %ref.addr, i8 (%union.tree_node*, %union.tree_node**, i8*)* nonnull @idx_infer_loop_bounds, i8* nonnull %0) #6, !dbg !6410
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #8, !dbg !6411
  ret void, !dbg !6411
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6412 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6414, metadata !DIExpression()), !dbg !6415
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #7, !dbg !6416
  %cmp = icmp eq i32 %call, 8, !dbg !6417
  %conv1 = zext i1 %cmp to i8, !dbg !6416
  ret i8 %conv1, !dbg !6418
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6419 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6421, metadata !DIExpression()), !dbg !6423
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #7, !dbg !6424
  call void @llvm.dbg.value(metadata i32 %call, metadata !6422, metadata !DIExpression()), !dbg !6423
  %sub = add i32 %call, -3, !dbg !6425
  ret i32 %sub, !dbg !6426
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6427 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6429, metadata !DIExpression()), !dbg !6430
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #7, !dbg !6431
  ret %union.tree_node* %call, !dbg !6432
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !6433 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6435, metadata !DIExpression()), !dbg !6437
  call void @llvm.dbg.value(metadata i32 %index, metadata !6436, metadata !DIExpression()), !dbg !6437
  %add = add i32 %index, 3, !dbg !6438
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %add) #7, !dbg !6439
  ret %union.tree_node* %call, !dbg !6440
}

declare dso_local zeroext i8 @for_each_index(%union.tree_node**, i8 (%union.tree_node*, %union.tree_node**, i8*)*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal zeroext i8 @idx_infer_loop_bounds(%union.tree_node* %base, %union.tree_node** %idx, i8* %dta) #5 !dbg !6441 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %base, metadata !6445, metadata !DIExpression()), !dbg !6460
  call void @llvm.dbg.value(metadata %union.tree_node** %idx, metadata !6446, metadata !DIExpression()), !dbg !6460
  call void @llvm.dbg.value(metadata i8* %dta, metadata !6447, metadata !DIExpression()), !dbg !6460
  call void @llvm.dbg.value(metadata i8* %dta, metadata !6448, metadata !DIExpression()), !dbg !6460
  call void @llvm.dbg.value(metadata i8 undef, metadata !6457, metadata !DIExpression()), !dbg !6460
  call void @llvm.dbg.value(metadata i8 0, metadata !6458, metadata !DIExpression()), !dbg !6460
  %loop1 = bitcast i8* %dta to %struct.loop**, !dbg !6461
  %0 = load %struct.loop*, %struct.loop** %loop1, align 8, !dbg !6461
  call void @llvm.dbg.value(metadata %struct.loop* %0, metadata !6459, metadata !DIExpression()), !dbg !6460
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %base, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6462
  %bf.load = load i64, i64* %1, align 8, !dbg !6462
  %bf.cast3 = and i64 %bf.load, 65535, !dbg !6464
  %cmp = icmp eq i64 %bf.cast3, 45, !dbg !6464
  br i1 %cmp, label %if.end, label %cleanup, !dbg !6465

if.end:                                           ; preds = %entry
  %2 = getelementptr inbounds i8, i8* %dta, i64 16, !dbg !6466
  %3 = load i8, i8* %2, align 8, !dbg !6466
  call void @llvm.dbg.value(metadata i8 %3, metadata !6457, metadata !DIExpression()), !dbg !6460
  %call = tail call zeroext i8 @array_at_struct_end_p(%union.tree_node* %base) #7, !dbg !6467
  %tobool = icmp ne i8 %call, 0, !dbg !6467
  %spec.select = select i1 %tobool, i8 0, i8 %3, !dbg !6469
  call void @llvm.dbg.value(metadata i1 %tobool, metadata !6458, metadata !DIExpression()), !dbg !6460
  call void @llvm.dbg.value(metadata i8 %spec.select, metadata !6457, metadata !DIExpression()), !dbg !6460
  %4 = load %union.tree_node*, %union.tree_node** %idx, align 8, !dbg !6470
  %call5 = tail call %union.tree_node* @analyze_scalar_evolution(%struct.loop* %0, %union.tree_node* %4) #6, !dbg !6471
  %call6 = tail call fastcc %union.tree_node* @instantiate_parameters(%struct.loop* %0, %union.tree_node* %call5) #7, !dbg !6472
  call void @llvm.dbg.value(metadata %union.tree_node* %call6, metadata !6449, metadata !DIExpression()), !dbg !6460
  %call7 = tail call %union.tree_node* @initial_condition(%union.tree_node* %call6) #6, !dbg !6473
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !6450, metadata !DIExpression()), !dbg !6460
  %num = getelementptr inbounds %struct.loop, %struct.loop* %0, i64 0, i32 0, !dbg !6474
  %5 = load i32, i32* %num, align 8, !dbg !6474
  %call8 = tail call %union.tree_node* @evolution_part_in_loop_num(%union.tree_node* %call6, i32 %5) #6, !dbg !6475
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !6451, metadata !DIExpression()), !dbg !6460
  %tobool9 = icmp ne %union.tree_node* %call7, null, !dbg !6476
  %tobool10 = icmp ne %union.tree_node* %call8, null, !dbg !6478
  %or.cond = and i1 %tobool9, %tobool10, !dbg !6479
  br i1 %or.cond, label %lor.lhs.false11, label %cleanup, !dbg !6479

lor.lhs.false11:                                  ; preds = %if.end
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6480
  %bf.load13 = load i64, i64* %6, align 8, !dbg !6480
  %bf.cast154 = and i64 %bf.load13, 65535, !dbg !6481
  %cmp16 = icmp eq i64 %bf.cast154, 23, !dbg !6481
  br i1 %cmp16, label %lor.lhs.false17, label %cleanup, !dbg !6482

lor.lhs.false17:                                  ; preds = %lor.lhs.false11
  %call18 = tail call i32 @integer_zerop(%union.tree_node* nonnull %call8) #6, !dbg !6483
  %tobool19 = icmp eq i32 %call18, 0, !dbg !6483
  br i1 %tobool19, label %lor.lhs.false20, label %cleanup, !dbg !6484

lor.lhs.false20:                                  ; preds = %lor.lhs.false17
  %call21 = tail call zeroext i8 @tree_contains_chrecs(%union.tree_node* nonnull %call7, i32* null) #6, !dbg !6485
  %tobool22 = icmp eq i8 %call21, 0, !dbg !6485
  br i1 %tobool22, label %lor.lhs.false23, label %cleanup, !dbg !6486

lor.lhs.false23:                                  ; preds = %lor.lhs.false20
  %7 = load i32, i32* %num, align 8, !dbg !6487
  %call25 = tail call zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node* nonnull %call7, i32 %7) #6, !dbg !6488
  %tobool27 = icmp eq i8 %call25, 0, !dbg !6488
  br i1 %tobool27, label %if.end29, label %cleanup, !dbg !6489

if.end29:                                         ; preds = %lor.lhs.false23
  %call30 = tail call %union.tree_node* @array_ref_low_bound(%union.tree_node* %base) #6, !dbg !6490
  call void @llvm.dbg.value(metadata %union.tree_node* %call30, metadata !6452, metadata !DIExpression()), !dbg !6460
  %call31 = tail call %union.tree_node* @array_ref_up_bound(%union.tree_node* %base) #6, !dbg !6491
  call void @llvm.dbg.value(metadata %union.tree_node* %call31, metadata !6453, metadata !DIExpression()), !dbg !6460
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %call30, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6492
  %bf.load33 = load i64, i64* %8, align 8, !dbg !6492
  %bf.cast355 = and i64 %bf.load33, 65535, !dbg !6494
  %cmp36 = icmp eq i64 %bf.cast355, 23, !dbg !6494
  %tobool39 = icmp ne %union.tree_node* %call31, null, !dbg !6495
  %or.cond2 = and i1 %cmp36, %tobool39, !dbg !6496
  br i1 %or.cond2, label %lor.lhs.false40, label %cleanup, !dbg !6496

lor.lhs.false40:                                  ; preds = %if.end29
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %call31, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6497
  %bf.load42 = load i64, i64* %9, align 8, !dbg !6497
  %bf.cast446 = and i64 %bf.load42, 65535, !dbg !6498
  %cmp45 = icmp eq i64 %bf.cast446, 23, !dbg !6498
  br i1 %cmp45, label %if.end48, label %cleanup, !dbg !6499

if.end48:                                         ; preds = %lor.lhs.false40
  %call49 = tail call i32 @tree_int_cst_sign_bit(%union.tree_node* nonnull %call8) #6, !dbg !6500
  %conv50 = trunc i32 %call49 to i8, !dbg !6500
  call void @llvm.dbg.value(metadata i8 %conv50, metadata !6456, metadata !DIExpression()), !dbg !6460
  %type51 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6501
  %10 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !6501
  call void @llvm.dbg.value(metadata %union.tree_node* %10, metadata !6454, metadata !DIExpression()), !dbg !6460
  br i1 %tobool, label %land.lhs.true, label %if.end57, !dbg !6502

land.lhs.true:                                    ; preds = %if.end48
  %call54 = tail call i32 @operand_equal_p(%union.tree_node* %call30, %union.tree_node* nonnull %call31, i32 0) #6, !dbg !6504
  %tobool55 = icmp eq i32 %call54, 0, !dbg !6504
  br i1 %tobool55, label %if.end57, label %cleanup, !dbg !6505

if.end57:                                         ; preds = %land.lhs.true, %if.end48
  %call58 = tail call i32 @int_fits_type_p(%union.tree_node* nonnull %call31, %union.tree_node* %10) #6, !dbg !6506
  %tobool59 = icmp eq i32 %call58, 0, !dbg !6506
  br i1 %tobool59, label %cleanup, label %lor.lhs.false60, !dbg !6508

lor.lhs.false60:                                  ; preds = %if.end57
  %call61 = tail call i32 @int_fits_type_p(%union.tree_node* %call30, %union.tree_node* %10) #6, !dbg !6509
  %tobool62 = icmp eq i32 %call61, 0, !dbg !6509
  br i1 %tobool62, label %cleanup, label %if.end64, !dbg !6510

if.end64:                                         ; preds = %lor.lhs.false60
  %call65 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %10, %union.tree_node* %call30) #6, !dbg !6511
  call void @llvm.dbg.value(metadata %union.tree_node* %call65, metadata !6452, metadata !DIExpression()), !dbg !6460
  %call66 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %10, %union.tree_node* nonnull %call31) #6, !dbg !6512
  call void @llvm.dbg.value(metadata %union.tree_node* %call66, metadata !6453, metadata !DIExpression()), !dbg !6460
  %tobool67 = icmp eq i8 %conv50, 0, !dbg !6513
  br i1 %tobool67, label %if.else, label %if.then68, !dbg !6515

if.then68:                                        ; preds = %if.end64
  %call69 = tail call %union.tree_node* @fold_binary_loc(i32 0, i32 63, %union.tree_node* %10, %union.tree_node* %call65, %union.tree_node* nonnull %call8) #6, !dbg !6516
  call void @llvm.dbg.value(metadata %union.tree_node* %call69, metadata !6455, metadata !DIExpression()), !dbg !6460
  br label %if.end71, !dbg !6517

if.else:                                          ; preds = %if.end64
  %call70 = tail call %union.tree_node* @fold_binary_loc(i32 0, i32 63, %union.tree_node* %10, %union.tree_node* %call66, %union.tree_node* nonnull %call8) #6, !dbg !6518
  call void @llvm.dbg.value(metadata %union.tree_node* %call70, metadata !6455, metadata !DIExpression()), !dbg !6460
  br label %if.end71

if.end71:                                         ; preds = %if.else, %if.then68
  %next.0 = phi %union.tree_node* [ %call69, %if.then68 ], [ %call70, %if.else ], !dbg !6519
  call void @llvm.dbg.value(metadata %union.tree_node* %next.0, metadata !6455, metadata !DIExpression()), !dbg !6460
  %call72 = tail call i32 @tree_int_cst_compare(%union.tree_node* %call65, %union.tree_node* %next.0) #6, !dbg !6520
  %cmp73 = icmp slt i32 %call72, 1, !dbg !6522
  br i1 %cmp73, label %land.lhs.true75, label %if.end80, !dbg !6523

land.lhs.true75:                                  ; preds = %if.end71
  %call76 = tail call i32 @tree_int_cst_compare(%union.tree_node* %next.0, %union.tree_node* %call66) #6, !dbg !6524
  %cmp77 = icmp slt i32 %call76, 1, !dbg !6525
  br i1 %cmp77, label %cleanup, label %if.end80, !dbg !6526

if.end80:                                         ; preds = %land.lhs.true75, %if.end71
  %stmt = getelementptr inbounds i8, i8* %dta, i64 8, !dbg !6527
  %11 = bitcast i8* %stmt to %union.gimple_statement_d**, !dbg !6527
  %12 = load %union.gimple_statement_d*, %union.gimple_statement_d** %11, align 8, !dbg !6527
  tail call fastcc void @record_nonwrapping_iv(%struct.loop* %0, %union.tree_node* nonnull %call7, %union.tree_node* nonnull %call8, %union.gimple_statement_d* %12, %union.tree_node* %call65, %union.tree_node* %call66, i8 zeroext 1, i8 zeroext %spec.select) #7, !dbg !6528
  br label %cleanup, !dbg !6529

cleanup:                                          ; preds = %land.lhs.true, %lor.lhs.false60, %if.end57, %lor.lhs.false40, %lor.lhs.false23, %lor.lhs.false20, %lor.lhs.false17, %lor.lhs.false11, %entry, %land.lhs.true75, %if.end29, %if.end, %if.end80
  ret i8 1, !dbg !6530
}

declare dso_local %union.tree_node* @analyze_scalar_evolution(%struct.loop*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @initial_condition(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @evolution_part_in_loop_num(%union.tree_node*, i32) local_unnamed_addr #2

declare dso_local zeroext i8 @tree_contains_chrecs(%union.tree_node*, i32*) local_unnamed_addr #2

declare dso_local zeroext i8 @chrec_contains_symbols_defined_in_loop(%union.tree_node*, i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @array_ref_low_bound(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @array_ref_up_bound(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @int_fits_type_p(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @tree_int_cst_compare(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @record_nonwrapping_iv(%struct.loop* %loop, %union.tree_node* %base, %union.tree_node* %step, %union.gimple_statement_d* %stmt, %union.tree_node* %low, %union.tree_node* %high, i8 zeroext %realistic, i8 zeroext %upper) unnamed_addr #5 !dbg !6531 {
entry:
  %max = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !6535, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.value(metadata %union.tree_node* %base, metadata !6536, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.value(metadata %union.tree_node* %step, metadata !6537, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6538, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.value(metadata %union.tree_node* %low, metadata !6539, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.value(metadata %union.tree_node* %high, metadata !6540, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.value(metadata i8 %realistic, metadata !6541, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.value(metadata i8 %upper, metadata !6542, metadata !DIExpression()), !dbg !6549
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %base, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6550
  %0 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6550
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !6546, metadata !DIExpression()), !dbg !6549
  %1 = bitcast %struct.double_int* %max to i8*, !dbg !6551
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !6551
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %step, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6552
  %bf.load = load i64, i64* %2, align 8, !dbg !6552
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6554
  %cmp = icmp eq i64 %bf.cast1, 23, !dbg !6554
  br i1 %cmp, label %lor.lhs.false, label %cleanup, !dbg !6555

lor.lhs.false:                                    ; preds = %entry
  %call = tail call i32 @integer_zerop(%union.tree_node* %step) #6, !dbg !6556
  %tobool = icmp eq i32 %call, 0, !dbg !6556
  br i1 %tobool, label %if.end, label %cleanup, !dbg !6557

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6558
  %tobool3 = icmp eq %struct._IO_FILE* %3, null, !dbg !6558
  br i1 %tobool3, label %if.end13, label %land.lhs.true, !dbg !6560

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32, i32* @dump_flags, align 4, !dbg !6561
  %and = and i32 %4, 8, !dbg !6562
  %tobool4 = icmp eq i32 %and, 0, !dbg !6562
  br i1 %tobool4, label %if.end13, label %if.then5, !dbg !6563

if.then5:                                         ; preds = %land.lhs.true
  %call6 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %3, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0)) #6, !dbg !6564
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6566
  %6 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !6567
  tail call void @print_generic_expr(%struct._IO_FILE* %5, %union.tree_node* %6, i32 2) #6, !dbg !6568
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6569
  %call9 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.41, i64 0, i64 0)) #6, !dbg !6570
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6571
  tail call void @print_generic_expr(%struct._IO_FILE* %8, %union.tree_node* %base, i32 2) #6, !dbg !6572
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6573
  %call10 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42, i64 0, i64 0)) #6, !dbg !6574
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6575
  tail call void @print_generic_expr(%struct._IO_FILE* %10, %union.tree_node* %step, i32 2) #6, !dbg !6576
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6577
  %call11 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.43, i64 0, i64 0)) #6, !dbg !6578
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6579
  tail call void @print_gimple_stmt(%struct._IO_FILE* %12, %union.gimple_statement_d* %stmt, i32 0, i32 2) #6, !dbg !6580
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !6581
  %num = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 0, !dbg !6582
  %14 = load i32, i32* %num, align 8, !dbg !6582
  %call12 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.44, i64 0, i64 0), i32 %14) #6, !dbg !6583
  br label %if.end13, !dbg !6584

if.end13:                                         ; preds = %land.lhs.true, %if.end, %if.then5
  %call14 = tail call %union.tree_node* @unsigned_type_for(%union.tree_node* %0) #6, !dbg !6585
  call void @llvm.dbg.value(metadata %union.tree_node* %call14, metadata !6547, metadata !DIExpression()), !dbg !6549
  %call15 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call14, %union.tree_node* %base) #6, !dbg !6586
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !6536, metadata !DIExpression()), !dbg !6549
  %call16 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call14, %union.tree_node* %step) #6, !dbg !6587
  call void @llvm.dbg.value(metadata %union.tree_node* %call16, metadata !6537, metadata !DIExpression()), !dbg !6549
  %call17 = tail call i32 @tree_int_cst_sign_bit(%union.tree_node* %call16) #6, !dbg !6588
  %tobool18 = icmp eq i32 %call17, 0, !dbg !6588
  br i1 %tobool18, label %if.else, label %if.then19, !dbg !6590

if.then19:                                        ; preds = %if.end13
  %call20 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call14, %union.tree_node* %low) #6, !dbg !6591
  call void @llvm.dbg.value(metadata %union.tree_node* %call20, metadata !6544, metadata !DIExpression()), !dbg !6549
  %15 = getelementptr inbounds %union.tree_node, %union.tree_node* %call15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6593
  %bf.load22 = load i64, i64* %15, align 8, !dbg !6593
  %bf.cast243 = and i64 %bf.load22, 65535, !dbg !6595
  %cmp25 = icmp eq i64 %bf.cast243, 23, !dbg !6595
  br i1 %cmp25, label %if.end28, label %if.then26, !dbg !6596

if.then26:                                        ; preds = %if.then19
  %call27 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call14, %union.tree_node* %high) #6, !dbg !6597
  call void @llvm.dbg.value(metadata %union.tree_node* %call27, metadata !6536, metadata !DIExpression()), !dbg !6549
  br label %if.end28, !dbg !6598

if.end28:                                         ; preds = %if.then19, %if.then26
  %base.addr.0 = phi %union.tree_node* [ %call27, %if.then26 ], [ %call15, %if.then19 ], !dbg !6549
  call void @llvm.dbg.value(metadata %union.tree_node* %base.addr.0, metadata !6536, metadata !DIExpression()), !dbg !6549
  %call29 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %call14, %union.tree_node* %base.addr.0, %union.tree_node* %call20) #6, !dbg !6599
  call void @llvm.dbg.value(metadata %union.tree_node* %call29, metadata !6545, metadata !DIExpression()), !dbg !6549
  %call30 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %call14, %union.tree_node* %call16) #6, !dbg !6600
  call void @llvm.dbg.value(metadata %union.tree_node* %call30, metadata !6537, metadata !DIExpression()), !dbg !6549
  br label %if.end41, !dbg !6601

if.else:                                          ; preds = %if.end13
  %call31 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call14, %union.tree_node* %high) #6, !dbg !6602
  call void @llvm.dbg.value(metadata %union.tree_node* %call31, metadata !6544, metadata !DIExpression()), !dbg !6549
  %16 = getelementptr inbounds %union.tree_node, %union.tree_node* %call15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6604
  %bf.load33 = load i64, i64* %16, align 8, !dbg !6604
  %bf.cast352 = and i64 %bf.load33, 65535, !dbg !6606
  %cmp36 = icmp eq i64 %bf.cast352, 23, !dbg !6606
  br i1 %cmp36, label %if.end39, label %if.then37, !dbg !6607

if.then37:                                        ; preds = %if.else
  %call38 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %call14, %union.tree_node* %low) #6, !dbg !6608
  call void @llvm.dbg.value(metadata %union.tree_node* %call38, metadata !6536, metadata !DIExpression()), !dbg !6549
  br label %if.end39, !dbg !6609

if.end39:                                         ; preds = %if.else, %if.then37
  %base.addr.1 = phi %union.tree_node* [ %call38, %if.then37 ], [ %call15, %if.else ], !dbg !6549
  call void @llvm.dbg.value(metadata %union.tree_node* %base.addr.1, metadata !6536, metadata !DIExpression()), !dbg !6549
  %call40 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 64, %union.tree_node* %call14, %union.tree_node* %call31, %union.tree_node* %base.addr.1) #6, !dbg !6610
  call void @llvm.dbg.value(metadata %union.tree_node* %call40, metadata !6545, metadata !DIExpression()), !dbg !6549
  br label %if.end41

if.end41:                                         ; preds = %if.end39, %if.end28
  %delta.0 = phi %union.tree_node* [ %call29, %if.end28 ], [ %call40, %if.end39 ], !dbg !6611
  %step.addr.0 = phi %union.tree_node* [ %call30, %if.end28 ], [ %call16, %if.end39 ], !dbg !6549
  call void @llvm.dbg.value(metadata %union.tree_node* %step.addr.0, metadata !6537, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.value(metadata %union.tree_node* %delta.0, metadata !6545, metadata !DIExpression()), !dbg !6549
  %call42 = tail call %union.tree_node* @fold_build2_stat_loc(i32 0, i32 69, %union.tree_node* %call14, %union.tree_node* %delta.0, %union.tree_node* %step.addr.0) #6, !dbg !6612
  call void @llvm.dbg.value(metadata %union.tree_node* %call42, metadata !6543, metadata !DIExpression()), !dbg !6549
  %17 = bitcast %struct.double_int* %tmp to i8*, !dbg !6613
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #8, !dbg !6613
  %call43 = tail call fastcc { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %call42) #7, !dbg !6613
  %18 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 0, !dbg !6613
  %19 = extractvalue { i64, i64 } %call43, 0, !dbg !6613
  store i64 %19, i64* %18, align 8, !dbg !6613
  %20 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 1, !dbg !6613
  %21 = extractvalue { i64, i64 } %call43, 1, !dbg !6613
  store i64 %21, i64* %20, align 8, !dbg !6613
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %17, i64 16, i1 false), !dbg !6613
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #8, !dbg !6613
  %22 = getelementptr inbounds %struct.double_int, %struct.double_int* %max, i64 0, i32 0, !dbg !6614
  %23 = load i64, i64* %22, align 8, !dbg !6614
  %24 = getelementptr inbounds %struct.double_int, %struct.double_int* %max, i64 0, i32 1, !dbg !6614
  %25 = load i64, i64* %24, align 8, !dbg !6614
  tail call fastcc void @record_estimate(%struct.loop* %loop, %union.tree_node* %call42, i64 %23, i64 %25, %union.gimple_statement_d* %stmt, i8 zeroext 0, i8 zeroext %realistic, i8 zeroext %upper) #7, !dbg !6614
  br label %cleanup, !dbg !6615

cleanup:                                          ; preds = %lor.lhs.false, %entry, %if.end41
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !6615
  ret void, !dbg !6615
}

; Function Attrs: nounwind uwtable
define internal fastcc { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %val) unnamed_addr #5 !dbg !6616 {
entry:
  %code = alloca i32, align 4
  %op0 = alloca %union.tree_node*, align 8
  %op1 = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !6620, metadata !DIExpression()), !dbg !6624
  %0 = bitcast i32* %code to i8*, !dbg !6625
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #8, !dbg !6625
  %1 = bitcast %union.tree_node** %op0 to i8*, !dbg !6626
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #8, !dbg !6626
  %2 = bitcast %union.tree_node** %op1 to i8*, !dbg !6626
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #8, !dbg !6626
  call void @llvm.dbg.value(metadata i32* %code, metadata !6621, metadata !DIExpression(DW_OP_deref)), !dbg !6624
  call void @llvm.dbg.value(metadata %union.tree_node** %op0, metadata !6622, metadata !DIExpression(DW_OP_deref)), !dbg !6624
  call void @llvm.dbg.value(metadata %union.tree_node** %op1, metadata !6623, metadata !DIExpression(DW_OP_deref)), !dbg !6624
  call void @extract_ops_from_tree(%union.tree_node* %val, i32* nonnull %code, %union.tree_node** nonnull %op0, %union.tree_node** nonnull %op1) #6, !dbg !6627
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %val, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6628
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6628
  %4 = load %union.tree_node*, %union.tree_node** %op0, align 8, !dbg !6629
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !6622, metadata !DIExpression()), !dbg !6624
  %5 = load i32, i32* %code, align 4, !dbg !6630
  call void @llvm.dbg.value(metadata i32 %5, metadata !6621, metadata !DIExpression()), !dbg !6624
  %6 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !6631
  call void @llvm.dbg.value(metadata %union.tree_node* %6, metadata !6623, metadata !DIExpression()), !dbg !6624
  %call = call fastcc { i64, i64 } @derive_constant_upper_bound_ops(%union.tree_node* %3, %union.tree_node* %4, i32 %5, %union.tree_node* %6) #7, !dbg !6632
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #8, !dbg !6633
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #8, !dbg !6633
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #8, !dbg !6633
  ret { i64, i64 } %call, !dbg !6633
}

declare dso_local void @extract_ops_from_tree(%union.tree_node*, i32*, %union.tree_node**, %union.tree_node**) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc { i64, i64 } @derive_constant_upper_bound_ops(%union.tree_node* %type, %union.tree_node* %op0, i32 %code, %union.tree_node* %op1) unnamed_addr #5 !dbg !6634 {
entry:
  %retval = alloca %struct.double_int, align 8
  %bnd = alloca %struct.double_int, align 8
  %max = alloca %struct.double_int, align 8
  %mmax = alloca %struct.double_int, align 8
  %cst = alloca %struct.double_int, align 8
  %tmp = alloca %struct.double_int, align 8
  %tmp32 = alloca %struct.double_int, align 8
  %tmp49 = alloca %struct.double_int, align 8
  %tmp51 = alloca %struct.double_int, align 8
  %tmp58 = alloca %struct.double_int, align 8
  %tmp61 = alloca %struct.double_int, align 8
  %tmp66 = alloca %struct.double_int, align 8
  %tmp72 = alloca %struct.double_int, align 8
  %tmp101 = alloca %struct.double_int, align 8
  %tmp117 = alloca %struct.double_int, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !6638, metadata !DIExpression()), !dbg !6655
  call void @llvm.dbg.value(metadata %union.tree_node* %op0, metadata !6639, metadata !DIExpression()), !dbg !6655
  call void @llvm.dbg.value(metadata i32 %code, metadata !6640, metadata !DIExpression()), !dbg !6655
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !6641, metadata !DIExpression()), !dbg !6655
  %0 = bitcast %struct.double_int* %bnd to i8*, !dbg !6656
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %0) #8, !dbg !6656
  %1 = bitcast %struct.double_int* %max to i8*, !dbg !6656
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1) #8, !dbg !6656
  %2 = bitcast %struct.double_int* %mmax to i8*, !dbg !6656
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %2) #8, !dbg !6656
  %3 = bitcast %struct.double_int* %cst to i8*, !dbg !6656
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #8, !dbg !6656
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6657
  %bf.load = load i64, i64* %4, align 8, !dbg !6657
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6657
  %cmp = icmp eq i64 %bf.cast1, 6, !dbg !6657
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !6657

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 7, !dbg !6657
  br i1 %cmp5, label %if.then, label %lor.lhs.false6, !dbg !6657

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %cmp11 = icmp eq i64 %bf.cast1, 8, !dbg !6657
  br i1 %cmp11, label %if.then, label %if.else, !dbg !6659

if.then:                                          ; preds = %lor.lhs.false6, %lor.lhs.false, %entry
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6660
  %5 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !6660
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !6660
  call void @llvm.dbg.value(metadata %union.tree_node* %6, metadata !6643, metadata !DIExpression()), !dbg !6655
  br label %if.end, !dbg !6661

if.else:                                          ; preds = %lor.lhs.false6
  %call = tail call %union.tree_node* @upper_bound_in_type(%union.tree_node* %type, %union.tree_node* %type) #6, !dbg !6662
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6643, metadata !DIExpression()), !dbg !6655
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %maxt.0 = phi %union.tree_node* [ %6, %if.then ], [ %call, %if.else ], !dbg !6663
  call void @llvm.dbg.value(metadata %union.tree_node* %maxt.0, metadata !6643, metadata !DIExpression()), !dbg !6655
  %7 = bitcast %struct.double_int* %tmp to i8*, !dbg !6664
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #8, !dbg !6664
  %call13 = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %maxt.0) #6, !dbg !6664
  %8 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 0, !dbg !6664
  %9 = extractvalue { i64, i64 } %call13, 0, !dbg !6664
  store i64 %9, i64* %8, align 8, !dbg !6664
  %10 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp, i64 0, i32 1, !dbg !6664
  %11 = extractvalue { i64, i64 } %call13, 1, !dbg !6664
  store i64 %11, i64* %10, align 8, !dbg !6664
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %7, i64 16, i1 false), !dbg !6664
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #8, !dbg !6664
  switch i32 %code, label %sw.default [
    i32 23, label %sw.bb
    i32 116, label %sw.bb15
    i32 113, label %sw.bb15
    i32 63, label %sw.bb38
    i32 66, label %sw.bb38
    i32 64, label %sw.bb38
    i32 69, label %sw.bb106
    i32 76, label %sw.bb106
    i32 89, label %sw.bb122
    i32 141, label %sw.bb134
  ], !dbg !6665

sw.bb:                                            ; preds = %if.end
  %call14 = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %op0) #6, !dbg !6666
  %12 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 0, !dbg !6666
  %13 = extractvalue { i64, i64 } %call14, 0, !dbg !6666
  store i64 %13, i64* %12, align 8, !dbg !6666
  %14 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 1, !dbg !6666
  %15 = extractvalue { i64, i64 } %call14, 1, !dbg !6666
  store i64 %15, i64* %14, align 8, !dbg !6666
  br label %cleanup143, !dbg !6667

sw.bb15:                                          ; preds = %if.end, %if.end
  %type16 = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6668
  %16 = bitcast %union.tree_node** %type16 to i64**, !dbg !6668
  %17 = load i64*, i64** %16, align 8, !dbg !6668
  %bf.load18 = load i64, i64* %17, align 8, !dbg !6669
  %bf.cast2011 = and i64 %bf.load18, 2097152, !dbg !6669
  %tobool = icmp eq i64 %bf.cast2011, 0, !dbg !6669
  br i1 %tobool, label %land.lhs.true, label %if.end31, !dbg !6671

land.lhs.true:                                    ; preds = %sw.bb15
  %bf.load22 = load i64, i64* %4, align 8, !dbg !6672
  %bf.cast2512 = and i64 %bf.load22, 2097152, !dbg !6672
  %tobool26 = icmp eq i64 %bf.cast2512, 0, !dbg !6672
  br i1 %tobool26, label %if.end31, label %land.lhs.true27, !dbg !6673

land.lhs.true27:                                  ; preds = %land.lhs.true
  %call28 = tail call zeroext i8 @tree_expr_nonnegative_p(%union.tree_node* %op0) #6, !dbg !6674
  %tobool29 = icmp eq i8 %call28, 0, !dbg !6674
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !6675

if.then30:                                        ; preds = %land.lhs.true27
  %18 = bitcast %struct.double_int* %retval to i8*, !dbg !6676
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %18, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6676
  br label %cleanup143, !dbg !6678

if.end31:                                         ; preds = %land.lhs.true27, %land.lhs.true, %sw.bb15
  %19 = bitcast %struct.double_int* %tmp32 to i8*, !dbg !6679
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #8, !dbg !6679
  %call33 = tail call fastcc { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %op0) #7, !dbg !6679
  %20 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp32, i64 0, i32 0, !dbg !6679
  %21 = extractvalue { i64, i64 } %call33, 0, !dbg !6679
  store i64 %21, i64* %20, align 8, !dbg !6679
  %22 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp32, i64 0, i32 1, !dbg !6679
  %23 = extractvalue { i64, i64 } %call33, 1, !dbg !6679
  store i64 %23, i64* %22, align 8, !dbg !6679
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %19, i64 16, i1 false), !dbg !6679
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #8, !dbg !6679
  %24 = getelementptr inbounds %struct.double_int, %struct.double_int* %max, i64 0, i32 0, !dbg !6680
  %25 = load i64, i64* %24, align 8, !dbg !6680
  %26 = getelementptr inbounds %struct.double_int, %struct.double_int* %max, i64 0, i32 1, !dbg !6680
  %27 = load i64, i64* %26, align 8, !dbg !6680
  %28 = getelementptr inbounds %struct.double_int, %struct.double_int* %bnd, i64 0, i32 0, !dbg !6680
  %29 = load i64, i64* %28, align 8, !dbg !6680
  %30 = getelementptr inbounds %struct.double_int, %struct.double_int* %bnd, i64 0, i32 1, !dbg !6680
  %31 = load i64, i64* %30, align 8, !dbg !6680
  %call34 = tail call i32 @double_int_ucmp(i64 %25, i64 %27, i64 %29, i64 %31) #6, !dbg !6680
  %cmp35 = icmp slt i32 %call34, 0, !dbg !6682
  %32 = bitcast %struct.double_int* %retval to i8*, !dbg !6683
  br i1 %cmp35, label %if.then36, label %if.end37, !dbg !6684

if.then36:                                        ; preds = %if.end31
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %32, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6685
  br label %cleanup143, !dbg !6686

if.end37:                                         ; preds = %if.end31
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %32, i8* nonnull align 8 %0, i64 16, i1 false), !dbg !6687
  br label %cleanup143, !dbg !6688

sw.bb38:                                          ; preds = %if.end, %if.end, %if.end
  %33 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6689
  %bf.load40 = load i64, i64* %33, align 8, !dbg !6689
  %bf.cast429 = and i64 %bf.load40, 65535, !dbg !6691
  %cmp43 = icmp eq i64 %bf.cast429, 23, !dbg !6691
  br i1 %cmp43, label %lor.lhs.false44, label %if.then47, !dbg !6692

lor.lhs.false44:                                  ; preds = %sw.bb38
  %call45 = tail call zeroext i8 @tree_expr_nonnegative_p(%union.tree_node* %op0) #6, !dbg !6693
  %tobool46 = icmp eq i8 %call45, 0, !dbg !6693
  br i1 %tobool46, label %if.then47, label %if.end48, !dbg !6694

if.then47:                                        ; preds = %lor.lhs.false44, %sw.bb38
  %34 = bitcast %struct.double_int* %retval to i8*, !dbg !6695
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %34, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6695
  br label %cleanup143, !dbg !6696

if.end48:                                         ; preds = %lor.lhs.false44
  %35 = bitcast %struct.double_int* %tmp49 to i8*, !dbg !6697
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #8, !dbg !6697
  %call50 = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %op1) #6, !dbg !6697
  %36 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp49, i64 0, i32 0, !dbg !6697
  %37 = extractvalue { i64, i64 } %call50, 0, !dbg !6697
  store i64 %37, i64* %36, align 8, !dbg !6697
  %38 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp49, i64 0, i32 1, !dbg !6697
  %39 = extractvalue { i64, i64 } %call50, 1, !dbg !6697
  store i64 %39, i64* %38, align 8, !dbg !6697
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* nonnull align 8 %35, i64 16, i1 false), !dbg !6697
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #8, !dbg !6697
  %40 = bitcast %struct.double_int* %tmp51 to i8*, !dbg !6698
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %40) #8, !dbg !6698
  %type52 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !6699
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type52, i64 0, i32 6, !dbg !6699
  %bf.load53 = load i32, i32* %precision, align 4, !dbg !6699
  %bf.clear54 = and i32 %bf.load53, 1023, !dbg !6699
  %41 = getelementptr inbounds %struct.double_int, %struct.double_int* %cst, i64 0, i32 0, !dbg !6698
  %42 = load i64, i64* %41, align 8, !dbg !6698
  %43 = getelementptr inbounds %struct.double_int, %struct.double_int* %cst, i64 0, i32 1, !dbg !6698
  %44 = load i64, i64* %43, align 8, !dbg !6698
  %call55 = tail call { i64, i64 } @double_int_sext(i64 %42, i64 %44, i32 %bf.clear54) #6, !dbg !6698
  %45 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp51, i64 0, i32 0, !dbg !6698
  %46 = extractvalue { i64, i64 } %call55, 0, !dbg !6698
  store i64 %46, i64* %45, align 8, !dbg !6698
  %47 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp51, i64 0, i32 1, !dbg !6698
  %48 = extractvalue { i64, i64 } %call55, 1, !dbg !6698
  store i64 %48, i64* %47, align 8, !dbg !6698
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* nonnull align 8 %40, i64 16, i1 false), !dbg !6698
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %40) #8, !dbg !6698
  %cmp56 = icmp eq i32 %code, 64, !dbg !6700
  br i1 %cmp56, label %if.end60, label %if.then57, !dbg !6702

if.then57:                                        ; preds = %if.end48
  %49 = bitcast %struct.double_int* %tmp58 to i8*, !dbg !6703
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #8, !dbg !6703
  %50 = load i64, i64* %41, align 8, !dbg !6703
  %51 = load i64, i64* %43, align 8, !dbg !6703
  %call59 = tail call { i64, i64 } @double_int_neg(i64 %50, i64 %51) #6, !dbg !6703
  %52 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp58, i64 0, i32 0, !dbg !6703
  %53 = extractvalue { i64, i64 } %call59, 0, !dbg !6703
  store i64 %53, i64* %52, align 8, !dbg !6703
  %54 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp58, i64 0, i32 1, !dbg !6703
  %55 = extractvalue { i64, i64 } %call59, 1, !dbg !6703
  store i64 %55, i64* %54, align 8, !dbg !6703
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* nonnull align 8 %49, i64 16, i1 false), !dbg !6703
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #8, !dbg !6703
  br label %if.end60, !dbg !6704

if.end60:                                         ; preds = %if.end48, %if.then57
  %56 = bitcast %struct.double_int* %tmp61 to i8*, !dbg !6705
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #8, !dbg !6705
  %call62 = tail call fastcc { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %op0) #7, !dbg !6705
  %57 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp61, i64 0, i32 0, !dbg !6705
  %58 = extractvalue { i64, i64 } %call62, 0, !dbg !6705
  store i64 %58, i64* %57, align 8, !dbg !6705
  %59 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp61, i64 0, i32 1, !dbg !6705
  %60 = extractvalue { i64, i64 } %call62, 1, !dbg !6705
  store i64 %60, i64* %59, align 8, !dbg !6705
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %56, i64 16, i1 false), !dbg !6705
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #8, !dbg !6705
  %61 = load i64, i64* %41, align 8, !dbg !6706
  %62 = load i64, i64* %43, align 8, !dbg !6706
  %call63 = tail call zeroext i8 @double_int_negative_p(i64 %61, i64 %62) #6, !dbg !6706
  %tobool64 = icmp eq i8 %call63, 0, !dbg !6706
  br i1 %tobool64, label %if.else80, label %if.then65, !dbg !6707

if.then65:                                        ; preds = %if.end60
  %63 = bitcast %struct.double_int* %tmp66 to i8*, !dbg !6708
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %63) #8, !dbg !6708
  %call67 = tail call { i64, i64 } @double_int_neg(i64 %61, i64 %62) #6, !dbg !6708
  %64 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp66, i64 0, i32 0, !dbg !6708
  %65 = extractvalue { i64, i64 } %call67, 0, !dbg !6708
  store i64 %65, i64* %64, align 8, !dbg !6708
  %66 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp66, i64 0, i32 1, !dbg !6708
  %67 = extractvalue { i64, i64 } %call67, 1, !dbg !6708
  store i64 %67, i64* %66, align 8, !dbg !6708
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %3, i8* nonnull align 8 %63, i64 16, i1 false), !dbg !6708
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #8, !dbg !6708
  %68 = load i64, i64* %41, align 8, !dbg !6710
  %69 = load i64, i64* %43, align 8, !dbg !6710
  %call68 = tail call zeroext i8 @double_int_negative_p(i64 %68, i64 %69) #6, !dbg !6710
  %tobool69 = icmp eq i8 %call68, 0, !dbg !6710
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !6712

if.then70:                                        ; preds = %if.then65
  %70 = bitcast %struct.double_int* %retval to i8*, !dbg !6713
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %70, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6713
  br label %cleanup143, !dbg !6714

if.end71:                                         ; preds = %if.then65
  %71 = bitcast %struct.double_int* %tmp72 to i8*, !dbg !6715
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %71) #8, !dbg !6715
  %call73 = tail call { i64, i64 } @double_int_neg(i64 %68, i64 %69) #6, !dbg !6716
  %72 = extractvalue { i64, i64 } %call73, 0, !dbg !6716
  %73 = extractvalue { i64, i64 } %call73, 1, !dbg !6716
  %74 = getelementptr inbounds %struct.double_int, %struct.double_int* %max, i64 0, i32 0, !dbg !6715
  %75 = load i64, i64* %74, align 8, !dbg !6715
  %76 = getelementptr inbounds %struct.double_int, %struct.double_int* %max, i64 0, i32 1, !dbg !6715
  %77 = load i64, i64* %76, align 8, !dbg !6715
  %call74 = tail call { i64, i64 } @double_int_add(i64 %75, i64 %77, i64 %72, i64 %73) #6, !dbg !6715
  %78 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp72, i64 0, i32 0, !dbg !6715
  %79 = extractvalue { i64, i64 } %call74, 0, !dbg !6715
  store i64 %79, i64* %78, align 8, !dbg !6715
  %80 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp72, i64 0, i32 1, !dbg !6715
  %81 = extractvalue { i64, i64 } %call74, 1, !dbg !6715
  store i64 %81, i64* %80, align 8, !dbg !6715
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %2, i8* nonnull align 8 %71, i64 16, i1 false), !dbg !6715
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %71) #8, !dbg !6715
  %82 = getelementptr inbounds %struct.double_int, %struct.double_int* %bnd, i64 0, i32 0, !dbg !6717
  %83 = load i64, i64* %82, align 8, !dbg !6717
  %84 = getelementptr inbounds %struct.double_int, %struct.double_int* %bnd, i64 0, i32 1, !dbg !6717
  %85 = load i64, i64* %84, align 8, !dbg !6717
  %86 = getelementptr inbounds %struct.double_int, %struct.double_int* %mmax, i64 0, i32 0, !dbg !6717
  %87 = load i64, i64* %86, align 8, !dbg !6717
  %88 = getelementptr inbounds %struct.double_int, %struct.double_int* %mmax, i64 0, i32 1, !dbg !6717
  %89 = load i64, i64* %88, align 8, !dbg !6717
  %call75 = tail call i32 @double_int_ucmp(i64 %83, i64 %85, i64 %87, i64 %89) #6, !dbg !6717
  %cmp76 = icmp sgt i32 %call75, 0, !dbg !6719
  br i1 %cmp76, label %if.then77, label %if.end78, !dbg !6720

if.then77:                                        ; preds = %if.end71
  %90 = bitcast %struct.double_int* %retval to i8*, !dbg !6721
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6721
  br label %cleanup143, !dbg !6722

if.end78:                                         ; preds = %if.end71
  %call79 = tail call { i64, i64 } @double_int_add(i64 %83, i64 %85, i64 %68, i64 %69) #6, !dbg !6723
  %91 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 0, !dbg !6723
  %92 = extractvalue { i64, i64 } %call79, 0, !dbg !6723
  store i64 %92, i64* %91, align 8, !dbg !6723
  %93 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 1, !dbg !6723
  %94 = extractvalue { i64, i64 } %call79, 1, !dbg !6723
  store i64 %94, i64* %93, align 8, !dbg !6723
  br label %cleanup143, !dbg !6724

if.else80:                                        ; preds = %if.end60
  %95 = getelementptr inbounds %struct.double_int, %struct.double_int* %bnd, i64 0, i32 0, !dbg !6725
  %96 = load i64, i64* %95, align 8, !dbg !6725
  %97 = getelementptr inbounds %struct.double_int, %struct.double_int* %bnd, i64 0, i32 1, !dbg !6725
  %98 = load i64, i64* %97, align 8, !dbg !6725
  %call81 = tail call i32 @double_int_ucmp(i64 %96, i64 %98, i64 %61, i64 %62) #6, !dbg !6725
  %cmp82 = icmp slt i32 %call81, 0, !dbg !6727
  br i1 %cmp82, label %if.then83, label %if.end84, !dbg !6728

if.then83:                                        ; preds = %if.else80
  %99 = bitcast %struct.double_int* %retval to i8*, !dbg !6729
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %99, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6729
  br label %cleanup143, !dbg !6730

if.end84:                                         ; preds = %if.else80
  %bf.load86 = load i64, i64* %4, align 8, !dbg !6731
  %bf.cast8910 = and i64 %bf.load86, 2097152, !dbg !6731
  %tobool90 = icmp eq i64 %bf.cast8910, 0, !dbg !6731
  br i1 %tobool90, label %if.end100, label %if.then91, !dbg !6732

if.then91:                                        ; preds = %if.end84
  %100 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !6733
  %call92 = tail call %union.tree_node* @double_int_to_tree(%union.tree_node* %type, i64 %61, i64 %62) #6, !dbg !6733
  %call93 = tail call %union.tree_node* @fold_binary_loc(i32 0, i32 100, %union.tree_node* %100, %union.tree_node* %op0, %union.tree_node* %call92) #6, !dbg !6733
  call void @llvm.dbg.value(metadata %union.tree_node* %call93, metadata !6649, metadata !DIExpression()), !dbg !6734
  %tobool94 = icmp eq %union.tree_node* %call93, null, !dbg !6735
  br i1 %tobool94, label %if.then98, label %lor.lhs.false95, !dbg !6737

lor.lhs.false95:                                  ; preds = %if.then91
  %call96 = tail call i32 @integer_nonzerop(%union.tree_node* nonnull %call93) #6, !dbg !6738
  %tobool97 = icmp eq i32 %call96, 0, !dbg !6738
  br i1 %tobool97, label %cleanup, label %if.then98, !dbg !6739

if.then98:                                        ; preds = %lor.lhs.false95, %if.then91
  %101 = bitcast %struct.double_int* %retval to i8*, !dbg !6740
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %101, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6740
  br label %cleanup, !dbg !6741

cleanup:                                          ; preds = %lor.lhs.false95, %if.then98
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then98 ], [ true, %lor.lhs.false95 ]
  br i1 %cleanup.dest.slot.0, label %if.end100, label %cleanup143

if.end100:                                        ; preds = %if.end84, %cleanup
  %102 = bitcast %struct.double_int* %tmp101 to i8*, !dbg !6742
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %102) #8, !dbg !6742
  %call103 = tail call { i64, i64 } @double_int_neg(i64 %61, i64 %62) #6, !dbg !6743
  %103 = extractvalue { i64, i64 } %call103, 0, !dbg !6743
  %104 = extractvalue { i64, i64 } %call103, 1, !dbg !6743
  %call104 = tail call { i64, i64 } @double_int_add(i64 %96, i64 %98, i64 %103, i64 %104) #6, !dbg !6742
  %105 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp101, i64 0, i32 0, !dbg !6742
  %106 = extractvalue { i64, i64 } %call104, 0, !dbg !6742
  store i64 %106, i64* %105, align 8, !dbg !6742
  %107 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp101, i64 0, i32 1, !dbg !6742
  %108 = extractvalue { i64, i64 } %call104, 1, !dbg !6742
  store i64 %108, i64* %107, align 8, !dbg !6742
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %102, i64 16, i1 false), !dbg !6742
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %102) #8, !dbg !6742
  %109 = bitcast %struct.double_int* %retval to i8*, !dbg !6744
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %109, i8* nonnull align 8 %0, i64 16, i1 false), !dbg !6744
  br label %cleanup143, !dbg !6745

sw.bb106:                                         ; preds = %if.end, %if.end
  %110 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6746
  %bf.load108 = load i64, i64* %110, align 8, !dbg !6746
  %bf.cast1108 = and i64 %bf.load108, 65535, !dbg !6748
  %cmp111 = icmp eq i64 %bf.cast1108, 23, !dbg !6748
  br i1 %cmp111, label %lor.lhs.false112, label %if.then115, !dbg !6749

lor.lhs.false112:                                 ; preds = %sw.bb106
  %call113 = tail call i32 @tree_int_cst_sign_bit(%union.tree_node* %op1) #6, !dbg !6750
  %tobool114 = icmp eq i32 %call113, 0, !dbg !6750
  br i1 %tobool114, label %if.end116, label %if.then115, !dbg !6751

if.then115:                                       ; preds = %lor.lhs.false112, %sw.bb106
  %111 = bitcast %struct.double_int* %retval to i8*, !dbg !6752
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %111, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6752
  br label %cleanup143, !dbg !6753

if.end116:                                        ; preds = %lor.lhs.false112
  %112 = bitcast %struct.double_int* %tmp117 to i8*, !dbg !6754
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %112) #8, !dbg !6754
  %call118 = tail call fastcc { i64, i64 } @derive_constant_upper_bound(%union.tree_node* %op0) #7, !dbg !6754
  %113 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp117, i64 0, i32 0, !dbg !6754
  %114 = extractvalue { i64, i64 } %call118, 0, !dbg !6754
  store i64 %114, i64* %113, align 8, !dbg !6754
  %115 = getelementptr inbounds %struct.double_int, %struct.double_int* %tmp117, i64 0, i32 1, !dbg !6754
  %116 = extractvalue { i64, i64 } %call118, 1, !dbg !6754
  store i64 %116, i64* %115, align 8, !dbg !6754
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %112, i64 16, i1 false), !dbg !6754
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %112) #8, !dbg !6754
  %call120 = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %op1) #6, !dbg !6755
  %117 = extractvalue { i64, i64 } %call120, 0, !dbg !6755
  %118 = extractvalue { i64, i64 } %call120, 1, !dbg !6755
  %119 = getelementptr inbounds %struct.double_int, %struct.double_int* %bnd, i64 0, i32 0, !dbg !6756
  %120 = load i64, i64* %119, align 8, !dbg !6756
  %121 = getelementptr inbounds %struct.double_int, %struct.double_int* %bnd, i64 0, i32 1, !dbg !6756
  %122 = load i64, i64* %121, align 8, !dbg !6756
  %call121 = tail call { i64, i64 } @double_int_udiv(i64 %120, i64 %122, i64 %117, i64 %118, i32 69) #6, !dbg !6756
  %123 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 0, !dbg !6756
  %124 = extractvalue { i64, i64 } %call121, 0, !dbg !6756
  store i64 %124, i64* %123, align 8, !dbg !6756
  %125 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 1, !dbg !6756
  %126 = extractvalue { i64, i64 } %call121, 1, !dbg !6756
  store i64 %126, i64* %125, align 8, !dbg !6756
  br label %cleanup143, !dbg !6757

sw.bb122:                                         ; preds = %if.end
  %127 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6758
  %bf.load124 = load i64, i64* %127, align 8, !dbg !6758
  %bf.cast1267 = and i64 %bf.load124, 65535, !dbg !6760
  %cmp127 = icmp eq i64 %bf.cast1267, 23, !dbg !6760
  br i1 %cmp127, label %lor.lhs.false128, label %if.then131, !dbg !6761

lor.lhs.false128:                                 ; preds = %sw.bb122
  %call129 = tail call i32 @tree_int_cst_sign_bit(%union.tree_node* %op1) #6, !dbg !6762
  %tobool130 = icmp eq i32 %call129, 0, !dbg !6762
  br i1 %tobool130, label %if.end132, label %if.then131, !dbg !6763

if.then131:                                       ; preds = %lor.lhs.false128, %sw.bb122
  %128 = bitcast %struct.double_int* %retval to i8*, !dbg !6764
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %128, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6764
  br label %cleanup143, !dbg !6765

if.end132:                                        ; preds = %lor.lhs.false128
  %call133 = tail call { i64, i64 } @tree_to_double_int(%union.tree_node* %op1) #6, !dbg !6766
  %129 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 0, !dbg !6766
  %130 = extractvalue { i64, i64 } %call133, 0, !dbg !6766
  store i64 %130, i64* %129, align 8, !dbg !6766
  %131 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 1, !dbg !6766
  %132 = extractvalue { i64, i64 } %call133, 1, !dbg !6766
  store i64 %132, i64* %131, align 8, !dbg !6766
  br label %cleanup143, !dbg !6767

sw.bb134:                                         ; preds = %if.end
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %op0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !6768
  %133 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !6768
  %134 = load %union.gimple_statement_d*, %union.gimple_statement_d** %133, align 8, !dbg !6768
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %134, metadata !6648, metadata !DIExpression()), !dbg !6655
  %call135 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %134) #7, !dbg !6769
  %cmp136 = icmp eq i32 %call135, 6, !dbg !6771
  br i1 %cmp136, label %lor.lhs.false137, label %if.then140, !dbg !6772

lor.lhs.false137:                                 ; preds = %sw.bb134
  %call138 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %134) #7, !dbg !6773
  %cmp139 = icmp eq %union.tree_node* %call138, %op0, !dbg !6774
  br i1 %cmp139, label %if.end141, label %if.then140, !dbg !6775

if.then140:                                       ; preds = %lor.lhs.false137, %sw.bb134
  %135 = bitcast %struct.double_int* %retval to i8*, !dbg !6776
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %135, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6776
  br label %cleanup143, !dbg !6777

if.end141:                                        ; preds = %lor.lhs.false137
  %call142 = tail call fastcc { i64, i64 } @derive_constant_upper_bound_assign(%union.gimple_statement_d* %134) #7, !dbg !6778
  %136 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 0, !dbg !6778
  %137 = extractvalue { i64, i64 } %call142, 0, !dbg !6778
  store i64 %137, i64* %136, align 8, !dbg !6778
  %138 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 1, !dbg !6778
  %139 = extractvalue { i64, i64 } %call142, 1, !dbg !6778
  store i64 %139, i64* %138, align 8, !dbg !6778
  br label %cleanup143, !dbg !6779

sw.default:                                       ; preds = %if.end
  %140 = bitcast %struct.double_int* %retval to i8*, !dbg !6780
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %140, i8* nonnull align 8 %1, i64 16, i1 false), !dbg !6780
  br label %cleanup143, !dbg !6781

cleanup143:                                       ; preds = %cleanup, %sw.default, %if.end141, %if.then140, %if.end132, %if.then131, %if.end116, %if.then115, %if.end100, %if.then83, %if.end78, %if.then77, %if.then70, %if.then47, %if.end37, %if.then36, %if.then30, %sw.bb
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #8, !dbg !6782
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %2) #8, !dbg !6782
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1) #8, !dbg !6782
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %0) #8, !dbg !6782
  %.elt = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 0, !dbg !6782
  %.unpack = load i64, i64* %.elt, align 8, !dbg !6782
  %141 = insertvalue { i64, i64 } undef, i64 %.unpack, 0, !dbg !6782
  %142 = getelementptr inbounds %struct.double_int, %struct.double_int* %retval, i64 0, i32 1, !dbg !6782
  %.unpack6 = load i64, i64* %142, align 8, !dbg !6782
  %143 = insertvalue { i64, i64 } %141, i64 %.unpack6, 1, !dbg !6782
  ret { i64, i64 } %143, !dbg !6782
}

declare dso_local zeroext i8 @tree_expr_nonnegative_p(%union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @double_int_negative_p(i64, i64) local_unnamed_addr #2

declare dso_local %union.tree_node* @double_int_to_tree(%union.tree_node*, i64, i64) local_unnamed_addr #2

declare dso_local { i64, i64 } @double_int_udiv(i64, i64, i64, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc { i64, i64 } @derive_constant_upper_bound_assign(%union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !6783 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6787, metadata !DIExpression()), !dbg !6791
  %call = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #7, !dbg !6792
  call void @llvm.dbg.value(metadata i32 %call, metadata !6788, metadata !DIExpression()), !dbg !6791
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #7, !dbg !6793
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !6789, metadata !DIExpression()), !dbg !6791
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #7, !dbg !6794
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !6790, metadata !DIExpression()), !dbg !6791
  %call3 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #7, !dbg !6795
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6795
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6795
  %call4 = tail call fastcc { i64, i64 } @derive_constant_upper_bound_ops(%union.tree_node* %0, %union.tree_node* %call1, i32 %call, %union.tree_node* %call2) #7, !dbg !6796
  ret { i64, i64 } %call4, !dbg !6797
}

declare dso_local %union.tree_node* @initial_condition_in_loop_num(%union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !6798 {
entry:
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !6802, metadata !DIExpression()), !dbg !6803
  %call = tail call i8* @vec_heap_o_reserve_exact(i8* null, i32 %alloc_, i64 8, i64 4) #6, !dbg !6804
  %0 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !6804
  ret %struct.VEC_int_heap* %0, !dbg !6804
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @number_of_loops() unnamed_addr #0 !dbg !6805 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6808
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 4, !dbg !6808
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !6808
  %tobool = icmp eq %struct.loops* %1, null, !dbg !6808
  br i1 %tobool, label %return, label %if.end, !dbg !6810

if.end:                                           ; preds = %entry
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i64 0, i32 1, !dbg !6811
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !6811
  %tobool3 = icmp eq %struct.VEC_loop_p_gc* %2, null, !dbg !6811
  br i1 %tobool3, label %cond.end, label %cond.true, !dbg !6811

cond.true:                                        ; preds = %if.end
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %2, i64 0, i32 0, !dbg !6811
  br label %cond.end, !dbg !6811

cond.end:                                         ; preds = %if.end, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %if.end ], !dbg !6811
  %call = tail call fastcc i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond) #7, !dbg !6811
  br label %return, !dbg !6812

return:                                           ; preds = %entry, %cond.end
  %retval.0 = phi i32 [ %call, %cond.end ], [ 0, %entry ], !dbg !6813
  ret i32 %retval.0, !dbg !6814
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) unnamed_addr #0 !dbg !6815 {
entry:
  unreachable, !dbg !6824
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) unnamed_addr #0 !dbg !6825 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_base* %vec_, metadata !6831, metadata !DIExpression()), !dbg !6834
  call void @llvm.dbg.value(metadata i32 %obj_, metadata !6832, metadata !DIExpression()), !dbg !6834
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 0, !dbg !6835
  %0 = load i32, i32* %num1, align 4, !dbg !6835
  %inc = add i32 %0, 1, !dbg !6835
  store i32 %inc, i32* %num1, align 4, !dbg !6835
  %idxprom = zext i32 %0 to i64, !dbg !6835
  %arrayidx = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6835
  call void @llvm.dbg.value(metadata i32* %arrayidx, metadata !6833, metadata !DIExpression()), !dbg !6834
  store i32 %obj_, i32* %arrayidx, align 4, !dbg !6835
  ret i32* %arrayidx, !dbg !6835
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @loop_outer(%struct.loop* %loop) unnamed_addr #0 !dbg !6836 {
entry:
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !6840, metadata !DIExpression()), !dbg !6842
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %loop, i64 0, i32 7, !dbg !6843
  %0 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !6843
  %tobool = icmp eq %struct.VEC_loop_p_gc* %0, null, !dbg !6843
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6843

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %0, i64 0, i32 0, !dbg !6843
  br label %cond.end, !dbg !6843

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6843
  %call = tail call fastcc i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond) #7, !dbg !6843
  call void @llvm.dbg.value(metadata i32 %call, metadata !6841, metadata !DIExpression()), !dbg !6842
  %cmp = icmp eq i32 %call, 0, !dbg !6844
  br i1 %cmp, label %cleanup, label %if.end, !dbg !6846

if.end:                                           ; preds = %cond.end
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !6847
  %tobool3 = icmp eq %struct.VEC_loop_p_gc* %1, null, !dbg !6847
  br i1 %tobool3, label %cond.end8, label %cond.true4, !dbg !6847

cond.true4:                                       ; preds = %if.end
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %1, i64 0, i32 0, !dbg !6847
  br label %cond.end8, !dbg !6847

cond.end8:                                        ; preds = %if.end, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %if.end ], !dbg !6847
  %sub = add i32 %call, -1, !dbg !6847
  %call10 = tail call fastcc %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub) #7, !dbg !6847
  br label %cleanup, !dbg !6848

cleanup:                                          ; preds = %cond.end, %cond.end8
  %retval.0 = phi %struct.loop* [ %call10, %cond.end8 ], [ null, %cond.end ], !dbg !6842
  ret %struct.loop* %retval.0, !dbg !6849
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) unnamed_addr #0 !dbg !6850 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_loop_p_base* %vec_, metadata !6854, metadata !DIExpression()), !dbg !6855
  %tobool = icmp eq %struct.VEC_loop_p_base* %vec_, null, !dbg !6856
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6856

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %vec_, i64 0, i32 0, !dbg !6856
  %0 = load i32, i32* %num, align 8, !dbg !6856
  br label %cond.end, !dbg !6856

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !6856
  ret i32 %cond, !dbg !6856
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !6857 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_loop_p_base* %vec_, metadata !6861, metadata !DIExpression()), !dbg !6863
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !6862, metadata !DIExpression()), !dbg !6863
  br label %land.end, !dbg !6864

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !6864
  %arrayidx = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6864
  %0 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !6864
  ret %struct.loop* %0, !dbg !6864
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) unnamed_addr #0 !dbg !6865 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_base* %vec_, metadata !6871, metadata !DIExpression()), !dbg !6874
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !6872, metadata !DIExpression()), !dbg !6874
  call void @llvm.dbg.value(metadata i32* %ptr, metadata !6873, metadata !DIExpression()), !dbg !6874
  %tobool = icmp eq %struct.VEC_int_base* %vec_, null, !dbg !6875
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !6875

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 0, !dbg !6875
  %0 = load i32, i32* %num, align 4, !dbg !6875
  %cmp = icmp ugt i32 %0, %ix_, !dbg !6875
  br i1 %cmp, label %if.then, label %if.else, !dbg !6877

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !6878
  %arrayidx = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6878
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6878
  br label %return, !dbg !6878

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !6880

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi i32 [ 0, %if.else ], [ %1, %if.then ], !dbg !6882
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !6882
  store i32 %storemerge, i32* %ptr, align 4, !dbg !6882
  ret i32 %retval.0, !dbg !6877
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @get_loop(i32 %num) unnamed_addr #0 !dbg !6883 {
entry:
  call void @llvm.dbg.value(metadata i32 %num, metadata !6887, metadata !DIExpression()), !dbg !6888
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6889
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 4, !dbg !6889
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !6889
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i64 0, i32 1, !dbg !6889
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !6889
  %tobool = icmp eq %struct.VEC_loop_p_gc* %2, null, !dbg !6889
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6889

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %2, i64 0, i32 0, !dbg !6889
  br label %cond.end, !dbg !6889

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6889
  %call = tail call fastcc %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %num) #7, !dbg !6889
  ret %struct.loop* %call, !dbg !6890
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) unnamed_addr #0 !dbg !6891 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap** %vec_, metadata !6896, metadata !DIExpression()), !dbg !6897
  %0 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %vec_, align 8, !dbg !6898
  %tobool = icmp eq %struct.VEC_int_heap* %0, null, !dbg !6898
  br i1 %tobool, label %if.end, label %if.then, !dbg !6900

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_int_heap* %0 to i8*, !dbg !6900
  tail call void @free(i8* nonnull %1) #6, !dbg !6898
  br label %if.end, !dbg !6898

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %vec_, align 8, !dbg !6900
  ret void, !dbg !6900
}

declare dso_local zeroext i8 @double_int_fits_to_tree_p(%union.tree_node*, i64, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @double_int_zero_p(i64 %cst.coerce0, i64 %cst.coerce1) unnamed_addr #0 !dbg !6901 {
entry:
  %0 = or i64 %cst.coerce0, %cst.coerce1, !dbg !6906
  %1 = icmp eq i64 %0, 0, !dbg !6906
  %conv = zext i1 %1 to i8, !dbg !6907
  ret i8 %conv, !dbg !6908
}

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind }
attributes #7 = { nobuiltin }
attributes #8 = { nounwind }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!1883, !1884, !1885}
!llvm.ident = !{!1886}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !466, nameTableKind: None)
!1 = !DIFile(filename: "tree-ssa-loop-niter.c", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!2 = !{!3, !132, !327, !336, !340, !346, !351, !356, !374, !381, !388, !427, !453, !459}
!3 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !4, line: 7, baseType: !5, size: 32, elements: !6)
!4 = !DIFile(filename: "./insn-modes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!5 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!6 = !{!7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131}
!7 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!8 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!9 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!10 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!11 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!12 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!13 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!14 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!15 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!16 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!17 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!18 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!19 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!20 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!21 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!22 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!23 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!24 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!25 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!26 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!27 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!28 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!29 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!30 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!31 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!32 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!33 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!34 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!35 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!36 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!37 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!38 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!39 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!40 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!41 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!42 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!43 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!44 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!45 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!46 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!47 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!48 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!49 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!50 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!51 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!52 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!53 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!54 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!55 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!56 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!57 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!58 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!59 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!60 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!61 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!62 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!63 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!64 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!65 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!66 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!67 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!68 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!69 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!70 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!71 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!72 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!73 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!74 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!75 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!76 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!77 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!78 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!79 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!80 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!81 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!82 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!83 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!84 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!85 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!86 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!87 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!88 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!89 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!90 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!91 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!92 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!93 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!94 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!95 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!131 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!132 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !133, line: 39, baseType: !5, size: 32, elements: !134)
!133 = !DIFile(filename: "./tree.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!134 = !{!135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326}
!135 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!137 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!138 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!139 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!140 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!141 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!142 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!143 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!144 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!145 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!146 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!147 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!148 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!149 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!150 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!151 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!152 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!153 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!154 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!155 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!156 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!157 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!158 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!159 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!160 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!161 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!162 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!163 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!164 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!165 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!166 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!167 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!168 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!169 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!170 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!171 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!172 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!173 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!174 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!175 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!176 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!177 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!178 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!179 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!180 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!181 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!182 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!183 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!184 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!185 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!186 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!187 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!188 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!189 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!190 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!191 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!192 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!193 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!194 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!195 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!196 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!197 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!198 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!199 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!200 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!201 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!202 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!203 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!204 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!205 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!206 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!207 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!208 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!209 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!210 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!211 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!212 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!213 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!214 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!215 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!216 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!217 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!218 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!219 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!220 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!221 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!222 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!223 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!226 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!227 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!232 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!233 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!234 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!235 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!236 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!237 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!238 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!239 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!240 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!241 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!242 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!243 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!244 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!245 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!246 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!247 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!248 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!249 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!250 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!251 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!252 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!253 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!254 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!255 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!256 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!257 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!258 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!259 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!260 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!261 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!262 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!263 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!264 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!265 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!266 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!267 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!268 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!269 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!270 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!271 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!272 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!273 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!274 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!275 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!276 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!277 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!278 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!279 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!280 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!281 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!282 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!283 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!284 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!285 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!286 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!287 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!288 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!289 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!299 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!300 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!302 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!303 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!304 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!305 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!306 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!320 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!321 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!322 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!323 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!324 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!325 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!326 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!327 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !328, line: 31, baseType: !5, size: 32, elements: !329)
!328 = !DIFile(filename: "./cfgloop.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!329 = !{!330, !331, !332, !333, !334, !335}
!330 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!331 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!332 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!336 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !328, line: 91, baseType: !5, size: 32, elements: !337)
!337 = !{!338, !339}
!338 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!339 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!340 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !341, line: 363, baseType: !5, size: 32, elements: !342)
!341 = !DIFile(filename: "./basic-block.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!342 = !{!343, !344, !345}
!343 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!344 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!345 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!346 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !341, line: 355, baseType: !5, size: 32, elements: !347)
!347 = !{!348, !349, !350}
!348 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!349 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!350 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!351 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !352, line: 474, baseType: !5, size: 32, elements: !353)
!352 = !DIFile(filename: "./config/i386/i386.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!353 = !{!354, !355}
!354 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!356 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !133, line: 280, baseType: !5, size: 32, elements: !357)
!357 = !{!358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373}
!358 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!374 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !133, line: 1817, baseType: !5, size: 32, elements: !375)
!375 = !{!376, !377, !378, !379, !380}
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!381 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !133, line: 1805, baseType: !5, size: 32, elements: !382)
!382 = !{!383, !384, !385, !386, !387}
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!384 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!388 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !389, line: 51, baseType: !5, size: 32, elements: !390)
!389 = !DIFile(filename: "./gimple.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!390 = !{!391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426}
!391 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!392 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!393 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!394 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!395 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!396 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!397 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!398 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!399 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!400 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!401 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!402 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!403 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!404 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!405 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!406 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!407 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!408 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!409 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!410 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!411 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!412 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!413 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!414 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!415 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!416 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!417 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!418 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!419 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!420 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!421 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!422 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!423 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!424 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!425 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!426 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!427 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !389, line: 727, baseType: !5, size: 32, elements: !428)
!428 = !{!429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452}
!429 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!430 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!431 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!432 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!433 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!434 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!435 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!436 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!437 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!438 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!439 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!440 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!441 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!442 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!443 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!444 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!445 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!446 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!447 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!448 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!449 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!450 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!451 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!452 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!453 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !389, line: 80, baseType: !5, size: 32, elements: !454)
!454 = !{!455, !456, !457, !458}
!455 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!456 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!457 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!458 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!459 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !460, line: 119, baseType: !5, size: 32, elements: !461)
!460 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!461 = !{!462, !463, !464, !465}
!462 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!463 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!464 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!465 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!466 = !{!467, !468, !469, !470, !473, !474, !476, !132, !603, !5, !801, !1860, !834, !471, !453, !530, !478, !1862, !780, !1053, !1864, !1870, !1042}
!467 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !468, size: 64)
!468 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!469 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !471, size: 64)
!471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !472, size: 64)
!472 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !475, size: 64)
!475 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !472)
!476 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !477, line: 56, baseType: !478)
!477 = !DIFile(filename: "./coretypes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !479, size: 64)
!479 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !133, line: 3371, size: 1792, elements: !480)
!480 = !{!481, !514, !520, !533, !552, !563, !568, !577, !583, !596, !608, !646, !1190, !1218, !1235, !1236, !1241, !1250, !1256, !1261, !1265, !1269, !1511, !1558, !1564, !1570, !1577, !1590, !1604, !1621, !1633, !1655, !1670, !1842}
!481 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !479, file: !133, line: 3372, baseType: !482, size: 64)
!482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !133, line: 360, size: 64, elements: !483)
!483 = !{!484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513}
!484 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !482, file: !133, line: 361, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !482, file: !133, line: 363, baseType: !5, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !482, file: !133, line: 364, baseType: !5, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!487 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !482, file: !133, line: 365, baseType: !5, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !482, file: !133, line: 366, baseType: !5, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !482, file: !133, line: 367, baseType: !5, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !482, file: !133, line: 368, baseType: !5, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !482, file: !133, line: 369, baseType: !5, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !482, file: !133, line: 370, baseType: !5, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !482, file: !133, line: 372, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!494 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !482, file: !133, line: 373, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!495 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !482, file: !133, line: 374, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!496 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !482, file: !133, line: 375, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!497 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !482, file: !133, line: 376, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!498 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !482, file: !133, line: 377, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!499 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !482, file: !133, line: 378, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!500 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !482, file: !133, line: 379, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!501 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !482, file: !133, line: 381, baseType: !5, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !482, file: !133, line: 382, baseType: !5, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !482, file: !133, line: 383, baseType: !5, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !482, file: !133, line: 384, baseType: !5, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !482, file: !133, line: 385, baseType: !5, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!506 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !482, file: !133, line: 386, baseType: !5, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!507 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !482, file: !133, line: 387, baseType: !5, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!508 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !482, file: !133, line: 388, baseType: !5, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!509 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !482, file: !133, line: 390, baseType: !5, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !482, file: !133, line: 391, baseType: !5, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!511 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !482, file: !133, line: 392, baseType: !5, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!512 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !482, file: !133, line: 394, baseType: !5, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !482, file: !133, line: 399, baseType: !5, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !479, file: !133, line: 3373, baseType: !515, size: 192)
!515 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !133, line: 402, size: 192, elements: !516)
!516 = !{!517, !518, !519}
!517 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !515, file: !133, line: 403, baseType: !482, size: 64)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !515, file: !133, line: 404, baseType: !476, size: 64, offset: 64)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !515, file: !133, line: 405, baseType: !476, size: 64, offset: 128)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !479, file: !133, line: 3374, baseType: !521, size: 320)
!521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !133, line: 1384, size: 320, elements: !522)
!522 = !{!523, !524}
!523 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !521, file: !133, line: 1385, baseType: !515, size: 192)
!524 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !521, file: !133, line: 1386, baseType: !525, size: 128, offset: 192)
!525 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !526, line: 58, baseType: !527)
!526 = !DIFile(filename: "./double-int.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!527 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !526, line: 54, size: 128, elements: !528)
!528 = !{!529, !531}
!529 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !527, file: !526, line: 56, baseType: !530, size: 64)
!530 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !527, file: !526, line: 57, baseType: !532, size: 64, offset: 64)
!532 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !479, file: !133, line: 3375, baseType: !534, size: 256)
!534 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !133, line: 1397, size: 256, elements: !535)
!535 = !{!536, !537}
!536 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !534, file: !133, line: 1398, baseType: !515, size: 192)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !534, file: !133, line: 1399, baseType: !538, size: 64, offset: 192)
!538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !539, size: 64)
!539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !540, line: 52, size: 256, elements: !541)
!540 = !DIFile(filename: "./real.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!541 = !{!542, !543, !544, !545, !546, !547, !548}
!542 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !539, file: !540, line: 56, baseType: !5, size: 2, flags: DIFlagBitField, extraData: i64 0)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !539, file: !540, line: 57, baseType: !5, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !539, file: !540, line: 58, baseType: !5, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!545 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !539, file: !540, line: 59, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !539, file: !540, line: 60, baseType: !5, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !539, file: !540, line: 61, baseType: !5, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !539, file: !540, line: 62, baseType: !549, size: 192, offset: 64)
!549 = !DICompositeType(tag: DW_TAG_array_type, baseType: !530, size: 192, elements: !550)
!550 = !{!551}
!551 = !DISubrange(count: 3)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !479, file: !133, line: 3376, baseType: !553, size: 256)
!553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !133, line: 1408, size: 256, elements: !554)
!554 = !{!555, !556}
!555 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !553, file: !133, line: 1409, baseType: !515, size: 192)
!556 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !553, file: !133, line: 1410, baseType: !557, size: 64, offset: 192)
!557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !558, size: 64)
!558 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !559, line: 27, size: 192, elements: !560)
!559 = !DIFile(filename: "./fixed-value.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!560 = !{!561, !562}
!561 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !558, file: !559, line: 29, baseType: !525, size: 128)
!562 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !558, file: !559, line: 30, baseType: !3, size: 32, offset: 128)
!563 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !479, file: !133, line: 3377, baseType: !564, size: 256)
!564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !133, line: 1437, size: 256, elements: !565)
!565 = !{!566, !567}
!566 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !564, file: !133, line: 1438, baseType: !515, size: 192)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !564, file: !133, line: 1439, baseType: !476, size: 64, offset: 192)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !479, file: !133, line: 3378, baseType: !569, size: 256)
!569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !133, line: 1418, size: 256, elements: !570)
!570 = !{!571, !572, !573}
!571 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !569, file: !133, line: 1419, baseType: !515, size: 192)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !569, file: !133, line: 1420, baseType: !469, size: 32, offset: 192)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !569, file: !133, line: 1421, baseType: !574, size: 8, offset: 224)
!574 = !DICompositeType(tag: DW_TAG_array_type, baseType: !472, size: 8, elements: !575)
!575 = !{!576}
!576 = !DISubrange(count: 1)
!577 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !479, file: !133, line: 3379, baseType: !578, size: 320)
!578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !133, line: 1428, size: 320, elements: !579)
!579 = !{!580, !581, !582}
!580 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !578, file: !133, line: 1429, baseType: !515, size: 192)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !578, file: !133, line: 1430, baseType: !476, size: 64, offset: 192)
!582 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !578, file: !133, line: 1431, baseType: !476, size: 64, offset: 256)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !479, file: !133, line: 3380, baseType: !584, size: 320)
!584 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !133, line: 1460, size: 320, elements: !585)
!585 = !{!586, !587}
!586 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !584, file: !133, line: 1461, baseType: !515, size: 192)
!587 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !584, file: !133, line: 1462, baseType: !588, size: 128, offset: 192)
!588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !589, line: 31, size: 128, elements: !590)
!589 = !DIFile(filename: "./symtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!590 = !{!591, !594, !595}
!591 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !588, file: !589, line: 32, baseType: !592, size: 64)
!592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !593, size: 64)
!593 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !468)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !588, file: !589, line: 33, baseType: !5, size: 32, offset: 64)
!595 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !588, file: !589, line: 34, baseType: !5, size: 32, offset: 96)
!596 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !479, file: !133, line: 3381, baseType: !597, size: 384)
!597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !133, line: 2507, size: 384, elements: !598)
!598 = !{!599, !600, !605, !606, !607}
!599 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !597, file: !133, line: 2508, baseType: !515, size: 192)
!600 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !597, file: !133, line: 2509, baseType: !601, size: 32, offset: 192)
!601 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !602, line: 58, baseType: !603)
!602 = !DIFile(filename: "./input.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!603 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !604, line: 44, baseType: !5)
!604 = !DIFile(filename: "./line-map.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!605 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !597, file: !133, line: 2510, baseType: !5, size: 32, offset: 224)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !597, file: !133, line: 2511, baseType: !476, size: 64, offset: 256)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !597, file: !133, line: 2512, baseType: !476, size: 64, offset: 320)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !479, file: !133, line: 3382, baseType: !609, size: 896)
!609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !133, line: 2652, size: 896, elements: !610)
!610 = !{!611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643}
!611 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !609, file: !133, line: 2653, baseType: !597, size: 384)
!612 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !609, file: !133, line: 2654, baseType: !476, size: 64, offset: 384)
!613 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !609, file: !133, line: 2656, baseType: !5, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !609, file: !133, line: 2658, baseType: !5, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !609, file: !133, line: 2659, baseType: !5, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !609, file: !133, line: 2660, baseType: !5, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !609, file: !133, line: 2661, baseType: !5, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !609, file: !133, line: 2662, baseType: !5, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !609, file: !133, line: 2663, baseType: !5, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !609, file: !133, line: 2664, baseType: !5, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !609, file: !133, line: 2666, baseType: !5, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!622 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !609, file: !133, line: 2667, baseType: !5, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!623 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !609, file: !133, line: 2668, baseType: !5, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !609, file: !133, line: 2669, baseType: !5, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !609, file: !133, line: 2670, baseType: !5, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!626 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !609, file: !133, line: 2671, baseType: !5, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!627 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !609, file: !133, line: 2672, baseType: !5, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !609, file: !133, line: 2673, baseType: !5, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!629 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !609, file: !133, line: 2674, baseType: !5, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!630 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !609, file: !133, line: 2678, baseType: !5, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !609, file: !133, line: 2682, baseType: !5, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !609, file: !133, line: 2685, baseType: !5, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !609, file: !133, line: 2688, baseType: !5, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!634 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !609, file: !133, line: 2690, baseType: !5, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!635 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !609, file: !133, line: 2692, baseType: !5, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!636 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !609, file: !133, line: 2695, baseType: !5, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!637 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !609, file: !133, line: 2698, baseType: !5, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!638 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !609, file: !133, line: 2703, baseType: !5, size: 32, offset: 512)
!639 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !609, file: !133, line: 2705, baseType: !476, size: 64, offset: 576)
!640 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !609, file: !133, line: 2706, baseType: !476, size: 64, offset: 640)
!641 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !609, file: !133, line: 2707, baseType: !476, size: 64, offset: 704)
!642 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !609, file: !133, line: 2708, baseType: !476, size: 64, offset: 768)
!643 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !609, file: !133, line: 2711, baseType: !644, size: 64, offset: 832)
!644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !645, size: 64)
!645 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !133, line: 2711, flags: DIFlagFwdDecl)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !479, file: !133, line: 3383, baseType: !647, size: 960)
!647 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !133, line: 2756, size: 960, elements: !648)
!648 = !{!649, !650}
!649 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !647, file: !133, line: 2757, baseType: !609, size: 896)
!650 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !647, file: !133, line: 2758, baseType: !651, size: 64, offset: 896)
!651 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !477, line: 50, baseType: !652)
!652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !653, size: 64)
!653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !654, line: 240, size: 384, elements: !655)
!654 = !DIFile(filename: "./rtl.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!655 = !{!656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666}
!656 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !653, file: !654, line: 242, baseType: !5, size: 16, flags: DIFlagBitField, extraData: i64 0)
!657 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !653, file: !654, line: 245, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !653, file: !654, line: 252, baseType: !5, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !653, file: !654, line: 257, baseType: !5, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!660 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !653, file: !654, line: 265, baseType: !5, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!661 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !653, file: !654, line: 277, baseType: !5, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !653, file: !654, line: 291, baseType: !5, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !653, file: !654, line: 298, baseType: !5, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !653, file: !654, line: 305, baseType: !5, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !653, file: !654, line: 310, baseType: !5, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!666 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !653, file: !654, line: 321, baseType: !667, size: 320, offset: 64)
!667 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !654, line: 315, size: 320, elements: !668)
!668 = !{!669, !1123, !1125, !1188, !1189}
!669 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !667, file: !654, line: 316, baseType: !670, size: 64)
!670 = !DICompositeType(tag: DW_TAG_array_type, baseType: !671, size: 64, elements: !575)
!671 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !654, line: 183, baseType: !672)
!672 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !654, line: 166, size: 64, elements: !673)
!673 = !{!674, !675, !676, !677, !678, !686, !687, !699, !702, !762, !763, !1100, !1113, !1120}
!674 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !672, file: !654, line: 168, baseType: !469, size: 32)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !672, file: !654, line: 169, baseType: !5, size: 32)
!676 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !672, file: !654, line: 170, baseType: !474, size: 64)
!677 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !672, file: !654, line: 171, baseType: !651, size: 64)
!678 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !672, file: !654, line: 172, baseType: !679, size: 64)
!679 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !477, line: 53, baseType: !680)
!680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !681, size: 64)
!681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !654, line: 359, size: 128, elements: !682)
!682 = !{!683, !684}
!683 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !681, file: !654, line: 360, baseType: !469, size: 32)
!684 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !681, file: !654, line: 361, baseType: !685, size: 64, offset: 64)
!685 = !DICompositeType(tag: DW_TAG_array_type, baseType: !651, size: 64, elements: !575)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !672, file: !654, line: 173, baseType: !3, size: 32)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !672, file: !654, line: 174, baseType: !688, size: 32)
!688 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !654, line: 133, baseType: !689)
!689 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !654, line: 115, size: 32, elements: !690)
!690 = !{!691, !692, !693, !694, !695, !696, !697, !698}
!691 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !689, file: !654, line: 118, baseType: !5, size: 8, flags: DIFlagBitField, extraData: i64 0)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !689, file: !654, line: 120, baseType: !5, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !689, file: !654, line: 121, baseType: !5, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !689, file: !654, line: 123, baseType: !5, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !689, file: !654, line: 125, baseType: !5, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !689, file: !654, line: 127, baseType: !5, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !689, file: !654, line: 130, baseType: !5, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !689, file: !654, line: 132, baseType: !5, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !672, file: !654, line: 175, baseType: !700, size: 64)
!700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !701, size: 64)
!701 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !654, line: 175, flags: DIFlagFwdDecl)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !672, file: !654, line: 176, baseType: !703, size: 64)
!703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !705, line: 75, size: 256, elements: !706)
!705 = !DIFile(filename: "./bitmap.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!706 = !{!707, !721, !722, !723}
!707 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !704, file: !705, line: 76, baseType: !708, size: 64)
!708 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !709, size: 64)
!709 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !705, line: 68, baseType: !710)
!710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !705, line: 63, size: 320, elements: !711)
!711 = !{!712, !714, !715, !716}
!712 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !710, file: !705, line: 64, baseType: !713, size: 64)
!713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !710, size: 64)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !710, file: !705, line: 65, baseType: !713, size: 64, offset: 64)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !710, file: !705, line: 66, baseType: !5, size: 32, offset: 128)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !710, file: !705, line: 67, baseType: !717, size: 128, offset: 192)
!717 = !DICompositeType(tag: DW_TAG_array_type, baseType: !718, size: 128, elements: !719)
!718 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !705, line: 29, baseType: !530)
!719 = !{!720}
!720 = !DISubrange(count: 2)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !704, file: !705, line: 77, baseType: !708, size: 64, offset: 64)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !704, file: !705, line: 78, baseType: !5, size: 32, offset: 128)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !704, file: !705, line: 79, baseType: !724, size: 64, offset: 192)
!724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !725, size: 64)
!725 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !705, line: 49, baseType: !726)
!726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !705, line: 45, size: 832, elements: !727)
!727 = !{!728, !729, !730}
!728 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !726, file: !705, line: 46, baseType: !713, size: 64)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !726, file: !705, line: 47, baseType: !703, size: 64, offset: 64)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !726, file: !705, line: 48, baseType: !731, size: 704, offset: 128)
!731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !732, line: 164, size: 704, elements: !733)
!732 = !DIFile(filename: "./include/obstack.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!733 = !{!734, !735, !745, !746, !747, !748, !749, !750, !754, !758, !759, !760, !761}
!734 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !731, file: !732, line: 166, baseType: !532, size: 64)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !731, file: !732, line: 167, baseType: !736, size: 64, offset: 64)
!736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !737, size: 64)
!737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !732, line: 157, size: 192, elements: !738)
!738 = !{!739, !740, !741}
!739 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !737, file: !732, line: 159, baseType: !471, size: 64)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !737, file: !732, line: 160, baseType: !736, size: 64, offset: 64)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !737, file: !732, line: 161, baseType: !742, size: 32, offset: 128)
!742 = !DICompositeType(tag: DW_TAG_array_type, baseType: !472, size: 32, elements: !743)
!743 = !{!744}
!744 = !DISubrange(count: 4)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !731, file: !732, line: 168, baseType: !471, size: 64, offset: 128)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !731, file: !732, line: 169, baseType: !471, size: 64, offset: 192)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !731, file: !732, line: 170, baseType: !471, size: 64, offset: 256)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !731, file: !732, line: 171, baseType: !532, size: 64, offset: 320)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !731, file: !732, line: 172, baseType: !469, size: 32, offset: 384)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !731, file: !732, line: 176, baseType: !751, size: 64, offset: 448)
!751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !752, size: 64)
!752 = !DISubroutineType(types: !753)
!753 = !{!736, !473, !532}
!754 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !731, file: !732, line: 177, baseType: !755, size: 64, offset: 512)
!755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !756, size: 64)
!756 = !DISubroutineType(types: !757)
!757 = !{null, !473, !736}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !731, file: !732, line: 178, baseType: !473, size: 64, offset: 576)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !731, file: !732, line: 179, baseType: !5, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !731, file: !732, line: 180, baseType: !5, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !731, file: !732, line: 184, baseType: !5, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !672, file: !654, line: 177, baseType: !476, size: 64)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !672, file: !654, line: 178, baseType: !764, size: 64)
!764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !765, size: 64)
!765 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !341, line: 217, size: 832, elements: !766)
!766 = !{!767, !1012, !1013, !1014, !1070, !1074, !1075, !1076, !1094, !1095, !1096, !1097, !1098, !1099}
!767 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !765, file: !341, line: 219, baseType: !768, size: 64)
!768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !769, size: 64)
!769 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !341, line: 151, baseType: !770)
!770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !341, line: 151, size: 128, elements: !771)
!771 = !{!772}
!772 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !770, file: !341, line: 151, baseType: !773, size: 128)
!773 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !341, line: 150, baseType: !774)
!774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !341, line: 150, size: 128, elements: !775)
!775 = !{!776, !777, !778}
!776 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !774, file: !341, line: 150, baseType: !5, size: 32)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !774, file: !341, line: 150, baseType: !5, size: 32, offset: 32)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !774, file: !341, line: 150, baseType: !779, size: 64, offset: 64)
!779 = !DICompositeType(tag: DW_TAG_array_type, baseType: !780, size: 64, elements: !575)
!780 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !477, line: 108, baseType: !781)
!781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !782, size: 64)
!782 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !341, line: 122, size: 512, elements: !783)
!783 = !{!784, !785, !786, !1004, !1005, !1006, !1007, !1008, !1009, !1010}
!784 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !782, file: !341, line: 124, baseType: !764, size: 64)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !782, file: !341, line: 125, baseType: !764, size: 64, offset: 64)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !782, file: !341, line: 131, baseType: !787, size: 64, offset: 128)
!787 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !341, line: 128, size: 64, elements: !788)
!788 = !{!789, !1003}
!789 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !787, file: !341, line: 129, baseType: !790, size: 64)
!790 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !477, line: 66, baseType: !791)
!791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !792, size: 64)
!792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !389, line: 143, size: 192, elements: !793)
!793 = !{!794, !1001, !1002}
!794 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !792, file: !389, line: 145, baseType: !795, size: 64)
!795 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !477, line: 69, baseType: !796)
!796 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !797, size: 64)
!797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !389, line: 136, size: 192, elements: !798)
!798 = !{!799, !999, !1000}
!799 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !797, file: !389, line: 137, baseType: !800, size: 64)
!800 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !477, line: 58, baseType: !801)
!801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !802, size: 64)
!802 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !389, line: 737, size: 768, elements: !803)
!803 = !{!804, !821, !854, !860, !865, !870, !877, !883, !889, !894, !908, !913, !919, !924, !934, !939, !957, !964, !971, !977, !982, !988, !994}
!804 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !802, file: !389, line: 738, baseType: !805, size: 256)
!805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !389, line: 271, size: 256, elements: !806)
!806 = !{!807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !819, !820}
!807 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !805, file: !389, line: 274, baseType: !5, size: 8, flags: DIFlagBitField, extraData: i64 0)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !805, file: !389, line: 277, baseType: !5, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !805, file: !389, line: 281, baseType: !5, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !805, file: !389, line: 284, baseType: !5, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !805, file: !389, line: 291, baseType: !5, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !805, file: !389, line: 295, baseType: !5, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !805, file: !389, line: 298, baseType: !5, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !805, file: !389, line: 301, baseType: !5, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !805, file: !389, line: 307, baseType: !5, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !805, file: !389, line: 312, baseType: !5, size: 32, offset: 32)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !805, file: !389, line: 316, baseType: !601, size: 32, offset: 64)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !805, file: !389, line: 319, baseType: !5, size: 32, offset: 96)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !805, file: !389, line: 323, baseType: !764, size: 64, offset: 128)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !805, file: !389, line: 327, baseType: !476, size: 64, offset: 192)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !802, file: !389, line: 739, baseType: !822, size: 448)
!822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !389, line: 350, size: 448, elements: !823)
!823 = !{!824, !852}
!824 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !822, file: !389, line: 353, baseType: !825, size: 384)
!825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !389, line: 333, size: 384, elements: !826)
!826 = !{!827, !828, !835}
!827 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !825, file: !389, line: 336, baseType: !805, size: 256)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !825, file: !389, line: 343, baseType: !829, size: 64, offset: 256)
!829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !830, size: 64)
!830 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !460, line: 37, size: 128, elements: !831)
!831 = !{!832, !833}
!832 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !830, file: !460, line: 39, baseType: !829, size: 64)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !830, file: !460, line: 40, baseType: !834, size: 64, offset: 64)
!834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !476, size: 64)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !825, file: !389, line: 344, baseType: !836, size: 64, offset: 320)
!836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !837, size: 64)
!837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !460, line: 45, size: 320, elements: !838)
!838 = !{!839, !840}
!839 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !837, file: !460, line: 47, baseType: !836, size: 64)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !837, file: !460, line: 48, baseType: !841, size: 256, offset: 64)
!841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !133, line: 1883, size: 256, elements: !842)
!842 = !{!843, !845, !846, !851}
!843 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !841, file: !133, line: 1884, baseType: !844, size: 64)
!844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !841, size: 64)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !841, file: !133, line: 1885, baseType: !844, size: 64, offset: 64)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !841, file: !133, line: 1891, baseType: !847, size: 64, offset: 128)
!847 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !841, file: !133, line: 1891, size: 64, elements: !848)
!848 = !{!849, !850}
!849 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !847, file: !133, line: 1891, baseType: !800, size: 64)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !847, file: !133, line: 1891, baseType: !476, size: 64)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !841, file: !133, line: 1892, baseType: !834, size: 64, offset: 192)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !822, file: !389, line: 359, baseType: !853, size: 64, offset: 384)
!853 = !DICompositeType(tag: DW_TAG_array_type, baseType: !476, size: 64, elements: !575)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !802, file: !389, line: 740, baseType: !855, size: 512)
!855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !389, line: 365, size: 512, elements: !856)
!856 = !{!857, !858, !859}
!857 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !855, file: !389, line: 368, baseType: !825, size: 384)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !855, file: !389, line: 373, baseType: !476, size: 64, offset: 384)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !855, file: !389, line: 374, baseType: !476, size: 64, offset: 448)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !802, file: !389, line: 741, baseType: !861, size: 576)
!861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !389, line: 380, size: 576, elements: !862)
!862 = !{!863, !864}
!863 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !861, file: !389, line: 383, baseType: !855, size: 512)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !861, file: !389, line: 389, baseType: !853, size: 64, offset: 512)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !802, file: !389, line: 742, baseType: !866, size: 320)
!866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !389, line: 395, size: 320, elements: !867)
!867 = !{!868, !869}
!868 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !866, file: !389, line: 397, baseType: !805, size: 256)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !866, file: !389, line: 400, baseType: !790, size: 64, offset: 256)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !802, file: !389, line: 743, baseType: !871, size: 448)
!871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !389, line: 406, size: 448, elements: !872)
!872 = !{!873, !874, !875, !876}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !871, file: !389, line: 408, baseType: !805, size: 256)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !871, file: !389, line: 412, baseType: !476, size: 64, offset: 256)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !871, file: !389, line: 420, baseType: !476, size: 64, offset: 320)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !871, file: !389, line: 423, baseType: !790, size: 64, offset: 384)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !802, file: !389, line: 744, baseType: !878, size: 384)
!878 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !389, line: 429, size: 384, elements: !879)
!879 = !{!880, !881, !882}
!880 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !878, file: !389, line: 431, baseType: !805, size: 256)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !878, file: !389, line: 434, baseType: !476, size: 64, offset: 256)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !878, file: !389, line: 437, baseType: !790, size: 64, offset: 320)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !802, file: !389, line: 745, baseType: !884, size: 384)
!884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !389, line: 443, size: 384, elements: !885)
!885 = !{!886, !887, !888}
!886 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !884, file: !389, line: 445, baseType: !805, size: 256)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !884, file: !389, line: 449, baseType: !476, size: 64, offset: 256)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !884, file: !389, line: 453, baseType: !790, size: 64, offset: 320)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !802, file: !389, line: 746, baseType: !890, size: 320)
!890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !389, line: 459, size: 320, elements: !891)
!891 = !{!892, !893}
!892 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !890, file: !389, line: 461, baseType: !805, size: 256)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !890, file: !389, line: 464, baseType: !476, size: 64, offset: 256)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !802, file: !389, line: 747, baseType: !895, size: 768)
!895 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !389, line: 469, size: 768, elements: !896)
!896 = !{!897, !898, !899, !900, !901}
!897 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !895, file: !389, line: 471, baseType: !805, size: 256)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !895, file: !389, line: 474, baseType: !5, size: 32, offset: 256)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !895, file: !389, line: 475, baseType: !5, size: 32, offset: 288)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !895, file: !389, line: 478, baseType: !476, size: 64, offset: 320)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !895, file: !389, line: 481, baseType: !902, size: 384, offset: 384)
!902 = !DICompositeType(tag: DW_TAG_array_type, baseType: !903, size: 384, elements: !575)
!903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !133, line: 1917, size: 384, elements: !904)
!904 = !{!905, !906, !907}
!905 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !903, file: !133, line: 1920, baseType: !841, size: 256)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !903, file: !133, line: 1921, baseType: !476, size: 64, offset: 256)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !903, file: !133, line: 1922, baseType: !601, size: 32, offset: 320)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !802, file: !389, line: 748, baseType: !909, size: 320)
!909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !389, line: 487, size: 320, elements: !910)
!910 = !{!911, !912}
!911 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !909, file: !389, line: 490, baseType: !805, size: 256)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !909, file: !389, line: 494, baseType: !469, size: 32, offset: 256)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !802, file: !389, line: 749, baseType: !914, size: 384)
!914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !389, line: 500, size: 384, elements: !915)
!915 = !{!916, !917, !918}
!916 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !914, file: !389, line: 502, baseType: !805, size: 256)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !914, file: !389, line: 506, baseType: !790, size: 64, offset: 256)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !914, file: !389, line: 510, baseType: !790, size: 64, offset: 320)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !802, file: !389, line: 750, baseType: !920, size: 320)
!920 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !389, line: 529, size: 320, elements: !921)
!921 = !{!922, !923}
!922 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !920, file: !389, line: 531, baseType: !805, size: 256)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !920, file: !389, line: 540, baseType: !790, size: 64, offset: 256)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !802, file: !389, line: 751, baseType: !925, size: 704)
!925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !389, line: 546, size: 704, elements: !926)
!926 = !{!927, !928, !929, !930, !931, !932, !933}
!927 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !925, file: !389, line: 549, baseType: !855, size: 512)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !925, file: !389, line: 553, baseType: !474, size: 64, offset: 512)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !925, file: !389, line: 557, baseType: !468, size: 8, offset: 576)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !925, file: !389, line: 558, baseType: !468, size: 8, offset: 584)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !925, file: !389, line: 559, baseType: !468, size: 8, offset: 592)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !925, file: !389, line: 560, baseType: !468, size: 8, offset: 600)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !925, file: !389, line: 566, baseType: !853, size: 64, offset: 640)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !802, file: !389, line: 752, baseType: !935, size: 384)
!935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !389, line: 571, size: 384, elements: !936)
!936 = !{!937, !938}
!937 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !935, file: !389, line: 573, baseType: !866, size: 320)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !935, file: !389, line: 577, baseType: !476, size: 64, offset: 320)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !802, file: !389, line: 753, baseType: !940, size: 576)
!940 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !389, line: 600, size: 576, elements: !941)
!941 = !{!942, !943, !944, !947, !956}
!942 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !940, file: !389, line: 602, baseType: !866, size: 320)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !940, file: !389, line: 605, baseType: !476, size: 64, offset: 320)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !940, file: !389, line: 609, baseType: !945, size: 64, offset: 384)
!945 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !946, line: 46, baseType: !530)
!946 = !DIFile(filename: "/scratch/install/llvm-install-release/lib/clang/9.0.1/include/stddef.h", directory: "")
!947 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !940, file: !389, line: 612, baseType: !948, size: 64, offset: 448)
!948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !949, size: 64)
!949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !389, line: 581, size: 320, elements: !950)
!950 = !{!951, !952, !953, !954, !955}
!951 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !949, file: !389, line: 583, baseType: !132, size: 32)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !949, file: !389, line: 586, baseType: !476, size: 64, offset: 64)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !949, file: !389, line: 589, baseType: !476, size: 64, offset: 128)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !949, file: !389, line: 592, baseType: !476, size: 64, offset: 192)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !949, file: !389, line: 595, baseType: !476, size: 64, offset: 256)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !940, file: !389, line: 616, baseType: !790, size: 64, offset: 512)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !802, file: !389, line: 754, baseType: !958, size: 512)
!958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !389, line: 622, size: 512, elements: !959)
!959 = !{!960, !961, !962, !963}
!960 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !958, file: !389, line: 624, baseType: !866, size: 320)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !958, file: !389, line: 628, baseType: !476, size: 64, offset: 320)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !958, file: !389, line: 632, baseType: !476, size: 64, offset: 384)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !958, file: !389, line: 636, baseType: !476, size: 64, offset: 448)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !802, file: !389, line: 755, baseType: !965, size: 704)
!965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !389, line: 642, size: 704, elements: !966)
!966 = !{!967, !968, !969, !970}
!967 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !965, file: !389, line: 644, baseType: !958, size: 512)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !965, file: !389, line: 648, baseType: !476, size: 64, offset: 512)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !965, file: !389, line: 652, baseType: !476, size: 64, offset: 576)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !965, file: !389, line: 653, baseType: !476, size: 64, offset: 640)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !802, file: !389, line: 756, baseType: !972, size: 448)
!972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !389, line: 663, size: 448, elements: !973)
!973 = !{!974, !975, !976}
!974 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !972, file: !389, line: 665, baseType: !866, size: 320)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !972, file: !389, line: 668, baseType: !476, size: 64, offset: 320)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !972, file: !389, line: 673, baseType: !476, size: 64, offset: 384)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !802, file: !389, line: 757, baseType: !978, size: 384)
!978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !389, line: 694, size: 384, elements: !979)
!979 = !{!980, !981}
!980 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !978, file: !389, line: 696, baseType: !866, size: 320)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !978, file: !389, line: 699, baseType: !476, size: 64, offset: 320)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !802, file: !389, line: 758, baseType: !983, size: 384)
!983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !389, line: 681, size: 384, elements: !984)
!984 = !{!985, !986, !987}
!985 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !983, file: !389, line: 683, baseType: !805, size: 256)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !983, file: !389, line: 686, baseType: !476, size: 64, offset: 256)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !983, file: !389, line: 689, baseType: !476, size: 64, offset: 320)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !802, file: !389, line: 759, baseType: !989, size: 384)
!989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !389, line: 707, size: 384, elements: !990)
!990 = !{!991, !992, !993}
!991 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !989, file: !389, line: 709, baseType: !805, size: 256)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !989, file: !389, line: 712, baseType: !476, size: 64, offset: 256)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !989, file: !389, line: 712, baseType: !476, size: 64, offset: 320)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !802, file: !389, line: 760, baseType: !995, size: 320)
!995 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !389, line: 718, size: 320, elements: !996)
!996 = !{!997, !998}
!997 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !995, file: !389, line: 720, baseType: !805, size: 256)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !995, file: !389, line: 723, baseType: !476, size: 64, offset: 256)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !797, file: !389, line: 138, baseType: !796, size: 64, offset: 64)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !797, file: !389, line: 139, baseType: !796, size: 64, offset: 128)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !792, file: !389, line: 146, baseType: !795, size: 64, offset: 64)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !792, file: !389, line: 152, baseType: !790, size: 64, offset: 128)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !787, file: !341, line: 130, baseType: !651, size: 64)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !782, file: !341, line: 134, baseType: !473, size: 64, offset: 192)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !782, file: !341, line: 137, baseType: !476, size: 64, offset: 256)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !782, file: !341, line: 138, baseType: !601, size: 32, offset: 320)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !782, file: !341, line: 142, baseType: !5, size: 32, offset: 352)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !782, file: !341, line: 144, baseType: !469, size: 32, offset: 384)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !782, file: !341, line: 145, baseType: !469, size: 32, offset: 416)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !782, file: !341, line: 146, baseType: !1011, size: 64, offset: 448)
!1011 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !341, line: 119, baseType: !532)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !765, file: !341, line: 220, baseType: !768, size: 64, offset: 64)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !765, file: !341, line: 223, baseType: !473, size: 64, offset: 128)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !765, file: !341, line: 226, baseType: !1015, size: 64, offset: 192)
!1015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1016, size: 64)
!1016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !328, line: 100, size: 1216, elements: !1017)
!1017 = !{!1018, !1019, !1020, !1021, !1022, !1027, !1028, !1029, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1060, !1068, !1069}
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1016, file: !328, line: 102, baseType: !469, size: 32)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1016, file: !328, line: 105, baseType: !5, size: 32, offset: 32)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1016, file: !328, line: 108, baseType: !764, size: 64, offset: 64)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1016, file: !328, line: 111, baseType: !764, size: 64, offset: 128)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1016, file: !328, line: 114, baseType: !1023, size: 64, offset: 192)
!1023 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !328, line: 41, size: 64, elements: !1024)
!1024 = !{!1025, !1026}
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1023, file: !328, line: 42, baseType: !327, size: 32)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1023, file: !328, line: 43, baseType: !5, size: 32, offset: 32)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1016, file: !328, line: 117, baseType: !5, size: 32, offset: 256)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1016, file: !328, line: 120, baseType: !5, size: 32, offset: 288)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1016, file: !328, line: 123, baseType: !1030, size: 64, offset: 320)
!1030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1031, size: 64)
!1031 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !328, line: 87, baseType: !1032)
!1032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !328, line: 87, size: 128, elements: !1033)
!1033 = !{!1034}
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1032, file: !328, line: 87, baseType: !1035, size: 128)
!1035 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !328, line: 85, baseType: !1036)
!1036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !328, line: 85, size: 128, elements: !1037)
!1037 = !{!1038, !1039, !1040}
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1036, file: !328, line: 85, baseType: !5, size: 32)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1036, file: !328, line: 85, baseType: !5, size: 32, offset: 32)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1036, file: !328, line: 85, baseType: !1041, size: 64, offset: 64)
!1041 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1042, size: 64, elements: !575)
!1042 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !328, line: 84, baseType: !1015)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1016, file: !328, line: 126, baseType: !1015, size: 64, offset: 384)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1016, file: !328, line: 129, baseType: !1015, size: 64, offset: 448)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1016, file: !328, line: 132, baseType: !473, size: 64, offset: 512)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1016, file: !328, line: 139, baseType: !476, size: 64, offset: 576)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1016, file: !328, line: 143, baseType: !525, size: 128, offset: 640)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1016, file: !328, line: 146, baseType: !525, size: 128, offset: 768)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1016, file: !328, line: 148, baseType: !468, size: 8, offset: 896)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1016, file: !328, line: 149, baseType: !468, size: 8, offset: 904)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1016, file: !328, line: 153, baseType: !336, size: 32, offset: 928)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1016, file: !328, line: 156, baseType: !1053, size: 64, offset: 960)
!1053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1054, size: 64)
!1054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !328, line: 48, size: 320, elements: !1055)
!1055 = !{!1056, !1057, !1058, !1059}
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1054, file: !328, line: 50, baseType: !800, size: 64)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1054, file: !328, line: 59, baseType: !525, size: 128, offset: 64)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1054, file: !328, line: 64, baseType: !468, size: 8, offset: 192)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1054, file: !328, line: 67, baseType: !1053, size: 64, offset: 256)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1016, file: !328, line: 159, baseType: !1061, size: 64, offset: 1024)
!1061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1062, size: 64)
!1062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !328, line: 72, size: 256, elements: !1063)
!1063 = !{!1064, !1065, !1066, !1067}
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1062, file: !328, line: 74, baseType: !781, size: 64)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1062, file: !328, line: 77, baseType: !1061, size: 64, offset: 64)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1062, file: !328, line: 78, baseType: !1061, size: 64, offset: 128)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1062, file: !328, line: 81, baseType: !1061, size: 64, offset: 192)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1016, file: !328, line: 162, baseType: !468, size: 8, offset: 1088)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1016, file: !328, line: 166, baseType: !476, size: 64, offset: 1152)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !765, file: !341, line: 229, baseType: !1071, size: 128, offset: 256)
!1071 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1072, size: 128, elements: !719)
!1072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1073, size: 64)
!1073 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !341, line: 229, flags: DIFlagFwdDecl)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !765, file: !341, line: 232, baseType: !764, size: 64, offset: 384)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !765, file: !341, line: 233, baseType: !764, size: 64, offset: 448)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !765, file: !341, line: 238, baseType: !1077, size: 64, offset: 512)
!1077 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !341, line: 235, size: 64, elements: !1078)
!1078 = !{!1079, !1085}
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1077, file: !341, line: 236, baseType: !1080, size: 64)
!1080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1081, size: 64)
!1081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !341, line: 273, size: 128, elements: !1082)
!1082 = !{!1083, !1084}
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1081, file: !341, line: 275, baseType: !790, size: 64)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1081, file: !341, line: 278, baseType: !790, size: 64, offset: 64)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1077, file: !341, line: 237, baseType: !1086, size: 64)
!1086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1087, size: 64)
!1087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !341, line: 259, size: 320, elements: !1088)
!1088 = !{!1089, !1090, !1091, !1092, !1093}
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1087, file: !341, line: 261, baseType: !651, size: 64)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1087, file: !341, line: 262, baseType: !651, size: 64, offset: 64)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1087, file: !341, line: 266, baseType: !651, size: 64, offset: 128)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1087, file: !341, line: 267, baseType: !651, size: 64, offset: 192)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1087, file: !341, line: 270, baseType: !469, size: 32, offset: 256)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !765, file: !341, line: 241, baseType: !1011, size: 64, offset: 576)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !765, file: !341, line: 244, baseType: !469, size: 32, offset: 640)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !765, file: !341, line: 247, baseType: !469, size: 32, offset: 672)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !765, file: !341, line: 250, baseType: !469, size: 32, offset: 704)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !765, file: !341, line: 253, baseType: !469, size: 32, offset: 736)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !765, file: !341, line: 256, baseType: !469, size: 32, offset: 768)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !672, file: !654, line: 179, baseType: !1101, size: 64)
!1101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1102, size: 64)
!1102 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !654, line: 150, baseType: !1103)
!1103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !654, line: 142, size: 320, elements: !1104)
!1104 = !{!1105, !1106, !1107, !1108, !1111, !1112}
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1103, file: !654, line: 144, baseType: !476, size: 64)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1103, file: !654, line: 145, baseType: !651, size: 64, offset: 64)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1103, file: !654, line: 146, baseType: !651, size: 64, offset: 128)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1103, file: !654, line: 147, baseType: !1109, size: 32, offset: 192)
!1109 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1110, line: 31, baseType: !469)
!1110 = !DIFile(filename: "./alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1103, file: !654, line: 148, baseType: !5, size: 32, offset: 224)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1103, file: !654, line: 149, baseType: !468, size: 8, offset: 256)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !672, file: !654, line: 180, baseType: !1114, size: 64)
!1114 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1115, size: 64)
!1115 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !654, line: 162, baseType: !1116)
!1116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !654, line: 159, size: 128, elements: !1117)
!1117 = !{!1118, !1119}
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1116, file: !654, line: 160, baseType: !476, size: 64)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1116, file: !654, line: 161, baseType: !532, size: 64, offset: 64)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !672, file: !654, line: 181, baseType: !1121, size: 64)
!1121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1122, size: 64)
!1122 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !654, line: 181, flags: DIFlagFwdDecl)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !667, file: !654, line: 317, baseType: !1124, size: 64)
!1124 = !DICompositeType(tag: DW_TAG_array_type, baseType: !532, size: 64, elements: !575)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !667, file: !654, line: 318, baseType: !1126, size: 320)
!1126 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !654, line: 188, size: 320, elements: !1127)
!1127 = !{!1128, !1130, !1187}
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1126, file: !654, line: 190, baseType: !1129, size: 192)
!1129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !671, size: 192, elements: !550)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1126, file: !654, line: 193, baseType: !1131, size: 64, offset: 192)
!1131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1132, size: 64)
!1132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !654, line: 206, size: 320, elements: !1133)
!1133 = !{!1134, !1172, !1173, !1174, !1186}
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1132, file: !654, line: 208, baseType: !1135, size: 64)
!1135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1136, size: 64)
!1136 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !477, line: 62, baseType: !1137)
!1137 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1138, line: 538, size: 256, elements: !1139)
!1138 = !DIFile(filename: "./output.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1139 = !{!1140, !1144, !1150, !1163}
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1137, file: !1138, line: 539, baseType: !1141, size: 32)
!1141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1138, line: 482, size: 32, elements: !1142)
!1142 = !{!1143}
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1141, file: !1138, line: 484, baseType: !5, size: 32)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1137, file: !1138, line: 540, baseType: !1145, size: 192)
!1145 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1138, line: 488, size: 192, elements: !1146)
!1146 = !{!1147, !1148, !1149}
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1145, file: !1138, line: 489, baseType: !1141, size: 32)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1145, file: !1138, line: 492, baseType: !474, size: 64, offset: 64)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1145, file: !1138, line: 496, baseType: !476, size: 64, offset: 128)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1137, file: !1138, line: 541, baseType: !1151, size: 256)
!1151 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1138, line: 504, size: 256, elements: !1152)
!1152 = !{!1153, !1154, !1161, !1162}
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1151, file: !1138, line: 505, baseType: !1141, size: 32)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1151, file: !1138, line: 509, baseType: !1155, size: 64, offset: 64)
!1155 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1138, line: 501, baseType: !1156)
!1156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1157, size: 64)
!1157 = !DISubroutineType(types: !1158)
!1158 = !{null, !1159}
!1159 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1160, size: 64)
!1160 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1151, file: !1138, line: 510, baseType: !1159, size: 64, offset: 128)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1151, file: !1138, line: 513, baseType: !1135, size: 64, offset: 192)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1137, file: !1138, line: 542, baseType: !1164, size: 128)
!1164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1138, line: 530, size: 128, elements: !1165)
!1165 = !{!1166, !1167}
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1164, file: !1138, line: 531, baseType: !1141, size: 32)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1164, file: !1138, line: 534, baseType: !1168, size: 64, offset: 64)
!1168 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1138, line: 525, baseType: !1169)
!1169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1170, size: 64)
!1170 = !DISubroutineType(types: !1171)
!1171 = !{!468, !476, !474, !530, !530}
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1132, file: !654, line: 211, baseType: !5, size: 32, offset: 64)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1132, file: !654, line: 214, baseType: !532, size: 64, offset: 128)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1132, file: !654, line: 224, baseType: !1175, size: 64, offset: 192)
!1175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1176, size: 64)
!1176 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !654, line: 202, baseType: !1177)
!1177 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !654, line: 202, size: 128, elements: !1178)
!1178 = !{!1179}
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1177, file: !654, line: 202, baseType: !1180, size: 128)
!1180 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !654, line: 200, baseType: !1181)
!1181 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !654, line: 200, size: 128, elements: !1182)
!1182 = !{!1183, !1184, !1185}
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1181, file: !654, line: 200, baseType: !5, size: 32)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1181, file: !654, line: 200, baseType: !5, size: 32, offset: 32)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1181, file: !654, line: 200, baseType: !685, size: 64, offset: 64)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1132, file: !654, line: 234, baseType: !1175, size: 64, offset: 256)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1126, file: !654, line: 197, baseType: !532, size: 64, offset: 256)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !667, file: !654, line: 319, baseType: !539, size: 256)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !667, file: !654, line: 320, baseType: !558, size: 192)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !479, file: !133, line: 3384, baseType: !1191, size: 1472)
!1191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !133, line: 3114, size: 1472, elements: !1192)
!1192 = !{!1193, !1214, !1215, !1216, !1217}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1191, file: !133, line: 3115, baseType: !1194, size: 1216)
!1194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !133, line: 2984, size: 1216, elements: !1195)
!1195 = !{!1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213}
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1194, file: !133, line: 2985, baseType: !647, size: 960)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1194, file: !133, line: 2986, baseType: !476, size: 64, offset: 960)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1194, file: !133, line: 2987, baseType: !476, size: 64, offset: 1024)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1194, file: !133, line: 2988, baseType: !476, size: 64, offset: 1088)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1194, file: !133, line: 2991, baseType: !5, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1194, file: !133, line: 2992, baseType: !5, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1194, file: !133, line: 2993, baseType: !5, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1194, file: !133, line: 2994, baseType: !5, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1194, file: !133, line: 2995, baseType: !5, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1194, file: !133, line: 2996, baseType: !5, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1194, file: !133, line: 2998, baseType: !5, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1194, file: !133, line: 3000, baseType: !5, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1194, file: !133, line: 3002, baseType: !5, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1194, file: !133, line: 3003, baseType: !5, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1194, file: !133, line: 3004, baseType: !5, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1194, file: !133, line: 3005, baseType: !5, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1194, file: !133, line: 3007, baseType: !5, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1194, file: !133, line: 3010, baseType: !5, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1191, file: !133, line: 3117, baseType: !476, size: 64, offset: 1216)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1191, file: !133, line: 3119, baseType: !476, size: 64, offset: 1280)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1191, file: !133, line: 3121, baseType: !476, size: 64, offset: 1344)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1191, file: !133, line: 3123, baseType: !476, size: 64, offset: 1408)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !479, file: !133, line: 3385, baseType: !1219, size: 1088)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !133, line: 2874, size: 1088, elements: !1220)
!1220 = !{!1221, !1222, !1223}
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1219, file: !133, line: 2875, baseType: !647, size: 960)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1219, file: !133, line: 2876, baseType: !651, size: 64, offset: 960)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1219, file: !133, line: 2877, baseType: !1224, size: 64, offset: 1024)
!1224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1225, size: 64)
!1225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1226, line: 172, size: 128, elements: !1227)
!1226 = !DIFile(filename: "./tree-flow.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1227 = !{!1228, !1229, !1230, !1231, !1232, !1233, !1234}
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1225, file: !1226, line: 174, baseType: !5, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1225, file: !1226, line: 178, baseType: !5, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1225, file: !1226, line: 183, baseType: !5, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1225, file: !1226, line: 187, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1225, file: !1226, line: 192, baseType: !5, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1225, file: !1226, line: 195, baseType: !5, size: 32, offset: 32)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1225, file: !1226, line: 199, baseType: !476, size: 64, offset: 64)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !479, file: !133, line: 3386, baseType: !1194, size: 1216)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !479, file: !133, line: 3387, baseType: !1237, size: 1280)
!1237 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !133, line: 3093, size: 1280, elements: !1238)
!1238 = !{!1239, !1240}
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1237, file: !133, line: 3094, baseType: !1194, size: 1216)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1237, file: !133, line: 3095, baseType: !1224, size: 64, offset: 1216)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !479, file: !133, line: 3388, baseType: !1242, size: 1216)
!1242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !133, line: 2824, size: 1216, elements: !1243)
!1243 = !{!1244, !1245, !1246, !1247, !1248, !1249}
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1242, file: !133, line: 2825, baseType: !609, size: 896)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1242, file: !133, line: 2827, baseType: !476, size: 64, offset: 896)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1242, file: !133, line: 2828, baseType: !476, size: 64, offset: 960)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1242, file: !133, line: 2829, baseType: !476, size: 64, offset: 1024)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1242, file: !133, line: 2830, baseType: !476, size: 64, offset: 1088)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1242, file: !133, line: 2831, baseType: !476, size: 64, offset: 1152)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !479, file: !133, line: 3389, baseType: !1251, size: 1024)
!1251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !133, line: 2850, size: 1024, elements: !1252)
!1252 = !{!1253, !1254, !1255}
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1251, file: !133, line: 2851, baseType: !647, size: 960)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1251, file: !133, line: 2852, baseType: !469, size: 32, offset: 960)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1251, file: !133, line: 2853, baseType: !469, size: 32, offset: 992)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !479, file: !133, line: 3390, baseType: !1257, size: 1024)
!1257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !133, line: 2857, size: 1024, elements: !1258)
!1258 = !{!1259, !1260}
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1257, file: !133, line: 2858, baseType: !647, size: 960)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1257, file: !133, line: 2859, baseType: !1224, size: 64, offset: 960)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !479, file: !133, line: 3391, baseType: !1262, size: 960)
!1262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !133, line: 2862, size: 960, elements: !1263)
!1263 = !{!1264}
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1262, file: !133, line: 2863, baseType: !647, size: 960)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !479, file: !133, line: 3392, baseType: !1266, size: 1472)
!1266 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !133, line: 3304, size: 1472, elements: !1267)
!1267 = !{!1268}
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1266, file: !133, line: 3305, baseType: !1191, size: 1472)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !479, file: !133, line: 3393, baseType: !1270, size: 1792)
!1270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !133, line: 3248, size: 1792, elements: !1271)
!1271 = !{!1272, !1273, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510}
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1270, file: !133, line: 3249, baseType: !1191, size: 1472)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1270, file: !133, line: 3251, baseType: !1274, size: 64, offset: 1472)
!1274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1275, size: 64)
!1275 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1276, line: 463, size: 1152, elements: !1277)
!1276 = !DIFile(filename: "./function.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1277 = !{!1278, !1281, !1312, !1313, !1426, !1434, !1435, !1436, !1437, !1438, !1439, !1463, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489}
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1275, file: !1276, line: 464, baseType: !1279, size: 64)
!1279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1280, size: 64)
!1280 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1276, line: 464, flags: DIFlagFwdDecl)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1275, file: !1276, line: 467, baseType: !1282, size: 64, offset: 64)
!1282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1283, size: 64)
!1283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !341, line: 374, size: 640, elements: !1284)
!1284 = !{!1285, !1287, !1288, !1301, !1302, !1303, !1304, !1305, !1306, !1308, !1310, !1311}
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1283, file: !341, line: 377, baseType: !1286, size: 64)
!1286 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !477, line: 111, baseType: !764)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1283, file: !341, line: 378, baseType: !1286, size: 64, offset: 64)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1283, file: !341, line: 381, baseType: !1289, size: 64, offset: 128)
!1289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1290, size: 64)
!1290 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !341, line: 282, baseType: !1291)
!1291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !341, line: 282, size: 128, elements: !1292)
!1292 = !{!1293}
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1291, file: !341, line: 282, baseType: !1294, size: 128)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !341, line: 281, baseType: !1295)
!1295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !341, line: 281, size: 128, elements: !1296)
!1296 = !{!1297, !1298, !1299}
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1295, file: !341, line: 281, baseType: !5, size: 32)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1295, file: !341, line: 281, baseType: !5, size: 32, offset: 32)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1295, file: !341, line: 281, baseType: !1300, size: 64, offset: 64)
!1300 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1286, size: 64, elements: !575)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1283, file: !341, line: 384, baseType: !469, size: 32, offset: 192)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1283, file: !341, line: 387, baseType: !469, size: 32, offset: 224)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1283, file: !341, line: 390, baseType: !469, size: 32, offset: 256)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1283, file: !341, line: 394, baseType: !1289, size: 64, offset: 320)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1283, file: !341, line: 396, baseType: !340, size: 32, offset: 384)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1283, file: !341, line: 399, baseType: !1307, size: 64, offset: 416)
!1307 = !DICompositeType(tag: DW_TAG_array_type, baseType: !346, size: 64, elements: !719)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1283, file: !341, line: 402, baseType: !1309, size: 64, offset: 480)
!1309 = !DICompositeType(tag: DW_TAG_array_type, baseType: !5, size: 64, elements: !719)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1283, file: !341, line: 406, baseType: !469, size: 32, offset: 544)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1283, file: !341, line: 409, baseType: !469, size: 32, offset: 576)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1275, file: !1276, line: 470, baseType: !791, size: 64, offset: 128)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1275, file: !1276, line: 473, baseType: !1314, size: 64, offset: 192)
!1314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1315, size: 64)
!1315 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1226, line: 39, size: 1152, elements: !1316)
!1316 = !{!1317, !1365, !1378, !1390, !1391, !1403, !1404, !1408, !1409, !1410, !1411, !1412}
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1315, file: !1226, line: 41, baseType: !1318, size: 64)
!1318 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1319, line: 144, baseType: !1320)
!1319 = !DIFile(filename: "./include/hashtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1321, size: 64)
!1321 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1319, line: 100, size: 896, elements: !1322)
!1322 = !{!1323, !1329, !1334, !1339, !1341, !1342, !1343, !1344, !1345, !1346, !1351, !1353, !1354, !1359, !1364}
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1321, file: !1319, line: 102, baseType: !1324, size: 64)
!1324 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1319, line: 52, baseType: !1325)
!1325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1326, size: 64)
!1326 = !DISubroutineType(types: !1327)
!1327 = !{!1328, !1159}
!1328 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1319, line: 47, baseType: !5)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1321, file: !1319, line: 105, baseType: !1330, size: 64, offset: 64)
!1330 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1319, line: 59, baseType: !1331)
!1331 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1332, size: 64)
!1332 = !DISubroutineType(types: !1333)
!1333 = !{!469, !1159, !1159}
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1321, file: !1319, line: 108, baseType: !1335, size: 64, offset: 128)
!1335 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1319, line: 63, baseType: !1336)
!1336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1337, size: 64)
!1337 = !DISubroutineType(types: !1338)
!1338 = !{null, !473}
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1321, file: !1319, line: 111, baseType: !1340, size: 64, offset: 192)
!1340 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !473, size: 64)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1321, file: !1319, line: 114, baseType: !945, size: 64, offset: 256)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1321, file: !1319, line: 117, baseType: !945, size: 64, offset: 320)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1321, file: !1319, line: 120, baseType: !945, size: 64, offset: 384)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1321, file: !1319, line: 124, baseType: !5, size: 32, offset: 448)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1321, file: !1319, line: 128, baseType: !5, size: 32, offset: 480)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1321, file: !1319, line: 131, baseType: !1347, size: 64, offset: 512)
!1347 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1319, line: 75, baseType: !1348)
!1348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1349, size: 64)
!1349 = !DISubroutineType(types: !1350)
!1350 = !{!473, !945, !945}
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1321, file: !1319, line: 132, baseType: !1352, size: 64, offset: 576)
!1352 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1319, line: 78, baseType: !1336)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1321, file: !1319, line: 135, baseType: !473, size: 64, offset: 640)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1321, file: !1319, line: 136, baseType: !1355, size: 64, offset: 704)
!1355 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1319, line: 82, baseType: !1356)
!1356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1357, size: 64)
!1357 = !DISubroutineType(types: !1358)
!1358 = !{!473, !473, !945, !945}
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1321, file: !1319, line: 137, baseType: !1360, size: 64, offset: 768)
!1360 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1319, line: 83, baseType: !1361)
!1361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1362, size: 64)
!1362 = !DISubroutineType(types: !1363)
!1363 = !{null, !473, !473}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1321, file: !1319, line: 141, baseType: !5, size: 32, offset: 832)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1315, file: !1226, line: 48, baseType: !1366, size: 64, offset: 64)
!1366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1367, size: 64)
!1367 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !389, line: 35, baseType: !1368)
!1368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !389, line: 35, size: 128, elements: !1369)
!1369 = !{!1370}
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1368, file: !389, line: 35, baseType: !1371, size: 128)
!1371 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !389, line: 33, baseType: !1372)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !389, line: 33, size: 128, elements: !1373)
!1373 = !{!1374, !1375, !1376}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1372, file: !389, line: 33, baseType: !5, size: 32)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1372, file: !389, line: 33, baseType: !5, size: 32, offset: 32)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1372, file: !389, line: 33, baseType: !1377, size: 64, offset: 64)
!1377 = !DICompositeType(tag: DW_TAG_array_type, baseType: !800, size: 64, elements: !575)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1315, file: !1226, line: 51, baseType: !1379, size: 64, offset: 128)
!1379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1380, size: 64)
!1380 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !133, line: 183, baseType: !1381)
!1381 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !133, line: 183, size: 128, elements: !1382)
!1382 = !{!1383}
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1381, file: !133, line: 183, baseType: !1384, size: 128)
!1384 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !133, line: 182, baseType: !1385)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !133, line: 182, size: 128, elements: !1386)
!1386 = !{!1387, !1388, !1389}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1385, file: !133, line: 182, baseType: !5, size: 32)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1385, file: !133, line: 182, baseType: !5, size: 32, offset: 32)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1385, file: !133, line: 182, baseType: !853, size: 64, offset: 64)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1315, file: !1226, line: 54, baseType: !476, size: 64, offset: 192)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1315, file: !1226, line: 57, baseType: !1392, size: 128, offset: 256)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1393, line: 31, size: 128, elements: !1394)
!1393 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1394 = !{!1395, !1396, !1397, !1398, !1399, !1400, !1401}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1392, file: !1393, line: 35, baseType: !5, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1392, file: !1393, line: 39, baseType: !5, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1392, file: !1393, line: 42, baseType: !5, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1392, file: !1393, line: 46, baseType: !5, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1392, file: !1393, line: 50, baseType: !5, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1392, file: !1393, line: 53, baseType: !5, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1392, file: !1393, line: 56, baseType: !1402, size: 64, offset: 64)
!1402 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !477, line: 47, baseType: !703)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1315, file: !1226, line: 60, baseType: !1392, size: 128, offset: 384)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1315, file: !1226, line: 64, baseType: !1405, size: 64, offset: 512)
!1405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1406, size: 64)
!1406 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1407, line: 33, flags: DIFlagFwdDecl)
!1407 = !DIFile(filename: "./pointer-set.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1315, file: !1226, line: 67, baseType: !476, size: 64, offset: 576)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1315, file: !1226, line: 73, baseType: !1318, size: 64, offset: 640)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1315, file: !1226, line: 77, baseType: !1402, size: 64, offset: 704)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1315, file: !1226, line: 80, baseType: !5, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1315, file: !1226, line: 82, baseType: !1413, size: 320, offset: 832)
!1413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !460, line: 62, size: 320, elements: !1414)
!1414 = !{!1415, !1421, !1422, !1423, !1424, !1425}
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1413, file: !460, line: 63, baseType: !1416, size: 64)
!1416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1417, size: 64)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !460, line: 56, size: 128, elements: !1418)
!1418 = !{!1419, !1420}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1417, file: !460, line: 57, baseType: !1416, size: 64)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1417, file: !460, line: 58, baseType: !574, size: 8, offset: 64)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1413, file: !460, line: 64, baseType: !5, size: 32, offset: 64)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1413, file: !460, line: 66, baseType: !5, size: 32, offset: 96)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1413, file: !460, line: 68, baseType: !468, size: 8, offset: 128)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1413, file: !460, line: 70, baseType: !829, size: 64, offset: 192)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1413, file: !460, line: 71, baseType: !836, size: 64, offset: 256)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1275, file: !1276, line: 476, baseType: !1427, size: 64, offset: 256)
!1427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1428, size: 64)
!1428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !328, line: 187, size: 256, elements: !1429)
!1429 = !{!1430, !1431, !1432, !1433}
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1428, file: !328, line: 189, baseType: !469, size: 32)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1428, file: !328, line: 192, baseType: !1030, size: 64, offset: 64)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1428, file: !328, line: 197, baseType: !1318, size: 64, offset: 128)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1428, file: !328, line: 200, baseType: !1015, size: 64, offset: 192)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1275, file: !1276, line: 479, baseType: !1318, size: 64, offset: 320)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1275, file: !1276, line: 484, baseType: !476, size: 64, offset: 384)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1275, file: !1276, line: 488, baseType: !476, size: 64, offset: 448)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1275, file: !1276, line: 493, baseType: !476, size: 64, offset: 512)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1275, file: !1276, line: 496, baseType: !476, size: 64, offset: 576)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1275, file: !1276, line: 501, baseType: !1440, size: 64, offset: 640)
!1440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1441, size: 64)
!1441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !352, line: 2355, size: 576, elements: !1442)
!1442 = !{!1443, !1446, !1447, !1448, !1449, !1451, !1452, !1457, !1458, !1459, !1460, !1461, !1462}
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1441, file: !352, line: 2356, baseType: !1444, size: 64)
!1444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1445, size: 64)
!1445 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !352, line: 2356, flags: DIFlagFwdDecl)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1441, file: !352, line: 2357, baseType: !474, size: 64, offset: 64)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1441, file: !352, line: 2358, baseType: !469, size: 32, offset: 128)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1441, file: !352, line: 2359, baseType: !469, size: 32, offset: 160)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1441, file: !352, line: 2360, baseType: !1450, size: 128, offset: 192)
!1450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !469, size: 128, elements: !743)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1441, file: !352, line: 2364, baseType: !469, size: 32, offset: 320)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1441, file: !352, line: 2367, baseType: !1453, size: 128, offset: 384)
!1453 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !352, line: 2349, size: 128, elements: !1454)
!1454 = !{!1455, !1456}
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1453, file: !352, line: 2351, baseType: !651, size: 64)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1453, file: !352, line: 2352, baseType: !532, size: 64, offset: 64)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1441, file: !352, line: 2371, baseType: !351, size: 32, offset: 512)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1441, file: !352, line: 2374, baseType: !5, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1441, file: !352, line: 2377, baseType: !5, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1441, file: !352, line: 2381, baseType: !5, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1441, file: !352, line: 2392, baseType: !5, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1441, file: !352, line: 2396, baseType: !5, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1275, file: !1276, line: 504, baseType: !1464, size: 64, offset: 704)
!1464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1465, size: 64)
!1465 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1276, line: 504, flags: DIFlagFwdDecl)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1275, file: !1276, line: 507, baseType: !1318, size: 64, offset: 768)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1275, file: !1276, line: 510, baseType: !469, size: 32, offset: 832)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1275, file: !1276, line: 513, baseType: !469, size: 32, offset: 864)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1275, file: !1276, line: 516, baseType: !601, size: 32, offset: 896)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1275, file: !1276, line: 519, baseType: !601, size: 32, offset: 928)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1275, file: !1276, line: 522, baseType: !5, size: 32, offset: 960)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1275, file: !1276, line: 523, baseType: !5, size: 32, offset: 992)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1275, file: !1276, line: 528, baseType: !474, size: 64, offset: 1024)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1275, file: !1276, line: 535, baseType: !5, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1275, file: !1276, line: 539, baseType: !5, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1275, file: !1276, line: 543, baseType: !5, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1275, file: !1276, line: 546, baseType: !5, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1275, file: !1276, line: 550, baseType: !5, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1275, file: !1276, line: 554, baseType: !5, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1275, file: !1276, line: 559, baseType: !5, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1275, file: !1276, line: 562, baseType: !5, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1275, file: !1276, line: 571, baseType: !5, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1275, file: !1276, line: 573, baseType: !5, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1275, file: !1276, line: 574, baseType: !5, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1275, file: !1276, line: 581, baseType: !5, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1275, file: !1276, line: 585, baseType: !5, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1275, file: !1276, line: 588, baseType: !5, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1275, file: !1276, line: 592, baseType: !5, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1275, file: !1276, line: 598, baseType: !5, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1270, file: !133, line: 3254, baseType: !476, size: 64, offset: 1536)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1270, file: !133, line: 3257, baseType: !476, size: 64, offset: 1600)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1270, file: !133, line: 3258, baseType: !476, size: 64, offset: 1664)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1270, file: !133, line: 3264, baseType: !5, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1270, file: !133, line: 3265, baseType: !5, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1270, file: !133, line: 3267, baseType: !5, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1270, file: !133, line: 3268, baseType: !5, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1270, file: !133, line: 3269, baseType: !5, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1270, file: !133, line: 3271, baseType: !5, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1270, file: !133, line: 3272, baseType: !5, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1270, file: !133, line: 3273, baseType: !5, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1270, file: !133, line: 3274, baseType: !5, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1270, file: !133, line: 3275, baseType: !5, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1270, file: !133, line: 3276, baseType: !5, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1270, file: !133, line: 3277, baseType: !5, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1270, file: !133, line: 3279, baseType: !5, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1270, file: !133, line: 3280, baseType: !5, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1270, file: !133, line: 3281, baseType: !5, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1270, file: !133, line: 3282, baseType: !5, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1270, file: !133, line: 3283, baseType: !5, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1270, file: !133, line: 3284, baseType: !5, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !479, file: !133, line: 3394, baseType: !1512, size: 1344)
!1512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !133, line: 2279, size: 1344, elements: !1513)
!1513 = !{!1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555}
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1512, file: !133, line: 2280, baseType: !515, size: 192)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1512, file: !133, line: 2281, baseType: !476, size: 64, offset: 192)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1512, file: !133, line: 2282, baseType: !476, size: 64, offset: 256)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1512, file: !133, line: 2283, baseType: !476, size: 64, offset: 320)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1512, file: !133, line: 2284, baseType: !476, size: 64, offset: 384)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1512, file: !133, line: 2285, baseType: !5, size: 32, offset: 448)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1512, file: !133, line: 2287, baseType: !5, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1512, file: !133, line: 2288, baseType: !5, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1512, file: !133, line: 2289, baseType: !5, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1512, file: !133, line: 2290, baseType: !5, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1512, file: !133, line: 2291, baseType: !5, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1512, file: !133, line: 2292, baseType: !5, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1512, file: !133, line: 2294, baseType: !5, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1512, file: !133, line: 2296, baseType: !5, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1512, file: !133, line: 2297, baseType: !5, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1512, file: !133, line: 2298, baseType: !5, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1512, file: !133, line: 2299, baseType: !5, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1512, file: !133, line: 2300, baseType: !5, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1512, file: !133, line: 2301, baseType: !5, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1512, file: !133, line: 2302, baseType: !5, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1512, file: !133, line: 2303, baseType: !5, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1512, file: !133, line: 2305, baseType: !5, size: 32, offset: 512)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1512, file: !133, line: 2306, baseType: !1109, size: 32, offset: 544)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1512, file: !133, line: 2307, baseType: !476, size: 64, offset: 576)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1512, file: !133, line: 2308, baseType: !476, size: 64, offset: 640)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1512, file: !133, line: 2314, baseType: !1540, size: 64, offset: 704)
!1540 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !133, line: 2309, size: 64, elements: !1541)
!1541 = !{!1542, !1543, !1544}
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1540, file: !133, line: 2310, baseType: !469, size: 32)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1540, file: !133, line: 2311, baseType: !474, size: 64)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1540, file: !133, line: 2312, baseType: !1545, size: 64)
!1545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1546, size: 64)
!1546 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !133, line: 2277, flags: DIFlagFwdDecl)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1512, file: !133, line: 2315, baseType: !476, size: 64, offset: 768)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1512, file: !133, line: 2316, baseType: !476, size: 64, offset: 832)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1512, file: !133, line: 2317, baseType: !476, size: 64, offset: 896)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1512, file: !133, line: 2318, baseType: !476, size: 64, offset: 960)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1512, file: !133, line: 2319, baseType: !476, size: 64, offset: 1024)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1512, file: !133, line: 2320, baseType: !476, size: 64, offset: 1088)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1512, file: !133, line: 2321, baseType: !476, size: 64, offset: 1152)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1512, file: !133, line: 2322, baseType: !476, size: 64, offset: 1216)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1512, file: !133, line: 2324, baseType: !1556, size: 64, offset: 1280)
!1556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1557, size: 64)
!1557 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !133, line: 2324, flags: DIFlagFwdDecl)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !479, file: !133, line: 3395, baseType: !1559, size: 320)
!1559 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !133, line: 1469, size: 320, elements: !1560)
!1560 = !{!1561, !1562, !1563}
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1559, file: !133, line: 1470, baseType: !515, size: 192)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1559, file: !133, line: 1471, baseType: !476, size: 64, offset: 192)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1559, file: !133, line: 1472, baseType: !476, size: 64, offset: 256)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !479, file: !133, line: 3396, baseType: !1565, size: 320)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !133, line: 1482, size: 320, elements: !1566)
!1566 = !{!1567, !1568, !1569}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1565, file: !133, line: 1483, baseType: !515, size: 192)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1565, file: !133, line: 1484, baseType: !469, size: 32, offset: 192)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1565, file: !133, line: 1485, baseType: !853, size: 64, offset: 256)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !479, file: !133, line: 3397, baseType: !1571, size: 384)
!1571 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !133, line: 1829, size: 384, elements: !1572)
!1572 = !{!1573, !1574, !1575, !1576}
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1571, file: !133, line: 1830, baseType: !515, size: 192)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1571, file: !133, line: 1831, baseType: !601, size: 32, offset: 192)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1571, file: !133, line: 1832, baseType: !476, size: 64, offset: 256)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1571, file: !133, line: 1835, baseType: !853, size: 64, offset: 320)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !479, file: !133, line: 3398, baseType: !1578, size: 704)
!1578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !133, line: 1898, size: 704, elements: !1579)
!1579 = !{!1580, !1581, !1582, !1583, !1584, !1589}
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1578, file: !133, line: 1899, baseType: !515, size: 192)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1578, file: !133, line: 1902, baseType: !476, size: 64, offset: 192)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1578, file: !133, line: 1905, baseType: !800, size: 64, offset: 256)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1578, file: !133, line: 1908, baseType: !5, size: 32, offset: 320)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1578, file: !133, line: 1911, baseType: !1585, size: 64, offset: 384)
!1585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1586, size: 64)
!1586 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1226, line: 117, size: 128, elements: !1587)
!1587 = !{!1588}
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1586, file: !1226, line: 120, baseType: !1392, size: 128)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1578, file: !133, line: 1914, baseType: !841, size: 256, offset: 448)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !479, file: !133, line: 3399, baseType: !1591, size: 704)
!1591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !133, line: 2008, size: 704, elements: !1592)
!1592 = !{!1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603}
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1591, file: !133, line: 2009, baseType: !515, size: 192)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1591, file: !133, line: 2011, baseType: !5, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1591, file: !133, line: 2012, baseType: !5, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1591, file: !133, line: 2014, baseType: !601, size: 32, offset: 224)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1591, file: !133, line: 2016, baseType: !476, size: 64, offset: 256)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1591, file: !133, line: 2017, baseType: !1379, size: 64, offset: 320)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1591, file: !133, line: 2019, baseType: !476, size: 64, offset: 384)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1591, file: !133, line: 2020, baseType: !476, size: 64, offset: 448)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1591, file: !133, line: 2021, baseType: !476, size: 64, offset: 512)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1591, file: !133, line: 2022, baseType: !476, size: 64, offset: 576)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1591, file: !133, line: 2023, baseType: !476, size: 64, offset: 640)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !479, file: !133, line: 3400, baseType: !1605, size: 832)
!1605 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !133, line: 2430, size: 832, elements: !1606)
!1606 = !{!1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616}
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1605, file: !133, line: 2431, baseType: !515, size: 192)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1605, file: !133, line: 2433, baseType: !476, size: 64, offset: 192)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1605, file: !133, line: 2434, baseType: !476, size: 64, offset: 256)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1605, file: !133, line: 2435, baseType: !476, size: 64, offset: 320)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1605, file: !133, line: 2436, baseType: !476, size: 64, offset: 384)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1605, file: !133, line: 2437, baseType: !1379, size: 64, offset: 448)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1605, file: !133, line: 2438, baseType: !476, size: 64, offset: 512)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1605, file: !133, line: 2440, baseType: !476, size: 64, offset: 576)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1605, file: !133, line: 2441, baseType: !476, size: 64, offset: 640)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1605, file: !133, line: 2443, baseType: !1617, size: 128, offset: 704)
!1617 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !133, line: 182, baseType: !1618)
!1618 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !133, line: 182, size: 128, elements: !1619)
!1619 = !{!1620}
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1618, file: !133, line: 182, baseType: !1384, size: 128)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !479, file: !133, line: 3401, baseType: !1622, size: 320)
!1622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !133, line: 3327, size: 320, elements: !1623)
!1623 = !{!1624, !1625, !1632}
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1622, file: !133, line: 3329, baseType: !515, size: 192)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1622, file: !133, line: 3330, baseType: !1626, size: 64, offset: 192)
!1626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1627, size: 64)
!1627 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !133, line: 3320, size: 192, elements: !1628)
!1628 = !{!1629, !1630, !1631}
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1627, file: !133, line: 3322, baseType: !1626, size: 64)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1627, file: !133, line: 3323, baseType: !1626, size: 64, offset: 64)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1627, file: !133, line: 3324, baseType: !476, size: 64, offset: 128)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1622, file: !133, line: 3331, baseType: !1626, size: 64, offset: 256)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !479, file: !133, line: 3402, baseType: !1634, size: 256)
!1634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !133, line: 1540, size: 256, elements: !1635)
!1635 = !{!1636, !1637}
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1634, file: !133, line: 1541, baseType: !515, size: 192)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1634, file: !133, line: 1542, baseType: !1638, size: 64, offset: 192)
!1638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1639, size: 64)
!1639 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !133, line: 1538, baseType: !1640)
!1640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !133, line: 1538, size: 192, elements: !1641)
!1641 = !{!1642}
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1640, file: !133, line: 1538, baseType: !1643, size: 192)
!1643 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !133, line: 1537, baseType: !1644)
!1644 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !133, line: 1537, size: 192, elements: !1645)
!1645 = !{!1646, !1647, !1648}
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1644, file: !133, line: 1537, baseType: !5, size: 32)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1644, file: !133, line: 1537, baseType: !5, size: 32, offset: 32)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1644, file: !133, line: 1537, baseType: !1649, size: 128, offset: 64)
!1649 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1650, size: 128, elements: !575)
!1650 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !133, line: 1535, baseType: !1651)
!1651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !133, line: 1532, size: 128, elements: !1652)
!1652 = !{!1653, !1654}
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1651, file: !133, line: 1533, baseType: !476, size: 64)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1651, file: !133, line: 1534, baseType: !476, size: 64, offset: 64)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !479, file: !133, line: 3403, baseType: !1656, size: 512)
!1656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !133, line: 1938, size: 512, elements: !1657)
!1657 = !{!1658, !1659, !1660, !1661, !1667, !1668, !1669}
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1656, file: !133, line: 1939, baseType: !515, size: 192)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1656, file: !133, line: 1940, baseType: !601, size: 32, offset: 192)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1656, file: !133, line: 1941, baseType: !356, size: 32, offset: 224)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1656, file: !133, line: 1946, baseType: !1662, size: 32, offset: 256)
!1662 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !133, line: 1942, size: 32, elements: !1663)
!1663 = !{!1664, !1665, !1666}
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1662, file: !133, line: 1943, baseType: !374, size: 32)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1662, file: !133, line: 1944, baseType: !381, size: 32)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1662, file: !133, line: 1945, baseType: !132, size: 32)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1656, file: !133, line: 1950, baseType: !790, size: 64, offset: 320)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1656, file: !133, line: 1951, baseType: !790, size: 64, offset: 384)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1656, file: !133, line: 1953, baseType: !853, size: 64, offset: 448)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !479, file: !133, line: 3404, baseType: !1671, size: 1664)
!1671 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !133, line: 3337, size: 1664, elements: !1672)
!1672 = !{!1673, !1674}
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1671, file: !133, line: 3338, baseType: !515, size: 192)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1671, file: !133, line: 3341, baseType: !1675, size: 1472, offset: 192)
!1675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1676, line: 410, size: 1472, elements: !1677)
!1676 = !DIFile(filename: "./options.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1677 = !{!1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841}
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1675, file: !1676, line: 412, baseType: !469, size: 32)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1675, file: !1676, line: 413, baseType: !469, size: 32, offset: 32)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1675, file: !1676, line: 414, baseType: !469, size: 32, offset: 64)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1675, file: !1676, line: 415, baseType: !469, size: 32, offset: 96)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1675, file: !1676, line: 416, baseType: !469, size: 32, offset: 128)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1675, file: !1676, line: 417, baseType: !469, size: 32, offset: 160)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1675, file: !1676, line: 418, baseType: !468, size: 8, offset: 192)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1675, file: !1676, line: 419, baseType: !468, size: 8, offset: 200)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1675, file: !1676, line: 420, baseType: !1687, size: 8, offset: 208)
!1687 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1675, file: !1676, line: 421, baseType: !1687, size: 8, offset: 216)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1675, file: !1676, line: 422, baseType: !1687, size: 8, offset: 224)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1675, file: !1676, line: 423, baseType: !1687, size: 8, offset: 232)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1675, file: !1676, line: 424, baseType: !1687, size: 8, offset: 240)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1675, file: !1676, line: 425, baseType: !1687, size: 8, offset: 248)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1675, file: !1676, line: 426, baseType: !1687, size: 8, offset: 256)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1675, file: !1676, line: 427, baseType: !1687, size: 8, offset: 264)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1675, file: !1676, line: 428, baseType: !1687, size: 8, offset: 272)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1675, file: !1676, line: 429, baseType: !1687, size: 8, offset: 280)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1675, file: !1676, line: 430, baseType: !1687, size: 8, offset: 288)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1675, file: !1676, line: 431, baseType: !1687, size: 8, offset: 296)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1675, file: !1676, line: 432, baseType: !1687, size: 8, offset: 304)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1675, file: !1676, line: 433, baseType: !1687, size: 8, offset: 312)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1675, file: !1676, line: 434, baseType: !1687, size: 8, offset: 320)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1675, file: !1676, line: 435, baseType: !1687, size: 8, offset: 328)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1675, file: !1676, line: 436, baseType: !1687, size: 8, offset: 336)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1675, file: !1676, line: 437, baseType: !1687, size: 8, offset: 344)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1675, file: !1676, line: 438, baseType: !1687, size: 8, offset: 352)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1675, file: !1676, line: 439, baseType: !1687, size: 8, offset: 360)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1675, file: !1676, line: 440, baseType: !1687, size: 8, offset: 368)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1675, file: !1676, line: 441, baseType: !1687, size: 8, offset: 376)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1675, file: !1676, line: 442, baseType: !1687, size: 8, offset: 384)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1675, file: !1676, line: 443, baseType: !1687, size: 8, offset: 392)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1675, file: !1676, line: 444, baseType: !1687, size: 8, offset: 400)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1675, file: !1676, line: 445, baseType: !1687, size: 8, offset: 408)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1675, file: !1676, line: 446, baseType: !1687, size: 8, offset: 416)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1675, file: !1676, line: 447, baseType: !1687, size: 8, offset: 424)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1675, file: !1676, line: 448, baseType: !1687, size: 8, offset: 432)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1675, file: !1676, line: 449, baseType: !1687, size: 8, offset: 440)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1675, file: !1676, line: 450, baseType: !1687, size: 8, offset: 448)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1675, file: !1676, line: 451, baseType: !1687, size: 8, offset: 456)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1675, file: !1676, line: 452, baseType: !1687, size: 8, offset: 464)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1675, file: !1676, line: 453, baseType: !1687, size: 8, offset: 472)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1675, file: !1676, line: 454, baseType: !1687, size: 8, offset: 480)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1675, file: !1676, line: 455, baseType: !1687, size: 8, offset: 488)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1675, file: !1676, line: 456, baseType: !1687, size: 8, offset: 496)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1675, file: !1676, line: 457, baseType: !1687, size: 8, offset: 504)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1675, file: !1676, line: 458, baseType: !1687, size: 8, offset: 512)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1675, file: !1676, line: 459, baseType: !1687, size: 8, offset: 520)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1675, file: !1676, line: 460, baseType: !1687, size: 8, offset: 528)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1675, file: !1676, line: 461, baseType: !1687, size: 8, offset: 536)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1675, file: !1676, line: 462, baseType: !1687, size: 8, offset: 544)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1675, file: !1676, line: 463, baseType: !1687, size: 8, offset: 552)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1675, file: !1676, line: 464, baseType: !1687, size: 8, offset: 560)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1675, file: !1676, line: 465, baseType: !1687, size: 8, offset: 568)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1675, file: !1676, line: 466, baseType: !1687, size: 8, offset: 576)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1675, file: !1676, line: 467, baseType: !1687, size: 8, offset: 584)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1675, file: !1676, line: 468, baseType: !1687, size: 8, offset: 592)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1675, file: !1676, line: 469, baseType: !1687, size: 8, offset: 600)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1675, file: !1676, line: 470, baseType: !1687, size: 8, offset: 608)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1675, file: !1676, line: 471, baseType: !1687, size: 8, offset: 616)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1675, file: !1676, line: 472, baseType: !1687, size: 8, offset: 624)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1675, file: !1676, line: 473, baseType: !1687, size: 8, offset: 632)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1675, file: !1676, line: 474, baseType: !1687, size: 8, offset: 640)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1675, file: !1676, line: 475, baseType: !1687, size: 8, offset: 648)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1675, file: !1676, line: 476, baseType: !1687, size: 8, offset: 656)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1675, file: !1676, line: 477, baseType: !1687, size: 8, offset: 664)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1675, file: !1676, line: 478, baseType: !1687, size: 8, offset: 672)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1675, file: !1676, line: 479, baseType: !1687, size: 8, offset: 680)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1675, file: !1676, line: 480, baseType: !1687, size: 8, offset: 688)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1675, file: !1676, line: 481, baseType: !1687, size: 8, offset: 696)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1675, file: !1676, line: 482, baseType: !1687, size: 8, offset: 704)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1675, file: !1676, line: 483, baseType: !1687, size: 8, offset: 712)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1675, file: !1676, line: 484, baseType: !1687, size: 8, offset: 720)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1675, file: !1676, line: 485, baseType: !1687, size: 8, offset: 728)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1675, file: !1676, line: 486, baseType: !1687, size: 8, offset: 736)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1675, file: !1676, line: 487, baseType: !1687, size: 8, offset: 744)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1675, file: !1676, line: 488, baseType: !1687, size: 8, offset: 752)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1675, file: !1676, line: 489, baseType: !1687, size: 8, offset: 760)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1675, file: !1676, line: 490, baseType: !1687, size: 8, offset: 768)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1675, file: !1676, line: 491, baseType: !1687, size: 8, offset: 776)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1675, file: !1676, line: 492, baseType: !1687, size: 8, offset: 784)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1675, file: !1676, line: 493, baseType: !1687, size: 8, offset: 792)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1675, file: !1676, line: 494, baseType: !1687, size: 8, offset: 800)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1675, file: !1676, line: 495, baseType: !1687, size: 8, offset: 808)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1675, file: !1676, line: 496, baseType: !1687, size: 8, offset: 816)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1675, file: !1676, line: 497, baseType: !1687, size: 8, offset: 824)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1675, file: !1676, line: 498, baseType: !1687, size: 8, offset: 832)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1675, file: !1676, line: 499, baseType: !1687, size: 8, offset: 840)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1675, file: !1676, line: 500, baseType: !1687, size: 8, offset: 848)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1675, file: !1676, line: 501, baseType: !1687, size: 8, offset: 856)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1675, file: !1676, line: 502, baseType: !1687, size: 8, offset: 864)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1675, file: !1676, line: 503, baseType: !1687, size: 8, offset: 872)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1675, file: !1676, line: 504, baseType: !1687, size: 8, offset: 880)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1675, file: !1676, line: 505, baseType: !1687, size: 8, offset: 888)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1675, file: !1676, line: 506, baseType: !1687, size: 8, offset: 896)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1675, file: !1676, line: 507, baseType: !1687, size: 8, offset: 904)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1675, file: !1676, line: 508, baseType: !1687, size: 8, offset: 912)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1675, file: !1676, line: 509, baseType: !1687, size: 8, offset: 920)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1675, file: !1676, line: 510, baseType: !1687, size: 8, offset: 928)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1675, file: !1676, line: 511, baseType: !1687, size: 8, offset: 936)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1675, file: !1676, line: 512, baseType: !1687, size: 8, offset: 944)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1675, file: !1676, line: 513, baseType: !1687, size: 8, offset: 952)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1675, file: !1676, line: 514, baseType: !1687, size: 8, offset: 960)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1675, file: !1676, line: 515, baseType: !1687, size: 8, offset: 968)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1675, file: !1676, line: 516, baseType: !1687, size: 8, offset: 976)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1675, file: !1676, line: 517, baseType: !1687, size: 8, offset: 984)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1675, file: !1676, line: 518, baseType: !1687, size: 8, offset: 992)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1675, file: !1676, line: 519, baseType: !1687, size: 8, offset: 1000)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1675, file: !1676, line: 520, baseType: !1687, size: 8, offset: 1008)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1675, file: !1676, line: 521, baseType: !1687, size: 8, offset: 1016)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1675, file: !1676, line: 522, baseType: !1687, size: 8, offset: 1024)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1675, file: !1676, line: 523, baseType: !1687, size: 8, offset: 1032)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1675, file: !1676, line: 524, baseType: !1687, size: 8, offset: 1040)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1675, file: !1676, line: 525, baseType: !1687, size: 8, offset: 1048)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1675, file: !1676, line: 526, baseType: !1687, size: 8, offset: 1056)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1675, file: !1676, line: 527, baseType: !1687, size: 8, offset: 1064)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1675, file: !1676, line: 528, baseType: !1687, size: 8, offset: 1072)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1675, file: !1676, line: 529, baseType: !1687, size: 8, offset: 1080)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1675, file: !1676, line: 530, baseType: !1687, size: 8, offset: 1088)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1675, file: !1676, line: 531, baseType: !1687, size: 8, offset: 1096)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1675, file: !1676, line: 532, baseType: !1687, size: 8, offset: 1104)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1675, file: !1676, line: 533, baseType: !1687, size: 8, offset: 1112)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1675, file: !1676, line: 534, baseType: !1687, size: 8, offset: 1120)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1675, file: !1676, line: 535, baseType: !1687, size: 8, offset: 1128)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1675, file: !1676, line: 536, baseType: !1687, size: 8, offset: 1136)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1675, file: !1676, line: 537, baseType: !1687, size: 8, offset: 1144)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1675, file: !1676, line: 538, baseType: !1687, size: 8, offset: 1152)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1675, file: !1676, line: 539, baseType: !1687, size: 8, offset: 1160)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1675, file: !1676, line: 540, baseType: !1687, size: 8, offset: 1168)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1675, file: !1676, line: 541, baseType: !1687, size: 8, offset: 1176)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1675, file: !1676, line: 542, baseType: !1687, size: 8, offset: 1184)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1675, file: !1676, line: 543, baseType: !1687, size: 8, offset: 1192)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1675, file: !1676, line: 544, baseType: !1687, size: 8, offset: 1200)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1675, file: !1676, line: 545, baseType: !1687, size: 8, offset: 1208)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1675, file: !1676, line: 546, baseType: !1687, size: 8, offset: 1216)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1675, file: !1676, line: 547, baseType: !1687, size: 8, offset: 1224)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1675, file: !1676, line: 548, baseType: !1687, size: 8, offset: 1232)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1675, file: !1676, line: 549, baseType: !1687, size: 8, offset: 1240)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1675, file: !1676, line: 550, baseType: !1687, size: 8, offset: 1248)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1675, file: !1676, line: 551, baseType: !1687, size: 8, offset: 1256)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1675, file: !1676, line: 552, baseType: !1687, size: 8, offset: 1264)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1675, file: !1676, line: 553, baseType: !1687, size: 8, offset: 1272)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1675, file: !1676, line: 554, baseType: !1687, size: 8, offset: 1280)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1675, file: !1676, line: 555, baseType: !1687, size: 8, offset: 1288)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1675, file: !1676, line: 556, baseType: !1687, size: 8, offset: 1296)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1675, file: !1676, line: 557, baseType: !1687, size: 8, offset: 1304)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1675, file: !1676, line: 558, baseType: !1687, size: 8, offset: 1312)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1675, file: !1676, line: 559, baseType: !1687, size: 8, offset: 1320)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1675, file: !1676, line: 560, baseType: !1687, size: 8, offset: 1328)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1675, file: !1676, line: 561, baseType: !1687, size: 8, offset: 1336)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1675, file: !1676, line: 562, baseType: !1687, size: 8, offset: 1344)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1675, file: !1676, line: 563, baseType: !1687, size: 8, offset: 1352)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1675, file: !1676, line: 564, baseType: !1687, size: 8, offset: 1360)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1675, file: !1676, line: 565, baseType: !1687, size: 8, offset: 1368)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1675, file: !1676, line: 566, baseType: !1687, size: 8, offset: 1376)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1675, file: !1676, line: 567, baseType: !1687, size: 8, offset: 1384)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1675, file: !1676, line: 568, baseType: !1687, size: 8, offset: 1392)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1675, file: !1676, line: 569, baseType: !1687, size: 8, offset: 1400)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1675, file: !1676, line: 570, baseType: !1687, size: 8, offset: 1408)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1675, file: !1676, line: 571, baseType: !1687, size: 8, offset: 1416)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1675, file: !1676, line: 572, baseType: !1687, size: 8, offset: 1424)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1675, file: !1676, line: 573, baseType: !1687, size: 8, offset: 1432)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1675, file: !1676, line: 574, baseType: !1687, size: 8, offset: 1440)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !479, file: !133, line: 3405, baseType: !1843, size: 384)
!1843 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !133, line: 3352, size: 384, elements: !1844)
!1844 = !{!1845, !1846}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1843, file: !133, line: 3353, baseType: !515, size: 192)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1843, file: !133, line: 3356, baseType: !1847, size: 192, offset: 192)
!1847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1676, line: 578, size: 192, elements: !1848)
!1848 = !{!1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859}
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1847, file: !1676, line: 580, baseType: !469, size: 32)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1847, file: !1676, line: 581, baseType: !469, size: 32, offset: 32)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1847, file: !1676, line: 582, baseType: !469, size: 32, offset: 64)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1847, file: !1676, line: 583, baseType: !469, size: 32, offset: 96)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1847, file: !1676, line: 584, baseType: !468, size: 8, offset: 128)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1847, file: !1676, line: 585, baseType: !468, size: 8, offset: 136)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1847, file: !1676, line: 586, baseType: !468, size: 8, offset: 144)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1847, file: !1676, line: 587, baseType: !468, size: 8, offset: 152)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1847, file: !1676, line: 588, baseType: !468, size: 8, offset: 160)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1847, file: !1676, line: 589, baseType: !468, size: 8, offset: 168)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1847, file: !1676, line: 590, baseType: !468, size: 8, offset: 176)
!1860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1861, size: 64)
!1861 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !802)
!1862 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1863, size: 64)
!1863 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !479)
!1864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1865, size: 64)
!1865 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ilb_data", file: !1, line: 2663, size: 192, elements: !1866)
!1866 = !{!1867, !1868, !1869}
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !1865, file: !1, line: 2665, baseType: !1015, size: 64)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1865, file: !1, line: 2666, baseType: !800, size: 64, offset: 64)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "reliable", scope: !1865, file: !1, line: 2667, baseType: !468, size: 8, offset: 128)
!1870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1871, size: 64)
!1871 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !1872, line: 32, baseType: !1873)
!1872 = !DIFile(filename: "./vecprim.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1873 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !1872, line: 32, size: 96, elements: !1874)
!1874 = !{!1875}
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1873, file: !1872, line: 32, baseType: !1876, size: 96)
!1876 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !1872, line: 31, baseType: !1877)
!1877 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !1872, line: 31, size: 96, elements: !1878)
!1878 = !{!1879, !1880, !1881}
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1877, file: !1872, line: 31, baseType: !5, size: 32)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1877, file: !1872, line: 31, baseType: !5, size: 32, offset: 32)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1877, file: !1872, line: 31, baseType: !1882, size: 32, offset: 64)
!1882 = !DICompositeType(tag: DW_TAG_array_type, baseType: !469, size: 32, elements: !575)
!1883 = !{i32 2, !"Dwarf Version", i32 4}
!1884 = !{i32 2, !"Debug Info Version", i32 3}
!1885 = !{i32 1, !"wchar_size", i32 4}
!1886 = !{!"clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)"}
!1887 = distinct !DISubprogram(name: "vprintf", scope: !1888, file: !1888, line: 39, type: !1889, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !1899)
!1888 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdio.h", directory: "")
!1889 = !DISubroutineType(types: !1890)
!1890 = !{!469, !1891, !1892}
!1891 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !474)
!1892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1893, size: 64)
!1893 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !1, size: 192, elements: !1894)
!1894 = !{!1895, !1896, !1897, !1898}
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !1893, file: !1, baseType: !5, size: 32)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !1893, file: !1, baseType: !5, size: 32, offset: 32)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !1893, file: !1, baseType: !473, size: 64, offset: 64)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !1893, file: !1, baseType: !473, size: 64, offset: 128)
!1899 = !{!1900, !1901}
!1900 = !DILocalVariable(name: "__fmt", arg: 1, scope: !1887, file: !1888, line: 39, type: !1891)
!1901 = !DILocalVariable(name: "__arg", arg: 2, scope: !1887, file: !1888, line: 39, type: !1892)
!1902 = !DILocation(line: 0, scope: !1887)
!1903 = !DILocation(line: 41, column: 20, scope: !1887)
!1904 = !DILocation(line: 41, column: 10, scope: !1887)
!1905 = !DILocation(line: 41, column: 3, scope: !1887)
!1906 = distinct !DISubprogram(name: "getchar", scope: !1888, file: !1888, line: 47, type: !1907, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !1909)
!1907 = !DISubroutineType(types: !1908)
!1908 = !{!469}
!1909 = !{}
!1910 = !DILocation(line: 49, column: 16, scope: !1906)
!1911 = !DILocation(line: 49, column: 10, scope: !1906)
!1912 = !DILocation(line: 49, column: 3, scope: !1906)
!1913 = distinct !DISubprogram(name: "fgetc_unlocked", scope: !1888, file: !1888, line: 56, type: !1914, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !1967)
!1914 = !DISubroutineType(types: !1915)
!1915 = !{!469, !1916}
!1916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1917, size: 64)
!1917 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !1918, line: 7, baseType: !1919)
!1918 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!1919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !1920, line: 49, size: 1728, elements: !1921)
!1920 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!1921 = !{!1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1937, !1939, !1940, !1941, !1944, !1946, !1947, !1948, !1951, !1953, !1956, !1959, !1960, !1961, !1962, !1963}
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1919, file: !1920, line: 51, baseType: !469, size: 32)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1919, file: !1920, line: 54, baseType: !471, size: 64, offset: 64)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1919, file: !1920, line: 55, baseType: !471, size: 64, offset: 128)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1919, file: !1920, line: 56, baseType: !471, size: 64, offset: 192)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1919, file: !1920, line: 57, baseType: !471, size: 64, offset: 256)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1919, file: !1920, line: 58, baseType: !471, size: 64, offset: 320)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1919, file: !1920, line: 59, baseType: !471, size: 64, offset: 384)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1919, file: !1920, line: 60, baseType: !471, size: 64, offset: 448)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1919, file: !1920, line: 61, baseType: !471, size: 64, offset: 512)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1919, file: !1920, line: 64, baseType: !471, size: 64, offset: 576)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1919, file: !1920, line: 65, baseType: !471, size: 64, offset: 640)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1919, file: !1920, line: 66, baseType: !471, size: 64, offset: 704)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1919, file: !1920, line: 68, baseType: !1935, size: 64, offset: 768)
!1935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1936, size: 64)
!1936 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !1920, line: 36, flags: DIFlagFwdDecl)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1919, file: !1920, line: 70, baseType: !1938, size: 64, offset: 832)
!1938 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1919, size: 64)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1919, file: !1920, line: 72, baseType: !469, size: 32, offset: 896)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1919, file: !1920, line: 73, baseType: !469, size: 32, offset: 928)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1919, file: !1920, line: 74, baseType: !1942, size: 64, offset: 960)
!1942 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !1943, line: 152, baseType: !532)
!1943 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1919, file: !1920, line: 77, baseType: !1945, size: 16, offset: 1024)
!1945 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1919, file: !1920, line: 78, baseType: !1687, size: 8, offset: 1040)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1919, file: !1920, line: 79, baseType: !574, size: 8, offset: 1048)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1919, file: !1920, line: 81, baseType: !1949, size: 64, offset: 1088)
!1949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1950, size: 64)
!1950 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !1920, line: 43, baseType: null)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1919, file: !1920, line: 89, baseType: !1952, size: 64, offset: 1152)
!1952 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !1943, line: 153, baseType: !532)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1919, file: !1920, line: 91, baseType: !1954, size: 64, offset: 1216)
!1954 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1955, size: 64)
!1955 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !1920, line: 37, flags: DIFlagFwdDecl)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1919, file: !1920, line: 92, baseType: !1957, size: 64, offset: 1280)
!1957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1958, size: 64)
!1958 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !1920, line: 38, flags: DIFlagFwdDecl)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1919, file: !1920, line: 93, baseType: !1938, size: 64, offset: 1344)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1919, file: !1920, line: 94, baseType: !473, size: 64, offset: 1408)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1919, file: !1920, line: 95, baseType: !945, size: 64, offset: 1472)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1919, file: !1920, line: 96, baseType: !469, size: 32, offset: 1536)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1919, file: !1920, line: 98, baseType: !1964, size: 160, offset: 1568)
!1964 = !DICompositeType(tag: DW_TAG_array_type, baseType: !472, size: 160, elements: !1965)
!1965 = !{!1966}
!1966 = !DISubrange(count: 20)
!1967 = !{!1968}
!1968 = !DILocalVariable(name: "__fp", arg: 1, scope: !1913, file: !1888, line: 56, type: !1916)
!1969 = !DILocation(line: 0, scope: !1913)
!1970 = !DILocation(line: 58, column: 10, scope: !1913)
!1971 = !DILocation(line: 58, column: 3, scope: !1913)
!1972 = distinct !DISubprogram(name: "getc_unlocked", scope: !1888, file: !1888, line: 66, type: !1914, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !1973)
!1973 = !{!1974}
!1974 = !DILocalVariable(name: "__fp", arg: 1, scope: !1972, file: !1888, line: 66, type: !1916)
!1975 = !DILocation(line: 0, scope: !1972)
!1976 = !DILocation(line: 68, column: 10, scope: !1972)
!1977 = !DILocation(line: 68, column: 3, scope: !1972)
!1978 = distinct !DISubprogram(name: "getchar_unlocked", scope: !1888, file: !1888, line: 73, type: !1907, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !1909)
!1979 = !DILocation(line: 75, column: 10, scope: !1978)
!1980 = !DILocation(line: 75, column: 3, scope: !1978)
!1981 = distinct !DISubprogram(name: "putchar", scope: !1888, file: !1888, line: 82, type: !1982, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !1984)
!1982 = !DISubroutineType(types: !1983)
!1983 = !{!469, !469}
!1984 = !{!1985}
!1985 = !DILocalVariable(name: "__c", arg: 1, scope: !1981, file: !1888, line: 82, type: !469)
!1986 = !DILocation(line: 0, scope: !1981)
!1987 = !DILocation(line: 84, column: 21, scope: !1981)
!1988 = !DILocation(line: 84, column: 10, scope: !1981)
!1989 = !DILocation(line: 84, column: 3, scope: !1981)
!1990 = distinct !DISubprogram(name: "fputc_unlocked", scope: !1888, file: !1888, line: 91, type: !1991, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !1993)
!1991 = !DISubroutineType(types: !1992)
!1992 = !{!469, !469, !1916}
!1993 = !{!1994, !1995}
!1994 = !DILocalVariable(name: "__c", arg: 1, scope: !1990, file: !1888, line: 91, type: !469)
!1995 = !DILocalVariable(name: "__stream", arg: 2, scope: !1990, file: !1888, line: 91, type: !1916)
!1996 = !DILocation(line: 0, scope: !1990)
!1997 = !DILocation(line: 93, column: 10, scope: !1990)
!1998 = !DILocation(line: 93, column: 3, scope: !1990)
!1999 = distinct !DISubprogram(name: "putc_unlocked", scope: !1888, file: !1888, line: 101, type: !1991, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2000)
!2000 = !{!2001, !2002}
!2001 = !DILocalVariable(name: "__c", arg: 1, scope: !1999, file: !1888, line: 101, type: !469)
!2002 = !DILocalVariable(name: "__stream", arg: 2, scope: !1999, file: !1888, line: 101, type: !1916)
!2003 = !DILocation(line: 0, scope: !1999)
!2004 = !DILocation(line: 103, column: 10, scope: !1999)
!2005 = !DILocation(line: 103, column: 3, scope: !1999)
!2006 = distinct !DISubprogram(name: "putchar_unlocked", scope: !1888, file: !1888, line: 108, type: !1982, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2007)
!2007 = !{!2008}
!2008 = !DILocalVariable(name: "__c", arg: 1, scope: !2006, file: !1888, line: 108, type: !469)
!2009 = !DILocation(line: 0, scope: !2006)
!2010 = !DILocation(line: 110, column: 10, scope: !2006)
!2011 = !DILocation(line: 110, column: 3, scope: !2006)
!2012 = distinct !DISubprogram(name: "getline", scope: !1888, file: !1888, line: 118, type: !2013, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2017)
!2013 = !DISubroutineType(types: !2014)
!2014 = !{!2015, !470, !2016, !1916}
!2015 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !1943, line: 193, baseType: !532)
!2016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !945, size: 64)
!2017 = !{!2018, !2019, !2020}
!2018 = !DILocalVariable(name: "__lineptr", arg: 1, scope: !2012, file: !1888, line: 118, type: !470)
!2019 = !DILocalVariable(name: "__n", arg: 2, scope: !2012, file: !1888, line: 118, type: !2016)
!2020 = !DILocalVariable(name: "__stream", arg: 3, scope: !2012, file: !1888, line: 118, type: !1916)
!2021 = !DILocation(line: 0, scope: !2012)
!2022 = !DILocation(line: 120, column: 10, scope: !2012)
!2023 = !DILocation(line: 120, column: 3, scope: !2012)
!2024 = distinct !DISubprogram(name: "feof_unlocked", scope: !1888, file: !1888, line: 128, type: !1914, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2025)
!2025 = !{!2026}
!2026 = !DILocalVariable(name: "__stream", arg: 1, scope: !2024, file: !1888, line: 128, type: !1916)
!2027 = !DILocation(line: 0, scope: !2024)
!2028 = !DILocation(line: 130, column: 10, scope: !2024)
!2029 = !DILocation(line: 130, column: 3, scope: !2024)
!2030 = distinct !DISubprogram(name: "ferror_unlocked", scope: !1888, file: !1888, line: 135, type: !1914, scopeLine: 136, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2031)
!2031 = !{!2032}
!2032 = !DILocalVariable(name: "__stream", arg: 1, scope: !2030, file: !1888, line: 135, type: !1916)
!2033 = !DILocation(line: 0, scope: !2030)
!2034 = !DILocation(line: 137, column: 10, scope: !2030)
!2035 = !DILocation(line: 137, column: 3, scope: !2030)
!2036 = distinct !DISubprogram(name: "tolower", scope: !2037, file: !2037, line: 207, type: !1982, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2038)
!2037 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!2038 = !{!2039}
!2039 = !DILocalVariable(name: "__c", arg: 1, scope: !2036, file: !2037, line: 207, type: !469)
!2040 = !DILocation(line: 0, scope: !2036)
!2041 = !DILocation(line: 209, column: 22, scope: !2036)
!2042 = !DILocation(line: 209, column: 39, scope: !2036)
!2043 = !DILocation(line: 209, column: 38, scope: !2036)
!2044 = !DILocation(line: 209, column: 37, scope: !2036)
!2045 = !DILocation(line: 209, column: 10, scope: !2036)
!2046 = !DILocation(line: 209, column: 3, scope: !2036)
!2047 = distinct !DISubprogram(name: "toupper", scope: !2037, file: !2037, line: 213, type: !1982, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2048)
!2048 = !{!2049}
!2049 = !DILocalVariable(name: "__c", arg: 1, scope: !2047, file: !2037, line: 213, type: !469)
!2050 = !DILocation(line: 0, scope: !2047)
!2051 = !DILocation(line: 215, column: 22, scope: !2047)
!2052 = !DILocation(line: 215, column: 39, scope: !2047)
!2053 = !DILocation(line: 215, column: 38, scope: !2047)
!2054 = !DILocation(line: 215, column: 37, scope: !2047)
!2055 = !DILocation(line: 215, column: 10, scope: !2047)
!2056 = !DILocation(line: 215, column: 3, scope: !2047)
!2057 = distinct !DISubprogram(name: "atoi", scope: !2058, file: !2058, line: 361, type: !2059, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2061)
!2058 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!2059 = !DISubroutineType(types: !2060)
!2060 = !{!469, !474}
!2061 = !{!2062}
!2062 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2057, file: !2058, line: 361, type: !474)
!2063 = !DILocation(line: 0, scope: !2057)
!2064 = !DILocation(line: 363, column: 16, scope: !2057)
!2065 = !DILocation(line: 363, column: 10, scope: !2057)
!2066 = !DILocation(line: 363, column: 3, scope: !2057)
!2067 = distinct !DISubprogram(name: "atol", scope: !2058, file: !2058, line: 366, type: !2068, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2070)
!2068 = !DISubroutineType(types: !2069)
!2069 = !{!532, !474}
!2070 = !{!2071}
!2071 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2067, file: !2058, line: 366, type: !474)
!2072 = !DILocation(line: 0, scope: !2067)
!2073 = !DILocation(line: 368, column: 10, scope: !2067)
!2074 = !DILocation(line: 368, column: 3, scope: !2067)
!2075 = distinct !DISubprogram(name: "atoll", scope: !2058, file: !2058, line: 373, type: !2076, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2079)
!2076 = !DISubroutineType(types: !2077)
!2077 = !{!2078, !474}
!2078 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!2079 = !{!2080}
!2080 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2075, file: !2058, line: 373, type: !474)
!2081 = !DILocation(line: 0, scope: !2075)
!2082 = !DILocation(line: 375, column: 10, scope: !2075)
!2083 = !DILocation(line: 375, column: 3, scope: !2075)
!2084 = distinct !DISubprogram(name: "bsearch", scope: !2085, file: !2085, line: 20, type: !2086, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2089)
!2085 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h", directory: "")
!2086 = !DISubroutineType(types: !2087)
!2087 = !{!473, !1159, !1159, !945, !945, !2088}
!2088 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !2058, line: 808, baseType: !1331)
!2089 = !{!2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099}
!2090 = !DILocalVariable(name: "__key", arg: 1, scope: !2084, file: !2085, line: 20, type: !1159)
!2091 = !DILocalVariable(name: "__base", arg: 2, scope: !2084, file: !2085, line: 20, type: !1159)
!2092 = !DILocalVariable(name: "__nmemb", arg: 3, scope: !2084, file: !2085, line: 20, type: !945)
!2093 = !DILocalVariable(name: "__size", arg: 4, scope: !2084, file: !2085, line: 20, type: !945)
!2094 = !DILocalVariable(name: "__compar", arg: 5, scope: !2084, file: !2085, line: 21, type: !2088)
!2095 = !DILocalVariable(name: "__l", scope: !2084, file: !2085, line: 23, type: !945)
!2096 = !DILocalVariable(name: "__u", scope: !2084, file: !2085, line: 23, type: !945)
!2097 = !DILocalVariable(name: "__idx", scope: !2084, file: !2085, line: 23, type: !945)
!2098 = !DILocalVariable(name: "__p", scope: !2084, file: !2085, line: 24, type: !1159)
!2099 = !DILocalVariable(name: "__comparison", scope: !2084, file: !2085, line: 25, type: !469)
!2100 = !DILocation(line: 0, scope: !2084)
!2101 = !DILocation(line: 29, column: 3, scope: !2084)
!2102 = !DILocation(line: 27, column: 7, scope: !2084)
!2103 = !DILocation(line: 29, column: 14, scope: !2084)
!2104 = !DILocation(line: 31, column: 20, scope: !2105)
!2105 = distinct !DILexicalBlock(scope: !2084, file: !2085, line: 30, column: 5)
!2106 = !DILocation(line: 31, column: 27, scope: !2105)
!2107 = !DILocation(line: 32, column: 56, scope: !2105)
!2108 = !DILocation(line: 32, column: 47, scope: !2105)
!2109 = !DILocation(line: 33, column: 22, scope: !2105)
!2110 = !DILocation(line: 34, column: 24, scope: !2111)
!2111 = distinct !DILexicalBlock(scope: !2105, file: !2085, line: 34, column: 11)
!2112 = !DILocation(line: 34, column: 11, scope: !2105)
!2113 = !DILocation(line: 36, column: 29, scope: !2114)
!2114 = distinct !DILexicalBlock(scope: !2111, file: !2085, line: 36, column: 16)
!2115 = !DILocation(line: 36, column: 16, scope: !2111)
!2116 = !DILocation(line: 37, column: 14, scope: !2114)
!2117 = distinct !{!2117, !2101, !2118}
!2118 = !DILocation(line: 40, column: 5, scope: !2084)
!2119 = !DILocation(line: 43, column: 1, scope: !2084)
!2120 = distinct !DISubprogram(name: "atof", scope: !2121, file: !2121, line: 25, type: !2122, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2125)
!2121 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h", directory: "")
!2122 = !DISubroutineType(types: !2123)
!2123 = !{!2124, !474}
!2124 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2125 = !{!2126}
!2126 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2120, file: !2121, line: 25, type: !474)
!2127 = !DILocation(line: 0, scope: !2120)
!2128 = !DILocation(line: 27, column: 10, scope: !2120)
!2129 = !DILocation(line: 27, column: 3, scope: !2120)
!2130 = distinct !DISubprogram(name: "strtoimax", scope: !2131, file: !2131, line: 324, type: !2132, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2138)
!2131 = !DIFile(filename: "/usr/include/inttypes.h", directory: "")
!2132 = !DISubroutineType(types: !2133)
!2133 = !{!2134, !1891, !2137, !469}
!2134 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !2135, line: 101, baseType: !2136)
!2135 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!2136 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !1943, line: 72, baseType: !532)
!2137 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !470)
!2138 = !{!2139, !2140, !2141}
!2139 = !DILocalVariable(name: "nptr", arg: 1, scope: !2130, file: !2131, line: 324, type: !1891)
!2140 = !DILocalVariable(name: "endptr", arg: 2, scope: !2130, file: !2131, line: 324, type: !2137)
!2141 = !DILocalVariable(name: "base", arg: 3, scope: !2130, file: !2131, line: 324, type: !469)
!2142 = !DILocation(line: 0, scope: !2130)
!2143 = !DILocation(line: 327, column: 10, scope: !2130)
!2144 = !DILocation(line: 327, column: 3, scope: !2130)
!2145 = distinct !DISubprogram(name: "strtoumax", scope: !2131, file: !2131, line: 336, type: !2146, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2150)
!2146 = !DISubroutineType(types: !2147)
!2147 = !{!2148, !1891, !2137, !469}
!2148 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !2135, line: 102, baseType: !2149)
!2149 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !1943, line: 73, baseType: !530)
!2150 = !{!2151, !2152, !2153}
!2151 = !DILocalVariable(name: "nptr", arg: 1, scope: !2145, file: !2131, line: 336, type: !1891)
!2152 = !DILocalVariable(name: "endptr", arg: 2, scope: !2145, file: !2131, line: 336, type: !2137)
!2153 = !DILocalVariable(name: "base", arg: 3, scope: !2145, file: !2131, line: 336, type: !469)
!2154 = !DILocation(line: 0, scope: !2145)
!2155 = !DILocation(line: 339, column: 10, scope: !2145)
!2156 = !DILocation(line: 339, column: 3, scope: !2145)
!2157 = distinct !DISubprogram(name: "wcstoimax", scope: !2131, file: !2131, line: 348, type: !2158, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2167)
!2158 = !DISubroutineType(types: !2159)
!2159 = !{!2134, !2160, !2164, !469}
!2160 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !2161)
!2161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2162, size: 64)
!2162 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2163)
!2163 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gwchar_t", file: !2131, line: 34, baseType: !469)
!2164 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !2165)
!2165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2166, size: 64)
!2166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2163, size: 64)
!2167 = !{!2168, !2169, !2170}
!2168 = !DILocalVariable(name: "nptr", arg: 1, scope: !2157, file: !2131, line: 348, type: !2160)
!2169 = !DILocalVariable(name: "endptr", arg: 2, scope: !2157, file: !2131, line: 348, type: !2164)
!2170 = !DILocalVariable(name: "base", arg: 3, scope: !2157, file: !2131, line: 348, type: !469)
!2171 = !DILocation(line: 0, scope: !2157)
!2172 = !DILocation(line: 351, column: 10, scope: !2157)
!2173 = !DILocation(line: 351, column: 3, scope: !2157)
!2174 = distinct !DISubprogram(name: "wcstoumax", scope: !2131, file: !2131, line: 362, type: !2175, scopeLine: 364, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2177)
!2175 = !DISubroutineType(types: !2176)
!2176 = !{!2148, !2160, !2164, !469}
!2177 = !{!2178, !2179, !2180}
!2178 = !DILocalVariable(name: "nptr", arg: 1, scope: !2174, file: !2131, line: 362, type: !2160)
!2179 = !DILocalVariable(name: "endptr", arg: 2, scope: !2174, file: !2131, line: 362, type: !2164)
!2180 = !DILocalVariable(name: "base", arg: 3, scope: !2174, file: !2131, line: 362, type: !469)
!2181 = !DILocation(line: 0, scope: !2174)
!2182 = !DILocation(line: 365, column: 10, scope: !2174)
!2183 = !DILocation(line: 365, column: 3, scope: !2174)
!2184 = distinct !DISubprogram(name: "stat", scope: !2185, file: !2185, line: 453, type: !2186, scopeLine: 454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2223)
!2185 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/stat.h", directory: "")
!2186 = !DISubroutineType(types: !2187)
!2187 = !{!469, !474, !2188}
!2188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2189, size: 64)
!2189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !2190, line: 46, size: 1152, elements: !2191)
!2190 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!2191 = !{!2192, !2194, !2196, !2198, !2200, !2202, !2204, !2205, !2206, !2207, !2209, !2211, !2219, !2220, !2221}
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2189, file: !2190, line: 48, baseType: !2193, size: 64)
!2193 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !1943, line: 145, baseType: !530)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2189, file: !2190, line: 53, baseType: !2195, size: 64, offset: 64)
!2195 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !1943, line: 148, baseType: !530)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2189, file: !2190, line: 61, baseType: !2197, size: 64, offset: 128)
!2197 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !1943, line: 151, baseType: !530)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2189, file: !2190, line: 62, baseType: !2199, size: 32, offset: 192)
!2199 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !1943, line: 150, baseType: !5)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2189, file: !2190, line: 64, baseType: !2201, size: 32, offset: 224)
!2201 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !1943, line: 146, baseType: !5)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2189, file: !2190, line: 65, baseType: !2203, size: 32, offset: 256)
!2203 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !1943, line: 147, baseType: !5)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2189, file: !2190, line: 67, baseType: !469, size: 32, offset: 288)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2189, file: !2190, line: 69, baseType: !2193, size: 64, offset: 320)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2189, file: !2190, line: 74, baseType: !1942, size: 64, offset: 384)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2189, file: !2190, line: 78, baseType: !2208, size: 64, offset: 448)
!2208 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !1943, line: 174, baseType: !532)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2189, file: !2190, line: 80, baseType: !2210, size: 64, offset: 512)
!2210 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !1943, line: 179, baseType: !532)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2189, file: !2190, line: 91, baseType: !2212, size: 128, offset: 576)
!2212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !2213, line: 10, size: 128, elements: !2214)
!2213 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!2214 = !{!2215, !2217}
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2212, file: !2213, line: 12, baseType: !2216, size: 64)
!2216 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !1943, line: 160, baseType: !532)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2212, file: !2213, line: 16, baseType: !2218, size: 64, offset: 64)
!2218 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !1943, line: 196, baseType: !532)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2189, file: !2190, line: 92, baseType: !2212, size: 128, offset: 704)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2189, file: !2190, line: 93, baseType: !2212, size: 128, offset: 832)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2189, file: !2190, line: 106, baseType: !2222, size: 192, offset: 960)
!2222 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2218, size: 192, elements: !550)
!2223 = !{!2224, !2225}
!2224 = !DILocalVariable(name: "__path", arg: 1, scope: !2184, file: !2185, line: 453, type: !474)
!2225 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2184, file: !2185, line: 453, type: !2188)
!2226 = !DILocation(line: 0, scope: !2184)
!2227 = !DILocation(line: 455, column: 10, scope: !2184)
!2228 = !DILocation(line: 455, column: 3, scope: !2184)
!2229 = distinct !DISubprogram(name: "lstat", scope: !2185, file: !2185, line: 460, type: !2186, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2230)
!2230 = !{!2231, !2232}
!2231 = !DILocalVariable(name: "__path", arg: 1, scope: !2229, file: !2185, line: 460, type: !474)
!2232 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2229, file: !2185, line: 460, type: !2188)
!2233 = !DILocation(line: 0, scope: !2229)
!2234 = !DILocation(line: 462, column: 10, scope: !2229)
!2235 = !DILocation(line: 462, column: 3, scope: !2229)
!2236 = distinct !DISubprogram(name: "fstat", scope: !2185, file: !2185, line: 467, type: !2237, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2239)
!2237 = !DISubroutineType(types: !2238)
!2238 = !{!469, !469, !2188}
!2239 = !{!2240, !2241}
!2240 = !DILocalVariable(name: "__fd", arg: 1, scope: !2236, file: !2185, line: 467, type: !469)
!2241 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2236, file: !2185, line: 467, type: !2188)
!2242 = !DILocation(line: 0, scope: !2236)
!2243 = !DILocation(line: 469, column: 10, scope: !2236)
!2244 = !DILocation(line: 469, column: 3, scope: !2236)
!2245 = distinct !DISubprogram(name: "fstatat", scope: !2185, file: !2185, line: 474, type: !2246, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2248)
!2246 = !DISubroutineType(types: !2247)
!2247 = !{!469, !469, !474, !2188, !469}
!2248 = !{!2249, !2250, !2251, !2252}
!2249 = !DILocalVariable(name: "__fd", arg: 1, scope: !2245, file: !2185, line: 474, type: !469)
!2250 = !DILocalVariable(name: "__filename", arg: 2, scope: !2245, file: !2185, line: 474, type: !474)
!2251 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2245, file: !2185, line: 474, type: !2188)
!2252 = !DILocalVariable(name: "__flag", arg: 4, scope: !2245, file: !2185, line: 474, type: !469)
!2253 = !DILocation(line: 0, scope: !2245)
!2254 = !DILocation(line: 477, column: 10, scope: !2245)
!2255 = !DILocation(line: 477, column: 3, scope: !2245)
!2256 = distinct !DISubprogram(name: "mknod", scope: !2185, file: !2185, line: 483, type: !2257, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2259)
!2257 = !DISubroutineType(types: !2258)
!2258 = !{!469, !474, !2199, !2193}
!2259 = !{!2260, !2261, !2262}
!2260 = !DILocalVariable(name: "__path", arg: 1, scope: !2256, file: !2185, line: 483, type: !474)
!2261 = !DILocalVariable(name: "__mode", arg: 2, scope: !2256, file: !2185, line: 483, type: !2199)
!2262 = !DILocalVariable(name: "__dev", arg: 3, scope: !2256, file: !2185, line: 483, type: !2193)
!2263 = !DILocation(line: 0, scope: !2256)
!2264 = !DILocation(line: 485, column: 10, scope: !2256)
!2265 = !DILocation(line: 485, column: 3, scope: !2256)
!2266 = distinct !DISubprogram(name: "mknodat", scope: !2185, file: !2185, line: 491, type: !2267, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2269)
!2267 = !DISubroutineType(types: !2268)
!2268 = !{!469, !469, !474, !2199, !2193}
!2269 = !{!2270, !2271, !2272, !2273}
!2270 = !DILocalVariable(name: "__fd", arg: 1, scope: !2266, file: !2185, line: 491, type: !469)
!2271 = !DILocalVariable(name: "__path", arg: 2, scope: !2266, file: !2185, line: 491, type: !474)
!2272 = !DILocalVariable(name: "__mode", arg: 3, scope: !2266, file: !2185, line: 491, type: !2199)
!2273 = !DILocalVariable(name: "__dev", arg: 4, scope: !2266, file: !2185, line: 491, type: !2193)
!2274 = !DILocation(line: 0, scope: !2266)
!2275 = !DILocation(line: 494, column: 10, scope: !2266)
!2276 = !DILocation(line: 494, column: 3, scope: !2266)
!2277 = distinct !DISubprogram(name: "stat64", scope: !2185, file: !2185, line: 502, type: !2278, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2300)
!2278 = !DISubroutineType(types: !2279)
!2279 = !{!469, !474, !2280}
!2280 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2281, size: 64)
!2281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !2190, line: 119, size: 1152, elements: !2282)
!2282 = !{!2283, !2284, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2296, !2297, !2298, !2299}
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2281, file: !2190, line: 121, baseType: !2193, size: 64)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2281, file: !2190, line: 123, baseType: !2285, size: 64, offset: 64)
!2285 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino64_t", file: !1943, line: 149, baseType: !530)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2281, file: !2190, line: 124, baseType: !2197, size: 64, offset: 128)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2281, file: !2190, line: 125, baseType: !2199, size: 32, offset: 192)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2281, file: !2190, line: 132, baseType: !2201, size: 32, offset: 224)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2281, file: !2190, line: 133, baseType: !2203, size: 32, offset: 256)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2281, file: !2190, line: 135, baseType: !469, size: 32, offset: 288)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2281, file: !2190, line: 136, baseType: !2193, size: 64, offset: 320)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2281, file: !2190, line: 137, baseType: !1942, size: 64, offset: 384)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2281, file: !2190, line: 143, baseType: !2208, size: 64, offset: 448)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2281, file: !2190, line: 144, baseType: !2295, size: 64, offset: 512)
!2295 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt64_t", file: !1943, line: 180, baseType: !532)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2281, file: !2190, line: 152, baseType: !2212, size: 128, offset: 576)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2281, file: !2190, line: 153, baseType: !2212, size: 128, offset: 704)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2281, file: !2190, line: 154, baseType: !2212, size: 128, offset: 832)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2281, file: !2190, line: 164, baseType: !2222, size: 192, offset: 960)
!2300 = !{!2301, !2302}
!2301 = !DILocalVariable(name: "__path", arg: 1, scope: !2277, file: !2185, line: 502, type: !474)
!2302 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2277, file: !2185, line: 502, type: !2280)
!2303 = !DILocation(line: 0, scope: !2277)
!2304 = !DILocation(line: 504, column: 10, scope: !2277)
!2305 = !DILocation(line: 504, column: 3, scope: !2277)
!2306 = distinct !DISubprogram(name: "lstat64", scope: !2185, file: !2185, line: 509, type: !2278, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2307)
!2307 = !{!2308, !2309}
!2308 = !DILocalVariable(name: "__path", arg: 1, scope: !2306, file: !2185, line: 509, type: !474)
!2309 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2306, file: !2185, line: 509, type: !2280)
!2310 = !DILocation(line: 0, scope: !2306)
!2311 = !DILocation(line: 511, column: 10, scope: !2306)
!2312 = !DILocation(line: 511, column: 3, scope: !2306)
!2313 = distinct !DISubprogram(name: "fstat64", scope: !2185, file: !2185, line: 516, type: !2314, scopeLine: 517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2316)
!2314 = !DISubroutineType(types: !2315)
!2315 = !{!469, !469, !2280}
!2316 = !{!2317, !2318}
!2317 = !DILocalVariable(name: "__fd", arg: 1, scope: !2313, file: !2185, line: 516, type: !469)
!2318 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2313, file: !2185, line: 516, type: !2280)
!2319 = !DILocation(line: 0, scope: !2313)
!2320 = !DILocation(line: 518, column: 10, scope: !2313)
!2321 = !DILocation(line: 518, column: 3, scope: !2313)
!2322 = distinct !DISubprogram(name: "fstatat64", scope: !2185, file: !2185, line: 523, type: !2323, scopeLine: 525, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2325)
!2323 = !DISubroutineType(types: !2324)
!2324 = !{!469, !469, !474, !2280, !469}
!2325 = !{!2326, !2327, !2328, !2329}
!2326 = !DILocalVariable(name: "__fd", arg: 1, scope: !2322, file: !2185, line: 523, type: !469)
!2327 = !DILocalVariable(name: "__filename", arg: 2, scope: !2322, file: !2185, line: 523, type: !474)
!2328 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2322, file: !2185, line: 523, type: !2280)
!2329 = !DILocalVariable(name: "__flag", arg: 4, scope: !2322, file: !2185, line: 523, type: !469)
!2330 = !DILocation(line: 0, scope: !2322)
!2331 = !DILocation(line: 526, column: 10, scope: !2322)
!2332 = !DILocation(line: 526, column: 3, scope: !2322)
!2333 = distinct !DISubprogram(name: "expand_simple_operations", scope: !1, file: !1, line: 1406, type: !2334, scopeLine: 1407, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2336)
!2334 = !DISubroutineType(types: !2335)
!2335 = !{!476, !476}
!2336 = !{!2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2349}
!2337 = !DILocalVariable(name: "expr", arg: 1, scope: !2333, file: !1, line: 1406, type: !476)
!2338 = !DILocalVariable(name: "i", scope: !2333, file: !1, line: 1408, type: !5)
!2339 = !DILocalVariable(name: "n", scope: !2333, file: !1, line: 1408, type: !5)
!2340 = !DILocalVariable(name: "ret", scope: !2333, file: !1, line: 1409, type: !476)
!2341 = !DILocalVariable(name: "e", scope: !2333, file: !1, line: 1409, type: !476)
!2342 = !DILocalVariable(name: "ee", scope: !2333, file: !1, line: 1409, type: !476)
!2343 = !DILocalVariable(name: "e1", scope: !2333, file: !1, line: 1409, type: !476)
!2344 = !DILocalVariable(name: "code", scope: !2333, file: !1, line: 1410, type: !132)
!2345 = !DILocalVariable(name: "stmt", scope: !2333, file: !1, line: 1411, type: !800)
!2346 = !DILocalVariable(name: "src", scope: !2347, file: !1, line: 1451, type: !1286)
!2347 = distinct !DILexicalBlock(scope: !2348, file: !1, line: 1450, column: 5)
!2348 = distinct !DILexicalBlock(scope: !2333, file: !1, line: 1449, column: 7)
!2349 = !DILocalVariable(name: "dest", scope: !2347, file: !1, line: 1451, type: !1286)
!2350 = !DILocation(line: 1478, column: 9, scope: !2351)
!2351 = distinct !DILexicalBlock(scope: !2352, file: !1, line: 1477, column: 11)
!2352 = distinct !DILexicalBlock(scope: !2353, file: !1, line: 1473, column: 5)
!2353 = distinct !DILexicalBlock(scope: !2333, file: !1, line: 1472, column: 7)
!2354 = !DILocation(line: 0, scope: !2333)
!2355 = !DILocation(line: 1413, column: 12, scope: !2356)
!2356 = distinct !DILexicalBlock(scope: !2333, file: !1, line: 1413, column: 7)
!2357 = !DILocation(line: 1413, column: 7, scope: !2333)
!2358 = !DILocation(line: 1416, column: 7, scope: !2359)
!2359 = distinct !DILexicalBlock(scope: !2333, file: !1, line: 1416, column: 7)
!2360 = !DILocation(line: 1416, column: 7, scope: !2333)
!2361 = !DILocation(line: 1419, column: 10, scope: !2333)
!2362 = !DILocation(line: 1420, column: 7, scope: !2363)
!2363 = distinct !DILexicalBlock(scope: !2333, file: !1, line: 1420, column: 7)
!2364 = !DILocation(line: 1420, column: 7, scope: !2333)
!2365 = !DILocation(line: 1422, column: 11, scope: !2366)
!2366 = distinct !DILexicalBlock(scope: !2363, file: !1, line: 1421, column: 5)
!2367 = !DILocation(line: 0, scope: !2368)
!2368 = distinct !DILexicalBlock(scope: !2369, file: !1, line: 1424, column: 2)
!2369 = distinct !DILexicalBlock(scope: !2370, file: !1, line: 1423, column: 7)
!2370 = distinct !DILexicalBlock(scope: !2366, file: !1, line: 1423, column: 7)
!2371 = !DILocation(line: 1423, column: 21, scope: !2369)
!2372 = !DILocation(line: 1423, column: 12, scope: !2370)
!2373 = !DILocation(line: 1409, column: 8, scope: !2333)
!2374 = !DILocation(line: 1423, column: 7, scope: !2370)
!2375 = !DILocation(line: 1425, column: 8, scope: !2368)
!2376 = !DILocation(line: 1426, column: 9, scope: !2368)
!2377 = !DILocation(line: 1427, column: 10, scope: !2378)
!2378 = distinct !DILexicalBlock(scope: !2368, file: !1, line: 1427, column: 8)
!2379 = !DILocation(line: 1427, column: 8, scope: !2368)
!2380 = !DILocation(line: 1430, column: 9, scope: !2381)
!2381 = distinct !DILexicalBlock(scope: !2368, file: !1, line: 1430, column: 8)
!2382 = !DILocation(line: 1430, column: 8, scope: !2368)
!2383 = !DILocation(line: 1431, column: 12, scope: !2381)
!2384 = !DILocation(line: 1431, column: 6, scope: !2381)
!2385 = !DILocation(line: 1433, column: 4, scope: !2368)
!2386 = !DILocation(line: 1433, column: 26, scope: !2368)
!2387 = !DILocation(line: 1434, column: 2, scope: !2368)
!2388 = !DILocation(line: 1423, column: 27, scope: !2369)
!2389 = !DILocation(line: 1423, column: 7, scope: !2369)
!2390 = distinct !{!2390, !2374, !2391}
!2391 = !DILocation(line: 1434, column: 2, scope: !2370)
!2392 = !DILocation(line: 1436, column: 12, scope: !2393)
!2393 = distinct !DILexicalBlock(scope: !2366, file: !1, line: 1436, column: 11)
!2394 = !DILocation(line: 1436, column: 11, scope: !2366)
!2395 = !DILocation(line: 1439, column: 7, scope: !2366)
!2396 = !DILocation(line: 1440, column: 13, scope: !2366)
!2397 = !DILocation(line: 1441, column: 7, scope: !2366)
!2398 = !DILocation(line: 1442, column: 7, scope: !2366)
!2399 = !DILocation(line: 1445, column: 24, scope: !2400)
!2400 = distinct !DILexicalBlock(scope: !2333, file: !1, line: 1445, column: 7)
!2401 = !DILocation(line: 1445, column: 7, scope: !2333)
!2402 = !DILocation(line: 1448, column: 10, scope: !2333)
!2403 = !DILocation(line: 1449, column: 7, scope: !2348)
!2404 = !DILocation(line: 1449, column: 26, scope: !2348)
!2405 = !DILocation(line: 1449, column: 7, scope: !2333)
!2406 = !DILocation(line: 1453, column: 11, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2347, file: !1, line: 1453, column: 11)
!2408 = !DILocation(line: 1453, column: 38, scope: !2407)
!2409 = !DILocation(line: 1453, column: 11, scope: !2347)
!2410 = !DILocation(line: 1455, column: 11, scope: !2347)
!2411 = !DILocation(line: 1459, column: 14, scope: !2347)
!2412 = !DILocation(line: 0, scope: !2347)
!2413 = !DILocation(line: 1460, column: 13, scope: !2347)
!2414 = !DILocation(line: 1461, column: 11, scope: !2415)
!2415 = distinct !DILexicalBlock(scope: !2347, file: !1, line: 1461, column: 11)
!2416 = !DILocation(line: 1461, column: 25, scope: !2415)
!2417 = !DILocation(line: 1462, column: 4, scope: !2415)
!2418 = !DILocation(line: 1462, column: 12, scope: !2415)
!2419 = !DILocation(line: 1462, column: 33, scope: !2415)
!2420 = !DILocation(line: 1462, column: 24, scope: !2415)
!2421 = !DILocation(line: 1461, column: 11, scope: !2347)
!2422 = !DILocation(line: 1465, column: 14, scope: !2347)
!2423 = !DILocation(line: 1467, column: 7, scope: !2424)
!2424 = distinct !DILexicalBlock(scope: !2333, file: !1, line: 1467, column: 7)
!2425 = !DILocation(line: 1467, column: 26, scope: !2424)
!2426 = !DILocation(line: 1467, column: 7, scope: !2333)
!2427 = !DILocation(line: 1470, column: 7, scope: !2333)
!2428 = !DILocation(line: 1471, column: 10, scope: !2333)
!2429 = !DILocation(line: 1472, column: 7, scope: !2353)
!2430 = !DILocation(line: 1472, column: 35, scope: !2353)
!2431 = !DILocation(line: 1472, column: 7, scope: !2333)
!2432 = !DILocation(line: 1474, column: 11, scope: !2433)
!2433 = distinct !DILexicalBlock(scope: !2352, file: !1, line: 1474, column: 11)
!2434 = !DILocation(line: 1474, column: 11, scope: !2352)
!2435 = !DILocation(line: 1477, column: 16, scope: !2351)
!2436 = !DILocation(line: 1477, column: 11, scope: !2352)
!2437 = !DILocation(line: 1483, column: 3, scope: !2333)
!2438 = !DILocation(line: 1487, column: 12, scope: !2439)
!2439 = distinct !DILexicalBlock(scope: !2333, file: !1, line: 1484, column: 5)
!2440 = !DILocation(line: 1488, column: 14, scope: !2439)
!2441 = !DILocation(line: 1504, column: 1, scope: !2333)
!2442 = !DILocation(line: 1494, column: 12, scope: !2439)
!2443 = !DILocation(line: 1495, column: 12, scope: !2444)
!2444 = distinct !DILexicalBlock(scope: !2439, file: !1, line: 1495, column: 11)
!2445 = !DILocation(line: 1495, column: 11, scope: !2439)
!2446 = !DILocation(line: 1498, column: 12, scope: !2439)
!2447 = !DILocation(line: 1499, column: 14, scope: !2439)
!2448 = distinct !DISubprogram(name: "tree_operand_length", scope: !133, file: !133, line: 5347, type: !2449, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2452)
!2449 = !DISubroutineType(types: !2450)
!2450 = !{!469, !2451}
!2451 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !477, line: 59, baseType: !1862)
!2452 = !{!2453}
!2453 = !DILocalVariable(name: "node", arg: 1, scope: !2448, file: !133, line: 5347, type: !2451)
!2454 = !DILocation(line: 0, scope: !2448)
!2455 = !DILocation(line: 5349, column: 7, scope: !2456)
!2456 = distinct !DILexicalBlock(scope: !2448, file: !133, line: 5349, column: 7)
!2457 = !DILocation(line: 5349, column: 7, scope: !2448)
!2458 = !DILocation(line: 5350, column: 12, scope: !2456)
!2459 = !DILocation(line: 5350, column: 5, scope: !2456)
!2460 = !DILocation(line: 5352, column: 12, scope: !2456)
!2461 = !DILocation(line: 5352, column: 5, scope: !2456)
!2462 = !DILocation(line: 0, scope: !2456)
!2463 = !DILocation(line: 5353, column: 1, scope: !2448)
!2464 = distinct !DISubprogram(name: "gimple_code", scope: !389, file: !389, line: 1052, type: !2465, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2468)
!2465 = !DISubroutineType(types: !2466)
!2466 = !{!388, !2467}
!2467 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !477, line: 60, baseType: !1860)
!2468 = !{!2469}
!2469 = !DILocalVariable(name: "g", arg: 1, scope: !2464, file: !389, line: 1052, type: !2467)
!2470 = !DILocation(line: 0, scope: !2464)
!2471 = !DILocation(line: 1054, column: 20, scope: !2464)
!2472 = !DILocation(line: 1054, column: 3, scope: !2464)
!2473 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !389, file: !389, line: 3061, type: !2474, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2476)
!2474 = !DISubroutineType(types: !2475)
!2475 = !{!5, !2467}
!2476 = !{!2477}
!2477 = !DILocalVariable(name: "gs", arg: 1, scope: !2473, file: !389, line: 3061, type: !2467)
!2478 = !DILocation(line: 0, scope: !2473)
!2479 = !DILocation(line: 3064, column: 25, scope: !2473)
!2480 = !DILocation(line: 3064, column: 3, scope: !2473)
!2481 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !2482, file: !2482, line: 427, type: !2483, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2488)
!2482 = !DIFile(filename: "./tree-flow-inline.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!2483 = !DISubroutineType(types: !2484)
!2484 = !{!476, !2485}
!2485 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !460, line: 30, baseType: !2486)
!2486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2487, size: 64)
!2487 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !133, line: 1893, baseType: !841)
!2488 = !{!2489}
!2489 = !DILocalVariable(name: "use", arg: 1, scope: !2481, file: !2482, line: 427, type: !2485)
!2490 = !DILocation(line: 0, scope: !2481)
!2491 = !DILocation(line: 429, column: 17, scope: !2481)
!2492 = !DILocation(line: 429, column: 10, scope: !2481)
!2493 = !DILocation(line: 429, column: 3, scope: !2481)
!2494 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !2482, file: !2482, line: 442, type: !2495, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2497)
!2495 = !DISubroutineType(types: !2496)
!2496 = !{!2485, !800, !469}
!2497 = !{!2498, !2499}
!2498 = !DILocalVariable(name: "gs", arg: 1, scope: !2494, file: !2482, line: 442, type: !800)
!2499 = !DILocalVariable(name: "i", arg: 2, scope: !2494, file: !2482, line: 442, type: !469)
!2500 = !DILocation(line: 0, scope: !2494)
!2501 = !DILocation(line: 444, column: 11, scope: !2494)
!2502 = !DILocation(line: 444, column: 35, scope: !2494)
!2503 = !DILocation(line: 444, column: 3, scope: !2494)
!2504 = distinct !DISubprogram(name: "gimple_bb", scope: !389, file: !389, line: 1112, type: !2505, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2507)
!2505 = !DISubroutineType(types: !2506)
!2506 = !{!764, !2467}
!2507 = !{!2508}
!2508 = !DILocalVariable(name: "g", arg: 1, scope: !2504, file: !389, line: 1112, type: !2467)
!2509 = !DILocation(line: 0, scope: !2504)
!2510 = !DILocation(line: 1114, column: 20, scope: !2504)
!2511 = !DILocation(line: 1114, column: 3, scope: !2504)
!2512 = distinct !DISubprogram(name: "single_pred", scope: !341, file: !341, line: 672, type: !2513, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2518)
!2513 = !DISubroutineType(types: !2514)
!2514 = !{!1286, !2515}
!2515 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !477, line: 112, baseType: !2516)
!2516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2517, size: 64)
!2517 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !765)
!2518 = !{!2519}
!2519 = !DILocalVariable(name: "bb", arg: 1, scope: !2512, file: !341, line: 672, type: !2515)
!2520 = !DILocation(line: 0, scope: !2512)
!2521 = !DILocation(line: 674, column: 10, scope: !2512)
!2522 = !DILocation(line: 674, column: 33, scope: !2512)
!2523 = !DILocation(line: 674, column: 3, scope: !2512)
!2524 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !389, file: !389, line: 1727, type: !2525, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2527)
!2525 = !DISubroutineType(types: !2526)
!2526 = !{!476, !2467}
!2527 = !{!2528}
!2528 = !DILocalVariable(name: "gs", arg: 1, scope: !2524, file: !389, line: 1727, type: !2467)
!2529 = !DILocation(line: 0, scope: !2524)
!2530 = !DILocation(line: 1730, column: 10, scope: !2524)
!2531 = !DILocation(line: 1730, column: 3, scope: !2524)
!2532 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !389, file: !389, line: 1815, type: !2533, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2535)
!2533 = !DISubroutineType(types: !2534)
!2534 = !{!132, !2467}
!2535 = !{!2536, !2537}
!2536 = !DILocalVariable(name: "gs", arg: 1, scope: !2532, file: !389, line: 1815, type: !2467)
!2537 = !DILocalVariable(name: "code", scope: !2532, file: !389, line: 1817, type: !132)
!2538 = !DILocation(line: 0, scope: !2532)
!2539 = !DILocation(line: 1820, column: 10, scope: !2532)
!2540 = !DILocation(line: 1821, column: 7, scope: !2541)
!2541 = distinct !DILexicalBlock(scope: !2532, file: !389, line: 1821, column: 7)
!2542 = !DILocation(line: 1821, column: 35, scope: !2541)
!2543 = !DILocation(line: 1821, column: 7, scope: !2532)
!2544 = !DILocation(line: 1822, column: 12, scope: !2541)
!2545 = !DILocation(line: 1822, column: 5, scope: !2541)
!2546 = !DILocation(line: 1824, column: 3, scope: !2532)
!2547 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !389, file: !389, line: 1686, type: !2548, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2550)
!2548 = !DISubroutineType(types: !2549)
!2549 = !{!453, !132}
!2550 = !{!2551}
!2551 = !DILocalVariable(name: "code", arg: 1, scope: !2547, file: !389, line: 1686, type: !132)
!2552 = !DILocation(line: 0, scope: !2547)
!2553 = !DILocation(line: 1688, column: 34, scope: !2547)
!2554 = !DILocation(line: 1688, column: 10, scope: !2547)
!2555 = !DILocation(line: 1688, column: 3, scope: !2547)
!2556 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !389, file: !389, line: 1759, type: !2525, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2557)
!2557 = !{!2558}
!2558 = !DILocalVariable(name: "gs", arg: 1, scope: !2556, file: !389, line: 1759, type: !2467)
!2559 = !DILocation(line: 0, scope: !2556)
!2560 = !DILocation(line: 1763, column: 7, scope: !2561)
!2561 = distinct !DILexicalBlock(scope: !2556, file: !389, line: 1763, column: 7)
!2562 = !DILocation(line: 1763, column: 27, scope: !2561)
!2563 = !DILocation(line: 1763, column: 7, scope: !2556)
!2564 = !DILocation(line: 1764, column: 12, scope: !2561)
!2565 = !DILocation(line: 1764, column: 5, scope: !2561)
!2566 = !DILocation(line: 0, scope: !2561)
!2567 = !DILocation(line: 1767, column: 1, scope: !2556)
!2568 = distinct !DISubprogram(name: "loop_only_exit_p", scope: !1, file: !1, line: 1731, type: !2569, scopeLine: 1732, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2576)
!2569 = !DISubroutineType(types: !2570)
!2570 = !{!468, !2571, !2573}
!2571 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2572, size: 64)
!2572 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1016)
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !477, line: 109, baseType: !2574)
!2574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!2575 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !782)
!2576 = !{!2577, !2578, !2579, !2581, !2588, !2589}
!2577 = !DILocalVariable(name: "loop", arg: 1, scope: !2568, file: !1, line: 1731, type: !2571)
!2578 = !DILocalVariable(name: "exit", arg: 2, scope: !2568, file: !1, line: 1731, type: !2573)
!2579 = !DILocalVariable(name: "body", scope: !2568, file: !1, line: 1733, type: !2580)
!2580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1286, size: 64)
!2581 = !DILocalVariable(name: "bsi", scope: !2568, file: !1, line: 1734, type: !2582)
!2582 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !389, line: 265, baseType: !2583)
!2583 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !389, line: 254, size: 192, elements: !2584)
!2584 = !{!2585, !2586, !2587}
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2583, file: !389, line: 257, baseType: !795, size: 64)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2583, file: !389, line: 263, baseType: !790, size: 64, offset: 64)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2583, file: !389, line: 264, baseType: !1286, size: 64, offset: 128)
!2588 = !DILocalVariable(name: "i", scope: !2568, file: !1, line: 1735, type: !5)
!2589 = !DILocalVariable(name: "call", scope: !2568, file: !1, line: 1736, type: !800)
!2590 = !DILocation(line: 0, scope: !2568)
!2591 = !DILocation(line: 1734, column: 3, scope: !2568)
!2592 = !DILocation(line: 1738, column: 15, scope: !2593)
!2593 = distinct !DILexicalBlock(scope: !2568, file: !1, line: 1738, column: 7)
!2594 = !DILocation(line: 1738, column: 12, scope: !2593)
!2595 = !DILocation(line: 1738, column: 7, scope: !2568)
!2596 = !DILocation(line: 1741, column: 10, scope: !2568)
!2597 = !DILocation(line: 0, scope: !2598)
!2598 = distinct !DILexicalBlock(scope: !2599, file: !1, line: 1742, column: 3)
!2599 = distinct !DILexicalBlock(scope: !2568, file: !1, line: 1742, column: 3)
!2600 = !DILocation(line: 0, scope: !2601)
!2601 = distinct !DILexicalBlock(scope: !2602, file: !1, line: 1744, column: 7)
!2602 = distinct !DILexicalBlock(scope: !2598, file: !1, line: 1743, column: 5)
!2603 = !DILocation(line: 1742, column: 8, scope: !2599)
!2604 = !DILocation(line: 0, scope: !2599)
!2605 = !DILocation(line: 1742, column: 25, scope: !2598)
!2606 = !DILocation(line: 1742, column: 17, scope: !2598)
!2607 = !DILocation(line: 1742, column: 3, scope: !2599)
!2608 = !DILocation(line: 1744, column: 18, scope: !2601)
!2609 = !DILocation(line: 1744, column: 32, scope: !2601)
!2610 = !DILocation(line: 1744, column: 12, scope: !2601)
!2611 = !DILocation(line: 1744, column: 43, scope: !2612)
!2612 = distinct !DILexicalBlock(scope: !2601, file: !1, line: 1744, column: 7)
!2613 = !DILocation(line: 1744, column: 42, scope: !2612)
!2614 = !DILocation(line: 1744, column: 7, scope: !2601)
!2615 = !DILocation(line: 1746, column: 11, scope: !2616)
!2616 = distinct !DILexicalBlock(scope: !2612, file: !1, line: 1745, column: 2)
!2617 = !DILocation(line: 1747, column: 8, scope: !2618)
!2618 = distinct !DILexicalBlock(scope: !2616, file: !1, line: 1747, column: 8)
!2619 = !DILocation(line: 1747, column: 27, scope: !2618)
!2620 = !DILocation(line: 1747, column: 8, scope: !2616)
!2621 = !DILocation(line: 1750, column: 8, scope: !2622)
!2622 = distinct !DILexicalBlock(scope: !2616, file: !1, line: 1750, column: 8)
!2623 = !DILocation(line: 1750, column: 8, scope: !2616)
!2624 = !DILocation(line: 1752, column: 14, scope: !2625)
!2625 = distinct !DILexicalBlock(scope: !2622, file: !1, line: 1751, column: 6)
!2626 = !DILocation(line: 1752, column: 8, scope: !2625)
!2627 = !DILocation(line: 1753, column: 8, scope: !2625)
!2628 = !DILocation(line: 1744, column: 60, scope: !2612)
!2629 = !DILocation(line: 1744, column: 7, scope: !2612)
!2630 = distinct !{!2630, !2614, !2631}
!2631 = !DILocation(line: 1755, column: 2, scope: !2601)
!2632 = !DILocation(line: 1742, column: 37, scope: !2598)
!2633 = !DILocation(line: 1742, column: 3, scope: !2598)
!2634 = distinct !{!2634, !2607, !2635}
!2635 = !DILocation(line: 1756, column: 5, scope: !2599)
!2636 = !DILocation(line: 1758, column: 9, scope: !2568)
!2637 = !DILocation(line: 1758, column: 3, scope: !2568)
!2638 = !DILocation(line: 1759, column: 3, scope: !2568)
!2639 = !DILocation(line: 1760, column: 1, scope: !2568)
!2640 = distinct !DISubprogram(name: "gsi_start_bb", scope: !389, file: !389, line: 4418, type: !2641, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2643)
!2641 = !DISubroutineType(types: !2642)
!2642 = !{!2582, !1286}
!2643 = !{!2644, !2645, !2646}
!2644 = !DILocalVariable(name: "bb", arg: 1, scope: !2640, file: !389, line: 4418, type: !1286)
!2645 = !DILocalVariable(name: "i", scope: !2640, file: !389, line: 4420, type: !2582)
!2646 = !DILocalVariable(name: "seq", scope: !2640, file: !389, line: 4421, type: !790)
!2647 = !DILocation(line: 0, scope: !2640)
!2648 = !DILocation(line: 4420, column: 24, scope: !2640)
!2649 = !DILocation(line: 4423, column: 9, scope: !2640)
!2650 = !DILocation(line: 4424, column: 11, scope: !2640)
!2651 = !DILocation(line: 4424, column: 5, scope: !2640)
!2652 = !DILocation(line: 4424, column: 9, scope: !2640)
!2653 = !DILocation(line: 4425, column: 5, scope: !2640)
!2654 = !DILocation(line: 4425, column: 9, scope: !2640)
!2655 = !DILocation(line: 4426, column: 5, scope: !2640)
!2656 = !DILocation(line: 4426, column: 8, scope: !2640)
!2657 = !DILocation(line: 4429, column: 1, scope: !2640)
!2658 = distinct !DISubprogram(name: "gsi_end_p", scope: !389, file: !389, line: 4467, type: !2659, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2661)
!2659 = !DISubroutineType(types: !2660)
!2660 = !{!468, !2582}
!2661 = !{!2662}
!2662 = !DILocalVariable(name: "i", arg: 1, scope: !2658, file: !389, line: 4467, type: !2582)
!2663 = !DILocation(line: 4467, column: 33, scope: !2658)
!2664 = !DILocation(line: 4469, column: 12, scope: !2658)
!2665 = !DILocation(line: 4469, column: 16, scope: !2658)
!2666 = !DILocation(line: 4469, column: 10, scope: !2658)
!2667 = !DILocation(line: 4469, column: 3, scope: !2658)
!2668 = distinct !DISubprogram(name: "gsi_stmt", scope: !389, file: !389, line: 4501, type: !2669, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2671)
!2669 = !DISubroutineType(types: !2670)
!2670 = !{!800, !2582}
!2671 = !{!2672}
!2672 = !DILocalVariable(name: "i", arg: 1, scope: !2668, file: !389, line: 4501, type: !2582)
!2673 = !DILocation(line: 4501, column: 32, scope: !2668)
!2674 = !DILocation(line: 4503, column: 12, scope: !2668)
!2675 = !DILocation(line: 4503, column: 17, scope: !2668)
!2676 = !DILocation(line: 4503, column: 3, scope: !2668)
!2677 = distinct !DISubprogram(name: "gsi_next", scope: !389, file: !389, line: 4485, type: !2678, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2681)
!2678 = !DISubroutineType(types: !2679)
!2679 = !{null, !2680}
!2680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2582, size: 64)
!2681 = !{!2682}
!2682 = !DILocalVariable(name: "i", arg: 1, scope: !2677, file: !389, line: 4485, type: !2680)
!2683 = !DILocation(line: 0, scope: !2677)
!2684 = !DILocation(line: 4487, column: 15, scope: !2677)
!2685 = !DILocation(line: 4487, column: 20, scope: !2677)
!2686 = !DILocation(line: 4487, column: 10, scope: !2677)
!2687 = !DILocation(line: 4488, column: 1, scope: !2677)
!2688 = distinct !DISubprogram(name: "number_of_iterations_exit", scope: !1, file: !1, line: 1771, type: !2689, scopeLine: 1774, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2707)
!2689 = !DISubroutineType(types: !2690)
!2690 = !{!468, !1015, !780, !2691, !468}
!2691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2692, size: 64)
!2692 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_niter_desc", file: !1226, line: 657, size: 640, elements: !2693)
!2693 = !{!2694, !2695, !2696, !2697, !2698, !2705, !2706}
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "assumptions", scope: !2692, file: !1226, line: 659, baseType: !476, size: 64)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "may_be_zero", scope: !2692, file: !1226, line: 663, baseType: !476, size: 64, offset: 64)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "niter", scope: !2692, file: !1226, line: 667, baseType: !476, size: 64, offset: 128)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "max", scope: !2692, file: !1226, line: 671, baseType: !525, size: 128, offset: 192)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !2692, file: !1226, line: 679, baseType: !2699, size: 192, offset: 320)
!2699 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_iv", file: !1226, line: 651, baseType: !2700)
!2700 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1226, line: 644, size: 192, elements: !2701)
!2701 = !{!2702, !2703, !2704}
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2700, file: !1226, line: 647, baseType: !476, size: 64)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !2700, file: !1226, line: 647, baseType: !476, size: 64, offset: 64)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "no_overflow", scope: !2700, file: !1226, line: 650, baseType: !468, size: 8, offset: 128)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !2692, file: !1226, line: 680, baseType: !476, size: 64, offset: 512)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "cmp", scope: !2692, file: !1226, line: 681, baseType: !132, size: 32, offset: 576)
!2707 = !{!2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2722}
!2708 = !DILocalVariable(name: "loop", arg: 1, scope: !2688, file: !1, line: 1771, type: !1015)
!2709 = !DILocalVariable(name: "exit", arg: 2, scope: !2688, file: !1, line: 1771, type: !780)
!2710 = !DILocalVariable(name: "niter", arg: 3, scope: !2688, file: !1, line: 1772, type: !2691)
!2711 = !DILocalVariable(name: "warn", arg: 4, scope: !2688, file: !1, line: 1773, type: !468)
!2712 = !DILocalVariable(name: "stmt", scope: !2688, file: !1, line: 1775, type: !800)
!2713 = !DILocalVariable(name: "type", scope: !2688, file: !1, line: 1776, type: !476)
!2714 = !DILocalVariable(name: "op0", scope: !2688, file: !1, line: 1777, type: !476)
!2715 = !DILocalVariable(name: "op1", scope: !2688, file: !1, line: 1777, type: !476)
!2716 = !DILocalVariable(name: "code", scope: !2688, file: !1, line: 1778, type: !132)
!2717 = !DILocalVariable(name: "iv0", scope: !2688, file: !1, line: 1779, type: !2699)
!2718 = !DILocalVariable(name: "iv1", scope: !2688, file: !1, line: 1779, type: !2699)
!2719 = !DILocalVariable(name: "wording", scope: !2720, file: !1, line: 1865, type: !474)
!2720 = distinct !DILexicalBlock(scope: !2721, file: !1, line: 1864, column: 5)
!2721 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1863, column: 7)
!2722 = !DILocalVariable(name: "loc", scope: !2720, file: !1, line: 1866, type: !601)
!2723 = !DILocation(line: 0, scope: !2688)
!2724 = !DILocation(line: 1779, column: 3, scope: !2688)
!2725 = !DILocation(line: 1781, column: 46, scope: !2726)
!2726 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1781, column: 7)
!2727 = !DILocation(line: 1781, column: 59, scope: !2726)
!2728 = !DILocation(line: 1781, column: 8, scope: !2726)
!2729 = !DILocation(line: 1781, column: 7, scope: !2688)
!2730 = !DILocation(line: 1784, column: 24, scope: !2688)
!2731 = !DILocation(line: 1784, column: 22, scope: !2688)
!2732 = !DILocation(line: 1785, column: 27, scope: !2688)
!2733 = !DILocation(line: 1785, column: 10, scope: !2688)
!2734 = !DILocation(line: 1786, column: 8, scope: !2735)
!2735 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1786, column: 7)
!2736 = !DILocation(line: 1786, column: 13, scope: !2735)
!2737 = !DILocation(line: 1786, column: 16, scope: !2735)
!2738 = !DILocation(line: 1786, column: 35, scope: !2735)
!2739 = !DILocation(line: 1786, column: 7, scope: !2688)
!2740 = !DILocation(line: 1790, column: 10, scope: !2688)
!2741 = !DILocation(line: 1791, column: 13, scope: !2742)
!2742 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1791, column: 7)
!2743 = !DILocation(line: 1791, column: 19, scope: !2742)
!2744 = !DILocation(line: 1791, column: 7, scope: !2688)
!2745 = !DILocation(line: 1792, column: 12, scope: !2742)
!2746 = !DILocation(line: 1792, column: 5, scope: !2742)
!2747 = !DILocation(line: 1794, column: 3, scope: !2688)
!2748 = !DILocation(line: 1807, column: 9, scope: !2688)
!2749 = !DILocation(line: 1808, column: 9, scope: !2688)
!2750 = !DILocation(line: 1809, column: 10, scope: !2688)
!2751 = !DILocation(line: 1811, column: 7, scope: !2752)
!2752 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1811, column: 7)
!2753 = !DILocation(line: 1811, column: 24, scope: !2752)
!2754 = !DILocation(line: 1812, column: 7, scope: !2752)
!2755 = !DILocation(line: 1812, column: 11, scope: !2752)
!2756 = !DILocation(line: 1811, column: 7, scope: !2688)
!2757 = !DILocation(line: 1815, column: 25, scope: !2758)
!2758 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1815, column: 7)
!2759 = !DILocation(line: 1815, column: 8, scope: !2758)
!2760 = !DILocation(line: 1815, column: 7, scope: !2688)
!2761 = !DILocation(line: 1817, column: 25, scope: !2762)
!2762 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1817, column: 7)
!2763 = !DILocation(line: 1817, column: 8, scope: !2762)
!2764 = !DILocation(line: 1817, column: 7, scope: !2688)
!2765 = !DILocation(line: 1822, column: 3, scope: !2688)
!2766 = !DILocation(line: 1824, column: 44, scope: !2688)
!2767 = !DILocation(line: 1824, column: 14, scope: !2688)
!2768 = !DILocation(line: 1824, column: 12, scope: !2688)
!2769 = !DILocation(line: 1825, column: 44, scope: !2688)
!2770 = !DILocation(line: 1825, column: 14, scope: !2688)
!2771 = !DILocation(line: 1825, column: 12, scope: !2688)
!2772 = !DILocation(line: 1827, column: 7, scope: !2773)
!2773 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1826, column: 7)
!2774 = !DILocation(line: 1826, column: 8, scope: !2773)
!2775 = !DILocation(line: 1826, column: 7, scope: !2688)
!2776 = !DILocation(line: 1829, column: 7, scope: !2777)
!2777 = distinct !DILexicalBlock(scope: !2773, file: !1, line: 1828, column: 5)
!2778 = !DILocation(line: 1830, column: 7, scope: !2777)
!2779 = !DILocation(line: 1833, column: 7, scope: !2780)
!2780 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1833, column: 7)
!2781 = !DILocation(line: 1833, column: 16, scope: !2780)
!2782 = !DILocation(line: 1833, column: 7, scope: !2688)
!2783 = !DILocation(line: 1836, column: 19, scope: !2784)
!2784 = distinct !DILexicalBlock(scope: !2780, file: !1, line: 1834, column: 5)
!2785 = !DILocation(line: 1835, column: 28, scope: !2784)
!2786 = !DILocation(line: 1835, column: 26, scope: !2784)
!2787 = !DILocation(line: 1838, column: 19, scope: !2784)
!2788 = !DILocation(line: 1837, column: 28, scope: !2784)
!2789 = !DILocation(line: 1837, column: 26, scope: !2784)
!2790 = !DILocation(line: 1839, column: 68, scope: !2784)
!2791 = !DILocation(line: 1839, column: 22, scope: !2784)
!2792 = !DILocation(line: 1839, column: 20, scope: !2784)
!2793 = !DILocation(line: 1840, column: 5, scope: !2784)
!2794 = !DILocation(line: 1844, column: 20, scope: !2688)
!2795 = !DILocation(line: 1843, column: 6, scope: !2688)
!2796 = !DILocation(line: 1843, column: 4, scope: !2688)
!2797 = !DILocation(line: 1847, column: 20, scope: !2688)
!2798 = !DILocation(line: 1846, column: 6, scope: !2688)
!2799 = !DILocation(line: 1846, column: 4, scope: !2688)
!2800 = !DILocation(line: 1849, column: 3, scope: !2688)
!2801 = !DILocation(line: 1851, column: 28, scope: !2802)
!2802 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1851, column: 7)
!2803 = !DILocation(line: 1851, column: 7, scope: !2802)
!2804 = !DILocation(line: 1851, column: 7, scope: !2688)
!2805 = !DILocation(line: 1857, column: 29, scope: !2806)
!2806 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1857, column: 7)
!2807 = !DILocation(line: 1857, column: 7, scope: !2806)
!2808 = !DILocation(line: 1857, column: 7, scope: !2688)
!2809 = !DILocation(line: 1860, column: 7, scope: !2810)
!2810 = distinct !DILexicalBlock(scope: !2688, file: !1, line: 1860, column: 7)
!2811 = !DILocation(line: 1860, column: 7, scope: !2688)
!2812 = !DILocation(line: 1861, column: 26, scope: !2810)
!2813 = !DILocation(line: 1861, column: 24, scope: !2810)
!2814 = !DILocation(line: 1861, column: 5, scope: !2810)
!2815 = !DILocation(line: 1863, column: 7, scope: !2721)
!2816 = !DILocation(line: 1863, column: 7, scope: !2688)
!2817 = !DILocation(line: 1866, column: 24, scope: !2720)
!2818 = !DILocation(line: 0, scope: !2720)
!2819 = !DILocation(line: 1870, column: 31, scope: !2820)
!2820 = distinct !DILexicalBlock(scope: !2720, file: !1, line: 1870, column: 11)
!2821 = !DILocation(line: 1870, column: 12, scope: !2820)
!2822 = !DILocation(line: 0, scope: !2820)
!2823 = !DILocation(line: 1870, column: 11, scope: !2720)
!2824 = !DILocation(line: 1871, column: 7, scope: !2820)
!2825 = !DILocation(line: 1872, column: 7, scope: !2820)
!2826 = !DILocation(line: 1872, column: 29, scope: !2820)
!2827 = !DILocation(line: 1872, column: 11, scope: !2820)
!2828 = !DILocation(line: 1872, column: 35, scope: !2820)
!2829 = !DILocation(line: 1872, column: 61, scope: !2820)
!2830 = !DILocation(line: 1872, column: 38, scope: !2820)
!2831 = !DILocation(line: 1870, column: 11, scope: !2820)
!2832 = !DILocation(line: 1873, column: 7, scope: !2820)
!2833 = !DILocation(line: 1873, column: 31, scope: !2820)
!2834 = !DILocation(line: 1873, column: 57, scope: !2820)
!2835 = !DILocation(line: 1873, column: 34, scope: !2820)
!2836 = !DILocation(line: 1875, column: 11, scope: !2820)
!2837 = !DILocation(line: 1874, column: 9, scope: !2820)
!2838 = !DILocation(line: 1880, column: 4, scope: !2820)
!2839 = !DILocation(line: 1884, column: 20, scope: !2720)
!2840 = !DILocation(line: 1884, column: 40, scope: !2720)
!2841 = !DILocation(line: 1884, column: 19, scope: !2720)
!2842 = !DILocation(line: 1884, column: 7, scope: !2720)
!2843 = !DILocation(line: 1886, column: 5, scope: !2720)
!2844 = !DILocation(line: 1888, column: 10, scope: !2688)
!2845 = !DILocation(line: 1888, column: 3, scope: !2688)
!2846 = !DILocation(line: 1889, column: 1, scope: !2688)
!2847 = distinct !DISubprogram(name: "gimple_cond_code", scope: !389, file: !389, line: 2221, type: !2533, scopeLine: 2222, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2848)
!2848 = !{!2849}
!2849 = !DILocalVariable(name: "gs", arg: 1, scope: !2847, file: !389, line: 2221, type: !2467)
!2850 = !DILocation(line: 0, scope: !2847)
!2851 = !DILocation(line: 2224, column: 38, scope: !2847)
!2852 = !DILocation(line: 2224, column: 3, scope: !2847)
!2853 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !389, file: !389, line: 2241, type: !2525, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2854)
!2854 = !{!2855}
!2855 = !DILocalVariable(name: "gs", arg: 1, scope: !2853, file: !389, line: 2241, type: !2467)
!2856 = !DILocation(line: 0, scope: !2853)
!2857 = !DILocation(line: 2244, column: 10, scope: !2853)
!2858 = !DILocation(line: 2244, column: 3, scope: !2853)
!2859 = distinct !DISubprogram(name: "gimple_cond_rhs", scope: !389, file: !389, line: 2271, type: !2525, scopeLine: 2272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2860)
!2860 = !{!2861}
!2861 = !DILocalVariable(name: "gs", arg: 1, scope: !2859, file: !389, line: 2271, type: !2467)
!2862 = !DILocation(line: 0, scope: !2859)
!2863 = !DILocation(line: 2274, column: 10, scope: !2859)
!2864 = !DILocation(line: 2274, column: 3, scope: !2859)
!2865 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !2482, file: !2482, line: 617, type: !2866, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2868)
!2866 = !DISubroutineType(types: !2867)
!2867 = !{!1015, !800}
!2868 = !{!2869, !2870}
!2869 = !DILocalVariable(name: "stmt", arg: 1, scope: !2865, file: !2482, line: 617, type: !800)
!2870 = !DILocalVariable(name: "bb", scope: !2865, file: !2482, line: 619, type: !1286)
!2871 = !DILocation(line: 0, scope: !2865)
!2872 = !DILocation(line: 619, column: 20, scope: !2865)
!2873 = !DILocation(line: 620, column: 8, scope: !2874)
!2874 = distinct !DILexicalBlock(scope: !2865, file: !2482, line: 620, column: 7)
!2875 = !DILocation(line: 620, column: 7, scope: !2865)
!2876 = !DILocation(line: 623, column: 14, scope: !2865)
!2877 = !DILocation(line: 623, column: 3, scope: !2865)
!2878 = !DILocation(line: 624, column: 1, scope: !2865)
!2879 = distinct !DISubprogram(name: "number_of_iterations_cond", scope: !1, file: !1, line: 1195, type: !2880, scopeLine: 1199, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2883)
!2880 = !DISubroutineType(types: !2881)
!2881 = !{!468, !1015, !476, !2882, !132, !2882, !2691, !468}
!2882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2699, size: 64)
!2883 = !{!2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2910}
!2884 = !DILocalVariable(name: "loop", arg: 1, scope: !2879, file: !1, line: 1195, type: !1015)
!2885 = !DILocalVariable(name: "type", arg: 2, scope: !2879, file: !1, line: 1196, type: !476)
!2886 = !DILocalVariable(name: "iv0", arg: 3, scope: !2879, file: !1, line: 1196, type: !2882)
!2887 = !DILocalVariable(name: "code", arg: 4, scope: !2879, file: !1, line: 1196, type: !132)
!2888 = !DILocalVariable(name: "iv1", arg: 5, scope: !2879, file: !1, line: 1197, type: !2882)
!2889 = !DILocalVariable(name: "niter", arg: 6, scope: !2879, file: !1, line: 1197, type: !2691)
!2890 = !DILocalVariable(name: "only_exit", arg: 7, scope: !2879, file: !1, line: 1198, type: !468)
!2891 = !DILocalVariable(name: "exit_must_be_taken", scope: !2879, file: !1, line: 1200, type: !468)
!2892 = !DILocalVariable(name: "ret", scope: !2879, file: !1, line: 1200, type: !468)
!2893 = !DILocalVariable(name: "bnds", scope: !2879, file: !1, line: 1201, type: !2894)
!2894 = !DIDerivedType(tag: DW_TAG_typedef, name: "bounds", file: !1, line: 65, baseType: !2895)
!2895 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1, line: 62, size: 256, elements: !2896)
!2896 = !{!2897, !2909}
!2897 = !DIDerivedType(tag: DW_TAG_member, name: "below", scope: !2895, file: !1, line: 64, baseType: !2898, size: 128)
!2898 = !DIDerivedType(tag: DW_TAG_typedef, name: "mpz_t", file: !2899, line: 73, baseType: !2900)
!2899 = !DIFile(filename: "./mini-gmp.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!2900 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2901, size: 128, elements: !575)
!2901 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mpz_struct", file: !2899, line: 71, baseType: !2902)
!2902 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2899, line: 63, size: 128, elements: !2903)
!2903 = !{!2904, !2905, !2906}
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "_mp_alloc", scope: !2902, file: !2899, line: 65, baseType: !469, size: 32)
!2905 = !DIDerivedType(tag: DW_TAG_member, name: "_mp_size", scope: !2902, file: !2899, line: 67, baseType: !469, size: 32, offset: 32)
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "_mp_d", scope: !2902, file: !2899, line: 70, baseType: !2907, size: 64, offset: 64)
!2907 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2908, size: 64)
!2908 = !DIDerivedType(tag: DW_TAG_typedef, name: "mp_limb_t", file: !2899, line: 56, baseType: !530)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "up", scope: !2895, file: !1, line: 64, baseType: !2898, size: 128, offset: 128)
!2910 = !DILocalVariable(name: "tmp", scope: !2911, file: !1, line: 1221, type: !2882)
!2911 = distinct !DILexicalBlock(scope: !2912, file: !1, line: 1221, column: 7)
!2912 = distinct !DILexicalBlock(scope: !2913, file: !1, line: 1220, column: 5)
!2913 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1218, column: 7)
!2914 = !DILocation(line: 0, scope: !2879)
!2915 = !DILocation(line: 1201, column: 3, scope: !2879)
!2916 = !DILocation(line: 1208, column: 24, scope: !2879)
!2917 = !DILocation(line: 1208, column: 22, scope: !2879)
!2918 = !DILocation(line: 1209, column: 24, scope: !2879)
!2919 = !DILocation(line: 1209, column: 10, scope: !2879)
!2920 = !DILocation(line: 1209, column: 22, scope: !2879)
!2921 = !DILocation(line: 1210, column: 10, scope: !2879)
!2922 = !DILocation(line: 1210, column: 16, scope: !2879)
!2923 = !DILocation(line: 1211, column: 10, scope: !2879)
!2924 = !DILocation(line: 1211, column: 16, scope: !2879)
!2925 = !DILocation(line: 1213, column: 10, scope: !2879)
!2926 = !DILocation(line: 1213, column: 16, scope: !2879)
!2927 = !DILocation(line: 1214, column: 10, scope: !2879)
!2928 = !DILocation(line: 1214, column: 14, scope: !2879)
!2929 = !DILocation(line: 1218, column: 23, scope: !2913)
!2930 = !DILocation(line: 1219, column: 50, scope: !2913)
!2931 = !DILocation(line: 1219, column: 30, scope: !2913)
!2932 = !DILocation(line: 1218, column: 7, scope: !2879)
!2933 = !DILocation(line: 1222, column: 14, scope: !2912)
!2934 = !DILocation(line: 1223, column: 5, scope: !2912)
!2935 = !DILocation(line: 1225, column: 7, scope: !2936)
!2936 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1225, column: 7)
!2937 = !DILocation(line: 1225, column: 7, scope: !2879)
!2938 = !DILocation(line: 1232, column: 12, scope: !2939)
!2939 = distinct !DILexicalBlock(scope: !2936, file: !1, line: 1226, column: 5)
!2940 = !DILocation(line: 1232, column: 24, scope: !2939)
!2941 = !DILocation(line: 1233, column: 12, scope: !2939)
!2942 = !DILocation(line: 1233, column: 24, scope: !2939)
!2943 = !DILocation(line: 1234, column: 5, scope: !2939)
!2944 = !DILocation(line: 1239, column: 7, scope: !2945)
!2945 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1239, column: 7)
!2946 = !DILocation(line: 1239, column: 7, scope: !2879)
!2947 = !DILocation(line: 1241, column: 32, scope: !2948)
!2948 = distinct !DILexicalBlock(scope: !2949, file: !1, line: 1241, column: 11)
!2949 = distinct !DILexicalBlock(scope: !2945, file: !1, line: 1240, column: 5)
!2950 = !DILocation(line: 1241, column: 12, scope: !2948)
!2951 = !DILocation(line: 1241, column: 38, scope: !2948)
!2952 = !DILocation(line: 1241, column: 46, scope: !2948)
!2953 = !DILocation(line: 1241, column: 41, scope: !2948)
!2954 = !DILocation(line: 1241, column: 11, scope: !2949)
!2955 = !DILocation(line: 1243, column: 37, scope: !2956)
!2956 = distinct !DILexicalBlock(scope: !2948, file: !1, line: 1243, column: 16)
!2957 = !DILocation(line: 1243, column: 17, scope: !2956)
!2958 = !DILocation(line: 1243, column: 43, scope: !2956)
!2959 = !DILocation(line: 1243, column: 51, scope: !2956)
!2960 = !DILocation(line: 1243, column: 46, scope: !2956)
!2961 = !DILocation(line: 1243, column: 16, scope: !2948)
!2962 = !DILocation(line: 1200, column: 8, scope: !2879)
!2963 = !DILocation(line: 1250, column: 28, scope: !2964)
!2964 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1250, column: 7)
!2965 = !DILocation(line: 1250, column: 8, scope: !2964)
!2966 = !DILocation(line: 1250, column: 34, scope: !2964)
!2967 = !DILocation(line: 1250, column: 58, scope: !2964)
!2968 = !DILocation(line: 1250, column: 38, scope: !2964)
!2969 = !DILocation(line: 1250, column: 7, scope: !2879)
!2970 = !DILocation(line: 1252, column: 16, scope: !2971)
!2971 = distinct !DILexicalBlock(scope: !2972, file: !1, line: 1252, column: 11)
!2972 = distinct !DILexicalBlock(scope: !2964, file: !1, line: 1251, column: 5)
!2973 = !DILocation(line: 1252, column: 11, scope: !2972)
!2974 = !DILocation(line: 1256, column: 14, scope: !2972)
!2975 = !DILocation(line: 1256, column: 25, scope: !2972)
!2976 = !DILocation(line: 1255, column: 19, scope: !2972)
!2977 = !DILocation(line: 1255, column: 17, scope: !2972)
!2978 = !DILocation(line: 1257, column: 12, scope: !2972)
!2979 = !DILocation(line: 1257, column: 24, scope: !2972)
!2980 = !DILocation(line: 1258, column: 19, scope: !2972)
!2981 = !DILocation(line: 1258, column: 17, scope: !2972)
!2982 = !DILocation(line: 1259, column: 12, scope: !2972)
!2983 = !DILocation(line: 1259, column: 24, scope: !2972)
!2984 = !DILocation(line: 1260, column: 5, scope: !2972)
!2985 = !DILocation(line: 1265, column: 27, scope: !2986)
!2986 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1265, column: 7)
!2987 = !DILocation(line: 1265, column: 7, scope: !2986)
!2988 = !DILocation(line: 1265, column: 33, scope: !2986)
!2989 = !DILocation(line: 1265, column: 56, scope: !2986)
!2990 = !DILocation(line: 1265, column: 36, scope: !2986)
!2991 = !DILocation(line: 1265, column: 7, scope: !2879)
!2992 = !DILocation(line: 1269, column: 12, scope: !2993)
!2993 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1269, column: 7)
!2994 = !DILocation(line: 1269, column: 7, scope: !2879)
!2995 = !DILocation(line: 1271, column: 16, scope: !2996)
!2996 = distinct !DILexicalBlock(scope: !2997, file: !1, line: 1271, column: 11)
!2997 = distinct !DILexicalBlock(scope: !2993, file: !1, line: 1270, column: 5)
!2998 = !DILocation(line: 1271, column: 11, scope: !2996)
!2999 = !DILocation(line: 1271, column: 21, scope: !2996)
!3000 = !DILocation(line: 1271, column: 24, scope: !2996)
!3001 = !DILocation(line: 1271, column: 11, scope: !2997)
!3002 = !DILocation(line: 1274, column: 32, scope: !3003)
!3003 = distinct !DILexicalBlock(scope: !2997, file: !1, line: 1274, column: 11)
!3004 = !DILocation(line: 1274, column: 12, scope: !3003)
!3005 = !DILocation(line: 1274, column: 38, scope: !3003)
!3006 = !DILocation(line: 1274, column: 70, scope: !3003)
!3007 = !DILocation(line: 1274, column: 42, scope: !3003)
!3008 = !DILocation(line: 1274, column: 11, scope: !2997)
!3009 = !DILocation(line: 1279, column: 22, scope: !3010)
!3010 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1279, column: 7)
!3011 = !DILocation(line: 1279, column: 7, scope: !3010)
!3012 = !DILocation(line: 1279, column: 7, scope: !2879)
!3013 = !DILocation(line: 1281, column: 37, scope: !3014)
!3014 = distinct !DILexicalBlock(scope: !3010, file: !1, line: 1280, column: 5)
!3015 = !DILocation(line: 1281, column: 22, scope: !3014)
!3016 = !DILocation(line: 1281, column: 20, scope: !3014)
!3017 = !DILocation(line: 1282, column: 20, scope: !3014)
!3018 = !DILocation(line: 1283, column: 7, scope: !3014)
!3019 = !DILocation(line: 1288, column: 32, scope: !2879)
!3020 = !DILocation(line: 1288, column: 43, scope: !2879)
!3021 = !DILocation(line: 1288, column: 3, scope: !2879)
!3022 = !DILocation(line: 1290, column: 7, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1290, column: 7)
!3024 = !DILocation(line: 1290, column: 17, scope: !3023)
!3025 = !DILocation(line: 1290, column: 21, scope: !3023)
!3026 = !DILocation(line: 1290, column: 32, scope: !3023)
!3027 = !DILocation(line: 1290, column: 7, scope: !2879)
!3028 = !DILocation(line: 1293, column: 57, scope: !3029)
!3029 = distinct !DILexicalBlock(scope: !3023, file: !1, line: 1291, column: 5)
!3030 = !DILocation(line: 1292, column: 7, scope: !3029)
!3031 = !DILocation(line: 1295, column: 16, scope: !3029)
!3032 = !DILocation(line: 1295, column: 7, scope: !3029)
!3033 = !DILocation(line: 1296, column: 23, scope: !3029)
!3034 = !DILocation(line: 1296, column: 7, scope: !3029)
!3035 = !DILocation(line: 1297, column: 16, scope: !3029)
!3036 = !DILocation(line: 1298, column: 9, scope: !3029)
!3037 = !DILocation(line: 1299, column: 16, scope: !3029)
!3038 = !DILocation(line: 1299, column: 11, scope: !3029)
!3039 = !DILocation(line: 1297, column: 7, scope: !3029)
!3040 = !DILocation(line: 1301, column: 23, scope: !3029)
!3041 = !DILocation(line: 1301, column: 7, scope: !3029)
!3042 = !DILocation(line: 1302, column: 16, scope: !3029)
!3043 = !DILocation(line: 1302, column: 7, scope: !3029)
!3044 = !DILocation(line: 1304, column: 16, scope: !3029)
!3045 = !DILocation(line: 1304, column: 7, scope: !3029)
!3046 = !DILocation(line: 1305, column: 20, scope: !3029)
!3047 = !DILocation(line: 1305, column: 35, scope: !3029)
!3048 = !DILocation(line: 1305, column: 7, scope: !3029)
!3049 = !DILocation(line: 1306, column: 16, scope: !3029)
!3050 = !DILocation(line: 1306, column: 7, scope: !3029)
!3051 = !DILocation(line: 1307, column: 20, scope: !3029)
!3052 = !DILocation(line: 1307, column: 35, scope: !3029)
!3053 = !DILocation(line: 1307, column: 7, scope: !3029)
!3054 = !DILocation(line: 1308, column: 16, scope: !3029)
!3055 = !DILocation(line: 1308, column: 7, scope: !3029)
!3056 = !DILocation(line: 1309, column: 5, scope: !3029)
!3057 = !DILocation(line: 1311, column: 3, scope: !2879)
!3058 = !DILocation(line: 1314, column: 7, scope: !3059)
!3059 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1312, column: 5)
!3060 = !DILocation(line: 1315, column: 54, scope: !3059)
!3061 = !DILocation(line: 1315, column: 13, scope: !3059)
!3062 = !DILocation(line: 1317, column: 7, scope: !3059)
!3063 = !DILocation(line: 1320, column: 13, scope: !3059)
!3064 = !DILocation(line: 1322, column: 7, scope: !3059)
!3065 = !DILocation(line: 1325, column: 13, scope: !3059)
!3066 = !DILocation(line: 1327, column: 7, scope: !3059)
!3067 = !DILocation(line: 1330, column: 7, scope: !3059)
!3068 = !DILocation(line: 1331, column: 5, scope: !3059)
!3069 = !DILocation(line: 1333, column: 14, scope: !2879)
!3070 = !DILocation(line: 1333, column: 3, scope: !2879)
!3071 = !DILocation(line: 1334, column: 14, scope: !2879)
!3072 = !DILocation(line: 1334, column: 3, scope: !2879)
!3073 = !DILocation(line: 1336, column: 7, scope: !3074)
!3074 = distinct !DILexicalBlock(scope: !2879, file: !1, line: 1336, column: 7)
!3075 = !DILocation(line: 1336, column: 17, scope: !3074)
!3076 = !DILocation(line: 1336, column: 21, scope: !3074)
!3077 = !DILocation(line: 1336, column: 32, scope: !3074)
!3078 = !DILocation(line: 1336, column: 7, scope: !2879)
!3079 = !DILocation(line: 1338, column: 11, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3081, file: !1, line: 1338, column: 11)
!3081 = distinct !DILexicalBlock(scope: !3074, file: !1, line: 1337, column: 5)
!3082 = !DILocation(line: 1338, column: 11, scope: !3081)
!3083 = !DILocation(line: 1340, column: 4, scope: !3084)
!3084 = distinct !DILexicalBlock(scope: !3080, file: !1, line: 1339, column: 2)
!3085 = !DILocation(line: 1341, column: 34, scope: !3086)
!3086 = distinct !DILexicalBlock(scope: !3084, file: !1, line: 1341, column: 8)
!3087 = !DILocation(line: 1341, column: 9, scope: !3086)
!3088 = !DILocation(line: 1341, column: 8, scope: !3084)
!3089 = !DILocation(line: 1343, column: 17, scope: !3090)
!3090 = distinct !DILexicalBlock(scope: !3086, file: !1, line: 1342, column: 6)
!3091 = !DILocation(line: 1343, column: 8, scope: !3090)
!3092 = !DILocation(line: 1344, column: 28, scope: !3090)
!3093 = !DILocation(line: 1344, column: 46, scope: !3090)
!3094 = !DILocation(line: 1344, column: 8, scope: !3090)
!3095 = !DILocation(line: 1345, column: 17, scope: !3090)
!3096 = !DILocation(line: 1345, column: 8, scope: !3090)
!3097 = !DILocation(line: 1346, column: 6, scope: !3090)
!3098 = !DILocation(line: 1348, column: 31, scope: !3099)
!3099 = distinct !DILexicalBlock(scope: !3084, file: !1, line: 1348, column: 8)
!3100 = !DILocation(line: 1348, column: 9, scope: !3099)
!3101 = !DILocation(line: 1348, column: 8, scope: !3084)
!3102 = !DILocation(line: 1350, column: 17, scope: !3103)
!3103 = distinct !DILexicalBlock(scope: !3099, file: !1, line: 1349, column: 6)
!3104 = !DILocation(line: 1350, column: 8, scope: !3103)
!3105 = !DILocation(line: 1351, column: 28, scope: !3103)
!3106 = !DILocation(line: 1351, column: 46, scope: !3103)
!3107 = !DILocation(line: 1351, column: 8, scope: !3103)
!3108 = !DILocation(line: 1352, column: 17, scope: !3103)
!3109 = !DILocation(line: 1352, column: 8, scope: !3103)
!3110 = !DILocation(line: 1353, column: 6, scope: !3103)
!3111 = !DILocation(line: 1355, column: 13, scope: !3084)
!3112 = !DILocation(line: 1355, column: 4, scope: !3084)
!3113 = !DILocation(line: 1356, column: 24, scope: !3084)
!3114 = !DILocation(line: 1356, column: 42, scope: !3084)
!3115 = !DILocation(line: 1356, column: 4, scope: !3084)
!3116 = !DILocation(line: 1357, column: 13, scope: !3084)
!3117 = !DILocation(line: 1357, column: 4, scope: !3084)
!3118 = !DILocation(line: 1358, column: 21, scope: !3084)
!3119 = !DILocation(line: 1358, column: 4, scope: !3084)
!3120 = !DILocation(line: 1359, column: 13, scope: !3084)
!3121 = !DILocation(line: 1359, column: 4, scope: !3084)
!3122 = !DILocation(line: 1360, column: 2, scope: !3084)
!3123 = !DILocation(line: 1362, column: 2, scope: !3080)
!3124 = !DILocation(line: 1365, column: 1, scope: !2879)
!3125 = distinct !DISubprogram(name: "simplify_using_outer_evolutions", scope: !1, file: !1, line: 1678, type: !3126, scopeLine: 1679, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3128)
!3126 = !DISubroutineType(types: !3127)
!3127 = !{!476, !1015, !476}
!3128 = !{!3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136}
!3129 = !DILocalVariable(name: "loop", arg: 1, scope: !3125, file: !1, line: 1678, type: !1015)
!3130 = !DILocalVariable(name: "expr", arg: 2, scope: !3125, file: !1, line: 1678, type: !476)
!3131 = !DILocalVariable(name: "code", scope: !3125, file: !1, line: 1680, type: !132)
!3132 = !DILocalVariable(name: "changed", scope: !3125, file: !1, line: 1681, type: !468)
!3133 = !DILocalVariable(name: "e", scope: !3125, file: !1, line: 1682, type: !476)
!3134 = !DILocalVariable(name: "e0", scope: !3125, file: !1, line: 1682, type: !476)
!3135 = !DILocalVariable(name: "e1", scope: !3125, file: !1, line: 1682, type: !476)
!3136 = !DILocalVariable(name: "e2", scope: !3125, file: !1, line: 1682, type: !476)
!3137 = !DILocation(line: 0, scope: !3125)
!3138 = !DILocation(line: 1680, column: 25, scope: !3125)
!3139 = !DILocation(line: 1684, column: 7, scope: !3140)
!3140 = distinct !DILexicalBlock(scope: !3125, file: !1, line: 1684, column: 7)
!3141 = !DILocation(line: 1684, column: 7, scope: !3125)
!3142 = !DILocation(line: 1688, column: 7, scope: !3143)
!3143 = distinct !DILexicalBlock(scope: !3125, file: !1, line: 1687, column: 7)
!3144 = !DILocation(line: 1693, column: 51, scope: !3145)
!3145 = distinct !DILexicalBlock(scope: !3143, file: !1, line: 1690, column: 5)
!3146 = !DILocation(line: 1693, column: 12, scope: !3145)
!3147 = !DILocation(line: 1694, column: 11, scope: !3148)
!3148 = distinct !DILexicalBlock(scope: !3145, file: !1, line: 1694, column: 11)
!3149 = !DILocation(line: 1694, column: 34, scope: !3148)
!3150 = !DILocation(line: 1697, column: 51, scope: !3145)
!3151 = !DILocation(line: 1697, column: 12, scope: !3145)
!3152 = !DILocation(line: 1698, column: 11, scope: !3153)
!3153 = distinct !DILexicalBlock(scope: !3145, file: !1, line: 1698, column: 11)
!3154 = !DILocation(line: 1698, column: 34, scope: !3153)
!3155 = !DILocation(line: 1698, column: 11, scope: !3145)
!3156 = !DILocation(line: 1701, column: 16, scope: !3157)
!3157 = distinct !DILexicalBlock(scope: !3145, file: !1, line: 1701, column: 11)
!3158 = !DILocation(line: 1701, column: 11, scope: !3145)
!3159 = !DILocation(line: 1703, column: 48, scope: !3160)
!3160 = distinct !DILexicalBlock(scope: !3157, file: !1, line: 1702, column: 2)
!3161 = !DILocation(line: 1703, column: 9, scope: !3160)
!3162 = !DILocation(line: 1704, column: 8, scope: !3163)
!3163 = distinct !DILexicalBlock(scope: !3160, file: !1, line: 1704, column: 8)
!3164 = !DILocation(line: 1704, column: 31, scope: !3163)
!3165 = !DILocation(line: 1704, column: 8, scope: !3160)
!3166 = !DILocation(line: 1706, column: 2, scope: !3160)
!3167 = !DILocation(line: 0, scope: !3157)
!3168 = !DILocation(line: 1710, column: 11, scope: !3145)
!3169 = !DILocation(line: 0, scope: !3170)
!3170 = distinct !DILexicalBlock(scope: !3171, file: !1, line: 1712, column: 8)
!3171 = distinct !DILexicalBlock(scope: !3172, file: !1, line: 1711, column: 2)
!3172 = distinct !DILexicalBlock(scope: !3145, file: !1, line: 1710, column: 11)
!3173 = !DILocation(line: 1712, column: 8, scope: !3171)
!3174 = !DILocation(line: 1713, column: 13, scope: !3170)
!3175 = !DILocation(line: 1713, column: 6, scope: !3170)
!3176 = !DILocation(line: 1715, column: 13, scope: !3170)
!3177 = !DILocation(line: 1721, column: 7, scope: !3125)
!3178 = !DILocation(line: 1722, column: 7, scope: !3179)
!3179 = distinct !DILexicalBlock(scope: !3125, file: !1, line: 1722, column: 7)
!3180 = !DILocation(line: 1726, column: 1, scope: !3125)
!3181 = distinct !DISubprogram(name: "simplify_using_initial_conditions", scope: !1, file: !1, line: 1634, type: !3126, scopeLine: 1635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3182)
!3182 = !{!3183, !3184, !3185, !3186, !3187, !3188, !3189}
!3183 = !DILocalVariable(name: "loop", arg: 1, scope: !3181, file: !1, line: 1634, type: !1015)
!3184 = !DILocalVariable(name: "expr", arg: 2, scope: !3181, file: !1, line: 1634, type: !476)
!3185 = !DILocalVariable(name: "e", scope: !3181, file: !1, line: 1636, type: !780)
!3186 = !DILocalVariable(name: "bb", scope: !3181, file: !1, line: 1637, type: !1286)
!3187 = !DILocalVariable(name: "stmt", scope: !3181, file: !1, line: 1638, type: !800)
!3188 = !DILocalVariable(name: "cond", scope: !3181, file: !1, line: 1639, type: !476)
!3189 = !DILocalVariable(name: "cnt", scope: !3181, file: !1, line: 1640, type: !469)
!3190 = !DILocation(line: 0, scope: !3181)
!3191 = !DILocation(line: 1642, column: 7, scope: !3192)
!3192 = distinct !DILexicalBlock(scope: !3181, file: !1, line: 1642, column: 7)
!3193 = !DILocation(line: 1642, column: 24, scope: !3192)
!3194 = !DILocation(line: 1642, column: 7, scope: !3181)
!3195 = !DILocation(line: 1648, column: 19, scope: !3196)
!3196 = distinct !DILexicalBlock(scope: !3181, file: !1, line: 1648, column: 3)
!3197 = !DILocation(line: 1648, column: 8, scope: !3196)
!3198 = !DILocation(line: 0, scope: !3196)
!3199 = !DILocation(line: 1649, column: 14, scope: !3200)
!3200 = distinct !DILexicalBlock(scope: !3196, file: !1, line: 1648, column: 3)
!3201 = !DILocation(line: 1649, column: 11, scope: !3200)
!3202 = !DILocation(line: 1649, column: 37, scope: !3200)
!3203 = !DILocation(line: 1649, column: 30, scope: !3200)
!3204 = !DILocation(line: 1648, column: 3, scope: !3196)
!3205 = !DILocation(line: 1652, column: 12, scope: !3206)
!3206 = distinct !DILexicalBlock(scope: !3207, file: !1, line: 1652, column: 11)
!3207 = distinct !DILexicalBlock(scope: !3200, file: !1, line: 1651, column: 5)
!3208 = !DILocation(line: 1652, column: 11, scope: !3207)
!3209 = !DILocation(line: 1654, column: 11, scope: !3207)
!3210 = !DILocation(line: 1656, column: 16, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3207, file: !1, line: 1656, column: 11)
!3212 = !DILocation(line: 1656, column: 22, scope: !3211)
!3213 = !DILocation(line: 1656, column: 11, scope: !3207)
!3214 = !DILocation(line: 1659, column: 28, scope: !3207)
!3215 = !DILocation(line: 1659, column: 14, scope: !3207)
!3216 = !DILocation(line: 1660, column: 14, scope: !3207)
!3217 = !DILocation(line: 1664, column: 14, scope: !3218)
!3218 = distinct !DILexicalBlock(scope: !3207, file: !1, line: 1664, column: 11)
!3219 = !DILocation(line: 1664, column: 20, scope: !3218)
!3220 = !DILocation(line: 1664, column: 11, scope: !3207)
!3221 = !DILocation(line: 1665, column: 9, scope: !3218)
!3222 = !DILocation(line: 1665, column: 2, scope: !3218)
!3223 = !DILocation(line: 0, scope: !3207)
!3224 = !DILocation(line: 1666, column: 14, scope: !3207)
!3225 = !DILocation(line: 1667, column: 7, scope: !3207)
!3226 = !DILocation(line: 1668, column: 5, scope: !3207)
!3227 = !DILocation(line: 1650, column: 13, scope: !3200)
!3228 = !DILocation(line: 1648, column: 3, scope: !3200)
!3229 = distinct !{!3229, !3204, !3230}
!3230 = !DILocation(line: 1668, column: 5, scope: !3196)
!3231 = !DILocation(line: 1671, column: 1, scope: !3181)
!3232 = distinct !DISubprogram(name: "gimple_location", scope: !389, file: !389, line: 1139, type: !3233, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3235)
!3233 = !DISubroutineType(types: !3234)
!3234 = !{!601, !2467}
!3235 = !{!3236}
!3236 = !DILocalVariable(name: "g", arg: 1, scope: !3232, file: !389, line: 1139, type: !2467)
!3237 = !DILocation(line: 0, scope: !3232)
!3238 = !DILocation(line: 1141, column: 20, scope: !3232)
!3239 = !DILocation(line: 1141, column: 3, scope: !3232)
!3240 = distinct !DISubprogram(name: "find_loop_niter", scope: !1, file: !1, line: 1897, type: !3241, scopeLine: 1898, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3244)
!3241 = !DISubroutineType(types: !3242)
!3242 = !{!476, !1015, !3243}
!3243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !780, size: 64)
!3244 = !{!3245, !3246, !3247, !3248, !3254, !3255, !3256, !3257}
!3245 = !DILocalVariable(name: "loop", arg: 1, scope: !3240, file: !1, line: 1897, type: !1015)
!3246 = !DILocalVariable(name: "exit", arg: 2, scope: !3240, file: !1, line: 1897, type: !3243)
!3247 = !DILocalVariable(name: "i", scope: !3240, file: !1, line: 1899, type: !5)
!3248 = !DILocalVariable(name: "exits", scope: !3240, file: !1, line: 1900, type: !3249)
!3249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3250, size: 64)
!3250 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !341, line: 152, baseType: !3251)
!3251 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !341, line: 152, size: 128, elements: !3252)
!3252 = !{!3253}
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3251, file: !341, line: 152, baseType: !773, size: 128)
!3254 = !DILocalVariable(name: "ex", scope: !3240, file: !1, line: 1901, type: !780)
!3255 = !DILocalVariable(name: "niter", scope: !3240, file: !1, line: 1902, type: !476)
!3256 = !DILocalVariable(name: "aniter", scope: !3240, file: !1, line: 1902, type: !476)
!3257 = !DILocalVariable(name: "desc", scope: !3240, file: !1, line: 1903, type: !2692)
!3258 = !DILocation(line: 0, scope: !3240)
!3259 = !DILocation(line: 1900, column: 3, scope: !3240)
!3260 = !DILocation(line: 1900, column: 29, scope: !3240)
!3261 = !DILocation(line: 1900, column: 21, scope: !3240)
!3262 = !DILocation(line: 1901, column: 3, scope: !3240)
!3263 = !DILocation(line: 1903, column: 3, scope: !3240)
!3264 = !DILocation(line: 1905, column: 9, scope: !3240)
!3265 = !DILocation(line: 0, scope: !3266)
!3266 = distinct !DILexicalBlock(scope: !3267, file: !1, line: 1914, column: 11)
!3267 = distinct !DILexicalBlock(scope: !3268, file: !1, line: 1907, column: 5)
!3268 = distinct !DILexicalBlock(scope: !3269, file: !1, line: 1906, column: 3)
!3269 = distinct !DILexicalBlock(scope: !3240, file: !1, line: 1906, column: 3)
!3270 = !DILocation(line: 0, scope: !3267)
!3271 = !DILocation(line: 0, scope: !3272)
!3272 = distinct !DILexicalBlock(scope: !3273, file: !1, line: 1941, column: 2)
!3273 = distinct !DILexicalBlock(scope: !3267, file: !1, line: 1940, column: 11)
!3274 = !DILocation(line: 1906, column: 8, scope: !3269)
!3275 = !DILocation(line: 1906, column: 15, scope: !3268)
!3276 = !DILocation(line: 0, scope: !3269)
!3277 = !DILocation(line: 1902, column: 8, scope: !3240)
!3278 = !DILocation(line: 1906, column: 3, scope: !3269)
!3279 = !DILocation(line: 1908, column: 46, scope: !3280)
!3280 = distinct !DILexicalBlock(scope: !3267, file: !1, line: 1908, column: 11)
!3281 = !DILocation(line: 1908, column: 50, scope: !3280)
!3282 = !DILocation(line: 1908, column: 12, scope: !3280)
!3283 = !DILocation(line: 1908, column: 11, scope: !3267)
!3284 = !DILocation(line: 1911, column: 45, scope: !3285)
!3285 = distinct !DILexicalBlock(scope: !3267, file: !1, line: 1911, column: 11)
!3286 = !DILocation(line: 1911, column: 12, scope: !3285)
!3287 = !DILocation(line: 1911, column: 11, scope: !3267)
!3288 = !DILocation(line: 1914, column: 34, scope: !3266)
!3289 = !DILocation(line: 1914, column: 11, scope: !3266)
!3290 = !DILocation(line: 1914, column: 11, scope: !3267)
!3291 = !DILocation(line: 1918, column: 27, scope: !3292)
!3292 = distinct !DILexicalBlock(scope: !3266, file: !1, line: 1915, column: 2)
!3293 = !DILocation(line: 1918, column: 12, scope: !3292)
!3294 = !DILocation(line: 1919, column: 12, scope: !3292)
!3295 = !DILocation(line: 1919, column: 10, scope: !3292)
!3296 = !DILocation(line: 1920, column: 4, scope: !3292)
!3297 = !DILocation(line: 1923, column: 32, scope: !3298)
!3298 = distinct !DILexicalBlock(scope: !3267, file: !1, line: 1923, column: 11)
!3299 = !DILocation(line: 1923, column: 12, scope: !3298)
!3300 = !DILocation(line: 1923, column: 11, scope: !3267)
!3301 = !DILocation(line: 1926, column: 21, scope: !3267)
!3302 = !DILocation(line: 1928, column: 12, scope: !3303)
!3303 = distinct !DILexicalBlock(scope: !3267, file: !1, line: 1928, column: 11)
!3304 = !DILocation(line: 1928, column: 11, scope: !3267)
!3305 = !DILocation(line: 1932, column: 12, scope: !3306)
!3306 = distinct !DILexicalBlock(scope: !3303, file: !1, line: 1929, column: 2)
!3307 = !DILocation(line: 1932, column: 10, scope: !3306)
!3308 = !DILocation(line: 1933, column: 4, scope: !3306)
!3309 = !DILocation(line: 1937, column: 11, scope: !3310)
!3310 = distinct !DILexicalBlock(scope: !3267, file: !1, line: 1937, column: 11)
!3311 = !DILocation(line: 1937, column: 30, scope: !3310)
!3312 = !DILocation(line: 1937, column: 11, scope: !3267)
!3313 = !DILocation(line: 1940, column: 11, scope: !3273)
!3314 = !DILocation(line: 1940, column: 29, scope: !3273)
!3315 = !DILocation(line: 1940, column: 11, scope: !3267)
!3316 = !DILocation(line: 1943, column: 12, scope: !3272)
!3317 = !DILocation(line: 1943, column: 10, scope: !3272)
!3318 = !DILocation(line: 1944, column: 4, scope: !3272)
!3319 = !DILocation(line: 1947, column: 11, scope: !3320)
!3320 = distinct !DILexicalBlock(scope: !3267, file: !1, line: 1947, column: 11)
!3321 = !DILocation(line: 1947, column: 11, scope: !3267)
!3322 = !DILocation(line: 1950, column: 12, scope: !3323)
!3323 = distinct !DILexicalBlock(scope: !3320, file: !1, line: 1948, column: 2)
!3324 = !DILocation(line: 1950, column: 10, scope: !3323)
!3325 = !DILocation(line: 1951, column: 4, scope: !3323)
!3326 = !DILocation(line: 1906, column: 50, scope: !3268)
!3327 = !DILocation(line: 1906, column: 3, scope: !3268)
!3328 = distinct !{!3328, !3278, !3329}
!3329 = !DILocation(line: 1953, column: 5, scope: !3269)
!3330 = !DILocation(line: 1954, column: 3, scope: !3240)
!3331 = !DILocation(line: 1956, column: 10, scope: !3240)
!3332 = !DILocation(line: 1957, column: 1, scope: !3240)
!3333 = !DILocation(line: 1956, column: 3, scope: !3240)
!3334 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !341, file: !341, line: 150, type: !3335, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3339)
!3335 = !DISubroutineType(types: !3336)
!3336 = !{!469, !3337, !5, !3243}
!3337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3338, size: 64)
!3338 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !773)
!3339 = !{!3340, !3341, !3342}
!3340 = !DILocalVariable(name: "vec_", arg: 1, scope: !3334, file: !341, line: 150, type: !3337)
!3341 = !DILocalVariable(name: "ix_", arg: 2, scope: !3334, file: !341, line: 150, type: !5)
!3342 = !DILocalVariable(name: "ptr", arg: 3, scope: !3334, file: !341, line: 150, type: !3243)
!3343 = !DILocation(line: 0, scope: !3334)
!3344 = !DILocation(line: 150, column: 1, scope: !3345)
!3345 = distinct !DILexicalBlock(scope: !3334, file: !341, line: 150, column: 1)
!3346 = !DILocation(line: 150, column: 1, scope: !3334)
!3347 = !DILocation(line: 150, column: 1, scope: !3348)
!3348 = distinct !DILexicalBlock(scope: !3345, file: !341, line: 150, column: 1)
!3349 = !DILocation(line: 150, column: 1, scope: !3350)
!3350 = distinct !DILexicalBlock(scope: !3345, file: !341, line: 150, column: 1)
!3351 = !DILocation(line: 0, scope: !3345)
!3352 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !341, file: !341, line: 152, type: !3353, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3356)
!3353 = !DISubroutineType(types: !3354)
!3354 = !{null, !3355}
!3355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3249, size: 64)
!3356 = !{!3357}
!3357 = !DILocalVariable(name: "vec_", arg: 1, scope: !3352, file: !341, line: 152, type: !3355)
!3358 = !DILocation(line: 0, scope: !3352)
!3359 = !DILocation(line: 152, column: 1, scope: !3360)
!3360 = distinct !DILexicalBlock(scope: !3352, file: !341, line: 152, column: 1)
!3361 = !DILocation(line: 152, column: 1, scope: !3352)
!3362 = distinct !DISubprogram(name: "finite_loop_p", scope: !1, file: !1, line: 1962, type: !3363, scopeLine: 1963, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3365)
!3363 = !DISubroutineType(types: !3364)
!3364 = !{!468, !1015}
!3365 = !{!3366, !3367, !3368, !3369, !3370, !3371}
!3366 = !DILocalVariable(name: "loop", arg: 1, scope: !3362, file: !1, line: 1962, type: !1015)
!3367 = !DILocalVariable(name: "i", scope: !3362, file: !1, line: 1964, type: !5)
!3368 = !DILocalVariable(name: "exits", scope: !3362, file: !1, line: 1965, type: !3249)
!3369 = !DILocalVariable(name: "ex", scope: !3362, file: !1, line: 1966, type: !780)
!3370 = !DILocalVariable(name: "desc", scope: !3362, file: !1, line: 1967, type: !2692)
!3371 = !DILocalVariable(name: "finite", scope: !3362, file: !1, line: 1968, type: !468)
!3372 = !DILocation(line: 0, scope: !3362)
!3373 = !DILocation(line: 1965, column: 3, scope: !3362)
!3374 = !DILocation(line: 1966, column: 3, scope: !3362)
!3375 = !DILocation(line: 1967, column: 3, scope: !3362)
!3376 = !DILocation(line: 1970, column: 7, scope: !3377)
!3377 = distinct !DILexicalBlock(scope: !3362, file: !1, line: 1970, column: 7)
!3378 = !DILocation(line: 1970, column: 7, scope: !3362)
!3379 = !DILocation(line: 1972, column: 8, scope: !3380)
!3380 = distinct !DILexicalBlock(scope: !3362, file: !1, line: 1972, column: 7)
!3381 = !DILocation(line: 1973, column: 8, scope: !3380)
!3382 = !DILocation(line: 0, scope: !3380)
!3383 = !DILocation(line: 1974, column: 11, scope: !3380)
!3384 = !DILocation(line: 1973, column: 11, scope: !3380)
!3385 = !DILocation(line: 1974, column: 7, scope: !3380)
!3386 = !DILocation(line: 1972, column: 7, scope: !3362)
!3387 = !DILocation(line: 1976, column: 11, scope: !3388)
!3388 = distinct !DILexicalBlock(scope: !3389, file: !1, line: 1976, column: 11)
!3389 = distinct !DILexicalBlock(scope: !3380, file: !1, line: 1975, column: 5)
!3390 = !DILocation(line: 1976, column: 21, scope: !3388)
!3391 = !DILocation(line: 1976, column: 25, scope: !3388)
!3392 = !DILocation(line: 1976, column: 36, scope: !3388)
!3393 = !DILocation(line: 1976, column: 11, scope: !3389)
!3394 = !DILocation(line: 1978, column: 10, scope: !3388)
!3395 = !DILocation(line: 1977, column: 2, scope: !3388)
!3396 = !DILocation(line: 1982, column: 11, scope: !3362)
!3397 = !DILocation(line: 1982, column: 9, scope: !3362)
!3398 = !DILocation(line: 1983, column: 8, scope: !3399)
!3399 = distinct !DILexicalBlock(scope: !3362, file: !1, line: 1983, column: 3)
!3400 = !DILocation(line: 1983, column: 15, scope: !3401)
!3401 = distinct !DILexicalBlock(scope: !3399, file: !1, line: 1983, column: 3)
!3402 = !DILocation(line: 0, scope: !3399)
!3403 = !DILocation(line: 1983, column: 3, scope: !3399)
!3404 = !DILocation(line: 1985, column: 46, scope: !3405)
!3405 = distinct !DILexicalBlock(scope: !3406, file: !1, line: 1985, column: 11)
!3406 = distinct !DILexicalBlock(scope: !3401, file: !1, line: 1984, column: 5)
!3407 = !DILocation(line: 1985, column: 50, scope: !3405)
!3408 = !DILocation(line: 1985, column: 12, scope: !3405)
!3409 = !DILocation(line: 1985, column: 11, scope: !3406)
!3410 = !DILocation(line: 1988, column: 44, scope: !3411)
!3411 = distinct !DILexicalBlock(scope: !3406, file: !1, line: 1988, column: 11)
!3412 = !DILocation(line: 1988, column: 11, scope: !3411)
!3413 = !DILocation(line: 1988, column: 11, scope: !3406)
!3414 = !DILocation(line: 1990, column: 8, scope: !3415)
!3415 = distinct !DILexicalBlock(scope: !3416, file: !1, line: 1990, column: 8)
!3416 = distinct !DILexicalBlock(scope: !3411, file: !1, line: 1989, column: 9)
!3417 = !DILocation(line: 1990, column: 18, scope: !3415)
!3418 = !DILocation(line: 1990, column: 22, scope: !3415)
!3419 = !DILocation(line: 1990, column: 33, scope: !3415)
!3420 = !DILocation(line: 1990, column: 8, scope: !3416)
!3421 = !DILocation(line: 1992, column: 76, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3415, file: !1, line: 1991, column: 6)
!3423 = !DILocation(line: 1992, column: 8, scope: !3422)
!3424 = !DILocation(line: 1993, column: 28, scope: !3422)
!3425 = !DILocation(line: 1993, column: 44, scope: !3422)
!3426 = !DILocation(line: 1993, column: 8, scope: !3422)
!3427 = !DILocation(line: 1994, column: 17, scope: !3422)
!3428 = !DILocation(line: 1994, column: 8, scope: !3422)
!3429 = !DILocation(line: 1995, column: 6, scope: !3422)
!3430 = !DILocation(line: 1983, column: 50, scope: !3401)
!3431 = !DILocation(line: 1983, column: 3, scope: !3401)
!3432 = distinct !{!3432, !3403, !3433}
!3433 = !DILocation(line: 1999, column: 5, scope: !3399)
!3434 = !DILocation(line: 2000, column: 3, scope: !3362)
!3435 = !DILocation(line: 2001, column: 3, scope: !3362)
!3436 = !DILocation(line: 2002, column: 1, scope: !3362)
!3437 = distinct !DISubprogram(name: "loop_niter_by_eval", scope: !1, file: !1, line: 2159, type: !3438, scopeLine: 2160, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3440)
!3438 = !DISubroutineType(types: !3439)
!3439 = !{!476, !1015, !780}
!3440 = !{!3441, !3442, !3443, !3444, !3446, !3447, !3448, !3449, !3450, !3451, !3452, !3453}
!3441 = !DILocalVariable(name: "loop", arg: 1, scope: !3437, file: !1, line: 2159, type: !1015)
!3442 = !DILocalVariable(name: "exit", arg: 2, scope: !3437, file: !1, line: 2159, type: !780)
!3443 = !DILocalVariable(name: "acnd", scope: !3437, file: !1, line: 2161, type: !476)
!3444 = !DILocalVariable(name: "op", scope: !3437, file: !1, line: 2162, type: !3445)
!3445 = !DICompositeType(tag: DW_TAG_array_type, baseType: !476, size: 128, elements: !719)
!3446 = !DILocalVariable(name: "val", scope: !3437, file: !1, line: 2162, type: !3445)
!3447 = !DILocalVariable(name: "next", scope: !3437, file: !1, line: 2162, type: !3445)
!3448 = !DILocalVariable(name: "aval", scope: !3437, file: !1, line: 2162, type: !3445)
!3449 = !DILocalVariable(name: "phi", scope: !3437, file: !1, line: 2163, type: !800)
!3450 = !DILocalVariable(name: "cond", scope: !3437, file: !1, line: 2163, type: !800)
!3451 = !DILocalVariable(name: "i", scope: !3437, file: !1, line: 2164, type: !5)
!3452 = !DILocalVariable(name: "j", scope: !3437, file: !1, line: 2164, type: !5)
!3453 = !DILocalVariable(name: "cmp", scope: !3437, file: !1, line: 2165, type: !132)
!3454 = !DILocation(line: 0, scope: !3437)
!3455 = !DILocation(line: 2162, column: 3, scope: !3437)
!3456 = !DILocation(line: 2162, column: 8, scope: !3437)
!3457 = !DILocation(line: 2162, column: 15, scope: !3437)
!3458 = !DILocation(line: 2162, column: 23, scope: !3437)
!3459 = !DILocation(line: 2162, column: 32, scope: !3437)
!3460 = !DILocation(line: 2167, column: 27, scope: !3437)
!3461 = !DILocation(line: 2167, column: 10, scope: !3437)
!3462 = !DILocation(line: 2168, column: 8, scope: !3463)
!3463 = distinct !DILexicalBlock(scope: !3437, file: !1, line: 2168, column: 7)
!3464 = !DILocation(line: 2168, column: 13, scope: !3463)
!3465 = !DILocation(line: 2168, column: 16, scope: !3463)
!3466 = !DILocation(line: 2168, column: 35, scope: !3463)
!3467 = !DILocation(line: 2168, column: 7, scope: !3437)
!3468 = !DILocation(line: 2169, column: 12, scope: !3463)
!3469 = !DILocation(line: 2169, column: 5, scope: !3463)
!3470 = !DILocation(line: 2171, column: 9, scope: !3437)
!3471 = !DILocation(line: 2172, column: 13, scope: !3472)
!3472 = distinct !DILexicalBlock(scope: !3437, file: !1, line: 2172, column: 7)
!3473 = !DILocation(line: 2172, column: 19, scope: !3472)
!3474 = !DILocation(line: 2172, column: 7, scope: !3437)
!3475 = !DILocation(line: 2173, column: 11, scope: !3472)
!3476 = !DILocation(line: 2173, column: 5, scope: !3472)
!3477 = !DILocation(line: 2175, column: 3, scope: !3437)
!3478 = !DILocation(line: 2183, column: 15, scope: !3479)
!3479 = distinct !DILexicalBlock(scope: !3437, file: !1, line: 2176, column: 5)
!3480 = !DILocation(line: 2183, column: 7, scope: !3479)
!3481 = !DILocation(line: 2183, column: 13, scope: !3479)
!3482 = !DILocation(line: 2184, column: 15, scope: !3479)
!3483 = !DILocation(line: 2184, column: 7, scope: !3479)
!3484 = !DILocation(line: 2184, column: 13, scope: !3479)
!3485 = !DILocation(line: 2191, column: 8, scope: !3486)
!3486 = distinct !DILexicalBlock(scope: !3437, file: !1, line: 2191, column: 3)
!3487 = !DILocation(line: 2188, column: 14, scope: !3479)
!3488 = !DILocation(line: 2188, column: 7, scope: !3479)
!3489 = !DILocation(line: 0, scope: !3486)
!3490 = !DILocation(line: 2191, column: 17, scope: !3491)
!3491 = distinct !DILexicalBlock(scope: !3486, file: !1, line: 2191, column: 3)
!3492 = !DILocation(line: 2191, column: 3, scope: !3486)
!3493 = !DILocation(line: 2193, column: 36, scope: !3494)
!3494 = distinct !DILexicalBlock(scope: !3495, file: !1, line: 2193, column: 11)
!3495 = distinct !DILexicalBlock(scope: !3491, file: !1, line: 2192, column: 5)
!3496 = !DILocation(line: 2193, column: 11, scope: !3494)
!3497 = !DILocation(line: 2193, column: 11, scope: !3495)
!3498 = !DILocation(line: 2195, column: 4, scope: !3499)
!3499 = distinct !DILexicalBlock(scope: !3494, file: !1, line: 2194, column: 2)
!3500 = !DILocation(line: 2195, column: 11, scope: !3499)
!3501 = !DILocation(line: 2196, column: 4, scope: !3499)
!3502 = !DILocation(line: 2196, column: 12, scope: !3499)
!3503 = !DILocation(line: 2197, column: 10, scope: !3499)
!3504 = !DILocation(line: 2198, column: 2, scope: !3499)
!3505 = !DILocation(line: 2201, column: 10, scope: !3506)
!3506 = distinct !DILexicalBlock(scope: !3494, file: !1, line: 2200, column: 2)
!3507 = !DILocation(line: 2202, column: 9, scope: !3508)
!3508 = distinct !DILexicalBlock(scope: !3506, file: !1, line: 2202, column: 8)
!3509 = !DILocation(line: 2202, column: 8, scope: !3506)
!3510 = !DILocation(line: 2203, column: 13, scope: !3508)
!3511 = !DILocation(line: 2203, column: 6, scope: !3508)
!3512 = !DILocation(line: 2204, column: 13, scope: !3506)
!3513 = !DILocation(line: 2204, column: 4, scope: !3506)
!3514 = !DILocation(line: 2204, column: 11, scope: !3506)
!3515 = !DILocation(line: 2205, column: 14, scope: !3506)
!3516 = !DILocation(line: 2205, column: 4, scope: !3506)
!3517 = !DILocation(line: 2205, column: 12, scope: !3506)
!3518 = !DILocation(line: 2191, column: 23, scope: !3491)
!3519 = !DILocation(line: 2191, column: 3, scope: !3491)
!3520 = distinct !{!3520, !3492, !3521}
!3521 = !DILocation(line: 2207, column: 5, scope: !3486)
!3522 = !DILocation(line: 2210, column: 3, scope: !3437)
!3523 = !DILocation(line: 0, scope: !3524)
!3524 = distinct !DILexicalBlock(scope: !3525, file: !1, line: 2213, column: 5)
!3525 = distinct !DILexicalBlock(scope: !3526, file: !1, line: 2212, column: 3)
!3526 = distinct !DILexicalBlock(scope: !3437, file: !1, line: 2212, column: 3)
!3527 = !DILocation(line: 2212, column: 8, scope: !3526)
!3528 = !DILocation(line: 0, scope: !3526)
!3529 = !DILocation(line: 2212, column: 19, scope: !3525)
!3530 = !DILocation(line: 2212, column: 17, scope: !3525)
!3531 = !DILocation(line: 2212, column: 3, scope: !3526)
!3532 = !DILocation(line: 2214, column: 7, scope: !3533)
!3533 = distinct !DILexicalBlock(scope: !3524, file: !1, line: 2214, column: 7)
!3534 = !DILocation(line: 0, scope: !3533)
!3535 = !DILocation(line: 2214, column: 21, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3533, file: !1, line: 2214, column: 7)
!3537 = !DILocation(line: 2215, column: 25, scope: !3536)
!3538 = !DILocation(line: 2215, column: 32, scope: !3536)
!3539 = !DILocation(line: 2215, column: 12, scope: !3536)
!3540 = !DILocation(line: 2215, column: 2, scope: !3536)
!3541 = !DILocation(line: 2215, column: 10, scope: !3536)
!3542 = !DILocation(line: 2214, column: 27, scope: !3536)
!3543 = !DILocation(line: 2214, column: 7, scope: !3536)
!3544 = distinct !{!3544, !3532, !3545}
!3545 = !DILocation(line: 2215, column: 38, scope: !3533)
!3546 = !DILocation(line: 2217, column: 14, scope: !3524)
!3547 = !DILocation(line: 2218, column: 11, scope: !3548)
!3548 = distinct !DILexicalBlock(scope: !3524, file: !1, line: 2218, column: 11)
!3549 = !DILocation(line: 2218, column: 16, scope: !3548)
!3550 = !DILocation(line: 2218, column: 19, scope: !3548)
!3551 = !DILocation(line: 2218, column: 11, scope: !3524)
!3552 = !DILocation(line: 2220, column: 4, scope: !3553)
!3553 = distinct !DILexicalBlock(scope: !3548, file: !1, line: 2219, column: 2)
!3554 = !DILocation(line: 2221, column: 8, scope: !3555)
!3555 = distinct !DILexicalBlock(scope: !3553, file: !1, line: 2221, column: 8)
!3556 = !DILocation(line: 2221, column: 18, scope: !3555)
!3557 = !DILocation(line: 2221, column: 22, scope: !3555)
!3558 = !DILocation(line: 2221, column: 33, scope: !3555)
!3559 = !DILocation(line: 2221, column: 8, scope: !3553)
!3560 = !DILocation(line: 2224, column: 14, scope: !3555)
!3561 = !DILocation(line: 2222, column: 6, scope: !3555)
!3562 = !DILocation(line: 2225, column: 26, scope: !3553)
!3563 = !DILocation(line: 2225, column: 46, scope: !3553)
!3564 = !DILocation(line: 2225, column: 11, scope: !3553)
!3565 = !DILocation(line: 2225, column: 4, scope: !3553)
!3566 = !DILocation(line: 2228, column: 12, scope: !3567)
!3567 = distinct !DILexicalBlock(scope: !3524, file: !1, line: 2228, column: 7)
!3568 = !DILocation(line: 0, scope: !3567)
!3569 = !DILocation(line: 2228, column: 21, scope: !3570)
!3570 = distinct !DILexicalBlock(scope: !3567, file: !1, line: 2228, column: 7)
!3571 = !DILocation(line: 2228, column: 7, scope: !3567)
!3572 = !DILocation(line: 2230, column: 26, scope: !3573)
!3573 = distinct !DILexicalBlock(scope: !3570, file: !1, line: 2229, column: 2)
!3574 = !DILocation(line: 2230, column: 35, scope: !3573)
!3575 = !DILocation(line: 2230, column: 13, scope: !3573)
!3576 = !DILocation(line: 2230, column: 11, scope: !3573)
!3577 = !DILocation(line: 2231, column: 9, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3573, file: !1, line: 2231, column: 8)
!3579 = !DILocation(line: 2231, column: 8, scope: !3573)
!3580 = !DILocation(line: 2233, column: 8, scope: !3581)
!3581 = distinct !DILexicalBlock(scope: !3578, file: !1, line: 2232, column: 6)
!3582 = !DILocation(line: 2234, column: 15, scope: !3581)
!3583 = !DILocation(line: 2234, column: 8, scope: !3581)
!3584 = !DILocation(line: 2228, column: 27, scope: !3570)
!3585 = !DILocation(line: 2228, column: 7, scope: !3570)
!3586 = distinct !{!3586, !3571, !3587}
!3587 = !DILocation(line: 2236, column: 2, scope: !3567)
!3588 = !DILocation(line: 2212, column: 45, scope: !3525)
!3589 = !DILocation(line: 2212, column: 3, scope: !3525)
!3590 = distinct !{!3590, !3531, !3591}
!3591 = !DILocation(line: 2237, column: 5, scope: !3526)
!3592 = !DILocation(line: 2239, column: 3, scope: !3437)
!3593 = !DILocation(line: 2241, column: 10, scope: !3437)
!3594 = !DILocation(line: 2241, column: 3, scope: !3437)
!3595 = !DILocation(line: 2242, column: 1, scope: !3437)
!3596 = distinct !DISubprogram(name: "get_base_for", scope: !1, file: !1, line: 2067, type: !3597, scopeLine: 2068, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3599)
!3597 = !DISubroutineType(types: !3598)
!3598 = !{!800, !1015, !476}
!3599 = !{!3600, !3601, !3602, !3603, !3604}
!3600 = !DILocalVariable(name: "loop", arg: 1, scope: !3596, file: !1, line: 2067, type: !1015)
!3601 = !DILocalVariable(name: "x", arg: 2, scope: !3596, file: !1, line: 2067, type: !476)
!3602 = !DILocalVariable(name: "phi", scope: !3596, file: !1, line: 2069, type: !800)
!3603 = !DILocalVariable(name: "init", scope: !3596, file: !1, line: 2070, type: !476)
!3604 = !DILocalVariable(name: "next", scope: !3596, file: !1, line: 2070, type: !476)
!3605 = !DILocation(line: 0, scope: !3596)
!3606 = !DILocation(line: 2072, column: 7, scope: !3607)
!3607 = distinct !DILexicalBlock(scope: !3596, file: !1, line: 2072, column: 7)
!3608 = !DILocation(line: 2072, column: 7, scope: !3596)
!3609 = !DILocation(line: 2075, column: 9, scope: !3596)
!3610 = !DILocation(line: 2076, column: 8, scope: !3611)
!3611 = distinct !DILexicalBlock(scope: !3596, file: !1, line: 2076, column: 7)
!3612 = !DILocation(line: 2076, column: 7, scope: !3596)
!3613 = !DILocation(line: 2079, column: 10, scope: !3596)
!3614 = !DILocation(line: 2080, column: 10, scope: !3596)
!3615 = !DILocation(line: 2082, column: 7, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3596, file: !1, line: 2082, column: 7)
!3617 = !DILocation(line: 2082, column: 24, scope: !3616)
!3618 = !DILocation(line: 2082, column: 7, scope: !3596)
!3619 = !DILocation(line: 2085, column: 8, scope: !3620)
!3620 = distinct !DILexicalBlock(scope: !3596, file: !1, line: 2085, column: 7)
!3621 = !DILocation(line: 2085, column: 7, scope: !3596)
!3622 = !DILocation(line: 2088, column: 7, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3596, file: !1, line: 2088, column: 7)
!3624 = !DILocation(line: 2088, column: 40, scope: !3623)
!3625 = !DILocation(line: 2092, column: 1, scope: !3596)
!3626 = distinct !DISubprogram(name: "get_val_for", scope: !1, file: !1, line: 2103, type: !3627, scopeLine: 2104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3629)
!3627 = !DISubroutineType(types: !3628)
!3628 = !{!476, !476, !476}
!3629 = !{!3630, !3631, !3632, !3633, !3638}
!3630 = !DILocalVariable(name: "x", arg: 1, scope: !3626, file: !1, line: 2103, type: !476)
!3631 = !DILocalVariable(name: "base", arg: 2, scope: !3626, file: !1, line: 2103, type: !476)
!3632 = !DILocalVariable(name: "stmt", scope: !3626, file: !1, line: 2105, type: !800)
!3633 = !DILocalVariable(name: "rhs1", scope: !3634, file: !1, line: 2132, type: !476)
!3634 = distinct !DILexicalBlock(scope: !3635, file: !1, line: 2131, column: 5)
!3635 = distinct !DILexicalBlock(scope: !3636, file: !1, line: 2130, column: 12)
!3636 = distinct !DILexicalBlock(scope: !3637, file: !1, line: 2123, column: 12)
!3637 = distinct !DILexicalBlock(scope: !3626, file: !1, line: 2121, column: 7)
!3638 = !DILocalVariable(name: "rhs2", scope: !3634, file: !1, line: 2133, type: !476)
!3639 = !DILocation(line: 2122, column: 12, scope: !3637)
!3640 = !DILocation(line: 0, scope: !3626)
!3641 = !DILocation(line: 2107, column: 3, scope: !3626)
!3642 = !DILocation(line: 2109, column: 8, scope: !3643)
!3643 = distinct !DILexicalBlock(scope: !3626, file: !1, line: 2109, column: 7)
!3644 = !DILocation(line: 2109, column: 7, scope: !3626)
!3645 = !DILocation(line: 2112, column: 10, scope: !3626)
!3646 = !DILocation(line: 2113, column: 7, scope: !3647)
!3647 = distinct !DILexicalBlock(scope: !3626, file: !1, line: 2113, column: 7)
!3648 = !DILocation(line: 2113, column: 26, scope: !3647)
!3649 = !DILocation(line: 2113, column: 7, scope: !3626)
!3650 = !DILocation(line: 2116, column: 3, scope: !3626)
!3651 = !DILocation(line: 2121, column: 7, scope: !3637)
!3652 = !DILocation(line: 2121, column: 7, scope: !3626)
!3653 = !DILocation(line: 2122, column: 25, scope: !3637)
!3654 = !DILocation(line: 2123, column: 12, scope: !3636)
!3655 = !DILocation(line: 2123, column: 43, scope: !3636)
!3656 = !DILocation(line: 2124, column: 5, scope: !3636)
!3657 = !DILocation(line: 2124, column: 8, scope: !3636)
!3658 = !DILocation(line: 2124, column: 46, scope: !3636)
!3659 = !DILocation(line: 2123, column: 12, scope: !3637)
!3660 = !DILocation(line: 2126, column: 14, scope: !3661)
!3661 = distinct !DILexicalBlock(scope: !3636, file: !1, line: 2125, column: 5)
!3662 = !DILocation(line: 2148, column: 1, scope: !3626)
!3663 = !DILocation(line: 2130, column: 12, scope: !3635)
!3664 = !DILocation(line: 2130, column: 43, scope: !3635)
!3665 = !DILocation(line: 2130, column: 12, scope: !3636)
!3666 = !DILocation(line: 2132, column: 19, scope: !3634)
!3667 = !DILocation(line: 0, scope: !3634)
!3668 = !DILocation(line: 2133, column: 19, scope: !3634)
!3669 = !DILocation(line: 2134, column: 11, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3634, file: !1, line: 2134, column: 11)
!3671 = !DILocation(line: 2134, column: 28, scope: !3670)
!3672 = !DILocation(line: 2134, column: 11, scope: !3634)
!3673 = !DILocation(line: 2135, column: 9, scope: !3670)
!3674 = !DILocation(line: 2135, column: 2, scope: !3670)
!3675 = !DILocation(line: 2136, column: 16, scope: !3676)
!3676 = distinct !DILexicalBlock(scope: !3670, file: !1, line: 2136, column: 16)
!3677 = !DILocation(line: 2136, column: 33, scope: !3676)
!3678 = !DILocation(line: 2136, column: 16, scope: !3670)
!3679 = !DILocation(line: 2137, column: 9, scope: !3676)
!3680 = !DILocation(line: 2137, column: 2, scope: !3676)
!3681 = !DILocation(line: 2139, column: 2, scope: !3676)
!3682 = !DILocation(line: 2140, column: 14, scope: !3634)
!3683 = !DILocation(line: 2144, column: 5, scope: !3635)
!3684 = !DILocation(line: 2146, column: 5, scope: !3626)
!3685 = distinct !DISubprogram(name: "find_loop_niter_by_eval", scope: !1, file: !1, line: 2252, type: !3241, scopeLine: 2253, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3686)
!3686 = !{!3687, !3688, !3689, !3690, !3691, !3692, !3693}
!3687 = !DILocalVariable(name: "loop", arg: 1, scope: !3685, file: !1, line: 2252, type: !1015)
!3688 = !DILocalVariable(name: "exit", arg: 2, scope: !3685, file: !1, line: 2252, type: !3243)
!3689 = !DILocalVariable(name: "i", scope: !3685, file: !1, line: 2254, type: !5)
!3690 = !DILocalVariable(name: "exits", scope: !3685, file: !1, line: 2255, type: !3249)
!3691 = !DILocalVariable(name: "ex", scope: !3685, file: !1, line: 2256, type: !780)
!3692 = !DILocalVariable(name: "niter", scope: !3685, file: !1, line: 2257, type: !476)
!3693 = !DILocalVariable(name: "aniter", scope: !3685, file: !1, line: 2257, type: !476)
!3694 = !DILocation(line: 0, scope: !3685)
!3695 = !DILocation(line: 2255, column: 3, scope: !3685)
!3696 = !DILocation(line: 2255, column: 29, scope: !3685)
!3697 = !DILocation(line: 2255, column: 21, scope: !3685)
!3698 = !DILocation(line: 2256, column: 3, scope: !3685)
!3699 = !DILocation(line: 2259, column: 9, scope: !3685)
!3700 = !DILocation(line: 2262, column: 8, scope: !3701)
!3701 = distinct !DILexicalBlock(scope: !3685, file: !1, line: 2262, column: 7)
!3702 = !DILocation(line: 2263, column: 7, scope: !3701)
!3703 = !DILocation(line: 2263, column: 10, scope: !3701)
!3704 = !DILocation(line: 2263, column: 35, scope: !3701)
!3705 = !DILocation(line: 2262, column: 7, scope: !3685)
!3706 = !DILocation(line: 2264, column: 12, scope: !3701)
!3707 = !DILocation(line: 2264, column: 5, scope: !3701)
!3708 = !DILocation(line: 0, scope: !3709)
!3709 = distinct !DILexicalBlock(scope: !3710, file: !1, line: 2267, column: 5)
!3710 = distinct !DILexicalBlock(scope: !3711, file: !1, line: 2266, column: 3)
!3711 = distinct !DILexicalBlock(scope: !3685, file: !1, line: 2266, column: 3)
!3712 = !DILocation(line: 2266, column: 8, scope: !3711)
!3713 = !DILocation(line: 2266, column: 15, scope: !3710)
!3714 = !DILocation(line: 0, scope: !3711)
!3715 = !DILocation(line: 2257, column: 8, scope: !3685)
!3716 = !DILocation(line: 2266, column: 3, scope: !3711)
!3717 = !DILocation(line: 2268, column: 46, scope: !3718)
!3718 = distinct !DILexicalBlock(scope: !3709, file: !1, line: 2268, column: 11)
!3719 = !DILocation(line: 2268, column: 50, scope: !3718)
!3720 = !DILocation(line: 2268, column: 12, scope: !3718)
!3721 = !DILocation(line: 2268, column: 11, scope: !3709)
!3722 = !DILocation(line: 2271, column: 42, scope: !3709)
!3723 = !DILocation(line: 2271, column: 16, scope: !3709)
!3724 = !DILocation(line: 2272, column: 11, scope: !3725)
!3725 = distinct !DILexicalBlock(scope: !3709, file: !1, line: 2272, column: 11)
!3726 = !DILocation(line: 2272, column: 11, scope: !3709)
!3727 = !DILocation(line: 2275, column: 11, scope: !3728)
!3728 = distinct !DILexicalBlock(scope: !3709, file: !1, line: 2275, column: 11)
!3729 = !DILocation(line: 2276, column: 4, scope: !3728)
!3730 = !DILocation(line: 2276, column: 8, scope: !3728)
!3731 = !DILocation(line: 2275, column: 11, scope: !3709)
!3732 = !DILocation(line: 2280, column: 15, scope: !3709)
!3733 = !DILocation(line: 2280, column: 13, scope: !3709)
!3734 = !DILocation(line: 2281, column: 5, scope: !3709)
!3735 = !DILocation(line: 2266, column: 50, scope: !3710)
!3736 = !DILocation(line: 2266, column: 3, scope: !3710)
!3737 = distinct !{!3737, !3716, !3738}
!3738 = !DILocation(line: 2281, column: 5, scope: !3711)
!3739 = !DILocation(line: 2282, column: 3, scope: !3685)
!3740 = !DILocation(line: 2284, column: 10, scope: !3685)
!3741 = !DILocation(line: 2285, column: 1, scope: !3685)
!3742 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !341, file: !341, line: 150, type: !3743, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3745)
!3743 = !DISubroutineType(types: !3744)
!3744 = !{!5, !3337}
!3745 = !{!3746}
!3746 = !DILocalVariable(name: "vec_", arg: 1, scope: !3742, file: !341, line: 150, type: !3337)
!3747 = !DILocation(line: 0, scope: !3742)
!3748 = !DILocation(line: 150, column: 1, scope: !3742)
!3749 = distinct !DISubprogram(name: "array_at_struct_end_p", scope: !1, file: !1, line: 2621, type: !3750, scopeLine: 2622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3752)
!3750 = !DISubroutineType(types: !3751)
!3751 = !{!468, !476}
!3752 = !{!3753, !3754, !3755, !3756}
!3753 = !DILocalVariable(name: "ref", arg: 1, scope: !3749, file: !1, line: 2621, type: !476)
!3754 = !DILocalVariable(name: "base", scope: !3749, file: !1, line: 2623, type: !476)
!3755 = !DILocalVariable(name: "parent", scope: !3749, file: !1, line: 2624, type: !476)
!3756 = !DILocalVariable(name: "field", scope: !3749, file: !1, line: 2624, type: !476)
!3757 = !DILocation(line: 0, scope: !3749)
!3758 = !DILocation(line: 2623, column: 15, scope: !3749)
!3759 = !DILocation(line: 2628, column: 8, scope: !3760)
!3760 = distinct !DILexicalBlock(scope: !3749, file: !1, line: 2628, column: 7)
!3761 = !DILocation(line: 2628, column: 13, scope: !3760)
!3762 = !DILocation(line: 2628, column: 17, scope: !3760)
!3763 = !DILocation(line: 2628, column: 7, scope: !3749)
!3764 = !DILocation(line: 2631, column: 3, scope: !3749)
!3765 = !DILocation(line: 2631, column: 9, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3767, file: !1, line: 2631, column: 3)
!3767 = distinct !DILexicalBlock(scope: !3749, file: !1, line: 2631, column: 3)
!3768 = !DILocation(line: 2631, column: 3, scope: !3767)
!3769 = !DILocation(line: 2633, column: 16, scope: !3770)
!3770 = distinct !DILexicalBlock(scope: !3766, file: !1, line: 2632, column: 5)
!3771 = !DILocation(line: 2635, column: 11, scope: !3772)
!3772 = distinct !DILexicalBlock(scope: !3770, file: !1, line: 2635, column: 11)
!3773 = !DILocation(line: 2635, column: 27, scope: !3772)
!3774 = !DILocation(line: 2635, column: 11, scope: !3770)
!3775 = !DILocation(line: 2638, column: 8, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3777, file: !1, line: 2638, column: 8)
!3777 = distinct !DILexicalBlock(scope: !3772, file: !1, line: 2636, column: 2)
!3778 = !DILocation(line: 2638, column: 39, scope: !3776)
!3779 = !DILocation(line: 2638, column: 8, scope: !3777)
!3780 = !DILocation(line: 2642, column: 12, scope: !3777)
!3781 = !DILocation(line: 2643, column: 8, scope: !3782)
!3782 = distinct !DILexicalBlock(scope: !3777, file: !1, line: 2643, column: 8)
!3783 = !DILocation(line: 2643, column: 8, scope: !3777)
!3784 = !DILocation(line: 2631, column: 3, scope: !3766)
!3785 = distinct !{!3785, !3768, !3786}
!3786 = !DILocation(line: 2652, column: 5, scope: !3767)
!3787 = !DILocation(line: 2654, column: 3, scope: !3749)
!3788 = !DILocation(line: 2656, column: 1, scope: !3749)
!3789 = distinct !DISubprogram(name: "handled_component_p", scope: !133, file: !133, line: 4551, type: !3790, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3792)
!3790 = !DISubroutineType(types: !3791)
!3791 = !{!468, !2451}
!3792 = !{!3793}
!3793 = !DILocalVariable(name: "t", arg: 1, scope: !3789, file: !133, line: 4551, type: !2451)
!3794 = !DILocation(line: 0, scope: !3789)
!3795 = !DILocation(line: 4553, column: 11, scope: !3789)
!3796 = !DILocation(line: 4553, column: 3, scope: !3789)
!3797 = !DILocation(line: 4565, column: 7, scope: !3798)
!3798 = distinct !DILexicalBlock(scope: !3789, file: !133, line: 4554, column: 5)
!3799 = !DILocation(line: 0, scope: !3798)
!3800 = !DILocation(line: 4567, column: 1, scope: !3789)
!3801 = distinct !DISubprogram(name: "estimate_numbers_of_iterations_loop", scope: !1, file: !1, line: 2906, type: !3802, scopeLine: 2907, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3804)
!3802 = !DISubroutineType(types: !3803)
!3803 = !{null, !1015}
!3804 = !{!3805, !3806, !3807, !3808, !3809, !3810, !3811, !3812, !3813}
!3805 = !DILocalVariable(name: "loop", arg: 1, scope: !3801, file: !1, line: 2906, type: !1015)
!3806 = !DILocalVariable(name: "exits", scope: !3801, file: !1, line: 2908, type: !3249)
!3807 = !DILocalVariable(name: "niter", scope: !3801, file: !1, line: 2909, type: !476)
!3808 = !DILocalVariable(name: "type", scope: !3801, file: !1, line: 2909, type: !476)
!3809 = !DILocalVariable(name: "i", scope: !3801, file: !1, line: 2910, type: !5)
!3810 = !DILocalVariable(name: "niter_desc", scope: !3801, file: !1, line: 2911, type: !2692)
!3811 = !DILocalVariable(name: "ex", scope: !3801, file: !1, line: 2912, type: !780)
!3812 = !DILocalVariable(name: "bound", scope: !3801, file: !1, line: 2913, type: !525)
!3813 = !DILocalVariable(name: "nit", scope: !3814, file: !1, line: 2946, type: !1011)
!3814 = distinct !DILexicalBlock(scope: !3815, file: !1, line: 2945, column: 5)
!3815 = distinct !DILexicalBlock(scope: !3801, file: !1, line: 2944, column: 7)
!3816 = !DILocation(line: 0, scope: !3801)
!3817 = !DILocation(line: 2908, column: 3, scope: !3801)
!3818 = !DILocation(line: 2911, column: 3, scope: !3801)
!3819 = !DILocation(line: 2912, column: 3, scope: !3801)
!3820 = !DILocation(line: 2913, column: 3, scope: !3801)
!3821 = !DILocation(line: 2916, column: 13, scope: !3822)
!3822 = distinct !DILexicalBlock(scope: !3801, file: !1, line: 2916, column: 7)
!3823 = !DILocation(line: 2916, column: 28, scope: !3822)
!3824 = !DILocation(line: 2916, column: 7, scope: !3801)
!3825 = !DILocation(line: 2918, column: 24, scope: !3801)
!3826 = !DILocation(line: 2919, column: 9, scope: !3801)
!3827 = !DILocation(line: 2919, column: 25, scope: !3801)
!3828 = !DILocation(line: 2920, column: 9, scope: !3801)
!3829 = !DILocation(line: 2920, column: 22, scope: !3801)
!3830 = !DILocation(line: 2922, column: 11, scope: !3801)
!3831 = !DILocation(line: 2922, column: 9, scope: !3801)
!3832 = !DILocation(line: 0, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3834, file: !1, line: 2924, column: 5)
!3834 = distinct !DILexicalBlock(scope: !3835, file: !1, line: 2923, column: 3)
!3835 = distinct !DILexicalBlock(scope: !3801, file: !1, line: 2923, column: 3)
!3836 = !DILocation(line: 0, scope: !3837)
!3837 = distinct !DILexicalBlock(scope: !3833, file: !1, line: 2930, column: 11)
!3838 = !DILocation(line: 2923, column: 8, scope: !3835)
!3839 = !DILocation(line: 2923, column: 15, scope: !3834)
!3840 = !DILocation(line: 0, scope: !3835)
!3841 = !DILocation(line: 2923, column: 3, scope: !3835)
!3842 = !DILocation(line: 2925, column: 45, scope: !3843)
!3843 = distinct !DILexicalBlock(scope: !3833, file: !1, line: 2925, column: 11)
!3844 = !DILocation(line: 2925, column: 12, scope: !3843)
!3845 = !DILocation(line: 2925, column: 11, scope: !3833)
!3846 = !DILocation(line: 2928, column: 26, scope: !3833)
!3847 = !DILocation(line: 2929, column: 14, scope: !3833)
!3848 = !DILocation(line: 2930, column: 11, scope: !3837)
!3849 = !DILocation(line: 2930, column: 46, scope: !3837)
!3850 = !DILocation(line: 2930, column: 11, scope: !3833)
!3851 = !DILocation(line: 2931, column: 10, scope: !3837)
!3852 = !DILocation(line: 2931, column: 2, scope: !3837)
!3853 = !DILocation(line: 2935, column: 21, scope: !3833)
!3854 = !DILocation(line: 2935, column: 25, scope: !3833)
!3855 = !DILocation(line: 2935, column: 10, scope: !3833)
!3856 = !DILocation(line: 2934, column: 7, scope: !3833)
!3857 = !DILocation(line: 2937, column: 5, scope: !3833)
!3858 = !DILocation(line: 2923, column: 50, scope: !3834)
!3859 = !DILocation(line: 2923, column: 3, scope: !3834)
!3860 = distinct !{!3860, !3841, !3861}
!3861 = !DILocation(line: 2937, column: 5, scope: !3835)
!3862 = !DILocation(line: 2938, column: 3, scope: !3801)
!3863 = !DILocation(line: 2940, column: 3, scope: !3801)
!3864 = !DILocation(line: 2944, column: 13, scope: !3815)
!3865 = !DILocation(line: 2944, column: 21, scope: !3815)
!3866 = !DILocation(line: 2944, column: 27, scope: !3815)
!3867 = !DILocation(line: 2944, column: 7, scope: !3801)
!3868 = !DILocation(line: 2946, column: 23, scope: !3814)
!3869 = !DILocation(line: 2946, column: 65, scope: !3814)
!3870 = !DILocation(line: 0, scope: !3814)
!3871 = !DILocation(line: 2947, column: 15, scope: !3814)
!3872 = !DILocation(line: 2948, column: 7, scope: !3814)
!3873 = !DILocation(line: 2949, column: 5, scope: !3814)
!3874 = !DILocation(line: 2953, column: 13, scope: !3875)
!3875 = distinct !DILexicalBlock(scope: !3801, file: !1, line: 2953, column: 7)
!3876 = !DILocation(line: 2953, column: 7, scope: !3875)
!3877 = !DILocation(line: 2954, column: 7, scope: !3875)
!3878 = !DILocation(line: 2954, column: 16, scope: !3875)
!3879 = !DILocation(line: 2954, column: 10, scope: !3875)
!3880 = !DILocation(line: 2955, column: 7, scope: !3875)
!3881 = !DILocation(line: 2955, column: 10, scope: !3875)
!3882 = !DILocation(line: 2956, column: 36, scope: !3875)
!3883 = !DILocation(line: 2953, column: 7, scope: !3801)
!3884 = !DILocation(line: 2957, column: 11, scope: !3875)
!3885 = !DILocation(line: 2957, column: 42, scope: !3875)
!3886 = !DILocation(line: 2957, column: 5, scope: !3875)
!3887 = !DILocation(line: 2958, column: 1, scope: !3801)
!3888 = distinct !DISubprogram(name: "record_estimate", scope: !1, file: !1, line: 2499, type: !3889, scopeLine: 2501, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3891)
!3889 = !DISubroutineType(types: !3890)
!3890 = !{null, !1015, !476, !525, !800, !468, !468, !468}
!3891 = !{!3892, !3893, !3894, !3895, !3896, !3897, !3898, !3899, !3900, !3901}
!3892 = !DILocalVariable(name: "loop", arg: 1, scope: !3888, file: !1, line: 2499, type: !1015)
!3893 = !DILocalVariable(name: "bound", arg: 2, scope: !3888, file: !1, line: 2499, type: !476)
!3894 = !DILocalVariable(name: "i_bound", arg: 3, scope: !3888, file: !1, line: 2499, type: !525)
!3895 = !DILocalVariable(name: "at_stmt", arg: 4, scope: !3888, file: !1, line: 2500, type: !800)
!3896 = !DILocalVariable(name: "is_exit", arg: 5, scope: !3888, file: !1, line: 2500, type: !468)
!3897 = !DILocalVariable(name: "realistic", arg: 6, scope: !3888, file: !1, line: 2500, type: !468)
!3898 = !DILocalVariable(name: "upper", arg: 7, scope: !3888, file: !1, line: 2500, type: !468)
!3899 = !DILocalVariable(name: "delta", scope: !3888, file: !1, line: 2502, type: !525)
!3900 = !DILocalVariable(name: "exit", scope: !3888, file: !1, line: 2503, type: !780)
!3901 = !DILocalVariable(name: "elt", scope: !3902, file: !1, line: 2528, type: !1053)
!3902 = distinct !DILexicalBlock(scope: !3903, file: !1, line: 2527, column: 5)
!3903 = distinct !DILexicalBlock(scope: !3888, file: !1, line: 2526, column: 7)
!3904 = !DILocation(line: 0, scope: !3888)
!3905 = !DILocation(line: 2502, column: 3, scope: !3888)
!3906 = !DILocation(line: 2505, column: 7, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3888, file: !1, line: 2505, column: 7)
!3908 = !DILocation(line: 2505, column: 17, scope: !3907)
!3909 = !DILocation(line: 2505, column: 21, scope: !3907)
!3910 = !DILocation(line: 2505, column: 32, scope: !3907)
!3911 = !DILocation(line: 2505, column: 7, scope: !3888)
!3912 = !DILocation(line: 2507, column: 43, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3907, file: !1, line: 2506, column: 5)
!3914 = !DILocation(line: 2507, column: 7, scope: !3913)
!3915 = !DILocation(line: 2508, column: 26, scope: !3913)
!3916 = !DILocation(line: 2508, column: 7, scope: !3913)
!3917 = !DILocation(line: 2509, column: 16, scope: !3913)
!3918 = !DILocation(line: 2510, column: 9, scope: !3913)
!3919 = !DILocation(line: 2509, column: 7, scope: !3913)
!3920 = !DILocation(line: 2511, column: 27, scope: !3913)
!3921 = !DILocation(line: 2511, column: 7, scope: !3913)
!3922 = !DILocation(line: 2512, column: 16, scope: !3913)
!3923 = !DILocation(line: 2512, column: 7, scope: !3913)
!3924 = !DILocation(line: 2513, column: 24, scope: !3913)
!3925 = !DILocation(line: 2513, column: 7, scope: !3913)
!3926 = !DILocation(line: 2514, column: 16, scope: !3913)
!3927 = !DILocation(line: 2514, column: 62, scope: !3913)
!3928 = !DILocation(line: 2514, column: 7, scope: !3913)
!3929 = !DILocation(line: 2515, column: 5, scope: !3913)
!3930 = !DILocation(line: 2519, column: 7, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3888, file: !1, line: 2519, column: 7)
!3932 = !DILocation(line: 2519, column: 25, scope: !3931)
!3933 = !DILocation(line: 2519, column: 7, scope: !3888)
!3934 = !DILocation(line: 2521, column: 14, scope: !3935)
!3935 = distinct !DILexicalBlock(scope: !3888, file: !1, line: 2521, column: 7)
!3936 = !DILocation(line: 2526, column: 7, scope: !3903)
!3937 = !DILocation(line: 2526, column: 7, scope: !3888)
!3938 = !DILocation(line: 2528, column: 35, scope: !3902)
!3939 = !DILocation(line: 0, scope: !3902)
!3940 = !DILocation(line: 2530, column: 12, scope: !3902)
!3941 = !DILocation(line: 2530, column: 20, scope: !3902)
!3942 = !DILocation(line: 2531, column: 12, scope: !3902)
!3943 = !DILocation(line: 2531, column: 17, scope: !3902)
!3944 = !DILocation(line: 2532, column: 12, scope: !3902)
!3945 = !DILocation(line: 2532, column: 20, scope: !3902)
!3946 = !DILocation(line: 2533, column: 25, scope: !3902)
!3947 = !DILocation(line: 2533, column: 12, scope: !3902)
!3948 = !DILocation(line: 2533, column: 17, scope: !3902)
!3949 = !DILocation(line: 2534, column: 20, scope: !3902)
!3950 = !DILocation(line: 2535, column: 5, scope: !3902)
!3951 = !DILocation(line: 2542, column: 10, scope: !3888)
!3952 = !DILocation(line: 2543, column: 7, scope: !3953)
!3953 = distinct !DILexicalBlock(scope: !3888, file: !1, line: 2543, column: 7)
!3954 = !DILocation(line: 2544, column: 7, scope: !3953)
!3955 = !DILocation(line: 2544, column: 16, scope: !3953)
!3956 = !DILocation(line: 2545, column: 4, scope: !3953)
!3957 = !DILocation(line: 2546, column: 15, scope: !3953)
!3958 = !DILocation(line: 2546, column: 20, scope: !3953)
!3959 = !DILocation(line: 2545, column: 7, scope: !3953)
!3960 = !DILocation(line: 2543, column: 7, scope: !3888)
!3961 = !DILocation(line: 2547, column: 13, scope: !3953)
!3962 = !DILocation(line: 2547, column: 5, scope: !3953)
!3963 = !DILocation(line: 2549, column: 13, scope: !3953)
!3964 = !DILocation(line: 2550, column: 13, scope: !3888)
!3965 = !DILocation(line: 2553, column: 7, scope: !3966)
!3966 = distinct !DILexicalBlock(scope: !3888, file: !1, line: 2553, column: 7)
!3967 = !DILocation(line: 2553, column: 40, scope: !3966)
!3968 = !DILocation(line: 2553, column: 7, scope: !3888)
!3969 = !DILocation(line: 2556, column: 3, scope: !3888)
!3970 = !DILocation(line: 2557, column: 1, scope: !3888)
!3971 = distinct !DISubprogram(name: "infer_loop_bounds_from_undefined", scope: !1, file: !1, line: 2852, type: !3802, scopeLine: 2853, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !3972)
!3972 = !{!3973, !3974, !3975, !3976, !3977, !3978, !3979}
!3973 = !DILocalVariable(name: "loop", arg: 1, scope: !3971, file: !1, line: 2852, type: !1015)
!3974 = !DILocalVariable(name: "i", scope: !3971, file: !1, line: 2854, type: !5)
!3975 = !DILocalVariable(name: "bbs", scope: !3971, file: !1, line: 2855, type: !2580)
!3976 = !DILocalVariable(name: "bsi", scope: !3971, file: !1, line: 2856, type: !2582)
!3977 = !DILocalVariable(name: "bb", scope: !3971, file: !1, line: 2857, type: !1286)
!3978 = !DILocalVariable(name: "reliable", scope: !3971, file: !1, line: 2858, type: !468)
!3979 = !DILocalVariable(name: "stmt", scope: !3980, file: !1, line: 2873, type: !800)
!3980 = distinct !DILexicalBlock(scope: !3981, file: !1, line: 2872, column: 2)
!3981 = distinct !DILexicalBlock(scope: !3982, file: !1, line: 2871, column: 7)
!3982 = distinct !DILexicalBlock(scope: !3983, file: !1, line: 2871, column: 7)
!3983 = distinct !DILexicalBlock(scope: !3984, file: !1, line: 2863, column: 5)
!3984 = distinct !DILexicalBlock(scope: !3985, file: !1, line: 2862, column: 3)
!3985 = distinct !DILexicalBlock(scope: !3971, file: !1, line: 2862, column: 3)
!3986 = !DILocation(line: 0, scope: !3971)
!3987 = !DILocation(line: 2856, column: 3, scope: !3971)
!3988 = !DILocation(line: 2860, column: 9, scope: !3971)
!3989 = !DILocation(line: 0, scope: !3984)
!3990 = !DILocation(line: 0, scope: !3983)
!3991 = !DILocation(line: 0, scope: !3982)
!3992 = !DILocation(line: 2862, column: 8, scope: !3985)
!3993 = !DILocation(line: 0, scope: !3985)
!3994 = !DILocation(line: 2862, column: 25, scope: !3984)
!3995 = !DILocation(line: 2862, column: 17, scope: !3984)
!3996 = !DILocation(line: 2862, column: 3, scope: !3985)
!3997 = !DILocation(line: 2864, column: 12, scope: !3983)
!3998 = !DILocation(line: 2869, column: 56, scope: !3983)
!3999 = !DILocation(line: 2869, column: 18, scope: !3983)
!4000 = !DILocation(line: 2871, column: 18, scope: !3982)
!4001 = !DILocation(line: 0, scope: !4002)
!4002 = distinct !DILexicalBlock(scope: !3980, file: !1, line: 2877, column: 8)
!4003 = !DILocation(line: 2871, column: 12, scope: !3982)
!4004 = !DILocation(line: 2871, column: 38, scope: !3981)
!4005 = !DILocation(line: 2871, column: 37, scope: !3981)
!4006 = !DILocation(line: 2871, column: 7, scope: !3982)
!4007 = !DILocation(line: 2873, column: 18, scope: !3980)
!4008 = !DILocation(line: 0, scope: !3980)
!4009 = !DILocation(line: 2875, column: 4, scope: !3980)
!4010 = !DILocation(line: 2871, column: 55, scope: !3981)
!4011 = !DILocation(line: 2871, column: 7, scope: !3981)
!4012 = distinct !{!4012, !4006, !4013}
!4013 = !DILocation(line: 2879, column: 4, scope: !3982)
!4014 = !DILocation(line: 2862, column: 37, scope: !3984)
!4015 = !DILocation(line: 2878, column: 6, scope: !4002)
!4016 = !DILocation(line: 2862, column: 3, scope: !3984)
!4017 = distinct !{!4017, !3996, !4018}
!4018 = !DILocation(line: 2881, column: 5, scope: !3985)
!4019 = !DILocation(line: 2883, column: 9, scope: !3971)
!4020 = !DILocation(line: 2883, column: 3, scope: !3971)
!4021 = !DILocation(line: 2884, column: 1, scope: !3971)
!4022 = distinct !DISubprogram(name: "gcov_type_to_double_int", scope: !1, file: !1, line: 2889, type: !4023, scopeLine: 2890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4025)
!4023 = !DISubroutineType(types: !4024)
!4024 = !{!525, !1011}
!4025 = !{!4026, !4027}
!4026 = !DILocalVariable(name: "val", arg: 1, scope: !4022, file: !1, line: 2889, type: !1011)
!4027 = !DILocalVariable(name: "ret", scope: !4022, file: !1, line: 2891, type: !525)
!4028 = !DILocation(line: 0, scope: !4022)
!4029 = !DILocation(line: 2896, column: 7, scope: !4022)
!4030 = !DILocation(line: 2900, column: 3, scope: !4022)
!4031 = distinct !DISubprogram(name: "record_niter_bound", scope: !1, file: !1, line: 2470, type: !4032, scopeLine: 2472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4034)
!4032 = !DISubroutineType(types: !4033)
!4033 = !{null, !1015, !525, !468, !468}
!4034 = !{!4035, !4036, !4037, !4038}
!4035 = !DILocalVariable(name: "loop", arg: 1, scope: !4031, file: !1, line: 2470, type: !1015)
!4036 = !DILocalVariable(name: "i_bound", arg: 2, scope: !4031, file: !1, line: 2470, type: !525)
!4037 = !DILocalVariable(name: "realistic", arg: 3, scope: !4031, file: !1, line: 2470, type: !468)
!4038 = !DILocalVariable(name: "upper", arg: 4, scope: !4031, file: !1, line: 2471, type: !468)
!4039 = !DILocation(line: 0, scope: !4031)
!4040 = !DILocation(line: 2475, column: 7, scope: !4041)
!4041 = distinct !DILexicalBlock(scope: !4031, file: !1, line: 2475, column: 7)
!4042 = !DILocation(line: 2476, column: 7, scope: !4041)
!4043 = !DILocation(line: 2476, column: 18, scope: !4041)
!4044 = !DILocation(line: 2476, column: 12, scope: !4041)
!4045 = !DILocation(line: 2477, column: 4, scope: !4041)
!4046 = !DILocation(line: 2477, column: 7, scope: !4041)
!4047 = !DILocation(line: 2477, column: 66, scope: !4041)
!4048 = !DILocation(line: 2475, column: 7, scope: !4031)
!4049 = !DILocation(line: 2479, column: 29, scope: !4050)
!4050 = distinct !DILexicalBlock(scope: !4041, file: !1, line: 2478, column: 5)
!4051 = !DILocation(line: 2480, column: 13, scope: !4050)
!4052 = !DILocation(line: 2480, column: 41, scope: !4050)
!4053 = !DILocation(line: 2481, column: 5, scope: !4050)
!4054 = !DILocation(line: 2482, column: 7, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !4031, file: !1, line: 2482, column: 7)
!4056 = !DILocation(line: 2483, column: 7, scope: !4055)
!4057 = !DILocation(line: 2483, column: 18, scope: !4055)
!4058 = !DILocation(line: 2483, column: 12, scope: !4055)
!4059 = !DILocation(line: 2484, column: 4, scope: !4055)
!4060 = !DILocation(line: 2484, column: 7, scope: !4055)
!4061 = !DILocation(line: 2484, column: 63, scope: !4055)
!4062 = !DILocation(line: 2482, column: 7, scope: !4031)
!4063 = !DILocation(line: 2486, column: 26, scope: !4064)
!4064 = distinct !DILexicalBlock(scope: !4055, file: !1, line: 2485, column: 5)
!4065 = !DILocation(line: 2487, column: 13, scope: !4064)
!4066 = !DILocation(line: 2487, column: 38, scope: !4064)
!4067 = !DILocation(line: 2488, column: 5, scope: !4064)
!4068 = !DILocation(line: 2489, column: 1, scope: !4031)
!4069 = distinct !DISubprogram(name: "estimate_numbers_of_iterations", scope: !1, file: !1, line: 2963, type: !4070, scopeLine: 2964, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4072)
!4070 = !DISubroutineType(types: !4071)
!4071 = !{null}
!4072 = !{!4073, !4079}
!4073 = !DILocalVariable(name: "li", scope: !4069, file: !1, line: 2965, type: !4074)
!4074 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !328, line: 515, baseType: !4075)
!4075 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !328, line: 508, size: 128, elements: !4076)
!4076 = !{!4077, !4078}
!4077 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !4075, file: !328, line: 511, baseType: !1870, size: 64)
!4078 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !4075, file: !328, line: 514, baseType: !5, size: 32, offset: 64)
!4079 = !DILocalVariable(name: "loop", scope: !4069, file: !1, line: 2966, type: !1015)
!4080 = !DILocation(line: 2965, column: 3, scope: !4069)
!4081 = !DILocation(line: 2966, column: 3, scope: !4069)
!4082 = !DILocation(line: 2970, column: 3, scope: !4069)
!4083 = !DILocation(line: 0, scope: !4069)
!4084 = !DILocation(line: 2972, column: 3, scope: !4085)
!4085 = distinct !DILexicalBlock(scope: !4069, file: !1, line: 2972, column: 3)
!4086 = !DILocation(line: 2972, column: 3, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !4085, file: !1, line: 2972, column: 3)
!4088 = !DILocation(line: 2974, column: 7, scope: !4089)
!4089 = distinct !DILexicalBlock(scope: !4087, file: !1, line: 2973, column: 5)
!4090 = distinct !{!4090, !4084, !4091}
!4091 = !DILocation(line: 2975, column: 5, scope: !4085)
!4092 = !DILocation(line: 2977, column: 3, scope: !4069)
!4093 = !DILocation(line: 2978, column: 1, scope: !4069)
!4094 = distinct !DISubprogram(name: "fel_init", scope: !328, file: !328, line: 535, type: !4095, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4099)
!4095 = !DISubroutineType(types: !4096)
!4096 = !{null, !4097, !4098, !5}
!4097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4074, size: 64)
!4098 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1042, size: 64)
!4099 = !{!4100, !4101, !4102, !4103, !4104, !4105}
!4100 = !DILocalVariable(name: "li", arg: 1, scope: !4094, file: !328, line: 535, type: !4097)
!4101 = !DILocalVariable(name: "loop", arg: 2, scope: !4094, file: !328, line: 535, type: !4098)
!4102 = !DILocalVariable(name: "flags", arg: 3, scope: !4094, file: !328, line: 535, type: !5)
!4103 = !DILocalVariable(name: "aloop", scope: !4094, file: !328, line: 537, type: !1015)
!4104 = !DILocalVariable(name: "i", scope: !4094, file: !328, line: 538, type: !5)
!4105 = !DILocalVariable(name: "mn", scope: !4094, file: !328, line: 539, type: !469)
!4106 = !DILocation(line: 0, scope: !4094)
!4107 = !DILocation(line: 541, column: 7, scope: !4094)
!4108 = !DILocation(line: 541, column: 11, scope: !4094)
!4109 = !DILocation(line: 542, column: 8, scope: !4110)
!4110 = distinct !DILexicalBlock(scope: !4094, file: !328, line: 542, column: 7)
!4111 = !DILocation(line: 542, column: 7, scope: !4094)
!4112 = !DILocation(line: 544, column: 11, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !4110, file: !328, line: 543, column: 5)
!4114 = !DILocation(line: 544, column: 20, scope: !4113)
!4115 = !DILocation(line: 545, column: 13, scope: !4113)
!4116 = !DILocation(line: 546, column: 7, scope: !4113)
!4117 = !DILocation(line: 549, column: 18, scope: !4094)
!4118 = !DILocation(line: 549, column: 7, scope: !4094)
!4119 = !DILocation(line: 549, column: 16, scope: !4094)
!4120 = !DILocation(line: 0, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4122, file: !328, line: 560, column: 12)
!4122 = distinct !DILexicalBlock(scope: !4094, file: !328, line: 552, column: 7)
!4123 = !DILocation(line: 590, column: 7, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !4121, file: !328, line: 587, column: 5)
!4125 = !DILocation(line: 592, column: 8, scope: !4126)
!4126 = distinct !DILexicalBlock(scope: !4127, file: !328, line: 592, column: 8)
!4127 = distinct !DILexicalBlock(scope: !4124, file: !328, line: 591, column: 2)
!4128 = !DILocation(line: 592, column: 15, scope: !4126)
!4129 = !DILocation(line: 592, column: 19, scope: !4126)
!4130 = !DILocation(line: 592, column: 8, scope: !4127)
!4131 = !DILocation(line: 593, column: 6, scope: !4126)
!4132 = !DILocation(line: 595, column: 15, scope: !4133)
!4133 = distinct !DILexicalBlock(scope: !4127, file: !328, line: 595, column: 8)
!4134 = !DILocation(line: 595, column: 21, scope: !4133)
!4135 = !DILocation(line: 595, column: 8, scope: !4127)
!4136 = !DILocation(line: 599, column: 8, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4133, file: !328, line: 598, column: 6)
!4138 = !DILocation(line: 596, column: 21, scope: !4133)
!4139 = !DILocation(line: 596, column: 6, scope: !4133)
!4140 = !DILocation(line: 599, column: 15, scope: !4137)
!4141 = !DILocation(line: 599, column: 21, scope: !4137)
!4142 = !DILocation(line: 599, column: 29, scope: !4137)
!4143 = !DILocation(line: 599, column: 39, scope: !4137)
!4144 = !DILocation(line: 599, column: 44, scope: !4137)
!4145 = !DILocation(line: 0, scope: !4137)
!4146 = !DILocation(line: 600, column: 11, scope: !4137)
!4147 = distinct !{!4147, !4136, !4148}
!4148 = !DILocation(line: 600, column: 28, scope: !4137)
!4149 = !DILocation(line: 601, column: 18, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4137, file: !328, line: 601, column: 12)
!4151 = !DILocation(line: 601, column: 12, scope: !4137)
!4152 = !DILocation(line: 603, column: 23, scope: !4137)
!4153 = distinct !{!4153, !4123, !4154}
!4154 = !DILocation(line: 605, column: 2, scope: !4124)
!4155 = !DILocation(line: 608, column: 3, scope: !4094)
!4156 = !DILocation(line: 609, column: 1, scope: !4094)
!4157 = distinct !DISubprogram(name: "fel_next", scope: !328, file: !328, line: 518, type: !4158, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4160)
!4158 = !DISubroutineType(types: !4159)
!4159 = !{null, !4097, !4098}
!4160 = !{!4161, !4162, !4163}
!4161 = !DILocalVariable(name: "li", arg: 1, scope: !4157, file: !328, line: 518, type: !4097)
!4162 = !DILocalVariable(name: "loop", arg: 2, scope: !4157, file: !328, line: 518, type: !4098)
!4163 = !DILocalVariable(name: "anum", scope: !4157, file: !328, line: 520, type: !469)
!4164 = !DILocation(line: 0, scope: !4157)
!4165 = !DILocation(line: 520, column: 3, scope: !4157)
!4166 = !DILocation(line: 522, column: 3, scope: !4157)
!4167 = !DILocation(line: 522, column: 10, scope: !4157)
!4168 = !DILocation(line: 524, column: 14, scope: !4169)
!4169 = distinct !DILexicalBlock(scope: !4157, file: !328, line: 523, column: 5)
!4170 = !DILocation(line: 525, column: 25, scope: !4169)
!4171 = !DILocation(line: 525, column: 15, scope: !4169)
!4172 = !DILocation(line: 525, column: 13, scope: !4169)
!4173 = !DILocation(line: 526, column: 11, scope: !4174)
!4174 = distinct !DILexicalBlock(scope: !4169, file: !328, line: 526, column: 11)
!4175 = !DILocation(line: 526, column: 11, scope: !4169)
!4176 = distinct !{!4176, !4166, !4177}
!4177 = !DILocation(line: 528, column: 5, scope: !4157)
!4178 = !DILocation(line: 530, column: 3, scope: !4157)
!4179 = !DILocation(line: 531, column: 9, scope: !4157)
!4180 = !DILocation(line: 532, column: 1, scope: !4157)
!4181 = distinct !DISubprogram(name: "stmt_dominates_stmt_p", scope: !1, file: !1, line: 2983, type: !4182, scopeLine: 2984, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4184)
!4182 = !DISubroutineType(types: !4183)
!4183 = !{!468, !800, !800}
!4184 = !{!4185, !4186, !4187, !4188, !4189}
!4185 = !DILocalVariable(name: "s1", arg: 1, scope: !4181, file: !1, line: 2983, type: !800)
!4186 = !DILocalVariable(name: "s2", arg: 2, scope: !4181, file: !1, line: 2983, type: !800)
!4187 = !DILocalVariable(name: "bb1", scope: !4181, file: !1, line: 2985, type: !1286)
!4188 = !DILocalVariable(name: "bb2", scope: !4181, file: !1, line: 2985, type: !1286)
!4189 = !DILocalVariable(name: "bsi", scope: !4190, file: !1, line: 2993, type: !2582)
!4190 = distinct !DILexicalBlock(scope: !4191, file: !1, line: 2992, column: 5)
!4191 = distinct !DILexicalBlock(scope: !4181, file: !1, line: 2991, column: 7)
!4192 = !DILocation(line: 0, scope: !4181)
!4193 = !DILocation(line: 2985, column: 21, scope: !4181)
!4194 = !DILocation(line: 2985, column: 43, scope: !4181)
!4195 = !DILocation(line: 2987, column: 8, scope: !4196)
!4196 = distinct !DILexicalBlock(scope: !4181, file: !1, line: 2987, column: 7)
!4197 = !DILocation(line: 2988, column: 13, scope: !4196)
!4198 = !DILocation(line: 2988, column: 7, scope: !4196)
!4199 = !DILocation(line: 2991, column: 11, scope: !4191)
!4200 = !DILocation(line: 2991, column: 7, scope: !4181)
!4201 = !DILocation(line: 2993, column: 7, scope: !4190)
!4202 = !DILocation(line: 2995, column: 11, scope: !4203)
!4203 = distinct !DILexicalBlock(scope: !4190, file: !1, line: 2995, column: 11)
!4204 = !DILocation(line: 2995, column: 28, scope: !4203)
!4205 = !DILocation(line: 2995, column: 11, scope: !4190)
!4206 = !DILocation(line: 2998, column: 11, scope: !4207)
!4207 = distinct !DILexicalBlock(scope: !4190, file: !1, line: 2998, column: 11)
!4208 = !DILocation(line: 2998, column: 28, scope: !4207)
!4209 = !DILocation(line: 2998, column: 11, scope: !4190)
!4210 = !DILocation(line: 3001, column: 18, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4190, file: !1, line: 3001, column: 7)
!4212 = !DILocation(line: 3001, column: 12, scope: !4211)
!4213 = !DILocation(line: 0, scope: !4190)
!4214 = !DILocation(line: 3001, column: 38, scope: !4215)
!4215 = distinct !DILexicalBlock(scope: !4211, file: !1, line: 3001, column: 7)
!4216 = !DILocation(line: 3001, column: 53, scope: !4215)
!4217 = !DILocation(line: 3001, column: 7, scope: !4211)
!4218 = !DILocation(line: 3002, column: 6, scope: !4219)
!4219 = distinct !DILexicalBlock(scope: !4215, file: !1, line: 3002, column: 6)
!4220 = !DILocation(line: 3002, column: 21, scope: !4219)
!4221 = !DILocation(line: 3002, column: 6, scope: !4215)
!4222 = !DILocation(line: 3001, column: 60, scope: !4215)
!4223 = !DILocation(line: 3001, column: 7, scope: !4215)
!4224 = distinct !{!4224, !4217, !4225}
!4225 = !DILocation(line: 3003, column: 11, scope: !4211)
!4226 = !DILocation(line: 3006, column: 5, scope: !4191)
!4227 = !DILocation(line: 3008, column: 10, scope: !4181)
!4228 = !DILocation(line: 3008, column: 3, scope: !4181)
!4229 = !DILocation(line: 3009, column: 1, scope: !4181)
!4230 = distinct !DISubprogram(name: "nowrap_type_p", scope: !1, file: !1, line: 3078, type: !3750, scopeLine: 3079, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4231)
!4231 = !{!4232}
!4232 = !DILocalVariable(name: "type", arg: 1, scope: !4230, file: !1, line: 3078, type: !476)
!4233 = !DILocation(line: 0, scope: !4230)
!4234 = !DILocation(line: 3080, column: 7, scope: !4235)
!4235 = distinct !DILexicalBlock(scope: !4230, file: !1, line: 3080, column: 7)
!4236 = !DILocation(line: 3081, column: 7, scope: !4235)
!4237 = !DILocation(line: 3081, column: 10, scope: !4235)
!4238 = !DILocation(line: 3084, column: 7, scope: !4239)
!4239 = distinct !DILexicalBlock(scope: !4230, file: !1, line: 3084, column: 7)
!4240 = !DILocation(line: 3084, column: 7, scope: !4230)
!4241 = !DILocation(line: 3088, column: 1, scope: !4230)
!4242 = distinct !DISubprogram(name: "scev_probably_wraps_p", scope: !1, file: !1, line: 3101, type: !4243, scopeLine: 3104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4245)
!4243 = !DISubroutineType(types: !4244)
!4244 = !{!468, !476, !476, !800, !1015, !468}
!4245 = !{!4246, !4247, !4248, !4249, !4250, !4251, !4252, !4253, !4254, !4255, !4256, !4257, !4260}
!4246 = !DILocalVariable(name: "base", arg: 1, scope: !4242, file: !1, line: 3101, type: !476)
!4247 = !DILocalVariable(name: "step", arg: 2, scope: !4242, file: !1, line: 3101, type: !476)
!4248 = !DILocalVariable(name: "at_stmt", arg: 3, scope: !4242, file: !1, line: 3102, type: !800)
!4249 = !DILocalVariable(name: "loop", arg: 4, scope: !4242, file: !1, line: 3102, type: !1015)
!4250 = !DILocalVariable(name: "use_overflow_semantics", arg: 5, scope: !4242, file: !1, line: 3103, type: !468)
!4251 = !DILocalVariable(name: "bound", scope: !4242, file: !1, line: 3105, type: !1053)
!4252 = !DILocalVariable(name: "delta", scope: !4242, file: !1, line: 3106, type: !476)
!4253 = !DILocalVariable(name: "step_abs", scope: !4242, file: !1, line: 3106, type: !476)
!4254 = !DILocalVariable(name: "unsigned_type", scope: !4242, file: !1, line: 3107, type: !476)
!4255 = !DILocalVariable(name: "valid_niter", scope: !4242, file: !1, line: 3107, type: !476)
!4256 = !DILocalVariable(name: "type", scope: !4242, file: !1, line: 3108, type: !476)
!4257 = !DILocalVariable(name: "extreme", scope: !4258, file: !1, line: 3154, type: !476)
!4258 = distinct !DILexicalBlock(scope: !4259, file: !1, line: 3153, column: 5)
!4259 = distinct !DILexicalBlock(scope: !4242, file: !1, line: 3152, column: 7)
!4260 = !DILocalVariable(name: "extreme", scope: !4261, file: !1, line: 3162, type: !476)
!4261 = distinct !DILexicalBlock(scope: !4259, file: !1, line: 3161, column: 5)
!4262 = !DILocation(line: 0, scope: !4242)
!4263 = !DILocation(line: 3108, column: 15, scope: !4242)
!4264 = !DILocation(line: 3126, column: 7, scope: !4265)
!4265 = distinct !DILexicalBlock(scope: !4242, file: !1, line: 3126, column: 7)
!4266 = !DILocation(line: 3127, column: 7, scope: !4265)
!4267 = !DILocation(line: 3127, column: 10, scope: !4265)
!4268 = !DILocation(line: 3126, column: 7, scope: !4242)
!4269 = !DILocation(line: 3130, column: 7, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4242, file: !1, line: 3130, column: 7)
!4271 = !DILocation(line: 3130, column: 7, scope: !4242)
!4272 = !DILocation(line: 3135, column: 7, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4242, file: !1, line: 3135, column: 7)
!4274 = !DILocation(line: 3135, column: 30, scope: !4273)
!4275 = !DILocation(line: 3135, column: 48, scope: !4273)
!4276 = !DILocation(line: 3135, column: 33, scope: !4273)
!4277 = !DILocation(line: 3135, column: 7, scope: !4242)
!4278 = !DILocation(line: 3140, column: 7, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4242, file: !1, line: 3140, column: 7)
!4280 = !DILocation(line: 3140, column: 24, scope: !4279)
!4281 = !DILocation(line: 3140, column: 7, scope: !4242)
!4282 = !DILocation(line: 3144, column: 3, scope: !4242)
!4283 = !DILocation(line: 3149, column: 19, scope: !4242)
!4284 = !DILocation(line: 3150, column: 10, scope: !4242)
!4285 = !DILocation(line: 3152, column: 7, scope: !4259)
!4286 = !DILocation(line: 3152, column: 7, scope: !4242)
!4287 = !DILocation(line: 3154, column: 22, scope: !4258)
!4288 = !DILocation(line: 0, scope: !4258)
!4289 = !DILocation(line: 3156, column: 15, scope: !4258)
!4290 = !DILocation(line: 3157, column: 18, scope: !4258)
!4291 = !DILocation(line: 3159, column: 5, scope: !4258)
!4292 = !DILocation(line: 3162, column: 22, scope: !4261)
!4293 = !DILocation(line: 0, scope: !4261)
!4294 = !DILocation(line: 3164, column: 15, scope: !4261)
!4295 = !DILocation(line: 3165, column: 18, scope: !4261)
!4296 = !DILocation(line: 0, scope: !4259)
!4297 = !DILocation(line: 3168, column: 17, scope: !4242)
!4298 = !DILocation(line: 3170, column: 3, scope: !4242)
!4299 = !DILocation(line: 3171, column: 22, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4242, file: !1, line: 3171, column: 3)
!4301 = !DILocation(line: 3171, column: 8, scope: !4300)
!4302 = !DILocation(line: 0, scope: !4300)
!4303 = !DILocation(line: 3171, column: 3, scope: !4300)
!4304 = !DILocation(line: 3173, column: 11, scope: !4305)
!4305 = distinct !DILexicalBlock(scope: !4306, file: !1, line: 3173, column: 11)
!4306 = distinct !DILexicalBlock(scope: !4307, file: !1, line: 3172, column: 5)
!4307 = distinct !DILexicalBlock(scope: !4300, file: !1, line: 3171, column: 3)
!4308 = !DILocation(line: 3173, column: 11, scope: !4306)
!4309 = !DILocation(line: 3175, column: 4, scope: !4310)
!4310 = distinct !DILexicalBlock(scope: !4305, file: !1, line: 3174, column: 2)
!4311 = !DILocation(line: 3176, column: 4, scope: !4310)
!4312 = !DILocation(line: 3171, column: 52, scope: !4307)
!4313 = !DILocation(line: 3171, column: 3, scope: !4307)
!4314 = distinct !{!4314, !4303, !4315}
!4315 = !DILocation(line: 3178, column: 5, scope: !4300)
!4316 = !DILocation(line: 3180, column: 3, scope: !4242)
!4317 = !DILocation(line: 3184, column: 3, scope: !4242)
!4318 = !DILocation(line: 3185, column: 1, scope: !4242)
!4319 = distinct !DISubprogram(name: "n_of_executions_at_most", scope: !1, file: !1, line: 3018, type: !4320, scopeLine: 3021, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4322)
!4320 = !DISubroutineType(types: !4321)
!4321 = !{!468, !800, !1053, !476}
!4322 = !{!4323, !4324, !4325, !4326, !4327, !4328, !4329}
!4323 = !DILocalVariable(name: "stmt", arg: 1, scope: !4319, file: !1, line: 3018, type: !800)
!4324 = !DILocalVariable(name: "niter_bound", arg: 2, scope: !4319, file: !1, line: 3019, type: !1053)
!4325 = !DILocalVariable(name: "niter", arg: 3, scope: !4319, file: !1, line: 3020, type: !476)
!4326 = !DILocalVariable(name: "bound", scope: !4319, file: !1, line: 3022, type: !525)
!4327 = !DILocalVariable(name: "nit_type", scope: !4319, file: !1, line: 3023, type: !476)
!4328 = !DILocalVariable(name: "e", scope: !4319, file: !1, line: 3023, type: !476)
!4329 = !DILocalVariable(name: "cmp", scope: !4319, file: !1, line: 3024, type: !132)
!4330 = !DILocation(line: 0, scope: !4319)
!4331 = !DILocation(line: 3022, column: 3, scope: !4319)
!4332 = !DILocation(line: 3022, column: 35, scope: !4319)
!4333 = !DILocation(line: 3023, column: 19, scope: !4319)
!4334 = !DILocation(line: 3026, column: 3, scope: !4319)
!4335 = !DILocation(line: 3030, column: 8, scope: !4336)
!4336 = distinct !DILexicalBlock(scope: !4319, file: !1, line: 3030, column: 7)
!4337 = !DILocation(line: 3030, column: 7, scope: !4319)
!4338 = !DILocation(line: 3047, column: 20, scope: !4339)
!4339 = distinct !DILexicalBlock(scope: !4319, file: !1, line: 3047, column: 7)
!4340 = !DILocation(line: 3047, column: 7, scope: !4339)
!4341 = !DILocation(line: 0, scope: !4339)
!4342 = !DILocation(line: 3047, column: 7, scope: !4319)
!4343 = !DILocation(line: 3050, column: 4, scope: !4344)
!4344 = distinct !DILexicalBlock(scope: !4345, file: !1, line: 3049, column: 11)
!4345 = distinct !DILexicalBlock(scope: !4339, file: !1, line: 3048, column: 5)
!4346 = !DILocation(line: 3050, column: 28, scope: !4344)
!4347 = !DILocation(line: 3050, column: 12, scope: !4344)
!4348 = !DILocation(line: 3051, column: 4, scope: !4344)
!4349 = !DILocation(line: 3051, column: 7, scope: !4344)
!4350 = !DILocation(line: 3049, column: 11, scope: !4345)
!4351 = !DILocation(line: 3059, column: 4, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4353, file: !1, line: 3058, column: 11)
!4353 = distinct !DILexicalBlock(scope: !4339, file: !1, line: 3057, column: 5)
!4354 = !DILocation(line: 3059, column: 8, scope: !4352)
!4355 = !DILocation(line: 3059, column: 52, scope: !4352)
!4356 = !DILocation(line: 3059, column: 28, scope: !4352)
!4357 = !DILocation(line: 3059, column: 25, scope: !4352)
!4358 = !DILocation(line: 3060, column: 8, scope: !4352)
!4359 = !DILocation(line: 3060, column: 48, scope: !4352)
!4360 = !DILocation(line: 3060, column: 12, scope: !4352)
!4361 = !DILocation(line: 3058, column: 11, scope: !4353)
!4362 = !DILocation(line: 3062, column: 12, scope: !4363)
!4363 = distinct !DILexicalBlock(scope: !4352, file: !1, line: 3061, column: 2)
!4364 = !DILocation(line: 3062, column: 35, scope: !4363)
!4365 = !DILocation(line: 3063, column: 8, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !4363, file: !1, line: 3063, column: 8)
!4367 = !DILocation(line: 3064, column: 8, scope: !4366)
!4368 = !DILocation(line: 3064, column: 12, scope: !4366)
!4369 = !DILocation(line: 3063, column: 8, scope: !4363)
!4370 = !DILocation(line: 3070, column: 7, scope: !4319)
!4371 = !DILocation(line: 3072, column: 10, scope: !4319)
!4372 = !DILocation(line: 3072, column: 12, scope: !4319)
!4373 = !DILocation(line: 3072, column: 15, scope: !4319)
!4374 = !DILocation(line: 3072, column: 3, scope: !4319)
!4375 = !DILocation(line: 3073, column: 1, scope: !4319)
!4376 = distinct !DISubprogram(name: "free_numbers_of_iterations_estimates_loop", scope: !1, file: !1, line: 3190, type: !3802, scopeLine: 3191, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4377)
!4377 = !{!4378, !4379, !4380}
!4378 = !DILocalVariable(name: "loop", arg: 1, scope: !4376, file: !1, line: 3190, type: !1015)
!4379 = !DILocalVariable(name: "bound", scope: !4376, file: !1, line: 3192, type: !1053)
!4380 = !DILocalVariable(name: "next", scope: !4376, file: !1, line: 3192, type: !1053)
!4381 = !DILocation(line: 0, scope: !4376)
!4382 = !DILocation(line: 3194, column: 9, scope: !4376)
!4383 = !DILocation(line: 3194, column: 23, scope: !4376)
!4384 = !DILocation(line: 3195, column: 9, scope: !4376)
!4385 = !DILocation(line: 3195, column: 24, scope: !4376)
!4386 = !DILocation(line: 3196, column: 22, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4376, file: !1, line: 3196, column: 3)
!4388 = !DILocation(line: 3196, column: 8, scope: !4387)
!4389 = !DILocation(line: 0, scope: !4387)
!4390 = !DILocation(line: 3196, column: 3, scope: !4387)
!4391 = !DILocation(line: 3198, column: 21, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4393, file: !1, line: 3197, column: 5)
!4393 = distinct !DILexicalBlock(scope: !4387, file: !1, line: 3196, column: 3)
!4394 = !DILocation(line: 3199, column: 7, scope: !4392)
!4395 = !DILocation(line: 3196, column: 3, scope: !4393)
!4396 = distinct !{!4396, !4390, !4397}
!4397 = !DILocation(line: 3200, column: 5, scope: !4387)
!4398 = !DILocation(line: 3202, column: 16, scope: !4376)
!4399 = !DILocation(line: 3203, column: 1, scope: !4376)
!4400 = distinct !DISubprogram(name: "free_numbers_of_iterations_estimates", scope: !1, file: !1, line: 3208, type: !4070, scopeLine: 3209, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4401)
!4401 = !{!4402, !4403}
!4402 = !DILocalVariable(name: "li", scope: !4400, file: !1, line: 3210, type: !4074)
!4403 = !DILocalVariable(name: "loop", scope: !4400, file: !1, line: 3211, type: !1015)
!4404 = !DILocation(line: 3210, column: 3, scope: !4400)
!4405 = !DILocation(line: 3211, column: 3, scope: !4400)
!4406 = !DILocation(line: 0, scope: !4400)
!4407 = !DILocation(line: 3213, column: 3, scope: !4408)
!4408 = distinct !DILexicalBlock(scope: !4400, file: !1, line: 3213, column: 3)
!4409 = !DILocation(line: 3213, column: 3, scope: !4410)
!4410 = distinct !DILexicalBlock(scope: !4408, file: !1, line: 3213, column: 3)
!4411 = !DILocation(line: 3215, column: 7, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4410, file: !1, line: 3214, column: 5)
!4413 = distinct !{!4413, !4407, !4414}
!4414 = !DILocation(line: 3216, column: 5, scope: !4408)
!4415 = !DILocation(line: 3217, column: 1, scope: !4400)
!4416 = distinct !DISubprogram(name: "substitute_in_loop_info", scope: !1, file: !1, line: 3223, type: !4417, scopeLine: 3224, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4419)
!4417 = !DISubroutineType(types: !4418)
!4418 = !{null, !1015, !476, !476}
!4419 = !{!4420, !4421, !4422}
!4420 = !DILocalVariable(name: "loop", arg: 1, scope: !4416, file: !1, line: 3223, type: !1015)
!4421 = !DILocalVariable(name: "name", arg: 2, scope: !4416, file: !1, line: 3223, type: !476)
!4422 = !DILocalVariable(name: "val", arg: 3, scope: !4416, file: !1, line: 3223, type: !476)
!4423 = !DILocation(line: 0, scope: !4416)
!4424 = !DILocation(line: 3225, column: 54, scope: !4416)
!4425 = !DILocation(line: 3225, column: 25, scope: !4416)
!4426 = !DILocation(line: 3225, column: 23, scope: !4416)
!4427 = !DILocation(line: 3226, column: 1, scope: !4416)
!4428 = distinct !DISubprogram(name: "simplify_replace_tree", scope: !1, file: !1, line: 1370, type: !4429, scopeLine: 1371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4431)
!4429 = !DISubroutineType(types: !4430)
!4430 = !{!476, !476, !476, !476}
!4431 = !{!4432, !4433, !4434, !4435, !4436, !4437, !4438, !4439}
!4432 = !DILocalVariable(name: "expr", arg: 1, scope: !4428, file: !1, line: 1370, type: !476)
!4433 = !DILocalVariable(name: "old", arg: 2, scope: !4428, file: !1, line: 1370, type: !476)
!4434 = !DILocalVariable(name: "new_tree", arg: 3, scope: !4428, file: !1, line: 1370, type: !476)
!4435 = !DILocalVariable(name: "i", scope: !4428, file: !1, line: 1372, type: !5)
!4436 = !DILocalVariable(name: "n", scope: !4428, file: !1, line: 1372, type: !5)
!4437 = !DILocalVariable(name: "ret", scope: !4428, file: !1, line: 1373, type: !476)
!4438 = !DILocalVariable(name: "e", scope: !4428, file: !1, line: 1373, type: !476)
!4439 = !DILocalVariable(name: "se", scope: !4428, file: !1, line: 1373, type: !476)
!4440 = !DILocation(line: 0, scope: !4428)
!4441 = !DILocation(line: 1375, column: 8, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !4428, file: !1, line: 1375, column: 7)
!4443 = !DILocation(line: 1375, column: 7, scope: !4428)
!4444 = !DILocation(line: 1378, column: 12, scope: !4445)
!4445 = distinct !DILexicalBlock(scope: !4428, file: !1, line: 1378, column: 7)
!4446 = !DILocation(line: 1379, column: 7, scope: !4445)
!4447 = !DILocation(line: 1379, column: 10, scope: !4445)
!4448 = !DILocation(line: 1378, column: 7, scope: !4428)
!4449 = !DILocation(line: 1380, column: 12, scope: !4445)
!4450 = !DILocation(line: 1380, column: 5, scope: !4445)
!4451 = !DILocation(line: 1382, column: 8, scope: !4452)
!4452 = distinct !DILexicalBlock(scope: !4428, file: !1, line: 1382, column: 7)
!4453 = !DILocation(line: 1382, column: 7, scope: !4428)
!4454 = !DILocation(line: 1385, column: 7, scope: !4428)
!4455 = !DILocation(line: 0, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !4457, file: !1, line: 1387, column: 5)
!4457 = distinct !DILexicalBlock(scope: !4458, file: !1, line: 1386, column: 3)
!4458 = distinct !DILexicalBlock(scope: !4428, file: !1, line: 1386, column: 3)
!4459 = !DILocation(line: 1386, column: 17, scope: !4457)
!4460 = !DILocation(line: 1386, column: 8, scope: !4458)
!4461 = !DILocation(line: 0, scope: !4458)
!4462 = !DILocation(line: 1373, column: 8, scope: !4428)
!4463 = !DILocation(line: 1386, column: 3, scope: !4458)
!4464 = !DILocation(line: 1388, column: 11, scope: !4456)
!4465 = !DILocation(line: 1389, column: 12, scope: !4456)
!4466 = !DILocation(line: 1390, column: 13, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4456, file: !1, line: 1390, column: 11)
!4468 = !DILocation(line: 1390, column: 11, scope: !4456)
!4469 = !DILocation(line: 1393, column: 12, scope: !4470)
!4470 = distinct !DILexicalBlock(scope: !4456, file: !1, line: 1393, column: 11)
!4471 = !DILocation(line: 1393, column: 11, scope: !4456)
!4472 = !DILocation(line: 1394, column: 8, scope: !4470)
!4473 = !DILocation(line: 1394, column: 2, scope: !4470)
!4474 = !DILocation(line: 1396, column: 7, scope: !4456)
!4475 = !DILocation(line: 1396, column: 29, scope: !4456)
!4476 = !DILocation(line: 1397, column: 5, scope: !4456)
!4477 = !DILocation(line: 1386, column: 23, scope: !4457)
!4478 = !DILocation(line: 1386, column: 3, scope: !4457)
!4479 = distinct !{!4479, !4463, !4480}
!4480 = !DILocation(line: 1397, column: 5, scope: !4458)
!4481 = !DILocation(line: 1399, column: 11, scope: !4428)
!4482 = !DILocation(line: 1399, column: 17, scope: !4428)
!4483 = !DILocation(line: 1400, column: 1, scope: !4428)
!4484 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !389, file: !389, line: 3100, type: !4485, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4488)
!4485 = !DISubroutineType(types: !4486)
!4486 = !{!4487, !800, !5}
!4487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !903, size: 64)
!4488 = !{!4489, !4490}
!4489 = !DILocalVariable(name: "gs", arg: 1, scope: !4484, file: !389, line: 3100, type: !800)
!4490 = !DILocalVariable(name: "index", arg: 2, scope: !4484, file: !389, line: 3100, type: !5)
!4491 = !DILocation(line: 0, scope: !4484)
!4492 = !DILocation(line: 3103, column: 3, scope: !4484)
!4493 = !DILocation(line: 3104, column: 12, scope: !4484)
!4494 = !DILocation(line: 3104, column: 3, scope: !4484)
!4495 = distinct !DISubprogram(name: "single_pred_edge", scope: !341, file: !341, line: 653, type: !4496, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4498)
!4496 = !DISubroutineType(types: !4497)
!4497 = !{!780, !2515}
!4498 = !{!4499}
!4499 = !DILocalVariable(name: "bb", arg: 1, scope: !4495, file: !341, line: 653, type: !2515)
!4500 = !DILocation(line: 0, scope: !4495)
!4501 = !DILocation(line: 655, column: 3, scope: !4495)
!4502 = !DILocation(line: 656, column: 10, scope: !4495)
!4503 = !DILocation(line: 656, column: 3, scope: !4495)
!4504 = distinct !DISubprogram(name: "single_pred_p", scope: !341, file: !341, line: 634, type: !4505, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4507)
!4505 = !DISubroutineType(types: !4506)
!4506 = !{!468, !2515}
!4507 = !{!4508}
!4508 = !DILocalVariable(name: "bb", arg: 1, scope: !4504, file: !341, line: 634, type: !2515)
!4509 = !DILocation(line: 0, scope: !4504)
!4510 = !DILocation(line: 636, column: 10, scope: !4504)
!4511 = !DILocation(line: 636, column: 33, scope: !4504)
!4512 = !DILocation(line: 636, column: 3, scope: !4504)
!4513 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !341, file: !341, line: 150, type: !4514, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4516)
!4514 = !DISubroutineType(types: !4515)
!4515 = !{!780, !3337, !5}
!4516 = !{!4517, !4518}
!4517 = !DILocalVariable(name: "vec_", arg: 1, scope: !4513, file: !341, line: 150, type: !3337)
!4518 = !DILocalVariable(name: "ix_", arg: 2, scope: !4513, file: !341, line: 150, type: !5)
!4519 = !DILocation(line: 0, scope: !4513)
!4520 = !DILocation(line: 150, column: 1, scope: !4513)
!4521 = distinct !DISubprogram(name: "gimple_op", scope: !389, file: !389, line: 1631, type: !4522, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4524)
!4522 = !DISubroutineType(types: !4523)
!4523 = !{!476, !2467, !5}
!4524 = !{!4525, !4526}
!4525 = !DILocalVariable(name: "gs", arg: 1, scope: !4521, file: !389, line: 1631, type: !2467)
!4526 = !DILocalVariable(name: "i", arg: 2, scope: !4521, file: !389, line: 1631, type: !5)
!4527 = !DILocation(line: 0, scope: !4521)
!4528 = !DILocation(line: 1633, column: 7, scope: !4529)
!4529 = distinct !DILexicalBlock(scope: !4521, file: !389, line: 1633, column: 7)
!4530 = !DILocation(line: 1633, column: 7, scope: !4521)
!4531 = !DILocation(line: 1638, column: 14, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4529, file: !389, line: 1634, column: 5)
!4533 = !DILocation(line: 1638, column: 7, scope: !4532)
!4534 = !DILocation(line: 0, scope: !4529)
!4535 = !DILocation(line: 1642, column: 1, scope: !4521)
!4536 = distinct !DISubprogram(name: "gimple_has_ops", scope: !389, file: !389, line: 1274, type: !4537, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4539)
!4537 = !DISubroutineType(types: !4538)
!4538 = !{!468, !2467}
!4539 = !{!4540}
!4540 = !DILocalVariable(name: "g", arg: 1, scope: !4536, file: !389, line: 1274, type: !2467)
!4541 = !DILocation(line: 0, scope: !4536)
!4542 = !DILocation(line: 1276, column: 10, scope: !4536)
!4543 = !DILocation(line: 1276, column: 26, scope: !4536)
!4544 = !DILocation(line: 1276, column: 41, scope: !4536)
!4545 = !DILocation(line: 1276, column: 44, scope: !4536)
!4546 = !DILocation(line: 1276, column: 60, scope: !4536)
!4547 = !DILocation(line: 1276, column: 3, scope: !4536)
!4548 = distinct !DISubprogram(name: "gimple_ops", scope: !389, file: !389, line: 1614, type: !4549, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4551)
!4549 = !DISubroutineType(types: !4550)
!4550 = !{!834, !800}
!4551 = !{!4552, !4553}
!4552 = !DILocalVariable(name: "gs", arg: 1, scope: !4548, file: !389, line: 1614, type: !800)
!4553 = !DILocalVariable(name: "off", scope: !4548, file: !389, line: 1616, type: !945)
!4554 = !DILocation(line: 0, scope: !4548)
!4555 = !DILocation(line: 1621, column: 28, scope: !4548)
!4556 = !DILocation(line: 1621, column: 9, scope: !4548)
!4557 = !DILocation(line: 1622, column: 3, scope: !4548)
!4558 = !DILocation(line: 1624, column: 20, scope: !4548)
!4559 = !DILocation(line: 1624, column: 32, scope: !4548)
!4560 = !DILocation(line: 1624, column: 10, scope: !4548)
!4561 = !DILocation(line: 1624, column: 3, scope: !4548)
!4562 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !389, file: !389, line: 1073, type: !4563, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4565)
!4563 = !DISubroutineType(types: !4564)
!4564 = !{!427, !800}
!4565 = !{!4566}
!4566 = !DILocalVariable(name: "gs", arg: 1, scope: !4562, file: !389, line: 1073, type: !800)
!4567 = !DILocation(line: 0, scope: !4562)
!4568 = !DILocation(line: 1075, column: 24, scope: !4562)
!4569 = !DILocation(line: 1075, column: 10, scope: !4562)
!4570 = !DILocation(line: 1075, column: 3, scope: !4562)
!4571 = distinct !DISubprogram(name: "gss_for_code", scope: !389, file: !389, line: 1061, type: !4572, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4574)
!4572 = !DISubroutineType(types: !4573)
!4573 = !{!427, !388}
!4574 = !{!4575}
!4575 = !DILocalVariable(name: "code", arg: 1, scope: !4571, file: !389, line: 1061, type: !388)
!4576 = !DILocation(line: 0, scope: !4571)
!4577 = !DILocation(line: 1066, column: 10, scope: !4571)
!4578 = !DILocation(line: 1066, column: 3, scope: !4571)
!4579 = distinct !DISubprogram(name: "gimple_expr_code", scope: !389, file: !389, line: 1438, type: !2533, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4580)
!4580 = !{!4581, !4582}
!4581 = !DILocalVariable(name: "stmt", arg: 1, scope: !4579, file: !389, line: 1438, type: !2467)
!4582 = !DILocalVariable(name: "code", scope: !4579, file: !389, line: 1440, type: !388)
!4583 = !DILocation(line: 0, scope: !4579)
!4584 = !DILocation(line: 1440, column: 27, scope: !4579)
!4585 = !DILocation(line: 1441, column: 29, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4579, file: !389, line: 1441, column: 7)
!4587 = !DILocation(line: 1442, column: 42, scope: !4586)
!4588 = !DILocation(line: 1442, column: 5, scope: !4586)
!4589 = !DILocation(line: 1446, column: 5, scope: !4590)
!4590 = distinct !DILexicalBlock(scope: !4586, file: !389, line: 1443, column: 12)
!4591 = !DILocation(line: 1448, column: 5, scope: !4579)
!4592 = !DILocation(line: 1450, column: 1, scope: !4579)
!4593 = distinct !DISubprogram(name: "gimple_num_ops", scope: !389, file: !389, line: 1596, type: !2474, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4594)
!4594 = !{!4595}
!4595 = !DILocalVariable(name: "gs", arg: 1, scope: !4593, file: !389, line: 1596, type: !2467)
!4596 = !DILocation(line: 0, scope: !4593)
!4597 = !DILocation(line: 1598, column: 21, scope: !4593)
!4598 = !DILocation(line: 1598, column: 3, scope: !4593)
!4599 = distinct !DISubprogram(name: "bb_seq", scope: !389, file: !389, line: 237, type: !4600, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4602)
!4600 = !DISubroutineType(types: !4601)
!4601 = !{!790, !2515}
!4602 = !{!4603}
!4603 = !DILocalVariable(name: "bb", arg: 1, scope: !4599, file: !389, line: 237, type: !2515)
!4604 = !DILocation(line: 0, scope: !4599)
!4605 = !DILocation(line: 239, column: 17, scope: !4599)
!4606 = !DILocation(line: 239, column: 23, scope: !4599)
!4607 = !DILocation(line: 239, column: 33, scope: !4599)
!4608 = !DILocation(line: 239, column: 43, scope: !4599)
!4609 = !DILocation(line: 239, column: 36, scope: !4599)
!4610 = !DILocation(line: 239, column: 10, scope: !4599)
!4611 = !DILocation(line: 239, column: 68, scope: !4599)
!4612 = !DILocation(line: 239, column: 3, scope: !4599)
!4613 = distinct !DISubprogram(name: "gimple_seq_first", scope: !389, file: !389, line: 159, type: !4614, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4619)
!4614 = !DISubroutineType(types: !4615)
!4615 = !{!795, !4616}
!4616 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !477, line: 67, baseType: !4617)
!4617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4618, size: 64)
!4618 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !792)
!4619 = !{!4620}
!4620 = !DILocalVariable(name: "s", arg: 1, scope: !4613, file: !389, line: 159, type: !4616)
!4621 = !DILocation(line: 0, scope: !4613)
!4622 = !DILocation(line: 161, column: 10, scope: !4613)
!4623 = !DILocation(line: 161, column: 17, scope: !4613)
!4624 = !DILocation(line: 161, column: 3, scope: !4613)
!4625 = distinct !DISubprogram(name: "shwi_to_double_int", scope: !526, file: !526, line: 72, type: !4626, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4628)
!4626 = !DISubroutineType(types: !4627)
!4627 = !{!525, !532}
!4628 = !{!4629, !4630}
!4629 = !DILocalVariable(name: "cst", arg: 1, scope: !4625, file: !526, line: 72, type: !532)
!4630 = !DILocalVariable(name: "r", scope: !4625, file: !526, line: 74, type: !525)
!4631 = !DILocation(line: 0, scope: !4625)
!4632 = !DILocation(line: 77, column: 12, scope: !4625)
!4633 = !DILocation(line: 79, column: 3, scope: !4625)
!4634 = distinct !DISubprogram(name: "bound_difference", scope: !1, file: !1, line: 364, type: !4635, scopeLine: 365, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4638)
!4635 = !DISubroutineType(types: !4636)
!4636 = !{null, !1015, !476, !476, !4637}
!4637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2894, size: 64)
!4638 = !{!4639, !4640, !4641, !4642, !4643, !4644, !4645, !4646, !4647, !4648, !4649, !4650, !4651, !4652, !4653, !4654, !4655, !4656, !4657, !4658, !4659}
!4639 = !DILocalVariable(name: "loop", arg: 1, scope: !4634, file: !1, line: 364, type: !1015)
!4640 = !DILocalVariable(name: "x", arg: 2, scope: !4634, file: !1, line: 364, type: !476)
!4641 = !DILocalVariable(name: "y", arg: 3, scope: !4634, file: !1, line: 364, type: !476)
!4642 = !DILocalVariable(name: "bnds", arg: 4, scope: !4634, file: !1, line: 364, type: !4637)
!4643 = !DILocalVariable(name: "type", scope: !4634, file: !1, line: 366, type: !476)
!4644 = !DILocalVariable(name: "varx", scope: !4634, file: !1, line: 367, type: !476)
!4645 = !DILocalVariable(name: "vary", scope: !4634, file: !1, line: 367, type: !476)
!4646 = !DILocalVariable(name: "offx", scope: !4634, file: !1, line: 368, type: !2898)
!4647 = !DILocalVariable(name: "offy", scope: !4634, file: !1, line: 368, type: !2898)
!4648 = !DILocalVariable(name: "minx", scope: !4634, file: !1, line: 369, type: !2898)
!4649 = !DILocalVariable(name: "maxx", scope: !4634, file: !1, line: 369, type: !2898)
!4650 = !DILocalVariable(name: "miny", scope: !4634, file: !1, line: 369, type: !2898)
!4651 = !DILocalVariable(name: "maxy", scope: !4634, file: !1, line: 369, type: !2898)
!4652 = !DILocalVariable(name: "cnt", scope: !4634, file: !1, line: 370, type: !469)
!4653 = !DILocalVariable(name: "e", scope: !4634, file: !1, line: 371, type: !780)
!4654 = !DILocalVariable(name: "bb", scope: !4634, file: !1, line: 372, type: !1286)
!4655 = !DILocalVariable(name: "c0", scope: !4634, file: !1, line: 373, type: !476)
!4656 = !DILocalVariable(name: "c1", scope: !4634, file: !1, line: 373, type: !476)
!4657 = !DILocalVariable(name: "cond", scope: !4634, file: !1, line: 374, type: !800)
!4658 = !DILocalVariable(name: "cmp", scope: !4634, file: !1, line: 375, type: !132)
!4659 = !DILabel(scope: !4634, name: "end", file: !1, line: 446)
!4660 = !DILocation(line: 0, scope: !4634)
!4661 = !DILocation(line: 366, column: 15, scope: !4634)
!4662 = !DILocation(line: 367, column: 3, scope: !4634)
!4663 = !DILocation(line: 368, column: 3, scope: !4634)
!4664 = !DILocation(line: 368, column: 9, scope: !4634)
!4665 = !DILocation(line: 368, column: 15, scope: !4634)
!4666 = !DILocation(line: 369, column: 3, scope: !4634)
!4667 = !DILocation(line: 369, column: 9, scope: !4634)
!4668 = !DILocation(line: 369, column: 15, scope: !4634)
!4669 = !DILocation(line: 369, column: 21, scope: !4634)
!4670 = !DILocation(line: 369, column: 27, scope: !4634)
!4671 = !DILocation(line: 379, column: 3, scope: !4634)
!4672 = !DILocation(line: 380, column: 3, scope: !4634)
!4673 = !DILocation(line: 382, column: 13, scope: !4634)
!4674 = !DILocation(line: 382, column: 3, scope: !4634)
!4675 = !DILocation(line: 383, column: 13, scope: !4634)
!4676 = !DILocation(line: 383, column: 3, scope: !4634)
!4677 = !DILocation(line: 384, column: 13, scope: !4634)
!4678 = !DILocation(line: 384, column: 3, scope: !4634)
!4679 = !DILocation(line: 385, column: 13, scope: !4634)
!4680 = !DILocation(line: 385, column: 3, scope: !4634)
!4681 = !DILocation(line: 386, column: 3, scope: !4634)
!4682 = !DILocation(line: 387, column: 3, scope: !4634)
!4683 = !DILocation(line: 389, column: 23, scope: !4684)
!4684 = distinct !DILexicalBlock(scope: !4634, file: !1, line: 389, column: 7)
!4685 = !DILocation(line: 389, column: 8, scope: !4684)
!4686 = !DILocation(line: 390, column: 7, scope: !4684)
!4687 = !DILocation(line: 390, column: 27, scope: !4684)
!4688 = !DILocation(line: 390, column: 33, scope: !4684)
!4689 = !DILocation(line: 390, column: 10, scope: !4684)
!4690 = !DILocation(line: 389, column: 7, scope: !4634)
!4691 = !DILocation(line: 395, column: 7, scope: !4692)
!4692 = distinct !DILexicalBlock(scope: !4684, file: !1, line: 391, column: 5)
!4693 = !DILocation(line: 396, column: 5, scope: !4692)
!4694 = !DILocation(line: 401, column: 17, scope: !4695)
!4695 = distinct !DILexicalBlock(scope: !4684, file: !1, line: 398, column: 5)
!4696 = !DILocation(line: 401, column: 7, scope: !4695)
!4697 = !DILocation(line: 402, column: 17, scope: !4695)
!4698 = !DILocation(line: 402, column: 7, scope: !4695)
!4699 = !DILocation(line: 403, column: 17, scope: !4695)
!4700 = !DILocation(line: 403, column: 7, scope: !4695)
!4701 = !DILocation(line: 404, column: 17, scope: !4695)
!4702 = !DILocation(line: 404, column: 7, scope: !4695)
!4703 = !DILocation(line: 405, column: 36, scope: !4695)
!4704 = !DILocation(line: 405, column: 7, scope: !4695)
!4705 = !DILocation(line: 406, column: 36, scope: !4695)
!4706 = !DILocation(line: 406, column: 7, scope: !4695)
!4707 = !DILocation(line: 408, column: 7, scope: !4695)
!4708 = !DILocation(line: 409, column: 7, scope: !4695)
!4709 = !DILocation(line: 410, column: 7, scope: !4695)
!4710 = !DILocation(line: 411, column: 7, scope: !4695)
!4711 = !DILocation(line: 412, column: 7, scope: !4695)
!4712 = !DILocation(line: 413, column: 7, scope: !4695)
!4713 = !DILocation(line: 417, column: 22, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !4634, file: !1, line: 417, column: 7)
!4715 = !DILocation(line: 417, column: 7, scope: !4714)
!4716 = !DILocation(line: 417, column: 28, scope: !4714)
!4717 = !DILocation(line: 417, column: 46, scope: !4714)
!4718 = !DILocation(line: 417, column: 31, scope: !4714)
!4719 = !DILocation(line: 417, column: 7, scope: !4634)
!4720 = !DILocation(line: 422, column: 19, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4634, file: !1, line: 422, column: 3)
!4722 = !DILocation(line: 422, column: 8, scope: !4721)
!4723 = !DILocation(line: 0, scope: !4721)
!4724 = !DILocation(line: 423, column: 14, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4721, file: !1, line: 422, column: 3)
!4726 = !DILocation(line: 423, column: 11, scope: !4725)
!4727 = !DILocation(line: 423, column: 37, scope: !4725)
!4728 = !DILocation(line: 423, column: 30, scope: !4725)
!4729 = !DILocation(line: 422, column: 3, scope: !4721)
!4730 = !DILocation(line: 426, column: 12, scope: !4731)
!4731 = distinct !DILexicalBlock(scope: !4732, file: !1, line: 426, column: 11)
!4732 = distinct !DILexicalBlock(scope: !4725, file: !1, line: 425, column: 5)
!4733 = !DILocation(line: 426, column: 11, scope: !4732)
!4734 = !DILocation(line: 428, column: 11, scope: !4732)
!4735 = !DILocation(line: 430, column: 16, scope: !4736)
!4736 = distinct !DILexicalBlock(scope: !4732, file: !1, line: 430, column: 11)
!4737 = !DILocation(line: 430, column: 22, scope: !4736)
!4738 = !DILocation(line: 430, column: 11, scope: !4732)
!4739 = !DILocation(line: 433, column: 28, scope: !4732)
!4740 = !DILocation(line: 433, column: 14, scope: !4732)
!4741 = !DILocation(line: 434, column: 12, scope: !4732)
!4742 = !DILocation(line: 435, column: 13, scope: !4732)
!4743 = !DILocation(line: 436, column: 12, scope: !4732)
!4744 = !DILocation(line: 438, column: 14, scope: !4745)
!4745 = distinct !DILexicalBlock(scope: !4732, file: !1, line: 438, column: 11)
!4746 = !DILocation(line: 438, column: 20, scope: !4745)
!4747 = !DILocation(line: 438, column: 11, scope: !4732)
!4748 = !DILocation(line: 439, column: 8, scope: !4745)
!4749 = !DILocation(line: 439, column: 2, scope: !4745)
!4750 = !DILocation(line: 0, scope: !4732)
!4751 = !DILocation(line: 441, column: 40, scope: !4732)
!4752 = !DILocation(line: 441, column: 52, scope: !4732)
!4753 = !DILocation(line: 441, column: 7, scope: !4732)
!4754 = !DILocation(line: 443, column: 7, scope: !4732)
!4755 = !DILocation(line: 444, column: 5, scope: !4732)
!4756 = !DILocation(line: 424, column: 13, scope: !4725)
!4757 = !DILocation(line: 422, column: 3, scope: !4725)
!4758 = distinct !{!4758, !4729, !4759}
!4759 = !DILocation(line: 444, column: 5, scope: !4721)
!4760 = !DILocation(line: 447, column: 14, scope: !4634)
!4761 = !DILocation(line: 446, column: 1, scope: !4634)
!4762 = !DILocation(line: 447, column: 3, scope: !4634)
!4763 = !DILocation(line: 448, column: 3, scope: !4634)
!4764 = !DILocation(line: 449, column: 1, scope: !4634)
!4765 = distinct !DISubprogram(name: "dump_affine_iv", scope: !1, file: !1, line: 1160, type: !4766, scopeLine: 1161, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4768)
!4766 = !DISubroutineType(types: !4767)
!4767 = !{null, !1916, !2882}
!4768 = !{!4769, !4770}
!4769 = !DILocalVariable(name: "file", arg: 1, scope: !4765, file: !1, line: 1160, type: !1916)
!4770 = !DILocalVariable(name: "iv", arg: 2, scope: !4765, file: !1, line: 1160, type: !2882)
!4771 = !DILocation(line: 0, scope: !4765)
!4772 = !DILocation(line: 1162, column: 27, scope: !4773)
!4773 = distinct !DILexicalBlock(scope: !4765, file: !1, line: 1162, column: 7)
!4774 = !DILocation(line: 1162, column: 8, scope: !4773)
!4775 = !DILocation(line: 1162, column: 7, scope: !4765)
!4776 = !DILocation(line: 1163, column: 5, scope: !4773)
!4777 = !DILocation(line: 1165, column: 23, scope: !4765)
!4778 = !DILocation(line: 1165, column: 38, scope: !4765)
!4779 = !DILocation(line: 1165, column: 3, scope: !4765)
!4780 = !DILocation(line: 1167, column: 27, scope: !4781)
!4781 = distinct !DILexicalBlock(scope: !4765, file: !1, line: 1167, column: 7)
!4782 = !DILocation(line: 1167, column: 8, scope: !4781)
!4783 = !DILocation(line: 1167, column: 7, scope: !4765)
!4784 = !DILocation(line: 1169, column: 7, scope: !4785)
!4785 = distinct !DILexicalBlock(scope: !4781, file: !1, line: 1168, column: 5)
!4786 = !DILocation(line: 1170, column: 27, scope: !4785)
!4787 = !DILocation(line: 1170, column: 42, scope: !4785)
!4788 = !DILocation(line: 1170, column: 7, scope: !4785)
!4789 = !DILocation(line: 1171, column: 33, scope: !4785)
!4790 = !DILocation(line: 1171, column: 29, scope: !4785)
!4791 = !DILocation(line: 1171, column: 7, scope: !4785)
!4792 = !DILocation(line: 1172, column: 5, scope: !4785)
!4793 = !DILocation(line: 1173, column: 1, scope: !4765)
!4794 = distinct !DISubprogram(name: "number_of_iterations_ne", scope: !1, file: !1, line: 586, type: !4795, scopeLine: 589, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4797)
!4795 = !DISubroutineType(types: !4796)
!4796 = !{!468, !476, !2882, !476, !2691, !468, !4637}
!4797 = !{!4798, !4799, !4800, !4801, !4802, !4803, !4804, !4805, !4806, !4807, !4808, !4809, !4810, !4811, !4812}
!4798 = !DILocalVariable(name: "type", arg: 1, scope: !4794, file: !1, line: 586, type: !476)
!4799 = !DILocalVariable(name: "iv", arg: 2, scope: !4794, file: !1, line: 586, type: !2882)
!4800 = !DILocalVariable(name: "final", arg: 3, scope: !4794, file: !1, line: 586, type: !476)
!4801 = !DILocalVariable(name: "niter", arg: 4, scope: !4794, file: !1, line: 587, type: !2691)
!4802 = !DILocalVariable(name: "exit_must_be_taken", arg: 5, scope: !4794, file: !1, line: 587, type: !468)
!4803 = !DILocalVariable(name: "bnds", arg: 6, scope: !4794, file: !1, line: 588, type: !4637)
!4804 = !DILocalVariable(name: "niter_type", scope: !4794, file: !1, line: 590, type: !476)
!4805 = !DILocalVariable(name: "s", scope: !4794, file: !1, line: 591, type: !476)
!4806 = !DILocalVariable(name: "c", scope: !4794, file: !1, line: 591, type: !476)
!4807 = !DILocalVariable(name: "d", scope: !4794, file: !1, line: 591, type: !476)
!4808 = !DILocalVariable(name: "bits", scope: !4794, file: !1, line: 591, type: !476)
!4809 = !DILocalVariable(name: "assumption", scope: !4794, file: !1, line: 591, type: !476)
!4810 = !DILocalVariable(name: "tmp", scope: !4794, file: !1, line: 591, type: !476)
!4811 = !DILocalVariable(name: "bound", scope: !4794, file: !1, line: 591, type: !476)
!4812 = !DILocalVariable(name: "max", scope: !4794, file: !1, line: 592, type: !2898)
!4813 = !DILocation(line: 0, scope: !4794)
!4814 = !DILocation(line: 590, column: 21, scope: !4794)
!4815 = !DILocation(line: 592, column: 3, scope: !4794)
!4816 = !DILocation(line: 592, column: 9, scope: !4794)
!4817 = !DILocation(line: 594, column: 10, scope: !4794)
!4818 = !DILocation(line: 594, column: 20, scope: !4794)
!4819 = !DILocation(line: 595, column: 10, scope: !4794)
!4820 = !DILocation(line: 595, column: 16, scope: !4794)
!4821 = !DILocation(line: 596, column: 10, scope: !4794)
!4822 = !DILocation(line: 596, column: 14, scope: !4794)
!4823 = !DILocation(line: 603, column: 34, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !4794, file: !1, line: 603, column: 7)
!4825 = !DILocation(line: 603, column: 7, scope: !4824)
!4826 = !DILocation(line: 0, scope: !4824)
!4827 = !DILocation(line: 603, column: 7, scope: !4794)
!4828 = !DILocation(line: 605, column: 11, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4824, file: !1, line: 604, column: 5)
!4830 = !DILocation(line: 607, column: 11, scope: !4829)
!4831 = !DILocation(line: 610, column: 7, scope: !4829)
!4832 = !DILocation(line: 611, column: 5, scope: !4829)
!4833 = !DILocation(line: 614, column: 11, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4824, file: !1, line: 613, column: 5)
!4835 = !DILocation(line: 615, column: 11, scope: !4834)
!4836 = !DILocation(line: 620, column: 13, scope: !4794)
!4837 = !DILocation(line: 620, column: 3, scope: !4794)
!4838 = !DILocation(line: 621, column: 41, scope: !4794)
!4839 = !DILocation(line: 621, column: 3, scope: !4794)
!4840 = !DILocation(line: 622, column: 10, scope: !4794)
!4841 = !DILocation(line: 622, column: 16, scope: !4794)
!4842 = !DILocation(line: 623, column: 3, scope: !4794)
!4843 = !DILocation(line: 626, column: 7, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4794, file: !1, line: 626, column: 7)
!4845 = !DILocation(line: 626, column: 7, scope: !4794)
!4846 = !DILocation(line: 628, column: 14, scope: !4847)
!4847 = distinct !DILexicalBlock(scope: !4844, file: !1, line: 627, column: 5)
!4848 = !DILocation(line: 628, column: 20, scope: !4847)
!4849 = !DILocation(line: 629, column: 7, scope: !4847)
!4850 = !DILocation(line: 635, column: 10, scope: !4794)
!4851 = !DILocation(line: 637, column: 12, scope: !4794)
!4852 = !DILocation(line: 638, column: 7, scope: !4794)
!4853 = !DILocation(line: 637, column: 11, scope: !4794)
!4854 = !DILocation(line: 636, column: 11, scope: !4794)
!4855 = !DILocation(line: 641, column: 11, scope: !4794)
!4856 = !DILocation(line: 640, column: 7, scope: !4794)
!4857 = !DILocation(line: 642, column: 7, scope: !4794)
!4858 = !DILocation(line: 644, column: 8, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4794, file: !1, line: 644, column: 7)
!4860 = !DILocation(line: 644, column: 7, scope: !4794)
!4861 = !DILocation(line: 648, column: 20, scope: !4862)
!4862 = distinct !DILexicalBlock(scope: !4859, file: !1, line: 645, column: 5)
!4863 = !DILocation(line: 649, column: 20, scope: !4862)
!4864 = !DILocation(line: 651, column: 12, scope: !4865)
!4865 = distinct !DILexicalBlock(scope: !4862, file: !1, line: 651, column: 11)
!4866 = !DILocation(line: 651, column: 11, scope: !4862)
!4867 = !DILocation(line: 652, column: 23, scope: !4865)
!4868 = !DILocation(line: 652, column: 21, scope: !4865)
!4869 = !DILocation(line: 652, column: 2, scope: !4865)
!4870 = !DILocation(line: 656, column: 7, scope: !4794)
!4871 = !DILocation(line: 657, column: 9, scope: !4794)
!4872 = !DILocation(line: 658, column: 18, scope: !4794)
!4873 = !DILocation(line: 658, column: 10, scope: !4794)
!4874 = !DILocation(line: 658, column: 16, scope: !4794)
!4875 = !DILocation(line: 659, column: 3, scope: !4794)
!4876 = !DILocation(line: 660, column: 1, scope: !4794)
!4877 = distinct !DISubprogram(name: "number_of_iterations_lt", scope: !1, file: !1, line: 991, type: !4878, scopeLine: 994, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !4880)
!4878 = !DISubroutineType(types: !4879)
!4879 = !{!468, !476, !2882, !2882, !2691, !468, !4637}
!4880 = !{!4881, !4882, !4883, !4884, !4885, !4886, !4887, !4888, !4889, !4890, !4891, !4892, !4893}
!4881 = !DILocalVariable(name: "type", arg: 1, scope: !4877, file: !1, line: 991, type: !476)
!4882 = !DILocalVariable(name: "iv0", arg: 2, scope: !4877, file: !1, line: 991, type: !2882)
!4883 = !DILocalVariable(name: "iv1", arg: 3, scope: !4877, file: !1, line: 991, type: !2882)
!4884 = !DILocalVariable(name: "niter", arg: 4, scope: !4877, file: !1, line: 992, type: !2691)
!4885 = !DILocalVariable(name: "exit_must_be_taken", arg: 5, scope: !4877, file: !1, line: 993, type: !468)
!4886 = !DILocalVariable(name: "bnds", arg: 6, scope: !4877, file: !1, line: 993, type: !4637)
!4887 = !DILocalVariable(name: "niter_type", scope: !4877, file: !1, line: 995, type: !476)
!4888 = !DILocalVariable(name: "delta", scope: !4877, file: !1, line: 996, type: !476)
!4889 = !DILocalVariable(name: "step", scope: !4877, file: !1, line: 996, type: !476)
!4890 = !DILocalVariable(name: "s", scope: !4877, file: !1, line: 996, type: !476)
!4891 = !DILocalVariable(name: "mstep", scope: !4877, file: !1, line: 997, type: !2898)
!4892 = !DILocalVariable(name: "tmp", scope: !4877, file: !1, line: 997, type: !2898)
!4893 = !DILocalVariable(name: "zps", scope: !4894, file: !1, line: 1054, type: !2699)
!4894 = distinct !DILexicalBlock(scope: !4895, file: !1, line: 1053, column: 5)
!4895 = distinct !DILexicalBlock(scope: !4877, file: !1, line: 1051, column: 7)
!4896 = !DILocation(line: 0, scope: !4877)
!4897 = !DILocation(line: 995, column: 21, scope: !4877)
!4898 = !DILocation(line: 996, column: 3, scope: !4877)
!4899 = !DILocation(line: 997, column: 3, scope: !4877)
!4900 = !DILocation(line: 997, column: 9, scope: !4877)
!4901 = !DILocation(line: 997, column: 16, scope: !4877)
!4902 = !DILocation(line: 999, column: 30, scope: !4903)
!4903 = distinct !DILexicalBlock(scope: !4877, file: !1, line: 999, column: 7)
!4904 = !DILocation(line: 999, column: 7, scope: !4903)
!4905 = !DILocation(line: 0, scope: !4903)
!4906 = !DILocation(line: 999, column: 7, scope: !4877)
!4907 = !DILocation(line: 1001, column: 24, scope: !4908)
!4908 = distinct !DILexicalBlock(scope: !4903, file: !1, line: 1000, column: 5)
!4909 = !DILocation(line: 1002, column: 14, scope: !4908)
!4910 = !DILocation(line: 1002, column: 18, scope: !4908)
!4911 = !DILocation(line: 1003, column: 27, scope: !4908)
!4912 = !DILocation(line: 1003, column: 14, scope: !4908)
!4913 = !DILocation(line: 1003, column: 20, scope: !4908)
!4914 = !DILocation(line: 1004, column: 5, scope: !4908)
!4915 = !DILocation(line: 1007, column: 24, scope: !4916)
!4916 = distinct !DILexicalBlock(scope: !4903, file: !1, line: 1006, column: 5)
!4917 = !DILocation(line: 1008, column: 14, scope: !4916)
!4918 = !DILocation(line: 1008, column: 18, scope: !4916)
!4919 = !DILocation(line: 1009, column: 27, scope: !4916)
!4920 = !DILocation(line: 1009, column: 14, scope: !4916)
!4921 = !DILocation(line: 1009, column: 20, scope: !4916)
!4922 = !DILocation(line: 1012, column: 11, scope: !4877)
!4923 = !DILocation(line: 1012, column: 9, scope: !4877)
!4924 = !DILocation(line: 1017, column: 27, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4877, file: !1, line: 1017, column: 7)
!4926 = !DILocation(line: 1017, column: 8, scope: !4925)
!4927 = !DILocation(line: 1017, column: 33, scope: !4925)
!4928 = !DILocation(line: 1017, column: 56, scope: !4925)
!4929 = !DILocation(line: 1017, column: 36, scope: !4925)
!4930 = !DILocation(line: 1018, column: 7, scope: !4925)
!4931 = !DILocation(line: 1018, column: 35, scope: !4925)
!4932 = !DILocation(line: 1018, column: 11, scope: !4925)
!4933 = !DILocation(line: 1018, column: 41, scope: !4925)
!4934 = !DILocation(line: 1018, column: 64, scope: !4925)
!4935 = !DILocation(line: 1018, column: 44, scope: !4925)
!4936 = !DILocation(line: 1017, column: 7, scope: !4877)
!4937 = !DILocation(line: 1034, column: 20, scope: !4938)
!4938 = distinct !DILexicalBlock(scope: !4939, file: !1, line: 1034, column: 11)
!4939 = distinct !DILexicalBlock(scope: !4925, file: !1, line: 1019, column: 5)
!4940 = !DILocation(line: 1034, column: 11, scope: !4938)
!4941 = !DILocation(line: 1034, column: 33, scope: !4938)
!4942 = !DILocation(line: 1034, column: 11, scope: !4939)
!4943 = !DILocation(line: 1035, column: 23, scope: !4938)
!4944 = !DILocation(line: 1035, column: 9, scope: !4938)
!4945 = !DILocation(line: 1035, column: 21, scope: !4938)
!4946 = !DILocation(line: 1035, column: 2, scope: !4938)
!4947 = !DILocation(line: 1037, column: 14, scope: !4939)
!4948 = !DILocation(line: 1037, column: 20, scope: !4939)
!4949 = !DILocation(line: 1038, column: 14, scope: !4939)
!4950 = !DILocation(line: 1038, column: 20, scope: !4939)
!4951 = !DILocation(line: 1038, column: 52, scope: !4939)
!4952 = !DILocation(line: 1039, column: 7, scope: !4939)
!4953 = !DILocation(line: 1042, column: 30, scope: !4954)
!4954 = distinct !DILexicalBlock(scope: !4877, file: !1, line: 1042, column: 7)
!4955 = !DILocation(line: 1042, column: 7, scope: !4954)
!4956 = !DILocation(line: 1042, column: 7, scope: !4877)
!4957 = !DILocation(line: 1043, column: 12, scope: !4954)
!4958 = !DILocation(line: 1043, column: 5, scope: !4954)
!4959 = !DILocation(line: 1045, column: 12, scope: !4954)
!4960 = !DILocation(line: 0, scope: !4954)
!4961 = !DILocation(line: 1051, column: 7, scope: !4895)
!4962 = !DILocation(line: 1051, column: 7, scope: !4877)
!4963 = !DILocation(line: 1054, column: 7, scope: !4894)
!4964 = !DILocation(line: 1056, column: 18, scope: !4894)
!4965 = !DILocation(line: 1056, column: 11, scope: !4894)
!4966 = !DILocation(line: 1056, column: 16, scope: !4894)
!4967 = !DILocation(line: 1057, column: 11, scope: !4894)
!4968 = !DILocation(line: 1057, column: 16, scope: !4894)
!4969 = !DILocation(line: 1060, column: 11, scope: !4894)
!4970 = !DILocation(line: 1060, column: 23, scope: !4894)
!4971 = !DILocation(line: 1062, column: 51, scope: !4894)
!4972 = !DILocation(line: 0, scope: !4894)
!4973 = !DILocation(line: 1062, column: 14, scope: !4894)
!4974 = !DILocation(line: 1063, column: 5, scope: !4895)
!4975 = !DILocation(line: 1066, column: 8, scope: !4976)
!4976 = distinct !DILexicalBlock(scope: !4877, file: !1, line: 1066, column: 7)
!4977 = !DILocation(line: 1066, column: 7, scope: !4877)
!4978 = !DILocation(line: 1072, column: 3, scope: !4877)
!4979 = !DILocation(line: 1074, column: 7, scope: !4877)
!4980 = !DILocation(line: 1076, column: 11, scope: !4877)
!4981 = !DILocation(line: 1076, column: 9, scope: !4877)
!4982 = !DILocation(line: 1077, column: 18, scope: !4877)
!4983 = !DILocation(line: 1077, column: 10, scope: !4877)
!4984 = !DILocation(line: 1077, column: 16, scope: !4877)
!4985 = !DILocation(line: 1079, column: 13, scope: !4877)
!4986 = !DILocation(line: 1079, column: 3, scope: !4877)
!4987 = !DILocation(line: 1080, column: 13, scope: !4877)
!4988 = !DILocation(line: 1080, column: 3, scope: !4877)
!4989 = !DILocation(line: 1081, column: 30, scope: !4877)
!4990 = !DILocation(line: 1081, column: 3, scope: !4877)
!4991 = !DILocation(line: 1082, column: 17, scope: !4877)
!4992 = !DILocation(line: 1082, column: 3, scope: !4877)
!4993 = !DILocation(line: 1083, column: 3, scope: !4877)
!4994 = !DILocation(line: 1084, column: 3, scope: !4877)
!4995 = !DILocation(line: 1085, column: 10, scope: !4877)
!4996 = !DILocation(line: 1085, column: 16, scope: !4877)
!4997 = !DILocation(line: 1086, column: 3, scope: !4877)
!4998 = !DILocation(line: 1087, column: 3, scope: !4877)
!4999 = !DILocation(line: 1089, column: 3, scope: !4877)
!5000 = !DILocation(line: 1090, column: 1, scope: !4877)
!5001 = distinct !DISubprogram(name: "number_of_iterations_le", scope: !1, file: !1, line: 1100, type: !4878, scopeLine: 1103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5002)
!5002 = !{!5003, !5004, !5005, !5006, !5007, !5008, !5009, !5010}
!5003 = !DILocalVariable(name: "type", arg: 1, scope: !5001, file: !1, line: 1100, type: !476)
!5004 = !DILocalVariable(name: "iv0", arg: 2, scope: !5001, file: !1, line: 1100, type: !2882)
!5005 = !DILocalVariable(name: "iv1", arg: 3, scope: !5001, file: !1, line: 1100, type: !2882)
!5006 = !DILocalVariable(name: "niter", arg: 4, scope: !5001, file: !1, line: 1101, type: !2691)
!5007 = !DILocalVariable(name: "exit_must_be_taken", arg: 5, scope: !5001, file: !1, line: 1101, type: !468)
!5008 = !DILocalVariable(name: "bnds", arg: 6, scope: !5001, file: !1, line: 1102, type: !4637)
!5009 = !DILocalVariable(name: "assumption", scope: !5001, file: !1, line: 1104, type: !476)
!5010 = !DILocalVariable(name: "type1", scope: !5001, file: !1, line: 1105, type: !476)
!5011 = !DILocation(line: 0, scope: !5001)
!5012 = !DILocation(line: 1106, column: 7, scope: !5013)
!5013 = distinct !DILexicalBlock(scope: !5001, file: !1, line: 1106, column: 7)
!5014 = !DILocation(line: 1106, column: 7, scope: !5001)
!5015 = !DILocation(line: 1107, column: 13, scope: !5013)
!5016 = !DILocation(line: 1107, column: 5, scope: !5013)
!5017 = !DILocation(line: 1118, column: 8, scope: !5018)
!5018 = distinct !DILexicalBlock(scope: !5001, file: !1, line: 1118, column: 7)
!5019 = !DILocation(line: 1118, column: 27, scope: !5018)
!5020 = !DILocation(line: 1118, column: 31, scope: !5018)
!5021 = !DILocation(line: 1118, column: 7, scope: !5001)
!5022 = !DILocation(line: 1120, column: 34, scope: !5023)
!5023 = distinct !DILexicalBlock(scope: !5024, file: !1, line: 1120, column: 11)
!5024 = distinct !DILexicalBlock(scope: !5018, file: !1, line: 1119, column: 5)
!5025 = !DILocation(line: 1120, column: 11, scope: !5023)
!5026 = !DILocation(line: 0, scope: !5023)
!5027 = !DILocation(line: 1120, column: 11, scope: !5024)
!5028 = !DILocation(line: 1121, column: 15, scope: !5023)
!5029 = !DILocation(line: 1121, column: 2, scope: !5023)
!5030 = !DILocation(line: 1124, column: 15, scope: !5023)
!5031 = !DILocation(line: 1127, column: 11, scope: !5032)
!5032 = distinct !DILexicalBlock(scope: !5024, file: !1, line: 1127, column: 11)
!5033 = !DILocation(line: 1127, column: 11, scope: !5024)
!5034 = !DILocation(line: 1129, column: 12, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !5024, file: !1, line: 1129, column: 11)
!5036 = !DILocation(line: 1129, column: 11, scope: !5024)
!5037 = !DILocation(line: 1130, column: 23, scope: !5035)
!5038 = !DILocation(line: 1130, column: 21, scope: !5035)
!5039 = !DILocation(line: 1130, column: 2, scope: !5035)
!5040 = !DILocation(line: 1134, column: 30, scope: !5041)
!5041 = distinct !DILexicalBlock(scope: !5001, file: !1, line: 1134, column: 7)
!5042 = !DILocation(line: 1134, column: 7, scope: !5041)
!5043 = !DILocation(line: 0, scope: !5041)
!5044 = !DILocation(line: 1134, column: 7, scope: !5001)
!5045 = !DILocation(line: 1136, column: 11, scope: !5046)
!5046 = distinct !DILexicalBlock(scope: !5047, file: !1, line: 1136, column: 11)
!5047 = distinct !DILexicalBlock(scope: !5041, file: !1, line: 1135, column: 5)
!5048 = !DILocation(line: 1136, column: 11, scope: !5047)
!5049 = !DILocation(line: 1137, column: 14, scope: !5046)
!5050 = !DILocation(line: 1137, column: 12, scope: !5046)
!5051 = !DILocation(line: 1137, column: 2, scope: !5046)
!5052 = !DILocation(line: 1140, column: 14, scope: !5046)
!5053 = !DILocation(line: 1140, column: 12, scope: !5046)
!5054 = !DILocation(line: 1143, column: 12, scope: !5055)
!5055 = distinct !DILexicalBlock(scope: !5041, file: !1, line: 1143, column: 12)
!5056 = !DILocation(line: 1143, column: 12, scope: !5041)
!5057 = !DILocation(line: 1144, column: 17, scope: !5055)
!5058 = !DILocation(line: 1144, column: 15, scope: !5055)
!5059 = !DILocation(line: 1144, column: 5, scope: !5055)
!5060 = !DILocation(line: 1148, column: 17, scope: !5055)
!5061 = !DILocation(line: 1148, column: 15, scope: !5055)
!5062 = !DILocation(line: 1151, column: 21, scope: !5001)
!5063 = !DILocation(line: 1151, column: 3, scope: !5001)
!5064 = !DILocation(line: 1153, column: 10, scope: !5001)
!5065 = !DILocation(line: 1153, column: 3, scope: !5001)
!5066 = !DILocation(line: 1155, column: 1, scope: !5001)
!5067 = distinct !DISubprogram(name: "split_to_var_and_offset", scope: !1, file: !1, line: 71, type: !5068, scopeLine: 72, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5071)
!5068 = !DISubroutineType(types: !5069)
!5069 = !{null, !476, !834, !5070}
!5070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2901, size: 64)
!5071 = !{!5072, !5073, !5074, !5075, !5076, !5077, !5078, !5079}
!5072 = !DILocalVariable(name: "expr", arg: 1, scope: !5067, file: !1, line: 71, type: !476)
!5073 = !DILocalVariable(name: "var", arg: 2, scope: !5067, file: !1, line: 71, type: !834)
!5074 = !DILocalVariable(name: "offset", arg: 3, scope: !5067, file: !1, line: 71, type: !5070)
!5075 = !DILocalVariable(name: "type", scope: !5067, file: !1, line: 73, type: !476)
!5076 = !DILocalVariable(name: "op0", scope: !5067, file: !1, line: 74, type: !476)
!5077 = !DILocalVariable(name: "op1", scope: !5067, file: !1, line: 74, type: !476)
!5078 = !DILocalVariable(name: "off", scope: !5067, file: !1, line: 75, type: !525)
!5079 = !DILocalVariable(name: "negate", scope: !5067, file: !1, line: 76, type: !468)
!5080 = !DILocation(line: 0, scope: !5067)
!5081 = !DILocation(line: 73, column: 15, scope: !5067)
!5082 = !DILocation(line: 75, column: 3, scope: !5067)
!5083 = !DILocation(line: 78, column: 8, scope: !5067)
!5084 = !DILocation(line: 79, column: 3, scope: !5067)
!5085 = !DILocation(line: 81, column: 11, scope: !5067)
!5086 = !DILocation(line: 81, column: 3, scope: !5067)
!5087 = !DILocation(line: 84, column: 7, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5067, file: !1, line: 82, column: 5)
!5089 = !DILocation(line: 90, column: 13, scope: !5088)
!5090 = !DILocation(line: 92, column: 11, scope: !5091)
!5091 = distinct !DILexicalBlock(scope: !5088, file: !1, line: 92, column: 11)
!5092 = !DILocation(line: 92, column: 27, scope: !5091)
!5093 = !DILocation(line: 92, column: 11, scope: !5088)
!5094 = !DILocation(line: 89, column: 13, scope: !5088)
!5095 = !DILocation(line: 95, column: 12, scope: !5088)
!5096 = !DILocation(line: 97, column: 13, scope: !5088)
!5097 = !DILocation(line: 98, column: 11, scope: !5098)
!5098 = distinct !DILexicalBlock(scope: !5088, file: !1, line: 98, column: 11)
!5099 = !DILocation(line: 98, column: 11, scope: !5088)
!5100 = !DILocation(line: 99, column: 8, scope: !5098)
!5101 = !DILocation(line: 99, column: 2, scope: !5098)
!5102 = !DILocation(line: 100, column: 13, scope: !5088)
!5103 = !DILocation(line: 100, column: 35, scope: !5088)
!5104 = !DILocation(line: 101, column: 7, scope: !5088)
!5105 = !DILocation(line: 102, column: 7, scope: !5088)
!5106 = !DILocation(line: 105, column: 14, scope: !5088)
!5107 = !DILocation(line: 105, column: 12, scope: !5088)
!5108 = !DILocation(line: 106, column: 13, scope: !5088)
!5109 = !DILocation(line: 107, column: 40, scope: !5088)
!5110 = !DILocation(line: 107, column: 7, scope: !5088)
!5111 = !DILocation(line: 108, column: 7, scope: !5088)
!5112 = !DILocation(line: 113, column: 1, scope: !5067)
!5113 = distinct !DISubprogram(name: "bound_difference_of_offsetted_base", scope: !1, file: !1, line: 148, type: !5114, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5116)
!5114 = !DISubroutineType(types: !5115)
!5115 = !{null, !476, !5070, !5070, !4637}
!5116 = !{!5117, !5118, !5119, !5120, !5121, !5122, !5123}
!5117 = !DILocalVariable(name: "type", arg: 1, scope: !5113, file: !1, line: 148, type: !476)
!5118 = !DILocalVariable(name: "x", arg: 2, scope: !5113, file: !1, line: 148, type: !5070)
!5119 = !DILocalVariable(name: "y", arg: 3, scope: !5113, file: !1, line: 148, type: !5070)
!5120 = !DILocalVariable(name: "bnds", arg: 4, scope: !5113, file: !1, line: 149, type: !4637)
!5121 = !DILocalVariable(name: "rel", scope: !5113, file: !1, line: 151, type: !469)
!5122 = !DILocalVariable(name: "may_wrap", scope: !5113, file: !1, line: 152, type: !468)
!5123 = !DILocalVariable(name: "m", scope: !5113, file: !1, line: 153, type: !2898)
!5124 = !DILocation(line: 0, scope: !5113)
!5125 = !DILocation(line: 151, column: 13, scope: !5113)
!5126 = !DILocation(line: 152, column: 20, scope: !5113)
!5127 = !DILocation(line: 153, column: 3, scope: !5113)
!5128 = !DILocation(line: 153, column: 9, scope: !5113)
!5129 = !DILocation(line: 169, column: 11, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5113, file: !1, line: 169, column: 7)
!5131 = !DILocation(line: 169, column: 7, scope: !5113)
!5132 = !DILocation(line: 171, column: 19, scope: !5133)
!5133 = distinct !DILexicalBlock(scope: !5130, file: !1, line: 170, column: 5)
!5134 = !DILocation(line: 171, column: 7, scope: !5133)
!5135 = !DILocation(line: 172, column: 19, scope: !5133)
!5136 = !DILocation(line: 172, column: 7, scope: !5133)
!5137 = !DILocation(line: 173, column: 7, scope: !5133)
!5138 = !DILocation(line: 152, column: 19, scope: !5113)
!5139 = !DILocation(line: 176, column: 13, scope: !5113)
!5140 = !DILocation(line: 176, column: 3, scope: !5113)
!5141 = !DILocation(line: 177, column: 43, scope: !5113)
!5142 = !DILocation(line: 177, column: 26, scope: !5113)
!5143 = !DILocation(line: 177, column: 3, scope: !5113)
!5144 = !DILocation(line: 178, column: 3, scope: !5113)
!5145 = !DILocation(line: 179, column: 12, scope: !5113)
!5146 = !DILocation(line: 179, column: 3, scope: !5113)
!5147 = !DILocation(line: 180, column: 12, scope: !5113)
!5148 = !DILocation(line: 180, column: 3, scope: !5113)
!5149 = !DILocation(line: 182, column: 7, scope: !5113)
!5150 = !DILocation(line: 184, column: 15, scope: !5151)
!5151 = distinct !DILexicalBlock(scope: !5152, file: !1, line: 184, column: 11)
!5152 = distinct !DILexicalBlock(scope: !5153, file: !1, line: 183, column: 5)
!5153 = distinct !DILexicalBlock(scope: !5113, file: !1, line: 182, column: 7)
!5154 = !DILocation(line: 184, column: 11, scope: !5152)
!5155 = !DILocation(line: 185, column: 2, scope: !5151)
!5156 = !DILocation(line: 187, column: 2, scope: !5151)
!5157 = !DILocation(line: 190, column: 3, scope: !5113)
!5158 = !DILocation(line: 191, column: 1, scope: !5113)
!5159 = distinct !DISubprogram(name: "determine_value_range", scope: !1, file: !1, line: 119, type: !5160, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5162)
!5160 = !DISubroutineType(types: !5161)
!5161 = !{null, !476, !476, !5070, !5070, !5070}
!5162 = !{!5163, !5164, !5165, !5166, !5167}
!5163 = !DILocalVariable(name: "type", arg: 1, scope: !5159, file: !1, line: 119, type: !476)
!5164 = !DILocalVariable(name: "var", arg: 2, scope: !5159, file: !1, line: 119, type: !476)
!5165 = !DILocalVariable(name: "off", arg: 3, scope: !5159, file: !1, line: 119, type: !5070)
!5166 = !DILocalVariable(name: "min", arg: 4, scope: !5159, file: !1, line: 120, type: !5070)
!5167 = !DILocalVariable(name: "max", arg: 5, scope: !5159, file: !1, line: 120, type: !5070)
!5168 = !DILocation(line: 0, scope: !5159)
!5169 = !DILocation(line: 123, column: 7, scope: !5170)
!5170 = distinct !DILexicalBlock(scope: !5159, file: !1, line: 123, column: 7)
!5171 = !DILocation(line: 123, column: 7, scope: !5159)
!5172 = !DILocation(line: 125, column: 7, scope: !5173)
!5173 = distinct !DILexicalBlock(scope: !5170, file: !1, line: 124, column: 5)
!5174 = !DILocation(line: 126, column: 7, scope: !5173)
!5175 = !DILocation(line: 127, column: 7, scope: !5173)
!5176 = !DILocation(line: 132, column: 3, scope: !5159)
!5177 = !DILocation(line: 133, column: 8, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5159, file: !1, line: 133, column: 7)
!5179 = !DILocation(line: 133, column: 7, scope: !5159)
!5180 = !DILocation(line: 138, column: 7, scope: !5181)
!5181 = distinct !DILexicalBlock(scope: !5159, file: !1, line: 138, column: 7)
!5182 = !DILocation(line: 138, column: 21, scope: !5181)
!5183 = !DILocation(line: 138, column: 7, scope: !5159)
!5184 = !DILocation(line: 139, column: 5, scope: !5181)
!5185 = !DILocation(line: 141, column: 5, scope: !5181)
!5186 = !DILocation(line: 142, column: 1, scope: !5159)
!5187 = distinct !DISubprogram(name: "refine_bounds_using_guard", scope: !1, file: !1, line: 198, type: !5188, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5190)
!5188 = !DISubroutineType(types: !5189)
!5189 = !{null, !476, !476, !5070, !476, !5070, !476, !132, !476, !4637}
!5190 = !{!5191, !5192, !5193, !5194, !5195, !5196, !5197, !5198, !5199, !5200, !5201, !5202, !5203, !5204, !5205, !5206, !5207, !5208, !5209, !5210, !5211, !5212, !5213}
!5191 = !DILocalVariable(name: "type", arg: 1, scope: !5187, file: !1, line: 198, type: !476)
!5192 = !DILocalVariable(name: "varx", arg: 2, scope: !5187, file: !1, line: 198, type: !476)
!5193 = !DILocalVariable(name: "offx", arg: 3, scope: !5187, file: !1, line: 198, type: !5070)
!5194 = !DILocalVariable(name: "vary", arg: 4, scope: !5187, file: !1, line: 199, type: !476)
!5195 = !DILocalVariable(name: "offy", arg: 5, scope: !5187, file: !1, line: 199, type: !5070)
!5196 = !DILocalVariable(name: "c0", arg: 6, scope: !5187, file: !1, line: 200, type: !476)
!5197 = !DILocalVariable(name: "cmp", arg: 7, scope: !5187, file: !1, line: 200, type: !132)
!5198 = !DILocalVariable(name: "c1", arg: 8, scope: !5187, file: !1, line: 200, type: !476)
!5199 = !DILocalVariable(name: "bnds", arg: 9, scope: !5187, file: !1, line: 201, type: !4637)
!5200 = !DILocalVariable(name: "varc0", scope: !5187, file: !1, line: 203, type: !476)
!5201 = !DILocalVariable(name: "varc1", scope: !5187, file: !1, line: 203, type: !476)
!5202 = !DILocalVariable(name: "tmp", scope: !5187, file: !1, line: 203, type: !476)
!5203 = !DILocalVariable(name: "ctype", scope: !5187, file: !1, line: 203, type: !476)
!5204 = !DILocalVariable(name: "offc0", scope: !5187, file: !1, line: 204, type: !2898)
!5205 = !DILocalVariable(name: "offc1", scope: !5187, file: !1, line: 204, type: !2898)
!5206 = !DILocalVariable(name: "loffx", scope: !5187, file: !1, line: 204, type: !2898)
!5207 = !DILocalVariable(name: "loffy", scope: !5187, file: !1, line: 204, type: !2898)
!5208 = !DILocalVariable(name: "bnd", scope: !5187, file: !1, line: 204, type: !2898)
!5209 = !DILocalVariable(name: "lbound", scope: !5187, file: !1, line: 205, type: !468)
!5210 = !DILocalVariable(name: "no_wrap", scope: !5187, file: !1, line: 206, type: !468)
!5211 = !DILocalVariable(name: "x_ok", scope: !5187, file: !1, line: 207, type: !468)
!5212 = !DILocalVariable(name: "y_ok", scope: !5187, file: !1, line: 207, type: !468)
!5213 = !DILabel(scope: !5187, name: "end", file: !1, line: 349)
!5214 = !DILocation(line: 0, scope: !5187)
!5215 = !DILocation(line: 203, column: 3, scope: !5187)
!5216 = !DILocation(line: 204, column: 3, scope: !5187)
!5217 = !DILocation(line: 204, column: 9, scope: !5187)
!5218 = !DILocation(line: 204, column: 16, scope: !5187)
!5219 = !DILocation(line: 204, column: 23, scope: !5187)
!5220 = !DILocation(line: 204, column: 30, scope: !5187)
!5221 = !DILocation(line: 204, column: 37, scope: !5187)
!5222 = !DILocation(line: 206, column: 18, scope: !5187)
!5223 = !DILocation(line: 209, column: 3, scope: !5187)
!5224 = !DILocation(line: 215, column: 7, scope: !5225)
!5225 = distinct !DILexicalBlock(scope: !5187, file: !1, line: 210, column: 5)
!5226 = !DILocation(line: 216, column: 7, scope: !5225)
!5227 = !DILocation(line: 217, column: 15, scope: !5225)
!5228 = !DILocation(line: 218, column: 12, scope: !5229)
!5229 = distinct !DILexicalBlock(scope: !5225, file: !1, line: 218, column: 11)
!5230 = !DILocation(line: 218, column: 11, scope: !5225)
!5231 = !DILocation(line: 232, column: 11, scope: !5232)
!5232 = distinct !DILexicalBlock(scope: !5225, file: !1, line: 232, column: 11)
!5233 = !DILocation(line: 232, column: 26, scope: !5232)
!5234 = !DILocation(line: 233, column: 4, scope: !5232)
!5235 = !DILocation(line: 233, column: 8, scope: !5232)
!5236 = !DILocation(line: 232, column: 11, scope: !5225)
!5237 = !DILocation(line: 238, column: 15, scope: !5225)
!5238 = !DILocation(line: 239, column: 11, scope: !5239)
!5239 = distinct !DILexicalBlock(scope: !5225, file: !1, line: 239, column: 11)
!5240 = !DILocation(line: 239, column: 37, scope: !5239)
!5241 = !DILocation(line: 239, column: 34, scope: !5239)
!5242 = !DILocation(line: 239, column: 11, scope: !5225)
!5243 = !DILocation(line: 241, column: 12, scope: !5225)
!5244 = !DILocation(line: 242, column: 12, scope: !5225)
!5245 = !DILocation(line: 244, column: 11, scope: !5246)
!5246 = distinct !DILexicalBlock(scope: !5225, file: !1, line: 244, column: 11)
!5247 = !DILocation(line: 245, column: 4, scope: !5246)
!5248 = !DILocation(line: 245, column: 7, scope: !5246)
!5249 = !DILocation(line: 244, column: 11, scope: !5225)
!5250 = !DILocation(line: 250, column: 11, scope: !5251)
!5251 = distinct !DILexicalBlock(scope: !5225, file: !1, line: 250, column: 11)
!5252 = !DILocation(line: 251, column: 4, scope: !5251)
!5253 = !DILocation(line: 251, column: 7, scope: !5251)
!5254 = !DILocation(line: 250, column: 11, scope: !5225)
!5255 = !DILocation(line: 0, scope: !5225)
!5256 = !DILocation(line: 262, column: 13, scope: !5187)
!5257 = !DILocation(line: 262, column: 3, scope: !5187)
!5258 = !DILocation(line: 263, column: 13, scope: !5187)
!5259 = !DILocation(line: 263, column: 3, scope: !5187)
!5260 = !DILocation(line: 264, column: 28, scope: !5187)
!5261 = !DILocation(line: 264, column: 3, scope: !5187)
!5262 = !DILocation(line: 265, column: 28, scope: !5187)
!5263 = !DILocation(line: 265, column: 3, scope: !5187)
!5264 = !DILocation(line: 271, column: 30, scope: !5265)
!5265 = distinct !DILexicalBlock(scope: !5187, file: !1, line: 271, column: 7)
!5266 = !DILocation(line: 271, column: 7, scope: !5265)
!5267 = !DILocation(line: 271, column: 7, scope: !5187)
!5268 = !DILocation(line: 273, column: 13, scope: !5269)
!5269 = distinct !DILexicalBlock(scope: !5265, file: !1, line: 272, column: 5)
!5270 = !DILocation(line: 273, column: 28, scope: !5269)
!5271 = !DILocation(line: 273, column: 26, scope: !5269)
!5272 = !DILocation(line: 273, column: 41, scope: !5269)
!5273 = !DILocation(line: 274, column: 7, scope: !5269)
!5274 = !DILocation(line: 275, column: 13, scope: !5269)
!5275 = !DILocation(line: 276, column: 5, scope: !5269)
!5276 = !DILocation(line: 278, column: 31, scope: !5277)
!5277 = distinct !DILexicalBlock(scope: !5187, file: !1, line: 278, column: 7)
!5278 = !DILocation(line: 278, column: 8, scope: !5277)
!5279 = !DILocation(line: 279, column: 7, scope: !5277)
!5280 = !DILocation(line: 279, column: 34, scope: !5277)
!5281 = !DILocation(line: 279, column: 11, scope: !5277)
!5282 = !DILocation(line: 278, column: 7, scope: !5187)
!5283 = !DILocation(line: 282, column: 17, scope: !5187)
!5284 = !DILocation(line: 282, column: 3, scope: !5187)
!5285 = !DILocation(line: 283, column: 17, scope: !5187)
!5286 = !DILocation(line: 283, column: 3, scope: !5187)
!5287 = !DILocation(line: 285, column: 22, scope: !5288)
!5288 = distinct !DILexicalBlock(scope: !5187, file: !1, line: 285, column: 7)
!5289 = !DILocation(line: 288, column: 7, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !5288, file: !1, line: 286, column: 5)
!5291 = !DILocation(line: 289, column: 7, scope: !5290)
!5292 = !DILocation(line: 290, column: 13, scope: !5290)
!5293 = !DILocation(line: 292, column: 5, scope: !5290)
!5294 = !DILocation(line: 310, column: 7, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !5187, file: !1, line: 310, column: 7)
!5296 = !DILocation(line: 310, column: 7, scope: !5187)
!5297 = !DILocation(line: 317, column: 15, scope: !5298)
!5298 = distinct !DILexicalBlock(scope: !5295, file: !1, line: 316, column: 5)
!5299 = !DILocation(line: 318, column: 8, scope: !5298)
!5300 = !DILocation(line: 318, column: 11, scope: !5298)
!5301 = !DILocation(line: 319, column: 15, scope: !5298)
!5302 = !DILocation(line: 320, column: 8, scope: !5298)
!5303 = !DILocation(line: 320, column: 11, scope: !5298)
!5304 = !DILocation(line: 320, column: 34, scope: !5298)
!5305 = !DILocation(line: 0, scope: !5295)
!5306 = !DILocation(line: 323, column: 7, scope: !5307)
!5307 = distinct !DILexicalBlock(scope: !5187, file: !1, line: 323, column: 7)
!5308 = !DILocation(line: 323, column: 15, scope: !5307)
!5309 = !DILocation(line: 323, column: 12, scope: !5307)
!5310 = !DILocation(line: 325, column: 17, scope: !5311)
!5311 = distinct !DILexicalBlock(scope: !5307, file: !1, line: 324, column: 5)
!5312 = !DILocation(line: 325, column: 7, scope: !5311)
!5313 = !DILocation(line: 326, column: 7, scope: !5311)
!5314 = !DILocation(line: 327, column: 7, scope: !5311)
!5315 = !DILocation(line: 328, column: 7, scope: !5311)
!5316 = !DILocation(line: 330, column: 15, scope: !5317)
!5317 = distinct !DILexicalBlock(scope: !5311, file: !1, line: 330, column: 11)
!5318 = !DILocation(line: 330, column: 11, scope: !5311)
!5319 = !DILocation(line: 331, column: 2, scope: !5317)
!5320 = !DILocation(line: 333, column: 11, scope: !5321)
!5321 = distinct !DILexicalBlock(scope: !5311, file: !1, line: 333, column: 11)
!5322 = !DILocation(line: 333, column: 11, scope: !5311)
!5323 = !DILocation(line: 335, column: 4, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5321, file: !1, line: 334, column: 2)
!5325 = !DILocation(line: 336, column: 17, scope: !5326)
!5326 = distinct !DILexicalBlock(scope: !5324, file: !1, line: 336, column: 8)
!5327 = !DILocation(line: 336, column: 8, scope: !5326)
!5328 = !DILocation(line: 336, column: 35, scope: !5326)
!5329 = !DILocation(line: 336, column: 8, scope: !5324)
!5330 = !DILocation(line: 337, column: 6, scope: !5326)
!5331 = !DILocation(line: 341, column: 22, scope: !5332)
!5332 = distinct !DILexicalBlock(scope: !5333, file: !1, line: 341, column: 8)
!5333 = distinct !DILexicalBlock(scope: !5321, file: !1, line: 340, column: 2)
!5334 = !DILocation(line: 341, column: 8, scope: !5332)
!5335 = !DILocation(line: 341, column: 32, scope: !5332)
!5336 = !DILocation(line: 341, column: 8, scope: !5333)
!5337 = !DILocation(line: 342, column: 6, scope: !5332)
!5338 = !DILocation(line: 344, column: 7, scope: !5311)
!5339 = !DILocation(line: 345, column: 5, scope: !5311)
!5340 = !DILocation(line: 347, column: 3, scope: !5187)
!5341 = !DILocation(line: 348, column: 3, scope: !5187)
!5342 = !DILocation(line: 349, column: 1, scope: !5187)
!5343 = !DILocation(line: 350, column: 3, scope: !5187)
!5344 = !DILocation(line: 351, column: 3, scope: !5187)
!5345 = !DILocation(line: 352, column: 1, scope: !5187)
!5346 = distinct !DISubprogram(name: "bounds_negate", scope: !1, file: !1, line: 484, type: !5347, scopeLine: 485, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5349)
!5347 = !DISubroutineType(types: !5348)
!5348 = !{null, !4637}
!5349 = !{!5350, !5351}
!5350 = !DILocalVariable(name: "bnds", arg: 1, scope: !5346, file: !1, line: 484, type: !4637)
!5351 = !DILocalVariable(name: "tmp", scope: !5346, file: !1, line: 486, type: !2898)
!5352 = !DILocation(line: 0, scope: !5346)
!5353 = !DILocation(line: 486, column: 3, scope: !5346)
!5354 = !DILocation(line: 486, column: 9, scope: !5346)
!5355 = !DILocation(line: 488, column: 17, scope: !5346)
!5356 = !DILocation(line: 488, column: 22, scope: !5346)
!5357 = !DILocation(line: 488, column: 3, scope: !5346)
!5358 = !DILocation(line: 489, column: 22, scope: !5346)
!5359 = !DILocation(line: 489, column: 3, scope: !5346)
!5360 = !DILocation(line: 490, column: 3, scope: !5346)
!5361 = !DILocation(line: 491, column: 3, scope: !5346)
!5362 = !DILocation(line: 492, column: 1, scope: !5346)
!5363 = distinct !DISubprogram(name: "number_of_iterations_ne_max", scope: !1, file: !1, line: 545, type: !5364, scopeLine: 547, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5366)
!5364 = !DISubroutineType(types: !5365)
!5365 = !{null, !5070, !468, !476, !476, !4637}
!5366 = !{!5367, !5368, !5369, !5370, !5371, !5372, !5373}
!5367 = !DILocalVariable(name: "bnd", arg: 1, scope: !5363, file: !1, line: 545, type: !5070)
!5368 = !DILocalVariable(name: "no_overflow", arg: 2, scope: !5363, file: !1, line: 545, type: !468)
!5369 = !DILocalVariable(name: "c", arg: 3, scope: !5363, file: !1, line: 545, type: !476)
!5370 = !DILocalVariable(name: "s", arg: 4, scope: !5363, file: !1, line: 545, type: !476)
!5371 = !DILocalVariable(name: "bnds", arg: 5, scope: !5363, file: !1, line: 546, type: !4637)
!5372 = !DILocalVariable(name: "max", scope: !5363, file: !1, line: 548, type: !525)
!5373 = !DILocalVariable(name: "d", scope: !5363, file: !1, line: 549, type: !2898)
!5374 = !DILocation(line: 0, scope: !5363)
!5375 = !DILocation(line: 548, column: 3, scope: !5363)
!5376 = !DILocation(line: 549, column: 3, scope: !5363)
!5377 = !DILocation(line: 549, column: 9, scope: !5363)
!5378 = !DILocation(line: 554, column: 8, scope: !5379)
!5379 = distinct !DILexicalBlock(scope: !5363, file: !1, line: 554, column: 7)
!5380 = !DILocation(line: 554, column: 20, scope: !5379)
!5381 = !DILocation(line: 554, column: 39, scope: !5379)
!5382 = !DILocation(line: 554, column: 24, scope: !5379)
!5383 = !DILocation(line: 554, column: 7, scope: !5363)
!5384 = !DILocation(line: 556, column: 13, scope: !5385)
!5385 = distinct !DILexicalBlock(scope: !5379, file: !1, line: 555, column: 5)
!5386 = !DILocation(line: 556, column: 30, scope: !5385)
!5387 = !DILocation(line: 557, column: 25, scope: !5385)
!5388 = !DILocation(line: 557, column: 11, scope: !5385)
!5389 = !DILocation(line: 558, column: 7, scope: !5385)
!5390 = !DILocation(line: 559, column: 7, scope: !5385)
!5391 = !DILocation(line: 563, column: 19, scope: !5392)
!5392 = distinct !DILexicalBlock(scope: !5363, file: !1, line: 563, column: 7)
!5393 = !DILocation(line: 563, column: 31, scope: !5392)
!5394 = !DILocation(line: 563, column: 22, scope: !5392)
!5395 = !DILocation(line: 563, column: 44, scope: !5392)
!5396 = !DILocation(line: 563, column: 7, scope: !5363)
!5397 = !DILocation(line: 564, column: 19, scope: !5392)
!5398 = !DILocation(line: 564, column: 5, scope: !5392)
!5399 = !DILocation(line: 565, column: 12, scope: !5400)
!5400 = distinct !DILexicalBlock(scope: !5392, file: !1, line: 565, column: 12)
!5401 = !DILocation(line: 565, column: 26, scope: !5400)
!5402 = !DILocation(line: 565, column: 12, scope: !5392)
!5403 = !DILocation(line: 566, column: 30, scope: !5400)
!5404 = !DILocation(line: 566, column: 5, scope: !5400)
!5405 = !DILocation(line: 568, column: 47, scope: !5400)
!5406 = !DILocation(line: 568, column: 30, scope: !5400)
!5407 = !DILocation(line: 568, column: 5, scope: !5400)
!5408 = !DILocation(line: 571, column: 13, scope: !5363)
!5409 = !DILocation(line: 571, column: 3, scope: !5363)
!5410 = !DILocation(line: 572, column: 26, scope: !5363)
!5411 = !DILocation(line: 572, column: 3, scope: !5363)
!5412 = !DILocation(line: 573, column: 3, scope: !5363)
!5413 = !DILocation(line: 574, column: 3, scope: !5363)
!5414 = !DILocation(line: 575, column: 1, scope: !5363)
!5415 = distinct !DISubprogram(name: "inverse", scope: !1, file: !1, line: 497, type: !3627, scopeLine: 498, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5416)
!5416 = !{!5417, !5418, !5419, !5420, !5421, !5422, !5425, !5426}
!5417 = !DILocalVariable(name: "x", arg: 1, scope: !5415, file: !1, line: 497, type: !476)
!5418 = !DILocalVariable(name: "mask", arg: 2, scope: !5415, file: !1, line: 497, type: !476)
!5419 = !DILocalVariable(name: "type", scope: !5415, file: !1, line: 499, type: !476)
!5420 = !DILocalVariable(name: "rslt", scope: !5415, file: !1, line: 500, type: !476)
!5421 = !DILocalVariable(name: "ctr", scope: !5415, file: !1, line: 501, type: !5)
!5422 = !DILocalVariable(name: "ix", scope: !5423, file: !1, line: 505, type: !530)
!5423 = distinct !DILexicalBlock(scope: !5424, file: !1, line: 504, column: 5)
!5424 = distinct !DILexicalBlock(scope: !5415, file: !1, line: 503, column: 7)
!5425 = !DILocalVariable(name: "imask", scope: !5423, file: !1, line: 506, type: !530)
!5426 = !DILocalVariable(name: "irslt", scope: !5423, file: !1, line: 507, type: !530)
!5427 = !DILocation(line: 0, scope: !5415)
!5428 = !DILocation(line: 499, column: 15, scope: !5415)
!5429 = !DILocation(line: 501, column: 18, scope: !5415)
!5430 = !DILocation(line: 503, column: 7, scope: !5424)
!5431 = !DILocation(line: 503, column: 29, scope: !5424)
!5432 = !DILocation(line: 503, column: 7, scope: !5415)
!5433 = !DILocation(line: 0, scope: !5423)
!5434 = !DILocation(line: 509, column: 7, scope: !5423)
!5435 = !DILocation(line: 510, column: 7, scope: !5423)
!5436 = !DILocation(line: 512, column: 12, scope: !5423)
!5437 = !DILocation(line: 513, column: 15, scope: !5423)
!5438 = !DILocation(line: 515, column: 7, scope: !5423)
!5439 = !DILocation(line: 515, column: 7, scope: !5440)
!5440 = distinct !DILexicalBlock(scope: !5423, file: !1, line: 515, column: 7)
!5441 = !DILocation(line: 517, column: 10, scope: !5442)
!5442 = distinct !DILexicalBlock(scope: !5443, file: !1, line: 516, column: 2)
!5443 = distinct !DILexicalBlock(scope: !5440, file: !1, line: 515, column: 7)
!5444 = !DILocation(line: 518, column: 7, scope: !5442)
!5445 = !DILocation(line: 515, column: 22, scope: !5443)
!5446 = !DILocation(line: 515, column: 7, scope: !5443)
!5447 = distinct !{!5447, !5439, !5448}
!5448 = !DILocation(line: 519, column: 2, scope: !5440)
!5449 = !DILocation(line: 520, column: 13, scope: !5423)
!5450 = !DILocation(line: 522, column: 14, scope: !5423)
!5451 = !DILocation(line: 523, column: 5, scope: !5423)
!5452 = !DILocation(line: 526, column: 14, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5424, file: !1, line: 525, column: 5)
!5454 = !DILocation(line: 527, column: 7, scope: !5453)
!5455 = !DILocation(line: 0, scope: !5453)
!5456 = !DILocation(line: 527, column: 7, scope: !5457)
!5457 = distinct !DILexicalBlock(scope: !5453, file: !1, line: 527, column: 7)
!5458 = !DILocation(line: 529, column: 11, scope: !5459)
!5459 = distinct !DILexicalBlock(scope: !5460, file: !1, line: 528, column: 2)
!5460 = distinct !DILexicalBlock(scope: !5457, file: !1, line: 527, column: 7)
!5461 = !DILocation(line: 530, column: 8, scope: !5459)
!5462 = !DILocation(line: 527, column: 22, scope: !5460)
!5463 = !DILocation(line: 527, column: 7, scope: !5460)
!5464 = distinct !{!5464, !5456, !5465}
!5465 = !DILocation(line: 531, column: 2, scope: !5457)
!5466 = !DILocation(line: 532, column: 14, scope: !5453)
!5467 = !DILocation(line: 0, scope: !5424)
!5468 = !DILocation(line: 535, column: 3, scope: !5415)
!5469 = distinct !DISubprogram(name: "number_of_iterations_lt_to_ne", scope: !1, file: !1, line: 673, type: !5470, scopeLine: 677, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5472)
!5470 = !DISubroutineType(types: !5471)
!5471 = !{!468, !476, !2882, !2882, !2691, !834, !476, !468, !4637}
!5472 = !{!5473, !5474, !5475, !5476, !5477, !5478, !5479, !5480, !5481, !5482, !5483, !5484, !5485, !5486, !5487, !5488, !5489, !5490, !5491}
!5473 = !DILocalVariable(name: "type", arg: 1, scope: !5469, file: !1, line: 673, type: !476)
!5474 = !DILocalVariable(name: "iv0", arg: 2, scope: !5469, file: !1, line: 673, type: !2882)
!5475 = !DILocalVariable(name: "iv1", arg: 3, scope: !5469, file: !1, line: 673, type: !2882)
!5476 = !DILocalVariable(name: "niter", arg: 4, scope: !5469, file: !1, line: 674, type: !2691)
!5477 = !DILocalVariable(name: "delta", arg: 5, scope: !5469, file: !1, line: 675, type: !834)
!5478 = !DILocalVariable(name: "step", arg: 6, scope: !5469, file: !1, line: 675, type: !476)
!5479 = !DILocalVariable(name: "exit_must_be_taken", arg: 7, scope: !5469, file: !1, line: 676, type: !468)
!5480 = !DILocalVariable(name: "bnds", arg: 8, scope: !5469, file: !1, line: 676, type: !4637)
!5481 = !DILocalVariable(name: "niter_type", scope: !5469, file: !1, line: 678, type: !476)
!5482 = !DILocalVariable(name: "mod", scope: !5469, file: !1, line: 679, type: !476)
!5483 = !DILocalVariable(name: "tmod", scope: !5469, file: !1, line: 680, type: !476)
!5484 = !DILocalVariable(name: "mmod", scope: !5469, file: !1, line: 681, type: !2898)
!5485 = !DILocalVariable(name: "assumption", scope: !5469, file: !1, line: 682, type: !476)
!5486 = !DILocalVariable(name: "bound", scope: !5469, file: !1, line: 682, type: !476)
!5487 = !DILocalVariable(name: "noloop", scope: !5469, file: !1, line: 682, type: !476)
!5488 = !DILocalVariable(name: "ret", scope: !5469, file: !1, line: 683, type: !468)
!5489 = !DILocalVariable(name: "fv_comp_no_overflow", scope: !5469, file: !1, line: 683, type: !468)
!5490 = !DILocalVariable(name: "type1", scope: !5469, file: !1, line: 684, type: !476)
!5491 = !DILabel(scope: !5469, name: "end", file: !1, line: 783)
!5492 = !DILocation(line: 0, scope: !5469)
!5493 = !DILocation(line: 678, column: 21, scope: !5469)
!5494 = !DILocation(line: 679, column: 14, scope: !5469)
!5495 = !DILocation(line: 681, column: 3, scope: !5469)
!5496 = !DILocation(line: 681, column: 9, scope: !5469)
!5497 = !DILocation(line: 682, column: 21, scope: !5469)
!5498 = !DILocation(line: 685, column: 7, scope: !5499)
!5499 = distinct !DILexicalBlock(scope: !5469, file: !1, line: 685, column: 7)
!5500 = !DILocation(line: 685, column: 7, scope: !5469)
!5501 = !DILocation(line: 686, column: 13, scope: !5499)
!5502 = !DILocation(line: 686, column: 5, scope: !5499)
!5503 = !DILocation(line: 688, column: 7, scope: !5504)
!5504 = distinct !DILexicalBlock(scope: !5469, file: !1, line: 688, column: 7)
!5505 = !DILocation(line: 688, column: 23, scope: !5504)
!5506 = !DILocation(line: 688, column: 7, scope: !5469)
!5507 = !DILocation(line: 690, column: 7, scope: !5508)
!5508 = distinct !DILexicalBlock(scope: !5469, file: !1, line: 690, column: 7)
!5509 = !DILocation(line: 690, column: 7, scope: !5469)
!5510 = !DILocation(line: 691, column: 11, scope: !5508)
!5511 = !DILocation(line: 691, column: 5, scope: !5508)
!5512 = !DILocation(line: 692, column: 10, scope: !5469)
!5513 = !DILocation(line: 694, column: 13, scope: !5469)
!5514 = !DILocation(line: 694, column: 3, scope: !5469)
!5515 = !DILocation(line: 695, column: 29, scope: !5469)
!5516 = !DILocation(line: 695, column: 3, scope: !5469)
!5517 = !DILocation(line: 696, column: 3, scope: !5469)
!5518 = !DILocation(line: 705, column: 7, scope: !5519)
!5519 = distinct !DILexicalBlock(scope: !5469, file: !1, line: 705, column: 7)
!5520 = !DILocation(line: 705, column: 27, scope: !5519)
!5521 = !DILocation(line: 705, column: 30, scope: !5519)
!5522 = !DILocation(line: 705, column: 7, scope: !5469)
!5523 = !DILocation(line: 707, column: 13, scope: !5524)
!5524 = distinct !DILexicalBlock(scope: !5519, file: !1, line: 707, column: 12)
!5525 = !DILocation(line: 707, column: 12, scope: !5519)
!5526 = !DILocation(line: 711, column: 12, scope: !5524)
!5527 = !DILocation(line: 711, column: 7, scope: !5524)
!5528 = !DILocation(line: 711, column: 24, scope: !5524)
!5529 = !DILocation(line: 711, column: 50, scope: !5524)
!5530 = !DILocation(line: 711, column: 27, scope: !5524)
!5531 = !DILocation(line: 712, column: 6, scope: !5524)
!5532 = !DILocation(line: 712, column: 15, scope: !5524)
!5533 = !DILocation(line: 712, column: 10, scope: !5524)
!5534 = !DILocation(line: 712, column: 27, scope: !5524)
!5535 = !DILocation(line: 712, column: 53, scope: !5524)
!5536 = !DILocation(line: 712, column: 30, scope: !5524)
!5537 = !DILocation(line: 714, column: 30, scope: !5538)
!5538 = distinct !DILexicalBlock(scope: !5469, file: !1, line: 714, column: 7)
!5539 = !DILocation(line: 714, column: 7, scope: !5538)
!5540 = !DILocation(line: 714, column: 7, scope: !5469)
!5541 = !DILocation(line: 719, column: 11, scope: !5542)
!5542 = distinct !DILexicalBlock(scope: !5538, file: !1, line: 715, column: 5)
!5543 = !DILocation(line: 721, column: 12, scope: !5544)
!5544 = distinct !DILexicalBlock(scope: !5545, file: !1, line: 720, column: 2)
!5545 = distinct !DILexicalBlock(scope: !5542, file: !1, line: 719, column: 11)
!5546 = !DILocation(line: 723, column: 17, scope: !5544)
!5547 = !DILocation(line: 725, column: 8, scope: !5548)
!5548 = distinct !DILexicalBlock(scope: !5544, file: !1, line: 725, column: 8)
!5549 = !DILocation(line: 725, column: 8, scope: !5544)
!5550 = !DILocation(line: 728, column: 26, scope: !5551)
!5551 = distinct !DILexicalBlock(scope: !5542, file: !1, line: 728, column: 11)
!5552 = !DILocation(line: 728, column: 11, scope: !5551)
!5553 = !DILocation(line: 728, column: 39, scope: !5551)
!5554 = !DILocation(line: 728, column: 11, scope: !5542)
!5555 = !DILocation(line: 729, column: 11, scope: !5551)
!5556 = !DILocation(line: 729, column: 2, scope: !5551)
!5557 = !DILocation(line: 730, column: 16, scope: !5558)
!5558 = distinct !DILexicalBlock(scope: !5551, file: !1, line: 730, column: 16)
!5559 = !DILocation(line: 730, column: 16, scope: !5551)
!5560 = !DILocation(line: 731, column: 11, scope: !5558)
!5561 = !DILocation(line: 731, column: 2, scope: !5558)
!5562 = !DILocation(line: 736, column: 11, scope: !5558)
!5563 = !DILocation(line: 746, column: 11, scope: !5564)
!5564 = distinct !DILexicalBlock(scope: !5538, file: !1, line: 742, column: 5)
!5565 = !DILocation(line: 748, column: 12, scope: !5566)
!5566 = distinct !DILexicalBlock(scope: !5567, file: !1, line: 747, column: 2)
!5567 = distinct !DILexicalBlock(scope: !5564, file: !1, line: 746, column: 11)
!5568 = !DILocation(line: 750, column: 17, scope: !5566)
!5569 = !DILocation(line: 752, column: 8, scope: !5570)
!5570 = distinct !DILexicalBlock(scope: !5566, file: !1, line: 752, column: 8)
!5571 = !DILocation(line: 752, column: 8, scope: !5566)
!5572 = !DILocation(line: 755, column: 26, scope: !5573)
!5573 = distinct !DILexicalBlock(scope: !5564, file: !1, line: 755, column: 11)
!5574 = !DILocation(line: 755, column: 11, scope: !5573)
!5575 = !DILocation(line: 755, column: 39, scope: !5573)
!5576 = !DILocation(line: 755, column: 11, scope: !5564)
!5577 = !DILocation(line: 756, column: 11, scope: !5573)
!5578 = !DILocation(line: 756, column: 2, scope: !5573)
!5579 = !DILocation(line: 757, column: 16, scope: !5580)
!5580 = distinct !DILexicalBlock(scope: !5573, file: !1, line: 757, column: 16)
!5581 = !DILocation(line: 757, column: 16, scope: !5573)
!5582 = !DILocation(line: 758, column: 11, scope: !5580)
!5583 = !DILocation(line: 758, column: 2, scope: !5580)
!5584 = !DILocation(line: 765, column: 11, scope: !5580)
!5585 = !DILocation(line: 682, column: 8, scope: !5469)
!5586 = !DILocation(line: 0, scope: !5538)
!5587 = !DILocation(line: 771, column: 8, scope: !5588)
!5588 = distinct !DILexicalBlock(scope: !5469, file: !1, line: 771, column: 7)
!5589 = !DILocation(line: 771, column: 7, scope: !5469)
!5590 = !DILocation(line: 772, column: 26, scope: !5588)
!5591 = !DILocation(line: 772, column: 24, scope: !5588)
!5592 = !DILocation(line: 772, column: 5, scope: !5588)
!5593 = !DILocation(line: 775, column: 8, scope: !5594)
!5594 = distinct !DILexicalBlock(scope: !5469, file: !1, line: 775, column: 7)
!5595 = !DILocation(line: 775, column: 7, scope: !5469)
!5596 = !DILocation(line: 776, column: 26, scope: !5594)
!5597 = !DILocation(line: 776, column: 24, scope: !5594)
!5598 = !DILocation(line: 776, column: 5, scope: !5594)
!5599 = !DILocation(line: 779, column: 21, scope: !5469)
!5600 = !DILocation(line: 779, column: 3, scope: !5469)
!5601 = !DILocation(line: 780, column: 12, scope: !5469)
!5602 = !DILocation(line: 780, column: 10, scope: !5469)
!5603 = !DILocation(line: 782, column: 3, scope: !5469)
!5604 = !DILocation(line: 783, column: 1, scope: !5469)
!5605 = !DILocation(line: 784, column: 3, scope: !5469)
!5606 = !DILocation(line: 785, column: 3, scope: !5469)
!5607 = !DILocation(line: 786, column: 1, scope: !5469)
!5608 = distinct !DISubprogram(name: "assert_no_overflow_lt", scope: !1, file: !1, line: 794, type: !5609, scopeLine: 796, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5611)
!5609 = !DISubroutineType(types: !5610)
!5610 = !{!468, !476, !2882, !2882, !2691, !476}
!5611 = !{!5612, !5613, !5614, !5615, !5616, !5617, !5618, !5619, !5620, !5621}
!5612 = !DILocalVariable(name: "type", arg: 1, scope: !5608, file: !1, line: 794, type: !476)
!5613 = !DILocalVariable(name: "iv0", arg: 2, scope: !5608, file: !1, line: 794, type: !2882)
!5614 = !DILocalVariable(name: "iv1", arg: 3, scope: !5608, file: !1, line: 794, type: !2882)
!5615 = !DILocalVariable(name: "niter", arg: 4, scope: !5608, file: !1, line: 795, type: !2691)
!5616 = !DILocalVariable(name: "step", arg: 5, scope: !5608, file: !1, line: 795, type: !476)
!5617 = !DILocalVariable(name: "bound", scope: !5608, file: !1, line: 797, type: !476)
!5618 = !DILocalVariable(name: "d", scope: !5608, file: !1, line: 797, type: !476)
!5619 = !DILocalVariable(name: "assumption", scope: !5608, file: !1, line: 797, type: !476)
!5620 = !DILocalVariable(name: "diff", scope: !5608, file: !1, line: 797, type: !476)
!5621 = !DILocalVariable(name: "niter_type", scope: !5608, file: !1, line: 798, type: !476)
!5622 = !DILocation(line: 0, scope: !5608)
!5623 = !DILocation(line: 798, column: 21, scope: !5608)
!5624 = !DILocation(line: 800, column: 30, scope: !5625)
!5625 = distinct !DILexicalBlock(scope: !5608, file: !1, line: 800, column: 7)
!5626 = !DILocation(line: 800, column: 7, scope: !5625)
!5627 = !DILocation(line: 800, column: 7, scope: !5608)
!5628 = !DILocation(line: 803, column: 16, scope: !5629)
!5629 = distinct !DILexicalBlock(scope: !5630, file: !1, line: 803, column: 11)
!5630 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 801, column: 5)
!5631 = !DILocation(line: 803, column: 11, scope: !5629)
!5632 = !DILocation(line: 803, column: 11, scope: !5630)
!5633 = !DILocation(line: 810, column: 11, scope: !5634)
!5634 = distinct !DILexicalBlock(scope: !5630, file: !1, line: 810, column: 11)
!5635 = !DILocation(line: 810, column: 33, scope: !5634)
!5636 = !DILocation(line: 810, column: 11, scope: !5630)
!5637 = !DILocation(line: 812, column: 8, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5634, file: !1, line: 811, column: 2)
!5639 = !DILocation(line: 815, column: 11, scope: !5638)
!5640 = !DILocation(line: 816, column: 2, scope: !5638)
!5641 = !DILocation(line: 818, column: 9, scope: !5634)
!5642 = !DILocation(line: 0, scope: !5634)
!5643 = !DILocation(line: 820, column: 15, scope: !5630)
!5644 = !DILocation(line: 822, column: 20, scope: !5630)
!5645 = !DILocation(line: 824, column: 5, scope: !5630)
!5646 = !DILocation(line: 828, column: 16, scope: !5647)
!5647 = distinct !DILexicalBlock(scope: !5648, file: !1, line: 828, column: 11)
!5648 = distinct !DILexicalBlock(scope: !5625, file: !1, line: 826, column: 5)
!5649 = !DILocation(line: 828, column: 11, scope: !5647)
!5650 = !DILocation(line: 828, column: 11, scope: !5648)
!5651 = !DILocation(line: 831, column: 11, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5648, file: !1, line: 831, column: 11)
!5653 = !DILocation(line: 831, column: 33, scope: !5652)
!5654 = !DILocation(line: 831, column: 11, scope: !5648)
!5655 = !DILocation(line: 833, column: 8, scope: !5656)
!5656 = distinct !DILexicalBlock(scope: !5652, file: !1, line: 832, column: 2)
!5657 = !DILocation(line: 836, column: 11, scope: !5656)
!5658 = !DILocation(line: 837, column: 2, scope: !5656)
!5659 = !DILocation(line: 839, column: 9, scope: !5652)
!5660 = !DILocation(line: 0, scope: !5652)
!5661 = !DILocation(line: 841, column: 15, scope: !5648)
!5662 = !DILocation(line: 843, column: 20, scope: !5648)
!5663 = !DILocation(line: 0, scope: !5625)
!5664 = !DILocation(line: 847, column: 7, scope: !5665)
!5665 = distinct !DILexicalBlock(scope: !5608, file: !1, line: 847, column: 7)
!5666 = !DILocation(line: 847, column: 7, scope: !5608)
!5667 = !DILocation(line: 849, column: 8, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5608, file: !1, line: 849, column: 7)
!5669 = !DILocation(line: 849, column: 7, scope: !5608)
!5670 = !DILocation(line: 850, column: 26, scope: !5668)
!5671 = !DILocation(line: 850, column: 24, scope: !5668)
!5672 = !DILocation(line: 850, column: 5, scope: !5668)
!5673 = !DILocation(line: 853, column: 8, scope: !5608)
!5674 = !DILocation(line: 853, column: 20, scope: !5608)
!5675 = !DILocation(line: 854, column: 8, scope: !5608)
!5676 = !DILocation(line: 854, column: 20, scope: !5608)
!5677 = !DILocation(line: 855, column: 3, scope: !5608)
!5678 = !DILocation(line: 856, column: 1, scope: !5608)
!5679 = distinct !DISubprogram(name: "assert_loop_rolls_lt", scope: !1, file: !1, line: 863, type: !5680, scopeLine: 865, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5682)
!5680 = !DISubroutineType(types: !5681)
!5681 = !{null, !476, !2882, !2882, !2691, !4637}
!5682 = !{!5683, !5684, !5685, !5686, !5687, !5688, !5689, !5690, !5691, !5692, !5693, !5694, !5695, !5696, !5697, !5698, !5699}
!5683 = !DILocalVariable(name: "type", arg: 1, scope: !5679, file: !1, line: 863, type: !476)
!5684 = !DILocalVariable(name: "iv0", arg: 2, scope: !5679, file: !1, line: 863, type: !2882)
!5685 = !DILocalVariable(name: "iv1", arg: 3, scope: !5679, file: !1, line: 863, type: !2882)
!5686 = !DILocalVariable(name: "niter", arg: 4, scope: !5679, file: !1, line: 864, type: !2691)
!5687 = !DILocalVariable(name: "bnds", arg: 5, scope: !5679, file: !1, line: 864, type: !4637)
!5688 = !DILocalVariable(name: "assumption", scope: !5679, file: !1, line: 866, type: !476)
!5689 = !DILocalVariable(name: "bound", scope: !5679, file: !1, line: 866, type: !476)
!5690 = !DILocalVariable(name: "diff", scope: !5679, file: !1, line: 866, type: !476)
!5691 = !DILocalVariable(name: "mbz", scope: !5679, file: !1, line: 867, type: !476)
!5692 = !DILocalVariable(name: "mbzl", scope: !5679, file: !1, line: 867, type: !476)
!5693 = !DILocalVariable(name: "mbzr", scope: !5679, file: !1, line: 867, type: !476)
!5694 = !DILocalVariable(name: "type1", scope: !5679, file: !1, line: 867, type: !476)
!5695 = !DILocalVariable(name: "rolls_p", scope: !5679, file: !1, line: 868, type: !468)
!5696 = !DILocalVariable(name: "no_overflow_p", scope: !5679, file: !1, line: 868, type: !468)
!5697 = !DILocalVariable(name: "dstep", scope: !5679, file: !1, line: 869, type: !525)
!5698 = !DILocalVariable(name: "mstep", scope: !5679, file: !1, line: 870, type: !2898)
!5699 = !DILocalVariable(name: "max", scope: !5679, file: !1, line: 870, type: !2898)
!5700 = !DILocation(line: 0, scope: !5679)
!5701 = !DILocation(line: 866, column: 21, scope: !5679)
!5702 = !DILocation(line: 869, column: 3, scope: !5679)
!5703 = !DILocation(line: 870, column: 3, scope: !5679)
!5704 = !DILocation(line: 870, column: 9, scope: !5679)
!5705 = !DILocation(line: 870, column: 16, scope: !5679)
!5706 = !DILocation(line: 894, column: 30, scope: !5707)
!5707 = distinct !DILexicalBlock(scope: !5679, file: !1, line: 894, column: 7)
!5708 = !DILocation(line: 894, column: 7, scope: !5707)
!5709 = !DILocation(line: 894, column: 7, scope: !5679)
!5710 = !DILocation(line: 895, column: 13, scope: !5707)
!5711 = !DILocation(line: 895, column: 38, scope: !5707)
!5712 = !DILocation(line: 911, column: 45, scope: !5679)
!5713 = !DILocation(line: 895, column: 5, scope: !5707)
!5714 = !DILocation(line: 898, column: 15, scope: !5715)
!5715 = distinct !DILexicalBlock(scope: !5707, file: !1, line: 897, column: 5)
!5716 = !DILocation(line: 898, column: 57, scope: !5715)
!5717 = !DILocation(line: 898, column: 32, scope: !5715)
!5718 = !DILocation(line: 899, column: 11, scope: !5715)
!5719 = !DILocation(line: 900, column: 15, scope: !5715)
!5720 = !DILocation(line: 903, column: 13, scope: !5679)
!5721 = !DILocation(line: 903, column: 3, scope: !5679)
!5722 = !DILocation(line: 904, column: 3, scope: !5679)
!5723 = !DILocation(line: 905, column: 3, scope: !5679)
!5724 = !DILocation(line: 906, column: 3, scope: !5679)
!5725 = !DILocation(line: 908, column: 29, scope: !5679)
!5726 = !DILocation(line: 908, column: 13, scope: !5679)
!5727 = !DILocation(line: 908, column: 42, scope: !5679)
!5728 = !DILocation(line: 910, column: 13, scope: !5679)
!5729 = !DILocation(line: 910, column: 3, scope: !5679)
!5730 = !DILocation(line: 911, column: 28, scope: !5679)
!5731 = !DILocation(line: 911, column: 3, scope: !5679)
!5732 = !DILocation(line: 912, column: 3, scope: !5679)
!5733 = !DILocation(line: 913, column: 29, scope: !5679)
!5734 = !DILocation(line: 913, column: 20, scope: !5679)
!5735 = !DILocation(line: 913, column: 44, scope: !5679)
!5736 = !DILocation(line: 919, column: 6, scope: !5679)
!5737 = !DILocation(line: 919, column: 9, scope: !5679)
!5738 = !DILocation(line: 920, column: 3, scope: !5679)
!5739 = !DILocation(line: 921, column: 3, scope: !5679)
!5740 = !DILocation(line: 923, column: 15, scope: !5741)
!5741 = distinct !DILexicalBlock(scope: !5679, file: !1, line: 923, column: 7)
!5742 = !DILocation(line: 927, column: 7, scope: !5743)
!5743 = distinct !DILexicalBlock(scope: !5679, file: !1, line: 927, column: 7)
!5744 = !DILocation(line: 927, column: 7, scope: !5679)
!5745 = !DILocation(line: 928, column: 13, scope: !5743)
!5746 = !DILocation(line: 928, column: 5, scope: !5743)
!5747 = !DILocation(line: 933, column: 30, scope: !5748)
!5748 = distinct !DILexicalBlock(scope: !5679, file: !1, line: 933, column: 7)
!5749 = !DILocation(line: 933, column: 7, scope: !5748)
!5750 = !DILocation(line: 933, column: 7, scope: !5679)
!5751 = !DILocation(line: 935, column: 14, scope: !5752)
!5752 = distinct !DILexicalBlock(scope: !5748, file: !1, line: 934, column: 5)
!5753 = !DILocation(line: 941, column: 12, scope: !5754)
!5754 = distinct !DILexicalBlock(scope: !5752, file: !1, line: 941, column: 11)
!5755 = !DILocation(line: 941, column: 11, scope: !5752)
!5756 = !DILocation(line: 943, column: 12, scope: !5757)
!5757 = distinct !DILexicalBlock(scope: !5754, file: !1, line: 942, column: 2)
!5758 = !DILocation(line: 945, column: 17, scope: !5757)
!5759 = !DILocation(line: 947, column: 2, scope: !5757)
!5760 = !DILocation(line: 951, column: 14, scope: !5752)
!5761 = !DILocation(line: 953, column: 14, scope: !5752)
!5762 = !DILocation(line: 954, column: 5, scope: !5752)
!5763 = !DILocation(line: 957, column: 14, scope: !5764)
!5764 = distinct !DILexicalBlock(scope: !5748, file: !1, line: 956, column: 5)
!5765 = !DILocation(line: 960, column: 12, scope: !5766)
!5766 = distinct !DILexicalBlock(scope: !5764, file: !1, line: 960, column: 11)
!5767 = !DILocation(line: 960, column: 11, scope: !5764)
!5768 = !DILocation(line: 962, column: 12, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5766, file: !1, line: 961, column: 2)
!5770 = !DILocation(line: 964, column: 17, scope: !5769)
!5771 = !DILocation(line: 966, column: 2, scope: !5769)
!5772 = !DILocation(line: 968, column: 14, scope: !5764)
!5773 = !DILocation(line: 969, column: 14, scope: !5764)
!5774 = !DILocation(line: 866, column: 8, scope: !5679)
!5775 = !DILocation(line: 0, scope: !5748)
!5776 = !DILocation(line: 973, column: 8, scope: !5777)
!5777 = distinct !DILexicalBlock(scope: !5679, file: !1, line: 973, column: 7)
!5778 = !DILocation(line: 973, column: 7, scope: !5679)
!5779 = !DILocation(line: 974, column: 26, scope: !5777)
!5780 = !DILocation(line: 974, column: 24, scope: !5777)
!5781 = !DILocation(line: 974, column: 5, scope: !5777)
!5782 = !DILocation(line: 976, column: 7, scope: !5679)
!5783 = !DILocation(line: 978, column: 13, scope: !5784)
!5784 = distinct !DILexicalBlock(scope: !5785, file: !1, line: 977, column: 5)
!5785 = distinct !DILexicalBlock(scope: !5679, file: !1, line: 976, column: 7)
!5786 = !DILocation(line: 979, column: 28, scope: !5784)
!5787 = !DILocation(line: 979, column: 26, scope: !5784)
!5788 = !DILocation(line: 981, column: 5, scope: !5784)
!5789 = !DILocation(line: 982, column: 1, scope: !5679)
!5790 = distinct !DISubprogram(name: "bounds_add", scope: !1, file: !1, line: 456, type: !5791, scopeLine: 457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5793)
!5791 = !DISubroutineType(types: !5792)
!5792 = !{null, !4637, !525, !476}
!5793 = !{!5794, !5795, !5796, !5797, !5798}
!5794 = !DILocalVariable(name: "bnds", arg: 1, scope: !5790, file: !1, line: 456, type: !4637)
!5795 = !DILocalVariable(name: "delta", arg: 2, scope: !5790, file: !1, line: 456, type: !525)
!5796 = !DILocalVariable(name: "type", arg: 3, scope: !5790, file: !1, line: 456, type: !476)
!5797 = !DILocalVariable(name: "mdelta", scope: !5790, file: !1, line: 458, type: !2898)
!5798 = !DILocalVariable(name: "max", scope: !5790, file: !1, line: 458, type: !2898)
!5799 = !DILocation(line: 0, scope: !5790)
!5800 = !DILocation(line: 458, column: 3, scope: !5790)
!5801 = !DILocation(line: 458, column: 9, scope: !5790)
!5802 = !DILocation(line: 458, column: 17, scope: !5790)
!5803 = !DILocation(line: 460, column: 13, scope: !5790)
!5804 = !DILocation(line: 460, column: 3, scope: !5790)
!5805 = !DILocation(line: 461, column: 3, scope: !5790)
!5806 = !DILocation(line: 463, column: 13, scope: !5790)
!5807 = !DILocation(line: 463, column: 3, scope: !5790)
!5808 = !DILocation(line: 464, column: 45, scope: !5790)
!5809 = !DILocation(line: 464, column: 28, scope: !5790)
!5810 = !DILocation(line: 464, column: 3, scope: !5790)
!5811 = !DILocation(line: 466, column: 12, scope: !5790)
!5812 = !DILocation(line: 466, column: 3, scope: !5790)
!5813 = !DILocation(line: 467, column: 12, scope: !5790)
!5814 = !DILocation(line: 467, column: 3, scope: !5790)
!5815 = !DILocation(line: 469, column: 7, scope: !5816)
!5816 = distinct !DILexicalBlock(scope: !5790, file: !1, line: 469, column: 7)
!5817 = !DILocation(line: 469, column: 31, scope: !5816)
!5818 = !DILocation(line: 469, column: 7, scope: !5790)
!5819 = !DILocation(line: 470, column: 5, scope: !5816)
!5820 = !DILocation(line: 472, column: 3, scope: !5790)
!5821 = !DILocation(line: 473, column: 7, scope: !5822)
!5822 = distinct !DILexicalBlock(scope: !5790, file: !1, line: 473, column: 7)
!5823 = !DILocation(line: 473, column: 34, scope: !5822)
!5824 = !DILocation(line: 473, column: 7, scope: !5790)
!5825 = !DILocation(line: 474, column: 5, scope: !5822)
!5826 = !DILocation(line: 476, column: 3, scope: !5790)
!5827 = !DILocation(line: 477, column: 3, scope: !5790)
!5828 = !DILocation(line: 478, column: 1, scope: !5790)
!5829 = distinct !DISubprogram(name: "instantiate_parameters", scope: !5830, file: !5830, line: 57, type: !3126, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5831)
!5830 = !DIFile(filename: "./tree-scalar-evolution.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!5831 = !{!5832, !5833}
!5832 = !DILocalVariable(name: "loop", arg: 1, scope: !5829, file: !5830, line: 57, type: !1015)
!5833 = !DILocalVariable(name: "chrec", arg: 2, scope: !5829, file: !5830, line: 57, type: !476)
!5834 = !DILocation(line: 0, scope: !5829)
!5835 = !DILocation(line: 59, column: 28, scope: !5829)
!5836 = !DILocation(line: 59, column: 10, scope: !5829)
!5837 = !DILocation(line: 59, column: 3, scope: !5829)
!5838 = distinct !DISubprogram(name: "block_before_loop", scope: !5830, file: !5830, line: 46, type: !5839, scopeLine: 47, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5841)
!5839 = !DISubroutineType(types: !5840)
!5840 = !{!1286, !1042}
!5841 = !{!5842, !5843}
!5842 = !DILocalVariable(name: "loop", arg: 1, scope: !5838, file: !5830, line: 46, type: !1042)
!5843 = !DILocalVariable(name: "preheader", scope: !5838, file: !5830, line: 48, type: !780)
!5844 = !DILocation(line: 0, scope: !5838)
!5845 = !DILocation(line: 48, column: 20, scope: !5838)
!5846 = !DILocation(line: 49, column: 11, scope: !5838)
!5847 = !DILocation(line: 49, column: 34, scope: !5838)
!5848 = !DILocation(line: 49, column: 40, scope: !5838)
!5849 = !DILocation(line: 49, column: 3, scope: !5838)
!5850 = distinct !DISubprogram(name: "tree_simplify_using_condition", scope: !1, file: !1, line: 1622, type: !3627, scopeLine: 1623, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5851)
!5851 = !{!5852, !5853}
!5852 = !DILocalVariable(name: "cond", arg: 1, scope: !5850, file: !1, line: 1622, type: !476)
!5853 = !DILocalVariable(name: "expr", arg: 2, scope: !5850, file: !1, line: 1622, type: !476)
!5854 = !DILocation(line: 0, scope: !5850)
!5855 = !DILocation(line: 1624, column: 10, scope: !5850)
!5856 = !DILocation(line: 1626, column: 10, scope: !5850)
!5857 = !DILocation(line: 1626, column: 3, scope: !5850)
!5858 = distinct !DISubprogram(name: "tree_simplify_using_condition_1", scope: !1, file: !1, line: 1510, type: !3627, scopeLine: 1511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5859)
!5859 = !{!5860, !5861, !5862, !5863, !5864, !5865, !5866, !5867, !5868, !5869}
!5860 = !DILocalVariable(name: "cond", arg: 1, scope: !5858, file: !1, line: 1510, type: !476)
!5861 = !DILocalVariable(name: "expr", arg: 2, scope: !5858, file: !1, line: 1510, type: !476)
!5862 = !DILocalVariable(name: "changed", scope: !5858, file: !1, line: 1512, type: !468)
!5863 = !DILocalVariable(name: "e", scope: !5858, file: !1, line: 1513, type: !476)
!5864 = !DILocalVariable(name: "te", scope: !5858, file: !1, line: 1513, type: !476)
!5865 = !DILocalVariable(name: "e0", scope: !5858, file: !1, line: 1513, type: !476)
!5866 = !DILocalVariable(name: "e1", scope: !5858, file: !1, line: 1513, type: !476)
!5867 = !DILocalVariable(name: "e2", scope: !5858, file: !1, line: 1513, type: !476)
!5868 = !DILocalVariable(name: "notcond", scope: !5858, file: !1, line: 1513, type: !476)
!5869 = !DILocalVariable(name: "code", scope: !5858, file: !1, line: 1514, type: !132)
!5870 = !DILocation(line: 0, scope: !5858)
!5871 = !DILocation(line: 1514, column: 25, scope: !5858)
!5872 = !DILocation(line: 1516, column: 7, scope: !5858)
!5873 = !DILocation(line: 1525, column: 51, scope: !5874)
!5874 = distinct !DILexicalBlock(scope: !5875, file: !1, line: 1522, column: 5)
!5875 = distinct !DILexicalBlock(scope: !5858, file: !1, line: 1519, column: 7)
!5876 = !DILocation(line: 1525, column: 12, scope: !5874)
!5877 = !DILocation(line: 1526, column: 11, scope: !5878)
!5878 = distinct !DILexicalBlock(scope: !5874, file: !1, line: 1526, column: 11)
!5879 = !DILocation(line: 1526, column: 34, scope: !5878)
!5880 = !DILocation(line: 1529, column: 51, scope: !5874)
!5881 = !DILocation(line: 1529, column: 12, scope: !5874)
!5882 = !DILocation(line: 1530, column: 11, scope: !5883)
!5883 = distinct !DILexicalBlock(scope: !5874, file: !1, line: 1530, column: 11)
!5884 = !DILocation(line: 1530, column: 34, scope: !5883)
!5885 = !DILocation(line: 1530, column: 11, scope: !5874)
!5886 = !DILocation(line: 1533, column: 16, scope: !5887)
!5887 = distinct !DILexicalBlock(scope: !5874, file: !1, line: 1533, column: 11)
!5888 = !DILocation(line: 1533, column: 11, scope: !5874)
!5889 = !DILocation(line: 1535, column: 48, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !5887, file: !1, line: 1534, column: 2)
!5891 = !DILocation(line: 1535, column: 9, scope: !5890)
!5892 = !DILocation(line: 1536, column: 8, scope: !5893)
!5893 = distinct !DILexicalBlock(scope: !5890, file: !1, line: 1536, column: 8)
!5894 = !DILocation(line: 1536, column: 31, scope: !5893)
!5895 = !DILocation(line: 1536, column: 8, scope: !5890)
!5896 = !DILocation(line: 1538, column: 2, scope: !5890)
!5897 = !DILocation(line: 0, scope: !5887)
!5898 = !DILocation(line: 1542, column: 11, scope: !5874)
!5899 = !DILocation(line: 0, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5901, file: !1, line: 1544, column: 8)
!5901 = distinct !DILexicalBlock(scope: !5902, file: !1, line: 1543, column: 2)
!5902 = distinct !DILexicalBlock(scope: !5874, file: !1, line: 1542, column: 11)
!5903 = !DILocation(line: 1544, column: 8, scope: !5901)
!5904 = !DILocation(line: 1545, column: 13, scope: !5900)
!5905 = !DILocation(line: 1545, column: 6, scope: !5900)
!5906 = !DILocation(line: 1547, column: 13, scope: !5900)
!5907 = !DILocation(line: 1556, column: 7, scope: !5908)
!5908 = distinct !DILexicalBlock(scope: !5858, file: !1, line: 1556, column: 7)
!5909 = !DILocation(line: 1556, column: 24, scope: !5908)
!5910 = !DILocation(line: 1556, column: 7, scope: !5858)
!5911 = !DILocation(line: 1558, column: 12, scope: !5912)
!5912 = distinct !DILexicalBlock(scope: !5908, file: !1, line: 1557, column: 5)
!5913 = !DILocation(line: 1559, column: 12, scope: !5912)
!5914 = !DILocation(line: 1563, column: 11, scope: !5912)
!5915 = !DILocation(line: 1564, column: 11, scope: !5916)
!5916 = distinct !DILexicalBlock(scope: !5912, file: !1, line: 1564, column: 11)
!5917 = !DILocation(line: 1564, column: 29, scope: !5916)
!5918 = !DILocation(line: 1564, column: 32, scope: !5916)
!5919 = !DILocation(line: 1564, column: 11, scope: !5912)
!5920 = !DILocation(line: 1567, column: 11, scope: !5912)
!5921 = !DILocation(line: 1568, column: 11, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5912, file: !1, line: 1568, column: 11)
!5923 = !DILocation(line: 1568, column: 29, scope: !5922)
!5924 = !DILocation(line: 1568, column: 32, scope: !5922)
!5925 = !DILocation(line: 1568, column: 11, scope: !5912)
!5926 = !DILocation(line: 1571, column: 7, scope: !5927)
!5927 = distinct !DILexicalBlock(scope: !5858, file: !1, line: 1571, column: 7)
!5928 = !DILocation(line: 1571, column: 24, scope: !5927)
!5929 = !DILocation(line: 1571, column: 7, scope: !5858)
!5930 = !DILocation(line: 1573, column: 12, scope: !5931)
!5931 = distinct !DILexicalBlock(scope: !5927, file: !1, line: 1572, column: 5)
!5932 = !DILocation(line: 1574, column: 12, scope: !5931)
!5933 = !DILocation(line: 1577, column: 11, scope: !5931)
!5934 = !DILocation(line: 1578, column: 11, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5931, file: !1, line: 1578, column: 11)
!5936 = !DILocation(line: 1578, column: 11, scope: !5931)
!5937 = !DILocation(line: 1580, column: 11, scope: !5931)
!5938 = !DILocation(line: 1581, column: 11, scope: !5939)
!5939 = distinct !DILexicalBlock(scope: !5931, file: !1, line: 1581, column: 11)
!5940 = !DILocation(line: 1581, column: 11, scope: !5931)
!5941 = !DILocation(line: 1584, column: 7, scope: !5942)
!5942 = distinct !DILexicalBlock(scope: !5858, file: !1, line: 1584, column: 7)
!5943 = !DILocation(line: 1584, column: 24, scope: !5942)
!5944 = !DILocation(line: 1584, column: 7, scope: !5858)
!5945 = !DILocation(line: 1586, column: 12, scope: !5946)
!5946 = distinct !DILexicalBlock(scope: !5942, file: !1, line: 1585, column: 5)
!5947 = !DILocation(line: 1587, column: 12, scope: !5946)
!5948 = !DILocation(line: 1590, column: 11, scope: !5946)
!5949 = !DILocation(line: 1591, column: 11, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5946, file: !1, line: 1591, column: 11)
!5951 = !DILocation(line: 1591, column: 11, scope: !5946)
!5952 = !DILocation(line: 1592, column: 9, scope: !5950)
!5953 = !DILocation(line: 1592, column: 2, scope: !5950)
!5954 = !DILocation(line: 1593, column: 11, scope: !5946)
!5955 = !DILocation(line: 1594, column: 11, scope: !5956)
!5956 = distinct !DILexicalBlock(scope: !5946, file: !1, line: 1594, column: 11)
!5957 = !DILocation(line: 1594, column: 11, scope: !5946)
!5958 = !DILocation(line: 1595, column: 9, scope: !5956)
!5959 = !DILocation(line: 1595, column: 2, scope: !5956)
!5960 = !DILocation(line: 1598, column: 8, scope: !5858)
!5961 = !DILocation(line: 1601, column: 13, scope: !5858)
!5962 = !DILocation(line: 1602, column: 7, scope: !5858)
!5963 = !DILocation(line: 1603, column: 7, scope: !5964)
!5964 = distinct !DILexicalBlock(scope: !5858, file: !1, line: 1603, column: 7)
!5965 = !DILocation(line: 1603, column: 9, scope: !5964)
!5966 = !DILocation(line: 1603, column: 12, scope: !5964)
!5967 = !DILocation(line: 1603, column: 7, scope: !5858)
!5968 = !DILocation(line: 1607, column: 7, scope: !5858)
!5969 = !DILocation(line: 1608, column: 7, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5858, file: !1, line: 1608, column: 7)
!5971 = !DILocation(line: 1608, column: 9, scope: !5970)
!5972 = !DILocation(line: 1608, column: 12, scope: !5970)
!5973 = !DILocation(line: 1608, column: 7, scope: !5858)
!5974 = !DILocation(line: 1611, column: 3, scope: !5858)
!5975 = !DILocation(line: 1612, column: 1, scope: !5858)
!5976 = distinct !DISubprogram(name: "chain_of_csts_start", scope: !1, file: !1, line: 2020, type: !3597, scopeLine: 2021, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !5977)
!5977 = !{!5978, !5979, !5980, !5981, !5982, !5983}
!5978 = !DILocalVariable(name: "loop", arg: 1, scope: !5976, file: !1, line: 2020, type: !1015)
!5979 = !DILocalVariable(name: "x", arg: 2, scope: !5976, file: !1, line: 2020, type: !476)
!5980 = !DILocalVariable(name: "stmt", scope: !5976, file: !1, line: 2022, type: !800)
!5981 = !DILocalVariable(name: "use", scope: !5976, file: !1, line: 2023, type: !476)
!5982 = !DILocalVariable(name: "bb", scope: !5976, file: !1, line: 2024, type: !1286)
!5983 = !DILocalVariable(name: "code", scope: !5976, file: !1, line: 2025, type: !132)
!5984 = !DILocation(line: 2053, column: 10, scope: !5976)
!5985 = !DILocation(line: 0, scope: !5976)
!5986 = !DILocation(line: 2022, column: 17, scope: !5976)
!5987 = !DILocation(line: 2024, column: 20, scope: !5976)
!5988 = !DILocation(line: 2027, column: 8, scope: !5989)
!5989 = distinct !DILexicalBlock(scope: !5976, file: !1, line: 2027, column: 7)
!5990 = !DILocation(line: 2028, column: 7, scope: !5989)
!5991 = !DILocation(line: 2028, column: 11, scope: !5989)
!5992 = !DILocation(line: 2027, column: 7, scope: !5976)
!5993 = !DILocation(line: 2031, column: 7, scope: !5994)
!5994 = distinct !DILexicalBlock(scope: !5976, file: !1, line: 2031, column: 7)
!5995 = !DILocation(line: 2031, column: 26, scope: !5994)
!5996 = !DILocation(line: 2031, column: 7, scope: !5976)
!5997 = !DILocation(line: 2033, column: 23, scope: !5998)
!5998 = distinct !DILexicalBlock(scope: !5999, file: !1, line: 2033, column: 11)
!5999 = distinct !DILexicalBlock(scope: !5994, file: !1, line: 2032, column: 5)
!6000 = !DILocation(line: 2033, column: 14, scope: !5998)
!6001 = !DILocation(line: 0, scope: !5999)
!6002 = !DILocation(line: 2039, column: 7, scope: !6003)
!6003 = distinct !DILexicalBlock(scope: !5976, file: !1, line: 2039, column: 7)
!6004 = !DILocation(line: 2039, column: 26, scope: !6003)
!6005 = !DILocation(line: 2039, column: 7, scope: !5976)
!6006 = !DILocation(line: 2042, column: 10, scope: !5976)
!6007 = !DILocation(line: 2043, column: 7, scope: !6008)
!6008 = distinct !DILexicalBlock(scope: !5976, file: !1, line: 2043, column: 7)
!6009 = !DILocation(line: 2044, column: 7, scope: !6008)
!6010 = !DILocation(line: 2044, column: 10, scope: !6008)
!6011 = !DILocation(line: 2044, column: 33, scope: !6008)
!6012 = !DILocation(line: 2045, column: 7, scope: !6008)
!6013 = !DILocation(line: 2045, column: 16, scope: !6008)
!6014 = !DILocation(line: 2046, column: 4, scope: !6008)
!6015 = !DILocation(line: 2046, column: 33, scope: !6008)
!6016 = !DILocation(line: 2046, column: 8, scope: !6008)
!6017 = !DILocation(line: 2043, column: 7, scope: !5976)
!6018 = !DILocation(line: 2049, column: 9, scope: !5976)
!6019 = !DILocation(line: 2050, column: 11, scope: !6020)
!6020 = distinct !DILexicalBlock(scope: !5976, file: !1, line: 2050, column: 7)
!6021 = !DILocation(line: 2050, column: 7, scope: !5976)
!6022 = !DILocation(line: 2054, column: 1, scope: !5976)
!6023 = distinct !DISubprogram(name: "gimple_references_memory_p", scope: !389, file: !389, line: 1499, type: !6024, scopeLine: 1500, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6026)
!6024 = !DISubroutineType(types: !6025)
!6025 = !{!468, !800}
!6026 = !{!6027}
!6027 = !DILocalVariable(name: "stmt", arg: 1, scope: !6023, file: !389, line: 1499, type: !800)
!6028 = !DILocation(line: 0, scope: !6023)
!6029 = !DILocation(line: 1501, column: 10, scope: !6023)
!6030 = !DILocation(line: 1501, column: 36, scope: !6023)
!6031 = !DILocation(line: 1501, column: 39, scope: !6023)
!6032 = !DILocation(line: 1501, column: 3, scope: !6023)
!6033 = distinct !DISubprogram(name: "single_ssa_tree_operand", scope: !2482, file: !2482, line: 803, type: !6034, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6036)
!6034 = !DISubroutineType(types: !6035)
!6035 = !{!476, !800, !469}
!6036 = !{!6037, !6038, !6039, !6040}
!6037 = !DILocalVariable(name: "stmt", arg: 1, scope: !6033, file: !2482, line: 803, type: !800)
!6038 = !DILocalVariable(name: "flags", arg: 2, scope: !6033, file: !2482, line: 803, type: !469)
!6039 = !DILocalVariable(name: "var", scope: !6033, file: !2482, line: 805, type: !476)
!6040 = !DILocalVariable(name: "iter", scope: !6033, file: !2482, line: 806, type: !6041)
!6041 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !460, line: 140, baseType: !6042)
!6042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !460, line: 131, size: 320, elements: !6043)
!6043 = !{!6044, !6045, !6046, !6048, !6050, !6051, !6052}
!6044 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6042, file: !460, line: 133, baseType: !468, size: 8)
!6045 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6042, file: !460, line: 134, baseType: !459, size: 32, offset: 32)
!6046 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6042, file: !460, line: 135, baseType: !6047, size: 64, offset: 64)
!6047 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !460, line: 42, baseType: !829)
!6048 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6042, file: !460, line: 136, baseType: !6049, size: 64, offset: 128)
!6049 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !460, line: 50, baseType: !836)
!6050 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6042, file: !460, line: 137, baseType: !469, size: 32, offset: 192)
!6051 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6042, file: !460, line: 138, baseType: !469, size: 32, offset: 224)
!6052 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6042, file: !460, line: 139, baseType: !800, size: 64, offset: 256)
!6053 = !DILocation(line: 0, scope: !6033)
!6054 = !DILocation(line: 806, column: 3, scope: !6033)
!6055 = !DILocation(line: 808, column: 9, scope: !6033)
!6056 = !DILocation(line: 809, column: 7, scope: !6057)
!6057 = distinct !DILexicalBlock(scope: !6033, file: !2482, line: 809, column: 7)
!6058 = !DILocation(line: 809, column: 7, scope: !6033)
!6059 = !DILocation(line: 811, column: 3, scope: !6033)
!6060 = !DILocation(line: 812, column: 7, scope: !6061)
!6061 = distinct !DILexicalBlock(scope: !6033, file: !2482, line: 812, column: 7)
!6062 = !DILocation(line: 815, column: 1, scope: !6033)
!6063 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !389, file: !389, line: 1283, type: !4537, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6064)
!6064 = !{!6065}
!6065 = !DILocalVariable(name: "g", arg: 1, scope: !6063, file: !389, line: 1283, type: !2467)
!6066 = !DILocation(line: 0, scope: !6063)
!6067 = !DILocation(line: 1285, column: 10, scope: !6063)
!6068 = !DILocation(line: 1285, column: 26, scope: !6063)
!6069 = !DILocation(line: 1285, column: 43, scope: !6063)
!6070 = !DILocation(line: 1285, column: 46, scope: !6063)
!6071 = !DILocation(line: 1285, column: 62, scope: !6063)
!6072 = !DILocation(line: 1285, column: 3, scope: !6063)
!6073 = distinct !DISubprogram(name: "gimple_vuse", scope: !389, file: !389, line: 1365, type: !2525, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6074)
!6074 = !{!6075}
!6075 = !DILocalVariable(name: "g", arg: 1, scope: !6073, file: !389, line: 1365, type: !2467)
!6076 = !DILocation(line: 0, scope: !6073)
!6077 = !DILocation(line: 1367, column: 8, scope: !6078)
!6078 = distinct !DILexicalBlock(scope: !6073, file: !389, line: 1367, column: 7)
!6079 = !DILocation(line: 1367, column: 7, scope: !6073)
!6080 = !DILocation(line: 1369, column: 23, scope: !6073)
!6081 = !DILocation(line: 1369, column: 3, scope: !6073)
!6082 = !DILocation(line: 1370, column: 1, scope: !6073)
!6083 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !2482, file: !2482, line: 792, type: !6084, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6087)
!6084 = !DISubroutineType(types: !6085)
!6085 = !{!476, !6086, !800, !469}
!6086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6041, size: 64)
!6087 = !{!6088, !6089, !6090}
!6088 = !DILocalVariable(name: "ptr", arg: 1, scope: !6083, file: !2482, line: 792, type: !6086)
!6089 = !DILocalVariable(name: "stmt", arg: 2, scope: !6083, file: !2482, line: 792, type: !800)
!6090 = !DILocalVariable(name: "flags", arg: 3, scope: !6083, file: !2482, line: 792, type: !469)
!6091 = !DILocation(line: 0, scope: !6083)
!6092 = !DILocation(line: 794, column: 3, scope: !6083)
!6093 = !DILocation(line: 795, column: 8, scope: !6083)
!6094 = !DILocation(line: 795, column: 18, scope: !6083)
!6095 = !DILocation(line: 796, column: 10, scope: !6083)
!6096 = !DILocation(line: 796, column: 3, scope: !6083)
!6097 = distinct !DISubprogram(name: "op_iter_done", scope: !2482, file: !2482, line: 652, type: !6098, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6102)
!6098 = !DISubroutineType(types: !6099)
!6099 = !{!468, !6100}
!6100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6101, size: 64)
!6101 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6041)
!6102 = !{!6103}
!6103 = !DILocalVariable(name: "ptr", arg: 1, scope: !6097, file: !2482, line: 652, type: !6100)
!6104 = !DILocation(line: 0, scope: !6097)
!6105 = !DILocation(line: 654, column: 15, scope: !6097)
!6106 = !DILocation(line: 654, column: 3, scope: !6097)
!6107 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !2482, file: !2482, line: 699, type: !6108, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6110)
!6108 = !DISubroutineType(types: !6109)
!6109 = !{!476, !6086}
!6110 = !{!6111, !6112}
!6111 = !DILocalVariable(name: "ptr", arg: 1, scope: !6107, file: !2482, line: 699, type: !6086)
!6112 = !DILocalVariable(name: "val", scope: !6107, file: !2482, line: 701, type: !476)
!6113 = !DILocation(line: 0, scope: !6107)
!6114 = !DILocation(line: 705, column: 12, scope: !6115)
!6115 = distinct !DILexicalBlock(scope: !6107, file: !2482, line: 705, column: 7)
!6116 = !DILocation(line: 705, column: 7, scope: !6115)
!6117 = !DILocation(line: 705, column: 7, scope: !6107)
!6118 = !DILocation(line: 707, column: 13, scope: !6119)
!6119 = distinct !DILexicalBlock(scope: !6115, file: !2482, line: 706, column: 5)
!6120 = !DILocation(line: 708, column: 24, scope: !6119)
!6121 = !DILocation(line: 708, column: 30, scope: !6119)
!6122 = !DILocation(line: 708, column: 17, scope: !6119)
!6123 = !DILocation(line: 709, column: 7, scope: !6119)
!6124 = !DILocation(line: 711, column: 12, scope: !6125)
!6125 = distinct !DILexicalBlock(scope: !6107, file: !2482, line: 711, column: 7)
!6126 = !DILocation(line: 711, column: 7, scope: !6125)
!6127 = !DILocation(line: 711, column: 7, scope: !6107)
!6128 = !DILocation(line: 713, column: 13, scope: !6129)
!6129 = distinct !DILexicalBlock(scope: !6125, file: !2482, line: 712, column: 5)
!6130 = !DILocation(line: 714, column: 24, scope: !6129)
!6131 = !DILocation(line: 714, column: 30, scope: !6129)
!6132 = !DILocation(line: 714, column: 17, scope: !6129)
!6133 = !DILocation(line: 715, column: 7, scope: !6129)
!6134 = !DILocation(line: 718, column: 8, scope: !6107)
!6135 = !DILocation(line: 718, column: 13, scope: !6107)
!6136 = !DILocation(line: 719, column: 3, scope: !6107)
!6137 = !DILocation(line: 721, column: 1, scope: !6107)
!6138 = distinct !DISubprogram(name: "op_iter_init", scope: !2482, file: !2482, line: 742, type: !6139, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6141)
!6139 = !DISubroutineType(types: !6140)
!6140 = !{null, !6086, !800, !469}
!6141 = !{!6142, !6143, !6144}
!6142 = !DILocalVariable(name: "ptr", arg: 1, scope: !6138, file: !2482, line: 742, type: !6086)
!6143 = !DILocalVariable(name: "stmt", arg: 2, scope: !6138, file: !2482, line: 742, type: !800)
!6144 = !DILocalVariable(name: "flags", arg: 3, scope: !6138, file: !2482, line: 742, type: !469)
!6145 = !DILocation(line: 0, scope: !6138)
!6146 = !DILocation(line: 748, column: 8, scope: !6138)
!6147 = !DILocation(line: 748, column: 13, scope: !6138)
!6148 = !DILocation(line: 750, column: 7, scope: !6149)
!6149 = distinct !DILexicalBlock(scope: !6138, file: !2482, line: 749, column: 7)
!6150 = !DILocation(line: 751, column: 7, scope: !6149)
!6151 = !DILocation(line: 749, column: 7, scope: !6138)
!6152 = !DILocation(line: 752, column: 5, scope: !6149)
!6153 = !DILocation(line: 753, column: 15, scope: !6138)
!6154 = !DILocation(line: 753, column: 52, scope: !6138)
!6155 = !DILocation(line: 753, column: 8, scope: !6138)
!6156 = !DILocation(line: 753, column: 13, scope: !6138)
!6157 = !DILocation(line: 755, column: 7, scope: !6158)
!6158 = distinct !DILexicalBlock(scope: !6138, file: !2482, line: 754, column: 7)
!6159 = !DILocation(line: 755, column: 10, scope: !6158)
!6160 = !DILocation(line: 756, column: 7, scope: !6158)
!6161 = !DILocation(line: 756, column: 10, scope: !6158)
!6162 = !DILocation(line: 756, column: 29, scope: !6158)
!6163 = !DILocation(line: 754, column: 7, scope: !6138)
!6164 = !DILocation(line: 757, column: 22, scope: !6158)
!6165 = !DILocation(line: 757, column: 28, scope: !6158)
!6166 = !DILocation(line: 757, column: 15, scope: !6158)
!6167 = !DILocation(line: 757, column: 5, scope: !6158)
!6168 = !DILocation(line: 758, column: 8, scope: !6138)
!6169 = !DILocation(line: 758, column: 13, scope: !6138)
!6170 = !DILocation(line: 760, column: 8, scope: !6138)
!6171 = !DILocation(line: 760, column: 14, scope: !6138)
!6172 = !DILocation(line: 761, column: 8, scope: !6138)
!6173 = !DILocation(line: 761, column: 16, scope: !6138)
!6174 = !DILocation(line: 762, column: 8, scope: !6138)
!6175 = !DILocation(line: 762, column: 17, scope: !6138)
!6176 = !DILocation(line: 763, column: 1, scope: !6138)
!6177 = distinct !DISubprogram(name: "gimple_def_ops", scope: !389, file: !389, line: 1292, type: !6178, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6180)
!6178 = !DISubroutineType(types: !6179)
!6179 = !{!829, !2467}
!6180 = !{!6181}
!6181 = !DILocalVariable(name: "g", arg: 1, scope: !6177, file: !389, line: 1292, type: !2467)
!6182 = !DILocation(line: 0, scope: !6177)
!6183 = distinct !DISubprogram(name: "gimple_vdef", scope: !389, file: !389, line: 1375, type: !2525, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6184)
!6184 = !{!6185}
!6185 = !DILocalVariable(name: "g", arg: 1, scope: !6183, file: !389, line: 1375, type: !2467)
!6186 = !DILocation(line: 0, scope: !6183)
!6187 = !DILocation(line: 1377, column: 8, scope: !6188)
!6188 = distinct !DILexicalBlock(scope: !6183, file: !389, line: 1377, column: 7)
!6189 = !DILocation(line: 1377, column: 7, scope: !6183)
!6190 = !DILocation(line: 1379, column: 23, scope: !6183)
!6191 = !DILocation(line: 1379, column: 3, scope: !6183)
!6192 = !DILocation(line: 1380, column: 1, scope: !6183)
!6193 = distinct !DISubprogram(name: "gimple_use_ops", scope: !389, file: !389, line: 1313, type: !6194, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6196)
!6194 = !DISubroutineType(types: !6195)
!6195 = !{!836, !2467}
!6196 = !{!6197}
!6197 = !DILocalVariable(name: "g", arg: 1, scope: !6193, file: !389, line: 1313, type: !2467)
!6198 = !DILocation(line: 0, scope: !6193)
!6199 = !DILocation(line: 1315, column: 8, scope: !6200)
!6200 = distinct !DILexicalBlock(scope: !6193, file: !389, line: 1315, column: 7)
!6201 = !DILocation(line: 1315, column: 7, scope: !6193)
!6202 = !DILocation(line: 1317, column: 26, scope: !6193)
!6203 = !DILocation(line: 1317, column: 3, scope: !6193)
!6204 = !DILocation(line: 1318, column: 1, scope: !6193)
!6205 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !2482, file: !2482, line: 434, type: !6206, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6209)
!6206 = !DISubroutineType(types: !6207)
!6207 = !{!476, !6208}
!6208 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !460, line: 27, baseType: !834)
!6209 = !{!6210}
!6210 = !DILocalVariable(name: "def", arg: 1, scope: !6205, file: !2482, line: 434, type: !6208)
!6211 = !DILocation(line: 0, scope: !6205)
!6212 = !DILocation(line: 436, column: 10, scope: !6205)
!6213 = !DILocation(line: 436, column: 3, scope: !6205)
!6214 = distinct !DISubprogram(name: "is_gimple_assign", scope: !389, file: !389, line: 1677, type: !4537, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6215)
!6215 = !{!6216}
!6216 = !DILocalVariable(name: "gs", arg: 1, scope: !6214, file: !389, line: 1677, type: !2467)
!6217 = !DILocation(line: 0, scope: !6214)
!6218 = !DILocation(line: 1679, column: 10, scope: !6214)
!6219 = !DILocation(line: 1679, column: 27, scope: !6214)
!6220 = !DILocation(line: 1679, column: 3, scope: !6214)
!6221 = distinct !DISubprogram(name: "gimple_assign_rhs_class", scope: !389, file: !389, line: 1844, type: !6222, scopeLine: 1845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6224)
!6222 = !DISubroutineType(types: !6223)
!6223 = !{!453, !2467}
!6224 = !{!6225}
!6225 = !DILocalVariable(name: "gs", arg: 1, scope: !6221, file: !389, line: 1844, type: !2467)
!6226 = !DILocation(line: 0, scope: !6221)
!6227 = !DILocation(line: 1846, column: 32, scope: !6221)
!6228 = !DILocation(line: 1846, column: 10, scope: !6221)
!6229 = !DILocation(line: 1846, column: 3, scope: !6221)
!6230 = distinct !DISubprogram(name: "gimple_expr_type", scope: !389, file: !389, line: 4366, type: !2525, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6231)
!6231 = !{!6232, !6233, !6234}
!6232 = !DILocalVariable(name: "stmt", arg: 1, scope: !6230, file: !389, line: 4366, type: !2467)
!6233 = !DILocalVariable(name: "code", scope: !6230, file: !389, line: 4368, type: !388)
!6234 = !DILocalVariable(name: "type", scope: !6235, file: !389, line: 4372, type: !476)
!6235 = distinct !DILexicalBlock(scope: !6236, file: !389, line: 4371, column: 5)
!6236 = distinct !DILexicalBlock(scope: !6230, file: !389, line: 4370, column: 7)
!6237 = !DILocation(line: 0, scope: !6230)
!6238 = !DILocation(line: 4368, column: 27, scope: !6230)
!6239 = !DILocation(line: 4370, column: 29, scope: !6236)
!6240 = !DILocation(line: 4378, column: 9, scope: !6241)
!6241 = distinct !DILexicalBlock(scope: !6235, file: !389, line: 4377, column: 11)
!6242 = !DILocation(line: 0, scope: !6235)
!6243 = !DILocation(line: 4378, column: 2, scope: !6241)
!6244 = !DILocation(line: 4380, column: 10, scope: !6241)
!6245 = !DILocation(line: 4380, column: 2, scope: !6241)
!6246 = !DILocation(line: 4383, column: 13, scope: !6247)
!6247 = distinct !DILexicalBlock(scope: !6241, file: !389, line: 4381, column: 4)
!6248 = !DILocation(line: 4384, column: 6, scope: !6247)
!6249 = !DILocation(line: 4388, column: 13, scope: !6247)
!6250 = !DILocation(line: 4389, column: 6, scope: !6247)
!6251 = !DILocation(line: 4394, column: 12, scope: !6252)
!6252 = distinct !DILexicalBlock(scope: !6236, file: !389, line: 4393, column: 12)
!6253 = !DILocation(line: 4394, column: 5, scope: !6252)
!6254 = !DILocation(line: 4396, column: 12, scope: !6252)
!6255 = !DILocation(line: 4396, column: 5, scope: !6252)
!6256 = !DILocation(line: 0, scope: !6236)
!6257 = !DILocation(line: 4397, column: 1, scope: !6230)
!6258 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !389, file: !389, line: 1966, type: !2525, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6259)
!6259 = !{!6260, !6261, !6262}
!6260 = !DILocalVariable(name: "gs", arg: 1, scope: !6258, file: !389, line: 1966, type: !2467)
!6261 = !DILocalVariable(name: "fn", scope: !6258, file: !389, line: 1968, type: !476)
!6262 = !DILocalVariable(name: "type", scope: !6258, file: !389, line: 1969, type: !476)
!6263 = !DILocation(line: 0, scope: !6258)
!6264 = !DILocation(line: 1968, column: 13, scope: !6258)
!6265 = !DILocation(line: 1969, column: 15, scope: !6258)
!6266 = !DILocation(line: 1972, column: 10, scope: !6258)
!6267 = !DILocation(line: 1976, column: 10, scope: !6258)
!6268 = !DILocation(line: 1976, column: 3, scope: !6258)
!6269 = distinct !DISubprogram(name: "gimple_call_fn", scope: !389, file: !389, line: 1911, type: !2525, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6270)
!6270 = !{!6271}
!6271 = !DILocalVariable(name: "gs", arg: 1, scope: !6269, file: !389, line: 1911, type: !2467)
!6272 = !DILocation(line: 0, scope: !6269)
!6273 = !DILocation(line: 1914, column: 10, scope: !6269)
!6274 = !DILocation(line: 1914, column: 3, scope: !6269)
!6275 = distinct !DISubprogram(name: "infer_loop_bounds_from_array", scope: !1, file: !1, line: 2769, type: !6276, scopeLine: 2770, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6278)
!6276 = !DISubroutineType(types: !6277)
!6277 = !{null, !1015, !800, !468}
!6278 = !{!6279, !6280, !6281, !6282, !6285, !6286, !6289, !6290, !6291}
!6279 = !DILocalVariable(name: "loop", arg: 1, scope: !6275, file: !1, line: 2769, type: !1015)
!6280 = !DILocalVariable(name: "stmt", arg: 2, scope: !6275, file: !1, line: 2769, type: !800)
!6281 = !DILocalVariable(name: "reliable", arg: 3, scope: !6275, file: !1, line: 2769, type: !468)
!6282 = !DILocalVariable(name: "op0", scope: !6283, file: !1, line: 2773, type: !476)
!6283 = distinct !DILexicalBlock(scope: !6284, file: !1, line: 2772, column: 5)
!6284 = distinct !DILexicalBlock(scope: !6275, file: !1, line: 2771, column: 7)
!6285 = !DILocalVariable(name: "op1", scope: !6283, file: !1, line: 2774, type: !476)
!6286 = !DILocalVariable(name: "arg", scope: !6287, file: !1, line: 2786, type: !476)
!6287 = distinct !DILexicalBlock(scope: !6288, file: !1, line: 2785, column: 5)
!6288 = distinct !DILexicalBlock(scope: !6284, file: !1, line: 2784, column: 12)
!6289 = !DILocalVariable(name: "lhs", scope: !6287, file: !1, line: 2786, type: !476)
!6290 = !DILocalVariable(name: "i", scope: !6287, file: !1, line: 2787, type: !5)
!6291 = !DILocalVariable(name: "n", scope: !6287, file: !1, line: 2787, type: !5)
!6292 = !DILocation(line: 0, scope: !6275)
!6293 = !DILocation(line: 2771, column: 7, scope: !6284)
!6294 = !DILocation(line: 2771, column: 7, scope: !6275)
!6295 = !DILocation(line: 2773, column: 18, scope: !6283)
!6296 = !DILocation(line: 0, scope: !6283)
!6297 = !DILocation(line: 2774, column: 18, scope: !6283)
!6298 = !DILocation(line: 2778, column: 11, scope: !6299)
!6299 = distinct !DILexicalBlock(scope: !6283, file: !1, line: 2778, column: 11)
!6300 = !DILocation(line: 2778, column: 11, scope: !6283)
!6301 = !DILocation(line: 2779, column: 2, scope: !6299)
!6302 = !DILocation(line: 2781, column: 11, scope: !6303)
!6303 = distinct !DILexicalBlock(scope: !6283, file: !1, line: 2781, column: 11)
!6304 = !DILocation(line: 2781, column: 11, scope: !6283)
!6305 = !DILocation(line: 2782, column: 2, scope: !6303)
!6306 = !DILocation(line: 2784, column: 12, scope: !6288)
!6307 = !DILocation(line: 2784, column: 12, scope: !6284)
!6308 = !DILocation(line: 2787, column: 23, scope: !6287)
!6309 = !DILocation(line: 0, scope: !6287)
!6310 = !DILocation(line: 2789, column: 13, scope: !6287)
!6311 = !DILocation(line: 2790, column: 11, scope: !6312)
!6312 = distinct !DILexicalBlock(scope: !6287, file: !1, line: 2790, column: 11)
!6313 = !DILocation(line: 2790, column: 15, scope: !6312)
!6314 = !DILocation(line: 2790, column: 18, scope: !6312)
!6315 = !DILocation(line: 2790, column: 11, scope: !6287)
!6316 = !DILocation(line: 2791, column: 2, scope: !6312)
!6317 = !DILocation(line: 2793, column: 12, scope: !6318)
!6318 = distinct !DILexicalBlock(scope: !6287, file: !1, line: 2793, column: 7)
!6319 = !DILocation(line: 0, scope: !6318)
!6320 = !DILocation(line: 2793, column: 21, scope: !6321)
!6321 = distinct !DILexicalBlock(scope: !6318, file: !1, line: 2793, column: 7)
!6322 = !DILocation(line: 2793, column: 7, scope: !6318)
!6323 = !DILocation(line: 2795, column: 10, scope: !6324)
!6324 = distinct !DILexicalBlock(scope: !6321, file: !1, line: 2794, column: 2)
!6325 = !DILocation(line: 2796, column: 8, scope: !6326)
!6326 = distinct !DILexicalBlock(scope: !6324, file: !1, line: 2796, column: 8)
!6327 = !DILocation(line: 2796, column: 8, scope: !6324)
!6328 = !DILocation(line: 2797, column: 6, scope: !6326)
!6329 = !DILocation(line: 2793, column: 27, scope: !6321)
!6330 = !DILocation(line: 2793, column: 7, scope: !6321)
!6331 = distinct !{!6331, !6322, !6332}
!6332 = !DILocation(line: 2798, column: 2, scope: !6318)
!6333 = !DILocation(line: 2800, column: 1, scope: !6275)
!6334 = distinct !DISubprogram(name: "infer_loop_bounds_from_signedness", scope: !1, file: !1, line: 2806, type: !6335, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6337)
!6335 = !DISubroutineType(types: !6336)
!6336 = !{null, !1015, !800}
!6337 = !{!6338, !6339, !6340, !6341, !6342, !6343, !6344, !6345, !6346}
!6338 = !DILocalVariable(name: "loop", arg: 1, scope: !6334, file: !1, line: 2806, type: !1015)
!6339 = !DILocalVariable(name: "stmt", arg: 2, scope: !6334, file: !1, line: 2806, type: !800)
!6340 = !DILocalVariable(name: "def", scope: !6334, file: !1, line: 2808, type: !476)
!6341 = !DILocalVariable(name: "base", scope: !6334, file: !1, line: 2808, type: !476)
!6342 = !DILocalVariable(name: "step", scope: !6334, file: !1, line: 2808, type: !476)
!6343 = !DILocalVariable(name: "scev", scope: !6334, file: !1, line: 2808, type: !476)
!6344 = !DILocalVariable(name: "type", scope: !6334, file: !1, line: 2808, type: !476)
!6345 = !DILocalVariable(name: "low", scope: !6334, file: !1, line: 2808, type: !476)
!6346 = !DILocalVariable(name: "high", scope: !6334, file: !1, line: 2808, type: !476)
!6347 = !DILocation(line: 0, scope: !6334)
!6348 = !DILocation(line: 2810, column: 7, scope: !6349)
!6349 = distinct !DILexicalBlock(scope: !6334, file: !1, line: 2810, column: 7)
!6350 = !DILocation(line: 2810, column: 26, scope: !6349)
!6351 = !DILocation(line: 2810, column: 7, scope: !6334)
!6352 = !DILocation(line: 2813, column: 9, scope: !6334)
!6353 = !DILocation(line: 2815, column: 7, scope: !6354)
!6354 = distinct !DILexicalBlock(scope: !6334, file: !1, line: 2815, column: 7)
!6355 = !DILocation(line: 2815, column: 23, scope: !6354)
!6356 = !DILocation(line: 2815, column: 7, scope: !6334)
!6357 = !DILocation(line: 2818, column: 10, scope: !6334)
!6358 = !DILocation(line: 2819, column: 8, scope: !6359)
!6359 = distinct !DILexicalBlock(scope: !6334, file: !1, line: 2819, column: 7)
!6360 = !DILocation(line: 2820, column: 7, scope: !6359)
!6361 = !DILocation(line: 2820, column: 11, scope: !6359)
!6362 = !DILocation(line: 2823, column: 40, scope: !6334)
!6363 = !DILocation(line: 2823, column: 10, scope: !6334)
!6364 = !DILocation(line: 2824, column: 7, scope: !6365)
!6365 = distinct !DILexicalBlock(scope: !6334, file: !1, line: 2824, column: 7)
!6366 = !DILocation(line: 2824, column: 7, scope: !6334)
!6367 = !DILocation(line: 2827, column: 53, scope: !6334)
!6368 = !DILocation(line: 2827, column: 10, scope: !6334)
!6369 = !DILocation(line: 2828, column: 50, scope: !6334)
!6370 = !DILocation(line: 2828, column: 10, scope: !6334)
!6371 = !DILocation(line: 2830, column: 8, scope: !6372)
!6372 = distinct !DILexicalBlock(scope: !6334, file: !1, line: 2830, column: 7)
!6373 = !DILocation(line: 2830, column: 17, scope: !6372)
!6374 = !DILocation(line: 2830, column: 13, scope: !6372)
!6375 = !DILocation(line: 2831, column: 10, scope: !6372)
!6376 = !DILocation(line: 2831, column: 27, scope: !6372)
!6377 = !DILocation(line: 2832, column: 7, scope: !6372)
!6378 = !DILocation(line: 2832, column: 10, scope: !6372)
!6379 = !DILocation(line: 2833, column: 7, scope: !6372)
!6380 = !DILocation(line: 2833, column: 62, scope: !6372)
!6381 = !DILocation(line: 2833, column: 10, scope: !6372)
!6382 = !DILocation(line: 2830, column: 7, scope: !6334)
!6383 = !DILocation(line: 2836, column: 9, scope: !6334)
!6384 = !DILocation(line: 2837, column: 10, scope: !6334)
!6385 = !DILocation(line: 2839, column: 3, scope: !6334)
!6386 = !DILocation(line: 2840, column: 1, scope: !6334)
!6387 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !389, file: !389, line: 1694, type: !2525, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6388)
!6388 = !{!6389}
!6389 = !DILocalVariable(name: "gs", arg: 1, scope: !6387, file: !389, line: 1694, type: !2467)
!6390 = !DILocation(line: 0, scope: !6387)
!6391 = !DILocation(line: 1697, column: 10, scope: !6387)
!6392 = !DILocation(line: 1697, column: 3, scope: !6387)
!6393 = distinct !DISubprogram(name: "infer_loop_bounds_from_ref", scope: !1, file: !1, line: 2753, type: !6394, scopeLine: 2755, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6396)
!6394 = !DISubroutineType(types: !6395)
!6395 = !{null, !1015, !800, !476, !468}
!6396 = !{!6397, !6398, !6399, !6400, !6401}
!6397 = !DILocalVariable(name: "loop", arg: 1, scope: !6393, file: !1, line: 2753, type: !1015)
!6398 = !DILocalVariable(name: "stmt", arg: 2, scope: !6393, file: !1, line: 2753, type: !800)
!6399 = !DILocalVariable(name: "ref", arg: 3, scope: !6393, file: !1, line: 2753, type: !476)
!6400 = !DILocalVariable(name: "reliable", arg: 4, scope: !6393, file: !1, line: 2754, type: !468)
!6401 = !DILocalVariable(name: "data", scope: !6393, file: !1, line: 2756, type: !1865)
!6402 = !DILocation(line: 0, scope: !6393)
!6403 = !DILocation(line: 2756, column: 3, scope: !6393)
!6404 = !DILocation(line: 2758, column: 8, scope: !6393)
!6405 = !DILocation(line: 2758, column: 13, scope: !6393)
!6406 = !DILocation(line: 2759, column: 8, scope: !6393)
!6407 = !DILocation(line: 2759, column: 13, scope: !6393)
!6408 = !DILocation(line: 2760, column: 8, scope: !6393)
!6409 = !DILocation(line: 2760, column: 17, scope: !6393)
!6410 = !DILocation(line: 2761, column: 3, scope: !6393)
!6411 = !DILocation(line: 2762, column: 1, scope: !6393)
!6412 = distinct !DISubprogram(name: "is_gimple_call", scope: !389, file: !389, line: 1870, type: !4537, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6413)
!6413 = !{!6414}
!6414 = !DILocalVariable(name: "gs", arg: 1, scope: !6412, file: !389, line: 1870, type: !2467)
!6415 = !DILocation(line: 0, scope: !6412)
!6416 = !DILocation(line: 1872, column: 10, scope: !6412)
!6417 = !DILocation(line: 1872, column: 27, scope: !6412)
!6418 = !DILocation(line: 1872, column: 3, scope: !6412)
!6419 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !389, file: !389, line: 2013, type: !2474, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6420)
!6420 = !{!6421, !6422}
!6421 = !DILocalVariable(name: "gs", arg: 1, scope: !6419, file: !389, line: 2013, type: !2467)
!6422 = !DILocalVariable(name: "num_ops", scope: !6419, file: !389, line: 2015, type: !5)
!6423 = !DILocation(line: 0, scope: !6419)
!6424 = !DILocation(line: 2017, column: 13, scope: !6419)
!6425 = !DILocation(line: 2018, column: 18, scope: !6419)
!6426 = !DILocation(line: 2018, column: 3, scope: !6419)
!6427 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !389, file: !389, line: 1878, type: !2525, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6428)
!6428 = !{!6429}
!6429 = !DILocalVariable(name: "gs", arg: 1, scope: !6427, file: !389, line: 1878, type: !2467)
!6430 = !DILocation(line: 0, scope: !6427)
!6431 = !DILocation(line: 1881, column: 10, scope: !6427)
!6432 = !DILocation(line: 1881, column: 3, scope: !6427)
!6433 = distinct !DISubprogram(name: "gimple_call_arg", scope: !389, file: !389, line: 2025, type: !4522, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6434)
!6434 = !{!6435, !6436}
!6435 = !DILocalVariable(name: "gs", arg: 1, scope: !6433, file: !389, line: 2025, type: !2467)
!6436 = !DILocalVariable(name: "index", arg: 2, scope: !6433, file: !389, line: 2025, type: !5)
!6437 = !DILocation(line: 0, scope: !6433)
!6438 = !DILocation(line: 2028, column: 31, scope: !6433)
!6439 = !DILocation(line: 2028, column: 10, scope: !6433)
!6440 = !DILocation(line: 2028, column: 3, scope: !6433)
!6441 = distinct !DISubprogram(name: "idx_infer_loop_bounds", scope: !1, file: !1, line: 2671, type: !6442, scopeLine: 2672, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6444)
!6442 = !DISubroutineType(types: !6443)
!6443 = !{!468, !476, !834, !473}
!6444 = !{!6445, !6446, !6447, !6448, !6449, !6450, !6451, !6452, !6453, !6454, !6455, !6456, !6457, !6458, !6459}
!6445 = !DILocalVariable(name: "base", arg: 1, scope: !6441, file: !1, line: 2671, type: !476)
!6446 = !DILocalVariable(name: "idx", arg: 2, scope: !6441, file: !1, line: 2671, type: !834)
!6447 = !DILocalVariable(name: "dta", arg: 3, scope: !6441, file: !1, line: 2671, type: !473)
!6448 = !DILocalVariable(name: "data", scope: !6441, file: !1, line: 2673, type: !1864)
!6449 = !DILocalVariable(name: "ev", scope: !6441, file: !1, line: 2674, type: !476)
!6450 = !DILocalVariable(name: "init", scope: !6441, file: !1, line: 2674, type: !476)
!6451 = !DILocalVariable(name: "step", scope: !6441, file: !1, line: 2674, type: !476)
!6452 = !DILocalVariable(name: "low", scope: !6441, file: !1, line: 2675, type: !476)
!6453 = !DILocalVariable(name: "high", scope: !6441, file: !1, line: 2675, type: !476)
!6454 = !DILocalVariable(name: "type", scope: !6441, file: !1, line: 2675, type: !476)
!6455 = !DILocalVariable(name: "next", scope: !6441, file: !1, line: 2675, type: !476)
!6456 = !DILocalVariable(name: "sign", scope: !6441, file: !1, line: 2676, type: !468)
!6457 = !DILocalVariable(name: "upper", scope: !6441, file: !1, line: 2676, type: !468)
!6458 = !DILocalVariable(name: "at_end", scope: !6441, file: !1, line: 2676, type: !468)
!6459 = !DILocalVariable(name: "loop", scope: !6441, file: !1, line: 2677, type: !1015)
!6460 = !DILocation(line: 0, scope: !6441)
!6461 = !DILocation(line: 2677, column: 29, scope: !6441)
!6462 = !DILocation(line: 2679, column: 7, scope: !6463)
!6463 = distinct !DILexicalBlock(scope: !6441, file: !1, line: 2679, column: 7)
!6464 = !DILocation(line: 2679, column: 24, scope: !6463)
!6465 = !DILocation(line: 2679, column: 7, scope: !6441)
!6466 = !DILocation(line: 2676, column: 28, scope: !6441)
!6467 = !DILocation(line: 2685, column: 7, scope: !6468)
!6468 = distinct !DILexicalBlock(scope: !6441, file: !1, line: 2685, column: 7)
!6469 = !DILocation(line: 2685, column: 7, scope: !6441)
!6470 = !DILocation(line: 2691, column: 70, scope: !6441)
!6471 = !DILocation(line: 2691, column: 38, scope: !6441)
!6472 = !DILocation(line: 2691, column: 8, scope: !6441)
!6473 = !DILocation(line: 2692, column: 10, scope: !6441)
!6474 = !DILocation(line: 2693, column: 48, scope: !6441)
!6475 = !DILocation(line: 2693, column: 10, scope: !6441)
!6476 = !DILocation(line: 2695, column: 8, scope: !6477)
!6477 = distinct !DILexicalBlock(scope: !6441, file: !1, line: 2695, column: 7)
!6478 = !DILocation(line: 2696, column: 11, scope: !6477)
!6479 = !DILocation(line: 2696, column: 7, scope: !6477)
!6480 = !DILocation(line: 2697, column: 10, scope: !6477)
!6481 = !DILocation(line: 2697, column: 27, scope: !6477)
!6482 = !DILocation(line: 2698, column: 7, scope: !6477)
!6483 = !DILocation(line: 2698, column: 10, scope: !6477)
!6484 = !DILocation(line: 2699, column: 7, scope: !6477)
!6485 = !DILocation(line: 2699, column: 10, scope: !6477)
!6486 = !DILocation(line: 2700, column: 7, scope: !6477)
!6487 = !DILocation(line: 2700, column: 62, scope: !6477)
!6488 = !DILocation(line: 2700, column: 10, scope: !6477)
!6489 = !DILocation(line: 2695, column: 7, scope: !6441)
!6490 = !DILocation(line: 2703, column: 9, scope: !6441)
!6491 = !DILocation(line: 2704, column: 10, scope: !6441)
!6492 = !DILocation(line: 2708, column: 7, scope: !6493)
!6493 = distinct !DILexicalBlock(scope: !6441, file: !1, line: 2708, column: 7)
!6494 = !DILocation(line: 2708, column: 23, scope: !6493)
!6495 = !DILocation(line: 2709, column: 11, scope: !6493)
!6496 = !DILocation(line: 2709, column: 7, scope: !6493)
!6497 = !DILocation(line: 2710, column: 10, scope: !6493)
!6498 = !DILocation(line: 2710, column: 27, scope: !6493)
!6499 = !DILocation(line: 2708, column: 7, scope: !6441)
!6500 = !DILocation(line: 2712, column: 10, scope: !6441)
!6501 = !DILocation(line: 2713, column: 10, scope: !6441)
!6502 = !DILocation(line: 2718, column: 7, scope: !6503)
!6503 = distinct !DILexicalBlock(scope: !6441, file: !1, line: 2717, column: 7)
!6504 = !DILocation(line: 2718, column: 10, scope: !6503)
!6505 = !DILocation(line: 2717, column: 7, scope: !6441)
!6506 = !DILocation(line: 2729, column: 8, scope: !6507)
!6507 = distinct !DILexicalBlock(scope: !6441, file: !1, line: 2729, column: 7)
!6508 = !DILocation(line: 2730, column: 7, scope: !6507)
!6509 = !DILocation(line: 2730, column: 11, scope: !6507)
!6510 = !DILocation(line: 2729, column: 7, scope: !6441)
!6511 = !DILocation(line: 2732, column: 9, scope: !6441)
!6512 = !DILocation(line: 2733, column: 10, scope: !6441)
!6513 = !DILocation(line: 2735, column: 7, scope: !6514)
!6514 = distinct !DILexicalBlock(scope: !6441, file: !1, line: 2735, column: 7)
!6515 = !DILocation(line: 2735, column: 7, scope: !6441)
!6516 = !DILocation(line: 2736, column: 12, scope: !6514)
!6517 = !DILocation(line: 2736, column: 5, scope: !6514)
!6518 = !DILocation(line: 2738, column: 12, scope: !6514)
!6519 = !DILocation(line: 0, scope: !6514)
!6520 = !DILocation(line: 2740, column: 7, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6441, file: !1, line: 2740, column: 7)
!6522 = !DILocation(line: 2740, column: 40, scope: !6521)
!6523 = !DILocation(line: 2741, column: 7, scope: !6521)
!6524 = !DILocation(line: 2741, column: 10, scope: !6521)
!6525 = !DILocation(line: 2741, column: 44, scope: !6521)
!6526 = !DILocation(line: 2740, column: 7, scope: !6441)
!6527 = !DILocation(line: 2744, column: 50, scope: !6441)
!6528 = !DILocation(line: 2744, column: 3, scope: !6441)
!6529 = !DILocation(line: 2745, column: 3, scope: !6441)
!6530 = !DILocation(line: 2746, column: 1, scope: !6441)
!6531 = distinct !DISubprogram(name: "record_nonwrapping_iv", scope: !1, file: !1, line: 2566, type: !6532, scopeLine: 2568, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6534)
!6532 = !DISubroutineType(types: !6533)
!6533 = !{null, !1015, !476, !476, !800, !476, !476, !468, !468}
!6534 = !{!6535, !6536, !6537, !6538, !6539, !6540, !6541, !6542, !6543, !6544, !6545, !6546, !6547, !6548}
!6535 = !DILocalVariable(name: "loop", arg: 1, scope: !6531, file: !1, line: 2566, type: !1015)
!6536 = !DILocalVariable(name: "base", arg: 2, scope: !6531, file: !1, line: 2566, type: !476)
!6537 = !DILocalVariable(name: "step", arg: 3, scope: !6531, file: !1, line: 2566, type: !476)
!6538 = !DILocalVariable(name: "stmt", arg: 4, scope: !6531, file: !1, line: 2566, type: !800)
!6539 = !DILocalVariable(name: "low", arg: 5, scope: !6531, file: !1, line: 2567, type: !476)
!6540 = !DILocalVariable(name: "high", arg: 6, scope: !6531, file: !1, line: 2567, type: !476)
!6541 = !DILocalVariable(name: "realistic", arg: 7, scope: !6531, file: !1, line: 2567, type: !468)
!6542 = !DILocalVariable(name: "upper", arg: 8, scope: !6531, file: !1, line: 2567, type: !468)
!6543 = !DILocalVariable(name: "niter_bound", scope: !6531, file: !1, line: 2569, type: !476)
!6544 = !DILocalVariable(name: "extreme", scope: !6531, file: !1, line: 2569, type: !476)
!6545 = !DILocalVariable(name: "delta", scope: !6531, file: !1, line: 2569, type: !476)
!6546 = !DILocalVariable(name: "type", scope: !6531, file: !1, line: 2570, type: !476)
!6547 = !DILocalVariable(name: "unsigned_type", scope: !6531, file: !1, line: 2570, type: !476)
!6548 = !DILocalVariable(name: "max", scope: !6531, file: !1, line: 2571, type: !525)
!6549 = !DILocation(line: 0, scope: !6531)
!6550 = !DILocation(line: 2570, column: 15, scope: !6531)
!6551 = !DILocation(line: 2571, column: 3, scope: !6531)
!6552 = !DILocation(line: 2573, column: 7, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6531, file: !1, line: 2573, column: 7)
!6554 = !DILocation(line: 2573, column: 24, scope: !6553)
!6555 = !DILocation(line: 2573, column: 39, scope: !6553)
!6556 = !DILocation(line: 2573, column: 42, scope: !6553)
!6557 = !DILocation(line: 2573, column: 7, scope: !6531)
!6558 = !DILocation(line: 2576, column: 7, scope: !6559)
!6559 = distinct !DILexicalBlock(scope: !6531, file: !1, line: 2576, column: 7)
!6560 = !DILocation(line: 2576, column: 17, scope: !6559)
!6561 = !DILocation(line: 2576, column: 21, scope: !6559)
!6562 = !DILocation(line: 2576, column: 32, scope: !6559)
!6563 = !DILocation(line: 2576, column: 7, scope: !6531)
!6564 = !DILocation(line: 2578, column: 7, scope: !6565)
!6565 = distinct !DILexicalBlock(scope: !6559, file: !1, line: 2577, column: 5)
!6566 = !DILocation(line: 2579, column: 27, scope: !6565)
!6567 = !DILocation(line: 2579, column: 38, scope: !6565)
!6568 = !DILocation(line: 2579, column: 7, scope: !6565)
!6569 = !DILocation(line: 2580, column: 16, scope: !6565)
!6570 = !DILocation(line: 2580, column: 7, scope: !6565)
!6571 = !DILocation(line: 2581, column: 27, scope: !6565)
!6572 = !DILocation(line: 2581, column: 7, scope: !6565)
!6573 = !DILocation(line: 2582, column: 16, scope: !6565)
!6574 = !DILocation(line: 2582, column: 7, scope: !6565)
!6575 = !DILocation(line: 2583, column: 27, scope: !6565)
!6576 = !DILocation(line: 2583, column: 7, scope: !6565)
!6577 = !DILocation(line: 2584, column: 16, scope: !6565)
!6578 = !DILocation(line: 2584, column: 7, scope: !6565)
!6579 = !DILocation(line: 2585, column: 26, scope: !6565)
!6580 = !DILocation(line: 2585, column: 7, scope: !6565)
!6581 = !DILocation(line: 2586, column: 16, scope: !6565)
!6582 = !DILocation(line: 2586, column: 51, scope: !6565)
!6583 = !DILocation(line: 2586, column: 7, scope: !6565)
!6584 = !DILocation(line: 2587, column: 5, scope: !6565)
!6585 = !DILocation(line: 2589, column: 19, scope: !6531)
!6586 = !DILocation(line: 2590, column: 10, scope: !6531)
!6587 = !DILocation(line: 2591, column: 10, scope: !6531)
!6588 = !DILocation(line: 2593, column: 7, scope: !6589)
!6589 = distinct !DILexicalBlock(scope: !6531, file: !1, line: 2593, column: 7)
!6590 = !DILocation(line: 2593, column: 7, scope: !6531)
!6591 = !DILocation(line: 2595, column: 17, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6589, file: !1, line: 2594, column: 5)
!6593 = !DILocation(line: 2596, column: 11, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6592, file: !1, line: 2596, column: 11)
!6595 = !DILocation(line: 2596, column: 28, scope: !6594)
!6596 = !DILocation(line: 2596, column: 11, scope: !6592)
!6597 = !DILocation(line: 2597, column: 9, scope: !6594)
!6598 = !DILocation(line: 2597, column: 2, scope: !6594)
!6599 = !DILocation(line: 2598, column: 15, scope: !6592)
!6600 = !DILocation(line: 2599, column: 14, scope: !6592)
!6601 = !DILocation(line: 2600, column: 5, scope: !6592)
!6602 = !DILocation(line: 2603, column: 17, scope: !6603)
!6603 = distinct !DILexicalBlock(scope: !6589, file: !1, line: 2602, column: 5)
!6604 = !DILocation(line: 2604, column: 11, scope: !6605)
!6605 = distinct !DILexicalBlock(scope: !6603, file: !1, line: 2604, column: 11)
!6606 = !DILocation(line: 2604, column: 28, scope: !6605)
!6607 = !DILocation(line: 2604, column: 11, scope: !6603)
!6608 = !DILocation(line: 2605, column: 9, scope: !6605)
!6609 = !DILocation(line: 2605, column: 2, scope: !6605)
!6610 = !DILocation(line: 2606, column: 15, scope: !6603)
!6611 = !DILocation(line: 0, scope: !6589)
!6612 = !DILocation(line: 2611, column: 17, scope: !6531)
!6613 = !DILocation(line: 2612, column: 9, scope: !6531)
!6614 = !DILocation(line: 2613, column: 3, scope: !6531)
!6615 = !DILocation(line: 2614, column: 1, scope: !6531)
!6616 = distinct !DISubprogram(name: "derive_constant_upper_bound", scope: !1, file: !1, line: 2315, type: !6617, scopeLine: 2316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6619)
!6617 = !DISubroutineType(types: !6618)
!6618 = !{!525, !476}
!6619 = !{!6620, !6621, !6622, !6623}
!6620 = !DILocalVariable(name: "val", arg: 1, scope: !6616, file: !1, line: 2315, type: !476)
!6621 = !DILocalVariable(name: "code", scope: !6616, file: !1, line: 2317, type: !132)
!6622 = !DILocalVariable(name: "op0", scope: !6616, file: !1, line: 2318, type: !476)
!6623 = !DILocalVariable(name: "op1", scope: !6616, file: !1, line: 2318, type: !476)
!6624 = !DILocation(line: 0, scope: !6616)
!6625 = !DILocation(line: 2317, column: 3, scope: !6616)
!6626 = !DILocation(line: 2318, column: 3, scope: !6616)
!6627 = !DILocation(line: 2320, column: 3, scope: !6616)
!6628 = !DILocation(line: 2321, column: 43, scope: !6616)
!6629 = !DILocation(line: 2321, column: 60, scope: !6616)
!6630 = !DILocation(line: 2321, column: 65, scope: !6616)
!6631 = !DILocation(line: 2321, column: 71, scope: !6616)
!6632 = !DILocation(line: 2321, column: 10, scope: !6616)
!6633 = !DILocation(line: 2322, column: 1, scope: !6616)
!6634 = distinct !DISubprogram(name: "derive_constant_upper_bound_ops", scope: !1, file: !1, line: 2329, type: !6635, scopeLine: 2331, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6637)
!6635 = !DISubroutineType(types: !6636)
!6636 = !{!525, !476, !476, !132, !476}
!6637 = !{!6638, !6639, !6640, !6641, !6642, !6643, !6644, !6645, !6646, !6647, !6648, !6649}
!6638 = !DILocalVariable(name: "type", arg: 1, scope: !6634, file: !1, line: 2329, type: !476)
!6639 = !DILocalVariable(name: "op0", arg: 2, scope: !6634, file: !1, line: 2329, type: !476)
!6640 = !DILocalVariable(name: "code", arg: 3, scope: !6634, file: !1, line: 2330, type: !132)
!6641 = !DILocalVariable(name: "op1", arg: 4, scope: !6634, file: !1, line: 2330, type: !476)
!6642 = !DILocalVariable(name: "subtype", scope: !6634, file: !1, line: 2332, type: !476)
!6643 = !DILocalVariable(name: "maxt", scope: !6634, file: !1, line: 2332, type: !476)
!6644 = !DILocalVariable(name: "bnd", scope: !6634, file: !1, line: 2333, type: !525)
!6645 = !DILocalVariable(name: "max", scope: !6634, file: !1, line: 2333, type: !525)
!6646 = !DILocalVariable(name: "mmax", scope: !6634, file: !1, line: 2333, type: !525)
!6647 = !DILocalVariable(name: "cst", scope: !6634, file: !1, line: 2333, type: !525)
!6648 = !DILocalVariable(name: "stmt", scope: !6634, file: !1, line: 2334, type: !800)
!6649 = !DILocalVariable(name: "tem", scope: !6650, file: !1, line: 2426, type: !476)
!6650 = distinct !DILexicalBlock(scope: !6651, file: !1, line: 2425, column: 6)
!6651 = distinct !DILexicalBlock(scope: !6652, file: !1, line: 2424, column: 8)
!6652 = distinct !DILexicalBlock(scope: !6653, file: !1, line: 2407, column: 2)
!6653 = distinct !DILexicalBlock(scope: !6654, file: !1, line: 2390, column: 11)
!6654 = distinct !DILexicalBlock(scope: !6634, file: !1, line: 2344, column: 5)
!6655 = !DILocation(line: 0, scope: !6634)
!6656 = !DILocation(line: 2333, column: 3, scope: !6634)
!6657 = !DILocation(line: 2336, column: 7, scope: !6658)
!6658 = distinct !DILexicalBlock(scope: !6634, file: !1, line: 2336, column: 7)
!6659 = !DILocation(line: 2336, column: 7, scope: !6634)
!6660 = !DILocation(line: 2337, column: 12, scope: !6658)
!6661 = !DILocation(line: 2337, column: 5, scope: !6658)
!6662 = !DILocation(line: 2339, column: 12, scope: !6658)
!6663 = !DILocation(line: 0, scope: !6658)
!6664 = !DILocation(line: 2341, column: 9, scope: !6634)
!6665 = !DILocation(line: 2343, column: 3, scope: !6634)
!6666 = !DILocation(line: 2346, column: 14, scope: !6654)
!6667 = !DILocation(line: 2346, column: 7, scope: !6654)
!6668 = !DILocation(line: 2349, column: 17, scope: !6654)
!6669 = !DILocation(line: 2350, column: 12, scope: !6670)
!6670 = distinct !DILexicalBlock(scope: !6654, file: !1, line: 2350, column: 11)
!6671 = !DILocation(line: 2353, column: 4, scope: !6670)
!6672 = !DILocation(line: 2353, column: 7, scope: !6670)
!6673 = !DILocation(line: 2354, column: 4, scope: !6670)
!6674 = !DILocation(line: 2354, column: 8, scope: !6670)
!6675 = !DILocation(line: 2350, column: 11, scope: !6654)
!6676 = !DILocation(line: 2359, column: 11, scope: !6677)
!6677 = distinct !DILexicalBlock(scope: !6670, file: !1, line: 2355, column: 2)
!6678 = !DILocation(line: 2359, column: 4, scope: !6677)
!6679 = !DILocation(line: 2364, column: 13, scope: !6654)
!6680 = !DILocation(line: 2368, column: 11, scope: !6681)
!6681 = distinct !DILexicalBlock(scope: !6654, file: !1, line: 2368, column: 11)
!6682 = !DILocation(line: 2368, column: 38, scope: !6681)
!6683 = !DILocation(line: 0, scope: !6654)
!6684 = !DILocation(line: 2368, column: 11, scope: !6654)
!6685 = !DILocation(line: 2369, column: 9, scope: !6681)
!6686 = !DILocation(line: 2369, column: 2, scope: !6681)
!6687 = !DILocation(line: 2371, column: 14, scope: !6654)
!6688 = !DILocation(line: 2371, column: 7, scope: !6654)
!6689 = !DILocation(line: 2376, column: 11, scope: !6690)
!6690 = distinct !DILexicalBlock(scope: !6654, file: !1, line: 2376, column: 11)
!6691 = !DILocation(line: 2376, column: 27, scope: !6690)
!6692 = !DILocation(line: 2377, column: 4, scope: !6690)
!6693 = !DILocation(line: 2377, column: 8, scope: !6690)
!6694 = !DILocation(line: 2376, column: 11, scope: !6654)
!6695 = !DILocation(line: 2378, column: 9, scope: !6690)
!6696 = !DILocation(line: 2378, column: 2, scope: !6690)
!6697 = !DILocation(line: 2383, column: 13, scope: !6654)
!6698 = !DILocation(line: 2384, column: 13, scope: !6654)
!6699 = !DILocation(line: 2384, column: 35, scope: !6654)
!6700 = !DILocation(line: 2385, column: 16, scope: !6701)
!6701 = distinct !DILexicalBlock(scope: !6654, file: !1, line: 2385, column: 11)
!6702 = !DILocation(line: 2385, column: 11, scope: !6654)
!6703 = !DILocation(line: 2386, column: 8, scope: !6701)
!6704 = !DILocation(line: 2386, column: 2, scope: !6701)
!6705 = !DILocation(line: 2388, column: 13, scope: !6654)
!6706 = !DILocation(line: 2390, column: 11, scope: !6653)
!6707 = !DILocation(line: 2390, column: 11, scope: !6654)
!6708 = !DILocation(line: 2392, column: 10, scope: !6709)
!6709 = distinct !DILexicalBlock(scope: !6653, file: !1, line: 2391, column: 2)
!6710 = !DILocation(line: 2394, column: 8, scope: !6711)
!6711 = distinct !DILexicalBlock(scope: !6709, file: !1, line: 2394, column: 8)
!6712 = !DILocation(line: 2394, column: 8, scope: !6709)
!6713 = !DILocation(line: 2395, column: 13, scope: !6711)
!6714 = !DILocation(line: 2395, column: 6, scope: !6711)
!6715 = !DILocation(line: 2400, column: 11, scope: !6709)
!6716 = !DILocation(line: 2400, column: 32, scope: !6709)
!6717 = !DILocation(line: 2401, column: 8, scope: !6718)
!6718 = distinct !DILexicalBlock(scope: !6709, file: !1, line: 2401, column: 8)
!6719 = !DILocation(line: 2401, column: 36, scope: !6718)
!6720 = !DILocation(line: 2401, column: 8, scope: !6709)
!6721 = !DILocation(line: 2402, column: 13, scope: !6718)
!6722 = !DILocation(line: 2402, column: 6, scope: !6718)
!6723 = !DILocation(line: 2404, column: 11, scope: !6709)
!6724 = !DILocation(line: 2404, column: 4, scope: !6709)
!6725 = !DILocation(line: 2421, column: 8, scope: !6726)
!6726 = distinct !DILexicalBlock(scope: !6652, file: !1, line: 2421, column: 8)
!6727 = !DILocation(line: 2421, column: 35, scope: !6726)
!6728 = !DILocation(line: 2421, column: 8, scope: !6652)
!6729 = !DILocation(line: 2422, column: 13, scope: !6726)
!6730 = !DILocation(line: 2422, column: 6, scope: !6726)
!6731 = !DILocation(line: 2424, column: 8, scope: !6651)
!6732 = !DILocation(line: 2424, column: 8, scope: !6652)
!6733 = !DILocation(line: 2426, column: 19, scope: !6650)
!6734 = !DILocation(line: 0, scope: !6650)
!6735 = !DILocation(line: 2428, column: 13, scope: !6736)
!6736 = distinct !DILexicalBlock(scope: !6650, file: !1, line: 2428, column: 12)
!6737 = !DILocation(line: 2428, column: 17, scope: !6736)
!6738 = !DILocation(line: 2428, column: 20, scope: !6736)
!6739 = !DILocation(line: 2428, column: 12, scope: !6650)
!6740 = !DILocation(line: 2429, column: 10, scope: !6736)
!6741 = !DILocation(line: 2429, column: 3, scope: !6736)
!6742 = !DILocation(line: 2432, column: 10, scope: !6652)
!6743 = !DILocation(line: 2432, column: 31, scope: !6652)
!6744 = !DILocation(line: 2435, column: 14, scope: !6654)
!6745 = !DILocation(line: 2435, column: 7, scope: !6654)
!6746 = !DILocation(line: 2439, column: 11, scope: !6747)
!6747 = distinct !DILexicalBlock(scope: !6654, file: !1, line: 2439, column: 11)
!6748 = !DILocation(line: 2439, column: 27, scope: !6747)
!6749 = !DILocation(line: 2440, column: 4, scope: !6747)
!6750 = !DILocation(line: 2440, column: 7, scope: !6747)
!6751 = !DILocation(line: 2439, column: 11, scope: !6654)
!6752 = !DILocation(line: 2441, column: 9, scope: !6747)
!6753 = !DILocation(line: 2441, column: 2, scope: !6747)
!6754 = !DILocation(line: 2443, column: 13, scope: !6654)
!6755 = !DILocation(line: 2444, column: 36, scope: !6654)
!6756 = !DILocation(line: 2444, column: 14, scope: !6654)
!6757 = !DILocation(line: 2444, column: 7, scope: !6654)
!6758 = !DILocation(line: 2447, column: 11, scope: !6759)
!6759 = distinct !DILexicalBlock(scope: !6654, file: !1, line: 2447, column: 11)
!6760 = !DILocation(line: 2447, column: 27, scope: !6759)
!6761 = !DILocation(line: 2448, column: 4, scope: !6759)
!6762 = !DILocation(line: 2448, column: 7, scope: !6759)
!6763 = !DILocation(line: 2447, column: 11, scope: !6654)
!6764 = !DILocation(line: 2449, column: 9, scope: !6759)
!6765 = !DILocation(line: 2449, column: 2, scope: !6759)
!6766 = !DILocation(line: 2450, column: 14, scope: !6654)
!6767 = !DILocation(line: 2450, column: 7, scope: !6654)
!6768 = !DILocation(line: 2453, column: 14, scope: !6654)
!6769 = !DILocation(line: 2454, column: 11, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !6654, file: !1, line: 2454, column: 11)
!6771 = !DILocation(line: 2454, column: 30, scope: !6770)
!6772 = !DILocation(line: 2455, column: 4, scope: !6770)
!6773 = !DILocation(line: 2455, column: 7, scope: !6770)
!6774 = !DILocation(line: 2455, column: 32, scope: !6770)
!6775 = !DILocation(line: 2454, column: 11, scope: !6654)
!6776 = !DILocation(line: 2456, column: 9, scope: !6770)
!6777 = !DILocation(line: 2456, column: 2, scope: !6770)
!6778 = !DILocation(line: 2457, column: 14, scope: !6654)
!6779 = !DILocation(line: 2457, column: 7, scope: !6654)
!6780 = !DILocation(line: 2460, column: 14, scope: !6654)
!6781 = !DILocation(line: 2460, column: 7, scope: !6654)
!6782 = !DILocation(line: 2462, column: 1, scope: !6634)
!6783 = distinct !DISubprogram(name: "derive_constant_upper_bound_assign", scope: !1, file: !1, line: 2300, type: !6784, scopeLine: 2301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6786)
!6784 = !DISubroutineType(types: !6785)
!6785 = !{!525, !800}
!6786 = !{!6787, !6788, !6789, !6790}
!6787 = !DILocalVariable(name: "stmt", arg: 1, scope: !6783, file: !1, line: 2300, type: !800)
!6788 = !DILocalVariable(name: "code", scope: !6783, file: !1, line: 2302, type: !132)
!6789 = !DILocalVariable(name: "op0", scope: !6783, file: !1, line: 2303, type: !476)
!6790 = !DILocalVariable(name: "op1", scope: !6783, file: !1, line: 2304, type: !476)
!6791 = !DILocation(line: 0, scope: !6783)
!6792 = !DILocation(line: 2302, column: 25, scope: !6783)
!6793 = !DILocation(line: 2303, column: 14, scope: !6783)
!6794 = !DILocation(line: 2304, column: 14, scope: !6783)
!6795 = !DILocation(line: 2306, column: 43, scope: !6783)
!6796 = !DILocation(line: 2306, column: 10, scope: !6783)
!6797 = !DILocation(line: 2308, column: 1, scope: !6783)
!6798 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !1872, file: !1872, line: 32, type: !6799, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6801)
!6799 = !DISubroutineType(types: !6800)
!6800 = !{!1870, !469}
!6801 = !{!6802}
!6802 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6798, file: !1872, line: 32, type: !469)
!6803 = !DILocation(line: 0, scope: !6798)
!6804 = !DILocation(line: 32, column: 1, scope: !6798)
!6805 = distinct !DISubprogram(name: "number_of_loops", scope: !328, file: !328, line: 459, type: !6806, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !1909)
!6806 = !DISubroutineType(types: !6807)
!6807 = !{!5}
!6808 = !DILocation(line: 461, column: 8, scope: !6809)
!6809 = distinct !DILexicalBlock(scope: !6805, file: !328, line: 461, column: 7)
!6810 = !DILocation(line: 461, column: 7, scope: !6805)
!6811 = !DILocation(line: 464, column: 10, scope: !6805)
!6812 = !DILocation(line: 464, column: 3, scope: !6805)
!6813 = !DILocation(line: 0, scope: !6805)
!6814 = !DILocation(line: 465, column: 1, scope: !6805)
!6815 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !328, file: !328, line: 85, type: !6816, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6820)
!6816 = !DISubroutineType(types: !6817)
!6817 = !{!469, !6818, !5, !4098}
!6818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6819, size: 64)
!6819 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1035)
!6820 = !{!6821, !6822, !6823}
!6821 = !DILocalVariable(name: "vec_", arg: 1, scope: !6815, file: !328, line: 85, type: !6818)
!6822 = !DILocalVariable(name: "ix_", arg: 2, scope: !6815, file: !328, line: 85, type: !5)
!6823 = !DILocalVariable(name: "ptr", arg: 3, scope: !6815, file: !328, line: 85, type: !4098)
!6824 = !DILocation(line: 0, scope: !6815)
!6825 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !1872, file: !1872, line: 31, type: !6826, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6830)
!6826 = !DISubroutineType(types: !6827)
!6827 = !{!6828, !6829, !469}
!6828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !469, size: 64)
!6829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1876, size: 64)
!6830 = !{!6831, !6832, !6833}
!6831 = !DILocalVariable(name: "vec_", arg: 1, scope: !6825, file: !1872, line: 31, type: !6829)
!6832 = !DILocalVariable(name: "obj_", arg: 2, scope: !6825, file: !1872, line: 31, type: !469)
!6833 = !DILocalVariable(name: "slot_", scope: !6825, file: !1872, line: 31, type: !6828)
!6834 = !DILocation(line: 0, scope: !6825)
!6835 = !DILocation(line: 31, column: 1, scope: !6825)
!6836 = distinct !DISubprogram(name: "loop_outer", scope: !328, file: !328, line: 434, type: !6837, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6839)
!6837 = !DISubroutineType(types: !6838)
!6838 = !{!1015, !2571}
!6839 = !{!6840, !6841}
!6840 = !DILocalVariable(name: "loop", arg: 1, scope: !6836, file: !328, line: 434, type: !2571)
!6841 = !DILocalVariable(name: "n", scope: !6836, file: !328, line: 436, type: !5)
!6842 = !DILocation(line: 0, scope: !6836)
!6843 = !DILocation(line: 436, column: 16, scope: !6836)
!6844 = !DILocation(line: 438, column: 9, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6836, file: !328, line: 438, column: 7)
!6846 = !DILocation(line: 438, column: 7, scope: !6836)
!6847 = !DILocation(line: 441, column: 10, scope: !6836)
!6848 = !DILocation(line: 441, column: 3, scope: !6836)
!6849 = !DILocation(line: 442, column: 1, scope: !6836)
!6850 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !328, file: !328, line: 85, type: !6851, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6853)
!6851 = !DISubroutineType(types: !6852)
!6852 = !{!5, !6818}
!6853 = !{!6854}
!6854 = !DILocalVariable(name: "vec_", arg: 1, scope: !6850, file: !328, line: 85, type: !6818)
!6855 = !DILocation(line: 0, scope: !6850)
!6856 = !DILocation(line: 85, column: 1, scope: !6850)
!6857 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !328, file: !328, line: 85, type: !6858, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6860)
!6858 = !DISubroutineType(types: !6859)
!6859 = !{!1042, !6818, !5}
!6860 = !{!6861, !6862}
!6861 = !DILocalVariable(name: "vec_", arg: 1, scope: !6857, file: !328, line: 85, type: !6818)
!6862 = !DILocalVariable(name: "ix_", arg: 2, scope: !6857, file: !328, line: 85, type: !5)
!6863 = !DILocation(line: 0, scope: !6857)
!6864 = !DILocation(line: 85, column: 1, scope: !6857)
!6865 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !1872, file: !1872, line: 31, type: !6866, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6870)
!6866 = !DISubroutineType(types: !6867)
!6867 = !{!469, !6868, !5, !6828}
!6868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6869, size: 64)
!6869 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1876)
!6870 = !{!6871, !6872, !6873}
!6871 = !DILocalVariable(name: "vec_", arg: 1, scope: !6865, file: !1872, line: 31, type: !6868)
!6872 = !DILocalVariable(name: "ix_", arg: 2, scope: !6865, file: !1872, line: 31, type: !5)
!6873 = !DILocalVariable(name: "ptr", arg: 3, scope: !6865, file: !1872, line: 31, type: !6828)
!6874 = !DILocation(line: 0, scope: !6865)
!6875 = !DILocation(line: 31, column: 1, scope: !6876)
!6876 = distinct !DILexicalBlock(scope: !6865, file: !1872, line: 31, column: 1)
!6877 = !DILocation(line: 31, column: 1, scope: !6865)
!6878 = !DILocation(line: 31, column: 1, scope: !6879)
!6879 = distinct !DILexicalBlock(scope: !6876, file: !1872, line: 31, column: 1)
!6880 = !DILocation(line: 31, column: 1, scope: !6881)
!6881 = distinct !DILexicalBlock(scope: !6876, file: !1872, line: 31, column: 1)
!6882 = !DILocation(line: 0, scope: !6876)
!6883 = distinct !DISubprogram(name: "get_loop", scope: !328, file: !328, line: 417, type: !6884, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6886)
!6884 = !DISubroutineType(types: !6885)
!6885 = !{!1015, !5}
!6886 = !{!6887}
!6887 = !DILocalVariable(name: "num", arg: 1, scope: !6883, file: !328, line: 417, type: !5)
!6888 = !DILocation(line: 0, scope: !6883)
!6889 = !DILocation(line: 419, column: 10, scope: !6883)
!6890 = !DILocation(line: 419, column: 3, scope: !6883)
!6891 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !1872, file: !1872, line: 32, type: !6892, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6895)
!6892 = !DISubroutineType(types: !6893)
!6893 = !{null, !6894}
!6894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1870, size: 64)
!6895 = !{!6896}
!6896 = !DILocalVariable(name: "vec_", arg: 1, scope: !6891, file: !1872, line: 32, type: !6894)
!6897 = !DILocation(line: 0, scope: !6891)
!6898 = !DILocation(line: 32, column: 1, scope: !6899)
!6899 = distinct !DILexicalBlock(scope: !6891, file: !1872, line: 32, column: 1)
!6900 = !DILocation(line: 32, column: 1, scope: !6891)
!6901 = distinct !DISubprogram(name: "double_int_zero_p", scope: !526, file: !526, line: 152, type: !6902, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !6904)
!6902 = !DISubroutineType(types: !6903)
!6903 = !{!468, !525}
!6904 = !{!6905}
!6905 = !DILocalVariable(name: "cst", arg: 1, scope: !6901, file: !526, line: 152, type: !525)
!6906 = !DILocation(line: 154, column: 23, scope: !6901)
!6907 = !DILocation(line: 154, column: 10, scope: !6901)
!6908 = !DILocation(line: 154, column: 3, scope: !6901)
