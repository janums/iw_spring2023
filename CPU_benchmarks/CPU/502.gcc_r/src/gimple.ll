; ModuleID = 'gimple.bc'
source_filename = "gimple.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.ggc_root_tab = type { i8*, i64, i64, void (i8*)*, void (i8*)* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%union.section = type opaque
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.gimple_statement_asm = type { %struct.gimple_statement_with_memory_ops_base, i8*, i8, i8, i8, i8, [1 x %union.tree_node*] }
%struct.gimple_statement_with_memory_ops_base = type { %struct.gimple_statement_with_ops_base, %union.tree_node*, %union.tree_node* }
%struct.gimple_statement_with_ops_base = type { %struct.gimple_statement_base, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.walk_stmt_info = type { %struct.gimple_stmt_iterator, i8*, %struct.pointer_set_t*, i8, i8, i8, i8, %union.tree_node* }
%struct.pointer_set_t = type opaque
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.tree_string = type { %struct.tree_common, i32, [1 x i8] }
%struct.gimple_omp_for_iter = type { i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }
%struct.count_ptr_d = type { %union.tree_node*, i32, i32 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.cgraph_node = type { %union.tree_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_node*, %struct.htab*, i8*, %struct.VEC_ipa_opt_pass_heap*, %struct.cgraph_local_info, %struct.cgraph_global_info, %struct.cgraph_rtl_info, %struct.cgraph_clone_info, %struct.cgraph_thunk_info, i64, i32, i32, i32, i16 }
%struct.cgraph_edge = type { i64, %struct.cgraph_node*, %struct.cgraph_node*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %struct.cgraph_edge*, %union.gimple_statement_d*, i8*, i32, i32, i32, i32, i16, i8 }
%struct.VEC_ipa_opt_pass_heap = type { %struct.VEC_ipa_opt_pass_base }
%struct.VEC_ipa_opt_pass_base = type { i32, i32, [1 x %struct.ipa_opt_pass_d*] }
%struct.ipa_opt_pass_d = type opaque
%struct.cgraph_local_info = type { %struct.lto_file_decl_data*, %struct.inline_summary, i8 }
%struct.lto_file_decl_data = type opaque
%struct.inline_summary = type { i64, i32, i32, i32, i32 }
%struct.cgraph_global_info = type { i64, i64, %struct.cgraph_node*, i32, i32, i32, i8 }
%struct.cgraph_rtl_info = type { i32 }
%struct.cgraph_clone_info = type { %struct.VEC_ipa_replace_map_p_gc*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_ipa_replace_map_p_gc = type { %struct.VEC_ipa_replace_map_p_base }
%struct.VEC_ipa_replace_map_p_base = type { i32, i32, [1 x %struct.ipa_replace_map*] }
%struct.ipa_replace_map = type { %union.tree_node*, %union.tree_node*, i8, i8 }
%struct.cgraph_thunk_info = type { i64, i64, %union.tree_node*, i8, i8, i8 }
%struct.sccs = type { i32, i32, i8, i32 }
%struct.type_pair_d = type { i32, i32, i32 }

@stdout = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@gimple_ops_offset_ = dso_local local_unnamed_addr constant <{ i64, i64, i64, i64, i64, [18 x i64] }> <{ i64 0, i64 48, i64 0, i64 64, i64 80, [18 x i64] zeroinitializer }>, align 16, !dbg !0
@.str = private unnamed_addr constant [18 x i8] c"gimple_error_mark\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"gimple_cond\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"gimple_debug\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"gimple_goto\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"gimple_label\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"gimple_switch\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"gimple_assign\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"gimple_asm\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"gimple_call\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"gimple_return\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"gimple_bind\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"gimple_catch\00", align 1
@.str.12 = private unnamed_addr constant [17 x i8] c"gimple_eh_filter\00", align 1
@.str.13 = private unnamed_addr constant [25 x i8] c"gimple_eh_must_not_throw\00", align 1
@.str.14 = private unnamed_addr constant [12 x i8] c"gimple_resx\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"gimple_eh_dispatch\00", align 1
@.str.16 = private unnamed_addr constant [11 x i8] c"gimple_phi\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"gimple_try\00", align 1
@.str.18 = private unnamed_addr constant [11 x i8] c"gimple_nop\00", align 1
@.str.19 = private unnamed_addr constant [23 x i8] c"gimple_omp_atomic_load\00", align 1
@.str.20 = private unnamed_addr constant [24 x i8] c"gimple_omp_atomic_store\00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c"gimple_omp_continue\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c"gimple_omp_critical\00", align 1
@.str.23 = private unnamed_addr constant [15 x i8] c"gimple_omp_for\00", align 1
@.str.24 = private unnamed_addr constant [18 x i8] c"gimple_omp_master\00", align 1
@.str.25 = private unnamed_addr constant [19 x i8] c"gimple_omp_ordered\00", align 1
@.str.26 = private unnamed_addr constant [20 x i8] c"gimple_omp_parallel\00", align 1
@.str.27 = private unnamed_addr constant [16 x i8] c"gimple_omp_task\00", align 1
@.str.28 = private unnamed_addr constant [18 x i8] c"gimple_omp_return\00", align 1
@.str.29 = private unnamed_addr constant [19 x i8] c"gimple_omp_section\00", align 1
@.str.30 = private unnamed_addr constant [20 x i8] c"gimple_omp_sections\00", align 1
@.str.31 = private unnamed_addr constant [27 x i8] c"gimple_omp_sections_switch\00", align 1
@.str.32 = private unnamed_addr constant [18 x i8] c"gimple_omp_single\00", align 1
@.str.33 = private unnamed_addr constant [15 x i8] c"gimple_predict\00", align 1
@.str.34 = private unnamed_addr constant [25 x i8] c"gimple_with_cleanup_expr\00", align 1
@gimple_code_name = dso_local local_unnamed_addr constant [35 x i8*] [i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.12, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.16, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.18, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.34, i32 0, i32 0)], align 16, !dbg !1610
@gss_for_code_ = dso_local local_unnamed_addr constant [35 x i32] [i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 3, i32 4, i32 3, i32 3, i32 5, i32 8, i32 9, i32 10, i32 11, i32 11, i32 6, i32 7, i32 0, i32 21, i32 22, i32 20, i32 14, i32 15, i32 13, i32 13, i32 16, i32 17, i32 0, i32 13, i32 18, i32 0, i32 19, i32 0, i32 12], align 16, !dbg !1616
@.str.35 = private unnamed_addr constant [9 x i8] c"gimple.c\00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@tree_code_type = external dso_local local_unnamed_addr constant [0 x i32], align 4
@global_trees = external dso_local local_unnamed_addr global [131 x %union.tree_node*], align 16
@gimple_seq_cache = internal global %struct.gimple_seq_d* null, align 8, !dbg !1647
@input_location = external dso_local local_unnamed_addr global i32, align 4
@cfun = external dso_local local_unnamed_addr global %struct.function*, align 8
@flag_var_tracking_assignments = external dso_local local_unnamed_addr global i32, align 4
@stderr = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.37 = private unnamed_addr constant [22 x i8] c"No gimple statistics\0A\00", align 1
@gimple_rhs_class_table = dso_local local_unnamed_addr constant [191 x i8] calign 16, !dbg !1620
@gimple_types = internal unnamed_addr global %struct.htab* null, align 8, !dbg !1639
@.str.38 = private unnamed_addr constant [85 x i8] c"GIMPLE type table: size %ld, %ld elements, %ld searches, %ld collisions (ratio: %f)\0A\00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"GIMPLE type table is empty\0A\00", align 1
@gtc_visited = internal global %struct.htab* null, align 8, !dbg !1643
@.str.40 = private unnamed_addr constant [96 x i8] c"GIMPLE type comparison table: size %ld, %ld elements, %ld searches, %ld collisions (ratio: %f)\0A\00", align 1
@.str.41 = private unnamed_addr constant [39 x i8] c"GIMPLE type comparison table is empty\0A\00", align 1
@flag_lto_report = external dso_local local_unnamed_addr global i32, align 4
@type_hash_cache = internal unnamed_addr global %struct.pointer_map_t* null, align 8, !dbg !1641
@gtc_ob = internal global %struct.obstack zeroinitializer, align 8, !dbg !1645
@integer_types = external dso_local local_unnamed_addr global [11 x %union.tree_node*], align 16
@tree_contains_struct = external dso_local local_unnamed_addr global [191 x [64 x i8]], align 16
@gt_ggc_rd_gt_gimple_h = dso_local local_unnamed_addr constant [2 x %struct.ggc_root_tab] [%struct.ggc_root_tab { i8* bitcast (%struct.gimple_seq_d** @gimple_seq_cache to i8*), i64 1, i64 8, void (i8*)* null, void (i8*)* null }, %struct.ggc_root_tab zeroinitializer], align 16, !dbg !1625
@gsstruct_code_size = internal unnamed_addr constant [23 x i64] [i64 32, i64 56, i64 64, i64 72, i64 88, i64 56, i64 96, i64 48, i64 48, i64 48, i64 40, i64 40, i64 40, i64 40, i64 48, i64 72, i64 64, i64 88, i64 56, i64 48, i64 48, i64 48, i64 40], align 16, !dbg !1649
@.str.42 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@flag_trapv = external dso_local local_unnamed_addr global i32, align 4
@tree_code_length = external dso_local local_unnamed_addr constant [0 x i8], align 1
@next_dfs_num = internal unnamed_addr global i32 0, align 4, !dbg !1655
@targetm = external dso_local local_unnamed_addr global %struct.gcc_target, align 8
@.str.43 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @vprintf(i8* noalias %__fmt, %struct.__va_list_tag* %__arg) local_unnamed_addr #0 !dbg !1661 {
entry:
  call void @llvm.dbg.value(metadata i8* %__fmt, metadata !1674, metadata !DIExpression()), !dbg !1676
  call void @llvm.dbg.value(metadata %struct.__va_list_tag* %__arg, metadata !1675, metadata !DIExpression()), !dbg !1676
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1677
  %call = tail call i32 @vfprintf(%struct._IO_FILE* %0, i8* %__fmt, %struct.__va_list_tag* %__arg) #7, !dbg !1678
  ret i32 %call, !dbg !1679
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 !dbg !1680 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !1684
  %call = tail call i32 @getc(%struct._IO_FILE* %0) #7, !dbg !1685
  ret i32 %call, !dbg !1686
}

declare dso_local i32 @getc(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fgetc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !1687 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !1742, metadata !DIExpression()), !dbg !1743
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !1744
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !1744
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !1744
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !1744
  %cmp = icmp uge i8* %0, %1, !dbg !1744
  %conv1 = zext i1 %cmp to i64, !dbg !1744
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1744
  %tobool = icmp eq i64 %expval, 0, !dbg !1744
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1744

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #7, !dbg !1744
  br label %cond.end, !dbg !1744

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !1744
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !1744
  %2 = load i8, i8* %0, align 1, !dbg !1744
  %conv3 = zext i8 %2 to i32, !dbg !1744
  br label %cond.end, !dbg !1744

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !1744
  ret i32 %cond, !dbg !1745
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #3

declare dso_local i32 @__uflow(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !1746 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !1748, metadata !DIExpression()), !dbg !1749
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !1750
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !1750
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !1750
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !1750
  %cmp = icmp uge i8* %0, %1, !dbg !1750
  %conv1 = zext i1 %cmp to i64, !dbg !1750
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1750
  %tobool = icmp eq i64 %expval, 0, !dbg !1750
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1750

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #7, !dbg !1750
  br label %cond.end, !dbg !1750

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !1750
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !1750
  %2 = load i8, i8* %0, align 1, !dbg !1750
  %conv3 = zext i8 %2 to i32, !dbg !1750
  br label %cond.end, !dbg !1750

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !1750
  ret i32 %cond, !dbg !1751
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #0 !dbg !1752 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !1753
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 1, !dbg !1753
  %1 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !1753
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 2, !dbg !1753
  %2 = load i8*, i8** %_IO_read_end, align 8, !dbg !1753
  %cmp = icmp uge i8* %1, %2, !dbg !1753
  %conv1 = zext i1 %cmp to i64, !dbg !1753
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1753
  %tobool = icmp eq i64 %expval, 0, !dbg !1753
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1753

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %0) #7, !dbg !1753
  br label %cond.end, !dbg !1753

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !1753
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !1753
  %3 = load i8, i8* %1, align 1, !dbg !1753
  %conv3 = zext i8 %3 to i32, !dbg !1753
  br label %cond.end, !dbg !1753

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !1753
  ret i32 %cond, !dbg !1754
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar(i32 %__c) local_unnamed_addr #0 !dbg !1755 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !1759, metadata !DIExpression()), !dbg !1760
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1761
  %call = tail call i32 @putc(i32 %__c, %struct._IO_FILE* %0) #7, !dbg !1762
  ret i32 %call, !dbg !1763
}

declare dso_local i32 @putc(i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fputc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !1764 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !1768, metadata !DIExpression()), !dbg !1770
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !1769, metadata !DIExpression()), !dbg !1770
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !1771
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !1771
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !1771
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !1771
  %cmp = icmp uge i8* %0, %1, !dbg !1771
  %conv1 = zext i1 %cmp to i64, !dbg !1771
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1771
  %tobool = icmp eq i64 %expval, 0, !dbg !1771
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1771

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !1771
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #7, !dbg !1771
  br label %cond.end, !dbg !1771

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !1771
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !1771
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !1771
  store i8 %conv2, i8* %0, align 1, !dbg !1771
  %conv6 = and i32 %__c, 255, !dbg !1771
  br label %cond.end, !dbg !1771

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !1771
  ret i32 %cond, !dbg !1772
}

declare dso_local i32 @__overflow(%struct._IO_FILE*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !1773 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !1775, metadata !DIExpression()), !dbg !1777
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !1776, metadata !DIExpression()), !dbg !1777
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !1778
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !1778
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !1778
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !1778
  %cmp = icmp uge i8* %0, %1, !dbg !1778
  %conv1 = zext i1 %cmp to i64, !dbg !1778
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1778
  %tobool = icmp eq i64 %expval, 0, !dbg !1778
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1778

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !1778
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #7, !dbg !1778
  br label %cond.end, !dbg !1778

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !1778
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !1778
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !1778
  store i8 %conv2, i8* %0, align 1, !dbg !1778
  %conv6 = and i32 %__c, 255, !dbg !1778
  br label %cond.end, !dbg !1778

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !1778
  ret i32 %cond, !dbg !1779
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar_unlocked(i32 %__c) local_unnamed_addr #0 !dbg !1780 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !1782, metadata !DIExpression()), !dbg !1783
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1784
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 5, !dbg !1784
  %1 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !1784
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 6, !dbg !1784
  %2 = load i8*, i8** %_IO_write_end, align 8, !dbg !1784
  %cmp = icmp uge i8* %1, %2, !dbg !1784
  %conv1 = zext i1 %cmp to i64, !dbg !1784
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !1784
  %tobool = icmp eq i64 %expval, 0, !dbg !1784
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !1784

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !1784
  %call = tail call i32 @__overflow(%struct._IO_FILE* %0, i32 %conv3) #7, !dbg !1784
  br label %cond.end, !dbg !1784

cond.false:                                       ; preds = %entry
  %conv4 = trunc i32 %__c to i8, !dbg !1784
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !1784
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !1784
  store i8 %conv4, i8* %1, align 1, !dbg !1784
  %conv6 = and i32 %__c, 255, !dbg !1784
  br label %cond.end, !dbg !1784

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !1784
  ret i32 %cond, !dbg !1785
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @getline(i8** %__lineptr, i64* %__n, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !1786 {
entry:
  call void @llvm.dbg.value(metadata i8** %__lineptr, metadata !1792, metadata !DIExpression()), !dbg !1795
  call void @llvm.dbg.value(metadata i64* %__n, metadata !1793, metadata !DIExpression()), !dbg !1795
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !1794, metadata !DIExpression()), !dbg !1795
  %call = tail call i64 @__getdelim(i8** %__lineptr, i64* %__n, i32 10, %struct._IO_FILE* %__stream) #7, !dbg !1796
  ret i64 %call, !dbg !1797
}

declare dso_local i64 @__getdelim(i8**, i64*, i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @feof_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !1798 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !1800, metadata !DIExpression()), !dbg !1801
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !1802
  %0 = load i32, i32* %_flags, align 8, !dbg !1802
  %and = lshr i32 %0, 4, !dbg !1802
  %and.lobit = and i32 %and, 1, !dbg !1802
  ret i32 %and.lobit, !dbg !1803
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @ferror_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !1804 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !1806, metadata !DIExpression()), !dbg !1807
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !1808
  %0 = load i32, i32* %_flags, align 8, !dbg !1808
  %and = lshr i32 %0, 5, !dbg !1808
  %and.lobit = and i32 %and, 1, !dbg !1808
  ret i32 %and.lobit, !dbg !1809
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @tolower(i32 %__c) local_unnamed_addr #0 !dbg !1810 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !1813, metadata !DIExpression()), !dbg !1814
  %__c.off = add i32 %__c, 128, !dbg !1815
  %0 = icmp ult i32 %__c.off, 384, !dbg !1815
  br i1 %0, label %cond.true, label %cond.end, !dbg !1815

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_tolower_loc() #7, !dbg !1816
  %1 = load i32*, i32** %call, align 8, !dbg !1817
  %idxprom = sext i32 %__c to i64, !dbg !1818
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !1818
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1818
  br label %cond.end, !dbg !1819

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !1819
  ret i32 %cond, !dbg !1820
}

declare dso_local i32** @__ctype_tolower_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @toupper(i32 %__c) local_unnamed_addr #0 !dbg !1821 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !1823, metadata !DIExpression()), !dbg !1824
  %__c.off = add i32 %__c, 128, !dbg !1825
  %0 = icmp ult i32 %__c.off, 384, !dbg !1825
  br i1 %0, label %cond.true, label %cond.end, !dbg !1825

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_toupper_loc() #7, !dbg !1826
  %1 = load i32*, i32** %call, align 8, !dbg !1827
  %idxprom = sext i32 %__c to i64, !dbg !1828
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !1828
  %2 = load i32, i32* %arrayidx, align 4, !dbg !1828
  br label %cond.end, !dbg !1829

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !1829
  ret i32 %cond, !dbg !1830
}

declare dso_local i32** @__ctype_toupper_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @atoi(i8* %__nptr) local_unnamed_addr #0 !dbg !1831 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !1836, metadata !DIExpression()), !dbg !1837
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #7, !dbg !1838
  %conv = trunc i64 %call to i32, !dbg !1839
  ret i32 %conv, !dbg !1840
}

declare dso_local i64 @strtol(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atol(i8* %__nptr) local_unnamed_addr #0 !dbg !1841 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !1845, metadata !DIExpression()), !dbg !1846
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #7, !dbg !1847
  ret i64 %call, !dbg !1848
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atoll(i8* %__nptr) local_unnamed_addr #0 !dbg !1849 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !1854, metadata !DIExpression()), !dbg !1855
  %call = tail call i64 @strtoll(i8* %__nptr, i8** null, i32 10) #7, !dbg !1856
  ret i64 %call, !dbg !1857
}

declare dso_local i64 @strtoll(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i8* @bsearch(i8* %__key, i8* %__base, i64 %__nmemb, i64 %__size, i32 (i8*, i8*)* %__compar) local_unnamed_addr #0 !dbg !1858 {
entry:
  call void @llvm.dbg.value(metadata i8* %__key, metadata !1864, metadata !DIExpression()), !dbg !1874
  call void @llvm.dbg.value(metadata i8* %__base, metadata !1865, metadata !DIExpression()), !dbg !1874
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !1866, metadata !DIExpression()), !dbg !1874
  call void @llvm.dbg.value(metadata i64 %__size, metadata !1867, metadata !DIExpression()), !dbg !1874
  call void @llvm.dbg.value(metadata i32 (i8*, i8*)* %__compar, metadata !1868, metadata !DIExpression()), !dbg !1874
  call void @llvm.dbg.value(metadata i64 0, metadata !1869, metadata !DIExpression()), !dbg !1874
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !1870, metadata !DIExpression()), !dbg !1874
  br label %while.cond, !dbg !1875

while.cond:                                       ; preds = %if.end6, %entry
  %__l.0 = phi i64 [ 0, %entry ], [ %__l.1, %if.end6 ], !dbg !1876
  %__u.0 = phi i64 [ %__nmemb, %entry ], [ %__u.1, %if.end6 ], !dbg !1874
  call void @llvm.dbg.value(metadata i64 %__u.0, metadata !1870, metadata !DIExpression()), !dbg !1874
  call void @llvm.dbg.value(metadata i64 %__l.0, metadata !1869, metadata !DIExpression()), !dbg !1874
  %cmp = icmp ult i64 %__l.0, %__u.0, !dbg !1877
  br i1 %cmp, label %while.body, label %cleanup, !dbg !1875

while.body:                                       ; preds = %while.cond
  %add = add i64 %__l.0, %__u.0, !dbg !1878
  %div = lshr i64 %add, 1, !dbg !1880
  call void @llvm.dbg.value(metadata i64 %div, metadata !1871, metadata !DIExpression()), !dbg !1874
  %mul = mul i64 %div, %__size, !dbg !1881
  %add.ptr = getelementptr inbounds i8, i8* %__base, i64 %mul, !dbg !1882
  call void @llvm.dbg.value(metadata i8* %add.ptr, metadata !1872, metadata !DIExpression()), !dbg !1874
  %call = tail call i32 %__compar(i8* %__key, i8* %add.ptr) #7, !dbg !1883
  call void @llvm.dbg.value(metadata i32 %call, metadata !1873, metadata !DIExpression()), !dbg !1874
  %cmp1 = icmp slt i32 %call, 0, !dbg !1884
  br i1 %cmp1, label %if.end6, label %if.else, !dbg !1886

if.else:                                          ; preds = %while.body
  %cmp2 = icmp eq i32 %call, 0, !dbg !1887
  br i1 %cmp2, label %cleanup, label %if.then3, !dbg !1889

if.then3:                                         ; preds = %if.else
  %add4 = add nuw i64 %div, 1, !dbg !1890
  call void @llvm.dbg.value(metadata i64 %add4, metadata !1869, metadata !DIExpression()), !dbg !1874
  br label %if.end6

if.end6:                                          ; preds = %while.body, %if.then3
  %__l.1 = phi i64 [ %add4, %if.then3 ], [ %__l.0, %while.body ], !dbg !1874
  %__u.1 = phi i64 [ %__u.0, %if.then3 ], [ %div, %while.body ], !dbg !1874
  call void @llvm.dbg.value(metadata i64 %__u.1, metadata !1870, metadata !DIExpression()), !dbg !1874
  call void @llvm.dbg.value(metadata i64 %__l.1, metadata !1869, metadata !DIExpression()), !dbg !1874
  br label %while.cond, !dbg !1875, !llvm.loop !1891

cleanup:                                          ; preds = %if.else, %while.cond
  %retval.0 = phi i8* [ %add.ptr, %if.else ], [ null, %while.cond ], !dbg !1874
  ret i8* %retval.0, !dbg !1893
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: inlinehint nounwind uwtable
define dso_local double @atof(i8* %__nptr) local_unnamed_addr #0 !dbg !1894 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !1900, metadata !DIExpression()), !dbg !1901
  %call = tail call double @strtod(i8* %__nptr, i8** null) #7, !dbg !1902
  ret double %call, !dbg !1903
}

declare dso_local double @strtod(i8*, i8**) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoimax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !1904 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !1913, metadata !DIExpression()), !dbg !1916
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !1914, metadata !DIExpression()), !dbg !1916
  call void @llvm.dbg.value(metadata i32 %base, metadata !1915, metadata !DIExpression()), !dbg !1916
  %call = tail call i64 @__strtol_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #7, !dbg !1917
  ret i64 %call, !dbg !1918
}

declare dso_local i64 @__strtol_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoumax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !1919 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !1925, metadata !DIExpression()), !dbg !1928
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !1926, metadata !DIExpression()), !dbg !1928
  call void @llvm.dbg.value(metadata i32 %base, metadata !1927, metadata !DIExpression()), !dbg !1928
  %call = tail call i64 @__strtoul_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #7, !dbg !1929
  ret i64 %call, !dbg !1930
}

declare dso_local i64 @__strtoul_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoimax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !1931 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !1942, metadata !DIExpression()), !dbg !1945
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !1943, metadata !DIExpression()), !dbg !1945
  call void @llvm.dbg.value(metadata i32 %base, metadata !1944, metadata !DIExpression()), !dbg !1945
  %call = tail call i64 @__wcstol_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #7, !dbg !1946
  ret i64 %call, !dbg !1947
}

declare dso_local i64 @__wcstol_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoumax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !1948 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !1952, metadata !DIExpression()), !dbg !1955
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !1953, metadata !DIExpression()), !dbg !1955
  call void @llvm.dbg.value(metadata i32 %base, metadata !1954, metadata !DIExpression()), !dbg !1955
  %call = tail call i64 @__wcstoul_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #7, !dbg !1956
  ret i64 %call, !dbg !1957
}

declare dso_local i64 @__wcstoul_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !1958 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2000, metadata !DIExpression()), !dbg !2002
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2001, metadata !DIExpression()), !dbg !2002
  %call = tail call i32 @__xstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #7, !dbg !2003
  ret i32 %call, !dbg !2004
}

declare dso_local i32 @__xstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2005 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2007, metadata !DIExpression()), !dbg !2009
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2008, metadata !DIExpression()), !dbg !2009
  %call = tail call i32 @__lxstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #7, !dbg !2010
  ret i32 %call, !dbg !2011
}

declare dso_local i32 @__lxstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat(i32 %__fd, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2012 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2016, metadata !DIExpression()), !dbg !2018
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2017, metadata !DIExpression()), !dbg !2018
  %call = tail call i32 @__fxstat(i32 1, i32 %__fd, %struct.stat* %__statbuf) #7, !dbg !2019
  ret i32 %call, !dbg !2020
}

declare dso_local i32 @__fxstat(i32, i32, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat(i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2021 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2025, metadata !DIExpression()), !dbg !2029
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2026, metadata !DIExpression()), !dbg !2029
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2027, metadata !DIExpression()), !dbg !2029
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2028, metadata !DIExpression()), !dbg !2029
  %call = tail call i32 @__fxstatat(i32 1, i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) #7, !dbg !2030
  ret i32 %call, !dbg !2031
}

declare dso_local i32 @__fxstatat(i32, i32, i8*, %struct.stat*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknod(i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2032 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2036, metadata !DIExpression()), !dbg !2039
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2037, metadata !DIExpression()), !dbg !2039
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2038, metadata !DIExpression()), !dbg !2039
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2038, metadata !DIExpression(DW_OP_deref)), !dbg !2039
  %call = call i32 @__xmknod(i32 0, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #7, !dbg !2040
  ret i32 %call, !dbg !2041
}

declare dso_local i32 @__xmknod(i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknodat(i32 %__fd, i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2042 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2046, metadata !DIExpression()), !dbg !2050
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2047, metadata !DIExpression()), !dbg !2050
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2048, metadata !DIExpression()), !dbg !2050
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2049, metadata !DIExpression()), !dbg !2050
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2049, metadata !DIExpression(DW_OP_deref)), !dbg !2050
  %call = call i32 @__xmknodat(i32 0, i32 %__fd, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #7, !dbg !2051
  ret i32 %call, !dbg !2052
}

declare dso_local i32 @__xmknodat(i32, i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2053 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2077, metadata !DIExpression()), !dbg !2079
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2078, metadata !DIExpression()), !dbg !2079
  %call = tail call i32 @__xstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #7, !dbg !2080
  ret i32 %call, !dbg !2081
}

declare dso_local i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2082 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2084, metadata !DIExpression()), !dbg !2086
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2085, metadata !DIExpression()), !dbg !2086
  %call = tail call i32 @__lxstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #7, !dbg !2087
  ret i32 %call, !dbg !2088
}

declare dso_local i32 @__lxstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat64(i32 %__fd, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2089 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2093, metadata !DIExpression()), !dbg !2095
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2094, metadata !DIExpression()), !dbg !2095
  %call = tail call i32 @__fxstat64(i32 1, i32 %__fd, %struct.stat64* %__statbuf) #7, !dbg !2096
  ret i32 %call, !dbg !2097
}

declare dso_local i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat64(i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2098 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2102, metadata !DIExpression()), !dbg !2106
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2103, metadata !DIExpression()), !dbg !2106
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2104, metadata !DIExpression()), !dbg !2106
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2105, metadata !DIExpression()), !dbg !2106
  %call = tail call i32 @__fxstatat64(i32 1, i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) #7, !dbg !2107
  ret i32 %call, !dbg !2108
}

declare dso_local i32 @__fxstatat64(i32, i32, i8*, %struct.stat64*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_alloc_stat(i32 %code, i32 %num_ops) local_unnamed_addr #5 !dbg !2109 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !2113, metadata !DIExpression()), !dbg !2117
  call void @llvm.dbg.value(metadata i32 %num_ops, metadata !2114, metadata !DIExpression()), !dbg !2117
  %call = tail call fastcc i64 @gimple_size(i32 %code) #8, !dbg !2118
  call void @llvm.dbg.value(metadata i64 %call, metadata !2115, metadata !DIExpression()), !dbg !2117
  %cmp = icmp eq i32 %num_ops, 0, !dbg !2119
  br i1 %cmp, label %if.end, label %if.then, !dbg !2121

if.then:                                          ; preds = %entry
  %sub = add i32 %num_ops, -1, !dbg !2122
  %conv = zext i32 %sub to i64, !dbg !2123
  %mul = shl nuw nsw i64 %conv, 3, !dbg !2124
  %add = add i64 %call, %mul, !dbg !2125
  call void @llvm.dbg.value(metadata i64 %add, metadata !2115, metadata !DIExpression()), !dbg !2117
  br label %if.end, !dbg !2126

if.end:                                           ; preds = %entry, %if.then
  %size.0 = phi i64 [ %add, %if.then ], [ %call, %entry ], !dbg !2117
  call void @llvm.dbg.value(metadata i64 %size.0, metadata !2115, metadata !DIExpression()), !dbg !2117
  %call1 = tail call i8* @ggc_alloc_cleared_stat(i64 %size.0) #7, !dbg !2127
  %0 = bitcast i8* %call1 to %union.gimple_statement_d*, !dbg !2128
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %0, metadata !2116, metadata !DIExpression()), !dbg !2117
  tail call fastcc void @gimple_set_code(%union.gimple_statement_d* %0, i32 %code) #8, !dbg !2129
  tail call fastcc void @gimple_set_num_ops(%union.gimple_statement_d* %0, i32 %num_ops) #8, !dbg !2130
  %1 = bitcast i8* %call1 to i32*, !dbg !2131
  %bf.load = load i32, i32* %1, align 8, !dbg !2132
  %bf.set = or i32 %bf.load, 8192, !dbg !2132
  store i32 %bf.set, i32* %1, align 8, !dbg !2132
  ret %union.gimple_statement_d* %0, !dbg !2133
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i64 @gimple_size(i32 %code) unnamed_addr #0 !dbg !2134 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !2138, metadata !DIExpression()), !dbg !2139
  %call = tail call fastcc i32 @gss_for_code(i32 %code) #8, !dbg !2140
  %idxprom = zext i32 %call to i64, !dbg !2141
  %arrayidx = getelementptr inbounds [23 x i64], [23 x i64]* @gsstruct_code_size, i64 0, i64 %idxprom, !dbg !2141
  %0 = load i64, i64* %arrayidx, align 8, !dbg !2141
  ret i64 %0, !dbg !2142
}

declare dso_local i8* @ggc_alloc_cleared_stat(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_code(%union.gimple_statement_d* %g, i32 %code) unnamed_addr #0 !dbg !2143 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !2147, metadata !DIExpression()), !dbg !2149
  call void @llvm.dbg.value(metadata i32 %code, metadata !2148, metadata !DIExpression()), !dbg !2149
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 0, !dbg !2150
  %bf.load = load i32, i32* %0, align 8, !dbg !2151
  %bf.value = and i32 %code, 255, !dbg !2151
  %bf.clear = and i32 %bf.load, -256, !dbg !2151
  %bf.set = or i32 %bf.clear, %bf.value, !dbg !2151
  store i32 %bf.set, i32* %0, align 8, !dbg !2151
  ret void, !dbg !2152
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_num_ops(%union.gimple_statement_d* %gs, i32 %num_ops) unnamed_addr #0 !dbg !2153 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2157, metadata !DIExpression()), !dbg !2159
  call void @llvm.dbg.value(metadata i32 %num_ops, metadata !2158, metadata !DIExpression()), !dbg !2159
  %num_ops1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 3, !dbg !2160
  store i32 %num_ops, i32* %num_ops1, align 4, !dbg !2161
  ret void, !dbg !2162
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_return(%union.tree_node* %retval1) local_unnamed_addr #5 !dbg !2163 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %retval1, metadata !2167, metadata !DIExpression()), !dbg !2169
  %call = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 9, i32 0, i32 1) #8, !dbg !2170
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !2168, metadata !DIExpression()), !dbg !2169
  %tobool = icmp eq %union.tree_node* %retval1, null, !dbg !2171
  br i1 %tobool, label %if.end, label %if.then, !dbg !2173

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_return_set_retval(%union.gimple_statement_d* %call, %union.tree_node* nonnull %retval1) #8, !dbg !2174
  br label %if.end, !dbg !2174

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !2175
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 %code, i32 %subcode, i32 %num_ops) unnamed_addr #5 !dbg !2176 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !2180, metadata !DIExpression()), !dbg !2184
  call void @llvm.dbg.value(metadata i32 %subcode, metadata !2181, metadata !DIExpression()), !dbg !2184
  call void @llvm.dbg.value(metadata i32 %num_ops, metadata !2182, metadata !DIExpression()), !dbg !2184
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 %code, i32 %num_ops) #8, !dbg !2185
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !2183, metadata !DIExpression()), !dbg !2184
  tail call fastcc void @gimple_set_subcode(%union.gimple_statement_d* %call, i32 %subcode) #8, !dbg !2186
  ret %union.gimple_statement_d* %call, !dbg !2187
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_return_set_retval(%union.gimple_statement_d* %gs, %union.tree_node* %retval) unnamed_addr #0 !dbg !2188 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2192, metadata !DIExpression()), !dbg !2194
  call void @llvm.dbg.value(metadata %union.tree_node* %retval, metadata !2193, metadata !DIExpression()), !dbg !2194
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %retval) #8, !dbg !2195
  ret void, !dbg !2196
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %fn, %struct.VEC_tree_heap* %args) local_unnamed_addr #5 !dbg !2197 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %fn, metadata !2201, metadata !DIExpression()), !dbg !2206
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %args, metadata !2202, metadata !DIExpression()), !dbg !2206
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %args, i64 0, i32 0, !dbg !2207
  %call = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base) #8, !dbg !2207
  call void @llvm.dbg.value(metadata i32 %call, metadata !2204, metadata !DIExpression()), !dbg !2206
  %call2 = tail call fastcc %union.gimple_statement_d* @gimple_build_call_1(%union.tree_node* %fn, i32 %call) #8, !dbg !2208
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call2, metadata !2205, metadata !DIExpression()), !dbg !2206
  call void @llvm.dbg.value(metadata i32 0, metadata !2203, metadata !DIExpression()), !dbg !2206
  br label %for.cond, !dbg !2209

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ], !dbg !2211
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !2203, metadata !DIExpression()), !dbg !2206
  %exitcond = icmp eq i32 %i.0, %call, !dbg !2212
  br i1 %exitcond, label %for.end, label %for.body, !dbg !2214

for.body:                                         ; preds = %for.cond
  %call9 = tail call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %base, i32 %i.0) #8, !dbg !2215
  tail call fastcc void @gimple_call_set_arg(%union.gimple_statement_d* %call2, i32 %i.0, %union.tree_node* %call9) #8, !dbg !2216
  %inc = add i32 %i.0, 1, !dbg !2217
  call void @llvm.dbg.value(metadata i32 %inc, metadata !2203, metadata !DIExpression()), !dbg !2206
  br label %for.cond, !dbg !2218, !llvm.loop !2219

for.end:                                          ; preds = %for.cond
  ret %union.gimple_statement_d* %call2, !dbg !2221
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) unnamed_addr #0 !dbg !2222 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !2228, metadata !DIExpression()), !dbg !2229
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !2230
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !2230

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !2230
  %0 = load i32, i32* %num, align 8, !dbg !2230
  br label %cond.end, !dbg !2230

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !2230
  ret i32 %cond, !dbg !2230
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gimple_build_call_1(%union.tree_node* %fn, i32 %nargs) unnamed_addr #0 !dbg !2231 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %fn, metadata !2235, metadata !DIExpression()), !dbg !2238
  call void @llvm.dbg.value(metadata i32 %nargs, metadata !2236, metadata !DIExpression()), !dbg !2238
  %add = add i32 %nargs, 3, !dbg !2239
  %call = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 8, i32 0, i32 %add) #8, !dbg !2239
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !2237, metadata !DIExpression()), !dbg !2238
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %fn, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2240
  %bf.load = load i64, i64* %0, align 8, !dbg !2240
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2242
  %cmp = icmp eq i64 %bf.cast1, 29, !dbg !2242
  br i1 %cmp, label %if.then, label %if.end, !dbg !2243

if.then:                                          ; preds = %entry
  %call1 = tail call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %fn) #7, !dbg !2244
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !2235, metadata !DIExpression()), !dbg !2238
  br label %if.end, !dbg !2245

if.end:                                           ; preds = %if.then, %entry
  %fn.addr.0 = phi %union.tree_node* [ %call1, %if.then ], [ %fn, %entry ]
  call void @llvm.dbg.value(metadata %union.tree_node* %fn.addr.0, metadata !2235, metadata !DIExpression()), !dbg !2238
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %call, i32 1, %union.tree_node* %fn.addr.0) #8, !dbg !2246
  ret %union.gimple_statement_d* %call, !dbg !2247
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_arg(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %arg) unnamed_addr #0 !dbg !2248 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2252, metadata !DIExpression()), !dbg !2255
  call void @llvm.dbg.value(metadata i32 %index, metadata !2253, metadata !DIExpression()), !dbg !2255
  call void @llvm.dbg.value(metadata %union.tree_node* %arg, metadata !2254, metadata !DIExpression()), !dbg !2255
  %add = add i32 %index, 3, !dbg !2256
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %add, %union.tree_node* %arg) #8, !dbg !2257
  ret void, !dbg !2258
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !2259 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !2263, metadata !DIExpression()), !dbg !2265
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !2264, metadata !DIExpression()), !dbg !2265
  br label %land.end, !dbg !2266

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !2266
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !2266
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !2266
  ret %union.tree_node* %0, !dbg !2266
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_call(%union.tree_node* %fn, i32 %nargs, ...) local_unnamed_addr #5 !dbg !2267 {
entry:
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.dbg.value(metadata %union.tree_node* %fn, metadata !2271, metadata !DIExpression()), !dbg !2282
  call void @llvm.dbg.value(metadata i32 %nargs, metadata !2272, metadata !DIExpression()), !dbg !2282
  %0 = bitcast [1 x %struct.__va_list_tag]* %ap to i8*, !dbg !2283
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #6, !dbg !2283
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %ap, metadata !2273, metadata !DIExpression()), !dbg !2284
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %fn, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2285
  %bf.load = load i64, i64* %1, align 8, !dbg !2285
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2285
  %cmp = icmp eq i64 %bf.cast1, 29, !dbg !2285
  br i1 %cmp, label %cond.end, label %lor.lhs.false, !dbg !2285

lor.lhs.false:                                    ; preds = %entry
  %call1 = tail call zeroext i8 @is_gimple_call_addr(%union.tree_node* %fn) #8, !dbg !2285
  %tobool = icmp eq i8 %call1, 0, !dbg !2285
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !2285

cond.true:                                        ; preds = %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 243, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2285
  br label %cond.end, !dbg !2285

cond.end:                                         ; preds = %lor.lhs.false, %entry, %cond.true
  %call2 = tail call fastcc %union.gimple_statement_d* @gimple_build_call_1(%union.tree_node* %fn, i32 %nargs) #8, !dbg !2286
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call2, metadata !2280, metadata !DIExpression()), !dbg !2282
  call void @llvm.va_start(i8* %0), !dbg !2287
  call void @llvm.dbg.value(metadata i32 0, metadata !2281, metadata !DIExpression()), !dbg !2282
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 0, !dbg !2288
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 2, !dbg !2288
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %ap, i64 0, i64 0, i32 3, !dbg !2288
  br label %for.cond, !dbg !2291

for.cond:                                         ; preds = %vaarg.end, %cond.end
  %i.0 = phi i32 [ 0, %cond.end ], [ %inc, %vaarg.end ], !dbg !2292
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !2281, metadata !DIExpression()), !dbg !2282
  %exitcond = icmp eq i32 %i.0, %nargs, !dbg !2293
  br i1 %exitcond, label %for.end, label %for.body, !dbg !2294

for.body:                                         ; preds = %for.cond
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !2295
  %fits_in_gp = icmp ult i32 %gp_offset, 41, !dbg !2295
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !2295

vaarg.in_reg:                                     ; preds = %for.body
  %reg_save_area = load i8*, i8** %2, align 16, !dbg !2295
  %3 = sext i32 %gp_offset to i64, !dbg !2295
  %4 = getelementptr i8, i8* %reg_save_area, i64 %3, !dbg !2295
  %5 = add i32 %gp_offset, 8, !dbg !2295
  store i32 %5, i32* %gp_offset_p, align 16, !dbg !2295
  br label %vaarg.end, !dbg !2295

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !2295
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i64 8, !dbg !2295
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !2295
  br label %vaarg.end, !dbg !2295

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %4, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to %union.tree_node**, !dbg !2295
  %6 = load %union.tree_node*, %union.tree_node** %vaarg.addr, align 8, !dbg !2295
  call fastcc void @gimple_call_set_arg(%union.gimple_statement_d* %call2, i32 %i.0, %union.tree_node* %6) #8, !dbg !2296
  %inc = add i32 %i.0, 1, !dbg !2297
  call void @llvm.dbg.value(metadata i32 %inc, metadata !2281, metadata !DIExpression()), !dbg !2282
  br label %for.cond, !dbg !2298, !llvm.loop !2299

for.end:                                          ; preds = %for.cond
  call void @llvm.va_end(i8* nonnull %0), !dbg !2301
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #6, !dbg !2302
  ret %union.gimple_statement_d* %call2, !dbg !2303
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_call_addr(%union.tree_node* %t) local_unnamed_addr #5 !dbg !2304 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !2308, metadata !DIExpression()), !dbg !2309
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2310
  %bf.load = load i64, i64* %0, align 8, !dbg !2310
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2311
  %cmp = icmp eq i64 %bf.cast1, 50, !dbg !2311
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !2312

lor.rhs:                                          ; preds = %entry
  %call = tail call zeroext i8 @is_gimple_val(%union.tree_node* %t) #8, !dbg !2313
  %tobool = icmp ne i8 %call, 0, !dbg !2312
  %phitmp = zext i1 %tobool to i8, !dbg !2312
  br label %lor.end, !dbg !2312

lor.end:                                          ; preds = %lor.rhs, %entry
  %1 = phi i8 [ 1, %entry ], [ %phitmp, %lor.rhs ]
  ret i8 %1, !dbg !2314
}

declare dso_local void @fancy_abort(i8*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #6

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #6

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_call_from_tree(%union.tree_node* %t) local_unnamed_addr #5 !dbg !2315 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !2317, metadata !DIExpression()), !dbg !2322
  %call1 = tail call %union.tree_node* @get_callee_fndecl(%union.tree_node* %t) #7, !dbg !2323
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !2321, metadata !DIExpression()), !dbg !2322
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2324
  %bf.load = load i64, i64* %0, align 8, !dbg !2324
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2324
  %cmp = icmp eq i64 %bf.cast1, 59, !dbg !2324
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !2324

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 267, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2324
  br label %cond.end, !dbg !2324

cond.end:                                         ; preds = %entry, %cond.true
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !2325
  %1 = bitcast %union.tree_node** %operands to %struct.tree_int_cst**, !dbg !2325
  %2 = load %struct.tree_int_cst*, %struct.tree_int_cst** %1, align 8, !dbg !2325
  %low = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %2, i64 0, i32 1, i32 0, !dbg !2325
  %3 = load i64, i64* %low, align 8, !dbg !2325
  %conv = trunc i64 %3 to i32, !dbg !2325
  %sub = add nsw i32 %conv, -3, !dbg !2325
  call void @llvm.dbg.value(metadata i32 %sub, metadata !2319, metadata !DIExpression()), !dbg !2322
  %tobool = icmp eq %union.tree_node* %call1, null, !dbg !2326
  br i1 %tobool, label %cond.false4, label %cond.end8, !dbg !2326

cond.false4:                                      ; preds = %cond.end
  %arrayidx7 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !2327
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx7, align 8, !dbg !2327
  br label %cond.end8, !dbg !2326

cond.end8:                                        ; preds = %cond.end, %cond.false4
  %cond9 = phi %union.tree_node* [ %4, %cond.false4 ], [ %call1, %cond.end ], !dbg !2326
  %call10 = tail call fastcc %union.gimple_statement_d* @gimple_build_call_1(%union.tree_node* %cond9, i32 %sub) #8, !dbg !2328
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call10, metadata !2320, metadata !DIExpression()), !dbg !2322
  call void @llvm.dbg.value(metadata i32 0, metadata !2318, metadata !DIExpression()), !dbg !2322
  %5 = add i64 %3, 4294967293, !dbg !2329
  %wide.trip.count = and i64 %5, 4294967295, !dbg !2331
  br label %for.cond, !dbg !2329

for.cond:                                         ; preds = %for.body, %cond.end8
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %cond.end8 ], !dbg !2333
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !2318, metadata !DIExpression()), !dbg !2322
  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count, !dbg !2331
  br i1 %exitcond, label %for.end, label %for.body, !dbg !2334

for.body:                                         ; preds = %for.cond
  %add = add nuw nsw i64 %indvars.iv, 3, !dbg !2335
  %idxprom = and i64 %add, 4294967295, !dbg !2335
  %arrayidx15 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 %idxprom, !dbg !2335
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx15, align 8, !dbg !2335
  %7 = trunc i64 %indvars.iv to i32, !dbg !2336
  tail call fastcc void @gimple_call_set_arg(%union.gimple_statement_d* %call10, i32 %7, %union.tree_node* %6) #8, !dbg !2336
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !2337
  br label %for.cond, !dbg !2338, !llvm.loop !2339

for.end:                                          ; preds = %for.cond
  %call16 = tail call %union.tree_node** @tree_block(%union.tree_node* %t) #7, !dbg !2341
  %8 = load %union.tree_node*, %union.tree_node** %call16, align 8, !dbg !2341
  tail call fastcc void @gimple_set_block(%union.gimple_statement_d* %call10, %union.tree_node* %8) #8, !dbg !2342
  %arrayidx19 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !2343
  %9 = load %union.tree_node*, %union.tree_node** %arrayidx19, align 8, !dbg !2343
  tail call fastcc void @gimple_call_set_chain(%union.gimple_statement_d* %call10, %union.tree_node* %9) #8, !dbg !2344
  %bf.load21 = load i64, i64* %0, align 8, !dbg !2345
  %bf.lshr = lshr i64 %bf.load21, 18, !dbg !2345
  %10 = trunc i64 %bf.lshr to i8, !dbg !2345
  %bf.cast23 = and i8 %10, 1, !dbg !2345
  tail call fastcc void @gimple_call_set_tail(%union.gimple_statement_d* %call10, i8 zeroext %bf.cast23) #8, !dbg !2346
  %bf.load26 = load i64, i64* %0, align 8, !dbg !2347
  %bf.lshr27 = lshr i64 %bf.load26, 26, !dbg !2347
  %11 = trunc i64 %bf.lshr27 to i8, !dbg !2347
  %bf.cast29 = and i8 %11, 1, !dbg !2347
  tail call fastcc void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %call10, i8 zeroext %bf.cast29) #8, !dbg !2348
  %bf.load32 = load i64, i64* %0, align 8, !dbg !2349
  %bf.lshr33 = lshr i64 %bf.load32, 28, !dbg !2349
  %12 = trunc i64 %bf.lshr33 to i8, !dbg !2349
  %bf.cast35 = and i8 %12, 1, !dbg !2349
  tail call fastcc void @gimple_call_set_return_slot_opt(%union.gimple_statement_d* %call10, i8 zeroext %bf.cast35) #8, !dbg !2350
  %bf.load38 = load i64, i64* %0, align 8, !dbg !2351
  %bf.lshr39 = lshr i64 %bf.load38, 29, !dbg !2351
  %13 = trunc i64 %bf.lshr39 to i8, !dbg !2351
  %bf.cast41 = and i8 %13, 1, !dbg !2351
  tail call fastcc void @gimple_call_set_from_thunk(%union.gimple_statement_d* %call10, i8 zeroext %bf.cast41) #8, !dbg !2352
  %bf.load44 = load i64, i64* %0, align 8, !dbg !2353
  %bf.lshr45 = lshr i64 %bf.load44, 27, !dbg !2353
  %14 = trunc i64 %bf.lshr45 to i8, !dbg !2353
  %bf.cast47 = and i8 %14, 1, !dbg !2353
  tail call fastcc void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %call10, i8 zeroext %bf.cast47) #8, !dbg !2354
  %bf.load50 = load i64, i64* %0, align 8, !dbg !2355
  %bf.lshr51 = lshr i64 %bf.load50, 23, !dbg !2355
  %15 = trunc i64 %bf.lshr51 to i8, !dbg !2355
  %bf.cast53 = and i8 %15, 1, !dbg !2355
  tail call fastcc void @gimple_set_no_warning(%union.gimple_statement_d* %call10, i8 zeroext %bf.cast53) #8, !dbg !2356
  ret %union.gimple_statement_d* %call10, !dbg !2357
}

declare dso_local %union.tree_node* @get_callee_fndecl(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_block(%union.gimple_statement_d* %g, %union.tree_node* %block) unnamed_addr #0 !dbg !2358 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !2360, metadata !DIExpression()), !dbg !2362
  call void @llvm.dbg.value(metadata %union.tree_node* %block, metadata !2361, metadata !DIExpression()), !dbg !2362
  %block1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 5, !dbg !2363
  store %union.tree_node* %block, %union.tree_node** %block1, align 8, !dbg !2364
  ret void, !dbg !2365
}

declare dso_local %union.tree_node** @tree_block(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_chain(%union.gimple_statement_d* %gs, %union.tree_node* %chain) unnamed_addr #0 !dbg !2366 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2368, metadata !DIExpression()), !dbg !2370
  call void @llvm.dbg.value(metadata %union.tree_node* %chain, metadata !2369, metadata !DIExpression()), !dbg !2370
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 2, %union.tree_node* %chain) #8, !dbg !2371
  ret void, !dbg !2372
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_tail(%union.gimple_statement_d* %s, i8 zeroext %tail_p) unnamed_addr #0 !dbg !2373 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !2377, metadata !DIExpression()), !dbg !2379
  call void @llvm.dbg.value(metadata i8 %tail_p, metadata !2378, metadata !DIExpression()), !dbg !2379
  %tobool = icmp eq i8 %tail_p, 0, !dbg !2380
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !2382
  %bf.load = load i32, i32* %0, align 8, !dbg !2382
  br i1 %tobool, label %if.else, label %if.then, !dbg !2383

if.then:                                          ; preds = %entry
  %bf.lshr = and i32 %bf.load, -589824, !dbg !2384
  %or = or i32 %bf.lshr, 524288, !dbg !2384
  %bf.clear = and i32 %bf.load, 65535, !dbg !2384
  %bf.set = or i32 %bf.clear, %or, !dbg !2384
  br label %if.end, !dbg !2385

if.else:                                          ; preds = %entry
  %bf.set9 = and i32 %bf.load, -524289, !dbg !2386
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %storemerge = phi i32 [ %bf.set9, %if.else ], [ %bf.set, %if.then ], !dbg !2382
  store i32 %storemerge, i32* %0, align 8, !dbg !2382
  ret void, !dbg !2387
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %s, i8 zeroext %inlinable_p) unnamed_addr #0 !dbg !2388 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !2390, metadata !DIExpression()), !dbg !2392
  call void @llvm.dbg.value(metadata i8 %inlinable_p, metadata !2391, metadata !DIExpression()), !dbg !2392
  %tobool = icmp eq i8 %inlinable_p, 0, !dbg !2393
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !2395
  %bf.load = load i32, i32* %0, align 8, !dbg !2395
  br i1 %tobool, label %if.else, label %if.then, !dbg !2396

if.then:                                          ; preds = %entry
  %bf.lshr = and i32 %bf.load, -131072, !dbg !2397
  %or = or i32 %bf.lshr, 65536, !dbg !2397
  %bf.clear = and i32 %bf.load, 65535, !dbg !2397
  %bf.set = or i32 %bf.clear, %or, !dbg !2397
  br label %if.end, !dbg !2398

if.else:                                          ; preds = %entry
  %bf.set9 = and i32 %bf.load, -65537, !dbg !2399
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %storemerge = phi i32 [ %bf.set9, %if.else ], [ %bf.set, %if.then ], !dbg !2395
  store i32 %storemerge, i32* %0, align 8, !dbg !2395
  ret void, !dbg !2400
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_return_slot_opt(%union.gimple_statement_d* %s, i8 zeroext %return_slot_opt_p) unnamed_addr #0 !dbg !2401 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !2403, metadata !DIExpression()), !dbg !2405
  call void @llvm.dbg.value(metadata i8 %return_slot_opt_p, metadata !2404, metadata !DIExpression()), !dbg !2405
  %tobool = icmp eq i8 %return_slot_opt_p, 0, !dbg !2406
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !2408
  %bf.load = load i32, i32* %0, align 8, !dbg !2408
  br i1 %tobool, label %if.else, label %if.then, !dbg !2409

if.then:                                          ; preds = %entry
  %bf.lshr = and i32 %bf.load, -327680, !dbg !2410
  %or = or i32 %bf.lshr, 262144, !dbg !2410
  %bf.clear = and i32 %bf.load, 65535, !dbg !2410
  %bf.set = or i32 %bf.clear, %or, !dbg !2410
  br label %if.end, !dbg !2411

if.else:                                          ; preds = %entry
  %bf.set9 = and i32 %bf.load, -262145, !dbg !2412
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %storemerge = phi i32 [ %bf.set9, %if.else ], [ %bf.set, %if.then ], !dbg !2408
  store i32 %storemerge, i32* %0, align 8, !dbg !2408
  ret void, !dbg !2413
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_from_thunk(%union.gimple_statement_d* %s, i8 zeroext %from_thunk_p) unnamed_addr #0 !dbg !2414 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !2416, metadata !DIExpression()), !dbg !2418
  call void @llvm.dbg.value(metadata i8 %from_thunk_p, metadata !2417, metadata !DIExpression()), !dbg !2418
  %tobool = icmp eq i8 %from_thunk_p, 0, !dbg !2419
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !2421
  %bf.load = load i32, i32* %0, align 8, !dbg !2421
  br i1 %tobool, label %if.else, label %if.then, !dbg !2422

if.then:                                          ; preds = %entry
  %bf.lshr = and i32 %bf.load, -196608, !dbg !2423
  %or = or i32 %bf.lshr, 131072, !dbg !2423
  %bf.clear = and i32 %bf.load, 65535, !dbg !2423
  %bf.set = or i32 %bf.clear, %or, !dbg !2423
  br label %if.end, !dbg !2424

if.else:                                          ; preds = %entry
  %bf.set9 = and i32 %bf.load, -131073, !dbg !2425
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %storemerge = phi i32 [ %bf.set9, %if.else ], [ %bf.set, %if.then ], !dbg !2421
  store i32 %storemerge, i32* %0, align 8, !dbg !2421
  ret void, !dbg !2426
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %s, i8 zeroext %pass_arg_pack_p) unnamed_addr #0 !dbg !2427 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !2429, metadata !DIExpression()), !dbg !2431
  call void @llvm.dbg.value(metadata i8 %pass_arg_pack_p, metadata !2430, metadata !DIExpression()), !dbg !2431
  %tobool = icmp eq i8 %pass_arg_pack_p, 0, !dbg !2432
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !2434
  %bf.load = load i32, i32* %0, align 8, !dbg !2434
  br i1 %tobool, label %if.else, label %if.then, !dbg !2435

if.then:                                          ; preds = %entry
  %bf.lshr = and i32 %bf.load, -1114112, !dbg !2436
  %or = or i32 %bf.lshr, 1048576, !dbg !2436
  %bf.clear = and i32 %bf.load, 65535, !dbg !2436
  %bf.set = or i32 %bf.clear, %or, !dbg !2436
  br label %if.end, !dbg !2437

if.else:                                          ; preds = %entry
  %bf.set9 = and i32 %bf.load, -1048577, !dbg !2438
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %storemerge = phi i32 [ %bf.set9, %if.else ], [ %bf.set, %if.then ], !dbg !2434
  store i32 %storemerge, i32* %0, align 8, !dbg !2434
  ret void, !dbg !2439
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_no_warning(%union.gimple_statement_d* %stmt, i8 zeroext %no_warning) unnamed_addr #0 !dbg !2440 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !2442, metadata !DIExpression()), !dbg !2444
  call void @llvm.dbg.value(metadata i8 %no_warning, metadata !2443, metadata !DIExpression()), !dbg !2444
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !2445
  %bf.load = load i32, i32* %0, align 8, !dbg !2446
  %1 = and i8 %no_warning, 1, !dbg !2446
  %bf.value = zext i8 %1 to i32, !dbg !2446
  %bf.shl = shl nuw nsw i32 %bf.value, 8, !dbg !2446
  %bf.clear = and i32 %bf.load, -257, !dbg !2446
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !2446
  store i32 %bf.set, i32* %0, align 8, !dbg !2446
  ret void, !dbg !2447
}

; Function Attrs: nounwind uwtable
define dso_local void @extract_ops_from_tree(%union.tree_node* %expr, i32* %subcode_p, %union.tree_node** %op1_p, %union.tree_node** %op2_p) local_unnamed_addr #5 !dbg !2448 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !2453, metadata !DIExpression()), !dbg !2458
  call void @llvm.dbg.value(metadata i32* %subcode_p, metadata !2454, metadata !DIExpression()), !dbg !2458
  call void @llvm.dbg.value(metadata %union.tree_node** %op1_p, metadata !2455, metadata !DIExpression()), !dbg !2458
  call void @llvm.dbg.value(metadata %union.tree_node** %op2_p, metadata !2456, metadata !DIExpression()), !dbg !2458
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2459
  %bf.load = load i64, i64* %0, align 8, !dbg !2459
  %1 = trunc i64 %bf.load to i32, !dbg !2459
  %bf.cast = and i32 %1, 65535, !dbg !2459
  store i32 %bf.cast, i32* %subcode_p, align 4, !dbg !2460
  %call = tail call fastcc i32 @get_gimple_rhs_class(i32 %bf.cast) #8, !dbg !2461
  call void @llvm.dbg.value(metadata i32 %call, metadata !2457, metadata !DIExpression()), !dbg !2458
  switch i32 %call, label %if.else12 [
    i32 1, label %if.then
    i32 2, label %if.then5
    i32 3, label %if.then11
  ], !dbg !2462

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !2463
  %2 = bitcast %union.tree_node** %operands to i64*, !dbg !2463
  %3 = load i64, i64* %2, align 8, !dbg !2463
  %4 = bitcast %union.tree_node** %op1_p to i64*, !dbg !2466
  store i64 %3, i64* %4, align 8, !dbg !2466
  %arrayidx3 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !2467
  %5 = bitcast %union.tree_node** %arrayidx3 to i64*, !dbg !2467
  %6 = load i64, i64* %5, align 8, !dbg !2467
  %7 = bitcast %union.tree_node** %op2_p to i64*, !dbg !2468
  store i64 %6, i64* %7, align 8, !dbg !2468
  br label %if.end14, !dbg !2469

if.then5:                                         ; preds = %entry
  %operands7 = getelementptr inbounds %union.tree_node, %union.tree_node* %expr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !2470
  %8 = bitcast %union.tree_node** %operands7 to i64*, !dbg !2470
  %9 = load i64, i64* %8, align 8, !dbg !2470
  %10 = bitcast %union.tree_node** %op1_p to i64*, !dbg !2473
  store i64 %9, i64* %10, align 8, !dbg !2473
  store %union.tree_node* null, %union.tree_node** %op2_p, align 8, !dbg !2474
  br label %if.end14, !dbg !2475

if.then11:                                        ; preds = %entry
  store %union.tree_node* %expr, %union.tree_node** %op1_p, align 8, !dbg !2476
  store %union.tree_node* null, %union.tree_node** %op2_p, align 8, !dbg !2479
  br label %if.end14, !dbg !2480

if.else12:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 318, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2481
  br label %if.end14

if.end14:                                         ; preds = %if.then5, %if.else12, %if.then11, %if.then
  ret void, !dbg !2482
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @get_gimple_rhs_class(i32 %code) unnamed_addr #0 !dbg !2483 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !2487, metadata !DIExpression()), !dbg !2488
  %idxprom = sext i32 %code to i64, !dbg !2489
  %arrayidx = getelementptr inbounds [191 x i8], [191 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !2489
  %0 = load i8, i8* %arrayidx, align 1, !dbg !2489
  %conv = zext i8 %0 to i32, !dbg !2490
  ret i32 %conv, !dbg !2491
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_assign_stat(%union.tree_node* %lhs, %union.tree_node* %rhs) local_unnamed_addr #5 !dbg !2492 {
entry:
  %subcode = alloca i32, align 4
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !2496, metadata !DIExpression()), !dbg !2501
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !2497, metadata !DIExpression()), !dbg !2501
  %0 = bitcast i32* %subcode to i8*, !dbg !2502
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #6, !dbg !2502
  %1 = bitcast %union.tree_node** %op1 to i8*, !dbg !2503
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #6, !dbg !2503
  %2 = bitcast %union.tree_node** %op2 to i8*, !dbg !2503
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #6, !dbg !2503
  call void @llvm.dbg.value(metadata i32* %subcode, metadata !2498, metadata !DIExpression(DW_OP_deref)), !dbg !2501
  call void @llvm.dbg.value(metadata %union.tree_node** %op1, metadata !2499, metadata !DIExpression(DW_OP_deref)), !dbg !2501
  call void @llvm.dbg.value(metadata %union.tree_node** %op2, metadata !2500, metadata !DIExpression(DW_OP_deref)), !dbg !2501
  call void @extract_ops_from_tree(%union.tree_node* %rhs, i32* nonnull %subcode, %union.tree_node** nonnull %op1, %union.tree_node** nonnull %op2) #8, !dbg !2504
  %3 = load i32, i32* %subcode, align 4, !dbg !2505
  call void @llvm.dbg.value(metadata i32 %3, metadata !2498, metadata !DIExpression()), !dbg !2501
  %4 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !2506
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !2499, metadata !DIExpression()), !dbg !2501
  %5 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !2507
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !2500, metadata !DIExpression()), !dbg !2501
  %call = call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %3, %union.tree_node* %lhs, %union.tree_node* %4, %union.tree_node* %5) #8, !dbg !2508
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #6, !dbg !2509
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #6, !dbg !2509
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #6, !dbg !2509
  ret %union.gimple_statement_d* %call, !dbg !2510
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %subcode, %union.tree_node* %lhs, %union.tree_node* %op1, %union.tree_node* %op2) local_unnamed_addr #5 !dbg !2511 {
entry:
  call void @llvm.dbg.value(metadata i32 %subcode, metadata !2515, metadata !DIExpression()), !dbg !2521
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !2516, metadata !DIExpression()), !dbg !2521
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !2517, metadata !DIExpression()), !dbg !2521
  call void @llvm.dbg.value(metadata %union.tree_node* %op2, metadata !2518, metadata !DIExpression()), !dbg !2521
  %call = tail call i32 @get_gimple_rhs_num_ops(i32 %subcode) #8, !dbg !2522
  %add = add i32 %call, 1, !dbg !2523
  call void @llvm.dbg.value(metadata i32 %add, metadata !2519, metadata !DIExpression()), !dbg !2521
  %call1 = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 6, i32 %subcode, i32 %add) #8, !dbg !2524
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call1, metadata !2520, metadata !DIExpression()), !dbg !2521
  tail call fastcc void @gimple_assign_set_lhs(%union.gimple_statement_d* %call1, %union.tree_node* %lhs) #8, !dbg !2525
  tail call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %call1, %union.tree_node* %op1) #8, !dbg !2526
  %tobool = icmp eq %union.tree_node* %op2, null, !dbg !2527
  br i1 %tobool, label %if.end, label %if.then, !dbg !2529

if.then:                                          ; preds = %entry
  %cmp = icmp ugt i32 %add, 2, !dbg !2530
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !2530

cond.true:                                        ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 360, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2530
  br label %cond.end, !dbg !2530

cond.end:                                         ; preds = %if.then, %cond.true
  tail call fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %call1, %union.tree_node* nonnull %op2) #8, !dbg !2532
  br label %if.end, !dbg !2533

if.end:                                           ; preds = %entry, %cond.end
  ret %union.gimple_statement_d* %call1, !dbg !2534
}

; Function Attrs: nounwind uwtable
define dso_local i32 @get_gimple_rhs_num_ops(i32 %code) local_unnamed_addr #5 !dbg !2535 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !2539, metadata !DIExpression()), !dbg !2541
  %call = tail call fastcc i32 @get_gimple_rhs_class(i32 %code) #8, !dbg !2542
  call void @llvm.dbg.value(metadata i32 %call, metadata !2540, metadata !DIExpression()), !dbg !2541
  switch i32 %call, label %if.else4 [
    i32 2, label %cleanup
    i32 3, label %cleanup
    i32 1, label %if.then3
  ], !dbg !2543

if.then3:                                         ; preds = %entry
  br label %cleanup, !dbg !2545

if.else4:                                         ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2378, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2547
  br label %cleanup, !dbg !2548

cleanup:                                          ; preds = %entry, %entry, %if.else4, %if.then3
  %retval.0 = phi i32 [ 2, %if.then3 ], [ 0, %if.else4 ], [ 1, %entry ], [ 1, %entry ], !dbg !2541
  ret i32 %retval.0, !dbg !2549
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) unnamed_addr #0 !dbg !2550 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2552, metadata !DIExpression()), !dbg !2554
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !2553, metadata !DIExpression()), !dbg !2554
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %lhs) #8, !dbg !2555
  %tobool = icmp eq %union.tree_node* %lhs, null, !dbg !2556
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !2558

land.lhs.true:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2559
  %bf.load = load i64, i64* %0, align 8, !dbg !2559
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2560
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !2560
  br i1 %cmp, label %if.then, label %if.end, !dbg !2561

if.then:                                          ; preds = %land.lhs.true
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !2562
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !2562
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %1, align 8, !dbg !2563
  br label %if.end, !dbg !2562

if.end:                                           ; preds = %entry, %if.then, %land.lhs.true
  ret void, !dbg !2564
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !2565 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2567, metadata !DIExpression()), !dbg !2569
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !2568, metadata !DIExpression()), !dbg !2569
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 1, %union.tree_node* %rhs) #8, !dbg !2570
  ret void, !dbg !2571
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !2572 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2574, metadata !DIExpression()), !dbg !2576
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !2575, metadata !DIExpression()), !dbg !2576
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 2, %union.tree_node* %rhs) #8, !dbg !2577
  ret void, !dbg !2578
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimplify_assign(%union.tree_node* %dst, %union.tree_node* %src, %struct.gimple_seq_d** %seq_p) local_unnamed_addr #5 !dbg !2579 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %dst, metadata !2584, metadata !DIExpression()), !dbg !2588
  call void @llvm.dbg.value(metadata %union.tree_node* %src, metadata !2585, metadata !DIExpression()), !dbg !2588
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d** %seq_p, metadata !2586, metadata !DIExpression()), !dbg !2588
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %dst, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2589
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2589
  %call = tail call %union.tree_node* @build2_stat(i32 53, %union.tree_node* %0, %union.tree_node* %dst, %union.tree_node* %src) #7, !dbg !2589
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !2587, metadata !DIExpression()), !dbg !2588
  tail call void @gimplify_and_add(%union.tree_node* %call, %struct.gimple_seq_d** %seq_p) #7, !dbg !2590
  %1 = bitcast %union.tree_node* %call to i8*, !dbg !2591
  tail call void @ggc_free(i8* %1) #7, !dbg !2592
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq_p, align 8, !dbg !2593
  %call1 = tail call fastcc %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %2) #8, !dbg !2594
  ret %union.gimple_statement_d* %call1, !dbg !2595
}

declare dso_local %union.tree_node* @build2_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local void @gimplify_and_add(%union.tree_node*, %struct.gimple_seq_d**) local_unnamed_addr #2

declare dso_local void @ggc_free(i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gimple_seq_last_stmt(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !2596 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !2603, metadata !DIExpression()), !dbg !2605
  %call = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #8, !dbg !2606
  call void @llvm.dbg.value(metadata %struct.gimple_seq_node_d* %call, metadata !2604, metadata !DIExpression()), !dbg !2605
  %tobool = icmp eq %struct.gimple_seq_node_d* %call, null, !dbg !2607
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !2607

cond.true:                                        ; preds = %entry
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %call, i64 0, i32 0, !dbg !2608
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !2608
  br label %cond.end, !dbg !2607

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %union.gimple_statement_d* [ %0, %cond.true ], [ null, %entry ], !dbg !2607
  ret %union.gimple_statement_d* %cond, !dbg !2609
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_cond(i32 %pred_code, %union.tree_node* %lhs, %union.tree_node* %rhs, %union.tree_node* %t_label, %union.tree_node* %f_label) local_unnamed_addr #5 !dbg !2610 {
entry:
  call void @llvm.dbg.value(metadata i32 %pred_code, metadata !2614, metadata !DIExpression()), !dbg !2620
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !2615, metadata !DIExpression()), !dbg !2620
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !2616, metadata !DIExpression()), !dbg !2620
  call void @llvm.dbg.value(metadata %union.tree_node* %t_label, metadata !2617, metadata !DIExpression()), !dbg !2620
  call void @llvm.dbg.value(metadata %union.tree_node* %f_label, metadata !2618, metadata !DIExpression()), !dbg !2620
  %idxprom = sext i32 %pred_code to i64, !dbg !2621
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !2621
  %0 = load i32, i32* %arrayidx, align 4, !dbg !2621
  %cmp = icmp eq i32 %0, 5, !dbg !2621
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !2621

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 398, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2621
  br label %cond.end, !dbg !2621

cond.end:                                         ; preds = %entry, %cond.true
  %call = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 1, i32 %pred_code, i32 4) #8, !dbg !2622
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !2619, metadata !DIExpression()), !dbg !2620
  tail call fastcc void @gimple_cond_set_lhs(%union.gimple_statement_d* %call, %union.tree_node* %lhs) #8, !dbg !2623
  tail call fastcc void @gimple_cond_set_rhs(%union.gimple_statement_d* %call, %union.tree_node* %rhs) #8, !dbg !2624
  tail call fastcc void @gimple_cond_set_true_label(%union.gimple_statement_d* %call, %union.tree_node* %t_label) #8, !dbg !2625
  tail call fastcc void @gimple_cond_set_false_label(%union.gimple_statement_d* %call, %union.tree_node* %f_label) #8, !dbg !2626
  ret %union.gimple_statement_d* %call, !dbg !2627
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) unnamed_addr #0 !dbg !2628 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2630, metadata !DIExpression()), !dbg !2632
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !2631, metadata !DIExpression()), !dbg !2632
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %lhs) #8, !dbg !2633
  ret void, !dbg !2634
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_set_rhs(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !2635 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2637, metadata !DIExpression()), !dbg !2639
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !2638, metadata !DIExpression()), !dbg !2639
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 1, %union.tree_node* %rhs) #8, !dbg !2640
  ret void, !dbg !2641
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_set_true_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) unnamed_addr #0 !dbg !2642 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2644, metadata !DIExpression()), !dbg !2646
  call void @llvm.dbg.value(metadata %union.tree_node* %label, metadata !2645, metadata !DIExpression()), !dbg !2646
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 2, %union.tree_node* %label) #8, !dbg !2647
  ret void, !dbg !2648
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_set_false_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) unnamed_addr #0 !dbg !2649 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2651, metadata !DIExpression()), !dbg !2653
  call void @llvm.dbg.value(metadata %union.tree_node* %label, metadata !2652, metadata !DIExpression()), !dbg !2653
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 3, %union.tree_node* %label) #8, !dbg !2654
  ret void, !dbg !2655
}

; Function Attrs: nounwind uwtable
define dso_local void @gimple_cond_get_ops_from_tree(%union.tree_node* %cond, i32* %code_p, %union.tree_node** %lhs_p, %union.tree_node** %rhs_p) local_unnamed_addr #5 !dbg !2656 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !2658, metadata !DIExpression()), !dbg !2663
  call void @llvm.dbg.value(metadata i32* %code_p, metadata !2659, metadata !DIExpression()), !dbg !2663
  call void @llvm.dbg.value(metadata %union.tree_node** %lhs_p, metadata !2660, metadata !DIExpression()), !dbg !2663
  call void @llvm.dbg.value(metadata %union.tree_node** %rhs_p, metadata !2661, metadata !DIExpression()), !dbg !2663
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %cond, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2664
  %bf.load = load i64, i64* %0, align 8, !dbg !2664
  %bf.cast = and i64 %bf.load, 65535, !dbg !2664
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !2664
  %1 = load i32, i32* %arrayidx, align 4, !dbg !2664
  %cmp = icmp ugt i32 %1, 3, !dbg !2664
  br i1 %cmp, label %land.lhs.true, label %cond.end, !dbg !2664

land.lhs.true:                                    ; preds = %entry
  %cmp7 = icmp ult i32 %1, 11, !dbg !2664
  br i1 %cmp7, label %cond.true, label %cond.end, !dbg !2664

cond.true:                                        ; preds = %land.lhs.true
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %cond, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !2664
  %3 = load i32, i32* %2, align 8, !dbg !2664
  br label %cond.end, !dbg !2664

cond.end:                                         ; preds = %entry, %land.lhs.true, %cond.true
  %cond8 = phi i32 [ %3, %cond.true ], [ 0, %land.lhs.true ], [ 0, %entry ], !dbg !2664
  call void @llvm.dbg.value(metadata i32 %cond8, metadata !2662, metadata !DIExpression()), !dbg !2663
  %cmp15 = icmp eq i32 %1, 5, !dbg !2665
  br i1 %cmp15, label %cond.end77, label %lor.lhs.false, !dbg !2665

lor.lhs.false:                                    ; preds = %cond.end
  %cmp20 = icmp eq i64 %bf.cast, 96, !dbg !2665
  br i1 %cmp20, label %cond.end77, label %lor.lhs.false21, !dbg !2665

lor.lhs.false21:                                  ; preds = %lor.lhs.false
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %cond) #8, !dbg !2665
  %tobool = icmp eq i8 %call, 0, !dbg !2665
  br i1 %tobool, label %lor.lhs.false22, label %cond.end77, !dbg !2665

lor.lhs.false22:                                  ; preds = %lor.lhs.false21
  %bf.load24 = load i64, i64* %0, align 8, !dbg !2665
  %bf.cast262 = and i64 %bf.load24, 65535, !dbg !2665
  %cmp27 = icmp eq i64 %bf.cast262, 32, !dbg !2665
  br i1 %cmp27, label %cond.end77, label %lor.lhs.false29, !dbg !2665

lor.lhs.false29:                                  ; preds = %lor.lhs.false22
  %cmp34 = icmp eq i64 %bf.cast262, 34, !dbg !2665
  br i1 %cmp34, label %cond.end77, label %lor.lhs.false36, !dbg !2665

lor.lhs.false36:                                  ; preds = %lor.lhs.false29
  %cmp41 = icmp eq i64 %bf.cast262, 36, !dbg !2665
  br i1 %cmp41, label %cond.end77, label %lor.lhs.false43, !dbg !2665

lor.lhs.false43:                                  ; preds = %lor.lhs.false36
  %cmp48 = icmp eq i64 %bf.cast262, 141, !dbg !2665
  br i1 %cmp48, label %land.lhs.true50, label %cond.true75, !dbg !2665

land.lhs.true50:                                  ; preds = %lor.lhs.false43
  %var = getelementptr inbounds %union.tree_node, %union.tree_node* %cond, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !2665
  %4 = bitcast i32* %var to i64**, !dbg !2665
  %5 = load i64*, i64** %4, align 8, !dbg !2665
  %bf.load52 = load i64, i64* %5, align 8, !dbg !2665
  %bf.cast546 = and i64 %bf.load52, 65535, !dbg !2665
  %cmp55 = icmp eq i64 %bf.cast546, 32, !dbg !2665
  br i1 %cmp55, label %cond.end77, label %lor.lhs.false57, !dbg !2665

lor.lhs.false57:                                  ; preds = %land.lhs.true50
  %cmp64 = icmp eq i64 %bf.cast546, 34, !dbg !2665
  br i1 %cmp64, label %cond.end77, label %lor.lhs.false66, !dbg !2665

lor.lhs.false66:                                  ; preds = %lor.lhs.false57
  %cmp73 = icmp eq i64 %bf.cast546, 36, !dbg !2665
  br i1 %cmp73, label %cond.end77, label %cond.true75, !dbg !2665

cond.true75:                                      ; preds = %lor.lhs.false66, %lor.lhs.false43
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 418, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2665
  br label %cond.end77, !dbg !2665

cond.end77:                                       ; preds = %lor.lhs.false21, %cond.end, %lor.lhs.false, %lor.lhs.false22, %lor.lhs.false29, %lor.lhs.false36, %land.lhs.true50, %lor.lhs.false57, %lor.lhs.false66, %cond.true75
  tail call void @extract_ops_from_tree(%union.tree_node* %cond, i32* %code_p, %union.tree_node** %lhs_p, %union.tree_node** %rhs_p) #8, !dbg !2666
  %6 = load i32, i32* %code_p, align 4, !dbg !2667
  %cmp79 = icmp eq i32 %6, 96, !dbg !2669
  br i1 %cmp79, label %if.then, label %if.else, !dbg !2670

if.then:                                          ; preds = %cond.end77
  store i32 101, i32* %code_p, align 4, !dbg !2671
  %7 = load %union.tree_node*, %union.tree_node** %lhs_p, align 8, !dbg !2673
  %tobool81 = icmp eq %union.tree_node* %7, null, !dbg !2673
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2673
  br i1 %tobool81, label %cond.true85, label %land.lhs.true82, !dbg !2673

land.lhs.true82:                                  ; preds = %if.then
  %9 = load %union.tree_node*, %union.tree_node** %rhs_p, align 8, !dbg !2673
  %cmp83 = icmp eq %union.tree_node* %9, null, !dbg !2673
  br i1 %cmp83, label %land.lhs.true82.cond.end87_crit_edge, label %cond.true85, !dbg !2673

land.lhs.true82.cond.end87_crit_edge:             ; preds = %land.lhs.true82
  br label %cond.end87, !dbg !2673

cond.true85:                                      ; preds = %if.then, %land.lhs.true82
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 426, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2673
  %.phi.trans.insert9 = bitcast %union.tree_node** %lhs_p to %struct.tree_common**, !dbg !2674
  %.pre10 = load %struct.tree_common*, %struct.tree_common** %.phi.trans.insert9, align 8, !dbg !2675
  br label %cond.end87, !dbg !2673

cond.end87:                                       ; preds = %land.lhs.true82.cond.end87_crit_edge, %cond.true85
  %10 = phi %struct.tree_common* [ %8, %land.lhs.true82.cond.end87_crit_edge ], [ %.pre10, %cond.true85 ], !dbg !2675
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %10, i64 0, i32 2, !dbg !2675
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !2675
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !2676
  %call89 = tail call %union.tree_node* @fold_convert_loc(i32 %cond8, %union.tree_node* %11, %union.tree_node* %12) #7, !dbg !2677
  store %union.tree_node* %call89, %union.tree_node** %rhs_p, align 8, !dbg !2678
  br label %if.end106, !dbg !2679

if.else:                                          ; preds = %cond.end77
  %idxprom90 = sext i32 %6 to i64, !dbg !2680
  %arrayidx91 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom90, !dbg !2680
  %13 = load i32, i32* %arrayidx91, align 4, !dbg !2680
  %cmp92 = icmp eq i32 %13, 5, !dbg !2682
  br i1 %cmp92, label %if.end106, label %if.then94, !dbg !2683

if.then94:                                        ; preds = %if.else
  store i32 102, i32* %code_p, align 4, !dbg !2684
  %14 = load %union.tree_node*, %union.tree_node** %lhs_p, align 8, !dbg !2686
  %tobool95 = icmp eq %union.tree_node* %14, null, !dbg !2686
  %15 = getelementptr inbounds %union.tree_node, %union.tree_node* %14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2686
  br i1 %tobool95, label %cond.true99, label %land.lhs.true96, !dbg !2686

land.lhs.true96:                                  ; preds = %if.then94
  %16 = load %union.tree_node*, %union.tree_node** %rhs_p, align 8, !dbg !2686
  %cmp97 = icmp eq %union.tree_node* %16, null, !dbg !2686
  br i1 %cmp97, label %land.lhs.true96.cond.end101_crit_edge, label %cond.true99, !dbg !2686

land.lhs.true96.cond.end101_crit_edge:            ; preds = %land.lhs.true96
  br label %cond.end101, !dbg !2686

cond.true99:                                      ; preds = %if.then94, %land.lhs.true96
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 433, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2686
  %.phi.trans.insert = bitcast %union.tree_node** %lhs_p to %struct.tree_common**, !dbg !2687
  %.pre = load %struct.tree_common*, %struct.tree_common** %.phi.trans.insert, align 8, !dbg !2688
  br label %cond.end101, !dbg !2686

cond.end101:                                      ; preds = %land.lhs.true96.cond.end101_crit_edge, %cond.true99
  %17 = phi %struct.tree_common* [ %15, %land.lhs.true96.cond.end101_crit_edge ], [ %.pre, %cond.true99 ], !dbg !2688
  %type104 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %17, i64 0, i32 2, !dbg !2688
  %18 = load %union.tree_node*, %union.tree_node** %type104, align 8, !dbg !2688
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !2689
  %call105 = tail call %union.tree_node* @fold_convert_loc(i32 %cond8, %union.tree_node* %18, %union.tree_node* %19) #7, !dbg !2690
  store %union.tree_node* %call105, %union.tree_node** %rhs_p, align 8, !dbg !2691
  br label %if.end106, !dbg !2692

if.end106:                                        ; preds = %if.else, %cond.end101, %cond.end87
  ret void, !dbg !2693
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node* %t) local_unnamed_addr #5 !dbg !2694 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !2698, metadata !DIExpression()), !dbg !2699
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2700
  %bf.load = load i64, i64* %0, align 8, !dbg !2700
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2702
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !2702
  br i1 %cmp, label %if.then, label %if.end, !dbg !2703

if.then:                                          ; preds = %entry
  %call = tail call zeroext i8 @is_gimple_invariant_address(%union.tree_node* %t) #8, !dbg !2704
  br label %return, !dbg !2705

if.end:                                           ; preds = %entry
  %call1 = tail call zeroext i8 @is_gimple_constant(%union.tree_node* %t) #8, !dbg !2706
  br label %return, !dbg !2707

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i8 [ %call, %if.then ], [ %call1, %if.end ], !dbg !2699
  ret i8 %retval.0, !dbg !2708
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node* %cond, %union.tree_node* %t_label, %union.tree_node* %f_label) local_unnamed_addr #5 !dbg !2709 {
entry:
  %code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !2713, metadata !DIExpression()), !dbg !2719
  call void @llvm.dbg.value(metadata %union.tree_node* %t_label, metadata !2714, metadata !DIExpression()), !dbg !2719
  call void @llvm.dbg.value(metadata %union.tree_node* %f_label, metadata !2715, metadata !DIExpression()), !dbg !2719
  %0 = bitcast i32* %code to i8*, !dbg !2720
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #6, !dbg !2720
  %1 = bitcast %union.tree_node** %lhs to i8*, !dbg !2721
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #6, !dbg !2721
  %2 = bitcast %union.tree_node** %rhs to i8*, !dbg !2721
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #6, !dbg !2721
  call void @llvm.dbg.value(metadata i32* %code, metadata !2716, metadata !DIExpression(DW_OP_deref)), !dbg !2719
  call void @llvm.dbg.value(metadata %union.tree_node** %lhs, metadata !2717, metadata !DIExpression(DW_OP_deref)), !dbg !2719
  call void @llvm.dbg.value(metadata %union.tree_node** %rhs, metadata !2718, metadata !DIExpression(DW_OP_deref)), !dbg !2719
  call void @gimple_cond_get_ops_from_tree(%union.tree_node* %cond, i32* nonnull %code, %union.tree_node** nonnull %lhs, %union.tree_node** nonnull %rhs) #8, !dbg !2722
  %3 = load i32, i32* %code, align 4, !dbg !2723
  call void @llvm.dbg.value(metadata i32 %3, metadata !2716, metadata !DIExpression()), !dbg !2719
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2724
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !2717, metadata !DIExpression()), !dbg !2719
  %5 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !2725
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !2718, metadata !DIExpression()), !dbg !2719
  %call = call %union.gimple_statement_d* @gimple_build_cond(i32 %3, %union.tree_node* %4, %union.tree_node* %5, %union.tree_node* %t_label, %union.tree_node* %f_label) #8, !dbg !2726
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #6, !dbg !2727
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #6, !dbg !2727
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #6, !dbg !2727
  ret %union.gimple_statement_d* %call, !dbg !2728
}

; Function Attrs: nounwind uwtable
define dso_local void @gimple_cond_set_condition_from_tree(%union.gimple_statement_d* %stmt, %union.tree_node* %cond) local_unnamed_addr #5 !dbg !2729 {
entry:
  %code = alloca i32, align 4
  %lhs = alloca %union.tree_node*, align 8
  %rhs = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !2731, metadata !DIExpression()), !dbg !2736
  call void @llvm.dbg.value(metadata %union.tree_node* %cond, metadata !2732, metadata !DIExpression()), !dbg !2736
  %0 = bitcast i32* %code to i8*, !dbg !2737
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #6, !dbg !2737
  %1 = bitcast %union.tree_node** %lhs to i8*, !dbg !2738
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #6, !dbg !2738
  %2 = bitcast %union.tree_node** %rhs to i8*, !dbg !2738
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #6, !dbg !2738
  call void @llvm.dbg.value(metadata i32* %code, metadata !2733, metadata !DIExpression(DW_OP_deref)), !dbg !2736
  call void @llvm.dbg.value(metadata %union.tree_node** %lhs, metadata !2734, metadata !DIExpression(DW_OP_deref)), !dbg !2736
  call void @llvm.dbg.value(metadata %union.tree_node** %rhs, metadata !2735, metadata !DIExpression(DW_OP_deref)), !dbg !2736
  call void @gimple_cond_get_ops_from_tree(%union.tree_node* %cond, i32* nonnull %code, %union.tree_node** nonnull %lhs, %union.tree_node** nonnull %rhs) #8, !dbg !2739
  %3 = load i32, i32* %code, align 4, !dbg !2740
  call void @llvm.dbg.value(metadata i32 %3, metadata !2733, metadata !DIExpression()), !dbg !2736
  %4 = load %union.tree_node*, %union.tree_node** %lhs, align 8, !dbg !2741
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !2734, metadata !DIExpression()), !dbg !2736
  %5 = load %union.tree_node*, %union.tree_node** %rhs, align 8, !dbg !2742
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !2735, metadata !DIExpression()), !dbg !2736
  call fastcc void @gimple_cond_set_condition(%union.gimple_statement_d* %stmt, i32 %3, %union.tree_node* %4, %union.tree_node* %5) #8, !dbg !2743
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #6, !dbg !2744
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #6, !dbg !2744
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #6, !dbg !2744
  ret void, !dbg !2744
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_set_condition(%union.gimple_statement_d* %stmt, i32 %code, %union.tree_node* %lhs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !2745 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !2749, metadata !DIExpression()), !dbg !2753
  call void @llvm.dbg.value(metadata i32 %code, metadata !2750, metadata !DIExpression()), !dbg !2753
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !2751, metadata !DIExpression()), !dbg !2753
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !2752, metadata !DIExpression()), !dbg !2753
  tail call fastcc void @gimple_cond_set_code(%union.gimple_statement_d* %stmt, i32 %code) #8, !dbg !2754
  tail call fastcc void @gimple_cond_set_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %lhs) #8, !dbg !2755
  tail call fastcc void @gimple_cond_set_rhs(%union.gimple_statement_d* %stmt, %union.tree_node* %rhs) #8, !dbg !2756
  ret void, !dbg !2757
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_label(%union.tree_node* %label) local_unnamed_addr #5 !dbg !2758 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %label, metadata !2760, metadata !DIExpression()), !dbg !2762
  %call = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 4, i32 0, i32 1) #8, !dbg !2763
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !2761, metadata !DIExpression()), !dbg !2762
  tail call fastcc void @gimple_label_set_label(%union.gimple_statement_d* %call, %union.tree_node* %label) #8, !dbg !2764
  ret %union.gimple_statement_d* %call, !dbg !2765
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_label_set_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) unnamed_addr #0 !dbg !2766 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2768, metadata !DIExpression()), !dbg !2770
  call void @llvm.dbg.value(metadata %union.tree_node* %label, metadata !2769, metadata !DIExpression()), !dbg !2770
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %label) #8, !dbg !2771
  ret void, !dbg !2772
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_goto(%union.tree_node* %dest) local_unnamed_addr #5 !dbg !2773 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %dest, metadata !2775, metadata !DIExpression()), !dbg !2777
  %call = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 3, i32 0, i32 1) #8, !dbg !2778
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !2776, metadata !DIExpression()), !dbg !2777
  tail call fastcc void @gimple_goto_set_dest(%union.gimple_statement_d* %call, %union.tree_node* %dest) #8, !dbg !2779
  ret %union.gimple_statement_d* %call, !dbg !2780
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_goto_set_dest(%union.gimple_statement_d* %gs, %union.tree_node* %dest) unnamed_addr #0 !dbg !2781 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2783, metadata !DIExpression()), !dbg !2785
  call void @llvm.dbg.value(metadata %union.tree_node* %dest, metadata !2784, metadata !DIExpression()), !dbg !2785
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %dest) #8, !dbg !2786
  ret void, !dbg !2787
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_nop() local_unnamed_addr #5 !dbg !2788 {
entry:
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 18, i32 0) #8, !dbg !2791
  ret %union.gimple_statement_d* %call, !dbg !2792
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_bind(%union.tree_node* %vars, %struct.gimple_seq_d* %body, %union.tree_node* %block) local_unnamed_addr #5 !dbg !2793 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %vars, metadata !2797, metadata !DIExpression()), !dbg !2801
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !2798, metadata !DIExpression()), !dbg !2801
  call void @llvm.dbg.value(metadata %union.tree_node* %block, metadata !2799, metadata !DIExpression()), !dbg !2801
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 10, i32 0) #8, !dbg !2802
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !2800, metadata !DIExpression()), !dbg !2801
  tail call fastcc void @gimple_bind_set_vars(%union.gimple_statement_d* %call, %union.tree_node* %vars) #8, !dbg !2803
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !2804
  br i1 %tobool, label %if.end, label %if.then, !dbg !2806

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_bind_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !2807
  br label %if.end, !dbg !2807

if.end:                                           ; preds = %entry, %if.then
  %tobool1 = icmp eq %union.tree_node* %block, null, !dbg !2808
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !2810

if.then2:                                         ; preds = %if.end
  tail call fastcc void @gimple_bind_set_block(%union.gimple_statement_d* %call, %union.tree_node* nonnull %block) #8, !dbg !2811
  br label %if.end3, !dbg !2811

if.end3:                                          ; preds = %if.end, %if.then2
  ret %union.gimple_statement_d* %call, !dbg !2812
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_bind_set_vars(%union.gimple_statement_d* %gs, %union.tree_node* %vars) unnamed_addr #0 !dbg !2813 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2815, metadata !DIExpression()), !dbg !2817
  call void @llvm.dbg.value(metadata %union.tree_node* %vars, metadata !2816, metadata !DIExpression()), !dbg !2817
  %vars1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !2818
  %0 = bitcast i32* %vars1 to %union.tree_node**, !dbg !2818
  store %union.tree_node* %vars, %union.tree_node** %0, align 8, !dbg !2819
  ret void, !dbg !2820
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_bind_set_body(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %seq) unnamed_addr #0 !dbg !2821 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2825, metadata !DIExpression()), !dbg !2827
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq, metadata !2826, metadata !DIExpression()), !dbg !2827
  %body = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !2828
  %0 = bitcast [1 x %struct.phi_arg_d]* %body to %struct.gimple_seq_d**, !dbg !2828
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %0, align 8, !dbg !2829
  ret void, !dbg !2830
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_bind_set_block(%union.gimple_statement_d* %gs, %union.tree_node* %block) unnamed_addr #0 !dbg !2831 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2833, metadata !DIExpression()), !dbg !2835
  call void @llvm.dbg.value(metadata %union.tree_node* %block, metadata !2834, metadata !DIExpression()), !dbg !2835
  %cmp = icmp eq %union.tree_node* %block, null, !dbg !2836
  br i1 %cmp, label %cond.end, label %lor.lhs.false, !dbg !2836

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %block, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2836
  %bf.load = load i64, i64* %0, align 8, !dbg !2836
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2836
  %cmp1 = icmp eq i64 %bf.cast1, 4, !dbg !2836
  br i1 %cmp1, label %cond.end, label %cond.true, !dbg !2836

cond.true:                                        ; preds = %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2573, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2836
  br label %cond.end, !dbg !2836

cond.end:                                         ; preds = %entry, %lor.lhs.false, %cond.true
  %1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !2837
  store %union.tree_node* %block, %union.tree_node** %1, align 8, !dbg !2838
  ret void, !dbg !2839
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_asm_vec(i8* %string, %struct.VEC_tree_gc* %inputs, %struct.VEC_tree_gc* %outputs, %struct.VEC_tree_gc* %clobbers, %struct.VEC_tree_gc* %labels) local_unnamed_addr #5 !dbg !2840 {
entry:
  call void @llvm.dbg.value(metadata i8* %string, metadata !2844, metadata !DIExpression()), !dbg !2851
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc* %inputs, metadata !2845, metadata !DIExpression()), !dbg !2851
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc* %outputs, metadata !2846, metadata !DIExpression()), !dbg !2851
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc* %clobbers, metadata !2847, metadata !DIExpression()), !dbg !2851
  call void @llvm.dbg.value(metadata %struct.VEC_tree_gc* %labels, metadata !2848, metadata !DIExpression()), !dbg !2851
  %base = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %inputs, i64 0, i32 0, !dbg !2852
  %call = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base) #8, !dbg !2852
  %base3 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %outputs, i64 0, i32 0, !dbg !2853
  %call7 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base3) #8, !dbg !2853
  %base10 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %clobbers, i64 0, i32 0, !dbg !2854
  %call14 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base10) #8, !dbg !2854
  %base17 = getelementptr inbounds %struct.VEC_tree_gc, %struct.VEC_tree_gc* %labels, i64 0, i32 0, !dbg !2855
  %call21 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base17) #8, !dbg !2855
  %call22 = tail call fastcc %union.gimple_statement_d* @gimple_build_asm_1(i8* %string, i32 %call, i32 %call7, i32 %call14, i32 %call21) #8, !dbg !2856
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call22, metadata !2849, metadata !DIExpression()), !dbg !2851
  call void @llvm.dbg.value(metadata i32 0, metadata !2850, metadata !DIExpression()), !dbg !2851
  br label %for.cond, !dbg !2857

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ], !dbg !2859
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !2850, metadata !DIExpression()), !dbg !2851
  %call29 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base) #8, !dbg !2860
  %cmp = icmp ult i32 %i.0, %call29, !dbg !2862
  br i1 %cmp, label %for.body, label %for.cond37.preheader, !dbg !2863

for.cond37.preheader:                             ; preds = %for.cond
  br label %for.cond37, !dbg !2864

for.body:                                         ; preds = %for.cond
  %call36 = tail call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %base, i32 %i.0) #8, !dbg !2866
  tail call fastcc void @gimple_asm_set_input_op(%union.gimple_statement_d* %call22, i32 %i.0, %union.tree_node* %call36) #8, !dbg !2867
  %inc = add i32 %i.0, 1, !dbg !2868
  call void @llvm.dbg.value(metadata i32 %inc, metadata !2850, metadata !DIExpression()), !dbg !2851
  br label %for.cond, !dbg !2869, !llvm.loop !2870

for.cond37:                                       ; preds = %for.cond37.preheader, %for.body46
  %i.1 = phi i32 [ %inc55, %for.body46 ], [ 0, %for.cond37.preheader ], !dbg !2872
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !2850, metadata !DIExpression()), !dbg !2851
  %call44 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base3) #8, !dbg !2873
  %cmp45 = icmp ult i32 %i.1, %call44, !dbg !2875
  br i1 %cmp45, label %for.body46, label %for.cond57.preheader, !dbg !2864

for.cond57.preheader:                             ; preds = %for.cond37
  br label %for.cond57, !dbg !2876

for.body46:                                       ; preds = %for.cond37
  %call53 = tail call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %base3, i32 %i.1) #8, !dbg !2878
  tail call fastcc void @gimple_asm_set_output_op(%union.gimple_statement_d* %call22, i32 %i.1, %union.tree_node* %call53) #8, !dbg !2879
  %inc55 = add i32 %i.1, 1, !dbg !2880
  call void @llvm.dbg.value(metadata i32 %inc55, metadata !2850, metadata !DIExpression()), !dbg !2851
  br label %for.cond37, !dbg !2881, !llvm.loop !2882

for.cond57:                                       ; preds = %for.cond57.preheader, %for.body66
  %i.2 = phi i32 [ %inc75, %for.body66 ], [ 0, %for.cond57.preheader ], !dbg !2884
  call void @llvm.dbg.value(metadata i32 %i.2, metadata !2850, metadata !DIExpression()), !dbg !2851
  %call64 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base10) #8, !dbg !2885
  %cmp65 = icmp ult i32 %i.2, %call64, !dbg !2887
  br i1 %cmp65, label %for.body66, label %for.cond77.preheader, !dbg !2876

for.cond77.preheader:                             ; preds = %for.cond57
  br label %for.cond77, !dbg !2888

for.body66:                                       ; preds = %for.cond57
  %call73 = tail call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %base10, i32 %i.2) #8, !dbg !2890
  tail call fastcc void @gimple_asm_set_clobber_op(%union.gimple_statement_d* %call22, i32 %i.2, %union.tree_node* %call73) #8, !dbg !2891
  %inc75 = add i32 %i.2, 1, !dbg !2892
  call void @llvm.dbg.value(metadata i32 %inc75, metadata !2850, metadata !DIExpression()), !dbg !2851
  br label %for.cond57, !dbg !2893, !llvm.loop !2894

for.cond77:                                       ; preds = %for.cond77.preheader, %for.body86
  %i.3 = phi i32 [ %inc95, %for.body86 ], [ 0, %for.cond77.preheader ], !dbg !2896
  call void @llvm.dbg.value(metadata i32 %i.3, metadata !2850, metadata !DIExpression()), !dbg !2851
  %call84 = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base17) #8, !dbg !2897
  %cmp85 = icmp ult i32 %i.3, %call84, !dbg !2899
  br i1 %cmp85, label %for.body86, label %for.end96, !dbg !2888

for.body86:                                       ; preds = %for.cond77
  %call93 = tail call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %base17, i32 %i.3) #8, !dbg !2900
  tail call fastcc void @gimple_asm_set_label_op(%union.gimple_statement_d* %call22, i32 %i.3, %union.tree_node* %call93) #8, !dbg !2901
  %inc95 = add i32 %i.3, 1, !dbg !2902
  call void @llvm.dbg.value(metadata i32 %inc95, metadata !2850, metadata !DIExpression()), !dbg !2851
  br label %for.cond77, !dbg !2903, !llvm.loop !2904

for.end96:                                        ; preds = %for.cond77
  ret %union.gimple_statement_d* %call22, !dbg !2906
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gimple_build_asm_1(i8* %string, i32 %ninputs, i32 %noutputs, i32 %nclobbers, i32 %nlabels) unnamed_addr #0 !dbg !2907 {
entry:
  call void @llvm.dbg.value(metadata i8* %string, metadata !2911, metadata !DIExpression()), !dbg !2918
  call void @llvm.dbg.value(metadata i32 %ninputs, metadata !2912, metadata !DIExpression()), !dbg !2918
  call void @llvm.dbg.value(metadata i32 %noutputs, metadata !2913, metadata !DIExpression()), !dbg !2918
  call void @llvm.dbg.value(metadata i32 %nclobbers, metadata !2914, metadata !DIExpression()), !dbg !2918
  call void @llvm.dbg.value(metadata i32 %nlabels, metadata !2915, metadata !DIExpression()), !dbg !2918
  %call = tail call i64 @strlen(i8* %string) #7, !dbg !2919
  %conv = trunc i64 %call to i32, !dbg !2919
  call void @llvm.dbg.value(metadata i32 %conv, metadata !2917, metadata !DIExpression()), !dbg !2918
  %cmp = icmp eq i32 %nlabels, 0, !dbg !2920
  %cmp2 = icmp eq i32 %noutputs, 0, !dbg !2920
  %or.cond = or i1 %cmp, %cmp2, !dbg !2920
  br i1 %or.cond, label %cond.end, label %cond.true, !dbg !2920

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 528, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2920
  br label %cond.end, !dbg !2920

cond.end:                                         ; preds = %entry, %cond.true
  %add = add i32 %ninputs, %noutputs, !dbg !2921
  %add4 = add i32 %add, %nclobbers, !dbg !2921
  %add5 = add i32 %add4, %nlabels, !dbg !2921
  %call6 = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 7, i32 0, i32 %add5) #8, !dbg !2921
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call6, metadata !2916, metadata !DIExpression()), !dbg !2918
  %conv7 = trunc i32 %ninputs to i8, !dbg !2922
  %ni = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %call6, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !2923
  %0 = bitcast %union.tree_node*** %ni to i8*, !dbg !2923
  store i8 %conv7, i8* %0, align 8, !dbg !2924
  %conv8 = trunc i32 %noutputs to i8, !dbg !2925
  %gimple_asm9 = bitcast %union.gimple_statement_d* %call6 to %struct.gimple_statement_asm*, !dbg !2926
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm9, i64 0, i32 3, !dbg !2927
  store i8 %conv8, i8* %no, align 1, !dbg !2928
  %conv10 = trunc i32 %nclobbers to i8, !dbg !2929
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm9, i64 0, i32 4, !dbg !2930
  store i8 %conv10, i8* %nc, align 2, !dbg !2931
  %conv12 = trunc i32 %nlabels to i8, !dbg !2932
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm9, i64 0, i32 5, !dbg !2933
  store i8 %conv12, i8* %nl, align 1, !dbg !2934
  %call14 = tail call i8* @ggc_alloc_string(i8* %string, i32 %conv) #7, !dbg !2935
  %string16 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %call6, i64 0, i32 0, i32 4, i64 0, i32 0, i32 2, !dbg !2936
  %1 = bitcast %union.anon* %string16 to i8**, !dbg !2936
  store i8* %call14, i8** %1, align 8, !dbg !2937
  ret %union.gimple_statement_d* %call6, !dbg !2938
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_asm_set_input_op(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %in_op) unnamed_addr #0 !dbg !2939 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2941, metadata !DIExpression()), !dbg !2944
  call void @llvm.dbg.value(metadata i32 %index, metadata !2942, metadata !DIExpression()), !dbg !2944
  call void @llvm.dbg.value(metadata %union.tree_node* %in_op, metadata !2943, metadata !DIExpression()), !dbg !2944
  %ni = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !2945
  %0 = bitcast %union.tree_node*** %ni to i8*, !dbg !2945
  %1 = load i8, i8* %0, align 8, !dbg !2945
  %conv = zext i8 %1 to i32, !dbg !2945
  %cmp = icmp ult i32 %conv, %index, !dbg !2945
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !2945

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2643, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2945
  br label %cond.end, !dbg !2945

cond.end:                                         ; preds = %entry, %cond.true
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %in_op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2946
  %bf.load = load i64, i64* %2, align 8, !dbg !2946
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2946
  %cmp2 = icmp eq i64 %bf.cast1, 2, !dbg !2946
  br i1 %cmp2, label %cond.end6, label %cond.true4, !dbg !2946

cond.true4:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2644, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2946
  br label %cond.end6, !dbg !2946

cond.end6:                                        ; preds = %cond.end, %cond.true4
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %in_op) #8, !dbg !2947
  ret void, !dbg !2948
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_asm_set_output_op(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %out_op) unnamed_addr #0 !dbg !2949 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2951, metadata !DIExpression()), !dbg !2954
  call void @llvm.dbg.value(metadata i32 %index, metadata !2952, metadata !DIExpression()), !dbg !2954
  call void @llvm.dbg.value(metadata %union.tree_node* %out_op, metadata !2953, metadata !DIExpression()), !dbg !2954
  %gimple_asm = bitcast %union.gimple_statement_d* %gs to %struct.gimple_statement_asm*, !dbg !2955
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 3, !dbg !2955
  %0 = load i8, i8* %no, align 1, !dbg !2955
  %conv = zext i8 %0 to i32, !dbg !2955
  %cmp = icmp ult i32 %conv, %index, !dbg !2955
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !2955

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2676, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2955
  br label %cond.end, !dbg !2955

cond.end:                                         ; preds = %entry, %cond.true
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %out_op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2956
  %bf.load = load i64, i64* %1, align 8, !dbg !2956
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2956
  %cmp2 = icmp eq i64 %bf.cast1, 2, !dbg !2956
  br i1 %cmp2, label %cond.end6, label %cond.true4, !dbg !2956

cond.true4:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2677, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2956
  br label %cond.end6, !dbg !2956

cond.end6:                                        ; preds = %cond.end, %cond.true4
  %ni = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !2957
  %2 = bitcast %union.tree_node*** %ni to i8*, !dbg !2957
  %3 = load i8, i8* %2, align 8, !dbg !2957
  %conv9 = zext i8 %3 to i32, !dbg !2958
  %add = add i32 %conv9, %index, !dbg !2959
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %add, %union.tree_node* %out_op) #8, !dbg !2960
  ret void, !dbg !2961
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_asm_set_clobber_op(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %clobber_op) unnamed_addr #0 !dbg !2962 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2964, metadata !DIExpression()), !dbg !2967
  call void @llvm.dbg.value(metadata i32 %index, metadata !2965, metadata !DIExpression()), !dbg !2967
  call void @llvm.dbg.value(metadata %union.tree_node* %clobber_op, metadata !2966, metadata !DIExpression()), !dbg !2967
  %gimple_asm = bitcast %union.gimple_statement_d* %gs to %struct.gimple_statement_asm*, !dbg !2968
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 4, !dbg !2968
  %0 = load i8, i8* %nc, align 2, !dbg !2968
  %conv = zext i8 %0 to i32, !dbg !2968
  %cmp = icmp ult i32 %conv, %index, !dbg !2968
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !2968

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2699, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2968
  br label %cond.end, !dbg !2968

cond.end:                                         ; preds = %entry, %cond.true
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %clobber_op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2969
  %bf.load = load i64, i64* %1, align 8, !dbg !2969
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2969
  %cmp2 = icmp eq i64 %bf.cast1, 2, !dbg !2969
  br i1 %cmp2, label %cond.end6, label %cond.true4, !dbg !2969

cond.true4:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2700, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2969
  br label %cond.end6, !dbg !2969

cond.end6:                                        ; preds = %cond.end, %cond.true4
  %ni = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !2970
  %2 = bitcast %union.tree_node*** %ni to i8*, !dbg !2970
  %3 = load i8, i8* %2, align 8, !dbg !2970
  %conv9 = zext i8 %3 to i32, !dbg !2971
  %add = add i32 %conv9, %index, !dbg !2972
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 3, !dbg !2973
  %4 = load i8, i8* %no, align 1, !dbg !2973
  %conv11 = zext i8 %4 to i32, !dbg !2974
  %add12 = add i32 %add, %conv11, !dbg !2975
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %add12, %union.tree_node* %clobber_op) #8, !dbg !2976
  ret void, !dbg !2977
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_asm_set_label_op(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %label_op) unnamed_addr #0 !dbg !2978 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !2980, metadata !DIExpression()), !dbg !2983
  call void @llvm.dbg.value(metadata i32 %index, metadata !2981, metadata !DIExpression()), !dbg !2983
  call void @llvm.dbg.value(metadata %union.tree_node* %label_op, metadata !2982, metadata !DIExpression()), !dbg !2983
  %gimple_asm = bitcast %union.gimple_statement_d* %gs to %struct.gimple_statement_asm*, !dbg !2984
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 5, !dbg !2984
  %0 = load i8, i8* %nl, align 1, !dbg !2984
  %conv = zext i8 %0 to i32, !dbg !2984
  %cmp = icmp ult i32 %conv, %index, !dbg !2984
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !2984

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2720, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2984
  br label %cond.end, !dbg !2984

cond.end:                                         ; preds = %entry, %cond.true
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %label_op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !2985
  %bf.load = load i64, i64* %1, align 8, !dbg !2985
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2985
  %cmp2 = icmp eq i64 %bf.cast1, 2, !dbg !2985
  br i1 %cmp2, label %cond.end6, label %cond.true4, !dbg !2985

cond.true4:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2721, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !2985
  br label %cond.end6, !dbg !2985

cond.end6:                                        ; preds = %cond.end, %cond.true4
  %ni = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !2986
  %2 = bitcast %union.tree_node*** %ni to i8*, !dbg !2986
  %3 = load i8, i8* %2, align 8, !dbg !2986
  %conv9 = zext i8 %3 to i32, !dbg !2987
  %add = add i32 %conv9, %index, !dbg !2988
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 4, !dbg !2989
  %4 = load i8, i8* %nc, align 2, !dbg !2989
  %conv11 = zext i8 %4 to i32, !dbg !2990
  %add12 = add i32 %add, %conv11, !dbg !2991
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %add12, %union.tree_node* %label_op) #8, !dbg !2992
  ret void, !dbg !2993
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_catch(%union.tree_node* %types, %struct.gimple_seq_d* %handler) local_unnamed_addr #5 !dbg !2994 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %types, metadata !2998, metadata !DIExpression()), !dbg !3001
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %handler, metadata !2999, metadata !DIExpression()), !dbg !3001
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 11, i32 0) #8, !dbg !3002
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3000, metadata !DIExpression()), !dbg !3001
  tail call fastcc void @gimple_catch_set_types(%union.gimple_statement_d* %call, %union.tree_node* %types) #8, !dbg !3003
  %tobool = icmp eq %struct.gimple_seq_d* %handler, null, !dbg !3004
  br i1 %tobool, label %if.end, label %if.then, !dbg !3006

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_catch_set_handler(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %handler) #8, !dbg !3007
  br label %if.end, !dbg !3007

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3008
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_catch_set_types(%union.gimple_statement_d* %gs, %union.tree_node* %t) unnamed_addr #0 !dbg !3009 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3011, metadata !DIExpression()), !dbg !3013
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !3012, metadata !DIExpression()), !dbg !3013
  %types = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !3014
  %0 = bitcast i32* %types to %union.tree_node**, !dbg !3014
  store %union.tree_node* %t, %union.tree_node** %0, align 8, !dbg !3015
  ret void, !dbg !3016
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_catch_set_handler(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %handler) unnamed_addr #0 !dbg !3017 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3019, metadata !DIExpression()), !dbg !3021
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %handler, metadata !3020, metadata !DIExpression()), !dbg !3021
  %handler1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !3022
  %0 = bitcast %union.tree_node** %handler1 to %struct.gimple_seq_d**, !dbg !3022
  store %struct.gimple_seq_d* %handler, %struct.gimple_seq_d** %0, align 8, !dbg !3023
  ret void, !dbg !3024
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_eh_filter(%union.tree_node* %types, %struct.gimple_seq_d* %failure) local_unnamed_addr #5 !dbg !3025 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %types, metadata !3027, metadata !DIExpression()), !dbg !3030
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %failure, metadata !3028, metadata !DIExpression()), !dbg !3030
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 12, i32 0) #8, !dbg !3031
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3029, metadata !DIExpression()), !dbg !3030
  tail call fastcc void @gimple_eh_filter_set_types(%union.gimple_statement_d* %call, %union.tree_node* %types) #8, !dbg !3032
  %tobool = icmp eq %struct.gimple_seq_d* %failure, null, !dbg !3033
  br i1 %tobool, label %if.end, label %if.then, !dbg !3035

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_eh_filter_set_failure(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %failure) #8, !dbg !3036
  br label %if.end, !dbg !3036

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3037
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_eh_filter_set_types(%union.gimple_statement_d* %gs, %union.tree_node* %types) unnamed_addr #0 !dbg !3038 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3040, metadata !DIExpression()), !dbg !3042
  call void @llvm.dbg.value(metadata %union.tree_node* %types, metadata !3041, metadata !DIExpression()), !dbg !3042
  %types1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !3043
  %0 = bitcast i32* %types1 to %union.tree_node**, !dbg !3043
  store %union.tree_node* %types, %union.tree_node** %0, align 8, !dbg !3044
  ret void, !dbg !3045
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_eh_filter_set_failure(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %failure) unnamed_addr #0 !dbg !3046 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3048, metadata !DIExpression()), !dbg !3050
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %failure, metadata !3049, metadata !DIExpression()), !dbg !3050
  %failure1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !3051
  %0 = bitcast %union.tree_node** %failure1 to %struct.gimple_seq_d**, !dbg !3051
  store %struct.gimple_seq_d* %failure, %struct.gimple_seq_d** %0, align 8, !dbg !3052
  ret void, !dbg !3053
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_eh_must_not_throw(%union.tree_node* %decl) local_unnamed_addr #5 !dbg !3054 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !3056, metadata !DIExpression()), !dbg !3058
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 13, i32 1) #8, !dbg !3059
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3057, metadata !DIExpression()), !dbg !3058
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3060
  %bf.load = load i64, i64* %0, align 8, !dbg !3060
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3060
  %cmp = icmp eq i64 %bf.cast1, 29, !dbg !3060
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !3060

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 625, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3060
  br label %cond.end, !dbg !3060

cond.end:                                         ; preds = %entry, %cond.true
  %call1 = tail call i32 @flags_from_decl_or_type(%union.tree_node* %decl) #7, !dbg !3061
  %and = and i32 %call1, 8, !dbg !3061
  %tobool = icmp eq i32 %and, 0, !dbg !3061
  br i1 %tobool, label %cond.true2, label %cond.end4, !dbg !3061

cond.true2:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 626, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3061
  br label %cond.end4, !dbg !3061

cond.end4:                                        ; preds = %cond.end, %cond.true2
  tail call fastcc void @gimple_eh_must_not_throw_set_fndecl(%union.gimple_statement_d* %call, %union.tree_node* %decl) #8, !dbg !3062
  ret %union.gimple_statement_d* %call, !dbg !3063
}

declare dso_local i32 @flags_from_decl_or_type(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_eh_must_not_throw_set_fndecl(%union.gimple_statement_d* %gs, %union.tree_node* %decl) unnamed_addr #0 !dbg !3064 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3066, metadata !DIExpression()), !dbg !3068
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !3067, metadata !DIExpression()), !dbg !3068
  %fndecl = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !3069
  %0 = bitcast i32* %fndecl to %union.tree_node**, !dbg !3069
  store %union.tree_node* %decl, %union.tree_node** %0, align 8, !dbg !3070
  ret void, !dbg !3071
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_try(%struct.gimple_seq_d* %eval, %struct.gimple_seq_d* %cleanup, i32 %kind) local_unnamed_addr #5 !dbg !3072 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %eval, metadata !3076, metadata !DIExpression()), !dbg !3080
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %cleanup, metadata !3077, metadata !DIExpression()), !dbg !3080
  call void @llvm.dbg.value(metadata i32 %kind, metadata !3078, metadata !DIExpression()), !dbg !3080
  %kind.off = add i32 %kind, -1, !dbg !3081
  %switch = icmp ult i32 %kind.off, 2, !dbg !3081
  br i1 %switch, label %cond.end, label %cond.true, !dbg !3081

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3081
  br label %cond.end, !dbg !3081

cond.end:                                         ; preds = %entry, %cond.true
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 17, i32 0) #8, !dbg !3082
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3079, metadata !DIExpression()), !dbg !3080
  tail call fastcc void @gimple_set_subcode(%union.gimple_statement_d* %call, i32 %kind) #8, !dbg !3083
  %tobool = icmp eq %struct.gimple_seq_d* %eval, null, !dbg !3084
  br i1 %tobool, label %if.end, label %if.then, !dbg !3086

if.then:                                          ; preds = %cond.end
  tail call fastcc void @gimple_try_set_eval(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %eval) #8, !dbg !3087
  br label %if.end, !dbg !3087

if.end:                                           ; preds = %cond.end, %if.then
  %tobool2 = icmp eq %struct.gimple_seq_d* %cleanup, null, !dbg !3088
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !3090

if.then3:                                         ; preds = %if.end
  tail call fastcc void @gimple_try_set_cleanup(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %cleanup) #8, !dbg !3091
  br label %if.end4, !dbg !3091

if.end4:                                          ; preds = %if.end, %if.then3
  ret %union.gimple_statement_d* %call, !dbg !3092
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_subcode(%union.gimple_statement_d* %g, i32 %subcode) unnamed_addr #0 !dbg !3093 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3095, metadata !DIExpression()), !dbg !3097
  call void @llvm.dbg.value(metadata i32 %subcode, metadata !3096, metadata !DIExpression()), !dbg !3097
  %cmp = icmp ult i32 %subcode, 65536, !dbg !3098
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !3098

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 166, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3098
  br label %cond.end, !dbg !3098

cond.end:                                         ; preds = %entry, %cond.true
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 0, !dbg !3099
  %bf.load = load i32, i32* %0, align 8, !dbg !3100
  %bf.shl = shl i32 %subcode, 16, !dbg !3100
  %bf.clear = and i32 %bf.load, 65535, !dbg !3100
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !3100
  store i32 %bf.set, i32* %0, align 8, !dbg !3100
  ret void, !dbg !3101
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_try_set_eval(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %eval) unnamed_addr #0 !dbg !3102 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3104, metadata !DIExpression()), !dbg !3106
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %eval, metadata !3105, metadata !DIExpression()), !dbg !3106
  %eval1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !3107
  %0 = bitcast i32* %eval1 to %struct.gimple_seq_d**, !dbg !3107
  store %struct.gimple_seq_d* %eval, %struct.gimple_seq_d** %0, align 8, !dbg !3108
  ret void, !dbg !3109
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_try_set_cleanup(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %cleanup) unnamed_addr #0 !dbg !3110 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3112, metadata !DIExpression()), !dbg !3114
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %cleanup, metadata !3113, metadata !DIExpression()), !dbg !3114
  %cleanup1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !3115
  %0 = bitcast %union.tree_node** %cleanup1 to %struct.gimple_seq_d**, !dbg !3115
  store %struct.gimple_seq_d* %cleanup, %struct.gimple_seq_d** %0, align 8, !dbg !3116
  ret void, !dbg !3117
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_wce(%struct.gimple_seq_d* %cleanup) local_unnamed_addr #5 !dbg !3118 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %cleanup, metadata !3122, metadata !DIExpression()), !dbg !3124
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 34, i32 0) #8, !dbg !3125
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3123, metadata !DIExpression()), !dbg !3124
  %tobool = icmp eq %struct.gimple_seq_d* %cleanup, null, !dbg !3126
  br i1 %tobool, label %if.end, label %if.then, !dbg !3128

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_wce_set_cleanup(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %cleanup) #8, !dbg !3129
  br label %if.end, !dbg !3129

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3130
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_wce_set_cleanup(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %cleanup) unnamed_addr #0 !dbg !3131 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3133, metadata !DIExpression()), !dbg !3135
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %cleanup, metadata !3134, metadata !DIExpression()), !dbg !3135
  %cleanup1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !3136
  %0 = bitcast i32* %cleanup1 to %struct.gimple_seq_d**, !dbg !3136
  store %struct.gimple_seq_d* %cleanup, %struct.gimple_seq_d** %0, align 8, !dbg !3137
  ret void, !dbg !3138
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_resx(i32 %region) local_unnamed_addr #5 !dbg !3139 {
entry:
  call void @llvm.dbg.value(metadata i32 %region, metadata !3143, metadata !DIExpression()), !dbg !3145
  %call = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 14, i32 0, i32 0) #8, !dbg !3146
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3144, metadata !DIExpression()), !dbg !3145
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %call, i64 0, i32 0, i32 1, !dbg !3147
  store i32 %region, i32* %0, align 8, !dbg !3148
  ret %union.gimple_statement_d* %call, !dbg !3149
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_switch_nlabels(i32 %nlabels, %union.tree_node* %index, %union.tree_node* %default_label) local_unnamed_addr #5 !dbg !3150 {
entry:
  call void @llvm.dbg.value(metadata i32 %nlabels, metadata !3154, metadata !DIExpression()), !dbg !3158
  call void @llvm.dbg.value(metadata %union.tree_node* %index, metadata !3155, metadata !DIExpression()), !dbg !3158
  call void @llvm.dbg.value(metadata %union.tree_node* %default_label, metadata !3156, metadata !DIExpression()), !dbg !3158
  %cmp = icmp eq %union.tree_node* %default_label, null, !dbg !3159
  %add = select i1 %cmp, i32 1, i32 2, !dbg !3159
  %add1 = add i32 %add, %nlabels, !dbg !3159
  %call = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 5, i32 0, i32 %add1) #8, !dbg !3159
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3157, metadata !DIExpression()), !dbg !3158
  tail call fastcc void @gimple_switch_set_index(%union.gimple_statement_d* %call, %union.tree_node* %index) #8, !dbg !3160
  br i1 %cmp, label %if.end, label %if.then, !dbg !3161

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_switch_set_default_label(%union.gimple_statement_d* %call, %union.tree_node* nonnull %default_label) #8, !dbg !3162
  br label %if.end, !dbg !3162

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3164
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_switch_set_index(%union.gimple_statement_d* %gs, %union.tree_node* %index) unnamed_addr #0 !dbg !3165 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3167, metadata !DIExpression()), !dbg !3169
  call void @llvm.dbg.value(metadata %union.tree_node* %index, metadata !3168, metadata !DIExpression()), !dbg !3169
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %index, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3170
  %bf.load = load i64, i64* %0, align 8, !dbg !3170
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3170
  %cmp = icmp eq i64 %bf.cast1, 32, !dbg !3170
  br i1 %cmp, label %cond.end, label %lor.lhs.false, !dbg !3170

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 34, !dbg !3170
  br i1 %cmp5, label %cond.end, label %lor.lhs.false6, !dbg !3170

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %cmp11 = icmp eq i64 %bf.cast1, 36, !dbg !3170
  br i1 %cmp11, label %cond.end, label %lor.lhs.false12, !dbg !3170

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %cmp17 = icmp eq i64 %bf.cast1, 141, !dbg !3170
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false39, !dbg !3170

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %var = getelementptr inbounds %union.tree_node, %union.tree_node* %index, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !3170
  %1 = bitcast i32* %var to i64**, !dbg !3170
  %2 = load i64*, i64** %1, align 8, !dbg !3170
  %bf.load19 = load i64, i64* %2, align 8, !dbg !3170
  %bf.cast215 = and i64 %bf.load19, 65535, !dbg !3170
  %cmp22 = icmp eq i64 %bf.cast215, 32, !dbg !3170
  br i1 %cmp22, label %cond.end, label %lor.lhs.false23, !dbg !3170

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %cmp30 = icmp eq i64 %bf.cast215, 34, !dbg !3170
  br i1 %cmp30, label %cond.end, label %lor.lhs.false31, !dbg !3170

lor.lhs.false31:                                  ; preds = %lor.lhs.false23
  %cmp38 = icmp eq i64 %bf.cast215, 36, !dbg !3170
  br i1 %cmp38, label %cond.end, label %lor.lhs.false39, !dbg !3170

lor.lhs.false39:                                  ; preds = %lor.lhs.false31, %lor.lhs.false12
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast1, !dbg !3170
  %3 = load i32, i32* %arrayidx, align 4, !dbg !3170
  %cmp44 = icmp eq i32 %3, 1, !dbg !3170
  br i1 %cmp44, label %cond.end, label %cond.true, !dbg !3170

cond.true:                                        ; preds = %lor.lhs.false39
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3203, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3170
  br label %cond.end, !dbg !3170

cond.end:                                         ; preds = %entry, %lor.lhs.false, %lor.lhs.false6, %land.lhs.true, %lor.lhs.false23, %lor.lhs.false31, %lor.lhs.false39, %cond.true
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %index) #8, !dbg !3171
  ret void, !dbg !3172
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_switch_set_default_label(%union.gimple_statement_d* %gs, %union.tree_node* %label) unnamed_addr #0 !dbg !3173 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3175, metadata !DIExpression()), !dbg !3177
  call void @llvm.dbg.value(metadata %union.tree_node* %label, metadata !3176, metadata !DIExpression()), !dbg !3177
  tail call fastcc void @gimple_switch_set_label(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %label) #8, !dbg !3178
  ret void, !dbg !3179
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_switch(i32 %nlabels, %union.tree_node* %index, %union.tree_node* %default_label, ...) local_unnamed_addr #5 !dbg !3180 {
entry:
  %al = alloca [1 x %struct.__va_list_tag], align 16
  call void @llvm.dbg.value(metadata i32 %nlabels, metadata !3184, metadata !DIExpression()), !dbg !3191
  call void @llvm.dbg.value(metadata %union.tree_node* %index, metadata !3185, metadata !DIExpression()), !dbg !3191
  call void @llvm.dbg.value(metadata %union.tree_node* %default_label, metadata !3186, metadata !DIExpression()), !dbg !3191
  %0 = bitcast [1 x %struct.__va_list_tag]* %al to i8*, !dbg !3192
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3192
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %al, metadata !3187, metadata !DIExpression()), !dbg !3193
  %call = tail call %union.gimple_statement_d* @gimple_build_switch_nlabels(i32 %nlabels, %union.tree_node* %index, %union.tree_node* %default_label) #8, !dbg !3194
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3190, metadata !DIExpression()), !dbg !3191
  call void @llvm.va_start(i8* %0), !dbg !3195
  %cmp = icmp ne %union.tree_node* %default_label, null, !dbg !3196
  %conv = zext i1 %cmp to i32, !dbg !3196
  call void @llvm.dbg.value(metadata i32 %conv, metadata !3189, metadata !DIExpression()), !dbg !3191
  call void @llvm.dbg.value(metadata i32 0, metadata !3188, metadata !DIExpression()), !dbg !3191
  %gp_offset_p = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %al, i64 0, i64 0, i32 0, !dbg !3197
  %overflow_arg_area_p = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %al, i64 0, i64 0, i32 2, !dbg !3197
  %1 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %al, i64 0, i64 0, i32 3, !dbg !3197
  br label %for.cond, !dbg !3200

for.cond:                                         ; preds = %vaarg.end, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %vaarg.end ], !dbg !3201
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3188, metadata !DIExpression()), !dbg !3191
  %exitcond = icmp eq i32 %i.0, %nlabels, !dbg !3202
  br i1 %exitcond, label %for.end, label %for.body, !dbg !3203

for.body:                                         ; preds = %for.cond
  %add = add i32 %i.0, %conv, !dbg !3204
  %gp_offset = load i32, i32* %gp_offset_p, align 16, !dbg !3205
  %fits_in_gp = icmp ult i32 %gp_offset, 41, !dbg !3205
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !3205

vaarg.in_reg:                                     ; preds = %for.body
  %reg_save_area = load i8*, i8** %1, align 16, !dbg !3205
  %2 = sext i32 %gp_offset to i64, !dbg !3205
  %3 = getelementptr i8, i8* %reg_save_area, i64 %2, !dbg !3205
  %4 = add i32 %gp_offset, 8, !dbg !3205
  store i32 %4, i32* %gp_offset_p, align 16, !dbg !3205
  br label %vaarg.end, !dbg !3205

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !3205
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i64 8, !dbg !3205
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !3205
  br label %vaarg.end, !dbg !3205

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr.in = phi i8* [ %3, %vaarg.in_reg ], [ %overflow_arg_area, %vaarg.in_mem ]
  %vaarg.addr = bitcast i8* %vaarg.addr.in to %union.tree_node**, !dbg !3205
  %5 = load %union.tree_node*, %union.tree_node** %vaarg.addr, align 8, !dbg !3205
  call fastcc void @gimple_switch_set_label(%union.gimple_statement_d* %call, i32 %add, %union.tree_node* %5) #8, !dbg !3206
  %inc = add i32 %i.0, 1, !dbg !3207
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3188, metadata !DIExpression()), !dbg !3191
  br label %for.cond, !dbg !3208, !llvm.loop !3209

for.end:                                          ; preds = %for.cond
  call void @llvm.va_end(i8* nonnull %0), !dbg !3211
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3212
  ret %union.gimple_statement_d* %call, !dbg !3213
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_switch_set_label(%union.gimple_statement_d* %gs, i32 %index, %union.tree_node* %label) unnamed_addr #0 !dbg !3214 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3216, metadata !DIExpression()), !dbg !3219
  call void @llvm.dbg.value(metadata i32 %index, metadata !3217, metadata !DIExpression()), !dbg !3219
  call void @llvm.dbg.value(metadata %union.tree_node* %label, metadata !3218, metadata !DIExpression()), !dbg !3219
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #8, !dbg !3220
  %add = add i32 %index, 1, !dbg !3220
  %cmp = icmp ugt i32 %call, %add, !dbg !3220
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !3220

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3225, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3220
  br label %cond.end, !dbg !3220

cond.end:                                         ; preds = %entry, %cond.true
  %cmp1 = icmp eq %union.tree_node* %label, null, !dbg !3221
  br i1 %cmp1, label %cond.end5, label %lor.lhs.false, !dbg !3221

lor.lhs.false:                                    ; preds = %cond.end
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %label, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3221
  %bf.load = load i64, i64* %0, align 8, !dbg !3221
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3221
  %cmp2 = icmp eq i64 %bf.cast1, 139, !dbg !3221
  br i1 %cmp2, label %cond.end5, label %cond.true3, !dbg !3221

cond.true3:                                       ; preds = %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3226, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3221
  br label %cond.end5, !dbg !3221

cond.end5:                                        ; preds = %cond.end, %lor.lhs.false, %cond.true3
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %add, %union.tree_node* %label) #8, !dbg !3222
  ret void, !dbg !3223
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_switch_vec(%union.tree_node* %index, %union.tree_node* %default_label, %struct.VEC_tree_heap* %args) local_unnamed_addr #5 !dbg !3224 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %index, metadata !3228, metadata !DIExpression()), !dbg !3235
  call void @llvm.dbg.value(metadata %union.tree_node* %default_label, metadata !3229, metadata !DIExpression()), !dbg !3235
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %args, metadata !3230, metadata !DIExpression()), !dbg !3235
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %args, i64 0, i32 0, !dbg !3236
  %call = tail call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base) #8, !dbg !3236
  call void @llvm.dbg.value(metadata i32 %call, metadata !3233, metadata !DIExpression()), !dbg !3235
  %call1 = tail call %union.gimple_statement_d* @gimple_build_switch_nlabels(i32 %call, %union.tree_node* %index, %union.tree_node* %default_label) #8, !dbg !3237
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call1, metadata !3234, metadata !DIExpression()), !dbg !3235
  %cmp = icmp ne %union.tree_node* %default_label, null, !dbg !3238
  %conv = zext i1 %cmp to i32, !dbg !3238
  call void @llvm.dbg.value(metadata i32 %conv, metadata !3232, metadata !DIExpression()), !dbg !3235
  call void @llvm.dbg.value(metadata i32 0, metadata !3231, metadata !DIExpression()), !dbg !3235
  br label %for.cond, !dbg !3239

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ], !dbg !3241
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3231, metadata !DIExpression()), !dbg !3235
  %exitcond = icmp eq i32 %i.0, %call, !dbg !3242
  br i1 %exitcond, label %for.end, label %for.body, !dbg !3244

for.body:                                         ; preds = %for.cond
  %add = add i32 %i.0, %conv, !dbg !3245
  %call10 = tail call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %base, i32 %i.0) #8, !dbg !3246
  tail call fastcc void @gimple_switch_set_label(%union.gimple_statement_d* %call1, i32 %add, %union.tree_node* %call10) #8, !dbg !3247
  %inc = add i32 %i.0, 1, !dbg !3248
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3231, metadata !DIExpression()), !dbg !3235
  br label %for.cond, !dbg !3249, !llvm.loop !3250

for.end:                                          ; preds = %for.cond
  ret %union.gimple_statement_d* %call1, !dbg !3252
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_eh_dispatch(i32 %region) local_unnamed_addr #5 !dbg !3253 {
entry:
  call void @llvm.dbg.value(metadata i32 %region, metadata !3255, metadata !DIExpression()), !dbg !3257
  %call = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 15, i32 0, i32 0) #8, !dbg !3258
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3256, metadata !DIExpression()), !dbg !3257
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %call, i64 0, i32 0, i32 1, !dbg !3259
  store i32 %region, i32* %0, align 8, !dbg !3260
  ret %union.gimple_statement_d* %call, !dbg !3261
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_debug_bind_stat(%union.tree_node* %var, %union.tree_node* %value, %union.gimple_statement_d* %stmt) local_unnamed_addr #5 !dbg !3262 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !3266, metadata !DIExpression()), !dbg !3270
  call void @llvm.dbg.value(metadata %union.tree_node* %value, metadata !3267, metadata !DIExpression()), !dbg !3270
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3268, metadata !DIExpression()), !dbg !3270
  %call = tail call fastcc %union.gimple_statement_d* @gimple_build_with_ops_stat(i32 2, i32 0, i32 2) #8, !dbg !3271
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3269, metadata !DIExpression()), !dbg !3270
  tail call fastcc void @gimple_debug_bind_set_var(%union.gimple_statement_d* %call, %union.tree_node* %var) #8, !dbg !3272
  tail call fastcc void @gimple_debug_bind_set_value(%union.gimple_statement_d* %call, %union.tree_node* %value) #8, !dbg !3273
  %tobool = icmp eq %union.gimple_statement_d* %stmt, null, !dbg !3274
  br i1 %tobool, label %if.end, label %if.then, !dbg !3276

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* nonnull %stmt) #8, !dbg !3277
  tail call fastcc void @gimple_set_block(%union.gimple_statement_d* %call, %union.tree_node* %call1) #8, !dbg !3279
  %call2 = tail call fastcc i32 @gimple_location(%union.gimple_statement_d* nonnull %stmt) #8, !dbg !3280
  tail call fastcc void @gimple_set_location(%union.gimple_statement_d* %call, i32 %call2) #8, !dbg !3281
  br label %if.end, !dbg !3282

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3283
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_debug_bind_set_var(%union.gimple_statement_d* %dbg, %union.tree_node* %var) unnamed_addr #0 !dbg !3284 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %dbg, metadata !3286, metadata !DIExpression()), !dbg !3288
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !3287, metadata !DIExpression()), !dbg !3288
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %dbg, i32 0, %union.tree_node* %var) #8, !dbg !3289
  ret void, !dbg !3290
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_debug_bind_set_value(%union.gimple_statement_d* %dbg, %union.tree_node* %value) unnamed_addr #0 !dbg !3291 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %dbg, metadata !3293, metadata !DIExpression()), !dbg !3295
  call void @llvm.dbg.value(metadata %union.tree_node* %value, metadata !3294, metadata !DIExpression()), !dbg !3295
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %dbg, i32 1, %union.tree_node* %value) #8, !dbg !3296
  ret void, !dbg !3297
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !3298 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3303, metadata !DIExpression()), !dbg !3304
  %block = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 5, !dbg !3305
  %0 = load %union.tree_node*, %union.tree_node** %block, align 8, !dbg !3305
  ret %union.tree_node* %0, !dbg !3306
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_location(%union.gimple_statement_d* %g, i32 %location) unnamed_addr #0 !dbg !3307 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3311, metadata !DIExpression()), !dbg !3313
  call void @llvm.dbg.value(metadata i32 %location, metadata !3312, metadata !DIExpression()), !dbg !3313
  %location1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 2, !dbg !3314
  store i32 %location, i32* %location1, align 8, !dbg !3315
  ret void, !dbg !3316
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_location(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !3317 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3321, metadata !DIExpression()), !dbg !3322
  %location = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 2, !dbg !3323
  %0 = load i32, i32* %location, align 8, !dbg !3323
  ret i32 %0, !dbg !3324
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_critical(%struct.gimple_seq_d* %body, %union.tree_node* %name) local_unnamed_addr #5 !dbg !3325 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3329, metadata !DIExpression()), !dbg !3332
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !3330, metadata !DIExpression()), !dbg !3332
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 22, i32 0) #8, !dbg !3333
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3331, metadata !DIExpression()), !dbg !3332
  tail call fastcc void @gimple_omp_critical_set_name(%union.gimple_statement_d* %call, %union.tree_node* %name) #8, !dbg !3334
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !3335
  br i1 %tobool, label %if.end, label %if.then, !dbg !3337

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !3338
  br label %if.end, !dbg !3338

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3339
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_critical_set_name(%union.gimple_statement_d* %gs, %union.tree_node* %name) unnamed_addr #0 !dbg !3340 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3342, metadata !DIExpression()), !dbg !3344
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !3343, metadata !DIExpression()), !dbg !3344
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !3345
  store %union.tree_node* %name, %union.tree_node** %0, align 8, !dbg !3346
  ret void, !dbg !3347
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %body) unnamed_addr #0 !dbg !3348 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3350, metadata !DIExpression()), !dbg !3352
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3351, metadata !DIExpression()), !dbg !3352
  %body1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !3353
  %0 = bitcast i32* %body1 to %struct.gimple_seq_d**, !dbg !3353
  store %struct.gimple_seq_d* %body, %struct.gimple_seq_d** %0, align 8, !dbg !3354
  ret void, !dbg !3355
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_for(%struct.gimple_seq_d* %body, %union.tree_node* %clauses, i64 %collapse, %struct.gimple_seq_d* %pre_body) local_unnamed_addr #5 !dbg !3356 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3360, metadata !DIExpression()), !dbg !3365
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3361, metadata !DIExpression()), !dbg !3365
  call void @llvm.dbg.value(metadata i64 %collapse, metadata !3362, metadata !DIExpression()), !dbg !3365
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %pre_body, metadata !3363, metadata !DIExpression()), !dbg !3365
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 23, i32 0) #8, !dbg !3366
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3364, metadata !DIExpression()), !dbg !3365
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !3367
  br i1 %tobool, label %if.end, label %if.then, !dbg !3369

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !3370
  br label %if.end, !dbg !3370

if.end:                                           ; preds = %entry, %if.then
  tail call fastcc void @gimple_omp_for_set_clauses(%union.gimple_statement_d* %call, %union.tree_node* %clauses) #8, !dbg !3371
  %collapse1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %call, i64 0, i32 0, i32 4, !dbg !3372
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse1 to i64*, !dbg !3372
  store i64 %collapse, i64* %0, align 8, !dbg !3373
  %mul = mul i64 %collapse, 40, !dbg !3374
  %call2 = tail call i8* @ggc_alloc_cleared_stat(i64 %mul) #7, !dbg !3374
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %call, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !3375
  %1 = bitcast %struct.ssa_use_operand_d** %iter to i8**, !dbg !3376
  store i8* %call2, i8** %1, align 8, !dbg !3376
  %tobool4 = icmp eq %struct.gimple_seq_d* %pre_body, null, !dbg !3377
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !3379

if.then5:                                         ; preds = %if.end
  tail call fastcc void @gimple_omp_for_set_pre_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %pre_body) #8, !dbg !3380
  br label %if.end6, !dbg !3380

if.end6:                                          ; preds = %if.end, %if.then5
  ret %union.gimple_statement_d* %call, !dbg !3381
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) unnamed_addr #0 !dbg !3382 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3384, metadata !DIExpression()), !dbg !3386
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3385, metadata !DIExpression()), !dbg !3386
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !3387
  store %union.tree_node* %clauses, %union.tree_node** %0, align 8, !dbg !3388
  ret void, !dbg !3389
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_pre_body(%union.gimple_statement_d* %gs, %struct.gimple_seq_d* %pre_body) unnamed_addr #0 !dbg !3390 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3392, metadata !DIExpression()), !dbg !3394
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %pre_body, metadata !3393, metadata !DIExpression()), !dbg !3394
  %pre_body1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 2, !dbg !3395
  %0 = bitcast %union.anon* %pre_body1 to %struct.gimple_seq_d**, !dbg !3395
  store %struct.gimple_seq_d* %pre_body, %struct.gimple_seq_d** %0, align 8, !dbg !3396
  ret void, !dbg !3397
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_parallel(%struct.gimple_seq_d* %body, %union.tree_node* %clauses, %union.tree_node* %child_fn, %union.tree_node* %data_arg) local_unnamed_addr #5 !dbg !3398 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3402, metadata !DIExpression()), !dbg !3407
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3403, metadata !DIExpression()), !dbg !3407
  call void @llvm.dbg.value(metadata %union.tree_node* %child_fn, metadata !3404, metadata !DIExpression()), !dbg !3407
  call void @llvm.dbg.value(metadata %union.tree_node* %data_arg, metadata !3405, metadata !DIExpression()), !dbg !3407
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 26, i32 0) #8, !dbg !3408
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3406, metadata !DIExpression()), !dbg !3407
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !3409
  br i1 %tobool, label %if.end, label %if.then, !dbg !3411

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !3412
  br label %if.end, !dbg !3412

if.end:                                           ; preds = %entry, %if.then
  tail call fastcc void @gimple_omp_parallel_set_clauses(%union.gimple_statement_d* %call, %union.tree_node* %clauses) #8, !dbg !3413
  tail call fastcc void @gimple_omp_parallel_set_child_fn(%union.gimple_statement_d* %call, %union.tree_node* %child_fn) #8, !dbg !3414
  tail call fastcc void @gimple_omp_parallel_set_data_arg(%union.gimple_statement_d* %call, %union.tree_node* %data_arg) #8, !dbg !3415
  ret %union.gimple_statement_d* %call, !dbg !3416
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_parallel_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) unnamed_addr #0 !dbg !3417 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3419, metadata !DIExpression()), !dbg !3421
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3420, metadata !DIExpression()), !dbg !3421
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !3422
  store %union.tree_node* %clauses, %union.tree_node** %0, align 8, !dbg !3423
  ret void, !dbg !3424
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_parallel_set_child_fn(%union.gimple_statement_d* %gs, %union.tree_node* %child_fn) unnamed_addr #0 !dbg !3425 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3427, metadata !DIExpression()), !dbg !3429
  call void @llvm.dbg.value(metadata %union.tree_node* %child_fn, metadata !3428, metadata !DIExpression()), !dbg !3429
  %child_fn1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !3430
  %0 = bitcast [1 x %struct.phi_arg_d]* %child_fn1 to %union.tree_node**, !dbg !3430
  store %union.tree_node* %child_fn, %union.tree_node** %0, align 8, !dbg !3431
  ret void, !dbg !3432
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_parallel_set_data_arg(%union.gimple_statement_d* %gs, %union.tree_node* %data_arg) unnamed_addr #0 !dbg !3433 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3435, metadata !DIExpression()), !dbg !3437
  call void @llvm.dbg.value(metadata %union.tree_node* %data_arg, metadata !3436, metadata !DIExpression()), !dbg !3437
  %data_arg1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !3438
  %0 = bitcast %struct.ssa_use_operand_d** %data_arg1 to %union.tree_node**, !dbg !3438
  store %union.tree_node* %data_arg, %union.tree_node** %0, align 8, !dbg !3439
  ret void, !dbg !3440
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_task(%struct.gimple_seq_d* %body, %union.tree_node* %clauses, %union.tree_node* %child_fn, %union.tree_node* %data_arg, %union.tree_node* %copy_fn, %union.tree_node* %arg_size, %union.tree_node* %arg_align) local_unnamed_addr #5 !dbg !3441 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3445, metadata !DIExpression()), !dbg !3453
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3446, metadata !DIExpression()), !dbg !3453
  call void @llvm.dbg.value(metadata %union.tree_node* %child_fn, metadata !3447, metadata !DIExpression()), !dbg !3453
  call void @llvm.dbg.value(metadata %union.tree_node* %data_arg, metadata !3448, metadata !DIExpression()), !dbg !3453
  call void @llvm.dbg.value(metadata %union.tree_node* %copy_fn, metadata !3449, metadata !DIExpression()), !dbg !3453
  call void @llvm.dbg.value(metadata %union.tree_node* %arg_size, metadata !3450, metadata !DIExpression()), !dbg !3453
  call void @llvm.dbg.value(metadata %union.tree_node* %arg_align, metadata !3451, metadata !DIExpression()), !dbg !3453
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 27, i32 0) #8, !dbg !3454
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3452, metadata !DIExpression()), !dbg !3453
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !3455
  br i1 %tobool, label %if.end, label %if.then, !dbg !3457

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !3458
  br label %if.end, !dbg !3458

if.end:                                           ; preds = %entry, %if.then
  tail call fastcc void @gimple_omp_task_set_clauses(%union.gimple_statement_d* %call, %union.tree_node* %clauses) #8, !dbg !3459
  tail call fastcc void @gimple_omp_task_set_child_fn(%union.gimple_statement_d* %call, %union.tree_node* %child_fn) #8, !dbg !3460
  tail call fastcc void @gimple_omp_task_set_data_arg(%union.gimple_statement_d* %call, %union.tree_node* %data_arg) #8, !dbg !3461
  tail call fastcc void @gimple_omp_task_set_copy_fn(%union.gimple_statement_d* %call, %union.tree_node* %copy_fn) #8, !dbg !3462
  tail call fastcc void @gimple_omp_task_set_arg_size(%union.gimple_statement_d* %call, %union.tree_node* %arg_size) #8, !dbg !3463
  tail call fastcc void @gimple_omp_task_set_arg_align(%union.gimple_statement_d* %call, %union.tree_node* %arg_align) #8, !dbg !3464
  ret %union.gimple_statement_d* %call, !dbg !3465
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_task_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) unnamed_addr #0 !dbg !3466 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3468, metadata !DIExpression()), !dbg !3470
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3469, metadata !DIExpression()), !dbg !3470
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !3471
  store %union.tree_node* %clauses, %union.tree_node** %0, align 8, !dbg !3472
  ret void, !dbg !3473
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_task_set_child_fn(%union.gimple_statement_d* %gs, %union.tree_node* %child_fn) unnamed_addr #0 !dbg !3474 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3476, metadata !DIExpression()), !dbg !3478
  call void @llvm.dbg.value(metadata %union.tree_node* %child_fn, metadata !3477, metadata !DIExpression()), !dbg !3478
  %child_fn1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !3479
  %0 = bitcast [1 x %struct.phi_arg_d]* %child_fn1 to %union.tree_node**, !dbg !3479
  store %union.tree_node* %child_fn, %union.tree_node** %0, align 8, !dbg !3480
  ret void, !dbg !3481
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_task_set_data_arg(%union.gimple_statement_d* %gs, %union.tree_node* %data_arg) unnamed_addr #0 !dbg !3482 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3484, metadata !DIExpression()), !dbg !3486
  call void @llvm.dbg.value(metadata %union.tree_node* %data_arg, metadata !3485, metadata !DIExpression()), !dbg !3486
  %data_arg1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !3487
  %0 = bitcast %struct.ssa_use_operand_d** %data_arg1 to %union.tree_node**, !dbg !3487
  store %union.tree_node* %data_arg, %union.tree_node** %0, align 8, !dbg !3488
  ret void, !dbg !3489
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_task_set_copy_fn(%union.gimple_statement_d* %gs, %union.tree_node* %copy_fn) unnamed_addr #0 !dbg !3490 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3492, metadata !DIExpression()), !dbg !3494
  call void @llvm.dbg.value(metadata %union.tree_node* %copy_fn, metadata !3493, metadata !DIExpression()), !dbg !3494
  %copy_fn1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 2, !dbg !3495
  %0 = bitcast %union.anon* %copy_fn1 to %union.tree_node**, !dbg !3495
  store %union.tree_node* %copy_fn, %union.tree_node** %0, align 8, !dbg !3496
  ret void, !dbg !3497
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_task_set_arg_size(%union.gimple_statement_d* %gs, %union.tree_node* %arg_size) unnamed_addr #0 !dbg !3498 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3500, metadata !DIExpression()), !dbg !3502
  call void @llvm.dbg.value(metadata %union.tree_node* %arg_size, metadata !3501, metadata !DIExpression()), !dbg !3502
  %arg_size1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !3503
  %0 = bitcast %union.tree_node*** %arg_size1 to %union.tree_node**, !dbg !3503
  store %union.tree_node* %arg_size, %union.tree_node** %0, align 8, !dbg !3504
  ret void, !dbg !3505
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_task_set_arg_align(%union.gimple_statement_d* %gs, %union.tree_node* %arg_align) unnamed_addr #0 !dbg !3506 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3508, metadata !DIExpression()), !dbg !3510
  call void @llvm.dbg.value(metadata %union.tree_node* %arg_align, metadata !3509, metadata !DIExpression()), !dbg !3510
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 1, !dbg !3511
  store %union.tree_node* %arg_align, %union.tree_node** %0, align 8, !dbg !3512
  ret void, !dbg !3513
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_section(%struct.gimple_seq_d* %body) local_unnamed_addr #5 !dbg !3514 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3516, metadata !DIExpression()), !dbg !3518
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 29, i32 0) #8, !dbg !3519
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3517, metadata !DIExpression()), !dbg !3518
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !3520
  br i1 %tobool, label %if.end, label %if.then, !dbg !3522

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !3523
  br label %if.end, !dbg !3523

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3524
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_master(%struct.gimple_seq_d* %body) local_unnamed_addr #5 !dbg !3525 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3527, metadata !DIExpression()), !dbg !3529
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 24, i32 0) #8, !dbg !3530
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3528, metadata !DIExpression()), !dbg !3529
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !3531
  br i1 %tobool, label %if.end, label %if.then, !dbg !3533

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !3534
  br label %if.end, !dbg !3534

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3535
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_continue(%union.tree_node* %control_def, %union.tree_node* %control_use) local_unnamed_addr #5 !dbg !3536 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %control_def, metadata !3538, metadata !DIExpression()), !dbg !3541
  call void @llvm.dbg.value(metadata %union.tree_node* %control_use, metadata !3539, metadata !DIExpression()), !dbg !3541
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 21, i32 0) #8, !dbg !3542
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3540, metadata !DIExpression()), !dbg !3541
  tail call fastcc void @gimple_omp_continue_set_control_def(%union.gimple_statement_d* %call, %union.tree_node* %control_def) #8, !dbg !3543
  tail call fastcc void @gimple_omp_continue_set_control_use(%union.gimple_statement_d* %call, %union.tree_node* %control_use) #8, !dbg !3544
  ret %union.gimple_statement_d* %call, !dbg !3545
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_continue_set_control_def(%union.gimple_statement_d* %g, %union.tree_node* %def) unnamed_addr #0 !dbg !3546 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3548, metadata !DIExpression()), !dbg !3550
  call void @llvm.dbg.value(metadata %union.tree_node* %def, metadata !3549, metadata !DIExpression()), !dbg !3550
  %control_def = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !3551
  %0 = bitcast i32* %control_def to %union.tree_node**, !dbg !3551
  store %union.tree_node* %def, %union.tree_node** %0, align 8, !dbg !3552
  ret void, !dbg !3553
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_continue_set_control_use(%union.gimple_statement_d* %g, %union.tree_node* %use) unnamed_addr #0 !dbg !3554 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3556, metadata !DIExpression()), !dbg !3558
  call void @llvm.dbg.value(metadata %union.tree_node* %use, metadata !3557, metadata !DIExpression()), !dbg !3558
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !3559
  store %union.tree_node* %use, %union.tree_node** %0, align 8, !dbg !3560
  ret void, !dbg !3561
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_ordered(%struct.gimple_seq_d* %body) local_unnamed_addr #5 !dbg !3562 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3564, metadata !DIExpression()), !dbg !3566
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 25, i32 0) #8, !dbg !3567
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3565, metadata !DIExpression()), !dbg !3566
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !3568
  br i1 %tobool, label %if.end, label %if.then, !dbg !3570

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !3571
  br label %if.end, !dbg !3571

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3572
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_return(i8 zeroext %wait_p) local_unnamed_addr #5 !dbg !3573 {
entry:
  call void @llvm.dbg.value(metadata i8 %wait_p, metadata !3577, metadata !DIExpression()), !dbg !3579
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 28, i32 0) #8, !dbg !3580
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3578, metadata !DIExpression()), !dbg !3579
  %tobool = icmp eq i8 %wait_p, 0, !dbg !3581
  br i1 %tobool, label %if.end, label %if.then, !dbg !3583

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_return_set_nowait(%union.gimple_statement_d* %call) #8, !dbg !3584
  br label %if.end, !dbg !3584

if.end:                                           ; preds = %entry, %if.then
  ret %union.gimple_statement_d* %call, !dbg !3585
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_return_set_nowait(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !3586 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !3590, metadata !DIExpression()), !dbg !3591
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !3592
  %bf.load = load i32, i32* %0, align 8, !dbg !3593
  %bf.lshr = and i32 %bf.load, -131072, !dbg !3593
  %or = or i32 %bf.lshr, 65536, !dbg !3593
  %bf.clear = and i32 %bf.load, 65535, !dbg !3593
  %bf.set = or i32 %bf.clear, %or, !dbg !3593
  store i32 %bf.set, i32* %0, align 8, !dbg !3593
  ret void, !dbg !3594
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_sections(%struct.gimple_seq_d* %body, %union.tree_node* %clauses) local_unnamed_addr #5 !dbg !3595 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3597, metadata !DIExpression()), !dbg !3600
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3598, metadata !DIExpression()), !dbg !3600
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 30, i32 0) #8, !dbg !3601
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3599, metadata !DIExpression()), !dbg !3600
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !3602
  br i1 %tobool, label %if.end, label %if.then, !dbg !3604

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !3605
  br label %if.end, !dbg !3605

if.end:                                           ; preds = %entry, %if.then
  tail call fastcc void @gimple_omp_sections_set_clauses(%union.gimple_statement_d* %call, %union.tree_node* %clauses) #8, !dbg !3606
  ret %union.gimple_statement_d* %call, !dbg !3607
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_sections_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) unnamed_addr #0 !dbg !3608 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3610, metadata !DIExpression()), !dbg !3612
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3611, metadata !DIExpression()), !dbg !3612
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !3613
  store %union.tree_node* %clauses, %union.tree_node** %0, align 8, !dbg !3614
  ret void, !dbg !3615
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_sections_switch() local_unnamed_addr #5 !dbg !3616 {
entry:
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 31, i32 0) #8, !dbg !3617
  ret %union.gimple_statement_d* %call, !dbg !3618
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_single(%struct.gimple_seq_d* %body, %union.tree_node* %clauses) local_unnamed_addr #5 !dbg !3619 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3621, metadata !DIExpression()), !dbg !3624
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3622, metadata !DIExpression()), !dbg !3624
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 32, i32 0) #8, !dbg !3625
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3623, metadata !DIExpression()), !dbg !3624
  %tobool = icmp eq %struct.gimple_seq_d* %body, null, !dbg !3626
  br i1 %tobool, label %if.end, label %if.then, !dbg !3628

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call, %struct.gimple_seq_d* nonnull %body) #8, !dbg !3629
  br label %if.end, !dbg !3629

if.end:                                           ; preds = %entry, %if.then
  tail call fastcc void @gimple_omp_single_set_clauses(%union.gimple_statement_d* %call, %union.tree_node* %clauses) #8, !dbg !3630
  ret %union.gimple_statement_d* %call, !dbg !3631
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_single_set_clauses(%union.gimple_statement_d* %gs, %union.tree_node* %clauses) unnamed_addr #0 !dbg !3632 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3634, metadata !DIExpression()), !dbg !3636
  call void @llvm.dbg.value(metadata %union.tree_node* %clauses, metadata !3635, metadata !DIExpression()), !dbg !3636
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !3637
  store %union.tree_node* %clauses, %union.tree_node** %0, align 8, !dbg !3638
  ret void, !dbg !3639
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_atomic_load(%union.tree_node* %lhs, %union.tree_node* %rhs) local_unnamed_addr #5 !dbg !3640 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !3642, metadata !DIExpression()), !dbg !3645
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !3643, metadata !DIExpression()), !dbg !3645
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 19, i32 0) #8, !dbg !3646
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3644, metadata !DIExpression()), !dbg !3645
  tail call fastcc void @gimple_omp_atomic_load_set_lhs(%union.gimple_statement_d* %call, %union.tree_node* %lhs) #8, !dbg !3647
  tail call fastcc void @gimple_omp_atomic_load_set_rhs(%union.gimple_statement_d* %call, %union.tree_node* %rhs) #8, !dbg !3648
  ret %union.gimple_statement_d* %call, !dbg !3649
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_atomic_load_set_lhs(%union.gimple_statement_d* %g, %union.tree_node* %lhs) unnamed_addr #0 !dbg !3650 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3652, metadata !DIExpression()), !dbg !3654
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !3653, metadata !DIExpression()), !dbg !3654
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !3655
  store %union.tree_node* %lhs, %union.tree_node** %0, align 8, !dbg !3656
  ret void, !dbg !3657
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_atomic_load_set_rhs(%union.gimple_statement_d* %g, %union.tree_node* %rhs) unnamed_addr #0 !dbg !3658 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3660, metadata !DIExpression()), !dbg !3662
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !3661, metadata !DIExpression()), !dbg !3662
  %rhs1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !3663
  %0 = bitcast i32* %rhs1 to %union.tree_node**, !dbg !3663
  store %union.tree_node* %rhs, %union.tree_node** %0, align 8, !dbg !3664
  ret void, !dbg !3665
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_omp_atomic_store(%union.tree_node* %val) local_unnamed_addr #5 !dbg !3666 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !3668, metadata !DIExpression()), !dbg !3670
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 20, i32 0) #8, !dbg !3671
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3669, metadata !DIExpression()), !dbg !3670
  tail call fastcc void @gimple_omp_atomic_store_set_val(%union.gimple_statement_d* %call, %union.tree_node* %val) #8, !dbg !3672
  ret %union.gimple_statement_d* %call, !dbg !3673
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_atomic_store_set_val(%union.gimple_statement_d* %g, %union.tree_node* %val) unnamed_addr #0 !dbg !3674 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3676, metadata !DIExpression()), !dbg !3678
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !3677, metadata !DIExpression()), !dbg !3678
  %val1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !3679
  %0 = bitcast i32* %val1 to %union.tree_node**, !dbg !3679
  store %union.tree_node* %val, %union.tree_node** %0, align 8, !dbg !3680
  ret void, !dbg !3681
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_build_predict(i32 %predictor, i32 %outcome) local_unnamed_addr #5 !dbg !3682 {
entry:
  call void @llvm.dbg.value(metadata i32 %predictor, metadata !3686, metadata !DIExpression()), !dbg !3689
  call void @llvm.dbg.value(metadata i32 %outcome, metadata !3687, metadata !DIExpression()), !dbg !3689
  %call = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 33, i32 0) #8, !dbg !3690
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !3688, metadata !DIExpression()), !dbg !3689
  tail call fastcc void @gimple_predict_set_predictor(%union.gimple_statement_d* %call, i32 %predictor) #8, !dbg !3691
  tail call fastcc void @gimple_predict_set_outcome(%union.gimple_statement_d* %call, i32 %outcome) #8, !dbg !3692
  ret %union.gimple_statement_d* %call, !dbg !3693
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_predict_set_predictor(%union.gimple_statement_d* %gs, i32 %predictor) unnamed_addr #0 !dbg !3694 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3698, metadata !DIExpression()), !dbg !3700
  call void @llvm.dbg.value(metadata i32 %predictor, metadata !3699, metadata !DIExpression()), !dbg !3700
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !3701
  %bf.load = load i32, i32* %0, align 8, !dbg !3701
  %bf.value1 = shl i32 %predictor, 16, !dbg !3702
  %bf.load.mask = and i32 %bf.load, -2147483648, !dbg !3702
  %bf.shl = or i32 %bf.load.mask, %bf.value1, !dbg !3702
  %bf.clear = and i32 %bf.load, 65535, !dbg !3702
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !3702
  store i32 %bf.set, i32* %0, align 8, !dbg !3702
  ret void, !dbg !3703
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_predict_set_outcome(%union.gimple_statement_d* %gs, i32 %outcome) unnamed_addr #0 !dbg !3704 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3708, metadata !DIExpression()), !dbg !3710
  call void @llvm.dbg.value(metadata i32 %outcome, metadata !3709, metadata !DIExpression()), !dbg !3710
  %cmp = icmp eq i32 %outcome, 1, !dbg !3711
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !3713
  %bf.load = load i32, i32* %0, align 8, !dbg !3713
  br i1 %cmp, label %if.then, label %if.else, !dbg !3714

if.then:                                          ; preds = %entry
  %bf.lshr = and i32 %bf.load, 2147418112, !dbg !3715
  %or = or i32 %bf.lshr, -2147483648, !dbg !3715
  %bf.clear = and i32 %bf.load, 65535, !dbg !3715
  %bf.set = or i32 %bf.clear, %or, !dbg !3715
  br label %if.end, !dbg !3716

if.else:                                          ; preds = %entry
  %bf.set9 = and i32 %bf.load, 2147483647, !dbg !3717
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %storemerge = phi i32 [ %bf.set9, %if.else ], [ %bf.set, %if.then ], !dbg !3713
  store i32 %storemerge, i32* %0, align 8, !dbg !3713
  ret void, !dbg !3718
}

; Function Attrs: nounwind uwtable
define dso_local %struct.gimple_seq_d* @gimple_seq_alloc() local_unnamed_addr #5 !dbg !3719 {
entry:
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !3724
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %0, metadata !3723, metadata !DIExpression()), !dbg !3725
  %tobool = icmp eq %struct.gimple_seq_d* %0, null, !dbg !3726
  br i1 %tobool, label %if.else, label %if.then, !dbg !3728

if.then:                                          ; preds = %entry
  %next_free = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %0, i64 0, i32 2, !dbg !3729
  %1 = bitcast %struct.gimple_seq_d** %next_free to i64*, !dbg !3729
  %2 = load i64, i64* %1, align 8, !dbg !3729
  store i64 %2, i64* bitcast (%struct.gimple_seq_d** @gimple_seq_cache to i64*), align 8, !dbg !3731
  %.cast = inttoptr i64 %2 to %struct.gimple_seq_d*, !dbg !3732
  %cmp = icmp eq %struct.gimple_seq_d* %0, %.cast, !dbg !3732
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !3732

cond.true:                                        ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1055, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3732
  br label %cond.end, !dbg !3732

cond.end:                                         ; preds = %if.then, %cond.true
  %3 = bitcast %struct.gimple_seq_d* %0 to i8*, !dbg !3733
  %call = tail call i8* @memset(i8* nonnull %3, i32 0, i64 24) #7, !dbg !3734
  br label %if.end, !dbg !3735

if.else:                                          ; preds = %entry
  %call1 = tail call i8* @ggc_alloc_cleared_stat(i64 24) #7, !dbg !3736
  %4 = bitcast i8* %call1 to %struct.gimple_seq_d*, !dbg !3738
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %4, metadata !3723, metadata !DIExpression()), !dbg !3725
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %seq.0 = phi %struct.gimple_seq_d* [ %0, %cond.end ], [ %4, %if.else ], !dbg !3725
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq.0, metadata !3723, metadata !DIExpression()), !dbg !3725
  ret %struct.gimple_seq_d* %seq.0, !dbg !3739
}

declare dso_local i8* @memset(i8*, i32, i64) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @gimple_seq_free(%struct.gimple_seq_d* %seq) local_unnamed_addr #5 !dbg !3740 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq, metadata !3744, metadata !DIExpression()), !dbg !3745
  %cmp = icmp eq %struct.gimple_seq_d* %seq, null, !dbg !3746
  br i1 %cmp, label %return, label %if.end, !dbg !3748

if.end:                                           ; preds = %entry
  %call = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* nonnull %seq) #8, !dbg !3749
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %call, null, !dbg !3749
  br i1 %cmp1, label %cond.end, label %cond.true, !dbg !3749

cond.true:                                        ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1078, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3749
  br label %cond.end, !dbg !3749

cond.end:                                         ; preds = %if.end, %cond.true
  %call2 = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* nonnull %seq) #8, !dbg !3750
  %cmp3 = icmp eq %struct.gimple_seq_node_d* %call2, null, !dbg !3750
  br i1 %cmp3, label %cond.end6, label %cond.true4, !dbg !3750

cond.true4:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1079, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3750
  br label %cond.end6, !dbg !3750

cond.end6:                                        ; preds = %cond.end, %cond.true4
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !3751
  %cmp8 = icmp ne %struct.gimple_seq_d* %0, %seq, !dbg !3751
  %cmp9 = icmp eq %struct.gimple_seq_d* %0, null, !dbg !3751
  %or.cond = or i1 %cmp8, %cmp9, !dbg !3751
  %1 = ptrtoint %struct.gimple_seq_d* %0 to i64, !dbg !3751
  br i1 %or.cond, label %cond.end12, label %cond.true10, !dbg !3751

cond.true10:                                      ; preds = %cond.end6
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1083, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !3751
  %.pre = load i64, i64* bitcast (%struct.gimple_seq_d** @gimple_seq_cache to i64*), align 8, !dbg !3752
  br label %cond.end12, !dbg !3751

cond.end12:                                       ; preds = %cond.end6, %cond.true10
  %2 = phi i64 [ %1, %cond.end6 ], [ %.pre, %cond.true10 ], !dbg !3752
  %next_free = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %seq, i64 0, i32 2, !dbg !3753
  %3 = bitcast %struct.gimple_seq_d** %next_free to i64*, !dbg !3754
  store i64 %2, i64* %3, align 8, !dbg !3754
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** @gimple_seq_cache, align 8, !dbg !3755
  br label %return, !dbg !3756

return:                                           ; preds = %entry, %cond.end12
  ret void, !dbg !3756
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !3757 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !3761, metadata !DIExpression()), !dbg !3762
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !3763
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3763

cond.true:                                        ; preds = %entry
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 0, !dbg !3764
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !3764
  br label %cond.end, !dbg !3763

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !3763
  ret %struct.gimple_seq_node_d* %cond, !dbg !3765
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !3766 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !3768, metadata !DIExpression()), !dbg !3769
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !3770
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3770

cond.true:                                        ; preds = %entry
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 1, !dbg !3771
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !3771
  br label %cond.end, !dbg !3770

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !3770
  ret %struct.gimple_seq_node_d* %cond, !dbg !3772
}

; Function Attrs: nounwind uwtable
define dso_local void @gimple_seq_add_stmt(%struct.gimple_seq_d** %seq_p, %union.gimple_statement_d* %gs) local_unnamed_addr #5 !dbg !3773 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d** %seq_p, metadata !3777, metadata !DIExpression()), !dbg !3780
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3778, metadata !DIExpression()), !dbg !3780
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !3781
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3781
  %cmp = icmp eq %union.gimple_statement_d* %gs, null, !dbg !3782
  br i1 %cmp, label %cleanup, label %if.end, !dbg !3784

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq_p, align 8, !dbg !3785
  %cmp1 = icmp eq %struct.gimple_seq_d* %1, null, !dbg !3787
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3788

if.then2:                                         ; preds = %if.end
  %call = tail call %struct.gimple_seq_d* @gimple_seq_alloc() #8, !dbg !3789
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq_p, align 8, !dbg !3790
  br label %if.end3, !dbg !3791

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = phi %struct.gimple_seq_d* [ %call, %if.then2 ], [ %1, %if.end ], !dbg !3792
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3793
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #6, !dbg !3793
  call fastcc void @gsi_last(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.gimple_seq_d* %2) #8, !dbg !3793
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %3, i64 24, i1 false), !dbg !3793
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #6, !dbg !3793
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3779, metadata !DIExpression(DW_OP_deref)), !dbg !3780
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %si, %union.gimple_statement_d* nonnull %gs, i32 0) #7, !dbg !3794
  br label %cleanup, !dbg !3795

cleanup:                                          ; preds = %entry, %if.end3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3795
  ret void, !dbg !3795
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_last(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) unnamed_addr #0 !dbg !3796 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq, metadata !3800, metadata !DIExpression()), !dbg !3802
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3801, metadata !DIExpression()), !dbg !3803
  %call = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %seq) #8, !dbg !3804
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !3805
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3806
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !3807
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq1, align 8, !dbg !3808
  %tobool = icmp eq %struct.gimple_seq_node_d* %call, null, !dbg !3809
  br i1 %tobool, label %cond.end, label %land.lhs.true, !dbg !3810

land.lhs.true:                                    ; preds = %entry
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %call, i64 0, i32 0, !dbg !3811
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3811
  %tobool4 = icmp eq %union.gimple_statement_d* %0, null, !dbg !3812
  br i1 %tobool4, label %cond.end, label %cond.true, !dbg !3813

cond.true:                                        ; preds = %land.lhs.true
  %call7 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* nonnull %0) #8, !dbg !3814
  br label %cond.end, !dbg !3813

cond.end:                                         ; preds = %land.lhs.true, %entry, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %land.lhs.true ], [ null, %entry ], !dbg !3813
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !3815
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !3816
  ret void, !dbg !3817
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @gimple_seq_add_seq(%struct.gimple_seq_d** %dst_p, %struct.gimple_seq_d* %src) local_unnamed_addr #5 !dbg !3818 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d** %dst_p, metadata !3822, metadata !DIExpression()), !dbg !3825
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %src, metadata !3823, metadata !DIExpression()), !dbg !3825
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !3826
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3826
  %cmp = icmp eq %struct.gimple_seq_d* %src, null, !dbg !3827
  br i1 %cmp, label %cleanup, label %if.end, !dbg !3829

if.end:                                           ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %dst_p, align 8, !dbg !3830
  %cmp1 = icmp eq %struct.gimple_seq_d* %1, null, !dbg !3832
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !3833

if.then2:                                         ; preds = %if.end
  %call = tail call %struct.gimple_seq_d* @gimple_seq_alloc() #8, !dbg !3834
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %dst_p, align 8, !dbg !3835
  br label %if.end3, !dbg !3836

if.end3:                                          ; preds = %if.then2, %if.end
  %2 = phi %struct.gimple_seq_d* [ %call, %if.then2 ], [ %1, %if.end ], !dbg !3837
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3838
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #6, !dbg !3838
  call fastcc void @gsi_last(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.gimple_seq_d* %2) #8, !dbg !3838
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %3, i64 24, i1 false), !dbg !3838
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #6, !dbg !3838
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !3824, metadata !DIExpression(DW_OP_deref)), !dbg !3825
  call void @gsi_insert_seq_after(%struct.gimple_stmt_iterator* nonnull %si, %struct.gimple_seq_d* nonnull %src, i32 0) #7, !dbg !3839
  br label %cleanup, !dbg !3840

cleanup:                                          ; preds = %entry, %if.end3
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3840
  ret void, !dbg !3840
}

declare dso_local void @gsi_insert_seq_after(%struct.gimple_stmt_iterator*, %struct.gimple_seq_d*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @empty_body_p(%struct.gimple_seq_d* %body) local_unnamed_addr #5 !dbg !3841 {
entry:
  %i = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %body, metadata !3845, metadata !DIExpression()), !dbg !3847
  %0 = bitcast %struct.gimple_stmt_iterator* %i to i8*, !dbg !3848
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3848
  %call = tail call fastcc zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %body) #8, !dbg !3849
  %tobool = icmp eq i8 %call, 0, !dbg !3849
  br i1 %tobool, label %if.end, label %cleanup, !dbg !3851

if.end:                                           ; preds = %entry
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3852
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #6, !dbg !3852
  call fastcc void @gsi_start(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.gimple_seq_d* %body) #8, !dbg !3852
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !3852
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #6, !dbg !3852
  br label %for.cond, !dbg !3854

for.cond:                                         ; preds = %for.inc, %if.end
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !3846, metadata !DIExpression(DW_OP_deref)), !dbg !3847
  %call1 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %i) #8, !dbg !3855
  %tobool2 = icmp eq i8 %call1, 0, !dbg !3857
  br i1 %tobool2, label %for.body, label %cleanup.loopexit, !dbg !3858

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !3846, metadata !DIExpression(DW_OP_deref)), !dbg !3847
  %call3 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %i) #8, !dbg !3859
  %call4 = call fastcc zeroext i8 @empty_stmt_p(%union.gimple_statement_d* %call3) #8, !dbg !3861
  %tobool5 = icmp eq i8 %call4, 0, !dbg !3861
  br i1 %tobool5, label %land.lhs.true, label %for.inc, !dbg !3862

land.lhs.true:                                    ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !3846, metadata !DIExpression(DW_OP_deref)), !dbg !3847
  %call6 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %i) #8, !dbg !3863
  %call7 = call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call6) #8, !dbg !3864
  %tobool8 = icmp eq i8 %call7, 0, !dbg !3864
  br i1 %tobool8, label %cleanup.loopexit, label %for.inc, !dbg !3865

for.inc:                                          ; preds = %land.lhs.true, %for.body
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !3846, metadata !DIExpression(DW_OP_deref)), !dbg !3847
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %i) #8, !dbg !3866
  br label %for.cond, !dbg !3867, !llvm.loop !3868

cleanup.loopexit:                                 ; preds = %for.cond, %land.lhs.true
  %retval.0.ph = phi i8 [ 1, %for.cond ], [ 0, %land.lhs.true ]
  br label %cleanup, !dbg !3870

cleanup:                                          ; preds = %cleanup.loopexit, %entry
  %retval.0 = phi i8 [ 1, %entry ], [ %retval.0.ph, %cleanup.loopexit ], !dbg !3847
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3870
  ret i8 %retval.0, !dbg !3870
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_seq_empty_p(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !3871 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !3875, metadata !DIExpression()), !dbg !3876
  %cmp = icmp eq %struct.gimple_seq_d* %s, null, !dbg !3877
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !3878

lor.rhs:                                          ; preds = %entry
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 0, !dbg !3879
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !3879
  %cmp1 = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3880
  %phitmp = zext i1 %cmp1 to i8, !dbg !3878
  br label %lor.end, !dbg !3878

lor.end:                                          ; preds = %lor.rhs, %entry
  %1 = phi i8 [ 1, %entry ], [ %phitmp, %lor.rhs ]
  ret i8 %1, !dbg !3881
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_start(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.gimple_seq_d* %seq) unnamed_addr #0 !dbg !3882 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq, metadata !3884, metadata !DIExpression()), !dbg !3886
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3885, metadata !DIExpression()), !dbg !3887
  %call = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %seq) #8, !dbg !3888
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !3889
  store %struct.gimple_seq_node_d* %call, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3890
  %seq1 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !3891
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %seq1, align 8, !dbg !3892
  %tobool = icmp eq %struct.gimple_seq_node_d* %call, null, !dbg !3893
  br i1 %tobool, label %cond.end, label %land.lhs.true, !dbg !3894

land.lhs.true:                                    ; preds = %entry
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %call, i64 0, i32 0, !dbg !3895
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3895
  %tobool4 = icmp eq %union.gimple_statement_d* %0, null, !dbg !3896
  br i1 %tobool4, label %cond.end, label %cond.true, !dbg !3897

cond.true:                                        ; preds = %land.lhs.true
  %call7 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* nonnull %0) #8, !dbg !3898
  br label %cond.end, !dbg !3897

cond.end:                                         ; preds = %land.lhs.true, %entry, %cond.true
  %cond = phi %struct.basic_block_def* [ %call7, %cond.true ], [ null, %land.lhs.true ], [ null, %entry ], !dbg !3897
  %bb = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !3899
  store %struct.basic_block_def* %cond, %struct.basic_block_def** %bb, align 8, !dbg !3900
  ret void, !dbg !3901
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !3902 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3906, metadata !DIExpression()), !dbg !3907
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3908
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3908
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3909
  %conv1 = zext i1 %cmp to i8, !dbg !3910
  ret i8 %conv1, !dbg !3911
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @empty_stmt_p(%union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !3912 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3916, metadata !DIExpression()), !dbg !3917
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !3918
  %cmp = icmp eq i32 %call, 18, !dbg !3920
  br i1 %cmp, label %return, label %if.end, !dbg !3921

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !3922
  %cmp2 = icmp eq i32 %call1, 10, !dbg !3924
  br i1 %cmp2, label %if.then3, label %return, !dbg !3925

if.then3:                                         ; preds = %if.end
  %call4 = tail call fastcc %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %stmt) #8, !dbg !3926
  %call5 = tail call zeroext i8 @empty_body_p(%struct.gimple_seq_d* %call4) #8, !dbg !3927
  br label %return, !dbg !3928

return:                                           ; preds = %if.end, %entry, %if.then3
  %retval.0 = phi i8 [ %call5, %if.then3 ], [ 1, %entry ], [ 0, %if.end ], !dbg !3917
  ret i8 %retval.0, !dbg !3929
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !3930 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3934, metadata !DIExpression()), !dbg !3935
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3936
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3936
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 0, !dbg !3937
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3937
  ret %union.gimple_statement_d* %1, !dbg !3938
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3939 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3943, metadata !DIExpression()), !dbg !3944
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !3945
  %cmp = icmp eq i32 %call, 2, !dbg !3946
  %conv1 = zext i1 %cmp to i8, !dbg !3945
  ret i8 %conv1, !dbg !3947
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_next(%struct.gimple_stmt_iterator* %i) unnamed_addr #0 !dbg !3948 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !3953, metadata !DIExpression()), !dbg !3954
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3955
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3955
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 2, !dbg !3956
  %1 = bitcast %struct.gimple_seq_node_d** %next to i64*, !dbg !3956
  %2 = load i64, i64* %1, align 8, !dbg !3956
  %3 = bitcast %struct.gimple_stmt_iterator* %i to i64*, !dbg !3957
  store i64 %2, i64* %3, align 8, !dbg !3957
  ret void, !dbg !3958
}

; Function Attrs: nounwind uwtable
define dso_local %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %src) local_unnamed_addr #5 !dbg !3959 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %new_seq = alloca %struct.gimple_seq_d*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %src, metadata !3963, metadata !DIExpression()), !dbg !3967
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3968
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3968
  %1 = bitcast %struct.gimple_seq_d** %new_seq to i8*, !dbg !3969
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #6, !dbg !3969
  %call = tail call %struct.gimple_seq_d* @gimple_seq_alloc() #8, !dbg !3970
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !3965, metadata !DIExpression()), !dbg !3967
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %new_seq, align 8, !dbg !3971
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3972
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #6, !dbg !3972
  call fastcc void @gsi_start(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.gimple_seq_d* %src) #8, !dbg !3972
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %2, i64 24, i1 false), !dbg !3972
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #6, !dbg !3972
  br label %for.cond, !dbg !3974

for.cond:                                         ; preds = %for.body, %entry
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3964, metadata !DIExpression(DW_OP_deref)), !dbg !3967
  %call1 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !3975
  %tobool = icmp eq i8 %call1, 0, !dbg !3977
  br i1 %tobool, label %for.body, label %for.end, !dbg !3978

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3964, metadata !DIExpression(DW_OP_deref)), !dbg !3967
  %call2 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !3979
  %call3 = call %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %call2) #8, !dbg !3981
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call3, metadata !3966, metadata !DIExpression()), !dbg !3967
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d** %new_seq, metadata !3965, metadata !DIExpression(DW_OP_deref)), !dbg !3967
  call void @gimple_seq_add_stmt(%struct.gimple_seq_d** nonnull %new_seq, %union.gimple_statement_d* %call3) #8, !dbg !3982
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3964, metadata !DIExpression(DW_OP_deref)), !dbg !3967
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #8, !dbg !3983
  br label %for.cond, !dbg !3984, !llvm.loop !3985

for.end:                                          ; preds = %for.cond
  %3 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %new_seq, align 8, !dbg !3987
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %3, metadata !3965, metadata !DIExpression()), !dbg !3967
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #6, !dbg !3988
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #6, !dbg !3988
  ret %struct.gimple_seq_d* %3, !dbg !3989
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_copy(%union.gimple_statement_d* %stmt) local_unnamed_addr #5 !dbg !3990 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3994, metadata !DIExpression()), !dbg !4005
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !4006
  call void @llvm.dbg.value(metadata i32 %call, metadata !3995, metadata !DIExpression()), !dbg !4005
  %call1 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %stmt) #8, !dbg !4007
  call void @llvm.dbg.value(metadata i32 %call1, metadata !3996, metadata !DIExpression()), !dbg !4005
  %call2 = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 %call, i32 %call1) #8, !dbg !4008
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call2, metadata !3997, metadata !DIExpression()), !dbg !4005
  %0 = bitcast %union.gimple_statement_d* %call2 to i8*, !dbg !4009
  %1 = bitcast %union.gimple_statement_d* %stmt to i8*, !dbg !4010
  %call3 = tail call fastcc i64 @gimple_size(i32 %call) #8, !dbg !4011
  %call4 = tail call i8* @memcpy(i8* %0, i8* %1, i64 %call3) #7, !dbg !4012
  %call5 = tail call fastcc zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %stmt) #8, !dbg !4013
  %tobool = icmp eq i8 %call5, 0, !dbg !4013
  br i1 %tobool, label %if.end, label %if.then, !dbg !4014

if.then:                                          ; preds = %entry
  %call6 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !4015
  switch i32 %call6, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb12
    i32 12, label %sw.bb17
    i32 17, label %sw.bb22
    i32 23, label %sw.bb27
    i32 26, label %sw.bb54
    i32 27, label %sw.bb61
    i32 22, label %sw.bb74
    i32 30, label %sw.bb77
    i32 32, label %copy_omp_body
    i32 29, label %copy_omp_body
    i32 24, label %copy_omp_body
    i32 25, label %copy_omp_body
    i32 34, label %sw.bb85
  ], !dbg !4016

sw.bb:                                            ; preds = %if.then
  %call7 = tail call fastcc %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %stmt) #8, !dbg !4017
  %call8 = tail call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call7) #8, !dbg !4018
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call8, metadata !3999, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_bind_set_body(%union.gimple_statement_d* %call2, %struct.gimple_seq_d* %call8) #8, !dbg !4020
  %call9 = tail call fastcc %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %stmt) #8, !dbg !4021
  %call10 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call9) #7, !dbg !4022
  tail call fastcc void @gimple_bind_set_vars(%union.gimple_statement_d* %call2, %union.tree_node* %call10) #8, !dbg !4023
  %call11 = tail call fastcc %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %stmt) #8, !dbg !4024
  tail call fastcc void @gimple_bind_set_block(%union.gimple_statement_d* %call2, %union.tree_node* %call11) #8, !dbg !4025
  br label %if.end, !dbg !4026

sw.bb12:                                          ; preds = %if.then
  %call13 = tail call fastcc %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %stmt) #8, !dbg !4027
  %call14 = tail call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call13) #8, !dbg !4028
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call14, metadata !3999, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_catch_set_handler(%union.gimple_statement_d* %call2, %struct.gimple_seq_d* %call14) #8, !dbg !4029
  %call15 = tail call fastcc %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %stmt) #8, !dbg !4030
  %call16 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call15) #7, !dbg !4031
  call void @llvm.dbg.value(metadata %union.tree_node* %call16, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_catch_set_types(%union.gimple_statement_d* %call2, %union.tree_node* %call16) #8, !dbg !4032
  br label %if.end, !dbg !4033

sw.bb17:                                          ; preds = %if.then
  %call18 = tail call fastcc %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %stmt) #8, !dbg !4034
  %call19 = tail call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call18) #8, !dbg !4035
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call19, metadata !3999, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_eh_filter_set_failure(%union.gimple_statement_d* %call2, %struct.gimple_seq_d* %call19) #8, !dbg !4036
  %call20 = tail call fastcc %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %stmt) #8, !dbg !4037
  %call21 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call20) #7, !dbg !4038
  call void @llvm.dbg.value(metadata %union.tree_node* %call21, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_eh_filter_set_types(%union.gimple_statement_d* %call2, %union.tree_node* %call21) #8, !dbg !4039
  br label %if.end, !dbg !4040

sw.bb22:                                          ; preds = %if.then
  %call23 = tail call fastcc %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %stmt) #8, !dbg !4041
  %call24 = tail call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call23) #8, !dbg !4042
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call24, metadata !3999, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_try_set_eval(%union.gimple_statement_d* %call2, %struct.gimple_seq_d* %call24) #8, !dbg !4043
  %call25 = tail call fastcc %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %stmt) #8, !dbg !4044
  %call26 = tail call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call25) #8, !dbg !4045
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call26, metadata !3999, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_try_set_cleanup(%union.gimple_statement_d* %call2, %struct.gimple_seq_d* %call26) #8, !dbg !4046
  br label %if.end, !dbg !4047

sw.bb27:                                          ; preds = %if.then
  %call28 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %stmt) #8, !dbg !4048
  %call29 = tail call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call28) #8, !dbg !4049
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call29, metadata !3999, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_for_set_pre_body(%union.gimple_statement_d* %call2, %struct.gimple_seq_d* %call29) #8, !dbg !4050
  %call30 = tail call fastcc %union.tree_node* @gimple_omp_for_clauses(%union.gimple_statement_d* %stmt) #8, !dbg !4051
  %call31 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call30) #7, !dbg !4052
  call void @llvm.dbg.value(metadata %union.tree_node* %call31, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_for_set_clauses(%union.gimple_statement_d* %call2, %union.tree_node* %call31) #8, !dbg !4053
  %call32 = tail call fastcc i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %stmt) #8, !dbg !4054
  %mul = mul i64 %call32, 40, !dbg !4054
  %call33 = tail call i8* @ggc_alloc_stat(i64 %mul) #7, !dbg !4054
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %call2, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !4055
  %2 = bitcast %struct.ssa_use_operand_d** %iter to i8**, !dbg !4056
  store i8* %call33, i8** %2, align 8, !dbg !4056
  call void @llvm.dbg.value(metadata i32 0, metadata !3998, metadata !DIExpression()), !dbg !4005
  br label %for.cond, !dbg !4057

for.cond:                                         ; preds = %for.body, %sw.bb27
  %i.0 = phi i32 [ 0, %sw.bb27 ], [ %inc, %for.body ], !dbg !4059
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3998, metadata !DIExpression()), !dbg !4005
  %conv = zext i32 %i.0 to i64, !dbg !4060
  %call34 = tail call fastcc i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %stmt) #8, !dbg !4062
  %cmp = icmp ugt i64 %call34, %conv, !dbg !4063
  br i1 %cmp, label %for.body, label %copy_omp_body.loopexit, !dbg !4064

for.body:                                         ; preds = %for.cond
  %call38 = tail call fastcc i32 @gimple_omp_for_cond(%union.gimple_statement_d* %stmt, i64 %conv) #8, !dbg !4065
  tail call fastcc void @gimple_omp_for_set_cond(%union.gimple_statement_d* %call2, i64 %conv, i32 %call38) #8, !dbg !4067
  %call41 = tail call fastcc %union.tree_node* @gimple_omp_for_index(%union.gimple_statement_d* %stmt, i64 %conv) #8, !dbg !4068
  tail call fastcc void @gimple_omp_for_set_index(%union.gimple_statement_d* %call2, i64 %conv, %union.tree_node* %call41) #8, !dbg !4069
  %call43 = tail call fastcc %union.tree_node* @gimple_omp_for_initial(%union.gimple_statement_d* %stmt, i64 %conv) #8, !dbg !4070
  %call44 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call43) #7, !dbg !4071
  call void @llvm.dbg.value(metadata %union.tree_node* %call44, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_for_set_initial(%union.gimple_statement_d* %call2, i64 %conv, %union.tree_node* %call44) #8, !dbg !4072
  %call47 = tail call fastcc %union.tree_node* @gimple_omp_for_final(%union.gimple_statement_d* %stmt, i64 %conv) #8, !dbg !4073
  %call48 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call47) #7, !dbg !4074
  call void @llvm.dbg.value(metadata %union.tree_node* %call48, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_for_set_final(%union.gimple_statement_d* %call2, i64 %conv, %union.tree_node* %call48) #8, !dbg !4075
  %call51 = tail call fastcc %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %stmt, i64 %conv) #8, !dbg !4076
  %call52 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call51) #7, !dbg !4077
  call void @llvm.dbg.value(metadata %union.tree_node* %call52, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_for_set_incr(%union.gimple_statement_d* %call2, i64 %conv, %union.tree_node* %call52) #8, !dbg !4078
  %inc = add i32 %i.0, 1, !dbg !4079
  call void @llvm.dbg.value(metadata i32 %inc, metadata !3998, metadata !DIExpression()), !dbg !4005
  br label %for.cond, !dbg !4080, !llvm.loop !4081

sw.bb54:                                          ; preds = %if.then
  %call55 = tail call fastcc %union.tree_node* @gimple_omp_parallel_clauses(%union.gimple_statement_d* %stmt) #8, !dbg !4083
  %call56 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call55) #7, !dbg !4084
  call void @llvm.dbg.value(metadata %union.tree_node* %call56, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_parallel_set_clauses(%union.gimple_statement_d* %call2, %union.tree_node* %call56) #8, !dbg !4085
  %call57 = tail call fastcc %union.tree_node* @gimple_omp_parallel_child_fn(%union.gimple_statement_d* %stmt) #8, !dbg !4086
  %call58 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call57) #7, !dbg !4087
  call void @llvm.dbg.value(metadata %union.tree_node* %call58, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_parallel_set_child_fn(%union.gimple_statement_d* %call2, %union.tree_node* %call58) #8, !dbg !4088
  %call59 = tail call fastcc %union.tree_node* @gimple_omp_parallel_data_arg(%union.gimple_statement_d* %stmt) #8, !dbg !4089
  %call60 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call59) #7, !dbg !4090
  call void @llvm.dbg.value(metadata %union.tree_node* %call60, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_parallel_set_data_arg(%union.gimple_statement_d* %call2, %union.tree_node* %call60) #8, !dbg !4091
  br label %copy_omp_body, !dbg !4092

sw.bb61:                                          ; preds = %if.then
  %call62 = tail call fastcc %union.tree_node* @gimple_omp_task_clauses(%union.gimple_statement_d* %stmt) #8, !dbg !4093
  %call63 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call62) #7, !dbg !4094
  call void @llvm.dbg.value(metadata %union.tree_node* %call63, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_task_set_clauses(%union.gimple_statement_d* %call2, %union.tree_node* %call63) #8, !dbg !4095
  %call64 = tail call fastcc %union.tree_node* @gimple_omp_task_child_fn(%union.gimple_statement_d* %stmt) #8, !dbg !4096
  %call65 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call64) #7, !dbg !4097
  call void @llvm.dbg.value(metadata %union.tree_node* %call65, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_task_set_child_fn(%union.gimple_statement_d* %call2, %union.tree_node* %call65) #8, !dbg !4098
  %call66 = tail call fastcc %union.tree_node* @gimple_omp_task_data_arg(%union.gimple_statement_d* %stmt) #8, !dbg !4099
  %call67 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call66) #7, !dbg !4100
  call void @llvm.dbg.value(metadata %union.tree_node* %call67, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_task_set_data_arg(%union.gimple_statement_d* %call2, %union.tree_node* %call67) #8, !dbg !4101
  %call68 = tail call fastcc %union.tree_node* @gimple_omp_task_copy_fn(%union.gimple_statement_d* %stmt) #8, !dbg !4102
  %call69 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call68) #7, !dbg !4103
  call void @llvm.dbg.value(metadata %union.tree_node* %call69, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_task_set_copy_fn(%union.gimple_statement_d* %call2, %union.tree_node* %call69) #8, !dbg !4104
  %call70 = tail call fastcc %union.tree_node* @gimple_omp_task_arg_size(%union.gimple_statement_d* %stmt) #8, !dbg !4105
  %call71 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call70) #7, !dbg !4106
  call void @llvm.dbg.value(metadata %union.tree_node* %call71, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_task_set_arg_size(%union.gimple_statement_d* %call2, %union.tree_node* %call71) #8, !dbg !4107
  %call72 = tail call fastcc %union.tree_node* @gimple_omp_task_arg_align(%union.gimple_statement_d* %stmt) #8, !dbg !4108
  %call73 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call72) #7, !dbg !4109
  call void @llvm.dbg.value(metadata %union.tree_node* %call73, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_task_set_arg_align(%union.gimple_statement_d* %call2, %union.tree_node* %call73) #8, !dbg !4110
  br label %copy_omp_body, !dbg !4111

sw.bb74:                                          ; preds = %if.then
  %call75 = tail call fastcc %union.tree_node* @gimple_omp_critical_name(%union.gimple_statement_d* %stmt) #8, !dbg !4112
  %call76 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call75) #7, !dbg !4113
  call void @llvm.dbg.value(metadata %union.tree_node* %call76, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_critical_set_name(%union.gimple_statement_d* %call2, %union.tree_node* %call76) #8, !dbg !4114
  br label %copy_omp_body, !dbg !4115

sw.bb77:                                          ; preds = %if.then
  %call78 = tail call fastcc %union.tree_node* @gimple_omp_sections_clauses(%union.gimple_statement_d* %stmt) #8, !dbg !4116
  %call79 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call78) #7, !dbg !4117
  call void @llvm.dbg.value(metadata %union.tree_node* %call79, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_sections_set_clauses(%union.gimple_statement_d* %call2, %union.tree_node* %call79) #8, !dbg !4118
  %call80 = tail call fastcc %union.tree_node* @gimple_omp_sections_control(%union.gimple_statement_d* %stmt) #8, !dbg !4119
  %call81 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call80) #7, !dbg !4120
  call void @llvm.dbg.value(metadata %union.tree_node* %call81, metadata !4002, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_sections_set_control(%union.gimple_statement_d* %call2, %union.tree_node* %call81) #8, !dbg !4121
  br label %copy_omp_body, !dbg !4121

copy_omp_body.loopexit:                           ; preds = %for.cond
  br label %copy_omp_body, !dbg !4122

copy_omp_body:                                    ; preds = %copy_omp_body.loopexit, %sw.bb77, %if.then, %if.then, %if.then, %if.then, %sw.bb74, %sw.bb61, %sw.bb54
  call void @llvm.dbg.label(metadata !4003), !dbg !4123
  %call83 = tail call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt) #8, !dbg !4122
  %call84 = tail call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call83) #8, !dbg !4124
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call84, metadata !3999, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_omp_set_body(%union.gimple_statement_d* %call2, %struct.gimple_seq_d* %call84) #8, !dbg !4125
  br label %if.end, !dbg !4126

sw.bb85:                                          ; preds = %if.then
  %call86 = tail call fastcc %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %stmt) #8, !dbg !4127
  %call87 = tail call %struct.gimple_seq_d* @gimple_seq_copy(%struct.gimple_seq_d* %call86) #8, !dbg !4128
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call87, metadata !3999, metadata !DIExpression()), !dbg !4019
  tail call fastcc void @gimple_wce_set_cleanup(%union.gimple_statement_d* %call2, %struct.gimple_seq_d* %call87) #8, !dbg !4129
  br label %if.end, !dbg !4130

sw.default:                                       ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2095, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !4131
  br label %if.end, !dbg !4132

if.end:                                           ; preds = %entry, %sw.bb, %sw.bb12, %sw.bb17, %sw.bb22, %copy_omp_body, %sw.bb85, %sw.default
  %cmp88 = icmp eq i32 %call1, 0, !dbg !4133
  br i1 %cmp88, label %if.end110, label %for.cond91.preheader, !dbg !4135

for.cond91.preheader:                             ; preds = %if.end
  br label %for.cond91, !dbg !4136

for.cond91:                                       ; preds = %for.cond91.preheader, %for.body94
  %i.1 = phi i32 [ %inc98, %for.body94 ], [ 0, %for.cond91.preheader ], !dbg !4139
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !3998, metadata !DIExpression()), !dbg !4005
  %exitcond = icmp eq i32 %i.1, %call1, !dbg !4140
  br i1 %exitcond, label %for.end99, label %for.body94, !dbg !4136

for.body94:                                       ; preds = %for.cond91
  %call95 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %stmt, i32 %i.1) #8, !dbg !4142
  %call96 = tail call %union.tree_node* @unshare_expr(%union.tree_node* %call95) #7, !dbg !4143
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %call2, i32 %i.1, %union.tree_node* %call96) #8, !dbg !4144
  %inc98 = add i32 %i.1, 1, !dbg !4145
  call void @llvm.dbg.value(metadata i32 %inc98, metadata !3998, metadata !DIExpression()), !dbg !4005
  br label %for.cond91, !dbg !4146, !llvm.loop !4147

for.end99:                                        ; preds = %for.cond91
  %call100 = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %stmt) #8, !dbg !4149
  %tobool101 = icmp eq i8 %call100, 0, !dbg !4149
  br i1 %tobool101, label %if.end103, label %if.then102, !dbg !4151

if.then102:                                       ; preds = %for.end99
  tail call fastcc void @gimple_set_def_ops(%union.gimple_statement_d* %call2, %struct.def_optype_d* null) #8, !dbg !4152
  tail call fastcc void @gimple_set_use_ops(%union.gimple_statement_d* %call2, %struct.use_optype_d* null) #8, !dbg !4154
  br label %if.end103, !dbg !4155

if.end103:                                        ; preds = %for.end99, %if.then102
  %call104 = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %stmt) #8, !dbg !4156
  %tobool105 = icmp eq i8 %call104, 0, !dbg !4156
  br i1 %tobool105, label %if.end109, label %if.then106, !dbg !4158

if.then106:                                       ; preds = %if.end103
  %call107 = tail call fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %stmt) #8, !dbg !4159
  tail call fastcc void @gimple_set_vdef(%union.gimple_statement_d* %call2, %union.tree_node* %call107) #8, !dbg !4161
  %call108 = tail call fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %stmt) #8, !dbg !4162
  tail call fastcc void @gimple_set_vuse(%union.gimple_statement_d* %call2, %union.tree_node* %call108) #8, !dbg !4163
  br label %if.end109, !dbg !4164

if.end109:                                        ; preds = %if.end103, %if.then106
  tail call void @gimple_set_modified(%union.gimple_statement_d* %call2, i8 zeroext 1) #8, !dbg !4165
  br label %if.end110, !dbg !4166

if.end110:                                        ; preds = %if.end, %if.end109
  ret %union.gimple_statement_d* %call2, !dbg !4167
}

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %seq, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) local_unnamed_addr #5 !dbg !4168 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq, metadata !4181, metadata !DIExpression()), !dbg !4190
  call void @llvm.dbg.value(metadata %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, metadata !4182, metadata !DIExpression()), !dbg !4190
  call void @llvm.dbg.value(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, metadata !4183, metadata !DIExpression()), !dbg !4190
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !4184, metadata !DIExpression()), !dbg !4190
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4191
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #6, !dbg !4191
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4192
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #6, !dbg !4192
  call fastcc void @gsi_start(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.gimple_seq_d* %seq) #8, !dbg !4192
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4192
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #6, !dbg !4192
  %tobool3 = icmp eq %struct.walk_stmt_info* %wi, null, !dbg !4193
  %callback_result = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 7, !dbg !4193
  br i1 %tobool3, label %entry.split.us, label %entry.entry.split_crit_edge, !dbg !4196

entry.entry.split_crit_edge:                      ; preds = %entry
  br label %for.cond, !dbg !4196

entry.split.us:                                   ; preds = %entry
  br label %for.cond.us, !dbg !4196

for.cond.us:                                      ; preds = %for.inc.us, %entry.split.us
  %retval.0.us = phi %union.gimple_statement_d* [ undef, %entry.split.us ], [ %retval.1.us, %for.inc.us ]
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4185, metadata !DIExpression(DW_OP_deref)), !dbg !4190
  %call.us = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !4197
  %tobool.us = icmp eq i8 %call.us, 0, !dbg !4198
  br i1 %tobool.us, label %for.body.us, label %for.end.us-lcssa.us, !dbg !4199

for.body.us:                                      ; preds = %for.cond.us
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4185, metadata !DIExpression(DW_OP_deref)), !dbg !4190
  %call1.us = call %union.tree_node* @walk_gimple_stmt(%struct.gimple_stmt_iterator* nonnull %gsi, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* null) #8, !dbg !4200
  call void @llvm.dbg.value(metadata %union.tree_node* %call1.us, metadata !4186, metadata !DIExpression()), !dbg !4201
  %tobool2.us = icmp eq %union.tree_node* %call1.us, null, !dbg !4202
  br i1 %tobool2.us, label %cleanup.us, label %if.then.us, !dbg !4203

if.then.us:                                       ; preds = %for.body.us
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1202, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !4204
  store %union.tree_node* %call1.us, %union.tree_node** %callback_result, align 8, !dbg !4205
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4185, metadata !DIExpression(DW_OP_deref)), !dbg !4190
  %call4.us = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !4206
  br label %cleanup.us, !dbg !4207

cleanup.us:                                       ; preds = %if.then.us, %for.body.us
  %cleanup.dest.slot.0.us = phi i1 [ false, %if.then.us ], [ true, %for.body.us ]
  %retval.1.us = phi %union.gimple_statement_d* [ %call4.us, %if.then.us ], [ %retval.0.us, %for.body.us ]
  br i1 %cleanup.dest.slot.0.us, label %for.inc.us, label %cleanup9.loopexit.us-lcssa.us

for.inc.us:                                       ; preds = %cleanup.us
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4185, metadata !DIExpression(DW_OP_deref)), !dbg !4190
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #8, !dbg !4208
  br label %for.cond.us, !dbg !4209, !llvm.loop !4210

for.end.us-lcssa.us:                              ; preds = %for.cond.us
  br label %for.end, !dbg !4212

cleanup9.loopexit.us-lcssa.us:                    ; preds = %cleanup.us
  %retval.1.us.lcssa = phi %union.gimple_statement_d* [ %retval.1.us, %cleanup.us ]
  br label %cleanup9.loopexit, !dbg !4214

for.cond:                                         ; preds = %for.inc, %entry.entry.split_crit_edge
  %retval.0 = phi %union.gimple_statement_d* [ undef, %entry.entry.split_crit_edge ], [ %retval.1, %for.inc ]
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4185, metadata !DIExpression(DW_OP_deref)), !dbg !4190
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !4197
  %tobool = icmp eq i8 %call, 0, !dbg !4198
  br i1 %tobool, label %for.body, label %for.end.us-lcssa, !dbg !4199

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4185, metadata !DIExpression(DW_OP_deref)), !dbg !4190
  %call1 = call %union.tree_node* @walk_gimple_stmt(%struct.gimple_stmt_iterator* nonnull %gsi, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* nonnull %wi) #8, !dbg !4200
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !4186, metadata !DIExpression()), !dbg !4201
  %tobool2 = icmp eq %union.tree_node* %call1, null, !dbg !4202
  br i1 %tobool2, label %cleanup, label %if.then, !dbg !4203

if.then:                                          ; preds = %for.body
  store %union.tree_node* %call1, %union.tree_node** %callback_result, align 8, !dbg !4205
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4185, metadata !DIExpression(DW_OP_deref)), !dbg !4190
  %call4 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !4206
  br label %cleanup, !dbg !4207

cleanup:                                          ; preds = %for.body, %if.then
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then ], [ true, %for.body ]
  %retval.1 = phi %union.gimple_statement_d* [ %call4, %if.then ], [ %retval.0, %for.body ]
  br i1 %cleanup.dest.slot.0, label %for.inc, label %cleanup9.loopexit.us-lcssa

for.inc:                                          ; preds = %cleanup
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4185, metadata !DIExpression(DW_OP_deref)), !dbg !4190
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #8, !dbg !4208
  br label %for.cond, !dbg !4209, !llvm.loop !4210

for.end.us-lcssa:                                 ; preds = %for.cond
  br label %for.end, !dbg !4212

for.end:                                          ; preds = %for.end.us-lcssa.us, %for.end.us-lcssa
  br i1 %tobool3, label %cleanup9, label %if.then6, !dbg !4215

if.then6:                                         ; preds = %for.end
  store %union.tree_node* null, %union.tree_node** %callback_result, align 8, !dbg !4216
  br label %cleanup9, !dbg !4217

cleanup9.loopexit.us-lcssa:                       ; preds = %cleanup
  %retval.1.lcssa3 = phi %union.gimple_statement_d* [ %retval.1, %cleanup ]
  br label %cleanup9.loopexit, !dbg !4214

cleanup9.loopexit:                                ; preds = %cleanup9.loopexit.us-lcssa.us, %cleanup9.loopexit.us-lcssa
  %retval.1.lcssa = phi %union.gimple_statement_d* [ %retval.1.lcssa3, %cleanup9.loopexit.us-lcssa ], [ %retval.1.us.lcssa, %cleanup9.loopexit.us-lcssa.us ]
  br label %cleanup9, !dbg !4214

cleanup9:                                         ; preds = %cleanup9.loopexit, %for.end, %if.then6
  %retval.2 = phi %union.gimple_statement_d* [ null, %if.then6 ], [ null, %for.end ], [ %retval.1.lcssa, %cleanup9.loopexit ], !dbg !4190
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #6, !dbg !4214
  ret %union.gimple_statement_d* %retval.2, !dbg !4214
}

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @walk_gimple_stmt(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) local_unnamed_addr #5 !dbg !4218 {
entry:
  %handled_ops = alloca i8, align 1
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4222, metadata !DIExpression()), !dbg !4232
  call void @llvm.dbg.value(metadata %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, metadata !4223, metadata !DIExpression()), !dbg !4232
  call void @llvm.dbg.value(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, metadata !4224, metadata !DIExpression()), !dbg !4232
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !4225, metadata !DIExpression()), !dbg !4232
  %call = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !4233
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !4228, metadata !DIExpression()), !dbg !4232
  %cond = icmp eq %struct.walk_stmt_info* %wi, null, !dbg !4234
  br i1 %cond, label %if.end10, label %if.then, !dbg !4234

if.then:                                          ; preds = %entry
  %0 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4235
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4235
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* align 8 %1, i64 24, i1 false), !dbg !4235
  %want_locations = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 6, !dbg !4237
  %2 = load i8, i8* %want_locations, align 1, !dbg !4237
  %tobool3 = icmp eq i8 %2, 0, !dbg !4239
  br i1 %tobool3, label %if.end10, label %land.lhs.true4, !dbg !4240

land.lhs.true4:                                   ; preds = %if.then
  %call5 = tail call fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %call) #8, !dbg !4241
  %tobool7 = icmp eq i8 %call5, 0, !dbg !4241
  br i1 %tobool7, label %if.end10, label %if.then8, !dbg !4242

if.then8:                                         ; preds = %land.lhs.true4
  %call9 = tail call fastcc i32 @gimple_location(%union.gimple_statement_d* %call) #8, !dbg !4243
  store i32 %call9, i32* @input_location, align 4, !dbg !4244
  br label %if.end10, !dbg !4245

if.end10:                                         ; preds = %land.lhs.true4, %if.then, %entry, %if.then8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !4226, metadata !DIExpression()), !dbg !4232
  %tobool11 = icmp eq %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, null, !dbg !4246
  br i1 %tobool11, label %if.end19, label %if.then12, !dbg !4247

if.then12:                                        ; preds = %if.end10
  call void @llvm.dbg.value(metadata i8* %handled_ops, metadata !4229, metadata !DIExpression(DW_OP_deref)), !dbg !4248
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %handled_ops) #6, !dbg !4249
  call void @llvm.dbg.value(metadata i8 0, metadata !4229, metadata !DIExpression()), !dbg !4248
  store i8 0, i8* %handled_ops, align 1, !dbg !4250
  call void @llvm.dbg.value(metadata i8* %handled_ops, metadata !4229, metadata !DIExpression(DW_OP_deref)), !dbg !4248
  %call13 = call %union.tree_node* %callback_stmt(%struct.gimple_stmt_iterator* %gsi, i8* nonnull %handled_ops, %struct.walk_stmt_info* %wi) #7, !dbg !4251
  call void @llvm.dbg.value(metadata %union.tree_node* %call13, metadata !4227, metadata !DIExpression()), !dbg !4232
  %3 = load i8, i8* %handled_ops, align 1, !dbg !4252
  call void @llvm.dbg.value(metadata i8 %3, metadata !4229, metadata !DIExpression()), !dbg !4248
  %tobool14 = icmp eq i8 %3, 0, !dbg !4252
  br i1 %tobool14, label %if.end16, label %cleanup, !dbg !4254

if.end16:                                         ; preds = %if.then12
  %cmp = icmp eq %union.tree_node* %call13, null, !dbg !4255
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !4255

cond.true:                                        ; preds = %if.end16
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1592, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !4255
  br label %cond.end, !dbg !4255

cond.end:                                         ; preds = %if.end16, %cond.true
  %call18 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !4256
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call18, metadata !4228, metadata !DIExpression()), !dbg !4232
  br label %cleanup, !dbg !4257

cleanup:                                          ; preds = %if.then12, %cond.end
  %stmt.0 = phi %union.gimple_statement_d* [ %call18, %cond.end ], [ %call, %if.then12 ], !dbg !4232
  %cleanup.dest.slot.0 = phi i1 [ true, %cond.end ], [ false, %if.then12 ]
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt.0, metadata !4228, metadata !DIExpression()), !dbg !4232
  call void @llvm.dbg.value(metadata i8* %handled_ops, metadata !4229, metadata !DIExpression(DW_OP_deref)), !dbg !4248
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %handled_ops) #6, !dbg !4257
  br i1 %cleanup.dest.slot.0, label %if.end19, label %cleanup87

if.end19:                                         ; preds = %if.end10, %cleanup
  %stmt.1 = phi %union.gimple_statement_d* [ %call, %if.end10 ], [ %stmt.0, %cleanup ], !dbg !4258
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt.1, metadata !4228, metadata !DIExpression()), !dbg !4232
  %tobool20 = icmp eq %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, null, !dbg !4259
  br i1 %tobool20, label %if.end26, label %if.then21, !dbg !4261

if.then21:                                        ; preds = %if.end19
  %call22 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %stmt.1, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4262
  call void @llvm.dbg.value(metadata %union.tree_node* %call22, metadata !4227, metadata !DIExpression()), !dbg !4232
  %tobool23 = icmp eq %union.tree_node* %call22, null, !dbg !4264
  br i1 %tobool23, label %if.end26, label %cleanup87, !dbg !4266

if.end26:                                         ; preds = %if.then21, %if.end19
  %call27 = call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt.1) #8, !dbg !4267
  switch i32 %call27, label %sw.default [
    i32 10, label %sw.bb
    i32 11, label %sw.bb33
    i32 12, label %sw.bb40
    i32 17, label %sw.bb47
    i32 23, label %sw.bb60
    i32 22, label %sw.bb67
    i32 24, label %sw.bb67
    i32 25, label %sw.bb67
    i32 29, label %sw.bb67
    i32 26, label %sw.bb67
    i32 27, label %sw.bb67
    i32 30, label %sw.bb67
    i32 32, label %sw.bb67
    i32 34, label %sw.bb74
  ], !dbg !4268

sw.bb:                                            ; preds = %if.end26
  %call28 = call fastcc %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %stmt.1) #8, !dbg !4269
  %call29 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call28, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4271
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call29, metadata !4226, metadata !DIExpression()), !dbg !4232
  %tobool30 = icmp eq %union.gimple_statement_d* %call29, null, !dbg !4272
  br i1 %tobool30, label %cleanup87, label %if.then31, !dbg !4274

if.then31:                                        ; preds = %sw.bb
  %callback_result = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 7, !dbg !4275
  %4 = load %union.tree_node*, %union.tree_node** %callback_result, align 8, !dbg !4275
  br label %cleanup87, !dbg !4276

sw.bb33:                                          ; preds = %if.end26
  %call34 = call fastcc %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %stmt.1) #8, !dbg !4277
  %call35 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call34, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4278
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call35, metadata !4226, metadata !DIExpression()), !dbg !4232
  %tobool36 = icmp eq %union.gimple_statement_d* %call35, null, !dbg !4279
  br i1 %tobool36, label %cleanup87, label %if.then37, !dbg !4281

if.then37:                                        ; preds = %sw.bb33
  %callback_result38 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 7, !dbg !4282
  %5 = load %union.tree_node*, %union.tree_node** %callback_result38, align 8, !dbg !4282
  br label %cleanup87, !dbg !4283

sw.bb40:                                          ; preds = %if.end26
  %call41 = call fastcc %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %stmt.1) #8, !dbg !4284
  %call42 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call41, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4285
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call42, metadata !4226, metadata !DIExpression()), !dbg !4232
  %tobool43 = icmp eq %union.gimple_statement_d* %call42, null, !dbg !4286
  br i1 %tobool43, label %cleanup87, label %if.then44, !dbg !4288

if.then44:                                        ; preds = %sw.bb40
  %callback_result45 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 7, !dbg !4289
  %6 = load %union.tree_node*, %union.tree_node** %callback_result45, align 8, !dbg !4289
  br label %cleanup87, !dbg !4290

sw.bb47:                                          ; preds = %if.end26
  %call48 = call fastcc %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %stmt.1) #8, !dbg !4291
  %call49 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call48, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4292
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call49, metadata !4226, metadata !DIExpression()), !dbg !4232
  %tobool50 = icmp eq %union.gimple_statement_d* %call49, null, !dbg !4293
  br i1 %tobool50, label %if.end53, label %if.then51, !dbg !4295

if.then51:                                        ; preds = %sw.bb47
  %callback_result52 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 7, !dbg !4296
  %7 = load %union.tree_node*, %union.tree_node** %callback_result52, align 8, !dbg !4296
  br label %cleanup87, !dbg !4297

if.end53:                                         ; preds = %sw.bb47
  %call54 = call fastcc %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %stmt.1) #8, !dbg !4298
  %call55 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call54, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4299
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call55, metadata !4226, metadata !DIExpression()), !dbg !4232
  %tobool56 = icmp eq %union.gimple_statement_d* %call55, null, !dbg !4300
  br i1 %tobool56, label %cleanup87, label %if.then57, !dbg !4302

if.then57:                                        ; preds = %if.end53
  %callback_result58 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 7, !dbg !4303
  %8 = load %union.tree_node*, %union.tree_node** %callback_result58, align 8, !dbg !4303
  br label %cleanup87, !dbg !4304

sw.bb60:                                          ; preds = %if.end26
  %call61 = call fastcc %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %stmt.1) #8, !dbg !4305
  %call62 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call61, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4306
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call62, metadata !4226, metadata !DIExpression()), !dbg !4232
  %tobool63 = icmp eq %union.gimple_statement_d* %call62, null, !dbg !4307
  br i1 %tobool63, label %sw.bb67, label %if.then64, !dbg !4309

if.then64:                                        ; preds = %sw.bb60
  %callback_result65 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 7, !dbg !4310
  %9 = load %union.tree_node*, %union.tree_node** %callback_result65, align 8, !dbg !4310
  br label %cleanup87, !dbg !4311

sw.bb67:                                          ; preds = %sw.bb60, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26, %if.end26
  %call68 = call fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %stmt.1) #8, !dbg !4312
  %call69 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call68, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4313
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call69, metadata !4226, metadata !DIExpression()), !dbg !4232
  %tobool70 = icmp eq %union.gimple_statement_d* %call69, null, !dbg !4314
  br i1 %tobool70, label %cleanup87, label %if.then71, !dbg !4316

if.then71:                                        ; preds = %sw.bb67
  %callback_result72 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 7, !dbg !4317
  %10 = load %union.tree_node*, %union.tree_node** %callback_result72, align 8, !dbg !4317
  br label %cleanup87, !dbg !4318

sw.bb74:                                          ; preds = %if.end26
  %call75 = call fastcc %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %stmt.1) #8, !dbg !4319
  %call76 = call %union.gimple_statement_d* @walk_gimple_seq(%struct.gimple_seq_d* %call75, %union.tree_node* (%struct.gimple_stmt_iterator*, i8*, %struct.walk_stmt_info*)* %callback_stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4320
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call76, metadata !4226, metadata !DIExpression()), !dbg !4232
  %tobool77 = icmp eq %union.gimple_statement_d* %call76, null, !dbg !4321
  br i1 %tobool77, label %cleanup87, label %if.then78, !dbg !4323

if.then78:                                        ; preds = %sw.bb74
  %callback_result79 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 7, !dbg !4324
  %11 = load %union.tree_node*, %union.tree_node** %callback_result79, align 8, !dbg !4324
  br label %cleanup87, !dbg !4325

sw.default:                                       ; preds = %if.end26
  %call81 = call fastcc zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %stmt.1) #8, !dbg !4326
  %tobool82 = icmp eq i8 %call81, 0, !dbg !4326
  br i1 %tobool82, label %cleanup87, label %cond.true83, !dbg !4326

cond.true83:                                      ; preds = %sw.default
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1671, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !4326
  br label %cleanup87, !dbg !4326

cleanup87:                                        ; preds = %if.then21, %sw.default, %sw.bb, %sw.bb33, %sw.bb40, %if.end53, %sw.bb67, %sw.bb74, %cond.true83, %cleanup, %if.then78, %if.then71, %if.then64, %if.then57, %if.then51, %if.then44, %if.then37, %if.then31
  %retval.1 = phi %union.tree_node* [ %call13, %cleanup ], [ %11, %if.then78 ], [ %10, %if.then71 ], [ %9, %if.then64 ], [ %7, %if.then51 ], [ %8, %if.then57 ], [ %6, %if.then44 ], [ %5, %if.then37 ], [ %4, %if.then31 ], [ %call22, %if.then21 ], [ null, %cond.true83 ], [ null, %sw.default ], [ null, %sw.bb74 ], [ null, %sw.bb67 ], [ null, %if.end53 ], [ null, %sw.bb40 ], [ null, %sw.bb33 ], [ null, %sw.bb ], !dbg !4232
  ret %union.tree_node* %retval.1, !dbg !4327
}

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) local_unnamed_addr #5 !dbg !4328 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4332, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.value(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, metadata !4333, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !4334, metadata !DIExpression()), !dbg !4341
  %tobool = icmp eq %struct.walk_stmt_info* %wi, null, !dbg !4342
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4342

cond.true:                                        ; preds = %entry
  %pset1 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 2, !dbg !4343
  %0 = load %struct.pointer_set_t*, %struct.pointer_set_t** %pset1, align 8, !dbg !4343
  br label %cond.end, !dbg !4342

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.pointer_set_t* [ %0, %cond.true ], [ null, %entry ], !dbg !4342
  call void @llvm.dbg.value(metadata %struct.pointer_set_t* %cond, metadata !4335, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !4337, metadata !DIExpression()), !dbg !4341
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !4344
  switch i32 %call, label %sw.default [
    i32 6, label %sw.bb
    i32 8, label %sw.bb39
    i32 11, label %sw.bb80
    i32 12, label %sw.bb86
    i32 7, label %sw.bb92
    i32 21, label %sw.bb97
    i32 22, label %sw.bb108
    i32 23, label %sw.bb114
    i32 26, label %sw.bb153
    i32 27, label %sw.bb169
    i32 30, label %sw.bb200
    i32 32, label %sw.bb211
    i32 19, label %sw.bb217
    i32 20, label %sw.bb228
    i32 18, label %sw.epilog
    i32 14, label %sw.epilog
    i32 28, label %sw.epilog
    i32 33, label %sw.epilog
  ], !dbg !4345

sw.bb:                                            ; preds = %cond.end
  br i1 %tobool, label %if.end, label %if.then, !dbg !4346

if.then:                                          ; preds = %sw.bb
  %call3 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !4347
  %call4 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %call3) #8, !dbg !4349
  %tobool5 = icmp eq i8 %call4, 0, !dbg !4349
  br i1 %tobool5, label %lor.end, label %lor.rhs, !dbg !4350

lor.rhs:                                          ; preds = %if.then
  %call6 = tail call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %stmt) #8, !dbg !4351
  %tobool7 = icmp eq i8 %call6, 0, !dbg !4352
  %phitmp2 = zext i1 %tobool7 to i8, !dbg !4350
  br label %lor.end, !dbg !4350

lor.end:                                          ; preds = %if.then, %lor.rhs
  %1 = phi i8 [ 1, %if.then ], [ %phitmp2, %lor.rhs ]
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 3, !dbg !4353
  store i8 %1, i8* %val_only, align 8, !dbg !4354
  br label %if.end, !dbg !4355

if.end:                                           ; preds = %sw.bb, %lor.end
  call void @llvm.dbg.value(metadata i32 1, metadata !4336, metadata !DIExpression()), !dbg !4341
  %2 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4356
  br label %for.cond, !dbg !4360

for.cond:                                         ; preds = %for.inc, %if.end
  %i.0 = phi i32 [ 1, %if.end ], [ %inc, %for.inc ], !dbg !4361
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !4336, metadata !DIExpression()), !dbg !4341
  %call8 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %stmt) #8, !dbg !4362
  %cmp = icmp ult i32 %i.0, %call8, !dbg !4363
  br i1 %cmp, label %for.body, label %for.end, !dbg !4364

for.body:                                         ; preds = %for.cond
  %call10 = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %stmt, i32 %i.0) #8, !dbg !4365
  %call11 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call10, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %2, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4365
  call void @llvm.dbg.value(metadata %union.tree_node* %call11, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool12 = icmp eq %union.tree_node* %call11, null, !dbg !4366
  br i1 %tobool12, label %for.inc, label %cleanup255.loopexit, !dbg !4368

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.0, 1, !dbg !4369
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4336, metadata !DIExpression()), !dbg !4341
  br label %for.cond, !dbg !4370, !llvm.loop !4371

for.end:                                          ; preds = %for.cond
  br i1 %tobool, label %if.end28, label %if.then16, !dbg !4373

if.then16:                                        ; preds = %for.end
  %call17 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #8, !dbg !4374
  %call18 = tail call zeroext i8 @is_gimple_mem_rhs(%union.tree_node* %call17) #8, !dbg !4377
  %tobool19 = icmp eq i8 %call18, 0, !dbg !4377
  br i1 %tobool19, label %lor.end24, label %lor.rhs20, !dbg !4378

lor.rhs20:                                        ; preds = %if.then16
  %call21 = tail call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %stmt) #8, !dbg !4379
  %tobool22 = icmp eq i8 %call21, 0, !dbg !4380
  %phitmp = zext i1 %tobool22 to i8, !dbg !4378
  br label %lor.end24, !dbg !4378

lor.end24:                                        ; preds = %if.then16, %lor.rhs20
  %3 = phi i8 [ 1, %if.then16 ], [ %phitmp, %lor.rhs20 ]
  %val_only27 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 3, !dbg !4381
  store i8 %3, i8* %val_only27, align 8, !dbg !4382
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 4, !dbg !4383
  store i8 1, i8* %is_lhs, align 1, !dbg !4384
  br label %if.end28, !dbg !4385

if.end28:                                         ; preds = %for.end, %lor.end24
  %call29 = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %stmt, i32 0) #8, !dbg !4386
  %call30 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call29, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %2, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4386
  call void @llvm.dbg.value(metadata %union.tree_node* %call30, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool31 = icmp eq %union.tree_node* %call30, null, !dbg !4387
  br i1 %tobool31, label %if.end33, label %cleanup255, !dbg !4389

if.end33:                                         ; preds = %if.end28
  br i1 %tobool, label %sw.epilog, label %if.then35, !dbg !4390

if.then35:                                        ; preds = %if.end33
  %val_only36 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 3, !dbg !4391
  store i8 1, i8* %val_only36, align 8, !dbg !4394
  %is_lhs37 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 4, !dbg !4395
  store i8 0, i8* %is_lhs37, align 1, !dbg !4396
  br label %sw.epilog, !dbg !4397

sw.bb39:                                          ; preds = %cond.end
  br i1 %tobool, label %if.end43, label %if.then41, !dbg !4398

if.then41:                                        ; preds = %sw.bb39
  %is_lhs42 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 4, !dbg !4399
  store i8 0, i8* %is_lhs42, align 1, !dbg !4401
  br label %if.end43, !dbg !4402

if.end43:                                         ; preds = %sw.bb39, %if.then41
  %call44 = tail call fastcc %union.tree_node** @gimple_call_chain_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4403
  %4 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4403
  %call45 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call44, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %4, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4403
  call void @llvm.dbg.value(metadata %union.tree_node* %call45, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool46 = icmp eq %union.tree_node* %call45, null, !dbg !4404
  br i1 %tobool46, label %if.end48, label %cleanup255, !dbg !4406

if.end48:                                         ; preds = %if.end43
  %call49 = tail call fastcc %union.tree_node** @gimple_call_fn_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4407
  %call50 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call49, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %4, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4407
  call void @llvm.dbg.value(metadata %union.tree_node* %call50, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool51 = icmp eq %union.tree_node* %call50, null, !dbg !4408
  br i1 %tobool51, label %for.cond54.preheader, label %cleanup255, !dbg !4410

for.cond54.preheader:                             ; preds = %if.end48
  br label %for.cond54, !dbg !4411

for.cond54:                                       ; preds = %for.cond54.preheader, %for.inc64
  %i.1 = phi i32 [ %inc65, %for.inc64 ], [ 0, %for.cond54.preheader ], !dbg !4413
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !4336, metadata !DIExpression()), !dbg !4341
  %call55 = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #8, !dbg !4414
  %cmp56 = icmp ult i32 %i.1, %call55, !dbg !4416
  br i1 %cmp56, label %for.body58, label %for.end66, !dbg !4411

for.body58:                                       ; preds = %for.cond54
  %call59 = tail call fastcc %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %stmt, i32 %i.1) #8, !dbg !4417
  %call60 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call59, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %4, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4417
  call void @llvm.dbg.value(metadata %union.tree_node* %call60, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool61 = icmp eq %union.tree_node* %call60, null, !dbg !4419
  br i1 %tobool61, label %for.inc64, label %cleanup255.loopexit3, !dbg !4421

for.inc64:                                        ; preds = %for.body58
  %inc65 = add i32 %i.1, 1, !dbg !4422
  call void @llvm.dbg.value(metadata i32 %inc65, metadata !4336, metadata !DIExpression()), !dbg !4341
  br label %for.cond54, !dbg !4423, !llvm.loop !4424

for.end66:                                        ; preds = %for.cond54
  br i1 %tobool, label %if.end70, label %if.then68, !dbg !4426

if.then68:                                        ; preds = %for.end66
  %is_lhs69 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 4, !dbg !4427
  store i8 1, i8* %is_lhs69, align 1, !dbg !4429
  br label %if.end70, !dbg !4430

if.end70:                                         ; preds = %for.end66, %if.then68
  %call71 = tail call fastcc %union.tree_node** @gimple_call_lhs_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4431
  %call72 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call71, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %4, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4431
  call void @llvm.dbg.value(metadata %union.tree_node* %call72, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool73 = icmp eq %union.tree_node* %call72, null, !dbg !4432
  br i1 %tobool73, label %if.end75, label %cleanup255, !dbg !4434

if.end75:                                         ; preds = %if.end70
  br i1 %tobool, label %sw.epilog, label %if.then77, !dbg !4435

if.then77:                                        ; preds = %if.end75
  %is_lhs78 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 4, !dbg !4436
  store i8 0, i8* %is_lhs78, align 1, !dbg !4438
  br label %sw.epilog, !dbg !4439

sw.bb80:                                          ; preds = %cond.end
  %call81 = tail call fastcc %union.tree_node** @gimple_catch_types_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4440
  %5 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4440
  %call82 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call81, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %5, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4440
  call void @llvm.dbg.value(metadata %union.tree_node* %call82, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool83 = icmp eq %union.tree_node* %call82, null, !dbg !4441
  br i1 %tobool83, label %sw.epilog, label %cleanup255, !dbg !4443

sw.bb86:                                          ; preds = %cond.end
  %call87 = tail call fastcc %union.tree_node** @gimple_eh_filter_types_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4444
  %6 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4444
  %call88 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call87, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %6, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4444
  call void @llvm.dbg.value(metadata %union.tree_node* %call88, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool89 = icmp eq %union.tree_node* %call88, null, !dbg !4445
  br i1 %tobool89, label %sw.epilog, label %cleanup255, !dbg !4447

sw.bb92:                                          ; preds = %cond.end
  %call93 = tail call fastcc %union.tree_node* @walk_gimple_asm(%union.gimple_statement_d* %stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) #8, !dbg !4448
  call void @llvm.dbg.value(metadata %union.tree_node* %call93, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool94 = icmp eq %union.tree_node* %call93, null, !dbg !4449
  br i1 %tobool94, label %sw.epilog, label %cleanup255, !dbg !4451

sw.bb97:                                          ; preds = %cond.end
  %call98 = tail call fastcc %union.tree_node** @gimple_omp_continue_control_def_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4452
  %7 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4452
  %call99 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call98, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %7, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4452
  call void @llvm.dbg.value(metadata %union.tree_node* %call99, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool100 = icmp eq %union.tree_node* %call99, null, !dbg !4453
  br i1 %tobool100, label %if.end102, label %cleanup255, !dbg !4455

if.end102:                                        ; preds = %sw.bb97
  %call103 = tail call fastcc %union.tree_node** @gimple_omp_continue_control_use_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4456
  %call104 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call103, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %7, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4456
  call void @llvm.dbg.value(metadata %union.tree_node* %call104, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool105 = icmp eq %union.tree_node* %call104, null, !dbg !4457
  br i1 %tobool105, label %sw.epilog, label %cleanup255, !dbg !4459

sw.bb108:                                         ; preds = %cond.end
  %call109 = tail call fastcc %union.tree_node** @gimple_omp_critical_name_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4460
  %8 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4460
  %call110 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call109, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %8, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4460
  call void @llvm.dbg.value(metadata %union.tree_node* %call110, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool111 = icmp eq %union.tree_node* %call110, null, !dbg !4461
  br i1 %tobool111, label %sw.epilog, label %cleanup255, !dbg !4463

sw.bb114:                                         ; preds = %cond.end
  %call115 = tail call fastcc %union.tree_node** @gimple_omp_for_clauses_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4464
  %9 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4464
  %call116 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call115, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %9, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4464
  call void @llvm.dbg.value(metadata %union.tree_node* %call116, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool117 = icmp eq %union.tree_node* %call116, null, !dbg !4465
  br i1 %tobool117, label %for.cond120.preheader, label %cleanup255, !dbg !4467

for.cond120.preheader:                            ; preds = %sw.bb114
  br label %for.cond120, !dbg !4468

for.cond120:                                      ; preds = %for.cond120.preheader, %if.end143
  %i.2 = phi i32 [ %inc148, %if.end143 ], [ 0, %for.cond120.preheader ], !dbg !4470
  %ret.0 = phi %union.tree_node* [ %call146, %if.end143 ], [ null, %for.cond120.preheader ], !dbg !4471
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0, metadata !4337, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.value(metadata i32 %i.2, metadata !4336, metadata !DIExpression()), !dbg !4341
  %conv121 = zext i32 %i.2 to i64, !dbg !4472
  %call122 = tail call fastcc i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %stmt) #8, !dbg !4474
  %cmp123 = icmp ugt i64 %call122, %conv121, !dbg !4475
  br i1 %cmp123, label %for.body125, label %for.end149, !dbg !4468

for.body125:                                      ; preds = %for.cond120
  %call127 = tail call fastcc %union.tree_node** @gimple_omp_for_index_ptr(%union.gimple_statement_d* %stmt, i64 %conv121) #8, !dbg !4476
  %call128 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call127, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %9, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4476
  call void @llvm.dbg.value(metadata %union.tree_node* %call128, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool129 = icmp eq %union.tree_node* %call128, null, !dbg !4478
  br i1 %tobool129, label %if.end131, label %cleanup255.loopexit4, !dbg !4480

if.end131:                                        ; preds = %for.body125
  %call133 = tail call fastcc %union.tree_node** @gimple_omp_for_initial_ptr(%union.gimple_statement_d* %stmt, i64 %conv121) #8, !dbg !4481
  %call134 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call133, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %9, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4481
  call void @llvm.dbg.value(metadata %union.tree_node* %call134, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool135 = icmp eq %union.tree_node* %call134, null, !dbg !4482
  br i1 %tobool135, label %if.end137, label %cleanup255.loopexit4, !dbg !4484

if.end137:                                        ; preds = %if.end131
  %call139 = tail call fastcc %union.tree_node** @gimple_omp_for_final_ptr(%union.gimple_statement_d* %stmt, i64 %conv121) #8, !dbg !4485
  %call140 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call139, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %9, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4485
  call void @llvm.dbg.value(metadata %union.tree_node* %call140, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool141 = icmp eq %union.tree_node* %call140, null, !dbg !4486
  br i1 %tobool141, label %if.end143, label %cleanup255.loopexit4, !dbg !4488

if.end143:                                        ; preds = %if.end137
  %call145 = tail call fastcc %union.tree_node** @gimple_omp_for_incr_ptr(%union.gimple_statement_d* %stmt, i64 %conv121) #8, !dbg !4489
  %call146 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call145, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %9, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4489
  call void @llvm.dbg.value(metadata %union.tree_node* %call146, metadata !4337, metadata !DIExpression()), !dbg !4341
  %inc148 = add i32 %i.2, 1, !dbg !4490
  call void @llvm.dbg.value(metadata i32 %inc148, metadata !4336, metadata !DIExpression()), !dbg !4341
  br label %for.cond120, !dbg !4491, !llvm.loop !4492

for.end149:                                       ; preds = %for.cond120
  %ret.0.lcssa = phi %union.tree_node* [ %ret.0, %for.cond120 ], !dbg !4471
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0.lcssa, metadata !4337, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0.lcssa, metadata !4337, metadata !DIExpression()), !dbg !4341
  call void @llvm.dbg.value(metadata %union.tree_node* %ret.0.lcssa, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool150 = icmp eq %union.tree_node* %ret.0.lcssa, null, !dbg !4494
  br i1 %tobool150, label %sw.epilog, label %cleanup255, !dbg !4496

sw.bb153:                                         ; preds = %cond.end
  %call154 = tail call fastcc %union.tree_node** @gimple_omp_parallel_clauses_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4497
  %10 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4497
  %call155 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call154, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %10, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4497
  call void @llvm.dbg.value(metadata %union.tree_node* %call155, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool156 = icmp eq %union.tree_node* %call155, null, !dbg !4498
  br i1 %tobool156, label %if.end158, label %cleanup255, !dbg !4500

if.end158:                                        ; preds = %sw.bb153
  %call159 = tail call fastcc %union.tree_node** @gimple_omp_parallel_child_fn_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4501
  %call160 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call159, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %10, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4501
  call void @llvm.dbg.value(metadata %union.tree_node* %call160, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool161 = icmp eq %union.tree_node* %call160, null, !dbg !4502
  br i1 %tobool161, label %if.end163, label %cleanup255, !dbg !4504

if.end163:                                        ; preds = %if.end158
  %call164 = tail call fastcc %union.tree_node** @gimple_omp_parallel_data_arg_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4505
  %call165 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call164, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %10, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4505
  call void @llvm.dbg.value(metadata %union.tree_node* %call165, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool166 = icmp eq %union.tree_node* %call165, null, !dbg !4506
  br i1 %tobool166, label %sw.epilog, label %cleanup255, !dbg !4508

sw.bb169:                                         ; preds = %cond.end
  %call170 = tail call fastcc %union.tree_node** @gimple_omp_task_clauses_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4509
  %11 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4509
  %call171 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call170, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %11, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4509
  call void @llvm.dbg.value(metadata %union.tree_node* %call171, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool172 = icmp eq %union.tree_node* %call171, null, !dbg !4510
  br i1 %tobool172, label %if.end174, label %cleanup255, !dbg !4512

if.end174:                                        ; preds = %sw.bb169
  %call175 = tail call fastcc %union.tree_node** @gimple_omp_task_child_fn_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4513
  %call176 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call175, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %11, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4513
  call void @llvm.dbg.value(metadata %union.tree_node* %call176, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool177 = icmp eq %union.tree_node* %call176, null, !dbg !4514
  br i1 %tobool177, label %if.end179, label %cleanup255, !dbg !4516

if.end179:                                        ; preds = %if.end174
  %call180 = tail call fastcc %union.tree_node** @gimple_omp_task_data_arg_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4517
  %call181 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call180, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %11, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4517
  call void @llvm.dbg.value(metadata %union.tree_node* %call181, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool182 = icmp eq %union.tree_node* %call181, null, !dbg !4518
  br i1 %tobool182, label %if.end184, label %cleanup255, !dbg !4520

if.end184:                                        ; preds = %if.end179
  %call185 = tail call fastcc %union.tree_node** @gimple_omp_task_copy_fn_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4521
  %call186 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call185, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %11, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4521
  call void @llvm.dbg.value(metadata %union.tree_node* %call186, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool187 = icmp eq %union.tree_node* %call186, null, !dbg !4522
  br i1 %tobool187, label %if.end189, label %cleanup255, !dbg !4524

if.end189:                                        ; preds = %if.end184
  %call190 = tail call fastcc %union.tree_node** @gimple_omp_task_arg_size_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4525
  %call191 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call190, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %11, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4525
  call void @llvm.dbg.value(metadata %union.tree_node* %call191, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool192 = icmp eq %union.tree_node* %call191, null, !dbg !4526
  br i1 %tobool192, label %if.end194, label %cleanup255, !dbg !4528

if.end194:                                        ; preds = %if.end189
  %call195 = tail call fastcc %union.tree_node** @gimple_omp_task_arg_align_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4529
  %call196 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call195, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %11, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4529
  call void @llvm.dbg.value(metadata %union.tree_node* %call196, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool197 = icmp eq %union.tree_node* %call196, null, !dbg !4530
  br i1 %tobool197, label %sw.epilog, label %cleanup255, !dbg !4532

sw.bb200:                                         ; preds = %cond.end
  %call201 = tail call fastcc %union.tree_node** @gimple_omp_sections_clauses_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4533
  %12 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4533
  %call202 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call201, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %12, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4533
  call void @llvm.dbg.value(metadata %union.tree_node* %call202, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool203 = icmp eq %union.tree_node* %call202, null, !dbg !4534
  br i1 %tobool203, label %if.end205, label %cleanup255, !dbg !4536

if.end205:                                        ; preds = %sw.bb200
  %call206 = tail call fastcc %union.tree_node** @gimple_omp_sections_control_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4537
  %call207 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call206, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %12, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4537
  call void @llvm.dbg.value(metadata %union.tree_node* %call207, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool208 = icmp eq %union.tree_node* %call207, null, !dbg !4538
  br i1 %tobool208, label %sw.epilog, label %cleanup255, !dbg !4540

sw.bb211:                                         ; preds = %cond.end
  %call212 = tail call fastcc %union.tree_node** @gimple_omp_single_clauses_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4541
  %13 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4541
  %call213 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call212, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %13, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4541
  call void @llvm.dbg.value(metadata %union.tree_node* %call213, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool214 = icmp eq %union.tree_node* %call213, null, !dbg !4542
  br i1 %tobool214, label %sw.epilog, label %cleanup255, !dbg !4544

sw.bb217:                                         ; preds = %cond.end
  %call218 = tail call fastcc %union.tree_node** @gimple_omp_atomic_load_lhs_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4545
  %14 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4545
  %call219 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call218, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %14, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4545
  call void @llvm.dbg.value(metadata %union.tree_node* %call219, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool220 = icmp eq %union.tree_node* %call219, null, !dbg !4546
  br i1 %tobool220, label %if.end222, label %cleanup255, !dbg !4548

if.end222:                                        ; preds = %sw.bb217
  %call223 = tail call fastcc %union.tree_node** @gimple_omp_atomic_load_rhs_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4549
  %call224 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call223, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %14, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4549
  call void @llvm.dbg.value(metadata %union.tree_node* %call224, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool225 = icmp eq %union.tree_node* %call224, null, !dbg !4550
  br i1 %tobool225, label %sw.epilog, label %cleanup255, !dbg !4552

sw.bb228:                                         ; preds = %cond.end
  %call229 = tail call fastcc %union.tree_node** @gimple_omp_atomic_store_val_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !4553
  %15 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4553
  %call230 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call229, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %15, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4553
  call void @llvm.dbg.value(metadata %union.tree_node* %call230, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool231 = icmp eq %union.tree_node* %call230, null, !dbg !4554
  br i1 %tobool231, label %sw.epilog, label %cleanup255, !dbg !4556

sw.default:                                       ; preds = %cond.end
  %call235 = tail call fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %stmt) #8, !dbg !4557
  call void @llvm.dbg.value(metadata i32 %call235, metadata !4338, metadata !DIExpression()), !dbg !4558
  switch i32 %call235, label %cleanup [
    i32 1, label %if.then240
    i32 3, label %if.then240
  ], !dbg !4559

if.then240:                                       ; preds = %sw.default, %sw.default
  call void @llvm.dbg.value(metadata i32 0, metadata !4336, metadata !DIExpression()), !dbg !4341
  %16 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4561
  br label %for.cond241, !dbg !4565

for.cond241:                                      ; preds = %for.inc251, %if.then240
  %i.3 = phi i32 [ 0, %if.then240 ], [ %inc252, %for.inc251 ], !dbg !4566
  call void @llvm.dbg.value(metadata i32 %i.3, metadata !4336, metadata !DIExpression()), !dbg !4341
  %call242 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %stmt) #8, !dbg !4567
  %cmp243 = icmp ult i32 %i.3, %call242, !dbg !4568
  br i1 %cmp243, label %for.body245, label %cleanup.loopexit, !dbg !4569

for.body245:                                      ; preds = %for.cond241
  %call246 = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %stmt, i32 %i.3) #8, !dbg !4570
  %call247 = tail call %union.tree_node* @walk_tree_1(%union.tree_node** %call246, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %16, %struct.pointer_set_t* %cond, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4570
  call void @llvm.dbg.value(metadata %union.tree_node* %call247, metadata !4337, metadata !DIExpression()), !dbg !4341
  %tobool248 = icmp eq %union.tree_node* %call247, null, !dbg !4571
  br i1 %tobool248, label %for.inc251, label %cleanup.loopexit, !dbg !4573

for.inc251:                                       ; preds = %for.body245
  %inc252 = add i32 %i.3, 1, !dbg !4574
  call void @llvm.dbg.value(metadata i32 %inc252, metadata !4336, metadata !DIExpression()), !dbg !4341
  br label %for.cond241, !dbg !4575, !llvm.loop !4576

cleanup.loopexit:                                 ; preds = %for.cond241, %for.body245
  %cleanup.dest.slot.0.ph = phi i1 [ true, %for.cond241 ], [ false, %for.body245 ]
  %retval.0.ph = phi %union.tree_node* [ undef, %for.cond241 ], [ %call247, %for.body245 ]
  br label %cleanup

cleanup:                                          ; preds = %cleanup.loopexit, %sw.default
  %cleanup.dest.slot.0 = phi i1 [ true, %sw.default ], [ %cleanup.dest.slot.0.ph, %cleanup.loopexit ]
  %retval.0 = phi %union.tree_node* [ undef, %sw.default ], [ %retval.0.ph, %cleanup.loopexit ]
  br i1 %cleanup.dest.slot.0, label %sw.epilog, label %cleanup255

sw.epilog:                                        ; preds = %if.end33, %if.end75, %sw.bb80, %sw.bb86, %sw.bb92, %if.end102, %sw.bb108, %for.end149, %if.end163, %if.end194, %if.end205, %sw.bb211, %if.end222, %sw.bb228, %cleanup, %cond.end, %cond.end, %cond.end, %cond.end, %if.then77, %if.then35
  br label %cleanup255, !dbg !4578

cleanup255.loopexit:                              ; preds = %for.body
  %call11.lcssa = phi %union.tree_node* [ %call11, %for.body ], !dbg !4365
  br label %cleanup255, !dbg !4579

cleanup255.loopexit3:                             ; preds = %for.body58
  %call60.lcssa = phi %union.tree_node* [ %call60, %for.body58 ], !dbg !4417
  br label %cleanup255, !dbg !4579

cleanup255.loopexit4:                             ; preds = %for.body125, %if.end131, %if.end137
  %retval.1.ph = phi %union.tree_node* [ %call140, %if.end137 ], [ %call134, %if.end131 ], [ %call128, %for.body125 ]
  br label %cleanup255, !dbg !4579

cleanup255:                                       ; preds = %cleanup255.loopexit4, %cleanup255.loopexit3, %cleanup255.loopexit, %if.end28, %if.end70, %if.end48, %if.end43, %sw.bb80, %sw.bb86, %sw.bb92, %if.end102, %sw.bb97, %sw.bb108, %for.end149, %sw.bb114, %if.end163, %if.end158, %sw.bb153, %if.end194, %if.end189, %if.end184, %if.end179, %if.end174, %sw.bb169, %if.end205, %sw.bb200, %sw.bb211, %if.end222, %sw.bb217, %sw.bb228, %cleanup, %sw.epilog
  %retval.1 = phi %union.tree_node* [ %retval.0, %cleanup ], [ null, %sw.epilog ], [ %call30, %if.end28 ], [ %call45, %if.end43 ], [ %call50, %if.end48 ], [ %call72, %if.end70 ], [ %call82, %sw.bb80 ], [ %call88, %sw.bb86 ], [ %call93, %sw.bb92 ], [ %call99, %sw.bb97 ], [ %call104, %if.end102 ], [ %call110, %sw.bb108 ], [ %call116, %sw.bb114 ], [ %ret.0.lcssa, %for.end149 ], [ %call155, %sw.bb153 ], [ %call160, %if.end158 ], [ %call165, %if.end163 ], [ %call171, %sw.bb169 ], [ %call176, %if.end174 ], [ %call181, %if.end179 ], [ %call186, %if.end184 ], [ %call191, %if.end189 ], [ %call196, %if.end194 ], [ %call202, %sw.bb200 ], [ %call207, %if.end205 ], [ %call213, %sw.bb211 ], [ %call219, %sw.bb217 ], [ %call224, %if.end222 ], [ %call230, %sw.bb228 ], [ %call11.lcssa, %cleanup255.loopexit ], [ %call60.lcssa, %cleanup255.loopexit3 ], [ %retval.1.ph, %cleanup255.loopexit4 ], !dbg !4341
  ret %union.tree_node* %retval.1, !dbg !4579
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_code(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4580 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4584, metadata !DIExpression()), !dbg !4585
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 0, !dbg !4586
  %bf.load = load i32, i32* %0, align 8, !dbg !4586
  %bf.clear = and i32 %bf.load, 255, !dbg !4586
  ret i32 %bf.clear, !dbg !4587
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_reg(%union.tree_node* %t) local_unnamed_addr #5 !dbg !4588 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !4590, metadata !DIExpression()), !dbg !4591
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4592
  %bf.load = load i64, i64* %0, align 8, !dbg !4592
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4594
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !4594
  br i1 %cmp, label %if.then, label %if.end, !dbg !4595

if.then:                                          ; preds = %entry
  %var = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4596
  %1 = bitcast i32* %var to %union.tree_node**, !dbg !4596
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !4596
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !4590, metadata !DIExpression()), !dbg !4591
  br label %if.end, !dbg !4597

if.end:                                           ; preds = %if.then, %entry
  %t.addr.0 = phi %union.tree_node* [ %2, %if.then ], [ %t, %entry ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0, metadata !4590, metadata !DIExpression()), !dbg !4591
  %call = tail call zeroext i8 @is_gimple_variable(%union.tree_node* %t.addr.0) #8, !dbg !4598
  %tobool = icmp eq i8 %call, 0, !dbg !4598
  br i1 %tobool, label %return, label %if.end2, !dbg !4600

if.end2:                                          ; preds = %if.end
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4601
  %3 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4601
  %call3 = tail call zeroext i8 @is_gimple_reg_type(%union.tree_node* %3) #8, !dbg !4603
  %tobool4 = icmp eq i8 %call3, 0, !dbg !4603
  br i1 %tobool4, label %return, label %if.end6, !dbg !4604

if.end6:                                          ; preds = %if.end2
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4605
  %bf.load8 = load i64, i64* %4, align 8, !dbg !4605
  %bf.cast102 = and i64 %bf.load8, 524288, !dbg !4605
  %tobool11 = icmp eq i64 %bf.cast102, 0, !dbg !4605
  br i1 %tobool11, label %if.end13, label %return, !dbg !4607

if.end13:                                         ; preds = %if.end6
  %call14 = tail call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %t.addr.0) #7, !dbg !4608
  %tobool15 = icmp eq i8 %call14, 0, !dbg !4608
  br i1 %tobool15, label %if.end17, label %return, !dbg !4610

if.end17:                                         ; preds = %if.end13
  %bf.load19 = load i64, i64* %4, align 8, !dbg !4611
  %bf.cast213 = and i64 %bf.load19, 65535, !dbg !4613
  %cmp22 = icmp eq i64 %bf.cast213, 32, !dbg !4613
  br i1 %cmp22, label %land.lhs.true, label %if.end28, !dbg !4614

land.lhs.true:                                    ; preds = %if.end17
  %hard_register = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 4, !dbg !4615
  %5 = bitcast i24* %hard_register to i32*, !dbg !4615
  %bf.load23 = load i32, i32* %5, align 8, !dbg !4615
  %bf.clear25 = and i32 %bf.load23, 2, !dbg !4615
  %tobool26 = icmp eq i32 %bf.clear25, 0, !dbg !4615
  br i1 %tobool26, label %if.end28, label %return, !dbg !4616

if.end28:                                         ; preds = %land.lhs.true, %if.end17
  %6 = bitcast %union.tree_node** %type to i64**, !dbg !4617
  %7 = load i64*, i64** %6, align 8, !dbg !4617
  %bf.load32 = load i64, i64* %7, align 8, !dbg !4617
  %bf.cast344 = and i64 %bf.load32, 65535, !dbg !4619
  %cmp35 = icmp eq i64 %bf.cast344, 13, !dbg !4619
  br i1 %cmp35, label %if.then43, label %lor.lhs.false, !dbg !4620

lor.lhs.false:                                    ; preds = %if.end28
  %cmp42 = icmp eq i64 %bf.cast344, 14, !dbg !4621
  br i1 %cmp42, label %if.then43, label %return, !dbg !4622

if.then43:                                        ; preds = %lor.lhs.false, %if.end28
  %gimple_reg_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4623
  %8 = bitcast i40* %gimple_reg_flag to i64*, !dbg !4623
  %bf.load44 = load i64, i64* %8, align 8, !dbg !4623
  %bf.lshr45 = lshr i64 %bf.load44, 27, !dbg !4623
  %9 = trunc i64 %bf.lshr45 to i8, !dbg !4623
  %bf.cast47 = and i8 %9, 1, !dbg !4623
  br label %return, !dbg !4624

return:                                           ; preds = %land.lhs.true, %if.end13, %if.end6, %if.end2, %if.end, %lor.lhs.false, %if.then43
  %retval.0 = phi i8 [ %bf.cast47, %if.then43 ], [ 0, %if.end ], [ 0, %if.end2 ], [ 0, %if.end6 ], [ 0, %if.end13 ], [ 0, %land.lhs.true ], [ 1, %lor.lhs.false ], !dbg !4591
  ret i8 %retval.0, !dbg !4625
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4626 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4628, metadata !DIExpression()), !dbg !4629
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #8, !dbg !4630
  ret %union.tree_node* %call, !dbg !4631
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %gs) local_unnamed_addr #5 !dbg !4632 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4634, metadata !DIExpression()), !dbg !4635
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !4636
  %cmp = icmp eq i32 %call, 6, !dbg !4637
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4638

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #8, !dbg !4639
  %call2 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call1) #8, !dbg !4640
  %cmp3 = icmp eq i32 %call2, 3, !dbg !4641
  %phitmp = zext i1 %cmp3 to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !4642
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4643 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4647, metadata !DIExpression()), !dbg !4648
  %num_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 3, !dbg !4649
  %0 = load i32, i32* %num_ops, align 4, !dbg !4649
  ret i32 %0, !dbg !4650
}

declare dso_local %union.tree_node* @walk_tree_1(%union.tree_node**, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !4651 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4655, metadata !DIExpression()), !dbg !4657
  call void @llvm.dbg.value(metadata i32 %i, metadata !4656, metadata !DIExpression()), !dbg !4657
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #8, !dbg !4658
  %tobool = icmp eq i8 %call, 0, !dbg !4658
  br i1 %tobool, label %return, label %if.then, !dbg !4660

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #8, !dbg !4661
  %idx.ext = zext i32 %i to i64, !dbg !4663
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !4663
  br label %return, !dbg !4664

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node** [ %add.ptr, %if.then ], [ null, %entry ], !dbg !4665
  ret %union.tree_node** %retval.0, !dbg !4666
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_mem_rhs(%union.tree_node* %t) local_unnamed_addr #5 !dbg !4667 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !4669, metadata !DIExpression()), !dbg !4670
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4671
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4671
  %call = tail call zeroext i8 @is_gimple_reg_type(%union.tree_node* %0) #8, !dbg !4673
  %tobool = icmp eq i8 %call, 0, !dbg !4673
  %call1 = tail call zeroext i8 @is_gimple_val(%union.tree_node* %t) #8, !dbg !4674
  br i1 %tobool, label %if.else, label %return, !dbg !4675

if.else:                                          ; preds = %entry
  %tobool3 = icmp eq i8 %call1, 0, !dbg !4676
  br i1 %tobool3, label %lor.rhs, label %lor.end, !dbg !4677

lor.rhs:                                          ; preds = %if.else
  %call4 = tail call zeroext i8 @is_gimple_lvalue(%union.tree_node* %t) #8, !dbg !4678
  %tobool6 = icmp ne i8 %call4, 0, !dbg !4677
  %phitmp = zext i1 %tobool6 to i8, !dbg !4677
  br label %lor.end, !dbg !4677

lor.end:                                          ; preds = %if.else, %lor.rhs
  %1 = phi i8 [ 1, %if.else ], [ %phitmp, %lor.rhs ]
  br label %return, !dbg !4679

return:                                           ; preds = %entry, %lor.end
  %retval.0 = phi i8 [ %1, %lor.end ], [ %call1, %entry ], !dbg !4674
  ret i8 %retval.0, !dbg !4680
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4681 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4683, metadata !DIExpression()), !dbg !4684
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #8, !dbg !4685
  ret %union.tree_node* %call, !dbg !4686
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_call_chain_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4687 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4691, metadata !DIExpression()), !dbg !4692
  %call = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 2) #8, !dbg !4693
  ret %union.tree_node** %call, !dbg !4694
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_call_fn_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4695 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4697, metadata !DIExpression()), !dbg !4698
  %call = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 1) #8, !dbg !4699
  ret %union.tree_node** %call, !dbg !4700
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4701 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4703, metadata !DIExpression()), !dbg !4705
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #8, !dbg !4706
  call void @llvm.dbg.value(metadata i32 %call, metadata !4704, metadata !DIExpression()), !dbg !4705
  %sub = add i32 %call, -3, !dbg !4707
  ret i32 %sub, !dbg !4708
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_call_arg_ptr(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !4709 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4711, metadata !DIExpression()), !dbg !4713
  call void @llvm.dbg.value(metadata i32 %index, metadata !4712, metadata !DIExpression()), !dbg !4713
  %add = add i32 %index, 3, !dbg !4714
  %call = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %add) #8, !dbg !4715
  ret %union.tree_node** %call, !dbg !4716
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_call_lhs_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4717 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4719, metadata !DIExpression()), !dbg !4720
  %call = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 0) #8, !dbg !4721
  ret %union.tree_node** %call, !dbg !4722
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_catch_types_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4723 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4727, metadata !DIExpression()), !dbg !4728
  %types = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !4729
  %0 = bitcast i32* %types to %union.tree_node**, !dbg !4729
  ret %union.tree_node** %0, !dbg !4730
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_eh_filter_types_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4731 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4733, metadata !DIExpression()), !dbg !4734
  %types = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !4735
  %0 = bitcast i32* %types to %union.tree_node**, !dbg !4735
  ret %union.tree_node** %0, !dbg !4736
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @walk_gimple_asm(%union.gimple_statement_d* %stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, %struct.walk_stmt_info* %wi) unnamed_addr #5 !dbg !4737 {
entry:
  %constraint = alloca i8*, align 8
  %allows_mem = alloca i8, align 1
  %allows_reg = alloca i8, align 1
  %is_inout = alloca i8, align 1
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4739, metadata !DIExpression()), !dbg !4752
  call void @llvm.dbg.value(metadata %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, metadata !4740, metadata !DIExpression()), !dbg !4752
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !4741, metadata !DIExpression()), !dbg !4752
  %0 = bitcast i8** %constraint to i8*, !dbg !4753
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #6, !dbg !4753
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !4749, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %allows_mem) #6, !dbg !4754
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !4750, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %allows_reg) #6, !dbg !4754
  call void @llvm.dbg.value(metadata i8* %is_inout, metadata !4751, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %is_inout) #6, !dbg !4754
  %call = tail call fastcc i32 @gimple_asm_noutputs(%union.gimple_statement_d* %stmt) #8, !dbg !4755
  call void @llvm.dbg.value(metadata i32 %call, metadata !4744, metadata !DIExpression()), !dbg !4752
  %conv = zext i32 %call to i64, !dbg !4756
  %1 = alloca i8*, i64 %conv, align 16, !dbg !4756
  call void @llvm.dbg.value(metadata i8** %1, metadata !4745, metadata !DIExpression()), !dbg !4752
  %tobool = icmp eq %struct.walk_stmt_info* %wi, null, !dbg !4757
  br i1 %tobool, label %if.end, label %if.then, !dbg !4759

if.then:                                          ; preds = %entry
  %is_lhs = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 4, !dbg !4760
  store i8 1, i8* %is_lhs, align 1, !dbg !4761
  br label %if.end, !dbg !4762

if.end:                                           ; preds = %entry, %if.then
  call void @llvm.dbg.value(metadata i32 0, metadata !4746, metadata !DIExpression()), !dbg !4752
  %val_only = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 3, !dbg !4763
  %2 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !4768
  br i1 %tobool, label %if.end.split.us, label %if.end.if.end.split_crit_edge, !dbg !4769

if.end.if.end.split_crit_edge:                    ; preds = %if.end
  %wide.trip.count10 = zext i32 %call to i64, !dbg !4770
  br label %for.cond, !dbg !4769

if.end.split.us:                                  ; preds = %if.end
  %wide.trip.count = zext i32 %call to i64, !dbg !4770
  br label %for.cond.us, !dbg !4769

for.cond.us:                                      ; preds = %for.inc.us, %if.end.split.us
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.us ], [ 0, %if.end.split.us ], !dbg !4771
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !4746, metadata !DIExpression()), !dbg !4752
  %exitcond7 = icmp eq i64 %indvars.iv, %wide.trip.count, !dbg !4770
  br i1 %exitcond7, label %for.end.us-lcssa.us, label %for.body.us, !dbg !4772

for.body.us:                                      ; preds = %for.cond.us
  %3 = trunc i64 %indvars.iv to i32, !dbg !4773
  %call2.us = call fastcc %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %stmt, i32 %3) #8, !dbg !4773
  call void @llvm.dbg.value(metadata %union.tree_node* %call2.us, metadata !4743, metadata !DIExpression()), !dbg !4752
  %purpose.us = getelementptr inbounds %union.tree_node, %union.tree_node* %call2.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4774
  %4 = bitcast i32* %purpose.us to %struct.tree_list**, !dbg !4774
  %5 = load %struct.tree_list*, %struct.tree_list** %4, align 8, !dbg !4774
  %value.us = getelementptr inbounds %struct.tree_list, %struct.tree_list* %5, i64 0, i32 2, !dbg !4774
  %6 = bitcast %union.tree_node** %value.us to %struct.tree_string**, !dbg !4774
  %7 = load %struct.tree_string*, %struct.tree_string** %6, align 8, !dbg !4774
  %arraydecay.us = getelementptr inbounds %struct.tree_string, %struct.tree_string* %7, i64 0, i32 2, i64 0, !dbg !4774
  call void @llvm.dbg.value(metadata i8* %arraydecay.us, metadata !4748, metadata !DIExpression()), !dbg !4752
  store i8* %arraydecay.us, i8** %constraint, align 8, !dbg !4775
  %.cast.us = ptrtoint i8* %arraydecay.us to i64, !dbg !4776
  %arrayidx.us = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv, !dbg !4777
  %8 = bitcast i8** %arrayidx.us to i64*, !dbg !4778
  store i64 %.cast.us, i64* %8, align 8, !dbg !4778
  call void @llvm.dbg.value(metadata i8** %constraint, metadata !4748, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !4749, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !4750, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %is_inout, metadata !4751, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  %9 = trunc i64 %indvars.iv to i32, !dbg !4779
  %call4.us = call zeroext i8 @parse_output_constraint(i8** nonnull %constraint, i32 %9, i32 0, i32 0, i8* nonnull %allows_mem, i8* nonnull %allows_reg, i8* nonnull %is_inout) #7, !dbg !4779
  %10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4780
  %call14.us = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %10, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %2, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4780
  call void @llvm.dbg.value(metadata %union.tree_node* %call14.us, metadata !4742, metadata !DIExpression()), !dbg !4752
  %tobool15.us = icmp eq %union.tree_node* %call14.us, null, !dbg !4781
  br i1 %tobool15.us, label %for.inc.us, label %cleanup.loopexit2.us-lcssa.us, !dbg !4783

for.inc.us:                                       ; preds = %for.body.us
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !4784
  br label %for.cond.us, !dbg !4785, !llvm.loop !4786

for.end.us-lcssa.us:                              ; preds = %for.cond.us
  br label %for.end, !dbg !4788

cleanup.loopexit2.us-lcssa.us:                    ; preds = %for.body.us
  %call14.us.lcssa = phi %union.tree_node* [ %call14.us, %for.body.us ], !dbg !4780
  br label %cleanup.loopexit2, !dbg !4789

for.cond:                                         ; preds = %for.inc, %if.end.if.end.split_crit_edge
  %indvars.iv8 = phi i64 [ %indvars.iv.next9, %for.inc ], [ 0, %if.end.if.end.split_crit_edge ], !dbg !4771
  call void @llvm.dbg.value(metadata i64 %indvars.iv8, metadata !4746, metadata !DIExpression()), !dbg !4752
  %exitcond11 = icmp eq i64 %indvars.iv8, %wide.trip.count10, !dbg !4770
  br i1 %exitcond11, label %for.end.us-lcssa, label %for.body, !dbg !4772

for.body:                                         ; preds = %for.cond
  %11 = trunc i64 %indvars.iv8 to i32, !dbg !4773
  %call2 = call fastcc %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %stmt, i32 %11) #8, !dbg !4773
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !4743, metadata !DIExpression()), !dbg !4752
  %purpose = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4774
  %12 = bitcast i32* %purpose to %struct.tree_list**, !dbg !4774
  %13 = load %struct.tree_list*, %struct.tree_list** %12, align 8, !dbg !4774
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %13, i64 0, i32 2, !dbg !4774
  %14 = bitcast %union.tree_node** %value to %struct.tree_string**, !dbg !4774
  %15 = load %struct.tree_string*, %struct.tree_string** %14, align 8, !dbg !4774
  %arraydecay = getelementptr inbounds %struct.tree_string, %struct.tree_string* %15, i64 0, i32 2, i64 0, !dbg !4774
  call void @llvm.dbg.value(metadata i8* %arraydecay, metadata !4748, metadata !DIExpression()), !dbg !4752
  store i8* %arraydecay, i8** %constraint, align 8, !dbg !4775
  %.cast = ptrtoint i8* %arraydecay to i64, !dbg !4776
  %arrayidx = getelementptr inbounds i8*, i8** %1, i64 %indvars.iv8, !dbg !4777
  %16 = bitcast i8** %arrayidx to i64*, !dbg !4778
  store i64 %.cast, i64* %16, align 8, !dbg !4778
  call void @llvm.dbg.value(metadata i8** %constraint, metadata !4748, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !4749, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !4750, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %is_inout, metadata !4751, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  %17 = trunc i64 %indvars.iv8 to i32, !dbg !4779
  %call4 = call zeroext i8 @parse_output_constraint(i8** nonnull %constraint, i32 %17, i32 0, i32 0, i8* nonnull %allows_mem, i8* nonnull %allows_reg, i8* nonnull %is_inout) #7, !dbg !4779
  %18 = load i8, i8* %allows_reg, align 1, !dbg !4790
  call void @llvm.dbg.value(metadata i8 %18, metadata !4750, metadata !DIExpression()), !dbg !4752
  %tobool8 = icmp eq i8 %18, 0, !dbg !4790
  br i1 %tobool8, label %lor.rhs, label %lor.end, !dbg !4791

lor.rhs:                                          ; preds = %for.body
  %19 = load i8, i8* %allows_mem, align 1, !dbg !4792
  call void @llvm.dbg.value(metadata i8 %19, metadata !4749, metadata !DIExpression()), !dbg !4752
  %tobool9 = icmp eq i8 %19, 0, !dbg !4793
  br label %lor.end, !dbg !4791

lor.end:                                          ; preds = %for.body, %lor.rhs
  %20 = phi i1 [ true, %for.body ], [ %tobool9, %lor.rhs ]
  %conv10 = zext i1 %20 to i8, !dbg !4794
  store i8 %conv10, i8* %val_only, align 8, !dbg !4795
  %21 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4780
  %call14 = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %21, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* nonnull %2, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4780
  call void @llvm.dbg.value(metadata %union.tree_node* %call14, metadata !4742, metadata !DIExpression()), !dbg !4752
  %tobool15 = icmp eq %union.tree_node* %call14, null, !dbg !4781
  br i1 %tobool15, label %for.inc, label %cleanup.loopexit2.us-lcssa, !dbg !4783

for.inc:                                          ; preds = %lor.end
  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1, !dbg !4784
  br label %for.cond, !dbg !4785, !llvm.loop !4786

for.end.us-lcssa:                                 ; preds = %for.cond
  br label %for.end, !dbg !4788

for.end:                                          ; preds = %for.end.us-lcssa.us, %for.end.us-lcssa
  %call18 = call fastcc i32 @gimple_asm_ninputs(%union.gimple_statement_d* %stmt) #8, !dbg !4788
  call void @llvm.dbg.value(metadata i32 %call18, metadata !4747, metadata !DIExpression()), !dbg !4752
  call void @llvm.dbg.value(metadata i32 0, metadata !4746, metadata !DIExpression()), !dbg !4752
  %is_lhs47 = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 4, !dbg !4796
  br i1 %tobool, label %for.end.split.us, label %for.end.for.end.split_crit_edge, !dbg !4802

for.end.for.end.split_crit_edge:                  ; preds = %for.end
  br label %for.cond19, !dbg !4802

for.end.split.us:                                 ; preds = %for.end
  br label %for.cond19.us, !dbg !4802

for.cond19.us:                                    ; preds = %for.inc55.us, %for.end.split.us
  %i.1.us = phi i32 [ 0, %for.end.split.us ], [ %inc56.us, %for.inc55.us ], !dbg !4803
  call void @llvm.dbg.value(metadata i32 %i.1.us, metadata !4746, metadata !DIExpression()), !dbg !4752
  %exitcond5 = icmp eq i32 %i.1.us, %call18, !dbg !4804
  br i1 %exitcond5, label %for.end57.us-lcssa.us, label %for.body22.us, !dbg !4805

for.body22.us:                                    ; preds = %for.cond19.us
  %call23.us = call fastcc %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %stmt, i32 %i.1.us) #8, !dbg !4806
  call void @llvm.dbg.value(metadata %union.tree_node* %call23.us, metadata !4743, metadata !DIExpression()), !dbg !4752
  %purpose25.us = getelementptr inbounds %union.tree_node, %union.tree_node* %call23.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4807
  %22 = bitcast i32* %purpose25.us to %struct.tree_list**, !dbg !4807
  %23 = load %struct.tree_list*, %struct.tree_list** %22, align 8, !dbg !4807
  %value27.us = getelementptr inbounds %struct.tree_list, %struct.tree_list* %23, i64 0, i32 2, !dbg !4807
  %24 = bitcast %union.tree_node** %value27.us to %struct.tree_string**, !dbg !4807
  %25 = load %struct.tree_string*, %struct.tree_string** %24, align 8, !dbg !4807
  %arraydecay30.us = getelementptr inbounds %struct.tree_string, %struct.tree_string* %25, i64 0, i32 2, i64 0, !dbg !4807
  call void @llvm.dbg.value(metadata i8* %arraydecay30.us, metadata !4748, metadata !DIExpression()), !dbg !4752
  store i8* %arraydecay30.us, i8** %constraint, align 8, !dbg !4808
  call void @llvm.dbg.value(metadata i8** %constraint, metadata !4748, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !4749, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !4750, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  %call31.us = call zeroext i8 @parse_input_constraint(i8** nonnull %constraint, i32 0, i32 0, i32 %call, i32 0, i8** nonnull %1, i8* nonnull %allows_mem, i8* nonnull %allows_reg) #7, !dbg !4809
  %26 = getelementptr inbounds %union.tree_node, %union.tree_node* %call23.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4810
  %call51.us = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %26, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %2, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4810
  call void @llvm.dbg.value(metadata %union.tree_node* %call51.us, metadata !4742, metadata !DIExpression()), !dbg !4752
  %tobool52.us = icmp eq %union.tree_node* %call51.us, null, !dbg !4811
  br i1 %tobool52.us, label %for.inc55.us, label %cleanup.loopexit1.us-lcssa.us, !dbg !4813

for.inc55.us:                                     ; preds = %for.body22.us
  %inc56.us = add i32 %i.1.us, 1, !dbg !4814
  call void @llvm.dbg.value(metadata i32 %inc56.us, metadata !4746, metadata !DIExpression()), !dbg !4752
  br label %for.cond19.us, !dbg !4815, !llvm.loop !4816

for.end57.us-lcssa.us:                            ; preds = %for.cond19.us
  br label %for.end57, !dbg !4818

cleanup.loopexit1.us-lcssa.us:                    ; preds = %for.body22.us
  %call51.us.lcssa = phi %union.tree_node* [ %call51.us, %for.body22.us ], !dbg !4810
  br label %cleanup.loopexit1, !dbg !4789

for.cond19:                                       ; preds = %for.inc55, %for.end.for.end.split_crit_edge
  %i.1 = phi i32 [ 0, %for.end.for.end.split_crit_edge ], [ %inc56, %for.inc55 ], !dbg !4803
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !4746, metadata !DIExpression()), !dbg !4752
  %exitcond6 = icmp eq i32 %i.1, %call18, !dbg !4804
  br i1 %exitcond6, label %for.end57.us-lcssa, label %for.body22, !dbg !4805

for.body22:                                       ; preds = %for.cond19
  %call23 = call fastcc %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %stmt, i32 %i.1) #8, !dbg !4806
  call void @llvm.dbg.value(metadata %union.tree_node* %call23, metadata !4743, metadata !DIExpression()), !dbg !4752
  %purpose25 = getelementptr inbounds %union.tree_node, %union.tree_node* %call23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4807
  %27 = bitcast i32* %purpose25 to %struct.tree_list**, !dbg !4807
  %28 = load %struct.tree_list*, %struct.tree_list** %27, align 8, !dbg !4807
  %value27 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %28, i64 0, i32 2, !dbg !4807
  %29 = bitcast %union.tree_node** %value27 to %struct.tree_string**, !dbg !4807
  %30 = load %struct.tree_string*, %struct.tree_string** %29, align 8, !dbg !4807
  %arraydecay30 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %30, i64 0, i32 2, i64 0, !dbg !4807
  call void @llvm.dbg.value(metadata i8* %arraydecay30, metadata !4748, metadata !DIExpression()), !dbg !4752
  store i8* %arraydecay30, i8** %constraint, align 8, !dbg !4808
  call void @llvm.dbg.value(metadata i8** %constraint, metadata !4748, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !4749, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !4750, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  %call31 = call zeroext i8 @parse_input_constraint(i8** nonnull %constraint, i32 0, i32 0, i32 %call, i32 0, i8** nonnull %1, i8* nonnull %allows_mem, i8* nonnull %allows_reg) #7, !dbg !4809
  %31 = load i8, i8* %allows_reg, align 1, !dbg !4820
  call void @llvm.dbg.value(metadata i8 %31, metadata !4750, metadata !DIExpression()), !dbg !4752
  %tobool35 = icmp eq i8 %31, 0, !dbg !4820
  br i1 %tobool35, label %lor.rhs36, label %lor.end39, !dbg !4821

lor.rhs36:                                        ; preds = %for.body22
  %32 = load i8, i8* %allows_mem, align 1, !dbg !4822
  call void @llvm.dbg.value(metadata i8 %32, metadata !4749, metadata !DIExpression()), !dbg !4752
  %tobool37 = icmp eq i8 %32, 0, !dbg !4823
  br label %lor.end39, !dbg !4821

lor.end39:                                        ; preds = %for.body22, %lor.rhs36
  %33 = phi i1 [ true, %for.body22 ], [ %tobool37, %lor.rhs36 ]
  %conv41 = zext i1 %33 to i8, !dbg !4824
  store i8 %conv41, i8* %val_only, align 8, !dbg !4825
  %lnot45 = xor i1 %33, true, !dbg !4826
  %conv46 = zext i1 %lnot45 to i8, !dbg !4826
  store i8 %conv46, i8* %is_lhs47, align 1, !dbg !4827
  %34 = getelementptr inbounds %union.tree_node, %union.tree_node* %call23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4810
  %call51 = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %34, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* nonnull %2, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4810
  call void @llvm.dbg.value(metadata %union.tree_node* %call51, metadata !4742, metadata !DIExpression()), !dbg !4752
  %tobool52 = icmp eq %union.tree_node* %call51, null, !dbg !4811
  br i1 %tobool52, label %for.inc55, label %cleanup.loopexit1.us-lcssa, !dbg !4813

for.inc55:                                        ; preds = %lor.end39
  %inc56 = add i32 %i.1, 1, !dbg !4814
  call void @llvm.dbg.value(metadata i32 %inc56, metadata !4746, metadata !DIExpression()), !dbg !4752
  br label %for.cond19, !dbg !4815, !llvm.loop !4816

for.end57.us-lcssa:                               ; preds = %for.cond19
  br label %for.end57, !dbg !4818

for.end57:                                        ; preds = %for.end57.us-lcssa.us, %for.end57.us-lcssa
  br i1 %tobool, label %if.end62, label %if.then59, !dbg !4828

if.then59:                                        ; preds = %for.end57
  store i8 0, i8* %is_lhs47, align 1, !dbg !4829
  store i8 1, i8* %val_only, align 8, !dbg !4831
  br label %if.end62, !dbg !4832

if.end62:                                         ; preds = %for.end57, %if.then59
  %call63 = call fastcc i32 @gimple_asm_nlabels(%union.gimple_statement_d* %stmt) #8, !dbg !4833
  call void @llvm.dbg.value(metadata i32 %call63, metadata !4747, metadata !DIExpression()), !dbg !4752
  call void @llvm.dbg.value(metadata i32 0, metadata !4746, metadata !DIExpression()), !dbg !4752
  br label %for.cond64, !dbg !4834

for.cond64:                                       ; preds = %for.inc75, %if.end62
  %i.2 = phi i32 [ 0, %if.end62 ], [ %inc76, %for.inc75 ], !dbg !4836
  call void @llvm.dbg.value(metadata i32 %i.2, metadata !4746, metadata !DIExpression()), !dbg !4752
  %exitcond = icmp eq i32 %i.2, %call63, !dbg !4837
  br i1 %exitcond, label %cleanup.loopexit, label %for.body67, !dbg !4839

for.body67:                                       ; preds = %for.cond64
  %call68 = call fastcc %union.tree_node* @gimple_asm_label_op(%union.gimple_statement_d* %stmt, i32 %i.2) #8, !dbg !4840
  call void @llvm.dbg.value(metadata %union.tree_node* %call68, metadata !4743, metadata !DIExpression()), !dbg !4752
  %35 = getelementptr inbounds %union.tree_node, %union.tree_node* %call68, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4842
  %call71 = call %union.tree_node* @walk_tree_1(%union.tree_node** nonnull %35, %union.tree_node* (%union.tree_node**, i32*, i8*)* %callback_op, i8* %2, %struct.pointer_set_t* null, %union.tree_node* (%union.tree_node**, i32*, %union.tree_node* (%union.tree_node**, i32*, i8*)*, i8*, %struct.pointer_set_t*)* null) #7, !dbg !4842
  call void @llvm.dbg.value(metadata %union.tree_node* %call71, metadata !4742, metadata !DIExpression()), !dbg !4752
  %tobool72 = icmp eq %union.tree_node* %call71, null, !dbg !4843
  br i1 %tobool72, label %for.inc75, label %cleanup.loopexit, !dbg !4845

for.inc75:                                        ; preds = %for.body67
  %inc76 = add i32 %i.2, 1, !dbg !4846
  call void @llvm.dbg.value(metadata i32 %inc76, metadata !4746, metadata !DIExpression()), !dbg !4752
  br label %for.cond64, !dbg !4847, !llvm.loop !4848

cleanup.loopexit:                                 ; preds = %for.cond64, %for.body67
  %retval.0.ph = phi %union.tree_node* [ null, %for.cond64 ], [ %call71, %for.body67 ]
  br label %cleanup, !dbg !4789

cleanup.loopexit1.us-lcssa:                       ; preds = %lor.end39
  %call51.lcssa12 = phi %union.tree_node* [ %call51, %lor.end39 ], !dbg !4810
  br label %cleanup.loopexit1, !dbg !4789

cleanup.loopexit1:                                ; preds = %cleanup.loopexit1.us-lcssa.us, %cleanup.loopexit1.us-lcssa
  %call51.lcssa = phi %union.tree_node* [ %call51.lcssa12, %cleanup.loopexit1.us-lcssa ], [ %call51.us.lcssa, %cleanup.loopexit1.us-lcssa.us ], !dbg !4810
  br label %cleanup, !dbg !4789

cleanup.loopexit2.us-lcssa:                       ; preds = %lor.end
  %call14.lcssa13 = phi %union.tree_node* [ %call14, %lor.end ], !dbg !4780
  br label %cleanup.loopexit2, !dbg !4789

cleanup.loopexit2:                                ; preds = %cleanup.loopexit2.us-lcssa.us, %cleanup.loopexit2.us-lcssa
  %call14.lcssa = phi %union.tree_node* [ %call14.lcssa13, %cleanup.loopexit2.us-lcssa ], [ %call14.us.lcssa, %cleanup.loopexit2.us-lcssa.us ], !dbg !4780
  br label %cleanup, !dbg !4789

cleanup:                                          ; preds = %cleanup.loopexit2, %cleanup.loopexit1, %cleanup.loopexit
  %retval.0 = phi %union.tree_node* [ %retval.0.ph, %cleanup.loopexit ], [ %call51.lcssa, %cleanup.loopexit1 ], [ %call14.lcssa, %cleanup.loopexit2 ], !dbg !4752
  call void @llvm.dbg.value(metadata i8* %is_inout, metadata !4751, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %is_inout) #6, !dbg !4789
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !4750, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %allows_reg) #6, !dbg !4789
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !4749, metadata !DIExpression(DW_OP_deref)), !dbg !4752
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %allows_mem) #6, !dbg !4789
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #6, !dbg !4789
  ret %union.tree_node* %retval.0, !dbg !4789
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_continue_control_def_ptr(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4850 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4852, metadata !DIExpression()), !dbg !4853
  %control_def = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !4854
  %0 = bitcast i32* %control_def to %union.tree_node**, !dbg !4854
  ret %union.tree_node** %0, !dbg !4855
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_continue_control_use_ptr(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4856 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4858, metadata !DIExpression()), !dbg !4859
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !4860
  ret %union.tree_node** %0, !dbg !4861
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_critical_name_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4862 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4864, metadata !DIExpression()), !dbg !4865
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !4866
  ret %union.tree_node** %0, !dbg !4867
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_for_clauses_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4868 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4870, metadata !DIExpression()), !dbg !4871
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !4872
  ret %union.tree_node** %0, !dbg !4873
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i64 @gimple_omp_for_collapse(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4874 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4878, metadata !DIExpression()), !dbg !4879
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !4880
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !4880
  %1 = load i64, i64* %0, align 8, !dbg !4880
  ret i64 %1, !dbg !4881
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_for_index_ptr(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !4882 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4886, metadata !DIExpression()), !dbg !4888
  call void @llvm.dbg.value(metadata i64 %i, metadata !4887, metadata !DIExpression()), !dbg !4888
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !4889
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !4889
  %1 = load i64, i64* %0, align 8, !dbg !4889
  %cmp = icmp ugt i64 %1, %i, !dbg !4889
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !4889

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3464, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !4889
  br label %cond.end, !dbg !4889

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !4890
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !4890
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !4890
  %index = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 1, !dbg !4891
  ret %union.tree_node** %index, !dbg !4892
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_for_initial_ptr(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !4893 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4895, metadata !DIExpression()), !dbg !4897
  call void @llvm.dbg.value(metadata i64 %i, metadata !4896, metadata !DIExpression()), !dbg !4897
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !4898
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !4898
  %1 = load i64, i64* %0, align 8, !dbg !4898
  %cmp = icmp ugt i64 %1, %i, !dbg !4898
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !4898

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3497, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !4898
  br label %cond.end, !dbg !4898

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !4899
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !4899
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !4899
  %initial = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 2, !dbg !4900
  ret %union.tree_node** %initial, !dbg !4901
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_for_final_ptr(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !4902 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4904, metadata !DIExpression()), !dbg !4906
  call void @llvm.dbg.value(metadata i64 %i, metadata !4905, metadata !DIExpression()), !dbg !4906
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !4907
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !4907
  %1 = load i64, i64* %0, align 8, !dbg !4907
  %cmp = icmp ugt i64 %1, %i, !dbg !4907
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !4907

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3530, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !4907
  br label %cond.end, !dbg !4907

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !4908
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !4908
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !4908
  %final = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 3, !dbg !4909
  ret %union.tree_node** %final, !dbg !4910
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_for_incr_ptr(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !4911 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4913, metadata !DIExpression()), !dbg !4915
  call void @llvm.dbg.value(metadata i64 %i, metadata !4914, metadata !DIExpression()), !dbg !4915
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !4916
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !4916
  %1 = load i64, i64* %0, align 8, !dbg !4916
  %cmp = icmp ugt i64 %1, %i, !dbg !4916
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !4916

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3563, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !4916
  br label %cond.end, !dbg !4916

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !4917
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !4917
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !4917
  %incr = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 4, !dbg !4918
  ret %union.tree_node** %incr, !dbg !4919
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_parallel_clauses_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4920 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4922, metadata !DIExpression()), !dbg !4923
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !4924
  ret %union.tree_node** %0, !dbg !4925
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_parallel_child_fn_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4926 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4928, metadata !DIExpression()), !dbg !4929
  %child_fn = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !4930
  %0 = bitcast [1 x %struct.phi_arg_d]* %child_fn to %union.tree_node**, !dbg !4930
  ret %union.tree_node** %0, !dbg !4931
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_parallel_data_arg_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4932 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4934, metadata !DIExpression()), !dbg !4935
  %data_arg = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !4936
  %0 = bitcast %struct.ssa_use_operand_d** %data_arg to %union.tree_node**, !dbg !4936
  ret %union.tree_node** %0, !dbg !4937
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_task_clauses_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4938 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4940, metadata !DIExpression()), !dbg !4941
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !4942
  ret %union.tree_node** %0, !dbg !4943
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_task_child_fn_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4944 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4946, metadata !DIExpression()), !dbg !4947
  %child_fn = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !4948
  %0 = bitcast [1 x %struct.phi_arg_d]* %child_fn to %union.tree_node**, !dbg !4948
  ret %union.tree_node** %0, !dbg !4949
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_task_data_arg_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4950 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4952, metadata !DIExpression()), !dbg !4953
  %data_arg = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !4954
  %0 = bitcast %struct.ssa_use_operand_d** %data_arg to %union.tree_node**, !dbg !4954
  ret %union.tree_node** %0, !dbg !4955
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_task_copy_fn_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4956 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4958, metadata !DIExpression()), !dbg !4959
  %copy_fn = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 2, !dbg !4960
  %0 = bitcast %union.anon* %copy_fn to %union.tree_node**, !dbg !4960
  ret %union.tree_node** %0, !dbg !4961
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_task_arg_size_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4962 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4964, metadata !DIExpression()), !dbg !4965
  %arg_size = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !4966
  %0 = bitcast %union.tree_node*** %arg_size to %union.tree_node**, !dbg !4966
  ret %union.tree_node** %0, !dbg !4967
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_task_arg_align_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4968 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4970, metadata !DIExpression()), !dbg !4971
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 1, !dbg !4972
  ret %union.tree_node** %0, !dbg !4973
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_sections_clauses_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4974 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4976, metadata !DIExpression()), !dbg !4977
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !4978
  ret %union.tree_node** %0, !dbg !4979
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_sections_control_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4980 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4982, metadata !DIExpression()), !dbg !4983
  %control = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !4984
  %0 = bitcast [1 x %struct.phi_arg_d]* %control to %union.tree_node**, !dbg !4984
  ret %union.tree_node** %0, !dbg !4985
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_single_clauses_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4986 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4988, metadata !DIExpression()), !dbg !4989
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !4990
  ret %union.tree_node** %0, !dbg !4991
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_atomic_load_lhs_ptr(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4992 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4994, metadata !DIExpression()), !dbg !4995
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !4996
  ret %union.tree_node** %0, !dbg !4997
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_atomic_load_rhs_ptr(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4998 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5000, metadata !DIExpression()), !dbg !5001
  %rhs = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !5002
  %0 = bitcast i32* %rhs to %union.tree_node**, !dbg !5002
  ret %union.tree_node** %0, !dbg !5003
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_omp_atomic_store_val_ptr(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5004 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5006, metadata !DIExpression()), !dbg !5007
  %val = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !5008
  %0 = bitcast i32* %val to %union.tree_node**, !dbg !5008
  ret %union.tree_node** %0, !dbg !5009
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5010 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5014, metadata !DIExpression()), !dbg !5015
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !5016
  %call1 = tail call fastcc i32 @gss_for_code(i32 %call) #8, !dbg !5017
  ret i32 %call1, !dbg !5018
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5019 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5021, metadata !DIExpression()), !dbg !5022
  %call = tail call fastcc i32 @gimple_location(%union.gimple_statement_d* %g) #8, !dbg !5023
  %cmp = icmp ne i32 %call, 0, !dbg !5024
  %conv1 = zext i1 %cmp to i8, !dbg !5023
  ret i8 %conv1, !dbg !5025
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_bind_body(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5026 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5030, metadata !DIExpression()), !dbg !5031
  %body = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5032
  %0 = bitcast [1 x %struct.phi_arg_d]* %body to %struct.gimple_seq_d**, !dbg !5032
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !5032
  ret %struct.gimple_seq_d* %1, !dbg !5033
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_catch_handler(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5034 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5036, metadata !DIExpression()), !dbg !5037
  %handler = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !5038
  %0 = bitcast %union.tree_node** %handler to %struct.gimple_seq_d**, !dbg !5038
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !5038
  ret %struct.gimple_seq_d* %1, !dbg !5039
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_eh_filter_failure(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5040 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5042, metadata !DIExpression()), !dbg !5043
  %failure = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !5044
  %0 = bitcast %union.tree_node** %failure to %struct.gimple_seq_d**, !dbg !5044
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !5044
  ret %struct.gimple_seq_d* %1, !dbg !5045
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_try_eval(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5046 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5048, metadata !DIExpression()), !dbg !5049
  %eval = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !5050
  %0 = bitcast i32* %eval to %struct.gimple_seq_d**, !dbg !5050
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !5050
  ret %struct.gimple_seq_d* %1, !dbg !5051
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_try_cleanup(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5052 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5054, metadata !DIExpression()), !dbg !5055
  %cleanup = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !5056
  %0 = bitcast %union.tree_node** %cleanup to %struct.gimple_seq_d**, !dbg !5056
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !5056
  ret %struct.gimple_seq_d* %1, !dbg !5057
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_omp_for_pre_body(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5058 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5060, metadata !DIExpression()), !dbg !5061
  %pre_body = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 2, !dbg !5062
  %0 = bitcast %union.anon* %pre_body to %struct.gimple_seq_d**, !dbg !5062
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !5062
  ret %struct.gimple_seq_d* %1, !dbg !5063
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_omp_body(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5064 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5066, metadata !DIExpression()), !dbg !5067
  %body = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !5068
  %0 = bitcast i32* %body to %struct.gimple_seq_d**, !dbg !5068
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !5068
  ret %struct.gimple_seq_d* %1, !dbg !5069
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @gimple_wce_cleanup(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5070 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5072, metadata !DIExpression()), !dbg !5073
  %cleanup = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !5074
  %0 = bitcast i32* %cleanup to %struct.gimple_seq_d**, !dbg !5074
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %0, align 8, !dbg !5074
  ret %struct.gimple_seq_d* %1, !dbg !5075
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_substatements(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5076 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5078, metadata !DIExpression()), !dbg !5079
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !5080
  switch i32 %call, label %sw.default [
    i32 10, label %return
    i32 11, label %return
    i32 12, label %return
    i32 17, label %return
    i32 23, label %return
    i32 24, label %return
    i32 25, label %return
    i32 29, label %return
    i32 26, label %return
    i32 27, label %return
    i32 30, label %return
    i32 32, label %return
    i32 22, label %return
    i32 34, label %return
  ], !dbg !5081

sw.default:                                       ; preds = %entry
  br label %return, !dbg !5082

return:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.default
  %retval.0 = phi i8 [ 0, %sw.default ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], !dbg !5084
  ret i8 %retval.0, !dbg !5085
}

; Function Attrs: nounwind uwtable
define dso_local void @gimple_set_body(%union.tree_node* %fndecl, %struct.gimple_seq_d* %seq) local_unnamed_addr #5 !dbg !5086 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %fndecl, metadata !5090, metadata !DIExpression()), !dbg !5093
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %seq, metadata !5091, metadata !DIExpression()), !dbg !5093
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %fndecl, i64 0, i32 0, i32 1, !dbg !5094
  %0 = load %struct.function*, %struct.function** %f, align 8, !dbg !5094
  call void @llvm.dbg.value(metadata %struct.function* %0, metadata !5092, metadata !DIExpression()), !dbg !5093
  %cmp = icmp eq %struct.function* %0, null, !dbg !5095
  br i1 %cmp, label %if.then, label %if.else, !dbg !5097

if.then:                                          ; preds = %entry
  %cmp1 = icmp eq %struct.gimple_seq_d* %seq, null, !dbg !5098
  br i1 %cmp1, label %if.end, label %cond.true, !dbg !5098

cond.true:                                        ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1690, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5098
  br label %if.end, !dbg !5098

if.else:                                          ; preds = %entry
  %gimple_body = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 2, !dbg !5100
  store %struct.gimple_seq_d* %seq, %struct.gimple_seq_d** %gimple_body, align 8, !dbg !5101
  br label %if.end

if.end:                                           ; preds = %cond.true, %if.then, %if.else
  ret void, !dbg !5102
}

; Function Attrs: nounwind uwtable
define dso_local %struct.gimple_seq_d* @gimple_body(%union.tree_node* %fndecl) local_unnamed_addr #5 !dbg !5103 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %fndecl, metadata !5107, metadata !DIExpression()), !dbg !5109
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %fndecl, i64 0, i32 0, i32 1, !dbg !5110
  %0 = load %struct.function*, %struct.function** %f, align 8, !dbg !5110
  call void @llvm.dbg.value(metadata %struct.function* %0, metadata !5108, metadata !DIExpression()), !dbg !5109
  %tobool = icmp eq %struct.function* %0, null, !dbg !5111
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5111

cond.true:                                        ; preds = %entry
  %gimple_body = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 2, !dbg !5112
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %gimple_body, align 8, !dbg !5112
  br label %cond.end, !dbg !5111

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %1, %cond.true ], [ null, %entry ], !dbg !5111
  ret %struct.gimple_seq_d* %cond, !dbg !5113
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_has_body_p(%union.tree_node* %fndecl) local_unnamed_addr #5 !dbg !5114 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %fndecl, metadata !5116, metadata !DIExpression()), !dbg !5118
  %f = getelementptr inbounds %union.tree_node, %union.tree_node* %fndecl, i64 0, i32 0, i32 1, !dbg !5119
  %0 = load %struct.function*, %struct.function** %f, align 8, !dbg !5119
  call void @llvm.dbg.value(metadata %struct.function* %0, metadata !5117, metadata !DIExpression()), !dbg !5118
  %call = tail call %struct.gimple_seq_d* @gimple_body(%union.tree_node* %fndecl) #8, !dbg !5120
  %tobool = icmp eq %struct.gimple_seq_d* %call, null, !dbg !5120
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !5121

lor.rhs:                                          ; preds = %entry
  %tobool1 = icmp eq %struct.function* %0, null, !dbg !5122
  br i1 %tobool1, label %lor.end, label %land.rhs, !dbg !5123

land.rhs:                                         ; preds = %lor.rhs
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !5124
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5124
  %tobool2 = icmp ne %struct.control_flow_graph* %1, null, !dbg !5123
  %phitmp = zext i1 %tobool2 to i8
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry, %land.rhs
  %2 = phi i8 [ 1, %entry ], [ 0, %lor.rhs ], [ %phitmp, %land.rhs ]
  ret i8 %2, !dbg !5125
}

; Function Attrs: nounwind uwtable
define dso_local i32 @gimple_call_flags(%union.gimple_statement_d* %stmt) local_unnamed_addr #5 !dbg !5126 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5130, metadata !DIExpression()), !dbg !5134
  %call = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %stmt) #8, !dbg !5135
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5132, metadata !DIExpression()), !dbg !5134
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !5136
  br i1 %tobool, label %if.else, label %if.then, !dbg !5138

if.then:                                          ; preds = %entry
  %call1 = tail call i32 @flags_from_decl_or_type(%union.tree_node* nonnull %call) #7, !dbg !5139
  call void @llvm.dbg.value(metadata i32 %call1, metadata !5131, metadata !DIExpression()), !dbg !5134
  br label %if.end9, !dbg !5140

if.else:                                          ; preds = %entry
  %call2 = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %stmt) #8, !dbg !5141
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5141
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5141
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !5133, metadata !DIExpression()), !dbg !5134
  %tobool3 = icmp eq %union.tree_node* %0, null, !dbg !5143
  br i1 %tobool3, label %if.end9, label %land.lhs.true, !dbg !5145

land.lhs.true:                                    ; preds = %if.else
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5146
  %bf.load = load i64, i64* %1, align 8, !dbg !5146
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5147
  %cmp = icmp eq i64 %bf.cast1, 10, !dbg !5147
  br i1 %cmp, label %if.then4, label %if.end9, !dbg !5148

if.then4:                                         ; preds = %land.lhs.true
  %type6 = getelementptr inbounds %union.tree_node, %union.tree_node* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5149
  %2 = load %union.tree_node*, %union.tree_node** %type6, align 8, !dbg !5149
  %call7 = tail call i32 @flags_from_decl_or_type(%union.tree_node* %2) #7, !dbg !5150
  call void @llvm.dbg.value(metadata i32 %call7, metadata !5131, metadata !DIExpression()), !dbg !5134
  br label %if.end9, !dbg !5151

if.end9:                                          ; preds = %if.else, %if.then4, %land.lhs.true, %if.then
  %flags.1 = phi i32 [ %call1, %if.then ], [ %call7, %if.then4 ], [ 0, %land.lhs.true ], [ 0, %if.else ], !dbg !5152
  call void @llvm.dbg.value(metadata i32 %flags.1, metadata !5131, metadata !DIExpression()), !dbg !5134
  ret i32 %flags.1, !dbg !5153
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5154 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5156, metadata !DIExpression()), !dbg !5158
  %call = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #8, !dbg !5159
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5157, metadata !DIExpression()), !dbg !5158
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5160
  %bf.load = load i64, i64* %0, align 8, !dbg !5160
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5162
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !5162
  br i1 %cmp, label %if.then, label %cleanup, !dbg !5163

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !5164
  %1 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !5164
  br label %cleanup, !dbg !5165

cleanup:                                          ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %1, %if.then ], [ null, %entry ], !dbg !5158
  ret %union.tree_node* %retval.0, !dbg !5166
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5167 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5169, metadata !DIExpression()), !dbg !5170
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #8, !dbg !5171
  ret %union.tree_node* %call, !dbg !5172
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_assign_copy_p(%union.gimple_statement_d* %gs) local_unnamed_addr #5 !dbg !5173 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5175, metadata !DIExpression()), !dbg !5176
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !5177
  %cmp = icmp eq i32 %call, 6, !dbg !5178
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !5179

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #8, !dbg !5180
  %call2 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call1) #8, !dbg !5181
  %cmp3 = icmp eq i32 %call2, 3, !dbg !5182
  br i1 %cmp3, label %land.rhs, label %land.end, !dbg !5183

land.rhs:                                         ; preds = %land.lhs.true
  %call4 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #8, !dbg !5184
  %call5 = tail call zeroext i8 @is_gimple_val(%union.tree_node* %call4) #8, !dbg !5185
  %tobool = icmp ne i8 %call5, 0, !dbg !5183
  %phitmp = zext i1 %tobool to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %0 = phi i8 [ 0, %land.lhs.true ], [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !5186
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5187 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5191, metadata !DIExpression()), !dbg !5193
  %call = tail call fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %gs) #8, !dbg !5194
  call void @llvm.dbg.value(metadata i32 %call, metadata !5192, metadata !DIExpression()), !dbg !5193
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #8, !dbg !5195
  %cmp = icmp eq i32 %call1, 3, !dbg !5197
  br i1 %cmp, label %if.then, label %if.end, !dbg !5198

if.then:                                          ; preds = %entry
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #8, !dbg !5199
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5199
  %bf.load = load i64, i64* %0, align 8, !dbg !5199
  %1 = trunc i64 %bf.load to i32, !dbg !5199
  %bf.cast = and i32 %1, 65535, !dbg !5199
  call void @llvm.dbg.value(metadata i32 %bf.cast, metadata !5192, metadata !DIExpression()), !dbg !5193
  br label %if.end, !dbg !5200

if.end:                                           ; preds = %if.then, %entry
  %code.0 = phi i32 [ %bf.cast, %if.then ], [ %call, %entry ], !dbg !5193
  call void @llvm.dbg.value(metadata i32 %code.0, metadata !5192, metadata !DIExpression()), !dbg !5193
  ret i32 %code.0, !dbg !5201
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_val(%union.tree_node* %t) local_unnamed_addr #5 !dbg !5202 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !5204, metadata !DIExpression()), !dbg !5205
  %call = tail call zeroext i8 @is_gimple_variable(%union.tree_node* %t) #8, !dbg !5206
  %tobool = icmp eq i8 %call, 0, !dbg !5206
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !5208

land.lhs.true:                                    ; preds = %entry
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5209
  %0 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5209
  %call1 = tail call zeroext i8 @is_gimple_reg_type(%union.tree_node* %0) #8, !dbg !5210
  %tobool3 = icmp eq i8 %call1, 0, !dbg !5210
  br i1 %tobool3, label %if.end, label %land.lhs.true4, !dbg !5211

land.lhs.true4:                                   ; preds = %land.lhs.true
  %call5 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %t) #8, !dbg !5212
  %tobool6 = icmp eq i8 %call5, 0, !dbg !5212
  br i1 %tobool6, label %return, label %if.end, !dbg !5213

if.end:                                           ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %call7 = tail call zeroext i8 @is_gimple_variable(%union.tree_node* %t) #8, !dbg !5214
  %tobool9 = icmp eq i8 %call7, 0, !dbg !5214
  br i1 %tobool9, label %lor.rhs, label %lor.end, !dbg !5215

lor.rhs:                                          ; preds = %if.end
  %call10 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %t) #8, !dbg !5216
  %tobool12 = icmp ne i8 %call10, 0, !dbg !5215
  %phitmp = zext i1 %tobool12 to i8, !dbg !5215
  br label %lor.end, !dbg !5215

lor.end:                                          ; preds = %if.end, %lor.rhs
  %1 = phi i8 [ 1, %if.end ], [ %phitmp, %lor.rhs ]
  br label %return, !dbg !5217

return:                                           ; preds = %land.lhs.true4, %lor.end
  %retval.0 = phi i8 [ %1, %lor.end ], [ 0, %land.lhs.true4 ], !dbg !5205
  ret i8 %retval.0, !dbg !5218
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !5219 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5223, metadata !DIExpression()), !dbg !5225
  call void @llvm.dbg.value(metadata i32 %i, metadata !5224, metadata !DIExpression()), !dbg !5225
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #8, !dbg !5226
  %tobool = icmp eq i8 %call, 0, !dbg !5226
  br i1 %tobool, label %return, label %if.then, !dbg !5228

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #8, !dbg !5229
  %idxprom = zext i32 %i to i64, !dbg !5229
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !5229
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5229
  br label %return, !dbg !5231

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %0, %if.then ], [ null, %entry ], !dbg !5232
  ret %union.tree_node* %retval.0, !dbg !5233
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_assign_ssa_name_copy_p(%union.gimple_statement_d* %gs) local_unnamed_addr #5 !dbg !5234 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5236, metadata !DIExpression()), !dbg !5237
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !5238
  %cmp = icmp eq i32 %call, 6, !dbg !5239
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !5240

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #8, !dbg !5241
  %call2 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call1) #8, !dbg !5242
  %cmp3 = icmp eq i32 %call2, 3, !dbg !5243
  br i1 %cmp3, label %land.lhs.true4, label %land.end, !dbg !5244

land.lhs.true4:                                   ; preds = %land.lhs.true
  %call5 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #8, !dbg !5245
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5245
  %bf.load = load i64, i64* %0, align 8, !dbg !5245
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5246
  %cmp6 = icmp eq i64 %bf.cast1, 141, !dbg !5246
  br i1 %cmp6, label %land.rhs, label %land.end, !dbg !5247

land.rhs:                                         ; preds = %land.lhs.true4
  %call7 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #8, !dbg !5248
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5248
  %bf.load9 = load i64, i64* %1, align 8, !dbg !5248
  %bf.cast112 = and i64 %bf.load9, 65535, !dbg !5249
  %cmp12 = icmp eq i64 %bf.cast112, 141, !dbg !5249
  %phitmp = zext i1 %cmp12 to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true4, %land.lhs.true, %entry
  %2 = phi i8 [ 0, %land.lhs.true4 ], [ 0, %land.lhs.true ], [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %2, !dbg !5250
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_assign_unary_nop_p(%union.gimple_statement_d* %gs) local_unnamed_addr #5 !dbg !5251 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5253, metadata !DIExpression()), !dbg !5254
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !5255
  %cmp = icmp eq i32 %call, 6, !dbg !5256
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !5257

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #8, !dbg !5258
  %cmp2 = icmp eq i32 %call1, 116, !dbg !5258
  br i1 %cmp2, label %land.lhs.true8, label %lor.lhs.false, !dbg !5258

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call3 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #8, !dbg !5258
  %cmp4 = icmp eq i32 %call3, 113, !dbg !5258
  br i1 %cmp4, label %land.lhs.true8, label %lor.lhs.false5, !dbg !5259

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %call6 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) #8, !dbg !5260
  %cmp7 = icmp eq i32 %call6, 117, !dbg !5261
  br i1 %cmp7, label %land.lhs.true8, label %land.end, !dbg !5262

land.lhs.true8:                                   ; preds = %lor.lhs.false5, %lor.lhs.false, %land.lhs.true
  %call9 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #8, !dbg !5263
  %0 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5264
  %cmp10 = icmp eq %union.tree_node* %call9, %0, !dbg !5265
  br i1 %cmp10, label %land.end, label %land.rhs, !dbg !5266

land.rhs:                                         ; preds = %land.lhs.true8
  %call11 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #8, !dbg !5267
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5267
  %1 = bitcast %union.tree_node** %type to i64**, !dbg !5267
  %2 = load i64*, i64** %1, align 8, !dbg !5267
  %bf.load = load i64, i64* %2, align 8, !dbg !5267
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5267
  %cmp12 = icmp eq i64 %bf.cast1, 14, !dbg !5267
  %call13 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) #8, !dbg !5267
  %type15 = getelementptr inbounds %union.tree_node, %union.tree_node* %call13, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5267
  %3 = load %union.tree_node*, %union.tree_node** %type15, align 8, !dbg !5267
  br i1 %cmp12, label %cond.true, label %cond.false, !dbg !5267

cond.true:                                        ; preds = %land.rhs
  %call16 = tail call i32 @vector_type_mode(%union.tree_node* %3) #7, !dbg !5267
  br label %cond.end, !dbg !5267

cond.false:                                       ; preds = %land.rhs
  %type20 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5267
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type20, i64 0, i32 6, !dbg !5267
  %bf.load21 = load i32, i32* %mode, align 4, !dbg !5267
  %bf.lshr = lshr i32 %bf.load21, 16, !dbg !5267
  %bf.clear22 = and i32 %bf.lshr, 255, !dbg !5267
  br label %cond.end, !dbg !5267

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call16, %cond.true ], [ %bf.clear22, %cond.false ], !dbg !5267
  %call23 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #8, !dbg !5268
  %type25 = getelementptr inbounds %union.tree_node, %union.tree_node* %call23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5268
  %4 = bitcast %union.tree_node** %type25 to i64**, !dbg !5268
  %5 = load i64*, i64** %4, align 8, !dbg !5268
  %bf.load27 = load i64, i64* %5, align 8, !dbg !5268
  %bf.cast292 = and i64 %bf.load27, 65535, !dbg !5268
  %cmp30 = icmp eq i64 %bf.cast292, 14, !dbg !5268
  %call32 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #8, !dbg !5268
  %type34 = getelementptr inbounds %union.tree_node, %union.tree_node* %call32, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5268
  %6 = load %union.tree_node*, %union.tree_node** %type34, align 8, !dbg !5268
  br i1 %cmp30, label %cond.true31, label %cond.false36, !dbg !5268

cond.true31:                                      ; preds = %cond.end
  %call35 = tail call i32 @vector_type_mode(%union.tree_node* %6) #7, !dbg !5268
  br label %cond.end45, !dbg !5268

cond.false36:                                     ; preds = %cond.end
  %type40 = bitcast %union.tree_node* %6 to %struct.tree_type*, !dbg !5268
  %mode41 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type40, i64 0, i32 6, !dbg !5268
  %bf.load42 = load i32, i32* %mode41, align 4, !dbg !5268
  %bf.lshr43 = lshr i32 %bf.load42, 16, !dbg !5268
  %bf.clear44 = and i32 %bf.lshr43, 255, !dbg !5268
  br label %cond.end45, !dbg !5268

cond.end45:                                       ; preds = %cond.false36, %cond.true31
  %cond46 = phi i32 [ %call35, %cond.true31 ], [ %bf.clear44, %cond.false36 ], !dbg !5268
  %cmp47 = icmp eq i32 %cond, %cond46, !dbg !5269
  %phitmp = zext i1 %cmp47 to i8
  br label %land.end

land.end:                                         ; preds = %land.lhs.true8, %cond.end45, %lor.lhs.false5, %entry
  %7 = phi i8 [ 0, %land.lhs.true8 ], [ 0, %lor.lhs.false5 ], [ 0, %entry ], [ %phitmp, %cond.end45 ]
  ret i8 %7, !dbg !5270
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @gimple_set_bb(%union.gimple_statement_d* %stmt, %struct.basic_block_def* %bb) local_unnamed_addr #5 !dbg !5271 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5275, metadata !DIExpression()), !dbg !5287
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !5276, metadata !DIExpression()), !dbg !5287
  %bb1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 4, !dbg !5288
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb1, align 8, !dbg !5289
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5290
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !5291
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5291
  %tobool = icmp eq %struct.control_flow_graph* %1, null, !dbg !5290
  br i1 %tobool, label %if.end35, label %land.lhs.true, !dbg !5292

land.lhs.true:                                    ; preds = %entry
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !5293
  %cmp = icmp eq i32 %call, 4, !dbg !5294
  br i1 %cmp, label %if.then, label %if.end35, !dbg !5295

if.then:                                          ; preds = %land.lhs.true
  %call2 = tail call fastcc %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %stmt) #8, !dbg !5296
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !5277, metadata !DIExpression()), !dbg !5297
  %label_decl_uid = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !5298
  %2 = bitcast %union.tree_node** %label_decl_uid to i32*, !dbg !5298
  %3 = load i32, i32* %2, align 8, !dbg !5298
  call void @llvm.dbg.value(metadata i32 %3, metadata !5280, metadata !DIExpression()), !dbg !5297
  %cmp3 = icmp eq i32 %3, -1, !dbg !5299
  br i1 %cmp3, label %if.then4, label %if.end21, !dbg !5300

if.then4:                                         ; preds = %if.then
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5301
  %cfg6 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, i32 1, !dbg !5301
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg6, align 8, !dbg !5301
  %x_label_to_block_map = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i64 0, i32 6, !dbg !5301
  %6 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map, align 8, !dbg !5301
  %tobool7 = icmp eq %struct.VEC_basic_block_gc* %6, null, !dbg !5301
  br i1 %tobool7, label %cond.end, label %cond.true, !dbg !5301

cond.true:                                        ; preds = %if.then4
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %6, i64 0, i32 0, !dbg !5301
  br label %cond.end, !dbg !5301

cond.end:                                         ; preds = %if.then4, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %if.then4 ], !dbg !5301
  %call11 = tail call fastcc i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond) #8, !dbg !5301
  call void @llvm.dbg.value(metadata i32 %call11, metadata !5281, metadata !DIExpression()), !dbg !5302
  %7 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5303
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %7, i64 0, i32 1, !dbg !5304
  %8 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !5304
  %last_label_uid = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %8, i64 0, i32 11, !dbg !5305
  %9 = load i32, i32* %last_label_uid, align 8, !dbg !5306
  %inc = add nsw i32 %9, 1, !dbg !5306
  store i32 %inc, i32* %last_label_uid, align 8, !dbg !5306
  call void @llvm.dbg.value(metadata i32 %9, metadata !5280, metadata !DIExpression()), !dbg !5297
  store i32 %9, i32* %2, align 8, !dbg !5307
  %cmp16 = icmp ugt i32 %call11, %9, !dbg !5308
  br i1 %cmp16, label %if.end21, label %if.then17, !dbg !5309

if.then17:                                        ; preds = %cond.end
  %mul = mul nsw i32 %9, 3, !dbg !5310
  %div = sdiv i32 %mul, 2, !dbg !5311
  %add = add nsw i32 %div, 1, !dbg !5312
  call void @llvm.dbg.value(metadata i32 %add, metadata !5284, metadata !DIExpression()), !dbg !5313
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !5314
  %x_label_to_block_map20 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i64 0, i32 6, !dbg !5314
  tail call fastcc void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** nonnull %x_label_to_block_map20, i32 %add) #8, !dbg !5314
  br label %if.end21, !dbg !5315

if.end21:                                         ; preds = %cond.end, %if.then17, %if.then
  %uid.0 = phi i32 [ %3, %if.then ], [ %9, %if.then17 ], [ %9, %cond.end ], !dbg !5297
  call void @llvm.dbg.value(metadata i32 %uid.0, metadata !5280, metadata !DIExpression()), !dbg !5297
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5316
  %cfg23 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, i32 1, !dbg !5316
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg23, align 8, !dbg !5316
  %x_label_to_block_map24 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i64 0, i32 6, !dbg !5316
  %13 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_label_to_block_map24, align 8, !dbg !5316
  %tobool25 = icmp eq %struct.VEC_basic_block_gc* %13, null, !dbg !5316
  br i1 %tobool25, label %cond.end32, label %cond.true26, !dbg !5316

cond.true26:                                      ; preds = %if.end21
  %base30 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %13, i64 0, i32 0, !dbg !5316
  br label %cond.end32, !dbg !5316

cond.end32:                                       ; preds = %if.end21, %cond.true26
  %cond33 = phi %struct.VEC_basic_block_base* [ %base30, %cond.true26 ], [ null, %if.end21 ], !dbg !5316
  %call34 = tail call fastcc %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %cond33, i32 %uid.0, %struct.basic_block_def* %bb) #8, !dbg !5316
  br label %if.end35, !dbg !5317

if.end35:                                         ; preds = %entry, %cond.end32, %land.lhs.true
  ret void, !dbg !5318
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_label_label(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5319 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5321, metadata !DIExpression()), !dbg !5322
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #8, !dbg !5323
  ret %union.tree_node* %call, !dbg !5324
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) unnamed_addr #0 !dbg !5325 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_basic_block_base* %vec_, metadata !5331, metadata !DIExpression()), !dbg !5332
  %tobool = icmp eq %struct.VEC_basic_block_base* %vec_, null, !dbg !5333
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5333

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %vec_, i64 0, i32 0, !dbg !5333
  %0 = load i32, i32* %num, align 8, !dbg !5333
  br label %cond.end, !dbg !5333

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !5333
  ret i32 %cond, !dbg !5333
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_basic_block_gc_safe_grow_cleared(%struct.VEC_basic_block_gc** %vec_, i32 %size_) unnamed_addr #0 !dbg !5334 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_basic_block_gc** %vec_, metadata !5339, metadata !DIExpression()), !dbg !5342
  call void @llvm.dbg.value(metadata i32 %size_, metadata !5340, metadata !DIExpression()), !dbg !5342
  %0 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %vec_, align 8, !dbg !5343
  %tobool = icmp eq %struct.VEC_basic_block_gc* %0, null, !dbg !5343
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5343

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %0, i64 0, i32 0, !dbg !5343
  br label %cond.end, !dbg !5343

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %entry ], !dbg !5343
  %call = tail call fastcc i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond) #8, !dbg !5343
  call void @llvm.dbg.value(metadata i32 %call, metadata !5341, metadata !DIExpression()), !dbg !5342
  tail call fastcc void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %vec_, i32 %size_) #8, !dbg !5343
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %vec_, align 8, !dbg !5343
  %tobool1 = icmp eq %struct.VEC_basic_block_gc* %1, null, !dbg !5343
  br i1 %tobool1, label %cond.end5, label %cond.true2, !dbg !5343

cond.true2:                                       ; preds = %cond.end
  %base3 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %1, i64 0, i32 0, !dbg !5343
  br label %cond.end5, !dbg !5343

cond.end5:                                        ; preds = %cond.end, %cond.true2
  %cond6 = phi %struct.VEC_basic_block_base* [ %base3, %cond.true2 ], [ null, %cond.end ], !dbg !5343
  %call7 = tail call fastcc %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %cond6) #8, !dbg !5343
  %idxprom = sext i32 %call to i64, !dbg !5343
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %call7, i64 %idxprom, !dbg !5343
  %2 = bitcast %struct.basic_block_def** %arrayidx to i8*, !dbg !5343
  %sub = sub nsw i32 %size_, %call, !dbg !5343
  %conv = sext i32 %sub to i64, !dbg !5343
  %mul = shl nsw i64 %conv, 3, !dbg !5343
  %call8 = tail call i8* @memset(i8* %2, i32 0, i64 %mul) #7, !dbg !5343
  ret void, !dbg !5343
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @VEC_basic_block_base_replace(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def* %obj_) unnamed_addr #0 !dbg !5344 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_basic_block_base* %vec_, metadata !5349, metadata !DIExpression()), !dbg !5353
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !5350, metadata !DIExpression()), !dbg !5353
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %obj_, metadata !5351, metadata !DIExpression()), !dbg !5353
  %idxprom = zext i32 %ix_ to i64, !dbg !5354
  %arrayidx = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !5354
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5354
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %0, metadata !5352, metadata !DIExpression()), !dbg !5353
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %arrayidx, align 8, !dbg !5354
  ret %struct.basic_block_def* %0, !dbg !5354
}

; Function Attrs: nounwind uwtable
define dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %expr) local_unnamed_addr #5 !dbg !5355 {
entry:
  %subcode = alloca i32, align 4
  %op1 = alloca %union.tree_node*, align 8
  %op2 = alloca %union.tree_node*, align 8
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5359, metadata !DIExpression()), !dbg !5364
  call void @llvm.dbg.value(metadata %union.tree_node* %expr, metadata !5360, metadata !DIExpression()), !dbg !5364
  %0 = bitcast i32* %subcode to i8*, !dbg !5365
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #6, !dbg !5365
  %1 = bitcast %union.tree_node** %op1 to i8*, !dbg !5366
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #6, !dbg !5366
  %2 = bitcast %union.tree_node** %op2 to i8*, !dbg !5366
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #6, !dbg !5366
  call void @llvm.dbg.value(metadata i32* %subcode, metadata !5361, metadata !DIExpression(DW_OP_deref)), !dbg !5364
  call void @llvm.dbg.value(metadata %union.tree_node** %op1, metadata !5362, metadata !DIExpression(DW_OP_deref)), !dbg !5364
  call void @llvm.dbg.value(metadata %union.tree_node** %op2, metadata !5363, metadata !DIExpression(DW_OP_deref)), !dbg !5364
  call void @extract_ops_from_tree(%union.tree_node* %expr, i32* nonnull %subcode, %union.tree_node** nonnull %op1, %union.tree_node** nonnull %op2) #8, !dbg !5367
  %3 = load i32, i32* %subcode, align 4, !dbg !5368
  call void @llvm.dbg.value(metadata i32 %3, metadata !5361, metadata !DIExpression()), !dbg !5364
  %4 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5369
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !5362, metadata !DIExpression()), !dbg !5364
  %5 = load %union.tree_node*, %union.tree_node** %op2, align 8, !dbg !5370
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !5363, metadata !DIExpression()), !dbg !5364
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %gsi, i32 %3, %union.tree_node* %4, %union.tree_node* %5) #8, !dbg !5371
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #6, !dbg !5372
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #6, !dbg !5372
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #6, !dbg !5372
  ret void, !dbg !5372
}

; Function Attrs: nounwind uwtable
define dso_local void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %gsi, i32 %code, %union.tree_node* %op1, %union.tree_node* %op2) local_unnamed_addr #5 !dbg !5373 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5377, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %code, metadata !5378, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !5379, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %op2, metadata !5380, metadata !DIExpression()), !dbg !5387
  %call = tail call i32 @get_gimple_rhs_num_ops(i32 %code) #8, !dbg !5388
  call void @llvm.dbg.value(metadata i32 %call, metadata !5381, metadata !DIExpression()), !dbg !5387
  %call1 = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !5389
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call1, metadata !5382, metadata !DIExpression()), !dbg !5387
  %call2 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %call1) #8, !dbg !5390
  %add = add i32 %call, 1, !dbg !5391
  %cmp = icmp ult i32 %call2, %add, !dbg !5392
  br i1 %cmp, label %if.then, label %if.end, !dbg !5393

if.then:                                          ; preds = %entry
  %call3 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %call1) #8, !dbg !5394
  call void @llvm.dbg.value(metadata %union.tree_node* %call3, metadata !5383, metadata !DIExpression()), !dbg !5395
  %call4 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call1) #8, !dbg !5396
  %call6 = tail call %union.gimple_statement_d* @gimple_alloc_stat(i32 %call4, i32 %add) #8, !dbg !5396
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call6, metadata !5386, metadata !DIExpression()), !dbg !5395
  %0 = bitcast %union.gimple_statement_d* %call6 to i8*, !dbg !5397
  %1 = bitcast %union.gimple_statement_d* %call1 to i8*, !dbg !5398
  %call7 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call1) #8, !dbg !5399
  %call8 = tail call fastcc i64 @gimple_size(i32 %call7) #8, !dbg !5400
  %call9 = tail call i8* @memcpy(i8* %0, i8* %1, i64 %call8) #7, !dbg !5401
  tail call void @gsi_replace(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %call6, i8 zeroext 1) #7, !dbg !5402
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call6, metadata !5382, metadata !DIExpression()), !dbg !5387
  tail call fastcc void @gimple_assign_set_lhs(%union.gimple_statement_d* %call6, %union.tree_node* %call3) #8, !dbg !5403
  br label %if.end, !dbg !5404

if.end:                                           ; preds = %if.then, %entry
  %stmt.0 = phi %union.gimple_statement_d* [ %call6, %if.then ], [ %call1, %entry ], !dbg !5387
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt.0, metadata !5382, metadata !DIExpression()), !dbg !5387
  tail call fastcc void @gimple_set_num_ops(%union.gimple_statement_d* %stmt.0, i32 %add) #8, !dbg !5405
  tail call fastcc void @gimple_set_subcode(%union.gimple_statement_d* %stmt.0, i32 %code) #8, !dbg !5406
  tail call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %stmt.0, %union.tree_node* %op1) #8, !dbg !5407
  %cmp11 = icmp ugt i32 %call, 1, !dbg !5408
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !5410

if.then12:                                        ; preds = %if.end
  tail call fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %stmt.0, %union.tree_node* %op2) #8, !dbg !5411
  br label %if.end13, !dbg !5411

if.end13:                                         ; preds = %if.then12, %if.end
  ret void, !dbg !5412
}

declare dso_local i8* @memcpy(i8*, i8*, i64) local_unnamed_addr #2

declare dso_local void @gsi_replace(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i8 zeroext) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %stmt) local_unnamed_addr #5 !dbg !5413 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5415, metadata !DIExpression()), !dbg !5417
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !5418
  call void @llvm.dbg.value(metadata i32 %call, metadata !5416, metadata !DIExpression()), !dbg !5417
  switch i32 %call, label %cleanup [
    i32 6, label %if.then
    i32 8, label %if.then3
  ], !dbg !5419

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !5420
  br label %cleanup, !dbg !5422

if.then3:                                         ; preds = %entry
  %call4 = tail call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !5423
  br label %cleanup, !dbg !5425

cleanup:                                          ; preds = %entry, %if.then3, %if.then
  %retval.0 = phi %union.tree_node* [ %call1, %if.then ], [ %call4, %if.then3 ], [ null, %entry ], !dbg !5426
  ret %union.tree_node* %retval.0, !dbg !5427
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5428 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5430, metadata !DIExpression()), !dbg !5431
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #8, !dbg !5432
  ret %union.tree_node* %call, !dbg !5433
}

; Function Attrs: nounwind uwtable
define dso_local void @gimple_set_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %lhs) local_unnamed_addr #5 !dbg !5434 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5436, metadata !DIExpression()), !dbg !5439
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !5437, metadata !DIExpression()), !dbg !5439
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !5440
  call void @llvm.dbg.value(metadata i32 %call, metadata !5438, metadata !DIExpression()), !dbg !5439
  switch i32 %call, label %if.else3 [
    i32 6, label %if.then
    i32 8, label %if.then2
  ], !dbg !5441

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_assign_set_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %lhs) #8, !dbg !5442
  br label %if.end4, !dbg !5442

if.then2:                                         ; preds = %entry
  tail call fastcc void @gimple_call_set_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %lhs) #8, !dbg !5444
  br label %if.end4, !dbg !5444

if.else3:                                         ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1933, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5446
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.else3, %if.then
  ret void, !dbg !5447
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) unnamed_addr #0 !dbg !5448 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5450, metadata !DIExpression()), !dbg !5452
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !5451, metadata !DIExpression()), !dbg !5452
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %lhs) #8, !dbg !5453
  %tobool = icmp eq %union.tree_node* %lhs, null, !dbg !5454
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !5456

land.lhs.true:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5457
  %bf.load = load i64, i64* %0, align 8, !dbg !5457
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5458
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !5458
  br i1 %cmp, label %if.then, label %if.end, !dbg !5459

if.then:                                          ; preds = %land.lhs.true
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5460
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !5460
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %1, align 8, !dbg !5461
  br label %if.end, !dbg !5460

if.end:                                           ; preds = %entry, %if.then, %land.lhs.true
  ret void, !dbg !5462
}

; Function Attrs: nounwind uwtable
define dso_local void @gimple_replace_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %nlhs) local_unnamed_addr #5 !dbg !5463 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5465, metadata !DIExpression()), !dbg !5470
  call void @llvm.dbg.value(metadata %union.tree_node* %nlhs, metadata !5466, metadata !DIExpression()), !dbg !5470
  %0 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !5471
  %tobool = icmp eq i32 %0, 0, !dbg !5471
  br i1 %tobool, label %if.end, label %if.then, !dbg !5472

if.then:                                          ; preds = %entry
  %call = tail call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !5473
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5467, metadata !DIExpression()), !dbg !5474
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5475
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !5475
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %1, align 8, !dbg !5475
  %cmp = icmp eq %union.gimple_statement_d* %2, %stmt, !dbg !5475
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5475

cond.true:                                        ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 1962, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5475
  br label %cond.end, !dbg !5475

cond.end:                                         ; preds = %if.then, %cond.true
  tail call void @insert_debug_temp_for_var_def(%struct.gimple_stmt_iterator* null, %union.tree_node* %call) #7, !dbg !5476
  br label %if.end, !dbg !5477

if.end:                                           ; preds = %entry, %cond.end
  tail call void @gimple_set_lhs(%union.gimple_statement_d* %stmt, %union.tree_node* %nlhs) #8, !dbg !5478
  ret void, !dbg !5479
}

declare dso_local void @insert_debug_temp_for_var_def(%struct.gimple_stmt_iterator*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @unshare_expr(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_bind_vars(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5480 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5482, metadata !DIExpression()), !dbg !5483
  %vars = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !5484
  %0 = bitcast i32* %vars to %union.tree_node**, !dbg !5484
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5484
  ret %union.tree_node* %1, !dbg !5485
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_bind_block(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5486 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5488, metadata !DIExpression()), !dbg !5489
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !5490
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5490
  ret %union.tree_node* %1, !dbg !5491
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_catch_types(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5492 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5494, metadata !DIExpression()), !dbg !5495
  %types = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !5496
  %0 = bitcast i32* %types to %union.tree_node**, !dbg !5496
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5496
  ret %union.tree_node* %1, !dbg !5497
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_eh_filter_types(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5498 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5500, metadata !DIExpression()), !dbg !5501
  %types = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !5502
  %0 = bitcast i32* %types to %union.tree_node**, !dbg !5502
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5502
  ret %union.tree_node* %1, !dbg !5503
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_clauses(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5504 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5506, metadata !DIExpression()), !dbg !5507
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !5508
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5508
  ret %union.tree_node* %1, !dbg !5509
}

declare dso_local i8* @ggc_alloc_stat(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_cond(%union.gimple_statement_d* %gs, i64 %i, i32 %cond) unnamed_addr #0 !dbg !5510 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5514, metadata !DIExpression()), !dbg !5517
  call void @llvm.dbg.value(metadata i64 %i, metadata !5515, metadata !DIExpression()), !dbg !5517
  call void @llvm.dbg.value(metadata i32 %cond, metadata !5516, metadata !DIExpression()), !dbg !5517
  %idxprom = sext i32 %cond to i64, !dbg !5518
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5518
  %0 = load i32, i32* %arrayidx, align 4, !dbg !5518
  %cmp = icmp eq i32 %0, 5, !dbg !5518
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5518

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 4076, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5518
  br label %cond.end, !dbg !5518

cond.end:                                         ; preds = %entry, %cond.true
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5519
  %1 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5519
  %2 = load i64, i64* %1, align 8, !dbg !5519
  %cmp2 = icmp ugt i64 %2, %i, !dbg !5519
  br i1 %cmp2, label %cond.end5, label %cond.true3, !dbg !5519

cond.true3:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 4077, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5519
  br label %cond.end5, !dbg !5519

cond.end5:                                        ; preds = %cond.end, %cond.true3
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5520
  %3 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5520
  %4 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %3, align 8, !dbg !5520
  %cond9 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %4, i64 %i, i32 0, !dbg !5521
  store i32 %cond, i32* %cond9, align 8, !dbg !5522
  ret void, !dbg !5523
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_omp_for_cond(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !5524 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5528, metadata !DIExpression()), !dbg !5530
  call void @llvm.dbg.value(metadata i64 %i, metadata !5529, metadata !DIExpression()), !dbg !5530
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5531
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5531
  %1 = load i64, i64* %0, align 8, !dbg !5531
  %cmp = icmp ugt i64 %1, %i, !dbg !5531
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5531

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 4088, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5531
  br label %cond.end, !dbg !5531

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5532
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5532
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !5532
  %cond2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 0, !dbg !5533
  %4 = load i32, i32* %cond2, align 8, !dbg !5533
  ret i32 %4, !dbg !5534
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_index(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %index) unnamed_addr #0 !dbg !5535 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5539, metadata !DIExpression()), !dbg !5542
  call void @llvm.dbg.value(metadata i64 %i, metadata !5540, metadata !DIExpression()), !dbg !5542
  call void @llvm.dbg.value(metadata %union.tree_node* %index, metadata !5541, metadata !DIExpression()), !dbg !5542
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5543
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5543
  %1 = load i64, i64* %0, align 8, !dbg !5543
  %cmp = icmp ugt i64 %1, %i, !dbg !5543
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5543

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3475, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5543
  br label %cond.end, !dbg !5543

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5544
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5544
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !5544
  %index2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 1, !dbg !5545
  store %union.tree_node* %index, %union.tree_node** %index2, align 8, !dbg !5546
  ret void, !dbg !5547
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_index(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !5548 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5552, metadata !DIExpression()), !dbg !5554
  call void @llvm.dbg.value(metadata i64 %i, metadata !5553, metadata !DIExpression()), !dbg !5554
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5555
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5555
  %1 = load i64, i64* %0, align 8, !dbg !5555
  %cmp = icmp ugt i64 %1, %i, !dbg !5555
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5555

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3453, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5555
  br label %cond.end, !dbg !5555

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5556
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5556
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !5556
  %index = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 1, !dbg !5557
  %4 = load %union.tree_node*, %union.tree_node** %index, align 8, !dbg !5557
  ret %union.tree_node* %4, !dbg !5558
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_initial(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !5559 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5561, metadata !DIExpression()), !dbg !5563
  call void @llvm.dbg.value(metadata i64 %i, metadata !5562, metadata !DIExpression()), !dbg !5563
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5564
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5564
  %1 = load i64, i64* %0, align 8, !dbg !5564
  %cmp = icmp ugt i64 %1, %i, !dbg !5564
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5564

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3486, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5564
  br label %cond.end, !dbg !5564

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5565
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5565
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !5565
  %initial = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 2, !dbg !5566
  %4 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !5566
  ret %union.tree_node* %4, !dbg !5567
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_initial(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %initial) unnamed_addr #0 !dbg !5568 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5570, metadata !DIExpression()), !dbg !5573
  call void @llvm.dbg.value(metadata i64 %i, metadata !5571, metadata !DIExpression()), !dbg !5573
  call void @llvm.dbg.value(metadata %union.tree_node* %initial, metadata !5572, metadata !DIExpression()), !dbg !5573
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5574
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5574
  %1 = load i64, i64* %0, align 8, !dbg !5574
  %cmp = icmp ugt i64 %1, %i, !dbg !5574
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5574

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3508, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5574
  br label %cond.end, !dbg !5574

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5575
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5575
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !5575
  %initial2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 2, !dbg !5576
  store %union.tree_node* %initial, %union.tree_node** %initial2, align 8, !dbg !5577
  ret void, !dbg !5578
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_final(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !5579 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5581, metadata !DIExpression()), !dbg !5583
  call void @llvm.dbg.value(metadata i64 %i, metadata !5582, metadata !DIExpression()), !dbg !5583
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5584
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5584
  %1 = load i64, i64* %0, align 8, !dbg !5584
  %cmp = icmp ugt i64 %1, %i, !dbg !5584
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5584

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3519, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5584
  br label %cond.end, !dbg !5584

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5585
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5585
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !5585
  %final = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 3, !dbg !5586
  %4 = load %union.tree_node*, %union.tree_node** %final, align 8, !dbg !5586
  ret %union.tree_node* %4, !dbg !5587
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_final(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %final) unnamed_addr #0 !dbg !5588 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5590, metadata !DIExpression()), !dbg !5593
  call void @llvm.dbg.value(metadata i64 %i, metadata !5591, metadata !DIExpression()), !dbg !5593
  call void @llvm.dbg.value(metadata %union.tree_node* %final, metadata !5592, metadata !DIExpression()), !dbg !5593
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5594
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5594
  %1 = load i64, i64* %0, align 8, !dbg !5594
  %cmp = icmp ugt i64 %1, %i, !dbg !5594
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5594

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3541, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5594
  br label %cond.end, !dbg !5594

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5595
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5595
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !5595
  %final2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 3, !dbg !5596
  store %union.tree_node* %final, %union.tree_node** %final2, align 8, !dbg !5597
  ret void, !dbg !5598
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_for_incr(%union.gimple_statement_d* %gs, i64 %i) unnamed_addr #0 !dbg !5599 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5601, metadata !DIExpression()), !dbg !5603
  call void @llvm.dbg.value(metadata i64 %i, metadata !5602, metadata !DIExpression()), !dbg !5603
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5604
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5604
  %1 = load i64, i64* %0, align 8, !dbg !5604
  %cmp = icmp ugt i64 %1, %i, !dbg !5604
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5604

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3552, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5604
  br label %cond.end, !dbg !5604

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5605
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5605
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !5605
  %incr = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 4, !dbg !5606
  %4 = load %union.tree_node*, %union.tree_node** %incr, align 8, !dbg !5606
  ret %union.tree_node* %4, !dbg !5607
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_for_set_incr(%union.gimple_statement_d* %gs, i64 %i, %union.tree_node* %incr) unnamed_addr #0 !dbg !5608 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5610, metadata !DIExpression()), !dbg !5613
  call void @llvm.dbg.value(metadata i64 %i, metadata !5611, metadata !DIExpression()), !dbg !5613
  call void @llvm.dbg.value(metadata %union.tree_node* %incr, metadata !5612, metadata !DIExpression()), !dbg !5613
  %collapse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5614
  %0 = bitcast [1 x %struct.phi_arg_d]* %collapse to i64*, !dbg !5614
  %1 = load i64, i64* %0, align 8, !dbg !5614
  %cmp = icmp ugt i64 %1, %i, !dbg !5614
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5614

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3574, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5614
  br label %cond.end, !dbg !5614

cond.end:                                         ; preds = %entry, %cond.true
  %iter = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5615
  %2 = bitcast %struct.ssa_use_operand_d** %iter to %struct.gimple_omp_for_iter**, !dbg !5615
  %3 = load %struct.gimple_omp_for_iter*, %struct.gimple_omp_for_iter** %2, align 8, !dbg !5615
  %incr2 = getelementptr inbounds %struct.gimple_omp_for_iter, %struct.gimple_omp_for_iter* %3, i64 %i, i32 4, !dbg !5616
  store %union.tree_node* %incr, %union.tree_node** %incr2, align 8, !dbg !5617
  ret void, !dbg !5618
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_parallel_clauses(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5619 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5621, metadata !DIExpression()), !dbg !5622
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !5623
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5623
  ret %union.tree_node* %1, !dbg !5624
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_parallel_child_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5625 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5627, metadata !DIExpression()), !dbg !5628
  %child_fn = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5629
  %0 = bitcast [1 x %struct.phi_arg_d]* %child_fn to %union.tree_node**, !dbg !5629
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5629
  ret %union.tree_node* %1, !dbg !5630
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_parallel_data_arg(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5631 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5633, metadata !DIExpression()), !dbg !5634
  %data_arg = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5635
  %0 = bitcast %struct.ssa_use_operand_d** %data_arg to %union.tree_node**, !dbg !5635
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5635
  ret %union.tree_node* %1, !dbg !5636
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_clauses(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5637 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5639, metadata !DIExpression()), !dbg !5640
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !5641
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5641
  ret %union.tree_node* %1, !dbg !5642
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_child_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5643 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5645, metadata !DIExpression()), !dbg !5646
  %child_fn = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5647
  %0 = bitcast [1 x %struct.phi_arg_d]* %child_fn to %union.tree_node**, !dbg !5647
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5647
  ret %union.tree_node* %1, !dbg !5648
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_data_arg(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5649 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5651, metadata !DIExpression()), !dbg !5652
  %data_arg = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5653
  %0 = bitcast %struct.ssa_use_operand_d** %data_arg to %union.tree_node**, !dbg !5653
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5653
  ret %union.tree_node* %1, !dbg !5654
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_copy_fn(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5655 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5657, metadata !DIExpression()), !dbg !5658
  %copy_fn = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 2, !dbg !5659
  %0 = bitcast %union.anon* %copy_fn to %union.tree_node**, !dbg !5659
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5659
  ret %union.tree_node* %1, !dbg !5660
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_arg_size(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5661 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5663, metadata !DIExpression()), !dbg !5664
  %arg_size = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !5665
  %0 = bitcast %union.tree_node*** %arg_size to %union.tree_node**, !dbg !5665
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5665
  ret %union.tree_node* %1, !dbg !5666
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_task_arg_align(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5667 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5669, metadata !DIExpression()), !dbg !5670
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 1, !dbg !5671
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5671
  ret %union.tree_node* %1, !dbg !5672
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_critical_name(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5673 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5675, metadata !DIExpression()), !dbg !5676
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !5677
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5677
  ret %union.tree_node* %1, !dbg !5678
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_sections_clauses(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5679 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5681, metadata !DIExpression()), !dbg !5682
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !5683
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5683
  ret %union.tree_node* %1, !dbg !5684
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_omp_sections_control(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5685 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5687, metadata !DIExpression()), !dbg !5688
  %control = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5689
  %0 = bitcast [1 x %struct.phi_arg_d]* %control to %union.tree_node**, !dbg !5689
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5689
  ret %union.tree_node* %1, !dbg !5690
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_omp_sections_set_control(%union.gimple_statement_d* %gs, %union.tree_node* %control) unnamed_addr #0 !dbg !5691 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5693, metadata !DIExpression()), !dbg !5695
  call void @llvm.dbg.value(metadata %union.tree_node* %control, metadata !5694, metadata !DIExpression()), !dbg !5695
  %control1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, !dbg !5696
  %0 = bitcast [1 x %struct.phi_arg_d]* %control1 to %union.tree_node**, !dbg !5696
  store %union.tree_node* %control, %union.tree_node** %0, align 8, !dbg !5697
  ret void, !dbg !5698
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) unnamed_addr #0 !dbg !5699 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5701, metadata !DIExpression()), !dbg !5704
  call void @llvm.dbg.value(metadata i32 %i, metadata !5702, metadata !DIExpression()), !dbg !5704
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !5703, metadata !DIExpression()), !dbg !5704
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #8, !dbg !5705
  %tobool = icmp eq i8 %call, 0, !dbg !5705
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !5705

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #8, !dbg !5705
  %cmp = icmp ugt i32 %call1, %i, !dbg !5705
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !5705

cond.true:                                        ; preds = %entry, %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5705
  br label %cond.end, !dbg !5705

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %call3 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #8, !dbg !5706
  %idxprom = zext i32 %i to i64, !dbg !5706
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !5706
  store %union.tree_node* %op, %union.tree_node** %arrayidx, align 8, !dbg !5707
  ret void, !dbg !5708
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5709 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5711, metadata !DIExpression()), !dbg !5712
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !5713
  %cmp = icmp eq i32 %call, 0, !dbg !5714
  br i1 %cmp, label %land.end, label %land.rhs, !dbg !5715

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !5716
  %cmp2 = icmp ult i32 %call1, 10, !dbg !5717
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !5718
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_def_ops(%union.gimple_statement_d* %g, %struct.def_optype_d* %def) unnamed_addr #0 !dbg !5719 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5723, metadata !DIExpression()), !dbg !5725
  call void @llvm.dbg.value(metadata %struct.def_optype_d* null, metadata !5724, metadata !DIExpression()), !dbg !5725
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #8, !dbg !5726
  %tobool = icmp eq i8 %call, 0, !dbg !5726
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !5726

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1305, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5726
  br label %cond.end, !dbg !5726

cond.end:                                         ; preds = %entry, %cond.true
  %def_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !5727
  %0 = bitcast i32* %def_ops to %struct.def_optype_d**, !dbg !5727
  store %struct.def_optype_d* null, %struct.def_optype_d** %0, align 8, !dbg !5728
  ret void, !dbg !5729
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_use_ops(%union.gimple_statement_d* %g, %struct.use_optype_d* %use) unnamed_addr #0 !dbg !5730 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5734, metadata !DIExpression()), !dbg !5736
  call void @llvm.dbg.value(metadata %struct.use_optype_d* null, metadata !5735, metadata !DIExpression()), !dbg !5736
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #8, !dbg !5737
  %tobool = icmp eq i8 %call, 0, !dbg !5737
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !5737

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1326, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5737
  br label %cond.end, !dbg !5737

cond.end:                                         ; preds = %entry, %cond.true
  %use_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !5738
  %0 = bitcast %union.tree_node** %use_ops to %struct.use_optype_d**, !dbg !5738
  store %struct.use_optype_d* null, %struct.use_optype_d** %0, align 8, !dbg !5739
  ret void, !dbg !5740
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5741 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5743, metadata !DIExpression()), !dbg !5744
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !5745
  %cmp = icmp ugt i32 %call, 5, !dbg !5746
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5747

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !5748
  %cmp2 = icmp ult i32 %call1, 10, !dbg !5749
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !5750
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_vdef(%union.gimple_statement_d* %g, %union.tree_node* %vdef) unnamed_addr #0 !dbg !5751 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5753, metadata !DIExpression()), !dbg !5755
  call void @llvm.dbg.value(metadata %union.tree_node* %vdef, metadata !5754, metadata !DIExpression()), !dbg !5755
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #8, !dbg !5756
  %tobool = icmp eq i8 %call, 0, !dbg !5756
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !5756

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1416, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5756
  br label %cond.end, !dbg !5756

cond.end:                                         ; preds = %entry, %cond.true
  %vdef1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, !dbg !5757
  %0 = bitcast [1 x %struct.phi_arg_d]* %vdef1 to %union.tree_node**, !dbg !5757
  store %union.tree_node* %vdef, %union.tree_node** %0, align 8, !dbg !5758
  ret void, !dbg !5759
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5760 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5762, metadata !DIExpression()), !dbg !5763
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #8, !dbg !5764
  %tobool = icmp eq i8 %call, 0, !dbg !5764
  br i1 %tobool, label %return, label %if.end, !dbg !5766

if.end:                                           ; preds = %entry
  %vdef = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, !dbg !5767
  %0 = bitcast [1 x %struct.phi_arg_d]* %vdef to %union.tree_node**, !dbg !5767
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5767
  br label %return, !dbg !5768

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !5763
  ret %union.tree_node* %retval.0, !dbg !5769
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_vuse(%union.gimple_statement_d* %g, %union.tree_node* %vuse) unnamed_addr #0 !dbg !5770 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5772, metadata !DIExpression()), !dbg !5774
  call void @llvm.dbg.value(metadata %union.tree_node* %vuse, metadata !5773, metadata !DIExpression()), !dbg !5774
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #8, !dbg !5775
  %tobool = icmp eq i8 %call, 0, !dbg !5775
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !5775

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1407, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5775
  br label %cond.end, !dbg !5775

cond.end:                                         ; preds = %entry, %cond.true
  %vuse1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5776
  %0 = bitcast %struct.ssa_use_operand_d** %vuse1 to %union.tree_node**, !dbg !5776
  store %union.tree_node* %vuse, %union.tree_node** %0, align 8, !dbg !5777
  ret void, !dbg !5778
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5779 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5781, metadata !DIExpression()), !dbg !5782
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #8, !dbg !5783
  %tobool = icmp eq i8 %call, 0, !dbg !5783
  br i1 %tobool, label %return, label %if.end, !dbg !5785

if.end:                                           ; preds = %entry
  %vuse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !5786
  %0 = bitcast %struct.ssa_use_operand_d** %vuse to %union.tree_node**, !dbg !5786
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !5786
  br label %return, !dbg !5787

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !5782
  ret %union.tree_node* %retval.0, !dbg !5788
}

; Function Attrs: nounwind uwtable
define dso_local void @gimple_set_modified(%union.gimple_statement_d* %s, i8 zeroext %modifiedp) local_unnamed_addr #5 !dbg !5789 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !5791, metadata !DIExpression()), !dbg !5793
  call void @llvm.dbg.value(metadata i8 %modifiedp, metadata !5792, metadata !DIExpression()), !dbg !5793
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %s) #8, !dbg !5794
  %tobool = icmp eq i8 %call, 0, !dbg !5794
  br i1 %tobool, label %if.end16, label %if.then, !dbg !5796

if.then:                                          ; preds = %entry
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !5797
  %bf.load = load i32, i32* %0, align 8, !dbg !5799
  %1 = and i8 %modifiedp, 1, !dbg !5799
  %bf.value = zext i8 %1 to i32, !dbg !5799
  %bf.shl = shl nuw nsw i32 %bf.value, 13, !dbg !5799
  %bf.clear = and i32 %bf.load, -8193, !dbg !5799
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !5799
  store i32 %bf.set, i32* %0, align 8, !dbg !5799
  %tobool2 = icmp eq i8 %modifiedp, 0, !dbg !5800
  br i1 %tobool2, label %if.end16, label %land.lhs.true, !dbg !5802

land.lhs.true:                                    ; preds = %if.then
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5803
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, i32 3, !dbg !5804
  %3 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !5804
  %tobool3 = icmp eq %struct.gimple_df* %3, null, !dbg !5803
  br i1 %tobool3, label %if.end16, label %land.lhs.true4, !dbg !5805

land.lhs.true4:                                   ; preds = %land.lhs.true
  %call5 = tail call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %s) #8, !dbg !5806
  %tobool7 = icmp eq i8 %call5, 0, !dbg !5806
  br i1 %tobool7, label %if.end16, label %land.lhs.true8, !dbg !5807

land.lhs.true8:                                   ; preds = %land.lhs.true4
  %call9 = tail call fastcc zeroext i8 @gimple_call_noreturn_p(%union.gimple_statement_d* %s) #8, !dbg !5808
  %tobool11 = icmp eq i8 %call9, 0, !dbg !5808
  br i1 %tobool11, label %if.end16, label %if.then12, !dbg !5809

if.then12:                                        ; preds = %land.lhs.true8
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5810
  %gimple_df14 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, i32 3, !dbg !5810
  %5 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df14, align 8, !dbg !5810
  %modified_noreturn_calls = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %5, i64 0, i32 1, !dbg !5810
  %call15 = tail call fastcc %union.gimple_statement_d** @VEC_gimple_gc_safe_push(%struct.VEC_gimple_gc** nonnull %modified_noreturn_calls, %union.gimple_statement_d* %s) #8, !dbg !5810
  br label %if.end16, !dbg !5810

if.end16:                                         ; preds = %land.lhs.true8, %land.lhs.true4, %land.lhs.true, %if.then, %entry, %if.then12
  ret void, !dbg !5811
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5812 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5814, metadata !DIExpression()), !dbg !5815
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !5816
  %cmp = icmp eq i32 %call, 8, !dbg !5817
  %conv1 = zext i1 %cmp to i8, !dbg !5816
  ret i8 %conv1, !dbg !5818
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_call_noreturn_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !5819 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !5821, metadata !DIExpression()), !dbg !5822
  %call = tail call i32 @gimple_call_flags(%union.gimple_statement_d* %s) #8, !dbg !5823
  %and = lshr i32 %call, 3, !dbg !5824
  %0 = trunc i32 %and to i8, !dbg !5824
  %1 = and i8 %0, 1, !dbg !5824
  ret i8 %1, !dbg !5825
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d** @VEC_gimple_gc_safe_push(%struct.VEC_gimple_gc** %vec_, %union.gimple_statement_d* %obj_) unnamed_addr #0 !dbg !5826 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_gc** %vec_, metadata !5832, metadata !DIExpression()), !dbg !5834
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %obj_, metadata !5833, metadata !DIExpression()), !dbg !5834
  %call = tail call fastcc i32 @VEC_gimple_gc_reserve(%struct.VEC_gimple_gc** %vec_, i32 1) #8, !dbg !5835
  %0 = load %struct.VEC_gimple_gc*, %struct.VEC_gimple_gc** %vec_, align 8, !dbg !5835
  %tobool = icmp eq %struct.VEC_gimple_gc* %0, null, !dbg !5835
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5835

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_gimple_gc, %struct.VEC_gimple_gc* %0, i64 0, i32 0, !dbg !5835
  br label %cond.end, !dbg !5835

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %entry ], !dbg !5835
  %call1 = tail call fastcc %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %obj_) #8, !dbg !5835
  ret %union.gimple_statement_d** %call1, !dbg !5835
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_has_side_effects(%union.gimple_statement_d* %s) local_unnamed_addr #5 !dbg !5836 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !5838, metadata !DIExpression()), !dbg !5843
  %call = tail call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %s) #8, !dbg !5844
  %tobool = icmp eq i8 %call, 0, !dbg !5844
  br i1 %tobool, label %if.end, label %cleanup74, !dbg !5846

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %s) #8, !dbg !5847
  %tobool2 = icmp eq i8 %call1, 0, !dbg !5847
  br i1 %tobool2, label %if.end4, label %cleanup74, !dbg !5849

if.end4:                                          ; preds = %if.end
  %call5 = tail call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %s) #8, !dbg !5850
  %tobool6 = icmp eq i8 %call5, 0, !dbg !5850
  br i1 %tobool6, label %for.cond51.preheader, label %if.then7, !dbg !5851

for.cond51.preheader:                             ; preds = %if.end4
  br label %for.cond51, !dbg !5852

if.then7:                                         ; preds = %if.end4
  %call8 = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %s) #8, !dbg !5855
  call void @llvm.dbg.value(metadata i32 %call8, metadata !5840, metadata !DIExpression()), !dbg !5856
  %call9 = tail call i32 @gimple_call_flags(%union.gimple_statement_d* %s) #8, !dbg !5857
  %and = and i32 %call9, 3, !dbg !5859
  %tobool10 = icmp eq i32 %and, 0, !dbg !5859
  br i1 %tobool10, label %cleanup74, label %if.else, !dbg !5860

if.else:                                          ; preds = %if.then7
  %call12 = tail call i32 @gimple_call_flags(%union.gimple_statement_d* %s) #8, !dbg !5861
  %and13 = and i32 %call12, 4, !dbg !5863
  %tobool14 = icmp eq i32 %and13, 0, !dbg !5863
  br i1 %tobool14, label %if.end17, label %cleanup74, !dbg !5864

if.end17:                                         ; preds = %if.else
  %call18 = tail call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %s) #8, !dbg !5865
  %tobool19 = icmp eq %union.tree_node* %call18, null, !dbg !5865
  br i1 %tobool19, label %if.end25, label %land.lhs.true, !dbg !5867

land.lhs.true:                                    ; preds = %if.end17
  %call20 = tail call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %s) #8, !dbg !5868
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call20, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5868
  %bf.load = load i64, i64* %0, align 8, !dbg !5868
  %bf.cast4 = and i64 %bf.load, 65536, !dbg !5868
  %tobool21 = icmp eq i64 %bf.cast4, 0, !dbg !5868
  br i1 %tobool21, label %if.end25, label %if.then22, !dbg !5869

if.then22:                                        ; preds = %land.lhs.true
  %call23 = tail call fastcc zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %s) #8, !dbg !5870
  %tobool24 = icmp eq i8 %call23, 0, !dbg !5870
  br i1 %tobool24, label %cond.true, label %cleanup74, !dbg !5870

cond.true:                                        ; preds = %if.then22
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2178, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5870
  br label %cleanup74, !dbg !5870

if.end25:                                         ; preds = %land.lhs.true, %if.end17
  %call26 = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %s) #8, !dbg !5872
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5872
  %bf.load28 = load i64, i64* %1, align 8, !dbg !5872
  %bf.cast312 = and i64 %bf.load28, 65536, !dbg !5872
  %tobool32 = icmp eq i64 %bf.cast312, 0, !dbg !5872
  br i1 %tobool32, label %for.cond.preheader, label %cleanup74, !dbg !5874

for.cond.preheader:                               ; preds = %if.end25
  br label %for.cond, !dbg !5875

for.cond:                                         ; preds = %for.cond.preheader, %for.inc
  %i.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond.preheader ], !dbg !5877
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5839, metadata !DIExpression()), !dbg !5843
  %exitcond = icmp eq i32 %i.0, %call8, !dbg !5878
  br i1 %exitcond, label %cleanup74.loopexit5, label %for.body, !dbg !5875

for.body:                                         ; preds = %for.cond
  %call35 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %s, i32 %i.0) #8, !dbg !5880
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5880
  %bf.load37 = load i64, i64* %2, align 8, !dbg !5880
  %bf.cast403 = and i64 %bf.load37, 65536, !dbg !5880
  %tobool41 = icmp eq i64 %bf.cast403, 0, !dbg !5880
  br i1 %tobool41, label %for.inc, label %if.then42, !dbg !5882

if.then42:                                        ; preds = %for.body
  %call43 = tail call fastcc zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %s) #8, !dbg !5883
  %tobool44 = icmp eq i8 %call43, 0, !dbg !5883
  br i1 %tobool44, label %cond.true45, label %cleanup74, !dbg !5883

cond.true45:                                      ; preds = %if.then42
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2188, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5883
  br label %cleanup74, !dbg !5883

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.0, 1, !dbg !5885
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5839, metadata !DIExpression()), !dbg !5843
  br label %for.cond, !dbg !5886, !llvm.loop !5887

for.cond51:                                       ; preds = %for.cond51.preheader, %for.inc70
  %i.1 = phi i32 [ %inc71, %for.inc70 ], [ 0, %for.cond51.preheader ], !dbg !5889
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !5839, metadata !DIExpression()), !dbg !5843
  %call52 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %s) #8, !dbg !5890
  %cmp53 = icmp ult i32 %i.1, %call52, !dbg !5892
  br i1 %cmp53, label %for.body54, label %cleanup74.loopexit, !dbg !5852

for.body54:                                       ; preds = %for.cond51
  %call55 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %s, i32 %i.1) #8, !dbg !5893
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5893
  %bf.load57 = load i64, i64* %3, align 8, !dbg !5893
  %bf.cast601 = and i64 %bf.load57, 65536, !dbg !5893
  %tobool61 = icmp eq i64 %bf.cast601, 0, !dbg !5893
  br i1 %tobool61, label %for.inc70, label %if.then62, !dbg !5895

if.then62:                                        ; preds = %for.body54
  %call63 = tail call fastcc zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %s) #8, !dbg !5896
  %tobool64 = icmp eq i8 %call63, 0, !dbg !5896
  br i1 %tobool64, label %cond.true65, label %cleanup74, !dbg !5896

cond.true65:                                      ; preds = %if.then62
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2199, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5896
  br label %cleanup74, !dbg !5896

for.inc70:                                        ; preds = %for.body54
  %inc71 = add i32 %i.1, 1, !dbg !5898
  call void @llvm.dbg.value(metadata i32 %inc71, metadata !5839, metadata !DIExpression()), !dbg !5843
  br label %for.cond51, !dbg !5899, !llvm.loop !5900

cleanup74.loopexit:                               ; preds = %for.cond51
  br label %cleanup74, !dbg !5902

cleanup74.loopexit5:                              ; preds = %for.cond
  br label %cleanup74, !dbg !5902

cleanup74:                                        ; preds = %cleanup74.loopexit5, %cleanup74.loopexit, %if.then22, %if.then42, %if.end25, %if.else, %if.then7, %if.then62, %if.end, %entry, %cond.true65, %cond.true, %cond.true45
  %retval.1 = phi i8 [ 0, %entry ], [ 1, %if.end ], [ 1, %if.then7 ], [ 1, %if.else ], [ 1, %if.then22 ], [ 1, %cond.true ], [ 1, %if.end25 ], [ 1, %if.then42 ], [ 1, %cond.true45 ], [ 1, %if.then62 ], [ 1, %cond.true65 ], [ 0, %cleanup74.loopexit ], [ 0, %cleanup74.loopexit5 ], !dbg !5843
  ret i8 %retval.1, !dbg !5902
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !5903 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5905, metadata !DIExpression()), !dbg !5906
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %stmt) #8, !dbg !5907
  %tobool = icmp eq i8 %call, 0, !dbg !5907
  br i1 %tobool, label %return, label %if.then, !dbg !5909

if.then:                                          ; preds = %entry
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !5910
  %bf.load = load i32, i32* %0, align 8, !dbg !5910
  %bf.lshr = lshr i32 %bf.load, 14, !dbg !5910
  %1 = trunc i32 %bf.lshr to i8, !dbg !5911
  %conv = and i8 %1, 1, !dbg !5911
  br label %return, !dbg !5912

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi i8 [ %conv, %if.then ], [ 0, %entry ], !dbg !5913
  ret i8 %retval.0, !dbg !5914
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !5915 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5917, metadata !DIExpression()), !dbg !5919
  call void @llvm.dbg.value(metadata i32 %index, metadata !5918, metadata !DIExpression()), !dbg !5919
  %add = add i32 %index, 3, !dbg !5920
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %add) #8, !dbg !5921
  ret %union.tree_node* %call, !dbg !5922
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_rhs_has_side_effects(%union.gimple_statement_d* %s) local_unnamed_addr #5 !dbg !5923 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !5925, metadata !DIExpression()), !dbg !5930
  %call = tail call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %s) #8, !dbg !5931
  %tobool = icmp eq i8 %call, 0, !dbg !5931
  br i1 %tobool, label %if.else, label %if.then, !dbg !5932

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %s) #8, !dbg !5933
  call void @llvm.dbg.value(metadata i32 %call1, metadata !5927, metadata !DIExpression()), !dbg !5934
  %call2 = tail call i32 @gimple_call_flags(%union.gimple_statement_d* %s) #8, !dbg !5935
  %and = and i32 %call2, 3, !dbg !5937
  %tobool3 = icmp eq i32 %and, 0, !dbg !5937
  br i1 %tobool3, label %cleanup106, label %if.end, !dbg !5938

if.end:                                           ; preds = %if.then
  %call5 = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %s) #8, !dbg !5939
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5939
  %bf.load = load i64, i64* %0, align 8, !dbg !5939
  %bf.cast5 = and i64 %bf.load, 65536, !dbg !5939
  %tobool6 = icmp eq i64 %bf.cast5, 0, !dbg !5939
  br i1 %tobool6, label %lor.lhs.false, label %if.then14, !dbg !5941

lor.lhs.false:                                    ; preds = %if.end
  %call7 = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %s) #8, !dbg !5942
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5942
  %bf.load9 = load i64, i64* %1, align 8, !dbg !5942
  %bf.cast126 = and i64 %bf.load9, 524288, !dbg !5942
  %tobool13 = icmp eq i64 %bf.cast126, 0, !dbg !5942
  br i1 %tobool13, label %for.cond.preheader, label %if.then14, !dbg !5943

for.cond.preheader:                               ; preds = %lor.lhs.false
  br label %for.cond, !dbg !5944

if.then14:                                        ; preds = %lor.lhs.false, %if.end
  %call15 = tail call fastcc zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %s) #8, !dbg !5946
  %tobool16 = icmp eq i8 %call15, 0, !dbg !5946
  br i1 %tobool16, label %cond.true, label %cleanup106, !dbg !5946

cond.true:                                        ; preds = %if.then14
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2230, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5946
  br label %cleanup106, !dbg !5946

for.cond:                                         ; preds = %for.cond.preheader, %for.inc
  %i.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond.preheader ], !dbg !5948
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5926, metadata !DIExpression()), !dbg !5930
  %exitcond = icmp eq i32 %i.0, %call1, !dbg !5949
  br i1 %exitcond, label %cleanup106.loopexit10, label %for.body, !dbg !5944

for.body:                                         ; preds = %for.cond
  %call18 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %s, i32 %i.0) #8, !dbg !5951
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5951
  %bf.load20 = load i64, i64* %2, align 8, !dbg !5951
  %bf.cast237 = and i64 %bf.load20, 65536, !dbg !5951
  %tobool24 = icmp eq i64 %bf.cast237, 0, !dbg !5951
  br i1 %tobool24, label %lor.lhs.false25, label %cleanup106.loopexit10, !dbg !5953

lor.lhs.false25:                                  ; preds = %for.body
  %call26 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %s, i32 %i.0) #8, !dbg !5954
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5954
  %bf.load28 = load i64, i64* %3, align 8, !dbg !5954
  %bf.cast318 = and i64 %bf.load28, 524288, !dbg !5954
  %tobool32 = icmp eq i64 %bf.cast318, 0, !dbg !5954
  br i1 %tobool32, label %for.inc, label %cleanup106.loopexit10, !dbg !5955

for.inc:                                          ; preds = %lor.lhs.false25
  %inc = add i32 %i.0, 1, !dbg !5956
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5926, metadata !DIExpression()), !dbg !5930
  br label %for.cond, !dbg !5957, !llvm.loop !5958

if.else:                                          ; preds = %entry
  %call35 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %s) #8, !dbg !5960
  %tobool36 = icmp eq i8 %call35, 0, !dbg !5960
  br i1 %tobool36, label %if.else68, label %for.cond38.preheader, !dbg !5962

for.cond38.preheader:                             ; preds = %if.else
  br label %for.cond38, !dbg !5963

for.cond38:                                       ; preds = %for.cond38.preheader, %for.inc65
  %i.1 = phi i32 [ %inc66, %for.inc65 ], [ 1, %for.cond38.preheader ], !dbg !5966
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !5926, metadata !DIExpression()), !dbg !5930
  %call39 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %s) #8, !dbg !5967
  %cmp40 = icmp ult i32 %i.1, %call39, !dbg !5969
  br i1 %cmp40, label %for.body41, label %cleanup106.loopexit9, !dbg !5963

for.body41:                                       ; preds = %for.cond38
  %call42 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %s, i32 %i.1) #8, !dbg !5970
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %call42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5970
  %bf.load44 = load i64, i64* %4, align 8, !dbg !5970
  %bf.cast473 = and i64 %bf.load44, 65536, !dbg !5970
  %tobool48 = icmp eq i64 %bf.cast473, 0, !dbg !5970
  br i1 %tobool48, label %lor.lhs.false49, label %if.then57, !dbg !5972

lor.lhs.false49:                                  ; preds = %for.body41
  %call50 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %s, i32 %i.1) #8, !dbg !5973
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %call50, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5973
  %bf.load52 = load i64, i64* %5, align 8, !dbg !5973
  %bf.cast554 = and i64 %bf.load52, 524288, !dbg !5973
  %tobool56 = icmp eq i64 %bf.cast554, 0, !dbg !5973
  br i1 %tobool56, label %for.inc65, label %if.then57, !dbg !5974

if.then57:                                        ; preds = %lor.lhs.false49, %for.body41
  %call58 = tail call fastcc zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %s) #8, !dbg !5975
  %tobool59 = icmp eq i8 %call58, 0, !dbg !5975
  br i1 %tobool59, label %cond.true60, label %cleanup106, !dbg !5975

cond.true60:                                      ; preds = %if.then57
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2248, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5975
  br label %cleanup106, !dbg !5975

for.inc65:                                        ; preds = %lor.lhs.false49
  %inc66 = add i32 %i.1, 1, !dbg !5977
  call void @llvm.dbg.value(metadata i32 %inc66, metadata !5926, metadata !DIExpression()), !dbg !5930
  br label %for.cond38, !dbg !5978, !llvm.loop !5979

if.else68:                                        ; preds = %if.else
  %call69 = tail call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %s) #8, !dbg !5981
  %tobool70 = icmp eq i8 %call69, 0, !dbg !5981
  br i1 %tobool70, label %for.cond73.preheader, label %cleanup106, !dbg !5983

for.cond73.preheader:                             ; preds = %if.else68
  br label %for.cond73, !dbg !5984

for.cond73:                                       ; preds = %for.cond73.preheader, %for.inc100
  %i.2 = phi i32 [ %inc101, %for.inc100 ], [ 0, %for.cond73.preheader ], !dbg !5987
  call void @llvm.dbg.value(metadata i32 %i.2, metadata !5926, metadata !DIExpression()), !dbg !5930
  %call74 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %s) #8, !dbg !5988
  %cmp75 = icmp ult i32 %i.2, %call74, !dbg !5990
  br i1 %cmp75, label %for.body76, label %cleanup106.loopexit, !dbg !5984

for.body76:                                       ; preds = %for.cond73
  %call77 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %s, i32 %i.2) #8, !dbg !5991
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call77, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5991
  %bf.load79 = load i64, i64* %6, align 8, !dbg !5991
  %bf.cast821 = and i64 %bf.load79, 65536, !dbg !5991
  %tobool83 = icmp eq i64 %bf.cast821, 0, !dbg !5991
  br i1 %tobool83, label %lor.lhs.false84, label %if.then92, !dbg !5993

lor.lhs.false84:                                  ; preds = %for.body76
  %call85 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %s, i32 %i.2) #8, !dbg !5994
  %7 = getelementptr inbounds %union.tree_node, %union.tree_node* %call85, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5994
  %bf.load87 = load i64, i64* %7, align 8, !dbg !5994
  %bf.cast902 = and i64 %bf.load87, 524288, !dbg !5994
  %tobool91 = icmp eq i64 %bf.cast902, 0, !dbg !5994
  br i1 %tobool91, label %for.inc100, label %if.then92, !dbg !5995

if.then92:                                        ; preds = %lor.lhs.false84, %for.body76
  %call93 = tail call fastcc zeroext i8 @gimple_has_volatile_ops(%union.gimple_statement_d* %s) #8, !dbg !5996
  %tobool94 = icmp eq i8 %call93, 0, !dbg !5996
  br i1 %tobool94, label %cond.true95, label %cleanup106, !dbg !5996

cond.true95:                                      ; preds = %if.then92
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2261, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !5996
  br label %cleanup106, !dbg !5996

for.inc100:                                       ; preds = %lor.lhs.false84
  %inc101 = add i32 %i.2, 1, !dbg !5998
  call void @llvm.dbg.value(metadata i32 %inc101, metadata !5926, metadata !DIExpression()), !dbg !5930
  br label %for.cond73, !dbg !5999, !llvm.loop !6000

cleanup106.loopexit:                              ; preds = %for.cond73
  br label %cleanup106, !dbg !6002

cleanup106.loopexit9:                             ; preds = %for.cond38
  br label %cleanup106, !dbg !6002

cleanup106.loopexit10:                            ; preds = %for.cond, %for.body, %lor.lhs.false25
  %retval.1.ph = phi i8 [ 0, %for.cond ], [ 1, %for.body ], [ 1, %lor.lhs.false25 ]
  br label %cleanup106, !dbg !6002

cleanup106:                                       ; preds = %cleanup106.loopexit10, %cleanup106.loopexit9, %cleanup106.loopexit, %if.then14, %if.then, %if.then57, %if.then92, %if.else68, %cond.true95, %cond.true60, %cond.true
  %retval.1 = phi i8 [ 1, %if.then ], [ 1, %if.then14 ], [ 1, %cond.true ], [ 1, %if.then57 ], [ 1, %cond.true60 ], [ 0, %if.else68 ], [ 1, %if.then92 ], [ 1, %cond.true95 ], [ 0, %cleanup106.loopexit ], [ 0, %cleanup106.loopexit9 ], [ %retval.1.ph, %cleanup106.loopexit10 ], !dbg !5930
  ret i8 %retval.1, !dbg !6002
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6003 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6005, metadata !DIExpression()), !dbg !6006
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !6007
  %cmp = icmp eq i32 %call, 6, !dbg !6008
  %conv1 = zext i1 %cmp to i8, !dbg !6007
  ret i8 %conv1, !dbg !6009
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_could_trap_p(%union.gimple_statement_d* %s) local_unnamed_addr #5 !dbg !6010 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !6012, metadata !DIExpression()), !dbg !6013
  %call = tail call fastcc zeroext i8 @gimple_could_trap_p_1(%union.gimple_statement_d* %s, i8 zeroext 1) #8, !dbg !6014
  ret i8 %call, !dbg !6015
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @gimple_could_trap_p_1(%union.gimple_statement_d* %s, i8 zeroext %include_lhs) unnamed_addr #5 !dbg !6016 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !6020, metadata !DIExpression()), !dbg !6027
  call void @llvm.dbg.value(metadata i8 %include_lhs, metadata !6021, metadata !DIExpression()), !dbg !6027
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !6025, metadata !DIExpression()), !dbg !6027
  %call = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %s) #8, !dbg !6028
  %tobool = icmp eq i8 %call, 0, !dbg !6028
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6029

land.rhs:                                         ; preds = %entry
  %tobool1 = icmp eq i8 %include_lhs, 0, !dbg !6030
  %phitmp = zext i1 %tobool1 to i32
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %0 = phi i32 [ 0, %entry ], [ %phitmp, %land.rhs ]
  call void @llvm.dbg.value(metadata i32 %0, metadata !6023, metadata !DIExpression()), !dbg !6027
  call void @llvm.dbg.value(metadata i32 %0, metadata !6022, metadata !DIExpression()), !dbg !6027
  br label %for.cond, !dbg !6031

for.cond:                                         ; preds = %for.inc, %land.end
  %i.0 = phi i32 [ %0, %land.end ], [ %inc, %for.inc ], !dbg !6033
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !6022, metadata !DIExpression()), !dbg !6027
  %call2 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %s) #8, !dbg !6034
  %cmp = icmp ult i32 %i.0, %call2, !dbg !6036
  br i1 %cmp, label %for.body, label %for.end, !dbg !6037

for.body:                                         ; preds = %for.cond
  %call4 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %s, i32 %i.0) #8, !dbg !6038
  %call5 = tail call zeroext i8 @tree_could_trap_p(%union.tree_node* %call4) #7, !dbg !6040
  %tobool6 = icmp eq i8 %call5, 0, !dbg !6040
  br i1 %tobool6, label %for.inc, label %cleanup.loopexit, !dbg !6041

for.inc:                                          ; preds = %for.body
  %inc = add i32 %i.0, 1, !dbg !6042
  call void @llvm.dbg.value(metadata i32 %inc, metadata !6022, metadata !DIExpression()), !dbg !6027
  br label %for.cond, !dbg !6043, !llvm.loop !6044

for.end:                                          ; preds = %for.cond
  %call7 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %s) #8, !dbg !6046
  switch i32 %call7, label %cleanup [
    i32 7, label %sw.bb
    i32 8, label %sw.bb9
    i32 6, label %sw.bb20
  ], !dbg !6047

sw.bb:                                            ; preds = %for.end
  %call8 = tail call fastcc zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %s) #8, !dbg !6048
  br label %cleanup, !dbg !6050

sw.bb9:                                           ; preds = %for.end
  %call10 = tail call fastcc %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %s) #8, !dbg !6051
  call void @llvm.dbg.value(metadata %union.tree_node* %call10, metadata !6024, metadata !DIExpression()), !dbg !6027
  %tobool11 = icmp eq %union.tree_node* %call10, null, !dbg !6052
  br i1 %tobool11, label %cleanup, label %lor.lhs.false, !dbg !6054

lor.lhs.false:                                    ; preds = %sw.bb9
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call10, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6055
  %bf.load = load i64, i64* %1, align 8, !dbg !6055
  %bf.cast = and i64 %bf.load, 65535, !dbg !6055
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !6055
  %2 = load i32, i32* %arrayidx, align 4, !dbg !6055
  %cmp12 = icmp eq i32 %2, 3, !dbg !6055
  br i1 %cmp12, label %lor.lhs.false14, label %cleanup, !dbg !6056

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %weak_flag = getelementptr inbounds %union.tree_node, %union.tree_node* %call10, i64 0, i32 0, i32 0, i32 0, i32 4, !dbg !6057
  %3 = bitcast i24* %weak_flag to i32*, !dbg !6057
  %bf.load15 = load i32, i32* %3, align 8, !dbg !6057
  %4 = trunc i32 %bf.load15 to i8, !dbg !6057
  %.lobit = lshr i8 %4, 7, !dbg !6058
  ret i8 %.lobit, !dbg !6058

sw.bb20:                                          ; preds = %for.end
  %call21 = tail call fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %s) #8, !dbg !6059
  call void @llvm.dbg.value(metadata %union.tree_node* %call21, metadata !6024, metadata !DIExpression()), !dbg !6027
  %call22 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %s) #8, !dbg !6060
  call void @llvm.dbg.value(metadata i32 %call22, metadata !6026, metadata !DIExpression()), !dbg !6027
  %call23 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call22) #8, !dbg !6061
  %cmp24 = icmp eq i32 %call23, 1, !dbg !6063
  br i1 %cmp24, label %if.then26, label %if.end28, !dbg !6064

if.then26:                                        ; preds = %sw.bb20
  %call27 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %s) #8, !dbg !6065
  call void @llvm.dbg.value(metadata %union.tree_node* %call27, metadata !6025, metadata !DIExpression()), !dbg !6027
  br label %if.end28, !dbg !6066

if.end28:                                         ; preds = %if.then26, %sw.bb20
  %div.0 = phi %union.tree_node* [ %call27, %if.then26 ], [ null, %sw.bb20 ], !dbg !6027
  call void @llvm.dbg.value(metadata %union.tree_node* %div.0, metadata !6025, metadata !DIExpression()), !dbg !6027
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %call21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6067
  %bf.load30 = load i64, i64* %5, align 8, !dbg !6067
  %bf.cast321 = and i64 %bf.load30, 65535, !dbg !6067
  %cmp33 = icmp eq i64 %bf.cast321, 9, !dbg !6067
  br i1 %cmp33, label %lor.end, label %lor.rhs, !dbg !6067

lor.rhs:                                          ; preds = %if.end28
  %cmp39 = icmp eq i64 %bf.cast321, 13, !dbg !6067
  br i1 %cmp39, label %land.rhs48, label %lor.lhs.false41, !dbg !6067

lor.lhs.false41:                                  ; preds = %lor.rhs
  %cmp46 = icmp eq i64 %bf.cast321, 14, !dbg !6067
  br i1 %cmp46, label %land.rhs48, label %lor.end, !dbg !6067

land.rhs48:                                       ; preds = %lor.lhs.false41, %lor.rhs
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6067
  %6 = bitcast %union.tree_node** %type to i64**, !dbg !6067
  %7 = load i64*, i64** %6, align 8, !dbg !6067
  %bf.load50 = load i64, i64* %7, align 8, !dbg !6067
  %bf.cast5210 = and i64 %bf.load50, 65535, !dbg !6067
  %cmp53 = icmp eq i64 %bf.cast5210, 9, !dbg !6067
  %phitmp4 = zext i1 %cmp53 to i8
  br label %lor.end

lor.end:                                          ; preds = %lor.lhs.false41, %land.rhs48, %if.end28
  %8 = phi i8 [ 1, %if.end28 ], [ 0, %lor.lhs.false41 ], [ %phitmp4, %land.rhs48 ]
  %cmp61 = icmp eq i64 %bf.cast321, 6, !dbg !6068
  br i1 %cmp61, label %land.rhs77, label %lor.lhs.false63, !dbg !6068

lor.lhs.false63:                                  ; preds = %lor.end
  %cmp68 = icmp eq i64 %bf.cast321, 7, !dbg !6068
  br i1 %cmp68, label %land.rhs77, label %lor.lhs.false70, !dbg !6068

lor.lhs.false70:                                  ; preds = %lor.lhs.false63
  %cmp75 = icmp eq i64 %bf.cast321, 8, !dbg !6068
  br i1 %cmp75, label %land.rhs77, label %land.end87, !dbg !6069

land.rhs77:                                       ; preds = %lor.lhs.false70, %lor.lhs.false63, %lor.end
  %bf.cast829 = and i64 %bf.load30, 2097152, !dbg !6070
  %tobool83 = icmp eq i64 %bf.cast829, 0, !dbg !6070
  %9 = load i32, i32* @flag_trapv, align 4, !dbg !6070
  %tobool85 = icmp ne i32 %9, 0, !dbg !6070
  %10 = and i1 %tobool83, %tobool85, !dbg !6070
  %phitmp8 = zext i1 %10 to i8, !dbg !6070
  br label %land.end87, !dbg !6070

land.end87:                                       ; preds = %land.rhs77, %lor.lhs.false70
  %11 = phi i8 [ 0, %lor.lhs.false70 ], [ %phitmp8, %land.rhs77 ]
  %call89 = tail call zeroext i8 @operation_could_trap_p(i32 %call22, i8 zeroext %8, i8 zeroext %11, %union.tree_node* %div.0) #7, !dbg !6071
  br label %cleanup, !dbg !6072

cleanup.loopexit:                                 ; preds = %for.body
  br label %cleanup, !dbg !6073

cleanup:                                          ; preds = %cleanup.loopexit, %sw.bb9, %for.end, %lor.lhs.false, %land.end87, %sw.bb
  %retval.0 = phi i8 [ %call89, %land.end87 ], [ %call8, %sw.bb ], [ 1, %lor.lhs.false ], [ 1, %sw.bb9 ], [ 0, %for.end ], [ 1, %cleanup.loopexit ], !dbg !6027
  ret i8 %retval.0, !dbg !6073
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_assign_rhs_could_trap_p(%union.gimple_statement_d* %s) local_unnamed_addr #5 !dbg !6074 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !6076, metadata !DIExpression()), !dbg !6077
  %call = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %s) #8, !dbg !6078
  %tobool = icmp eq i8 %call, 0, !dbg !6078
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !6078

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2333, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !6078
  br label %cond.end, !dbg !6078

cond.end:                                         ; preds = %entry, %cond.true
  %call1 = tail call fastcc zeroext i8 @gimple_could_trap_p_1(%union.gimple_statement_d* %s, i8 zeroext 0) #8, !dbg !6079
  ret i8 %call1, !dbg !6080
}

; Function Attrs: nounwind uwtable
define dso_local void @dump_gimple_statistics() local_unnamed_addr #5 !dbg !6081 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6084
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0)) #7, !dbg !6085
  ret void, !dbg !6086
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_operand(%union.tree_node* %op) local_unnamed_addr #5 !dbg !6087 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !6089, metadata !DIExpression()), !dbg !6090
  %tobool = icmp eq %union.tree_node* %op, null, !dbg !6091
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6092

land.rhs:                                         ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %op, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6093
  %bf.load = load i64, i64* %0, align 8, !dbg !6093
  %1 = trunc i64 %bf.load to i32, !dbg !6093
  %bf.cast = and i32 %1, 65535, !dbg !6093
  %call = tail call fastcc i32 @get_gimple_rhs_class(i32 %bf.cast) #8, !dbg !6094
  %cmp = icmp eq i32 %call, 3, !dbg !6095
  %phitmp = zext i1 %cmp to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %2 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %2, !dbg !6096
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_reg_rhs(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6097 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6099, metadata !DIExpression()), !dbg !6100
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6101
  %bf.load = load i64, i64* %0, align 8, !dbg !6101
  %1 = trunc i64 %bf.load to i32, !dbg !6101
  %bf.cast = and i32 %1, 65535, !dbg !6101
  %call = tail call fastcc i32 @get_gimple_rhs_class(i32 %bf.cast) #8, !dbg !6102
  %cmp = icmp ne i32 %call, 0, !dbg !6103
  %conv1 = zext i1 %cmp to i8, !dbg !6102
  ret i8 %conv1, !dbg !6104
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_reg_type(%union.tree_node* %type) local_unnamed_addr #5 !dbg !6105 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !6107, metadata !DIExpression()), !dbg !6108
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6109
  %bf.load = load i64, i64* %0, align 8, !dbg !6109
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6109
  %cmp = icmp eq i64 %bf.cast1, 15, !dbg !6109
  br i1 %cmp, label %lor.end17, label %lor.rhs, !dbg !6109

lor.rhs:                                          ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 16, !dbg !6109
  br i1 %cmp5, label %lor.end17, label %lor.lhs.false, !dbg !6109

lor.lhs.false:                                    ; preds = %lor.rhs
  %cmp10 = icmp eq i64 %bf.cast1, 17, !dbg !6109
  br i1 %cmp10, label %lor.end17, label %lor.rhs11, !dbg !6109

lor.rhs11:                                        ; preds = %lor.lhs.false
  %cmp16 = icmp ne i64 %bf.cast1, 18, !dbg !6109
  %phitmp = zext i1 %cmp16 to i8, !dbg !6109
  br label %lor.end17, !dbg !6109

lor.end17:                                        ; preds = %lor.rhs, %lor.lhs.false, %lor.rhs11, %entry
  %1 = phi i8 [ 0, %entry ], [ 0, %lor.lhs.false ], [ 0, %lor.rhs ], [ %phitmp, %lor.rhs11 ]
  ret i8 %1, !dbg !6110
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_lvalue(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6111 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6113, metadata !DIExpression()), !dbg !6114
  %call = tail call zeroext i8 @is_gimple_addressable(%union.tree_node* %t) #8, !dbg !6115
  %tobool = icmp eq i8 %call, 0, !dbg !6115
  br i1 %tobool, label %lor.lhs.false, label %lor.end, !dbg !6116

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6117
  %bf.load = load i64, i64* %0, align 8, !dbg !6117
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6118
  %cmp = icmp eq i64 %bf.cast1, 150, !dbg !6118
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !6119

lor.rhs:                                          ; preds = %lor.lhs.false
  %cmp6 = icmp eq i64 %bf.cast1, 42, !dbg !6120
  %phitmp = zext i1 %cmp6 to i8, !dbg !6119
  br label %lor.end, !dbg !6119

lor.end:                                          ; preds = %entry, %lor.rhs, %lor.lhs.false
  %1 = phi i8 [ 1, %lor.lhs.false ], [ 1, %entry ], [ %phitmp, %lor.rhs ]
  ret i8 %1, !dbg !6121
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_addressable(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6122 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6124, metadata !DIExpression()), !dbg !6125
  %call = tail call zeroext i8 @is_gimple_id(%union.tree_node* %t) #8, !dbg !6126
  %tobool = icmp eq i8 %call, 0, !dbg !6126
  br i1 %tobool, label %lor.lhs.false, label %lor.end19, !dbg !6127

lor.lhs.false:                                    ; preds = %entry
  %call1 = tail call fastcc zeroext i8 @handled_component_p(%union.tree_node* %t) #8, !dbg !6128
  %tobool3 = icmp eq i8 %call1, 0, !dbg !6128
  br i1 %tobool3, label %lor.rhs, label %lor.end19, !dbg !6129

lor.rhs:                                          ; preds = %lor.lhs.false
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6130
  %bf.load = load i64, i64* %0, align 8, !dbg !6130
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6130
  %cmp = icmp eq i64 %bf.cast1, 47, !dbg !6130
  br i1 %cmp, label %lor.end19, label %lor.lhs.false5, !dbg !6130

lor.lhs.false5:                                   ; preds = %lor.rhs
  %cmp10 = icmp eq i64 %bf.cast1, 48, !dbg !6130
  br i1 %cmp10, label %lor.end19, label %lor.rhs12, !dbg !6130

lor.rhs12:                                        ; preds = %lor.lhs.false5
  %cmp17 = icmp eq i64 %bf.cast1, 49, !dbg !6130
  %phitmp = zext i1 %cmp17 to i8, !dbg !6130
  br label %lor.end19, !dbg !6130

lor.end19:                                        ; preds = %lor.lhs.false, %entry, %lor.rhs, %lor.lhs.false5, %lor.rhs12
  %1 = phi i8 [ 1, %lor.lhs.false ], [ 1, %entry ], [ 1, %lor.lhs.false5 ], [ 1, %lor.rhs ], [ %phitmp, %lor.rhs12 ]
  ret i8 %1, !dbg !6131
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_condexpr(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6132 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6134, metadata !DIExpression()), !dbg !6135
  %call = tail call zeroext i8 @is_gimple_val(%union.tree_node* %t) #8, !dbg !6136
  %tobool = icmp eq i8 %call, 0, !dbg !6136
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !6137

lor.rhs:                                          ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6138
  %bf.load = load i64, i64* %0, align 8, !dbg !6138
  %bf.cast = and i64 %bf.load, 65535, !dbg !6138
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !6138
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6138
  %cmp = icmp eq i32 %1, 5, !dbg !6138
  br i1 %cmp, label %land.lhs.true, label %lor.end, !dbg !6139

land.lhs.true:                                    ; preds = %lor.rhs
  %call2 = tail call zeroext i8 @tree_could_trap_p(%union.tree_node* %t) #7, !dbg !6140
  %tobool3 = icmp eq i8 %call2, 0, !dbg !6140
  br i1 %tobool3, label %land.lhs.true4, label %lor.end, !dbg !6141

land.lhs.true4:                                   ; preds = %land.lhs.true
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6142
  %2 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6142
  %call6 = tail call zeroext i8 @is_gimple_val(%union.tree_node* %2) #8, !dbg !6143
  %tobool8 = icmp eq i8 %call6, 0, !dbg !6143
  br i1 %tobool8, label %lor.end, label %land.rhs, !dbg !6144

land.rhs:                                         ; preds = %land.lhs.true4
  %arrayidx11 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !6145
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !6145
  %call12 = tail call zeroext i8 @is_gimple_val(%union.tree_node* %3) #8, !dbg !6146
  %tobool14 = icmp ne i8 %call12, 0, !dbg !6144
  %phitmp = zext i1 %tobool14 to i8
  br label %lor.end

lor.end:                                          ; preds = %land.lhs.true4, %land.lhs.true, %entry, %lor.rhs, %land.rhs
  %4 = phi i8 [ 1, %entry ], [ 0, %land.lhs.true4 ], [ 0, %land.lhs.true ], [ 0, %lor.rhs ], [ %phitmp, %land.rhs ]
  ret i8 %4, !dbg !6147
}

declare dso_local zeroext i8 @tree_could_trap_p(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_id(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6148 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6150, metadata !DIExpression()), !dbg !6151
  %call = tail call zeroext i8 @is_gimple_variable(%union.tree_node* %t) #8, !dbg !6152
  %tobool = icmp eq i8 %call, 0, !dbg !6152
  br i1 %tobool, label %lor.lhs.false, label %lor.end, !dbg !6153

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6154
  %bf.load = load i64, i64* %0, align 8, !dbg !6154
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6155
  %cmp = icmp eq i64 %bf.cast1, 29, !dbg !6155
  br i1 %cmp, label %lor.end, label %lor.lhs.false2, !dbg !6156

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %cmp7 = icmp eq i64 %bf.cast1, 30, !dbg !6157
  br i1 %cmp7, label %lor.end, label %lor.lhs.false9, !dbg !6158

lor.lhs.false9:                                   ; preds = %lor.lhs.false2
  %cmp14 = icmp eq i64 %bf.cast1, 33, !dbg !6159
  br i1 %cmp14, label %lor.end, label %lor.rhs, !dbg !6160

lor.rhs:                                          ; preds = %lor.lhs.false9
  %cmp20 = icmp eq i64 %bf.cast1, 28, !dbg !6161
  %phitmp = zext i1 %cmp20 to i8, !dbg !6160
  br label %lor.end, !dbg !6160

lor.end:                                          ; preds = %entry, %lor.rhs, %lor.lhs.false9, %lor.lhs.false2, %lor.lhs.false
  %1 = phi i8 [ 1, %lor.lhs.false9 ], [ 1, %lor.lhs.false2 ], [ 1, %lor.lhs.false ], [ 1, %entry ], [ %phitmp, %lor.rhs ]
  ret i8 %1, !dbg !6162
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @handled_component_p(%union.tree_node* %t) unnamed_addr #0 !dbg !6163 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6165, metadata !DIExpression()), !dbg !6166
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6167
  %bf.load = load i64, i64* %0, align 8, !dbg !6167
  %1 = trunc i64 %bf.load to i16, !dbg !6167
  switch i16 %1, label %sw.default [
    i16 42, label %return
    i16 41, label %return
    i16 45, label %return
    i16 46, label %return
    i16 118, label %return
    i16 43, label %return
    i16 44, label %return
  ], !dbg !6168

sw.default:                                       ; preds = %entry
  br label %return, !dbg !6169

return:                                           ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.default
  %retval.0 = phi i8 [ 0, %sw.default ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], !dbg !6171
  ret i8 %retval.0, !dbg !6172
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_constant(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6173 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6175, metadata !DIExpression()), !dbg !6176
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6177
  %bf.load = load i64, i64* %0, align 8, !dbg !6177
  %1 = trunc i64 %bf.load to i16, !dbg !6177
  switch i16 %1, label %sw.default [
    i16 23, label %return
    i16 24, label %return
    i16 25, label %return
    i16 28, label %return
    i16 26, label %return
    i16 27, label %return
    i16 51, label %sw.bb1
  ], !dbg !6178

sw.bb1:                                           ; preds = %entry
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6179
  %2 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6179
  %tobool = icmp eq %union.tree_node* %2, null, !dbg !6179
  br i1 %tobool, label %return, label %land.lhs.true, !dbg !6182

land.lhs.true:                                    ; preds = %sw.bb1
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6182
  %bf.load5 = load i64, i64* %3, align 8, !dbg !6183
  %bf.cast71 = and i64 %bf.load5, 65535, !dbg !6184
  %cmp = icmp eq i64 %bf.cast71, 14, !dbg !6184
  br i1 %cmp, label %if.then, label %return, !dbg !6185

if.then:                                          ; preds = %land.lhs.true
  %bf.lshr = lshr i64 %bf.load, 17, !dbg !6186
  %4 = trunc i64 %bf.lshr to i8, !dbg !6186
  %bf.cast11 = and i8 %4, 1, !dbg !6186
  br label %return, !dbg !6187

sw.default:                                       ; preds = %entry
  br label %return, !dbg !6188

return:                                           ; preds = %sw.bb1, %land.lhs.true, %entry, %entry, %entry, %entry, %entry, %entry, %sw.default, %if.then
  %retval.0 = phi i8 [ 0, %sw.default ], [ %bf.cast11, %if.then ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 0, %land.lhs.true ], [ 0, %sw.bb1 ], !dbg !6189
  ret i8 %retval.0, !dbg !6190
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_address(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6191 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6193, metadata !DIExpression()), !dbg !6195
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6196
  %bf.load = load i64, i64* %0, align 8, !dbg !6196
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6198
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !6198
  br i1 %cmp, label %if.end, label %cleanup, !dbg !6199

if.end:                                           ; preds = %entry
  br label %while.cond, !dbg !6200

while.cond:                                       ; preds = %if.end17, %if.end
  %t.pn = phi %union.tree_node* [ %t, %if.end ], [ %op.0, %if.end17 ]
  %op.0.in = getelementptr inbounds %union.tree_node, %union.tree_node* %t.pn, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6195
  %op.0 = load %union.tree_node*, %union.tree_node** %op.0.in, align 8, !dbg !6195
  call void @llvm.dbg.value(metadata %union.tree_node* %op.0, metadata !6194, metadata !DIExpression()), !dbg !6195
  %call = tail call fastcc zeroext i8 @handled_component_p(%union.tree_node* %op.0) #8, !dbg !6201
  %tobool = icmp eq i8 %call, 0, !dbg !6200
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %op.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6195
  %bf.load2 = load i64, i64* %1, align 8, !dbg !6195
  %2 = trunc i64 %bf.load2 to i32, !dbg !6195
  %bf.cast4 = and i32 %2, 65535, !dbg !6195
  br i1 %tobool, label %while.end, label %while.body, !dbg !6200

while.body:                                       ; preds = %while.cond
  %cmp5 = icmp eq i32 %bf.cast4, 45, !dbg !6202
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false, !dbg !6205

lor.lhs.false:                                    ; preds = %while.body
  %bf.cast95 = and i64 %bf.load2, 65535, !dbg !6206
  %cmp10 = icmp eq i64 %bf.cast95, 46, !dbg !6206
  br i1 %cmp10, label %land.lhs.true, label %if.end17, !dbg !6207

land.lhs.true:                                    ; preds = %lor.lhs.false, %while.body
  %operands12 = getelementptr inbounds %union.tree_node, %union.tree_node* %op.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6208
  %arrayidx13 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands12, i64 1, !dbg !6208
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !6208
  %call14 = tail call zeroext i8 @is_gimple_val(%union.tree_node* %3) #8, !dbg !6209
  %tobool15 = icmp eq i8 %call14, 0, !dbg !6209
  br i1 %tobool15, label %cleanup.loopexit, label %if.end17, !dbg !6210

if.end17:                                         ; preds = %land.lhs.true, %lor.lhs.false
  br label %while.cond, !dbg !6200, !llvm.loop !6211

while.end:                                        ; preds = %while.cond
  %bf.load2.lcssa = phi i64 [ %bf.load2, %while.cond ], !dbg !6195
  %bf.cast4.lcssa = phi i32 [ %bf.cast4, %while.cond ], !dbg !6195
  %idxprom = zext i32 %bf.cast4.lcssa to i64, !dbg !6213
  %arrayidx25 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6213
  %4 = load i32, i32* %arrayidx25, align 4, !dbg !6213
  %cmp26 = icmp eq i32 %4, 1, !dbg !6213
  br i1 %cmp26, label %cleanup, label %lor.lhs.false27, !dbg !6215

lor.lhs.false27:                                  ; preds = %while.end
  %bf.cast312 = and i64 %bf.load2.lcssa, 65535, !dbg !6216
  %cmp32 = icmp eq i64 %bf.cast312, 47, !dbg !6216
  br i1 %cmp32, label %cleanup, label %lor.lhs.false33, !dbg !6216

lor.lhs.false33:                                  ; preds = %lor.lhs.false27
  %cmp38 = icmp eq i64 %bf.cast312, 48, !dbg !6216
  br i1 %cmp38, label %cleanup, label %lor.lhs.false39, !dbg !6216

lor.lhs.false39:                                  ; preds = %lor.lhs.false33
  %cmp44 = icmp eq i64 %bf.cast312, 49, !dbg !6216
  br i1 %cmp44, label %cleanup, label %if.end46, !dbg !6217

if.end46:                                         ; preds = %lor.lhs.false39
  %5 = trunc i64 %bf.load2.lcssa to i16, !dbg !6218
  switch i16 %5, label %sw.default [
    i16 34, label %cleanup
    i16 36, label %cleanup
    i16 30, label %cleanup
    i16 29, label %cleanup
    i16 32, label %cleanup
    i16 33, label %cleanup
  ], !dbg !6219

sw.default:                                       ; preds = %if.end46
  br label %cleanup, !dbg !6220

cleanup.loopexit:                                 ; preds = %land.lhs.true
  br label %cleanup, !dbg !6222

cleanup:                                          ; preds = %cleanup.loopexit, %entry, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %if.end46, %while.end, %lor.lhs.false27, %lor.lhs.false33, %lor.lhs.false39, %sw.default
  %retval.0 = phi i8 [ 0, %sw.default ], [ 0, %entry ], [ 1, %lor.lhs.false39 ], [ 1, %lor.lhs.false33 ], [ 1, %lor.lhs.false27 ], [ 1, %while.end ], [ 1, %if.end46 ], [ 1, %if.end46 ], [ 1, %if.end46 ], [ 1, %if.end46 ], [ 1, %if.end46 ], [ 1, %if.end46 ], [ 0, %cleanup.loopexit ], !dbg !6195
  ret i8 %retval.0, !dbg !6222
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_invariant_address(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6223 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6225, metadata !DIExpression()), !dbg !6227
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6228
  %bf.load = load i64, i64* %0, align 8, !dbg !6228
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6230
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !6230
  br i1 %cmp, label %if.end, label %cleanup, !dbg !6231

if.end:                                           ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6232
  %1 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6232
  %call = tail call fastcc %union.tree_node* @strip_invariant_refs(%union.tree_node* %1) #8, !dbg !6233
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6226, metadata !DIExpression()), !dbg !6227
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !6234
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6235

land.rhs:                                         ; preds = %if.end
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6236
  %bf.load2 = load i64, i64* %2, align 8, !dbg !6236
  %bf.cast4 = and i64 %bf.load2, 65535, !dbg !6236
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast4, !dbg !6236
  %3 = load i32, i32* %arrayidx5, align 4, !dbg !6236
  %cmp6 = icmp eq i32 %3, 1, !dbg !6236
  br i1 %cmp6, label %land.end, label %lor.rhs, !dbg !6237

lor.rhs:                                          ; preds = %land.rhs
  %call7 = tail call zeroext i8 @decl_address_invariant_p(%union.tree_node* nonnull %call) #7, !dbg !6238
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6237
  %phitmp = zext i1 %tobool8 to i8, !dbg !6237
  br label %land.end, !dbg !6237

land.end:                                         ; preds = %if.end, %land.rhs, %lor.rhs
  %4 = phi i8 [ 0, %if.end ], [ 1, %land.rhs ], [ %phitmp, %lor.rhs ]
  br label %cleanup, !dbg !6239

cleanup:                                          ; preds = %entry, %land.end
  %retval.0 = phi i8 [ %4, %land.end ], [ 0, %entry ], !dbg !6227
  ret i8 %retval.0, !dbg !6240
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @strip_invariant_refs(%union.tree_node* %op) unnamed_addr #5 !dbg !6241 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !6245, metadata !DIExpression()), !dbg !6246
  br label %while.cond, !dbg !6247

while.cond:                                       ; preds = %sw.epilog, %entry
  %op.addr.0 = phi %union.tree_node* [ %op, %entry ], [ %6, %sw.epilog ]
  call void @llvm.dbg.value(metadata %union.tree_node* %op.addr.0, metadata !6245, metadata !DIExpression()), !dbg !6246
  %call = tail call fastcc zeroext i8 @handled_component_p(%union.tree_node* %op.addr.0) #8, !dbg !6248
  %tobool = icmp eq i8 %call, 0, !dbg !6247
  br i1 %tobool, label %return, label %while.body, !dbg !6247

while.body:                                       ; preds = %while.cond
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %op.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6249
  %bf.load = load i64, i64* %0, align 8, !dbg !6249
  %1 = trunc i64 %bf.load to i16, !dbg !6249
  switch i16 %1, label %sw.epilog [
    i16 45, label %sw.bb
    i16 46, label %sw.bb
    i16 41, label %sw.bb11
  ], !dbg !6251

sw.bb:                                            ; preds = %while.body, %while.body
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %op.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6252
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !6252
  %2 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6252
  %call1 = tail call zeroext i8 @is_gimple_constant(%union.tree_node* %2) #8, !dbg !6255
  %tobool2 = icmp eq i8 %call1, 0, !dbg !6255
  br i1 %tobool2, label %return, label %lor.lhs.false, !dbg !6256

lor.lhs.false:                                    ; preds = %sw.bb
  %arrayidx5 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !6257
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx5, align 8, !dbg !6257
  %cmp = icmp eq %union.tree_node* %3, null, !dbg !6258
  br i1 %cmp, label %lor.lhs.false6, label %return, !dbg !6259

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %arrayidx9 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 3, !dbg !6260
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx9, align 8, !dbg !6260
  %cmp10 = icmp eq %union.tree_node* %4, null, !dbg !6261
  br i1 %cmp10, label %sw.epilog, label %return, !dbg !6262

sw.bb11:                                          ; preds = %while.body
  %operands13 = getelementptr inbounds %union.tree_node, %union.tree_node* %op.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6263
  %arrayidx14 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands13, i64 2, !dbg !6263
  %5 = load %union.tree_node*, %union.tree_node** %arrayidx14, align 8, !dbg !6263
  %cmp15 = icmp eq %union.tree_node* %5, null, !dbg !6265
  br i1 %cmp15, label %sw.epilog, label %return, !dbg !6266

sw.epilog:                                        ; preds = %lor.lhs.false6, %sw.bb11, %while.body
  %operands19 = getelementptr inbounds %union.tree_node, %union.tree_node* %op.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6267
  %6 = load %union.tree_node*, %union.tree_node** %operands19, align 8, !dbg !6267
  call void @llvm.dbg.value(metadata %union.tree_node* %6, metadata !6245, metadata !DIExpression()), !dbg !6246
  br label %while.cond, !dbg !6247, !llvm.loop !6268

return:                                           ; preds = %lor.lhs.false6, %lor.lhs.false, %sw.bb, %sw.bb11, %while.cond
  %retval.0 = phi %union.tree_node* [ null, %lor.lhs.false6 ], [ null, %lor.lhs.false ], [ null, %sw.bb ], [ null, %sw.bb11 ], [ %op.addr.0, %while.cond ], !dbg !6246
  ret %union.tree_node* %retval.0, !dbg !6270
}

declare dso_local zeroext i8 @decl_address_invariant_p(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_ip_invariant_address(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6271 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6273, metadata !DIExpression()), !dbg !6275
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6276
  %bf.load = load i64, i64* %0, align 8, !dbg !6276
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6278
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !6278
  br i1 %cmp, label %if.end, label %cleanup, !dbg !6279

if.end:                                           ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6280
  %1 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6280
  %call = tail call fastcc %union.tree_node* @strip_invariant_refs(%union.tree_node* %1) #8, !dbg !6281
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6274, metadata !DIExpression()), !dbg !6275
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !6282
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6283

land.rhs:                                         ; preds = %if.end
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6284
  %bf.load2 = load i64, i64* %2, align 8, !dbg !6284
  %bf.cast4 = and i64 %bf.load2, 65535, !dbg !6284
  %arrayidx5 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast4, !dbg !6284
  %3 = load i32, i32* %arrayidx5, align 4, !dbg !6284
  %cmp6 = icmp eq i32 %3, 1, !dbg !6284
  br i1 %cmp6, label %land.end, label %lor.rhs, !dbg !6285

lor.rhs:                                          ; preds = %land.rhs
  %call7 = tail call zeroext i8 @decl_address_ip_invariant_p(%union.tree_node* nonnull %call) #7, !dbg !6286
  %tobool8 = icmp ne i8 %call7, 0, !dbg !6285
  %phitmp = zext i1 %tobool8 to i8, !dbg !6285
  br label %land.end, !dbg !6285

land.end:                                         ; preds = %if.end, %land.rhs, %lor.rhs
  %4 = phi i8 [ 0, %if.end ], [ 1, %land.rhs ], [ %phitmp, %lor.rhs ]
  br label %cleanup, !dbg !6287

cleanup:                                          ; preds = %entry, %land.end
  %retval.0 = phi i8 [ %4, %land.end ], [ 0, %entry ], !dbg !6275
  ret i8 %retval.0, !dbg !6288
}

declare dso_local zeroext i8 @decl_address_ip_invariant_p(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_ip_invariant(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6289 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6291, metadata !DIExpression()), !dbg !6292
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6293
  %bf.load = load i64, i64* %0, align 8, !dbg !6293
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6295
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !6295
  br i1 %cmp, label %if.then, label %if.end, !dbg !6296

if.then:                                          ; preds = %entry
  %call = tail call zeroext i8 @is_gimple_ip_invariant_address(%union.tree_node* %t) #8, !dbg !6297
  br label %return, !dbg !6298

if.end:                                           ; preds = %entry
  %call1 = tail call zeroext i8 @is_gimple_constant(%union.tree_node* %t) #8, !dbg !6299
  br label %return, !dbg !6300

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i8 [ %call, %if.then ], [ %call1, %if.end ], !dbg !6292
  ret i8 %retval.0, !dbg !6301
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_stmt(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6302 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6304, metadata !DIExpression()), !dbg !6307
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6308
  %bf.load = load i64, i64* %0, align 8, !dbg !6308
  %1 = trunc i64 %bf.load to i16, !dbg !6308
  switch i16 %1, label %sw.default [
    i16 116, label %sw.bb
    i16 58, label %sw.bb10
    i16 56, label %sw.bb10
    i16 138, label %cleanup
    i16 134, label %cleanup
    i16 135, label %cleanup
    i16 133, label %cleanup
    i16 139, label %cleanup
    i16 130, label %cleanup
    i16 131, label %cleanup
    i16 143, label %cleanup
    i16 142, label %cleanup
    i16 140, label %cleanup
    i16 147, label %cleanup
    i16 153, label %cleanup
    i16 155, label %cleanup
    i16 156, label %cleanup
    i16 158, label %cleanup
    i16 157, label %cleanup
    i16 159, label %cleanup
    i16 160, label %cleanup
    i16 161, label %cleanup
    i16 154, label %cleanup
    i16 59, label %cleanup
    i16 53, label %cleanup
    i16 185, label %cleanup
  ], !dbg !6309

sw.bb:                                            ; preds = %entry
  %bf.cast42 = and i64 %bf.load, 65535, !dbg !6310
  %cmp = icmp eq i64 %bf.cast42, 116, !dbg !6310
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !6310

land.lhs.true:                                    ; preds = %sw.bb
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6310
  %2 = bitcast %union.tree_node** %type to i64**, !dbg !6310
  %3 = load i64*, i64** %2, align 8, !dbg !6310
  %bf.load6 = load i64, i64* %3, align 8, !dbg !6310
  %bf.cast84 = and i64 %bf.load6, 65535, !dbg !6310
  %cmp9 = icmp eq i64 %bf.cast84, 19, !dbg !6310
  br i1 %cmp9, label %land.rhs, label %land.end, !dbg !6310

land.rhs:                                         ; preds = %land.lhs.true
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6310
  %4 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6310
  %call = tail call i32 @integer_zerop(%union.tree_node* %4) #7, !dbg !6310
  %tobool = icmp ne i32 %call, 0, !dbg !6310
  %phitmp3 = zext i1 %tobool to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %sw.bb
  %5 = phi i8 [ 0, %land.lhs.true ], [ 0, %sw.bb ], [ %phitmp3, %land.rhs ]
  br label %cleanup, !dbg !6312

sw.bb10:                                          ; preds = %entry, %entry
  %type12 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6313
  %6 = load %union.tree_node*, %union.tree_node** %type12, align 8, !dbg !6313
  %cmp13 = icmp eq %union.tree_node* %6, null, !dbg !6314
  br i1 %cmp13, label %lor.end, label %lor.rhs, !dbg !6315

lor.rhs:                                          ; preds = %sw.bb10
  %7 = getelementptr inbounds %union.tree_node, %union.tree_node* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6315
  %bf.load18 = load i64, i64* %7, align 8, !dbg !6316
  %bf.cast201 = and i64 %bf.load18, 65535, !dbg !6316
  %cmp21 = icmp eq i64 %bf.cast201, 19, !dbg !6316
  %phitmp = zext i1 %cmp21 to i8, !dbg !6315
  br label %lor.end, !dbg !6315

lor.end:                                          ; preds = %lor.rhs, %sw.bb10
  %8 = phi i8 [ 1, %sw.bb10 ], [ %phitmp, %lor.rhs ]
  br label %cleanup, !dbg !6317

sw.default:                                       ; preds = %entry
  br label %cleanup, !dbg !6318

cleanup:                                          ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry, %sw.default, %lor.end, %land.end
  %retval.0 = phi i8 [ 0, %sw.default ], [ %8, %lor.end ], [ %5, %land.end ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], [ 1, %entry ], !dbg !6319
  ret i8 %retval.0, !dbg !6320
}

declare dso_local i32 @integer_zerop(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_variable(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6321 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6323, metadata !DIExpression()), !dbg !6324
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6325
  %bf.load = load i64, i64* %0, align 8, !dbg !6325
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6326
  %cmp = icmp eq i64 %bf.cast1, 32, !dbg !6326
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !6327

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 34, !dbg !6328
  br i1 %cmp5, label %lor.end, label %lor.lhs.false6, !dbg !6329

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %cmp11 = icmp eq i64 %bf.cast1, 36, !dbg !6330
  br i1 %cmp11, label %lor.end, label %lor.rhs, !dbg !6331

lor.rhs:                                          ; preds = %lor.lhs.false6
  %cmp16 = icmp eq i64 %bf.cast1, 141, !dbg !6332
  %phitmp = zext i1 %cmp16 to i8, !dbg !6331
  br label %lor.end, !dbg !6331

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false6, %lor.lhs.false, %entry
  %1 = phi i8 [ 1, %lor.lhs.false6 ], [ 1, %lor.lhs.false ], [ 1, %entry ], [ %phitmp, %lor.rhs ]
  ret i8 %1, !dbg !6333
}

declare dso_local zeroext i8 @needs_to_live_in_memory(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_non_addressable(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6334 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6336, metadata !DIExpression()), !dbg !6337
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6338
  %bf.load = load i64, i64* %0, align 8, !dbg !6338
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6340
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !6340
  br i1 %cmp, label %if.then, label %if.end, !dbg !6341

if.then:                                          ; preds = %entry
  %var = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6342
  %1 = bitcast i32* %var to %union.tree_node**, !dbg !6342
  %2 = load %union.tree_node*, %union.tree_node** %1, align 8, !dbg !6342
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !6336, metadata !DIExpression()), !dbg !6337
  br label %if.end, !dbg !6343

if.end:                                           ; preds = %if.then, %entry
  %t.addr.0 = phi %union.tree_node* [ %2, %if.then ], [ %t, %entry ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0, metadata !6336, metadata !DIExpression()), !dbg !6337
  %call = tail call zeroext i8 @is_gimple_variable(%union.tree_node* %t.addr.0) #8, !dbg !6344
  %tobool = icmp eq i8 %call, 0, !dbg !6344
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6345

land.rhs:                                         ; preds = %if.end
  %call1 = tail call zeroext i8 @needs_to_live_in_memory(%union.tree_node* %t.addr.0) #7, !dbg !6346
  %tobool2 = icmp eq i8 %call1, 0, !dbg !6347
  %phitmp = zext i1 %tobool2 to i8
  br label %land.end

land.end:                                         ; preds = %if.end, %land.rhs
  %3 = phi i8 [ 0, %if.end ], [ %phitmp, %land.rhs ]
  ret i8 %3, !dbg !6348
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_asm_val(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6349 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6351, metadata !DIExpression()), !dbg !6352
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6353
  %bf.load = load i64, i64* %0, align 8, !dbg !6353
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6355
  %cmp = icmp eq i64 %bf.cast1, 32, !dbg !6355
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6356

land.lhs.true:                                    ; preds = %entry
  %hard_register = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 4, !dbg !6357
  %1 = bitcast i24* %hard_register to i32*, !dbg !6357
  %bf.load1 = load i32, i32* %1, align 8, !dbg !6357
  %bf.clear2 = and i32 %bf.load1, 2, !dbg !6357
  %tobool = icmp eq i32 %bf.clear2, 0, !dbg !6357
  br i1 %tobool, label %if.end, label %return, !dbg !6358

if.end:                                           ; preds = %land.lhs.true, %entry
  %call = tail call zeroext i8 @is_gimple_val(%union.tree_node* %t) #8, !dbg !6359
  br label %return, !dbg !6360

return:                                           ; preds = %land.lhs.true, %if.end
  %retval.0 = phi i8 [ %call, %if.end ], [ 1, %land.lhs.true ], !dbg !6352
  ret i8 %retval.0, !dbg !6361
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_min_lval(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6362 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6364, metadata !DIExpression()), !dbg !6365
  %call = tail call fastcc %union.tree_node* @strip_invariant_refs(%union.tree_node* %t) #8, !dbg !6366
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6364, metadata !DIExpression()), !dbg !6365
  %tobool = icmp eq %union.tree_node* %call, null, !dbg !6368
  br i1 %tobool, label %return, label %if.end, !dbg !6369

if.end:                                           ; preds = %entry
  %call1 = tail call zeroext i8 @is_gimple_id(%union.tree_node* nonnull %call) #8, !dbg !6370
  %tobool2 = icmp eq i8 %call1, 0, !dbg !6370
  br i1 %tobool2, label %lor.rhs, label %lor.end, !dbg !6371

lor.rhs:                                          ; preds = %if.end
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6372
  %bf.load = load i64, i64* %0, align 8, !dbg !6372
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6373
  %cmp = icmp eq i64 %bf.cast1, 47, !dbg !6373
  %phitmp = zext i1 %cmp to i8, !dbg !6371
  br label %lor.end, !dbg !6371

lor.end:                                          ; preds = %if.end, %lor.rhs
  %1 = phi i8 [ 1, %if.end ], [ %phitmp, %lor.rhs ]
  br label %return, !dbg !6374

return:                                           ; preds = %entry, %lor.end
  %retval.0 = phi i8 [ %1, %lor.end ], [ 0, %entry ], !dbg !6365
  ret i8 %retval.0, !dbg !6375
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @is_gimple_cast(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6376 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6378, metadata !DIExpression()), !dbg !6379
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6380
  %bf.load = load i64, i64* %0, align 8, !dbg !6380
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6380
  %cmp = icmp eq i64 %bf.cast1, 116, !dbg !6380
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !6380

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 113, !dbg !6380
  br i1 %cmp5, label %lor.end, label %lor.rhs, !dbg !6381

lor.rhs:                                          ; preds = %lor.lhs.false
  %cmp10 = icmp eq i64 %bf.cast1, 77, !dbg !6382
  %phitmp = zext i1 %cmp10 to i8, !dbg !6381
  br label %lor.end, !dbg !6381

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %1 = phi i8 [ 1, %lor.lhs.false ], [ 1, %entry ], [ %phitmp, %lor.rhs ]
  ret i8 %1, !dbg !6383
}

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @get_call_expr_in(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6384 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6388, metadata !DIExpression()), !dbg !6389
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6390
  %bf.load = load i64, i64* %0, align 8, !dbg !6390
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6392
  %cmp = icmp eq i64 %bf.cast1, 53, !dbg !6392
  br i1 %cmp, label %if.then, label %if.end, !dbg !6393

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6394
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 1, !dbg !6394
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6394
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !6388, metadata !DIExpression()), !dbg !6389
  %.phi.trans.insert = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6395
  %bf.load2.pre = load i64, i64* %.phi.trans.insert, align 8, !dbg !6397
  br label %if.end, !dbg !6398

if.end:                                           ; preds = %if.then, %entry
  %bf.load2 = phi i64 [ %bf.load2.pre, %if.then ], [ %bf.load, %entry ], !dbg !6397
  %t.addr.0 = phi %union.tree_node* [ %1, %if.then ], [ %t, %entry ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0, metadata !6388, metadata !DIExpression()), !dbg !6389
  %bf.cast42 = and i64 %bf.load2, 65535, !dbg !6399
  %cmp5 = icmp eq i64 %bf.cast42, 150, !dbg !6399
  br i1 %cmp5, label %if.then6, label %if.end10, !dbg !6400

if.then6:                                         ; preds = %if.end
  %operands8 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6401
  %2 = load %union.tree_node*, %union.tree_node** %operands8, align 8, !dbg !6401
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !6388, metadata !DIExpression()), !dbg !6389
  %.phi.trans.insert5 = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6402
  %bf.load12.pre = load i64, i64* %.phi.trans.insert5, align 8, !dbg !6404
  %.pre = and i64 %bf.load12.pre, 65535, !dbg !6405
  br label %if.end10, !dbg !6406

if.end10:                                         ; preds = %if.then6, %if.end
  %bf.cast143.pre-phi = phi i64 [ %.pre, %if.then6 ], [ %bf.cast42, %if.end ], !dbg !6405
  %t.addr.1 = phi %union.tree_node* [ %2, %if.then6 ], [ %t.addr.0, %if.end ], !dbg !6389
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.1, metadata !6388, metadata !DIExpression()), !dbg !6389
  %cmp15 = icmp eq i64 %bf.cast143.pre-phi, 59, !dbg !6405
  %t.addr.1. = select i1 %cmp15, %union.tree_node* %t.addr.1, %union.tree_node* null, !dbg !6389
  ret %union.tree_node* %t.addr.1., !dbg !6407
}

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @get_base_address(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6408 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6410, metadata !DIExpression()), !dbg !6411
  br label %while.cond, !dbg !6412

while.cond:                                       ; preds = %while.body, %entry
  %t.addr.0 = phi %union.tree_node* [ %t, %entry ], [ %0, %while.body ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0, metadata !6410, metadata !DIExpression()), !dbg !6411
  %call = tail call fastcc zeroext i8 @handled_component_p(%union.tree_node* %t.addr.0) #8, !dbg !6413
  %tobool = icmp eq i8 %call, 0, !dbg !6412
  br i1 %tobool, label %while.end, label %while.body, !dbg !6412

while.body:                                       ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6414
  %0 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6414
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !6410, metadata !DIExpression()), !dbg !6411
  br label %while.cond, !dbg !6412, !llvm.loop !6415

while.end:                                        ; preds = %while.cond
  %t.addr.0.lcssa = phi %union.tree_node* [ %t.addr.0, %while.cond ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0.lcssa, metadata !6410, metadata !DIExpression()), !dbg !6411
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0.lcssa, metadata !6410, metadata !DIExpression()), !dbg !6411
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0.lcssa, metadata !6410, metadata !DIExpression()), !dbg !6411
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6416
  %bf.load = load i64, i64* %1, align 8, !dbg !6416
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6416
  %cmp = icmp eq i64 %bf.cast1, 32, !dbg !6416
  br i1 %cmp, label %return, label %lor.lhs.false, !dbg !6416

lor.lhs.false:                                    ; preds = %while.end
  %cmp5 = icmp eq i64 %bf.cast1, 34, !dbg !6416
  br i1 %cmp5, label %return, label %lor.lhs.false6, !dbg !6416

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %cmp11 = icmp eq i64 %bf.cast1, 36, !dbg !6416
  br i1 %cmp11, label %return, label %lor.lhs.false12, !dbg !6416

lor.lhs.false12:                                  ; preds = %lor.lhs.false6
  %cmp17 = icmp eq i64 %bf.cast1, 141, !dbg !6416
  br i1 %cmp17, label %land.lhs.true, label %lor.lhs.false39, !dbg !6416

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %var = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6416
  %2 = bitcast i32* %var to i64**, !dbg !6416
  %3 = load i64*, i64** %2, align 8, !dbg !6416
  %bf.load19 = load i64, i64* %3, align 8, !dbg !6416
  %bf.cast2110 = and i64 %bf.load19, 65535, !dbg !6416
  %cmp22 = icmp eq i64 %bf.cast2110, 32, !dbg !6416
  br i1 %cmp22, label %return, label %lor.lhs.false23, !dbg !6416

lor.lhs.false23:                                  ; preds = %land.lhs.true
  %cmp30 = icmp eq i64 %bf.cast2110, 34, !dbg !6416
  br i1 %cmp30, label %return, label %lor.lhs.false31, !dbg !6416

lor.lhs.false31:                                  ; preds = %lor.lhs.false23
  %cmp38 = icmp eq i64 %bf.cast2110, 36, !dbg !6416
  br i1 %cmp38, label %return, label %lor.lhs.false39, !dbg !6418

lor.lhs.false39:                                  ; preds = %lor.lhs.false31, %lor.lhs.false12
  %cmp44 = icmp eq i64 %bf.cast1, 28, !dbg !6419
  br i1 %cmp44, label %return, label %lor.lhs.false45, !dbg !6420

lor.lhs.false45:                                  ; preds = %lor.lhs.false39
  %cmp50 = icmp eq i64 %bf.cast1, 51, !dbg !6421
  br i1 %cmp50, label %return, label %lor.lhs.false51, !dbg !6422

lor.lhs.false51:                                  ; preds = %lor.lhs.false45
  %cmp56 = icmp eq i64 %bf.cast1, 47, !dbg !6423
  br i1 %cmp56, label %return, label %lor.lhs.false57, !dbg !6423

lor.lhs.false57:                                  ; preds = %lor.lhs.false51
  %cmp62 = icmp eq i64 %bf.cast1, 48, !dbg !6423
  br i1 %cmp62, label %return, label %lor.lhs.false63, !dbg !6423

lor.lhs.false63:                                  ; preds = %lor.lhs.false57
  %cmp68 = icmp eq i64 %bf.cast1, 49, !dbg !6423
  %spec.select = select i1 %cmp68, %union.tree_node* %t.addr.0.lcssa, %union.tree_node* null, !dbg !6424
  ret %union.tree_node* %spec.select, !dbg !6424

return:                                           ; preds = %while.end, %lor.lhs.false, %lor.lhs.false6, %land.lhs.true, %lor.lhs.false23, %lor.lhs.false31, %lor.lhs.false39, %lor.lhs.false45, %lor.lhs.false51, %lor.lhs.false57
  ret %union.tree_node* %t.addr.0.lcssa, !dbg !6425
}

; Function Attrs: nounwind uwtable
define dso_local void @recalculate_side_effects(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6426 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6430, metadata !DIExpression()), !dbg !6439
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6440
  %bf.load = load i64, i64* %0, align 8, !dbg !6440
  %bf.cast = and i64 %bf.load, 65535, !dbg !6440
  %call = tail call fastcc i32 @tree_operand_length(%union.tree_node* %t) #8, !dbg !6441
  call void @llvm.dbg.value(metadata i32 %call, metadata !6432, metadata !DIExpression()), !dbg !6439
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !6442
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6442
  switch i32 %1, label %sw.default23 [
    i32 10, label %sw.bb
    i32 5, label %sw.bb2
    i32 6, label %sw.bb2
    i32 7, label %sw.bb2
    i32 4, label %sw.bb2
    i32 9, label %sw.bb2
    i32 1, label %cleanup.cont
  ], !dbg !6443

sw.bb:                                            ; preds = %entry
  %trunc = trunc i64 %bf.load to i16, !dbg !6444
  switch i16 %trunc, label %sw.bb2 [
    i16 54, label %cleanup.cont
    i16 53, label %cleanup.cont
    i16 129, label %cleanup.cont
    i16 125, label %cleanup.cont
    i16 126, label %cleanup.cont
    i16 127, label %cleanup.cont
    i16 128, label %cleanup.cont
  ], !dbg !6444

sw.bb2:                                           ; preds = %sw.bb, %entry, %entry, %entry, %entry, %entry
  %bf.load4 = load i64, i64* %0, align 8, !dbg !6445
  %2 = lshr i64 %bf.load4, 3, !dbg !6446
  %bf.shl = and i64 %2, 65536, !dbg !6446
  %bf.clear9 = and i64 %bf.load4, -65537, !dbg !6446
  %bf.set = or i64 %bf.clear9, %bf.shl, !dbg !6446
  store i64 %bf.set, i64* %0, align 8, !dbg !6446
  call void @llvm.dbg.value(metadata i32 0, metadata !6433, metadata !DIExpression()), !dbg !6439
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6447
  %3 = sext i32 %call to i64, !dbg !6448
  br label %for.cond, !dbg !6448

for.cond:                                         ; preds = %for.inc, %sw.bb2
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %sw.bb2 ]
  %bf.load19 = phi i64 [ %bf.load192, %for.inc ], [ %bf.set, %sw.bb2 ]
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !6433, metadata !DIExpression()), !dbg !6439
  %cmp = icmp slt i64 %indvars.iv, %3, !dbg !6449
  br i1 %cmp, label %for.body, label %cleanup.cont.loopexit, !dbg !6450

for.body:                                         ; preds = %for.cond
  %arrayidx11 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 %indvars.iv, !dbg !6451
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx11, align 8, !dbg !6451
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !6434, metadata !DIExpression()), !dbg !6447
  %tobool = icmp eq %union.tree_node* %4, null, !dbg !6452
  br i1 %tobool, label %for.inc, label %land.lhs.true, !dbg !6454

land.lhs.true:                                    ; preds = %for.body
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6455
  %bf.load13 = load i64, i64* %5, align 8, !dbg !6455
  %bf.cast161 = and i64 %bf.load13, 65536, !dbg !6455
  %tobool17 = icmp eq i64 %bf.cast161, 0, !dbg !6455
  br i1 %tobool17, label %for.inc, label %if.then, !dbg !6456

if.then:                                          ; preds = %land.lhs.true
  %bf.set21 = or i64 %bf.load19, 65536, !dbg !6457
  store i64 %bf.set21, i64* %0, align 8, !dbg !6457
  br label %for.inc, !dbg !6458

for.inc:                                          ; preds = %land.lhs.true, %for.body, %if.then
  %bf.load192 = phi i64 [ %bf.load19, %land.lhs.true ], [ %bf.load19, %for.body ], [ %bf.set21, %if.then ]
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !6459
  call void @llvm.dbg.value(metadata i32 undef, metadata !6433, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !6439
  br label %for.cond, !dbg !6460, !llvm.loop !6461

sw.default23:                                     ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 2917, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !6463
  br label %cleanup.cont, !dbg !6464

cleanup.cont.loopexit:                            ; preds = %for.cond
  br label %cleanup.cont, !dbg !6465

cleanup.cont:                                     ; preds = %cleanup.cont.loopexit, %sw.bb, %sw.bb, %sw.bb, %sw.bb, %sw.bb, %sw.bb, %sw.bb, %entry, %sw.default23
  ret void, !dbg !6465
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @tree_operand_length(%union.tree_node* %node) unnamed_addr #0 !dbg !6466 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %node, metadata !6470, metadata !DIExpression()), !dbg !6471
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %node, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6472
  %bf.load = load i64, i64* %0, align 8, !dbg !6472
  %bf.cast = and i64 %bf.load, 65535, !dbg !6472
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !6472
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6472
  %cmp = icmp eq i32 %1, 9, !dbg !6472
  br i1 %cmp, label %if.then, label %if.else, !dbg !6474

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %node, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6475
  %2 = bitcast %union.tree_node** %operands to %struct.tree_int_cst**, !dbg !6475
  %3 = load %struct.tree_int_cst*, %struct.tree_int_cst** %2, align 8, !dbg !6475
  %low = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %3, i64 0, i32 1, i32 0, !dbg !6475
  %4 = load i64, i64* %low, align 8, !dbg !6475
  %conv = trunc i64 %4 to i32, !dbg !6475
  br label %return, !dbg !6476

if.else:                                          ; preds = %entry
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %bf.cast, !dbg !6477
  %5 = load i8, i8* %arrayidx8, align 1, !dbg !6477
  %conv9 = zext i8 %5 to i32, !dbg !6477
  br label %return, !dbg !6478

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %conv, %if.then ], [ %conv9, %if.else ], !dbg !6479
  ret i32 %retval.0, !dbg !6480
}

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @canonicalize_cond_expr_cond(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6481 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6483, metadata !DIExpression()), !dbg !6493
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6494
  %bf.load = load i64, i64* %0, align 8, !dbg !6494
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6494
  %cmp = icmp eq i64 %bf.cast1, 116, !dbg !6494
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !6494

lor.lhs.false:                                    ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 113, !dbg !6494
  br i1 %cmp5, label %land.lhs.true, label %if.end, !dbg !6496

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6497
  %1 = bitcast %union.tree_node** %operands to i64**, !dbg !6497
  %2 = load i64*, i64** %1, align 8, !dbg !6497
  %bf.load7 = load i64, i64* %2, align 8, !dbg !6497
  %3 = trunc i64 %bf.load7 to i32, !dbg !6497
  %bf.cast9 = and i32 %3, 65535, !dbg !6497
  %call = tail call fastcc zeroext i8 @truth_value_p(i32 %bf.cast9) #8, !dbg !6498
  %tobool = icmp eq i8 %call, 0, !dbg !6498
  br i1 %tobool, label %if.end, label %if.then, !dbg !6499

if.then:                                          ; preds = %land.lhs.true
  %4 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !6500
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !6483, metadata !DIExpression()), !dbg !6493
  br label %if.end, !dbg !6501

if.end:                                           ; preds = %land.lhs.true, %if.then, %lor.lhs.false
  %t.addr.0 = phi %union.tree_node* [ %4, %if.then ], [ %t, %land.lhs.true ], [ %t, %lor.lhs.false ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0, metadata !6483, metadata !DIExpression()), !dbg !6493
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6502
  %bf.load14 = load i64, i64* %5, align 8, !dbg !6502
  %bf.cast163 = and i64 %bf.load14, 65535, !dbg !6502
  %cmp17 = icmp eq i64 %bf.cast163, 116, !dbg !6502
  br i1 %cmp17, label %land.lhs.true26, label %lor.lhs.false19, !dbg !6502

lor.lhs.false19:                                  ; preds = %if.end
  %cmp24 = icmp eq i64 %bf.cast163, 113, !dbg !6502
  br i1 %cmp24, label %land.lhs.true26, label %if.else, !dbg !6503

land.lhs.true26:                                  ; preds = %lor.lhs.false19, %if.end
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6504
  %6 = bitcast %union.tree_node** %type to i64**, !dbg !6504
  %7 = load i64*, i64** %6, align 8, !dbg !6504
  %bf.load28 = load i64, i64* %7, align 8, !dbg !6504
  %bf.cast307 = and i64 %bf.load28, 65535, !dbg !6505
  %cmp31 = icmp eq i64 %bf.cast307, 7, !dbg !6505
  br i1 %cmp31, label %if.then33, label %if.else, !dbg !6506

if.then33:                                        ; preds = %land.lhs.true26
  %8 = bitcast i64* %7 to %union.tree_node*, !dbg !6506
  %operands35 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6507
  %9 = load %union.tree_node*, %union.tree_node** %operands35, align 8, !dbg !6507
  call void @llvm.dbg.value(metadata %union.tree_node* %9, metadata !6484, metadata !DIExpression()), !dbg !6508
  %type40 = getelementptr inbounds %union.tree_node, %union.tree_node* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6509
  %10 = load %union.tree_node*, %union.tree_node** %type40, align 8, !dbg !6509
  %call41 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %10, i64 0) #7, !dbg !6509
  %call42 = tail call %union.tree_node* @build2_stat(i32 102, %union.tree_node* %8, %union.tree_node* %9, %union.tree_node* %call41) #7, !dbg !6509
  call void @llvm.dbg.value(metadata %union.tree_node* %call42, metadata !6483, metadata !DIExpression()), !dbg !6493
  br label %if.end110, !dbg !6510

if.else:                                          ; preds = %land.lhs.true26, %lor.lhs.false19
  %cmp47 = icmp eq i64 %bf.cast163, 96, !dbg !6511
  br i1 %cmp47, label %if.then49, label %if.else60, !dbg !6512

if.then49:                                        ; preds = %if.else
  %operands52 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6513
  %11 = load %union.tree_node*, %union.tree_node** %operands52, align 8, !dbg !6513
  call void @llvm.dbg.value(metadata %union.tree_node* %11, metadata !6487, metadata !DIExpression()), !dbg !6514
  %type55 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6515
  %12 = load %union.tree_node*, %union.tree_node** %type55, align 8, !dbg !6515
  %type57 = getelementptr inbounds %union.tree_node, %union.tree_node* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6515
  %13 = load %union.tree_node*, %union.tree_node** %type57, align 8, !dbg !6515
  %call58 = tail call %union.tree_node* @build_int_cst(%union.tree_node* %13, i64 0) #7, !dbg !6515
  %call59 = tail call %union.tree_node* @build2_stat(i32 101, %union.tree_node* %12, %union.tree_node* %11, %union.tree_node* %call58) #7, !dbg !6515
  call void @llvm.dbg.value(metadata %union.tree_node* %call59, metadata !6483, metadata !DIExpression()), !dbg !6493
  br label %if.end110, !dbg !6516

if.else60:                                        ; preds = %if.else
  %cmp65 = icmp eq i64 %bf.cast163, 56, !dbg !6517
  br i1 %cmp65, label %land.lhs.true67, label %if.end110, !dbg !6518

land.lhs.true67:                                  ; preds = %if.else60
  %operands69 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6519
  %14 = bitcast %union.tree_node** %operands69 to i64**, !dbg !6519
  %15 = load i64*, i64** %14, align 8, !dbg !6519
  %bf.load72 = load i64, i64* %15, align 8, !dbg !6519
  %bf.cast74 = and i64 %bf.load72, 65535, !dbg !6519
  %arrayidx75 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast74, !dbg !6519
  %16 = load i32, i32* %arrayidx75, align 4, !dbg !6519
  %cmp76 = icmp eq i32 %16, 5, !dbg !6519
  br i1 %cmp76, label %land.lhs.true78, label %if.end110, !dbg !6520

land.lhs.true78:                                  ; preds = %land.lhs.true67
  %arrayidx81 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands69, i64 1, !dbg !6521
  %17 = load %union.tree_node*, %union.tree_node** %arrayidx81, align 8, !dbg !6521
  %call82 = tail call i32 @integer_onep(%union.tree_node* %17) #7, !dbg !6522
  %tobool83 = icmp eq i32 %call82, 0, !dbg !6522
  br i1 %tobool83, label %if.end110, label %land.lhs.true84, !dbg !6523

land.lhs.true84:                                  ; preds = %land.lhs.true78
  %arrayidx87 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands69, i64 2, !dbg !6524
  %18 = load %union.tree_node*, %union.tree_node** %arrayidx87, align 8, !dbg !6524
  %call88 = tail call i32 @integer_zerop(%union.tree_node* %18) #7, !dbg !6525
  %tobool89 = icmp eq i32 %call88, 0, !dbg !6525
  br i1 %tobool89, label %if.end110, label %if.then90, !dbg !6526

if.then90:                                        ; preds = %land.lhs.true84
  %19 = load %union.tree_node*, %union.tree_node** %operands69, align 8, !dbg !6527
  call void @llvm.dbg.value(metadata %union.tree_node* %19, metadata !6490, metadata !DIExpression()), !dbg !6528
  %20 = getelementptr inbounds %union.tree_node, %union.tree_node* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6529
  %bf.load96 = load i64, i64* %20, align 8, !dbg !6529
  %21 = trunc i64 %bf.load96 to i32, !dbg !6529
  %bf.cast98 = and i32 %21, 65535, !dbg !6529
  %type100 = getelementptr inbounds %union.tree_node, %union.tree_node* %t.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6529
  %22 = load %union.tree_node*, %union.tree_node** %type100, align 8, !dbg !6529
  %operands102 = getelementptr inbounds %union.tree_node, %union.tree_node* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !6529
  %23 = load %union.tree_node*, %union.tree_node** %operands102, align 8, !dbg !6529
  %arrayidx106 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands102, i64 1, !dbg !6529
  %24 = load %union.tree_node*, %union.tree_node** %arrayidx106, align 8, !dbg !6529
  %call107 = tail call %union.tree_node* @build2_stat(i32 %bf.cast98, %union.tree_node* %22, %union.tree_node* %23, %union.tree_node* %24) #7, !dbg !6529
  call void @llvm.dbg.value(metadata %union.tree_node* %call107, metadata !6483, metadata !DIExpression()), !dbg !6493
  br label %if.end110, !dbg !6530

if.end110:                                        ; preds = %land.lhs.true84, %land.lhs.true78, %if.then49, %if.then90, %land.lhs.true67, %if.else60, %if.then33
  %t.addr.3 = phi %union.tree_node* [ %call42, %if.then33 ], [ %call59, %if.then49 ], [ %call107, %if.then90 ], [ %t.addr.0, %land.lhs.true84 ], [ %t.addr.0, %land.lhs.true78 ], [ %t.addr.0, %land.lhs.true67 ], [ %t.addr.0, %if.else60 ], !dbg !6531
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.3, metadata !6483, metadata !DIExpression()), !dbg !6493
  %call111 = tail call zeroext i8 @is_gimple_condexpr(%union.tree_node* %t.addr.3) #8, !dbg !6532
  %tobool112 = icmp eq i8 %call111, 0, !dbg !6532
  %t.addr.3. = select i1 %tobool112, %union.tree_node* null, %union.tree_node* %t.addr.3, !dbg !6493
  ret %union.tree_node* %t.addr.3., !dbg !6534
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @truth_value_p(i32 %code) unnamed_addr #0 !dbg !6535 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !6539, metadata !DIExpression()), !dbg !6540
  %idxprom = sext i32 %code to i64, !dbg !6541
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !6541
  %0 = load i32, i32* %arrayidx, align 4, !dbg !6541
  %cmp = icmp eq i32 %0, 5, !dbg !6542
  %cmp1 = icmp eq i32 %code, 93, !dbg !6543
  %or.cond = or i1 %cmp, %cmp1, !dbg !6544
  %cmp3 = icmp eq i32 %code, 91, !dbg !6545
  %or.cond1 = or i1 %or.cond, %cmp3, !dbg !6544
  %1 = or i32 %code, 2, !dbg !6544
  %2 = icmp eq i32 %1, 94, !dbg !6544
  %3 = or i1 %2, %or.cond1, !dbg !6544
  %4 = add i32 %code, -95, !dbg !6544
  %5 = icmp ult i32 %4, 2, !dbg !6544
  %6 = or i1 %5, %3, !dbg !6544
  %conv = zext i1 %6 to i8, !dbg !6546
  ret i8 %conv, !dbg !6547
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) local_unnamed_addr #2

declare dso_local i32 @integer_onep(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.gimple_statement_d* @gimple_call_copy_skip_args(%union.gimple_statement_d* %stmt, %struct.bitmap_head_def* %args_to_skip) local_unnamed_addr #5 !dbg !6548 {
entry:
  %vargs = alloca %struct.VEC_tree_heap*, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6552, metadata !DIExpression()), !dbg !6559
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %args_to_skip, metadata !6553, metadata !DIExpression()), !dbg !6559
  %call = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %stmt) #8, !dbg !6560
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6555, metadata !DIExpression()), !dbg !6559
  %call1 = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #8, !dbg !6561
  call void @llvm.dbg.value(metadata i32 %call1, metadata !6556, metadata !DIExpression()), !dbg !6559
  %0 = bitcast %struct.VEC_tree_heap** %vargs to i8*, !dbg !6562
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #6, !dbg !6562
  %call2 = tail call fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %call1) #8, !dbg !6563
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %call2, metadata !6557, metadata !DIExpression()), !dbg !6559
  store %struct.VEC_tree_heap* %call2, %struct.VEC_tree_heap** %vargs, align 8, !dbg !6564
  call void @llvm.dbg.value(metadata i32 0, metadata !6554, metadata !DIExpression()), !dbg !6559
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %call2, i64 0, i32 0, !dbg !6565
  br label %for.cond, !dbg !6569

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !6570
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !6554, metadata !DIExpression()), !dbg !6559
  %cmp = icmp slt i32 %i.0, %call1, !dbg !6571
  br i1 %cmp, label %for.body, label %for.end, !dbg !6572

for.body:                                         ; preds = %for.cond
  %call3 = tail call i32 @bitmap_bit_p(%struct.bitmap_head_def* %args_to_skip, i32 %i.0) #7, !dbg !6573
  %tobool = icmp eq i32 %call3, 0, !dbg !6573
  br i1 %tobool, label %if.then, label %for.inc, !dbg !6574

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %call2, metadata !6557, metadata !DIExpression()), !dbg !6559
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %call2, metadata !6557, metadata !DIExpression()), !dbg !6559
  %call5 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %stmt, i32 %i.0) #8, !dbg !6575
  %call6 = tail call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %base, %union.tree_node* %call5) #8, !dbg !6575
  br label %for.inc, !dbg !6575

for.inc:                                          ; preds = %for.body, %if.then
  %inc = add nuw nsw i32 %i.0, 1, !dbg !6576
  call void @llvm.dbg.value(metadata i32 %inc, metadata !6554, metadata !DIExpression()), !dbg !6559
  br label %for.cond, !dbg !6577, !llvm.loop !6578

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %call2, metadata !6557, metadata !DIExpression()), !dbg !6559
  %call7 = tail call %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %call, %struct.VEC_tree_heap* %call2) #8, !dbg !6580
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call7, metadata !6558, metadata !DIExpression()), !dbg !6559
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vargs, metadata !6557, metadata !DIExpression(DW_OP_deref)), !dbg !6559
  call fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** nonnull %vargs) #8, !dbg !6581
  %call8 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !6582
  %tobool9 = icmp eq %union.tree_node* %call8, null, !dbg !6582
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !6584

if.then10:                                        ; preds = %for.end
  %call11 = call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !6585
  call fastcc void @gimple_call_set_lhs(%union.gimple_statement_d* %call7, %union.tree_node* %call11) #8, !dbg !6586
  br label %if.end12, !dbg !6586

if.end12:                                         ; preds = %for.end, %if.then10
  %call13 = call fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %stmt) #8, !dbg !6587
  call fastcc void @gimple_set_vuse(%union.gimple_statement_d* %call7, %union.tree_node* %call13) #8, !dbg !6588
  %call14 = call fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %stmt) #8, !dbg !6589
  call fastcc void @gimple_set_vdef(%union.gimple_statement_d* %call7, %union.tree_node* %call14) #8, !dbg !6590
  %call15 = call fastcc %union.tree_node* @gimple_block(%union.gimple_statement_d* %stmt) #8, !dbg !6591
  call fastcc void @gimple_set_block(%union.gimple_statement_d* %call7, %union.tree_node* %call15) #8, !dbg !6592
  %call16 = call fastcc zeroext i8 @gimple_has_location(%union.gimple_statement_d* %stmt) #8, !dbg !6593
  %tobool17 = icmp eq i8 %call16, 0, !dbg !6593
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !6595

if.then18:                                        ; preds = %if.end12
  %call19 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %stmt) #8, !dbg !6596
  call fastcc void @gimple_set_location(%union.gimple_statement_d* %call7, i32 %call19) #8, !dbg !6597
  br label %if.end20, !dbg !6597

if.end20:                                         ; preds = %if.end12, %if.then18
  %call21 = call fastcc %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %stmt) #8, !dbg !6598
  call fastcc void @gimple_call_set_chain(%union.gimple_statement_d* %call7, %union.tree_node* %call21) #8, !dbg !6599
  %call22 = call fastcc zeroext i8 @gimple_call_tail_p(%union.gimple_statement_d* %stmt) #8, !dbg !6600
  call fastcc void @gimple_call_set_tail(%union.gimple_statement_d* %call7, i8 zeroext %call22) #8, !dbg !6601
  %call23 = call fastcc zeroext i8 @gimple_call_cannot_inline_p(%union.gimple_statement_d* %stmt) #8, !dbg !6602
  call fastcc void @gimple_call_set_cannot_inline(%union.gimple_statement_d* %call7, i8 zeroext %call23) #8, !dbg !6603
  %call24 = call fastcc zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %stmt) #8, !dbg !6604
  call fastcc void @gimple_call_set_return_slot_opt(%union.gimple_statement_d* %call7, i8 zeroext %call24) #8, !dbg !6605
  %call25 = call fastcc zeroext i8 @gimple_call_from_thunk_p(%union.gimple_statement_d* %stmt) #8, !dbg !6606
  call fastcc void @gimple_call_set_from_thunk(%union.gimple_statement_d* %call7, i8 zeroext %call25) #8, !dbg !6607
  %call26 = call fastcc zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %stmt) #8, !dbg !6608
  call fastcc void @gimple_call_set_va_arg_pack(%union.gimple_statement_d* %call7, i8 zeroext %call26) #8, !dbg !6609
  call void @gimple_set_modified(%union.gimple_statement_d* %call7, i8 zeroext 1) #8, !dbg !6610
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #6, !dbg !6611
  ret %union.gimple_statement_d* %call7, !dbg !6612
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !6613 {
entry:
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !6617, metadata !DIExpression()), !dbg !6618
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 %alloc_) #7, !dbg !6619
  %0 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !6619
  ret %struct.VEC_tree_heap* %0, !dbg !6619
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) unnamed_addr #0 !dbg !6620 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !6625, metadata !DIExpression()), !dbg !6628
  call void @llvm.dbg.value(metadata %union.tree_node* %obj_, metadata !6626, metadata !DIExpression()), !dbg !6628
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !6629
  %0 = load i32, i32* %num1, align 8, !dbg !6629
  %inc = add i32 %0, 1, !dbg !6629
  store i32 %inc, i32* %num1, align 8, !dbg !6629
  %idxprom = zext i32 %0 to i64, !dbg !6629
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6629
  call void @llvm.dbg.value(metadata %union.tree_node** %arrayidx, metadata !6627, metadata !DIExpression()), !dbg !6628
  store %union.tree_node* %obj_, %union.tree_node** %arrayidx, align 8, !dbg !6629
  ret %union.tree_node** %arrayidx, !dbg !6629
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) unnamed_addr #0 !dbg !6630 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_, metadata !6635, metadata !DIExpression()), !dbg !6636
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_, align 8, !dbg !6637
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !6637
  br i1 %tobool, label %if.end, label %if.then, !dbg !6639

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_tree_heap* %0 to i8*, !dbg !6639
  tail call void @free(i8* nonnull %1) #7, !dbg !6637
  br label %if.end, !dbg !6637

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %vec_, align 8, !dbg !6639
  ret void, !dbg !6639
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6640 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6642, metadata !DIExpression()), !dbg !6643
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 2) #8, !dbg !6644
  ret %union.tree_node* %call, !dbg !6645
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_call_tail_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !6646 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !6648, metadata !DIExpression()), !dbg !6649
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !6650
  %bf.load = load i32, i32* %0, align 8, !dbg !6650
  %and = lshr i32 %bf.load, 19, !dbg !6651
  %1 = trunc i32 %and to i8, !dbg !6651
  %2 = and i8 %1, 1, !dbg !6651
  ret i8 %2, !dbg !6652
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_call_cannot_inline_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !6653 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !6655, metadata !DIExpression()), !dbg !6656
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !6657
  %bf.load = load i32, i32* %0, align 8, !dbg !6657
  %and = lshr i32 %bf.load, 16, !dbg !6658
  %1 = trunc i32 %and to i8, !dbg !6658
  %2 = and i8 %1, 1, !dbg !6658
  ret i8 %2, !dbg !6659
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !6660 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !6662, metadata !DIExpression()), !dbg !6663
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !6664
  %bf.load = load i32, i32* %0, align 8, !dbg !6664
  %and = lshr i32 %bf.load, 18, !dbg !6665
  %1 = trunc i32 %and to i8, !dbg !6665
  %2 = and i8 %1, 1, !dbg !6665
  ret i8 %2, !dbg !6666
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_call_from_thunk_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !6667 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !6669, metadata !DIExpression()), !dbg !6670
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !6671
  %bf.load = load i32, i32* %0, align 8, !dbg !6671
  %and = lshr i32 %bf.load, 17, !dbg !6672
  %1 = trunc i32 %and to i8, !dbg !6672
  %2 = and i8 %1, 1, !dbg !6672
  ret i8 %2, !dbg !6673
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_call_va_arg_pack_p(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !6674 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !6676, metadata !DIExpression()), !dbg !6677
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %s, i64 0, i32 0, i32 0, i32 0, !dbg !6678
  %bf.load = load i32, i32* %0, align 8, !dbg !6678
  %and = lshr i32 %bf.load, 20, !dbg !6679
  %1 = trunc i32 %and to i8, !dbg !6679
  %2 = and i8 %1, 1, !dbg !6679
  ret i8 %2, !dbg !6680
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @compare_field_offset(%union.tree_node* %f1, %union.tree_node* %f2) local_unnamed_addr #5 !dbg !6681 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %f1, metadata !6685, metadata !DIExpression()), !dbg !6693
  call void @llvm.dbg.value(metadata %union.tree_node* %f2, metadata !6686, metadata !DIExpression()), !dbg !6693
  %off_align = getelementptr inbounds %union.tree_node, %union.tree_node* %f1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6694
  %0 = bitcast i40* %off_align to i64*, !dbg !6694
  %bf.load = load i64, i64* %0, align 8, !dbg !6694
  %bf.lshr = lshr i64 %bf.load, 32, !dbg !6694
  %bf.cast = and i64 %bf.lshr, 255, !dbg !6694
  %shl = shl i64 1, %bf.cast, !dbg !6694
  %off_align2 = getelementptr inbounds %union.tree_node, %union.tree_node* %f2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6696
  %1 = bitcast i40* %off_align2 to i64*, !dbg !6696
  %bf.load3 = load i64, i64* %1, align 8, !dbg !6696
  %bf.lshr4 = lshr i64 %bf.load3, 32, !dbg !6696
  %bf.cast6 = and i64 %bf.lshr4, 255, !dbg !6696
  %shl8 = shl i64 1, %bf.cast6, !dbg !6696
  %cmp = icmp eq i64 %shl, %shl8, !dbg !6697
  %offset = getelementptr inbounds %union.tree_node, %union.tree_node* %f1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6693
  %2 = bitcast %struct.rtx_def** %offset to %union.tree_node**, !dbg !6693
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !6693
  br i1 %cmp, label %if.then, label %if.end, !dbg !6698

if.then:                                          ; preds = %entry
  %offset10 = getelementptr inbounds %union.tree_node, %union.tree_node* %f2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6699
  %4 = bitcast %struct.rtx_def** %offset10 to %union.tree_node**, !dbg !6699
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !6699
  %call = tail call i32 @operand_equal_p(%union.tree_node* %3, %union.tree_node* %5, i32 0) #7, !dbg !6700
  %tobool = icmp eq i32 %call, 0, !dbg !6700
  br i1 %tobool, label %land.end, label %land.rhs, !dbg !6701

land.rhs:                                         ; preds = %if.then
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %f1, i64 0, i32 0, i32 0, i32 0, i32 3, !dbg !6702
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !6702
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %f2, i64 0, i32 0, i32 0, i32 0, i32 3, !dbg !6703
  %9 = load %union.tree_node*, %union.tree_node** %8, align 8, !dbg !6703
  %call14 = tail call i32 @tree_int_cst_equal(%union.tree_node* %7, %union.tree_node* %9) #7, !dbg !6704
  %tobool15 = icmp ne i32 %call14, 0, !dbg !6701
  %phitmp = zext i1 %tobool15 to i8
  br label %land.end

land.end:                                         ; preds = %if.then, %land.rhs
  %10 = phi i8 [ 0, %if.then ], [ %phitmp, %land.rhs ]
  br label %return, !dbg !6705

if.end:                                           ; preds = %entry
  %call18 = tail call i32 @host_integerp(%union.tree_node* %3, i32 0) #7, !dbg !6706
  %tobool19 = icmp eq i32 %call18, 0, !dbg !6706
  br i1 %tobool19, label %return, label %land.lhs.true, !dbg !6707

land.lhs.true:                                    ; preds = %if.end
  %offset21 = getelementptr inbounds %union.tree_node, %union.tree_node* %f2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !6708
  %11 = bitcast %struct.rtx_def** %offset21 to %union.tree_node**, !dbg !6708
  %12 = load %union.tree_node*, %union.tree_node** %11, align 8, !dbg !6708
  %call22 = tail call i32 @host_integerp(%union.tree_node* %12, i32 0) #7, !dbg !6709
  %tobool23 = icmp eq i32 %call22, 0, !dbg !6709
  br i1 %tobool23, label %return, label %if.then24, !dbg !6710

if.then24:                                        ; preds = %land.lhs.true
  %13 = getelementptr inbounds %union.tree_node, %union.tree_node* %f1, i64 0, i32 0, i32 0, i32 0, i32 3, !dbg !6711
  %14 = bitcast %union.tree_node** %13 to %struct.tree_int_cst**, !dbg !6711
  %15 = load %struct.tree_int_cst*, %struct.tree_int_cst** %14, align 8, !dbg !6711
  %low = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %15, i64 0, i32 1, i32 0, !dbg !6711
  %16 = load i64, i64* %low, align 8, !dbg !6711
  call void @llvm.dbg.value(metadata i64 %16, metadata !6691, metadata !DIExpression()), !dbg !6712
  %17 = bitcast %struct.rtx_def** %offset to %struct.tree_int_cst**, !dbg !6713
  %18 = load %struct.tree_int_cst*, %struct.tree_int_cst** %17, align 8, !dbg !6713
  %low32 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %18, i64 0, i32 1, i32 0, !dbg !6713
  %19 = load i64, i64* %low32, align 8, !dbg !6713
  %div = lshr i64 %16, 3, !dbg !6714
  %add = add i64 %19, %div, !dbg !6715
  call void @llvm.dbg.value(metadata i64 %add, metadata !6687, metadata !DIExpression()), !dbg !6712
  %20 = getelementptr inbounds %union.tree_node, %union.tree_node* %f2, i64 0, i32 0, i32 0, i32 0, i32 3, !dbg !6716
  %21 = bitcast %union.tree_node** %20 to %struct.tree_int_cst**, !dbg !6716
  %22 = load %struct.tree_int_cst*, %struct.tree_int_cst** %21, align 8, !dbg !6716
  %low37 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %22, i64 0, i32 1, i32 0, !dbg !6716
  %23 = load i64, i64* %low37, align 8, !dbg !6716
  call void @llvm.dbg.value(metadata i64 %23, metadata !6692, metadata !DIExpression()), !dbg !6712
  %24 = bitcast %struct.rtx_def** %offset21 to %struct.tree_int_cst**, !dbg !6717
  %25 = load %struct.tree_int_cst*, %struct.tree_int_cst** %24, align 8, !dbg !6717
  %low42 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %25, i64 0, i32 1, i32 0, !dbg !6717
  %26 = load i64, i64* %low42, align 8, !dbg !6717
  %div43 = lshr i64 %23, 3, !dbg !6718
  %add44 = add i64 %26, %div43, !dbg !6719
  call void @llvm.dbg.value(metadata i64 %add44, metadata !6690, metadata !DIExpression()), !dbg !6712
  %cmp45 = icmp eq i64 %add, %add44, !dbg !6720
  br i1 %cmp45, label %if.end48, label %return, !dbg !6722

if.end48:                                         ; preds = %if.then24
  %27 = xor i64 %16, %23, !dbg !6723
  %28 = and i64 %27, 7, !dbg !6723
  %cmp50 = icmp eq i64 %28, 0, !dbg !6723
  %conv52 = zext i1 %cmp50 to i8, !dbg !6724
  br label %return, !dbg !6725

return:                                           ; preds = %if.then24, %land.lhs.true, %if.end, %if.end48, %land.end
  %retval.1 = phi i8 [ %10, %land.end ], [ %conv52, %if.end48 ], [ 0, %if.then24 ], [ 0, %land.lhs.true ], [ 0, %if.end ], !dbg !6693
  ret i8 %retval.1, !dbg !6726
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) local_unnamed_addr #2

declare dso_local i32 @tree_int_cst_equal(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @gimple_register_type(%union.tree_node* %t) local_unnamed_addr #5 !dbg !6727 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !6729, metadata !DIExpression()), !dbg !6747
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6748
  %bf.load = load i64, i64* %0, align 8, !dbg !6748
  %bf.cast = and i64 %bf.load, 65535, !dbg !6748
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !6748
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6748
  %cmp = icmp eq i32 %1, 2, !dbg !6748
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !6748

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3819, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !6748
  br label %cond.end, !dbg !6748

cond.end:                                         ; preds = %entry, %cond.true
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !6749
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !6749
  %cmp1 = icmp eq %union.tree_node* %3, %t, !dbg !6751
  br i1 %cmp1, label %if.end, label %if.then, !dbg !6752

if.then:                                          ; preds = %cond.end
  %call = tail call %union.tree_node* @gimple_register_type(%union.tree_node* %3) #8, !dbg !6753
  br label %if.end, !dbg !6753

if.end:                                           ; preds = %cond.end, %if.then
  %4 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !6754
  %cmp4 = icmp eq %struct.htab* %4, null, !dbg !6756
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !6757

if.then5:                                         ; preds = %if.end
  %call6 = tail call %struct.htab* @htab_create(i64 16381, i32 (i8*)* nonnull @gimple_type_hash, i32 (i8*, i8*)* nonnull @gimple_type_eq, void (i8*)* null) #7, !dbg !6758
  store %struct.htab* %call6, %struct.htab** @gimple_types, align 8, !dbg !6759
  br label %if.end7, !dbg !6760

if.end7:                                          ; preds = %if.then5, %if.end
  %5 = phi %struct.htab* [ %call6, %if.then5 ], [ %4, %if.end ], !dbg !6761
  %6 = bitcast %union.tree_node* %t to i8*, !dbg !6762
  %call8 = tail call i8** @htab_find_slot(%struct.htab* %5, i8* %6, i32 1) #7, !dbg !6763
  call void @llvm.dbg.value(metadata i8** %call8, metadata !6730, metadata !DIExpression()), !dbg !6747
  %7 = load i8*, i8** %call8, align 8, !dbg !6764
  %tobool = icmp eq i8* %7, null, !dbg !6764
  %8 = bitcast i8* %7 to %union.tree_node*, !dbg !6765
  br i1 %tobool, label %if.end7.if.else134_crit_edge, label %land.lhs.true, !dbg !6765

if.end7.if.else134_crit_edge:                     ; preds = %if.end7
  br label %if.else134, !dbg !6765

land.lhs.true:                                    ; preds = %if.end7
  %cmp9 = icmp eq %union.tree_node* %8, %t, !dbg !6766
  br i1 %cmp9, label %if.else134, label %if.then10, !dbg !6767

if.then10:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !6731, metadata !DIExpression()), !dbg !6768
  %bf.load12 = load i64, i64* %0, align 8, !dbg !6769
  %9 = bitcast i8* %7 to i64*, !dbg !6769
  %bf.load16 = load i64, i64* %9, align 8, !dbg !6769
  %bf.lshr7 = xor i64 %bf.load12, %bf.load16, !dbg !6769
  %10 = and i64 %bf.lshr7, 262144, !dbg !6769
  %cmp20 = icmp eq i64 %10, 0, !dbg !6769
  br i1 %cmp20, label %cond.end23, label %cond.true21, !dbg !6769

cond.true21:                                      ; preds = %if.then10
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3837, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !6769
  br label %cond.end23, !dbg !6769

cond.end23:                                       ; preds = %if.then10, %cond.true21
  %11 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !6770
  %cmp27 = icmp eq %union.tree_node* %11, %t, !dbg !6771
  br i1 %cmp27, label %if.end45, label %if.then28, !dbg !6772

if.then28:                                        ; preds = %cond.end23
  br label %while.cond, !dbg !6773

while.cond:                                       ; preds = %while.body, %if.then28
  %tem.0 = phi %union.tree_node* [ %11, %if.then28 ], [ %13, %while.body ], !dbg !6774
  call void @llvm.dbg.value(metadata %union.tree_node* %tem.0, metadata !6734, metadata !DIExpression()), !dbg !6774
  %cond = icmp eq %union.tree_node* %tem.0, null, !dbg !6775
  br i1 %cond, label %if.end42.loopexit, label %land.rhs, !dbg !6775

land.rhs:                                         ; preds = %while.cond
  %12 = getelementptr inbounds %union.tree_node, %union.tree_node* %tem.0, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !6776
  %13 = load %union.tree_node*, %union.tree_node** %12, align 8, !dbg !6776
  %cmp33 = icmp eq %union.tree_node* %13, %t, !dbg !6777
  br i1 %cmp33, label %while.end, label %while.body, !dbg !6773

while.body:                                       ; preds = %land.rhs
  br label %while.cond, !dbg !6773, !llvm.loop !6778

while.end:                                        ; preds = %land.rhs
  %.lcssa = phi %union.tree_node** [ %12, %land.rhs ], !dbg !6776
  %14 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !6780
  %15 = bitcast %union.tree_node** %14 to i64*, !dbg !6780
  %16 = load i64, i64* %15, align 8, !dbg !6780
  %17 = bitcast %union.tree_node** %.lcssa to i64*, !dbg !6782
  store i64 %16, i64* %17, align 8, !dbg !6782
  br label %if.end42, !dbg !6783

if.end42.loopexit:                                ; preds = %while.cond
  br label %if.end42, !dbg !6784

if.end42:                                         ; preds = %if.end42.loopexit, %while.end
  %18 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !6784
  store %union.tree_node* null, %union.tree_node** %18, align 8, !dbg !6785
  br label %if.end45, !dbg !6786

if.end45:                                         ; preds = %cond.end23, %if.end42
  %bf.load47 = load i64, i64* %0, align 8, !dbg !6787
  %bf.cast495 = and i64 %bf.load47, 65535, !dbg !6788
  %cmp50 = icmp eq i64 %bf.cast495, 10, !dbg !6788
  br i1 %cmp50, label %if.then51, label %if.else87, !dbg !6789

if.then51:                                        ; preds = %if.end45
  %type52 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6790
  %19 = bitcast %union.tree_node** %type52 to %struct.tree_type**, !dbg !6790
  %20 = load %struct.tree_type*, %struct.tree_type** %19, align 8, !dbg !6790
  %pointer_to = getelementptr inbounds %struct.tree_type, %struct.tree_type* %20, i64 0, i32 9, !dbg !6790
  %21 = load %union.tree_node*, %union.tree_node** %pointer_to, align 8, !dbg !6790
  %cmp54 = icmp eq %union.tree_node* %21, %t, !dbg !6791
  br i1 %cmp54, label %if.then55, label %if.else, !dbg !6792

if.then55:                                        ; preds = %if.then51
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !6793
  %22 = bitcast %struct.lang_decl** %minval to i64*, !dbg !6793
  %23 = load i64, i64* %22, align 8, !dbg !6793
  %24 = bitcast %union.tree_node** %pointer_to to i64*, !dbg !6794
  store i64 %23, i64* %24, align 8, !dbg !6794
  br label %if.end84, !dbg !6795

if.else:                                          ; preds = %if.then51
  br label %while.cond66, !dbg !6796

while.cond66:                                     ; preds = %while.body73, %if.else
  %tem61.0 = phi %union.tree_node* [ %21, %if.else ], [ %26, %while.body73 ], !dbg !6797
  call void @llvm.dbg.value(metadata %union.tree_node* %tem61.0, metadata !6737, metadata !DIExpression()), !dbg !6797
  %cond3 = icmp eq %union.tree_node* %tem61.0, null, !dbg !6798
  br i1 %cond3, label %if.end84.loopexit, label %land.rhs68, !dbg !6798

land.rhs68:                                       ; preds = %while.cond66
  %minval70 = getelementptr inbounds %union.tree_node, %union.tree_node* %tem61.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !6799
  %25 = bitcast %struct.lang_decl** %minval70 to %union.tree_node**, !dbg !6799
  %26 = load %union.tree_node*, %union.tree_node** %25, align 8, !dbg !6799
  %cmp71 = icmp eq %union.tree_node* %26, %t, !dbg !6800
  br i1 %cmp71, label %while.end76, label %while.body73, !dbg !6796

while.body73:                                     ; preds = %land.rhs68
  br label %while.cond66, !dbg !6796, !llvm.loop !6801

while.end76:                                      ; preds = %land.rhs68
  %minval70.lcssa = phi %struct.lang_decl** [ %minval70, %land.rhs68 ], !dbg !6799
  %minval80 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !6803
  %27 = bitcast %struct.lang_decl** %minval80 to i64*, !dbg !6803
  %28 = load i64, i64* %27, align 8, !dbg !6803
  %29 = bitcast %struct.lang_decl** %minval70.lcssa to i64*, !dbg !6805
  store i64 %28, i64* %29, align 8, !dbg !6805
  br label %if.end84, !dbg !6806

if.end84.loopexit:                                ; preds = %while.cond66
  br label %if.end84, !dbg !6807

if.end84:                                         ; preds = %if.end84.loopexit, %while.end76, %if.then55
  %minval86 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !6807
  %30 = bitcast %struct.lang_decl** %minval86 to %union.tree_node**, !dbg !6807
  store %union.tree_node* null, %union.tree_node** %30, align 8, !dbg !6808
  br label %if.end135, !dbg !6809

if.else87:                                        ; preds = %if.end45
  %cmp92 = icmp eq i64 %bf.cast495, 12, !dbg !6810
  br i1 %cmp92, label %if.then93, label %if.end135, !dbg !6811

if.then93:                                        ; preds = %if.else87
  %type95 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !6812
  %31 = bitcast %union.tree_node** %type95 to %struct.tree_type**, !dbg !6812
  %32 = load %struct.tree_type*, %struct.tree_type** %31, align 8, !dbg !6812
  %reference_to = getelementptr inbounds %struct.tree_type, %struct.tree_type* %32, i64 0, i32 10, !dbg !6812
  %33 = load %union.tree_node*, %union.tree_node** %reference_to, align 8, !dbg !6812
  %cmp97 = icmp eq %union.tree_node* %33, %t, !dbg !6813
  br i1 %cmp97, label %if.then98, label %if.else105, !dbg !6814

if.then98:                                        ; preds = %if.then93
  %minval100 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !6815
  %34 = bitcast %struct.lang_decl** %minval100 to i64*, !dbg !6815
  %35 = load i64, i64* %34, align 8, !dbg !6815
  %36 = bitcast %union.tree_node** %reference_to to i64*, !dbg !6816
  store i64 %35, i64* %36, align 8, !dbg !6816
  br label %if.end129, !dbg !6817

if.else105:                                       ; preds = %if.then93
  br label %while.cond111, !dbg !6818

while.cond111:                                    ; preds = %while.body118, %if.else105
  %tem106.0 = phi %union.tree_node* [ %33, %if.else105 ], [ %38, %while.body118 ], !dbg !6819
  call void @llvm.dbg.value(metadata %union.tree_node* %tem106.0, metadata !6742, metadata !DIExpression()), !dbg !6819
  %cond4 = icmp eq %union.tree_node* %tem106.0, null, !dbg !6820
  br i1 %cond4, label %if.end129.loopexit, label %land.rhs113, !dbg !6820

land.rhs113:                                      ; preds = %while.cond111
  %minval115 = getelementptr inbounds %union.tree_node, %union.tree_node* %tem106.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !6821
  %37 = bitcast %struct.lang_decl** %minval115 to %union.tree_node**, !dbg !6821
  %38 = load %union.tree_node*, %union.tree_node** %37, align 8, !dbg !6821
  %cmp116 = icmp eq %union.tree_node* %38, %t, !dbg !6822
  br i1 %cmp116, label %while.end121, label %while.body118, !dbg !6818

while.body118:                                    ; preds = %land.rhs113
  br label %while.cond111, !dbg !6818, !llvm.loop !6823

while.end121:                                     ; preds = %land.rhs113
  %minval115.lcssa = phi %struct.lang_decl** [ %minval115, %land.rhs113 ], !dbg !6821
  %minval125 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !6825
  %39 = bitcast %struct.lang_decl** %minval125 to i64*, !dbg !6825
  %40 = load i64, i64* %39, align 8, !dbg !6825
  %41 = bitcast %struct.lang_decl** %minval115.lcssa to i64*, !dbg !6827
  store i64 %40, i64* %41, align 8, !dbg !6827
  br label %if.end129, !dbg !6828

if.end129.loopexit:                               ; preds = %while.cond111
  br label %if.end129, !dbg !6829

if.end129:                                        ; preds = %if.end129.loopexit, %while.end121, %if.then98
  %minval131 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !6829
  %42 = bitcast %struct.lang_decl** %minval131 to %union.tree_node**, !dbg !6829
  store %union.tree_node* null, %union.tree_node** %42, align 8, !dbg !6830
  br label %if.end135, !dbg !6831

if.else134:                                       ; preds = %if.end7.if.else134_crit_edge, %land.lhs.true
  %.pre-phi = bitcast i8** %call8 to %union.tree_node**, !dbg !6832
  store %union.tree_node* %t, %union.tree_node** %.pre-phi, align 8, !dbg !6832
  br label %if.end135

if.end135:                                        ; preds = %if.end84, %if.end129, %if.else87, %if.else134
  %t.addr.0 = phi %union.tree_node* [ %t, %if.else134 ], [ %8, %if.else87 ], [ %8, %if.end129 ], [ %8, %if.end84 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t.addr.0, metadata !6729, metadata !DIExpression()), !dbg !6747
  ret %union.tree_node* %t.addr.0, !dbg !6833
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal i32 @gimple_type_hash(i8* %p) #5 !dbg !6834 {
entry:
  %sccstack = alloca %struct.VEC_tree_heap*, align 8
  %sccstate_obstack = alloca %struct.obstack, align 8
  call void @llvm.dbg.value(metadata i8* %p, metadata !6836, metadata !DIExpression()), !dbg !6843
  %0 = bitcast i8* %p to %union.tree_node*, !dbg !6844
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !6837, metadata !DIExpression()), !dbg !6843
  %1 = bitcast %struct.VEC_tree_heap** %sccstack to i8*, !dbg !6845
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #6, !dbg !6845
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* null, metadata !6838, metadata !DIExpression()), !dbg !6843
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %sccstack, align 8, !dbg !6846
  %2 = bitcast %struct.obstack* %sccstate_obstack to i8*, !dbg !6847
  call void @llvm.lifetime.start.p0i8(i64 88, i8* nonnull %2) #6, !dbg !6847
  %3 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !6848
  %cmp = icmp eq %struct.pointer_map_t* %3, null, !dbg !6850
  br i1 %cmp, label %if.then, label %if.end, !dbg !6851

if.then:                                          ; preds = %entry
  %call = tail call %struct.pointer_map_t* @pointer_map_create() #7, !dbg !6852
  store %struct.pointer_map_t* %call, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !6853
  br label %if.end, !dbg !6854

if.end:                                           ; preds = %if.then, %entry
  %4 = phi %struct.pointer_map_t* [ %call, %if.then ], [ %3, %entry ], !dbg !6855
  %call1 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %4, i8* %p) #7, !dbg !6857
  call void @llvm.dbg.value(metadata i8** %call1, metadata !6842, metadata !DIExpression()), !dbg !6843
  %cmp2 = icmp eq i8** %call1, null, !dbg !6858
  br i1 %cmp2, label %if.end5, label %if.then3, !dbg !6859

if.then3:                                         ; preds = %if.end
  %5 = bitcast i8** %call1 to i64*, !dbg !6860
  %6 = load i64, i64* %5, align 8, !dbg !6860
  %conv = trunc i64 %6 to i32, !dbg !6861
  %call4 = tail call i32 @iterative_hash_hashval_t(i32 %conv, i32 0) #7, !dbg !6862
  br label %cleanup, !dbg !6863

if.end5:                                          ; preds = %if.end
  store i32 1, i32* @next_dfs_num, align 4, !dbg !6864
  %call6 = tail call %struct.pointer_map_t* @pointer_map_create() #7, !dbg !6865
  call void @llvm.dbg.value(metadata %struct.pointer_map_t* %call6, metadata !6839, metadata !DIExpression()), !dbg !6843
  call void @llvm.dbg.value(metadata %struct.obstack* %sccstate_obstack, metadata !6840, metadata !DIExpression(DW_OP_deref)), !dbg !6843
  %call7 = call i32 @_obstack_begin(%struct.obstack* nonnull %sccstate_obstack, i32 0, i32 0, i8* (i64)* nonnull @xmalloc, void (i8*)* nonnull @free) #7, !dbg !6866
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %sccstack, metadata !6838, metadata !DIExpression(DW_OP_deref)), !dbg !6843
  call void @llvm.dbg.value(metadata %struct.obstack* %sccstate_obstack, metadata !6840, metadata !DIExpression(DW_OP_deref)), !dbg !6843
  %call8 = call fastcc i32 @iterative_hash_gimple_type(%union.tree_node* %0, i32 0, %struct.VEC_tree_heap** nonnull %sccstack, %struct.pointer_map_t* %call6, %struct.obstack* nonnull %sccstate_obstack) #8, !dbg !6867
  call void @llvm.dbg.value(metadata i32 %call8, metadata !6841, metadata !DIExpression()), !dbg !6843
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %sccstack, metadata !6838, metadata !DIExpression(DW_OP_deref)), !dbg !6843
  call fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** nonnull %sccstack) #8, !dbg !6868
  call void @pointer_map_destroy(%struct.pointer_map_t* %call6) #7, !dbg !6869
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 1, !dbg !6870
  %7 = bitcast %struct._obstack_chunk** %chunk to i64*, !dbg !6870
  %8 = load i64, i64* %7, align 8, !dbg !6870
  %sub.ptr.sub = sub i64 0, %8, !dbg !6870
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 5, !dbg !6870
  store i64 %sub.ptr.sub, i64* %temp, align 8, !dbg !6870
  %cmp10 = icmp sgt i64 %sub.ptr.sub, 0, !dbg !6870
  %9 = inttoptr i64 %8 to i8*, !dbg !6870
  br i1 %cmp10, label %land.lhs.true, label %cond.false, !dbg !6870

land.lhs.true:                                    ; preds = %if.end5
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 4, !dbg !6870
  %10 = bitcast i8** %chunk_limit to i64*, !dbg !6870
  %11 = load i64, i64* %10, align 8, !dbg !6870
  %sub.ptr.sub15 = sub i64 %11, %8, !dbg !6870
  %cmp16 = icmp sgt i64 %sub.ptr.sub15, %sub.ptr.sub, !dbg !6870
  br i1 %cmp16, label %cond.true, label %cond.false, !dbg !6870

cond.true:                                        ; preds = %land.lhs.true
  %add.ptr = getelementptr inbounds i8, i8* %9, i64 %sub.ptr.sub, !dbg !6870
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 2, !dbg !6870
  store i8* %add.ptr, i8** %object_base, align 8, !dbg !6870
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 3, !dbg !6870
  store i8* %add.ptr, i8** %next_free, align 8, !dbg !6870
  br label %cleanup, !dbg !6870

cond.false:                                       ; preds = %land.lhs.true, %if.end5
  %add.ptr22 = getelementptr inbounds i8, i8* %9, i64 %sub.ptr.sub, !dbg !6870
  call void @llvm.dbg.value(metadata %struct.obstack* %sccstate_obstack, metadata !6840, metadata !DIExpression(DW_OP_deref)), !dbg !6843
  call void @obstack_free(%struct.obstack* nonnull %sccstate_obstack, i8* %add.ptr22) #7, !dbg !6870
  br label %cleanup, !dbg !6870

cleanup:                                          ; preds = %cond.true, %cond.false, %if.then3
  %retval.0 = phi i32 [ %call4, %if.then3 ], [ %call8, %cond.false ], [ %call8, %cond.true ], !dbg !6843
  call void @llvm.lifetime.end.p0i8(i64 88, i8* nonnull %2) #6, !dbg !6871
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #6, !dbg !6871
  ret i32 %retval.0, !dbg !6871
}

; Function Attrs: nounwind uwtable
define internal i32 @gimple_type_eq(i8* %p1, i8* %p2) #5 !dbg !6872 {
entry:
  call void @llvm.dbg.value(metadata i8* %p1, metadata !6874, metadata !DIExpression()), !dbg !6878
  call void @llvm.dbg.value(metadata i8* %p2, metadata !6875, metadata !DIExpression()), !dbg !6878
  %0 = bitcast i8* %p1 to %union.tree_node*, !dbg !6879
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !6876, metadata !DIExpression()), !dbg !6878
  %1 = bitcast i8* %p2 to %union.tree_node*, !dbg !6880
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !6877, metadata !DIExpression()), !dbg !6878
  %call = tail call fastcc i32 @gimple_types_compatible_p(%union.tree_node* %0, %union.tree_node* %1) #8, !dbg !6881
  ret i32 %call, !dbg !6882
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @print_gimple_types_stats() local_unnamed_addr #5 !dbg !6883 {
entry:
  %0 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !6884
  %tobool = icmp eq %struct.htab* %0, null, !dbg !6884
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6886
  br i1 %tobool, label %if.else, label %if.then, !dbg !6887

if.then:                                          ; preds = %entry
  %call = tail call i64 @htab_size(%struct.htab* nonnull %0) #7, !dbg !6888
  %2 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !6889
  %call1 = tail call i64 @htab_elements(%struct.htab* %2) #7, !dbg !6890
  %3 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !6891
  %searches = getelementptr inbounds %struct.htab, %struct.htab* %3, i64 0, i32 7, !dbg !6892
  %4 = load i32, i32* %searches, align 8, !dbg !6892
  %conv = zext i32 %4 to i64, !dbg !6893
  %collisions = getelementptr inbounds %struct.htab, %struct.htab* %3, i64 0, i32 8, !dbg !6894
  %5 = load i32, i32* %collisions, align 4, !dbg !6894
  %conv2 = zext i32 %5 to i64, !dbg !6895
  %call3 = tail call double @htab_collisions(%struct.htab* %3) #7, !dbg !6896
  %call4 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.38, i64 0, i64 0), i64 %call, i64 %call1, i64 %conv, i64 %conv2, double %call3) #7, !dbg !6897
  br label %if.end, !dbg !6897

if.else:                                          ; preds = %entry
  %call5 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i64 0, i64 0)) #7, !dbg !6898
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !6899
  %tobool6 = icmp eq %struct.htab* %6, null, !dbg !6899
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !6901
  br i1 %tobool6, label %if.else16, label %if.then7, !dbg !6902

if.then7:                                         ; preds = %if.end
  %call8 = tail call i64 @htab_size(%struct.htab* nonnull %6) #7, !dbg !6903
  %8 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !6904
  %call9 = tail call i64 @htab_elements(%struct.htab* %8) #7, !dbg !6905
  %9 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !6906
  %searches10 = getelementptr inbounds %struct.htab, %struct.htab* %9, i64 0, i32 7, !dbg !6907
  %10 = load i32, i32* %searches10, align 8, !dbg !6907
  %conv11 = zext i32 %10 to i64, !dbg !6908
  %collisions12 = getelementptr inbounds %struct.htab, %struct.htab* %9, i64 0, i32 8, !dbg !6909
  %11 = load i32, i32* %collisions12, align 4, !dbg !6909
  %conv13 = zext i32 %11 to i64, !dbg !6910
  %call14 = tail call double @htab_collisions(%struct.htab* %9) #7, !dbg !6911
  %call15 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.40, i64 0, i64 0), i64 %call8, i64 %call9, i64 %conv11, i64 %conv13, double %call14) #7, !dbg !6912
  br label %if.end18, !dbg !6912

if.else16:                                        ; preds = %if.end
  %call17 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.41, i64 0, i64 0)) #7, !dbg !6913
  br label %if.end18

if.end18:                                         ; preds = %if.else16, %if.then7
  ret void, !dbg !6914
}

declare dso_local i64 @htab_size(%struct.htab*) local_unnamed_addr #2

declare dso_local i64 @htab_elements(%struct.htab*) local_unnamed_addr #2

declare dso_local double @htab_collisions(%struct.htab*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @free_gimple_type_tables() local_unnamed_addr #5 !dbg !6915 {
entry:
  %0 = load i32, i32* @flag_lto_report, align 4, !dbg !6916
  %tobool = icmp eq i32 %0, 0, !dbg !6916
  br i1 %tobool, label %if.end, label %if.then, !dbg !6918

if.then:                                          ; preds = %entry
  tail call void @print_gimple_types_stats() #8, !dbg !6919
  br label %if.end, !dbg !6919

if.end:                                           ; preds = %entry, %if.then
  %1 = load %struct.htab*, %struct.htab** @gimple_types, align 8, !dbg !6920
  %tobool1 = icmp eq %struct.htab* %1, null, !dbg !6920
  br i1 %tobool1, label %if.end3, label %if.then2, !dbg !6922

if.then2:                                         ; preds = %if.end
  tail call void @htab_delete(%struct.htab* nonnull %1) #7, !dbg !6923
  store %struct.htab* null, %struct.htab** @gimple_types, align 8, !dbg !6925
  br label %if.end3, !dbg !6926

if.end3:                                          ; preds = %if.end, %if.then2
  %2 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !6927
  %tobool4 = icmp eq %struct.pointer_map_t* %2, null, !dbg !6927
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !6929

if.then5:                                         ; preds = %if.end3
  tail call void @pointer_map_destroy(%struct.pointer_map_t* nonnull %2) #7, !dbg !6930
  store %struct.pointer_map_t* null, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !6932
  br label %if.end6, !dbg !6933

if.end6:                                          ; preds = %if.end3, %if.then5
  %3 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !6934
  %tobool7 = icmp eq %struct.htab* %3, null, !dbg !6934
  br i1 %tobool7, label %if.end13, label %if.then8, !dbg !6936

if.then8:                                         ; preds = %if.end6
  tail call void @htab_delete(%struct.htab* nonnull %3) #7, !dbg !6937
  %4 = load i64, i64* bitcast (%struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 1) to i64*), align 8, !dbg !6939
  %sub.ptr.sub = sub i64 0, %4, !dbg !6939
  store i64 %sub.ptr.sub, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 5), align 8, !dbg !6939
  %cmp = icmp sgt i64 %sub.ptr.sub, 0, !dbg !6939
  %5 = inttoptr i64 %4 to i8*, !dbg !6939
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !6939

land.lhs.true:                                    ; preds = %if.then8
  %6 = load i64, i64* bitcast (i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 4) to i64*), align 8, !dbg !6939
  %sub.ptr.sub10 = sub i64 %6, %4, !dbg !6939
  %cmp11 = icmp sgt i64 %sub.ptr.sub10, %sub.ptr.sub, !dbg !6939
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !6939

cond.true:                                        ; preds = %land.lhs.true
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %sub.ptr.sub, !dbg !6939
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 2), align 8, !dbg !6939
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 3), align 8, !dbg !6939
  br label %cond.end, !dbg !6939

cond.false:                                       ; preds = %land.lhs.true, %if.then8
  %add.ptr12 = getelementptr inbounds i8, i8* %5, i64 %sub.ptr.sub, !dbg !6939
  tail call void @obstack_free(%struct.obstack* nonnull @gtc_ob, i8* %add.ptr12) #7, !dbg !6939
  br label %cond.end, !dbg !6939

cond.end:                                         ; preds = %cond.false, %cond.true
  store %struct.htab* null, %struct.htab** @gtc_visited, align 8, !dbg !6940
  br label %if.end13, !dbg !6941

if.end13:                                         ; preds = %if.end6, %cond.end
  ret void, !dbg !6942
}

declare dso_local void @htab_delete(%struct.htab*) local_unnamed_addr #2

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) local_unnamed_addr #2

declare dso_local void @obstack_free(%struct.obstack*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @gimple_unsigned_type(%union.tree_node* %type) local_unnamed_addr #5 !dbg !6943 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !6945, metadata !DIExpression()), !dbg !6946
  %call = tail call fastcc %union.tree_node* @gimple_signed_or_unsigned_type(i8 zeroext 1, %union.tree_node* %type) #8, !dbg !6947
  ret %union.tree_node* %call, !dbg !6948
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @gimple_signed_or_unsigned_type(i8 zeroext %unsignedp, %union.tree_node* %type) unnamed_addr #5 !dbg !6949 {
entry:
  call void @llvm.dbg.value(metadata i8 %unsignedp, metadata !6953, metadata !DIExpression()), !dbg !6956
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !6954, metadata !DIExpression()), !dbg !6956
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !6957
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6957
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !6955, metadata !DIExpression()), !dbg !6956
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !6958
  %cmp = icmp eq %union.tree_node* %1, %2, !dbg !6960
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !6961
  %cmp3 = icmp eq %union.tree_node* %1, %3, !dbg !6962
  %or.cond = or i1 %cmp, %cmp3, !dbg !6963
  %4 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !6964
  %cmp5 = icmp eq %union.tree_node* %1, %4, !dbg !6965
  %or.cond1 = or i1 %or.cond, %cmp5, !dbg !6963
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6963
  br i1 %or.cond1, label %if.then, label %if.end, !dbg !6963

if.then:                                          ; preds = %entry
  %tobool = icmp eq i8 %unsignedp, 0, !dbg !6966
  %cond = select i1 %tobool, %union.tree_node* %2, %union.tree_node* %4, !dbg !6966
  br label %cleanup, !dbg !6966

if.end:                                           ; preds = %entry
  %6 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !6967
  %cmp6 = icmp eq %union.tree_node* %1, %6, !dbg !6969
  %7 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !6970
  %cmp9 = icmp eq %union.tree_node* %1, %7, !dbg !6971
  %or.cond2 = or i1 %cmp6, %cmp9, !dbg !6972
  br i1 %or.cond2, label %if.then11, label %if.end18, !dbg !6972

if.then11:                                        ; preds = %if.end
  %tobool13 = icmp eq i8 %unsignedp, 0, !dbg !6973
  %cond17 = select i1 %tobool13, %union.tree_node* %6, %union.tree_node* %7, !dbg !6973
  br label %cleanup, !dbg !6973

if.end18:                                         ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3), align 8, !dbg !6974
  %cmp19 = icmp eq %union.tree_node* %1, %8, !dbg !6976
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 4), align 16, !dbg !6977
  %cmp22 = icmp eq %union.tree_node* %1, %9, !dbg !6978
  %or.cond3 = or i1 %cmp19, %cmp22, !dbg !6979
  br i1 %or.cond3, label %if.then24, label %if.end31, !dbg !6979

if.then24:                                        ; preds = %if.end18
  %tobool26 = icmp eq i8 %unsignedp, 0, !dbg !6980
  %cond30 = select i1 %tobool26, %union.tree_node* %8, %union.tree_node* %9, !dbg !6980
  br label %cleanup, !dbg !6980

if.end31:                                         ; preds = %if.end18
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7), align 8, !dbg !6981
  %cmp32 = icmp eq %union.tree_node* %1, %10, !dbg !6983
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 16, !dbg !6984
  %cmp35 = icmp eq %union.tree_node* %1, %11, !dbg !6985
  %or.cond4 = or i1 %cmp32, %cmp35, !dbg !6986
  br i1 %or.cond4, label %if.then37, label %if.end44, !dbg !6986

if.then37:                                        ; preds = %if.end31
  %tobool39 = icmp eq i8 %unsignedp, 0, !dbg !6987
  %cond43 = select i1 %tobool39, %union.tree_node* %10, %union.tree_node* %11, !dbg !6987
  br label %cleanup, !dbg !6987

if.end44:                                         ; preds = %if.end31
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9), align 8, !dbg !6988
  %cmp45 = icmp eq %union.tree_node* %1, %12, !dbg !6990
  %13 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 10), align 16, !dbg !6991
  %cmp48 = icmp eq %union.tree_node* %1, %13, !dbg !6992
  %or.cond5 = or i1 %cmp45, %cmp48, !dbg !6993
  br i1 %or.cond5, label %if.then50, label %if.end57, !dbg !6993

if.then50:                                        ; preds = %if.end44
  %tobool52 = icmp eq i8 %unsignedp, 0, !dbg !6994
  %cond56 = select i1 %tobool52, %union.tree_node* %12, %union.tree_node* %13, !dbg !6994
  br label %cleanup, !dbg !6994

if.end57:                                         ; preds = %if.end44
  %14 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5), align 8, !dbg !6995
  %cmp58 = icmp eq %union.tree_node* %1, %14, !dbg !6997
  %15 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 10), align 16, !dbg !6998
  %cmp61 = icmp eq %union.tree_node* %1, %15, !dbg !6999
  %or.cond6 = or i1 %cmp58, %cmp61, !dbg !7000
  br i1 %or.cond6, label %if.then63, label %if.end70, !dbg !7000

if.then63:                                        ; preds = %if.end57
  %tobool65 = icmp eq i8 %unsignedp, 0, !dbg !7001
  %cond69 = select i1 %tobool65, %union.tree_node* %14, %union.tree_node* %15, !dbg !7001
  br label %cleanup, !dbg !7001

if.end70:                                         ; preds = %if.end57
  %16 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4), align 16, !dbg !7002
  %cmp71 = icmp eq %union.tree_node* %1, %16, !dbg !7004
  %17 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 9), align 8, !dbg !7005
  %cmp74 = icmp eq %union.tree_node* %1, %17, !dbg !7006
  %or.cond7 = or i1 %cmp71, %cmp74, !dbg !7007
  br i1 %or.cond7, label %if.then76, label %if.end83, !dbg !7007

if.then76:                                        ; preds = %if.end70
  %tobool78 = icmp eq i8 %unsignedp, 0, !dbg !7008
  %cond82 = select i1 %tobool78, %union.tree_node* %16, %union.tree_node* %17, !dbg !7008
  br label %cleanup, !dbg !7008

if.end83:                                         ; preds = %if.end70
  %18 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3), align 8, !dbg !7009
  %cmp84 = icmp eq %union.tree_node* %1, %18, !dbg !7011
  %19 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 8), align 16, !dbg !7012
  %cmp87 = icmp eq %union.tree_node* %1, %19, !dbg !7013
  %or.cond8 = or i1 %cmp84, %cmp87, !dbg !7014
  br i1 %or.cond8, label %if.then89, label %if.end96, !dbg !7014

if.then89:                                        ; preds = %if.end83
  %tobool91 = icmp eq i8 %unsignedp, 0, !dbg !7015
  %cond95 = select i1 %tobool91, %union.tree_node* %18, %union.tree_node* %19, !dbg !7015
  br label %cleanup, !dbg !7015

if.end96:                                         ; preds = %if.end83
  %20 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2), align 16, !dbg !7016
  %cmp97 = icmp eq %union.tree_node* %1, %20, !dbg !7018
  %21 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 7), align 8, !dbg !7019
  %cmp100 = icmp eq %union.tree_node* %1, %21, !dbg !7020
  %or.cond9 = or i1 %cmp97, %cmp100, !dbg !7021
  br i1 %or.cond9, label %if.then102, label %if.end109, !dbg !7021

if.then102:                                       ; preds = %if.end96
  %tobool104 = icmp eq i8 %unsignedp, 0, !dbg !7022
  %cond108 = select i1 %tobool104, %union.tree_node* %20, %union.tree_node* %21, !dbg !7022
  br label %cleanup, !dbg !7022

if.end109:                                        ; preds = %if.end96
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1), align 8, !dbg !7023
  %cmp110 = icmp eq %union.tree_node* %1, %22, !dbg !7025
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 6), align 16, !dbg !7026
  %cmp113 = icmp eq %union.tree_node* %1, %23, !dbg !7027
  %or.cond10 = or i1 %cmp110, %cmp113, !dbg !7028
  br i1 %or.cond10, label %if.then115, label %if.end122, !dbg !7028

if.then115:                                       ; preds = %if.end109
  %tobool117 = icmp eq i8 %unsignedp, 0, !dbg !7029
  %cond121 = select i1 %tobool117, %union.tree_node* %22, %union.tree_node* %23, !dbg !7029
  br label %cleanup, !dbg !7029

if.end122:                                        ; preds = %if.end109
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 65), align 8, !dbg !7030
  %cmp123 = icmp eq %union.tree_node* %1, %24, !dbg !7030
  %25 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 69), align 8, !dbg !7030
  %cmp126 = icmp eq %union.tree_node* %1, %25, !dbg !7030
  %or.cond11 = or i1 %cmp123, %cmp126, !dbg !7030
  br i1 %or.cond11, label %if.then128, label %if.end135, !dbg !7030

if.then128:                                       ; preds = %if.end122
  %tobool130 = icmp eq i8 %unsignedp, 0, !dbg !7030
  %cond134 = select i1 %tobool130, %union.tree_node* %24, %union.tree_node* %25, !dbg !7030
  br label %cleanup, !dbg !7030

if.end135:                                        ; preds = %if.end122
  %26 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 66), align 16, !dbg !7032
  %cmp136 = icmp eq %union.tree_node* %1, %26, !dbg !7032
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 70), align 16, !dbg !7032
  %cmp139 = icmp eq %union.tree_node* %1, %27, !dbg !7032
  %or.cond12 = or i1 %cmp136, %cmp139, !dbg !7032
  br i1 %or.cond12, label %if.then141, label %if.end148, !dbg !7032

if.then141:                                       ; preds = %if.end135
  %tobool143 = icmp eq i8 %unsignedp, 0, !dbg !7032
  %cond147 = select i1 %tobool143, %union.tree_node* %26, %union.tree_node* %27, !dbg !7032
  br label %cleanup, !dbg !7032

if.end148:                                        ; preds = %if.end135
  %28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 67), align 8, !dbg !7034
  %cmp149 = icmp eq %union.tree_node* %1, %28, !dbg !7034
  %29 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 71), align 8, !dbg !7034
  %cmp152 = icmp eq %union.tree_node* %1, %29, !dbg !7034
  %or.cond13 = or i1 %cmp149, %cmp152, !dbg !7034
  br i1 %or.cond13, label %if.then154, label %if.end161, !dbg !7034

if.then154:                                       ; preds = %if.end148
  %tobool156 = icmp eq i8 %unsignedp, 0, !dbg !7034
  %cond160 = select i1 %tobool156, %union.tree_node* %28, %union.tree_node* %29, !dbg !7034
  br label %cleanup, !dbg !7034

if.end161:                                        ; preds = %if.end148
  %30 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 68), align 16, !dbg !7036
  %cmp162 = icmp eq %union.tree_node* %1, %30, !dbg !7036
  %31 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 72), align 16, !dbg !7036
  %cmp165 = icmp eq %union.tree_node* %1, %31, !dbg !7036
  %or.cond14 = or i1 %cmp162, %cmp165, !dbg !7036
  br i1 %or.cond14, label %if.then167, label %if.end174, !dbg !7036

if.then167:                                       ; preds = %if.end161
  %tobool169 = icmp eq i8 %unsignedp, 0, !dbg !7036
  %cond173 = select i1 %tobool169, %union.tree_node* %30, %union.tree_node* %31, !dbg !7036
  br label %cleanup, !dbg !7036

if.end174:                                        ; preds = %if.end161
  %32 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 57), align 8, !dbg !7038
  %cmp175 = icmp eq %union.tree_node* %1, %32, !dbg !7038
  %33 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 61), align 8, !dbg !7038
  %cmp178 = icmp eq %union.tree_node* %1, %33, !dbg !7038
  %or.cond15 = or i1 %cmp175, %cmp178, !dbg !7038
  br i1 %or.cond15, label %if.then180, label %if.end187, !dbg !7038

if.then180:                                       ; preds = %if.end174
  %tobool182 = icmp eq i8 %unsignedp, 0, !dbg !7038
  %cond186 = select i1 %tobool182, %union.tree_node* %32, %union.tree_node* %33, !dbg !7038
  br label %cleanup, !dbg !7038

if.end187:                                        ; preds = %if.end174
  %34 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 58), align 16, !dbg !7040
  %cmp188 = icmp eq %union.tree_node* %1, %34, !dbg !7040
  %35 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 62), align 16, !dbg !7040
  %cmp191 = icmp eq %union.tree_node* %1, %35, !dbg !7040
  %or.cond16 = or i1 %cmp188, %cmp191, !dbg !7040
  br i1 %or.cond16, label %if.then193, label %if.end200, !dbg !7040

if.then193:                                       ; preds = %if.end187
  %tobool195 = icmp eq i8 %unsignedp, 0, !dbg !7040
  %cond199 = select i1 %tobool195, %union.tree_node* %34, %union.tree_node* %35, !dbg !7040
  br label %cleanup, !dbg !7040

if.end200:                                        ; preds = %if.end187
  %36 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 59), align 8, !dbg !7042
  %cmp201 = icmp eq %union.tree_node* %1, %36, !dbg !7042
  %37 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 63), align 8, !dbg !7042
  %cmp204 = icmp eq %union.tree_node* %1, %37, !dbg !7042
  %or.cond17 = or i1 %cmp201, %cmp204, !dbg !7042
  br i1 %or.cond17, label %if.then206, label %if.end213, !dbg !7042

if.then206:                                       ; preds = %if.end200
  %tobool208 = icmp eq i8 %unsignedp, 0, !dbg !7042
  %cond212 = select i1 %tobool208, %union.tree_node* %36, %union.tree_node* %37, !dbg !7042
  br label %cleanup, !dbg !7042

if.end213:                                        ; preds = %if.end200
  %38 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 60), align 16, !dbg !7044
  %cmp214 = icmp eq %union.tree_node* %1, %38, !dbg !7044
  %39 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 64), align 16, !dbg !7044
  %cmp217 = icmp eq %union.tree_node* %1, %39, !dbg !7044
  %or.cond18 = or i1 %cmp214, %cmp217, !dbg !7044
  br i1 %or.cond18, label %if.then219, label %if.end226, !dbg !7044

if.then219:                                       ; preds = %if.end213
  %tobool221 = icmp eq i8 %unsignedp, 0, !dbg !7044
  %cond225 = select i1 %tobool221, %union.tree_node* %38, %union.tree_node* %39, !dbg !7044
  br label %cleanup, !dbg !7044

if.end226:                                        ; preds = %if.end213
  %40 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 81), align 8, !dbg !7046
  %cmp227 = icmp eq %union.tree_node* %1, %40, !dbg !7046
  %41 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 85), align 8, !dbg !7046
  %cmp230 = icmp eq %union.tree_node* %1, %41, !dbg !7046
  %or.cond19 = or i1 %cmp227, %cmp230, !dbg !7046
  br i1 %or.cond19, label %if.then232, label %if.end239, !dbg !7046

if.then232:                                       ; preds = %if.end226
  %tobool234 = icmp eq i8 %unsignedp, 0, !dbg !7046
  %cond238 = select i1 %tobool234, %union.tree_node* %40, %union.tree_node* %41, !dbg !7046
  br label %cleanup, !dbg !7046

if.end239:                                        ; preds = %if.end226
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 82), align 16, !dbg !7048
  %cmp240 = icmp eq %union.tree_node* %1, %42, !dbg !7048
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 86), align 16, !dbg !7048
  %cmp243 = icmp eq %union.tree_node* %1, %43, !dbg !7048
  %or.cond20 = or i1 %cmp240, %cmp243, !dbg !7048
  br i1 %or.cond20, label %if.then245, label %if.end252, !dbg !7048

if.then245:                                       ; preds = %if.end239
  %tobool247 = icmp eq i8 %unsignedp, 0, !dbg !7048
  %cond251 = select i1 %tobool247, %union.tree_node* %42, %union.tree_node* %43, !dbg !7048
  br label %cleanup, !dbg !7048

if.end252:                                        ; preds = %if.end239
  %44 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 83), align 8, !dbg !7050
  %cmp253 = icmp eq %union.tree_node* %1, %44, !dbg !7050
  %45 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 87), align 8, !dbg !7050
  %cmp256 = icmp eq %union.tree_node* %1, %45, !dbg !7050
  %or.cond21 = or i1 %cmp253, %cmp256, !dbg !7050
  br i1 %or.cond21, label %if.then258, label %if.end265, !dbg !7050

if.then258:                                       ; preds = %if.end252
  %tobool260 = icmp eq i8 %unsignedp, 0, !dbg !7050
  %cond264 = select i1 %tobool260, %union.tree_node* %44, %union.tree_node* %45, !dbg !7050
  br label %cleanup, !dbg !7050

if.end265:                                        ; preds = %if.end252
  %46 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 84), align 16, !dbg !7052
  %cmp266 = icmp eq %union.tree_node* %1, %46, !dbg !7052
  %47 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 88), align 16, !dbg !7052
  %cmp269 = icmp eq %union.tree_node* %1, %47, !dbg !7052
  %or.cond22 = or i1 %cmp266, %cmp269, !dbg !7052
  br i1 %or.cond22, label %if.then271, label %if.end278, !dbg !7052

if.then271:                                       ; preds = %if.end265
  %tobool273 = icmp eq i8 %unsignedp, 0, !dbg !7052
  %cond277 = select i1 %tobool273, %union.tree_node* %46, %union.tree_node* %47, !dbg !7052
  br label %cleanup, !dbg !7052

if.end278:                                        ; preds = %if.end265
  %48 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 73), align 8, !dbg !7054
  %cmp279 = icmp eq %union.tree_node* %1, %48, !dbg !7054
  %49 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 77), align 8, !dbg !7054
  %cmp282 = icmp eq %union.tree_node* %1, %49, !dbg !7054
  %or.cond23 = or i1 %cmp279, %cmp282, !dbg !7054
  br i1 %or.cond23, label %if.then284, label %if.end291, !dbg !7054

if.then284:                                       ; preds = %if.end278
  %tobool286 = icmp eq i8 %unsignedp, 0, !dbg !7054
  %cond290 = select i1 %tobool286, %union.tree_node* %48, %union.tree_node* %49, !dbg !7054
  br label %cleanup, !dbg !7054

if.end291:                                        ; preds = %if.end278
  %50 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 74), align 16, !dbg !7056
  %cmp292 = icmp eq %union.tree_node* %1, %50, !dbg !7056
  %51 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 78), align 16, !dbg !7056
  %cmp295 = icmp eq %union.tree_node* %1, %51, !dbg !7056
  %or.cond24 = or i1 %cmp292, %cmp295, !dbg !7056
  br i1 %or.cond24, label %if.then297, label %if.end304, !dbg !7056

if.then297:                                       ; preds = %if.end291
  %tobool299 = icmp eq i8 %unsignedp, 0, !dbg !7056
  %cond303 = select i1 %tobool299, %union.tree_node* %50, %union.tree_node* %51, !dbg !7056
  br label %cleanup, !dbg !7056

if.end304:                                        ; preds = %if.end291
  %52 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 75), align 8, !dbg !7058
  %cmp305 = icmp eq %union.tree_node* %1, %52, !dbg !7058
  %53 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 79), align 8, !dbg !7058
  %cmp308 = icmp eq %union.tree_node* %1, %53, !dbg !7058
  %or.cond25 = or i1 %cmp305, %cmp308, !dbg !7058
  br i1 %or.cond25, label %if.then310, label %if.end317, !dbg !7058

if.then310:                                       ; preds = %if.end304
  %tobool312 = icmp eq i8 %unsignedp, 0, !dbg !7058
  %cond316 = select i1 %tobool312, %union.tree_node* %52, %union.tree_node* %53, !dbg !7058
  br label %cleanup, !dbg !7058

if.end317:                                        ; preds = %if.end304
  %54 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 76), align 16, !dbg !7060
  %cmp318 = icmp eq %union.tree_node* %1, %54, !dbg !7060
  %55 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 80), align 16, !dbg !7060
  %cmp321 = icmp eq %union.tree_node* %1, %55, !dbg !7060
  %or.cond26 = or i1 %cmp318, %cmp321, !dbg !7060
  br i1 %or.cond26, label %if.then323, label %if.end330, !dbg !7060

if.then323:                                       ; preds = %if.end317
  %tobool325 = icmp eq i8 %unsignedp, 0, !dbg !7060
  %cond329 = select i1 %tobool325, %union.tree_node* %54, %union.tree_node* %55, !dbg !7060
  br label %cleanup, !dbg !7060

if.end330:                                        ; preds = %if.end317
  %56 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 89), align 8, !dbg !7062
  %cmp331 = icmp eq %union.tree_node* %1, %56, !dbg !7062
  %57 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 94), align 16, !dbg !7062
  %cmp334 = icmp eq %union.tree_node* %1, %57, !dbg !7062
  %or.cond27 = or i1 %cmp331, %cmp334, !dbg !7062
  br i1 %or.cond27, label %if.then336, label %if.end343, !dbg !7062

if.then336:                                       ; preds = %if.end330
  %tobool338 = icmp eq i8 %unsignedp, 0, !dbg !7062
  %cond342 = select i1 %tobool338, %union.tree_node* %56, %union.tree_node* %57, !dbg !7062
  br label %cleanup, !dbg !7062

if.end343:                                        ; preds = %if.end330
  %58 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 90), align 16, !dbg !7064
  %cmp344 = icmp eq %union.tree_node* %1, %58, !dbg !7064
  %59 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 95), align 8, !dbg !7064
  %cmp347 = icmp eq %union.tree_node* %1, %59, !dbg !7064
  %or.cond28 = or i1 %cmp344, %cmp347, !dbg !7064
  br i1 %or.cond28, label %if.then349, label %if.end356, !dbg !7064

if.then349:                                       ; preds = %if.end343
  %tobool351 = icmp eq i8 %unsignedp, 0, !dbg !7064
  %cond355 = select i1 %tobool351, %union.tree_node* %58, %union.tree_node* %59, !dbg !7064
  br label %cleanup, !dbg !7064

if.end356:                                        ; preds = %if.end343
  %60 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 91), align 8, !dbg !7066
  %cmp357 = icmp eq %union.tree_node* %1, %60, !dbg !7066
  %61 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 96), align 16, !dbg !7066
  %cmp360 = icmp eq %union.tree_node* %1, %61, !dbg !7066
  %or.cond29 = or i1 %cmp357, %cmp360, !dbg !7066
  br i1 %or.cond29, label %if.then362, label %if.end369, !dbg !7066

if.then362:                                       ; preds = %if.end356
  %tobool364 = icmp eq i8 %unsignedp, 0, !dbg !7066
  %cond368 = select i1 %tobool364, %union.tree_node* %60, %union.tree_node* %61, !dbg !7066
  br label %cleanup, !dbg !7066

if.end369:                                        ; preds = %if.end356
  %62 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 92), align 16, !dbg !7068
  %cmp370 = icmp eq %union.tree_node* %1, %62, !dbg !7068
  %63 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 97), align 8, !dbg !7068
  %cmp373 = icmp eq %union.tree_node* %1, %63, !dbg !7068
  %or.cond30 = or i1 %cmp370, %cmp373, !dbg !7068
  br i1 %or.cond30, label %if.then375, label %if.end382, !dbg !7068

if.then375:                                       ; preds = %if.end369
  %tobool377 = icmp eq i8 %unsignedp, 0, !dbg !7068
  %cond381 = select i1 %tobool377, %union.tree_node* %62, %union.tree_node* %63, !dbg !7068
  br label %cleanup, !dbg !7068

if.end382:                                        ; preds = %if.end369
  %64 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 93), align 8, !dbg !7070
  %cmp383 = icmp eq %union.tree_node* %1, %64, !dbg !7070
  %65 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 98), align 16, !dbg !7070
  %cmp386 = icmp eq %union.tree_node* %1, %65, !dbg !7070
  %or.cond31 = or i1 %cmp383, %cmp386, !dbg !7070
  br i1 %or.cond31, label %if.then388, label %if.end395, !dbg !7070

if.then388:                                       ; preds = %if.end382
  %tobool390 = icmp eq i8 %unsignedp, 0, !dbg !7070
  %cond394 = select i1 %tobool390, %union.tree_node* %64, %union.tree_node* %65, !dbg !7070
  br label %cleanup, !dbg !7070

if.end395:                                        ; preds = %if.end382
  %66 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 99), align 8, !dbg !7072
  %cmp396 = icmp eq %union.tree_node* %1, %66, !dbg !7072
  %67 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 104), align 16, !dbg !7072
  %cmp399 = icmp eq %union.tree_node* %1, %67, !dbg !7072
  %or.cond32 = or i1 %cmp396, %cmp399, !dbg !7072
  br i1 %or.cond32, label %if.then401, label %if.end408, !dbg !7072

if.then401:                                       ; preds = %if.end395
  %tobool403 = icmp eq i8 %unsignedp, 0, !dbg !7072
  %cond407 = select i1 %tobool403, %union.tree_node* %66, %union.tree_node* %67, !dbg !7072
  br label %cleanup, !dbg !7072

if.end408:                                        ; preds = %if.end395
  %68 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 100), align 16, !dbg !7074
  %cmp409 = icmp eq %union.tree_node* %1, %68, !dbg !7074
  %69 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 105), align 8, !dbg !7074
  %cmp412 = icmp eq %union.tree_node* %1, %69, !dbg !7074
  %or.cond33 = or i1 %cmp409, %cmp412, !dbg !7074
  br i1 %or.cond33, label %if.then414, label %if.end421, !dbg !7074

if.then414:                                       ; preds = %if.end408
  %tobool416 = icmp eq i8 %unsignedp, 0, !dbg !7074
  %cond420 = select i1 %tobool416, %union.tree_node* %68, %union.tree_node* %69, !dbg !7074
  br label %cleanup, !dbg !7074

if.end421:                                        ; preds = %if.end408
  %70 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 101), align 8, !dbg !7076
  %cmp422 = icmp eq %union.tree_node* %1, %70, !dbg !7076
  %71 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 106), align 16, !dbg !7076
  %cmp425 = icmp eq %union.tree_node* %1, %71, !dbg !7076
  %or.cond34 = or i1 %cmp422, %cmp425, !dbg !7076
  br i1 %or.cond34, label %if.then427, label %if.end434, !dbg !7076

if.then427:                                       ; preds = %if.end421
  %tobool429 = icmp eq i8 %unsignedp, 0, !dbg !7076
  %cond433 = select i1 %tobool429, %union.tree_node* %70, %union.tree_node* %71, !dbg !7076
  br label %cleanup, !dbg !7076

if.end434:                                        ; preds = %if.end421
  %72 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 102), align 16, !dbg !7078
  %cmp435 = icmp eq %union.tree_node* %1, %72, !dbg !7078
  %73 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 107), align 8, !dbg !7078
  %cmp438 = icmp eq %union.tree_node* %1, %73, !dbg !7078
  %or.cond35 = or i1 %cmp435, %cmp438, !dbg !7078
  br i1 %or.cond35, label %if.then440, label %if.end447, !dbg !7078

if.then440:                                       ; preds = %if.end434
  %tobool442 = icmp eq i8 %unsignedp, 0, !dbg !7078
  %cond446 = select i1 %tobool442, %union.tree_node* %72, %union.tree_node* %73, !dbg !7078
  br label %cleanup, !dbg !7078

if.end447:                                        ; preds = %if.end434
  %74 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 103), align 8, !dbg !7080
  %cmp448 = icmp eq %union.tree_node* %1, %74, !dbg !7080
  %75 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 108), align 16, !dbg !7080
  %cmp451 = icmp eq %union.tree_node* %1, %75, !dbg !7080
  %or.cond36 = or i1 %cmp448, %cmp451, !dbg !7080
  br i1 %or.cond36, label %if.then453, label %if.end460, !dbg !7080

if.then453:                                       ; preds = %if.end447
  %tobool455 = icmp eq i8 %unsignedp, 0, !dbg !7080
  %cond459 = select i1 %tobool455, %union.tree_node* %74, %union.tree_node* %75, !dbg !7080
  br label %cleanup, !dbg !7080

if.end460:                                        ; preds = %if.end447
  %76 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 109), align 8, !dbg !7082
  %cmp461 = icmp eq %union.tree_node* %1, %76, !dbg !7082
  %77 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 113), align 8, !dbg !7082
  %cmp464 = icmp eq %union.tree_node* %1, %77, !dbg !7082
  %or.cond37 = or i1 %cmp461, %cmp464, !dbg !7082
  br i1 %or.cond37, label %if.then466, label %if.end473, !dbg !7082

if.then466:                                       ; preds = %if.end460
  %tobool468 = icmp eq i8 %unsignedp, 0, !dbg !7082
  %cond472 = select i1 %tobool468, %union.tree_node* %76, %union.tree_node* %77, !dbg !7082
  br label %cleanup, !dbg !7082

if.end473:                                        ; preds = %if.end460
  %78 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 110), align 16, !dbg !7084
  %cmp474 = icmp eq %union.tree_node* %1, %78, !dbg !7084
  %79 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 114), align 16, !dbg !7084
  %cmp477 = icmp eq %union.tree_node* %1, %79, !dbg !7084
  %or.cond38 = or i1 %cmp474, %cmp477, !dbg !7084
  br i1 %or.cond38, label %if.then479, label %if.end486, !dbg !7084

if.then479:                                       ; preds = %if.end473
  %tobool481 = icmp eq i8 %unsignedp, 0, !dbg !7084
  %cond485 = select i1 %tobool481, %union.tree_node* %78, %union.tree_node* %79, !dbg !7084
  br label %cleanup, !dbg !7084

if.end486:                                        ; preds = %if.end473
  %80 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 111), align 8, !dbg !7086
  %cmp487 = icmp eq %union.tree_node* %1, %80, !dbg !7086
  %81 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 115), align 8, !dbg !7086
  %cmp490 = icmp eq %union.tree_node* %1, %81, !dbg !7086
  %or.cond39 = or i1 %cmp487, %cmp490, !dbg !7086
  br i1 %or.cond39, label %if.then492, label %if.end499, !dbg !7086

if.then492:                                       ; preds = %if.end486
  %tobool494 = icmp eq i8 %unsignedp, 0, !dbg !7086
  %cond498 = select i1 %tobool494, %union.tree_node* %80, %union.tree_node* %81, !dbg !7086
  br label %cleanup, !dbg !7086

if.end499:                                        ; preds = %if.end486
  %82 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 112), align 16, !dbg !7088
  %cmp500 = icmp eq %union.tree_node* %1, %82, !dbg !7088
  %83 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 116), align 16, !dbg !7088
  %cmp503 = icmp eq %union.tree_node* %1, %83, !dbg !7088
  %or.cond40 = or i1 %cmp500, %cmp503, !dbg !7088
  br i1 %or.cond40, label %if.then505, label %if.end512, !dbg !7088

if.then505:                                       ; preds = %if.end499
  %tobool507 = icmp eq i8 %unsignedp, 0, !dbg !7088
  %cond511 = select i1 %tobool507, %union.tree_node* %82, %union.tree_node* %83, !dbg !7088
  br label %cleanup, !dbg !7088

if.end512:                                        ; preds = %if.end499
  %84 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 117), align 8, !dbg !7090
  %cmp513 = icmp eq %union.tree_node* %1, %84, !dbg !7090
  %85 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 121), align 8, !dbg !7090
  %cmp516 = icmp eq %union.tree_node* %1, %85, !dbg !7090
  %or.cond41 = or i1 %cmp513, %cmp516, !dbg !7090
  br i1 %or.cond41, label %if.then518, label %if.end525, !dbg !7090

if.then518:                                       ; preds = %if.end512
  %tobool520 = icmp eq i8 %unsignedp, 0, !dbg !7090
  %cond524 = select i1 %tobool520, %union.tree_node* %84, %union.tree_node* %85, !dbg !7090
  br label %cleanup, !dbg !7090

if.end525:                                        ; preds = %if.end512
  %86 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 118), align 16, !dbg !7092
  %cmp526 = icmp eq %union.tree_node* %1, %86, !dbg !7092
  %87 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 122), align 16, !dbg !7092
  %cmp529 = icmp eq %union.tree_node* %1, %87, !dbg !7092
  %or.cond42 = or i1 %cmp526, %cmp529, !dbg !7092
  br i1 %or.cond42, label %if.then531, label %if.end538, !dbg !7092

if.then531:                                       ; preds = %if.end525
  %tobool533 = icmp eq i8 %unsignedp, 0, !dbg !7092
  %cond537 = select i1 %tobool533, %union.tree_node* %86, %union.tree_node* %87, !dbg !7092
  br label %cleanup, !dbg !7092

if.end538:                                        ; preds = %if.end525
  %88 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 119), align 8, !dbg !7094
  %cmp539 = icmp eq %union.tree_node* %1, %88, !dbg !7094
  %89 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 123), align 8, !dbg !7094
  %cmp542 = icmp eq %union.tree_node* %1, %89, !dbg !7094
  %or.cond43 = or i1 %cmp539, %cmp542, !dbg !7094
  br i1 %or.cond43, label %if.then544, label %if.end551, !dbg !7094

if.then544:                                       ; preds = %if.end538
  %tobool546 = icmp eq i8 %unsignedp, 0, !dbg !7094
  %cond550 = select i1 %tobool546, %union.tree_node* %88, %union.tree_node* %89, !dbg !7094
  br label %cleanup, !dbg !7094

if.end551:                                        ; preds = %if.end538
  %90 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 120), align 16, !dbg !7096
  %cmp552 = icmp eq %union.tree_node* %1, %90, !dbg !7096
  %91 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 124), align 16, !dbg !7096
  %cmp555 = icmp eq %union.tree_node* %1, %91, !dbg !7096
  %or.cond44 = or i1 %cmp552, %cmp555, !dbg !7096
  br i1 %or.cond44, label %if.then557, label %if.end564, !dbg !7096

if.then557:                                       ; preds = %if.end551
  %tobool559 = icmp eq i8 %unsignedp, 0, !dbg !7096
  %cond563 = select i1 %tobool559, %union.tree_node* %90, %union.tree_node* %91, !dbg !7096
  br label %cleanup, !dbg !7096

if.end564:                                        ; preds = %if.end551
  %92 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7098
  %bf.load = load i64, i64* %92, align 8, !dbg !7098
  %bf.cast45 = and i64 %bf.load, 65535, !dbg !7098
  %cmp565 = icmp eq i64 %bf.cast45, 6, !dbg !7098
  br i1 %cmp565, label %lor.lhs.false581, label %lor.lhs.false567, !dbg !7098

lor.lhs.false567:                                 ; preds = %if.end564
  %cmp572 = icmp eq i64 %bf.cast45, 7, !dbg !7098
  br i1 %cmp572, label %lor.lhs.false581, label %lor.lhs.false574, !dbg !7098

lor.lhs.false574:                                 ; preds = %lor.lhs.false567
  %cmp579 = icmp eq i64 %bf.cast45, 8, !dbg !7098
  br i1 %cmp579, label %lor.lhs.false581, label %cleanup, !dbg !7100

lor.lhs.false581:                                 ; preds = %lor.lhs.false574, %lor.lhs.false567, %if.end564
  %bf.lshr = lshr i64 %bf.load, 21, !dbg !7101
  %93 = trunc i64 %bf.lshr to i32, !dbg !7101
  %bf.cast585 = and i32 %93, 1, !dbg !7101
  %conv586 = zext i8 %unsignedp to i32, !dbg !7102
  %cmp587 = icmp eq i32 %bf.cast585, %conv586, !dbg !7103
  br i1 %cmp587, label %cleanup, label %if.end590, !dbg !7104

if.end590:                                        ; preds = %lor.lhs.false581
  %cmp595 = icmp eq i64 %bf.cast45, 14, !dbg !7105
  br i1 %cmp595, label %cond.true597, label %cond.false598, !dbg !7105

cond.true597:                                     ; preds = %if.end590
  %call = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7105
  %.pre = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1) to i64**), align 8, !dbg !7105
  br label %cond.end603, !dbg !7105

cond.false598:                                    ; preds = %if.end590
  %type599 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7105
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type599, i64 0, i32 6, !dbg !7105
  %bf.load600 = load i32, i32* %mode, align 4, !dbg !7105
  %bf.lshr601 = lshr i32 %bf.load600, 16, !dbg !7105
  %bf.clear602 = and i32 %bf.lshr601, 255, !dbg !7105
  br label %cond.end603, !dbg !7105

cond.end603:                                      ; preds = %cond.false598, %cond.true597
  %94 = phi i64* [ %.pre, %cond.true597 ], [ %5, %cond.false598 ], !dbg !7105
  %cond604 = phi i32 [ %call, %cond.true597 ], [ %bf.clear602, %cond.false598 ], !dbg !7105
  %bf.load606 = load i64, i64* %94, align 8, !dbg !7105
  %bf.cast60849 = and i64 %bf.load606, 65535, !dbg !7105
  %cmp609 = icmp eq i64 %bf.cast60849, 14, !dbg !7105
  br i1 %cmp609, label %cond.true611, label %cond.false613, !dbg !7105

cond.true611:                                     ; preds = %cond.end603
  %.cast = bitcast i64* %94 to %union.tree_node*, !dbg !7105
  %call612 = tail call i32 @vector_type_mode(%union.tree_node* %.cast) #7, !dbg !7105
  br label %cond.end619, !dbg !7105

cond.false613:                                    ; preds = %cond.end603
  %type614 = bitcast i64* %94 to %struct.tree_type*, !dbg !7105
  %mode615 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type614, i64 0, i32 6, !dbg !7105
  %bf.load616 = load i32, i32* %mode615, align 4, !dbg !7105
  %bf.lshr617 = lshr i32 %bf.load616, 16, !dbg !7105
  %bf.clear618 = and i32 %bf.lshr617, 255, !dbg !7105
  br label %cond.end619, !dbg !7105

cond.end619:                                      ; preds = %cond.false613, %cond.true611
  %cond620 = phi i32 [ %call612, %cond.true611 ], [ %bf.clear618, %cond.false613 ], !dbg !7105
  %cmp621 = icmp eq i32 %cond604, %cond620, !dbg !7105
  br i1 %cmp621, label %land.lhs.true, label %if.end639, !dbg !7105

land.lhs.true:                                    ; preds = %cond.end619
  %type623 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7105
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type623, i64 0, i32 6, !dbg !7105
  %bf.load624 = load i32, i32* %precision, align 4, !dbg !7105
  %95 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1) to %struct.tree_type**), align 8, !dbg !7105
  %precision627 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %95, i64 0, i32 6, !dbg !7105
  %bf.load628 = load i32, i32* %precision627, align 4, !dbg !7105
  %96 = xor i32 %bf.load624, %bf.load628, !dbg !7105
  %97 = and i32 %96, 1023, !dbg !7105
  %cmp630 = icmp eq i32 %97, 0, !dbg !7105
  br i1 %cmp630, label %if.then632, label %if.end639, !dbg !7107

if.then632:                                       ; preds = %land.lhs.true
  %98 = bitcast %struct.tree_type* %95 to %union.tree_node*, !dbg !7107
  %tobool634 = icmp eq i8 %unsignedp, 0, !dbg !7108
  %99 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !7108
  %cond638 = select i1 %tobool634, %union.tree_node* %98, %union.tree_node* %99, !dbg !7108
  br label %cleanup, !dbg !7108

if.end639:                                        ; preds = %land.lhs.true, %cond.end619
  %bf.load641 = load i64, i64* %92, align 8, !dbg !7109
  %bf.cast64350 = and i64 %bf.load641, 65535, !dbg !7109
  %cmp644 = icmp eq i64 %bf.cast64350, 14, !dbg !7109
  br i1 %cmp644, label %cond.true646, label %cond.false648, !dbg !7109

cond.true646:                                     ; preds = %if.end639
  %call647 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7109
  br label %cond.end654, !dbg !7109

cond.false648:                                    ; preds = %if.end639
  %type649 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7109
  %mode650 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type649, i64 0, i32 6, !dbg !7109
  %bf.load651 = load i32, i32* %mode650, align 4, !dbg !7109
  %bf.lshr652 = lshr i32 %bf.load651, 16, !dbg !7109
  %bf.clear653 = and i32 %bf.lshr652, 255, !dbg !7109
  br label %cond.end654, !dbg !7109

cond.end654:                                      ; preds = %cond.false648, %cond.true646
  %cond655 = phi i32 [ %call647, %cond.true646 ], [ %bf.clear653, %cond.false648 ], !dbg !7109
  %100 = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5) to i64**), align 8, !dbg !7109
  %bf.load657 = load i64, i64* %100, align 8, !dbg !7109
  %bf.cast65951 = and i64 %bf.load657, 65535, !dbg !7109
  %cmp660 = icmp eq i64 %bf.cast65951, 14, !dbg !7109
  br i1 %cmp660, label %cond.true662, label %cond.false664, !dbg !7109

cond.true662:                                     ; preds = %cond.end654
  %.cast52 = bitcast i64* %100 to %union.tree_node*, !dbg !7109
  %call663 = tail call i32 @vector_type_mode(%union.tree_node* %.cast52) #7, !dbg !7109
  br label %cond.end670, !dbg !7109

cond.false664:                                    ; preds = %cond.end654
  %type665 = bitcast i64* %100 to %struct.tree_type*, !dbg !7109
  %mode666 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type665, i64 0, i32 6, !dbg !7109
  %bf.load667 = load i32, i32* %mode666, align 4, !dbg !7109
  %bf.lshr668 = lshr i32 %bf.load667, 16, !dbg !7109
  %bf.clear669 = and i32 %bf.lshr668, 255, !dbg !7109
  br label %cond.end670, !dbg !7109

cond.end670:                                      ; preds = %cond.false664, %cond.true662
  %cond671 = phi i32 [ %call663, %cond.true662 ], [ %bf.clear669, %cond.false664 ], !dbg !7109
  %cmp672 = icmp eq i32 %cond655, %cond671, !dbg !7109
  br i1 %cmp672, label %land.lhs.true674, label %if.end692, !dbg !7109

land.lhs.true674:                                 ; preds = %cond.end670
  %type675 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7109
  %precision676 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type675, i64 0, i32 6, !dbg !7109
  %bf.load677 = load i32, i32* %precision676, align 4, !dbg !7109
  %101 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5) to %struct.tree_type**), align 8, !dbg !7109
  %precision680 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %101, i64 0, i32 6, !dbg !7109
  %bf.load681 = load i32, i32* %precision680, align 4, !dbg !7109
  %102 = xor i32 %bf.load677, %bf.load681, !dbg !7109
  %103 = and i32 %102, 1023, !dbg !7109
  %cmp683 = icmp eq i32 %103, 0, !dbg !7109
  br i1 %cmp683, label %if.then685, label %if.end692, !dbg !7111

if.then685:                                       ; preds = %land.lhs.true674
  %104 = bitcast %struct.tree_type* %101 to %union.tree_node*, !dbg !7111
  %tobool687 = icmp eq i8 %unsignedp, 0, !dbg !7112
  %105 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 6), align 16, !dbg !7112
  %cond691 = select i1 %tobool687, %union.tree_node* %104, %union.tree_node* %105, !dbg !7112
  br label %cleanup, !dbg !7112

if.end692:                                        ; preds = %land.lhs.true674, %cond.end670
  %bf.load694 = load i64, i64* %92, align 8, !dbg !7113
  %bf.cast69653 = and i64 %bf.load694, 65535, !dbg !7113
  %cmp697 = icmp eq i64 %bf.cast69653, 14, !dbg !7113
  br i1 %cmp697, label %cond.true699, label %cond.false701, !dbg !7113

cond.true699:                                     ; preds = %if.end692
  %call700 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7113
  br label %cond.end707, !dbg !7113

cond.false701:                                    ; preds = %if.end692
  %type702 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7113
  %mode703 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type702, i64 0, i32 6, !dbg !7113
  %bf.load704 = load i32, i32* %mode703, align 4, !dbg !7113
  %bf.lshr705 = lshr i32 %bf.load704, 16, !dbg !7113
  %bf.clear706 = and i32 %bf.lshr705, 255, !dbg !7113
  br label %cond.end707, !dbg !7113

cond.end707:                                      ; preds = %cond.false701, %cond.true699
  %cond708 = phi i32 [ %call700, %cond.true699 ], [ %bf.clear706, %cond.false701 ], !dbg !7113
  %106 = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3) to i64**), align 8, !dbg !7113
  %bf.load710 = load i64, i64* %106, align 8, !dbg !7113
  %bf.cast71254 = and i64 %bf.load710, 65535, !dbg !7113
  %cmp713 = icmp eq i64 %bf.cast71254, 14, !dbg !7113
  br i1 %cmp713, label %cond.true715, label %cond.false717, !dbg !7113

cond.true715:                                     ; preds = %cond.end707
  %.cast55 = bitcast i64* %106 to %union.tree_node*, !dbg !7113
  %call716 = tail call i32 @vector_type_mode(%union.tree_node* %.cast55) #7, !dbg !7113
  br label %cond.end723, !dbg !7113

cond.false717:                                    ; preds = %cond.end707
  %type718 = bitcast i64* %106 to %struct.tree_type*, !dbg !7113
  %mode719 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type718, i64 0, i32 6, !dbg !7113
  %bf.load720 = load i32, i32* %mode719, align 4, !dbg !7113
  %bf.lshr721 = lshr i32 %bf.load720, 16, !dbg !7113
  %bf.clear722 = and i32 %bf.lshr721, 255, !dbg !7113
  br label %cond.end723, !dbg !7113

cond.end723:                                      ; preds = %cond.false717, %cond.true715
  %cond724 = phi i32 [ %call716, %cond.true715 ], [ %bf.clear722, %cond.false717 ], !dbg !7113
  %cmp725 = icmp eq i32 %cond708, %cond724, !dbg !7113
  br i1 %cmp725, label %land.lhs.true727, label %if.end745, !dbg !7113

land.lhs.true727:                                 ; preds = %cond.end723
  %type728 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7113
  %precision729 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type728, i64 0, i32 6, !dbg !7113
  %bf.load730 = load i32, i32* %precision729, align 4, !dbg !7113
  %107 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 3) to %struct.tree_type**), align 8, !dbg !7113
  %precision733 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %107, i64 0, i32 6, !dbg !7113
  %bf.load734 = load i32, i32* %precision733, align 4, !dbg !7113
  %108 = xor i32 %bf.load730, %bf.load734, !dbg !7113
  %109 = and i32 %108, 1023, !dbg !7113
  %cmp736 = icmp eq i32 %109, 0, !dbg !7113
  br i1 %cmp736, label %if.then738, label %if.end745, !dbg !7115

if.then738:                                       ; preds = %land.lhs.true727
  %110 = bitcast %struct.tree_type* %107 to %union.tree_node*, !dbg !7115
  %tobool740 = icmp eq i8 %unsignedp, 0, !dbg !7116
  %111 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 4), align 16, !dbg !7116
  %cond744 = select i1 %tobool740, %union.tree_node* %110, %union.tree_node* %111, !dbg !7116
  br label %cleanup, !dbg !7116

if.end745:                                        ; preds = %land.lhs.true727, %cond.end723
  %bf.load747 = load i64, i64* %92, align 8, !dbg !7117
  %bf.cast74956 = and i64 %bf.load747, 65535, !dbg !7117
  %cmp750 = icmp eq i64 %bf.cast74956, 14, !dbg !7117
  br i1 %cmp750, label %cond.true752, label %cond.false754, !dbg !7117

cond.true752:                                     ; preds = %if.end745
  %call753 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7117
  br label %cond.end760, !dbg !7117

cond.false754:                                    ; preds = %if.end745
  %type755 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7117
  %mode756 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type755, i64 0, i32 6, !dbg !7117
  %bf.load757 = load i32, i32* %mode756, align 4, !dbg !7117
  %bf.lshr758 = lshr i32 %bf.load757, 16, !dbg !7117
  %bf.clear759 = and i32 %bf.lshr758, 255, !dbg !7117
  br label %cond.end760, !dbg !7117

cond.end760:                                      ; preds = %cond.false754, %cond.true752
  %cond761 = phi i32 [ %call753, %cond.true752 ], [ %bf.clear759, %cond.false754 ], !dbg !7117
  %112 = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7) to i64**), align 8, !dbg !7117
  %bf.load763 = load i64, i64* %112, align 8, !dbg !7117
  %bf.cast76557 = and i64 %bf.load763, 65535, !dbg !7117
  %cmp766 = icmp eq i64 %bf.cast76557, 14, !dbg !7117
  br i1 %cmp766, label %cond.true768, label %cond.false770, !dbg !7117

cond.true768:                                     ; preds = %cond.end760
  %.cast58 = bitcast i64* %112 to %union.tree_node*, !dbg !7117
  %call769 = tail call i32 @vector_type_mode(%union.tree_node* %.cast58) #7, !dbg !7117
  br label %cond.end776, !dbg !7117

cond.false770:                                    ; preds = %cond.end760
  %type771 = bitcast i64* %112 to %struct.tree_type*, !dbg !7117
  %mode772 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type771, i64 0, i32 6, !dbg !7117
  %bf.load773 = load i32, i32* %mode772, align 4, !dbg !7117
  %bf.lshr774 = lshr i32 %bf.load773, 16, !dbg !7117
  %bf.clear775 = and i32 %bf.lshr774, 255, !dbg !7117
  br label %cond.end776, !dbg !7117

cond.end776:                                      ; preds = %cond.false770, %cond.true768
  %cond777 = phi i32 [ %call769, %cond.true768 ], [ %bf.clear775, %cond.false770 ], !dbg !7117
  %cmp778 = icmp eq i32 %cond761, %cond777, !dbg !7117
  br i1 %cmp778, label %land.lhs.true780, label %if.end798, !dbg !7117

land.lhs.true780:                                 ; preds = %cond.end776
  %type781 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7117
  %precision782 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type781, i64 0, i32 6, !dbg !7117
  %bf.load783 = load i32, i32* %precision782, align 4, !dbg !7117
  %113 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 7) to %struct.tree_type**), align 8, !dbg !7117
  %precision786 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %113, i64 0, i32 6, !dbg !7117
  %bf.load787 = load i32, i32* %precision786, align 4, !dbg !7117
  %114 = xor i32 %bf.load783, %bf.load787, !dbg !7117
  %115 = and i32 %114, 1023, !dbg !7117
  %cmp789 = icmp eq i32 %115, 0, !dbg !7117
  br i1 %cmp789, label %if.then791, label %if.end798, !dbg !7119

if.then791:                                       ; preds = %land.lhs.true780
  %116 = bitcast %struct.tree_type* %113 to %union.tree_node*, !dbg !7119
  %tobool793 = icmp eq i8 %unsignedp, 0, !dbg !7120
  %117 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 8), align 16, !dbg !7120
  %cond797 = select i1 %tobool793, %union.tree_node* %116, %union.tree_node* %117, !dbg !7120
  br label %cleanup, !dbg !7120

if.end798:                                        ; preds = %land.lhs.true780, %cond.end776
  %bf.load800 = load i64, i64* %92, align 8, !dbg !7121
  %bf.cast80259 = and i64 %bf.load800, 65535, !dbg !7121
  %cmp803 = icmp eq i64 %bf.cast80259, 14, !dbg !7121
  br i1 %cmp803, label %cond.true805, label %cond.false807, !dbg !7121

cond.true805:                                     ; preds = %if.end798
  %call806 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7121
  br label %cond.end813, !dbg !7121

cond.false807:                                    ; preds = %if.end798
  %type808 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7121
  %mode809 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type808, i64 0, i32 6, !dbg !7121
  %bf.load810 = load i32, i32* %mode809, align 4, !dbg !7121
  %bf.lshr811 = lshr i32 %bf.load810, 16, !dbg !7121
  %bf.clear812 = and i32 %bf.lshr811, 255, !dbg !7121
  br label %cond.end813, !dbg !7121

cond.end813:                                      ; preds = %cond.false807, %cond.true805
  %cond814 = phi i32 [ %call806, %cond.true805 ], [ %bf.clear812, %cond.false807 ], !dbg !7121
  %118 = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9) to i64**), align 8, !dbg !7121
  %bf.load816 = load i64, i64* %118, align 8, !dbg !7121
  %bf.cast81860 = and i64 %bf.load816, 65535, !dbg !7121
  %cmp819 = icmp eq i64 %bf.cast81860, 14, !dbg !7121
  br i1 %cmp819, label %cond.true821, label %cond.false823, !dbg !7121

cond.true821:                                     ; preds = %cond.end813
  %.cast61 = bitcast i64* %118 to %union.tree_node*, !dbg !7121
  %call822 = tail call i32 @vector_type_mode(%union.tree_node* %.cast61) #7, !dbg !7121
  br label %cond.end829, !dbg !7121

cond.false823:                                    ; preds = %cond.end813
  %type824 = bitcast i64* %118 to %struct.tree_type*, !dbg !7121
  %mode825 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type824, i64 0, i32 6, !dbg !7121
  %bf.load826 = load i32, i32* %mode825, align 4, !dbg !7121
  %bf.lshr827 = lshr i32 %bf.load826, 16, !dbg !7121
  %bf.clear828 = and i32 %bf.lshr827, 255, !dbg !7121
  br label %cond.end829, !dbg !7121

cond.end829:                                      ; preds = %cond.false823, %cond.true821
  %cond830 = phi i32 [ %call822, %cond.true821 ], [ %bf.clear828, %cond.false823 ], !dbg !7121
  %cmp831 = icmp eq i32 %cond814, %cond830, !dbg !7121
  br i1 %cmp831, label %land.lhs.true833, label %if.end851, !dbg !7121

land.lhs.true833:                                 ; preds = %cond.end829
  %type834 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7121
  %precision835 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type834, i64 0, i32 6, !dbg !7121
  %bf.load836 = load i32, i32* %precision835, align 4, !dbg !7121
  %119 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 9) to %struct.tree_type**), align 8, !dbg !7121
  %precision839 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %119, i64 0, i32 6, !dbg !7121
  %bf.load840 = load i32, i32* %precision839, align 4, !dbg !7121
  %120 = xor i32 %bf.load836, %bf.load840, !dbg !7121
  %121 = and i32 %120, 1023, !dbg !7121
  %cmp842 = icmp eq i32 %121, 0, !dbg !7121
  br i1 %cmp842, label %if.then844, label %if.end851, !dbg !7123

if.then844:                                       ; preds = %land.lhs.true833
  %122 = bitcast %struct.tree_type* %119 to %union.tree_node*, !dbg !7123
  %tobool846 = icmp eq i8 %unsignedp, 0, !dbg !7124
  %123 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 10), align 16, !dbg !7124
  %cond850 = select i1 %tobool846, %union.tree_node* %122, %union.tree_node* %123, !dbg !7124
  br label %cleanup, !dbg !7124

if.end851:                                        ; preds = %land.lhs.true833, %cond.end829
  %bf.load853 = load i64, i64* %92, align 8, !dbg !7125
  %bf.cast85562 = and i64 %bf.load853, 65535, !dbg !7125
  %cmp856 = icmp eq i64 %bf.cast85562, 14, !dbg !7125
  br i1 %cmp856, label %cond.true858, label %cond.false860, !dbg !7125

cond.true858:                                     ; preds = %if.end851
  %call859 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7125
  br label %cond.end866, !dbg !7125

cond.false860:                                    ; preds = %if.end851
  %type861 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7125
  %mode862 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type861, i64 0, i32 6, !dbg !7125
  %bf.load863 = load i32, i32* %mode862, align 4, !dbg !7125
  %bf.lshr864 = lshr i32 %bf.load863, 16, !dbg !7125
  %bf.clear865 = and i32 %bf.lshr864, 255, !dbg !7125
  br label %cond.end866, !dbg !7125

cond.end866:                                      ; preds = %cond.false860, %cond.true858
  %cond867 = phi i32 [ %call859, %cond.true858 ], [ %bf.clear865, %cond.false860 ], !dbg !7125
  %124 = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5) to i64**), align 8, !dbg !7125
  %bf.load869 = load i64, i64* %124, align 8, !dbg !7125
  %bf.cast87163 = and i64 %bf.load869, 65535, !dbg !7125
  %cmp872 = icmp eq i64 %bf.cast87163, 14, !dbg !7125
  br i1 %cmp872, label %cond.true874, label %cond.false876, !dbg !7125

cond.true874:                                     ; preds = %cond.end866
  %.cast64 = bitcast i64* %124 to %union.tree_node*, !dbg !7125
  %call875 = tail call i32 @vector_type_mode(%union.tree_node* %.cast64) #7, !dbg !7125
  br label %cond.end882, !dbg !7125

cond.false876:                                    ; preds = %cond.end866
  %type877 = bitcast i64* %124 to %struct.tree_type*, !dbg !7125
  %mode878 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type877, i64 0, i32 6, !dbg !7125
  %bf.load879 = load i32, i32* %mode878, align 4, !dbg !7125
  %bf.lshr880 = lshr i32 %bf.load879, 16, !dbg !7125
  %bf.clear881 = and i32 %bf.lshr880, 255, !dbg !7125
  br label %cond.end882, !dbg !7125

cond.end882:                                      ; preds = %cond.false876, %cond.true874
  %cond883 = phi i32 [ %call875, %cond.true874 ], [ %bf.clear881, %cond.false876 ], !dbg !7125
  %cmp884 = icmp eq i32 %cond867, %cond883, !dbg !7125
  br i1 %cmp884, label %land.lhs.true886, label %if.end904, !dbg !7125

land.lhs.true886:                                 ; preds = %cond.end882
  %type887 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7125
  %precision888 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type887, i64 0, i32 6, !dbg !7125
  %bf.load889 = load i32, i32* %precision888, align 4, !dbg !7125
  %125 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 5) to %struct.tree_type**), align 8, !dbg !7125
  %precision892 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %125, i64 0, i32 6, !dbg !7125
  %bf.load893 = load i32, i32* %precision892, align 4, !dbg !7125
  %126 = xor i32 %bf.load889, %bf.load893, !dbg !7125
  %127 = and i32 %126, 1023, !dbg !7125
  %cmp895 = icmp eq i32 %127, 0, !dbg !7125
  br i1 %cmp895, label %if.then897, label %if.end904, !dbg !7127

if.then897:                                       ; preds = %land.lhs.true886
  %128 = bitcast %struct.tree_type* %125 to %union.tree_node*, !dbg !7127
  %tobool899 = icmp eq i8 %unsignedp, 0, !dbg !7128
  %129 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 10), align 16, !dbg !7128
  %cond903 = select i1 %tobool899, %union.tree_node* %128, %union.tree_node* %129, !dbg !7128
  br label %cleanup, !dbg !7128

if.end904:                                        ; preds = %land.lhs.true886, %cond.end882
  %bf.load906 = load i64, i64* %92, align 8, !dbg !7129
  %bf.cast90865 = and i64 %bf.load906, 65535, !dbg !7129
  %cmp909 = icmp eq i64 %bf.cast90865, 14, !dbg !7129
  br i1 %cmp909, label %cond.true911, label %cond.false913, !dbg !7129

cond.true911:                                     ; preds = %if.end904
  %call912 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7129
  br label %cond.end919, !dbg !7129

cond.false913:                                    ; preds = %if.end904
  %type914 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7129
  %mode915 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type914, i64 0, i32 6, !dbg !7129
  %bf.load916 = load i32, i32* %mode915, align 4, !dbg !7129
  %bf.lshr917 = lshr i32 %bf.load916, 16, !dbg !7129
  %bf.clear918 = and i32 %bf.lshr917, 255, !dbg !7129
  br label %cond.end919, !dbg !7129

cond.end919:                                      ; preds = %cond.false913, %cond.true911
  %cond920 = phi i32 [ %call912, %cond.true911 ], [ %bf.clear918, %cond.false913 ], !dbg !7129
  %130 = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4) to i64**), align 16, !dbg !7129
  %bf.load922 = load i64, i64* %130, align 8, !dbg !7129
  %bf.cast92466 = and i64 %bf.load922, 65535, !dbg !7129
  %cmp925 = icmp eq i64 %bf.cast92466, 14, !dbg !7129
  br i1 %cmp925, label %cond.true927, label %cond.false929, !dbg !7129

cond.true927:                                     ; preds = %cond.end919
  %.cast67 = bitcast i64* %130 to %union.tree_node*, !dbg !7129
  %call928 = tail call i32 @vector_type_mode(%union.tree_node* %.cast67) #7, !dbg !7129
  br label %cond.end935, !dbg !7129

cond.false929:                                    ; preds = %cond.end919
  %type930 = bitcast i64* %130 to %struct.tree_type*, !dbg !7129
  %mode931 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type930, i64 0, i32 6, !dbg !7129
  %bf.load932 = load i32, i32* %mode931, align 4, !dbg !7129
  %bf.lshr933 = lshr i32 %bf.load932, 16, !dbg !7129
  %bf.clear934 = and i32 %bf.lshr933, 255, !dbg !7129
  br label %cond.end935, !dbg !7129

cond.end935:                                      ; preds = %cond.false929, %cond.true927
  %cond936 = phi i32 [ %call928, %cond.true927 ], [ %bf.clear934, %cond.false929 ], !dbg !7129
  %cmp937 = icmp eq i32 %cond920, %cond936, !dbg !7129
  br i1 %cmp937, label %land.lhs.true939, label %if.end957, !dbg !7129

land.lhs.true939:                                 ; preds = %cond.end935
  %type940 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7129
  %precision941 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type940, i64 0, i32 6, !dbg !7129
  %bf.load942 = load i32, i32* %precision941, align 4, !dbg !7129
  %131 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 4) to %struct.tree_type**), align 16, !dbg !7129
  %precision945 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %131, i64 0, i32 6, !dbg !7129
  %bf.load946 = load i32, i32* %precision945, align 4, !dbg !7129
  %132 = xor i32 %bf.load942, %bf.load946, !dbg !7129
  %133 = and i32 %132, 1023, !dbg !7129
  %cmp948 = icmp eq i32 %133, 0, !dbg !7129
  br i1 %cmp948, label %if.then950, label %if.end957, !dbg !7131

if.then950:                                       ; preds = %land.lhs.true939
  %134 = bitcast %struct.tree_type* %131 to %union.tree_node*, !dbg !7131
  %tobool952 = icmp eq i8 %unsignedp, 0, !dbg !7132
  %135 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 9), align 8, !dbg !7132
  %cond956 = select i1 %tobool952, %union.tree_node* %134, %union.tree_node* %135, !dbg !7132
  br label %cleanup, !dbg !7132

if.end957:                                        ; preds = %land.lhs.true939, %cond.end935
  %bf.load959 = load i64, i64* %92, align 8, !dbg !7133
  %bf.cast96168 = and i64 %bf.load959, 65535, !dbg !7133
  %cmp962 = icmp eq i64 %bf.cast96168, 14, !dbg !7133
  br i1 %cmp962, label %cond.true964, label %cond.false966, !dbg !7133

cond.true964:                                     ; preds = %if.end957
  %call965 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7133
  br label %cond.end972, !dbg !7133

cond.false966:                                    ; preds = %if.end957
  %type967 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7133
  %mode968 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type967, i64 0, i32 6, !dbg !7133
  %bf.load969 = load i32, i32* %mode968, align 4, !dbg !7133
  %bf.lshr970 = lshr i32 %bf.load969, 16, !dbg !7133
  %bf.clear971 = and i32 %bf.lshr970, 255, !dbg !7133
  br label %cond.end972, !dbg !7133

cond.end972:                                      ; preds = %cond.false966, %cond.true964
  %cond973 = phi i32 [ %call965, %cond.true964 ], [ %bf.clear971, %cond.false966 ], !dbg !7133
  %136 = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3) to i64**), align 8, !dbg !7133
  %bf.load975 = load i64, i64* %136, align 8, !dbg !7133
  %bf.cast97769 = and i64 %bf.load975, 65535, !dbg !7133
  %cmp978 = icmp eq i64 %bf.cast97769, 14, !dbg !7133
  br i1 %cmp978, label %cond.true980, label %cond.false982, !dbg !7133

cond.true980:                                     ; preds = %cond.end972
  %.cast70 = bitcast i64* %136 to %union.tree_node*, !dbg !7133
  %call981 = tail call i32 @vector_type_mode(%union.tree_node* %.cast70) #7, !dbg !7133
  br label %cond.end988, !dbg !7133

cond.false982:                                    ; preds = %cond.end972
  %type983 = bitcast i64* %136 to %struct.tree_type*, !dbg !7133
  %mode984 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type983, i64 0, i32 6, !dbg !7133
  %bf.load985 = load i32, i32* %mode984, align 4, !dbg !7133
  %bf.lshr986 = lshr i32 %bf.load985, 16, !dbg !7133
  %bf.clear987 = and i32 %bf.lshr986, 255, !dbg !7133
  br label %cond.end988, !dbg !7133

cond.end988:                                      ; preds = %cond.false982, %cond.true980
  %cond989 = phi i32 [ %call981, %cond.true980 ], [ %bf.clear987, %cond.false982 ], !dbg !7133
  %cmp990 = icmp eq i32 %cond973, %cond989, !dbg !7133
  br i1 %cmp990, label %land.lhs.true992, label %if.end1010, !dbg !7133

land.lhs.true992:                                 ; preds = %cond.end988
  %type993 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7133
  %precision994 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type993, i64 0, i32 6, !dbg !7133
  %bf.load995 = load i32, i32* %precision994, align 4, !dbg !7133
  %137 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 3) to %struct.tree_type**), align 8, !dbg !7133
  %precision998 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %137, i64 0, i32 6, !dbg !7133
  %bf.load999 = load i32, i32* %precision998, align 4, !dbg !7133
  %138 = xor i32 %bf.load995, %bf.load999, !dbg !7133
  %139 = and i32 %138, 1023, !dbg !7133
  %cmp1001 = icmp eq i32 %139, 0, !dbg !7133
  br i1 %cmp1001, label %if.then1003, label %if.end1010, !dbg !7135

if.then1003:                                      ; preds = %land.lhs.true992
  %140 = bitcast %struct.tree_type* %137 to %union.tree_node*, !dbg !7135
  %tobool1005 = icmp eq i8 %unsignedp, 0, !dbg !7136
  %141 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 8), align 16, !dbg !7136
  %cond1009 = select i1 %tobool1005, %union.tree_node* %140, %union.tree_node* %141, !dbg !7136
  br label %cleanup, !dbg !7136

if.end1010:                                       ; preds = %land.lhs.true992, %cond.end988
  %bf.load1012 = load i64, i64* %92, align 8, !dbg !7137
  %bf.cast101471 = and i64 %bf.load1012, 65535, !dbg !7137
  %cmp1015 = icmp eq i64 %bf.cast101471, 14, !dbg !7137
  br i1 %cmp1015, label %cond.true1017, label %cond.false1019, !dbg !7137

cond.true1017:                                    ; preds = %if.end1010
  %call1018 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7137
  br label %cond.end1025, !dbg !7137

cond.false1019:                                   ; preds = %if.end1010
  %type1020 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7137
  %mode1021 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1020, i64 0, i32 6, !dbg !7137
  %bf.load1022 = load i32, i32* %mode1021, align 4, !dbg !7137
  %bf.lshr1023 = lshr i32 %bf.load1022, 16, !dbg !7137
  %bf.clear1024 = and i32 %bf.lshr1023, 255, !dbg !7137
  br label %cond.end1025, !dbg !7137

cond.end1025:                                     ; preds = %cond.false1019, %cond.true1017
  %cond1026 = phi i32 [ %call1018, %cond.true1017 ], [ %bf.clear1024, %cond.false1019 ], !dbg !7137
  %142 = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2) to i64**), align 16, !dbg !7137
  %bf.load1028 = load i64, i64* %142, align 8, !dbg !7137
  %bf.cast103072 = and i64 %bf.load1028, 65535, !dbg !7137
  %cmp1031 = icmp eq i64 %bf.cast103072, 14, !dbg !7137
  br i1 %cmp1031, label %cond.true1033, label %cond.false1035, !dbg !7137

cond.true1033:                                    ; preds = %cond.end1025
  %.cast73 = bitcast i64* %142 to %union.tree_node*, !dbg !7137
  %call1034 = tail call i32 @vector_type_mode(%union.tree_node* %.cast73) #7, !dbg !7137
  br label %cond.end1041, !dbg !7137

cond.false1035:                                   ; preds = %cond.end1025
  %type1036 = bitcast i64* %142 to %struct.tree_type*, !dbg !7137
  %mode1037 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1036, i64 0, i32 6, !dbg !7137
  %bf.load1038 = load i32, i32* %mode1037, align 4, !dbg !7137
  %bf.lshr1039 = lshr i32 %bf.load1038, 16, !dbg !7137
  %bf.clear1040 = and i32 %bf.lshr1039, 255, !dbg !7137
  br label %cond.end1041, !dbg !7137

cond.end1041:                                     ; preds = %cond.false1035, %cond.true1033
  %cond1042 = phi i32 [ %call1034, %cond.true1033 ], [ %bf.clear1040, %cond.false1035 ], !dbg !7137
  %cmp1043 = icmp eq i32 %cond1026, %cond1042, !dbg !7137
  br i1 %cmp1043, label %land.lhs.true1045, label %if.end1063, !dbg !7137

land.lhs.true1045:                                ; preds = %cond.end1041
  %type1046 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7137
  %precision1047 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1046, i64 0, i32 6, !dbg !7137
  %bf.load1048 = load i32, i32* %precision1047, align 4, !dbg !7137
  %143 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 2) to %struct.tree_type**), align 16, !dbg !7137
  %precision1051 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %143, i64 0, i32 6, !dbg !7137
  %bf.load1052 = load i32, i32* %precision1051, align 4, !dbg !7137
  %144 = xor i32 %bf.load1048, %bf.load1052, !dbg !7137
  %145 = and i32 %144, 1023, !dbg !7137
  %cmp1054 = icmp eq i32 %145, 0, !dbg !7137
  br i1 %cmp1054, label %if.then1056, label %if.end1063, !dbg !7139

if.then1056:                                      ; preds = %land.lhs.true1045
  %146 = bitcast %struct.tree_type* %143 to %union.tree_node*, !dbg !7139
  %tobool1058 = icmp eq i8 %unsignedp, 0, !dbg !7140
  %147 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 7), align 8, !dbg !7140
  %cond1062 = select i1 %tobool1058, %union.tree_node* %146, %union.tree_node* %147, !dbg !7140
  br label %cleanup, !dbg !7140

if.end1063:                                       ; preds = %land.lhs.true1045, %cond.end1041
  %bf.load1065 = load i64, i64* %92, align 8, !dbg !7141
  %bf.cast106774 = and i64 %bf.load1065, 65535, !dbg !7141
  %cmp1068 = icmp eq i64 %bf.cast106774, 14, !dbg !7141
  br i1 %cmp1068, label %cond.true1070, label %cond.false1072, !dbg !7141

cond.true1070:                                    ; preds = %if.end1063
  %call1071 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !7141
  br label %cond.end1078, !dbg !7141

cond.false1072:                                   ; preds = %if.end1063
  %type1073 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7141
  %mode1074 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1073, i64 0, i32 6, !dbg !7141
  %bf.load1075 = load i32, i32* %mode1074, align 4, !dbg !7141
  %bf.lshr1076 = lshr i32 %bf.load1075, 16, !dbg !7141
  %bf.clear1077 = and i32 %bf.lshr1076, 255, !dbg !7141
  br label %cond.end1078, !dbg !7141

cond.end1078:                                     ; preds = %cond.false1072, %cond.true1070
  %cond1079 = phi i32 [ %call1071, %cond.true1070 ], [ %bf.clear1077, %cond.false1072 ], !dbg !7141
  %148 = load i64*, i64** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1) to i64**), align 8, !dbg !7141
  %bf.load1081 = load i64, i64* %148, align 8, !dbg !7141
  %bf.cast108375 = and i64 %bf.load1081, 65535, !dbg !7141
  %cmp1084 = icmp eq i64 %bf.cast108375, 14, !dbg !7141
  br i1 %cmp1084, label %cond.true1086, label %cond.false1088, !dbg !7141

cond.true1086:                                    ; preds = %cond.end1078
  %.cast76 = bitcast i64* %148 to %union.tree_node*, !dbg !7141
  %call1087 = tail call i32 @vector_type_mode(%union.tree_node* %.cast76) #7, !dbg !7141
  br label %cond.end1094, !dbg !7141

cond.false1088:                                   ; preds = %cond.end1078
  %type1089 = bitcast i64* %148 to %struct.tree_type*, !dbg !7141
  %mode1090 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1089, i64 0, i32 6, !dbg !7141
  %bf.load1091 = load i32, i32* %mode1090, align 4, !dbg !7141
  %bf.lshr1092 = lshr i32 %bf.load1091, 16, !dbg !7141
  %bf.clear1093 = and i32 %bf.lshr1092, 255, !dbg !7141
  br label %cond.end1094, !dbg !7141

cond.end1094:                                     ; preds = %cond.false1088, %cond.true1086
  %cond1095 = phi i32 [ %call1087, %cond.true1086 ], [ %bf.clear1093, %cond.false1088 ], !dbg !7141
  %cmp1096 = icmp eq i32 %cond1079, %cond1095, !dbg !7141
  br i1 %cmp1096, label %land.lhs.true1098, label %cond.end1094.if.end1116_crit_edge, !dbg !7141

cond.end1094.if.end1116_crit_edge:                ; preds = %cond.end1094
  %type1117.phi.trans.insert = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !6956
  %precision1118.phi.trans.insert = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1117.phi.trans.insert, i64 0, i32 6, !dbg !6956
  %bf.load1119.pre = load i32, i32* %precision1118.phi.trans.insert, align 4, !dbg !7143
  br label %if.end1116, !dbg !7141

land.lhs.true1098:                                ; preds = %cond.end1094
  %type1099 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !7141
  %precision1100 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1099, i64 0, i32 6, !dbg !7141
  %bf.load1101 = load i32, i32* %precision1100, align 4, !dbg !7141
  %149 = load %struct.tree_type*, %struct.tree_type** bitcast (%union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 1) to %struct.tree_type**), align 8, !dbg !7141
  %precision1104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %149, i64 0, i32 6, !dbg !7141
  %bf.load1105 = load i32, i32* %precision1104, align 4, !dbg !7141
  %150 = xor i32 %bf.load1101, %bf.load1105, !dbg !7141
  %151 = and i32 %150, 1023, !dbg !7141
  %cmp1107 = icmp eq i32 %151, 0, !dbg !7141
  br i1 %cmp1107, label %if.then1109, label %if.end1116, !dbg !7144

if.then1109:                                      ; preds = %land.lhs.true1098
  %152 = bitcast %struct.tree_type* %149 to %union.tree_node*, !dbg !7144
  %tobool1111 = icmp eq i8 %unsignedp, 0, !dbg !7145
  %153 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 6), align 16, !dbg !7145
  %cond1115 = select i1 %tobool1111, %union.tree_node* %152, %union.tree_node* %153, !dbg !7145
  br label %cleanup, !dbg !7145

if.end1116:                                       ; preds = %cond.end1094.if.end1116_crit_edge, %land.lhs.true1098
  %bf.load1119 = phi i32 [ %bf.load1119.pre, %cond.end1094.if.end1116_crit_edge ], [ %bf.load1101, %land.lhs.true1098 ], !dbg !7143
  %bf.clear1120 = and i32 %bf.load1119, 1023, !dbg !7143
  %conv1121 = zext i32 %bf.clear1120 to i64, !dbg !7143
  %call1123 = tail call %union.tree_node* @build_nonstandard_integer_type(i64 %conv1121, i32 %conv586) #7, !dbg !7146
  br label %cleanup, !dbg !7147

cleanup:                                          ; preds = %if.then1109, %if.then1056, %if.then1003, %if.then950, %if.then897, %if.then844, %if.then791, %if.then738, %if.then685, %if.then632, %lor.lhs.false574, %lor.lhs.false581, %if.then557, %if.then544, %if.then531, %if.then518, %if.then505, %if.then492, %if.then479, %if.then466, %if.then453, %if.then440, %if.then427, %if.then414, %if.then401, %if.then388, %if.then375, %if.then362, %if.then349, %if.then336, %if.then323, %if.then310, %if.then297, %if.then284, %if.then271, %if.then258, %if.then245, %if.then232, %if.then219, %if.then206, %if.then193, %if.then180, %if.then167, %if.then154, %if.then141, %if.then128, %if.then115, %if.then102, %if.then89, %if.then76, %if.then63, %if.then50, %if.then37, %if.then24, %if.then11, %if.then, %if.end1116
  %retval.0 = phi %union.tree_node* [ %call1123, %if.end1116 ], [ %cond, %if.then ], [ %cond17, %if.then11 ], [ %cond30, %if.then24 ], [ %cond43, %if.then37 ], [ %cond56, %if.then50 ], [ %cond69, %if.then63 ], [ %cond82, %if.then76 ], [ %cond95, %if.then89 ], [ %cond108, %if.then102 ], [ %cond121, %if.then115 ], [ %cond134, %if.then128 ], [ %cond147, %if.then141 ], [ %cond160, %if.then154 ], [ %cond173, %if.then167 ], [ %cond186, %if.then180 ], [ %cond199, %if.then193 ], [ %cond212, %if.then206 ], [ %cond225, %if.then219 ], [ %cond238, %if.then232 ], [ %cond251, %if.then245 ], [ %cond264, %if.then258 ], [ %cond277, %if.then271 ], [ %cond290, %if.then284 ], [ %cond303, %if.then297 ], [ %cond316, %if.then310 ], [ %cond329, %if.then323 ], [ %cond342, %if.then336 ], [ %cond355, %if.then349 ], [ %cond368, %if.then362 ], [ %cond381, %if.then375 ], [ %cond394, %if.then388 ], [ %cond407, %if.then401 ], [ %cond420, %if.then414 ], [ %cond433, %if.then427 ], [ %cond446, %if.then440 ], [ %cond459, %if.then453 ], [ %cond472, %if.then466 ], [ %cond485, %if.then479 ], [ %cond498, %if.then492 ], [ %cond511, %if.then505 ], [ %cond524, %if.then518 ], [ %cond537, %if.then531 ], [ %cond550, %if.then544 ], [ %cond563, %if.then557 ], [ %type, %lor.lhs.false581 ], [ %type, %lor.lhs.false574 ], [ %cond638, %if.then632 ], [ %cond691, %if.then685 ], [ %cond744, %if.then738 ], [ %cond797, %if.then791 ], [ %cond850, %if.then844 ], [ %cond903, %if.then897 ], [ %cond956, %if.then950 ], [ %cond1009, %if.then1003 ], [ %cond1062, %if.then1056 ], [ %cond1115, %if.then1109 ], !dbg !6956
  ret %union.tree_node* %retval.0, !dbg !7148
}

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @gimple_signed_type(%union.tree_node* %type) local_unnamed_addr #5 !dbg !7149 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !7151, metadata !DIExpression()), !dbg !7152
  %call = tail call fastcc %union.tree_node* @gimple_signed_or_unsigned_type(i8 zeroext 0, %union.tree_node* %type) #8, !dbg !7153
  ret %union.tree_node* %call, !dbg !7154
}

; Function Attrs: nounwind uwtable
define dso_local i32 @gimple_get_alias_set(%union.tree_node* %t) local_unnamed_addr #5 !dbg !7155 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !7159, metadata !DIExpression()), !dbg !7164
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !7160, metadata !DIExpression()), !dbg !7164
  br label %for.cond, !dbg !7165

for.cond:                                         ; preds = %for.inc, %entry
  %u.0 = phi %union.tree_node* [ %t, %entry ], [ %6, %for.inc ], !dbg !7167
  call void @llvm.dbg.value(metadata %union.tree_node* %u.0, metadata !7160, metadata !DIExpression()), !dbg !7164
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %u.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7168
  %bf.load = load i64, i64* %0, align 8, !dbg !7168
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !7170
  %cmp = icmp eq i64 %bf.cast2, 41, !dbg !7170
  br i1 %cmp, label %for.body, label %lor.rhs, !dbg !7171

lor.rhs:                                          ; preds = %for.cond
  %cmp5 = icmp eq i64 %bf.cast2, 45, !dbg !7172
  br i1 %cmp5, label %for.body, label %for.end, !dbg !7173

for.body:                                         ; preds = %for.cond, %lor.rhs
  br i1 %cmp, label %land.lhs.true, label %for.body.for.inc_crit_edge, !dbg !7174

for.body.for.inc_crit_edge:                       ; preds = %for.body
  %operands17.phi.trans.insert = getelementptr inbounds %union.tree_node, %union.tree_node* %u.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7176
  %.pre = load %union.tree_node*, %union.tree_node** %operands17.phi.trans.insert, align 8, !dbg !7177
  br label %for.inc, !dbg !7174

land.lhs.true:                                    ; preds = %for.body
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %u.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7178
  %1 = bitcast %union.tree_node** %operands to %struct.tree_common**, !dbg !7178
  %2 = load %struct.tree_common*, %struct.tree_common** %1, align 8, !dbg !7178
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2, i64 0, i32 2, !dbg !7178
  %3 = bitcast %union.tree_node** %type to i64**, !dbg !7178
  %4 = load i64*, i64** %3, align 8, !dbg !7178
  %bf.load12 = load i64, i64* %4, align 8, !dbg !7178
  %bf.cast149 = and i64 %bf.load12, 65535, !dbg !7179
  %cmp15 = icmp eq i64 %bf.cast149, 17, !dbg !7179
  %5 = bitcast %struct.tree_common* %2 to %union.tree_node*, !dbg !7180
  br i1 %cmp15, label %cleanup66.loopexit, label %for.inc, !dbg !7180

for.inc:                                          ; preds = %for.body.for.inc_crit_edge, %land.lhs.true
  %6 = phi %union.tree_node* [ %.pre, %for.body.for.inc_crit_edge ], [ %5, %land.lhs.true ], !dbg !7177
  call void @llvm.dbg.value(metadata %union.tree_node* %6, metadata !7160, metadata !DIExpression()), !dbg !7164
  br label %for.cond, !dbg !7181, !llvm.loop !7182

for.end:                                          ; preds = %lor.rhs
  %7 = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7184
  %bf.load20 = load i64, i64* %7, align 8, !dbg !7184
  %bf.cast22 = and i64 %bf.load20, 65535, !dbg !7184
  %arrayidx23 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast22, !dbg !7184
  %8 = load i32, i32* %arrayidx23, align 4, !dbg !7184
  %cmp24 = icmp eq i32 %8, 2, !dbg !7184
  br i1 %cmp24, label %if.end26, label %cleanup66, !dbg !7186

if.end26:                                         ; preds = %for.end
  %9 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 0), align 16, !dbg !7187
  %cmp27 = icmp eq %union.tree_node* %9, %t, !dbg !7189
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 1), align 8, !dbg !7190
  %cmp28 = icmp eq %union.tree_node* %10, %t, !dbg !7191
  %or.cond = or i1 %cmp27, %cmp28, !dbg !7192
  %11 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 2), align 16, !dbg !7193
  %cmp30 = icmp eq %union.tree_node* %11, %t, !dbg !7194
  %or.cond1 = or i1 %or.cond, %cmp30, !dbg !7192
  br i1 %or.cond1, label %cleanup66, label %if.end32, !dbg !7192

if.end32:                                         ; preds = %if.end26
  %cmp37 = icmp eq i64 %bf.cast22, 8, !dbg !7195
  br i1 %cmp37, label %land.lhs.true38, label %if.else, !dbg !7196

land.lhs.true38:                                  ; preds = %if.end32
  %bf.cast427 = and i64 %bf.load20, 2097152, !dbg !7197
  %tobool = icmp eq i64 %bf.cast427, 0, !dbg !7197
  br i1 %tobool, label %if.else, label %if.then43, !dbg !7198

if.then43:                                        ; preds = %land.lhs.true38
  %call = tail call %union.tree_node* @gimple_signed_type(%union.tree_node* %t) #8, !dbg !7199
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !7161, metadata !DIExpression()), !dbg !7200
  %cmp44 = icmp eq %union.tree_node* %call, %t, !dbg !7201
  br i1 %cmp44, label %cleanup, label %if.then45, !dbg !7203

if.then45:                                        ; preds = %if.then43
  %call46 = tail call i32 @get_alias_set(%union.tree_node* %call) #7, !dbg !7204
  br label %cleanup, !dbg !7205

cleanup:                                          ; preds = %if.then43, %if.then45
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then45 ], [ true, %if.then43 ]
  %retval.0 = phi i32 [ %call46, %if.then45 ], [ undef, %if.then43 ]
  br i1 %cleanup.dest.slot.0, label %if.end65, label %cleanup66

if.else:                                          ; preds = %land.lhs.true38, %if.end32
  %cmp52 = icmp eq i64 %bf.cast22, 10, !dbg !7206
  br i1 %cmp52, label %if.then59, label %lor.lhs.false53, !dbg !7206

lor.lhs.false53:                                  ; preds = %if.else
  %cmp58 = icmp eq i64 %bf.cast22, 12, !dbg !7206
  br i1 %cmp58, label %if.then59, label %if.end65, !dbg !7208

if.then59:                                        ; preds = %lor.lhs.false53, %if.else
  %12 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 39), align 8, !dbg !7209
  %cmp60 = icmp eq %union.tree_node* %12, %t, !dbg !7212
  br i1 %cmp60, label %if.end65, label %if.then61, !dbg !7213

if.then61:                                        ; preds = %if.then59
  %call62 = tail call i32 @get_alias_set(%union.tree_node* %12) #7, !dbg !7214
  br label %cleanup66, !dbg !7215

if.end65:                                         ; preds = %if.then59, %lor.lhs.false53, %cleanup
  br label %cleanup66, !dbg !7216

cleanup66.loopexit:                               ; preds = %land.lhs.true
  br label %cleanup66, !dbg !7217

cleanup66:                                        ; preds = %cleanup66.loopexit, %if.end26, %for.end, %cleanup, %if.end65, %if.then61
  %retval.1 = phi i32 [ %retval.0, %cleanup ], [ -1, %if.end65 ], [ %call62, %if.then61 ], [ -1, %for.end ], [ 0, %if.end26 ], [ 0, %cleanup66.loopexit ], !dbg !7164
  ret i32 %retval.1, !dbg !7217
}

declare dso_local i32 @get_alias_set(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @count_uses_and_derefs(%union.tree_node* %ptr, %union.gimple_statement_d* %stmt, i32* %num_uses_p, i32* %num_loads_p, i32* %num_stores_p) local_unnamed_addr #5 !dbg !7218 {
entry:
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  %wi = alloca %struct.walk_stmt_info, align 8
  %count = alloca %struct.count_ptr_d, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %ptr, metadata !7223, metadata !DIExpression()), !dbg !7246
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7224, metadata !DIExpression()), !dbg !7246
  call void @llvm.dbg.value(metadata i32* %num_uses_p, metadata !7225, metadata !DIExpression()), !dbg !7246
  call void @llvm.dbg.value(metadata i32* %num_loads_p, metadata !7226, metadata !DIExpression()), !dbg !7246
  call void @llvm.dbg.value(metadata i32* %num_stores_p, metadata !7227, metadata !DIExpression()), !dbg !7246
  %0 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %i, i64 0, i32 0, !dbg !7247
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #6, !dbg !7247
  store i32 0, i32* %num_uses_p, align 4, !dbg !7248
  store i32 0, i32* %num_loads_p, align 4, !dbg !7249
  store i32 0, i32* %num_stores_p, align 4, !dbg !7250
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !7228, metadata !DIExpression(DW_OP_deref)), !dbg !7246
  %call = call fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* nonnull %i, %union.gimple_statement_d* %stmt, i32 1) #8, !dbg !7251
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !7241, metadata !DIExpression()), !dbg !7246
  br label %for.cond, !dbg !7251

for.cond:                                         ; preds = %for.inc, %entry
  %use.0 = phi %union.tree_node* [ %call, %entry ], [ %call2, %for.inc ], !dbg !7253
  call void @llvm.dbg.value(metadata %union.tree_node* %use.0, metadata !7241, metadata !DIExpression()), !dbg !7246
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !7228, metadata !DIExpression(DW_OP_deref)), !dbg !7246
  %call1 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %i) #8, !dbg !7254
  %tobool = icmp eq i8 %call1, 0, !dbg !7254
  br i1 %tobool, label %for.body, label %for.end, !dbg !7251

for.body:                                         ; preds = %for.cond
  %cmp = icmp eq %union.tree_node* %use.0, %ptr, !dbg !7256
  br i1 %cmp, label %if.then, label %for.inc, !dbg !7258

if.then:                                          ; preds = %for.body
  %1 = load i32, i32* %num_uses_p, align 4, !dbg !7259
  %inc = add i32 %1, 1, !dbg !7259
  store i32 %inc, i32* %num_uses_p, align 4, !dbg !7259
  br label %for.inc, !dbg !7260

for.inc:                                          ; preds = %for.body, %if.then
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !7228, metadata !DIExpression(DW_OP_deref)), !dbg !7246
  %call2 = call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* nonnull %i) #8, !dbg !7254
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !7241, metadata !DIExpression()), !dbg !7246
  br label %for.cond, !dbg !7254, !llvm.loop !7261

for.end:                                          ; preds = %for.cond
  %call3 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %stmt) #8, !dbg !7263
  %tobool4 = icmp eq i8 %call3, 0, !dbg !7263
  br i1 %tobool4, label %lor.lhs.false, label %if.then16, !dbg !7264

lor.lhs.false:                                    ; preds = %for.end
  %call5 = call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !7265
  %cmp6 = icmp eq i32 %call5, 9, !dbg !7266
  br i1 %cmp6, label %if.then16, label %lor.lhs.false8, !dbg !7267

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %call9 = call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !7268
  %cmp10 = icmp eq i32 %call9, 7, !dbg !7269
  br i1 %cmp10, label %if.then16, label %lor.lhs.false12, !dbg !7270

lor.lhs.false12:                                  ; preds = %lor.lhs.false8
  %call13 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %stmt) #8, !dbg !7271
  %tobool15 = icmp eq i8 %call13, 0, !dbg !7271
  br i1 %tobool15, label %lor.lhs.false12.if.end22_crit_edge, label %if.then16, !dbg !7272

lor.lhs.false12.if.end22_crit_edge:               ; preds = %lor.lhs.false12
  %.pre = load i32, i32* %num_loads_p, align 4, !dbg !7273
  br label %if.end22, !dbg !7272

if.then16:                                        ; preds = %lor.lhs.false12, %for.end, %lor.lhs.false8, %lor.lhs.false
  %2 = bitcast %struct.walk_stmt_info* %wi to i8*, !dbg !7274
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %2) #6, !dbg !7274
  %3 = bitcast %struct.count_ptr_d* %count to i8*, !dbg !7275
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %3) #6, !dbg !7275
  %ptr17 = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %count, i64 0, i32 0, !dbg !7276
  store %union.tree_node* %ptr, %union.tree_node** %ptr17, align 8, !dbg !7277
  %num_stores = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %count, i64 0, i32 1, !dbg !7278
  store i32 0, i32* %num_stores, align 8, !dbg !7279
  %num_loads = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %count, i64 0, i32 2, !dbg !7280
  store i32 0, i32* %num_loads, align 4, !dbg !7281
  %call18 = call i8* @memset(i8* nonnull %2, i32 0, i64 56) #7, !dbg !7282
  %info = getelementptr inbounds %struct.walk_stmt_info, %struct.walk_stmt_info* %wi, i64 0, i32 1, !dbg !7283
  %4 = bitcast i8** %info to %struct.count_ptr_d**, !dbg !7284
  store %struct.count_ptr_d* %count, %struct.count_ptr_d** %4, align 8, !dbg !7284
  call void @llvm.dbg.value(metadata %struct.walk_stmt_info* %wi, metadata !7242, metadata !DIExpression(DW_OP_deref)), !dbg !7285
  %call19 = call %union.tree_node* @walk_gimple_op(%union.gimple_statement_d* %stmt, %union.tree_node* (%union.tree_node**, i32*, i8*)* nonnull @count_ptr_derefs, %struct.walk_stmt_info* nonnull %wi) #8, !dbg !7286
  %5 = load i32, i32* %num_stores, align 8, !dbg !7287
  store i32 %5, i32* %num_stores_p, align 4, !dbg !7288
  %6 = load i32, i32* %num_loads, align 4, !dbg !7289
  store i32 %6, i32* %num_loads_p, align 4, !dbg !7290
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %3) #6, !dbg !7291
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %2) #6, !dbg !7291
  br label %if.end22, !dbg !7292

if.end22:                                         ; preds = %lor.lhs.false12.if.end22_crit_edge, %if.then16
  %7 = phi i32 [ %.pre, %lor.lhs.false12.if.end22_crit_edge ], [ %6, %if.then16 ], !dbg !7273
  %8 = load i32, i32* %num_uses_p, align 4, !dbg !7273
  %9 = load i32, i32* %num_stores_p, align 4, !dbg !7273
  %add = add i32 %7, %9, !dbg !7273
  %cmp23 = icmp ult i32 %8, %add, !dbg !7273
  br i1 %cmp23, label %cond.true, label %cond.end, !dbg !7273

cond.true:                                        ; preds = %if.end22
  call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 4318, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !7273
  br label %cond.end, !dbg !7273

cond.end:                                         ; preds = %if.end22, %cond.true
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #6, !dbg !7293
  ret void, !dbg !7293
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @op_iter_init_tree(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !7294 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !7300, metadata !DIExpression()), !dbg !7303
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7301, metadata !DIExpression()), !dbg !7303
  call void @llvm.dbg.value(metadata i32 1, metadata !7302, metadata !DIExpression()), !dbg !7303
  tail call fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 1) #8, !dbg !7304
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !7305
  store i32 1, i32* %iter_type, align 4, !dbg !7306
  %call = tail call fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) #8, !dbg !7307
  ret %union.tree_node* %call, !dbg !7308
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !7309 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !7315, metadata !DIExpression()), !dbg !7316
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !7317
  %0 = load i8, i8* %done, align 8, !dbg !7317
  ret i8 %0, !dbg !7318
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @op_iter_next_tree(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !7319 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !7323, metadata !DIExpression()), !dbg !7325
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !7326
  %0 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !7326
  %tobool = icmp eq %struct.use_optype_d* %0, null, !dbg !7328
  br i1 %tobool, label %if.end, label %if.then, !dbg !7329

if.then:                                          ; preds = %entry
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %0, i64 0, i32 1, !dbg !7330
  %call = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* nonnull %use_ptr) #8, !dbg !7330
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !7324, metadata !DIExpression()), !dbg !7325
  %1 = bitcast %struct.use_optype_d** %uses to i64**, !dbg !7332
  %2 = load i64*, i64** %1, align 8, !dbg !7332
  %3 = load i64, i64* %2, align 8, !dbg !7333
  %4 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !7334
  store i64 %3, i64* %4, align 8, !dbg !7334
  br label %cleanup, !dbg !7335

if.end:                                           ; preds = %entry
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !7336
  %5 = load %struct.def_optype_d*, %struct.def_optype_d** %defs, align 8, !dbg !7336
  %tobool4 = icmp eq %struct.def_optype_d* %5, null, !dbg !7338
  br i1 %tobool4, label %if.end11, label %if.then5, !dbg !7339

if.then5:                                         ; preds = %if.end
  %def_ptr = getelementptr inbounds %struct.def_optype_d, %struct.def_optype_d* %5, i64 0, i32 1, !dbg !7340
  %6 = load %union.tree_node**, %union.tree_node*** %def_ptr, align 8, !dbg !7340
  %call7 = tail call fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %6) #8, !dbg !7340
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !7324, metadata !DIExpression()), !dbg !7325
  %7 = bitcast %struct.def_optype_d** %defs to i64**, !dbg !7342
  %8 = load i64*, i64** %7, align 8, !dbg !7342
  %9 = load i64, i64* %8, align 8, !dbg !7343
  %10 = bitcast %struct.def_optype_d** %defs to i64*, !dbg !7344
  store i64 %9, i64* %10, align 8, !dbg !7344
  br label %cleanup, !dbg !7345

if.end11:                                         ; preds = %if.end
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !7346
  store i8 1, i8* %done, align 8, !dbg !7347
  br label %cleanup, !dbg !7348

cleanup:                                          ; preds = %if.end11, %if.then5, %if.then
  %retval.0 = phi %union.tree_node* [ %call, %if.then ], [ %call7, %if.then5 ], [ null, %if.end11 ], !dbg !7325
  ret %union.tree_node* %retval.0, !dbg !7349
}

; Function Attrs: nounwind uwtable
define internal %union.tree_node* @count_ptr_derefs(%union.tree_node** %tp, i32* %walk_subtrees, i8* %data) #5 !dbg !7350 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %tp, metadata !7352, metadata !DIExpression()), !dbg !7357
  call void @llvm.dbg.value(metadata i32* %walk_subtrees, metadata !7353, metadata !DIExpression()), !dbg !7357
  call void @llvm.dbg.value(metadata i8* %data, metadata !7354, metadata !DIExpression()), !dbg !7357
  call void @llvm.dbg.value(metadata i8* %data, metadata !7355, metadata !DIExpression()), !dbg !7357
  %info = getelementptr inbounds i8, i8* %data, i64 24, !dbg !7358
  %0 = bitcast i8* %info to %struct.count_ptr_d**, !dbg !7358
  %1 = load %struct.count_ptr_d*, %struct.count_ptr_d** %0, align 8, !dbg !7358
  call void @llvm.dbg.value(metadata %struct.count_ptr_d* %1, metadata !7356, metadata !DIExpression()), !dbg !7357
  %2 = bitcast %union.tree_node** %tp to i64**, !dbg !7359
  %3 = load i64*, i64** %2, align 8, !dbg !7359
  %bf.load = load i64, i64* %3, align 8, !dbg !7359
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !7361
  %cmp = icmp eq i64 %bf.cast1, 121, !dbg !7361
  br i1 %cmp, label %if.then, label %if.end, !dbg !7362

if.then:                                          ; preds = %entry
  store i32 0, i32* %walk_subtrees, align 4, !dbg !7363
  br label %cleanup, !dbg !7365

if.end:                                           ; preds = %entry
  %cmp5 = icmp eq i64 %bf.cast1, 47, !dbg !7366
  br i1 %cmp5, label %land.lhs.true, label %lor.lhs.false, !dbg !7366

lor.lhs.false:                                    ; preds = %if.end
  %cmp10 = icmp eq i64 %bf.cast1, 48, !dbg !7366
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false11, !dbg !7366

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %cmp16 = icmp eq i64 %bf.cast1, 49, !dbg !7366
  br i1 %cmp16, label %land.lhs.true, label %cleanup, !dbg !7368

land.lhs.true:                                    ; preds = %lor.lhs.false11, %lor.lhs.false, %if.end
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 5, !dbg !7369
  %4 = bitcast i64* %arrayidx to %union.tree_node**, !dbg !7369
  %5 = load %union.tree_node*, %union.tree_node** %4, align 8, !dbg !7369
  %ptr = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %1, i64 0, i32 0, !dbg !7370
  %6 = load %union.tree_node*, %union.tree_node** %ptr, align 8, !dbg !7370
  %cmp17 = icmp eq %union.tree_node* %5, %6, !dbg !7371
  br i1 %cmp17, label %if.then18, label %cleanup, !dbg !7372

if.then18:                                        ; preds = %land.lhs.true
  %7 = getelementptr inbounds i8, i8* %data, i64 41, !dbg !7373
  %8 = load i8, i8* %7, align 1, !dbg !7373
  %tobool = icmp eq i8 %8, 0, !dbg !7376
  br i1 %tobool, label %if.else, label %if.then19, !dbg !7377

if.then19:                                        ; preds = %if.then18
  %num_stores = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %1, i64 0, i32 1, !dbg !7378
  %9 = load i32, i32* %num_stores, align 8, !dbg !7379
  %inc = add i32 %9, 1, !dbg !7379
  store i32 %inc, i32* %num_stores, align 8, !dbg !7379
  br label %cleanup, !dbg !7380

if.else:                                          ; preds = %if.then18
  %num_loads = getelementptr inbounds %struct.count_ptr_d, %struct.count_ptr_d* %1, i64 0, i32 2, !dbg !7381
  %10 = load i32, i32* %num_loads, align 4, !dbg !7382
  %inc20 = add i32 %10, 1, !dbg !7382
  store i32 %inc20, i32* %num_loads, align 4, !dbg !7382
  br label %cleanup

cleanup:                                          ; preds = %lor.lhs.false11, %land.lhs.true, %if.else, %if.then19, %if.then
  ret %union.tree_node* null, !dbg !7383
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d* %stmt, i8* %data, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_addr) local_unnamed_addr #5 !dbg !7384 {
entry:
  %constraint = alloca i8*, align 8
  %allows_mem = alloca i8, align 1
  %allows_reg = alloca i8, align 1
  %is_inout = alloca i8, align 1
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7391, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8* %data, metadata !7392, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, metadata !7393, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, metadata !7394, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_addr, metadata !7395, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 0, metadata !7396, metadata !DIExpression()), !dbg !7442
  %call = tail call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %stmt) #8, !dbg !7443
  %tobool = icmp eq i8 %call, 0, !dbg !7443
  br i1 %tobool, label %if.else140, label %if.then, !dbg !7444

if.then:                                          ; preds = %entry
  %tobool1 = icmp eq i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, null, !dbg !7445
  br i1 %tobool1, label %if.end10, label %if.then2, !dbg !7447

if.then2:                                         ; preds = %if.then
  %call3 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !7448
  %call4 = tail call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %call3) #8, !dbg !7450
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !7398, metadata !DIExpression()), !dbg !7451
  %tobool5 = icmp eq %union.tree_node* %call4, null, !dbg !7452
  br i1 %tobool5, label %if.end10, label %if.then6, !dbg !7454

if.then6:                                         ; preds = %if.then2
  %call7 = tail call zeroext i8 %visit_store(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call4, i8* %data) #7, !dbg !7455
  call void @llvm.dbg.value(metadata i8 %call7, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end10, !dbg !7456

if.end10:                                         ; preds = %if.then2, %if.then, %if.then6
  %ret.1 = phi i8 [ 0, %if.then ], [ %call7, %if.then6 ], [ 0, %if.then2 ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.1, metadata !7396, metadata !DIExpression()), !dbg !7442
  %call11 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #8, !dbg !7457
  call void @llvm.dbg.value(metadata %union.tree_node* %call11, metadata !7401, metadata !DIExpression()), !dbg !7451
  br label %while.cond, !dbg !7458

while.cond:                                       ; preds = %while.body, %if.end10
  %rhs.0 = phi %union.tree_node* [ %call11, %if.end10 ], [ %0, %while.body ], !dbg !7451
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs.0, metadata !7401, metadata !DIExpression()), !dbg !7451
  %call12 = tail call fastcc zeroext i8 @handled_component_p(%union.tree_node* %rhs.0) #8, !dbg !7459
  %tobool13 = icmp eq i8 %call12, 0, !dbg !7458
  br i1 %tobool13, label %while.end, label %while.body, !dbg !7458

while.body:                                       ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %rhs.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7460
  %0 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !7460
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !7401, metadata !DIExpression()), !dbg !7451
  br label %while.cond, !dbg !7458, !llvm.loop !7461

while.end:                                        ; preds = %while.cond
  %rhs.0.lcssa = phi %union.tree_node* [ %rhs.0, %while.cond ], !dbg !7451
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs.0.lcssa, metadata !7401, metadata !DIExpression()), !dbg !7451
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs.0.lcssa, metadata !7401, metadata !DIExpression()), !dbg !7451
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs.0.lcssa, metadata !7401, metadata !DIExpression()), !dbg !7451
  %tobool14 = icmp eq i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_addr, null, !dbg !7462
  br i1 %tobool14, label %if.end127, label %if.then15, !dbg !7464

if.then15:                                        ; preds = %while.end
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %rhs.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7465
  %bf.load = load i64, i64* %1, align 8, !dbg !7465
  %bf.cast25 = and i64 %bf.load, 65535, !dbg !7468
  %cmp = icmp eq i64 %bf.cast25, 121, !dbg !7468
  br i1 %cmp, label %if.then17, label %if.else, !dbg !7469

if.then17:                                        ; preds = %if.then15
  %operands19 = getelementptr inbounds %union.tree_node, %union.tree_node* %rhs.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7470
  %2 = load %union.tree_node*, %union.tree_node** %operands19, align 8, !dbg !7470
  %call21 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %2, i8* %data) #7, !dbg !7471
  %or2435 = or i8 %ret.1, %call21, !dbg !7472
  call void @llvm.dbg.value(metadata i8 %or2435, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end90, !dbg !7473

if.else:                                          ; preds = %if.then15
  %cmp30 = icmp eq i64 %bf.cast25, 152, !dbg !7474
  br i1 %cmp30, label %land.lhs.true, label %if.else59, !dbg !7476

land.lhs.true:                                    ; preds = %if.else
  %operands33 = getelementptr inbounds %union.tree_node, %union.tree_node* %rhs.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7477
  %arrayidx34 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands33, i64 1, !dbg !7477
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx34, align 8, !dbg !7477
  %cmp35 = icmp eq %union.tree_node* %3, null, !dbg !7478
  br i1 %cmp35, label %if.else59, label %land.lhs.true37, !dbg !7479

land.lhs.true37:                                  ; preds = %land.lhs.true
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7479
  %bf.load42 = load i64, i64* %4, align 8, !dbg !7480
  %bf.cast4433 = and i64 %bf.load42, 65535, !dbg !7481
  %cmp45 = icmp eq i64 %bf.cast4433, 121, !dbg !7481
  br i1 %cmp45, label %if.then47, label %if.else59, !dbg !7482

if.then47:                                        ; preds = %land.lhs.true37
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7483
  %6 = load %union.tree_node*, %union.tree_node** %5, align 8, !dbg !7483
  %call54 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %6, i8* %data) #7, !dbg !7484
  %or5734 = or i8 %ret.1, %call54, !dbg !7485
  call void @llvm.dbg.value(metadata i8 %or5734, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end90, !dbg !7486

if.else59:                                        ; preds = %land.lhs.true, %land.lhs.true37, %if.else
  %cmp64 = icmp eq i64 %bf.cast25, 50, !dbg !7487
  br i1 %cmp64, label %land.lhs.true66, label %if.end90, !dbg !7489

land.lhs.true66:                                  ; preds = %if.else59
  %operands68 = getelementptr inbounds %union.tree_node, %union.tree_node* %rhs.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7490
  %arrayidx69 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands68, i64 1, !dbg !7490
  %7 = bitcast %union.tree_node** %arrayidx69 to i64**, !dbg !7490
  %8 = load i64*, i64** %7, align 8, !dbg !7490
  %bf.load71 = load i64, i64* %8, align 8, !dbg !7490
  %bf.cast7331 = and i64 %bf.load71, 65535, !dbg !7491
  %cmp74 = icmp eq i64 %bf.cast7331, 121, !dbg !7491
  br i1 %cmp74, label %if.then76, label %if.end90, !dbg !7492

if.then76:                                        ; preds = %land.lhs.true66
  %arrayidx82 = getelementptr inbounds i64, i64* %8, i64 5, !dbg !7493
  %9 = bitcast i64* %arrayidx82 to %union.tree_node**, !dbg !7493
  %10 = load %union.tree_node*, %union.tree_node** %9, align 8, !dbg !7493
  %call83 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %10, i8* %data) #7, !dbg !7494
  %or8632 = or i8 %ret.1, %call83, !dbg !7495
  call void @llvm.dbg.value(metadata i8 %or8632, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end90, !dbg !7496

if.end90:                                         ; preds = %if.then47, %if.then76, %land.lhs.true66, %if.else59, %if.then17
  %ret.4 = phi i8 [ %or2435, %if.then17 ], [ %or5734, %if.then47 ], [ %or8632, %if.then76 ], [ %ret.1, %land.lhs.true66 ], [ %ret.1, %if.else59 ], !dbg !7497
  call void @llvm.dbg.value(metadata i8 %ret.4, metadata !7396, metadata !DIExpression()), !dbg !7442
  %call91 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !7498
  call void @llvm.dbg.value(metadata %union.tree_node* %call91, metadata !7398, metadata !DIExpression()), !dbg !7451
  %11 = getelementptr inbounds %union.tree_node, %union.tree_node* %call91, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7499
  %bf.load93 = load i64, i64* %11, align 8, !dbg !7499
  %bf.cast9528 = and i64 %bf.load93, 65535, !dbg !7501
  %cmp96 = icmp eq i64 %bf.cast9528, 152, !dbg !7501
  br i1 %cmp96, label %land.lhs.true98, label %if.end127, !dbg !7502

land.lhs.true98:                                  ; preds = %if.end90
  %operands100 = getelementptr inbounds %union.tree_node, %union.tree_node* %call91, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7503
  %arrayidx101 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands100, i64 1, !dbg !7503
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx101, align 8, !dbg !7503
  %cmp102 = icmp eq %union.tree_node* %12, null, !dbg !7504
  br i1 %cmp102, label %if.end127, label %land.lhs.true104, !dbg !7505

land.lhs.true104:                                 ; preds = %land.lhs.true98
  %13 = getelementptr inbounds %union.tree_node, %union.tree_node* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7505
  %bf.load109 = load i64, i64* %13, align 8, !dbg !7506
  %bf.cast11129 = and i64 %bf.load109, 65535, !dbg !7507
  %cmp112 = icmp eq i64 %bf.cast11129, 121, !dbg !7507
  br i1 %cmp112, label %if.then114, label %if.end127, !dbg !7508

if.then114:                                       ; preds = %land.lhs.true104
  %14 = getelementptr inbounds %union.tree_node, %union.tree_node* %12, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7509
  %15 = load %union.tree_node*, %union.tree_node** %14, align 8, !dbg !7509
  %call121 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %15, i8* %data) #7, !dbg !7510
  %or12430 = or i8 %ret.4, %call121, !dbg !7511
  call void @llvm.dbg.value(metadata i8 %or12430, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end127, !dbg !7512

if.end127:                                        ; preds = %land.lhs.true98, %while.end, %if.end90, %land.lhs.true104, %if.then114
  %ret.6 = phi i8 [ %ret.1, %while.end ], [ %or12430, %if.then114 ], [ %ret.4, %land.lhs.true104 ], [ %ret.4, %land.lhs.true98 ], [ %ret.4, %if.end90 ], !dbg !7451
  call void @llvm.dbg.value(metadata i8 %ret.6, metadata !7396, metadata !DIExpression()), !dbg !7442
  %tobool128 = icmp eq i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, null, !dbg !7513
  br i1 %tobool128, label %if.end497, label %if.then129, !dbg !7515

if.then129:                                       ; preds = %if.end127
  %call130 = tail call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %rhs.0.lcssa) #8, !dbg !7516
  call void @llvm.dbg.value(metadata %union.tree_node* %call130, metadata !7401, metadata !DIExpression()), !dbg !7451
  %tobool131 = icmp eq %union.tree_node* %call130, null, !dbg !7518
  br i1 %tobool131, label %if.end497, label %if.then132, !dbg !7520

if.then132:                                       ; preds = %if.then129
  %call133 = tail call zeroext i8 %visit_load(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call130, i8* %data) #7, !dbg !7521
  %or13624 = or i8 %ret.6, %call133, !dbg !7522
  call void @llvm.dbg.value(metadata i8 %or13624, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end497, !dbg !7523

if.else140:                                       ; preds = %entry
  %tobool141 = icmp eq i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_addr, null, !dbg !7524
  br i1 %tobool141, label %if.else174, label %land.lhs.true142, !dbg !7525

land.lhs.true142:                                 ; preds = %if.else140
  %call143 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %stmt) #8, !dbg !7526
  %tobool145 = icmp eq i8 %call143, 0, !dbg !7526
  br i1 %tobool145, label %lor.lhs.false, label %if.then149, !dbg !7527

lor.lhs.false:                                    ; preds = %land.lhs.true142
  %call146 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !7528
  %cmp147 = icmp eq i32 %call146, 1, !dbg !7529
  br i1 %cmp147, label %if.then149, label %if.else174, !dbg !7530

if.then149:                                       ; preds = %land.lhs.true142, %lor.lhs.false
  call void @llvm.dbg.value(metadata i32 0, metadata !7397, metadata !DIExpression()), !dbg !7442
  br label %for.cond, !dbg !7531

for.cond:                                         ; preds = %for.inc, %if.then149
  %i.0 = phi i32 [ 0, %if.then149 ], [ %inc, %for.inc ], !dbg !7534
  %ret.9 = phi i8 [ 0, %if.then149 ], [ %ret.10, %for.inc ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.9, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call150 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %stmt) #8, !dbg !7535
  %cmp151 = icmp ult i32 %i.0, %call150, !dbg !7537
  br i1 %cmp151, label %for.body, label %if.end497.loopexit36, !dbg !7538

for.body:                                         ; preds = %for.cond
  %call153 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %stmt, i32 %i.0) #8, !dbg !7539
  %tobool154 = icmp eq %union.tree_node* %call153, null, !dbg !7539
  br i1 %tobool154, label %for.inc, label %land.lhs.true155, !dbg !7541

land.lhs.true155:                                 ; preds = %for.body
  %call156 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %stmt, i32 %i.0) #8, !dbg !7542
  %16 = getelementptr inbounds %union.tree_node, %union.tree_node* %call156, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7542
  %bf.load158 = load i64, i64* %16, align 8, !dbg !7542
  %bf.cast16022 = and i64 %bf.load158, 65535, !dbg !7543
  %cmp161 = icmp eq i64 %bf.cast16022, 121, !dbg !7543
  br i1 %cmp161, label %if.then163, label %for.inc, !dbg !7544

if.then163:                                       ; preds = %land.lhs.true155
  %call164 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %stmt, i32 %i.0) #8, !dbg !7545
  %operands166 = getelementptr inbounds %union.tree_node, %union.tree_node* %call164, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7545
  %17 = load %union.tree_node*, %union.tree_node** %operands166, align 8, !dbg !7545
  %call168 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %17, i8* %data) #7, !dbg !7546
  %or17123 = or i8 %ret.9, %call168, !dbg !7547
  call void @llvm.dbg.value(metadata i8 %or17123, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %for.inc, !dbg !7548

for.inc:                                          ; preds = %for.body, %land.lhs.true155, %if.then163
  %ret.10 = phi i8 [ %or17123, %if.then163 ], [ %ret.9, %land.lhs.true155 ], [ %ret.9, %for.body ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.10, metadata !7396, metadata !DIExpression()), !dbg !7442
  %inc = add i32 %i.0, 1, !dbg !7549
  call void @llvm.dbg.value(metadata i32 %inc, metadata !7397, metadata !DIExpression()), !dbg !7442
  br label %for.cond, !dbg !7550, !llvm.loop !7551

if.else174:                                       ; preds = %if.else140, %lor.lhs.false
  %call175 = tail call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %stmt) #8, !dbg !7553
  %tobool176 = icmp eq i8 %call175, 0, !dbg !7553
  br i1 %tobool176, label %if.else288, label %if.then177, !dbg !7554

if.then177:                                       ; preds = %if.else174
  %tobool178 = icmp eq i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, null, !dbg !7555
  br i1 %tobool178, label %if.end194, label %if.then179, !dbg !7556

if.then179:                                       ; preds = %if.then177
  %call181 = tail call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !7557
  call void @llvm.dbg.value(metadata %union.tree_node* %call181, metadata !7402, metadata !DIExpression()), !dbg !7558
  %tobool182 = icmp eq %union.tree_node* %call181, null, !dbg !7559
  br i1 %tobool182, label %if.end194, label %if.then183, !dbg !7561

if.then183:                                       ; preds = %if.then179
  %call184 = tail call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* nonnull %call181) #8, !dbg !7562
  call void @llvm.dbg.value(metadata %union.tree_node* %call184, metadata !7402, metadata !DIExpression()), !dbg !7558
  %tobool185 = icmp eq %union.tree_node* %call184, null, !dbg !7564
  br i1 %tobool185, label %if.end194, label %if.then186, !dbg !7566

if.then186:                                       ; preds = %if.then183
  %call187 = tail call zeroext i8 %visit_store(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call184, i8* %data) #7, !dbg !7567
  call void @llvm.dbg.value(metadata i8 %call187, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end194, !dbg !7568

if.end194:                                        ; preds = %if.then183, %if.then179, %if.then177, %if.then186
  %ret.13 = phi i8 [ 0, %if.then177 ], [ 0, %if.then179 ], [ %call187, %if.then186 ], [ 0, %if.then183 ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.13, metadata !7396, metadata !DIExpression()), !dbg !7442
  %tobool195 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, null, !dbg !7569
  %tobool197 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_addr, null, !dbg !7570
  %or.cond = or i1 %tobool195, %tobool197, !dbg !7571
  br i1 %or.cond, label %for.cond199.preheader, label %if.end240, !dbg !7571

for.cond199.preheader:                            ; preds = %if.end194
  %tobool224 = icmp eq i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, null, !dbg !7572
  br i1 %tobool141, label %for.cond199.preheader.split.us, label %for.cond199.preheader.for.cond199.preheader.split_crit_edge, !dbg !7575

for.cond199.preheader.for.cond199.preheader.split_crit_edge: ; preds = %for.cond199.preheader
  br label %for.cond199, !dbg !7575

for.cond199.preheader.split.us:                   ; preds = %for.cond199.preheader
  br i1 %tobool224, label %for.cond199.preheader.split.us.split.us, label %for.cond199.preheader.split.us.for.cond199.preheader.split.us.split_crit_edge, !dbg !7575

for.cond199.preheader.split.us.for.cond199.preheader.split.us.split_crit_edge: ; preds = %for.cond199.preheader.split.us
  br label %for.cond199.us, !dbg !7575

for.cond199.preheader.split.us.split.us:          ; preds = %for.cond199.preheader.split.us
  br label %for.cond199.us.us, !dbg !7575

for.cond199.us.us:                                ; preds = %for.body203.us.us, %for.cond199.preheader.split.us.split.us
  %i.1.us.us = phi i32 [ %inc238.us.us, %for.body203.us.us ], [ 0, %for.cond199.preheader.split.us.split.us ], !dbg !7576
  call void @llvm.dbg.value(metadata i8 %ret.13, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i32 %i.1.us.us, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call200.us.us = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #8, !dbg !7577
  %cmp201.us.us = icmp ult i32 %i.1.us.us, %call200.us.us, !dbg !7578
  br i1 %cmp201.us.us, label %for.body203.us.us, label %if.end240.loopexit.us-lcssa.us.us-lcssa.us, !dbg !7575

for.body203.us.us:                                ; preds = %for.cond199.us.us
  %call205.us.us = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %stmt, i32 %i.1.us.us) #8, !dbg !7579
  call void @llvm.dbg.value(metadata %union.tree_node* %call205.us.us, metadata !7408, metadata !DIExpression()), !dbg !7580
  call void @llvm.dbg.value(metadata i8 %ret.13, metadata !7396, metadata !DIExpression()), !dbg !7442
  %inc238.us.us = add i32 %i.1.us.us, 1, !dbg !7581
  call void @llvm.dbg.value(metadata i32 %inc238.us.us, metadata !7397, metadata !DIExpression()), !dbg !7442
  br label %for.cond199.us.us, !dbg !7582, !llvm.loop !7583

if.end240.loopexit.us-lcssa.us.us-lcssa.us:       ; preds = %for.cond199.us.us
  br label %if.end240.loopexit.us-lcssa.us, !dbg !7585

for.cond199.us:                                   ; preds = %for.inc237.us, %for.cond199.preheader.split.us.for.cond199.preheader.split.us.split_crit_edge
  %i.1.us = phi i32 [ %inc238.us, %for.inc237.us ], [ 0, %for.cond199.preheader.split.us.for.cond199.preheader.split.us.split_crit_edge ], !dbg !7576
  %ret.14.us = phi i8 [ %ret.17.us, %for.inc237.us ], [ %ret.13, %for.cond199.preheader.split.us.for.cond199.preheader.split.us.split_crit_edge ], !dbg !7587
  call void @llvm.dbg.value(metadata i8 %ret.14.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i32 %i.1.us, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call200.us = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #8, !dbg !7577
  %cmp201.us = icmp ult i32 %i.1.us, %call200.us, !dbg !7578
  br i1 %cmp201.us, label %for.body203.us, label %if.end240.loopexit.us-lcssa.us.us-lcssa, !dbg !7575

for.body203.us:                                   ; preds = %for.cond199.us
  %call205.us = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %stmt, i32 %i.1.us) #8, !dbg !7579
  call void @llvm.dbg.value(metadata %union.tree_node* %call205.us, metadata !7408, metadata !DIExpression()), !dbg !7580
  %call226.us = tail call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %call205.us) #8, !dbg !7588
  call void @llvm.dbg.value(metadata %union.tree_node* %call226.us, metadata !7408, metadata !DIExpression()), !dbg !7580
  %tobool227.us = icmp eq %union.tree_node* %call226.us, null, !dbg !7590
  br i1 %tobool227.us, label %for.inc237.us, label %if.then228.us, !dbg !7592

if.then228.us:                                    ; preds = %for.body203.us
  %call229.us = tail call zeroext i8 %visit_load(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call226.us, i8* %data) #7, !dbg !7593
  %or23219.us = or i8 %ret.14.us, %call229.us, !dbg !7594
  call void @llvm.dbg.value(metadata i8 %or23219.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %for.inc237.us, !dbg !7595

for.inc237.us:                                    ; preds = %if.then228.us, %for.body203.us
  %ret.17.us = phi i8 [ %or23219.us, %if.then228.us ], [ %ret.14.us, %for.body203.us ], !dbg !7596
  call void @llvm.dbg.value(metadata i8 %ret.17.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  %inc238.us = add i32 %i.1.us, 1, !dbg !7581
  call void @llvm.dbg.value(metadata i32 %inc238.us, metadata !7397, metadata !DIExpression()), !dbg !7442
  br label %for.cond199.us, !dbg !7582, !llvm.loop !7583

if.end240.loopexit.us-lcssa.us.us-lcssa:          ; preds = %for.cond199.us
  %ret.14.us.lcssa = phi i8 [ %ret.14.us, %for.cond199.us ], !dbg !7587
  call void @llvm.dbg.value(metadata i8 %ret.14.us.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.14.us.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end240.loopexit.us-lcssa.us, !dbg !7585

if.end240.loopexit.us-lcssa.us:                   ; preds = %if.end240.loopexit.us-lcssa.us.us-lcssa.us, %if.end240.loopexit.us-lcssa.us.us-lcssa
  %ret.14.lcssa.ph.us = phi i8 [ %ret.14.us.lcssa, %if.end240.loopexit.us-lcssa.us.us-lcssa ], [ %ret.13, %if.end240.loopexit.us-lcssa.us.us-lcssa.us ]
  br label %if.end240.loopexit, !dbg !7585

for.cond199:                                      ; preds = %for.cond199.preheader.for.cond199.preheader.split_crit_edge, %for.inc237
  %i.1 = phi i32 [ %inc238, %for.inc237 ], [ 0, %for.cond199.preheader.for.cond199.preheader.split_crit_edge ], !dbg !7576
  %ret.14 = phi i8 [ %ret.17, %for.inc237 ], [ %ret.13, %for.cond199.preheader.for.cond199.preheader.split_crit_edge ], !dbg !7587
  call void @llvm.dbg.value(metadata i8 %ret.14, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call200 = tail call fastcc i32 @gimple_call_num_args(%union.gimple_statement_d* %stmt) #8, !dbg !7577
  %cmp201 = icmp ult i32 %i.1, %call200, !dbg !7578
  br i1 %cmp201, label %for.body203, label %if.end240.loopexit.us-lcssa, !dbg !7575

for.body203:                                      ; preds = %for.cond199
  %call205 = tail call fastcc %union.tree_node* @gimple_call_arg(%union.gimple_statement_d* %stmt, i32 %i.1) #8, !dbg !7579
  call void @llvm.dbg.value(metadata %union.tree_node* %call205, metadata !7408, metadata !DIExpression()), !dbg !7580
  %18 = getelementptr inbounds %union.tree_node, %union.tree_node* %call205, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7597
  %bf.load209 = load i64, i64* %18, align 8, !dbg !7597
  %bf.cast21120 = and i64 %bf.load209, 65535, !dbg !7598
  %cmp212 = icmp eq i64 %bf.cast21120, 121, !dbg !7598
  br i1 %cmp212, label %if.then214, label %if.else223, !dbg !7599

if.then214:                                       ; preds = %for.body203
  %operands216 = getelementptr inbounds %union.tree_node, %union.tree_node* %call205, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7600
  %19 = load %union.tree_node*, %union.tree_node** %operands216, align 8, !dbg !7600
  %call218 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %19, i8* %data) #7, !dbg !7601
  %or22121 = or i8 %ret.14, %call218, !dbg !7602
  call void @llvm.dbg.value(metadata i8 %or22121, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %for.inc237, !dbg !7603

if.else223:                                       ; preds = %for.body203
  br i1 %tobool224, label %for.inc237, label %if.then225, !dbg !7604

if.then225:                                       ; preds = %if.else223
  %call226 = tail call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %call205) #8, !dbg !7588
  call void @llvm.dbg.value(metadata %union.tree_node* %call226, metadata !7408, metadata !DIExpression()), !dbg !7580
  %tobool227 = icmp eq %union.tree_node* %call226, null, !dbg !7590
  br i1 %tobool227, label %for.inc237, label %if.then228, !dbg !7592

if.then228:                                       ; preds = %if.then225
  %call229 = tail call zeroext i8 %visit_load(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call226, i8* %data) #7, !dbg !7593
  %or23219 = or i8 %ret.14, %call229, !dbg !7594
  call void @llvm.dbg.value(metadata i8 %or23219, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %for.inc237, !dbg !7595

for.inc237:                                       ; preds = %if.then225, %if.else223, %if.then214, %if.then228
  %ret.17 = phi i8 [ %or22121, %if.then214 ], [ %ret.14, %if.else223 ], [ %or23219, %if.then228 ], [ %ret.14, %if.then225 ], !dbg !7596
  call void @llvm.dbg.value(metadata i8 %ret.17, metadata !7396, metadata !DIExpression()), !dbg !7442
  %inc238 = add i32 %i.1, 1, !dbg !7581
  call void @llvm.dbg.value(metadata i32 %inc238, metadata !7397, metadata !DIExpression()), !dbg !7442
  br label %for.cond199, !dbg !7582, !llvm.loop !7583

if.end240.loopexit.us-lcssa:                      ; preds = %for.cond199
  %ret.14.lcssa76 = phi i8 [ %ret.14, %for.cond199 ], !dbg !7587
  call void @llvm.dbg.value(metadata i8 %ret.14.lcssa76, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.14.lcssa76, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end240.loopexit, !dbg !7585

if.end240.loopexit:                               ; preds = %if.end240.loopexit.us-lcssa.us, %if.end240.loopexit.us-lcssa
  %ret.14.lcssa = phi i8 [ %ret.14.lcssa76, %if.end240.loopexit.us-lcssa ], [ %ret.14.lcssa.ph.us, %if.end240.loopexit.us-lcssa.us ], !dbg !7587
  call void @llvm.dbg.value(metadata i8 %ret.14.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end240, !dbg !7585

if.end240:                                        ; preds = %if.end240.loopexit, %if.end194
  %ret.18 = phi i8 [ %ret.13, %if.end194 ], [ %ret.14.lcssa, %if.end240.loopexit ], !dbg !7605
  call void @llvm.dbg.value(metadata i8 %ret.18, metadata !7396, metadata !DIExpression()), !dbg !7442
  br i1 %tobool141, label %if.end263, label %land.lhs.true242, !dbg !7606

land.lhs.true242:                                 ; preds = %if.end240
  %call243 = tail call fastcc %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %stmt) #8, !dbg !7607
  %tobool244 = icmp eq %union.tree_node* %call243, null, !dbg !7607
  br i1 %tobool244, label %if.end263, label %land.lhs.true245, !dbg !7608

land.lhs.true245:                                 ; preds = %land.lhs.true242
  %call246 = tail call fastcc %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %stmt) #8, !dbg !7609
  %20 = getelementptr inbounds %union.tree_node, %union.tree_node* %call246, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7609
  %bf.load248 = load i64, i64* %20, align 8, !dbg !7609
  %bf.cast25017 = and i64 %bf.load248, 65535, !dbg !7610
  %cmp251 = icmp eq i64 %bf.cast25017, 121, !dbg !7610
  br i1 %cmp251, label %if.then253, label %if.end263, !dbg !7611

if.then253:                                       ; preds = %land.lhs.true245
  %call254 = tail call fastcc %union.tree_node* @gimple_call_chain(%union.gimple_statement_d* %stmt) #8, !dbg !7612
  %operands256 = getelementptr inbounds %union.tree_node, %union.tree_node* %call254, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7612
  %21 = load %union.tree_node*, %union.tree_node** %operands256, align 8, !dbg !7612
  %call258 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %21, i8* %data) #7, !dbg !7613
  %or26118 = or i8 %ret.18, %call258, !dbg !7614
  call void @llvm.dbg.value(metadata i8 %or26118, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end263, !dbg !7615

if.end263:                                        ; preds = %land.lhs.true242, %if.end240, %if.then253, %land.lhs.true245
  %ret.19 = phi i8 [ %or26118, %if.then253 ], [ %ret.18, %land.lhs.true245 ], [ %ret.18, %land.lhs.true242 ], [ %ret.18, %if.end240 ], !dbg !7587
  call void @llvm.dbg.value(metadata i8 %ret.19, metadata !7396, metadata !DIExpression()), !dbg !7442
  br i1 %tobool141, label %if.end497, label %land.lhs.true265, !dbg !7616

land.lhs.true265:                                 ; preds = %if.end263
  %call266 = tail call fastcc zeroext i8 @gimple_call_return_slot_opt_p(%union.gimple_statement_d* %stmt) #8, !dbg !7618
  %tobool268 = icmp eq i8 %call266, 0, !dbg !7618
  br i1 %tobool268, label %if.end497, label %land.lhs.true269, !dbg !7619

land.lhs.true269:                                 ; preds = %land.lhs.true265
  %call270 = tail call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !7620
  %cmp271 = icmp eq %union.tree_node* %call270, null, !dbg !7621
  br i1 %cmp271, label %if.end497, label %land.lhs.true273, !dbg !7622

land.lhs.true273:                                 ; preds = %land.lhs.true269
  %call274 = tail call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !7623
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call274, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7623
  %22 = bitcast %union.tree_node** %type to i64**, !dbg !7623
  %23 = load i64*, i64** %22, align 8, !dbg !7623
  %bf.load276 = load i64, i64* %23, align 8, !dbg !7623
  %bf.cast27815 = and i64 %bf.load276, 262144, !dbg !7623
  %tobool279 = icmp eq i64 %bf.cast27815, 0, !dbg !7623
  br i1 %tobool279, label %if.end497, label %if.then280, !dbg !7624

if.then280:                                       ; preds = %land.lhs.true273
  %call281 = tail call fastcc %union.tree_node* @gimple_call_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !7625
  %call282 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %call281, i8* %data) #7, !dbg !7626
  %or28516 = or i8 %ret.19, %call282, !dbg !7627
  call void @llvm.dbg.value(metadata i8 %or28516, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end497, !dbg !7628

if.else288:                                       ; preds = %if.else174
  %call289 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !7629
  %cmp290 = icmp eq i32 %call289, 7, !dbg !7630
  br i1 %cmp290, label %if.then292, label %if.else417, !dbg !7631

if.then292:                                       ; preds = %if.else288
  %24 = bitcast i8** %constraint to i8*, !dbg !7632
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #6, !dbg !7632
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !7418, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %allows_mem) #6, !dbg !7634
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !7419, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %allows_reg) #6, !dbg !7634
  call void @llvm.dbg.value(metadata i8* %is_inout, metadata !7420, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %is_inout) #6, !dbg !7634
  %call293 = tail call fastcc i32 @gimple_asm_noutputs(%union.gimple_statement_d* %stmt) #8, !dbg !7635
  call void @llvm.dbg.value(metadata i32 %call293, metadata !7413, metadata !DIExpression()), !dbg !7633
  %conv294 = zext i32 %call293 to i64, !dbg !7636
  %25 = alloca i8*, i64 %conv294, align 16, !dbg !7636
  call void @llvm.dbg.value(metadata i8** %25, metadata !7417, metadata !DIExpression()), !dbg !7633
  %tobool295 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, null, !dbg !7637
  %tobool297 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_addr, null, !dbg !7638
  %or.cond1 = or i1 %tobool295, %tobool297, !dbg !7639
  br i1 %or.cond1, label %for.cond299.preheader, label %if.end340, !dbg !7639

for.cond299.preheader:                            ; preds = %if.then292
  %tobool308 = icmp eq i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, null, !dbg !7640
  br i1 %tobool308, label %for.cond299.preheader.for.cond299.preheader.split_crit_edge, label %for.cond299.preheader.split.us, !dbg !7642

for.cond299.preheader.for.cond299.preheader.split_crit_edge: ; preds = %for.cond299.preheader
  br i1 %tobool141, label %for.cond299.preheader.split.split.us, label %for.cond299.preheader.split.for.cond299.preheader.split.split_crit_edge, !dbg !7642

for.cond299.preheader.split.us:                   ; preds = %for.cond299.preheader
  br label %for.cond299.us, !dbg !7642

for.cond299.us:                                   ; preds = %for.inc337.us, %for.cond299.preheader.split.us
  %indvars.iv72 = phi i64 [ %indvars.iv.next73, %for.inc337.us ], [ 0, %for.cond299.preheader.split.us ], !dbg !7643
  %ret.21.us = phi i8 [ %ret.24.us, %for.inc337.us ], [ 0, %for.cond299.preheader.split.us ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.21.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i64 %indvars.iv72, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call300.us = call fastcc i32 @gimple_asm_noutputs(%union.gimple_statement_d* %stmt) #8, !dbg !7644
  %26 = zext i32 %call300.us to i64, !dbg !7645
  %cmp301.us = icmp ult i64 %indvars.iv72, %26, !dbg !7645
  br i1 %cmp301.us, label %for.body303.us, label %if.end340.loopexit.us-lcssa.us, !dbg !7642

for.body303.us:                                   ; preds = %for.cond299.us
  %27 = trunc i64 %indvars.iv72 to i32, !dbg !7646
  %call304.us = call fastcc %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %stmt, i32 %27) #8, !dbg !7646
  call void @llvm.dbg.value(metadata %union.tree_node* %call304.us, metadata !7421, metadata !DIExpression()), !dbg !7647
  %28 = getelementptr inbounds %union.tree_node, %union.tree_node* %call304.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7648
  %29 = load %union.tree_node*, %union.tree_node** %28, align 8, !dbg !7648
  %call305.us = call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %29) #8, !dbg !7649
  call void @llvm.dbg.value(metadata %union.tree_node* %call305.us, metadata !7426, metadata !DIExpression()), !dbg !7647
  %tobool306.us = icmp eq %union.tree_node* %call305.us, null, !dbg !7650
  br i1 %tobool306.us, label %if.end315.us, label %if.then309.us, !dbg !7651

if.then309.us:                                    ; preds = %for.body303.us
  %call310.us = call zeroext i8 %visit_store(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call305.us, i8* %data) #7, !dbg !7652
  %or31314.us = or i8 %ret.21.us, %call310.us, !dbg !7653
  call void @llvm.dbg.value(metadata i8 %or31314.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end315.us, !dbg !7654

if.end315.us:                                     ; preds = %for.body303.us, %if.then309.us
  %ret.22.us = phi i8 [ %or31314.us, %if.then309.us ], [ %ret.21.us, %for.body303.us ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.22.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  br i1 %tobool141, label %for.inc337.us, label %if.then317.us, !dbg !7655

if.then317.us:                                    ; preds = %if.end315.us
  %purpose.us = getelementptr inbounds %union.tree_node, %union.tree_node* %call304.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7656
  %30 = bitcast i32* %purpose.us to %struct.tree_list**, !dbg !7656
  %31 = load %struct.tree_list*, %struct.tree_list** %30, align 8, !dbg !7656
  %value320.us = getelementptr inbounds %struct.tree_list, %struct.tree_list* %31, i64 0, i32 2, !dbg !7656
  %32 = bitcast %union.tree_node** %value320.us to %struct.tree_string**, !dbg !7656
  %33 = load %struct.tree_string*, %struct.tree_string** %32, align 8, !dbg !7656
  %arraydecay.us = getelementptr inbounds %struct.tree_string, %struct.tree_string* %33, i64 0, i32 2, i64 0, !dbg !7656
  call void @llvm.dbg.value(metadata i8* %arraydecay.us, metadata !7416, metadata !DIExpression()), !dbg !7633
  store i8* %arraydecay.us, i8** %constraint, align 8, !dbg !7659
  %.cast.us = ptrtoint i8* %arraydecay.us to i64, !dbg !7660
  %arrayidx321.us = getelementptr inbounds i8*, i8** %25, i64 %indvars.iv72, !dbg !7661
  %34 = bitcast i8** %arrayidx321.us to i64*, !dbg !7662
  store i64 %.cast.us, i64* %34, align 8, !dbg !7662
  call void @llvm.dbg.value(metadata i8** %constraint, metadata !7416, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !7418, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !7419, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.dbg.value(metadata i8* %is_inout, metadata !7420, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  %35 = trunc i64 %indvars.iv72 to i32, !dbg !7663
  %call322.us = call zeroext i8 @parse_output_constraint(i8** nonnull %constraint, i32 %35, i32 0, i32 0, i8* nonnull %allows_mem, i8* nonnull %allows_reg, i8* nonnull %is_inout) #7, !dbg !7663
  %36 = load i8, i8* %allows_reg, align 1, !dbg !7664
  call void @llvm.dbg.value(metadata i8 %36, metadata !7419, metadata !DIExpression()), !dbg !7633
  %tobool325.us = icmp ne i8 %36, 0, !dbg !7664
  %or.cond3.us = or i1 %tobool306.us, %tobool325.us, !dbg !7666
  br i1 %or.cond3.us, label %for.inc337.us, label %land.lhs.true326.us, !dbg !7666

land.lhs.true326.us:                              ; preds = %if.then317.us
  %37 = load i8, i8* %allows_mem, align 1, !dbg !7667
  call void @llvm.dbg.value(metadata i8 %37, metadata !7418, metadata !DIExpression()), !dbg !7633
  %tobool328.us = icmp eq i8 %37, 0, !dbg !7667
  br i1 %tobool328.us, label %for.inc337.us, label %if.then329.us, !dbg !7668

if.then329.us:                                    ; preds = %land.lhs.true326.us
  %call330.us = call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %call305.us, i8* %data) #7, !dbg !7669
  %or33313.us = or i8 %ret.22.us, %call330.us, !dbg !7670
  call void @llvm.dbg.value(metadata i8 %or33313.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %for.inc337.us, !dbg !7671

for.inc337.us:                                    ; preds = %if.then329.us, %land.lhs.true326.us, %if.then317.us, %if.end315.us
  %ret.24.us = phi i8 [ %ret.22.us, %if.end315.us ], [ %or33313.us, %if.then329.us ], [ %ret.22.us, %land.lhs.true326.us ], [ %ret.22.us, %if.then317.us ], !dbg !7653
  call void @llvm.dbg.value(metadata i8 %ret.24.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  %indvars.iv.next73 = add nuw nsw i64 %indvars.iv72, 1, !dbg !7672
  br label %for.cond299.us, !dbg !7673, !llvm.loop !7674

if.end340.loopexit.us-lcssa.us:                   ; preds = %for.cond299.us
  %ret.21.us.lcssa = phi i8 [ %ret.21.us, %for.cond299.us ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.21.us.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.21.us.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end340.loopexit, !dbg !7676

for.cond299.preheader.split.for.cond299.preheader.split.split_crit_edge: ; preds = %for.cond299.preheader.for.cond299.preheader.split_crit_edge
  br label %for.cond299, !dbg !7642

for.cond299.preheader.split.split.us:             ; preds = %for.cond299.preheader.for.cond299.preheader.split_crit_edge
  br label %for.cond299.us37, !dbg !7642

for.cond299.us37:                                 ; preds = %for.body303.us42, %for.cond299.preheader.split.split.us
  %i.2.us38 = phi i32 [ %inc338.us68, %for.body303.us42 ], [ 0, %for.cond299.preheader.split.split.us ], !dbg !7643
  call void @llvm.dbg.value(metadata i8 0, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i32 %i.2.us38, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call300.us40 = call fastcc i32 @gimple_asm_noutputs(%union.gimple_statement_d* %stmt) #8, !dbg !7644
  %cmp301.us41 = icmp ult i32 %i.2.us38, %call300.us40, !dbg !7645
  br i1 %cmp301.us41, label %for.body303.us42, label %if.end340.loopexit.us-lcssa.us-lcssa.us, !dbg !7642

for.body303.us42:                                 ; preds = %for.cond299.us37
  %call304.us43 = call fastcc %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %stmt, i32 %i.2.us38) #8, !dbg !7646
  call void @llvm.dbg.value(metadata %union.tree_node* %call304.us43, metadata !7421, metadata !DIExpression()), !dbg !7647
  %38 = getelementptr inbounds %union.tree_node, %union.tree_node* %call304.us43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7648
  %39 = load %union.tree_node*, %union.tree_node** %38, align 8, !dbg !7648
  %call305.us44 = call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %39) #8, !dbg !7649
  call void @llvm.dbg.value(metadata %union.tree_node* %call305.us44, metadata !7426, metadata !DIExpression()), !dbg !7647
  call void @llvm.dbg.value(metadata i8 0, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 0, metadata !7396, metadata !DIExpression()), !dbg !7442
  %inc338.us68 = add i32 %i.2.us38, 1, !dbg !7672
  call void @llvm.dbg.value(metadata i32 %inc338.us68, metadata !7397, metadata !DIExpression()), !dbg !7442
  br label %for.cond299.us37, !dbg !7673, !llvm.loop !7674

if.end340.loopexit.us-lcssa.us-lcssa.us:          ; preds = %for.cond299.us37
  br label %if.end340.loopexit.us-lcssa, !dbg !7676

for.cond299:                                      ; preds = %for.cond299.preheader.split.for.cond299.preheader.split.split_crit_edge, %for.inc337
  %indvars.iv = phi i64 [ 0, %for.cond299.preheader.split.for.cond299.preheader.split.split_crit_edge ], [ %indvars.iv.next, %for.inc337 ], !dbg !7643
  %ret.21 = phi i8 [ 0, %for.cond299.preheader.split.for.cond299.preheader.split.split_crit_edge ], [ %ret.24, %for.inc337 ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.21, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call300 = call fastcc i32 @gimple_asm_noutputs(%union.gimple_statement_d* %stmt) #8, !dbg !7644
  %40 = zext i32 %call300 to i64, !dbg !7645
  %cmp301 = icmp ult i64 %indvars.iv, %40, !dbg !7645
  br i1 %cmp301, label %for.body303, label %if.end340.loopexit.us-lcssa.us-lcssa, !dbg !7642

for.body303:                                      ; preds = %for.cond299
  %41 = trunc i64 %indvars.iv to i32, !dbg !7646
  %call304 = call fastcc %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %stmt, i32 %41) #8, !dbg !7646
  call void @llvm.dbg.value(metadata %union.tree_node* %call304, metadata !7421, metadata !DIExpression()), !dbg !7647
  %42 = getelementptr inbounds %union.tree_node, %union.tree_node* %call304, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7648
  %43 = load %union.tree_node*, %union.tree_node** %42, align 8, !dbg !7648
  %call305 = call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %43) #8, !dbg !7649
  call void @llvm.dbg.value(metadata %union.tree_node* %call305, metadata !7426, metadata !DIExpression()), !dbg !7647
  call void @llvm.dbg.value(metadata i8 %ret.21, metadata !7396, metadata !DIExpression()), !dbg !7442
  %purpose = getelementptr inbounds %union.tree_node, %union.tree_node* %call304, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7656
  %44 = bitcast i32* %purpose to %struct.tree_list**, !dbg !7656
  %45 = load %struct.tree_list*, %struct.tree_list** %44, align 8, !dbg !7656
  %value320 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %45, i64 0, i32 2, !dbg !7656
  %46 = bitcast %union.tree_node** %value320 to %struct.tree_string**, !dbg !7656
  %47 = load %struct.tree_string*, %struct.tree_string** %46, align 8, !dbg !7656
  %arraydecay = getelementptr inbounds %struct.tree_string, %struct.tree_string* %47, i64 0, i32 2, i64 0, !dbg !7656
  call void @llvm.dbg.value(metadata i8* %arraydecay, metadata !7416, metadata !DIExpression()), !dbg !7633
  store i8* %arraydecay, i8** %constraint, align 8, !dbg !7659
  %.cast = ptrtoint i8* %arraydecay to i64, !dbg !7660
  %arrayidx321 = getelementptr inbounds i8*, i8** %25, i64 %indvars.iv, !dbg !7661
  %48 = bitcast i8** %arrayidx321 to i64*, !dbg !7662
  store i64 %.cast, i64* %48, align 8, !dbg !7662
  call void @llvm.dbg.value(metadata i8** %constraint, metadata !7416, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !7418, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !7419, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.dbg.value(metadata i8* %is_inout, metadata !7420, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  %49 = trunc i64 %indvars.iv to i32, !dbg !7663
  %call322 = call zeroext i8 @parse_output_constraint(i8** nonnull %constraint, i32 %49, i32 0, i32 0, i8* nonnull %allows_mem, i8* nonnull %allows_reg, i8* nonnull %is_inout) #7, !dbg !7663
  %tobool323 = icmp eq %union.tree_node* %call305, null, !dbg !7677
  %50 = load i8, i8* %allows_reg, align 1, !dbg !7664
  call void @llvm.dbg.value(metadata i8 %50, metadata !7419, metadata !DIExpression()), !dbg !7633
  %tobool325 = icmp ne i8 %50, 0, !dbg !7664
  %or.cond3 = or i1 %tobool323, %tobool325, !dbg !7666
  br i1 %or.cond3, label %for.inc337, label %land.lhs.true326, !dbg !7666

land.lhs.true326:                                 ; preds = %for.body303
  %51 = load i8, i8* %allows_mem, align 1, !dbg !7667
  call void @llvm.dbg.value(metadata i8 %51, metadata !7418, metadata !DIExpression()), !dbg !7633
  %tobool328 = icmp eq i8 %51, 0, !dbg !7667
  br i1 %tobool328, label %for.inc337, label %if.then329, !dbg !7668

if.then329:                                       ; preds = %land.lhs.true326
  %call330 = call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %call305, i8* %data) #7, !dbg !7669
  %or33313 = or i8 %ret.21, %call330, !dbg !7670
  call void @llvm.dbg.value(metadata i8 %or33313, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %for.inc337, !dbg !7671

for.inc337:                                       ; preds = %land.lhs.true326, %for.body303, %if.then329
  %ret.24 = phi i8 [ %or33313, %if.then329 ], [ %ret.21, %land.lhs.true326 ], [ %ret.21, %for.body303 ], !dbg !7653
  call void @llvm.dbg.value(metadata i8 %ret.24, metadata !7396, metadata !DIExpression()), !dbg !7442
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !7672
  br label %for.cond299, !dbg !7673, !llvm.loop !7674

if.end340.loopexit.us-lcssa.us-lcssa:             ; preds = %for.cond299
  %ret.21.lcssa75 = phi i8 [ %ret.21, %for.cond299 ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.21.lcssa75, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.21.lcssa75, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end340.loopexit.us-lcssa, !dbg !7676

if.end340.loopexit.us-lcssa:                      ; preds = %if.end340.loopexit.us-lcssa.us-lcssa.us, %if.end340.loopexit.us-lcssa.us-lcssa
  %ret.21.lcssa.ph = phi i8 [ %ret.21.lcssa75, %if.end340.loopexit.us-lcssa.us-lcssa ], [ 0, %if.end340.loopexit.us-lcssa.us-lcssa.us ]
  br label %if.end340.loopexit, !dbg !7676

if.end340.loopexit:                               ; preds = %if.end340.loopexit.us-lcssa.us, %if.end340.loopexit.us-lcssa
  %ret.21.lcssa = phi i8 [ %ret.21.lcssa.ph, %if.end340.loopexit.us-lcssa ], [ %ret.21.us.lcssa, %if.end340.loopexit.us-lcssa.us ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.21.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end340, !dbg !7676

if.end340:                                        ; preds = %if.end340.loopexit, %if.then292
  %ret.25 = phi i8 [ 0, %if.then292 ], [ %ret.21.lcssa, %if.end340.loopexit ], !dbg !7678
  call void @llvm.dbg.value(metadata i8 %ret.25, metadata !7396, metadata !DIExpression()), !dbg !7442
  %tobool341 = icmp ne i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, null, !dbg !7676
  %or.cond4 = or i1 %tobool341, %tobool297, !dbg !7679
  br i1 %or.cond4, label %for.cond345.preheader, label %if.end416, !dbg !7679

for.cond345.preheader:                            ; preds = %if.end340
  %tobool380 = icmp eq i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, null, !dbg !7680
  br i1 %tobool141, label %for.cond345.preheader.split.us, label %for.cond345.preheader.for.cond345.preheader.split_crit_edge, !dbg !7687

for.cond345.preheader.for.cond345.preheader.split_crit_edge: ; preds = %for.cond345.preheader
  br label %for.cond345, !dbg !7687

for.cond345.preheader.split.us:                   ; preds = %for.cond345.preheader
  br label %for.cond345.us, !dbg !7687

for.cond345.us:                                   ; preds = %for.inc413.us, %for.cond345.preheader.split.us
  %i.3.us = phi i32 [ %inc414.us, %for.inc413.us ], [ 0, %for.cond345.preheader.split.us ], !dbg !7688
  %ret.26.us = phi i8 [ %ret.32.us, %for.inc413.us ], [ %ret.25, %for.cond345.preheader.split.us ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.26.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i32 %i.3.us, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call346.us = call fastcc i32 @gimple_asm_ninputs(%union.gimple_statement_d* %stmt) #8, !dbg !7689
  %cmp347.us = icmp ult i32 %i.3.us, %call346.us, !dbg !7690
  br i1 %cmp347.us, label %for.body349.us, label %if.end416.loopexit.us-lcssa.us, !dbg !7687

for.body349.us:                                   ; preds = %for.cond345.us
  %call351.us = call fastcc %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %stmt, i32 %i.3.us) #8, !dbg !7691
  call void @llvm.dbg.value(metadata %union.tree_node* %call351.us, metadata !7427, metadata !DIExpression()), !dbg !7692
  call void @llvm.dbg.value(metadata %union.tree_node* undef, metadata !7432, metadata !DIExpression()), !dbg !7692
  br i1 true, label %if.then376.us, label %for.body349.us.for.inc413.us_crit_edge, !dbg !7693

for.body349.us.for.inc413.us_crit_edge:           ; preds = %for.body349.us
  br label %for.inc413.us, !dbg !7693

if.then376.us:                                    ; preds = %for.body349.us
  %52 = getelementptr inbounds %union.tree_node, %union.tree_node* %call351.us, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7694
  %53 = load %union.tree_node*, %union.tree_node** %52, align 8, !dbg !7694
  call void @llvm.dbg.value(metadata %union.tree_node* %53, metadata !7432, metadata !DIExpression()), !dbg !7692
  %call377.us = call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %53) #8, !dbg !7695
  call void @llvm.dbg.value(metadata %union.tree_node* %call377.us, metadata !7432, metadata !DIExpression()), !dbg !7692
  %tobool378.us = icmp eq %union.tree_node* %call377.us, null, !dbg !7696
  br i1 %tobool378.us, label %for.inc413.us, label %if.then379.us, !dbg !7697

if.then379.us:                                    ; preds = %if.then376.us
  br i1 %tobool380, label %if.end387.us, label %if.then381.us, !dbg !7698

if.then381.us:                                    ; preds = %if.then379.us
  %call382.us = call zeroext i8 %visit_load(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call377.us, i8* %data) #7, !dbg !7699
  %or38510.us = or i8 %ret.26.us, %call382.us, !dbg !7700
  call void @llvm.dbg.value(metadata i8 %or38510.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end387.us, !dbg !7701

if.end387.us:                                     ; preds = %if.then381.us, %if.then379.us
  %ret.27.us = phi i8 [ %or38510.us, %if.then381.us ], [ %ret.26.us, %if.then379.us ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.27.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  br i1 true, label %for.inc413.us, label %if.then389.us, !dbg !7702

if.then389.us:                                    ; preds = %if.end387.us
  br i1 undef, label %land.lhs.true399.us, label %if.then389.us.for.inc413.us_crit_edge, !dbg !7703

if.then389.us.for.inc413.us_crit_edge:            ; preds = %if.then389.us
  br label %for.inc413.us, !dbg !7703

land.lhs.true399.us:                              ; preds = %if.then389.us
  br i1 undef, label %land.lhs.true399.us.for.inc413.us_crit_edge, label %if.then402.us, !dbg !7707

land.lhs.true399.us.for.inc413.us_crit_edge:      ; preds = %land.lhs.true399.us
  br label %for.inc413.us, !dbg !7707

if.then402.us:                                    ; preds = %land.lhs.true399.us
  br label %for.inc413.us, !dbg !7708

for.inc413.us:                                    ; preds = %if.then389.us.for.inc413.us_crit_edge, %land.lhs.true399.us.for.inc413.us_crit_edge, %for.body349.us.for.inc413.us_crit_edge, %if.then402.us, %if.end387.us, %if.then376.us
  %ret.32.us = phi i8 [ undef, %for.body349.us.for.inc413.us_crit_edge ], [ %ret.26.us, %if.then376.us ], [ %ret.27.us, %if.end387.us ], [ undef, %if.then389.us.for.inc413.us_crit_edge ], [ undef, %if.then402.us ], [ undef, %land.lhs.true399.us.for.inc413.us_crit_edge ], !dbg !7709
  call void @llvm.dbg.value(metadata i8 %ret.32.us, metadata !7396, metadata !DIExpression()), !dbg !7442
  %inc414.us = add i32 %i.3.us, 1, !dbg !7710
  call void @llvm.dbg.value(metadata i32 %inc414.us, metadata !7397, metadata !DIExpression()), !dbg !7442
  br label %for.cond345.us, !dbg !7711, !llvm.loop !7712

if.end416.loopexit.us-lcssa.us:                   ; preds = %for.cond345.us
  %ret.26.us.lcssa = phi i8 [ %ret.26.us, %for.cond345.us ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.26.us.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.26.us.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end416.loopexit, !dbg !7714

for.cond345:                                      ; preds = %for.cond345.preheader.for.cond345.preheader.split_crit_edge, %for.inc413
  %i.3 = phi i32 [ %inc414, %for.inc413 ], [ 0, %for.cond345.preheader.for.cond345.preheader.split_crit_edge ], !dbg !7688
  %ret.26 = phi i8 [ %ret.32, %for.inc413 ], [ %ret.25, %for.cond345.preheader.for.cond345.preheader.split_crit_edge ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.26, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i32 %i.3, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call346 = call fastcc i32 @gimple_asm_ninputs(%union.gimple_statement_d* %stmt) #8, !dbg !7689
  %cmp347 = icmp ult i32 %i.3, %call346, !dbg !7690
  br i1 %cmp347, label %for.body349, label %if.end416.loopexit.us-lcssa, !dbg !7687

for.body349:                                      ; preds = %for.cond345
  %call351 = call fastcc %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %stmt, i32 %i.3) #8, !dbg !7691
  call void @llvm.dbg.value(metadata %union.tree_node* %call351, metadata !7427, metadata !DIExpression()), !dbg !7692
  %54 = getelementptr inbounds %union.tree_node, %union.tree_node* %call351, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7694
  %55 = load %union.tree_node*, %union.tree_node** %54, align 8, !dbg !7694
  call void @llvm.dbg.value(metadata %union.tree_node* %55, metadata !7432, metadata !DIExpression()), !dbg !7692
  %56 = getelementptr inbounds %union.tree_node, %union.tree_node* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7715
  %bf.load358 = load i64, i64* %56, align 8, !dbg !7715
  %bf.cast36011 = and i64 %bf.load358, 65535, !dbg !7716
  %cmp361 = icmp eq i64 %bf.cast36011, 121, !dbg !7716
  br i1 %cmp361, label %if.then363, label %if.else372, !dbg !7717

if.then363:                                       ; preds = %for.body349
  %operands365 = getelementptr inbounds %union.tree_node, %union.tree_node* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7718
  %57 = load %union.tree_node*, %union.tree_node** %operands365, align 8, !dbg !7718
  %call367 = call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %57, i8* %data) #7, !dbg !7719
  %or37012 = or i8 %ret.26, %call367, !dbg !7720
  call void @llvm.dbg.value(metadata i8 %or37012, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %for.inc413, !dbg !7721

if.else372:                                       ; preds = %for.body349
  br i1 true, label %if.then376, label %if.else372.for.inc413_crit_edge, !dbg !7693

if.else372.for.inc413_crit_edge:                  ; preds = %if.else372
  br label %for.inc413, !dbg !7693

if.then376:                                       ; preds = %if.else372
  %call377 = call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %55) #8, !dbg !7695
  call void @llvm.dbg.value(metadata %union.tree_node* %call377, metadata !7432, metadata !DIExpression()), !dbg !7692
  %tobool378 = icmp eq %union.tree_node* %call377, null, !dbg !7696
  br i1 %tobool378, label %for.inc413, label %if.then379, !dbg !7697

if.then379:                                       ; preds = %if.then376
  br i1 %tobool380, label %if.end387, label %if.then381, !dbg !7698

if.then381:                                       ; preds = %if.then379
  %call382 = call zeroext i8 %visit_load(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call377, i8* %data) #7, !dbg !7699
  %or38510 = or i8 %ret.26, %call382, !dbg !7700
  call void @llvm.dbg.value(metadata i8 %or38510, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end387, !dbg !7701

if.end387:                                        ; preds = %if.then379, %if.then381
  %ret.27 = phi i8 [ %or38510, %if.then381 ], [ %ret.26, %if.then379 ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.27, metadata !7396, metadata !DIExpression()), !dbg !7442
  br i1 false, label %if.end387.for.inc413_crit_edge, label %if.then389, !dbg !7702

if.end387.for.inc413_crit_edge:                   ; preds = %if.end387
  br label %for.inc413, !dbg !7702

if.then389:                                       ; preds = %if.end387
  %purpose391 = getelementptr inbounds %union.tree_node, %union.tree_node* %call351, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7722
  %58 = bitcast i32* %purpose391 to %struct.tree_list**, !dbg !7722
  %59 = load %struct.tree_list*, %struct.tree_list** %58, align 8, !dbg !7722
  %value393 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %59, i64 0, i32 2, !dbg !7722
  %60 = bitcast %union.tree_node** %value393 to %struct.tree_string**, !dbg !7722
  %61 = load %struct.tree_string*, %struct.tree_string** %60, align 8, !dbg !7722
  %arraydecay396 = getelementptr inbounds %struct.tree_string, %struct.tree_string* %61, i64 0, i32 2, i64 0, !dbg !7722
  call void @llvm.dbg.value(metadata i8* %arraydecay396, metadata !7416, metadata !DIExpression()), !dbg !7633
  store i8* %arraydecay396, i8** %constraint, align 8, !dbg !7723
  call void @llvm.dbg.value(metadata i8** %constraint, metadata !7416, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !7418, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !7419, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  %call397 = call zeroext i8 @parse_input_constraint(i8** nonnull %constraint, i32 0, i32 0, i32 %call293, i32 0, i8** nonnull %25, i8* nonnull %allows_mem, i8* nonnull %allows_reg) #7, !dbg !7724
  %62 = load i8, i8* %allows_reg, align 1, !dbg !7725
  call void @llvm.dbg.value(metadata i8 %62, metadata !7419, metadata !DIExpression()), !dbg !7633
  %tobool398 = icmp eq i8 %62, 0, !dbg !7725
  br i1 %tobool398, label %land.lhs.true399, label %for.inc413, !dbg !7703

land.lhs.true399:                                 ; preds = %if.then389
  %63 = load i8, i8* %allows_mem, align 1, !dbg !7726
  call void @llvm.dbg.value(metadata i8 %63, metadata !7418, metadata !DIExpression()), !dbg !7633
  %tobool401 = icmp eq i8 %63, 0, !dbg !7726
  br i1 %tobool401, label %for.inc413, label %if.then402, !dbg !7707

if.then402:                                       ; preds = %land.lhs.true399
  %call403 = call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call377, i8* %data) #7, !dbg !7727
  %or4069 = or i8 %ret.27, %call403, !dbg !7728
  call void @llvm.dbg.value(metadata i8 %or4069, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %for.inc413, !dbg !7708

for.inc413:                                       ; preds = %if.end387.for.inc413_crit_edge, %if.else372.for.inc413_crit_edge, %land.lhs.true399, %if.then389, %if.then376, %if.then363, %if.then402
  %ret.32 = phi i8 [ %or37012, %if.then363 ], [ undef, %if.else372.for.inc413_crit_edge ], [ %ret.26, %if.then376 ], [ undef, %if.end387.for.inc413_crit_edge ], [ %ret.27, %if.then389 ], [ %or4069, %if.then402 ], [ %ret.27, %land.lhs.true399 ], !dbg !7709
  call void @llvm.dbg.value(metadata i8 %ret.32, metadata !7396, metadata !DIExpression()), !dbg !7442
  %inc414 = add i32 %i.3, 1, !dbg !7710
  call void @llvm.dbg.value(metadata i32 %inc414, metadata !7397, metadata !DIExpression()), !dbg !7442
  br label %for.cond345, !dbg !7711, !llvm.loop !7712

if.end416.loopexit.us-lcssa:                      ; preds = %for.cond345
  %ret.26.lcssa74 = phi i8 [ %ret.26, %for.cond345 ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.26.lcssa74, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.26.lcssa74, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end416.loopexit, !dbg !7714

if.end416.loopexit:                               ; preds = %if.end416.loopexit.us-lcssa.us, %if.end416.loopexit.us-lcssa
  %ret.26.lcssa = phi i8 [ %ret.26.lcssa74, %if.end416.loopexit.us-lcssa ], [ %ret.26.us.lcssa, %if.end416.loopexit.us-lcssa.us ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.26.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end416, !dbg !7714

if.end416:                                        ; preds = %if.end416.loopexit, %if.end340
  %ret.33 = phi i8 [ %ret.25, %if.end340 ], [ %ret.26.lcssa, %if.end416.loopexit ], !dbg !7678
  call void @llvm.dbg.value(metadata i8 %ret.33, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8* %is_inout, metadata !7420, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %is_inout) #6, !dbg !7714
  call void @llvm.dbg.value(metadata i8* %allows_reg, metadata !7419, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %allows_reg) #6, !dbg !7714
  call void @llvm.dbg.value(metadata i8* %allows_mem, metadata !7418, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %allows_mem) #6, !dbg !7714
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #6, !dbg !7714
  br label %if.end497, !dbg !7729

if.else417:                                       ; preds = %if.else288
  %call418 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !7730
  %cmp419 = icmp eq i32 %call418, 9, !dbg !7731
  br i1 %cmp419, label %if.then421, label %if.else458, !dbg !7732

if.then421:                                       ; preds = %if.else417
  %call423 = tail call fastcc %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %stmt) #8, !dbg !7733
  call void @llvm.dbg.value(metadata %union.tree_node* %call423, metadata !7433, metadata !DIExpression()), !dbg !7734
  %tobool424 = icmp eq %union.tree_node* %call423, null, !dbg !7735
  br i1 %tobool424, label %if.end497, label %if.then425, !dbg !7737

if.then425:                                       ; preds = %if.then421
  br i1 %tobool141, label %if.else443, label %land.lhs.true427, !dbg !7738

land.lhs.true427:                                 ; preds = %if.then425
  %64 = getelementptr inbounds %union.tree_node, %union.tree_node* %call423, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7741
  %bf.load429 = load i64, i64* %64, align 8, !dbg !7741
  %bf.cast4318 = and i64 %bf.load429, 65535, !dbg !7742
  %cmp432 = icmp eq i64 %bf.cast4318, 121, !dbg !7742
  br i1 %cmp432, label %if.then434, label %if.else443, !dbg !7743

if.then434:                                       ; preds = %land.lhs.true427
  %operands436 = getelementptr inbounds %union.tree_node, %union.tree_node* %call423, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7744
  %65 = load %union.tree_node*, %union.tree_node** %operands436, align 8, !dbg !7744
  %call438 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %65, i8* %data) #7, !dbg !7745
  call void @llvm.dbg.value(metadata i8 %call438, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end497, !dbg !7746

if.else443:                                       ; preds = %if.then425, %land.lhs.true427
  %tobool444 = icmp eq i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, null, !dbg !7747
  br i1 %tobool444, label %if.end497, label %if.then445, !dbg !7749

if.then445:                                       ; preds = %if.else443
  %call446 = tail call fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* nonnull %call423) #8, !dbg !7750
  call void @llvm.dbg.value(metadata %union.tree_node* %call446, metadata !7433, metadata !DIExpression()), !dbg !7734
  %tobool447 = icmp eq %union.tree_node* %call446, null, !dbg !7752
  br i1 %tobool447, label %if.end497, label %if.then448, !dbg !7754

if.then448:                                       ; preds = %if.then445
  %call449 = tail call zeroext i8 %visit_load(%union.gimple_statement_d* %stmt, %union.tree_node* nonnull %call446, i8* %data) #7, !dbg !7755
  call void @llvm.dbg.value(metadata i8 %call449, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end497, !dbg !7756

if.else458:                                       ; preds = %if.else417
  br i1 %tobool141, label %if.end497, label %land.lhs.true460, !dbg !7757

land.lhs.true460:                                 ; preds = %if.else458
  %call461 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !7758
  %cmp462 = icmp eq i32 %call461, 16, !dbg !7759
  br i1 %cmp462, label %for.cond465.preheader, label %if.end497, !dbg !7760

for.cond465.preheader:                            ; preds = %land.lhs.true460
  br label %for.cond465, !dbg !7761

for.cond465:                                      ; preds = %for.cond465.preheader, %for.inc489
  %i.4 = phi i32 [ %inc490, %for.inc489 ], [ 0, %for.cond465.preheader ], !dbg !7762
  %ret.38 = phi i8 [ %ret.39, %for.inc489 ], [ 0, %for.cond465.preheader ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.38, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i32 %i.4, metadata !7397, metadata !DIExpression()), !dbg !7442
  %call466 = tail call fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %stmt) #8, !dbg !7763
  %cmp467 = icmp ult i32 %i.4, %call466, !dbg !7764
  br i1 %cmp467, label %for.body469, label %if.end497.loopexit, !dbg !7761

for.body469:                                      ; preds = %for.cond465
  %call471 = tail call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %stmt, i32 %i.4) #8, !dbg !7765
  %call472 = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %call471) #8, !dbg !7765
  call void @llvm.dbg.value(metadata %union.tree_node* %call472, metadata !7436, metadata !DIExpression()), !dbg !7766
  %66 = getelementptr inbounds %union.tree_node, %union.tree_node* %call472, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7767
  %bf.load474 = load i64, i64* %66, align 8, !dbg !7767
  %bf.cast4766 = and i64 %bf.load474, 65535, !dbg !7769
  %cmp477 = icmp eq i64 %bf.cast4766, 121, !dbg !7769
  br i1 %cmp477, label %if.then479, label %for.inc489, !dbg !7770

if.then479:                                       ; preds = %for.body469
  %operands481 = getelementptr inbounds %union.tree_node, %union.tree_node* %call472, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7771
  %67 = load %union.tree_node*, %union.tree_node** %operands481, align 8, !dbg !7771
  %call483 = tail call zeroext i8 %visit_addr(%union.gimple_statement_d* %stmt, %union.tree_node* %67, i8* %data) #7, !dbg !7772
  %or4867 = or i8 %ret.38, %call483, !dbg !7773
  call void @llvm.dbg.value(metadata i8 %or4867, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %for.inc489, !dbg !7774

for.inc489:                                       ; preds = %for.body469, %if.then479
  %ret.39 = phi i8 [ %or4867, %if.then479 ], [ %ret.38, %for.body469 ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.39, metadata !7396, metadata !DIExpression()), !dbg !7442
  %inc490 = add i32 %i.4, 1, !dbg !7775
  call void @llvm.dbg.value(metadata i32 %inc490, metadata !7397, metadata !DIExpression()), !dbg !7442
  br label %for.cond465, !dbg !7776, !llvm.loop !7777

if.end497.loopexit:                               ; preds = %for.cond465
  %ret.38.lcssa = phi i8 [ %ret.38, %for.cond465 ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.38.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.38.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.38.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end497, !dbg !7779

if.end497.loopexit36:                             ; preds = %for.cond
  %ret.9.lcssa = phi i8 [ %ret.9, %for.cond ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.9.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.9.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.9.lcssa, metadata !7396, metadata !DIExpression()), !dbg !7442
  br label %if.end497, !dbg !7779

if.end497:                                        ; preds = %if.end497.loopexit36, %if.end497.loopexit, %if.then129, %if.end127, %land.lhs.true273, %land.lhs.true269, %land.lhs.true265, %if.end263, %if.then445, %if.else443, %if.then421, %if.else458, %if.end416, %land.lhs.true460, %if.then448, %if.then434, %if.then280, %if.then132
  %ret.45 = phi i8 [ %ret.6, %if.end127 ], [ %or13624, %if.then132 ], [ %ret.6, %if.then129 ], [ %or28516, %if.then280 ], [ %ret.19, %land.lhs.true273 ], [ %ret.19, %land.lhs.true269 ], [ %ret.19, %land.lhs.true265 ], [ %ret.19, %if.end263 ], [ %ret.33, %if.end416 ], [ 0, %if.then421 ], [ %call438, %if.then434 ], [ 0, %if.else443 ], [ %call449, %if.then448 ], [ 0, %if.then445 ], [ 0, %land.lhs.true460 ], [ 0, %if.else458 ], [ %ret.38.lcssa, %if.end497.loopexit ], [ %ret.9.lcssa, %if.end497.loopexit36 ], !dbg !7442
  call void @llvm.dbg.value(metadata i8 %ret.45, metadata !7396, metadata !DIExpression()), !dbg !7442
  ret i8 %ret.45, !dbg !7779
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @get_base_loadstore(%union.tree_node* %op) unnamed_addr #5 !dbg !7780 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !7782, metadata !DIExpression()), !dbg !7783
  br label %while.cond, !dbg !7784

while.cond:                                       ; preds = %while.body, %entry
  %op.addr.0 = phi %union.tree_node* [ %op, %entry ], [ %0, %while.body ]
  call void @llvm.dbg.value(metadata %union.tree_node* %op.addr.0, metadata !7782, metadata !DIExpression()), !dbg !7783
  %call = tail call fastcc zeroext i8 @handled_component_p(%union.tree_node* %op.addr.0) #8, !dbg !7785
  %tobool = icmp eq i8 %call, 0, !dbg !7784
  br i1 %tobool, label %while.end, label %while.body, !dbg !7784

while.body:                                       ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %op.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7786
  %0 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !7786
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !7782, metadata !DIExpression()), !dbg !7783
  br label %while.cond, !dbg !7784, !llvm.loop !7787

while.end:                                        ; preds = %while.cond
  %op.addr.0.lcssa = phi %union.tree_node* [ %op.addr.0, %while.cond ]
  call void @llvm.dbg.value(metadata %union.tree_node* %op.addr.0.lcssa, metadata !7782, metadata !DIExpression()), !dbg !7783
  call void @llvm.dbg.value(metadata %union.tree_node* %op.addr.0.lcssa, metadata !7782, metadata !DIExpression()), !dbg !7783
  call void @llvm.dbg.value(metadata %union.tree_node* %op.addr.0.lcssa, metadata !7782, metadata !DIExpression()), !dbg !7783
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %op.addr.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7788
  %bf.load = load i64, i64* %1, align 8, !dbg !7788
  %bf.cast = and i64 %bf.load, 65535, !dbg !7788
  %arrayidx1 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !7788
  %2 = load i32, i32* %arrayidx1, align 4, !dbg !7788
  %cmp = icmp eq i32 %2, 3, !dbg !7788
  br i1 %cmp, label %return, label %lor.lhs.false, !dbg !7790

lor.lhs.false:                                    ; preds = %while.end
  %cmp6 = icmp eq i64 %bf.cast, 47, !dbg !7791
  br i1 %cmp6, label %return, label %lor.lhs.false7, !dbg !7791

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %cmp12 = icmp eq i64 %bf.cast, 48, !dbg !7791
  br i1 %cmp12, label %return, label %lor.lhs.false13, !dbg !7791

lor.lhs.false13:                                  ; preds = %lor.lhs.false7
  %cmp18 = icmp eq i64 %bf.cast, 49, !dbg !7791
  br i1 %cmp18, label %return, label %lor.lhs.false19, !dbg !7792

lor.lhs.false19:                                  ; preds = %lor.lhs.false13
  %cmp24 = icmp eq i64 %bf.cast, 152, !dbg !7793
  %spec.select = select i1 %cmp24, %union.tree_node* %op.addr.0.lcssa, %union.tree_node* null, !dbg !7794
  ret %union.tree_node* %spec.select, !dbg !7794

return:                                           ; preds = %while.end, %lor.lhs.false, %lor.lhs.false7, %lor.lhs.false13
  ret %union.tree_node* %op.addr.0.lcssa, !dbg !7795
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_asm_noutputs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7796 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7798, metadata !DIExpression()), !dbg !7799
  %gimple_asm = bitcast %union.gimple_statement_d* %gs to %struct.gimple_statement_asm*, !dbg !7800
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 3, !dbg !7801
  %0 = load i8, i8* %no, align 1, !dbg !7801
  %conv = zext i8 %0 to i32, !dbg !7802
  ret i32 %conv, !dbg !7803
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_asm_output_op(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !7804 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7806, metadata !DIExpression()), !dbg !7808
  call void @llvm.dbg.value(metadata i32 %index, metadata !7807, metadata !DIExpression()), !dbg !7808
  %gimple_asm = bitcast %union.gimple_statement_d* %gs to %struct.gimple_statement_asm*, !dbg !7809
  %no = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 3, !dbg !7809
  %0 = load i8, i8* %no, align 1, !dbg !7809
  %conv = zext i8 %0 to i32, !dbg !7809
  %cmp = icmp ult i32 %conv, %index, !dbg !7809
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !7809

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !7809
  br label %cond.end, !dbg !7809

cond.end:                                         ; preds = %entry, %cond.true
  %ni = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !7810
  %1 = bitcast %union.tree_node*** %ni to i8*, !dbg !7810
  %2 = load i8, i8* %1, align 8, !dbg !7810
  %conv3 = zext i8 %2 to i32, !dbg !7811
  %add = add i32 %conv3, %index, !dbg !7812
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %add) #8, !dbg !7813
  ret %union.tree_node* %call, !dbg !7814
}

declare dso_local zeroext i8 @parse_output_constraint(i8**, i32, i32, i32, i8*, i8*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_asm_ninputs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7815 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7817, metadata !DIExpression()), !dbg !7818
  %ni = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !7819
  %0 = bitcast %union.tree_node*** %ni to i8*, !dbg !7819
  %1 = load i8, i8* %0, align 8, !dbg !7819
  %conv = zext i8 %1 to i32, !dbg !7820
  ret i32 %conv, !dbg !7821
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_asm_input_op(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !7822 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7824, metadata !DIExpression()), !dbg !7826
  call void @llvm.dbg.value(metadata i32 %index, metadata !7825, metadata !DIExpression()), !dbg !7826
  %ni = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !7827
  %0 = bitcast %union.tree_node*** %ni to i8*, !dbg !7827
  %1 = load i8, i8* %0, align 8, !dbg !7827
  %conv = zext i8 %1 to i32, !dbg !7827
  %cmp = icmp ult i32 %conv, %index, !dbg !7827
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !7827

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !7827
  br label %cond.end, !dbg !7827

cond.end:                                         ; preds = %entry, %cond.true
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %index) #8, !dbg !7828
  ret %union.tree_node* %call, !dbg !7829
}

declare dso_local zeroext i8 @parse_input_constraint(i8**, i32, i32, i32, i32, i8**, i8*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_return_retval(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7830 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7832, metadata !DIExpression()), !dbg !7833
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #8, !dbg !7834
  ret %union.tree_node* %call, !dbg !7835
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7836 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7838, metadata !DIExpression()), !dbg !7839
  %nargs = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 2, !dbg !7840
  %0 = load i32, i32* %nargs, align 4, !dbg !7840
  ret i32 %0, !dbg !7841
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) unnamed_addr #0 !dbg !7842 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use, metadata !7849, metadata !DIExpression()), !dbg !7850
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use, i64 0, i32 3, !dbg !7851
  %0 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !7851
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7852
  ret %union.tree_node* %1, !dbg !7853
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !7854 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7858, metadata !DIExpression()), !dbg !7860
  call void @llvm.dbg.value(metadata i32 %i, metadata !7859, metadata !DIExpression()), !dbg !7860
  %call = tail call fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %i) #8, !dbg !7861
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i64 0, i32 0, !dbg !7862
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !7863
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @walk_stmt_load_store_ops(%union.gimple_statement_d* %stmt, i8* %data, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store) local_unnamed_addr #5 !dbg !7864 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7868, metadata !DIExpression()), !dbg !7872
  call void @llvm.dbg.value(metadata i8* %data, metadata !7869, metadata !DIExpression()), !dbg !7872
  call void @llvm.dbg.value(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, metadata !7870, metadata !DIExpression()), !dbg !7872
  call void @llvm.dbg.value(metadata i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, metadata !7871, metadata !DIExpression()), !dbg !7872
  %call = tail call zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d* %stmt, i8* %data, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_load, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* %visit_store, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* null) #8, !dbg !7873
  ret i8 %call, !dbg !7874
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @gimple_ior_addresses_taken(%struct.bitmap_head_def* %addresses_taken, %union.gimple_statement_d* %stmt) local_unnamed_addr #5 !dbg !7875 {
entry:
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %addresses_taken, metadata !7879, metadata !DIExpression()), !dbg !7881
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7880, metadata !DIExpression()), !dbg !7881
  %0 = bitcast %struct.bitmap_head_def* %addresses_taken to i8*, !dbg !7882
  %call = tail call zeroext i8 @walk_stmt_load_store_addr_ops(%union.gimple_statement_d* %stmt, i8* %0, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* null, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* null, i8 (%union.gimple_statement_d*, %union.tree_node*, i8*)* nonnull @gimple_ior_addresses_taken_1) #8, !dbg !7883
  ret i8 %call, !dbg !7884
}

; Function Attrs: nounwind uwtable
define internal zeroext i8 @gimple_ior_addresses_taken_1(%union.gimple_statement_d* %stmt, %union.tree_node* %addr, i8* %data) #5 !dbg !7885 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7887, metadata !DIExpression()), !dbg !7891
  call void @llvm.dbg.value(metadata %union.tree_node* %addr, metadata !7888, metadata !DIExpression()), !dbg !7891
  call void @llvm.dbg.value(metadata i8* %data, metadata !7889, metadata !DIExpression()), !dbg !7891
  call void @llvm.dbg.value(metadata %struct.bitmap_head_def* %3, metadata !7890, metadata !DIExpression()), !dbg !7891
  br label %while.cond, !dbg !7892

while.cond:                                       ; preds = %while.body, %entry
  %addr.addr.0 = phi %union.tree_node* [ %addr, %entry ], [ %0, %while.body ]
  call void @llvm.dbg.value(metadata %union.tree_node* %addr.addr.0, metadata !7888, metadata !DIExpression()), !dbg !7891
  %call = tail call fastcc zeroext i8 @handled_component_p(%union.tree_node* %addr.addr.0) #8, !dbg !7893
  %tobool = icmp eq i8 %call, 0, !dbg !7892
  br i1 %tobool, label %while.end, label %while.body, !dbg !7892

while.body:                                       ; preds = %while.cond
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %addr.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7894
  %0 = load %union.tree_node*, %union.tree_node** %operands, align 8, !dbg !7894
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !7888, metadata !DIExpression()), !dbg !7891
  br label %while.cond, !dbg !7892, !llvm.loop !7895

while.end:                                        ; preds = %while.cond
  %addr.addr.0.lcssa = phi %union.tree_node* [ %addr.addr.0, %while.cond ]
  call void @llvm.dbg.value(metadata %union.tree_node* %addr.addr.0.lcssa, metadata !7888, metadata !DIExpression()), !dbg !7891
  call void @llvm.dbg.value(metadata %union.tree_node* %addr.addr.0.lcssa, metadata !7888, metadata !DIExpression()), !dbg !7891
  call void @llvm.dbg.value(metadata %union.tree_node* %addr.addr.0.lcssa, metadata !7888, metadata !DIExpression()), !dbg !7891
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %addr.addr.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7896
  %bf.load = load i64, i64* %1, align 8, !dbg !7896
  %bf.cast = and i64 %bf.load, 65535, !dbg !7896
  %arrayidx1 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !7896
  %2 = load i32, i32* %arrayidx1, align 4, !dbg !7896
  %cmp = icmp eq i32 %2, 3, !dbg !7896
  br i1 %cmp, label %if.then, label %cleanup, !dbg !7898

if.then:                                          ; preds = %while.end
  %3 = bitcast i8* %data to %struct.bitmap_head_def*, !dbg !7899
  %uid = getelementptr inbounds %union.tree_node, %union.tree_node* %addr.addr.0.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7900
  %4 = load i32, i32* %uid, align 4, !dbg !7900
  %call2 = tail call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %3, i32 %4) #7, !dbg !7902
  br label %cleanup, !dbg !7903

cleanup:                                          ; preds = %while.end, %if.then
  %retval.0 = phi i8 [ 1, %if.then ], [ 0, %while.end ], !dbg !7891
  ret i8 %retval.0, !dbg !7904
}

; Function Attrs: nounwind uwtable
define dso_local i8* @gimple_decl_printable_name(%union.tree_node* %decl, i32 %verbosity) local_unnamed_addr #5 !dbg !7905 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %decl, metadata !7909, metadata !DIExpression()), !dbg !7916
  call void @llvm.dbg.value(metadata i32 %verbosity, metadata !7910, metadata !DIExpression()), !dbg !7916
  %tobool = icmp eq %union.tree_node* %decl, null, !dbg !7917
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !7917

land.lhs.true:                                    ; preds = %entry
  %name = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7917
  %0 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !7917
  %tobool1 = icmp eq %union.tree_node* %0, null, !dbg !7917
  br i1 %tobool1, label %cond.true, label %cond.end, !dbg !7917

cond.true:                                        ; preds = %land.lhs.true, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 4565, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !7917
  br label %cond.end, !dbg !7917

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !7918
  %bf.load = load i64, i64* %1, align 8, !dbg !7918
  %bf.cast = and i64 %bf.load, 65535, !dbg !7918
  %arrayidx2 = getelementptr inbounds [191 x [64 x i8]], [191 x [64 x i8]]* @tree_contains_struct, i64 0, i64 %bf.cast, i64 13, !dbg !7918
  %2 = load i8, i8* %arrayidx2, align 1, !dbg !7918
  %tobool3 = icmp eq i8 %2, 0, !dbg !7918
  br i1 %tobool3, label %if.end24, label %land.lhs.true4, !dbg !7918

land.lhs.true4:                                   ; preds = %cond.end
  %assembler_name = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 1, !dbg !7918
  %3 = load %union.tree_node*, %union.tree_node** %assembler_name, align 8, !dbg !7918
  %cmp = icmp eq %union.tree_node* %3, null, !dbg !7918
  br i1 %cmp, label %if.end24, label %if.then, !dbg !7919

if.then:                                          ; preds = %land.lhs.true4
  call void @llvm.dbg.value(metadata i32 0, metadata !7915, metadata !DIExpression()), !dbg !7920
  %cmp6 = icmp sgt i32 %verbosity, 1, !dbg !7921
  br i1 %cmp6, label %if.then8, label %if.end16, !dbg !7923

if.then8:                                         ; preds = %if.then
  call void @llvm.dbg.value(metadata i32 16426, metadata !7915, metadata !DIExpression()), !dbg !7920
  %cmp13 = icmp eq i64 %bf.cast, 29, !dbg !7924
  %spec.select = select i1 %cmp13, i32 16427, i32 16426, !dbg !7927
  call void @llvm.dbg.value(metadata i32 %spec.select, metadata !7915, metadata !DIExpression()), !dbg !7920
  br label %if.end16, !dbg !7928

if.end16:                                         ; preds = %if.then8, %if.then
  %dmgl_opts.1 = phi i32 [ %spec.select, %if.then8 ], [ 0, %if.then ], !dbg !7920
  call void @llvm.dbg.value(metadata i32 %dmgl_opts.1, metadata !7915, metadata !DIExpression()), !dbg !7920
  %call = tail call %union.tree_node* @decl_assembler_name(%union.tree_node* %decl) #7, !dbg !7929
  %id = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7929
  %str17 = bitcast i32* %id to i8**, !dbg !7929
  %4 = load i8*, i8** %str17, align 8, !dbg !7929
  call void @llvm.dbg.value(metadata i8* %4, metadata !7914, metadata !DIExpression()), !dbg !7920
  %call18 = tail call i8* @cplus_demangle_v3(i8* %4, i32 %dmgl_opts.1) #7, !dbg !7930
  call void @llvm.dbg.value(metadata i8* %call18, metadata !7911, metadata !DIExpression()), !dbg !7920
  %tobool19 = icmp eq i8* %call18, null, !dbg !7931
  %call18. = select i1 %tobool19, i8* %4, i8* %call18, !dbg !7931
  br label %return

if.end24:                                         ; preds = %land.lhs.true4, %cond.end
  %name26 = getelementptr inbounds %union.tree_node, %union.tree_node* %decl, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7932
  %5 = bitcast %union.tree_node** %name26 to %struct.tree_identifier**, !dbg !7932
  %6 = load %struct.tree_identifier*, %struct.tree_identifier** %5, align 8, !dbg !7932
  %str29 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %6, i64 0, i32 1, i32 0, !dbg !7932
  %7 = load i8*, i8** %str29, align 8, !dbg !7932
  br label %return, !dbg !7933

return:                                           ; preds = %if.end24, %if.end16
  %retval.0 = phi i8* [ %call18., %if.end16 ], [ %7, %if.end24 ], !dbg !7916
  ret i8* %retval.0, !dbg !7934
}

declare dso_local %union.tree_node* @decl_assembler_name(%union.tree_node*) local_unnamed_addr #2

declare dso_local i8* @cplus_demangle_v3(i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local %union.tree_node* @gimple_fold_obj_type_ref(%union.tree_node* %ref, %union.tree_node* %known_type) local_unnamed_addr #5 !dbg !7935 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %ref, metadata !7939, metadata !DIExpression()), !dbg !7945
  call void @llvm.dbg.value(metadata %union.tree_node* %known_type, metadata !7940, metadata !DIExpression()), !dbg !7945
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %known_type, i64 0, i32 0, i32 0, i32 0, i32 3, !dbg !7946
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7946
  %cmp = icmp eq %union.tree_node* %1, null, !dbg !7948
  br i1 %cmp, label %cleanup, label %if.end, !dbg !7949

if.end:                                           ; preds = %entry
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7950
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !7950
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !7943, metadata !DIExpression()), !dbg !7945
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %ref, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !7951
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 2, !dbg !7951
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7951
  %call = tail call i64 @tree_low_cst(%union.tree_node* %4, i32 1) #7, !dbg !7952
  call void @llvm.dbg.value(metadata i64 %call, metadata !7941, metadata !DIExpression()), !dbg !7945
  call void @llvm.dbg.value(metadata i64 0, metadata !7942, metadata !DIExpression()), !dbg !7945
  br label %while.cond, !dbg !7953

while.cond:                                       ; preds = %while.body, %if.end
  %i.0 = phi i64 [ 0, %if.end ], [ %add, %while.body ], !dbg !7945
  %.in = phi %union.tree_node* [ %3, %if.end ], [ %5, %while.body ]
  %v.0 = phi %union.tree_node* [ %3, %if.end ], [ %5, %while.body ], !dbg !7945
  call void @llvm.dbg.value(metadata %union.tree_node* %v.0, metadata !7943, metadata !DIExpression()), !dbg !7945
  call void @llvm.dbg.value(metadata i64 %i.0, metadata !7942, metadata !DIExpression()), !dbg !7945
  %cmp4 = icmp eq i64 %i.0, %call, !dbg !7954
  br i1 %cmp4, label %while.end, label %while.body, !dbg !7953

while.body:                                       ; preds = %while.cond
  %add = add nuw nsw i64 %i.0, 1, !dbg !7955
  call void @llvm.dbg.value(metadata i64 %add, metadata !7942, metadata !DIExpression()), !dbg !7945
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %v.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !7957
  %5 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !7957
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !7943, metadata !DIExpression()), !dbg !7945
  br label %while.cond, !dbg !7953, !llvm.loop !7958

while.end:                                        ; preds = %while.cond
  %.in.lcssa = phi %union.tree_node* [ %.in, %while.cond ]
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %.in.lcssa, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !7960
  %7 = load %union.tree_node*, %union.tree_node** %6, align 8, !dbg !7960
  call void @llvm.dbg.value(metadata %union.tree_node* %7, metadata !7944, metadata !DIExpression()), !dbg !7945
  %call5 = tail call %struct.cgraph_node* @cgraph_node(%union.tree_node* %7) #7, !dbg !7961
  %vtable_method = getelementptr inbounds %struct.cgraph_node, %struct.cgraph_node* %call5, i64 0, i32 18, i32 2, !dbg !7962
  %bf.load = load i8, i8* %vtable_method, align 8, !dbg !7963
  %bf.set = or i8 %bf.load, -128, !dbg !7963
  store i8 %bf.set, i8* %vtable_method, align 8, !dbg !7963
  %call6 = tail call %union.tree_node* @build_fold_addr_expr_loc(i32 0, %union.tree_node* %7) #7, !dbg !7964
  br label %cleanup, !dbg !7965

cleanup:                                          ; preds = %entry, %while.end
  %retval.0 = phi %union.tree_node* [ %call6, %while.end ], [ null, %entry ], !dbg !7945
  ret %union.tree_node* %retval.0, !dbg !7966
}

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) local_unnamed_addr #2

declare dso_local %struct.cgraph_node* @cgraph_node(%union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gss_for_code(i32 %code) unnamed_addr #0 !dbg !7967 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !7971, metadata !DIExpression()), !dbg !7972
  %idxprom = zext i32 %code to i64, !dbg !7973
  %arrayidx = getelementptr inbounds [35 x i32], [35 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7973
  %0 = load i32, i32* %arrayidx, align 4, !dbg !7973
  ret i32 %0, !dbg !7974
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_cond_set_code(%union.gimple_statement_d* %gs, i32 %code) unnamed_addr #0 !dbg !7975 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7979, metadata !DIExpression()), !dbg !7981
  call void @llvm.dbg.value(metadata i32 %code, metadata !7980, metadata !DIExpression()), !dbg !7981
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !7982
  %bf.load = load i32, i32* %0, align 8, !dbg !7983
  %bf.shl = shl i32 %code, 16, !dbg !7983
  %bf.clear = and i32 %bf.load, 65535, !dbg !7983
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !7983
  store i32 %bf.set, i32* %0, align 8, !dbg !7983
  ret void, !dbg !7984
}

declare dso_local i64 @strlen(i8*) local_unnamed_addr #2

declare dso_local i8* @ggc_alloc_string(i8*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7985 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7989, metadata !DIExpression()), !dbg !7990
  %bb = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 4, !dbg !7991
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7991
  ret %struct.basic_block_def* %0, !dbg !7992
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7993 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7995, metadata !DIExpression()), !dbg !7997
  %call = tail call fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #8, !dbg !7998
  %idxprom = zext i32 %call to i64, !dbg !7999
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* bitcast (<{ i64, i64, i64, i64, i64, [18 x i64] }>* @gimple_ops_offset_ to [0 x i64]*), i64 0, i64 %idxprom, !dbg !7999
  %0 = load i64, i64* %arrayidx, align 8, !dbg !7999
  call void @llvm.dbg.value(metadata i64 %0, metadata !7996, metadata !DIExpression()), !dbg !7997
  %cmp = icmp eq i64 %0, 0, !dbg !8000
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !8000

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !8000
  br label %cond.end, !dbg !8000

cond.end:                                         ; preds = %entry, %cond.true
  %1 = bitcast %union.gimple_statement_d* %gs to i8*, !dbg !8001
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !8002
  %2 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !8003
  ret %union.tree_node** %2, !dbg !8004
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_asm_nlabels(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !8005 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8007, metadata !DIExpression()), !dbg !8008
  %gimple_asm = bitcast %union.gimple_statement_d* %gs to %struct.gimple_statement_asm*, !dbg !8009
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 5, !dbg !8010
  %0 = load i8, i8* %nl, align 1, !dbg !8010
  %conv = zext i8 %0 to i32, !dbg !8011
  ret i32 %conv, !dbg !8012
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_asm_label_op(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !8013 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8015, metadata !DIExpression()), !dbg !8017
  call void @llvm.dbg.value(metadata i32 %index, metadata !8016, metadata !DIExpression()), !dbg !8017
  %gimple_asm = bitcast %union.gimple_statement_d* %gs to %struct.gimple_statement_asm*, !dbg !8018
  %nl = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 5, !dbg !8018
  %0 = load i8, i8* %nl, align 1, !dbg !8018
  %conv = zext i8 %0 to i32, !dbg !8018
  %cmp = icmp ult i32 %conv, %index, !dbg !8018
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !8018

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 2710, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !8018
  br label %cond.end, !dbg !8018

cond.end:                                         ; preds = %entry, %cond.true
  %ni = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 0, i32 0, i32 3, !dbg !8019
  %1 = bitcast %union.tree_node*** %ni to i8*, !dbg !8019
  %2 = load i8, i8* %1, align 8, !dbg !8019
  %conv3 = zext i8 %2 to i32, !dbg !8020
  %add = add i32 %conv3, %index, !dbg !8021
  %nc = getelementptr inbounds %struct.gimple_statement_asm, %struct.gimple_statement_asm* %gimple_asm, i64 0, i32 4, !dbg !8022
  %3 = load i8, i8* %nc, align 2, !dbg !8022
  %conv5 = zext i8 %3 to i32, !dbg !8023
  %add6 = add i32 %add, %conv5, !dbg !8024
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %add6) #8, !dbg !8025
  ret %union.tree_node* %call, !dbg !8026
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !8027 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !8029, metadata !DIExpression()), !dbg !8031
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !8032
  call void @llvm.dbg.value(metadata i32 %call, metadata !8030, metadata !DIExpression()), !dbg !8031
  switch i32 %call, label %if.else4 [
    i32 6, label %if.then
    i32 1, label %if.then
    i32 8, label %cleanup
  ], !dbg !8033

if.then:                                          ; preds = %entry, %entry
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !8035
  %bf.load = load i32, i32* %0, align 8, !dbg !8035
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8035
  br label %cleanup, !dbg !8036

if.else4:                                         ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !8037
  br label %cleanup, !dbg !8039

cleanup:                                          ; preds = %entry, %if.else4, %if.then
  %retval.0 = phi i32 [ %bf.lshr, %if.then ], [ 0, %if.else4 ], [ 59, %entry ], !dbg !8031
  ret i32 %retval.0, !dbg !8040
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_basic_block_gc_safe_grow(%struct.VEC_basic_block_gc** %vec_, i32 %size_) unnamed_addr #0 !dbg !8041 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_basic_block_gc** %vec_, metadata !8043, metadata !DIExpression()), !dbg !8045
  call void @llvm.dbg.value(metadata i32 %size_, metadata !8044, metadata !DIExpression()), !dbg !8045
  %cmp = icmp sgt i32 %size_, -1, !dbg !8046
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8046

land.rhs:                                         ; preds = %entry
  %0 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %vec_, align 8, !dbg !8046
  %tobool = icmp eq %struct.VEC_basic_block_gc* %0, null, !dbg !8046
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8046

cond.true:                                        ; preds = %land.rhs
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %0, i64 0, i32 0, !dbg !8046
  br label %cond.end, !dbg !8046

cond.end:                                         ; preds = %land.rhs, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %land.rhs ], !dbg !8046
  %call = tail call fastcc i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond) #8, !dbg !8046
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %1 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %vec_, align 8, !dbg !8046
  %tobool2 = icmp eq %struct.VEC_basic_block_gc* %1, null, !dbg !8046
  br i1 %tobool2, label %cond.end11, label %cond.true3, !dbg !8046

cond.true3:                                       ; preds = %land.end
  %num = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %1, i64 0, i32 0, i32 0, !dbg !8046
  %2 = load i32, i32* %num, align 8, !dbg !8046
  br label %cond.end11, !dbg !8046

cond.end11:                                       ; preds = %land.end, %cond.true3
  %cond12 = phi i32 [ %2, %cond.true3 ], [ 0, %land.end ], !dbg !8046
  %sub = sub nsw i32 %size_, %cond12, !dbg !8046
  %call13 = tail call fastcc i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %vec_, i32 %sub) #8, !dbg !8046
  %3 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %vec_, align 8, !dbg !8046
  %num20 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %3, i64 0, i32 0, i32 0, !dbg !8046
  store i32 %size_, i32* %num20, align 8, !dbg !8046
  ret void, !dbg !8046
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def** @VEC_basic_block_base_address(%struct.VEC_basic_block_base* %vec_) unnamed_addr #0 !dbg !8047 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_basic_block_base* %vec_, metadata !8052, metadata !DIExpression()), !dbg !8053
  %tobool = icmp eq %struct.VEC_basic_block_base* %vec_, null, !dbg !8054
  %arraydecay = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %vec_, i64 0, i32 2, i64 0, !dbg !8054
  %cond = select i1 %tobool, %struct.basic_block_def** null, %struct.basic_block_def** %arraydecay, !dbg !8054
  ret %struct.basic_block_def** %cond, !dbg !8054
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_basic_block_gc_reserve_exact(%struct.VEC_basic_block_gc** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8055 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_basic_block_gc** %vec_, metadata !8059, metadata !DIExpression()), !dbg !8062
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !8060, metadata !DIExpression()), !dbg !8062
  %0 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %vec_, align 8, !dbg !8063
  %tobool = icmp eq %struct.VEC_basic_block_gc* %0, null, !dbg !8063
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8063

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %0, i64 0, i32 0, !dbg !8063
  br label %cond.end, !dbg !8063

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %entry ], !dbg !8063
  %call = tail call fastcc i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %alloc_) #8, !dbg !8063
  %tobool1 = icmp eq i32 %call, 0, !dbg !8063
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !8063
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !8061, metadata !DIExpression()), !dbg !8062
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8063

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_basic_block_gc** %vec_ to i8**, !dbg !8064
  %2 = load i8*, i8** %1, align 8, !dbg !8064
  %call3 = tail call i8* @vec_gc_p_reserve_exact(i8* %2, i32 %alloc_) #7, !dbg !8064
  store i8* %call3, i8** %1, align 8, !dbg !8064
  br label %if.end, !dbg !8064

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !8063
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8066 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_basic_block_base* %vec_, metadata !8070, metadata !DIExpression()), !dbg !8072
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !8071, metadata !DIExpression()), !dbg !8072
  %tobool = icmp eq %struct.VEC_basic_block_base* %vec_, null, !dbg !8073
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8073

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %vec_, i64 0, i32 1, !dbg !8073
  %0 = load i32, i32* %alloc, align 4, !dbg !8073
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %vec_, i64 0, i32 0, !dbg !8073
  %1 = load i32, i32* %num, align 8, !dbg !8073
  %sub = sub i32 %0, %1, !dbg !8073
  %cmp1 = icmp uge i32 %sub, %alloc_, !dbg !8073
  br label %cond.end, !dbg !8073

cond.false:                                       ; preds = %entry
  %tobool3 = icmp eq i32 %alloc_, 0, !dbg !8073
  br label %cond.end, !dbg !8073

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i1 [ %cmp1, %cond.true ], [ %tobool3, %cond.false ]
  %cond = zext i1 %cond.in to i32, !dbg !8073
  ret i32 %cond, !dbg !8073
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_gc_reserve(%struct.VEC_gimple_gc** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8074 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_gc** %vec_, metadata !8078, metadata !DIExpression()), !dbg !8081
  call void @llvm.dbg.value(metadata i32 1, metadata !8079, metadata !DIExpression()), !dbg !8081
  %0 = load %struct.VEC_gimple_gc*, %struct.VEC_gimple_gc** %vec_, align 8, !dbg !8082
  %tobool = icmp eq %struct.VEC_gimple_gc* %0, null, !dbg !8082
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8082

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_gimple_gc, %struct.VEC_gimple_gc* %0, i64 0, i32 0, !dbg !8082
  br label %cond.end, !dbg !8082

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %entry ], !dbg !8082
  %call = tail call fastcc i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 1) #8, !dbg !8082
  %tobool1 = icmp eq i32 %call, 0, !dbg !8082
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !8082
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !8080, metadata !DIExpression()), !dbg !8081
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8082

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_gimple_gc** %vec_ to i8**, !dbg !8083
  %2 = load i8*, i8** %1, align 8, !dbg !8083
  %call3 = tail call i8* @vec_gc_p_reserve(i8* %2, i32 1) #7, !dbg !8083
  store i8* %call3, i8** %1, align 8, !dbg !8083
  br label %if.end, !dbg !8083

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !8082
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) unnamed_addr #0 !dbg !8085 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !8090, metadata !DIExpression()), !dbg !8093
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %obj_, metadata !8091, metadata !DIExpression()), !dbg !8093
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !8094
  %0 = load i32, i32* %num1, align 8, !dbg !8094
  %inc = add i32 %0, 1, !dbg !8094
  store i32 %inc, i32* %num1, align 8, !dbg !8094
  %idxprom = zext i32 %0 to i64, !dbg !8094
  %arrayidx = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8094
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %arrayidx, metadata !8092, metadata !DIExpression()), !dbg !8093
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %arrayidx, align 8, !dbg !8094
  ret %union.gimple_statement_d** %arrayidx, !dbg !8094
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8095 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !8099, metadata !DIExpression()), !dbg !8101
  call void @llvm.dbg.value(metadata i32 1, metadata !8100, metadata !DIExpression()), !dbg !8101
  %tobool = icmp eq %struct.VEC_gimple_base* %vec_, null, !dbg !8102
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8102

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 1, !dbg !8102
  %0 = load i32, i32* %alloc, align 4, !dbg !8102
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !8102
  %1 = load i32, i32* %num, align 8, !dbg !8102
  %cmp1 = icmp ne i32 %0, %1, !dbg !8102
  %phitmp = zext i1 %cmp1 to i32, !dbg !8102
  br label %cond.end, !dbg !8102

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8102

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !8102
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_asm_volatile_p(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !8103 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8105, metadata !DIExpression()), !dbg !8106
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 0, !dbg !8107
  %bf.load = load i32, i32* %0, align 8, !dbg !8107
  %and = lshr i32 %bf.load, 17, !dbg !8108
  %1 = trunc i32 %and to i8, !dbg !8108
  %2 = and i8 %1, 1, !dbg !8108
  ret i8 %2, !dbg !8109
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_expr_type(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !8110 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !8112, metadata !DIExpression()), !dbg !8117
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !8118
  call void @llvm.dbg.value(metadata i32 %call, metadata !8113, metadata !DIExpression()), !dbg !8117
  switch i32 %call, label %if.else14 [
    i32 8, label %if.then3
    i32 6, label %if.else
    i32 1, label %if.then13
  ], !dbg !8119

if.then3:                                         ; preds = %entry
  %call4 = tail call fastcc %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %stmt) #8, !dbg !8120
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !8114, metadata !DIExpression()), !dbg !8122
  br label %cleanup, !dbg !8123

if.else:                                          ; preds = %entry
  %call5 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #8, !dbg !8124
  %cond = icmp eq i32 %call5, 66, !dbg !8125
  br i1 %cond, label %sw.bb, label %sw.default, !dbg !8125

sw.bb:                                            ; preds = %if.else
  %call6 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #8, !dbg !8126
  %type7 = getelementptr inbounds %union.tree_node, %union.tree_node* %call6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8126
  %0 = load %union.tree_node*, %union.tree_node** %type7, align 8, !dbg !8126
  call void @llvm.dbg.value(metadata %union.tree_node* %0, metadata !8114, metadata !DIExpression()), !dbg !8122
  br label %cleanup, !dbg !8128

sw.default:                                       ; preds = %if.else
  %call8 = tail call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !8129
  %type10 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8129
  %1 = load %union.tree_node*, %union.tree_node** %type10, align 8, !dbg !8129
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !8114, metadata !DIExpression()), !dbg !8122
  br label %cleanup, !dbg !8130

if.then13:                                        ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 47), align 8, !dbg !8131
  br label %cleanup, !dbg !8133

if.else14:                                        ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !8134
  br label %cleanup, !dbg !8135

cleanup:                                          ; preds = %if.then3, %sw.default, %sw.bb, %if.else14, %if.then13
  %retval.0 = phi %union.tree_node* [ %2, %if.then13 ], [ %3, %if.else14 ], [ %call4, %if.then3 ], [ %1, %sw.default ], [ %0, %sw.bb ], !dbg !8136
  ret %union.tree_node* %retval.0, !dbg !8137
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !8138 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8140, metadata !DIExpression()), !dbg !8141
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #8, !dbg !8142
  %cmp = icmp ugt i32 %call, 2, !dbg !8144
  br i1 %cmp, label %if.then, label %return, !dbg !8145

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 2) #8, !dbg !8146
  br label %return, !dbg !8147

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %call1, %if.then ], [ null, %entry ], !dbg !8148
  ret %union.tree_node* %retval.0, !dbg !8149
}

declare dso_local zeroext i8 @operation_could_trap_p(i32, i8 zeroext, i8 zeroext, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_call_return_type(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !8150 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8152, metadata !DIExpression()), !dbg !8155
  %call = tail call fastcc %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #8, !dbg !8156
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !8153, metadata !DIExpression()), !dbg !8155
  %type1 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8157
  %0 = bitcast %union.tree_node** %type1 to %struct.tree_common**, !dbg !8157
  %1 = load %struct.tree_common*, %struct.tree_common** %0, align 8, !dbg !8157
  %type3 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %1, i64 0, i32 2, !dbg !8158
  %2 = bitcast %union.tree_node** %type3 to %struct.tree_common**, !dbg !8158
  %3 = load %struct.tree_common*, %struct.tree_common** %2, align 8, !dbg !8158
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %3, i64 0, i32 2, !dbg !8159
  %4 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !8159
  ret %union.tree_node* %4, !dbg !8160
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) local_unnamed_addr #2

declare dso_local void @free(i8*) #2

declare dso_local %struct.pointer_map_t* @pointer_map_create() local_unnamed_addr #2

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) local_unnamed_addr #2

declare dso_local i32 @iterative_hash_hashval_t(i32, i32) local_unnamed_addr #2

declare dso_local i32 @_obstack_begin(%struct.obstack*, i32, i32, i8* (i64)*, void (i8*)*) local_unnamed_addr #2

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: nounwind uwtable
define internal fastcc i32 @iterative_hash_gimple_type(%union.tree_node* %type, i32 %val, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) unnamed_addr #5 !dbg !8161 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %type, metadata !8166, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata i32 %val, metadata !8167, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %sccstack, metadata !8168, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata %struct.pointer_map_t* %sccstate, metadata !8169, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata %struct.obstack* %sccstate_obstack, metadata !8170, metadata !DIExpression()), !dbg !8187
  %temp = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 5, !dbg !8188
  store i64 16, i64* %temp, align 8, !dbg !8188
  %chunk_limit = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 4, !dbg !8188
  %0 = bitcast i8** %chunk_limit to i64*, !dbg !8188
  %1 = load i64, i64* %0, align 8, !dbg !8188
  %next_free = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 3, !dbg !8188
  %2 = bitcast i8** %next_free to i64*, !dbg !8188
  %3 = load i64, i64* %2, align 8, !dbg !8188
  %sub.ptr.sub = sub i64 %1, %3, !dbg !8188
  %cmp = icmp slt i64 %sub.ptr.sub, 16, !dbg !8188
  %4 = inttoptr i64 %3 to i8*, !dbg !8188
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !8188

cond.true:                                        ; preds = %entry
  tail call void @_obstack_newchunk(%struct.obstack* %sccstate_obstack, i32 16) #7, !dbg !8188
  %.pre = load i64, i64* %temp, align 8, !dbg !8188
  %.pre26 = load i8*, i8** %next_free, align 8, !dbg !8188
  br label %cond.end, !dbg !8188

cond.end:                                         ; preds = %entry, %cond.true
  %5 = phi i8* [ %4, %entry ], [ %.pre26, %cond.true ], !dbg !8188
  %6 = phi i64 [ 16, %entry ], [ %.pre, %cond.true ], !dbg !8188
  %add.ptr = getelementptr inbounds i8, i8* %5, i64 %6, !dbg !8188
  store i8* %add.ptr, i8** %next_free, align 8, !dbg !8188
  %object_base = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 2, !dbg !8188
  %7 = load i8*, i8** %object_base, align 8, !dbg !8188
  %cmp6 = icmp eq i8* %add.ptr, %7, !dbg !8188
  %8 = ptrtoint i8* %7 to i64, !dbg !8188
  %9 = ptrtoint i8* %add.ptr to i64, !dbg !8188
  br i1 %cmp6, label %cond.true8, label %cond.end10, !dbg !8188

cond.true8:                                       ; preds = %cond.end
  %maybe_empty_object = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 10, !dbg !8188
  %bf.load = load i8, i8* %maybe_empty_object, align 8, !dbg !8188
  %bf.set = or i8 %bf.load, 2, !dbg !8188
  store i8 %bf.set, i8* %maybe_empty_object, align 8, !dbg !8188
  br label %cond.end10, !dbg !8188

cond.end10:                                       ; preds = %cond.end, %cond.true8
  %10 = bitcast i8** %object_base to i64*, !dbg !8188
  store i64 %8, i64* %temp, align 8, !dbg !8188
  %alignment_mask = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 6, !dbg !8188
  %11 = load i32, i32* %alignment_mask, align 8, !dbg !8188
  %conv19 = sext i32 %11 to i64, !dbg !8188
  %add = add nsw i64 %9, %conv19, !dbg !8188
  %neg = xor i32 %11, -1, !dbg !8188
  %conv21 = sext i32 %neg to i64, !dbg !8188
  %and = and i64 %add, %conv21, !dbg !8188
  %12 = inttoptr i64 %and to i8*, !dbg !8188
  store i8* %12, i8** %next_free, align 8, !dbg !8188
  %chunk = getelementptr inbounds %struct.obstack, %struct.obstack* %sccstate_obstack, i64 0, i32 1, !dbg !8188
  %13 = bitcast %struct._obstack_chunk** %chunk to i64*, !dbg !8188
  %14 = load i64, i64* %13, align 8, !dbg !8188
  %sub.ptr.sub26 = sub i64 %and, %14, !dbg !8188
  %15 = load i64, i64* %0, align 8, !dbg !8188
  %sub.ptr.sub31 = sub i64 %15, %14, !dbg !8188
  %cmp32 = icmp sgt i64 %sub.ptr.sub26, %sub.ptr.sub31, !dbg !8188
  %16 = bitcast i8* %7 to %struct.sccs*, !dbg !8188
  br i1 %cmp32, label %cond.true34, label %cond.end38, !dbg !8188

cond.true34:                                      ; preds = %cond.end10
  store i64 %15, i64* %2, align 8, !dbg !8188
  br label %cond.end38, !dbg !8188

cond.end38:                                       ; preds = %cond.end10, %cond.true34
  %17 = phi i64 [ %and, %cond.end10 ], [ %15, %cond.true34 ], !dbg !8188
  store i64 %17, i64* %10, align 8, !dbg !8188
  call void @llvm.dbg.value(metadata %struct.sccs* %16, metadata !8173, metadata !DIExpression()), !dbg !8187
  %18 = bitcast %union.tree_node* %type to i8*, !dbg !8189
  %call = tail call i8** @pointer_map_insert(%struct.pointer_map_t* %sccstate, i8* %18) #7, !dbg !8190
  store i8* %7, i8** %call, align 8, !dbg !8191
  %call43 = tail call fastcc %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %sccstack, %union.tree_node* %type) #8, !dbg !8192
  %19 = load i32, i32* @next_dfs_num, align 4, !dbg !8193
  %inc = add i32 %19, 1, !dbg !8193
  store i32 %inc, i32* @next_dfs_num, align 4, !dbg !8193
  %dfsnum = bitcast i8* %7 to i32*, !dbg !8194
  store i32 %19, i32* %dfsnum, align 4, !dbg !8195
  %low = getelementptr inbounds i8, i8* %7, i64 4, !dbg !8196
  %20 = bitcast i8* %low to i32*, !dbg !8196
  store i32 %19, i32* %20, align 4, !dbg !8197
  %21 = getelementptr inbounds i8, i8* %7, i64 8, !dbg !8198
  store i8 1, i8* %21, align 4, !dbg !8199
  %22 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8200
  %bf.load45 = load i64, i64* %22, align 8, !dbg !8200
  %23 = trunc i64 %bf.load45 to i32, !dbg !8200
  %bf.cast = and i32 %23, 65535, !dbg !8200
  %call47 = tail call i32 @iterative_hash_hashval_t(i32 %bf.cast, i32 0) #7, !dbg !8201
  call void @llvm.dbg.value(metadata i32 %call47, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load49 = load i64, i64* %22, align 8, !dbg !8202
  %bf.lshr = lshr i64 %bf.load49, 20, !dbg !8202
  %24 = trunc i64 %bf.lshr to i32, !dbg !8202
  %bf.cast51 = and i32 %24, 1, !dbg !8202
  %25 = lshr i64 %bf.load49, 18, !dbg !8202
  %26 = trunc i64 %25 to i32, !dbg !8202
  %mul57 = and i32 %26, 2, !dbg !8202
  %or = or i32 %bf.cast51, %mul57, !dbg !8202
  %type58 = bitcast %union.tree_node* %type to %struct.tree_type*, !dbg !8202
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type58, i64 0, i32 6, !dbg !8202
  %bf.load59 = load i32, i32* %restrict_flag, align 4, !dbg !8202
  %27 = lshr i32 %bf.load59, 11, !dbg !8202
  %mul62 = and i32 %27, 4, !dbg !8202
  %or63 = or i32 %or, %mul62, !dbg !8202
  %28 = lshr i64 %bf.load49, 48, !dbg !8202
  %29 = trunc i64 %28 to i32, !dbg !8202
  %shl = and i32 %29, 65280, !dbg !8202
  %or69 = or i32 %or63, %shl, !dbg !8202
  %call70 = tail call i32 @iterative_hash_hashval_t(i32 %or69, i32 %call47) #7, !dbg !8203
  call void @llvm.dbg.value(metadata i32 %call70, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load72 = load i64, i64* %22, align 8, !dbg !8204
  %bf.lshr73 = lshr i64 %bf.load72, 18, !dbg !8204
  %30 = trunc i64 %bf.lshr73 to i32, !dbg !8204
  %bf.cast75 = and i32 %30, 1, !dbg !8204
  %call76 = tail call i32 @iterative_hash_hashval_t(i32 %bf.cast75, i32 %call70) #7, !dbg !8205
  call void @llvm.dbg.value(metadata i32 %call76, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load78 = load i64, i64* %22, align 8, !dbg !8206
  %bf.cast804 = and i64 %bf.load78, 65535, !dbg !8206
  %cmp81 = icmp eq i64 %bf.cast804, 6, !dbg !8206
  br i1 %cmp81, label %if.then, label %lor.lhs.false, !dbg !8206

lor.lhs.false:                                    ; preds = %cond.end38
  %cmp87 = icmp eq i64 %bf.cast804, 7, !dbg !8206
  br i1 %cmp87, label %if.then, label %lor.lhs.false89, !dbg !8206

lor.lhs.false89:                                  ; preds = %lor.lhs.false
  %cmp94 = icmp eq i64 %bf.cast804, 8, !dbg !8206
  br i1 %cmp94, label %if.then, label %lor.lhs.false96, !dbg !8208

lor.lhs.false96:                                  ; preds = %lor.lhs.false89
  %cmp101 = icmp eq i64 %bf.cast804, 9, !dbg !8209
  br i1 %cmp101, label %if.then, label %lor.lhs.false103, !dbg !8210

lor.lhs.false103:                                 ; preds = %lor.lhs.false96
  %cmp108 = icmp eq i64 %bf.cast804, 11, !dbg !8211
  br i1 %cmp108, label %if.then, label %if.end, !dbg !8212

if.then:                                          ; preds = %lor.lhs.false103, %lor.lhs.false96, %lor.lhs.false89, %lor.lhs.false, %cond.end38
  %bf.load111 = load i32, i32* %restrict_flag, align 4, !dbg !8213
  %bf.clear112 = and i32 %bf.load111, 1023, !dbg !8213
  %call113 = tail call i32 @iterative_hash_hashval_t(i32 %bf.clear112, i32 %call76) #7, !dbg !8215
  call void @llvm.dbg.value(metadata i32 %call113, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load115 = load i64, i64* %22, align 8, !dbg !8216
  %bf.cast11725 = and i64 %bf.load115, 65535, !dbg !8216
  %cmp118 = icmp eq i64 %bf.cast11725, 14, !dbg !8216
  br i1 %cmp118, label %cond.true120, label %cond.false122, !dbg !8216

cond.true120:                                     ; preds = %if.then
  %call121 = tail call i32 @vector_type_mode(%union.tree_node* %type) #7, !dbg !8216
  br label %cond.end127, !dbg !8216

cond.false122:                                    ; preds = %if.then
  %bf.load124 = load i32, i32* %restrict_flag, align 4, !dbg !8216
  %bf.lshr125 = lshr i32 %bf.load124, 16, !dbg !8216
  %bf.clear126 = and i32 %bf.lshr125, 255, !dbg !8216
  br label %cond.end127, !dbg !8216

cond.end127:                                      ; preds = %cond.false122, %cond.true120
  %cond128 = phi i32 [ %call121, %cond.true120 ], [ %bf.clear126, %cond.false122 ], !dbg !8216
  %call129 = tail call i32 @iterative_hash_hashval_t(i32 %cond128, i32 %call113) #7, !dbg !8217
  call void @llvm.dbg.value(metadata i32 %call129, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load131 = load i64, i64* %22, align 8, !dbg !8218
  %bf.lshr132 = lshr i64 %bf.load131, 21, !dbg !8218
  %31 = trunc i64 %bf.lshr132 to i32, !dbg !8218
  %bf.cast134 = and i32 %31, 1, !dbg !8218
  %call135 = tail call i32 @iterative_hash_hashval_t(i32 %bf.cast134, i32 %call129) #7, !dbg !8219
  call void @llvm.dbg.value(metadata i32 %call135, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load137.pre = load i64, i64* %22, align 8, !dbg !8220
  %.pre33 = and i64 %bf.load137.pre, 65535, !dbg !8220
  br label %if.end, !dbg !8222

if.end:                                           ; preds = %cond.end127, %lor.lhs.false103
  %bf.cast1399.pre-phi = phi i64 [ %.pre33, %cond.end127 ], [ %bf.cast804, %lor.lhs.false103 ], !dbg !8220
  %v.0 = phi i32 [ %call135, %cond.end127 ], [ %call76, %lor.lhs.false103 ], !dbg !8187
  call void @llvm.dbg.value(metadata i32 %v.0, metadata !8171, metadata !DIExpression()), !dbg !8187
  %cmp140 = icmp eq i64 %bf.cast1399.pre-phi, 10, !dbg !8220
  br i1 %cmp140, label %if.then149, label %lor.lhs.false142, !dbg !8220

lor.lhs.false142:                                 ; preds = %if.end
  %cmp147 = icmp eq i64 %bf.cast1399.pre-phi, 12, !dbg !8220
  br i1 %cmp147, label %if.then149, label %if.end192, !dbg !8223

if.then149:                                       ; preds = %lor.lhs.false142, %if.end
  %type150 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8224
  %32 = bitcast %union.tree_node** %type150 to i64**, !dbg !8224
  %33 = load i64*, i64** %32, align 8, !dbg !8224
  %bf.load152 = load i64, i64* %33, align 8, !dbg !8224
  %bf.cast15422 = and i64 %bf.load152, 65535, !dbg !8224
  %cmp155 = icmp eq i64 %bf.cast15422, 16, !dbg !8224
  %34 = bitcast i64* %33 to %union.tree_node*, !dbg !8224
  br i1 %cmp155, label %if.then175, label %lor.lhs.false157, !dbg !8224

lor.lhs.false157:                                 ; preds = %if.then149
  %cmp164 = icmp eq i64 %bf.cast15422, 17, !dbg !8224
  br i1 %cmp164, label %if.then175, label %lor.lhs.false166, !dbg !8224

lor.lhs.false166:                                 ; preds = %lor.lhs.false157
  %cmp173 = icmp eq i64 %bf.cast15422, 18, !dbg !8224
  br i1 %cmp173, label %if.then175, label %if.else, !dbg !8227

if.then175:                                       ; preds = %lor.lhs.false166, %lor.lhs.false157, %if.then149
  %35 = trunc i64 %bf.load152 to i32, !dbg !8228
  %bf.cast181 = and i32 %35, 65535, !dbg !8228
  %call182 = tail call i32 @iterative_hash_hashval_t(i32 %bf.cast181, i32 %v.0) #7, !dbg !8230
  call void @llvm.dbg.value(metadata i32 %call182, metadata !8171, metadata !DIExpression()), !dbg !8187
  %36 = bitcast %union.tree_node** %type150 to %struct.tree_type**, !dbg !8231
  %37 = load %struct.tree_type*, %struct.tree_type** %36, align 8, !dbg !8231
  %main_variant = getelementptr inbounds %struct.tree_type, %struct.tree_type* %37, i64 0, i32 16, !dbg !8231
  %38 = bitcast %union.tree_node** %main_variant to %struct.tree_type**, !dbg !8231
  %39 = load %struct.tree_type*, %struct.tree_type** %38, align 8, !dbg !8231
  %name = getelementptr inbounds %struct.tree_type, %struct.tree_type* %39, i64 0, i32 12, !dbg !8231
  %40 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8231
  %call187 = tail call fastcc i32 @iterative_hash_name(%union.tree_node* %40, i32 %call182) #8, !dbg !8232
  call void @llvm.dbg.value(metadata i32 %call187, metadata !8171, metadata !DIExpression()), !dbg !8187
  br label %if.end192, !dbg !8233

if.else:                                          ; preds = %lor.lhs.false166
  %call190 = tail call fastcc i32 @visit(%union.tree_node* %34, %struct.sccs* %16, i32 %v.0, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #8, !dbg !8234
  call void @llvm.dbg.value(metadata i32 %call190, metadata !8171, metadata !DIExpression()), !dbg !8187
  br label %if.end192

if.end192:                                        ; preds = %if.then175, %if.else, %lor.lhs.false142
  %v.2 = phi i32 [ %v.0, %lor.lhs.false142 ], [ %call187, %if.then175 ], [ %call190, %if.else ], !dbg !8187
  call void @llvm.dbg.value(metadata i32 %v.2, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load194 = load i64, i64* %22, align 8, !dbg !8235
  %bf.cast19611 = and i64 %bf.load194, 65535, !dbg !8237
  %cmp197 = icmp eq i64 %bf.cast19611, 8, !dbg !8237
  br i1 %cmp197, label %if.then199, label %if.end221, !dbg !8238

if.then199:                                       ; preds = %if.end192
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !8239
  %41 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !8239
  %42 = load %union.tree_node*, %union.tree_node** %41, align 8, !dbg !8239
  %43 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8242
  %cmp201 = icmp eq %union.tree_node* %42, %43, !dbg !8243
  br i1 %cmp201, label %if.end207, label %if.then203, !dbg !8244

if.then203:                                       ; preds = %if.then199
  %call206 = tail call i32 @iterative_hash_expr(%union.tree_node* %42, i32 %v.2) #7, !dbg !8245
  call void @llvm.dbg.value(metadata i32 %call206, metadata !8171, metadata !DIExpression()), !dbg !8187
  %.pre28 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !8246
  br label %if.end207, !dbg !8248

if.end207:                                        ; preds = %if.then199, %if.then203
  %44 = phi %union.tree_node* [ %.pre28, %if.then203 ], [ %42, %if.then199 ], !dbg !8246
  %v.3 = phi i32 [ %call206, %if.then203 ], [ %v.2, %if.then199 ], !dbg !8187
  call void @llvm.dbg.value(metadata i32 %v.3, metadata !8171, metadata !DIExpression()), !dbg !8187
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8249
  %45 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !8249
  %46 = load %union.tree_node*, %union.tree_node** %45, align 8, !dbg !8249
  %cmp209 = icmp eq %union.tree_node* %46, %44, !dbg !8250
  br i1 %cmp209, label %if.end215, label %if.then211, !dbg !8251

if.then211:                                       ; preds = %if.end207
  %call214 = tail call i32 @iterative_hash_expr(%union.tree_node* %46, i32 %v.3) #7, !dbg !8252
  call void @llvm.dbg.value(metadata i32 %call214, metadata !8171, metadata !DIExpression()), !dbg !8187
  br label %if.end215, !dbg !8253

if.end215:                                        ; preds = %if.end207, %if.then211
  %v.4 = phi i32 [ %call214, %if.then211 ], [ %v.3, %if.end207 ], !dbg !8254
  call void @llvm.dbg.value(metadata i32 %v.4, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load217 = load i32, i32* %restrict_flag, align 4, !dbg !8255
  %bf.lshr218 = lshr i32 %bf.load217, 24, !dbg !8255
  %bf.clear219 = and i32 %bf.lshr218, 1, !dbg !8255
  %call220 = tail call i32 @iterative_hash_hashval_t(i32 %bf.clear219, i32 %v.4) #7, !dbg !8256
  call void @llvm.dbg.value(metadata i32 %call220, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load223.pre = load i64, i64* %22, align 8, !dbg !8257
  br label %if.end221, !dbg !8259

if.end221:                                        ; preds = %if.end215, %if.end192
  %bf.load223 = phi i64 [ %bf.load223.pre, %if.end215 ], [ %bf.load194, %if.end192 ], !dbg !8257
  %v.5 = phi i32 [ %call220, %if.end215 ], [ %v.2, %if.end192 ], !dbg !8187
  call void @llvm.dbg.value(metadata i32 %v.5, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.cast22512 = and i64 %bf.load223, 65535, !dbg !8260
  %cmp226 = icmp eq i64 %bf.cast22512, 15, !dbg !8260
  br i1 %cmp226, label %land.lhs.true, label %if.end239, !dbg !8261

land.lhs.true:                                    ; preds = %if.end221
  %values = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8262
  %47 = bitcast i32* %values to %union.tree_node**, !dbg !8262
  %48 = load %union.tree_node*, %union.tree_node** %47, align 8, !dbg !8262
  %tobool = icmp eq %union.tree_node* %48, null, !dbg !8262
  br i1 %tobool, label %if.end239, label %if.then229, !dbg !8263

if.then229:                                       ; preds = %land.lhs.true
  %bf.load232 = load i32, i32* %restrict_flag, align 4, !dbg !8264
  %bf.lshr233 = lshr i32 %bf.load232, 24, !dbg !8264
  %bf.clear234 = and i32 %bf.lshr233, 1, !dbg !8264
  %call235 = tail call i32 @iterative_hash_hashval_t(i32 %bf.clear234, i32 %v.5) #7, !dbg !8266
  call void @llvm.dbg.value(metadata i32 %call235, metadata !8171, metadata !DIExpression()), !dbg !8187
  %49 = load %union.tree_node*, %union.tree_node** %47, align 8, !dbg !8267
  %call238 = tail call fastcc i32 @visit(%union.tree_node* %49, %struct.sccs* %16, i32 %call235, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #8, !dbg !8268
  call void @llvm.dbg.value(metadata i32 %call238, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load241.pre = load i64, i64* %22, align 8, !dbg !8269
  %.pre34 = and i64 %bf.load241.pre, 65535, !dbg !8271
  br label %if.end239, !dbg !8272

if.end239:                                        ; preds = %land.lhs.true, %if.then229, %if.end221
  %bf.cast24313.pre-phi = phi i64 [ 15, %land.lhs.true ], [ %.pre34, %if.then229 ], [ %bf.cast22512, %if.end221 ], !dbg !8271
  %bf.load255 = phi i64 [ %bf.load223, %land.lhs.true ], [ %bf.load241.pre, %if.then229 ], [ %bf.load223, %if.end221 ], !dbg !8269
  %v.6 = phi i32 [ %v.5, %land.lhs.true ], [ %call238, %if.then229 ], [ %v.5, %if.end221 ], !dbg !8187
  call void @llvm.dbg.value(metadata i32 %v.6, metadata !8171, metadata !DIExpression()), !dbg !8187
  %cmp244 = icmp eq i64 %bf.cast24313.pre-phi, 15, !dbg !8271
  br i1 %cmp244, label %if.then260, label %lor.lhs.false246, !dbg !8273

lor.lhs.false246:                                 ; preds = %if.end239
  %cmp251 = icmp eq i64 %bf.cast24313.pre-phi, 13, !dbg !8274
  br i1 %cmp251, label %if.then260, label %lor.lhs.false253, !dbg !8275

lor.lhs.false253:                                 ; preds = %lor.lhs.false246
  %cmp258 = icmp eq i64 %bf.cast24313.pre-phi, 14, !dbg !8276
  br i1 %cmp258, label %if.then260, label %if.end264, !dbg !8277

if.then260:                                       ; preds = %lor.lhs.false253, %lor.lhs.false246, %if.end239
  %type262 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8278
  %50 = load %union.tree_node*, %union.tree_node** %type262, align 8, !dbg !8278
  %call263 = tail call fastcc i32 @visit(%union.tree_node* %50, %struct.sccs* %16, i32 %v.6, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #8, !dbg !8279
  call void @llvm.dbg.value(metadata i32 %call263, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load266.pre = load i64, i64* %22, align 8, !dbg !8280
  br label %if.end264, !dbg !8281

if.end264:                                        ; preds = %if.then260, %lor.lhs.false253
  %bf.load280 = phi i64 [ %bf.load266.pre, %if.then260 ], [ %bf.load255, %lor.lhs.false253 ], !dbg !8280
  %v.7 = phi i32 [ %call263, %if.then260 ], [ %v.6, %lor.lhs.false253 ], !dbg !8187
  call void @llvm.dbg.value(metadata i32 %v.7, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.cast26816 = and i64 %bf.load280, 65535, !dbg !8282
  %cmp269 = icmp eq i64 %bf.cast26816, 20, !dbg !8282
  br i1 %cmp269, label %if.then278, label %lor.lhs.false271, !dbg !8283

lor.lhs.false271:                                 ; preds = %if.end264
  %cmp276 = icmp eq i64 %bf.cast26816, 21, !dbg !8284
  br i1 %cmp276, label %if.then278, label %if.end300, !dbg !8285

if.then278:                                       ; preds = %lor.lhs.false271, %if.end264
  %cmp283 = icmp eq i64 %bf.cast26816, 21, !dbg !8286
  br i1 %cmp283, label %if.then285, label %if.end289, !dbg !8288

if.then285:                                       ; preds = %if.then278
  %maxval287 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8289
  %51 = bitcast %struct.rtx_def** %maxval287 to %union.tree_node**, !dbg !8289
  %52 = load %union.tree_node*, %union.tree_node** %51, align 8, !dbg !8289
  %call288 = tail call fastcc i32 @visit(%union.tree_node* %52, %struct.sccs* %16, i32 %v.7, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #8, !dbg !8290
  call void @llvm.dbg.value(metadata i32 %call288, metadata !8171, metadata !DIExpression()), !dbg !8187
  br label %if.end289, !dbg !8291

if.end289:                                        ; preds = %if.then285, %if.then278
  %v.8 = phi i32 [ %call288, %if.then285 ], [ %v.7, %if.then278 ], !dbg !8187
  call void @llvm.dbg.value(metadata i32 %v.8, metadata !8171, metadata !DIExpression()), !dbg !8187
  %type291 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8292
  %53 = load %union.tree_node*, %union.tree_node** %type291, align 8, !dbg !8292
  %call292 = tail call fastcc i32 @visit(%union.tree_node* %53, %struct.sccs* %16, i32 %v.8, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #8, !dbg !8293
  call void @llvm.dbg.value(metadata i32 %call292, metadata !8171, metadata !DIExpression()), !dbg !8187
  %values294 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8294
  %54 = bitcast i32* %values294 to %union.tree_node**, !dbg !8294
  call void @llvm.dbg.value(metadata i32 0, metadata !8174, metadata !DIExpression()), !dbg !8296
  br label %for.cond, !dbg !8297

for.cond:                                         ; preds = %for.body, %if.end289
  %v.9 = phi i32 [ %call292, %if.end289 ], [ %call296, %for.body ], !dbg !8296
  %na.0 = phi i32 [ 0, %if.end289 ], [ %inc297, %for.body ], !dbg !8298
  %p.0.in = phi %union.tree_node** [ %54, %if.end289 ], [ %chain, %for.body ]
  %p.0 = load %union.tree_node*, %union.tree_node** %p.0.in, align 8, !dbg !8298
  call void @llvm.dbg.value(metadata %union.tree_node* %p.0, metadata !8177, metadata !DIExpression()), !dbg !8296
  call void @llvm.dbg.value(metadata i32 %na.0, metadata !8174, metadata !DIExpression()), !dbg !8296
  call void @llvm.dbg.value(metadata i32 %v.9, metadata !8171, metadata !DIExpression()), !dbg !8187
  %tobool295 = icmp eq %union.tree_node* %p.0, null, !dbg !8299
  br i1 %tobool295, label %for.end, label %for.body, !dbg !8299

for.body:                                         ; preds = %for.cond
  %55 = getelementptr inbounds %union.tree_node, %union.tree_node* %p.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8300
  %56 = load %union.tree_node*, %union.tree_node** %55, align 8, !dbg !8300
  %call296 = tail call fastcc i32 @visit(%union.tree_node* %56, %struct.sccs* %16, i32 %v.9, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #8, !dbg !8303
  call void @llvm.dbg.value(metadata i32 %call296, metadata !8171, metadata !DIExpression()), !dbg !8187
  %inc297 = add i32 %na.0, 1, !dbg !8304
  call void @llvm.dbg.value(metadata i32 %inc297, metadata !8174, metadata !DIExpression()), !dbg !8296
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %p.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8305
  br label %for.cond, !dbg !8306, !llvm.loop !8307

for.end:                                          ; preds = %for.cond
  %v.9.lcssa = phi i32 [ %v.9, %for.cond ], !dbg !8296
  %na.0.lcssa = phi i32 [ %na.0, %for.cond ], !dbg !8298
  call void @llvm.dbg.value(metadata i32 %v.9.lcssa, metadata !8171, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata i32 %na.0.lcssa, metadata !8174, metadata !DIExpression()), !dbg !8296
  call void @llvm.dbg.value(metadata i32 %v.9.lcssa, metadata !8171, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata i32 %na.0.lcssa, metadata !8174, metadata !DIExpression()), !dbg !8296
  call void @llvm.dbg.value(metadata i32 %v.9.lcssa, metadata !8171, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata i32 %na.0.lcssa, metadata !8174, metadata !DIExpression()), !dbg !8296
  %call299 = tail call i32 @iterative_hash_hashval_t(i32 %na.0.lcssa, i32 %v.9.lcssa) #7, !dbg !8309
  call void @llvm.dbg.value(metadata i32 %call299, metadata !8171, metadata !DIExpression()), !dbg !8187
  %bf.load302.pre = load i64, i64* %22, align 8, !dbg !8310
  %.pre35 = and i64 %bf.load302.pre, 65535, !dbg !8311
  br label %if.end300, !dbg !8312

if.end300:                                        ; preds = %for.end, %lor.lhs.false271
  %bf.cast30418.pre-phi = phi i64 [ %.pre35, %for.end ], [ %bf.cast26816, %lor.lhs.false271 ], !dbg !8311
  %v.10 = phi i32 [ %call299, %for.end ], [ %v.7, %lor.lhs.false271 ], !dbg !8187
  call void @llvm.dbg.value(metadata i32 %v.10, metadata !8171, metadata !DIExpression()), !dbg !8187
  %cmp305 = icmp eq i64 %bf.cast30418.pre-phi, 16, !dbg !8311
  br i1 %cmp305, label %if.then321, label %lor.lhs.false307, !dbg !8313

lor.lhs.false307:                                 ; preds = %if.end300
  %cmp312 = icmp eq i64 %bf.cast30418.pre-phi, 17, !dbg !8314
  br i1 %cmp312, label %if.then321, label %lor.lhs.false314, !dbg !8315

lor.lhs.false314:                                 ; preds = %lor.lhs.false307
  %cmp319 = icmp eq i64 %bf.cast30418.pre-phi, 18, !dbg !8316
  br i1 %cmp319, label %if.then321, label %if.end343, !dbg !8317

if.then321:                                       ; preds = %lor.lhs.false314, %lor.lhs.false307, %if.end300
  %57 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !8318
  %58 = bitcast %union.tree_node** %57 to %struct.tree_type**, !dbg !8318
  %59 = load %struct.tree_type*, %struct.tree_type** %58, align 8, !dbg !8318
  %name325 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %59, i64 0, i32 12, !dbg !8318
  %60 = load %union.tree_node*, %union.tree_node** %name325, align 8, !dbg !8318
  %call326 = tail call fastcc i32 @iterative_hash_name(%union.tree_node* %60, i32 %v.10) #8, !dbg !8319
  call void @llvm.dbg.value(metadata i32 %call326, metadata !8171, metadata !DIExpression()), !dbg !8187
  %values328 = getelementptr inbounds %union.tree_node, %union.tree_node* %type, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8320
  %61 = bitcast i32* %values328 to %union.tree_node**, !dbg !8320
  call void @llvm.dbg.value(metadata i32 0, metadata !8178, metadata !DIExpression()), !dbg !8322
  br label %for.cond329, !dbg !8323

for.cond329:                                      ; preds = %for.body331, %if.then321
  %v.11 = phi i32 [ %call326, %if.then321 ], [ %call336, %for.body331 ], !dbg !8322
  %nf.0 = phi i32 [ 0, %if.then321 ], [ %inc337, %for.body331 ], !dbg !8324
  %f.0.in = phi %union.tree_node** [ %61, %if.then321 ], [ %chain340, %for.body331 ]
  %f.0 = load %union.tree_node*, %union.tree_node** %f.0.in, align 8, !dbg !8324
  call void @llvm.dbg.value(metadata %union.tree_node* %f.0, metadata !8181, metadata !DIExpression()), !dbg !8322
  call void @llvm.dbg.value(metadata i32 %nf.0, metadata !8178, metadata !DIExpression()), !dbg !8322
  call void @llvm.dbg.value(metadata i32 %v.11, metadata !8171, metadata !DIExpression()), !dbg !8187
  %tobool330 = icmp eq %union.tree_node* %f.0, null, !dbg !8325
  br i1 %tobool330, label %for.end341, label %for.body331, !dbg !8325

for.body331:                                      ; preds = %for.cond329
  %name332 = getelementptr inbounds %union.tree_node, %union.tree_node* %f.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8326
  %62 = load %union.tree_node*, %union.tree_node** %name332, align 8, !dbg !8326
  %call333 = tail call fastcc i32 @iterative_hash_name(%union.tree_node* %62, i32 %v.11) #8, !dbg !8329
  call void @llvm.dbg.value(metadata i32 %call333, metadata !8171, metadata !DIExpression()), !dbg !8187
  %type335 = getelementptr inbounds %union.tree_node, %union.tree_node* %f.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8330
  %63 = load %union.tree_node*, %union.tree_node** %type335, align 8, !dbg !8330
  %call336 = tail call fastcc i32 @visit(%union.tree_node* %63, %struct.sccs* %16, i32 %call333, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #8, !dbg !8331
  call void @llvm.dbg.value(metadata i32 %call336, metadata !8171, metadata !DIExpression()), !dbg !8187
  %inc337 = add i32 %nf.0, 1, !dbg !8332
  call void @llvm.dbg.value(metadata i32 %inc337, metadata !8178, metadata !DIExpression()), !dbg !8322
  %chain340 = getelementptr inbounds %union.tree_node, %union.tree_node* %f.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8333
  br label %for.cond329, !dbg !8334, !llvm.loop !8335

for.end341:                                       ; preds = %for.cond329
  %v.11.lcssa = phi i32 [ %v.11, %for.cond329 ], !dbg !8322
  %nf.0.lcssa = phi i32 [ %nf.0, %for.cond329 ], !dbg !8324
  call void @llvm.dbg.value(metadata i32 %v.11.lcssa, metadata !8171, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata i32 %nf.0.lcssa, metadata !8178, metadata !DIExpression()), !dbg !8322
  call void @llvm.dbg.value(metadata i32 %v.11.lcssa, metadata !8171, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata i32 %nf.0.lcssa, metadata !8178, metadata !DIExpression()), !dbg !8322
  call void @llvm.dbg.value(metadata i32 %v.11.lcssa, metadata !8171, metadata !DIExpression()), !dbg !8187
  call void @llvm.dbg.value(metadata i32 %nf.0.lcssa, metadata !8178, metadata !DIExpression()), !dbg !8322
  %call342 = tail call i32 @iterative_hash_hashval_t(i32 %nf.0.lcssa, i32 %v.11.lcssa) #7, !dbg !8337
  call void @llvm.dbg.value(metadata i32 %call342, metadata !8171, metadata !DIExpression()), !dbg !8187
  br label %if.end343, !dbg !8338

if.end343:                                        ; preds = %for.end341, %lor.lhs.false314
  %v.12 = phi i32 [ %call342, %for.end341 ], [ %v.10, %lor.lhs.false314 ], !dbg !8187
  call void @llvm.dbg.value(metadata i32 %v.12, metadata !8171, metadata !DIExpression()), !dbg !8187
  %hash = getelementptr inbounds i8, i8* %7, i64 12, !dbg !8339
  %64 = bitcast i8* %hash to i32*, !dbg !8339
  store i32 %v.12, i32* %64, align 4, !dbg !8340
  %65 = load i32, i32* %20, align 4, !dbg !8341
  %66 = load i32, i32* %dfsnum, align 4, !dbg !8342
  %cmp346 = icmp eq i32 %65, %66, !dbg !8343
  br i1 %cmp346, label %do.body.preheader, label %if.end369, !dbg !8344

do.body.preheader:                                ; preds = %if.end343
  br label %do.body, !dbg !8345

do.body:                                          ; preds = %do.body.preheader, %cond.end360
  %67 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %sccstack, align 8, !dbg !8346
  %tobool349 = icmp eq %struct.VEC_tree_heap* %67, null, !dbg !8346
  br i1 %tobool349, label %cond.end353, label %cond.true350, !dbg !8346

cond.true350:                                     ; preds = %do.body
  %base351 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %67, i64 0, i32 0, !dbg !8346
  br label %cond.end353, !dbg !8346

cond.end353:                                      ; preds = %do.body, %cond.true350
  %cond354 = phi %struct.VEC_tree_base* [ %base351, %cond.true350 ], [ null, %do.body ], !dbg !8346
  %call355 = tail call fastcc %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %cond354) #8, !dbg !8346
  call void @llvm.dbg.value(metadata %union.tree_node* %call355, metadata !8182, metadata !DIExpression()), !dbg !8347
  %68 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !8348
  %69 = bitcast %union.tree_node* %call355 to i8*, !dbg !8348
  %call356 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %68, i8* %69) #7, !dbg !8348
  %tobool357 = icmp eq i8** %call356, null, !dbg !8348
  br i1 %tobool357, label %cond.end360, label %cond.true358, !dbg !8348

cond.true358:                                     ; preds = %cond.end353
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !8348
  br label %cond.end360, !dbg !8348

cond.end360:                                      ; preds = %cond.end353, %cond.true358
  %call362 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %sccstate, i8* %69) #7, !dbg !8349
  %70 = bitcast i8** %call362 to %struct.sccs**, !dbg !8350
  %71 = load %struct.sccs*, %struct.sccs** %70, align 8, !dbg !8350
  call void @llvm.dbg.value(metadata %struct.sccs* %71, metadata !8185, metadata !DIExpression()), !dbg !8351
  %on_sccstack363 = getelementptr inbounds %struct.sccs, %struct.sccs* %71, i64 0, i32 2, !dbg !8352
  store i8 0, i8* %on_sccstack363, align 4, !dbg !8353
  %72 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !8354
  %call364 = tail call i8** @pointer_map_insert(%struct.pointer_map_t* %72, i8* %69) #7, !dbg !8355
  call void @llvm.dbg.value(metadata i8** %call364, metadata !8172, metadata !DIExpression()), !dbg !8187
  %hash365 = getelementptr inbounds %struct.sccs, %struct.sccs* %71, i64 0, i32 3, !dbg !8356
  %73 = load i32, i32* %hash365, align 4, !dbg !8356
  %conv366 = zext i32 %73 to i64, !dbg !8357
  %74 = inttoptr i64 %conv366 to i8*, !dbg !8358
  store i8* %74, i8** %call364, align 8, !dbg !8359
  %cmp367 = icmp eq %union.tree_node* %call355, %type, !dbg !8360
  br i1 %cmp367, label %if.end369.loopexit, label %do.body, !dbg !8361, !llvm.loop !8362

if.end369.loopexit:                               ; preds = %cond.end360
  br label %if.end369, !dbg !8364

if.end369:                                        ; preds = %if.end369.loopexit, %if.end343
  %call370 = tail call i32 @iterative_hash_hashval_t(i32 %v.12, i32 %val) #7, !dbg !8364
  ret i32 %call370, !dbg !8365
}

declare dso_local void @_obstack_newchunk(%struct.obstack*, i32) local_unnamed_addr #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) unnamed_addr #0 !dbg !8366 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_, metadata !8370, metadata !DIExpression()), !dbg !8372
  call void @llvm.dbg.value(metadata %union.tree_node* %obj_, metadata !8371, metadata !DIExpression()), !dbg !8372
  %call = tail call fastcc i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 1) #8, !dbg !8373
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_, align 8, !dbg !8373
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !8373
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8373

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %0, i64 0, i32 0, !dbg !8373
  br label %cond.end, !dbg !8373

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !8373
  %call1 = tail call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %obj_) #8, !dbg !8373
  ret %union.tree_node** %call1, !dbg !8373
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @iterative_hash_name(%union.tree_node* %name, i32 %v) unnamed_addr #5 !dbg !8374 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !8378, metadata !DIExpression()), !dbg !8380
  call void @llvm.dbg.value(metadata i32 %v, metadata !8379, metadata !DIExpression()), !dbg !8380
  %tobool = icmp eq %union.tree_node* %name, null, !dbg !8381
  br i1 %tobool, label %return, label %if.end, !dbg !8383

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8384
  %bf.load = load i64, i64* %0, align 8, !dbg !8384
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8386
  %cmp = icmp eq i64 %bf.cast1, 35, !dbg !8386
  br i1 %cmp, label %if.then1, label %if.end3, !dbg !8387

if.then1:                                         ; preds = %if.end
  %name2 = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8388
  %1 = load %union.tree_node*, %union.tree_node** %name2, align 8, !dbg !8388
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !8378, metadata !DIExpression()), !dbg !8380
  br label %if.end3, !dbg !8389

if.end3:                                          ; preds = %if.then1, %if.end
  %name.addr.0 = phi %union.tree_node* [ %1, %if.then1 ], [ %name, %if.end ]
  call void @llvm.dbg.value(metadata %union.tree_node* %name.addr.0, metadata !8378, metadata !DIExpression()), !dbg !8380
  %tobool4 = icmp eq %union.tree_node* %name.addr.0, null, !dbg !8390
  br i1 %tobool4, label %return, label %if.end6, !dbg !8392

if.end6:                                          ; preds = %if.end3
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %name.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8393
  %bf.load8 = load i64, i64* %2, align 8, !dbg !8393
  %bf.cast102 = and i64 %bf.load8, 65535, !dbg !8393
  %cmp11 = icmp eq i64 %bf.cast102, 1, !dbg !8393
  br i1 %cmp11, label %cond.end, label %cond.true, !dbg !8393

cond.true:                                        ; preds = %if.end6
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3586, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !8393
  br label %cond.end, !dbg !8393

cond.end:                                         ; preds = %if.end6, %cond.true
  %id = getelementptr inbounds %union.tree_node, %union.tree_node* %name.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8394
  %3 = getelementptr inbounds i32, i32* %id, i64 3, !dbg !8394
  %4 = bitcast i32* %3 to i8*, !dbg !8394
  %call = tail call i32 @iterative_hash(i8* nonnull %4, i64 4, i32 %v) #7, !dbg !8394
  br label %return, !dbg !8395

return:                                           ; preds = %if.end3, %entry, %cond.end
  %retval.0 = phi i32 [ %call, %cond.end ], [ %v, %entry ], [ %v, %if.end3 ], !dbg !8380
  ret i32 %retval.0, !dbg !8396
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @visit(%union.tree_node* %t, %struct.sccs* %state, i32 %v, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) unnamed_addr #5 !dbg !8397 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !8401, metadata !DIExpression()), !dbg !8412
  call void @llvm.dbg.value(metadata %struct.sccs* %state, metadata !8402, metadata !DIExpression()), !dbg !8412
  call void @llvm.dbg.value(metadata i32 %v, metadata !8403, metadata !DIExpression()), !dbg !8412
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %sccstack, metadata !8404, metadata !DIExpression()), !dbg !8412
  call void @llvm.dbg.value(metadata %struct.pointer_map_t* %sccstate, metadata !8405, metadata !DIExpression()), !dbg !8412
  call void @llvm.dbg.value(metadata %struct.obstack* %sccstate_obstack, metadata !8406, metadata !DIExpression()), !dbg !8412
  call void @llvm.dbg.value(metadata %struct.sccs* null, metadata !8407, metadata !DIExpression()), !dbg !8412
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @type_hash_cache, align 8, !dbg !8413
  %1 = bitcast %union.tree_node* %t to i8*, !dbg !8415
  %call = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %1) #7, !dbg !8416
  call void @llvm.dbg.value(metadata i8** %call, metadata !8408, metadata !DIExpression()), !dbg !8412
  %tobool = icmp eq i8** %call, null, !dbg !8417
  br i1 %tobool, label %if.end, label %if.then, !dbg !8418

if.then:                                          ; preds = %entry
  %2 = bitcast i8** %call to i64*, !dbg !8419
  %3 = load i64, i64* %2, align 8, !dbg !8419
  %conv = trunc i64 %3 to i32, !dbg !8420
  %call1 = tail call i32 @iterative_hash_hashval_t(i32 %conv, i32 %v) #7, !dbg !8421
  br label %cleanup42, !dbg !8422

if.end:                                           ; preds = %entry
  %call2 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %sccstate, i8* %1) #7, !dbg !8423
  call void @llvm.dbg.value(metadata i8** %call2, metadata !8408, metadata !DIExpression()), !dbg !8412
  %cmp = icmp eq i8** %call2, null, !dbg !8425
  br i1 %cmp, label %if.end5, label %if.then4, !dbg !8426

if.then4:                                         ; preds = %if.end
  %4 = bitcast i8** %call2 to %struct.sccs**, !dbg !8427
  %5 = load %struct.sccs*, %struct.sccs** %4, align 8, !dbg !8427
  call void @llvm.dbg.value(metadata %struct.sccs* %5, metadata !8407, metadata !DIExpression()), !dbg !8412
  br label %if.end5, !dbg !8428

if.end5:                                          ; preds = %if.end, %if.then4
  %cstate.0 = phi %struct.sccs* [ %5, %if.then4 ], [ null, %if.end ], !dbg !8412
  call void @llvm.dbg.value(metadata %struct.sccs* %cstate.0, metadata !8407, metadata !DIExpression()), !dbg !8412
  %tobool6 = icmp eq %struct.sccs* %cstate.0, null, !dbg !8429
  br i1 %tobool6, label %if.then7, label %if.end22, !dbg !8430

if.then7:                                         ; preds = %if.end5
  %call8 = tail call fastcc i32 @iterative_hash_gimple_type(%union.tree_node* %t, i32 %v, %struct.VEC_tree_heap** %sccstack, %struct.pointer_map_t* %sccstate, %struct.obstack* %sccstate_obstack) #8, !dbg !8431
  call void @llvm.dbg.value(metadata i32 %call8, metadata !8409, metadata !DIExpression()), !dbg !8432
  %call11 = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %sccstate, i8* %1) #7, !dbg !8433
  %6 = bitcast i8** %call11 to %struct.sccs**, !dbg !8435
  %7 = load %struct.sccs*, %struct.sccs** %6, align 8, !dbg !8435
  call void @llvm.dbg.value(metadata %struct.sccs* %7, metadata !8407, metadata !DIExpression()), !dbg !8412
  call void @llvm.dbg.value(metadata %struct.sccs* %7, metadata !8407, metadata !DIExpression()), !dbg !8412
  %low = getelementptr inbounds %struct.sccs, %struct.sccs* %state, i64 0, i32 1, !dbg !8436
  %8 = load i32, i32* %low, align 4, !dbg !8436
  %low13 = getelementptr inbounds %struct.sccs, %struct.sccs* %7, i64 0, i32 1, !dbg !8436
  %9 = load i32, i32* %low13, align 4, !dbg !8436
  %cmp14 = icmp ult i32 %8, %9, !dbg !8436
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !8436

cond.true:                                        ; preds = %if.then7
  br label %cond.end, !dbg !8436

cond.false:                                       ; preds = %if.then7
  br label %cond.end, !dbg !8436

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %8, %cond.true ], [ %9, %cond.false ], !dbg !8436
  store i32 %cond, i32* %low, align 4, !dbg !8437
  %on_sccstack = getelementptr inbounds %struct.sccs, %struct.sccs* %7, i64 0, i32 2, !dbg !8438
  %10 = load i8, i8* %on_sccstack, align 4, !dbg !8438
  %tobool19 = icmp eq i8 %10, 0, !dbg !8440
  br i1 %tobool19, label %cleanup42, label %if.end22

if.end22:                                         ; preds = %cond.end, %if.end5
  %cstate.2 = phi %struct.sccs* [ %cstate.0, %if.end5 ], [ %7, %cond.end ], !dbg !8441
  call void @llvm.dbg.value(metadata %struct.sccs* %cstate.2, metadata !8407, metadata !DIExpression()), !dbg !8412
  %dfsnum = getelementptr inbounds %struct.sccs, %struct.sccs* %cstate.2, i64 0, i32 0, !dbg !8442
  %11 = load i32, i32* %dfsnum, align 4, !dbg !8442
  %dfsnum23 = getelementptr inbounds %struct.sccs, %struct.sccs* %state, i64 0, i32 0, !dbg !8444
  %12 = load i32, i32* %dfsnum23, align 4, !dbg !8444
  %cmp24 = icmp ult i32 %11, %12, !dbg !8445
  br i1 %cmp24, label %land.lhs.true, label %cleanup42, !dbg !8446

land.lhs.true:                                    ; preds = %if.end22
  %on_sccstack26 = getelementptr inbounds %struct.sccs, %struct.sccs* %cstate.2, i64 0, i32 2, !dbg !8447
  %13 = load i8, i8* %on_sccstack26, align 4, !dbg !8447
  %tobool28 = icmp eq i8 %13, 0, !dbg !8448
  br i1 %tobool28, label %cleanup42, label %if.then29, !dbg !8449

if.then29:                                        ; preds = %land.lhs.true
  %low31 = getelementptr inbounds %struct.sccs, %struct.sccs* %state, i64 0, i32 1, !dbg !8450
  %14 = load i32, i32* %low31, align 4, !dbg !8450
  %cmp32 = icmp ult i32 %11, %14, !dbg !8450
  br i1 %cmp32, label %cond.true34, label %cond.false36, !dbg !8450

cond.true34:                                      ; preds = %if.then29
  br label %cond.end38, !dbg !8450

cond.false36:                                     ; preds = %if.then29
  br label %cond.end38, !dbg !8450

cond.end38:                                       ; preds = %cond.false36, %cond.true34
  %cond39 = phi i32 [ %11, %cond.true34 ], [ %14, %cond.false36 ], !dbg !8450
  store i32 %cond39, i32* %low31, align 4, !dbg !8451
  br label %cleanup42, !dbg !8452

cleanup42:                                        ; preds = %land.lhs.true, %cond.end, %if.end22, %cond.end38, %if.then
  %retval.1 = phi i32 [ %call1, %if.then ], [ %call8, %cond.end ], [ %v, %cond.end38 ], [ %v, %land.lhs.true ], [ %v, %if.end22 ]
  ret i32 %retval.1, !dbg !8453
}

declare dso_local i32 @iterative_hash_expr(%union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @VEC_tree_base_pop(%struct.VEC_tree_base* %vec_) unnamed_addr #0 !dbg !8454 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !8458, metadata !DIExpression()), !dbg !8460
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !8461
  %0 = load i32, i32* %num1, align 8, !dbg !8461
  %dec = add i32 %0, -1, !dbg !8461
  store i32 %dec, i32* %num1, align 8, !dbg !8461
  %idxprom = zext i32 %dec to i64, !dbg !8461
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8461
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8461
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !8459, metadata !DIExpression()), !dbg !8460
  ret %union.tree_node* %1, !dbg !8461
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8462 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_, metadata !8466, metadata !DIExpression()), !dbg !8469
  call void @llvm.dbg.value(metadata i32 1, metadata !8467, metadata !DIExpression()), !dbg !8469
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_, align 8, !dbg !8470
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !8470
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8470

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %0, i64 0, i32 0, !dbg !8470
  br label %cond.end, !dbg !8470

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !8470
  %call = tail call fastcc i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 1) #8, !dbg !8470
  %tobool1 = icmp eq i32 %call, 0, !dbg !8470
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !8470
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !8468, metadata !DIExpression()), !dbg !8469
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8470

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_tree_heap** %vec_ to i8**, !dbg !8471
  %2 = load i8*, i8** %1, align 8, !dbg !8471
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %2, i32 1) #7, !dbg !8471
  store i8* %call3, i8** %1, align 8, !dbg !8471
  br label %if.end, !dbg !8471

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !8470
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8473 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !8477, metadata !DIExpression()), !dbg !8479
  call void @llvm.dbg.value(metadata i32 1, metadata !8478, metadata !DIExpression()), !dbg !8479
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !8480
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8480

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 1, !dbg !8480
  %0 = load i32, i32* %alloc, align 4, !dbg !8480
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !8480
  %1 = load i32, i32* %num, align 8, !dbg !8480
  %cmp1 = icmp ne i32 %0, %1, !dbg !8480
  %phitmp = zext i1 %cmp1 to i32, !dbg !8480
  br label %cond.end, !dbg !8480

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8480

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !8480
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) local_unnamed_addr #2

declare dso_local i32 @iterative_hash(i8*, i64, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc i32 @gimple_types_compatible_p(%union.tree_node* %t1, %union.tree_node* %t2) unnamed_addr #5 !dbg !8481 {
entry:
  br label %tailrecurse, !dbg !8527

tailrecurse:                                      ; preds = %if.then222, %entry
  %t1.tr = phi %union.tree_node* [ %t1, %entry ], [ %25, %if.then222 ]
  %t2.tr = phi %union.tree_node* [ %t2, %entry ], [ %26, %if.then222 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t1.tr, metadata !8485, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t2.tr, metadata !8486, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %struct.type_pair_d* null, metadata !8487, metadata !DIExpression()), !dbg !8531
  %cmp = icmp eq %union.tree_node* %t1.tr, %t2.tr, !dbg !8532
  br i1 %cmp, label %cleanup746.loopexit, label %if.end, !dbg !8534

if.end:                                           ; preds = %tailrecurse
  %cmp1 = icmp eq %union.tree_node* %t1.tr, null, !dbg !8535
  %cmp2 = icmp eq %union.tree_node* %t2.tr, null, !dbg !8537
  %or.cond = or i1 %cmp1, %cmp2, !dbg !8538
  br i1 %or.cond, label %cleanup746.loopexit, label %if.end4, !dbg !8538

if.end4:                                          ; preds = %if.end
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8539
  %bf.load = load i64, i64* %0, align 8, !dbg !8539
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8541
  %bf.load6 = load i64, i64* %1, align 8, !dbg !8541
  %2 = xor i64 %bf.load, %bf.load6, !dbg !8542
  %3 = and i64 %2, 65535, !dbg !8542
  %cmp9 = icmp eq i64 %3, 0, !dbg !8542
  br i1 %cmp9, label %if.end11, label %cleanup746.loopexit, !dbg !8543

if.end11:                                         ; preds = %if.end4
  %bf.lshr = lshr i64 %bf.load, 20, !dbg !8544
  %4 = trunc i64 %bf.lshr to i32, !dbg !8544
  %bf.cast15 = and i32 %4, 1, !dbg !8544
  %5 = lshr i64 %bf.load, 18, !dbg !8544
  %6 = trunc i64 %5 to i32, !dbg !8544
  %mul21 = and i32 %6, 2, !dbg !8544
  %or = or i32 %bf.cast15, %mul21, !dbg !8544
  %type = bitcast %union.tree_node* %t1.tr to %struct.tree_type*, !dbg !8544
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i64 0, i32 6, !dbg !8544
  %bf.load22 = load i32, i32* %restrict_flag, align 4, !dbg !8544
  %7 = lshr i32 %bf.load22, 11, !dbg !8544
  %mul25 = and i32 %7, 4, !dbg !8544
  %or26 = or i32 %or, %mul25, !dbg !8544
  %8 = lshr i64 %bf.load, 48, !dbg !8544
  %9 = trunc i64 %8 to i32, !dbg !8544
  %shl = and i32 %9, 65280, !dbg !8544
  %or31 = or i32 %or26, %shl, !dbg !8544
  %bf.lshr34 = lshr i64 %bf.load6, 20, !dbg !8546
  %10 = trunc i64 %bf.lshr34 to i32, !dbg !8546
  %bf.cast36 = and i32 %10, 1, !dbg !8546
  %11 = lshr i64 %bf.load6, 18, !dbg !8546
  %12 = trunc i64 %11 to i32, !dbg !8546
  %mul43 = and i32 %12, 2, !dbg !8546
  %or44 = or i32 %bf.cast36, %mul43, !dbg !8546
  %type45 = bitcast %union.tree_node* %t2.tr to %struct.tree_type*, !dbg !8546
  %restrict_flag46 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type45, i64 0, i32 6, !dbg !8546
  %bf.load47 = load i32, i32* %restrict_flag46, align 4, !dbg !8546
  %13 = lshr i32 %bf.load47, 11, !dbg !8546
  %mul50 = and i32 %13, 4, !dbg !8546
  %or51 = or i32 %or44, %mul50, !dbg !8546
  %14 = lshr i64 %bf.load6, 48, !dbg !8546
  %15 = trunc i64 %14 to i32, !dbg !8546
  %shl57 = and i32 %15, 65280, !dbg !8546
  %or58 = or i32 %or51, %shl57, !dbg !8546
  %cmp59 = icmp eq i32 %or31, %or58, !dbg !8547
  br i1 %cmp59, label %if.end61, label %cleanup746.loopexit, !dbg !8548

if.end61:                                         ; preds = %if.end11
  %bf.cast6527 = and i64 %bf.load, 65535, !dbg !8549
  %cmp66 = icmp eq i64 %bf.cast6527, 19, !dbg !8549
  br i1 %cmp66, label %cleanup746.loopexit, label %if.end68, !dbg !8551

if.end68:                                         ; preds = %if.end61
  %cmp73 = icmp eq i64 %bf.cast6527, 6, !dbg !8552
  br i1 %cmp73, label %if.then116, label %lor.lhs.false74, !dbg !8552

lor.lhs.false74:                                  ; preds = %if.end68
  %cmp79 = icmp eq i64 %bf.cast6527, 7, !dbg !8552
  br i1 %cmp79, label %if.then116, label %lor.lhs.false80, !dbg !8552

lor.lhs.false80:                                  ; preds = %lor.lhs.false74
  %cmp85 = icmp eq i64 %bf.cast6527, 8, !dbg !8552
  br i1 %cmp85, label %if.then116, label %lor.lhs.false86, !dbg !8553

lor.lhs.false86:                                  ; preds = %lor.lhs.false80
  %cmp91 = icmp eq i64 %bf.cast6527, 9, !dbg !8554
  br i1 %cmp91, label %if.then116, label %lor.lhs.false92, !dbg !8555

lor.lhs.false92:                                  ; preds = %lor.lhs.false86
  %cmp97 = icmp eq i64 %bf.cast6527, 11, !dbg !8556
  br i1 %cmp97, label %if.then116, label %lor.lhs.false98, !dbg !8557

lor.lhs.false98:                                  ; preds = %lor.lhs.false92
  %cmp103 = icmp eq i64 %bf.cast6527, 14, !dbg !8558
  br i1 %cmp103, label %if.then116, label %lor.lhs.false104, !dbg !8559

lor.lhs.false104:                                 ; preds = %lor.lhs.false98
  %cmp109 = icmp eq i64 %bf.cast6527, 13, !dbg !8560
  br i1 %cmp109, label %if.then116, label %lor.lhs.false110, !dbg !8561

lor.lhs.false110:                                 ; preds = %lor.lhs.false104
  %cmp115 = icmp eq i64 %bf.cast6527, 5, !dbg !8562
  br i1 %cmp115, label %if.then116, label %if.end228, !dbg !8563

if.then116:                                       ; preds = %lor.lhs.false110, %lor.lhs.false104, %lor.lhs.false98, %lor.lhs.false92, %lor.lhs.false86, %lor.lhs.false80, %lor.lhs.false74, %if.end68
  %16 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8564
  %17 = load i32, i32* %16, align 8, !dbg !8564
  %18 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8566
  %19 = load i32, i32* %18, align 8, !dbg !8566
  %cmp120 = icmp eq i32 %17, %19, !dbg !8567
  br i1 %cmp120, label %lor.lhs.false121, label %cleanup746.loopexit, !dbg !8568

lor.lhs.false121:                                 ; preds = %if.then116
  %20 = xor i32 %bf.load22, %bf.load47, !dbg !8569
  %21 = and i32 %20, 1023, !dbg !8569
  %cmp129 = icmp eq i32 %21, 0, !dbg !8569
  br i1 %cmp129, label %lor.lhs.false130, label %cleanup746.loopexit, !dbg !8570

lor.lhs.false130:                                 ; preds = %lor.lhs.false121
  %cmp135 = icmp eq i64 %bf.cast6527, 14, !dbg !8571
  br i1 %cmp135, label %cond.true, label %cond.false, !dbg !8571

cond.true:                                        ; preds = %lor.lhs.false130
  %call = tail call i32 @vector_type_mode(%union.tree_node* %t1.tr) #7, !dbg !8571
  %bf.load141.pre = load i64, i64* %1, align 8, !dbg !8572
  br label %cond.end, !dbg !8571

cond.false:                                       ; preds = %lor.lhs.false130
  %bf.lshr138 = lshr i32 %bf.load22, 16, !dbg !8571
  %bf.clear139 = and i32 %bf.lshr138, 255, !dbg !8571
  br label %cond.end, !dbg !8571

cond.end:                                         ; preds = %cond.false, %cond.true
  %bf.load141 = phi i64 [ %bf.load141.pre, %cond.true ], [ %bf.load6, %cond.false ], !dbg !8572
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear139, %cond.false ], !dbg !8571
  %bf.cast14343 = and i64 %bf.load141, 65535, !dbg !8572
  %cmp144 = icmp eq i64 %bf.cast14343, 14, !dbg !8572
  br i1 %cmp144, label %cond.true145, label %cond.false147, !dbg !8572

cond.true145:                                     ; preds = %cond.end
  %call146 = tail call i32 @vector_type_mode(%union.tree_node* %t2.tr) #7, !dbg !8572
  br label %cond.end153, !dbg !8572

cond.false147:                                    ; preds = %cond.end
  %bf.load150 = load i32, i32* %restrict_flag46, align 4, !dbg !8572
  %bf.lshr151 = lshr i32 %bf.load150, 16, !dbg !8572
  %bf.clear152 = and i32 %bf.lshr151, 255, !dbg !8572
  br label %cond.end153, !dbg !8572

cond.end153:                                      ; preds = %cond.false147, %cond.true145
  %cond154 = phi i32 [ %call146, %cond.true145 ], [ %bf.clear152, %cond.false147 ], !dbg !8572
  %cmp155 = icmp eq i32 %cond, %cond154, !dbg !8573
  br i1 %cmp155, label %lor.lhs.false156, label %cleanup746.loopexit, !dbg !8574

lor.lhs.false156:                                 ; preds = %cond.end153
  %bf.load158 = load i64, i64* %0, align 8, !dbg !8575
  %bf.load163 = load i64, i64* %1, align 8, !dbg !8576
  %bf.lshr15953 = xor i64 %bf.load158, %bf.load163, !dbg !8577
  %22 = and i64 %bf.lshr15953, 2097152, !dbg !8577
  %cmp167 = icmp eq i64 %22, 0, !dbg !8577
  br i1 %cmp167, label %if.end169, label %cleanup746.loopexit, !dbg !8578

if.end169:                                        ; preds = %lor.lhs.false156
  %bf.cast17344 = and i64 %bf.load158, 65535, !dbg !8579
  %cmp174 = icmp eq i64 %bf.cast17344, 8, !dbg !8579
  br i1 %cmp174, label %land.lhs.true, label %if.end197, !dbg !8581

land.lhs.true:                                    ; preds = %if.end169
  %bf.load176 = load i32, i32* %restrict_flag, align 4, !dbg !8582
  %bf.load181 = load i32, i32* %restrict_flag46, align 4, !dbg !8583
  %bf.lshr17754 = xor i32 %bf.load176, %bf.load181, !dbg !8584
  %23 = and i32 %bf.lshr17754, 1024, !dbg !8584
  %cmp184 = icmp eq i32 %23, 0, !dbg !8584
  br i1 %cmp184, label %lor.lhs.false185, label %cleanup746.loopexit, !dbg !8585

lor.lhs.false185:                                 ; preds = %land.lhs.true
  %24 = and i32 %bf.lshr17754, 16777216, !dbg !8586
  %cmp195 = icmp eq i32 %24, 0, !dbg !8586
  br i1 %cmp195, label %if.end197, label %cleanup746.loopexit, !dbg !8587

if.end197:                                        ; preds = %lor.lhs.false185, %if.end169
  %cmp202 = icmp eq i64 %bf.cast17344, 9, !dbg !8588
  br i1 %cmp202, label %cleanup746.loopexit, label %lor.lhs.false203, !dbg !8590

lor.lhs.false203:                                 ; preds = %if.end197
  %cmp208 = icmp eq i64 %bf.cast17344, 11, !dbg !8591
  br i1 %cmp208, label %cleanup746.loopexit, label %if.end210, !dbg !8592

if.end210:                                        ; preds = %lor.lhs.false203
  %cmp215 = icmp eq i64 %bf.cast17344, 14, !dbg !8593
  br i1 %cmp215, label %if.then222, label %lor.lhs.false216, !dbg !8594

lor.lhs.false216:                                 ; preds = %if.end210
  %cmp221 = icmp eq i64 %bf.cast17344, 13, !dbg !8595
  br i1 %cmp221, label %if.then222, label %if.end228, !dbg !8596

if.then222:                                       ; preds = %lor.lhs.false216, %if.end210
  %type223 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8597
  %25 = load %union.tree_node*, %union.tree_node** %type223, align 8, !dbg !8597
  %type225 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8598
  %26 = load %union.tree_node*, %union.tree_node** %type225, align 8, !dbg !8598
  br label %tailrecurse, !dbg !8527

if.end228:                                        ; preds = %lor.lhs.false216, %lor.lhs.false110
  %restrict_flag.lcssa = phi i32* [ %restrict_flag, %lor.lhs.false216 ], [ %restrict_flag, %lor.lhs.false110 ], !dbg !8544
  %restrict_flag46.lcssa = phi i32* [ %restrict_flag46, %lor.lhs.false216 ], [ %restrict_flag46, %lor.lhs.false110 ], !dbg !8546
  %.lcssa99 = phi i64* [ %0, %lor.lhs.false216 ], [ %0, %lor.lhs.false110 ], !dbg !8539
  %.lcssa = phi i64* [ %1, %lor.lhs.false216 ], [ %1, %lor.lhs.false110 ], !dbg !8541
  %t1.tr.lcssa98 = phi %union.tree_node* [ %t1.tr, %lor.lhs.false216 ], [ %t1.tr, %lor.lhs.false110 ]
  %t2.tr.lcssa97 = phi %union.tree_node* [ %t2.tr, %lor.lhs.false216 ], [ %t2.tr, %lor.lhs.false110 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %t1.tr.lcssa98, metadata !8485, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t1.tr.lcssa98, metadata !8485, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t2.tr.lcssa97, metadata !8486, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t2.tr.lcssa97, metadata !8486, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t1.tr.lcssa98, metadata !8485, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t1.tr.lcssa98, metadata !8485, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t2.tr.lcssa97, metadata !8486, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t2.tr.lcssa97, metadata !8486, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t1.tr.lcssa98, metadata !8485, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t1.tr.lcssa98, metadata !8485, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t2.tr.lcssa97, metadata !8486, metadata !DIExpression()), !dbg !8531
  call void @llvm.dbg.value(metadata %union.tree_node* %t2.tr.lcssa97, metadata !8486, metadata !DIExpression()), !dbg !8531
  %27 = bitcast %union.tree_node* %t1.tr.lcssa98 to i8*, !dbg !8599
  %call229 = tail call i32 @gimple_type_hash(i8* %27) #8, !dbg !8601
  %28 = bitcast %union.tree_node* %t2.tr.lcssa97 to i8*, !dbg !8602
  %call230 = tail call i32 @gimple_type_hash(i8* %28) #8, !dbg !8603
  %cmp231 = icmp eq i32 %call229, %call230, !dbg !8604
  br i1 %cmp231, label %if.end233, label %cleanup746, !dbg !8605

if.end233:                                        ; preds = %if.end228
  %call234 = tail call fastcc %struct.type_pair_d* @lookup_type_pair(%union.tree_node* %t1.tr.lcssa98, %union.tree_node* %t2.tr.lcssa97, %struct.htab** nonnull @gtc_visited, %struct.obstack* nonnull @gtc_ob) #8, !dbg !8606
  call void @llvm.dbg.value(metadata %struct.type_pair_d* %call234, metadata !8487, metadata !DIExpression()), !dbg !8531
  %same_p = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %call234, i64 0, i32 2, !dbg !8607
  %29 = load i32, i32* %same_p, align 4, !dbg !8607
  %cmp235 = icmp eq i32 %29, 0, !dbg !8609
  br i1 %cmp235, label %if.then239, label %lor.lhs.false236, !dbg !8610

lor.lhs.false236:                                 ; preds = %if.end233
  %cmp238 = icmp eq i32 %29, 1, !dbg !8611
  br i1 %cmp238, label %if.then239, label %if.else, !dbg !8612

if.then239:                                       ; preds = %lor.lhs.false236, %if.end233
  %cmp241 = icmp eq i32 %29, 1, !dbg !8613
  %conv = zext i1 %cmp241 to i32, !dbg !8613
  br label %cleanup746, !dbg !8615

if.else:                                          ; preds = %lor.lhs.false236
  %cmp243 = icmp eq i32 %29, -1, !dbg !8616
  br i1 %cmp243, label %cleanup746, label %if.end247, !dbg !8618

if.end247:                                        ; preds = %if.else
  %cmp249 = icmp eq i32 %29, -2, !dbg !8619
  br i1 %cmp249, label %cond.end253, label %cond.true251, !dbg !8619

cond.true251:                                     ; preds = %if.end247
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3245, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !8619
  br label %cond.end253, !dbg !8619

cond.end253:                                      ; preds = %if.end247, %cond.true251
  store i32 -1, i32* %same_p, align 4, !dbg !8620
  %30 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8621
  %31 = load %union.tree_node*, %union.tree_node** %30, align 8, !dbg !8621
  %32 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8623
  %33 = load %union.tree_node*, %union.tree_node** %32, align 8, !dbg !8623
  %call259 = tail call i32 @attribute_list_equal(%union.tree_node* %31, %union.tree_node* %33) #7, !dbg !8624
  %tobool = icmp eq i32 %call259, 0, !dbg !8624
  br i1 %tobool, label %different_types, label %if.end261, !dbg !8625

if.end261:                                        ; preds = %cond.end253
  %bf.load263 = load i64, i64* %.lcssa99, align 8, !dbg !8626
  %34 = trunc i64 %bf.load263 to i16, !dbg !8626
  switch i16 %34, label %sw.default [
    i16 15, label %sw.bb
    i16 21, label %sw.bb373
    i16 20, label %sw.bb382
    i16 5, label %sw.bb425
    i16 10, label %sw.bb441
    i16 12, label %sw.bb441
    i16 8, label %sw.bb549
    i16 7, label %sw.bb549
    i16 6, label %sw.bb605
    i16 16, label %sw.bb666
    i16 17, label %sw.bb666
    i16 18, label %sw.bb666
  ], !dbg !8627

sw.bb:                                            ; preds = %if.end261
  %type267 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8628
  %35 = load %union.tree_node*, %union.tree_node** %type267, align 8, !dbg !8628
  %type269 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8629
  %36 = load %union.tree_node*, %union.tree_node** %type269, align 8, !dbg !8629
  %call270 = tail call fastcc i32 @gimple_types_compatible_p(%union.tree_node* %35, %union.tree_node* %36) #8, !dbg !8630
  %tobool271 = icmp eq i32 %call270, 0, !dbg !8630
  br i1 %tobool271, label %different_types, label %lor.lhs.false272, !dbg !8631

lor.lhs.false272:                                 ; preds = %sw.bb
  %bf.load275 = load i32, i32* %restrict_flag.lcssa, align 4, !dbg !8632
  %bf.load280 = load i32, i32* %restrict_flag46.lcssa, align 4, !dbg !8633
  %bf.lshr27651 = xor i32 %bf.load275, %bf.load280, !dbg !8634
  %37 = and i32 %bf.lshr27651, 16777216, !dbg !8634
  %cmp283 = icmp eq i32 %37, 0, !dbg !8634
  br i1 %cmp283, label %lor.lhs.false285, label %different_types, !dbg !8635

lor.lhs.false285:                                 ; preds = %lor.lhs.false272
  %38 = and i32 %bf.lshr27651, 4096, !dbg !8636
  %cmp295 = icmp eq i32 %38, 0, !dbg !8636
  br i1 %cmp295, label %if.else298, label %different_types, !dbg !8637

if.else298:                                       ; preds = %lor.lhs.false285
  %values = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8638
  %39 = bitcast i32* %values to %union.tree_node**, !dbg !8638
  %40 = load %union.tree_node*, %union.tree_node** %39, align 8, !dbg !8638
  call void @llvm.dbg.value(metadata %union.tree_node* %40, metadata !8488, metadata !DIExpression()), !dbg !8639
  %values301 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8640
  %41 = bitcast i32* %values301 to %union.tree_node**, !dbg !8640
  %42 = load %union.tree_node*, %union.tree_node** %41, align 8, !dbg !8640
  call void @llvm.dbg.value(metadata %union.tree_node* %42, metadata !8492, metadata !DIExpression()), !dbg !8639
  %cmp302 = icmp eq %union.tree_node* %40, null, !dbg !8641
  %cmp305 = icmp eq %union.tree_node* %42, null, !dbg !8642
  %or.cond2 = and i1 %cmp302, %cmp305, !dbg !8643
  br i1 %or.cond2, label %cleanup371, label %if.else308, !dbg !8643

if.else308:                                       ; preds = %if.else298
  %or.cond3 = or i1 %cmp302, %cmp305, !dbg !8644
  br i1 %or.cond3, label %cleanup371, label %if.else315, !dbg !8644

if.else315:                                       ; preds = %if.else308
  %43 = getelementptr inbounds %union.tree_node, %union.tree_node* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8645
  %44 = load %union.tree_node*, %union.tree_node** %43, align 8, !dbg !8645
  %cmp317 = icmp ne %union.tree_node* %44, null, !dbg !8646
  %45 = getelementptr inbounds %union.tree_node, %union.tree_node* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8647
  %46 = load %union.tree_node*, %union.tree_node** %45, align 8, !dbg !8647
  %cmp321 = icmp ne %union.tree_node* %46, null, !dbg !8648
  %xor41 = xor i1 %cmp317, %cmp321, !dbg !8649
  br i1 %xor41, label %cleanup371, label %lor.lhs.false324, !dbg !8650

lor.lhs.false324:                                 ; preds = %if.else315
  %tobool327 = icmp eq %union.tree_node* %44, null, !dbg !8651
  br i1 %tobool327, label %if.else340, label %land.lhs.true328, !dbg !8652

land.lhs.true328:                                 ; preds = %lor.lhs.false324
  %tobool331 = icmp eq %union.tree_node* %46, null, !dbg !8653
  br i1 %tobool331, label %if.else340, label %land.lhs.true332, !dbg !8654

land.lhs.true332:                                 ; preds = %land.lhs.true328
  %call337 = tail call i32 @operand_equal_p(%union.tree_node* nonnull %44, %union.tree_node* nonnull %46, i32 0) #7, !dbg !8655
  %tobool338 = icmp eq i32 %call337, 0, !dbg !8655
  br i1 %tobool338, label %cleanup371, label %if.else340, !dbg !8656

if.else340:                                       ; preds = %land.lhs.true332, %land.lhs.true328, %lor.lhs.false324
  %minval = getelementptr inbounds %union.tree_node, %union.tree_node* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !8657
  %47 = bitcast %struct.lang_decl** %minval to %union.tree_node**, !dbg !8657
  %48 = load %union.tree_node*, %union.tree_node** %47, align 8, !dbg !8657
  call void @llvm.dbg.value(metadata %union.tree_node* %48, metadata !8493, metadata !DIExpression()), !dbg !8658
  %minval343 = getelementptr inbounds %union.tree_node, %union.tree_node* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !8659
  %49 = bitcast %struct.lang_decl** %minval343 to %union.tree_node**, !dbg !8659
  %50 = load %union.tree_node*, %union.tree_node** %49, align 8, !dbg !8659
  call void @llvm.dbg.value(metadata %union.tree_node* %50, metadata !8498, metadata !DIExpression()), !dbg !8658
  %maxval = getelementptr inbounds %union.tree_node, %union.tree_node* %40, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8660
  %51 = bitcast %struct.rtx_def** %maxval to %union.tree_node**, !dbg !8660
  %52 = load %union.tree_node*, %union.tree_node** %51, align 8, !dbg !8660
  call void @llvm.dbg.value(metadata %union.tree_node* %52, metadata !8499, metadata !DIExpression()), !dbg !8658
  %maxval346 = getelementptr inbounds %union.tree_node, %union.tree_node* %42, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8661
  %53 = bitcast %struct.rtx_def** %maxval346 to %union.tree_node**, !dbg !8661
  %54 = load %union.tree_node*, %union.tree_node** %53, align 8, !dbg !8661
  call void @llvm.dbg.value(metadata %union.tree_node* %54, metadata !8500, metadata !DIExpression()), !dbg !8658
  %cmp347 = icmp eq %union.tree_node* %48, %50, !dbg !8662
  br i1 %cmp347, label %land.lhs.true356, label %lor.lhs.false349, !dbg !8664

lor.lhs.false349:                                 ; preds = %if.else340
  %tobool350 = icmp ne %union.tree_node* %48, null, !dbg !8665
  %tobool352 = icmp ne %union.tree_node* %50, null, !dbg !8666
  %or.cond4 = and i1 %tobool350, %tobool352, !dbg !8667
  br i1 %or.cond4, label %land.lhs.true353, label %if.else367, !dbg !8667

land.lhs.true353:                                 ; preds = %lor.lhs.false349
  %call354 = tail call i32 @operand_equal_p(%union.tree_node* nonnull %48, %union.tree_node* nonnull %50, i32 0) #7, !dbg !8668
  %tobool355 = icmp eq i32 %call354, 0, !dbg !8668
  br i1 %tobool355, label %if.else367, label %land.lhs.true356, !dbg !8669

land.lhs.true356:                                 ; preds = %land.lhs.true353, %if.else340
  %cmp357 = icmp eq %union.tree_node* %52, %54, !dbg !8670
  br i1 %cmp357, label %cleanup371, label %lor.lhs.false359, !dbg !8671

lor.lhs.false359:                                 ; preds = %land.lhs.true356
  %tobool360 = icmp ne %union.tree_node* %52, null, !dbg !8672
  %tobool362 = icmp ne %union.tree_node* %54, null, !dbg !8673
  %or.cond5 = and i1 %tobool360, %tobool362, !dbg !8674
  br i1 %or.cond5, label %land.lhs.true363, label %if.else367, !dbg !8674

land.lhs.true363:                                 ; preds = %lor.lhs.false359
  %call364 = tail call i32 @operand_equal_p(%union.tree_node* nonnull %52, %union.tree_node* nonnull %54, i32 0) #7, !dbg !8675
  %tobool365 = icmp eq i32 %call364, 0, !dbg !8675
  br i1 %tobool365, label %if.else367, label %cleanup371, !dbg !8676

if.else367:                                       ; preds = %land.lhs.true363, %land.lhs.true353, %lor.lhs.false359, %lor.lhs.false349
  br label %cleanup371, !dbg !8677

cleanup371:                                       ; preds = %land.lhs.true332, %land.lhs.true363, %if.else367, %land.lhs.true356, %if.else315, %if.else308, %if.else298
  %cleanup.dest.slot.1 = phi i32 [ 4, %if.else298 ], [ 2, %if.else308 ], [ 2, %land.lhs.true332 ], [ 2, %if.else315 ], [ 2, %if.else367 ], [ 4, %land.lhs.true363 ], [ 4, %land.lhs.true356 ]
  switch i32 %cleanup.dest.slot.1, label %cleanup746 [
    i32 2, label %different_types
    i32 4, label %same_types
  ]

sw.bb373:                                         ; preds = %if.end261
  %maxval375 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8678
  %55 = bitcast %struct.rtx_def** %maxval375 to %union.tree_node**, !dbg !8678
  %56 = load %union.tree_node*, %union.tree_node** %55, align 8, !dbg !8678
  %maxval377 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8680
  %57 = bitcast %struct.rtx_def** %maxval377 to %union.tree_node**, !dbg !8680
  %58 = load %union.tree_node*, %union.tree_node** %57, align 8, !dbg !8680
  %call378 = tail call fastcc i32 @gimple_types_compatible_p(%union.tree_node* %56, %union.tree_node* %58) #8, !dbg !8681
  %tobool379 = icmp eq i32 %call378, 0, !dbg !8681
  br i1 %tobool379, label %different_types, label %sw.bb382, !dbg !8682

sw.bb382:                                         ; preds = %sw.bb373, %if.end261
  %type384 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8683
  %59 = load %union.tree_node*, %union.tree_node** %type384, align 8, !dbg !8683
  %type386 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8684
  %60 = load %union.tree_node*, %union.tree_node** %type386, align 8, !dbg !8684
  %call387 = tail call fastcc i32 @gimple_types_compatible_p(%union.tree_node* %59, %union.tree_node* %60) #8, !dbg !8685
  %tobool388 = icmp eq i32 %call387, 0, !dbg !8685
  br i1 %tobool388, label %different_types, label %if.else390, !dbg !8686

if.else390:                                       ; preds = %sw.bb382
  %61 = load i32 (%union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i64 0, i32 14), align 8, !dbg !8687
  %call391 = tail call i32 %61(%union.tree_node* %t1.tr.lcssa98, %union.tree_node* %t2.tr.lcssa97) #7, !dbg !8689
  %tobool392 = icmp eq i32 %call391, 0, !dbg !8689
  br i1 %tobool392, label %different_types, label %if.end394, !dbg !8690

if.end394:                                        ; preds = %if.else390
  %values396 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8691
  %62 = bitcast i32* %values396 to %union.tree_node**, !dbg !8691
  %63 = load %union.tree_node*, %union.tree_node** %62, align 8, !dbg !8691
  %values398 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8692
  %64 = bitcast i32* %values398 to %union.tree_node**, !dbg !8692
  %65 = load %union.tree_node*, %union.tree_node** %64, align 8, !dbg !8692
  %cmp399 = icmp eq %union.tree_node* %63, %65, !dbg !8693
  br i1 %cmp399, label %same_types, label %if.else402, !dbg !8694

if.else402:                                       ; preds = %if.end394
  br label %for.cond, !dbg !8695

for.cond:                                         ; preds = %for.inc, %if.else402
  %parms2.0 = phi %union.tree_node* [ %65, %if.else402 ], [ %parms2.0.pre, %for.inc ], !dbg !8697
  %parms1.0 = phi %union.tree_node* [ %63, %if.else402 ], [ %parms1.0.pre, %for.inc ], !dbg !8697
  call void @llvm.dbg.value(metadata %union.tree_node* %parms1.0, metadata !8501, metadata !DIExpression()), !dbg !8698
  call void @llvm.dbg.value(metadata %union.tree_node* %parms2.0, metadata !8506, metadata !DIExpression()), !dbg !8698
  %tobool407 = icmp ne %union.tree_node* %parms1.0, null, !dbg !8699
  %tobool408 = icmp ne %union.tree_node* %parms2.0, null, !dbg !8701
  %spec.select = and i1 %tobool408, %tobool407, !dbg !8701
  br i1 %spec.select, label %for.body, label %for.end, !dbg !8702

for.body:                                         ; preds = %for.cond
  %66 = getelementptr inbounds %union.tree_node, %union.tree_node* %parms1.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8703
  %67 = load %union.tree_node*, %union.tree_node** %66, align 8, !dbg !8703
  %68 = getelementptr inbounds %union.tree_node, %union.tree_node* %parms2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8706
  %69 = load %union.tree_node*, %union.tree_node** %68, align 8, !dbg !8706
  %call411 = tail call fastcc i32 @gimple_types_compatible_p(%union.tree_node* %67, %union.tree_node* %69) #8, !dbg !8707
  %tobool412 = icmp eq i32 %call411, 0, !dbg !8707
  br i1 %tobool412, label %cleanup423.loopexit, label %for.inc, !dbg !8708

for.inc:                                          ; preds = %for.body
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %parms1.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8709
  %chain417 = getelementptr inbounds %union.tree_node, %union.tree_node* %parms2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8710
  %parms1.0.pre = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !8697
  %parms2.0.pre = load %union.tree_node*, %union.tree_node** %chain417, align 8, !dbg !8697
  br label %for.cond, !dbg !8711, !llvm.loop !8712

for.end:                                          ; preds = %for.cond
  %tobool407.lcssa = phi i1 [ %tobool407, %for.cond ], !dbg !8699
  %tobool408.lcssa = phi i1 [ %tobool408, %for.cond ], !dbg !8701
  %or.cond6 = or i1 %tobool407.lcssa, %tobool408.lcssa, !dbg !8714
  %spec.select18 = select i1 %or.cond6, i32 2, i32 4, !dbg !8714
  br label %cleanup423, !dbg !8714

cleanup423.loopexit:                              ; preds = %for.body
  br label %cleanup423

cleanup423:                                       ; preds = %cleanup423.loopexit, %for.end
  %cleanup.dest.slot.2 = phi i32 [ %spec.select18, %for.end ], [ 2, %cleanup423.loopexit ]
  switch i32 %cleanup.dest.slot.2, label %cleanup746 [
    i32 2, label %different_types
    i32 4, label %same_types
  ]

sw.bb425:                                         ; preds = %if.end261
  %type427 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8716
  %70 = load %union.tree_node*, %union.tree_node** %type427, align 8, !dbg !8716
  %type429 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8719
  %71 = load %union.tree_node*, %union.tree_node** %type429, align 8, !dbg !8719
  %call430 = tail call fastcc i32 @gimple_types_compatible_p(%union.tree_node* %70, %union.tree_node* %71) #8, !dbg !8720
  %tobool431 = icmp eq i32 %call430, 0, !dbg !8720
  br i1 %tobool431, label %different_types, label %lor.lhs.false432, !dbg !8721

lor.lhs.false432:                                 ; preds = %sw.bb425
  %maxval434 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8722
  %72 = bitcast %struct.rtx_def** %maxval434 to %union.tree_node**, !dbg !8722
  %73 = load %union.tree_node*, %union.tree_node** %72, align 8, !dbg !8722
  %maxval436 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8723
  %74 = bitcast %struct.rtx_def** %maxval436 to %union.tree_node**, !dbg !8723
  %75 = load %union.tree_node*, %union.tree_node** %74, align 8, !dbg !8723
  %call437 = tail call fastcc i32 @gimple_types_compatible_p(%union.tree_node* %73, %union.tree_node* %75) #8, !dbg !8724
  %tobool438 = icmp eq i32 %call437, 0, !dbg !8724
  br i1 %tobool438, label %different_types, label %same_types, !dbg !8725

sw.bb441:                                         ; preds = %if.end261, %if.end261
  %bf.load448 = load i64, i64* %.lcssa, align 8, !dbg !8726
  %bf.lshr44450 = xor i64 %bf.load263, %bf.load448, !dbg !8729
  %76 = and i64 %bf.lshr44450, 67108864, !dbg !8729
  %cmp452 = icmp eq i64 %76, 0, !dbg !8729
  br i1 %cmp452, label %if.end455, label %different_types, !dbg !8730

if.end455:                                        ; preds = %sw.bb441
  %type457 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8731
  %77 = bitcast %union.tree_node** %type457 to i64**, !dbg !8731
  %78 = load i64*, i64** %77, align 8, !dbg !8731
  %bf.load459 = load i64, i64* %78, align 8, !dbg !8731
  %type463 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8733
  %79 = bitcast %union.tree_node** %type463 to i64**, !dbg !8733
  %80 = load i64*, i64** %79, align 8, !dbg !8733
  %bf.load465 = load i64, i64* %80, align 8, !dbg !8733
  %81 = xor i64 %bf.load459, %bf.load465, !dbg !8734
  %82 = and i64 %81, 65535, !dbg !8734
  %cmp468 = icmp eq i64 %82, 0, !dbg !8734
  %83 = bitcast i64* %78 to %union.tree_node*, !dbg !8735
  %84 = bitcast i64* %80 to %union.tree_node*, !dbg !8735
  br i1 %cmp468, label %land.lhs.true470, label %if.end540, !dbg !8735

land.lhs.true470:                                 ; preds = %if.end455
  %bf.cast47638 = and i64 %bf.load459, 65535, !dbg !8736
  %cmp477 = icmp eq i64 %bf.cast47638, 16, !dbg !8736
  br i1 %cmp477, label %land.lhs.true497, label %lor.lhs.false479, !dbg !8736

lor.lhs.false479:                                 ; preds = %land.lhs.true470
  %cmp486 = icmp eq i64 %bf.cast47638, 17, !dbg !8736
  br i1 %cmp486, label %land.lhs.true497, label %lor.lhs.false488, !dbg !8736

lor.lhs.false488:                                 ; preds = %lor.lhs.false479
  %cmp495 = icmp eq i64 %bf.cast47638, 18, !dbg !8736
  br i1 %cmp495, label %land.lhs.true497, label %if.end540, !dbg !8737

land.lhs.true497:                                 ; preds = %lor.lhs.false488, %lor.lhs.false479, %land.lhs.true470
  %size501 = getelementptr inbounds i64, i64* %78, i64 4, !dbg !8738
  %85 = bitcast i64* %size501 to %union.tree_node**, !dbg !8738
  %86 = load %union.tree_node*, %union.tree_node** %85, align 8, !dbg !8738
  %cmp502 = icmp eq %union.tree_node* %86, null, !dbg !8738
  br i1 %cmp502, label %land.lhs.true497.land.lhs.true511_crit_edge, label %lor.lhs.false504, !dbg !8739

land.lhs.true497.land.lhs.true511_crit_edge:      ; preds = %land.lhs.true497
  br label %land.lhs.true511, !dbg !8739

lor.lhs.false504:                                 ; preds = %land.lhs.true497
  %size508 = getelementptr inbounds i64, i64* %80, i64 4, !dbg !8740
  %87 = bitcast i64* %size508 to %union.tree_node**, !dbg !8740
  %88 = load %union.tree_node*, %union.tree_node** %87, align 8, !dbg !8740
  %cmp509 = icmp eq %union.tree_node* %88, null, !dbg !8740
  br i1 %cmp509, label %land.lhs.true511, label %if.end540, !dbg !8741

land.lhs.true511:                                 ; preds = %land.lhs.true497.land.lhs.true511_crit_edge, %lor.lhs.false504
  %main_variant = getelementptr inbounds i64, i64* %78, i64 16, !dbg !8742
  %89 = bitcast i64* %main_variant to %union.tree_node**, !dbg !8742
  %90 = load %union.tree_node*, %union.tree_node** %89, align 8, !dbg !8742
  %main_variant518 = getelementptr inbounds i64, i64* %80, i64 16, !dbg !8743
  %91 = bitcast i64* %main_variant518 to %union.tree_node**, !dbg !8743
  %92 = load %union.tree_node*, %union.tree_node** %91, align 8, !dbg !8743
  %call519 = tail call fastcc zeroext i8 @compare_type_names_p(%union.tree_node* %90, %union.tree_node* %92, i8 zeroext 1) #8, !dbg !8744
  %tobool521 = icmp eq i8 %call519, 0, !dbg !8744
  br i1 %tobool521, label %land.lhs.true511.if.end540_crit_edge, label %if.then522, !dbg !8745

land.lhs.true511.if.end540_crit_edge:             ; preds = %land.lhs.true511
  %.pre = load %union.tree_node*, %union.tree_node** %type457, align 8, !dbg !8746
  %.pre76 = load %union.tree_node*, %union.tree_node** %type463, align 8, !dbg !8748
  br label %if.end540, !dbg !8745

if.then522:                                       ; preds = %land.lhs.true511
  %.pre-phi = bitcast %union.tree_node** %type463 to %struct.tree_type**, !dbg !8743
  %93 = load %struct.tree_type*, %struct.tree_type** %.pre-phi, align 8, !dbg !8749
  %size526 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %93, i64 0, i32 2, !dbg !8749
  %94 = load %union.tree_node*, %union.tree_node** %size526, align 8, !dbg !8749
  %cmp527 = icmp eq %union.tree_node* %94, null, !dbg !8749
  br i1 %cmp527, label %if.else534, label %if.then529, !dbg !8752

if.then529:                                       ; preds = %if.then522
  %95 = ptrtoint %struct.tree_type* %93 to i64, !dbg !8752
  %96 = bitcast %union.tree_node** %type457 to i64*, !dbg !8753
  store i64 %95, i64* %96, align 8, !dbg !8753
  br label %same_types, !dbg !8754

if.else534:                                       ; preds = %if.then522
  %97 = bitcast %union.tree_node** %type457 to i64*, !dbg !8755
  %98 = load i64, i64* %97, align 8, !dbg !8755
  %99 = bitcast %union.tree_node** %type463 to i64*, !dbg !8756
  store i64 %98, i64* %99, align 8, !dbg !8756
  br label %same_types

if.end540:                                        ; preds = %land.lhs.true511.if.end540_crit_edge, %lor.lhs.false504, %lor.lhs.false488, %if.end455
  %100 = phi %union.tree_node* [ %.pre76, %land.lhs.true511.if.end540_crit_edge ], [ %84, %lor.lhs.false504 ], [ %84, %lor.lhs.false488 ], [ %84, %if.end455 ], !dbg !8748
  %101 = phi %union.tree_node* [ %.pre, %land.lhs.true511.if.end540_crit_edge ], [ %83, %lor.lhs.false504 ], [ %83, %lor.lhs.false488 ], [ %83, %if.end455 ], !dbg !8746
  %call545 = tail call fastcc i32 @gimple_types_compatible_p(%union.tree_node* %101, %union.tree_node* %100) #8, !dbg !8757
  %tobool546 = icmp eq i32 %call545, 0, !dbg !8757
  br i1 %tobool546, label %different_types, label %same_types, !dbg !8758

sw.bb549:                                         ; preds = %if.end261, %if.end261
  %minval552 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !8759
  %102 = bitcast %struct.lang_decl** %minval552 to %union.tree_node**, !dbg !8759
  %103 = load %union.tree_node*, %union.tree_node** %102, align 8, !dbg !8759
  call void @llvm.dbg.value(metadata %union.tree_node* %103, metadata !8507, metadata !DIExpression()), !dbg !8760
  %maxval555 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8761
  %104 = bitcast %struct.rtx_def** %maxval555 to %union.tree_node**, !dbg !8761
  %105 = load %union.tree_node*, %union.tree_node** %104, align 8, !dbg !8761
  call void @llvm.dbg.value(metadata %union.tree_node* %105, metadata !8509, metadata !DIExpression()), !dbg !8760
  %minval558 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 8, !dbg !8762
  %106 = bitcast %struct.lang_decl** %minval558 to %union.tree_node**, !dbg !8762
  %107 = load %union.tree_node*, %union.tree_node** %106, align 8, !dbg !8762
  call void @llvm.dbg.value(metadata %union.tree_node* %107, metadata !8510, metadata !DIExpression()), !dbg !8760
  %maxval561 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8763
  %108 = bitcast %struct.rtx_def** %maxval561 to %union.tree_node**, !dbg !8763
  %109 = load %union.tree_node*, %union.tree_node** %108, align 8, !dbg !8763
  call void @llvm.dbg.value(metadata %union.tree_node* %109, metadata !8511, metadata !DIExpression()), !dbg !8760
  call void @llvm.dbg.value(metadata i8 0, metadata !8512, metadata !DIExpression()), !dbg !8760
  call void @llvm.dbg.value(metadata i8 0, metadata !8513, metadata !DIExpression()), !dbg !8760
  %cmp562 = icmp eq %union.tree_node* %103, null, !dbg !8764
  %cmp565 = icmp eq %union.tree_node* %107, null, !dbg !8766
  %or.cond7 = and i1 %cmp562, %cmp565, !dbg !8767
  br i1 %or.cond7, label %if.end577, label %if.else568, !dbg !8767

if.else568:                                       ; preds = %sw.bb549
  %tobool569 = icmp ne %union.tree_node* %103, null, !dbg !8768
  %tobool571 = icmp ne %union.tree_node* %107, null, !dbg !8770
  %or.cond8 = and i1 %tobool569, %tobool571, !dbg !8771
  br i1 %or.cond8, label %land.lhs.true572, label %if.end577, !dbg !8771

land.lhs.true572:                                 ; preds = %if.else568
  %call573 = tail call i32 @operand_equal_p(%union.tree_node* nonnull %103, %union.tree_node* nonnull %107, i32 0) #7, !dbg !8772
  %tobool574 = icmp ne i32 %call573, 0, !dbg !8772
  %spec.select9 = zext i1 %tobool574 to i8, !dbg !8773
  br label %if.end577, !dbg !8773

if.end577:                                        ; preds = %land.lhs.true572, %if.else568, %sw.bb549
  %min_equal_p.1 = phi i8 [ 1, %sw.bb549 ], [ 0, %if.else568 ], [ %spec.select9, %land.lhs.true572 ], !dbg !8774
  call void @llvm.dbg.value(metadata i8 %min_equal_p.1, metadata !8512, metadata !DIExpression()), !dbg !8760
  %cmp578 = icmp eq %union.tree_node* %105, null, !dbg !8775
  %cmp581 = icmp eq %union.tree_node* %109, null, !dbg !8777
  %or.cond10 = and i1 %cmp578, %cmp581, !dbg !8778
  br i1 %or.cond10, label %if.end593, label %if.else584, !dbg !8778

if.else584:                                       ; preds = %if.end577
  %tobool585 = icmp ne %union.tree_node* %105, null, !dbg !8779
  %tobool587 = icmp ne %union.tree_node* %109, null, !dbg !8781
  %or.cond11 = and i1 %tobool585, %tobool587, !dbg !8782
  br i1 %or.cond11, label %land.lhs.true588, label %if.end593, !dbg !8782

land.lhs.true588:                                 ; preds = %if.else584
  %call589 = tail call i32 @operand_equal_p(%union.tree_node* nonnull %105, %union.tree_node* nonnull %109, i32 0) #7, !dbg !8783
  %tobool590 = icmp ne i32 %call589, 0, !dbg !8783
  br label %if.end593, !dbg !8784

if.end593:                                        ; preds = %land.lhs.true588, %if.else584, %if.end577
  %max_equal_p.1 = phi i1 [ true, %if.end577 ], [ false, %if.else584 ], [ %tobool590, %land.lhs.true588 ]
  %tobool594 = icmp ne i8 %min_equal_p.1, 0, !dbg !8785
  %or.cond13 = and i1 %tobool594, %max_equal_p.1, !dbg !8787
  br i1 %or.cond13, label %same_types, label %different_types

sw.bb605:                                         ; preds = %if.end261
  %values607 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8788
  %110 = bitcast i32* %values607 to %union.tree_node**, !dbg !8788
  %111 = load %union.tree_node*, %union.tree_node** %110, align 8, !dbg !8788
  %values609 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8790
  %112 = bitcast i32* %values609 to %union.tree_node**, !dbg !8790
  %113 = load %union.tree_node*, %union.tree_node** %112, align 8, !dbg !8790
  %cmp610 = icmp eq %union.tree_node* %111, %113, !dbg !8791
  br i1 %cmp610, label %cleanup664, label %if.end613, !dbg !8792

if.end613:                                        ; preds = %sw.bb605
  br label %for.cond618, !dbg !8793

for.cond618:                                      ; preds = %for.inc653, %if.end613
  %v1.0 = phi %union.tree_node* [ %111, %if.end613 ], [ %v1.0.pre, %for.inc653 ], !dbg !8794
  %v2.0 = phi %union.tree_node* [ %113, %if.end613 ], [ %v2.0.pre, %for.inc653 ], !dbg !8794
  call void @llvm.dbg.value(metadata %union.tree_node* %v2.0, metadata !8516, metadata !DIExpression()), !dbg !8795
  call void @llvm.dbg.value(metadata %union.tree_node* %v1.0, metadata !8514, metadata !DIExpression()), !dbg !8795
  %tobool619 = icmp ne %union.tree_node* %v1.0, null, !dbg !8796
  %tobool621 = icmp ne %union.tree_node* %v2.0, null, !dbg !8797
  %spec.select14 = and i1 %tobool621, %tobool619, !dbg !8797
  br i1 %spec.select14, label %for.body623, label %for.end658, !dbg !8798

for.body623:                                      ; preds = %for.cond618
  %114 = getelementptr inbounds %union.tree_node, %union.tree_node* %v1.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8799
  %115 = load %union.tree_node*, %union.tree_node** %114, align 8, !dbg !8799
  call void @llvm.dbg.value(metadata %union.tree_node* %115, metadata !8517, metadata !DIExpression()), !dbg !8800
  %116 = getelementptr inbounds %union.tree_node, %union.tree_node* %v2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8801
  %117 = load %union.tree_node*, %union.tree_node** %116, align 8, !dbg !8801
  call void @llvm.dbg.value(metadata %union.tree_node* %117, metadata !8521, metadata !DIExpression()), !dbg !8800
  %118 = getelementptr inbounds %union.tree_node, %union.tree_node* %115, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8802
  %bf.load629 = load i64, i64* %118, align 8, !dbg !8802
  %bf.cast63136 = and i64 %bf.load629, 65535, !dbg !8804
  %cmp632 = icmp eq i64 %bf.cast63136, 33, !dbg !8804
  br i1 %cmp632, label %if.then634, label %if.end635, !dbg !8805

if.then634:                                       ; preds = %for.body623
  %initial = getelementptr inbounds %union.tree_node, %union.tree_node* %115, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, !dbg !8806
  %119 = load %union.tree_node*, %union.tree_node** %initial, align 8, !dbg !8806
  call void @llvm.dbg.value(metadata %union.tree_node* %119, metadata !8517, metadata !DIExpression()), !dbg !8800
  br label %if.end635, !dbg !8807

if.end635:                                        ; preds = %if.then634, %for.body623
  %c1.0 = phi %union.tree_node* [ %119, %if.then634 ], [ %115, %for.body623 ], !dbg !8800
  call void @llvm.dbg.value(metadata %union.tree_node* %c1.0, metadata !8517, metadata !DIExpression()), !dbg !8800
  %120 = getelementptr inbounds %union.tree_node, %union.tree_node* %117, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8808
  %bf.load637 = load i64, i64* %120, align 8, !dbg !8808
  %bf.cast63937 = and i64 %bf.load637, 65535, !dbg !8810
  %cmp640 = icmp eq i64 %bf.cast63937, 33, !dbg !8810
  br i1 %cmp640, label %if.then642, label %if.end645, !dbg !8811

if.then642:                                       ; preds = %if.end635
  %initial644 = getelementptr inbounds %union.tree_node, %union.tree_node* %117, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, !dbg !8812
  %121 = load %union.tree_node*, %union.tree_node** %initial644, align 8, !dbg !8812
  call void @llvm.dbg.value(metadata %union.tree_node* %121, metadata !8521, metadata !DIExpression()), !dbg !8800
  br label %if.end645, !dbg !8813

if.end645:                                        ; preds = %if.then642, %if.end635
  %c2.0 = phi %union.tree_node* [ %121, %if.then642 ], [ %117, %if.end635 ], !dbg !8800
  call void @llvm.dbg.value(metadata %union.tree_node* %c2.0, metadata !8521, metadata !DIExpression()), !dbg !8800
  %call646 = tail call i32 @tree_int_cst_equal(%union.tree_node* %c1.0, %union.tree_node* %c2.0) #7, !dbg !8814
  %cmp647 = icmp eq i32 %call646, 1, !dbg !8816
  br i1 %cmp647, label %for.inc653, label %cleanup664.loopexit

for.inc653:                                       ; preds = %if.end645
  %chain655 = getelementptr inbounds %union.tree_node, %union.tree_node* %v1.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8817
  %chain657 = getelementptr inbounds %union.tree_node, %union.tree_node* %v2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8818
  %v2.0.pre = load %union.tree_node*, %union.tree_node** %chain657, align 8, !dbg !8794
  %v1.0.pre = load %union.tree_node*, %union.tree_node** %chain655, align 8, !dbg !8794
  br label %for.cond618, !dbg !8819, !llvm.loop !8820

for.end658:                                       ; preds = %for.cond618
  %tobool619.lcssa = phi i1 [ %tobool619, %for.cond618 ], !dbg !8796
  %tobool621.lcssa = phi i1 [ %tobool621, %for.cond618 ], !dbg !8797
  %or.cond15 = or i1 %tobool619.lcssa, %tobool621.lcssa, !dbg !8822
  %spec.select19 = select i1 %or.cond15, i32 2, i32 4, !dbg !8822
  br label %cleanup664, !dbg !8822

cleanup664.loopexit:                              ; preds = %if.end645
  br label %cleanup664

cleanup664:                                       ; preds = %cleanup664.loopexit, %for.end658, %sw.bb605
  %cleanup.dest.slot.5 = phi i32 [ 4, %sw.bb605 ], [ %spec.select19, %for.end658 ], [ 2, %cleanup664.loopexit ]
  switch i32 %cleanup.dest.slot.5, label %cleanup746 [
    i32 2, label %different_types
    i32 4, label %same_types
  ]

sw.bb666:                                         ; preds = %if.end261, %if.end261, %if.end261
  %122 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 1, !dbg !8824
  %123 = load %union.tree_node*, %union.tree_node** %122, align 8, !dbg !8824
  %cmp668 = icmp eq %union.tree_node* %123, null, !dbg !8824
  %124 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 1, !dbg !8826
  %125 = load %union.tree_node*, %union.tree_node** %124, align 8, !dbg !8826
  %cmp672 = icmp eq %union.tree_node* %125, null, !dbg !8826
  %cmp674 = xor i1 %cmp668, %cmp672, !dbg !8827
  br i1 %cmp674, label %cleanup737, label %if.end677, !dbg !8828

if.end677:                                        ; preds = %sw.bb666
  %126 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !8829
  %127 = load %union.tree_node*, %union.tree_node** %126, align 8, !dbg !8829
  %128 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 2, !dbg !8831
  %129 = load %union.tree_node*, %union.tree_node** %128, align 8, !dbg !8831
  %call682 = tail call fastcc zeroext i8 @compare_type_names_p(%union.tree_node* %127, %union.tree_node* %129, i8 zeroext 0) #8, !dbg !8832
  %tobool683 = icmp eq i8 %call682, 0, !dbg !8832
  br i1 %tobool683, label %cleanup737, label %if.end685, !dbg !8833

if.end685:                                        ; preds = %if.end677
  %values687 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1.tr.lcssa98, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8834
  %130 = bitcast i32* %values687 to %union.tree_node**, !dbg !8834
  %values689 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2.tr.lcssa97, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8836
  %131 = bitcast i32* %values689 to %union.tree_node**, !dbg !8836
  br label %for.cond690, !dbg !8837

for.cond690:                                      ; preds = %for.inc726, %if.end685
  %f1.0.in = phi %union.tree_node** [ %130, %if.end685 ], [ %chain728, %for.inc726 ]
  %f2.0.in = phi %union.tree_node** [ %131, %if.end685 ], [ %chain730, %for.inc726 ]
  %f2.0 = load %union.tree_node*, %union.tree_node** %f2.0.in, align 8, !dbg !8838
  %f1.0 = load %union.tree_node*, %union.tree_node** %f1.0.in, align 8, !dbg !8838
  call void @llvm.dbg.value(metadata %union.tree_node* %f2.0, metadata !8524, metadata !DIExpression()), !dbg !8839
  call void @llvm.dbg.value(metadata %union.tree_node* %f1.0, metadata !8522, metadata !DIExpression()), !dbg !8839
  %tobool691 = icmp ne %union.tree_node* %f1.0, null, !dbg !8840
  %tobool693 = icmp ne %union.tree_node* %f2.0, null, !dbg !8842
  %spec.select16 = and i1 %tobool693, %tobool691, !dbg !8842
  br i1 %spec.select16, label %for.body695, label %for.end731, !dbg !8843

for.body695:                                      ; preds = %for.cond690
  %name = getelementptr inbounds %union.tree_node, %union.tree_node* %f1.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8844
  %132 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !8844
  %name697 = getelementptr inbounds %union.tree_node, %union.tree_node* %f2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8847
  %133 = load %union.tree_node*, %union.tree_node** %name697, align 8, !dbg !8847
  %cmp698 = icmp eq %union.tree_node* %132, %133, !dbg !8848
  br i1 %cmp698, label %lor.lhs.false700, label %cleanup737.loopexit, !dbg !8849

lor.lhs.false700:                                 ; preds = %for.body695
  %decl_flag_2 = getelementptr inbounds %union.tree_node, %union.tree_node* %f1.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8850
  %134 = bitcast i40* %decl_flag_2 to i64*, !dbg !8850
  %bf.load702 = load i64, i64* %134, align 8, !dbg !8850
  %decl_flag_2707 = getelementptr inbounds %union.tree_node, %union.tree_node* %f2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8851
  %135 = bitcast i40* %decl_flag_2707 to i64*, !dbg !8851
  %bf.load708 = load i64, i64* %135, align 8, !dbg !8851
  %bf.lshr70349 = xor i64 %bf.load702, %bf.load708, !dbg !8852
  %136 = and i64 %bf.lshr70349, 67108864, !dbg !8852
  %cmp712 = icmp eq i64 %136, 0, !dbg !8852
  br i1 %cmp712, label %lor.lhs.false714, label %cleanup737.loopexit, !dbg !8853

lor.lhs.false714:                                 ; preds = %lor.lhs.false700
  %call715 = tail call zeroext i8 @compare_field_offset(%union.tree_node* nonnull %f1.0, %union.tree_node* nonnull %f2.0) #8, !dbg !8854
  %tobool716 = icmp eq i8 %call715, 0, !dbg !8854
  br i1 %tobool716, label %cleanup737.loopexit, label %lor.lhs.false717, !dbg !8855

lor.lhs.false717:                                 ; preds = %lor.lhs.false714
  %type719 = getelementptr inbounds %union.tree_node, %union.tree_node* %f1.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8856
  %137 = load %union.tree_node*, %union.tree_node** %type719, align 8, !dbg !8856
  %type721 = getelementptr inbounds %union.tree_node, %union.tree_node* %f2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8857
  %138 = load %union.tree_node*, %union.tree_node** %type721, align 8, !dbg !8857
  %call722 = tail call fastcc i32 @gimple_types_compatible_p(%union.tree_node* %137, %union.tree_node* %138) #8, !dbg !8858
  %tobool723 = icmp eq i32 %call722, 0, !dbg !8858
  br i1 %tobool723, label %cleanup737.loopexit, label %for.inc726, !dbg !8859

for.inc726:                                       ; preds = %lor.lhs.false717
  %chain728 = getelementptr inbounds %union.tree_node, %union.tree_node* %f1.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8860
  %chain730 = getelementptr inbounds %union.tree_node, %union.tree_node* %f2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !8861
  br label %for.cond690, !dbg !8862, !llvm.loop !8863

for.end731:                                       ; preds = %for.cond690
  %tobool691.lcssa = phi i1 [ %tobool691, %for.cond690 ], !dbg !8840
  %tobool693.lcssa = phi i1 [ %tobool693, %for.cond690 ], !dbg !8842
  %or.cond17 = or i1 %tobool691.lcssa, %tobool693.lcssa, !dbg !8865
  %spec.select20 = select i1 %or.cond17, i32 2, i32 4, !dbg !8865
  br label %cleanup737, !dbg !8865

cleanup737.loopexit:                              ; preds = %for.body695, %lor.lhs.false700, %lor.lhs.false714, %lor.lhs.false717
  br label %cleanup737

cleanup737:                                       ; preds = %cleanup737.loopexit, %if.end677, %for.end731, %sw.bb666
  %cleanup.dest.slot.6 = phi i32 [ 2, %sw.bb666 ], [ 2, %if.end677 ], [ %spec.select20, %for.end731 ], [ 2, %cleanup737.loopexit ]
  switch i32 %cleanup.dest.slot.6, label %cleanup746 [
    i32 2, label %different_types
    i32 4, label %same_types
  ]

sw.default:                                       ; preds = %if.end261
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3493, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !8867
  br label %different_types, !dbg !8868

different_types:                                  ; preds = %lor.lhs.false285, %lor.lhs.false272, %sw.bb, %sw.bb373, %if.else390, %sw.bb382, %lor.lhs.false432, %sw.bb425, %if.end540, %sw.bb441, %cond.end253, %if.end593, %sw.default, %cleanup737, %cleanup664, %cleanup423, %cleanup371
  call void @llvm.dbg.label(metadata !8525), !dbg !8869
  store i32 0, i32* %same_p, align 4, !dbg !8870
  br label %cleanup746, !dbg !8871

same_types:                                       ; preds = %lor.lhs.false432, %if.end540, %if.end593, %if.then529, %if.else534, %if.end394, %cleanup737, %cleanup664, %cleanup423, %cleanup371
  call void @llvm.dbg.label(metadata !8526), !dbg !8872
  store i32 1, i32* %same_p, align 4, !dbg !8873
  br label %cleanup746, !dbg !8874

cleanup746.loopexit:                              ; preds = %tailrecurse, %if.end, %if.end61, %lor.lhs.false203, %if.end197, %if.end4, %if.end11, %if.then116, %lor.lhs.false121, %cond.end153, %lor.lhs.false156, %land.lhs.true, %lor.lhs.false185
  %retval.0.ph = phi i32 [ 1, %if.end197 ], [ 1, %lor.lhs.false203 ], [ 0, %land.lhs.true ], [ 0, %lor.lhs.false185 ], [ 0, %if.then116 ], [ 0, %lor.lhs.false121 ], [ 0, %cond.end153 ], [ 0, %lor.lhs.false156 ], [ 1, %if.end61 ], [ 0, %if.end11 ], [ 0, %if.end4 ], [ 0, %if.end ], [ 1, %tailrecurse ]
  br label %cleanup746, !dbg !8875

cleanup746:                                       ; preds = %cleanup746.loopexit, %if.end228, %if.else, %same_types, %different_types, %cleanup737, %cleanup664, %cleanup423, %cleanup371, %if.then239
  %retval.0 = phi i32 [ %conv, %if.then239 ], [ 0, %different_types ], [ undef, %cleanup737 ], [ 1, %same_types ], [ undef, %cleanup664 ], [ undef, %cleanup423 ], [ undef, %cleanup371 ], [ 0, %if.end228 ], [ 1, %if.else ], [ %retval.0.ph, %cleanup746.loopexit ]
  ret i32 %retval.0, !dbg !8875
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct.type_pair_d* @lookup_type_pair(%union.tree_node* %t1, %union.tree_node* %t2, %struct.htab** %visited_p, %struct.obstack* %ob_p) unnamed_addr #5 !dbg !8876 {
entry:
  %pair = alloca %struct.type_pair_d, align 4
  call void @llvm.dbg.value(metadata %union.tree_node* %t1, metadata !8881, metadata !DIExpression()), !dbg !8888
  call void @llvm.dbg.value(metadata %union.tree_node* %t2, metadata !8882, metadata !DIExpression()), !dbg !8888
  call void @llvm.dbg.value(metadata %struct.htab** @gtc_visited, metadata !8883, metadata !DIExpression()), !dbg !8888
  call void @llvm.dbg.value(metadata %struct.obstack* @gtc_ob, metadata !8884, metadata !DIExpression()), !dbg !8888
  %0 = bitcast %struct.type_pair_d* %pair to i8*, !dbg !8889
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %0) #6, !dbg !8889
  %1 = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8890
  %cmp = icmp eq %struct.htab* %1, null, !dbg !8892
  br i1 %cmp, label %if.then, label %if.end, !dbg !8893

if.then:                                          ; preds = %entry
  %call = tail call %struct.htab* @htab_create(i64 251, i32 (i8*)* nonnull @type_pair_hash, i32 (i8*, i8*)* nonnull @type_pair_eq, void (i8*)* null) #7, !dbg !8894
  store %struct.htab* %call, %struct.htab** @gtc_visited, align 8, !dbg !8896
  %call1 = tail call i32 @_obstack_begin(%struct.obstack* nonnull @gtc_ob, i32 0, i32 0, i8* (i64)* nonnull @xmalloc, void (i8*)* nonnull @free) #7, !dbg !8897
  %.pre = load %struct.htab*, %struct.htab** @gtc_visited, align 8, !dbg !8898
  br label %if.end, !dbg !8899

if.end:                                           ; preds = %if.then, %entry
  %2 = phi %struct.htab* [ %.pre, %if.then ], [ %1, %entry ], !dbg !8898
  %uid = getelementptr inbounds %union.tree_node, %union.tree_node* %t1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8900
  %3 = bitcast i40* %uid to i32*, !dbg !8900
  %4 = load i32, i32* %3, align 8, !dbg !8900
  %uid1 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %pair, i64 0, i32 0, !dbg !8901
  store i32 %4, i32* %uid1, align 4, !dbg !8902
  %uid3 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !8903
  %5 = bitcast i40* %uid3 to i32*, !dbg !8903
  %6 = load i32, i32* %5, align 8, !dbg !8903
  %uid2 = getelementptr inbounds %struct.type_pair_d, %struct.type_pair_d* %pair, i64 0, i32 1, !dbg !8904
  store i32 %6, i32* %uid2, align 4, !dbg !8905
  %call4 = call i8** @htab_find_slot(%struct.htab* %2, i8* nonnull %0, i32 1) #7, !dbg !8906
  call void @llvm.dbg.value(metadata i8** %call4, metadata !8887, metadata !DIExpression()), !dbg !8888
  %7 = load i8*, i8** %call4, align 8, !dbg !8907
  %tobool = icmp eq i8* %7, null, !dbg !8907
  br i1 %tobool, label %if.else, label %if.then5, !dbg !8909

if.then5:                                         ; preds = %if.end
  call void @llvm.dbg.value(metadata i8* %7, metadata !8886, metadata !DIExpression()), !dbg !8888
  br label %if.end55, !dbg !8910

if.else:                                          ; preds = %if.end
  store i64 12, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 5), align 8, !dbg !8911
  %8 = load i64, i64* bitcast (i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 4) to i64*), align 8, !dbg !8911
  %9 = load i64, i64* bitcast (i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 3) to i64*), align 8, !dbg !8911
  %sub.ptr.sub = sub i64 %8, %9, !dbg !8911
  %cmp7 = icmp slt i64 %sub.ptr.sub, 12, !dbg !8911
  %10 = inttoptr i64 %9 to i8*, !dbg !8911
  br i1 %cmp7, label %cond.true, label %cond.end, !dbg !8911

cond.true:                                        ; preds = %if.else
  call void @_obstack_newchunk(%struct.obstack* nonnull @gtc_ob, i32 12) #7, !dbg !8911
  %.pre1 = load i64, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 5), align 8, !dbg !8911
  %.pre2 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 3), align 8, !dbg !8911
  br label %cond.end, !dbg !8911

cond.end:                                         ; preds = %if.else, %cond.true
  %11 = phi i8* [ %10, %if.else ], [ %.pre2, %cond.true ], !dbg !8911
  %12 = phi i64 [ 12, %if.else ], [ %.pre1, %cond.true ], !dbg !8911
  %add.ptr = getelementptr inbounds i8, i8* %11, i64 %12, !dbg !8911
  store i8* %add.ptr, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 3), align 8, !dbg !8911
  %13 = load i8*, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 2), align 8, !dbg !8911
  %cmp12 = icmp eq i8* %add.ptr, %13, !dbg !8911
  %14 = ptrtoint i8* %13 to i64, !dbg !8911
  %15 = ptrtoint i8* %add.ptr to i64, !dbg !8911
  br i1 %cmp12, label %cond.true14, label %cond.end16, !dbg !8911

cond.true14:                                      ; preds = %cond.end
  %bf.load = load i8, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 10), align 8, !dbg !8911
  %bf.set = or i8 %bf.load, 2, !dbg !8911
  store i8 %bf.set, i8* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 10), align 8, !dbg !8911
  br label %cond.end16, !dbg !8911

cond.end16:                                       ; preds = %cond.end, %cond.true14
  store i64 %14, i64* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 5), align 8, !dbg !8911
  %16 = load i32, i32* getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 6), align 8, !dbg !8911
  %conv25 = sext i32 %16 to i64, !dbg !8911
  %add = add nsw i64 %15, %conv25, !dbg !8911
  %neg = xor i32 %16, -1, !dbg !8911
  %conv27 = sext i32 %neg to i64, !dbg !8911
  %and = and i64 %add, %conv27, !dbg !8911
  %17 = inttoptr i64 %and to i8*, !dbg !8911
  store i8* %17, i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 3), align 8, !dbg !8911
  %18 = load i64, i64* bitcast (%struct._obstack_chunk** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 1) to i64*), align 8, !dbg !8911
  %sub.ptr.sub32 = sub i64 %and, %18, !dbg !8911
  %19 = load i64, i64* bitcast (i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 4) to i64*), align 8, !dbg !8911
  %sub.ptr.sub37 = sub i64 %19, %18, !dbg !8911
  %cmp38 = icmp sgt i64 %sub.ptr.sub32, %sub.ptr.sub37, !dbg !8911
  br i1 %cmp38, label %cond.true40, label %cond.end44, !dbg !8911

cond.true40:                                      ; preds = %cond.end16
  store i64 %19, i64* bitcast (i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 3) to i64*), align 8, !dbg !8911
  br label %cond.end44, !dbg !8911

cond.end44:                                       ; preds = %cond.end16, %cond.true40
  %20 = phi i64 [ %and, %cond.end16 ], [ %19, %cond.true40 ], !dbg !8911
  store i64 %20, i64* bitcast (i8** getelementptr inbounds (%struct.obstack, %struct.obstack* @gtc_ob, i64 0, i32 2) to i64*), align 8, !dbg !8911
  call void @llvm.dbg.value(metadata i8* %13, metadata !8886, metadata !DIExpression()), !dbg !8888
  %21 = load i32, i32* %3, align 8, !dbg !8913
  %uid151 = bitcast i8* %13 to i32*, !dbg !8914
  store i32 %21, i32* %uid151, align 4, !dbg !8915
  %22 = load i32, i32* %5, align 8, !dbg !8916
  %uid254 = getelementptr inbounds i8, i8* %13, i64 4, !dbg !8917
  %23 = bitcast i8* %uid254 to i32*, !dbg !8917
  store i32 %22, i32* %23, align 4, !dbg !8918
  %same_p = getelementptr inbounds i8, i8* %13, i64 8, !dbg !8919
  %24 = bitcast i8* %same_p to i32*, !dbg !8919
  store i32 -2, i32* %24, align 4, !dbg !8920
  store i8* %13, i8** %call4, align 8, !dbg !8921
  br label %if.end55

if.end55:                                         ; preds = %cond.end44, %if.then5
  %p.0.in = phi i8* [ %7, %if.then5 ], [ %13, %cond.end44 ]
  %p.0 = bitcast i8* %p.0.in to %struct.type_pair_d*, !dbg !8922
  call void @llvm.dbg.value(metadata %struct.type_pair_d* %p.0, metadata !8886, metadata !DIExpression()), !dbg !8888
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %0) #6, !dbg !8923
  ret %struct.type_pair_d* %p.0, !dbg !8924
}

declare dso_local i32 @attribute_list_equal(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @compare_type_names_p(%union.tree_node* %t1, %union.tree_node* %t2, i8 zeroext %for_completion_p) unnamed_addr #5 !dbg !8925 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t1, metadata !8929, metadata !DIExpression()), !dbg !8934
  call void @llvm.dbg.value(metadata %union.tree_node* %t2, metadata !8930, metadata !DIExpression()), !dbg !8934
  call void @llvm.dbg.value(metadata i8 %for_completion_p, metadata !8931, metadata !DIExpression()), !dbg !8934
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %t1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, !dbg !8935
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !8935
  call void @llvm.dbg.value(metadata %union.tree_node* %1, metadata !8932, metadata !DIExpression()), !dbg !8934
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %t2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, !dbg !8936
  %3 = load %union.tree_node*, %union.tree_node** %2, align 8, !dbg !8936
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !8933, metadata !DIExpression()), !dbg !8934
  %tobool = icmp eq i8 %for_completion_p, 0, !dbg !8937
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !8939

land.lhs.true:                                    ; preds = %entry
  %tobool4 = icmp ne %union.tree_node* %1, null, !dbg !8940
  %tobool5 = icmp ne %union.tree_node* %3, null, !dbg !8941
  %or.cond = and i1 %tobool4, %tobool5, !dbg !8942
  br i1 %or.cond, label %if.end, label %cleanup, !dbg !8942

if.end:                                           ; preds = %entry, %land.lhs.true
  %tobool6 = icmp eq %union.tree_node* %1, null, !dbg !8943
  br i1 %tobool6, label %if.end17, label %land.lhs.true7, !dbg !8945

land.lhs.true7:                                   ; preds = %if.end
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8946
  %bf.load = load i64, i64* %4, align 8, !dbg !8946
  %bf.cast6 = and i64 %bf.load, 65535, !dbg !8947
  %cmp = icmp eq i64 %bf.cast6, 35, !dbg !8947
  br i1 %cmp, label %if.then9, label %if.end17, !dbg !8948

if.then9:                                         ; preds = %land.lhs.true7
  %name10 = getelementptr inbounds %union.tree_node, %union.tree_node* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8949
  %5 = load %union.tree_node*, %union.tree_node** %name10, align 8, !dbg !8949
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !8932, metadata !DIExpression()), !dbg !8934
  %tobool14 = icmp ne %union.tree_node* %5, null, !dbg !8951
  %or.cond1 = or i1 %tobool, %tobool14, !dbg !8953
  br i1 %or.cond1, label %if.end17, label %cleanup, !dbg !8953

if.end17:                                         ; preds = %if.end, %if.then9, %land.lhs.true7
  %name1.0 = phi %union.tree_node* [ %1, %land.lhs.true7 ], [ null, %if.end ], [ %5, %if.then9 ], !dbg !8934
  call void @llvm.dbg.value(metadata %union.tree_node* %name1.0, metadata !8932, metadata !DIExpression()), !dbg !8934
  %tobool18 = icmp eq %union.tree_node* %name1.0, null, !dbg !8954
  br i1 %tobool18, label %cond.end, label %lor.lhs.false19, !dbg !8954

lor.lhs.false19:                                  ; preds = %if.end17
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %name1.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8954
  %bf.load21 = load i64, i64* %6, align 8, !dbg !8954
  %bf.cast235 = and i64 %bf.load21, 65535, !dbg !8954
  %cmp24 = icmp eq i64 %bf.cast235, 1, !dbg !8954
  br i1 %cmp24, label %cond.end, label %cond.true, !dbg !8954

cond.true:                                        ; preds = %lor.lhs.false19
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !8954
  br label %cond.end, !dbg !8954

cond.end:                                         ; preds = %if.end17, %lor.lhs.false19, %cond.true
  %tobool26 = icmp eq %union.tree_node* %3, null, !dbg !8955
  br i1 %tobool26, label %if.end43, label %land.lhs.true27, !dbg !8957

land.lhs.true27:                                  ; preds = %cond.end
  %7 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8958
  %bf.load29 = load i64, i64* %7, align 8, !dbg !8958
  %bf.cast314 = and i64 %bf.load29, 65535, !dbg !8959
  %cmp32 = icmp eq i64 %bf.cast314, 35, !dbg !8959
  br i1 %cmp32, label %if.then34, label %if.end43, !dbg !8960

if.then34:                                        ; preds = %land.lhs.true27
  %name36 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8961
  %8 = load %union.tree_node*, %union.tree_node** %name36, align 8, !dbg !8961
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !8933, metadata !DIExpression()), !dbg !8934
  %tobool40 = icmp ne %union.tree_node* %8, null, !dbg !8963
  %or.cond2 = or i1 %tobool, %tobool40, !dbg !8965
  br i1 %or.cond2, label %if.end43, label %cleanup, !dbg !8965

if.end43:                                         ; preds = %cond.end, %if.then34, %land.lhs.true27
  %name2.0 = phi %union.tree_node* [ %3, %land.lhs.true27 ], [ null, %cond.end ], [ %8, %if.then34 ], !dbg !8934
  call void @llvm.dbg.value(metadata %union.tree_node* %name2.0, metadata !8933, metadata !DIExpression()), !dbg !8934
  %tobool44 = icmp eq %union.tree_node* %name2.0, null, !dbg !8966
  br i1 %tobool44, label %cond.end54, label %lor.lhs.false45, !dbg !8966

lor.lhs.false45:                                  ; preds = %if.end43
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %name2.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8966
  %bf.load47 = load i64, i64* %9, align 8, !dbg !8966
  %bf.cast493 = and i64 %bf.load47, 65535, !dbg !8966
  %cmp50 = icmp eq i64 %bf.cast493, 1, !dbg !8966
  br i1 %cmp50, label %cond.end54, label %cond.true52, !dbg !8966

cond.true52:                                      ; preds = %lor.lhs.false45
  tail call void @fancy_abort(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.35, i64 0, i64 0), i32 3117, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !8966
  br label %cond.end54, !dbg !8966

cond.end54:                                       ; preds = %if.end43, %lor.lhs.false45, %cond.true52
  %cmp56 = icmp eq %union.tree_node* %name1.0, %name2.0, !dbg !8967
  %. = zext i1 %cmp56 to i8, !dbg !8934
  br label %cleanup, !dbg !8934

cleanup:                                          ; preds = %cond.end54, %if.then34, %if.then9, %land.lhs.true
  %retval.0 = phi i8 [ 0, %land.lhs.true ], [ 0, %if.then9 ], [ 0, %if.then34 ], [ %., %cond.end54 ], !dbg !8934
  ret i8 %retval.0, !dbg !8969
}

; Function Attrs: nounwind uwtable
define internal i32 @type_pair_hash(i8* %p) #5 !dbg !8970 {
entry:
  call void @llvm.dbg.value(metadata i8* %p, metadata !8972, metadata !DIExpression()), !dbg !8976
  call void @llvm.dbg.value(metadata i8* %p, metadata !8973, metadata !DIExpression()), !dbg !8976
  %uid1 = bitcast i8* %p to i32*, !dbg !8977
  %0 = load i32, i32* %uid1, align 4, !dbg !8977
  call void @llvm.dbg.value(metadata i32 %0, metadata !8974, metadata !DIExpression()), !dbg !8976
  %uid2 = getelementptr inbounds i8, i8* %p, i64 4, !dbg !8978
  %1 = bitcast i8* %uid2 to i32*, !dbg !8978
  %2 = load i32, i32* %1, align 4, !dbg !8978
  call void @llvm.dbg.value(metadata i32 %2, metadata !8975, metadata !DIExpression()), !dbg !8976
  %call = tail call i32 @iterative_hash_hashval_t(i32 %2, i32 %0) #7, !dbg !8979
  %call1 = tail call i32 @iterative_hash_hashval_t(i32 %0, i32 %2) #7, !dbg !8980
  %xor = xor i32 %call, %call1, !dbg !8981
  ret i32 %xor, !dbg !8982
}

; Function Attrs: nounwind uwtable
define internal i32 @type_pair_eq(i8* %p1, i8* %p2) #5 !dbg !8983 {
entry:
  call void @llvm.dbg.value(metadata i8* %p1, metadata !8985, metadata !DIExpression()), !dbg !8989
  call void @llvm.dbg.value(metadata i8* %p2, metadata !8986, metadata !DIExpression()), !dbg !8989
  call void @llvm.dbg.value(metadata i8* %p1, metadata !8987, metadata !DIExpression()), !dbg !8989
  call void @llvm.dbg.value(metadata i8* %p2, metadata !8988, metadata !DIExpression()), !dbg !8989
  %uid1 = bitcast i8* %p1 to i32*, !dbg !8990
  %0 = load i32, i32* %uid1, align 4, !dbg !8990
  %uid11 = bitcast i8* %p2 to i32*, !dbg !8991
  %1 = load i32, i32* %uid11, align 4, !dbg !8991
  %cmp = icmp eq i32 %0, %1, !dbg !8992
  br i1 %cmp, label %land.lhs.true, label %entry.lor.rhs_crit_edge, !dbg !8993

entry.lor.rhs_crit_edge:                          ; preds = %entry
  %uid25.phi.trans.insert = getelementptr inbounds i8, i8* %p2, i64 4, !dbg !8989
  %.phi.trans.insert = bitcast i8* %uid25.phi.trans.insert to i32*, !dbg !8989
  %.pre = load i32, i32* %.phi.trans.insert, align 4, !dbg !8994
  br label %lor.rhs, !dbg !8993

land.lhs.true:                                    ; preds = %entry
  call void @llvm.dbg.value(metadata i8* %p2, metadata !8988, metadata !DIExpression()), !dbg !8989
  call void @llvm.dbg.value(metadata i8* %p1, metadata !8987, metadata !DIExpression()), !dbg !8989
  %uid2 = getelementptr inbounds i8, i8* %p1, i64 4, !dbg !8995
  %2 = bitcast i8* %uid2 to i32*, !dbg !8995
  %3 = load i32, i32* %2, align 4, !dbg !8995
  %uid22 = getelementptr inbounds i8, i8* %p2, i64 4, !dbg !8996
  %4 = bitcast i8* %uid22 to i32*, !dbg !8996
  %5 = load i32, i32* %4, align 4, !dbg !8996
  %cmp3 = icmp eq i32 %3, %5, !dbg !8997
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !8998

lor.rhs:                                          ; preds = %entry.lor.rhs_crit_edge, %land.lhs.true
  %6 = phi i32 [ %.pre, %entry.lor.rhs_crit_edge ], [ %5, %land.lhs.true ], !dbg !8994
  %cmp6 = icmp eq i32 %0, %6, !dbg !8999
  br i1 %cmp6, label %land.rhs, label %lor.end, !dbg !9000

land.rhs:                                         ; preds = %lor.rhs
  %uid27 = getelementptr inbounds i8, i8* %p1, i64 4, !dbg !9001
  %7 = bitcast i8* %uid27 to i32*, !dbg !9001
  %8 = load i32, i32* %7, align 4, !dbg !9001
  %cmp9 = icmp eq i32 %8, %1, !dbg !9002
  %phitmp = zext i1 %cmp9 to i32
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs, %land.lhs.true
  %9 = phi i32 [ 1, %land.lhs.true ], [ 0, %lor.rhs ], [ %phitmp, %land.rhs ]
  ret i32 %9, !dbg !9003
}

declare dso_local %union.tree_node* @build_nonstandard_integer_type(i64, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !9004 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !9008, metadata !DIExpression()), !dbg !9011
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !9009, metadata !DIExpression()), !dbg !9011
  call void @llvm.dbg.value(metadata i32 1, metadata !9010, metadata !DIExpression()), !dbg !9011
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !9012
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !9013
  br i1 true, label %land.lhs.true16, label %entry.if.end_crit_edge, !dbg !9014

entry.if.end_crit_edge:                           ; preds = %entry
  br label %if.end, !dbg !9014

land.lhs.true16:                                  ; preds = %entry
  br i1 true, label %if.end, label %land.lhs.true19, !dbg !9016

land.lhs.true19:                                  ; preds = %land.lhs.true16
  br i1 undef, label %land.lhs.true19.if.end_crit_edge, label %if.then, !dbg !9017

land.lhs.true19.if.end_crit_edge:                 ; preds = %land.lhs.true19
  br label %if.end, !dbg !9017

if.then:                                          ; preds = %land.lhs.true19
  br label %if.end, !dbg !9018

if.end:                                           ; preds = %land.lhs.true19.if.end_crit_edge, %entry.if.end_crit_edge, %land.lhs.true16, %if.then
  br i1 false, label %if.end.cond.end28_crit_edge, label %cond.true25, !dbg !9019

if.end.cond.end28_crit_edge:                      ; preds = %if.end
  br label %cond.end28, !dbg !9019

cond.true25:                                      ; preds = %if.end
  %call26 = tail call fastcc %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %stmt) #8, !dbg !9020
  br label %cond.end28, !dbg !9019

cond.end28:                                       ; preds = %if.end.cond.end28_crit_edge, %cond.true25
  %0 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ undef, %if.end.cond.end28_crit_edge ], !dbg !9019
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !9021
  store %struct.use_optype_d* %0, %struct.use_optype_d** %uses, align 8, !dbg !9022
  br i1 true, label %land.lhs.true32, label %cond.end28.if.end42_crit_edge, !dbg !9023

cond.end28.if.end42_crit_edge:                    ; preds = %cond.end28
  br label %if.end42, !dbg !9023

land.lhs.true32:                                  ; preds = %cond.end28
  %tobool34 = icmp eq %struct.use_optype_d* %0, null, !dbg !9025
  br i1 %tobool34, label %if.end42, label %land.lhs.true35, !dbg !9026

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %call36 = tail call fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %stmt) #8, !dbg !9027
  %cmp37 = icmp eq %union.tree_node* %call36, null, !dbg !9028
  br i1 %cmp37, label %if.end42, label %if.then38, !dbg !9029

if.then38:                                        ; preds = %land.lhs.true35
  %1 = bitcast %struct.use_optype_d** %uses to i64**, !dbg !9030
  %2 = load i64*, i64** %1, align 8, !dbg !9030
  %3 = load i64, i64* %2, align 8, !dbg !9031
  %4 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !9032
  store i64 %3, i64* %4, align 8, !dbg !9032
  br label %if.end42, !dbg !9033

if.end42:                                         ; preds = %cond.end28.if.end42_crit_edge, %land.lhs.true35, %land.lhs.true32, %if.then38
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !9034
  store i8 0, i8* %done, align 8, !dbg !9035
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !9036
  store i32 0, i32* %phi_i, align 8, !dbg !9037
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !9038
  store i32 0, i32* %num_phi, align 4, !dbg !9039
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !9040
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !9041
  ret void, !dbg !9042
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !9043 {
entry:
  unreachable, !dbg !9048
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !9049 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !9053, metadata !DIExpression()), !dbg !9054
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #8, !dbg !9055
  %tobool = icmp eq i8 %call, 0, !dbg !9055
  br i1 %tobool, label %return, label %if.end, !dbg !9057

if.end:                                           ; preds = %entry
  %use_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !9058
  %0 = bitcast %union.tree_node** %use_ops to %struct.use_optype_d**, !dbg !9058
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %0, align 8, !dbg !9058
  br label %return, !dbg !9059

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %struct.use_optype_d* [ %1, %if.end ], [ null, %entry ], !dbg !9054
  ret %struct.use_optype_d* %retval.0, !dbg !9060
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_def_from_ptr(%union.tree_node** %def) unnamed_addr #0 !dbg !9061 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node** %def, metadata !9066, metadata !DIExpression()), !dbg !9067
  %0 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !9068
  ret %union.tree_node* %0, !dbg !9069
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !9070 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !9075, metadata !DIExpression()), !dbg !9077
  call void @llvm.dbg.value(metadata i32 %index, metadata !9076, metadata !DIExpression()), !dbg !9077
  %capacity = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !9078
  %0 = load i32, i32* %capacity, align 8, !dbg !9078
  %cmp = icmp ult i32 %0, %index, !dbg !9078
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !9078

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.42, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0)) #7, !dbg !9078
  br label %cond.end, !dbg !9078

cond.end:                                         ; preds = %entry, %cond.true
  %idxprom = zext i32 %index to i64, !dbg !9079
  %arrayidx = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 %idxprom, !dbg !9079
  ret %struct.phi_arg_d* %arrayidx, !dbg !9080
}

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { nobuiltin nounwind }
attributes #8 = { nobuiltin }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!1657, !1658, !1659}
!llvm.ident = !{!1660}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "gimple_ops_offset_", scope: !2, file: !3, line: 57, type: !1651, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !369, globals: !1609, nameTableKind: None)
!3 = !DIFile(filename: "gimple.c", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!4 = !{!5, !33, !39, !44, !49, !68, !75, !82, !276, !314, !320, !326, !358, !362}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !6, line: 727, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./gimple.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32}
!9 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!33 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !34, line: 363, baseType: !7, size: 32, elements: !35)
!34 = !DIFile(filename: "./basic-block.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!35 = !{!36, !37, !38}
!36 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!37 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!38 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!39 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !34, line: 355, baseType: !7, size: 32, elements: !40)
!40 = !{!41, !42, !43}
!41 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!42 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!43 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!44 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !45, line: 474, baseType: !7, size: 32, elements: !46)
!45 = !DIFile(filename: "./config/i386/i386.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!46 = !{!47, !48}
!47 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!48 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!49 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !50, line: 280, baseType: !7, size: 32, elements: !51)
!50 = !DIFile(filename: "./tree.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!51 = !{!52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67}
!52 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!53 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!54 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!55 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!56 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!57 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!58 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!59 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!60 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!61 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!62 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!63 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!64 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!65 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!66 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!67 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!68 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !50, line: 1817, baseType: !7, size: 32, elements: !69)
!69 = !{!70, !71, !72, !73, !74}
!70 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!71 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!72 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!73 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!74 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!75 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !50, line: 1805, baseType: !7, size: 32, elements: !76)
!76 = !{!77, !78, !79, !80, !81}
!77 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!78 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!79 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!80 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!81 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!82 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !50, line: 39, baseType: !7, size: 32, elements: !83)
!83 = !{!84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275}
!84 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!85 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!86 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!87 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!88 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!89 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!90 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!91 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!92 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!93 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!94 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!95 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!96 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!97 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!98 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!99 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!100 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!101 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!102 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!103 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!104 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!105 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!106 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!107 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!108 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!109 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!110 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!111 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!112 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!113 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!114 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!115 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!116 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!117 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!118 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!119 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!120 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!121 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!122 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!123 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!124 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!125 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!126 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!127 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!128 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!129 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!130 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!131 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!132 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!133 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!134 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!135 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!136 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!137 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!138 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!139 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!140 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!141 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!142 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!143 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!144 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!145 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!146 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!147 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!148 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!149 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!150 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!151 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!152 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!153 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!154 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!155 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!156 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!157 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!158 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!159 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!160 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!161 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!162 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!163 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!164 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!165 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!166 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!167 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!168 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!169 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!170 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!171 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!172 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!173 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!174 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!175 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!176 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!177 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!178 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!179 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!180 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!181 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!182 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!183 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!184 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!185 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!186 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!187 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!188 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!189 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!190 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!191 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!192 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!193 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!194 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!195 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!196 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!197 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!198 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!199 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!200 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!201 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!202 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!203 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!204 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!205 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!206 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!207 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!208 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!209 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!210 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!211 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!212 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!213 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!214 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!215 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!216 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!217 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!218 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!219 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!220 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!221 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!222 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!223 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!224 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!225 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!226 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!227 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!228 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!229 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!230 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!231 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!232 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!233 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!234 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!235 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!236 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!237 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!238 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!239 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!240 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!241 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!242 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!243 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!244 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!245 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!246 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!247 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!248 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!249 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!250 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!251 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!252 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!253 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!254 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!255 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!256 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!257 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!258 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!259 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!260 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!261 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!262 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!263 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!264 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!265 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!266 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!267 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!268 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!269 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!270 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!271 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!272 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!273 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!274 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!275 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!276 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !6, line: 51, baseType: !7, size: 32, elements: !277)
!277 = !{!278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313}
!278 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!279 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!280 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!281 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!282 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!283 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!284 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!285 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!286 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!287 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!288 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!289 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!290 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!291 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!292 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!293 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!294 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!295 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!296 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!297 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!298 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!299 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!300 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!301 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!302 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!303 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!304 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!305 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!306 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!307 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!308 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!309 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!310 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!311 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!312 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!313 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!314 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !6, line: 80, baseType: !7, size: 32, elements: !315)
!315 = !{!316, !317, !318, !319}
!316 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!317 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!318 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!319 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!320 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_try_flags", file: !6, line: 514, baseType: !7, size: 32, elements: !321)
!321 = !{!322, !323, !324, !325}
!322 = !DIEnumerator(name: "GIMPLE_TRY_CATCH", value: 1, isUnsigned: true)
!323 = !DIEnumerator(name: "GIMPLE_TRY_FINALLY", value: 2, isUnsigned: true)
!324 = !DIEnumerator(name: "GIMPLE_TRY_KIND", value: 3, isUnsigned: true)
!325 = !DIEnumerator(name: "GIMPLE_TRY_CATCH_IS_CLEANUP", value: 4, isUnsigned: true)
!326 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "br_predictor", file: !327, line: 24, baseType: !7, size: 32, elements: !328)
!327 = !DIFile(filename: "./predict.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!328 = !{!329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357}
!329 = !DIEnumerator(name: "PRED_COMBINED", value: 0, isUnsigned: true)
!330 = !DIEnumerator(name: "PRED_DS_THEORY", value: 1, isUnsigned: true)
!331 = !DIEnumerator(name: "PRED_FIRST_MATCH", value: 2, isUnsigned: true)
!332 = !DIEnumerator(name: "PRED_NO_PREDICTION", value: 3, isUnsigned: true)
!333 = !DIEnumerator(name: "PRED_UNCONDITIONAL", value: 4, isUnsigned: true)
!334 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS", value: 5, isUnsigned: true)
!335 = !DIEnumerator(name: "PRED_BUILTIN_EXPECT", value: 6, isUnsigned: true)
!336 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS_GUESSED", value: 7, isUnsigned: true)
!337 = !DIEnumerator(name: "PRED_CONTINUE", value: 8, isUnsigned: true)
!338 = !DIEnumerator(name: "PRED_NORETURN", value: 9, isUnsigned: true)
!339 = !DIEnumerator(name: "PRED_COLD_FUNCTION", value: 10, isUnsigned: true)
!340 = !DIEnumerator(name: "PRED_LOOP_BRANCH", value: 11, isUnsigned: true)
!341 = !DIEnumerator(name: "PRED_LOOP_EXIT", value: 12, isUnsigned: true)
!342 = !DIEnumerator(name: "PRED_POINTER", value: 13, isUnsigned: true)
!343 = !DIEnumerator(name: "PRED_TREE_POINTER", value: 14, isUnsigned: true)
!344 = !DIEnumerator(name: "PRED_OPCODE_POSITIVE", value: 15, isUnsigned: true)
!345 = !DIEnumerator(name: "PRED_OPCODE_NONEQUAL", value: 16, isUnsigned: true)
!346 = !DIEnumerator(name: "PRED_FPOPCODE", value: 17, isUnsigned: true)
!347 = !DIEnumerator(name: "PRED_TREE_OPCODE_POSITIVE", value: 18, isUnsigned: true)
!348 = !DIEnumerator(name: "PRED_TREE_OPCODE_NONEQUAL", value: 19, isUnsigned: true)
!349 = !DIEnumerator(name: "PRED_TREE_FPOPCODE", value: 20, isUnsigned: true)
!350 = !DIEnumerator(name: "PRED_CALL", value: 21, isUnsigned: true)
!351 = !DIEnumerator(name: "PRED_TREE_EARLY_RETURN", value: 22, isUnsigned: true)
!352 = !DIEnumerator(name: "PRED_GOTO", value: 23, isUnsigned: true)
!353 = !DIEnumerator(name: "PRED_CONST_RETURN", value: 24, isUnsigned: true)
!354 = !DIEnumerator(name: "PRED_NEGATIVE_RETURN", value: 25, isUnsigned: true)
!355 = !DIEnumerator(name: "PRED_NULL_RETURN", value: 26, isUnsigned: true)
!356 = !DIEnumerator(name: "PRED_MUDFLAP", value: 27, isUnsigned: true)
!357 = !DIEnumerator(name: "END_PREDICTORS", value: 28, isUnsigned: true)
!358 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "prediction", file: !327, line: 32, baseType: !7, size: 32, elements: !359)
!359 = !{!360, !361}
!360 = !DIEnumerator(name: "NOT_TAKEN", value: 0, isUnsigned: true)
!361 = !DIEnumerator(name: "TAKEN", value: 1, isUnsigned: true)
!362 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !363, line: 119, baseType: !7, size: 32, elements: !364)
!363 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!364 = !{!365, !366, !367, !368}
!365 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!366 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!367 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!368 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!369 = !{!370, !371, !372, !373, !376, !377, !379, !82, !450, !7, !400, !1501, !430, !451, !1552, !503, !908, !505, !374, !1554, !1555, !314, !381, !1556, !703, !786, !1558, !1563, !744, !760, !1564, !754, !1567, !1574, !1576, !1582, !1584, !1603, !823}
!370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !371, size: 64)
!371 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!372 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !374, size: 64)
!374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !375, size: 64)
!375 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !378, size: 64)
!378 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !375)
!379 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !380, line: 58, baseType: !381)
!380 = !DIFile(filename: "./coretypes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !382, size: 64)
!382 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !6, line: 737, size: 768, elements: !383)
!383 = !{!384, !1399, !1409, !1415, !1420, !1425, !1432, !1438, !1444, !1449, !1463, !1468, !1474, !1479, !1489, !1494, !1510, !1517, !1524, !1530, !1535, !1541, !1547}
!384 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !382, file: !6, line: 738, baseType: !385, size: 256)
!385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !6, line: 271, size: 256, elements: !386)
!386 = !{!387, !388, !389, !390, !391, !392, !393, !394, !395, !396, !397, !402, !403, !1398}
!387 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !385, file: !6, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!388 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !385, file: !6, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!389 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !385, file: !6, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!390 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !385, file: !6, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!391 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !385, file: !6, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!392 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !385, file: !6, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!393 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !385, file: !6, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !385, file: !6, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !385, file: !6, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !385, file: !6, line: 312, baseType: !7, size: 32, offset: 32)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !385, file: !6, line: 316, baseType: !398, size: 32, offset: 64)
!398 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !399, line: 58, baseType: !400)
!399 = !DIFile(filename: "./input.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!400 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !401, line: 44, baseType: !7)
!401 = !DIFile(filename: "./line-map.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!402 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !385, file: !6, line: 319, baseType: !7, size: 32, offset: 96)
!403 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !385, file: !6, line: 323, baseType: !404, size: 64, offset: 128)
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !405, size: 64)
!405 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !34, line: 217, size: 832, elements: !406)
!406 = !{!407, !1363, !1364, !1365, !1368, !1372, !1373, !1374, !1392, !1393, !1394, !1395, !1396, !1397}
!407 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !405, file: !34, line: 219, baseType: !408, size: 64)
!408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !409, size: 64)
!409 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !34, line: 151, baseType: !410)
!410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !34, line: 151, size: 128, elements: !411)
!411 = !{!412}
!412 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !410, file: !34, line: 151, baseType: !413, size: 128)
!413 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !34, line: 150, baseType: !414)
!414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !34, line: 150, size: 128, elements: !415)
!415 = !{!416, !417, !418}
!416 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !414, file: !34, line: 150, baseType: !7, size: 32)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !414, file: !34, line: 150, baseType: !7, size: 32, offset: 32)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !414, file: !34, line: 150, baseType: !419, size: 64, offset: 64)
!419 = !DICompositeType(tag: DW_TAG_array_type, baseType: !420, size: 64, elements: !532)
!420 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !380, line: 108, baseType: !421)
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !422, size: 64)
!422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !34, line: 122, size: 512, elements: !423)
!423 = !{!424, !425, !426, !448, !449, !1357, !1358, !1359, !1360, !1361}
!424 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !422, file: !34, line: 124, baseType: !404, size: 64)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !422, file: !34, line: 125, baseType: !404, size: 64, offset: 64)
!426 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !422, file: !34, line: 131, baseType: !427, size: 64, offset: 128)
!427 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !34, line: 128, size: 64, elements: !428)
!428 = !{!429, !444}
!429 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !427, file: !34, line: 129, baseType: !430, size: 64)
!430 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !380, line: 66, baseType: !431)
!431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !432, size: 64)
!432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !6, line: 143, size: 192, elements: !433)
!433 = !{!434, !442, !443}
!434 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !432, file: !6, line: 145, baseType: !435, size: 64)
!435 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !380, line: 69, baseType: !436)
!436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !437, size: 64)
!437 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !6, line: 136, size: 192, elements: !438)
!438 = !{!439, !440, !441}
!439 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !437, file: !6, line: 137, baseType: !379, size: 64)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !437, file: !6, line: 138, baseType: !436, size: 64, offset: 64)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !437, file: !6, line: 139, baseType: !436, size: 64, offset: 128)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !432, file: !6, line: 146, baseType: !435, size: 64, offset: 64)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !432, file: !6, line: 152, baseType: !430, size: 64, offset: 128)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !427, file: !34, line: 130, baseType: !445, size: 64)
!445 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !380, line: 50, baseType: !446)
!446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !447, size: 64)
!447 = !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !380, line: 49, flags: DIFlagFwdDecl)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !422, file: !34, line: 134, baseType: !376, size: 64, offset: 192)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !422, file: !34, line: 137, baseType: !450, size: 64, offset: 256)
!450 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !380, line: 56, baseType: !451)
!451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !452, size: 64)
!452 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !50, line: 3371, size: 1792, elements: !453)
!453 = !{!454, !487, !493, !506, !513, !520, !525, !534, !540, !553, !561, !599, !604, !632, !649, !650, !655, !664, !670, !675, !679, !683, !1006, !1055, !1061, !1067, !1074, !1087, !1101, !1118, !1130, !1152, !1167, !1339}
!454 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !452, file: !50, line: 3372, baseType: !455, size: 64)
!455 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !50, line: 360, size: 64, elements: !456)
!456 = !{!457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486}
!457 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !455, file: !50, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !455, file: !50, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!459 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !455, file: !50, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!460 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !455, file: !50, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!461 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !455, file: !50, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !455, file: !50, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !455, file: !50, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!464 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !455, file: !50, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!465 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !455, file: !50, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!466 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !455, file: !50, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!467 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !455, file: !50, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!468 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !455, file: !50, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!469 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !455, file: !50, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!470 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !455, file: !50, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !455, file: !50, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !455, file: !50, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !455, file: !50, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!474 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !455, file: !50, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!475 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !455, file: !50, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !455, file: !50, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !455, file: !50, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!478 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !455, file: !50, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!479 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !455, file: !50, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!480 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !455, file: !50, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !455, file: !50, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!482 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !455, file: !50, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !455, file: !50, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !455, file: !50, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !455, file: !50, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !455, file: !50, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!487 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !452, file: !50, line: 3373, baseType: !488, size: 192)
!488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !50, line: 402, size: 192, elements: !489)
!489 = !{!490, !491, !492}
!490 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !488, file: !50, line: 403, baseType: !455, size: 64)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !488, file: !50, line: 404, baseType: !450, size: 64, offset: 64)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !488, file: !50, line: 405, baseType: !450, size: 64, offset: 128)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !452, file: !50, line: 3374, baseType: !494, size: 320)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !50, line: 1384, size: 320, elements: !495)
!495 = !{!496, !497}
!496 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !494, file: !50, line: 1385, baseType: !488, size: 192)
!497 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !494, file: !50, line: 1386, baseType: !498, size: 128, offset: 192)
!498 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !499, line: 58, baseType: !500)
!499 = !DIFile(filename: "./double-int.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!500 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !499, line: 54, size: 128, elements: !501)
!501 = !{!502, !504}
!502 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !500, file: !499, line: 56, baseType: !503, size: 64)
!503 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !500, file: !499, line: 57, baseType: !505, size: 64, offset: 64)
!505 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!506 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !452, file: !50, line: 3375, baseType: !507, size: 256)
!507 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !50, line: 1397, size: 256, elements: !508)
!508 = !{!509, !510}
!509 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !507, file: !50, line: 1398, baseType: !488, size: 192)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !507, file: !50, line: 1399, baseType: !511, size: 64, offset: 192)
!511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !512, size: 64)
!512 = !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !50, line: 1392, flags: DIFlagFwdDecl)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !452, file: !50, line: 3376, baseType: !514, size: 256)
!514 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !50, line: 1408, size: 256, elements: !515)
!515 = !{!516, !517}
!516 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !514, file: !50, line: 1409, baseType: !488, size: 192)
!517 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !514, file: !50, line: 1410, baseType: !518, size: 64, offset: 192)
!518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !519, size: 64)
!519 = !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !50, line: 1403, flags: DIFlagFwdDecl)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !452, file: !50, line: 3377, baseType: !521, size: 256)
!521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !50, line: 1437, size: 256, elements: !522)
!522 = !{!523, !524}
!523 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !521, file: !50, line: 1438, baseType: !488, size: 192)
!524 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !521, file: !50, line: 1439, baseType: !450, size: 64, offset: 192)
!525 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !452, file: !50, line: 3378, baseType: !526, size: 256)
!526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !50, line: 1418, size: 256, elements: !527)
!527 = !{!528, !529, !530}
!528 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !526, file: !50, line: 1419, baseType: !488, size: 192)
!529 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !526, file: !50, line: 1420, baseType: !372, size: 32, offset: 192)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !526, file: !50, line: 1421, baseType: !531, size: 8, offset: 224)
!531 = !DICompositeType(tag: DW_TAG_array_type, baseType: !375, size: 8, elements: !532)
!532 = !{!533}
!533 = !DISubrange(count: 1)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !452, file: !50, line: 3379, baseType: !535, size: 320)
!535 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !50, line: 1428, size: 320, elements: !536)
!536 = !{!537, !538, !539}
!537 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !535, file: !50, line: 1429, baseType: !488, size: 192)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !535, file: !50, line: 1430, baseType: !450, size: 64, offset: 192)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !535, file: !50, line: 1431, baseType: !450, size: 64, offset: 256)
!540 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !452, file: !50, line: 3380, baseType: !541, size: 320)
!541 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !50, line: 1460, size: 320, elements: !542)
!542 = !{!543, !544}
!543 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !541, file: !50, line: 1461, baseType: !488, size: 192)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !541, file: !50, line: 1462, baseType: !545, size: 128, offset: 192)
!545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !546, line: 31, size: 128, elements: !547)
!546 = !DIFile(filename: "./symtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!547 = !{!548, !551, !552}
!548 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !545, file: !546, line: 32, baseType: !549, size: 64)
!549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !550, size: 64)
!550 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !371)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !545, file: !546, line: 33, baseType: !7, size: 32, offset: 64)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !545, file: !546, line: 34, baseType: !7, size: 32, offset: 96)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !452, file: !50, line: 3381, baseType: !554, size: 384)
!554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !50, line: 2507, size: 384, elements: !555)
!555 = !{!556, !557, !558, !559, !560}
!556 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !554, file: !50, line: 2508, baseType: !488, size: 192)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !554, file: !50, line: 2509, baseType: !398, size: 32, offset: 192)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !554, file: !50, line: 2510, baseType: !7, size: 32, offset: 224)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !554, file: !50, line: 2511, baseType: !450, size: 64, offset: 256)
!560 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !554, file: !50, line: 2512, baseType: !450, size: 64, offset: 320)
!561 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !452, file: !50, line: 3382, baseType: !562, size: 896)
!562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !50, line: 2652, size: 896, elements: !563)
!563 = !{!564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596}
!564 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !562, file: !50, line: 2653, baseType: !554, size: 384)
!565 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !562, file: !50, line: 2654, baseType: !450, size: 64, offset: 384)
!566 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !562, file: !50, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!567 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !562, file: !50, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !562, file: !50, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!569 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !562, file: !50, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!570 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !562, file: !50, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!571 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !562, file: !50, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !562, file: !50, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !562, file: !50, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !562, file: !50, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !562, file: !50, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!576 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !562, file: !50, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!577 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !562, file: !50, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!578 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !562, file: !50, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!579 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !562, file: !50, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !562, file: !50, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !562, file: !50, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!582 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !562, file: !50, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !562, file: !50, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !562, file: !50, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !562, file: !50, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!586 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !562, file: !50, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!587 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !562, file: !50, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!588 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !562, file: !50, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!589 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !562, file: !50, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !562, file: !50, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !562, file: !50, line: 2703, baseType: !7, size: 32, offset: 512)
!592 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !562, file: !50, line: 2705, baseType: !450, size: 64, offset: 576)
!593 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !562, file: !50, line: 2706, baseType: !450, size: 64, offset: 640)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !562, file: !50, line: 2707, baseType: !450, size: 64, offset: 704)
!595 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !562, file: !50, line: 2708, baseType: !450, size: 64, offset: 768)
!596 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !562, file: !50, line: 2711, baseType: !597, size: 64, offset: 832)
!597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !598, size: 64)
!598 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !50, line: 2711, flags: DIFlagFwdDecl)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !452, file: !50, line: 3383, baseType: !600, size: 960)
!600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !50, line: 2756, size: 960, elements: !601)
!601 = !{!602, !603}
!602 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !600, file: !50, line: 2757, baseType: !562, size: 896)
!603 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !600, file: !50, line: 2758, baseType: !445, size: 64, offset: 896)
!604 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !452, file: !50, line: 3384, baseType: !605, size: 1472)
!605 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !50, line: 3114, size: 1472, elements: !606)
!606 = !{!607, !628, !629, !630, !631}
!607 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !605, file: !50, line: 3115, baseType: !608, size: 1216)
!608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !50, line: 2984, size: 1216, elements: !609)
!609 = !{!610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627}
!610 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !608, file: !50, line: 2985, baseType: !600, size: 960)
!611 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !608, file: !50, line: 2986, baseType: !450, size: 64, offset: 960)
!612 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !608, file: !50, line: 2987, baseType: !450, size: 64, offset: 1024)
!613 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !608, file: !50, line: 2988, baseType: !450, size: 64, offset: 1088)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !608, file: !50, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!615 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !608, file: !50, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !608, file: !50, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !608, file: !50, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !608, file: !50, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !608, file: !50, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !608, file: !50, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !608, file: !50, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!622 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !608, file: !50, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!623 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !608, file: !50, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !608, file: !50, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !608, file: !50, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!626 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !608, file: !50, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!627 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !608, file: !50, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !605, file: !50, line: 3117, baseType: !450, size: 64, offset: 1216)
!629 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !605, file: !50, line: 3119, baseType: !450, size: 64, offset: 1280)
!630 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !605, file: !50, line: 3121, baseType: !450, size: 64, offset: 1344)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !605, file: !50, line: 3123, baseType: !450, size: 64, offset: 1408)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !452, file: !50, line: 3385, baseType: !633, size: 1088)
!633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !50, line: 2874, size: 1088, elements: !634)
!634 = !{!635, !636, !637}
!635 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !633, file: !50, line: 2875, baseType: !600, size: 960)
!636 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !633, file: !50, line: 2876, baseType: !445, size: 64, offset: 960)
!637 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !633, file: !50, line: 2877, baseType: !638, size: 64, offset: 1024)
!638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !639, size: 64)
!639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !640, line: 172, size: 128, elements: !641)
!640 = !DIFile(filename: "./tree-flow.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!641 = !{!642, !643, !644, !645, !646, !647, !648}
!642 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !639, file: !640, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!643 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !639, file: !640, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!644 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !639, file: !640, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!645 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !639, file: !640, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !639, file: !640, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !639, file: !640, line: 195, baseType: !7, size: 32, offset: 32)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !639, file: !640, line: 199, baseType: !450, size: 64, offset: 64)
!649 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !452, file: !50, line: 3386, baseType: !608, size: 1216)
!650 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !452, file: !50, line: 3387, baseType: !651, size: 1280)
!651 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !50, line: 3093, size: 1280, elements: !652)
!652 = !{!653, !654}
!653 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !651, file: !50, line: 3094, baseType: !608, size: 1216)
!654 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !651, file: !50, line: 3095, baseType: !638, size: 64, offset: 1216)
!655 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !452, file: !50, line: 3388, baseType: !656, size: 1216)
!656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !50, line: 2824, size: 1216, elements: !657)
!657 = !{!658, !659, !660, !661, !662, !663}
!658 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !656, file: !50, line: 2825, baseType: !562, size: 896)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !656, file: !50, line: 2827, baseType: !450, size: 64, offset: 896)
!660 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !656, file: !50, line: 2828, baseType: !450, size: 64, offset: 960)
!661 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !656, file: !50, line: 2829, baseType: !450, size: 64, offset: 1024)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !656, file: !50, line: 2830, baseType: !450, size: 64, offset: 1088)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !656, file: !50, line: 2831, baseType: !450, size: 64, offset: 1152)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !452, file: !50, line: 3389, baseType: !665, size: 1024)
!665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !50, line: 2850, size: 1024, elements: !666)
!666 = !{!667, !668, !669}
!667 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !665, file: !50, line: 2851, baseType: !600, size: 960)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !665, file: !50, line: 2852, baseType: !372, size: 32, offset: 960)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !665, file: !50, line: 2853, baseType: !372, size: 32, offset: 992)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !452, file: !50, line: 3390, baseType: !671, size: 1024)
!671 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !50, line: 2857, size: 1024, elements: !672)
!672 = !{!673, !674}
!673 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !671, file: !50, line: 2858, baseType: !600, size: 960)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !671, file: !50, line: 2859, baseType: !638, size: 64, offset: 960)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !452, file: !50, line: 3391, baseType: !676, size: 960)
!676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !50, line: 2862, size: 960, elements: !677)
!677 = !{!678}
!678 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !676, file: !50, line: 2863, baseType: !600, size: 960)
!679 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !452, file: !50, line: 3392, baseType: !680, size: 1472)
!680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !50, line: 3304, size: 1472, elements: !681)
!681 = !{!682}
!682 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !680, file: !50, line: 3305, baseType: !605, size: 1472)
!683 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !452, file: !50, line: 3393, baseType: !684, size: 1792)
!684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !50, line: 3248, size: 1792, elements: !685)
!685 = !{!686, !687, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005}
!686 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !684, file: !50, line: 3249, baseType: !605, size: 1472)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !684, file: !50, line: 3251, baseType: !688, size: 64, offset: 1472)
!688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !689, size: 64)
!689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !690, line: 463, size: 1152, elements: !691)
!690 = !DIFile(filename: "./function.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!691 = !{!692, !695, !728, !729, !926, !929, !930, !931, !932, !933, !934, !958, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984}
!692 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !689, file: !690, line: 464, baseType: !693, size: 64)
!693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !694, size: 64)
!694 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !690, line: 464, flags: DIFlagFwdDecl)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !689, file: !690, line: 467, baseType: !696, size: 64, offset: 64)
!696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !697, size: 64)
!697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !34, line: 374, size: 640, elements: !698)
!698 = !{!699, !701, !702, !715, !716, !717, !718, !719, !720, !724, !726, !727}
!699 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !697, file: !34, line: 377, baseType: !700, size: 64)
!700 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !380, line: 111, baseType: !404)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !697, file: !34, line: 378, baseType: !700, size: 64, offset: 64)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !697, file: !34, line: 381, baseType: !703, size: 64, offset: 128)
!703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !704, size: 64)
!704 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !34, line: 282, baseType: !705)
!705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !34, line: 282, size: 128, elements: !706)
!706 = !{!707}
!707 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !705, file: !34, line: 282, baseType: !708, size: 128)
!708 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !34, line: 281, baseType: !709)
!709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !34, line: 281, size: 128, elements: !710)
!710 = !{!711, !712, !713}
!711 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !709, file: !34, line: 281, baseType: !7, size: 32)
!712 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !709, file: !34, line: 281, baseType: !7, size: 32, offset: 32)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !709, file: !34, line: 281, baseType: !714, size: 64, offset: 64)
!714 = !DICompositeType(tag: DW_TAG_array_type, baseType: !700, size: 64, elements: !532)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !697, file: !34, line: 384, baseType: !372, size: 32, offset: 192)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !697, file: !34, line: 387, baseType: !372, size: 32, offset: 224)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !697, file: !34, line: 390, baseType: !372, size: 32, offset: 256)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !697, file: !34, line: 394, baseType: !703, size: 64, offset: 320)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !697, file: !34, line: 396, baseType: !33, size: 32, offset: 384)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !697, file: !34, line: 399, baseType: !721, size: 64, offset: 416)
!721 = !DICompositeType(tag: DW_TAG_array_type, baseType: !39, size: 64, elements: !722)
!722 = !{!723}
!723 = !DISubrange(count: 2)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !697, file: !34, line: 402, baseType: !725, size: 64, offset: 480)
!725 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !722)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !697, file: !34, line: 406, baseType: !372, size: 32, offset: 544)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !697, file: !34, line: 409, baseType: !372, size: 32, offset: 576)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !689, file: !690, line: 470, baseType: !431, size: 64, offset: 128)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !689, file: !690, line: 473, baseType: !730, size: 64, offset: 192)
!730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !731, size: 64)
!731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !640, line: 39, size: 1152, elements: !732)
!732 = !{!733, !785, !798, !811, !812, !881, !882, !886, !887, !888, !889, !890}
!733 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !731, file: !640, line: 41, baseType: !734, size: 64)
!734 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !735, line: 144, baseType: !736)
!735 = !DIFile(filename: "./include/hashtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !737, size: 64)
!737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !735, line: 100, size: 896, elements: !738)
!738 = !{!739, !747, !752, !757, !759, !762, !763, !764, !765, !766, !771, !773, !774, !779, !784}
!739 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !737, file: !735, line: 102, baseType: !740, size: 64)
!740 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !735, line: 52, baseType: !741)
!741 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !742, size: 64)
!742 = !DISubroutineType(types: !743)
!743 = !{!744, !745}
!744 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !735, line: 47, baseType: !7)
!745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !746, size: 64)
!746 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !737, file: !735, line: 105, baseType: !748, size: 64, offset: 64)
!748 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !735, line: 59, baseType: !749)
!749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !750, size: 64)
!750 = !DISubroutineType(types: !751)
!751 = !{!372, !745, !745}
!752 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !737, file: !735, line: 108, baseType: !753, size: 64, offset: 128)
!753 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !735, line: 63, baseType: !754)
!754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !755, size: 64)
!755 = !DISubroutineType(types: !756)
!756 = !{null, !376}
!757 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !737, file: !735, line: 111, baseType: !758, size: 64, offset: 192)
!758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !376, size: 64)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !737, file: !735, line: 114, baseType: !760, size: 64, offset: 256)
!760 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !761, line: 46, baseType: !503)
!761 = !DIFile(filename: "/scratch/install/llvm-install-release/lib/clang/9.0.1/include/stddef.h", directory: "")
!762 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !737, file: !735, line: 117, baseType: !760, size: 64, offset: 320)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !737, file: !735, line: 120, baseType: !760, size: 64, offset: 384)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !737, file: !735, line: 124, baseType: !7, size: 32, offset: 448)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !737, file: !735, line: 128, baseType: !7, size: 32, offset: 480)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !737, file: !735, line: 131, baseType: !767, size: 64, offset: 512)
!767 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !735, line: 75, baseType: !768)
!768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !769, size: 64)
!769 = !DISubroutineType(types: !770)
!770 = !{!376, !760, !760}
!771 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !737, file: !735, line: 132, baseType: !772, size: 64, offset: 576)
!772 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !735, line: 78, baseType: !754)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !737, file: !735, line: 135, baseType: !376, size: 64, offset: 640)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !737, file: !735, line: 136, baseType: !775, size: 64, offset: 704)
!775 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !735, line: 82, baseType: !776)
!776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !777, size: 64)
!777 = !DISubroutineType(types: !778)
!778 = !{!376, !376, !760, !760}
!779 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !737, file: !735, line: 137, baseType: !780, size: 64, offset: 768)
!780 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !735, line: 83, baseType: !781)
!781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !782, size: 64)
!782 = !DISubroutineType(types: !783)
!783 = !{null, !376, !376}
!784 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !737, file: !735, line: 141, baseType: !7, size: 32, offset: 832)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !731, file: !640, line: 48, baseType: !786, size: 64, offset: 64)
!786 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !787, size: 64)
!787 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !6, line: 35, baseType: !788)
!788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !6, line: 35, size: 128, elements: !789)
!789 = !{!790}
!790 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !788, file: !6, line: 35, baseType: !791, size: 128)
!791 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !6, line: 33, baseType: !792)
!792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !6, line: 33, size: 128, elements: !793)
!793 = !{!794, !795, !796}
!794 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !792, file: !6, line: 33, baseType: !7, size: 32)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !792, file: !6, line: 33, baseType: !7, size: 32, offset: 32)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !792, file: !6, line: 33, baseType: !797, size: 64, offset: 64)
!797 = !DICompositeType(tag: DW_TAG_array_type, baseType: !379, size: 64, elements: !532)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !731, file: !640, line: 51, baseType: !799, size: 64, offset: 128)
!799 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !800, size: 64)
!800 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !50, line: 183, baseType: !801)
!801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !50, line: 183, size: 128, elements: !802)
!802 = !{!803}
!803 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !801, file: !50, line: 183, baseType: !804, size: 128)
!804 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !50, line: 182, baseType: !805)
!805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !50, line: 182, size: 128, elements: !806)
!806 = !{!807, !808, !809}
!807 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !805, file: !50, line: 182, baseType: !7, size: 32)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !805, file: !50, line: 182, baseType: !7, size: 32, offset: 32)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !805, file: !50, line: 182, baseType: !810, size: 64, offset: 64)
!810 = !DICompositeType(tag: DW_TAG_array_type, baseType: !450, size: 64, elements: !532)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !731, file: !640, line: 54, baseType: !450, size: 64, offset: 192)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !731, file: !640, line: 57, baseType: !813, size: 128, offset: 256)
!813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !814, line: 31, size: 128, elements: !815)
!814 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!815 = !{!816, !817, !818, !819, !820, !821, !822}
!816 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !813, file: !814, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !813, file: !814, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !813, file: !814, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !813, file: !814, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !813, file: !814, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !813, file: !814, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !813, file: !814, line: 56, baseType: !823, size: 64, offset: 64)
!823 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !380, line: 47, baseType: !824)
!824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !825, size: 64)
!825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !826, line: 75, size: 256, elements: !827)
!826 = !DIFile(filename: "./bitmap.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!827 = !{!828, !840, !841, !842}
!828 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !825, file: !826, line: 76, baseType: !829, size: 64)
!829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !830, size: 64)
!830 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !826, line: 68, baseType: !831)
!831 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !826, line: 63, size: 320, elements: !832)
!832 = !{!833, !835, !836, !837}
!833 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !831, file: !826, line: 64, baseType: !834, size: 64)
!834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !831, size: 64)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !831, file: !826, line: 65, baseType: !834, size: 64, offset: 64)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !831, file: !826, line: 66, baseType: !7, size: 32, offset: 128)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !831, file: !826, line: 67, baseType: !838, size: 128, offset: 192)
!838 = !DICompositeType(tag: DW_TAG_array_type, baseType: !839, size: 128, elements: !722)
!839 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !826, line: 29, baseType: !503)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !825, file: !826, line: 77, baseType: !829, size: 64, offset: 64)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !825, file: !826, line: 78, baseType: !7, size: 32, offset: 128)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !825, file: !826, line: 79, baseType: !843, size: 64, offset: 192)
!843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !844, size: 64)
!844 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !826, line: 49, baseType: !845)
!845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !826, line: 45, size: 832, elements: !846)
!846 = !{!847, !848, !849}
!847 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !845, file: !826, line: 46, baseType: !834, size: 64)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !845, file: !826, line: 47, baseType: !824, size: 64, offset: 64)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !845, file: !826, line: 48, baseType: !850, size: 704, offset: 128)
!850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !851, line: 164, size: 704, elements: !852)
!851 = !DIFile(filename: "./include/obstack.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!852 = !{!853, !854, !864, !865, !866, !867, !868, !869, !873, !877, !878, !879, !880}
!853 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !850, file: !851, line: 166, baseType: !505, size: 64)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !850, file: !851, line: 167, baseType: !855, size: 64, offset: 64)
!855 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !856, size: 64)
!856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !851, line: 157, size: 192, elements: !857)
!857 = !{!858, !859, !860}
!858 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !856, file: !851, line: 159, baseType: !374, size: 64)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !856, file: !851, line: 160, baseType: !855, size: 64, offset: 64)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !856, file: !851, line: 161, baseType: !861, size: 32, offset: 128)
!861 = !DICompositeType(tag: DW_TAG_array_type, baseType: !375, size: 32, elements: !862)
!862 = !{!863}
!863 = !DISubrange(count: 4)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !850, file: !851, line: 168, baseType: !374, size: 64, offset: 128)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !850, file: !851, line: 169, baseType: !374, size: 64, offset: 192)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !850, file: !851, line: 170, baseType: !374, size: 64, offset: 256)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !850, file: !851, line: 171, baseType: !505, size: 64, offset: 320)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !850, file: !851, line: 172, baseType: !372, size: 32, offset: 384)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !850, file: !851, line: 176, baseType: !870, size: 64, offset: 448)
!870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !871, size: 64)
!871 = !DISubroutineType(types: !872)
!872 = !{!855, !376, !505}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !850, file: !851, line: 177, baseType: !874, size: 64, offset: 512)
!874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !875, size: 64)
!875 = !DISubroutineType(types: !876)
!876 = !{null, !376, !855}
!877 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !850, file: !851, line: 178, baseType: !376, size: 64, offset: 576)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !850, file: !851, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !850, file: !851, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !850, file: !851, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !731, file: !640, line: 60, baseType: !813, size: 128, offset: 384)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !731, file: !640, line: 64, baseType: !883, size: 64, offset: 512)
!883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !884, size: 64)
!884 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !885, line: 33, flags: DIFlagFwdDecl)
!885 = !DIFile(filename: "./pointer-set.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!886 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !731, file: !640, line: 67, baseType: !450, size: 64, offset: 576)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !731, file: !640, line: 73, baseType: !734, size: 64, offset: 640)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !731, file: !640, line: 77, baseType: !823, size: 64, offset: 704)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !731, file: !640, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !731, file: !640, line: 82, baseType: !891, size: 320, offset: 832)
!891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !363, line: 62, size: 320, elements: !892)
!892 = !{!893, !899, !900, !901, !902, !909}
!893 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !891, file: !363, line: 63, baseType: !894, size: 64)
!894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !895, size: 64)
!895 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !363, line: 56, size: 128, elements: !896)
!896 = !{!897, !898}
!897 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !895, file: !363, line: 57, baseType: !894, size: 64)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !895, file: !363, line: 58, baseType: !531, size: 8, offset: 64)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !891, file: !363, line: 64, baseType: !7, size: 32, offset: 64)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !891, file: !363, line: 66, baseType: !7, size: 32, offset: 96)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !891, file: !363, line: 68, baseType: !371, size: 8, offset: 128)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !891, file: !363, line: 70, baseType: !903, size: 64, offset: 192)
!903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !904, size: 64)
!904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !363, line: 37, size: 128, elements: !905)
!905 = !{!906, !907}
!906 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !904, file: !363, line: 39, baseType: !903, size: 64)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !904, file: !363, line: 40, baseType: !908, size: 64, offset: 64)
!908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !450, size: 64)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !891, file: !363, line: 71, baseType: !910, size: 64, offset: 256)
!910 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !911, size: 64)
!911 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !363, line: 45, size: 320, elements: !912)
!912 = !{!913, !914}
!913 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !911, file: !363, line: 47, baseType: !910, size: 64)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !911, file: !363, line: 48, baseType: !915, size: 256, offset: 64)
!915 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !50, line: 1883, size: 256, elements: !916)
!916 = !{!917, !919, !920, !925}
!917 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !915, file: !50, line: 1884, baseType: !918, size: 64)
!918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !915, size: 64)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !915, file: !50, line: 1885, baseType: !918, size: 64, offset: 64)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !915, file: !50, line: 1891, baseType: !921, size: 64, offset: 128)
!921 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !915, file: !50, line: 1891, size: 64, elements: !922)
!922 = !{!923, !924}
!923 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !921, file: !50, line: 1891, baseType: !379, size: 64)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !921, file: !50, line: 1891, baseType: !450, size: 64)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !915, file: !50, line: 1892, baseType: !908, size: 64, offset: 192)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !689, file: !690, line: 476, baseType: !927, size: 64, offset: 256)
!927 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !928, size: 64)
!928 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !690, line: 476, flags: DIFlagFwdDecl)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !689, file: !690, line: 479, baseType: !734, size: 64, offset: 320)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !689, file: !690, line: 484, baseType: !450, size: 64, offset: 384)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !689, file: !690, line: 488, baseType: !450, size: 64, offset: 448)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !689, file: !690, line: 493, baseType: !450, size: 64, offset: 512)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !689, file: !690, line: 496, baseType: !450, size: 64, offset: 576)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !689, file: !690, line: 501, baseType: !935, size: 64, offset: 640)
!935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !936, size: 64)
!936 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !45, line: 2355, size: 576, elements: !937)
!937 = !{!938, !941, !942, !943, !944, !946, !947, !952, !953, !954, !955, !956, !957}
!938 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !936, file: !45, line: 2356, baseType: !939, size: 64)
!939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !940, size: 64)
!940 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !45, line: 2356, flags: DIFlagFwdDecl)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !936, file: !45, line: 2357, baseType: !377, size: 64, offset: 64)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !936, file: !45, line: 2358, baseType: !372, size: 32, offset: 128)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !936, file: !45, line: 2359, baseType: !372, size: 32, offset: 160)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !936, file: !45, line: 2360, baseType: !945, size: 128, offset: 192)
!945 = !DICompositeType(tag: DW_TAG_array_type, baseType: !372, size: 128, elements: !862)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !936, file: !45, line: 2364, baseType: !372, size: 32, offset: 320)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !936, file: !45, line: 2367, baseType: !948, size: 128, offset: 384)
!948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !45, line: 2349, size: 128, elements: !949)
!949 = !{!950, !951}
!950 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !948, file: !45, line: 2351, baseType: !445, size: 64)
!951 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !948, file: !45, line: 2352, baseType: !505, size: 64, offset: 64)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !936, file: !45, line: 2371, baseType: !44, size: 32, offset: 512)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !936, file: !45, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !936, file: !45, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !936, file: !45, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !936, file: !45, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !936, file: !45, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !689, file: !690, line: 504, baseType: !959, size: 64, offset: 704)
!959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !960, size: 64)
!960 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !690, line: 504, flags: DIFlagFwdDecl)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !689, file: !690, line: 507, baseType: !734, size: 64, offset: 768)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !689, file: !690, line: 510, baseType: !372, size: 32, offset: 832)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !689, file: !690, line: 513, baseType: !372, size: 32, offset: 864)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !689, file: !690, line: 516, baseType: !398, size: 32, offset: 896)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !689, file: !690, line: 519, baseType: !398, size: 32, offset: 928)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !689, file: !690, line: 522, baseType: !7, size: 32, offset: 960)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !689, file: !690, line: 523, baseType: !7, size: 32, offset: 992)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !689, file: !690, line: 528, baseType: !377, size: 64, offset: 1024)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !689, file: !690, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !689, file: !690, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !689, file: !690, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !689, file: !690, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !689, file: !690, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !689, file: !690, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !689, file: !690, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !689, file: !690, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !689, file: !690, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !689, file: !690, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !689, file: !690, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !689, file: !690, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !689, file: !690, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !689, file: !690, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !689, file: !690, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !689, file: !690, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !684, file: !50, line: 3254, baseType: !450, size: 64, offset: 1536)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !684, file: !50, line: 3257, baseType: !450, size: 64, offset: 1600)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !684, file: !50, line: 3258, baseType: !450, size: 64, offset: 1664)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !684, file: !50, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !684, file: !50, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !684, file: !50, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !684, file: !50, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !684, file: !50, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !684, file: !50, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !684, file: !50, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !684, file: !50, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !684, file: !50, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !684, file: !50, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !684, file: !50, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !684, file: !50, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !684, file: !50, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !684, file: !50, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !684, file: !50, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !684, file: !50, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !684, file: !50, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !684, file: !50, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !452, file: !50, line: 3394, baseType: !1007, size: 1344)
!1007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !50, line: 2279, size: 1344, elements: !1008)
!1008 = !{!1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1034, !1035, !1036, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052}
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1007, file: !50, line: 2280, baseType: !488, size: 192)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1007, file: !50, line: 2281, baseType: !450, size: 64, offset: 192)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1007, file: !50, line: 2282, baseType: !450, size: 64, offset: 256)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1007, file: !50, line: 2283, baseType: !450, size: 64, offset: 320)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1007, file: !50, line: 2284, baseType: !450, size: 64, offset: 384)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1007, file: !50, line: 2285, baseType: !7, size: 32, offset: 448)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1007, file: !50, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1007, file: !50, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1007, file: !50, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1007, file: !50, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1007, file: !50, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1007, file: !50, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1007, file: !50, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1007, file: !50, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1007, file: !50, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1007, file: !50, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1007, file: !50, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1007, file: !50, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1007, file: !50, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1007, file: !50, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1007, file: !50, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1007, file: !50, line: 2305, baseType: !7, size: 32, offset: 512)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1007, file: !50, line: 2306, baseType: !1032, size: 32, offset: 544)
!1032 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1033, line: 31, baseType: !372)
!1033 = !DIFile(filename: "./alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1007, file: !50, line: 2307, baseType: !450, size: 64, offset: 576)
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1007, file: !50, line: 2308, baseType: !450, size: 64, offset: 640)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1007, file: !50, line: 2314, baseType: !1037, size: 64, offset: 704)
!1037 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !50, line: 2309, size: 64, elements: !1038)
!1038 = !{!1039, !1040, !1041}
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1037, file: !50, line: 2310, baseType: !372, size: 32)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1037, file: !50, line: 2311, baseType: !377, size: 64)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1037, file: !50, line: 2312, baseType: !1042, size: 64)
!1042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1043 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !50, line: 2277, flags: DIFlagFwdDecl)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1007, file: !50, line: 2315, baseType: !450, size: 64, offset: 768)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1007, file: !50, line: 2316, baseType: !450, size: 64, offset: 832)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1007, file: !50, line: 2317, baseType: !450, size: 64, offset: 896)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1007, file: !50, line: 2318, baseType: !450, size: 64, offset: 960)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1007, file: !50, line: 2319, baseType: !450, size: 64, offset: 1024)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1007, file: !50, line: 2320, baseType: !450, size: 64, offset: 1088)
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1007, file: !50, line: 2321, baseType: !450, size: 64, offset: 1152)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1007, file: !50, line: 2322, baseType: !450, size: 64, offset: 1216)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1007, file: !50, line: 2324, baseType: !1053, size: 64, offset: 1280)
!1053 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1054, size: 64)
!1054 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !50, line: 2324, flags: DIFlagFwdDecl)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !452, file: !50, line: 3395, baseType: !1056, size: 320)
!1056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !50, line: 1469, size: 320, elements: !1057)
!1057 = !{!1058, !1059, !1060}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1056, file: !50, line: 1470, baseType: !488, size: 192)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1056, file: !50, line: 1471, baseType: !450, size: 64, offset: 192)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1056, file: !50, line: 1472, baseType: !450, size: 64, offset: 256)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !452, file: !50, line: 3396, baseType: !1062, size: 320)
!1062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !50, line: 1482, size: 320, elements: !1063)
!1063 = !{!1064, !1065, !1066}
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1062, file: !50, line: 1483, baseType: !488, size: 192)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1062, file: !50, line: 1484, baseType: !372, size: 32, offset: 192)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1062, file: !50, line: 1485, baseType: !810, size: 64, offset: 256)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !452, file: !50, line: 3397, baseType: !1068, size: 384)
!1068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !50, line: 1829, size: 384, elements: !1069)
!1069 = !{!1070, !1071, !1072, !1073}
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1068, file: !50, line: 1830, baseType: !488, size: 192)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1068, file: !50, line: 1831, baseType: !398, size: 32, offset: 192)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1068, file: !50, line: 1832, baseType: !450, size: 64, offset: 256)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1068, file: !50, line: 1835, baseType: !810, size: 64, offset: 320)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !452, file: !50, line: 3398, baseType: !1075, size: 704)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !50, line: 1898, size: 704, elements: !1076)
!1076 = !{!1077, !1078, !1079, !1080, !1081, !1086}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1075, file: !50, line: 1899, baseType: !488, size: 192)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1075, file: !50, line: 1902, baseType: !450, size: 64, offset: 192)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1075, file: !50, line: 1905, baseType: !379, size: 64, offset: 256)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1075, file: !50, line: 1908, baseType: !7, size: 32, offset: 320)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1075, file: !50, line: 1911, baseType: !1082, size: 64, offset: 384)
!1082 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1083, size: 64)
!1083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !640, line: 117, size: 128, elements: !1084)
!1084 = !{!1085}
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1083, file: !640, line: 120, baseType: !813, size: 128)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1075, file: !50, line: 1914, baseType: !915, size: 256, offset: 448)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !452, file: !50, line: 3399, baseType: !1088, size: 704)
!1088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !50, line: 2008, size: 704, elements: !1089)
!1089 = !{!1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100}
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1088, file: !50, line: 2009, baseType: !488, size: 192)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1088, file: !50, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1088, file: !50, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1088, file: !50, line: 2014, baseType: !398, size: 32, offset: 224)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1088, file: !50, line: 2016, baseType: !450, size: 64, offset: 256)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1088, file: !50, line: 2017, baseType: !799, size: 64, offset: 320)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1088, file: !50, line: 2019, baseType: !450, size: 64, offset: 384)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1088, file: !50, line: 2020, baseType: !450, size: 64, offset: 448)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1088, file: !50, line: 2021, baseType: !450, size: 64, offset: 512)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1088, file: !50, line: 2022, baseType: !450, size: 64, offset: 576)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1088, file: !50, line: 2023, baseType: !450, size: 64, offset: 640)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !452, file: !50, line: 3400, baseType: !1102, size: 832)
!1102 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !50, line: 2430, size: 832, elements: !1103)
!1103 = !{!1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113}
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1102, file: !50, line: 2431, baseType: !488, size: 192)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1102, file: !50, line: 2433, baseType: !450, size: 64, offset: 192)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1102, file: !50, line: 2434, baseType: !450, size: 64, offset: 256)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1102, file: !50, line: 2435, baseType: !450, size: 64, offset: 320)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1102, file: !50, line: 2436, baseType: !450, size: 64, offset: 384)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1102, file: !50, line: 2437, baseType: !799, size: 64, offset: 448)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1102, file: !50, line: 2438, baseType: !450, size: 64, offset: 512)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1102, file: !50, line: 2440, baseType: !450, size: 64, offset: 576)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1102, file: !50, line: 2441, baseType: !450, size: 64, offset: 640)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1102, file: !50, line: 2443, baseType: !1114, size: 128, offset: 704)
!1114 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !50, line: 182, baseType: !1115)
!1115 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !50, line: 182, size: 128, elements: !1116)
!1116 = !{!1117}
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1115, file: !50, line: 182, baseType: !804, size: 128)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !452, file: !50, line: 3401, baseType: !1119, size: 320)
!1119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !50, line: 3327, size: 320, elements: !1120)
!1120 = !{!1121, !1122, !1129}
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1119, file: !50, line: 3329, baseType: !488, size: 192)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1119, file: !50, line: 3330, baseType: !1123, size: 64, offset: 192)
!1123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1124, size: 64)
!1124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !50, line: 3320, size: 192, elements: !1125)
!1125 = !{!1126, !1127, !1128}
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1124, file: !50, line: 3322, baseType: !1123, size: 64)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1124, file: !50, line: 3323, baseType: !1123, size: 64, offset: 64)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1124, file: !50, line: 3324, baseType: !450, size: 64, offset: 128)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1119, file: !50, line: 3331, baseType: !1123, size: 64, offset: 256)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !452, file: !50, line: 3402, baseType: !1131, size: 256)
!1131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !50, line: 1540, size: 256, elements: !1132)
!1132 = !{!1133, !1134}
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1131, file: !50, line: 1541, baseType: !488, size: 192)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1131, file: !50, line: 1542, baseType: !1135, size: 64, offset: 192)
!1135 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1136, size: 64)
!1136 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !50, line: 1538, baseType: !1137)
!1137 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !50, line: 1538, size: 192, elements: !1138)
!1138 = !{!1139}
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1137, file: !50, line: 1538, baseType: !1140, size: 192)
!1140 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !50, line: 1537, baseType: !1141)
!1141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !50, line: 1537, size: 192, elements: !1142)
!1142 = !{!1143, !1144, !1145}
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1141, file: !50, line: 1537, baseType: !7, size: 32)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1141, file: !50, line: 1537, baseType: !7, size: 32, offset: 32)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1141, file: !50, line: 1537, baseType: !1146, size: 128, offset: 64)
!1146 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1147, size: 128, elements: !532)
!1147 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !50, line: 1535, baseType: !1148)
!1148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !50, line: 1532, size: 128, elements: !1149)
!1149 = !{!1150, !1151}
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1148, file: !50, line: 1533, baseType: !450, size: 64)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1148, file: !50, line: 1534, baseType: !450, size: 64, offset: 64)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !452, file: !50, line: 3403, baseType: !1153, size: 512)
!1153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !50, line: 1938, size: 512, elements: !1154)
!1154 = !{!1155, !1156, !1157, !1158, !1164, !1165, !1166}
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1153, file: !50, line: 1939, baseType: !488, size: 192)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1153, file: !50, line: 1940, baseType: !398, size: 32, offset: 192)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1153, file: !50, line: 1941, baseType: !49, size: 32, offset: 224)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1153, file: !50, line: 1946, baseType: !1159, size: 32, offset: 256)
!1159 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !50, line: 1942, size: 32, elements: !1160)
!1160 = !{!1161, !1162, !1163}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1159, file: !50, line: 1943, baseType: !68, size: 32)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1159, file: !50, line: 1944, baseType: !75, size: 32)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1159, file: !50, line: 1945, baseType: !82, size: 32)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1153, file: !50, line: 1950, baseType: !430, size: 64, offset: 320)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1153, file: !50, line: 1951, baseType: !430, size: 64, offset: 384)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1153, file: !50, line: 1953, baseType: !810, size: 64, offset: 448)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !452, file: !50, line: 3404, baseType: !1168, size: 1664)
!1168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !50, line: 3337, size: 1664, elements: !1169)
!1169 = !{!1170, !1171}
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1168, file: !50, line: 3338, baseType: !488, size: 192)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1168, file: !50, line: 3341, baseType: !1172, size: 1472, offset: 192)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1173, line: 410, size: 1472, elements: !1174)
!1173 = !DIFile(filename: "./options.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1174 = !{!1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338}
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1172, file: !1173, line: 412, baseType: !372, size: 32)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1172, file: !1173, line: 413, baseType: !372, size: 32, offset: 32)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1172, file: !1173, line: 414, baseType: !372, size: 32, offset: 64)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1172, file: !1173, line: 415, baseType: !372, size: 32, offset: 96)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1172, file: !1173, line: 416, baseType: !372, size: 32, offset: 128)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1172, file: !1173, line: 417, baseType: !372, size: 32, offset: 160)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1172, file: !1173, line: 418, baseType: !371, size: 8, offset: 192)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1172, file: !1173, line: 419, baseType: !371, size: 8, offset: 200)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1172, file: !1173, line: 420, baseType: !1184, size: 8, offset: 208)
!1184 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1172, file: !1173, line: 421, baseType: !1184, size: 8, offset: 216)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1172, file: !1173, line: 422, baseType: !1184, size: 8, offset: 224)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1172, file: !1173, line: 423, baseType: !1184, size: 8, offset: 232)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1172, file: !1173, line: 424, baseType: !1184, size: 8, offset: 240)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1172, file: !1173, line: 425, baseType: !1184, size: 8, offset: 248)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1172, file: !1173, line: 426, baseType: !1184, size: 8, offset: 256)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1172, file: !1173, line: 427, baseType: !1184, size: 8, offset: 264)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1172, file: !1173, line: 428, baseType: !1184, size: 8, offset: 272)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1172, file: !1173, line: 429, baseType: !1184, size: 8, offset: 280)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1172, file: !1173, line: 430, baseType: !1184, size: 8, offset: 288)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1172, file: !1173, line: 431, baseType: !1184, size: 8, offset: 296)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1172, file: !1173, line: 432, baseType: !1184, size: 8, offset: 304)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1172, file: !1173, line: 433, baseType: !1184, size: 8, offset: 312)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1172, file: !1173, line: 434, baseType: !1184, size: 8, offset: 320)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1172, file: !1173, line: 435, baseType: !1184, size: 8, offset: 328)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1172, file: !1173, line: 436, baseType: !1184, size: 8, offset: 336)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1172, file: !1173, line: 437, baseType: !1184, size: 8, offset: 344)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1172, file: !1173, line: 438, baseType: !1184, size: 8, offset: 352)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1172, file: !1173, line: 439, baseType: !1184, size: 8, offset: 360)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1172, file: !1173, line: 440, baseType: !1184, size: 8, offset: 368)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1172, file: !1173, line: 441, baseType: !1184, size: 8, offset: 376)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1172, file: !1173, line: 442, baseType: !1184, size: 8, offset: 384)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1172, file: !1173, line: 443, baseType: !1184, size: 8, offset: 392)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1172, file: !1173, line: 444, baseType: !1184, size: 8, offset: 400)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1172, file: !1173, line: 445, baseType: !1184, size: 8, offset: 408)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1172, file: !1173, line: 446, baseType: !1184, size: 8, offset: 416)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1172, file: !1173, line: 447, baseType: !1184, size: 8, offset: 424)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1172, file: !1173, line: 448, baseType: !1184, size: 8, offset: 432)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1172, file: !1173, line: 449, baseType: !1184, size: 8, offset: 440)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1172, file: !1173, line: 450, baseType: !1184, size: 8, offset: 448)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1172, file: !1173, line: 451, baseType: !1184, size: 8, offset: 456)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1172, file: !1173, line: 452, baseType: !1184, size: 8, offset: 464)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1172, file: !1173, line: 453, baseType: !1184, size: 8, offset: 472)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1172, file: !1173, line: 454, baseType: !1184, size: 8, offset: 480)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1172, file: !1173, line: 455, baseType: !1184, size: 8, offset: 488)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1172, file: !1173, line: 456, baseType: !1184, size: 8, offset: 496)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1172, file: !1173, line: 457, baseType: !1184, size: 8, offset: 504)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1172, file: !1173, line: 458, baseType: !1184, size: 8, offset: 512)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1172, file: !1173, line: 459, baseType: !1184, size: 8, offset: 520)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1172, file: !1173, line: 460, baseType: !1184, size: 8, offset: 528)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1172, file: !1173, line: 461, baseType: !1184, size: 8, offset: 536)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1172, file: !1173, line: 462, baseType: !1184, size: 8, offset: 544)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1172, file: !1173, line: 463, baseType: !1184, size: 8, offset: 552)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1172, file: !1173, line: 464, baseType: !1184, size: 8, offset: 560)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1172, file: !1173, line: 465, baseType: !1184, size: 8, offset: 568)
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1172, file: !1173, line: 466, baseType: !1184, size: 8, offset: 576)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1172, file: !1173, line: 467, baseType: !1184, size: 8, offset: 584)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1172, file: !1173, line: 468, baseType: !1184, size: 8, offset: 592)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1172, file: !1173, line: 469, baseType: !1184, size: 8, offset: 600)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1172, file: !1173, line: 470, baseType: !1184, size: 8, offset: 608)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1172, file: !1173, line: 471, baseType: !1184, size: 8, offset: 616)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1172, file: !1173, line: 472, baseType: !1184, size: 8, offset: 624)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1172, file: !1173, line: 473, baseType: !1184, size: 8, offset: 632)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1172, file: !1173, line: 474, baseType: !1184, size: 8, offset: 640)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1172, file: !1173, line: 475, baseType: !1184, size: 8, offset: 648)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1172, file: !1173, line: 476, baseType: !1184, size: 8, offset: 656)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1172, file: !1173, line: 477, baseType: !1184, size: 8, offset: 664)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1172, file: !1173, line: 478, baseType: !1184, size: 8, offset: 672)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1172, file: !1173, line: 479, baseType: !1184, size: 8, offset: 680)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1172, file: !1173, line: 480, baseType: !1184, size: 8, offset: 688)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1172, file: !1173, line: 481, baseType: !1184, size: 8, offset: 696)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1172, file: !1173, line: 482, baseType: !1184, size: 8, offset: 704)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1172, file: !1173, line: 483, baseType: !1184, size: 8, offset: 712)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1172, file: !1173, line: 484, baseType: !1184, size: 8, offset: 720)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1172, file: !1173, line: 485, baseType: !1184, size: 8, offset: 728)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1172, file: !1173, line: 486, baseType: !1184, size: 8, offset: 736)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1172, file: !1173, line: 487, baseType: !1184, size: 8, offset: 744)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1172, file: !1173, line: 488, baseType: !1184, size: 8, offset: 752)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1172, file: !1173, line: 489, baseType: !1184, size: 8, offset: 760)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1172, file: !1173, line: 490, baseType: !1184, size: 8, offset: 768)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1172, file: !1173, line: 491, baseType: !1184, size: 8, offset: 776)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1172, file: !1173, line: 492, baseType: !1184, size: 8, offset: 784)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1172, file: !1173, line: 493, baseType: !1184, size: 8, offset: 792)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1172, file: !1173, line: 494, baseType: !1184, size: 8, offset: 800)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1172, file: !1173, line: 495, baseType: !1184, size: 8, offset: 808)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1172, file: !1173, line: 496, baseType: !1184, size: 8, offset: 816)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1172, file: !1173, line: 497, baseType: !1184, size: 8, offset: 824)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1172, file: !1173, line: 498, baseType: !1184, size: 8, offset: 832)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1172, file: !1173, line: 499, baseType: !1184, size: 8, offset: 840)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1172, file: !1173, line: 500, baseType: !1184, size: 8, offset: 848)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1172, file: !1173, line: 501, baseType: !1184, size: 8, offset: 856)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1172, file: !1173, line: 502, baseType: !1184, size: 8, offset: 864)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1172, file: !1173, line: 503, baseType: !1184, size: 8, offset: 872)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1172, file: !1173, line: 504, baseType: !1184, size: 8, offset: 880)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1172, file: !1173, line: 505, baseType: !1184, size: 8, offset: 888)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1172, file: !1173, line: 506, baseType: !1184, size: 8, offset: 896)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1172, file: !1173, line: 507, baseType: !1184, size: 8, offset: 904)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1172, file: !1173, line: 508, baseType: !1184, size: 8, offset: 912)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1172, file: !1173, line: 509, baseType: !1184, size: 8, offset: 920)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1172, file: !1173, line: 510, baseType: !1184, size: 8, offset: 928)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1172, file: !1173, line: 511, baseType: !1184, size: 8, offset: 936)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1172, file: !1173, line: 512, baseType: !1184, size: 8, offset: 944)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1172, file: !1173, line: 513, baseType: !1184, size: 8, offset: 952)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1172, file: !1173, line: 514, baseType: !1184, size: 8, offset: 960)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1172, file: !1173, line: 515, baseType: !1184, size: 8, offset: 968)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1172, file: !1173, line: 516, baseType: !1184, size: 8, offset: 976)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1172, file: !1173, line: 517, baseType: !1184, size: 8, offset: 984)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1172, file: !1173, line: 518, baseType: !1184, size: 8, offset: 992)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1172, file: !1173, line: 519, baseType: !1184, size: 8, offset: 1000)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1172, file: !1173, line: 520, baseType: !1184, size: 8, offset: 1008)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1172, file: !1173, line: 521, baseType: !1184, size: 8, offset: 1016)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1172, file: !1173, line: 522, baseType: !1184, size: 8, offset: 1024)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1172, file: !1173, line: 523, baseType: !1184, size: 8, offset: 1032)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1172, file: !1173, line: 524, baseType: !1184, size: 8, offset: 1040)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1172, file: !1173, line: 525, baseType: !1184, size: 8, offset: 1048)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1172, file: !1173, line: 526, baseType: !1184, size: 8, offset: 1056)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1172, file: !1173, line: 527, baseType: !1184, size: 8, offset: 1064)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1172, file: !1173, line: 528, baseType: !1184, size: 8, offset: 1072)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1172, file: !1173, line: 529, baseType: !1184, size: 8, offset: 1080)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1172, file: !1173, line: 530, baseType: !1184, size: 8, offset: 1088)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1172, file: !1173, line: 531, baseType: !1184, size: 8, offset: 1096)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1172, file: !1173, line: 532, baseType: !1184, size: 8, offset: 1104)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1172, file: !1173, line: 533, baseType: !1184, size: 8, offset: 1112)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1172, file: !1173, line: 534, baseType: !1184, size: 8, offset: 1120)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1172, file: !1173, line: 535, baseType: !1184, size: 8, offset: 1128)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1172, file: !1173, line: 536, baseType: !1184, size: 8, offset: 1136)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1172, file: !1173, line: 537, baseType: !1184, size: 8, offset: 1144)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1172, file: !1173, line: 538, baseType: !1184, size: 8, offset: 1152)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1172, file: !1173, line: 539, baseType: !1184, size: 8, offset: 1160)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1172, file: !1173, line: 540, baseType: !1184, size: 8, offset: 1168)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1172, file: !1173, line: 541, baseType: !1184, size: 8, offset: 1176)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1172, file: !1173, line: 542, baseType: !1184, size: 8, offset: 1184)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1172, file: !1173, line: 543, baseType: !1184, size: 8, offset: 1192)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1172, file: !1173, line: 544, baseType: !1184, size: 8, offset: 1200)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1172, file: !1173, line: 545, baseType: !1184, size: 8, offset: 1208)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1172, file: !1173, line: 546, baseType: !1184, size: 8, offset: 1216)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1172, file: !1173, line: 547, baseType: !1184, size: 8, offset: 1224)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1172, file: !1173, line: 548, baseType: !1184, size: 8, offset: 1232)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1172, file: !1173, line: 549, baseType: !1184, size: 8, offset: 1240)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1172, file: !1173, line: 550, baseType: !1184, size: 8, offset: 1248)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1172, file: !1173, line: 551, baseType: !1184, size: 8, offset: 1256)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1172, file: !1173, line: 552, baseType: !1184, size: 8, offset: 1264)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1172, file: !1173, line: 553, baseType: !1184, size: 8, offset: 1272)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1172, file: !1173, line: 554, baseType: !1184, size: 8, offset: 1280)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1172, file: !1173, line: 555, baseType: !1184, size: 8, offset: 1288)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1172, file: !1173, line: 556, baseType: !1184, size: 8, offset: 1296)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1172, file: !1173, line: 557, baseType: !1184, size: 8, offset: 1304)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1172, file: !1173, line: 558, baseType: !1184, size: 8, offset: 1312)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1172, file: !1173, line: 559, baseType: !1184, size: 8, offset: 1320)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1172, file: !1173, line: 560, baseType: !1184, size: 8, offset: 1328)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1172, file: !1173, line: 561, baseType: !1184, size: 8, offset: 1336)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1172, file: !1173, line: 562, baseType: !1184, size: 8, offset: 1344)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1172, file: !1173, line: 563, baseType: !1184, size: 8, offset: 1352)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1172, file: !1173, line: 564, baseType: !1184, size: 8, offset: 1360)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1172, file: !1173, line: 565, baseType: !1184, size: 8, offset: 1368)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1172, file: !1173, line: 566, baseType: !1184, size: 8, offset: 1376)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1172, file: !1173, line: 567, baseType: !1184, size: 8, offset: 1384)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1172, file: !1173, line: 568, baseType: !1184, size: 8, offset: 1392)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1172, file: !1173, line: 569, baseType: !1184, size: 8, offset: 1400)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1172, file: !1173, line: 570, baseType: !1184, size: 8, offset: 1408)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1172, file: !1173, line: 571, baseType: !1184, size: 8, offset: 1416)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1172, file: !1173, line: 572, baseType: !1184, size: 8, offset: 1424)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1172, file: !1173, line: 573, baseType: !1184, size: 8, offset: 1432)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1172, file: !1173, line: 574, baseType: !1184, size: 8, offset: 1440)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !452, file: !50, line: 3405, baseType: !1340, size: 384)
!1340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !50, line: 3352, size: 384, elements: !1341)
!1341 = !{!1342, !1343}
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1340, file: !50, line: 3353, baseType: !488, size: 192)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1340, file: !50, line: 3356, baseType: !1344, size: 192, offset: 192)
!1344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1173, line: 578, size: 192, elements: !1345)
!1345 = !{!1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356}
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1344, file: !1173, line: 580, baseType: !372, size: 32)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1344, file: !1173, line: 581, baseType: !372, size: 32, offset: 32)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1344, file: !1173, line: 582, baseType: !372, size: 32, offset: 64)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1344, file: !1173, line: 583, baseType: !372, size: 32, offset: 96)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1344, file: !1173, line: 584, baseType: !371, size: 8, offset: 128)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1344, file: !1173, line: 585, baseType: !371, size: 8, offset: 136)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1344, file: !1173, line: 586, baseType: !371, size: 8, offset: 144)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1344, file: !1173, line: 587, baseType: !371, size: 8, offset: 152)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1344, file: !1173, line: 588, baseType: !371, size: 8, offset: 160)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1344, file: !1173, line: 589, baseType: !371, size: 8, offset: 168)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1344, file: !1173, line: 590, baseType: !371, size: 8, offset: 176)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !422, file: !34, line: 138, baseType: !398, size: 32, offset: 320)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !422, file: !34, line: 142, baseType: !7, size: 32, offset: 352)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !422, file: !34, line: 144, baseType: !372, size: 32, offset: 384)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !422, file: !34, line: 145, baseType: !372, size: 32, offset: 416)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !422, file: !34, line: 146, baseType: !1362, size: 64, offset: 448)
!1362 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !34, line: 119, baseType: !505)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !405, file: !34, line: 220, baseType: !408, size: 64, offset: 64)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !405, file: !34, line: 223, baseType: !376, size: 64, offset: 128)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !405, file: !34, line: 226, baseType: !1366, size: 64, offset: 192)
!1366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1367, size: 64)
!1367 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !34, line: 185, flags: DIFlagFwdDecl)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !405, file: !34, line: 229, baseType: !1369, size: 128, offset: 256)
!1369 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1370, size: 128, elements: !722)
!1370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1371, size: 64)
!1371 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !34, line: 229, flags: DIFlagFwdDecl)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !405, file: !34, line: 232, baseType: !404, size: 64, offset: 384)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !405, file: !34, line: 233, baseType: !404, size: 64, offset: 448)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !405, file: !34, line: 238, baseType: !1375, size: 64, offset: 512)
!1375 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !34, line: 235, size: 64, elements: !1376)
!1376 = !{!1377, !1383}
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1375, file: !34, line: 236, baseType: !1378, size: 64)
!1378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1379, size: 64)
!1379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !34, line: 273, size: 128, elements: !1380)
!1380 = !{!1381, !1382}
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1379, file: !34, line: 275, baseType: !430, size: 64)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1379, file: !34, line: 278, baseType: !430, size: 64, offset: 64)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1375, file: !34, line: 237, baseType: !1384, size: 64)
!1384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1385, size: 64)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !34, line: 259, size: 320, elements: !1386)
!1386 = !{!1387, !1388, !1389, !1390, !1391}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1385, file: !34, line: 261, baseType: !445, size: 64)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1385, file: !34, line: 262, baseType: !445, size: 64, offset: 64)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1385, file: !34, line: 266, baseType: !445, size: 64, offset: 128)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1385, file: !34, line: 267, baseType: !445, size: 64, offset: 192)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1385, file: !34, line: 270, baseType: !372, size: 32, offset: 256)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !405, file: !34, line: 241, baseType: !1362, size: 64, offset: 576)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !405, file: !34, line: 244, baseType: !372, size: 32, offset: 640)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !405, file: !34, line: 247, baseType: !372, size: 32, offset: 672)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !405, file: !34, line: 250, baseType: !372, size: 32, offset: 704)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !405, file: !34, line: 253, baseType: !372, size: 32, offset: 736)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !405, file: !34, line: 256, baseType: !372, size: 32, offset: 768)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !385, file: !6, line: 327, baseType: !450, size: 64, offset: 192)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !382, file: !6, line: 739, baseType: !1400, size: 448)
!1400 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !6, line: 350, size: 448, elements: !1401)
!1401 = !{!1402, !1408}
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1400, file: !6, line: 353, baseType: !1403, size: 384)
!1403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !6, line: 333, size: 384, elements: !1404)
!1404 = !{!1405, !1406, !1407}
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1403, file: !6, line: 336, baseType: !385, size: 256)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1403, file: !6, line: 343, baseType: !903, size: 64, offset: 256)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1403, file: !6, line: 344, baseType: !910, size: 64, offset: 320)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1400, file: !6, line: 359, baseType: !810, size: 64, offset: 384)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !382, file: !6, line: 740, baseType: !1410, size: 512)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !6, line: 365, size: 512, elements: !1411)
!1411 = !{!1412, !1413, !1414}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1410, file: !6, line: 368, baseType: !1403, size: 384)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1410, file: !6, line: 373, baseType: !450, size: 64, offset: 384)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1410, file: !6, line: 374, baseType: !450, size: 64, offset: 448)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !382, file: !6, line: 741, baseType: !1416, size: 576)
!1416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !6, line: 380, size: 576, elements: !1417)
!1417 = !{!1418, !1419}
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1416, file: !6, line: 383, baseType: !1410, size: 512)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1416, file: !6, line: 389, baseType: !810, size: 64, offset: 512)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !382, file: !6, line: 742, baseType: !1421, size: 320)
!1421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !6, line: 395, size: 320, elements: !1422)
!1422 = !{!1423, !1424}
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1421, file: !6, line: 397, baseType: !385, size: 256)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1421, file: !6, line: 400, baseType: !430, size: 64, offset: 256)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !382, file: !6, line: 743, baseType: !1426, size: 448)
!1426 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !6, line: 406, size: 448, elements: !1427)
!1427 = !{!1428, !1429, !1430, !1431}
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1426, file: !6, line: 408, baseType: !385, size: 256)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1426, file: !6, line: 412, baseType: !450, size: 64, offset: 256)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1426, file: !6, line: 420, baseType: !450, size: 64, offset: 320)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1426, file: !6, line: 423, baseType: !430, size: 64, offset: 384)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !382, file: !6, line: 744, baseType: !1433, size: 384)
!1433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !6, line: 429, size: 384, elements: !1434)
!1434 = !{!1435, !1436, !1437}
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1433, file: !6, line: 431, baseType: !385, size: 256)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1433, file: !6, line: 434, baseType: !450, size: 64, offset: 256)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1433, file: !6, line: 437, baseType: !430, size: 64, offset: 320)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !382, file: !6, line: 745, baseType: !1439, size: 384)
!1439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !6, line: 443, size: 384, elements: !1440)
!1440 = !{!1441, !1442, !1443}
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1439, file: !6, line: 445, baseType: !385, size: 256)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1439, file: !6, line: 449, baseType: !450, size: 64, offset: 256)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1439, file: !6, line: 453, baseType: !430, size: 64, offset: 320)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !382, file: !6, line: 746, baseType: !1445, size: 320)
!1445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !6, line: 459, size: 320, elements: !1446)
!1446 = !{!1447, !1448}
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1445, file: !6, line: 461, baseType: !385, size: 256)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1445, file: !6, line: 464, baseType: !450, size: 64, offset: 256)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !382, file: !6, line: 747, baseType: !1450, size: 768)
!1450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !6, line: 469, size: 768, elements: !1451)
!1451 = !{!1452, !1453, !1454, !1455, !1456}
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1450, file: !6, line: 471, baseType: !385, size: 256)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1450, file: !6, line: 474, baseType: !7, size: 32, offset: 256)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1450, file: !6, line: 475, baseType: !7, size: 32, offset: 288)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1450, file: !6, line: 478, baseType: !450, size: 64, offset: 320)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1450, file: !6, line: 481, baseType: !1457, size: 384, offset: 384)
!1457 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1458, size: 384, elements: !532)
!1458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !50, line: 1917, size: 384, elements: !1459)
!1459 = !{!1460, !1461, !1462}
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1458, file: !50, line: 1920, baseType: !915, size: 256)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1458, file: !50, line: 1921, baseType: !450, size: 64, offset: 256)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1458, file: !50, line: 1922, baseType: !398, size: 32, offset: 320)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !382, file: !6, line: 748, baseType: !1464, size: 320)
!1464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !6, line: 487, size: 320, elements: !1465)
!1465 = !{!1466, !1467}
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1464, file: !6, line: 490, baseType: !385, size: 256)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1464, file: !6, line: 494, baseType: !372, size: 32, offset: 256)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !382, file: !6, line: 749, baseType: !1469, size: 384)
!1469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !6, line: 500, size: 384, elements: !1470)
!1470 = !{!1471, !1472, !1473}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1469, file: !6, line: 502, baseType: !385, size: 256)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1469, file: !6, line: 506, baseType: !430, size: 64, offset: 256)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1469, file: !6, line: 510, baseType: !430, size: 64, offset: 320)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !382, file: !6, line: 750, baseType: !1475, size: 320)
!1475 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !6, line: 529, size: 320, elements: !1476)
!1476 = !{!1477, !1478}
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1475, file: !6, line: 531, baseType: !385, size: 256)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1475, file: !6, line: 540, baseType: !430, size: 64, offset: 256)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !382, file: !6, line: 751, baseType: !1480, size: 704)
!1480 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !6, line: 546, size: 704, elements: !1481)
!1481 = !{!1482, !1483, !1484, !1485, !1486, !1487, !1488}
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1480, file: !6, line: 549, baseType: !1410, size: 512)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1480, file: !6, line: 553, baseType: !377, size: 64, offset: 512)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1480, file: !6, line: 557, baseType: !371, size: 8, offset: 576)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1480, file: !6, line: 558, baseType: !371, size: 8, offset: 584)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1480, file: !6, line: 559, baseType: !371, size: 8, offset: 592)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1480, file: !6, line: 560, baseType: !371, size: 8, offset: 600)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1480, file: !6, line: 566, baseType: !810, size: 64, offset: 640)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !382, file: !6, line: 752, baseType: !1490, size: 384)
!1490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !6, line: 571, size: 384, elements: !1491)
!1491 = !{!1492, !1493}
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1490, file: !6, line: 573, baseType: !1421, size: 320)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1490, file: !6, line: 577, baseType: !450, size: 64, offset: 320)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !382, file: !6, line: 753, baseType: !1495, size: 576)
!1495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !6, line: 600, size: 576, elements: !1496)
!1496 = !{!1497, !1498, !1499, !1500, !1509}
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1495, file: !6, line: 602, baseType: !1421, size: 320)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1495, file: !6, line: 605, baseType: !450, size: 64, offset: 320)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1495, file: !6, line: 609, baseType: !760, size: 64, offset: 384)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1495, file: !6, line: 612, baseType: !1501, size: 64, offset: 448)
!1501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1502, size: 64)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !6, line: 581, size: 320, elements: !1503)
!1503 = !{!1504, !1505, !1506, !1507, !1508}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1502, file: !6, line: 583, baseType: !82, size: 32)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1502, file: !6, line: 586, baseType: !450, size: 64, offset: 64)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1502, file: !6, line: 589, baseType: !450, size: 64, offset: 128)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1502, file: !6, line: 592, baseType: !450, size: 64, offset: 192)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1502, file: !6, line: 595, baseType: !450, size: 64, offset: 256)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1495, file: !6, line: 616, baseType: !430, size: 64, offset: 512)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !382, file: !6, line: 754, baseType: !1511, size: 512)
!1511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !6, line: 622, size: 512, elements: !1512)
!1512 = !{!1513, !1514, !1515, !1516}
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1511, file: !6, line: 624, baseType: !1421, size: 320)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1511, file: !6, line: 628, baseType: !450, size: 64, offset: 320)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1511, file: !6, line: 632, baseType: !450, size: 64, offset: 384)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1511, file: !6, line: 636, baseType: !450, size: 64, offset: 448)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !382, file: !6, line: 755, baseType: !1518, size: 704)
!1518 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !6, line: 642, size: 704, elements: !1519)
!1519 = !{!1520, !1521, !1522, !1523}
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1518, file: !6, line: 644, baseType: !1511, size: 512)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1518, file: !6, line: 648, baseType: !450, size: 64, offset: 512)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1518, file: !6, line: 652, baseType: !450, size: 64, offset: 576)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1518, file: !6, line: 653, baseType: !450, size: 64, offset: 640)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !382, file: !6, line: 756, baseType: !1525, size: 448)
!1525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !6, line: 663, size: 448, elements: !1526)
!1526 = !{!1527, !1528, !1529}
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1525, file: !6, line: 665, baseType: !1421, size: 320)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1525, file: !6, line: 668, baseType: !450, size: 64, offset: 320)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1525, file: !6, line: 673, baseType: !450, size: 64, offset: 384)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !382, file: !6, line: 757, baseType: !1531, size: 384)
!1531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !6, line: 694, size: 384, elements: !1532)
!1532 = !{!1533, !1534}
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1531, file: !6, line: 696, baseType: !1421, size: 320)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1531, file: !6, line: 699, baseType: !450, size: 64, offset: 320)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !382, file: !6, line: 758, baseType: !1536, size: 384)
!1536 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !6, line: 681, size: 384, elements: !1537)
!1537 = !{!1538, !1539, !1540}
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1536, file: !6, line: 683, baseType: !385, size: 256)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1536, file: !6, line: 686, baseType: !450, size: 64, offset: 256)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1536, file: !6, line: 689, baseType: !450, size: 64, offset: 320)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !382, file: !6, line: 759, baseType: !1542, size: 384)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !6, line: 707, size: 384, elements: !1543)
!1543 = !{!1544, !1545, !1546}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1542, file: !6, line: 709, baseType: !385, size: 256)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1542, file: !6, line: 712, baseType: !450, size: 64, offset: 256)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1542, file: !6, line: 712, baseType: !450, size: 64, offset: 320)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !382, file: !6, line: 760, baseType: !1548, size: 320)
!1548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !6, line: 718, size: 320, elements: !1549)
!1549 = !{!1550, !1551}
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1548, file: !6, line: 720, baseType: !385, size: 256)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1548, file: !6, line: 723, baseType: !450, size: 64, offset: 256)
!1552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1553, size: 64)
!1553 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !452)
!1554 = !DIDerivedType(tag: DW_TAG_typedef, name: "ptrdiff_t", file: !761, line: 35, baseType: !505)
!1555 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !377, size: 64)
!1556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1557, size: 64)
!1557 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !382)
!1558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1559, size: 64)
!1559 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !50, line: 184, baseType: !1560)
!1560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !50, line: 184, size: 128, elements: !1561)
!1561 = !{!1562}
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1560, file: !50, line: 184, baseType: !804, size: 128)
!1563 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !380, line: 59, baseType: !1552)
!1564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!1565 = !DISubroutineType(types: !1566)
!1566 = !{!376, !505}
!1567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1568, size: 64)
!1568 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sccs", file: !3, line: 3515, size: 128, elements: !1569)
!1569 = !{!1570, !1571, !1572, !1573}
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "dfsnum", scope: !1568, file: !3, line: 3517, baseType: !7, size: 32)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1568, file: !3, line: 3518, baseType: !7, size: 32, offset: 32)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "on_sccstack", scope: !1568, file: !3, line: 3519, baseType: !371, size: 8, offset: 64)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1568, file: !3, line: 3520, baseType: !744, size: 32, offset: 96)
!1574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1575, size: 64)
!1575 = !DIDerivedType(tag: DW_TAG_typedef, name: "type_pair_t", file: !3, line: 3026, baseType: !1576)
!1576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1577, size: 64)
!1577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "type_pair_d", file: !3, line: 3020, size: 96, elements: !1578)
!1578 = !{!1579, !1580, !1581}
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "uid1", scope: !1577, file: !3, line: 3022, baseType: !7, size: 32)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "uid2", scope: !1577, file: !3, line: 3023, baseType: !7, size: 32, offset: 32)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "same_p", scope: !1577, file: !3, line: 3024, baseType: !372, size: 32, offset: 64)
!1582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1583, size: 64)
!1583 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1577)
!1584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1585, size: 64)
!1585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "walk_stmt_info", file: !6, line: 4652, size: 448, elements: !1586)
!1586 = !{!1587, !1594, !1595, !1598, !1599, !1600, !1601, !1602}
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "gsi", scope: !1585, file: !6, line: 4655, baseType: !1588, size: 192)
!1588 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !6, line: 265, baseType: !1589)
!1589 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !6, line: 254, size: 192, elements: !1590)
!1590 = !{!1591, !1592, !1593}
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1589, file: !6, line: 257, baseType: !435, size: 64)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1589, file: !6, line: 263, baseType: !430, size: 64, offset: 64)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1589, file: !6, line: 264, baseType: !700, size: 64, offset: 128)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !1585, file: !6, line: 4659, baseType: !376, size: 64, offset: 192)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "pset", scope: !1585, file: !6, line: 4664, baseType: !1596, size: 64, offset: 256)
!1596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1597, size: 64)
!1597 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_set_t", file: !50, line: 5199, flags: DIFlagFwdDecl)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "val_only", scope: !1585, file: !6, line: 4678, baseType: !371, size: 8, offset: 320)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "is_lhs", scope: !1585, file: !6, line: 4681, baseType: !371, size: 8, offset: 328)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !1585, file: !6, line: 4685, baseType: !371, size: 8, offset: 336)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "want_locations", scope: !1585, file: !6, line: 4688, baseType: !371, size: 8, offset: 344)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "callback_result", scope: !1585, file: !6, line: 4694, baseType: !450, size: 64, offset: 384)
!1603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1604, size: 64)
!1604 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "count_ptr_d", file: !3, line: 4233, size: 128, elements: !1605)
!1605 = !{!1606, !1607, !1608}
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1604, file: !3, line: 4235, baseType: !450, size: 64)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "num_stores", scope: !1604, file: !3, line: 4236, baseType: !7, size: 32, offset: 64)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "num_loads", scope: !1604, file: !3, line: 4237, baseType: !7, size: 32, offset: 96)
!1609 = !{!0, !1610, !1616, !1620, !1625, !1639, !1641, !1643, !1645, !1647, !1649, !1655}
!1610 = !DIGlobalVariableExpression(var: !1611, expr: !DIExpression())
!1611 = distinct !DIGlobalVariable(name: "gimple_code_name", scope: !2, file: !3, line: 69, type: !1612, isLocal: false, isDefinition: true)
!1612 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1613, size: 2240, elements: !1614)
!1613 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !377)
!1614 = !{!1615}
!1615 = !DISubrange(count: 35)
!1616 = !DIGlobalVariableExpression(var: !1617, expr: !DIExpression())
!1617 = distinct !DIGlobalVariable(name: "gss_for_code_", scope: !2, file: !3, line: 75, type: !1618, isLocal: false, isDefinition: true)
!1618 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1619, size: 1120, elements: !1614)
!1619 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !5)
!1620 = !DIGlobalVariableExpression(var: !1621, expr: !DIExpression())
!1621 = distinct !DIGlobalVariable(name: "gimple_rhs_class_table", scope: !2, file: !3, line: 2410, type: !1622, isLocal: false, isDefinition: true)
!1622 = !DICompositeType(tag: DW_TAG_array_type, baseType: !550, size: 1528, elements: !1623)
!1623 = !{!1624}
!1624 = !DISubrange(count: 191)
!1625 = !DIGlobalVariableExpression(var: !1626, expr: !DIExpression())
!1626 = distinct !DIGlobalVariable(name: "gt_ggc_rd_gt_gimple_h", scope: !2, file: !1627, line: 24, type: !1628, isLocal: false, isDefinition: true)
!1627 = !DIFile(filename: "./gt-gimple.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1628 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1629, size: 640, elements: !722)
!1629 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1630)
!1630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ggc_root_tab", file: !1631, line: 69, size: 320, elements: !1632)
!1631 = !DIFile(filename: "./ggc.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1632 = !{!1633, !1634, !1635, !1636, !1638}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1630, file: !1631, line: 70, baseType: !376, size: 64)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "nelt", scope: !1630, file: !1631, line: 71, baseType: !760, size: 64, offset: 64)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "stride", scope: !1630, file: !1631, line: 72, baseType: !760, size: 64, offset: 128)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "cb", scope: !1630, file: !1631, line: 73, baseType: !1637, size: 64, offset: 192)
!1637 = !DIDerivedType(tag: DW_TAG_typedef, name: "gt_pointer_walker", file: !1631, line: 65, baseType: !754)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "pchw", scope: !1630, file: !1631, line: 74, baseType: !1637, size: 64, offset: 256)
!1639 = !DIGlobalVariableExpression(var: !1640, expr: !DIExpression())
!1640 = distinct !DIGlobalVariable(name: "gimple_types", scope: !2, file: !3, line: 44, type: !734, isLocal: true, isDefinition: true)
!1641 = !DIGlobalVariableExpression(var: !1642, expr: !DIExpression())
!1642 = distinct !DIGlobalVariable(name: "type_hash_cache", scope: !2, file: !3, line: 45, type: !883, isLocal: true, isDefinition: true)
!1643 = !DIGlobalVariableExpression(var: !1644, expr: !DIExpression())
!1644 = distinct !DIGlobalVariable(name: "gtc_visited", scope: !2, file: !3, line: 48, type: !734, isLocal: true, isDefinition: true)
!1645 = !DIGlobalVariableExpression(var: !1646, expr: !DIExpression())
!1646 = distinct !DIGlobalVariable(name: "gtc_ob", scope: !2, file: !3, line: 49, type: !850, isLocal: true, isDefinition: true)
!1647 = !DIGlobalVariableExpression(var: !1648, expr: !DIExpression())
!1648 = distinct !DIGlobalVariable(name: "gimple_seq_cache", scope: !2, file: !3, line: 99, type: !431, isLocal: true, isDefinition: true)
!1649 = !DIGlobalVariableExpression(var: !1650, expr: !DIExpression())
!1650 = distinct !DIGlobalVariable(name: "gsstruct_code_size", scope: !2, file: !3, line: 63, type: !1651, isLocal: true, isDefinition: true)
!1651 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1652, size: 1472, elements: !1653)
!1652 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !760)
!1653 = !{!1654}
!1654 = !DISubrange(count: 23)
!1655 = !DIGlobalVariableExpression(var: !1656, expr: !DIExpression())
!1656 = distinct !DIGlobalVariable(name: "next_dfs_num", scope: !2, file: !3, line: 3523, type: !7, isLocal: true, isDefinition: true)
!1657 = !{i32 2, !"Dwarf Version", i32 4}
!1658 = !{i32 2, !"Debug Info Version", i32 3}
!1659 = !{i32 1, !"wchar_size", i32 4}
!1660 = !{!"clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)"}
!1661 = distinct !DISubprogram(name: "vprintf", scope: !1662, file: !1662, line: 39, type: !1663, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1673)
!1662 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdio.h", directory: "")
!1663 = !DISubroutineType(types: !1664)
!1664 = !{!372, !1665, !1666}
!1665 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !377)
!1666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1667, size: 64)
!1667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, size: 192, elements: !1668)
!1668 = !{!1669, !1670, !1671, !1672}
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !1667, file: !3, baseType: !7, size: 32)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !1667, file: !3, baseType: !7, size: 32, offset: 32)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !1667, file: !3, baseType: !376, size: 64, offset: 64)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !1667, file: !3, baseType: !376, size: 64, offset: 128)
!1673 = !{!1674, !1675}
!1674 = !DILocalVariable(name: "__fmt", arg: 1, scope: !1661, file: !1662, line: 39, type: !1665)
!1675 = !DILocalVariable(name: "__arg", arg: 2, scope: !1661, file: !1662, line: 39, type: !1666)
!1676 = !DILocation(line: 0, scope: !1661)
!1677 = !DILocation(line: 41, column: 20, scope: !1661)
!1678 = !DILocation(line: 41, column: 10, scope: !1661)
!1679 = !DILocation(line: 41, column: 3, scope: !1661)
!1680 = distinct !DISubprogram(name: "getchar", scope: !1662, file: !1662, line: 47, type: !1681, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1683)
!1681 = !DISubroutineType(types: !1682)
!1682 = !{!372}
!1683 = !{}
!1684 = !DILocation(line: 49, column: 16, scope: !1680)
!1685 = !DILocation(line: 49, column: 10, scope: !1680)
!1686 = !DILocation(line: 49, column: 3, scope: !1680)
!1687 = distinct !DISubprogram(name: "fgetc_unlocked", scope: !1662, file: !1662, line: 56, type: !1688, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1741)
!1688 = !DISubroutineType(types: !1689)
!1689 = !{!372, !1690}
!1690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1691, size: 64)
!1691 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !1692, line: 7, baseType: !1693)
!1692 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !1694, line: 49, size: 1728, elements: !1695)
!1694 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!1695 = !{!1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1711, !1713, !1714, !1715, !1718, !1720, !1721, !1722, !1725, !1727, !1730, !1733, !1734, !1735, !1736, !1737}
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !1693, file: !1694, line: 51, baseType: !372, size: 32)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !1693, file: !1694, line: 54, baseType: !374, size: 64, offset: 64)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !1693, file: !1694, line: 55, baseType: !374, size: 64, offset: 128)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !1693, file: !1694, line: 56, baseType: !374, size: 64, offset: 192)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !1693, file: !1694, line: 57, baseType: !374, size: 64, offset: 256)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !1693, file: !1694, line: 58, baseType: !374, size: 64, offset: 320)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !1693, file: !1694, line: 59, baseType: !374, size: 64, offset: 384)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !1693, file: !1694, line: 60, baseType: !374, size: 64, offset: 448)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !1693, file: !1694, line: 61, baseType: !374, size: 64, offset: 512)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !1693, file: !1694, line: 64, baseType: !374, size: 64, offset: 576)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !1693, file: !1694, line: 65, baseType: !374, size: 64, offset: 640)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !1693, file: !1694, line: 66, baseType: !374, size: 64, offset: 704)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !1693, file: !1694, line: 68, baseType: !1709, size: 64, offset: 768)
!1709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1710, size: 64)
!1710 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !1694, line: 36, flags: DIFlagFwdDecl)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !1693, file: !1694, line: 70, baseType: !1712, size: 64, offset: 832)
!1712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1693, size: 64)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !1693, file: !1694, line: 72, baseType: !372, size: 32, offset: 896)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !1693, file: !1694, line: 73, baseType: !372, size: 32, offset: 928)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !1693, file: !1694, line: 74, baseType: !1716, size: 64, offset: 960)
!1716 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !1717, line: 152, baseType: !505)
!1717 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !1693, file: !1694, line: 77, baseType: !1719, size: 16, offset: 1024)
!1719 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !1693, file: !1694, line: 78, baseType: !1184, size: 8, offset: 1040)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !1693, file: !1694, line: 79, baseType: !531, size: 8, offset: 1048)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !1693, file: !1694, line: 81, baseType: !1723, size: 64, offset: 1088)
!1723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1724, size: 64)
!1724 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !1694, line: 43, baseType: null)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !1693, file: !1694, line: 89, baseType: !1726, size: 64, offset: 1152)
!1726 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !1717, line: 153, baseType: !505)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !1693, file: !1694, line: 91, baseType: !1728, size: 64, offset: 1216)
!1728 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1729, size: 64)
!1729 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !1694, line: 37, flags: DIFlagFwdDecl)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !1693, file: !1694, line: 92, baseType: !1731, size: 64, offset: 1280)
!1731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1732, size: 64)
!1732 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !1694, line: 38, flags: DIFlagFwdDecl)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !1693, file: !1694, line: 93, baseType: !1712, size: 64, offset: 1344)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !1693, file: !1694, line: 94, baseType: !376, size: 64, offset: 1408)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !1693, file: !1694, line: 95, baseType: !760, size: 64, offset: 1472)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !1693, file: !1694, line: 96, baseType: !372, size: 32, offset: 1536)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !1693, file: !1694, line: 98, baseType: !1738, size: 160, offset: 1568)
!1738 = !DICompositeType(tag: DW_TAG_array_type, baseType: !375, size: 160, elements: !1739)
!1739 = !{!1740}
!1740 = !DISubrange(count: 20)
!1741 = !{!1742}
!1742 = !DILocalVariable(name: "__fp", arg: 1, scope: !1687, file: !1662, line: 56, type: !1690)
!1743 = !DILocation(line: 0, scope: !1687)
!1744 = !DILocation(line: 58, column: 10, scope: !1687)
!1745 = !DILocation(line: 58, column: 3, scope: !1687)
!1746 = distinct !DISubprogram(name: "getc_unlocked", scope: !1662, file: !1662, line: 66, type: !1688, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1747)
!1747 = !{!1748}
!1748 = !DILocalVariable(name: "__fp", arg: 1, scope: !1746, file: !1662, line: 66, type: !1690)
!1749 = !DILocation(line: 0, scope: !1746)
!1750 = !DILocation(line: 68, column: 10, scope: !1746)
!1751 = !DILocation(line: 68, column: 3, scope: !1746)
!1752 = distinct !DISubprogram(name: "getchar_unlocked", scope: !1662, file: !1662, line: 73, type: !1681, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1683)
!1753 = !DILocation(line: 75, column: 10, scope: !1752)
!1754 = !DILocation(line: 75, column: 3, scope: !1752)
!1755 = distinct !DISubprogram(name: "putchar", scope: !1662, file: !1662, line: 82, type: !1756, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1758)
!1756 = !DISubroutineType(types: !1757)
!1757 = !{!372, !372}
!1758 = !{!1759}
!1759 = !DILocalVariable(name: "__c", arg: 1, scope: !1755, file: !1662, line: 82, type: !372)
!1760 = !DILocation(line: 0, scope: !1755)
!1761 = !DILocation(line: 84, column: 21, scope: !1755)
!1762 = !DILocation(line: 84, column: 10, scope: !1755)
!1763 = !DILocation(line: 84, column: 3, scope: !1755)
!1764 = distinct !DISubprogram(name: "fputc_unlocked", scope: !1662, file: !1662, line: 91, type: !1765, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1767)
!1765 = !DISubroutineType(types: !1766)
!1766 = !{!372, !372, !1690}
!1767 = !{!1768, !1769}
!1768 = !DILocalVariable(name: "__c", arg: 1, scope: !1764, file: !1662, line: 91, type: !372)
!1769 = !DILocalVariable(name: "__stream", arg: 2, scope: !1764, file: !1662, line: 91, type: !1690)
!1770 = !DILocation(line: 0, scope: !1764)
!1771 = !DILocation(line: 93, column: 10, scope: !1764)
!1772 = !DILocation(line: 93, column: 3, scope: !1764)
!1773 = distinct !DISubprogram(name: "putc_unlocked", scope: !1662, file: !1662, line: 101, type: !1765, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1774)
!1774 = !{!1775, !1776}
!1775 = !DILocalVariable(name: "__c", arg: 1, scope: !1773, file: !1662, line: 101, type: !372)
!1776 = !DILocalVariable(name: "__stream", arg: 2, scope: !1773, file: !1662, line: 101, type: !1690)
!1777 = !DILocation(line: 0, scope: !1773)
!1778 = !DILocation(line: 103, column: 10, scope: !1773)
!1779 = !DILocation(line: 103, column: 3, scope: !1773)
!1780 = distinct !DISubprogram(name: "putchar_unlocked", scope: !1662, file: !1662, line: 108, type: !1756, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1781)
!1781 = !{!1782}
!1782 = !DILocalVariable(name: "__c", arg: 1, scope: !1780, file: !1662, line: 108, type: !372)
!1783 = !DILocation(line: 0, scope: !1780)
!1784 = !DILocation(line: 110, column: 10, scope: !1780)
!1785 = !DILocation(line: 110, column: 3, scope: !1780)
!1786 = distinct !DISubprogram(name: "getline", scope: !1662, file: !1662, line: 118, type: !1787, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1791)
!1787 = !DISubroutineType(types: !1788)
!1788 = !{!1789, !373, !1790, !1690}
!1789 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !1717, line: 193, baseType: !505)
!1790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !760, size: 64)
!1791 = !{!1792, !1793, !1794}
!1792 = !DILocalVariable(name: "__lineptr", arg: 1, scope: !1786, file: !1662, line: 118, type: !373)
!1793 = !DILocalVariable(name: "__n", arg: 2, scope: !1786, file: !1662, line: 118, type: !1790)
!1794 = !DILocalVariable(name: "__stream", arg: 3, scope: !1786, file: !1662, line: 118, type: !1690)
!1795 = !DILocation(line: 0, scope: !1786)
!1796 = !DILocation(line: 120, column: 10, scope: !1786)
!1797 = !DILocation(line: 120, column: 3, scope: !1786)
!1798 = distinct !DISubprogram(name: "feof_unlocked", scope: !1662, file: !1662, line: 128, type: !1688, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1799)
!1799 = !{!1800}
!1800 = !DILocalVariable(name: "__stream", arg: 1, scope: !1798, file: !1662, line: 128, type: !1690)
!1801 = !DILocation(line: 0, scope: !1798)
!1802 = !DILocation(line: 130, column: 10, scope: !1798)
!1803 = !DILocation(line: 130, column: 3, scope: !1798)
!1804 = distinct !DISubprogram(name: "ferror_unlocked", scope: !1662, file: !1662, line: 135, type: !1688, scopeLine: 136, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1805)
!1805 = !{!1806}
!1806 = !DILocalVariable(name: "__stream", arg: 1, scope: !1804, file: !1662, line: 135, type: !1690)
!1807 = !DILocation(line: 0, scope: !1804)
!1808 = !DILocation(line: 137, column: 10, scope: !1804)
!1809 = !DILocation(line: 137, column: 3, scope: !1804)
!1810 = distinct !DISubprogram(name: "tolower", scope: !1811, file: !1811, line: 207, type: !1756, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1812)
!1811 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!1812 = !{!1813}
!1813 = !DILocalVariable(name: "__c", arg: 1, scope: !1810, file: !1811, line: 207, type: !372)
!1814 = !DILocation(line: 0, scope: !1810)
!1815 = !DILocation(line: 209, column: 22, scope: !1810)
!1816 = !DILocation(line: 209, column: 39, scope: !1810)
!1817 = !DILocation(line: 209, column: 38, scope: !1810)
!1818 = !DILocation(line: 209, column: 37, scope: !1810)
!1819 = !DILocation(line: 209, column: 10, scope: !1810)
!1820 = !DILocation(line: 209, column: 3, scope: !1810)
!1821 = distinct !DISubprogram(name: "toupper", scope: !1811, file: !1811, line: 213, type: !1756, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1822)
!1822 = !{!1823}
!1823 = !DILocalVariable(name: "__c", arg: 1, scope: !1821, file: !1811, line: 213, type: !372)
!1824 = !DILocation(line: 0, scope: !1821)
!1825 = !DILocation(line: 215, column: 22, scope: !1821)
!1826 = !DILocation(line: 215, column: 39, scope: !1821)
!1827 = !DILocation(line: 215, column: 38, scope: !1821)
!1828 = !DILocation(line: 215, column: 37, scope: !1821)
!1829 = !DILocation(line: 215, column: 10, scope: !1821)
!1830 = !DILocation(line: 215, column: 3, scope: !1821)
!1831 = distinct !DISubprogram(name: "atoi", scope: !1832, file: !1832, line: 361, type: !1833, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1835)
!1832 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!1833 = !DISubroutineType(types: !1834)
!1834 = !{!372, !377}
!1835 = !{!1836}
!1836 = !DILocalVariable(name: "__nptr", arg: 1, scope: !1831, file: !1832, line: 361, type: !377)
!1837 = !DILocation(line: 0, scope: !1831)
!1838 = !DILocation(line: 363, column: 16, scope: !1831)
!1839 = !DILocation(line: 363, column: 10, scope: !1831)
!1840 = !DILocation(line: 363, column: 3, scope: !1831)
!1841 = distinct !DISubprogram(name: "atol", scope: !1832, file: !1832, line: 366, type: !1842, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1844)
!1842 = !DISubroutineType(types: !1843)
!1843 = !{!505, !377}
!1844 = !{!1845}
!1845 = !DILocalVariable(name: "__nptr", arg: 1, scope: !1841, file: !1832, line: 366, type: !377)
!1846 = !DILocation(line: 0, scope: !1841)
!1847 = !DILocation(line: 368, column: 10, scope: !1841)
!1848 = !DILocation(line: 368, column: 3, scope: !1841)
!1849 = distinct !DISubprogram(name: "atoll", scope: !1832, file: !1832, line: 373, type: !1850, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1853)
!1850 = !DISubroutineType(types: !1851)
!1851 = !{!1852, !377}
!1852 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!1853 = !{!1854}
!1854 = !DILocalVariable(name: "__nptr", arg: 1, scope: !1849, file: !1832, line: 373, type: !377)
!1855 = !DILocation(line: 0, scope: !1849)
!1856 = !DILocation(line: 375, column: 10, scope: !1849)
!1857 = !DILocation(line: 375, column: 3, scope: !1849)
!1858 = distinct !DISubprogram(name: "bsearch", scope: !1859, file: !1859, line: 20, type: !1860, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1863)
!1859 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h", directory: "")
!1860 = !DISubroutineType(types: !1861)
!1861 = !{!376, !745, !745, !760, !760, !1862}
!1862 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !1832, line: 808, baseType: !749)
!1863 = !{!1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873}
!1864 = !DILocalVariable(name: "__key", arg: 1, scope: !1858, file: !1859, line: 20, type: !745)
!1865 = !DILocalVariable(name: "__base", arg: 2, scope: !1858, file: !1859, line: 20, type: !745)
!1866 = !DILocalVariable(name: "__nmemb", arg: 3, scope: !1858, file: !1859, line: 20, type: !760)
!1867 = !DILocalVariable(name: "__size", arg: 4, scope: !1858, file: !1859, line: 20, type: !760)
!1868 = !DILocalVariable(name: "__compar", arg: 5, scope: !1858, file: !1859, line: 21, type: !1862)
!1869 = !DILocalVariable(name: "__l", scope: !1858, file: !1859, line: 23, type: !760)
!1870 = !DILocalVariable(name: "__u", scope: !1858, file: !1859, line: 23, type: !760)
!1871 = !DILocalVariable(name: "__idx", scope: !1858, file: !1859, line: 23, type: !760)
!1872 = !DILocalVariable(name: "__p", scope: !1858, file: !1859, line: 24, type: !745)
!1873 = !DILocalVariable(name: "__comparison", scope: !1858, file: !1859, line: 25, type: !372)
!1874 = !DILocation(line: 0, scope: !1858)
!1875 = !DILocation(line: 29, column: 3, scope: !1858)
!1876 = !DILocation(line: 27, column: 7, scope: !1858)
!1877 = !DILocation(line: 29, column: 14, scope: !1858)
!1878 = !DILocation(line: 31, column: 20, scope: !1879)
!1879 = distinct !DILexicalBlock(scope: !1858, file: !1859, line: 30, column: 5)
!1880 = !DILocation(line: 31, column: 27, scope: !1879)
!1881 = !DILocation(line: 32, column: 56, scope: !1879)
!1882 = !DILocation(line: 32, column: 47, scope: !1879)
!1883 = !DILocation(line: 33, column: 22, scope: !1879)
!1884 = !DILocation(line: 34, column: 24, scope: !1885)
!1885 = distinct !DILexicalBlock(scope: !1879, file: !1859, line: 34, column: 11)
!1886 = !DILocation(line: 34, column: 11, scope: !1879)
!1887 = !DILocation(line: 36, column: 29, scope: !1888)
!1888 = distinct !DILexicalBlock(scope: !1885, file: !1859, line: 36, column: 16)
!1889 = !DILocation(line: 36, column: 16, scope: !1885)
!1890 = !DILocation(line: 37, column: 14, scope: !1888)
!1891 = distinct !{!1891, !1875, !1892}
!1892 = !DILocation(line: 40, column: 5, scope: !1858)
!1893 = !DILocation(line: 43, column: 1, scope: !1858)
!1894 = distinct !DISubprogram(name: "atof", scope: !1895, file: !1895, line: 25, type: !1896, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1899)
!1895 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h", directory: "")
!1896 = !DISubroutineType(types: !1897)
!1897 = !{!1898, !377}
!1898 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!1899 = !{!1900}
!1900 = !DILocalVariable(name: "__nptr", arg: 1, scope: !1894, file: !1895, line: 25, type: !377)
!1901 = !DILocation(line: 0, scope: !1894)
!1902 = !DILocation(line: 27, column: 10, scope: !1894)
!1903 = !DILocation(line: 27, column: 3, scope: !1894)
!1904 = distinct !DISubprogram(name: "strtoimax", scope: !1905, file: !1905, line: 324, type: !1906, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1912)
!1905 = !DIFile(filename: "/usr/include/inttypes.h", directory: "")
!1906 = !DISubroutineType(types: !1907)
!1907 = !{!1908, !1665, !1911, !372}
!1908 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !1909, line: 101, baseType: !1910)
!1909 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!1910 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !1717, line: 72, baseType: !505)
!1911 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !373)
!1912 = !{!1913, !1914, !1915}
!1913 = !DILocalVariable(name: "nptr", arg: 1, scope: !1904, file: !1905, line: 324, type: !1665)
!1914 = !DILocalVariable(name: "endptr", arg: 2, scope: !1904, file: !1905, line: 324, type: !1911)
!1915 = !DILocalVariable(name: "base", arg: 3, scope: !1904, file: !1905, line: 324, type: !372)
!1916 = !DILocation(line: 0, scope: !1904)
!1917 = !DILocation(line: 327, column: 10, scope: !1904)
!1918 = !DILocation(line: 327, column: 3, scope: !1904)
!1919 = distinct !DISubprogram(name: "strtoumax", scope: !1905, file: !1905, line: 336, type: !1920, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1924)
!1920 = !DISubroutineType(types: !1921)
!1921 = !{!1922, !1665, !1911, !372}
!1922 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !1909, line: 102, baseType: !1923)
!1923 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !1717, line: 73, baseType: !503)
!1924 = !{!1925, !1926, !1927}
!1925 = !DILocalVariable(name: "nptr", arg: 1, scope: !1919, file: !1905, line: 336, type: !1665)
!1926 = !DILocalVariable(name: "endptr", arg: 2, scope: !1919, file: !1905, line: 336, type: !1911)
!1927 = !DILocalVariable(name: "base", arg: 3, scope: !1919, file: !1905, line: 336, type: !372)
!1928 = !DILocation(line: 0, scope: !1919)
!1929 = !DILocation(line: 339, column: 10, scope: !1919)
!1930 = !DILocation(line: 339, column: 3, scope: !1919)
!1931 = distinct !DISubprogram(name: "wcstoimax", scope: !1905, file: !1905, line: 348, type: !1932, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1941)
!1932 = !DISubroutineType(types: !1933)
!1933 = !{!1908, !1934, !1938, !372}
!1934 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !1935)
!1935 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1936, size: 64)
!1936 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1937)
!1937 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gwchar_t", file: !1905, line: 34, baseType: !372)
!1938 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !1939)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1940, size: 64)
!1940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1937, size: 64)
!1941 = !{!1942, !1943, !1944}
!1942 = !DILocalVariable(name: "nptr", arg: 1, scope: !1931, file: !1905, line: 348, type: !1934)
!1943 = !DILocalVariable(name: "endptr", arg: 2, scope: !1931, file: !1905, line: 348, type: !1938)
!1944 = !DILocalVariable(name: "base", arg: 3, scope: !1931, file: !1905, line: 348, type: !372)
!1945 = !DILocation(line: 0, scope: !1931)
!1946 = !DILocation(line: 351, column: 10, scope: !1931)
!1947 = !DILocation(line: 351, column: 3, scope: !1931)
!1948 = distinct !DISubprogram(name: "wcstoumax", scope: !1905, file: !1905, line: 362, type: !1949, scopeLine: 364, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1951)
!1949 = !DISubroutineType(types: !1950)
!1950 = !{!1922, !1934, !1938, !372}
!1951 = !{!1952, !1953, !1954}
!1952 = !DILocalVariable(name: "nptr", arg: 1, scope: !1948, file: !1905, line: 362, type: !1934)
!1953 = !DILocalVariable(name: "endptr", arg: 2, scope: !1948, file: !1905, line: 362, type: !1938)
!1954 = !DILocalVariable(name: "base", arg: 3, scope: !1948, file: !1905, line: 362, type: !372)
!1955 = !DILocation(line: 0, scope: !1948)
!1956 = !DILocation(line: 365, column: 10, scope: !1948)
!1957 = !DILocation(line: 365, column: 3, scope: !1948)
!1958 = distinct !DISubprogram(name: "stat", scope: !1959, file: !1959, line: 453, type: !1960, scopeLine: 454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1999)
!1959 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/stat.h", directory: "")
!1960 = !DISubroutineType(types: !1961)
!1961 = !{!372, !377, !1962}
!1962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1963, size: 64)
!1963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !1964, line: 46, size: 1152, elements: !1965)
!1964 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!1965 = !{!1966, !1968, !1970, !1972, !1974, !1976, !1978, !1979, !1980, !1981, !1983, !1985, !1993, !1994, !1995}
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !1963, file: !1964, line: 48, baseType: !1967, size: 64)
!1967 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !1717, line: 145, baseType: !503)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !1963, file: !1964, line: 53, baseType: !1969, size: 64, offset: 64)
!1969 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !1717, line: 148, baseType: !503)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !1963, file: !1964, line: 61, baseType: !1971, size: 64, offset: 128)
!1971 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !1717, line: 151, baseType: !503)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !1963, file: !1964, line: 62, baseType: !1973, size: 32, offset: 192)
!1973 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !1717, line: 150, baseType: !7)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !1963, file: !1964, line: 64, baseType: !1975, size: 32, offset: 224)
!1975 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !1717, line: 146, baseType: !7)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !1963, file: !1964, line: 65, baseType: !1977, size: 32, offset: 256)
!1977 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !1717, line: 147, baseType: !7)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !1963, file: !1964, line: 67, baseType: !372, size: 32, offset: 288)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !1963, file: !1964, line: 69, baseType: !1967, size: 64, offset: 320)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !1963, file: !1964, line: 74, baseType: !1716, size: 64, offset: 384)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !1963, file: !1964, line: 78, baseType: !1982, size: 64, offset: 448)
!1982 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !1717, line: 174, baseType: !505)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !1963, file: !1964, line: 80, baseType: !1984, size: 64, offset: 512)
!1984 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !1717, line: 179, baseType: !505)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !1963, file: !1964, line: 91, baseType: !1986, size: 128, offset: 576)
!1986 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !1987, line: 10, size: 128, elements: !1988)
!1987 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!1988 = !{!1989, !1991}
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1986, file: !1987, line: 12, baseType: !1990, size: 64)
!1990 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !1717, line: 160, baseType: !505)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1986, file: !1987, line: 16, baseType: !1992, size: 64, offset: 64)
!1992 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !1717, line: 196, baseType: !505)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !1963, file: !1964, line: 92, baseType: !1986, size: 128, offset: 704)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !1963, file: !1964, line: 93, baseType: !1986, size: 128, offset: 832)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !1963, file: !1964, line: 106, baseType: !1996, size: 192, offset: 960)
!1996 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1992, size: 192, elements: !1997)
!1997 = !{!1998}
!1998 = !DISubrange(count: 3)
!1999 = !{!2000, !2001}
!2000 = !DILocalVariable(name: "__path", arg: 1, scope: !1958, file: !1959, line: 453, type: !377)
!2001 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !1958, file: !1959, line: 453, type: !1962)
!2002 = !DILocation(line: 0, scope: !1958)
!2003 = !DILocation(line: 455, column: 10, scope: !1958)
!2004 = !DILocation(line: 455, column: 3, scope: !1958)
!2005 = distinct !DISubprogram(name: "lstat", scope: !1959, file: !1959, line: 460, type: !1960, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2006)
!2006 = !{!2007, !2008}
!2007 = !DILocalVariable(name: "__path", arg: 1, scope: !2005, file: !1959, line: 460, type: !377)
!2008 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2005, file: !1959, line: 460, type: !1962)
!2009 = !DILocation(line: 0, scope: !2005)
!2010 = !DILocation(line: 462, column: 10, scope: !2005)
!2011 = !DILocation(line: 462, column: 3, scope: !2005)
!2012 = distinct !DISubprogram(name: "fstat", scope: !1959, file: !1959, line: 467, type: !2013, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2015)
!2013 = !DISubroutineType(types: !2014)
!2014 = !{!372, !372, !1962}
!2015 = !{!2016, !2017}
!2016 = !DILocalVariable(name: "__fd", arg: 1, scope: !2012, file: !1959, line: 467, type: !372)
!2017 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2012, file: !1959, line: 467, type: !1962)
!2018 = !DILocation(line: 0, scope: !2012)
!2019 = !DILocation(line: 469, column: 10, scope: !2012)
!2020 = !DILocation(line: 469, column: 3, scope: !2012)
!2021 = distinct !DISubprogram(name: "fstatat", scope: !1959, file: !1959, line: 474, type: !2022, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2024)
!2022 = !DISubroutineType(types: !2023)
!2023 = !{!372, !372, !377, !1962, !372}
!2024 = !{!2025, !2026, !2027, !2028}
!2025 = !DILocalVariable(name: "__fd", arg: 1, scope: !2021, file: !1959, line: 474, type: !372)
!2026 = !DILocalVariable(name: "__filename", arg: 2, scope: !2021, file: !1959, line: 474, type: !377)
!2027 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2021, file: !1959, line: 474, type: !1962)
!2028 = !DILocalVariable(name: "__flag", arg: 4, scope: !2021, file: !1959, line: 474, type: !372)
!2029 = !DILocation(line: 0, scope: !2021)
!2030 = !DILocation(line: 477, column: 10, scope: !2021)
!2031 = !DILocation(line: 477, column: 3, scope: !2021)
!2032 = distinct !DISubprogram(name: "mknod", scope: !1959, file: !1959, line: 483, type: !2033, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2035)
!2033 = !DISubroutineType(types: !2034)
!2034 = !{!372, !377, !1973, !1967}
!2035 = !{!2036, !2037, !2038}
!2036 = !DILocalVariable(name: "__path", arg: 1, scope: !2032, file: !1959, line: 483, type: !377)
!2037 = !DILocalVariable(name: "__mode", arg: 2, scope: !2032, file: !1959, line: 483, type: !1973)
!2038 = !DILocalVariable(name: "__dev", arg: 3, scope: !2032, file: !1959, line: 483, type: !1967)
!2039 = !DILocation(line: 0, scope: !2032)
!2040 = !DILocation(line: 485, column: 10, scope: !2032)
!2041 = !DILocation(line: 485, column: 3, scope: !2032)
!2042 = distinct !DISubprogram(name: "mknodat", scope: !1959, file: !1959, line: 491, type: !2043, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2045)
!2043 = !DISubroutineType(types: !2044)
!2044 = !{!372, !372, !377, !1973, !1967}
!2045 = !{!2046, !2047, !2048, !2049}
!2046 = !DILocalVariable(name: "__fd", arg: 1, scope: !2042, file: !1959, line: 491, type: !372)
!2047 = !DILocalVariable(name: "__path", arg: 2, scope: !2042, file: !1959, line: 491, type: !377)
!2048 = !DILocalVariable(name: "__mode", arg: 3, scope: !2042, file: !1959, line: 491, type: !1973)
!2049 = !DILocalVariable(name: "__dev", arg: 4, scope: !2042, file: !1959, line: 491, type: !1967)
!2050 = !DILocation(line: 0, scope: !2042)
!2051 = !DILocation(line: 494, column: 10, scope: !2042)
!2052 = !DILocation(line: 494, column: 3, scope: !2042)
!2053 = distinct !DISubprogram(name: "stat64", scope: !1959, file: !1959, line: 502, type: !2054, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2076)
!2054 = !DISubroutineType(types: !2055)
!2055 = !{!372, !377, !2056}
!2056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2057, size: 64)
!2057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !1964, line: 119, size: 1152, elements: !2058)
!2058 = !{!2059, !2060, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2072, !2073, !2074, !2075}
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2057, file: !1964, line: 121, baseType: !1967, size: 64)
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2057, file: !1964, line: 123, baseType: !2061, size: 64, offset: 64)
!2061 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino64_t", file: !1717, line: 149, baseType: !503)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2057, file: !1964, line: 124, baseType: !1971, size: 64, offset: 128)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2057, file: !1964, line: 125, baseType: !1973, size: 32, offset: 192)
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2057, file: !1964, line: 132, baseType: !1975, size: 32, offset: 224)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2057, file: !1964, line: 133, baseType: !1977, size: 32, offset: 256)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2057, file: !1964, line: 135, baseType: !372, size: 32, offset: 288)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2057, file: !1964, line: 136, baseType: !1967, size: 64, offset: 320)
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2057, file: !1964, line: 137, baseType: !1716, size: 64, offset: 384)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2057, file: !1964, line: 143, baseType: !1982, size: 64, offset: 448)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2057, file: !1964, line: 144, baseType: !2071, size: 64, offset: 512)
!2071 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt64_t", file: !1717, line: 180, baseType: !505)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2057, file: !1964, line: 152, baseType: !1986, size: 128, offset: 576)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2057, file: !1964, line: 153, baseType: !1986, size: 128, offset: 704)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2057, file: !1964, line: 154, baseType: !1986, size: 128, offset: 832)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2057, file: !1964, line: 164, baseType: !1996, size: 192, offset: 960)
!2076 = !{!2077, !2078}
!2077 = !DILocalVariable(name: "__path", arg: 1, scope: !2053, file: !1959, line: 502, type: !377)
!2078 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2053, file: !1959, line: 502, type: !2056)
!2079 = !DILocation(line: 0, scope: !2053)
!2080 = !DILocation(line: 504, column: 10, scope: !2053)
!2081 = !DILocation(line: 504, column: 3, scope: !2053)
!2082 = distinct !DISubprogram(name: "lstat64", scope: !1959, file: !1959, line: 509, type: !2054, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2083)
!2083 = !{!2084, !2085}
!2084 = !DILocalVariable(name: "__path", arg: 1, scope: !2082, file: !1959, line: 509, type: !377)
!2085 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2082, file: !1959, line: 509, type: !2056)
!2086 = !DILocation(line: 0, scope: !2082)
!2087 = !DILocation(line: 511, column: 10, scope: !2082)
!2088 = !DILocation(line: 511, column: 3, scope: !2082)
!2089 = distinct !DISubprogram(name: "fstat64", scope: !1959, file: !1959, line: 516, type: !2090, scopeLine: 517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2092)
!2090 = !DISubroutineType(types: !2091)
!2091 = !{!372, !372, !2056}
!2092 = !{!2093, !2094}
!2093 = !DILocalVariable(name: "__fd", arg: 1, scope: !2089, file: !1959, line: 516, type: !372)
!2094 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2089, file: !1959, line: 516, type: !2056)
!2095 = !DILocation(line: 0, scope: !2089)
!2096 = !DILocation(line: 518, column: 10, scope: !2089)
!2097 = !DILocation(line: 518, column: 3, scope: !2089)
!2098 = distinct !DISubprogram(name: "fstatat64", scope: !1959, file: !1959, line: 523, type: !2099, scopeLine: 525, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2101)
!2099 = !DISubroutineType(types: !2100)
!2100 = !{!372, !372, !377, !2056, !372}
!2101 = !{!2102, !2103, !2104, !2105}
!2102 = !DILocalVariable(name: "__fd", arg: 1, scope: !2098, file: !1959, line: 523, type: !372)
!2103 = !DILocalVariable(name: "__filename", arg: 2, scope: !2098, file: !1959, line: 523, type: !377)
!2104 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2098, file: !1959, line: 523, type: !2056)
!2105 = !DILocalVariable(name: "__flag", arg: 4, scope: !2098, file: !1959, line: 523, type: !372)
!2106 = !DILocation(line: 0, scope: !2098)
!2107 = !DILocation(line: 526, column: 10, scope: !2098)
!2108 = !DILocation(line: 526, column: 3, scope: !2098)
!2109 = distinct !DISubprogram(name: "gimple_alloc_stat", scope: !3, file: !3, line: 131, type: !2110, scopeLine: 132, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2112)
!2110 = !DISubroutineType(types: !2111)
!2111 = !{!379, !276, !7}
!2112 = !{!2113, !2114, !2115, !2116}
!2113 = !DILocalVariable(name: "code", arg: 1, scope: !2109, file: !3, line: 131, type: !276)
!2114 = !DILocalVariable(name: "num_ops", arg: 2, scope: !2109, file: !3, line: 131, type: !7)
!2115 = !DILocalVariable(name: "size", scope: !2109, file: !3, line: 133, type: !760)
!2116 = !DILocalVariable(name: "stmt", scope: !2109, file: !3, line: 134, type: !379)
!2117 = !DILocation(line: 0, scope: !2109)
!2118 = !DILocation(line: 136, column: 10, scope: !2109)
!2119 = !DILocation(line: 137, column: 15, scope: !2120)
!2120 = distinct !DILexicalBlock(scope: !2109, file: !3, line: 137, column: 7)
!2121 = !DILocation(line: 137, column: 7, scope: !2109)
!2122 = !DILocation(line: 138, column: 38, scope: !2120)
!2123 = !DILocation(line: 138, column: 29, scope: !2120)
!2124 = !DILocation(line: 138, column: 27, scope: !2120)
!2125 = !DILocation(line: 138, column: 10, scope: !2120)
!2126 = !DILocation(line: 138, column: 5, scope: !2120)
!2127 = !DILocation(line: 148, column: 19, scope: !2109)
!2128 = !DILocation(line: 148, column: 10, scope: !2109)
!2129 = !DILocation(line: 149, column: 3, scope: !2109)
!2130 = !DILocation(line: 150, column: 3, scope: !2109)
!2131 = !DILocation(line: 154, column: 16, scope: !2109)
!2132 = !DILocation(line: 154, column: 25, scope: !2109)
!2133 = !DILocation(line: 156, column: 3, scope: !2109)
!2134 = distinct !DISubprogram(name: "gimple_size", scope: !3, file: !3, line: 122, type: !2135, scopeLine: 123, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2137)
!2135 = !DISubroutineType(types: !2136)
!2136 = !{!760, !276}
!2137 = !{!2138}
!2138 = !DILocalVariable(name: "code", arg: 1, scope: !2134, file: !3, line: 122, type: !276)
!2139 = !DILocation(line: 0, scope: !2134)
!2140 = !DILocation(line: 124, column: 29, scope: !2134)
!2141 = !DILocation(line: 124, column: 10, scope: !2134)
!2142 = !DILocation(line: 124, column: 3, scope: !2134)
!2143 = distinct !DISubprogram(name: "gimple_set_code", scope: !3, file: !3, line: 113, type: !2144, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2146)
!2144 = !DISubroutineType(types: !2145)
!2145 = !{null, !379, !276}
!2146 = !{!2147, !2148}
!2147 = !DILocalVariable(name: "g", arg: 1, scope: !2143, file: !3, line: 113, type: !379)
!2148 = !DILocalVariable(name: "code", arg: 2, scope: !2143, file: !3, line: 113, type: !276)
!2149 = !DILocation(line: 0, scope: !2143)
!2150 = !DILocation(line: 115, column: 13, scope: !2143)
!2151 = !DILocation(line: 115, column: 18, scope: !2143)
!2152 = !DILocation(line: 116, column: 1, scope: !2143)
!2153 = distinct !DISubprogram(name: "gimple_set_num_ops", scope: !6, file: !6, line: 1605, type: !2154, scopeLine: 1606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2156)
!2154 = !DISubroutineType(types: !2155)
!2155 = !{null, !379, !7}
!2156 = !{!2157, !2158}
!2157 = !DILocalVariable(name: "gs", arg: 1, scope: !2153, file: !6, line: 1605, type: !379)
!2158 = !DILocalVariable(name: "num_ops", arg: 2, scope: !2153, file: !6, line: 1605, type: !7)
!2159 = !DILocation(line: 0, scope: !2153)
!2160 = !DILocation(line: 1607, column: 14, scope: !2153)
!2161 = !DILocation(line: 1607, column: 22, scope: !2153)
!2162 = !DILocation(line: 1608, column: 1, scope: !2153)
!2163 = distinct !DISubprogram(name: "gimple_build_return", scope: !3, file: !3, line: 193, type: !2164, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2166)
!2164 = !DISubroutineType(types: !2165)
!2165 = !{!379, !450}
!2166 = !{!2167, !2168}
!2167 = !DILocalVariable(name: "retval", arg: 1, scope: !2163, file: !3, line: 193, type: !450)
!2168 = !DILocalVariable(name: "s", scope: !2163, file: !3, line: 195, type: !379)
!2169 = !DILocation(line: 0, scope: !2163)
!2170 = !DILocation(line: 195, column: 14, scope: !2163)
!2171 = !DILocation(line: 196, column: 7, scope: !2172)
!2172 = distinct !DILexicalBlock(scope: !2163, file: !3, line: 196, column: 7)
!2173 = !DILocation(line: 196, column: 7, scope: !2163)
!2174 = !DILocation(line: 197, column: 5, scope: !2172)
!2175 = !DILocation(line: 198, column: 3, scope: !2163)
!2176 = distinct !DISubprogram(name: "gimple_build_with_ops_stat", scope: !3, file: !3, line: 180, type: !2177, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2179)
!2177 = !DISubroutineType(types: !2178)
!2178 = !{!379, !276, !7, !7}
!2179 = !{!2180, !2181, !2182, !2183}
!2180 = !DILocalVariable(name: "code", arg: 1, scope: !2176, file: !3, line: 180, type: !276)
!2181 = !DILocalVariable(name: "subcode", arg: 2, scope: !2176, file: !3, line: 180, type: !7)
!2182 = !DILocalVariable(name: "num_ops", arg: 3, scope: !2176, file: !3, line: 181, type: !7)
!2183 = !DILocalVariable(name: "s", scope: !2176, file: !3, line: 183, type: !379)
!2184 = !DILocation(line: 0, scope: !2176)
!2185 = !DILocation(line: 183, column: 14, scope: !2176)
!2186 = !DILocation(line: 184, column: 3, scope: !2176)
!2187 = !DILocation(line: 186, column: 3, scope: !2176)
!2188 = distinct !DISubprogram(name: "gimple_return_set_retval", scope: !6, file: !6, line: 4263, type: !2189, scopeLine: 4264, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2191)
!2189 = !DISubroutineType(types: !2190)
!2190 = !{null, !379, !450}
!2191 = !{!2192, !2193}
!2192 = !DILocalVariable(name: "gs", arg: 1, scope: !2188, file: !6, line: 4263, type: !379)
!2193 = !DILocalVariable(name: "retval", arg: 2, scope: !2188, file: !6, line: 4263, type: !450)
!2194 = !DILocation(line: 0, scope: !2188)
!2195 = !DILocation(line: 4266, column: 3, scope: !2188)
!2196 = !DILocation(line: 4267, column: 1, scope: !2188)
!2197 = distinct !DISubprogram(name: "gimple_build_call_vec", scope: !3, file: !3, line: 220, type: !2198, scopeLine: 221, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2200)
!2198 = !DISubroutineType(types: !2199)
!2199 = !{!379, !450, !1558}
!2200 = !{!2201, !2202, !2203, !2204, !2205}
!2201 = !DILocalVariable(name: "fn", arg: 1, scope: !2197, file: !3, line: 220, type: !450)
!2202 = !DILocalVariable(name: "args", arg: 2, scope: !2197, file: !3, line: 220, type: !1558)
!2203 = !DILocalVariable(name: "i", scope: !2197, file: !3, line: 222, type: !7)
!2204 = !DILocalVariable(name: "nargs", scope: !2197, file: !3, line: 223, type: !7)
!2205 = !DILocalVariable(name: "call", scope: !2197, file: !3, line: 224, type: !379)
!2206 = !DILocation(line: 0, scope: !2197)
!2207 = !DILocation(line: 223, column: 20, scope: !2197)
!2208 = !DILocation(line: 224, column: 17, scope: !2197)
!2209 = !DILocation(line: 226, column: 8, scope: !2210)
!2210 = distinct !DILexicalBlock(scope: !2197, file: !3, line: 226, column: 3)
!2211 = !DILocation(line: 0, scope: !2210)
!2212 = !DILocation(line: 226, column: 17, scope: !2213)
!2213 = distinct !DILexicalBlock(scope: !2210, file: !3, line: 226, column: 3)
!2214 = !DILocation(line: 226, column: 3, scope: !2210)
!2215 = !DILocation(line: 227, column: 35, scope: !2213)
!2216 = !DILocation(line: 227, column: 5, scope: !2213)
!2217 = !DILocation(line: 226, column: 27, scope: !2213)
!2218 = !DILocation(line: 226, column: 3, scope: !2213)
!2219 = distinct !{!2219, !2214, !2220}
!2220 = !DILocation(line: 227, column: 60, scope: !2210)
!2221 = !DILocation(line: 229, column: 3, scope: !2197)
!2222 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !50, file: !50, line: 182, type: !2223, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2227)
!2223 = !DISubroutineType(types: !2224)
!2224 = !{!7, !2225}
!2225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2226, size: 64)
!2226 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !804)
!2227 = !{!2228}
!2228 = !DILocalVariable(name: "vec_", arg: 1, scope: !2222, file: !50, line: 182, type: !2225)
!2229 = !DILocation(line: 0, scope: !2222)
!2230 = !DILocation(line: 182, column: 1, scope: !2222)
!2231 = distinct !DISubprogram(name: "gimple_build_call_1", scope: !3, file: !3, line: 206, type: !2232, scopeLine: 207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2234)
!2232 = !DISubroutineType(types: !2233)
!2233 = !{!379, !450, !7}
!2234 = !{!2235, !2236, !2237}
!2235 = !DILocalVariable(name: "fn", arg: 1, scope: !2231, file: !3, line: 206, type: !450)
!2236 = !DILocalVariable(name: "nargs", arg: 2, scope: !2231, file: !3, line: 206, type: !7)
!2237 = !DILocalVariable(name: "s", scope: !2231, file: !3, line: 208, type: !379)
!2238 = !DILocation(line: 0, scope: !2231)
!2239 = !DILocation(line: 208, column: 14, scope: !2231)
!2240 = !DILocation(line: 209, column: 7, scope: !2241)
!2241 = distinct !DILexicalBlock(scope: !2231, file: !3, line: 209, column: 7)
!2242 = !DILocation(line: 209, column: 22, scope: !2241)
!2243 = !DILocation(line: 209, column: 7, scope: !2231)
!2244 = !DILocation(line: 210, column: 10, scope: !2241)
!2245 = !DILocation(line: 210, column: 5, scope: !2241)
!2246 = !DILocation(line: 211, column: 3, scope: !2231)
!2247 = !DILocation(line: 212, column: 3, scope: !2231)
!2248 = distinct !DISubprogram(name: "gimple_call_set_arg", scope: !6, file: !6, line: 2046, type: !2249, scopeLine: 2047, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2251)
!2249 = !DISubroutineType(types: !2250)
!2250 = !{null, !379, !7, !450}
!2251 = !{!2252, !2253, !2254}
!2252 = !DILocalVariable(name: "gs", arg: 1, scope: !2248, file: !6, line: 2046, type: !379)
!2253 = !DILocalVariable(name: "index", arg: 2, scope: !2248, file: !6, line: 2046, type: !7)
!2254 = !DILocalVariable(name: "arg", arg: 3, scope: !2248, file: !6, line: 2046, type: !450)
!2255 = !DILocation(line: 0, scope: !2248)
!2256 = !DILocation(line: 2049, column: 28, scope: !2248)
!2257 = !DILocation(line: 2049, column: 3, scope: !2248)
!2258 = !DILocation(line: 2050, column: 1, scope: !2248)
!2259 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !50, file: !50, line: 182, type: !2260, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2262)
!2260 = !DISubroutineType(types: !2261)
!2261 = !{!450, !2225, !7}
!2262 = !{!2263, !2264}
!2263 = !DILocalVariable(name: "vec_", arg: 1, scope: !2259, file: !50, line: 182, type: !2225)
!2264 = !DILocalVariable(name: "ix_", arg: 2, scope: !2259, file: !50, line: 182, type: !7)
!2265 = !DILocation(line: 0, scope: !2259)
!2266 = !DILocation(line: 182, column: 1, scope: !2259)
!2267 = distinct !DISubprogram(name: "gimple_build_call", scope: !3, file: !3, line: 237, type: !2268, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2270)
!2268 = !DISubroutineType(types: !2269)
!2269 = !{!379, !450, !7, null}
!2270 = !{!2271, !2272, !2273, !2280, !2281}
!2271 = !DILocalVariable(name: "fn", arg: 1, scope: !2267, file: !3, line: 237, type: !450)
!2272 = !DILocalVariable(name: "nargs", arg: 2, scope: !2267, file: !3, line: 237, type: !7)
!2273 = !DILocalVariable(name: "ap", scope: !2267, file: !3, line: 239, type: !2274)
!2274 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2275, line: 52, baseType: !2276)
!2275 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!2276 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2277, line: 32, baseType: !2278)
!2277 = !DIFile(filename: "/scratch/install/llvm-install-release/lib/clang/9.0.1/include/stdarg.h", directory: "")
!2278 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !3, line: 239, baseType: !2279)
!2279 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1667, size: 192, elements: !532)
!2280 = !DILocalVariable(name: "call", scope: !2267, file: !3, line: 240, type: !379)
!2281 = !DILocalVariable(name: "i", scope: !2267, file: !3, line: 241, type: !7)
!2282 = !DILocation(line: 0, scope: !2267)
!2283 = !DILocation(line: 239, column: 3, scope: !2267)
!2284 = !DILocation(line: 239, column: 11, scope: !2267)
!2285 = !DILocation(line: 243, column: 3, scope: !2267)
!2286 = !DILocation(line: 245, column: 10, scope: !2267)
!2287 = !DILocation(line: 247, column: 3, scope: !2267)
!2288 = !DILocation(line: 0, scope: !2289)
!2289 = distinct !DILexicalBlock(scope: !2290, file: !3, line: 248, column: 3)
!2290 = distinct !DILexicalBlock(scope: !2267, file: !3, line: 248, column: 3)
!2291 = !DILocation(line: 248, column: 8, scope: !2290)
!2292 = !DILocation(line: 0, scope: !2290)
!2293 = !DILocation(line: 248, column: 17, scope: !2289)
!2294 = !DILocation(line: 248, column: 3, scope: !2290)
!2295 = !DILocation(line: 249, column: 35, scope: !2289)
!2296 = !DILocation(line: 249, column: 5, scope: !2289)
!2297 = !DILocation(line: 248, column: 27, scope: !2289)
!2298 = !DILocation(line: 248, column: 3, scope: !2289)
!2299 = distinct !{!2299, !2294, !2300}
!2300 = !DILocation(line: 249, column: 52, scope: !2290)
!2301 = !DILocation(line: 250, column: 3, scope: !2267)
!2302 = !DILocation(line: 253, column: 1, scope: !2267)
!2303 = !DILocation(line: 252, column: 3, scope: !2267)
!2304 = distinct !DISubprogram(name: "is_gimple_call_addr", scope: !3, file: !3, line: 2825, type: !2305, scopeLine: 2826, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2307)
!2305 = !DISubroutineType(types: !2306)
!2306 = !{!371, !450}
!2307 = !{!2308}
!2308 = !DILocalVariable(name: "t", arg: 1, scope: !2304, file: !3, line: 2825, type: !450)
!2309 = !DILocation(line: 0, scope: !2304)
!2310 = !DILocation(line: 2827, column: 11, scope: !2304)
!2311 = !DILocation(line: 2827, column: 25, scope: !2304)
!2312 = !DILocation(line: 2827, column: 41, scope: !2304)
!2313 = !DILocation(line: 2827, column: 44, scope: !2304)
!2314 = !DILocation(line: 2827, column: 3, scope: !2304)
!2315 = distinct !DISubprogram(name: "gimple_build_call_from_tree", scope: !3, file: !3, line: 261, type: !2164, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2316)
!2316 = !{!2317, !2318, !2319, !2320, !2321}
!2317 = !DILocalVariable(name: "t", arg: 1, scope: !2315, file: !3, line: 261, type: !450)
!2318 = !DILocalVariable(name: "i", scope: !2315, file: !3, line: 263, type: !7)
!2319 = !DILocalVariable(name: "nargs", scope: !2315, file: !3, line: 263, type: !7)
!2320 = !DILocalVariable(name: "call", scope: !2315, file: !3, line: 264, type: !379)
!2321 = !DILocalVariable(name: "fndecl", scope: !2315, file: !3, line: 265, type: !450)
!2322 = !DILocation(line: 0, scope: !2315)
!2323 = !DILocation(line: 265, column: 17, scope: !2315)
!2324 = !DILocation(line: 267, column: 3, scope: !2315)
!2325 = !DILocation(line: 269, column: 11, scope: !2315)
!2326 = !DILocation(line: 270, column: 31, scope: !2315)
!2327 = !DILocation(line: 270, column: 49, scope: !2315)
!2328 = !DILocation(line: 270, column: 10, scope: !2315)
!2329 = !DILocation(line: 272, column: 8, scope: !2330)
!2330 = distinct !DILexicalBlock(scope: !2315, file: !3, line: 272, column: 3)
!2331 = !DILocation(line: 272, column: 17, scope: !2332)
!2332 = distinct !DILexicalBlock(scope: !2330, file: !3, line: 272, column: 3)
!2333 = !DILocation(line: 0, scope: !2330)
!2334 = !DILocation(line: 272, column: 3, scope: !2330)
!2335 = !DILocation(line: 273, column: 35, scope: !2332)
!2336 = !DILocation(line: 273, column: 5, scope: !2332)
!2337 = !DILocation(line: 272, column: 27, scope: !2332)
!2338 = !DILocation(line: 272, column: 3, scope: !2332)
!2339 = distinct !{!2339, !2334, !2340}
!2340 = !DILocation(line: 273, column: 55, scope: !2330)
!2341 = !DILocation(line: 275, column: 27, scope: !2315)
!2342 = !DILocation(line: 275, column: 3, scope: !2315)
!2343 = !DILocation(line: 278, column: 32, scope: !2315)
!2344 = !DILocation(line: 278, column: 3, scope: !2315)
!2345 = !DILocation(line: 279, column: 31, scope: !2315)
!2346 = !DILocation(line: 279, column: 3, scope: !2315)
!2347 = !DILocation(line: 280, column: 40, scope: !2315)
!2348 = !DILocation(line: 280, column: 3, scope: !2315)
!2349 = !DILocation(line: 281, column: 42, scope: !2315)
!2350 = !DILocation(line: 281, column: 3, scope: !2315)
!2351 = !DILocation(line: 282, column: 37, scope: !2315)
!2352 = !DILocation(line: 282, column: 3, scope: !2315)
!2353 = !DILocation(line: 283, column: 38, scope: !2315)
!2354 = !DILocation(line: 283, column: 3, scope: !2315)
!2355 = !DILocation(line: 284, column: 32, scope: !2315)
!2356 = !DILocation(line: 284, column: 3, scope: !2315)
!2357 = !DILocation(line: 286, column: 3, scope: !2315)
!2358 = distinct !DISubprogram(name: "gimple_set_block", scope: !6, file: !6, line: 1130, type: !2189, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2359)
!2359 = !{!2360, !2361}
!2360 = !DILocalVariable(name: "g", arg: 1, scope: !2358, file: !6, line: 1130, type: !379)
!2361 = !DILocalVariable(name: "block", arg: 2, scope: !2358, file: !6, line: 1130, type: !450)
!2362 = !DILocation(line: 0, scope: !2358)
!2363 = !DILocation(line: 1132, column: 13, scope: !2358)
!2364 = !DILocation(line: 1132, column: 19, scope: !2358)
!2365 = !DILocation(line: 1133, column: 1, scope: !2358)
!2366 = distinct !DISubprogram(name: "gimple_call_set_chain", scope: !6, file: !6, line: 2002, type: !2189, scopeLine: 2003, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2367)
!2367 = !{!2368, !2369}
!2368 = !DILocalVariable(name: "gs", arg: 1, scope: !2366, file: !6, line: 2002, type: !379)
!2369 = !DILocalVariable(name: "chain", arg: 2, scope: !2366, file: !6, line: 2002, type: !450)
!2370 = !DILocation(line: 0, scope: !2366)
!2371 = !DILocation(line: 2006, column: 3, scope: !2366)
!2372 = !DILocation(line: 2007, column: 1, scope: !2366)
!2373 = distinct !DISubprogram(name: "gimple_call_set_tail", scope: !6, file: !6, line: 2058, type: !2374, scopeLine: 2059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2376)
!2374 = !DISubroutineType(types: !2375)
!2375 = !{null, !379, !371}
!2376 = !{!2377, !2378}
!2377 = !DILocalVariable(name: "s", arg: 1, scope: !2373, file: !6, line: 2058, type: !379)
!2378 = !DILocalVariable(name: "tail_p", arg: 2, scope: !2373, file: !6, line: 2058, type: !371)
!2379 = !DILocation(line: 0, scope: !2373)
!2380 = !DILocation(line: 2061, column: 7, scope: !2381)
!2381 = distinct !DILexicalBlock(scope: !2373, file: !6, line: 2061, column: 7)
!2382 = !DILocation(line: 0, scope: !2381)
!2383 = !DILocation(line: 2061, column: 7, scope: !2373)
!2384 = !DILocation(line: 2062, column: 23, scope: !2381)
!2385 = !DILocation(line: 2062, column: 5, scope: !2381)
!2386 = !DILocation(line: 2064, column: 23, scope: !2381)
!2387 = !DILocation(line: 2065, column: 1, scope: !2373)
!2388 = distinct !DISubprogram(name: "gimple_call_set_cannot_inline", scope: !6, file: !6, line: 2081, type: !2374, scopeLine: 2082, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2389)
!2389 = !{!2390, !2391}
!2390 = !DILocalVariable(name: "s", arg: 1, scope: !2388, file: !6, line: 2081, type: !379)
!2391 = !DILocalVariable(name: "inlinable_p", arg: 2, scope: !2388, file: !6, line: 2081, type: !371)
!2392 = !DILocation(line: 0, scope: !2388)
!2393 = !DILocation(line: 2084, column: 7, scope: !2394)
!2394 = distinct !DILexicalBlock(scope: !2388, file: !6, line: 2084, column: 7)
!2395 = !DILocation(line: 0, scope: !2394)
!2396 = !DILocation(line: 2084, column: 7, scope: !2388)
!2397 = !DILocation(line: 2085, column: 23, scope: !2394)
!2398 = !DILocation(line: 2085, column: 5, scope: !2394)
!2399 = !DILocation(line: 2087, column: 23, scope: !2394)
!2400 = !DILocation(line: 2088, column: 1, scope: !2388)
!2401 = distinct !DISubprogram(name: "gimple_call_set_return_slot_opt", scope: !6, file: !6, line: 2106, type: !2374, scopeLine: 2107, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2402)
!2402 = !{!2403, !2404}
!2403 = !DILocalVariable(name: "s", arg: 1, scope: !2401, file: !6, line: 2106, type: !379)
!2404 = !DILocalVariable(name: "return_slot_opt_p", arg: 2, scope: !2401, file: !6, line: 2106, type: !371)
!2405 = !DILocation(line: 0, scope: !2401)
!2406 = !DILocation(line: 2109, column: 7, scope: !2407)
!2407 = distinct !DILexicalBlock(scope: !2401, file: !6, line: 2109, column: 7)
!2408 = !DILocation(line: 0, scope: !2407)
!2409 = !DILocation(line: 2109, column: 7, scope: !2401)
!2410 = !DILocation(line: 2110, column: 23, scope: !2407)
!2411 = !DILocation(line: 2110, column: 5, scope: !2407)
!2412 = !DILocation(line: 2112, column: 23, scope: !2407)
!2413 = !DILocation(line: 2113, column: 1, scope: !2401)
!2414 = distinct !DISubprogram(name: "gimple_call_set_from_thunk", scope: !6, file: !6, line: 2130, type: !2374, scopeLine: 2131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2415)
!2415 = !{!2416, !2417}
!2416 = !DILocalVariable(name: "s", arg: 1, scope: !2414, file: !6, line: 2130, type: !379)
!2417 = !DILocalVariable(name: "from_thunk_p", arg: 2, scope: !2414, file: !6, line: 2130, type: !371)
!2418 = !DILocation(line: 0, scope: !2414)
!2419 = !DILocation(line: 2133, column: 7, scope: !2420)
!2420 = distinct !DILexicalBlock(scope: !2414, file: !6, line: 2133, column: 7)
!2421 = !DILocation(line: 0, scope: !2420)
!2422 = !DILocation(line: 2133, column: 7, scope: !2414)
!2423 = !DILocation(line: 2134, column: 23, scope: !2420)
!2424 = !DILocation(line: 2134, column: 5, scope: !2420)
!2425 = !DILocation(line: 2136, column: 23, scope: !2420)
!2426 = !DILocation(line: 2137, column: 1, scope: !2414)
!2427 = distinct !DISubprogram(name: "gimple_call_set_va_arg_pack", scope: !6, file: !6, line: 2154, type: !2374, scopeLine: 2155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2428)
!2428 = !{!2429, !2430}
!2429 = !DILocalVariable(name: "s", arg: 1, scope: !2427, file: !6, line: 2154, type: !379)
!2430 = !DILocalVariable(name: "pass_arg_pack_p", arg: 2, scope: !2427, file: !6, line: 2154, type: !371)
!2431 = !DILocation(line: 0, scope: !2427)
!2432 = !DILocation(line: 2157, column: 7, scope: !2433)
!2433 = distinct !DILexicalBlock(scope: !2427, file: !6, line: 2157, column: 7)
!2434 = !DILocation(line: 0, scope: !2433)
!2435 = !DILocation(line: 2157, column: 7, scope: !2427)
!2436 = !DILocation(line: 2158, column: 23, scope: !2433)
!2437 = !DILocation(line: 2158, column: 5, scope: !2433)
!2438 = !DILocation(line: 2160, column: 23, scope: !2433)
!2439 = !DILocation(line: 2161, column: 1, scope: !2427)
!2440 = distinct !DISubprogram(name: "gimple_set_no_warning", scope: !6, file: !6, line: 1209, type: !2374, scopeLine: 1210, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2441)
!2441 = !{!2442, !2443}
!2442 = !DILocalVariable(name: "stmt", arg: 1, scope: !2440, file: !6, line: 1209, type: !379)
!2443 = !DILocalVariable(name: "no_warning", arg: 2, scope: !2440, file: !6, line: 1209, type: !371)
!2444 = !DILocation(line: 0, scope: !2440)
!2445 = !DILocation(line: 1211, column: 16, scope: !2440)
!2446 = !DILocation(line: 1211, column: 27, scope: !2440)
!2447 = !DILocation(line: 1212, column: 1, scope: !2440)
!2448 = distinct !DISubprogram(name: "extract_ops_from_tree", scope: !3, file: !3, line: 294, type: !2449, scopeLine: 296, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2452)
!2449 = !DISubroutineType(types: !2450)
!2450 = !{null, !450, !2451, !908, !908}
!2451 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!2452 = !{!2453, !2454, !2455, !2456, !2457}
!2453 = !DILocalVariable(name: "expr", arg: 1, scope: !2448, file: !3, line: 294, type: !450)
!2454 = !DILocalVariable(name: "subcode_p", arg: 2, scope: !2448, file: !3, line: 294, type: !2451)
!2455 = !DILocalVariable(name: "op1_p", arg: 3, scope: !2448, file: !3, line: 294, type: !908)
!2456 = !DILocalVariable(name: "op2_p", arg: 4, scope: !2448, file: !3, line: 295, type: !908)
!2457 = !DILocalVariable(name: "grhs_class", scope: !2448, file: !3, line: 297, type: !314)
!2458 = !DILocation(line: 0, scope: !2448)
!2459 = !DILocation(line: 299, column: 16, scope: !2448)
!2460 = !DILocation(line: 299, column: 14, scope: !2448)
!2461 = !DILocation(line: 300, column: 16, scope: !2448)
!2462 = !DILocation(line: 302, column: 7, scope: !2448)
!2463 = !DILocation(line: 304, column: 16, scope: !2464)
!2464 = distinct !DILexicalBlock(scope: !2465, file: !3, line: 303, column: 5)
!2465 = distinct !DILexicalBlock(scope: !2448, file: !3, line: 302, column: 7)
!2466 = !DILocation(line: 304, column: 14, scope: !2464)
!2467 = !DILocation(line: 305, column: 16, scope: !2464)
!2468 = !DILocation(line: 305, column: 14, scope: !2464)
!2469 = !DILocation(line: 306, column: 5, scope: !2464)
!2470 = !DILocation(line: 309, column: 16, scope: !2471)
!2471 = distinct !DILexicalBlock(scope: !2472, file: !3, line: 308, column: 5)
!2472 = distinct !DILexicalBlock(scope: !2465, file: !3, line: 307, column: 12)
!2473 = !DILocation(line: 309, column: 14, scope: !2471)
!2474 = !DILocation(line: 310, column: 14, scope: !2471)
!2475 = !DILocation(line: 311, column: 5, scope: !2471)
!2476 = !DILocation(line: 314, column: 14, scope: !2477)
!2477 = distinct !DILexicalBlock(scope: !2478, file: !3, line: 313, column: 5)
!2478 = distinct !DILexicalBlock(scope: !2472, file: !3, line: 312, column: 12)
!2479 = !DILocation(line: 315, column: 14, scope: !2477)
!2480 = !DILocation(line: 316, column: 5, scope: !2477)
!2481 = !DILocation(line: 318, column: 5, scope: !2478)
!2482 = !DILocation(line: 319, column: 1, scope: !2448)
!2483 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !6, file: !6, line: 1686, type: !2484, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2486)
!2484 = !DISubroutineType(types: !2485)
!2485 = !{!314, !82}
!2486 = !{!2487}
!2487 = !DILocalVariable(name: "code", arg: 1, scope: !2483, file: !6, line: 1686, type: !82)
!2488 = !DILocation(line: 0, scope: !2483)
!2489 = !DILocation(line: 1688, column: 34, scope: !2483)
!2490 = !DILocation(line: 1688, column: 10, scope: !2483)
!2491 = !DILocation(line: 1688, column: 3, scope: !2483)
!2492 = distinct !DISubprogram(name: "gimple_build_assign_stat", scope: !3, file: !3, line: 328, type: !2493, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2495)
!2493 = !DISubroutineType(types: !2494)
!2494 = !{!379, !450, !450}
!2495 = !{!2496, !2497, !2498, !2499, !2500}
!2496 = !DILocalVariable(name: "lhs", arg: 1, scope: !2492, file: !3, line: 328, type: !450)
!2497 = !DILocalVariable(name: "rhs", arg: 2, scope: !2492, file: !3, line: 328, type: !450)
!2498 = !DILocalVariable(name: "subcode", scope: !2492, file: !3, line: 330, type: !82)
!2499 = !DILocalVariable(name: "op1", scope: !2492, file: !3, line: 331, type: !450)
!2500 = !DILocalVariable(name: "op2", scope: !2492, file: !3, line: 331, type: !450)
!2501 = !DILocation(line: 0, scope: !2492)
!2502 = !DILocation(line: 330, column: 3, scope: !2492)
!2503 = !DILocation(line: 331, column: 3, scope: !2492)
!2504 = !DILocation(line: 333, column: 3, scope: !2492)
!2505 = !DILocation(line: 334, column: 45, scope: !2492)
!2506 = !DILocation(line: 334, column: 59, scope: !2492)
!2507 = !DILocation(line: 334, column: 64, scope: !2492)
!2508 = !DILocation(line: 334, column: 10, scope: !2492)
!2509 = !DILocation(line: 336, column: 1, scope: !2492)
!2510 = !DILocation(line: 334, column: 3, scope: !2492)
!2511 = distinct !DISubprogram(name: "gimple_build_assign_with_ops_stat", scope: !3, file: !3, line: 344, type: !2512, scopeLine: 346, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2514)
!2512 = !DISubroutineType(types: !2513)
!2513 = !{!379, !82, !450, !450, !450}
!2514 = !{!2515, !2516, !2517, !2518, !2519, !2520}
!2515 = !DILocalVariable(name: "subcode", arg: 1, scope: !2511, file: !3, line: 344, type: !82)
!2516 = !DILocalVariable(name: "lhs", arg: 2, scope: !2511, file: !3, line: 344, type: !450)
!2517 = !DILocalVariable(name: "op1", arg: 3, scope: !2511, file: !3, line: 344, type: !450)
!2518 = !DILocalVariable(name: "op2", arg: 4, scope: !2511, file: !3, line: 345, type: !450)
!2519 = !DILocalVariable(name: "num_ops", scope: !2511, file: !3, line: 347, type: !7)
!2520 = !DILocalVariable(name: "p", scope: !2511, file: !3, line: 348, type: !379)
!2521 = !DILocation(line: 0, scope: !2511)
!2522 = !DILocation(line: 352, column: 13, scope: !2511)
!2523 = !DILocation(line: 352, column: 46, scope: !2511)
!2524 = !DILocation(line: 354, column: 7, scope: !2511)
!2525 = !DILocation(line: 356, column: 3, scope: !2511)
!2526 = !DILocation(line: 357, column: 3, scope: !2511)
!2527 = !DILocation(line: 358, column: 7, scope: !2528)
!2528 = distinct !DILexicalBlock(scope: !2511, file: !3, line: 358, column: 7)
!2529 = !DILocation(line: 358, column: 7, scope: !2511)
!2530 = !DILocation(line: 360, column: 7, scope: !2531)
!2531 = distinct !DILexicalBlock(scope: !2528, file: !3, line: 359, column: 5)
!2532 = !DILocation(line: 361, column: 7, scope: !2531)
!2533 = !DILocation(line: 362, column: 5, scope: !2531)
!2534 = !DILocation(line: 364, column: 3, scope: !2511)
!2535 = distinct !DISubprogram(name: "get_gimple_rhs_num_ops", scope: !3, file: !3, line: 2369, type: !2536, scopeLine: 2370, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2538)
!2536 = !DISubroutineType(types: !2537)
!2537 = !{!7, !82}
!2538 = !{!2539, !2540}
!2539 = !DILocalVariable(name: "code", arg: 1, scope: !2535, file: !3, line: 2369, type: !82)
!2540 = !DILocalVariable(name: "rhs_class", scope: !2535, file: !3, line: 2371, type: !314)
!2541 = !DILocation(line: 0, scope: !2535)
!2542 = !DILocation(line: 2371, column: 37, scope: !2535)
!2543 = !DILocation(line: 2373, column: 37, scope: !2544)
!2544 = distinct !DILexicalBlock(scope: !2535, file: !3, line: 2373, column: 7)
!2545 = !DILocation(line: 2376, column: 5, scope: !2546)
!2546 = distinct !DILexicalBlock(scope: !2544, file: !3, line: 2375, column: 12)
!2547 = !DILocation(line: 2378, column: 5, scope: !2546)
!2548 = !DILocation(line: 2380, column: 5, scope: !2535)
!2549 = !DILocation(line: 2382, column: 1, scope: !2535)
!2550 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !6, file: !6, line: 1714, type: !2189, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2551)
!2551 = !{!2552, !2553}
!2552 = !DILocalVariable(name: "gs", arg: 1, scope: !2550, file: !6, line: 1714, type: !379)
!2553 = !DILocalVariable(name: "lhs", arg: 2, scope: !2550, file: !6, line: 1714, type: !450)
!2554 = !DILocation(line: 0, scope: !2550)
!2555 = !DILocation(line: 1717, column: 3, scope: !2550)
!2556 = !DILocation(line: 1719, column: 7, scope: !2557)
!2557 = distinct !DILexicalBlock(scope: !2550, file: !6, line: 1719, column: 7)
!2558 = !DILocation(line: 1719, column: 11, scope: !2557)
!2559 = !DILocation(line: 1719, column: 14, scope: !2557)
!2560 = !DILocation(line: 1719, column: 30, scope: !2557)
!2561 = !DILocation(line: 1719, column: 7, scope: !2550)
!2562 = !DILocation(line: 1720, column: 5, scope: !2557)
!2563 = !DILocation(line: 1720, column: 29, scope: !2557)
!2564 = !DILocation(line: 1721, column: 1, scope: !2550)
!2565 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !6, file: !6, line: 1747, type: !2189, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2566)
!2566 = !{!2567, !2568}
!2567 = !DILocalVariable(name: "gs", arg: 1, scope: !2565, file: !6, line: 1747, type: !379)
!2568 = !DILocalVariable(name: "rhs", arg: 2, scope: !2565, file: !6, line: 1747, type: !450)
!2569 = !DILocation(line: 0, scope: !2565)
!2570 = !DILocation(line: 1751, column: 3, scope: !2565)
!2571 = !DILocation(line: 1752, column: 1, scope: !2565)
!2572 = distinct !DISubprogram(name: "gimple_assign_set_rhs2", scope: !6, file: !6, line: 1784, type: !2189, scopeLine: 1785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2573)
!2573 = !{!2574, !2575}
!2574 = !DILocalVariable(name: "gs", arg: 1, scope: !2572, file: !6, line: 1784, type: !379)
!2575 = !DILocalVariable(name: "rhs", arg: 2, scope: !2572, file: !6, line: 1784, type: !450)
!2576 = !DILocation(line: 0, scope: !2572)
!2577 = !DILocation(line: 1788, column: 3, scope: !2572)
!2578 = !DILocation(line: 1789, column: 1, scope: !2572)
!2579 = distinct !DISubprogram(name: "gimplify_assign", scope: !3, file: !3, line: 377, type: !2580, scopeLine: 378, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2583)
!2580 = !DISubroutineType(types: !2581)
!2581 = !{!379, !450, !450, !2582}
!2582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !430, size: 64)
!2583 = !{!2584, !2585, !2586, !2587}
!2584 = !DILocalVariable(name: "dst", arg: 1, scope: !2579, file: !3, line: 377, type: !450)
!2585 = !DILocalVariable(name: "src", arg: 2, scope: !2579, file: !3, line: 377, type: !450)
!2586 = !DILocalVariable(name: "seq_p", arg: 3, scope: !2579, file: !3, line: 377, type: !2582)
!2587 = !DILocalVariable(name: "t", scope: !2579, file: !3, line: 379, type: !450)
!2588 = !DILocation(line: 0, scope: !2579)
!2589 = !DILocation(line: 379, column: 12, scope: !2579)
!2590 = !DILocation(line: 380, column: 3, scope: !2579)
!2591 = !DILocation(line: 381, column: 13, scope: !2579)
!2592 = !DILocation(line: 381, column: 3, scope: !2579)
!2593 = !DILocation(line: 382, column: 32, scope: !2579)
!2594 = !DILocation(line: 382, column: 10, scope: !2579)
!2595 = !DILocation(line: 382, column: 3, scope: !2579)
!2596 = distinct !DISubprogram(name: "gimple_seq_last_stmt", scope: !6, file: !6, line: 187, type: !2597, scopeLine: 188, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2602)
!2597 = !DISubroutineType(types: !2598)
!2598 = !{!379, !2599}
!2599 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !380, line: 67, baseType: !2600)
!2600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2601, size: 64)
!2601 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !432)
!2602 = !{!2603, !2604}
!2603 = !DILocalVariable(name: "s", arg: 1, scope: !2596, file: !6, line: 187, type: !2599)
!2604 = !DILocalVariable(name: "n", scope: !2596, file: !6, line: 189, type: !435)
!2605 = !DILocation(line: 0, scope: !2596)
!2606 = !DILocation(line: 189, column: 23, scope: !2596)
!2607 = !DILocation(line: 190, column: 10, scope: !2596)
!2608 = !DILocation(line: 190, column: 19, scope: !2596)
!2609 = !DILocation(line: 190, column: 3, scope: !2596)
!2610 = distinct !DISubprogram(name: "gimple_build_cond", scope: !3, file: !3, line: 393, type: !2611, scopeLine: 395, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2613)
!2611 = !DISubroutineType(types: !2612)
!2612 = !{!379, !82, !450, !450, !450, !450}
!2613 = !{!2614, !2615, !2616, !2617, !2618, !2619}
!2614 = !DILocalVariable(name: "pred_code", arg: 1, scope: !2610, file: !3, line: 393, type: !82)
!2615 = !DILocalVariable(name: "lhs", arg: 2, scope: !2610, file: !3, line: 393, type: !450)
!2616 = !DILocalVariable(name: "rhs", arg: 3, scope: !2610, file: !3, line: 393, type: !450)
!2617 = !DILocalVariable(name: "t_label", arg: 4, scope: !2610, file: !3, line: 394, type: !450)
!2618 = !DILocalVariable(name: "f_label", arg: 5, scope: !2610, file: !3, line: 394, type: !450)
!2619 = !DILocalVariable(name: "p", scope: !2610, file: !3, line: 396, type: !379)
!2620 = !DILocation(line: 0, scope: !2610)
!2621 = !DILocation(line: 398, column: 3, scope: !2610)
!2622 = !DILocation(line: 399, column: 7, scope: !2610)
!2623 = !DILocation(line: 400, column: 3, scope: !2610)
!2624 = !DILocation(line: 401, column: 3, scope: !2610)
!2625 = !DILocation(line: 402, column: 3, scope: !2610)
!2626 = !DILocation(line: 403, column: 3, scope: !2610)
!2627 = !DILocation(line: 404, column: 3, scope: !2610)
!2628 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !6, file: !6, line: 2261, type: !2189, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2629)
!2629 = !{!2630, !2631}
!2630 = !DILocalVariable(name: "gs", arg: 1, scope: !2628, file: !6, line: 2261, type: !379)
!2631 = !DILocalVariable(name: "lhs", arg: 2, scope: !2628, file: !6, line: 2261, type: !450)
!2632 = !DILocation(line: 0, scope: !2628)
!2633 = !DILocation(line: 2264, column: 3, scope: !2628)
!2634 = !DILocation(line: 2265, column: 1, scope: !2628)
!2635 = distinct !DISubprogram(name: "gimple_cond_set_rhs", scope: !6, file: !6, line: 2292, type: !2189, scopeLine: 2293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2636)
!2636 = !{!2637, !2638}
!2637 = !DILocalVariable(name: "gs", arg: 1, scope: !2635, file: !6, line: 2292, type: !379)
!2638 = !DILocalVariable(name: "rhs", arg: 2, scope: !2635, file: !6, line: 2292, type: !450)
!2639 = !DILocation(line: 0, scope: !2635)
!2640 = !DILocation(line: 2295, column: 3, scope: !2635)
!2641 = !DILocation(line: 2296, column: 1, scope: !2635)
!2642 = distinct !DISubprogram(name: "gimple_cond_set_true_label", scope: !6, file: !6, line: 2314, type: !2189, scopeLine: 2315, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2643)
!2643 = !{!2644, !2645}
!2644 = !DILocalVariable(name: "gs", arg: 1, scope: !2642, file: !6, line: 2314, type: !379)
!2645 = !DILocalVariable(name: "label", arg: 2, scope: !2642, file: !6, line: 2314, type: !450)
!2646 = !DILocation(line: 0, scope: !2642)
!2647 = !DILocation(line: 2317, column: 3, scope: !2642)
!2648 = !DILocation(line: 2318, column: 1, scope: !2642)
!2649 = distinct !DISubprogram(name: "gimple_cond_set_false_label", scope: !6, file: !6, line: 2325, type: !2189, scopeLine: 2326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2650)
!2650 = !{!2651, !2652}
!2651 = !DILocalVariable(name: "gs", arg: 1, scope: !2649, file: !6, line: 2325, type: !379)
!2652 = !DILocalVariable(name: "label", arg: 2, scope: !2649, file: !6, line: 2325, type: !450)
!2653 = !DILocation(line: 0, scope: !2649)
!2654 = !DILocation(line: 2328, column: 3, scope: !2649)
!2655 = !DILocation(line: 2329, column: 1, scope: !2649)
!2656 = distinct !DISubprogram(name: "gimple_cond_get_ops_from_tree", scope: !3, file: !3, line: 411, type: !2449, scopeLine: 413, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2657)
!2657 = !{!2658, !2659, !2660, !2661, !2662}
!2658 = !DILocalVariable(name: "cond", arg: 1, scope: !2656, file: !3, line: 411, type: !450)
!2659 = !DILocalVariable(name: "code_p", arg: 2, scope: !2656, file: !3, line: 411, type: !2451)
!2660 = !DILocalVariable(name: "lhs_p", arg: 3, scope: !2656, file: !3, line: 412, type: !908)
!2661 = !DILocalVariable(name: "rhs_p", arg: 4, scope: !2656, file: !3, line: 412, type: !908)
!2662 = !DILocalVariable(name: "loc", scope: !2656, file: !3, line: 414, type: !398)
!2663 = !DILocation(line: 0, scope: !2656)
!2664 = !DILocation(line: 414, column: 20, scope: !2656)
!2665 = !DILocation(line: 415, column: 3, scope: !2656)
!2666 = !DILocation(line: 420, column: 3, scope: !2656)
!2667 = !DILocation(line: 423, column: 7, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2656, file: !3, line: 423, column: 7)
!2669 = !DILocation(line: 423, column: 15, scope: !2668)
!2670 = !DILocation(line: 423, column: 7, scope: !2656)
!2671 = !DILocation(line: 425, column: 15, scope: !2672)
!2672 = distinct !DILexicalBlock(scope: !2668, file: !3, line: 424, column: 5)
!2673 = !DILocation(line: 426, column: 7, scope: !2672)
!2674 = !DILocation(line: 0, scope: !2672)
!2675 = !DILocation(line: 427, column: 39, scope: !2672)
!2676 = !DILocation(line: 427, column: 59, scope: !2672)
!2677 = !DILocation(line: 427, column: 16, scope: !2672)
!2678 = !DILocation(line: 427, column: 14, scope: !2672)
!2679 = !DILocation(line: 428, column: 5, scope: !2672)
!2680 = !DILocation(line: 430, column: 12, scope: !2681)
!2681 = distinct !DILexicalBlock(scope: !2668, file: !3, line: 430, column: 12)
!2682 = !DILocation(line: 430, column: 38, scope: !2681)
!2683 = !DILocation(line: 430, column: 12, scope: !2668)
!2684 = !DILocation(line: 432, column: 15, scope: !2685)
!2685 = distinct !DILexicalBlock(scope: !2681, file: !3, line: 431, column: 5)
!2686 = !DILocation(line: 433, column: 7, scope: !2685)
!2687 = !DILocation(line: 0, scope: !2685)
!2688 = !DILocation(line: 434, column: 39, scope: !2685)
!2689 = !DILocation(line: 434, column: 59, scope: !2685)
!2690 = !DILocation(line: 434, column: 16, scope: !2685)
!2691 = !DILocation(line: 434, column: 14, scope: !2685)
!2692 = !DILocation(line: 435, column: 5, scope: !2685)
!2693 = !DILocation(line: 436, column: 1, scope: !2656)
!2694 = distinct !DISubprogram(name: "is_gimple_min_invariant", scope: !3, file: !3, line: 2616, type: !2695, scopeLine: 2617, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2697)
!2695 = !DISubroutineType(types: !2696)
!2696 = !{!371, !1563}
!2697 = !{!2698}
!2698 = !DILocalVariable(name: "t", arg: 1, scope: !2694, file: !3, line: 2616, type: !1563)
!2699 = !DILocation(line: 0, scope: !2694)
!2700 = !DILocation(line: 2618, column: 7, scope: !2701)
!2701 = distinct !DILexicalBlock(scope: !2694, file: !3, line: 2618, column: 7)
!2702 = !DILocation(line: 2618, column: 21, scope: !2701)
!2703 = !DILocation(line: 2618, column: 7, scope: !2694)
!2704 = !DILocation(line: 2619, column: 12, scope: !2701)
!2705 = !DILocation(line: 2619, column: 5, scope: !2701)
!2706 = !DILocation(line: 2621, column: 10, scope: !2694)
!2707 = !DILocation(line: 2621, column: 3, scope: !2694)
!2708 = !DILocation(line: 2622, column: 1, scope: !2694)
!2709 = distinct !DISubprogram(name: "gimple_build_cond_from_tree", scope: !3, file: !3, line: 443, type: !2710, scopeLine: 444, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2712)
!2710 = !DISubroutineType(types: !2711)
!2711 = !{!379, !450, !450, !450}
!2712 = !{!2713, !2714, !2715, !2716, !2717, !2718}
!2713 = !DILocalVariable(name: "cond", arg: 1, scope: !2709, file: !3, line: 443, type: !450)
!2714 = !DILocalVariable(name: "t_label", arg: 2, scope: !2709, file: !3, line: 443, type: !450)
!2715 = !DILocalVariable(name: "f_label", arg: 3, scope: !2709, file: !3, line: 443, type: !450)
!2716 = !DILocalVariable(name: "code", scope: !2709, file: !3, line: 445, type: !82)
!2717 = !DILocalVariable(name: "lhs", scope: !2709, file: !3, line: 446, type: !450)
!2718 = !DILocalVariable(name: "rhs", scope: !2709, file: !3, line: 446, type: !450)
!2719 = !DILocation(line: 0, scope: !2709)
!2720 = !DILocation(line: 445, column: 3, scope: !2709)
!2721 = !DILocation(line: 446, column: 3, scope: !2709)
!2722 = !DILocation(line: 448, column: 3, scope: !2709)
!2723 = !DILocation(line: 449, column: 29, scope: !2709)
!2724 = !DILocation(line: 449, column: 35, scope: !2709)
!2725 = !DILocation(line: 449, column: 40, scope: !2709)
!2726 = !DILocation(line: 449, column: 10, scope: !2709)
!2727 = !DILocation(line: 450, column: 1, scope: !2709)
!2728 = !DILocation(line: 449, column: 3, scope: !2709)
!2729 = distinct !DISubprogram(name: "gimple_cond_set_condition_from_tree", scope: !3, file: !3, line: 456, type: !2189, scopeLine: 457, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2730)
!2730 = !{!2731, !2732, !2733, !2734, !2735}
!2731 = !DILocalVariable(name: "stmt", arg: 1, scope: !2729, file: !3, line: 456, type: !379)
!2732 = !DILocalVariable(name: "cond", arg: 2, scope: !2729, file: !3, line: 456, type: !450)
!2733 = !DILocalVariable(name: "code", scope: !2729, file: !3, line: 458, type: !82)
!2734 = !DILocalVariable(name: "lhs", scope: !2729, file: !3, line: 459, type: !450)
!2735 = !DILocalVariable(name: "rhs", scope: !2729, file: !3, line: 459, type: !450)
!2736 = !DILocation(line: 0, scope: !2729)
!2737 = !DILocation(line: 458, column: 3, scope: !2729)
!2738 = !DILocation(line: 459, column: 3, scope: !2729)
!2739 = !DILocation(line: 461, column: 3, scope: !2729)
!2740 = !DILocation(line: 462, column: 36, scope: !2729)
!2741 = !DILocation(line: 462, column: 42, scope: !2729)
!2742 = !DILocation(line: 462, column: 47, scope: !2729)
!2743 = !DILocation(line: 462, column: 3, scope: !2729)
!2744 = !DILocation(line: 463, column: 1, scope: !2729)
!2745 = distinct !DISubprogram(name: "gimple_cond_set_condition", scope: !6, file: !6, line: 2434, type: !2746, scopeLine: 2435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2748)
!2746 = !DISubroutineType(types: !2747)
!2747 = !{null, !379, !82, !450, !450}
!2748 = !{!2749, !2750, !2751, !2752}
!2749 = !DILocalVariable(name: "stmt", arg: 1, scope: !2745, file: !6, line: 2434, type: !379)
!2750 = !DILocalVariable(name: "code", arg: 2, scope: !2745, file: !6, line: 2434, type: !82)
!2751 = !DILocalVariable(name: "lhs", arg: 3, scope: !2745, file: !6, line: 2434, type: !450)
!2752 = !DILocalVariable(name: "rhs", arg: 4, scope: !2745, file: !6, line: 2434, type: !450)
!2753 = !DILocation(line: 0, scope: !2745)
!2754 = !DILocation(line: 2436, column: 3, scope: !2745)
!2755 = !DILocation(line: 2437, column: 3, scope: !2745)
!2756 = !DILocation(line: 2438, column: 3, scope: !2745)
!2757 = !DILocation(line: 2439, column: 1, scope: !2745)
!2758 = distinct !DISubprogram(name: "gimple_build_label", scope: !3, file: !3, line: 468, type: !2164, scopeLine: 469, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2759)
!2759 = !{!2760, !2761}
!2760 = !DILocalVariable(name: "label", arg: 1, scope: !2758, file: !3, line: 468, type: !450)
!2761 = !DILocalVariable(name: "p", scope: !2758, file: !3, line: 470, type: !379)
!2762 = !DILocation(line: 0, scope: !2758)
!2763 = !DILocation(line: 470, column: 14, scope: !2758)
!2764 = !DILocation(line: 471, column: 3, scope: !2758)
!2765 = !DILocation(line: 472, column: 3, scope: !2758)
!2766 = distinct !DISubprogram(name: "gimple_label_set_label", scope: !6, file: !6, line: 2455, type: !2189, scopeLine: 2456, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2767)
!2767 = !{!2768, !2769}
!2768 = !DILocalVariable(name: "gs", arg: 1, scope: !2766, file: !6, line: 2455, type: !379)
!2769 = !DILocalVariable(name: "label", arg: 2, scope: !2766, file: !6, line: 2455, type: !450)
!2770 = !DILocation(line: 0, scope: !2766)
!2771 = !DILocation(line: 2458, column: 3, scope: !2766)
!2772 = !DILocation(line: 2459, column: 1, scope: !2766)
!2773 = distinct !DISubprogram(name: "gimple_build_goto", scope: !3, file: !3, line: 478, type: !2164, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2774)
!2774 = !{!2775, !2776}
!2775 = !DILocalVariable(name: "dest", arg: 1, scope: !2773, file: !3, line: 478, type: !450)
!2776 = !DILocalVariable(name: "p", scope: !2773, file: !3, line: 480, type: !379)
!2777 = !DILocation(line: 0, scope: !2773)
!2778 = !DILocation(line: 480, column: 14, scope: !2773)
!2779 = !DILocation(line: 481, column: 3, scope: !2773)
!2780 = !DILocation(line: 482, column: 3, scope: !2773)
!2781 = distinct !DISubprogram(name: "gimple_goto_set_dest", scope: !6, file: !6, line: 2475, type: !2189, scopeLine: 2476, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2782)
!2782 = !{!2783, !2784}
!2783 = !DILocalVariable(name: "gs", arg: 1, scope: !2781, file: !6, line: 2475, type: !379)
!2784 = !DILocalVariable(name: "dest", arg: 2, scope: !2781, file: !6, line: 2475, type: !450)
!2785 = !DILocation(line: 0, scope: !2781)
!2786 = !DILocation(line: 2478, column: 3, scope: !2781)
!2787 = !DILocation(line: 2479, column: 1, scope: !2781)
!2788 = distinct !DISubprogram(name: "gimple_build_nop", scope: !3, file: !3, line: 489, type: !2789, scopeLine: 490, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1683)
!2789 = !DISubroutineType(types: !2790)
!2790 = !{!379}
!2791 = !DILocation(line: 491, column: 10, scope: !2788)
!2792 = !DILocation(line: 491, column: 3, scope: !2788)
!2793 = distinct !DISubprogram(name: "gimple_build_bind", scope: !3, file: !3, line: 500, type: !2794, scopeLine: 501, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2796)
!2794 = !DISubroutineType(types: !2795)
!2795 = !{!379, !450, !430, !450}
!2796 = !{!2797, !2798, !2799, !2800}
!2797 = !DILocalVariable(name: "vars", arg: 1, scope: !2793, file: !3, line: 500, type: !450)
!2798 = !DILocalVariable(name: "body", arg: 2, scope: !2793, file: !3, line: 500, type: !430)
!2799 = !DILocalVariable(name: "block", arg: 3, scope: !2793, file: !3, line: 500, type: !450)
!2800 = !DILocalVariable(name: "p", scope: !2793, file: !3, line: 502, type: !379)
!2801 = !DILocation(line: 0, scope: !2793)
!2802 = !DILocation(line: 502, column: 14, scope: !2793)
!2803 = !DILocation(line: 503, column: 3, scope: !2793)
!2804 = !DILocation(line: 504, column: 7, scope: !2805)
!2805 = distinct !DILexicalBlock(scope: !2793, file: !3, line: 504, column: 7)
!2806 = !DILocation(line: 504, column: 7, scope: !2793)
!2807 = !DILocation(line: 505, column: 5, scope: !2805)
!2808 = !DILocation(line: 506, column: 7, scope: !2809)
!2809 = distinct !DILexicalBlock(scope: !2793, file: !3, line: 506, column: 7)
!2810 = !DILocation(line: 506, column: 7, scope: !2793)
!2811 = !DILocation(line: 507, column: 5, scope: !2809)
!2812 = !DILocation(line: 508, column: 3, scope: !2793)
!2813 = distinct !DISubprogram(name: "gimple_bind_set_vars", scope: !6, file: !6, line: 2496, type: !2189, scopeLine: 2497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2814)
!2814 = !{!2815, !2816}
!2815 = !DILocalVariable(name: "gs", arg: 1, scope: !2813, file: !6, line: 2496, type: !379)
!2816 = !DILocalVariable(name: "vars", arg: 2, scope: !2813, file: !6, line: 2496, type: !450)
!2817 = !DILocation(line: 0, scope: !2813)
!2818 = !DILocation(line: 2499, column: 19, scope: !2813)
!2819 = !DILocation(line: 2499, column: 24, scope: !2813)
!2820 = !DILocation(line: 2500, column: 1, scope: !2813)
!2821 = distinct !DISubprogram(name: "gimple_bind_set_body", scope: !6, file: !6, line: 2528, type: !2822, scopeLine: 2529, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2824)
!2822 = !DISubroutineType(types: !2823)
!2823 = !{null, !379, !430}
!2824 = !{!2825, !2826}
!2825 = !DILocalVariable(name: "gs", arg: 1, scope: !2821, file: !6, line: 2528, type: !379)
!2826 = !DILocalVariable(name: "seq", arg: 2, scope: !2821, file: !6, line: 2528, type: !430)
!2827 = !DILocation(line: 0, scope: !2821)
!2828 = !DILocation(line: 2531, column: 19, scope: !2821)
!2829 = !DILocation(line: 2531, column: 24, scope: !2821)
!2830 = !DILocation(line: 2532, column: 1, scope: !2821)
!2831 = distinct !DISubprogram(name: "gimple_bind_set_block", scope: !6, file: !6, line: 2570, type: !2189, scopeLine: 2571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2832)
!2832 = !{!2833, !2834}
!2833 = !DILocalVariable(name: "gs", arg: 1, scope: !2831, file: !6, line: 2570, type: !379)
!2834 = !DILocalVariable(name: "block", arg: 2, scope: !2831, file: !6, line: 2570, type: !450)
!2835 = !DILocation(line: 0, scope: !2831)
!2836 = !DILocation(line: 2573, column: 3, scope: !2831)
!2837 = !DILocation(line: 2574, column: 19, scope: !2831)
!2838 = !DILocation(line: 2574, column: 25, scope: !2831)
!2839 = !DILocation(line: 2575, column: 1, scope: !2831)
!2840 = distinct !DISubprogram(name: "gimple_build_asm_vec", scope: !3, file: !3, line: 558, type: !2841, scopeLine: 561, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2843)
!2841 = !DISubroutineType(types: !2842)
!2842 = !{!379, !377, !799, !799, !799, !799}
!2843 = !{!2844, !2845, !2846, !2847, !2848, !2849, !2850}
!2844 = !DILocalVariable(name: "string", arg: 1, scope: !2840, file: !3, line: 558, type: !377)
!2845 = !DILocalVariable(name: "inputs", arg: 2, scope: !2840, file: !3, line: 558, type: !799)
!2846 = !DILocalVariable(name: "outputs", arg: 3, scope: !2840, file: !3, line: 559, type: !799)
!2847 = !DILocalVariable(name: "clobbers", arg: 4, scope: !2840, file: !3, line: 559, type: !799)
!2848 = !DILocalVariable(name: "labels", arg: 5, scope: !2840, file: !3, line: 560, type: !799)
!2849 = !DILocalVariable(name: "p", scope: !2840, file: !3, line: 562, type: !379)
!2850 = !DILocalVariable(name: "i", scope: !2840, file: !3, line: 563, type: !7)
!2851 = !DILocation(line: 0, scope: !2840)
!2852 = !DILocation(line: 566, column: 27, scope: !2840)
!2853 = !DILocation(line: 567, column: 27, scope: !2840)
!2854 = !DILocation(line: 568, column: 27, scope: !2840)
!2855 = !DILocation(line: 569, column: 6, scope: !2840)
!2856 = !DILocation(line: 565, column: 7, scope: !2840)
!2857 = !DILocation(line: 571, column: 8, scope: !2858)
!2858 = distinct !DILexicalBlock(scope: !2840, file: !3, line: 571, column: 3)
!2859 = !DILocation(line: 0, scope: !2858)
!2860 = !DILocation(line: 571, column: 19, scope: !2861)
!2861 = distinct !DILexicalBlock(scope: !2858, file: !3, line: 571, column: 3)
!2862 = !DILocation(line: 571, column: 17, scope: !2861)
!2863 = !DILocation(line: 571, column: 3, scope: !2858)
!2864 = !DILocation(line: 574, column: 3, scope: !2865)
!2865 = distinct !DILexicalBlock(scope: !2840, file: !3, line: 574, column: 3)
!2866 = !DILocation(line: 572, column: 36, scope: !2861)
!2867 = !DILocation(line: 572, column: 5, scope: !2861)
!2868 = !DILocation(line: 571, column: 47, scope: !2861)
!2869 = !DILocation(line: 571, column: 3, scope: !2861)
!2870 = distinct !{!2870, !2863, !2871}
!2871 = !DILocation(line: 572, column: 63, scope: !2858)
!2872 = !DILocation(line: 0, scope: !2865)
!2873 = !DILocation(line: 574, column: 19, scope: !2874)
!2874 = distinct !DILexicalBlock(scope: !2865, file: !3, line: 574, column: 3)
!2875 = !DILocation(line: 574, column: 17, scope: !2874)
!2876 = !DILocation(line: 577, column: 3, scope: !2877)
!2877 = distinct !DILexicalBlock(scope: !2840, file: !3, line: 577, column: 3)
!2878 = !DILocation(line: 575, column: 37, scope: !2874)
!2879 = !DILocation(line: 575, column: 5, scope: !2874)
!2880 = !DILocation(line: 574, column: 48, scope: !2874)
!2881 = !DILocation(line: 574, column: 3, scope: !2874)
!2882 = distinct !{!2882, !2864, !2883}
!2883 = !DILocation(line: 575, column: 65, scope: !2865)
!2884 = !DILocation(line: 0, scope: !2877)
!2885 = !DILocation(line: 577, column: 19, scope: !2886)
!2886 = distinct !DILexicalBlock(scope: !2877, file: !3, line: 577, column: 3)
!2887 = !DILocation(line: 577, column: 17, scope: !2886)
!2888 = !DILocation(line: 580, column: 3, scope: !2889)
!2889 = distinct !DILexicalBlock(scope: !2840, file: !3, line: 580, column: 3)
!2890 = !DILocation(line: 578, column: 38, scope: !2886)
!2891 = !DILocation(line: 578, column: 5, scope: !2886)
!2892 = !DILocation(line: 577, column: 49, scope: !2886)
!2893 = !DILocation(line: 577, column: 3, scope: !2886)
!2894 = distinct !{!2894, !2876, !2895}
!2895 = !DILocation(line: 578, column: 67, scope: !2877)
!2896 = !DILocation(line: 0, scope: !2889)
!2897 = !DILocation(line: 580, column: 19, scope: !2898)
!2898 = distinct !DILexicalBlock(scope: !2889, file: !3, line: 580, column: 3)
!2899 = !DILocation(line: 580, column: 17, scope: !2898)
!2900 = !DILocation(line: 581, column: 36, scope: !2898)
!2901 = !DILocation(line: 581, column: 5, scope: !2898)
!2902 = !DILocation(line: 580, column: 47, scope: !2898)
!2903 = !DILocation(line: 580, column: 3, scope: !2898)
!2904 = distinct !{!2904, !2888, !2905}
!2905 = !DILocation(line: 581, column: 63, scope: !2889)
!2906 = !DILocation(line: 583, column: 3, scope: !2840)
!2907 = distinct !DISubprogram(name: "gimple_build_asm_1", scope: !3, file: !3, line: 520, type: !2908, scopeLine: 522, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2910)
!2908 = !DISubroutineType(types: !2909)
!2909 = !{!379, !377, !7, !7, !7, !7}
!2910 = !{!2911, !2912, !2913, !2914, !2915, !2916, !2917}
!2911 = !DILocalVariable(name: "string", arg: 1, scope: !2907, file: !3, line: 520, type: !377)
!2912 = !DILocalVariable(name: "ninputs", arg: 2, scope: !2907, file: !3, line: 520, type: !7)
!2913 = !DILocalVariable(name: "noutputs", arg: 3, scope: !2907, file: !3, line: 520, type: !7)
!2914 = !DILocalVariable(name: "nclobbers", arg: 4, scope: !2907, file: !3, line: 521, type: !7)
!2915 = !DILocalVariable(name: "nlabels", arg: 5, scope: !2907, file: !3, line: 521, type: !7)
!2916 = !DILocalVariable(name: "p", scope: !2907, file: !3, line: 523, type: !379)
!2917 = !DILocalVariable(name: "size", scope: !2907, file: !3, line: 524, type: !372)
!2918 = !DILocation(line: 0, scope: !2907)
!2919 = !DILocation(line: 524, column: 14, scope: !2907)
!2920 = !DILocation(line: 528, column: 3, scope: !2907)
!2921 = !DILocation(line: 530, column: 7, scope: !2907)
!2922 = !DILocation(line: 533, column: 22, scope: !2907)
!2923 = !DILocation(line: 533, column: 17, scope: !2907)
!2924 = !DILocation(line: 533, column: 20, scope: !2907)
!2925 = !DILocation(line: 534, column: 22, scope: !2907)
!2926 = !DILocation(line: 534, column: 6, scope: !2907)
!2927 = !DILocation(line: 534, column: 17, scope: !2907)
!2928 = !DILocation(line: 534, column: 20, scope: !2907)
!2929 = !DILocation(line: 535, column: 22, scope: !2907)
!2930 = !DILocation(line: 535, column: 17, scope: !2907)
!2931 = !DILocation(line: 535, column: 20, scope: !2907)
!2932 = !DILocation(line: 536, column: 22, scope: !2907)
!2933 = !DILocation(line: 536, column: 17, scope: !2907)
!2934 = !DILocation(line: 536, column: 20, scope: !2907)
!2935 = !DILocation(line: 537, column: 26, scope: !2907)
!2936 = !DILocation(line: 537, column: 17, scope: !2907)
!2937 = !DILocation(line: 537, column: 24, scope: !2907)
!2938 = !DILocation(line: 543, column: 3, scope: !2907)
!2939 = distinct !DISubprogram(name: "gimple_asm_set_input_op", scope: !6, file: !6, line: 2640, type: !2249, scopeLine: 2641, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2940)
!2940 = !{!2941, !2942, !2943}
!2941 = !DILocalVariable(name: "gs", arg: 1, scope: !2939, file: !6, line: 2640, type: !379)
!2942 = !DILocalVariable(name: "index", arg: 2, scope: !2939, file: !6, line: 2640, type: !7)
!2943 = !DILocalVariable(name: "in_op", arg: 3, scope: !2939, file: !6, line: 2640, type: !450)
!2944 = !DILocation(line: 0, scope: !2939)
!2945 = !DILocation(line: 2643, column: 3, scope: !2939)
!2946 = !DILocation(line: 2644, column: 3, scope: !2939)
!2947 = !DILocation(line: 2645, column: 3, scope: !2939)
!2948 = !DILocation(line: 2646, column: 1, scope: !2939)
!2949 = distinct !DISubprogram(name: "gimple_asm_set_output_op", scope: !6, file: !6, line: 2673, type: !2249, scopeLine: 2674, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2950)
!2950 = !{!2951, !2952, !2953}
!2951 = !DILocalVariable(name: "gs", arg: 1, scope: !2949, file: !6, line: 2673, type: !379)
!2952 = !DILocalVariable(name: "index", arg: 2, scope: !2949, file: !6, line: 2673, type: !7)
!2953 = !DILocalVariable(name: "out_op", arg: 3, scope: !2949, file: !6, line: 2673, type: !450)
!2954 = !DILocation(line: 0, scope: !2949)
!2955 = !DILocation(line: 2676, column: 3, scope: !2949)
!2956 = !DILocation(line: 2677, column: 3, scope: !2949)
!2957 = !DILocation(line: 2678, column: 45, scope: !2949)
!2958 = !DILocation(line: 2678, column: 30, scope: !2949)
!2959 = !DILocation(line: 2678, column: 28, scope: !2949)
!2960 = !DILocation(line: 2678, column: 3, scope: !2949)
!2961 = !DILocation(line: 2679, column: 1, scope: !2949)
!2962 = distinct !DISubprogram(name: "gimple_asm_set_clobber_op", scope: !6, file: !6, line: 2696, type: !2249, scopeLine: 2697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2963)
!2963 = !{!2964, !2965, !2966}
!2964 = !DILocalVariable(name: "gs", arg: 1, scope: !2962, file: !6, line: 2696, type: !379)
!2965 = !DILocalVariable(name: "index", arg: 2, scope: !2962, file: !6, line: 2696, type: !7)
!2966 = !DILocalVariable(name: "clobber_op", arg: 3, scope: !2962, file: !6, line: 2696, type: !450)
!2967 = !DILocation(line: 0, scope: !2962)
!2968 = !DILocation(line: 2699, column: 3, scope: !2962)
!2969 = !DILocation(line: 2700, column: 3, scope: !2962)
!2970 = !DILocation(line: 2701, column: 45, scope: !2962)
!2971 = !DILocation(line: 2701, column: 30, scope: !2962)
!2972 = !DILocation(line: 2701, column: 28, scope: !2962)
!2973 = !DILocation(line: 2701, column: 65, scope: !2962)
!2974 = !DILocation(line: 2701, column: 50, scope: !2962)
!2975 = !DILocation(line: 2701, column: 48, scope: !2962)
!2976 = !DILocation(line: 2701, column: 3, scope: !2962)
!2977 = !DILocation(line: 2702, column: 1, scope: !2962)
!2978 = distinct !DISubprogram(name: "gimple_asm_set_label_op", scope: !6, file: !6, line: 2717, type: !2249, scopeLine: 2718, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2979)
!2979 = !{!2980, !2981, !2982}
!2980 = !DILocalVariable(name: "gs", arg: 1, scope: !2978, file: !6, line: 2717, type: !379)
!2981 = !DILocalVariable(name: "index", arg: 2, scope: !2978, file: !6, line: 2717, type: !7)
!2982 = !DILocalVariable(name: "label_op", arg: 3, scope: !2978, file: !6, line: 2717, type: !450)
!2983 = !DILocation(line: 0, scope: !2978)
!2984 = !DILocation(line: 2720, column: 3, scope: !2978)
!2985 = !DILocation(line: 2721, column: 3, scope: !2978)
!2986 = !DILocation(line: 2722, column: 45, scope: !2978)
!2987 = !DILocation(line: 2722, column: 30, scope: !2978)
!2988 = !DILocation(line: 2722, column: 28, scope: !2978)
!2989 = !DILocation(line: 2722, column: 65, scope: !2978)
!2990 = !DILocation(line: 2722, column: 50, scope: !2978)
!2991 = !DILocation(line: 2722, column: 48, scope: !2978)
!2992 = !DILocation(line: 2722, column: 3, scope: !2978)
!2993 = !DILocation(line: 2723, column: 1, scope: !2978)
!2994 = distinct !DISubprogram(name: "gimple_build_catch", scope: !3, file: !3, line: 592, type: !2995, scopeLine: 593, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2997)
!2995 = !DISubroutineType(types: !2996)
!2996 = !{!379, !450, !430}
!2997 = !{!2998, !2999, !3000}
!2998 = !DILocalVariable(name: "types", arg: 1, scope: !2994, file: !3, line: 592, type: !450)
!2999 = !DILocalVariable(name: "handler", arg: 2, scope: !2994, file: !3, line: 592, type: !430)
!3000 = !DILocalVariable(name: "p", scope: !2994, file: !3, line: 594, type: !379)
!3001 = !DILocation(line: 0, scope: !2994)
!3002 = !DILocation(line: 594, column: 14, scope: !2994)
!3003 = !DILocation(line: 595, column: 3, scope: !2994)
!3004 = !DILocation(line: 596, column: 7, scope: !3005)
!3005 = distinct !DILexicalBlock(scope: !2994, file: !3, line: 596, column: 7)
!3006 = !DILocation(line: 596, column: 7, scope: !2994)
!3007 = !DILocation(line: 597, column: 5, scope: !3005)
!3008 = !DILocation(line: 599, column: 3, scope: !2994)
!3009 = distinct !DISubprogram(name: "gimple_catch_set_types", scope: !6, file: !6, line: 2827, type: !2189, scopeLine: 2828, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3010)
!3010 = !{!3011, !3012}
!3011 = !DILocalVariable(name: "gs", arg: 1, scope: !3009, file: !6, line: 2827, type: !379)
!3012 = !DILocalVariable(name: "t", arg: 2, scope: !3009, file: !6, line: 2827, type: !450)
!3013 = !DILocation(line: 0, scope: !3009)
!3014 = !DILocation(line: 2830, column: 20, scope: !3009)
!3015 = !DILocation(line: 2830, column: 26, scope: !3009)
!3016 = !DILocation(line: 2831, column: 1, scope: !3009)
!3017 = distinct !DISubprogram(name: "gimple_catch_set_handler", scope: !6, file: !6, line: 2837, type: !2822, scopeLine: 2838, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3018)
!3018 = !{!3019, !3020}
!3019 = !DILocalVariable(name: "gs", arg: 1, scope: !3017, file: !6, line: 2837, type: !379)
!3020 = !DILocalVariable(name: "handler", arg: 2, scope: !3017, file: !6, line: 2837, type: !430)
!3021 = !DILocation(line: 0, scope: !3017)
!3022 = !DILocation(line: 2840, column: 20, scope: !3017)
!3023 = !DILocation(line: 2840, column: 28, scope: !3017)
!3024 = !DILocation(line: 2841, column: 1, scope: !3017)
!3025 = distinct !DISubprogram(name: "gimple_build_eh_filter", scope: !3, file: !3, line: 608, type: !2995, scopeLine: 609, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3026)
!3026 = !{!3027, !3028, !3029}
!3027 = !DILocalVariable(name: "types", arg: 1, scope: !3025, file: !3, line: 608, type: !450)
!3028 = !DILocalVariable(name: "failure", arg: 2, scope: !3025, file: !3, line: 608, type: !430)
!3029 = !DILocalVariable(name: "p", scope: !3025, file: !3, line: 610, type: !379)
!3030 = !DILocation(line: 0, scope: !3025)
!3031 = !DILocation(line: 610, column: 14, scope: !3025)
!3032 = !DILocation(line: 611, column: 3, scope: !3025)
!3033 = !DILocation(line: 612, column: 7, scope: !3034)
!3034 = distinct !DILexicalBlock(scope: !3025, file: !3, line: 612, column: 7)
!3035 = !DILocation(line: 612, column: 7, scope: !3025)
!3036 = !DILocation(line: 613, column: 5, scope: !3034)
!3037 = !DILocation(line: 615, column: 3, scope: !3025)
!3038 = distinct !DISubprogram(name: "gimple_eh_filter_set_types", scope: !6, file: !6, line: 2879, type: !2189, scopeLine: 2880, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3039)
!3039 = !{!3040, !3041}
!3040 = !DILocalVariable(name: "gs", arg: 1, scope: !3038, file: !6, line: 2879, type: !379)
!3041 = !DILocalVariable(name: "types", arg: 2, scope: !3038, file: !6, line: 2879, type: !450)
!3042 = !DILocation(line: 0, scope: !3038)
!3043 = !DILocation(line: 2882, column: 24, scope: !3038)
!3044 = !DILocation(line: 2882, column: 30, scope: !3038)
!3045 = !DILocation(line: 2883, column: 1, scope: !3038)
!3046 = distinct !DISubprogram(name: "gimple_eh_filter_set_failure", scope: !6, file: !6, line: 2890, type: !2822, scopeLine: 2891, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3047)
!3047 = !{!3048, !3049}
!3048 = !DILocalVariable(name: "gs", arg: 1, scope: !3046, file: !6, line: 2890, type: !379)
!3049 = !DILocalVariable(name: "failure", arg: 2, scope: !3046, file: !6, line: 2890, type: !430)
!3050 = !DILocation(line: 0, scope: !3046)
!3051 = !DILocation(line: 2893, column: 24, scope: !3046)
!3052 = !DILocation(line: 2893, column: 32, scope: !3046)
!3053 = !DILocation(line: 2894, column: 1, scope: !3046)
!3054 = distinct !DISubprogram(name: "gimple_build_eh_must_not_throw", scope: !3, file: !3, line: 621, type: !2164, scopeLine: 622, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3055)
!3055 = !{!3056, !3057}
!3056 = !DILocalVariable(name: "decl", arg: 1, scope: !3054, file: !3, line: 621, type: !450)
!3057 = !DILocalVariable(name: "p", scope: !3054, file: !3, line: 623, type: !379)
!3058 = !DILocation(line: 0, scope: !3054)
!3059 = !DILocation(line: 623, column: 14, scope: !3054)
!3060 = !DILocation(line: 625, column: 3, scope: !3054)
!3061 = !DILocation(line: 626, column: 3, scope: !3054)
!3062 = !DILocation(line: 627, column: 3, scope: !3054)
!3063 = !DILocation(line: 629, column: 3, scope: !3054)
!3064 = distinct !DISubprogram(name: "gimple_eh_must_not_throw_set_fndecl", scope: !6, file: !6, line: 2908, type: !2189, scopeLine: 2909, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3065)
!3065 = !{!3066, !3067}
!3066 = !DILocalVariable(name: "gs", arg: 1, scope: !3064, file: !6, line: 2908, type: !379)
!3067 = !DILocalVariable(name: "decl", arg: 2, scope: !3064, file: !6, line: 2908, type: !450)
!3068 = !DILocation(line: 0, scope: !3064)
!3069 = !DILocation(line: 2911, column: 21, scope: !3064)
!3070 = !DILocation(line: 2911, column: 28, scope: !3064)
!3071 = !DILocation(line: 2912, column: 1, scope: !3064)
!3072 = distinct !DISubprogram(name: "gimple_build_try", scope: !3, file: !3, line: 640, type: !3073, scopeLine: 642, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3075)
!3073 = !DISubroutineType(types: !3074)
!3074 = !{!379, !430, !430, !320}
!3075 = !{!3076, !3077, !3078, !3079}
!3076 = !DILocalVariable(name: "eval", arg: 1, scope: !3072, file: !3, line: 640, type: !430)
!3077 = !DILocalVariable(name: "cleanup", arg: 2, scope: !3072, file: !3, line: 640, type: !430)
!3078 = !DILocalVariable(name: "kind", arg: 3, scope: !3072, file: !3, line: 641, type: !320)
!3079 = !DILocalVariable(name: "p", scope: !3072, file: !3, line: 643, type: !379)
!3080 = !DILocation(line: 0, scope: !3072)
!3081 = !DILocation(line: 645, column: 3, scope: !3072)
!3082 = !DILocation(line: 646, column: 7, scope: !3072)
!3083 = !DILocation(line: 647, column: 3, scope: !3072)
!3084 = !DILocation(line: 648, column: 7, scope: !3085)
!3085 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 648, column: 7)
!3086 = !DILocation(line: 648, column: 7, scope: !3072)
!3087 = !DILocation(line: 649, column: 5, scope: !3085)
!3088 = !DILocation(line: 650, column: 7, scope: !3089)
!3089 = distinct !DILexicalBlock(scope: !3072, file: !3, line: 650, column: 7)
!3090 = !DILocation(line: 650, column: 7, scope: !3072)
!3091 = !DILocation(line: 651, column: 5, scope: !3089)
!3092 = !DILocation(line: 653, column: 3, scope: !3072)
!3093 = distinct !DISubprogram(name: "gimple_set_subcode", scope: !3, file: !3, line: 162, type: !2154, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3094)
!3094 = !{!3095, !3096}
!3095 = !DILocalVariable(name: "g", arg: 1, scope: !3093, file: !3, line: 162, type: !379)
!3096 = !DILocalVariable(name: "subcode", arg: 2, scope: !3093, file: !3, line: 162, type: !7)
!3097 = !DILocation(line: 0, scope: !3093)
!3098 = !DILocation(line: 166, column: 3, scope: !3093)
!3099 = !DILocation(line: 167, column: 13, scope: !3093)
!3100 = !DILocation(line: 167, column: 21, scope: !3093)
!3101 = !DILocation(line: 168, column: 1, scope: !3093)
!3102 = distinct !DISubprogram(name: "gimple_try_set_eval", scope: !6, file: !6, line: 2988, type: !2822, scopeLine: 2989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3103)
!3103 = !{!3104, !3105}
!3104 = !DILocalVariable(name: "gs", arg: 1, scope: !3102, file: !6, line: 2988, type: !379)
!3105 = !DILocalVariable(name: "eval", arg: 2, scope: !3102, file: !6, line: 2988, type: !430)
!3106 = !DILocation(line: 0, scope: !3102)
!3107 = !DILocation(line: 2991, column: 18, scope: !3102)
!3108 = !DILocation(line: 2991, column: 23, scope: !3102)
!3109 = !DILocation(line: 2992, column: 1, scope: !3102)
!3110 = distinct !DISubprogram(name: "gimple_try_set_cleanup", scope: !6, file: !6, line: 2999, type: !2822, scopeLine: 3000, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3111)
!3111 = !{!3112, !3113}
!3112 = !DILocalVariable(name: "gs", arg: 1, scope: !3110, file: !6, line: 2999, type: !379)
!3113 = !DILocalVariable(name: "cleanup", arg: 2, scope: !3110, file: !6, line: 2999, type: !430)
!3114 = !DILocation(line: 0, scope: !3110)
!3115 = !DILocation(line: 3002, column: 18, scope: !3110)
!3116 = !DILocation(line: 3002, column: 26, scope: !3110)
!3117 = !DILocation(line: 3003, column: 1, scope: !3110)
!3118 = distinct !DISubprogram(name: "gimple_build_wce", scope: !3, file: !3, line: 661, type: !3119, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3121)
!3119 = !DISubroutineType(types: !3120)
!3120 = !{!379, !430}
!3121 = !{!3122, !3123}
!3122 = !DILocalVariable(name: "cleanup", arg: 1, scope: !3118, file: !3, line: 661, type: !430)
!3123 = !DILocalVariable(name: "p", scope: !3118, file: !3, line: 663, type: !379)
!3124 = !DILocation(line: 0, scope: !3118)
!3125 = !DILocation(line: 663, column: 14, scope: !3118)
!3126 = !DILocation(line: 664, column: 7, scope: !3127)
!3127 = distinct !DILexicalBlock(scope: !3118, file: !3, line: 664, column: 7)
!3128 = !DILocation(line: 664, column: 7, scope: !3118)
!3129 = !DILocation(line: 665, column: 5, scope: !3127)
!3130 = !DILocation(line: 667, column: 3, scope: !3118)
!3131 = distinct !DISubprogram(name: "gimple_wce_set_cleanup", scope: !6, file: !6, line: 3019, type: !2822, scopeLine: 3020, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3132)
!3132 = !{!3133, !3134}
!3133 = !DILocalVariable(name: "gs", arg: 1, scope: !3131, file: !6, line: 3019, type: !379)
!3134 = !DILocalVariable(name: "cleanup", arg: 2, scope: !3131, file: !6, line: 3019, type: !430)
!3135 = !DILocation(line: 0, scope: !3131)
!3136 = !DILocation(line: 3022, column: 18, scope: !3131)
!3137 = !DILocation(line: 3022, column: 26, scope: !3131)
!3138 = !DILocation(line: 3023, column: 1, scope: !3131)
!3139 = distinct !DISubprogram(name: "gimple_build_resx", scope: !3, file: !3, line: 674, type: !3140, scopeLine: 675, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3142)
!3140 = !DISubroutineType(types: !3141)
!3141 = !{!379, !372}
!3142 = !{!3143, !3144}
!3143 = !DILocalVariable(name: "region", arg: 1, scope: !3139, file: !3, line: 674, type: !372)
!3144 = !DILocalVariable(name: "p", scope: !3139, file: !3, line: 676, type: !379)
!3145 = !DILocation(line: 0, scope: !3139)
!3146 = !DILocation(line: 676, column: 14, scope: !3139)
!3147 = !DILocation(line: 677, column: 21, scope: !3139)
!3148 = !DILocation(line: 677, column: 28, scope: !3139)
!3149 = !DILocation(line: 678, column: 3, scope: !3139)
!3150 = distinct !DISubprogram(name: "gimple_build_switch_nlabels", scope: !3, file: !3, line: 688, type: !3151, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3153)
!3151 = !DISubroutineType(types: !3152)
!3152 = !{!379, !7, !450, !450}
!3153 = !{!3154, !3155, !3156, !3157}
!3154 = !DILocalVariable(name: "nlabels", arg: 1, scope: !3150, file: !3, line: 688, type: !7)
!3155 = !DILocalVariable(name: "index", arg: 2, scope: !3150, file: !3, line: 688, type: !450)
!3156 = !DILocalVariable(name: "default_label", arg: 3, scope: !3150, file: !3, line: 688, type: !450)
!3157 = !DILocalVariable(name: "p", scope: !3150, file: !3, line: 691, type: !379)
!3158 = !DILocation(line: 0, scope: !3150)
!3159 = !DILocation(line: 691, column: 14, scope: !3150)
!3160 = !DILocation(line: 693, column: 3, scope: !3150)
!3161 = !DILocation(line: 694, column: 7, scope: !3150)
!3162 = !DILocation(line: 695, column: 5, scope: !3163)
!3163 = distinct !DILexicalBlock(scope: !3150, file: !3, line: 694, column: 7)
!3164 = !DILocation(line: 696, column: 3, scope: !3150)
!3165 = distinct !DISubprogram(name: "gimple_switch_set_index", scope: !6, file: !6, line: 3200, type: !2189, scopeLine: 3201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3166)
!3166 = !{!3167, !3168}
!3167 = !DILocalVariable(name: "gs", arg: 1, scope: !3165, file: !6, line: 3200, type: !379)
!3168 = !DILocalVariable(name: "index", arg: 2, scope: !3165, file: !6, line: 3200, type: !450)
!3169 = !DILocation(line: 0, scope: !3165)
!3170 = !DILocation(line: 3203, column: 3, scope: !3165)
!3171 = !DILocation(line: 3204, column: 3, scope: !3165)
!3172 = !DILocation(line: 3205, column: 1, scope: !3165)
!3173 = distinct !DISubprogram(name: "gimple_switch_set_default_label", scope: !6, file: !6, line: 3241, type: !2189, scopeLine: 3242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3174)
!3174 = !{!3175, !3176}
!3175 = !DILocalVariable(name: "gs", arg: 1, scope: !3173, file: !6, line: 3241, type: !379)
!3176 = !DILocalVariable(name: "label", arg: 2, scope: !3173, file: !6, line: 3241, type: !450)
!3177 = !DILocation(line: 0, scope: !3173)
!3178 = !DILocation(line: 3243, column: 3, scope: !3173)
!3179 = !DILocation(line: 3244, column: 1, scope: !3173)
!3180 = distinct !DISubprogram(name: "gimple_build_switch", scope: !3, file: !3, line: 707, type: !3181, scopeLine: 708, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3183)
!3181 = !DISubroutineType(types: !3182)
!3182 = !{!379, !7, !450, !450, null}
!3183 = !{!3184, !3185, !3186, !3187, !3188, !3189, !3190}
!3184 = !DILocalVariable(name: "nlabels", arg: 1, scope: !3180, file: !3, line: 707, type: !7)
!3185 = !DILocalVariable(name: "index", arg: 2, scope: !3180, file: !3, line: 707, type: !450)
!3186 = !DILocalVariable(name: "default_label", arg: 3, scope: !3180, file: !3, line: 707, type: !450)
!3187 = !DILocalVariable(name: "al", scope: !3180, file: !3, line: 709, type: !2274)
!3188 = !DILocalVariable(name: "i", scope: !3180, file: !3, line: 710, type: !7)
!3189 = !DILocalVariable(name: "offset", scope: !3180, file: !3, line: 710, type: !7)
!3190 = !DILocalVariable(name: "p", scope: !3180, file: !3, line: 711, type: !379)
!3191 = !DILocation(line: 0, scope: !3180)
!3192 = !DILocation(line: 709, column: 3, scope: !3180)
!3193 = !DILocation(line: 709, column: 11, scope: !3180)
!3194 = !DILocation(line: 711, column: 14, scope: !3180)
!3195 = !DILocation(line: 714, column: 3, scope: !3180)
!3196 = !DILocation(line: 715, column: 27, scope: !3180)
!3197 = !DILocation(line: 0, scope: !3198)
!3198 = distinct !DILexicalBlock(scope: !3199, file: !3, line: 716, column: 3)
!3199 = distinct !DILexicalBlock(scope: !3180, file: !3, line: 716, column: 3)
!3200 = !DILocation(line: 716, column: 8, scope: !3199)
!3201 = !DILocation(line: 0, scope: !3199)
!3202 = !DILocation(line: 716, column: 17, scope: !3198)
!3203 = !DILocation(line: 716, column: 3, scope: !3199)
!3204 = !DILocation(line: 717, column: 35, scope: !3198)
!3205 = !DILocation(line: 717, column: 45, scope: !3198)
!3206 = !DILocation(line: 717, column: 5, scope: !3198)
!3207 = !DILocation(line: 716, column: 29, scope: !3198)
!3208 = !DILocation(line: 716, column: 3, scope: !3198)
!3209 = distinct !{!3209, !3203, !3210}
!3210 = !DILocation(line: 717, column: 62, scope: !3199)
!3211 = !DILocation(line: 718, column: 3, scope: !3180)
!3212 = !DILocation(line: 721, column: 1, scope: !3180)
!3213 = !DILocation(line: 720, column: 3, scope: !3180)
!3214 = distinct !DISubprogram(name: "gimple_switch_set_label", scope: !6, file: !6, line: 3222, type: !2249, scopeLine: 3223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3215)
!3215 = !{!3216, !3217, !3218}
!3216 = !DILocalVariable(name: "gs", arg: 1, scope: !3214, file: !6, line: 3222, type: !379)
!3217 = !DILocalVariable(name: "index", arg: 2, scope: !3214, file: !6, line: 3222, type: !7)
!3218 = !DILocalVariable(name: "label", arg: 3, scope: !3214, file: !6, line: 3222, type: !450)
!3219 = !DILocation(line: 0, scope: !3214)
!3220 = !DILocation(line: 3225, column: 3, scope: !3214)
!3221 = !DILocation(line: 3226, column: 3, scope: !3214)
!3222 = !DILocation(line: 3227, column: 3, scope: !3214)
!3223 = !DILocation(line: 3228, column: 1, scope: !3214)
!3224 = distinct !DISubprogram(name: "gimple_build_switch_vec", scope: !3, file: !3, line: 731, type: !3225, scopeLine: 732, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3227)
!3225 = !DISubroutineType(types: !3226)
!3226 = !{!379, !450, !450, !1558}
!3227 = !{!3228, !3229, !3230, !3231, !3232, !3233, !3234}
!3228 = !DILocalVariable(name: "index", arg: 1, scope: !3224, file: !3, line: 731, type: !450)
!3229 = !DILocalVariable(name: "default_label", arg: 2, scope: !3224, file: !3, line: 731, type: !450)
!3230 = !DILocalVariable(name: "args", arg: 3, scope: !3224, file: !3, line: 731, type: !1558)
!3231 = !DILocalVariable(name: "i", scope: !3224, file: !3, line: 733, type: !7)
!3232 = !DILocalVariable(name: "offset", scope: !3224, file: !3, line: 733, type: !7)
!3233 = !DILocalVariable(name: "nlabels", scope: !3224, file: !3, line: 733, type: !7)
!3234 = !DILocalVariable(name: "p", scope: !3224, file: !3, line: 734, type: !379)
!3235 = !DILocation(line: 0, scope: !3224)
!3236 = !DILocation(line: 733, column: 33, scope: !3224)
!3237 = !DILocation(line: 734, column: 14, scope: !3224)
!3238 = !DILocation(line: 737, column: 27, scope: !3224)
!3239 = !DILocation(line: 738, column: 8, scope: !3240)
!3240 = distinct !DILexicalBlock(scope: !3224, file: !3, line: 738, column: 3)
!3241 = !DILocation(line: 0, scope: !3240)
!3242 = !DILocation(line: 738, column: 17, scope: !3243)
!3243 = distinct !DILexicalBlock(scope: !3240, file: !3, line: 738, column: 3)
!3244 = !DILocation(line: 738, column: 3, scope: !3240)
!3245 = !DILocation(line: 739, column: 35, scope: !3243)
!3246 = !DILocation(line: 739, column: 45, scope: !3243)
!3247 = !DILocation(line: 739, column: 5, scope: !3243)
!3248 = !DILocation(line: 738, column: 29, scope: !3243)
!3249 = !DILocation(line: 738, column: 3, scope: !3243)
!3250 = distinct !{!3250, !3244, !3251}
!3251 = !DILocation(line: 739, column: 70, scope: !3240)
!3252 = !DILocation(line: 741, column: 3, scope: !3224)
!3253 = distinct !DISubprogram(name: "gimple_build_eh_dispatch", scope: !3, file: !3, line: 747, type: !3140, scopeLine: 748, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3254)
!3254 = !{!3255, !3256}
!3255 = !DILocalVariable(name: "region", arg: 1, scope: !3253, file: !3, line: 747, type: !372)
!3256 = !DILocalVariable(name: "p", scope: !3253, file: !3, line: 749, type: !379)
!3257 = !DILocation(line: 0, scope: !3253)
!3258 = !DILocation(line: 749, column: 14, scope: !3253)
!3259 = !DILocation(line: 750, column: 21, scope: !3253)
!3260 = !DILocation(line: 750, column: 28, scope: !3253)
!3261 = !DILocation(line: 751, column: 3, scope: !3253)
!3262 = distinct !DISubprogram(name: "gimple_build_debug_bind_stat", scope: !3, file: !3, line: 759, type: !3263, scopeLine: 760, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3265)
!3263 = !DISubroutineType(types: !3264)
!3264 = !{!379, !450, !450, !379}
!3265 = !{!3266, !3267, !3268, !3269}
!3266 = !DILocalVariable(name: "var", arg: 1, scope: !3262, file: !3, line: 759, type: !450)
!3267 = !DILocalVariable(name: "value", arg: 2, scope: !3262, file: !3, line: 759, type: !450)
!3268 = !DILocalVariable(name: "stmt", arg: 3, scope: !3262, file: !3, line: 759, type: !379)
!3269 = !DILocalVariable(name: "p", scope: !3262, file: !3, line: 761, type: !379)
!3270 = !DILocation(line: 0, scope: !3262)
!3271 = !DILocation(line: 761, column: 14, scope: !3262)
!3272 = !DILocation(line: 765, column: 3, scope: !3262)
!3273 = !DILocation(line: 766, column: 3, scope: !3262)
!3274 = !DILocation(line: 767, column: 7, scope: !3275)
!3275 = distinct !DILexicalBlock(scope: !3262, file: !3, line: 767, column: 7)
!3276 = !DILocation(line: 767, column: 7, scope: !3262)
!3277 = !DILocation(line: 769, column: 28, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3275, file: !3, line: 768, column: 5)
!3279 = !DILocation(line: 769, column: 7, scope: !3278)
!3280 = !DILocation(line: 770, column: 31, scope: !3278)
!3281 = !DILocation(line: 770, column: 7, scope: !3278)
!3282 = !DILocation(line: 771, column: 5, scope: !3278)
!3283 = !DILocation(line: 773, column: 3, scope: !3262)
!3284 = distinct !DISubprogram(name: "gimple_debug_bind_set_var", scope: !6, file: !6, line: 3306, type: !2189, scopeLine: 3307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3285)
!3285 = !{!3286, !3287}
!3286 = !DILocalVariable(name: "dbg", arg: 1, scope: !3284, file: !6, line: 3306, type: !379)
!3287 = !DILocalVariable(name: "var", arg: 2, scope: !3284, file: !6, line: 3306, type: !450)
!3288 = !DILocation(line: 0, scope: !3284)
!3289 = !DILocation(line: 3312, column: 3, scope: !3284)
!3290 = !DILocation(line: 3313, column: 1, scope: !3284)
!3291 = distinct !DISubprogram(name: "gimple_debug_bind_set_value", scope: !6, file: !6, line: 3319, type: !2189, scopeLine: 3320, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3292)
!3292 = !{!3293, !3294}
!3293 = !DILocalVariable(name: "dbg", arg: 1, scope: !3291, file: !6, line: 3319, type: !379)
!3294 = !DILocalVariable(name: "value", arg: 2, scope: !3291, file: !6, line: 3319, type: !450)
!3295 = !DILocation(line: 0, scope: !3291)
!3296 = !DILocation(line: 3325, column: 3, scope: !3291)
!3297 = !DILocation(line: 3326, column: 1, scope: !3291)
!3298 = distinct !DISubprogram(name: "gimple_block", scope: !6, file: !6, line: 1121, type: !3299, scopeLine: 1122, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3302)
!3299 = !DISubroutineType(types: !3300)
!3300 = !{!450, !3301}
!3301 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !380, line: 60, baseType: !1556)
!3302 = !{!3303}
!3303 = !DILocalVariable(name: "g", arg: 1, scope: !3298, file: !6, line: 1121, type: !3301)
!3304 = !DILocation(line: 0, scope: !3298)
!3305 = !DILocation(line: 1123, column: 20, scope: !3298)
!3306 = !DILocation(line: 1123, column: 3, scope: !3298)
!3307 = distinct !DISubprogram(name: "gimple_set_location", scope: !6, file: !6, line: 1156, type: !3308, scopeLine: 1157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3310)
!3308 = !DISubroutineType(types: !3309)
!3309 = !{null, !379, !398}
!3310 = !{!3311, !3312}
!3311 = !DILocalVariable(name: "g", arg: 1, scope: !3307, file: !6, line: 1156, type: !379)
!3312 = !DILocalVariable(name: "location", arg: 2, scope: !3307, file: !6, line: 1156, type: !398)
!3313 = !DILocation(line: 0, scope: !3307)
!3314 = !DILocation(line: 1158, column: 13, scope: !3307)
!3315 = !DILocation(line: 1158, column: 22, scope: !3307)
!3316 = !DILocation(line: 1159, column: 1, scope: !3307)
!3317 = distinct !DISubprogram(name: "gimple_location", scope: !6, file: !6, line: 1139, type: !3318, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3320)
!3318 = !DISubroutineType(types: !3319)
!3319 = !{!398, !3301}
!3320 = !{!3321}
!3321 = !DILocalVariable(name: "g", arg: 1, scope: !3317, file: !6, line: 1139, type: !3301)
!3322 = !DILocation(line: 0, scope: !3317)
!3323 = !DILocation(line: 1141, column: 20, scope: !3317)
!3324 = !DILocation(line: 1141, column: 3, scope: !3317)
!3325 = distinct !DISubprogram(name: "gimple_build_omp_critical", scope: !3, file: !3, line: 783, type: !3326, scopeLine: 784, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3328)
!3326 = !DISubroutineType(types: !3327)
!3327 = !{!379, !430, !450}
!3328 = !{!3329, !3330, !3331}
!3329 = !DILocalVariable(name: "body", arg: 1, scope: !3325, file: !3, line: 783, type: !430)
!3330 = !DILocalVariable(name: "name", arg: 2, scope: !3325, file: !3, line: 783, type: !450)
!3331 = !DILocalVariable(name: "p", scope: !3325, file: !3, line: 785, type: !379)
!3332 = !DILocation(line: 0, scope: !3325)
!3333 = !DILocation(line: 785, column: 14, scope: !3325)
!3334 = !DILocation(line: 786, column: 3, scope: !3325)
!3335 = !DILocation(line: 787, column: 7, scope: !3336)
!3336 = distinct !DILexicalBlock(scope: !3325, file: !3, line: 787, column: 7)
!3337 = !DILocation(line: 787, column: 7, scope: !3325)
!3338 = !DILocation(line: 788, column: 5, scope: !3336)
!3339 = !DILocation(line: 790, column: 3, scope: !3325)
!3340 = distinct !DISubprogram(name: "gimple_omp_critical_set_name", scope: !6, file: !6, line: 3400, type: !2189, scopeLine: 3401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3341)
!3341 = !{!3342, !3343}
!3342 = !DILocalVariable(name: "gs", arg: 1, scope: !3340, file: !6, line: 3400, type: !379)
!3343 = !DILocalVariable(name: "name", arg: 2, scope: !3340, file: !6, line: 3400, type: !450)
!3344 = !DILocation(line: 0, scope: !3340)
!3345 = !DILocation(line: 3403, column: 27, scope: !3340)
!3346 = !DILocation(line: 3403, column: 32, scope: !3340)
!3347 = !DILocation(line: 3404, column: 1, scope: !3340)
!3348 = distinct !DISubprogram(name: "gimple_omp_set_body", scope: !6, file: !6, line: 3371, type: !2822, scopeLine: 3372, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3349)
!3349 = !{!3350, !3351}
!3350 = !DILocalVariable(name: "gs", arg: 1, scope: !3348, file: !6, line: 3371, type: !379)
!3351 = !DILocalVariable(name: "body", arg: 2, scope: !3348, file: !6, line: 3371, type: !430)
!3352 = !DILocation(line: 0, scope: !3348)
!3353 = !DILocation(line: 3373, column: 11, scope: !3348)
!3354 = !DILocation(line: 3373, column: 16, scope: !3348)
!3355 = !DILocation(line: 3374, column: 1, scope: !3348)
!3356 = distinct !DISubprogram(name: "gimple_build_omp_for", scope: !3, file: !3, line: 802, type: !3357, scopeLine: 804, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3359)
!3357 = !DISubroutineType(types: !3358)
!3358 = !{!379, !430, !450, !760, !430}
!3359 = !{!3360, !3361, !3362, !3363, !3364}
!3360 = !DILocalVariable(name: "body", arg: 1, scope: !3356, file: !3, line: 802, type: !430)
!3361 = !DILocalVariable(name: "clauses", arg: 2, scope: !3356, file: !3, line: 802, type: !450)
!3362 = !DILocalVariable(name: "collapse", arg: 3, scope: !3356, file: !3, line: 802, type: !760)
!3363 = !DILocalVariable(name: "pre_body", arg: 4, scope: !3356, file: !3, line: 803, type: !430)
!3364 = !DILocalVariable(name: "p", scope: !3356, file: !3, line: 805, type: !379)
!3365 = !DILocation(line: 0, scope: !3356)
!3366 = !DILocation(line: 805, column: 14, scope: !3356)
!3367 = !DILocation(line: 806, column: 7, scope: !3368)
!3368 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 806, column: 7)
!3369 = !DILocation(line: 806, column: 7, scope: !3356)
!3370 = !DILocation(line: 807, column: 5, scope: !3368)
!3371 = !DILocation(line: 808, column: 3, scope: !3356)
!3372 = !DILocation(line: 809, column: 21, scope: !3356)
!3373 = !DILocation(line: 809, column: 30, scope: !3356)
!3374 = !DILocation(line: 810, column: 28, scope: !3356)
!3375 = !DILocation(line: 810, column: 21, scope: !3356)
!3376 = !DILocation(line: 810, column: 26, scope: !3356)
!3377 = !DILocation(line: 811, column: 7, scope: !3378)
!3378 = distinct !DILexicalBlock(scope: !3356, file: !3, line: 811, column: 7)
!3379 = !DILocation(line: 811, column: 7, scope: !3356)
!3380 = !DILocation(line: 812, column: 5, scope: !3378)
!3381 = !DILocation(line: 814, column: 3, scope: !3356)
!3382 = distinct !DISubprogram(name: "gimple_omp_for_set_clauses", scope: !6, file: !6, line: 3430, type: !2189, scopeLine: 3431, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3383)
!3383 = !{!3384, !3385}
!3384 = !DILocalVariable(name: "gs", arg: 1, scope: !3382, file: !6, line: 3430, type: !379)
!3385 = !DILocalVariable(name: "clauses", arg: 2, scope: !3382, file: !6, line: 3430, type: !450)
!3386 = !DILocation(line: 0, scope: !3382)
!3387 = !DILocation(line: 3433, column: 22, scope: !3382)
!3388 = !DILocation(line: 3433, column: 30, scope: !3382)
!3389 = !DILocation(line: 3434, column: 1, scope: !3382)
!3390 = distinct !DISubprogram(name: "gimple_omp_for_set_pre_body", scope: !6, file: !6, line: 3594, type: !2822, scopeLine: 3595, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3391)
!3391 = !{!3392, !3393}
!3392 = !DILocalVariable(name: "gs", arg: 1, scope: !3390, file: !6, line: 3594, type: !379)
!3393 = !DILocalVariable(name: "pre_body", arg: 2, scope: !3390, file: !6, line: 3594, type: !430)
!3394 = !DILocation(line: 0, scope: !3390)
!3395 = !DILocation(line: 3597, column: 22, scope: !3390)
!3396 = !DILocation(line: 3597, column: 31, scope: !3390)
!3397 = !DILocation(line: 3598, column: 1, scope: !3390)
!3398 = distinct !DISubprogram(name: "gimple_build_omp_parallel", scope: !3, file: !3, line: 826, type: !3399, scopeLine: 828, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3401)
!3399 = !DISubroutineType(types: !3400)
!3400 = !{!379, !430, !450, !450, !450}
!3401 = !{!3402, !3403, !3404, !3405, !3406}
!3402 = !DILocalVariable(name: "body", arg: 1, scope: !3398, file: !3, line: 826, type: !430)
!3403 = !DILocalVariable(name: "clauses", arg: 2, scope: !3398, file: !3, line: 826, type: !450)
!3404 = !DILocalVariable(name: "child_fn", arg: 3, scope: !3398, file: !3, line: 826, type: !450)
!3405 = !DILocalVariable(name: "data_arg", arg: 4, scope: !3398, file: !3, line: 827, type: !450)
!3406 = !DILocalVariable(name: "p", scope: !3398, file: !3, line: 829, type: !379)
!3407 = !DILocation(line: 0, scope: !3398)
!3408 = !DILocation(line: 829, column: 14, scope: !3398)
!3409 = !DILocation(line: 830, column: 7, scope: !3410)
!3410 = distinct !DILexicalBlock(scope: !3398, file: !3, line: 830, column: 7)
!3411 = !DILocation(line: 830, column: 7, scope: !3398)
!3412 = !DILocation(line: 831, column: 5, scope: !3410)
!3413 = !DILocation(line: 832, column: 3, scope: !3398)
!3414 = !DILocation(line: 833, column: 3, scope: !3398)
!3415 = !DILocation(line: 834, column: 3, scope: !3398)
!3416 = !DILocation(line: 836, column: 3, scope: !3398)
!3417 = distinct !DISubprogram(name: "gimple_omp_parallel_set_clauses", scope: !6, file: !6, line: 3625, type: !2189, scopeLine: 3626, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3418)
!3418 = !{!3419, !3420}
!3419 = !DILocalVariable(name: "gs", arg: 1, scope: !3417, file: !6, line: 3625, type: !379)
!3420 = !DILocalVariable(name: "clauses", arg: 2, scope: !3417, file: !6, line: 3625, type: !450)
!3421 = !DILocation(line: 0, scope: !3417)
!3422 = !DILocation(line: 3628, column: 27, scope: !3417)
!3423 = !DILocation(line: 3628, column: 35, scope: !3417)
!3424 = !DILocation(line: 3629, column: 1, scope: !3417)
!3425 = distinct !DISubprogram(name: "gimple_omp_parallel_set_child_fn", scope: !6, file: !6, line: 3655, type: !2189, scopeLine: 3656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3426)
!3426 = !{!3427, !3428}
!3427 = !DILocalVariable(name: "gs", arg: 1, scope: !3425, file: !6, line: 3655, type: !379)
!3428 = !DILocalVariable(name: "child_fn", arg: 2, scope: !3425, file: !6, line: 3655, type: !450)
!3429 = !DILocation(line: 0, scope: !3425)
!3430 = !DILocation(line: 3658, column: 27, scope: !3425)
!3431 = !DILocation(line: 3658, column: 36, scope: !3425)
!3432 = !DILocation(line: 3659, column: 1, scope: !3425)
!3433 = distinct !DISubprogram(name: "gimple_omp_parallel_set_data_arg", scope: !6, file: !6, line: 3686, type: !2189, scopeLine: 3687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3434)
!3434 = !{!3435, !3436}
!3435 = !DILocalVariable(name: "gs", arg: 1, scope: !3433, file: !6, line: 3686, type: !379)
!3436 = !DILocalVariable(name: "data_arg", arg: 2, scope: !3433, file: !6, line: 3686, type: !450)
!3437 = !DILocation(line: 0, scope: !3433)
!3438 = !DILocation(line: 3689, column: 27, scope: !3433)
!3439 = !DILocation(line: 3689, column: 36, scope: !3433)
!3440 = !DILocation(line: 3690, column: 1, scope: !3433)
!3441 = distinct !DISubprogram(name: "gimple_build_omp_task", scope: !3, file: !3, line: 850, type: !3442, scopeLine: 853, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3444)
!3442 = !DISubroutineType(types: !3443)
!3443 = !{!379, !430, !450, !450, !450, !450, !450, !450}
!3444 = !{!3445, !3446, !3447, !3448, !3449, !3450, !3451, !3452}
!3445 = !DILocalVariable(name: "body", arg: 1, scope: !3441, file: !3, line: 850, type: !430)
!3446 = !DILocalVariable(name: "clauses", arg: 2, scope: !3441, file: !3, line: 850, type: !450)
!3447 = !DILocalVariable(name: "child_fn", arg: 3, scope: !3441, file: !3, line: 850, type: !450)
!3448 = !DILocalVariable(name: "data_arg", arg: 4, scope: !3441, file: !3, line: 851, type: !450)
!3449 = !DILocalVariable(name: "copy_fn", arg: 5, scope: !3441, file: !3, line: 851, type: !450)
!3450 = !DILocalVariable(name: "arg_size", arg: 6, scope: !3441, file: !3, line: 851, type: !450)
!3451 = !DILocalVariable(name: "arg_align", arg: 7, scope: !3441, file: !3, line: 852, type: !450)
!3452 = !DILocalVariable(name: "p", scope: !3441, file: !3, line: 854, type: !379)
!3453 = !DILocation(line: 0, scope: !3441)
!3454 = !DILocation(line: 854, column: 14, scope: !3441)
!3455 = !DILocation(line: 855, column: 7, scope: !3456)
!3456 = distinct !DILexicalBlock(scope: !3441, file: !3, line: 855, column: 7)
!3457 = !DILocation(line: 855, column: 7, scope: !3441)
!3458 = !DILocation(line: 856, column: 5, scope: !3456)
!3459 = !DILocation(line: 857, column: 3, scope: !3441)
!3460 = !DILocation(line: 858, column: 3, scope: !3441)
!3461 = !DILocation(line: 859, column: 3, scope: !3441)
!3462 = !DILocation(line: 860, column: 3, scope: !3441)
!3463 = !DILocation(line: 861, column: 3, scope: !3441)
!3464 = !DILocation(line: 862, column: 3, scope: !3441)
!3465 = !DILocation(line: 864, column: 3, scope: !3441)
!3466 = distinct !DISubprogram(name: "gimple_omp_task_set_clauses", scope: !6, file: !6, line: 3717, type: !2189, scopeLine: 3718, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3467)
!3467 = !{!3468, !3469}
!3468 = !DILocalVariable(name: "gs", arg: 1, scope: !3466, file: !6, line: 3717, type: !379)
!3469 = !DILocalVariable(name: "clauses", arg: 2, scope: !3466, file: !6, line: 3717, type: !450)
!3470 = !DILocation(line: 0, scope: !3466)
!3471 = !DILocation(line: 3720, column: 27, scope: !3466)
!3472 = !DILocation(line: 3720, column: 35, scope: !3466)
!3473 = !DILocation(line: 3721, column: 1, scope: !3466)
!3474 = distinct !DISubprogram(name: "gimple_omp_task_set_child_fn", scope: !6, file: !6, line: 3747, type: !2189, scopeLine: 3748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3475)
!3475 = !{!3476, !3477}
!3476 = !DILocalVariable(name: "gs", arg: 1, scope: !3474, file: !6, line: 3747, type: !379)
!3477 = !DILocalVariable(name: "child_fn", arg: 2, scope: !3474, file: !6, line: 3747, type: !450)
!3478 = !DILocation(line: 0, scope: !3474)
!3479 = !DILocation(line: 3750, column: 27, scope: !3474)
!3480 = !DILocation(line: 3750, column: 36, scope: !3474)
!3481 = !DILocation(line: 3751, column: 1, scope: !3474)
!3482 = distinct !DISubprogram(name: "gimple_omp_task_set_data_arg", scope: !6, file: !6, line: 3778, type: !2189, scopeLine: 3779, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3483)
!3483 = !{!3484, !3485}
!3484 = !DILocalVariable(name: "gs", arg: 1, scope: !3482, file: !6, line: 3778, type: !379)
!3485 = !DILocalVariable(name: "data_arg", arg: 2, scope: !3482, file: !6, line: 3778, type: !450)
!3486 = !DILocation(line: 0, scope: !3482)
!3487 = !DILocation(line: 3781, column: 27, scope: !3482)
!3488 = !DILocation(line: 3781, column: 36, scope: !3482)
!3489 = !DILocation(line: 3782, column: 1, scope: !3482)
!3490 = distinct !DISubprogram(name: "gimple_omp_task_set_copy_fn", scope: !6, file: !6, line: 3909, type: !2189, scopeLine: 3910, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3491)
!3491 = !{!3492, !3493}
!3492 = !DILocalVariable(name: "gs", arg: 1, scope: !3490, file: !6, line: 3909, type: !379)
!3493 = !DILocalVariable(name: "copy_fn", arg: 2, scope: !3490, file: !6, line: 3909, type: !450)
!3494 = !DILocation(line: 0, scope: !3490)
!3495 = !DILocation(line: 3912, column: 23, scope: !3490)
!3496 = !DILocation(line: 3912, column: 31, scope: !3490)
!3497 = !DILocation(line: 3913, column: 1, scope: !3490)
!3498 = distinct !DISubprogram(name: "gimple_omp_task_set_arg_size", scope: !6, file: !6, line: 3939, type: !2189, scopeLine: 3940, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3499)
!3499 = !{!3500, !3501}
!3500 = !DILocalVariable(name: "gs", arg: 1, scope: !3498, file: !6, line: 3939, type: !379)
!3501 = !DILocalVariable(name: "arg_size", arg: 2, scope: !3498, file: !6, line: 3939, type: !450)
!3502 = !DILocation(line: 0, scope: !3498)
!3503 = !DILocation(line: 3942, column: 23, scope: !3498)
!3504 = !DILocation(line: 3942, column: 32, scope: !3498)
!3505 = !DILocation(line: 3943, column: 1, scope: !3498)
!3506 = distinct !DISubprogram(name: "gimple_omp_task_set_arg_align", scope: !6, file: !6, line: 3969, type: !2189, scopeLine: 3970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3507)
!3507 = !{!3508, !3509}
!3508 = !DILocalVariable(name: "gs", arg: 1, scope: !3506, file: !6, line: 3969, type: !379)
!3509 = !DILocalVariable(name: "arg_align", arg: 2, scope: !3506, file: !6, line: 3969, type: !450)
!3510 = !DILocation(line: 0, scope: !3506)
!3511 = !DILocation(line: 3972, column: 23, scope: !3506)
!3512 = !DILocation(line: 3972, column: 33, scope: !3506)
!3513 = !DILocation(line: 3973, column: 1, scope: !3506)
!3514 = distinct !DISubprogram(name: "gimple_build_omp_section", scope: !3, file: !3, line: 873, type: !3119, scopeLine: 874, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3515)
!3515 = !{!3516, !3517}
!3516 = !DILocalVariable(name: "body", arg: 1, scope: !3514, file: !3, line: 873, type: !430)
!3517 = !DILocalVariable(name: "p", scope: !3514, file: !3, line: 875, type: !379)
!3518 = !DILocation(line: 0, scope: !3514)
!3519 = !DILocation(line: 875, column: 14, scope: !3514)
!3520 = !DILocation(line: 876, column: 7, scope: !3521)
!3521 = distinct !DILexicalBlock(scope: !3514, file: !3, line: 876, column: 7)
!3522 = !DILocation(line: 876, column: 7, scope: !3514)
!3523 = !DILocation(line: 877, column: 5, scope: !3521)
!3524 = !DILocation(line: 879, column: 3, scope: !3514)
!3525 = distinct !DISubprogram(name: "gimple_build_omp_master", scope: !3, file: !3, line: 888, type: !3119, scopeLine: 889, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3526)
!3526 = !{!3527, !3528}
!3527 = !DILocalVariable(name: "body", arg: 1, scope: !3525, file: !3, line: 888, type: !430)
!3528 = !DILocalVariable(name: "p", scope: !3525, file: !3, line: 890, type: !379)
!3529 = !DILocation(line: 0, scope: !3525)
!3530 = !DILocation(line: 890, column: 14, scope: !3525)
!3531 = !DILocation(line: 891, column: 7, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3525, file: !3, line: 891, column: 7)
!3533 = !DILocation(line: 891, column: 7, scope: !3525)
!3534 = !DILocation(line: 892, column: 5, scope: !3532)
!3535 = !DILocation(line: 894, column: 3, scope: !3525)
!3536 = distinct !DISubprogram(name: "gimple_build_omp_continue", scope: !3, file: !3, line: 904, type: !2493, scopeLine: 905, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3537)
!3537 = !{!3538, !3539, !3540}
!3538 = !DILocalVariable(name: "control_def", arg: 1, scope: !3536, file: !3, line: 904, type: !450)
!3539 = !DILocalVariable(name: "control_use", arg: 2, scope: !3536, file: !3, line: 904, type: !450)
!3540 = !DILocalVariable(name: "p", scope: !3536, file: !3, line: 906, type: !379)
!3541 = !DILocation(line: 0, scope: !3536)
!3542 = !DILocation(line: 906, column: 14, scope: !3536)
!3543 = !DILocation(line: 907, column: 3, scope: !3536)
!3544 = !DILocation(line: 908, column: 3, scope: !3536)
!3545 = !DILocation(line: 909, column: 3, scope: !3536)
!3546 = distinct !DISubprogram(name: "gimple_omp_continue_set_control_def", scope: !6, file: !6, line: 4204, type: !2189, scopeLine: 4205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3547)
!3547 = !{!3548, !3549}
!3548 = !DILocalVariable(name: "g", arg: 1, scope: !3546, file: !6, line: 4204, type: !379)
!3549 = !DILocalVariable(name: "def", arg: 2, scope: !3546, file: !6, line: 4204, type: !450)
!3550 = !DILocation(line: 0, scope: !3546)
!3551 = !DILocation(line: 4207, column: 26, scope: !3546)
!3552 = !DILocation(line: 4207, column: 38, scope: !3546)
!3553 = !DILocation(line: 4208, column: 1, scope: !3546)
!3554 = distinct !DISubprogram(name: "gimple_omp_continue_set_control_use", scope: !6, file: !6, line: 4234, type: !2189, scopeLine: 4235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3555)
!3555 = !{!3556, !3557}
!3556 = !DILocalVariable(name: "g", arg: 1, scope: !3554, file: !6, line: 4234, type: !379)
!3557 = !DILocalVariable(name: "use", arg: 2, scope: !3554, file: !6, line: 4234, type: !450)
!3558 = !DILocation(line: 0, scope: !3554)
!3559 = !DILocation(line: 4237, column: 26, scope: !3554)
!3560 = !DILocation(line: 4237, column: 38, scope: !3554)
!3561 = !DILocation(line: 4238, column: 1, scope: !3554)
!3562 = distinct !DISubprogram(name: "gimple_build_omp_ordered", scope: !3, file: !3, line: 918, type: !3119, scopeLine: 919, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3563)
!3563 = !{!3564, !3565}
!3564 = !DILocalVariable(name: "body", arg: 1, scope: !3562, file: !3, line: 918, type: !430)
!3565 = !DILocalVariable(name: "p", scope: !3562, file: !3, line: 920, type: !379)
!3566 = !DILocation(line: 0, scope: !3562)
!3567 = !DILocation(line: 920, column: 14, scope: !3562)
!3568 = !DILocation(line: 921, column: 7, scope: !3569)
!3569 = distinct !DILexicalBlock(scope: !3562, file: !3, line: 921, column: 7)
!3570 = !DILocation(line: 921, column: 7, scope: !3562)
!3571 = !DILocation(line: 922, column: 5, scope: !3569)
!3572 = !DILocation(line: 924, column: 3, scope: !3562)
!3573 = distinct !DISubprogram(name: "gimple_build_omp_return", scope: !3, file: !3, line: 932, type: !3574, scopeLine: 933, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3576)
!3574 = !DISubroutineType(types: !3575)
!3575 = !{!379, !371}
!3576 = !{!3577, !3578}
!3577 = !DILocalVariable(name: "wait_p", arg: 1, scope: !3573, file: !3, line: 932, type: !371)
!3578 = !DILocalVariable(name: "p", scope: !3573, file: !3, line: 934, type: !379)
!3579 = !DILocation(line: 0, scope: !3573)
!3580 = !DILocation(line: 934, column: 14, scope: !3573)
!3581 = !DILocation(line: 935, column: 7, scope: !3582)
!3582 = distinct !DILexicalBlock(scope: !3573, file: !3, line: 935, column: 7)
!3583 = !DILocation(line: 935, column: 7, scope: !3573)
!3584 = !DILocation(line: 936, column: 5, scope: !3582)
!3585 = !DILocation(line: 938, column: 3, scope: !3573)
!3586 = distinct !DISubprogram(name: "gimple_omp_return_set_nowait", scope: !6, file: !6, line: 1529, type: !3587, scopeLine: 1530, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3589)
!3587 = !DISubroutineType(types: !3588)
!3588 = !{null, !379}
!3589 = !{!3590}
!3590 = !DILocalVariable(name: "s", arg: 1, scope: !3586, file: !6, line: 1529, type: !379)
!3591 = !DILocation(line: 0, scope: !3586)
!3592 = !DILocation(line: 1532, column: 13, scope: !3586)
!3593 = !DILocation(line: 1532, column: 21, scope: !3586)
!3594 = !DILocation(line: 1533, column: 1, scope: !3586)
!3595 = distinct !DISubprogram(name: "gimple_build_omp_sections", scope: !3, file: !3, line: 949, type: !3326, scopeLine: 950, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3596)
!3596 = !{!3597, !3598, !3599}
!3597 = !DILocalVariable(name: "body", arg: 1, scope: !3595, file: !3, line: 949, type: !430)
!3598 = !DILocalVariable(name: "clauses", arg: 2, scope: !3595, file: !3, line: 949, type: !450)
!3599 = !DILocalVariable(name: "p", scope: !3595, file: !3, line: 951, type: !379)
!3600 = !DILocation(line: 0, scope: !3595)
!3601 = !DILocation(line: 951, column: 14, scope: !3595)
!3602 = !DILocation(line: 952, column: 7, scope: !3603)
!3603 = distinct !DILexicalBlock(scope: !3595, file: !3, line: 952, column: 7)
!3604 = !DILocation(line: 952, column: 7, scope: !3595)
!3605 = !DILocation(line: 953, column: 5, scope: !3603)
!3606 = !DILocation(line: 954, column: 3, scope: !3595)
!3607 = !DILocation(line: 956, column: 3, scope: !3595)
!3608 = distinct !DISubprogram(name: "gimple_omp_sections_set_clauses", scope: !6, file: !6, line: 4030, type: !2189, scopeLine: 4031, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3609)
!3609 = !{!3610, !3611}
!3610 = !DILocalVariable(name: "gs", arg: 1, scope: !3608, file: !6, line: 4030, type: !379)
!3611 = !DILocalVariable(name: "clauses", arg: 2, scope: !3608, file: !6, line: 4030, type: !450)
!3612 = !DILocation(line: 0, scope: !3608)
!3613 = !DILocation(line: 4033, column: 27, scope: !3608)
!3614 = !DILocation(line: 4033, column: 35, scope: !3608)
!3615 = !DILocation(line: 4034, column: 1, scope: !3608)
!3616 = distinct !DISubprogram(name: "gimple_build_omp_sections_switch", scope: !3, file: !3, line: 963, type: !2789, scopeLine: 964, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1683)
!3617 = !DILocation(line: 965, column: 10, scope: !3616)
!3618 = !DILocation(line: 965, column: 3, scope: !3616)
!3619 = distinct !DISubprogram(name: "gimple_build_omp_single", scope: !3, file: !3, line: 976, type: !3326, scopeLine: 977, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3620)
!3620 = !{!3621, !3622, !3623}
!3621 = !DILocalVariable(name: "body", arg: 1, scope: !3619, file: !3, line: 976, type: !430)
!3622 = !DILocalVariable(name: "clauses", arg: 2, scope: !3619, file: !3, line: 976, type: !450)
!3623 = !DILocalVariable(name: "p", scope: !3619, file: !3, line: 978, type: !379)
!3624 = !DILocation(line: 0, scope: !3619)
!3625 = !DILocation(line: 978, column: 14, scope: !3619)
!3626 = !DILocation(line: 979, column: 7, scope: !3627)
!3627 = distinct !DILexicalBlock(scope: !3619, file: !3, line: 979, column: 7)
!3628 = !DILocation(line: 979, column: 7, scope: !3619)
!3629 = !DILocation(line: 980, column: 5, scope: !3627)
!3630 = !DILocation(line: 981, column: 3, scope: !3619)
!3631 = !DILocation(line: 983, column: 3, scope: !3619)
!3632 = distinct !DISubprogram(name: "gimple_omp_single_set_clauses", scope: !6, file: !6, line: 3999, type: !2189, scopeLine: 4000, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3633)
!3633 = !{!3634, !3635}
!3634 = !DILocalVariable(name: "gs", arg: 1, scope: !3632, file: !6, line: 3999, type: !379)
!3635 = !DILocalVariable(name: "clauses", arg: 2, scope: !3632, file: !6, line: 3999, type: !450)
!3636 = !DILocation(line: 0, scope: !3632)
!3637 = !DILocation(line: 4002, column: 25, scope: !3632)
!3638 = !DILocation(line: 4002, column: 33, scope: !3632)
!3639 = !DILocation(line: 4003, column: 1, scope: !3632)
!3640 = distinct !DISubprogram(name: "gimple_build_omp_atomic_load", scope: !3, file: !3, line: 990, type: !2493, scopeLine: 991, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3641)
!3641 = !{!3642, !3643, !3644}
!3642 = !DILocalVariable(name: "lhs", arg: 1, scope: !3640, file: !3, line: 990, type: !450)
!3643 = !DILocalVariable(name: "rhs", arg: 2, scope: !3640, file: !3, line: 990, type: !450)
!3644 = !DILocalVariable(name: "p", scope: !3640, file: !3, line: 992, type: !379)
!3645 = !DILocation(line: 0, scope: !3640)
!3646 = !DILocation(line: 992, column: 14, scope: !3640)
!3647 = !DILocation(line: 993, column: 3, scope: !3640)
!3648 = !DILocation(line: 994, column: 3, scope: !3640)
!3649 = !DILocation(line: 995, column: 3, scope: !3640)
!3650 = distinct !DISubprogram(name: "gimple_omp_atomic_load_set_lhs", scope: !6, file: !6, line: 4126, type: !2189, scopeLine: 4127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3651)
!3651 = !{!3652, !3653}
!3652 = !DILocalVariable(name: "g", arg: 1, scope: !3650, file: !6, line: 4126, type: !379)
!3653 = !DILocalVariable(name: "lhs", arg: 2, scope: !3650, file: !6, line: 4126, type: !450)
!3654 = !DILocation(line: 0, scope: !3650)
!3655 = !DILocation(line: 4129, column: 29, scope: !3650)
!3656 = !DILocation(line: 4129, column: 33, scope: !3650)
!3657 = !DILocation(line: 4130, column: 1, scope: !3650)
!3658 = distinct !DISubprogram(name: "gimple_omp_atomic_load_set_rhs", scope: !6, file: !6, line: 4156, type: !2189, scopeLine: 4157, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3659)
!3659 = !{!3660, !3661}
!3660 = !DILocalVariable(name: "g", arg: 1, scope: !3658, file: !6, line: 4156, type: !379)
!3661 = !DILocalVariable(name: "rhs", arg: 2, scope: !3658, file: !6, line: 4156, type: !450)
!3662 = !DILocation(line: 0, scope: !3658)
!3663 = !DILocation(line: 4159, column: 29, scope: !3658)
!3664 = !DILocation(line: 4159, column: 33, scope: !3658)
!3665 = !DILocation(line: 4160, column: 1, scope: !3658)
!3666 = distinct !DISubprogram(name: "gimple_build_omp_atomic_store", scope: !3, file: !3, line: 1003, type: !2164, scopeLine: 1004, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3667)
!3667 = !{!3668, !3669}
!3668 = !DILocalVariable(name: "val", arg: 1, scope: !3666, file: !3, line: 1003, type: !450)
!3669 = !DILocalVariable(name: "p", scope: !3666, file: !3, line: 1005, type: !379)
!3670 = !DILocation(line: 0, scope: !3666)
!3671 = !DILocation(line: 1005, column: 14, scope: !3666)
!3672 = !DILocation(line: 1006, column: 3, scope: !3666)
!3673 = !DILocation(line: 1007, column: 3, scope: !3666)
!3674 = distinct !DISubprogram(name: "gimple_omp_atomic_store_set_val", scope: !6, file: !6, line: 4096, type: !2189, scopeLine: 4097, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3675)
!3675 = !{!3676, !3677}
!3676 = !DILocalVariable(name: "g", arg: 1, scope: !3674, file: !6, line: 4096, type: !379)
!3677 = !DILocalVariable(name: "val", arg: 2, scope: !3674, file: !6, line: 4096, type: !450)
!3678 = !DILocation(line: 0, scope: !3674)
!3679 = !DILocation(line: 4099, column: 30, scope: !3674)
!3680 = !DILocation(line: 4099, column: 34, scope: !3674)
!3681 = !DILocation(line: 4100, column: 1, scope: !3674)
!3682 = distinct !DISubprogram(name: "gimple_build_predict", scope: !3, file: !3, line: 1014, type: !3683, scopeLine: 1015, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3685)
!3683 = !DISubroutineType(types: !3684)
!3684 = !{!379, !326, !358}
!3685 = !{!3686, !3687, !3688}
!3686 = !DILocalVariable(name: "predictor", arg: 1, scope: !3682, file: !3, line: 1014, type: !326)
!3687 = !DILocalVariable(name: "outcome", arg: 2, scope: !3682, file: !3, line: 1014, type: !358)
!3688 = !DILocalVariable(name: "p", scope: !3682, file: !3, line: 1016, type: !379)
!3689 = !DILocation(line: 0, scope: !3682)
!3690 = !DILocation(line: 1016, column: 14, scope: !3682)
!3691 = !DILocation(line: 1019, column: 3, scope: !3682)
!3692 = !DILocation(line: 1020, column: 3, scope: !3682)
!3693 = !DILocation(line: 1021, column: 3, scope: !3682)
!3694 = distinct !DISubprogram(name: "gimple_predict_set_predictor", scope: !6, file: !6, line: 4331, type: !3695, scopeLine: 4332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3697)
!3695 = !DISubroutineType(types: !3696)
!3696 = !{null, !379, !326}
!3697 = !{!3698, !3699}
!3698 = !DILocalVariable(name: "gs", arg: 1, scope: !3694, file: !6, line: 4331, type: !379)
!3699 = !DILocalVariable(name: "predictor", arg: 2, scope: !3694, file: !6, line: 4331, type: !326)
!3700 = !DILocation(line: 0, scope: !3694)
!3701 = !DILocation(line: 4334, column: 36, scope: !3694)
!3702 = !DILocation(line: 4334, column: 22, scope: !3694)
!3703 = !DILocation(line: 4336, column: 1, scope: !3694)
!3704 = distinct !DISubprogram(name: "gimple_predict_set_outcome", scope: !6, file: !6, line: 4352, type: !3705, scopeLine: 4353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3707)
!3705 = !DISubroutineType(types: !3706)
!3706 = !{null, !379, !358}
!3707 = !{!3708, !3709}
!3708 = !DILocalVariable(name: "gs", arg: 1, scope: !3704, file: !6, line: 4352, type: !379)
!3709 = !DILocalVariable(name: "outcome", arg: 2, scope: !3704, file: !6, line: 4352, type: !358)
!3710 = !DILocation(line: 0, scope: !3704)
!3711 = !DILocation(line: 4355, column: 15, scope: !3712)
!3712 = distinct !DILexicalBlock(scope: !3704, file: !6, line: 4355, column: 7)
!3713 = !DILocation(line: 0, scope: !3712)
!3714 = !DILocation(line: 4355, column: 7, scope: !3704)
!3715 = !DILocation(line: 4356, column: 24, scope: !3712)
!3716 = !DILocation(line: 4356, column: 5, scope: !3712)
!3717 = !DILocation(line: 4358, column: 24, scope: !3712)
!3718 = !DILocation(line: 4359, column: 1, scope: !3704)
!3719 = distinct !DISubprogram(name: "gimple_seq_alloc", scope: !3, file: !3, line: 1049, type: !3720, scopeLine: 1050, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3722)
!3720 = !DISubroutineType(types: !3721)
!3721 = !{!430}
!3722 = !{!3723}
!3723 = !DILocalVariable(name: "seq", scope: !3719, file: !3, line: 1051, type: !430)
!3724 = !DILocation(line: 1051, column: 20, scope: !3719)
!3725 = !DILocation(line: 0, scope: !3719)
!3726 = !DILocation(line: 1052, column: 7, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3719, file: !3, line: 1052, column: 7)
!3728 = !DILocation(line: 1052, column: 7, scope: !3719)
!3729 = !DILocation(line: 1054, column: 44, scope: !3730)
!3730 = distinct !DILexicalBlock(scope: !3727, file: !3, line: 1053, column: 5)
!3731 = !DILocation(line: 1054, column: 24, scope: !3730)
!3732 = !DILocation(line: 1055, column: 7, scope: !3730)
!3733 = !DILocation(line: 1056, column: 15, scope: !3730)
!3734 = !DILocation(line: 1056, column: 7, scope: !3730)
!3735 = !DILocation(line: 1057, column: 5, scope: !3730)
!3736 = !DILocation(line: 1060, column: 26, scope: !3737)
!3737 = distinct !DILexicalBlock(scope: !3727, file: !3, line: 1059, column: 5)
!3738 = !DILocation(line: 1060, column: 13, scope: !3737)
!3739 = !DILocation(line: 1067, column: 3, scope: !3719)
!3740 = distinct !DISubprogram(name: "gimple_seq_free", scope: !3, file: !3, line: 1073, type: !3741, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3743)
!3741 = !DISubroutineType(types: !3742)
!3742 = !{null, !430}
!3743 = !{!3744}
!3744 = !DILocalVariable(name: "seq", arg: 1, scope: !3740, file: !3, line: 1073, type: !430)
!3745 = !DILocation(line: 0, scope: !3740)
!3746 = !DILocation(line: 1075, column: 11, scope: !3747)
!3747 = distinct !DILexicalBlock(scope: !3740, file: !3, line: 1075, column: 7)
!3748 = !DILocation(line: 1075, column: 7, scope: !3740)
!3749 = !DILocation(line: 1078, column: 3, scope: !3740)
!3750 = !DILocation(line: 1079, column: 3, scope: !3740)
!3751 = !DILocation(line: 1083, column: 3, scope: !3740)
!3752 = !DILocation(line: 1086, column: 20, scope: !3740)
!3753 = !DILocation(line: 1086, column: 8, scope: !3740)
!3754 = !DILocation(line: 1086, column: 18, scope: !3740)
!3755 = !DILocation(line: 1087, column: 20, scope: !3740)
!3756 = !DILocation(line: 1088, column: 1, scope: !3740)
!3757 = distinct !DISubprogram(name: "gimple_seq_first", scope: !6, file: !6, line: 159, type: !3758, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3760)
!3758 = !DISubroutineType(types: !3759)
!3759 = !{!435, !2599}
!3760 = !{!3761}
!3761 = !DILocalVariable(name: "s", arg: 1, scope: !3757, file: !6, line: 159, type: !2599)
!3762 = !DILocation(line: 0, scope: !3757)
!3763 = !DILocation(line: 161, column: 10, scope: !3757)
!3764 = !DILocation(line: 161, column: 17, scope: !3757)
!3765 = !DILocation(line: 161, column: 3, scope: !3757)
!3766 = distinct !DISubprogram(name: "gimple_seq_last", scope: !6, file: !6, line: 178, type: !3758, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3767)
!3767 = !{!3768}
!3768 = !DILocalVariable(name: "s", arg: 1, scope: !3766, file: !6, line: 178, type: !2599)
!3769 = !DILocation(line: 0, scope: !3766)
!3770 = !DILocation(line: 180, column: 10, scope: !3766)
!3771 = !DILocation(line: 180, column: 17, scope: !3766)
!3772 = !DILocation(line: 180, column: 3, scope: !3766)
!3773 = distinct !DISubprogram(name: "gimple_seq_add_stmt", scope: !3, file: !3, line: 1095, type: !3774, scopeLine: 1096, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3776)
!3774 = !DISubroutineType(types: !3775)
!3775 = !{null, !2582, !379}
!3776 = !{!3777, !3778, !3779}
!3777 = !DILocalVariable(name: "seq_p", arg: 1, scope: !3773, file: !3, line: 1095, type: !2582)
!3778 = !DILocalVariable(name: "gs", arg: 2, scope: !3773, file: !3, line: 1095, type: !379)
!3779 = !DILocalVariable(name: "si", scope: !3773, file: !3, line: 1097, type: !1588)
!3780 = !DILocation(line: 0, scope: !3773)
!3781 = !DILocation(line: 1097, column: 3, scope: !3773)
!3782 = !DILocation(line: 1099, column: 10, scope: !3783)
!3783 = distinct !DILexicalBlock(scope: !3773, file: !3, line: 1099, column: 7)
!3784 = !DILocation(line: 1099, column: 7, scope: !3773)
!3785 = !DILocation(line: 1102, column: 7, scope: !3786)
!3786 = distinct !DILexicalBlock(scope: !3773, file: !3, line: 1102, column: 7)
!3787 = !DILocation(line: 1102, column: 14, scope: !3786)
!3788 = !DILocation(line: 1102, column: 7, scope: !3773)
!3789 = !DILocation(line: 1103, column: 14, scope: !3786)
!3790 = !DILocation(line: 1103, column: 12, scope: !3786)
!3791 = !DILocation(line: 1103, column: 5, scope: !3786)
!3792 = !DILocation(line: 1105, column: 18, scope: !3773)
!3793 = !DILocation(line: 1105, column: 8, scope: !3773)
!3794 = !DILocation(line: 1106, column: 3, scope: !3773)
!3795 = !DILocation(line: 1107, column: 1, scope: !3773)
!3796 = distinct !DISubprogram(name: "gsi_last", scope: !6, file: !6, line: 4435, type: !3797, scopeLine: 4436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3799)
!3797 = !DISubroutineType(types: !3798)
!3798 = !{!1588, !430}
!3799 = !{!3800, !3801}
!3800 = !DILocalVariable(name: "seq", arg: 1, scope: !3796, file: !6, line: 4435, type: !430)
!3801 = !DILocalVariable(name: "i", scope: !3796, file: !6, line: 4437, type: !1588)
!3802 = !DILocation(line: 0, scope: !3796)
!3803 = !DILocation(line: 4437, column: 24, scope: !3796)
!3804 = !DILocation(line: 4439, column: 11, scope: !3796)
!3805 = !DILocation(line: 4439, column: 5, scope: !3796)
!3806 = !DILocation(line: 4439, column: 9, scope: !3796)
!3807 = !DILocation(line: 4440, column: 5, scope: !3796)
!3808 = !DILocation(line: 4440, column: 9, scope: !3796)
!3809 = !DILocation(line: 4441, column: 11, scope: !3796)
!3810 = !DILocation(line: 4441, column: 17, scope: !3796)
!3811 = !DILocation(line: 4441, column: 27, scope: !3796)
!3812 = !DILocation(line: 4441, column: 20, scope: !3796)
!3813 = !DILocation(line: 4441, column: 10, scope: !3796)
!3814 = !DILocation(line: 4441, column: 35, scope: !3796)
!3815 = !DILocation(line: 4441, column: 5, scope: !3796)
!3816 = !DILocation(line: 4441, column: 8, scope: !3796)
!3817 = !DILocation(line: 4443, column: 3, scope: !3796)
!3818 = distinct !DISubprogram(name: "gimple_seq_add_seq", scope: !3, file: !3, line: 1114, type: !3819, scopeLine: 1115, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3821)
!3819 = !DISubroutineType(types: !3820)
!3820 = !{null, !2582, !430}
!3821 = !{!3822, !3823, !3824}
!3822 = !DILocalVariable(name: "dst_p", arg: 1, scope: !3818, file: !3, line: 1114, type: !2582)
!3823 = !DILocalVariable(name: "src", arg: 2, scope: !3818, file: !3, line: 1114, type: !430)
!3824 = !DILocalVariable(name: "si", scope: !3818, file: !3, line: 1116, type: !1588)
!3825 = !DILocation(line: 0, scope: !3818)
!3826 = !DILocation(line: 1116, column: 3, scope: !3818)
!3827 = !DILocation(line: 1118, column: 11, scope: !3828)
!3828 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 1118, column: 7)
!3829 = !DILocation(line: 1118, column: 7, scope: !3818)
!3830 = !DILocation(line: 1121, column: 7, scope: !3831)
!3831 = distinct !DILexicalBlock(scope: !3818, file: !3, line: 1121, column: 7)
!3832 = !DILocation(line: 1121, column: 14, scope: !3831)
!3833 = !DILocation(line: 1121, column: 7, scope: !3818)
!3834 = !DILocation(line: 1122, column: 14, scope: !3831)
!3835 = !DILocation(line: 1122, column: 12, scope: !3831)
!3836 = !DILocation(line: 1122, column: 5, scope: !3831)
!3837 = !DILocation(line: 1124, column: 18, scope: !3818)
!3838 = !DILocation(line: 1124, column: 8, scope: !3818)
!3839 = !DILocation(line: 1125, column: 3, scope: !3818)
!3840 = !DILocation(line: 1126, column: 1, scope: !3818)
!3841 = distinct !DISubprogram(name: "empty_body_p", scope: !3, file: !3, line: 1146, type: !3842, scopeLine: 1147, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3844)
!3842 = !DISubroutineType(types: !3843)
!3843 = !{!371, !430}
!3844 = !{!3845, !3846}
!3845 = !DILocalVariable(name: "body", arg: 1, scope: !3841, file: !3, line: 1146, type: !430)
!3846 = !DILocalVariable(name: "i", scope: !3841, file: !3, line: 1148, type: !1588)
!3847 = !DILocation(line: 0, scope: !3841)
!3848 = !DILocation(line: 1148, column: 3, scope: !3841)
!3849 = !DILocation(line: 1150, column: 7, scope: !3850)
!3850 = distinct !DILexicalBlock(scope: !3841, file: !3, line: 1150, column: 7)
!3851 = !DILocation(line: 1150, column: 7, scope: !3841)
!3852 = !DILocation(line: 1152, column: 12, scope: !3853)
!3853 = distinct !DILexicalBlock(scope: !3841, file: !3, line: 1152, column: 3)
!3854 = !DILocation(line: 1152, column: 8, scope: !3853)
!3855 = !DILocation(line: 1152, column: 31, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !3853, file: !3, line: 1152, column: 3)
!3857 = !DILocation(line: 1152, column: 30, scope: !3856)
!3858 = !DILocation(line: 1152, column: 3, scope: !3853)
!3859 = !DILocation(line: 1153, column: 24, scope: !3860)
!3860 = distinct !DILexicalBlock(scope: !3856, file: !3, line: 1153, column: 9)
!3861 = !DILocation(line: 1153, column: 10, scope: !3860)
!3862 = !DILocation(line: 1154, column: 2, scope: !3860)
!3863 = !DILocation(line: 1154, column: 23, scope: !3860)
!3864 = !DILocation(line: 1154, column: 6, scope: !3860)
!3865 = !DILocation(line: 1153, column: 9, scope: !3856)
!3866 = !DILocation(line: 1152, column: 46, scope: !3856)
!3867 = !DILocation(line: 1152, column: 3, scope: !3856)
!3868 = distinct !{!3868, !3858, !3869}
!3869 = !DILocation(line: 1155, column: 14, scope: !3853)
!3870 = !DILocation(line: 1158, column: 1, scope: !3841)
!3871 = distinct !DISubprogram(name: "gimple_seq_empty_p", scope: !6, file: !6, line: 215, type: !3872, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3874)
!3872 = !DISubroutineType(types: !3873)
!3873 = !{!371, !2599}
!3874 = !{!3875}
!3875 = !DILocalVariable(name: "s", arg: 1, scope: !3871, file: !6, line: 215, type: !2599)
!3876 = !DILocation(line: 0, scope: !3871)
!3877 = !DILocation(line: 217, column: 12, scope: !3871)
!3878 = !DILocation(line: 217, column: 20, scope: !3871)
!3879 = !DILocation(line: 217, column: 26, scope: !3871)
!3880 = !DILocation(line: 217, column: 32, scope: !3871)
!3881 = !DILocation(line: 217, column: 3, scope: !3871)
!3882 = distinct !DISubprogram(name: "gsi_start", scope: !6, file: !6, line: 4403, type: !3797, scopeLine: 4404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3883)
!3883 = !{!3884, !3885}
!3884 = !DILocalVariable(name: "seq", arg: 1, scope: !3882, file: !6, line: 4403, type: !430)
!3885 = !DILocalVariable(name: "i", scope: !3882, file: !6, line: 4405, type: !1588)
!3886 = !DILocation(line: 0, scope: !3882)
!3887 = !DILocation(line: 4405, column: 24, scope: !3882)
!3888 = !DILocation(line: 4407, column: 11, scope: !3882)
!3889 = !DILocation(line: 4407, column: 5, scope: !3882)
!3890 = !DILocation(line: 4407, column: 9, scope: !3882)
!3891 = !DILocation(line: 4408, column: 5, scope: !3882)
!3892 = !DILocation(line: 4408, column: 9, scope: !3882)
!3893 = !DILocation(line: 4409, column: 11, scope: !3882)
!3894 = !DILocation(line: 4409, column: 17, scope: !3882)
!3895 = !DILocation(line: 4409, column: 27, scope: !3882)
!3896 = !DILocation(line: 4409, column: 20, scope: !3882)
!3897 = !DILocation(line: 4409, column: 10, scope: !3882)
!3898 = !DILocation(line: 4409, column: 35, scope: !3882)
!3899 = !DILocation(line: 4409, column: 5, scope: !3882)
!3900 = !DILocation(line: 4409, column: 8, scope: !3882)
!3901 = !DILocation(line: 4411, column: 3, scope: !3882)
!3902 = distinct !DISubprogram(name: "gsi_end_p", scope: !6, file: !6, line: 4467, type: !3903, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3905)
!3903 = !DISubroutineType(types: !3904)
!3904 = !{!371, !1588}
!3905 = !{!3906}
!3906 = !DILocalVariable(name: "i", arg: 1, scope: !3902, file: !6, line: 4467, type: !1588)
!3907 = !DILocation(line: 4467, column: 33, scope: !3902)
!3908 = !DILocation(line: 4469, column: 12, scope: !3902)
!3909 = !DILocation(line: 4469, column: 16, scope: !3902)
!3910 = !DILocation(line: 4469, column: 10, scope: !3902)
!3911 = !DILocation(line: 4469, column: 3, scope: !3902)
!3912 = distinct !DISubprogram(name: "empty_stmt_p", scope: !3, file: !3, line: 1133, type: !3913, scopeLine: 1134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3915)
!3913 = !DISubroutineType(types: !3914)
!3914 = !{!371, !379}
!3915 = !{!3916}
!3916 = !DILocalVariable(name: "stmt", arg: 1, scope: !3912, file: !3, line: 1133, type: !379)
!3917 = !DILocation(line: 0, scope: !3912)
!3918 = !DILocation(line: 1135, column: 7, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 1135, column: 7)
!3920 = !DILocation(line: 1135, column: 26, scope: !3919)
!3921 = !DILocation(line: 1135, column: 7, scope: !3912)
!3922 = !DILocation(line: 1137, column: 7, scope: !3923)
!3923 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 1137, column: 7)
!3924 = !DILocation(line: 1137, column: 26, scope: !3923)
!3925 = !DILocation(line: 1137, column: 7, scope: !3912)
!3926 = !DILocation(line: 1138, column: 26, scope: !3923)
!3927 = !DILocation(line: 1138, column: 12, scope: !3923)
!3928 = !DILocation(line: 1138, column: 5, scope: !3923)
!3929 = !DILocation(line: 1140, column: 1, scope: !3912)
!3930 = distinct !DISubprogram(name: "gsi_stmt", scope: !6, file: !6, line: 4501, type: !3931, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3933)
!3931 = !DISubroutineType(types: !3932)
!3932 = !{!379, !1588}
!3933 = !{!3934}
!3934 = !DILocalVariable(name: "i", arg: 1, scope: !3930, file: !6, line: 4501, type: !1588)
!3935 = !DILocation(line: 4501, column: 32, scope: !3930)
!3936 = !DILocation(line: 4503, column: 12, scope: !3930)
!3937 = !DILocation(line: 4503, column: 17, scope: !3930)
!3938 = !DILocation(line: 4503, column: 3, scope: !3930)
!3939 = distinct !DISubprogram(name: "is_gimple_debug", scope: !6, file: !6, line: 3249, type: !3940, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3942)
!3940 = !DISubroutineType(types: !3941)
!3941 = !{!371, !3301}
!3942 = !{!3943}
!3943 = !DILocalVariable(name: "gs", arg: 1, scope: !3939, file: !6, line: 3249, type: !3301)
!3944 = !DILocation(line: 0, scope: !3939)
!3945 = !DILocation(line: 3251, column: 10, scope: !3939)
!3946 = !DILocation(line: 3251, column: 27, scope: !3939)
!3947 = !DILocation(line: 3251, column: 3, scope: !3939)
!3948 = distinct !DISubprogram(name: "gsi_next", scope: !6, file: !6, line: 4485, type: !3949, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3952)
!3949 = !DISubroutineType(types: !3950)
!3950 = !{null, !3951}
!3951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1588, size: 64)
!3952 = !{!3953}
!3953 = !DILocalVariable(name: "i", arg: 1, scope: !3948, file: !6, line: 4485, type: !3951)
!3954 = !DILocation(line: 0, scope: !3948)
!3955 = !DILocation(line: 4487, column: 15, scope: !3948)
!3956 = !DILocation(line: 4487, column: 20, scope: !3948)
!3957 = !DILocation(line: 4487, column: 10, scope: !3948)
!3958 = !DILocation(line: 4488, column: 1, scope: !3948)
!3959 = distinct !DISubprogram(name: "gimple_seq_copy", scope: !3, file: !3, line: 1164, type: !3960, scopeLine: 1165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3962)
!3960 = !DISubroutineType(types: !3961)
!3961 = !{!430, !430}
!3962 = !{!3963, !3964, !3965, !3966}
!3963 = !DILocalVariable(name: "src", arg: 1, scope: !3959, file: !3, line: 1164, type: !430)
!3964 = !DILocalVariable(name: "gsi", scope: !3959, file: !3, line: 1166, type: !1588)
!3965 = !DILocalVariable(name: "new_seq", scope: !3959, file: !3, line: 1167, type: !430)
!3966 = !DILocalVariable(name: "stmt", scope: !3959, file: !3, line: 1168, type: !379)
!3967 = !DILocation(line: 0, scope: !3959)
!3968 = !DILocation(line: 1166, column: 3, scope: !3959)
!3969 = !DILocation(line: 1167, column: 3, scope: !3959)
!3970 = !DILocation(line: 1167, column: 24, scope: !3959)
!3971 = !DILocation(line: 1167, column: 14, scope: !3959)
!3972 = !DILocation(line: 1170, column: 14, scope: !3973)
!3973 = distinct !DILexicalBlock(scope: !3959, file: !3, line: 1170, column: 3)
!3974 = !DILocation(line: 1170, column: 8, scope: !3973)
!3975 = !DILocation(line: 1170, column: 32, scope: !3976)
!3976 = distinct !DILexicalBlock(scope: !3973, file: !3, line: 1170, column: 3)
!3977 = !DILocation(line: 1170, column: 31, scope: !3976)
!3978 = !DILocation(line: 1170, column: 3, scope: !3973)
!3979 = !DILocation(line: 1172, column: 27, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3976, file: !3, line: 1171, column: 5)
!3981 = !DILocation(line: 1172, column: 14, scope: !3980)
!3982 = !DILocation(line: 1173, column: 7, scope: !3980)
!3983 = !DILocation(line: 1170, column: 49, scope: !3976)
!3984 = !DILocation(line: 1170, column: 3, scope: !3976)
!3985 = distinct !{!3985, !3978, !3986}
!3986 = !DILocation(line: 1174, column: 5, scope: !3973)
!3987 = !DILocation(line: 1176, column: 10, scope: !3959)
!3988 = !DILocation(line: 1177, column: 1, scope: !3959)
!3989 = !DILocation(line: 1176, column: 3, scope: !3959)
!3990 = distinct !DISubprogram(name: "gimple_copy", scope: !3, file: !3, line: 1975, type: !3991, scopeLine: 1976, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3993)
!3991 = !DISubroutineType(types: !3992)
!3992 = !{!379, !379}
!3993 = !{!3994, !3995, !3996, !3997, !3998, !3999, !4002, !4003}
!3994 = !DILocalVariable(name: "stmt", arg: 1, scope: !3990, file: !3, line: 1975, type: !379)
!3995 = !DILocalVariable(name: "code", scope: !3990, file: !3, line: 1977, type: !276)
!3996 = !DILocalVariable(name: "num_ops", scope: !3990, file: !3, line: 1978, type: !7)
!3997 = !DILocalVariable(name: "copy", scope: !3990, file: !3, line: 1979, type: !379)
!3998 = !DILocalVariable(name: "i", scope: !3990, file: !3, line: 1980, type: !7)
!3999 = !DILocalVariable(name: "new_seq", scope: !4000, file: !3, line: 1988, type: !430)
!4000 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 1987, column: 5)
!4001 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 1986, column: 7)
!4002 = !DILocalVariable(name: "t", scope: !4000, file: !3, line: 1989, type: !450)
!4003 = !DILabel(scope: !4004, name: "copy_omp_body", file: !3, line: 2084)
!4004 = distinct !DILexicalBlock(scope: !4000, file: !3, line: 1992, column: 2)
!4005 = !DILocation(line: 0, scope: !3990)
!4006 = !DILocation(line: 1977, column: 27, scope: !3990)
!4007 = !DILocation(line: 1978, column: 22, scope: !3990)
!4008 = !DILocation(line: 1979, column: 17, scope: !3990)
!4009 = !DILocation(line: 1983, column: 11, scope: !3990)
!4010 = !DILocation(line: 1983, column: 17, scope: !3990)
!4011 = !DILocation(line: 1983, column: 23, scope: !3990)
!4012 = !DILocation(line: 1983, column: 3, scope: !3990)
!4013 = !DILocation(line: 1986, column: 7, scope: !4001)
!4014 = !DILocation(line: 1986, column: 7, scope: !3990)
!4015 = !DILocation(line: 1991, column: 15, scope: !4000)
!4016 = !DILocation(line: 1991, column: 7, scope: !4000)
!4017 = !DILocation(line: 1994, column: 31, scope: !4004)
!4018 = !DILocation(line: 1994, column: 14, scope: !4004)
!4019 = !DILocation(line: 0, scope: !4000)
!4020 = !DILocation(line: 1995, column: 4, scope: !4004)
!4021 = !DILocation(line: 1996, column: 46, scope: !4004)
!4022 = !DILocation(line: 1996, column: 32, scope: !4004)
!4023 = !DILocation(line: 1996, column: 4, scope: !4004)
!4024 = !DILocation(line: 1997, column: 33, scope: !4004)
!4025 = !DILocation(line: 1997, column: 4, scope: !4004)
!4026 = !DILocation(line: 1998, column: 4, scope: !4004)
!4027 = !DILocation(line: 2001, column: 31, scope: !4004)
!4028 = !DILocation(line: 2001, column: 14, scope: !4004)
!4029 = !DILocation(line: 2002, column: 4, scope: !4004)
!4030 = !DILocation(line: 2003, column: 22, scope: !4004)
!4031 = !DILocation(line: 2003, column: 8, scope: !4004)
!4032 = !DILocation(line: 2004, column: 4, scope: !4004)
!4033 = !DILocation(line: 2005, column: 4, scope: !4004)
!4034 = !DILocation(line: 2008, column: 31, scope: !4004)
!4035 = !DILocation(line: 2008, column: 14, scope: !4004)
!4036 = !DILocation(line: 2009, column: 4, scope: !4004)
!4037 = !DILocation(line: 2010, column: 22, scope: !4004)
!4038 = !DILocation(line: 2010, column: 8, scope: !4004)
!4039 = !DILocation(line: 2011, column: 4, scope: !4004)
!4040 = !DILocation(line: 2012, column: 4, scope: !4004)
!4041 = !DILocation(line: 2015, column: 31, scope: !4004)
!4042 = !DILocation(line: 2015, column: 14, scope: !4004)
!4043 = !DILocation(line: 2016, column: 4, scope: !4004)
!4044 = !DILocation(line: 2017, column: 31, scope: !4004)
!4045 = !DILocation(line: 2017, column: 14, scope: !4004)
!4046 = !DILocation(line: 2018, column: 4, scope: !4004)
!4047 = !DILocation(line: 2019, column: 4, scope: !4004)
!4048 = !DILocation(line: 2022, column: 31, scope: !4004)
!4049 = !DILocation(line: 2022, column: 14, scope: !4004)
!4050 = !DILocation(line: 2023, column: 4, scope: !4004)
!4051 = !DILocation(line: 2024, column: 22, scope: !4004)
!4052 = !DILocation(line: 2024, column: 8, scope: !4004)
!4053 = !DILocation(line: 2025, column: 4, scope: !4004)
!4054 = !DILocation(line: 2027, column: 8, scope: !4004)
!4055 = !DILocation(line: 2026, column: 25, scope: !4004)
!4056 = !DILocation(line: 2027, column: 6, scope: !4004)
!4057 = !DILocation(line: 2029, column: 9, scope: !4058)
!4058 = distinct !DILexicalBlock(scope: !4004, file: !3, line: 2029, column: 4)
!4059 = !DILocation(line: 0, scope: !4058)
!4060 = !DILocation(line: 2029, column: 16, scope: !4061)
!4061 = distinct !DILexicalBlock(scope: !4058, file: !3, line: 2029, column: 4)
!4062 = !DILocation(line: 2029, column: 20, scope: !4061)
!4063 = !DILocation(line: 2029, column: 18, scope: !4061)
!4064 = !DILocation(line: 2029, column: 4, scope: !4058)
!4065 = !DILocation(line: 2032, column: 12, scope: !4066)
!4066 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 2030, column: 6)
!4067 = !DILocation(line: 2031, column: 8, scope: !4066)
!4068 = !DILocation(line: 2034, column: 6, scope: !4066)
!4069 = !DILocation(line: 2033, column: 8, scope: !4066)
!4070 = !DILocation(line: 2035, column: 26, scope: !4066)
!4071 = !DILocation(line: 2035, column: 12, scope: !4066)
!4072 = !DILocation(line: 2036, column: 8, scope: !4066)
!4073 = !DILocation(line: 2037, column: 26, scope: !4066)
!4074 = !DILocation(line: 2037, column: 12, scope: !4066)
!4075 = !DILocation(line: 2038, column: 8, scope: !4066)
!4076 = !DILocation(line: 2039, column: 26, scope: !4066)
!4077 = !DILocation(line: 2039, column: 12, scope: !4066)
!4078 = !DILocation(line: 2040, column: 8, scope: !4066)
!4079 = !DILocation(line: 2029, column: 53, scope: !4061)
!4080 = !DILocation(line: 2029, column: 4, scope: !4061)
!4081 = distinct !{!4081, !4064, !4082}
!4082 = !DILocation(line: 2041, column: 6, scope: !4058)
!4083 = !DILocation(line: 2045, column: 22, scope: !4004)
!4084 = !DILocation(line: 2045, column: 8, scope: !4004)
!4085 = !DILocation(line: 2046, column: 4, scope: !4004)
!4086 = !DILocation(line: 2047, column: 22, scope: !4004)
!4087 = !DILocation(line: 2047, column: 8, scope: !4004)
!4088 = !DILocation(line: 2048, column: 4, scope: !4004)
!4089 = !DILocation(line: 2049, column: 22, scope: !4004)
!4090 = !DILocation(line: 2049, column: 8, scope: !4004)
!4091 = !DILocation(line: 2050, column: 4, scope: !4004)
!4092 = !DILocation(line: 2051, column: 4, scope: !4004)
!4093 = !DILocation(line: 2054, column: 22, scope: !4004)
!4094 = !DILocation(line: 2054, column: 8, scope: !4004)
!4095 = !DILocation(line: 2055, column: 4, scope: !4004)
!4096 = !DILocation(line: 2056, column: 22, scope: !4004)
!4097 = !DILocation(line: 2056, column: 8, scope: !4004)
!4098 = !DILocation(line: 2057, column: 4, scope: !4004)
!4099 = !DILocation(line: 2058, column: 22, scope: !4004)
!4100 = !DILocation(line: 2058, column: 8, scope: !4004)
!4101 = !DILocation(line: 2059, column: 4, scope: !4004)
!4102 = !DILocation(line: 2060, column: 22, scope: !4004)
!4103 = !DILocation(line: 2060, column: 8, scope: !4004)
!4104 = !DILocation(line: 2061, column: 4, scope: !4004)
!4105 = !DILocation(line: 2062, column: 22, scope: !4004)
!4106 = !DILocation(line: 2062, column: 8, scope: !4004)
!4107 = !DILocation(line: 2063, column: 4, scope: !4004)
!4108 = !DILocation(line: 2064, column: 22, scope: !4004)
!4109 = !DILocation(line: 2064, column: 8, scope: !4004)
!4110 = !DILocation(line: 2065, column: 4, scope: !4004)
!4111 = !DILocation(line: 2066, column: 4, scope: !4004)
!4112 = !DILocation(line: 2069, column: 22, scope: !4004)
!4113 = !DILocation(line: 2069, column: 8, scope: !4004)
!4114 = !DILocation(line: 2070, column: 4, scope: !4004)
!4115 = !DILocation(line: 2071, column: 4, scope: !4004)
!4116 = !DILocation(line: 2074, column: 22, scope: !4004)
!4117 = !DILocation(line: 2074, column: 8, scope: !4004)
!4118 = !DILocation(line: 2075, column: 4, scope: !4004)
!4119 = !DILocation(line: 2076, column: 22, scope: !4004)
!4120 = !DILocation(line: 2076, column: 8, scope: !4004)
!4121 = !DILocation(line: 2077, column: 4, scope: !4004)
!4122 = !DILocation(line: 2085, column: 31, scope: !4004)
!4123 = !DILocation(line: 2084, column: 2, scope: !4004)
!4124 = !DILocation(line: 2085, column: 14, scope: !4004)
!4125 = !DILocation(line: 2086, column: 4, scope: !4004)
!4126 = !DILocation(line: 2087, column: 4, scope: !4004)
!4127 = !DILocation(line: 2090, column: 31, scope: !4004)
!4128 = !DILocation(line: 2090, column: 14, scope: !4004)
!4129 = !DILocation(line: 2091, column: 4, scope: !4004)
!4130 = !DILocation(line: 2092, column: 4, scope: !4004)
!4131 = !DILocation(line: 2095, column: 4, scope: !4004)
!4132 = !DILocation(line: 2096, column: 2, scope: !4004)
!4133 = !DILocation(line: 2100, column: 15, scope: !4134)
!4134 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 2100, column: 7)
!4135 = !DILocation(line: 2100, column: 7, scope: !3990)
!4136 = !DILocation(line: 2102, column: 7, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 2102, column: 7)
!4138 = distinct !DILexicalBlock(scope: !4134, file: !3, line: 2101, column: 5)
!4139 = !DILocation(line: 0, scope: !4137)
!4140 = !DILocation(line: 2102, column: 21, scope: !4141)
!4141 = distinct !DILexicalBlock(scope: !4137, file: !3, line: 2102, column: 7)
!4142 = !DILocation(line: 2103, column: 40, scope: !4141)
!4143 = !DILocation(line: 2103, column: 26, scope: !4141)
!4144 = !DILocation(line: 2103, column: 2, scope: !4141)
!4145 = !DILocation(line: 2102, column: 33, scope: !4141)
!4146 = !DILocation(line: 2102, column: 7, scope: !4141)
!4147 = distinct !{!4147, !4136, !4148}
!4148 = !DILocation(line: 2103, column: 60, scope: !4137)
!4149 = !DILocation(line: 2106, column: 11, scope: !4150)
!4150 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 2106, column: 11)
!4151 = !DILocation(line: 2106, column: 11, scope: !4138)
!4152 = !DILocation(line: 2108, column: 4, scope: !4153)
!4153 = distinct !DILexicalBlock(scope: !4150, file: !3, line: 2107, column: 2)
!4154 = !DILocation(line: 2109, column: 4, scope: !4153)
!4155 = !DILocation(line: 2110, column: 2, scope: !4153)
!4156 = !DILocation(line: 2112, column: 11, scope: !4157)
!4157 = distinct !DILexicalBlock(scope: !4138, file: !3, line: 2112, column: 11)
!4158 = !DILocation(line: 2112, column: 11, scope: !4138)
!4159 = !DILocation(line: 2114, column: 27, scope: !4160)
!4160 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 2113, column: 2)
!4161 = !DILocation(line: 2114, column: 4, scope: !4160)
!4162 = !DILocation(line: 2115, column: 27, scope: !4160)
!4163 = !DILocation(line: 2115, column: 4, scope: !4160)
!4164 = !DILocation(line: 2116, column: 2, scope: !4160)
!4165 = !DILocation(line: 2119, column: 7, scope: !4138)
!4166 = !DILocation(line: 2120, column: 5, scope: !4138)
!4167 = !DILocation(line: 2122, column: 3, scope: !3990)
!4168 = distinct !DISubprogram(name: "walk_gimple_seq", scope: !3, file: !3, line: 1190, type: !4169, scopeLine: 1192, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4180)
!4169 = !DISubroutineType(types: !4170)
!4170 = !{!379, !430, !4171, !4175, !1584}
!4171 = !DIDerivedType(tag: DW_TAG_typedef, name: "walk_stmt_fn", file: !6, line: 4704, baseType: !4172)
!4172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4173, size: 64)
!4173 = !DISubroutineType(types: !4174)
!4174 = !{!450, !3951, !370, !1584}
!4175 = !DIDerivedType(tag: DW_TAG_typedef, name: "walk_tree_fn", file: !50, line: 5203, baseType: !4176)
!4176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4177, size: 64)
!4177 = !DISubroutineType(types: !4178)
!4178 = !{!450, !908, !4179, !376}
!4179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !372, size: 64)
!4180 = !{!4181, !4182, !4183, !4184, !4185, !4186}
!4181 = !DILocalVariable(name: "seq", arg: 1, scope: !4168, file: !3, line: 1190, type: !430)
!4182 = !DILocalVariable(name: "callback_stmt", arg: 2, scope: !4168, file: !3, line: 1190, type: !4171)
!4183 = !DILocalVariable(name: "callback_op", arg: 3, scope: !4168, file: !3, line: 1191, type: !4175)
!4184 = !DILocalVariable(name: "wi", arg: 4, scope: !4168, file: !3, line: 1191, type: !1584)
!4185 = !DILocalVariable(name: "gsi", scope: !4168, file: !3, line: 1193, type: !1588)
!4186 = !DILocalVariable(name: "ret", scope: !4187, file: !3, line: 1197, type: !450)
!4187 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 1196, column: 5)
!4188 = distinct !DILexicalBlock(scope: !4189, file: !3, line: 1195, column: 3)
!4189 = distinct !DILexicalBlock(scope: !4168, file: !3, line: 1195, column: 3)
!4190 = !DILocation(line: 0, scope: !4168)
!4191 = !DILocation(line: 1193, column: 3, scope: !4168)
!4192 = !DILocation(line: 1195, column: 14, scope: !4189)
!4193 = !DILocation(line: 0, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4195, file: !3, line: 1199, column: 2)
!4195 = distinct !DILexicalBlock(scope: !4187, file: !3, line: 1198, column: 11)
!4196 = !DILocation(line: 1195, column: 8, scope: !4189)
!4197 = !DILocation(line: 1195, column: 32, scope: !4188)
!4198 = !DILocation(line: 1195, column: 31, scope: !4188)
!4199 = !DILocation(line: 1195, column: 3, scope: !4189)
!4200 = !DILocation(line: 1197, column: 18, scope: !4187)
!4201 = !DILocation(line: 0, scope: !4187)
!4202 = !DILocation(line: 1198, column: 11, scope: !4195)
!4203 = !DILocation(line: 1198, column: 11, scope: !4187)
!4204 = !DILocation(line: 1202, column: 4, scope: !4194)
!4205 = !DILocation(line: 1203, column: 24, scope: !4194)
!4206 = !DILocation(line: 1204, column: 11, scope: !4194)
!4207 = !DILocation(line: 1204, column: 4, scope: !4194)
!4208 = !DILocation(line: 1195, column: 49, scope: !4188)
!4209 = !DILocation(line: 1195, column: 3, scope: !4188)
!4210 = distinct !{!4210, !4199, !4211}
!4211 = !DILocation(line: 1206, column: 5, scope: !4189)
!4212 = !DILocation(line: 1208, column: 7, scope: !4213)
!4213 = distinct !DILexicalBlock(scope: !4168, file: !3, line: 1208, column: 7)
!4214 = !DILocation(line: 1212, column: 1, scope: !4168)
!4215 = !DILocation(line: 1208, column: 7, scope: !4168)
!4216 = !DILocation(line: 1209, column: 25, scope: !4213)
!4217 = !DILocation(line: 1209, column: 5, scope: !4213)
!4218 = distinct !DISubprogram(name: "walk_gimple_stmt", scope: !3, file: !3, line: 1566, type: !4219, scopeLine: 1568, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4221)
!4219 = !DISubroutineType(types: !4220)
!4220 = !{!450, !3951, !4171, !4175, !1584}
!4221 = !{!4222, !4223, !4224, !4225, !4226, !4227, !4228, !4229}
!4222 = !DILocalVariable(name: "gsi", arg: 1, scope: !4218, file: !3, line: 1566, type: !3951)
!4223 = !DILocalVariable(name: "callback_stmt", arg: 2, scope: !4218, file: !3, line: 1566, type: !4171)
!4224 = !DILocalVariable(name: "callback_op", arg: 3, scope: !4218, file: !3, line: 1567, type: !4175)
!4225 = !DILocalVariable(name: "wi", arg: 4, scope: !4218, file: !3, line: 1567, type: !1584)
!4226 = !DILocalVariable(name: "ret", scope: !4218, file: !3, line: 1569, type: !379)
!4227 = !DILocalVariable(name: "tree_ret", scope: !4218, file: !3, line: 1570, type: !450)
!4228 = !DILocalVariable(name: "stmt", scope: !4218, file: !3, line: 1571, type: !379)
!4229 = !DILocalVariable(name: "handled_ops", scope: !4230, file: !3, line: 1585, type: !371)
!4230 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 1584, column: 5)
!4231 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 1583, column: 7)
!4232 = !DILocation(line: 0, scope: !4218)
!4233 = !DILocation(line: 1571, column: 17, scope: !4218)
!4234 = !DILocation(line: 1573, column: 7, scope: !4218)
!4235 = !DILocation(line: 1574, column: 15, scope: !4236)
!4236 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 1573, column: 7)
!4237 = !DILocation(line: 1576, column: 17, scope: !4238)
!4238 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 1576, column: 7)
!4239 = !DILocation(line: 1576, column: 13, scope: !4238)
!4240 = !DILocation(line: 1576, column: 32, scope: !4238)
!4241 = !DILocation(line: 1576, column: 35, scope: !4238)
!4242 = !DILocation(line: 1576, column: 7, scope: !4218)
!4243 = !DILocation(line: 1577, column: 22, scope: !4238)
!4244 = !DILocation(line: 1577, column: 20, scope: !4238)
!4245 = !DILocation(line: 1577, column: 5, scope: !4238)
!4246 = !DILocation(line: 1583, column: 7, scope: !4231)
!4247 = !DILocation(line: 1583, column: 7, scope: !4218)
!4248 = !DILocation(line: 0, scope: !4230)
!4249 = !DILocation(line: 1585, column: 7, scope: !4230)
!4250 = !DILocation(line: 1585, column: 12, scope: !4230)
!4251 = !DILocation(line: 1586, column: 18, scope: !4230)
!4252 = !DILocation(line: 1587, column: 11, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !4230, file: !3, line: 1587, column: 11)
!4254 = !DILocation(line: 1587, column: 11, scope: !4230)
!4255 = !DILocation(line: 1592, column: 7, scope: !4230)
!4256 = !DILocation(line: 1595, column: 14, scope: !4230)
!4257 = !DILocation(line: 1596, column: 5, scope: !4231)
!4258 = !DILocation(line: 1571, column: 10, scope: !4218)
!4259 = !DILocation(line: 1599, column: 7, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 1599, column: 7)
!4261 = !DILocation(line: 1599, column: 7, scope: !4218)
!4262 = !DILocation(line: 1601, column: 18, scope: !4263)
!4263 = distinct !DILexicalBlock(scope: !4260, file: !3, line: 1600, column: 5)
!4264 = !DILocation(line: 1602, column: 11, scope: !4265)
!4265 = distinct !DILexicalBlock(scope: !4263, file: !3, line: 1602, column: 11)
!4266 = !DILocation(line: 1602, column: 11, scope: !4263)
!4267 = !DILocation(line: 1607, column: 11, scope: !4218)
!4268 = !DILocation(line: 1607, column: 3, scope: !4218)
!4269 = !DILocation(line: 1610, column: 30, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4218, file: !3, line: 1608, column: 5)
!4271 = !DILocation(line: 1610, column: 13, scope: !4270)
!4272 = !DILocation(line: 1612, column: 11, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 1612, column: 11)
!4274 = !DILocation(line: 1612, column: 11, scope: !4270)
!4275 = !DILocation(line: 1613, column: 13, scope: !4273)
!4276 = !DILocation(line: 1613, column: 2, scope: !4273)
!4277 = !DILocation(line: 1617, column: 30, scope: !4270)
!4278 = !DILocation(line: 1617, column: 13, scope: !4270)
!4279 = !DILocation(line: 1619, column: 11, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 1619, column: 11)
!4281 = !DILocation(line: 1619, column: 11, scope: !4270)
!4282 = !DILocation(line: 1620, column: 13, scope: !4280)
!4283 = !DILocation(line: 1620, column: 2, scope: !4280)
!4284 = !DILocation(line: 1624, column: 30, scope: !4270)
!4285 = !DILocation(line: 1624, column: 13, scope: !4270)
!4286 = !DILocation(line: 1626, column: 11, scope: !4287)
!4287 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 1626, column: 11)
!4288 = !DILocation(line: 1626, column: 11, scope: !4270)
!4289 = !DILocation(line: 1627, column: 13, scope: !4287)
!4290 = !DILocation(line: 1627, column: 2, scope: !4287)
!4291 = !DILocation(line: 1631, column: 30, scope: !4270)
!4292 = !DILocation(line: 1631, column: 13, scope: !4270)
!4293 = !DILocation(line: 1633, column: 11, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 1633, column: 11)
!4295 = !DILocation(line: 1633, column: 11, scope: !4270)
!4296 = !DILocation(line: 1634, column: 13, scope: !4294)
!4297 = !DILocation(line: 1634, column: 2, scope: !4294)
!4298 = !DILocation(line: 1636, column: 30, scope: !4270)
!4299 = !DILocation(line: 1636, column: 13, scope: !4270)
!4300 = !DILocation(line: 1638, column: 11, scope: !4301)
!4301 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 1638, column: 11)
!4302 = !DILocation(line: 1638, column: 11, scope: !4270)
!4303 = !DILocation(line: 1639, column: 13, scope: !4301)
!4304 = !DILocation(line: 1639, column: 2, scope: !4301)
!4305 = !DILocation(line: 1643, column: 30, scope: !4270)
!4306 = !DILocation(line: 1643, column: 13, scope: !4270)
!4307 = !DILocation(line: 1645, column: 11, scope: !4308)
!4308 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 1645, column: 11)
!4309 = !DILocation(line: 1645, column: 11, scope: !4270)
!4310 = !DILocation(line: 1646, column: 13, scope: !4308)
!4311 = !DILocation(line: 1646, column: 2, scope: !4308)
!4312 = !DILocation(line: 1657, column: 30, scope: !4270)
!4313 = !DILocation(line: 1657, column: 13, scope: !4270)
!4314 = !DILocation(line: 1659, column: 11, scope: !4315)
!4315 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 1659, column: 11)
!4316 = !DILocation(line: 1659, column: 11, scope: !4270)
!4317 = !DILocation(line: 1660, column: 13, scope: !4315)
!4318 = !DILocation(line: 1660, column: 2, scope: !4315)
!4319 = !DILocation(line: 1664, column: 30, scope: !4270)
!4320 = !DILocation(line: 1664, column: 13, scope: !4270)
!4321 = !DILocation(line: 1666, column: 11, scope: !4322)
!4322 = distinct !DILexicalBlock(scope: !4270, file: !3, line: 1666, column: 11)
!4323 = !DILocation(line: 1666, column: 11, scope: !4270)
!4324 = !DILocation(line: 1667, column: 13, scope: !4322)
!4325 = !DILocation(line: 1667, column: 2, scope: !4322)
!4326 = !DILocation(line: 1671, column: 7, scope: !4270)
!4327 = !DILocation(line: 1676, column: 1, scope: !4218)
!4328 = distinct !DISubprogram(name: "walk_gimple_op", scope: !3, file: !3, line: 1301, type: !4329, scopeLine: 1303, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4331)
!4329 = !DISubroutineType(types: !4330)
!4330 = !{!450, !379, !4175, !1584}
!4331 = !{!4332, !4333, !4334, !4335, !4336, !4337, !4338}
!4332 = !DILocalVariable(name: "stmt", arg: 1, scope: !4328, file: !3, line: 1301, type: !379)
!4333 = !DILocalVariable(name: "callback_op", arg: 2, scope: !4328, file: !3, line: 1301, type: !4175)
!4334 = !DILocalVariable(name: "wi", arg: 3, scope: !4328, file: !3, line: 1302, type: !1584)
!4335 = !DILocalVariable(name: "pset", scope: !4328, file: !3, line: 1304, type: !1596)
!4336 = !DILocalVariable(name: "i", scope: !4328, file: !3, line: 1305, type: !7)
!4337 = !DILocalVariable(name: "ret", scope: !4328, file: !3, line: 1306, type: !450)
!4338 = !DILocalVariable(name: "gss", scope: !4339, file: !3, line: 1533, type: !5)
!4339 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1532, column: 7)
!4340 = distinct !DILexicalBlock(scope: !4328, file: !3, line: 1309, column: 5)
!4341 = !DILocation(line: 0, scope: !4328)
!4342 = !DILocation(line: 1304, column: 32, scope: !4328)
!4343 = !DILocation(line: 1304, column: 43, scope: !4328)
!4344 = !DILocation(line: 1308, column: 11, scope: !4328)
!4345 = !DILocation(line: 1308, column: 3, scope: !4328)
!4346 = !DILocation(line: 1313, column: 11, scope: !4340)
!4347 = !DILocation(line: 1314, column: 33, scope: !4348)
!4348 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1313, column: 11)
!4349 = !DILocation(line: 1314, column: 18, scope: !4348)
!4350 = !DILocation(line: 1315, column: 24, scope: !4348)
!4351 = !DILocation(line: 1315, column: 28, scope: !4348)
!4352 = !DILocation(line: 1315, column: 27, scope: !4348)
!4353 = !DILocation(line: 1314, column: 6, scope: !4348)
!4354 = !DILocation(line: 1314, column: 15, scope: !4348)
!4355 = !DILocation(line: 1314, column: 2, scope: !4348)
!4356 = !DILocation(line: 0, scope: !4357)
!4357 = distinct !DILexicalBlock(scope: !4358, file: !3, line: 1318, column: 2)
!4358 = distinct !DILexicalBlock(scope: !4359, file: !3, line: 1317, column: 7)
!4359 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1317, column: 7)
!4360 = !DILocation(line: 1317, column: 12, scope: !4359)
!4361 = !DILocation(line: 0, scope: !4359)
!4362 = !DILocation(line: 1317, column: 23, scope: !4358)
!4363 = !DILocation(line: 1317, column: 21, scope: !4358)
!4364 = !DILocation(line: 1317, column: 7, scope: !4359)
!4365 = !DILocation(line: 1319, column: 10, scope: !4357)
!4366 = !DILocation(line: 1321, column: 8, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !4357, file: !3, line: 1321, column: 8)
!4368 = !DILocation(line: 1321, column: 8, scope: !4357)
!4369 = !DILocation(line: 1317, column: 47, scope: !4358)
!4370 = !DILocation(line: 1317, column: 7, scope: !4358)
!4371 = distinct !{!4371, !4364, !4372}
!4372 = !DILocation(line: 1323, column: 2, scope: !4359)
!4373 = !DILocation(line: 1327, column: 11, scope: !4340)
!4374 = !DILocation(line: 1331, column: 39, scope: !4375)
!4375 = distinct !DILexicalBlock(scope: !4376, file: !3, line: 1328, column: 2)
!4376 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1327, column: 11)
!4377 = !DILocation(line: 1331, column: 20, scope: !4375)
!4378 = !DILocation(line: 1332, column: 26, scope: !4375)
!4379 = !DILocation(line: 1332, column: 30, scope: !4375)
!4380 = !DILocation(line: 1332, column: 29, scope: !4375)
!4381 = !DILocation(line: 1331, column: 8, scope: !4375)
!4382 = !DILocation(line: 1331, column: 17, scope: !4375)
!4383 = !DILocation(line: 1333, column: 8, scope: !4375)
!4384 = !DILocation(line: 1333, column: 15, scope: !4375)
!4385 = !DILocation(line: 1334, column: 2, scope: !4375)
!4386 = !DILocation(line: 1336, column: 13, scope: !4340)
!4387 = !DILocation(line: 1337, column: 11, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1337, column: 11)
!4389 = !DILocation(line: 1337, column: 11, scope: !4340)
!4390 = !DILocation(line: 1340, column: 11, scope: !4340)
!4391 = !DILocation(line: 1342, column: 8, scope: !4392)
!4392 = distinct !DILexicalBlock(scope: !4393, file: !3, line: 1341, column: 2)
!4393 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1340, column: 11)
!4394 = !DILocation(line: 1342, column: 17, scope: !4392)
!4395 = !DILocation(line: 1343, column: 8, scope: !4392)
!4396 = !DILocation(line: 1343, column: 15, scope: !4392)
!4397 = !DILocation(line: 1344, column: 2, scope: !4392)
!4398 = !DILocation(line: 1348, column: 11, scope: !4340)
!4399 = !DILocation(line: 1349, column: 6, scope: !4400)
!4400 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1348, column: 11)
!4401 = !DILocation(line: 1349, column: 13, scope: !4400)
!4402 = !DILocation(line: 1349, column: 2, scope: !4400)
!4403 = !DILocation(line: 1351, column: 13, scope: !4340)
!4404 = !DILocation(line: 1352, column: 11, scope: !4405)
!4405 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1352, column: 11)
!4406 = !DILocation(line: 1352, column: 11, scope: !4340)
!4407 = !DILocation(line: 1355, column: 13, scope: !4340)
!4408 = !DILocation(line: 1356, column: 11, scope: !4409)
!4409 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1356, column: 11)
!4410 = !DILocation(line: 1356, column: 11, scope: !4340)
!4411 = !DILocation(line: 1359, column: 7, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1359, column: 7)
!4413 = !DILocation(line: 0, scope: !4412)
!4414 = !DILocation(line: 1359, column: 23, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4412, file: !3, line: 1359, column: 7)
!4416 = !DILocation(line: 1359, column: 21, scope: !4415)
!4417 = !DILocation(line: 1361, column: 10, scope: !4418)
!4418 = distinct !DILexicalBlock(scope: !4415, file: !3, line: 1360, column: 2)
!4419 = !DILocation(line: 1363, column: 8, scope: !4420)
!4420 = distinct !DILexicalBlock(scope: !4418, file: !3, line: 1363, column: 8)
!4421 = !DILocation(line: 1363, column: 8, scope: !4418)
!4422 = !DILocation(line: 1359, column: 53, scope: !4415)
!4423 = !DILocation(line: 1359, column: 7, scope: !4415)
!4424 = distinct !{!4424, !4411, !4425}
!4425 = !DILocation(line: 1365, column: 2, scope: !4412)
!4426 = !DILocation(line: 1367, column: 11, scope: !4340)
!4427 = !DILocation(line: 1368, column: 6, scope: !4428)
!4428 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1367, column: 11)
!4429 = !DILocation(line: 1368, column: 13, scope: !4428)
!4430 = !DILocation(line: 1368, column: 2, scope: !4428)
!4431 = !DILocation(line: 1370, column: 13, scope: !4340)
!4432 = !DILocation(line: 1371, column: 11, scope: !4433)
!4433 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1371, column: 11)
!4434 = !DILocation(line: 1371, column: 11, scope: !4340)
!4435 = !DILocation(line: 1374, column: 11, scope: !4340)
!4436 = !DILocation(line: 1375, column: 6, scope: !4437)
!4437 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1374, column: 11)
!4438 = !DILocation(line: 1375, column: 13, scope: !4437)
!4439 = !DILocation(line: 1375, column: 2, scope: !4437)
!4440 = !DILocation(line: 1379, column: 13, scope: !4340)
!4441 = !DILocation(line: 1381, column: 11, scope: !4442)
!4442 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1381, column: 11)
!4443 = !DILocation(line: 1381, column: 11, scope: !4340)
!4444 = !DILocation(line: 1386, column: 13, scope: !4340)
!4445 = !DILocation(line: 1388, column: 11, scope: !4446)
!4446 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1388, column: 11)
!4447 = !DILocation(line: 1388, column: 11, scope: !4340)
!4448 = !DILocation(line: 1393, column: 13, scope: !4340)
!4449 = !DILocation(line: 1394, column: 11, scope: !4450)
!4450 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1394, column: 11)
!4451 = !DILocation(line: 1394, column: 11, scope: !4340)
!4452 = !DILocation(line: 1399, column: 13, scope: !4340)
!4453 = !DILocation(line: 1401, column: 11, scope: !4454)
!4454 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1401, column: 11)
!4455 = !DILocation(line: 1401, column: 11, scope: !4340)
!4456 = !DILocation(line: 1404, column: 13, scope: !4340)
!4457 = !DILocation(line: 1406, column: 11, scope: !4458)
!4458 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1406, column: 11)
!4459 = !DILocation(line: 1406, column: 11, scope: !4340)
!4460 = !DILocation(line: 1411, column: 13, scope: !4340)
!4461 = !DILocation(line: 1413, column: 11, scope: !4462)
!4462 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1413, column: 11)
!4463 = !DILocation(line: 1413, column: 11, scope: !4340)
!4464 = !DILocation(line: 1418, column: 13, scope: !4340)
!4465 = !DILocation(line: 1420, column: 11, scope: !4466)
!4466 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1420, column: 11)
!4467 = !DILocation(line: 1420, column: 11, scope: !4340)
!4468 = !DILocation(line: 1422, column: 7, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1422, column: 7)
!4470 = !DILocation(line: 0, scope: !4469)
!4471 = !DILocation(line: 0, scope: !4340)
!4472 = !DILocation(line: 1422, column: 19, scope: !4473)
!4473 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 1422, column: 7)
!4474 = !DILocation(line: 1422, column: 23, scope: !4473)
!4475 = !DILocation(line: 1422, column: 21, scope: !4473)
!4476 = !DILocation(line: 1424, column: 10, scope: !4477)
!4477 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 1423, column: 2)
!4478 = !DILocation(line: 1426, column: 8, scope: !4479)
!4479 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 1426, column: 8)
!4480 = !DILocation(line: 1426, column: 8, scope: !4477)
!4481 = !DILocation(line: 1428, column: 10, scope: !4477)
!4482 = !DILocation(line: 1430, column: 8, scope: !4483)
!4483 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 1430, column: 8)
!4484 = !DILocation(line: 1430, column: 8, scope: !4477)
!4485 = !DILocation(line: 1432, column: 10, scope: !4477)
!4486 = !DILocation(line: 1434, column: 8, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4477, file: !3, line: 1434, column: 8)
!4488 = !DILocation(line: 1434, column: 8, scope: !4477)
!4489 = !DILocation(line: 1436, column: 10, scope: !4477)
!4490 = !DILocation(line: 1422, column: 56, scope: !4473)
!4491 = !DILocation(line: 1422, column: 7, scope: !4473)
!4492 = distinct !{!4492, !4468, !4493}
!4493 = !DILocation(line: 1438, column: 2, scope: !4469)
!4494 = !DILocation(line: 1439, column: 11, scope: !4495)
!4495 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1439, column: 11)
!4496 = !DILocation(line: 1439, column: 11, scope: !4340)
!4497 = !DILocation(line: 1444, column: 13, scope: !4340)
!4498 = !DILocation(line: 1446, column: 11, scope: !4499)
!4499 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1446, column: 11)
!4500 = !DILocation(line: 1446, column: 11, scope: !4340)
!4501 = !DILocation(line: 1448, column: 13, scope: !4340)
!4502 = !DILocation(line: 1450, column: 11, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1450, column: 11)
!4504 = !DILocation(line: 1450, column: 11, scope: !4340)
!4505 = !DILocation(line: 1452, column: 13, scope: !4340)
!4506 = !DILocation(line: 1454, column: 11, scope: !4507)
!4507 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1454, column: 11)
!4508 = !DILocation(line: 1454, column: 11, scope: !4340)
!4509 = !DILocation(line: 1459, column: 13, scope: !4340)
!4510 = !DILocation(line: 1461, column: 11, scope: !4511)
!4511 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1461, column: 11)
!4512 = !DILocation(line: 1461, column: 11, scope: !4340)
!4513 = !DILocation(line: 1463, column: 13, scope: !4340)
!4514 = !DILocation(line: 1465, column: 11, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1465, column: 11)
!4516 = !DILocation(line: 1465, column: 11, scope: !4340)
!4517 = !DILocation(line: 1467, column: 13, scope: !4340)
!4518 = !DILocation(line: 1469, column: 11, scope: !4519)
!4519 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1469, column: 11)
!4520 = !DILocation(line: 1469, column: 11, scope: !4340)
!4521 = !DILocation(line: 1471, column: 13, scope: !4340)
!4522 = !DILocation(line: 1473, column: 11, scope: !4523)
!4523 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1473, column: 11)
!4524 = !DILocation(line: 1473, column: 11, scope: !4340)
!4525 = !DILocation(line: 1475, column: 13, scope: !4340)
!4526 = !DILocation(line: 1477, column: 11, scope: !4527)
!4527 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1477, column: 11)
!4528 = !DILocation(line: 1477, column: 11, scope: !4340)
!4529 = !DILocation(line: 1479, column: 13, scope: !4340)
!4530 = !DILocation(line: 1481, column: 11, scope: !4531)
!4531 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1481, column: 11)
!4532 = !DILocation(line: 1481, column: 11, scope: !4340)
!4533 = !DILocation(line: 1486, column: 13, scope: !4340)
!4534 = !DILocation(line: 1488, column: 11, scope: !4535)
!4535 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1488, column: 11)
!4536 = !DILocation(line: 1488, column: 11, scope: !4340)
!4537 = !DILocation(line: 1491, column: 13, scope: !4340)
!4538 = !DILocation(line: 1493, column: 11, scope: !4539)
!4539 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1493, column: 11)
!4540 = !DILocation(line: 1493, column: 11, scope: !4340)
!4541 = !DILocation(line: 1499, column: 13, scope: !4340)
!4542 = !DILocation(line: 1501, column: 11, scope: !4543)
!4543 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1501, column: 11)
!4544 = !DILocation(line: 1501, column: 11, scope: !4340)
!4545 = !DILocation(line: 1506, column: 13, scope: !4340)
!4546 = !DILocation(line: 1508, column: 11, scope: !4547)
!4547 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1508, column: 11)
!4548 = !DILocation(line: 1508, column: 11, scope: !4340)
!4549 = !DILocation(line: 1511, column: 13, scope: !4340)
!4550 = !DILocation(line: 1513, column: 11, scope: !4551)
!4551 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1513, column: 11)
!4552 = !DILocation(line: 1513, column: 11, scope: !4340)
!4553 = !DILocation(line: 1518, column: 13, scope: !4340)
!4554 = !DILocation(line: 1520, column: 11, scope: !4555)
!4555 = distinct !DILexicalBlock(scope: !4340, file: !3, line: 1520, column: 11)
!4556 = !DILocation(line: 1520, column: 11, scope: !4340)
!4557 = !DILocation(line: 1534, column: 8, scope: !4339)
!4558 = !DILocation(line: 0, scope: !4339)
!4559 = !DILocation(line: 1535, column: 26, scope: !4560)
!4560 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1535, column: 6)
!4561 = !DILocation(line: 0, scope: !4562)
!4562 = distinct !DILexicalBlock(scope: !4563, file: !3, line: 1537, column: 6)
!4563 = distinct !DILexicalBlock(scope: !4564, file: !3, line: 1536, column: 4)
!4564 = distinct !DILexicalBlock(scope: !4560, file: !3, line: 1536, column: 4)
!4565 = !DILocation(line: 1536, column: 9, scope: !4564)
!4566 = !DILocation(line: 0, scope: !4564)
!4567 = !DILocation(line: 1536, column: 20, scope: !4563)
!4568 = !DILocation(line: 1536, column: 18, scope: !4563)
!4569 = !DILocation(line: 1536, column: 4, scope: !4564)
!4570 = !DILocation(line: 1538, column: 14, scope: !4562)
!4571 = !DILocation(line: 1539, column: 12, scope: !4572)
!4572 = distinct !DILexicalBlock(scope: !4562, file: !3, line: 1539, column: 12)
!4573 = !DILocation(line: 1539, column: 12, scope: !4562)
!4574 = !DILocation(line: 1536, column: 44, scope: !4563)
!4575 = !DILocation(line: 1536, column: 4, scope: !4563)
!4576 = distinct !{!4576, !4569, !4577}
!4577 = !DILocation(line: 1541, column: 6, scope: !4564)
!4578 = !DILocation(line: 1546, column: 3, scope: !4328)
!4579 = !DILocation(line: 1547, column: 1, scope: !4328)
!4580 = distinct !DISubprogram(name: "gimple_code", scope: !6, file: !6, line: 1052, type: !4581, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4583)
!4581 = !DISubroutineType(types: !4582)
!4582 = !{!276, !3301}
!4583 = !{!4584}
!4584 = !DILocalVariable(name: "g", arg: 1, scope: !4580, file: !6, line: 1052, type: !3301)
!4585 = !DILocation(line: 0, scope: !4580)
!4586 = !DILocation(line: 1054, column: 20, scope: !4580)
!4587 = !DILocation(line: 1054, column: 3, scope: !4580)
!4588 = distinct !DISubprogram(name: "is_gimple_reg", scope: !3, file: !3, line: 2723, type: !2305, scopeLine: 2724, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4589)
!4589 = !{!4590}
!4590 = !DILocalVariable(name: "t", arg: 1, scope: !4588, file: !3, line: 2723, type: !450)
!4591 = !DILocation(line: 0, scope: !4588)
!4592 = !DILocation(line: 2725, column: 7, scope: !4593)
!4593 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 2725, column: 7)
!4594 = !DILocation(line: 2725, column: 21, scope: !4593)
!4595 = !DILocation(line: 2725, column: 7, scope: !4588)
!4596 = !DILocation(line: 2726, column: 9, scope: !4593)
!4597 = !DILocation(line: 2726, column: 5, scope: !4593)
!4598 = !DILocation(line: 2728, column: 8, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 2728, column: 7)
!4600 = !DILocation(line: 2728, column: 7, scope: !4588)
!4601 = !DILocation(line: 2731, column: 28, scope: !4602)
!4602 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 2731, column: 7)
!4603 = !DILocation(line: 2731, column: 8, scope: !4602)
!4604 = !DILocation(line: 2731, column: 7, scope: !4588)
!4605 = !DILocation(line: 2736, column: 7, scope: !4606)
!4606 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 2736, column: 7)
!4607 = !DILocation(line: 2736, column: 7, scope: !4588)
!4608 = !DILocation(line: 2741, column: 7, scope: !4609)
!4609 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 2741, column: 7)
!4610 = !DILocation(line: 2741, column: 7, scope: !4588)
!4611 = !DILocation(line: 2754, column: 7, scope: !4612)
!4612 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 2754, column: 7)
!4613 = !DILocation(line: 2754, column: 21, scope: !4612)
!4614 = !DILocation(line: 2754, column: 33, scope: !4612)
!4615 = !DILocation(line: 2754, column: 36, scope: !4612)
!4616 = !DILocation(line: 2754, column: 7, scope: !4588)
!4617 = !DILocation(line: 2759, column: 7, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 2759, column: 7)
!4619 = !DILocation(line: 2759, column: 33, scope: !4618)
!4620 = !DILocation(line: 2760, column: 7, scope: !4618)
!4621 = !DILocation(line: 2760, column: 36, scope: !4618)
!4622 = !DILocation(line: 2759, column: 7, scope: !4588)
!4623 = !DILocation(line: 2761, column: 12, scope: !4618)
!4624 = !DILocation(line: 2761, column: 5, scope: !4618)
!4625 = !DILocation(line: 2764, column: 1, scope: !4588)
!4626 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !6, file: !6, line: 1694, type: !3299, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4627)
!4627 = !{!4628}
!4628 = !DILocalVariable(name: "gs", arg: 1, scope: !4626, file: !6, line: 1694, type: !3301)
!4629 = !DILocation(line: 0, scope: !4626)
!4630 = !DILocation(line: 1697, column: 10, scope: !4626)
!4631 = !DILocation(line: 1697, column: 3, scope: !4626)
!4632 = distinct !DISubprogram(name: "gimple_assign_single_p", scope: !3, file: !3, line: 1772, type: !3913, scopeLine: 1773, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4633)
!4633 = !{!4634}
!4634 = !DILocalVariable(name: "gs", arg: 1, scope: !4632, file: !3, line: 1772, type: !379)
!4635 = !DILocation(line: 0, scope: !4632)
!4636 = !DILocation(line: 1774, column: 11, scope: !4632)
!4637 = !DILocation(line: 1774, column: 28, scope: !4632)
!4638 = !DILocation(line: 1775, column: 11, scope: !4632)
!4639 = !DILocation(line: 1775, column: 36, scope: !4632)
!4640 = !DILocation(line: 1775, column: 14, scope: !4632)
!4641 = !DILocation(line: 1776, column: 7, scope: !4632)
!4642 = !DILocation(line: 1774, column: 3, scope: !4632)
!4643 = distinct !DISubprogram(name: "gimple_num_ops", scope: !6, file: !6, line: 1596, type: !4644, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4646)
!4644 = !DISubroutineType(types: !4645)
!4645 = !{!7, !3301}
!4646 = !{!4647}
!4647 = !DILocalVariable(name: "gs", arg: 1, scope: !4643, file: !6, line: 1596, type: !3301)
!4648 = !DILocation(line: 0, scope: !4643)
!4649 = !DILocation(line: 1598, column: 21, scope: !4643)
!4650 = !DILocation(line: 1598, column: 3, scope: !4643)
!4651 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !6, file: !6, line: 1647, type: !4652, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4654)
!4652 = !DISubroutineType(types: !4653)
!4653 = !{!908, !3301, !7}
!4654 = !{!4655, !4656}
!4655 = !DILocalVariable(name: "gs", arg: 1, scope: !4651, file: !6, line: 1647, type: !3301)
!4656 = !DILocalVariable(name: "i", arg: 2, scope: !4651, file: !6, line: 1647, type: !7)
!4657 = !DILocation(line: 0, scope: !4651)
!4658 = !DILocation(line: 1649, column: 7, scope: !4659)
!4659 = distinct !DILexicalBlock(scope: !4651, file: !6, line: 1649, column: 7)
!4660 = !DILocation(line: 1649, column: 7, scope: !4651)
!4661 = !DILocation(line: 1654, column: 14, scope: !4662)
!4662 = distinct !DILexicalBlock(scope: !4659, file: !6, line: 1650, column: 5)
!4663 = !DILocation(line: 1654, column: 50, scope: !4662)
!4664 = !DILocation(line: 1654, column: 7, scope: !4662)
!4665 = !DILocation(line: 0, scope: !4659)
!4666 = !DILocation(line: 1658, column: 1, scope: !4651)
!4667 = distinct !DISubprogram(name: "is_gimple_mem_rhs", scope: !3, file: !3, line: 2443, type: !2305, scopeLine: 2444, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4668)
!4668 = !{!4669}
!4669 = !DILocalVariable(name: "t", arg: 1, scope: !4667, file: !3, line: 2443, type: !450)
!4670 = !DILocation(line: 0, scope: !4667)
!4671 = !DILocation(line: 2447, column: 27, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4667, file: !3, line: 2447, column: 7)
!4673 = !DILocation(line: 2447, column: 7, scope: !4672)
!4674 = !DILocation(line: 0, scope: !4672)
!4675 = !DILocation(line: 2447, column: 7, scope: !4667)
!4676 = !DILocation(line: 2450, column: 12, scope: !4672)
!4677 = !DILocation(line: 2450, column: 30, scope: !4672)
!4678 = !DILocation(line: 2450, column: 33, scope: !4672)
!4679 = !DILocation(line: 2450, column: 5, scope: !4672)
!4680 = !DILocation(line: 2451, column: 1, scope: !4667)
!4681 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !6, file: !6, line: 1727, type: !3299, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4682)
!4682 = !{!4683}
!4683 = !DILocalVariable(name: "gs", arg: 1, scope: !4681, file: !6, line: 1727, type: !3301)
!4684 = !DILocation(line: 0, scope: !4681)
!4685 = !DILocation(line: 1730, column: 10, scope: !4681)
!4686 = !DILocation(line: 1730, column: 3, scope: !4681)
!4687 = distinct !DISubprogram(name: "gimple_call_chain_ptr", scope: !6, file: !6, line: 1993, type: !4688, scopeLine: 1994, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4690)
!4688 = !DISubroutineType(types: !4689)
!4689 = !{!908, !3301}
!4690 = !{!4691}
!4691 = !DILocalVariable(name: "gs", arg: 1, scope: !4687, file: !6, line: 1993, type: !3301)
!4692 = !DILocation(line: 0, scope: !4687)
!4693 = !DILocation(line: 1996, column: 10, scope: !4687)
!4694 = !DILocation(line: 1996, column: 3, scope: !4687)
!4695 = distinct !DISubprogram(name: "gimple_call_fn_ptr", scope: !6, file: !6, line: 1922, type: !4688, scopeLine: 1923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4696)
!4696 = !{!4697}
!4697 = !DILocalVariable(name: "gs", arg: 1, scope: !4695, file: !6, line: 1922, type: !3301)
!4698 = !DILocation(line: 0, scope: !4695)
!4699 = !DILocation(line: 1925, column: 10, scope: !4695)
!4700 = !DILocation(line: 1925, column: 3, scope: !4695)
!4701 = distinct !DISubprogram(name: "gimple_call_num_args", scope: !6, file: !6, line: 2013, type: !4644, scopeLine: 2014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4702)
!4702 = !{!4703, !4704}
!4703 = !DILocalVariable(name: "gs", arg: 1, scope: !4701, file: !6, line: 2013, type: !3301)
!4704 = !DILocalVariable(name: "num_ops", scope: !4701, file: !6, line: 2015, type: !7)
!4705 = !DILocation(line: 0, scope: !4701)
!4706 = !DILocation(line: 2017, column: 13, scope: !4701)
!4707 = !DILocation(line: 2018, column: 18, scope: !4701)
!4708 = !DILocation(line: 2018, column: 3, scope: !4701)
!4709 = distinct !DISubprogram(name: "gimple_call_arg_ptr", scope: !6, file: !6, line: 2036, type: !4652, scopeLine: 2037, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4710)
!4710 = !{!4711, !4712}
!4711 = !DILocalVariable(name: "gs", arg: 1, scope: !4709, file: !6, line: 2036, type: !3301)
!4712 = !DILocalVariable(name: "index", arg: 2, scope: !4709, file: !6, line: 2036, type: !7)
!4713 = !DILocation(line: 0, scope: !4709)
!4714 = !DILocation(line: 2039, column: 35, scope: !4709)
!4715 = !DILocation(line: 2039, column: 10, scope: !4709)
!4716 = !DILocation(line: 2039, column: 3, scope: !4709)
!4717 = distinct !DISubprogram(name: "gimple_call_lhs_ptr", scope: !6, file: !6, line: 1888, type: !4688, scopeLine: 1889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4718)
!4718 = !{!4719}
!4719 = !DILocalVariable(name: "gs", arg: 1, scope: !4717, file: !6, line: 1888, type: !3301)
!4720 = !DILocation(line: 0, scope: !4717)
!4721 = !DILocation(line: 1891, column: 10, scope: !4717)
!4722 = !DILocation(line: 1891, column: 3, scope: !4717)
!4723 = distinct !DISubprogram(name: "gimple_catch_types_ptr", scope: !6, file: !6, line: 2795, type: !4724, scopeLine: 2796, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4726)
!4724 = !DISubroutineType(types: !4725)
!4725 = !{!908, !379}
!4726 = !{!4727}
!4727 = !DILocalVariable(name: "gs", arg: 1, scope: !4723, file: !6, line: 2795, type: !379)
!4728 = !DILocation(line: 0, scope: !4723)
!4729 = !DILocation(line: 2798, column: 28, scope: !4723)
!4730 = !DILocation(line: 2798, column: 3, scope: !4723)
!4731 = distinct !DISubprogram(name: "gimple_eh_filter_types_ptr", scope: !6, file: !6, line: 2858, type: !4724, scopeLine: 2859, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4732)
!4732 = !{!4733}
!4733 = !DILocalVariable(name: "gs", arg: 1, scope: !4731, file: !6, line: 2858, type: !379)
!4734 = !DILocation(line: 0, scope: !4731)
!4735 = !DILocation(line: 2861, column: 32, scope: !4731)
!4736 = !DILocation(line: 2861, column: 3, scope: !4731)
!4737 = distinct !DISubprogram(name: "walk_gimple_asm", scope: !3, file: !3, line: 1218, type: !4329, scopeLine: 1220, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4738)
!4738 = !{!4739, !4740, !4741, !4742, !4743, !4744, !4745, !4746, !4747, !4748, !4749, !4750, !4751}
!4739 = !DILocalVariable(name: "stmt", arg: 1, scope: !4737, file: !3, line: 1218, type: !379)
!4740 = !DILocalVariable(name: "callback_op", arg: 2, scope: !4737, file: !3, line: 1218, type: !4175)
!4741 = !DILocalVariable(name: "wi", arg: 3, scope: !4737, file: !3, line: 1219, type: !1584)
!4742 = !DILocalVariable(name: "ret", scope: !4737, file: !3, line: 1221, type: !450)
!4743 = !DILocalVariable(name: "op", scope: !4737, file: !3, line: 1221, type: !450)
!4744 = !DILocalVariable(name: "noutputs", scope: !4737, file: !3, line: 1222, type: !7)
!4745 = !DILocalVariable(name: "oconstraints", scope: !4737, file: !3, line: 1223, type: !1555)
!4746 = !DILocalVariable(name: "i", scope: !4737, file: !3, line: 1224, type: !7)
!4747 = !DILocalVariable(name: "n", scope: !4737, file: !3, line: 1224, type: !7)
!4748 = !DILocalVariable(name: "constraint", scope: !4737, file: !3, line: 1225, type: !377)
!4749 = !DILocalVariable(name: "allows_mem", scope: !4737, file: !3, line: 1226, type: !371)
!4750 = !DILocalVariable(name: "allows_reg", scope: !4737, file: !3, line: 1226, type: !371)
!4751 = !DILocalVariable(name: "is_inout", scope: !4737, file: !3, line: 1226, type: !371)
!4752 = !DILocation(line: 0, scope: !4737)
!4753 = !DILocation(line: 1225, column: 3, scope: !4737)
!4754 = !DILocation(line: 1226, column: 3, scope: !4737)
!4755 = !DILocation(line: 1228, column: 14, scope: !4737)
!4756 = !DILocation(line: 1229, column: 34, scope: !4737)
!4757 = !DILocation(line: 1231, column: 7, scope: !4758)
!4758 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1231, column: 7)
!4759 = !DILocation(line: 1231, column: 7, scope: !4737)
!4760 = !DILocation(line: 1232, column: 9, scope: !4758)
!4761 = !DILocation(line: 1232, column: 16, scope: !4758)
!4762 = !DILocation(line: 1232, column: 5, scope: !4758)
!4763 = !DILocation(line: 0, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 1241, column: 11)
!4765 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 1235, column: 5)
!4766 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 1234, column: 3)
!4767 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1234, column: 3)
!4768 = !DILocation(line: 0, scope: !4765)
!4769 = !DILocation(line: 1234, column: 8, scope: !4767)
!4770 = !DILocation(line: 1234, column: 17, scope: !4766)
!4771 = !DILocation(line: 0, scope: !4767)
!4772 = !DILocation(line: 1234, column: 3, scope: !4767)
!4773 = !DILocation(line: 1236, column: 12, scope: !4765)
!4774 = !DILocation(line: 1237, column: 20, scope: !4765)
!4775 = !DILocation(line: 1237, column: 18, scope: !4765)
!4776 = !DILocation(line: 1238, column: 25, scope: !4765)
!4777 = !DILocation(line: 1238, column: 7, scope: !4765)
!4778 = !DILocation(line: 1238, column: 23, scope: !4765)
!4779 = !DILocation(line: 1239, column: 7, scope: !4765)
!4780 = !DILocation(line: 1243, column: 13, scope: !4765)
!4781 = !DILocation(line: 1244, column: 11, scope: !4782)
!4782 = distinct !DILexicalBlock(scope: !4765, file: !3, line: 1244, column: 11)
!4783 = !DILocation(line: 1244, column: 11, scope: !4765)
!4784 = !DILocation(line: 1234, column: 30, scope: !4766)
!4785 = !DILocation(line: 1234, column: 3, scope: !4766)
!4786 = distinct !{!4786, !4772, !4787}
!4787 = !DILocation(line: 1246, column: 5, scope: !4767)
!4788 = !DILocation(line: 1248, column: 7, scope: !4737)
!4789 = !DILocation(line: 1282, column: 1, scope: !4737)
!4790 = !DILocation(line: 1242, column: 18, scope: !4764)
!4791 = !DILocation(line: 1242, column: 29, scope: !4764)
!4792 = !DILocation(line: 1242, column: 33, scope: !4764)
!4793 = !DILocation(line: 1242, column: 32, scope: !4764)
!4794 = !DILocation(line: 1242, column: 17, scope: !4764)
!4795 = !DILocation(line: 1242, column: 15, scope: !4764)
!4796 = !DILocation(line: 0, scope: !4797)
!4797 = distinct !DILexicalBlock(scope: !4798, file: !3, line: 1256, column: 2)
!4798 = distinct !DILexicalBlock(scope: !4799, file: !3, line: 1255, column: 11)
!4799 = distinct !DILexicalBlock(scope: !4800, file: !3, line: 1250, column: 5)
!4800 = distinct !DILexicalBlock(scope: !4801, file: !3, line: 1249, column: 3)
!4801 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1249, column: 3)
!4802 = !DILocation(line: 1249, column: 8, scope: !4801)
!4803 = !DILocation(line: 0, scope: !4801)
!4804 = !DILocation(line: 1249, column: 17, scope: !4800)
!4805 = !DILocation(line: 1249, column: 3, scope: !4801)
!4806 = !DILocation(line: 1251, column: 12, scope: !4799)
!4807 = !DILocation(line: 1252, column: 20, scope: !4799)
!4808 = !DILocation(line: 1252, column: 18, scope: !4799)
!4809 = !DILocation(line: 1253, column: 7, scope: !4799)
!4810 = !DILocation(line: 1261, column: 13, scope: !4799)
!4811 = !DILocation(line: 1262, column: 11, scope: !4812)
!4812 = distinct !DILexicalBlock(scope: !4799, file: !3, line: 1262, column: 11)
!4813 = !DILocation(line: 1262, column: 11, scope: !4799)
!4814 = !DILocation(line: 1249, column: 23, scope: !4800)
!4815 = !DILocation(line: 1249, column: 3, scope: !4800)
!4816 = distinct !{!4816, !4805, !4817}
!4817 = !DILocation(line: 1264, column: 5, scope: !4801)
!4818 = !DILocation(line: 1266, column: 7, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1266, column: 7)
!4820 = !DILocation(line: 1257, column: 20, scope: !4797)
!4821 = !DILocation(line: 1257, column: 31, scope: !4797)
!4822 = !DILocation(line: 1257, column: 35, scope: !4797)
!4823 = !DILocation(line: 1257, column: 34, scope: !4797)
!4824 = !DILocation(line: 1257, column: 19, scope: !4797)
!4825 = !DILocation(line: 1257, column: 17, scope: !4797)
!4826 = !DILocation(line: 1259, column: 17, scope: !4797)
!4827 = !DILocation(line: 1259, column: 15, scope: !4797)
!4828 = !DILocation(line: 1266, column: 7, scope: !4737)
!4829 = !DILocation(line: 1268, column: 18, scope: !4830)
!4830 = distinct !DILexicalBlock(scope: !4819, file: !3, line: 1267, column: 5)
!4831 = !DILocation(line: 1269, column: 20, scope: !4830)
!4832 = !DILocation(line: 1270, column: 5, scope: !4830)
!4833 = !DILocation(line: 1272, column: 7, scope: !4737)
!4834 = !DILocation(line: 1273, column: 8, scope: !4835)
!4835 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 1273, column: 3)
!4836 = !DILocation(line: 0, scope: !4835)
!4837 = !DILocation(line: 1273, column: 17, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4835, file: !3, line: 1273, column: 3)
!4839 = !DILocation(line: 1273, column: 3, scope: !4835)
!4840 = !DILocation(line: 1275, column: 12, scope: !4841)
!4841 = distinct !DILexicalBlock(scope: !4838, file: !3, line: 1274, column: 5)
!4842 = !DILocation(line: 1276, column: 13, scope: !4841)
!4843 = !DILocation(line: 1277, column: 11, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4841, file: !3, line: 1277, column: 11)
!4845 = !DILocation(line: 1277, column: 11, scope: !4841)
!4846 = !DILocation(line: 1273, column: 23, scope: !4838)
!4847 = !DILocation(line: 1273, column: 3, scope: !4838)
!4848 = distinct !{!4848, !4839, !4849}
!4849 = !DILocation(line: 1279, column: 5, scope: !4835)
!4850 = distinct !DISubprogram(name: "gimple_omp_continue_control_def_ptr", scope: !6, file: !6, line: 4195, type: !4724, scopeLine: 4196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4851)
!4851 = !{!4852}
!4852 = !DILocalVariable(name: "g", arg: 1, scope: !4850, file: !6, line: 4195, type: !379)
!4853 = !DILocation(line: 0, scope: !4850)
!4854 = !DILocation(line: 4198, column: 34, scope: !4850)
!4855 = !DILocation(line: 4198, column: 3, scope: !4850)
!4856 = distinct !DISubprogram(name: "gimple_omp_continue_control_use_ptr", scope: !6, file: !6, line: 4224, type: !4724, scopeLine: 4225, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4857)
!4857 = !{!4858}
!4858 = !DILocalVariable(name: "g", arg: 1, scope: !4856, file: !6, line: 4224, type: !379)
!4859 = !DILocation(line: 0, scope: !4856)
!4860 = !DILocation(line: 4227, column: 34, scope: !4856)
!4861 = !DILocation(line: 4227, column: 3, scope: !4856)
!4862 = distinct !DISubprogram(name: "gimple_omp_critical_name_ptr", scope: !6, file: !6, line: 3390, type: !4724, scopeLine: 3391, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4863)
!4863 = !{!4864}
!4864 = !DILocalVariable(name: "gs", arg: 1, scope: !4862, file: !6, line: 3390, type: !379)
!4865 = !DILocation(line: 0, scope: !4862)
!4866 = !DILocation(line: 3393, column: 35, scope: !4862)
!4867 = !DILocation(line: 3393, column: 3, scope: !4862)
!4868 = distinct !DISubprogram(name: "gimple_omp_for_clauses_ptr", scope: !6, file: !6, line: 3420, type: !4724, scopeLine: 3421, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4869)
!4869 = !{!4870}
!4870 = !DILocalVariable(name: "gs", arg: 1, scope: !4868, file: !6, line: 3420, type: !379)
!4871 = !DILocation(line: 0, scope: !4868)
!4872 = !DILocation(line: 3423, column: 30, scope: !4868)
!4873 = !DILocation(line: 3423, column: 3, scope: !4868)
!4874 = distinct !DISubprogram(name: "gimple_omp_for_collapse", scope: !6, file: !6, line: 3440, type: !4875, scopeLine: 3441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4877)
!4875 = !DISubroutineType(types: !4876)
!4876 = !{!760, !379}
!4877 = !{!4878}
!4878 = !DILocalVariable(name: "gs", arg: 1, scope: !4874, file: !6, line: 3440, type: !379)
!4879 = !DILocation(line: 0, scope: !4874)
!4880 = !DILocation(line: 3443, column: 29, scope: !4874)
!4881 = !DILocation(line: 3443, column: 3, scope: !4874)
!4882 = distinct !DISubprogram(name: "gimple_omp_for_index_ptr", scope: !6, file: !6, line: 3461, type: !4883, scopeLine: 3462, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4885)
!4883 = !DISubroutineType(types: !4884)
!4884 = !{!908, !379, !760}
!4885 = !{!4886, !4887}
!4886 = !DILocalVariable(name: "gs", arg: 1, scope: !4882, file: !6, line: 3461, type: !379)
!4887 = !DILocalVariable(name: "i", arg: 2, scope: !4882, file: !6, line: 3461, type: !760)
!4888 = !DILocation(line: 0, scope: !4882)
!4889 = !DILocation(line: 3464, column: 3, scope: !4882)
!4890 = !DILocation(line: 3465, column: 30, scope: !4882)
!4891 = !DILocation(line: 3465, column: 38, scope: !4882)
!4892 = !DILocation(line: 3465, column: 3, scope: !4882)
!4893 = distinct !DISubprogram(name: "gimple_omp_for_initial_ptr", scope: !6, file: !6, line: 3494, type: !4883, scopeLine: 3495, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4894)
!4894 = !{!4895, !4896}
!4895 = !DILocalVariable(name: "gs", arg: 1, scope: !4893, file: !6, line: 3494, type: !379)
!4896 = !DILocalVariable(name: "i", arg: 2, scope: !4893, file: !6, line: 3494, type: !760)
!4897 = !DILocation(line: 0, scope: !4893)
!4898 = !DILocation(line: 3497, column: 3, scope: !4893)
!4899 = !DILocation(line: 3498, column: 30, scope: !4893)
!4900 = !DILocation(line: 3498, column: 38, scope: !4893)
!4901 = !DILocation(line: 3498, column: 3, scope: !4893)
!4902 = distinct !DISubprogram(name: "gimple_omp_for_final_ptr", scope: !6, file: !6, line: 3527, type: !4883, scopeLine: 3528, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4903)
!4903 = !{!4904, !4905}
!4904 = !DILocalVariable(name: "gs", arg: 1, scope: !4902, file: !6, line: 3527, type: !379)
!4905 = !DILocalVariable(name: "i", arg: 2, scope: !4902, file: !6, line: 3527, type: !760)
!4906 = !DILocation(line: 0, scope: !4902)
!4907 = !DILocation(line: 3530, column: 3, scope: !4902)
!4908 = !DILocation(line: 3531, column: 30, scope: !4902)
!4909 = !DILocation(line: 3531, column: 38, scope: !4902)
!4910 = !DILocation(line: 3531, column: 3, scope: !4902)
!4911 = distinct !DISubprogram(name: "gimple_omp_for_incr_ptr", scope: !6, file: !6, line: 3560, type: !4883, scopeLine: 3561, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4912)
!4912 = !{!4913, !4914}
!4913 = !DILocalVariable(name: "gs", arg: 1, scope: !4911, file: !6, line: 3560, type: !379)
!4914 = !DILocalVariable(name: "i", arg: 2, scope: !4911, file: !6, line: 3560, type: !760)
!4915 = !DILocation(line: 0, scope: !4911)
!4916 = !DILocation(line: 3563, column: 3, scope: !4911)
!4917 = !DILocation(line: 3564, column: 30, scope: !4911)
!4918 = !DILocation(line: 3564, column: 38, scope: !4911)
!4919 = !DILocation(line: 3564, column: 3, scope: !4911)
!4920 = distinct !DISubprogram(name: "gimple_omp_parallel_clauses_ptr", scope: !6, file: !6, line: 3614, type: !4724, scopeLine: 3615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4921)
!4921 = !{!4922}
!4922 = !DILocalVariable(name: "gs", arg: 1, scope: !4920, file: !6, line: 3614, type: !379)
!4923 = !DILocation(line: 0, scope: !4920)
!4924 = !DILocation(line: 3617, column: 35, scope: !4920)
!4925 = !DILocation(line: 3617, column: 3, scope: !4920)
!4926 = distinct !DISubprogram(name: "gimple_omp_parallel_child_fn_ptr", scope: !6, file: !6, line: 3645, type: !4724, scopeLine: 3646, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4927)
!4927 = !{!4928}
!4928 = !DILocalVariable(name: "gs", arg: 1, scope: !4926, file: !6, line: 3645, type: !379)
!4929 = !DILocation(line: 0, scope: !4926)
!4930 = !DILocation(line: 3648, column: 35, scope: !4926)
!4931 = !DILocation(line: 3648, column: 3, scope: !4926)
!4932 = distinct !DISubprogram(name: "gimple_omp_parallel_data_arg_ptr", scope: !6, file: !6, line: 3676, type: !4724, scopeLine: 3677, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4933)
!4933 = !{!4934}
!4934 = !DILocalVariable(name: "gs", arg: 1, scope: !4932, file: !6, line: 3676, type: !379)
!4935 = !DILocation(line: 0, scope: !4932)
!4936 = !DILocation(line: 3679, column: 35, scope: !4932)
!4937 = !DILocation(line: 3679, column: 3, scope: !4932)
!4938 = distinct !DISubprogram(name: "gimple_omp_task_clauses_ptr", scope: !6, file: !6, line: 3706, type: !4724, scopeLine: 3707, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4939)
!4939 = !{!4940}
!4940 = !DILocalVariable(name: "gs", arg: 1, scope: !4938, file: !6, line: 3706, type: !379)
!4941 = !DILocation(line: 0, scope: !4938)
!4942 = !DILocation(line: 3709, column: 35, scope: !4938)
!4943 = !DILocation(line: 3709, column: 3, scope: !4938)
!4944 = distinct !DISubprogram(name: "gimple_omp_task_child_fn_ptr", scope: !6, file: !6, line: 3737, type: !4724, scopeLine: 3738, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4945)
!4945 = !{!4946}
!4946 = !DILocalVariable(name: "gs", arg: 1, scope: !4944, file: !6, line: 3737, type: !379)
!4947 = !DILocation(line: 0, scope: !4944)
!4948 = !DILocation(line: 3740, column: 35, scope: !4944)
!4949 = !DILocation(line: 3740, column: 3, scope: !4944)
!4950 = distinct !DISubprogram(name: "gimple_omp_task_data_arg_ptr", scope: !6, file: !6, line: 3768, type: !4724, scopeLine: 3769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4951)
!4951 = !{!4952}
!4952 = !DILocalVariable(name: "gs", arg: 1, scope: !4950, file: !6, line: 3768, type: !379)
!4953 = !DILocation(line: 0, scope: !4950)
!4954 = !DILocation(line: 3771, column: 35, scope: !4950)
!4955 = !DILocation(line: 3771, column: 3, scope: !4950)
!4956 = distinct !DISubprogram(name: "gimple_omp_task_copy_fn_ptr", scope: !6, file: !6, line: 3899, type: !4724, scopeLine: 3900, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4957)
!4957 = !{!4958}
!4958 = !DILocalVariable(name: "gs", arg: 1, scope: !4956, file: !6, line: 3899, type: !379)
!4959 = !DILocation(line: 0, scope: !4956)
!4960 = !DILocation(line: 3902, column: 31, scope: !4956)
!4961 = !DILocation(line: 3902, column: 3, scope: !4956)
!4962 = distinct !DISubprogram(name: "gimple_omp_task_arg_size_ptr", scope: !6, file: !6, line: 3929, type: !4724, scopeLine: 3930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4963)
!4963 = !{!4964}
!4964 = !DILocalVariable(name: "gs", arg: 1, scope: !4962, file: !6, line: 3929, type: !379)
!4965 = !DILocation(line: 0, scope: !4962)
!4966 = !DILocation(line: 3932, column: 31, scope: !4962)
!4967 = !DILocation(line: 3932, column: 3, scope: !4962)
!4968 = distinct !DISubprogram(name: "gimple_omp_task_arg_align_ptr", scope: !6, file: !6, line: 3959, type: !4724, scopeLine: 3960, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4969)
!4969 = !{!4970}
!4970 = !DILocalVariable(name: "gs", arg: 1, scope: !4968, file: !6, line: 3959, type: !379)
!4971 = !DILocation(line: 0, scope: !4968)
!4972 = !DILocation(line: 3962, column: 31, scope: !4968)
!4973 = !DILocation(line: 3962, column: 3, scope: !4968)
!4974 = distinct !DISubprogram(name: "gimple_omp_sections_clauses_ptr", scope: !6, file: !6, line: 4019, type: !4724, scopeLine: 4020, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4975)
!4975 = !{!4976}
!4976 = !DILocalVariable(name: "gs", arg: 1, scope: !4974, file: !6, line: 4019, type: !379)
!4977 = !DILocation(line: 0, scope: !4974)
!4978 = !DILocation(line: 4022, column: 35, scope: !4974)
!4979 = !DILocation(line: 4022, column: 3, scope: !4974)
!4980 = distinct !DISubprogram(name: "gimple_omp_sections_control_ptr", scope: !6, file: !6, line: 4052, type: !4724, scopeLine: 4053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4981)
!4981 = !{!4982}
!4982 = !DILocalVariable(name: "gs", arg: 1, scope: !4980, file: !6, line: 4052, type: !379)
!4983 = !DILocation(line: 0, scope: !4980)
!4984 = !DILocation(line: 4055, column: 35, scope: !4980)
!4985 = !DILocation(line: 4055, column: 3, scope: !4980)
!4986 = distinct !DISubprogram(name: "gimple_omp_single_clauses_ptr", scope: !6, file: !6, line: 3989, type: !4724, scopeLine: 3990, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4987)
!4987 = !{!4988}
!4988 = !DILocalVariable(name: "gs", arg: 1, scope: !4986, file: !6, line: 3989, type: !379)
!4989 = !DILocation(line: 0, scope: !4986)
!4990 = !DILocation(line: 3992, column: 33, scope: !4986)
!4991 = !DILocation(line: 3992, column: 3, scope: !4986)
!4992 = distinct !DISubprogram(name: "gimple_omp_atomic_load_lhs_ptr", scope: !6, file: !6, line: 4146, type: !4724, scopeLine: 4147, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4993)
!4993 = !{!4994}
!4994 = !DILocalVariable(name: "g", arg: 1, scope: !4992, file: !6, line: 4146, type: !379)
!4995 = !DILocation(line: 0, scope: !4992)
!4996 = !DILocation(line: 4149, column: 37, scope: !4992)
!4997 = !DILocation(line: 4149, column: 3, scope: !4992)
!4998 = distinct !DISubprogram(name: "gimple_omp_atomic_load_rhs_ptr", scope: !6, file: !6, line: 4176, type: !4724, scopeLine: 4177, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4999)
!4999 = !{!5000}
!5000 = !DILocalVariable(name: "g", arg: 1, scope: !4998, file: !6, line: 4176, type: !379)
!5001 = !DILocation(line: 0, scope: !4998)
!5002 = !DILocation(line: 4179, column: 37, scope: !4998)
!5003 = !DILocation(line: 4179, column: 3, scope: !4998)
!5004 = distinct !DISubprogram(name: "gimple_omp_atomic_store_val_ptr", scope: !6, file: !6, line: 4116, type: !4724, scopeLine: 4117, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5005)
!5005 = !{!5006}
!5006 = !DILocalVariable(name: "g", arg: 1, scope: !5004, file: !6, line: 4116, type: !379)
!5007 = !DILocation(line: 0, scope: !5004)
!5008 = !DILocation(line: 4119, column: 38, scope: !5004)
!5009 = !DILocation(line: 4119, column: 3, scope: !5004)
!5010 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !6, file: !6, line: 1073, type: !5011, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5013)
!5011 = !DISubroutineType(types: !5012)
!5012 = !{!5, !379}
!5013 = !{!5014}
!5014 = !DILocalVariable(name: "gs", arg: 1, scope: !5010, file: !6, line: 1073, type: !379)
!5015 = !DILocation(line: 0, scope: !5010)
!5016 = !DILocation(line: 1075, column: 24, scope: !5010)
!5017 = !DILocation(line: 1075, column: 10, scope: !5010)
!5018 = !DILocation(line: 1075, column: 3, scope: !5010)
!5019 = distinct !DISubprogram(name: "gimple_has_location", scope: !6, file: !6, line: 1165, type: !3940, scopeLine: 1166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5020)
!5020 = !{!5021}
!5021 = !DILocalVariable(name: "g", arg: 1, scope: !5019, file: !6, line: 1165, type: !3301)
!5022 = !DILocation(line: 0, scope: !5019)
!5023 = !DILocation(line: 1167, column: 10, scope: !5019)
!5024 = !DILocation(line: 1167, column: 30, scope: !5019)
!5025 = !DILocation(line: 1167, column: 3, scope: !5019)
!5026 = distinct !DISubprogram(name: "gimple_bind_body", scope: !6, file: !6, line: 2517, type: !5027, scopeLine: 2518, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5029)
!5027 = !DISubroutineType(types: !5028)
!5028 = !{!430, !379}
!5029 = !{!5030}
!5030 = !DILocalVariable(name: "gs", arg: 1, scope: !5026, file: !6, line: 2517, type: !379)
!5031 = !DILocation(line: 0, scope: !5026)
!5032 = !DILocation(line: 2520, column: 26, scope: !5026)
!5033 = !DILocation(line: 2520, column: 3, scope: !5026)
!5034 = distinct !DISubprogram(name: "gimple_catch_handler", scope: !6, file: !6, line: 2806, type: !5027, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5035)
!5035 = !{!5036}
!5036 = !DILocalVariable(name: "gs", arg: 1, scope: !5034, file: !6, line: 2806, type: !379)
!5037 = !DILocation(line: 0, scope: !5034)
!5038 = !DILocation(line: 2809, column: 27, scope: !5034)
!5039 = !DILocation(line: 2809, column: 3, scope: !5034)
!5040 = distinct !DISubprogram(name: "gimple_eh_filter_failure", scope: !6, file: !6, line: 2869, type: !5027, scopeLine: 2870, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5041)
!5041 = !{!5042}
!5042 = !DILocalVariable(name: "gs", arg: 1, scope: !5040, file: !6, line: 2869, type: !379)
!5043 = !DILocation(line: 0, scope: !5040)
!5044 = !DILocation(line: 2872, column: 31, scope: !5040)
!5045 = !DILocation(line: 2872, column: 3, scope: !5040)
!5046 = distinct !DISubprogram(name: "gimple_try_eval", scope: !6, file: !6, line: 2953, type: !5027, scopeLine: 2954, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5047)
!5047 = !{!5048}
!5048 = !DILocalVariable(name: "gs", arg: 1, scope: !5046, file: !6, line: 2953, type: !379)
!5049 = !DILocation(line: 0, scope: !5046)
!5050 = !DILocation(line: 2956, column: 25, scope: !5046)
!5051 = !DILocation(line: 2956, column: 3, scope: !5046)
!5052 = distinct !DISubprogram(name: "gimple_try_cleanup", scope: !6, file: !6, line: 2964, type: !5027, scopeLine: 2965, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5053)
!5053 = !{!5054}
!5054 = !DILocalVariable(name: "gs", arg: 1, scope: !5052, file: !6, line: 2964, type: !379)
!5055 = !DILocation(line: 0, scope: !5052)
!5056 = !DILocation(line: 2967, column: 25, scope: !5052)
!5057 = !DILocation(line: 2967, column: 3, scope: !5052)
!5058 = distinct !DISubprogram(name: "gimple_omp_for_pre_body", scope: !6, file: !6, line: 3583, type: !5027, scopeLine: 3584, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5059)
!5059 = !{!5060}
!5060 = !DILocalVariable(name: "gs", arg: 1, scope: !5058, file: !6, line: 3583, type: !379)
!5061 = !DILocation(line: 0, scope: !5058)
!5062 = !DILocation(line: 3586, column: 29, scope: !5058)
!5063 = !DILocation(line: 3586, column: 3, scope: !5058)
!5064 = distinct !DISubprogram(name: "gimple_omp_body", scope: !6, file: !6, line: 3363, type: !5027, scopeLine: 3364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5065)
!5065 = !{!5066}
!5066 = !DILocalVariable(name: "gs", arg: 1, scope: !5064, file: !6, line: 3363, type: !379)
!5067 = !DILocation(line: 0, scope: !5064)
!5068 = !DILocation(line: 3365, column: 18, scope: !5064)
!5069 = !DILocation(line: 3365, column: 3, scope: !5064)
!5070 = distinct !DISubprogram(name: "gimple_wce_cleanup", scope: !6, file: !6, line: 3009, type: !5027, scopeLine: 3010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5071)
!5071 = !{!5072}
!5072 = !DILocalVariable(name: "gs", arg: 1, scope: !5070, file: !6, line: 3009, type: !379)
!5073 = !DILocation(line: 0, scope: !5070)
!5074 = !DILocation(line: 3012, column: 25, scope: !5070)
!5075 = !DILocation(line: 3012, column: 3, scope: !5070)
!5076 = distinct !DISubprogram(name: "gimple_has_substatements", scope: !6, file: !6, line: 1083, type: !3913, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5077)
!5077 = !{!5078}
!5078 = !DILocalVariable(name: "g", arg: 1, scope: !5076, file: !6, line: 1083, type: !379)
!5079 = !DILocation(line: 0, scope: !5076)
!5080 = !DILocation(line: 1085, column: 11, scope: !5076)
!5081 = !DILocation(line: 1085, column: 3, scope: !5076)
!5082 = !DILocation(line: 1104, column: 7, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5076, file: !6, line: 1086, column: 5)
!5084 = !DILocation(line: 0, scope: !5083)
!5085 = !DILocation(line: 1106, column: 1, scope: !5076)
!5086 = distinct !DISubprogram(name: "gimple_set_body", scope: !3, file: !3, line: 1682, type: !5087, scopeLine: 1683, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5089)
!5087 = !DISubroutineType(types: !5088)
!5088 = !{null, !450, !430}
!5089 = !{!5090, !5091, !5092}
!5090 = !DILocalVariable(name: "fndecl", arg: 1, scope: !5086, file: !3, line: 1682, type: !450)
!5091 = !DILocalVariable(name: "seq", arg: 2, scope: !5086, file: !3, line: 1682, type: !430)
!5092 = !DILocalVariable(name: "fn", scope: !5086, file: !3, line: 1684, type: !688)
!5093 = !DILocation(line: 0, scope: !5086)
!5094 = !DILocation(line: 1684, column: 25, scope: !5086)
!5095 = !DILocation(line: 1685, column: 10, scope: !5096)
!5096 = distinct !DILexicalBlock(scope: !5086, file: !3, line: 1685, column: 7)
!5097 = !DILocation(line: 1685, column: 7, scope: !5086)
!5098 = !DILocation(line: 1690, column: 7, scope: !5099)
!5099 = distinct !DILexicalBlock(scope: !5096, file: !3, line: 1686, column: 5)
!5100 = !DILocation(line: 1693, column: 9, scope: !5096)
!5101 = !DILocation(line: 1693, column: 21, scope: !5096)
!5102 = !DILocation(line: 1694, column: 1, scope: !5086)
!5103 = distinct !DISubprogram(name: "gimple_body", scope: !3, file: !3, line: 1700, type: !5104, scopeLine: 1701, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5106)
!5104 = !DISubroutineType(types: !5105)
!5105 = !{!430, !450}
!5106 = !{!5107, !5108}
!5107 = !DILocalVariable(name: "fndecl", arg: 1, scope: !5103, file: !3, line: 1700, type: !450)
!5108 = !DILocalVariable(name: "fn", scope: !5103, file: !3, line: 1702, type: !688)
!5109 = !DILocation(line: 0, scope: !5103)
!5110 = !DILocation(line: 1702, column: 25, scope: !5103)
!5111 = !DILocation(line: 1703, column: 10, scope: !5103)
!5112 = !DILocation(line: 1703, column: 19, scope: !5103)
!5113 = !DILocation(line: 1703, column: 3, scope: !5103)
!5114 = distinct !DISubprogram(name: "gimple_has_body_p", scope: !3, file: !3, line: 1709, type: !2305, scopeLine: 1710, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5115)
!5115 = !{!5116, !5117}
!5116 = !DILocalVariable(name: "fndecl", arg: 1, scope: !5114, file: !3, line: 1709, type: !450)
!5117 = !DILocalVariable(name: "fn", scope: !5114, file: !3, line: 1711, type: !688)
!5118 = !DILocation(line: 0, scope: !5114)
!5119 = !DILocation(line: 1711, column: 25, scope: !5114)
!5120 = !DILocation(line: 1712, column: 11, scope: !5114)
!5121 = !DILocation(line: 1712, column: 32, scope: !5114)
!5122 = !DILocation(line: 1712, column: 36, scope: !5114)
!5123 = !DILocation(line: 1712, column: 39, scope: !5114)
!5124 = !DILocation(line: 1712, column: 46, scope: !5114)
!5125 = !DILocation(line: 1712, column: 3, scope: !5114)
!5126 = distinct !DISubprogram(name: "gimple_call_flags", scope: !3, file: !3, line: 1719, type: !5127, scopeLine: 1720, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5129)
!5127 = !DISubroutineType(types: !5128)
!5128 = !{!372, !3301}
!5129 = !{!5130, !5131, !5132, !5133}
!5130 = !DILocalVariable(name: "stmt", arg: 1, scope: !5126, file: !3, line: 1719, type: !3301)
!5131 = !DILocalVariable(name: "flags", scope: !5126, file: !3, line: 1721, type: !372)
!5132 = !DILocalVariable(name: "decl", scope: !5126, file: !3, line: 1722, type: !450)
!5133 = !DILocalVariable(name: "t", scope: !5126, file: !3, line: 1723, type: !450)
!5134 = !DILocation(line: 0, scope: !5126)
!5135 = !DILocation(line: 1722, column: 15, scope: !5126)
!5136 = !DILocation(line: 1725, column: 7, scope: !5137)
!5137 = distinct !DILexicalBlock(scope: !5126, file: !3, line: 1725, column: 7)
!5138 = !DILocation(line: 1725, column: 7, scope: !5126)
!5139 = !DILocation(line: 1726, column: 13, scope: !5137)
!5140 = !DILocation(line: 1726, column: 5, scope: !5137)
!5141 = !DILocation(line: 1729, column: 11, scope: !5142)
!5142 = distinct !DILexicalBlock(scope: !5137, file: !3, line: 1728, column: 5)
!5143 = !DILocation(line: 1730, column: 11, scope: !5144)
!5144 = distinct !DILexicalBlock(scope: !5142, file: !3, line: 1730, column: 11)
!5145 = !DILocation(line: 1730, column: 13, scope: !5144)
!5146 = !DILocation(line: 1730, column: 16, scope: !5144)
!5147 = !DILocation(line: 1730, column: 30, scope: !5144)
!5148 = !DILocation(line: 1730, column: 11, scope: !5142)
!5149 = !DILocation(line: 1731, column: 35, scope: !5144)
!5150 = !DILocation(line: 1731, column: 10, scope: !5144)
!5151 = !DILocation(line: 1731, column: 2, scope: !5144)
!5152 = !DILocation(line: 0, scope: !5137)
!5153 = !DILocation(line: 1736, column: 3, scope: !5126)
!5154 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !6, file: !6, line: 1954, type: !3299, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5155)
!5155 = !{!5156, !5157}
!5156 = !DILocalVariable(name: "gs", arg: 1, scope: !5154, file: !6, line: 1954, type: !3301)
!5157 = !DILocalVariable(name: "addr", scope: !5154, file: !6, line: 1956, type: !450)
!5158 = !DILocation(line: 0, scope: !5154)
!5159 = !DILocation(line: 1956, column: 15, scope: !5154)
!5160 = !DILocation(line: 1957, column: 7, scope: !5161)
!5161 = distinct !DILexicalBlock(scope: !5154, file: !6, line: 1957, column: 7)
!5162 = !DILocation(line: 1957, column: 24, scope: !5161)
!5163 = !DILocation(line: 1957, column: 7, scope: !5154)
!5164 = !DILocation(line: 1958, column: 12, scope: !5161)
!5165 = !DILocation(line: 1958, column: 5, scope: !5161)
!5166 = !DILocation(line: 1960, column: 1, scope: !5154)
!5167 = distinct !DISubprogram(name: "gimple_call_fn", scope: !6, file: !6, line: 1911, type: !3299, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5168)
!5168 = !{!5169}
!5169 = !DILocalVariable(name: "gs", arg: 1, scope: !5167, file: !6, line: 1911, type: !3301)
!5170 = !DILocation(line: 0, scope: !5167)
!5171 = !DILocation(line: 1914, column: 10, scope: !5167)
!5172 = !DILocation(line: 1914, column: 3, scope: !5167)
!5173 = distinct !DISubprogram(name: "gimple_assign_copy_p", scope: !3, file: !3, line: 1743, type: !3913, scopeLine: 1744, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5174)
!5174 = !{!5175}
!5175 = !DILocalVariable(name: "gs", arg: 1, scope: !5173, file: !3, line: 1743, type: !379)
!5176 = !DILocation(line: 0, scope: !5173)
!5177 = !DILocation(line: 1745, column: 10, scope: !5173)
!5178 = !DILocation(line: 1745, column: 27, scope: !5173)
!5179 = !DILocation(line: 1746, column: 10, scope: !5173)
!5180 = !DILocation(line: 1746, column: 35, scope: !5173)
!5181 = !DILocation(line: 1746, column: 13, scope: !5173)
!5182 = !DILocation(line: 1747, column: 6, scope: !5173)
!5183 = !DILocation(line: 1748, column: 3, scope: !5173)
!5184 = !DILocation(line: 1748, column: 21, scope: !5173)
!5185 = !DILocation(line: 1748, column: 6, scope: !5173)
!5186 = !DILocation(line: 1745, column: 3, scope: !5173)
!5187 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !6, file: !6, line: 1815, type: !5188, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5190)
!5188 = !DISubroutineType(types: !5189)
!5189 = !{!82, !3301}
!5190 = !{!5191, !5192}
!5191 = !DILocalVariable(name: "gs", arg: 1, scope: !5187, file: !6, line: 1815, type: !3301)
!5192 = !DILocalVariable(name: "code", scope: !5187, file: !6, line: 1817, type: !82)
!5193 = !DILocation(line: 0, scope: !5187)
!5194 = !DILocation(line: 1820, column: 10, scope: !5187)
!5195 = !DILocation(line: 1821, column: 7, scope: !5196)
!5196 = distinct !DILexicalBlock(scope: !5187, file: !6, line: 1821, column: 7)
!5197 = !DILocation(line: 1821, column: 35, scope: !5196)
!5198 = !DILocation(line: 1821, column: 7, scope: !5187)
!5199 = !DILocation(line: 1822, column: 12, scope: !5196)
!5200 = !DILocation(line: 1822, column: 5, scope: !5196)
!5201 = !DILocation(line: 1824, column: 3, scope: !5187)
!5202 = distinct !DISubprogram(name: "is_gimple_val", scope: !3, file: !3, line: 2781, type: !2305, scopeLine: 2782, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5203)
!5203 = !{!5204}
!5204 = !DILocalVariable(name: "t", arg: 1, scope: !5202, file: !3, line: 2781, type: !450)
!5205 = !DILocation(line: 0, scope: !5202)
!5206 = !DILocation(line: 2784, column: 7, scope: !5207)
!5207 = distinct !DILexicalBlock(scope: !5202, file: !3, line: 2784, column: 7)
!5208 = !DILocation(line: 2785, column: 7, scope: !5207)
!5209 = !DILocation(line: 2785, column: 30, scope: !5207)
!5210 = !DILocation(line: 2785, column: 10, scope: !5207)
!5211 = !DILocation(line: 2786, column: 7, scope: !5207)
!5212 = !DILocation(line: 2786, column: 11, scope: !5207)
!5213 = !DILocation(line: 2784, column: 7, scope: !5202)
!5214 = !DILocation(line: 2789, column: 11, scope: !5202)
!5215 = !DILocation(line: 2789, column: 34, scope: !5202)
!5216 = !DILocation(line: 2789, column: 37, scope: !5202)
!5217 = !DILocation(line: 2789, column: 3, scope: !5202)
!5218 = !DILocation(line: 2790, column: 1, scope: !5202)
!5219 = distinct !DISubprogram(name: "gimple_op", scope: !6, file: !6, line: 1631, type: !5220, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5222)
!5220 = !DISubroutineType(types: !5221)
!5221 = !{!450, !3301, !7}
!5222 = !{!5223, !5224}
!5223 = !DILocalVariable(name: "gs", arg: 1, scope: !5219, file: !6, line: 1631, type: !3301)
!5224 = !DILocalVariable(name: "i", arg: 2, scope: !5219, file: !6, line: 1631, type: !7)
!5225 = !DILocation(line: 0, scope: !5219)
!5226 = !DILocation(line: 1633, column: 7, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5219, file: !6, line: 1633, column: 7)
!5228 = !DILocation(line: 1633, column: 7, scope: !5219)
!5229 = !DILocation(line: 1638, column: 14, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !5227, file: !6, line: 1634, column: 5)
!5231 = !DILocation(line: 1638, column: 7, scope: !5230)
!5232 = !DILocation(line: 0, scope: !5227)
!5233 = !DILocation(line: 1642, column: 1, scope: !5219)
!5234 = distinct !DISubprogram(name: "gimple_assign_ssa_name_copy_p", scope: !3, file: !3, line: 1755, type: !3913, scopeLine: 1756, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5235)
!5235 = !{!5236}
!5236 = !DILocalVariable(name: "gs", arg: 1, scope: !5234, file: !3, line: 1755, type: !379)
!5237 = !DILocation(line: 0, scope: !5234)
!5238 = !DILocation(line: 1757, column: 11, scope: !5234)
!5239 = !DILocation(line: 1757, column: 28, scope: !5234)
!5240 = !DILocation(line: 1758, column: 4, scope: !5234)
!5241 = !DILocation(line: 1758, column: 30, scope: !5234)
!5242 = !DILocation(line: 1758, column: 8, scope: !5234)
!5243 = !DILocation(line: 1759, column: 8, scope: !5234)
!5244 = !DILocation(line: 1760, column: 4, scope: !5234)
!5245 = !DILocation(line: 1760, column: 7, scope: !5234)
!5246 = !DILocation(line: 1760, column: 42, scope: !5234)
!5247 = !DILocation(line: 1761, column: 4, scope: !5234)
!5248 = !DILocation(line: 1761, column: 7, scope: !5234)
!5249 = !DILocation(line: 1761, column: 43, scope: !5234)
!5250 = !DILocation(line: 1757, column: 3, scope: !5234)
!5251 = distinct !DISubprogram(name: "gimple_assign_unary_nop_p", scope: !3, file: !3, line: 1794, type: !3913, scopeLine: 1795, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5252)
!5252 = !{!5253}
!5253 = !DILocalVariable(name: "gs", arg: 1, scope: !5251, file: !3, line: 1794, type: !379)
!5254 = !DILocation(line: 0, scope: !5251)
!5255 = !DILocation(line: 1796, column: 11, scope: !5251)
!5256 = !DILocation(line: 1796, column: 28, scope: !5251)
!5257 = !DILocation(line: 1797, column: 11, scope: !5251)
!5258 = !DILocation(line: 1797, column: 15, scope: !5251)
!5259 = !DILocation(line: 1798, column: 15, scope: !5251)
!5260 = !DILocation(line: 1798, column: 18, scope: !5251)
!5261 = !DILocation(line: 1798, column: 46, scope: !5251)
!5262 = !DILocation(line: 1799, column: 11, scope: !5251)
!5263 = !DILocation(line: 1799, column: 14, scope: !5251)
!5264 = !DILocation(line: 1799, column: 41, scope: !5251)
!5265 = !DILocation(line: 1799, column: 38, scope: !5251)
!5266 = !DILocation(line: 1800, column: 11, scope: !5251)
!5267 = !DILocation(line: 1800, column: 15, scope: !5251)
!5268 = !DILocation(line: 1801, column: 18, scope: !5251)
!5269 = !DILocation(line: 1801, column: 15, scope: !5251)
!5270 = !DILocation(line: 1796, column: 3, scope: !5251)
!5271 = distinct !DISubprogram(name: "gimple_set_bb", scope: !3, file: !3, line: 1807, type: !5272, scopeLine: 1808, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5274)
!5272 = !DISubroutineType(types: !5273)
!5273 = !{null, !379, !700}
!5274 = !{!5275, !5276, !5277, !5280, !5281, !5284}
!5275 = !DILocalVariable(name: "stmt", arg: 1, scope: !5271, file: !3, line: 1807, type: !379)
!5276 = !DILocalVariable(name: "bb", arg: 2, scope: !5271, file: !3, line: 1807, type: !700)
!5277 = !DILocalVariable(name: "t", scope: !5278, file: !3, line: 1815, type: !450)
!5278 = distinct !DILexicalBlock(scope: !5279, file: !3, line: 1814, column: 5)
!5279 = distinct !DILexicalBlock(scope: !5271, file: !3, line: 1813, column: 7)
!5280 = !DILocalVariable(name: "uid", scope: !5278, file: !3, line: 1816, type: !372)
!5281 = !DILocalVariable(name: "old_len", scope: !5282, file: !3, line: 1822, type: !7)
!5282 = distinct !DILexicalBlock(scope: !5283, file: !3, line: 1821, column: 2)
!5283 = distinct !DILexicalBlock(scope: !5278, file: !3, line: 1820, column: 11)
!5284 = !DILocalVariable(name: "new_len", scope: !5285, file: !3, line: 1826, type: !7)
!5285 = distinct !DILexicalBlock(scope: !5286, file: !3, line: 1825, column: 6)
!5286 = distinct !DILexicalBlock(scope: !5282, file: !3, line: 1824, column: 8)
!5287 = !DILocation(line: 0, scope: !5271)
!5288 = !DILocation(line: 1809, column: 16, scope: !5271)
!5289 = !DILocation(line: 1809, column: 19, scope: !5271)
!5290 = !DILocation(line: 1813, column: 7, scope: !5279)
!5291 = !DILocation(line: 1813, column: 13, scope: !5279)
!5292 = !DILocation(line: 1813, column: 17, scope: !5279)
!5293 = !DILocation(line: 1813, column: 20, scope: !5279)
!5294 = !DILocation(line: 1813, column: 39, scope: !5279)
!5295 = !DILocation(line: 1813, column: 7, scope: !5271)
!5296 = !DILocation(line: 1818, column: 11, scope: !5278)
!5297 = !DILocation(line: 0, scope: !5278)
!5298 = !DILocation(line: 1819, column: 13, scope: !5278)
!5299 = !DILocation(line: 1820, column: 15, scope: !5283)
!5300 = !DILocation(line: 1820, column: 11, scope: !5278)
!5301 = !DILocation(line: 1822, column: 23, scope: !5282)
!5302 = !DILocation(line: 0, scope: !5282)
!5303 = !DILocation(line: 1823, column: 31, scope: !5282)
!5304 = !DILocation(line: 1823, column: 37, scope: !5282)
!5305 = !DILocation(line: 1823, column: 42, scope: !5282)
!5306 = !DILocation(line: 1823, column: 56, scope: !5282)
!5307 = !DILocation(line: 1823, column: 23, scope: !5282)
!5308 = !DILocation(line: 1824, column: 16, scope: !5286)
!5309 = !DILocation(line: 1824, column: 8, scope: !5282)
!5310 = !DILocation(line: 1826, column: 29, scope: !5285)
!5311 = !DILocation(line: 1826, column: 35, scope: !5285)
!5312 = !DILocation(line: 1826, column: 39, scope: !5285)
!5313 = !DILocation(line: 0, scope: !5285)
!5314 = !DILocation(line: 1828, column: 8, scope: !5285)
!5315 = !DILocation(line: 1830, column: 6, scope: !5285)
!5316 = !DILocation(line: 1833, column: 7, scope: !5278)
!5317 = !DILocation(line: 1834, column: 5, scope: !5278)
!5318 = !DILocation(line: 1835, column: 1, scope: !5271)
!5319 = distinct !DISubprogram(name: "gimple_label_label", scope: !6, file: !6, line: 2444, type: !3299, scopeLine: 2445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5320)
!5320 = !{!5321}
!5321 = !DILocalVariable(name: "gs", arg: 1, scope: !5319, file: !6, line: 2444, type: !3301)
!5322 = !DILocation(line: 0, scope: !5319)
!5323 = !DILocation(line: 2447, column: 10, scope: !5319)
!5324 = !DILocation(line: 2447, column: 3, scope: !5319)
!5325 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !34, file: !34, line: 281, type: !5326, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5330)
!5326 = !DISubroutineType(types: !5327)
!5327 = !{!7, !5328}
!5328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5329, size: 64)
!5329 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !708)
!5330 = !{!5331}
!5331 = !DILocalVariable(name: "vec_", arg: 1, scope: !5325, file: !34, line: 281, type: !5328)
!5332 = !DILocation(line: 0, scope: !5325)
!5333 = !DILocation(line: 281, column: 1, scope: !5325)
!5334 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow_cleared", scope: !34, file: !34, line: 282, type: !5335, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5338)
!5335 = !DISubroutineType(types: !5336)
!5336 = !{null, !5337, !372}
!5337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !703, size: 64)
!5338 = !{!5339, !5340, !5341}
!5339 = !DILocalVariable(name: "vec_", arg: 1, scope: !5334, file: !34, line: 282, type: !5337)
!5340 = !DILocalVariable(name: "size_", arg: 2, scope: !5334, file: !34, line: 282, type: !372)
!5341 = !DILocalVariable(name: "oldsize", scope: !5334, file: !34, line: 282, type: !372)
!5342 = !DILocation(line: 0, scope: !5334)
!5343 = !DILocation(line: 282, column: 1, scope: !5334)
!5344 = distinct !DISubprogram(name: "VEC_basic_block_base_replace", scope: !34, file: !34, line: 281, type: !5345, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5348)
!5345 = !DISubroutineType(types: !5346)
!5346 = !{!700, !5347, !7, !700}
!5347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !708, size: 64)
!5348 = !{!5349, !5350, !5351, !5352}
!5349 = !DILocalVariable(name: "vec_", arg: 1, scope: !5344, file: !34, line: 281, type: !5347)
!5350 = !DILocalVariable(name: "ix_", arg: 2, scope: !5344, file: !34, line: 281, type: !7)
!5351 = !DILocalVariable(name: "obj_", arg: 3, scope: !5344, file: !34, line: 281, type: !700)
!5352 = !DILocalVariable(name: "old_obj_", scope: !5344, file: !34, line: 281, type: !700)
!5353 = !DILocation(line: 0, scope: !5344)
!5354 = !DILocation(line: 281, column: 1, scope: !5344)
!5355 = distinct !DISubprogram(name: "gimple_assign_set_rhs_from_tree", scope: !3, file: !3, line: 1856, type: !5356, scopeLine: 1857, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5358)
!5356 = !DISubroutineType(types: !5357)
!5357 = !{null, !3951, !450}
!5358 = !{!5359, !5360, !5361, !5362, !5363}
!5359 = !DILocalVariable(name: "gsi", arg: 1, scope: !5355, file: !3, line: 1856, type: !3951)
!5360 = !DILocalVariable(name: "expr", arg: 2, scope: !5355, file: !3, line: 1856, type: !450)
!5361 = !DILocalVariable(name: "subcode", scope: !5355, file: !3, line: 1858, type: !82)
!5362 = !DILocalVariable(name: "op1", scope: !5355, file: !3, line: 1859, type: !450)
!5363 = !DILocalVariable(name: "op2", scope: !5355, file: !3, line: 1859, type: !450)
!5364 = !DILocation(line: 0, scope: !5355)
!5365 = !DILocation(line: 1858, column: 3, scope: !5355)
!5366 = !DILocation(line: 1859, column: 3, scope: !5355)
!5367 = !DILocation(line: 1861, column: 3, scope: !5355)
!5368 = !DILocation(line: 1862, column: 40, scope: !5355)
!5369 = !DILocation(line: 1862, column: 49, scope: !5355)
!5370 = !DILocation(line: 1862, column: 54, scope: !5355)
!5371 = !DILocation(line: 1862, column: 3, scope: !5355)
!5372 = !DILocation(line: 1863, column: 1, scope: !5355)
!5373 = distinct !DISubprogram(name: "gimple_assign_set_rhs_with_ops", scope: !3, file: !3, line: 1873, type: !5374, scopeLine: 1875, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5376)
!5374 = !DISubroutineType(types: !5375)
!5375 = !{null, !3951, !82, !450, !450}
!5376 = !{!5377, !5378, !5379, !5380, !5381, !5382, !5383, !5386}
!5377 = !DILocalVariable(name: "gsi", arg: 1, scope: !5373, file: !3, line: 1873, type: !3951)
!5378 = !DILocalVariable(name: "code", arg: 2, scope: !5373, file: !3, line: 1873, type: !82)
!5379 = !DILocalVariable(name: "op1", arg: 3, scope: !5373, file: !3, line: 1874, type: !450)
!5380 = !DILocalVariable(name: "op2", arg: 4, scope: !5373, file: !3, line: 1874, type: !450)
!5381 = !DILocalVariable(name: "new_rhs_ops", scope: !5373, file: !3, line: 1876, type: !7)
!5382 = !DILocalVariable(name: "stmt", scope: !5373, file: !3, line: 1877, type: !379)
!5383 = !DILocalVariable(name: "lhs", scope: !5384, file: !3, line: 1882, type: !450)
!5384 = distinct !DILexicalBlock(scope: !5385, file: !3, line: 1881, column: 5)
!5385 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 1880, column: 7)
!5386 = !DILocalVariable(name: "new_stmt", scope: !5384, file: !3, line: 1883, type: !379)
!5387 = !DILocation(line: 0, scope: !5373)
!5388 = !DILocation(line: 1876, column: 26, scope: !5373)
!5389 = !DILocation(line: 1877, column: 17, scope: !5373)
!5390 = !DILocation(line: 1880, column: 7, scope: !5385)
!5391 = !DILocation(line: 1880, column: 43, scope: !5385)
!5392 = !DILocation(line: 1880, column: 29, scope: !5385)
!5393 = !DILocation(line: 1880, column: 7, scope: !5373)
!5394 = !DILocation(line: 1882, column: 18, scope: !5384)
!5395 = !DILocation(line: 0, scope: !5384)
!5396 = !DILocation(line: 1883, column: 25, scope: !5384)
!5397 = !DILocation(line: 1884, column: 15, scope: !5384)
!5398 = !DILocation(line: 1884, column: 25, scope: !5384)
!5399 = !DILocation(line: 1884, column: 44, scope: !5384)
!5400 = !DILocation(line: 1884, column: 31, scope: !5384)
!5401 = !DILocation(line: 1884, column: 7, scope: !5384)
!5402 = !DILocation(line: 1885, column: 7, scope: !5384)
!5403 = !DILocation(line: 1890, column: 7, scope: !5384)
!5404 = !DILocation(line: 1891, column: 5, scope: !5384)
!5405 = !DILocation(line: 1893, column: 3, scope: !5373)
!5406 = !DILocation(line: 1894, column: 3, scope: !5373)
!5407 = !DILocation(line: 1895, column: 3, scope: !5373)
!5408 = !DILocation(line: 1896, column: 19, scope: !5409)
!5409 = distinct !DILexicalBlock(scope: !5373, file: !3, line: 1896, column: 7)
!5410 = !DILocation(line: 1896, column: 7, scope: !5373)
!5411 = !DILocation(line: 1897, column: 5, scope: !5409)
!5412 = !DILocation(line: 1898, column: 1, scope: !5373)
!5413 = distinct !DISubprogram(name: "gimple_get_lhs", scope: !3, file: !3, line: 1907, type: !3299, scopeLine: 1908, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5414)
!5414 = !{!5415, !5416}
!5415 = !DILocalVariable(name: "stmt", arg: 1, scope: !5413, file: !3, line: 1907, type: !3301)
!5416 = !DILocalVariable(name: "code", scope: !5413, file: !3, line: 1909, type: !276)
!5417 = !DILocation(line: 0, scope: !5413)
!5418 = !DILocation(line: 1909, column: 27, scope: !5413)
!5419 = !DILocation(line: 1911, column: 7, scope: !5413)
!5420 = !DILocation(line: 1912, column: 12, scope: !5421)
!5421 = distinct !DILexicalBlock(scope: !5413, file: !3, line: 1911, column: 7)
!5422 = !DILocation(line: 1912, column: 5, scope: !5421)
!5423 = !DILocation(line: 1914, column: 12, scope: !5424)
!5424 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 1913, column: 12)
!5425 = !DILocation(line: 1914, column: 5, scope: !5424)
!5426 = !DILocation(line: 0, scope: !5421)
!5427 = !DILocation(line: 1917, column: 1, scope: !5413)
!5428 = distinct !DISubprogram(name: "gimple_call_lhs", scope: !6, file: !6, line: 1878, type: !3299, scopeLine: 1879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5429)
!5429 = !{!5430}
!5430 = !DILocalVariable(name: "gs", arg: 1, scope: !5428, file: !6, line: 1878, type: !3301)
!5431 = !DILocation(line: 0, scope: !5428)
!5432 = !DILocation(line: 1881, column: 10, scope: !5428)
!5433 = !DILocation(line: 1881, column: 3, scope: !5428)
!5434 = distinct !DISubprogram(name: "gimple_set_lhs", scope: !3, file: !3, line: 1924, type: !2189, scopeLine: 1925, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5435)
!5435 = !{!5436, !5437, !5438}
!5436 = !DILocalVariable(name: "stmt", arg: 1, scope: !5434, file: !3, line: 1924, type: !379)
!5437 = !DILocalVariable(name: "lhs", arg: 2, scope: !5434, file: !3, line: 1924, type: !450)
!5438 = !DILocalVariable(name: "code", scope: !5434, file: !3, line: 1926, type: !276)
!5439 = !DILocation(line: 0, scope: !5434)
!5440 = !DILocation(line: 1926, column: 27, scope: !5434)
!5441 = !DILocation(line: 1928, column: 7, scope: !5434)
!5442 = !DILocation(line: 1929, column: 5, scope: !5443)
!5443 = distinct !DILexicalBlock(scope: !5434, file: !3, line: 1928, column: 7)
!5444 = !DILocation(line: 1931, column: 5, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5443, file: !3, line: 1930, column: 12)
!5446 = !DILocation(line: 1933, column: 5, scope: !5445)
!5447 = !DILocation(line: 1934, column: 1, scope: !5434)
!5448 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !6, file: !6, line: 1898, type: !2189, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5449)
!5449 = !{!5450, !5451}
!5450 = !DILocalVariable(name: "gs", arg: 1, scope: !5448, file: !6, line: 1898, type: !379)
!5451 = !DILocalVariable(name: "lhs", arg: 2, scope: !5448, file: !6, line: 1898, type: !450)
!5452 = !DILocation(line: 0, scope: !5448)
!5453 = !DILocation(line: 1901, column: 3, scope: !5448)
!5454 = !DILocation(line: 1902, column: 7, scope: !5455)
!5455 = distinct !DILexicalBlock(scope: !5448, file: !6, line: 1902, column: 7)
!5456 = !DILocation(line: 1902, column: 11, scope: !5455)
!5457 = !DILocation(line: 1902, column: 14, scope: !5455)
!5458 = !DILocation(line: 1902, column: 30, scope: !5455)
!5459 = !DILocation(line: 1902, column: 7, scope: !5448)
!5460 = !DILocation(line: 1903, column: 5, scope: !5455)
!5461 = !DILocation(line: 1903, column: 29, scope: !5455)
!5462 = !DILocation(line: 1904, column: 1, scope: !5448)
!5463 = distinct !DISubprogram(name: "gimple_replace_lhs", scope: !3, file: !3, line: 1956, type: !2189, scopeLine: 1957, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5464)
!5464 = !{!5465, !5466, !5467}
!5465 = !DILocalVariable(name: "stmt", arg: 1, scope: !5463, file: !3, line: 1956, type: !379)
!5466 = !DILocalVariable(name: "nlhs", arg: 2, scope: !5463, file: !3, line: 1956, type: !450)
!5467 = !DILocalVariable(name: "lhs", scope: !5468, file: !3, line: 1960, type: !450)
!5468 = distinct !DILexicalBlock(scope: !5469, file: !3, line: 1959, column: 5)
!5469 = distinct !DILexicalBlock(scope: !5463, file: !3, line: 1958, column: 7)
!5470 = !DILocation(line: 0, scope: !5463)
!5471 = !DILocation(line: 1958, column: 7, scope: !5469)
!5472 = !DILocation(line: 1958, column: 7, scope: !5463)
!5473 = !DILocation(line: 1960, column: 18, scope: !5468)
!5474 = !DILocation(line: 0, scope: !5468)
!5475 = !DILocation(line: 1962, column: 7, scope: !5468)
!5476 = !DILocation(line: 1964, column: 7, scope: !5468)
!5477 = !DILocation(line: 1965, column: 5, scope: !5468)
!5478 = !DILocation(line: 1967, column: 3, scope: !5463)
!5479 = !DILocation(line: 1968, column: 1, scope: !5463)
!5480 = distinct !DISubprogram(name: "gimple_bind_vars", scope: !6, file: !6, line: 2485, type: !3299, scopeLine: 2486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5481)
!5481 = !{!5482}
!5482 = !DILocalVariable(name: "gs", arg: 1, scope: !5480, file: !6, line: 2485, type: !3301)
!5483 = !DILocation(line: 0, scope: !5480)
!5484 = !DILocation(line: 2488, column: 26, scope: !5480)
!5485 = !DILocation(line: 2488, column: 3, scope: !5480)
!5486 = distinct !DISubprogram(name: "gimple_bind_block", scope: !6, file: !6, line: 2559, type: !3299, scopeLine: 2560, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5487)
!5487 = !{!5488}
!5488 = !DILocalVariable(name: "gs", arg: 1, scope: !5486, file: !6, line: 2559, type: !3301)
!5489 = !DILocation(line: 0, scope: !5486)
!5490 = !DILocation(line: 2562, column: 26, scope: !5486)
!5491 = !DILocation(line: 2562, column: 3, scope: !5486)
!5492 = distinct !DISubprogram(name: "gimple_catch_types", scope: !6, file: !6, line: 2785, type: !3299, scopeLine: 2786, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5493)
!5493 = !{!5494}
!5494 = !DILocalVariable(name: "gs", arg: 1, scope: !5492, file: !6, line: 2785, type: !3301)
!5495 = !DILocation(line: 0, scope: !5492)
!5496 = !DILocation(line: 2788, column: 27, scope: !5492)
!5497 = !DILocation(line: 2788, column: 3, scope: !5492)
!5498 = distinct !DISubprogram(name: "gimple_eh_filter_types", scope: !6, file: !6, line: 2847, type: !3299, scopeLine: 2848, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5499)
!5499 = !{!5500}
!5500 = !DILocalVariable(name: "gs", arg: 1, scope: !5498, file: !6, line: 2847, type: !3301)
!5501 = !DILocation(line: 0, scope: !5498)
!5502 = !DILocation(line: 2850, column: 31, scope: !5498)
!5503 = !DILocation(line: 2850, column: 3, scope: !5498)
!5504 = distinct !DISubprogram(name: "gimple_omp_for_clauses", scope: !6, file: !6, line: 3410, type: !3299, scopeLine: 3411, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5505)
!5505 = !{!5506}
!5506 = !DILocalVariable(name: "gs", arg: 1, scope: !5504, file: !6, line: 3410, type: !3301)
!5507 = !DILocation(line: 0, scope: !5504)
!5508 = !DILocation(line: 3413, column: 29, scope: !5504)
!5509 = !DILocation(line: 3413, column: 3, scope: !5504)
!5510 = distinct !DISubprogram(name: "gimple_omp_for_set_cond", scope: !6, file: !6, line: 4073, type: !5511, scopeLine: 4074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5513)
!5511 = !DISubroutineType(types: !5512)
!5512 = !{null, !379, !760, !82}
!5513 = !{!5514, !5515, !5516}
!5514 = !DILocalVariable(name: "gs", arg: 1, scope: !5510, file: !6, line: 4073, type: !379)
!5515 = !DILocalVariable(name: "i", arg: 2, scope: !5510, file: !6, line: 4073, type: !760)
!5516 = !DILocalVariable(name: "cond", arg: 3, scope: !5510, file: !6, line: 4073, type: !82)
!5517 = !DILocation(line: 0, scope: !5510)
!5518 = !DILocation(line: 4076, column: 3, scope: !5510)
!5519 = !DILocation(line: 4077, column: 3, scope: !5510)
!5520 = !DILocation(line: 4078, column: 22, scope: !5510)
!5521 = !DILocation(line: 4078, column: 30, scope: !5510)
!5522 = !DILocation(line: 4078, column: 35, scope: !5510)
!5523 = !DILocation(line: 4079, column: 1, scope: !5510)
!5524 = distinct !DISubprogram(name: "gimple_omp_for_cond", scope: !6, file: !6, line: 4085, type: !5525, scopeLine: 4086, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5527)
!5525 = !DISubroutineType(types: !5526)
!5526 = !{!82, !3301, !760}
!5527 = !{!5528, !5529}
!5528 = !DILocalVariable(name: "gs", arg: 1, scope: !5524, file: !6, line: 4085, type: !3301)
!5529 = !DILocalVariable(name: "i", arg: 2, scope: !5524, file: !6, line: 4085, type: !760)
!5530 = !DILocation(line: 0, scope: !5524)
!5531 = !DILocation(line: 4088, column: 3, scope: !5524)
!5532 = !DILocation(line: 4089, column: 29, scope: !5524)
!5533 = !DILocation(line: 4089, column: 37, scope: !5524)
!5534 = !DILocation(line: 4089, column: 3, scope: !5524)
!5535 = distinct !DISubprogram(name: "gimple_omp_for_set_index", scope: !6, file: !6, line: 3472, type: !5536, scopeLine: 3473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5538)
!5536 = !DISubroutineType(types: !5537)
!5537 = !{null, !379, !760, !450}
!5538 = !{!5539, !5540, !5541}
!5539 = !DILocalVariable(name: "gs", arg: 1, scope: !5535, file: !6, line: 3472, type: !379)
!5540 = !DILocalVariable(name: "i", arg: 2, scope: !5535, file: !6, line: 3472, type: !760)
!5541 = !DILocalVariable(name: "index", arg: 3, scope: !5535, file: !6, line: 3472, type: !450)
!5542 = !DILocation(line: 0, scope: !5535)
!5543 = !DILocation(line: 3475, column: 3, scope: !5535)
!5544 = !DILocation(line: 3476, column: 22, scope: !5535)
!5545 = !DILocation(line: 3476, column: 30, scope: !5535)
!5546 = !DILocation(line: 3476, column: 36, scope: !5535)
!5547 = !DILocation(line: 3477, column: 1, scope: !5535)
!5548 = distinct !DISubprogram(name: "gimple_omp_for_index", scope: !6, file: !6, line: 3450, type: !5549, scopeLine: 3451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5551)
!5549 = !DISubroutineType(types: !5550)
!5550 = !{!450, !3301, !760}
!5551 = !{!5552, !5553}
!5552 = !DILocalVariable(name: "gs", arg: 1, scope: !5548, file: !6, line: 3450, type: !3301)
!5553 = !DILocalVariable(name: "i", arg: 2, scope: !5548, file: !6, line: 3450, type: !760)
!5554 = !DILocation(line: 0, scope: !5548)
!5555 = !DILocation(line: 3453, column: 3, scope: !5548)
!5556 = !DILocation(line: 3454, column: 29, scope: !5548)
!5557 = !DILocation(line: 3454, column: 37, scope: !5548)
!5558 = !DILocation(line: 3454, column: 3, scope: !5548)
!5559 = distinct !DISubprogram(name: "gimple_omp_for_initial", scope: !6, file: !6, line: 3483, type: !5549, scopeLine: 3484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5560)
!5560 = !{!5561, !5562}
!5561 = !DILocalVariable(name: "gs", arg: 1, scope: !5559, file: !6, line: 3483, type: !3301)
!5562 = !DILocalVariable(name: "i", arg: 2, scope: !5559, file: !6, line: 3483, type: !760)
!5563 = !DILocation(line: 0, scope: !5559)
!5564 = !DILocation(line: 3486, column: 3, scope: !5559)
!5565 = !DILocation(line: 3487, column: 29, scope: !5559)
!5566 = !DILocation(line: 3487, column: 37, scope: !5559)
!5567 = !DILocation(line: 3487, column: 3, scope: !5559)
!5568 = distinct !DISubprogram(name: "gimple_omp_for_set_initial", scope: !6, file: !6, line: 3505, type: !5536, scopeLine: 3506, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5569)
!5569 = !{!5570, !5571, !5572}
!5570 = !DILocalVariable(name: "gs", arg: 1, scope: !5568, file: !6, line: 3505, type: !379)
!5571 = !DILocalVariable(name: "i", arg: 2, scope: !5568, file: !6, line: 3505, type: !760)
!5572 = !DILocalVariable(name: "initial", arg: 3, scope: !5568, file: !6, line: 3505, type: !450)
!5573 = !DILocation(line: 0, scope: !5568)
!5574 = !DILocation(line: 3508, column: 3, scope: !5568)
!5575 = !DILocation(line: 3509, column: 22, scope: !5568)
!5576 = !DILocation(line: 3509, column: 30, scope: !5568)
!5577 = !DILocation(line: 3509, column: 38, scope: !5568)
!5578 = !DILocation(line: 3510, column: 1, scope: !5568)
!5579 = distinct !DISubprogram(name: "gimple_omp_for_final", scope: !6, file: !6, line: 3516, type: !5549, scopeLine: 3517, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5580)
!5580 = !{!5581, !5582}
!5581 = !DILocalVariable(name: "gs", arg: 1, scope: !5579, file: !6, line: 3516, type: !3301)
!5582 = !DILocalVariable(name: "i", arg: 2, scope: !5579, file: !6, line: 3516, type: !760)
!5583 = !DILocation(line: 0, scope: !5579)
!5584 = !DILocation(line: 3519, column: 3, scope: !5579)
!5585 = !DILocation(line: 3520, column: 29, scope: !5579)
!5586 = !DILocation(line: 3520, column: 37, scope: !5579)
!5587 = !DILocation(line: 3520, column: 3, scope: !5579)
!5588 = distinct !DISubprogram(name: "gimple_omp_for_set_final", scope: !6, file: !6, line: 3538, type: !5536, scopeLine: 3539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5589)
!5589 = !{!5590, !5591, !5592}
!5590 = !DILocalVariable(name: "gs", arg: 1, scope: !5588, file: !6, line: 3538, type: !379)
!5591 = !DILocalVariable(name: "i", arg: 2, scope: !5588, file: !6, line: 3538, type: !760)
!5592 = !DILocalVariable(name: "final", arg: 3, scope: !5588, file: !6, line: 3538, type: !450)
!5593 = !DILocation(line: 0, scope: !5588)
!5594 = !DILocation(line: 3541, column: 3, scope: !5588)
!5595 = !DILocation(line: 3542, column: 22, scope: !5588)
!5596 = !DILocation(line: 3542, column: 30, scope: !5588)
!5597 = !DILocation(line: 3542, column: 36, scope: !5588)
!5598 = !DILocation(line: 3543, column: 1, scope: !5588)
!5599 = distinct !DISubprogram(name: "gimple_omp_for_incr", scope: !6, file: !6, line: 3549, type: !5549, scopeLine: 3550, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5600)
!5600 = !{!5601, !5602}
!5601 = !DILocalVariable(name: "gs", arg: 1, scope: !5599, file: !6, line: 3549, type: !3301)
!5602 = !DILocalVariable(name: "i", arg: 2, scope: !5599, file: !6, line: 3549, type: !760)
!5603 = !DILocation(line: 0, scope: !5599)
!5604 = !DILocation(line: 3552, column: 3, scope: !5599)
!5605 = !DILocation(line: 3553, column: 29, scope: !5599)
!5606 = !DILocation(line: 3553, column: 37, scope: !5599)
!5607 = !DILocation(line: 3553, column: 3, scope: !5599)
!5608 = distinct !DISubprogram(name: "gimple_omp_for_set_incr", scope: !6, file: !6, line: 3571, type: !5536, scopeLine: 3572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5609)
!5609 = !{!5610, !5611, !5612}
!5610 = !DILocalVariable(name: "gs", arg: 1, scope: !5608, file: !6, line: 3571, type: !379)
!5611 = !DILocalVariable(name: "i", arg: 2, scope: !5608, file: !6, line: 3571, type: !760)
!5612 = !DILocalVariable(name: "incr", arg: 3, scope: !5608, file: !6, line: 3571, type: !450)
!5613 = !DILocation(line: 0, scope: !5608)
!5614 = !DILocation(line: 3574, column: 3, scope: !5608)
!5615 = !DILocation(line: 3575, column: 22, scope: !5608)
!5616 = !DILocation(line: 3575, column: 30, scope: !5608)
!5617 = !DILocation(line: 3575, column: 35, scope: !5608)
!5618 = !DILocation(line: 3576, column: 1, scope: !5608)
!5619 = distinct !DISubprogram(name: "gimple_omp_parallel_clauses", scope: !6, file: !6, line: 3604, type: !3299, scopeLine: 3605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5620)
!5620 = !{!5621}
!5621 = !DILocalVariable(name: "gs", arg: 1, scope: !5619, file: !6, line: 3604, type: !3301)
!5622 = !DILocation(line: 0, scope: !5619)
!5623 = !DILocation(line: 3607, column: 34, scope: !5619)
!5624 = !DILocation(line: 3607, column: 3, scope: !5619)
!5625 = distinct !DISubprogram(name: "gimple_omp_parallel_child_fn", scope: !6, file: !6, line: 3635, type: !3299, scopeLine: 3636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5626)
!5626 = !{!5627}
!5627 = !DILocalVariable(name: "gs", arg: 1, scope: !5625, file: !6, line: 3635, type: !3301)
!5628 = !DILocation(line: 0, scope: !5625)
!5629 = !DILocation(line: 3638, column: 34, scope: !5625)
!5630 = !DILocation(line: 3638, column: 3, scope: !5625)
!5631 = distinct !DISubprogram(name: "gimple_omp_parallel_data_arg", scope: !6, file: !6, line: 3666, type: !3299, scopeLine: 3667, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5632)
!5632 = !{!5633}
!5633 = !DILocalVariable(name: "gs", arg: 1, scope: !5631, file: !6, line: 3666, type: !3301)
!5634 = !DILocation(line: 0, scope: !5631)
!5635 = !DILocation(line: 3669, column: 34, scope: !5631)
!5636 = !DILocation(line: 3669, column: 3, scope: !5631)
!5637 = distinct !DISubprogram(name: "gimple_omp_task_clauses", scope: !6, file: !6, line: 3696, type: !3299, scopeLine: 3697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5638)
!5638 = !{!5639}
!5639 = !DILocalVariable(name: "gs", arg: 1, scope: !5637, file: !6, line: 3696, type: !3301)
!5640 = !DILocation(line: 0, scope: !5637)
!5641 = !DILocation(line: 3699, column: 34, scope: !5637)
!5642 = !DILocation(line: 3699, column: 3, scope: !5637)
!5643 = distinct !DISubprogram(name: "gimple_omp_task_child_fn", scope: !6, file: !6, line: 3727, type: !3299, scopeLine: 3728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5644)
!5644 = !{!5645}
!5645 = !DILocalVariable(name: "gs", arg: 1, scope: !5643, file: !6, line: 3727, type: !3301)
!5646 = !DILocation(line: 0, scope: !5643)
!5647 = !DILocation(line: 3730, column: 34, scope: !5643)
!5648 = !DILocation(line: 3730, column: 3, scope: !5643)
!5649 = distinct !DISubprogram(name: "gimple_omp_task_data_arg", scope: !6, file: !6, line: 3758, type: !3299, scopeLine: 3759, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5650)
!5650 = !{!5651}
!5651 = !DILocalVariable(name: "gs", arg: 1, scope: !5649, file: !6, line: 3758, type: !3301)
!5652 = !DILocation(line: 0, scope: !5649)
!5653 = !DILocation(line: 3761, column: 34, scope: !5649)
!5654 = !DILocation(line: 3761, column: 3, scope: !5649)
!5655 = distinct !DISubprogram(name: "gimple_omp_task_copy_fn", scope: !6, file: !6, line: 3889, type: !3299, scopeLine: 3890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5656)
!5656 = !{!5657}
!5657 = !DILocalVariable(name: "gs", arg: 1, scope: !5655, file: !6, line: 3889, type: !3301)
!5658 = !DILocation(line: 0, scope: !5655)
!5659 = !DILocation(line: 3892, column: 30, scope: !5655)
!5660 = !DILocation(line: 3892, column: 3, scope: !5655)
!5661 = distinct !DISubprogram(name: "gimple_omp_task_arg_size", scope: !6, file: !6, line: 3919, type: !3299, scopeLine: 3920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5662)
!5662 = !{!5663}
!5663 = !DILocalVariable(name: "gs", arg: 1, scope: !5661, file: !6, line: 3919, type: !3301)
!5664 = !DILocation(line: 0, scope: !5661)
!5665 = !DILocation(line: 3922, column: 30, scope: !5661)
!5666 = !DILocation(line: 3922, column: 3, scope: !5661)
!5667 = distinct !DISubprogram(name: "gimple_omp_task_arg_align", scope: !6, file: !6, line: 3949, type: !3299, scopeLine: 3950, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5668)
!5668 = !{!5669}
!5669 = !DILocalVariable(name: "gs", arg: 1, scope: !5667, file: !6, line: 3949, type: !3301)
!5670 = !DILocation(line: 0, scope: !5667)
!5671 = !DILocation(line: 3952, column: 30, scope: !5667)
!5672 = !DILocation(line: 3952, column: 3, scope: !5667)
!5673 = distinct !DISubprogram(name: "gimple_omp_critical_name", scope: !6, file: !6, line: 3380, type: !3299, scopeLine: 3381, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5674)
!5674 = !{!5675}
!5675 = !DILocalVariable(name: "gs", arg: 1, scope: !5673, file: !6, line: 3380, type: !3301)
!5676 = !DILocation(line: 0, scope: !5673)
!5677 = !DILocation(line: 3383, column: 34, scope: !5673)
!5678 = !DILocation(line: 3383, column: 3, scope: !5673)
!5679 = distinct !DISubprogram(name: "gimple_omp_sections_clauses", scope: !6, file: !6, line: 4009, type: !3299, scopeLine: 4010, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5680)
!5680 = !{!5681}
!5681 = !DILocalVariable(name: "gs", arg: 1, scope: !5679, file: !6, line: 4009, type: !3301)
!5682 = !DILocation(line: 0, scope: !5679)
!5683 = !DILocation(line: 4012, column: 34, scope: !5679)
!5684 = !DILocation(line: 4012, column: 3, scope: !5679)
!5685 = distinct !DISubprogram(name: "gimple_omp_sections_control", scope: !6, file: !6, line: 4041, type: !3299, scopeLine: 4042, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5686)
!5686 = !{!5687}
!5687 = !DILocalVariable(name: "gs", arg: 1, scope: !5685, file: !6, line: 4041, type: !3301)
!5688 = !DILocation(line: 0, scope: !5685)
!5689 = !DILocation(line: 4044, column: 34, scope: !5685)
!5690 = !DILocation(line: 4044, column: 3, scope: !5685)
!5691 = distinct !DISubprogram(name: "gimple_omp_sections_set_control", scope: !6, file: !6, line: 4063, type: !2189, scopeLine: 4064, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5692)
!5692 = !{!5693, !5694}
!5693 = !DILocalVariable(name: "gs", arg: 1, scope: !5691, file: !6, line: 4063, type: !379)
!5694 = !DILocalVariable(name: "control", arg: 2, scope: !5691, file: !6, line: 4063, type: !450)
!5695 = !DILocation(line: 0, scope: !5691)
!5696 = !DILocation(line: 4066, column: 27, scope: !5691)
!5697 = !DILocation(line: 4066, column: 35, scope: !5691)
!5698 = !DILocation(line: 4067, column: 1, scope: !5691)
!5699 = distinct !DISubprogram(name: "gimple_set_op", scope: !6, file: !6, line: 1663, type: !2249, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5700)
!5700 = !{!5701, !5702, !5703}
!5701 = !DILocalVariable(name: "gs", arg: 1, scope: !5699, file: !6, line: 1663, type: !379)
!5702 = !DILocalVariable(name: "i", arg: 2, scope: !5699, file: !6, line: 1663, type: !7)
!5703 = !DILocalVariable(name: "op", arg: 3, scope: !5699, file: !6, line: 1663, type: !450)
!5704 = !DILocation(line: 0, scope: !5699)
!5705 = !DILocation(line: 1665, column: 3, scope: !5699)
!5706 = !DILocation(line: 1671, column: 3, scope: !5699)
!5707 = !DILocation(line: 1671, column: 22, scope: !5699)
!5708 = !DILocation(line: 1672, column: 1, scope: !5699)
!5709 = distinct !DISubprogram(name: "gimple_has_ops", scope: !6, file: !6, line: 1274, type: !3940, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5710)
!5710 = !{!5711}
!5711 = !DILocalVariable(name: "g", arg: 1, scope: !5709, file: !6, line: 1274, type: !3301)
!5712 = !DILocation(line: 0, scope: !5709)
!5713 = !DILocation(line: 1276, column: 10, scope: !5709)
!5714 = !DILocation(line: 1276, column: 26, scope: !5709)
!5715 = !DILocation(line: 1276, column: 41, scope: !5709)
!5716 = !DILocation(line: 1276, column: 44, scope: !5709)
!5717 = !DILocation(line: 1276, column: 60, scope: !5709)
!5718 = !DILocation(line: 1276, column: 3, scope: !5709)
!5719 = distinct !DISubprogram(name: "gimple_set_def_ops", scope: !6, file: !6, line: 1303, type: !5720, scopeLine: 1304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5722)
!5720 = !DISubroutineType(types: !5721)
!5721 = !{null, !379, !903}
!5722 = !{!5723, !5724}
!5723 = !DILocalVariable(name: "g", arg: 1, scope: !5719, file: !6, line: 1303, type: !379)
!5724 = !DILocalVariable(name: "def", arg: 2, scope: !5719, file: !6, line: 1303, type: !903)
!5725 = !DILocation(line: 0, scope: !5719)
!5726 = !DILocation(line: 1305, column: 3, scope: !5719)
!5727 = !DILocation(line: 1306, column: 19, scope: !5719)
!5728 = !DILocation(line: 1306, column: 27, scope: !5719)
!5729 = !DILocation(line: 1307, column: 1, scope: !5719)
!5730 = distinct !DISubprogram(name: "gimple_set_use_ops", scope: !6, file: !6, line: 1324, type: !5731, scopeLine: 1325, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5733)
!5731 = !DISubroutineType(types: !5732)
!5732 = !{null, !379, !910}
!5733 = !{!5734, !5735}
!5734 = !DILocalVariable(name: "g", arg: 1, scope: !5730, file: !6, line: 1324, type: !379)
!5735 = !DILocalVariable(name: "use", arg: 2, scope: !5730, file: !6, line: 1324, type: !910)
!5736 = !DILocation(line: 0, scope: !5730)
!5737 = !DILocation(line: 1326, column: 3, scope: !5730)
!5738 = !DILocation(line: 1327, column: 19, scope: !5730)
!5739 = !DILocation(line: 1327, column: 27, scope: !5730)
!5740 = !DILocation(line: 1328, column: 1, scope: !5730)
!5741 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !6, file: !6, line: 1283, type: !3940, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5742)
!5742 = !{!5743}
!5743 = !DILocalVariable(name: "g", arg: 1, scope: !5741, file: !6, line: 1283, type: !3301)
!5744 = !DILocation(line: 0, scope: !5741)
!5745 = !DILocation(line: 1285, column: 10, scope: !5741)
!5746 = !DILocation(line: 1285, column: 26, scope: !5741)
!5747 = !DILocation(line: 1285, column: 43, scope: !5741)
!5748 = !DILocation(line: 1285, column: 46, scope: !5741)
!5749 = !DILocation(line: 1285, column: 62, scope: !5741)
!5750 = !DILocation(line: 1285, column: 3, scope: !5741)
!5751 = distinct !DISubprogram(name: "gimple_set_vdef", scope: !6, file: !6, line: 1414, type: !2189, scopeLine: 1415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5752)
!5752 = !{!5753, !5754}
!5753 = !DILocalVariable(name: "g", arg: 1, scope: !5751, file: !6, line: 1414, type: !379)
!5754 = !DILocalVariable(name: "vdef", arg: 2, scope: !5751, file: !6, line: 1414, type: !450)
!5755 = !DILocation(line: 0, scope: !5751)
!5756 = !DILocation(line: 1416, column: 3, scope: !5751)
!5757 = !DILocation(line: 1417, column: 16, scope: !5751)
!5758 = !DILocation(line: 1417, column: 21, scope: !5751)
!5759 = !DILocation(line: 1418, column: 1, scope: !5751)
!5760 = distinct !DISubprogram(name: "gimple_vdef", scope: !6, file: !6, line: 1375, type: !3299, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5761)
!5761 = !{!5762}
!5762 = !DILocalVariable(name: "g", arg: 1, scope: !5760, file: !6, line: 1375, type: !3301)
!5763 = !DILocation(line: 0, scope: !5760)
!5764 = !DILocation(line: 1377, column: 8, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5760, file: !6, line: 1377, column: 7)
!5766 = !DILocation(line: 1377, column: 7, scope: !5760)
!5767 = !DILocation(line: 1379, column: 23, scope: !5760)
!5768 = !DILocation(line: 1379, column: 3, scope: !5760)
!5769 = !DILocation(line: 1380, column: 1, scope: !5760)
!5770 = distinct !DISubprogram(name: "gimple_set_vuse", scope: !6, file: !6, line: 1405, type: !2189, scopeLine: 1406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5771)
!5771 = !{!5772, !5773}
!5772 = !DILocalVariable(name: "g", arg: 1, scope: !5770, file: !6, line: 1405, type: !379)
!5773 = !DILocalVariable(name: "vuse", arg: 2, scope: !5770, file: !6, line: 1405, type: !450)
!5774 = !DILocation(line: 0, scope: !5770)
!5775 = !DILocation(line: 1407, column: 3, scope: !5770)
!5776 = !DILocation(line: 1408, column: 16, scope: !5770)
!5777 = !DILocation(line: 1408, column: 21, scope: !5770)
!5778 = !DILocation(line: 1409, column: 1, scope: !5770)
!5779 = distinct !DISubprogram(name: "gimple_vuse", scope: !6, file: !6, line: 1365, type: !3299, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5780)
!5780 = !{!5781}
!5781 = !DILocalVariable(name: "g", arg: 1, scope: !5779, file: !6, line: 1365, type: !3301)
!5782 = !DILocation(line: 0, scope: !5779)
!5783 = !DILocation(line: 1367, column: 8, scope: !5784)
!5784 = distinct !DILexicalBlock(scope: !5779, file: !6, line: 1367, column: 7)
!5785 = !DILocation(line: 1367, column: 7, scope: !5779)
!5786 = !DILocation(line: 1369, column: 23, scope: !5779)
!5787 = !DILocation(line: 1369, column: 3, scope: !5779)
!5788 = !DILocation(line: 1370, column: 1, scope: !5779)
!5789 = distinct !DISubprogram(name: "gimple_set_modified", scope: !3, file: !3, line: 2130, type: !2374, scopeLine: 2131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5790)
!5790 = !{!5791, !5792}
!5791 = !DILocalVariable(name: "s", arg: 1, scope: !5789, file: !3, line: 2130, type: !379)
!5792 = !DILocalVariable(name: "modifiedp", arg: 2, scope: !5789, file: !3, line: 2130, type: !371)
!5793 = !DILocation(line: 0, scope: !5789)
!5794 = !DILocation(line: 2132, column: 7, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5789, file: !3, line: 2132, column: 7)
!5796 = !DILocation(line: 2132, column: 7, scope: !5789)
!5797 = !DILocation(line: 2134, column: 17, scope: !5798)
!5798 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 2133, column: 5)
!5799 = !DILocation(line: 2134, column: 26, scope: !5798)
!5800 = !DILocation(line: 2136, column: 11, scope: !5801)
!5801 = distinct !DILexicalBlock(scope: !5798, file: !3, line: 2136, column: 11)
!5802 = !DILocation(line: 2137, column: 4, scope: !5801)
!5803 = !DILocation(line: 2137, column: 7, scope: !5801)
!5804 = !DILocation(line: 2137, column: 13, scope: !5801)
!5805 = !DILocation(line: 2138, column: 4, scope: !5801)
!5806 = !DILocation(line: 2138, column: 7, scope: !5801)
!5807 = !DILocation(line: 2139, column: 4, scope: !5801)
!5808 = !DILocation(line: 2139, column: 7, scope: !5801)
!5809 = !DILocation(line: 2136, column: 11, scope: !5798)
!5810 = !DILocation(line: 2140, column: 2, scope: !5801)
!5811 = !DILocation(line: 2142, column: 1, scope: !5789)
!5812 = distinct !DISubprogram(name: "is_gimple_call", scope: !6, file: !6, line: 1870, type: !3940, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5813)
!5813 = !{!5814}
!5814 = !DILocalVariable(name: "gs", arg: 1, scope: !5812, file: !6, line: 1870, type: !3301)
!5815 = !DILocation(line: 0, scope: !5812)
!5816 = !DILocation(line: 1872, column: 10, scope: !5812)
!5817 = !DILocation(line: 1872, column: 27, scope: !5812)
!5818 = !DILocation(line: 1872, column: 3, scope: !5812)
!5819 = distinct !DISubprogram(name: "gimple_call_noreturn_p", scope: !6, file: !6, line: 2178, type: !3913, scopeLine: 2179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5820)
!5820 = !{!5821}
!5821 = !DILocalVariable(name: "s", arg: 1, scope: !5819, file: !6, line: 2178, type: !379)
!5822 = !DILocation(line: 0, scope: !5819)
!5823 = !DILocation(line: 2181, column: 11, scope: !5819)
!5824 = !DILocation(line: 2181, column: 10, scope: !5819)
!5825 = !DILocation(line: 2181, column: 3, scope: !5819)
!5826 = distinct !DISubprogram(name: "VEC_gimple_gc_safe_push", scope: !6, file: !6, line: 35, type: !5827, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5831)
!5827 = !DISubroutineType(types: !5828)
!5828 = !{!5829, !5830, !379}
!5829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !379, size: 64)
!5830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !786, size: 64)
!5831 = !{!5832, !5833}
!5832 = !DILocalVariable(name: "vec_", arg: 1, scope: !5826, file: !6, line: 35, type: !5830)
!5833 = !DILocalVariable(name: "obj_", arg: 2, scope: !5826, file: !6, line: 35, type: !379)
!5834 = !DILocation(line: 0, scope: !5826)
!5835 = !DILocation(line: 35, column: 1, scope: !5826)
!5836 = distinct !DISubprogram(name: "gimple_has_side_effects", scope: !3, file: !3, line: 2152, type: !3940, scopeLine: 2153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5837)
!5837 = !{!5838, !5839, !5840}
!5838 = !DILocalVariable(name: "s", arg: 1, scope: !5836, file: !3, line: 2152, type: !3301)
!5839 = !DILocalVariable(name: "i", scope: !5836, file: !3, line: 2154, type: !7)
!5840 = !DILocalVariable(name: "nargs", scope: !5841, file: !3, line: 2167, type: !7)
!5841 = distinct !DILexicalBlock(scope: !5842, file: !3, line: 2166, column: 5)
!5842 = distinct !DILexicalBlock(scope: !5836, file: !3, line: 2165, column: 7)
!5843 = !DILocation(line: 0, scope: !5836)
!5844 = !DILocation(line: 2156, column: 7, scope: !5845)
!5845 = distinct !DILexicalBlock(scope: !5836, file: !3, line: 2156, column: 7)
!5846 = !DILocation(line: 2156, column: 7, scope: !5836)
!5847 = !DILocation(line: 2162, column: 7, scope: !5848)
!5848 = distinct !DILexicalBlock(scope: !5836, file: !3, line: 2162, column: 7)
!5849 = !DILocation(line: 2162, column: 7, scope: !5836)
!5850 = !DILocation(line: 2165, column: 7, scope: !5842)
!5851 = !DILocation(line: 2165, column: 7, scope: !5836)
!5852 = !DILocation(line: 2196, column: 7, scope: !5853)
!5853 = distinct !DILexicalBlock(scope: !5854, file: !3, line: 2196, column: 7)
!5854 = distinct !DILexicalBlock(scope: !5842, file: !3, line: 2195, column: 5)
!5855 = !DILocation(line: 2167, column: 24, scope: !5841)
!5856 = !DILocation(line: 0, scope: !5841)
!5857 = !DILocation(line: 2169, column: 13, scope: !5858)
!5858 = distinct !DILexicalBlock(scope: !5841, file: !3, line: 2169, column: 11)
!5859 = !DILocation(line: 2169, column: 35, scope: !5858)
!5860 = !DILocation(line: 2169, column: 11, scope: !5841)
!5861 = !DILocation(line: 2171, column: 16, scope: !5862)
!5862 = distinct !DILexicalBlock(scope: !5858, file: !3, line: 2171, column: 16)
!5863 = !DILocation(line: 2171, column: 38, scope: !5862)
!5864 = !DILocation(line: 2171, column: 16, scope: !5858)
!5865 = !DILocation(line: 2175, column: 11, scope: !5866)
!5866 = distinct !DILexicalBlock(scope: !5841, file: !3, line: 2175, column: 11)
!5867 = !DILocation(line: 2176, column: 11, scope: !5866)
!5868 = !DILocation(line: 2176, column: 14, scope: !5866)
!5869 = !DILocation(line: 2175, column: 11, scope: !5841)
!5870 = !DILocation(line: 2178, column: 4, scope: !5871)
!5871 = distinct !DILexicalBlock(scope: !5866, file: !3, line: 2177, column: 2)
!5872 = !DILocation(line: 2182, column: 11, scope: !5873)
!5873 = distinct !DILexicalBlock(scope: !5841, file: !3, line: 2182, column: 11)
!5874 = !DILocation(line: 2182, column: 11, scope: !5841)
!5875 = !DILocation(line: 2185, column: 7, scope: !5876)
!5876 = distinct !DILexicalBlock(scope: !5841, file: !3, line: 2185, column: 7)
!5877 = !DILocation(line: 0, scope: !5876)
!5878 = !DILocation(line: 2185, column: 21, scope: !5879)
!5879 = distinct !DILexicalBlock(scope: !5876, file: !3, line: 2185, column: 7)
!5880 = !DILocation(line: 2186, column: 13, scope: !5881)
!5881 = distinct !DILexicalBlock(scope: !5879, file: !3, line: 2186, column: 13)
!5882 = !DILocation(line: 2186, column: 13, scope: !5879)
!5883 = !DILocation(line: 2188, column: 6, scope: !5884)
!5884 = distinct !DILexicalBlock(scope: !5881, file: !3, line: 2187, column: 4)
!5885 = !DILocation(line: 2185, column: 31, scope: !5879)
!5886 = !DILocation(line: 2185, column: 7, scope: !5879)
!5887 = distinct !{!5887, !5875, !5888}
!5888 = !DILocation(line: 2190, column: 4, scope: !5876)
!5889 = !DILocation(line: 0, scope: !5853)
!5890 = !DILocation(line: 2196, column: 23, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5853, file: !3, line: 2196, column: 7)
!5892 = !DILocation(line: 2196, column: 21, scope: !5891)
!5893 = !DILocation(line: 2197, column: 6, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5891, file: !3, line: 2197, column: 6)
!5895 = !DILocation(line: 2197, column: 6, scope: !5891)
!5896 = !DILocation(line: 2199, column: 6, scope: !5897)
!5897 = distinct !DILexicalBlock(scope: !5894, file: !3, line: 2198, column: 4)
!5898 = !DILocation(line: 2196, column: 44, scope: !5891)
!5899 = !DILocation(line: 2196, column: 7, scope: !5891)
!5900 = distinct !{!5900, !5852, !5901}
!5901 = !DILocation(line: 2201, column: 4, scope: !5853)
!5902 = !DILocation(line: 2205, column: 1, scope: !5836)
!5903 = distinct !DISubprogram(name: "gimple_has_volatile_ops", scope: !6, file: !6, line: 1477, type: !3940, scopeLine: 1478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5904)
!5904 = !{!5905}
!5905 = !DILocalVariable(name: "stmt", arg: 1, scope: !5903, file: !6, line: 1477, type: !3301)
!5906 = !DILocation(line: 0, scope: !5903)
!5907 = !DILocation(line: 1479, column: 7, scope: !5908)
!5908 = distinct !DILexicalBlock(scope: !5903, file: !6, line: 1479, column: 7)
!5909 = !DILocation(line: 1479, column: 7, scope: !5903)
!5910 = !DILocation(line: 1480, column: 25, scope: !5908)
!5911 = !DILocation(line: 1480, column: 12, scope: !5908)
!5912 = !DILocation(line: 1480, column: 5, scope: !5908)
!5913 = !DILocation(line: 0, scope: !5908)
!5914 = !DILocation(line: 1483, column: 1, scope: !5903)
!5915 = distinct !DISubprogram(name: "gimple_call_arg", scope: !6, file: !6, line: 2025, type: !5220, scopeLine: 2026, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5916)
!5916 = !{!5917, !5918}
!5917 = !DILocalVariable(name: "gs", arg: 1, scope: !5915, file: !6, line: 2025, type: !3301)
!5918 = !DILocalVariable(name: "index", arg: 2, scope: !5915, file: !6, line: 2025, type: !7)
!5919 = !DILocation(line: 0, scope: !5915)
!5920 = !DILocation(line: 2028, column: 31, scope: !5915)
!5921 = !DILocation(line: 2028, column: 10, scope: !5915)
!5922 = !DILocation(line: 2028, column: 3, scope: !5915)
!5923 = distinct !DISubprogram(name: "gimple_rhs_has_side_effects", scope: !3, file: !3, line: 2214, type: !3940, scopeLine: 2215, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5924)
!5924 = !{!5925, !5926, !5927}
!5925 = !DILocalVariable(name: "s", arg: 1, scope: !5923, file: !3, line: 2214, type: !3301)
!5926 = !DILocalVariable(name: "i", scope: !5923, file: !3, line: 2216, type: !7)
!5927 = !DILocalVariable(name: "nargs", scope: !5928, file: !3, line: 2220, type: !7)
!5928 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 2219, column: 5)
!5929 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 2218, column: 7)
!5930 = !DILocation(line: 0, scope: !5923)
!5931 = !DILocation(line: 2218, column: 7, scope: !5929)
!5932 = !DILocation(line: 2218, column: 7, scope: !5923)
!5933 = !DILocation(line: 2220, column: 24, scope: !5928)
!5934 = !DILocation(line: 0, scope: !5928)
!5935 = !DILocation(line: 2222, column: 13, scope: !5936)
!5936 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 2222, column: 11)
!5937 = !DILocation(line: 2222, column: 35, scope: !5936)
!5938 = !DILocation(line: 2222, column: 11, scope: !5928)
!5939 = !DILocation(line: 2227, column: 11, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 2227, column: 11)
!5941 = !DILocation(line: 2228, column: 11, scope: !5940)
!5942 = !DILocation(line: 2228, column: 14, scope: !5940)
!5943 = !DILocation(line: 2227, column: 11, scope: !5928)
!5944 = !DILocation(line: 2234, column: 7, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5928, file: !3, line: 2234, column: 7)
!5946 = !DILocation(line: 2230, column: 4, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5940, file: !3, line: 2229, column: 2)
!5948 = !DILocation(line: 0, scope: !5945)
!5949 = !DILocation(line: 2234, column: 21, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5945, file: !3, line: 2234, column: 7)
!5951 = !DILocation(line: 2235, column: 13, scope: !5952)
!5952 = distinct !DILexicalBlock(scope: !5950, file: !3, line: 2235, column: 13)
!5953 = !DILocation(line: 2236, column: 13, scope: !5952)
!5954 = !DILocation(line: 2236, column: 16, scope: !5952)
!5955 = !DILocation(line: 2235, column: 13, scope: !5950)
!5956 = !DILocation(line: 2234, column: 31, scope: !5950)
!5957 = !DILocation(line: 2234, column: 7, scope: !5950)
!5958 = distinct !{!5958, !5944, !5959}
!5959 = !DILocation(line: 2237, column: 18, scope: !5945)
!5960 = !DILocation(line: 2241, column: 12, scope: !5961)
!5961 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 2241, column: 12)
!5962 = !DILocation(line: 2241, column: 12, scope: !5929)
!5963 = !DILocation(line: 2244, column: 7, scope: !5964)
!5964 = distinct !DILexicalBlock(scope: !5965, file: !3, line: 2244, column: 7)
!5965 = distinct !DILexicalBlock(scope: !5961, file: !3, line: 2242, column: 5)
!5966 = !DILocation(line: 0, scope: !5964)
!5967 = !DILocation(line: 2244, column: 23, scope: !5968)
!5968 = distinct !DILexicalBlock(scope: !5964, file: !3, line: 2244, column: 7)
!5969 = !DILocation(line: 2244, column: 21, scope: !5968)
!5970 = !DILocation(line: 2245, column: 6, scope: !5971)
!5971 = distinct !DILexicalBlock(scope: !5968, file: !3, line: 2245, column: 6)
!5972 = !DILocation(line: 2246, column: 13, scope: !5971)
!5973 = !DILocation(line: 2246, column: 16, scope: !5971)
!5974 = !DILocation(line: 2245, column: 6, scope: !5968)
!5975 = !DILocation(line: 2248, column: 6, scope: !5976)
!5976 = distinct !DILexicalBlock(scope: !5971, file: !3, line: 2247, column: 4)
!5977 = !DILocation(line: 2244, column: 44, scope: !5968)
!5978 = !DILocation(line: 2244, column: 7, scope: !5968)
!5979 = distinct !{!5979, !5963, !5980}
!5980 = !DILocation(line: 2250, column: 4, scope: !5964)
!5981 = !DILocation(line: 2252, column: 12, scope: !5982)
!5982 = distinct !DILexicalBlock(scope: !5961, file: !3, line: 2252, column: 12)
!5983 = !DILocation(line: 2252, column: 12, scope: !5961)
!5984 = !DILocation(line: 2257, column: 7, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5986, file: !3, line: 2257, column: 7)
!5986 = distinct !DILexicalBlock(scope: !5982, file: !3, line: 2255, column: 5)
!5987 = !DILocation(line: 0, scope: !5985)
!5988 = !DILocation(line: 2257, column: 23, scope: !5989)
!5989 = distinct !DILexicalBlock(scope: !5985, file: !3, line: 2257, column: 7)
!5990 = !DILocation(line: 2257, column: 21, scope: !5989)
!5991 = !DILocation(line: 2258, column: 6, scope: !5992)
!5992 = distinct !DILexicalBlock(scope: !5989, file: !3, line: 2258, column: 6)
!5993 = !DILocation(line: 2259, column: 13, scope: !5992)
!5994 = !DILocation(line: 2259, column: 16, scope: !5992)
!5995 = !DILocation(line: 2258, column: 6, scope: !5989)
!5996 = !DILocation(line: 2261, column: 6, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5992, file: !3, line: 2260, column: 4)
!5998 = !DILocation(line: 2257, column: 44, scope: !5989)
!5999 = !DILocation(line: 2257, column: 7, scope: !5989)
!6000 = distinct !{!6000, !5984, !6001}
!6001 = !DILocation(line: 2263, column: 4, scope: !5985)
!6002 = !DILocation(line: 2267, column: 1, scope: !5923)
!6003 = distinct !DISubprogram(name: "is_gimple_assign", scope: !6, file: !6, line: 1677, type: !3940, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6004)
!6004 = !{!6005}
!6005 = !DILocalVariable(name: "gs", arg: 1, scope: !6003, file: !6, line: 1677, type: !3301)
!6006 = !DILocation(line: 0, scope: !6003)
!6007 = !DILocation(line: 1679, column: 10, scope: !6003)
!6008 = !DILocation(line: 1679, column: 27, scope: !6003)
!6009 = !DILocation(line: 1679, column: 3, scope: !6003)
!6010 = distinct !DISubprogram(name: "gimple_could_trap_p", scope: !3, file: !3, line: 2322, type: !3913, scopeLine: 2323, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6011)
!6011 = !{!6012}
!6012 = !DILocalVariable(name: "s", arg: 1, scope: !6010, file: !3, line: 2322, type: !379)
!6013 = !DILocation(line: 0, scope: !6010)
!6014 = !DILocation(line: 2324, column: 10, scope: !6010)
!6015 = !DILocation(line: 2324, column: 3, scope: !6010)
!6016 = distinct !DISubprogram(name: "gimple_could_trap_p_1", scope: !3, file: !3, line: 2276, type: !6017, scopeLine: 2277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6019)
!6017 = !DISubroutineType(types: !6018)
!6018 = !{!371, !379, !371}
!6019 = !{!6020, !6021, !6022, !6023, !6024, !6025, !6026}
!6020 = !DILocalVariable(name: "s", arg: 1, scope: !6016, file: !3, line: 2276, type: !379)
!6021 = !DILocalVariable(name: "include_lhs", arg: 2, scope: !6016, file: !3, line: 2276, type: !371)
!6022 = !DILocalVariable(name: "i", scope: !6016, file: !3, line: 2278, type: !7)
!6023 = !DILocalVariable(name: "start", scope: !6016, file: !3, line: 2278, type: !7)
!6024 = !DILocalVariable(name: "t", scope: !6016, file: !3, line: 2279, type: !450)
!6025 = !DILocalVariable(name: "div", scope: !6016, file: !3, line: 2279, type: !450)
!6026 = !DILocalVariable(name: "op", scope: !6016, file: !3, line: 2280, type: !82)
!6027 = !DILocation(line: 0, scope: !6016)
!6028 = !DILocation(line: 2282, column: 12, scope: !6016)
!6029 = !DILocation(line: 2282, column: 33, scope: !6016)
!6030 = !DILocation(line: 2282, column: 36, scope: !6016)
!6031 = !DILocation(line: 2284, column: 8, scope: !6032)
!6032 = distinct !DILexicalBlock(scope: !6016, file: !3, line: 2284, column: 3)
!6033 = !DILocation(line: 0, scope: !6032)
!6034 = !DILocation(line: 2284, column: 23, scope: !6035)
!6035 = distinct !DILexicalBlock(scope: !6032, file: !3, line: 2284, column: 3)
!6036 = !DILocation(line: 2284, column: 21, scope: !6035)
!6037 = !DILocation(line: 2284, column: 3, scope: !6032)
!6038 = !DILocation(line: 2285, column: 28, scope: !6039)
!6039 = distinct !DILexicalBlock(scope: !6035, file: !3, line: 2285, column: 9)
!6040 = !DILocation(line: 2285, column: 9, scope: !6039)
!6041 = !DILocation(line: 2285, column: 9, scope: !6035)
!6042 = !DILocation(line: 2284, column: 44, scope: !6035)
!6043 = !DILocation(line: 2284, column: 3, scope: !6035)
!6044 = distinct !{!6044, !6037, !6045}
!6045 = !DILocation(line: 2286, column: 14, scope: !6032)
!6046 = !DILocation(line: 2288, column: 11, scope: !6016)
!6047 = !DILocation(line: 2288, column: 3, scope: !6016)
!6048 = !DILocation(line: 2291, column: 14, scope: !6049)
!6049 = distinct !DILexicalBlock(scope: !6016, file: !3, line: 2289, column: 5)
!6050 = !DILocation(line: 2291, column: 7, scope: !6049)
!6051 = !DILocation(line: 2294, column: 11, scope: !6049)
!6052 = !DILocation(line: 2296, column: 12, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6049, file: !3, line: 2296, column: 11)
!6054 = !DILocation(line: 2296, column: 14, scope: !6053)
!6055 = !DILocation(line: 2296, column: 18, scope: !6053)
!6056 = !DILocation(line: 2296, column: 29, scope: !6053)
!6057 = !DILocation(line: 2296, column: 32, scope: !6053)
!6058 = !DILocation(line: 2296, column: 11, scope: !6049)
!6059 = !DILocation(line: 2301, column: 11, scope: !6049)
!6060 = !DILocation(line: 2302, column: 12, scope: !6049)
!6061 = !DILocation(line: 2303, column: 11, scope: !6062)
!6062 = distinct !DILexicalBlock(scope: !6049, file: !3, line: 2303, column: 11)
!6063 = !DILocation(line: 2303, column: 37, scope: !6062)
!6064 = !DILocation(line: 2303, column: 11, scope: !6049)
!6065 = !DILocation(line: 2304, column: 8, scope: !6062)
!6066 = !DILocation(line: 2304, column: 2, scope: !6062)
!6067 = !DILocation(line: 2305, column: 43, scope: !6049)
!6068 = !DILocation(line: 2306, column: 12, scope: !6049)
!6069 = !DILocation(line: 2307, column: 12, scope: !6049)
!6070 = !DILocation(line: 2307, column: 15, scope: !6049)
!6071 = !DILocation(line: 2305, column: 15, scope: !6049)
!6072 = !DILocation(line: 2305, column: 7, scope: !6049)
!6073 = !DILocation(line: 2316, column: 1, scope: !6016)
!6074 = distinct !DISubprogram(name: "gimple_assign_rhs_could_trap_p", scope: !3, file: !3, line: 2331, type: !3913, scopeLine: 2332, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6075)
!6075 = !{!6076}
!6076 = !DILocalVariable(name: "s", arg: 1, scope: !6074, file: !3, line: 2331, type: !379)
!6077 = !DILocation(line: 0, scope: !6074)
!6078 = !DILocation(line: 2333, column: 3, scope: !6074)
!6079 = !DILocation(line: 2334, column: 10, scope: !6074)
!6080 = !DILocation(line: 2334, column: 3, scope: !6074)
!6081 = distinct !DISubprogram(name: "dump_gimple_statistics", scope: !3, file: !3, line: 2341, type: !6082, scopeLine: 2342, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1683)
!6082 = !DISubroutineType(types: !6083)
!6083 = !{null}
!6084 = !DILocation(line: 2360, column: 12, scope: !6081)
!6085 = !DILocation(line: 2360, column: 3, scope: !6081)
!6086 = !DILocation(line: 2362, column: 1, scope: !6081)
!6087 = distinct !DISubprogram(name: "is_gimple_operand", scope: !3, file: !3, line: 2425, type: !2695, scopeLine: 2426, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6088)
!6088 = !{!6089}
!6089 = !DILocalVariable(name: "op", arg: 1, scope: !6087, file: !3, line: 2425, type: !1563)
!6090 = !DILocation(line: 0, scope: !6087)
!6091 = !DILocation(line: 2427, column: 10, scope: !6087)
!6092 = !DILocation(line: 2427, column: 13, scope: !6087)
!6093 = !DILocation(line: 2427, column: 38, scope: !6087)
!6094 = !DILocation(line: 2427, column: 16, scope: !6087)
!6095 = !DILocation(line: 2427, column: 54, scope: !6087)
!6096 = !DILocation(line: 2427, column: 3, scope: !6087)
!6097 = distinct !DISubprogram(name: "is_gimple_reg_rhs", scope: !3, file: !3, line: 2434, type: !2305, scopeLine: 2435, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6098)
!6098 = !{!6099}
!6099 = !DILocalVariable(name: "t", arg: 1, scope: !6097, file: !3, line: 2434, type: !450)
!6100 = !DILocation(line: 0, scope: !6097)
!6101 = !DILocation(line: 2436, column: 32, scope: !6097)
!6102 = !DILocation(line: 2436, column: 10, scope: !6097)
!6103 = !DILocation(line: 2436, column: 47, scope: !6097)
!6104 = !DILocation(line: 2436, column: 3, scope: !6097)
!6105 = distinct !DISubprogram(name: "is_gimple_reg_type", scope: !3, file: !3, line: 2715, type: !2305, scopeLine: 2716, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6106)
!6106 = !{!6107}
!6107 = !DILocalVariable(name: "type", arg: 1, scope: !6105, file: !3, line: 2715, type: !450)
!6108 = !DILocation(line: 0, scope: !6105)
!6109 = !DILocation(line: 2717, column: 11, scope: !6105)
!6110 = !DILocation(line: 2717, column: 3, scope: !6105)
!6111 = distinct !DISubprogram(name: "is_gimple_lvalue", scope: !3, file: !3, line: 2456, type: !2305, scopeLine: 2457, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6112)
!6112 = !{!6113}
!6113 = !DILocalVariable(name: "t", arg: 1, scope: !6111, file: !3, line: 2456, type: !450)
!6114 = !DILocation(line: 0, scope: !6111)
!6115 = !DILocation(line: 2458, column: 11, scope: !6111)
!6116 = !DILocation(line: 2459, column: 4, scope: !6111)
!6117 = !DILocation(line: 2459, column: 7, scope: !6111)
!6118 = !DILocation(line: 2459, column: 21, scope: !6111)
!6119 = !DILocation(line: 2462, column: 4, scope: !6111)
!6120 = !DILocation(line: 2462, column: 21, scope: !6111)
!6121 = !DILocation(line: 2458, column: 3, scope: !6111)
!6122 = distinct !DISubprogram(name: "is_gimple_addressable", scope: !3, file: !3, line: 2479, type: !2305, scopeLine: 2480, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6123)
!6123 = !{!6124}
!6124 = !DILocalVariable(name: "t", arg: 1, scope: !6122, file: !3, line: 2479, type: !450)
!6125 = !DILocation(line: 0, scope: !6122)
!6126 = !DILocation(line: 2481, column: 11, scope: !6122)
!6127 = !DILocation(line: 2481, column: 28, scope: !6122)
!6128 = !DILocation(line: 2481, column: 31, scope: !6122)
!6129 = !DILocation(line: 2481, column: 55, scope: !6122)
!6130 = !DILocation(line: 2481, column: 58, scope: !6122)
!6131 = !DILocation(line: 2481, column: 3, scope: !6122)
!6132 = distinct !DISubprogram(name: "is_gimple_condexpr", scope: !3, file: !3, line: 2468, type: !2305, scopeLine: 2469, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6133)
!6133 = !{!6134}
!6134 = !DILocalVariable(name: "t", arg: 1, scope: !6132, file: !3, line: 2468, type: !450)
!6135 = !DILocation(line: 0, scope: !6132)
!6136 = !DILocation(line: 2470, column: 11, scope: !6132)
!6137 = !DILocation(line: 2470, column: 29, scope: !6132)
!6138 = !DILocation(line: 2470, column: 33, scope: !6132)
!6139 = !DILocation(line: 2471, column: 5, scope: !6132)
!6140 = !DILocation(line: 2471, column: 9, scope: !6132)
!6141 = !DILocation(line: 2472, column: 5, scope: !6132)
!6142 = !DILocation(line: 2472, column: 23, scope: !6132)
!6143 = !DILocation(line: 2472, column: 8, scope: !6132)
!6144 = !DILocation(line: 2473, column: 5, scope: !6132)
!6145 = !DILocation(line: 2473, column: 23, scope: !6132)
!6146 = !DILocation(line: 2473, column: 8, scope: !6132)
!6147 = !DILocation(line: 2470, column: 3, scope: !6132)
!6148 = distinct !DISubprogram(name: "is_gimple_id", scope: !3, file: !3, line: 2702, type: !2305, scopeLine: 2703, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6149)
!6149 = !{!6150}
!6150 = !DILocalVariable(name: "t", arg: 1, scope: !6148, file: !3, line: 2702, type: !450)
!6151 = !DILocation(line: 0, scope: !6148)
!6152 = !DILocation(line: 2704, column: 11, scope: !6148)
!6153 = !DILocation(line: 2705, column: 4, scope: !6148)
!6154 = !DILocation(line: 2705, column: 7, scope: !6148)
!6155 = !DILocation(line: 2705, column: 21, scope: !6148)
!6156 = !DILocation(line: 2706, column: 4, scope: !6148)
!6157 = !DILocation(line: 2706, column: 21, scope: !6148)
!6158 = !DILocation(line: 2707, column: 4, scope: !6148)
!6159 = !DILocation(line: 2707, column: 21, scope: !6148)
!6160 = !DILocation(line: 2709, column: 4, scope: !6148)
!6161 = !DILocation(line: 2709, column: 21, scope: !6148)
!6162 = !DILocation(line: 2704, column: 3, scope: !6148)
!6163 = distinct !DISubprogram(name: "handled_component_p", scope: !50, file: !50, line: 4551, type: !2695, scopeLine: 4552, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6164)
!6164 = !{!6165}
!6165 = !DILocalVariable(name: "t", arg: 1, scope: !6163, file: !50, line: 4551, type: !1563)
!6166 = !DILocation(line: 0, scope: !6163)
!6167 = !DILocation(line: 4553, column: 11, scope: !6163)
!6168 = !DILocation(line: 4553, column: 3, scope: !6163)
!6169 = !DILocation(line: 4565, column: 7, scope: !6170)
!6170 = distinct !DILexicalBlock(scope: !6163, file: !50, line: 4554, column: 5)
!6171 = !DILocation(line: 0, scope: !6170)
!6172 = !DILocation(line: 4567, column: 1, scope: !6163)
!6173 = distinct !DISubprogram(name: "is_gimple_constant", scope: !3, file: !3, line: 2487, type: !2695, scopeLine: 2488, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6174)
!6174 = !{!6175}
!6175 = !DILocalVariable(name: "t", arg: 1, scope: !6173, file: !3, line: 2487, type: !1563)
!6176 = !DILocation(line: 0, scope: !6173)
!6177 = !DILocation(line: 2489, column: 11, scope: !6173)
!6178 = !DILocation(line: 2489, column: 3, scope: !6173)
!6179 = !DILocation(line: 2501, column: 11, scope: !6180)
!6180 = distinct !DILexicalBlock(scope: !6181, file: !3, line: 2501, column: 11)
!6181 = distinct !DILexicalBlock(scope: !6173, file: !3, line: 2490, column: 5)
!6182 = !DILocation(line: 2501, column: 25, scope: !6180)
!6183 = !DILocation(line: 2501, column: 28, scope: !6180)
!6184 = !DILocation(line: 2501, column: 54, scope: !6180)
!6185 = !DILocation(line: 2501, column: 11, scope: !6181)
!6186 = !DILocation(line: 2502, column: 9, scope: !6180)
!6187 = !DILocation(line: 2502, column: 2, scope: !6180)
!6188 = !DILocation(line: 2507, column: 7, scope: !6181)
!6189 = !DILocation(line: 0, scope: !6181)
!6190 = !DILocation(line: 2509, column: 1, scope: !6173)
!6191 = distinct !DISubprogram(name: "is_gimple_address", scope: !3, file: !3, line: 2514, type: !2695, scopeLine: 2515, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6192)
!6192 = !{!6193, !6194}
!6193 = !DILocalVariable(name: "t", arg: 1, scope: !6191, file: !3, line: 2514, type: !1563)
!6194 = !DILocalVariable(name: "op", scope: !6191, file: !3, line: 2516, type: !450)
!6195 = !DILocation(line: 0, scope: !6191)
!6196 = !DILocation(line: 2518, column: 7, scope: !6197)
!6197 = distinct !DILexicalBlock(scope: !6191, file: !3, line: 2518, column: 7)
!6198 = !DILocation(line: 2518, column: 21, scope: !6197)
!6199 = !DILocation(line: 2518, column: 7, scope: !6191)
!6200 = !DILocation(line: 2522, column: 3, scope: !6191)
!6201 = !DILocation(line: 2522, column: 10, scope: !6191)
!6202 = !DILocation(line: 2524, column: 27, scope: !6203)
!6203 = distinct !DILexicalBlock(scope: !6204, file: !3, line: 2524, column: 11)
!6204 = distinct !DILexicalBlock(scope: !6191, file: !3, line: 2523, column: 5)
!6205 = !DILocation(line: 2525, column: 5, scope: !6203)
!6206 = !DILocation(line: 2525, column: 23, scope: !6203)
!6207 = !DILocation(line: 2526, column: 4, scope: !6203)
!6208 = !DILocation(line: 2526, column: 23, scope: !6203)
!6209 = !DILocation(line: 2526, column: 8, scope: !6203)
!6210 = !DILocation(line: 2524, column: 11, scope: !6204)
!6211 = distinct !{!6211, !6200, !6212}
!6212 = !DILocation(line: 2530, column: 5, scope: !6191)
!6213 = !DILocation(line: 2532, column: 7, scope: !6214)
!6214 = distinct !DILexicalBlock(scope: !6191, file: !3, line: 2532, column: 7)
!6215 = !DILocation(line: 2532, column: 29, scope: !6214)
!6216 = !DILocation(line: 2532, column: 32, scope: !6214)
!6217 = !DILocation(line: 2532, column: 7, scope: !6191)
!6218 = !DILocation(line: 2535, column: 11, scope: !6191)
!6219 = !DILocation(line: 2535, column: 3, scope: !6191)
!6220 = !DILocation(line: 2546, column: 7, scope: !6221)
!6221 = distinct !DILexicalBlock(scope: !6191, file: !3, line: 2536, column: 5)
!6222 = !DILocation(line: 2548, column: 1, scope: !6191)
!6223 = distinct !DISubprogram(name: "is_gimple_invariant_address", scope: !3, file: !3, line: 2584, type: !2695, scopeLine: 2585, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6224)
!6224 = !{!6225, !6226}
!6225 = !DILocalVariable(name: "t", arg: 1, scope: !6223, file: !3, line: 2584, type: !1563)
!6226 = !DILocalVariable(name: "op", scope: !6223, file: !3, line: 2586, type: !1563)
!6227 = !DILocation(line: 0, scope: !6223)
!6228 = !DILocation(line: 2588, column: 7, scope: !6229)
!6229 = distinct !DILexicalBlock(scope: !6223, file: !3, line: 2588, column: 7)
!6230 = !DILocation(line: 2588, column: 21, scope: !6229)
!6231 = !DILocation(line: 2588, column: 7, scope: !6223)
!6232 = !DILocation(line: 2591, column: 30, scope: !6223)
!6233 = !DILocation(line: 2591, column: 8, scope: !6223)
!6234 = !DILocation(line: 2593, column: 10, scope: !6223)
!6235 = !DILocation(line: 2593, column: 13, scope: !6223)
!6236 = !DILocation(line: 2593, column: 17, scope: !6223)
!6237 = !DILocation(line: 2593, column: 39, scope: !6223)
!6238 = !DILocation(line: 2593, column: 42, scope: !6223)
!6239 = !DILocation(line: 2593, column: 3, scope: !6223)
!6240 = !DILocation(line: 2594, column: 1, scope: !6223)
!6241 = distinct !DISubprogram(name: "strip_invariant_refs", scope: !3, file: !3, line: 2554, type: !6242, scopeLine: 2555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6244)
!6242 = !DISubroutineType(types: !6243)
!6243 = !{!1563, !1563}
!6244 = !{!6245}
!6245 = !DILocalVariable(name: "op", arg: 1, scope: !6241, file: !3, line: 2554, type: !1563)
!6246 = !DILocation(line: 0, scope: !6241)
!6247 = !DILocation(line: 2556, column: 3, scope: !6241)
!6248 = !DILocation(line: 2556, column: 10, scope: !6241)
!6249 = !DILocation(line: 2558, column: 15, scope: !6250)
!6250 = distinct !DILexicalBlock(scope: !6241, file: !3, line: 2557, column: 5)
!6251 = !DILocation(line: 2558, column: 7, scope: !6250)
!6252 = !DILocation(line: 2562, column: 29, scope: !6253)
!6253 = distinct !DILexicalBlock(scope: !6254, file: !3, line: 2562, column: 8)
!6254 = distinct !DILexicalBlock(scope: !6250, file: !3, line: 2559, column: 2)
!6255 = !DILocation(line: 2562, column: 9, scope: !6253)
!6256 = !DILocation(line: 2563, column: 8, scope: !6253)
!6257 = !DILocation(line: 2563, column: 11, scope: !6253)
!6258 = !DILocation(line: 2563, column: 32, scope: !6253)
!6259 = !DILocation(line: 2564, column: 8, scope: !6253)
!6260 = !DILocation(line: 2564, column: 11, scope: !6253)
!6261 = !DILocation(line: 2564, column: 32, scope: !6253)
!6262 = !DILocation(line: 2562, column: 8, scope: !6254)
!6263 = !DILocation(line: 2569, column: 8, scope: !6264)
!6264 = distinct !DILexicalBlock(scope: !6254, file: !3, line: 2569, column: 8)
!6265 = !DILocation(line: 2569, column: 29, scope: !6264)
!6266 = !DILocation(line: 2569, column: 8, scope: !6254)
!6267 = !DILocation(line: 2575, column: 12, scope: !6250)
!6268 = distinct !{!6268, !6247, !6269}
!6269 = !DILocation(line: 2576, column: 5, scope: !6241)
!6270 = !DILocation(line: 2579, column: 1, scope: !6241)
!6271 = distinct !DISubprogram(name: "is_gimple_ip_invariant_address", scope: !3, file: !3, line: 2600, type: !2695, scopeLine: 2601, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6272)
!6272 = !{!6273, !6274}
!6273 = !DILocalVariable(name: "t", arg: 1, scope: !6271, file: !3, line: 2600, type: !1563)
!6274 = !DILocalVariable(name: "op", scope: !6271, file: !3, line: 2602, type: !1563)
!6275 = !DILocation(line: 0, scope: !6271)
!6276 = !DILocation(line: 2604, column: 7, scope: !6277)
!6277 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 2604, column: 7)
!6278 = !DILocation(line: 2604, column: 21, scope: !6277)
!6279 = !DILocation(line: 2604, column: 7, scope: !6271)
!6280 = !DILocation(line: 2607, column: 30, scope: !6271)
!6281 = !DILocation(line: 2607, column: 8, scope: !6271)
!6282 = !DILocation(line: 2609, column: 10, scope: !6271)
!6283 = !DILocation(line: 2609, column: 13, scope: !6271)
!6284 = !DILocation(line: 2609, column: 17, scope: !6271)
!6285 = !DILocation(line: 2609, column: 39, scope: !6271)
!6286 = !DILocation(line: 2609, column: 42, scope: !6271)
!6287 = !DILocation(line: 2609, column: 3, scope: !6271)
!6288 = !DILocation(line: 2610, column: 1, scope: !6271)
!6289 = distinct !DISubprogram(name: "is_gimple_ip_invariant", scope: !3, file: !3, line: 2628, type: !2695, scopeLine: 2629, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6290)
!6290 = !{!6291}
!6291 = !DILocalVariable(name: "t", arg: 1, scope: !6289, file: !3, line: 2628, type: !1563)
!6292 = !DILocation(line: 0, scope: !6289)
!6293 = !DILocation(line: 2630, column: 7, scope: !6294)
!6294 = distinct !DILexicalBlock(scope: !6289, file: !3, line: 2630, column: 7)
!6295 = !DILocation(line: 2630, column: 21, scope: !6294)
!6296 = !DILocation(line: 2630, column: 7, scope: !6289)
!6297 = !DILocation(line: 2631, column: 12, scope: !6294)
!6298 = !DILocation(line: 2631, column: 5, scope: !6294)
!6299 = !DILocation(line: 2633, column: 10, scope: !6289)
!6300 = !DILocation(line: 2633, column: 3, scope: !6289)
!6301 = !DILocation(line: 2634, column: 1, scope: !6289)
!6302 = distinct !DISubprogram(name: "is_gimple_stmt", scope: !3, file: !3, line: 2639, type: !2305, scopeLine: 2640, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6303)
!6303 = !{!6304, !6305}
!6304 = !DILocalVariable(name: "t", arg: 1, scope: !6302, file: !3, line: 2639, type: !450)
!6305 = !DILocalVariable(name: "code", scope: !6302, file: !3, line: 2641, type: !6306)
!6306 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !82)
!6307 = !DILocation(line: 0, scope: !6302)
!6308 = !DILocation(line: 2641, column: 31, scope: !6302)
!6309 = !DILocation(line: 2643, column: 3, scope: !6302)
!6310 = !DILocation(line: 2647, column: 14, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 2644, column: 5)
!6312 = !DILocation(line: 2647, column: 7, scope: !6311)
!6313 = !DILocation(line: 2652, column: 14, scope: !6311)
!6314 = !DILocation(line: 2652, column: 28, scope: !6311)
!6315 = !DILocation(line: 2652, column: 36, scope: !6311)
!6316 = !DILocation(line: 2652, column: 39, scope: !6311)
!6317 = !DILocation(line: 2652, column: 7, scope: !6311)
!6318 = !DILocation(line: 2684, column: 7, scope: !6311)
!6319 = !DILocation(line: 0, scope: !6311)
!6320 = !DILocation(line: 2686, column: 1, scope: !6302)
!6321 = distinct !DISubprogram(name: "is_gimple_variable", scope: !3, file: !3, line: 2691, type: !2305, scopeLine: 2692, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6322)
!6322 = !{!6323}
!6323 = !DILocalVariable(name: "t", arg: 1, scope: !6321, file: !3, line: 2691, type: !450)
!6324 = !DILocation(line: 0, scope: !6321)
!6325 = !DILocation(line: 2693, column: 11, scope: !6321)
!6326 = !DILocation(line: 2693, column: 25, scope: !6321)
!6327 = !DILocation(line: 2694, column: 4, scope: !6321)
!6328 = !DILocation(line: 2694, column: 21, scope: !6321)
!6329 = !DILocation(line: 2695, column: 4, scope: !6321)
!6330 = !DILocation(line: 2695, column: 21, scope: !6321)
!6331 = !DILocation(line: 2696, column: 4, scope: !6321)
!6332 = !DILocation(line: 2696, column: 21, scope: !6321)
!6333 = !DILocation(line: 2693, column: 3, scope: !6321)
!6334 = distinct !DISubprogram(name: "is_gimple_non_addressable", scope: !3, file: !3, line: 2770, type: !2305, scopeLine: 2771, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6335)
!6335 = !{!6336}
!6336 = !DILocalVariable(name: "t", arg: 1, scope: !6334, file: !3, line: 2770, type: !450)
!6337 = !DILocation(line: 0, scope: !6334)
!6338 = !DILocation(line: 2772, column: 7, scope: !6339)
!6339 = distinct !DILexicalBlock(scope: !6334, file: !3, line: 2772, column: 7)
!6340 = !DILocation(line: 2772, column: 21, scope: !6339)
!6341 = !DILocation(line: 2772, column: 7, scope: !6334)
!6342 = !DILocation(line: 2773, column: 9, scope: !6339)
!6343 = !DILocation(line: 2773, column: 5, scope: !6339)
!6344 = !DILocation(line: 2775, column: 11, scope: !6334)
!6345 = !DILocation(line: 2775, column: 34, scope: !6334)
!6346 = !DILocation(line: 2775, column: 39, scope: !6334)
!6347 = !DILocation(line: 2775, column: 37, scope: !6334)
!6348 = !DILocation(line: 2775, column: 3, scope: !6334)
!6349 = distinct !DISubprogram(name: "is_gimple_asm_val", scope: !3, file: !3, line: 2795, type: !2305, scopeLine: 2796, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6350)
!6350 = !{!6351}
!6351 = !DILocalVariable(name: "t", arg: 1, scope: !6349, file: !3, line: 2795, type: !450)
!6352 = !DILocation(line: 0, scope: !6349)
!6353 = !DILocation(line: 2797, column: 7, scope: !6354)
!6354 = distinct !DILexicalBlock(scope: !6349, file: !3, line: 2797, column: 7)
!6355 = !DILocation(line: 2797, column: 21, scope: !6354)
!6356 = !DILocation(line: 2797, column: 33, scope: !6354)
!6357 = !DILocation(line: 2797, column: 36, scope: !6354)
!6358 = !DILocation(line: 2797, column: 7, scope: !6349)
!6359 = !DILocation(line: 2800, column: 10, scope: !6349)
!6360 = !DILocation(line: 2800, column: 3, scope: !6349)
!6361 = !DILocation(line: 2801, column: 1, scope: !6349)
!6362 = distinct !DISubprogram(name: "is_gimple_min_lval", scope: !3, file: !3, line: 2806, type: !2305, scopeLine: 2807, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6363)
!6363 = !{!6364}
!6364 = !DILocalVariable(name: "t", arg: 1, scope: !6362, file: !3, line: 2806, type: !450)
!6365 = !DILocation(line: 0, scope: !6362)
!6366 = !DILocation(line: 2808, column: 13, scope: !6367)
!6367 = distinct !DILexicalBlock(scope: !6362, file: !3, line: 2808, column: 7)
!6368 = !DILocation(line: 2808, column: 11, scope: !6367)
!6369 = !DILocation(line: 2808, column: 7, scope: !6362)
!6370 = !DILocation(line: 2810, column: 11, scope: !6362)
!6371 = !DILocation(line: 2810, column: 28, scope: !6362)
!6372 = !DILocation(line: 2810, column: 31, scope: !6362)
!6373 = !DILocation(line: 2810, column: 45, scope: !6362)
!6374 = !DILocation(line: 2810, column: 3, scope: !6362)
!6375 = !DILocation(line: 2811, column: 1, scope: !6362)
!6376 = distinct !DISubprogram(name: "is_gimple_cast", scope: !3, file: !3, line: 2816, type: !2305, scopeLine: 2817, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6377)
!6377 = !{!6378}
!6378 = !DILocalVariable(name: "t", arg: 1, scope: !6376, file: !3, line: 2816, type: !450)
!6379 = !DILocation(line: 0, scope: !6376)
!6380 = !DILocation(line: 2818, column: 11, scope: !6376)
!6381 = !DILocation(line: 2819, column: 11, scope: !6376)
!6382 = !DILocation(line: 2819, column: 28, scope: !6376)
!6383 = !DILocation(line: 2818, column: 3, scope: !6376)
!6384 = distinct !DISubprogram(name: "get_call_expr_in", scope: !3, file: !3, line: 2834, type: !6385, scopeLine: 2835, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6387)
!6385 = !DISubroutineType(types: !6386)
!6386 = !{!450, !450}
!6387 = !{!6388}
!6388 = !DILocalVariable(name: "t", arg: 1, scope: !6384, file: !3, line: 2834, type: !450)
!6389 = !DILocation(line: 0, scope: !6384)
!6390 = !DILocation(line: 2836, column: 7, scope: !6391)
!6391 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 2836, column: 7)
!6392 = !DILocation(line: 2836, column: 21, scope: !6391)
!6393 = !DILocation(line: 2836, column: 7, scope: !6384)
!6394 = !DILocation(line: 2837, column: 9, scope: !6391)
!6395 = !DILocation(line: 0, scope: !6396)
!6396 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 2838, column: 7)
!6397 = !DILocation(line: 2838, column: 7, scope: !6396)
!6398 = !DILocation(line: 2837, column: 5, scope: !6391)
!6399 = !DILocation(line: 2838, column: 21, scope: !6396)
!6400 = !DILocation(line: 2838, column: 7, scope: !6384)
!6401 = !DILocation(line: 2839, column: 9, scope: !6396)
!6402 = !DILocation(line: 0, scope: !6403)
!6403 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 2840, column: 7)
!6404 = !DILocation(line: 2840, column: 7, scope: !6403)
!6405 = !DILocation(line: 2840, column: 21, scope: !6403)
!6406 = !DILocation(line: 2839, column: 5, scope: !6396)
!6407 = !DILocation(line: 2843, column: 1, scope: !6384)
!6408 = distinct !DISubprogram(name: "get_base_address", scope: !3, file: !3, line: 2856, type: !6385, scopeLine: 2857, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6409)
!6409 = !{!6410}
!6410 = !DILocalVariable(name: "t", arg: 1, scope: !6408, file: !3, line: 2856, type: !450)
!6411 = !DILocation(line: 0, scope: !6408)
!6412 = !DILocation(line: 2858, column: 3, scope: !6408)
!6413 = !DILocation(line: 2858, column: 10, scope: !6408)
!6414 = !DILocation(line: 2859, column: 9, scope: !6408)
!6415 = distinct !{!6415, !6412, !6414}
!6416 = !DILocation(line: 2861, column: 7, scope: !6417)
!6417 = distinct !DILexicalBlock(scope: !6408, file: !3, line: 2861, column: 7)
!6418 = !DILocation(line: 2862, column: 7, scope: !6417)
!6419 = !DILocation(line: 2862, column: 24, scope: !6417)
!6420 = !DILocation(line: 2863, column: 7, scope: !6417)
!6421 = !DILocation(line: 2863, column: 24, scope: !6417)
!6422 = !DILocation(line: 2864, column: 7, scope: !6417)
!6423 = !DILocation(line: 2864, column: 10, scope: !6417)
!6424 = !DILocation(line: 2861, column: 7, scope: !6408)
!6425 = !DILocation(line: 2868, column: 1, scope: !6408)
!6426 = distinct !DISubprogram(name: "recalculate_side_effects", scope: !3, file: !3, line: 2871, type: !6427, scopeLine: 2872, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6429)
!6427 = !DISubroutineType(types: !6428)
!6428 = !{null, !450}
!6429 = !{!6430, !6431, !6432, !6433, !6434}
!6430 = !DILocalVariable(name: "t", arg: 1, scope: !6426, file: !3, line: 2871, type: !450)
!6431 = !DILocalVariable(name: "code", scope: !6426, file: !3, line: 2873, type: !82)
!6432 = !DILocalVariable(name: "len", scope: !6426, file: !3, line: 2874, type: !372)
!6433 = !DILocalVariable(name: "i", scope: !6426, file: !3, line: 2875, type: !372)
!6434 = !DILocalVariable(name: "op", scope: !6435, file: !3, line: 2906, type: !450)
!6435 = distinct !DILexicalBlock(scope: !6436, file: !3, line: 2905, column: 2)
!6436 = distinct !DILexicalBlock(scope: !6437, file: !3, line: 2904, column: 7)
!6437 = distinct !DILexicalBlock(scope: !6438, file: !3, line: 2904, column: 7)
!6438 = distinct !DILexicalBlock(scope: !6426, file: !3, line: 2878, column: 5)
!6439 = !DILocation(line: 0, scope: !6426)
!6440 = !DILocation(line: 2873, column: 25, scope: !6426)
!6441 = !DILocation(line: 2874, column: 13, scope: !6426)
!6442 = !DILocation(line: 2877, column: 11, scope: !6426)
!6443 = !DILocation(line: 2877, column: 3, scope: !6426)
!6444 = !DILocation(line: 2880, column: 7, scope: !6438)
!6445 = !DILocation(line: 2903, column: 31, scope: !6438)
!6446 = !DILocation(line: 2903, column: 29, scope: !6438)
!6447 = !DILocation(line: 0, scope: !6435)
!6448 = !DILocation(line: 2904, column: 12, scope: !6437)
!6449 = !DILocation(line: 2904, column: 21, scope: !6436)
!6450 = !DILocation(line: 2904, column: 7, scope: !6437)
!6451 = !DILocation(line: 2906, column: 14, scope: !6435)
!6452 = !DILocation(line: 2907, column: 8, scope: !6453)
!6453 = distinct !DILexicalBlock(scope: !6435, file: !3, line: 2907, column: 8)
!6454 = !DILocation(line: 2907, column: 11, scope: !6453)
!6455 = !DILocation(line: 2907, column: 14, scope: !6453)
!6456 = !DILocation(line: 2907, column: 8, scope: !6435)
!6457 = !DILocation(line: 2908, column: 28, scope: !6453)
!6458 = !DILocation(line: 2908, column: 6, scope: !6453)
!6459 = !DILocation(line: 2904, column: 28, scope: !6436)
!6460 = !DILocation(line: 2904, column: 7, scope: !6436)
!6461 = distinct !{!6461, !6450, !6462}
!6462 = !DILocation(line: 2909, column: 2, scope: !6437)
!6463 = !DILocation(line: 2917, column: 7, scope: !6438)
!6464 = !DILocation(line: 2918, column: 4, scope: !6438)
!6465 = !DILocation(line: 2919, column: 1, scope: !6426)
!6466 = distinct !DISubprogram(name: "tree_operand_length", scope: !50, file: !50, line: 5347, type: !6467, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6469)
!6467 = !DISubroutineType(types: !6468)
!6468 = !{!372, !1563}
!6469 = !{!6470}
!6470 = !DILocalVariable(name: "node", arg: 1, scope: !6466, file: !50, line: 5347, type: !1563)
!6471 = !DILocation(line: 0, scope: !6466)
!6472 = !DILocation(line: 5349, column: 7, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6466, file: !50, line: 5349, column: 7)
!6474 = !DILocation(line: 5349, column: 7, scope: !6466)
!6475 = !DILocation(line: 5350, column: 12, scope: !6473)
!6476 = !DILocation(line: 5350, column: 5, scope: !6473)
!6477 = !DILocation(line: 5352, column: 12, scope: !6473)
!6478 = !DILocation(line: 5352, column: 5, scope: !6473)
!6479 = !DILocation(line: 0, scope: !6473)
!6480 = !DILocation(line: 5353, column: 1, scope: !6466)
!6481 = distinct !DISubprogram(name: "canonicalize_cond_expr_cond", scope: !3, file: !3, line: 2926, type: !6385, scopeLine: 2927, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6482)
!6482 = !{!6483, !6484, !6487, !6490}
!6483 = !DILocalVariable(name: "t", arg: 1, scope: !6481, file: !3, line: 2926, type: !450)
!6484 = !DILocalVariable(name: "top0", scope: !6485, file: !3, line: 2937, type: !450)
!6485 = distinct !DILexicalBlock(scope: !6486, file: !3, line: 2936, column: 5)
!6486 = distinct !DILexicalBlock(scope: !6481, file: !3, line: 2934, column: 7)
!6487 = !DILocalVariable(name: "top0", scope: !6488, file: !3, line: 2944, type: !450)
!6488 = distinct !DILexicalBlock(scope: !6489, file: !3, line: 2943, column: 5)
!6489 = distinct !DILexicalBlock(scope: !6486, file: !3, line: 2942, column: 12)
!6490 = !DILocalVariable(name: "top0", scope: !6491, file: !3, line: 2954, type: !450)
!6491 = distinct !DILexicalBlock(scope: !6492, file: !3, line: 2953, column: 5)
!6492 = distinct !DILexicalBlock(scope: !6489, file: !3, line: 2949, column: 12)
!6493 = !DILocation(line: 0, scope: !6481)
!6494 = !DILocation(line: 2929, column: 7, scope: !6495)
!6495 = distinct !DILexicalBlock(scope: !6481, file: !3, line: 2929, column: 7)
!6496 = !DILocation(line: 2930, column: 7, scope: !6495)
!6497 = !DILocation(line: 2930, column: 25, scope: !6495)
!6498 = !DILocation(line: 2930, column: 10, scope: !6495)
!6499 = !DILocation(line: 2929, column: 7, scope: !6481)
!6500 = !DILocation(line: 2931, column: 9, scope: !6495)
!6501 = !DILocation(line: 2931, column: 5, scope: !6495)
!6502 = !DILocation(line: 2934, column: 7, scope: !6486)
!6503 = !DILocation(line: 2935, column: 7, scope: !6486)
!6504 = !DILocation(line: 2935, column: 10, scope: !6486)
!6505 = !DILocation(line: 2935, column: 36, scope: !6486)
!6506 = !DILocation(line: 2934, column: 7, scope: !6481)
!6507 = !DILocation(line: 2937, column: 19, scope: !6485)
!6508 = !DILocation(line: 0, scope: !6485)
!6509 = !DILocation(line: 2938, column: 11, scope: !6485)
!6510 = !DILocation(line: 2940, column: 5, scope: !6485)
!6511 = !DILocation(line: 2942, column: 26, scope: !6489)
!6512 = !DILocation(line: 2942, column: 12, scope: !6486)
!6513 = !DILocation(line: 2944, column: 19, scope: !6488)
!6514 = !DILocation(line: 0, scope: !6488)
!6515 = !DILocation(line: 2945, column: 11, scope: !6488)
!6516 = !DILocation(line: 2947, column: 5, scope: !6488)
!6517 = !DILocation(line: 2949, column: 26, scope: !6492)
!6518 = !DILocation(line: 2950, column: 5, scope: !6492)
!6519 = !DILocation(line: 2950, column: 8, scope: !6492)
!6520 = !DILocation(line: 2951, column: 5, scope: !6492)
!6521 = !DILocation(line: 2951, column: 22, scope: !6492)
!6522 = !DILocation(line: 2951, column: 8, scope: !6492)
!6523 = !DILocation(line: 2952, column: 5, scope: !6492)
!6524 = !DILocation(line: 2952, column: 23, scope: !6492)
!6525 = !DILocation(line: 2952, column: 8, scope: !6492)
!6526 = !DILocation(line: 2949, column: 12, scope: !6489)
!6527 = !DILocation(line: 2954, column: 19, scope: !6491)
!6528 = !DILocation(line: 0, scope: !6491)
!6529 = !DILocation(line: 2955, column: 11, scope: !6491)
!6530 = !DILocation(line: 2957, column: 5, scope: !6491)
!6531 = !DILocation(line: 0, scope: !6486)
!6532 = !DILocation(line: 2959, column: 7, scope: !6533)
!6533 = distinct !DILexicalBlock(scope: !6481, file: !3, line: 2959, column: 7)
!6534 = !DILocation(line: 2963, column: 1, scope: !6481)
!6535 = distinct !DISubprogram(name: "truth_value_p", scope: !50, file: !50, line: 4919, type: !6536, scopeLine: 4920, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6538)
!6536 = !DISubroutineType(types: !6537)
!6537 = !{!371, !82}
!6538 = !{!6539}
!6539 = !DILocalVariable(name: "code", arg: 1, scope: !6535, file: !50, line: 4919, type: !82)
!6540 = !DILocation(line: 0, scope: !6535)
!6541 = !DILocation(line: 4921, column: 11, scope: !6535)
!6542 = !DILocation(line: 4921, column: 34, scope: !6535)
!6543 = !DILocation(line: 4922, column: 12, scope: !6535)
!6544 = !DILocation(line: 4922, column: 4, scope: !6535)
!6545 = !DILocation(line: 4922, column: 38, scope: !6535)
!6546 = !DILocation(line: 4921, column: 10, scope: !6535)
!6547 = !DILocation(line: 4921, column: 3, scope: !6535)
!6548 = distinct !DISubprogram(name: "gimple_call_copy_skip_args", scope: !3, file: !3, line: 2969, type: !6549, scopeLine: 2970, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6551)
!6549 = !DISubroutineType(types: !6550)
!6550 = !{!379, !379, !823}
!6551 = !{!6552, !6553, !6554, !6555, !6556, !6557, !6558}
!6552 = !DILocalVariable(name: "stmt", arg: 1, scope: !6548, file: !3, line: 2969, type: !379)
!6553 = !DILocalVariable(name: "args_to_skip", arg: 2, scope: !6548, file: !3, line: 2969, type: !823)
!6554 = !DILocalVariable(name: "i", scope: !6548, file: !3, line: 2971, type: !372)
!6555 = !DILocalVariable(name: "fn", scope: !6548, file: !3, line: 2972, type: !450)
!6556 = !DILocalVariable(name: "nargs", scope: !6548, file: !3, line: 2973, type: !372)
!6557 = !DILocalVariable(name: "vargs", scope: !6548, file: !3, line: 2974, type: !1558)
!6558 = !DILocalVariable(name: "new_stmt", scope: !6548, file: !3, line: 2975, type: !379)
!6559 = !DILocation(line: 0, scope: !6548)
!6560 = !DILocation(line: 2972, column: 13, scope: !6548)
!6561 = !DILocation(line: 2973, column: 15, scope: !6548)
!6562 = !DILocation(line: 2974, column: 3, scope: !6548)
!6563 = !DILocation(line: 2974, column: 28, scope: !6548)
!6564 = !DILocation(line: 2974, column: 20, scope: !6548)
!6565 = !DILocation(line: 0, scope: !6566)
!6566 = distinct !DILexicalBlock(scope: !6567, file: !3, line: 2978, column: 9)
!6567 = distinct !DILexicalBlock(scope: !6568, file: !3, line: 2977, column: 3)
!6568 = distinct !DILexicalBlock(scope: !6548, file: !3, line: 2977, column: 3)
!6569 = !DILocation(line: 2977, column: 8, scope: !6568)
!6570 = !DILocation(line: 0, scope: !6568)
!6571 = !DILocation(line: 2977, column: 17, scope: !6567)
!6572 = !DILocation(line: 2977, column: 3, scope: !6568)
!6573 = !DILocation(line: 2978, column: 10, scope: !6566)
!6574 = !DILocation(line: 2978, column: 9, scope: !6567)
!6575 = !DILocation(line: 2979, column: 7, scope: !6566)
!6576 = !DILocation(line: 2977, column: 27, scope: !6567)
!6577 = !DILocation(line: 2977, column: 3, scope: !6567)
!6578 = distinct !{!6578, !6572, !6579}
!6579 = !DILocation(line: 2979, column: 7, scope: !6568)
!6580 = !DILocation(line: 2981, column: 14, scope: !6548)
!6581 = !DILocation(line: 2982, column: 3, scope: !6548)
!6582 = !DILocation(line: 2983, column: 7, scope: !6583)
!6583 = distinct !DILexicalBlock(scope: !6548, file: !3, line: 2983, column: 7)
!6584 = !DILocation(line: 2983, column: 7, scope: !6548)
!6585 = !DILocation(line: 2984, column: 36, scope: !6583)
!6586 = !DILocation(line: 2984, column: 5, scope: !6583)
!6587 = !DILocation(line: 2986, column: 30, scope: !6548)
!6588 = !DILocation(line: 2986, column: 3, scope: !6548)
!6589 = !DILocation(line: 2987, column: 30, scope: !6548)
!6590 = !DILocation(line: 2987, column: 3, scope: !6548)
!6591 = !DILocation(line: 2989, column: 31, scope: !6548)
!6592 = !DILocation(line: 2989, column: 3, scope: !6548)
!6593 = !DILocation(line: 2990, column: 7, scope: !6594)
!6594 = distinct !DILexicalBlock(scope: !6548, file: !3, line: 2990, column: 7)
!6595 = !DILocation(line: 2990, column: 7, scope: !6548)
!6596 = !DILocation(line: 2991, column: 36, scope: !6594)
!6597 = !DILocation(line: 2991, column: 5, scope: !6594)
!6598 = !DILocation(line: 2994, column: 36, scope: !6548)
!6599 = !DILocation(line: 2994, column: 3, scope: !6548)
!6600 = !DILocation(line: 2995, column: 35, scope: !6548)
!6601 = !DILocation(line: 2995, column: 3, scope: !6548)
!6602 = !DILocation(line: 2996, column: 44, scope: !6548)
!6603 = !DILocation(line: 2996, column: 3, scope: !6548)
!6604 = !DILocation(line: 2997, column: 46, scope: !6548)
!6605 = !DILocation(line: 2997, column: 3, scope: !6548)
!6606 = !DILocation(line: 2998, column: 41, scope: !6548)
!6607 = !DILocation(line: 2998, column: 3, scope: !6548)
!6608 = !DILocation(line: 2999, column: 42, scope: !6548)
!6609 = !DILocation(line: 2999, column: 3, scope: !6548)
!6610 = !DILocation(line: 3001, column: 3, scope: !6548)
!6611 = !DILocation(line: 3004, column: 1, scope: !6548)
!6612 = !DILocation(line: 3003, column: 3, scope: !6548)
!6613 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !50, file: !50, line: 184, type: !6614, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6616)
!6614 = !DISubroutineType(types: !6615)
!6615 = !{!1558, !372}
!6616 = !{!6617}
!6617 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6613, file: !50, line: 184, type: !372)
!6618 = !DILocation(line: 0, scope: !6613)
!6619 = !DILocation(line: 184, column: 1, scope: !6613)
!6620 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !50, file: !50, line: 182, type: !6621, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6624)
!6621 = !DISubroutineType(types: !6622)
!6622 = !{!908, !6623, !450}
!6623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !804, size: 64)
!6624 = !{!6625, !6626, !6627}
!6625 = !DILocalVariable(name: "vec_", arg: 1, scope: !6620, file: !50, line: 182, type: !6623)
!6626 = !DILocalVariable(name: "obj_", arg: 2, scope: !6620, file: !50, line: 182, type: !450)
!6627 = !DILocalVariable(name: "slot_", scope: !6620, file: !50, line: 182, type: !908)
!6628 = !DILocation(line: 0, scope: !6620)
!6629 = !DILocation(line: 182, column: 1, scope: !6620)
!6630 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !50, file: !50, line: 184, type: !6631, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6634)
!6631 = !DISubroutineType(types: !6632)
!6632 = !{null, !6633}
!6633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1558, size: 64)
!6634 = !{!6635}
!6635 = !DILocalVariable(name: "vec_", arg: 1, scope: !6630, file: !50, line: 184, type: !6633)
!6636 = !DILocation(line: 0, scope: !6630)
!6637 = !DILocation(line: 184, column: 1, scope: !6638)
!6638 = distinct !DILexicalBlock(scope: !6630, file: !50, line: 184, column: 1)
!6639 = !DILocation(line: 184, column: 1, scope: !6630)
!6640 = distinct !DISubprogram(name: "gimple_call_chain", scope: !6, file: !6, line: 1983, type: !3299, scopeLine: 1984, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6641)
!6641 = !{!6642}
!6642 = !DILocalVariable(name: "gs", arg: 1, scope: !6640, file: !6, line: 1983, type: !3301)
!6643 = !DILocation(line: 0, scope: !6640)
!6644 = !DILocation(line: 1986, column: 10, scope: !6640)
!6645 = !DILocation(line: 1986, column: 3, scope: !6640)
!6646 = distinct !DISubprogram(name: "gimple_call_tail_p", scope: !6, file: !6, line: 2071, type: !3913, scopeLine: 2072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6647)
!6647 = !{!6648}
!6648 = !DILocalVariable(name: "s", arg: 1, scope: !6646, file: !6, line: 2071, type: !379)
!6649 = !DILocation(line: 0, scope: !6646)
!6650 = !DILocation(line: 2074, column: 21, scope: !6646)
!6651 = !DILocation(line: 2074, column: 10, scope: !6646)
!6652 = !DILocation(line: 2074, column: 3, scope: !6646)
!6653 = distinct !DISubprogram(name: "gimple_call_cannot_inline_p", scope: !6, file: !6, line: 2094, type: !3913, scopeLine: 2095, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6654)
!6654 = !{!6655}
!6655 = !DILocalVariable(name: "s", arg: 1, scope: !6653, file: !6, line: 2094, type: !379)
!6656 = !DILocation(line: 0, scope: !6653)
!6657 = !DILocation(line: 2097, column: 21, scope: !6653)
!6658 = !DILocation(line: 2097, column: 10, scope: !6653)
!6659 = !DILocation(line: 2097, column: 3, scope: !6653)
!6660 = distinct !DISubprogram(name: "gimple_call_return_slot_opt_p", scope: !6, file: !6, line: 2119, type: !3913, scopeLine: 2120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6661)
!6661 = !{!6662}
!6662 = !DILocalVariable(name: "s", arg: 1, scope: !6660, file: !6, line: 2119, type: !379)
!6663 = !DILocation(line: 0, scope: !6660)
!6664 = !DILocation(line: 2122, column: 21, scope: !6660)
!6665 = !DILocation(line: 2122, column: 10, scope: !6660)
!6666 = !DILocation(line: 2122, column: 3, scope: !6660)
!6667 = distinct !DISubprogram(name: "gimple_call_from_thunk_p", scope: !6, file: !6, line: 2143, type: !3913, scopeLine: 2144, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6668)
!6668 = !{!6669}
!6669 = !DILocalVariable(name: "s", arg: 1, scope: !6667, file: !6, line: 2143, type: !379)
!6670 = !DILocation(line: 0, scope: !6667)
!6671 = !DILocation(line: 2146, column: 21, scope: !6667)
!6672 = !DILocation(line: 2146, column: 10, scope: !6667)
!6673 = !DILocation(line: 2146, column: 3, scope: !6667)
!6674 = distinct !DISubprogram(name: "gimple_call_va_arg_pack_p", scope: !6, file: !6, line: 2168, type: !3913, scopeLine: 2169, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6675)
!6675 = !{!6676}
!6676 = !DILocalVariable(name: "s", arg: 1, scope: !6674, file: !6, line: 2168, type: !379)
!6677 = !DILocation(line: 0, scope: !6674)
!6678 = !DILocation(line: 2171, column: 21, scope: !6674)
!6679 = !DILocation(line: 2171, column: 10, scope: !6674)
!6680 = !DILocation(line: 2171, column: 3, scope: !6674)
!6681 = distinct !DISubprogram(name: "compare_field_offset", scope: !3, file: !3, line: 3130, type: !6682, scopeLine: 3131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6684)
!6682 = !DISubroutineType(types: !6683)
!6683 = !{!371, !450, !450}
!6684 = !{!6685, !6686, !6687, !6690, !6691, !6692}
!6685 = !DILocalVariable(name: "f1", arg: 1, scope: !6681, file: !3, line: 3130, type: !450)
!6686 = !DILocalVariable(name: "f2", arg: 2, scope: !6681, file: !3, line: 3130, type: !450)
!6687 = !DILocalVariable(name: "byte_offset1", scope: !6688, file: !3, line: 3144, type: !503)
!6688 = distinct !DILexicalBlock(scope: !6689, file: !3, line: 3143, column: 5)
!6689 = distinct !DILexicalBlock(scope: !6681, file: !3, line: 3141, column: 7)
!6690 = !DILocalVariable(name: "byte_offset2", scope: !6688, file: !3, line: 3144, type: !503)
!6691 = !DILocalVariable(name: "bit_offset1", scope: !6688, file: !3, line: 3145, type: !503)
!6692 = !DILocalVariable(name: "bit_offset2", scope: !6688, file: !3, line: 3145, type: !503)
!6693 = !DILocation(line: 0, scope: !6681)
!6694 = !DILocation(line: 3132, column: 7, scope: !6695)
!6695 = distinct !DILexicalBlock(scope: !6681, file: !3, line: 3132, column: 7)
!6696 = !DILocation(line: 3132, column: 33, scope: !6695)
!6697 = !DILocation(line: 3132, column: 30, scope: !6695)
!6698 = !DILocation(line: 3132, column: 7, scope: !6681)
!6699 = !DILocation(line: 3134, column: 9, scope: !6695)
!6700 = !DILocation(line: 3133, column: 13, scope: !6695)
!6701 = !DILocation(line: 3135, column: 6, scope: !6695)
!6702 = !DILocation(line: 3135, column: 29, scope: !6695)
!6703 = !DILocation(line: 3136, column: 8, scope: !6695)
!6704 = !DILocation(line: 3135, column: 9, scope: !6695)
!6705 = !DILocation(line: 3133, column: 5, scope: !6695)
!6706 = !DILocation(line: 3141, column: 7, scope: !6689)
!6707 = !DILocation(line: 3142, column: 7, scope: !6689)
!6708 = !DILocation(line: 3142, column: 25, scope: !6689)
!6709 = !DILocation(line: 3142, column: 10, scope: !6689)
!6710 = !DILocation(line: 3141, column: 7, scope: !6681)
!6711 = !DILocation(line: 3146, column: 21, scope: !6688)
!6712 = !DILocation(line: 0, scope: !6688)
!6713 = !DILocation(line: 3147, column: 23, scope: !6688)
!6714 = !DILocation(line: 3148, column: 23, scope: !6688)
!6715 = !DILocation(line: 3148, column: 9, scope: !6688)
!6716 = !DILocation(line: 3149, column: 21, scope: !6688)
!6717 = !DILocation(line: 3150, column: 23, scope: !6688)
!6718 = !DILocation(line: 3151, column: 23, scope: !6688)
!6719 = !DILocation(line: 3151, column: 9, scope: !6688)
!6720 = !DILocation(line: 3152, column: 24, scope: !6721)
!6721 = distinct !DILexicalBlock(scope: !6688, file: !3, line: 3152, column: 11)
!6722 = !DILocation(line: 3152, column: 11, scope: !6688)
!6723 = !DILocation(line: 3154, column: 42, scope: !6688)
!6724 = !DILocation(line: 3154, column: 14, scope: !6688)
!6725 = !DILocation(line: 3154, column: 7, scope: !6688)
!6726 = !DILocation(line: 3158, column: 1, scope: !6681)
!6727 = distinct !DISubprogram(name: "gimple_register_type", scope: !3, file: !3, line: 3815, type: !6385, scopeLine: 3816, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6728)
!6728 = !{!6729, !6730, !6731, !6734, !6737, !6742}
!6729 = !DILocalVariable(name: "t", arg: 1, scope: !6727, file: !3, line: 3815, type: !450)
!6730 = !DILocalVariable(name: "slot", scope: !6727, file: !3, line: 3817, type: !758)
!6731 = !DILocalVariable(name: "new_type", scope: !6732, file: !3, line: 3834, type: !450)
!6732 = distinct !DILexicalBlock(scope: !6733, file: !3, line: 3833, column: 5)
!6733 = distinct !DILexicalBlock(scope: !6727, file: !3, line: 3831, column: 7)
!6734 = !DILocalVariable(name: "tem", scope: !6735, file: !3, line: 3844, type: !450)
!6735 = distinct !DILexicalBlock(scope: !6736, file: !3, line: 3843, column: 2)
!6736 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 3842, column: 11)
!6737 = !DILocalVariable(name: "tem", scope: !6738, file: !3, line: 3861, type: !450)
!6738 = distinct !DILexicalBlock(scope: !6739, file: !3, line: 3860, column: 6)
!6739 = distinct !DILexicalBlock(scope: !6740, file: !3, line: 3857, column: 8)
!6740 = distinct !DILexicalBlock(scope: !6741, file: !3, line: 3856, column: 2)
!6741 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 3855, column: 11)
!6742 = !DILocalVariable(name: "tem", scope: !6743, file: !3, line: 3875, type: !450)
!6743 = distinct !DILexicalBlock(scope: !6744, file: !3, line: 3874, column: 6)
!6744 = distinct !DILexicalBlock(scope: !6745, file: !3, line: 3871, column: 8)
!6745 = distinct !DILexicalBlock(scope: !6746, file: !3, line: 3870, column: 2)
!6746 = distinct !DILexicalBlock(scope: !6741, file: !3, line: 3869, column: 16)
!6747 = !DILocation(line: 0, scope: !6727)
!6748 = !DILocation(line: 3819, column: 3, scope: !6727)
!6749 = !DILocation(line: 3824, column: 7, scope: !6750)
!6750 = distinct !DILexicalBlock(scope: !6727, file: !3, line: 3824, column: 7)
!6751 = !DILocation(line: 3824, column: 29, scope: !6750)
!6752 = !DILocation(line: 3824, column: 7, scope: !6727)
!6753 = !DILocation(line: 3825, column: 5, scope: !6750)
!6754 = !DILocation(line: 3827, column: 7, scope: !6755)
!6755 = distinct !DILexicalBlock(scope: !6727, file: !3, line: 3827, column: 7)
!6756 = !DILocation(line: 3827, column: 20, scope: !6755)
!6757 = !DILocation(line: 3827, column: 7, scope: !6727)
!6758 = !DILocation(line: 3828, column: 20, scope: !6755)
!6759 = !DILocation(line: 3828, column: 18, scope: !6755)
!6760 = !DILocation(line: 3828, column: 5, scope: !6755)
!6761 = !DILocation(line: 3830, column: 26, scope: !6727)
!6762 = !DILocation(line: 3830, column: 40, scope: !6727)
!6763 = !DILocation(line: 3830, column: 10, scope: !6727)
!6764 = !DILocation(line: 3831, column: 7, scope: !6733)
!6765 = !DILocation(line: 3832, column: 7, scope: !6733)
!6766 = !DILocation(line: 3832, column: 24, scope: !6733)
!6767 = !DILocation(line: 3831, column: 7, scope: !6727)
!6768 = !DILocation(line: 0, scope: !6732)
!6769 = !DILocation(line: 3837, column: 7, scope: !6732)
!6770 = !DILocation(line: 3842, column: 16, scope: !6736)
!6771 = !DILocation(line: 3842, column: 13, scope: !6736)
!6772 = !DILocation(line: 3842, column: 11, scope: !6732)
!6773 = !DILocation(line: 3845, column: 4, scope: !6735)
!6774 = !DILocation(line: 0, scope: !6735)
!6775 = !DILocation(line: 3845, column: 15, scope: !6735)
!6776 = !DILocation(line: 3845, column: 18, scope: !6735)
!6777 = !DILocation(line: 3845, column: 42, scope: !6735)
!6778 = distinct !{!6778, !6773, !6779}
!6779 = !DILocation(line: 3846, column: 12, scope: !6735)
!6780 = !DILocation(line: 3848, column: 32, scope: !6781)
!6781 = distinct !DILexicalBlock(scope: !6735, file: !3, line: 3847, column: 8)
!6782 = !DILocation(line: 3848, column: 30, scope: !6781)
!6783 = !DILocation(line: 3848, column: 6, scope: !6781)
!6784 = !DILocation(line: 3849, column: 4, scope: !6735)
!6785 = !DILocation(line: 3849, column: 26, scope: !6735)
!6786 = !DILocation(line: 3850, column: 2, scope: !6735)
!6787 = !DILocation(line: 3855, column: 11, scope: !6741)
!6788 = !DILocation(line: 3855, column: 25, scope: !6741)
!6789 = !DILocation(line: 3855, column: 11, scope: !6732)
!6790 = !DILocation(line: 3857, column: 8, scope: !6739)
!6791 = !DILocation(line: 3857, column: 40, scope: !6739)
!6792 = !DILocation(line: 3857, column: 8, scope: !6740)
!6793 = !DILocation(line: 3858, column: 40, scope: !6739)
!6794 = !DILocation(line: 3858, column: 38, scope: !6739)
!6795 = !DILocation(line: 3858, column: 6, scope: !6739)
!6796 = !DILocation(line: 3862, column: 8, scope: !6738)
!6797 = !DILocation(line: 0, scope: !6738)
!6798 = !DILocation(line: 3862, column: 19, scope: !6738)
!6799 = !DILocation(line: 3862, column: 22, scope: !6738)
!6800 = !DILocation(line: 3862, column: 45, scope: !6738)
!6801 = distinct !{!6801, !6796, !6802}
!6802 = !DILocation(line: 3863, column: 9, scope: !6738)
!6803 = !DILocation(line: 3865, column: 28, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !6738, file: !3, line: 3864, column: 12)
!6805 = !DILocation(line: 3865, column: 26, scope: !6804)
!6806 = !DILocation(line: 3865, column: 3, scope: !6804)
!6807 = !DILocation(line: 3867, column: 4, scope: !6740)
!6808 = !DILocation(line: 3867, column: 25, scope: !6740)
!6809 = !DILocation(line: 3868, column: 2, scope: !6740)
!6810 = !DILocation(line: 3869, column: 30, scope: !6746)
!6811 = !DILocation(line: 3869, column: 16, scope: !6741)
!6812 = !DILocation(line: 3871, column: 8, scope: !6744)
!6813 = !DILocation(line: 3871, column: 42, scope: !6744)
!6814 = !DILocation(line: 3871, column: 8, scope: !6745)
!6815 = !DILocation(line: 3872, column: 42, scope: !6744)
!6816 = !DILocation(line: 3872, column: 40, scope: !6744)
!6817 = !DILocation(line: 3872, column: 6, scope: !6744)
!6818 = !DILocation(line: 3876, column: 8, scope: !6743)
!6819 = !DILocation(line: 0, scope: !6743)
!6820 = !DILocation(line: 3876, column: 19, scope: !6743)
!6821 = !DILocation(line: 3876, column: 22, scope: !6743)
!6822 = !DILocation(line: 3876, column: 45, scope: !6743)
!6823 = distinct !{!6823, !6818, !6824}
!6824 = !DILocation(line: 3877, column: 9, scope: !6743)
!6825 = !DILocation(line: 3879, column: 28, scope: !6826)
!6826 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 3878, column: 12)
!6827 = !DILocation(line: 3879, column: 26, scope: !6826)
!6828 = !DILocation(line: 3879, column: 3, scope: !6826)
!6829 = !DILocation(line: 3881, column: 4, scope: !6745)
!6830 = !DILocation(line: 3881, column: 25, scope: !6745)
!6831 = !DILocation(line: 3882, column: 2, scope: !6745)
!6832 = !DILocation(line: 3887, column: 11, scope: !6733)
!6833 = !DILocation(line: 3889, column: 3, scope: !6727)
!6834 = distinct !DISubprogram(name: "gimple_type_hash", scope: !3, file: !3, line: 3769, type: !742, scopeLine: 3770, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6835)
!6835 = !{!6836, !6837, !6838, !6839, !6840, !6841, !6842}
!6836 = !DILocalVariable(name: "p", arg: 1, scope: !6834, file: !3, line: 3769, type: !745)
!6837 = !DILocalVariable(name: "t", scope: !6834, file: !3, line: 3771, type: !1563)
!6838 = !DILocalVariable(name: "sccstack", scope: !6834, file: !3, line: 3772, type: !1558)
!6839 = !DILocalVariable(name: "sccstate", scope: !6834, file: !3, line: 3773, type: !883)
!6840 = !DILocalVariable(name: "sccstate_obstack", scope: !6834, file: !3, line: 3774, type: !850)
!6841 = !DILocalVariable(name: "val", scope: !6834, file: !3, line: 3775, type: !744)
!6842 = !DILocalVariable(name: "slot", scope: !6834, file: !3, line: 3776, type: !758)
!6843 = !DILocation(line: 0, scope: !6834)
!6844 = !DILocation(line: 3771, column: 18, scope: !6834)
!6845 = !DILocation(line: 3772, column: 3, scope: !6834)
!6846 = !DILocation(line: 3772, column: 20, scope: !6834)
!6847 = !DILocation(line: 3774, column: 3, scope: !6834)
!6848 = !DILocation(line: 3778, column: 7, scope: !6849)
!6849 = distinct !DILexicalBlock(scope: !6834, file: !3, line: 3778, column: 7)
!6850 = !DILocation(line: 3778, column: 23, scope: !6849)
!6851 = !DILocation(line: 3778, column: 7, scope: !6834)
!6852 = !DILocation(line: 3779, column: 23, scope: !6849)
!6853 = !DILocation(line: 3779, column: 21, scope: !6849)
!6854 = !DILocation(line: 3779, column: 5, scope: !6849)
!6855 = !DILocation(line: 3781, column: 37, scope: !6856)
!6856 = distinct !DILexicalBlock(scope: !6834, file: !3, line: 3781, column: 7)
!6857 = !DILocation(line: 3781, column: 15, scope: !6856)
!6858 = !DILocation(line: 3781, column: 58, scope: !6856)
!6859 = !DILocation(line: 3781, column: 7, scope: !6834)
!6860 = !DILocation(line: 3782, column: 59, scope: !6856)
!6861 = !DILocation(line: 3782, column: 38, scope: !6856)
!6862 = !DILocation(line: 3782, column: 12, scope: !6856)
!6863 = !DILocation(line: 3782, column: 5, scope: !6856)
!6864 = !DILocation(line: 3785, column: 16, scope: !6834)
!6865 = !DILocation(line: 3786, column: 14, scope: !6834)
!6866 = !DILocation(line: 3787, column: 3, scope: !6834)
!6867 = !DILocation(line: 3788, column: 9, scope: !6834)
!6868 = !DILocation(line: 3790, column: 3, scope: !6834)
!6869 = !DILocation(line: 3791, column: 3, scope: !6834)
!6870 = !DILocation(line: 3792, column: 3, scope: !6834)
!6871 = !DILocation(line: 3795, column: 1, scope: !6834)
!6872 = distinct !DISubprogram(name: "gimple_type_eq", scope: !3, file: !3, line: 3801, type: !750, scopeLine: 3802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6873)
!6873 = !{!6874, !6875, !6876, !6877}
!6874 = !DILocalVariable(name: "p1", arg: 1, scope: !6872, file: !3, line: 3801, type: !745)
!6875 = !DILocalVariable(name: "p2", arg: 2, scope: !6872, file: !3, line: 3801, type: !745)
!6876 = !DILocalVariable(name: "t1", scope: !6872, file: !3, line: 3803, type: !1563)
!6877 = !DILocalVariable(name: "t2", scope: !6872, file: !3, line: 3804, type: !1563)
!6878 = !DILocation(line: 0, scope: !6872)
!6879 = !DILocation(line: 3803, column: 19, scope: !6872)
!6880 = !DILocation(line: 3804, column: 19, scope: !6872)
!6881 = !DILocation(line: 3805, column: 10, scope: !6872)
!6882 = !DILocation(line: 3805, column: 3, scope: !6872)
!6883 = distinct !DISubprogram(name: "print_gimple_types_stats", scope: !3, file: !3, line: 3896, type: !6082, scopeLine: 3897, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1683)
!6884 = !DILocation(line: 3898, column: 7, scope: !6885)
!6885 = distinct !DILexicalBlock(scope: !6883, file: !3, line: 3898, column: 7)
!6886 = !DILocation(line: 0, scope: !6885)
!6887 = !DILocation(line: 3898, column: 7, scope: !6883)
!6888 = !DILocation(line: 3901, column: 14, scope: !6885)
!6889 = !DILocation(line: 3902, column: 29, scope: !6885)
!6890 = !DILocation(line: 3902, column: 14, scope: !6885)
!6891 = !DILocation(line: 3903, column: 14, scope: !6885)
!6892 = !DILocation(line: 3903, column: 28, scope: !6885)
!6893 = !DILocation(line: 3903, column: 7, scope: !6885)
!6894 = !DILocation(line: 3904, column: 28, scope: !6885)
!6895 = !DILocation(line: 3904, column: 7, scope: !6885)
!6896 = !DILocation(line: 3905, column: 7, scope: !6885)
!6897 = !DILocation(line: 3899, column: 5, scope: !6885)
!6898 = !DILocation(line: 3907, column: 5, scope: !6885)
!6899 = !DILocation(line: 3908, column: 7, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6883, file: !3, line: 3908, column: 7)
!6901 = !DILocation(line: 0, scope: !6900)
!6902 = !DILocation(line: 3908, column: 7, scope: !6883)
!6903 = !DILocation(line: 3911, column: 14, scope: !6900)
!6904 = !DILocation(line: 3912, column: 29, scope: !6900)
!6905 = !DILocation(line: 3912, column: 14, scope: !6900)
!6906 = !DILocation(line: 3913, column: 14, scope: !6900)
!6907 = !DILocation(line: 3913, column: 27, scope: !6900)
!6908 = !DILocation(line: 3913, column: 7, scope: !6900)
!6909 = !DILocation(line: 3914, column: 27, scope: !6900)
!6910 = !DILocation(line: 3914, column: 7, scope: !6900)
!6911 = !DILocation(line: 3915, column: 7, scope: !6900)
!6912 = !DILocation(line: 3909, column: 5, scope: !6900)
!6913 = !DILocation(line: 3917, column: 5, scope: !6900)
!6914 = !DILocation(line: 3918, column: 1, scope: !6883)
!6915 = distinct !DISubprogram(name: "free_gimple_type_tables", scope: !3, file: !3, line: 3923, type: !6082, scopeLine: 3924, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !1683)
!6916 = !DILocation(line: 3926, column: 7, scope: !6917)
!6917 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 3926, column: 7)
!6918 = !DILocation(line: 3926, column: 7, scope: !6915)
!6919 = !DILocation(line: 3927, column: 5, scope: !6917)
!6920 = !DILocation(line: 3929, column: 7, scope: !6921)
!6921 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 3929, column: 7)
!6922 = !DILocation(line: 3929, column: 7, scope: !6915)
!6923 = !DILocation(line: 3931, column: 7, scope: !6924)
!6924 = distinct !DILexicalBlock(scope: !6921, file: !3, line: 3930, column: 5)
!6925 = !DILocation(line: 3932, column: 20, scope: !6924)
!6926 = !DILocation(line: 3933, column: 5, scope: !6924)
!6927 = !DILocation(line: 3934, column: 7, scope: !6928)
!6928 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 3934, column: 7)
!6929 = !DILocation(line: 3934, column: 7, scope: !6915)
!6930 = !DILocation(line: 3936, column: 7, scope: !6931)
!6931 = distinct !DILexicalBlock(scope: !6928, file: !3, line: 3935, column: 5)
!6932 = !DILocation(line: 3937, column: 23, scope: !6931)
!6933 = !DILocation(line: 3938, column: 5, scope: !6931)
!6934 = !DILocation(line: 3939, column: 7, scope: !6935)
!6935 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 3939, column: 7)
!6936 = !DILocation(line: 3939, column: 7, scope: !6915)
!6937 = !DILocation(line: 3941, column: 7, scope: !6938)
!6938 = distinct !DILexicalBlock(scope: !6935, file: !3, line: 3940, column: 5)
!6939 = !DILocation(line: 3942, column: 7, scope: !6938)
!6940 = !DILocation(line: 3943, column: 19, scope: !6938)
!6941 = !DILocation(line: 3944, column: 5, scope: !6938)
!6942 = !DILocation(line: 3945, column: 1, scope: !6915)
!6943 = distinct !DISubprogram(name: "gimple_unsigned_type", scope: !3, file: !3, line: 4111, type: !6385, scopeLine: 4112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6944)
!6944 = !{!6945}
!6945 = !DILocalVariable(name: "type", arg: 1, scope: !6943, file: !3, line: 4111, type: !450)
!6946 = !DILocation(line: 0, scope: !6943)
!6947 = !DILocation(line: 4113, column: 10, scope: !6943)
!6948 = !DILocation(line: 4113, column: 3, scope: !6943)
!6949 = distinct !DISubprogram(name: "gimple_signed_or_unsigned_type", scope: !3, file: !3, line: 3952, type: !6950, scopeLine: 3953, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6952)
!6950 = !DISubroutineType(types: !6951)
!6951 = !{!450, !371, !450}
!6952 = !{!6953, !6954, !6955}
!6953 = !DILocalVariable(name: "unsignedp", arg: 1, scope: !6949, file: !3, line: 3952, type: !371)
!6954 = !DILocalVariable(name: "type", arg: 2, scope: !6949, file: !3, line: 3952, type: !450)
!6955 = !DILocalVariable(name: "type1", scope: !6949, file: !3, line: 3954, type: !450)
!6956 = !DILocation(line: 0, scope: !6949)
!6957 = !DILocation(line: 3956, column: 11, scope: !6949)
!6958 = !DILocation(line: 3957, column: 16, scope: !6959)
!6959 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3957, column: 7)
!6960 = !DILocation(line: 3957, column: 13, scope: !6959)
!6961 = !DILocation(line: 3958, column: 19, scope: !6959)
!6962 = !DILocation(line: 3958, column: 16, scope: !6959)
!6963 = !DILocation(line: 3958, column: 7, scope: !6959)
!6964 = !DILocation(line: 3959, column: 19, scope: !6959)
!6965 = !DILocation(line: 3959, column: 16, scope: !6959)
!6966 = !DILocation(line: 3960, column: 12, scope: !6959)
!6967 = !DILocation(line: 3961, column: 16, scope: !6968)
!6968 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3961, column: 7)
!6969 = !DILocation(line: 3961, column: 13, scope: !6968)
!6970 = !DILocation(line: 3961, column: 46, scope: !6968)
!6971 = !DILocation(line: 3961, column: 43, scope: !6968)
!6972 = !DILocation(line: 3961, column: 34, scope: !6968)
!6973 = !DILocation(line: 3962, column: 12, scope: !6968)
!6974 = !DILocation(line: 3963, column: 16, scope: !6975)
!6975 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3963, column: 7)
!6976 = !DILocation(line: 3963, column: 13, scope: !6975)
!6977 = !DILocation(line: 3963, column: 52, scope: !6975)
!6978 = !DILocation(line: 3963, column: 49, scope: !6975)
!6979 = !DILocation(line: 3963, column: 40, scope: !6975)
!6980 = !DILocation(line: 3964, column: 12, scope: !6975)
!6981 = !DILocation(line: 3965, column: 16, scope: !6982)
!6982 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3965, column: 7)
!6983 = !DILocation(line: 3965, column: 13, scope: !6982)
!6984 = !DILocation(line: 3965, column: 51, scope: !6982)
!6985 = !DILocation(line: 3965, column: 48, scope: !6982)
!6986 = !DILocation(line: 3965, column: 39, scope: !6982)
!6987 = !DILocation(line: 3966, column: 12, scope: !6982)
!6988 = !DILocation(line: 3967, column: 16, scope: !6989)
!6989 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3967, column: 7)
!6990 = !DILocation(line: 3967, column: 13, scope: !6989)
!6991 = !DILocation(line: 3968, column: 19, scope: !6989)
!6992 = !DILocation(line: 3968, column: 16, scope: !6989)
!6993 = !DILocation(line: 3968, column: 7, scope: !6989)
!6994 = !DILocation(line: 3969, column: 12, scope: !6989)
!6995 = !DILocation(line: 3973, column: 16, scope: !6996)
!6996 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3973, column: 7)
!6997 = !DILocation(line: 3973, column: 13, scope: !6996)
!6998 = !DILocation(line: 3973, column: 44, scope: !6996)
!6999 = !DILocation(line: 3973, column: 41, scope: !6996)
!7000 = !DILocation(line: 3973, column: 32, scope: !6996)
!7001 = !DILocation(line: 3974, column: 12, scope: !6996)
!7002 = !DILocation(line: 3976, column: 16, scope: !7003)
!7003 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3976, column: 7)
!7004 = !DILocation(line: 3976, column: 13, scope: !7003)
!7005 = !DILocation(line: 3976, column: 44, scope: !7003)
!7006 = !DILocation(line: 3976, column: 41, scope: !7003)
!7007 = !DILocation(line: 3976, column: 32, scope: !7003)
!7008 = !DILocation(line: 3977, column: 12, scope: !7003)
!7009 = !DILocation(line: 3978, column: 16, scope: !7010)
!7010 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3978, column: 7)
!7011 = !DILocation(line: 3978, column: 13, scope: !7010)
!7012 = !DILocation(line: 3978, column: 44, scope: !7010)
!7013 = !DILocation(line: 3978, column: 41, scope: !7010)
!7014 = !DILocation(line: 3978, column: 32, scope: !7010)
!7015 = !DILocation(line: 3979, column: 12, scope: !7010)
!7016 = !DILocation(line: 3980, column: 16, scope: !7017)
!7017 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3980, column: 7)
!7018 = !DILocation(line: 3980, column: 13, scope: !7017)
!7019 = !DILocation(line: 3980, column: 44, scope: !7017)
!7020 = !DILocation(line: 3980, column: 41, scope: !7017)
!7021 = !DILocation(line: 3980, column: 32, scope: !7017)
!7022 = !DILocation(line: 3981, column: 12, scope: !7017)
!7023 = !DILocation(line: 3982, column: 16, scope: !7024)
!7024 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 3982, column: 7)
!7025 = !DILocation(line: 3982, column: 13, scope: !7024)
!7026 = !DILocation(line: 3982, column: 44, scope: !7024)
!7027 = !DILocation(line: 3982, column: 41, scope: !7024)
!7028 = !DILocation(line: 3982, column: 32, scope: !7024)
!7029 = !DILocation(line: 3983, column: 12, scope: !7024)
!7030 = !DILocation(line: 4033, column: 3, scope: !7031)
!7031 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4033, column: 3)
!7032 = !DILocation(line: 4033, column: 3, scope: !7033)
!7033 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4033, column: 3)
!7034 = !DILocation(line: 4033, column: 3, scope: !7035)
!7035 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4033, column: 3)
!7036 = !DILocation(line: 4033, column: 3, scope: !7037)
!7037 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4033, column: 3)
!7038 = !DILocation(line: 4034, column: 3, scope: !7039)
!7039 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4034, column: 3)
!7040 = !DILocation(line: 4034, column: 3, scope: !7041)
!7041 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4034, column: 3)
!7042 = !DILocation(line: 4034, column: 3, scope: !7043)
!7043 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4034, column: 3)
!7044 = !DILocation(line: 4034, column: 3, scope: !7045)
!7045 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4034, column: 3)
!7046 = !DILocation(line: 4035, column: 3, scope: !7047)
!7047 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4035, column: 3)
!7048 = !DILocation(line: 4035, column: 3, scope: !7049)
!7049 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4035, column: 3)
!7050 = !DILocation(line: 4035, column: 3, scope: !7051)
!7051 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4035, column: 3)
!7052 = !DILocation(line: 4035, column: 3, scope: !7053)
!7053 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4035, column: 3)
!7054 = !DILocation(line: 4036, column: 3, scope: !7055)
!7055 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4036, column: 3)
!7056 = !DILocation(line: 4036, column: 3, scope: !7057)
!7057 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4036, column: 3)
!7058 = !DILocation(line: 4036, column: 3, scope: !7059)
!7059 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4036, column: 3)
!7060 = !DILocation(line: 4036, column: 3, scope: !7061)
!7061 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4036, column: 3)
!7062 = !DILocation(line: 4038, column: 3, scope: !7063)
!7063 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4038, column: 3)
!7064 = !DILocation(line: 4039, column: 3, scope: !7065)
!7065 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4039, column: 3)
!7066 = !DILocation(line: 4040, column: 3, scope: !7067)
!7067 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4040, column: 3)
!7068 = !DILocation(line: 4041, column: 3, scope: !7069)
!7069 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4041, column: 3)
!7070 = !DILocation(line: 4042, column: 3, scope: !7071)
!7071 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4042, column: 3)
!7072 = !DILocation(line: 4043, column: 3, scope: !7073)
!7073 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4043, column: 3)
!7074 = !DILocation(line: 4044, column: 3, scope: !7075)
!7075 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4044, column: 3)
!7076 = !DILocation(line: 4045, column: 3, scope: !7077)
!7077 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4045, column: 3)
!7078 = !DILocation(line: 4046, column: 3, scope: !7079)
!7079 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4046, column: 3)
!7080 = !DILocation(line: 4047, column: 3, scope: !7081)
!7081 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4047, column: 3)
!7082 = !DILocation(line: 4048, column: 3, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4048, column: 3)
!7084 = !DILocation(line: 4049, column: 3, scope: !7085)
!7085 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4049, column: 3)
!7086 = !DILocation(line: 4050, column: 3, scope: !7087)
!7087 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4050, column: 3)
!7088 = !DILocation(line: 4051, column: 3, scope: !7089)
!7089 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4051, column: 3)
!7090 = !DILocation(line: 4052, column: 3, scope: !7091)
!7091 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4052, column: 3)
!7092 = !DILocation(line: 4053, column: 3, scope: !7093)
!7093 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4053, column: 3)
!7094 = !DILocation(line: 4054, column: 3, scope: !7095)
!7095 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4054, column: 3)
!7096 = !DILocation(line: 4055, column: 3, scope: !7097)
!7097 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4055, column: 3)
!7098 = !DILocation(line: 4065, column: 8, scope: !7099)
!7099 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4065, column: 7)
!7100 = !DILocation(line: 4066, column: 7, scope: !7099)
!7101 = !DILocation(line: 4066, column: 10, scope: !7099)
!7102 = !DILocation(line: 4066, column: 34, scope: !7099)
!7103 = !DILocation(line: 4066, column: 31, scope: !7099)
!7104 = !DILocation(line: 4065, column: 7, scope: !6949)
!7105 = !DILocation(line: 4072, column: 7, scope: !7106)
!7106 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4072, column: 7)
!7107 = !DILocation(line: 4072, column: 7, scope: !6949)
!7108 = !DILocation(line: 4073, column: 12, scope: !7106)
!7109 = !DILocation(line: 4074, column: 7, scope: !7110)
!7110 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4074, column: 7)
!7111 = !DILocation(line: 4074, column: 7, scope: !6949)
!7112 = !DILocation(line: 4075, column: 12, scope: !7110)
!7113 = !DILocation(line: 4076, column: 7, scope: !7114)
!7114 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4076, column: 7)
!7115 = !DILocation(line: 4076, column: 7, scope: !6949)
!7116 = !DILocation(line: 4077, column: 12, scope: !7114)
!7117 = !DILocation(line: 4078, column: 7, scope: !7118)
!7118 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4078, column: 7)
!7119 = !DILocation(line: 4078, column: 7, scope: !6949)
!7120 = !DILocation(line: 4079, column: 12, scope: !7118)
!7121 = !DILocation(line: 4080, column: 7, scope: !7122)
!7122 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4080, column: 7)
!7123 = !DILocation(line: 4080, column: 7, scope: !6949)
!7124 = !DILocation(line: 4081, column: 13, scope: !7122)
!7125 = !DILocation(line: 4086, column: 7, scope: !7126)
!7126 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4086, column: 7)
!7127 = !DILocation(line: 4086, column: 7, scope: !6949)
!7128 = !DILocation(line: 4087, column: 12, scope: !7126)
!7129 = !DILocation(line: 4089, column: 7, scope: !7130)
!7130 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4089, column: 7)
!7131 = !DILocation(line: 4089, column: 7, scope: !6949)
!7132 = !DILocation(line: 4090, column: 12, scope: !7130)
!7133 = !DILocation(line: 4091, column: 7, scope: !7134)
!7134 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4091, column: 7)
!7135 = !DILocation(line: 4091, column: 7, scope: !6949)
!7136 = !DILocation(line: 4092, column: 12, scope: !7134)
!7137 = !DILocation(line: 4093, column: 7, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4093, column: 7)
!7139 = !DILocation(line: 4093, column: 7, scope: !6949)
!7140 = !DILocation(line: 4094, column: 12, scope: !7138)
!7141 = !DILocation(line: 4095, column: 7, scope: !7142)
!7142 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 4095, column: 7)
!7143 = !DILocation(line: 4104, column: 42, scope: !6949)
!7144 = !DILocation(line: 4095, column: 7, scope: !6949)
!7145 = !DILocation(line: 4096, column: 12, scope: !7142)
!7146 = !DILocation(line: 4104, column: 10, scope: !6949)
!7147 = !DILocation(line: 4104, column: 3, scope: !6949)
!7148 = !DILocation(line: 4105, column: 1, scope: !6949)
!7149 = distinct !DISubprogram(name: "gimple_signed_type", scope: !3, file: !3, line: 4120, type: !6385, scopeLine: 4121, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7150)
!7150 = !{!7151}
!7151 = !DILocalVariable(name: "type", arg: 1, scope: !7149, file: !3, line: 4120, type: !450)
!7152 = !DILocation(line: 0, scope: !7149)
!7153 = !DILocation(line: 4122, column: 10, scope: !7149)
!7154 = !DILocation(line: 4122, column: 3, scope: !7149)
!7155 = distinct !DISubprogram(name: "gimple_get_alias_set", scope: !3, file: !3, line: 4130, type: !7156, scopeLine: 4131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7158)
!7156 = !DISubroutineType(types: !7157)
!7157 = !{!1032, !450}
!7158 = !{!7159, !7160, !7161}
!7159 = !DILocalVariable(name: "t", arg: 1, scope: !7155, file: !3, line: 4130, type: !450)
!7160 = !DILocalVariable(name: "u", scope: !7155, file: !3, line: 4132, type: !450)
!7161 = !DILocalVariable(name: "t1", scope: !7162, file: !3, line: 4163, type: !450)
!7162 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 4162, column: 5)
!7163 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 4161, column: 7)
!7164 = !DILocation(line: 0, scope: !7155)
!7165 = !DILocation(line: 4140, column: 8, scope: !7166)
!7166 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 4140, column: 3)
!7167 = !DILocation(line: 0, scope: !7166)
!7168 = !DILocation(line: 4141, column: 8, scope: !7169)
!7169 = distinct !DILexicalBlock(scope: !7166, file: !3, line: 4140, column: 3)
!7170 = !DILocation(line: 4141, column: 22, scope: !7169)
!7171 = !DILocation(line: 4141, column: 39, scope: !7169)
!7172 = !DILocation(line: 4141, column: 56, scope: !7169)
!7173 = !DILocation(line: 4140, column: 3, scope: !7166)
!7174 = !DILocation(line: 4144, column: 2, scope: !7175)
!7175 = distinct !DILexicalBlock(scope: !7169, file: !3, line: 4143, column: 9)
!7176 = !DILocation(line: 0, scope: !7169)
!7177 = !DILocation(line: 4142, column: 12, scope: !7169)
!7178 = !DILocation(line: 4144, column: 5, scope: !7175)
!7179 = !DILocation(line: 4144, column: 49, scope: !7175)
!7180 = !DILocation(line: 4143, column: 9, scope: !7169)
!7181 = !DILocation(line: 4140, column: 3, scope: !7169)
!7182 = distinct !{!7182, !7173, !7183}
!7183 = !DILocation(line: 4145, column: 14, scope: !7166)
!7184 = !DILocation(line: 4148, column: 8, scope: !7185)
!7185 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 4148, column: 7)
!7186 = !DILocation(line: 4148, column: 7, scope: !7155)
!7187 = !DILocation(line: 4154, column: 12, scope: !7188)
!7188 = distinct !DILexicalBlock(scope: !7155, file: !3, line: 4154, column: 7)
!7189 = !DILocation(line: 4154, column: 9, scope: !7188)
!7190 = !DILocation(line: 4155, column: 15, scope: !7188)
!7191 = !DILocation(line: 4155, column: 12, scope: !7188)
!7192 = !DILocation(line: 4155, column: 7, scope: !7188)
!7193 = !DILocation(line: 4156, column: 15, scope: !7188)
!7194 = !DILocation(line: 4156, column: 12, scope: !7188)
!7195 = !DILocation(line: 4161, column: 21, scope: !7163)
!7196 = !DILocation(line: 4161, column: 37, scope: !7163)
!7197 = !DILocation(line: 4161, column: 40, scope: !7163)
!7198 = !DILocation(line: 4161, column: 7, scope: !7155)
!7199 = !DILocation(line: 4163, column: 17, scope: !7162)
!7200 = !DILocation(line: 0, scope: !7162)
!7201 = !DILocation(line: 4166, column: 14, scope: !7202)
!7202 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 4166, column: 11)
!7203 = !DILocation(line: 4166, column: 11, scope: !7162)
!7204 = !DILocation(line: 4167, column: 9, scope: !7202)
!7205 = !DILocation(line: 4167, column: 2, scope: !7202)
!7206 = !DILocation(line: 4169, column: 12, scope: !7207)
!7207 = distinct !DILexicalBlock(scope: !7163, file: !3, line: 4169, column: 12)
!7208 = !DILocation(line: 4169, column: 12, scope: !7163)
!7209 = !DILocation(line: 4223, column: 16, scope: !7210)
!7210 = distinct !DILexicalBlock(scope: !7211, file: !3, line: 4223, column: 11)
!7211 = distinct !DILexicalBlock(scope: !7207, file: !3, line: 4170, column: 5)
!7212 = !DILocation(line: 4223, column: 13, scope: !7210)
!7213 = !DILocation(line: 4223, column: 11, scope: !7211)
!7214 = !DILocation(line: 4224, column: 9, scope: !7210)
!7215 = !DILocation(line: 4224, column: 2, scope: !7210)
!7216 = !DILocation(line: 4227, column: 3, scope: !7155)
!7217 = !DILocation(line: 4228, column: 1, scope: !7155)
!7218 = distinct !DISubprogram(name: "count_uses_and_derefs", scope: !3, file: !3, line: 4276, type: !7219, scopeLine: 4278, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7222)
!7219 = !DISubroutineType(types: !7220)
!7220 = !{null, !450, !379, !7221, !7221, !7221}
!7221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7222 = !{!7223, !7224, !7225, !7226, !7227, !7228, !7241, !7242, !7245}
!7223 = !DILocalVariable(name: "ptr", arg: 1, scope: !7218, file: !3, line: 4276, type: !450)
!7224 = !DILocalVariable(name: "stmt", arg: 2, scope: !7218, file: !3, line: 4276, type: !379)
!7225 = !DILocalVariable(name: "num_uses_p", arg: 3, scope: !7218, file: !3, line: 4276, type: !7221)
!7226 = !DILocalVariable(name: "num_loads_p", arg: 4, scope: !7218, file: !3, line: 4277, type: !7221)
!7227 = !DILocalVariable(name: "num_stores_p", arg: 5, scope: !7218, file: !3, line: 4277, type: !7221)
!7228 = !DILocalVariable(name: "i", scope: !7218, file: !3, line: 4279, type: !7229)
!7229 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !363, line: 140, baseType: !7230)
!7230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !363, line: 131, size: 320, elements: !7231)
!7231 = !{!7232, !7233, !7234, !7236, !7238, !7239, !7240}
!7232 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !7230, file: !363, line: 133, baseType: !371, size: 8)
!7233 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !7230, file: !363, line: 134, baseType: !362, size: 32, offset: 32)
!7234 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !7230, file: !363, line: 135, baseType: !7235, size: 64, offset: 64)
!7235 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !363, line: 42, baseType: !903)
!7236 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !7230, file: !363, line: 136, baseType: !7237, size: 64, offset: 128)
!7237 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !363, line: 50, baseType: !910)
!7238 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !7230, file: !363, line: 137, baseType: !372, size: 32, offset: 192)
!7239 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !7230, file: !363, line: 138, baseType: !372, size: 32, offset: 224)
!7240 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !7230, file: !363, line: 139, baseType: !379, size: 64, offset: 256)
!7241 = !DILocalVariable(name: "use", scope: !7218, file: !3, line: 4280, type: !450)
!7242 = !DILocalVariable(name: "wi", scope: !7243, file: !3, line: 4303, type: !1585)
!7243 = distinct !DILexicalBlock(scope: !7244, file: !3, line: 4302, column: 5)
!7244 = distinct !DILexicalBlock(scope: !7218, file: !3, line: 4298, column: 7)
!7245 = !DILocalVariable(name: "count", scope: !7243, file: !3, line: 4304, type: !1604)
!7246 = !DILocation(line: 0, scope: !7218)
!7247 = !DILocation(line: 4279, column: 3, scope: !7218)
!7248 = !DILocation(line: 4282, column: 15, scope: !7218)
!7249 = !DILocation(line: 4283, column: 16, scope: !7218)
!7250 = !DILocation(line: 4284, column: 17, scope: !7218)
!7251 = !DILocation(line: 4287, column: 3, scope: !7252)
!7252 = distinct !DILexicalBlock(scope: !7218, file: !3, line: 4287, column: 3)
!7253 = !DILocation(line: 0, scope: !7252)
!7254 = !DILocation(line: 4287, column: 3, scope: !7255)
!7255 = distinct !DILexicalBlock(scope: !7252, file: !3, line: 4287, column: 3)
!7256 = !DILocation(line: 4288, column: 13, scope: !7257)
!7257 = distinct !DILexicalBlock(scope: !7255, file: !3, line: 4288, column: 9)
!7258 = !DILocation(line: 4288, column: 9, scope: !7255)
!7259 = !DILocation(line: 4289, column: 20, scope: !7257)
!7260 = !DILocation(line: 4289, column: 7, scope: !7257)
!7261 = distinct !{!7261, !7251, !7262}
!7262 = !DILocation(line: 4289, column: 20, scope: !7252)
!7263 = !DILocation(line: 4298, column: 7, scope: !7244)
!7264 = !DILocation(line: 4299, column: 7, scope: !7244)
!7265 = !DILocation(line: 4299, column: 10, scope: !7244)
!7266 = !DILocation(line: 4299, column: 29, scope: !7244)
!7267 = !DILocation(line: 4300, column: 7, scope: !7244)
!7268 = !DILocation(line: 4300, column: 10, scope: !7244)
!7269 = !DILocation(line: 4300, column: 29, scope: !7244)
!7270 = !DILocation(line: 4301, column: 7, scope: !7244)
!7271 = !DILocation(line: 4301, column: 10, scope: !7244)
!7272 = !DILocation(line: 4298, column: 7, scope: !7218)
!7273 = !DILocation(line: 4318, column: 3, scope: !7218)
!7274 = !DILocation(line: 4303, column: 7, scope: !7243)
!7275 = !DILocation(line: 4304, column: 7, scope: !7243)
!7276 = !DILocation(line: 4306, column: 13, scope: !7243)
!7277 = !DILocation(line: 4306, column: 17, scope: !7243)
!7278 = !DILocation(line: 4307, column: 13, scope: !7243)
!7279 = !DILocation(line: 4307, column: 24, scope: !7243)
!7280 = !DILocation(line: 4308, column: 13, scope: !7243)
!7281 = !DILocation(line: 4308, column: 23, scope: !7243)
!7282 = !DILocation(line: 4310, column: 7, scope: !7243)
!7283 = !DILocation(line: 4311, column: 10, scope: !7243)
!7284 = !DILocation(line: 4311, column: 15, scope: !7243)
!7285 = !DILocation(line: 0, scope: !7243)
!7286 = !DILocation(line: 4312, column: 7, scope: !7243)
!7287 = !DILocation(line: 4314, column: 29, scope: !7243)
!7288 = !DILocation(line: 4314, column: 21, scope: !7243)
!7289 = !DILocation(line: 4315, column: 28, scope: !7243)
!7290 = !DILocation(line: 4315, column: 20, scope: !7243)
!7291 = !DILocation(line: 4316, column: 5, scope: !7244)
!7292 = !DILocation(line: 4316, column: 5, scope: !7243)
!7293 = !DILocation(line: 4319, column: 1, scope: !7218)
!7294 = distinct !DISubprogram(name: "op_iter_init_tree", scope: !7295, file: !7295, line: 792, type: !7296, scopeLine: 793, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7299)
!7295 = !DIFile(filename: "./tree-flow-inline.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!7296 = !DISubroutineType(types: !7297)
!7297 = !{!450, !7298, !379, !372}
!7298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7229, size: 64)
!7299 = !{!7300, !7301, !7302}
!7300 = !DILocalVariable(name: "ptr", arg: 1, scope: !7294, file: !7295, line: 792, type: !7298)
!7301 = !DILocalVariable(name: "stmt", arg: 2, scope: !7294, file: !7295, line: 792, type: !379)
!7302 = !DILocalVariable(name: "flags", arg: 3, scope: !7294, file: !7295, line: 792, type: !372)
!7303 = !DILocation(line: 0, scope: !7294)
!7304 = !DILocation(line: 794, column: 3, scope: !7294)
!7305 = !DILocation(line: 795, column: 8, scope: !7294)
!7306 = !DILocation(line: 795, column: 18, scope: !7294)
!7307 = !DILocation(line: 796, column: 10, scope: !7294)
!7308 = !DILocation(line: 796, column: 3, scope: !7294)
!7309 = distinct !DISubprogram(name: "op_iter_done", scope: !7295, file: !7295, line: 652, type: !7310, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7314)
!7310 = !DISubroutineType(types: !7311)
!7311 = !{!371, !7312}
!7312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7313, size: 64)
!7313 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7229)
!7314 = !{!7315}
!7315 = !DILocalVariable(name: "ptr", arg: 1, scope: !7309, file: !7295, line: 652, type: !7312)
!7316 = !DILocation(line: 0, scope: !7309)
!7317 = !DILocation(line: 654, column: 15, scope: !7309)
!7318 = !DILocation(line: 654, column: 3, scope: !7309)
!7319 = distinct !DISubprogram(name: "op_iter_next_tree", scope: !7295, file: !7295, line: 699, type: !7320, scopeLine: 700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7322)
!7320 = !DISubroutineType(types: !7321)
!7321 = !{!450, !7298}
!7322 = !{!7323, !7324}
!7323 = !DILocalVariable(name: "ptr", arg: 1, scope: !7319, file: !7295, line: 699, type: !7298)
!7324 = !DILocalVariable(name: "val", scope: !7319, file: !7295, line: 701, type: !450)
!7325 = !DILocation(line: 0, scope: !7319)
!7326 = !DILocation(line: 705, column: 12, scope: !7327)
!7327 = distinct !DILexicalBlock(scope: !7319, file: !7295, line: 705, column: 7)
!7328 = !DILocation(line: 705, column: 7, scope: !7327)
!7329 = !DILocation(line: 705, column: 7, scope: !7319)
!7330 = !DILocation(line: 707, column: 13, scope: !7331)
!7331 = distinct !DILexicalBlock(scope: !7327, file: !7295, line: 706, column: 5)
!7332 = !DILocation(line: 708, column: 24, scope: !7331)
!7333 = !DILocation(line: 708, column: 30, scope: !7331)
!7334 = !DILocation(line: 708, column: 17, scope: !7331)
!7335 = !DILocation(line: 709, column: 7, scope: !7331)
!7336 = !DILocation(line: 711, column: 12, scope: !7337)
!7337 = distinct !DILexicalBlock(scope: !7319, file: !7295, line: 711, column: 7)
!7338 = !DILocation(line: 711, column: 7, scope: !7337)
!7339 = !DILocation(line: 711, column: 7, scope: !7319)
!7340 = !DILocation(line: 713, column: 13, scope: !7341)
!7341 = distinct !DILexicalBlock(scope: !7337, file: !7295, line: 712, column: 5)
!7342 = !DILocation(line: 714, column: 24, scope: !7341)
!7343 = !DILocation(line: 714, column: 30, scope: !7341)
!7344 = !DILocation(line: 714, column: 17, scope: !7341)
!7345 = !DILocation(line: 715, column: 7, scope: !7341)
!7346 = !DILocation(line: 718, column: 8, scope: !7319)
!7347 = !DILocation(line: 718, column: 13, scope: !7319)
!7348 = !DILocation(line: 719, column: 3, scope: !7319)
!7349 = !DILocation(line: 721, column: 1, scope: !7319)
!7350 = distinct !DISubprogram(name: "count_ptr_derefs", scope: !3, file: !3, line: 4244, type: !4177, scopeLine: 4245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7351)
!7351 = !{!7352, !7353, !7354, !7355, !7356}
!7352 = !DILocalVariable(name: "tp", arg: 1, scope: !7350, file: !3, line: 4244, type: !908)
!7353 = !DILocalVariable(name: "walk_subtrees", arg: 2, scope: !7350, file: !3, line: 4244, type: !4179)
!7354 = !DILocalVariable(name: "data", arg: 3, scope: !7350, file: !3, line: 4244, type: !376)
!7355 = !DILocalVariable(name: "wi_p", scope: !7350, file: !3, line: 4246, type: !1584)
!7356 = !DILocalVariable(name: "count_p", scope: !7350, file: !3, line: 4247, type: !1603)
!7357 = !DILocation(line: 0, scope: !7350)
!7358 = !DILocation(line: 4247, column: 62, scope: !7350)
!7359 = !DILocation(line: 4252, column: 7, scope: !7360)
!7360 = distinct !DILexicalBlock(scope: !7350, file: !3, line: 4252, column: 7)
!7361 = !DILocation(line: 4252, column: 23, scope: !7360)
!7362 = !DILocation(line: 4252, column: 7, scope: !7350)
!7363 = !DILocation(line: 4254, column: 22, scope: !7364)
!7364 = distinct !DILexicalBlock(scope: !7360, file: !3, line: 4253, column: 5)
!7365 = !DILocation(line: 4255, column: 7, scope: !7364)
!7366 = !DILocation(line: 4258, column: 7, scope: !7367)
!7367 = distinct !DILexicalBlock(scope: !7350, file: !3, line: 4258, column: 7)
!7368 = !DILocation(line: 4258, column: 28, scope: !7367)
!7369 = !DILocation(line: 4258, column: 31, scope: !7367)
!7370 = !DILocation(line: 4258, column: 65, scope: !7367)
!7371 = !DILocation(line: 4258, column: 53, scope: !7367)
!7372 = !DILocation(line: 4258, column: 7, scope: !7350)
!7373 = !DILocation(line: 4260, column: 17, scope: !7374)
!7374 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 4260, column: 11)
!7375 = distinct !DILexicalBlock(scope: !7367, file: !3, line: 4259, column: 5)
!7376 = !DILocation(line: 4260, column: 11, scope: !7374)
!7377 = !DILocation(line: 4260, column: 11, scope: !7375)
!7378 = !DILocation(line: 4261, column: 11, scope: !7374)
!7379 = !DILocation(line: 4261, column: 21, scope: !7374)
!7380 = !DILocation(line: 4261, column: 2, scope: !7374)
!7381 = !DILocation(line: 4263, column: 11, scope: !7374)
!7382 = !DILocation(line: 4263, column: 20, scope: !7374)
!7383 = !DILocation(line: 4267, column: 1, scope: !7350)
!7384 = distinct !DISubprogram(name: "walk_stmt_load_store_addr_ops", scope: !3, file: !3, line: 4344, type: !7385, scopeLine: 4348, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7390)
!7385 = !DISubroutineType(types: !7386)
!7386 = !{!371, !379, !376, !7387, !7387, !7387}
!7387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7388, size: 64)
!7388 = !DISubroutineType(types: !7389)
!7389 = !{!371, !379, !450, !376}
!7390 = !{!7391, !7392, !7393, !7394, !7395, !7396, !7397, !7398, !7401, !7402, !7408, !7413, !7416, !7417, !7418, !7419, !7420, !7421, !7426, !7427, !7432, !7433, !7436}
!7391 = !DILocalVariable(name: "stmt", arg: 1, scope: !7384, file: !3, line: 4344, type: !379)
!7392 = !DILocalVariable(name: "data", arg: 2, scope: !7384, file: !3, line: 4344, type: !376)
!7393 = !DILocalVariable(name: "visit_load", arg: 3, scope: !7384, file: !3, line: 4345, type: !7387)
!7394 = !DILocalVariable(name: "visit_store", arg: 4, scope: !7384, file: !3, line: 4346, type: !7387)
!7395 = !DILocalVariable(name: "visit_addr", arg: 5, scope: !7384, file: !3, line: 4347, type: !7387)
!7396 = !DILocalVariable(name: "ret", scope: !7384, file: !3, line: 4349, type: !371)
!7397 = !DILocalVariable(name: "i", scope: !7384, file: !3, line: 4350, type: !7)
!7398 = !DILocalVariable(name: "lhs", scope: !7399, file: !3, line: 4353, type: !450)
!7399 = distinct !DILexicalBlock(scope: !7400, file: !3, line: 4352, column: 5)
!7400 = distinct !DILexicalBlock(scope: !7384, file: !3, line: 4351, column: 7)
!7401 = !DILocalVariable(name: "rhs", scope: !7399, file: !3, line: 4353, type: !450)
!7402 = !DILocalVariable(name: "lhs", scope: !7403, file: !3, line: 4401, type: !450)
!7403 = distinct !DILexicalBlock(scope: !7404, file: !3, line: 4400, column: 2)
!7404 = distinct !DILexicalBlock(scope: !7405, file: !3, line: 4399, column: 11)
!7405 = distinct !DILexicalBlock(scope: !7406, file: !3, line: 4398, column: 5)
!7406 = distinct !DILexicalBlock(scope: !7407, file: !3, line: 4397, column: 12)
!7407 = distinct !DILexicalBlock(scope: !7400, file: !3, line: 4388, column: 12)
!7408 = !DILocalVariable(name: "rhs", scope: !7409, file: !3, line: 4412, type: !450)
!7409 = distinct !DILexicalBlock(scope: !7410, file: !3, line: 4411, column: 4)
!7410 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 4410, column: 2)
!7411 = distinct !DILexicalBlock(scope: !7412, file: !3, line: 4410, column: 2)
!7412 = distinct !DILexicalBlock(scope: !7405, file: !3, line: 4409, column: 11)
!7413 = !DILocalVariable(name: "noutputs", scope: !7414, file: !3, line: 4436, type: !7)
!7414 = distinct !DILexicalBlock(scope: !7415, file: !3, line: 4435, column: 5)
!7415 = distinct !DILexicalBlock(scope: !7406, file: !3, line: 4434, column: 12)
!7416 = !DILocalVariable(name: "constraint", scope: !7414, file: !3, line: 4437, type: !377)
!7417 = !DILocalVariable(name: "oconstraints", scope: !7414, file: !3, line: 4438, type: !1555)
!7418 = !DILocalVariable(name: "allows_mem", scope: !7414, file: !3, line: 4439, type: !371)
!7419 = !DILocalVariable(name: "allows_reg", scope: !7414, file: !3, line: 4439, type: !371)
!7420 = !DILocalVariable(name: "is_inout", scope: !7414, file: !3, line: 4439, type: !371)
!7421 = !DILocalVariable(name: "link", scope: !7422, file: !3, line: 4445, type: !450)
!7422 = distinct !DILexicalBlock(scope: !7423, file: !3, line: 4444, column: 4)
!7423 = distinct !DILexicalBlock(scope: !7424, file: !3, line: 4443, column: 2)
!7424 = distinct !DILexicalBlock(scope: !7425, file: !3, line: 4443, column: 2)
!7425 = distinct !DILexicalBlock(scope: !7414, file: !3, line: 4442, column: 11)
!7426 = !DILocalVariable(name: "op", scope: !7422, file: !3, line: 4446, type: !450)
!7427 = !DILocalVariable(name: "link", scope: !7428, file: !3, line: 4463, type: !450)
!7428 = distinct !DILexicalBlock(scope: !7429, file: !3, line: 4462, column: 4)
!7429 = distinct !DILexicalBlock(scope: !7430, file: !3, line: 4461, column: 2)
!7430 = distinct !DILexicalBlock(scope: !7431, file: !3, line: 4461, column: 2)
!7431 = distinct !DILexicalBlock(scope: !7414, file: !3, line: 4460, column: 11)
!7432 = !DILocalVariable(name: "op", scope: !7428, file: !3, line: 4464, type: !450)
!7433 = !DILocalVariable(name: "op", scope: !7434, file: !3, line: 4491, type: !450)
!7434 = distinct !DILexicalBlock(scope: !7435, file: !3, line: 4490, column: 5)
!7435 = distinct !DILexicalBlock(scope: !7415, file: !3, line: 4489, column: 12)
!7436 = !DILocalVariable(name: "op", scope: !7437, file: !3, line: 4510, type: !450)
!7437 = distinct !DILexicalBlock(scope: !7438, file: !3, line: 4509, column: 2)
!7438 = distinct !DILexicalBlock(scope: !7439, file: !3, line: 4508, column: 7)
!7439 = distinct !DILexicalBlock(scope: !7440, file: !3, line: 4508, column: 7)
!7440 = distinct !DILexicalBlock(scope: !7441, file: !3, line: 4507, column: 5)
!7441 = distinct !DILexicalBlock(scope: !7435, file: !3, line: 4505, column: 12)
!7442 = !DILocation(line: 0, scope: !7384)
!7443 = !DILocation(line: 4351, column: 7, scope: !7400)
!7444 = !DILocation(line: 4351, column: 7, scope: !7384)
!7445 = !DILocation(line: 4354, column: 11, scope: !7446)
!7446 = distinct !DILexicalBlock(scope: !7399, file: !3, line: 4354, column: 11)
!7447 = !DILocation(line: 4354, column: 11, scope: !7399)
!7448 = !DILocation(line: 4356, column: 30, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7446, file: !3, line: 4355, column: 2)
!7450 = !DILocation(line: 4356, column: 10, scope: !7449)
!7451 = !DILocation(line: 0, scope: !7399)
!7452 = !DILocation(line: 4357, column: 8, scope: !7453)
!7453 = distinct !DILexicalBlock(scope: !7449, file: !3, line: 4357, column: 8)
!7454 = !DILocation(line: 4357, column: 8, scope: !7449)
!7455 = !DILocation(line: 4358, column: 13, scope: !7453)
!7456 = !DILocation(line: 4358, column: 6, scope: !7453)
!7457 = !DILocation(line: 4360, column: 13, scope: !7399)
!7458 = !DILocation(line: 4361, column: 7, scope: !7399)
!7459 = !DILocation(line: 4361, column: 14, scope: !7399)
!7460 = !DILocation(line: 4362, column: 8, scope: !7399)
!7461 = distinct !{!7461, !7458, !7460}
!7462 = !DILocation(line: 4363, column: 11, scope: !7463)
!7463 = distinct !DILexicalBlock(scope: !7399, file: !3, line: 4363, column: 11)
!7464 = !DILocation(line: 4363, column: 11, scope: !7399)
!7465 = !DILocation(line: 4365, column: 8, scope: !7466)
!7466 = distinct !DILexicalBlock(scope: !7467, file: !3, line: 4365, column: 8)
!7467 = distinct !DILexicalBlock(scope: !7463, file: !3, line: 4364, column: 2)
!7468 = !DILocation(line: 4365, column: 24, scope: !7466)
!7469 = !DILocation(line: 4365, column: 8, scope: !7467)
!7470 = !DILocation(line: 4366, column: 31, scope: !7466)
!7471 = !DILocation(line: 4366, column: 13, scope: !7466)
!7472 = !DILocation(line: 4366, column: 10, scope: !7466)
!7473 = !DILocation(line: 4366, column: 6, scope: !7466)
!7474 = !DILocation(line: 4367, column: 29, scope: !7475)
!7475 = distinct !DILexicalBlock(scope: !7466, file: !3, line: 4367, column: 13)
!7476 = !DILocation(line: 4368, column: 20, scope: !7475)
!7477 = !DILocation(line: 4368, column: 23, scope: !7475)
!7478 = !DILocation(line: 4368, column: 38, scope: !7475)
!7479 = !DILocation(line: 4369, column: 6, scope: !7475)
!7480 = !DILocation(line: 4369, column: 9, scope: !7475)
!7481 = !DILocation(line: 4369, column: 36, scope: !7475)
!7482 = !DILocation(line: 4367, column: 13, scope: !7466)
!7483 = !DILocation(line: 4370, column: 31, scope: !7475)
!7484 = !DILocation(line: 4370, column: 13, scope: !7475)
!7485 = !DILocation(line: 4370, column: 10, scope: !7475)
!7486 = !DILocation(line: 4370, column: 6, scope: !7475)
!7487 = !DILocation(line: 4371, column: 29, scope: !7488)
!7488 = distinct !DILexicalBlock(scope: !7475, file: !3, line: 4371, column: 13)
!7489 = !DILocation(line: 4372, column: 6, scope: !7488)
!7490 = !DILocation(line: 4372, column: 9, scope: !7488)
!7491 = !DILocation(line: 4372, column: 47, scope: !7488)
!7492 = !DILocation(line: 4371, column: 13, scope: !7475)
!7493 = !DILocation(line: 4373, column: 31, scope: !7488)
!7494 = !DILocation(line: 4373, column: 13, scope: !7488)
!7495 = !DILocation(line: 4373, column: 10, scope: !7488)
!7496 = !DILocation(line: 4373, column: 6, scope: !7488)
!7497 = !DILocation(line: 0, scope: !7466)
!7498 = !DILocation(line: 4375, column: 17, scope: !7467)
!7499 = !DILocation(line: 4376, column: 8, scope: !7500)
!7500 = distinct !DILexicalBlock(scope: !7467, file: !3, line: 4376, column: 8)
!7501 = !DILocation(line: 4376, column: 24, scope: !7500)
!7502 = !DILocation(line: 4377, column: 15, scope: !7500)
!7503 = !DILocation(line: 4377, column: 18, scope: !7500)
!7504 = !DILocation(line: 4377, column: 33, scope: !7500)
!7505 = !DILocation(line: 4378, column: 15, scope: !7500)
!7506 = !DILocation(line: 4378, column: 18, scope: !7500)
!7507 = !DILocation(line: 4378, column: 45, scope: !7500)
!7508 = !DILocation(line: 4376, column: 8, scope: !7467)
!7509 = !DILocation(line: 4379, column: 38, scope: !7500)
!7510 = !DILocation(line: 4379, column: 20, scope: !7500)
!7511 = !DILocation(line: 4379, column: 17, scope: !7500)
!7512 = !DILocation(line: 4379, column: 13, scope: !7500)
!7513 = !DILocation(line: 4381, column: 11, scope: !7514)
!7514 = distinct !DILexicalBlock(scope: !7399, file: !3, line: 4381, column: 11)
!7515 = !DILocation(line: 4381, column: 11, scope: !7399)
!7516 = !DILocation(line: 4383, column: 10, scope: !7517)
!7517 = distinct !DILexicalBlock(scope: !7514, file: !3, line: 4382, column: 2)
!7518 = !DILocation(line: 4384, column: 8, scope: !7519)
!7519 = distinct !DILexicalBlock(scope: !7517, file: !3, line: 4384, column: 8)
!7520 = !DILocation(line: 4384, column: 8, scope: !7517)
!7521 = !DILocation(line: 4385, column: 13, scope: !7519)
!7522 = !DILocation(line: 4385, column: 10, scope: !7519)
!7523 = !DILocation(line: 4385, column: 6, scope: !7519)
!7524 = !DILocation(line: 4388, column: 12, scope: !7407)
!7525 = !DILocation(line: 4389, column: 5, scope: !7407)
!7526 = !DILocation(line: 4389, column: 9, scope: !7407)
!7527 = !DILocation(line: 4390, column: 9, scope: !7407)
!7528 = !DILocation(line: 4390, column: 12, scope: !7407)
!7529 = !DILocation(line: 4390, column: 31, scope: !7407)
!7530 = !DILocation(line: 4388, column: 12, scope: !7400)
!7531 = !DILocation(line: 4392, column: 12, scope: !7532)
!7532 = distinct !DILexicalBlock(scope: !7533, file: !3, line: 4392, column: 7)
!7533 = distinct !DILexicalBlock(scope: !7407, file: !3, line: 4391, column: 5)
!7534 = !DILocation(line: 0, scope: !7532)
!7535 = !DILocation(line: 4392, column: 23, scope: !7536)
!7536 = distinct !DILexicalBlock(scope: !7532, file: !3, line: 4392, column: 7)
!7537 = !DILocation(line: 4392, column: 21, scope: !7536)
!7538 = !DILocation(line: 4392, column: 7, scope: !7532)
!7539 = !DILocation(line: 4393, column: 6, scope: !7540)
!7540 = distinct !DILexicalBlock(scope: !7536, file: !3, line: 4393, column: 6)
!7541 = !DILocation(line: 4394, column: 6, scope: !7540)
!7542 = !DILocation(line: 4394, column: 9, scope: !7540)
!7543 = !DILocation(line: 4394, column: 41, scope: !7540)
!7544 = !DILocation(line: 4393, column: 6, scope: !7536)
!7545 = !DILocation(line: 4395, column: 29, scope: !7540)
!7546 = !DILocation(line: 4395, column: 11, scope: !7540)
!7547 = !DILocation(line: 4395, column: 8, scope: !7540)
!7548 = !DILocation(line: 4395, column: 4, scope: !7540)
!7549 = !DILocation(line: 4392, column: 46, scope: !7536)
!7550 = !DILocation(line: 4392, column: 7, scope: !7536)
!7551 = distinct !{!7551, !7538, !7552}
!7552 = !DILocation(line: 4395, column: 72, scope: !7532)
!7553 = !DILocation(line: 4397, column: 12, scope: !7406)
!7554 = !DILocation(line: 4397, column: 12, scope: !7407)
!7555 = !DILocation(line: 4399, column: 11, scope: !7404)
!7556 = !DILocation(line: 4399, column: 11, scope: !7405)
!7557 = !DILocation(line: 4401, column: 15, scope: !7403)
!7558 = !DILocation(line: 0, scope: !7403)
!7559 = !DILocation(line: 4402, column: 8, scope: !7560)
!7560 = distinct !DILexicalBlock(scope: !7403, file: !3, line: 4402, column: 8)
!7561 = !DILocation(line: 4402, column: 8, scope: !7403)
!7562 = !DILocation(line: 4404, column: 14, scope: !7563)
!7563 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 4403, column: 6)
!7564 = !DILocation(line: 4405, column: 12, scope: !7565)
!7565 = distinct !DILexicalBlock(scope: !7563, file: !3, line: 4405, column: 12)
!7566 = !DILocation(line: 4405, column: 12, scope: !7563)
!7567 = !DILocation(line: 4406, column: 10, scope: !7565)
!7568 = !DILocation(line: 4406, column: 3, scope: !7565)
!7569 = !DILocation(line: 4409, column: 11, scope: !7412)
!7570 = !DILocation(line: 4409, column: 25, scope: !7412)
!7571 = !DILocation(line: 4409, column: 22, scope: !7412)
!7572 = !DILocation(line: 0, scope: !7573)
!7573 = distinct !DILexicalBlock(scope: !7574, file: !3, line: 4416, column: 15)
!7574 = distinct !DILexicalBlock(scope: !7409, file: !3, line: 4413, column: 10)
!7575 = !DILocation(line: 4410, column: 2, scope: !7411)
!7576 = !DILocation(line: 0, scope: !7411)
!7577 = !DILocation(line: 4410, column: 18, scope: !7410)
!7578 = !DILocation(line: 4410, column: 16, scope: !7410)
!7579 = !DILocation(line: 4412, column: 17, scope: !7409)
!7580 = !DILocation(line: 0, scope: !7409)
!7581 = !DILocation(line: 4410, column: 47, scope: !7410)
!7582 = !DILocation(line: 4410, column: 2, scope: !7410)
!7583 = distinct !{!7583, !7575, !7584}
!7584 = !DILocation(line: 4422, column: 4, scope: !7411)
!7585 = !DILocation(line: 4423, column: 11, scope: !7586)
!7586 = distinct !DILexicalBlock(scope: !7405, file: !3, line: 4423, column: 11)
!7587 = !DILocation(line: 0, scope: !7405)
!7588 = !DILocation(line: 4418, column: 9, scope: !7589)
!7589 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 4417, column: 8)
!7590 = !DILocation(line: 4419, column: 7, scope: !7591)
!7591 = distinct !DILexicalBlock(scope: !7589, file: !3, line: 4419, column: 7)
!7592 = !DILocation(line: 4419, column: 7, scope: !7589)
!7593 = !DILocation(line: 4420, column: 12, scope: !7591)
!7594 = !DILocation(line: 4420, column: 9, scope: !7591)
!7595 = !DILocation(line: 4420, column: 5, scope: !7591)
!7596 = !DILocation(line: 0, scope: !7574)
!7597 = !DILocation(line: 4414, column: 6, scope: !7574)
!7598 = !DILocation(line: 4414, column: 22, scope: !7574)
!7599 = !DILocation(line: 4413, column: 10, scope: !7409)
!7600 = !DILocation(line: 4415, column: 33, scope: !7574)
!7601 = !DILocation(line: 4415, column: 15, scope: !7574)
!7602 = !DILocation(line: 4415, column: 12, scope: !7574)
!7603 = !DILocation(line: 4415, column: 8, scope: !7574)
!7604 = !DILocation(line: 4416, column: 15, scope: !7574)
!7605 = !DILocation(line: 4406, column: 7, scope: !7565)
!7606 = !DILocation(line: 4424, column: 4, scope: !7586)
!7607 = !DILocation(line: 4424, column: 7, scope: !7586)
!7608 = !DILocation(line: 4425, column: 4, scope: !7586)
!7609 = !DILocation(line: 4425, column: 7, scope: !7586)
!7610 = !DILocation(line: 4425, column: 44, scope: !7586)
!7611 = !DILocation(line: 4423, column: 11, scope: !7405)
!7612 = !DILocation(line: 4426, column: 27, scope: !7586)
!7613 = !DILocation(line: 4426, column: 9, scope: !7586)
!7614 = !DILocation(line: 4426, column: 6, scope: !7586)
!7615 = !DILocation(line: 4426, column: 2, scope: !7586)
!7616 = !DILocation(line: 4429, column: 4, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7405, file: !3, line: 4428, column: 11)
!7618 = !DILocation(line: 4429, column: 7, scope: !7617)
!7619 = !DILocation(line: 4430, column: 4, scope: !7617)
!7620 = !DILocation(line: 4430, column: 7, scope: !7617)
!7621 = !DILocation(line: 4430, column: 30, scope: !7617)
!7622 = !DILocation(line: 4431, column: 4, scope: !7617)
!7623 = !DILocation(line: 4431, column: 7, scope: !7617)
!7624 = !DILocation(line: 4428, column: 11, scope: !7405)
!7625 = !DILocation(line: 4432, column: 27, scope: !7617)
!7626 = !DILocation(line: 4432, column: 9, scope: !7617)
!7627 = !DILocation(line: 4432, column: 6, scope: !7617)
!7628 = !DILocation(line: 4432, column: 2, scope: !7617)
!7629 = !DILocation(line: 4434, column: 12, scope: !7415)
!7630 = !DILocation(line: 4434, column: 31, scope: !7415)
!7631 = !DILocation(line: 4434, column: 12, scope: !7406)
!7632 = !DILocation(line: 4437, column: 7, scope: !7414)
!7633 = !DILocation(line: 0, scope: !7414)
!7634 = !DILocation(line: 4439, column: 7, scope: !7414)
!7635 = !DILocation(line: 4440, column: 18, scope: !7414)
!7636 = !DILocation(line: 4441, column: 22, scope: !7414)
!7637 = !DILocation(line: 4442, column: 11, scope: !7425)
!7638 = !DILocation(line: 4442, column: 26, scope: !7425)
!7639 = !DILocation(line: 4442, column: 23, scope: !7425)
!7640 = !DILocation(line: 0, scope: !7641)
!7641 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 4447, column: 10)
!7642 = !DILocation(line: 4443, column: 2, scope: !7424)
!7643 = !DILocation(line: 0, scope: !7424)
!7644 = !DILocation(line: 4443, column: 18, scope: !7423)
!7645 = !DILocation(line: 4443, column: 16, scope: !7423)
!7646 = !DILocation(line: 4445, column: 18, scope: !7422)
!7647 = !DILocation(line: 0, scope: !7422)
!7648 = !DILocation(line: 4446, column: 36, scope: !7422)
!7649 = !DILocation(line: 4446, column: 16, scope: !7422)
!7650 = !DILocation(line: 4447, column: 10, scope: !7641)
!7651 = !DILocation(line: 4447, column: 13, scope: !7641)
!7652 = !DILocation(line: 4448, column: 15, scope: !7641)
!7653 = !DILocation(line: 4448, column: 12, scope: !7641)
!7654 = !DILocation(line: 4448, column: 8, scope: !7641)
!7655 = !DILocation(line: 4449, column: 10, scope: !7422)
!7656 = !DILocation(line: 4451, column: 16, scope: !7657)
!7657 = distinct !DILexicalBlock(scope: !7658, file: !3, line: 4450, column: 8)
!7658 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 4449, column: 10)
!7659 = !DILocation(line: 4451, column: 14, scope: !7657)
!7660 = !DILocation(line: 4453, column: 21, scope: !7657)
!7661 = !DILocation(line: 4453, column: 3, scope: !7657)
!7662 = !DILocation(line: 4453, column: 19, scope: !7657)
!7663 = !DILocation(line: 4454, column: 3, scope: !7657)
!7664 = !DILocation(line: 4456, column: 14, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !7657, file: !3, line: 4456, column: 7)
!7666 = !DILocation(line: 4456, column: 10, scope: !7665)
!7667 = !DILocation(line: 4456, column: 28, scope: !7665)
!7668 = !DILocation(line: 4456, column: 7, scope: !7657)
!7669 = !DILocation(line: 4457, column: 12, scope: !7665)
!7670 = !DILocation(line: 4457, column: 9, scope: !7665)
!7671 = !DILocation(line: 4457, column: 5, scope: !7665)
!7672 = !DILocation(line: 4443, column: 46, scope: !7423)
!7673 = !DILocation(line: 4443, column: 2, scope: !7423)
!7674 = distinct !{!7674, !7642, !7675}
!7675 = !DILocation(line: 4459, column: 4, scope: !7424)
!7676 = !DILocation(line: 4460, column: 11, scope: !7431)
!7677 = !DILocation(line: 4456, column: 7, scope: !7665)
!7678 = !DILocation(line: 4349, column: 8, scope: !7384)
!7679 = !DILocation(line: 4460, column: 22, scope: !7431)
!7680 = !DILocation(line: 0, scope: !7681)
!7681 = distinct !DILexicalBlock(scope: !7682, file: !3, line: 4473, column: 11)
!7682 = distinct !DILexicalBlock(scope: !7683, file: !3, line: 4472, column: 5)
!7683 = distinct !DILexicalBlock(scope: !7684, file: !3, line: 4471, column: 7)
!7684 = distinct !DILexicalBlock(scope: !7685, file: !3, line: 4469, column: 8)
!7685 = distinct !DILexicalBlock(scope: !7686, file: !3, line: 4468, column: 15)
!7686 = distinct !DILexicalBlock(scope: !7428, file: !3, line: 4465, column: 10)
!7687 = !DILocation(line: 4461, column: 2, scope: !7430)
!7688 = !DILocation(line: 0, scope: !7430)
!7689 = !DILocation(line: 4461, column: 18, scope: !7429)
!7690 = !DILocation(line: 4461, column: 16, scope: !7429)
!7691 = !DILocation(line: 4463, column: 18, scope: !7428)
!7692 = !DILocation(line: 0, scope: !7428)
!7693 = !DILocation(line: 4468, column: 26, scope: !7685)
!7694 = !DILocation(line: 4464, column: 16, scope: !7428)
!7695 = !DILocation(line: 4470, column: 8, scope: !7684)
!7696 = !DILocation(line: 4471, column: 7, scope: !7683)
!7697 = !DILocation(line: 4471, column: 7, scope: !7684)
!7698 = !DILocation(line: 4473, column: 11, scope: !7682)
!7699 = !DILocation(line: 4474, column: 16, scope: !7681)
!7700 = !DILocation(line: 4474, column: 13, scope: !7681)
!7701 = !DILocation(line: 4474, column: 9, scope: !7681)
!7702 = !DILocation(line: 4475, column: 11, scope: !7682)
!7703 = !DILocation(line: 4482, column: 20, scope: !7704)
!7704 = distinct !DILexicalBlock(scope: !7705, file: !3, line: 4482, column: 8)
!7705 = distinct !DILexicalBlock(scope: !7706, file: !3, line: 4476, column: 9)
!7706 = distinct !DILexicalBlock(scope: !7682, file: !3, line: 4475, column: 11)
!7707 = !DILocation(line: 4482, column: 8, scope: !7705)
!7708 = !DILocation(line: 4483, column: 6, scope: !7704)
!7709 = !DILocation(line: 0, scope: !7686)
!7710 = !DILocation(line: 4461, column: 45, scope: !7429)
!7711 = !DILocation(line: 4461, column: 2, scope: !7429)
!7712 = distinct !{!7712, !7687, !7713}
!7713 = !DILocation(line: 4487, column: 4, scope: !7430)
!7714 = !DILocation(line: 4488, column: 5, scope: !7415)
!7715 = !DILocation(line: 4466, column: 6, scope: !7686)
!7716 = !DILocation(line: 4466, column: 21, scope: !7686)
!7717 = !DILocation(line: 4465, column: 10, scope: !7428)
!7718 = !DILocation(line: 4467, column: 33, scope: !7686)
!7719 = !DILocation(line: 4467, column: 15, scope: !7686)
!7720 = !DILocation(line: 4467, column: 12, scope: !7686)
!7721 = !DILocation(line: 4467, column: 8, scope: !7686)
!7722 = !DILocation(line: 4477, column: 17, scope: !7705)
!7723 = !DILocation(line: 4477, column: 15, scope: !7705)
!7724 = !DILocation(line: 4479, column: 4, scope: !7705)
!7725 = !DILocation(line: 4482, column: 9, scope: !7704)
!7726 = !DILocation(line: 4482, column: 23, scope: !7704)
!7727 = !DILocation(line: 4483, column: 13, scope: !7704)
!7728 = !DILocation(line: 4483, column: 10, scope: !7704)
!7729 = !DILocation(line: 4488, column: 5, scope: !7414)
!7730 = !DILocation(line: 4489, column: 12, scope: !7435)
!7731 = !DILocation(line: 4489, column: 31, scope: !7435)
!7732 = !DILocation(line: 4489, column: 12, scope: !7415)
!7733 = !DILocation(line: 4491, column: 17, scope: !7434)
!7734 = !DILocation(line: 0, scope: !7434)
!7735 = !DILocation(line: 4492, column: 11, scope: !7736)
!7736 = distinct !DILexicalBlock(scope: !7434, file: !3, line: 4492, column: 11)
!7737 = !DILocation(line: 4492, column: 11, scope: !7434)
!7738 = !DILocation(line: 4495, column: 8, scope: !7739)
!7739 = distinct !DILexicalBlock(scope: !7740, file: !3, line: 4494, column: 8)
!7740 = distinct !DILexicalBlock(scope: !7736, file: !3, line: 4493, column: 2)
!7741 = !DILocation(line: 4495, column: 11, scope: !7739)
!7742 = !DILocation(line: 4495, column: 26, scope: !7739)
!7743 = !DILocation(line: 4494, column: 8, scope: !7740)
!7744 = !DILocation(line: 4496, column: 31, scope: !7739)
!7745 = !DILocation(line: 4496, column: 13, scope: !7739)
!7746 = !DILocation(line: 4496, column: 6, scope: !7739)
!7747 = !DILocation(line: 4497, column: 13, scope: !7748)
!7748 = distinct !DILexicalBlock(scope: !7739, file: !3, line: 4497, column: 13)
!7749 = !DILocation(line: 4497, column: 13, scope: !7739)
!7750 = !DILocation(line: 4499, column: 13, scope: !7751)
!7751 = distinct !DILexicalBlock(scope: !7748, file: !3, line: 4498, column: 6)
!7752 = !DILocation(line: 4500, column: 12, scope: !7753)
!7753 = distinct !DILexicalBlock(scope: !7751, file: !3, line: 4500, column: 12)
!7754 = !DILocation(line: 4500, column: 12, scope: !7751)
!7755 = !DILocation(line: 4501, column: 10, scope: !7753)
!7756 = !DILocation(line: 4501, column: 3, scope: !7753)
!7757 = !DILocation(line: 4506, column: 5, scope: !7441)
!7758 = !DILocation(line: 4506, column: 8, scope: !7441)
!7759 = !DILocation(line: 4506, column: 27, scope: !7441)
!7760 = !DILocation(line: 4505, column: 12, scope: !7435)
!7761 = !DILocation(line: 4508, column: 7, scope: !7439)
!7762 = !DILocation(line: 0, scope: !7439)
!7763 = !DILocation(line: 4508, column: 23, scope: !7438)
!7764 = !DILocation(line: 4508, column: 21, scope: !7438)
!7765 = !DILocation(line: 4510, column: 14, scope: !7437)
!7766 = !DILocation(line: 0, scope: !7437)
!7767 = !DILocation(line: 4511, column: 8, scope: !7768)
!7768 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 4511, column: 8)
!7769 = !DILocation(line: 4511, column: 23, scope: !7768)
!7770 = !DILocation(line: 4511, column: 8, scope: !7437)
!7771 = !DILocation(line: 4512, column: 31, scope: !7768)
!7772 = !DILocation(line: 4512, column: 13, scope: !7768)
!7773 = !DILocation(line: 4512, column: 10, scope: !7768)
!7774 = !DILocation(line: 4512, column: 6, scope: !7768)
!7775 = !DILocation(line: 4508, column: 51, scope: !7438)
!7776 = !DILocation(line: 4508, column: 7, scope: !7438)
!7777 = distinct !{!7777, !7761, !7778}
!7778 = !DILocation(line: 4513, column: 2, scope: !7439)
!7779 = !DILocation(line: 4516, column: 3, scope: !7384)
!7780 = distinct !DISubprogram(name: "get_base_loadstore", scope: !3, file: !3, line: 4325, type: !6385, scopeLine: 4326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7781)
!7781 = !{!7782}
!7782 = !DILocalVariable(name: "op", arg: 1, scope: !7780, file: !3, line: 4325, type: !450)
!7783 = !DILocation(line: 0, scope: !7780)
!7784 = !DILocation(line: 4327, column: 3, scope: !7780)
!7785 = !DILocation(line: 4327, column: 10, scope: !7780)
!7786 = !DILocation(line: 4328, column: 10, scope: !7780)
!7787 = distinct !{!7787, !7784, !7786}
!7788 = !DILocation(line: 4329, column: 7, scope: !7789)
!7789 = distinct !DILexicalBlock(scope: !7780, file: !3, line: 4329, column: 7)
!7790 = !DILocation(line: 4330, column: 7, scope: !7789)
!7791 = !DILocation(line: 4330, column: 10, scope: !7789)
!7792 = !DILocation(line: 4331, column: 7, scope: !7789)
!7793 = !DILocation(line: 4331, column: 25, scope: !7789)
!7794 = !DILocation(line: 4329, column: 7, scope: !7780)
!7795 = !DILocation(line: 4334, column: 1, scope: !7780)
!7796 = distinct !DISubprogram(name: "gimple_asm_noutputs", scope: !6, file: !6, line: 2591, type: !4644, scopeLine: 2592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7797)
!7797 = !{!7798}
!7798 = !DILocalVariable(name: "gs", arg: 1, scope: !7796, file: !6, line: 2591, type: !3301)
!7799 = !DILocation(line: 0, scope: !7796)
!7800 = !DILocation(line: 2594, column: 14, scope: !7796)
!7801 = !DILocation(line: 2594, column: 25, scope: !7796)
!7802 = !DILocation(line: 2594, column: 10, scope: !7796)
!7803 = !DILocation(line: 2594, column: 3, scope: !7796)
!7804 = distinct !DISubprogram(name: "gimple_asm_output_op", scope: !6, file: !6, line: 2652, type: !5220, scopeLine: 2653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7805)
!7805 = !{!7806, !7807}
!7806 = !DILocalVariable(name: "gs", arg: 1, scope: !7804, file: !6, line: 2652, type: !3301)
!7807 = !DILocalVariable(name: "index", arg: 2, scope: !7804, file: !6, line: 2652, type: !7)
!7808 = !DILocation(line: 0, scope: !7804)
!7809 = !DILocation(line: 2655, column: 3, scope: !7804)
!7810 = !DILocation(line: 2656, column: 48, scope: !7804)
!7811 = !DILocation(line: 2656, column: 33, scope: !7804)
!7812 = !DILocation(line: 2656, column: 31, scope: !7804)
!7813 = !DILocation(line: 2656, column: 10, scope: !7804)
!7814 = !DILocation(line: 2656, column: 3, scope: !7804)
!7815 = distinct !DISubprogram(name: "gimple_asm_ninputs", scope: !6, file: !6, line: 2581, type: !4644, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7816)
!7816 = !{!7817}
!7817 = !DILocalVariable(name: "gs", arg: 1, scope: !7815, file: !6, line: 2581, type: !3301)
!7818 = !DILocation(line: 0, scope: !7815)
!7819 = !DILocation(line: 2584, column: 25, scope: !7815)
!7820 = !DILocation(line: 2584, column: 10, scope: !7815)
!7821 = !DILocation(line: 2584, column: 3, scope: !7815)
!7822 = distinct !DISubprogram(name: "gimple_asm_input_op", scope: !6, file: !6, line: 2619, type: !5220, scopeLine: 2620, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7823)
!7823 = !{!7824, !7825}
!7824 = !DILocalVariable(name: "gs", arg: 1, scope: !7822, file: !6, line: 2619, type: !3301)
!7825 = !DILocalVariable(name: "index", arg: 2, scope: !7822, file: !6, line: 2619, type: !7)
!7826 = !DILocation(line: 0, scope: !7822)
!7827 = !DILocation(line: 2622, column: 3, scope: !7822)
!7828 = !DILocation(line: 2623, column: 10, scope: !7822)
!7829 = !DILocation(line: 2623, column: 3, scope: !7822)
!7830 = distinct !DISubprogram(name: "gimple_return_retval", scope: !6, file: !6, line: 4253, type: !3299, scopeLine: 4254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7831)
!7831 = !{!7832}
!7832 = !DILocalVariable(name: "gs", arg: 1, scope: !7830, file: !6, line: 4253, type: !3301)
!7833 = !DILocation(line: 0, scope: !7830)
!7834 = !DILocation(line: 4256, column: 10, scope: !7830)
!7835 = !DILocation(line: 4256, column: 3, scope: !7830)
!7836 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !6, file: !6, line: 3061, type: !4644, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7837)
!7837 = !{!7838}
!7838 = !DILocalVariable(name: "gs", arg: 1, scope: !7836, file: !6, line: 3061, type: !3301)
!7839 = !DILocation(line: 0, scope: !7836)
!7840 = !DILocation(line: 3064, column: 25, scope: !7836)
!7841 = !DILocation(line: 3064, column: 3, scope: !7836)
!7842 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !7295, file: !7295, line: 427, type: !7843, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7848)
!7843 = !DISubroutineType(types: !7844)
!7844 = !{!450, !7845}
!7845 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !363, line: 30, baseType: !7846)
!7846 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7847, size: 64)
!7847 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !50, line: 1893, baseType: !915)
!7848 = !{!7849}
!7849 = !DILocalVariable(name: "use", arg: 1, scope: !7842, file: !7295, line: 427, type: !7845)
!7850 = !DILocation(line: 0, scope: !7842)
!7851 = !DILocation(line: 429, column: 17, scope: !7842)
!7852 = !DILocation(line: 429, column: 10, scope: !7842)
!7853 = !DILocation(line: 429, column: 3, scope: !7842)
!7854 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !7295, file: !7295, line: 442, type: !7855, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7857)
!7855 = !DISubroutineType(types: !7856)
!7856 = !{!7845, !379, !372}
!7857 = !{!7858, !7859}
!7858 = !DILocalVariable(name: "gs", arg: 1, scope: !7854, file: !7295, line: 442, type: !379)
!7859 = !DILocalVariable(name: "i", arg: 2, scope: !7854, file: !7295, line: 442, type: !372)
!7860 = !DILocation(line: 0, scope: !7854)
!7861 = !DILocation(line: 444, column: 11, scope: !7854)
!7862 = !DILocation(line: 444, column: 35, scope: !7854)
!7863 = !DILocation(line: 444, column: 3, scope: !7854)
!7864 = distinct !DISubprogram(name: "walk_stmt_load_store_ops", scope: !3, file: !3, line: 4523, type: !7865, scopeLine: 4526, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7867)
!7865 = !DISubroutineType(types: !7866)
!7866 = !{!371, !379, !376, !7387, !7387}
!7867 = !{!7868, !7869, !7870, !7871}
!7868 = !DILocalVariable(name: "stmt", arg: 1, scope: !7864, file: !3, line: 4523, type: !379)
!7869 = !DILocalVariable(name: "data", arg: 2, scope: !7864, file: !3, line: 4523, type: !376)
!7870 = !DILocalVariable(name: "visit_load", arg: 3, scope: !7864, file: !3, line: 4524, type: !7387)
!7871 = !DILocalVariable(name: "visit_store", arg: 4, scope: !7864, file: !3, line: 4525, type: !7387)
!7872 = !DILocation(line: 0, scope: !7864)
!7873 = !DILocation(line: 4527, column: 10, scope: !7864)
!7874 = !DILocation(line: 4527, column: 3, scope: !7864)
!7875 = distinct !DISubprogram(name: "gimple_ior_addresses_taken", scope: !3, file: !3, line: 4553, type: !7876, scopeLine: 4554, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7878)
!7876 = !DISubroutineType(types: !7877)
!7877 = !{!371, !823, !379}
!7878 = !{!7879, !7880}
!7879 = !DILocalVariable(name: "addresses_taken", arg: 1, scope: !7875, file: !3, line: 4553, type: !823)
!7880 = !DILocalVariable(name: "stmt", arg: 2, scope: !7875, file: !3, line: 4553, type: !379)
!7881 = !DILocation(line: 0, scope: !7875)
!7882 = !DILocation(line: 4555, column: 47, scope: !7875)
!7883 = !DILocation(line: 4555, column: 10, scope: !7875)
!7884 = !DILocation(line: 4555, column: 3, scope: !7875)
!7885 = distinct !DISubprogram(name: "gimple_ior_addresses_taken_1", scope: !3, file: !3, line: 4534, type: !7388, scopeLine: 4536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7886)
!7886 = !{!7887, !7888, !7889, !7890}
!7887 = !DILocalVariable(name: "stmt", arg: 1, scope: !7885, file: !3, line: 4534, type: !379)
!7888 = !DILocalVariable(name: "addr", arg: 2, scope: !7885, file: !3, line: 4535, type: !450)
!7889 = !DILocalVariable(name: "data", arg: 3, scope: !7885, file: !3, line: 4535, type: !376)
!7890 = !DILocalVariable(name: "addresses_taken", scope: !7885, file: !3, line: 4537, type: !823)
!7891 = !DILocation(line: 0, scope: !7885)
!7892 = !DILocation(line: 4538, column: 3, scope: !7885)
!7893 = !DILocation(line: 4538, column: 10, scope: !7885)
!7894 = !DILocation(line: 4539, column: 12, scope: !7885)
!7895 = distinct !{!7895, !7892, !7894}
!7896 = !DILocation(line: 4540, column: 7, scope: !7897)
!7897 = distinct !DILexicalBlock(scope: !7885, file: !3, line: 4540, column: 7)
!7898 = !DILocation(line: 4540, column: 7, scope: !7885)
!7899 = !DILocation(line: 4537, column: 28, scope: !7885)
!7900 = !DILocation(line: 4542, column: 40, scope: !7901)
!7901 = distinct !DILexicalBlock(scope: !7897, file: !3, line: 4541, column: 5)
!7902 = !DILocation(line: 4542, column: 7, scope: !7901)
!7903 = !DILocation(line: 4543, column: 7, scope: !7901)
!7904 = !DILocation(line: 4546, column: 1, scope: !7885)
!7905 = distinct !DISubprogram(name: "gimple_decl_printable_name", scope: !3, file: !3, line: 4563, type: !7906, scopeLine: 4564, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7908)
!7906 = !DISubroutineType(types: !7907)
!7907 = !{!377, !450, !372}
!7908 = !{!7909, !7910, !7911, !7914, !7915}
!7909 = !DILocalVariable(name: "decl", arg: 1, scope: !7905, file: !3, line: 4563, type: !450)
!7910 = !DILocalVariable(name: "verbosity", arg: 2, scope: !7905, file: !3, line: 4563, type: !372)
!7911 = !DILocalVariable(name: "str", scope: !7912, file: !3, line: 4569, type: !377)
!7912 = distinct !DILexicalBlock(scope: !7913, file: !3, line: 4568, column: 5)
!7913 = distinct !DILexicalBlock(scope: !7905, file: !3, line: 4567, column: 7)
!7914 = !DILocalVariable(name: "mangled_str", scope: !7912, file: !3, line: 4569, type: !377)
!7915 = !DILocalVariable(name: "dmgl_opts", scope: !7912, file: !3, line: 4570, type: !372)
!7916 = !DILocation(line: 0, scope: !7905)
!7917 = !DILocation(line: 4565, column: 3, scope: !7905)
!7918 = !DILocation(line: 4567, column: 7, scope: !7913)
!7919 = !DILocation(line: 4567, column: 7, scope: !7905)
!7920 = !DILocation(line: 0, scope: !7912)
!7921 = !DILocation(line: 4572, column: 21, scope: !7922)
!7922 = distinct !DILexicalBlock(scope: !7912, file: !3, line: 4572, column: 11)
!7923 = !DILocation(line: 4572, column: 11, scope: !7912)
!7924 = !DILocation(line: 4578, column: 25, scope: !7925)
!7925 = distinct !DILexicalBlock(scope: !7926, file: !3, line: 4578, column: 8)
!7926 = distinct !DILexicalBlock(scope: !7922, file: !3, line: 4573, column: 2)
!7927 = !DILocation(line: 4578, column: 8, scope: !7926)
!7928 = !DILocation(line: 4580, column: 2, scope: !7926)
!7929 = !DILocation(line: 4582, column: 21, scope: !7912)
!7930 = !DILocation(line: 4583, column: 13, scope: !7912)
!7931 = !DILocation(line: 4584, column: 14, scope: !7912)
!7932 = !DILocation(line: 4587, column: 10, scope: !7905)
!7933 = !DILocation(line: 4587, column: 3, scope: !7905)
!7934 = !DILocation(line: 4588, column: 1, scope: !7905)
!7935 = distinct !DISubprogram(name: "gimple_fold_obj_type_ref", scope: !3, file: !3, line: 4597, type: !7936, scopeLine: 4598, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7938)
!7936 = !DISubroutineType(types: !7937)
!7937 = !{!450, !450, !450}
!7938 = !{!7939, !7940, !7941, !7942, !7943, !7944}
!7939 = !DILocalVariable(name: "ref", arg: 1, scope: !7935, file: !3, line: 4597, type: !450)
!7940 = !DILocalVariable(name: "known_type", arg: 2, scope: !7935, file: !3, line: 4597, type: !450)
!7941 = !DILocalVariable(name: "index", scope: !7935, file: !3, line: 4599, type: !505)
!7942 = !DILocalVariable(name: "i", scope: !7935, file: !3, line: 4600, type: !505)
!7943 = !DILocalVariable(name: "v", scope: !7935, file: !3, line: 4601, type: !450)
!7944 = !DILocalVariable(name: "fndecl", scope: !7935, file: !3, line: 4602, type: !450)
!7945 = !DILocation(line: 0, scope: !7935)
!7946 = !DILocation(line: 4604, column: 7, scope: !7947)
!7947 = distinct !DILexicalBlock(scope: !7935, file: !3, line: 4604, column: 7)
!7948 = !DILocation(line: 4604, column: 31, scope: !7947)
!7949 = !DILocation(line: 4604, column: 7, scope: !7935)
!7950 = !DILocation(line: 4607, column: 7, scope: !7935)
!7951 = !DILocation(line: 4608, column: 25, scope: !7935)
!7952 = !DILocation(line: 4608, column: 11, scope: !7935)
!7953 = !DILocation(line: 4610, column: 3, scope: !7935)
!7954 = !DILocation(line: 4610, column: 12, scope: !7935)
!7955 = !DILocation(line: 4612, column: 9, scope: !7956)
!7956 = distinct !DILexicalBlock(scope: !7935, file: !3, line: 4611, column: 5)
!7957 = !DILocation(line: 4614, column: 11, scope: !7956)
!7958 = distinct !{!7958, !7953, !7959}
!7959 = !DILocation(line: 4615, column: 5, scope: !7935)
!7960 = !DILocation(line: 4617, column: 12, scope: !7935)
!7961 = !DILocation(line: 4624, column: 3, scope: !7935)
!7962 = !DILocation(line: 4624, column: 31, scope: !7935)
!7963 = !DILocation(line: 4624, column: 45, scope: !7935)
!7964 = !DILocation(line: 4626, column: 10, scope: !7935)
!7965 = !DILocation(line: 4626, column: 3, scope: !7935)
!7966 = !DILocation(line: 4627, column: 1, scope: !7935)
!7967 = distinct !DISubprogram(name: "gss_for_code", scope: !6, file: !6, line: 1061, type: !7968, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7970)
!7968 = !DISubroutineType(types: !7969)
!7969 = !{!5, !276}
!7970 = !{!7971}
!7971 = !DILocalVariable(name: "code", arg: 1, scope: !7967, file: !6, line: 1061, type: !276)
!7972 = !DILocation(line: 0, scope: !7967)
!7973 = !DILocation(line: 1066, column: 10, scope: !7967)
!7974 = !DILocation(line: 1066, column: 3, scope: !7967)
!7975 = distinct !DISubprogram(name: "gimple_cond_set_code", scope: !6, file: !6, line: 2231, type: !7976, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7978)
!7976 = !DISubroutineType(types: !7977)
!7977 = !{null, !379, !82}
!7978 = !{!7979, !7980}
!7979 = !DILocalVariable(name: "gs", arg: 1, scope: !7975, file: !6, line: 2231, type: !379)
!7980 = !DILocalVariable(name: "code", arg: 2, scope: !7975, file: !6, line: 2231, type: !82)
!7981 = !DILocation(line: 0, scope: !7975)
!7982 = !DILocation(line: 2234, column: 14, scope: !7975)
!7983 = !DILocation(line: 2234, column: 22, scope: !7975)
!7984 = !DILocation(line: 2235, column: 1, scope: !7975)
!7985 = distinct !DISubprogram(name: "gimple_bb", scope: !6, file: !6, line: 1112, type: !7986, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7988)
!7986 = !DISubroutineType(types: !7987)
!7987 = !{!404, !3301}
!7988 = !{!7989}
!7989 = !DILocalVariable(name: "g", arg: 1, scope: !7985, file: !6, line: 1112, type: !3301)
!7990 = !DILocation(line: 0, scope: !7985)
!7991 = !DILocation(line: 1114, column: 20, scope: !7985)
!7992 = !DILocation(line: 1114, column: 3, scope: !7985)
!7993 = distinct !DISubprogram(name: "gimple_ops", scope: !6, file: !6, line: 1614, type: !4724, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !7994)
!7994 = !{!7995, !7996}
!7995 = !DILocalVariable(name: "gs", arg: 1, scope: !7993, file: !6, line: 1614, type: !379)
!7996 = !DILocalVariable(name: "off", scope: !7993, file: !6, line: 1616, type: !760)
!7997 = !DILocation(line: 0, scope: !7993)
!7998 = !DILocation(line: 1621, column: 28, scope: !7993)
!7999 = !DILocation(line: 1621, column: 9, scope: !7993)
!8000 = !DILocation(line: 1622, column: 3, scope: !7993)
!8001 = !DILocation(line: 1624, column: 20, scope: !7993)
!8002 = !DILocation(line: 1624, column: 32, scope: !7993)
!8003 = !DILocation(line: 1624, column: 10, scope: !7993)
!8004 = !DILocation(line: 1624, column: 3, scope: !7993)
!8005 = distinct !DISubprogram(name: "gimple_asm_nlabels", scope: !6, file: !6, line: 2610, type: !4644, scopeLine: 2611, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8006)
!8006 = !{!8007}
!8007 = !DILocalVariable(name: "gs", arg: 1, scope: !8005, file: !6, line: 2610, type: !3301)
!8008 = !DILocation(line: 0, scope: !8005)
!8009 = !DILocation(line: 2613, column: 14, scope: !8005)
!8010 = !DILocation(line: 2613, column: 25, scope: !8005)
!8011 = !DILocation(line: 2613, column: 10, scope: !8005)
!8012 = !DILocation(line: 2613, column: 3, scope: !8005)
!8013 = distinct !DISubprogram(name: "gimple_asm_label_op", scope: !6, file: !6, line: 2707, type: !5220, scopeLine: 2708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8014)
!8014 = !{!8015, !8016}
!8015 = !DILocalVariable(name: "gs", arg: 1, scope: !8013, file: !6, line: 2707, type: !3301)
!8016 = !DILocalVariable(name: "index", arg: 2, scope: !8013, file: !6, line: 2707, type: !7)
!8017 = !DILocation(line: 0, scope: !8013)
!8018 = !DILocation(line: 2710, column: 3, scope: !8013)
!8019 = !DILocation(line: 2711, column: 48, scope: !8013)
!8020 = !DILocation(line: 2711, column: 33, scope: !8013)
!8021 = !DILocation(line: 2711, column: 31, scope: !8013)
!8022 = !DILocation(line: 2711, column: 68, scope: !8013)
!8023 = !DILocation(line: 2711, column: 53, scope: !8013)
!8024 = !DILocation(line: 2711, column: 51, scope: !8013)
!8025 = !DILocation(line: 2711, column: 10, scope: !8013)
!8026 = !DILocation(line: 2711, column: 3, scope: !8013)
!8027 = distinct !DISubprogram(name: "gimple_expr_code", scope: !6, file: !6, line: 1438, type: !5188, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8028)
!8028 = !{!8029, !8030}
!8029 = !DILocalVariable(name: "stmt", arg: 1, scope: !8027, file: !6, line: 1438, type: !3301)
!8030 = !DILocalVariable(name: "code", scope: !8027, file: !6, line: 1440, type: !276)
!8031 = !DILocation(line: 0, scope: !8027)
!8032 = !DILocation(line: 1440, column: 27, scope: !8027)
!8033 = !DILocation(line: 1441, column: 29, scope: !8034)
!8034 = distinct !DILexicalBlock(scope: !8027, file: !6, line: 1441, column: 7)
!8035 = !DILocation(line: 1442, column: 42, scope: !8034)
!8036 = !DILocation(line: 1442, column: 5, scope: !8034)
!8037 = !DILocation(line: 1446, column: 5, scope: !8038)
!8038 = distinct !DILexicalBlock(scope: !8034, file: !6, line: 1443, column: 12)
!8039 = !DILocation(line: 1448, column: 5, scope: !8027)
!8040 = !DILocation(line: 1450, column: 1, scope: !8027)
!8041 = distinct !DISubprogram(name: "VEC_basic_block_gc_safe_grow", scope: !34, file: !34, line: 282, type: !5335, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8042)
!8042 = !{!8043, !8044}
!8043 = !DILocalVariable(name: "vec_", arg: 1, scope: !8041, file: !34, line: 282, type: !5337)
!8044 = !DILocalVariable(name: "size_", arg: 2, scope: !8041, file: !34, line: 282, type: !372)
!8045 = !DILocation(line: 0, scope: !8041)
!8046 = !DILocation(line: 282, column: 1, scope: !8041)
!8047 = distinct !DISubprogram(name: "VEC_basic_block_base_address", scope: !34, file: !34, line: 281, type: !8048, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8051)
!8048 = !DISubroutineType(types: !8049)
!8049 = !{!8050, !5347}
!8050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !700, size: 64)
!8051 = !{!8052}
!8052 = !DILocalVariable(name: "vec_", arg: 1, scope: !8047, file: !34, line: 281, type: !5347)
!8053 = !DILocation(line: 0, scope: !8047)
!8054 = !DILocation(line: 281, column: 1, scope: !8047)
!8055 = distinct !DISubprogram(name: "VEC_basic_block_gc_reserve_exact", scope: !34, file: !34, line: 282, type: !8056, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8058)
!8056 = !DISubroutineType(types: !8057)
!8057 = !{!372, !5337, !372}
!8058 = !{!8059, !8060, !8061}
!8059 = !DILocalVariable(name: "vec_", arg: 1, scope: !8055, file: !34, line: 282, type: !5337)
!8060 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8055, file: !34, line: 282, type: !372)
!8061 = !DILocalVariable(name: "extend", scope: !8055, file: !34, line: 282, type: !372)
!8062 = !DILocation(line: 0, scope: !8055)
!8063 = !DILocation(line: 282, column: 1, scope: !8055)
!8064 = !DILocation(line: 282, column: 1, scope: !8065)
!8065 = distinct !DILexicalBlock(scope: !8055, file: !34, line: 282, column: 1)
!8066 = distinct !DISubprogram(name: "VEC_basic_block_base_space", scope: !34, file: !34, line: 281, type: !8067, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8069)
!8067 = !DISubroutineType(types: !8068)
!8068 = !{!372, !5347, !372}
!8069 = !{!8070, !8071}
!8070 = !DILocalVariable(name: "vec_", arg: 1, scope: !8066, file: !34, line: 281, type: !5347)
!8071 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8066, file: !34, line: 281, type: !372)
!8072 = !DILocation(line: 0, scope: !8066)
!8073 = !DILocation(line: 281, column: 1, scope: !8066)
!8074 = distinct !DISubprogram(name: "VEC_gimple_gc_reserve", scope: !6, file: !6, line: 35, type: !8075, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8077)
!8075 = !DISubroutineType(types: !8076)
!8076 = !{!372, !5830, !372}
!8077 = !{!8078, !8079, !8080}
!8078 = !DILocalVariable(name: "vec_", arg: 1, scope: !8074, file: !6, line: 35, type: !5830)
!8079 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8074, file: !6, line: 35, type: !372)
!8080 = !DILocalVariable(name: "extend", scope: !8074, file: !6, line: 35, type: !372)
!8081 = !DILocation(line: 0, scope: !8074)
!8082 = !DILocation(line: 35, column: 1, scope: !8074)
!8083 = !DILocation(line: 35, column: 1, scope: !8084)
!8084 = distinct !DILexicalBlock(scope: !8074, file: !6, line: 35, column: 1)
!8085 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !6, file: !6, line: 33, type: !8086, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8089)
!8086 = !DISubroutineType(types: !8087)
!8087 = !{!5829, !8088, !379}
!8088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !791, size: 64)
!8089 = !{!8090, !8091, !8092}
!8090 = !DILocalVariable(name: "vec_", arg: 1, scope: !8085, file: !6, line: 33, type: !8088)
!8091 = !DILocalVariable(name: "obj_", arg: 2, scope: !8085, file: !6, line: 33, type: !379)
!8092 = !DILocalVariable(name: "slot_", scope: !8085, file: !6, line: 33, type: !5829)
!8093 = !DILocation(line: 0, scope: !8085)
!8094 = !DILocation(line: 33, column: 1, scope: !8085)
!8095 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !6, file: !6, line: 33, type: !8096, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8098)
!8096 = !DISubroutineType(types: !8097)
!8097 = !{!372, !8088, !372}
!8098 = !{!8099, !8100}
!8099 = !DILocalVariable(name: "vec_", arg: 1, scope: !8095, file: !6, line: 33, type: !8088)
!8100 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8095, file: !6, line: 33, type: !372)
!8101 = !DILocation(line: 0, scope: !8095)
!8102 = !DILocation(line: 33, column: 1, scope: !8095)
!8103 = distinct !DISubprogram(name: "gimple_asm_volatile_p", scope: !6, file: !6, line: 2739, type: !3940, scopeLine: 2740, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8104)
!8104 = !{!8105}
!8105 = !DILocalVariable(name: "gs", arg: 1, scope: !8103, file: !6, line: 2739, type: !3301)
!8106 = !DILocation(line: 0, scope: !8103)
!8107 = !DILocation(line: 2742, column: 22, scope: !8103)
!8108 = !DILocation(line: 2742, column: 10, scope: !8103)
!8109 = !DILocation(line: 2742, column: 3, scope: !8103)
!8110 = distinct !DISubprogram(name: "gimple_expr_type", scope: !6, file: !6, line: 4366, type: !3299, scopeLine: 4367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8111)
!8111 = !{!8112, !8113, !8114}
!8112 = !DILocalVariable(name: "stmt", arg: 1, scope: !8110, file: !6, line: 4366, type: !3301)
!8113 = !DILocalVariable(name: "code", scope: !8110, file: !6, line: 4368, type: !276)
!8114 = !DILocalVariable(name: "type", scope: !8115, file: !6, line: 4372, type: !450)
!8115 = distinct !DILexicalBlock(scope: !8116, file: !6, line: 4371, column: 5)
!8116 = distinct !DILexicalBlock(scope: !8110, file: !6, line: 4370, column: 7)
!8117 = !DILocation(line: 0, scope: !8110)
!8118 = !DILocation(line: 4368, column: 27, scope: !8110)
!8119 = !DILocation(line: 4370, column: 29, scope: !8116)
!8120 = !DILocation(line: 4378, column: 9, scope: !8121)
!8121 = distinct !DILexicalBlock(scope: !8115, file: !6, line: 4377, column: 11)
!8122 = !DILocation(line: 0, scope: !8115)
!8123 = !DILocation(line: 4378, column: 2, scope: !8121)
!8124 = !DILocation(line: 4380, column: 10, scope: !8121)
!8125 = !DILocation(line: 4380, column: 2, scope: !8121)
!8126 = !DILocation(line: 4383, column: 13, scope: !8127)
!8127 = distinct !DILexicalBlock(scope: !8121, file: !6, line: 4381, column: 4)
!8128 = !DILocation(line: 4384, column: 6, scope: !8127)
!8129 = !DILocation(line: 4388, column: 13, scope: !8127)
!8130 = !DILocation(line: 4389, column: 6, scope: !8127)
!8131 = !DILocation(line: 4394, column: 12, scope: !8132)
!8132 = distinct !DILexicalBlock(scope: !8116, file: !6, line: 4393, column: 12)
!8133 = !DILocation(line: 4394, column: 5, scope: !8132)
!8134 = !DILocation(line: 4396, column: 12, scope: !8132)
!8135 = !DILocation(line: 4396, column: 5, scope: !8132)
!8136 = !DILocation(line: 0, scope: !8116)
!8137 = !DILocation(line: 4397, column: 1, scope: !8110)
!8138 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !6, file: !6, line: 1759, type: !3299, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8139)
!8139 = !{!8140}
!8140 = !DILocalVariable(name: "gs", arg: 1, scope: !8138, file: !6, line: 1759, type: !3301)
!8141 = !DILocation(line: 0, scope: !8138)
!8142 = !DILocation(line: 1763, column: 7, scope: !8143)
!8143 = distinct !DILexicalBlock(scope: !8138, file: !6, line: 1763, column: 7)
!8144 = !DILocation(line: 1763, column: 27, scope: !8143)
!8145 = !DILocation(line: 1763, column: 7, scope: !8138)
!8146 = !DILocation(line: 1764, column: 12, scope: !8143)
!8147 = !DILocation(line: 1764, column: 5, scope: !8143)
!8148 = !DILocation(line: 0, scope: !8143)
!8149 = !DILocation(line: 1767, column: 1, scope: !8138)
!8150 = distinct !DISubprogram(name: "gimple_call_return_type", scope: !6, file: !6, line: 1966, type: !3299, scopeLine: 1967, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8151)
!8151 = !{!8152, !8153, !8154}
!8152 = !DILocalVariable(name: "gs", arg: 1, scope: !8150, file: !6, line: 1966, type: !3301)
!8153 = !DILocalVariable(name: "fn", scope: !8150, file: !6, line: 1968, type: !450)
!8154 = !DILocalVariable(name: "type", scope: !8150, file: !6, line: 1969, type: !450)
!8155 = !DILocation(line: 0, scope: !8150)
!8156 = !DILocation(line: 1968, column: 13, scope: !8150)
!8157 = !DILocation(line: 1969, column: 15, scope: !8150)
!8158 = !DILocation(line: 1972, column: 10, scope: !8150)
!8159 = !DILocation(line: 1976, column: 10, scope: !8150)
!8160 = !DILocation(line: 1976, column: 3, scope: !8150)
!8161 = distinct !DISubprogram(name: "iterative_hash_gimple_type", scope: !3, file: !3, line: 3603, type: !8162, scopeLine: 3607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8165)
!8162 = !DISubroutineType(types: !8163)
!8163 = !{!744, !450, !744, !6633, !883, !8164}
!8164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !850, size: 64)
!8165 = !{!8166, !8167, !8168, !8169, !8170, !8171, !8172, !8173, !8174, !8177, !8178, !8181, !8182, !8185}
!8166 = !DILocalVariable(name: "type", arg: 1, scope: !8161, file: !3, line: 3603, type: !450)
!8167 = !DILocalVariable(name: "val", arg: 2, scope: !8161, file: !3, line: 3603, type: !744)
!8168 = !DILocalVariable(name: "sccstack", arg: 3, scope: !8161, file: !3, line: 3604, type: !6633)
!8169 = !DILocalVariable(name: "sccstate", arg: 4, scope: !8161, file: !3, line: 3605, type: !883)
!8170 = !DILocalVariable(name: "sccstate_obstack", arg: 5, scope: !8161, file: !3, line: 3606, type: !8164)
!8171 = !DILocalVariable(name: "v", scope: !8161, file: !3, line: 3608, type: !744)
!8172 = !DILocalVariable(name: "slot", scope: !8161, file: !3, line: 3609, type: !758)
!8173 = !DILocalVariable(name: "state", scope: !8161, file: !3, line: 3610, type: !1567)
!8174 = !DILocalVariable(name: "na", scope: !8175, file: !3, line: 3693, type: !7)
!8175 = distinct !DILexicalBlock(scope: !8176, file: !3, line: 3692, column: 5)
!8176 = distinct !DILexicalBlock(scope: !8161, file: !3, line: 3691, column: 7)
!8177 = !DILocalVariable(name: "p", scope: !8175, file: !3, line: 3694, type: !450)
!8178 = !DILocalVariable(name: "nf", scope: !8179, file: !3, line: 3718, type: !7)
!8179 = distinct !DILexicalBlock(scope: !8180, file: !3, line: 3717, column: 5)
!8180 = distinct !DILexicalBlock(scope: !8161, file: !3, line: 3714, column: 7)
!8181 = !DILocalVariable(name: "f", scope: !8179, file: !3, line: 3719, type: !450)
!8182 = !DILocalVariable(name: "x", scope: !8183, file: !3, line: 3740, type: !450)
!8183 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 3739, column: 5)
!8184 = distinct !DILexicalBlock(scope: !8161, file: !3, line: 3738, column: 7)
!8185 = !DILocalVariable(name: "cstate", scope: !8186, file: !3, line: 3745, type: !1567)
!8186 = distinct !DILexicalBlock(scope: !8183, file: !3, line: 3744, column: 2)
!8187 = !DILocation(line: 0, scope: !8161)
!8188 = !DILocation(line: 3617, column: 11, scope: !8161)
!8189 = !DILocation(line: 3618, column: 34, scope: !8161)
!8190 = !DILocation(line: 3618, column: 4, scope: !8161)
!8191 = !DILocation(line: 3618, column: 40, scope: !8161)
!8192 = !DILocation(line: 3620, column: 3, scope: !8161)
!8193 = !DILocation(line: 3621, column: 31, scope: !8161)
!8194 = !DILocation(line: 3621, column: 10, scope: !8161)
!8195 = !DILocation(line: 3621, column: 17, scope: !8161)
!8196 = !DILocation(line: 3622, column: 10, scope: !8161)
!8197 = !DILocation(line: 3622, column: 14, scope: !8161)
!8198 = !DILocation(line: 3623, column: 10, scope: !8161)
!8199 = !DILocation(line: 3623, column: 22, scope: !8161)
!8200 = !DILocation(line: 3629, column: 33, scope: !8161)
!8201 = !DILocation(line: 3629, column: 7, scope: !8161)
!8202 = !DILocation(line: 3630, column: 33, scope: !8161)
!8203 = !DILocation(line: 3630, column: 7, scope: !8161)
!8204 = !DILocation(line: 3631, column: 33, scope: !8161)
!8205 = !DILocation(line: 3631, column: 7, scope: !8161)
!8206 = !DILocation(line: 3637, column: 7, scope: !8207)
!8207 = distinct !DILexicalBlock(scope: !8161, file: !3, line: 3637, column: 7)
!8208 = !DILocation(line: 3638, column: 7, scope: !8207)
!8209 = !DILocation(line: 3638, column: 10, scope: !8207)
!8210 = !DILocation(line: 3639, column: 7, scope: !8207)
!8211 = !DILocation(line: 3639, column: 10, scope: !8207)
!8212 = !DILocation(line: 3637, column: 7, scope: !8161)
!8213 = !DILocation(line: 3641, column: 37, scope: !8214)
!8214 = distinct !DILexicalBlock(scope: !8207, file: !3, line: 3640, column: 5)
!8215 = !DILocation(line: 3641, column: 11, scope: !8214)
!8216 = !DILocation(line: 3642, column: 37, scope: !8214)
!8217 = !DILocation(line: 3642, column: 11, scope: !8214)
!8218 = !DILocation(line: 3643, column: 37, scope: !8214)
!8219 = !DILocation(line: 3643, column: 11, scope: !8214)
!8220 = !DILocation(line: 3649, column: 7, scope: !8221)
!8221 = distinct !DILexicalBlock(scope: !8161, file: !3, line: 3649, column: 7)
!8222 = !DILocation(line: 3644, column: 5, scope: !8214)
!8223 = !DILocation(line: 3649, column: 7, scope: !8161)
!8224 = !DILocation(line: 3651, column: 11, scope: !8225)
!8225 = distinct !DILexicalBlock(scope: !8226, file: !3, line: 3651, column: 11)
!8226 = distinct !DILexicalBlock(scope: !8221, file: !3, line: 3650, column: 5)
!8227 = !DILocation(line: 3651, column: 11, scope: !8226)
!8228 = !DILocation(line: 3653, column: 34, scope: !8229)
!8229 = distinct !DILexicalBlock(scope: !8225, file: !3, line: 3652, column: 2)
!8230 = !DILocation(line: 3653, column: 8, scope: !8229)
!8231 = !DILocation(line: 3655, column: 9, scope: !8229)
!8232 = !DILocation(line: 3654, column: 8, scope: !8229)
!8233 = !DILocation(line: 3656, column: 2, scope: !8229)
!8234 = !DILocation(line: 3658, column: 6, scope: !8225)
!8235 = !DILocation(line: 3663, column: 7, scope: !8236)
!8236 = distinct !DILexicalBlock(scope: !8161, file: !3, line: 3663, column: 7)
!8237 = !DILocation(line: 3663, column: 24, scope: !8236)
!8238 = !DILocation(line: 3663, column: 7, scope: !8161)
!8239 = !DILocation(line: 3667, column: 11, scope: !8240)
!8240 = distinct !DILexicalBlock(scope: !8241, file: !3, line: 3667, column: 11)
!8241 = distinct !DILexicalBlock(scope: !8236, file: !3, line: 3664, column: 5)
!8242 = !DILocation(line: 3667, column: 36, scope: !8240)
!8243 = !DILocation(line: 3667, column: 33, scope: !8240)
!8244 = !DILocation(line: 3667, column: 11, scope: !8241)
!8245 = !DILocation(line: 3668, column: 6, scope: !8240)
!8246 = !DILocation(line: 3669, column: 36, scope: !8247)
!8247 = distinct !DILexicalBlock(scope: !8241, file: !3, line: 3669, column: 11)
!8248 = !DILocation(line: 3668, column: 2, scope: !8240)
!8249 = !DILocation(line: 3669, column: 11, scope: !8247)
!8250 = !DILocation(line: 3669, column: 33, scope: !8247)
!8251 = !DILocation(line: 3669, column: 11, scope: !8241)
!8252 = !DILocation(line: 3670, column: 6, scope: !8247)
!8253 = !DILocation(line: 3670, column: 2, scope: !8247)
!8254 = !DILocation(line: 0, scope: !8241)
!8255 = !DILocation(line: 3671, column: 37, scope: !8241)
!8256 = !DILocation(line: 3671, column: 11, scope: !8241)
!8257 = !DILocation(line: 3675, column: 7, scope: !8258)
!8258 = distinct !DILexicalBlock(scope: !8161, file: !3, line: 3675, column: 7)
!8259 = !DILocation(line: 3672, column: 5, scope: !8241)
!8260 = !DILocation(line: 3675, column: 24, scope: !8258)
!8261 = !DILocation(line: 3676, column: 7, scope: !8258)
!8262 = !DILocation(line: 3676, column: 10, scope: !8258)
!8263 = !DILocation(line: 3675, column: 7, scope: !8161)
!8264 = !DILocation(line: 3678, column: 37, scope: !8265)
!8265 = distinct !DILexicalBlock(scope: !8258, file: !3, line: 3677, column: 5)
!8266 = !DILocation(line: 3678, column: 11, scope: !8265)
!8267 = !DILocation(line: 3679, column: 18, scope: !8265)
!8268 = !DILocation(line: 3679, column: 11, scope: !8265)
!8269 = !DILocation(line: 3684, column: 7, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8161, file: !3, line: 3684, column: 7)
!8271 = !DILocation(line: 3684, column: 24, scope: !8270)
!8272 = !DILocation(line: 3681, column: 5, scope: !8265)
!8273 = !DILocation(line: 3685, column: 7, scope: !8270)
!8274 = !DILocation(line: 3685, column: 27, scope: !8270)
!8275 = !DILocation(line: 3686, column: 7, scope: !8270)
!8276 = !DILocation(line: 3686, column: 27, scope: !8270)
!8277 = !DILocation(line: 3684, column: 7, scope: !8161)
!8278 = !DILocation(line: 3687, column: 16, scope: !8270)
!8279 = !DILocation(line: 3687, column: 9, scope: !8270)
!8280 = !DILocation(line: 3691, column: 7, scope: !8176)
!8281 = !DILocation(line: 3687, column: 5, scope: !8270)
!8282 = !DILocation(line: 3691, column: 24, scope: !8176)
!8283 = !DILocation(line: 3691, column: 41, scope: !8176)
!8284 = !DILocation(line: 3691, column: 61, scope: !8176)
!8285 = !DILocation(line: 3691, column: 7, scope: !8161)
!8286 = !DILocation(line: 3697, column: 28, scope: !8287)
!8287 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 3697, column: 11)
!8288 = !DILocation(line: 3697, column: 11, scope: !8175)
!8289 = !DILocation(line: 3698, column: 13, scope: !8287)
!8290 = !DILocation(line: 3698, column: 6, scope: !8287)
!8291 = !DILocation(line: 3698, column: 2, scope: !8287)
!8292 = !DILocation(line: 3701, column: 18, scope: !8175)
!8293 = !DILocation(line: 3701, column: 11, scope: !8175)
!8294 = !DILocation(line: 3704, column: 16, scope: !8295)
!8295 = distinct !DILexicalBlock(scope: !8175, file: !3, line: 3704, column: 7)
!8296 = !DILocation(line: 0, scope: !8175)
!8297 = !DILocation(line: 3704, column: 12, scope: !8295)
!8298 = !DILocation(line: 0, scope: !8295)
!8299 = !DILocation(line: 3704, column: 7, scope: !8295)
!8300 = !DILocation(line: 3706, column: 15, scope: !8301)
!8301 = distinct !DILexicalBlock(scope: !8302, file: !3, line: 3705, column: 2)
!8302 = distinct !DILexicalBlock(scope: !8295, file: !3, line: 3704, column: 7)
!8303 = !DILocation(line: 3706, column: 8, scope: !8301)
!8304 = !DILocation(line: 3708, column: 6, scope: !8301)
!8305 = !DILocation(line: 3704, column: 54, scope: !8302)
!8306 = !DILocation(line: 3704, column: 7, scope: !8302)
!8307 = distinct !{!8307, !8299, !8308}
!8308 = !DILocation(line: 3709, column: 2, scope: !8295)
!8309 = !DILocation(line: 3711, column: 11, scope: !8175)
!8310 = !DILocation(line: 3714, column: 7, scope: !8180)
!8311 = !DILocation(line: 3714, column: 24, scope: !8180)
!8312 = !DILocation(line: 3712, column: 5, scope: !8175)
!8313 = !DILocation(line: 3715, column: 7, scope: !8180)
!8314 = !DILocation(line: 3715, column: 27, scope: !8180)
!8315 = !DILocation(line: 3716, column: 7, scope: !8180)
!8316 = !DILocation(line: 3716, column: 27, scope: !8180)
!8317 = !DILocation(line: 3714, column: 7, scope: !8161)
!8318 = !DILocation(line: 3721, column: 32, scope: !8179)
!8319 = !DILocation(line: 3721, column: 11, scope: !8179)
!8320 = !DILocation(line: 3723, column: 16, scope: !8321)
!8321 = distinct !DILexicalBlock(scope: !8179, file: !3, line: 3723, column: 7)
!8322 = !DILocation(line: 0, scope: !8179)
!8323 = !DILocation(line: 3723, column: 12, scope: !8321)
!8324 = !DILocation(line: 0, scope: !8321)
!8325 = !DILocation(line: 3723, column: 7, scope: !8321)
!8326 = !DILocation(line: 3725, column: 29, scope: !8327)
!8327 = distinct !DILexicalBlock(scope: !8328, file: !3, line: 3724, column: 2)
!8328 = distinct !DILexicalBlock(scope: !8321, file: !3, line: 3723, column: 7)
!8329 = !DILocation(line: 3725, column: 8, scope: !8327)
!8330 = !DILocation(line: 3726, column: 15, scope: !8327)
!8331 = !DILocation(line: 3726, column: 8, scope: !8327)
!8332 = !DILocation(line: 3728, column: 6, scope: !8327)
!8333 = !DILocation(line: 3723, column: 51, scope: !8328)
!8334 = !DILocation(line: 3723, column: 7, scope: !8328)
!8335 = distinct !{!8335, !8325, !8336}
!8336 = !DILocation(line: 3729, column: 2, scope: !8321)
!8337 = !DILocation(line: 3731, column: 11, scope: !8179)
!8338 = !DILocation(line: 3732, column: 5, scope: !8179)
!8339 = !DILocation(line: 3735, column: 10, scope: !8161)
!8340 = !DILocation(line: 3735, column: 15, scope: !8161)
!8341 = !DILocation(line: 3738, column: 14, scope: !8184)
!8342 = !DILocation(line: 3738, column: 28, scope: !8184)
!8343 = !DILocation(line: 3738, column: 18, scope: !8184)
!8344 = !DILocation(line: 3738, column: 7, scope: !8161)
!8345 = !DILocation(line: 3743, column: 7, scope: !8183)
!8346 = !DILocation(line: 3746, column: 8, scope: !8186)
!8347 = !DILocation(line: 0, scope: !8183)
!8348 = !DILocation(line: 3747, column: 4, scope: !8186)
!8349 = !DILocation(line: 3748, column: 29, scope: !8186)
!8350 = !DILocation(line: 3748, column: 28, scope: !8186)
!8351 = !DILocation(line: 0, scope: !8186)
!8352 = !DILocation(line: 3749, column: 12, scope: !8186)
!8353 = !DILocation(line: 3749, column: 24, scope: !8186)
!8354 = !DILocation(line: 3750, column: 31, scope: !8186)
!8355 = !DILocation(line: 3750, column: 11, scope: !8186)
!8356 = !DILocation(line: 3751, column: 38, scope: !8186)
!8357 = !DILocation(line: 3751, column: 21, scope: !8186)
!8358 = !DILocation(line: 3751, column: 12, scope: !8186)
!8359 = !DILocation(line: 3751, column: 10, scope: !8186)
!8360 = !DILocation(line: 3753, column: 16, scope: !8183)
!8361 = !DILocation(line: 3752, column: 2, scope: !8186)
!8362 = distinct !{!8362, !8345, !8363}
!8363 = !DILocation(line: 3753, column: 23, scope: !8183)
!8364 = !DILocation(line: 3756, column: 10, scope: !8161)
!8365 = !DILocation(line: 3756, column: 3, scope: !8161)
!8366 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !50, file: !50, line: 184, type: !8367, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8369)
!8367 = !DISubroutineType(types: !8368)
!8368 = !{!908, !6633, !450}
!8369 = !{!8370, !8371}
!8370 = !DILocalVariable(name: "vec_", arg: 1, scope: !8366, file: !50, line: 184, type: !6633)
!8371 = !DILocalVariable(name: "obj_", arg: 2, scope: !8366, file: !50, line: 184, type: !450)
!8372 = !DILocation(line: 0, scope: !8366)
!8373 = !DILocation(line: 184, column: 1, scope: !8366)
!8374 = distinct !DISubprogram(name: "iterative_hash_name", scope: !3, file: !3, line: 3578, type: !8375, scopeLine: 3579, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8377)
!8375 = !DISubroutineType(types: !8376)
!8376 = !{!744, !450, !744}
!8377 = !{!8378, !8379}
!8378 = !DILocalVariable(name: "name", arg: 1, scope: !8374, file: !3, line: 3578, type: !450)
!8379 = !DILocalVariable(name: "v", arg: 2, scope: !8374, file: !3, line: 3578, type: !744)
!8380 = !DILocation(line: 0, scope: !8374)
!8381 = !DILocation(line: 3580, column: 8, scope: !8382)
!8382 = distinct !DILexicalBlock(scope: !8374, file: !3, line: 3580, column: 7)
!8383 = !DILocation(line: 3580, column: 7, scope: !8374)
!8384 = !DILocation(line: 3582, column: 7, scope: !8385)
!8385 = distinct !DILexicalBlock(scope: !8374, file: !3, line: 3582, column: 7)
!8386 = !DILocation(line: 3582, column: 24, scope: !8385)
!8387 = !DILocation(line: 3582, column: 7, scope: !8374)
!8388 = !DILocation(line: 3583, column: 12, scope: !8385)
!8389 = !DILocation(line: 3583, column: 5, scope: !8385)
!8390 = !DILocation(line: 3584, column: 8, scope: !8391)
!8391 = distinct !DILexicalBlock(scope: !8374, file: !3, line: 3584, column: 7)
!8392 = !DILocation(line: 3584, column: 7, scope: !8374)
!8393 = !DILocation(line: 3586, column: 3, scope: !8374)
!8394 = !DILocation(line: 3587, column: 10, scope: !8374)
!8395 = !DILocation(line: 3587, column: 3, scope: !8374)
!8396 = !DILocation(line: 3588, column: 1, scope: !8374)
!8397 = distinct !DISubprogram(name: "visit", scope: !3, file: !3, line: 3535, type: !8398, scopeLine: 3539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8400)
!8398 = !DISubroutineType(types: !8399)
!8399 = !{!744, !450, !1567, !744, !6633, !883, !8164}
!8400 = !{!8401, !8402, !8403, !8404, !8405, !8406, !8407, !8408, !8409}
!8401 = !DILocalVariable(name: "t", arg: 1, scope: !8397, file: !3, line: 3535, type: !450)
!8402 = !DILocalVariable(name: "state", arg: 2, scope: !8397, file: !3, line: 3535, type: !1567)
!8403 = !DILocalVariable(name: "v", arg: 3, scope: !8397, file: !3, line: 3535, type: !744)
!8404 = !DILocalVariable(name: "sccstack", arg: 4, scope: !8397, file: !3, line: 3536, type: !6633)
!8405 = !DILocalVariable(name: "sccstate", arg: 5, scope: !8397, file: !3, line: 3537, type: !883)
!8406 = !DILocalVariable(name: "sccstate_obstack", arg: 6, scope: !8397, file: !3, line: 3538, type: !8164)
!8407 = !DILocalVariable(name: "cstate", scope: !8397, file: !3, line: 3540, type: !1567)
!8408 = !DILocalVariable(name: "slot", scope: !8397, file: !3, line: 3541, type: !758)
!8409 = !DILocalVariable(name: "tem", scope: !8410, file: !3, line: 3552, type: !744)
!8410 = distinct !DILexicalBlock(scope: !8411, file: !3, line: 3551, column: 5)
!8411 = distinct !DILexicalBlock(scope: !8397, file: !3, line: 3550, column: 7)
!8412 = !DILocation(line: 0, scope: !8397)
!8413 = !DILocation(line: 3545, column: 37, scope: !8414)
!8414 = distinct !DILexicalBlock(scope: !8397, file: !3, line: 3545, column: 7)
!8415 = !DILocation(line: 3545, column: 54, scope: !8414)
!8416 = !DILocation(line: 3545, column: 15, scope: !8414)
!8417 = !DILocation(line: 3545, column: 13, scope: !8414)
!8418 = !DILocation(line: 3545, column: 7, scope: !8397)
!8419 = !DILocation(line: 3546, column: 59, scope: !8414)
!8420 = !DILocation(line: 3546, column: 38, scope: !8414)
!8421 = !DILocation(line: 3546, column: 12, scope: !8414)
!8422 = !DILocation(line: 3546, column: 5, scope: !8414)
!8423 = !DILocation(line: 3548, column: 15, scope: !8424)
!8424 = distinct !DILexicalBlock(scope: !8397, file: !3, line: 3548, column: 7)
!8425 = !DILocation(line: 3548, column: 51, scope: !8424)
!8426 = !DILocation(line: 3548, column: 7, scope: !8397)
!8427 = !DILocation(line: 3549, column: 29, scope: !8424)
!8428 = !DILocation(line: 3549, column: 5, scope: !8424)
!8429 = !DILocation(line: 3550, column: 8, scope: !8411)
!8430 = !DILocation(line: 3550, column: 7, scope: !8397)
!8431 = !DILocation(line: 3554, column: 13, scope: !8410)
!8432 = !DILocation(line: 0, scope: !8410)
!8433 = !DILocation(line: 3557, column: 28, scope: !8434)
!8434 = distinct !DILexicalBlock(scope: !8410, file: !3, line: 3556, column: 11)
!8435 = !DILocation(line: 3557, column: 26, scope: !8434)
!8436 = !DILocation(line: 3558, column: 20, scope: !8410)
!8437 = !DILocation(line: 3558, column: 18, scope: !8410)
!8438 = !DILocation(line: 3563, column: 20, scope: !8439)
!8439 = distinct !DILexicalBlock(scope: !8410, file: !3, line: 3563, column: 11)
!8440 = !DILocation(line: 3563, column: 12, scope: !8439)
!8441 = !DILocation(line: 3549, column: 12, scope: !8424)
!8442 = !DILocation(line: 3566, column: 15, scope: !8443)
!8443 = distinct !DILexicalBlock(scope: !8397, file: !3, line: 3566, column: 7)
!8444 = !DILocation(line: 3566, column: 31, scope: !8443)
!8445 = !DILocation(line: 3566, column: 22, scope: !8443)
!8446 = !DILocation(line: 3567, column: 7, scope: !8443)
!8447 = !DILocation(line: 3567, column: 18, scope: !8443)
!8448 = !DILocation(line: 3567, column: 10, scope: !8443)
!8449 = !DILocation(line: 3566, column: 7, scope: !8397)
!8450 = !DILocation(line: 3568, column: 18, scope: !8443)
!8451 = !DILocation(line: 3568, column: 16, scope: !8443)
!8452 = !DILocation(line: 3568, column: 5, scope: !8443)
!8453 = !DILocation(line: 3573, column: 1, scope: !8397)
!8454 = distinct !DISubprogram(name: "VEC_tree_base_pop", scope: !50, file: !50, line: 182, type: !8455, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8457)
!8455 = !DISubroutineType(types: !8456)
!8456 = !{!450, !6623}
!8457 = !{!8458, !8459}
!8458 = !DILocalVariable(name: "vec_", arg: 1, scope: !8454, file: !50, line: 182, type: !6623)
!8459 = !DILocalVariable(name: "obj_", scope: !8454, file: !50, line: 182, type: !450)
!8460 = !DILocation(line: 0, scope: !8454)
!8461 = !DILocation(line: 182, column: 1, scope: !8454)
!8462 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !50, file: !50, line: 184, type: !8463, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8465)
!8463 = !DISubroutineType(types: !8464)
!8464 = !{!372, !6633, !372}
!8465 = !{!8466, !8467, !8468}
!8466 = !DILocalVariable(name: "vec_", arg: 1, scope: !8462, file: !50, line: 184, type: !6633)
!8467 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8462, file: !50, line: 184, type: !372)
!8468 = !DILocalVariable(name: "extend", scope: !8462, file: !50, line: 184, type: !372)
!8469 = !DILocation(line: 0, scope: !8462)
!8470 = !DILocation(line: 184, column: 1, scope: !8462)
!8471 = !DILocation(line: 184, column: 1, scope: !8472)
!8472 = distinct !DILexicalBlock(scope: !8462, file: !50, line: 184, column: 1)
!8473 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !50, file: !50, line: 182, type: !8474, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8476)
!8474 = !DISubroutineType(types: !8475)
!8475 = !{!372, !6623, !372}
!8476 = !{!8477, !8478}
!8477 = !DILocalVariable(name: "vec_", arg: 1, scope: !8473, file: !50, line: 182, type: !6623)
!8478 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8473, file: !50, line: 182, type: !372)
!8479 = !DILocation(line: 0, scope: !8473)
!8480 = !DILocation(line: 182, column: 1, scope: !8473)
!8481 = distinct !DISubprogram(name: "gimple_types_compatible_p", scope: !3, file: !3, line: 3164, type: !8482, scopeLine: 3165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8484)
!8482 = !DISubroutineType(types: !8483)
!8483 = !{!372, !450, !450}
!8484 = !{!8485, !8486, !8487, !8488, !8492, !8493, !8498, !8499, !8500, !8501, !8506, !8507, !8509, !8510, !8511, !8512, !8513, !8514, !8516, !8517, !8521, !8522, !8524, !8525, !8526}
!8485 = !DILocalVariable(name: "t1", arg: 1, scope: !8481, file: !3, line: 3164, type: !450)
!8486 = !DILocalVariable(name: "t2", arg: 2, scope: !8481, file: !3, line: 3164, type: !450)
!8487 = !DILocalVariable(name: "p", scope: !8481, file: !3, line: 3166, type: !1575)
!8488 = !DILocalVariable(name: "i1", scope: !8489, file: !3, line: 3266, type: !450)
!8489 = distinct !DILexicalBlock(scope: !8490, file: !3, line: 3265, column: 2)
!8490 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 3260, column: 11)
!8491 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3256, column: 5)
!8492 = !DILocalVariable(name: "i2", scope: !8489, file: !3, line: 3267, type: !450)
!8493 = !DILocalVariable(name: "min1", scope: !8494, file: !3, line: 3284, type: !450)
!8494 = distinct !DILexicalBlock(scope: !8495, file: !3, line: 3283, column: 6)
!8495 = distinct !DILexicalBlock(scope: !8496, file: !3, line: 3277, column: 13)
!8496 = distinct !DILexicalBlock(scope: !8497, file: !3, line: 3273, column: 13)
!8497 = distinct !DILexicalBlock(scope: !8489, file: !3, line: 3271, column: 8)
!8498 = !DILocalVariable(name: "min2", scope: !8494, file: !3, line: 3285, type: !450)
!8499 = !DILocalVariable(name: "max1", scope: !8494, file: !3, line: 3286, type: !450)
!8500 = !DILocalVariable(name: "max2", scope: !8494, file: !3, line: 3287, type: !450)
!8501 = !DILocalVariable(name: "parms1", scope: !8502, file: !3, line: 3322, type: !450)
!8502 = distinct !DILexicalBlock(scope: !8503, file: !3, line: 3321, column: 6)
!8503 = distinct !DILexicalBlock(scope: !8504, file: !3, line: 3318, column: 8)
!8504 = distinct !DILexicalBlock(scope: !8505, file: !3, line: 3314, column: 2)
!8505 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 3311, column: 11)
!8506 = !DILocalVariable(name: "parms2", scope: !8502, file: !3, line: 3322, type: !450)
!8507 = !DILocalVariable(name: "min1", scope: !8508, file: !3, line: 3387, type: !450)
!8508 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 3386, column: 7)
!8509 = !DILocalVariable(name: "max1", scope: !8508, file: !3, line: 3388, type: !450)
!8510 = !DILocalVariable(name: "min2", scope: !8508, file: !3, line: 3389, type: !450)
!8511 = !DILocalVariable(name: "max2", scope: !8508, file: !3, line: 3390, type: !450)
!8512 = !DILocalVariable(name: "min_equal_p", scope: !8508, file: !3, line: 3391, type: !371)
!8513 = !DILocalVariable(name: "max_equal_p", scope: !8508, file: !3, line: 3392, type: !371)
!8514 = !DILocalVariable(name: "v1", scope: !8515, file: !3, line: 3422, type: !450)
!8515 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 3415, column: 7)
!8516 = !DILocalVariable(name: "v2", scope: !8515, file: !3, line: 3422, type: !450)
!8517 = !DILocalVariable(name: "c1", scope: !8518, file: !3, line: 3432, type: !450)
!8518 = distinct !DILexicalBlock(scope: !8519, file: !3, line: 3431, column: 4)
!8519 = distinct !DILexicalBlock(scope: !8520, file: !3, line: 3428, column: 2)
!8520 = distinct !DILexicalBlock(scope: !8515, file: !3, line: 3428, column: 2)
!8521 = !DILocalVariable(name: "c2", scope: !8518, file: !3, line: 3433, type: !450)
!8522 = !DILocalVariable(name: "f1", scope: !8523, file: !3, line: 3457, type: !450)
!8523 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 3456, column: 7)
!8524 = !DILocalVariable(name: "f2", scope: !8523, file: !3, line: 3457, type: !450)
!8525 = !DILabel(scope: !8481, name: "different_types", file: !3, line: 3497)
!8526 = !DILabel(scope: !8481, name: "same_types", file: !3, line: 3502)
!8527 = !DILocation(line: 3218, column: 9, scope: !8528)
!8528 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 3216, column: 11)
!8529 = distinct !DILexicalBlock(scope: !8530, file: !3, line: 3196, column: 5)
!8530 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3190, column: 7)
!8531 = !DILocation(line: 0, scope: !8481)
!8532 = !DILocation(line: 3169, column: 10, scope: !8533)
!8533 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3169, column: 7)
!8534 = !DILocation(line: 3169, column: 7, scope: !8481)
!8535 = !DILocation(line: 3173, column: 10, scope: !8536)
!8536 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3173, column: 7)
!8537 = !DILocation(line: 3173, column: 29, scope: !8536)
!8538 = !DILocation(line: 3173, column: 23, scope: !8536)
!8539 = !DILocation(line: 3177, column: 7, scope: !8540)
!8540 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3177, column: 7)
!8541 = !DILocation(line: 3177, column: 25, scope: !8540)
!8542 = !DILocation(line: 3177, column: 22, scope: !8540)
!8543 = !DILocation(line: 3177, column: 7, scope: !8481)
!8544 = !DILocation(line: 3181, column: 7, scope: !8545)
!8545 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3181, column: 7)
!8546 = !DILocation(line: 3181, column: 26, scope: !8545)
!8547 = !DILocation(line: 3181, column: 23, scope: !8545)
!8548 = !DILocation(line: 3181, column: 7, scope: !8481)
!8549 = !DILocation(line: 3185, column: 22, scope: !8550)
!8550 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3185, column: 7)
!8551 = !DILocation(line: 3185, column: 7, scope: !8481)
!8552 = !DILocation(line: 3190, column: 7, scope: !8530)
!8553 = !DILocation(line: 3191, column: 7, scope: !8530)
!8554 = !DILocation(line: 3191, column: 10, scope: !8530)
!8555 = !DILocation(line: 3192, column: 7, scope: !8530)
!8556 = !DILocation(line: 3192, column: 10, scope: !8530)
!8557 = !DILocation(line: 3193, column: 7, scope: !8530)
!8558 = !DILocation(line: 3193, column: 25, scope: !8530)
!8559 = !DILocation(line: 3194, column: 7, scope: !8530)
!8560 = !DILocation(line: 3194, column: 25, scope: !8530)
!8561 = !DILocation(line: 3195, column: 7, scope: !8530)
!8562 = !DILocation(line: 3195, column: 25, scope: !8530)
!8563 = !DILocation(line: 3190, column: 7, scope: !8481)
!8564 = !DILocation(line: 3199, column: 11, scope: !8565)
!8565 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 3199, column: 11)
!8566 = !DILocation(line: 3199, column: 30, scope: !8565)
!8567 = !DILocation(line: 3199, column: 27, scope: !8565)
!8568 = !DILocation(line: 3200, column: 4, scope: !8565)
!8569 = !DILocation(line: 3200, column: 27, scope: !8565)
!8570 = !DILocation(line: 3201, column: 4, scope: !8565)
!8571 = !DILocation(line: 3201, column: 7, scope: !8565)
!8572 = !DILocation(line: 3201, column: 25, scope: !8565)
!8573 = !DILocation(line: 3201, column: 22, scope: !8565)
!8574 = !DILocation(line: 3202, column: 4, scope: !8565)
!8575 = !DILocation(line: 3202, column: 7, scope: !8565)
!8576 = !DILocation(line: 3202, column: 29, scope: !8565)
!8577 = !DILocation(line: 3202, column: 26, scope: !8565)
!8578 = !DILocation(line: 3199, column: 11, scope: !8529)
!8579 = !DILocation(line: 3205, column: 26, scope: !8580)
!8580 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 3205, column: 11)
!8581 = !DILocation(line: 3206, column: 4, scope: !8580)
!8582 = !DILocation(line: 3206, column: 8, scope: !8580)
!8583 = !DILocation(line: 3206, column: 33, scope: !8580)
!8584 = !DILocation(line: 3206, column: 30, scope: !8580)
!8585 = !DILocation(line: 3207, column: 8, scope: !8580)
!8586 = !DILocation(line: 3207, column: 33, scope: !8580)
!8587 = !DILocation(line: 3205, column: 11, scope: !8529)
!8588 = !DILocation(line: 3211, column: 11, scope: !8589)
!8589 = distinct !DILexicalBlock(scope: !8529, file: !3, line: 3211, column: 11)
!8590 = !DILocation(line: 3212, column: 4, scope: !8589)
!8591 = !DILocation(line: 3212, column: 7, scope: !8589)
!8592 = !DILocation(line: 3211, column: 11, scope: !8529)
!8593 = !DILocation(line: 3216, column: 26, scope: !8528)
!8594 = !DILocation(line: 3217, column: 4, scope: !8528)
!8595 = !DILocation(line: 3217, column: 22, scope: !8528)
!8596 = !DILocation(line: 3216, column: 11, scope: !8529)
!8597 = !DILocation(line: 3218, column: 36, scope: !8528)
!8598 = !DILocation(line: 3218, column: 52, scope: !8528)
!8599 = !DILocation(line: 3226, column: 25, scope: !8600)
!8600 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3226, column: 7)
!8601 = !DILocation(line: 3226, column: 7, scope: !8600)
!8602 = !DILocation(line: 3226, column: 50, scope: !8600)
!8603 = !DILocation(line: 3226, column: 32, scope: !8600)
!8604 = !DILocation(line: 3226, column: 29, scope: !8600)
!8605 = !DILocation(line: 3226, column: 7, scope: !8481)
!8606 = !DILocation(line: 3231, column: 7, scope: !8481)
!8607 = !DILocation(line: 3232, column: 10, scope: !8608)
!8608 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3232, column: 7)
!8609 = !DILocation(line: 3232, column: 17, scope: !8608)
!8610 = !DILocation(line: 3232, column: 22, scope: !8608)
!8611 = !DILocation(line: 3232, column: 35, scope: !8608)
!8612 = !DILocation(line: 3232, column: 7, scope: !8481)
!8613 = !DILocation(line: 3236, column: 24, scope: !8614)
!8614 = distinct !DILexicalBlock(scope: !8608, file: !3, line: 3233, column: 5)
!8615 = !DILocation(line: 3236, column: 7, scope: !8614)
!8616 = !DILocation(line: 3238, column: 22, scope: !8617)
!8617 = distinct !DILexicalBlock(scope: !8608, file: !3, line: 3238, column: 12)
!8618 = !DILocation(line: 3238, column: 12, scope: !8608)
!8619 = !DILocation(line: 3245, column: 3, scope: !8481)
!8620 = !DILocation(line: 3248, column: 13, scope: !8481)
!8621 = !DILocation(line: 3251, column: 30, scope: !8622)
!8622 = distinct !DILexicalBlock(scope: !8481, file: !3, line: 3251, column: 7)
!8623 = !DILocation(line: 3251, column: 52, scope: !8622)
!8624 = !DILocation(line: 3251, column: 8, scope: !8622)
!8625 = !DILocation(line: 3251, column: 7, scope: !8481)
!8626 = !DILocation(line: 3255, column: 11, scope: !8481)
!8627 = !DILocation(line: 3255, column: 3, scope: !8481)
!8628 = !DILocation(line: 3260, column: 39, scope: !8490)
!8629 = !DILocation(line: 3260, column: 55, scope: !8490)
!8630 = !DILocation(line: 3260, column: 12, scope: !8490)
!8631 = !DILocation(line: 3261, column: 4, scope: !8490)
!8632 = !DILocation(line: 3261, column: 7, scope: !8490)
!8633 = !DILocation(line: 3261, column: 32, scope: !8490)
!8634 = !DILocation(line: 3261, column: 29, scope: !8490)
!8635 = !DILocation(line: 3262, column: 4, scope: !8490)
!8636 = !DILocation(line: 3262, column: 38, scope: !8490)
!8637 = !DILocation(line: 3260, column: 11, scope: !8491)
!8638 = !DILocation(line: 3266, column: 14, scope: !8489)
!8639 = !DILocation(line: 0, scope: !8489)
!8640 = !DILocation(line: 3267, column: 14, scope: !8489)
!8641 = !DILocation(line: 3271, column: 11, scope: !8497)
!8642 = !DILocation(line: 3271, column: 30, scope: !8497)
!8643 = !DILocation(line: 3271, column: 24, scope: !8497)
!8644 = !DILocation(line: 3273, column: 29, scope: !8496)
!8645 = !DILocation(line: 3277, column: 15, scope: !8495)
!8646 = !DILocation(line: 3277, column: 30, scope: !8495)
!8647 = !DILocation(line: 3277, column: 42, scope: !8495)
!8648 = !DILocation(line: 3277, column: 57, scope: !8495)
!8649 = !DILocation(line: 3277, column: 39, scope: !8495)
!8650 = !DILocation(line: 3278, column: 6, scope: !8495)
!8651 = !DILocation(line: 3278, column: 10, scope: !8495)
!8652 = !DILocation(line: 3279, column: 10, scope: !8495)
!8653 = !DILocation(line: 3279, column: 13, scope: !8495)
!8654 = !DILocation(line: 3280, column: 10, scope: !8495)
!8655 = !DILocation(line: 3280, column: 14, scope: !8495)
!8656 = !DILocation(line: 3277, column: 13, scope: !8496)
!8657 = !DILocation(line: 3284, column: 20, scope: !8494)
!8658 = !DILocation(line: 0, scope: !8494)
!8659 = !DILocation(line: 3285, column: 20, scope: !8494)
!8660 = !DILocation(line: 3286, column: 20, scope: !8494)
!8661 = !DILocation(line: 3287, column: 20, scope: !8494)
!8662 = !DILocation(line: 3290, column: 18, scope: !8663)
!8663 = distinct !DILexicalBlock(scope: !8494, file: !3, line: 3290, column: 12)
!8664 = !DILocation(line: 3291, column: 6, scope: !8663)
!8665 = !DILocation(line: 3291, column: 10, scope: !8663)
!8666 = !DILocation(line: 3291, column: 18, scope: !8663)
!8667 = !DILocation(line: 3291, column: 15, scope: !8663)
!8668 = !DILocation(line: 3291, column: 26, scope: !8663)
!8669 = !DILocation(line: 3292, column: 5, scope: !8663)
!8670 = !DILocation(line: 3292, column: 14, scope: !8663)
!8671 = !DILocation(line: 3293, column: 9, scope: !8663)
!8672 = !DILocation(line: 3293, column: 13, scope: !8663)
!8673 = !DILocation(line: 3293, column: 21, scope: !8663)
!8674 = !DILocation(line: 3293, column: 18, scope: !8663)
!8675 = !DILocation(line: 3293, column: 29, scope: !8663)
!8676 = !DILocation(line: 3290, column: 12, scope: !8494)
!8677 = !DILocation(line: 3296, column: 3, scope: !8663)
!8678 = !DILocation(line: 3302, column: 39, scope: !8679)
!8679 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 3302, column: 11)
!8680 = !DILocation(line: 3303, column: 6, scope: !8679)
!8681 = !DILocation(line: 3302, column: 12, scope: !8679)
!8682 = !DILocation(line: 3302, column: 11, scope: !8491)
!8683 = !DILocation(line: 3311, column: 39, scope: !8505)
!8684 = !DILocation(line: 3311, column: 55, scope: !8505)
!8685 = !DILocation(line: 3311, column: 12, scope: !8505)
!8686 = !DILocation(line: 3311, column: 11, scope: !8491)
!8687 = !DILocation(line: 3315, column: 17, scope: !8688)
!8688 = distinct !DILexicalBlock(scope: !8504, file: !3, line: 3315, column: 8)
!8689 = !DILocation(line: 3315, column: 9, scope: !8688)
!8690 = !DILocation(line: 3315, column: 8, scope: !8504)
!8691 = !DILocation(line: 3318, column: 8, scope: !8503)
!8692 = !DILocation(line: 3318, column: 31, scope: !8503)
!8693 = !DILocation(line: 3318, column: 28, scope: !8503)
!8694 = !DILocation(line: 3318, column: 8, scope: !8504)
!8695 = !DILocation(line: 3324, column: 13, scope: !8696)
!8696 = distinct !DILexicalBlock(scope: !8502, file: !3, line: 3324, column: 8)
!8697 = !DILocation(line: 0, scope: !8696)
!8698 = !DILocation(line: 0, scope: !8502)
!8699 = !DILocation(line: 3325, column: 6, scope: !8700)
!8700 = distinct !DILexicalBlock(scope: !8696, file: !3, line: 3324, column: 8)
!8701 = !DILocation(line: 3325, column: 13, scope: !8700)
!8702 = !DILocation(line: 3324, column: 8, scope: !8696)
!8703 = !DILocation(line: 3328, column: 37, scope: !8704)
!8704 = distinct !DILexicalBlock(scope: !8705, file: !3, line: 3328, column: 9)
!8705 = distinct !DILexicalBlock(scope: !8700, file: !3, line: 3327, column: 3)
!8706 = !DILocation(line: 3329, column: 11, scope: !8704)
!8707 = !DILocation(line: 3328, column: 10, scope: !8704)
!8708 = !DILocation(line: 3328, column: 9, scope: !8705)
!8709 = !DILocation(line: 3326, column: 15, scope: !8700)
!8710 = !DILocation(line: 3326, column: 45, scope: !8700)
!8711 = !DILocation(line: 3324, column: 8, scope: !8700)
!8712 = distinct !{!8712, !8702, !8713}
!8713 = !DILocation(line: 3331, column: 3, scope: !8696)
!8714 = !DILocation(line: 3333, column: 19, scope: !8715)
!8715 = distinct !DILexicalBlock(scope: !8502, file: !3, line: 3333, column: 12)
!8716 = !DILocation(line: 3342, column: 34, scope: !8717)
!8717 = distinct !DILexicalBlock(scope: !8718, file: !3, line: 3342, column: 6)
!8718 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 3341, column: 7)
!8719 = !DILocation(line: 3342, column: 50, scope: !8717)
!8720 = !DILocation(line: 3342, column: 7, scope: !8717)
!8721 = !DILocation(line: 3343, column: 6, scope: !8717)
!8722 = !DILocation(line: 3343, column: 37, scope: !8717)
!8723 = !DILocation(line: 3344, column: 9, scope: !8717)
!8724 = !DILocation(line: 3343, column: 10, scope: !8717)
!8725 = !DILocation(line: 3342, column: 6, scope: !8718)
!8726 = !DILocation(line: 3355, column: 37, scope: !8727)
!8727 = distinct !DILexicalBlock(scope: !8728, file: !3, line: 3355, column: 6)
!8728 = distinct !DILexicalBlock(scope: !8491, file: !3, line: 3352, column: 7)
!8729 = !DILocation(line: 3355, column: 34, scope: !8727)
!8730 = !DILocation(line: 3355, column: 6, scope: !8728)
!8731 = !DILocation(line: 3360, column: 6, scope: !8732)
!8732 = distinct !DILexicalBlock(scope: !8728, file: !3, line: 3360, column: 6)
!8733 = !DILocation(line: 3360, column: 36, scope: !8732)
!8734 = !DILocation(line: 3360, column: 33, scope: !8732)
!8735 = !DILocation(line: 3361, column: 6, scope: !8732)
!8736 = !DILocation(line: 3361, column: 9, scope: !8732)
!8737 = !DILocation(line: 3362, column: 6, scope: !8732)
!8738 = !DILocation(line: 3362, column: 11, scope: !8732)
!8739 = !DILocation(line: 3363, column: 3, scope: !8732)
!8740 = !DILocation(line: 3363, column: 7, scope: !8732)
!8741 = !DILocation(line: 3364, column: 6, scope: !8732)
!8742 = !DILocation(line: 3364, column: 31, scope: !8732)
!8743 = !DILocation(line: 3365, column: 10, scope: !8732)
!8744 = !DILocation(line: 3364, column: 9, scope: !8732)
!8745 = !DILocation(line: 3360, column: 6, scope: !8728)
!8746 = !DILocation(line: 3378, column: 33, scope: !8747)
!8747 = distinct !DILexicalBlock(scope: !8728, file: !3, line: 3378, column: 6)
!8748 = !DILocation(line: 3378, column: 49, scope: !8747)
!8749 = !DILocation(line: 3369, column: 10, scope: !8750)
!8750 = distinct !DILexicalBlock(scope: !8751, file: !3, line: 3369, column: 10)
!8751 = distinct !DILexicalBlock(scope: !8732, file: !3, line: 3366, column: 4)
!8752 = !DILocation(line: 3369, column: 10, scope: !8751)
!8753 = !DILocation(line: 3370, column: 23, scope: !8750)
!8754 = !DILocation(line: 3370, column: 8, scope: !8750)
!8755 = !DILocation(line: 3372, column: 25, scope: !8750)
!8756 = !DILocation(line: 3372, column: 23, scope: !8750)
!8757 = !DILocation(line: 3378, column: 6, scope: !8747)
!8758 = !DILocation(line: 3378, column: 6, scope: !8728)
!8759 = !DILocation(line: 3387, column: 14, scope: !8508)
!8760 = !DILocation(line: 0, scope: !8508)
!8761 = !DILocation(line: 3388, column: 14, scope: !8508)
!8762 = !DILocation(line: 3389, column: 14, scope: !8508)
!8763 = !DILocation(line: 3390, column: 14, scope: !8508)
!8764 = !DILocation(line: 3396, column: 11, scope: !8765)
!8765 = distinct !DILexicalBlock(scope: !8508, file: !3, line: 3396, column: 6)
!8766 = !DILocation(line: 3396, column: 32, scope: !8765)
!8767 = !DILocation(line: 3396, column: 24, scope: !8765)
!8768 = !DILocation(line: 3398, column: 11, scope: !8769)
!8769 = distinct !DILexicalBlock(scope: !8765, file: !3, line: 3398, column: 11)
!8770 = !DILocation(line: 3398, column: 19, scope: !8769)
!8771 = !DILocation(line: 3398, column: 16, scope: !8769)
!8772 = !DILocation(line: 3398, column: 27, scope: !8769)
!8773 = !DILocation(line: 3398, column: 11, scope: !8765)
!8774 = !DILocation(line: 0, scope: !8765)
!8775 = !DILocation(line: 3403, column: 11, scope: !8776)
!8776 = distinct !DILexicalBlock(scope: !8508, file: !3, line: 3403, column: 6)
!8777 = !DILocation(line: 3403, column: 32, scope: !8776)
!8778 = !DILocation(line: 3403, column: 24, scope: !8776)
!8779 = !DILocation(line: 3405, column: 11, scope: !8780)
!8780 = distinct !DILexicalBlock(scope: !8776, file: !3, line: 3405, column: 11)
!8781 = !DILocation(line: 3405, column: 19, scope: !8780)
!8782 = !DILocation(line: 3405, column: 16, scope: !8780)
!8783 = !DILocation(line: 3405, column: 27, scope: !8780)
!8784 = !DILocation(line: 3405, column: 11, scope: !8776)
!8785 = !DILocation(line: 3408, column: 7, scope: !8786)
!8786 = distinct !DILexicalBlock(scope: !8508, file: !3, line: 3408, column: 6)
!8787 = !DILocation(line: 3408, column: 19, scope: !8786)
!8788 = !DILocation(line: 3425, column: 6, scope: !8789)
!8789 = distinct !DILexicalBlock(scope: !8515, file: !3, line: 3425, column: 6)
!8790 = !DILocation(line: 3425, column: 26, scope: !8789)
!8791 = !DILocation(line: 3425, column: 23, scope: !8789)
!8792 = !DILocation(line: 3425, column: 6, scope: !8515)
!8793 = !DILocation(line: 3428, column: 7, scope: !8520)
!8794 = !DILocation(line: 0, scope: !8520)
!8795 = !DILocation(line: 0, scope: !8515)
!8796 = !DILocation(line: 3429, column: 7, scope: !8519)
!8797 = !DILocation(line: 3429, column: 10, scope: !8519)
!8798 = !DILocation(line: 3428, column: 2, scope: !8520)
!8799 = !DILocation(line: 3432, column: 16, scope: !8518)
!8800 = !DILocation(line: 0, scope: !8518)
!8801 = !DILocation(line: 3433, column: 16, scope: !8518)
!8802 = !DILocation(line: 3435, column: 10, scope: !8803)
!8803 = distinct !DILexicalBlock(scope: !8518, file: !3, line: 3435, column: 10)
!8804 = !DILocation(line: 3435, column: 25, scope: !8803)
!8805 = !DILocation(line: 3435, column: 10, scope: !8518)
!8806 = !DILocation(line: 3436, column: 13, scope: !8803)
!8807 = !DILocation(line: 3436, column: 8, scope: !8803)
!8808 = !DILocation(line: 3438, column: 10, scope: !8809)
!8809 = distinct !DILexicalBlock(scope: !8518, file: !3, line: 3438, column: 10)
!8810 = !DILocation(line: 3438, column: 25, scope: !8809)
!8811 = !DILocation(line: 3438, column: 10, scope: !8518)
!8812 = !DILocation(line: 3439, column: 13, scope: !8809)
!8813 = !DILocation(line: 3439, column: 8, scope: !8809)
!8814 = !DILocation(line: 3441, column: 10, scope: !8815)
!8815 = distinct !DILexicalBlock(scope: !8518, file: !3, line: 3441, column: 10)
!8816 = !DILocation(line: 3441, column: 38, scope: !8815)
!8817 = !DILocation(line: 3430, column: 12, scope: !8519)
!8818 = !DILocation(line: 3430, column: 34, scope: !8519)
!8819 = !DILocation(line: 3428, column: 2, scope: !8519)
!8820 = distinct !{!8820, !8798, !8821}
!8821 = !DILocation(line: 3443, column: 4, scope: !8520)
!8822 = !DILocation(line: 3447, column: 9, scope: !8823)
!8823 = distinct !DILexicalBlock(scope: !8515, file: !3, line: 3447, column: 6)
!8824 = !DILocation(line: 3461, column: 6, scope: !8825)
!8825 = distinct !DILexicalBlock(scope: !8523, file: !3, line: 3461, column: 6)
!8826 = !DILocation(line: 3462, column: 9, scope: !8825)
!8827 = !DILocation(line: 3462, column: 6, scope: !8825)
!8828 = !DILocation(line: 3461, column: 6, scope: !8523)
!8829 = !DILocation(line: 3466, column: 29, scope: !8830)
!8830 = distinct !DILexicalBlock(scope: !8523, file: !3, line: 3466, column: 6)
!8831 = !DILocation(line: 3467, column: 8, scope: !8830)
!8832 = !DILocation(line: 3466, column: 7, scope: !8830)
!8833 = !DILocation(line: 3466, column: 6, scope: !8523)
!8834 = !DILocation(line: 3471, column: 12, scope: !8835)
!8835 = distinct !DILexicalBlock(scope: !8523, file: !3, line: 3471, column: 2)
!8836 = !DILocation(line: 3471, column: 35, scope: !8835)
!8837 = !DILocation(line: 3471, column: 7, scope: !8835)
!8838 = !DILocation(line: 0, scope: !8835)
!8839 = !DILocation(line: 0, scope: !8523)
!8840 = !DILocation(line: 3472, column: 7, scope: !8841)
!8841 = distinct !DILexicalBlock(scope: !8835, file: !3, line: 3471, column: 2)
!8842 = !DILocation(line: 3472, column: 10, scope: !8841)
!8843 = !DILocation(line: 3471, column: 2, scope: !8835)
!8844 = !DILocation(line: 3476, column: 10, scope: !8845)
!8845 = distinct !DILexicalBlock(scope: !8846, file: !3, line: 3476, column: 10)
!8846 = distinct !DILexicalBlock(scope: !8841, file: !3, line: 3474, column: 4)
!8847 = !DILocation(line: 3476, column: 28, scope: !8845)
!8848 = !DILocation(line: 3476, column: 25, scope: !8845)
!8849 = !DILocation(line: 3477, column: 3, scope: !8845)
!8850 = !DILocation(line: 3477, column: 6, scope: !8845)
!8851 = !DILocation(line: 3477, column: 36, scope: !8845)
!8852 = !DILocation(line: 3477, column: 33, scope: !8845)
!8853 = !DILocation(line: 3478, column: 3, scope: !8845)
!8854 = !DILocation(line: 3478, column: 7, scope: !8845)
!8855 = !DILocation(line: 3479, column: 3, scope: !8845)
!8856 = !DILocation(line: 3479, column: 34, scope: !8845)
!8857 = !DILocation(line: 3480, column: 13, scope: !8845)
!8858 = !DILocation(line: 3479, column: 7, scope: !8845)
!8859 = !DILocation(line: 3476, column: 10, scope: !8846)
!8860 = !DILocation(line: 3473, column: 12, scope: !8841)
!8861 = !DILocation(line: 3473, column: 34, scope: !8841)
!8862 = !DILocation(line: 3471, column: 2, scope: !8841)
!8863 = distinct !{!8863, !8843, !8864}
!8864 = !DILocation(line: 3482, column: 4, scope: !8835)
!8865 = !DILocation(line: 3486, column: 9, scope: !8866)
!8866 = distinct !DILexicalBlock(scope: !8523, file: !3, line: 3486, column: 6)
!8867 = !DILocation(line: 3493, column: 7, scope: !8491)
!8868 = !DILocation(line: 3494, column: 5, scope: !8491)
!8869 = !DILocation(line: 3497, column: 1, scope: !8481)
!8870 = !DILocation(line: 3498, column: 13, scope: !8481)
!8871 = !DILocation(line: 3499, column: 3, scope: !8481)
!8872 = !DILocation(line: 3502, column: 1, scope: !8481)
!8873 = !DILocation(line: 3503, column: 13, scope: !8481)
!8874 = !DILocation(line: 3504, column: 3, scope: !8481)
!8875 = !DILocation(line: 3505, column: 1, scope: !8481)
!8876 = distinct !DISubprogram(name: "lookup_type_pair", scope: !3, file: !3, line: 3055, type: !8877, scopeLine: 3056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8880)
!8877 = !DISubroutineType(types: !8878)
!8878 = !{!1575, !450, !450, !8879, !8164}
!8879 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !734, size: 64)
!8880 = !{!8881, !8882, !8883, !8884, !8885, !8886, !8887}
!8881 = !DILocalVariable(name: "t1", arg: 1, scope: !8876, file: !3, line: 3055, type: !450)
!8882 = !DILocalVariable(name: "t2", arg: 2, scope: !8876, file: !3, line: 3055, type: !450)
!8883 = !DILocalVariable(name: "visited_p", arg: 3, scope: !8876, file: !3, line: 3055, type: !8879)
!8884 = !DILocalVariable(name: "ob_p", arg: 4, scope: !8876, file: !3, line: 3055, type: !8164)
!8885 = !DILocalVariable(name: "pair", scope: !8876, file: !3, line: 3057, type: !1577)
!8886 = !DILocalVariable(name: "p", scope: !8876, file: !3, line: 3058, type: !1575)
!8887 = !DILocalVariable(name: "slot", scope: !8876, file: !3, line: 3059, type: !758)
!8888 = !DILocation(line: 0, scope: !8876)
!8889 = !DILocation(line: 3057, column: 3, scope: !8876)
!8890 = !DILocation(line: 3061, column: 7, scope: !8891)
!8891 = distinct !DILexicalBlock(scope: !8876, file: !3, line: 3061, column: 7)
!8892 = !DILocation(line: 3061, column: 18, scope: !8891)
!8893 = !DILocation(line: 3061, column: 7, scope: !8876)
!8894 = !DILocation(line: 3063, column: 20, scope: !8895)
!8895 = distinct !DILexicalBlock(scope: !8891, file: !3, line: 3062, column: 5)
!8896 = !DILocation(line: 3063, column: 18, scope: !8895)
!8897 = !DILocation(line: 3064, column: 7, scope: !8895)
!8898 = !DILocation(line: 3069, column: 26, scope: !8876)
!8899 = !DILocation(line: 3065, column: 5, scope: !8895)
!8900 = !DILocation(line: 3067, column: 15, scope: !8876)
!8901 = !DILocation(line: 3067, column: 8, scope: !8876)
!8902 = !DILocation(line: 3067, column: 13, scope: !8876)
!8903 = !DILocation(line: 3068, column: 15, scope: !8876)
!8904 = !DILocation(line: 3068, column: 8, scope: !8876)
!8905 = !DILocation(line: 3068, column: 13, scope: !8876)
!8906 = !DILocation(line: 3069, column: 10, scope: !8876)
!8907 = !DILocation(line: 3071, column: 7, scope: !8908)
!8908 = distinct !DILexicalBlock(scope: !8876, file: !3, line: 3071, column: 7)
!8909 = !DILocation(line: 3071, column: 7, scope: !8876)
!8910 = !DILocation(line: 3072, column: 5, scope: !8908)
!8911 = !DILocation(line: 3075, column: 11, scope: !8912)
!8912 = distinct !DILexicalBlock(scope: !8908, file: !3, line: 3074, column: 5)
!8913 = !DILocation(line: 3076, column: 17, scope: !8912)
!8914 = !DILocation(line: 3076, column: 10, scope: !8912)
!8915 = !DILocation(line: 3076, column: 15, scope: !8912)
!8916 = !DILocation(line: 3077, column: 17, scope: !8912)
!8917 = !DILocation(line: 3077, column: 10, scope: !8912)
!8918 = !DILocation(line: 3077, column: 15, scope: !8912)
!8919 = !DILocation(line: 3078, column: 10, scope: !8912)
!8920 = !DILocation(line: 3078, column: 17, scope: !8912)
!8921 = !DILocation(line: 3079, column: 13, scope: !8912)
!8922 = !DILocation(line: 0, scope: !8908)
!8923 = !DILocation(line: 3083, column: 1, scope: !8876)
!8924 = !DILocation(line: 3082, column: 3, scope: !8876)
!8925 = distinct !DISubprogram(name: "compare_type_names_p", scope: !3, file: !3, line: 3091, type: !8926, scopeLine: 3092, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8928)
!8926 = !DISubroutineType(types: !8927)
!8927 = !{!371, !450, !450, !371}
!8928 = !{!8929, !8930, !8931, !8932, !8933}
!8929 = !DILocalVariable(name: "t1", arg: 1, scope: !8925, file: !3, line: 3091, type: !450)
!8930 = !DILocalVariable(name: "t2", arg: 2, scope: !8925, file: !3, line: 3091, type: !450)
!8931 = !DILocalVariable(name: "for_completion_p", arg: 3, scope: !8925, file: !3, line: 3091, type: !371)
!8932 = !DILocalVariable(name: "name1", scope: !8925, file: !3, line: 3093, type: !450)
!8933 = !DILocalVariable(name: "name2", scope: !8925, file: !3, line: 3094, type: !450)
!8934 = !DILocation(line: 0, scope: !8925)
!8935 = !DILocation(line: 3093, column: 16, scope: !8925)
!8936 = !DILocation(line: 3094, column: 16, scope: !8925)
!8937 = !DILocation(line: 3097, column: 7, scope: !8938)
!8938 = distinct !DILexicalBlock(scope: !8925, file: !3, line: 3097, column: 7)
!8939 = !DILocation(line: 3098, column: 7, scope: !8938)
!8940 = !DILocation(line: 3098, column: 12, scope: !8938)
!8941 = !DILocation(line: 3098, column: 22, scope: !8938)
!8942 = !DILocation(line: 3098, column: 18, scope: !8938)
!8943 = !DILocation(line: 3101, column: 7, scope: !8944)
!8944 = distinct !DILexicalBlock(scope: !8925, file: !3, line: 3101, column: 7)
!8945 = !DILocation(line: 3101, column: 13, scope: !8944)
!8946 = !DILocation(line: 3101, column: 16, scope: !8944)
!8947 = !DILocation(line: 3101, column: 34, scope: !8944)
!8948 = !DILocation(line: 3101, column: 7, scope: !8925)
!8949 = !DILocation(line: 3103, column: 15, scope: !8950)
!8950 = distinct !DILexicalBlock(scope: !8944, file: !3, line: 3102, column: 5)
!8951 = !DILocation(line: 3105, column: 8, scope: !8952)
!8952 = distinct !DILexicalBlock(scope: !8950, file: !3, line: 3104, column: 11)
!8953 = !DILocation(line: 3105, column: 4, scope: !8952)
!8954 = !DILocation(line: 3108, column: 3, scope: !8925)
!8955 = !DILocation(line: 3110, column: 7, scope: !8956)
!8956 = distinct !DILexicalBlock(scope: !8925, file: !3, line: 3110, column: 7)
!8957 = !DILocation(line: 3110, column: 13, scope: !8956)
!8958 = !DILocation(line: 3110, column: 16, scope: !8956)
!8959 = !DILocation(line: 3110, column: 34, scope: !8956)
!8960 = !DILocation(line: 3110, column: 7, scope: !8925)
!8961 = !DILocation(line: 3112, column: 15, scope: !8962)
!8962 = distinct !DILexicalBlock(scope: !8956, file: !3, line: 3111, column: 5)
!8963 = !DILocation(line: 3114, column: 8, scope: !8964)
!8964 = distinct !DILexicalBlock(scope: !8962, file: !3, line: 3113, column: 11)
!8965 = !DILocation(line: 3114, column: 4, scope: !8964)
!8966 = !DILocation(line: 3117, column: 3, scope: !8925)
!8967 = !DILocation(line: 3121, column: 13, scope: !8968)
!8968 = distinct !DILexicalBlock(scope: !8925, file: !3, line: 3121, column: 7)
!8969 = !DILocation(line: 3125, column: 1, scope: !8925)
!8970 = distinct !DISubprogram(name: "type_pair_hash", scope: !3, file: !3, line: 3031, type: !742, scopeLine: 3032, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8971)
!8971 = !{!8972, !8973, !8974, !8975}
!8972 = !DILocalVariable(name: "p", arg: 1, scope: !8970, file: !3, line: 3031, type: !745)
!8973 = !DILocalVariable(name: "pair", scope: !8970, file: !3, line: 3033, type: !1582)
!8974 = !DILocalVariable(name: "val1", scope: !8970, file: !3, line: 3034, type: !744)
!8975 = !DILocalVariable(name: "val2", scope: !8970, file: !3, line: 3035, type: !744)
!8976 = !DILocation(line: 0, scope: !8970)
!8977 = !DILocation(line: 3034, column: 26, scope: !8970)
!8978 = !DILocation(line: 3035, column: 26, scope: !8970)
!8979 = !DILocation(line: 3036, column: 11, scope: !8970)
!8980 = !DILocation(line: 3037, column: 6, scope: !8970)
!8981 = !DILocation(line: 3037, column: 4, scope: !8970)
!8982 = !DILocation(line: 3036, column: 3, scope: !8970)
!8983 = distinct !DISubprogram(name: "type_pair_eq", scope: !3, file: !3, line: 3043, type: !750, scopeLine: 3044, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !8984)
!8984 = !{!8985, !8986, !8987, !8988}
!8985 = !DILocalVariable(name: "p1", arg: 1, scope: !8983, file: !3, line: 3043, type: !745)
!8986 = !DILocalVariable(name: "p2", arg: 2, scope: !8983, file: !3, line: 3043, type: !745)
!8987 = !DILocalVariable(name: "pair1", scope: !8983, file: !3, line: 3045, type: !1582)
!8988 = !DILocalVariable(name: "pair2", scope: !8983, file: !3, line: 3046, type: !1582)
!8989 = !DILocation(line: 0, scope: !8983)
!8990 = !DILocation(line: 3047, column: 19, scope: !8983)
!8991 = !DILocation(line: 3047, column: 34, scope: !8983)
!8992 = !DILocation(line: 3047, column: 24, scope: !8983)
!8993 = !DILocation(line: 3047, column: 39, scope: !8983)
!8994 = !DILocation(line: 3048, column: 30, scope: !8983)
!8995 = !DILocation(line: 3047, column: 49, scope: !8983)
!8996 = !DILocation(line: 3047, column: 64, scope: !8983)
!8997 = !DILocation(line: 3047, column: 54, scope: !8983)
!8998 = !DILocation(line: 3048, column: 4, scope: !8983)
!8999 = !DILocation(line: 3048, column: 20, scope: !8983)
!9000 = !DILocation(line: 3048, column: 35, scope: !8983)
!9001 = !DILocation(line: 3048, column: 45, scope: !8983)
!9002 = !DILocation(line: 3048, column: 50, scope: !8983)
!9003 = !DILocation(line: 3047, column: 3, scope: !8983)
!9004 = distinct !DISubprogram(name: "op_iter_init", scope: !7295, file: !7295, line: 742, type: !9005, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9007)
!9005 = !DISubroutineType(types: !9006)
!9006 = !{null, !7298, !379, !372}
!9007 = !{!9008, !9009, !9010}
!9008 = !DILocalVariable(name: "ptr", arg: 1, scope: !9004, file: !7295, line: 742, type: !7298)
!9009 = !DILocalVariable(name: "stmt", arg: 2, scope: !9004, file: !7295, line: 742, type: !379)
!9010 = !DILocalVariable(name: "flags", arg: 3, scope: !9004, file: !7295, line: 742, type: !372)
!9011 = !DILocation(line: 0, scope: !9004)
!9012 = !DILocation(line: 748, column: 8, scope: !9004)
!9013 = !DILocation(line: 748, column: 13, scope: !9004)
!9014 = !DILocation(line: 750, column: 7, scope: !9015)
!9015 = distinct !DILexicalBlock(scope: !9004, file: !7295, line: 749, column: 7)
!9016 = !DILocation(line: 751, column: 7, scope: !9015)
!9017 = !DILocation(line: 749, column: 7, scope: !9004)
!9018 = !DILocation(line: 752, column: 5, scope: !9015)
!9019 = !DILocation(line: 753, column: 15, scope: !9004)
!9020 = !DILocation(line: 753, column: 52, scope: !9004)
!9021 = !DILocation(line: 753, column: 8, scope: !9004)
!9022 = !DILocation(line: 753, column: 13, scope: !9004)
!9023 = !DILocation(line: 755, column: 7, scope: !9024)
!9024 = distinct !DILexicalBlock(scope: !9004, file: !7295, line: 754, column: 7)
!9025 = !DILocation(line: 755, column: 10, scope: !9024)
!9026 = !DILocation(line: 756, column: 7, scope: !9024)
!9027 = !DILocation(line: 756, column: 10, scope: !9024)
!9028 = !DILocation(line: 756, column: 29, scope: !9024)
!9029 = !DILocation(line: 754, column: 7, scope: !9004)
!9030 = !DILocation(line: 757, column: 22, scope: !9024)
!9031 = !DILocation(line: 757, column: 28, scope: !9024)
!9032 = !DILocation(line: 757, column: 15, scope: !9024)
!9033 = !DILocation(line: 757, column: 5, scope: !9024)
!9034 = !DILocation(line: 758, column: 8, scope: !9004)
!9035 = !DILocation(line: 758, column: 13, scope: !9004)
!9036 = !DILocation(line: 760, column: 8, scope: !9004)
!9037 = !DILocation(line: 760, column: 14, scope: !9004)
!9038 = !DILocation(line: 761, column: 8, scope: !9004)
!9039 = !DILocation(line: 761, column: 16, scope: !9004)
!9040 = !DILocation(line: 762, column: 8, scope: !9004)
!9041 = !DILocation(line: 762, column: 17, scope: !9004)
!9042 = !DILocation(line: 763, column: 1, scope: !9004)
!9043 = distinct !DISubprogram(name: "gimple_def_ops", scope: !6, file: !6, line: 1292, type: !9044, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9046)
!9044 = !DISubroutineType(types: !9045)
!9045 = !{!903, !3301}
!9046 = !{!9047}
!9047 = !DILocalVariable(name: "g", arg: 1, scope: !9043, file: !6, line: 1292, type: !3301)
!9048 = !DILocation(line: 0, scope: !9043)
!9049 = distinct !DISubprogram(name: "gimple_use_ops", scope: !6, file: !6, line: 1313, type: !9050, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9052)
!9050 = !DISubroutineType(types: !9051)
!9051 = !{!910, !3301}
!9052 = !{!9053}
!9053 = !DILocalVariable(name: "g", arg: 1, scope: !9049, file: !6, line: 1313, type: !3301)
!9054 = !DILocation(line: 0, scope: !9049)
!9055 = !DILocation(line: 1315, column: 8, scope: !9056)
!9056 = distinct !DILexicalBlock(scope: !9049, file: !6, line: 1315, column: 7)
!9057 = !DILocation(line: 1315, column: 7, scope: !9049)
!9058 = !DILocation(line: 1317, column: 26, scope: !9049)
!9059 = !DILocation(line: 1317, column: 3, scope: !9049)
!9060 = !DILocation(line: 1318, column: 1, scope: !9049)
!9061 = distinct !DISubprogram(name: "get_def_from_ptr", scope: !7295, file: !7295, line: 434, type: !9062, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9065)
!9062 = !DISubroutineType(types: !9063)
!9063 = !{!450, !9064}
!9064 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_operand_p", file: !363, line: 27, baseType: !908)
!9065 = !{!9066}
!9066 = !DILocalVariable(name: "def", arg: 1, scope: !9061, file: !7295, line: 434, type: !9064)
!9067 = !DILocation(line: 0, scope: !9061)
!9068 = !DILocation(line: 436, column: 10, scope: !9061)
!9069 = !DILocation(line: 436, column: 3, scope: !9061)
!9070 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !6, file: !6, line: 3100, type: !9071, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !9074)
!9071 = !DISubroutineType(types: !9072)
!9072 = !{!9073, !379, !7}
!9073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1458, size: 64)
!9074 = !{!9075, !9076}
!9075 = !DILocalVariable(name: "gs", arg: 1, scope: !9070, file: !6, line: 3100, type: !379)
!9076 = !DILocalVariable(name: "index", arg: 2, scope: !9070, file: !6, line: 3100, type: !7)
!9077 = !DILocation(line: 0, scope: !9070)
!9078 = !DILocation(line: 3103, column: 3, scope: !9070)
!9079 = !DILocation(line: 3104, column: 12, scope: !9070)
!9080 = !DILocation(line: 3104, column: 3, scope: !9070)
