                                   502.gcc_r
                       SPEC CPU2017 Benchmark Description

  Benchmark Name

   502.gcc_r

  Benchmark Author

   Richard Stallman and a large cast of helpers.
   For a full list, see
   [1]http://gcc.gnu.org/onlinedocs/gcc/Contributors.html

  Benchmark Program General Category

   C Language optimizing compiler

  Benchmark Description

   502.gcc_r is based on GCC Version 4.5.0. It generates code for an IA32
   processor. The benchmark runs as a compiler with many of its optimization
   flags enabled.

   502.gcc_r has altered inlining heuristics, so as to inline more code than
   may be typical of Unix systems as of the time that the porting work was
   done for the benchmark. This was done so that 502.gcc_r would spend more
   time analyzing its source code inputs, and use more memory. Without this
   effect, 502.gcc_r would have done less analysis, and needed more input
   workloads to achieve the run times required for CPU2017. Recall that SPEC
   CPU benchmarks are drawn from 'the compute-intensive portion of real
   applications'; therefore, for the benchmark version, the preference is to
   compile a few large files instead of many small files.

  Input Description

   The inputs to the benchmark are C source code files. The large files for
   the ref workloads are GCC itself, after preprocessing. The presentation of
   the entire (preprocessed) source set at one time avoids I/O and allows the
   benchmark compiler a wide scope as it considers optimizations. There are
   several optimizations used, which can be found in the file control in each
   of the input directories. For example, the brief 'test' workload uses
   -O3 -finline-limit=50000.

   New inputs can be generated by writing C source code.

  Output Description

   All output files are IA32 assembly code files.

  Programming Language

   C

  GNU C Portability Considerations: confusion from duplicate symbols

   You may encounter errors such as the following when compiling the SPEC
   CPU2017 benchmark version of gcc. Read this section if you see symbol
   definitions errors such as:

    cc1-checksum.o: In function `vprintf':
    /usr/include/bits/stdio.h:38: multiple definition of `vprintf'
    main.o:/usr/include/bits/stdio.h:38: first defined here

   Notice in the message above that the compiler appears to be objecting to
   using a definition at
   stdio.h:38 because it already has a definition at
   stdio.h:38.

   That somewhat confusing error signature is due to inclusion of header
   files that use pre-1999 inlining keywords. See the documentation of
   -fgnu89-inline in the GNU chapter on [2]C-Dialect-Options, and the
   [3]associated discussion of inlining, which explains how the keywords
   inline, static, and extern were standardized in a manner that differs from
   their pre-1999 use by GCC.

   The following table provides recommendations if you encounter the above
   error.

Data                 Workaround                                           Comments
Model
                                               If you select a language dialect that enables GNU extensions,
                                               you may find that 502.gcc_r succeeds but other benchmarks
                                               fail.

-m32  -std=gnuNN                               Recall that SPEC's rules require that in 'base', all modules
or    MAY CAUSE DIFFICULTY FOR OTHER           of a given language must use [4]the same flags. You should
-m64  BENCHMARKS                               pick a language dialect that works for all the benchmarks in
                                               the suite. (Note: using std=gnuXX as a "Portability" flag is
                                               not likely to be approved by SPEC, because
                                               [5]the portabilty rule considers degree of impact. Setting a
                                               GNU-specific dialect as a portablility flag is not required
                                               given that more narrow solutions are available.)
                                               If compiling 64-bit, the recommendation is to allow multiple
                                               definitions. The linker uses the first definition that it
      intrate,intspeed=base:                   sees, which is benign, because (for example) the routine at
      LDCFLAGS = -z muldefs                    stdio.h:38 happens to be identical to the routine at
-m64                                           stdio.h:38.
                    RECOMMENDED
                                               Note: as shown on the left, in base you would set the flag for
                                               all benchmarks. In peak, if you wish, you could be more
                                               selective and set it only for 502.gcc_r.
      -z muldefs -D_FILE_OFFSET_BITS=64        If you are compiling 32-bit, you can try -z muldefs
-m32  WORTH TRYING                             -D_FILE_OFFSET_BITS=64. Perhaps it will work. Or, it may fail
                                               with messages from the GNU assembler as described below.
                                               It is strongly recommended that 32-bit compiles should include
      -z muldefs                               -D_FILE_OFFSET_BITS=64, because at run-time, operations using
-m32  (without mention of _FILE_OFFSET_BITS)   modern file systems may fail spectacularly and frequently (or,
      NOT RECOMMENDED                          worse, quietly and randomly) if a program does not accommodate
                                               64-bit metadata.
                                               As described just above, 32-bit compiles should include
                                               -D_FILE_OFFSET_BITS=64 in order to ensure that they run
                                               correctly on modern file systems. You may find that doing so
                                               leads to symptoms such as:

                                                  filename: Assembler messages:
      intrate,intspeed=base:                      filename:11843: Error: symbol `stat64' is already defined
      PORTABILITY     = -D_FILE_OFFSET_BITS=64    filename:11863: Error: symbol `lstat64' is already defined
-m32  EXTRA_COPTIMIZE = -fgnu89-inline
                                               The above error occurs on certain paths through system header
                    RECOMMENDED                files that lead to GCC deciding that the code body needs to be
                                               included in the assembly routine -- twice. If this happens in
                                               your environment, a solution is -fgnu89-inline.

                                               Note: as shown on the left, in base you would set the flag for
                                               all benchmarks. In peak, if you wish, you could be more
                                               selective and set it only for 502.gcc_r.

  Other Portability Considerations

    1. Some of the optimizations 502.gcc_r performs require constant
       propagation of floating point constants. These form an insignificant
       amount of computation time, yet may depend on IEEE floating point
       format to produce a correct result.
    2. 502.gcc_r is not an ANSI C program. It uses GNU extensions.
    3. The initial port of 502.gcc_r was to a 64 bit system. It has been
       successfully ported by SPEC to many 32-bit UNIX implementations.

  Sources and Licensing

   502.gcc_r is based on the GNU C compiler version 4.5, using the GNU GPL
   license.

   Please see details in the document [6]SPEC CPU2017 Licenses.

  References

     * See the [7]GCC home page

   Last updated: $Date: 2017-05-24 15:49:39 -0400 (Wed, 24 May 2017) $

References

   Visible links
   1. http://gcc.gnu.org/onlinedocs/gcc/Contributors.html
   2. https://gcc.gnu.org/onlinedocs/gcc/C-Dialect-Options.html#index-fgnu89-inline-113
   3. https://gcc.gnu.org/onlinedocs/gcc/Inline.html#Inline
   4. https://www.spec.org/cpu2017/Docs/runrules.html#BaseFlags
   5. https://www.spec.org/cpu2017/Docs/runrules.html#portability
   6. https://www.spec.org/cpu2017/Docs/licenses.html#bmk502.gcc_r
   7. http://gcc.gnu.org/
