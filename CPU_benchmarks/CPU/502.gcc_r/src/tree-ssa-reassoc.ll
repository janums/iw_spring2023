; ModuleID = 'tree-ssa-reassoc.bc'
source_filename = "tree-ssa-reassoc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gimple_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.anon = type { i32, i32, i32, i32 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.VEC_oecount_heap = type { %struct.VEC_oecount_base }
%struct.VEC_oecount_base = type { i32, i32, [1 x %struct.oecount_s] }
%struct.oecount_s = type { i32, i32, %union.tree_node* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.VEC_operand_entry_t_heap = type { %struct.VEC_operand_entry_t_base }
%struct.VEC_operand_entry_t_base = type { i32, i32, [1 x %struct.operand_entry*] }
%struct.operand_entry = type { i32, %union.tree_node* }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.sbitmap_iterator = type { i64*, i32, i32, i32, i64 }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.tree_ssa_name = type { %struct.tree_common, %union.tree_node*, %union.gimple_statement_d*, i32, %struct.ptr_info_def*, %struct.ssa_use_operand_d }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }

@stdout = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [26 x i8] c"Op %d -> rank: %d, tree: \00", align 1
@stderr = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"reassoc\00", align 1
@pass_reassoc = dso_local local_unnamed_addr global %struct.gimple_opt_pass { %struct.opt_pass { i32 0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i32 0, i32 0), i8 ()* @gate_tree_ssa_reassoc, i32 ()* @execute_reassoc, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 68, i32 40, i32 0, i32 0, i32 0, i32 7 } }, align 8, !dbg !0
@flag_tree_reassoc = external dso_local local_unnamed_addr global i32, align 4
@cfun = external dso_local local_unnamed_addr global %struct.function*, align 8
@reassociate_stats = internal global %struct.anon zeroinitializer, align 4, !dbg !2093
@.str.2 = private unnamed_addr constant [19 x i8] c"operand entry pool\00", align 1
@operand_entry_pool = internal unnamed_addr global %struct.alloc_pool_def* null, align 8, !dbg !2101
@bb_rank = internal unnamed_addr global i64* null, align 8, !dbg !2124
@operand_rank = internal unnamed_addr global %struct.pointer_map_t* null, align 8, !dbg !2126
@current_function_decl = external dso_local local_unnamed_addr global %union.tree_node*, align 8
@broken_up_subtracts = internal global %struct.VEC_tree_heap* null, align 8, !dbg !2128
@.str.3 = private unnamed_addr constant [19 x i8] c"tree-ssa-reassoc.c\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@flag_associative_math = external dso_local local_unnamed_addr global i32, align 4
@.str.5 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gimple_rhs_class_table = external dso_local local_unnamed_addr constant [0 x i8], align 1
@gimple_ops_offset_ = external dso_local local_unnamed_addr constant [0 x i64], align 8
@gss_for_code_ = external dso_local local_unnamed_addr constant [0 x i32], align 4
@flag_var_tracking_assignments = external dso_local local_unnamed_addr global i32, align 4
@dump_file = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@dump_flags = external dso_local local_unnamed_addr global i32, align 4
@.str.6 = private unnamed_addr constant [22 x i8] c"Breaking up subtract \00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"Transforming \00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c" into \00", align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"swapping operands of \00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c" is now \00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"Rank for \00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c" is %ld\0A\00", align 1
@tree_code_type = external dso_local local_unnamed_addr constant [0 x i32], align 4
@tree_code_length = external dso_local local_unnamed_addr constant [0 x i8], align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"Linearized: \00", align 1
@.str.14 = private unnamed_addr constant [19 x i8] c"Merging constants\0A\00", align 1
@.str.15 = private unnamed_addr constant [35 x i8] c"Found & 0, removing all other ops\0A\00", align 1
@.str.16 = private unnamed_addr constant [22 x i8] c"Found & -1, removing\0A\00", align 1
@.str.17 = private unnamed_addr constant [36 x i8] c"Found | -1, removing all other ops\0A\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c"Found | 0, removing\0A\00", align 1
@mode_class = external dso_local local_unnamed_addr constant [87 x i8], align 16
@real_format_for_mode = external dso_local local_unnamed_addr global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local local_unnamed_addr constant [87 x i8], align 16
@flag_finite_math_only = external dso_local local_unnamed_addr global i32, align 4
@flag_signed_zeros = external dso_local local_unnamed_addr global i32, align 4
@.str.19 = private unnamed_addr constant [35 x i8] c"Found * 0, removing all other ops\0A\00", align 1
@flag_signaling_nans = external dso_local local_unnamed_addr global i32, align 4
@.str.20 = private unnamed_addr constant [21 x i8] c"Found * 1, removing\0A\00", align 1
@.str.21 = private unnamed_addr constant [25 x i8] c"Found [|^+] 0, removing\0A\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"Equivalence: \00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c" & ~\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c" | ~\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c" -> 0\0A\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c" -> -1\0A\00", align 1
@global_trees = external dso_local local_unnamed_addr global [131 x %union.tree_node*], align 16
@.str.27 = private unnamed_addr constant [13 x i8] c" [&|minmax] \00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@.str.29 = private unnamed_addr constant [4 x i8] c" ^ \00", align 1
@.str.30 = private unnamed_addr constant [13 x i8] c" -> nothing\0A\00", align 1
@.str.31 = private unnamed_addr constant [5 x i8] c" + -\00", align 1
@.str.32 = private unnamed_addr constant [43 x i8] c"searching for un-distribute opportunities \00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c" %d\0A\00", align 1
@cvec = internal global %struct.VEC_oecount_heap* null, align 8, !dbg !2130
@.str.34 = private unnamed_addr constant [13 x i8] c"Candidates:\0A\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"  %u %s: \00", align 1
@.str.36 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.37 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"Building (\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c" + \00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c") %s \00", align 1
@htab_hash_pointer = external dso_local local_unnamed_addr global i32 (i8*)*, align 8
@.str.42 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@.str.43 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@.str.44 = private unnamed_addr constant [11 x i8] c"Linearized\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"Constants eliminated\00", align 1
@.str.46 = private unnamed_addr constant [15 x i8] c"Ops eliminated\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"Statements rewritten\00", align 1

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @vprintf(i8* noalias %__fmt, %struct.__va_list_tag* %__arg) local_unnamed_addr #0 !dbg !2162 {
entry:
  call void @llvm.dbg.value(metadata i8* %__fmt, metadata !2175, metadata !DIExpression()), !dbg !2177
  call void @llvm.dbg.value(metadata %struct.__va_list_tag* %__arg, metadata !2176, metadata !DIExpression()), !dbg !2177
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2178
  %call = tail call i32 @vfprintf(%struct._IO_FILE* %0, i8* %__fmt, %struct.__va_list_tag* %__arg) #6, !dbg !2179
  ret i32 %call, !dbg !2180
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 !dbg !2181 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !2185
  %call = tail call i32 @getc(%struct._IO_FILE* %0) #6, !dbg !2186
  ret i32 %call, !dbg !2187
}

declare dso_local i32 @getc(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fgetc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !2188 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !2242, metadata !DIExpression()), !dbg !2243
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !2244
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !2244
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !2244
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !2244
  %cmp = icmp uge i8* %0, %1, !dbg !2244
  %conv1 = zext i1 %cmp to i64, !dbg !2244
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2244
  %tobool = icmp eq i64 %expval, 0, !dbg !2244
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2244

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !2244
  br label %cond.end, !dbg !2244

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2244
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !2244
  %2 = load i8, i8* %0, align 1, !dbg !2244
  %conv3 = zext i8 %2 to i32, !dbg !2244
  br label %cond.end, !dbg !2244

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !2244
  ret i32 %cond, !dbg !2245
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #3

declare dso_local i32 @__uflow(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !2246 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !2248, metadata !DIExpression()), !dbg !2249
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !2250
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !2250
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !2250
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !2250
  %cmp = icmp uge i8* %0, %1, !dbg !2250
  %conv1 = zext i1 %cmp to i64, !dbg !2250
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2250
  %tobool = icmp eq i64 %expval, 0, !dbg !2250
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2250

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !2250
  br label %cond.end, !dbg !2250

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2250
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !2250
  %2 = load i8, i8* %0, align 1, !dbg !2250
  %conv3 = zext i8 %2 to i32, !dbg !2250
  br label %cond.end, !dbg !2250

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !2250
  ret i32 %cond, !dbg !2251
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #0 !dbg !2252 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !2253
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 1, !dbg !2253
  %1 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !2253
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 2, !dbg !2253
  %2 = load i8*, i8** %_IO_read_end, align 8, !dbg !2253
  %cmp = icmp uge i8* %1, %2, !dbg !2253
  %conv1 = zext i1 %cmp to i64, !dbg !2253
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2253
  %tobool = icmp eq i64 %expval, 0, !dbg !2253
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2253

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %0) #6, !dbg !2253
  br label %cond.end, !dbg !2253

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !2253
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !2253
  %3 = load i8, i8* %1, align 1, !dbg !2253
  %conv3 = zext i8 %3 to i32, !dbg !2253
  br label %cond.end, !dbg !2253

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !2253
  ret i32 %cond, !dbg !2254
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar(i32 %__c) local_unnamed_addr #0 !dbg !2255 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2259, metadata !DIExpression()), !dbg !2260
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2261
  %call = tail call i32 @putc(i32 %__c, %struct._IO_FILE* %0) #6, !dbg !2262
  ret i32 %call, !dbg !2263
}

declare dso_local i32 @putc(i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fputc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2264 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2268, metadata !DIExpression()), !dbg !2270
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2269, metadata !DIExpression()), !dbg !2270
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !2271
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2271
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !2271
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !2271
  %cmp = icmp uge i8* %0, %1, !dbg !2271
  %conv1 = zext i1 %cmp to i64, !dbg !2271
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2271
  %tobool = icmp eq i64 %expval, 0, !dbg !2271
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2271

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2271
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !2271
  br label %cond.end, !dbg !2271

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !2271
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2271
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2271
  store i8 %conv2, i8* %0, align 1, !dbg !2271
  %conv6 = and i32 %__c, 255, !dbg !2271
  br label %cond.end, !dbg !2271

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2271
  ret i32 %cond, !dbg !2272
}

declare dso_local i32 @__overflow(%struct._IO_FILE*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2273 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2275, metadata !DIExpression()), !dbg !2277
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2276, metadata !DIExpression()), !dbg !2277
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !2278
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2278
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !2278
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !2278
  %cmp = icmp uge i8* %0, %1, !dbg !2278
  %conv1 = zext i1 %cmp to i64, !dbg !2278
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2278
  %tobool = icmp eq i64 %expval, 0, !dbg !2278
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2278

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2278
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !2278
  br label %cond.end, !dbg !2278

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !2278
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !2278
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2278
  store i8 %conv2, i8* %0, align 1, !dbg !2278
  %conv6 = and i32 %__c, 255, !dbg !2278
  br label %cond.end, !dbg !2278

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2278
  ret i32 %cond, !dbg !2279
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar_unlocked(i32 %__c) local_unnamed_addr #0 !dbg !2280 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2282, metadata !DIExpression()), !dbg !2283
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !2284
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 5, !dbg !2284
  %1 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !2284
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 6, !dbg !2284
  %2 = load i8*, i8** %_IO_write_end, align 8, !dbg !2284
  %cmp = icmp uge i8* %1, %2, !dbg !2284
  %conv1 = zext i1 %cmp to i64, !dbg !2284
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !2284
  %tobool = icmp eq i64 %expval, 0, !dbg !2284
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2284

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !2284
  %call = tail call i32 @__overflow(%struct._IO_FILE* %0, i32 %conv3) #6, !dbg !2284
  br label %cond.end, !dbg !2284

cond.false:                                       ; preds = %entry
  %conv4 = trunc i32 %__c to i8, !dbg !2284
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !2284
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !2284
  store i8 %conv4, i8* %1, align 1, !dbg !2284
  %conv6 = and i32 %__c, 255, !dbg !2284
  br label %cond.end, !dbg !2284

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !2284
  ret i32 %cond, !dbg !2285
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @getline(i8** %__lineptr, i64* %__n, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2286 {
entry:
  call void @llvm.dbg.value(metadata i8** %__lineptr, metadata !2292, metadata !DIExpression()), !dbg !2295
  call void @llvm.dbg.value(metadata i64* %__n, metadata !2293, metadata !DIExpression()), !dbg !2295
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2294, metadata !DIExpression()), !dbg !2295
  %call = tail call i64 @__getdelim(i8** %__lineptr, i64* %__n, i32 10, %struct._IO_FILE* %__stream) #6, !dbg !2296
  ret i64 %call, !dbg !2297
}

declare dso_local i64 @__getdelim(i8**, i64*, i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @feof_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2298 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2300, metadata !DIExpression()), !dbg !2301
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !2302
  %0 = load i32, i32* %_flags, align 8, !dbg !2302
  %and = lshr i32 %0, 4, !dbg !2302
  %and.lobit = and i32 %and, 1, !dbg !2302
  ret i32 %and.lobit, !dbg !2303
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @ferror_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !2304 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !2306, metadata !DIExpression()), !dbg !2307
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !2308
  %0 = load i32, i32* %_flags, align 8, !dbg !2308
  %and = lshr i32 %0, 5, !dbg !2308
  %and.lobit = and i32 %and, 1, !dbg !2308
  ret i32 %and.lobit, !dbg !2309
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @tolower(i32 %__c) local_unnamed_addr #0 !dbg !2310 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2313, metadata !DIExpression()), !dbg !2314
  %__c.off = add i32 %__c, 128, !dbg !2315
  %0 = icmp ult i32 %__c.off, 384, !dbg !2315
  br i1 %0, label %cond.true, label %cond.end, !dbg !2315

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_tolower_loc() #6, !dbg !2316
  %1 = load i32*, i32** %call, align 8, !dbg !2317
  %idxprom = sext i32 %__c to i64, !dbg !2318
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !2318
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2318
  br label %cond.end, !dbg !2319

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !2319
  ret i32 %cond, !dbg !2320
}

declare dso_local i32** @__ctype_tolower_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @toupper(i32 %__c) local_unnamed_addr #0 !dbg !2321 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !2323, metadata !DIExpression()), !dbg !2324
  %__c.off = add i32 %__c, 128, !dbg !2325
  %0 = icmp ult i32 %__c.off, 384, !dbg !2325
  br i1 %0, label %cond.true, label %cond.end, !dbg !2325

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_toupper_loc() #6, !dbg !2326
  %1 = load i32*, i32** %call, align 8, !dbg !2327
  %idxprom = sext i32 %__c to i64, !dbg !2328
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !2328
  %2 = load i32, i32* %arrayidx, align 4, !dbg !2328
  br label %cond.end, !dbg !2329

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !2329
  ret i32 %cond, !dbg !2330
}

declare dso_local i32** @__ctype_toupper_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @atoi(i8* %__nptr) local_unnamed_addr #0 !dbg !2331 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2336, metadata !DIExpression()), !dbg !2337
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !2338
  %conv = trunc i64 %call to i32, !dbg !2339
  ret i32 %conv, !dbg !2340
}

declare dso_local i64 @strtol(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atol(i8* %__nptr) local_unnamed_addr #0 !dbg !2341 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2345, metadata !DIExpression()), !dbg !2346
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !2347
  ret i64 %call, !dbg !2348
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atoll(i8* %__nptr) local_unnamed_addr #0 !dbg !2349 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2354, metadata !DIExpression()), !dbg !2355
  %call = tail call i64 @strtoll(i8* %__nptr, i8** null, i32 10) #6, !dbg !2356
  ret i64 %call, !dbg !2357
}

declare dso_local i64 @strtoll(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i8* @bsearch(i8* %__key, i8* %__base, i64 %__nmemb, i64 %__size, i32 (i8*, i8*)* %__compar) local_unnamed_addr #0 !dbg !2358 {
entry:
  call void @llvm.dbg.value(metadata i8* %__key, metadata !2364, metadata !DIExpression()), !dbg !2374
  call void @llvm.dbg.value(metadata i8* %__base, metadata !2365, metadata !DIExpression()), !dbg !2374
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !2366, metadata !DIExpression()), !dbg !2374
  call void @llvm.dbg.value(metadata i64 %__size, metadata !2367, metadata !DIExpression()), !dbg !2374
  call void @llvm.dbg.value(metadata i32 (i8*, i8*)* %__compar, metadata !2368, metadata !DIExpression()), !dbg !2374
  call void @llvm.dbg.value(metadata i64 0, metadata !2369, metadata !DIExpression()), !dbg !2374
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !2370, metadata !DIExpression()), !dbg !2374
  br label %while.cond, !dbg !2375

while.cond:                                       ; preds = %if.end6, %entry
  %__l.0 = phi i64 [ 0, %entry ], [ %__l.1, %if.end6 ], !dbg !2376
  %__u.0 = phi i64 [ %__nmemb, %entry ], [ %__u.1, %if.end6 ], !dbg !2374
  call void @llvm.dbg.value(metadata i64 %__u.0, metadata !2370, metadata !DIExpression()), !dbg !2374
  call void @llvm.dbg.value(metadata i64 %__l.0, metadata !2369, metadata !DIExpression()), !dbg !2374
  %cmp = icmp ult i64 %__l.0, %__u.0, !dbg !2377
  br i1 %cmp, label %while.body, label %cleanup, !dbg !2375

while.body:                                       ; preds = %while.cond
  %add = add i64 %__l.0, %__u.0, !dbg !2378
  %div = lshr i64 %add, 1, !dbg !2380
  call void @llvm.dbg.value(metadata i64 %div, metadata !2371, metadata !DIExpression()), !dbg !2374
  %mul = mul i64 %div, %__size, !dbg !2381
  %add.ptr = getelementptr inbounds i8, i8* %__base, i64 %mul, !dbg !2382
  call void @llvm.dbg.value(metadata i8* %add.ptr, metadata !2372, metadata !DIExpression()), !dbg !2374
  %call = tail call i32 %__compar(i8* %__key, i8* %add.ptr) #6, !dbg !2383
  call void @llvm.dbg.value(metadata i32 %call, metadata !2373, metadata !DIExpression()), !dbg !2374
  %cmp1 = icmp slt i32 %call, 0, !dbg !2384
  br i1 %cmp1, label %if.end6, label %if.else, !dbg !2386

if.else:                                          ; preds = %while.body
  %cmp2 = icmp eq i32 %call, 0, !dbg !2387
  br i1 %cmp2, label %cleanup, label %if.then3, !dbg !2389

if.then3:                                         ; preds = %if.else
  %add4 = add nuw i64 %div, 1, !dbg !2390
  call void @llvm.dbg.value(metadata i64 %add4, metadata !2369, metadata !DIExpression()), !dbg !2374
  br label %if.end6

if.end6:                                          ; preds = %while.body, %if.then3
  %__l.1 = phi i64 [ %add4, %if.then3 ], [ %__l.0, %while.body ], !dbg !2374
  %__u.1 = phi i64 [ %__u.0, %if.then3 ], [ %div, %while.body ], !dbg !2374
  call void @llvm.dbg.value(metadata i64 %__u.1, metadata !2370, metadata !DIExpression()), !dbg !2374
  call void @llvm.dbg.value(metadata i64 %__l.1, metadata !2369, metadata !DIExpression()), !dbg !2374
  br label %while.cond, !dbg !2375, !llvm.loop !2391

cleanup:                                          ; preds = %if.else, %while.cond
  %retval.0 = phi i8* [ %add.ptr, %if.else ], [ null, %while.cond ], !dbg !2374
  ret i8* %retval.0, !dbg !2393
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: inlinehint nounwind uwtable
define dso_local double @atof(i8* %__nptr) local_unnamed_addr #0 !dbg !2394 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !2400, metadata !DIExpression()), !dbg !2401
  %call = tail call double @strtod(i8* %__nptr, i8** null) #6, !dbg !2402
  ret double %call, !dbg !2403
}

declare dso_local double @strtod(i8*, i8**) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoimax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2404 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !2413, metadata !DIExpression()), !dbg !2416
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !2414, metadata !DIExpression()), !dbg !2416
  call void @llvm.dbg.value(metadata i32 %base, metadata !2415, metadata !DIExpression()), !dbg !2416
  %call = tail call i64 @__strtol_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !2417
  ret i64 %call, !dbg !2418
}

declare dso_local i64 @__strtol_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoumax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2419 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !2425, metadata !DIExpression()), !dbg !2428
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !2426, metadata !DIExpression()), !dbg !2428
  call void @llvm.dbg.value(metadata i32 %base, metadata !2427, metadata !DIExpression()), !dbg !2428
  %call = tail call i64 @__strtoul_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !2429
  ret i64 %call, !dbg !2430
}

declare dso_local i64 @__strtoul_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoimax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2431 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !2442, metadata !DIExpression()), !dbg !2445
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !2443, metadata !DIExpression()), !dbg !2445
  call void @llvm.dbg.value(metadata i32 %base, metadata !2444, metadata !DIExpression()), !dbg !2445
  %call = tail call i64 @__wcstol_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !2446
  ret i64 %call, !dbg !2447
}

declare dso_local i64 @__wcstol_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoumax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !2448 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !2452, metadata !DIExpression()), !dbg !2455
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !2453, metadata !DIExpression()), !dbg !2455
  call void @llvm.dbg.value(metadata i32 %base, metadata !2454, metadata !DIExpression()), !dbg !2455
  %call = tail call i64 @__wcstoul_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !2456
  ret i64 %call, !dbg !2457
}

declare dso_local i64 @__wcstoul_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2458 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2498, metadata !DIExpression()), !dbg !2500
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2499, metadata !DIExpression()), !dbg !2500
  %call = tail call i32 @__xstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !2501
  ret i32 %call, !dbg !2502
}

declare dso_local i32 @__xstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2503 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2505, metadata !DIExpression()), !dbg !2507
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2506, metadata !DIExpression()), !dbg !2507
  %call = tail call i32 @__lxstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !2508
  ret i32 %call, !dbg !2509
}

declare dso_local i32 @__lxstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat(i32 %__fd, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !2510 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2514, metadata !DIExpression()), !dbg !2516
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2515, metadata !DIExpression()), !dbg !2516
  %call = tail call i32 @__fxstat(i32 1, i32 %__fd, %struct.stat* %__statbuf) #6, !dbg !2517
  ret i32 %call, !dbg !2518
}

declare dso_local i32 @__fxstat(i32, i32, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat(i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2519 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2523, metadata !DIExpression()), !dbg !2527
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2524, metadata !DIExpression()), !dbg !2527
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !2525, metadata !DIExpression()), !dbg !2527
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2526, metadata !DIExpression()), !dbg !2527
  %call = tail call i32 @__fxstatat(i32 1, i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) #6, !dbg !2528
  ret i32 %call, !dbg !2529
}

declare dso_local i32 @__fxstatat(i32, i32, i8*, %struct.stat*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknod(i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2530 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2534, metadata !DIExpression()), !dbg !2537
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2535, metadata !DIExpression()), !dbg !2537
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2536, metadata !DIExpression()), !dbg !2537
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2536, metadata !DIExpression(DW_OP_deref)), !dbg !2537
  %call = call i32 @__xmknod(i32 0, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !2538
  ret i32 %call, !dbg !2539
}

declare dso_local i32 @__xmknod(i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknodat(i32 %__fd, i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !2540 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2544, metadata !DIExpression()), !dbg !2548
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2545, metadata !DIExpression()), !dbg !2548
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !2546, metadata !DIExpression()), !dbg !2548
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !2547, metadata !DIExpression()), !dbg !2548
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !2547, metadata !DIExpression(DW_OP_deref)), !dbg !2548
  %call = call i32 @__xmknodat(i32 0, i32 %__fd, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !2549
  ret i32 %call, !dbg !2550
}

declare dso_local i32 @__xmknodat(i32, i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2551 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2575, metadata !DIExpression()), !dbg !2577
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2576, metadata !DIExpression()), !dbg !2577
  %call = tail call i32 @__xstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !2578
  ret i32 %call, !dbg !2579
}

declare dso_local i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2580 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !2582, metadata !DIExpression()), !dbg !2584
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2583, metadata !DIExpression()), !dbg !2584
  %call = tail call i32 @__lxstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !2585
  ret i32 %call, !dbg !2586
}

declare dso_local i32 @__lxstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat64(i32 %__fd, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !2587 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2591, metadata !DIExpression()), !dbg !2593
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2592, metadata !DIExpression()), !dbg !2593
  %call = tail call i32 @__fxstat64(i32 1, i32 %__fd, %struct.stat64* %__statbuf) #6, !dbg !2594
  ret i32 %call, !dbg !2595
}

declare dso_local i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat64(i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !2596 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !2600, metadata !DIExpression()), !dbg !2604
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !2601, metadata !DIExpression()), !dbg !2604
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !2602, metadata !DIExpression()), !dbg !2604
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !2603, metadata !DIExpression()), !dbg !2604
  %call = tail call i32 @__fxstatat64(i32 1, i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) #6, !dbg !2605
  ret i32 %call, !dbg !2606
}

declare dso_local i32 @__fxstatat64(i32, i32, i8*, %struct.stat64*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @dump_ops_vector(%struct._IO_FILE* %file, %struct.VEC_operand_entry_t_heap* %ops) local_unnamed_addr #5 !dbg !2607 {
entry:
  %oe = alloca %struct.operand_entry*, align 8
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %file, metadata !2611, metadata !DIExpression()), !dbg !2615
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %ops, metadata !2612, metadata !DIExpression()), !dbg !2615
  %0 = bitcast %struct.operand_entry** %oe to i8*, !dbg !2616
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !2616
  call void @llvm.dbg.value(metadata i32 0, metadata !2614, metadata !DIExpression()), !dbg !2615
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %ops, i64 0, i32 0, !dbg !2617
  br label %for.cond, !dbg !2620

for.cond:                                         ; preds = %for.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.body ], !dbg !2621
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !2614, metadata !DIExpression()), !dbg !2615
  call void @llvm.dbg.value(metadata %struct.operand_entry** %oe, metadata !2613, metadata !DIExpression(DW_OP_deref)), !dbg !2615
  %call = call fastcc i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %base, i32 %i.0, %struct.operand_entry** nonnull %oe) #8, !dbg !2622
  %tobool1 = icmp eq i32 %call, 0, !dbg !2623
  br i1 %tobool1, label %for.end, label %for.body, !dbg !2623

for.body:                                         ; preds = %for.cond
  %1 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !2624
  call void @llvm.dbg.value(metadata %struct.operand_entry* %1, metadata !2613, metadata !DIExpression()), !dbg !2615
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %1, i64 0, i32 0, !dbg !2626
  %2 = load i32, i32* %rank, align 8, !dbg !2626
  %call2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %file, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i32 %i.0, i32 %2) #6, !dbg !2627
  %3 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !2628
  call void @llvm.dbg.value(metadata %struct.operand_entry* %3, metadata !2613, metadata !DIExpression()), !dbg !2615
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %3, i64 0, i32 1, !dbg !2629
  %4 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !2629
  call void @print_generic_expr(%struct._IO_FILE* %file, %union.tree_node* %4, i32 0) #6, !dbg !2630
  %inc = add i32 %i.0, 1, !dbg !2631
  call void @llvm.dbg.value(metadata i32 %inc, metadata !2614, metadata !DIExpression()), !dbg !2615
  br label %for.cond, !dbg !2632, !llvm.loop !2633

for.end:                                          ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !2635
  ret void, !dbg !2635
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %vec_, i32 %ix_, %struct.operand_entry** %ptr) unnamed_addr #0 !dbg !2636 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_base* %vec_, metadata !2643, metadata !DIExpression()), !dbg !2646
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !2644, metadata !DIExpression()), !dbg !2646
  call void @llvm.dbg.value(metadata %struct.operand_entry** %ptr, metadata !2645, metadata !DIExpression()), !dbg !2646
  %tobool = icmp eq %struct.VEC_operand_entry_t_base* %vec_, null, !dbg !2647
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !2647

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 0, !dbg !2647
  %0 = load i32, i32* %num, align 8, !dbg !2647
  %cmp = icmp ugt i32 %0, %ix_, !dbg !2647
  br i1 %cmp, label %if.then, label %if.else, !dbg !2649

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !2650
  %arrayidx = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !2650
  %1 = load %struct.operand_entry*, %struct.operand_entry** %arrayidx, align 8, !dbg !2650
  br label %return, !dbg !2650

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !2652

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct.operand_entry* [ null, %if.else ], [ %1, %if.then ], !dbg !2654
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !2654
  store %struct.operand_entry* %storemerge, %struct.operand_entry** %ptr, align 8, !dbg !2654
  ret i32 %retval.0, !dbg !2649
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @debug_ops_vector(%struct.VEC_operand_entry_t_heap* %ops) local_unnamed_addr #5 !dbg !2655 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %ops, metadata !2659, metadata !DIExpression()), !dbg !2660
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !2661
  tail call void @dump_ops_vector(%struct._IO_FILE* %0, %struct.VEC_operand_entry_t_heap* %ops) #8, !dbg !2662
  ret void, !dbg !2663
}

; Function Attrs: nounwind uwtable
define internal zeroext i8 @gate_tree_ssa_reassoc() #5 !dbg !2664 {
entry:
  %0 = load i32, i32* @flag_tree_reassoc, align 4, !dbg !2665
  %cmp = icmp ne i32 %0, 0, !dbg !2666
  %conv1 = zext i1 %cmp to i8, !dbg !2665
  ret i8 %conv1, !dbg !2667
}

; Function Attrs: nounwind uwtable
define internal i32 @execute_reassoc() #5 !dbg !2668 {
entry:
  tail call fastcc void @init_reassoc() #8, !dbg !2669
  tail call fastcc void @do_reassoc() #8, !dbg !2670
  tail call fastcc void @repropagate_negates() #8, !dbg !2671
  tail call fastcc void @fini_reassoc() #8, !dbg !2672
  ret i32 0, !dbg !2673
}

; Function Attrs: nounwind uwtable
define internal fastcc void @init_reassoc() unnamed_addr #5 !dbg !2674 {
entry:
  call void @llvm.dbg.value(metadata i64 2, metadata !2679, metadata !DIExpression()), !dbg !2691
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2692
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !2692
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2692
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i64 0, i32 5, !dbg !2692
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !2692
  %add = add nsw i32 %2, 1, !dbg !2692
  %conv = sext i32 %add to i64, !dbg !2692
  %mul = shl nsw i64 %conv, 2, !dbg !2692
  %call = tail call i8* @xmalloc(i64 %mul) #6, !dbg !2692
  %3 = bitcast i8* %call to i32*, !dbg !2692
  call void @llvm.dbg.value(metadata i32* %3, metadata !2681, metadata !DIExpression()), !dbg !2691
  tail call void @loop_optimizer_init(i32 16) #6, !dbg !2693
  %call1 = tail call i8* @memset(i8* bitcast (%struct.anon* @reassociate_stats to i8*), i32 0, i64 16) #6, !dbg !2694
  %call2 = tail call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i64 16, i64 30) #6, !dbg !2695
  store %struct.alloc_pool_def* %call2, %struct.alloc_pool_def** @operand_entry_pool, align 8, !dbg !2696
  %call3 = tail call i32 @pre_and_rev_post_order_compute(i32* null, i32* %3, i8 zeroext 0) #6, !dbg !2697
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2698
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, i32 1, !dbg !2698
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !2698
  %x_last_basic_block6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i64 0, i32 5, !dbg !2698
  %6 = load i32, i32* %x_last_basic_block6, align 8, !dbg !2698
  %add7 = add nsw i32 %6, 1, !dbg !2698
  %conv8 = sext i32 %add7 to i64, !dbg !2698
  %call9 = tail call i8* @xcalloc(i64 %conv8, i64 8) #6, !dbg !2698
  store i8* %call9, i8** bitcast (i64** @bb_rank to i8**), align 8, !dbg !2699
  %call10 = tail call %struct.pointer_map_t* @pointer_map_create() #6, !dbg !2700
  store %struct.pointer_map_t* %call10, %struct.pointer_map_t** @operand_rank, align 8, !dbg !2701
  %7 = load %struct.tree_decl_non_common*, %struct.tree_decl_non_common** bitcast (%union.tree_node** @current_function_decl to %struct.tree_decl_non_common**), align 8, !dbg !2702
  %arguments = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %7, i64 0, i32 2, !dbg !2702
  br label %for.cond, !dbg !2703

for.cond:                                         ; preds = %for.inc, %entry
  %param.0.in = phi %union.tree_node** [ %arguments, %entry ], [ %chain, %for.inc ]
  %rank.0 = phi i64 [ 2, %entry ], [ %rank.1, %for.inc ], !dbg !2691
  %param.0 = load %union.tree_node*, %union.tree_node** %param.0.in, align 8, !dbg !2704
  call void @llvm.dbg.value(metadata i64 %rank.0, metadata !2679, metadata !DIExpression()), !dbg !2691
  call void @llvm.dbg.value(metadata %union.tree_node* %param.0, metadata !2680, metadata !DIExpression()), !dbg !2691
  %tobool = icmp eq %union.tree_node* %param.0, null, !dbg !2705
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2691
  br i1 %tobool, label %for.end, label %for.body, !dbg !2705

for.body:                                         ; preds = %for.cond
  %call12 = tail call %union.tree_node* @gimple_default_def(%struct.function* %8, %union.tree_node* nonnull %param.0) #6, !dbg !2706
  %cmp = icmp eq %union.tree_node* %call12, null, !dbg !2707
  br i1 %cmp, label %for.inc, label %if.then, !dbg !2708

if.then:                                          ; preds = %for.body
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2709
  %call15 = tail call %union.tree_node* @gimple_default_def(%struct.function* %9, %union.tree_node* nonnull %param.0) #6, !dbg !2710
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !2682, metadata !DIExpression()), !dbg !2711
  %inc = add nsw i64 %rank.0, 1, !dbg !2712
  call void @llvm.dbg.value(metadata i64 %inc, metadata !2679, metadata !DIExpression()), !dbg !2691
  tail call fastcc void @insert_operand_rank(%union.tree_node* %call15, i64 %inc) #8, !dbg !2713
  br label %for.inc, !dbg !2714

for.inc:                                          ; preds = %for.body, %if.then
  %rank.1 = phi i64 [ %inc, %if.then ], [ %rank.0, %for.body ], !dbg !2691
  call void @llvm.dbg.value(metadata i64 %rank.1, metadata !2679, metadata !DIExpression()), !dbg !2691
  %chain = getelementptr inbounds %union.tree_node, %union.tree_node* %param.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !2715
  br label %for.cond, !dbg !2716, !llvm.loop !2717

for.end:                                          ; preds = %for.cond
  %rank.0.lcssa = phi i64 [ %rank.0, %for.cond ], !dbg !2691
  %.lcssa = phi %struct.function* [ %8, %for.cond ], !dbg !2691
  call void @llvm.dbg.value(metadata i64 %rank.0.lcssa, metadata !2679, metadata !DIExpression()), !dbg !2691
  call void @llvm.dbg.value(metadata i64 %rank.0.lcssa, metadata !2679, metadata !DIExpression()), !dbg !2691
  call void @llvm.dbg.value(metadata i64 %rank.0.lcssa, metadata !2679, metadata !DIExpression()), !dbg !2691
  %static_chain_decl = getelementptr inbounds %struct.function, %struct.function* %.lcssa, i64 0, i32 7, !dbg !2719
  %10 = load %union.tree_node*, %union.tree_node** %static_chain_decl, align 8, !dbg !2719
  %cmp17 = icmp eq %union.tree_node* %10, null, !dbg !2720
  br i1 %cmp17, label %if.end30, label %if.then19, !dbg !2721

if.then19:                                        ; preds = %for.end
  %call24 = tail call %union.tree_node* @gimple_default_def(%struct.function* %.lcssa, %union.tree_node* nonnull %10) #6, !dbg !2722
  call void @llvm.dbg.value(metadata %union.tree_node* %call24, metadata !2688, metadata !DIExpression()), !dbg !2723
  %cmp25 = icmp eq %union.tree_node* %call24, null, !dbg !2724
  br i1 %cmp25, label %if.end30, label %if.then27, !dbg !2726

if.then27:                                        ; preds = %if.then19
  %inc28 = add nsw i64 %rank.0.lcssa, 1, !dbg !2727
  call void @llvm.dbg.value(metadata i64 %inc28, metadata !2679, metadata !DIExpression()), !dbg !2691
  tail call fastcc void @insert_operand_rank(%union.tree_node* nonnull %call24, i64 %inc28) #8, !dbg !2728
  br label %if.end30, !dbg !2728

if.end30:                                         ; preds = %if.then19, %for.end, %if.then27
  %rank.3 = phi i64 [ %rank.0.lcssa, %for.end ], [ %inc28, %if.then27 ], [ %rank.0.lcssa, %if.then19 ], !dbg !2691
  call void @llvm.dbg.value(metadata i64 %rank.3, metadata !2679, metadata !DIExpression()), !dbg !2691
  call void @llvm.dbg.value(metadata i32 0, metadata !2678, metadata !DIExpression()), !dbg !2691
  br label %for.cond31, !dbg !2729

for.cond31:                                       ; preds = %for.body36, %if.end30
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body36 ], [ 0, %if.end30 ], !dbg !2691
  %rank.4 = phi i64 [ %inc37, %for.body36 ], [ %rank.3, %if.end30 ], !dbg !2691
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !2678, metadata !DIExpression()), !dbg !2691
  call void @llvm.dbg.value(metadata i64 %rank.4, metadata !2679, metadata !DIExpression()), !dbg !2691
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2731
  %cfg33 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, i32 1, !dbg !2731
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg33, align 8, !dbg !2731
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i64 0, i32 3, !dbg !2731
  %13 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2731
  %sub = add nsw i32 %13, -2, !dbg !2733
  %14 = sext i32 %sub to i64, !dbg !2734
  %cmp34 = icmp slt i64 %indvars.iv, %14, !dbg !2734
  br i1 %cmp34, label %for.body36, label %for.end42, !dbg !2735

for.body36:                                       ; preds = %for.cond31
  %inc37 = add nsw i64 %rank.4, 1, !dbg !2736
  call void @llvm.dbg.value(metadata i64 %inc37, metadata !2679, metadata !DIExpression()), !dbg !2691
  %shl = shl i64 %inc37, 16, !dbg !2737
  %15 = load i64*, i64** @bb_rank, align 8, !dbg !2738
  %arrayidx = getelementptr inbounds i32, i32* %3, i64 %indvars.iv, !dbg !2739
  %16 = load i32, i32* %arrayidx, align 4, !dbg !2739
  %idxprom38 = sext i32 %16 to i64, !dbg !2738
  %arrayidx39 = getelementptr inbounds i64, i64* %15, i64 %idxprom38, !dbg !2738
  store i64 %shl, i64* %arrayidx39, align 8, !dbg !2740
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !2741
  call void @llvm.dbg.value(metadata i32 undef, metadata !2678, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !2691
  br label %for.cond31, !dbg !2742, !llvm.loop !2743

for.end42:                                        ; preds = %for.cond31
  tail call void @free(i8* %call) #6, !dbg !2745
  tail call void @calculate_dominance_info(i32 2) #6, !dbg !2746
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** @broken_up_subtracts, align 8, !dbg !2747
  ret void, !dbg !2748
}

; Function Attrs: nounwind uwtable
define internal fastcc void @do_reassoc() unnamed_addr #5 !dbg !2749 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2750
  %cfg = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, i32 1, !dbg !2750
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2750
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i64 0, i32 0, !dbg !2750
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !2750
  tail call fastcc void @break_up_subtract_bb(%struct.basic_block_def* %2) #8, !dbg !2751
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2752
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, i32 1, !dbg !2752
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2752
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i64 0, i32 1, !dbg !2752
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2752
  tail call fastcc void @reassociate_bb(%struct.basic_block_def* %5) #8, !dbg !2753
  ret void, !dbg !2754
}

; Function Attrs: nounwind uwtable
define internal fastcc void @repropagate_negates() unnamed_addr #5 !dbg !2755 {
entry:
  %negate = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata i32 0, metadata !2757, metadata !DIExpression()), !dbg !2776
  %0 = bitcast %union.tree_node** %negate to i8*, !dbg !2777
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !2777
  call void @llvm.dbg.value(metadata i32 0, metadata !2757, metadata !DIExpression()), !dbg !2776
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2778
  br label %for.cond, !dbg !2779

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !2780
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !2757, metadata !DIExpression()), !dbg !2776
  %2 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @broken_up_subtracts, align 8, !dbg !2781
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %2, i64 0, i32 0, !dbg !2781
  call void @llvm.dbg.value(metadata %union.tree_node** %negate, metadata !2758, metadata !DIExpression(DW_OP_deref)), !dbg !2776
  %call = call fastcc i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %base, i32 %i.0, %union.tree_node** nonnull %negate) #8, !dbg !2781
  %tobool1 = icmp eq i32 %call, 0, !dbg !2782
  br i1 %tobool1, label %for.end, label %for.body, !dbg !2782

for.body:                                         ; preds = %for.cond
  %3 = load %union.tree_node*, %union.tree_node** %negate, align 8, !dbg !2783
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !2758, metadata !DIExpression()), !dbg !2776
  %call2 = call fastcc %union.gimple_statement_d* @get_single_immediate_use(%union.tree_node* %3) #8, !dbg !2784
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call2, metadata !2759, metadata !DIExpression()), !dbg !2785
  %tobool3 = icmp eq %union.gimple_statement_d* %call2, null, !dbg !2786
  br i1 %tobool3, label %for.inc, label %land.lhs.true, !dbg !2787

land.lhs.true:                                    ; preds = %for.body
  %call4 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* nonnull %call2) #8, !dbg !2788
  %tobool5 = icmp eq i8 %call4, 0, !dbg !2788
  br i1 %tobool5, label %for.inc, label %land.lhs.true6, !dbg !2789

land.lhs.true6:                                   ; preds = %land.lhs.true
  %call7 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* nonnull %call2) #8, !dbg !2790
  %cmp = icmp eq i32 %call7, 63, !dbg !2791
  br i1 %cmp, label %if.then, label %for.inc, !dbg !2792

if.then:                                          ; preds = %land.lhs.true6
  %call9 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* nonnull %call2) #8, !dbg !2793
  %4 = load %union.tree_node*, %union.tree_node** %negate, align 8, !dbg !2795
  call void @llvm.dbg.value(metadata %union.tree_node* %4, metadata !2758, metadata !DIExpression()), !dbg !2776
  %cmp10 = icmp eq %union.tree_node* %call9, %4, !dbg !2796
  br i1 %cmp10, label %if.then12, label %if.end, !dbg !2797

if.then12:                                        ; preds = %if.then
  %call13 = call fastcc %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* nonnull %call2) #8, !dbg !2798
  %call14 = call fastcc %union.tree_node** @gimple_assign_rhs2_ptr(%union.gimple_statement_d* nonnull %call2) #8, !dbg !2800
  call void @swap_tree_operands(%union.gimple_statement_d* nonnull %call2, %union.tree_node** %call13, %union.tree_node** %call14) #6, !dbg !2801
  br label %if.end, !dbg !2802

if.end:                                           ; preds = %if.then12, %if.then
  %call15 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* nonnull %call2) #8, !dbg !2803
  %5 = load %union.tree_node*, %union.tree_node** %negate, align 8, !dbg !2804
  call void @llvm.dbg.value(metadata %union.tree_node* %5, metadata !2758, metadata !DIExpression()), !dbg !2776
  %cmp16 = icmp eq %union.tree_node* %call15, %5, !dbg !2805
  br i1 %cmp16, label %if.then18, label %for.inc, !dbg !2806

if.then18:                                        ; preds = %if.end
  %call19 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* nonnull %call2) #8, !dbg !2807
  call void @llvm.dbg.value(metadata %union.tree_node* %call19, metadata !2763, metadata !DIExpression()), !dbg !2778
  %6 = load %union.tree_node*, %union.tree_node** %negate, align 8, !dbg !2808
  call void @llvm.dbg.value(metadata %union.tree_node* %6, metadata !2758, metadata !DIExpression()), !dbg !2776
  %call20 = call fastcc %union.tree_node* @get_unary_op(%union.tree_node* %6, i32 79) #8, !dbg !2809
  call void @llvm.dbg.value(metadata %union.tree_node* %call20, metadata !2768, metadata !DIExpression()), !dbg !2778
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #7, !dbg !2810
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2769, metadata !DIExpression(DW_OP_deref)), !dbg !2778
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %gsi, %union.gimple_statement_d* nonnull %call2) #6, !dbg !2811
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2769, metadata !DIExpression(DW_OP_deref)), !dbg !2778
  call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* nonnull %gsi, i32 64, %union.tree_node* %call19, %union.tree_node* %call20) #6, !dbg !2812
  call fastcc void @update_stmt(%union.gimple_statement_d* nonnull %call2) #8, !dbg !2813
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #7, !dbg !2814
  br label %for.inc, !dbg !2815

for.inc:                                          ; preds = %land.lhs.true, %for.body, %land.lhs.true6, %if.then18, %if.end
  %inc = add i32 %i.0, 1, !dbg !2816
  call void @llvm.dbg.value(metadata i32 %inc, metadata !2757, metadata !DIExpression()), !dbg !2776
  br label %for.cond, !dbg !2817, !llvm.loop !2818

for.end:                                          ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !2820
  ret void, !dbg !2820
}

; Function Attrs: nounwind uwtable
define internal fastcc void @fini_reassoc() unnamed_addr #5 !dbg !2821 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2822
  %1 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 0), align 4, !dbg !2823
  tail call void @statistics_counter_event(%struct.function* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44, i64 0, i64 0), i32 %1) #6, !dbg !2824
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2825
  %3 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 1), align 4, !dbg !2826
  tail call void @statistics_counter_event(%struct.function* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0), i32 %3) #6, !dbg !2827
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2828
  %5 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !2829
  tail call void @statistics_counter_event(%struct.function* %4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.46, i64 0, i64 0), i32 %5) #6, !dbg !2830
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2831
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 3), align 4, !dbg !2832
  tail call void @statistics_counter_event(%struct.function* %6, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.47, i64 0, i64 0), i32 %7) #6, !dbg !2833
  %8 = load %struct.pointer_map_t*, %struct.pointer_map_t** @operand_rank, align 8, !dbg !2834
  tail call void @pointer_map_destroy(%struct.pointer_map_t* %8) #6, !dbg !2835
  %9 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @operand_entry_pool, align 8, !dbg !2836
  tail call void @free_alloc_pool(%struct.alloc_pool_def* %9) #6, !dbg !2837
  %10 = load i8*, i8** bitcast (i64** @bb_rank to i8**), align 8, !dbg !2838
  tail call void @free(i8* %10) #6, !dbg !2839
  tail call fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** nonnull @broken_up_subtracts) #8, !dbg !2840
  tail call void @free_dominance_info(i32 2) #6, !dbg !2841
  tail call void @loop_optimizer_finalize() #6, !dbg !2842
  ret void, !dbg !2843
}

declare dso_local i8* @xmalloc(i64) local_unnamed_addr #2

declare dso_local void @loop_optimizer_init(i32) local_unnamed_addr #2

declare dso_local i8* @memset(i8*, i32, i64) local_unnamed_addr #2

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) local_unnamed_addr #2

declare dso_local i32 @pre_and_rev_post_order_compute(i32*, i32*, i8 zeroext) local_unnamed_addr #2

declare dso_local i8* @xcalloc(i64, i64) local_unnamed_addr #2

declare dso_local %struct.pointer_map_t* @pointer_map_create() local_unnamed_addr #2

declare dso_local %union.tree_node* @gimple_default_def(%struct.function*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @insert_operand_rank(%union.tree_node* %e, i64 %rank) unnamed_addr #0 !dbg !2844 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %e, metadata !2848, metadata !DIExpression()), !dbg !2851
  call void @llvm.dbg.value(metadata i64 %rank, metadata !2849, metadata !DIExpression()), !dbg !2851
  %cmp = icmp sgt i64 %rank, 0, !dbg !2852
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !2852

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 205, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !2852
  br label %cond.end, !dbg !2852

cond.end:                                         ; preds = %entry, %cond.true
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @operand_rank, align 8, !dbg !2853
  %1 = bitcast %union.tree_node* %e to i8*, !dbg !2854
  %call = tail call i8** @pointer_map_insert(%struct.pointer_map_t* %0, i8* %1) #6, !dbg !2855
  call void @llvm.dbg.value(metadata i8** %call, metadata !2850, metadata !DIExpression()), !dbg !2851
  %2 = load i8*, i8** %call, align 8, !dbg !2856
  %tobool = icmp eq i8* %2, null, !dbg !2856
  br i1 %tobool, label %cond.end3, label %cond.true1, !dbg !2856

cond.true1:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 207, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !2856
  br label %cond.end3, !dbg !2856

cond.end3:                                        ; preds = %cond.end, %cond.true1
  %3 = inttoptr i64 %rank to i8*, !dbg !2857
  store i8* %3, i8** %call, align 8, !dbg !2858
  ret void, !dbg !2859
}

declare dso_local void @free(i8*) local_unnamed_addr #2

declare dso_local void @calculate_dominance_info(i32) local_unnamed_addr #2

declare dso_local void @fancy_abort(i8*, i32, i8*) local_unnamed_addr #2

declare dso_local i8** @pointer_map_insert(%struct.pointer_map_t*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @break_up_subtract_bb(%struct.basic_block_def* %bb) unnamed_addr #5 !dbg !2860 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !2864, metadata !DIExpression()), !dbg !2876
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2877
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !2877
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2878
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #7, !dbg !2878
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb) #8, !dbg !2878
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !2878
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #7, !dbg !2878
  br label %for.cond, !dbg !2879

for.cond:                                         ; preds = %cleanup172, %entry
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2865, metadata !DIExpression(DW_OP_deref)), !dbg !2876
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !2880
  %tobool = icmp eq i8 %call, 0, !dbg !2881
  br i1 %tobool, label %for.body, label %for.end, !dbg !2882

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2865, metadata !DIExpression(DW_OP_deref)), !dbg !2876
  %call1 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !2883
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call1, metadata !2867, metadata !DIExpression()), !dbg !2884
  call fastcc void @gimple_set_visited(%union.gimple_statement_d* %call1, i8 zeroext 0) #8, !dbg !2885
  %call2 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %call1) #8, !dbg !2886
  %tobool3 = icmp eq i8 %call2, 0, !dbg !2886
  br i1 %tobool3, label %if.end171, label %land.lhs.true, !dbg !2887

land.lhs.true:                                    ; preds = %for.body
  %call4 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %call1) #8, !dbg !2888
  %cmp = icmp eq i32 %call4, 64, !dbg !2889
  br i1 %cmp, label %if.then, label %if.end171, !dbg !2890

if.then:                                          ; preds = %land.lhs.true
  %call6 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %call1) #8, !dbg !2891
  call void @llvm.dbg.value(metadata %union.tree_node* %call6, metadata !2871, metadata !DIExpression()), !dbg !2892
  %call7 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call1) #8, !dbg !2893
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !2874, metadata !DIExpression()), !dbg !2892
  %call8 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %call1) #8, !dbg !2894
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !2875, metadata !DIExpression()), !dbg !2892
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2895
  %2 = bitcast %union.tree_node** %type to i64**, !dbg !2895
  %3 = load i64*, i64** %2, align 8, !dbg !2895
  %bf.load = load i64, i64* %3, align 8, !dbg !2895
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !2895
  %cmp9 = icmp eq i64 %bf.cast1, 6, !dbg !2895
  br i1 %cmp9, label %lor.lhs.false28, label %lor.lhs.false, !dbg !2895

lor.lhs.false:                                    ; preds = %if.then
  %cmp17 = icmp eq i64 %bf.cast1, 7, !dbg !2895
  br i1 %cmp17, label %lor.lhs.false28, label %lor.lhs.false19, !dbg !2895

lor.lhs.false19:                                  ; preds = %lor.lhs.false
  %cmp26 = icmp eq i64 %bf.cast1, 8, !dbg !2895
  br i1 %cmp26, label %lor.lhs.false28, label %land.lhs.true82, !dbg !2897

lor.lhs.false28:                                  ; preds = %lor.lhs.false19, %lor.lhs.false, %if.then
  %type30 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2898
  %4 = bitcast %union.tree_node** %type30 to i64**, !dbg !2898
  %5 = load i64*, i64** %4, align 8, !dbg !2898
  %bf.load32 = load i64, i64* %5, align 8, !dbg !2898
  %bf.cast3414 = and i64 %bf.load32, 65535, !dbg !2898
  %cmp35 = icmp eq i64 %bf.cast3414, 6, !dbg !2898
  br i1 %cmp35, label %lor.lhs.false55, label %lor.lhs.false37, !dbg !2898

lor.lhs.false37:                                  ; preds = %lor.lhs.false28
  %cmp44 = icmp eq i64 %bf.cast3414, 7, !dbg !2898
  br i1 %cmp44, label %lor.lhs.false55, label %lor.lhs.false46, !dbg !2898

lor.lhs.false46:                                  ; preds = %lor.lhs.false37
  %cmp53 = icmp eq i64 %bf.cast3414, 8, !dbg !2898
  br i1 %cmp53, label %lor.lhs.false55, label %land.lhs.true82, !dbg !2899

lor.lhs.false55:                                  ; preds = %lor.lhs.false46, %lor.lhs.false37, %lor.lhs.false28
  %type57 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2900
  %6 = bitcast %union.tree_node** %type57 to i64**, !dbg !2900
  %7 = load i64*, i64** %6, align 8, !dbg !2900
  %bf.load59 = load i64, i64* %7, align 8, !dbg !2900
  %bf.cast6117 = and i64 %bf.load59, 65535, !dbg !2900
  %cmp62 = icmp eq i64 %bf.cast6117, 6, !dbg !2900
  br i1 %cmp62, label %if.end, label %lor.lhs.false64, !dbg !2900

lor.lhs.false64:                                  ; preds = %lor.lhs.false55
  %cmp71 = icmp eq i64 %bf.cast6117, 7, !dbg !2900
  br i1 %cmp71, label %if.end, label %lor.lhs.false73, !dbg !2900

lor.lhs.false73:                                  ; preds = %lor.lhs.false64
  %cmp80 = icmp eq i64 %bf.cast6117, 8, !dbg !2900
  br i1 %cmp80, label %if.end, label %land.lhs.true82, !dbg !2901

land.lhs.true82:                                  ; preds = %lor.lhs.false73, %lor.lhs.false46, %lor.lhs.false19
  %cmp89 = icmp eq i64 %bf.cast1, 9, !dbg !2902
  br i1 %cmp89, label %lor.lhs.false91, label %land.lhs.true111, !dbg !2903

lor.lhs.false91:                                  ; preds = %land.lhs.true82
  %type93 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2904
  %8 = bitcast %union.tree_node** %type93 to i64**, !dbg !2904
  %9 = load i64*, i64** %8, align 8, !dbg !2904
  %bf.load95 = load i64, i64* %9, align 8, !dbg !2904
  %bf.cast9712 = and i64 %bf.load95, 65535, !dbg !2904
  %cmp98 = icmp eq i64 %bf.cast9712, 9, !dbg !2904
  br i1 %cmp98, label %lor.lhs.false100, label %land.lhs.true111, !dbg !2905

lor.lhs.false100:                                 ; preds = %lor.lhs.false91
  %type102 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2906
  %10 = bitcast %union.tree_node** %type102 to i64**, !dbg !2906
  %11 = load i64*, i64** %10, align 8, !dbg !2906
  %bf.load104 = load i64, i64* %11, align 8, !dbg !2906
  %bf.cast10613 = and i64 %bf.load104, 65535, !dbg !2906
  %cmp107 = icmp eq i64 %bf.cast10613, 9, !dbg !2906
  %12 = load i32, i32* @flag_associative_math, align 4, !dbg !2907
  %tobool110 = icmp ne i32 %12, 0, !dbg !2907
  %or.cond = and i1 %cmp107, %tobool110, !dbg !2908
  br i1 %or.cond, label %if.end, label %land.lhs.true111, !dbg !2908

land.lhs.true111:                                 ; preds = %lor.lhs.false100, %lor.lhs.false91, %land.lhs.true82
  %cmp118 = icmp eq i64 %bf.cast1, 11, !dbg !2909
  br i1 %cmp118, label %land.lhs.true120, label %cleanup, !dbg !2909

land.lhs.true120:                                 ; preds = %land.lhs.true111
  %13 = trunc i64 %bf.load to i32, !dbg !2909
  %tobool127 = icmp slt i32 %13, 0, !dbg !2909
  br i1 %tobool127, label %cleanup, label %lor.lhs.false128, !dbg !2910

lor.lhs.false128:                                 ; preds = %land.lhs.true120
  %type130 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2911
  %14 = bitcast %union.tree_node** %type130 to i64**, !dbg !2911
  %15 = load i64*, i64** %14, align 8, !dbg !2911
  %bf.load132 = load i64, i64* %15, align 8, !dbg !2911
  %bf.cast1348 = and i64 %bf.load132, 65535, !dbg !2911
  %cmp135 = icmp eq i64 %bf.cast1348, 11, !dbg !2911
  br i1 %cmp135, label %land.lhs.true137, label %cleanup, !dbg !2911

land.lhs.true137:                                 ; preds = %lor.lhs.false128
  %16 = trunc i64 %bf.load132 to i32, !dbg !2911
  %tobool145 = icmp slt i32 %16, 0, !dbg !2911
  br i1 %tobool145, label %cleanup, label %lor.lhs.false146, !dbg !2912

lor.lhs.false146:                                 ; preds = %land.lhs.true137
  %type148 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2913
  %17 = bitcast %union.tree_node** %type148 to i64**, !dbg !2913
  %18 = load i64*, i64** %17, align 8, !dbg !2913
  %bf.load150 = load i64, i64* %18, align 8, !dbg !2913
  %bf.cast15210 = and i64 %bf.load150, 65535, !dbg !2913
  %cmp153 = icmp eq i64 %bf.cast15210, 11, !dbg !2913
  br i1 %cmp153, label %land.lhs.true155, label %cleanup, !dbg !2913

land.lhs.true155:                                 ; preds = %lor.lhs.false146
  %19 = trunc i64 %bf.load150 to i32, !dbg !2913
  %tobool163 = icmp slt i32 %19, 0, !dbg !2913
  br i1 %tobool163, label %cleanup, label %if.end, !dbg !2914

if.end:                                           ; preds = %lor.lhs.false100, %land.lhs.true155, %lor.lhs.false73, %lor.lhs.false64, %lor.lhs.false55
  %call165 = call fastcc zeroext i8 @should_break_up_subtract(%union.gimple_statement_d* %call1) #8, !dbg !2915
  %tobool166 = icmp eq i8 %call165, 0, !dbg !2915
  br i1 %tobool166, label %cleanup, label %if.then167, !dbg !2917

if.then167:                                       ; preds = %if.end
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2865, metadata !DIExpression(DW_OP_deref)), !dbg !2876
  call fastcc void @break_up_subtract(%union.gimple_statement_d* %call1, %struct.gimple_stmt_iterator* nonnull %gsi) #8, !dbg !2918
  br label %cleanup, !dbg !2918

cleanup:                                          ; preds = %if.end, %if.then167, %land.lhs.true111, %land.lhs.true120, %lor.lhs.false128, %land.lhs.true137, %lor.lhs.false146, %land.lhs.true155
  %cleanup.dest.slot.0 = phi i1 [ false, %land.lhs.true155 ], [ false, %lor.lhs.false146 ], [ false, %land.lhs.true137 ], [ false, %lor.lhs.false128 ], [ false, %land.lhs.true120 ], [ false, %land.lhs.true111 ], [ true, %if.then167 ], [ true, %if.end ]
  br i1 %cleanup.dest.slot.0, label %if.end171, label %cleanup172

if.end171:                                        ; preds = %for.body, %cleanup, %land.lhs.true
  br label %cleanup172, !dbg !2919

cleanup172:                                       ; preds = %cleanup, %if.end171
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2865, metadata !DIExpression(DW_OP_deref)), !dbg !2876
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #8, !dbg !2920
  br label %for.cond, !dbg !2921, !llvm.loop !2922

for.end:                                          ; preds = %for.cond
  %call175 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %bb) #6, !dbg !2924
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call175, metadata !2866, metadata !DIExpression()), !dbg !2876
  br label %for.cond176, !dbg !2926

for.cond176:                                      ; preds = %for.body178, %for.end
  %son.0 = phi %struct.basic_block_def* [ %call175, %for.end ], [ %call180, %for.body178 ], !dbg !2927
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %son.0, metadata !2866, metadata !DIExpression()), !dbg !2876
  %tobool177 = icmp eq %struct.basic_block_def* %son.0, null, !dbg !2928
  br i1 %tobool177, label %for.end181, label %for.body178, !dbg !2928

for.body178:                                      ; preds = %for.cond176
  call fastcc void @break_up_subtract_bb(%struct.basic_block_def* nonnull %son.0) #8, !dbg !2929
  %call180 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* nonnull %son.0) #6, !dbg !2931
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call180, metadata !2866, metadata !DIExpression()), !dbg !2876
  br label %for.cond176, !dbg !2932, !llvm.loop !2933

for.end181:                                       ; preds = %for.cond176
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !2935
  ret void, !dbg !2935
}

; Function Attrs: nounwind uwtable
define internal fastcc void @reassociate_bb(%struct.basic_block_def* %bb) unnamed_addr #5 !dbg !2936 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp17 = alloca %struct.gimple_stmt_iterator, align 8
  %ops = alloca %struct.VEC_operand_entry_t_heap*, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !2938, metadata !DIExpression()), !dbg !2954
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !2955
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !2955
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !2956
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #7, !dbg !2956
  call fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb) #8, !dbg !2956
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !2956
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #7, !dbg !2956
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp17 to i8*, !dbg !2957
  %3 = bitcast %struct.VEC_operand_entry_t_heap** %ops to i8*, !dbg !2964
  br label %for.cond, !dbg !2965

for.cond:                                         ; preds = %for.inc, %entry
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2939, metadata !DIExpression(DW_OP_deref)), !dbg !2954
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !2966
  %tobool = icmp eq i8 %call, 0, !dbg !2967
  br i1 %tobool, label %for.body, label %for.end, !dbg !2968

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2939, metadata !DIExpression(DW_OP_deref)), !dbg !2954
  %call1 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !2969
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call1, metadata !2941, metadata !DIExpression()), !dbg !2970
  %call2 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %call1) #8, !dbg !2971
  %tobool3 = icmp eq i8 %call2, 0, !dbg !2971
  br i1 %tobool3, label %if.end252, label %if.then, !dbg !2972

if.then:                                          ; preds = %for.body
  %call4 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %call1) #8, !dbg !2973
  call void @llvm.dbg.value(metadata i32 %call4, metadata !2950, metadata !DIExpression()), !dbg !2974
  %call5 = call fastcc i32 @get_gimple_rhs_class(i32 %call4) #8, !dbg !2975
  %cmp = icmp eq i32 %call5, 1, !dbg !2977
  br i1 %cmp, label %if.end, label %cleanup246, !dbg !2978

if.end:                                           ; preds = %if.then
  %call7 = call fastcc zeroext i8 @gimple_visited_p(%union.gimple_statement_d* %call1) #8, !dbg !2979
  %tobool8 = icmp eq i8 %call7, 0, !dbg !2979
  br i1 %tobool8, label %if.end24, label %if.then9, !dbg !2980

if.then9:                                         ; preds = %if.end
  %call10 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %call1) #6, !dbg !2981
  %call11 = call fastcc zeroext i8 @has_zero_uses(%union.tree_node* %call10) #8, !dbg !2982
  %tobool12 = icmp eq i8 %call11, 0, !dbg !2982
  br i1 %tobool12, label %if.end23, label %if.then13, !dbg !2983

if.then13:                                        ; preds = %if.then9
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2939, metadata !DIExpression(DW_OP_deref)), !dbg !2954
  call void @gsi_remove(%struct.gimple_stmt_iterator* nonnull %gsi, i8 zeroext 1) #6, !dbg !2984
  call void @release_defs(%union.gimple_statement_d* %call1) #6, !dbg !2985
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2939, metadata !DIExpression(DW_OP_deref)), !dbg !2954
  %call14 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !2986
  %tobool15 = icmp eq i8 %call14, 0, !dbg !2986
  br i1 %tobool15, label %if.end23, label %if.then16, !dbg !2987

if.then16:                                        ; preds = %if.then13
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #7, !dbg !2988
  call fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp17, %struct.basic_block_def* %bb) #8, !dbg !2988
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %2, i64 24, i1 false), !dbg !2988
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #7, !dbg !2988
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2939, metadata !DIExpression(DW_OP_deref)), !dbg !2954
  %call18 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !2989
  %tobool19 = icmp eq i8 %call18, 0, !dbg !2989
  br i1 %tobool19, label %if.end23, label %cleanup246, !dbg !2991

if.end23:                                         ; preds = %if.then16, %if.then13, %if.then9
  br label %cleanup246, !dbg !2992

if.end24:                                         ; preds = %if.end
  %call25 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %call1) #8, !dbg !2993
  call void @llvm.dbg.value(metadata %union.tree_node* %call25, metadata !2945, metadata !DIExpression()), !dbg !2974
  %call26 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call1) #8, !dbg !2994
  call void @llvm.dbg.value(metadata %union.tree_node* %call26, metadata !2948, metadata !DIExpression()), !dbg !2974
  %call27 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %call1) #8, !dbg !2995
  call void @llvm.dbg.value(metadata %union.tree_node* %call27, metadata !2949, metadata !DIExpression()), !dbg !2974
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2996
  %4 = bitcast %union.tree_node** %type to i64**, !dbg !2996
  %5 = load i64*, i64** %4, align 8, !dbg !2996
  %bf.load = load i64, i64* %5, align 8, !dbg !2996
  %bf.cast3 = and i64 %bf.load, 65535, !dbg !2996
  %cmp28 = icmp eq i64 %bf.cast3, 6, !dbg !2996
  br i1 %cmp28, label %lor.lhs.false44, label %lor.lhs.false, !dbg !2996

lor.lhs.false:                                    ; preds = %if.end24
  %cmp35 = icmp eq i64 %bf.cast3, 7, !dbg !2996
  br i1 %cmp35, label %lor.lhs.false44, label %lor.lhs.false36, !dbg !2996

lor.lhs.false36:                                  ; preds = %lor.lhs.false
  %cmp43 = icmp eq i64 %bf.cast3, 8, !dbg !2996
  br i1 %cmp43, label %lor.lhs.false44, label %land.lhs.true, !dbg !2998

lor.lhs.false44:                                  ; preds = %lor.lhs.false36, %lor.lhs.false, %if.end24
  %type46 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !2999
  %6 = bitcast %union.tree_node** %type46 to i64**, !dbg !2999
  %7 = load i64*, i64** %6, align 8, !dbg !2999
  %bf.load48 = load i64, i64* %7, align 8, !dbg !2999
  %bf.cast5016 = and i64 %bf.load48, 65535, !dbg !2999
  %cmp51 = icmp eq i64 %bf.cast5016, 6, !dbg !2999
  br i1 %cmp51, label %lor.lhs.false68, label %lor.lhs.false52, !dbg !2999

lor.lhs.false52:                                  ; preds = %lor.lhs.false44
  %cmp59 = icmp eq i64 %bf.cast5016, 7, !dbg !2999
  br i1 %cmp59, label %lor.lhs.false68, label %lor.lhs.false60, !dbg !2999

lor.lhs.false60:                                  ; preds = %lor.lhs.false52
  %cmp67 = icmp eq i64 %bf.cast5016, 8, !dbg !2999
  br i1 %cmp67, label %lor.lhs.false68, label %land.lhs.true, !dbg !3000

lor.lhs.false68:                                  ; preds = %lor.lhs.false60, %lor.lhs.false52, %lor.lhs.false44
  %type70 = getelementptr inbounds %union.tree_node, %union.tree_node* %call27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3001
  %8 = bitcast %union.tree_node** %type70 to i64**, !dbg !3001
  %9 = load i64*, i64** %8, align 8, !dbg !3001
  %bf.load72 = load i64, i64* %9, align 8, !dbg !3001
  %bf.cast7419 = and i64 %bf.load72, 65535, !dbg !3001
  %cmp75 = icmp eq i64 %bf.cast7419, 6, !dbg !3001
  br i1 %cmp75, label %if.end168, label %lor.lhs.false76, !dbg !3001

lor.lhs.false76:                                  ; preds = %lor.lhs.false68
  %cmp83 = icmp eq i64 %bf.cast7419, 7, !dbg !3001
  br i1 %cmp83, label %if.end168, label %lor.lhs.false84, !dbg !3001

lor.lhs.false84:                                  ; preds = %lor.lhs.false76
  %cmp91 = icmp eq i64 %bf.cast7419, 8, !dbg !3001
  br i1 %cmp91, label %if.end168, label %land.lhs.true, !dbg !3002

land.lhs.true:                                    ; preds = %lor.lhs.false84, %lor.lhs.false60, %lor.lhs.false36
  %cmp98 = icmp eq i64 %bf.cast3, 9, !dbg !3003
  br i1 %cmp98, label %lor.lhs.false99, label %land.lhs.true117, !dbg !3004

lor.lhs.false99:                                  ; preds = %land.lhs.true
  %type101 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3005
  %10 = bitcast %union.tree_node** %type101 to i64**, !dbg !3005
  %11 = load i64*, i64** %10, align 8, !dbg !3005
  %bf.load103 = load i64, i64* %11, align 8, !dbg !3005
  %bf.cast10514 = and i64 %bf.load103, 65535, !dbg !3005
  %cmp106 = icmp eq i64 %bf.cast10514, 9, !dbg !3005
  br i1 %cmp106, label %lor.lhs.false107, label %land.lhs.true117, !dbg !3006

lor.lhs.false107:                                 ; preds = %lor.lhs.false99
  %type109 = getelementptr inbounds %union.tree_node, %union.tree_node* %call27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3007
  %12 = bitcast %union.tree_node** %type109 to i64**, !dbg !3007
  %13 = load i64*, i64** %12, align 8, !dbg !3007
  %bf.load111 = load i64, i64* %13, align 8, !dbg !3007
  %bf.cast11315 = and i64 %bf.load111, 65535, !dbg !3007
  %cmp114 = icmp eq i64 %bf.cast11315, 9, !dbg !3007
  %14 = load i32, i32* @flag_associative_math, align 4, !dbg !3008
  %tobool116 = icmp ne i32 %14, 0, !dbg !3008
  %or.cond = and i1 %cmp114, %tobool116, !dbg !3009
  br i1 %or.cond, label %if.end168, label %land.lhs.true117, !dbg !3009

land.lhs.true117:                                 ; preds = %lor.lhs.false107, %lor.lhs.false99, %land.lhs.true
  %cmp124 = icmp eq i64 %bf.cast3, 11, !dbg !3010
  br i1 %cmp124, label %land.lhs.true125, label %cleanup246, !dbg !3010

land.lhs.true125:                                 ; preds = %land.lhs.true117
  %15 = trunc i64 %bf.load to i32, !dbg !3010
  %tobool132 = icmp slt i32 %15, 0, !dbg !3010
  br i1 %tobool132, label %cleanup246, label %lor.lhs.false133, !dbg !3011

lor.lhs.false133:                                 ; preds = %land.lhs.true125
  %type135 = getelementptr inbounds %union.tree_node, %union.tree_node* %call26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3012
  %16 = bitcast %union.tree_node** %type135 to i64**, !dbg !3012
  %17 = load i64*, i64** %16, align 8, !dbg !3012
  %bf.load137 = load i64, i64* %17, align 8, !dbg !3012
  %bf.cast1399 = and i64 %bf.load137, 65535, !dbg !3012
  %cmp140 = icmp eq i64 %bf.cast1399, 11, !dbg !3012
  br i1 %cmp140, label %land.lhs.true141, label %cleanup246, !dbg !3012

land.lhs.true141:                                 ; preds = %lor.lhs.false133
  %18 = trunc i64 %bf.load137 to i32, !dbg !3012
  %tobool149 = icmp slt i32 %18, 0, !dbg !3012
  br i1 %tobool149, label %cleanup246, label %lor.lhs.false150, !dbg !3013

lor.lhs.false150:                                 ; preds = %land.lhs.true141
  %type152 = getelementptr inbounds %union.tree_node, %union.tree_node* %call27, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3014
  %19 = bitcast %union.tree_node** %type152 to i64**, !dbg !3014
  %20 = load i64*, i64** %19, align 8, !dbg !3014
  %bf.load154 = load i64, i64* %20, align 8, !dbg !3014
  %bf.cast15611 = and i64 %bf.load154, 65535, !dbg !3014
  %cmp157 = icmp eq i64 %bf.cast15611, 11, !dbg !3014
  br i1 %cmp157, label %land.lhs.true158, label %cleanup246, !dbg !3014

land.lhs.true158:                                 ; preds = %lor.lhs.false150
  %21 = trunc i64 %bf.load154 to i32, !dbg !3014
  %tobool166 = icmp slt i32 %21, 0, !dbg !3014
  br i1 %tobool166, label %cleanup246, label %if.end168, !dbg !3015

if.end168:                                        ; preds = %lor.lhs.false107, %land.lhs.true158, %lor.lhs.false84, %lor.lhs.false76, %lor.lhs.false68
  %call169 = call zeroext i8 @associative_tree_code(i32 %call4) #6, !dbg !3016
  %tobool170 = icmp eq i8 %call169, 0, !dbg !3016
  br i1 %tobool170, label %if.end245, label %if.then171, !dbg !3017

if.then171:                                       ; preds = %if.end168
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #7, !dbg !3018
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* null, metadata !2951, metadata !DIExpression()), !dbg !2964
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3019
  %22 = getelementptr inbounds %union.tree_node, %union.tree_node* %call25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3020
  %bf.load173 = load i64, i64* %22, align 8, !dbg !3020
  %bf.cast17513 = and i64 %bf.load173, 65535, !dbg !3022
  %cmp176 = icmp eq i64 %bf.cast17513, 141, !dbg !3022
  br i1 %cmp176, label %land.lhs.true177, label %if.end181, !dbg !3023

land.lhs.true177:                                 ; preds = %if.then171
  %call178 = call fastcc zeroext i8 @has_zero_uses(%union.tree_node* %call25) #8, !dbg !3024
  %tobool179 = icmp eq i8 %call178, 0, !dbg !3024
  br i1 %tobool179, label %if.end181, label %cleanup, !dbg !3025

if.end181:                                        ; preds = %land.lhs.true177, %if.then171
  call fastcc void @gimple_set_visited(%union.gimple_statement_d* %call1, i8 zeroext 1) #8, !dbg !3026
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !2951, metadata !DIExpression(DW_OP_deref)), !dbg !2964
  call fastcc void @linearize_expr_tree(%struct.VEC_operand_entry_t_heap** nonnull %ops, %union.gimple_statement_d* %call1, i8 zeroext 1, i8 zeroext 1) #8, !dbg !3027
  %23 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3028
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %23, metadata !2951, metadata !DIExpression()), !dbg !2964
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %23, metadata !2951, metadata !DIExpression()), !dbg !2964
  %base183 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %23, i64 0, i32 0, !dbg !3028
  %call184 = call fastcc %struct.operand_entry** @VEC_operand_entry_t_base_address(%struct.VEC_operand_entry_t_base* %base183) #8, !dbg !3028
  %24 = bitcast %struct.operand_entry** %call184 to i8*, !dbg !3028
  %25 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3029
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %25, metadata !2951, metadata !DIExpression()), !dbg !2964
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %25, metadata !2951, metadata !DIExpression()), !dbg !2964
  %base187 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %25, i64 0, i32 0, !dbg !3029
  %call191 = call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %base187) #8, !dbg !3029
  %conv192 = zext i32 %call191 to i64, !dbg !3029
  call void @spec_qsort(i8* %24, i64 %conv192, i64 8, i32 (i8*, i8*)* nonnull @sort_by_operand_rank) #6, !dbg !3030
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !2951, metadata !DIExpression(DW_OP_deref)), !dbg !2964
  call fastcc void @optimize_ops_list(i32 %call4, %struct.VEC_operand_entry_t_heap** nonnull %ops) #8, !dbg !3031
  %call193 = call fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %call1) #8, !dbg !3032
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !2951, metadata !DIExpression(DW_OP_deref)), !dbg !2964
  %call194 = call fastcc zeroext i8 @undistribute_ops_list(i32 %call4, %struct.VEC_operand_entry_t_heap** nonnull %ops, %struct.loop* %call193) #8, !dbg !3034
  %tobool195 = icmp eq i8 %call194, 0, !dbg !3034
  br i1 %tobool195, label %if.end212, label %if.then196, !dbg !3035

if.then196:                                       ; preds = %if.end181
  %26 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3036
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %26, metadata !2951, metadata !DIExpression()), !dbg !2964
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %26, metadata !2951, metadata !DIExpression()), !dbg !2964
  %base199 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %26, i64 0, i32 0, !dbg !3036
  %call203 = call fastcc %struct.operand_entry** @VEC_operand_entry_t_base_address(%struct.VEC_operand_entry_t_base* %base199) #8, !dbg !3036
  %27 = bitcast %struct.operand_entry** %call203 to i8*, !dbg !3036
  %28 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3038
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %28, metadata !2951, metadata !DIExpression()), !dbg !2964
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %28, metadata !2951, metadata !DIExpression()), !dbg !2964
  %base206 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %28, i64 0, i32 0, !dbg !3038
  %call210 = call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %base206) #8, !dbg !3038
  %conv211 = zext i32 %call210 to i64, !dbg !3038
  call void @spec_qsort(i8* %27, i64 %conv211, i64 8, i32 (i8*, i8*)* nonnull @sort_by_operand_rank) #6, !dbg !3039
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !2951, metadata !DIExpression(DW_OP_deref)), !dbg !2964
  call fastcc void @optimize_ops_list(i32 %call4, %struct.VEC_operand_entry_t_heap** nonnull %ops) #8, !dbg !3040
  br label %if.end212, !dbg !3041

if.end212:                                        ; preds = %if.end181, %if.then196
  %29 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3042
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %29, metadata !2951, metadata !DIExpression()), !dbg !2964
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %29, metadata !2951, metadata !DIExpression()), !dbg !2964
  %base215 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %29, i64 0, i32 0, !dbg !3042
  %call219 = call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %base215) #8, !dbg !3042
  %cmp220 = icmp eq i32 %call219, 1, !dbg !3044
  br i1 %cmp220, label %if.then222, label %if.else, !dbg !3045

if.then222:                                       ; preds = %if.end212
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3046
  %tobool223 = icmp eq %struct._IO_FILE* %30, null, !dbg !3046
  br i1 %tobool223, label %if.end228, label %land.lhs.true224, !dbg !3049

land.lhs.true224:                                 ; preds = %if.then222
  %31 = load i32, i32* @dump_flags, align 4, !dbg !3050
  %and = and i32 %31, 8, !dbg !3051
  %tobool225 = icmp eq i32 %and, 0, !dbg !3051
  br i1 %tobool225, label %if.end228, label %if.then226, !dbg !3052

if.then226:                                       ; preds = %land.lhs.true224
  %call227 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %30, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)) #6, !dbg !3053
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3055
  call void @print_gimple_stmt(%struct._IO_FILE* %32, %union.gimple_statement_d* %call1, i32 0, i32 0) #6, !dbg !3056
  br label %if.end228, !dbg !3057

if.end228:                                        ; preds = %land.lhs.true224, %if.then222, %if.then226
  %call229 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call1) #8, !dbg !3058
  call void @llvm.dbg.value(metadata %union.tree_node* %call229, metadata !2948, metadata !DIExpression()), !dbg !2974
  %33 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3059
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %33, metadata !2951, metadata !DIExpression()), !dbg !2964
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %33, metadata !2951, metadata !DIExpression()), !dbg !2964
  %base232 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %33, i64 0, i32 0, !dbg !3059
  %call236 = call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %base232) #8, !dbg !3059
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call236, i64 0, i32 1, !dbg !3060
  %34 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3060
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2939, metadata !DIExpression(DW_OP_deref)), !dbg !2954
  call void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator* nonnull %gsi, %union.tree_node* %34) #6, !dbg !3061
  call fastcc void @update_stmt(%union.gimple_statement_d* %call1) #8, !dbg !3062
  call fastcc void @remove_visited_stmt_chain(%union.tree_node* %call229) #8, !dbg !3063
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3064
  %tobool237 = icmp eq %struct._IO_FILE* %35, null, !dbg !3064
  br i1 %tobool237, label %if.end244, label %land.lhs.true238, !dbg !3066

land.lhs.true238:                                 ; preds = %if.end228
  %36 = load i32, i32* @dump_flags, align 4, !dbg !3067
  %and239 = and i32 %36, 8, !dbg !3068
  %tobool240 = icmp eq i32 %and239, 0, !dbg !3068
  br i1 %tobool240, label %if.end244, label %if.then241, !dbg !3069

if.then241:                                       ; preds = %land.lhs.true238
  %call242 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %35, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)) #6, !dbg !3070
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3072
  call void @print_gimple_stmt(%struct._IO_FILE* %37, %union.gimple_statement_d* %call1, i32 0, i32 0) #6, !dbg !3073
  br label %if.end244, !dbg !3074

if.else:                                          ; preds = %if.end212
  %38 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3075
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %38, metadata !2951, metadata !DIExpression()), !dbg !2964
  call fastcc void @rewrite_expr_tree(%union.gimple_statement_d* %call1, i32 0, %struct.VEC_operand_entry_t_heap* %38, i8 zeroext 0) #8, !dbg !3076
  br label %if.end244

if.end244:                                        ; preds = %land.lhs.true238, %if.end228, %if.then241, %if.else
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !2951, metadata !DIExpression(DW_OP_deref)), !dbg !2964
  call fastcc void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** nonnull %ops) #8, !dbg !3077
  br label %cleanup, !dbg !3078

cleanup:                                          ; preds = %land.lhs.true177, %if.end244
  %cleanup.dest.slot.0 = phi i32 [ 0, %if.end244 ], [ 4, %land.lhs.true177 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #7, !dbg !3078
  %cond2 = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %cond2, label %if.end245, label %cleanup246

if.end245:                                        ; preds = %if.end168, %cleanup
  br label %cleanup246, !dbg !3079

cleanup246:                                       ; preds = %if.then16, %if.then, %land.lhs.true117, %land.lhs.true125, %lor.lhs.false133, %land.lhs.true141, %lor.lhs.false150, %land.lhs.true158, %cleanup, %if.end245, %if.end23
  %cleanup.dest.slot.1 = phi i32 [ 4, %if.end23 ], [ %cleanup.dest.slot.0, %cleanup ], [ 0, %if.end245 ], [ 4, %if.then ], [ 2, %if.then16 ], [ 4, %land.lhs.true158 ], [ 4, %lor.lhs.false150 ], [ 4, %land.lhs.true141 ], [ 4, %lor.lhs.false133 ], [ 4, %land.lhs.true125 ], [ 4, %land.lhs.true117 ]
  %cond1 = icmp eq i32 %cleanup.dest.slot.1, 0
  br i1 %cond1, label %if.end252, label %cleanup253

if.end252:                                        ; preds = %for.body, %cleanup246
  br label %cleanup253, !dbg !3080

cleanup253:                                       ; preds = %cleanup246, %if.end252
  %cleanup.dest.slot.2 = phi i32 [ %cleanup.dest.slot.1, %cleanup246 ], [ 0, %if.end252 ]
  %switch = icmp eq i32 %cleanup.dest.slot.2, 2
  br i1 %switch, label %for.end, label %for.inc

for.inc:                                          ; preds = %cleanup253
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !2939, metadata !DIExpression(DW_OP_deref)), !dbg !2954
  call fastcc void @gsi_prev(%struct.gimple_stmt_iterator* nonnull %gsi) #8, !dbg !3081
  br label %for.cond, !dbg !3082, !llvm.loop !3083

for.end:                                          ; preds = %cleanup253, %for.cond
  %call256 = call %struct.basic_block_def* @first_dom_son(i32 2, %struct.basic_block_def* %bb) #6, !dbg !3085
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call256, metadata !2940, metadata !DIExpression()), !dbg !2954
  br label %for.cond257, !dbg !3087

for.cond257:                                      ; preds = %for.body259, %for.end
  %son.0 = phi %struct.basic_block_def* [ %call256, %for.end ], [ %call261, %for.body259 ], !dbg !3088
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %son.0, metadata !2940, metadata !DIExpression()), !dbg !2954
  %tobool258 = icmp eq %struct.basic_block_def* %son.0, null, !dbg !3089
  br i1 %tobool258, label %for.end262, label %for.body259, !dbg !3089

for.body259:                                      ; preds = %for.cond257
  call fastcc void @reassociate_bb(%struct.basic_block_def* nonnull %son.0) #8, !dbg !3090
  %call261 = call %struct.basic_block_def* @next_dom_son(i32 2, %struct.basic_block_def* nonnull %son.0) #6, !dbg !3092
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call261, metadata !2940, metadata !DIExpression()), !dbg !2954
  br label %for.cond257, !dbg !3093, !llvm.loop !3094

for.end262:                                       ; preds = %for.cond257
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !3096
  ret void, !dbg !3096
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) unnamed_addr #0 !dbg !3097 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !3101, metadata !DIExpression()), !dbg !3104
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3102, metadata !DIExpression()), !dbg !3105
  %call = tail call fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #8, !dbg !3106
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !3103, metadata !DIExpression()), !dbg !3104
  %call1 = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %call) #8, !dbg !3107
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !3108
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3109
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !3110
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq2, align 8, !dbg !3111
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !3112
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb3, align 8, !dbg !3113
  ret void, !dbg !3114
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !3115 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3119, metadata !DIExpression()), !dbg !3120
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3121
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3121
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !3122
  %conv1 = zext i1 %cmp to i8, !dbg !3123
  ret i8 %conv1, !dbg !3124
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !3125 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !3129, metadata !DIExpression()), !dbg !3130
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3131
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3131
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 0, !dbg !3132
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3132
  ret %union.gimple_statement_d* %1, !dbg !3133
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_visited(%union.gimple_statement_d* %stmt, i8 zeroext %visited_p) unnamed_addr #0 !dbg !3134 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3138, metadata !DIExpression()), !dbg !3140
  call void @llvm.dbg.value(metadata i8 %visited_p, metadata !3139, metadata !DIExpression()), !dbg !3140
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !3141
  %bf.load = load i32, i32* %0, align 8, !dbg !3142
  %1 = and i8 %visited_p, 1, !dbg !3142
  %bf.value = zext i8 %1 to i32, !dbg !3142
  %bf.shl = shl nuw nsw i32 %bf.value, 9, !dbg !3142
  %bf.clear = and i32 %bf.load, -513, !dbg !3142
  %bf.set = or i32 %bf.clear, %bf.shl, !dbg !3142
  store i32 %bf.set, i32* %0, align 8, !dbg !3142
  ret void, !dbg !3143
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3144 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3149, metadata !DIExpression()), !dbg !3150
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !3151
  %cmp = icmp eq i32 %call, 6, !dbg !3152
  %conv1 = zext i1 %cmp to i8, !dbg !3151
  ret i8 %conv1, !dbg !3153
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3154 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3158, metadata !DIExpression()), !dbg !3160
  %call = tail call fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %gs) #8, !dbg !3161
  call void @llvm.dbg.value(metadata i32 %call, metadata !3159, metadata !DIExpression()), !dbg !3160
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #8, !dbg !3162
  %cmp = icmp eq i32 %call1, 3, !dbg !3164
  br i1 %cmp, label %if.then, label %if.end, !dbg !3165

if.then:                                          ; preds = %entry
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #8, !dbg !3166
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3166
  %bf.load = load i64, i64* %0, align 8, !dbg !3166
  %1 = trunc i64 %bf.load to i32, !dbg !3166
  %bf.cast = and i32 %1, 65535, !dbg !3166
  call void @llvm.dbg.value(metadata i32 %bf.cast, metadata !3159, metadata !DIExpression()), !dbg !3160
  br label %if.end, !dbg !3167

if.end:                                           ; preds = %if.then, %entry
  %code.0 = phi i32 [ %bf.cast, %if.then ], [ %call, %entry ], !dbg !3160
  call void @llvm.dbg.value(metadata i32 %code.0, metadata !3159, metadata !DIExpression()), !dbg !3160
  ret i32 %code.0, !dbg !3168
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3169 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3173, metadata !DIExpression()), !dbg !3174
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #8, !dbg !3175
  ret %union.tree_node* %call, !dbg !3176
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3177 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3179, metadata !DIExpression()), !dbg !3180
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #8, !dbg !3181
  ret %union.tree_node* %call, !dbg !3182
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3183 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3185, metadata !DIExpression()), !dbg !3186
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #8, !dbg !3187
  %cmp = icmp ugt i32 %call, 2, !dbg !3189
  br i1 %cmp, label %if.then, label %return, !dbg !3190

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 2) #8, !dbg !3191
  br label %return, !dbg !3192

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %call1, %if.then ], [ null, %entry ], !dbg !3193
  ret %union.tree_node* %retval.0, !dbg !3194
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @should_break_up_subtract(%union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !3195 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3199, metadata !DIExpression()), !dbg !3205
  %call = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !3206
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !3200, metadata !DIExpression()), !dbg !3205
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #8, !dbg !3207
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !3201, metadata !DIExpression()), !dbg !3205
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #8, !dbg !3208
  call void @llvm.dbg.value(metadata %union.tree_node* %call2, metadata !3202, metadata !DIExpression()), !dbg !3205
  %call3 = tail call fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !3209
  call void @llvm.dbg.value(metadata %struct.loop* %call3, metadata !3204, metadata !DIExpression()), !dbg !3205
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3210
  %bf.load = load i64, i64* %0, align 8, !dbg !3210
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3212
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !3212
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3213

land.lhs.true:                                    ; preds = %entry
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3214
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !3214
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %1, align 8, !dbg !3214
  %call4 = tail call fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %2, i32 63, %struct.loop* %call3) #8, !dbg !3215
  %tobool = icmp eq i8 %call4, 0, !dbg !3215
  br i1 %tobool, label %if.end, label %cleanup, !dbg !3216

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3217
  %bf.load6 = load i64, i64* %3, align 8, !dbg !3217
  %bf.cast82 = and i64 %bf.load6, 65535, !dbg !3219
  %cmp9 = icmp eq i64 %bf.cast82, 141, !dbg !3219
  br i1 %cmp9, label %land.lhs.true11, label %if.end18, !dbg !3220

land.lhs.true11:                                  ; preds = %if.end
  %def_stmt13 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3221
  %4 = bitcast %union.tree_node** %def_stmt13 to %union.gimple_statement_d**, !dbg !3221
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %4, align 8, !dbg !3221
  %call14 = tail call fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %5, i32 63, %struct.loop* %call3) #8, !dbg !3222
  %tobool16 = icmp eq i8 %call14, 0, !dbg !3222
  br i1 %tobool16, label %if.end18, label %cleanup, !dbg !3223

if.end18:                                         ; preds = %land.lhs.true11, %if.end
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3224
  %bf.load20 = load i64, i64* %6, align 8, !dbg !3224
  %bf.cast223 = and i64 %bf.load20, 65535, !dbg !3226
  %cmp23 = icmp eq i64 %bf.cast223, 141, !dbg !3226
  br i1 %cmp23, label %land.lhs.true25, label %if.end40, !dbg !3227

land.lhs.true25:                                  ; preds = %if.end18
  %call26 = tail call fastcc %union.gimple_statement_d* @get_single_immediate_use(%union.tree_node* %call) #8, !dbg !3228
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call26, metadata !3203, metadata !DIExpression()), !dbg !3205
  %tobool27 = icmp eq %union.gimple_statement_d* %call26, null, !dbg !3229
  br i1 %tobool27, label %if.end40, label %land.lhs.true28, !dbg !3230

land.lhs.true28:                                  ; preds = %land.lhs.true25
  %call29 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* nonnull %call26) #8, !dbg !3231
  %tobool31 = icmp eq i8 %call29, 0, !dbg !3231
  br i1 %tobool31, label %if.end40, label %land.lhs.true32, !dbg !3232

land.lhs.true32:                                  ; preds = %land.lhs.true28
  %call33 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* nonnull %call26) #8, !dbg !3233
  %cmp34 = icmp eq i32 %call33, 63, !dbg !3234
  br i1 %cmp34, label %cleanup, label %lor.lhs.false, !dbg !3235

lor.lhs.false:                                    ; preds = %land.lhs.true32
  %call36 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* nonnull %call26) #8, !dbg !3236
  %cmp37 = icmp eq i32 %call36, 65, !dbg !3237
  br i1 %cmp37, label %cleanup, label %if.end40, !dbg !3238

if.end40:                                         ; preds = %land.lhs.true28, %land.lhs.true25, %lor.lhs.false, %if.end18
  br label %cleanup, !dbg !3239

cleanup:                                          ; preds = %land.lhs.true, %land.lhs.true11, %land.lhs.true32, %lor.lhs.false, %if.end40
  %retval.0 = phi i8 [ 0, %if.end40 ], [ 1, %land.lhs.true ], [ 1, %land.lhs.true11 ], [ 1, %lor.lhs.false ], [ 1, %land.lhs.true32 ], !dbg !3205
  ret i8 %retval.0, !dbg !3240
}

; Function Attrs: nounwind uwtable
define internal fastcc void @break_up_subtract(%union.gimple_statement_d* %stmt, %struct.gimple_stmt_iterator* %gsip) unnamed_addr #5 !dbg !3241 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3246, metadata !DIExpression()), !dbg !3250
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsip, metadata !3247, metadata !DIExpression()), !dbg !3250
  %call = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #8, !dbg !3251
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !3248, metadata !DIExpression()), !dbg !3250
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #8, !dbg !3252
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !3249, metadata !DIExpression()), !dbg !3250
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3253
  %tobool = icmp eq %struct._IO_FILE* %0, null, !dbg !3253
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !3255

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @dump_flags, align 4, !dbg !3256
  %and = and i32 %1, 8, !dbg !3257
  %tobool2 = icmp eq i32 %and, 0, !dbg !3257
  br i1 %tobool2, label %if.end, label %if.then, !dbg !3258

if.then:                                          ; preds = %land.lhs.true
  %call3 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0)) #6, !dbg !3259
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3261
  tail call void @print_gimple_stmt(%struct._IO_FILE* %2, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !3262
  br label %if.end, !dbg !3263

if.end:                                           ; preds = %land.lhs.true, %entry, %if.then
  %call4 = tail call fastcc %union.tree_node* @negate_value(%union.tree_node* %call1, %struct.gimple_stmt_iterator* %gsip) #8, !dbg !3264
  call void @llvm.dbg.value(metadata %union.tree_node* %call4, metadata !3249, metadata !DIExpression()), !dbg !3250
  tail call void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator* %gsip, i32 63, %union.tree_node* %call, %union.tree_node* %call4) #6, !dbg !3265
  tail call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !3266
  ret void, !dbg !3267
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_next(%struct.gimple_stmt_iterator* %i) unnamed_addr #0 !dbg !3268 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !3272, metadata !DIExpression()), !dbg !3273
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !3274
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3274
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 2, !dbg !3275
  %1 = bitcast %struct.gimple_seq_node_d** %next to i64*, !dbg !3275
  %2 = load i64, i64* %1, align 8, !dbg !3275
  %3 = bitcast %struct.gimple_stmt_iterator* %i to i64*, !dbg !3276
  store i64 %2, i64* %3, align 8, !dbg !3276
  ret void, !dbg !3277
}

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) local_unnamed_addr #2

declare dso_local %struct.basic_block_def* @next_dom_son(i32, %struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !3278 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !3285, metadata !DIExpression()), !dbg !3286
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 13, !dbg !3287
  %0 = load i32, i32* %flags, align 8, !dbg !3287
  %and = and i32 %0, 512, !dbg !3288
  %tobool = icmp eq i32 %and, 0, !dbg !3288
  br i1 %tobool, label %land.lhs.true, label %cond.end, !dbg !3289

land.lhs.true:                                    ; preds = %entry
  %gimple = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 7, i32 0, !dbg !3290
  %1 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !3290
  %tobool1 = icmp eq %struct.gimple_bb_info* %1, null, !dbg !3291
  br i1 %tobool1, label %cond.end, label %cond.true, !dbg !3292

cond.true:                                        ; preds = %land.lhs.true
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %1, i64 0, i32 0, !dbg !3293
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3293
  br label %cond.end, !dbg !3292

cond.end:                                         ; preds = %land.lhs.true, %entry, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %2, %cond.true ], [ null, %land.lhs.true ], [ null, %entry ], !dbg !3292
  ret %struct.gimple_seq_d* %cond, !dbg !3294
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !3295 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !3302, metadata !DIExpression()), !dbg !3303
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !3304
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3304

cond.true:                                        ; preds = %entry
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 0, !dbg !3305
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !3305
  br label %cond.end, !dbg !3304

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !3304
  ret %struct.gimple_seq_node_d* %cond, !dbg !3306
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_code(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !3307 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3311, metadata !DIExpression()), !dbg !3312
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 0, !dbg !3313
  %bf.load = load i32, i32* %0, align 8, !dbg !3313
  %bf.clear = and i32 %bf.load, 255, !dbg !3313
  ret i32 %bf.clear, !dbg !3314
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !3315 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3317, metadata !DIExpression()), !dbg !3319
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !3320
  call void @llvm.dbg.value(metadata i32 %call, metadata !3318, metadata !DIExpression()), !dbg !3319
  switch i32 %call, label %if.else4 [
    i32 6, label %if.then
    i32 1, label %if.then
    i32 8, label %cleanup
  ], !dbg !3321

if.then:                                          ; preds = %entry, %entry
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !3323
  %bf.load = load i32, i32* %0, align 8, !dbg !3323
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !3323
  br label %cleanup, !dbg !3324

if.else4:                                         ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !3325
  br label %cleanup, !dbg !3327

cleanup:                                          ; preds = %entry, %if.else4, %if.then
  %retval.0 = phi i32 [ %bf.lshr, %if.then ], [ 0, %if.else4 ], [ 59, %entry ], !dbg !3319
  ret i32 %retval.0, !dbg !3328
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @get_gimple_rhs_class(i32 %code) unnamed_addr #0 !dbg !3329 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !3333, metadata !DIExpression()), !dbg !3334
  %idxprom = sext i32 %code to i64, !dbg !3335
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !3335
  %0 = load i8, i8* %arrayidx, align 1, !dbg !3335
  %conv = zext i8 %0 to i32, !dbg !3336
  ret i32 %conv, !dbg !3337
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !3338 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3342, metadata !DIExpression()), !dbg !3344
  call void @llvm.dbg.value(metadata i32 %i, metadata !3343, metadata !DIExpression()), !dbg !3344
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #8, !dbg !3345
  %tobool = icmp eq i8 %call, 0, !dbg !3345
  br i1 %tobool, label %return, label %if.then, !dbg !3347

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #8, !dbg !3348
  %idxprom = zext i32 %i to i64, !dbg !3348
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !3348
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3348
  br label %return, !dbg !3350

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %0, %if.then ], [ null, %entry ], !dbg !3351
  ret %union.tree_node* %retval.0, !dbg !3352
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !3353 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3355, metadata !DIExpression()), !dbg !3356
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !3357
  %cmp = icmp eq i32 %call, 0, !dbg !3358
  br i1 %cmp, label %land.end, label %land.rhs, !dbg !3359

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !3360
  %cmp2 = icmp ult i32 %call1, 10, !dbg !3361
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !3362
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3363 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3367, metadata !DIExpression()), !dbg !3369
  %call = tail call fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #8, !dbg !3370
  %idxprom = zext i32 %call to i64, !dbg !3371
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !3371
  %0 = load i64, i64* %arrayidx, align 8, !dbg !3371
  call void @llvm.dbg.value(metadata i64 %0, metadata !3368, metadata !DIExpression()), !dbg !3369
  %cmp = icmp eq i64 %0, 0, !dbg !3372
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !3372

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !3372
  br label %cond.end, !dbg !3372

cond.end:                                         ; preds = %entry, %cond.true
  %1 = bitcast %union.gimple_statement_d* %gs to i8*, !dbg !3373
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !3374
  %2 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !3375
  ret %union.tree_node** %2, !dbg !3376
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3377 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3381, metadata !DIExpression()), !dbg !3382
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !3383
  %call1 = tail call fastcc i32 @gss_for_code(i32 %call) #8, !dbg !3384
  ret i32 %call1, !dbg !3385
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gss_for_code(i32 %code) unnamed_addr #0 !dbg !3386 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !3390, metadata !DIExpression()), !dbg !3391
  %idxprom = zext i32 %code to i64, !dbg !3392
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !3392
  %0 = load i32, i32* %arrayidx, align 4, !dbg !3392
  ret i32 %0, !dbg !3393
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3394 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3398, metadata !DIExpression()), !dbg !3399
  %num_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 3, !dbg !3400
  %0 = load i32, i32* %num_ops, align 4, !dbg !3400
  ret i32 %0, !dbg !3401
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !3402 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3407, metadata !DIExpression()), !dbg !3409
  %call = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #8, !dbg !3410
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call, metadata !3408, metadata !DIExpression()), !dbg !3409
  %tobool = icmp eq %struct.basic_block_def* %call, null, !dbg !3411
  br i1 %tobool, label %cleanup, label %if.end, !dbg !3413

if.end:                                           ; preds = %entry
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call, i64 0, i32 3, !dbg !3414
  %0 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3414
  br label %cleanup, !dbg !3415

cleanup:                                          ; preds = %entry, %if.end
  %retval.0 = phi %struct.loop* [ %0, %if.end ], [ null, %entry ], !dbg !3409
  ret %struct.loop* %retval.0, !dbg !3416
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %stmt, i32 %code, %struct.loop* %loop) unnamed_addr #5 !dbg !3417 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3421, metadata !DIExpression()), !dbg !3425
  call void @llvm.dbg.value(metadata i32 %code, metadata !3422, metadata !DIExpression()), !dbg !3425
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3423, metadata !DIExpression()), !dbg !3425
  %call = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #8, !dbg !3426
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %call, metadata !3424, metadata !DIExpression()), !dbg !3425
  %call1 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %stmt) #8, !dbg !3427
  %cmp = icmp eq %struct.basic_block_def* %call1, null, !dbg !3429
  br i1 %cmp, label %cleanup, label %if.end, !dbg !3430

if.end:                                           ; preds = %entry
  %call2 = tail call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %loop, %struct.basic_block_def* %call) #6, !dbg !3431
  %tobool = icmp eq i8 %call2, 0, !dbg !3431
  br i1 %tobool, label %cleanup, label %if.end4, !dbg !3433

if.end4:                                          ; preds = %if.end
  %call5 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %stmt) #8, !dbg !3434
  %tobool6 = icmp eq i8 %call5, 0, !dbg !3434
  br i1 %tobool6, label %if.end16, label %land.lhs.true, !dbg !3436

land.lhs.true:                                    ; preds = %if.end4
  %call7 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #8, !dbg !3437
  %cmp8 = icmp eq i32 %call7, %code, !dbg !3438
  br i1 %cmp8, label %land.lhs.true10, label %if.end16, !dbg !3439

land.lhs.true10:                                  ; preds = %land.lhs.true
  %call11 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !3440
  %call12 = tail call fastcc zeroext i8 @has_single_use(%union.tree_node* %call11) #8, !dbg !3441
  %tobool14 = icmp eq i8 %call12, 0, !dbg !3441
  br i1 %tobool14, label %if.end16, label %cleanup, !dbg !3442

if.end16:                                         ; preds = %land.lhs.true10, %if.end4, %land.lhs.true
  br label %cleanup, !dbg !3443

cleanup:                                          ; preds = %land.lhs.true10, %if.end, %entry, %if.end16
  %retval.0 = phi i8 [ 0, %if.end16 ], [ 0, %entry ], [ 0, %if.end ], [ 1, %land.lhs.true10 ], !dbg !3425
  ret i8 %retval.0, !dbg !3444
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @get_single_immediate_use(%union.tree_node* %lhs) unnamed_addr #5 !dbg !3445 {
entry:
  %immuse = alloca %struct.ssa_use_operand_d*, align 8
  %immusestmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !3449, metadata !DIExpression()), !dbg !3452
  %0 = bitcast %struct.ssa_use_operand_d** %immuse to i8*, !dbg !3453
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !3453
  %1 = bitcast %union.gimple_statement_d** %immusestmt to i8*, !dbg !3454
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !3454
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3455
  %bf.load = load i64, i64* %2, align 8, !dbg !3455
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3457
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !3457
  br i1 %cmp, label %land.lhs.true, label %cleanup, !dbg !3458

land.lhs.true:                                    ; preds = %entry
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d** %immuse, metadata !3450, metadata !DIExpression(DW_OP_deref)), !dbg !3452
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %immusestmt, metadata !3451, metadata !DIExpression(DW_OP_deref)), !dbg !3452
  %call = call fastcc zeroext i8 @single_imm_use(%union.tree_node* %lhs, %struct.ssa_use_operand_d** nonnull %immuse, %union.gimple_statement_d** nonnull %immusestmt) #8, !dbg !3459
  %tobool = icmp eq i8 %call, 0, !dbg !3459
  br i1 %tobool, label %cleanup, label %land.lhs.true1, !dbg !3460

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %immusestmt, align 8, !dbg !3461
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %3, metadata !3451, metadata !DIExpression()), !dbg !3452
  %call2 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %3) #8, !dbg !3462
  %tobool4 = icmp eq i8 %call2, 0, !dbg !3462
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %immusestmt, align 8, !dbg !3463
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %4, metadata !3451, metadata !DIExpression()), !dbg !3452
  %spec.select = select i1 %tobool4, %union.gimple_statement_d* null, %union.gimple_statement_d* %4, !dbg !3464
  br label %cleanup, !dbg !3464

cleanup:                                          ; preds = %land.lhs.true, %land.lhs.true1, %entry
  %retval.0 = phi %union.gimple_statement_d* [ null, %land.lhs.true ], [ null, %entry ], [ %spec.select, %land.lhs.true1 ], !dbg !3452
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !3465
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !3465
  ret %union.gimple_statement_d* %retval.0, !dbg !3465
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !3466 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !3470, metadata !DIExpression()), !dbg !3471
  %bb = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 4, !dbg !3472
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3472
  ret %struct.basic_block_def* %0, !dbg !3473
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @has_single_use(%union.tree_node* %var) unnamed_addr #0 !dbg !3474 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !3481, metadata !DIExpression()), !dbg !3486
  %imm_uses = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3487
  %0 = bitcast i40* %imm_uses to %struct.ssa_use_operand_d*, !dbg !3487
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %0, metadata !3482, metadata !DIExpression()), !dbg !3486
  %next = getelementptr inbounds i40, i40* %imm_uses, i64 1, !dbg !3488
  %1 = bitcast i40* %next to %struct.ssa_use_operand_d**, !dbg !3488
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %1, align 8, !dbg !3488
  %cmp = icmp eq %struct.ssa_use_operand_d* %2, %0, !dbg !3490
  br i1 %cmp, label %cleanup, label %if.end, !dbg !3491

if.end:                                           ; preds = %entry
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i64 0, i32 1, !dbg !3492
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !3492
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %3, %0, !dbg !3494
  br i1 %cmp3, label %if.then4, label %if.end6, !dbg !3495

if.then4:                                         ; preds = %if.end
  %stmt = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i64 0, i32 2, i32 0, !dbg !3496
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !3496
  %call = tail call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %4) #8, !dbg !3497
  %tobool = icmp eq i8 %call, 0, !dbg !3498
  %conv = zext i1 %tobool to i8, !dbg !3498
  br label %cleanup, !dbg !3499

if.end6:                                          ; preds = %if.end
  %5 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3500
  %tobool7 = icmp eq i32 %5, 0, !dbg !3500
  br i1 %tobool7, label %cleanup, label %if.end9, !dbg !3502

if.end9:                                          ; preds = %if.end6
  %call10 = tail call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* nonnull %0, %struct.ssa_use_operand_d** null, %union.gimple_statement_d** null) #6, !dbg !3503
  br label %cleanup, !dbg !3504

cleanup:                                          ; preds = %if.end6, %entry, %if.end9, %if.then4
  %retval.0 = phi i8 [ %conv, %if.then4 ], [ %call10, %if.end9 ], [ 0, %entry ], [ 0, %if.end6 ], !dbg !3486
  ret i8 %retval.0, !dbg !3505
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !3506 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3508, metadata !DIExpression()), !dbg !3509
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !3510
  %cmp = icmp eq i32 %call, 2, !dbg !3511
  %conv1 = zext i1 %cmp to i8, !dbg !3510
  ret i8 %conv1, !dbg !3512
}

declare dso_local zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d*, %struct.ssa_use_operand_d**, %union.gimple_statement_d**) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @single_imm_use(%union.tree_node* %var, %struct.ssa_use_operand_d** %use_p, %union.gimple_statement_d** %stmt) unnamed_addr #0 !dbg !3513 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !3519, metadata !DIExpression()), !dbg !3526
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d** %use_p, metadata !3520, metadata !DIExpression()), !dbg !3526
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !3521, metadata !DIExpression()), !dbg !3526
  %imm_uses = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3527
  %0 = bitcast i40* %imm_uses to %struct.ssa_use_operand_d*, !dbg !3527
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %0, metadata !3522, metadata !DIExpression()), !dbg !3526
  %next = getelementptr inbounds i40, i40* %imm_uses, i64 1, !dbg !3528
  %1 = bitcast i40* %next to %struct.ssa_use_operand_d**, !dbg !3528
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %1, align 8, !dbg !3528
  %cmp = icmp eq %struct.ssa_use_operand_d* %2, %0, !dbg !3529
  br i1 %cmp, label %return_false, label %if.end, !dbg !3530

return_false:                                     ; preds = %if.then4, %if.end12, %entry
  call void @llvm.dbg.label(metadata !3523), !dbg !3531
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %use_p, align 8, !dbg !3532
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !3533
  br label %cleanup, !dbg !3534

if.end:                                           ; preds = %entry
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i64 0, i32 1, !dbg !3535
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next2, align 8, !dbg !3535
  %cmp3 = icmp eq %struct.ssa_use_operand_d* %3, %0, !dbg !3537
  br i1 %cmp3, label %if.then4, label %if.end12, !dbg !3538

if.then4:                                         ; preds = %if.end
  %stmt6 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %2, i64 0, i32 2, i32 0, !dbg !3539
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt6, align 8, !dbg !3539
  %call = tail call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %4) #8, !dbg !3542
  %tobool = icmp eq i8 %call, 0, !dbg !3542
  br i1 %tobool, label %if.then7, label %return_false, !dbg !3543

if.then7:                                         ; preds = %if.then4
  %5 = bitcast i40* %next to i64*, !dbg !3544
  %6 = load i64, i64* %5, align 8, !dbg !3544
  %7 = bitcast %struct.ssa_use_operand_d** %use_p to i64*, !dbg !3546
  store i64 %6, i64* %7, align 8, !dbg !3546
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %1, align 8, !dbg !3547
  %stmt11 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %8, i64 0, i32 2, i32 0, !dbg !3548
  %9 = bitcast %union.gimple_statement_d** %stmt11 to i64*, !dbg !3548
  %10 = load i64, i64* %9, align 8, !dbg !3548
  %11 = bitcast %union.gimple_statement_d** %stmt to i64*, !dbg !3549
  store i64 %10, i64* %11, align 8, !dbg !3549
  br label %cleanup, !dbg !3550

if.end12:                                         ; preds = %if.end
  %12 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3551
  %tobool13 = icmp eq i32 %12, 0, !dbg !3551
  br i1 %tobool13, label %return_false, label %if.end15, !dbg !3553

if.end15:                                         ; preds = %if.end12
  %call16 = tail call zeroext i8 @single_imm_use_1(%struct.ssa_use_operand_d* nonnull %0, %struct.ssa_use_operand_d** %use_p, %union.gimple_statement_d** %stmt) #6, !dbg !3554
  br label %cleanup, !dbg !3555

cleanup:                                          ; preds = %if.end15, %if.then7, %return_false
  %retval.0 = phi i8 [ 0, %return_false ], [ 1, %if.then7 ], [ %call16, %if.end15 ], !dbg !3526
  ret i8 %retval.0, !dbg !3556
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @negate_value(%union.tree_node* %tonegate, %struct.gimple_stmt_iterator* %gsi) unnamed_addr #5 !dbg !3557 {
entry:
  %gsi24 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp28 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %tonegate, metadata !3561, metadata !DIExpression()), !dbg !3570
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3562, metadata !DIExpression()), !dbg !3570
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !3563, metadata !DIExpression()), !dbg !3570
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %tonegate, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3571
  %bf.load = load i64, i64* %0, align 8, !dbg !3571
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3573
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !3573
  br i1 %cmp, label %if.then, label %if.end, !dbg !3574

if.then:                                          ; preds = %entry
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %tonegate, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3575
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !3575
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %1, align 8, !dbg !3575
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %2, metadata !3563, metadata !DIExpression()), !dbg !3570
  br label %if.end, !dbg !3576

if.end:                                           ; preds = %if.then, %entry
  %negatedefstmt.0 = phi %union.gimple_statement_d* [ %2, %if.then ], [ null, %entry ], !dbg !3570
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %negatedefstmt.0, metadata !3563, metadata !DIExpression()), !dbg !3570
  br i1 %cmp, label %land.lhs.true, label %if.end31, !dbg !3577

land.lhs.true:                                    ; preds = %if.end
  %call = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %negatedefstmt.0) #8, !dbg !3578
  %tobool = icmp eq i8 %call, 0, !dbg !3578
  br i1 %tobool, label %if.end31, label %land.lhs.true6, !dbg !3579

land.lhs.true6:                                   ; preds = %land.lhs.true
  %call7 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %negatedefstmt.0) #8, !dbg !3580
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3580
  %bf.load9 = load i64, i64* %3, align 8, !dbg !3580
  %bf.cast113 = and i64 %bf.load9, 65535, !dbg !3581
  %cmp12 = icmp eq i64 %bf.cast113, 141, !dbg !3581
  br i1 %cmp12, label %land.lhs.true14, label %if.end31, !dbg !3582

land.lhs.true14:                                  ; preds = %land.lhs.true6
  %call15 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %negatedefstmt.0) #8, !dbg !3583
  %call16 = tail call fastcc zeroext i8 @has_single_use(%union.tree_node* %call15) #8, !dbg !3584
  %tobool18 = icmp eq i8 %call16, 0, !dbg !3584
  br i1 %tobool18, label %if.end31, label %land.lhs.true19, !dbg !3585

land.lhs.true19:                                  ; preds = %land.lhs.true14
  %call20 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %negatedefstmt.0) #8, !dbg !3586
  %cmp21 = icmp eq i32 %call20, 63, !dbg !3587
  br i1 %cmp21, label %if.then23, label %if.end31, !dbg !3588

if.then23:                                        ; preds = %land.lhs.true19
  %4 = bitcast %struct.gimple_stmt_iterator* %gsi24 to i8*, !dbg !3589
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #7, !dbg !3589
  %call25 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %negatedefstmt.0) #8, !dbg !3590
  call void @llvm.dbg.value(metadata %union.tree_node* %call25, metadata !3568, metadata !DIExpression()), !dbg !3591
  %call26 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %negatedefstmt.0) #8, !dbg !3592
  call void @llvm.dbg.value(metadata %union.tree_node* %call26, metadata !3569, metadata !DIExpression()), !dbg !3591
  %5 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3593
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7, !dbg !3593
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp, %union.gimple_statement_d* %negatedefstmt.0) #6, !dbg !3593
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* nonnull align 8 %5, i64 24, i1 false), !dbg !3593
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7, !dbg !3593
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi24, metadata !3565, metadata !DIExpression(DW_OP_deref)), !dbg !3591
  %call27 = call fastcc %union.tree_node* @negate_value(%union.tree_node* %call25, %struct.gimple_stmt_iterator* nonnull %gsi24) #8, !dbg !3594
  call void @llvm.dbg.value(metadata %union.tree_node* %call27, metadata !3568, metadata !DIExpression()), !dbg !3591
  call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %negatedefstmt.0, %union.tree_node* %call27) #8, !dbg !3595
  %6 = bitcast %struct.gimple_stmt_iterator* %tmp28 to i8*, !dbg !3596
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7, !dbg !3596
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp28, %union.gimple_statement_d* %negatedefstmt.0) #6, !dbg !3596
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* nonnull align 8 %6, i64 24, i1 false), !dbg !3596
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7, !dbg !3596
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi24, metadata !3565, metadata !DIExpression(DW_OP_deref)), !dbg !3591
  %call29 = call fastcc %union.tree_node* @negate_value(%union.tree_node* %call26, %struct.gimple_stmt_iterator* nonnull %gsi24) #8, !dbg !3597
  call void @llvm.dbg.value(metadata %union.tree_node* %call29, metadata !3569, metadata !DIExpression()), !dbg !3591
  call fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %negatedefstmt.0, %union.tree_node* %call29) #8, !dbg !3598
  call fastcc void @update_stmt(%union.gimple_statement_d* %negatedefstmt.0) #8, !dbg !3599
  %call30 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %negatedefstmt.0) #8, !dbg !3600
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #7, !dbg !3601
  br label %cleanup

if.end31:                                         ; preds = %land.lhs.true14, %land.lhs.true, %land.lhs.true19, %land.lhs.true6, %if.end
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %tonegate, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3602
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3602
  %call32 = tail call %union.tree_node* @fold_build1_stat_loc(i32 0, i32 79, %union.tree_node* %7, %union.tree_node* %tonegate) #6, !dbg !3602
  call void @llvm.dbg.value(metadata %union.tree_node* %call32, metadata !3561, metadata !DIExpression()), !dbg !3570
  %call33 = tail call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %call32, i8 zeroext 1, %union.tree_node* null, i8 zeroext 1, i32 1) #6, !dbg !3603
  call void @llvm.dbg.value(metadata %union.tree_node* %call33, metadata !3564, metadata !DIExpression()), !dbg !3570
  %call34 = tail call fastcc %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** nonnull @broken_up_subtracts, %union.tree_node* %call33) #8, !dbg !3604
  br label %cleanup, !dbg !3605

cleanup:                                          ; preds = %if.end31, %if.then23
  %retval.0 = phi %union.tree_node* [ %call30, %if.then23 ], [ %call33, %if.end31 ], !dbg !3570
  ret %union.tree_node* %retval.0, !dbg !3606
}

declare dso_local void @gimple_assign_set_rhs_with_ops(%struct.gimple_stmt_iterator*, i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @update_stmt(%union.gimple_statement_d* %s) unnamed_addr #0 !dbg !3607 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %s, metadata !3611, metadata !DIExpression()), !dbg !3612
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %s) #8, !dbg !3613
  %tobool = icmp eq i8 %call, 0, !dbg !3613
  br i1 %tobool, label %if.end, label %if.then, !dbg !3615

if.then:                                          ; preds = %entry
  tail call void @gimple_set_modified(%union.gimple_statement_d* %s, i8 zeroext 1) #6, !dbg !3616
  tail call void @update_stmt_operands(%union.gimple_statement_d* %s) #6, !dbg !3618
  br label %if.end, !dbg !3619

if.end:                                           ; preds = %entry, %if.then
  ret void, !dbg !3620
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !3621 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3625, metadata !DIExpression()), !dbg !3627
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !3626, metadata !DIExpression()), !dbg !3627
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 1, %union.tree_node* %rhs) #8, !dbg !3628
  ret void, !dbg !3629
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %gs, %union.tree_node* %rhs) unnamed_addr #0 !dbg !3630 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3632, metadata !DIExpression()), !dbg !3634
  call void @llvm.dbg.value(metadata %union.tree_node* %rhs, metadata !3633, metadata !DIExpression()), !dbg !3634
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 2, %union.tree_node* %rhs) #8, !dbg !3635
  ret void, !dbg !3636
}

declare dso_local %union.tree_node* @fold_build1_stat_loc(i32, i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @VEC_tree_heap_safe_push(%struct.VEC_tree_heap** %vec_, %union.tree_node* %obj_) unnamed_addr #0 !dbg !3637 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** @broken_up_subtracts, metadata !3642, metadata !DIExpression()), !dbg !3644
  call void @llvm.dbg.value(metadata %union.tree_node* %obj_, metadata !3643, metadata !DIExpression()), !dbg !3644
  %call = tail call fastcc i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** nonnull @broken_up_subtracts, i32 1) #8, !dbg !3645
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @broken_up_subtracts, align 8, !dbg !3645
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !3645
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3645

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %0, i64 0, i32 0, !dbg !3645
  br label %cond.end, !dbg !3645

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !3645
  %call1 = tail call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond, %union.tree_node* %obj_) #8, !dbg !3645
  ret %union.tree_node** %call1, !dbg !3645
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) unnamed_addr #0 !dbg !3646 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !3650, metadata !DIExpression()), !dbg !3653
  call void @llvm.dbg.value(metadata i32 %i, metadata !3651, metadata !DIExpression()), !dbg !3653
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !3652, metadata !DIExpression()), !dbg !3653
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #8, !dbg !3654
  %tobool = icmp eq i8 %call, 0, !dbg !3654
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !3654

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #8, !dbg !3654
  %cmp = icmp ugt i32 %call1, %i, !dbg !3654
  br i1 %cmp, label %cond.end, label %cond.true, !dbg !3654

cond.true:                                        ; preds = %entry, %land.lhs.true
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !3654
  br label %cond.end, !dbg !3654

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %call3 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #8, !dbg !3655
  %idxprom = zext i32 %i to i64, !dbg !3655
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !3655
  store %union.tree_node* %op, %union.tree_node** %arrayidx, align 8, !dbg !3656
  ret void, !dbg !3657
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_heap_reserve(%struct.VEC_tree_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !3658 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** @broken_up_subtracts, metadata !3662, metadata !DIExpression()), !dbg !3665
  call void @llvm.dbg.value(metadata i32 1, metadata !3663, metadata !DIExpression()), !dbg !3665
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @broken_up_subtracts, align 8, !dbg !3666
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !3666
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3666

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %0, i64 0, i32 0, !dbg !3666
  br label %cond.end, !dbg !3666

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !3666
  %call = tail call fastcc i32 @VEC_tree_base_space(%struct.VEC_tree_base* %cond, i32 1) #8, !dbg !3666
  %tobool1 = icmp eq i32 %call, 0, !dbg !3666
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !3666
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !3664, metadata !DIExpression()), !dbg !3665
  br i1 %tobool1, label %if.then, label %if.end, !dbg !3666

if.then:                                          ; preds = %cond.end
  %1 = load i8*, i8** bitcast (%struct.VEC_tree_heap** @broken_up_subtracts to i8**), align 8, !dbg !3667
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %1, i32 1) #6, !dbg !3667
  store i8* %call3, i8** bitcast (%struct.VEC_tree_heap** @broken_up_subtracts to i8**), align 8, !dbg !3667
  br label %if.end, !dbg !3667

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !3666
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) unnamed_addr #0 !dbg !3669 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !3674, metadata !DIExpression()), !dbg !3677
  call void @llvm.dbg.value(metadata %union.tree_node* %obj_, metadata !3675, metadata !DIExpression()), !dbg !3677
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !3678
  %0 = load i32, i32* %num1, align 8, !dbg !3678
  %inc = add i32 %0, 1, !dbg !3678
  store i32 %inc, i32* %num1, align 8, !dbg !3678
  %idxprom = zext i32 %0 to i64, !dbg !3678
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !3678
  call void @llvm.dbg.value(metadata %union.tree_node** %arrayidx, metadata !3676, metadata !DIExpression()), !dbg !3677
  store %union.tree_node* %obj_, %union.tree_node** %arrayidx, align 8, !dbg !3678
  ret %union.tree_node** %arrayidx, !dbg !3678
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_base_space(%struct.VEC_tree_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !3679 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !3683, metadata !DIExpression()), !dbg !3685
  call void @llvm.dbg.value(metadata i32 1, metadata !3684, metadata !DIExpression()), !dbg !3685
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !3686
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3686

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 1, !dbg !3686
  %0 = load i32, i32* %alloc, align 4, !dbg !3686
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !3686
  %1 = load i32, i32* %num, align 8, !dbg !3686
  %cmp1 = icmp ne i32 %0, %1, !dbg !3686
  %phitmp = zext i1 %cmp1 to i32, !dbg !3686
  br label %cond.end, !dbg !3686

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3686

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !3686
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) local_unnamed_addr #2

declare dso_local void @gimple_set_modified(%union.gimple_statement_d*, i8 zeroext) local_unnamed_addr #2

declare dso_local void @update_stmt_operands(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) unnamed_addr #0 !dbg !3687 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !3689, metadata !DIExpression()), !dbg !3692
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3690, metadata !DIExpression()), !dbg !3693
  %call = tail call fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #8, !dbg !3694
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !3691, metadata !DIExpression()), !dbg !3692
  %call1 = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %call) #8, !dbg !3695
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !3696
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3697
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !3698
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq2, align 8, !dbg !3699
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !3700
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb3, align 8, !dbg !3701
  ret void, !dbg !3702
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_visited_p(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !3703 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3705, metadata !DIExpression()), !dbg !3706
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !3707
  %bf.load = load i32, i32* %0, align 8, !dbg !3707
  %bf.lshr = lshr i32 %bf.load, 9, !dbg !3707
  %1 = trunc i32 %bf.lshr to i8, !dbg !3708
  %conv = and i8 %1, 1, !dbg !3708
  ret i8 %conv, !dbg !3709
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @has_zero_uses(%union.tree_node* %var) unnamed_addr #0 !dbg !3710 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !3712, metadata !DIExpression()), !dbg !3714
  %imm_uses = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !3715
  %0 = bitcast i40* %imm_uses to %struct.ssa_use_operand_d*, !dbg !3715
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %0, metadata !3713, metadata !DIExpression()), !dbg !3714
  %next = getelementptr inbounds i40, i40* %imm_uses, i64 1, !dbg !3716
  %1 = bitcast i40* %next to %struct.ssa_use_operand_d**, !dbg !3716
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %1, align 8, !dbg !3716
  %cmp = icmp eq %struct.ssa_use_operand_d* %2, %0, !dbg !3718
  br i1 %cmp, label %cleanup, label %if.end, !dbg !3719

if.end:                                           ; preds = %entry
  %3 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !3720
  %tobool = icmp eq i32 %3, 0, !dbg !3720
  br i1 %tobool, label %cleanup, label %if.end2, !dbg !3722

if.end2:                                          ; preds = %if.end
  %call = tail call zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d* nonnull %0) #6, !dbg !3723
  br label %cleanup, !dbg !3724

cleanup:                                          ; preds = %if.end, %entry, %if.end2
  %retval.0 = phi i8 [ %call, %if.end2 ], [ 1, %entry ], [ 0, %if.end ], !dbg !3714
  ret i8 %retval.0, !dbg !3725
}

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @gsi_remove(%struct.gimple_stmt_iterator*, i8 zeroext) local_unnamed_addr #2

declare dso_local void @release_defs(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @associative_tree_code(i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @linearize_expr_tree(%struct.VEC_operand_entry_t_heap** %ops, %union.gimple_statement_d* %stmt, i8 zeroext %is_associative, i8 zeroext %set_visited) unnamed_addr #5 !dbg !3726 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !3730, metadata !DIExpression()), !dbg !3745
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3731, metadata !DIExpression()), !dbg !3745
  call void @llvm.dbg.value(metadata i8 %is_associative, metadata !3732, metadata !DIExpression()), !dbg !3745
  call void @llvm.dbg.value(metadata i8 %set_visited, metadata !3733, metadata !DIExpression()), !dbg !3745
  %call = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #8, !dbg !3746
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !3734, metadata !DIExpression()), !dbg !3745
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #8, !dbg !3747
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !3735, metadata !DIExpression()), !dbg !3745
  call void @llvm.dbg.value(metadata i8 0, metadata !3738, metadata !DIExpression()), !dbg !3745
  call void @llvm.dbg.value(metadata i8 0, metadata !3739, metadata !DIExpression()), !dbg !3745
  %call2 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #8, !dbg !3748
  call void @llvm.dbg.value(metadata i32 %call2, metadata !3740, metadata !DIExpression()), !dbg !3745
  %call3 = tail call fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !3749
  call void @llvm.dbg.value(metadata %struct.loop* %call3, metadata !3741, metadata !DIExpression()), !dbg !3745
  %tobool = icmp eq i8 %set_visited, 0, !dbg !3750
  br i1 %tobool, label %if.end, label %if.then, !dbg !3752

if.then:                                          ; preds = %entry
  tail call fastcc void @gimple_set_visited(%union.gimple_statement_d* %stmt, i8 zeroext 1) #8, !dbg !3753
  br label %if.end, !dbg !3753

if.end:                                           ; preds = %entry, %if.then
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3754
  %bf.load = load i64, i64* %0, align 8, !dbg !3754
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !3756
  %cmp = icmp eq i64 %bf.cast2, 141, !dbg !3756
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !3757

if.then4:                                         ; preds = %if.end
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3758
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !3758
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %1, align 8, !dbg !3758
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %2, metadata !3736, metadata !DIExpression()), !dbg !3745
  %call5 = tail call fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %2, i32 %call2, %struct.loop* %call3) #8, !dbg !3760
  call void @llvm.dbg.value(metadata i8 %call5, metadata !3738, metadata !DIExpression()), !dbg !3745
  br label %if.end6, !dbg !3761

if.end6:                                          ; preds = %if.then4, %if.end
  %binlhsisreassoc.0 = phi i8 [ %call5, %if.then4 ], [ 0, %if.end ], !dbg !3745
  call void @llvm.dbg.value(metadata i8 %binlhsisreassoc.0, metadata !3738, metadata !DIExpression()), !dbg !3745
  %3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3762
  %bf.load8 = load i64, i64* %3, align 8, !dbg !3762
  %bf.cast103 = and i64 %bf.load8, 65535, !dbg !3764
  %cmp11 = icmp eq i64 %bf.cast103, 141, !dbg !3764
  br i1 %cmp11, label %if.then12, label %if.end16, !dbg !3765

if.then12:                                        ; preds = %if.end6
  %def_stmt14 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3766
  %4 = bitcast %union.tree_node** %def_stmt14 to %union.gimple_statement_d**, !dbg !3766
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %4, align 8, !dbg !3766
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %5, metadata !3737, metadata !DIExpression()), !dbg !3745
  %call15 = tail call fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %5, i32 %call2, %struct.loop* %call3) #8, !dbg !3768
  call void @llvm.dbg.value(metadata i8 %call15, metadata !3739, metadata !DIExpression()), !dbg !3745
  br label %if.end16, !dbg !3769

if.end16:                                         ; preds = %if.then12, %if.end6
  %binrhsisreassoc.0 = phi i8 [ %call15, %if.then12 ], [ 0, %if.end6 ], !dbg !3745
  call void @llvm.dbg.value(metadata i8 %binrhsisreassoc.0, metadata !3739, metadata !DIExpression()), !dbg !3745
  %tobool17 = icmp eq i8 %binlhsisreassoc.0, 0, !dbg !3770
  br i1 %tobool17, label %if.then18, label %if.else, !dbg !3771

if.then18:                                        ; preds = %if.end16
  %tobool19 = icmp eq i8 %is_associative, 0, !dbg !3772
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !3774

if.then20:                                        ; preds = %if.then18
  tail call fastcc void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %ops, %union.tree_node* %call1) #8, !dbg !3775
  br label %cleanup, !dbg !3777

if.end21:                                         ; preds = %if.then18
  %tobool22 = icmp eq i8 %binrhsisreassoc.0, 0, !dbg !3778
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !3780

if.then23:                                        ; preds = %if.end21
  tail call fastcc void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %ops, %union.tree_node* %call1) #8, !dbg !3781
  tail call fastcc void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %ops, %union.tree_node* %call) #8, !dbg !3783
  br label %cleanup, !dbg !3784

if.end24:                                         ; preds = %if.end21
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3785
  %tobool25 = icmp eq %struct._IO_FILE* %6, null, !dbg !3785
  br i1 %tobool25, label %if.end29, label %land.lhs.true, !dbg !3787

land.lhs.true:                                    ; preds = %if.end24
  %7 = load i32, i32* @dump_flags, align 4, !dbg !3788
  %and = and i32 %7, 8, !dbg !3789
  %tobool26 = icmp eq i32 %and, 0, !dbg !3789
  br i1 %tobool26, label %if.end29, label %if.then27, !dbg !3790

if.then27:                                        ; preds = %land.lhs.true
  %call28 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %6, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0)) #6, !dbg !3791
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3793
  tail call void @print_gimple_stmt(%struct._IO_FILE* %8, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !3794
  br label %if.end29, !dbg !3795

if.end29:                                         ; preds = %land.lhs.true, %if.end24, %if.then27
  %call30 = tail call fastcc %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !3796
  %call31 = tail call fastcc %union.tree_node** @gimple_assign_rhs2_ptr(%union.gimple_statement_d* %stmt) #8, !dbg !3797
  tail call void @swap_tree_operands(%union.gimple_statement_d* %stmt, %union.tree_node** %call30, %union.tree_node** %call31) #6, !dbg !3798
  tail call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !3799
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3800
  %tobool32 = icmp eq %struct._IO_FILE* %9, null, !dbg !3800
  br i1 %tobool32, label %cleanup, label %land.lhs.true33, !dbg !3802

land.lhs.true33:                                  ; preds = %if.end29
  %10 = load i32, i32* @dump_flags, align 4, !dbg !3803
  %and34 = and i32 %10, 8, !dbg !3804
  %tobool35 = icmp eq i32 %and34, 0, !dbg !3804
  br i1 %tobool35, label %cleanup, label %if.then36, !dbg !3805

if.then36:                                        ; preds = %land.lhs.true33
  %call37 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %9, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !3806
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3808
  tail call void @print_gimple_stmt(%struct._IO_FILE* %11, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !3809
  br label %cleanup, !dbg !3810

cleanup:                                          ; preds = %land.lhs.true33, %if.end29, %if.then36, %if.then23, %if.then20
  %binlhs.0 = phi %union.tree_node* [ %call, %if.then23 ], [ %call, %if.then20 ], [ %call1, %if.then36 ], [ %call1, %land.lhs.true33 ], [ %call1, %if.end29 ], !dbg !3745
  %binrhs.0 = phi %union.tree_node* [ %call1, %if.then23 ], [ %call1, %if.then20 ], [ %call, %if.then36 ], [ %call, %land.lhs.true33 ], [ %call, %if.end29 ], !dbg !3745
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then23 ], [ false, %if.then20 ], [ true, %if.then36 ], [ true, %land.lhs.true33 ], [ true, %if.end29 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %binrhs.0, metadata !3735, metadata !DIExpression()), !dbg !3745
  call void @llvm.dbg.value(metadata %union.tree_node* %binlhs.0, metadata !3734, metadata !DIExpression()), !dbg !3745
  br i1 %cleanup.dest.slot.0, label %if.end44, label %cleanup.cont65

if.else:                                          ; preds = %if.end16
  %tobool39 = icmp eq i8 %binrhsisreassoc.0, 0, !dbg !3811
  br i1 %tobool39, label %if.end44, label %if.then40, !dbg !3813

if.then40:                                        ; preds = %if.else
  tail call fastcc void @linearize_expr(%union.gimple_statement_d* %stmt) #8, !dbg !3814
  %call41 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #8, !dbg !3816
  call void @llvm.dbg.value(metadata %union.tree_node* %call41, metadata !3734, metadata !DIExpression()), !dbg !3745
  %call42 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #8, !dbg !3817
  call void @llvm.dbg.value(metadata %union.tree_node* %call42, metadata !3735, metadata !DIExpression()), !dbg !3745
  br label %if.end44, !dbg !3818

if.end44:                                         ; preds = %if.else, %if.then40, %cleanup
  %binlhs.2 = phi %union.tree_node* [ %binlhs.0, %cleanup ], [ %call41, %if.then40 ], [ %call, %if.else ], !dbg !3819
  %binrhs.2 = phi %union.tree_node* [ %binrhs.0, %cleanup ], [ %call42, %if.then40 ], [ %call1, %if.else ], !dbg !3819
  call void @llvm.dbg.value(metadata %union.tree_node* %binrhs.2, metadata !3735, metadata !DIExpression()), !dbg !3745
  call void @llvm.dbg.value(metadata %union.tree_node* %binlhs.2, metadata !3734, metadata !DIExpression()), !dbg !3745
  %12 = getelementptr inbounds %union.tree_node, %union.tree_node* %binrhs.2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !3820
  %bf.load46 = load i64, i64* %12, align 8, !dbg !3820
  %bf.cast484 = and i64 %bf.load46, 65535, !dbg !3820
  %cmp49 = icmp eq i64 %bf.cast484, 141, !dbg !3820
  br i1 %cmp49, label %lor.lhs.false, label %cond.end, !dbg !3820

lor.lhs.false:                                    ; preds = %if.end44
  %def_stmt51 = getelementptr inbounds %union.tree_node, %union.tree_node* %binrhs.2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3820
  %13 = bitcast %union.tree_node** %def_stmt51 to %union.gimple_statement_d**, !dbg !3820
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %13, align 8, !dbg !3820
  %call52 = tail call fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %14, i32 %call2, %struct.loop* %call3) #8, !dbg !3820
  %tobool53 = icmp eq i8 %call52, 0, !dbg !3820
  br i1 %tobool53, label %cond.end, label %cond.true, !dbg !3820

cond.true:                                        ; preds = %lor.lhs.false
  tail call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1693, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !3820
  br label %cond.end, !dbg !3820

cond.end:                                         ; preds = %lor.lhs.false, %if.end44, %cond.true
  %def_stmt55 = getelementptr inbounds %union.tree_node, %union.tree_node* %binlhs.2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !3821
  %15 = bitcast %union.tree_node** %def_stmt55 to %union.gimple_statement_d**, !dbg !3821
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %15, align 8, !dbg !3821
  tail call fastcc void @linearize_expr_tree(%struct.VEC_operand_entry_t_heap** %ops, %union.gimple_statement_d* %16, i8 zeroext %is_associative, i8 zeroext %set_visited) #8, !dbg !3822
  tail call fastcc void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %ops, %union.tree_node* %binrhs.2) #8, !dbg !3823
  ret void, !dbg !3824

cleanup.cont65:                                   ; preds = %cleanup
  ret void, !dbg !3824
}

declare dso_local void @spec_qsort(i8*, i64, i64, i32 (i8*, i8*)*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.operand_entry** @VEC_operand_entry_t_base_address(%struct.VEC_operand_entry_t_base* %vec_) unnamed_addr #0 !dbg !3825 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_base* %vec_, metadata !3830, metadata !DIExpression()), !dbg !3831
  %tobool = icmp eq %struct.VEC_operand_entry_t_base* %vec_, null, !dbg !3832
  %arraydecay = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 2, i64 0, !dbg !3832
  %cond = select i1 %tobool, %struct.operand_entry** null, %struct.operand_entry** %arraydecay, !dbg !3832
  ret %struct.operand_entry** %cond, !dbg !3832
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %vec_) unnamed_addr #0 !dbg !3833 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_base* %vec_, metadata !3837, metadata !DIExpression()), !dbg !3838
  %tobool = icmp eq %struct.VEC_operand_entry_t_base* %vec_, null, !dbg !3839
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3839

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 0, !dbg !3839
  %0 = load i32, i32* %num, align 8, !dbg !3839
  br label %cond.end, !dbg !3839

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !3839
  ret i32 %cond, !dbg !3839
}

; Function Attrs: nounwind uwtable
define internal i32 @sort_by_operand_rank(i8* %pa, i8* %pb) #5 !dbg !3840 {
entry:
  call void @llvm.dbg.value(metadata i8* %pa, metadata !3842, metadata !DIExpression()), !dbg !3846
  call void @llvm.dbg.value(metadata i8* %pb, metadata !3843, metadata !DIExpression()), !dbg !3846
  %0 = bitcast i8* %pa to %struct.operand_entry**, !dbg !3847
  %1 = load %struct.operand_entry*, %struct.operand_entry** %0, align 8, !dbg !3848
  call void @llvm.dbg.value(metadata %struct.operand_entry* %1, metadata !3844, metadata !DIExpression()), !dbg !3846
  %2 = bitcast i8* %pb to %struct.operand_entry**, !dbg !3849
  %3 = load %struct.operand_entry*, %struct.operand_entry** %2, align 8, !dbg !3850
  call void @llvm.dbg.value(metadata %struct.operand_entry* %3, metadata !3845, metadata !DIExpression()), !dbg !3846
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %3, i64 0, i32 0, !dbg !3851
  %4 = load i32, i32* %rank, align 8, !dbg !3851
  %cmp = icmp eq i32 %4, 0, !dbg !3853
  br i1 %cmp, label %land.lhs.true, label %entry.if.end_crit_edge, !dbg !3854

entry.if.end_crit_edge:                           ; preds = %entry
  %rank6.phi.trans.insert = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %1, i64 0, i32 0, !dbg !3855
  %.pre = load i32, i32* %rank6.phi.trans.insert, align 8, !dbg !3857
  br label %if.end, !dbg !3854

land.lhs.true:                                    ; preds = %entry
  %rank1 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %1, i64 0, i32 0, !dbg !3858
  %5 = load i32, i32* %rank1, align 8, !dbg !3858
  %cmp2 = icmp eq i32 %5, 0, !dbg !3859
  br i1 %cmp2, label %if.then, label %if.end, !dbg !3860

if.then:                                          ; preds = %land.lhs.true
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %3, i64 0, i32 1, !dbg !3861
  %6 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3861
  %call = tail call fastcc i32 @constant_type(%union.tree_node* %6) #8, !dbg !3862
  %op3 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %1, i64 0, i32 1, !dbg !3863
  %7 = load %union.tree_node*, %union.tree_node** %op3, align 8, !dbg !3863
  %call4 = tail call fastcc i32 @constant_type(%union.tree_node* %7) #8, !dbg !3864
  %sub = sub nsw i32 %call, %call4, !dbg !3865
  br label %cleanup, !dbg !3866

if.end:                                           ; preds = %entry.if.end_crit_edge, %land.lhs.true
  %8 = phi i32 [ %.pre, %entry.if.end_crit_edge ], [ %5, %land.lhs.true ], !dbg !3857
  %cmp8 = icmp eq i32 %4, %8, !dbg !3867
  br i1 %cmp8, label %land.lhs.true9, label %if.end25, !dbg !3868

land.lhs.true9:                                   ; preds = %if.end
  %op10 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %1, i64 0, i32 1, !dbg !3869
  %9 = bitcast %union.tree_node** %op10 to i64**, !dbg !3869
  %10 = load i64*, i64** %9, align 8, !dbg !3869
  %bf.load = load i64, i64* %10, align 8, !dbg !3869
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !3870
  %cmp11 = icmp eq i64 %bf.cast1, 141, !dbg !3870
  br i1 %cmp11, label %land.lhs.true12, label %if.end25, !dbg !3871

land.lhs.true12:                                  ; preds = %land.lhs.true9
  %op13 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %3, i64 0, i32 1, !dbg !3872
  %11 = bitcast %union.tree_node** %op13 to i64**, !dbg !3872
  %12 = load i64*, i64** %11, align 8, !dbg !3872
  %bf.load15 = load i64, i64* %12, align 8, !dbg !3872
  %bf.cast172 = and i64 %bf.load15, 65535, !dbg !3873
  %cmp18 = icmp eq i64 %bf.cast172, 141, !dbg !3873
  br i1 %cmp18, label %if.then19, label %if.end25, !dbg !3874

if.then19:                                        ; preds = %land.lhs.true12
  %version = getelementptr inbounds i64, i64* %12, i64 5, !dbg !3875
  %13 = bitcast i64* %version to i32*, !dbg !3875
  %14 = load i32, i32* %13, align 8, !dbg !3875
  %version23 = getelementptr inbounds i64, i64* %10, i64 5, !dbg !3876
  %15 = bitcast i64* %version23 to i32*, !dbg !3876
  %16 = load i32, i32* %15, align 8, !dbg !3876
  %sub24 = sub i32 %14, %16, !dbg !3877
  br label %cleanup, !dbg !3878

if.end25:                                         ; preds = %land.lhs.true12, %land.lhs.true9, %if.end
  %sub28 = sub i32 %4, %8, !dbg !3879
  br label %cleanup, !dbg !3880

cleanup:                                          ; preds = %if.end25, %if.then19, %if.then
  %retval.0 = phi i32 [ %sub, %if.then ], [ %sub24, %if.then19 ], [ %sub28, %if.end25 ], !dbg !3846
  ret i32 %retval.0, !dbg !3881
}

; Function Attrs: nounwind uwtable
define internal fastcc void @optimize_ops_list(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops) unnamed_addr #5 !dbg !3882 {
entry:
  %oe = alloca %struct.operand_entry*, align 8
  %done = alloca i8, align 1
  call void @llvm.dbg.value(metadata i32 %opcode, metadata !3886, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !3887, metadata !DIExpression()), !dbg !3903
  %0 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3904
  %tobool = icmp eq %struct.VEC_operand_entry_t_heap* %0, null, !dbg !3904
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !3904

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %0, i64 0, i32 0, !dbg !3904
  br label %cond.end, !dbg !3904

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %entry ], !dbg !3904
  %call = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond) #8, !dbg !3904
  call void @llvm.dbg.value(metadata i32 %call, metadata !3888, metadata !DIExpression()), !dbg !3903
  %1 = bitcast %struct.operand_entry** %oe to i8*, !dbg !3905
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !3905
  call void @llvm.dbg.value(metadata %struct.operand_entry* null, metadata !3891, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata i8 0, metadata !3892, metadata !DIExpression()), !dbg !3903
  %cmp = icmp eq i32 %call, 1, !dbg !3906
  br i1 %cmp, label %cleanup120, label %if.end, !dbg !3908

if.end:                                           ; preds = %cond.end
  %2 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3909
  %tobool1 = icmp eq %struct.VEC_operand_entry_t_heap* %2, null, !dbg !3909
  br i1 %tobool1, label %cond.end5, label %cond.true2, !dbg !3909

cond.true2:                                       ; preds = %if.end
  %base3 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %2, i64 0, i32 0, !dbg !3909
  br label %cond.end5, !dbg !3909

cond.end5:                                        ; preds = %if.end, %cond.true2
  %cond6 = phi %struct.VEC_operand_entry_t_base* [ %base3, %cond.true2 ], [ null, %if.end ], !dbg !3909
  %call7 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %cond6) #8, !dbg !3909
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call7, metadata !3891, metadata !DIExpression()), !dbg !3903
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call7, i64 0, i32 0, !dbg !3910
  %3 = load i32, i32* %rank, align 8, !dbg !3910
  %cmp8 = icmp eq i32 %3, 0, !dbg !3911
  br i1 %cmp8, label %land.lhs.true, label %if.end73, !dbg !3912

land.lhs.true:                                    ; preds = %cond.end5
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call7, i64 0, i32 1, !dbg !3913
  %4 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3913
  %call9 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %4) #6, !dbg !3914
  %tobool10 = icmp eq i8 %call9, 0, !dbg !3914
  br i1 %tobool10, label %if.end73, label %if.then11, !dbg !3915

if.then11:                                        ; preds = %land.lhs.true
  %5 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3916
  %tobool12 = icmp eq %struct.VEC_operand_entry_t_heap* %5, null, !dbg !3916
  br i1 %tobool12, label %cond.end16, label %cond.true13, !dbg !3916

cond.true13:                                      ; preds = %if.then11
  %base14 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %5, i64 0, i32 0, !dbg !3916
  br label %cond.end16, !dbg !3916

cond.end16:                                       ; preds = %if.then11, %cond.true13
  %cond17 = phi %struct.VEC_operand_entry_t_base* [ %base14, %cond.true13 ], [ null, %if.then11 ], !dbg !3916
  %sub = add i32 %call, -2, !dbg !3916
  %call18 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond17, i32 %sub) #8, !dbg !3916
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call18, metadata !3893, metadata !DIExpression()), !dbg !3917
  %rank19 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call18, i64 0, i32 0, !dbg !3918
  %6 = load i32, i32* %rank19, align 8, !dbg !3918
  %cmp20 = icmp eq i32 %6, 0, !dbg !3919
  br i1 %cmp20, label %land.lhs.true22, label %if.end69, !dbg !3920

land.lhs.true22:                                  ; preds = %cond.end16
  %op23 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call18, i64 0, i32 1, !dbg !3921
  %7 = load %union.tree_node*, %union.tree_node** %op23, align 8, !dbg !3921
  %call24 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %7) #6, !dbg !3922
  %tobool26 = icmp eq i8 %call24, 0, !dbg !3922
  br i1 %tobool26, label %if.end69, label %land.lhs.true27, !dbg !3923

land.lhs.true27:                                  ; preds = %land.lhs.true22
  %8 = bitcast %union.tree_node** %op23 to %struct.tree_common**, !dbg !3924
  %9 = load %struct.tree_common*, %struct.tree_common** %8, align 8, !dbg !3924
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %9, i64 0, i32 2, !dbg !3924
  %10 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3924
  %11 = bitcast %union.tree_node** %op to %struct.tree_common**, !dbg !3925
  %12 = load %struct.tree_common*, %struct.tree_common** %11, align 8, !dbg !3925
  %type31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %12, i64 0, i32 2, !dbg !3925
  %13 = load %union.tree_node*, %union.tree_node** %type31, align 8, !dbg !3925
  %call32 = tail call zeroext i8 @useless_type_conversion_p(%union.tree_node* %10, %union.tree_node* %13) #6, !dbg !3926
  %tobool34 = icmp eq i8 %call32, 0, !dbg !3926
  br i1 %tobool34, label %if.end69, label %if.then35, !dbg !3927

if.then35:                                        ; preds = %land.lhs.true27
  %14 = load %struct.tree_common*, %struct.tree_common** %8, align 8, !dbg !3928
  %type38 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %14, i64 0, i32 2, !dbg !3928
  %15 = load %union.tree_node*, %union.tree_node** %type38, align 8, !dbg !3928
  %.cast = bitcast %struct.tree_common* %14 to %union.tree_node*, !dbg !3928
  %16 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !3928
  %call41 = tail call %union.tree_node* @fold_binary_loc(i32 0, i32 %opcode, %union.tree_node* %15, %union.tree_node* %.cast, %union.tree_node* %16) #6, !dbg !3928
  call void @llvm.dbg.value(metadata %union.tree_node* %call41, metadata !3896, metadata !DIExpression()), !dbg !3929
  %tobool42 = icmp eq %union.tree_node* %call41, null, !dbg !3930
  br i1 %tobool42, label %cleanup, label %land.lhs.true43, !dbg !3932

land.lhs.true43:                                  ; preds = %if.then35
  %call44 = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* nonnull %call41) #6, !dbg !3933
  %tobool46 = icmp eq i8 %call44, 0, !dbg !3933
  br i1 %tobool46, label %cleanup, label %if.then47, !dbg !3934

if.then47:                                        ; preds = %land.lhs.true43
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3935
  %tobool48 = icmp eq %struct._IO_FILE* %17, null, !dbg !3935
  br i1 %tobool48, label %if.end53, label %land.lhs.true49, !dbg !3938

land.lhs.true49:                                  ; preds = %if.then47
  %18 = load i32, i32* @dump_flags, align 4, !dbg !3939
  %and = and i32 %18, 8, !dbg !3940
  %tobool50 = icmp eq i32 %and, 0, !dbg !3940
  br i1 %tobool50, label %if.end53, label %if.then51, !dbg !3941

if.then51:                                        ; preds = %land.lhs.true49
  %call52 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %17, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i64 0, i64 0)) #6, !dbg !3942
  br label %if.end53, !dbg !3942

if.end53:                                         ; preds = %land.lhs.true49, %if.then47, %if.then51
  %19 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3943
  %tobool54 = icmp eq %struct.VEC_operand_entry_t_heap* %19, null, !dbg !3943
  br i1 %tobool54, label %cond.end58, label %cond.true55, !dbg !3943

cond.true55:                                      ; preds = %if.end53
  %base56 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %19, i64 0, i32 0, !dbg !3943
  br label %cond.end58, !dbg !3943

cond.end58:                                       ; preds = %if.end53, %cond.true55
  %cond59 = phi %struct.VEC_operand_entry_t_base* [ %base56, %cond.true55 ], [ null, %if.end53 ], !dbg !3943
  %call60 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond59) #8, !dbg !3943
  %20 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3944
  %tobool61 = icmp eq %struct.VEC_operand_entry_t_heap* %20, null, !dbg !3944
  br i1 %tobool61, label %cond.end65, label %cond.true62, !dbg !3944

cond.true62:                                      ; preds = %cond.end58
  %base63 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %20, i64 0, i32 0, !dbg !3944
  br label %cond.end65, !dbg !3944

cond.end65:                                       ; preds = %cond.end58, %cond.true62
  %cond66 = phi %struct.VEC_operand_entry_t_base* [ %base63, %cond.true62 ], [ null, %cond.end58 ], !dbg !3944
  %call67 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond66) #8, !dbg !3944
  tail call fastcc void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %ops, %union.tree_node* nonnull %call41) #8, !dbg !3945
  %21 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 1), align 4, !dbg !3946
  %inc = add nsw i32 %21, 1, !dbg !3946
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 1), align 4, !dbg !3946
  tail call fastcc void @optimize_ops_list(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops) #8, !dbg !3947
  br label %cleanup, !dbg !3948

cleanup:                                          ; preds = %land.lhs.true43, %if.then35, %cond.end65
  %cleanup.dest.slot.0 = phi i32 [ 1, %cond.end65 ], [ 0, %land.lhs.true43 ], [ 0, %if.then35 ]
  %cond2 = icmp eq i32 %cleanup.dest.slot.0, 0
  br i1 %cond2, label %if.end69, label %cleanup70

if.end69:                                         ; preds = %land.lhs.true27, %land.lhs.true22, %cleanup, %cond.end16
  br label %cleanup70, !dbg !3949

cleanup70:                                        ; preds = %cleanup, %if.end69
  %cleanup.dest.slot.1 = phi i32 [ %cleanup.dest.slot.0, %cleanup ], [ 0, %if.end69 ]
  %cond1 = icmp eq i32 %cleanup.dest.slot.1, 0
  br i1 %cond1, label %if.end73, label %cleanup120

if.end73:                                         ; preds = %land.lhs.true, %cleanup70, %cond.end5
  tail call fastcc void @eliminate_using_constants(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops) #8, !dbg !3950
  call void @llvm.dbg.value(metadata %struct.operand_entry* null, metadata !3891, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata i32 0, metadata !3889, metadata !DIExpression()), !dbg !3903
  br label %for.cond, !dbg !3951

for.cond:                                         ; preds = %for.cond.backedge, %if.end73
  %oelast.0 = phi %struct.operand_entry* [ null, %if.end73 ], [ %oelast.1, %for.cond.backedge ], !dbg !3952
  %i.0 = phi i32 [ 0, %if.end73 ], [ %i.1, %for.cond.backedge ], !dbg !3953
  %iterate.0 = phi i8 [ 0, %if.end73 ], [ %iterate.1, %for.cond.backedge ], !dbg !3954
  call void @llvm.dbg.value(metadata i8 %iterate.0, metadata !3892, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !3889, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata %struct.operand_entry* %oelast.0, metadata !3891, metadata !DIExpression()), !dbg !3903
  %22 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3955
  %tobool74 = icmp eq %struct.VEC_operand_entry_t_heap* %22, null, !dbg !3955
  br i1 %tobool74, label %cond.end78, label %cond.true75, !dbg !3955

cond.true75:                                      ; preds = %for.cond
  %base76 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %22, i64 0, i32 0, !dbg !3955
  br label %cond.end78, !dbg !3955

cond.end78:                                       ; preds = %for.cond, %cond.true75
  %cond79 = phi %struct.VEC_operand_entry_t_base* [ %base76, %cond.true75 ], [ null, %for.cond ], !dbg !3955
  call void @llvm.dbg.value(metadata %struct.operand_entry** %oe, metadata !3890, metadata !DIExpression(DW_OP_deref)), !dbg !3903
  %call80 = call fastcc i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond79, i32 %i.0, %struct.operand_entry** nonnull %oe) #8, !dbg !3955
  %tobool81 = icmp eq i32 %call80, 0, !dbg !3956
  br i1 %tobool81, label %for.end, label %for.body, !dbg !3956

for.body:                                         ; preds = %cond.end78
  call void @llvm.dbg.value(metadata i8* %done, metadata !3899, metadata !DIExpression(DW_OP_deref)), !dbg !3957
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %done) #7, !dbg !3958
  call void @llvm.dbg.value(metadata i8 0, metadata !3899, metadata !DIExpression()), !dbg !3957
  store i8 0, i8* %done, align 1, !dbg !3959
  %23 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !3960
  call void @llvm.dbg.value(metadata %struct.operand_entry* %23, metadata !3890, metadata !DIExpression()), !dbg !3903
  %call82 = call fastcc zeroext i8 @eliminate_not_pairs(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, i32 %i.0, %struct.operand_entry* %23) #8, !dbg !3962
  %tobool83 = icmp eq i8 %call82, 0, !dbg !3962
  br i1 %tobool83, label %if.end85, label %cleanup100, !dbg !3963

if.end85:                                         ; preds = %for.body
  %24 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !3964
  call void @llvm.dbg.value(metadata %struct.operand_entry* %24, metadata !3890, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata i8* %done, metadata !3899, metadata !DIExpression(DW_OP_deref)), !dbg !3957
  %call86 = call fastcc zeroext i8 @eliminate_duplicate_pair(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, i8* nonnull %done, i32 %i.0, %struct.operand_entry* %24, %struct.operand_entry* %oelast.0) #8, !dbg !3966
  %tobool88 = icmp eq i8 %call86, 0, !dbg !3966
  br i1 %tobool88, label %lor.lhs.false, label %if.then94, !dbg !3967

lor.lhs.false:                                    ; preds = %if.end85
  %25 = load i8, i8* %done, align 1, !dbg !3968
  call void @llvm.dbg.value(metadata i8 %25, metadata !3899, metadata !DIExpression()), !dbg !3957
  %tobool89 = icmp eq i8 %25, 0, !dbg !3968
  br i1 %tobool89, label %land.lhs.true90, label %if.end98, !dbg !3969

land.lhs.true90:                                  ; preds = %lor.lhs.false
  %26 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !3970
  call void @llvm.dbg.value(metadata %struct.operand_entry* %26, metadata !3890, metadata !DIExpression()), !dbg !3903
  %call91 = call fastcc zeroext i8 @eliminate_plus_minus_pair(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, i32 %i.0, %struct.operand_entry* %26) #8, !dbg !3971
  %tobool93 = icmp eq i8 %call91, 0, !dbg !3971
  br i1 %tobool93, label %if.end98, label %if.then94, !dbg !3972

if.then94:                                        ; preds = %land.lhs.true90, %if.end85
  %27 = load i8, i8* %done, align 1, !dbg !3973
  call void @llvm.dbg.value(metadata i8 %27, metadata !3899, metadata !DIExpression()), !dbg !3957
  %tobool95 = icmp ne i8 %27, 0, !dbg !3973
  %oelast.0. = select i1 %tobool95, %struct.operand_entry* %oelast.0, %struct.operand_entry* null, !dbg !3976
  %iterate.0. = select i1 %tobool95, i8 %iterate.0, i8 1, !dbg !3976
  %. = select i1 %tobool95, i32 1, i32 3, !dbg !3976
  br label %cleanup100, !dbg !3976

if.end98:                                         ; preds = %land.lhs.true90, %lor.lhs.false
  %28 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !3977
  call void @llvm.dbg.value(metadata %struct.operand_entry* %28, metadata !3890, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata %struct.operand_entry* %28, metadata !3891, metadata !DIExpression()), !dbg !3903
  %inc99 = add i32 %i.0, 1, !dbg !3978
  call void @llvm.dbg.value(metadata i32 %inc99, metadata !3889, metadata !DIExpression()), !dbg !3903
  br label %cleanup100, !dbg !3979

cleanup100:                                       ; preds = %for.body, %if.then94, %if.end98
  %oelast.1 = phi %struct.operand_entry* [ %28, %if.end98 ], [ %oelast.0, %for.body ], [ %oelast.0., %if.then94 ], !dbg !3903
  %i.1 = phi i32 [ %inc99, %if.end98 ], [ %i.0, %for.body ], [ %i.0, %if.then94 ], !dbg !3980
  %iterate.1 = phi i8 [ %iterate.0, %if.end98 ], [ %iterate.0, %for.body ], [ %iterate.0., %if.then94 ], !dbg !3903
  %cleanup.dest.slot.2 = phi i32 [ 0, %if.end98 ], [ 1, %for.body ], [ %., %if.then94 ]
  call void @llvm.dbg.value(metadata i8 %iterate.1, metadata !3892, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !3889, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata %struct.operand_entry* %oelast.1, metadata !3891, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata i8* %done, metadata !3899, metadata !DIExpression(DW_OP_deref)), !dbg !3957
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %done) #7, !dbg !3979
  switch i32 %cleanup.dest.slot.2, label %cleanup120.loopexit [
    i32 0, label %for.cond.backedge
    i32 3, label %for.cond.backedge
  ]

for.cond.backedge:                                ; preds = %cleanup100, %cleanup100
  br label %for.cond, !dbg !3903, !llvm.loop !3981

for.end:                                          ; preds = %cond.end78
  %iterate.0.lcssa = phi i8 [ %iterate.0, %cond.end78 ], !dbg !3954
  call void @llvm.dbg.value(metadata i8 %iterate.0.lcssa, metadata !3892, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata i8 %iterate.0.lcssa, metadata !3892, metadata !DIExpression()), !dbg !3903
  call void @llvm.dbg.value(metadata i8 %iterate.0.lcssa, metadata !3892, metadata !DIExpression()), !dbg !3903
  %29 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3983
  %tobool103 = icmp eq %struct.VEC_operand_entry_t_heap* %29, null, !dbg !3983
  br i1 %tobool103, label %cond.end107, label %cond.true104, !dbg !3983

cond.true104:                                     ; preds = %for.end
  %base105 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %29, i64 0, i32 0, !dbg !3983
  br label %cond.end107, !dbg !3983

cond.end107:                                      ; preds = %for.end, %cond.true104
  %cond108 = phi %struct.VEC_operand_entry_t_base* [ %base105, %cond.true104 ], [ null, %for.end ], !dbg !3983
  %call109 = call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond108) #8, !dbg !3983
  call void @llvm.dbg.value(metadata i32 %call109, metadata !3888, metadata !DIExpression()), !dbg !3903
  %30 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !3984
  %tobool110 = icmp eq %struct.VEC_operand_entry_t_heap* %30, null, !dbg !3984
  br i1 %tobool110, label %cond.end114, label %cond.true111, !dbg !3984

cond.true111:                                     ; preds = %cond.end107
  %base112 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %30, i64 0, i32 0, !dbg !3984
  br label %cond.end114, !dbg !3984

cond.end114:                                      ; preds = %cond.end107, %cond.true111
  %cond115 = phi %struct.VEC_operand_entry_t_base* [ %base112, %cond.true111 ], [ null, %cond.end107 ], !dbg !3984
  %call116 = call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %cond115) #8, !dbg !3984
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call116, metadata !3891, metadata !DIExpression()), !dbg !3903
  %tobool117 = icmp eq i8 %iterate.0.lcssa, 0, !dbg !3985
  br i1 %tobool117, label %cleanup120, label %if.then118, !dbg !3987

if.then118:                                       ; preds = %cond.end114
  call fastcc void @optimize_ops_list(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops) #8, !dbg !3988
  br label %cleanup120, !dbg !3988

cleanup120.loopexit:                              ; preds = %cleanup100
  br label %cleanup120, !dbg !3989

cleanup120:                                       ; preds = %cleanup120.loopexit, %cond.end114, %if.then118, %cond.end, %cleanup70
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !3989
  ret void, !dbg !3989
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @undistribute_ops_list(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, %struct.loop* %loop) unnamed_addr #5 !dbg !3990 {
entry:
  %oe1 = alloca %struct.operand_entry*, align 8
  %i = alloca i32, align 4
  %sbi0 = alloca %struct.sbitmap_iterator, align 8
  %c = alloca %struct.oecount_s, align 8
  %c146 = alloca %struct.oecount_s*, align 8
  call void @llvm.dbg.value(metadata i32 %opcode, metadata !3994, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !3995, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata %struct.loop* %loop, metadata !3996, metadata !DIExpression()), !dbg !4070
  %0 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4071
  %tobool = icmp eq %struct.VEC_operand_entry_t_heap* %0, null, !dbg !4071
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4071

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %0, i64 0, i32 0, !dbg !4071
  br label %cond.end, !dbg !4071

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %entry ], !dbg !4071
  %call = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond) #8, !dbg !4071
  call void @llvm.dbg.value(metadata i32 %call, metadata !3997, metadata !DIExpression()), !dbg !4070
  %1 = bitcast %struct.operand_entry** %oe1 to i8*, !dbg !4072
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !4072
  %2 = bitcast i32* %i to i8*, !dbg !4073
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #7, !dbg !4073
  %3 = bitcast %struct.sbitmap_iterator* %sbi0 to i8*, !dbg !4074
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %3) #7, !dbg !4074
  call void @llvm.dbg.value(metadata i8 0, metadata !4028, metadata !DIExpression()), !dbg !4070
  %cmp = icmp ult i32 %call, 2, !dbg !4075
  %cmp1 = icmp ne i32 %opcode, 63, !dbg !4077
  %or.cond = or i1 %cmp, %cmp1, !dbg !4078
  br i1 %or.cond, label %cleanup378, label %if.end, !dbg !4078

if.end:                                           ; preds = %cond.end
  %call2 = tail call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call) #6, !dbg !4079
  call void @llvm.dbg.value(metadata %struct.simple_bitmap_def* %call2, metadata !4001, metadata !DIExpression()), !dbg !4070
  tail call void @sbitmap_zero(%struct.simple_bitmap_def* %call2) #6, !dbg !4080
  call void @llvm.dbg.value(metadata i32 0, metadata !4013, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata i32 0, metadata !3999, metadata !DIExpression()), !dbg !4070
  br label %for.cond, !dbg !4081

for.cond:                                         ; preds = %cleanup, %if.end
  %4 = phi i32 [ 0, %if.end ], [ %inc29, %cleanup ], !dbg !4082
  %nr_candidates.0 = phi i32 [ 0, %if.end ], [ %nr_candidates.1, %cleanup ], !dbg !4083
  store i32 %4, i32* %i, align 4, !dbg !4082
  call void @llvm.dbg.value(metadata i32 %nr_candidates.0, metadata !4013, metadata !DIExpression()), !dbg !4070
  %5 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4084
  %tobool3 = icmp eq %struct.VEC_operand_entry_t_heap* %5, null, !dbg !4084
  br i1 %tobool3, label %cond.end7, label %cond.true4, !dbg !4084

cond.true4:                                       ; preds = %for.cond
  %base5 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %5, i64 0, i32 0, !dbg !4084
  br label %cond.end7, !dbg !4084

cond.end7:                                        ; preds = %for.cond, %cond.true4
  %cond8 = phi %struct.VEC_operand_entry_t_base* [ %base5, %cond.true4 ], [ null, %for.cond ], !dbg !4084
  call void @llvm.dbg.value(metadata i32 %4, metadata !3999, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata %struct.operand_entry** %oe1, metadata !3998, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  %call9 = call fastcc i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond8, i32 %4, %struct.operand_entry** nonnull %oe1) #8, !dbg !4084
  %tobool10 = icmp eq i32 %call9, 0, !dbg !4085
  br i1 %tobool10, label %for.end, label %for.body, !dbg !4085

for.body:                                         ; preds = %cond.end7
  %6 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4086
  call void @llvm.dbg.value(metadata %struct.operand_entry* %6, metadata !3998, metadata !DIExpression()), !dbg !4070
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %6, i64 0, i32 1, !dbg !4086
  %7 = bitcast %union.tree_node** %op to i64**, !dbg !4086
  %8 = load i64*, i64** %7, align 8, !dbg !4086
  %bf.load = load i64, i64* %8, align 8, !dbg !4086
  %bf.cast5 = and i64 %bf.load, 65535, !dbg !4088
  %cmp12 = icmp eq i64 %bf.cast5, 141, !dbg !4088
  br i1 %cmp12, label %if.end14, label %cleanup, !dbg !4089

if.end14:                                         ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.operand_entry* %6, metadata !3998, metadata !DIExpression()), !dbg !4070
  %def_stmt = getelementptr inbounds i64, i64* %8, i64 4, !dbg !4090
  %9 = bitcast i64* %def_stmt to %union.gimple_statement_d**, !dbg !4090
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %9, align 8, !dbg !4090
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %10, metadata !4033, metadata !DIExpression()), !dbg !4091
  %call16 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %10) #8, !dbg !4092
  %tobool17 = icmp eq i8 %call16, 0, !dbg !4092
  br i1 %tobool17, label %cleanup, label %if.end19, !dbg !4094

if.end19:                                         ; preds = %if.end14
  %call20 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %10) #8, !dbg !4095
  call void @llvm.dbg.value(metadata i32 %call20, metadata !4029, metadata !DIExpression()), !dbg !4091
  switch i32 %call20, label %cleanup [
    i32 65, label %lor.lhs.false23
    i32 75, label %lor.lhs.false23
  ], !dbg !4096

lor.lhs.false23:                                  ; preds = %if.end19, %if.end19
  %call24 = call fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %10, i32 %call20, %struct.loop* %loop) #8, !dbg !4098
  %tobool25 = icmp eq i8 %call24, 0, !dbg !4098
  br i1 %tobool25, label %cleanup, label %if.end27, !dbg !4099

if.end27:                                         ; preds = %lor.lhs.false23
  %11 = load i32, i32* %i, align 4, !dbg !4100
  call void @llvm.dbg.value(metadata i32 %11, metadata !3999, metadata !DIExpression()), !dbg !4070
  call fastcc void @SET_BIT(%struct.simple_bitmap_def* %call2, i32 %11) #8, !dbg !4101
  %inc = add i32 %nr_candidates.0, 1, !dbg !4102
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4013, metadata !DIExpression()), !dbg !4070
  br label %cleanup, !dbg !4103

cleanup:                                          ; preds = %lor.lhs.false23, %if.end14, %for.body, %if.end19, %if.end27
  %nr_candidates.1 = phi i32 [ %inc, %if.end27 ], [ %nr_candidates.0, %for.body ], [ %nr_candidates.0, %if.end14 ], [ %nr_candidates.0, %if.end19 ], [ %nr_candidates.0, %lor.lhs.false23 ], !dbg !4070
  call void @llvm.dbg.value(metadata i32 %nr_candidates.1, metadata !4013, metadata !DIExpression()), !dbg !4070
  %12 = load i32, i32* %i, align 4, !dbg !4104
  call void @llvm.dbg.value(metadata i32 %12, metadata !3999, metadata !DIExpression()), !dbg !4070
  %inc29 = add i32 %12, 1, !dbg !4104
  call void @llvm.dbg.value(metadata i32 %inc29, metadata !3999, metadata !DIExpression()), !dbg !4070
  br label %for.cond, !dbg !4105, !llvm.loop !4106

for.end:                                          ; preds = %cond.end7
  %nr_candidates.0.lcssa = phi i32 [ %nr_candidates.0, %cond.end7 ], !dbg !4083
  call void @llvm.dbg.value(metadata i32 %nr_candidates.0.lcssa, metadata !4013, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata i32 %nr_candidates.0.lcssa, metadata !4013, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata i32 %nr_candidates.0.lcssa, metadata !4013, metadata !DIExpression()), !dbg !4070
  %cmp30 = icmp ult i32 %nr_candidates.0.lcssa, 2, !dbg !4108
  br i1 %cmp30, label %if.then31, label %if.end32, !dbg !4110

if.then31:                                        ; preds = %for.end
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %call2, i64 0, i32 0, !dbg !4111
  %13 = load i8*, i8** %popcount, align 8, !dbg !4111
  call void @free(i8* %13) #6, !dbg !4111
  %14 = bitcast %struct.simple_bitmap_def* %call2 to i8*, !dbg !4111
  call void @free(i8* %14) #6, !dbg !4111
  br label %cleanup378, !dbg !4113

if.end32:                                         ; preds = %for.end
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4114
  %tobool33 = icmp eq %struct._IO_FILE* %15, null, !dbg !4114
  br i1 %tobool33, label %if.end48, label %land.lhs.true34, !dbg !4116

land.lhs.true34:                                  ; preds = %if.end32
  %16 = load i32, i32* @dump_flags, align 4, !dbg !4117
  %and = and i32 %16, 8, !dbg !4118
  %tobool35 = icmp eq i32 %and, 0, !dbg !4118
  br i1 %tobool35, label %if.end48, label %if.then36, !dbg !4119

if.then36:                                        ; preds = %land.lhs.true34
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %15, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.32, i64 0, i64 0)) #6, !dbg !4120
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4122
  %18 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4123
  %tobool38 = icmp eq %struct.VEC_operand_entry_t_heap* %18, null, !dbg !4123
  br i1 %tobool38, label %cond.end42, label %cond.true39, !dbg !4123

cond.true39:                                      ; preds = %if.then36
  %base40 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %18, i64 0, i32 0, !dbg !4123
  br label %cond.end42, !dbg !4123

cond.end42:                                       ; preds = %if.then36, %cond.true39
  %cond43 = phi %struct.VEC_operand_entry_t_base* [ %base40, %cond.true39 ], [ null, %if.then36 ], !dbg !4123
  %call44 = call i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def* %call2) #6, !dbg !4123
  %call45 = call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond43, i32 %call44) #8, !dbg !4123
  %op46 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call45, i64 0, i32 1, !dbg !4124
  %19 = load %union.tree_node*, %union.tree_node** %op46, align 8, !dbg !4124
  call void @print_generic_expr(%struct._IO_FILE* %17, %union.tree_node* %19, i32 0) #6, !dbg !4125
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4126
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i64 0, i64 0), i32 %nr_candidates.0.lcssa) #6, !dbg !4127
  br label %if.end48, !dbg !4128

if.end48:                                         ; preds = %land.lhs.true34, %if.end32, %cond.end42
  store %struct.VEC_oecount_heap* null, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4129
  %call49 = call %struct.htab* @htab_create(i64 15, i32 (i8*)* nonnull @oecount_hash, i32 (i8*, i8*)* nonnull @oecount_eq, void (i8*)* null) #6, !dbg !4130
  call void @llvm.dbg.value(metadata %struct.htab* %call49, metadata !4027, metadata !DIExpression()), !dbg !4070
  %21 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4131
  %tobool50 = icmp eq %struct.VEC_operand_entry_t_heap* %21, null, !dbg !4131
  br i1 %tobool50, label %cond.end54, label %cond.true51, !dbg !4131

cond.true51:                                      ; preds = %if.end48
  %base52 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %21, i64 0, i32 0, !dbg !4131
  br label %cond.end54, !dbg !4131

cond.end54:                                       ; preds = %if.end48, %cond.true51
  %cond55 = phi %struct.VEC_operand_entry_t_base* [ %base52, %cond.true51 ], [ null, %if.end48 ], !dbg !4131
  %call56 = call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond55) #8, !dbg !4131
  %conv = zext i32 %call56 to i64, !dbg !4131
  %call57 = call i8* @xcalloc(i64 %conv, i64 8) #6, !dbg !4131
  %22 = bitcast i8* %call57 to %struct.VEC_operand_entry_t_heap**, !dbg !4131
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %22, metadata !4026, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %sbi0, metadata !4015, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  call fastcc void @sbitmap_iter_init(%struct.sbitmap_iterator* nonnull %sbi0, %struct.simple_bitmap_def* %call2, i32 0) #8, !dbg !4132
  %23 = bitcast %struct.oecount_s* %c to i8*, !dbg !4133
  %oecode89 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %c, i64 0, i32 1, !dbg !4133
  %cnt = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %c, i64 0, i32 0, !dbg !4133
  %op91 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %c, i64 0, i32 2, !dbg !4133
  %24 = bitcast %union.tree_node** %op91 to i64*, !dbg !4133
  br label %for.cond58, !dbg !4132

for.cond58:                                       ; preds = %for.inc124, %cond.end54
  call void @llvm.dbg.value(metadata i32* %i, metadata !3999, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %sbi0, metadata !4015, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  %call59 = call fastcc zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* nonnull %sbi0, i32* nonnull %i) #8, !dbg !4134
  %tobool60 = icmp eq i8 %call59, 0, !dbg !4132
  br i1 %tobool60, label %for.end125, label %for.body61, !dbg !4132

for.body61:                                       ; preds = %for.cond58
  %25 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4135
  %tobool63 = icmp eq %struct.VEC_operand_entry_t_heap* %25, null, !dbg !4135
  br i1 %tobool63, label %cond.end67, label %cond.true64, !dbg !4135

cond.true64:                                      ; preds = %for.body61
  %base65 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %25, i64 0, i32 0, !dbg !4135
  br label %cond.end67, !dbg !4135

cond.end67:                                       ; preds = %for.body61, %cond.true64
  %cond68 = phi %struct.VEC_operand_entry_t_base* [ %base65, %cond.true64 ], [ null, %for.body61 ], !dbg !4135
  %26 = load i32, i32* %i, align 4, !dbg !4135
  call void @llvm.dbg.value(metadata i32 %26, metadata !3999, metadata !DIExpression()), !dbg !4070
  %call69 = call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond68, i32 %26) #8, !dbg !4135
  %op70 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call69, i64 0, i32 1, !dbg !4135
  %27 = bitcast %union.tree_node** %op70 to %struct.tree_ssa_name**, !dbg !4135
  %28 = load %struct.tree_ssa_name*, %struct.tree_ssa_name** %27, align 8, !dbg !4135
  %def_stmt72 = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %28, i64 0, i32 2, !dbg !4135
  %29 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt72, align 8, !dbg !4135
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %29, metadata !4034, metadata !DIExpression()), !dbg !4136
  %call73 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %29) #8, !dbg !4137
  call void @llvm.dbg.value(metadata i32 %call73, metadata !4038, metadata !DIExpression()), !dbg !4136
  %30 = load i32, i32* %i, align 4, !dbg !4138
  call void @llvm.dbg.value(metadata i32 %30, metadata !3999, metadata !DIExpression()), !dbg !4070
  %idxprom = zext i32 %30 to i64, !dbg !4139
  %arrayidx = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %22, i64 %idxprom, !dbg !4139
  %call74 = call zeroext i8 @associative_tree_code(i32 %call73) #6, !dbg !4140
  call fastcc void @linearize_expr_tree(%struct.VEC_operand_entry_t_heap** %arrayidx, %union.gimple_statement_d* %29, i8 zeroext %call74, i8 zeroext 0) #8, !dbg !4141
  call void @llvm.dbg.value(metadata i32 0, metadata !4039, metadata !DIExpression()), !dbg !4136
  br label %for.cond75, !dbg !4142

for.cond75:                                       ; preds = %if.end120, %cond.end67
  %j62.0 = phi i32 [ 0, %cond.end67 ], [ %inc122, %if.end120 ], !dbg !4143
  call void @llvm.dbg.value(metadata i32 %j62.0, metadata !4039, metadata !DIExpression()), !dbg !4136
  %31 = load i32, i32* %i, align 4, !dbg !4144
  call void @llvm.dbg.value(metadata i32 %31, metadata !3999, metadata !DIExpression()), !dbg !4070
  %idxprom76 = zext i32 %31 to i64, !dbg !4144
  %arrayidx77 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %22, i64 %idxprom76, !dbg !4144
  %32 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %arrayidx77, align 8, !dbg !4144
  %tobool78 = icmp eq %struct.VEC_operand_entry_t_heap* %32, null, !dbg !4144
  br i1 %tobool78, label %cond.end84, label %cond.true79, !dbg !4144

cond.true79:                                      ; preds = %for.cond75
  call void @llvm.dbg.value(metadata i32 %31, metadata !3999, metadata !DIExpression()), !dbg !4070
  %base82 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %32, i64 0, i32 0, !dbg !4144
  br label %cond.end84, !dbg !4144

cond.end84:                                       ; preds = %for.cond75, %cond.true79
  %cond85 = phi %struct.VEC_operand_entry_t_base* [ %base82, %cond.true79 ], [ null, %for.cond75 ], !dbg !4144
  call void @llvm.dbg.value(metadata %struct.operand_entry** %oe1, metadata !3998, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  %call86 = call fastcc i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond85, i32 %j62.0, %struct.operand_entry** nonnull %oe1) #8, !dbg !4144
  %tobool87 = icmp eq i32 %call86, 0, !dbg !4145
  br i1 %tobool87, label %for.inc124, label %for.body88, !dbg !4145

for.body88:                                       ; preds = %cond.end84
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %23) #7, !dbg !4146
  store i32 %call73, i32* %oecode89, align 4, !dbg !4147
  store i32 1, i32* %cnt, align 8, !dbg !4148
  %33 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4149
  call void @llvm.dbg.value(metadata %struct.operand_entry* %33, metadata !3998, metadata !DIExpression()), !dbg !4070
  %op90 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %33, i64 0, i32 1, !dbg !4150
  %34 = bitcast %union.tree_node** %op90 to i64*, !dbg !4150
  %35 = load i64, i64* %34, align 8, !dbg !4150
  store i64 %35, i64* %24, align 8, !dbg !4151
  call void @llvm.dbg.value(metadata %struct.oecount_s* %c, metadata !4040, metadata !DIExpression(DW_OP_deref)), !dbg !4133
  %call92 = call fastcc %struct.oecount_s* @VEC_oecount_heap_safe_push(%struct.VEC_oecount_heap** nonnull @cvec, %struct.oecount_s* nonnull %c) #8, !dbg !4152
  %36 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4153
  %base95 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %36, i64 0, i32 0, !dbg !4153
  %call99 = call fastcc i32 @VEC_oecount_base_length(%struct.VEC_oecount_base* %base95) #8, !dbg !4153
  %add = add i32 %call99, 41, !dbg !4154
  %conv100 = zext i32 %add to i64, !dbg !4153
  call void @llvm.dbg.value(metadata i64 %conv100, metadata !4045, metadata !DIExpression()), !dbg !4133
  %37 = inttoptr i64 %conv100 to i8*, !dbg !4155
  %call101 = call i8** @htab_find_slot(%struct.htab* %call49, i8* %37, i32 1) #6, !dbg !4156
  call void @llvm.dbg.value(metadata i8** %call101, metadata !4044, metadata !DIExpression()), !dbg !4133
  %38 = load i8*, i8** %call101, align 8, !dbg !4157
  %tobool102 = icmp eq i8* %38, null, !dbg !4157
  br i1 %tobool102, label %if.then103, label %if.else, !dbg !4159

if.then103:                                       ; preds = %for.body88
  store i8* %37, i8** %call101, align 8, !dbg !4160
  br label %if.end120, !dbg !4162

if.else:                                          ; preds = %for.body88
  %39 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4163
  %base106 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %39, i64 0, i32 0, !dbg !4163
  call fastcc void @VEC_oecount_base_pop(%struct.VEC_oecount_base* %base106) #8, !dbg !4163
  %40 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4165
  %base112 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %40, i64 0, i32 0, !dbg !4165
  %41 = bitcast i8** %call101 to i64*, !dbg !4165
  %42 = load i64, i64* %41, align 8, !dbg !4165
  %43 = trunc i64 %42 to i32, !dbg !4165
  %conv116 = add i32 %43, -42, !dbg !4165
  %call117 = call fastcc %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %base112, i32 %conv116) #8, !dbg !4165
  %cnt118 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call117, i64 0, i32 0, !dbg !4166
  %44 = load i32, i32* %cnt118, align 8, !dbg !4167
  %inc119 = add nsw i32 %44, 1, !dbg !4167
  store i32 %inc119, i32* %cnt118, align 8, !dbg !4167
  br label %if.end120

if.end120:                                        ; preds = %if.else, %if.then103
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %23) #7, !dbg !4168
  %inc122 = add i32 %j62.0, 1, !dbg !4169
  call void @llvm.dbg.value(metadata i32 %inc122, metadata !4039, metadata !DIExpression()), !dbg !4136
  br label %for.cond75, !dbg !4170, !llvm.loop !4171

for.inc124:                                       ; preds = %cond.end84
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %sbi0, metadata !4015, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  call fastcc void @sbitmap_iter_next(%struct.sbitmap_iterator* nonnull %sbi0) #8, !dbg !4134
  br label %for.cond58, !dbg !4134, !llvm.loop !4173

for.end125:                                       ; preds = %for.cond58
  call void @htab_delete(%struct.htab* %call49) #6, !dbg !4175
  %45 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4176
  %base128 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %45, i64 0, i32 0, !dbg !4176
  %call132 = call fastcc %struct.oecount_s* @VEC_oecount_base_address(%struct.VEC_oecount_base* %base128) #8, !dbg !4176
  %46 = bitcast %struct.oecount_s* %call132 to i8*, !dbg !4176
  %47 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4177
  %base135 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %47, i64 0, i32 0, !dbg !4177
  %call139 = call fastcc i32 @VEC_oecount_base_length(%struct.VEC_oecount_base* %base135) #8, !dbg !4177
  %conv140 = zext i32 %call139 to i64, !dbg !4177
  call void @spec_qsort(i8* %46, i64 %conv140, i64 16, i32 (i8*, i8*)* nonnull @oecount_cmp) #6, !dbg !4178
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4179
  %tobool141 = icmp eq %struct._IO_FILE* %48, null, !dbg !4179
  br i1 %tobool141, label %if.end176, label %land.lhs.true142, !dbg !4180

land.lhs.true142:                                 ; preds = %for.end125
  %49 = load i32, i32* @dump_flags, align 4, !dbg !4181
  %and143 = and i32 %49, 8, !dbg !4182
  %tobool144 = icmp eq i32 %and143, 0, !dbg !4182
  br i1 %tobool144, label %if.end176, label %if.then145, !dbg !4183

if.then145:                                       ; preds = %land.lhs.true142
  %50 = bitcast %struct.oecount_s** %c146 to i8*, !dbg !4184
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #7, !dbg !4184
  %call147 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %48, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.34, i64 0, i64 0)) #6, !dbg !4185
  call void @llvm.dbg.value(metadata i32 0, metadata !4000, metadata !DIExpression()), !dbg !4070
  br label %for.cond148, !dbg !4186

for.cond148:                                      ; preds = %cond.end168, %if.then145
  %j.0 = phi i32 [ 0, %if.then145 ], [ %inc174, %cond.end168 ], !dbg !4188
  call void @llvm.dbg.value(metadata i32 %j.0, metadata !4000, metadata !DIExpression()), !dbg !4070
  %51 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4189
  %base151 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %51, i64 0, i32 0, !dbg !4189
  call void @llvm.dbg.value(metadata %struct.oecount_s** %c146, metadata !4046, metadata !DIExpression(DW_OP_deref)), !dbg !4191
  %call155 = call fastcc i32 @VEC_oecount_base_iterate(%struct.VEC_oecount_base* %base151, i32 %j.0, %struct.oecount_s** nonnull %c146) #8, !dbg !4189
  %tobool156 = icmp eq i32 %call155, 0, !dbg !4192
  br i1 %tobool156, label %for.end175, label %for.body157, !dbg !4192

for.body157:                                      ; preds = %for.cond148
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4193
  %53 = load %struct.oecount_s*, %struct.oecount_s** %c146, align 8, !dbg !4195
  call void @llvm.dbg.value(metadata %struct.oecount_s* %53, metadata !4046, metadata !DIExpression()), !dbg !4191
  %cnt158 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %53, i64 0, i32 0, !dbg !4196
  %54 = load i32, i32* %cnt158, align 8, !dbg !4196
  call void @llvm.dbg.value(metadata %struct.oecount_s* %53, metadata !4046, metadata !DIExpression()), !dbg !4191
  %oecode159 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %53, i64 0, i32 1, !dbg !4197
  %55 = load i32, i32* %oecode159, align 4, !dbg !4197
  %cmp160 = icmp eq i32 %55, 65, !dbg !4198
  br i1 %cmp160, label %cond.end168, label %cond.false163, !dbg !4199

cond.false163:                                    ; preds = %for.body157
  call void @llvm.dbg.value(metadata %struct.oecount_s* %53, metadata !4046, metadata !DIExpression()), !dbg !4191
  %cmp165 = icmp eq i32 %55, 75, !dbg !4200
  %cond167 = select i1 %cmp165, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), !dbg !4201
  br label %cond.end168, !dbg !4199

cond.end168:                                      ; preds = %for.body157, %cond.false163
  %cond169 = phi i8* [ %cond167, %cond.false163 ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0), %for.body157 ], !dbg !4199
  %call170 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i64 0, i64 0), i32 %54, i8* %cond169) #6, !dbg !4202
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4203
  %57 = load %struct.oecount_s*, %struct.oecount_s** %c146, align 8, !dbg !4204
  call void @llvm.dbg.value(metadata %struct.oecount_s* %57, metadata !4046, metadata !DIExpression()), !dbg !4191
  %op171 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %57, i64 0, i32 2, !dbg !4205
  %58 = load %union.tree_node*, %union.tree_node** %op171, align 8, !dbg !4205
  call void @print_generic_expr(%struct._IO_FILE* %56, %union.tree_node* %58, i32 0) #6, !dbg !4206
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4207
  %call172 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)) #6, !dbg !4208
  %inc174 = add i32 %j.0, 1, !dbg !4209
  call void @llvm.dbg.value(metadata i32 %inc174, metadata !4000, metadata !DIExpression()), !dbg !4070
  br label %for.cond148, !dbg !4210, !llvm.loop !4211

for.end175:                                       ; preds = %for.cond148
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #7, !dbg !4213
  br label %if.end176, !dbg !4214

if.end176:                                        ; preds = %land.lhs.true142, %for.end125, %for.end175
  %call177 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %call) #6, !dbg !4215
  call void @llvm.dbg.value(metadata %struct.simple_bitmap_def* %call177, metadata !4012, metadata !DIExpression()), !dbg !4070
  br label %while.cond, !dbg !4216

while.cond:                                       ; preds = %cleanup357, %if.end176
  %changed.0 = phi i8 [ 0, %if.end176 ], [ %changed.2, %cleanup357 ], !dbg !4217
  call void @llvm.dbg.value(metadata i8 %changed.0, metadata !4028, metadata !DIExpression()), !dbg !4070
  %60 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4218
  %base180 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %60, i64 0, i32 0, !dbg !4218
  %call184 = call fastcc i32 @VEC_oecount_base_length(%struct.VEC_oecount_base* %base180) #8, !dbg !4218
  %cmp185 = icmp eq i32 %call184, 0, !dbg !4218
  br i1 %cmp185, label %while.end, label %while.body, !dbg !4216

while.body:                                       ; preds = %while.cond
  %61 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4219
  %base190 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %61, i64 0, i32 0, !dbg !4219
  %call194 = call fastcc %struct.oecount_s* @VEC_oecount_base_last(%struct.VEC_oecount_base* %base190) #8, !dbg !4219
  call void @llvm.dbg.value(metadata %struct.oecount_s* %call194, metadata !4050, metadata !DIExpression()), !dbg !4220
  %cnt195 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call194, i64 0, i32 0, !dbg !4221
  %62 = load i32, i32* %cnt195, align 8, !dbg !4221
  %cmp196 = icmp slt i32 %62, 2, !dbg !4223
  br i1 %cmp196, label %cleanup357, label %if.end199, !dbg !4224

if.end199:                                        ; preds = %while.body
  call void @sbitmap_zero(%struct.simple_bitmap_def* %call177) #6, !dbg !4225
  call void @llvm.dbg.value(metadata i32 0, metadata !4014, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %sbi0, metadata !4015, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  call fastcc void @sbitmap_iter_init(%struct.sbitmap_iterator* nonnull %sbi0, %struct.simple_bitmap_def* %call2, i32 0) #8, !dbg !4226
  %oecode227 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call194, i64 0, i32 1, !dbg !4227
  %op247 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call194, i64 0, i32 2, !dbg !4229
  br label %for.cond200, !dbg !4226

for.cond200:                                      ; preds = %cleanup256, %if.end199
  %nr_candidates2.0 = phi i32 [ 0, %if.end199 ], [ %nr_candidates2.2, %cleanup256 ], !dbg !4234
  call void @llvm.dbg.value(metadata i32 %nr_candidates2.0, metadata !4014, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata i32* %i, metadata !3999, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %sbi0, metadata !4015, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  %call201 = call fastcc zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* nonnull %sbi0, i32* nonnull %i) #8, !dbg !4235
  %tobool202 = icmp eq i8 %call201, 0, !dbg !4226
  br i1 %tobool202, label %for.end263, label %for.body203, !dbg !4226

for.body203:                                      ; preds = %for.cond200
  %63 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4236
  %tobool208 = icmp eq %struct.VEC_operand_entry_t_heap* %63, null, !dbg !4236
  br i1 %tobool208, label %cond.end212, label %cond.true209, !dbg !4236

cond.true209:                                     ; preds = %for.body203
  %base210 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %63, i64 0, i32 0, !dbg !4236
  br label %cond.end212, !dbg !4236

cond.end212:                                      ; preds = %for.body203, %cond.true209
  %cond213 = phi %struct.VEC_operand_entry_t_base* [ %base210, %cond.true209 ], [ null, %for.body203 ], !dbg !4236
  %64 = load i32, i32* %i, align 4, !dbg !4236
  call void @llvm.dbg.value(metadata i32 %64, metadata !3999, metadata !DIExpression()), !dbg !4070
  %call214 = call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond213, i32 %64) #8, !dbg !4236
  %op215 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call214, i64 0, i32 1, !dbg !4237
  %65 = load %union.tree_node*, %union.tree_node** %op215, align 8, !dbg !4237
  call void @llvm.dbg.value(metadata %union.tree_node* %65, metadata !4058, metadata !DIExpression()), !dbg !4238
  %66 = getelementptr inbounds %union.tree_node, %union.tree_node* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4239
  %bf.load217 = load i64, i64* %66, align 8, !dbg !4239
  %bf.cast2194 = and i64 %bf.load217, 65535, !dbg !4241
  %cmp220 = icmp eq i64 %bf.cast2194, 141, !dbg !4241
  br i1 %cmp220, label %if.end223, label %cleanup256, !dbg !4242

if.end223:                                        ; preds = %cond.end212
  %def_stmt225 = getelementptr inbounds %union.tree_node, %union.tree_node* %65, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4243
  %67 = bitcast %union.tree_node** %def_stmt225 to %union.gimple_statement_d**, !dbg !4243
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %67, align 8, !dbg !4243
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %68, metadata !4052, metadata !DIExpression()), !dbg !4238
  %call226 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %68) #8, !dbg !4244
  call void @llvm.dbg.value(metadata i32 %call226, metadata !4056, metadata !DIExpression()), !dbg !4238
  %69 = load i32, i32* %oecode227, align 4, !dbg !4245
  %cmp228 = icmp eq i32 %call226, %69, !dbg !4246
  br i1 %cmp228, label %for.cond232.preheader, label %cleanup256, !dbg !4247

for.cond232.preheader:                            ; preds = %if.end223
  br label %for.cond232, !dbg !4248

for.cond232:                                      ; preds = %for.cond232.preheader, %for.inc253
  %j206.0 = phi i32 [ %inc254, %for.inc253 ], [ 0, %for.cond232.preheader ], !dbg !4249
  call void @llvm.dbg.value(metadata i32 %j206.0, metadata !4057, metadata !DIExpression()), !dbg !4238
  %70 = load i32, i32* %i, align 4, !dbg !4250
  call void @llvm.dbg.value(metadata i32 %70, metadata !3999, metadata !DIExpression()), !dbg !4070
  %idxprom233 = zext i32 %70 to i64, !dbg !4250
  %arrayidx234 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %22, i64 %idxprom233, !dbg !4250
  %71 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %arrayidx234, align 8, !dbg !4250
  %tobool235 = icmp eq %struct.VEC_operand_entry_t_heap* %71, null, !dbg !4250
  br i1 %tobool235, label %cond.end241, label %cond.true236, !dbg !4250

cond.true236:                                     ; preds = %for.cond232
  call void @llvm.dbg.value(metadata i32 %70, metadata !3999, metadata !DIExpression()), !dbg !4070
  %base239 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %71, i64 0, i32 0, !dbg !4250
  br label %cond.end241, !dbg !4250

cond.end241:                                      ; preds = %for.cond232, %cond.true236
  %cond242 = phi %struct.VEC_operand_entry_t_base* [ %base239, %cond.true236 ], [ null, %for.cond232 ], !dbg !4250
  call void @llvm.dbg.value(metadata %struct.operand_entry** %oe1, metadata !3998, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  %call243 = call fastcc i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond242, i32 %j206.0, %struct.operand_entry** nonnull %oe1) #8, !dbg !4250
  %tobool244 = icmp eq i32 %call243, 0, !dbg !4248
  br i1 %tobool244, label %cleanup256.loopexit, label %for.body245, !dbg !4248

for.body245:                                      ; preds = %cond.end241
  %72 = load %struct.operand_entry*, %struct.operand_entry** %oe1, align 8, !dbg !4251
  call void @llvm.dbg.value(metadata %struct.operand_entry* %72, metadata !3998, metadata !DIExpression()), !dbg !4070
  %op246 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %72, i64 0, i32 1, !dbg !4252
  %73 = load %union.tree_node*, %union.tree_node** %op246, align 8, !dbg !4252
  %74 = load %union.tree_node*, %union.tree_node** %op247, align 8, !dbg !4253
  %cmp248 = icmp eq %union.tree_node* %73, %74, !dbg !4254
  br i1 %cmp248, label %if.then250, label %for.inc253, !dbg !4255

if.then250:                                       ; preds = %for.body245
  %75 = load i32, i32* %i, align 4, !dbg !4256
  call void @llvm.dbg.value(metadata i32 %75, metadata !3999, metadata !DIExpression()), !dbg !4070
  call fastcc void @SET_BIT(%struct.simple_bitmap_def* %call177, i32 %75) #8, !dbg !4258
  %inc251 = add i32 %nr_candidates2.0, 1, !dbg !4259
  call void @llvm.dbg.value(metadata i32 %inc251, metadata !4014, metadata !DIExpression()), !dbg !4070
  br label %cleanup256, !dbg !4260

for.inc253:                                       ; preds = %for.body245
  %inc254 = add i32 %j206.0, 1, !dbg !4261
  call void @llvm.dbg.value(metadata i32 %inc254, metadata !4057, metadata !DIExpression()), !dbg !4238
  br label %for.cond232, !dbg !4262, !llvm.loop !4263

cleanup256.loopexit:                              ; preds = %cond.end241
  br label %cleanup256, !dbg !4235

cleanup256:                                       ; preds = %cleanup256.loopexit, %if.end223, %cond.end212, %if.then250
  %nr_candidates2.2 = phi i32 [ %nr_candidates2.0, %cond.end212 ], [ %nr_candidates2.0, %if.end223 ], [ %inc251, %if.then250 ], [ %nr_candidates2.0, %cleanup256.loopexit ], !dbg !4220
  call void @llvm.dbg.value(metadata i32 %nr_candidates2.2, metadata !4014, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %sbi0, metadata !4015, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  call fastcc void @sbitmap_iter_next(%struct.sbitmap_iterator* nonnull %sbi0) #8, !dbg !4235
  br label %for.cond200, !dbg !4235, !llvm.loop !4265

for.end263:                                       ; preds = %for.cond200
  %nr_candidates2.0.lcssa = phi i32 [ %nr_candidates2.0, %for.cond200 ], !dbg !4234
  call void @llvm.dbg.value(metadata i32 %nr_candidates2.0.lcssa, metadata !4014, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata i32 %nr_candidates2.0.lcssa, metadata !4014, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata i32 %nr_candidates2.0.lcssa, metadata !4014, metadata !DIExpression()), !dbg !4070
  %cmp264 = icmp ugt i32 %nr_candidates2.0.lcssa, 1, !dbg !4267
  br i1 %cmp264, label %if.then266, label %if.end350, !dbg !4268

if.then266:                                       ; preds = %for.end263
  %call268 = call i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def* %call177) #6, !dbg !4269
  call void @llvm.dbg.value(metadata i32 %call268, metadata !4065, metadata !DIExpression()), !dbg !4270
  %76 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4271
  %tobool269 = icmp eq %struct.VEC_operand_entry_t_heap* %76, null, !dbg !4271
  br i1 %tobool269, label %cond.end273, label %cond.true270, !dbg !4271

cond.true270:                                     ; preds = %if.then266
  %base271 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %76, i64 0, i32 0, !dbg !4271
  br label %cond.end273, !dbg !4271

cond.end273:                                      ; preds = %if.then266, %cond.true270
  %cond274 = phi %struct.VEC_operand_entry_t_base* [ %base271, %cond.true270 ], [ null, %if.then266 ], !dbg !4271
  %call275 = call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond274, i32 %call268) #8, !dbg !4271
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call275, metadata !4059, metadata !DIExpression()), !dbg !4270
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4272
  %tobool276 = icmp eq %struct._IO_FILE* %77, null, !dbg !4272
  br i1 %tobool276, label %if.end283, label %land.lhs.true277, !dbg !4274

land.lhs.true277:                                 ; preds = %cond.end273
  %78 = load i32, i32* @dump_flags, align 4, !dbg !4275
  %and278 = and i32 %78, 8, !dbg !4276
  %tobool279 = icmp eq i32 %and278, 0, !dbg !4276
  br i1 %tobool279, label %if.end283, label %if.then280, !dbg !4277

if.then280:                                       ; preds = %land.lhs.true277
  %call281 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %77, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i64 0, i64 0)) #6, !dbg !4278
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4280
  %op282 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call275, i64 0, i32 1, !dbg !4281
  %80 = load %union.tree_node*, %union.tree_node** %op282, align 8, !dbg !4281
  call void @print_generic_expr(%struct._IO_FILE* %79, %union.tree_node* %80, i32 0) #6, !dbg !4282
  br label %if.end283, !dbg !4283

if.end283:                                        ; preds = %land.lhs.true277, %cond.end273, %if.then280
  %op284 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call275, i64 0, i32 1, !dbg !4284
  %81 = bitcast %union.tree_node** %op284 to %struct.tree_common**, !dbg !4284
  %82 = load %struct.tree_common*, %struct.tree_common** %81, align 8, !dbg !4284
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %82, i64 0, i32 2, !dbg !4284
  %83 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4284
  %call285 = call %union.tree_node* @create_tmp_var(%union.tree_node* %83, i8* null) #6, !dbg !4285
  call void @llvm.dbg.value(metadata %union.tree_node* %call285, metadata !4063, metadata !DIExpression()), !dbg !4270
  %call286 = call zeroext i8 @add_referenced_var(%union.tree_node* %call285) #6, !dbg !4286
  %84 = load i32, i32* %oecode227, align 4, !dbg !4287
  %85 = load %union.tree_node*, %union.tree_node** %op247, align 8, !dbg !4288
  call fastcc void @zero_one_operation(%union.tree_node** nonnull %op284, i32 %84, %union.tree_node* %85) #8, !dbg !4289
  %add290 = add nsw i32 %call268, 1, !dbg !4290
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %sbi0, metadata !4015, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  call fastcc void @sbitmap_iter_init(%struct.sbitmap_iterator* nonnull %sbi0, %struct.simple_bitmap_def* %call177, i32 %add290) #8, !dbg !4290
  br label %for.cond291, !dbg !4290

for.cond291:                                      ; preds = %if.end309, %if.end283
  call void @llvm.dbg.value(metadata i32* %i, metadata !3999, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %sbi0, metadata !4015, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  %call292 = call fastcc zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* nonnull %sbi0, i32* nonnull %i) #8, !dbg !4291
  %tobool293 = icmp eq i8 %call292, 0, !dbg !4290
  br i1 %tobool293, label %for.end324, label %for.body294, !dbg !4290

for.body294:                                      ; preds = %for.cond291
  %86 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4292
  %tobool295 = icmp eq %struct.VEC_operand_entry_t_heap* %86, null, !dbg !4292
  br i1 %tobool295, label %cond.end299, label %cond.true296, !dbg !4292

cond.true296:                                     ; preds = %for.body294
  %base297 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %86, i64 0, i32 0, !dbg !4292
  br label %cond.end299, !dbg !4292

cond.end299:                                      ; preds = %for.body294, %cond.true296
  %cond300 = phi %struct.VEC_operand_entry_t_base* [ %base297, %cond.true296 ], [ null, %for.body294 ], !dbg !4292
  %87 = load i32, i32* %i, align 4, !dbg !4292
  call void @llvm.dbg.value(metadata i32 %87, metadata !3999, metadata !DIExpression()), !dbg !4070
  %call301 = call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %cond300, i32 %87) #8, !dbg !4292
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call301, metadata !4062, metadata !DIExpression()), !dbg !4270
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4293
  %tobool302 = icmp eq %struct._IO_FILE* %88, null, !dbg !4293
  br i1 %tobool302, label %if.end309, label %land.lhs.true303, !dbg !4295

land.lhs.true303:                                 ; preds = %cond.end299
  %89 = load i32, i32* @dump_flags, align 4, !dbg !4296
  %and304 = and i32 %89, 8, !dbg !4297
  %tobool305 = icmp eq i32 %and304, 0, !dbg !4297
  br i1 %tobool305, label %if.end309, label %if.then306, !dbg !4298

if.then306:                                       ; preds = %land.lhs.true303
  %call307 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %88, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i64 0, i64 0)) #6, !dbg !4299
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4301
  %op308 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call301, i64 0, i32 1, !dbg !4302
  %91 = load %union.tree_node*, %union.tree_node** %op308, align 8, !dbg !4302
  call void @print_generic_expr(%struct._IO_FILE* %90, %union.tree_node* %91, i32 0) #6, !dbg !4303
  br label %if.end309, !dbg !4304

if.end309:                                        ; preds = %land.lhs.true303, %cond.end299, %if.then306
  %op310 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call301, i64 0, i32 1, !dbg !4305
  %92 = load i32, i32* %oecode227, align 4, !dbg !4306
  %93 = load %union.tree_node*, %union.tree_node** %op247, align 8, !dbg !4307
  call fastcc void @zero_one_operation(%union.tree_node** nonnull %op310, i32 %92, %union.tree_node* %93) #8, !dbg !4308
  %94 = load %union.tree_node*, %union.tree_node** %op284, align 8, !dbg !4309
  %95 = load %union.tree_node*, %union.tree_node** %op310, align 8, !dbg !4310
  %call315 = call fastcc %union.gimple_statement_d* @build_and_add_sum(%union.tree_node* %call285, %union.tree_node* %94, %union.tree_node* %95, i32 63) #8, !dbg !4311
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call315, metadata !4066, metadata !DIExpression()), !dbg !4312
  %96 = bitcast %union.tree_node** %op310 to %struct.tree_common**, !dbg !4313
  %97 = load %struct.tree_common*, %struct.tree_common** %96, align 8, !dbg !4313
  %type318 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %97, i64 0, i32 2, !dbg !4313
  %98 = load %union.tree_node*, %union.tree_node** %type318, align 8, !dbg !4313
  %99 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !4313
  %call319 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %98, %union.tree_node* %99) #6, !dbg !4313
  store %union.tree_node* %call319, %union.tree_node** %op310, align 8, !dbg !4314
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call301, i64 0, i32 0, !dbg !4315
  store i32 0, i32* %rank, align 8, !dbg !4316
  %call321 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %call315) #6, !dbg !4317
  store %union.tree_node* %call321, %union.tree_node** %op284, align 8, !dbg !4318
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %sbi0, metadata !4015, metadata !DIExpression(DW_OP_deref)), !dbg !4070
  call fastcc void @sbitmap_iter_next(%struct.sbitmap_iterator* nonnull %sbi0) #8, !dbg !4291
  br label %for.cond291, !dbg !4291, !llvm.loop !4319

for.end324:                                       ; preds = %for.cond291
  %100 = load %union.tree_node*, %union.tree_node** %op284, align 8, !dbg !4321
  %101 = load %union.tree_node*, %union.tree_node** %op247, align 8, !dbg !4322
  %102 = load i32, i32* %oecode227, align 4, !dbg !4323
  %call328 = call fastcc %union.gimple_statement_d* @build_and_add_sum(%union.tree_node* %call285, %union.tree_node* %100, %union.tree_node* %101, i32 %102) #8, !dbg !4324
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call328, metadata !4064, metadata !DIExpression()), !dbg !4270
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4325
  %tobool329 = icmp eq %struct._IO_FILE* %103, null, !dbg !4325
  br i1 %tobool329, label %if.end341, label %land.lhs.true330, !dbg !4327

land.lhs.true330:                                 ; preds = %for.end324
  %104 = load i32, i32* @dump_flags, align 4, !dbg !4328
  %and331 = and i32 %104, 8, !dbg !4329
  %tobool332 = icmp eq i32 %and331, 0, !dbg !4329
  br i1 %tobool332, label %if.end341, label %if.then333, !dbg !4330

if.then333:                                       ; preds = %land.lhs.true330
  %105 = load i32, i32* %oecode227, align 4, !dbg !4331
  %cmp335 = icmp eq i32 %105, 65, !dbg !4333
  %cond337 = select i1 %cmp335, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i64 0, i64 0), !dbg !4334
  %call338 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %103, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i64 0, i64 0), i8* %cond337) #6, !dbg !4335
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4336
  %107 = load %union.tree_node*, %union.tree_node** %op247, align 8, !dbg !4337
  call void @print_generic_expr(%struct._IO_FILE* %106, %union.tree_node* %107, i32 0) #6, !dbg !4338
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4339
  %call340 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %108, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)) #6, !dbg !4340
  br label %if.end341, !dbg !4341

if.end341:                                        ; preds = %land.lhs.true330, %for.end324, %if.then333
  %call342 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %call328) #8, !dbg !4342
  store %union.tree_node* %call342, %union.tree_node** %op284, align 8, !dbg !4343
  %call345 = call fastcc i64 @get_rank(%union.tree_node* %call342) #8, !dbg !4344
  %conv346 = trunc i64 %call345 to i32, !dbg !4344
  %rank347 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call275, i64 0, i32 0, !dbg !4345
  store i32 %conv346, i32* %rank347, align 8, !dbg !4346
  %idxprom348 = sext i32 %call268 to i64, !dbg !4347
  %arrayidx349 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %22, i64 %idxprom348, !dbg !4347
  call fastcc void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %arrayidx349) #8, !dbg !4347
  call void @llvm.dbg.value(metadata i8 1, metadata !4028, metadata !DIExpression()), !dbg !4070
  br label %if.end350, !dbg !4348

if.end350:                                        ; preds = %if.end341, %for.end263
  %changed.1 = phi i8 [ 1, %if.end341 ], [ %changed.0, %for.end263 ], !dbg !4070
  call void @llvm.dbg.value(metadata i8 %changed.1, metadata !4028, metadata !DIExpression()), !dbg !4070
  %109 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !4349
  %base353 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %109, i64 0, i32 0, !dbg !4349
  call fastcc void @VEC_oecount_base_pop(%struct.VEC_oecount_base* %base353) #8, !dbg !4349
  br label %cleanup357, !dbg !4350

cleanup357:                                       ; preds = %while.body, %if.end350
  %changed.2 = phi i8 [ %changed.1, %if.end350 ], [ %changed.0, %while.body ], !dbg !4070
  %cleanup.dest.slot.2 = phi i1 [ true, %if.end350 ], [ false, %while.body ]
  call void @llvm.dbg.value(metadata i8 %changed.2, metadata !4028, metadata !DIExpression()), !dbg !4070
  br i1 %cleanup.dest.slot.2, label %while.cond, label %while.end, !llvm.loop !4351

while.end:                                        ; preds = %while.cond, %cleanup357
  %changed.3 = phi i8 [ %changed.2, %cleanup357 ], [ %changed.0, %while.cond ], !dbg !4217
  call void @llvm.dbg.value(metadata i8 %changed.3, metadata !4028, metadata !DIExpression()), !dbg !4070
  call void @llvm.dbg.value(metadata i32 0, metadata !3999, metadata !DIExpression()), !dbg !4070
  br label %for.cond360, !dbg !4352

for.cond360:                                      ; preds = %for.body370, %while.end
  %storemerge3 = phi i32 [ 0, %while.end ], [ %inc374, %for.body370 ], !dbg !4354
  store i32 %storemerge3, i32* %i, align 4, !dbg !4354
  call void @llvm.dbg.value(metadata i32 %storemerge3, metadata !3999, metadata !DIExpression()), !dbg !4070
  %110 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4355
  %tobool361 = icmp eq %struct.VEC_operand_entry_t_heap* %110, null, !dbg !4355
  br i1 %tobool361, label %cond.end365, label %cond.true362, !dbg !4355

cond.true362:                                     ; preds = %for.cond360
  %base363 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %110, i64 0, i32 0, !dbg !4355
  br label %cond.end365, !dbg !4355

cond.end365:                                      ; preds = %for.cond360, %cond.true362
  %cond366 = phi %struct.VEC_operand_entry_t_base* [ %base363, %cond.true362 ], [ null, %for.cond360 ], !dbg !4355
  %call367 = call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond366) #8, !dbg !4355
  %cmp368 = icmp ult i32 %storemerge3, %call367, !dbg !4357
  br i1 %cmp368, label %for.body370, label %for.end375, !dbg !4358

for.body370:                                      ; preds = %cond.end365
  %111 = load i32, i32* %i, align 4, !dbg !4359
  call void @llvm.dbg.value(metadata i32 %111, metadata !3999, metadata !DIExpression()), !dbg !4070
  %idxprom371 = zext i32 %111 to i64, !dbg !4359
  %arrayidx372 = getelementptr inbounds %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %22, i64 %idxprom371, !dbg !4359
  call fastcc void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %arrayidx372) #8, !dbg !4359
  %112 = load i32, i32* %i, align 4, !dbg !4360
  call void @llvm.dbg.value(metadata i32 %112, metadata !3999, metadata !DIExpression()), !dbg !4070
  %inc374 = add i32 %112, 1, !dbg !4360
  call void @llvm.dbg.value(metadata i32 %inc374, metadata !3999, metadata !DIExpression()), !dbg !4070
  br label %for.cond360, !dbg !4361, !llvm.loop !4362

for.end375:                                       ; preds = %cond.end365
  call void @free(i8* %call57) #6, !dbg !4364
  call fastcc void @VEC_oecount_heap_free(%struct.VEC_oecount_heap** nonnull @cvec) #8, !dbg !4365
  %popcount376 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %call2, i64 0, i32 0, !dbg !4366
  %113 = load i8*, i8** %popcount376, align 8, !dbg !4366
  call void @free(i8* %113) #6, !dbg !4366
  %114 = bitcast %struct.simple_bitmap_def* %call2 to i8*, !dbg !4366
  call void @free(i8* %114) #6, !dbg !4366
  %popcount377 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %call177, i64 0, i32 0, !dbg !4367
  %115 = load i8*, i8** %popcount377, align 8, !dbg !4367
  call void @free(i8* %115) #6, !dbg !4367
  %116 = bitcast %struct.simple_bitmap_def* %call177 to i8*, !dbg !4367
  call void @free(i8* %116) #6, !dbg !4367
  br label %cleanup378, !dbg !4368

cleanup378:                                       ; preds = %cond.end, %for.end375, %if.then31
  %retval.0 = phi i8 [ 0, %if.then31 ], [ %changed.3, %for.end375 ], [ 0, %cond.end ], !dbg !4070
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %3) #7, !dbg !4369
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #7, !dbg !4369
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !4369
  ret i8 %retval.0, !dbg !4369
}

declare dso_local void @gimple_assign_set_rhs_from_tree(%struct.gimple_stmt_iterator*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %vec_) unnamed_addr #0 !dbg !4370 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_base* %vec_, metadata !4374, metadata !DIExpression()), !dbg !4375
  br label %land.end, !dbg !4376

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %num2 = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 0, !dbg !4376
  %0 = load i32, i32* %num2, align 8, !dbg !4376
  %sub = add i32 %0, -1, !dbg !4376
  %idxprom = zext i32 %sub to i64, !dbg !4376
  %arrayidx = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !4376
  %1 = load %struct.operand_entry*, %struct.operand_entry** %arrayidx, align 8, !dbg !4376
  ret %struct.operand_entry* %1, !dbg !4376
}

; Function Attrs: nounwind uwtable
define internal fastcc void @remove_visited_stmt_chain(%union.tree_node* %var) unnamed_addr #5 !dbg !4377 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !4381, metadata !DIExpression()), !dbg !4384
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4385
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !4385
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4386
  br label %while.cond, !dbg !4388

while.cond:                                       ; preds = %if.end7, %entry
  %var.addr.0 = phi %union.tree_node* [ %var, %entry ], [ %call8, %if.end7 ]
  call void @llvm.dbg.value(metadata %union.tree_node* %var.addr.0, metadata !4381, metadata !DIExpression()), !dbg !4384
  %2 = getelementptr inbounds %union.tree_node, %union.tree_node* %var.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4389
  %bf.load = load i64, i64* %2, align 8, !dbg !4389
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4391
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !4391
  br i1 %cmp, label %lor.lhs.false, label %cleanup, !dbg !4392

lor.lhs.false:                                    ; preds = %while.cond
  %call = call fastcc zeroext i8 @has_zero_uses(%union.tree_node* %var.addr.0) #8, !dbg !4393
  %tobool = icmp eq i8 %call, 0, !dbg !4393
  br i1 %tobool, label %cleanup, label %if.end, !dbg !4394

if.end:                                           ; preds = %lor.lhs.false
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %var.addr.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4395
  %3 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !4395
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %3, align 8, !dbg !4395
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %4, metadata !4382, metadata !DIExpression()), !dbg !4384
  %call1 = call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %4) #8, !dbg !4396
  %tobool2 = icmp eq i8 %call1, 0, !dbg !4396
  br i1 %tobool2, label %cleanup, label %lor.lhs.false3, !dbg !4398

lor.lhs.false3:                                   ; preds = %if.end
  %call4 = call fastcc zeroext i8 @gimple_visited_p(%union.gimple_statement_d* %4) #8, !dbg !4399
  %tobool5 = icmp eq i8 %call4, 0, !dbg !4399
  br i1 %tobool5, label %cleanup, label %if.end7, !dbg !4400

if.end7:                                          ; preds = %lor.lhs.false3
  %call8 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4) #8, !dbg !4401
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !4381, metadata !DIExpression()), !dbg !4384
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #7, !dbg !4402
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp, %union.gimple_statement_d* %4) #6, !dbg !4402
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4402
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #7, !dbg !4402
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4383, metadata !DIExpression(DW_OP_deref)), !dbg !4384
  call void @gsi_remove(%struct.gimple_stmt_iterator* nonnull %gsi, i8 zeroext 1) #6, !dbg !4403
  call void @release_defs(%union.gimple_statement_d* %4) #6, !dbg !4404
  br label %while.cond, !dbg !4388, !llvm.loop !4405

cleanup:                                          ; preds = %lor.lhs.false3, %if.end, %lor.lhs.false, %while.cond
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !4407
  ret void, !dbg !4407
}

; Function Attrs: nounwind uwtable
define internal fastcc void @rewrite_expr_tree(%union.gimple_statement_d* %stmt, i32 %opindex, %struct.VEC_operand_entry_t_heap* %ops, i8 zeroext %moved) unnamed_addr #5 !dbg !4408 {
entry:
  %temp = alloca %struct.operand_entry, align 8
  %temp73 = alloca %struct.operand_entry, align 8
  %gsinow = alloca %struct.gimple_stmt_iterator, align 8
  %gsirhs1 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp184 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4412, metadata !DIExpression()), !dbg !4443
  call void @llvm.dbg.value(metadata i32 %opindex, metadata !4413, metadata !DIExpression()), !dbg !4443
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap* %ops, metadata !4414, metadata !DIExpression()), !dbg !4443
  call void @llvm.dbg.value(metadata i8 %moved, metadata !4415, metadata !DIExpression()), !dbg !4443
  %call = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #8, !dbg !4444
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !4416, metadata !DIExpression()), !dbg !4443
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #8, !dbg !4445
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !4417, metadata !DIExpression()), !dbg !4443
  %add = add i32 %opindex, 3, !dbg !4446
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %ops, i64 0, i32 0, !dbg !4447
  %call2 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %base) #8, !dbg !4447
  %cmp = icmp eq i32 %add, %call2, !dbg !4448
  br i1 %cmp, label %if.then, label %entry.if.end83_crit_edge, !dbg !4449

entry.if.end83_crit_edge:                         ; preds = %entry
  %.pre1 = add i32 %opindex, 2, !dbg !4450
  br label %if.end83, !dbg !4449

if.then:                                          ; preds = %entry
  %call9 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %base, i32 %opindex) #8, !dbg !4451
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call9, metadata !4419, metadata !DIExpression()), !dbg !4452
  %add16 = add i32 %opindex, 1, !dbg !4453
  %call17 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %base, i32 %add16) #8, !dbg !4453
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call17, metadata !4422, metadata !DIExpression()), !dbg !4452
  %add24 = add i32 %opindex, 2, !dbg !4454
  %call25 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %base, i32 %add24) #8, !dbg !4454
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call25, metadata !4423, metadata !DIExpression()), !dbg !4452
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call9, i64 0, i32 0, !dbg !4455
  %0 = load i32, i32* %rank, align 8, !dbg !4455
  %rank26 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call17, i64 0, i32 0, !dbg !4456
  %1 = load i32, i32* %rank26, align 8, !dbg !4456
  %cmp27 = icmp eq i32 %0, %1, !dbg !4457
  br i1 %cmp27, label %land.lhs.true, label %lor.lhs.false, !dbg !4458

land.lhs.true:                                    ; preds = %if.then
  %rank29 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call25, i64 0, i32 0, !dbg !4459
  %2 = load i32, i32* %rank29, align 8, !dbg !4459
  %cmp30 = icmp eq i32 %0, %2, !dbg !4460
  br i1 %cmp30, label %lor.lhs.false, label %if.then41, !dbg !4461

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.then
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call25, i64 0, i32 1, !dbg !4462
  %3 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4462
  %call31 = tail call fastcc zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %3) #8, !dbg !4463
  %tobool32 = icmp eq i8 %call31, 0, !dbg !4463
  br i1 %tobool32, label %if.else, label %land.lhs.true33, !dbg !4464

land.lhs.true33:                                  ; preds = %lor.lhs.false
  %op34 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call9, i64 0, i32 1, !dbg !4465
  %4 = load %union.tree_node*, %union.tree_node** %op34, align 8, !dbg !4465
  %call35 = tail call fastcc zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %4) #8, !dbg !4466
  %tobool36 = icmp eq i8 %call35, 0, !dbg !4466
  br i1 %tobool36, label %land.lhs.true37, label %if.else, !dbg !4467

land.lhs.true37:                                  ; preds = %land.lhs.true33
  %op38 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call17, i64 0, i32 1, !dbg !4468
  %5 = load %union.tree_node*, %union.tree_node** %op38, align 8, !dbg !4468
  %call39 = tail call fastcc zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %5) #8, !dbg !4469
  %tobool40 = icmp eq i8 %call39, 0, !dbg !4469
  br i1 %tobool40, label %if.then41, label %if.else, !dbg !4470

if.then41:                                        ; preds = %land.lhs.true, %land.lhs.true37
  %6 = bitcast %struct.operand_entry* %temp to i8*, !dbg !4471
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7, !dbg !4471
  %7 = bitcast %struct.operand_entry* %call25 to i8*, !dbg !4472
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !4472
  %op42 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call9, i64 0, i32 1, !dbg !4473
  %8 = bitcast %union.tree_node** %op42 to i64*, !dbg !4473
  %9 = load i64, i64* %8, align 8, !dbg !4473
  %op43 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call25, i64 0, i32 1, !dbg !4474
  %10 = bitcast %union.tree_node** %op43 to i64*, !dbg !4475
  store i64 %9, i64* %10, align 8, !dbg !4475
  %11 = load i32, i32* %rank, align 8, !dbg !4476
  %rank45 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call25, i64 0, i32 0, !dbg !4477
  store i32 %11, i32* %rank45, align 8, !dbg !4478
  %op46 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %temp, i64 0, i32 1, !dbg !4479
  %12 = bitcast %union.tree_node** %op46 to i64*, !dbg !4479
  %13 = load i64, i64* %12, align 8, !dbg !4479
  store i64 %13, i64* %8, align 8, !dbg !4480
  %rank48 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %temp, i64 0, i32 0, !dbg !4481
  %14 = load i32, i32* %rank48, align 8, !dbg !4481
  store i32 %14, i32* %rank, align 8, !dbg !4482
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7, !dbg !4483
  br label %if.end83, !dbg !4484

if.else:                                          ; preds = %land.lhs.true37, %land.lhs.true33, %lor.lhs.false
  %15 = load i32, i32* %rank, align 8, !dbg !4485
  %rank51 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call25, i64 0, i32 0, !dbg !4486
  %16 = load i32, i32* %rank51, align 8, !dbg !4486
  %cmp52 = icmp eq i32 %15, %16, !dbg !4487
  br i1 %cmp52, label %land.lhs.true54, label %lor.lhs.false59, !dbg !4488

land.lhs.true54:                                  ; preds = %if.else
  %17 = load i32, i32* %rank26, align 8, !dbg !4489
  %cmp57 = icmp eq i32 %17, %15, !dbg !4490
  br i1 %cmp57, label %lor.lhs.false59, label %if.then72, !dbg !4491

lor.lhs.false59:                                  ; preds = %land.lhs.true54, %if.else
  %op60 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call17, i64 0, i32 1, !dbg !4492
  %18 = load %union.tree_node*, %union.tree_node** %op60, align 8, !dbg !4492
  %call61 = tail call fastcc zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %18) #8, !dbg !4493
  %tobool63 = icmp eq i8 %call61, 0, !dbg !4493
  br i1 %tobool63, label %if.end83, label %land.lhs.true64, !dbg !4494

land.lhs.true64:                                  ; preds = %lor.lhs.false59
  %op65 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call9, i64 0, i32 1, !dbg !4495
  %19 = load %union.tree_node*, %union.tree_node** %op65, align 8, !dbg !4495
  %call66 = tail call fastcc zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %19) #8, !dbg !4496
  %tobool67 = icmp eq i8 %call66, 0, !dbg !4496
  br i1 %tobool67, label %land.lhs.true68, label %if.end83, !dbg !4497

land.lhs.true68:                                  ; preds = %land.lhs.true64
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !4498
  %call70 = tail call fastcc zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %20) #8, !dbg !4499
  %tobool71 = icmp eq i8 %call70, 0, !dbg !4499
  br i1 %tobool71, label %if.then72, label %if.end83, !dbg !4500

if.then72:                                        ; preds = %land.lhs.true54, %land.lhs.true68
  %21 = bitcast %struct.operand_entry* %temp73 to i8*, !dbg !4501
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #7, !dbg !4501
  %22 = bitcast %struct.operand_entry* %call17 to i8*, !dbg !4502
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %21, i8* align 8 %22, i64 16, i1 false), !dbg !4502
  %op74 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call9, i64 0, i32 1, !dbg !4503
  %23 = bitcast %union.tree_node** %op74 to i64*, !dbg !4503
  %24 = load i64, i64* %23, align 8, !dbg !4503
  %op75 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call17, i64 0, i32 1, !dbg !4504
  %25 = bitcast %union.tree_node** %op75 to i64*, !dbg !4505
  store i64 %24, i64* %25, align 8, !dbg !4505
  %26 = load i32, i32* %rank, align 8, !dbg !4506
  store i32 %26, i32* %rank26, align 8, !dbg !4507
  %op78 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %temp73, i64 0, i32 1, !dbg !4508
  %27 = bitcast %union.tree_node** %op78 to i64*, !dbg !4508
  %28 = load i64, i64* %27, align 8, !dbg !4508
  store i64 %28, i64* %23, align 8, !dbg !4509
  %rank80 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %temp73, i64 0, i32 0, !dbg !4510
  %29 = load i32, i32* %rank80, align 8, !dbg !4510
  store i32 %29, i32* %rank, align 8, !dbg !4511
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #7, !dbg !4512
  br label %if.end83, !dbg !4513

if.end83:                                         ; preds = %entry.if.end83_crit_edge, %land.lhs.true68, %land.lhs.true64, %lor.lhs.false59, %if.then41, %if.then72
  %add84.pre-phi = phi i32 [ %.pre1, %entry.if.end83_crit_edge ], [ %add24, %land.lhs.true68 ], [ %add24, %land.lhs.true64 ], [ %add24, %lor.lhs.false59 ], [ %add24, %if.then41 ], [ %add24, %if.then72 ], !dbg !4450
  %call91 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %base) #8, !dbg !4514
  %cmp92 = icmp eq i32 %add84.pre-phi, %call91, !dbg !4515
  br i1 %cmp92, label %if.then94, label %if.end145, !dbg !4516

if.then94:                                        ; preds = %if.end83
  %call103 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %base, i32 %opindex) #8, !dbg !4517
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call103, metadata !4430, metadata !DIExpression()), !dbg !4518
  %add110 = add i32 %opindex, 1, !dbg !4519
  %call111 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %base, i32 %add110) #8, !dbg !4519
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call111, metadata !4433, metadata !DIExpression()), !dbg !4518
  %op112 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call103, i64 0, i32 1, !dbg !4520
  %30 = load %union.tree_node*, %union.tree_node** %op112, align 8, !dbg !4520
  %cmp113 = icmp eq %union.tree_node* %call, %30, !dbg !4522
  br i1 %cmp113, label %lor.lhs.false115, label %if.then119, !dbg !4523

lor.lhs.false115:                                 ; preds = %if.then94
  %op116 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call111, i64 0, i32 1, !dbg !4524
  %31 = load %union.tree_node*, %union.tree_node** %op116, align 8, !dbg !4524
  %cmp117 = icmp eq %union.tree_node* %call1, %31, !dbg !4525
  br i1 %cmp117, label %cleanup.cont, label %if.then119, !dbg !4526

if.then119:                                       ; preds = %lor.lhs.false115, %if.then94
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4527
  %tobool120 = icmp eq %struct._IO_FILE* %32, null, !dbg !4527
  br i1 %tobool120, label %if.end125, label %land.lhs.true121, !dbg !4530

land.lhs.true121:                                 ; preds = %if.then119
  %33 = load i32, i32* @dump_flags, align 4, !dbg !4531
  %and = and i32 %33, 8, !dbg !4532
  %tobool122 = icmp eq i32 %and, 0, !dbg !4532
  br i1 %tobool122, label %if.end125, label %if.then123, !dbg !4533

if.then123:                                       ; preds = %land.lhs.true121
  %call124 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %32, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)) #6, !dbg !4534
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4536
  tail call void @print_gimple_stmt(%struct._IO_FILE* %34, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !4537
  %.pre = load %union.tree_node*, %union.tree_node** %op112, align 8, !dbg !4538
  br label %if.end125, !dbg !4539

if.end125:                                        ; preds = %land.lhs.true121, %if.then119, %if.then123
  %35 = phi %union.tree_node* [ %30, %land.lhs.true121 ], [ %30, %if.then119 ], [ %.pre, %if.then123 ], !dbg !4538
  tail call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %stmt, %union.tree_node* %35) #8, !dbg !4540
  %op127 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call111, i64 0, i32 1, !dbg !4541
  %36 = load %union.tree_node*, %union.tree_node** %op127, align 8, !dbg !4541
  tail call fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %stmt, %union.tree_node* %36) #8, !dbg !4542
  tail call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !4543
  %37 = load %union.tree_node*, %union.tree_node** %op112, align 8, !dbg !4544
  %cmp129 = icmp eq %union.tree_node* %call, %37, !dbg !4546
  br i1 %cmp129, label %if.end136, label %land.lhs.true131, !dbg !4547

land.lhs.true131:                                 ; preds = %if.end125
  %38 = load %union.tree_node*, %union.tree_node** %op127, align 8, !dbg !4548
  %cmp133 = icmp eq %union.tree_node* %call, %38, !dbg !4549
  br i1 %cmp133, label %if.end136, label %if.then135, !dbg !4550

if.then135:                                       ; preds = %land.lhs.true131
  tail call fastcc void @remove_visited_stmt_chain(%union.tree_node* %call) #8, !dbg !4551
  br label %if.end136, !dbg !4551

if.end136:                                        ; preds = %land.lhs.true131, %if.end125, %if.then135
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4552
  %tobool137 = icmp eq %struct._IO_FILE* %39, null, !dbg !4552
  br i1 %tobool137, label %cleanup.cont, label %land.lhs.true138, !dbg !4554

land.lhs.true138:                                 ; preds = %if.end136
  %40 = load i32, i32* @dump_flags, align 4, !dbg !4555
  %and139 = and i32 %40, 8, !dbg !4556
  %tobool140 = icmp eq i32 %and139, 0, !dbg !4556
  br i1 %tobool140, label %cleanup.cont, label %if.then141, !dbg !4557

if.then141:                                       ; preds = %land.lhs.true138
  %call142 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %39, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)) #6, !dbg !4558
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4560
  tail call void @print_gimple_stmt(%struct._IO_FILE* %41, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !4561
  br label %cleanup.cont, !dbg !4562

if.end145:                                        ; preds = %if.end83
  %call153 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %base) #8, !dbg !4563
  %cmp154 = icmp ult i32 %add84.pre-phi, %call153, !dbg !4563
  br i1 %cmp154, label %cond.end158, label %cond.true156, !dbg !4563

cond.true156:                                     ; preds = %if.end145
  tail call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1395, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !4563
  br label %cond.end158, !dbg !4563

cond.end158:                                      ; preds = %if.end145, %cond.true156
  %call166 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %base, i32 %opindex) #8, !dbg !4564
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call166, metadata !4418, metadata !DIExpression()), !dbg !4443
  %op167 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call166, i64 0, i32 1, !dbg !4565
  %42 = load %union.tree_node*, %union.tree_node** %op167, align 8, !dbg !4565
  %cmp168 = icmp eq %union.tree_node* %42, %call1, !dbg !4566
  br i1 %cmp168, label %if.end201, label %if.then170, !dbg !4567

if.then170:                                       ; preds = %cond.end158
  %tobool171 = icmp eq i8 %moved, 0, !dbg !4568
  br i1 %tobool171, label %if.then172, label %if.end185, !dbg !4569

if.then172:                                       ; preds = %if.then170
  %43 = bitcast %struct.gimple_stmt_iterator* %gsinow to i8*, !dbg !4570
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #7, !dbg !4570
  %44 = bitcast %struct.gimple_stmt_iterator* %gsirhs1 to i8*, !dbg !4570
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %44) #7, !dbg !4570
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4440, metadata !DIExpression()), !dbg !4571
  %45 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4572
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %45) #7, !dbg !4572
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp, %union.gimple_statement_d* %stmt) #6, !dbg !4572
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %43, i8* nonnull align 8 %45, i64 24, i1 false), !dbg !4572
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %45) #7, !dbg !4572
  %call179 = call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %base) #8, !dbg !4573
  %sub = sub i32 %call179, %opindex, !dbg !4574
  %sub180 = add i32 %sub, -2, !dbg !4575
  call void @llvm.dbg.value(metadata i32 %sub180, metadata !4442, metadata !DIExpression()), !dbg !4571
  %46 = bitcast %struct.gimple_stmt_iterator* %tmp184 to i8*, !dbg !4576
  br label %while.cond, !dbg !4578

while.cond:                                       ; preds = %while.body, %if.then172
  %stmt1.0 = phi %union.gimple_statement_d* [ %stmt, %if.then172 ], [ %48, %while.body ], !dbg !4571
  %count.0 = phi i32 [ %sub180, %if.then172 ], [ %dec, %while.body ], !dbg !4571
  call void @llvm.dbg.value(metadata i32 %count.0, metadata !4442, metadata !DIExpression()), !dbg !4571
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt1.0, metadata !4440, metadata !DIExpression()), !dbg !4571
  call void @llvm.dbg.value(metadata i32 %count.0, metadata !4442, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !4571
  %cmp181 = icmp eq i32 %count.0, 0, !dbg !4579
  br i1 %cmp181, label %while.end, label %while.body, !dbg !4578

while.body:                                       ; preds = %while.cond
  %dec = add i32 %count.0, -1, !dbg !4580
  call void @llvm.dbg.value(metadata i32 %dec, metadata !4442, metadata !DIExpression()), !dbg !4571
  %call183 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt1.0) #8, !dbg !4581
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %call183, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4581
  %47 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !4581
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %47, align 8, !dbg !4581
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %48, metadata !4441, metadata !DIExpression()), !dbg !4571
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #7, !dbg !4582
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp184, %union.gimple_statement_d* %48) #6, !dbg !4582
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %44, i8* nonnull align 8 %46, i64 24, i1 false), !dbg !4582
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #7, !dbg !4582
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsinow, metadata !4434, metadata !DIExpression(DW_OP_deref)), !dbg !4571
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsirhs1, metadata !4439, metadata !DIExpression(DW_OP_deref)), !dbg !4571
  call void @gsi_move_before(%struct.gimple_stmt_iterator* nonnull %gsirhs1, %struct.gimple_stmt_iterator* nonnull %gsinow) #6, !dbg !4583
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsinow, metadata !4434, metadata !DIExpression(DW_OP_deref)), !dbg !4571
  call fastcc void @gsi_prev(%struct.gimple_stmt_iterator* nonnull %gsinow) #8, !dbg !4584
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %48, metadata !4440, metadata !DIExpression()), !dbg !4571
  br label %while.cond, !dbg !4578, !llvm.loop !4585

while.end:                                        ; preds = %while.cond
  call void @llvm.dbg.value(metadata i8 1, metadata !4415, metadata !DIExpression()), !dbg !4443
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %44) #7, !dbg !4587
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #7, !dbg !4587
  br label %if.end185, !dbg !4588

if.end185:                                        ; preds = %if.then170, %while.end
  %moved.addr.0 = phi i8 [ %moved, %if.then170 ], [ 1, %while.end ]
  call void @llvm.dbg.value(metadata i8 %moved.addr.0, metadata !4415, metadata !DIExpression()), !dbg !4443
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4589
  %tobool186 = icmp eq %struct._IO_FILE* %49, null, !dbg !4589
  br i1 %tobool186, label %if.end192, label %land.lhs.true187, !dbg !4591

land.lhs.true187:                                 ; preds = %if.end185
  %50 = load i32, i32* @dump_flags, align 4, !dbg !4592
  %and188 = and i32 %50, 8, !dbg !4593
  %tobool189 = icmp eq i32 %and188, 0, !dbg !4593
  br i1 %tobool189, label %if.end192, label %if.then190, !dbg !4594

if.then190:                                       ; preds = %land.lhs.true187
  %call191 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %49, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0)) #6, !dbg !4595
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4597
  call void @print_gimple_stmt(%struct._IO_FILE* %51, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !4598
  br label %if.end192, !dbg !4599

if.end192:                                        ; preds = %land.lhs.true187, %if.end185, %if.then190
  %52 = load %union.tree_node*, %union.tree_node** %op167, align 8, !dbg !4600
  call fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %stmt, %union.tree_node* %52) #8, !dbg !4601
  call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !4602
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4603
  %tobool194 = icmp eq %struct._IO_FILE* %53, null, !dbg !4603
  br i1 %tobool194, label %if.end201, label %land.lhs.true195, !dbg !4605

land.lhs.true195:                                 ; preds = %if.end192
  %54 = load i32, i32* @dump_flags, align 4, !dbg !4606
  %and196 = and i32 %54, 8, !dbg !4607
  %tobool197 = icmp eq i32 %and196, 0, !dbg !4607
  br i1 %tobool197, label %if.end201, label %if.then198, !dbg !4608

if.then198:                                       ; preds = %land.lhs.true195
  %call199 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %53, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0)) #6, !dbg !4609
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4611
  call void @print_gimple_stmt(%struct._IO_FILE* %55, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !4612
  br label %if.end201, !dbg !4613

if.end201:                                        ; preds = %land.lhs.true195, %if.end192, %cond.end158, %if.then198
  %moved.addr.1 = phi i8 [ %moved, %cond.end158 ], [ %moved.addr.0, %if.then198 ], [ %moved.addr.0, %land.lhs.true195 ], [ %moved.addr.0, %if.end192 ]
  call void @llvm.dbg.value(metadata i8 %moved.addr.1, metadata !4415, metadata !DIExpression()), !dbg !4443
  %def_stmt203 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4614
  %56 = bitcast %union.tree_node** %def_stmt203 to %union.gimple_statement_d**, !dbg !4614
  %57 = load %union.gimple_statement_d*, %union.gimple_statement_d** %56, align 8, !dbg !4614
  %add204 = add i32 %opindex, 1, !dbg !4615
  call fastcc void @rewrite_expr_tree(%union.gimple_statement_d* %57, i32 %add204, %struct.VEC_operand_entry_t_heap* %ops, i8 zeroext %moved.addr.1) #8, !dbg !4616
  br label %cleanup.cont, !dbg !4617

cleanup.cont:                                     ; preds = %land.lhs.true138, %if.end136, %lor.lhs.false115, %if.end201, %if.then141
  ret void, !dbg !4617
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %vec_) unnamed_addr #0 !dbg !4618 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %vec_, metadata !4622, metadata !DIExpression()), !dbg !4623
  %0 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %vec_, align 8, !dbg !4624
  %tobool = icmp eq %struct.VEC_operand_entry_t_heap* %0, null, !dbg !4624
  br i1 %tobool, label %if.end, label %if.then, !dbg !4626

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_operand_entry_t_heap* %0 to i8*, !dbg !4626
  tail call void @free(i8* nonnull %1) #6, !dbg !4624
  br label %if.end, !dbg !4624

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %vec_, align 8, !dbg !4626
  ret void, !dbg !4626
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_prev(%struct.gimple_stmt_iterator* %i) unnamed_addr #0 !dbg !4627 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !4629, metadata !DIExpression()), !dbg !4630
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !4631
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4631
  %prev = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 1, !dbg !4632
  %1 = bitcast %struct.gimple_seq_node_d** %prev to i64*, !dbg !4632
  %2 = load i64, i64* %1, align 8, !dbg !4632
  %3 = bitcast %struct.gimple_stmt_iterator* %i to i64*, !dbg !4633
  store i64 %2, i64* %3, align 8, !dbg !4633
  ret void, !dbg !4634
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !4635 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !4637, metadata !DIExpression()), !dbg !4638
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !4639
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4639

cond.true:                                        ; preds = %entry
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 1, !dbg !4640
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !4640
  br label %cond.end, !dbg !4639

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !4639
  ret %struct.gimple_seq_node_d* %cond, !dbg !4641
}

declare dso_local zeroext i8 @has_zero_uses_1(%struct.ssa_use_operand_d*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %ops, %union.tree_node* %op) unnamed_addr #5 !dbg !4642 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !4646, metadata !DIExpression()), !dbg !4649
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !4647, metadata !DIExpression()), !dbg !4649
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @operand_entry_pool, align 8, !dbg !4650
  %call = tail call i8* @pool_alloc(%struct.alloc_pool_def* %0) #6, !dbg !4651
  %1 = bitcast i8* %call to %struct.operand_entry*, !dbg !4652
  call void @llvm.dbg.value(metadata %struct.operand_entry* %1, metadata !4648, metadata !DIExpression()), !dbg !4649
  %op1 = getelementptr inbounds i8, i8* %call, i64 8, !dbg !4653
  %2 = bitcast i8* %op1 to %union.tree_node**, !dbg !4653
  store %union.tree_node* %op, %union.tree_node** %2, align 8, !dbg !4654
  %call2 = tail call fastcc i64 @get_rank(%union.tree_node* %op) #8, !dbg !4655
  %conv = trunc i64 %call2 to i32, !dbg !4655
  %rank = bitcast i8* %call to i32*, !dbg !4656
  store i32 %conv, i32* %rank, align 8, !dbg !4657
  %call3 = tail call fastcc %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %ops, %struct.operand_entry* %1) #8, !dbg !4658
  ret void, !dbg !4659
}

declare dso_local void @swap_tree_operands(%union.gimple_statement_d*, %union.tree_node**, %union.tree_node**) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_assign_rhs1_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4660 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4664, metadata !DIExpression()), !dbg !4665
  %call = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 1) #8, !dbg !4666
  ret %union.tree_node** %call, !dbg !4667
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_assign_rhs2_ptr(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !4668 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4670, metadata !DIExpression()), !dbg !4671
  %call = tail call fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 2) #8, !dbg !4672
  ret %union.tree_node** %call, !dbg !4673
}

; Function Attrs: nounwind uwtable
define internal fastcc void @linearize_expr(%union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !4674 {
entry:
  %gsinow = alloca %struct.gimple_stmt_iterator, align 8
  %gsirhs = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp10 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4676, metadata !DIExpression()), !dbg !4684
  %0 = bitcast %struct.gimple_stmt_iterator* %gsinow to i8*, !dbg !4685
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !4685
  %1 = bitcast %struct.gimple_stmt_iterator* %gsirhs to i8*, !dbg !4685
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #7, !dbg !4685
  %call = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt) #8, !dbg !4686
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4686
  %2 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !4686
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %2, align 8, !dbg !4686
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %3, metadata !4679, metadata !DIExpression()), !dbg !4684
  %call1 = tail call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #8, !dbg !4687
  %def_stmt3 = getelementptr inbounds %union.tree_node, %union.tree_node* %call1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4687
  %4 = bitcast %union.tree_node** %def_stmt3 to %union.gimple_statement_d**, !dbg !4687
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %4, align 8, !dbg !4687
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %5, metadata !4680, metadata !DIExpression()), !dbg !4684
  %call4 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #8, !dbg !4688
  call void @llvm.dbg.value(metadata i32 %call4, metadata !4681, metadata !DIExpression()), !dbg !4684
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !4682, metadata !DIExpression()), !dbg !4684
  %call5 = tail call fastcc %struct.loop* @loop_containing_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !4689
  call void @llvm.dbg.value(metadata %struct.loop* %call5, metadata !4683, metadata !DIExpression()), !dbg !4684
  %call6 = tail call fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %3, i32 %call4, %struct.loop* %call5) #8, !dbg !4690
  %tobool = icmp eq i8 %call6, 0, !dbg !4690
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !4690

land.lhs.true:                                    ; preds = %entry
  %call7 = tail call fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* %5, i32 %call4, %struct.loop* %call5) #8, !dbg !4690
  %tobool9 = icmp eq i8 %call7, 0, !dbg !4690
  br i1 %tobool9, label %cond.true, label %cond.end, !dbg !4690

cond.true:                                        ; preds = %land.lhs.true, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 1456, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !4690
  br label %cond.end, !dbg !4690

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %6 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4691
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7, !dbg !4691
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp, %union.gimple_statement_d* %stmt) #6, !dbg !4691
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %6, i64 24, i1 false), !dbg !4691
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7, !dbg !4691
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp10 to i8*, !dbg !4692
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #7, !dbg !4692
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp10, %union.gimple_statement_d* %5) #6, !dbg !4692
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %7, i64 24, i1 false), !dbg !4692
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7, !dbg !4692
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsinow, metadata !4677, metadata !DIExpression(DW_OP_deref)), !dbg !4684
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsirhs, metadata !4678, metadata !DIExpression(DW_OP_deref)), !dbg !4684
  call void @gsi_move_before(%struct.gimple_stmt_iterator* nonnull %gsirhs, %struct.gimple_stmt_iterator* nonnull %gsinow) #6, !dbg !4693
  %call11 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %5) #8, !dbg !4694
  call fastcc void @gimple_assign_set_rhs2(%union.gimple_statement_d* %stmt, %union.tree_node* %call11) #8, !dbg !4695
  %call12 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %3) #8, !dbg !4696
  call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %5, %union.tree_node* %call12) #8, !dbg !4697
  %call13 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %5) #8, !dbg !4698
  call fastcc void @gimple_assign_set_rhs1(%union.gimple_statement_d* %stmt, %union.tree_node* %call13) #8, !dbg !4699
  %call14 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #8, !dbg !4700
  %8 = getelementptr inbounds %union.tree_node, %union.tree_node* %call14, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4700
  %bf.load = load i64, i64* %8, align 8, !dbg !4700
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4702
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !4702
  br i1 %cmp, label %if.then, label %if.end, !dbg !4703

if.then:                                          ; preds = %cond.end
  %call16 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt) #8, !dbg !4704
  %def_stmt18 = getelementptr inbounds %union.tree_node, %union.tree_node* %call16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4704
  %9 = bitcast %union.tree_node** %def_stmt18 to %union.gimple_statement_d**, !dbg !4704
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %9, align 8, !dbg !4704
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %10, metadata !4682, metadata !DIExpression()), !dbg !4684
  br label %if.end, !dbg !4705

if.end:                                           ; preds = %if.then, %cond.end
  %newbinrhs.0 = phi %union.gimple_statement_d* [ %10, %if.then ], [ null, %cond.end ], !dbg !4684
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %newbinrhs.0, metadata !4682, metadata !DIExpression()), !dbg !4684
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4706
  %tobool19 = icmp eq %struct._IO_FILE* %11, null, !dbg !4706
  br i1 %tobool19, label %if.end24, label %land.lhs.true20, !dbg !4708

land.lhs.true20:                                  ; preds = %if.end
  %12 = load i32, i32* @dump_flags, align 4, !dbg !4709
  %and = and i32 %12, 8, !dbg !4710
  %tobool21 = icmp eq i32 %and, 0, !dbg !4710
  br i1 %tobool21, label %if.end24, label %if.then22, !dbg !4711

if.then22:                                        ; preds = %land.lhs.true20
  %call23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %11, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0)) #6, !dbg !4712
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4714
  call void @print_gimple_stmt(%struct._IO_FILE* %13, %union.gimple_statement_d* %stmt, i32 0, i32 0) #6, !dbg !4715
  br label %if.end24, !dbg !4716

if.end24:                                         ; preds = %land.lhs.true20, %if.end, %if.then22
  %14 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 0), align 4, !dbg !4717
  %inc = add nsw i32 %14, 1, !dbg !4717
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 0), align 4, !dbg !4717
  call fastcc void @update_stmt(%union.gimple_statement_d* %5) #8, !dbg !4718
  call fastcc void @update_stmt(%union.gimple_statement_d* %3) #8, !dbg !4719
  call fastcc void @update_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !4720
  call fastcc void @gimple_set_visited(%union.gimple_statement_d* %stmt, i8 zeroext 1) #8, !dbg !4721
  call fastcc void @gimple_set_visited(%union.gimple_statement_d* %3, i8 zeroext 1) #8, !dbg !4722
  call fastcc void @gimple_set_visited(%union.gimple_statement_d* %5, i8 zeroext 1) #8, !dbg !4723
  %tobool25 = icmp eq %union.gimple_statement_d* %newbinrhs.0, null, !dbg !4724
  br i1 %tobool25, label %if.end31, label %land.lhs.true26, !dbg !4726

land.lhs.true26:                                  ; preds = %if.end24
  %call27 = call fastcc zeroext i8 @is_reassociable_op(%union.gimple_statement_d* nonnull %newbinrhs.0, i32 %call4, %struct.loop* %call5) #8, !dbg !4727
  %tobool29 = icmp eq i8 %call27, 0, !dbg !4727
  br i1 %tobool29, label %if.end31, label %if.then30, !dbg !4728

if.then30:                                        ; preds = %land.lhs.true26
  call fastcc void @linearize_expr(%union.gimple_statement_d* %stmt) #8, !dbg !4729
  br label %if.end31, !dbg !4729

if.end31:                                         ; preds = %land.lhs.true26, %if.end24, %if.then30
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #7, !dbg !4730
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !4730
  ret void, !dbg !4730
}

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc i64 @get_rank(%union.tree_node* %e) unnamed_addr #5 !dbg !4731 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %e, metadata !4735, metadata !DIExpression()), !dbg !4746
  %call = tail call zeroext i8 @is_gimple_min_invariant(%union.tree_node* %e) #6, !dbg !4747
  %tobool = icmp eq i8 %call, 0, !dbg !4747
  br i1 %tobool, label %if.end, label %return, !dbg !4749

if.end:                                           ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %e, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4750
  %bf.load = load i64, i64* %0, align 8, !dbg !4750
  %bf.cast2 = and i64 %bf.load, 65535, !dbg !4751
  %cmp = icmp eq i64 %bf.cast2, 141, !dbg !4751
  br i1 %cmp, label %if.then1, label %return, !dbg !4752

if.then1:                                         ; preds = %if.end
  %var = getelementptr inbounds %union.tree_node, %union.tree_node* %e, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, !dbg !4753
  %1 = bitcast i32* %var to i64**, !dbg !4753
  %2 = load i64*, i64** %1, align 8, !dbg !4753
  %bf.load3 = load i64, i64* %2, align 8, !dbg !4753
  %bf.cast53 = and i64 %bf.load3, 65535, !dbg !4755
  %cmp6 = icmp eq i64 %bf.cast53, 34, !dbg !4755
  br i1 %cmp6, label %land.lhs.true, label %if.end14, !dbg !4756

land.lhs.true:                                    ; preds = %if.then1
  %bf.cast104 = and i64 %bf.load, 4294967296, !dbg !4757
  %tobool11 = icmp eq i64 %bf.cast104, 0, !dbg !4757
  br i1 %tobool11, label %if.end14, label %if.then12, !dbg !4758

if.then12:                                        ; preds = %land.lhs.true
  %call13 = tail call fastcc i64 @find_operand_rank(%union.tree_node* %e) #8, !dbg !4759
  br label %return, !dbg !4760

if.end14:                                         ; preds = %land.lhs.true, %if.then1
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %e, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !4761
  %3 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !4761
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %3, align 8, !dbg !4761
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %4, metadata !4736, metadata !DIExpression()), !dbg !4762
  %call16 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %4) #8, !dbg !4763
  %cmp17 = icmp eq %struct.basic_block_def* %call16, null, !dbg !4765
  br i1 %cmp17, label %return, label %if.end19, !dbg !4766

if.end19:                                         ; preds = %if.end14
  %call20 = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %4) #8, !dbg !4767
  %tobool21 = icmp eq i8 %call20, 0, !dbg !4767
  br i1 %tobool21, label %if.then24, label %lor.lhs.false, !dbg !4769

lor.lhs.false:                                    ; preds = %if.end19
  %call22 = tail call fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %4) #8, !dbg !4770
  %tobool23 = icmp eq %union.tree_node* %call22, null, !dbg !4770
  br i1 %tobool23, label %if.end26, label %if.then24, !dbg !4771

if.then24:                                        ; preds = %lor.lhs.false, %if.end19
  %5 = load i64*, i64** @bb_rank, align 8, !dbg !4772
  %call25 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %4) #8, !dbg !4773
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call25, i64 0, i32 9, !dbg !4774
  %6 = load i32, i32* %index, align 8, !dbg !4774
  %idxprom = sext i32 %6 to i64, !dbg !4772
  %arrayidx = getelementptr inbounds i64, i64* %5, i64 %idxprom, !dbg !4772
  %7 = load i64, i64* %arrayidx, align 8, !dbg !4772
  br label %return, !dbg !4775

if.end26:                                         ; preds = %lor.lhs.false
  %call27 = tail call fastcc i64 @find_operand_rank(%union.tree_node* %e) #8, !dbg !4776
  call void @llvm.dbg.value(metadata i64 %call27, metadata !4739, metadata !DIExpression()), !dbg !4762
  %cmp28 = icmp eq i64 %call27, -1, !dbg !4777
  br i1 %cmp28, label %if.end30, label %return, !dbg !4779

if.end30:                                         ; preds = %if.end26
  call void @llvm.dbg.value(metadata i64 0, metadata !4739, metadata !DIExpression()), !dbg !4762
  %8 = load i64*, i64** @bb_rank, align 8, !dbg !4780
  %call31 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %4) #8, !dbg !4781
  %index32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call31, i64 0, i32 9, !dbg !4782
  %9 = load i32, i32* %index32, align 8, !dbg !4782
  %idxprom33 = sext i32 %9 to i64, !dbg !4780
  %arrayidx34 = getelementptr inbounds i64, i64* %8, i64 %idxprom33, !dbg !4780
  %10 = load i64, i64* %arrayidx34, align 8, !dbg !4780
  call void @llvm.dbg.value(metadata i64 %10, metadata !4740, metadata !DIExpression()), !dbg !4762
  %call35 = tail call zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d* %4) #6, !dbg !4783
  %tobool36 = icmp eq i8 %call35, 0, !dbg !4783
  br i1 %tobool36, label %if.else67, label %if.then37, !dbg !4784

if.then37:                                        ; preds = %if.end30
  %call38 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %4) #8, !dbg !4785
  call void @llvm.dbg.value(metadata %union.tree_node* %call38, metadata !4743, metadata !DIExpression()), !dbg !4786
  %call39 = tail call fastcc i32 @tree_operand_length(%union.tree_node* %call38) #8, !dbg !4787
  call void @llvm.dbg.value(metadata i32 %call39, metadata !4742, metadata !DIExpression()), !dbg !4762
  %cmp40 = icmp eq i32 %call39, 0, !dbg !4788
  br i1 %cmp40, label %if.then41, label %for.cond.preheader, !dbg !4790

for.cond.preheader:                               ; preds = %if.then37
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %call38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4791
  %11 = sext i32 %call39 to i64, !dbg !4795
  br label %for.cond, !dbg !4795

if.then41:                                        ; preds = %if.then37
  %call42 = tail call fastcc i64 @get_rank(%union.tree_node* %call38) #8, !dbg !4796
  %cmp43 = icmp slt i64 %call42, 0, !dbg !4796
  br i1 %cmp43, label %if.end93, label %cond.false, !dbg !4796

cond.false:                                       ; preds = %if.then41
  %call44 = tail call fastcc i64 @get_rank(%union.tree_node* %call38) #8, !dbg !4796
  br label %if.end93, !dbg !4796

for.cond:                                         ; preds = %for.cond.preheader, %for.inc
  %indvars.iv = phi i64 [ 0, %for.cond.preheader ], [ %indvars.iv.next, %for.inc ], !dbg !4797
  %rank.0 = phi i64 [ 0, %for.cond.preheader ], [ %cond65, %for.inc ], !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.0, metadata !4739, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !4741, metadata !DIExpression()), !dbg !4762
  %cmp45 = icmp slt i64 %indvars.iv, %11, !dbg !4798
  br i1 %cmp45, label %land.lhs.true46, label %if.end93.loopexit5, !dbg !4799

land.lhs.true46:                                  ; preds = %for.cond
  %arrayidx48 = getelementptr inbounds %union.tree_node*, %union.tree_node** %operands, i64 %indvars.iv, !dbg !4800
  %12 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8, !dbg !4800
  %tobool49 = icmp ne %union.tree_node* %12, null, !dbg !4800
  %cmp50 = icmp ne i64 %rank.0, %10, !dbg !4801
  %spec.select = and i1 %cmp50, %tobool49, !dbg !4802
  br i1 %spec.select, label %for.body, label %if.end93.loopexit5, !dbg !4795

for.body:                                         ; preds = %land.lhs.true46
  %call55 = tail call fastcc i64 @get_rank(%union.tree_node* nonnull %12) #8, !dbg !4803
  %cmp56 = icmp sgt i64 %rank.0, %call55, !dbg !4803
  br i1 %cmp56, label %for.inc, label %cond.false58, !dbg !4803

cond.false58:                                     ; preds = %for.body
  %13 = load %union.tree_node*, %union.tree_node** %arrayidx48, align 8, !dbg !4803
  %call63 = tail call fastcc i64 @get_rank(%union.tree_node* %13) #8, !dbg !4803
  br label %for.inc, !dbg !4803

for.inc:                                          ; preds = %cond.false58, %for.body
  %cond65 = phi i64 [ %call63, %cond.false58 ], [ %rank.0, %for.body ], !dbg !4803
  call void @llvm.dbg.value(metadata i64 %cond65, metadata !4739, metadata !DIExpression()), !dbg !4762
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !4804
  call void @llvm.dbg.value(metadata i32 undef, metadata !4741, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !4762
  br label %for.cond, !dbg !4805, !llvm.loop !4806

if.else67:                                        ; preds = %if.end30
  %call68 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %4) #8, !dbg !4808
  call void @llvm.dbg.value(metadata i32 %call68, metadata !4742, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i32 1, metadata !4741, metadata !DIExpression()), !dbg !4762
  br label %for.cond69, !dbg !4810

for.cond69:                                       ; preds = %for.inc90, %if.else67
  %i.1 = phi i32 [ 1, %if.else67 ], [ %inc91, %for.inc90 ], !dbg !4812
  %rank.2 = phi i64 [ 0, %if.else67 ], [ %cond89, %for.inc90 ], !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.2, metadata !4739, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !4741, metadata !DIExpression()), !dbg !4762
  %cmp70 = icmp slt i32 %i.1, %call68, !dbg !4813
  %cmp72 = icmp ne i64 %rank.2, %10, !dbg !4815
  %spec.select1 = and i1 %cmp70, %cmp72, !dbg !4816
  br i1 %spec.select1, label %for.body74, label %if.end93.loopexit, !dbg !4817

for.body74:                                       ; preds = %for.cond69
  %call75 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %4, i32 %i.1) #8, !dbg !4818
  %tobool76 = icmp eq %union.tree_node* %call75, null, !dbg !4818
  br i1 %tobool76, label %cond.true77, label %cond.end79, !dbg !4818

cond.true77:                                      ; preds = %for.body74
  tail call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 276, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !4818
  br label %cond.end79, !dbg !4818

cond.end79:                                       ; preds = %for.body74, %cond.true77
  %call81 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %4, i32 %i.1) #8, !dbg !4820
  %call82 = tail call fastcc i64 @get_rank(%union.tree_node* %call81) #8, !dbg !4820
  %cmp83 = icmp sgt i64 %rank.2, %call82, !dbg !4820
  br i1 %cmp83, label %for.inc90, label %cond.false85, !dbg !4820

cond.false85:                                     ; preds = %cond.end79
  %call86 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %4, i32 %i.1) #8, !dbg !4820
  %call87 = tail call fastcc i64 @get_rank(%union.tree_node* %call86) #8, !dbg !4820
  br label %for.inc90, !dbg !4820

for.inc90:                                        ; preds = %cond.false85, %cond.end79
  %cond89 = phi i64 [ %call87, %cond.false85 ], [ %rank.2, %cond.end79 ], !dbg !4820
  call void @llvm.dbg.value(metadata i64 %cond89, metadata !4739, metadata !DIExpression()), !dbg !4762
  %inc91 = add nuw nsw i32 %i.1, 1, !dbg !4821
  call void @llvm.dbg.value(metadata i32 %inc91, metadata !4741, metadata !DIExpression()), !dbg !4762
  br label %for.cond69, !dbg !4822, !llvm.loop !4823

if.end93.loopexit:                                ; preds = %for.cond69
  %rank.2.lcssa = phi i64 [ %rank.2, %for.cond69 ], !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.2.lcssa, metadata !4739, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.2.lcssa, metadata !4739, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.2.lcssa, metadata !4739, metadata !DIExpression()), !dbg !4762
  br label %if.end93, !dbg !4825

if.end93.loopexit5:                               ; preds = %land.lhs.true46, %for.cond
  %rank.0.lcssa = phi i64 [ %rank.0, %land.lhs.true46 ], [ %rank.0, %for.cond ], !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.0.lcssa, metadata !4739, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.0.lcssa, metadata !4739, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.0.lcssa, metadata !4739, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.0.lcssa, metadata !4739, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.0.lcssa, metadata !4739, metadata !DIExpression()), !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.0.lcssa, metadata !4739, metadata !DIExpression()), !dbg !4762
  br label %if.end93, !dbg !4825

if.end93:                                         ; preds = %if.end93.loopexit5, %if.end93.loopexit, %if.then41, %cond.false
  %rank.3 = phi i64 [ %call44, %cond.false ], [ 0, %if.then41 ], [ %rank.2.lcssa, %if.end93.loopexit ], [ %rank.0.lcssa, %if.end93.loopexit5 ], !dbg !4762
  call void @llvm.dbg.value(metadata i64 %rank.3, metadata !4739, metadata !DIExpression()), !dbg !4762
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4825
  %tobool94 = icmp eq %struct._IO_FILE* %14, null, !dbg !4825
  br i1 %tobool94, label %if.end100, label %land.lhs.true95, !dbg !4827

land.lhs.true95:                                  ; preds = %if.end93
  %15 = load i32, i32* @dump_flags, align 4, !dbg !4828
  %and = and i32 %15, 8, !dbg !4829
  %tobool96 = icmp eq i32 %and, 0, !dbg !4829
  br i1 %tobool96, label %if.end100, label %if.then97, !dbg !4830

if.then97:                                        ; preds = %land.lhs.true95
  %call98 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %14, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)) #6, !dbg !4831
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4833
  tail call void @print_generic_expr(%struct._IO_FILE* %16, %union.tree_node* %e, i32 0) #6, !dbg !4834
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4835
  %add = add nsw i64 %rank.3, 1, !dbg !4836
  %call99 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i64 %add) #6, !dbg !4837
  br label %if.end100, !dbg !4838

if.end100:                                        ; preds = %land.lhs.true95, %if.end93, %if.then97
  %add101 = add nsw i64 %rank.3, 1, !dbg !4839
  tail call fastcc void @insert_operand_rank(%union.tree_node* %e, i64 %add101) #8, !dbg !4840
  br label %return, !dbg !4841

return:                                           ; preds = %if.end26, %entry, %if.end, %if.then12, %if.then24, %if.end100, %if.end14
  %retval.1 = phi i64 [ 0, %entry ], [ %call13, %if.then12 ], [ %7, %if.then24 ], [ %add101, %if.end100 ], [ 0, %if.end14 ], [ %call27, %if.end26 ], [ 0, %if.end ], !dbg !4746
  ret i64 %retval.1, !dbg !4842
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %vec_, %struct.operand_entry* %obj_) unnamed_addr #0 !dbg !4843 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %vec_, metadata !4847, metadata !DIExpression()), !dbg !4849
  call void @llvm.dbg.value(metadata %struct.operand_entry* %obj_, metadata !4848, metadata !DIExpression()), !dbg !4849
  %call = tail call fastcc i32 @VEC_operand_entry_t_heap_reserve(%struct.VEC_operand_entry_t_heap** %vec_, i32 1) #8, !dbg !4850
  %0 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %vec_, align 8, !dbg !4850
  %tobool = icmp eq %struct.VEC_operand_entry_t_heap* %0, null, !dbg !4850
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4850

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %0, i64 0, i32 0, !dbg !4850
  br label %cond.end, !dbg !4850

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %entry ], !dbg !4850
  %call1 = tail call fastcc %struct.operand_entry** @VEC_operand_entry_t_base_quick_push(%struct.VEC_operand_entry_t_base* %cond, %struct.operand_entry* %obj_) #8, !dbg !4850
  ret %struct.operand_entry** %call1, !dbg !4850
}

declare dso_local zeroext i8 @is_gimple_min_invariant(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i64 @find_operand_rank(%union.tree_node* %e) unnamed_addr #0 !dbg !4851 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %e, metadata !4853, metadata !DIExpression()), !dbg !4855
  %0 = load %struct.pointer_map_t*, %struct.pointer_map_t** @operand_rank, align 8, !dbg !4856
  %1 = bitcast %union.tree_node* %e to i8*, !dbg !4857
  %call = tail call i8** @pointer_map_contains(%struct.pointer_map_t* %0, i8* %1) #6, !dbg !4858
  call void @llvm.dbg.value(metadata i8** %call, metadata !4854, metadata !DIExpression()), !dbg !4855
  %tobool = icmp eq i8** %call, null, !dbg !4859
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4859

cond.true:                                        ; preds = %entry
  %2 = bitcast i8** %call to i64*, !dbg !4860
  %3 = load i64, i64* %2, align 8, !dbg !4860
  br label %cond.end, !dbg !4859

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i64 [ %3, %cond.true ], [ -1, %entry ], !dbg !4859
  ret i64 %cond, !dbg !4861
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4862 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4864, metadata !DIExpression()), !dbg !4865
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #8, !dbg !4866
  %tobool = icmp eq i8 %call, 0, !dbg !4866
  br i1 %tobool, label %return, label %if.end, !dbg !4868

if.end:                                           ; preds = %entry
  %vdef = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, !dbg !4869
  %0 = bitcast [1 x %struct.phi_arg_d]* %vdef to %union.tree_node**, !dbg !4869
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !4869
  br label %return, !dbg !4870

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !4865
  ret %union.tree_node* %retval.0, !dbg !4871
}

declare dso_local zeroext i8 @gimple_assign_single_p(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @tree_operand_length(%union.tree_node* %node) unnamed_addr #0 !dbg !4872 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %node, metadata !4876, metadata !DIExpression()), !dbg !4877
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %node, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4878
  %bf.load = load i64, i64* %0, align 8, !dbg !4878
  %bf.cast = and i64 %bf.load, 65535, !dbg !4878
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !4878
  %1 = load i32, i32* %arrayidx, align 4, !dbg !4878
  %cmp = icmp eq i32 %1, 9, !dbg !4878
  br i1 %cmp, label %if.then, label %if.else, !dbg !4880

if.then:                                          ; preds = %entry
  %operands = getelementptr inbounds %union.tree_node, %union.tree_node* %node, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 4, !dbg !4881
  %2 = bitcast %union.tree_node** %operands to %struct.tree_int_cst**, !dbg !4881
  %3 = load %struct.tree_int_cst*, %struct.tree_int_cst** %2, align 8, !dbg !4881
  %low = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %3, i64 0, i32 1, i32 0, !dbg !4881
  %4 = load i64, i64* %low, align 8, !dbg !4881
  %conv = trunc i64 %4 to i32, !dbg !4881
  br label %return, !dbg !4882

if.else:                                          ; preds = %entry
  %arrayidx8 = getelementptr inbounds [0 x i8], [0 x i8]* @tree_code_length, i64 0, i64 %bf.cast, !dbg !4883
  %5 = load i8, i8* %arrayidx8, align 1, !dbg !4883
  %conv9 = zext i8 %5 to i32, !dbg !4883
  br label %return, !dbg !4884

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %conv, %if.then ], [ %conv9, %if.else ], !dbg !4885
  ret i32 %retval.0, !dbg !4886
}

declare dso_local i8** @pointer_map_contains(%struct.pointer_map_t*, i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4887 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4889, metadata !DIExpression()), !dbg !4890
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !4891
  %cmp = icmp ugt i32 %call, 5, !dbg !4892
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4893

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !4894
  %cmp2 = icmp ult i32 %call1, 10, !dbg !4895
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !4896
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_operand_entry_t_heap_reserve(%struct.VEC_operand_entry_t_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !4897 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %vec_, metadata !4901, metadata !DIExpression()), !dbg !4904
  call void @llvm.dbg.value(metadata i32 1, metadata !4902, metadata !DIExpression()), !dbg !4904
  %0 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %vec_, align 8, !dbg !4905
  %tobool = icmp eq %struct.VEC_operand_entry_t_heap* %0, null, !dbg !4905
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4905

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %0, i64 0, i32 0, !dbg !4905
  br label %cond.end, !dbg !4905

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %entry ], !dbg !4905
  %call = tail call fastcc i32 @VEC_operand_entry_t_base_space(%struct.VEC_operand_entry_t_base* %cond, i32 1) #8, !dbg !4905
  %tobool1 = icmp eq i32 %call, 0, !dbg !4905
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !4905
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !4903, metadata !DIExpression()), !dbg !4904
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4905

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_operand_entry_t_heap** %vec_ to i8**, !dbg !4906
  %2 = load i8*, i8** %1, align 8, !dbg !4906
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %2, i32 1) #6, !dbg !4906
  store i8* %call3, i8** %1, align 8, !dbg !4906
  br label %if.end, !dbg !4906

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !4905
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.operand_entry** @VEC_operand_entry_t_base_quick_push(%struct.VEC_operand_entry_t_base* %vec_, %struct.operand_entry* %obj_) unnamed_addr #0 !dbg !4908 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_base* %vec_, metadata !4912, metadata !DIExpression()), !dbg !4915
  call void @llvm.dbg.value(metadata %struct.operand_entry* %obj_, metadata !4913, metadata !DIExpression()), !dbg !4915
  %num1 = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 0, !dbg !4916
  %0 = load i32, i32* %num1, align 8, !dbg !4916
  %inc = add i32 %0, 1, !dbg !4916
  store i32 %inc, i32* %num1, align 8, !dbg !4916
  %idxprom = zext i32 %0 to i64, !dbg !4916
  %arrayidx = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !4916
  call void @llvm.dbg.value(metadata %struct.operand_entry** %arrayidx, metadata !4914, metadata !DIExpression()), !dbg !4915
  store %struct.operand_entry* %obj_, %struct.operand_entry** %arrayidx, align 8, !dbg !4916
  ret %struct.operand_entry** %arrayidx, !dbg !4916
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_operand_entry_t_base_space(%struct.VEC_operand_entry_t_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !4917 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_base* %vec_, metadata !4921, metadata !DIExpression()), !dbg !4923
  call void @llvm.dbg.value(metadata i32 1, metadata !4922, metadata !DIExpression()), !dbg !4923
  %tobool = icmp eq %struct.VEC_operand_entry_t_base* %vec_, null, !dbg !4924
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4924

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 1, !dbg !4924
  %0 = load i32, i32* %alloc, align 4, !dbg !4924
  %num = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 0, !dbg !4924
  %1 = load i32, i32* %num, align 8, !dbg !4924
  %cmp1 = icmp ne i32 %0, %1, !dbg !4924
  %phitmp = zext i1 %cmp1 to i32, !dbg !4924
  br label %cond.end, !dbg !4924

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4924

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !4924
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_op_ptr(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !4925 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !4929, metadata !DIExpression()), !dbg !4931
  call void @llvm.dbg.value(metadata i32 %i, metadata !4930, metadata !DIExpression()), !dbg !4931
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #8, !dbg !4932
  %tobool = icmp eq i8 %call, 0, !dbg !4932
  br i1 %tobool, label %return, label %if.then, !dbg !4934

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #8, !dbg !4935
  %idx.ext = zext i32 %i to i64, !dbg !4937
  %add.ptr = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idx.ext, !dbg !4937
  br label %return, !dbg !4938

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node** [ %add.ptr, %if.then ], [ null, %entry ], !dbg !4939
  ret %union.tree_node** %retval.0, !dbg !4940
}

declare dso_local void @gsi_move_before(%struct.gimple_stmt_iterator*, %struct.gimple_stmt_iterator*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @constant_type(%union.tree_node* %t) unnamed_addr #0 !dbg !4941 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %t, metadata !4945, metadata !DIExpression()), !dbg !4946
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %t, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4947
  %0 = bitcast %union.tree_node** %type to i64**, !dbg !4947
  %1 = load i64*, i64** %0, align 8, !dbg !4947
  %bf.load = load i64, i64* %1, align 8, !dbg !4947
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4947
  %cmp = icmp eq i64 %bf.cast1, 6, !dbg !4947
  br i1 %cmp, label %return, label %lor.lhs.false, !dbg !4947

lor.lhs.false:                                    ; preds = %entry
  %cmp7 = icmp eq i64 %bf.cast1, 7, !dbg !4947
  br i1 %cmp7, label %return, label %lor.lhs.false8, !dbg !4947

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %cmp15 = icmp eq i64 %bf.cast1, 8, !dbg !4947
  br i1 %cmp15, label %return, label %if.else, !dbg !4949

if.else:                                          ; preds = %lor.lhs.false8
  %cmp22 = icmp eq i64 %bf.cast1, 9, !dbg !4950
  %. = select i1 %cmp22, i32 4, i32 2, !dbg !4952
  br label %return, !dbg !4952

return:                                           ; preds = %if.else, %entry, %lor.lhs.false, %lor.lhs.false8
  %retval.0 = phi i32 [ 8, %lor.lhs.false8 ], [ 8, %lor.lhs.false ], [ 8, %entry ], [ %., %if.else ], !dbg !4953
  ret i32 %retval.0, !dbg !4954
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.operand_entry* @VEC_operand_entry_t_base_index(%struct.VEC_operand_entry_t_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !4955 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_base* %vec_, metadata !4959, metadata !DIExpression()), !dbg !4961
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !4960, metadata !DIExpression()), !dbg !4961
  br label %land.end, !dbg !4962

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !4962
  %arrayidx = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !4962
  %0 = load %struct.operand_entry*, %struct.operand_entry** %arrayidx, align 8, !dbg !4962
  ret %struct.operand_entry* %0, !dbg !4962
}

declare dso_local zeroext i8 @useless_type_conversion_p(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @fold_binary_loc(i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %vec_) unnamed_addr #0 !dbg !4963 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_base* %vec_, metadata !4967, metadata !DIExpression()), !dbg !4969
  %num1 = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 0, !dbg !4970
  %0 = load i32, i32* %num1, align 8, !dbg !4970
  %dec = add i32 %0, -1, !dbg !4970
  store i32 %dec, i32* %num1, align 8, !dbg !4970
  %idxprom = zext i32 %dec to i64, !dbg !4970
  %arrayidx = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !4970
  %1 = load %struct.operand_entry*, %struct.operand_entry** %arrayidx, align 8, !dbg !4970
  call void @llvm.dbg.value(metadata %struct.operand_entry* %1, metadata !4968, metadata !DIExpression()), !dbg !4969
  ret %struct.operand_entry* %1, !dbg !4970
}

; Function Attrs: nounwind uwtable
define internal fastcc void @eliminate_using_constants(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops) unnamed_addr #5 !dbg !4971 {
entry:
  call void @llvm.dbg.value(metadata i32 %opcode, metadata !4973, metadata !DIExpression()), !dbg !4977
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !4974, metadata !DIExpression()), !dbg !4977
  %0 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4978
  %tobool = icmp eq %struct.VEC_operand_entry_t_heap* %0, null, !dbg !4978
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !4978

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %0, i64 0, i32 0, !dbg !4978
  br label %cond.end, !dbg !4978

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %entry ], !dbg !4978
  %call = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_last(%struct.VEC_operand_entry_t_base* %cond) #8, !dbg !4978
  call void @llvm.dbg.value(metadata %struct.operand_entry* %call, metadata !4975, metadata !DIExpression()), !dbg !4977
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call, i64 0, i32 1, !dbg !4979
  %1 = bitcast %union.tree_node** %op to %struct.tree_common**, !dbg !4979
  %2 = load %struct.tree_common*, %struct.tree_common** %1, align 8, !dbg !4979
  %type1 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %2, i64 0, i32 2, !dbg !4979
  %3 = load %union.tree_node*, %union.tree_node** %type1, align 8, !dbg !4979
  call void @llvm.dbg.value(metadata %union.tree_node* %3, metadata !4976, metadata !DIExpression()), !dbg !4977
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %call, i64 0, i32 0, !dbg !4980
  %4 = load i32, i32* %rank, align 8, !dbg !4980
  %cmp = icmp eq i32 %4, 0, !dbg !4982
  %5 = bitcast %struct.tree_common* %2 to %union.tree_node*, !dbg !4983
  br i1 %cmp, label %land.lhs.true, label %cleanup.cont, !dbg !4983

land.lhs.true:                                    ; preds = %cond.end
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4984
  %bf.load = load i64, i64* %6, align 8, !dbg !4984
  %bf.cast3 = and i64 %bf.load, 65535, !dbg !4984
  %cmp3 = icmp eq i64 %bf.cast3, 6, !dbg !4984
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !4984

lor.lhs.false:                                    ; preds = %land.lhs.true
  %cmp8 = icmp eq i64 %bf.cast3, 7, !dbg !4984
  br i1 %cmp8, label %if.then, label %lor.lhs.false9, !dbg !4984

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %cmp14 = icmp eq i64 %bf.cast3, 8, !dbg !4984
  br i1 %cmp14, label %if.then, label %lor.lhs.false15, !dbg !4985

lor.lhs.false15:                                  ; preds = %lor.lhs.false9
  %cmp20 = icmp eq i64 %bf.cast3, 9, !dbg !4986
  br i1 %cmp20, label %if.then, label %lor.lhs.false21, !dbg !4986

lor.lhs.false21:                                  ; preds = %lor.lhs.false15
  %cmp26 = icmp eq i64 %bf.cast3, 13, !dbg !4986
  br i1 %cmp26, label %land.lhs.true33, label %lor.lhs.false27, !dbg !4986

lor.lhs.false27:                                  ; preds = %lor.lhs.false21
  %cmp32 = icmp eq i64 %bf.cast3, 14, !dbg !4986
  br i1 %cmp32, label %land.lhs.true33, label %cleanup.cont, !dbg !4986

land.lhs.true33:                                  ; preds = %lor.lhs.false27, %lor.lhs.false21
  %type35 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !4986
  %7 = bitcast %union.tree_node** %type35 to i64**, !dbg !4986
  %8 = load i64*, i64** %7, align 8, !dbg !4986
  %bf.load37 = load i64, i64* %8, align 8, !dbg !4986
  %bf.cast3910 = and i64 %bf.load37, 65535, !dbg !4986
  %cmp40 = icmp eq i64 %bf.cast3910, 9, !dbg !4986
  br i1 %cmp40, label %if.then, label %cleanup.cont, !dbg !4987

if.then:                                          ; preds = %land.lhs.true33, %lor.lhs.false15, %lor.lhs.false9, %lor.lhs.false, %land.lhs.true
  switch i32 %opcode, label %cleanup.cont [
    i32 89, label %sw.bb
    i32 87, label %sw.bb98
    i32 65, label %sw.bb162
    i32 88, label %sw.bb1348
    i32 63, label %sw.bb1348
    i32 64, label %sw.bb1348
  ], !dbg !4988

sw.bb:                                            ; preds = %if.then
  %call42 = tail call i32 @integer_zerop(%union.tree_node* %5) #6, !dbg !4990
  %tobool43 = icmp eq i32 %call42, 0, !dbg !4990
  br i1 %tobool43, label %if.else, label %if.then44, !dbg !4993

if.then44:                                        ; preds = %sw.bb
  %9 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !4994
  %tobool45 = icmp eq %struct.VEC_operand_entry_t_heap* %9, null, !dbg !4994
  br i1 %tobool45, label %cond.end49, label %cond.true46, !dbg !4994

cond.true46:                                      ; preds = %if.then44
  %base47 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %9, i64 0, i32 0, !dbg !4994
  br label %cond.end49, !dbg !4994

cond.end49:                                       ; preds = %if.then44, %cond.true46
  %cond50 = phi %struct.VEC_operand_entry_t_base* [ %base47, %cond.true46 ], [ null, %if.then44 ], !dbg !4994
  %call51 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond50) #8, !dbg !4994
  %cmp52 = icmp eq i32 %call51, 1, !dbg !4997
  br i1 %cmp52, label %cleanup.cont, label %if.then53, !dbg !4998

if.then53:                                        ; preds = %cond.end49
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4999
  %tobool54 = icmp eq %struct._IO_FILE* %10, null, !dbg !4999
  br i1 %tobool54, label %if.end, label %land.lhs.true55, !dbg !5002

land.lhs.true55:                                  ; preds = %if.then53
  %11 = load i32, i32* @dump_flags, align 4, !dbg !5003
  %and = and i32 %11, 8, !dbg !5004
  %tobool56 = icmp eq i32 %and, 0, !dbg !5004
  br i1 %tobool56, label %if.end, label %if.then57, !dbg !5005

if.then57:                                        ; preds = %land.lhs.true55
  %call58 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %10, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.15, i64 0, i64 0)) #6, !dbg !5006
  br label %if.end, !dbg !5006

if.end:                                           ; preds = %land.lhs.true55, %if.then53, %if.then57
  %12 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5007
  %tobool59 = icmp eq %struct.VEC_operand_entry_t_heap* %12, null, !dbg !5007
  br i1 %tobool59, label %cond.end63, label %cond.true60, !dbg !5007

cond.true60:                                      ; preds = %if.end
  %base61 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %12, i64 0, i32 0, !dbg !5007
  br label %cond.end63, !dbg !5007

cond.end63:                                       ; preds = %if.end, %cond.true60
  %cond64 = phi %struct.VEC_operand_entry_t_base* [ %base61, %cond.true60 ], [ null, %if.end ], !dbg !5007
  %call65 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond64) #8, !dbg !5007
  %sub = add i32 %call65, -1, !dbg !5008
  %13 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5009
  %add = add i32 %13, %sub, !dbg !5009
  store i32 %add, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5009
  tail call fastcc void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %ops) #8, !dbg !5010
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5011
  %call66 = tail call fastcc %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %ops, %struct.operand_entry* %call) #8, !dbg !5012
  br label %cleanup.cont, !dbg !5013

if.else:                                          ; preds = %sw.bb
  %14 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5014
  %call69 = tail call i32 @integer_all_onesp(%union.tree_node* %14) #6, !dbg !5016
  %tobool70 = icmp eq i32 %call69, 0, !dbg !5016
  br i1 %tobool70, label %cleanup.cont, label %if.then71, !dbg !5017

if.then71:                                        ; preds = %if.else
  %15 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5018
  %tobool72 = icmp eq %struct.VEC_operand_entry_t_heap* %15, null, !dbg !5018
  br i1 %tobool72, label %cond.end76, label %cond.true73, !dbg !5018

cond.true73:                                      ; preds = %if.then71
  %base74 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %15, i64 0, i32 0, !dbg !5018
  br label %cond.end76, !dbg !5018

cond.end76:                                       ; preds = %if.then71, %cond.true73
  %cond77 = phi %struct.VEC_operand_entry_t_base* [ %base74, %cond.true73 ], [ null, %if.then71 ], !dbg !5018
  %call78 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond77) #8, !dbg !5018
  %cmp79 = icmp eq i32 %call78, 1, !dbg !5021
  br i1 %cmp79, label %cleanup.cont, label %if.then80, !dbg !5022

if.then80:                                        ; preds = %cond.end76
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5023
  %tobool81 = icmp eq %struct._IO_FILE* %16, null, !dbg !5023
  br i1 %tobool81, label %if.end87, label %land.lhs.true82, !dbg !5026

land.lhs.true82:                                  ; preds = %if.then80
  %17 = load i32, i32* @dump_flags, align 4, !dbg !5027
  %and83 = and i32 %17, 8, !dbg !5028
  %tobool84 = icmp eq i32 %and83, 0, !dbg !5028
  br i1 %tobool84, label %if.end87, label %if.then85, !dbg !5029

if.then85:                                        ; preds = %land.lhs.true82
  %call86 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !5030
  br label %if.end87, !dbg !5030

if.end87:                                         ; preds = %land.lhs.true82, %if.then80, %if.then85
  %18 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5031
  %tobool88 = icmp eq %struct.VEC_operand_entry_t_heap* %18, null, !dbg !5031
  br i1 %tobool88, label %cond.end92, label %cond.true89, !dbg !5031

cond.true89:                                      ; preds = %if.end87
  %base90 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %18, i64 0, i32 0, !dbg !5031
  br label %cond.end92, !dbg !5031

cond.end92:                                       ; preds = %if.end87, %cond.true89
  %cond93 = phi %struct.VEC_operand_entry_t_base* [ %base90, %cond.true89 ], [ null, %if.end87 ], !dbg !5031
  %call94 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond93) #8, !dbg !5031
  %19 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5032
  %inc = add nsw i32 %19, 1, !dbg !5032
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5032
  br label %cleanup.cont, !dbg !5033

sw.bb98:                                          ; preds = %if.then
  %call100 = tail call i32 @integer_all_onesp(%union.tree_node* %5) #6, !dbg !5034
  %tobool101 = icmp eq i32 %call100, 0, !dbg !5034
  br i1 %tobool101, label %if.else130, label %if.then102, !dbg !5036

if.then102:                                       ; preds = %sw.bb98
  %20 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5037
  %tobool103 = icmp eq %struct.VEC_operand_entry_t_heap* %20, null, !dbg !5037
  br i1 %tobool103, label %cond.end107, label %cond.true104, !dbg !5037

cond.true104:                                     ; preds = %if.then102
  %base105 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %20, i64 0, i32 0, !dbg !5037
  br label %cond.end107, !dbg !5037

cond.end107:                                      ; preds = %if.then102, %cond.true104
  %cond108 = phi %struct.VEC_operand_entry_t_base* [ %base105, %cond.true104 ], [ null, %if.then102 ], !dbg !5037
  %call109 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond108) #8, !dbg !5037
  %cmp110 = icmp eq i32 %call109, 1, !dbg !5040
  br i1 %cmp110, label %cleanup.cont, label %if.then111, !dbg !5041

if.then111:                                       ; preds = %cond.end107
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5042
  %tobool112 = icmp eq %struct._IO_FILE* %21, null, !dbg !5042
  br i1 %tobool112, label %if.end118, label %land.lhs.true113, !dbg !5045

land.lhs.true113:                                 ; preds = %if.then111
  %22 = load i32, i32* @dump_flags, align 4, !dbg !5046
  %and114 = and i32 %22, 8, !dbg !5047
  %tobool115 = icmp eq i32 %and114, 0, !dbg !5047
  br i1 %tobool115, label %if.end118, label %if.then116, !dbg !5048

if.then116:                                       ; preds = %land.lhs.true113
  %call117 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %21, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.17, i64 0, i64 0)) #6, !dbg !5049
  br label %if.end118, !dbg !5049

if.end118:                                        ; preds = %land.lhs.true113, %if.then111, %if.then116
  %23 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5050
  %tobool119 = icmp eq %struct.VEC_operand_entry_t_heap* %23, null, !dbg !5050
  br i1 %tobool119, label %cond.end123, label %cond.true120, !dbg !5050

cond.true120:                                     ; preds = %if.end118
  %base121 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %23, i64 0, i32 0, !dbg !5050
  br label %cond.end123, !dbg !5050

cond.end123:                                      ; preds = %if.end118, %cond.true120
  %cond124 = phi %struct.VEC_operand_entry_t_base* [ %base121, %cond.true120 ], [ null, %if.end118 ], !dbg !5050
  %call125 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond124) #8, !dbg !5050
  %sub126 = add i32 %call125, -1, !dbg !5051
  %24 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5052
  %add127 = add i32 %24, %sub126, !dbg !5052
  store i32 %add127, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5052
  tail call fastcc void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %ops) #8, !dbg !5053
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5054
  %call128 = tail call fastcc %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %ops, %struct.operand_entry* %call) #8, !dbg !5055
  br label %cleanup.cont, !dbg !5056

if.else130:                                       ; preds = %sw.bb98
  %25 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5057
  %call132 = tail call i32 @integer_zerop(%union.tree_node* %25) #6, !dbg !5059
  %tobool133 = icmp eq i32 %call132, 0, !dbg !5059
  br i1 %tobool133, label %cleanup.cont, label %if.then134, !dbg !5060

if.then134:                                       ; preds = %if.else130
  %26 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5061
  %tobool135 = icmp eq %struct.VEC_operand_entry_t_heap* %26, null, !dbg !5061
  br i1 %tobool135, label %cond.end139, label %cond.true136, !dbg !5061

cond.true136:                                     ; preds = %if.then134
  %base137 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %26, i64 0, i32 0, !dbg !5061
  br label %cond.end139, !dbg !5061

cond.end139:                                      ; preds = %if.then134, %cond.true136
  %cond140 = phi %struct.VEC_operand_entry_t_base* [ %base137, %cond.true136 ], [ null, %if.then134 ], !dbg !5061
  %call141 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond140) #8, !dbg !5061
  %cmp142 = icmp eq i32 %call141, 1, !dbg !5064
  br i1 %cmp142, label %cleanup.cont, label %if.then143, !dbg !5065

if.then143:                                       ; preds = %cond.end139
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5066
  %tobool144 = icmp eq %struct._IO_FILE* %27, null, !dbg !5066
  br i1 %tobool144, label %if.end150, label %land.lhs.true145, !dbg !5069

land.lhs.true145:                                 ; preds = %if.then143
  %28 = load i32, i32* @dump_flags, align 4, !dbg !5070
  %and146 = and i32 %28, 8, !dbg !5071
  %tobool147 = icmp eq i32 %and146, 0, !dbg !5071
  br i1 %tobool147, label %if.end150, label %if.then148, !dbg !5072

if.then148:                                       ; preds = %land.lhs.true145
  %call149 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %27, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0)) #6, !dbg !5073
  br label %if.end150, !dbg !5073

if.end150:                                        ; preds = %land.lhs.true145, %if.then143, %if.then148
  %29 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5074
  %tobool151 = icmp eq %struct.VEC_operand_entry_t_heap* %29, null, !dbg !5074
  br i1 %tobool151, label %cond.end155, label %cond.true152, !dbg !5074

cond.true152:                                     ; preds = %if.end150
  %base153 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %29, i64 0, i32 0, !dbg !5074
  br label %cond.end155, !dbg !5074

cond.end155:                                      ; preds = %if.end150, %cond.true152
  %cond156 = phi %struct.VEC_operand_entry_t_base* [ %base153, %cond.true152 ], [ null, %if.end150 ], !dbg !5074
  %call157 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond156) #8, !dbg !5074
  %30 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5075
  %inc158 = add nsw i32 %30, 1, !dbg !5075
  store i32 %inc158, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5075
  br label %cleanup.cont, !dbg !5076

sw.bb162:                                         ; preds = %if.then
  %call164 = tail call i32 @integer_zerop(%union.tree_node* %5) #6, !dbg !5077
  %tobool165 = icmp eq i32 %call164, 0, !dbg !5077
  br i1 %tobool165, label %lor.lhs.false166, label %if.then896, !dbg !5079

lor.lhs.false166:                                 ; preds = %sw.bb162
  %bf.load168 = load i64, i64* %6, align 8, !dbg !5080
  %bf.cast17015 = and i64 %bf.load168, 65535, !dbg !5080
  %cmp171 = icmp eq i64 %bf.cast17015, 9, !dbg !5080
  br i1 %cmp171, label %land.lhs.true192, label %lor.lhs.false172, !dbg !5080

lor.lhs.false172:                                 ; preds = %lor.lhs.false166
  %cmp177 = icmp eq i64 %bf.cast17015, 13, !dbg !5080
  br i1 %cmp177, label %land.lhs.true184, label %lor.lhs.false178, !dbg !5080

lor.lhs.false178:                                 ; preds = %lor.lhs.false172
  %cmp183 = icmp eq i64 %bf.cast17015, 14, !dbg !5080
  br i1 %cmp183, label %land.lhs.true184, label %if.else925, !dbg !5080

land.lhs.true184:                                 ; preds = %lor.lhs.false178, %lor.lhs.false172
  %type186 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5080
  %31 = bitcast %union.tree_node** %type186 to i64**, !dbg !5080
  %32 = load i64*, i64** %31, align 8, !dbg !5080
  %bf.load188 = load i64, i64* %32, align 8, !dbg !5080
  %bf.cast19037 = and i64 %bf.load188, 65535, !dbg !5080
  %cmp191 = icmp eq i64 %bf.cast19037, 9, !dbg !5080
  br i1 %cmp191, label %land.lhs.true192, label %if.else925, !dbg !5081

land.lhs.true192:                                 ; preds = %land.lhs.true184, %lor.lhs.false166
  %cmp197 = icmp eq i64 %bf.cast17015, 14, !dbg !5082
  br i1 %cmp197, label %cond.true198, label %cond.false200, !dbg !5082

cond.true198:                                     ; preds = %land.lhs.true192
  %call199 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end204, !dbg !5082

cond.false200:                                    ; preds = %land.lhs.true192
  %type201 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type201, i64 0, i32 6, !dbg !5082
  %bf.load202 = load i32, i32* %mode, align 4, !dbg !5082
  %bf.lshr = lshr i32 %bf.load202, 16, !dbg !5082
  %bf.clear203 = and i32 %bf.lshr, 255, !dbg !5082
  br label %cond.end204, !dbg !5082

cond.end204:                                      ; preds = %cond.false200, %cond.true198
  %cond205 = phi i32 [ %call199, %cond.true198 ], [ %bf.clear203, %cond.false200 ], !dbg !5082
  %idxprom = zext i32 %cond205 to i64, !dbg !5082
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5082
  %33 = load i8, i8* %arrayidx, align 1, !dbg !5082
  %cmp206 = icmp eq i8 %33, 8, !dbg !5082
  br i1 %cmp206, label %land.lhs.true274, label %lor.lhs.false208, !dbg !5082

lor.lhs.false208:                                 ; preds = %cond.end204
  %bf.load210 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast21239 = and i64 %bf.load210, 65535, !dbg !5082
  %cmp213 = icmp eq i64 %bf.cast21239, 14, !dbg !5082
  br i1 %cmp213, label %cond.true215, label %cond.false217, !dbg !5082

cond.true215:                                     ; preds = %lor.lhs.false208
  %call216 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end223, !dbg !5082

cond.false217:                                    ; preds = %lor.lhs.false208
  %type218 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode219 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type218, i64 0, i32 6, !dbg !5082
  %bf.load220 = load i32, i32* %mode219, align 4, !dbg !5082
  %bf.lshr221 = lshr i32 %bf.load220, 16, !dbg !5082
  %bf.clear222 = and i32 %bf.lshr221, 255, !dbg !5082
  br label %cond.end223, !dbg !5082

cond.end223:                                      ; preds = %cond.false217, %cond.true215
  %cond224 = phi i32 [ %call216, %cond.true215 ], [ %bf.clear222, %cond.false217 ], !dbg !5082
  %idxprom225 = zext i32 %cond224 to i64, !dbg !5082
  %arrayidx226 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom225, !dbg !5082
  %34 = load i8, i8* %arrayidx226, align 1, !dbg !5082
  %cmp228 = icmp eq i8 %34, 9, !dbg !5082
  br i1 %cmp228, label %land.lhs.true274, label %lor.lhs.false230, !dbg !5082

lor.lhs.false230:                                 ; preds = %cond.end223
  %bf.load232 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast23440 = and i64 %bf.load232, 65535, !dbg !5082
  %cmp235 = icmp eq i64 %bf.cast23440, 14, !dbg !5082
  br i1 %cmp235, label %cond.true237, label %cond.false239, !dbg !5082

cond.true237:                                     ; preds = %lor.lhs.false230
  %call238 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end245, !dbg !5082

cond.false239:                                    ; preds = %lor.lhs.false230
  %type240 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode241 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type240, i64 0, i32 6, !dbg !5082
  %bf.load242 = load i32, i32* %mode241, align 4, !dbg !5082
  %bf.lshr243 = lshr i32 %bf.load242, 16, !dbg !5082
  %bf.clear244 = and i32 %bf.lshr243, 255, !dbg !5082
  br label %cond.end245, !dbg !5082

cond.end245:                                      ; preds = %cond.false239, %cond.true237
  %cond246 = phi i32 [ %call238, %cond.true237 ], [ %bf.clear244, %cond.false239 ], !dbg !5082
  %idxprom247 = zext i32 %cond246 to i64, !dbg !5082
  %arrayidx248 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom247, !dbg !5082
  %35 = load i8, i8* %arrayidx248, align 1, !dbg !5082
  %cmp250 = icmp eq i8 %35, 11, !dbg !5082
  br i1 %cmp250, label %land.lhs.true274, label %lor.lhs.false252, !dbg !5082

lor.lhs.false252:                                 ; preds = %cond.end245
  %bf.load254 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast25641 = and i64 %bf.load254, 65535, !dbg !5082
  %cmp257 = icmp eq i64 %bf.cast25641, 14, !dbg !5082
  br i1 %cmp257, label %cond.true259, label %cond.false261, !dbg !5082

cond.true259:                                     ; preds = %lor.lhs.false252
  %call260 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end267, !dbg !5082

cond.false261:                                    ; preds = %lor.lhs.false252
  %type262 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode263 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type262, i64 0, i32 6, !dbg !5082
  %bf.load264 = load i32, i32* %mode263, align 4, !dbg !5082
  %bf.lshr265 = lshr i32 %bf.load264, 16, !dbg !5082
  %bf.clear266 = and i32 %bf.lshr265, 255, !dbg !5082
  br label %cond.end267, !dbg !5082

cond.end267:                                      ; preds = %cond.false261, %cond.true259
  %cond268 = phi i32 [ %call260, %cond.true259 ], [ %bf.clear266, %cond.false261 ], !dbg !5082
  %idxprom269 = zext i32 %cond268 to i64, !dbg !5082
  %arrayidx270 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom269, !dbg !5082
  %36 = load i8, i8* %arrayidx270, align 1, !dbg !5082
  %cmp272 = icmp eq i8 %36, 17, !dbg !5082
  br i1 %cmp272, label %land.lhs.true274, label %land.lhs.true539, !dbg !5082

land.lhs.true274:                                 ; preds = %cond.end267, %cond.end245, %cond.end223, %cond.end204
  %bf.load276 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast27857 = and i64 %bf.load276, 65535, !dbg !5082
  %cmp279 = icmp eq i64 %bf.cast27857, 14, !dbg !5082
  br i1 %cmp279, label %cond.true281, label %cond.false283, !dbg !5082

cond.true281:                                     ; preds = %land.lhs.true274
  %call282 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end289, !dbg !5082

cond.false283:                                    ; preds = %land.lhs.true274
  %type284 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode285 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type284, i64 0, i32 6, !dbg !5082
  %bf.load286 = load i32, i32* %mode285, align 4, !dbg !5082
  %bf.lshr287 = lshr i32 %bf.load286, 16, !dbg !5082
  %bf.clear288 = and i32 %bf.lshr287, 255, !dbg !5082
  br label %cond.end289, !dbg !5082

cond.end289:                                      ; preds = %cond.false283, %cond.true281
  %cond290 = phi i32 [ %call282, %cond.true281 ], [ %bf.clear288, %cond.false283 ], !dbg !5082
  %idxprom291 = zext i32 %cond290 to i64, !dbg !5082
  %arrayidx292 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom291, !dbg !5082
  %37 = load i8, i8* %arrayidx292, align 1, !dbg !5082
  %cmp294 = icmp eq i8 %37, 8, !dbg !5082
  br i1 %cmp294, label %cond.true318, label %lor.lhs.false296, !dbg !5082

lor.lhs.false296:                                 ; preds = %cond.end289
  %bf.load298 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast30058 = and i64 %bf.load298, 65535, !dbg !5082
  %cmp301 = icmp eq i64 %bf.cast30058, 14, !dbg !5082
  br i1 %cmp301, label %cond.true303, label %cond.false305, !dbg !5082

cond.true303:                                     ; preds = %lor.lhs.false296
  %call304 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end311, !dbg !5082

cond.false305:                                    ; preds = %lor.lhs.false296
  %type306 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode307 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type306, i64 0, i32 6, !dbg !5082
  %bf.load308 = load i32, i32* %mode307, align 4, !dbg !5082
  %bf.lshr309 = lshr i32 %bf.load308, 16, !dbg !5082
  %bf.clear310 = and i32 %bf.lshr309, 255, !dbg !5082
  br label %cond.end311, !dbg !5082

cond.end311:                                      ; preds = %cond.false305, %cond.true303
  %cond312 = phi i32 [ %call304, %cond.true303 ], [ %bf.clear310, %cond.false305 ], !dbg !5082
  %idxprom313 = zext i32 %cond312 to i64, !dbg !5082
  %arrayidx314 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom313, !dbg !5082
  %38 = load i8, i8* %arrayidx314, align 1, !dbg !5082
  %cmp316 = icmp eq i8 %38, 9, !dbg !5082
  br i1 %cmp316, label %cond.true318, label %cond.false335, !dbg !5082

cond.true318:                                     ; preds = %cond.end311, %cond.end289
  %bf.load320 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast32267 = and i64 %bf.load320, 65535, !dbg !5082
  %cmp323 = icmp eq i64 %bf.cast32267, 14, !dbg !5082
  br i1 %cmp323, label %cond.true325, label %cond.false327, !dbg !5082

cond.true325:                                     ; preds = %cond.true318
  %call326 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end355, !dbg !5082

cond.false327:                                    ; preds = %cond.true318
  %type328 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode329 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type328, i64 0, i32 6, !dbg !5082
  %bf.load330 = load i32, i32* %mode329, align 4, !dbg !5082
  %bf.lshr331 = lshr i32 %bf.load330, 16, !dbg !5082
  %bf.clear332 = and i32 %bf.lshr331, 255, !dbg !5082
  br label %cond.end355, !dbg !5082

cond.false335:                                    ; preds = %cond.end311
  %bf.load337 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast33959 = and i64 %bf.load337, 65535, !dbg !5082
  %cmp340 = icmp eq i64 %bf.cast33959, 14, !dbg !5082
  br i1 %cmp340, label %cond.true342, label %cond.false344, !dbg !5082

cond.true342:                                     ; preds = %cond.false335
  %call343 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end350, !dbg !5082

cond.false344:                                    ; preds = %cond.false335
  %type345 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode346 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type345, i64 0, i32 6, !dbg !5082
  %bf.load347 = load i32, i32* %mode346, align 4, !dbg !5082
  %bf.lshr348 = lshr i32 %bf.load347, 16, !dbg !5082
  %bf.clear349 = and i32 %bf.lshr348, 255, !dbg !5082
  br label %cond.end350, !dbg !5082

cond.end350:                                      ; preds = %cond.false344, %cond.true342
  %cond351 = phi i32 [ %call343, %cond.true342 ], [ %bf.clear349, %cond.false344 ], !dbg !5082
  %idxprom352 = zext i32 %cond351 to i64, !dbg !5082
  %arrayidx353 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom352, !dbg !5082
  %39 = load i8, i8* %arrayidx353, align 1, !dbg !5082
  %conv354 = zext i8 %39 to i32, !dbg !5082
  br label %cond.end355, !dbg !5082

cond.end355:                                      ; preds = %cond.true325, %cond.false327, %cond.end350
  %cond356 = phi i32 [ %conv354, %cond.end350 ], [ %call326, %cond.true325 ], [ %bf.clear332, %cond.false327 ], !dbg !5082
  %idxprom357 = zext i32 %cond356 to i64, !dbg !5082
  %arrayidx358 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom357, !dbg !5082
  %40 = load i8, i8* %arrayidx358, align 1, !dbg !5082
  %cmp360 = icmp eq i8 %40, 9, !dbg !5082
  %bf.load364 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast36660 = and i64 %bf.load364, 65535, !dbg !5082
  %cmp367 = icmp eq i64 %bf.cast36660, 14, !dbg !5082
  br i1 %cmp360, label %cond.true362, label %cond.false447, !dbg !5082

cond.true362:                                     ; preds = %cond.end355
  br i1 %cmp367, label %cond.true369, label %cond.false371, !dbg !5082

cond.true369:                                     ; preds = %cond.true362
  %call370 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end377, !dbg !5082

cond.false371:                                    ; preds = %cond.true362
  %type372 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode373 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type372, i64 0, i32 6, !dbg !5082
  %bf.load374 = load i32, i32* %mode373, align 4, !dbg !5082
  %bf.lshr375 = lshr i32 %bf.load374, 16, !dbg !5082
  %bf.clear376 = and i32 %bf.lshr375, 255, !dbg !5082
  br label %cond.end377, !dbg !5082

cond.end377:                                      ; preds = %cond.false371, %cond.true369
  %cond378 = phi i32 [ %call370, %cond.true369 ], [ %bf.clear376, %cond.false371 ], !dbg !5082
  %idxprom379 = zext i32 %cond378 to i64, !dbg !5082
  %arrayidx380 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom379, !dbg !5082
  %41 = load i8, i8* %arrayidx380, align 1, !dbg !5082
  %cmp382 = icmp eq i8 %41, 8, !dbg !5082
  br i1 %cmp382, label %cond.true406, label %lor.lhs.false384, !dbg !5082

lor.lhs.false384:                                 ; preds = %cond.end377
  %bf.load386 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast38864 = and i64 %bf.load386, 65535, !dbg !5082
  %cmp389 = icmp eq i64 %bf.cast38864, 14, !dbg !5082
  br i1 %cmp389, label %cond.true391, label %cond.false393, !dbg !5082

cond.true391:                                     ; preds = %lor.lhs.false384
  %call392 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end399, !dbg !5082

cond.false393:                                    ; preds = %lor.lhs.false384
  %type394 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode395 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type394, i64 0, i32 6, !dbg !5082
  %bf.load396 = load i32, i32* %mode395, align 4, !dbg !5082
  %bf.lshr397 = lshr i32 %bf.load396, 16, !dbg !5082
  %bf.clear398 = and i32 %bf.lshr397, 255, !dbg !5082
  br label %cond.end399, !dbg !5082

cond.end399:                                      ; preds = %cond.false393, %cond.true391
  %cond400 = phi i32 [ %call392, %cond.true391 ], [ %bf.clear398, %cond.false393 ], !dbg !5082
  %idxprom401 = zext i32 %cond400 to i64, !dbg !5082
  %arrayidx402 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom401, !dbg !5082
  %42 = load i8, i8* %arrayidx402, align 1, !dbg !5082
  %cmp404 = icmp eq i8 %42, 9, !dbg !5082
  br i1 %cmp404, label %cond.true406, label %cond.false423, !dbg !5082

cond.true406:                                     ; preds = %cond.end399, %cond.end377
  %bf.load408 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast41066 = and i64 %bf.load408, 65535, !dbg !5082
  %cmp411 = icmp eq i64 %bf.cast41066, 14, !dbg !5082
  br i1 %cmp411, label %cond.true413, label %cond.false415, !dbg !5082

cond.true413:                                     ; preds = %cond.true406
  %call414 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end443, !dbg !5082

cond.false415:                                    ; preds = %cond.true406
  %type416 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode417 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type416, i64 0, i32 6, !dbg !5082
  %bf.load418 = load i32, i32* %mode417, align 4, !dbg !5082
  %bf.lshr419 = lshr i32 %bf.load418, 16, !dbg !5082
  %bf.clear420 = and i32 %bf.lshr419, 255, !dbg !5082
  br label %cond.end443, !dbg !5082

cond.false423:                                    ; preds = %cond.end399
  %bf.load425 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast42765 = and i64 %bf.load425, 65535, !dbg !5082
  %cmp428 = icmp eq i64 %bf.cast42765, 14, !dbg !5082
  br i1 %cmp428, label %cond.true430, label %cond.false432, !dbg !5082

cond.true430:                                     ; preds = %cond.false423
  %call431 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end438, !dbg !5082

cond.false432:                                    ; preds = %cond.false423
  %type433 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode434 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type433, i64 0, i32 6, !dbg !5082
  %bf.load435 = load i32, i32* %mode434, align 4, !dbg !5082
  %bf.lshr436 = lshr i32 %bf.load435, 16, !dbg !5082
  %bf.clear437 = and i32 %bf.lshr436, 255, !dbg !5082
  br label %cond.end438, !dbg !5082

cond.end438:                                      ; preds = %cond.false432, %cond.true430
  %cond439 = phi i32 [ %call431, %cond.true430 ], [ %bf.clear437, %cond.false432 ], !dbg !5082
  %idxprom440 = zext i32 %cond439 to i64, !dbg !5082
  %arrayidx441 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom440, !dbg !5082
  %43 = load i8, i8* %arrayidx441, align 1, !dbg !5082
  %conv442 = zext i8 %43 to i32, !dbg !5082
  br label %cond.end443, !dbg !5082

cond.end443:                                      ; preds = %cond.true413, %cond.false415, %cond.end438
  %cond444 = phi i32 [ %conv442, %cond.end438 ], [ %call414, %cond.true413 ], [ %bf.clear420, %cond.false415 ], !dbg !5082
  br label %cond.end531, !dbg !5082

cond.false447:                                    ; preds = %cond.end355
  br i1 %cmp367, label %cond.true454, label %cond.false456, !dbg !5082

cond.true454:                                     ; preds = %cond.false447
  %call455 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end462, !dbg !5082

cond.false456:                                    ; preds = %cond.false447
  %type457 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode458 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type457, i64 0, i32 6, !dbg !5082
  %bf.load459 = load i32, i32* %mode458, align 4, !dbg !5082
  %bf.lshr460 = lshr i32 %bf.load459, 16, !dbg !5082
  %bf.clear461 = and i32 %bf.lshr460, 255, !dbg !5082
  br label %cond.end462, !dbg !5082

cond.end462:                                      ; preds = %cond.false456, %cond.true454
  %cond463 = phi i32 [ %call455, %cond.true454 ], [ %bf.clear461, %cond.false456 ], !dbg !5082
  %idxprom464 = zext i32 %cond463 to i64, !dbg !5082
  %arrayidx465 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom464, !dbg !5082
  %44 = load i8, i8* %arrayidx465, align 1, !dbg !5082
  %cmp467 = icmp eq i8 %44, 8, !dbg !5082
  br i1 %cmp467, label %cond.true491, label %lor.lhs.false469, !dbg !5082

lor.lhs.false469:                                 ; preds = %cond.end462
  %bf.load471 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast47361 = and i64 %bf.load471, 65535, !dbg !5082
  %cmp474 = icmp eq i64 %bf.cast47361, 14, !dbg !5082
  br i1 %cmp474, label %cond.true476, label %cond.false478, !dbg !5082

cond.true476:                                     ; preds = %lor.lhs.false469
  %call477 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end484, !dbg !5082

cond.false478:                                    ; preds = %lor.lhs.false469
  %type479 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode480 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type479, i64 0, i32 6, !dbg !5082
  %bf.load481 = load i32, i32* %mode480, align 4, !dbg !5082
  %bf.lshr482 = lshr i32 %bf.load481, 16, !dbg !5082
  %bf.clear483 = and i32 %bf.lshr482, 255, !dbg !5082
  br label %cond.end484, !dbg !5082

cond.end484:                                      ; preds = %cond.false478, %cond.true476
  %cond485 = phi i32 [ %call477, %cond.true476 ], [ %bf.clear483, %cond.false478 ], !dbg !5082
  %idxprom486 = zext i32 %cond485 to i64, !dbg !5082
  %arrayidx487 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom486, !dbg !5082
  %45 = load i8, i8* %arrayidx487, align 1, !dbg !5082
  %cmp489 = icmp eq i8 %45, 9, !dbg !5082
  br i1 %cmp489, label %cond.true491, label %cond.false508, !dbg !5082

cond.true491:                                     ; preds = %cond.end484, %cond.end462
  %bf.load493 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast49563 = and i64 %bf.load493, 65535, !dbg !5082
  %cmp496 = icmp eq i64 %bf.cast49563, 14, !dbg !5082
  br i1 %cmp496, label %cond.true498, label %cond.false500, !dbg !5082

cond.true498:                                     ; preds = %cond.true491
  %call499 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end528, !dbg !5082

cond.false500:                                    ; preds = %cond.true491
  %type501 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode502 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type501, i64 0, i32 6, !dbg !5082
  %bf.load503 = load i32, i32* %mode502, align 4, !dbg !5082
  %bf.lshr504 = lshr i32 %bf.load503, 16, !dbg !5082
  %bf.clear505 = and i32 %bf.lshr504, 255, !dbg !5082
  br label %cond.end528, !dbg !5082

cond.false508:                                    ; preds = %cond.end484
  %bf.load510 = load i64, i64* %6, align 8, !dbg !5082
  %bf.cast51262 = and i64 %bf.load510, 65535, !dbg !5082
  %cmp513 = icmp eq i64 %bf.cast51262, 14, !dbg !5082
  br i1 %cmp513, label %cond.true515, label %cond.false517, !dbg !5082

cond.true515:                                     ; preds = %cond.false508
  %call516 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5082
  br label %cond.end523, !dbg !5082

cond.false517:                                    ; preds = %cond.false508
  %type518 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5082
  %mode519 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type518, i64 0, i32 6, !dbg !5082
  %bf.load520 = load i32, i32* %mode519, align 4, !dbg !5082
  %bf.lshr521 = lshr i32 %bf.load520, 16, !dbg !5082
  %bf.clear522 = and i32 %bf.lshr521, 255, !dbg !5082
  br label %cond.end523, !dbg !5082

cond.end523:                                      ; preds = %cond.false517, %cond.true515
  %cond524 = phi i32 [ %call516, %cond.true515 ], [ %bf.clear522, %cond.false517 ], !dbg !5082
  %idxprom525 = zext i32 %cond524 to i64, !dbg !5082
  %arrayidx526 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom525, !dbg !5082
  %46 = load i8, i8* %arrayidx526, align 1, !dbg !5082
  %conv527 = zext i8 %46 to i32, !dbg !5082
  br label %cond.end528, !dbg !5082

cond.end528:                                      ; preds = %cond.true498, %cond.false500, %cond.end523
  %cond529 = phi i32 [ %conv527, %cond.end523 ], [ %call499, %cond.true498 ], [ %bf.clear505, %cond.false500 ], !dbg !5082
  br label %cond.end531, !dbg !5082

cond.end531:                                      ; preds = %cond.end528, %cond.end443
  %cond532.in = phi i32 [ %cond444, %cond.end443 ], [ %cond529, %cond.end528 ]
  %cond532 = add i32 %cond532.in, -38, !dbg !5082
  %idxprom533 = zext i32 %cond532 to i64, !dbg !5082
  %arrayidx534 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom533, !dbg !5082
  %47 = load %struct.real_format*, %struct.real_format** %arrayidx534, align 8, !dbg !5082
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %47, i64 0, i32 11, !dbg !5082
  %48 = load i8, i8* %has_nans, align 2, !dbg !5082
  %tobool536 = icmp eq i8 %48, 0, !dbg !5082
  %49 = load i32, i32* @flag_finite_math_only, align 4, !dbg !5082
  %tobool538 = icmp ne i32 %49, 0, !dbg !5082
  %or.cond = or i1 %tobool536, %tobool538, !dbg !5082
  br i1 %or.cond, label %land.lhs.true539, label %if.else925, !dbg !5082

land.lhs.true539:                                 ; preds = %cond.end531, %cond.end267
  %bf.load541 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast54342 = and i64 %bf.load541, 65535, !dbg !5083
  %cmp544 = icmp eq i64 %bf.cast54342, 14, !dbg !5083
  br i1 %cmp544, label %cond.true546, label %cond.false548, !dbg !5083

cond.true546:                                     ; preds = %land.lhs.true539
  %call547 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end554, !dbg !5083

cond.false548:                                    ; preds = %land.lhs.true539
  %type549 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode550 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type549, i64 0, i32 6, !dbg !5083
  %bf.load551 = load i32, i32* %mode550, align 4, !dbg !5083
  %bf.lshr552 = lshr i32 %bf.load551, 16, !dbg !5083
  %bf.clear553 = and i32 %bf.lshr552, 255, !dbg !5083
  br label %cond.end554, !dbg !5083

cond.end554:                                      ; preds = %cond.false548, %cond.true546
  %cond555 = phi i32 [ %call547, %cond.true546 ], [ %bf.clear553, %cond.false548 ], !dbg !5083
  %idxprom556 = zext i32 %cond555 to i64, !dbg !5083
  %arrayidx557 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom556, !dbg !5083
  %50 = load i8, i8* %arrayidx557, align 1, !dbg !5083
  %cmp559 = icmp eq i8 %50, 8, !dbg !5083
  br i1 %cmp559, label %land.lhs.true627, label %lor.lhs.false561, !dbg !5083

lor.lhs.false561:                                 ; preds = %cond.end554
  %bf.load563 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast56543 = and i64 %bf.load563, 65535, !dbg !5083
  %cmp566 = icmp eq i64 %bf.cast56543, 14, !dbg !5083
  br i1 %cmp566, label %cond.true568, label %cond.false570, !dbg !5083

cond.true568:                                     ; preds = %lor.lhs.false561
  %call569 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end576, !dbg !5083

cond.false570:                                    ; preds = %lor.lhs.false561
  %type571 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode572 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type571, i64 0, i32 6, !dbg !5083
  %bf.load573 = load i32, i32* %mode572, align 4, !dbg !5083
  %bf.lshr574 = lshr i32 %bf.load573, 16, !dbg !5083
  %bf.clear575 = and i32 %bf.lshr574, 255, !dbg !5083
  br label %cond.end576, !dbg !5083

cond.end576:                                      ; preds = %cond.false570, %cond.true568
  %cond577 = phi i32 [ %call569, %cond.true568 ], [ %bf.clear575, %cond.false570 ], !dbg !5083
  %idxprom578 = zext i32 %cond577 to i64, !dbg !5083
  %arrayidx579 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom578, !dbg !5083
  %51 = load i8, i8* %arrayidx579, align 1, !dbg !5083
  %cmp581 = icmp eq i8 %51, 9, !dbg !5083
  br i1 %cmp581, label %land.lhs.true627, label %lor.lhs.false583, !dbg !5083

lor.lhs.false583:                                 ; preds = %cond.end576
  %bf.load585 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast58744 = and i64 %bf.load585, 65535, !dbg !5083
  %cmp588 = icmp eq i64 %bf.cast58744, 14, !dbg !5083
  br i1 %cmp588, label %cond.true590, label %cond.false592, !dbg !5083

cond.true590:                                     ; preds = %lor.lhs.false583
  %call591 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end598, !dbg !5083

cond.false592:                                    ; preds = %lor.lhs.false583
  %type593 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode594 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type593, i64 0, i32 6, !dbg !5083
  %bf.load595 = load i32, i32* %mode594, align 4, !dbg !5083
  %bf.lshr596 = lshr i32 %bf.load595, 16, !dbg !5083
  %bf.clear597 = and i32 %bf.lshr596, 255, !dbg !5083
  br label %cond.end598, !dbg !5083

cond.end598:                                      ; preds = %cond.false592, %cond.true590
  %cond599 = phi i32 [ %call591, %cond.true590 ], [ %bf.clear597, %cond.false592 ], !dbg !5083
  %idxprom600 = zext i32 %cond599 to i64, !dbg !5083
  %arrayidx601 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom600, !dbg !5083
  %52 = load i8, i8* %arrayidx601, align 1, !dbg !5083
  %cmp603 = icmp eq i8 %52, 11, !dbg !5083
  br i1 %cmp603, label %land.lhs.true627, label %lor.lhs.false605, !dbg !5083

lor.lhs.false605:                                 ; preds = %cond.end598
  %bf.load607 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast60945 = and i64 %bf.load607, 65535, !dbg !5083
  %cmp610 = icmp eq i64 %bf.cast60945, 14, !dbg !5083
  br i1 %cmp610, label %cond.true612, label %cond.false614, !dbg !5083

cond.true612:                                     ; preds = %lor.lhs.false605
  %call613 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end620, !dbg !5083

cond.false614:                                    ; preds = %lor.lhs.false605
  %type615 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode616 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type615, i64 0, i32 6, !dbg !5083
  %bf.load617 = load i32, i32* %mode616, align 4, !dbg !5083
  %bf.lshr618 = lshr i32 %bf.load617, 16, !dbg !5083
  %bf.clear619 = and i32 %bf.lshr618, 255, !dbg !5083
  br label %cond.end620, !dbg !5083

cond.end620:                                      ; preds = %cond.false614, %cond.true612
  %cond621 = phi i32 [ %call613, %cond.true612 ], [ %bf.clear619, %cond.false614 ], !dbg !5083
  %idxprom622 = zext i32 %cond621 to i64, !dbg !5083
  %arrayidx623 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom622, !dbg !5083
  %53 = load i8, i8* %arrayidx623, align 1, !dbg !5083
  %cmp625 = icmp eq i8 %53, 17, !dbg !5083
  br i1 %cmp625, label %land.lhs.true627, label %land.lhs.true892, !dbg !5083

land.lhs.true627:                                 ; preds = %cond.end620, %cond.end598, %cond.end576, %cond.end554
  %bf.load629 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast63146 = and i64 %bf.load629, 65535, !dbg !5083
  %cmp632 = icmp eq i64 %bf.cast63146, 14, !dbg !5083
  br i1 %cmp632, label %cond.true634, label %cond.false636, !dbg !5083

cond.true634:                                     ; preds = %land.lhs.true627
  %call635 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end642, !dbg !5083

cond.false636:                                    ; preds = %land.lhs.true627
  %type637 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode638 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type637, i64 0, i32 6, !dbg !5083
  %bf.load639 = load i32, i32* %mode638, align 4, !dbg !5083
  %bf.lshr640 = lshr i32 %bf.load639, 16, !dbg !5083
  %bf.clear641 = and i32 %bf.lshr640, 255, !dbg !5083
  br label %cond.end642, !dbg !5083

cond.end642:                                      ; preds = %cond.false636, %cond.true634
  %cond643 = phi i32 [ %call635, %cond.true634 ], [ %bf.clear641, %cond.false636 ], !dbg !5083
  %idxprom644 = zext i32 %cond643 to i64, !dbg !5083
  %arrayidx645 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom644, !dbg !5083
  %54 = load i8, i8* %arrayidx645, align 1, !dbg !5083
  %cmp647 = icmp eq i8 %54, 8, !dbg !5083
  br i1 %cmp647, label %cond.true671, label %lor.lhs.false649, !dbg !5083

lor.lhs.false649:                                 ; preds = %cond.end642
  %bf.load651 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast65347 = and i64 %bf.load651, 65535, !dbg !5083
  %cmp654 = icmp eq i64 %bf.cast65347, 14, !dbg !5083
  br i1 %cmp654, label %cond.true656, label %cond.false658, !dbg !5083

cond.true656:                                     ; preds = %lor.lhs.false649
  %call657 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end664, !dbg !5083

cond.false658:                                    ; preds = %lor.lhs.false649
  %type659 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode660 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type659, i64 0, i32 6, !dbg !5083
  %bf.load661 = load i32, i32* %mode660, align 4, !dbg !5083
  %bf.lshr662 = lshr i32 %bf.load661, 16, !dbg !5083
  %bf.clear663 = and i32 %bf.lshr662, 255, !dbg !5083
  br label %cond.end664, !dbg !5083

cond.end664:                                      ; preds = %cond.false658, %cond.true656
  %cond665 = phi i32 [ %call657, %cond.true656 ], [ %bf.clear663, %cond.false658 ], !dbg !5083
  %idxprom666 = zext i32 %cond665 to i64, !dbg !5083
  %arrayidx667 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom666, !dbg !5083
  %55 = load i8, i8* %arrayidx667, align 1, !dbg !5083
  %cmp669 = icmp eq i8 %55, 9, !dbg !5083
  br i1 %cmp669, label %cond.true671, label %cond.false688, !dbg !5083

cond.true671:                                     ; preds = %cond.end664, %cond.end642
  %bf.load673 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast67556 = and i64 %bf.load673, 65535, !dbg !5083
  %cmp676 = icmp eq i64 %bf.cast67556, 14, !dbg !5083
  br i1 %cmp676, label %cond.true678, label %cond.false680, !dbg !5083

cond.true678:                                     ; preds = %cond.true671
  %call679 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end708, !dbg !5083

cond.false680:                                    ; preds = %cond.true671
  %type681 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode682 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type681, i64 0, i32 6, !dbg !5083
  %bf.load683 = load i32, i32* %mode682, align 4, !dbg !5083
  %bf.lshr684 = lshr i32 %bf.load683, 16, !dbg !5083
  %bf.clear685 = and i32 %bf.lshr684, 255, !dbg !5083
  br label %cond.end708, !dbg !5083

cond.false688:                                    ; preds = %cond.end664
  %bf.load690 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast69248 = and i64 %bf.load690, 65535, !dbg !5083
  %cmp693 = icmp eq i64 %bf.cast69248, 14, !dbg !5083
  br i1 %cmp693, label %cond.true695, label %cond.false697, !dbg !5083

cond.true695:                                     ; preds = %cond.false688
  %call696 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end703, !dbg !5083

cond.false697:                                    ; preds = %cond.false688
  %type698 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode699 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type698, i64 0, i32 6, !dbg !5083
  %bf.load700 = load i32, i32* %mode699, align 4, !dbg !5083
  %bf.lshr701 = lshr i32 %bf.load700, 16, !dbg !5083
  %bf.clear702 = and i32 %bf.lshr701, 255, !dbg !5083
  br label %cond.end703, !dbg !5083

cond.end703:                                      ; preds = %cond.false697, %cond.true695
  %cond704 = phi i32 [ %call696, %cond.true695 ], [ %bf.clear702, %cond.false697 ], !dbg !5083
  %idxprom705 = zext i32 %cond704 to i64, !dbg !5083
  %arrayidx706 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom705, !dbg !5083
  %56 = load i8, i8* %arrayidx706, align 1, !dbg !5083
  %conv707 = zext i8 %56 to i32, !dbg !5083
  br label %cond.end708, !dbg !5083

cond.end708:                                      ; preds = %cond.true678, %cond.false680, %cond.end703
  %cond709 = phi i32 [ %conv707, %cond.end703 ], [ %call679, %cond.true678 ], [ %bf.clear685, %cond.false680 ], !dbg !5083
  %idxprom710 = zext i32 %cond709 to i64, !dbg !5083
  %arrayidx711 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom710, !dbg !5083
  %57 = load i8, i8* %arrayidx711, align 1, !dbg !5083
  %cmp713 = icmp eq i8 %57, 9, !dbg !5083
  %bf.load717 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast71949 = and i64 %bf.load717, 65535, !dbg !5083
  %cmp720 = icmp eq i64 %bf.cast71949, 14, !dbg !5083
  br i1 %cmp713, label %cond.true715, label %cond.false800, !dbg !5083

cond.true715:                                     ; preds = %cond.end708
  br i1 %cmp720, label %cond.true722, label %cond.false724, !dbg !5083

cond.true722:                                     ; preds = %cond.true715
  %call723 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end730, !dbg !5083

cond.false724:                                    ; preds = %cond.true715
  %type725 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode726 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type725, i64 0, i32 6, !dbg !5083
  %bf.load727 = load i32, i32* %mode726, align 4, !dbg !5083
  %bf.lshr728 = lshr i32 %bf.load727, 16, !dbg !5083
  %bf.clear729 = and i32 %bf.lshr728, 255, !dbg !5083
  br label %cond.end730, !dbg !5083

cond.end730:                                      ; preds = %cond.false724, %cond.true722
  %cond731 = phi i32 [ %call723, %cond.true722 ], [ %bf.clear729, %cond.false724 ], !dbg !5083
  %idxprom732 = zext i32 %cond731 to i64, !dbg !5083
  %arrayidx733 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom732, !dbg !5083
  %58 = load i8, i8* %arrayidx733, align 1, !dbg !5083
  %cmp735 = icmp eq i8 %58, 8, !dbg !5083
  br i1 %cmp735, label %cond.true759, label %lor.lhs.false737, !dbg !5083

lor.lhs.false737:                                 ; preds = %cond.end730
  %bf.load739 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast74153 = and i64 %bf.load739, 65535, !dbg !5083
  %cmp742 = icmp eq i64 %bf.cast74153, 14, !dbg !5083
  br i1 %cmp742, label %cond.true744, label %cond.false746, !dbg !5083

cond.true744:                                     ; preds = %lor.lhs.false737
  %call745 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end752, !dbg !5083

cond.false746:                                    ; preds = %lor.lhs.false737
  %type747 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode748 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type747, i64 0, i32 6, !dbg !5083
  %bf.load749 = load i32, i32* %mode748, align 4, !dbg !5083
  %bf.lshr750 = lshr i32 %bf.load749, 16, !dbg !5083
  %bf.clear751 = and i32 %bf.lshr750, 255, !dbg !5083
  br label %cond.end752, !dbg !5083

cond.end752:                                      ; preds = %cond.false746, %cond.true744
  %cond753 = phi i32 [ %call745, %cond.true744 ], [ %bf.clear751, %cond.false746 ], !dbg !5083
  %idxprom754 = zext i32 %cond753 to i64, !dbg !5083
  %arrayidx755 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom754, !dbg !5083
  %59 = load i8, i8* %arrayidx755, align 1, !dbg !5083
  %cmp757 = icmp eq i8 %59, 9, !dbg !5083
  br i1 %cmp757, label %cond.true759, label %cond.false776, !dbg !5083

cond.true759:                                     ; preds = %cond.end752, %cond.end730
  %bf.load761 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast76355 = and i64 %bf.load761, 65535, !dbg !5083
  %cmp764 = icmp eq i64 %bf.cast76355, 14, !dbg !5083
  br i1 %cmp764, label %cond.true766, label %cond.false768, !dbg !5083

cond.true766:                                     ; preds = %cond.true759
  %call767 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end796, !dbg !5083

cond.false768:                                    ; preds = %cond.true759
  %type769 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode770 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type769, i64 0, i32 6, !dbg !5083
  %bf.load771 = load i32, i32* %mode770, align 4, !dbg !5083
  %bf.lshr772 = lshr i32 %bf.load771, 16, !dbg !5083
  %bf.clear773 = and i32 %bf.lshr772, 255, !dbg !5083
  br label %cond.end796, !dbg !5083

cond.false776:                                    ; preds = %cond.end752
  %bf.load778 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast78054 = and i64 %bf.load778, 65535, !dbg !5083
  %cmp781 = icmp eq i64 %bf.cast78054, 14, !dbg !5083
  br i1 %cmp781, label %cond.true783, label %cond.false785, !dbg !5083

cond.true783:                                     ; preds = %cond.false776
  %call784 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end791, !dbg !5083

cond.false785:                                    ; preds = %cond.false776
  %type786 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode787 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type786, i64 0, i32 6, !dbg !5083
  %bf.load788 = load i32, i32* %mode787, align 4, !dbg !5083
  %bf.lshr789 = lshr i32 %bf.load788, 16, !dbg !5083
  %bf.clear790 = and i32 %bf.lshr789, 255, !dbg !5083
  br label %cond.end791, !dbg !5083

cond.end791:                                      ; preds = %cond.false785, %cond.true783
  %cond792 = phi i32 [ %call784, %cond.true783 ], [ %bf.clear790, %cond.false785 ], !dbg !5083
  %idxprom793 = zext i32 %cond792 to i64, !dbg !5083
  %arrayidx794 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom793, !dbg !5083
  %60 = load i8, i8* %arrayidx794, align 1, !dbg !5083
  %conv795 = zext i8 %60 to i32, !dbg !5083
  br label %cond.end796, !dbg !5083

cond.end796:                                      ; preds = %cond.true766, %cond.false768, %cond.end791
  %cond797 = phi i32 [ %conv795, %cond.end791 ], [ %call767, %cond.true766 ], [ %bf.clear773, %cond.false768 ], !dbg !5083
  br label %cond.end884, !dbg !5083

cond.false800:                                    ; preds = %cond.end708
  br i1 %cmp720, label %cond.true807, label %cond.false809, !dbg !5083

cond.true807:                                     ; preds = %cond.false800
  %call808 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end815, !dbg !5083

cond.false809:                                    ; preds = %cond.false800
  %type810 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode811 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type810, i64 0, i32 6, !dbg !5083
  %bf.load812 = load i32, i32* %mode811, align 4, !dbg !5083
  %bf.lshr813 = lshr i32 %bf.load812, 16, !dbg !5083
  %bf.clear814 = and i32 %bf.lshr813, 255, !dbg !5083
  br label %cond.end815, !dbg !5083

cond.end815:                                      ; preds = %cond.false809, %cond.true807
  %cond816 = phi i32 [ %call808, %cond.true807 ], [ %bf.clear814, %cond.false809 ], !dbg !5083
  %idxprom817 = zext i32 %cond816 to i64, !dbg !5083
  %arrayidx818 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom817, !dbg !5083
  %61 = load i8, i8* %arrayidx818, align 1, !dbg !5083
  %cmp820 = icmp eq i8 %61, 8, !dbg !5083
  br i1 %cmp820, label %cond.true844, label %lor.lhs.false822, !dbg !5083

lor.lhs.false822:                                 ; preds = %cond.end815
  %bf.load824 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast82650 = and i64 %bf.load824, 65535, !dbg !5083
  %cmp827 = icmp eq i64 %bf.cast82650, 14, !dbg !5083
  br i1 %cmp827, label %cond.true829, label %cond.false831, !dbg !5083

cond.true829:                                     ; preds = %lor.lhs.false822
  %call830 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end837, !dbg !5083

cond.false831:                                    ; preds = %lor.lhs.false822
  %type832 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode833 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type832, i64 0, i32 6, !dbg !5083
  %bf.load834 = load i32, i32* %mode833, align 4, !dbg !5083
  %bf.lshr835 = lshr i32 %bf.load834, 16, !dbg !5083
  %bf.clear836 = and i32 %bf.lshr835, 255, !dbg !5083
  br label %cond.end837, !dbg !5083

cond.end837:                                      ; preds = %cond.false831, %cond.true829
  %cond838 = phi i32 [ %call830, %cond.true829 ], [ %bf.clear836, %cond.false831 ], !dbg !5083
  %idxprom839 = zext i32 %cond838 to i64, !dbg !5083
  %arrayidx840 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom839, !dbg !5083
  %62 = load i8, i8* %arrayidx840, align 1, !dbg !5083
  %cmp842 = icmp eq i8 %62, 9, !dbg !5083
  br i1 %cmp842, label %cond.true844, label %cond.false861, !dbg !5083

cond.true844:                                     ; preds = %cond.end837, %cond.end815
  %bf.load846 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast84852 = and i64 %bf.load846, 65535, !dbg !5083
  %cmp849 = icmp eq i64 %bf.cast84852, 14, !dbg !5083
  br i1 %cmp849, label %cond.true851, label %cond.false853, !dbg !5083

cond.true851:                                     ; preds = %cond.true844
  %call852 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end881, !dbg !5083

cond.false853:                                    ; preds = %cond.true844
  %type854 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode855 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type854, i64 0, i32 6, !dbg !5083
  %bf.load856 = load i32, i32* %mode855, align 4, !dbg !5083
  %bf.lshr857 = lshr i32 %bf.load856, 16, !dbg !5083
  %bf.clear858 = and i32 %bf.lshr857, 255, !dbg !5083
  br label %cond.end881, !dbg !5083

cond.false861:                                    ; preds = %cond.end837
  %bf.load863 = load i64, i64* %6, align 8, !dbg !5083
  %bf.cast86551 = and i64 %bf.load863, 65535, !dbg !5083
  %cmp866 = icmp eq i64 %bf.cast86551, 14, !dbg !5083
  br i1 %cmp866, label %cond.true868, label %cond.false870, !dbg !5083

cond.true868:                                     ; preds = %cond.false861
  %call869 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5083
  br label %cond.end876, !dbg !5083

cond.false870:                                    ; preds = %cond.false861
  %type871 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5083
  %mode872 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type871, i64 0, i32 6, !dbg !5083
  %bf.load873 = load i32, i32* %mode872, align 4, !dbg !5083
  %bf.lshr874 = lshr i32 %bf.load873, 16, !dbg !5083
  %bf.clear875 = and i32 %bf.lshr874, 255, !dbg !5083
  br label %cond.end876, !dbg !5083

cond.end876:                                      ; preds = %cond.false870, %cond.true868
  %cond877 = phi i32 [ %call869, %cond.true868 ], [ %bf.clear875, %cond.false870 ], !dbg !5083
  %idxprom878 = zext i32 %cond877 to i64, !dbg !5083
  %arrayidx879 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom878, !dbg !5083
  %63 = load i8, i8* %arrayidx879, align 1, !dbg !5083
  %conv880 = zext i8 %63 to i32, !dbg !5083
  br label %cond.end881, !dbg !5083

cond.end881:                                      ; preds = %cond.true851, %cond.false853, %cond.end876
  %cond882 = phi i32 [ %conv880, %cond.end876 ], [ %call852, %cond.true851 ], [ %bf.clear858, %cond.false853 ], !dbg !5083
  br label %cond.end884, !dbg !5083

cond.end884:                                      ; preds = %cond.end881, %cond.end796
  %cond885.in = phi i32 [ %cond797, %cond.end796 ], [ %cond882, %cond.end881 ]
  %cond885 = add i32 %cond885.in, -38, !dbg !5083
  %idxprom886 = zext i32 %cond885 to i64, !dbg !5083
  %arrayidx887 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom886, !dbg !5083
  %64 = load %struct.real_format*, %struct.real_format** %arrayidx887, align 8, !dbg !5083
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %64, i64 0, i32 14, !dbg !5083
  %65 = load i8, i8* %has_signed_zero, align 1, !dbg !5083
  %tobool889 = icmp ne i8 %65, 0, !dbg !5083
  %66 = load i32, i32* @flag_signed_zeros, align 4, !dbg !5083
  %tobool891 = icmp ne i32 %66, 0, !dbg !5083
  %or.cond1 = and i1 %tobool889, %tobool891, !dbg !5083
  br i1 %or.cond1, label %if.else925, label %land.lhs.true892, !dbg !5083

land.lhs.true892:                                 ; preds = %cond.end884, %cond.end620
  %67 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5084
  %call894 = tail call i32 @real_zerop(%union.tree_node* %67) #6, !dbg !5085
  %tobool895 = icmp eq i32 %call894, 0, !dbg !5085
  br i1 %tobool895, label %if.else925, label %if.then896, !dbg !5086

if.then896:                                       ; preds = %land.lhs.true892, %sw.bb162
  %68 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5087
  %tobool897 = icmp eq %struct.VEC_operand_entry_t_heap* %68, null, !dbg !5087
  br i1 %tobool897, label %cond.end901, label %cond.true898, !dbg !5087

cond.true898:                                     ; preds = %if.then896
  %base899 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %68, i64 0, i32 0, !dbg !5087
  br label %cond.end901, !dbg !5087

cond.end901:                                      ; preds = %if.then896, %cond.true898
  %cond902 = phi %struct.VEC_operand_entry_t_base* [ %base899, %cond.true898 ], [ null, %if.then896 ], !dbg !5087
  %call903 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond902) #8, !dbg !5087
  %cmp904 = icmp eq i32 %call903, 1, !dbg !5090
  br i1 %cmp904, label %cleanup.cont, label %if.then906, !dbg !5091

if.then906:                                       ; preds = %cond.end901
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5092
  %tobool907 = icmp eq %struct._IO_FILE* %69, null, !dbg !5092
  br i1 %tobool907, label %if.end913, label %land.lhs.true908, !dbg !5095

land.lhs.true908:                                 ; preds = %if.then906
  %70 = load i32, i32* @dump_flags, align 4, !dbg !5096
  %and909 = and i32 %70, 8, !dbg !5097
  %tobool910 = icmp eq i32 %and909, 0, !dbg !5097
  br i1 %tobool910, label %if.end913, label %if.then911, !dbg !5098

if.then911:                                       ; preds = %land.lhs.true908
  %call912 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %69, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !5099
  br label %if.end913, !dbg !5099

if.end913:                                        ; preds = %land.lhs.true908, %if.then906, %if.then911
  %71 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5100
  %tobool914 = icmp eq %struct.VEC_operand_entry_t_heap* %71, null, !dbg !5100
  br i1 %tobool914, label %cond.end918, label %cond.true915, !dbg !5100

cond.true915:                                     ; preds = %if.end913
  %base916 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %71, i64 0, i32 0, !dbg !5100
  br label %cond.end918, !dbg !5100

cond.end918:                                      ; preds = %if.end913, %cond.true915
  %cond919 = phi %struct.VEC_operand_entry_t_base* [ %base916, %cond.true915 ], [ null, %if.end913 ], !dbg !5100
  %call920 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond919) #8, !dbg !5100
  %sub921 = add i32 %call920, -1, !dbg !5101
  %72 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5102
  %add922 = add i32 %72, %sub921, !dbg !5102
  store i32 %add922, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5102
  tail call fastcc void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %ops) #8, !dbg !5103
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5104
  %call923 = tail call fastcc %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %ops, %struct.operand_entry* %call) #8, !dbg !5105
  br label %cleanup.cont, !dbg !5106

if.else925:                                       ; preds = %land.lhs.true892, %cond.end884, %cond.end531, %land.lhs.true184, %lor.lhs.false178
  %73 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5107
  %call927 = tail call i32 @integer_onep(%union.tree_node* %73) #6, !dbg !5109
  %tobool928 = icmp eq i32 %call927, 0, !dbg !5109
  br i1 %tobool928, label %lor.lhs.false929, label %if.then1319, !dbg !5110

lor.lhs.false929:                                 ; preds = %if.else925
  %bf.load931 = load i64, i64* %6, align 8, !dbg !5111
  %bf.cast93318 = and i64 %bf.load931, 65535, !dbg !5111
  %cmp934 = icmp eq i64 %bf.cast93318, 9, !dbg !5111
  br i1 %cmp934, label %land.lhs.true959, label %lor.lhs.false936, !dbg !5111

lor.lhs.false936:                                 ; preds = %lor.lhs.false929
  %cmp941 = icmp eq i64 %bf.cast93318, 13, !dbg !5111
  br i1 %cmp941, label %land.lhs.true950, label %lor.lhs.false943, !dbg !5111

lor.lhs.false943:                                 ; preds = %lor.lhs.false936
  %cmp948 = icmp eq i64 %bf.cast93318, 14, !dbg !5111
  br i1 %cmp948, label %land.lhs.true950, label %cleanup.cont, !dbg !5111

land.lhs.true950:                                 ; preds = %lor.lhs.false943, %lor.lhs.false936
  %type952 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5111
  %74 = bitcast %union.tree_node** %type952 to i64**, !dbg !5111
  %75 = load i64*, i64** %74, align 8, !dbg !5111
  %bf.load954 = load i64, i64* %75, align 8, !dbg !5111
  %bf.cast95621 = and i64 %bf.load954, 65535, !dbg !5111
  %cmp957 = icmp eq i64 %bf.cast95621, 9, !dbg !5111
  br i1 %cmp957, label %land.lhs.true959, label %cleanup.cont, !dbg !5112

land.lhs.true959:                                 ; preds = %land.lhs.true950, %lor.lhs.false929
  %76 = load i32, i32* @flag_signaling_nans, align 4, !dbg !5113
  %tobool960 = icmp eq i32 %76, 0, !dbg !5113
  br i1 %tobool960, label %land.lhs.true1315, label %land.lhs.true961, !dbg !5113

land.lhs.true961:                                 ; preds = %land.lhs.true959
  %cmp966 = icmp eq i64 %bf.cast93318, 14, !dbg !5113
  br i1 %cmp966, label %cond.true968, label %cond.false970, !dbg !5113

cond.true968:                                     ; preds = %land.lhs.true961
  %call969 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end976, !dbg !5113

cond.false970:                                    ; preds = %land.lhs.true961
  %type971 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode972 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type971, i64 0, i32 6, !dbg !5113
  %bf.load973 = load i32, i32* %mode972, align 4, !dbg !5113
  %bf.lshr974 = lshr i32 %bf.load973, 16, !dbg !5113
  %bf.clear975 = and i32 %bf.lshr974, 255, !dbg !5113
  br label %cond.end976, !dbg !5113

cond.end976:                                      ; preds = %cond.false970, %cond.true968
  %cond977 = phi i32 [ %call969, %cond.true968 ], [ %bf.clear975, %cond.false970 ], !dbg !5113
  %idxprom978 = zext i32 %cond977 to i64, !dbg !5113
  %arrayidx979 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom978, !dbg !5113
  %77 = load i8, i8* %arrayidx979, align 1, !dbg !5113
  %cmp981 = icmp eq i8 %77, 8, !dbg !5113
  br i1 %cmp981, label %land.lhs.true1049, label %lor.lhs.false983, !dbg !5113

lor.lhs.false983:                                 ; preds = %cond.end976
  %bf.load985 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast98723 = and i64 %bf.load985, 65535, !dbg !5113
  %cmp988 = icmp eq i64 %bf.cast98723, 14, !dbg !5113
  br i1 %cmp988, label %cond.true990, label %cond.false992, !dbg !5113

cond.true990:                                     ; preds = %lor.lhs.false983
  %call991 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end998, !dbg !5113

cond.false992:                                    ; preds = %lor.lhs.false983
  %type993 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode994 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type993, i64 0, i32 6, !dbg !5113
  %bf.load995 = load i32, i32* %mode994, align 4, !dbg !5113
  %bf.lshr996 = lshr i32 %bf.load995, 16, !dbg !5113
  %bf.clear997 = and i32 %bf.lshr996, 255, !dbg !5113
  br label %cond.end998, !dbg !5113

cond.end998:                                      ; preds = %cond.false992, %cond.true990
  %cond999 = phi i32 [ %call991, %cond.true990 ], [ %bf.clear997, %cond.false992 ], !dbg !5113
  %idxprom1000 = zext i32 %cond999 to i64, !dbg !5113
  %arrayidx1001 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1000, !dbg !5113
  %78 = load i8, i8* %arrayidx1001, align 1, !dbg !5113
  %cmp1003 = icmp eq i8 %78, 9, !dbg !5113
  br i1 %cmp1003, label %land.lhs.true1049, label %lor.lhs.false1005, !dbg !5113

lor.lhs.false1005:                                ; preds = %cond.end998
  %bf.load1007 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast100924 = and i64 %bf.load1007, 65535, !dbg !5113
  %cmp1010 = icmp eq i64 %bf.cast100924, 14, !dbg !5113
  br i1 %cmp1010, label %cond.true1012, label %cond.false1014, !dbg !5113

cond.true1012:                                    ; preds = %lor.lhs.false1005
  %call1013 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1020, !dbg !5113

cond.false1014:                                   ; preds = %lor.lhs.false1005
  %type1015 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1016 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1015, i64 0, i32 6, !dbg !5113
  %bf.load1017 = load i32, i32* %mode1016, align 4, !dbg !5113
  %bf.lshr1018 = lshr i32 %bf.load1017, 16, !dbg !5113
  %bf.clear1019 = and i32 %bf.lshr1018, 255, !dbg !5113
  br label %cond.end1020, !dbg !5113

cond.end1020:                                     ; preds = %cond.false1014, %cond.true1012
  %cond1021 = phi i32 [ %call1013, %cond.true1012 ], [ %bf.clear1019, %cond.false1014 ], !dbg !5113
  %idxprom1022 = zext i32 %cond1021 to i64, !dbg !5113
  %arrayidx1023 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1022, !dbg !5113
  %79 = load i8, i8* %arrayidx1023, align 1, !dbg !5113
  %cmp1025 = icmp eq i8 %79, 11, !dbg !5113
  br i1 %cmp1025, label %land.lhs.true1049, label %lor.lhs.false1027, !dbg !5113

lor.lhs.false1027:                                ; preds = %cond.end1020
  %bf.load1029 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast103125 = and i64 %bf.load1029, 65535, !dbg !5113
  %cmp1032 = icmp eq i64 %bf.cast103125, 14, !dbg !5113
  br i1 %cmp1032, label %cond.true1034, label %cond.false1036, !dbg !5113

cond.true1034:                                    ; preds = %lor.lhs.false1027
  %call1035 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1042, !dbg !5113

cond.false1036:                                   ; preds = %lor.lhs.false1027
  %type1037 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1038 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1037, i64 0, i32 6, !dbg !5113
  %bf.load1039 = load i32, i32* %mode1038, align 4, !dbg !5113
  %bf.lshr1040 = lshr i32 %bf.load1039, 16, !dbg !5113
  %bf.clear1041 = and i32 %bf.lshr1040, 255, !dbg !5113
  br label %cond.end1042, !dbg !5113

cond.end1042:                                     ; preds = %cond.false1036, %cond.true1034
  %cond1043 = phi i32 [ %call1035, %cond.true1034 ], [ %bf.clear1041, %cond.false1036 ], !dbg !5113
  %idxprom1044 = zext i32 %cond1043 to i64, !dbg !5113
  %arrayidx1045 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1044, !dbg !5113
  %80 = load i8, i8* %arrayidx1045, align 1, !dbg !5113
  %cmp1047 = icmp eq i8 %80, 17, !dbg !5113
  br i1 %cmp1047, label %land.lhs.true1049, label %land.lhs.true1315, !dbg !5113

land.lhs.true1049:                                ; preds = %cond.end1042, %cond.end1020, %cond.end998, %cond.end976
  %bf.load1051 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast105326 = and i64 %bf.load1051, 65535, !dbg !5113
  %cmp1054 = icmp eq i64 %bf.cast105326, 14, !dbg !5113
  br i1 %cmp1054, label %cond.true1056, label %cond.false1058, !dbg !5113

cond.true1056:                                    ; preds = %land.lhs.true1049
  %call1057 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1064, !dbg !5113

cond.false1058:                                   ; preds = %land.lhs.true1049
  %type1059 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1060 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1059, i64 0, i32 6, !dbg !5113
  %bf.load1061 = load i32, i32* %mode1060, align 4, !dbg !5113
  %bf.lshr1062 = lshr i32 %bf.load1061, 16, !dbg !5113
  %bf.clear1063 = and i32 %bf.lshr1062, 255, !dbg !5113
  br label %cond.end1064, !dbg !5113

cond.end1064:                                     ; preds = %cond.false1058, %cond.true1056
  %cond1065 = phi i32 [ %call1057, %cond.true1056 ], [ %bf.clear1063, %cond.false1058 ], !dbg !5113
  %idxprom1066 = zext i32 %cond1065 to i64, !dbg !5113
  %arrayidx1067 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1066, !dbg !5113
  %81 = load i8, i8* %arrayidx1067, align 1, !dbg !5113
  %cmp1069 = icmp eq i8 %81, 8, !dbg !5113
  br i1 %cmp1069, label %cond.true1093, label %lor.lhs.false1071, !dbg !5113

lor.lhs.false1071:                                ; preds = %cond.end1064
  %bf.load1073 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast107527 = and i64 %bf.load1073, 65535, !dbg !5113
  %cmp1076 = icmp eq i64 %bf.cast107527, 14, !dbg !5113
  br i1 %cmp1076, label %cond.true1078, label %cond.false1080, !dbg !5113

cond.true1078:                                    ; preds = %lor.lhs.false1071
  %call1079 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1086, !dbg !5113

cond.false1080:                                   ; preds = %lor.lhs.false1071
  %type1081 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1082 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1081, i64 0, i32 6, !dbg !5113
  %bf.load1083 = load i32, i32* %mode1082, align 4, !dbg !5113
  %bf.lshr1084 = lshr i32 %bf.load1083, 16, !dbg !5113
  %bf.clear1085 = and i32 %bf.lshr1084, 255, !dbg !5113
  br label %cond.end1086, !dbg !5113

cond.end1086:                                     ; preds = %cond.false1080, %cond.true1078
  %cond1087 = phi i32 [ %call1079, %cond.true1078 ], [ %bf.clear1085, %cond.false1080 ], !dbg !5113
  %idxprom1088 = zext i32 %cond1087 to i64, !dbg !5113
  %arrayidx1089 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1088, !dbg !5113
  %82 = load i8, i8* %arrayidx1089, align 1, !dbg !5113
  %cmp1091 = icmp eq i8 %82, 9, !dbg !5113
  br i1 %cmp1091, label %cond.true1093, label %cond.false1110, !dbg !5113

cond.true1093:                                    ; preds = %cond.end1086, %cond.end1064
  %bf.load1095 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast109736 = and i64 %bf.load1095, 65535, !dbg !5113
  %cmp1098 = icmp eq i64 %bf.cast109736, 14, !dbg !5113
  br i1 %cmp1098, label %cond.true1100, label %cond.false1102, !dbg !5113

cond.true1100:                                    ; preds = %cond.true1093
  %call1101 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1130, !dbg !5113

cond.false1102:                                   ; preds = %cond.true1093
  %type1103 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1104 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1103, i64 0, i32 6, !dbg !5113
  %bf.load1105 = load i32, i32* %mode1104, align 4, !dbg !5113
  %bf.lshr1106 = lshr i32 %bf.load1105, 16, !dbg !5113
  %bf.clear1107 = and i32 %bf.lshr1106, 255, !dbg !5113
  br label %cond.end1130, !dbg !5113

cond.false1110:                                   ; preds = %cond.end1086
  %bf.load1112 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast111428 = and i64 %bf.load1112, 65535, !dbg !5113
  %cmp1115 = icmp eq i64 %bf.cast111428, 14, !dbg !5113
  br i1 %cmp1115, label %cond.true1117, label %cond.false1119, !dbg !5113

cond.true1117:                                    ; preds = %cond.false1110
  %call1118 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1125, !dbg !5113

cond.false1119:                                   ; preds = %cond.false1110
  %type1120 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1121 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1120, i64 0, i32 6, !dbg !5113
  %bf.load1122 = load i32, i32* %mode1121, align 4, !dbg !5113
  %bf.lshr1123 = lshr i32 %bf.load1122, 16, !dbg !5113
  %bf.clear1124 = and i32 %bf.lshr1123, 255, !dbg !5113
  br label %cond.end1125, !dbg !5113

cond.end1125:                                     ; preds = %cond.false1119, %cond.true1117
  %cond1126 = phi i32 [ %call1118, %cond.true1117 ], [ %bf.clear1124, %cond.false1119 ], !dbg !5113
  %idxprom1127 = zext i32 %cond1126 to i64, !dbg !5113
  %arrayidx1128 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1127, !dbg !5113
  %83 = load i8, i8* %arrayidx1128, align 1, !dbg !5113
  %conv1129 = zext i8 %83 to i32, !dbg !5113
  br label %cond.end1130, !dbg !5113

cond.end1130:                                     ; preds = %cond.true1100, %cond.false1102, %cond.end1125
  %cond1131 = phi i32 [ %conv1129, %cond.end1125 ], [ %call1101, %cond.true1100 ], [ %bf.clear1107, %cond.false1102 ], !dbg !5113
  %idxprom1132 = zext i32 %cond1131 to i64, !dbg !5113
  %arrayidx1133 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1132, !dbg !5113
  %84 = load i8, i8* %arrayidx1133, align 1, !dbg !5113
  %cmp1135 = icmp eq i8 %84, 9, !dbg !5113
  %bf.load1139 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast114129 = and i64 %bf.load1139, 65535, !dbg !5113
  %cmp1142 = icmp eq i64 %bf.cast114129, 14, !dbg !5113
  br i1 %cmp1135, label %cond.true1137, label %cond.false1222, !dbg !5113

cond.true1137:                                    ; preds = %cond.end1130
  br i1 %cmp1142, label %cond.true1144, label %cond.false1146, !dbg !5113

cond.true1144:                                    ; preds = %cond.true1137
  %call1145 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1152, !dbg !5113

cond.false1146:                                   ; preds = %cond.true1137
  %type1147 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1148 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1147, i64 0, i32 6, !dbg !5113
  %bf.load1149 = load i32, i32* %mode1148, align 4, !dbg !5113
  %bf.lshr1150 = lshr i32 %bf.load1149, 16, !dbg !5113
  %bf.clear1151 = and i32 %bf.lshr1150, 255, !dbg !5113
  br label %cond.end1152, !dbg !5113

cond.end1152:                                     ; preds = %cond.false1146, %cond.true1144
  %cond1153 = phi i32 [ %call1145, %cond.true1144 ], [ %bf.clear1151, %cond.false1146 ], !dbg !5113
  %idxprom1154 = zext i32 %cond1153 to i64, !dbg !5113
  %arrayidx1155 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1154, !dbg !5113
  %85 = load i8, i8* %arrayidx1155, align 1, !dbg !5113
  %cmp1157 = icmp eq i8 %85, 8, !dbg !5113
  br i1 %cmp1157, label %cond.true1181, label %lor.lhs.false1159, !dbg !5113

lor.lhs.false1159:                                ; preds = %cond.end1152
  %bf.load1161 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast116333 = and i64 %bf.load1161, 65535, !dbg !5113
  %cmp1164 = icmp eq i64 %bf.cast116333, 14, !dbg !5113
  br i1 %cmp1164, label %cond.true1166, label %cond.false1168, !dbg !5113

cond.true1166:                                    ; preds = %lor.lhs.false1159
  %call1167 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1174, !dbg !5113

cond.false1168:                                   ; preds = %lor.lhs.false1159
  %type1169 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1170 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1169, i64 0, i32 6, !dbg !5113
  %bf.load1171 = load i32, i32* %mode1170, align 4, !dbg !5113
  %bf.lshr1172 = lshr i32 %bf.load1171, 16, !dbg !5113
  %bf.clear1173 = and i32 %bf.lshr1172, 255, !dbg !5113
  br label %cond.end1174, !dbg !5113

cond.end1174:                                     ; preds = %cond.false1168, %cond.true1166
  %cond1175 = phi i32 [ %call1167, %cond.true1166 ], [ %bf.clear1173, %cond.false1168 ], !dbg !5113
  %idxprom1176 = zext i32 %cond1175 to i64, !dbg !5113
  %arrayidx1177 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1176, !dbg !5113
  %86 = load i8, i8* %arrayidx1177, align 1, !dbg !5113
  %cmp1179 = icmp eq i8 %86, 9, !dbg !5113
  br i1 %cmp1179, label %cond.true1181, label %cond.false1198, !dbg !5113

cond.true1181:                                    ; preds = %cond.end1174, %cond.end1152
  %bf.load1183 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast118535 = and i64 %bf.load1183, 65535, !dbg !5113
  %cmp1186 = icmp eq i64 %bf.cast118535, 14, !dbg !5113
  br i1 %cmp1186, label %cond.true1188, label %cond.false1190, !dbg !5113

cond.true1188:                                    ; preds = %cond.true1181
  %call1189 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1218, !dbg !5113

cond.false1190:                                   ; preds = %cond.true1181
  %type1191 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1192 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1191, i64 0, i32 6, !dbg !5113
  %bf.load1193 = load i32, i32* %mode1192, align 4, !dbg !5113
  %bf.lshr1194 = lshr i32 %bf.load1193, 16, !dbg !5113
  %bf.clear1195 = and i32 %bf.lshr1194, 255, !dbg !5113
  br label %cond.end1218, !dbg !5113

cond.false1198:                                   ; preds = %cond.end1174
  %bf.load1200 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast120234 = and i64 %bf.load1200, 65535, !dbg !5113
  %cmp1203 = icmp eq i64 %bf.cast120234, 14, !dbg !5113
  br i1 %cmp1203, label %cond.true1205, label %cond.false1207, !dbg !5113

cond.true1205:                                    ; preds = %cond.false1198
  %call1206 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1213, !dbg !5113

cond.false1207:                                   ; preds = %cond.false1198
  %type1208 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1209 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1208, i64 0, i32 6, !dbg !5113
  %bf.load1210 = load i32, i32* %mode1209, align 4, !dbg !5113
  %bf.lshr1211 = lshr i32 %bf.load1210, 16, !dbg !5113
  %bf.clear1212 = and i32 %bf.lshr1211, 255, !dbg !5113
  br label %cond.end1213, !dbg !5113

cond.end1213:                                     ; preds = %cond.false1207, %cond.true1205
  %cond1214 = phi i32 [ %call1206, %cond.true1205 ], [ %bf.clear1212, %cond.false1207 ], !dbg !5113
  %idxprom1215 = zext i32 %cond1214 to i64, !dbg !5113
  %arrayidx1216 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1215, !dbg !5113
  %87 = load i8, i8* %arrayidx1216, align 1, !dbg !5113
  %conv1217 = zext i8 %87 to i32, !dbg !5113
  br label %cond.end1218, !dbg !5113

cond.end1218:                                     ; preds = %cond.true1188, %cond.false1190, %cond.end1213
  %cond1219 = phi i32 [ %conv1217, %cond.end1213 ], [ %call1189, %cond.true1188 ], [ %bf.clear1195, %cond.false1190 ], !dbg !5113
  br label %cond.end1306, !dbg !5113

cond.false1222:                                   ; preds = %cond.end1130
  br i1 %cmp1142, label %cond.true1229, label %cond.false1231, !dbg !5113

cond.true1229:                                    ; preds = %cond.false1222
  %call1230 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1237, !dbg !5113

cond.false1231:                                   ; preds = %cond.false1222
  %type1232 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1233 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1232, i64 0, i32 6, !dbg !5113
  %bf.load1234 = load i32, i32* %mode1233, align 4, !dbg !5113
  %bf.lshr1235 = lshr i32 %bf.load1234, 16, !dbg !5113
  %bf.clear1236 = and i32 %bf.lshr1235, 255, !dbg !5113
  br label %cond.end1237, !dbg !5113

cond.end1237:                                     ; preds = %cond.false1231, %cond.true1229
  %cond1238 = phi i32 [ %call1230, %cond.true1229 ], [ %bf.clear1236, %cond.false1231 ], !dbg !5113
  %idxprom1239 = zext i32 %cond1238 to i64, !dbg !5113
  %arrayidx1240 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1239, !dbg !5113
  %88 = load i8, i8* %arrayidx1240, align 1, !dbg !5113
  %cmp1242 = icmp eq i8 %88, 8, !dbg !5113
  br i1 %cmp1242, label %cond.true1266, label %lor.lhs.false1244, !dbg !5113

lor.lhs.false1244:                                ; preds = %cond.end1237
  %bf.load1246 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast124830 = and i64 %bf.load1246, 65535, !dbg !5113
  %cmp1249 = icmp eq i64 %bf.cast124830, 14, !dbg !5113
  br i1 %cmp1249, label %cond.true1251, label %cond.false1253, !dbg !5113

cond.true1251:                                    ; preds = %lor.lhs.false1244
  %call1252 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1259, !dbg !5113

cond.false1253:                                   ; preds = %lor.lhs.false1244
  %type1254 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1255 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1254, i64 0, i32 6, !dbg !5113
  %bf.load1256 = load i32, i32* %mode1255, align 4, !dbg !5113
  %bf.lshr1257 = lshr i32 %bf.load1256, 16, !dbg !5113
  %bf.clear1258 = and i32 %bf.lshr1257, 255, !dbg !5113
  br label %cond.end1259, !dbg !5113

cond.end1259:                                     ; preds = %cond.false1253, %cond.true1251
  %cond1260 = phi i32 [ %call1252, %cond.true1251 ], [ %bf.clear1258, %cond.false1253 ], !dbg !5113
  %idxprom1261 = zext i32 %cond1260 to i64, !dbg !5113
  %arrayidx1262 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom1261, !dbg !5113
  %89 = load i8, i8* %arrayidx1262, align 1, !dbg !5113
  %cmp1264 = icmp eq i8 %89, 9, !dbg !5113
  br i1 %cmp1264, label %cond.true1266, label %cond.false1283, !dbg !5113

cond.true1266:                                    ; preds = %cond.end1259, %cond.end1237
  %bf.load1268 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast127032 = and i64 %bf.load1268, 65535, !dbg !5113
  %cmp1271 = icmp eq i64 %bf.cast127032, 14, !dbg !5113
  br i1 %cmp1271, label %cond.true1273, label %cond.false1275, !dbg !5113

cond.true1273:                                    ; preds = %cond.true1266
  %call1274 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1303, !dbg !5113

cond.false1275:                                   ; preds = %cond.true1266
  %type1276 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1277 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1276, i64 0, i32 6, !dbg !5113
  %bf.load1278 = load i32, i32* %mode1277, align 4, !dbg !5113
  %bf.lshr1279 = lshr i32 %bf.load1278, 16, !dbg !5113
  %bf.clear1280 = and i32 %bf.lshr1279, 255, !dbg !5113
  br label %cond.end1303, !dbg !5113

cond.false1283:                                   ; preds = %cond.end1259
  %bf.load1285 = load i64, i64* %6, align 8, !dbg !5113
  %bf.cast128731 = and i64 %bf.load1285, 65535, !dbg !5113
  %cmp1288 = icmp eq i64 %bf.cast128731, 14, !dbg !5113
  br i1 %cmp1288, label %cond.true1290, label %cond.false1292, !dbg !5113

cond.true1290:                                    ; preds = %cond.false1283
  %call1291 = tail call i32 @vector_type_mode(%union.tree_node* %3) #6, !dbg !5113
  br label %cond.end1298, !dbg !5113

cond.false1292:                                   ; preds = %cond.false1283
  %type1293 = bitcast %union.tree_node* %3 to %struct.tree_type*, !dbg !5113
  %mode1294 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1293, i64 0, i32 6, !dbg !5113
  %bf.load1295 = load i32, i32* %mode1294, align 4, !dbg !5113
  %bf.lshr1296 = lshr i32 %bf.load1295, 16, !dbg !5113
  %bf.clear1297 = and i32 %bf.lshr1296, 255, !dbg !5113
  br label %cond.end1298, !dbg !5113

cond.end1298:                                     ; preds = %cond.false1292, %cond.true1290
  %cond1299 = phi i32 [ %call1291, %cond.true1290 ], [ %bf.clear1297, %cond.false1292 ], !dbg !5113
  %idxprom1300 = zext i32 %cond1299 to i64, !dbg !5113
  %arrayidx1301 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom1300, !dbg !5113
  %90 = load i8, i8* %arrayidx1301, align 1, !dbg !5113
  %conv1302 = zext i8 %90 to i32, !dbg !5113
  br label %cond.end1303, !dbg !5113

cond.end1303:                                     ; preds = %cond.true1273, %cond.false1275, %cond.end1298
  %cond1304 = phi i32 [ %conv1302, %cond.end1298 ], [ %call1274, %cond.true1273 ], [ %bf.clear1280, %cond.false1275 ], !dbg !5113
  br label %cond.end1306, !dbg !5113

cond.end1306:                                     ; preds = %cond.end1303, %cond.end1218
  %cond1307.in = phi i32 [ %cond1219, %cond.end1218 ], [ %cond1304, %cond.end1303 ]
  %cond1307 = add i32 %cond1307.in, -38, !dbg !5113
  %idxprom1308 = zext i32 %cond1307 to i64, !dbg !5113
  %arrayidx1309 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom1308, !dbg !5113
  %91 = load %struct.real_format*, %struct.real_format** %arrayidx1309, align 8, !dbg !5113
  %has_nans1310 = getelementptr inbounds %struct.real_format, %struct.real_format* %91, i64 0, i32 11, !dbg !5113
  %92 = load i8, i8* %has_nans1310, align 2, !dbg !5113
  %tobool1312 = icmp eq i8 %92, 0, !dbg !5113
  %93 = load i32, i32* @flag_finite_math_only, align 4, !dbg !5113
  %tobool1314 = icmp ne i32 %93, 0, !dbg !5113
  %or.cond2 = or i1 %tobool1312, %tobool1314, !dbg !5113
  br i1 %or.cond2, label %land.lhs.true1315, label %cleanup.cont, !dbg !5113

land.lhs.true1315:                                ; preds = %land.lhs.true959, %cond.end1306, %cond.end1042
  %94 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5114
  %call1317 = tail call i32 @real_onep(%union.tree_node* %94) #6, !dbg !5115
  %tobool1318 = icmp eq i32 %call1317, 0, !dbg !5115
  br i1 %tobool1318, label %cleanup.cont, label %if.then1319, !dbg !5116

if.then1319:                                      ; preds = %land.lhs.true1315, %if.else925
  %95 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5117
  %tobool1320 = icmp eq %struct.VEC_operand_entry_t_heap* %95, null, !dbg !5117
  br i1 %tobool1320, label %cond.end1324, label %cond.true1321, !dbg !5117

cond.true1321:                                    ; preds = %if.then1319
  %base1322 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %95, i64 0, i32 0, !dbg !5117
  br label %cond.end1324, !dbg !5117

cond.end1324:                                     ; preds = %if.then1319, %cond.true1321
  %cond1325 = phi %struct.VEC_operand_entry_t_base* [ %base1322, %cond.true1321 ], [ null, %if.then1319 ], !dbg !5117
  %call1326 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond1325) #8, !dbg !5117
  %cmp1327 = icmp eq i32 %call1326, 1, !dbg !5120
  br i1 %cmp1327, label %cleanup.cont, label %if.then1329, !dbg !5121

if.then1329:                                      ; preds = %cond.end1324
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5122
  %tobool1330 = icmp eq %struct._IO_FILE* %96, null, !dbg !5122
  br i1 %tobool1330, label %if.end1336, label %land.lhs.true1331, !dbg !5125

land.lhs.true1331:                                ; preds = %if.then1329
  %97 = load i32, i32* @dump_flags, align 4, !dbg !5126
  %and1332 = and i32 %97, 8, !dbg !5127
  %tobool1333 = icmp eq i32 %and1332, 0, !dbg !5127
  br i1 %tobool1333, label %if.end1336, label %if.then1334, !dbg !5128

if.then1334:                                      ; preds = %land.lhs.true1331
  %call1335 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %96, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.20, i64 0, i64 0)) #6, !dbg !5129
  br label %if.end1336, !dbg !5129

if.end1336:                                       ; preds = %land.lhs.true1331, %if.then1329, %if.then1334
  %98 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5130
  %tobool1337 = icmp eq %struct.VEC_operand_entry_t_heap* %98, null, !dbg !5130
  br i1 %tobool1337, label %cond.end1341, label %cond.true1338, !dbg !5130

cond.true1338:                                    ; preds = %if.end1336
  %base1339 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %98, i64 0, i32 0, !dbg !5130
  br label %cond.end1341, !dbg !5130

cond.end1341:                                     ; preds = %if.end1336, %cond.true1338
  %cond1342 = phi %struct.VEC_operand_entry_t_base* [ %base1339, %cond.true1338 ], [ null, %if.end1336 ], !dbg !5130
  %call1343 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond1342) #8, !dbg !5130
  %99 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5131
  %inc1344 = add nsw i32 %99, 1, !dbg !5131
  store i32 %inc1344, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5131
  br label %cleanup.cont, !dbg !5132

sw.bb1348:                                        ; preds = %if.then, %if.then, %if.then
  %call1350 = tail call i32 @integer_zerop(%union.tree_node* %5) #6, !dbg !5133
  %tobool1351 = icmp eq i32 %call1350, 0, !dbg !5133
  br i1 %tobool1351, label %lor.lhs.false1352, label %if.then1395, !dbg !5135

lor.lhs.false1352:                                ; preds = %sw.bb1348
  %bf.load1354 = load i64, i64* %6, align 8, !dbg !5136
  %bf.cast135611 = and i64 %bf.load1354, 65535, !dbg !5136
  %cmp1357 = icmp eq i64 %bf.cast135611, 9, !dbg !5136
  br i1 %cmp1357, label %land.lhs.true1382, label %lor.lhs.false1359, !dbg !5136

lor.lhs.false1359:                                ; preds = %lor.lhs.false1352
  %cmp1364 = icmp eq i64 %bf.cast135611, 13, !dbg !5136
  br i1 %cmp1364, label %land.lhs.true1373, label %lor.lhs.false1366, !dbg !5136

lor.lhs.false1366:                                ; preds = %lor.lhs.false1359
  %cmp1371 = icmp eq i64 %bf.cast135611, 14, !dbg !5136
  br i1 %cmp1371, label %land.lhs.true1373, label %cleanup.cont, !dbg !5136

land.lhs.true1373:                                ; preds = %lor.lhs.false1366, %lor.lhs.false1359
  %type1375 = getelementptr inbounds %union.tree_node, %union.tree_node* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5136
  %100 = bitcast %union.tree_node** %type1375 to i64**, !dbg !5136
  %101 = load i64*, i64** %100, align 8, !dbg !5136
  %bf.load1377 = load i64, i64* %101, align 8, !dbg !5136
  %bf.cast137914 = and i64 %bf.load1377, 65535, !dbg !5136
  %cmp1380 = icmp eq i64 %bf.cast137914, 9, !dbg !5136
  br i1 %cmp1380, label %land.lhs.true1382, label %cleanup.cont, !dbg !5137

land.lhs.true1382:                                ; preds = %land.lhs.true1373, %lor.lhs.false1352
  %opcode.off = add i32 %opcode, -63, !dbg !5138
  %switch = icmp ult i32 %opcode.off, 2, !dbg !5138
  br i1 %switch, label %land.lhs.true1388, label %cleanup.cont, !dbg !5138

land.lhs.true1388:                                ; preds = %land.lhs.true1382
  %102 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5139
  %cmp1390 = icmp eq i32 %opcode, 64, !dbg !5140
  %conv1391 = zext i1 %cmp1390 to i32, !dbg !5140
  %call1392 = tail call zeroext i8 @fold_real_zero_addition_p(%union.tree_node* %3, %union.tree_node* %102, i32 %conv1391) #6, !dbg !5141
  %tobool1394 = icmp eq i8 %call1392, 0, !dbg !5141
  br i1 %tobool1394, label %cleanup.cont, label %if.then1395, !dbg !5142

if.then1395:                                      ; preds = %land.lhs.true1388, %sw.bb1348
  %103 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5143
  %tobool1396 = icmp eq %struct.VEC_operand_entry_t_heap* %103, null, !dbg !5143
  br i1 %tobool1396, label %cond.end1400, label %cond.true1397, !dbg !5143

cond.true1397:                                    ; preds = %if.then1395
  %base1398 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %103, i64 0, i32 0, !dbg !5143
  br label %cond.end1400, !dbg !5143

cond.end1400:                                     ; preds = %if.then1395, %cond.true1397
  %cond1401 = phi %struct.VEC_operand_entry_t_base* [ %base1398, %cond.true1397 ], [ null, %if.then1395 ], !dbg !5143
  %call1402 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond1401) #8, !dbg !5143
  %cmp1403 = icmp eq i32 %call1402, 1, !dbg !5146
  br i1 %cmp1403, label %cleanup.cont, label %if.then1405, !dbg !5147

if.then1405:                                      ; preds = %cond.end1400
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5148
  %tobool1406 = icmp eq %struct._IO_FILE* %104, null, !dbg !5148
  br i1 %tobool1406, label %if.end1412, label %land.lhs.true1407, !dbg !5151

land.lhs.true1407:                                ; preds = %if.then1405
  %105 = load i32, i32* @dump_flags, align 4, !dbg !5152
  %and1408 = and i32 %105, 8, !dbg !5153
  %tobool1409 = icmp eq i32 %and1408, 0, !dbg !5153
  br i1 %tobool1409, label %if.end1412, label %if.then1410, !dbg !5154

if.then1410:                                      ; preds = %land.lhs.true1407
  %call1411 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %104, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !5155
  br label %if.end1412, !dbg !5155

if.end1412:                                       ; preds = %land.lhs.true1407, %if.then1405, %if.then1410
  %106 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5156
  %tobool1413 = icmp eq %struct.VEC_operand_entry_t_heap* %106, null, !dbg !5156
  br i1 %tobool1413, label %cond.end1417, label %cond.true1414, !dbg !5156

cond.true1414:                                    ; preds = %if.end1412
  %base1415 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %106, i64 0, i32 0, !dbg !5156
  br label %cond.end1417, !dbg !5156

cond.end1417:                                     ; preds = %if.end1412, %cond.true1414
  %cond1418 = phi %struct.VEC_operand_entry_t_base* [ %base1415, %cond.true1414 ], [ null, %if.end1412 ], !dbg !5156
  %call1419 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_pop(%struct.VEC_operand_entry_t_base* %cond1418) #8, !dbg !5156
  %107 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5157
  %inc1420 = add nsw i32 %107, 1, !dbg !5157
  store i32 %inc1420, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5157
  br label %cleanup.cont, !dbg !5158

cleanup.cont:                                     ; preds = %cond.end49, %cond.end76, %if.else, %cond.end107, %cond.end139, %if.else130, %cond.end901, %cond.end1324, %land.lhs.true1315, %cond.end1400, %land.lhs.true1388, %land.lhs.true1382, %cond.end63, %cond.end123, %cond.end918, %cond.end1341, %cond.end1417, %cond.end92, %cond.end155, %lor.lhs.false943, %land.lhs.true950, %cond.end1306, %land.lhs.true1373, %lor.lhs.false1366, %if.then, %land.lhs.true33, %lor.lhs.false27, %cond.end
  ret void, !dbg !5159
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @eliminate_not_pairs(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, i32 %currindex, %struct.operand_entry* %curr) unnamed_addr #5 !dbg !5160 {
entry:
  %oe = alloca %struct.operand_entry*, align 8
  call void @llvm.dbg.value(metadata i32 %opcode, metadata !5164, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !5165, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata i32 %currindex, metadata !5166, metadata !DIExpression()), !dbg !5171
  call void @llvm.dbg.value(metadata %struct.operand_entry* %curr, metadata !5167, metadata !DIExpression()), !dbg !5171
  %0 = bitcast %struct.operand_entry** %oe to i8*, !dbg !5172
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5172
  switch i32 %opcode, label %cleanup [
    i32 87, label %lor.lhs.false
    i32 89, label %lor.lhs.false
  ], !dbg !5173

lor.lhs.false:                                    ; preds = %entry, %entry
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %curr, i64 0, i32 1, !dbg !5175
  %1 = bitcast %union.tree_node** %op to i64**, !dbg !5175
  %2 = load i64*, i64** %1, align 8, !dbg !5175
  %bf.load = load i64, i64* %2, align 8, !dbg !5175
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5176
  %cmp2 = icmp eq i64 %bf.cast1, 141, !dbg !5176
  br i1 %cmp2, label %if.end, label %cleanup, !dbg !5177

if.end:                                           ; preds = %lor.lhs.false
  %3 = bitcast i64* %2 to %union.tree_node*, !dbg !5177
  %call = tail call fastcc %union.tree_node* @get_unary_op(%union.tree_node* %3, i32 90) #8, !dbg !5178
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5168, metadata !DIExpression()), !dbg !5171
  %cmp4 = icmp eq %union.tree_node* %call, null, !dbg !5179
  br i1 %cmp4, label %cleanup, label %if.end6, !dbg !5181

if.end6:                                          ; preds = %if.end
  call void @llvm.dbg.value(metadata i32 %currindex, metadata !5169, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !5171
  %rank10 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %curr, i64 0, i32 0, !dbg !5182
  br label %for.cond, !dbg !5185

for.cond:                                         ; preds = %for.inc, %if.end6
  %i.0.in = phi i32 [ %currindex, %if.end6 ], [ %i.0, %for.inc ]
  %i.0 = add i32 %i.0.in, 1, !dbg !5186
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5169, metadata !DIExpression()), !dbg !5171
  %4 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5187
  %tobool = icmp eq %struct.VEC_operand_entry_t_heap* %4, null, !dbg !5187
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5187

cond.true:                                        ; preds = %for.cond
  %base7 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %4, i64 0, i32 0, !dbg !5187
  br label %cond.end, !dbg !5187

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base7, %cond.true ], [ null, %for.cond ], !dbg !5187
  call void @llvm.dbg.value(metadata %struct.operand_entry** %oe, metadata !5170, metadata !DIExpression(DW_OP_deref)), !dbg !5171
  %call8 = call fastcc i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond, i32 %i.0, %struct.operand_entry** nonnull %oe) #8, !dbg !5187
  %tobool9 = icmp eq i32 %call8, 0, !dbg !5187
  br i1 %tobool9, label %cleanup.loopexit, label %land.rhs, !dbg !5188

land.rhs:                                         ; preds = %cond.end
  %5 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5189
  call void @llvm.dbg.value(metadata %struct.operand_entry* %5, metadata !5170, metadata !DIExpression()), !dbg !5171
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %5, i64 0, i32 0, !dbg !5190
  %6 = load i32, i32* %rank, align 8, !dbg !5190
  %7 = load i32, i32* %rank10, align 8, !dbg !5191
  %sub = add i32 %7, -1, !dbg !5192
  %cmp11 = icmp ult i32 %6, %sub, !dbg !5193
  br i1 %cmp11, label %cleanup.loopexit, label %for.body, !dbg !5194

for.body:                                         ; preds = %land.rhs
  call void @llvm.dbg.value(metadata %struct.operand_entry* %5, metadata !5170, metadata !DIExpression()), !dbg !5171
  %op12 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %5, i64 0, i32 1, !dbg !5195
  %8 = load %union.tree_node*, %union.tree_node** %op12, align 8, !dbg !5195
  %cmp13 = icmp eq %union.tree_node* %8, %call, !dbg !5198
  br i1 %cmp13, label %if.then14, label %for.inc, !dbg !5199

if.then14:                                        ; preds = %for.body
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5200
  %tobool15 = icmp eq %struct._IO_FILE* %9, null, !dbg !5200
  br i1 %tobool15, label %if.end38, label %land.lhs.true16, !dbg !5203

land.lhs.true16:                                  ; preds = %if.then14
  %10 = load i32, i32* @dump_flags, align 4, !dbg !5204
  %and = and i32 %10, 8, !dbg !5205
  %tobool17 = icmp eq i32 %and, 0, !dbg !5205
  br i1 %tobool17, label %if.end38, label %if.then18, !dbg !5206

if.then18:                                        ; preds = %land.lhs.true16
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %9, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)) #6, !dbg !5207
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5209
  call void @print_generic_expr(%struct._IO_FILE* %11, %union.tree_node* nonnull %call, i32 0) #6, !dbg !5210
  switch i32 %opcode, label %if.end27 [
    i32 89, label %if.then21
    i32 87, label %if.then24
  ], !dbg !5211

if.then21:                                        ; preds = %if.then18
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5212
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0)) #6, !dbg !5214
  br label %if.end27, !dbg !5214

if.then24:                                        ; preds = %if.then18
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5215
  %call25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0)) #6, !dbg !5217
  br label %if.end27, !dbg !5217

if.end27:                                         ; preds = %if.then24, %if.then18, %if.then21
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5218
  %15 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5219
  call void @llvm.dbg.value(metadata %struct.operand_entry* %15, metadata !5170, metadata !DIExpression()), !dbg !5171
  %op28 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %15, i64 0, i32 1, !dbg !5220
  %16 = load %union.tree_node*, %union.tree_node** %op28, align 8, !dbg !5220
  call void @print_generic_expr(%struct._IO_FILE* %14, %union.tree_node* %16, i32 0) #6, !dbg !5221
  switch i32 %opcode, label %if.end59 [
    i32 89, label %if.then30
    i32 87, label %if.then34
  ], !dbg !5222

if.then30:                                        ; preds = %if.end27
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5223
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0)) #6, !dbg !5225
  br label %if.end38, !dbg !5225

if.then34:                                        ; preds = %if.end27
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5226
  %call35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i64 0, i64 0)) #6, !dbg !5228
  br label %if.end38, !dbg !5228

if.end38:                                         ; preds = %land.lhs.true16, %if.then14, %if.then30, %if.then34
  switch i32 %opcode, label %if.end59 [
    i32 89, label %if.then40
    i32 87, label %if.then46
  ], !dbg !5229

if.then40:                                        ; preds = %if.end38
  %19 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5230
  call void @llvm.dbg.value(metadata %struct.operand_entry* %19, metadata !5170, metadata !DIExpression()), !dbg !5171
  %op41 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %19, i64 0, i32 1, !dbg !5230
  %20 = bitcast %union.tree_node** %op41 to %struct.tree_common**, !dbg !5230
  %21 = load %struct.tree_common*, %struct.tree_common** %20, align 8, !dbg !5230
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %21, i64 0, i32 2, !dbg !5230
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5230
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !5230
  %call42 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %22, %union.tree_node* %23) #6, !dbg !5230
  %24 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5232
  call void @llvm.dbg.value(metadata %struct.operand_entry* %24, metadata !5170, metadata !DIExpression()), !dbg !5171
  %op43 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %24, i64 0, i32 1, !dbg !5233
  store %union.tree_node* %call42, %union.tree_node** %op43, align 8, !dbg !5234
  br label %if.end59, !dbg !5232

if.then46:                                        ; preds = %if.end38
  %25 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5235
  call void @llvm.dbg.value(metadata %struct.operand_entry* %25, metadata !5170, metadata !DIExpression()), !dbg !5171
  %op47 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %25, i64 0, i32 1, !dbg !5235
  %26 = bitcast %union.tree_node** %op47 to %struct.tree_common**, !dbg !5235
  %27 = load %struct.tree_common*, %struct.tree_common** %26, align 8, !dbg !5235
  %type49 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %27, i64 0, i32 2, !dbg !5235
  %28 = load %union.tree_node*, %union.tree_node** %type49, align 8, !dbg !5235
  call void @llvm.dbg.value(metadata %struct.operand_entry* %25, metadata !5170, metadata !DIExpression()), !dbg !5171
  %.cast = bitcast %union.tree_node* %28 to %struct.tree_type*, !dbg !5237
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %.cast, i64 0, i32 6, !dbg !5237
  %bf.load54 = load i32, i32* %precision, align 4, !dbg !5237
  %bf.clear55 = and i32 %bf.load54, 1023, !dbg !5237
  %call56 = call %union.tree_node* @build_low_bits_mask(%union.tree_node* %28, i32 %bf.clear55) #6, !dbg !5238
  %29 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5239
  call void @llvm.dbg.value(metadata %struct.operand_entry* %29, metadata !5170, metadata !DIExpression()), !dbg !5171
  %op57 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %29, i64 0, i32 1, !dbg !5240
  store %union.tree_node* %call56, %union.tree_node** %op57, align 8, !dbg !5241
  br label %if.end59, !dbg !5239

if.end59:                                         ; preds = %if.then46, %if.end38, %if.end27, %if.then40
  %30 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5242
  %tobool60 = icmp eq %struct.VEC_operand_entry_t_heap* %30, null, !dbg !5242
  br i1 %tobool60, label %cond.end64, label %cond.true61, !dbg !5242

cond.true61:                                      ; preds = %if.end59
  %base62 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %30, i64 0, i32 0, !dbg !5242
  br label %cond.end64, !dbg !5242

cond.end64:                                       ; preds = %if.end59, %cond.true61
  %cond65 = phi %struct.VEC_operand_entry_t_base* [ %base62, %cond.true61 ], [ null, %if.end59 ], !dbg !5242
  %call66 = call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond65) #8, !dbg !5242
  %sub67 = add i32 %call66, -1, !dbg !5243
  %31 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5244
  %add68 = add i32 %31, %sub67, !dbg !5244
  store i32 %add68, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5244
  call fastcc void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %ops) #8, !dbg !5245
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5246
  %32 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5247
  call void @llvm.dbg.value(metadata %struct.operand_entry* %32, metadata !5170, metadata !DIExpression()), !dbg !5171
  %call69 = call fastcc %struct.operand_entry** @VEC_operand_entry_t_heap_safe_push(%struct.VEC_operand_entry_t_heap** %ops, %struct.operand_entry* %32) #8, !dbg !5247
  br label %cleanup, !dbg !5248

for.inc:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5169, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !5171
  br label %for.cond, !dbg !5249, !llvm.loop !5250

cleanup.loopexit:                                 ; preds = %cond.end, %land.rhs
  br label %cleanup, !dbg !5252

cleanup:                                          ; preds = %cleanup.loopexit, %lor.lhs.false, %if.end, %entry, %cond.end64
  %retval.0 = phi i8 [ 1, %cond.end64 ], [ 0, %entry ], [ 0, %lor.lhs.false ], [ 0, %if.end ], [ 0, %cleanup.loopexit ], !dbg !5171
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5252
  ret i8 %retval.0, !dbg !5252
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @eliminate_duplicate_pair(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, i8* %all_done, i32 %i, %struct.operand_entry* %curr, %struct.operand_entry* %last) unnamed_addr #5 !dbg !5253 {
entry:
  call void @llvm.dbg.value(metadata i32 %opcode, metadata !5257, metadata !DIExpression()), !dbg !5263
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !5258, metadata !DIExpression()), !dbg !5263
  call void @llvm.dbg.value(metadata i8* %all_done, metadata !5259, metadata !DIExpression()), !dbg !5263
  call void @llvm.dbg.value(metadata i32 %i, metadata !5260, metadata !DIExpression()), !dbg !5263
  call void @llvm.dbg.value(metadata %struct.operand_entry* %curr, metadata !5261, metadata !DIExpression()), !dbg !5263
  call void @llvm.dbg.value(metadata %struct.operand_entry* %last, metadata !5262, metadata !DIExpression()), !dbg !5263
  %tobool = icmp eq %struct.operand_entry* %last, null, !dbg !5264
  br i1 %tobool, label %return, label %land.lhs.true, !dbg !5266

land.lhs.true:                                    ; preds = %entry
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %last, i64 0, i32 1, !dbg !5267
  %0 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5267
  %op1 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %curr, i64 0, i32 1, !dbg !5268
  %1 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5268
  %cmp = icmp eq %union.tree_node* %0, %1, !dbg !5269
  br i1 %cmp, label %if.then, label %return, !dbg !5270

if.then:                                          ; preds = %land.lhs.true
  switch i32 %opcode, label %return [
    i32 81, label %sw.bb
    i32 80, label %sw.bb
    i32 87, label %sw.bb
    i32 89, label %sw.bb
    i32 88, label %sw.bb13
  ], !dbg !5271

sw.bb:                                            ; preds = %if.then, %if.then, %if.then, %if.then
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5273
  %tobool2 = icmp eq %struct._IO_FILE* %2, null, !dbg !5273
  br i1 %tobool2, label %if.end, label %land.lhs.true3, !dbg !5276

land.lhs.true3:                                   ; preds = %sw.bb
  %3 = load i32, i32* @dump_flags, align 4, !dbg !5277
  %and = and i32 %3, 8, !dbg !5278
  %tobool4 = icmp eq i32 %and, 0, !dbg !5278
  br i1 %tobool4, label %if.end, label %if.then5, !dbg !5279

if.then5:                                         ; preds = %land.lhs.true3
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %2, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)) #6, !dbg !5280
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5282
  %5 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5283
  tail call void @print_generic_expr(%struct._IO_FILE* %4, %union.tree_node* %5, i32 0) #6, !dbg !5284
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5285
  %call7 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.27, i64 0, i64 0)) #6, !dbg !5286
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5287
  %8 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5288
  tail call void @print_generic_expr(%struct._IO_FILE* %7, %union.tree_node* %8, i32 0) #6, !dbg !5289
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5290
  %call9 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !5291
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5292
  %11 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5293
  tail call void @print_generic_stmt(%struct._IO_FILE* %10, %union.tree_node* %11, i32 0) #6, !dbg !5294
  br label %if.end, !dbg !5295

if.end:                                           ; preds = %land.lhs.true3, %sw.bb, %if.then5
  %12 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5296
  %tobool11 = icmp eq %struct.VEC_operand_entry_t_heap* %12, null, !dbg !5296
  br i1 %tobool11, label %cond.end, label %cond.true, !dbg !5296

cond.true:                                        ; preds = %if.end
  %base = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %12, i64 0, i32 0, !dbg !5296
  br label %cond.end, !dbg !5296

cond.end:                                         ; preds = %if.end, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base, %cond.true ], [ null, %if.end ], !dbg !5296
  %call12 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond, i32 %i) #8, !dbg !5296
  %13 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5297
  %inc = add nsw i32 %13, 1, !dbg !5297
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5297
  br label %return, !dbg !5298

sw.bb13:                                          ; preds = %if.then
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5299
  %tobool14 = icmp eq %struct._IO_FILE* %14, null, !dbg !5299
  br i1 %tobool14, label %if.end24, label %land.lhs.true15, !dbg !5301

land.lhs.true15:                                  ; preds = %sw.bb13
  %15 = load i32, i32* @dump_flags, align 4, !dbg !5302
  %and16 = and i32 %15, 8, !dbg !5303
  %tobool17 = icmp eq i32 %and16, 0, !dbg !5303
  br i1 %tobool17, label %if.end24, label %if.then18, !dbg !5304

if.then18:                                        ; preds = %land.lhs.true15
  %call19 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %14, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)) #6, !dbg !5305
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5307
  %17 = load %union.tree_node*, %union.tree_node** %op1, align 8, !dbg !5308
  tail call void @print_generic_expr(%struct._IO_FILE* %16, %union.tree_node* %17, i32 0) #6, !dbg !5309
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5310
  %call21 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.29, i64 0, i64 0)) #6, !dbg !5311
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5312
  %20 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5313
  tail call void @print_generic_expr(%struct._IO_FILE* %19, %union.tree_node* %20, i32 0) #6, !dbg !5314
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5315
  %call23 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.30, i64 0, i64 0)) #6, !dbg !5316
  br label %if.end24, !dbg !5317

if.end24:                                         ; preds = %land.lhs.true15, %sw.bb13, %if.then18
  %22 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5318
  %add = add nsw i32 %22, 2, !dbg !5318
  store i32 %add, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5318
  %23 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5319
  %tobool25 = icmp eq %struct.VEC_operand_entry_t_heap* %23, null, !dbg !5319
  br i1 %tobool25, label %cond.end29, label %cond.true26, !dbg !5319

cond.true26:                                      ; preds = %if.end24
  %base27 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %23, i64 0, i32 0, !dbg !5319
  br label %cond.end29, !dbg !5319

cond.end29:                                       ; preds = %if.end24, %cond.true26
  %cond30 = phi %struct.VEC_operand_entry_t_base* [ %base27, %cond.true26 ], [ null, %if.end24 ], !dbg !5319
  %call31 = tail call fastcc i32 @VEC_operand_entry_t_base_length(%struct.VEC_operand_entry_t_base* %cond30) #8, !dbg !5319
  %cmp32 = icmp eq i32 %call31, 2, !dbg !5321
  br i1 %cmp32, label %if.then33, label %if.else, !dbg !5322

if.then33:                                        ; preds = %cond.end29
  tail call fastcc void @VEC_operand_entry_t_heap_free(%struct.VEC_operand_entry_t_heap** %ops) #8, !dbg !5323
  store %struct.VEC_operand_entry_t_heap* null, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5325
  %24 = bitcast %union.tree_node** %op to %struct.tree_common**, !dbg !5326
  %25 = load %struct.tree_common*, %struct.tree_common** %24, align 8, !dbg !5326
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %25, i64 0, i32 2, !dbg !5326
  %26 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5326
  %27 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !5326
  %call35 = tail call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %26, %union.tree_node* %27) #6, !dbg !5326
  tail call fastcc void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %ops, %union.tree_node* %call35) #8, !dbg !5327
  store i8 1, i8* %all_done, align 1, !dbg !5328
  br label %return, !dbg !5329

if.else:                                          ; preds = %cond.end29
  %28 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5330
  %tobool36 = icmp eq %struct.VEC_operand_entry_t_heap* %28, null, !dbg !5330
  br i1 %tobool36, label %cond.end40, label %cond.true37, !dbg !5330

cond.true37:                                      ; preds = %if.else
  %base38 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %28, i64 0, i32 0, !dbg !5330
  br label %cond.end40, !dbg !5330

cond.end40:                                       ; preds = %if.else, %cond.true37
  %cond41 = phi %struct.VEC_operand_entry_t_base* [ %base38, %cond.true37 ], [ null, %if.else ], !dbg !5330
  %sub = add i32 %i, -1, !dbg !5330
  %call42 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond41, i32 %sub) #8, !dbg !5330
  %29 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5332
  %tobool43 = icmp eq %struct.VEC_operand_entry_t_heap* %29, null, !dbg !5332
  br i1 %tobool43, label %cond.end47, label %cond.true44, !dbg !5332

cond.true44:                                      ; preds = %cond.end40
  %base45 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %29, i64 0, i32 0, !dbg !5332
  br label %cond.end47, !dbg !5332

cond.end47:                                       ; preds = %cond.end40, %cond.true44
  %cond48 = phi %struct.VEC_operand_entry_t_base* [ %base45, %cond.true44 ], [ null, %cond.end40 ], !dbg !5332
  %call50 = tail call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond48, i32 %sub) #8, !dbg !5332
  br label %return

return:                                           ; preds = %entry, %land.lhs.true, %if.then, %if.then33, %cond.end47, %cond.end
  %retval.0 = phi i8 [ 1, %cond.end ], [ 1, %cond.end47 ], [ 1, %if.then33 ], [ 0, %if.then ], [ 0, %land.lhs.true ], [ 0, %entry ], !dbg !5263
  ret i8 %retval.0, !dbg !5333
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @eliminate_plus_minus_pair(i32 %opcode, %struct.VEC_operand_entry_t_heap** %ops, i32 %currindex, %struct.operand_entry* %curr) unnamed_addr #5 !dbg !5334 {
entry:
  %oe = alloca %struct.operand_entry*, align 8
  call void @llvm.dbg.value(metadata i32 %opcode, metadata !5336, metadata !DIExpression()), !dbg !5343
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_heap** %ops, metadata !5337, metadata !DIExpression()), !dbg !5343
  call void @llvm.dbg.value(metadata i32 %currindex, metadata !5338, metadata !DIExpression()), !dbg !5343
  call void @llvm.dbg.value(metadata %struct.operand_entry* %curr, metadata !5339, metadata !DIExpression()), !dbg !5343
  %0 = bitcast %struct.operand_entry** %oe to i8*, !dbg !5344
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5344
  %cmp = icmp eq i32 %opcode, 63, !dbg !5345
  br i1 %cmp, label %lor.lhs.false, label %cleanup, !dbg !5347

lor.lhs.false:                                    ; preds = %entry
  %op = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %curr, i64 0, i32 1, !dbg !5348
  %1 = bitcast %union.tree_node** %op to i64**, !dbg !5348
  %2 = load i64*, i64** %1, align 8, !dbg !5348
  %bf.load = load i64, i64* %2, align 8, !dbg !5348
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5349
  %cmp1 = icmp eq i64 %bf.cast1, 141, !dbg !5349
  br i1 %cmp1, label %if.end, label %cleanup, !dbg !5350

if.end:                                           ; preds = %lor.lhs.false
  %3 = bitcast i64* %2 to %union.tree_node*, !dbg !5350
  %call = tail call fastcc %union.tree_node* @get_unary_op(%union.tree_node* %3, i32 79) #8, !dbg !5351
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5340, metadata !DIExpression()), !dbg !5343
  %cmp3 = icmp eq %union.tree_node* %call, null, !dbg !5352
  br i1 %cmp3, label %cleanup, label %if.end5, !dbg !5354

if.end5:                                          ; preds = %if.end
  call void @llvm.dbg.value(metadata i32 %currindex, metadata !5341, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !5343
  %rank9 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %curr, i64 0, i32 0, !dbg !5355
  br label %for.cond, !dbg !5358

for.cond:                                         ; preds = %for.inc, %if.end5
  %i.0.in = phi i32 [ %currindex, %if.end5 ], [ %i.0, %for.inc ]
  %i.0 = add i32 %i.0.in, 1, !dbg !5359
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5341, metadata !DIExpression()), !dbg !5343
  %4 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5360
  %tobool = icmp eq %struct.VEC_operand_entry_t_heap* %4, null, !dbg !5360
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5360

cond.true:                                        ; preds = %for.cond
  %base6 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %4, i64 0, i32 0, !dbg !5360
  br label %cond.end, !dbg !5360

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_operand_entry_t_base* [ %base6, %cond.true ], [ null, %for.cond ], !dbg !5360
  call void @llvm.dbg.value(metadata %struct.operand_entry** %oe, metadata !5342, metadata !DIExpression(DW_OP_deref)), !dbg !5343
  %call7 = call fastcc i32 @VEC_operand_entry_t_base_iterate(%struct.VEC_operand_entry_t_base* %cond, i32 %i.0, %struct.operand_entry** nonnull %oe) #8, !dbg !5360
  %tobool8 = icmp eq i32 %call7, 0, !dbg !5360
  br i1 %tobool8, label %cleanup.loopexit, label %land.rhs, !dbg !5361

land.rhs:                                         ; preds = %cond.end
  %5 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5362
  call void @llvm.dbg.value(metadata %struct.operand_entry* %5, metadata !5342, metadata !DIExpression()), !dbg !5343
  %rank = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %5, i64 0, i32 0, !dbg !5363
  %6 = load i32, i32* %rank, align 8, !dbg !5363
  %7 = load i32, i32* %rank9, align 8, !dbg !5364
  %sub = add i32 %7, -1, !dbg !5365
  %cmp10 = icmp ult i32 %6, %sub, !dbg !5366
  br i1 %cmp10, label %cleanup.loopexit, label %for.body, !dbg !5367

for.body:                                         ; preds = %land.rhs
  call void @llvm.dbg.value(metadata %struct.operand_entry* %5, metadata !5342, metadata !DIExpression()), !dbg !5343
  %op11 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %5, i64 0, i32 1, !dbg !5368
  %8 = load %union.tree_node*, %union.tree_node** %op11, align 8, !dbg !5368
  %cmp12 = icmp eq %union.tree_node* %8, %call, !dbg !5371
  br i1 %cmp12, label %if.then13, label %for.inc, !dbg !5372

if.then13:                                        ; preds = %for.body
  %i.0.lcssa4 = phi i32 [ %i.0, %for.body ], !dbg !5359
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5373
  %tobool14 = icmp eq %struct._IO_FILE* %9, null, !dbg !5373
  br i1 %tobool14, label %if.end21, label %land.lhs.true, !dbg !5376

land.lhs.true:                                    ; preds = %if.then13
  %10 = load i32, i32* @dump_flags, align 4, !dbg !5377
  %and = and i32 %10, 8, !dbg !5378
  %tobool15 = icmp eq i32 %and, 0, !dbg !5378
  br i1 %tobool15, label %if.end21, label %if.then16, !dbg !5379

if.then16:                                        ; preds = %land.lhs.true
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* nonnull %9, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i64 0, i64 0)) #6, !dbg !5380
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5382
  call void @print_generic_expr(%struct._IO_FILE* %11, %union.tree_node* nonnull %call, i32 0) #6, !dbg !5383
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5384
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.31, i64 0, i64 0)) #6, !dbg !5385
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5386
  %14 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5387
  call void @llvm.dbg.value(metadata %struct.operand_entry* %14, metadata !5342, metadata !DIExpression()), !dbg !5343
  %op19 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %14, i64 0, i32 1, !dbg !5388
  %15 = load %union.tree_node*, %union.tree_node** %op19, align 8, !dbg !5388
  call void @print_generic_expr(%struct._IO_FILE* %13, %union.tree_node* %15, i32 0) #6, !dbg !5389
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5390
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0)) #6, !dbg !5391
  br label %if.end21, !dbg !5392

if.end21:                                         ; preds = %land.lhs.true, %if.then13, %if.then16
  %17 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5393
  %tobool22 = icmp eq %struct.VEC_operand_entry_t_heap* %17, null, !dbg !5393
  br i1 %tobool22, label %cond.end26, label %cond.true23, !dbg !5393

cond.true23:                                      ; preds = %if.end21
  %base24 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %17, i64 0, i32 0, !dbg !5393
  br label %cond.end26, !dbg !5393

cond.end26:                                       ; preds = %if.end21, %cond.true23
  %cond27 = phi %struct.VEC_operand_entry_t_base* [ %base24, %cond.true23 ], [ null, %if.end21 ], !dbg !5393
  %call28 = call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond27, i32 %i.0.lcssa4) #8, !dbg !5393
  %18 = load %struct.operand_entry*, %struct.operand_entry** %oe, align 8, !dbg !5394
  call void @llvm.dbg.value(metadata %struct.operand_entry* %18, metadata !5342, metadata !DIExpression()), !dbg !5343
  %op29 = getelementptr inbounds %struct.operand_entry, %struct.operand_entry* %18, i64 0, i32 1, !dbg !5394
  %19 = bitcast %union.tree_node** %op29 to %struct.tree_common**, !dbg !5394
  %20 = load %struct.tree_common*, %struct.tree_common** %19, align 8, !dbg !5394
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %20, i64 0, i32 2, !dbg !5394
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5394
  %22 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !5394
  %call30 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %21, %union.tree_node* %22) #6, !dbg !5394
  call fastcc void @add_to_ops_vec(%struct.VEC_operand_entry_t_heap** %ops, %union.tree_node* %call30) #8, !dbg !5395
  %23 = load %struct.VEC_operand_entry_t_heap*, %struct.VEC_operand_entry_t_heap** %ops, align 8, !dbg !5396
  %tobool31 = icmp eq %struct.VEC_operand_entry_t_heap* %23, null, !dbg !5396
  br i1 %tobool31, label %cond.end35, label %cond.true32, !dbg !5396

cond.true32:                                      ; preds = %cond.end26
  %base33 = getelementptr inbounds %struct.VEC_operand_entry_t_heap, %struct.VEC_operand_entry_t_heap* %23, i64 0, i32 0, !dbg !5396
  br label %cond.end35, !dbg !5396

cond.end35:                                       ; preds = %cond.end26, %cond.true32
  %cond36 = phi %struct.VEC_operand_entry_t_base* [ %base33, %cond.true32 ], [ null, %cond.end26 ], !dbg !5396
  %call37 = call fastcc %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %cond36, i32 %currindex) #8, !dbg !5396
  %24 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5397
  %inc = add nsw i32 %24, 1, !dbg !5397
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @reassociate_stats, i64 0, i32 2), align 4, !dbg !5397
  br label %cleanup, !dbg !5398

for.inc:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5341, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !5343
  br label %for.cond, !dbg !5399, !llvm.loop !5400

cleanup.loopexit:                                 ; preds = %cond.end, %land.rhs
  br label %cleanup, !dbg !5402

cleanup:                                          ; preds = %cleanup.loopexit, %lor.lhs.false, %entry, %if.end, %cond.end35
  %retval.0 = phi i8 [ 1, %cond.end35 ], [ 0, %lor.lhs.false ], [ 0, %entry ], [ 0, %if.end ], [ 0, %cleanup.loopexit ], !dbg !5343
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5402
  ret i8 %retval.0, !dbg !5402
}

declare dso_local i32 @integer_zerop(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @integer_all_onesp(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @real_zerop(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @integer_onep(%union.tree_node*) local_unnamed_addr #2

declare dso_local i32 @real_onep(%union.tree_node*) local_unnamed_addr #2

declare dso_local zeroext i8 @fold_real_zero_addition_p(%union.tree_node*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc %union.tree_node* @get_unary_op(%union.tree_node* %name, i32 %opcode) unnamed_addr #5 !dbg !5403 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %name, metadata !5407, metadata !DIExpression()), !dbg !5410
  call void @llvm.dbg.value(metadata i32 %opcode, metadata !5408, metadata !DIExpression()), !dbg !5410
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %name, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5411
  %0 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !5411
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %0, align 8, !dbg !5411
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %1, metadata !5409, metadata !DIExpression()), !dbg !5410
  %call = tail call fastcc zeroext i8 @is_gimple_assign(%union.gimple_statement_d* %1) #8, !dbg !5412
  %tobool = icmp eq i8 %call, 0, !dbg !5412
  br i1 %tobool, label %cleanup, label %if.end, !dbg !5414

if.end:                                           ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %1) #8, !dbg !5415
  %cmp = icmp eq i32 %call1, %opcode, !dbg !5417
  br i1 %cmp, label %if.then2, label %cleanup, !dbg !5418

if.then2:                                         ; preds = %if.end
  %call3 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %1) #8, !dbg !5419
  br label %cleanup, !dbg !5420

cleanup:                                          ; preds = %entry, %if.end, %if.then2
  %retval.0 = phi %union.tree_node* [ %call3, %if.then2 ], [ null, %entry ], [ null, %if.end ], !dbg !5410
  ret %union.tree_node* %retval.0, !dbg !5421
}

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_low_bits_mask(%union.tree_node*, i32) local_unnamed_addr #2

declare dso_local void @print_generic_stmt(%struct._IO_FILE*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.operand_entry* @VEC_operand_entry_t_base_ordered_remove(%struct.VEC_operand_entry_t_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !5422 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_operand_entry_t_base* %vec_, metadata !5426, metadata !DIExpression()), !dbg !5430
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !5427, metadata !DIExpression()), !dbg !5430
  %idxprom = zext i32 %ix_ to i64, !dbg !5431
  %arrayidx = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !5431
  call void @llvm.dbg.value(metadata %struct.operand_entry** %arrayidx, metadata !5428, metadata !DIExpression()), !dbg !5430
  %0 = load %struct.operand_entry*, %struct.operand_entry** %arrayidx, align 8, !dbg !5431
  call void @llvm.dbg.value(metadata %struct.operand_entry* %0, metadata !5429, metadata !DIExpression()), !dbg !5430
  %1 = bitcast %struct.operand_entry** %arrayidx to i8*, !dbg !5431
  %add.ptr = getelementptr inbounds %struct.operand_entry*, %struct.operand_entry** %arrayidx, i64 1, !dbg !5431
  %2 = bitcast %struct.operand_entry** %add.ptr to i8*, !dbg !5431
  %num1 = getelementptr inbounds %struct.VEC_operand_entry_t_base, %struct.VEC_operand_entry_t_base* %vec_, i64 0, i32 0, !dbg !5431
  %3 = load i32, i32* %num1, align 8, !dbg !5431
  %dec = add i32 %3, -1, !dbg !5431
  store i32 %dec, i32* %num1, align 8, !dbg !5431
  %sub = sub i32 %dec, %ix_, !dbg !5431
  %conv2 = zext i32 %sub to i64, !dbg !5431
  %mul = shl nuw nsw i64 %conv2, 3, !dbg !5431
  %call = tail call i8* @memmove(i8* nonnull %1, i8* nonnull %2, i64 %mul) #6, !dbg !5431
  ret %struct.operand_entry* %0, !dbg !5431
}

declare dso_local i8* @memmove(i8*, i8*, i64) local_unnamed_addr #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) local_unnamed_addr #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) unnamed_addr #0 !dbg !5432 {
entry:
  call void @llvm.dbg.value(metadata %struct.simple_bitmap_def* %map, metadata !5436, metadata !DIExpression()), !dbg !5441
  call void @llvm.dbg.value(metadata i32 %bitno, metadata !5437, metadata !DIExpression()), !dbg !5441
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %map, i64 0, i32 0, !dbg !5442
  %0 = load i8*, i8** %popcount, align 8, !dbg !5442
  %tobool = icmp eq i8* %0, null, !dbg !5443
  br i1 %tobool, label %entry.if.end7_crit_edge, label %if.then, !dbg !5444

entry.if.end7_crit_edge:                          ; preds = %entry
  %.pre = and i32 %bitno, 63, !dbg !5445
  %.pre2 = zext i32 %.pre to i64, !dbg !5446
  %.pre3 = shl i64 1, %.pre2, !dbg !5446
  %.pre4 = lshr i32 %bitno, 6, !dbg !5447
  %.pre5 = zext i32 %.pre4 to i64, !dbg !5448
  br label %if.end7, !dbg !5444

if.then:                                          ; preds = %entry
  %div = lshr i32 %bitno, 6, !dbg !5449
  %idxprom = zext i32 %div to i64, !dbg !5449
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %map, i64 0, i32 3, i64 %idxprom, !dbg !5449
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5449
  %rem = and i32 %bitno, 63, !dbg !5449
  %sh_prom = zext i32 %rem to i64, !dbg !5449
  %2 = shl i64 1, %sh_prom, !dbg !5450
  %3 = and i64 %1, %2, !dbg !5450
  %tobool1 = icmp eq i64 %3, 0, !dbg !5450
  br i1 %tobool1, label %if.then2, label %if.end7, !dbg !5452

if.then2:                                         ; preds = %if.then
  %arrayidx6 = getelementptr inbounds i8, i8* %0, i64 %idxprom, !dbg !5453
  %4 = load i8, i8* %arrayidx6, align 1, !dbg !5454
  %inc = add i8 %4, 1, !dbg !5454
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !5454
  br label %if.end7, !dbg !5453

if.end7:                                          ; preds = %entry.if.end7_crit_edge, %if.then, %if.then2
  %idxprom12.pre-phi = phi i64 [ %.pre5, %entry.if.end7_crit_edge ], [ %idxprom, %if.then ], [ %idxprom, %if.then2 ], !dbg !5448
  %shl.pre-phi = phi i64 [ %.pre3, %entry.if.end7_crit_edge ], [ %2, %if.then ], [ %2, %if.then2 ], !dbg !5446
  %arrayidx13 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %map, i64 0, i32 3, i64 %idxprom12.pre-phi, !dbg !5448
  %5 = load i64, i64* %arrayidx13, align 8, !dbg !5455
  %or = or i64 %5, %shl.pre-phi, !dbg !5455
  store i64 %or, i64* %arrayidx13, align 8, !dbg !5455
  ret void, !dbg !5456
}

declare dso_local i32 @sbitmap_first_set_bit(%struct.simple_bitmap_def*) local_unnamed_addr #2

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal i32 @oecount_hash(i8* %p) #5 !dbg !5457 {
entry:
  call void @llvm.dbg.value(metadata i8* %p, metadata !5459, metadata !DIExpression()), !dbg !5461
  %0 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !5462
  %base = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %0, i64 0, i32 0, !dbg !5462
  %1 = ptrtoint i8* %p to i64, !dbg !5462
  %2 = trunc i64 %1 to i32, !dbg !5462
  %conv = add i32 %2, -42, !dbg !5462
  %call = tail call fastcc %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %base, i32 %conv) #8, !dbg !5462
  call void @llvm.dbg.value(metadata %struct.oecount_s* %call, metadata !5460, metadata !DIExpression()), !dbg !5461
  %3 = load i32 (i8*)*, i32 (i8*)** @htab_hash_pointer, align 8, !dbg !5463
  %op = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call, i64 0, i32 2, !dbg !5464
  %4 = bitcast %union.tree_node** %op to i8**, !dbg !5464
  %5 = load i8*, i8** %4, align 8, !dbg !5464
  %call1 = tail call i32 %3(i8* %5) #6, !dbg !5463
  %oecode = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call, i64 0, i32 1, !dbg !5465
  %6 = load i32, i32* %oecode, align 4, !dbg !5465
  %xor = xor i32 %call1, %6, !dbg !5466
  ret i32 %xor, !dbg !5467
}

; Function Attrs: nounwind uwtable
define internal i32 @oecount_eq(i8* %p1, i8* %p2) #5 !dbg !5468 {
entry:
  call void @llvm.dbg.value(metadata i8* %p1, metadata !5470, metadata !DIExpression()), !dbg !5474
  call void @llvm.dbg.value(metadata i8* %p2, metadata !5471, metadata !DIExpression()), !dbg !5474
  %0 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !5475
  %base = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %0, i64 0, i32 0, !dbg !5475
  %1 = ptrtoint i8* %p1 to i64, !dbg !5475
  %2 = trunc i64 %1 to i32, !dbg !5475
  %conv = add i32 %2, -42, !dbg !5475
  %call = tail call fastcc %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %base, i32 %conv) #8, !dbg !5475
  call void @llvm.dbg.value(metadata %struct.oecount_s* %call, metadata !5472, metadata !DIExpression()), !dbg !5474
  %3 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !5476
  %base3 = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %3, i64 0, i32 0, !dbg !5476
  %4 = ptrtoint i8* %p2 to i64, !dbg !5476
  %5 = trunc i64 %4 to i32, !dbg !5476
  %conv8 = add i32 %5, -42, !dbg !5476
  %call9 = tail call fastcc %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %base3, i32 %conv8) #8, !dbg !5476
  call void @llvm.dbg.value(metadata %struct.oecount_s* %call9, metadata !5473, metadata !DIExpression()), !dbg !5474
  %oecode = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call, i64 0, i32 1, !dbg !5477
  %6 = load i32, i32* %oecode, align 4, !dbg !5477
  %oecode10 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call9, i64 0, i32 1, !dbg !5478
  %7 = load i32, i32* %oecode10, align 4, !dbg !5478
  %cmp = icmp eq i32 %6, %7, !dbg !5479
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5480

land.rhs:                                         ; preds = %entry
  %op = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call, i64 0, i32 2, !dbg !5481
  %8 = load %union.tree_node*, %union.tree_node** %op, align 8, !dbg !5481
  %op12 = getelementptr inbounds %struct.oecount_s, %struct.oecount_s* %call9, i64 0, i32 2, !dbg !5482
  %9 = load %union.tree_node*, %union.tree_node** %op12, align 8, !dbg !5482
  %cmp13 = icmp eq %union.tree_node* %8, %9, !dbg !5483
  %phitmp = zext i1 %cmp13 to i32
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %10 = phi i32 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i32 %10, !dbg !5484
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @sbitmap_iter_init(%struct.sbitmap_iterator* %i, %struct.simple_bitmap_def* %bmp, i32 %min) unnamed_addr #0 !dbg !5485 {
entry:
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %i, metadata !5493, metadata !DIExpression()), !dbg !5496
  call void @llvm.dbg.value(metadata %struct.simple_bitmap_def* %bmp, metadata !5494, metadata !DIExpression()), !dbg !5496
  call void @llvm.dbg.value(metadata i32 %min, metadata !5495, metadata !DIExpression()), !dbg !5496
  %div = lshr i32 %min, 6, !dbg !5497
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 2, !dbg !5498
  store i32 %div, i32* %word_num, align 4, !dbg !5499
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 3, !dbg !5500
  store i32 %min, i32* %bit_num, align 8, !dbg !5501
  %size = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %bmp, i64 0, i32 2, !dbg !5502
  %0 = load i32, i32* %size, align 4, !dbg !5502
  %size1 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 1, !dbg !5503
  store i32 %0, i32* %size1, align 8, !dbg !5504
  %arraydecay = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %bmp, i64 0, i32 3, i64 0, !dbg !5505
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 0, !dbg !5506
  store i64* %arraydecay, i64** %ptr, align 8, !dbg !5507
  %cmp = icmp ult i32 %div, %0, !dbg !5508
  br i1 %cmp, label %if.else, label %if.then, !dbg !5510

if.then:                                          ; preds = %entry
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 4, !dbg !5511
  store i64 0, i64* %word, align 8, !dbg !5512
  br label %if.end, !dbg !5513

if.else:                                          ; preds = %entry
  %idxprom = zext i32 %div to i64, !dbg !5514
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %bmp, i64 0, i32 3, i64 %idxprom, !dbg !5514
  %1 = load i64, i64* %arrayidx, align 8, !dbg !5514
  %rem = and i32 %min, 63, !dbg !5515
  %sh_prom = zext i32 %rem to i64, !dbg !5516
  %shr = lshr i64 %1, %sh_prom, !dbg !5516
  %word7 = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 4, !dbg !5517
  store i64 %shr, i64* %word7, align 8, !dbg !5518
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5519
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @sbitmap_iter_cond(%struct.sbitmap_iterator* %i, i32* %n) unnamed_addr #0 !dbg !5520 {
entry:
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %i, metadata !5525, metadata !DIExpression()), !dbg !5527
  call void @llvm.dbg.value(metadata i32* %n, metadata !5526, metadata !DIExpression()), !dbg !5527
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 4, !dbg !5528
  %word_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 2, !dbg !5531
  %size = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 1, !dbg !5533
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 3, !dbg !5531
  %ptr = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 0, !dbg !5528
  %.pre = load i64, i64* %word, align 8, !dbg !5535
  br label %for.cond, !dbg !5536

for.cond:                                         ; preds = %if.end, %entry
  %0 = phi i64 [ %4, %if.end ], [ %.pre, %entry ], !dbg !5535
  %cmp = icmp eq i64 %0, 0, !dbg !5537
  br i1 %cmp, label %for.body, label %for.cond6.preheader, !dbg !5538

for.cond6.preheader:                              ; preds = %for.cond
  %.lcssa4 = phi i64 [ %0, %for.cond ], !dbg !5535
  %.pre1 = load i32, i32* %bit_num, align 8, !dbg !5527
  br label %for.cond6, !dbg !5539

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %word_num, align 4, !dbg !5541
  %inc = add i32 %1, 1, !dbg !5541
  store i32 %inc, i32* %word_num, align 4, !dbg !5541
  %2 = load i32, i32* %size, align 8, !dbg !5542
  %cmp2 = icmp ult i32 %inc, %2, !dbg !5543
  br i1 %cmp2, label %if.end, label %return.loopexit, !dbg !5544

if.end:                                           ; preds = %for.body
  %mul = shl i32 %inc, 6, !dbg !5545
  store i32 %mul, i32* %bit_num, align 8, !dbg !5546
  %3 = load i64*, i64** %ptr, align 8, !dbg !5547
  %idxprom = zext i32 %inc to i64, !dbg !5548
  %arrayidx = getelementptr inbounds i64, i64* %3, i64 %idxprom, !dbg !5548
  %4 = load i64, i64* %arrayidx, align 8, !dbg !5548
  store i64 %4, i64* %word, align 8, !dbg !5549
  br label %for.cond, !dbg !5550, !llvm.loop !5551

for.cond6:                                        ; preds = %for.cond6.preheader, %for.body9
  %5 = phi i32 [ %.pre1, %for.cond6.preheader ], [ %inc11, %for.body9 ], !dbg !5527
  %6 = phi i64 [ %.lcssa4, %for.cond6.preheader ], [ %shr, %for.body9 ], !dbg !5553
  %and = and i64 %6, 1, !dbg !5555
  %cmp8 = icmp eq i64 %and, 0, !dbg !5556
  br i1 %cmp8, label %for.body9, label %for.end14, !dbg !5539

for.body9:                                        ; preds = %for.cond6
  %inc11 = add i32 %5, 1, !dbg !5557
  store i32 %inc11, i32* %bit_num, align 8, !dbg !5557
  %shr = lshr i64 %6, 1, !dbg !5558
  store i64 %shr, i64* %word, align 8, !dbg !5558
  br label %for.cond6, !dbg !5559, !llvm.loop !5560

for.end14:                                        ; preds = %for.cond6
  %.lcssa = phi i32 [ %5, %for.cond6 ], !dbg !5527
  store i32 %.lcssa, i32* %n, align 4, !dbg !5562
  br label %return, !dbg !5563

return.loopexit:                                  ; preds = %for.body
  br label %return, !dbg !5564

return:                                           ; preds = %return.loopexit, %for.end14
  %retval.0 = phi i8 [ 1, %for.end14 ], [ 0, %return.loopexit ], !dbg !5527
  ret i8 %retval.0, !dbg !5564
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.oecount_s* @VEC_oecount_heap_safe_push(%struct.VEC_oecount_heap** %vec_, %struct.oecount_s* %obj_) unnamed_addr #0 !dbg !5565 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_heap** @cvec, metadata !5570, metadata !DIExpression()), !dbg !5572
  call void @llvm.dbg.value(metadata %struct.oecount_s* %obj_, metadata !5571, metadata !DIExpression()), !dbg !5572
  %call = tail call fastcc i32 @VEC_oecount_heap_reserve(%struct.VEC_oecount_heap** nonnull @cvec, i32 1) #8, !dbg !5573
  %0 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !5573
  %tobool = icmp eq %struct.VEC_oecount_heap* %0, null, !dbg !5573
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5573

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %0, i64 0, i32 0, !dbg !5573
  br label %cond.end, !dbg !5573

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_oecount_base* [ %base, %cond.true ], [ null, %entry ], !dbg !5573
  %call1 = tail call fastcc %struct.oecount_s* @VEC_oecount_base_quick_push(%struct.VEC_oecount_base* %cond, %struct.oecount_s* %obj_) #8, !dbg !5573
  ret %struct.oecount_s* %call1, !dbg !5573
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_oecount_base_length(%struct.VEC_oecount_base* %vec_) unnamed_addr #0 !dbg !5574 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_base* %vec_, metadata !5580, metadata !DIExpression()), !dbg !5581
  %tobool = icmp eq %struct.VEC_oecount_base* %vec_, null, !dbg !5582
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5582

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 0, !dbg !5582
  %0 = load i32, i32* %num, align 8, !dbg !5582
  br label %cond.end, !dbg !5582

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !5582
  ret i32 %cond, !dbg !5582
}

declare dso_local i8** @htab_find_slot(%struct.htab*, i8*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_oecount_base_pop(%struct.VEC_oecount_base* %vec_) unnamed_addr #0 !dbg !5583 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_base* %vec_, metadata !5588, metadata !DIExpression()), !dbg !5589
  %num1 = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 0, !dbg !5590
  %0 = load i32, i32* %num1, align 8, !dbg !5590
  %dec = add i32 %0, -1, !dbg !5590
  store i32 %dec, i32* %num1, align 8, !dbg !5590
  ret void, !dbg !5590
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.oecount_s* @VEC_oecount_base_index(%struct.VEC_oecount_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !5591 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_base* %vec_, metadata !5595, metadata !DIExpression()), !dbg !5597
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !5596, metadata !DIExpression()), !dbg !5597
  br label %land.end, !dbg !5598

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !5598
  %arrayidx = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !5598
  ret %struct.oecount_s* %arrayidx, !dbg !5598
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @sbitmap_iter_next(%struct.sbitmap_iterator* %i) unnamed_addr #0 !dbg !5599 {
entry:
  call void @llvm.dbg.value(metadata %struct.sbitmap_iterator* %i, metadata !5603, metadata !DIExpression()), !dbg !5604
  %word = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 4, !dbg !5605
  %0 = load i64, i64* %word, align 8, !dbg !5606
  %shr = lshr i64 %0, 1, !dbg !5606
  store i64 %shr, i64* %word, align 8, !dbg !5606
  %bit_num = getelementptr inbounds %struct.sbitmap_iterator, %struct.sbitmap_iterator* %i, i64 0, i32 3, !dbg !5607
  %1 = load i32, i32* %bit_num, align 8, !dbg !5608
  %inc = add i32 %1, 1, !dbg !5608
  store i32 %inc, i32* %bit_num, align 8, !dbg !5608
  ret void, !dbg !5609
}

declare dso_local void @htab_delete(%struct.htab*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.oecount_s* @VEC_oecount_base_address(%struct.VEC_oecount_base* %vec_) unnamed_addr #0 !dbg !5610 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_base* %vec_, metadata !5614, metadata !DIExpression()), !dbg !5615
  %tobool = icmp eq %struct.VEC_oecount_base* %vec_, null, !dbg !5616
  %arraydecay = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 2, i64 0, !dbg !5616
  %cond = select i1 %tobool, %struct.oecount_s* null, %struct.oecount_s* %arraydecay, !dbg !5616
  ret %struct.oecount_s* %cond, !dbg !5616
}

; Function Attrs: nounwind uwtable
define internal i32 @oecount_cmp(i8* %p1, i8* %p2) #5 !dbg !5617 {
entry:
  call void @llvm.dbg.value(metadata i8* %p1, metadata !5619, metadata !DIExpression()), !dbg !5623
  call void @llvm.dbg.value(metadata i8* %p2, metadata !5620, metadata !DIExpression()), !dbg !5623
  call void @llvm.dbg.value(metadata i8* %p1, metadata !5621, metadata !DIExpression()), !dbg !5623
  call void @llvm.dbg.value(metadata i8* %p2, metadata !5622, metadata !DIExpression()), !dbg !5623
  %cnt = bitcast i8* %p1 to i32*, !dbg !5624
  %0 = load i32, i32* %cnt, align 8, !dbg !5624
  %cnt1 = bitcast i8* %p2 to i32*, !dbg !5625
  %1 = load i32, i32* %cnt1, align 8, !dbg !5625
  %sub = sub nsw i32 %0, %1, !dbg !5626
  ret i32 %sub, !dbg !5627
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_oecount_base_iterate(%struct.VEC_oecount_base* %vec_, i32 %ix_, %struct.oecount_s** %ptr) unnamed_addr #0 !dbg !5628 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_base* %vec_, metadata !5633, metadata !DIExpression()), !dbg !5636
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !5634, metadata !DIExpression()), !dbg !5636
  call void @llvm.dbg.value(metadata %struct.oecount_s** %ptr, metadata !5635, metadata !DIExpression()), !dbg !5636
  %tobool = icmp eq %struct.VEC_oecount_base* %vec_, null, !dbg !5637
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !5637

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 0, !dbg !5637
  %0 = load i32, i32* %num, align 8, !dbg !5637
  %cmp = icmp ugt i32 %0, %ix_, !dbg !5637
  br i1 %cmp, label %if.then, label %if.else, !dbg !5639

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !5640
  %arrayidx = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !5640
  br label %return, !dbg !5640

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !5642

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct.oecount_s* [ null, %if.else ], [ %arrayidx, %if.then ], !dbg !5644
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !5644
  store %struct.oecount_s* %storemerge, %struct.oecount_s** %ptr, align 8, !dbg !5644
  ret i32 %retval.0, !dbg !5639
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.oecount_s* @VEC_oecount_base_last(%struct.VEC_oecount_base* %vec_) unnamed_addr #0 !dbg !5645 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_base* %vec_, metadata !5647, metadata !DIExpression()), !dbg !5648
  br label %land.end, !dbg !5649

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %num2 = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 0, !dbg !5649
  %0 = load i32, i32* %num2, align 8, !dbg !5649
  %sub = add i32 %0, -1, !dbg !5649
  %idxprom = zext i32 %sub to i64, !dbg !5649
  %arrayidx = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !5649
  ret %struct.oecount_s* %arrayidx, !dbg !5649
}

declare dso_local %union.tree_node* @create_tmp_var(%union.tree_node*, i8*) local_unnamed_addr #2

declare dso_local zeroext i8 @add_referenced_var(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @zero_one_operation(%union.tree_node** %def, i32 %opcode, %union.tree_node* %op) unnamed_addr #5 !dbg !5650 {
entry:
  %use_stmt = alloca %union.gimple_statement_d*, align 8
  %use = alloca %struct.ssa_use_operand_d*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %union.tree_node** %def, metadata !5654, metadata !DIExpression()), !dbg !5665
  call void @llvm.dbg.value(metadata i32 %opcode, metadata !5655, metadata !DIExpression()), !dbg !5665
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !5656, metadata !DIExpression()), !dbg !5665
  %0 = bitcast %union.tree_node** %def to %struct.tree_ssa_name**, !dbg !5666
  %1 = load %struct.tree_ssa_name*, %struct.tree_ssa_name** %0, align 8, !dbg !5666
  %def_stmt = getelementptr inbounds %struct.tree_ssa_name, %struct.tree_ssa_name* %1, i64 0, i32 2, !dbg !5666
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !5666
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %2, metadata !5657, metadata !DIExpression()), !dbg !5665
  %3 = bitcast %union.gimple_statement_d** %use_stmt to i8*, !dbg !5667
  %4 = bitcast %struct.ssa_use_operand_d** %use to i8*, !dbg !5667
  %5 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5667
  %6 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5667
  br label %do.body, !dbg !5668

do.body:                                          ; preds = %cleanup, %entry
  %stmt.0 = phi %union.gimple_statement_d* [ %2, %entry ], [ %stmt.1, %cleanup ], !dbg !5669
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt.0, metadata !5657, metadata !DIExpression()), !dbg !5665
  %call = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %stmt.0) #8, !dbg !5670
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !5658, metadata !DIExpression()), !dbg !5671
  %call1 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt.0) #8, !dbg !5672
  %cmp = icmp eq i32 %call1, %opcode, !dbg !5673
  br i1 %cmp, label %land.lhs.true, label %if.end19, !dbg !5674

land.lhs.true:                                    ; preds = %do.body
  %cmp2 = icmp eq %union.tree_node* %call, %op, !dbg !5675
  br i1 %cmp2, label %if.then, label %lor.lhs.false, !dbg !5676

lor.lhs.false:                                    ; preds = %land.lhs.true
  %call3 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt.0) #8, !dbg !5677
  %cmp4 = icmp eq %union.tree_node* %call3, %op, !dbg !5678
  br i1 %cmp4, label %if.then, label %if.end19, !dbg !5679

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #7, !dbg !5680
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #7, !dbg !5681
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #7, !dbg !5682
  br i1 %cmp2, label %if.then6, label %if.end, !dbg !5683

if.then6:                                         ; preds = %if.then
  %call7 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %stmt.0) #8, !dbg !5684
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !5658, metadata !DIExpression()), !dbg !5671
  br label %if.end, !dbg !5686

if.end:                                           ; preds = %if.then6, %if.then
  %name.0 = phi %union.tree_node* [ %call7, %if.then6 ], [ %call, %if.then ], !dbg !5671
  call void @llvm.dbg.value(metadata %union.tree_node* %name.0, metadata !5658, metadata !DIExpression()), !dbg !5671
  %call8 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt.0) #8, !dbg !5687
  %call9 = call fastcc zeroext i8 @has_single_use(%union.tree_node* %call8) #8, !dbg !5687
  %tobool = icmp eq i8 %call9, 0, !dbg !5687
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !5687

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 802, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !5687
  br label %cond.end, !dbg !5687

cond.end:                                         ; preds = %if.end, %cond.true
  %call10 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt.0) #8, !dbg !5688
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %use_stmt, metadata !5660, metadata !DIExpression(DW_OP_deref)), !dbg !5667
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d** %use, metadata !5663, metadata !DIExpression(DW_OP_deref)), !dbg !5667
  %call11 = call fastcc zeroext i8 @single_imm_use(%union.tree_node* %call10, %struct.ssa_use_operand_d** nonnull %use, %union.gimple_statement_d** nonnull %use_stmt) #8, !dbg !5689
  %call12 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt.0) #8, !dbg !5690
  %7 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !5692
  %cmp13 = icmp eq %union.tree_node* %call12, %7, !dbg !5693
  br i1 %cmp13, label %if.then14, label %if.end15, !dbg !5694

if.then14:                                        ; preds = %cond.end
  store %union.tree_node* %name.0, %union.tree_node** %def, align 8, !dbg !5695
  br label %if.end15, !dbg !5696

if.end15:                                         ; preds = %if.then14, %cond.end
  %8 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %use, align 8, !dbg !5697
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %8, metadata !5663, metadata !DIExpression()), !dbg !5667
  call fastcc void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %8, %union.tree_node* %name.0) #8, !dbg !5697
  %9 = getelementptr inbounds %union.tree_node, %union.tree_node* %name.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5698
  %bf.load = load i64, i64* %9, align 8, !dbg !5698
  %bf.cast3 = and i64 %bf.load, 65535, !dbg !5700
  %cmp16 = icmp eq i64 %bf.cast3, 141, !dbg !5700
  br i1 %cmp16, label %if.end18, label %if.then17, !dbg !5701

if.then17:                                        ; preds = %if.end15
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %use_stmt, align 8, !dbg !5702
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %10, metadata !5660, metadata !DIExpression()), !dbg !5667
  call fastcc void @update_stmt(%union.gimple_statement_d* %10) #8, !dbg !5703
  br label %if.end18, !dbg !5703

if.end18:                                         ; preds = %if.end15, %if.then17
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7, !dbg !5704
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp, %union.gimple_statement_d* %stmt.0) #6, !dbg !5704
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %5, i8* nonnull align 8 %6, i64 24, i1 false), !dbg !5704
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7, !dbg !5704
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5664, metadata !DIExpression(DW_OP_deref)), !dbg !5667
  call void @gsi_remove(%struct.gimple_stmt_iterator* nonnull %gsi, i8 zeroext 1) #6, !dbg !5705
  call void @release_defs(%union.gimple_statement_d* %stmt.0) #6, !dbg !5706
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #7, !dbg !5707
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #7, !dbg !5707
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #7, !dbg !5707
  br label %cleanup

if.end19:                                         ; preds = %lor.lhs.false, %do.body
  %cmp20 = icmp eq %union.tree_node* %call, %op, !dbg !5708
  br i1 %cmp20, label %cond.true27, label %land.lhs.true21, !dbg !5708

land.lhs.true21:                                  ; preds = %if.end19
  %11 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5708
  %bf.load23 = load i64, i64* %11, align 8, !dbg !5708
  %bf.cast252 = and i64 %bf.load23, 65535, !dbg !5708
  %cmp26 = icmp eq i64 %bf.cast252, 141, !dbg !5708
  br i1 %cmp26, label %cond.end29, label %cond.true27, !dbg !5708

cond.true27:                                      ; preds = %if.end19, %land.lhs.true21
  call void @fancy_abort(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 817, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !5708
  br label %cond.end29, !dbg !5708

cond.end29:                                       ; preds = %land.lhs.true21, %cond.true27
  %def_stmt32 = getelementptr inbounds %union.tree_node, %union.tree_node* %call, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5709
  %12 = bitcast %union.tree_node** %def_stmt32 to %union.gimple_statement_d**, !dbg !5709
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %12, align 8, !dbg !5709
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %13, metadata !5657, metadata !DIExpression()), !dbg !5665
  br label %cleanup, !dbg !5710

cleanup:                                          ; preds = %cond.end29, %if.end18
  %stmt.1 = phi %union.gimple_statement_d* [ %stmt.0, %if.end18 ], [ %13, %cond.end29 ], !dbg !5665
  %cleanup.dest.slot.0 = phi i1 [ false, %if.end18 ], [ true, %cond.end29 ]
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt.1, metadata !5657, metadata !DIExpression()), !dbg !5665
  br i1 %cleanup.dest.slot.0, label %do.body, label %cleanup.cont35

cleanup.cont35:                                   ; preds = %cleanup
  ret void, !dbg !5711
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @build_and_add_sum(%union.tree_node* %tmpvar, %union.tree_node* %op1, %union.tree_node* %op2, i32 %opcode) unnamed_addr #5 !dbg !5712 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp39 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp45 = alloca %struct.gimple_stmt_iterator, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp47 = alloca %struct.edge_iterator, align 8
  %tmp63 = alloca %struct.gimple_stmt_iterator, align 8
  %tmp69 = alloca %struct.gimple_stmt_iterator, align 8
  %e71 = alloca %struct.edge_def*, align 8
  %ei72 = alloca %struct.edge_iterator, align 8
  %tmp73 = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.value(metadata %union.tree_node* %tmpvar, metadata !5716, metadata !DIExpression()), !dbg !5747
  call void @llvm.dbg.value(metadata %union.tree_node* %op1, metadata !5717, metadata !DIExpression()), !dbg !5747
  call void @llvm.dbg.value(metadata %union.tree_node* %op2, metadata !5718, metadata !DIExpression()), !dbg !5747
  call void @llvm.dbg.value(metadata i32 %opcode, metadata !5719, metadata !DIExpression()), !dbg !5747
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !5720, metadata !DIExpression()), !dbg !5747
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !5721, metadata !DIExpression()), !dbg !5747
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5748
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !5748
  %call = tail call %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32 %opcode, %union.tree_node* %tmpvar, %union.tree_node* %op1, %union.tree_node* %op2) #6, !dbg !5749
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !5724, metadata !DIExpression()), !dbg !5747
  %call1 = tail call fastcc %union.tree_node* @make_ssa_name(%union.tree_node* %tmpvar, %union.gimple_statement_d* %call) #8, !dbg !5750
  call void @llvm.dbg.value(metadata %union.tree_node* %call1, metadata !5723, metadata !DIExpression()), !dbg !5747
  tail call fastcc void @gimple_assign_set_lhs(%union.gimple_statement_d* %call, %union.tree_node* %call1) #8, !dbg !5751
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5752
  %bf.load = load i64, i64* %1, align 8, !dbg !5752
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5754
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !5754
  br i1 %cmp, label %if.then, label %if.end, !dbg !5755

if.then:                                          ; preds = %entry
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %op1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5756
  %2 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !5756
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %2, align 8, !dbg !5756
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %3, metadata !5720, metadata !DIExpression()), !dbg !5747
  br label %if.end, !dbg !5757

if.end:                                           ; preds = %if.then, %entry
  %op1def.0 = phi %union.gimple_statement_d* [ %3, %if.then ], [ null, %entry ], !dbg !5747
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %op1def.0, metadata !5720, metadata !DIExpression()), !dbg !5747
  %4 = getelementptr inbounds %union.tree_node, %union.tree_node* %op2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5758
  %bf.load3 = load i64, i64* %4, align 8, !dbg !5758
  %bf.cast52 = and i64 %bf.load3, 65535, !dbg !5760
  %cmp6 = icmp eq i64 %bf.cast52, 141, !dbg !5760
  br i1 %cmp6, label %if.then7, label %if.end10, !dbg !5761

if.then7:                                         ; preds = %if.end
  %def_stmt9 = getelementptr inbounds %union.tree_node, %union.tree_node* %op2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5762
  %5 = bitcast %union.tree_node** %def_stmt9 to %union.gimple_statement_d**, !dbg !5762
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %5, align 8, !dbg !5762
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %6, metadata !5721, metadata !DIExpression()), !dbg !5747
  br label %if.end10, !dbg !5763

if.end10:                                         ; preds = %if.then7, %if.end
  %op2def.0 = phi %union.gimple_statement_d* [ %6, %if.then7 ], [ null, %if.end ], !dbg !5747
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %op2def.0, metadata !5721, metadata !DIExpression()), !dbg !5747
  %tobool = icmp eq %union.gimple_statement_d* %op1def.0, null, !dbg !5764
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !5765

lor.lhs.false:                                    ; preds = %if.end10
  %call11 = tail call fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* nonnull %op1def.0) #8, !dbg !5766
  %tobool12 = icmp eq i8 %call11, 0, !dbg !5766
  br i1 %tobool12, label %if.else, label %land.lhs.true, !dbg !5767

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end10
  %tobool13 = icmp eq %union.gimple_statement_d* %op2def.0, null, !dbg !5768
  br i1 %tobool13, label %if.then18, label %lor.lhs.false14, !dbg !5769

lor.lhs.false14:                                  ; preds = %land.lhs.true
  %call15 = tail call fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* nonnull %op2def.0) #8, !dbg !5770
  %tobool17 = icmp eq i8 %call15, 0, !dbg !5770
  br i1 %tobool17, label %if.else, label %if.then18, !dbg !5771

if.then18:                                        ; preds = %lor.lhs.false14, %land.lhs.true
  %7 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5772
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #7, !dbg !5772
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5774
  %cfg = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, i32 1, !dbg !5774
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5774
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i64 0, i32 0, !dbg !5774
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5774
  %call19 = tail call fastcc %struct.basic_block_def* @single_succ(%struct.basic_block_def* %10) #8, !dbg !5775
  call fastcc void @gsi_after_labels(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %call19) #8, !dbg !5772
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %7, i64 24, i1 false), !dbg !5772
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #7, !dbg !5772
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5722, metadata !DIExpression(DW_OP_deref)), !dbg !5747
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %call, i32 0) #6, !dbg !5776
  br label %if.end92, !dbg !5777

if.else:                                          ; preds = %lor.lhs.false, %lor.lhs.false14
  br i1 %tobool, label %if.then34, label %lor.lhs.false21, !dbg !5778

lor.lhs.false21:                                  ; preds = %if.else
  %call22 = tail call fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* nonnull %op1def.0) #8, !dbg !5779
  %tobool24 = icmp eq i8 %call22, 0, !dbg !5779
  br i1 %tobool24, label %lor.lhs.false25, label %if.then34, !dbg !5780

lor.lhs.false25:                                  ; preds = %lor.lhs.false21
  %tobool26 = icmp eq %union.gimple_statement_d* %op2def.0, null, !dbg !5781
  br i1 %tobool26, label %if.else58, label %land.lhs.true27, !dbg !5782

land.lhs.true27:                                  ; preds = %lor.lhs.false25
  %call28 = tail call fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* nonnull %op2def.0) #8, !dbg !5783
  %tobool29 = icmp eq i8 %call28, 0, !dbg !5783
  br i1 %tobool29, label %land.lhs.true30, label %if.else58, !dbg !5784

land.lhs.true30:                                  ; preds = %land.lhs.true27
  %call31 = tail call zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d* nonnull %op1def.0, %union.gimple_statement_d* nonnull %op2def.0) #6, !dbg !5785
  %tobool33 = icmp eq i8 %call31, 0, !dbg !5785
  br i1 %tobool33, label %if.else58, label %if.then34, !dbg !5786

if.then34:                                        ; preds = %land.lhs.true30, %lor.lhs.false21, %if.else
  %call35 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %op2def.0) #8, !dbg !5787
  %cmp36 = icmp eq i32 %call35, 16, !dbg !5788
  br i1 %cmp36, label %if.then38, label %if.else41, !dbg !5789

if.then38:                                        ; preds = %if.then34
  %11 = bitcast %struct.gimple_stmt_iterator* %tmp39 to i8*, !dbg !5790
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7, !dbg !5790
  %call40 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %op2def.0) #8, !dbg !5792
  call fastcc void @gsi_after_labels(%struct.gimple_stmt_iterator* nonnull sret %tmp39, %struct.basic_block_def* %call40) #8, !dbg !5790
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %11, i64 24, i1 false), !dbg !5790
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7, !dbg !5790
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5722, metadata !DIExpression(DW_OP_deref)), !dbg !5747
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %call, i32 0) #6, !dbg !5793
  br label %if.end92, !dbg !5794

if.else41:                                        ; preds = %if.then34
  %call42 = tail call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* %op2def.0) #6, !dbg !5795
  %tobool43 = icmp eq i8 %call42, 0, !dbg !5795
  br i1 %tobool43, label %if.then44, label %if.else46, !dbg !5796

if.then44:                                        ; preds = %if.else41
  %12 = bitcast %struct.gimple_stmt_iterator* %tmp45 to i8*, !dbg !5797
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %12) #7, !dbg !5797
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp45, %union.gimple_statement_d* %op2def.0) #6, !dbg !5797
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %12, i64 24, i1 false), !dbg !5797
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %12) #7, !dbg !5797
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5722, metadata !DIExpression(DW_OP_deref)), !dbg !5747
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %call, i32 0) #6, !dbg !5799
  br label %if.end92, !dbg !5800

if.else46:                                        ; preds = %if.else41
  %13 = bitcast %struct.edge_def** %e to i8*, !dbg !5801
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #7, !dbg !5801
  %14 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5802
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #7, !dbg !5802
  %15 = bitcast %struct.edge_iterator* %tmp47 to i8*, !dbg !5803
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %15) #7, !dbg !5803
  %call48 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %op2def.0) #8, !dbg !5803
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call48, i64 0, i32 1, !dbg !5803
  %call49 = tail call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** nonnull %succs) #8, !dbg !5803
  %16 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp47, i64 0, i32 0, !dbg !5803
  %17 = extractvalue { i32, %struct.VEC_edge_gc** } %call49, 0, !dbg !5803
  store i32 %17, i32* %16, align 8, !dbg !5803
  %18 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp47, i64 0, i32 1, !dbg !5803
  %19 = extractvalue { i32, %struct.VEC_edge_gc** } %call49, 1, !dbg !5803
  store %struct.VEC_edge_gc** %19, %struct.VEC_edge_gc*** %18, align 8, !dbg !5803
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %14, i8* nonnull align 8 %15, i64 16, i1 false), !dbg !5803
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %15) #7, !dbg !5803
  %20 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 0, !dbg !5805
  %21 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i64 0, i32 1, !dbg !5805
  br label %for.cond, !dbg !5803

for.cond:                                         ; preds = %for.inc, %if.else46
  %22 = load i32, i32* %20, align 8, !dbg !5807
  %23 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %21, align 8, !dbg !5807
  call void @llvm.dbg.value(metadata %struct.edge_def** %e, metadata !5725, metadata !DIExpression(DW_OP_deref)), !dbg !5808
  %call50 = call fastcc zeroext i8 @ei_cond(i32 %22, %struct.VEC_edge_gc** %23, %struct.edge_def** nonnull %e) #8, !dbg !5807
  %tobool51 = icmp eq i8 %call50, 0, !dbg !5803
  br i1 %tobool51, label %for.end, label %for.body, !dbg !5803

for.body:                                         ; preds = %for.cond
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5809
  call void @llvm.dbg.value(metadata %struct.edge_def* %24, metadata !5725, metadata !DIExpression()), !dbg !5808
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i64 0, i32 7, !dbg !5811
  %25 = load i32, i32* %flags, align 8, !dbg !5811
  %and = and i32 %25, 1, !dbg !5812
  %tobool52 = icmp eq i32 %and, 0, !dbg !5812
  br i1 %tobool52, label %for.inc, label %if.then53, !dbg !5813

if.then53:                                        ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.edge_def* %24, metadata !5725, metadata !DIExpression()), !dbg !5808
  %call54 = call %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def* %24, %union.gimple_statement_d* %call) #6, !dbg !5814
  br label %for.inc, !dbg !5814

for.inc:                                          ; preds = %for.body, %if.then53
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei, metadata !5733, metadata !DIExpression(DW_OP_deref)), !dbg !5808
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei) #8, !dbg !5807
  br label %for.cond, !dbg !5807, !llvm.loop !5815

for.end:                                          ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #7, !dbg !5817
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #7, !dbg !5817
  br label %if.end92

if.else58:                                        ; preds = %land.lhs.true30, %land.lhs.true27, %lor.lhs.false25
  %call59 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* nonnull %op1def.0) #8, !dbg !5818
  %cmp60 = icmp eq i32 %call59, 16, !dbg !5819
  br i1 %cmp60, label %if.then62, label %if.else65, !dbg !5820

if.then62:                                        ; preds = %if.else58
  %26 = bitcast %struct.gimple_stmt_iterator* %tmp63 to i8*, !dbg !5821
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #7, !dbg !5821
  %call64 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* nonnull %op1def.0) #8, !dbg !5823
  call fastcc void @gsi_after_labels(%struct.gimple_stmt_iterator* nonnull sret %tmp63, %struct.basic_block_def* %call64) #8, !dbg !5821
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %26, i64 24, i1 false), !dbg !5821
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #7, !dbg !5821
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5722, metadata !DIExpression(DW_OP_deref)), !dbg !5747
  call void @gsi_insert_before(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %call, i32 0) #6, !dbg !5824
  br label %if.end92, !dbg !5825

if.else65:                                        ; preds = %if.else58
  %call66 = tail call zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d* nonnull %op1def.0) #6, !dbg !5826
  %tobool67 = icmp eq i8 %call66, 0, !dbg !5826
  br i1 %tobool67, label %if.then68, label %if.else70, !dbg !5827

if.then68:                                        ; preds = %if.else65
  %27 = bitcast %struct.gimple_stmt_iterator* %tmp69 to i8*, !dbg !5828
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %27) #7, !dbg !5828
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp69, %union.gimple_statement_d* nonnull %op1def.0) #6, !dbg !5828
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %27, i64 24, i1 false), !dbg !5828
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %27) #7, !dbg !5828
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5722, metadata !DIExpression(DW_OP_deref)), !dbg !5747
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* nonnull %gsi, %union.gimple_statement_d* %call, i32 0) #6, !dbg !5830
  br label %if.end92, !dbg !5831

if.else70:                                        ; preds = %if.else65
  %28 = bitcast %struct.edge_def** %e71 to i8*, !dbg !5832
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #7, !dbg !5832
  %29 = bitcast %struct.edge_iterator* %ei72 to i8*, !dbg !5833
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %29) #7, !dbg !5833
  %30 = bitcast %struct.edge_iterator* %tmp73 to i8*, !dbg !5834
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #7, !dbg !5834
  %call74 = tail call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* nonnull %op1def.0) #8, !dbg !5834
  %succs75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call74, i64 0, i32 1, !dbg !5834
  %call76 = tail call fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** nonnull %succs75) #8, !dbg !5834
  %31 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp73, i64 0, i32 0, !dbg !5834
  %32 = extractvalue { i32, %struct.VEC_edge_gc** } %call76, 0, !dbg !5834
  store i32 %32, i32* %31, align 8, !dbg !5834
  %33 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %tmp73, i64 0, i32 1, !dbg !5834
  %34 = extractvalue { i32, %struct.VEC_edge_gc** } %call76, 1, !dbg !5834
  store %struct.VEC_edge_gc** %34, %struct.VEC_edge_gc*** %33, align 8, !dbg !5834
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %29, i8* nonnull align 8 %30, i64 16, i1 false), !dbg !5834
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #7, !dbg !5834
  %35 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei72, i64 0, i32 0, !dbg !5836
  %36 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei72, i64 0, i32 1, !dbg !5836
  br label %for.cond77, !dbg !5834

for.cond77:                                       ; preds = %for.inc87, %if.else70
  %37 = load i32, i32* %35, align 8, !dbg !5838
  %38 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %36, align 8, !dbg !5838
  call void @llvm.dbg.value(metadata %struct.edge_def** %e71, metadata !5740, metadata !DIExpression(DW_OP_deref)), !dbg !5839
  %call78 = call fastcc zeroext i8 @ei_cond(i32 %37, %struct.VEC_edge_gc** %38, %struct.edge_def** nonnull %e71) #8, !dbg !5838
  %tobool79 = icmp eq i8 %call78, 0, !dbg !5834
  br i1 %tobool79, label %for.end88, label %for.body80, !dbg !5834

for.body80:                                       ; preds = %for.cond77
  %39 = load %struct.edge_def*, %struct.edge_def** %e71, align 8, !dbg !5840
  call void @llvm.dbg.value(metadata %struct.edge_def* %39, metadata !5740, metadata !DIExpression()), !dbg !5839
  %flags81 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i64 0, i32 7, !dbg !5842
  %40 = load i32, i32* %flags81, align 8, !dbg !5842
  %and82 = and i32 %40, 1, !dbg !5843
  %tobool83 = icmp eq i32 %and82, 0, !dbg !5843
  br i1 %tobool83, label %for.inc87, label %if.then84, !dbg !5844

if.then84:                                        ; preds = %for.body80
  call void @llvm.dbg.value(metadata %struct.edge_def* %39, metadata !5740, metadata !DIExpression()), !dbg !5839
  %call85 = call %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def* %39, %union.gimple_statement_d* %call) #6, !dbg !5845
  br label %for.inc87, !dbg !5845

for.inc87:                                        ; preds = %for.body80, %if.then84
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %ei72, metadata !5746, metadata !DIExpression(DW_OP_deref)), !dbg !5839
  call fastcc void @ei_next(%struct.edge_iterator* nonnull %ei72) #8, !dbg !5838
  br label %for.cond77, !dbg !5838, !llvm.loop !5846

for.end88:                                        ; preds = %for.cond77
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %29) #7, !dbg !5848
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #7, !dbg !5848
  br label %if.end92

if.end92:                                         ; preds = %if.then44, %for.end, %if.then38, %if.then68, %for.end88, %if.then62, %if.then18
  call fastcc void @update_stmt(%union.gimple_statement_d* %call) #8, !dbg !5849
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !5850
  ret %union.gimple_statement_d* %call, !dbg !5851
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_oecount_heap_free(%struct.VEC_oecount_heap** %vec_) unnamed_addr #0 !dbg !5852 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_heap** @cvec, metadata !5856, metadata !DIExpression()), !dbg !5857
  %0 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !5858
  %tobool = icmp eq %struct.VEC_oecount_heap* %0, null, !dbg !5858
  br i1 %tobool, label %if.end, label %if.then, !dbg !5860

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_oecount_heap* %0 to i8*, !dbg !5860
  tail call void @free(i8* nonnull %1) #6, !dbg !5858
  br label %if.end, !dbg !5858

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_oecount_heap* null, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !5860
  ret void, !dbg !5860
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_oecount_heap_reserve(%struct.VEC_oecount_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !5861 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_heap** @cvec, metadata !5865, metadata !DIExpression()), !dbg !5868
  call void @llvm.dbg.value(metadata i32 1, metadata !5866, metadata !DIExpression()), !dbg !5868
  %0 = load %struct.VEC_oecount_heap*, %struct.VEC_oecount_heap** @cvec, align 8, !dbg !5869
  %tobool = icmp eq %struct.VEC_oecount_heap* %0, null, !dbg !5869
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5869

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_oecount_heap, %struct.VEC_oecount_heap* %0, i64 0, i32 0, !dbg !5869
  br label %cond.end, !dbg !5869

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_oecount_base* [ %base, %cond.true ], [ null, %entry ], !dbg !5869
  %call = tail call fastcc i32 @VEC_oecount_base_space(%struct.VEC_oecount_base* %cond, i32 1) #8, !dbg !5869
  %tobool1 = icmp eq i32 %call, 0, !dbg !5869
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !5869
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !5867, metadata !DIExpression()), !dbg !5868
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5869

if.then:                                          ; preds = %cond.end
  %1 = load i8*, i8** bitcast (%struct.VEC_oecount_heap** @cvec to i8**), align 8, !dbg !5870
  %call3 = tail call i8* @vec_heap_o_reserve(i8* %1, i32 1, i64 8, i64 16) #6, !dbg !5870
  store i8* %call3, i8** bitcast (%struct.VEC_oecount_heap** @cvec to i8**), align 8, !dbg !5870
  br label %if.end, !dbg !5870

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !5869
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.oecount_s* @VEC_oecount_base_quick_push(%struct.VEC_oecount_base* %vec_, %struct.oecount_s* %obj_) unnamed_addr #0 !dbg !5872 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_base* %vec_, metadata !5876, metadata !DIExpression()), !dbg !5879
  call void @llvm.dbg.value(metadata %struct.oecount_s* %obj_, metadata !5877, metadata !DIExpression()), !dbg !5879
  %num1 = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 0, !dbg !5880
  %0 = load i32, i32* %num1, align 8, !dbg !5880
  %inc = add i32 %0, 1, !dbg !5880
  store i32 %inc, i32* %num1, align 8, !dbg !5880
  %idxprom = zext i32 %0 to i64, !dbg !5880
  %arrayidx = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !5880
  call void @llvm.dbg.value(metadata %struct.oecount_s* %arrayidx, metadata !5878, metadata !DIExpression()), !dbg !5879
  %tobool = icmp eq %struct.oecount_s* %obj_, null, !dbg !5881
  br i1 %tobool, label %if.end, label %if.then, !dbg !5880

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.oecount_s* %arrayidx to i8*, !dbg !5881
  %2 = bitcast %struct.oecount_s* %obj_ to i8*, !dbg !5881
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %2, i64 16, i1 false), !dbg !5881
  br label %if.end, !dbg !5881

if.end:                                           ; preds = %entry, %if.then
  ret %struct.oecount_s* %arrayidx, !dbg !5880
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_oecount_base_space(%struct.VEC_oecount_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !5883 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_oecount_base* %vec_, metadata !5887, metadata !DIExpression()), !dbg !5889
  call void @llvm.dbg.value(metadata i32 1, metadata !5888, metadata !DIExpression()), !dbg !5889
  %tobool = icmp eq %struct.VEC_oecount_base* %vec_, null, !dbg !5890
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5890

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 1, !dbg !5890
  %0 = load i32, i32* %alloc, align 4, !dbg !5890
  %num = getelementptr inbounds %struct.VEC_oecount_base, %struct.VEC_oecount_base* %vec_, i64 0, i32 0, !dbg !5890
  %1 = load i32, i32* %num, align 8, !dbg !5890
  %cmp1 = icmp ne i32 %0, %1, !dbg !5890
  %phitmp = zext i1 %cmp1 to i32, !dbg !5890
  br label %cond.end, !dbg !5890

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !5890
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_ssa_use_from_ptr(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) unnamed_addr #0 !dbg !5891 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use, metadata !5895, metadata !DIExpression()), !dbg !5897
  call void @llvm.dbg.value(metadata %union.tree_node* %val, metadata !5896, metadata !DIExpression()), !dbg !5897
  tail call fastcc void @delink_imm_use(%struct.ssa_use_operand_d* %use) #8, !dbg !5898
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use, i64 0, i32 3, !dbg !5899
  %0 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !5899
  store %union.tree_node* %val, %union.tree_node** %0, align 8, !dbg !5900
  tail call fastcc void @link_imm_use(%struct.ssa_use_operand_d* %use, %union.tree_node* %val) #8, !dbg !5901
  ret void, !dbg !5902
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) unnamed_addr #0 !dbg !5903 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !5907, metadata !DIExpression()), !dbg !5908
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !5909
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5909
  %cmp = icmp eq %struct.ssa_use_operand_d* %0, null, !dbg !5911
  br i1 %cmp, label %return, label %if.end, !dbg !5912

if.end:                                           ; preds = %entry
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 1, !dbg !5913
  %1 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !5913
  %2 = load i64, i64* %1, align 8, !dbg !5913
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i64 0, i32 1, !dbg !5914
  %3 = bitcast %struct.ssa_use_operand_d** %next2 to i64*, !dbg !5915
  store i64 %2, i64* %3, align 8, !dbg !5915
  %4 = bitcast %struct.ssa_use_operand_d* %linknode to i64*, !dbg !5916
  %5 = load i64, i64* %4, align 8, !dbg !5916
  %6 = bitcast %struct.ssa_use_operand_d** %next to i64**, !dbg !5917
  %7 = load i64*, i64** %6, align 8, !dbg !5917
  store i64 %5, i64* %7, align 8, !dbg !5918
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5919
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next, align 8, !dbg !5920
  br label %return, !dbg !5921

return:                                           ; preds = %entry, %if.end
  ret void, !dbg !5921
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @link_imm_use(%struct.ssa_use_operand_d* %linknode, %union.tree_node* %def) unnamed_addr #0 !dbg !5922 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !5926, metadata !DIExpression()), !dbg !5929
  call void @llvm.dbg.value(metadata %union.tree_node* %def, metadata !5927, metadata !DIExpression()), !dbg !5929
  %tobool = icmp eq %union.tree_node* %def, null, !dbg !5930
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5932

lor.lhs.false:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %def, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5933
  %bf.load = load i64, i64* %0, align 8, !dbg !5933
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5934
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !5934
  br i1 %cmp, label %if.else, label %if.then, !dbg !5935

if.then:                                          ; preds = %lor.lhs.false, %entry
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !5936
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5937
  br label %if.end, !dbg !5938

if.else:                                          ; preds = %lor.lhs.false
  %imm_uses = getelementptr inbounds %union.tree_node, %union.tree_node* %def, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5939
  %1 = bitcast i40* %imm_uses to %struct.ssa_use_operand_d*, !dbg !5939
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %1, metadata !5928, metadata !DIExpression()), !dbg !5929
  tail call fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* nonnull %1) #8, !dbg !5941
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !5942
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) unnamed_addr #0 !dbg !5943 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !5947, metadata !DIExpression()), !dbg !5949
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %list, metadata !5948, metadata !DIExpression()), !dbg !5949
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !5950
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %prev, align 8, !dbg !5951
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %list, i64 0, i32 1, !dbg !5952
  %0 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !5952
  %1 = load i64, i64* %0, align 8, !dbg !5952
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 1, !dbg !5953
  %2 = bitcast %struct.ssa_use_operand_d** %next1 to i64*, !dbg !5954
  store i64 %1, i64* %2, align 8, !dbg !5954
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !5955
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i64 0, i32 0, !dbg !5956
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !5957
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %next, align 8, !dbg !5958
  ret void, !dbg !5959
}

declare dso_local %union.gimple_statement_d* @gimple_build_assign_with_ops_stat(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !5960 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !5964, metadata !DIExpression()), !dbg !5966
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5965, metadata !DIExpression()), !dbg !5966
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5967
  %call = tail call %union.tree_node* @make_ssa_name_fn(%struct.function* %0, %union.tree_node* %var, %union.gimple_statement_d* %stmt) #6, !dbg !5968
  ret %union.tree_node* %call, !dbg !5969
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_assign_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) unnamed_addr #0 !dbg !5970 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5972, metadata !DIExpression()), !dbg !5974
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !5973, metadata !DIExpression()), !dbg !5974
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %lhs) #8, !dbg !5975
  %tobool = icmp eq %union.tree_node* %lhs, null, !dbg !5976
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !5978

land.lhs.true:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5979
  %bf.load = load i64, i64* %0, align 8, !dbg !5979
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !5980
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !5980
  br i1 %cmp, label %if.then, label %if.end, !dbg !5981

if.then:                                          ; preds = %land.lhs.true
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !5982
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !5982
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %1, align 8, !dbg !5983
  br label %if.end, !dbg !5982

if.end:                                           ; preds = %entry, %if.then, %land.lhs.true
  ret void, !dbg !5984
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5985 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5987, metadata !DIExpression()), !dbg !5988
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !5989
  %cmp = icmp eq i32 %call, 18, !dbg !5990
  %conv1 = zext i1 %cmp to i8, !dbg !5989
  ret i8 %conv1, !dbg !5991
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_after_labels(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) unnamed_addr #0 !dbg !5992 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !5994, metadata !DIExpression()), !dbg !5996
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !5995, metadata !DIExpression()), !dbg !5997
  tail call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* sret %agg.result, %struct.basic_block_def* %bb) #8, !dbg !5998
  br label %while.cond, !dbg !5999

while.cond:                                       ; preds = %while.body, %entry
  %call = tail call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result) #8, !dbg !6000
  %tobool = icmp eq i8 %call, 0, !dbg !6000
  br i1 %tobool, label %land.rhs, label %while.end, !dbg !6001

land.rhs:                                         ; preds = %while.cond
  %call1 = tail call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %agg.result) #8, !dbg !6002
  %call2 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %call1) #8, !dbg !6003
  %cmp = icmp eq i32 %call2, 4, !dbg !6004
  br i1 %cmp, label %while.body, label %while.end, !dbg !5999

while.body:                                       ; preds = %land.rhs
  tail call fastcc void @gsi_next(%struct.gimple_stmt_iterator* %agg.result) #8, !dbg !6005
  br label %while.cond, !dbg !5999, !llvm.loop !6006

while.end:                                        ; preds = %while.cond, %land.rhs
  ret void, !dbg !6008
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !6009 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6013, metadata !DIExpression()), !dbg !6014
  %call = tail call fastcc %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #8, !dbg !6015
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i64 0, i32 1, !dbg !6016
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !6016
  ret %struct.basic_block_def* %0, !dbg !6017
}

declare dso_local void @gsi_insert_before(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) local_unnamed_addr #2

declare dso_local zeroext i8 @stmt_dominates_stmt_p(%union.gimple_statement_d*, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @stmt_ends_bb_p(%union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) unnamed_addr #0 !dbg !6018 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.VEC_edge_gc** %ev, metadata !6022, metadata !DIExpression()), !dbg !6024
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i64 0, i32 0, !dbg !6025
  store i32 0, i32* %index, align 8, !dbg !6026
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i64 0, i32 1, !dbg !6027
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %container, align 8, !dbg !6028
  %0 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !6029
  %1 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, align 8, !dbg !6029
  ret { i32, %struct.VEC_edge_gc** } %1, !dbg !6029
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) unnamed_addr #0 !dbg !6030 {
entry:
  call void @llvm.dbg.value(metadata %struct.edge_def** %p, metadata !6036, metadata !DIExpression()), !dbg !6037
  %call = tail call fastcc zeroext i8 @ei_end_p(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1) #8, !dbg !6038
  %tobool = icmp eq i8 %call, 0, !dbg !6038
  br i1 %tobool, label %if.then, label %if.else, !dbg !6040

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %struct.edge_def* @ei_edge(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1) #8, !dbg !6041
  br label %return, !dbg !6043

if.else:                                          ; preds = %entry
  br label %return, !dbg !6044

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct.edge_def* [ %call1, %if.then ], [ null, %if.else ], !dbg !6046
  %retval.0 = phi i8 [ 1, %if.then ], [ 0, %if.else ], !dbg !6046
  store %struct.edge_def* %storemerge, %struct.edge_def** %p, align 8, !dbg !6046
  ret i8 %retval.0, !dbg !6047
}

declare dso_local %struct.basic_block_def* @gsi_insert_on_edge_immediate(%struct.edge_def*, %union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @ei_next(%struct.edge_iterator* %i) unnamed_addr #0 !dbg !6048 {
entry:
  call void @llvm.dbg.value(metadata %struct.edge_iterator* %i, metadata !6053, metadata !DIExpression()), !dbg !6054
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i64 0, i32 0, !dbg !6055
  %0 = load i32, i32* %index, align 8, !dbg !6055
  %1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i64 0, i32 1, !dbg !6055
  %2 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %1, align 8, !dbg !6055
  %call = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %0, %struct.VEC_edge_gc** %2) #8, !dbg !6055
  %tobool = icmp eq %struct.VEC_edge_gc* %call, null, !dbg !6055
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6055

cond.true:                                        ; preds = %entry
  %3 = load i32, i32* %index, align 8, !dbg !6055
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %1, align 8, !dbg !6055
  %call1 = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %3, %struct.VEC_edge_gc** %4) #8, !dbg !6055
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i64 0, i32 0, !dbg !6055
  br label %cond.end, !dbg !6055

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6055
  %call2 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #8, !dbg !6055
  %cmp = icmp ult i32 %0, %call2, !dbg !6055
  br i1 %cmp, label %cond.end5, label %cond.true3, !dbg !6055

cond.true3:                                       ; preds = %cond.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !6055
  br label %cond.end5, !dbg !6055

cond.end5:                                        ; preds = %cond.end, %cond.true3
  %5 = load i32, i32* %index, align 8, !dbg !6056
  %inc = add i32 %5, 1, !dbg !6056
  store i32 %inc, i32* %index, align 8, !dbg !6056
  ret void, !dbg !6057
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !6058 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6062, metadata !DIExpression()), !dbg !6063
  %call = tail call fastcc zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #8, !dbg !6064
  %tobool = icmp eq i8 %call, 0, !dbg !6064
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !6064

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !6064
  br label %cond.end, !dbg !6064

cond.end:                                         ; preds = %entry, %cond.true
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 1, !dbg !6065
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6065
  %tobool1 = icmp eq %struct.VEC_edge_gc* %0, null, !dbg !6065
  br i1 %tobool1, label %cond.end5, label %cond.true2, !dbg !6065

cond.true2:                                       ; preds = %cond.end
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %0, i64 0, i32 0, !dbg !6065
  br label %cond.end5, !dbg !6065

cond.end5:                                        ; preds = %cond.end, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.end ], !dbg !6065
  %call7 = tail call fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0) #8, !dbg !6065
  ret %struct.edge_def* %call7, !dbg !6066
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !6067 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6071, metadata !DIExpression()), !dbg !6072
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 1, !dbg !6073
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !6073
  %tobool = icmp eq %struct.VEC_edge_gc* %0, null, !dbg !6073
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6073

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %0, i64 0, i32 0, !dbg !6073
  br label %cond.end, !dbg !6073

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6073
  %call = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #8, !dbg !6073
  %cmp = icmp eq i32 %call, 1, !dbg !6074
  %conv2 = zext i1 %cmp to i8, !dbg !6073
  ret i8 %conv2, !dbg !6075
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !6076 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !6082, metadata !DIExpression()), !dbg !6084
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !6083, metadata !DIExpression()), !dbg !6084
  br label %land.end, !dbg !6085

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !6085
  %arrayidx = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6085
  %0 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6085
  ret %struct.edge_def* %0, !dbg !6085
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) unnamed_addr #0 !dbg !6086 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_edge_base* %vec_, metadata !6090, metadata !DIExpression()), !dbg !6091
  %tobool = icmp eq %struct.VEC_edge_base* %vec_, null, !dbg !6092
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6092

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %vec_, i64 0, i32 0, !dbg !6092
  %0 = load i32, i32* %num, align 8, !dbg !6092
  br label %cond.end, !dbg !6092

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !6092
  ret i32 %cond, !dbg !6092
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) unnamed_addr #0 !dbg !6093 {
entry:
  %call = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #8, !dbg !6098
  %tobool = icmp eq %struct.VEC_edge_gc* %call, null, !dbg !6098
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6098

cond.true:                                        ; preds = %entry
  %call1 = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #8, !dbg !6098
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i64 0, i32 0, !dbg !6098
  br label %cond.end, !dbg !6098

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6098
  %call2 = tail call fastcc i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond) #8, !dbg !6098
  %cmp = icmp eq i32 %call2, %i.coerce0, !dbg !6099
  %conv3 = zext i1 %cmp to i8, !dbg !6100
  ret i8 %conv3, !dbg !6101
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) unnamed_addr #0 !dbg !6102 {
entry:
  %call = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #8, !dbg !6107
  %tobool = icmp eq %struct.VEC_edge_gc* %call, null, !dbg !6107
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6107

cond.true:                                        ; preds = %entry
  %call1 = tail call fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #8, !dbg !6107
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i64 0, i32 0, !dbg !6107
  br label %cond.end, !dbg !6107

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6107
  %call2 = tail call fastcc %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %i.coerce0) #8, !dbg !6107
  ret %struct.edge_def* %call2, !dbg !6108
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) unnamed_addr #0 !dbg !6109 {
entry:
  %tobool = icmp eq %struct.VEC_edge_gc** %i.coerce1, null, !dbg !6114
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !6114

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !6114
  br label %cond.end, !dbg !6114

cond.end:                                         ; preds = %entry, %cond.true
  %0 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %i.coerce1, align 8, !dbg !6115
  ret %struct.VEC_edge_gc* %0, !dbg !6116
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @is_phi_for_stmt(%union.gimple_statement_d* %stmt, %union.tree_node* %operand) unnamed_addr #5 !dbg !6117 {
entry:
  %i = alloca %struct.ssa_operand_iterator_d, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6121, metadata !DIExpression()), !dbg !6139
  call void @llvm.dbg.value(metadata %union.tree_node* %operand, metadata !6122, metadata !DIExpression()), !dbg !6139
  %0 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %i, i64 0, i32 0, !dbg !6140
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %0) #7, !dbg !6140
  %1 = getelementptr inbounds %union.tree_node, %union.tree_node* %operand, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6141
  %bf.load = load i64, i64* %1, align 8, !dbg !6141
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !6143
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !6143
  br i1 %cmp, label %if.end, label %cleanup, !dbg !6144

if.end:                                           ; preds = %entry
  %call = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !6145
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6124, metadata !DIExpression()), !dbg !6139
  %def_stmt1 = getelementptr inbounds %union.tree_node, %union.tree_node* %operand, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !6146
  %2 = bitcast %union.tree_node** %def_stmt1 to %union.gimple_statement_d**, !dbg !6146
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %2, align 8, !dbg !6146
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %3, metadata !6123, metadata !DIExpression()), !dbg !6139
  %call2 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %3) #8, !dbg !6147
  %cmp3 = icmp eq i32 %call2, 16, !dbg !6149
  br i1 %cmp3, label %if.end5, label %cleanup, !dbg !6150

if.end5:                                          ; preds = %if.end
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !6126, metadata !DIExpression(DW_OP_deref)), !dbg !6139
  %call6 = call fastcc %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* nonnull %i, %union.gimple_statement_d* %3, i32 1) #8, !dbg !6151
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call6, metadata !6125, metadata !DIExpression()), !dbg !6139
  br label %for.cond, !dbg !6151

for.cond:                                         ; preds = %for.inc, %if.end5
  %arg_p.0 = phi %struct.ssa_use_operand_d* [ %call6, %if.end5 ], [ %call12, %for.inc ], !dbg !6153
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %arg_p.0, metadata !6125, metadata !DIExpression()), !dbg !6139
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !6126, metadata !DIExpression(DW_OP_deref)), !dbg !6139
  %call7 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %i) #8, !dbg !6154
  %tobool = icmp eq i8 %call7, 0, !dbg !6154
  br i1 %tobool, label %for.body, label %cleanup.loopexit, !dbg !6151

for.body:                                         ; preds = %for.cond
  %call8 = call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %arg_p.0) #8, !dbg !6156
  %cmp9 = icmp eq %union.tree_node* %call, %call8, !dbg !6158
  br i1 %cmp9, label %cleanup.loopexit, label %for.inc, !dbg !6159

for.inc:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %i, metadata !6126, metadata !DIExpression(DW_OP_deref)), !dbg !6139
  %call12 = call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* nonnull %i) #8, !dbg !6154
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call12, metadata !6125, metadata !DIExpression()), !dbg !6139
  br label %for.cond, !dbg !6154, !llvm.loop !6160

cleanup.loopexit:                                 ; preds = %for.body, %for.cond
  %retval.0.ph = phi i8 [ 0, %for.cond ], [ 1, %for.body ]
  br label %cleanup, !dbg !6162

cleanup:                                          ; preds = %cleanup.loopexit, %if.end, %entry
  %retval.0 = phi i8 [ 0, %entry ], [ 0, %if.end ], [ %retval.0.ph, %cleanup.loopexit ], !dbg !6139
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %0) #7, !dbg !6162
  ret i8 %retval.0, !dbg !6162
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) unnamed_addr #0 !dbg !6163 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6168, metadata !DIExpression()), !dbg !6173
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %phi, metadata !6169, metadata !DIExpression()), !dbg !6173
  call void @llvm.dbg.value(metadata i32 1, metadata !6170, metadata !DIExpression()), !dbg !6173
  %call = tail call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %phi) #8, !dbg !6174
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !6171, metadata !DIExpression()), !dbg !6173
  tail call fastcc void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #8, !dbg !6175
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !6176
  store i8 0, i8* %done, align 8, !dbg !6177
  %call1 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %call) #6, !dbg !6178
  %tobool = icmp eq i8 %call1, 0, !dbg !6178
  call void @llvm.dbg.value(metadata i1 %tobool, metadata !6172, metadata !DIExpression()), !dbg !6173
  br i1 %tobool, label %if.then, label %if.end, !dbg !6179

if.then:                                          ; preds = %entry
  store i8 1, i8* %done, align 8, !dbg !6180
  br label %cleanup, !dbg !6183

if.end:                                           ; preds = %entry
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !6184
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6185
  %call7 = tail call fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %phi) #8, !dbg !6186
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !6187
  store i32 %call7, i32* %num_phi, align 4, !dbg !6188
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !6189
  store i32 2, i32* %iter_type, align 4, !dbg !6190
  %call8 = tail call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #8, !dbg !6191
  br label %cleanup, !dbg !6192

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi %struct.ssa_use_operand_d* [ null, %if.then ], [ %call8, %if.end ], !dbg !6173
  ret %struct.ssa_use_operand_d* %retval.0, !dbg !6193
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !6194 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6200, metadata !DIExpression()), !dbg !6201
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !6202
  %0 = load i8, i8* %done, align 8, !dbg !6202
  ret i8 %0, !dbg !6203
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) unnamed_addr #0 !dbg !6204 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use, metadata !6208, metadata !DIExpression()), !dbg !6209
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use, i64 0, i32 3, !dbg !6210
  %0 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !6210
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !6211
  ret %union.tree_node* %1, !dbg !6212
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !6213 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6217, metadata !DIExpression()), !dbg !6219
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !6220
  %0 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !6220
  %tobool = icmp eq %struct.use_optype_d* %0, null, !dbg !6222
  br i1 %tobool, label %if.end, label %if.then, !dbg !6223

if.then:                                          ; preds = %entry
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %0, i64 0, i32 1, !dbg !6224
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_ptr, metadata !6218, metadata !DIExpression()), !dbg !6219
  %1 = bitcast %struct.use_optype_d* %0 to i64*, !dbg !6226
  %2 = load i64, i64* %1, align 8, !dbg !6226
  %3 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !6227
  store i64 %2, i64* %3, align 8, !dbg !6227
  br label %cleanup, !dbg !6228

if.end:                                           ; preds = %entry
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !6229
  %4 = load i32, i32* %phi_i, align 8, !dbg !6229
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !6231
  %5 = load i32, i32* %num_phi, align 4, !dbg !6231
  %cmp = icmp slt i32 %4, %5, !dbg !6232
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !6233

if.then4:                                         ; preds = %if.end
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !6234
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6234
  %inc = add nsw i32 %4, 1, !dbg !6234
  store i32 %inc, i32* %phi_i, align 8, !dbg !6234
  %call = tail call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %6, i32 %4) #8, !dbg !6234
  br label %cleanup, !dbg !6236

if.end6:                                          ; preds = %if.end
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !6237
  store i8 1, i8* %done, align 8, !dbg !6238
  br label %cleanup, !dbg !6239

cleanup:                                          ; preds = %if.end6, %if.then4, %if.then
  %retval.0 = phi %struct.ssa_use_operand_d* [ %use_ptr, %if.then ], [ %call, %if.then4 ], [ null, %if.end6 ], !dbg !6219
  ret %struct.ssa_use_operand_d* %retval.0, !dbg !6240
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6241 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6243, metadata !DIExpression()), !dbg !6244
  %result = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !6245
  %0 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !6245
  ret %union.tree_node* %0, !dbg !6246
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !6247 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !6251, metadata !DIExpression()), !dbg !6252
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !6253
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !6254
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !6255
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !6256
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !6257
  store i32 0, i32* %iter_type, align 4, !dbg !6258
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !6259
  store i32 0, i32* %phi_i, align 8, !dbg !6260
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !6261
  store i32 0, i32* %num_phi, align 4, !dbg !6262
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !6263
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !6264
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !6265
  store i8 1, i8* %done, align 8, !dbg !6266
  ret void, !dbg !6267
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6268 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6270, metadata !DIExpression()), !dbg !6271
  %nargs = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 2, !dbg !6272
  %0 = load i32, i32* %nargs, align 4, !dbg !6272
  ret i32 %0, !dbg !6273
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !6274 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6278, metadata !DIExpression()), !dbg !6280
  call void @llvm.dbg.value(metadata i32 %i, metadata !6279, metadata !DIExpression()), !dbg !6280
  %call = tail call fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %i) #8, !dbg !6281
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i64 0, i32 0, !dbg !6282
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !6283
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !6284 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6289, metadata !DIExpression()), !dbg !6291
  call void @llvm.dbg.value(metadata i32 %index, metadata !6290, metadata !DIExpression()), !dbg !6291
  %capacity = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !6292
  %0 = load i32, i32* %capacity, align 8, !dbg !6292
  %cmp = icmp ult i32 %0, %index, !dbg !6292
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !6292

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !6292
  br label %cond.end, !dbg !6292

cond.end:                                         ; preds = %entry, %cond.true
  %idxprom = zext i32 %index to i64, !dbg !6293
  %arrayidx = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 %idxprom, !dbg !6293
  ret %struct.phi_arg_d* %arrayidx, !dbg !6294
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) unnamed_addr #0 !dbg !6295 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !6301, metadata !DIExpression()), !dbg !6304
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !6302, metadata !DIExpression()), !dbg !6304
  call void @llvm.dbg.value(metadata %union.tree_node** %ptr, metadata !6303, metadata !DIExpression()), !dbg !6304
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !6305
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !6305

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !6305
  %0 = load i32, i32* %num, align 8, !dbg !6305
  %cmp = icmp ugt i32 %0, %ix_, !dbg !6305
  br i1 %cmp, label %if.then, label %if.else, !dbg !6307

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !6308
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6308
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6308
  br label %return, !dbg !6308

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !6310

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %union.tree_node* [ null, %if.else ], [ %1, %if.then ], !dbg !6312
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !6312
  store %union.tree_node* %storemerge, %union.tree_node** %ptr, align 8, !dbg !6312
  ret i32 %retval.0, !dbg !6307
}

declare dso_local void @statistics_counter_event(%struct.function*, i8*, i32) local_unnamed_addr #2

declare dso_local void @pointer_map_destroy(%struct.pointer_map_t*) local_unnamed_addr #2

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) unnamed_addr #0 !dbg !6313 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** @broken_up_subtracts, metadata !6317, metadata !DIExpression()), !dbg !6318
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** @broken_up_subtracts, align 8, !dbg !6319
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !6319
  br i1 %tobool, label %if.end, label %if.then, !dbg !6321

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_tree_heap* %0 to i8*, !dbg !6321
  tail call void @free(i8* nonnull %1) #6, !dbg !6319
  br label %if.end, !dbg !6319

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** @broken_up_subtracts, align 8, !dbg !6321
  ret void, !dbg !6321
}

declare dso_local void @free_dominance_info(i32) local_unnamed_addr #2

declare dso_local void @loop_optimizer_finalize() local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind }
attributes #7 = { nounwind }
attributes #8 = { nobuiltin }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2158, !2159, !2160}
!llvm.ident = !{!2161}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_reassoc", scope: !2, file: !3, line: 2082, type: !2132, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !673, globals: !2092, nameTableKind: None)
!3 = !DIFile(filename: "tree-ssa-reassoc.c", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!4 = !{!5, !134, !329, !338, !342, !348, !353, !358, !376, !383, !390, !397, !573, !612, !618, !644, !666}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !135, line: 39, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./tree.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!136 = !{!137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328}
!137 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!141 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!142 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!143 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!144 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!145 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!146 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!147 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!148 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!149 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!150 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!151 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!152 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!153 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!154 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!155 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!156 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!157 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!158 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!159 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!160 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!161 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!162 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!163 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!164 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!165 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!166 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!167 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!168 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!169 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!170 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!171 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!172 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!173 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!174 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!175 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!176 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!177 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!178 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!179 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!180 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!181 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!182 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!183 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!184 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!185 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!186 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!187 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!188 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!189 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!190 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!191 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!192 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!193 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!194 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!195 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!196 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!197 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!198 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!199 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!200 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!201 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!202 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!203 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!204 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!205 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!206 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!207 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!208 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!209 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!210 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!211 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!212 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!213 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!214 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!215 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!216 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!219 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!220 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!221 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!222 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!223 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!224 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!225 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!226 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!227 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!229 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!230 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!231 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!232 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!233 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!234 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!235 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!236 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!237 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!238 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!239 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!240 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!241 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!242 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!243 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!244 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!245 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!246 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!247 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!248 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!249 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!250 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!251 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!252 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!253 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!254 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!255 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!256 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!257 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!258 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!259 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!260 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!261 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!262 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!263 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!264 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!265 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!266 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!267 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!268 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!269 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!270 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!271 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!272 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!273 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!274 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!275 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!276 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!277 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!278 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!279 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!280 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!281 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!282 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!283 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!284 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!285 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!286 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!287 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!288 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!289 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!290 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!291 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!292 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!293 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!294 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!295 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!296 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!297 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!298 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!299 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!300 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!301 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!302 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!303 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!304 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!305 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!306 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!307 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!308 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!309 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!310 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!311 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!312 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!313 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!314 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!315 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!316 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!317 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!318 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!319 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!320 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!321 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!322 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!323 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!324 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!325 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!326 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!327 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!328 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!329 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !330, line: 31, baseType: !7, size: 32, elements: !331)
!330 = !DIFile(filename: "./cfgloop.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!331 = !{!332, !333, !334, !335, !336, !337}
!332 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!333 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!334 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!335 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!336 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!337 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!338 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !330, line: 91, baseType: !7, size: 32, elements: !339)
!339 = !{!340, !341}
!340 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!341 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!342 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !343, line: 363, baseType: !7, size: 32, elements: !344)
!343 = !DIFile(filename: "./basic-block.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!344 = !{!345, !346, !347}
!345 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!346 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!347 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!348 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !343, line: 355, baseType: !7, size: 32, elements: !349)
!349 = !{!350, !351, !352}
!350 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!352 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!353 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !354, line: 474, baseType: !7, size: 32, elements: !355)
!354 = !DIFile(filename: "./config/i386/i386.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!355 = !{!356, !357}
!356 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!358 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !135, line: 280, baseType: !7, size: 32, elements: !359)
!359 = !{!360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375}
!360 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!372 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!373 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!374 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!376 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !135, line: 1817, baseType: !7, size: 32, elements: !377)
!377 = !{!378, !379, !380, !381, !382}
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!379 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!380 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!381 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!383 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !135, line: 1805, baseType: !7, size: 32, elements: !384)
!384 = !{!385, !386, !387, !388, !389}
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!386 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!387 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!388 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!389 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !391, line: 104, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./tree-pass.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!392 = !{!393, !394, !395, !396}
!393 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!395 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!396 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !398, line: 74, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./timevar.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!399 = !{!400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572}
!400 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!403 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!404 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!405 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!406 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!407 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!408 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!409 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!410 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!411 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!412 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!413 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!414 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!415 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!416 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!417 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!418 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!419 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!420 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!421 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!422 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!423 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!424 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!425 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!426 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!427 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!428 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!429 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!430 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!431 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!432 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!433 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!434 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!435 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!436 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!437 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!438 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!439 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!440 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!441 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!442 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!443 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!444 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!445 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!446 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!447 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!448 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!449 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!450 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!451 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!452 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!453 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!454 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!455 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!456 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!457 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!458 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!459 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!460 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!461 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!462 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!463 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!464 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!465 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!466 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!467 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!468 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!469 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!470 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!471 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!472 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!473 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!474 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!475 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!476 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!477 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!478 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!479 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!480 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!481 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!482 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!483 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!484 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!485 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!486 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!487 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!488 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!489 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!490 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!491 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!492 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!493 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!494 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!495 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!496 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!497 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!498 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!499 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!500 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!501 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!502 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!503 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!504 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!505 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!506 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!507 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!508 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!509 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!510 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!511 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!512 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!513 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!514 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!515 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!516 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!517 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!518 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!519 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!520 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!521 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!522 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!523 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!524 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!525 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!526 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!527 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!528 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!529 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!530 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!531 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!532 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!533 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!534 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!535 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!536 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!537 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!538 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!539 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!540 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!541 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!542 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!543 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!544 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!545 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!546 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!547 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!548 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!549 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!550 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!551 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!552 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!553 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!554 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!555 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!556 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!557 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!558 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!559 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!560 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!561 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!562 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!563 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!564 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!565 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!566 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!567 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!568 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!569 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!570 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!571 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!572 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!573 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !574, line: 51, baseType: !7, size: 32, elements: !575)
!574 = !DIFile(filename: "./gimple.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!575 = !{!576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611}
!576 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!577 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!578 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!579 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!580 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!581 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!582 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!583 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!584 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!585 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!586 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!587 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!588 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!589 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!611 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!612 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !574, line: 80, baseType: !7, size: 32, elements: !613)
!613 = !{!614, !615, !616, !617}
!614 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!615 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!616 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!617 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!618 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !574, line: 727, baseType: !7, size: 32, elements: !619)
!619 = !{!620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643}
!620 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!621 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!622 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!623 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!624 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!625 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!626 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!627 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!628 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!629 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!630 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!631 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!632 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!633 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!634 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!635 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!636 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!637 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!638 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!639 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!640 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!641 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!642 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!643 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!644 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !645, line: 36, baseType: !7, size: 32, elements: !646)
!645 = !DIFile(filename: "./machmode.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!646 = !{!647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665}
!647 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!648 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!649 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!650 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!651 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!652 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!653 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!654 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!655 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!656 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!657 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!658 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!659 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!660 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!661 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!662 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!663 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!664 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!665 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!666 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !667, line: 119, baseType: !7, size: 32, elements: !668)
!667 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!668 = !{!669, !670, !671, !672}
!669 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!670 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!671 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!672 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!673 = !{!674, !675, !676, !677, !680, !681, !683, !2041, !2042, !2043, !134, !7, !612, !1014, !2047, !689, !1047, !678, !2049, !816, !2052, !745, !2057, !2069, !644, !5, !2071, !1158, !743, !1507, !2072, !2090}
!674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !675, size: 64)
!675 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!676 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !678, size: 64)
!678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !679, size: 64)
!679 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !682, size: 64)
!682 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !679)
!683 = !DIDerivedType(tag: DW_TAG_typedef, name: "operand_entry_t", file: !3, line: 176, baseType: !684)
!684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !685, size: 64)
!685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "operand_entry", file: !3, line: 172, size: 128, elements: !686)
!686 = !{!687, !688}
!687 = !DIDerivedType(tag: DW_TAG_member, name: "rank", scope: !685, file: !3, line: 174, baseType: !7, size: 32)
!688 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !685, file: !3, line: 175, baseType: !689, size: 64, offset: 64)
!689 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !690, line: 56, baseType: !691)
!690 = !DIFile(filename: "./coretypes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !692, size: 64)
!692 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !135, line: 3371, size: 1792, elements: !693)
!693 = !{!694, !727, !733, !746, !765, !776, !781, !790, !796, !809, !821, !859, !1369, !1397, !1414, !1415, !1420, !1429, !1435, !1440, !1444, !1448, !1692, !1739, !1745, !1751, !1758, !1771, !1785, !1802, !1814, !1836, !1851, !2023}
!694 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !692, file: !135, line: 3372, baseType: !695, size: 64)
!695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !135, line: 360, size: 64, elements: !696)
!696 = !{!697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726}
!697 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !695, file: !135, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !695, file: !135, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !695, file: !135, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !695, file: !135, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !695, file: !135, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !695, file: !135, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !695, file: !135, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !695, file: !135, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !695, file: !135, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !695, file: !135, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!707 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !695, file: !135, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !695, file: !135, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !695, file: !135, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!710 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !695, file: !135, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !695, file: !135, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!712 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !695, file: !135, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !695, file: !135, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !695, file: !135, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !695, file: !135, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !695, file: !135, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !695, file: !135, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !695, file: !135, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !695, file: !135, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !695, file: !135, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !695, file: !135, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !695, file: !135, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !695, file: !135, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !695, file: !135, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !695, file: !135, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !695, file: !135, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !692, file: !135, line: 3373, baseType: !728, size: 192)
!728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !135, line: 402, size: 192, elements: !729)
!729 = !{!730, !731, !732}
!730 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !728, file: !135, line: 403, baseType: !695, size: 64)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !728, file: !135, line: 404, baseType: !689, size: 64, offset: 64)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !728, file: !135, line: 405, baseType: !689, size: 64, offset: 128)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !692, file: !135, line: 3374, baseType: !734, size: 320)
!734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !135, line: 1384, size: 320, elements: !735)
!735 = !{!736, !737}
!736 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !734, file: !135, line: 1385, baseType: !728, size: 192)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !734, file: !135, line: 1386, baseType: !738, size: 128, offset: 192)
!738 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !739, line: 58, baseType: !740)
!739 = !DIFile(filename: "./double-int.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!740 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !739, line: 54, size: 128, elements: !741)
!741 = !{!742, !744}
!742 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !740, file: !739, line: 56, baseType: !743, size: 64)
!743 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !740, file: !739, line: 57, baseType: !745, size: 64, offset: 64)
!745 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !692, file: !135, line: 3375, baseType: !747, size: 256)
!747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !135, line: 1397, size: 256, elements: !748)
!748 = !{!749, !750}
!749 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !747, file: !135, line: 1398, baseType: !728, size: 192)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !747, file: !135, line: 1399, baseType: !751, size: 64, offset: 192)
!751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !752, size: 64)
!752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !753, line: 52, size: 256, elements: !754)
!753 = !DIFile(filename: "./real.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!754 = !{!755, !756, !757, !758, !759, !760, !761}
!755 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !752, file: !753, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !752, file: !753, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !752, file: !753, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!758 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !752, file: !753, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !752, file: !753, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !752, file: !753, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !752, file: !753, line: 62, baseType: !762, size: 192, offset: 64)
!762 = !DICompositeType(tag: DW_TAG_array_type, baseType: !743, size: 192, elements: !763)
!763 = !{!764}
!764 = !DISubrange(count: 3)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !692, file: !135, line: 3376, baseType: !766, size: 256)
!766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !135, line: 1408, size: 256, elements: !767)
!767 = !{!768, !769}
!768 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !766, file: !135, line: 1409, baseType: !728, size: 192)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !766, file: !135, line: 1410, baseType: !770, size: 64, offset: 192)
!770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !771, size: 64)
!771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !772, line: 27, size: 192, elements: !773)
!772 = !DIFile(filename: "./fixed-value.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!773 = !{!774, !775}
!774 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !771, file: !772, line: 29, baseType: !738, size: 128)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !771, file: !772, line: 30, baseType: !5, size: 32, offset: 128)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !692, file: !135, line: 3377, baseType: !777, size: 256)
!777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !135, line: 1437, size: 256, elements: !778)
!778 = !{!779, !780}
!779 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !777, file: !135, line: 1438, baseType: !728, size: 192)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !777, file: !135, line: 1439, baseType: !689, size: 64, offset: 192)
!781 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !692, file: !135, line: 3378, baseType: !782, size: 256)
!782 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !135, line: 1418, size: 256, elements: !783)
!783 = !{!784, !785, !786}
!784 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !782, file: !135, line: 1419, baseType: !728, size: 192)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !782, file: !135, line: 1420, baseType: !676, size: 32, offset: 192)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !782, file: !135, line: 1421, baseType: !787, size: 8, offset: 224)
!787 = !DICompositeType(tag: DW_TAG_array_type, baseType: !679, size: 8, elements: !788)
!788 = !{!789}
!789 = !DISubrange(count: 1)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !692, file: !135, line: 3379, baseType: !791, size: 320)
!791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !135, line: 1428, size: 320, elements: !792)
!792 = !{!793, !794, !795}
!793 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !791, file: !135, line: 1429, baseType: !728, size: 192)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !791, file: !135, line: 1430, baseType: !689, size: 64, offset: 192)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !791, file: !135, line: 1431, baseType: !689, size: 64, offset: 256)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !692, file: !135, line: 3380, baseType: !797, size: 320)
!797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !135, line: 1460, size: 320, elements: !798)
!798 = !{!799, !800}
!799 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !797, file: !135, line: 1461, baseType: !728, size: 192)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !797, file: !135, line: 1462, baseType: !801, size: 128, offset: 192)
!801 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !802, line: 31, size: 128, elements: !803)
!802 = !DIFile(filename: "./symtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!803 = !{!804, !807, !808}
!804 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !801, file: !802, line: 32, baseType: !805, size: 64)
!805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !806, size: 64)
!806 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !675)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !801, file: !802, line: 33, baseType: !7, size: 32, offset: 64)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !801, file: !802, line: 34, baseType: !7, size: 32, offset: 96)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !692, file: !135, line: 3381, baseType: !810, size: 384)
!810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !135, line: 2507, size: 384, elements: !811)
!811 = !{!812, !813, !818, !819, !820}
!812 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !810, file: !135, line: 2508, baseType: !728, size: 192)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !810, file: !135, line: 2509, baseType: !814, size: 32, offset: 192)
!814 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !815, line: 58, baseType: !816)
!815 = !DIFile(filename: "./input.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!816 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !817, line: 44, baseType: !7)
!817 = !DIFile(filename: "./line-map.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!818 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !810, file: !135, line: 2510, baseType: !7, size: 32, offset: 224)
!819 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !810, file: !135, line: 2511, baseType: !689, size: 64, offset: 256)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !810, file: !135, line: 2512, baseType: !689, size: 64, offset: 320)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !692, file: !135, line: 3382, baseType: !822, size: 896)
!822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !135, line: 2652, size: 896, elements: !823)
!823 = !{!824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856}
!824 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !822, file: !135, line: 2653, baseType: !810, size: 384)
!825 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !822, file: !135, line: 2654, baseType: !689, size: 64, offset: 384)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !822, file: !135, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !822, file: !135, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !822, file: !135, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !822, file: !135, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !822, file: !135, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !822, file: !135, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !822, file: !135, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !822, file: !135, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !822, file: !135, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !822, file: !135, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !822, file: !135, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !822, file: !135, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !822, file: !135, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !822, file: !135, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !822, file: !135, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !822, file: !135, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !822, file: !135, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !822, file: !135, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !822, file: !135, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !822, file: !135, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !822, file: !135, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !822, file: !135, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !822, file: !135, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !822, file: !135, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !822, file: !135, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !822, file: !135, line: 2703, baseType: !7, size: 32, offset: 512)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !822, file: !135, line: 2705, baseType: !689, size: 64, offset: 576)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !822, file: !135, line: 2706, baseType: !689, size: 64, offset: 640)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !822, file: !135, line: 2707, baseType: !689, size: 64, offset: 704)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !822, file: !135, line: 2708, baseType: !689, size: 64, offset: 768)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !822, file: !135, line: 2711, baseType: !857, size: 64, offset: 832)
!857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !858, size: 64)
!858 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !135, line: 2711, flags: DIFlagFwdDecl)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !692, file: !135, line: 3383, baseType: !860, size: 960)
!860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !135, line: 2756, size: 960, elements: !861)
!861 = !{!862, !863}
!862 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !860, file: !135, line: 2757, baseType: !822, size: 896)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !860, file: !135, line: 2758, baseType: !864, size: 64, offset: 896)
!864 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !690, line: 50, baseType: !865)
!865 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !866, size: 64)
!866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !867, line: 240, size: 384, elements: !868)
!867 = !DIFile(filename: "./rtl.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!868 = !{!869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879}
!869 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !866, file: !867, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !866, file: !867, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !866, file: !867, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !866, file: !867, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !866, file: !867, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !866, file: !867, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !866, file: !867, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !866, file: !867, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !866, file: !867, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !866, file: !867, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !866, file: !867, line: 321, baseType: !880, size: 320, offset: 64)
!880 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !867, line: 315, size: 320, elements: !881)
!881 = !{!882, !1336, !1338, !1367, !1368}
!882 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !880, file: !867, line: 316, baseType: !883, size: 64)
!883 = !DICompositeType(tag: DW_TAG_array_type, baseType: !884, size: 64, elements: !788)
!884 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !867, line: 183, baseType: !885)
!885 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !867, line: 166, size: 64, elements: !886)
!886 = !{!887, !888, !889, !890, !891, !899, !900, !912, !915, !975, !976, !1313, !1326, !1333}
!887 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !885, file: !867, line: 168, baseType: !676, size: 32)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !885, file: !867, line: 169, baseType: !7, size: 32)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !885, file: !867, line: 170, baseType: !681, size: 64)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !885, file: !867, line: 171, baseType: !864, size: 64)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !885, file: !867, line: 172, baseType: !892, size: 64)
!892 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !690, line: 53, baseType: !893)
!893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !894, size: 64)
!894 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !867, line: 359, size: 128, elements: !895)
!895 = !{!896, !897}
!896 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !894, file: !867, line: 360, baseType: !676, size: 32)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !894, file: !867, line: 361, baseType: !898, size: 64, offset: 64)
!898 = !DICompositeType(tag: DW_TAG_array_type, baseType: !864, size: 64, elements: !788)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !885, file: !867, line: 173, baseType: !5, size: 32)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !885, file: !867, line: 174, baseType: !901, size: 32)
!901 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !867, line: 133, baseType: !902)
!902 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !867, line: 115, size: 32, elements: !903)
!903 = !{!904, !905, !906, !907, !908, !909, !910, !911}
!904 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !902, file: !867, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !902, file: !867, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !902, file: !867, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !902, file: !867, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !902, file: !867, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !902, file: !867, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !902, file: !867, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !902, file: !867, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !885, file: !867, line: 175, baseType: !913, size: 64)
!913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !914, size: 64)
!914 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !867, line: 175, flags: DIFlagFwdDecl)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !885, file: !867, line: 176, baseType: !916, size: 64)
!916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !917, size: 64)
!917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !918, line: 75, size: 256, elements: !919)
!918 = !DIFile(filename: "./bitmap.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!919 = !{!920, !934, !935, !936}
!920 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !917, file: !918, line: 76, baseType: !921, size: 64)
!921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !922, size: 64)
!922 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !918, line: 68, baseType: !923)
!923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !918, line: 63, size: 320, elements: !924)
!924 = !{!925, !927, !928, !929}
!925 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !923, file: !918, line: 64, baseType: !926, size: 64)
!926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !923, size: 64)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !923, file: !918, line: 65, baseType: !926, size: 64, offset: 64)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !923, file: !918, line: 66, baseType: !7, size: 32, offset: 128)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !923, file: !918, line: 67, baseType: !930, size: 128, offset: 192)
!930 = !DICompositeType(tag: DW_TAG_array_type, baseType: !931, size: 128, elements: !932)
!931 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !918, line: 29, baseType: !743)
!932 = !{!933}
!933 = !DISubrange(count: 2)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !917, file: !918, line: 77, baseType: !921, size: 64, offset: 64)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !917, file: !918, line: 78, baseType: !7, size: 32, offset: 128)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !917, file: !918, line: 79, baseType: !937, size: 64, offset: 192)
!937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64)
!938 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !918, line: 49, baseType: !939)
!939 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !918, line: 45, size: 832, elements: !940)
!940 = !{!941, !942, !943}
!941 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !939, file: !918, line: 46, baseType: !926, size: 64)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !939, file: !918, line: 47, baseType: !916, size: 64, offset: 64)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !939, file: !918, line: 48, baseType: !944, size: 704, offset: 128)
!944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !945, line: 164, size: 704, elements: !946)
!945 = !DIFile(filename: "./include/obstack.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!946 = !{!947, !948, !958, !959, !960, !961, !962, !963, !967, !971, !972, !973, !974}
!947 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !944, file: !945, line: 166, baseType: !745, size: 64)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !944, file: !945, line: 167, baseType: !949, size: 64, offset: 64)
!949 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !950, size: 64)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !945, line: 157, size: 192, elements: !951)
!951 = !{!952, !953, !954}
!952 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !950, file: !945, line: 159, baseType: !678, size: 64)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !950, file: !945, line: 160, baseType: !949, size: 64, offset: 64)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !950, file: !945, line: 161, baseType: !955, size: 32, offset: 128)
!955 = !DICompositeType(tag: DW_TAG_array_type, baseType: !679, size: 32, elements: !956)
!956 = !{!957}
!957 = !DISubrange(count: 4)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !944, file: !945, line: 168, baseType: !678, size: 64, offset: 128)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !944, file: !945, line: 169, baseType: !678, size: 64, offset: 192)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !944, file: !945, line: 170, baseType: !678, size: 64, offset: 256)
!961 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !944, file: !945, line: 171, baseType: !745, size: 64, offset: 320)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !944, file: !945, line: 172, baseType: !676, size: 32, offset: 384)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !944, file: !945, line: 176, baseType: !964, size: 64, offset: 448)
!964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !965, size: 64)
!965 = !DISubroutineType(types: !966)
!966 = !{!949, !680, !745}
!967 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !944, file: !945, line: 177, baseType: !968, size: 64, offset: 512)
!968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !969, size: 64)
!969 = !DISubroutineType(types: !970)
!970 = !{null, !680, !949}
!971 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !944, file: !945, line: 178, baseType: !680, size: 64, offset: 576)
!972 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !944, file: !945, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!973 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !944, file: !945, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !944, file: !945, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !885, file: !867, line: 177, baseType: !689, size: 64)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !885, file: !867, line: 178, baseType: !977, size: 64)
!977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !978, size: 64)
!978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !343, line: 217, size: 832, elements: !979)
!979 = !{!980, !1225, !1226, !1227, !1283, !1287, !1288, !1289, !1307, !1308, !1309, !1310, !1311, !1312}
!980 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !978, file: !343, line: 219, baseType: !981, size: 64)
!981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !982, size: 64)
!982 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !343, line: 151, baseType: !983)
!983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !343, line: 151, size: 128, elements: !984)
!984 = !{!985}
!985 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !983, file: !343, line: 151, baseType: !986, size: 128)
!986 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !343, line: 150, baseType: !987)
!987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !343, line: 150, size: 128, elements: !988)
!988 = !{!989, !990, !991}
!989 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !987, file: !343, line: 150, baseType: !7, size: 32)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !987, file: !343, line: 150, baseType: !7, size: 32, offset: 32)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !987, file: !343, line: 150, baseType: !992, size: 64, offset: 64)
!992 = !DICompositeType(tag: DW_TAG_array_type, baseType: !993, size: 64, elements: !788)
!993 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !690, line: 108, baseType: !994)
!994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !995, size: 64)
!995 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !343, line: 122, size: 512, elements: !996)
!996 = !{!997, !998, !999, !1217, !1218, !1219, !1220, !1221, !1222, !1223}
!997 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !995, file: !343, line: 124, baseType: !977, size: 64)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !995, file: !343, line: 125, baseType: !977, size: 64, offset: 64)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !995, file: !343, line: 131, baseType: !1000, size: 64, offset: 128)
!1000 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !343, line: 128, size: 64, elements: !1001)
!1001 = !{!1002, !1216}
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1000, file: !343, line: 129, baseType: !1003, size: 64)
!1003 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !690, line: 66, baseType: !1004)
!1004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1005, size: 64)
!1005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !574, line: 143, size: 192, elements: !1006)
!1006 = !{!1007, !1214, !1215}
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !1005, file: !574, line: 145, baseType: !1008, size: 64)
!1008 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !690, line: 69, baseType: !1009)
!1009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1010, size: 64)
!1010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !574, line: 136, size: 192, elements: !1011)
!1011 = !{!1012, !1212, !1213}
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1010, file: !574, line: 137, baseType: !1013, size: 64)
!1013 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !690, line: 58, baseType: !1014)
!1014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1015, size: 64)
!1015 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !574, line: 737, size: 768, elements: !1016)
!1016 = !{!1017, !1034, !1067, !1073, !1078, !1083, !1090, !1096, !1102, !1107, !1121, !1126, !1132, !1137, !1147, !1152, !1170, !1177, !1184, !1190, !1195, !1201, !1207}
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1015, file: !574, line: 738, baseType: !1018, size: 256)
!1018 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !574, line: 271, size: 256, elements: !1019)
!1019 = !{!1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033}
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1018, file: !574, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !1018, file: !574, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1018, file: !574, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !1018, file: !574, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !1018, file: !574, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !1018, file: !574, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !1018, file: !574, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !1018, file: !574, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1018, file: !574, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1018, file: !574, line: 312, baseType: !7, size: 32, offset: 32)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !1018, file: !574, line: 316, baseType: !814, size: 32, offset: 64)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !1018, file: !574, line: 319, baseType: !7, size: 32, offset: 96)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !1018, file: !574, line: 323, baseType: !977, size: 64, offset: 128)
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1018, file: !574, line: 327, baseType: !689, size: 64, offset: 192)
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !1015, file: !574, line: 739, baseType: !1035, size: 448)
!1035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !574, line: 350, size: 448, elements: !1036)
!1036 = !{!1037, !1065}
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1035, file: !574, line: 353, baseType: !1038, size: 384)
!1038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !574, line: 333, size: 384, elements: !1039)
!1039 = !{!1040, !1041, !1048}
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1038, file: !574, line: 336, baseType: !1018, size: 256)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1038, file: !574, line: 343, baseType: !1042, size: 64, offset: 256)
!1042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !667, line: 37, size: 128, elements: !1044)
!1044 = !{!1045, !1046}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1043, file: !667, line: 39, baseType: !1042, size: 64)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1043, file: !667, line: 40, baseType: !1047, size: 64, offset: 64)
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !689, size: 64)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1038, file: !574, line: 344, baseType: !1049, size: 64, offset: 320)
!1049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1050, size: 64)
!1050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !667, line: 45, size: 320, elements: !1051)
!1051 = !{!1052, !1053}
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1050, file: !667, line: 47, baseType: !1049, size: 64)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1050, file: !667, line: 48, baseType: !1054, size: 256, offset: 64)
!1054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !135, line: 1883, size: 256, elements: !1055)
!1055 = !{!1056, !1058, !1059, !1064}
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1054, file: !135, line: 1884, baseType: !1057, size: 64)
!1057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1054, size: 64)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1054, file: !135, line: 1885, baseType: !1057, size: 64, offset: 64)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1054, file: !135, line: 1891, baseType: !1060, size: 64, offset: 128)
!1060 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1054, file: !135, line: 1891, size: 64, elements: !1061)
!1061 = !{!1062, !1063}
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1060, file: !135, line: 1891, baseType: !1013, size: 64)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1060, file: !135, line: 1891, baseType: !689, size: 64)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1054, file: !135, line: 1892, baseType: !1047, size: 64, offset: 192)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1035, file: !574, line: 359, baseType: !1066, size: 64, offset: 384)
!1066 = !DICompositeType(tag: DW_TAG_array_type, baseType: !689, size: 64, elements: !788)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !1015, file: !574, line: 740, baseType: !1068, size: 512)
!1068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !574, line: 365, size: 512, elements: !1069)
!1069 = !{!1070, !1071, !1072}
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1068, file: !574, line: 368, baseType: !1038, size: 384)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1068, file: !574, line: 373, baseType: !689, size: 64, offset: 384)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1068, file: !574, line: 374, baseType: !689, size: 64, offset: 448)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !1015, file: !574, line: 741, baseType: !1074, size: 576)
!1074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !574, line: 380, size: 576, elements: !1075)
!1075 = !{!1076, !1077}
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1074, file: !574, line: 383, baseType: !1068, size: 512)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1074, file: !574, line: 389, baseType: !1066, size: 64, offset: 512)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1015, file: !574, line: 742, baseType: !1079, size: 320)
!1079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !574, line: 395, size: 320, elements: !1080)
!1080 = !{!1081, !1082}
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1079, file: !574, line: 397, baseType: !1018, size: 256)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1079, file: !574, line: 400, baseType: !1003, size: 64, offset: 256)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !1015, file: !574, line: 743, baseType: !1084, size: 448)
!1084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !574, line: 406, size: 448, elements: !1085)
!1085 = !{!1086, !1087, !1088, !1089}
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1084, file: !574, line: 408, baseType: !1018, size: 256)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1084, file: !574, line: 412, baseType: !689, size: 64, offset: 256)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1084, file: !574, line: 420, baseType: !689, size: 64, offset: 320)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1084, file: !574, line: 423, baseType: !1003, size: 64, offset: 384)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !1015, file: !574, line: 744, baseType: !1091, size: 384)
!1091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !574, line: 429, size: 384, elements: !1092)
!1092 = !{!1093, !1094, !1095}
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1091, file: !574, line: 431, baseType: !1018, size: 256)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1091, file: !574, line: 434, baseType: !689, size: 64, offset: 256)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1091, file: !574, line: 437, baseType: !1003, size: 64, offset: 320)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !1015, file: !574, line: 745, baseType: !1097, size: 384)
!1097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !574, line: 443, size: 384, elements: !1098)
!1098 = !{!1099, !1100, !1101}
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1097, file: !574, line: 445, baseType: !1018, size: 256)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1097, file: !574, line: 449, baseType: !689, size: 64, offset: 256)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1097, file: !574, line: 453, baseType: !1003, size: 64, offset: 320)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !1015, file: !574, line: 746, baseType: !1103, size: 320)
!1103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !574, line: 459, size: 320, elements: !1104)
!1104 = !{!1105, !1106}
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1103, file: !574, line: 461, baseType: !1018, size: 256)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1103, file: !574, line: 464, baseType: !689, size: 64, offset: 256)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !1015, file: !574, line: 747, baseType: !1108, size: 768)
!1108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !574, line: 469, size: 768, elements: !1109)
!1109 = !{!1110, !1111, !1112, !1113, !1114}
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1108, file: !574, line: 471, baseType: !1018, size: 256)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1108, file: !574, line: 474, baseType: !7, size: 32, offset: 256)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1108, file: !574, line: 475, baseType: !7, size: 32, offset: 288)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1108, file: !574, line: 478, baseType: !689, size: 64, offset: 320)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1108, file: !574, line: 481, baseType: !1115, size: 384, offset: 384)
!1115 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1116, size: 384, elements: !788)
!1116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !135, line: 1917, size: 384, elements: !1117)
!1117 = !{!1118, !1119, !1120}
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1116, file: !135, line: 1920, baseType: !1054, size: 256)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1116, file: !135, line: 1921, baseType: !689, size: 64, offset: 256)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1116, file: !135, line: 1922, baseType: !814, size: 32, offset: 320)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !1015, file: !574, line: 748, baseType: !1122, size: 320)
!1122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !574, line: 487, size: 320, elements: !1123)
!1123 = !{!1124, !1125}
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1122, file: !574, line: 490, baseType: !1018, size: 256)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1122, file: !574, line: 494, baseType: !676, size: 32, offset: 256)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !1015, file: !574, line: 749, baseType: !1127, size: 384)
!1127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !574, line: 500, size: 384, elements: !1128)
!1128 = !{!1129, !1130, !1131}
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1127, file: !574, line: 502, baseType: !1018, size: 256)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1127, file: !574, line: 506, baseType: !1003, size: 64, offset: 256)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1127, file: !574, line: 510, baseType: !1003, size: 64, offset: 320)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !1015, file: !574, line: 750, baseType: !1133, size: 320)
!1133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !574, line: 529, size: 320, elements: !1134)
!1134 = !{!1135, !1136}
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1133, file: !574, line: 531, baseType: !1018, size: 256)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1133, file: !574, line: 540, baseType: !1003, size: 64, offset: 256)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !1015, file: !574, line: 751, baseType: !1138, size: 704)
!1138 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !574, line: 546, size: 704, elements: !1139)
!1139 = !{!1140, !1141, !1142, !1143, !1144, !1145, !1146}
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1138, file: !574, line: 549, baseType: !1068, size: 512)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1138, file: !574, line: 553, baseType: !681, size: 64, offset: 512)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1138, file: !574, line: 557, baseType: !675, size: 8, offset: 576)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1138, file: !574, line: 558, baseType: !675, size: 8, offset: 584)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1138, file: !574, line: 559, baseType: !675, size: 8, offset: 592)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1138, file: !574, line: 560, baseType: !675, size: 8, offset: 600)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1138, file: !574, line: 566, baseType: !1066, size: 64, offset: 640)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !1015, file: !574, line: 752, baseType: !1148, size: 384)
!1148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !574, line: 571, size: 384, elements: !1149)
!1149 = !{!1150, !1151}
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1148, file: !574, line: 573, baseType: !1079, size: 320)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1148, file: !574, line: 577, baseType: !689, size: 64, offset: 320)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !1015, file: !574, line: 753, baseType: !1153, size: 576)
!1153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !574, line: 600, size: 576, elements: !1154)
!1154 = !{!1155, !1156, !1157, !1160, !1169}
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1153, file: !574, line: 602, baseType: !1079, size: 320)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1153, file: !574, line: 605, baseType: !689, size: 64, offset: 320)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1153, file: !574, line: 609, baseType: !1158, size: 64, offset: 384)
!1158 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1159, line: 46, baseType: !743)
!1159 = !DIFile(filename: "/scratch/install/llvm-install-release/lib/clang/9.0.1/include/stddef.h", directory: "")
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1153, file: !574, line: 612, baseType: !1161, size: 64, offset: 448)
!1161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1162, size: 64)
!1162 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !574, line: 581, size: 320, elements: !1163)
!1163 = !{!1164, !1165, !1166, !1167, !1168}
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1162, file: !574, line: 583, baseType: !134, size: 32)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1162, file: !574, line: 586, baseType: !689, size: 64, offset: 64)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1162, file: !574, line: 589, baseType: !689, size: 64, offset: 128)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1162, file: !574, line: 592, baseType: !689, size: 64, offset: 192)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1162, file: !574, line: 595, baseType: !689, size: 64, offset: 256)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1153, file: !574, line: 616, baseType: !1003, size: 64, offset: 512)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !1015, file: !574, line: 754, baseType: !1171, size: 512)
!1171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !574, line: 622, size: 512, elements: !1172)
!1172 = !{!1173, !1174, !1175, !1176}
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1171, file: !574, line: 624, baseType: !1079, size: 320)
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1171, file: !574, line: 628, baseType: !689, size: 64, offset: 320)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1171, file: !574, line: 632, baseType: !689, size: 64, offset: 384)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1171, file: !574, line: 636, baseType: !689, size: 64, offset: 448)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !1015, file: !574, line: 755, baseType: !1178, size: 704)
!1178 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !574, line: 642, size: 704, elements: !1179)
!1179 = !{!1180, !1181, !1182, !1183}
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1178, file: !574, line: 644, baseType: !1171, size: 512)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1178, file: !574, line: 648, baseType: !689, size: 64, offset: 512)
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1178, file: !574, line: 652, baseType: !689, size: 64, offset: 576)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1178, file: !574, line: 653, baseType: !689, size: 64, offset: 640)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !1015, file: !574, line: 756, baseType: !1185, size: 448)
!1185 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !574, line: 663, size: 448, elements: !1186)
!1186 = !{!1187, !1188, !1189}
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1185, file: !574, line: 665, baseType: !1079, size: 320)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1185, file: !574, line: 668, baseType: !689, size: 64, offset: 320)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1185, file: !574, line: 673, baseType: !689, size: 64, offset: 384)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !1015, file: !574, line: 757, baseType: !1191, size: 384)
!1191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !574, line: 694, size: 384, elements: !1192)
!1192 = !{!1193, !1194}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1191, file: !574, line: 696, baseType: !1079, size: 320)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1191, file: !574, line: 699, baseType: !689, size: 64, offset: 320)
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !1015, file: !574, line: 758, baseType: !1196, size: 384)
!1196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !574, line: 681, size: 384, elements: !1197)
!1197 = !{!1198, !1199, !1200}
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1196, file: !574, line: 683, baseType: !1018, size: 256)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1196, file: !574, line: 686, baseType: !689, size: 64, offset: 256)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1196, file: !574, line: 689, baseType: !689, size: 64, offset: 320)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !1015, file: !574, line: 759, baseType: !1202, size: 384)
!1202 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !574, line: 707, size: 384, elements: !1203)
!1203 = !{!1204, !1205, !1206}
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1202, file: !574, line: 709, baseType: !1018, size: 256)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1202, file: !574, line: 712, baseType: !689, size: 64, offset: 256)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1202, file: !574, line: 712, baseType: !689, size: 64, offset: 320)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !1015, file: !574, line: 760, baseType: !1208, size: 320)
!1208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !574, line: 718, size: 320, elements: !1209)
!1209 = !{!1210, !1211}
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1208, file: !574, line: 720, baseType: !1018, size: 256)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1208, file: !574, line: 723, baseType: !689, size: 64, offset: 256)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1010, file: !574, line: 138, baseType: !1009, size: 64, offset: 64)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1010, file: !574, line: 139, baseType: !1009, size: 64, offset: 128)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !1005, file: !574, line: 146, baseType: !1008, size: 64, offset: 64)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !1005, file: !574, line: 152, baseType: !1003, size: 64, offset: 128)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1000, file: !343, line: 130, baseType: !864, size: 64)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !995, file: !343, line: 134, baseType: !680, size: 64, offset: 192)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !995, file: !343, line: 137, baseType: !689, size: 64, offset: 256)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !995, file: !343, line: 138, baseType: !814, size: 32, offset: 320)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !995, file: !343, line: 142, baseType: !7, size: 32, offset: 352)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !995, file: !343, line: 144, baseType: !676, size: 32, offset: 384)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !995, file: !343, line: 145, baseType: !676, size: 32, offset: 416)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !995, file: !343, line: 146, baseType: !1224, size: 64, offset: 448)
!1224 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !343, line: 119, baseType: !745)
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !978, file: !343, line: 220, baseType: !981, size: 64, offset: 64)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !978, file: !343, line: 223, baseType: !680, size: 64, offset: 128)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !978, file: !343, line: 226, baseType: !1228, size: 64, offset: 192)
!1228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1229, size: 64)
!1229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !330, line: 100, size: 1216, elements: !1230)
!1230 = !{!1231, !1232, !1233, !1234, !1235, !1240, !1241, !1242, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1273, !1281, !1282}
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1229, file: !330, line: 102, baseType: !676, size: 32)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1229, file: !330, line: 105, baseType: !7, size: 32, offset: 32)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1229, file: !330, line: 108, baseType: !977, size: 64, offset: 64)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1229, file: !330, line: 111, baseType: !977, size: 64, offset: 128)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1229, file: !330, line: 114, baseType: !1236, size: 64, offset: 192)
!1236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !330, line: 41, size: 64, elements: !1237)
!1237 = !{!1238, !1239}
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1236, file: !330, line: 42, baseType: !329, size: 32)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1236, file: !330, line: 43, baseType: !7, size: 32, offset: 32)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1229, file: !330, line: 117, baseType: !7, size: 32, offset: 256)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1229, file: !330, line: 120, baseType: !7, size: 32, offset: 288)
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1229, file: !330, line: 123, baseType: !1243, size: 64, offset: 320)
!1243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1244, size: 64)
!1244 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !330, line: 87, baseType: !1245)
!1245 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !330, line: 87, size: 128, elements: !1246)
!1246 = !{!1247}
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1245, file: !330, line: 87, baseType: !1248, size: 128)
!1248 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !330, line: 85, baseType: !1249)
!1249 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !330, line: 85, size: 128, elements: !1250)
!1250 = !{!1251, !1252, !1253}
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1249, file: !330, line: 85, baseType: !7, size: 32)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1249, file: !330, line: 85, baseType: !7, size: 32, offset: 32)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1249, file: !330, line: 85, baseType: !1254, size: 64, offset: 64)
!1254 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1255, size: 64, elements: !788)
!1255 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !330, line: 84, baseType: !1228)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1229, file: !330, line: 126, baseType: !1228, size: 64, offset: 384)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1229, file: !330, line: 129, baseType: !1228, size: 64, offset: 448)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1229, file: !330, line: 132, baseType: !680, size: 64, offset: 512)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1229, file: !330, line: 139, baseType: !689, size: 64, offset: 576)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1229, file: !330, line: 143, baseType: !738, size: 128, offset: 640)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1229, file: !330, line: 146, baseType: !738, size: 128, offset: 768)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1229, file: !330, line: 148, baseType: !675, size: 8, offset: 896)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1229, file: !330, line: 149, baseType: !675, size: 8, offset: 904)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1229, file: !330, line: 153, baseType: !338, size: 32, offset: 928)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1229, file: !330, line: 156, baseType: !1266, size: 64, offset: 960)
!1266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1267, size: 64)
!1267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !330, line: 48, size: 320, elements: !1268)
!1268 = !{!1269, !1270, !1271, !1272}
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1267, file: !330, line: 50, baseType: !1013, size: 64)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1267, file: !330, line: 59, baseType: !738, size: 128, offset: 64)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1267, file: !330, line: 64, baseType: !675, size: 8, offset: 192)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1267, file: !330, line: 67, baseType: !1266, size: 64, offset: 256)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1229, file: !330, line: 159, baseType: !1274, size: 64, offset: 1024)
!1274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1275, size: 64)
!1275 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !330, line: 72, size: 256, elements: !1276)
!1276 = !{!1277, !1278, !1279, !1280}
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1275, file: !330, line: 74, baseType: !994, size: 64)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1275, file: !330, line: 77, baseType: !1274, size: 64, offset: 64)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1275, file: !330, line: 78, baseType: !1274, size: 64, offset: 128)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1275, file: !330, line: 81, baseType: !1274, size: 64, offset: 192)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1229, file: !330, line: 162, baseType: !675, size: 8, offset: 1088)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1229, file: !330, line: 166, baseType: !689, size: 64, offset: 1152)
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !978, file: !343, line: 229, baseType: !1284, size: 128, offset: 256)
!1284 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1285, size: 128, elements: !932)
!1285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1286, size: 64)
!1286 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !343, line: 229, flags: DIFlagFwdDecl)
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !978, file: !343, line: 232, baseType: !977, size: 64, offset: 384)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !978, file: !343, line: 233, baseType: !977, size: 64, offset: 448)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !978, file: !343, line: 238, baseType: !1290, size: 64, offset: 512)
!1290 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !343, line: 235, size: 64, elements: !1291)
!1291 = !{!1292, !1298}
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1290, file: !343, line: 236, baseType: !1293, size: 64)
!1293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1294, size: 64)
!1294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !343, line: 273, size: 128, elements: !1295)
!1295 = !{!1296, !1297}
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1294, file: !343, line: 275, baseType: !1003, size: 64)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1294, file: !343, line: 278, baseType: !1003, size: 64, offset: 64)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1290, file: !343, line: 237, baseType: !1299, size: 64)
!1299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1300, size: 64)
!1300 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !343, line: 259, size: 320, elements: !1301)
!1301 = !{!1302, !1303, !1304, !1305, !1306}
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1300, file: !343, line: 261, baseType: !864, size: 64)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1300, file: !343, line: 262, baseType: !864, size: 64, offset: 64)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1300, file: !343, line: 266, baseType: !864, size: 64, offset: 128)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1300, file: !343, line: 267, baseType: !864, size: 64, offset: 192)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1300, file: !343, line: 270, baseType: !676, size: 32, offset: 256)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !978, file: !343, line: 241, baseType: !1224, size: 64, offset: 576)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !978, file: !343, line: 244, baseType: !676, size: 32, offset: 640)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !978, file: !343, line: 247, baseType: !676, size: 32, offset: 672)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !978, file: !343, line: 250, baseType: !676, size: 32, offset: 704)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !978, file: !343, line: 253, baseType: !676, size: 32, offset: 736)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !978, file: !343, line: 256, baseType: !676, size: 32, offset: 768)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !885, file: !867, line: 179, baseType: !1314, size: 64)
!1314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1315, size: 64)
!1315 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !867, line: 150, baseType: !1316)
!1316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !867, line: 142, size: 320, elements: !1317)
!1317 = !{!1318, !1319, !1320, !1321, !1324, !1325}
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1316, file: !867, line: 144, baseType: !689, size: 64)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1316, file: !867, line: 145, baseType: !864, size: 64, offset: 64)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1316, file: !867, line: 146, baseType: !864, size: 64, offset: 128)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1316, file: !867, line: 147, baseType: !1322, size: 32, offset: 192)
!1322 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1323, line: 31, baseType: !676)
!1323 = !DIFile(filename: "./alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1316, file: !867, line: 148, baseType: !7, size: 32, offset: 224)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1316, file: !867, line: 149, baseType: !675, size: 8, offset: 256)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !885, file: !867, line: 180, baseType: !1327, size: 64)
!1327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1328, size: 64)
!1328 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !867, line: 162, baseType: !1329)
!1329 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !867, line: 159, size: 128, elements: !1330)
!1330 = !{!1331, !1332}
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1329, file: !867, line: 160, baseType: !689, size: 64)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1329, file: !867, line: 161, baseType: !745, size: 64, offset: 64)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !885, file: !867, line: 181, baseType: !1334, size: 64)
!1334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1335, size: 64)
!1335 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !867, line: 181, flags: DIFlagFwdDecl)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !880, file: !867, line: 317, baseType: !1337, size: 64)
!1337 = !DICompositeType(tag: DW_TAG_array_type, baseType: !745, size: 64, elements: !788)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !880, file: !867, line: 318, baseType: !1339, size: 320)
!1339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !867, line: 188, size: 320, elements: !1340)
!1340 = !{!1341, !1343, !1366}
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1339, file: !867, line: 190, baseType: !1342, size: 192)
!1342 = !DICompositeType(tag: DW_TAG_array_type, baseType: !884, size: 192, elements: !763)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1339, file: !867, line: 193, baseType: !1344, size: 64, offset: 192)
!1344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1345, size: 64)
!1345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !867, line: 206, size: 320, elements: !1346)
!1346 = !{!1347, !1351, !1352, !1353, !1365}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1345, file: !867, line: 208, baseType: !1348, size: 64)
!1348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1349, size: 64)
!1349 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !690, line: 62, baseType: !1350)
!1350 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !690, line: 61, flags: DIFlagFwdDecl)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1345, file: !867, line: 211, baseType: !7, size: 32, offset: 64)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1345, file: !867, line: 214, baseType: !745, size: 64, offset: 128)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1345, file: !867, line: 224, baseType: !1354, size: 64, offset: 192)
!1354 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1355, size: 64)
!1355 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !867, line: 202, baseType: !1356)
!1356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !867, line: 202, size: 128, elements: !1357)
!1357 = !{!1358}
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1356, file: !867, line: 202, baseType: !1359, size: 128)
!1359 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !867, line: 200, baseType: !1360)
!1360 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !867, line: 200, size: 128, elements: !1361)
!1361 = !{!1362, !1363, !1364}
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1360, file: !867, line: 200, baseType: !7, size: 32)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1360, file: !867, line: 200, baseType: !7, size: 32, offset: 32)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1360, file: !867, line: 200, baseType: !898, size: 64, offset: 64)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1345, file: !867, line: 234, baseType: !1354, size: 64, offset: 256)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1339, file: !867, line: 197, baseType: !745, size: 64, offset: 256)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !880, file: !867, line: 319, baseType: !752, size: 256)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !880, file: !867, line: 320, baseType: !771, size: 192)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !692, file: !135, line: 3384, baseType: !1370, size: 1472)
!1370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !135, line: 3114, size: 1472, elements: !1371)
!1371 = !{!1372, !1393, !1394, !1395, !1396}
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1370, file: !135, line: 3115, baseType: !1373, size: 1216)
!1373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !135, line: 2984, size: 1216, elements: !1374)
!1374 = !{!1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392}
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1373, file: !135, line: 2985, baseType: !860, size: 960)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1373, file: !135, line: 2986, baseType: !689, size: 64, offset: 960)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1373, file: !135, line: 2987, baseType: !689, size: 64, offset: 1024)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1373, file: !135, line: 2988, baseType: !689, size: 64, offset: 1088)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1373, file: !135, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1373, file: !135, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1373, file: !135, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1373, file: !135, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1373, file: !135, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1373, file: !135, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1373, file: !135, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1373, file: !135, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1373, file: !135, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1373, file: !135, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1373, file: !135, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1373, file: !135, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1373, file: !135, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1373, file: !135, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1370, file: !135, line: 3117, baseType: !689, size: 64, offset: 1216)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1370, file: !135, line: 3119, baseType: !689, size: 64, offset: 1280)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1370, file: !135, line: 3121, baseType: !689, size: 64, offset: 1344)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1370, file: !135, line: 3123, baseType: !689, size: 64, offset: 1408)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !692, file: !135, line: 3385, baseType: !1398, size: 1088)
!1398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !135, line: 2874, size: 1088, elements: !1399)
!1399 = !{!1400, !1401, !1402}
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1398, file: !135, line: 2875, baseType: !860, size: 960)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1398, file: !135, line: 2876, baseType: !864, size: 64, offset: 960)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1398, file: !135, line: 2877, baseType: !1403, size: 64, offset: 1024)
!1403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1404, size: 64)
!1404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1405, line: 172, size: 128, elements: !1406)
!1405 = !DIFile(filename: "./tree-flow.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1406 = !{!1407, !1408, !1409, !1410, !1411, !1412, !1413}
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1404, file: !1405, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1404, file: !1405, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1404, file: !1405, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1404, file: !1405, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1404, file: !1405, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1404, file: !1405, line: 195, baseType: !7, size: 32, offset: 32)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1404, file: !1405, line: 199, baseType: !689, size: 64, offset: 64)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !692, file: !135, line: 3386, baseType: !1373, size: 1216)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !692, file: !135, line: 3387, baseType: !1416, size: 1280)
!1416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !135, line: 3093, size: 1280, elements: !1417)
!1417 = !{!1418, !1419}
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1416, file: !135, line: 3094, baseType: !1373, size: 1216)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1416, file: !135, line: 3095, baseType: !1403, size: 64, offset: 1216)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !692, file: !135, line: 3388, baseType: !1421, size: 1216)
!1421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !135, line: 2824, size: 1216, elements: !1422)
!1422 = !{!1423, !1424, !1425, !1426, !1427, !1428}
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1421, file: !135, line: 2825, baseType: !822, size: 896)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1421, file: !135, line: 2827, baseType: !689, size: 64, offset: 896)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1421, file: !135, line: 2828, baseType: !689, size: 64, offset: 960)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1421, file: !135, line: 2829, baseType: !689, size: 64, offset: 1024)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1421, file: !135, line: 2830, baseType: !689, size: 64, offset: 1088)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1421, file: !135, line: 2831, baseType: !689, size: 64, offset: 1152)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !692, file: !135, line: 3389, baseType: !1430, size: 1024)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !135, line: 2850, size: 1024, elements: !1431)
!1431 = !{!1432, !1433, !1434}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1430, file: !135, line: 2851, baseType: !860, size: 960)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1430, file: !135, line: 2852, baseType: !676, size: 32, offset: 960)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1430, file: !135, line: 2853, baseType: !676, size: 32, offset: 992)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !692, file: !135, line: 3390, baseType: !1436, size: 1024)
!1436 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !135, line: 2857, size: 1024, elements: !1437)
!1437 = !{!1438, !1439}
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1436, file: !135, line: 2858, baseType: !860, size: 960)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1436, file: !135, line: 2859, baseType: !1403, size: 64, offset: 960)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !692, file: !135, line: 3391, baseType: !1441, size: 960)
!1441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !135, line: 2862, size: 960, elements: !1442)
!1442 = !{!1443}
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1441, file: !135, line: 2863, baseType: !860, size: 960)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !692, file: !135, line: 3392, baseType: !1445, size: 1472)
!1445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !135, line: 3304, size: 1472, elements: !1446)
!1446 = !{!1447}
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1445, file: !135, line: 3305, baseType: !1370, size: 1472)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !692, file: !135, line: 3393, baseType: !1449, size: 1792)
!1449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !135, line: 3248, size: 1792, elements: !1450)
!1450 = !{!1451, !1452, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691}
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1449, file: !135, line: 3249, baseType: !1370, size: 1472)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1449, file: !135, line: 3251, baseType: !1453, size: 64, offset: 1472)
!1453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1454, size: 64)
!1454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1455, line: 463, size: 1152, elements: !1456)
!1455 = !DIFile(filename: "./function.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1456 = !{!1457, !1460, !1491, !1492, !1607, !1615, !1616, !1617, !1618, !1619, !1620, !1644, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670}
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1454, file: !1455, line: 464, baseType: !1458, size: 64)
!1458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1459, size: 64)
!1459 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1455, line: 464, flags: DIFlagFwdDecl)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1454, file: !1455, line: 467, baseType: !1461, size: 64, offset: 64)
!1461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1462, size: 64)
!1462 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !343, line: 374, size: 640, elements: !1463)
!1463 = !{!1464, !1466, !1467, !1480, !1481, !1482, !1483, !1484, !1485, !1487, !1489, !1490}
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1462, file: !343, line: 377, baseType: !1465, size: 64)
!1465 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !690, line: 111, baseType: !977)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1462, file: !343, line: 378, baseType: !1465, size: 64, offset: 64)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1462, file: !343, line: 381, baseType: !1468, size: 64, offset: 128)
!1468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1469, size: 64)
!1469 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !343, line: 282, baseType: !1470)
!1470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !343, line: 282, size: 128, elements: !1471)
!1471 = !{!1472}
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1470, file: !343, line: 282, baseType: !1473, size: 128)
!1473 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !343, line: 281, baseType: !1474)
!1474 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !343, line: 281, size: 128, elements: !1475)
!1475 = !{!1476, !1477, !1478}
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1474, file: !343, line: 281, baseType: !7, size: 32)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1474, file: !343, line: 281, baseType: !7, size: 32, offset: 32)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1474, file: !343, line: 281, baseType: !1479, size: 64, offset: 64)
!1479 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1465, size: 64, elements: !788)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1462, file: !343, line: 384, baseType: !676, size: 32, offset: 192)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1462, file: !343, line: 387, baseType: !676, size: 32, offset: 224)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1462, file: !343, line: 390, baseType: !676, size: 32, offset: 256)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1462, file: !343, line: 394, baseType: !1468, size: 64, offset: 320)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1462, file: !343, line: 396, baseType: !342, size: 32, offset: 384)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1462, file: !343, line: 399, baseType: !1486, size: 64, offset: 416)
!1486 = !DICompositeType(tag: DW_TAG_array_type, baseType: !348, size: 64, elements: !932)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1462, file: !343, line: 402, baseType: !1488, size: 64, offset: 480)
!1488 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !932)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1462, file: !343, line: 406, baseType: !676, size: 32, offset: 544)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1462, file: !343, line: 409, baseType: !676, size: 32, offset: 576)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1454, file: !1455, line: 470, baseType: !1004, size: 64, offset: 128)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1454, file: !1455, line: 473, baseType: !1493, size: 64, offset: 192)
!1493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1494, size: 64)
!1494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1405, line: 39, size: 1152, elements: !1495)
!1495 = !{!1496, !1546, !1559, !1571, !1572, !1584, !1585, !1589, !1590, !1591, !1592, !1593}
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1494, file: !1405, line: 41, baseType: !1497, size: 64)
!1497 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1498, line: 144, baseType: !1499)
!1498 = !DIFile(filename: "./include/hashtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1500, size: 64)
!1500 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1498, line: 100, size: 896, elements: !1501)
!1501 = !{!1502, !1510, !1515, !1520, !1522, !1523, !1524, !1525, !1526, !1527, !1532, !1534, !1535, !1540, !1545}
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1500, file: !1498, line: 102, baseType: !1503, size: 64)
!1503 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1498, line: 52, baseType: !1504)
!1504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1505, size: 64)
!1505 = !DISubroutineType(types: !1506)
!1506 = !{!1507, !1508}
!1507 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1498, line: 47, baseType: !7)
!1508 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1509, size: 64)
!1509 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1500, file: !1498, line: 105, baseType: !1511, size: 64, offset: 64)
!1511 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1498, line: 59, baseType: !1512)
!1512 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1513, size: 64)
!1513 = !DISubroutineType(types: !1514)
!1514 = !{!676, !1508, !1508}
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1500, file: !1498, line: 108, baseType: !1516, size: 64, offset: 128)
!1516 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1498, line: 63, baseType: !1517)
!1517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1518, size: 64)
!1518 = !DISubroutineType(types: !1519)
!1519 = !{null, !680}
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1500, file: !1498, line: 111, baseType: !1521, size: 64, offset: 192)
!1521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !680, size: 64)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1500, file: !1498, line: 114, baseType: !1158, size: 64, offset: 256)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1500, file: !1498, line: 117, baseType: !1158, size: 64, offset: 320)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1500, file: !1498, line: 120, baseType: !1158, size: 64, offset: 384)
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1500, file: !1498, line: 124, baseType: !7, size: 32, offset: 448)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1500, file: !1498, line: 128, baseType: !7, size: 32, offset: 480)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1500, file: !1498, line: 131, baseType: !1528, size: 64, offset: 512)
!1528 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1498, line: 75, baseType: !1529)
!1529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1530, size: 64)
!1530 = !DISubroutineType(types: !1531)
!1531 = !{!680, !1158, !1158}
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1500, file: !1498, line: 132, baseType: !1533, size: 64, offset: 576)
!1533 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1498, line: 78, baseType: !1517)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1500, file: !1498, line: 135, baseType: !680, size: 64, offset: 640)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1500, file: !1498, line: 136, baseType: !1536, size: 64, offset: 704)
!1536 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1498, line: 82, baseType: !1537)
!1537 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1538, size: 64)
!1538 = !DISubroutineType(types: !1539)
!1539 = !{!680, !680, !1158, !1158}
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1500, file: !1498, line: 137, baseType: !1541, size: 64, offset: 768)
!1541 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1498, line: 83, baseType: !1542)
!1542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1543, size: 64)
!1543 = !DISubroutineType(types: !1544)
!1544 = !{null, !680, !680}
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1500, file: !1498, line: 141, baseType: !7, size: 32, offset: 832)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1494, file: !1405, line: 48, baseType: !1547, size: 64, offset: 64)
!1547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1548, size: 64)
!1548 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !574, line: 35, baseType: !1549)
!1549 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !574, line: 35, size: 128, elements: !1550)
!1550 = !{!1551}
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1549, file: !574, line: 35, baseType: !1552, size: 128)
!1552 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !574, line: 33, baseType: !1553)
!1553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !574, line: 33, size: 128, elements: !1554)
!1554 = !{!1555, !1556, !1557}
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1553, file: !574, line: 33, baseType: !7, size: 32)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1553, file: !574, line: 33, baseType: !7, size: 32, offset: 32)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1553, file: !574, line: 33, baseType: !1558, size: 64, offset: 64)
!1558 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1013, size: 64, elements: !788)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1494, file: !1405, line: 51, baseType: !1560, size: 64, offset: 128)
!1560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1561, size: 64)
!1561 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !135, line: 183, baseType: !1562)
!1562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !135, line: 183, size: 128, elements: !1563)
!1563 = !{!1564}
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1562, file: !135, line: 183, baseType: !1565, size: 128)
!1565 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !135, line: 182, baseType: !1566)
!1566 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !135, line: 182, size: 128, elements: !1567)
!1567 = !{!1568, !1569, !1570}
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1566, file: !135, line: 182, baseType: !7, size: 32)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1566, file: !135, line: 182, baseType: !7, size: 32, offset: 32)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1566, file: !135, line: 182, baseType: !1066, size: 64, offset: 64)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1494, file: !1405, line: 54, baseType: !689, size: 64, offset: 192)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1494, file: !1405, line: 57, baseType: !1573, size: 128, offset: 256)
!1573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1574, line: 31, size: 128, elements: !1575)
!1574 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1575 = !{!1576, !1577, !1578, !1579, !1580, !1581, !1582}
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1573, file: !1574, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1573, file: !1574, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1573, file: !1574, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1573, file: !1574, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1573, file: !1574, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1573, file: !1574, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1573, file: !1574, line: 56, baseType: !1583, size: 64, offset: 64)
!1583 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !690, line: 47, baseType: !916)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1494, file: !1405, line: 60, baseType: !1573, size: 128, offset: 384)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1494, file: !1405, line: 64, baseType: !1586, size: 64, offset: 512)
!1586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1587, size: 64)
!1587 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1588, line: 33, flags: DIFlagFwdDecl)
!1588 = !DIFile(filename: "./pointer-set.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1494, file: !1405, line: 67, baseType: !689, size: 64, offset: 576)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1494, file: !1405, line: 73, baseType: !1497, size: 64, offset: 640)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1494, file: !1405, line: 77, baseType: !1583, size: 64, offset: 704)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1494, file: !1405, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1494, file: !1405, line: 82, baseType: !1594, size: 320, offset: 832)
!1594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !667, line: 62, size: 320, elements: !1595)
!1595 = !{!1596, !1602, !1603, !1604, !1605, !1606}
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1594, file: !667, line: 63, baseType: !1597, size: 64)
!1597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1598, size: 64)
!1598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !667, line: 56, size: 128, elements: !1599)
!1599 = !{!1600, !1601}
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1598, file: !667, line: 57, baseType: !1597, size: 64)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1598, file: !667, line: 58, baseType: !787, size: 8, offset: 64)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1594, file: !667, line: 64, baseType: !7, size: 32, offset: 64)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1594, file: !667, line: 66, baseType: !7, size: 32, offset: 96)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1594, file: !667, line: 68, baseType: !675, size: 8, offset: 128)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1594, file: !667, line: 70, baseType: !1042, size: 64, offset: 192)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1594, file: !667, line: 71, baseType: !1049, size: 64, offset: 256)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1454, file: !1455, line: 476, baseType: !1608, size: 64, offset: 256)
!1608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1609, size: 64)
!1609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !330, line: 187, size: 256, elements: !1610)
!1610 = !{!1611, !1612, !1613, !1614}
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1609, file: !330, line: 189, baseType: !676, size: 32)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1609, file: !330, line: 192, baseType: !1243, size: 64, offset: 64)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1609, file: !330, line: 197, baseType: !1497, size: 64, offset: 128)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1609, file: !330, line: 200, baseType: !1228, size: 64, offset: 192)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1454, file: !1455, line: 479, baseType: !1497, size: 64, offset: 320)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1454, file: !1455, line: 484, baseType: !689, size: 64, offset: 384)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1454, file: !1455, line: 488, baseType: !689, size: 64, offset: 448)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1454, file: !1455, line: 493, baseType: !689, size: 64, offset: 512)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1454, file: !1455, line: 496, baseType: !689, size: 64, offset: 576)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1454, file: !1455, line: 501, baseType: !1621, size: 64, offset: 640)
!1621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1622, size: 64)
!1622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !354, line: 2355, size: 576, elements: !1623)
!1623 = !{!1624, !1627, !1628, !1629, !1630, !1632, !1633, !1638, !1639, !1640, !1641, !1642, !1643}
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1622, file: !354, line: 2356, baseType: !1625, size: 64)
!1625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1626, size: 64)
!1626 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !354, line: 2356, flags: DIFlagFwdDecl)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1622, file: !354, line: 2357, baseType: !681, size: 64, offset: 64)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1622, file: !354, line: 2358, baseType: !676, size: 32, offset: 128)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1622, file: !354, line: 2359, baseType: !676, size: 32, offset: 160)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1622, file: !354, line: 2360, baseType: !1631, size: 128, offset: 192)
!1631 = !DICompositeType(tag: DW_TAG_array_type, baseType: !676, size: 128, elements: !956)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1622, file: !354, line: 2364, baseType: !676, size: 32, offset: 320)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1622, file: !354, line: 2367, baseType: !1634, size: 128, offset: 384)
!1634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !354, line: 2349, size: 128, elements: !1635)
!1635 = !{!1636, !1637}
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1634, file: !354, line: 2351, baseType: !864, size: 64)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1634, file: !354, line: 2352, baseType: !745, size: 64, offset: 64)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1622, file: !354, line: 2371, baseType: !353, size: 32, offset: 512)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1622, file: !354, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1622, file: !354, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1622, file: !354, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1622, file: !354, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1622, file: !354, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1454, file: !1455, line: 504, baseType: !1645, size: 64, offset: 704)
!1645 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1646, size: 64)
!1646 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1455, line: 504, flags: DIFlagFwdDecl)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1454, file: !1455, line: 507, baseType: !1497, size: 64, offset: 768)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1454, file: !1455, line: 510, baseType: !676, size: 32, offset: 832)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1454, file: !1455, line: 513, baseType: !676, size: 32, offset: 864)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1454, file: !1455, line: 516, baseType: !814, size: 32, offset: 896)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1454, file: !1455, line: 519, baseType: !814, size: 32, offset: 928)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1454, file: !1455, line: 522, baseType: !7, size: 32, offset: 960)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1454, file: !1455, line: 523, baseType: !7, size: 32, offset: 992)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1454, file: !1455, line: 528, baseType: !681, size: 64, offset: 1024)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1454, file: !1455, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1454, file: !1455, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1454, file: !1455, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1454, file: !1455, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1454, file: !1455, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1454, file: !1455, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1454, file: !1455, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1454, file: !1455, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1454, file: !1455, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1454, file: !1455, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1454, file: !1455, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1454, file: !1455, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1454, file: !1455, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1454, file: !1455, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1454, file: !1455, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1454, file: !1455, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1449, file: !135, line: 3254, baseType: !689, size: 64, offset: 1536)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1449, file: !135, line: 3257, baseType: !689, size: 64, offset: 1600)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1449, file: !135, line: 3258, baseType: !689, size: 64, offset: 1664)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1449, file: !135, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1449, file: !135, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1449, file: !135, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1449, file: !135, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1449, file: !135, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1449, file: !135, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1449, file: !135, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1449, file: !135, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1449, file: !135, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1449, file: !135, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1449, file: !135, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1449, file: !135, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1449, file: !135, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1449, file: !135, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1449, file: !135, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1449, file: !135, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1449, file: !135, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1449, file: !135, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !692, file: !135, line: 3394, baseType: !1693, size: 1344)
!1693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !135, line: 2279, size: 1344, elements: !1694)
!1694 = !{!1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736}
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1693, file: !135, line: 2280, baseType: !728, size: 192)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1693, file: !135, line: 2281, baseType: !689, size: 64, offset: 192)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1693, file: !135, line: 2282, baseType: !689, size: 64, offset: 256)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1693, file: !135, line: 2283, baseType: !689, size: 64, offset: 320)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1693, file: !135, line: 2284, baseType: !689, size: 64, offset: 384)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1693, file: !135, line: 2285, baseType: !7, size: 32, offset: 448)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1693, file: !135, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1693, file: !135, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1693, file: !135, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1693, file: !135, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1693, file: !135, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1693, file: !135, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1693, file: !135, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1693, file: !135, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1693, file: !135, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1693, file: !135, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1693, file: !135, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1693, file: !135, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1693, file: !135, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1693, file: !135, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1693, file: !135, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1693, file: !135, line: 2305, baseType: !7, size: 32, offset: 512)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1693, file: !135, line: 2306, baseType: !1322, size: 32, offset: 544)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1693, file: !135, line: 2307, baseType: !689, size: 64, offset: 576)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1693, file: !135, line: 2308, baseType: !689, size: 64, offset: 640)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1693, file: !135, line: 2314, baseType: !1721, size: 64, offset: 704)
!1721 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !135, line: 2309, size: 64, elements: !1722)
!1722 = !{!1723, !1724, !1725}
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1721, file: !135, line: 2310, baseType: !676, size: 32)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1721, file: !135, line: 2311, baseType: !681, size: 64)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1721, file: !135, line: 2312, baseType: !1726, size: 64)
!1726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1727, size: 64)
!1727 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !135, line: 2277, flags: DIFlagFwdDecl)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1693, file: !135, line: 2315, baseType: !689, size: 64, offset: 768)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1693, file: !135, line: 2316, baseType: !689, size: 64, offset: 832)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1693, file: !135, line: 2317, baseType: !689, size: 64, offset: 896)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1693, file: !135, line: 2318, baseType: !689, size: 64, offset: 960)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1693, file: !135, line: 2319, baseType: !689, size: 64, offset: 1024)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1693, file: !135, line: 2320, baseType: !689, size: 64, offset: 1088)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1693, file: !135, line: 2321, baseType: !689, size: 64, offset: 1152)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1693, file: !135, line: 2322, baseType: !689, size: 64, offset: 1216)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1693, file: !135, line: 2324, baseType: !1737, size: 64, offset: 1280)
!1737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1738, size: 64)
!1738 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !135, line: 2324, flags: DIFlagFwdDecl)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !692, file: !135, line: 3395, baseType: !1740, size: 320)
!1740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !135, line: 1469, size: 320, elements: !1741)
!1741 = !{!1742, !1743, !1744}
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1740, file: !135, line: 1470, baseType: !728, size: 192)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1740, file: !135, line: 1471, baseType: !689, size: 64, offset: 192)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1740, file: !135, line: 1472, baseType: !689, size: 64, offset: 256)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !692, file: !135, line: 3396, baseType: !1746, size: 320)
!1746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !135, line: 1482, size: 320, elements: !1747)
!1747 = !{!1748, !1749, !1750}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1746, file: !135, line: 1483, baseType: !728, size: 192)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1746, file: !135, line: 1484, baseType: !676, size: 32, offset: 192)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1746, file: !135, line: 1485, baseType: !1066, size: 64, offset: 256)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !692, file: !135, line: 3397, baseType: !1752, size: 384)
!1752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !135, line: 1829, size: 384, elements: !1753)
!1753 = !{!1754, !1755, !1756, !1757}
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1752, file: !135, line: 1830, baseType: !728, size: 192)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1752, file: !135, line: 1831, baseType: !814, size: 32, offset: 192)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1752, file: !135, line: 1832, baseType: !689, size: 64, offset: 256)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1752, file: !135, line: 1835, baseType: !1066, size: 64, offset: 320)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !692, file: !135, line: 3398, baseType: !1759, size: 704)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !135, line: 1898, size: 704, elements: !1760)
!1760 = !{!1761, !1762, !1763, !1764, !1765, !1770}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1759, file: !135, line: 1899, baseType: !728, size: 192)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1759, file: !135, line: 1902, baseType: !689, size: 64, offset: 192)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1759, file: !135, line: 1905, baseType: !1013, size: 64, offset: 256)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1759, file: !135, line: 1908, baseType: !7, size: 32, offset: 320)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1759, file: !135, line: 1911, baseType: !1766, size: 64, offset: 384)
!1766 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1767, size: 64)
!1767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1405, line: 117, size: 128, elements: !1768)
!1768 = !{!1769}
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1767, file: !1405, line: 120, baseType: !1573, size: 128)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1759, file: !135, line: 1914, baseType: !1054, size: 256, offset: 448)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !692, file: !135, line: 3399, baseType: !1772, size: 704)
!1772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !135, line: 2008, size: 704, elements: !1773)
!1773 = !{!1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784}
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1772, file: !135, line: 2009, baseType: !728, size: 192)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1772, file: !135, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1772, file: !135, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1772, file: !135, line: 2014, baseType: !814, size: 32, offset: 224)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1772, file: !135, line: 2016, baseType: !689, size: 64, offset: 256)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1772, file: !135, line: 2017, baseType: !1560, size: 64, offset: 320)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1772, file: !135, line: 2019, baseType: !689, size: 64, offset: 384)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1772, file: !135, line: 2020, baseType: !689, size: 64, offset: 448)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1772, file: !135, line: 2021, baseType: !689, size: 64, offset: 512)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1772, file: !135, line: 2022, baseType: !689, size: 64, offset: 576)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1772, file: !135, line: 2023, baseType: !689, size: 64, offset: 640)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !692, file: !135, line: 3400, baseType: !1786, size: 832)
!1786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !135, line: 2430, size: 832, elements: !1787)
!1787 = !{!1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797}
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1786, file: !135, line: 2431, baseType: !728, size: 192)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1786, file: !135, line: 2433, baseType: !689, size: 64, offset: 192)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1786, file: !135, line: 2434, baseType: !689, size: 64, offset: 256)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1786, file: !135, line: 2435, baseType: !689, size: 64, offset: 320)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1786, file: !135, line: 2436, baseType: !689, size: 64, offset: 384)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1786, file: !135, line: 2437, baseType: !1560, size: 64, offset: 448)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1786, file: !135, line: 2438, baseType: !689, size: 64, offset: 512)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1786, file: !135, line: 2440, baseType: !689, size: 64, offset: 576)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1786, file: !135, line: 2441, baseType: !689, size: 64, offset: 640)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1786, file: !135, line: 2443, baseType: !1798, size: 128, offset: 704)
!1798 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !135, line: 182, baseType: !1799)
!1799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !135, line: 182, size: 128, elements: !1800)
!1800 = !{!1801}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1799, file: !135, line: 182, baseType: !1565, size: 128)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !692, file: !135, line: 3401, baseType: !1803, size: 320)
!1803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !135, line: 3327, size: 320, elements: !1804)
!1804 = !{!1805, !1806, !1813}
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1803, file: !135, line: 3329, baseType: !728, size: 192)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1803, file: !135, line: 3330, baseType: !1807, size: 64, offset: 192)
!1807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1808, size: 64)
!1808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !135, line: 3320, size: 192, elements: !1809)
!1809 = !{!1810, !1811, !1812}
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1808, file: !135, line: 3322, baseType: !1807, size: 64)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1808, file: !135, line: 3323, baseType: !1807, size: 64, offset: 64)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1808, file: !135, line: 3324, baseType: !689, size: 64, offset: 128)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1803, file: !135, line: 3331, baseType: !1807, size: 64, offset: 256)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !692, file: !135, line: 3402, baseType: !1815, size: 256)
!1815 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !135, line: 1540, size: 256, elements: !1816)
!1816 = !{!1817, !1818}
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1815, file: !135, line: 1541, baseType: !728, size: 192)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1815, file: !135, line: 1542, baseType: !1819, size: 64, offset: 192)
!1819 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1820, size: 64)
!1820 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !135, line: 1538, baseType: !1821)
!1821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !135, line: 1538, size: 192, elements: !1822)
!1822 = !{!1823}
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1821, file: !135, line: 1538, baseType: !1824, size: 192)
!1824 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !135, line: 1537, baseType: !1825)
!1825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !135, line: 1537, size: 192, elements: !1826)
!1826 = !{!1827, !1828, !1829}
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1825, file: !135, line: 1537, baseType: !7, size: 32)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1825, file: !135, line: 1537, baseType: !7, size: 32, offset: 32)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1825, file: !135, line: 1537, baseType: !1830, size: 128, offset: 64)
!1830 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1831, size: 128, elements: !788)
!1831 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !135, line: 1535, baseType: !1832)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !135, line: 1532, size: 128, elements: !1833)
!1833 = !{!1834, !1835}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1832, file: !135, line: 1533, baseType: !689, size: 64)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1832, file: !135, line: 1534, baseType: !689, size: 64, offset: 64)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !692, file: !135, line: 3403, baseType: !1837, size: 512)
!1837 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !135, line: 1938, size: 512, elements: !1838)
!1838 = !{!1839, !1840, !1841, !1842, !1848, !1849, !1850}
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1837, file: !135, line: 1939, baseType: !728, size: 192)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1837, file: !135, line: 1940, baseType: !814, size: 32, offset: 192)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1837, file: !135, line: 1941, baseType: !358, size: 32, offset: 224)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1837, file: !135, line: 1946, baseType: !1843, size: 32, offset: 256)
!1843 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !135, line: 1942, size: 32, elements: !1844)
!1844 = !{!1845, !1846, !1847}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1843, file: !135, line: 1943, baseType: !376, size: 32)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1843, file: !135, line: 1944, baseType: !383, size: 32)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1843, file: !135, line: 1945, baseType: !134, size: 32)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1837, file: !135, line: 1950, baseType: !1003, size: 64, offset: 320)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1837, file: !135, line: 1951, baseType: !1003, size: 64, offset: 384)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1837, file: !135, line: 1953, baseType: !1066, size: 64, offset: 448)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !692, file: !135, line: 3404, baseType: !1852, size: 1664)
!1852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !135, line: 3337, size: 1664, elements: !1853)
!1853 = !{!1854, !1855}
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1852, file: !135, line: 3338, baseType: !728, size: 192)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1852, file: !135, line: 3341, baseType: !1856, size: 1472, offset: 192)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1857, line: 410, size: 1472, elements: !1858)
!1857 = !DIFile(filename: "./options.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1858 = !{!1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022}
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1856, file: !1857, line: 412, baseType: !676, size: 32)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1856, file: !1857, line: 413, baseType: !676, size: 32, offset: 32)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1856, file: !1857, line: 414, baseType: !676, size: 32, offset: 64)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1856, file: !1857, line: 415, baseType: !676, size: 32, offset: 96)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1856, file: !1857, line: 416, baseType: !676, size: 32, offset: 128)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1856, file: !1857, line: 417, baseType: !676, size: 32, offset: 160)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1856, file: !1857, line: 418, baseType: !675, size: 8, offset: 192)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1856, file: !1857, line: 419, baseType: !675, size: 8, offset: 200)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1856, file: !1857, line: 420, baseType: !1868, size: 8, offset: 208)
!1868 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1856, file: !1857, line: 421, baseType: !1868, size: 8, offset: 216)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1856, file: !1857, line: 422, baseType: !1868, size: 8, offset: 224)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1856, file: !1857, line: 423, baseType: !1868, size: 8, offset: 232)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1856, file: !1857, line: 424, baseType: !1868, size: 8, offset: 240)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1856, file: !1857, line: 425, baseType: !1868, size: 8, offset: 248)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1856, file: !1857, line: 426, baseType: !1868, size: 8, offset: 256)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1856, file: !1857, line: 427, baseType: !1868, size: 8, offset: 264)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1856, file: !1857, line: 428, baseType: !1868, size: 8, offset: 272)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1856, file: !1857, line: 429, baseType: !1868, size: 8, offset: 280)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1856, file: !1857, line: 430, baseType: !1868, size: 8, offset: 288)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1856, file: !1857, line: 431, baseType: !1868, size: 8, offset: 296)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1856, file: !1857, line: 432, baseType: !1868, size: 8, offset: 304)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1856, file: !1857, line: 433, baseType: !1868, size: 8, offset: 312)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1856, file: !1857, line: 434, baseType: !1868, size: 8, offset: 320)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1856, file: !1857, line: 435, baseType: !1868, size: 8, offset: 328)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1856, file: !1857, line: 436, baseType: !1868, size: 8, offset: 336)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1856, file: !1857, line: 437, baseType: !1868, size: 8, offset: 344)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1856, file: !1857, line: 438, baseType: !1868, size: 8, offset: 352)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1856, file: !1857, line: 439, baseType: !1868, size: 8, offset: 360)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1856, file: !1857, line: 440, baseType: !1868, size: 8, offset: 368)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1856, file: !1857, line: 441, baseType: !1868, size: 8, offset: 376)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1856, file: !1857, line: 442, baseType: !1868, size: 8, offset: 384)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1856, file: !1857, line: 443, baseType: !1868, size: 8, offset: 392)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1856, file: !1857, line: 444, baseType: !1868, size: 8, offset: 400)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1856, file: !1857, line: 445, baseType: !1868, size: 8, offset: 408)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1856, file: !1857, line: 446, baseType: !1868, size: 8, offset: 416)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1856, file: !1857, line: 447, baseType: !1868, size: 8, offset: 424)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1856, file: !1857, line: 448, baseType: !1868, size: 8, offset: 432)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1856, file: !1857, line: 449, baseType: !1868, size: 8, offset: 440)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1856, file: !1857, line: 450, baseType: !1868, size: 8, offset: 448)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1856, file: !1857, line: 451, baseType: !1868, size: 8, offset: 456)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1856, file: !1857, line: 452, baseType: !1868, size: 8, offset: 464)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1856, file: !1857, line: 453, baseType: !1868, size: 8, offset: 472)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1856, file: !1857, line: 454, baseType: !1868, size: 8, offset: 480)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1856, file: !1857, line: 455, baseType: !1868, size: 8, offset: 488)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1856, file: !1857, line: 456, baseType: !1868, size: 8, offset: 496)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1856, file: !1857, line: 457, baseType: !1868, size: 8, offset: 504)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1856, file: !1857, line: 458, baseType: !1868, size: 8, offset: 512)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1856, file: !1857, line: 459, baseType: !1868, size: 8, offset: 520)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1856, file: !1857, line: 460, baseType: !1868, size: 8, offset: 528)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1856, file: !1857, line: 461, baseType: !1868, size: 8, offset: 536)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1856, file: !1857, line: 462, baseType: !1868, size: 8, offset: 544)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1856, file: !1857, line: 463, baseType: !1868, size: 8, offset: 552)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1856, file: !1857, line: 464, baseType: !1868, size: 8, offset: 560)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1856, file: !1857, line: 465, baseType: !1868, size: 8, offset: 568)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1856, file: !1857, line: 466, baseType: !1868, size: 8, offset: 576)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1856, file: !1857, line: 467, baseType: !1868, size: 8, offset: 584)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1856, file: !1857, line: 468, baseType: !1868, size: 8, offset: 592)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1856, file: !1857, line: 469, baseType: !1868, size: 8, offset: 600)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1856, file: !1857, line: 470, baseType: !1868, size: 8, offset: 608)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1856, file: !1857, line: 471, baseType: !1868, size: 8, offset: 616)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1856, file: !1857, line: 472, baseType: !1868, size: 8, offset: 624)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1856, file: !1857, line: 473, baseType: !1868, size: 8, offset: 632)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1856, file: !1857, line: 474, baseType: !1868, size: 8, offset: 640)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1856, file: !1857, line: 475, baseType: !1868, size: 8, offset: 648)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1856, file: !1857, line: 476, baseType: !1868, size: 8, offset: 656)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1856, file: !1857, line: 477, baseType: !1868, size: 8, offset: 664)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1856, file: !1857, line: 478, baseType: !1868, size: 8, offset: 672)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1856, file: !1857, line: 479, baseType: !1868, size: 8, offset: 680)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1856, file: !1857, line: 480, baseType: !1868, size: 8, offset: 688)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1856, file: !1857, line: 481, baseType: !1868, size: 8, offset: 696)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1856, file: !1857, line: 482, baseType: !1868, size: 8, offset: 704)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1856, file: !1857, line: 483, baseType: !1868, size: 8, offset: 712)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1856, file: !1857, line: 484, baseType: !1868, size: 8, offset: 720)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1856, file: !1857, line: 485, baseType: !1868, size: 8, offset: 728)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1856, file: !1857, line: 486, baseType: !1868, size: 8, offset: 736)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1856, file: !1857, line: 487, baseType: !1868, size: 8, offset: 744)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1856, file: !1857, line: 488, baseType: !1868, size: 8, offset: 752)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1856, file: !1857, line: 489, baseType: !1868, size: 8, offset: 760)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1856, file: !1857, line: 490, baseType: !1868, size: 8, offset: 768)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1856, file: !1857, line: 491, baseType: !1868, size: 8, offset: 776)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1856, file: !1857, line: 492, baseType: !1868, size: 8, offset: 784)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1856, file: !1857, line: 493, baseType: !1868, size: 8, offset: 792)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1856, file: !1857, line: 494, baseType: !1868, size: 8, offset: 800)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1856, file: !1857, line: 495, baseType: !1868, size: 8, offset: 808)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1856, file: !1857, line: 496, baseType: !1868, size: 8, offset: 816)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1856, file: !1857, line: 497, baseType: !1868, size: 8, offset: 824)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1856, file: !1857, line: 498, baseType: !1868, size: 8, offset: 832)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1856, file: !1857, line: 499, baseType: !1868, size: 8, offset: 840)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1856, file: !1857, line: 500, baseType: !1868, size: 8, offset: 848)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1856, file: !1857, line: 501, baseType: !1868, size: 8, offset: 856)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1856, file: !1857, line: 502, baseType: !1868, size: 8, offset: 864)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1856, file: !1857, line: 503, baseType: !1868, size: 8, offset: 872)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1856, file: !1857, line: 504, baseType: !1868, size: 8, offset: 880)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1856, file: !1857, line: 505, baseType: !1868, size: 8, offset: 888)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1856, file: !1857, line: 506, baseType: !1868, size: 8, offset: 896)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1856, file: !1857, line: 507, baseType: !1868, size: 8, offset: 904)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1856, file: !1857, line: 508, baseType: !1868, size: 8, offset: 912)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1856, file: !1857, line: 509, baseType: !1868, size: 8, offset: 920)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1856, file: !1857, line: 510, baseType: !1868, size: 8, offset: 928)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1856, file: !1857, line: 511, baseType: !1868, size: 8, offset: 936)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1856, file: !1857, line: 512, baseType: !1868, size: 8, offset: 944)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1856, file: !1857, line: 513, baseType: !1868, size: 8, offset: 952)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1856, file: !1857, line: 514, baseType: !1868, size: 8, offset: 960)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1856, file: !1857, line: 515, baseType: !1868, size: 8, offset: 968)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1856, file: !1857, line: 516, baseType: !1868, size: 8, offset: 976)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1856, file: !1857, line: 517, baseType: !1868, size: 8, offset: 984)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1856, file: !1857, line: 518, baseType: !1868, size: 8, offset: 992)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1856, file: !1857, line: 519, baseType: !1868, size: 8, offset: 1000)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1856, file: !1857, line: 520, baseType: !1868, size: 8, offset: 1008)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1856, file: !1857, line: 521, baseType: !1868, size: 8, offset: 1016)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1856, file: !1857, line: 522, baseType: !1868, size: 8, offset: 1024)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1856, file: !1857, line: 523, baseType: !1868, size: 8, offset: 1032)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1856, file: !1857, line: 524, baseType: !1868, size: 8, offset: 1040)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1856, file: !1857, line: 525, baseType: !1868, size: 8, offset: 1048)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1856, file: !1857, line: 526, baseType: !1868, size: 8, offset: 1056)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1856, file: !1857, line: 527, baseType: !1868, size: 8, offset: 1064)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1856, file: !1857, line: 528, baseType: !1868, size: 8, offset: 1072)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1856, file: !1857, line: 529, baseType: !1868, size: 8, offset: 1080)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1856, file: !1857, line: 530, baseType: !1868, size: 8, offset: 1088)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1856, file: !1857, line: 531, baseType: !1868, size: 8, offset: 1096)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1856, file: !1857, line: 532, baseType: !1868, size: 8, offset: 1104)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1856, file: !1857, line: 533, baseType: !1868, size: 8, offset: 1112)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1856, file: !1857, line: 534, baseType: !1868, size: 8, offset: 1120)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1856, file: !1857, line: 535, baseType: !1868, size: 8, offset: 1128)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1856, file: !1857, line: 536, baseType: !1868, size: 8, offset: 1136)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1856, file: !1857, line: 537, baseType: !1868, size: 8, offset: 1144)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1856, file: !1857, line: 538, baseType: !1868, size: 8, offset: 1152)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1856, file: !1857, line: 539, baseType: !1868, size: 8, offset: 1160)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1856, file: !1857, line: 540, baseType: !1868, size: 8, offset: 1168)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1856, file: !1857, line: 541, baseType: !1868, size: 8, offset: 1176)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1856, file: !1857, line: 542, baseType: !1868, size: 8, offset: 1184)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1856, file: !1857, line: 543, baseType: !1868, size: 8, offset: 1192)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1856, file: !1857, line: 544, baseType: !1868, size: 8, offset: 1200)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1856, file: !1857, line: 545, baseType: !1868, size: 8, offset: 1208)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1856, file: !1857, line: 546, baseType: !1868, size: 8, offset: 1216)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1856, file: !1857, line: 547, baseType: !1868, size: 8, offset: 1224)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1856, file: !1857, line: 548, baseType: !1868, size: 8, offset: 1232)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1856, file: !1857, line: 549, baseType: !1868, size: 8, offset: 1240)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1856, file: !1857, line: 550, baseType: !1868, size: 8, offset: 1248)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1856, file: !1857, line: 551, baseType: !1868, size: 8, offset: 1256)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1856, file: !1857, line: 552, baseType: !1868, size: 8, offset: 1264)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1856, file: !1857, line: 553, baseType: !1868, size: 8, offset: 1272)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1856, file: !1857, line: 554, baseType: !1868, size: 8, offset: 1280)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1856, file: !1857, line: 555, baseType: !1868, size: 8, offset: 1288)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1856, file: !1857, line: 556, baseType: !1868, size: 8, offset: 1296)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1856, file: !1857, line: 557, baseType: !1868, size: 8, offset: 1304)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1856, file: !1857, line: 558, baseType: !1868, size: 8, offset: 1312)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1856, file: !1857, line: 559, baseType: !1868, size: 8, offset: 1320)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1856, file: !1857, line: 560, baseType: !1868, size: 8, offset: 1328)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1856, file: !1857, line: 561, baseType: !1868, size: 8, offset: 1336)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1856, file: !1857, line: 562, baseType: !1868, size: 8, offset: 1344)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1856, file: !1857, line: 563, baseType: !1868, size: 8, offset: 1352)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1856, file: !1857, line: 564, baseType: !1868, size: 8, offset: 1360)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1856, file: !1857, line: 565, baseType: !1868, size: 8, offset: 1368)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1856, file: !1857, line: 566, baseType: !1868, size: 8, offset: 1376)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1856, file: !1857, line: 567, baseType: !1868, size: 8, offset: 1384)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1856, file: !1857, line: 568, baseType: !1868, size: 8, offset: 1392)
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1856, file: !1857, line: 569, baseType: !1868, size: 8, offset: 1400)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1856, file: !1857, line: 570, baseType: !1868, size: 8, offset: 1408)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1856, file: !1857, line: 571, baseType: !1868, size: 8, offset: 1416)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1856, file: !1857, line: 572, baseType: !1868, size: 8, offset: 1424)
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1856, file: !1857, line: 573, baseType: !1868, size: 8, offset: 1432)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1856, file: !1857, line: 574, baseType: !1868, size: 8, offset: 1440)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !692, file: !135, line: 3405, baseType: !2024, size: 384)
!2024 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !135, line: 3352, size: 384, elements: !2025)
!2025 = !{!2026, !2027}
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2024, file: !135, line: 3353, baseType: !728, size: 192)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !2024, file: !135, line: 3356, baseType: !2028, size: 192, offset: 192)
!2028 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1857, line: 578, size: 192, elements: !2029)
!2029 = !{!2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040}
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !2028, file: !1857, line: 580, baseType: !676, size: 32)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !2028, file: !1857, line: 581, baseType: !676, size: 32, offset: 32)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !2028, file: !1857, line: 582, baseType: !676, size: 32, offset: 64)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !2028, file: !1857, line: 583, baseType: !676, size: 32, offset: 96)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2028, file: !1857, line: 584, baseType: !675, size: 8, offset: 128)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !2028, file: !1857, line: 585, baseType: !675, size: 8, offset: 136)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !2028, file: !1857, line: 586, baseType: !675, size: 8, offset: 144)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !2028, file: !1857, line: 587, baseType: !675, size: 8, offset: 152)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !2028, file: !1857, line: 588, baseType: !675, size: 8, offset: 160)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !2028, file: !1857, line: 589, baseType: !675, size: 8, offset: 168)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !2028, file: !1857, line: 590, baseType: !675, size: 8, offset: 176)
!2041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !676, size: 64)
!2042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !745, size: 64)
!2043 = !DIDerivedType(tag: DW_TAG_typedef, name: "intptr_t", file: !2044, line: 267, baseType: !2045)
!2044 = !DIFile(filename: "/usr/include/unistd.h", directory: "")
!2045 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intptr_t", file: !2046, line: 206, baseType: !745)
!2046 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2048, size: 64)
!2048 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1015)
!2049 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !667, line: 30, baseType: !2050)
!2050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2051, size: 64)
!2051 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !135, line: 1893, baseType: !1054)
!2052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2053, size: 64)
!2053 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !135, line: 184, baseType: !2054)
!2054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !135, line: 184, size: 128, elements: !2055)
!2055 = !{!2056}
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2054, file: !135, line: 184, baseType: !1565, size: 128)
!2057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2058, size: 64)
!2058 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_operand_entry_t_heap", file: !3, line: 298, baseType: !2059)
!2059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_operand_entry_t_heap", file: !3, line: 298, size: 128, elements: !2060)
!2060 = !{!2061}
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2059, file: !3, line: 298, baseType: !2062, size: 128)
!2062 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_operand_entry_t_base", file: !3, line: 297, baseType: !2063)
!2063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_operand_entry_t_base", file: !3, line: 297, size: 128, elements: !2064)
!2064 = !{!2065, !2066, !2067}
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2063, file: !3, line: 297, baseType: !7, size: 32)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2063, file: !3, line: 297, baseType: !7, size: 32, offset: 32)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2063, file: !3, line: 297, baseType: !2068, size: 64, offset: 64)
!2068 = !DICompositeType(tag: DW_TAG_array_type, baseType: !683, size: 64, elements: !788)
!2069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2070, size: 64)
!2070 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !683)
!2071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2057, size: 64)
!2072 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2073, size: 64)
!2073 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_oecount_heap", file: !3, line: 742, baseType: !2074)
!2074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_oecount_heap", file: !3, line: 742, size: 192, elements: !2075)
!2075 = !{!2076}
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2074, file: !3, line: 742, baseType: !2077, size: 192)
!2077 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_oecount_base", file: !3, line: 741, baseType: !2078)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_oecount_base", file: !3, line: 741, size: 192, elements: !2079)
!2079 = !{!2080, !2081, !2082}
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2078, file: !3, line: 741, baseType: !7, size: 32)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2078, file: !3, line: 741, baseType: !7, size: 32, offset: 32)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2078, file: !3, line: 741, baseType: !2083, size: 128, offset: 64)
!2083 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2084, size: 128, elements: !788)
!2084 = !DIDerivedType(tag: DW_TAG_typedef, name: "oecount", file: !3, line: 739, baseType: !2085)
!2085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "oecount_s", file: !3, line: 735, size: 128, elements: !2086)
!2086 = !{!2087, !2088, !2089}
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "cnt", scope: !2085, file: !3, line: 736, baseType: !676, size: 32)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "oecode", scope: !2085, file: !3, line: 737, baseType: !134, size: 32, offset: 32)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !2085, file: !3, line: 738, baseType: !689, size: 64, offset: 64)
!2090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2091, size: 64)
!2091 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2084)
!2092 = !{!0, !2093, !2101, !2124, !2126, !2128, !2130}
!2093 = !DIGlobalVariableExpression(var: !2094, expr: !DIExpression())
!2094 = distinct !DIGlobalVariable(name: "reassociate_stats", scope: !2, file: !3, line: 169, type: !2095, isLocal: true, isDefinition: true)
!2095 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 163, size: 128, elements: !2096)
!2096 = !{!2097, !2098, !2099, !2100}
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "linearized", scope: !2095, file: !3, line: 165, baseType: !676, size: 32)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "constants_eliminated", scope: !2095, file: !3, line: 166, baseType: !676, size: 32, offset: 32)
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "ops_eliminated", scope: !2095, file: !3, line: 167, baseType: !676, size: 32, offset: 64)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "rewritten", scope: !2095, file: !3, line: 168, baseType: !676, size: 32, offset: 96)
!2101 = !DIGlobalVariableExpression(var: !2102, expr: !DIExpression())
!2102 = distinct !DIGlobalVariable(name: "operand_entry_pool", scope: !2, file: !3, line: 178, type: !2103, isLocal: true, isDefinition: true)
!2103 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !2104, line: 58, baseType: !2105)
!2104 = !DIFile(filename: "./alloc-pool.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!2105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2106, size: 64)
!2106 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !2104, line: 32, size: 704, elements: !2107)
!2107 = !{!2108, !2109, !2110, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123}
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2106, file: !2104, line: 34, baseType: !681, size: 64)
!2109 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !2106, file: !2104, line: 38, baseType: !1158, size: 64, offset: 64)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !2106, file: !2104, line: 41, baseType: !2111, size: 64, offset: 128)
!2111 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !2104, line: 30, baseType: !2112)
!2112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2113, size: 64)
!2113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !2104, line: 26, size: 64, elements: !2114)
!2114 = !{!2115}
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2113, file: !2104, line: 28, baseType: !2112, size: 64)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !2106, file: !2104, line: 45, baseType: !678, size: 64, offset: 192)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !2106, file: !2104, line: 49, baseType: !1158, size: 64, offset: 256)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !2106, file: !2104, line: 51, baseType: !1158, size: 64, offset: 320)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !2106, file: !2104, line: 52, baseType: !1158, size: 64, offset: 384)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !2106, file: !2104, line: 53, baseType: !1158, size: 64, offset: 448)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !2106, file: !2104, line: 54, baseType: !2111, size: 64, offset: 512)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !2106, file: !2104, line: 55, baseType: !1158, size: 64, offset: 576)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !2106, file: !2104, line: 56, baseType: !1158, size: 64, offset: 640)
!2124 = !DIGlobalVariableExpression(var: !2125, expr: !DIExpression())
!2125 = distinct !DIGlobalVariable(name: "bb_rank", scope: !2, file: !3, line: 184, type: !2042, isLocal: true, isDefinition: true)
!2126 = !DIGlobalVariableExpression(var: !2127, expr: !DIExpression())
!2127 = distinct !DIGlobalVariable(name: "operand_rank", scope: !2, file: !3, line: 187, type: !1586, isLocal: true, isDefinition: true)
!2128 = !DIGlobalVariableExpression(var: !2129, expr: !DIExpression())
!2129 = distinct !DIGlobalVariable(name: "broken_up_subtracts", scope: !2, file: !3, line: 1508, type: !2052, isLocal: true, isDefinition: true)
!2130 = !DIGlobalVariableExpression(var: !2131, expr: !DIExpression())
!2131 = distinct !DIGlobalVariable(name: "cvec", scope: !2, file: !3, line: 745, type: !2072, isLocal: true, isDefinition: true)
!2132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_opt_pass", file: !391, line: 156, size: 640, elements: !2133)
!2133 = !{!2134}
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !2132, file: !391, line: 158, baseType: !2135, size: 640)
!2135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !391, line: 114, size: 640, elements: !2136)
!2136 = !{!2137, !2138, !2139, !2143, !2147, !2149, !2150, !2151, !2153, !2154, !2155, !2156, !2157}
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2135, file: !391, line: 117, baseType: !390, size: 32)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2135, file: !391, line: 121, baseType: !681, size: 64, offset: 64)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !2135, file: !391, line: 125, baseType: !2140, size: 64, offset: 128)
!2140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2141, size: 64)
!2141 = !DISubroutineType(types: !2142)
!2142 = !{!675}
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !2135, file: !391, line: 130, baseType: !2144, size: 64, offset: 192)
!2144 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2145, size: 64)
!2145 = !DISubroutineType(types: !2146)
!2146 = !{!7}
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !2135, file: !391, line: 133, baseType: !2148, size: 64, offset: 256)
!2148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2135, size: 64)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2135, file: !391, line: 136, baseType: !2148, size: 64, offset: 320)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !2135, file: !391, line: 139, baseType: !676, size: 32, offset: 384)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !2135, file: !391, line: 143, baseType: !2152, size: 32, offset: 416)
!2152 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !398, line: 80, baseType: !397)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !2135, file: !391, line: 146, baseType: !7, size: 32, offset: 448)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !2135, file: !391, line: 147, baseType: !7, size: 32, offset: 480)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !2135, file: !391, line: 148, baseType: !7, size: 32, offset: 512)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !2135, file: !391, line: 151, baseType: !7, size: 32, offset: 544)
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !2135, file: !391, line: 152, baseType: !7, size: 32, offset: 576)
!2158 = !{i32 2, !"Dwarf Version", i32 4}
!2159 = !{i32 2, !"Debug Info Version", i32 3}
!2160 = !{i32 1, !"wchar_size", i32 4}
!2161 = !{!"clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)"}
!2162 = distinct !DISubprogram(name: "vprintf", scope: !2163, file: !2163, line: 39, type: !2164, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2174)
!2163 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdio.h", directory: "")
!2164 = !DISubroutineType(types: !2165)
!2165 = !{!676, !2166, !2167}
!2166 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !681)
!2167 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2168, size: 64)
!2168 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, size: 192, elements: !2169)
!2169 = !{!2170, !2171, !2172, !2173}
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2168, file: !3, baseType: !7, size: 32)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2168, file: !3, baseType: !7, size: 32, offset: 32)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2168, file: !3, baseType: !680, size: 64, offset: 64)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2168, file: !3, baseType: !680, size: 64, offset: 128)
!2174 = !{!2175, !2176}
!2175 = !DILocalVariable(name: "__fmt", arg: 1, scope: !2162, file: !2163, line: 39, type: !2166)
!2176 = !DILocalVariable(name: "__arg", arg: 2, scope: !2162, file: !2163, line: 39, type: !2167)
!2177 = !DILocation(line: 0, scope: !2162)
!2178 = !DILocation(line: 41, column: 20, scope: !2162)
!2179 = !DILocation(line: 41, column: 10, scope: !2162)
!2180 = !DILocation(line: 41, column: 3, scope: !2162)
!2181 = distinct !DISubprogram(name: "getchar", scope: !2163, file: !2163, line: 47, type: !2182, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2184)
!2182 = !DISubroutineType(types: !2183)
!2183 = !{!676}
!2184 = !{}
!2185 = !DILocation(line: 49, column: 16, scope: !2181)
!2186 = !DILocation(line: 49, column: 10, scope: !2181)
!2187 = !DILocation(line: 49, column: 3, scope: !2181)
!2188 = distinct !DISubprogram(name: "fgetc_unlocked", scope: !2163, file: !2163, line: 56, type: !2189, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2241)
!2189 = !DISubroutineType(types: !2190)
!2190 = !{!676, !2191}
!2191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2192, size: 64)
!2192 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2193, line: 7, baseType: !2194)
!2193 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2195, line: 49, size: 1728, elements: !2196)
!2195 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2196 = !{!2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2212, !2214, !2215, !2216, !2218, !2220, !2221, !2222, !2225, !2227, !2230, !2233, !2234, !2235, !2236, !2237}
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2194, file: !2195, line: 51, baseType: !676, size: 32)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2194, file: !2195, line: 54, baseType: !678, size: 64, offset: 64)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2194, file: !2195, line: 55, baseType: !678, size: 64, offset: 128)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2194, file: !2195, line: 56, baseType: !678, size: 64, offset: 192)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2194, file: !2195, line: 57, baseType: !678, size: 64, offset: 256)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2194, file: !2195, line: 58, baseType: !678, size: 64, offset: 320)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2194, file: !2195, line: 59, baseType: !678, size: 64, offset: 384)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2194, file: !2195, line: 60, baseType: !678, size: 64, offset: 448)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2194, file: !2195, line: 61, baseType: !678, size: 64, offset: 512)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2194, file: !2195, line: 64, baseType: !678, size: 64, offset: 576)
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2194, file: !2195, line: 65, baseType: !678, size: 64, offset: 640)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2194, file: !2195, line: 66, baseType: !678, size: 64, offset: 704)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2194, file: !2195, line: 68, baseType: !2210, size: 64, offset: 768)
!2210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2211, size: 64)
!2211 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2195, line: 36, flags: DIFlagFwdDecl)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2194, file: !2195, line: 70, baseType: !2213, size: 64, offset: 832)
!2213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2194, size: 64)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2194, file: !2195, line: 72, baseType: !676, size: 32, offset: 896)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2194, file: !2195, line: 73, baseType: !676, size: 32, offset: 928)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2194, file: !2195, line: 74, baseType: !2217, size: 64, offset: 960)
!2217 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2046, line: 152, baseType: !745)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2194, file: !2195, line: 77, baseType: !2219, size: 16, offset: 1024)
!2219 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2194, file: !2195, line: 78, baseType: !1868, size: 8, offset: 1040)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2194, file: !2195, line: 79, baseType: !787, size: 8, offset: 1048)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2194, file: !2195, line: 81, baseType: !2223, size: 64, offset: 1088)
!2223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2224, size: 64)
!2224 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2195, line: 43, baseType: null)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2194, file: !2195, line: 89, baseType: !2226, size: 64, offset: 1152)
!2226 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2046, line: 153, baseType: !745)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2194, file: !2195, line: 91, baseType: !2228, size: 64, offset: 1216)
!2228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2229, size: 64)
!2229 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2195, line: 37, flags: DIFlagFwdDecl)
!2230 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2194, file: !2195, line: 92, baseType: !2231, size: 64, offset: 1280)
!2231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2232, size: 64)
!2232 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2195, line: 38, flags: DIFlagFwdDecl)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2194, file: !2195, line: 93, baseType: !2213, size: 64, offset: 1344)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2194, file: !2195, line: 94, baseType: !680, size: 64, offset: 1408)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2194, file: !2195, line: 95, baseType: !1158, size: 64, offset: 1472)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2194, file: !2195, line: 96, baseType: !676, size: 32, offset: 1536)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2194, file: !2195, line: 98, baseType: !2238, size: 160, offset: 1568)
!2238 = !DICompositeType(tag: DW_TAG_array_type, baseType: !679, size: 160, elements: !2239)
!2239 = !{!2240}
!2240 = !DISubrange(count: 20)
!2241 = !{!2242}
!2242 = !DILocalVariable(name: "__fp", arg: 1, scope: !2188, file: !2163, line: 56, type: !2191)
!2243 = !DILocation(line: 0, scope: !2188)
!2244 = !DILocation(line: 58, column: 10, scope: !2188)
!2245 = !DILocation(line: 58, column: 3, scope: !2188)
!2246 = distinct !DISubprogram(name: "getc_unlocked", scope: !2163, file: !2163, line: 66, type: !2189, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2247)
!2247 = !{!2248}
!2248 = !DILocalVariable(name: "__fp", arg: 1, scope: !2246, file: !2163, line: 66, type: !2191)
!2249 = !DILocation(line: 0, scope: !2246)
!2250 = !DILocation(line: 68, column: 10, scope: !2246)
!2251 = !DILocation(line: 68, column: 3, scope: !2246)
!2252 = distinct !DISubprogram(name: "getchar_unlocked", scope: !2163, file: !2163, line: 73, type: !2182, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2184)
!2253 = !DILocation(line: 75, column: 10, scope: !2252)
!2254 = !DILocation(line: 75, column: 3, scope: !2252)
!2255 = distinct !DISubprogram(name: "putchar", scope: !2163, file: !2163, line: 82, type: !2256, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2258)
!2256 = !DISubroutineType(types: !2257)
!2257 = !{!676, !676}
!2258 = !{!2259}
!2259 = !DILocalVariable(name: "__c", arg: 1, scope: !2255, file: !2163, line: 82, type: !676)
!2260 = !DILocation(line: 0, scope: !2255)
!2261 = !DILocation(line: 84, column: 21, scope: !2255)
!2262 = !DILocation(line: 84, column: 10, scope: !2255)
!2263 = !DILocation(line: 84, column: 3, scope: !2255)
!2264 = distinct !DISubprogram(name: "fputc_unlocked", scope: !2163, file: !2163, line: 91, type: !2265, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2267)
!2265 = !DISubroutineType(types: !2266)
!2266 = !{!676, !676, !2191}
!2267 = !{!2268, !2269}
!2268 = !DILocalVariable(name: "__c", arg: 1, scope: !2264, file: !2163, line: 91, type: !676)
!2269 = !DILocalVariable(name: "__stream", arg: 2, scope: !2264, file: !2163, line: 91, type: !2191)
!2270 = !DILocation(line: 0, scope: !2264)
!2271 = !DILocation(line: 93, column: 10, scope: !2264)
!2272 = !DILocation(line: 93, column: 3, scope: !2264)
!2273 = distinct !DISubprogram(name: "putc_unlocked", scope: !2163, file: !2163, line: 101, type: !2265, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2274)
!2274 = !{!2275, !2276}
!2275 = !DILocalVariable(name: "__c", arg: 1, scope: !2273, file: !2163, line: 101, type: !676)
!2276 = !DILocalVariable(name: "__stream", arg: 2, scope: !2273, file: !2163, line: 101, type: !2191)
!2277 = !DILocation(line: 0, scope: !2273)
!2278 = !DILocation(line: 103, column: 10, scope: !2273)
!2279 = !DILocation(line: 103, column: 3, scope: !2273)
!2280 = distinct !DISubprogram(name: "putchar_unlocked", scope: !2163, file: !2163, line: 108, type: !2256, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2281)
!2281 = !{!2282}
!2282 = !DILocalVariable(name: "__c", arg: 1, scope: !2280, file: !2163, line: 108, type: !676)
!2283 = !DILocation(line: 0, scope: !2280)
!2284 = !DILocation(line: 110, column: 10, scope: !2280)
!2285 = !DILocation(line: 110, column: 3, scope: !2280)
!2286 = distinct !DISubprogram(name: "getline", scope: !2163, file: !2163, line: 118, type: !2287, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2291)
!2287 = !DISubroutineType(types: !2288)
!2288 = !{!2289, !677, !2290, !2191}
!2289 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !2046, line: 193, baseType: !745)
!2290 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1158, size: 64)
!2291 = !{!2292, !2293, !2294}
!2292 = !DILocalVariable(name: "__lineptr", arg: 1, scope: !2286, file: !2163, line: 118, type: !677)
!2293 = !DILocalVariable(name: "__n", arg: 2, scope: !2286, file: !2163, line: 118, type: !2290)
!2294 = !DILocalVariable(name: "__stream", arg: 3, scope: !2286, file: !2163, line: 118, type: !2191)
!2295 = !DILocation(line: 0, scope: !2286)
!2296 = !DILocation(line: 120, column: 10, scope: !2286)
!2297 = !DILocation(line: 120, column: 3, scope: !2286)
!2298 = distinct !DISubprogram(name: "feof_unlocked", scope: !2163, file: !2163, line: 128, type: !2189, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2299)
!2299 = !{!2300}
!2300 = !DILocalVariable(name: "__stream", arg: 1, scope: !2298, file: !2163, line: 128, type: !2191)
!2301 = !DILocation(line: 0, scope: !2298)
!2302 = !DILocation(line: 130, column: 10, scope: !2298)
!2303 = !DILocation(line: 130, column: 3, scope: !2298)
!2304 = distinct !DISubprogram(name: "ferror_unlocked", scope: !2163, file: !2163, line: 135, type: !2189, scopeLine: 136, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2305)
!2305 = !{!2306}
!2306 = !DILocalVariable(name: "__stream", arg: 1, scope: !2304, file: !2163, line: 135, type: !2191)
!2307 = !DILocation(line: 0, scope: !2304)
!2308 = !DILocation(line: 137, column: 10, scope: !2304)
!2309 = !DILocation(line: 137, column: 3, scope: !2304)
!2310 = distinct !DISubprogram(name: "tolower", scope: !2311, file: !2311, line: 207, type: !2256, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2312)
!2311 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!2312 = !{!2313}
!2313 = !DILocalVariable(name: "__c", arg: 1, scope: !2310, file: !2311, line: 207, type: !676)
!2314 = !DILocation(line: 0, scope: !2310)
!2315 = !DILocation(line: 209, column: 22, scope: !2310)
!2316 = !DILocation(line: 209, column: 39, scope: !2310)
!2317 = !DILocation(line: 209, column: 38, scope: !2310)
!2318 = !DILocation(line: 209, column: 37, scope: !2310)
!2319 = !DILocation(line: 209, column: 10, scope: !2310)
!2320 = !DILocation(line: 209, column: 3, scope: !2310)
!2321 = distinct !DISubprogram(name: "toupper", scope: !2311, file: !2311, line: 213, type: !2256, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2322)
!2322 = !{!2323}
!2323 = !DILocalVariable(name: "__c", arg: 1, scope: !2321, file: !2311, line: 213, type: !676)
!2324 = !DILocation(line: 0, scope: !2321)
!2325 = !DILocation(line: 215, column: 22, scope: !2321)
!2326 = !DILocation(line: 215, column: 39, scope: !2321)
!2327 = !DILocation(line: 215, column: 38, scope: !2321)
!2328 = !DILocation(line: 215, column: 37, scope: !2321)
!2329 = !DILocation(line: 215, column: 10, scope: !2321)
!2330 = !DILocation(line: 215, column: 3, scope: !2321)
!2331 = distinct !DISubprogram(name: "atoi", scope: !2332, file: !2332, line: 361, type: !2333, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2335)
!2332 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!2333 = !DISubroutineType(types: !2334)
!2334 = !{!676, !681}
!2335 = !{!2336}
!2336 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2331, file: !2332, line: 361, type: !681)
!2337 = !DILocation(line: 0, scope: !2331)
!2338 = !DILocation(line: 363, column: 16, scope: !2331)
!2339 = !DILocation(line: 363, column: 10, scope: !2331)
!2340 = !DILocation(line: 363, column: 3, scope: !2331)
!2341 = distinct !DISubprogram(name: "atol", scope: !2332, file: !2332, line: 366, type: !2342, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2344)
!2342 = !DISubroutineType(types: !2343)
!2343 = !{!745, !681}
!2344 = !{!2345}
!2345 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2341, file: !2332, line: 366, type: !681)
!2346 = !DILocation(line: 0, scope: !2341)
!2347 = !DILocation(line: 368, column: 10, scope: !2341)
!2348 = !DILocation(line: 368, column: 3, scope: !2341)
!2349 = distinct !DISubprogram(name: "atoll", scope: !2332, file: !2332, line: 373, type: !2350, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2353)
!2350 = !DISubroutineType(types: !2351)
!2351 = !{!2352, !681}
!2352 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!2353 = !{!2354}
!2354 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2349, file: !2332, line: 373, type: !681)
!2355 = !DILocation(line: 0, scope: !2349)
!2356 = !DILocation(line: 375, column: 10, scope: !2349)
!2357 = !DILocation(line: 375, column: 3, scope: !2349)
!2358 = distinct !DISubprogram(name: "bsearch", scope: !2359, file: !2359, line: 20, type: !2360, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2363)
!2359 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h", directory: "")
!2360 = !DISubroutineType(types: !2361)
!2361 = !{!680, !1508, !1508, !1158, !1158, !2362}
!2362 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !2332, line: 808, baseType: !1512)
!2363 = !{!2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373}
!2364 = !DILocalVariable(name: "__key", arg: 1, scope: !2358, file: !2359, line: 20, type: !1508)
!2365 = !DILocalVariable(name: "__base", arg: 2, scope: !2358, file: !2359, line: 20, type: !1508)
!2366 = !DILocalVariable(name: "__nmemb", arg: 3, scope: !2358, file: !2359, line: 20, type: !1158)
!2367 = !DILocalVariable(name: "__size", arg: 4, scope: !2358, file: !2359, line: 20, type: !1158)
!2368 = !DILocalVariable(name: "__compar", arg: 5, scope: !2358, file: !2359, line: 21, type: !2362)
!2369 = !DILocalVariable(name: "__l", scope: !2358, file: !2359, line: 23, type: !1158)
!2370 = !DILocalVariable(name: "__u", scope: !2358, file: !2359, line: 23, type: !1158)
!2371 = !DILocalVariable(name: "__idx", scope: !2358, file: !2359, line: 23, type: !1158)
!2372 = !DILocalVariable(name: "__p", scope: !2358, file: !2359, line: 24, type: !1508)
!2373 = !DILocalVariable(name: "__comparison", scope: !2358, file: !2359, line: 25, type: !676)
!2374 = !DILocation(line: 0, scope: !2358)
!2375 = !DILocation(line: 29, column: 3, scope: !2358)
!2376 = !DILocation(line: 27, column: 7, scope: !2358)
!2377 = !DILocation(line: 29, column: 14, scope: !2358)
!2378 = !DILocation(line: 31, column: 20, scope: !2379)
!2379 = distinct !DILexicalBlock(scope: !2358, file: !2359, line: 30, column: 5)
!2380 = !DILocation(line: 31, column: 27, scope: !2379)
!2381 = !DILocation(line: 32, column: 56, scope: !2379)
!2382 = !DILocation(line: 32, column: 47, scope: !2379)
!2383 = !DILocation(line: 33, column: 22, scope: !2379)
!2384 = !DILocation(line: 34, column: 24, scope: !2385)
!2385 = distinct !DILexicalBlock(scope: !2379, file: !2359, line: 34, column: 11)
!2386 = !DILocation(line: 34, column: 11, scope: !2379)
!2387 = !DILocation(line: 36, column: 29, scope: !2388)
!2388 = distinct !DILexicalBlock(scope: !2385, file: !2359, line: 36, column: 16)
!2389 = !DILocation(line: 36, column: 16, scope: !2385)
!2390 = !DILocation(line: 37, column: 14, scope: !2388)
!2391 = distinct !{!2391, !2375, !2392}
!2392 = !DILocation(line: 40, column: 5, scope: !2358)
!2393 = !DILocation(line: 43, column: 1, scope: !2358)
!2394 = distinct !DISubprogram(name: "atof", scope: !2395, file: !2395, line: 25, type: !2396, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2399)
!2395 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h", directory: "")
!2396 = !DISubroutineType(types: !2397)
!2397 = !{!2398, !681}
!2398 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!2399 = !{!2400}
!2400 = !DILocalVariable(name: "__nptr", arg: 1, scope: !2394, file: !2395, line: 25, type: !681)
!2401 = !DILocation(line: 0, scope: !2394)
!2402 = !DILocation(line: 27, column: 10, scope: !2394)
!2403 = !DILocation(line: 27, column: 3, scope: !2394)
!2404 = distinct !DISubprogram(name: "strtoimax", scope: !2405, file: !2405, line: 324, type: !2406, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2412)
!2405 = !DIFile(filename: "/usr/include/inttypes.h", directory: "")
!2406 = !DISubroutineType(types: !2407)
!2407 = !{!2408, !2166, !2411, !676}
!2408 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !2409, line: 101, baseType: !2410)
!2409 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!2410 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !2046, line: 72, baseType: !745)
!2411 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !677)
!2412 = !{!2413, !2414, !2415}
!2413 = !DILocalVariable(name: "nptr", arg: 1, scope: !2404, file: !2405, line: 324, type: !2166)
!2414 = !DILocalVariable(name: "endptr", arg: 2, scope: !2404, file: !2405, line: 324, type: !2411)
!2415 = !DILocalVariable(name: "base", arg: 3, scope: !2404, file: !2405, line: 324, type: !676)
!2416 = !DILocation(line: 0, scope: !2404)
!2417 = !DILocation(line: 327, column: 10, scope: !2404)
!2418 = !DILocation(line: 327, column: 3, scope: !2404)
!2419 = distinct !DISubprogram(name: "strtoumax", scope: !2405, file: !2405, line: 336, type: !2420, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2424)
!2420 = !DISubroutineType(types: !2421)
!2421 = !{!2422, !2166, !2411, !676}
!2422 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !2409, line: 102, baseType: !2423)
!2423 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !2046, line: 73, baseType: !743)
!2424 = !{!2425, !2426, !2427}
!2425 = !DILocalVariable(name: "nptr", arg: 1, scope: !2419, file: !2405, line: 336, type: !2166)
!2426 = !DILocalVariable(name: "endptr", arg: 2, scope: !2419, file: !2405, line: 336, type: !2411)
!2427 = !DILocalVariable(name: "base", arg: 3, scope: !2419, file: !2405, line: 336, type: !676)
!2428 = !DILocation(line: 0, scope: !2419)
!2429 = !DILocation(line: 339, column: 10, scope: !2419)
!2430 = !DILocation(line: 339, column: 3, scope: !2419)
!2431 = distinct !DISubprogram(name: "wcstoimax", scope: !2405, file: !2405, line: 348, type: !2432, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2441)
!2432 = !DISubroutineType(types: !2433)
!2433 = !{!2408, !2434, !2438, !676}
!2434 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !2435)
!2435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2436, size: 64)
!2436 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2437)
!2437 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gwchar_t", file: !2405, line: 34, baseType: !676)
!2438 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !2439)
!2439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2440, size: 64)
!2440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2437, size: 64)
!2441 = !{!2442, !2443, !2444}
!2442 = !DILocalVariable(name: "nptr", arg: 1, scope: !2431, file: !2405, line: 348, type: !2434)
!2443 = !DILocalVariable(name: "endptr", arg: 2, scope: !2431, file: !2405, line: 348, type: !2438)
!2444 = !DILocalVariable(name: "base", arg: 3, scope: !2431, file: !2405, line: 348, type: !676)
!2445 = !DILocation(line: 0, scope: !2431)
!2446 = !DILocation(line: 351, column: 10, scope: !2431)
!2447 = !DILocation(line: 351, column: 3, scope: !2431)
!2448 = distinct !DISubprogram(name: "wcstoumax", scope: !2405, file: !2405, line: 362, type: !2449, scopeLine: 364, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2451)
!2449 = !DISubroutineType(types: !2450)
!2450 = !{!2422, !2434, !2438, !676}
!2451 = !{!2452, !2453, !2454}
!2452 = !DILocalVariable(name: "nptr", arg: 1, scope: !2448, file: !2405, line: 362, type: !2434)
!2453 = !DILocalVariable(name: "endptr", arg: 2, scope: !2448, file: !2405, line: 362, type: !2438)
!2454 = !DILocalVariable(name: "base", arg: 3, scope: !2448, file: !2405, line: 362, type: !676)
!2455 = !DILocation(line: 0, scope: !2448)
!2456 = !DILocation(line: 365, column: 10, scope: !2448)
!2457 = !DILocation(line: 365, column: 3, scope: !2448)
!2458 = distinct !DISubprogram(name: "stat", scope: !2459, file: !2459, line: 453, type: !2460, scopeLine: 454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2497)
!2459 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/stat.h", directory: "")
!2460 = !DISubroutineType(types: !2461)
!2461 = !{!676, !681, !2462}
!2462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2463, size: 64)
!2463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !2464, line: 46, size: 1152, elements: !2465)
!2464 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!2465 = !{!2466, !2468, !2470, !2472, !2474, !2476, !2478, !2479, !2480, !2481, !2483, !2485, !2493, !2494, !2495}
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2463, file: !2464, line: 48, baseType: !2467, size: 64)
!2467 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !2046, line: 145, baseType: !743)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2463, file: !2464, line: 53, baseType: !2469, size: 64, offset: 64)
!2469 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !2046, line: 148, baseType: !743)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2463, file: !2464, line: 61, baseType: !2471, size: 64, offset: 128)
!2471 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !2046, line: 151, baseType: !743)
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2463, file: !2464, line: 62, baseType: !2473, size: 32, offset: 192)
!2473 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !2046, line: 150, baseType: !7)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2463, file: !2464, line: 64, baseType: !2475, size: 32, offset: 224)
!2475 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !2046, line: 146, baseType: !7)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2463, file: !2464, line: 65, baseType: !2477, size: 32, offset: 256)
!2477 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !2046, line: 147, baseType: !7)
!2478 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2463, file: !2464, line: 67, baseType: !676, size: 32, offset: 288)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2463, file: !2464, line: 69, baseType: !2467, size: 64, offset: 320)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2463, file: !2464, line: 74, baseType: !2217, size: 64, offset: 384)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2463, file: !2464, line: 78, baseType: !2482, size: 64, offset: 448)
!2482 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !2046, line: 174, baseType: !745)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2463, file: !2464, line: 80, baseType: !2484, size: 64, offset: 512)
!2484 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !2046, line: 179, baseType: !745)
!2485 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2463, file: !2464, line: 91, baseType: !2486, size: 128, offset: 576)
!2486 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !2487, line: 10, size: 128, elements: !2488)
!2487 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!2488 = !{!2489, !2491}
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2486, file: !2487, line: 12, baseType: !2490, size: 64)
!2490 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !2046, line: 160, baseType: !745)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2486, file: !2487, line: 16, baseType: !2492, size: 64, offset: 64)
!2492 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !2046, line: 196, baseType: !745)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2463, file: !2464, line: 92, baseType: !2486, size: 128, offset: 704)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2463, file: !2464, line: 93, baseType: !2486, size: 128, offset: 832)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2463, file: !2464, line: 106, baseType: !2496, size: 192, offset: 960)
!2496 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2492, size: 192, elements: !763)
!2497 = !{!2498, !2499}
!2498 = !DILocalVariable(name: "__path", arg: 1, scope: !2458, file: !2459, line: 453, type: !681)
!2499 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2458, file: !2459, line: 453, type: !2462)
!2500 = !DILocation(line: 0, scope: !2458)
!2501 = !DILocation(line: 455, column: 10, scope: !2458)
!2502 = !DILocation(line: 455, column: 3, scope: !2458)
!2503 = distinct !DISubprogram(name: "lstat", scope: !2459, file: !2459, line: 460, type: !2460, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2504)
!2504 = !{!2505, !2506}
!2505 = !DILocalVariable(name: "__path", arg: 1, scope: !2503, file: !2459, line: 460, type: !681)
!2506 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2503, file: !2459, line: 460, type: !2462)
!2507 = !DILocation(line: 0, scope: !2503)
!2508 = !DILocation(line: 462, column: 10, scope: !2503)
!2509 = !DILocation(line: 462, column: 3, scope: !2503)
!2510 = distinct !DISubprogram(name: "fstat", scope: !2459, file: !2459, line: 467, type: !2511, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2513)
!2511 = !DISubroutineType(types: !2512)
!2512 = !{!676, !676, !2462}
!2513 = !{!2514, !2515}
!2514 = !DILocalVariable(name: "__fd", arg: 1, scope: !2510, file: !2459, line: 467, type: !676)
!2515 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2510, file: !2459, line: 467, type: !2462)
!2516 = !DILocation(line: 0, scope: !2510)
!2517 = !DILocation(line: 469, column: 10, scope: !2510)
!2518 = !DILocation(line: 469, column: 3, scope: !2510)
!2519 = distinct !DISubprogram(name: "fstatat", scope: !2459, file: !2459, line: 474, type: !2520, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2522)
!2520 = !DISubroutineType(types: !2521)
!2521 = !{!676, !676, !681, !2462, !676}
!2522 = !{!2523, !2524, !2525, !2526}
!2523 = !DILocalVariable(name: "__fd", arg: 1, scope: !2519, file: !2459, line: 474, type: !676)
!2524 = !DILocalVariable(name: "__filename", arg: 2, scope: !2519, file: !2459, line: 474, type: !681)
!2525 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2519, file: !2459, line: 474, type: !2462)
!2526 = !DILocalVariable(name: "__flag", arg: 4, scope: !2519, file: !2459, line: 474, type: !676)
!2527 = !DILocation(line: 0, scope: !2519)
!2528 = !DILocation(line: 477, column: 10, scope: !2519)
!2529 = !DILocation(line: 477, column: 3, scope: !2519)
!2530 = distinct !DISubprogram(name: "mknod", scope: !2459, file: !2459, line: 483, type: !2531, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2533)
!2531 = !DISubroutineType(types: !2532)
!2532 = !{!676, !681, !2473, !2467}
!2533 = !{!2534, !2535, !2536}
!2534 = !DILocalVariable(name: "__path", arg: 1, scope: !2530, file: !2459, line: 483, type: !681)
!2535 = !DILocalVariable(name: "__mode", arg: 2, scope: !2530, file: !2459, line: 483, type: !2473)
!2536 = !DILocalVariable(name: "__dev", arg: 3, scope: !2530, file: !2459, line: 483, type: !2467)
!2537 = !DILocation(line: 0, scope: !2530)
!2538 = !DILocation(line: 485, column: 10, scope: !2530)
!2539 = !DILocation(line: 485, column: 3, scope: !2530)
!2540 = distinct !DISubprogram(name: "mknodat", scope: !2459, file: !2459, line: 491, type: !2541, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2543)
!2541 = !DISubroutineType(types: !2542)
!2542 = !{!676, !676, !681, !2473, !2467}
!2543 = !{!2544, !2545, !2546, !2547}
!2544 = !DILocalVariable(name: "__fd", arg: 1, scope: !2540, file: !2459, line: 491, type: !676)
!2545 = !DILocalVariable(name: "__path", arg: 2, scope: !2540, file: !2459, line: 491, type: !681)
!2546 = !DILocalVariable(name: "__mode", arg: 3, scope: !2540, file: !2459, line: 491, type: !2473)
!2547 = !DILocalVariable(name: "__dev", arg: 4, scope: !2540, file: !2459, line: 491, type: !2467)
!2548 = !DILocation(line: 0, scope: !2540)
!2549 = !DILocation(line: 494, column: 10, scope: !2540)
!2550 = !DILocation(line: 494, column: 3, scope: !2540)
!2551 = distinct !DISubprogram(name: "stat64", scope: !2459, file: !2459, line: 502, type: !2552, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2574)
!2552 = !DISubroutineType(types: !2553)
!2553 = !{!676, !681, !2554}
!2554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2555, size: 64)
!2555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !2464, line: 119, size: 1152, elements: !2556)
!2556 = !{!2557, !2558, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2570, !2571, !2572, !2573}
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2555, file: !2464, line: 121, baseType: !2467, size: 64)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2555, file: !2464, line: 123, baseType: !2559, size: 64, offset: 64)
!2559 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino64_t", file: !2046, line: 149, baseType: !743)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2555, file: !2464, line: 124, baseType: !2471, size: 64, offset: 128)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2555, file: !2464, line: 125, baseType: !2473, size: 32, offset: 192)
!2562 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2555, file: !2464, line: 132, baseType: !2475, size: 32, offset: 224)
!2563 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2555, file: !2464, line: 133, baseType: !2477, size: 32, offset: 256)
!2564 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2555, file: !2464, line: 135, baseType: !676, size: 32, offset: 288)
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2555, file: !2464, line: 136, baseType: !2467, size: 64, offset: 320)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2555, file: !2464, line: 137, baseType: !2217, size: 64, offset: 384)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2555, file: !2464, line: 143, baseType: !2482, size: 64, offset: 448)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2555, file: !2464, line: 144, baseType: !2569, size: 64, offset: 512)
!2569 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt64_t", file: !2046, line: 180, baseType: !745)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2555, file: !2464, line: 152, baseType: !2486, size: 128, offset: 576)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2555, file: !2464, line: 153, baseType: !2486, size: 128, offset: 704)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2555, file: !2464, line: 154, baseType: !2486, size: 128, offset: 832)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2555, file: !2464, line: 164, baseType: !2496, size: 192, offset: 960)
!2574 = !{!2575, !2576}
!2575 = !DILocalVariable(name: "__path", arg: 1, scope: !2551, file: !2459, line: 502, type: !681)
!2576 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2551, file: !2459, line: 502, type: !2554)
!2577 = !DILocation(line: 0, scope: !2551)
!2578 = !DILocation(line: 504, column: 10, scope: !2551)
!2579 = !DILocation(line: 504, column: 3, scope: !2551)
!2580 = distinct !DISubprogram(name: "lstat64", scope: !2459, file: !2459, line: 509, type: !2552, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2581)
!2581 = !{!2582, !2583}
!2582 = !DILocalVariable(name: "__path", arg: 1, scope: !2580, file: !2459, line: 509, type: !681)
!2583 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2580, file: !2459, line: 509, type: !2554)
!2584 = !DILocation(line: 0, scope: !2580)
!2585 = !DILocation(line: 511, column: 10, scope: !2580)
!2586 = !DILocation(line: 511, column: 3, scope: !2580)
!2587 = distinct !DISubprogram(name: "fstat64", scope: !2459, file: !2459, line: 516, type: !2588, scopeLine: 517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2590)
!2588 = !DISubroutineType(types: !2589)
!2589 = !{!676, !676, !2554}
!2590 = !{!2591, !2592}
!2591 = !DILocalVariable(name: "__fd", arg: 1, scope: !2587, file: !2459, line: 516, type: !676)
!2592 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !2587, file: !2459, line: 516, type: !2554)
!2593 = !DILocation(line: 0, scope: !2587)
!2594 = !DILocation(line: 518, column: 10, scope: !2587)
!2595 = !DILocation(line: 518, column: 3, scope: !2587)
!2596 = distinct !DISubprogram(name: "fstatat64", scope: !2459, file: !2459, line: 523, type: !2597, scopeLine: 525, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2599)
!2597 = !DISubroutineType(types: !2598)
!2598 = !{!676, !676, !681, !2554, !676}
!2599 = !{!2600, !2601, !2602, !2603}
!2600 = !DILocalVariable(name: "__fd", arg: 1, scope: !2596, file: !2459, line: 523, type: !676)
!2601 = !DILocalVariable(name: "__filename", arg: 2, scope: !2596, file: !2459, line: 523, type: !681)
!2602 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !2596, file: !2459, line: 523, type: !2554)
!2603 = !DILocalVariable(name: "__flag", arg: 4, scope: !2596, file: !2459, line: 523, type: !676)
!2604 = !DILocation(line: 0, scope: !2596)
!2605 = !DILocation(line: 526, column: 10, scope: !2596)
!2606 = !DILocation(line: 526, column: 3, scope: !2596)
!2607 = distinct !DISubprogram(name: "dump_ops_vector", scope: !3, file: !3, line: 1958, type: !2608, scopeLine: 1959, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2610)
!2608 = !DISubroutineType(types: !2609)
!2609 = !{null, !2191, !2057}
!2610 = !{!2611, !2612, !2613, !2614}
!2611 = !DILocalVariable(name: "file", arg: 1, scope: !2607, file: !3, line: 1958, type: !2191)
!2612 = !DILocalVariable(name: "ops", arg: 2, scope: !2607, file: !3, line: 1958, type: !2057)
!2613 = !DILocalVariable(name: "oe", scope: !2607, file: !3, line: 1960, type: !683)
!2614 = !DILocalVariable(name: "i", scope: !2607, file: !3, line: 1961, type: !7)
!2615 = !DILocation(line: 0, scope: !2607)
!2616 = !DILocation(line: 1960, column: 3, scope: !2607)
!2617 = !DILocation(line: 0, scope: !2618)
!2618 = distinct !DILexicalBlock(scope: !2619, file: !3, line: 1963, column: 3)
!2619 = distinct !DILexicalBlock(scope: !2607, file: !3, line: 1963, column: 3)
!2620 = !DILocation(line: 1963, column: 8, scope: !2619)
!2621 = !DILocation(line: 0, scope: !2619)
!2622 = !DILocation(line: 1963, column: 15, scope: !2618)
!2623 = !DILocation(line: 1963, column: 3, scope: !2619)
!2624 = !DILocation(line: 1965, column: 54, scope: !2625)
!2625 = distinct !DILexicalBlock(scope: !2618, file: !3, line: 1964, column: 5)
!2626 = !DILocation(line: 1965, column: 58, scope: !2625)
!2627 = !DILocation(line: 1965, column: 7, scope: !2625)
!2628 = !DILocation(line: 1966, column: 33, scope: !2625)
!2629 = !DILocation(line: 1966, column: 37, scope: !2625)
!2630 = !DILocation(line: 1966, column: 7, scope: !2625)
!2631 = !DILocation(line: 1963, column: 59, scope: !2618)
!2632 = !DILocation(line: 1963, column: 3, scope: !2618)
!2633 = distinct !{!2633, !2623, !2634}
!2634 = !DILocation(line: 1967, column: 5, scope: !2619)
!2635 = !DILocation(line: 1968, column: 1, scope: !2607)
!2636 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_iterate", scope: !3, file: !3, line: 297, type: !2637, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2642)
!2637 = !DISubroutineType(types: !2638)
!2638 = !{!676, !2639, !7, !2641}
!2639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2640, size: 64)
!2640 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2062)
!2641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !683, size: 64)
!2642 = !{!2643, !2644, !2645}
!2643 = !DILocalVariable(name: "vec_", arg: 1, scope: !2636, file: !3, line: 297, type: !2639)
!2644 = !DILocalVariable(name: "ix_", arg: 2, scope: !2636, file: !3, line: 297, type: !7)
!2645 = !DILocalVariable(name: "ptr", arg: 3, scope: !2636, file: !3, line: 297, type: !2641)
!2646 = !DILocation(line: 0, scope: !2636)
!2647 = !DILocation(line: 297, column: 1, scope: !2648)
!2648 = distinct !DILexicalBlock(scope: !2636, file: !3, line: 297, column: 1)
!2649 = !DILocation(line: 297, column: 1, scope: !2636)
!2650 = !DILocation(line: 297, column: 1, scope: !2651)
!2651 = distinct !DILexicalBlock(scope: !2648, file: !3, line: 297, column: 1)
!2652 = !DILocation(line: 297, column: 1, scope: !2653)
!2653 = distinct !DILexicalBlock(scope: !2648, file: !3, line: 297, column: 1)
!2654 = !DILocation(line: 0, scope: !2648)
!2655 = distinct !DISubprogram(name: "debug_ops_vector", scope: !3, file: !3, line: 1973, type: !2656, scopeLine: 1974, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2658)
!2656 = !DISubroutineType(types: !2657)
!2657 = !{null, !2057}
!2658 = !{!2659}
!2659 = !DILocalVariable(name: "ops", arg: 1, scope: !2655, file: !3, line: 1973, type: !2057)
!2660 = !DILocation(line: 0, scope: !2655)
!2661 = !DILocation(line: 1975, column: 20, scope: !2655)
!2662 = !DILocation(line: 1975, column: 3, scope: !2655)
!2663 = !DILocation(line: 1976, column: 1, scope: !2655)
!2664 = distinct !DISubprogram(name: "gate_tree_ssa_reassoc", scope: !3, file: !3, line: 2077, type: !2141, scopeLine: 2078, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2184)
!2665 = !DILocation(line: 2079, column: 10, scope: !2664)
!2666 = !DILocation(line: 2079, column: 28, scope: !2664)
!2667 = !DILocation(line: 2079, column: 3, scope: !2664)
!2668 = distinct !DISubprogram(name: "execute_reassoc", scope: !3, file: !3, line: 2065, type: !2145, scopeLine: 2066, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2184)
!2669 = !DILocation(line: 2067, column: 3, scope: !2668)
!2670 = !DILocation(line: 2069, column: 3, scope: !2668)
!2671 = !DILocation(line: 2070, column: 3, scope: !2668)
!2672 = !DILocation(line: 2072, column: 3, scope: !2668)
!2673 = !DILocation(line: 2073, column: 3, scope: !2668)
!2674 = distinct !DISubprogram(name: "init_reassoc", scope: !3, file: !3, line: 1988, type: !2675, scopeLine: 1989, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2677)
!2675 = !DISubroutineType(types: !2676)
!2676 = !{null}
!2677 = !{!2678, !2679, !2680, !2681, !2682, !2688}
!2678 = !DILocalVariable(name: "i", scope: !2674, file: !3, line: 1990, type: !676)
!2679 = !DILocalVariable(name: "rank", scope: !2674, file: !3, line: 1991, type: !745)
!2680 = !DILocalVariable(name: "param", scope: !2674, file: !3, line: 1992, type: !689)
!2681 = !DILocalVariable(name: "bbs", scope: !2674, file: !3, line: 1993, type: !2041)
!2682 = !DILocalVariable(name: "def", scope: !2683, file: !3, line: 2017, type: !689)
!2683 = distinct !DILexicalBlock(scope: !2684, file: !3, line: 2016, column: 2)
!2684 = distinct !DILexicalBlock(scope: !2685, file: !3, line: 2015, column: 11)
!2685 = distinct !DILexicalBlock(scope: !2686, file: !3, line: 2014, column: 5)
!2686 = distinct !DILexicalBlock(scope: !2687, file: !3, line: 2011, column: 3)
!2687 = distinct !DILexicalBlock(scope: !2674, file: !3, line: 2011, column: 3)
!2688 = !DILocalVariable(name: "def", scope: !2689, file: !3, line: 2025, type: !689)
!2689 = distinct !DILexicalBlock(scope: !2690, file: !3, line: 2024, column: 5)
!2690 = distinct !DILexicalBlock(scope: !2674, file: !3, line: 2023, column: 7)
!2691 = !DILocation(line: 0, scope: !2674)
!2692 = !DILocation(line: 1993, column: 14, scope: !2674)
!2693 = !DILocation(line: 1997, column: 3, scope: !2674)
!2694 = !DILocation(line: 1999, column: 3, scope: !2674)
!2695 = !DILocation(line: 2001, column: 24, scope: !2674)
!2696 = !DILocation(line: 2001, column: 22, scope: !2674)
!2697 = !DILocation(line: 2006, column: 3, scope: !2674)
!2698 = !DILocation(line: 2007, column: 13, scope: !2674)
!2699 = !DILocation(line: 2007, column: 11, scope: !2674)
!2700 = !DILocation(line: 2008, column: 18, scope: !2674)
!2701 = !DILocation(line: 2008, column: 16, scope: !2674)
!2702 = !DILocation(line: 2011, column: 16, scope: !2687)
!2703 = !DILocation(line: 2011, column: 8, scope: !2687)
!2704 = !DILocation(line: 0, scope: !2687)
!2705 = !DILocation(line: 2011, column: 3, scope: !2687)
!2706 = !DILocation(line: 2015, column: 11, scope: !2684)
!2707 = !DILocation(line: 2015, column: 44, scope: !2684)
!2708 = !DILocation(line: 2015, column: 11, scope: !2685)
!2709 = !DILocation(line: 2017, column: 35, scope: !2683)
!2710 = !DILocation(line: 2017, column: 15, scope: !2683)
!2711 = !DILocation(line: 0, scope: !2683)
!2712 = !DILocation(line: 2018, column: 30, scope: !2683)
!2713 = !DILocation(line: 2018, column: 4, scope: !2683)
!2714 = !DILocation(line: 2019, column: 2, scope: !2683)
!2715 = !DILocation(line: 2013, column: 16, scope: !2686)
!2716 = !DILocation(line: 2011, column: 3, scope: !2686)
!2717 = distinct !{!2717, !2705, !2718}
!2718 = !DILocation(line: 2020, column: 5, scope: !2687)
!2719 = !DILocation(line: 2023, column: 13, scope: !2690)
!2720 = !DILocation(line: 2023, column: 31, scope: !2690)
!2721 = !DILocation(line: 2023, column: 7, scope: !2674)
!2722 = !DILocation(line: 2025, column: 18, scope: !2689)
!2723 = !DILocation(line: 0, scope: !2689)
!2724 = !DILocation(line: 2026, column: 15, scope: !2725)
!2725 = distinct !DILexicalBlock(scope: !2689, file: !3, line: 2026, column: 11)
!2726 = !DILocation(line: 2026, column: 11, scope: !2689)
!2727 = !DILocation(line: 2027, column: 28, scope: !2725)
!2728 = !DILocation(line: 2027, column: 2, scope: !2725)
!2729 = !DILocation(line: 2031, column: 8, scope: !2730)
!2730 = distinct !DILexicalBlock(scope: !2674, file: !3, line: 2031, column: 3)
!2731 = !DILocation(line: 2031, column: 19, scope: !2732)
!2732 = distinct !DILexicalBlock(scope: !2730, file: !3, line: 2031, column: 3)
!2733 = !DILocation(line: 2031, column: 34, scope: !2732)
!2734 = !DILocation(line: 2031, column: 17, scope: !2732)
!2735 = !DILocation(line: 2031, column: 3, scope: !2730)
!2736 = !DILocation(line: 2032, column: 23, scope: !2732)
!2737 = !DILocation(line: 2032, column: 31, scope: !2732)
!2738 = !DILocation(line: 2032, column: 5, scope: !2732)
!2739 = !DILocation(line: 2032, column: 13, scope: !2732)
!2740 = !DILocation(line: 2032, column: 21, scope: !2732)
!2741 = !DILocation(line: 2031, column: 55, scope: !2732)
!2742 = !DILocation(line: 2031, column: 3, scope: !2732)
!2743 = distinct !{!2743, !2735, !2744}
!2744 = !DILocation(line: 2032, column: 34, scope: !2730)
!2745 = !DILocation(line: 2034, column: 3, scope: !2674)
!2746 = !DILocation(line: 2035, column: 3, scope: !2674)
!2747 = !DILocation(line: 2036, column: 23, scope: !2674)
!2748 = !DILocation(line: 2037, column: 1, scope: !2674)
!2749 = distinct !DISubprogram(name: "do_reassoc", scope: !3, file: !3, line: 1979, type: !2675, scopeLine: 1980, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2184)
!2750 = !DILocation(line: 1981, column: 25, scope: !2749)
!2751 = !DILocation(line: 1981, column: 3, scope: !2749)
!2752 = !DILocation(line: 1982, column: 19, scope: !2749)
!2753 = !DILocation(line: 1982, column: 3, scope: !2749)
!2754 = !DILocation(line: 1983, column: 1, scope: !2749)
!2755 = distinct !DISubprogram(name: "repropagate_negates", scope: !3, file: !3, line: 1703, type: !2675, scopeLine: 1704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2756)
!2756 = !{!2757, !2758, !2759, !2763, !2768, !2769}
!2757 = !DILocalVariable(name: "i", scope: !2755, file: !3, line: 1705, type: !7)
!2758 = !DILocalVariable(name: "negate", scope: !2755, file: !3, line: 1706, type: !689)
!2759 = !DILocalVariable(name: "user", scope: !2760, file: !3, line: 1710, type: !1013)
!2760 = distinct !DILexicalBlock(scope: !2761, file: !3, line: 1709, column: 5)
!2761 = distinct !DILexicalBlock(scope: !2762, file: !3, line: 1708, column: 3)
!2762 = distinct !DILexicalBlock(scope: !2755, file: !3, line: 1708, column: 3)
!2763 = !DILocalVariable(name: "rhs1", scope: !2764, file: !3, line: 1735, type: !689)
!2764 = distinct !DILexicalBlock(scope: !2765, file: !3, line: 1734, column: 6)
!2765 = distinct !DILexicalBlock(scope: !2766, file: !3, line: 1733, column: 8)
!2766 = distinct !DILexicalBlock(scope: !2767, file: !3, line: 1720, column: 2)
!2767 = distinct !DILexicalBlock(scope: !2760, file: !3, line: 1717, column: 11)
!2768 = !DILocalVariable(name: "rhs2", scope: !2764, file: !3, line: 1736, type: !689)
!2769 = !DILocalVariable(name: "gsi", scope: !2764, file: !3, line: 1737, type: !2770)
!2770 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !574, line: 265, baseType: !2771)
!2771 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !574, line: 254, size: 192, elements: !2772)
!2772 = !{!2773, !2774, !2775}
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2771, file: !574, line: 257, baseType: !1008, size: 64)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2771, file: !574, line: 263, baseType: !1003, size: 64, offset: 64)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !2771, file: !574, line: 264, baseType: !1465, size: 64, offset: 128)
!2776 = !DILocation(line: 0, scope: !2755)
!2777 = !DILocation(line: 1706, column: 3, scope: !2755)
!2778 = !DILocation(line: 0, scope: !2764)
!2779 = !DILocation(line: 1708, column: 8, scope: !2762)
!2780 = !DILocation(line: 0, scope: !2762)
!2781 = !DILocation(line: 1708, column: 15, scope: !2761)
!2782 = !DILocation(line: 1708, column: 3, scope: !2762)
!2783 = !DILocation(line: 1710, column: 47, scope: !2760)
!2784 = !DILocation(line: 1710, column: 21, scope: !2760)
!2785 = !DILocation(line: 0, scope: !2760)
!2786 = !DILocation(line: 1717, column: 11, scope: !2767)
!2787 = !DILocation(line: 1718, column: 4, scope: !2767)
!2788 = !DILocation(line: 1718, column: 7, scope: !2767)
!2789 = !DILocation(line: 1719, column: 4, scope: !2767)
!2790 = !DILocation(line: 1719, column: 7, scope: !2767)
!2791 = !DILocation(line: 1719, column: 37, scope: !2767)
!2792 = !DILocation(line: 1717, column: 11, scope: !2760)
!2793 = !DILocation(line: 1724, column: 8, scope: !2794)
!2794 = distinct !DILexicalBlock(scope: !2766, file: !3, line: 1724, column: 8)
!2795 = !DILocation(line: 1724, column: 37, scope: !2794)
!2796 = !DILocation(line: 1724, column: 34, scope: !2794)
!2797 = !DILocation(line: 1724, column: 8, scope: !2766)
!2798 = !DILocation(line: 1727, column: 7, scope: !2799)
!2799 = distinct !DILexicalBlock(scope: !2794, file: !3, line: 1725, column: 6)
!2800 = !DILocation(line: 1728, column: 7, scope: !2799)
!2801 = !DILocation(line: 1726, column: 8, scope: !2799)
!2802 = !DILocation(line: 1729, column: 6, scope: !2799)
!2803 = !DILocation(line: 1733, column: 8, scope: !2765)
!2804 = !DILocation(line: 1733, column: 37, scope: !2765)
!2805 = !DILocation(line: 1733, column: 34, scope: !2765)
!2806 = !DILocation(line: 1733, column: 8, scope: !2766)
!2807 = !DILocation(line: 1735, column: 20, scope: !2764)
!2808 = !DILocation(line: 1736, column: 34, scope: !2764)
!2809 = !DILocation(line: 1736, column: 20, scope: !2764)
!2810 = !DILocation(line: 1737, column: 8, scope: !2764)
!2811 = !DILocation(line: 1737, column: 35, scope: !2764)
!2812 = !DILocation(line: 1738, column: 8, scope: !2764)
!2813 = !DILocation(line: 1739, column: 8, scope: !2764)
!2814 = !DILocation(line: 1740, column: 6, scope: !2765)
!2815 = !DILocation(line: 1740, column: 6, scope: !2764)
!2816 = !DILocation(line: 1708, column: 68, scope: !2761)
!2817 = !DILocation(line: 1708, column: 3, scope: !2761)
!2818 = distinct !{!2818, !2782, !2819}
!2819 = !DILocation(line: 1742, column: 5, scope: !2762)
!2820 = !DILocation(line: 1743, column: 1, scope: !2755)
!2821 = distinct !DISubprogram(name: "fini_reassoc", scope: !3, file: !3, line: 2043, type: !2675, scopeLine: 2044, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2184)
!2822 = !DILocation(line: 2045, column: 29, scope: !2821)
!2823 = !DILocation(line: 2046, column: 26, scope: !2821)
!2824 = !DILocation(line: 2045, column: 3, scope: !2821)
!2825 = !DILocation(line: 2047, column: 29, scope: !2821)
!2826 = !DILocation(line: 2048, column: 26, scope: !2821)
!2827 = !DILocation(line: 2047, column: 3, scope: !2821)
!2828 = !DILocation(line: 2049, column: 29, scope: !2821)
!2829 = !DILocation(line: 2050, column: 26, scope: !2821)
!2830 = !DILocation(line: 2049, column: 3, scope: !2821)
!2831 = !DILocation(line: 2051, column: 29, scope: !2821)
!2832 = !DILocation(line: 2052, column: 26, scope: !2821)
!2833 = !DILocation(line: 2051, column: 3, scope: !2821)
!2834 = !DILocation(line: 2054, column: 24, scope: !2821)
!2835 = !DILocation(line: 2054, column: 3, scope: !2821)
!2836 = !DILocation(line: 2055, column: 20, scope: !2821)
!2837 = !DILocation(line: 2055, column: 3, scope: !2821)
!2838 = !DILocation(line: 2056, column: 9, scope: !2821)
!2839 = !DILocation(line: 2056, column: 3, scope: !2821)
!2840 = !DILocation(line: 2057, column: 3, scope: !2821)
!2841 = !DILocation(line: 2058, column: 3, scope: !2821)
!2842 = !DILocation(line: 2059, column: 3, scope: !2821)
!2843 = !DILocation(line: 2060, column: 1, scope: !2821)
!2844 = distinct !DISubprogram(name: "insert_operand_rank", scope: !3, file: !3, line: 202, type: !2845, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2847)
!2845 = !DISubroutineType(types: !2846)
!2846 = !{null, !689, !745}
!2847 = !{!2848, !2849, !2850}
!2848 = !DILocalVariable(name: "e", arg: 1, scope: !2844, file: !3, line: 202, type: !689)
!2849 = !DILocalVariable(name: "rank", arg: 2, scope: !2844, file: !3, line: 202, type: !745)
!2850 = !DILocalVariable(name: "slot", scope: !2844, file: !3, line: 204, type: !1521)
!2851 = !DILocation(line: 0, scope: !2844)
!2852 = !DILocation(line: 205, column: 3, scope: !2844)
!2853 = !DILocation(line: 206, column: 30, scope: !2844)
!2854 = !DILocation(line: 206, column: 44, scope: !2844)
!2855 = !DILocation(line: 206, column: 10, scope: !2844)
!2856 = !DILocation(line: 207, column: 3, scope: !2844)
!2857 = !DILocation(line: 208, column: 11, scope: !2844)
!2858 = !DILocation(line: 208, column: 9, scope: !2844)
!2859 = !DILocation(line: 209, column: 1, scope: !2844)
!2860 = distinct !DISubprogram(name: "break_up_subtract_bb", scope: !3, file: !3, line: 1763, type: !2861, scopeLine: 1764, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2863)
!2861 = !DISubroutineType(types: !2862)
!2862 = !{null, !1465}
!2863 = !{!2864, !2865, !2866, !2867, !2871, !2874, !2875}
!2864 = !DILocalVariable(name: "bb", arg: 1, scope: !2860, file: !3, line: 1763, type: !1465)
!2865 = !DILocalVariable(name: "gsi", scope: !2860, file: !3, line: 1765, type: !2770)
!2866 = !DILocalVariable(name: "son", scope: !2860, file: !3, line: 1766, type: !1465)
!2867 = !DILocalVariable(name: "stmt", scope: !2868, file: !3, line: 1770, type: !1013)
!2868 = distinct !DILexicalBlock(scope: !2869, file: !3, line: 1769, column: 5)
!2869 = distinct !DILexicalBlock(scope: !2870, file: !3, line: 1768, column: 3)
!2870 = distinct !DILexicalBlock(scope: !2860, file: !3, line: 1768, column: 3)
!2871 = !DILocalVariable(name: "lhs", scope: !2872, file: !3, line: 1777, type: !689)
!2872 = distinct !DILexicalBlock(scope: !2873, file: !3, line: 1776, column: 2)
!2873 = distinct !DILexicalBlock(scope: !2868, file: !3, line: 1774, column: 11)
!2874 = !DILocalVariable(name: "rhs1", scope: !2872, file: !3, line: 1778, type: !689)
!2875 = !DILocalVariable(name: "rhs2", scope: !2872, file: !3, line: 1779, type: !689)
!2876 = !DILocation(line: 0, scope: !2860)
!2877 = !DILocation(line: 1765, column: 3, scope: !2860)
!2878 = !DILocation(line: 1768, column: 14, scope: !2870)
!2879 = !DILocation(line: 1768, column: 8, scope: !2870)
!2880 = !DILocation(line: 1768, column: 34, scope: !2869)
!2881 = !DILocation(line: 1768, column: 33, scope: !2869)
!2882 = !DILocation(line: 1768, column: 3, scope: !2870)
!2883 = !DILocation(line: 1770, column: 21, scope: !2868)
!2884 = !DILocation(line: 0, scope: !2868)
!2885 = !DILocation(line: 1771, column: 7, scope: !2868)
!2886 = !DILocation(line: 1774, column: 11, scope: !2873)
!2887 = !DILocation(line: 1775, column: 4, scope: !2873)
!2888 = !DILocation(line: 1775, column: 7, scope: !2873)
!2889 = !DILocation(line: 1775, column: 37, scope: !2873)
!2890 = !DILocation(line: 1774, column: 11, scope: !2868)
!2891 = !DILocation(line: 1777, column: 15, scope: !2872)
!2892 = !DILocation(line: 0, scope: !2872)
!2893 = !DILocation(line: 1778, column: 16, scope: !2872)
!2894 = !DILocation(line: 1779, column: 16, scope: !2872)
!2895 = !DILocation(line: 1784, column: 10, scope: !2896)
!2896 = distinct !DILexicalBlock(scope: !2872, file: !3, line: 1784, column: 8)
!2897 = !DILocation(line: 1785, column: 9, scope: !2896)
!2898 = !DILocation(line: 1785, column: 13, scope: !2896)
!2899 = !DILocation(line: 1786, column: 9, scope: !2896)
!2900 = !DILocation(line: 1786, column: 13, scope: !2896)
!2901 = !DILocation(line: 1787, column: 8, scope: !2896)
!2902 = !DILocation(line: 1787, column: 13, scope: !2896)
!2903 = !DILocation(line: 1788, column: 5, scope: !2896)
!2904 = !DILocation(line: 1788, column: 9, scope: !2896)
!2905 = !DILocation(line: 1789, column: 5, scope: !2896)
!2906 = !DILocation(line: 1789, column: 9, scope: !2896)
!2907 = !DILocation(line: 1790, column: 9, scope: !2896)
!2908 = !DILocation(line: 1790, column: 5, scope: !2896)
!2909 = !DILocation(line: 1791, column: 13, scope: !2896)
!2910 = !DILocation(line: 1792, column: 5, scope: !2896)
!2911 = !DILocation(line: 1792, column: 9, scope: !2896)
!2912 = !DILocation(line: 1793, column: 5, scope: !2896)
!2913 = !DILocation(line: 1793, column: 9, scope: !2896)
!2914 = !DILocation(line: 1784, column: 8, scope: !2872)
!2915 = !DILocation(line: 1800, column: 8, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2872, file: !3, line: 1800, column: 8)
!2917 = !DILocation(line: 1800, column: 8, scope: !2872)
!2918 = !DILocation(line: 1801, column: 6, scope: !2916)
!2919 = !DILocation(line: 1803, column: 5, scope: !2869)
!2920 = !DILocation(line: 1768, column: 51, scope: !2869)
!2921 = !DILocation(line: 1768, column: 3, scope: !2869)
!2922 = distinct !{!2922, !2882, !2923}
!2923 = !DILocation(line: 1803, column: 5, scope: !2870)
!2924 = !DILocation(line: 1804, column: 14, scope: !2925)
!2925 = distinct !DILexicalBlock(scope: !2860, file: !3, line: 1804, column: 3)
!2926 = !DILocation(line: 1804, column: 8, scope: !2925)
!2927 = !DILocation(line: 0, scope: !2925)
!2928 = !DILocation(line: 1804, column: 3, scope: !2925)
!2929 = !DILocation(line: 1807, column: 5, scope: !2930)
!2930 = distinct !DILexicalBlock(scope: !2925, file: !3, line: 1804, column: 3)
!2931 = !DILocation(line: 1806, column: 14, scope: !2930)
!2932 = !DILocation(line: 1804, column: 3, scope: !2930)
!2933 = distinct !{!2933, !2928, !2934}
!2934 = !DILocation(line: 1807, column: 30, scope: !2925)
!2935 = !DILocation(line: 1808, column: 1, scope: !2860)
!2936 = distinct !DISubprogram(name: "reassociate_bb", scope: !3, file: !3, line: 1814, type: !2861, scopeLine: 1815, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !2937)
!2937 = !{!2938, !2939, !2940, !2941, !2945, !2948, !2949, !2950, !2951}
!2938 = !DILocalVariable(name: "bb", arg: 1, scope: !2936, file: !3, line: 1814, type: !1465)
!2939 = !DILocalVariable(name: "gsi", scope: !2936, file: !3, line: 1816, type: !2770)
!2940 = !DILocalVariable(name: "son", scope: !2936, file: !3, line: 1817, type: !1465)
!2941 = !DILocalVariable(name: "stmt", scope: !2942, file: !3, line: 1821, type: !1013)
!2942 = distinct !DILexicalBlock(scope: !2943, file: !3, line: 1820, column: 5)
!2943 = distinct !DILexicalBlock(scope: !2944, file: !3, line: 1819, column: 3)
!2944 = distinct !DILexicalBlock(scope: !2936, file: !3, line: 1819, column: 3)
!2945 = !DILocalVariable(name: "lhs", scope: !2946, file: !3, line: 1825, type: !689)
!2946 = distinct !DILexicalBlock(scope: !2947, file: !3, line: 1824, column: 2)
!2947 = distinct !DILexicalBlock(scope: !2942, file: !3, line: 1823, column: 11)
!2948 = !DILocalVariable(name: "rhs1", scope: !2946, file: !3, line: 1825, type: !689)
!2949 = !DILocalVariable(name: "rhs2", scope: !2946, file: !3, line: 1825, type: !689)
!2950 = !DILocalVariable(name: "rhs_code", scope: !2946, file: !3, line: 1826, type: !134)
!2951 = !DILocalVariable(name: "ops", scope: !2952, file: !3, line: 1880, type: !2057)
!2952 = distinct !DILexicalBlock(scope: !2953, file: !3, line: 1879, column: 6)
!2953 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 1878, column: 8)
!2954 = !DILocation(line: 0, scope: !2936)
!2955 = !DILocation(line: 1816, column: 3, scope: !2936)
!2956 = !DILocation(line: 1819, column: 14, scope: !2944)
!2957 = !DILocation(line: 0, scope: !2958)
!2958 = distinct !DILexicalBlock(scope: !2959, file: !3, line: 1850, column: 7)
!2959 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 1849, column: 9)
!2960 = distinct !DILexicalBlock(scope: !2961, file: !3, line: 1840, column: 3)
!2961 = distinct !DILexicalBlock(scope: !2962, file: !3, line: 1839, column: 12)
!2962 = distinct !DILexicalBlock(scope: !2963, file: !3, line: 1836, column: 6)
!2963 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 1835, column: 8)
!2964 = !DILocation(line: 0, scope: !2952)
!2965 = !DILocation(line: 1819, column: 8, scope: !2944)
!2966 = !DILocation(line: 1819, column: 33, scope: !2943)
!2967 = !DILocation(line: 1819, column: 32, scope: !2943)
!2968 = !DILocation(line: 1819, column: 3, scope: !2944)
!2969 = !DILocation(line: 1821, column: 21, scope: !2942)
!2970 = !DILocation(line: 0, scope: !2942)
!2971 = !DILocation(line: 1823, column: 11, scope: !2947)
!2972 = !DILocation(line: 1823, column: 11, scope: !2942)
!2973 = !DILocation(line: 1826, column: 30, scope: !2946)
!2974 = !DILocation(line: 0, scope: !2946)
!2975 = !DILocation(line: 1830, column: 8, scope: !2976)
!2976 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 1830, column: 8)
!2977 = !DILocation(line: 1830, column: 40, scope: !2976)
!2978 = !DILocation(line: 1830, column: 8, scope: !2946)
!2979 = !DILocation(line: 1835, column: 8, scope: !2963)
!2980 = !DILocation(line: 1835, column: 8, scope: !2946)
!2981 = !DILocation(line: 1839, column: 27, scope: !2961)
!2982 = !DILocation(line: 1839, column: 12, scope: !2961)
!2983 = !DILocation(line: 1839, column: 12, scope: !2962)
!2984 = !DILocation(line: 1841, column: 5, scope: !2960)
!2985 = !DILocation(line: 1842, column: 5, scope: !2960)
!2986 = !DILocation(line: 1849, column: 9, scope: !2959)
!2987 = !DILocation(line: 1849, column: 9, scope: !2960)
!2988 = !DILocation(line: 1851, column: 15, scope: !2958)
!2989 = !DILocation(line: 1852, column: 13, scope: !2990)
!2990 = distinct !DILexicalBlock(scope: !2958, file: !3, line: 1852, column: 13)
!2991 = !DILocation(line: 1852, column: 13, scope: !2958)
!2992 = !DILocation(line: 1856, column: 8, scope: !2962)
!2993 = !DILocation(line: 1859, column: 10, scope: !2946)
!2994 = !DILocation(line: 1860, column: 11, scope: !2946)
!2995 = !DILocation(line: 1861, column: 11, scope: !2946)
!2996 = !DILocation(line: 1866, column: 10, scope: !2997)
!2997 = distinct !DILexicalBlock(scope: !2946, file: !3, line: 1866, column: 8)
!2998 = !DILocation(line: 1867, column: 9, scope: !2997)
!2999 = !DILocation(line: 1867, column: 13, scope: !2997)
!3000 = !DILocation(line: 1868, column: 9, scope: !2997)
!3001 = !DILocation(line: 1868, column: 13, scope: !2997)
!3002 = !DILocation(line: 1869, column: 8, scope: !2997)
!3003 = !DILocation(line: 1869, column: 13, scope: !2997)
!3004 = !DILocation(line: 1870, column: 5, scope: !2997)
!3005 = !DILocation(line: 1870, column: 9, scope: !2997)
!3006 = !DILocation(line: 1871, column: 5, scope: !2997)
!3007 = !DILocation(line: 1871, column: 9, scope: !2997)
!3008 = !DILocation(line: 1872, column: 9, scope: !2997)
!3009 = !DILocation(line: 1872, column: 5, scope: !2997)
!3010 = !DILocation(line: 1873, column: 13, scope: !2997)
!3011 = !DILocation(line: 1874, column: 5, scope: !2997)
!3012 = !DILocation(line: 1874, column: 9, scope: !2997)
!3013 = !DILocation(line: 1875, column: 5, scope: !2997)
!3014 = !DILocation(line: 1875, column: 9, scope: !2997)
!3015 = !DILocation(line: 1866, column: 8, scope: !2946)
!3016 = !DILocation(line: 1878, column: 8, scope: !2953)
!3017 = !DILocation(line: 1878, column: 8, scope: !2946)
!3018 = !DILocation(line: 1880, column: 8, scope: !2952)
!3019 = !DILocation(line: 1880, column: 36, scope: !2952)
!3020 = !DILocation(line: 1884, column: 12, scope: !3021)
!3021 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 1884, column: 12)
!3022 = !DILocation(line: 1884, column: 28, scope: !3021)
!3023 = !DILocation(line: 1884, column: 40, scope: !3021)
!3024 = !DILocation(line: 1884, column: 43, scope: !3021)
!3025 = !DILocation(line: 1884, column: 12, scope: !2952)
!3026 = !DILocation(line: 1887, column: 8, scope: !2952)
!3027 = !DILocation(line: 1888, column: 8, scope: !2952)
!3028 = !DILocation(line: 1890, column: 20, scope: !2952)
!3029 = !DILocation(line: 1891, column: 27, scope: !2952)
!3030 = !DILocation(line: 1890, column: 8, scope: !2952)
!3031 = !DILocation(line: 1900, column: 8, scope: !2952)
!3032 = !DILocation(line: 1902, column: 7, scope: !3033)
!3033 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 1901, column: 12)
!3034 = !DILocation(line: 1901, column: 12, scope: !3033)
!3035 = !DILocation(line: 1901, column: 12, scope: !2952)
!3036 = !DILocation(line: 1905, column: 17, scope: !3037)
!3037 = distinct !DILexicalBlock(scope: !3033, file: !3, line: 1903, column: 3)
!3038 = !DILocation(line: 1906, column: 31, scope: !3037)
!3039 = !DILocation(line: 1905, column: 5, scope: !3037)
!3040 = !DILocation(line: 1915, column: 5, scope: !3037)
!3041 = !DILocation(line: 1916, column: 3, scope: !3037)
!3042 = !DILocation(line: 1918, column: 12, scope: !3043)
!3043 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 1918, column: 12)
!3044 = !DILocation(line: 1918, column: 46, scope: !3043)
!3045 = !DILocation(line: 1918, column: 12, scope: !2952)
!3046 = !DILocation(line: 1920, column: 9, scope: !3047)
!3047 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 1920, column: 9)
!3048 = distinct !DILexicalBlock(scope: !3043, file: !3, line: 1919, column: 3)
!3049 = !DILocation(line: 1920, column: 19, scope: !3047)
!3050 = !DILocation(line: 1920, column: 23, scope: !3047)
!3051 = !DILocation(line: 1920, column: 34, scope: !3047)
!3052 = !DILocation(line: 1920, column: 9, scope: !3048)
!3053 = !DILocation(line: 1922, column: 9, scope: !3054)
!3054 = distinct !DILexicalBlock(scope: !3047, file: !3, line: 1921, column: 7)
!3055 = !DILocation(line: 1923, column: 28, scope: !3054)
!3056 = !DILocation(line: 1923, column: 9, scope: !3054)
!3057 = !DILocation(line: 1924, column: 7, scope: !3054)
!3058 = !DILocation(line: 1926, column: 12, scope: !3048)
!3059 = !DILocation(line: 1928, column: 10, scope: !3048)
!3060 = !DILocation(line: 1929, column: 19, scope: !3048)
!3061 = !DILocation(line: 1927, column: 5, scope: !3048)
!3062 = !DILocation(line: 1930, column: 5, scope: !3048)
!3063 = !DILocation(line: 1931, column: 5, scope: !3048)
!3064 = !DILocation(line: 1933, column: 9, scope: !3065)
!3065 = distinct !DILexicalBlock(scope: !3048, file: !3, line: 1933, column: 9)
!3066 = !DILocation(line: 1933, column: 19, scope: !3065)
!3067 = !DILocation(line: 1933, column: 23, scope: !3065)
!3068 = !DILocation(line: 1933, column: 34, scope: !3065)
!3069 = !DILocation(line: 1933, column: 9, scope: !3048)
!3070 = !DILocation(line: 1935, column: 9, scope: !3071)
!3071 = distinct !DILexicalBlock(scope: !3065, file: !3, line: 1934, column: 7)
!3072 = !DILocation(line: 1936, column: 28, scope: !3071)
!3073 = !DILocation(line: 1936, column: 9, scope: !3071)
!3074 = !DILocation(line: 1937, column: 7, scope: !3071)
!3075 = !DILocation(line: 1940, column: 31, scope: !3043)
!3076 = !DILocation(line: 1940, column: 3, scope: !3043)
!3077 = !DILocation(line: 1942, column: 8, scope: !2952)
!3078 = !DILocation(line: 1943, column: 6, scope: !2953)
!3079 = !DILocation(line: 1944, column: 2, scope: !2947)
!3080 = !DILocation(line: 1945, column: 5, scope: !2943)
!3081 = !DILocation(line: 1819, column: 50, scope: !2943)
!3082 = !DILocation(line: 1819, column: 3, scope: !2943)
!3083 = distinct !{!3083, !2968, !3084}
!3084 = !DILocation(line: 1945, column: 5, scope: !2944)
!3085 = !DILocation(line: 1946, column: 14, scope: !3086)
!3086 = distinct !DILexicalBlock(scope: !2936, file: !3, line: 1946, column: 3)
!3087 = !DILocation(line: 1946, column: 8, scope: !3086)
!3088 = !DILocation(line: 0, scope: !3086)
!3089 = !DILocation(line: 1946, column: 3, scope: !3086)
!3090 = !DILocation(line: 1949, column: 5, scope: !3091)
!3091 = distinct !DILexicalBlock(scope: !3086, file: !3, line: 1946, column: 3)
!3092 = !DILocation(line: 1948, column: 14, scope: !3091)
!3093 = !DILocation(line: 1946, column: 3, scope: !3091)
!3094 = distinct !{!3094, !3089, !3095}
!3095 = !DILocation(line: 1949, column: 24, scope: !3086)
!3096 = !DILocation(line: 1950, column: 1, scope: !2936)
!3097 = distinct !DISubprogram(name: "gsi_start_bb", scope: !574, file: !574, line: 4418, type: !3098, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3100)
!3098 = !DISubroutineType(types: !3099)
!3099 = !{!2770, !1465}
!3100 = !{!3101, !3102, !3103}
!3101 = !DILocalVariable(name: "bb", arg: 1, scope: !3097, file: !574, line: 4418, type: !1465)
!3102 = !DILocalVariable(name: "i", scope: !3097, file: !574, line: 4420, type: !2770)
!3103 = !DILocalVariable(name: "seq", scope: !3097, file: !574, line: 4421, type: !1003)
!3104 = !DILocation(line: 0, scope: !3097)
!3105 = !DILocation(line: 4420, column: 24, scope: !3097)
!3106 = !DILocation(line: 4423, column: 9, scope: !3097)
!3107 = !DILocation(line: 4424, column: 11, scope: !3097)
!3108 = !DILocation(line: 4424, column: 5, scope: !3097)
!3109 = !DILocation(line: 4424, column: 9, scope: !3097)
!3110 = !DILocation(line: 4425, column: 5, scope: !3097)
!3111 = !DILocation(line: 4425, column: 9, scope: !3097)
!3112 = !DILocation(line: 4426, column: 5, scope: !3097)
!3113 = !DILocation(line: 4426, column: 8, scope: !3097)
!3114 = !DILocation(line: 4429, column: 1, scope: !3097)
!3115 = distinct !DISubprogram(name: "gsi_end_p", scope: !574, file: !574, line: 4467, type: !3116, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3118)
!3116 = !DISubroutineType(types: !3117)
!3117 = !{!675, !2770}
!3118 = !{!3119}
!3119 = !DILocalVariable(name: "i", arg: 1, scope: !3115, file: !574, line: 4467, type: !2770)
!3120 = !DILocation(line: 4467, column: 33, scope: !3115)
!3121 = !DILocation(line: 4469, column: 12, scope: !3115)
!3122 = !DILocation(line: 4469, column: 16, scope: !3115)
!3123 = !DILocation(line: 4469, column: 10, scope: !3115)
!3124 = !DILocation(line: 4469, column: 3, scope: !3115)
!3125 = distinct !DISubprogram(name: "gsi_stmt", scope: !574, file: !574, line: 4501, type: !3126, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3128)
!3126 = !DISubroutineType(types: !3127)
!3127 = !{!1013, !2770}
!3128 = !{!3129}
!3129 = !DILocalVariable(name: "i", arg: 1, scope: !3125, file: !574, line: 4501, type: !2770)
!3130 = !DILocation(line: 4501, column: 32, scope: !3125)
!3131 = !DILocation(line: 4503, column: 12, scope: !3125)
!3132 = !DILocation(line: 4503, column: 17, scope: !3125)
!3133 = !DILocation(line: 4503, column: 3, scope: !3125)
!3134 = distinct !DISubprogram(name: "gimple_set_visited", scope: !574, file: !574, line: 1217, type: !3135, scopeLine: 1218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3137)
!3135 = !DISubroutineType(types: !3136)
!3136 = !{null, !1013, !675}
!3137 = !{!3138, !3139}
!3138 = !DILocalVariable(name: "stmt", arg: 1, scope: !3134, file: !574, line: 1217, type: !1013)
!3139 = !DILocalVariable(name: "visited_p", arg: 2, scope: !3134, file: !574, line: 1217, type: !675)
!3140 = !DILocation(line: 0, scope: !3134)
!3141 = !DILocation(line: 1219, column: 16, scope: !3134)
!3142 = !DILocation(line: 1219, column: 24, scope: !3134)
!3143 = !DILocation(line: 1220, column: 1, scope: !3134)
!3144 = distinct !DISubprogram(name: "is_gimple_assign", scope: !574, file: !574, line: 1677, type: !3145, scopeLine: 1678, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3148)
!3145 = !DISubroutineType(types: !3146)
!3146 = !{!675, !3147}
!3147 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !690, line: 60, baseType: !2047)
!3148 = !{!3149}
!3149 = !DILocalVariable(name: "gs", arg: 1, scope: !3144, file: !574, line: 1677, type: !3147)
!3150 = !DILocation(line: 0, scope: !3144)
!3151 = !DILocation(line: 1679, column: 10, scope: !3144)
!3152 = !DILocation(line: 1679, column: 27, scope: !3144)
!3153 = !DILocation(line: 1679, column: 3, scope: !3144)
!3154 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !574, file: !574, line: 1815, type: !3155, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3157)
!3155 = !DISubroutineType(types: !3156)
!3156 = !{!134, !3147}
!3157 = !{!3158, !3159}
!3158 = !DILocalVariable(name: "gs", arg: 1, scope: !3154, file: !574, line: 1815, type: !3147)
!3159 = !DILocalVariable(name: "code", scope: !3154, file: !574, line: 1817, type: !134)
!3160 = !DILocation(line: 0, scope: !3154)
!3161 = !DILocation(line: 1820, column: 10, scope: !3154)
!3162 = !DILocation(line: 1821, column: 7, scope: !3163)
!3163 = distinct !DILexicalBlock(scope: !3154, file: !574, line: 1821, column: 7)
!3164 = !DILocation(line: 1821, column: 35, scope: !3163)
!3165 = !DILocation(line: 1821, column: 7, scope: !3154)
!3166 = !DILocation(line: 1822, column: 12, scope: !3163)
!3167 = !DILocation(line: 1822, column: 5, scope: !3163)
!3168 = !DILocation(line: 1824, column: 3, scope: !3154)
!3169 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !574, file: !574, line: 1694, type: !3170, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3172)
!3170 = !DISubroutineType(types: !3171)
!3171 = !{!689, !3147}
!3172 = !{!3173}
!3173 = !DILocalVariable(name: "gs", arg: 1, scope: !3169, file: !574, line: 1694, type: !3147)
!3174 = !DILocation(line: 0, scope: !3169)
!3175 = !DILocation(line: 1697, column: 10, scope: !3169)
!3176 = !DILocation(line: 1697, column: 3, scope: !3169)
!3177 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !574, file: !574, line: 1727, type: !3170, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3178)
!3178 = !{!3179}
!3179 = !DILocalVariable(name: "gs", arg: 1, scope: !3177, file: !574, line: 1727, type: !3147)
!3180 = !DILocation(line: 0, scope: !3177)
!3181 = !DILocation(line: 1730, column: 10, scope: !3177)
!3182 = !DILocation(line: 1730, column: 3, scope: !3177)
!3183 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !574, file: !574, line: 1759, type: !3170, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3184)
!3184 = !{!3185}
!3185 = !DILocalVariable(name: "gs", arg: 1, scope: !3183, file: !574, line: 1759, type: !3147)
!3186 = !DILocation(line: 0, scope: !3183)
!3187 = !DILocation(line: 1763, column: 7, scope: !3188)
!3188 = distinct !DILexicalBlock(scope: !3183, file: !574, line: 1763, column: 7)
!3189 = !DILocation(line: 1763, column: 27, scope: !3188)
!3190 = !DILocation(line: 1763, column: 7, scope: !3183)
!3191 = !DILocation(line: 1764, column: 12, scope: !3188)
!3192 = !DILocation(line: 1764, column: 5, scope: !3188)
!3193 = !DILocation(line: 0, scope: !3188)
!3194 = !DILocation(line: 1767, column: 1, scope: !3183)
!3195 = distinct !DISubprogram(name: "should_break_up_subtract", scope: !3, file: !3, line: 1563, type: !3196, scopeLine: 1564, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3198)
!3196 = !DISubroutineType(types: !3197)
!3197 = !{!675, !1013}
!3198 = !{!3199, !3200, !3201, !3202, !3203, !3204}
!3199 = !DILocalVariable(name: "stmt", arg: 1, scope: !3195, file: !3, line: 1563, type: !1013)
!3200 = !DILocalVariable(name: "lhs", scope: !3195, file: !3, line: 1565, type: !689)
!3201 = !DILocalVariable(name: "binlhs", scope: !3195, file: !3, line: 1566, type: !689)
!3202 = !DILocalVariable(name: "binrhs", scope: !3195, file: !3, line: 1567, type: !689)
!3203 = !DILocalVariable(name: "immusestmt", scope: !3195, file: !3, line: 1568, type: !1013)
!3204 = !DILocalVariable(name: "loop", scope: !3195, file: !3, line: 1569, type: !1228)
!3205 = !DILocation(line: 0, scope: !3195)
!3206 = !DILocation(line: 1565, column: 14, scope: !3195)
!3207 = !DILocation(line: 1566, column: 17, scope: !3195)
!3208 = !DILocation(line: 1567, column: 17, scope: !3195)
!3209 = !DILocation(line: 1569, column: 23, scope: !3195)
!3210 = !DILocation(line: 1571, column: 7, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 1571, column: 7)
!3212 = !DILocation(line: 1571, column: 26, scope: !3211)
!3213 = !DILocation(line: 1572, column: 7, scope: !3211)
!3214 = !DILocation(line: 1572, column: 30, scope: !3211)
!3215 = !DILocation(line: 1572, column: 10, scope: !3211)
!3216 = !DILocation(line: 1571, column: 7, scope: !3195)
!3217 = !DILocation(line: 1575, column: 7, scope: !3218)
!3218 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 1575, column: 7)
!3219 = !DILocation(line: 1575, column: 26, scope: !3218)
!3220 = !DILocation(line: 1576, column: 7, scope: !3218)
!3221 = !DILocation(line: 1576, column: 30, scope: !3218)
!3222 = !DILocation(line: 1576, column: 10, scope: !3218)
!3223 = !DILocation(line: 1575, column: 7, scope: !3195)
!3224 = !DILocation(line: 1579, column: 7, scope: !3225)
!3225 = distinct !DILexicalBlock(scope: !3195, file: !3, line: 1579, column: 7)
!3226 = !DILocation(line: 1579, column: 23, scope: !3225)
!3227 = !DILocation(line: 1580, column: 7, scope: !3225)
!3228 = !DILocation(line: 1580, column: 24, scope: !3225)
!3229 = !DILocation(line: 1580, column: 22, scope: !3225)
!3230 = !DILocation(line: 1581, column: 7, scope: !3225)
!3231 = !DILocation(line: 1581, column: 10, scope: !3225)
!3232 = !DILocation(line: 1582, column: 7, scope: !3225)
!3233 = !DILocation(line: 1582, column: 11, scope: !3225)
!3234 = !DILocation(line: 1582, column: 47, scope: !3225)
!3235 = !DILocation(line: 1583, column: 4, scope: !3225)
!3236 = !DILocation(line: 1583, column: 8, scope: !3225)
!3237 = !DILocation(line: 1583, column: 44, scope: !3225)
!3238 = !DILocation(line: 1579, column: 7, scope: !3195)
!3239 = !DILocation(line: 1585, column: 3, scope: !3195)
!3240 = !DILocation(line: 1586, column: 1, scope: !3195)
!3241 = distinct !DISubprogram(name: "break_up_subtract", scope: !3, file: !3, line: 1591, type: !3242, scopeLine: 1592, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3245)
!3242 = !DISubroutineType(types: !3243)
!3243 = !{null, !1013, !3244}
!3244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2770, size: 64)
!3245 = !{!3246, !3247, !3248, !3249}
!3246 = !DILocalVariable(name: "stmt", arg: 1, scope: !3241, file: !3, line: 1591, type: !1013)
!3247 = !DILocalVariable(name: "gsip", arg: 2, scope: !3241, file: !3, line: 1591, type: !3244)
!3248 = !DILocalVariable(name: "rhs1", scope: !3241, file: !3, line: 1593, type: !689)
!3249 = !DILocalVariable(name: "rhs2", scope: !3241, file: !3, line: 1594, type: !689)
!3250 = !DILocation(line: 0, scope: !3241)
!3251 = !DILocation(line: 1593, column: 15, scope: !3241)
!3252 = !DILocation(line: 1594, column: 15, scope: !3241)
!3253 = !DILocation(line: 1596, column: 7, scope: !3254)
!3254 = distinct !DILexicalBlock(scope: !3241, file: !3, line: 1596, column: 7)
!3255 = !DILocation(line: 1596, column: 17, scope: !3254)
!3256 = !DILocation(line: 1596, column: 21, scope: !3254)
!3257 = !DILocation(line: 1596, column: 32, scope: !3254)
!3258 = !DILocation(line: 1596, column: 7, scope: !3241)
!3259 = !DILocation(line: 1598, column: 7, scope: !3260)
!3260 = distinct !DILexicalBlock(scope: !3254, file: !3, line: 1597, column: 5)
!3261 = !DILocation(line: 1599, column: 26, scope: !3260)
!3262 = !DILocation(line: 1599, column: 7, scope: !3260)
!3263 = !DILocation(line: 1600, column: 5, scope: !3260)
!3264 = !DILocation(line: 1602, column: 10, scope: !3241)
!3265 = !DILocation(line: 1603, column: 3, scope: !3241)
!3266 = !DILocation(line: 1604, column: 3, scope: !3241)
!3267 = !DILocation(line: 1605, column: 1, scope: !3241)
!3268 = distinct !DISubprogram(name: "gsi_next", scope: !574, file: !574, line: 4485, type: !3269, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3271)
!3269 = !DISubroutineType(types: !3270)
!3270 = !{null, !3244}
!3271 = !{!3272}
!3272 = !DILocalVariable(name: "i", arg: 1, scope: !3268, file: !574, line: 4485, type: !3244)
!3273 = !DILocation(line: 0, scope: !3268)
!3274 = !DILocation(line: 4487, column: 15, scope: !3268)
!3275 = !DILocation(line: 4487, column: 20, scope: !3268)
!3276 = !DILocation(line: 4487, column: 10, scope: !3268)
!3277 = !DILocation(line: 4488, column: 1, scope: !3268)
!3278 = distinct !DISubprogram(name: "bb_seq", scope: !574, file: !574, line: 237, type: !3279, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3284)
!3279 = !DISubroutineType(types: !3280)
!3280 = !{!1003, !3281}
!3281 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !690, line: 112, baseType: !3282)
!3282 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3283, size: 64)
!3283 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !978)
!3284 = !{!3285}
!3285 = !DILocalVariable(name: "bb", arg: 1, scope: !3278, file: !574, line: 237, type: !3281)
!3286 = !DILocation(line: 0, scope: !3278)
!3287 = !DILocation(line: 239, column: 17, scope: !3278)
!3288 = !DILocation(line: 239, column: 23, scope: !3278)
!3289 = !DILocation(line: 239, column: 33, scope: !3278)
!3290 = !DILocation(line: 239, column: 43, scope: !3278)
!3291 = !DILocation(line: 239, column: 36, scope: !3278)
!3292 = !DILocation(line: 239, column: 10, scope: !3278)
!3293 = !DILocation(line: 239, column: 68, scope: !3278)
!3294 = !DILocation(line: 239, column: 3, scope: !3278)
!3295 = distinct !DISubprogram(name: "gimple_seq_first", scope: !574, file: !574, line: 159, type: !3296, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3301)
!3296 = !DISubroutineType(types: !3297)
!3297 = !{!1008, !3298}
!3298 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !690, line: 67, baseType: !3299)
!3299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3300, size: 64)
!3300 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1005)
!3301 = !{!3302}
!3302 = !DILocalVariable(name: "s", arg: 1, scope: !3295, file: !574, line: 159, type: !3298)
!3303 = !DILocation(line: 0, scope: !3295)
!3304 = !DILocation(line: 161, column: 10, scope: !3295)
!3305 = !DILocation(line: 161, column: 17, scope: !3295)
!3306 = !DILocation(line: 161, column: 3, scope: !3295)
!3307 = distinct !DISubprogram(name: "gimple_code", scope: !574, file: !574, line: 1052, type: !3308, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3310)
!3308 = !DISubroutineType(types: !3309)
!3309 = !{!573, !3147}
!3310 = !{!3311}
!3311 = !DILocalVariable(name: "g", arg: 1, scope: !3307, file: !574, line: 1052, type: !3147)
!3312 = !DILocation(line: 0, scope: !3307)
!3313 = !DILocation(line: 1054, column: 20, scope: !3307)
!3314 = !DILocation(line: 1054, column: 3, scope: !3307)
!3315 = distinct !DISubprogram(name: "gimple_expr_code", scope: !574, file: !574, line: 1438, type: !3155, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3316)
!3316 = !{!3317, !3318}
!3317 = !DILocalVariable(name: "stmt", arg: 1, scope: !3315, file: !574, line: 1438, type: !3147)
!3318 = !DILocalVariable(name: "code", scope: !3315, file: !574, line: 1440, type: !573)
!3319 = !DILocation(line: 0, scope: !3315)
!3320 = !DILocation(line: 1440, column: 27, scope: !3315)
!3321 = !DILocation(line: 1441, column: 29, scope: !3322)
!3322 = distinct !DILexicalBlock(scope: !3315, file: !574, line: 1441, column: 7)
!3323 = !DILocation(line: 1442, column: 42, scope: !3322)
!3324 = !DILocation(line: 1442, column: 5, scope: !3322)
!3325 = !DILocation(line: 1446, column: 5, scope: !3326)
!3326 = distinct !DILexicalBlock(scope: !3322, file: !574, line: 1443, column: 12)
!3327 = !DILocation(line: 1448, column: 5, scope: !3315)
!3328 = !DILocation(line: 1450, column: 1, scope: !3315)
!3329 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !574, file: !574, line: 1686, type: !3330, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3332)
!3330 = !DISubroutineType(types: !3331)
!3331 = !{!612, !134}
!3332 = !{!3333}
!3333 = !DILocalVariable(name: "code", arg: 1, scope: !3329, file: !574, line: 1686, type: !134)
!3334 = !DILocation(line: 0, scope: !3329)
!3335 = !DILocation(line: 1688, column: 34, scope: !3329)
!3336 = !DILocation(line: 1688, column: 10, scope: !3329)
!3337 = !DILocation(line: 1688, column: 3, scope: !3329)
!3338 = distinct !DISubprogram(name: "gimple_op", scope: !574, file: !574, line: 1631, type: !3339, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3341)
!3339 = !DISubroutineType(types: !3340)
!3340 = !{!689, !3147, !7}
!3341 = !{!3342, !3343}
!3342 = !DILocalVariable(name: "gs", arg: 1, scope: !3338, file: !574, line: 1631, type: !3147)
!3343 = !DILocalVariable(name: "i", arg: 2, scope: !3338, file: !574, line: 1631, type: !7)
!3344 = !DILocation(line: 0, scope: !3338)
!3345 = !DILocation(line: 1633, column: 7, scope: !3346)
!3346 = distinct !DILexicalBlock(scope: !3338, file: !574, line: 1633, column: 7)
!3347 = !DILocation(line: 1633, column: 7, scope: !3338)
!3348 = !DILocation(line: 1638, column: 14, scope: !3349)
!3349 = distinct !DILexicalBlock(scope: !3346, file: !574, line: 1634, column: 5)
!3350 = !DILocation(line: 1638, column: 7, scope: !3349)
!3351 = !DILocation(line: 0, scope: !3346)
!3352 = !DILocation(line: 1642, column: 1, scope: !3338)
!3353 = distinct !DISubprogram(name: "gimple_has_ops", scope: !574, file: !574, line: 1274, type: !3145, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3354)
!3354 = !{!3355}
!3355 = !DILocalVariable(name: "g", arg: 1, scope: !3353, file: !574, line: 1274, type: !3147)
!3356 = !DILocation(line: 0, scope: !3353)
!3357 = !DILocation(line: 1276, column: 10, scope: !3353)
!3358 = !DILocation(line: 1276, column: 26, scope: !3353)
!3359 = !DILocation(line: 1276, column: 41, scope: !3353)
!3360 = !DILocation(line: 1276, column: 44, scope: !3353)
!3361 = !DILocation(line: 1276, column: 60, scope: !3353)
!3362 = !DILocation(line: 1276, column: 3, scope: !3353)
!3363 = distinct !DISubprogram(name: "gimple_ops", scope: !574, file: !574, line: 1614, type: !3364, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3366)
!3364 = !DISubroutineType(types: !3365)
!3365 = !{!1047, !1013}
!3366 = !{!3367, !3368}
!3367 = !DILocalVariable(name: "gs", arg: 1, scope: !3363, file: !574, line: 1614, type: !1013)
!3368 = !DILocalVariable(name: "off", scope: !3363, file: !574, line: 1616, type: !1158)
!3369 = !DILocation(line: 0, scope: !3363)
!3370 = !DILocation(line: 1621, column: 28, scope: !3363)
!3371 = !DILocation(line: 1621, column: 9, scope: !3363)
!3372 = !DILocation(line: 1622, column: 3, scope: !3363)
!3373 = !DILocation(line: 1624, column: 20, scope: !3363)
!3374 = !DILocation(line: 1624, column: 32, scope: !3363)
!3375 = !DILocation(line: 1624, column: 10, scope: !3363)
!3376 = !DILocation(line: 1624, column: 3, scope: !3363)
!3377 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !574, file: !574, line: 1073, type: !3378, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3380)
!3378 = !DISubroutineType(types: !3379)
!3379 = !{!618, !1013}
!3380 = !{!3381}
!3381 = !DILocalVariable(name: "gs", arg: 1, scope: !3377, file: !574, line: 1073, type: !1013)
!3382 = !DILocation(line: 0, scope: !3377)
!3383 = !DILocation(line: 1075, column: 24, scope: !3377)
!3384 = !DILocation(line: 1075, column: 10, scope: !3377)
!3385 = !DILocation(line: 1075, column: 3, scope: !3377)
!3386 = distinct !DISubprogram(name: "gss_for_code", scope: !574, file: !574, line: 1061, type: !3387, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3389)
!3387 = !DISubroutineType(types: !3388)
!3388 = !{!618, !573}
!3389 = !{!3390}
!3390 = !DILocalVariable(name: "code", arg: 1, scope: !3386, file: !574, line: 1061, type: !573)
!3391 = !DILocation(line: 0, scope: !3386)
!3392 = !DILocation(line: 1066, column: 10, scope: !3386)
!3393 = !DILocation(line: 1066, column: 3, scope: !3386)
!3394 = distinct !DISubprogram(name: "gimple_num_ops", scope: !574, file: !574, line: 1596, type: !3395, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3397)
!3395 = !DISubroutineType(types: !3396)
!3396 = !{!7, !3147}
!3397 = !{!3398}
!3398 = !DILocalVariable(name: "gs", arg: 1, scope: !3394, file: !574, line: 1596, type: !3147)
!3399 = !DILocation(line: 0, scope: !3394)
!3400 = !DILocation(line: 1598, column: 21, scope: !3394)
!3401 = !DILocation(line: 1598, column: 3, scope: !3394)
!3402 = distinct !DISubprogram(name: "loop_containing_stmt", scope: !3403, file: !3403, line: 617, type: !3404, scopeLine: 618, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3406)
!3403 = !DIFile(filename: "./tree-flow-inline.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!3404 = !DISubroutineType(types: !3405)
!3405 = !{!1228, !1013}
!3406 = !{!3407, !3408}
!3407 = !DILocalVariable(name: "stmt", arg: 1, scope: !3402, file: !3403, line: 617, type: !1013)
!3408 = !DILocalVariable(name: "bb", scope: !3402, file: !3403, line: 619, type: !1465)
!3409 = !DILocation(line: 0, scope: !3402)
!3410 = !DILocation(line: 619, column: 20, scope: !3402)
!3411 = !DILocation(line: 620, column: 8, scope: !3412)
!3412 = distinct !DILexicalBlock(scope: !3402, file: !3403, line: 620, column: 7)
!3413 = !DILocation(line: 620, column: 7, scope: !3402)
!3414 = !DILocation(line: 623, column: 14, scope: !3402)
!3415 = !DILocation(line: 623, column: 3, scope: !3402)
!3416 = !DILocation(line: 624, column: 1, scope: !3402)
!3417 = distinct !DISubprogram(name: "is_reassociable_op", scope: !3, file: !3, line: 359, type: !3418, scopeLine: 360, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3420)
!3418 = !DISubroutineType(types: !3419)
!3419 = !{!675, !1013, !134, !1228}
!3420 = !{!3421, !3422, !3423, !3424}
!3421 = !DILocalVariable(name: "stmt", arg: 1, scope: !3417, file: !3, line: 359, type: !1013)
!3422 = !DILocalVariable(name: "code", arg: 2, scope: !3417, file: !3, line: 359, type: !134)
!3423 = !DILocalVariable(name: "loop", arg: 3, scope: !3417, file: !3, line: 359, type: !1228)
!3424 = !DILocalVariable(name: "bb", scope: !3417, file: !3, line: 361, type: !1465)
!3425 = !DILocation(line: 0, scope: !3417)
!3426 = !DILocation(line: 361, column: 20, scope: !3417)
!3427 = !DILocation(line: 363, column: 7, scope: !3428)
!3428 = distinct !DILexicalBlock(scope: !3417, file: !3, line: 363, column: 7)
!3429 = !DILocation(line: 363, column: 24, scope: !3428)
!3430 = !DILocation(line: 363, column: 7, scope: !3417)
!3431 = !DILocation(line: 366, column: 8, scope: !3432)
!3432 = distinct !DILexicalBlock(scope: !3417, file: !3, line: 366, column: 7)
!3433 = !DILocation(line: 366, column: 7, scope: !3417)
!3434 = !DILocation(line: 369, column: 7, scope: !3435)
!3435 = distinct !DILexicalBlock(scope: !3417, file: !3, line: 369, column: 7)
!3436 = !DILocation(line: 370, column: 7, scope: !3435)
!3437 = !DILocation(line: 370, column: 10, scope: !3435)
!3438 = !DILocation(line: 370, column: 40, scope: !3435)
!3439 = !DILocation(line: 371, column: 7, scope: !3435)
!3440 = !DILocation(line: 371, column: 26, scope: !3435)
!3441 = !DILocation(line: 371, column: 10, scope: !3435)
!3442 = !DILocation(line: 369, column: 7, scope: !3417)
!3443 = !DILocation(line: 374, column: 3, scope: !3417)
!3444 = !DILocation(line: 375, column: 1, scope: !3417)
!3445 = distinct !DISubprogram(name: "get_single_immediate_use", scope: !3, file: !3, line: 1495, type: !3446, scopeLine: 1496, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3448)
!3446 = !DISubroutineType(types: !3447)
!3447 = !{!1013, !689}
!3448 = !{!3449, !3450, !3451}
!3449 = !DILocalVariable(name: "lhs", arg: 1, scope: !3445, file: !3, line: 1495, type: !689)
!3450 = !DILocalVariable(name: "immuse", scope: !3445, file: !3, line: 1497, type: !2049)
!3451 = !DILocalVariable(name: "immusestmt", scope: !3445, file: !3, line: 1498, type: !1013)
!3452 = !DILocation(line: 0, scope: !3445)
!3453 = !DILocation(line: 1497, column: 3, scope: !3445)
!3454 = !DILocation(line: 1498, column: 3, scope: !3445)
!3455 = !DILocation(line: 1500, column: 7, scope: !3456)
!3456 = distinct !DILexicalBlock(scope: !3445, file: !3, line: 1500, column: 7)
!3457 = !DILocation(line: 1500, column: 23, scope: !3456)
!3458 = !DILocation(line: 1501, column: 7, scope: !3456)
!3459 = !DILocation(line: 1501, column: 10, scope: !3456)
!3460 = !DILocation(line: 1502, column: 7, scope: !3456)
!3461 = !DILocation(line: 1502, column: 28, scope: !3456)
!3462 = !DILocation(line: 1502, column: 10, scope: !3456)
!3463 = !DILocation(line: 1503, column: 12, scope: !3456)
!3464 = !DILocation(line: 1500, column: 7, scope: !3445)
!3465 = !DILocation(line: 1506, column: 1, scope: !3445)
!3466 = distinct !DISubprogram(name: "gimple_bb", scope: !574, file: !574, line: 1112, type: !3467, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3469)
!3467 = !DISubroutineType(types: !3468)
!3468 = !{!977, !3147}
!3469 = !{!3470}
!3470 = !DILocalVariable(name: "g", arg: 1, scope: !3466, file: !574, line: 1112, type: !3147)
!3471 = !DILocation(line: 0, scope: !3466)
!3472 = !DILocation(line: 1114, column: 20, scope: !3466)
!3473 = !DILocation(line: 1114, column: 3, scope: !3466)
!3474 = distinct !DISubprogram(name: "has_single_use", scope: !3403, file: !3403, line: 350, type: !3475, scopeLine: 351, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3480)
!3475 = !DISubroutineType(types: !3476)
!3476 = !{!675, !3477}
!3477 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !690, line: 59, baseType: !3478)
!3478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3479, size: 64)
!3479 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !692)
!3480 = !{!3481, !3482}
!3481 = !DILocalVariable(name: "var", arg: 1, scope: !3474, file: !3403, line: 350, type: !3477)
!3482 = !DILocalVariable(name: "ptr", scope: !3474, file: !3403, line: 352, type: !3483)
!3483 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3484)
!3484 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3485, size: 64)
!3485 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2051)
!3486 = !DILocation(line: 0, scope: !3474)
!3487 = !DILocation(line: 352, column: 42, scope: !3474)
!3488 = !DILocation(line: 355, column: 19, scope: !3489)
!3489 = distinct !DILexicalBlock(scope: !3474, file: !3403, line: 355, column: 7)
!3490 = !DILocation(line: 355, column: 11, scope: !3489)
!3491 = !DILocation(line: 355, column: 7, scope: !3474)
!3492 = !DILocation(line: 359, column: 25, scope: !3493)
!3493 = distinct !DILexicalBlock(scope: !3474, file: !3403, line: 359, column: 7)
!3494 = !DILocation(line: 359, column: 11, scope: !3493)
!3495 = !DILocation(line: 359, column: 7, scope: !3474)
!3496 = !DILocation(line: 360, column: 30, scope: !3493)
!3497 = !DILocation(line: 360, column: 13, scope: !3493)
!3498 = !DILocation(line: 360, column: 12, scope: !3493)
!3499 = !DILocation(line: 360, column: 5, scope: !3493)
!3500 = !DILocation(line: 363, column: 8, scope: !3501)
!3501 = distinct !DILexicalBlock(scope: !3474, file: !3403, line: 363, column: 7)
!3502 = !DILocation(line: 363, column: 7, scope: !3474)
!3503 = !DILocation(line: 366, column: 10, scope: !3474)
!3504 = !DILocation(line: 366, column: 3, scope: !3474)
!3505 = !DILocation(line: 367, column: 1, scope: !3474)
!3506 = distinct !DISubprogram(name: "is_gimple_debug", scope: !574, file: !574, line: 3249, type: !3145, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3507)
!3507 = !{!3508}
!3508 = !DILocalVariable(name: "gs", arg: 1, scope: !3506, file: !574, line: 3249, type: !3147)
!3509 = !DILocation(line: 0, scope: !3506)
!3510 = !DILocation(line: 3251, column: 10, scope: !3506)
!3511 = !DILocation(line: 3251, column: 27, scope: !3506)
!3512 = !DILocation(line: 3251, column: 3, scope: !3506)
!3513 = distinct !DISubprogram(name: "single_imm_use", scope: !3403, file: !3403, line: 373, type: !3514, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3518)
!3514 = !DISubroutineType(types: !3515)
!3515 = !{!675, !3477, !3516, !3517}
!3516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2049, size: 64)
!3517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1013, size: 64)
!3518 = !{!3519, !3520, !3521, !3522, !3523}
!3519 = !DILocalVariable(name: "var", arg: 1, scope: !3513, file: !3403, line: 373, type: !3477)
!3520 = !DILocalVariable(name: "use_p", arg: 2, scope: !3513, file: !3403, line: 373, type: !3516)
!3521 = !DILocalVariable(name: "stmt", arg: 3, scope: !3513, file: !3403, line: 373, type: !3517)
!3522 = !DILocalVariable(name: "ptr", scope: !3513, file: !3403, line: 375, type: !3483)
!3523 = !DILabel(scope: !3524, name: "return_false", file: !3403, line: 380)
!3524 = distinct !DILexicalBlock(scope: !3525, file: !3403, line: 379, column: 5)
!3525 = distinct !DILexicalBlock(scope: !3513, file: !3403, line: 378, column: 7)
!3526 = !DILocation(line: 0, scope: !3513)
!3527 = !DILocation(line: 375, column: 42, scope: !3513)
!3528 = !DILocation(line: 378, column: 19, scope: !3525)
!3529 = !DILocation(line: 378, column: 11, scope: !3525)
!3530 = !DILocation(line: 378, column: 7, scope: !3513)
!3531 = !DILocation(line: 380, column: 5, scope: !3524)
!3532 = !DILocation(line: 381, column: 14, scope: !3524)
!3533 = !DILocation(line: 382, column: 13, scope: !3524)
!3534 = !DILocation(line: 383, column: 7, scope: !3524)
!3535 = !DILocation(line: 387, column: 25, scope: !3536)
!3536 = distinct !DILexicalBlock(scope: !3513, file: !3403, line: 387, column: 7)
!3537 = !DILocation(line: 387, column: 11, scope: !3536)
!3538 = !DILocation(line: 387, column: 7, scope: !3513)
!3539 = !DILocation(line: 389, column: 29, scope: !3540)
!3540 = distinct !DILexicalBlock(scope: !3541, file: !3403, line: 389, column: 11)
!3541 = distinct !DILexicalBlock(scope: !3536, file: !3403, line: 388, column: 5)
!3542 = !DILocation(line: 389, column: 12, scope: !3540)
!3543 = !DILocation(line: 389, column: 11, scope: !3541)
!3544 = !DILocation(line: 391, column: 18, scope: !3545)
!3545 = distinct !DILexicalBlock(scope: !3540, file: !3403, line: 390, column: 2)
!3546 = !DILocation(line: 391, column: 11, scope: !3545)
!3547 = !DILocation(line: 392, column: 17, scope: !3545)
!3548 = !DILocation(line: 392, column: 27, scope: !3545)
!3549 = !DILocation(line: 392, column: 10, scope: !3545)
!3550 = !DILocation(line: 393, column: 4, scope: !3545)
!3551 = !DILocation(line: 400, column: 8, scope: !3552)
!3552 = distinct !DILexicalBlock(scope: !3513, file: !3403, line: 400, column: 7)
!3553 = !DILocation(line: 400, column: 7, scope: !3513)
!3554 = !DILocation(line: 403, column: 10, scope: !3513)
!3555 = !DILocation(line: 403, column: 3, scope: !3513)
!3556 = !DILocation(line: 404, column: 1, scope: !3513)
!3557 = distinct !DISubprogram(name: "negate_value", scope: !3, file: !3, line: 1518, type: !3558, scopeLine: 1519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3560)
!3558 = !DISubroutineType(types: !3559)
!3559 = !{!689, !689, !3244}
!3560 = !{!3561, !3562, !3563, !3564, !3565, !3568, !3569}
!3561 = !DILocalVariable(name: "tonegate", arg: 1, scope: !3557, file: !3, line: 1518, type: !689)
!3562 = !DILocalVariable(name: "gsi", arg: 2, scope: !3557, file: !3, line: 1518, type: !3244)
!3563 = !DILocalVariable(name: "negatedefstmt", scope: !3557, file: !3, line: 1520, type: !1013)
!3564 = !DILocalVariable(name: "resultofnegate", scope: !3557, file: !3, line: 1521, type: !689)
!3565 = !DILocalVariable(name: "gsi", scope: !3566, file: !3, line: 1533, type: !2770)
!3566 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 1532, column: 5)
!3567 = distinct !DILexicalBlock(scope: !3557, file: !3, line: 1527, column: 7)
!3568 = !DILocalVariable(name: "rhs1", scope: !3566, file: !3, line: 1534, type: !689)
!3569 = !DILocalVariable(name: "rhs2", scope: !3566, file: !3, line: 1535, type: !689)
!3570 = !DILocation(line: 0, scope: !3557)
!3571 = !DILocation(line: 1525, column: 7, scope: !3572)
!3572 = distinct !DILexicalBlock(scope: !3557, file: !3, line: 1525, column: 7)
!3573 = !DILocation(line: 1525, column: 28, scope: !3572)
!3574 = !DILocation(line: 1525, column: 7, scope: !3557)
!3575 = !DILocation(line: 1526, column: 21, scope: !3572)
!3576 = !DILocation(line: 1526, column: 5, scope: !3572)
!3577 = !DILocation(line: 1528, column: 7, scope: !3567)
!3578 = !DILocation(line: 1528, column: 10, scope: !3567)
!3579 = !DILocation(line: 1529, column: 7, scope: !3567)
!3580 = !DILocation(line: 1529, column: 10, scope: !3567)
!3581 = !DILocation(line: 1529, column: 56, scope: !3567)
!3582 = !DILocation(line: 1530, column: 7, scope: !3567)
!3583 = !DILocation(line: 1530, column: 26, scope: !3567)
!3584 = !DILocation(line: 1530, column: 10, scope: !3567)
!3585 = !DILocation(line: 1531, column: 7, scope: !3567)
!3586 = !DILocation(line: 1531, column: 10, scope: !3567)
!3587 = !DILocation(line: 1531, column: 49, scope: !3567)
!3588 = !DILocation(line: 1527, column: 7, scope: !3557)
!3589 = !DILocation(line: 1533, column: 7, scope: !3566)
!3590 = !DILocation(line: 1534, column: 19, scope: !3566)
!3591 = !DILocation(line: 0, scope: !3566)
!3592 = !DILocation(line: 1535, column: 19, scope: !3566)
!3593 = !DILocation(line: 1537, column: 13, scope: !3566)
!3594 = !DILocation(line: 1538, column: 14, scope: !3566)
!3595 = !DILocation(line: 1539, column: 7, scope: !3566)
!3596 = !DILocation(line: 1541, column: 13, scope: !3566)
!3597 = !DILocation(line: 1542, column: 14, scope: !3566)
!3598 = !DILocation(line: 1543, column: 7, scope: !3566)
!3599 = !DILocation(line: 1545, column: 7, scope: !3566)
!3600 = !DILocation(line: 1546, column: 14, scope: !3566)
!3601 = !DILocation(line: 1547, column: 5, scope: !3567)
!3602 = !DILocation(line: 1549, column: 14, scope: !3557)
!3603 = !DILocation(line: 1550, column: 20, scope: !3557)
!3604 = !DILocation(line: 1552, column: 3, scope: !3557)
!3605 = !DILocation(line: 1553, column: 3, scope: !3557)
!3606 = !DILocation(line: 1554, column: 1, scope: !3557)
!3607 = distinct !DISubprogram(name: "update_stmt", scope: !574, file: !574, line: 1456, type: !3608, scopeLine: 1457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3610)
!3608 = !DISubroutineType(types: !3609)
!3609 = !{null, !1013}
!3610 = !{!3611}
!3611 = !DILocalVariable(name: "s", arg: 1, scope: !3607, file: !574, line: 1456, type: !1013)
!3612 = !DILocation(line: 0, scope: !3607)
!3613 = !DILocation(line: 1458, column: 7, scope: !3614)
!3614 = distinct !DILexicalBlock(scope: !3607, file: !574, line: 1458, column: 7)
!3615 = !DILocation(line: 1458, column: 7, scope: !3607)
!3616 = !DILocation(line: 1460, column: 7, scope: !3617)
!3617 = distinct !DILexicalBlock(scope: !3614, file: !574, line: 1459, column: 5)
!3618 = !DILocation(line: 1461, column: 7, scope: !3617)
!3619 = !DILocation(line: 1462, column: 5, scope: !3617)
!3620 = !DILocation(line: 1463, column: 1, scope: !3607)
!3621 = distinct !DISubprogram(name: "gimple_assign_set_rhs1", scope: !574, file: !574, line: 1747, type: !3622, scopeLine: 1748, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3624)
!3622 = !DISubroutineType(types: !3623)
!3623 = !{null, !1013, !689}
!3624 = !{!3625, !3626}
!3625 = !DILocalVariable(name: "gs", arg: 1, scope: !3621, file: !574, line: 1747, type: !1013)
!3626 = !DILocalVariable(name: "rhs", arg: 2, scope: !3621, file: !574, line: 1747, type: !689)
!3627 = !DILocation(line: 0, scope: !3621)
!3628 = !DILocation(line: 1751, column: 3, scope: !3621)
!3629 = !DILocation(line: 1752, column: 1, scope: !3621)
!3630 = distinct !DISubprogram(name: "gimple_assign_set_rhs2", scope: !574, file: !574, line: 1784, type: !3622, scopeLine: 1785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3631)
!3631 = !{!3632, !3633}
!3632 = !DILocalVariable(name: "gs", arg: 1, scope: !3630, file: !574, line: 1784, type: !1013)
!3633 = !DILocalVariable(name: "rhs", arg: 2, scope: !3630, file: !574, line: 1784, type: !689)
!3634 = !DILocation(line: 0, scope: !3630)
!3635 = !DILocation(line: 1788, column: 3, scope: !3630)
!3636 = !DILocation(line: 1789, column: 1, scope: !3630)
!3637 = distinct !DISubprogram(name: "VEC_tree_heap_safe_push", scope: !135, file: !135, line: 184, type: !3638, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3641)
!3638 = !DISubroutineType(types: !3639)
!3639 = !{!1047, !3640, !689}
!3640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2052, size: 64)
!3641 = !{!3642, !3643}
!3642 = !DILocalVariable(name: "vec_", arg: 1, scope: !3637, file: !135, line: 184, type: !3640)
!3643 = !DILocalVariable(name: "obj_", arg: 2, scope: !3637, file: !135, line: 184, type: !689)
!3644 = !DILocation(line: 0, scope: !3637)
!3645 = !DILocation(line: 184, column: 1, scope: !3637)
!3646 = distinct !DISubprogram(name: "gimple_set_op", scope: !574, file: !574, line: 1663, type: !3647, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3649)
!3647 = !DISubroutineType(types: !3648)
!3648 = !{null, !1013, !7, !689}
!3649 = !{!3650, !3651, !3652}
!3650 = !DILocalVariable(name: "gs", arg: 1, scope: !3646, file: !574, line: 1663, type: !1013)
!3651 = !DILocalVariable(name: "i", arg: 2, scope: !3646, file: !574, line: 1663, type: !7)
!3652 = !DILocalVariable(name: "op", arg: 3, scope: !3646, file: !574, line: 1663, type: !689)
!3653 = !DILocation(line: 0, scope: !3646)
!3654 = !DILocation(line: 1665, column: 3, scope: !3646)
!3655 = !DILocation(line: 1671, column: 3, scope: !3646)
!3656 = !DILocation(line: 1671, column: 22, scope: !3646)
!3657 = !DILocation(line: 1672, column: 1, scope: !3646)
!3658 = distinct !DISubprogram(name: "VEC_tree_heap_reserve", scope: !135, file: !135, line: 184, type: !3659, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3661)
!3659 = !DISubroutineType(types: !3660)
!3660 = !{!676, !3640, !676}
!3661 = !{!3662, !3663, !3664}
!3662 = !DILocalVariable(name: "vec_", arg: 1, scope: !3658, file: !135, line: 184, type: !3640)
!3663 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3658, file: !135, line: 184, type: !676)
!3664 = !DILocalVariable(name: "extend", scope: !3658, file: !135, line: 184, type: !676)
!3665 = !DILocation(line: 0, scope: !3658)
!3666 = !DILocation(line: 184, column: 1, scope: !3658)
!3667 = !DILocation(line: 184, column: 1, scope: !3668)
!3668 = distinct !DILexicalBlock(scope: !3658, file: !135, line: 184, column: 1)
!3669 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !135, file: !135, line: 182, type: !3670, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3673)
!3670 = !DISubroutineType(types: !3671)
!3671 = !{!1047, !3672, !689}
!3672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!3673 = !{!3674, !3675, !3676}
!3674 = !DILocalVariable(name: "vec_", arg: 1, scope: !3669, file: !135, line: 182, type: !3672)
!3675 = !DILocalVariable(name: "obj_", arg: 2, scope: !3669, file: !135, line: 182, type: !689)
!3676 = !DILocalVariable(name: "slot_", scope: !3669, file: !135, line: 182, type: !1047)
!3677 = !DILocation(line: 0, scope: !3669)
!3678 = !DILocation(line: 182, column: 1, scope: !3669)
!3679 = distinct !DISubprogram(name: "VEC_tree_base_space", scope: !135, file: !135, line: 182, type: !3680, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3682)
!3680 = !DISubroutineType(types: !3681)
!3681 = !{!676, !3672, !676}
!3682 = !{!3683, !3684}
!3683 = !DILocalVariable(name: "vec_", arg: 1, scope: !3679, file: !135, line: 182, type: !3672)
!3684 = !DILocalVariable(name: "alloc_", arg: 2, scope: !3679, file: !135, line: 182, type: !676)
!3685 = !DILocation(line: 0, scope: !3679)
!3686 = !DILocation(line: 182, column: 1, scope: !3679)
!3687 = distinct !DISubprogram(name: "gsi_last_bb", scope: !574, file: !574, line: 4450, type: !3098, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3688)
!3688 = !{!3689, !3690, !3691}
!3689 = !DILocalVariable(name: "bb", arg: 1, scope: !3687, file: !574, line: 4450, type: !1465)
!3690 = !DILocalVariable(name: "i", scope: !3687, file: !574, line: 4452, type: !2770)
!3691 = !DILocalVariable(name: "seq", scope: !3687, file: !574, line: 4453, type: !1003)
!3692 = !DILocation(line: 0, scope: !3687)
!3693 = !DILocation(line: 4452, column: 24, scope: !3687)
!3694 = !DILocation(line: 4455, column: 9, scope: !3687)
!3695 = !DILocation(line: 4456, column: 11, scope: !3687)
!3696 = !DILocation(line: 4456, column: 5, scope: !3687)
!3697 = !DILocation(line: 4456, column: 9, scope: !3687)
!3698 = !DILocation(line: 4457, column: 5, scope: !3687)
!3699 = !DILocation(line: 4457, column: 9, scope: !3687)
!3700 = !DILocation(line: 4458, column: 5, scope: !3687)
!3701 = !DILocation(line: 4458, column: 8, scope: !3687)
!3702 = !DILocation(line: 4461, column: 1, scope: !3687)
!3703 = distinct !DISubprogram(name: "gimple_visited_p", scope: !574, file: !574, line: 1226, type: !3196, scopeLine: 1227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3704)
!3704 = !{!3705}
!3705 = !DILocalVariable(name: "stmt", arg: 1, scope: !3703, file: !574, line: 1226, type: !1013)
!3706 = !DILocation(line: 0, scope: !3703)
!3707 = !DILocation(line: 1228, column: 23, scope: !3703)
!3708 = !DILocation(line: 1228, column: 10, scope: !3703)
!3709 = !DILocation(line: 1228, column: 3, scope: !3703)
!3710 = distinct !DISubprogram(name: "has_zero_uses", scope: !3403, file: !3403, line: 332, type: !3475, scopeLine: 333, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3711)
!3711 = !{!3712, !3713}
!3712 = !DILocalVariable(name: "var", arg: 1, scope: !3710, file: !3403, line: 332, type: !3477)
!3713 = !DILocalVariable(name: "ptr", scope: !3710, file: !3403, line: 334, type: !3483)
!3714 = !DILocation(line: 0, scope: !3710)
!3715 = !DILocation(line: 334, column: 42, scope: !3710)
!3716 = !DILocation(line: 337, column: 19, scope: !3717)
!3717 = distinct !DILexicalBlock(scope: !3710, file: !3403, line: 337, column: 7)
!3718 = !DILocation(line: 337, column: 11, scope: !3717)
!3719 = !DILocation(line: 337, column: 7, scope: !3710)
!3720 = !DILocation(line: 342, column: 8, scope: !3721)
!3721 = distinct !DILexicalBlock(scope: !3710, file: !3403, line: 342, column: 7)
!3722 = !DILocation(line: 342, column: 7, scope: !3710)
!3723 = !DILocation(line: 345, column: 10, scope: !3710)
!3724 = !DILocation(line: 345, column: 3, scope: !3710)
!3725 = !DILocation(line: 346, column: 1, scope: !3710)
!3726 = distinct !DISubprogram(name: "linearize_expr_tree", scope: !3, file: !3, line: 1611, type: !3727, scopeLine: 1613, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3729)
!3727 = !DISubroutineType(types: !3728)
!3728 = !{null, !2071, !1013, !675, !675}
!3729 = !{!3730, !3731, !3732, !3733, !3734, !3735, !3736, !3737, !3738, !3739, !3740, !3741, !3742}
!3730 = !DILocalVariable(name: "ops", arg: 1, scope: !3726, file: !3, line: 1611, type: !2071)
!3731 = !DILocalVariable(name: "stmt", arg: 2, scope: !3726, file: !3, line: 1611, type: !1013)
!3732 = !DILocalVariable(name: "is_associative", arg: 3, scope: !3726, file: !3, line: 1612, type: !675)
!3733 = !DILocalVariable(name: "set_visited", arg: 4, scope: !3726, file: !3, line: 1612, type: !675)
!3734 = !DILocalVariable(name: "binlhs", scope: !3726, file: !3, line: 1614, type: !689)
!3735 = !DILocalVariable(name: "binrhs", scope: !3726, file: !3, line: 1615, type: !689)
!3736 = !DILocalVariable(name: "binlhsdef", scope: !3726, file: !3, line: 1616, type: !1013)
!3737 = !DILocalVariable(name: "binrhsdef", scope: !3726, file: !3, line: 1616, type: !1013)
!3738 = !DILocalVariable(name: "binlhsisreassoc", scope: !3726, file: !3, line: 1617, type: !675)
!3739 = !DILocalVariable(name: "binrhsisreassoc", scope: !3726, file: !3, line: 1618, type: !675)
!3740 = !DILocalVariable(name: "rhscode", scope: !3726, file: !3, line: 1619, type: !134)
!3741 = !DILocalVariable(name: "loop", scope: !3726, file: !3, line: 1620, type: !1228)
!3742 = !DILocalVariable(name: "temp", scope: !3743, file: !3, line: 1645, type: !689)
!3743 = distinct !DILexicalBlock(scope: !3744, file: !3, line: 1644, column: 5)
!3744 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 1643, column: 7)
!3745 = !DILocation(line: 0, scope: !3726)
!3746 = !DILocation(line: 1614, column: 17, scope: !3726)
!3747 = !DILocation(line: 1615, column: 17, scope: !3726)
!3748 = !DILocation(line: 1619, column: 28, scope: !3726)
!3749 = !DILocation(line: 1620, column: 23, scope: !3726)
!3750 = !DILocation(line: 1622, column: 7, scope: !3751)
!3751 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 1622, column: 7)
!3752 = !DILocation(line: 1622, column: 7, scope: !3726)
!3753 = !DILocation(line: 1623, column: 5, scope: !3751)
!3754 = !DILocation(line: 1625, column: 7, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 1625, column: 7)
!3756 = !DILocation(line: 1625, column: 26, scope: !3755)
!3757 = !DILocation(line: 1625, column: 7, scope: !3726)
!3758 = !DILocation(line: 1627, column: 19, scope: !3759)
!3759 = distinct !DILexicalBlock(scope: !3755, file: !3, line: 1626, column: 5)
!3760 = !DILocation(line: 1628, column: 25, scope: !3759)
!3761 = !DILocation(line: 1629, column: 5, scope: !3759)
!3762 = !DILocation(line: 1631, column: 7, scope: !3763)
!3763 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 1631, column: 7)
!3764 = !DILocation(line: 1631, column: 26, scope: !3763)
!3765 = !DILocation(line: 1631, column: 7, scope: !3726)
!3766 = !DILocation(line: 1633, column: 19, scope: !3767)
!3767 = distinct !DILexicalBlock(scope: !3763, file: !3, line: 1632, column: 5)
!3768 = !DILocation(line: 1634, column: 25, scope: !3767)
!3769 = !DILocation(line: 1635, column: 5, scope: !3767)
!3770 = !DILocation(line: 1643, column: 8, scope: !3744)
!3771 = !DILocation(line: 1643, column: 7, scope: !3726)
!3772 = !DILocation(line: 1648, column: 12, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 1648, column: 11)
!3774 = !DILocation(line: 1648, column: 11, scope: !3743)
!3775 = !DILocation(line: 1650, column: 4, scope: !3776)
!3776 = distinct !DILexicalBlock(scope: !3773, file: !3, line: 1649, column: 2)
!3777 = !DILocation(line: 1651, column: 4, scope: !3776)
!3778 = !DILocation(line: 1654, column: 12, scope: !3779)
!3779 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 1654, column: 11)
!3780 = !DILocation(line: 1654, column: 11, scope: !3743)
!3781 = !DILocation(line: 1656, column: 4, scope: !3782)
!3782 = distinct !DILexicalBlock(scope: !3779, file: !3, line: 1655, column: 2)
!3783 = !DILocation(line: 1657, column: 4, scope: !3782)
!3784 = !DILocation(line: 1658, column: 4, scope: !3782)
!3785 = !DILocation(line: 1661, column: 11, scope: !3786)
!3786 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 1661, column: 11)
!3787 = !DILocation(line: 1661, column: 21, scope: !3786)
!3788 = !DILocation(line: 1661, column: 25, scope: !3786)
!3789 = !DILocation(line: 1661, column: 36, scope: !3786)
!3790 = !DILocation(line: 1661, column: 11, scope: !3743)
!3791 = !DILocation(line: 1663, column: 4, scope: !3792)
!3792 = distinct !DILexicalBlock(scope: !3786, file: !3, line: 1662, column: 2)
!3793 = !DILocation(line: 1664, column: 23, scope: !3792)
!3794 = !DILocation(line: 1664, column: 4, scope: !3792)
!3795 = !DILocation(line: 1665, column: 2, scope: !3792)
!3796 = !DILocation(line: 1668, column: 6, scope: !3743)
!3797 = !DILocation(line: 1669, column: 6, scope: !3743)
!3798 = !DILocation(line: 1667, column: 7, scope: !3743)
!3799 = !DILocation(line: 1670, column: 7, scope: !3743)
!3800 = !DILocation(line: 1672, column: 11, scope: !3801)
!3801 = distinct !DILexicalBlock(scope: !3743, file: !3, line: 1672, column: 11)
!3802 = !DILocation(line: 1672, column: 21, scope: !3801)
!3803 = !DILocation(line: 1672, column: 25, scope: !3801)
!3804 = !DILocation(line: 1672, column: 36, scope: !3801)
!3805 = !DILocation(line: 1672, column: 11, scope: !3743)
!3806 = !DILocation(line: 1674, column: 4, scope: !3807)
!3807 = distinct !DILexicalBlock(scope: !3801, file: !3, line: 1673, column: 2)
!3808 = !DILocation(line: 1675, column: 23, scope: !3807)
!3809 = !DILocation(line: 1675, column: 4, scope: !3807)
!3810 = !DILocation(line: 1676, column: 2, scope: !3807)
!3811 = !DILocation(line: 1684, column: 12, scope: !3812)
!3812 = distinct !DILexicalBlock(scope: !3744, file: !3, line: 1684, column: 12)
!3813 = !DILocation(line: 1684, column: 12, scope: !3744)
!3814 = !DILocation(line: 1686, column: 7, scope: !3815)
!3815 = distinct !DILexicalBlock(scope: !3812, file: !3, line: 1685, column: 5)
!3816 = !DILocation(line: 1687, column: 16, scope: !3815)
!3817 = !DILocation(line: 1688, column: 16, scope: !3815)
!3818 = !DILocation(line: 1689, column: 5, scope: !3815)
!3819 = !DILocation(line: 0, scope: !3744)
!3820 = !DILocation(line: 1691, column: 3, scope: !3726)
!3821 = !DILocation(line: 1694, column: 29, scope: !3726)
!3822 = !DILocation(line: 1694, column: 3, scope: !3726)
!3823 = !DILocation(line: 1696, column: 3, scope: !3726)
!3824 = !DILocation(line: 1697, column: 1, scope: !3726)
!3825 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_address", scope: !3, file: !3, line: 297, type: !3826, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3829)
!3826 = !DISubroutineType(types: !3827)
!3827 = !{!2641, !3828}
!3828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2062, size: 64)
!3829 = !{!3830}
!3830 = !DILocalVariable(name: "vec_", arg: 1, scope: !3825, file: !3, line: 297, type: !3828)
!3831 = !DILocation(line: 0, scope: !3825)
!3832 = !DILocation(line: 297, column: 1, scope: !3825)
!3833 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_length", scope: !3, file: !3, line: 297, type: !3834, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3836)
!3834 = !DISubroutineType(types: !3835)
!3835 = !{!7, !2639}
!3836 = !{!3837}
!3837 = !DILocalVariable(name: "vec_", arg: 1, scope: !3833, file: !3, line: 297, type: !2639)
!3838 = !DILocation(line: 0, scope: !3833)
!3839 = !DILocation(line: 297, column: 1, scope: !3833)
!3840 = distinct !DISubprogram(name: "sort_by_operand_rank", scope: !3, file: !3, line: 322, type: !1513, scopeLine: 323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3841)
!3841 = !{!3842, !3843, !3844, !3845}
!3842 = !DILocalVariable(name: "pa", arg: 1, scope: !3840, file: !3, line: 322, type: !1508)
!3843 = !DILocalVariable(name: "pb", arg: 2, scope: !3840, file: !3, line: 322, type: !1508)
!3844 = !DILocalVariable(name: "oea", scope: !3840, file: !3, line: 324, type: !2070)
!3845 = !DILocalVariable(name: "oeb", scope: !3840, file: !3, line: 325, type: !2070)
!3846 = !DILocation(line: 0, scope: !3840)
!3847 = !DILocation(line: 324, column: 32, scope: !3840)
!3848 = !DILocation(line: 324, column: 31, scope: !3840)
!3849 = !DILocation(line: 325, column: 32, scope: !3840)
!3850 = !DILocation(line: 325, column: 31, scope: !3840)
!3851 = !DILocation(line: 330, column: 12, scope: !3852)
!3852 = distinct !DILexicalBlock(scope: !3840, file: !3, line: 330, column: 7)
!3853 = !DILocation(line: 330, column: 17, scope: !3852)
!3854 = !DILocation(line: 330, column: 22, scope: !3852)
!3855 = !DILocation(line: 0, scope: !3856)
!3856 = distinct !DILexicalBlock(scope: !3840, file: !3, line: 335, column: 7)
!3857 = !DILocation(line: 335, column: 25, scope: !3856)
!3858 = !DILocation(line: 330, column: 31, scope: !3852)
!3859 = !DILocation(line: 330, column: 36, scope: !3852)
!3860 = !DILocation(line: 330, column: 7, scope: !3840)
!3861 = !DILocation(line: 331, column: 32, scope: !3852)
!3862 = !DILocation(line: 331, column: 12, scope: !3852)
!3863 = !DILocation(line: 331, column: 58, scope: !3852)
!3864 = !DILocation(line: 331, column: 38, scope: !3852)
!3865 = !DILocation(line: 331, column: 36, scope: !3852)
!3866 = !DILocation(line: 331, column: 5, scope: !3852)
!3867 = !DILocation(line: 335, column: 30, scope: !3856)
!3868 = !DILocation(line: 336, column: 7, scope: !3856)
!3869 = !DILocation(line: 336, column: 10, scope: !3856)
!3870 = !DILocation(line: 336, column: 30, scope: !3856)
!3871 = !DILocation(line: 337, column: 7, scope: !3856)
!3872 = !DILocation(line: 337, column: 10, scope: !3856)
!3873 = !DILocation(line: 337, column: 30, scope: !3856)
!3874 = !DILocation(line: 335, column: 7, scope: !3840)
!3875 = !DILocation(line: 338, column: 12, scope: !3856)
!3876 = !DILocation(line: 338, column: 41, scope: !3856)
!3877 = !DILocation(line: 338, column: 39, scope: !3856)
!3878 = !DILocation(line: 338, column: 5, scope: !3856)
!3879 = !DILocation(line: 340, column: 20, scope: !3840)
!3880 = !DILocation(line: 340, column: 3, scope: !3840)
!3881 = !DILocation(line: 341, column: 1, scope: !3840)
!3882 = distinct !DISubprogram(name: "optimize_ops_list", scope: !3, file: !3, line: 1173, type: !3883, scopeLine: 1175, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3885)
!3883 = !DISubroutineType(types: !3884)
!3884 = !{null, !134, !2071}
!3885 = !{!3886, !3887, !3888, !3889, !3890, !3891, !3892, !3893, !3896, !3899}
!3886 = !DILocalVariable(name: "opcode", arg: 1, scope: !3882, file: !3, line: 1173, type: !134)
!3887 = !DILocalVariable(name: "ops", arg: 2, scope: !3882, file: !3, line: 1174, type: !2071)
!3888 = !DILocalVariable(name: "length", scope: !3882, file: !3, line: 1176, type: !7)
!3889 = !DILocalVariable(name: "i", scope: !3882, file: !3, line: 1177, type: !7)
!3890 = !DILocalVariable(name: "oe", scope: !3882, file: !3, line: 1178, type: !683)
!3891 = !DILocalVariable(name: "oelast", scope: !3882, file: !3, line: 1179, type: !683)
!3892 = !DILocalVariable(name: "iterate", scope: !3882, file: !3, line: 1180, type: !675)
!3893 = !DILocalVariable(name: "oelm1", scope: !3894, file: !3, line: 1191, type: !683)
!3894 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 1190, column: 5)
!3895 = distinct !DILexicalBlock(scope: !3882, file: !3, line: 1189, column: 7)
!3896 = !DILocalVariable(name: "folded", scope: !3897, file: !3, line: 1198, type: !689)
!3897 = distinct !DILexicalBlock(scope: !3898, file: !3, line: 1197, column: 2)
!3898 = distinct !DILexicalBlock(scope: !3894, file: !3, line: 1193, column: 11)
!3899 = !DILocalVariable(name: "done", scope: !3900, file: !3, line: 1223, type: !675)
!3900 = distinct !DILexicalBlock(scope: !3901, file: !3, line: 1222, column: 5)
!3901 = distinct !DILexicalBlock(scope: !3902, file: !3, line: 1221, column: 3)
!3902 = distinct !DILexicalBlock(scope: !3882, file: !3, line: 1221, column: 3)
!3903 = !DILocation(line: 0, scope: !3882)
!3904 = !DILocation(line: 1176, column: 25, scope: !3882)
!3905 = !DILocation(line: 1178, column: 3, scope: !3882)
!3906 = !DILocation(line: 1182, column: 14, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3882, file: !3, line: 1182, column: 7)
!3908 = !DILocation(line: 1182, column: 7, scope: !3882)
!3909 = !DILocation(line: 1185, column: 12, scope: !3882)
!3910 = !DILocation(line: 1189, column: 15, scope: !3895)
!3911 = !DILocation(line: 1189, column: 20, scope: !3895)
!3912 = !DILocation(line: 1189, column: 25, scope: !3895)
!3913 = !DILocation(line: 1189, column: 61, scope: !3895)
!3914 = !DILocation(line: 1189, column: 28, scope: !3895)
!3915 = !DILocation(line: 1189, column: 7, scope: !3882)
!3916 = !DILocation(line: 1191, column: 31, scope: !3894)
!3917 = !DILocation(line: 0, scope: !3894)
!3918 = !DILocation(line: 1193, column: 18, scope: !3898)
!3919 = !DILocation(line: 1193, column: 23, scope: !3898)
!3920 = !DILocation(line: 1194, column: 4, scope: !3898)
!3921 = !DILocation(line: 1194, column: 39, scope: !3898)
!3922 = !DILocation(line: 1194, column: 7, scope: !3898)
!3923 = !DILocation(line: 1195, column: 4, scope: !3898)
!3924 = !DILocation(line: 1195, column: 34, scope: !3898)
!3925 = !DILocation(line: 1196, column: 12, scope: !3898)
!3926 = !DILocation(line: 1195, column: 7, scope: !3898)
!3927 = !DILocation(line: 1193, column: 11, scope: !3894)
!3928 = !DILocation(line: 1198, column: 18, scope: !3897)
!3929 = !DILocation(line: 0, scope: !3897)
!3930 = !DILocation(line: 1201, column: 8, scope: !3931)
!3931 = distinct !DILexicalBlock(scope: !3897, file: !3, line: 1201, column: 8)
!3932 = !DILocation(line: 1201, column: 15, scope: !3931)
!3933 = !DILocation(line: 1201, column: 18, scope: !3931)
!3934 = !DILocation(line: 1201, column: 8, scope: !3897)
!3935 = !DILocation(line: 1203, column: 12, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3937, file: !3, line: 1203, column: 12)
!3937 = distinct !DILexicalBlock(scope: !3931, file: !3, line: 1202, column: 6)
!3938 = !DILocation(line: 1203, column: 22, scope: !3936)
!3939 = !DILocation(line: 1203, column: 26, scope: !3936)
!3940 = !DILocation(line: 1203, column: 37, scope: !3936)
!3941 = !DILocation(line: 1203, column: 12, scope: !3937)
!3942 = !DILocation(line: 1204, column: 3, scope: !3936)
!3943 = !DILocation(line: 1206, column: 8, scope: !3937)
!3944 = !DILocation(line: 1207, column: 8, scope: !3937)
!3945 = !DILocation(line: 1209, column: 8, scope: !3937)
!3946 = !DILocation(line: 1210, column: 46, scope: !3937)
!3947 = !DILocation(line: 1212, column: 8, scope: !3937)
!3948 = !DILocation(line: 1213, column: 8, scope: !3937)
!3949 = !DILocation(line: 1216, column: 5, scope: !3895)
!3950 = !DILocation(line: 1218, column: 3, scope: !3882)
!3951 = !DILocation(line: 1221, column: 8, scope: !3902)
!3952 = !DILocation(line: 1219, column: 10, scope: !3882)
!3953 = !DILocation(line: 1221, column: 10, scope: !3902)
!3954 = !DILocation(line: 1180, column: 8, scope: !3882)
!3955 = !DILocation(line: 1221, column: 15, scope: !3901)
!3956 = !DILocation(line: 1221, column: 3, scope: !3902)
!3957 = !DILocation(line: 0, scope: !3900)
!3958 = !DILocation(line: 1223, column: 7, scope: !3900)
!3959 = !DILocation(line: 1223, column: 12, scope: !3900)
!3960 = !DILocation(line: 1225, column: 48, scope: !3961)
!3961 = distinct !DILexicalBlock(scope: !3900, file: !3, line: 1225, column: 11)
!3962 = !DILocation(line: 1225, column: 11, scope: !3961)
!3963 = !DILocation(line: 1225, column: 11, scope: !3900)
!3964 = !DILocation(line: 1227, column: 60, scope: !3965)
!3965 = distinct !DILexicalBlock(scope: !3900, file: !3, line: 1227, column: 11)
!3966 = !DILocation(line: 1227, column: 11, scope: !3965)
!3967 = !DILocation(line: 1228, column: 4, scope: !3965)
!3968 = !DILocation(line: 1228, column: 9, scope: !3965)
!3969 = !DILocation(line: 1228, column: 14, scope: !3965)
!3970 = !DILocation(line: 1228, column: 60, scope: !3965)
!3971 = !DILocation(line: 1228, column: 17, scope: !3965)
!3972 = !DILocation(line: 1227, column: 11, scope: !3900)
!3973 = !DILocation(line: 1230, column: 8, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !3975, file: !3, line: 1230, column: 8)
!3975 = distinct !DILexicalBlock(scope: !3965, file: !3, line: 1229, column: 2)
!3976 = !DILocation(line: 0, scope: !3975)
!3977 = !DILocation(line: 1236, column: 16, scope: !3900)
!3978 = !DILocation(line: 1237, column: 8, scope: !3900)
!3979 = !DILocation(line: 1238, column: 5, scope: !3901)
!3980 = !DILocation(line: 0, scope: !3902)
!3981 = distinct !{!3981, !3956, !3982}
!3982 = !DILocation(line: 1238, column: 5, scope: !3902)
!3983 = !DILocation(line: 1240, column: 13, scope: !3882)
!3984 = !DILocation(line: 1241, column: 12, scope: !3882)
!3985 = !DILocation(line: 1243, column: 7, scope: !3986)
!3986 = distinct !DILexicalBlock(scope: !3882, file: !3, line: 1243, column: 7)
!3987 = !DILocation(line: 1243, column: 7, scope: !3882)
!3988 = !DILocation(line: 1244, column: 5, scope: !3986)
!3989 = !DILocation(line: 1245, column: 1, scope: !3882)
!3990 = distinct !DISubprogram(name: "undistribute_ops_list", scope: !3, file: !3, line: 944, type: !3991, scopeLine: 946, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !3993)
!3991 = !DISubroutineType(types: !3992)
!3992 = !{!675, !134, !2071, !1228}
!3993 = !{!3994, !3995, !3996, !3997, !3998, !3999, !4000, !4001, !4012, !4013, !4014, !4015, !4026, !4027, !4028, !4029, !4033, !4034, !4038, !4039, !4040, !4044, !4045, !4046, !4050, !4052, !4056, !4057, !4058, !4059, !4062, !4063, !4064, !4065, !4066}
!3994 = !DILocalVariable(name: "opcode", arg: 1, scope: !3990, file: !3, line: 944, type: !134)
!3995 = !DILocalVariable(name: "ops", arg: 2, scope: !3990, file: !3, line: 945, type: !2071)
!3996 = !DILocalVariable(name: "loop", arg: 3, scope: !3990, file: !3, line: 945, type: !1228)
!3997 = !DILocalVariable(name: "length", scope: !3990, file: !3, line: 947, type: !7)
!3998 = !DILocalVariable(name: "oe1", scope: !3990, file: !3, line: 948, type: !683)
!3999 = !DILocalVariable(name: "i", scope: !3990, file: !3, line: 949, type: !7)
!4000 = !DILocalVariable(name: "j", scope: !3990, file: !3, line: 949, type: !7)
!4001 = !DILocalVariable(name: "candidates", scope: !3990, file: !3, line: 950, type: !4002)
!4002 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !4003, line: 45, baseType: !4004)
!4003 = !DIFile(filename: "./sbitmap.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!4004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4005, size: 64)
!4005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !4003, line: 39, size: 192, elements: !4006)
!4006 = !{!4007, !4008, !4009, !4010}
!4007 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !4005, file: !4003, line: 41, baseType: !674, size: 64)
!4008 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !4005, file: !4003, line: 42, baseType: !7, size: 32, offset: 64)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4005, file: !4003, line: 43, baseType: !7, size: 32, offset: 96)
!4010 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !4005, file: !4003, line: 44, baseType: !4011, size: 64, offset: 128)
!4011 = !DICompositeType(tag: DW_TAG_array_type, baseType: !743, size: 64, elements: !788)
!4012 = !DILocalVariable(name: "candidates2", scope: !3990, file: !3, line: 950, type: !4002)
!4013 = !DILocalVariable(name: "nr_candidates", scope: !3990, file: !3, line: 951, type: !7)
!4014 = !DILocalVariable(name: "nr_candidates2", scope: !3990, file: !3, line: 951, type: !7)
!4015 = !DILocalVariable(name: "sbi0", scope: !3990, file: !3, line: 952, type: !4016)
!4016 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap_iterator", file: !4003, line: 111, baseType: !4017)
!4017 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !4003, line: 96, size: 256, elements: !4018)
!4018 = !{!4019, !4022, !4023, !4024, !4025}
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4017, file: !4003, line: 98, baseType: !4020, size: 64)
!4020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4021, size: 64)
!4021 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !743)
!4022 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4017, file: !4003, line: 101, baseType: !7, size: 32, offset: 64)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "word_num", scope: !4017, file: !4003, line: 104, baseType: !7, size: 32, offset: 96)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "bit_num", scope: !4017, file: !4003, line: 107, baseType: !7, size: 32, offset: 128)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "word", scope: !4017, file: !4003, line: 110, baseType: !743, size: 64, offset: 192)
!4026 = !DILocalVariable(name: "subops", scope: !3990, file: !3, line: 953, type: !2071)
!4027 = !DILocalVariable(name: "ctable", scope: !3990, file: !3, line: 954, type: !1497)
!4028 = !DILocalVariable(name: "changed", scope: !3990, file: !3, line: 955, type: !675)
!4029 = !DILocalVariable(name: "dcode", scope: !4030, file: !3, line: 967, type: !134)
!4030 = distinct !DILexicalBlock(scope: !4031, file: !3, line: 966, column: 5)
!4031 = distinct !DILexicalBlock(scope: !4032, file: !3, line: 965, column: 3)
!4032 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 965, column: 3)
!4033 = !DILocalVariable(name: "oe1def", scope: !4030, file: !3, line: 968, type: !1013)
!4034 = !DILocalVariable(name: "oedef", scope: !4035, file: !3, line: 1007, type: !1013)
!4035 = distinct !DILexicalBlock(scope: !4036, file: !3, line: 1006, column: 5)
!4036 = distinct !DILexicalBlock(scope: !4037, file: !3, line: 1005, column: 3)
!4037 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 1005, column: 3)
!4038 = !DILocalVariable(name: "oecode", scope: !4035, file: !3, line: 1008, type: !134)
!4039 = !DILocalVariable(name: "j", scope: !4035, file: !3, line: 1009, type: !7)
!4040 = !DILocalVariable(name: "c", scope: !4041, file: !3, line: 1018, type: !2084)
!4041 = distinct !DILexicalBlock(scope: !4042, file: !3, line: 1017, column: 2)
!4042 = distinct !DILexicalBlock(scope: !4043, file: !3, line: 1016, column: 7)
!4043 = distinct !DILexicalBlock(scope: !4035, file: !3, line: 1016, column: 7)
!4044 = !DILocalVariable(name: "slot", scope: !4041, file: !3, line: 1019, type: !1521)
!4045 = !DILocalVariable(name: "idx", scope: !4041, file: !3, line: 1020, type: !1158)
!4046 = !DILocalVariable(name: "c", scope: !4047, file: !3, line: 1051, type: !4049)
!4047 = distinct !DILexicalBlock(scope: !4048, file: !3, line: 1050, column: 5)
!4048 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 1049, column: 7)
!4049 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2084, size: 64)
!4050 = !DILocalVariable(name: "c", scope: !4051, file: !3, line: 1067, type: !4049)
!4051 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 1066, column: 5)
!4052 = !DILocalVariable(name: "oedef", scope: !4053, file: !3, line: 1077, type: !1013)
!4053 = distinct !DILexicalBlock(scope: !4054, file: !3, line: 1076, column: 2)
!4054 = distinct !DILexicalBlock(scope: !4055, file: !3, line: 1075, column: 7)
!4055 = distinct !DILexicalBlock(scope: !4051, file: !3, line: 1075, column: 7)
!4056 = !DILocalVariable(name: "oecode", scope: !4053, file: !3, line: 1078, type: !134)
!4057 = !DILocalVariable(name: "j", scope: !4053, file: !3, line: 1079, type: !7)
!4058 = !DILocalVariable(name: "op", scope: !4053, file: !3, line: 1080, type: !689)
!4059 = !DILocalVariable(name: "oe1", scope: !4060, file: !3, line: 1105, type: !683)
!4060 = distinct !DILexicalBlock(scope: !4061, file: !3, line: 1104, column: 2)
!4061 = distinct !DILexicalBlock(scope: !4051, file: !3, line: 1103, column: 11)
!4062 = !DILocalVariable(name: "oe2", scope: !4060, file: !3, line: 1105, type: !683)
!4063 = !DILocalVariable(name: "tmpvar", scope: !4060, file: !3, line: 1106, type: !689)
!4064 = !DILocalVariable(name: "prod", scope: !4060, file: !3, line: 1107, type: !1013)
!4065 = !DILocalVariable(name: "first", scope: !4060, file: !3, line: 1108, type: !676)
!4066 = !DILocalVariable(name: "sum", scope: !4067, file: !3, line: 1122, type: !1013)
!4067 = distinct !DILexicalBlock(scope: !4068, file: !3, line: 1121, column: 6)
!4068 = distinct !DILexicalBlock(scope: !4069, file: !3, line: 1120, column: 4)
!4069 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1120, column: 4)
!4070 = !DILocation(line: 0, scope: !3990)
!4071 = !DILocation(line: 947, column: 25, scope: !3990)
!4072 = !DILocation(line: 948, column: 3, scope: !3990)
!4073 = !DILocation(line: 949, column: 3, scope: !3990)
!4074 = !DILocation(line: 952, column: 3, scope: !3990)
!4075 = !DILocation(line: 957, column: 14, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 957, column: 7)
!4077 = !DILocation(line: 958, column: 17, scope: !4076)
!4078 = !DILocation(line: 958, column: 7, scope: !4076)
!4079 = !DILocation(line: 962, column: 16, scope: !3990)
!4080 = !DILocation(line: 963, column: 3, scope: !3990)
!4081 = !DILocation(line: 965, column: 8, scope: !4032)
!4082 = !DILocation(line: 0, scope: !4032)
!4083 = !DILocation(line: 964, column: 17, scope: !3990)
!4084 = !DILocation(line: 965, column: 15, scope: !4031)
!4085 = !DILocation(line: 965, column: 3, scope: !4032)
!4086 = !DILocation(line: 970, column: 11, scope: !4087)
!4087 = distinct !DILexicalBlock(scope: !4030, file: !3, line: 970, column: 11)
!4088 = !DILocation(line: 970, column: 31, scope: !4087)
!4089 = !DILocation(line: 970, column: 11, scope: !4030)
!4090 = !DILocation(line: 972, column: 16, scope: !4030)
!4091 = !DILocation(line: 0, scope: !4030)
!4092 = !DILocation(line: 973, column: 12, scope: !4093)
!4093 = distinct !DILexicalBlock(scope: !4030, file: !3, line: 973, column: 11)
!4094 = !DILocation(line: 973, column: 11, scope: !4030)
!4095 = !DILocation(line: 975, column: 15, scope: !4030)
!4096 = !DILocation(line: 977, column: 5, scope: !4097)
!4097 = distinct !DILexicalBlock(scope: !4030, file: !3, line: 976, column: 11)
!4098 = !DILocation(line: 978, column: 8, scope: !4097)
!4099 = !DILocation(line: 976, column: 11, scope: !4030)
!4100 = !DILocation(line: 981, column: 28, scope: !4030)
!4101 = !DILocation(line: 981, column: 7, scope: !4030)
!4102 = !DILocation(line: 982, column: 20, scope: !4030)
!4103 = !DILocation(line: 983, column: 5, scope: !4031)
!4104 = !DILocation(line: 965, column: 60, scope: !4031)
!4105 = !DILocation(line: 965, column: 3, scope: !4031)
!4106 = distinct !{!4106, !4085, !4107}
!4107 = !DILocation(line: 983, column: 5, scope: !4032)
!4108 = !DILocation(line: 985, column: 21, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 985, column: 7)
!4110 = !DILocation(line: 985, column: 7, scope: !3990)
!4111 = !DILocation(line: 987, column: 7, scope: !4112)
!4112 = distinct !DILexicalBlock(scope: !4109, file: !3, line: 986, column: 5)
!4113 = !DILocation(line: 988, column: 7, scope: !4112)
!4114 = !DILocation(line: 991, column: 7, scope: !4115)
!4115 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 991, column: 7)
!4116 = !DILocation(line: 991, column: 17, scope: !4115)
!4117 = !DILocation(line: 991, column: 21, scope: !4115)
!4118 = !DILocation(line: 991, column: 32, scope: !4115)
!4119 = !DILocation(line: 991, column: 7, scope: !3990)
!4120 = !DILocation(line: 993, column: 7, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !4115, file: !3, line: 992, column: 5)
!4122 = !DILocation(line: 994, column: 27, scope: !4121)
!4123 = !DILocation(line: 995, column: 2, scope: !4121)
!4124 = !DILocation(line: 996, column: 43, scope: !4121)
!4125 = !DILocation(line: 994, column: 7, scope: !4121)
!4126 = !DILocation(line: 997, column: 16, scope: !4121)
!4127 = !DILocation(line: 997, column: 7, scope: !4121)
!4128 = !DILocation(line: 998, column: 5, scope: !4121)
!4129 = !DILocation(line: 1001, column: 8, scope: !3990)
!4130 = !DILocation(line: 1002, column: 12, scope: !3990)
!4131 = !DILocation(line: 1003, column: 12, scope: !3990)
!4132 = !DILocation(line: 1005, column: 3, scope: !4037)
!4133 = !DILocation(line: 0, scope: !4041)
!4134 = !DILocation(line: 1005, column: 3, scope: !4036)
!4135 = !DILocation(line: 1011, column: 15, scope: !4035)
!4136 = !DILocation(line: 0, scope: !4035)
!4137 = !DILocation(line: 1012, column: 16, scope: !4035)
!4138 = !DILocation(line: 1013, column: 36, scope: !4035)
!4139 = !DILocation(line: 1013, column: 29, scope: !4035)
!4140 = !DILocation(line: 1014, column: 7, scope: !4035)
!4141 = !DILocation(line: 1013, column: 7, scope: !4035)
!4142 = !DILocation(line: 1016, column: 12, scope: !4043)
!4143 = !DILocation(line: 0, scope: !4043)
!4144 = !DILocation(line: 1016, column: 19, scope: !4042)
!4145 = !DILocation(line: 1016, column: 7, scope: !4043)
!4146 = !DILocation(line: 1018, column: 4, scope: !4041)
!4147 = !DILocation(line: 1021, column: 13, scope: !4041)
!4148 = !DILocation(line: 1022, column: 10, scope: !4041)
!4149 = !DILocation(line: 1023, column: 11, scope: !4041)
!4150 = !DILocation(line: 1023, column: 16, scope: !4041)
!4151 = !DILocation(line: 1023, column: 9, scope: !4041)
!4152 = !DILocation(line: 1024, column: 4, scope: !4041)
!4153 = !DILocation(line: 1025, column: 10, scope: !4041)
!4154 = !DILocation(line: 1025, column: 37, scope: !4041)
!4155 = !DILocation(line: 1026, column: 35, scope: !4041)
!4156 = !DILocation(line: 1026, column: 11, scope: !4041)
!4157 = !DILocation(line: 1027, column: 9, scope: !4158)
!4158 = distinct !DILexicalBlock(scope: !4041, file: !3, line: 1027, column: 8)
!4159 = !DILocation(line: 1027, column: 8, scope: !4041)
!4160 = !DILocation(line: 1029, column: 14, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4158, file: !3, line: 1028, column: 6)
!4162 = !DILocation(line: 1030, column: 6, scope: !4161)
!4163 = !DILocation(line: 1033, column: 8, scope: !4164)
!4164 = distinct !DILexicalBlock(scope: !4158, file: !3, line: 1032, column: 6)
!4165 = !DILocation(line: 1034, column: 8, scope: !4164)
!4166 = !DILocation(line: 1034, column: 55, scope: !4164)
!4167 = !DILocation(line: 1034, column: 58, scope: !4164)
!4168 = !DILocation(line: 1036, column: 2, scope: !4042)
!4169 = !DILocation(line: 1016, column: 69, scope: !4042)
!4170 = !DILocation(line: 1016, column: 7, scope: !4042)
!4171 = distinct !{!4171, !4145, !4172}
!4172 = !DILocation(line: 1036, column: 2, scope: !4043)
!4173 = distinct !{!4173, !4132, !4174}
!4174 = !DILocation(line: 1037, column: 5, scope: !4037)
!4175 = !DILocation(line: 1038, column: 3, scope: !3990)
!4176 = !DILocation(line: 1042, column: 15, scope: !3990)
!4177 = !DILocation(line: 1042, column: 44, scope: !3990)
!4178 = !DILocation(line: 1042, column: 3, scope: !3990)
!4179 = !DILocation(line: 1049, column: 7, scope: !4048)
!4180 = !DILocation(line: 1049, column: 17, scope: !4048)
!4181 = !DILocation(line: 1049, column: 21, scope: !4048)
!4182 = !DILocation(line: 1049, column: 32, scope: !4048)
!4183 = !DILocation(line: 1049, column: 7, scope: !3990)
!4184 = !DILocation(line: 1051, column: 7, scope: !4047)
!4185 = !DILocation(line: 1052, column: 7, scope: !4047)
!4186 = !DILocation(line: 1053, column: 12, scope: !4187)
!4187 = distinct !DILexicalBlock(scope: !4047, file: !3, line: 1053, column: 7)
!4188 = !DILocation(line: 0, scope: !4187)
!4189 = !DILocation(line: 1053, column: 19, scope: !4190)
!4190 = distinct !DILexicalBlock(scope: !4187, file: !3, line: 1053, column: 7)
!4191 = !DILocation(line: 0, scope: !4047)
!4192 = !DILocation(line: 1053, column: 7, scope: !4187)
!4193 = !DILocation(line: 1055, column: 13, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4190, file: !3, line: 1054, column: 2)
!4195 = !DILocation(line: 1055, column: 37, scope: !4194)
!4196 = !DILocation(line: 1055, column: 40, scope: !4194)
!4197 = !DILocation(line: 1056, column: 9, scope: !4194)
!4198 = !DILocation(line: 1056, column: 16, scope: !4194)
!4199 = !DILocation(line: 1056, column: 6, scope: !4194)
!4200 = !DILocation(line: 1057, column: 24, scope: !4194)
!4201 = !DILocation(line: 1057, column: 14, scope: !4194)
!4202 = !DILocation(line: 1055, column: 4, scope: !4194)
!4203 = !DILocation(line: 1058, column: 24, scope: !4194)
!4204 = !DILocation(line: 1058, column: 35, scope: !4194)
!4205 = !DILocation(line: 1058, column: 38, scope: !4194)
!4206 = !DILocation(line: 1058, column: 4, scope: !4194)
!4207 = !DILocation(line: 1059, column: 13, scope: !4194)
!4208 = !DILocation(line: 1059, column: 4, scope: !4194)
!4209 = !DILocation(line: 1053, column: 54, scope: !4190)
!4210 = !DILocation(line: 1053, column: 7, scope: !4190)
!4211 = distinct !{!4211, !4192, !4212}
!4212 = !DILocation(line: 1060, column: 2, scope: !4187)
!4213 = !DILocation(line: 1061, column: 5, scope: !4048)
!4214 = !DILocation(line: 1061, column: 5, scope: !4047)
!4215 = !DILocation(line: 1064, column: 17, scope: !3990)
!4216 = !DILocation(line: 1065, column: 3, scope: !3990)
!4217 = !DILocation(line: 955, column: 8, scope: !3990)
!4218 = !DILocation(line: 1065, column: 11, scope: !3990)
!4219 = !DILocation(line: 1067, column: 20, scope: !4051)
!4220 = !DILocation(line: 0, scope: !4051)
!4221 = !DILocation(line: 1068, column: 14, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4051, file: !3, line: 1068, column: 11)
!4223 = !DILocation(line: 1068, column: 18, scope: !4222)
!4224 = !DILocation(line: 1068, column: 11, scope: !4051)
!4225 = !DILocation(line: 1073, column: 7, scope: !4051)
!4226 = !DILocation(line: 1075, column: 7, scope: !4055)
!4227 = !DILocation(line: 0, scope: !4228)
!4228 = distinct !DILexicalBlock(scope: !4053, file: !3, line: 1089, column: 8)
!4229 = !DILocation(line: 0, scope: !4230)
!4230 = distinct !DILexicalBlock(scope: !4231, file: !3, line: 1094, column: 12)
!4231 = distinct !DILexicalBlock(scope: !4232, file: !3, line: 1093, column: 6)
!4232 = distinct !DILexicalBlock(scope: !4233, file: !3, line: 1092, column: 4)
!4233 = distinct !DILexicalBlock(scope: !4053, file: !3, line: 1092, column: 4)
!4234 = !DILocation(line: 1074, column: 22, scope: !4051)
!4235 = !DILocation(line: 1075, column: 7, scope: !4054)
!4236 = !DILocation(line: 1080, column: 14, scope: !4053)
!4237 = !DILocation(line: 1080, column: 52, scope: !4053)
!4238 = !DILocation(line: 0, scope: !4053)
!4239 = !DILocation(line: 1084, column: 8, scope: !4240)
!4240 = distinct !DILexicalBlock(scope: !4053, file: !3, line: 1084, column: 8)
!4241 = !DILocation(line: 1084, column: 23, scope: !4240)
!4242 = !DILocation(line: 1084, column: 8, scope: !4053)
!4243 = !DILocation(line: 1087, column: 12, scope: !4053)
!4244 = !DILocation(line: 1088, column: 13, scope: !4053)
!4245 = !DILocation(line: 1089, column: 21, scope: !4228)
!4246 = !DILocation(line: 1089, column: 15, scope: !4228)
!4247 = !DILocation(line: 1089, column: 8, scope: !4053)
!4248 = !DILocation(line: 1092, column: 4, scope: !4233)
!4249 = !DILocation(line: 0, scope: !4233)
!4250 = !DILocation(line: 1092, column: 16, scope: !4232)
!4251 = !DILocation(line: 1094, column: 12, scope: !4230)
!4252 = !DILocation(line: 1094, column: 17, scope: !4230)
!4253 = !DILocation(line: 1094, column: 26, scope: !4230)
!4254 = !DILocation(line: 1094, column: 20, scope: !4230)
!4255 = !DILocation(line: 1094, column: 12, scope: !4231)
!4256 = !DILocation(line: 1096, column: 27, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4230, file: !3, line: 1095, column: 3)
!4258 = !DILocation(line: 1096, column: 5, scope: !4257)
!4259 = !DILocation(line: 1097, column: 5, scope: !4257)
!4260 = !DILocation(line: 1098, column: 5, scope: !4257)
!4261 = !DILocation(line: 1092, column: 66, scope: !4232)
!4262 = !DILocation(line: 1092, column: 4, scope: !4232)
!4263 = distinct !{!4263, !4248, !4264}
!4264 = !DILocation(line: 1100, column: 6, scope: !4233)
!4265 = distinct !{!4265, !4226, !4266}
!4266 = !DILocation(line: 1101, column: 2, scope: !4055)
!4267 = !DILocation(line: 1103, column: 26, scope: !4061)
!4268 = !DILocation(line: 1103, column: 11, scope: !4051)
!4269 = !DILocation(line: 1108, column: 16, scope: !4060)
!4270 = !DILocation(line: 0, scope: !4060)
!4271 = !DILocation(line: 1111, column: 10, scope: !4060)
!4272 = !DILocation(line: 1112, column: 8, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1112, column: 8)
!4274 = !DILocation(line: 1112, column: 18, scope: !4273)
!4275 = !DILocation(line: 1112, column: 22, scope: !4273)
!4276 = !DILocation(line: 1112, column: 33, scope: !4273)
!4277 = !DILocation(line: 1112, column: 8, scope: !4060)
!4278 = !DILocation(line: 1114, column: 8, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 1113, column: 6)
!4280 = !DILocation(line: 1115, column: 28, scope: !4279)
!4281 = !DILocation(line: 1115, column: 44, scope: !4279)
!4282 = !DILocation(line: 1115, column: 8, scope: !4279)
!4283 = !DILocation(line: 1116, column: 6, scope: !4279)
!4284 = !DILocation(line: 1117, column: 29, scope: !4060)
!4285 = !DILocation(line: 1117, column: 13, scope: !4060)
!4286 = !DILocation(line: 1118, column: 4, scope: !4060)
!4287 = !DILocation(line: 1119, column: 37, scope: !4060)
!4288 = !DILocation(line: 1119, column: 48, scope: !4060)
!4289 = !DILocation(line: 1119, column: 4, scope: !4060)
!4290 = !DILocation(line: 1120, column: 4, scope: !4069)
!4291 = !DILocation(line: 1120, column: 4, scope: !4068)
!4292 = !DILocation(line: 1123, column: 14, scope: !4067)
!4293 = !DILocation(line: 1124, column: 12, scope: !4294)
!4294 = distinct !DILexicalBlock(scope: !4067, file: !3, line: 1124, column: 12)
!4295 = !DILocation(line: 1124, column: 22, scope: !4294)
!4296 = !DILocation(line: 1124, column: 26, scope: !4294)
!4297 = !DILocation(line: 1124, column: 37, scope: !4294)
!4298 = !DILocation(line: 1124, column: 12, scope: !4067)
!4299 = !DILocation(line: 1126, column: 5, scope: !4300)
!4300 = distinct !DILexicalBlock(scope: !4294, file: !3, line: 1125, column: 3)
!4301 = !DILocation(line: 1127, column: 25, scope: !4300)
!4302 = !DILocation(line: 1127, column: 41, scope: !4300)
!4303 = !DILocation(line: 1127, column: 5, scope: !4300)
!4304 = !DILocation(line: 1128, column: 3, scope: !4300)
!4305 = !DILocation(line: 1129, column: 34, scope: !4067)
!4306 = !DILocation(line: 1129, column: 41, scope: !4067)
!4307 = !DILocation(line: 1129, column: 52, scope: !4067)
!4308 = !DILocation(line: 1129, column: 8, scope: !4067)
!4309 = !DILocation(line: 1130, column: 46, scope: !4067)
!4310 = !DILocation(line: 1130, column: 55, scope: !4067)
!4311 = !DILocation(line: 1130, column: 14, scope: !4067)
!4312 = !DILocation(line: 0, scope: !4067)
!4313 = !DILocation(line: 1131, column: 18, scope: !4067)
!4314 = !DILocation(line: 1131, column: 16, scope: !4067)
!4315 = !DILocation(line: 1132, column: 13, scope: !4067)
!4316 = !DILocation(line: 1132, column: 18, scope: !4067)
!4317 = !DILocation(line: 1133, column: 18, scope: !4067)
!4318 = !DILocation(line: 1133, column: 16, scope: !4067)
!4319 = distinct !{!4319, !4290, !4320}
!4320 = !DILocation(line: 1134, column: 6, scope: !4069)
!4321 = !DILocation(line: 1137, column: 43, scope: !4060)
!4322 = !DILocation(line: 1137, column: 50, scope: !4060)
!4323 = !DILocation(line: 1137, column: 57, scope: !4060)
!4324 = !DILocation(line: 1137, column: 11, scope: !4060)
!4325 = !DILocation(line: 1138, column: 8, scope: !4326)
!4326 = distinct !DILexicalBlock(scope: !4060, file: !3, line: 1138, column: 8)
!4327 = !DILocation(line: 1138, column: 18, scope: !4326)
!4328 = !DILocation(line: 1138, column: 22, scope: !4326)
!4329 = !DILocation(line: 1138, column: 33, scope: !4326)
!4330 = !DILocation(line: 1138, column: 8, scope: !4060)
!4331 = !DILocation(line: 1140, column: 40, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4326, file: !3, line: 1139, column: 6)
!4333 = !DILocation(line: 1140, column: 47, scope: !4332)
!4334 = !DILocation(line: 1140, column: 37, scope: !4332)
!4335 = !DILocation(line: 1140, column: 8, scope: !4332)
!4336 = !DILocation(line: 1141, column: 28, scope: !4332)
!4337 = !DILocation(line: 1141, column: 42, scope: !4332)
!4338 = !DILocation(line: 1141, column: 8, scope: !4332)
!4339 = !DILocation(line: 1142, column: 17, scope: !4332)
!4340 = !DILocation(line: 1142, column: 8, scope: !4332)
!4341 = !DILocation(line: 1143, column: 6, scope: !4332)
!4342 = !DILocation(line: 1147, column: 14, scope: !4060)
!4343 = !DILocation(line: 1147, column: 12, scope: !4060)
!4344 = !DILocation(line: 1148, column: 16, scope: !4060)
!4345 = !DILocation(line: 1148, column: 9, scope: !4060)
!4346 = !DILocation(line: 1148, column: 14, scope: !4060)
!4347 = !DILocation(line: 1149, column: 4, scope: !4060)
!4348 = !DILocation(line: 1152, column: 2, scope: !4060)
!4349 = !DILocation(line: 1154, column: 7, scope: !4051)
!4350 = !DILocation(line: 1155, column: 5, scope: !3990)
!4351 = distinct !{!4351, !4216, !4350}
!4352 = !DILocation(line: 1157, column: 8, scope: !4353)
!4353 = distinct !DILexicalBlock(scope: !3990, file: !3, line: 1157, column: 3)
!4354 = !DILocation(line: 0, scope: !4353)
!4355 = !DILocation(line: 1157, column: 19, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4353, file: !3, line: 1157, column: 3)
!4357 = !DILocation(line: 1157, column: 17, scope: !4356)
!4358 = !DILocation(line: 1157, column: 3, scope: !4353)
!4359 = !DILocation(line: 1158, column: 5, scope: !4356)
!4360 = !DILocation(line: 1157, column: 55, scope: !4356)
!4361 = !DILocation(line: 1157, column: 3, scope: !4356)
!4362 = distinct !{!4362, !4358, !4363}
!4363 = !DILocation(line: 1158, column: 5, scope: !4353)
!4364 = !DILocation(line: 1159, column: 3, scope: !3990)
!4365 = !DILocation(line: 1160, column: 3, scope: !3990)
!4366 = !DILocation(line: 1161, column: 3, scope: !3990)
!4367 = !DILocation(line: 1162, column: 3, scope: !3990)
!4368 = !DILocation(line: 1164, column: 3, scope: !3990)
!4369 = !DILocation(line: 1165, column: 1, scope: !3990)
!4370 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_last", scope: !3, file: !3, line: 297, type: !4371, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4373)
!4371 = !DISubroutineType(types: !4372)
!4372 = !{!683, !2639}
!4373 = !{!4374}
!4374 = !DILocalVariable(name: "vec_", arg: 1, scope: !4370, file: !3, line: 297, type: !2639)
!4375 = !DILocation(line: 0, scope: !4370)
!4376 = !DILocation(line: 297, column: 1, scope: !4370)
!4377 = distinct !DISubprogram(name: "remove_visited_stmt_chain", scope: !3, file: !3, line: 1278, type: !4378, scopeLine: 1279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4380)
!4378 = !DISubroutineType(types: !4379)
!4379 = !{null, !689}
!4380 = !{!4381, !4382, !4383}
!4381 = !DILocalVariable(name: "var", arg: 1, scope: !4377, file: !3, line: 1278, type: !689)
!4382 = !DILocalVariable(name: "stmt", scope: !4377, file: !3, line: 1280, type: !1013)
!4383 = !DILocalVariable(name: "gsi", scope: !4377, file: !3, line: 1281, type: !2770)
!4384 = !DILocation(line: 0, scope: !4377)
!4385 = !DILocation(line: 1281, column: 3, scope: !4377)
!4386 = !DILocation(line: 0, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4377, file: !3, line: 1284, column: 5)
!4388 = !DILocation(line: 1283, column: 3, scope: !4377)
!4389 = !DILocation(line: 1285, column: 11, scope: !4390)
!4390 = distinct !DILexicalBlock(scope: !4387, file: !3, line: 1285, column: 11)
!4391 = !DILocation(line: 1285, column: 27, scope: !4390)
!4392 = !DILocation(line: 1285, column: 39, scope: !4390)
!4393 = !DILocation(line: 1285, column: 43, scope: !4390)
!4394 = !DILocation(line: 1285, column: 11, scope: !4387)
!4395 = !DILocation(line: 1287, column: 14, scope: !4387)
!4396 = !DILocation(line: 1288, column: 12, scope: !4397)
!4397 = distinct !DILexicalBlock(scope: !4387, file: !3, line: 1288, column: 11)
!4398 = !DILocation(line: 1289, column: 4, scope: !4397)
!4399 = !DILocation(line: 1289, column: 8, scope: !4397)
!4400 = !DILocation(line: 1288, column: 11, scope: !4387)
!4401 = !DILocation(line: 1291, column: 13, scope: !4387)
!4402 = !DILocation(line: 1292, column: 13, scope: !4387)
!4403 = !DILocation(line: 1293, column: 7, scope: !4387)
!4404 = !DILocation(line: 1294, column: 7, scope: !4387)
!4405 = distinct !{!4405, !4388, !4406}
!4406 = !DILocation(line: 1295, column: 5, scope: !4377)
!4407 = !DILocation(line: 1296, column: 1, scope: !4377)
!4408 = distinct !DISubprogram(name: "rewrite_expr_tree", scope: !3, file: !3, line: 1303, type: !4409, scopeLine: 1305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4411)
!4409 = !DISubroutineType(types: !4410)
!4410 = !{null, !1013, !7, !2057, !675}
!4411 = !{!4412, !4413, !4414, !4415, !4416, !4417, !4418, !4419, !4422, !4423, !4424, !4427, !4430, !4433, !4434, !4439, !4440, !4441, !4442}
!4412 = !DILocalVariable(name: "stmt", arg: 1, scope: !4408, file: !3, line: 1303, type: !1013)
!4413 = !DILocalVariable(name: "opindex", arg: 2, scope: !4408, file: !3, line: 1303, type: !7)
!4414 = !DILocalVariable(name: "ops", arg: 3, scope: !4408, file: !3, line: 1304, type: !2057)
!4415 = !DILocalVariable(name: "moved", arg: 4, scope: !4408, file: !3, line: 1304, type: !675)
!4416 = !DILocalVariable(name: "rhs1", scope: !4408, file: !3, line: 1306, type: !689)
!4417 = !DILocalVariable(name: "rhs2", scope: !4408, file: !3, line: 1307, type: !689)
!4418 = !DILocalVariable(name: "oe", scope: !4408, file: !3, line: 1308, type: !683)
!4419 = !DILocalVariable(name: "oe1", scope: !4420, file: !3, line: 1326, type: !683)
!4420 = distinct !DILexicalBlock(scope: !4421, file: !3, line: 1325, column: 5)
!4421 = distinct !DILexicalBlock(scope: !4408, file: !3, line: 1324, column: 7)
!4422 = !DILocalVariable(name: "oe2", scope: !4420, file: !3, line: 1326, type: !683)
!4423 = !DILocalVariable(name: "oe3", scope: !4420, file: !3, line: 1326, type: !683)
!4424 = !DILocalVariable(name: "temp", scope: !4425, file: !3, line: 1338, type: !685)
!4425 = distinct !DILexicalBlock(scope: !4426, file: !3, line: 1337, column: 2)
!4426 = distinct !DILexicalBlock(scope: !4420, file: !3, line: 1332, column: 11)
!4427 = !DILocalVariable(name: "temp", scope: !4428, file: !3, line: 1350, type: !685)
!4428 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 1349, column: 2)
!4429 = distinct !DILexicalBlock(scope: !4426, file: !3, line: 1344, column: 16)
!4430 = !DILocalVariable(name: "oe1", scope: !4431, file: !3, line: 1365, type: !683)
!4431 = distinct !DILexicalBlock(scope: !4432, file: !3, line: 1364, column: 5)
!4432 = distinct !DILexicalBlock(scope: !4408, file: !3, line: 1363, column: 7)
!4433 = !DILocalVariable(name: "oe2", scope: !4431, file: !3, line: 1365, type: !683)
!4434 = !DILocalVariable(name: "gsinow", scope: !4435, file: !3, line: 1404, type: !2770)
!4435 = distinct !DILexicalBlock(scope: !4436, file: !3, line: 1403, column: 2)
!4436 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 1402, column: 11)
!4437 = distinct !DILexicalBlock(scope: !4438, file: !3, line: 1401, column: 5)
!4438 = distinct !DILexicalBlock(scope: !4408, file: !3, line: 1400, column: 7)
!4439 = !DILocalVariable(name: "gsirhs1", scope: !4435, file: !3, line: 1404, type: !2770)
!4440 = !DILocalVariable(name: "stmt1", scope: !4435, file: !3, line: 1405, type: !1013)
!4441 = !DILocalVariable(name: "stmt2", scope: !4435, file: !3, line: 1405, type: !1013)
!4442 = !DILocalVariable(name: "count", scope: !4435, file: !3, line: 1406, type: !7)
!4443 = !DILocation(line: 0, scope: !4408)
!4444 = !DILocation(line: 1306, column: 15, scope: !4408)
!4445 = !DILocation(line: 1307, column: 15, scope: !4408)
!4446 = !DILocation(line: 1324, column: 15, scope: !4421)
!4447 = !DILocation(line: 1324, column: 22, scope: !4421)
!4448 = !DILocation(line: 1324, column: 19, scope: !4421)
!4449 = !DILocation(line: 1324, column: 7, scope: !4408)
!4450 = !DILocation(line: 1363, column: 15, scope: !4432)
!4451 = !DILocation(line: 1328, column: 13, scope: !4420)
!4452 = !DILocation(line: 0, scope: !4420)
!4453 = !DILocation(line: 1329, column: 13, scope: !4420)
!4454 = !DILocation(line: 1330, column: 13, scope: !4420)
!4455 = !DILocation(line: 1332, column: 17, scope: !4426)
!4456 = !DILocation(line: 1332, column: 30, scope: !4426)
!4457 = !DILocation(line: 1332, column: 22, scope: !4426)
!4458 = !DILocation(line: 1333, column: 5, scope: !4426)
!4459 = !DILocation(line: 1333, column: 26, scope: !4426)
!4460 = !DILocation(line: 1333, column: 18, scope: !4426)
!4461 = !DILocation(line: 1334, column: 4, scope: !4426)
!4462 = !DILocation(line: 1334, column: 36, scope: !4426)
!4463 = !DILocation(line: 1334, column: 8, scope: !4426)
!4464 = !DILocation(line: 1335, column: 8, scope: !4426)
!4465 = !DILocation(line: 1335, column: 40, scope: !4426)
!4466 = !DILocation(line: 1335, column: 12, scope: !4426)
!4467 = !DILocation(line: 1336, column: 8, scope: !4426)
!4468 = !DILocation(line: 1336, column: 40, scope: !4426)
!4469 = !DILocation(line: 1336, column: 12, scope: !4426)
!4470 = !DILocation(line: 1332, column: 11, scope: !4420)
!4471 = !DILocation(line: 1338, column: 4, scope: !4425)
!4472 = !DILocation(line: 1338, column: 32, scope: !4425)
!4473 = !DILocation(line: 1339, column: 19, scope: !4425)
!4474 = !DILocation(line: 1339, column: 9, scope: !4425)
!4475 = !DILocation(line: 1339, column: 12, scope: !4425)
!4476 = !DILocation(line: 1340, column: 21, scope: !4425)
!4477 = !DILocation(line: 1340, column: 9, scope: !4425)
!4478 = !DILocation(line: 1340, column: 14, scope: !4425)
!4479 = !DILocation(line: 1341, column: 19, scope: !4425)
!4480 = !DILocation(line: 1341, column: 12, scope: !4425)
!4481 = !DILocation(line: 1342, column: 20, scope: !4425)
!4482 = !DILocation(line: 1342, column: 13, scope: !4425)
!4483 = !DILocation(line: 1343, column: 2, scope: !4426)
!4484 = !DILocation(line: 1343, column: 2, scope: !4425)
!4485 = !DILocation(line: 1344, column: 22, scope: !4429)
!4486 = !DILocation(line: 1344, column: 35, scope: !4429)
!4487 = !DILocation(line: 1344, column: 27, scope: !4429)
!4488 = !DILocation(line: 1345, column: 3, scope: !4429)
!4489 = !DILocation(line: 1345, column: 11, scope: !4429)
!4490 = !DILocation(line: 1345, column: 16, scope: !4429)
!4491 = !DILocation(line: 1346, column: 9, scope: !4429)
!4492 = !DILocation(line: 1346, column: 41, scope: !4429)
!4493 = !DILocation(line: 1346, column: 13, scope: !4429)
!4494 = !DILocation(line: 1347, column: 6, scope: !4429)
!4495 = !DILocation(line: 1347, column: 38, scope: !4429)
!4496 = !DILocation(line: 1347, column: 10, scope: !4429)
!4497 = !DILocation(line: 1348, column: 6, scope: !4429)
!4498 = !DILocation(line: 1348, column: 38, scope: !4429)
!4499 = !DILocation(line: 1348, column: 10, scope: !4429)
!4500 = !DILocation(line: 1344, column: 16, scope: !4426)
!4501 = !DILocation(line: 1350, column: 4, scope: !4428)
!4502 = !DILocation(line: 1350, column: 32, scope: !4428)
!4503 = !DILocation(line: 1351, column: 19, scope: !4428)
!4504 = !DILocation(line: 1351, column: 9, scope: !4428)
!4505 = !DILocation(line: 1351, column: 12, scope: !4428)
!4506 = !DILocation(line: 1352, column: 21, scope: !4428)
!4507 = !DILocation(line: 1352, column: 14, scope: !4428)
!4508 = !DILocation(line: 1353, column: 19, scope: !4428)
!4509 = !DILocation(line: 1353, column: 12, scope: !4428)
!4510 = !DILocation(line: 1354, column: 20, scope: !4428)
!4511 = !DILocation(line: 1354, column: 13, scope: !4428)
!4512 = !DILocation(line: 1355, column: 2, scope: !4429)
!4513 = !DILocation(line: 1355, column: 2, scope: !4428)
!4514 = !DILocation(line: 1363, column: 22, scope: !4432)
!4515 = !DILocation(line: 1363, column: 19, scope: !4432)
!4516 = !DILocation(line: 1363, column: 7, scope: !4408)
!4517 = !DILocation(line: 1367, column: 13, scope: !4431)
!4518 = !DILocation(line: 0, scope: !4431)
!4519 = !DILocation(line: 1368, column: 13, scope: !4431)
!4520 = !DILocation(line: 1370, column: 24, scope: !4521)
!4521 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 1370, column: 11)
!4522 = !DILocation(line: 1370, column: 16, scope: !4521)
!4523 = !DILocation(line: 1370, column: 27, scope: !4521)
!4524 = !DILocation(line: 1370, column: 43, scope: !4521)
!4525 = !DILocation(line: 1370, column: 35, scope: !4521)
!4526 = !DILocation(line: 1370, column: 11, scope: !4431)
!4527 = !DILocation(line: 1372, column: 8, scope: !4528)
!4528 = distinct !DILexicalBlock(scope: !4529, file: !3, line: 1372, column: 8)
!4529 = distinct !DILexicalBlock(scope: !4521, file: !3, line: 1371, column: 2)
!4530 = !DILocation(line: 1372, column: 18, scope: !4528)
!4531 = !DILocation(line: 1372, column: 22, scope: !4528)
!4532 = !DILocation(line: 1372, column: 33, scope: !4528)
!4533 = !DILocation(line: 1372, column: 8, scope: !4529)
!4534 = !DILocation(line: 1374, column: 8, scope: !4535)
!4535 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 1373, column: 6)
!4536 = !DILocation(line: 1375, column: 27, scope: !4535)
!4537 = !DILocation(line: 1375, column: 8, scope: !4535)
!4538 = !DILocation(line: 1378, column: 39, scope: !4529)
!4539 = !DILocation(line: 1376, column: 6, scope: !4535)
!4540 = !DILocation(line: 1378, column: 4, scope: !4529)
!4541 = !DILocation(line: 1379, column: 39, scope: !4529)
!4542 = !DILocation(line: 1379, column: 4, scope: !4529)
!4543 = !DILocation(line: 1380, column: 4, scope: !4529)
!4544 = !DILocation(line: 1381, column: 21, scope: !4545)
!4545 = distinct !DILexicalBlock(scope: !4529, file: !3, line: 1381, column: 8)
!4546 = !DILocation(line: 1381, column: 13, scope: !4545)
!4547 = !DILocation(line: 1381, column: 24, scope: !4545)
!4548 = !DILocation(line: 1381, column: 40, scope: !4545)
!4549 = !DILocation(line: 1381, column: 32, scope: !4545)
!4550 = !DILocation(line: 1381, column: 8, scope: !4529)
!4551 = !DILocation(line: 1382, column: 6, scope: !4545)
!4552 = !DILocation(line: 1384, column: 8, scope: !4553)
!4553 = distinct !DILexicalBlock(scope: !4529, file: !3, line: 1384, column: 8)
!4554 = !DILocation(line: 1384, column: 18, scope: !4553)
!4555 = !DILocation(line: 1384, column: 22, scope: !4553)
!4556 = !DILocation(line: 1384, column: 33, scope: !4553)
!4557 = !DILocation(line: 1384, column: 8, scope: !4529)
!4558 = !DILocation(line: 1386, column: 8, scope: !4559)
!4559 = distinct !DILexicalBlock(scope: !4553, file: !3, line: 1385, column: 6)
!4560 = !DILocation(line: 1387, column: 27, scope: !4559)
!4561 = !DILocation(line: 1387, column: 8, scope: !4559)
!4562 = !DILocation(line: 1388, column: 6, scope: !4559)
!4563 = !DILocation(line: 1395, column: 3, scope: !4408)
!4564 = !DILocation(line: 1398, column: 8, scope: !4408)
!4565 = !DILocation(line: 1400, column: 11, scope: !4438)
!4566 = !DILocation(line: 1400, column: 14, scope: !4438)
!4567 = !DILocation(line: 1400, column: 7, scope: !4408)
!4568 = !DILocation(line: 1402, column: 12, scope: !4436)
!4569 = !DILocation(line: 1402, column: 11, scope: !4437)
!4570 = !DILocation(line: 1404, column: 4, scope: !4435)
!4571 = !DILocation(line: 0, scope: !4435)
!4572 = !DILocation(line: 1408, column: 13, scope: !4435)
!4573 = !DILocation(line: 1409, column: 12, scope: !4435)
!4574 = !DILocation(line: 1409, column: 46, scope: !4435)
!4575 = !DILocation(line: 1409, column: 56, scope: !4435)
!4576 = !DILocation(line: 0, scope: !4577)
!4577 = distinct !DILexicalBlock(scope: !4435, file: !3, line: 1411, column: 6)
!4578 = !DILocation(line: 1410, column: 4, scope: !4435)
!4579 = !DILocation(line: 1410, column: 19, scope: !4435)
!4580 = !DILocation(line: 1410, column: 16, scope: !4435)
!4581 = !DILocation(line: 1412, column: 16, scope: !4577)
!4582 = !DILocation(line: 1413, column: 18, scope: !4577)
!4583 = !DILocation(line: 1414, column: 8, scope: !4577)
!4584 = !DILocation(line: 1415, column: 8, scope: !4577)
!4585 = distinct !{!4585, !4578, !4586}
!4586 = !DILocation(line: 1417, column: 6, scope: !4435)
!4587 = !DILocation(line: 1419, column: 2, scope: !4436)
!4588 = !DILocation(line: 1419, column: 2, scope: !4435)
!4589 = !DILocation(line: 1421, column: 11, scope: !4590)
!4590 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 1421, column: 11)
!4591 = !DILocation(line: 1421, column: 21, scope: !4590)
!4592 = !DILocation(line: 1421, column: 25, scope: !4590)
!4593 = !DILocation(line: 1421, column: 36, scope: !4590)
!4594 = !DILocation(line: 1421, column: 11, scope: !4437)
!4595 = !DILocation(line: 1423, column: 4, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4590, file: !3, line: 1422, column: 2)
!4597 = !DILocation(line: 1424, column: 23, scope: !4596)
!4598 = !DILocation(line: 1424, column: 4, scope: !4596)
!4599 = !DILocation(line: 1425, column: 2, scope: !4596)
!4600 = !DILocation(line: 1427, column: 41, scope: !4437)
!4601 = !DILocation(line: 1427, column: 7, scope: !4437)
!4602 = !DILocation(line: 1428, column: 7, scope: !4437)
!4603 = !DILocation(line: 1430, column: 11, scope: !4604)
!4604 = distinct !DILexicalBlock(scope: !4437, file: !3, line: 1430, column: 11)
!4605 = !DILocation(line: 1430, column: 21, scope: !4604)
!4606 = !DILocation(line: 1430, column: 25, scope: !4604)
!4607 = !DILocation(line: 1430, column: 36, scope: !4604)
!4608 = !DILocation(line: 1430, column: 11, scope: !4437)
!4609 = !DILocation(line: 1432, column: 4, scope: !4610)
!4610 = distinct !DILexicalBlock(scope: !4604, file: !3, line: 1431, column: 2)
!4611 = !DILocation(line: 1433, column: 23, scope: !4610)
!4612 = !DILocation(line: 1433, column: 4, scope: !4610)
!4613 = !DILocation(line: 1434, column: 2, scope: !4610)
!4614 = !DILocation(line: 1438, column: 22, scope: !4408)
!4615 = !DILocation(line: 1438, column: 56, scope: !4408)
!4616 = !DILocation(line: 1438, column: 3, scope: !4408)
!4617 = !DILocation(line: 1439, column: 1, scope: !4408)
!4618 = distinct !DISubprogram(name: "VEC_operand_entry_t_heap_free", scope: !3, file: !3, line: 298, type: !4619, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4621)
!4619 = !DISubroutineType(types: !4620)
!4620 = !{null, !2071}
!4621 = !{!4622}
!4622 = !DILocalVariable(name: "vec_", arg: 1, scope: !4618, file: !3, line: 298, type: !2071)
!4623 = !DILocation(line: 0, scope: !4618)
!4624 = !DILocation(line: 298, column: 1, scope: !4625)
!4625 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 298, column: 1)
!4626 = !DILocation(line: 298, column: 1, scope: !4618)
!4627 = distinct !DISubprogram(name: "gsi_prev", scope: !574, file: !574, line: 4493, type: !3269, scopeLine: 4494, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4628)
!4628 = !{!4629}
!4629 = !DILocalVariable(name: "i", arg: 1, scope: !4627, file: !574, line: 4493, type: !3244)
!4630 = !DILocation(line: 0, scope: !4627)
!4631 = !DILocation(line: 4495, column: 15, scope: !4627)
!4632 = !DILocation(line: 4495, column: 20, scope: !4627)
!4633 = !DILocation(line: 4495, column: 10, scope: !4627)
!4634 = !DILocation(line: 4496, column: 1, scope: !4627)
!4635 = distinct !DISubprogram(name: "gimple_seq_last", scope: !574, file: !574, line: 178, type: !3296, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4636)
!4636 = !{!4637}
!4637 = !DILocalVariable(name: "s", arg: 1, scope: !4635, file: !574, line: 178, type: !3298)
!4638 = !DILocation(line: 0, scope: !4635)
!4639 = !DILocation(line: 180, column: 10, scope: !4635)
!4640 = !DILocation(line: 180, column: 17, scope: !4635)
!4641 = !DILocation(line: 180, column: 3, scope: !4635)
!4642 = distinct !DISubprogram(name: "add_to_ops_vec", scope: !3, file: !3, line: 346, type: !4643, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4645)
!4643 = !DISubroutineType(types: !4644)
!4644 = !{null, !2071, !689}
!4645 = !{!4646, !4647, !4648}
!4646 = !DILocalVariable(name: "ops", arg: 1, scope: !4642, file: !3, line: 346, type: !2071)
!4647 = !DILocalVariable(name: "op", arg: 2, scope: !4642, file: !3, line: 346, type: !689)
!4648 = !DILocalVariable(name: "oe", scope: !4642, file: !3, line: 348, type: !683)
!4649 = !DILocation(line: 0, scope: !4642)
!4650 = !DILocation(line: 348, column: 54, scope: !4642)
!4651 = !DILocation(line: 348, column: 42, scope: !4642)
!4652 = !DILocation(line: 348, column: 24, scope: !4642)
!4653 = !DILocation(line: 350, column: 7, scope: !4642)
!4654 = !DILocation(line: 350, column: 10, scope: !4642)
!4655 = !DILocation(line: 351, column: 14, scope: !4642)
!4656 = !DILocation(line: 351, column: 7, scope: !4642)
!4657 = !DILocation(line: 351, column: 12, scope: !4642)
!4658 = !DILocation(line: 352, column: 3, scope: !4642)
!4659 = !DILocation(line: 353, column: 1, scope: !4642)
!4660 = distinct !DISubprogram(name: "gimple_assign_rhs1_ptr", scope: !574, file: !574, line: 1738, type: !4661, scopeLine: 1739, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4663)
!4661 = !DISubroutineType(types: !4662)
!4662 = !{!1047, !3147}
!4663 = !{!4664}
!4664 = !DILocalVariable(name: "gs", arg: 1, scope: !4660, file: !574, line: 1738, type: !3147)
!4665 = !DILocation(line: 0, scope: !4660)
!4666 = !DILocation(line: 1741, column: 10, scope: !4660)
!4667 = !DILocation(line: 1741, column: 3, scope: !4660)
!4668 = distinct !DISubprogram(name: "gimple_assign_rhs2_ptr", scope: !574, file: !574, line: 1774, type: !4661, scopeLine: 1775, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4669)
!4669 = !{!4670}
!4670 = !DILocalVariable(name: "gs", arg: 1, scope: !4668, file: !574, line: 1774, type: !3147)
!4671 = !DILocation(line: 0, scope: !4668)
!4672 = !DILocation(line: 1777, column: 10, scope: !4668)
!4673 = !DILocation(line: 1777, column: 3, scope: !4668)
!4674 = distinct !DISubprogram(name: "linearize_expr", scope: !3, file: !3, line: 1446, type: !3608, scopeLine: 1447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4675)
!4675 = !{!4676, !4677, !4678, !4679, !4680, !4681, !4682, !4683}
!4676 = !DILocalVariable(name: "stmt", arg: 1, scope: !4674, file: !3, line: 1446, type: !1013)
!4677 = !DILocalVariable(name: "gsinow", scope: !4674, file: !3, line: 1448, type: !2770)
!4678 = !DILocalVariable(name: "gsirhs", scope: !4674, file: !3, line: 1448, type: !2770)
!4679 = !DILocalVariable(name: "binlhs", scope: !4674, file: !3, line: 1449, type: !1013)
!4680 = !DILocalVariable(name: "binrhs", scope: !4674, file: !3, line: 1450, type: !1013)
!4681 = !DILocalVariable(name: "rhscode", scope: !4674, file: !3, line: 1451, type: !134)
!4682 = !DILocalVariable(name: "newbinrhs", scope: !4674, file: !3, line: 1452, type: !1013)
!4683 = !DILocalVariable(name: "loop", scope: !4674, file: !3, line: 1453, type: !1228)
!4684 = !DILocation(line: 0, scope: !4674)
!4685 = !DILocation(line: 1448, column: 3, scope: !4674)
!4686 = !DILocation(line: 1449, column: 19, scope: !4674)
!4687 = !DILocation(line: 1450, column: 19, scope: !4674)
!4688 = !DILocation(line: 1451, column: 28, scope: !4674)
!4689 = !DILocation(line: 1453, column: 23, scope: !4674)
!4690 = !DILocation(line: 1455, column: 3, scope: !4674)
!4691 = !DILocation(line: 1458, column: 12, scope: !4674)
!4692 = !DILocation(line: 1459, column: 12, scope: !4674)
!4693 = !DILocation(line: 1460, column: 3, scope: !4674)
!4694 = !DILocation(line: 1462, column: 33, scope: !4674)
!4695 = !DILocation(line: 1462, column: 3, scope: !4674)
!4696 = !DILocation(line: 1463, column: 35, scope: !4674)
!4697 = !DILocation(line: 1463, column: 3, scope: !4674)
!4698 = !DILocation(line: 1464, column: 33, scope: !4674)
!4699 = !DILocation(line: 1464, column: 3, scope: !4674)
!4700 = !DILocation(line: 1466, column: 7, scope: !4701)
!4701 = distinct !DILexicalBlock(scope: !4674, file: !3, line: 1466, column: 7)
!4702 = !DILocation(line: 1466, column: 45, scope: !4701)
!4703 = !DILocation(line: 1466, column: 7, scope: !4674)
!4704 = !DILocation(line: 1467, column: 17, scope: !4701)
!4705 = !DILocation(line: 1467, column: 5, scope: !4701)
!4706 = !DILocation(line: 1469, column: 7, scope: !4707)
!4707 = distinct !DILexicalBlock(scope: !4674, file: !3, line: 1469, column: 7)
!4708 = !DILocation(line: 1469, column: 17, scope: !4707)
!4709 = !DILocation(line: 1469, column: 21, scope: !4707)
!4710 = !DILocation(line: 1469, column: 32, scope: !4707)
!4711 = !DILocation(line: 1469, column: 7, scope: !4674)
!4712 = !DILocation(line: 1471, column: 7, scope: !4713)
!4713 = distinct !DILexicalBlock(scope: !4707, file: !3, line: 1470, column: 5)
!4714 = !DILocation(line: 1472, column: 26, scope: !4713)
!4715 = !DILocation(line: 1472, column: 7, scope: !4713)
!4716 = !DILocation(line: 1473, column: 5, scope: !4713)
!4717 = !DILocation(line: 1475, column: 31, scope: !4674)
!4718 = !DILocation(line: 1476, column: 3, scope: !4674)
!4719 = !DILocation(line: 1477, column: 3, scope: !4674)
!4720 = !DILocation(line: 1478, column: 3, scope: !4674)
!4721 = !DILocation(line: 1480, column: 3, scope: !4674)
!4722 = !DILocation(line: 1481, column: 3, scope: !4674)
!4723 = !DILocation(line: 1482, column: 3, scope: !4674)
!4724 = !DILocation(line: 1485, column: 7, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4674, file: !3, line: 1485, column: 7)
!4726 = !DILocation(line: 1485, column: 17, scope: !4725)
!4727 = !DILocation(line: 1485, column: 20, scope: !4725)
!4728 = !DILocation(line: 1485, column: 7, scope: !4674)
!4729 = !DILocation(line: 1488, column: 5, scope: !4725)
!4730 = !DILocation(line: 1489, column: 1, scope: !4674)
!4731 = distinct !DISubprogram(name: "get_rank", scope: !3, file: !3, line: 214, type: !4732, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4734)
!4732 = !DISubroutineType(types: !4733)
!4733 = !{!745, !689}
!4734 = !{!4735, !4736, !4739, !4740, !4741, !4742, !4743}
!4735 = !DILocalVariable(name: "e", arg: 1, scope: !4731, file: !3, line: 214, type: !689)
!4736 = !DILocalVariable(name: "stmt", scope: !4737, file: !3, line: 233, type: !1013)
!4737 = distinct !DILexicalBlock(scope: !4738, file: !3, line: 232, column: 5)
!4738 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 231, column: 7)
!4739 = !DILocalVariable(name: "rank", scope: !4737, file: !3, line: 234, type: !745)
!4740 = !DILocalVariable(name: "maxrank", scope: !4737, file: !3, line: 234, type: !745)
!4741 = !DILocalVariable(name: "i", scope: !4737, file: !3, line: 235, type: !676)
!4742 = !DILocalVariable(name: "n", scope: !4737, file: !3, line: 235, type: !676)
!4743 = !DILocalVariable(name: "rhs", scope: !4744, file: !3, line: 260, type: !689)
!4744 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 259, column: 2)
!4745 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 258, column: 11)
!4746 = !DILocation(line: 0, scope: !4731)
!4747 = !DILocation(line: 217, column: 7, scope: !4748)
!4748 = distinct !DILexicalBlock(scope: !4731, file: !3, line: 217, column: 7)
!4749 = !DILocation(line: 217, column: 7, scope: !4731)
!4750 = !DILocation(line: 231, column: 7, scope: !4738)
!4751 = !DILocation(line: 231, column: 21, scope: !4738)
!4752 = !DILocation(line: 231, column: 7, scope: !4731)
!4753 = !DILocation(line: 237, column: 11, scope: !4754)
!4754 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 237, column: 11)
!4755 = !DILocation(line: 237, column: 40, scope: !4754)
!4756 = !DILocation(line: 238, column: 4, scope: !4754)
!4757 = !DILocation(line: 238, column: 7, scope: !4754)
!4758 = !DILocation(line: 237, column: 11, scope: !4737)
!4759 = !DILocation(line: 239, column: 9, scope: !4754)
!4760 = !DILocation(line: 239, column: 2, scope: !4754)
!4761 = !DILocation(line: 241, column: 14, scope: !4737)
!4762 = !DILocation(line: 0, scope: !4737)
!4763 = !DILocation(line: 242, column: 11, scope: !4764)
!4764 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 242, column: 11)
!4765 = !DILocation(line: 242, column: 28, scope: !4764)
!4766 = !DILocation(line: 242, column: 11, scope: !4737)
!4767 = !DILocation(line: 245, column: 12, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 245, column: 11)
!4769 = !DILocation(line: 246, column: 4, scope: !4768)
!4770 = !DILocation(line: 246, column: 7, scope: !4768)
!4771 = !DILocation(line: 245, column: 11, scope: !4737)
!4772 = !DILocation(line: 247, column: 9, scope: !4768)
!4773 = !DILocation(line: 247, column: 17, scope: !4768)
!4774 = !DILocation(line: 247, column: 35, scope: !4768)
!4775 = !DILocation(line: 247, column: 2, scope: !4768)
!4776 = !DILocation(line: 250, column: 14, scope: !4737)
!4777 = !DILocation(line: 251, column: 16, scope: !4778)
!4778 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 251, column: 11)
!4779 = !DILocation(line: 251, column: 11, scope: !4737)
!4780 = !DILocation(line: 257, column: 17, scope: !4737)
!4781 = !DILocation(line: 257, column: 25, scope: !4737)
!4782 = !DILocation(line: 257, column: 42, scope: !4737)
!4783 = !DILocation(line: 258, column: 11, scope: !4745)
!4784 = !DILocation(line: 258, column: 11, scope: !4737)
!4785 = !DILocation(line: 260, column: 15, scope: !4744)
!4786 = !DILocation(line: 0, scope: !4744)
!4787 = !DILocation(line: 261, column: 8, scope: !4744)
!4788 = !DILocation(line: 262, column: 10, scope: !4789)
!4789 = distinct !DILexicalBlock(scope: !4744, file: !3, line: 262, column: 8)
!4790 = !DILocation(line: 262, column: 8, scope: !4744)
!4791 = !DILocation(line: 0, scope: !4792)
!4792 = distinct !DILexicalBlock(scope: !4793, file: !3, line: 266, column: 8)
!4793 = distinct !DILexicalBlock(scope: !4794, file: !3, line: 266, column: 8)
!4794 = distinct !DILexicalBlock(scope: !4789, file: !3, line: 265, column: 6)
!4795 = !DILocation(line: 266, column: 8, scope: !4793)
!4796 = !DILocation(line: 263, column: 13, scope: !4789)
!4797 = !DILocation(line: 0, scope: !4793)
!4798 = !DILocation(line: 267, column: 8, scope: !4792)
!4799 = !DILocation(line: 267, column: 12, scope: !4792)
!4800 = !DILocation(line: 267, column: 15, scope: !4792)
!4801 = !DILocation(line: 267, column: 45, scope: !4792)
!4802 = !DILocation(line: 267, column: 37, scope: !4792)
!4803 = !DILocation(line: 268, column: 10, scope: !4792)
!4804 = !DILocation(line: 267, column: 58, scope: !4792)
!4805 = !DILocation(line: 266, column: 8, scope: !4792)
!4806 = distinct !{!4806, !4795, !4807}
!4807 = !DILocation(line: 268, column: 10, scope: !4793)
!4808 = !DILocation(line: 273, column: 8, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4745, file: !3, line: 272, column: 2)
!4810 = !DILocation(line: 274, column: 9, scope: !4811)
!4811 = distinct !DILexicalBlock(scope: !4809, file: !3, line: 274, column: 4)
!4812 = !DILocation(line: 0, scope: !4811)
!4813 = !DILocation(line: 274, column: 18, scope: !4814)
!4814 = distinct !DILexicalBlock(scope: !4811, file: !3, line: 274, column: 4)
!4815 = !DILocation(line: 274, column: 30, scope: !4814)
!4816 = !DILocation(line: 274, column: 22, scope: !4814)
!4817 = !DILocation(line: 274, column: 4, scope: !4811)
!4818 = !DILocation(line: 276, column: 8, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4814, file: !3, line: 275, column: 6)
!4820 = !DILocation(line: 277, column: 15, scope: !4819)
!4821 = !DILocation(line: 274, column: 43, scope: !4814)
!4822 = !DILocation(line: 274, column: 4, scope: !4814)
!4823 = distinct !{!4823, !4817, !4824}
!4824 = !DILocation(line: 278, column: 6, scope: !4811)
!4825 = !DILocation(line: 281, column: 11, scope: !4826)
!4826 = distinct !DILexicalBlock(scope: !4737, file: !3, line: 281, column: 11)
!4827 = !DILocation(line: 281, column: 21, scope: !4826)
!4828 = !DILocation(line: 281, column: 25, scope: !4826)
!4829 = !DILocation(line: 281, column: 36, scope: !4826)
!4830 = !DILocation(line: 281, column: 11, scope: !4737)
!4831 = !DILocation(line: 283, column: 4, scope: !4832)
!4832 = distinct !DILexicalBlock(scope: !4826, file: !3, line: 282, column: 2)
!4833 = !DILocation(line: 284, column: 24, scope: !4832)
!4834 = !DILocation(line: 284, column: 4, scope: !4832)
!4835 = !DILocation(line: 285, column: 13, scope: !4832)
!4836 = !DILocation(line: 285, column: 43, scope: !4832)
!4837 = !DILocation(line: 285, column: 4, scope: !4832)
!4838 = !DILocation(line: 286, column: 2, scope: !4832)
!4839 = !DILocation(line: 289, column: 37, scope: !4737)
!4840 = !DILocation(line: 289, column: 7, scope: !4737)
!4841 = !DILocation(line: 290, column: 7, scope: !4737)
!4842 = !DILocation(line: 295, column: 1, scope: !4731)
!4843 = distinct !DISubprogram(name: "VEC_operand_entry_t_heap_safe_push", scope: !3, file: !3, line: 298, type: !4844, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4846)
!4844 = !DISubroutineType(types: !4845)
!4845 = !{!2641, !2071, !683}
!4846 = !{!4847, !4848}
!4847 = !DILocalVariable(name: "vec_", arg: 1, scope: !4843, file: !3, line: 298, type: !2071)
!4848 = !DILocalVariable(name: "obj_", arg: 2, scope: !4843, file: !3, line: 298, type: !683)
!4849 = !DILocation(line: 0, scope: !4843)
!4850 = !DILocation(line: 298, column: 1, scope: !4843)
!4851 = distinct !DISubprogram(name: "find_operand_rank", scope: !3, file: !3, line: 193, type: !4732, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4852)
!4852 = !{!4853, !4854}
!4853 = !DILocalVariable(name: "e", arg: 1, scope: !4851, file: !3, line: 193, type: !689)
!4854 = !DILocalVariable(name: "slot", scope: !4851, file: !3, line: 195, type: !1521)
!4855 = !DILocation(line: 0, scope: !4851)
!4856 = !DILocation(line: 195, column: 39, scope: !4851)
!4857 = !DILocation(line: 195, column: 53, scope: !4851)
!4858 = !DILocation(line: 195, column: 17, scope: !4851)
!4859 = !DILocation(line: 196, column: 10, scope: !4851)
!4860 = !DILocation(line: 196, column: 35, scope: !4851)
!4861 = !DILocation(line: 196, column: 3, scope: !4851)
!4862 = distinct !DISubprogram(name: "gimple_vdef", scope: !574, file: !574, line: 1375, type: !3170, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4863)
!4863 = !{!4864}
!4864 = !DILocalVariable(name: "g", arg: 1, scope: !4862, file: !574, line: 1375, type: !3147)
!4865 = !DILocation(line: 0, scope: !4862)
!4866 = !DILocation(line: 1377, column: 8, scope: !4867)
!4867 = distinct !DILexicalBlock(scope: !4862, file: !574, line: 1377, column: 7)
!4868 = !DILocation(line: 1377, column: 7, scope: !4862)
!4869 = !DILocation(line: 1379, column: 23, scope: !4862)
!4870 = !DILocation(line: 1379, column: 3, scope: !4862)
!4871 = !DILocation(line: 1380, column: 1, scope: !4862)
!4872 = distinct !DISubprogram(name: "tree_operand_length", scope: !135, file: !135, line: 5347, type: !4873, scopeLine: 5348, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4875)
!4873 = !DISubroutineType(types: !4874)
!4874 = !{!676, !3477}
!4875 = !{!4876}
!4876 = !DILocalVariable(name: "node", arg: 1, scope: !4872, file: !135, line: 5347, type: !3477)
!4877 = !DILocation(line: 0, scope: !4872)
!4878 = !DILocation(line: 5349, column: 7, scope: !4879)
!4879 = distinct !DILexicalBlock(scope: !4872, file: !135, line: 5349, column: 7)
!4880 = !DILocation(line: 5349, column: 7, scope: !4872)
!4881 = !DILocation(line: 5350, column: 12, scope: !4879)
!4882 = !DILocation(line: 5350, column: 5, scope: !4879)
!4883 = !DILocation(line: 5352, column: 12, scope: !4879)
!4884 = !DILocation(line: 5352, column: 5, scope: !4879)
!4885 = !DILocation(line: 0, scope: !4879)
!4886 = !DILocation(line: 5353, column: 1, scope: !4872)
!4887 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !574, file: !574, line: 1283, type: !3145, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4888)
!4888 = !{!4889}
!4889 = !DILocalVariable(name: "g", arg: 1, scope: !4887, file: !574, line: 1283, type: !3147)
!4890 = !DILocation(line: 0, scope: !4887)
!4891 = !DILocation(line: 1285, column: 10, scope: !4887)
!4892 = !DILocation(line: 1285, column: 26, scope: !4887)
!4893 = !DILocation(line: 1285, column: 43, scope: !4887)
!4894 = !DILocation(line: 1285, column: 46, scope: !4887)
!4895 = !DILocation(line: 1285, column: 62, scope: !4887)
!4896 = !DILocation(line: 1285, column: 3, scope: !4887)
!4897 = distinct !DISubprogram(name: "VEC_operand_entry_t_heap_reserve", scope: !3, file: !3, line: 298, type: !4898, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4900)
!4898 = !DISubroutineType(types: !4899)
!4899 = !{!676, !2071, !676}
!4900 = !{!4901, !4902, !4903}
!4901 = !DILocalVariable(name: "vec_", arg: 1, scope: !4897, file: !3, line: 298, type: !2071)
!4902 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4897, file: !3, line: 298, type: !676)
!4903 = !DILocalVariable(name: "extend", scope: !4897, file: !3, line: 298, type: !676)
!4904 = !DILocation(line: 0, scope: !4897)
!4905 = !DILocation(line: 298, column: 1, scope: !4897)
!4906 = !DILocation(line: 298, column: 1, scope: !4907)
!4907 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 298, column: 1)
!4908 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_quick_push", scope: !3, file: !3, line: 297, type: !4909, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4911)
!4909 = !DISubroutineType(types: !4910)
!4910 = !{!2641, !3828, !683}
!4911 = !{!4912, !4913, !4914}
!4912 = !DILocalVariable(name: "vec_", arg: 1, scope: !4908, file: !3, line: 297, type: !3828)
!4913 = !DILocalVariable(name: "obj_", arg: 2, scope: !4908, file: !3, line: 297, type: !683)
!4914 = !DILocalVariable(name: "slot_", scope: !4908, file: !3, line: 297, type: !2641)
!4915 = !DILocation(line: 0, scope: !4908)
!4916 = !DILocation(line: 297, column: 1, scope: !4908)
!4917 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_space", scope: !3, file: !3, line: 297, type: !4918, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4920)
!4918 = !DISubroutineType(types: !4919)
!4919 = !{!676, !3828, !676}
!4920 = !{!4921, !4922}
!4921 = !DILocalVariable(name: "vec_", arg: 1, scope: !4917, file: !3, line: 297, type: !3828)
!4922 = !DILocalVariable(name: "alloc_", arg: 2, scope: !4917, file: !3, line: 297, type: !676)
!4923 = !DILocation(line: 0, scope: !4917)
!4924 = !DILocation(line: 297, column: 1, scope: !4917)
!4925 = distinct !DISubprogram(name: "gimple_op_ptr", scope: !574, file: !574, line: 1647, type: !4926, scopeLine: 1648, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4928)
!4926 = !DISubroutineType(types: !4927)
!4927 = !{!1047, !3147, !7}
!4928 = !{!4929, !4930}
!4929 = !DILocalVariable(name: "gs", arg: 1, scope: !4925, file: !574, line: 1647, type: !3147)
!4930 = !DILocalVariable(name: "i", arg: 2, scope: !4925, file: !574, line: 1647, type: !7)
!4931 = !DILocation(line: 0, scope: !4925)
!4932 = !DILocation(line: 1649, column: 7, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !4925, file: !574, line: 1649, column: 7)
!4934 = !DILocation(line: 1649, column: 7, scope: !4925)
!4935 = !DILocation(line: 1654, column: 14, scope: !4936)
!4936 = distinct !DILexicalBlock(scope: !4933, file: !574, line: 1650, column: 5)
!4937 = !DILocation(line: 1654, column: 50, scope: !4936)
!4938 = !DILocation(line: 1654, column: 7, scope: !4936)
!4939 = !DILocation(line: 0, scope: !4933)
!4940 = !DILocation(line: 1658, column: 1, scope: !4925)
!4941 = distinct !DISubprogram(name: "constant_type", scope: !3, file: !3, line: 309, type: !4942, scopeLine: 310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4944)
!4942 = !DISubroutineType(types: !4943)
!4943 = !{!676, !689}
!4944 = !{!4945}
!4945 = !DILocalVariable(name: "t", arg: 1, scope: !4941, file: !3, line: 309, type: !689)
!4946 = !DILocation(line: 0, scope: !4941)
!4947 = !DILocation(line: 311, column: 7, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4941, file: !3, line: 311, column: 7)
!4949 = !DILocation(line: 311, column: 7, scope: !4941)
!4950 = !DILocation(line: 313, column: 12, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4948, file: !3, line: 313, column: 12)
!4952 = !DILocation(line: 0, scope: !4951)
!4953 = !DILocation(line: 0, scope: !4948)
!4954 = !DILocation(line: 317, column: 1, scope: !4941)
!4955 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_index", scope: !3, file: !3, line: 297, type: !4956, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4958)
!4956 = !DISubroutineType(types: !4957)
!4957 = !{!683, !2639, !7}
!4958 = !{!4959, !4960}
!4959 = !DILocalVariable(name: "vec_", arg: 1, scope: !4955, file: !3, line: 297, type: !2639)
!4960 = !DILocalVariable(name: "ix_", arg: 2, scope: !4955, file: !3, line: 297, type: !7)
!4961 = !DILocation(line: 0, scope: !4955)
!4962 = !DILocation(line: 297, column: 1, scope: !4955)
!4963 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_pop", scope: !3, file: !3, line: 297, type: !4964, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4966)
!4964 = !DISubroutineType(types: !4965)
!4965 = !{!683, !3828}
!4966 = !{!4967, !4968}
!4967 = !DILocalVariable(name: "vec_", arg: 1, scope: !4963, file: !3, line: 297, type: !3828)
!4968 = !DILocalVariable(name: "obj_", scope: !4963, file: !3, line: 297, type: !683)
!4969 = !DILocation(line: 0, scope: !4963)
!4970 = !DILocation(line: 297, column: 1, scope: !4963)
!4971 = distinct !DISubprogram(name: "eliminate_using_constants", scope: !3, file: !3, line: 603, type: !3883, scopeLine: 605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !4972)
!4972 = !{!4973, !4974, !4975, !4976}
!4973 = !DILocalVariable(name: "opcode", arg: 1, scope: !4971, file: !3, line: 603, type: !134)
!4974 = !DILocalVariable(name: "ops", arg: 2, scope: !4971, file: !3, line: 604, type: !2071)
!4975 = !DILocalVariable(name: "oelast", scope: !4971, file: !3, line: 606, type: !683)
!4976 = !DILocalVariable(name: "type", scope: !4971, file: !3, line: 607, type: !689)
!4977 = !DILocation(line: 0, scope: !4971)
!4978 = !DILocation(line: 606, column: 28, scope: !4971)
!4979 = !DILocation(line: 607, column: 15, scope: !4971)
!4980 = !DILocation(line: 609, column: 15, scope: !4981)
!4981 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 609, column: 7)
!4982 = !DILocation(line: 609, column: 20, scope: !4981)
!4983 = !DILocation(line: 610, column: 7, scope: !4981)
!4984 = !DILocation(line: 610, column: 11, scope: !4981)
!4985 = !DILocation(line: 610, column: 34, scope: !4981)
!4986 = !DILocation(line: 610, column: 37, scope: !4981)
!4987 = !DILocation(line: 609, column: 7, scope: !4971)
!4988 = !DILocation(line: 612, column: 7, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4981, file: !3, line: 611, column: 5)
!4990 = !DILocation(line: 615, column: 8, scope: !4991)
!4991 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 615, column: 8)
!4992 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 613, column: 2)
!4993 = !DILocation(line: 615, column: 8, scope: !4992)
!4994 = !DILocation(line: 617, column: 12, scope: !4995)
!4995 = distinct !DILexicalBlock(scope: !4996, file: !3, line: 617, column: 12)
!4996 = distinct !DILexicalBlock(scope: !4991, file: !3, line: 616, column: 6)
!4997 = !DILocation(line: 617, column: 47, scope: !4995)
!4998 = !DILocation(line: 617, column: 12, scope: !4996)
!4999 = !DILocation(line: 619, column: 9, scope: !5000)
!5000 = distinct !DILexicalBlock(scope: !5001, file: !3, line: 619, column: 9)
!5001 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 618, column: 3)
!5002 = !DILocation(line: 619, column: 19, scope: !5000)
!5003 = !DILocation(line: 619, column: 23, scope: !5000)
!5004 = !DILocation(line: 619, column: 34, scope: !5000)
!5005 = !DILocation(line: 619, column: 9, scope: !5001)
!5006 = !DILocation(line: 620, column: 7, scope: !5000)
!5007 = !DILocation(line: 623, column: 10, scope: !5001)
!5008 = !DILocation(line: 623, column: 45, scope: !5001)
!5009 = !DILocation(line: 623, column: 7, scope: !5001)
!5010 = !DILocation(line: 625, column: 5, scope: !5001)
!5011 = !DILocation(line: 626, column: 10, scope: !5001)
!5012 = !DILocation(line: 627, column: 5, scope: !5001)
!5013 = !DILocation(line: 628, column: 5, scope: !5001)
!5014 = !DILocation(line: 631, column: 40, scope: !5015)
!5015 = distinct !DILexicalBlock(scope: !4991, file: !3, line: 631, column: 13)
!5016 = !DILocation(line: 631, column: 13, scope: !5015)
!5017 = !DILocation(line: 631, column: 13, scope: !4991)
!5018 = !DILocation(line: 633, column: 12, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !5020, file: !3, line: 633, column: 12)
!5020 = distinct !DILexicalBlock(scope: !5015, file: !3, line: 632, column: 6)
!5021 = !DILocation(line: 633, column: 47, scope: !5019)
!5022 = !DILocation(line: 633, column: 12, scope: !5020)
!5023 = !DILocation(line: 635, column: 9, scope: !5024)
!5024 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 635, column: 9)
!5025 = distinct !DILexicalBlock(scope: !5019, file: !3, line: 634, column: 3)
!5026 = !DILocation(line: 635, column: 19, scope: !5024)
!5027 = !DILocation(line: 635, column: 23, scope: !5024)
!5028 = !DILocation(line: 635, column: 34, scope: !5024)
!5029 = !DILocation(line: 635, column: 9, scope: !5025)
!5030 = !DILocation(line: 636, column: 7, scope: !5024)
!5031 = !DILocation(line: 637, column: 5, scope: !5025)
!5032 = !DILocation(line: 638, column: 37, scope: !5025)
!5033 = !DILocation(line: 639, column: 3, scope: !5025)
!5034 = !DILocation(line: 643, column: 8, scope: !5035)
!5035 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 643, column: 8)
!5036 = !DILocation(line: 643, column: 8, scope: !4992)
!5037 = !DILocation(line: 645, column: 12, scope: !5038)
!5038 = distinct !DILexicalBlock(scope: !5039, file: !3, line: 645, column: 12)
!5039 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 644, column: 6)
!5040 = !DILocation(line: 645, column: 47, scope: !5038)
!5041 = !DILocation(line: 645, column: 12, scope: !5039)
!5042 = !DILocation(line: 647, column: 9, scope: !5043)
!5043 = distinct !DILexicalBlock(scope: !5044, file: !3, line: 647, column: 9)
!5044 = distinct !DILexicalBlock(scope: !5038, file: !3, line: 646, column: 3)
!5045 = !DILocation(line: 647, column: 19, scope: !5043)
!5046 = !DILocation(line: 647, column: 23, scope: !5043)
!5047 = !DILocation(line: 647, column: 34, scope: !5043)
!5048 = !DILocation(line: 647, column: 9, scope: !5044)
!5049 = !DILocation(line: 648, column: 7, scope: !5043)
!5050 = !DILocation(line: 651, column: 10, scope: !5044)
!5051 = !DILocation(line: 651, column: 45, scope: !5044)
!5052 = !DILocation(line: 651, column: 7, scope: !5044)
!5053 = !DILocation(line: 653, column: 5, scope: !5044)
!5054 = !DILocation(line: 654, column: 10, scope: !5044)
!5055 = !DILocation(line: 655, column: 5, scope: !5044)
!5056 = !DILocation(line: 656, column: 5, scope: !5044)
!5057 = !DILocation(line: 659, column: 36, scope: !5058)
!5058 = distinct !DILexicalBlock(scope: !5035, file: !3, line: 659, column: 13)
!5059 = !DILocation(line: 659, column: 13, scope: !5058)
!5060 = !DILocation(line: 659, column: 13, scope: !5035)
!5061 = !DILocation(line: 661, column: 12, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5063, file: !3, line: 661, column: 12)
!5063 = distinct !DILexicalBlock(scope: !5058, file: !3, line: 660, column: 6)
!5064 = !DILocation(line: 661, column: 47, scope: !5062)
!5065 = !DILocation(line: 661, column: 12, scope: !5063)
!5066 = !DILocation(line: 663, column: 9, scope: !5067)
!5067 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 663, column: 9)
!5068 = distinct !DILexicalBlock(scope: !5062, file: !3, line: 662, column: 3)
!5069 = !DILocation(line: 663, column: 19, scope: !5067)
!5070 = !DILocation(line: 663, column: 23, scope: !5067)
!5071 = !DILocation(line: 663, column: 34, scope: !5067)
!5072 = !DILocation(line: 663, column: 9, scope: !5068)
!5073 = !DILocation(line: 664, column: 7, scope: !5067)
!5074 = !DILocation(line: 665, column: 5, scope: !5068)
!5075 = !DILocation(line: 666, column: 37, scope: !5068)
!5076 = !DILocation(line: 667, column: 3, scope: !5068)
!5077 = !DILocation(line: 671, column: 8, scope: !5078)
!5078 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 671, column: 8)
!5079 = !DILocation(line: 672, column: 8, scope: !5078)
!5080 = !DILocation(line: 672, column: 12, scope: !5078)
!5081 = !DILocation(line: 673, column: 5, scope: !5078)
!5082 = !DILocation(line: 673, column: 9, scope: !5078)
!5083 = !DILocation(line: 674, column: 9, scope: !5078)
!5084 = !DILocation(line: 675, column: 28, scope: !5078)
!5085 = !DILocation(line: 675, column: 8, scope: !5078)
!5086 = !DILocation(line: 671, column: 8, scope: !4992)
!5087 = !DILocation(line: 677, column: 12, scope: !5088)
!5088 = distinct !DILexicalBlock(scope: !5089, file: !3, line: 677, column: 12)
!5089 = distinct !DILexicalBlock(scope: !5078, file: !3, line: 676, column: 6)
!5090 = !DILocation(line: 677, column: 47, scope: !5088)
!5091 = !DILocation(line: 677, column: 12, scope: !5089)
!5092 = !DILocation(line: 679, column: 9, scope: !5093)
!5093 = distinct !DILexicalBlock(scope: !5094, file: !3, line: 679, column: 9)
!5094 = distinct !DILexicalBlock(scope: !5088, file: !3, line: 678, column: 3)
!5095 = !DILocation(line: 679, column: 19, scope: !5093)
!5096 = !DILocation(line: 679, column: 23, scope: !5093)
!5097 = !DILocation(line: 679, column: 34, scope: !5093)
!5098 = !DILocation(line: 679, column: 9, scope: !5094)
!5099 = !DILocation(line: 680, column: 7, scope: !5093)
!5100 = !DILocation(line: 683, column: 10, scope: !5094)
!5101 = !DILocation(line: 683, column: 45, scope: !5094)
!5102 = !DILocation(line: 683, column: 7, scope: !5094)
!5103 = !DILocation(line: 684, column: 5, scope: !5094)
!5104 = !DILocation(line: 685, column: 10, scope: !5094)
!5105 = !DILocation(line: 686, column: 5, scope: !5094)
!5106 = !DILocation(line: 687, column: 5, scope: !5094)
!5107 = !DILocation(line: 690, column: 35, scope: !5108)
!5108 = distinct !DILexicalBlock(scope: !5078, file: !3, line: 690, column: 13)
!5109 = !DILocation(line: 690, column: 13, scope: !5108)
!5110 = !DILocation(line: 691, column: 6, scope: !5108)
!5111 = !DILocation(line: 691, column: 10, scope: !5108)
!5112 = !DILocation(line: 692, column: 10, scope: !5108)
!5113 = !DILocation(line: 692, column: 14, scope: !5108)
!5114 = !DILocation(line: 693, column: 32, scope: !5108)
!5115 = !DILocation(line: 693, column: 13, scope: !5108)
!5116 = !DILocation(line: 690, column: 13, scope: !5078)
!5117 = !DILocation(line: 695, column: 12, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5119, file: !3, line: 695, column: 12)
!5119 = distinct !DILexicalBlock(scope: !5108, file: !3, line: 694, column: 6)
!5120 = !DILocation(line: 695, column: 47, scope: !5118)
!5121 = !DILocation(line: 695, column: 12, scope: !5119)
!5122 = !DILocation(line: 697, column: 9, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5124, file: !3, line: 697, column: 9)
!5124 = distinct !DILexicalBlock(scope: !5118, file: !3, line: 696, column: 3)
!5125 = !DILocation(line: 697, column: 19, scope: !5123)
!5126 = !DILocation(line: 697, column: 23, scope: !5123)
!5127 = !DILocation(line: 697, column: 34, scope: !5123)
!5128 = !DILocation(line: 697, column: 9, scope: !5124)
!5129 = !DILocation(line: 698, column: 7, scope: !5123)
!5130 = !DILocation(line: 699, column: 5, scope: !5124)
!5131 = !DILocation(line: 700, column: 37, scope: !5124)
!5132 = !DILocation(line: 701, column: 5, scope: !5124)
!5133 = !DILocation(line: 708, column: 8, scope: !5134)
!5134 = distinct !DILexicalBlock(scope: !4992, file: !3, line: 708, column: 8)
!5135 = !DILocation(line: 709, column: 8, scope: !5134)
!5136 = !DILocation(line: 709, column: 12, scope: !5134)
!5137 = !DILocation(line: 710, column: 5, scope: !5134)
!5138 = !DILocation(line: 710, column: 29, scope: !5134)
!5139 = !DILocation(line: 711, column: 49, scope: !5134)
!5140 = !DILocation(line: 712, column: 14, scope: !5134)
!5141 = !DILocation(line: 711, column: 8, scope: !5134)
!5142 = !DILocation(line: 708, column: 8, scope: !4992)
!5143 = !DILocation(line: 714, column: 12, scope: !5144)
!5144 = distinct !DILexicalBlock(scope: !5145, file: !3, line: 714, column: 12)
!5145 = distinct !DILexicalBlock(scope: !5134, file: !3, line: 713, column: 6)
!5146 = !DILocation(line: 714, column: 47, scope: !5144)
!5147 = !DILocation(line: 714, column: 12, scope: !5145)
!5148 = !DILocation(line: 716, column: 9, scope: !5149)
!5149 = distinct !DILexicalBlock(scope: !5150, file: !3, line: 716, column: 9)
!5150 = distinct !DILexicalBlock(scope: !5144, file: !3, line: 715, column: 3)
!5151 = !DILocation(line: 716, column: 19, scope: !5149)
!5152 = !DILocation(line: 716, column: 23, scope: !5149)
!5153 = !DILocation(line: 716, column: 34, scope: !5149)
!5154 = !DILocation(line: 716, column: 9, scope: !5150)
!5155 = !DILocation(line: 717, column: 7, scope: !5149)
!5156 = !DILocation(line: 718, column: 5, scope: !5150)
!5157 = !DILocation(line: 719, column: 37, scope: !5150)
!5158 = !DILocation(line: 720, column: 5, scope: !5150)
!5159 = !DILocation(line: 728, column: 1, scope: !4971)
!5160 = distinct !DISubprogram(name: "eliminate_not_pairs", scope: !3, file: !3, line: 534, type: !5161, scopeLine: 538, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5163)
!5161 = !DISubroutineType(types: !5162)
!5162 = !{!675, !134, !2071, !7, !683}
!5163 = !{!5164, !5165, !5166, !5167, !5168, !5169, !5170}
!5164 = !DILocalVariable(name: "opcode", arg: 1, scope: !5160, file: !3, line: 534, type: !134)
!5165 = !DILocalVariable(name: "ops", arg: 2, scope: !5160, file: !3, line: 535, type: !2071)
!5166 = !DILocalVariable(name: "currindex", arg: 3, scope: !5160, file: !3, line: 536, type: !7)
!5167 = !DILocalVariable(name: "curr", arg: 4, scope: !5160, file: !3, line: 537, type: !683)
!5168 = !DILocalVariable(name: "notop", scope: !5160, file: !3, line: 539, type: !689)
!5169 = !DILocalVariable(name: "i", scope: !5160, file: !3, line: 540, type: !7)
!5170 = !DILocalVariable(name: "oe", scope: !5160, file: !3, line: 541, type: !683)
!5171 = !DILocation(line: 0, scope: !5160)
!5172 = !DILocation(line: 541, column: 3, scope: !5160)
!5173 = !DILocation(line: 543, column: 31, scope: !5174)
!5174 = distinct !DILexicalBlock(scope: !5160, file: !3, line: 543, column: 7)
!5175 = !DILocation(line: 544, column: 10, scope: !5174)
!5176 = !DILocation(line: 544, column: 31, scope: !5174)
!5177 = !DILocation(line: 543, column: 7, scope: !5160)
!5178 = !DILocation(line: 547, column: 11, scope: !5160)
!5179 = !DILocation(line: 548, column: 13, scope: !5180)
!5180 = distinct !DILexicalBlock(scope: !5160, file: !3, line: 548, column: 7)
!5181 = !DILocation(line: 548, column: 7, scope: !5160)
!5182 = !DILocation(line: 0, scope: !5183)
!5183 = distinct !DILexicalBlock(scope: !5184, file: !3, line: 555, column: 3)
!5184 = distinct !DILexicalBlock(scope: !5160, file: !3, line: 555, column: 3)
!5185 = !DILocation(line: 555, column: 8, scope: !5184)
!5186 = !DILocation(line: 0, scope: !5184)
!5187 = !DILocation(line: 556, column: 8, scope: !5183)
!5188 = !DILocation(line: 557, column: 8, scope: !5183)
!5189 = !DILocation(line: 557, column: 11, scope: !5183)
!5190 = !DILocation(line: 557, column: 15, scope: !5183)
!5191 = !DILocation(line: 557, column: 29, scope: !5183)
!5192 = !DILocation(line: 557, column: 34, scope: !5183)
!5193 = !DILocation(line: 557, column: 20, scope: !5183)
!5194 = !DILocation(line: 555, column: 3, scope: !5184)
!5195 = !DILocation(line: 560, column: 15, scope: !5196)
!5196 = distinct !DILexicalBlock(scope: !5197, file: !3, line: 560, column: 11)
!5197 = distinct !DILexicalBlock(scope: !5183, file: !3, line: 559, column: 5)
!5198 = !DILocation(line: 560, column: 18, scope: !5196)
!5199 = !DILocation(line: 560, column: 11, scope: !5197)
!5200 = !DILocation(line: 562, column: 8, scope: !5201)
!5201 = distinct !DILexicalBlock(scope: !5202, file: !3, line: 562, column: 8)
!5202 = distinct !DILexicalBlock(scope: !5196, file: !3, line: 561, column: 2)
!5203 = !DILocation(line: 562, column: 18, scope: !5201)
!5204 = !DILocation(line: 562, column: 22, scope: !5201)
!5205 = !DILocation(line: 562, column: 33, scope: !5201)
!5206 = !DILocation(line: 562, column: 8, scope: !5202)
!5207 = !DILocation(line: 564, column: 8, scope: !5208)
!5208 = distinct !DILexicalBlock(scope: !5201, file: !3, line: 563, column: 6)
!5209 = !DILocation(line: 565, column: 28, scope: !5208)
!5210 = !DILocation(line: 565, column: 8, scope: !5208)
!5211 = !DILocation(line: 566, column: 12, scope: !5208)
!5212 = !DILocation(line: 567, column: 12, scope: !5213)
!5213 = distinct !DILexicalBlock(scope: !5208, file: !3, line: 566, column: 12)
!5214 = !DILocation(line: 567, column: 3, scope: !5213)
!5215 = !DILocation(line: 569, column: 12, scope: !5216)
!5216 = distinct !DILexicalBlock(scope: !5213, file: !3, line: 568, column: 17)
!5217 = !DILocation(line: 569, column: 3, scope: !5216)
!5218 = !DILocation(line: 570, column: 28, scope: !5208)
!5219 = !DILocation(line: 570, column: 39, scope: !5208)
!5220 = !DILocation(line: 570, column: 43, scope: !5208)
!5221 = !DILocation(line: 570, column: 8, scope: !5208)
!5222 = !DILocation(line: 571, column: 12, scope: !5208)
!5223 = !DILocation(line: 572, column: 12, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5208, file: !3, line: 571, column: 12)
!5225 = !DILocation(line: 572, column: 3, scope: !5224)
!5226 = !DILocation(line: 574, column: 12, scope: !5227)
!5227 = distinct !DILexicalBlock(scope: !5224, file: !3, line: 573, column: 17)
!5228 = !DILocation(line: 574, column: 3, scope: !5227)
!5229 = !DILocation(line: 577, column: 8, scope: !5202)
!5230 = !DILocation(line: 578, column: 15, scope: !5231)
!5231 = distinct !DILexicalBlock(scope: !5202, file: !3, line: 577, column: 8)
!5232 = !DILocation(line: 578, column: 6, scope: !5231)
!5233 = !DILocation(line: 578, column: 10, scope: !5231)
!5234 = !DILocation(line: 578, column: 13, scope: !5231)
!5235 = !DILocation(line: 580, column: 36, scope: !5236)
!5236 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 579, column: 13)
!5237 = !DILocation(line: 581, column: 8, scope: !5236)
!5238 = !DILocation(line: 580, column: 15, scope: !5236)
!5239 = !DILocation(line: 580, column: 6, scope: !5236)
!5240 = !DILocation(line: 580, column: 10, scope: !5236)
!5241 = !DILocation(line: 580, column: 13, scope: !5236)
!5242 = !DILocation(line: 584, column: 9, scope: !5202)
!5243 = !DILocation(line: 584, column: 44, scope: !5202)
!5244 = !DILocation(line: 584, column: 6, scope: !5202)
!5245 = !DILocation(line: 585, column: 4, scope: !5202)
!5246 = !DILocation(line: 586, column: 9, scope: !5202)
!5247 = !DILocation(line: 587, column: 4, scope: !5202)
!5248 = !DILocation(line: 588, column: 4, scope: !5202)
!5249 = !DILocation(line: 555, column: 3, scope: !5183)
!5250 = distinct !{!5250, !5194, !5251}
!5251 = !DILocation(line: 590, column: 5, scope: !5184)
!5252 = !DILocation(line: 593, column: 1, scope: !5160)
!5253 = distinct !DISubprogram(name: "eliminate_duplicate_pair", scope: !3, file: !3, line: 399, type: !5254, scopeLine: 405, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5256)
!5254 = !DISubroutineType(types: !5255)
!5255 = !{!675, !134, !2071, !674, !7, !683, !683}
!5256 = !{!5257, !5258, !5259, !5260, !5261, !5262}
!5257 = !DILocalVariable(name: "opcode", arg: 1, scope: !5253, file: !3, line: 399, type: !134)
!5258 = !DILocalVariable(name: "ops", arg: 2, scope: !5253, file: !3, line: 400, type: !2071)
!5259 = !DILocalVariable(name: "all_done", arg: 3, scope: !5253, file: !3, line: 401, type: !674)
!5260 = !DILocalVariable(name: "i", arg: 4, scope: !5253, file: !3, line: 402, type: !7)
!5261 = !DILocalVariable(name: "curr", arg: 5, scope: !5253, file: !3, line: 403, type: !683)
!5262 = !DILocalVariable(name: "last", arg: 6, scope: !5253, file: !3, line: 404, type: !683)
!5263 = !DILocation(line: 0, scope: !5253)
!5264 = !DILocation(line: 412, column: 7, scope: !5265)
!5265 = distinct !DILexicalBlock(scope: !5253, file: !3, line: 412, column: 7)
!5266 = !DILocation(line: 412, column: 12, scope: !5265)
!5267 = !DILocation(line: 412, column: 21, scope: !5265)
!5268 = !DILocation(line: 412, column: 33, scope: !5265)
!5269 = !DILocation(line: 412, column: 24, scope: !5265)
!5270 = !DILocation(line: 412, column: 7, scope: !5253)
!5271 = !DILocation(line: 414, column: 7, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5265, file: !3, line: 413, column: 5)
!5273 = !DILocation(line: 420, column: 8, scope: !5274)
!5274 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 420, column: 8)
!5275 = distinct !DILexicalBlock(scope: !5272, file: !3, line: 415, column: 2)
!5276 = !DILocation(line: 420, column: 18, scope: !5274)
!5277 = !DILocation(line: 420, column: 22, scope: !5274)
!5278 = !DILocation(line: 420, column: 33, scope: !5274)
!5279 = !DILocation(line: 420, column: 8, scope: !5275)
!5280 = !DILocation(line: 422, column: 8, scope: !5281)
!5281 = distinct !DILexicalBlock(scope: !5274, file: !3, line: 421, column: 6)
!5282 = !DILocation(line: 423, column: 28, scope: !5281)
!5283 = !DILocation(line: 423, column: 45, scope: !5281)
!5284 = !DILocation(line: 423, column: 8, scope: !5281)
!5285 = !DILocation(line: 424, column: 17, scope: !5281)
!5286 = !DILocation(line: 424, column: 8, scope: !5281)
!5287 = !DILocation(line: 425, column: 28, scope: !5281)
!5288 = !DILocation(line: 425, column: 45, scope: !5281)
!5289 = !DILocation(line: 425, column: 8, scope: !5281)
!5290 = !DILocation(line: 426, column: 17, scope: !5281)
!5291 = !DILocation(line: 426, column: 8, scope: !5281)
!5292 = !DILocation(line: 427, column: 28, scope: !5281)
!5293 = !DILocation(line: 427, column: 45, scope: !5281)
!5294 = !DILocation(line: 427, column: 8, scope: !5281)
!5295 = !DILocation(line: 428, column: 6, scope: !5281)
!5296 = !DILocation(line: 430, column: 4, scope: !5275)
!5297 = !DILocation(line: 431, column: 37, scope: !5275)
!5298 = !DILocation(line: 433, column: 4, scope: !5275)
!5299 = !DILocation(line: 436, column: 8, scope: !5300)
!5300 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 436, column: 8)
!5301 = !DILocation(line: 436, column: 18, scope: !5300)
!5302 = !DILocation(line: 436, column: 22, scope: !5300)
!5303 = !DILocation(line: 436, column: 33, scope: !5300)
!5304 = !DILocation(line: 436, column: 8, scope: !5275)
!5305 = !DILocation(line: 438, column: 8, scope: !5306)
!5306 = distinct !DILexicalBlock(scope: !5300, file: !3, line: 437, column: 6)
!5307 = !DILocation(line: 439, column: 28, scope: !5306)
!5308 = !DILocation(line: 439, column: 45, scope: !5306)
!5309 = !DILocation(line: 439, column: 8, scope: !5306)
!5310 = !DILocation(line: 440, column: 17, scope: !5306)
!5311 = !DILocation(line: 440, column: 8, scope: !5306)
!5312 = !DILocation(line: 441, column: 28, scope: !5306)
!5313 = !DILocation(line: 441, column: 45, scope: !5306)
!5314 = !DILocation(line: 441, column: 8, scope: !5306)
!5315 = !DILocation(line: 442, column: 17, scope: !5306)
!5316 = !DILocation(line: 442, column: 8, scope: !5306)
!5317 = !DILocation(line: 443, column: 6, scope: !5306)
!5318 = !DILocation(line: 445, column: 37, scope: !5275)
!5319 = !DILocation(line: 447, column: 8, scope: !5320)
!5320 = distinct !DILexicalBlock(scope: !5275, file: !3, line: 447, column: 8)
!5321 = !DILocation(line: 447, column: 43, scope: !5320)
!5322 = !DILocation(line: 447, column: 8, scope: !5275)
!5323 = !DILocation(line: 449, column: 8, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5320, file: !3, line: 448, column: 6)
!5325 = !DILocation(line: 450, column: 13, scope: !5324)
!5326 = !DILocation(line: 451, column: 29, scope: !5324)
!5327 = !DILocation(line: 451, column: 8, scope: !5324)
!5328 = !DILocation(line: 453, column: 18, scope: !5324)
!5329 = !DILocation(line: 454, column: 6, scope: !5324)
!5330 = !DILocation(line: 457, column: 8, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5320, file: !3, line: 456, column: 6)
!5332 = !DILocation(line: 458, column: 8, scope: !5331)
!5333 = !DILocation(line: 468, column: 1, scope: !5253)
!5334 = distinct !DISubprogram(name: "eliminate_plus_minus_pair", scope: !3, file: !3, line: 477, type: !5161, scopeLine: 481, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5335)
!5335 = !{!5336, !5337, !5338, !5339, !5340, !5341, !5342}
!5336 = !DILocalVariable(name: "opcode", arg: 1, scope: !5334, file: !3, line: 477, type: !134)
!5337 = !DILocalVariable(name: "ops", arg: 2, scope: !5334, file: !3, line: 478, type: !2071)
!5338 = !DILocalVariable(name: "currindex", arg: 3, scope: !5334, file: !3, line: 479, type: !7)
!5339 = !DILocalVariable(name: "curr", arg: 4, scope: !5334, file: !3, line: 480, type: !683)
!5340 = !DILocalVariable(name: "negateop", scope: !5334, file: !3, line: 482, type: !689)
!5341 = !DILocalVariable(name: "i", scope: !5334, file: !3, line: 483, type: !7)
!5342 = !DILocalVariable(name: "oe", scope: !5334, file: !3, line: 484, type: !683)
!5343 = !DILocation(line: 0, scope: !5334)
!5344 = !DILocation(line: 484, column: 3, scope: !5334)
!5345 = !DILocation(line: 486, column: 14, scope: !5346)
!5346 = distinct !DILexicalBlock(scope: !5334, file: !3, line: 486, column: 7)
!5347 = !DILocation(line: 486, column: 27, scope: !5346)
!5348 = !DILocation(line: 486, column: 30, scope: !5346)
!5349 = !DILocation(line: 486, column: 51, scope: !5346)
!5350 = !DILocation(line: 486, column: 7, scope: !5334)
!5351 = !DILocation(line: 489, column: 14, scope: !5334)
!5352 = !DILocation(line: 490, column: 16, scope: !5353)
!5353 = distinct !DILexicalBlock(scope: !5334, file: !3, line: 490, column: 7)
!5354 = !DILocation(line: 490, column: 7, scope: !5334)
!5355 = !DILocation(line: 0, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5357, file: !3, line: 497, column: 3)
!5357 = distinct !DILexicalBlock(scope: !5334, file: !3, line: 497, column: 3)
!5358 = !DILocation(line: 497, column: 8, scope: !5357)
!5359 = !DILocation(line: 0, scope: !5357)
!5360 = !DILocation(line: 498, column: 8, scope: !5356)
!5361 = !DILocation(line: 499, column: 8, scope: !5356)
!5362 = !DILocation(line: 499, column: 11, scope: !5356)
!5363 = !DILocation(line: 499, column: 15, scope: !5356)
!5364 = !DILocation(line: 499, column: 29, scope: !5356)
!5365 = !DILocation(line: 499, column: 34, scope: !5356)
!5366 = !DILocation(line: 499, column: 20, scope: !5356)
!5367 = !DILocation(line: 497, column: 3, scope: !5357)
!5368 = !DILocation(line: 502, column: 15, scope: !5369)
!5369 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 502, column: 11)
!5370 = distinct !DILexicalBlock(scope: !5356, file: !3, line: 501, column: 5)
!5371 = !DILocation(line: 502, column: 18, scope: !5369)
!5372 = !DILocation(line: 502, column: 11, scope: !5370)
!5373 = !DILocation(line: 505, column: 8, scope: !5374)
!5374 = distinct !DILexicalBlock(scope: !5375, file: !3, line: 505, column: 8)
!5375 = distinct !DILexicalBlock(scope: !5369, file: !3, line: 503, column: 2)
!5376 = !DILocation(line: 505, column: 18, scope: !5374)
!5377 = !DILocation(line: 505, column: 22, scope: !5374)
!5378 = !DILocation(line: 505, column: 33, scope: !5374)
!5379 = !DILocation(line: 505, column: 8, scope: !5375)
!5380 = !DILocation(line: 507, column: 8, scope: !5381)
!5381 = distinct !DILexicalBlock(scope: !5374, file: !3, line: 506, column: 6)
!5382 = !DILocation(line: 508, column: 28, scope: !5381)
!5383 = !DILocation(line: 508, column: 8, scope: !5381)
!5384 = !DILocation(line: 509, column: 17, scope: !5381)
!5385 = !DILocation(line: 509, column: 8, scope: !5381)
!5386 = !DILocation(line: 510, column: 28, scope: !5381)
!5387 = !DILocation(line: 510, column: 39, scope: !5381)
!5388 = !DILocation(line: 510, column: 43, scope: !5381)
!5389 = !DILocation(line: 510, column: 8, scope: !5381)
!5390 = !DILocation(line: 511, column: 17, scope: !5381)
!5391 = !DILocation(line: 511, column: 8, scope: !5381)
!5392 = !DILocation(line: 512, column: 6, scope: !5381)
!5393 = !DILocation(line: 514, column: 4, scope: !5375)
!5394 = !DILocation(line: 515, column: 25, scope: !5375)
!5395 = !DILocation(line: 515, column: 4, scope: !5375)
!5396 = !DILocation(line: 517, column: 4, scope: !5375)
!5397 = !DILocation(line: 518, column: 37, scope: !5375)
!5398 = !DILocation(line: 520, column: 4, scope: !5375)
!5399 = !DILocation(line: 497, column: 3, scope: !5356)
!5400 = distinct !{!5400, !5367, !5401}
!5401 = !DILocation(line: 522, column: 5, scope: !5357)
!5402 = !DILocation(line: 525, column: 1, scope: !5334)
!5403 = distinct !DISubprogram(name: "get_unary_op", scope: !3, file: !3, line: 382, type: !5404, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5406)
!5404 = !DISubroutineType(types: !5405)
!5405 = !{!689, !689, !134}
!5406 = !{!5407, !5408, !5409}
!5407 = !DILocalVariable(name: "name", arg: 1, scope: !5403, file: !3, line: 382, type: !689)
!5408 = !DILocalVariable(name: "opcode", arg: 2, scope: !5403, file: !3, line: 382, type: !134)
!5409 = !DILocalVariable(name: "stmt", scope: !5403, file: !3, line: 384, type: !1013)
!5410 = !DILocation(line: 0, scope: !5403)
!5411 = !DILocation(line: 384, column: 17, scope: !5403)
!5412 = !DILocation(line: 386, column: 8, scope: !5413)
!5413 = distinct !DILexicalBlock(scope: !5403, file: !3, line: 386, column: 7)
!5414 = !DILocation(line: 386, column: 7, scope: !5403)
!5415 = !DILocation(line: 389, column: 7, scope: !5416)
!5416 = distinct !DILexicalBlock(scope: !5403, file: !3, line: 389, column: 7)
!5417 = !DILocation(line: 389, column: 37, scope: !5416)
!5418 = !DILocation(line: 389, column: 7, scope: !5403)
!5419 = !DILocation(line: 390, column: 12, scope: !5416)
!5420 = !DILocation(line: 390, column: 5, scope: !5416)
!5421 = !DILocation(line: 392, column: 1, scope: !5403)
!5422 = distinct !DISubprogram(name: "VEC_operand_entry_t_base_ordered_remove", scope: !3, file: !3, line: 297, type: !5423, scopeLine: 297, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5425)
!5423 = !DISubroutineType(types: !5424)
!5424 = !{!683, !3828, !7}
!5425 = !{!5426, !5427, !5428, !5429}
!5426 = !DILocalVariable(name: "vec_", arg: 1, scope: !5422, file: !3, line: 297, type: !3828)
!5427 = !DILocalVariable(name: "ix_", arg: 2, scope: !5422, file: !3, line: 297, type: !7)
!5428 = !DILocalVariable(name: "slot_", scope: !5422, file: !3, line: 297, type: !2641)
!5429 = !DILocalVariable(name: "obj_", scope: !5422, file: !3, line: 297, type: !683)
!5430 = !DILocation(line: 0, scope: !5422)
!5431 = !DILocation(line: 297, column: 1, scope: !5422)
!5432 = distinct !DISubprogram(name: "SET_BIT", scope: !4003, file: !4003, line: 63, type: !5433, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5435)
!5433 = !DISubroutineType(types: !5434)
!5434 = !{null, !4002, !7}
!5435 = !{!5436, !5437, !5438}
!5436 = !DILocalVariable(name: "map", arg: 1, scope: !5432, file: !4003, line: 63, type: !4002)
!5437 = !DILocalVariable(name: "bitno", arg: 2, scope: !5432, file: !4003, line: 63, type: !7)
!5438 = !DILocalVariable(name: "oldbit", scope: !5439, file: !4003, line: 67, type: !675)
!5439 = distinct !DILexicalBlock(scope: !5440, file: !4003, line: 66, column: 5)
!5440 = distinct !DILexicalBlock(scope: !5432, file: !4003, line: 65, column: 7)
!5441 = !DILocation(line: 0, scope: !5432)
!5442 = !DILocation(line: 65, column: 12, scope: !5440)
!5443 = !DILocation(line: 65, column: 7, scope: !5440)
!5444 = !DILocation(line: 65, column: 7, scope: !5432)
!5445 = !DILocation(line: 73, column: 40, scope: !5432)
!5446 = !DILocation(line: 73, column: 29, scope: !5432)
!5447 = !DILocation(line: 72, column: 19, scope: !5432)
!5448 = !DILocation(line: 72, column: 3, scope: !5432)
!5449 = !DILocation(line: 68, column: 16, scope: !5439)
!5450 = !DILocation(line: 69, column: 12, scope: !5451)
!5451 = distinct !DILexicalBlock(scope: !5439, file: !4003, line: 69, column: 11)
!5452 = !DILocation(line: 69, column: 11, scope: !5439)
!5453 = !DILocation(line: 70, column: 2, scope: !5451)
!5454 = !DILocation(line: 70, column: 41, scope: !5451)
!5455 = !DILocation(line: 73, column: 5, scope: !5432)
!5456 = !DILocation(line: 74, column: 1, scope: !5432)
!5457 = distinct !DISubprogram(name: "oecount_hash", scope: !3, file: !3, line: 750, type: !1505, scopeLine: 751, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5458)
!5458 = !{!5459, !5460}
!5459 = !DILocalVariable(name: "p", arg: 1, scope: !5457, file: !3, line: 750, type: !1508)
!5460 = !DILocalVariable(name: "c", scope: !5457, file: !3, line: 752, type: !2090)
!5461 = !DILocation(line: 0, scope: !5457)
!5462 = !DILocation(line: 752, column: 22, scope: !5457)
!5463 = !DILocation(line: 753, column: 10, scope: !5457)
!5464 = !DILocation(line: 753, column: 32, scope: !5457)
!5465 = !DILocation(line: 753, column: 52, scope: !5457)
!5466 = !DILocation(line: 753, column: 36, scope: !5457)
!5467 = !DILocation(line: 753, column: 3, scope: !5457)
!5468 = distinct !DISubprogram(name: "oecount_eq", scope: !3, file: !3, line: 759, type: !1513, scopeLine: 760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5469)
!5469 = !{!5470, !5471, !5472, !5473}
!5470 = !DILocalVariable(name: "p1", arg: 1, scope: !5468, file: !3, line: 759, type: !1508)
!5471 = !DILocalVariable(name: "p2", arg: 2, scope: !5468, file: !3, line: 759, type: !1508)
!5472 = !DILocalVariable(name: "c1", scope: !5468, file: !3, line: 761, type: !2090)
!5473 = !DILocalVariable(name: "c2", scope: !5468, file: !3, line: 762, type: !2090)
!5474 = !DILocation(line: 0, scope: !5468)
!5475 = !DILocation(line: 761, column: 23, scope: !5468)
!5476 = !DILocation(line: 762, column: 23, scope: !5468)
!5477 = !DILocation(line: 763, column: 15, scope: !5468)
!5478 = !DILocation(line: 763, column: 29, scope: !5468)
!5479 = !DILocation(line: 763, column: 22, scope: !5468)
!5480 = !DILocation(line: 764, column: 4, scope: !5468)
!5481 = !DILocation(line: 764, column: 11, scope: !5468)
!5482 = !DILocation(line: 764, column: 21, scope: !5468)
!5483 = !DILocation(line: 764, column: 14, scope: !5468)
!5484 = !DILocation(line: 763, column: 3, scope: !5468)
!5485 = distinct !DISubprogram(name: "sbitmap_iter_init", scope: !4003, file: !4003, line: 117, type: !5486, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5492)
!5486 = !DISubroutineType(types: !5487)
!5487 = !{null, !5488, !5489, !7}
!5488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4016, size: 64)
!5489 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_sbitmap", file: !4003, line: 46, baseType: !5490)
!5490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5491, size: 64)
!5491 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4005)
!5492 = !{!5493, !5494, !5495}
!5493 = !DILocalVariable(name: "i", arg: 1, scope: !5485, file: !4003, line: 117, type: !5488)
!5494 = !DILocalVariable(name: "bmp", arg: 2, scope: !5485, file: !4003, line: 117, type: !5489)
!5495 = !DILocalVariable(name: "min", arg: 3, scope: !5485, file: !4003, line: 117, type: !7)
!5496 = !DILocation(line: 0, scope: !5485)
!5497 = !DILocation(line: 119, column: 21, scope: !5485)
!5498 = !DILocation(line: 119, column: 6, scope: !5485)
!5499 = !DILocation(line: 119, column: 15, scope: !5485)
!5500 = !DILocation(line: 120, column: 6, scope: !5485)
!5501 = !DILocation(line: 120, column: 14, scope: !5485)
!5502 = !DILocation(line: 121, column: 18, scope: !5485)
!5503 = !DILocation(line: 121, column: 6, scope: !5485)
!5504 = !DILocation(line: 121, column: 11, scope: !5485)
!5505 = !DILocation(line: 122, column: 12, scope: !5485)
!5506 = !DILocation(line: 122, column: 6, scope: !5485)
!5507 = !DILocation(line: 122, column: 10, scope: !5485)
!5508 = !DILocation(line: 124, column: 19, scope: !5509)
!5509 = distinct !DILexicalBlock(scope: !5485, file: !4003, line: 124, column: 7)
!5510 = !DILocation(line: 124, column: 7, scope: !5485)
!5511 = !DILocation(line: 125, column: 8, scope: !5509)
!5512 = !DILocation(line: 125, column: 13, scope: !5509)
!5513 = !DILocation(line: 125, column: 5, scope: !5509)
!5514 = !DILocation(line: 127, column: 16, scope: !5509)
!5515 = !DILocation(line: 128, column: 24, scope: !5509)
!5516 = !DILocation(line: 128, column: 9, scope: !5509)
!5517 = !DILocation(line: 127, column: 8, scope: !5509)
!5518 = !DILocation(line: 127, column: 13, scope: !5509)
!5519 = !DILocation(line: 129, column: 1, scope: !5485)
!5520 = distinct !DISubprogram(name: "sbitmap_iter_cond", scope: !4003, file: !4003, line: 136, type: !5521, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5524)
!5521 = !DISubroutineType(types: !5522)
!5522 = !{!675, !5488, !5523}
!5523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!5524 = !{!5525, !5526}
!5525 = !DILocalVariable(name: "i", arg: 1, scope: !5520, file: !4003, line: 136, type: !5488)
!5526 = !DILocalVariable(name: "n", arg: 2, scope: !5520, file: !4003, line: 136, type: !5523)
!5527 = !DILocation(line: 0, scope: !5520)
!5528 = !DILocation(line: 0, scope: !5529)
!5529 = distinct !DILexicalBlock(scope: !5530, file: !4003, line: 139, column: 3)
!5530 = distinct !DILexicalBlock(scope: !5520, file: !4003, line: 139, column: 3)
!5531 = !DILocation(line: 0, scope: !5532)
!5532 = distinct !DILexicalBlock(scope: !5529, file: !4003, line: 140, column: 5)
!5533 = !DILocation(line: 0, scope: !5534)
!5534 = distinct !DILexicalBlock(scope: !5532, file: !4003, line: 144, column: 11)
!5535 = !DILocation(line: 139, column: 13, scope: !5529)
!5536 = !DILocation(line: 139, column: 3, scope: !5520)
!5537 = !DILocation(line: 139, column: 18, scope: !5529)
!5538 = !DILocation(line: 139, column: 3, scope: !5530)
!5539 = !DILocation(line: 151, column: 3, scope: !5540)
!5540 = distinct !DILexicalBlock(scope: !5520, file: !4003, line: 151, column: 3)
!5541 = !DILocation(line: 141, column: 18, scope: !5532)
!5542 = !DILocation(line: 144, column: 29, scope: !5534)
!5543 = !DILocation(line: 144, column: 23, scope: !5534)
!5544 = !DILocation(line: 144, column: 11, scope: !5532)
!5545 = !DILocation(line: 147, column: 32, scope: !5532)
!5546 = !DILocation(line: 147, column: 18, scope: !5532)
!5547 = !DILocation(line: 139, column: 37, scope: !5529)
!5548 = !DILocation(line: 139, column: 34, scope: !5529)
!5549 = !DILocation(line: 139, column: 32, scope: !5529)
!5550 = !DILocation(line: 139, column: 3, scope: !5529)
!5551 = distinct !{!5551, !5538, !5552}
!5552 = !DILocation(line: 148, column: 5, scope: !5530)
!5553 = !DILocation(line: 151, column: 14, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5540, file: !4003, line: 151, column: 3)
!5555 = !DILocation(line: 151, column: 19, scope: !5554)
!5556 = !DILocation(line: 151, column: 24, scope: !5554)
!5557 = !DILocation(line: 152, column: 15, scope: !5554)
!5558 = !DILocation(line: 151, column: 38, scope: !5554)
!5559 = !DILocation(line: 151, column: 3, scope: !5554)
!5560 = distinct !{!5560, !5539, !5561}
!5561 = !DILocation(line: 152, column: 15, scope: !5540)
!5562 = !DILocation(line: 154, column: 6, scope: !5520)
!5563 = !DILocation(line: 156, column: 3, scope: !5520)
!5564 = !DILocation(line: 157, column: 1, scope: !5520)
!5565 = distinct !DISubprogram(name: "VEC_oecount_heap_safe_push", scope: !3, file: !3, line: 742, type: !5566, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5569)
!5566 = !DISubroutineType(types: !5567)
!5567 = !{!4049, !5568, !2090}
!5568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2072, size: 64)
!5569 = !{!5570, !5571}
!5570 = !DILocalVariable(name: "vec_", arg: 1, scope: !5565, file: !3, line: 742, type: !5568)
!5571 = !DILocalVariable(name: "obj_", arg: 2, scope: !5565, file: !3, line: 742, type: !2090)
!5572 = !DILocation(line: 0, scope: !5565)
!5573 = !DILocation(line: 742, column: 1, scope: !5565)
!5574 = distinct !DISubprogram(name: "VEC_oecount_base_length", scope: !3, file: !3, line: 741, type: !5575, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5579)
!5575 = !DISubroutineType(types: !5576)
!5576 = !{!7, !5577}
!5577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5578, size: 64)
!5578 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2077)
!5579 = !{!5580}
!5580 = !DILocalVariable(name: "vec_", arg: 1, scope: !5574, file: !3, line: 741, type: !5577)
!5581 = !DILocation(line: 0, scope: !5574)
!5582 = !DILocation(line: 741, column: 1, scope: !5574)
!5583 = distinct !DISubprogram(name: "VEC_oecount_base_pop", scope: !3, file: !3, line: 741, type: !5584, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5587)
!5584 = !DISubroutineType(types: !5585)
!5585 = !{null, !5586}
!5586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2077, size: 64)
!5587 = !{!5588}
!5588 = !DILocalVariable(name: "vec_", arg: 1, scope: !5583, file: !3, line: 741, type: !5586)
!5589 = !DILocation(line: 0, scope: !5583)
!5590 = !DILocation(line: 741, column: 1, scope: !5583)
!5591 = distinct !DISubprogram(name: "VEC_oecount_base_index", scope: !3, file: !3, line: 741, type: !5592, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5594)
!5592 = !DISubroutineType(types: !5593)
!5593 = !{!4049, !5586, !7}
!5594 = !{!5595, !5596}
!5595 = !DILocalVariable(name: "vec_", arg: 1, scope: !5591, file: !3, line: 741, type: !5586)
!5596 = !DILocalVariable(name: "ix_", arg: 2, scope: !5591, file: !3, line: 741, type: !7)
!5597 = !DILocation(line: 0, scope: !5591)
!5598 = !DILocation(line: 741, column: 1, scope: !5591)
!5599 = distinct !DISubprogram(name: "sbitmap_iter_next", scope: !4003, file: !4003, line: 162, type: !5600, scopeLine: 163, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5602)
!5600 = !DISubroutineType(types: !5601)
!5601 = !{null, !5488}
!5602 = !{!5603}
!5603 = !DILocalVariable(name: "i", arg: 1, scope: !5599, file: !4003, line: 162, type: !5488)
!5604 = !DILocation(line: 0, scope: !5599)
!5605 = !DILocation(line: 164, column: 6, scope: !5599)
!5606 = !DILocation(line: 164, column: 11, scope: !5599)
!5607 = !DILocation(line: 165, column: 6, scope: !5599)
!5608 = !DILocation(line: 165, column: 13, scope: !5599)
!5609 = !DILocation(line: 166, column: 1, scope: !5599)
!5610 = distinct !DISubprogram(name: "VEC_oecount_base_address", scope: !3, file: !3, line: 741, type: !5611, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5613)
!5611 = !DISubroutineType(types: !5612)
!5612 = !{!4049, !5586}
!5613 = !{!5614}
!5614 = !DILocalVariable(name: "vec_", arg: 1, scope: !5610, file: !3, line: 741, type: !5586)
!5615 = !DILocation(line: 0, scope: !5610)
!5616 = !DILocation(line: 741, column: 1, scope: !5610)
!5617 = distinct !DISubprogram(name: "oecount_cmp", scope: !3, file: !3, line: 770, type: !1513, scopeLine: 771, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5618)
!5618 = !{!5619, !5620, !5621, !5622}
!5619 = !DILocalVariable(name: "p1", arg: 1, scope: !5617, file: !3, line: 770, type: !1508)
!5620 = !DILocalVariable(name: "p2", arg: 2, scope: !5617, file: !3, line: 770, type: !1508)
!5621 = !DILocalVariable(name: "c1", scope: !5617, file: !3, line: 772, type: !2090)
!5622 = !DILocalVariable(name: "c2", scope: !5617, file: !3, line: 773, type: !2090)
!5623 = !DILocation(line: 0, scope: !5617)
!5624 = !DILocation(line: 774, column: 14, scope: !5617)
!5625 = !DILocation(line: 774, column: 24, scope: !5617)
!5626 = !DILocation(line: 774, column: 18, scope: !5617)
!5627 = !DILocation(line: 774, column: 3, scope: !5617)
!5628 = distinct !DISubprogram(name: "VEC_oecount_base_iterate", scope: !3, file: !3, line: 741, type: !5629, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5632)
!5629 = !DISubroutineType(types: !5630)
!5630 = !{!676, !5586, !7, !5631}
!5631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4049, size: 64)
!5632 = !{!5633, !5634, !5635}
!5633 = !DILocalVariable(name: "vec_", arg: 1, scope: !5628, file: !3, line: 741, type: !5586)
!5634 = !DILocalVariable(name: "ix_", arg: 2, scope: !5628, file: !3, line: 741, type: !7)
!5635 = !DILocalVariable(name: "ptr", arg: 3, scope: !5628, file: !3, line: 741, type: !5631)
!5636 = !DILocation(line: 0, scope: !5628)
!5637 = !DILocation(line: 741, column: 1, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5628, file: !3, line: 741, column: 1)
!5639 = !DILocation(line: 741, column: 1, scope: !5628)
!5640 = !DILocation(line: 741, column: 1, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5638, file: !3, line: 741, column: 1)
!5642 = !DILocation(line: 741, column: 1, scope: !5643)
!5643 = distinct !DILexicalBlock(scope: !5638, file: !3, line: 741, column: 1)
!5644 = !DILocation(line: 0, scope: !5638)
!5645 = distinct !DISubprogram(name: "VEC_oecount_base_last", scope: !3, file: !3, line: 741, type: !5611, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5646)
!5646 = !{!5647}
!5647 = !DILocalVariable(name: "vec_", arg: 1, scope: !5645, file: !3, line: 741, type: !5586)
!5648 = !DILocation(line: 0, scope: !5645)
!5649 = !DILocation(line: 741, column: 1, scope: !5645)
!5650 = distinct !DISubprogram(name: "zero_one_operation", scope: !3, file: !3, line: 782, type: !5651, scopeLine: 783, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5653)
!5651 = !DISubroutineType(types: !5652)
!5652 = !{null, !1047, !134, !689}
!5653 = !{!5654, !5655, !5656, !5657, !5658, !5660, !5663, !5664}
!5654 = !DILocalVariable(name: "def", arg: 1, scope: !5650, file: !3, line: 782, type: !1047)
!5655 = !DILocalVariable(name: "opcode", arg: 2, scope: !5650, file: !3, line: 782, type: !134)
!5656 = !DILocalVariable(name: "op", arg: 3, scope: !5650, file: !3, line: 782, type: !689)
!5657 = !DILocalVariable(name: "stmt", scope: !5650, file: !3, line: 784, type: !1013)
!5658 = !DILocalVariable(name: "name", scope: !5659, file: !3, line: 788, type: !689)
!5659 = distinct !DILexicalBlock(scope: !5650, file: !3, line: 787, column: 5)
!5660 = !DILocalVariable(name: "use_stmt", scope: !5661, file: !3, line: 797, type: !1013)
!5661 = distinct !DILexicalBlock(scope: !5662, file: !3, line: 796, column: 2)
!5662 = distinct !DILexicalBlock(scope: !5659, file: !3, line: 793, column: 11)
!5663 = !DILocalVariable(name: "use", scope: !5661, file: !3, line: 798, type: !2049)
!5664 = !DILocalVariable(name: "gsi", scope: !5661, file: !3, line: 799, type: !2770)
!5665 = !DILocation(line: 0, scope: !5650)
!5666 = !DILocation(line: 784, column: 17, scope: !5650)
!5667 = !DILocation(line: 0, scope: !5661)
!5668 = !DILocation(line: 786, column: 3, scope: !5650)
!5669 = !DILocation(line: 784, column: 10, scope: !5650)
!5670 = !DILocation(line: 788, column: 19, scope: !5659)
!5671 = !DILocation(line: 0, scope: !5659)
!5672 = !DILocation(line: 793, column: 11, scope: !5662)
!5673 = !DILocation(line: 793, column: 41, scope: !5662)
!5674 = !DILocation(line: 794, column: 4, scope: !5662)
!5675 = !DILocation(line: 794, column: 13, scope: !5662)
!5676 = !DILocation(line: 795, column: 8, scope: !5662)
!5677 = !DILocation(line: 795, column: 11, scope: !5662)
!5678 = !DILocation(line: 795, column: 37, scope: !5662)
!5679 = !DILocation(line: 793, column: 11, scope: !5659)
!5680 = !DILocation(line: 797, column: 4, scope: !5661)
!5681 = !DILocation(line: 798, column: 4, scope: !5661)
!5682 = !DILocation(line: 799, column: 4, scope: !5661)
!5683 = !DILocation(line: 800, column: 8, scope: !5661)
!5684 = !DILocation(line: 801, column: 13, scope: !5685)
!5685 = distinct !DILexicalBlock(scope: !5661, file: !3, line: 800, column: 8)
!5686 = !DILocation(line: 801, column: 6, scope: !5685)
!5687 = !DILocation(line: 802, column: 4, scope: !5661)
!5688 = !DILocation(line: 803, column: 20, scope: !5661)
!5689 = !DILocation(line: 803, column: 4, scope: !5661)
!5690 = !DILocation(line: 804, column: 8, scope: !5691)
!5691 = distinct !DILexicalBlock(scope: !5661, file: !3, line: 804, column: 8)
!5692 = !DILocation(line: 804, column: 36, scope: !5691)
!5693 = !DILocation(line: 804, column: 33, scope: !5691)
!5694 = !DILocation(line: 804, column: 8, scope: !5661)
!5695 = !DILocation(line: 805, column: 11, scope: !5691)
!5696 = !DILocation(line: 805, column: 6, scope: !5691)
!5697 = !DILocation(line: 806, column: 4, scope: !5661)
!5698 = !DILocation(line: 807, column: 8, scope: !5699)
!5699 = distinct !DILexicalBlock(scope: !5661, file: !3, line: 807, column: 8)
!5700 = !DILocation(line: 807, column: 25, scope: !5699)
!5701 = !DILocation(line: 807, column: 8, scope: !5661)
!5702 = !DILocation(line: 808, column: 19, scope: !5699)
!5703 = !DILocation(line: 808, column: 6, scope: !5699)
!5704 = !DILocation(line: 809, column: 10, scope: !5661)
!5705 = !DILocation(line: 810, column: 4, scope: !5661)
!5706 = !DILocation(line: 811, column: 4, scope: !5661)
!5707 = !DILocation(line: 813, column: 2, scope: !5662)
!5708 = !DILocation(line: 816, column: 7, scope: !5659)
!5709 = !DILocation(line: 818, column: 14, scope: !5659)
!5710 = !DILocation(line: 819, column: 5, scope: !5650)
!5711 = !DILocation(line: 821, column: 1, scope: !5650)
!5712 = distinct !DISubprogram(name: "build_and_add_sum", scope: !3, file: !3, line: 828, type: !5713, scopeLine: 829, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5715)
!5713 = !DISubroutineType(types: !5714)
!5714 = !{!1013, !689, !689, !689, !134}
!5715 = !{!5716, !5717, !5718, !5719, !5720, !5721, !5722, !5723, !5724, !5725, !5733, !5740, !5746}
!5716 = !DILocalVariable(name: "tmpvar", arg: 1, scope: !5712, file: !3, line: 828, type: !689)
!5717 = !DILocalVariable(name: "op1", arg: 2, scope: !5712, file: !3, line: 828, type: !689)
!5718 = !DILocalVariable(name: "op2", arg: 3, scope: !5712, file: !3, line: 828, type: !689)
!5719 = !DILocalVariable(name: "opcode", arg: 4, scope: !5712, file: !3, line: 828, type: !134)
!5720 = !DILocalVariable(name: "op1def", scope: !5712, file: !3, line: 830, type: !1013)
!5721 = !DILocalVariable(name: "op2def", scope: !5712, file: !3, line: 830, type: !1013)
!5722 = !DILocalVariable(name: "gsi", scope: !5712, file: !3, line: 831, type: !2770)
!5723 = !DILocalVariable(name: "op", scope: !5712, file: !3, line: 832, type: !689)
!5724 = !DILocalVariable(name: "sum", scope: !5712, file: !3, line: 833, type: !1013)
!5725 = !DILocalVariable(name: "e", scope: !5726, file: !3, line: 869, type: !993)
!5726 = distinct !DILexicalBlock(scope: !5727, file: !3, line: 868, column: 6)
!5727 = distinct !DILexicalBlock(scope: !5728, file: !3, line: 862, column: 8)
!5728 = distinct !DILexicalBlock(scope: !5729, file: !3, line: 861, column: 2)
!5729 = distinct !DILexicalBlock(scope: !5730, file: !3, line: 855, column: 11)
!5730 = distinct !DILexicalBlock(scope: !5731, file: !3, line: 854, column: 5)
!5731 = distinct !DILexicalBlock(scope: !5732, file: !3, line: 851, column: 12)
!5732 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 845, column: 7)
!5733 = !DILocalVariable(name: "ei", scope: !5726, file: !3, line: 870, type: !5734)
!5734 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !343, line: 682, baseType: !5735)
!5735 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !343, line: 679, size: 128, elements: !5736)
!5736 = !{!5737, !5738}
!5737 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !5735, file: !343, line: 680, baseType: !7, size: 32)
!5738 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !5735, file: !343, line: 681, baseType: !5739, size: 64, offset: 64)
!5739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !981, size: 64)
!5740 = !DILocalVariable(name: "e", scope: !5741, file: !3, line: 894, type: !993)
!5741 = distinct !DILexicalBlock(scope: !5742, file: !3, line: 893, column: 6)
!5742 = distinct !DILexicalBlock(scope: !5743, file: !3, line: 887, column: 8)
!5743 = distinct !DILexicalBlock(scope: !5744, file: !3, line: 886, column: 2)
!5744 = distinct !DILexicalBlock(scope: !5745, file: !3, line: 880, column: 11)
!5745 = distinct !DILexicalBlock(scope: !5731, file: !3, line: 879, column: 5)
!5746 = !DILocalVariable(name: "ei", scope: !5741, file: !3, line: 895, type: !5734)
!5747 = !DILocation(line: 0, scope: !5712)
!5748 = !DILocation(line: 831, column: 3, scope: !5712)
!5749 = !DILocation(line: 836, column: 9, scope: !5712)
!5750 = !DILocation(line: 837, column: 8, scope: !5712)
!5751 = !DILocation(line: 838, column: 3, scope: !5712)
!5752 = !DILocation(line: 841, column: 7, scope: !5753)
!5753 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 841, column: 7)
!5754 = !DILocation(line: 841, column: 23, scope: !5753)
!5755 = !DILocation(line: 841, column: 7, scope: !5712)
!5756 = !DILocation(line: 842, column: 14, scope: !5753)
!5757 = !DILocation(line: 842, column: 5, scope: !5753)
!5758 = !DILocation(line: 843, column: 7, scope: !5759)
!5759 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 843, column: 7)
!5760 = !DILocation(line: 843, column: 23, scope: !5759)
!5761 = !DILocation(line: 843, column: 7, scope: !5712)
!5762 = !DILocation(line: 844, column: 14, scope: !5759)
!5763 = !DILocation(line: 844, column: 5, scope: !5759)
!5764 = !DILocation(line: 845, column: 9, scope: !5732)
!5765 = !DILocation(line: 845, column: 16, scope: !5732)
!5766 = !DILocation(line: 845, column: 19, scope: !5732)
!5767 = !DILocation(line: 846, column: 7, scope: !5732)
!5768 = !DILocation(line: 846, column: 12, scope: !5732)
!5769 = !DILocation(line: 846, column: 19, scope: !5732)
!5770 = !DILocation(line: 846, column: 22, scope: !5732)
!5771 = !DILocation(line: 845, column: 7, scope: !5712)
!5772 = !DILocation(line: 848, column: 13, scope: !5773)
!5773 = distinct !DILexicalBlock(scope: !5732, file: !3, line: 847, column: 5)
!5774 = !DILocation(line: 848, column: 44, scope: !5773)
!5775 = !DILocation(line: 848, column: 31, scope: !5773)
!5776 = !DILocation(line: 849, column: 7, scope: !5773)
!5777 = !DILocation(line: 850, column: 5, scope: !5773)
!5778 = !DILocation(line: 851, column: 21, scope: !5731)
!5779 = !DILocation(line: 851, column: 24, scope: !5731)
!5780 = !DILocation(line: 852, column: 5, scope: !5731)
!5781 = !DILocation(line: 852, column: 9, scope: !5731)
!5782 = !DILocation(line: 852, column: 16, scope: !5731)
!5783 = !DILocation(line: 852, column: 20, scope: !5731)
!5784 = !DILocation(line: 853, column: 9, scope: !5731)
!5785 = !DILocation(line: 853, column: 12, scope: !5731)
!5786 = !DILocation(line: 851, column: 12, scope: !5732)
!5787 = !DILocation(line: 855, column: 11, scope: !5729)
!5788 = !DILocation(line: 855, column: 32, scope: !5729)
!5789 = !DILocation(line: 855, column: 11, scope: !5730)
!5790 = !DILocation(line: 857, column: 10, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5729, file: !3, line: 856, column: 2)
!5792 = !DILocation(line: 857, column: 28, scope: !5791)
!5793 = !DILocation(line: 858, column: 4, scope: !5791)
!5794 = !DILocation(line: 859, column: 2, scope: !5791)
!5795 = !DILocation(line: 862, column: 9, scope: !5727)
!5796 = !DILocation(line: 862, column: 8, scope: !5728)
!5797 = !DILocation(line: 864, column: 14, scope: !5798)
!5798 = distinct !DILexicalBlock(scope: !5727, file: !3, line: 863, column: 6)
!5799 = !DILocation(line: 865, column: 8, scope: !5798)
!5800 = !DILocation(line: 866, column: 6, scope: !5798)
!5801 = !DILocation(line: 869, column: 8, scope: !5726)
!5802 = !DILocation(line: 870, column: 8, scope: !5726)
!5803 = !DILocation(line: 872, column: 8, scope: !5804)
!5804 = distinct !DILexicalBlock(scope: !5726, file: !3, line: 872, column: 8)
!5805 = !DILocation(line: 0, scope: !5806)
!5806 = distinct !DILexicalBlock(scope: !5804, file: !3, line: 872, column: 8)
!5807 = !DILocation(line: 872, column: 8, scope: !5806)
!5808 = !DILocation(line: 0, scope: !5726)
!5809 = !DILocation(line: 873, column: 7, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5806, file: !3, line: 873, column: 7)
!5811 = !DILocation(line: 873, column: 10, scope: !5810)
!5812 = !DILocation(line: 873, column: 16, scope: !5810)
!5813 = !DILocation(line: 873, column: 7, scope: !5806)
!5814 = !DILocation(line: 874, column: 5, scope: !5810)
!5815 = distinct !{!5815, !5803, !5816}
!5816 = !DILocation(line: 874, column: 41, scope: !5804)
!5817 = !DILocation(line: 875, column: 6, scope: !5727)
!5818 = !DILocation(line: 880, column: 11, scope: !5744)
!5819 = !DILocation(line: 880, column: 32, scope: !5744)
!5820 = !DILocation(line: 880, column: 11, scope: !5745)
!5821 = !DILocation(line: 882, column: 10, scope: !5822)
!5822 = distinct !DILexicalBlock(scope: !5744, file: !3, line: 881, column: 2)
!5823 = !DILocation(line: 882, column: 28, scope: !5822)
!5824 = !DILocation(line: 883, column: 4, scope: !5822)
!5825 = !DILocation(line: 884, column: 2, scope: !5822)
!5826 = !DILocation(line: 887, column: 9, scope: !5742)
!5827 = !DILocation(line: 887, column: 8, scope: !5743)
!5828 = !DILocation(line: 889, column: 14, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5742, file: !3, line: 888, column: 6)
!5830 = !DILocation(line: 890, column: 8, scope: !5829)
!5831 = !DILocation(line: 891, column: 6, scope: !5829)
!5832 = !DILocation(line: 894, column: 8, scope: !5741)
!5833 = !DILocation(line: 895, column: 8, scope: !5741)
!5834 = !DILocation(line: 897, column: 8, scope: !5835)
!5835 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 897, column: 8)
!5836 = !DILocation(line: 0, scope: !5837)
!5837 = distinct !DILexicalBlock(scope: !5835, file: !3, line: 897, column: 8)
!5838 = !DILocation(line: 897, column: 8, scope: !5837)
!5839 = !DILocation(line: 0, scope: !5741)
!5840 = !DILocation(line: 898, column: 7, scope: !5841)
!5841 = distinct !DILexicalBlock(scope: !5837, file: !3, line: 898, column: 7)
!5842 = !DILocation(line: 898, column: 10, scope: !5841)
!5843 = !DILocation(line: 898, column: 16, scope: !5841)
!5844 = !DILocation(line: 898, column: 7, scope: !5837)
!5845 = !DILocation(line: 899, column: 5, scope: !5841)
!5846 = distinct !{!5846, !5834, !5847}
!5847 = !DILocation(line: 899, column: 41, scope: !5835)
!5848 = !DILocation(line: 900, column: 6, scope: !5742)
!5849 = !DILocation(line: 903, column: 3, scope: !5712)
!5850 = !DILocation(line: 906, column: 1, scope: !5712)
!5851 = !DILocation(line: 905, column: 3, scope: !5712)
!5852 = distinct !DISubprogram(name: "VEC_oecount_heap_free", scope: !3, file: !3, line: 742, type: !5853, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5855)
!5853 = !DISubroutineType(types: !5854)
!5854 = !{null, !5568}
!5855 = !{!5856}
!5856 = !DILocalVariable(name: "vec_", arg: 1, scope: !5852, file: !3, line: 742, type: !5568)
!5857 = !DILocation(line: 0, scope: !5852)
!5858 = !DILocation(line: 742, column: 1, scope: !5859)
!5859 = distinct !DILexicalBlock(scope: !5852, file: !3, line: 742, column: 1)
!5860 = !DILocation(line: 742, column: 1, scope: !5852)
!5861 = distinct !DISubprogram(name: "VEC_oecount_heap_reserve", scope: !3, file: !3, line: 742, type: !5862, scopeLine: 742, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5864)
!5862 = !DISubroutineType(types: !5863)
!5863 = !{!676, !5568, !676}
!5864 = !{!5865, !5866, !5867}
!5865 = !DILocalVariable(name: "vec_", arg: 1, scope: !5861, file: !3, line: 742, type: !5568)
!5866 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5861, file: !3, line: 742, type: !676)
!5867 = !DILocalVariable(name: "extend", scope: !5861, file: !3, line: 742, type: !676)
!5868 = !DILocation(line: 0, scope: !5861)
!5869 = !DILocation(line: 742, column: 1, scope: !5861)
!5870 = !DILocation(line: 742, column: 1, scope: !5871)
!5871 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 742, column: 1)
!5872 = distinct !DISubprogram(name: "VEC_oecount_base_quick_push", scope: !3, file: !3, line: 741, type: !5873, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5875)
!5873 = !DISubroutineType(types: !5874)
!5874 = !{!4049, !5586, !2090}
!5875 = !{!5876, !5877, !5878}
!5876 = !DILocalVariable(name: "vec_", arg: 1, scope: !5872, file: !3, line: 741, type: !5586)
!5877 = !DILocalVariable(name: "obj_", arg: 2, scope: !5872, file: !3, line: 741, type: !2090)
!5878 = !DILocalVariable(name: "slot_", scope: !5872, file: !3, line: 741, type: !4049)
!5879 = !DILocation(line: 0, scope: !5872)
!5880 = !DILocation(line: 741, column: 1, scope: !5872)
!5881 = !DILocation(line: 741, column: 1, scope: !5882)
!5882 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 741, column: 1)
!5883 = distinct !DISubprogram(name: "VEC_oecount_base_space", scope: !3, file: !3, line: 741, type: !5884, scopeLine: 741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5886)
!5884 = !DISubroutineType(types: !5885)
!5885 = !{!676, !5586, !676}
!5886 = !{!5887, !5888}
!5887 = !DILocalVariable(name: "vec_", arg: 1, scope: !5883, file: !3, line: 741, type: !5586)
!5888 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5883, file: !3, line: 741, type: !676)
!5889 = !DILocation(line: 0, scope: !5883)
!5890 = !DILocation(line: 741, column: 1, scope: !5883)
!5891 = distinct !DISubprogram(name: "set_ssa_use_from_ptr", scope: !3403, file: !3403, line: 233, type: !5892, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5894)
!5892 = !DISubroutineType(types: !5893)
!5893 = !{null, !2049, !689}
!5894 = !{!5895, !5896}
!5895 = !DILocalVariable(name: "use", arg: 1, scope: !5891, file: !3403, line: 233, type: !2049)
!5896 = !DILocalVariable(name: "val", arg: 2, scope: !5891, file: !3403, line: 233, type: !689)
!5897 = !DILocation(line: 0, scope: !5891)
!5898 = !DILocation(line: 235, column: 3, scope: !5891)
!5899 = !DILocation(line: 236, column: 10, scope: !5891)
!5900 = !DILocation(line: 236, column: 15, scope: !5891)
!5901 = !DILocation(line: 237, column: 3, scope: !5891)
!5902 = !DILocation(line: 238, column: 1, scope: !5891)
!5903 = distinct !DISubprogram(name: "delink_imm_use", scope: !3403, file: !3403, line: 188, type: !5904, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5906)
!5904 = !DISubroutineType(types: !5905)
!5905 = !{null, !2050}
!5906 = !{!5907}
!5907 = !DILocalVariable(name: "linknode", arg: 1, scope: !5903, file: !3403, line: 188, type: !2050)
!5908 = !DILocation(line: 0, scope: !5903)
!5909 = !DILocation(line: 191, column: 17, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5903, file: !3403, line: 191, column: 7)
!5911 = !DILocation(line: 191, column: 22, scope: !5910)
!5912 = !DILocation(line: 191, column: 7, scope: !5903)
!5913 = !DILocation(line: 194, column: 36, scope: !5903)
!5914 = !DILocation(line: 194, column: 19, scope: !5903)
!5915 = !DILocation(line: 194, column: 24, scope: !5903)
!5916 = !DILocation(line: 195, column: 36, scope: !5903)
!5917 = !DILocation(line: 195, column: 13, scope: !5903)
!5918 = !DILocation(line: 195, column: 24, scope: !5903)
!5919 = !DILocation(line: 196, column: 18, scope: !5903)
!5920 = !DILocation(line: 197, column: 18, scope: !5903)
!5921 = !DILocation(line: 198, column: 1, scope: !5903)
!5922 = distinct !DISubprogram(name: "link_imm_use", scope: !3403, file: !3403, line: 214, type: !5923, scopeLine: 215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5925)
!5923 = !DISubroutineType(types: !5924)
!5924 = !{null, !2050, !689}
!5925 = !{!5926, !5927, !5928}
!5926 = !DILocalVariable(name: "linknode", arg: 1, scope: !5922, file: !3403, line: 214, type: !2050)
!5927 = !DILocalVariable(name: "def", arg: 2, scope: !5922, file: !3403, line: 214, type: !689)
!5928 = !DILocalVariable(name: "root", scope: !5922, file: !3403, line: 216, type: !2050)
!5929 = !DILocation(line: 0, scope: !5922)
!5930 = !DILocation(line: 218, column: 8, scope: !5931)
!5931 = distinct !DILexicalBlock(scope: !5922, file: !3403, line: 218, column: 7)
!5932 = !DILocation(line: 218, column: 12, scope: !5931)
!5933 = !DILocation(line: 218, column: 15, scope: !5931)
!5934 = !DILocation(line: 218, column: 31, scope: !5931)
!5935 = !DILocation(line: 218, column: 7, scope: !5922)
!5936 = !DILocation(line: 219, column: 15, scope: !5931)
!5937 = !DILocation(line: 219, column: 20, scope: !5931)
!5938 = !DILocation(line: 219, column: 5, scope: !5931)
!5939 = !DILocation(line: 222, column: 16, scope: !5940)
!5940 = distinct !DILexicalBlock(scope: !5931, file: !3403, line: 221, column: 5)
!5941 = !DILocation(line: 227, column: 7, scope: !5940)
!5942 = !DILocation(line: 229, column: 1, scope: !5922)
!5943 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !3403, file: !3403, line: 202, type: !5944, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5946)
!5944 = !DISubroutineType(types: !5945)
!5945 = !{null, !2050, !2050}
!5946 = !{!5947, !5948}
!5947 = !DILocalVariable(name: "linknode", arg: 1, scope: !5943, file: !3403, line: 202, type: !2050)
!5948 = !DILocalVariable(name: "list", arg: 2, scope: !5943, file: !3403, line: 202, type: !2050)
!5949 = !DILocation(line: 0, scope: !5943)
!5950 = !DILocation(line: 206, column: 13, scope: !5943)
!5951 = !DILocation(line: 206, column: 18, scope: !5943)
!5952 = !DILocation(line: 207, column: 26, scope: !5943)
!5953 = !DILocation(line: 207, column: 13, scope: !5943)
!5954 = !DILocation(line: 207, column: 18, scope: !5943)
!5955 = !DILocation(line: 208, column: 9, scope: !5943)
!5956 = !DILocation(line: 208, column: 15, scope: !5943)
!5957 = !DILocation(line: 208, column: 20, scope: !5943)
!5958 = !DILocation(line: 209, column: 14, scope: !5943)
!5959 = !DILocation(line: 210, column: 1, scope: !5943)
!5960 = distinct !DISubprogram(name: "make_ssa_name", scope: !3403, file: !3403, line: 1245, type: !5961, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5963)
!5961 = !DISubroutineType(types: !5962)
!5962 = !{!689, !689, !1013}
!5963 = !{!5964, !5965}
!5964 = !DILocalVariable(name: "var", arg: 1, scope: !5960, file: !3403, line: 1245, type: !689)
!5965 = !DILocalVariable(name: "stmt", arg: 2, scope: !5960, file: !3403, line: 1245, type: !1013)
!5966 = !DILocation(line: 0, scope: !5960)
!5967 = !DILocation(line: 1247, column: 28, scope: !5960)
!5968 = !DILocation(line: 1247, column: 10, scope: !5960)
!5969 = !DILocation(line: 1247, column: 3, scope: !5960)
!5970 = distinct !DISubprogram(name: "gimple_assign_set_lhs", scope: !574, file: !574, line: 1714, type: !3622, scopeLine: 1715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5971)
!5971 = !{!5972, !5973}
!5972 = !DILocalVariable(name: "gs", arg: 1, scope: !5970, file: !574, line: 1714, type: !1013)
!5973 = !DILocalVariable(name: "lhs", arg: 2, scope: !5970, file: !574, line: 1714, type: !689)
!5974 = !DILocation(line: 0, scope: !5970)
!5975 = !DILocation(line: 1717, column: 3, scope: !5970)
!5976 = !DILocation(line: 1719, column: 7, scope: !5977)
!5977 = distinct !DILexicalBlock(scope: !5970, file: !574, line: 1719, column: 7)
!5978 = !DILocation(line: 1719, column: 11, scope: !5977)
!5979 = !DILocation(line: 1719, column: 14, scope: !5977)
!5980 = !DILocation(line: 1719, column: 30, scope: !5977)
!5981 = !DILocation(line: 1719, column: 7, scope: !5970)
!5982 = !DILocation(line: 1720, column: 5, scope: !5977)
!5983 = !DILocation(line: 1720, column: 29, scope: !5977)
!5984 = !DILocation(line: 1721, column: 1, scope: !5970)
!5985 = distinct !DISubprogram(name: "gimple_nop_p", scope: !574, file: !574, line: 4304, type: !3145, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5986)
!5986 = !{!5987}
!5987 = !DILocalVariable(name: "g", arg: 1, scope: !5985, file: !574, line: 4304, type: !3147)
!5988 = !DILocation(line: 0, scope: !5985)
!5989 = !DILocation(line: 4306, column: 10, scope: !5985)
!5990 = !DILocation(line: 4306, column: 26, scope: !5985)
!5991 = !DILocation(line: 4306, column: 3, scope: !5985)
!5992 = distinct !DISubprogram(name: "gsi_after_labels", scope: !574, file: !574, line: 4510, type: !3098, scopeLine: 4511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !5993)
!5993 = !{!5994, !5995}
!5994 = !DILocalVariable(name: "bb", arg: 1, scope: !5992, file: !574, line: 4510, type: !1465)
!5995 = !DILocalVariable(name: "gsi", scope: !5992, file: !574, line: 4512, type: !2770)
!5996 = !DILocation(line: 0, scope: !5992)
!5997 = !DILocation(line: 4512, column: 24, scope: !5992)
!5998 = !DILocation(line: 4512, column: 30, scope: !5992)
!5999 = !DILocation(line: 4514, column: 3, scope: !5992)
!6000 = !DILocation(line: 4514, column: 11, scope: !5992)
!6001 = !DILocation(line: 4514, column: 27, scope: !5992)
!6002 = !DILocation(line: 4514, column: 43, scope: !5992)
!6003 = !DILocation(line: 4514, column: 30, scope: !5992)
!6004 = !DILocation(line: 4514, column: 59, scope: !5992)
!6005 = !DILocation(line: 4515, column: 5, scope: !5992)
!6006 = distinct !{!6006, !5999, !6007}
!6007 = !DILocation(line: 4515, column: 19, scope: !5992)
!6008 = !DILocation(line: 4517, column: 3, scope: !5992)
!6009 = distinct !DISubprogram(name: "single_succ", scope: !343, file: !343, line: 663, type: !6010, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6012)
!6010 = !DISubroutineType(types: !6011)
!6011 = !{!1465, !3281}
!6012 = !{!6013}
!6013 = !DILocalVariable(name: "bb", arg: 1, scope: !6009, file: !343, line: 663, type: !3281)
!6014 = !DILocation(line: 0, scope: !6009)
!6015 = !DILocation(line: 665, column: 10, scope: !6009)
!6016 = !DILocation(line: 665, column: 33, scope: !6009)
!6017 = !DILocation(line: 665, column: 3, scope: !6009)
!6018 = distinct !DISubprogram(name: "ei_start_1", scope: !343, file: !343, line: 696, type: !6019, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6021)
!6019 = !DISubroutineType(types: !6020)
!6020 = !{!5734, !5739}
!6021 = !{!6022, !6023}
!6022 = !DILocalVariable(name: "ev", arg: 1, scope: !6018, file: !343, line: 696, type: !5739)
!6023 = !DILocalVariable(name: "i", scope: !6018, file: !343, line: 698, type: !5734)
!6024 = !DILocation(line: 0, scope: !6018)
!6025 = !DILocation(line: 700, column: 5, scope: !6018)
!6026 = !DILocation(line: 700, column: 11, scope: !6018)
!6027 = !DILocation(line: 701, column: 5, scope: !6018)
!6028 = !DILocation(line: 701, column: 15, scope: !6018)
!6029 = !DILocation(line: 703, column: 3, scope: !6018)
!6030 = distinct !DISubprogram(name: "ei_cond", scope: !343, file: !343, line: 771, type: !6031, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6034)
!6031 = !DISubroutineType(types: !6032)
!6032 = !{!675, !5734, !6033}
!6033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !993, size: 64)
!6034 = !{!6035, !6036}
!6035 = !DILocalVariable(name: "ei", arg: 1, scope: !6030, file: !343, line: 771, type: !5734)
!6036 = !DILocalVariable(name: "p", arg: 2, scope: !6030, file: !343, line: 771, type: !6033)
!6037 = !DILocation(line: 0, scope: !6030)
!6038 = !DILocation(line: 773, column: 8, scope: !6039)
!6039 = distinct !DILexicalBlock(scope: !6030, file: !343, line: 773, column: 7)
!6040 = !DILocation(line: 773, column: 7, scope: !6030)
!6041 = !DILocation(line: 775, column: 12, scope: !6042)
!6042 = distinct !DILexicalBlock(scope: !6039, file: !343, line: 774, column: 5)
!6043 = !DILocation(line: 776, column: 7, scope: !6042)
!6044 = !DILocation(line: 781, column: 7, scope: !6045)
!6045 = distinct !DILexicalBlock(scope: !6039, file: !343, line: 779, column: 5)
!6046 = !DILocation(line: 0, scope: !6039)
!6047 = !DILocation(line: 783, column: 1, scope: !6030)
!6048 = distinct !DISubprogram(name: "ei_next", scope: !343, file: !343, line: 736, type: !6049, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6052)
!6049 = !DISubroutineType(types: !6050)
!6050 = !{null, !6051}
!6051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5734, size: 64)
!6052 = !{!6053}
!6053 = !DILocalVariable(name: "i", arg: 1, scope: !6048, file: !343, line: 736, type: !6051)
!6054 = !DILocation(line: 0, scope: !6048)
!6055 = !DILocation(line: 738, column: 3, scope: !6048)
!6056 = !DILocation(line: 739, column: 11, scope: !6048)
!6057 = !DILocation(line: 740, column: 1, scope: !6048)
!6058 = distinct !DISubprogram(name: "single_succ_edge", scope: !343, file: !343, line: 643, type: !6059, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6061)
!6059 = !DISubroutineType(types: !6060)
!6060 = !{!993, !3281}
!6061 = !{!6062}
!6062 = !DILocalVariable(name: "bb", arg: 1, scope: !6058, file: !343, line: 643, type: !3281)
!6063 = !DILocation(line: 0, scope: !6058)
!6064 = !DILocation(line: 645, column: 3, scope: !6058)
!6065 = !DILocation(line: 646, column: 10, scope: !6058)
!6066 = !DILocation(line: 646, column: 3, scope: !6058)
!6067 = distinct !DISubprogram(name: "single_succ_p", scope: !343, file: !343, line: 626, type: !6068, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6070)
!6068 = !DISubroutineType(types: !6069)
!6069 = !{!675, !3281}
!6070 = !{!6071}
!6071 = !DILocalVariable(name: "bb", arg: 1, scope: !6067, file: !343, line: 626, type: !3281)
!6072 = !DILocation(line: 0, scope: !6067)
!6073 = !DILocation(line: 628, column: 10, scope: !6067)
!6074 = !DILocation(line: 628, column: 33, scope: !6067)
!6075 = !DILocation(line: 628, column: 3, scope: !6067)
!6076 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !343, file: !343, line: 150, type: !6077, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6081)
!6077 = !DISubroutineType(types: !6078)
!6078 = !{!993, !6079, !7}
!6079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6080, size: 64)
!6080 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !986)
!6081 = !{!6082, !6083}
!6082 = !DILocalVariable(name: "vec_", arg: 1, scope: !6076, file: !343, line: 150, type: !6079)
!6083 = !DILocalVariable(name: "ix_", arg: 2, scope: !6076, file: !343, line: 150, type: !7)
!6084 = !DILocation(line: 0, scope: !6076)
!6085 = !DILocation(line: 150, column: 1, scope: !6076)
!6086 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !343, file: !343, line: 150, type: !6087, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6089)
!6087 = !DISubroutineType(types: !6088)
!6088 = !{!7, !6079}
!6089 = !{!6090}
!6090 = !DILocalVariable(name: "vec_", arg: 1, scope: !6086, file: !343, line: 150, type: !6079)
!6091 = !DILocation(line: 0, scope: !6086)
!6092 = !DILocation(line: 150, column: 1, scope: !6086)
!6093 = distinct !DISubprogram(name: "ei_end_p", scope: !343, file: !343, line: 721, type: !6094, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6096)
!6094 = !DISubroutineType(types: !6095)
!6095 = !{!675, !5734}
!6096 = !{!6097}
!6097 = !DILocalVariable(name: "i", arg: 1, scope: !6093, file: !343, line: 721, type: !5734)
!6098 = !DILocation(line: 723, column: 22, scope: !6093)
!6099 = !DILocation(line: 723, column: 19, scope: !6093)
!6100 = !DILocation(line: 723, column: 10, scope: !6093)
!6101 = !DILocation(line: 723, column: 3, scope: !6093)
!6102 = distinct !DISubprogram(name: "ei_edge", scope: !343, file: !343, line: 752, type: !6103, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6105)
!6103 = !DISubroutineType(types: !6104)
!6104 = !{!993, !5734}
!6105 = !{!6106}
!6106 = !DILocalVariable(name: "i", arg: 1, scope: !6102, file: !343, line: 752, type: !5734)
!6107 = !DILocation(line: 754, column: 10, scope: !6102)
!6108 = !DILocation(line: 754, column: 3, scope: !6102)
!6109 = distinct !DISubprogram(name: "ei_container", scope: !343, file: !343, line: 685, type: !6110, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6112)
!6110 = !DISubroutineType(types: !6111)
!6111 = !{!981, !5734}
!6112 = !{!6113}
!6113 = !DILocalVariable(name: "i", arg: 1, scope: !6109, file: !343, line: 685, type: !5734)
!6114 = !DILocation(line: 687, column: 3, scope: !6109)
!6115 = !DILocation(line: 688, column: 10, scope: !6109)
!6116 = !DILocation(line: 688, column: 3, scope: !6109)
!6117 = distinct !DISubprogram(name: "is_phi_for_stmt", scope: !3, file: !3, line: 1252, type: !6118, scopeLine: 1253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6120)
!6118 = !DISubroutineType(types: !6119)
!6119 = !{!675, !1013, !689}
!6120 = !{!6121, !6122, !6123, !6124, !6125, !6126}
!6121 = !DILocalVariable(name: "stmt", arg: 1, scope: !6117, file: !3, line: 1252, type: !1013)
!6122 = !DILocalVariable(name: "operand", arg: 2, scope: !6117, file: !3, line: 1252, type: !689)
!6123 = !DILocalVariable(name: "def_stmt", scope: !6117, file: !3, line: 1254, type: !1013)
!6124 = !DILocalVariable(name: "lhs", scope: !6117, file: !3, line: 1255, type: !689)
!6125 = !DILocalVariable(name: "arg_p", scope: !6117, file: !3, line: 1256, type: !2049)
!6126 = !DILocalVariable(name: "i", scope: !6117, file: !3, line: 1257, type: !6127)
!6127 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !667, line: 140, baseType: !6128)
!6128 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !667, line: 131, size: 320, elements: !6129)
!6129 = !{!6130, !6131, !6132, !6134, !6136, !6137, !6138}
!6130 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !6128, file: !667, line: 133, baseType: !675, size: 8)
!6131 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !6128, file: !667, line: 134, baseType: !666, size: 32, offset: 32)
!6132 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !6128, file: !667, line: 135, baseType: !6133, size: 64, offset: 64)
!6133 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !667, line: 42, baseType: !1042)
!6134 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !6128, file: !667, line: 136, baseType: !6135, size: 64, offset: 128)
!6135 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !667, line: 50, baseType: !1049)
!6136 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !6128, file: !667, line: 137, baseType: !676, size: 32, offset: 192)
!6137 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !6128, file: !667, line: 138, baseType: !676, size: 32, offset: 224)
!6138 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !6128, file: !667, line: 139, baseType: !1013, size: 64, offset: 256)
!6139 = !DILocation(line: 0, scope: !6117)
!6140 = !DILocation(line: 1257, column: 3, scope: !6117)
!6141 = !DILocation(line: 1259, column: 7, scope: !6142)
!6142 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 1259, column: 7)
!6143 = !DILocation(line: 1259, column: 27, scope: !6142)
!6144 = !DILocation(line: 1259, column: 7, scope: !6117)
!6145 = !DILocation(line: 1262, column: 9, scope: !6117)
!6146 = !DILocation(line: 1264, column: 14, scope: !6117)
!6147 = !DILocation(line: 1265, column: 7, scope: !6148)
!6148 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 1265, column: 7)
!6149 = !DILocation(line: 1265, column: 30, scope: !6148)
!6150 = !DILocation(line: 1265, column: 7, scope: !6117)
!6151 = !DILocation(line: 1268, column: 3, scope: !6152)
!6152 = distinct !DILexicalBlock(scope: !6117, file: !3, line: 1268, column: 3)
!6153 = !DILocation(line: 0, scope: !6152)
!6154 = !DILocation(line: 1268, column: 3, scope: !6155)
!6155 = distinct !DILexicalBlock(scope: !6152, file: !3, line: 1268, column: 3)
!6156 = !DILocation(line: 1269, column: 16, scope: !6157)
!6157 = distinct !DILexicalBlock(scope: !6155, file: !3, line: 1269, column: 9)
!6158 = !DILocation(line: 1269, column: 13, scope: !6157)
!6159 = !DILocation(line: 1269, column: 9, scope: !6155)
!6160 = distinct !{!6160, !6151, !6161}
!6161 = !DILocation(line: 1270, column: 14, scope: !6152)
!6162 = !DILocation(line: 1272, column: 1, scope: !6117)
!6163 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !3403, file: !3403, line: 910, type: !6164, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6167)
!6164 = !DISubroutineType(types: !6165)
!6165 = !{!2049, !6166, !1013, !676}
!6166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6127, size: 64)
!6167 = !{!6168, !6169, !6170, !6171, !6172}
!6168 = !DILocalVariable(name: "ptr", arg: 1, scope: !6163, file: !3403, line: 910, type: !6166)
!6169 = !DILocalVariable(name: "phi", arg: 2, scope: !6163, file: !3403, line: 910, type: !1013)
!6170 = !DILocalVariable(name: "flags", arg: 3, scope: !6163, file: !3403, line: 910, type: !676)
!6171 = !DILocalVariable(name: "phi_def", scope: !6163, file: !3403, line: 912, type: !689)
!6172 = !DILocalVariable(name: "comp", scope: !6163, file: !3403, line: 913, type: !676)
!6173 = !DILocation(line: 0, scope: !6163)
!6174 = !DILocation(line: 912, column: 18, scope: !6163)
!6175 = !DILocation(line: 915, column: 3, scope: !6163)
!6176 = !DILocation(line: 916, column: 8, scope: !6163)
!6177 = !DILocation(line: 916, column: 13, scope: !6163)
!6178 = !DILocation(line: 920, column: 11, scope: !6163)
!6179 = !DILocation(line: 923, column: 7, scope: !6163)
!6180 = !DILocation(line: 925, column: 17, scope: !6181)
!6181 = distinct !DILexicalBlock(scope: !6182, file: !3403, line: 924, column: 5)
!6182 = distinct !DILexicalBlock(scope: !6163, file: !3403, line: 923, column: 7)
!6183 = !DILocation(line: 926, column: 7, scope: !6181)
!6184 = !DILocation(line: 929, column: 8, scope: !6163)
!6185 = !DILocation(line: 929, column: 17, scope: !6163)
!6186 = !DILocation(line: 930, column: 18, scope: !6163)
!6187 = !DILocation(line: 930, column: 8, scope: !6163)
!6188 = !DILocation(line: 930, column: 16, scope: !6163)
!6189 = !DILocation(line: 931, column: 8, scope: !6163)
!6190 = !DILocation(line: 931, column: 18, scope: !6163)
!6191 = !DILocation(line: 932, column: 10, scope: !6163)
!6192 = !DILocation(line: 932, column: 3, scope: !6163)
!6193 = !DILocation(line: 933, column: 1, scope: !6163)
!6194 = distinct !DISubprogram(name: "op_iter_done", scope: !3403, file: !3403, line: 652, type: !6195, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6199)
!6195 = !DISubroutineType(types: !6196)
!6196 = !{!675, !6197}
!6197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6198, size: 64)
!6198 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6127)
!6199 = !{!6200}
!6200 = !DILocalVariable(name: "ptr", arg: 1, scope: !6194, file: !3403, line: 652, type: !6197)
!6201 = !DILocation(line: 0, scope: !6194)
!6202 = !DILocation(line: 654, column: 15, scope: !6194)
!6203 = !DILocation(line: 654, column: 3, scope: !6194)
!6204 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !3403, file: !3403, line: 427, type: !6205, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6207)
!6205 = !DISubroutineType(types: !6206)
!6206 = !{!689, !2049}
!6207 = !{!6208}
!6208 = !DILocalVariable(name: "use", arg: 1, scope: !6204, file: !3403, line: 427, type: !2049)
!6209 = !DILocation(line: 0, scope: !6204)
!6210 = !DILocation(line: 429, column: 17, scope: !6204)
!6211 = !DILocation(line: 429, column: 10, scope: !6204)
!6212 = !DILocation(line: 429, column: 3, scope: !6204)
!6213 = distinct !DISubprogram(name: "op_iter_next_use", scope: !3403, file: !3403, line: 659, type: !6214, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6216)
!6214 = !DISubroutineType(types: !6215)
!6215 = !{!2049, !6166}
!6216 = !{!6217, !6218}
!6217 = !DILocalVariable(name: "ptr", arg: 1, scope: !6213, file: !3403, line: 659, type: !6166)
!6218 = !DILocalVariable(name: "use_p", scope: !6213, file: !3403, line: 661, type: !2049)
!6219 = !DILocation(line: 0, scope: !6213)
!6220 = !DILocation(line: 665, column: 12, scope: !6221)
!6221 = distinct !DILexicalBlock(scope: !6213, file: !3403, line: 665, column: 7)
!6222 = !DILocation(line: 665, column: 7, scope: !6221)
!6223 = !DILocation(line: 665, column: 7, scope: !6213)
!6224 = !DILocation(line: 667, column: 15, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6221, file: !3403, line: 666, column: 5)
!6226 = !DILocation(line: 668, column: 30, scope: !6225)
!6227 = !DILocation(line: 668, column: 17, scope: !6225)
!6228 = !DILocation(line: 669, column: 7, scope: !6225)
!6229 = !DILocation(line: 671, column: 12, scope: !6230)
!6230 = distinct !DILexicalBlock(scope: !6213, file: !3403, line: 671, column: 7)
!6231 = !DILocation(line: 671, column: 25, scope: !6230)
!6232 = !DILocation(line: 671, column: 18, scope: !6230)
!6233 = !DILocation(line: 671, column: 7, scope: !6213)
!6234 = !DILocation(line: 673, column: 14, scope: !6235)
!6235 = distinct !DILexicalBlock(scope: !6230, file: !3403, line: 672, column: 5)
!6236 = !DILocation(line: 673, column: 7, scope: !6235)
!6237 = !DILocation(line: 675, column: 8, scope: !6213)
!6238 = !DILocation(line: 675, column: 13, scope: !6213)
!6239 = !DILocation(line: 676, column: 3, scope: !6213)
!6240 = !DILocation(line: 677, column: 1, scope: !6213)
!6241 = distinct !DISubprogram(name: "gimple_phi_result", scope: !574, file: !574, line: 3071, type: !3170, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6242)
!6242 = !{!6243}
!6243 = !DILocalVariable(name: "gs", arg: 1, scope: !6241, file: !574, line: 3071, type: !3147)
!6244 = !DILocation(line: 0, scope: !6241)
!6245 = !DILocation(line: 3074, column: 25, scope: !6241)
!6246 = !DILocation(line: 3074, column: 3, scope: !6241)
!6247 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !3403, file: !3403, line: 729, type: !6248, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6250)
!6248 = !DISubroutineType(types: !6249)
!6249 = !{null, !6166}
!6250 = !{!6251}
!6251 = !DILocalVariable(name: "ptr", arg: 1, scope: !6247, file: !3403, line: 729, type: !6166)
!6252 = !DILocation(line: 0, scope: !6247)
!6253 = !DILocation(line: 731, column: 8, scope: !6247)
!6254 = !DILocation(line: 731, column: 13, scope: !6247)
!6255 = !DILocation(line: 732, column: 8, scope: !6247)
!6256 = !DILocation(line: 732, column: 13, scope: !6247)
!6257 = !DILocation(line: 733, column: 8, scope: !6247)
!6258 = !DILocation(line: 733, column: 18, scope: !6247)
!6259 = !DILocation(line: 734, column: 8, scope: !6247)
!6260 = !DILocation(line: 734, column: 14, scope: !6247)
!6261 = !DILocation(line: 735, column: 8, scope: !6247)
!6262 = !DILocation(line: 735, column: 16, scope: !6247)
!6263 = !DILocation(line: 736, column: 8, scope: !6247)
!6264 = !DILocation(line: 736, column: 17, scope: !6247)
!6265 = !DILocation(line: 737, column: 8, scope: !6247)
!6266 = !DILocation(line: 737, column: 13, scope: !6247)
!6267 = !DILocation(line: 738, column: 1, scope: !6247)
!6268 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !574, file: !574, line: 3061, type: !3395, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6269)
!6269 = !{!6270}
!6270 = !DILocalVariable(name: "gs", arg: 1, scope: !6268, file: !574, line: 3061, type: !3147)
!6271 = !DILocation(line: 0, scope: !6268)
!6272 = !DILocation(line: 3064, column: 25, scope: !6268)
!6273 = !DILocation(line: 3064, column: 3, scope: !6268)
!6274 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !3403, file: !3403, line: 442, type: !6275, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6277)
!6275 = !DISubroutineType(types: !6276)
!6276 = !{!2049, !1013, !676}
!6277 = !{!6278, !6279}
!6278 = !DILocalVariable(name: "gs", arg: 1, scope: !6274, file: !3403, line: 442, type: !1013)
!6279 = !DILocalVariable(name: "i", arg: 2, scope: !6274, file: !3403, line: 442, type: !676)
!6280 = !DILocation(line: 0, scope: !6274)
!6281 = !DILocation(line: 444, column: 11, scope: !6274)
!6282 = !DILocation(line: 444, column: 35, scope: !6274)
!6283 = !DILocation(line: 444, column: 3, scope: !6274)
!6284 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !574, file: !574, line: 3100, type: !6285, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6288)
!6285 = !DISubroutineType(types: !6286)
!6286 = !{!6287, !1013, !7}
!6287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1116, size: 64)
!6288 = !{!6289, !6290}
!6289 = !DILocalVariable(name: "gs", arg: 1, scope: !6284, file: !574, line: 3100, type: !1013)
!6290 = !DILocalVariable(name: "index", arg: 2, scope: !6284, file: !574, line: 3100, type: !7)
!6291 = !DILocation(line: 0, scope: !6284)
!6292 = !DILocation(line: 3103, column: 3, scope: !6284)
!6293 = !DILocation(line: 3104, column: 12, scope: !6284)
!6294 = !DILocation(line: 3104, column: 3, scope: !6284)
!6295 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !135, file: !135, line: 182, type: !6296, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6300)
!6296 = !DISubroutineType(types: !6297)
!6297 = !{!676, !6298, !7, !1047}
!6298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6299, size: 64)
!6299 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1565)
!6300 = !{!6301, !6302, !6303}
!6301 = !DILocalVariable(name: "vec_", arg: 1, scope: !6295, file: !135, line: 182, type: !6298)
!6302 = !DILocalVariable(name: "ix_", arg: 2, scope: !6295, file: !135, line: 182, type: !7)
!6303 = !DILocalVariable(name: "ptr", arg: 3, scope: !6295, file: !135, line: 182, type: !1047)
!6304 = !DILocation(line: 0, scope: !6295)
!6305 = !DILocation(line: 182, column: 1, scope: !6306)
!6306 = distinct !DILexicalBlock(scope: !6295, file: !135, line: 182, column: 1)
!6307 = !DILocation(line: 182, column: 1, scope: !6295)
!6308 = !DILocation(line: 182, column: 1, scope: !6309)
!6309 = distinct !DILexicalBlock(scope: !6306, file: !135, line: 182, column: 1)
!6310 = !DILocation(line: 182, column: 1, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6306, file: !135, line: 182, column: 1)
!6312 = !DILocation(line: 0, scope: !6306)
!6313 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !135, file: !135, line: 184, type: !6314, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !6316)
!6314 = !DISubroutineType(types: !6315)
!6315 = !{null, !3640}
!6316 = !{!6317}
!6317 = !DILocalVariable(name: "vec_", arg: 1, scope: !6313, file: !135, line: 184, type: !3640)
!6318 = !DILocation(line: 0, scope: !6313)
!6319 = !DILocation(line: 184, column: 1, scope: !6320)
!6320 = distinct !DILexicalBlock(scope: !6313, file: !135, line: 184, column: 1)
!6321 = !DILocation(line: 184, column: 1, scope: !6313)
