; ModuleID = 'tree-vect-slp.bc'
source_filename = "tree-vect-slp.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.insn_data = type { i8*, %union.anon.2, %struct.rtx_def* (%struct.rtx_def*, ...)*, %struct.insn_operand_data*, i8, i8, i8, i8 }
%union.anon.2 = type { i8* }
%struct.insn_operand_data = type { i32 (%struct.rtx_def*, i32)*, i8*, i16, i8, i8 }
%struct.VEC_vec_void_p_heap = type { %struct.VEC_vec_void_p_base }
%struct.VEC_vec_void_p_base = type { i32, i32, [1 x i8*] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.stat64 = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct._slp_instance = type { %struct._slp_tree*, i32, i32, %struct.anon.0, %struct.VEC_int_heap*, %struct.VEC_slp_tree_heap*, %union.gimple_statement_d* }
%struct._slp_tree = type { %struct._slp_tree*, %struct._slp_tree*, %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap*, i32, %struct.anon }
%struct.VEC_gimple_heap = type { %struct.VEC_gimple_base }
%struct.anon = type { i32, i32 }
%struct.anon.0 = type { i32, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_slp_tree_heap = type { %struct.VEC_slp_tree_base }
%struct.VEC_slp_tree_base = type { i32, i32, [1 x %struct._slp_tree*] }
%struct._loop_vec_info = type { %struct.loop*, %struct.basic_block_def**, %union.tree_node*, %union.tree_node*, i32, i8, i32, %struct.data_reference*, i32, i32, %struct.VEC_data_reference_p_heap*, %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap*, %struct.VEC_gimple_heap*, i32, %struct.VEC_gimple_heap*, %struct.VEC_slp_instance_heap*, i32 }
%struct.data_reference = type { %union.gimple_statement_d*, %union.tree_node*, i8*, i8, %struct.innermost_loop_behavior, %struct.indices, %struct.dr_alias, %struct.access_matrix* }
%struct.innermost_loop_behavior = type { %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.indices = type { %union.tree_node*, %struct.VEC_tree_heap* }
%struct.VEC_tree_heap = type { %struct.VEC_tree_base }
%struct.dr_alias = type { %struct.ptr_info_def*, %struct.bitmap_head_def* }
%struct.ptr_info_def = type { %struct.pt_solution }
%struct.access_matrix = type { %struct.VEC_loop_p_heap*, i32, %struct.VEC_tree_heap*, %struct.VEC_lambda_vector_gc* }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.VEC_lambda_vector_gc = type { %struct.VEC_lambda_vector_base }
%struct.VEC_lambda_vector_base = type { i32, i32, [1 x i32*] }
%struct.VEC_data_reference_p_heap = type { %struct.VEC_data_reference_p_base }
%struct.VEC_data_reference_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.VEC_ddr_p_heap = type { %struct.VEC_ddr_p_base }
%struct.VEC_ddr_p_base = type { i32, i32, [1 x %struct.data_dependence_relation*] }
%struct.data_dependence_relation = type { %struct.data_reference*, %struct.data_reference*, %union.tree_node*, %struct.VEC_subscript_p_heap*, %struct.VEC_loop_p_heap*, %struct.VEC_lambda_vector_heap*, %struct.VEC_lambda_vector_heap*, i32, i8, i8, i8 }
%struct.VEC_subscript_p_heap = type { %struct.VEC_subscript_p_base }
%struct.VEC_subscript_p_base = type { i32, i32, [1 x %struct.subscript*] }
%struct.subscript = type { %struct.conflict_function*, %struct.conflict_function*, %union.tree_node*, %union.tree_node* }
%struct.conflict_function = type { i32, [2 x %struct.VEC_tree_heap*] }
%struct.VEC_lambda_vector_heap = type { %struct.VEC_lambda_vector_base }
%struct.VEC_slp_instance_heap = type { %struct.VEC_slp_instance_base }
%struct.VEC_slp_instance_base = type { i32, i32, [1 x %struct._slp_instance*] }
%struct._bb_vec_info = type { %struct.basic_block_def*, %struct.VEC_gimple_heap*, %struct.VEC_slp_instance_heap*, %struct.VEC_data_reference_p_heap*, %struct.VEC_ddr_p_heap* }
%struct._stmt_vec_info = type { i32, %union.gimple_statement_d*, %struct._loop_vec_info*, i32, i8, %union.tree_node*, %union.gimple_statement_d*, %struct.data_reference*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i8, %union.gimple_statement_d*, %struct.VEC_dr_p_heap*, i32, %union.gimple_statement_d*, %union.gimple_statement_d*, i32, i32, i32, %union.gimple_statement_d*, i8, %struct.anon.1, i32, %struct._bb_vec_info* }
%struct.VEC_dr_p_heap = type { %struct.VEC_dr_p_base }
%struct.VEC_dr_p_base = type { i32, i32, [1 x %struct.data_reference*] }
%struct.anon.1 = type { i32, i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.immediate_use_iterator_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* }
%struct.optab_d = type { i32, i8*, i8, void (%struct.optab_d*, i8*, i8, i32)*, [87 x %struct.optab_handlers] }
%struct.optab_handlers = type { i32 }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.ssa_operand_iterator_d = type { i8, i32, %struct.def_optype_d*, %struct.use_optype_d*, i32, i32, %union.gimple_statement_d* }

@stdout = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@vect_dump = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [25 x i8] c"=== vect_analyze_slp ===\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"Failed to SLP the basic block.\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"=== vect_make_slp_decision ===\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"Decided to SLP %d instances. Unrolling factor %d\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"=== vect_detect_hybrid_slp ===\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"===vect_slp_analyze_bb===\0A\00", align 1
@compiler_params = external dso_local local_unnamed_addr global %struct.param_info*, align 8
@.str.6 = private unnamed_addr constant [55 x i8] c"not vectorized: too many instructions in basic block.\0A\00", align 1
@.str.7 = private unnamed_addr constant [52 x i8] c"not vectorized: unhandled data-ref in basic block.\0A\00", align 1
@.str.8 = private unnamed_addr constant [54 x i8] c"not vectorized: not enough data-refs in basic block.\0A\00", align 1
@.str.9 = private unnamed_addr constant [52 x i8] c"not vectorized: bad data alignment in basic block.\0A\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"not vectorized: unhandled data dependence in basic block.\0A\00", align 1
@.str.11 = private unnamed_addr constant [55 x i8] c"not vectorized: unhandled data access in basic block.\0A\00", align 1
@.str.12 = private unnamed_addr constant [55 x i8] c"not vectorized: unsupported alignment in basic block.\0A\00", align 1
@.str.13 = private unnamed_addr constant [66 x i8] c"not vectorized: failed to find SLP opportunities in basic block.\0A\00", align 1
@.str.14 = private unnamed_addr constant [47 x i8] c"not vectorized: bad operation in basic block.\0A\00", align 1
@.str.15 = private unnamed_addr constant [42 x i8] c"Basic block will be vectorized using SLP\0A\00", align 1
@.str.16 = private unnamed_addr constant [46 x i8] c"=== vect_update_slp_costs_according_to_vf ===\00", align 1
@targetm = external dso_local local_unnamed_addr global %struct.gcc_target, align 8
@.str.17 = private unnamed_addr constant [33 x i8] c"no builtin for vect permute for \00", align 1
@.str.18 = private unnamed_addr constant [26 x i8] c"unsupported vect permute \00", align 1
@.str.19 = private unnamed_addr constant [29 x i8] c"vectorizing stmts using SLP.\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"tree-vect-slp.c\00", align 1
@.str.21 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.22 = private unnamed_addr constant [11 x i8] c"SLPing BB\0A\00", align 1
@.str.23 = private unnamed_addr constant [26 x i8] c"------>SLPing statement: \00", align 1
@cfun = external dso_local local_unnamed_addr global %struct.function*, align 8
@.str.24 = private unnamed_addr constant [24 x i8] c"BASIC BLOCK VECTORIZED\0A\00", align 1
@.str.25 = private unnamed_addr constant [41 x i8] c"Build SLP failed: unsupported data-type \00", align 1
@.str.26 = private unnamed_addr constant [56 x i8] c"Build SLP failed: unrolling required in basic block SLP\00", align 1
@.str.27 = private unnamed_addr constant [48 x i8] c"Build SLP failed: unsupported load permutation \00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"Build SLP for \00", align 1
@.str.29 = private unnamed_addr constant [52 x i8] c"Build SLP failed: not GIMPLE_ASSIGN nor GIMPLE_CALL\00", align 1
@.str.30 = private unnamed_addr constant [25 x i8] c"SLP with multiple types \00", align 1
@.str.31 = private unnamed_addr constant [28 x i8] c"Build SLP failed: no optab.\00", align 1
@.str.32 = private unnamed_addr constant [46 x i8] c"Build SLP failed: op not supported by target.\00", align 1
@insn_data = external dso_local local_unnamed_addr constant [0 x %struct.insn_data], align 8
@mode_class = external dso_local local_unnamed_addr constant [87 x i8], align 16
@.str.33 = private unnamed_addr constant [47 x i8] c"Build SLP failed: different operation in stmt \00", align 1
@.str.34 = private unnamed_addr constant [48 x i8] c"Build SLP failed: different shift arguments in \00", align 1
@tree_code_type = external dso_local local_unnamed_addr constant [0 x i32], align 4
@.str.35 = private unnamed_addr constant [43 x i8] c"Build SLP failed: strided loads have gaps \00", align 1
@.str.36 = private unnamed_addr constant [86 x i8] c"Build SLP failed: the number of interleaved loads is greater than the SLP group size \00", align 1
@.str.37 = private unnamed_addr constant [46 x i8] c"Build SLP failed: unsupported unaligned load \00", align 1
@.str.38 = private unnamed_addr constant [36 x i8] c"Build SLP failed: not strided load \00", align 1
@.str.39 = private unnamed_addr constant [28 x i8] c"Build SLP failed: operation\00", align 1
@.str.40 = private unnamed_addr constant [14 x i8] c" unsupported \00", align 1
@gimple_ops_offset_ = external dso_local local_unnamed_addr constant [0 x i64], align 8
@.str.41 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local local_unnamed_addr constant [0 x i32], align 4
@.str.42 = private unnamed_addr constant [38 x i8] c"Build SLP failed: can't find def for \00", align 1
@.str.43 = private unnamed_addr constant [74 x i8] c"Build SLP failed: some of the stmts are in a pattern, and others are not \00", align 1
@.str.44 = private unnamed_addr constant [21 x i8] c"Unsupported pattern.\00", align 1
@.str.45 = private unnamed_addr constant [28 x i8] c"unsupported defining stmt: \00", align 1
@.str.46 = private unnamed_addr constant [46 x i8] c"Build SLP failed: two constant oprnds in stmt\00", align 1
@.str.47 = private unnamed_addr constant [35 x i8] c"Build SLP failed: different types \00", align 1
@.str.48 = private unnamed_addr constant [39 x i8] c"Build SLP failed: illegal type of def \00", align 1
@.str.49 = private unnamed_addr constant [18 x i8] c"Load permutation \00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"%d \00", align 1
@.str.51 = private unnamed_addr constant [48 x i8] c"Build SLP failed: unsupported data permutation \00", align 1
@stmt_vec_info_vec = external dso_local global %struct.VEC_vec_void_p_heap*, align 8
@.str.52 = private unnamed_addr constant [20 x i8] c"./tree-vectorizer.h\00", align 1
@.str.53 = private unnamed_addr constant [6 x i8] c"node \00", align 1
@.str.54 = private unnamed_addr constant [11 x i8] c"\0A\09stmt %d \00", align 1
@.str.55 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.56 = private unnamed_addr constant [21 x i8] c"./tree-flow-inline.h\00", align 1
@gimple_rhs_class_table = external dso_local local_unnamed_addr constant [0 x i8], align 1
@vect_get_mask_element.number_of_mask_fixes = internal unnamed_addr global i32 1, align 4, !dbg !0
@vect_get_mask_element.mask_fixed = internal unnamed_addr global i1 false, align 1, !dbg !3847
@vect_get_mask_element.needs_first_vector = internal unnamed_addr global i1 false, align 1, !dbg !3848
@.str.57 = private unnamed_addr constant [43 x i8] c"permutation requires at least two vectors \00", align 1
@.str.58 = private unnamed_addr constant [45 x i8] c"permutation requires at least three vectors \00", align 1
@.str.59 = private unnamed_addr constant [44 x i8] c"------>vectorizing SLP node starting from: \00", align 1

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @vprintf(i8* noalias %__fmt, %struct.__va_list_tag* %__arg) local_unnamed_addr #0 !dbg !3853 {
entry:
  call void @llvm.dbg.value(metadata i8* %__fmt, metadata !3866, metadata !DIExpression()), !dbg !3868
  call void @llvm.dbg.value(metadata %struct.__va_list_tag* %__arg, metadata !3867, metadata !DIExpression()), !dbg !3868
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !3869
  %call = tail call i32 @vfprintf(%struct._IO_FILE* %0, i8* %__fmt, %struct.__va_list_tag* %__arg) #6, !dbg !3870
  ret i32 %call, !dbg !3871
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @vfprintf(%struct._IO_FILE*, i8*, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar() local_unnamed_addr #0 !dbg !3872 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !3876
  %call = tail call i32 @getc(%struct._IO_FILE* %0) #6, !dbg !3877
  ret i32 %call, !dbg !3878
}

declare dso_local i32 @getc(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fgetc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !3879 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !3934, metadata !DIExpression()), !dbg !3935
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !3936
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !3936
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !3936
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !3936
  %cmp = icmp uge i8* %0, %1, !dbg !3936
  %conv1 = zext i1 %cmp to i64, !dbg !3936
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !3936
  %tobool = icmp eq i64 %expval, 0, !dbg !3936
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3936

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !3936
  br label %cond.end, !dbg !3936

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !3936
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !3936
  %2 = load i8, i8* %0, align 1, !dbg !3936
  %conv3 = zext i8 %2 to i32, !dbg !3936
  br label %cond.end, !dbg !3936

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !3936
  ret i32 %cond, !dbg !3937
}

; Function Attrs: nounwind readnone
declare i64 @llvm.expect.i64(i64, i64) #3

declare dso_local i32 @__uflow(%struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getc_unlocked(%struct._IO_FILE* %__fp) local_unnamed_addr #0 !dbg !3938 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__fp, metadata !3940, metadata !DIExpression()), !dbg !3941
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 1, !dbg !3942
  %0 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !3942
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__fp, i64 0, i32 2, !dbg !3942
  %1 = load i8*, i8** %_IO_read_end, align 8, !dbg !3942
  %cmp = icmp uge i8* %0, %1, !dbg !3942
  %conv1 = zext i1 %cmp to i64, !dbg !3942
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !3942
  %tobool = icmp eq i64 %expval, 0, !dbg !3942
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3942

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %__fp) #6, !dbg !3942
  br label %cond.end, !dbg !3942

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !3942
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !3942
  %2 = load i8, i8* %0, align 1, !dbg !3942
  %conv3 = zext i8 %2 to i32, !dbg !3942
  br label %cond.end, !dbg !3942

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !3942
  ret i32 %cond, !dbg !3943
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @getchar_unlocked() local_unnamed_addr #0 !dbg !3944 {
entry:
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !3945
  %_IO_read_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 1, !dbg !3945
  %1 = load i8*, i8** %_IO_read_ptr, align 8, !dbg !3945
  %_IO_read_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 2, !dbg !3945
  %2 = load i8*, i8** %_IO_read_end, align 8, !dbg !3945
  %cmp = icmp uge i8* %1, %2, !dbg !3945
  %conv1 = zext i1 %cmp to i64, !dbg !3945
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !3945
  %tobool = icmp eq i64 %expval, 0, !dbg !3945
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3945

cond.true:                                        ; preds = %entry
  %call = tail call i32 @__uflow(%struct._IO_FILE* %0) #6, !dbg !3945
  br label %cond.end, !dbg !3945

cond.false:                                       ; preds = %entry
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !3945
  store i8* %incdec.ptr, i8** %_IO_read_ptr, align 8, !dbg !3945
  %3 = load i8, i8* %1, align 1, !dbg !3945
  %conv3 = zext i8 %3 to i32, !dbg !3945
  br label %cond.end, !dbg !3945

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv3, %cond.false ], !dbg !3945
  ret i32 %cond, !dbg !3946
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar(i32 %__c) local_unnamed_addr #0 !dbg !3947 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !3951, metadata !DIExpression()), !dbg !3952
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !3953
  %call = tail call i32 @putc(i32 %__c, %struct._IO_FILE* %0) #6, !dbg !3954
  ret i32 %call, !dbg !3955
}

declare dso_local i32 @putc(i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fputc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !3956 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !3960, metadata !DIExpression()), !dbg !3962
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !3961, metadata !DIExpression()), !dbg !3962
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !3963
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !3963
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !3963
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !3963
  %cmp = icmp uge i8* %0, %1, !dbg !3963
  %conv1 = zext i1 %cmp to i64, !dbg !3963
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !3963
  %tobool = icmp eq i64 %expval, 0, !dbg !3963
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3963

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !3963
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !3963
  br label %cond.end, !dbg !3963

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !3963
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !3963
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !3963
  store i8 %conv2, i8* %0, align 1, !dbg !3963
  %conv6 = and i32 %__c, 255, !dbg !3963
  br label %cond.end, !dbg !3963

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !3963
  ret i32 %cond, !dbg !3964
}

declare dso_local i32 @__overflow(%struct._IO_FILE*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putc_unlocked(i32 %__c, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !3965 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !3967, metadata !DIExpression()), !dbg !3969
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !3968, metadata !DIExpression()), !dbg !3969
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 5, !dbg !3970
  %0 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !3970
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 6, !dbg !3970
  %1 = load i8*, i8** %_IO_write_end, align 8, !dbg !3970
  %cmp = icmp uge i8* %0, %1, !dbg !3970
  %conv1 = zext i1 %cmp to i64, !dbg !3970
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !3970
  %tobool = icmp eq i64 %expval, 0, !dbg !3970
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3970

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !3970
  %call = tail call i32 @__overflow(%struct._IO_FILE* %__stream, i32 %conv3) #6, !dbg !3970
  br label %cond.end, !dbg !3970

cond.false:                                       ; preds = %entry
  %conv2 = trunc i32 %__c to i8, !dbg !3970
  %incdec.ptr = getelementptr inbounds i8, i8* %0, i64 1, !dbg !3970
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !3970
  store i8 %conv2, i8* %0, align 1, !dbg !3970
  %conv6 = and i32 %__c, 255, !dbg !3970
  br label %cond.end, !dbg !3970

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !3970
  ret i32 %cond, !dbg !3971
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @putchar_unlocked(i32 %__c) local_unnamed_addr #0 !dbg !3972 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !3974, metadata !DIExpression()), !dbg !3975
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !3976
  %_IO_write_ptr = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 5, !dbg !3976
  %1 = load i8*, i8** %_IO_write_ptr, align 8, !dbg !3976
  %_IO_write_end = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %0, i64 0, i32 6, !dbg !3976
  %2 = load i8*, i8** %_IO_write_end, align 8, !dbg !3976
  %cmp = icmp uge i8* %1, %2, !dbg !3976
  %conv1 = zext i1 %cmp to i64, !dbg !3976
  %expval = tail call i64 @llvm.expect.i64(i64 %conv1, i64 0), !dbg !3976
  %tobool = icmp eq i64 %expval, 0, !dbg !3976
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3976

cond.true:                                        ; preds = %entry
  %conv3 = and i32 %__c, 255, !dbg !3976
  %call = tail call i32 @__overflow(%struct._IO_FILE* %0, i32 %conv3) #6, !dbg !3976
  br label %cond.end, !dbg !3976

cond.false:                                       ; preds = %entry
  %conv4 = trunc i32 %__c to i8, !dbg !3976
  %incdec.ptr = getelementptr inbounds i8, i8* %1, i64 1, !dbg !3976
  store i8* %incdec.ptr, i8** %_IO_write_ptr, align 8, !dbg !3976
  store i8 %conv4, i8* %1, align 1, !dbg !3976
  %conv6 = and i32 %__c, 255, !dbg !3976
  br label %cond.end, !dbg !3976

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %conv6, %cond.false ], !dbg !3976
  ret i32 %cond, !dbg !3977
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @getline(i8** %__lineptr, i64* %__n, %struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !3978 {
entry:
  call void @llvm.dbg.value(metadata i8** %__lineptr, metadata !3984, metadata !DIExpression()), !dbg !3987
  call void @llvm.dbg.value(metadata i64* %__n, metadata !3985, metadata !DIExpression()), !dbg !3987
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !3986, metadata !DIExpression()), !dbg !3987
  %call = tail call i64 @__getdelim(i8** %__lineptr, i64* %__n, i32 10, %struct._IO_FILE* %__stream) #6, !dbg !3988
  ret i64 %call, !dbg !3989
}

declare dso_local i64 @__getdelim(i8**, i64*, i32, %struct._IO_FILE*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @feof_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !3990 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !3992, metadata !DIExpression()), !dbg !3993
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !3994
  %0 = load i32, i32* %_flags, align 8, !dbg !3994
  %and = lshr i32 %0, 4, !dbg !3994
  %and.lobit = and i32 %and, 1, !dbg !3994
  ret i32 %and.lobit, !dbg !3995
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @ferror_unlocked(%struct._IO_FILE* %__stream) local_unnamed_addr #0 !dbg !3996 {
entry:
  call void @llvm.dbg.value(metadata %struct._IO_FILE* %__stream, metadata !3998, metadata !DIExpression()), !dbg !3999
  %_flags = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %__stream, i64 0, i32 0, !dbg !4000
  %0 = load i32, i32* %_flags, align 8, !dbg !4000
  %and = lshr i32 %0, 5, !dbg !4000
  %and.lobit = and i32 %and, 1, !dbg !4000
  ret i32 %and.lobit, !dbg !4001
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @tolower(i32 %__c) local_unnamed_addr #0 !dbg !4002 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !4005, metadata !DIExpression()), !dbg !4006
  %__c.off = add i32 %__c, 128, !dbg !4007
  %0 = icmp ult i32 %__c.off, 384, !dbg !4007
  br i1 %0, label %cond.true, label %cond.end, !dbg !4007

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_tolower_loc() #6, !dbg !4008
  %1 = load i32*, i32** %call, align 8, !dbg !4009
  %idxprom = sext i32 %__c to i64, !dbg !4010
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !4010
  %2 = load i32, i32* %arrayidx, align 4, !dbg !4010
  br label %cond.end, !dbg !4011

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !4011
  ret i32 %cond, !dbg !4012
}

declare dso_local i32** @__ctype_tolower_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @toupper(i32 %__c) local_unnamed_addr #0 !dbg !4013 {
entry:
  call void @llvm.dbg.value(metadata i32 %__c, metadata !4015, metadata !DIExpression()), !dbg !4016
  %__c.off = add i32 %__c, 128, !dbg !4017
  %0 = icmp ult i32 %__c.off, 384, !dbg !4017
  br i1 %0, label %cond.true, label %cond.end, !dbg !4017

cond.true:                                        ; preds = %entry
  %call = tail call i32** @__ctype_toupper_loc() #6, !dbg !4018
  %1 = load i32*, i32** %call, align 8, !dbg !4019
  %idxprom = sext i32 %__c to i64, !dbg !4020
  %arrayidx = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !4020
  %2 = load i32, i32* %arrayidx, align 4, !dbg !4020
  br label %cond.end, !dbg !4021

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ %__c, %entry ], !dbg !4021
  ret i32 %cond, !dbg !4022
}

declare dso_local i32** @__ctype_toupper_loc() local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @atoi(i8* %__nptr) local_unnamed_addr #0 !dbg !4023 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !4028, metadata !DIExpression()), !dbg !4029
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !4030
  %conv = trunc i64 %call to i32, !dbg !4031
  ret i32 %conv, !dbg !4032
}

declare dso_local i64 @strtol(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atol(i8* %__nptr) local_unnamed_addr #0 !dbg !4033 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !4037, metadata !DIExpression()), !dbg !4038
  %call = tail call i64 @strtol(i8* %__nptr, i8** null, i32 10) #6, !dbg !4039
  ret i64 %call, !dbg !4040
}

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @atoll(i8* %__nptr) local_unnamed_addr #0 !dbg !4041 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !4046, metadata !DIExpression()), !dbg !4047
  %call = tail call i64 @strtoll(i8* %__nptr, i8** null, i32 10) #6, !dbg !4048
  ret i64 %call, !dbg !4049
}

declare dso_local i64 @strtoll(i8*, i8**, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i8* @bsearch(i8* %__key, i8* %__base, i64 %__nmemb, i64 %__size, i32 (i8*, i8*)* %__compar) local_unnamed_addr #0 !dbg !4050 {
entry:
  call void @llvm.dbg.value(metadata i8* %__key, metadata !4056, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.value(metadata i8* %__base, metadata !4057, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !4058, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.value(metadata i64 %__size, metadata !4059, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.value(metadata i32 (i8*, i8*)* %__compar, metadata !4060, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.value(metadata i64 0, metadata !4061, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.value(metadata i64 %__nmemb, metadata !4062, metadata !DIExpression()), !dbg !4066
  br label %while.cond, !dbg !4067

while.cond:                                       ; preds = %if.end6, %entry
  %__l.0 = phi i64 [ 0, %entry ], [ %__l.1, %if.end6 ], !dbg !4068
  %__u.0 = phi i64 [ %__nmemb, %entry ], [ %__u.1, %if.end6 ], !dbg !4066
  call void @llvm.dbg.value(metadata i64 %__u.0, metadata !4062, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.value(metadata i64 %__l.0, metadata !4061, metadata !DIExpression()), !dbg !4066
  %cmp = icmp ult i64 %__l.0, %__u.0, !dbg !4069
  br i1 %cmp, label %while.body, label %cleanup, !dbg !4067

while.body:                                       ; preds = %while.cond
  %add = add i64 %__l.0, %__u.0, !dbg !4070
  %div = lshr i64 %add, 1, !dbg !4072
  call void @llvm.dbg.value(metadata i64 %div, metadata !4063, metadata !DIExpression()), !dbg !4066
  %mul = mul i64 %div, %__size, !dbg !4073
  %add.ptr = getelementptr inbounds i8, i8* %__base, i64 %mul, !dbg !4074
  call void @llvm.dbg.value(metadata i8* %add.ptr, metadata !4064, metadata !DIExpression()), !dbg !4066
  %call = tail call i32 %__compar(i8* %__key, i8* %add.ptr) #6, !dbg !4075
  call void @llvm.dbg.value(metadata i32 %call, metadata !4065, metadata !DIExpression()), !dbg !4066
  %cmp1 = icmp slt i32 %call, 0, !dbg !4076
  br i1 %cmp1, label %if.end6, label %if.else, !dbg !4078

if.else:                                          ; preds = %while.body
  %cmp2 = icmp eq i32 %call, 0, !dbg !4079
  br i1 %cmp2, label %cleanup, label %if.then3, !dbg !4081

if.then3:                                         ; preds = %if.else
  %add4 = add nuw i64 %div, 1, !dbg !4082
  call void @llvm.dbg.value(metadata i64 %add4, metadata !4061, metadata !DIExpression()), !dbg !4066
  br label %if.end6

if.end6:                                          ; preds = %while.body, %if.then3
  %__l.1 = phi i64 [ %add4, %if.then3 ], [ %__l.0, %while.body ], !dbg !4066
  %__u.1 = phi i64 [ %__u.0, %if.then3 ], [ %div, %while.body ], !dbg !4066
  call void @llvm.dbg.value(metadata i64 %__u.1, metadata !4062, metadata !DIExpression()), !dbg !4066
  call void @llvm.dbg.value(metadata i64 %__l.1, metadata !4061, metadata !DIExpression()), !dbg !4066
  br label %while.cond, !dbg !4067, !llvm.loop !4083

cleanup:                                          ; preds = %if.else, %while.cond
  %retval.0 = phi i8* [ %add.ptr, %if.else ], [ null, %while.cond ], !dbg !4066
  ret i8* %retval.0, !dbg !4085
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: inlinehint nounwind uwtable
define dso_local double @atof(i8* %__nptr) local_unnamed_addr #0 !dbg !4086 {
entry:
  call void @llvm.dbg.value(metadata i8* %__nptr, metadata !4092, metadata !DIExpression()), !dbg !4093
  %call = tail call double @strtod(i8* %__nptr, i8** null) #6, !dbg !4094
  ret double %call, !dbg !4095
}

declare dso_local double @strtod(i8*, i8**) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoimax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !4096 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !4105, metadata !DIExpression()), !dbg !4108
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !4106, metadata !DIExpression()), !dbg !4108
  call void @llvm.dbg.value(metadata i32 %base, metadata !4107, metadata !DIExpression()), !dbg !4108
  %call = tail call i64 @__strtol_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !4109
  ret i64 %call, !dbg !4110
}

declare dso_local i64 @__strtol_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @strtoumax(i8* noalias %nptr, i8** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !4111 {
entry:
  call void @llvm.dbg.value(metadata i8* %nptr, metadata !4117, metadata !DIExpression()), !dbg !4120
  call void @llvm.dbg.value(metadata i8** %endptr, metadata !4118, metadata !DIExpression()), !dbg !4120
  call void @llvm.dbg.value(metadata i32 %base, metadata !4119, metadata !DIExpression()), !dbg !4120
  %call = tail call i64 @__strtoul_internal(i8* %nptr, i8** %endptr, i32 %base, i32 0) #6, !dbg !4121
  ret i64 %call, !dbg !4122
}

declare dso_local i64 @__strtoul_internal(i8*, i8**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoimax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !4123 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !4134, metadata !DIExpression()), !dbg !4137
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !4135, metadata !DIExpression()), !dbg !4137
  call void @llvm.dbg.value(metadata i32 %base, metadata !4136, metadata !DIExpression()), !dbg !4137
  %call = tail call i64 @__wcstol_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !4138
  ret i64 %call, !dbg !4139
}

declare dso_local i64 @__wcstol_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i64 @wcstoumax(i32* noalias %nptr, i32** noalias %endptr, i32 %base) local_unnamed_addr #0 !dbg !4140 {
entry:
  call void @llvm.dbg.value(metadata i32* %nptr, metadata !4144, metadata !DIExpression()), !dbg !4147
  call void @llvm.dbg.value(metadata i32** %endptr, metadata !4145, metadata !DIExpression()), !dbg !4147
  call void @llvm.dbg.value(metadata i32 %base, metadata !4146, metadata !DIExpression()), !dbg !4147
  %call = tail call i64 @__wcstoul_internal(i32* %nptr, i32** %endptr, i32 %base, i32 0) #6, !dbg !4148
  ret i64 %call, !dbg !4149
}

declare dso_local i64 @__wcstoul_internal(i32*, i32**, i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !4150 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !4190, metadata !DIExpression()), !dbg !4192
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !4191, metadata !DIExpression()), !dbg !4192
  %call = tail call i32 @__xstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !4193
  ret i32 %call, !dbg !4194
}

declare dso_local i32 @__xstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat(i8* %__path, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !4195 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !4197, metadata !DIExpression()), !dbg !4199
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !4198, metadata !DIExpression()), !dbg !4199
  %call = tail call i32 @__lxstat(i32 1, i8* %__path, %struct.stat* %__statbuf) #6, !dbg !4200
  ret i32 %call, !dbg !4201
}

declare dso_local i32 @__lxstat(i32, i8*, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat(i32 %__fd, %struct.stat* %__statbuf) local_unnamed_addr #0 !dbg !4202 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !4206, metadata !DIExpression()), !dbg !4208
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !4207, metadata !DIExpression()), !dbg !4208
  %call = tail call i32 @__fxstat(i32 1, i32 %__fd, %struct.stat* %__statbuf) #6, !dbg !4209
  ret i32 %call, !dbg !4210
}

declare dso_local i32 @__fxstat(i32, i32, %struct.stat*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat(i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !4211 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !4215, metadata !DIExpression()), !dbg !4219
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !4216, metadata !DIExpression()), !dbg !4219
  call void @llvm.dbg.value(metadata %struct.stat* %__statbuf, metadata !4217, metadata !DIExpression()), !dbg !4219
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !4218, metadata !DIExpression()), !dbg !4219
  %call = tail call i32 @__fxstatat(i32 1, i32 %__fd, i8* %__filename, %struct.stat* %__statbuf, i32 %__flag) #6, !dbg !4220
  ret i32 %call, !dbg !4221
}

declare dso_local i32 @__fxstatat(i32, i32, i8*, %struct.stat*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknod(i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !4222 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i8* %__path, metadata !4226, metadata !DIExpression()), !dbg !4229
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !4227, metadata !DIExpression()), !dbg !4229
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !4228, metadata !DIExpression()), !dbg !4229
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !4228, metadata !DIExpression(DW_OP_deref)), !dbg !4229
  %call = call i32 @__xmknod(i32 0, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !4230
  ret i32 %call, !dbg !4231
}

declare dso_local i32 @__xmknod(i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @mknodat(i32 %__fd, i8* %__path, i32 %__mode, i64 %__dev) local_unnamed_addr #0 !dbg !4232 {
entry:
  %__dev.addr = alloca i64, align 8
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !4236, metadata !DIExpression()), !dbg !4240
  call void @llvm.dbg.value(metadata i8* %__path, metadata !4237, metadata !DIExpression()), !dbg !4240
  call void @llvm.dbg.value(metadata i32 %__mode, metadata !4238, metadata !DIExpression()), !dbg !4240
  call void @llvm.dbg.value(metadata i64 %__dev, metadata !4239, metadata !DIExpression()), !dbg !4240
  store i64 %__dev, i64* %__dev.addr, align 8
  call void @llvm.dbg.value(metadata i64* %__dev.addr, metadata !4239, metadata !DIExpression(DW_OP_deref)), !dbg !4240
  %call = call i32 @__xmknodat(i32 0, i32 %__fd, i8* %__path, i32 %__mode, i64* nonnull %__dev.addr) #6, !dbg !4241
  ret i32 %call, !dbg !4242
}

declare dso_local i32 @__xmknodat(i32, i32, i8*, i32, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @stat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !4243 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !4267, metadata !DIExpression()), !dbg !4269
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !4268, metadata !DIExpression()), !dbg !4269
  %call = tail call i32 @__xstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !4270
  ret i32 %call, !dbg !4271
}

declare dso_local i32 @__xstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @lstat64(i8* %__path, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !4272 {
entry:
  call void @llvm.dbg.value(metadata i8* %__path, metadata !4274, metadata !DIExpression()), !dbg !4276
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !4275, metadata !DIExpression()), !dbg !4276
  %call = tail call i32 @__lxstat64(i32 1, i8* %__path, %struct.stat64* %__statbuf) #6, !dbg !4277
  ret i32 %call, !dbg !4278
}

declare dso_local i32 @__lxstat64(i32, i8*, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstat64(i32 %__fd, %struct.stat64* %__statbuf) local_unnamed_addr #0 !dbg !4279 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !4283, metadata !DIExpression()), !dbg !4285
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !4284, metadata !DIExpression()), !dbg !4285
  %call = tail call i32 @__fxstat64(i32 1, i32 %__fd, %struct.stat64* %__statbuf) #6, !dbg !4286
  ret i32 %call, !dbg !4287
}

declare dso_local i32 @__fxstat64(i32, i32, %struct.stat64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define dso_local i32 @fstatat64(i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) local_unnamed_addr #0 !dbg !4288 {
entry:
  call void @llvm.dbg.value(metadata i32 %__fd, metadata !4292, metadata !DIExpression()), !dbg !4296
  call void @llvm.dbg.value(metadata i8* %__filename, metadata !4293, metadata !DIExpression()), !dbg !4296
  call void @llvm.dbg.value(metadata %struct.stat64* %__statbuf, metadata !4294, metadata !DIExpression()), !dbg !4296
  call void @llvm.dbg.value(metadata i32 %__flag, metadata !4295, metadata !DIExpression()), !dbg !4296
  %call = tail call i32 @__fxstatat64(i32 1, i32 %__fd, i8* %__filename, %struct.stat64* %__statbuf, i32 %__flag) #6, !dbg !4297
  ret i32 %call, !dbg !4298
}

declare dso_local i32 @__fxstatat64(i32, i32, i8*, %struct.stat64*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local i32 @find_bb_location(%struct.basic_block_def* %bb) local_unnamed_addr #5 !dbg !4299 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4303, metadata !DIExpression()), !dbg !4312
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !4304, metadata !DIExpression()), !dbg !4312
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !4313
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !4313
  %tobool = icmp eq %struct.basic_block_def* %bb, null, !dbg !4314
  br i1 %tobool, label %cleanup, label %if.end, !dbg !4316

if.end:                                           ; preds = %entry
  %1 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4317
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #7, !dbg !4317
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* nonnull %bb) #8, !dbg !4317
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %1, i64 24, i1 false), !dbg !4317
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #7, !dbg !4317
  br label %for.cond, !dbg !4319

for.cond:                                         ; preds = %for.inc, %if.end
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4305, metadata !DIExpression(DW_OP_deref)), !dbg !4312
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #8, !dbg !4320
  %tobool1 = icmp eq i8 %call, 0, !dbg !4322
  br i1 %tobool1, label %for.body, label %cleanup.loopexit, !dbg !4323

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4305, metadata !DIExpression(DW_OP_deref)), !dbg !4312
  %call2 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #8, !dbg !4324
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call2, metadata !4304, metadata !DIExpression()), !dbg !4312
  %call3 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %call2) #8, !dbg !4326
  %cmp = icmp eq i32 %call3, 0, !dbg !4328
  br i1 %cmp, label %for.inc, label %if.then4, !dbg !4329

if.then4:                                         ; preds = %for.body
  %call2.lcssa = phi %union.gimple_statement_d* [ %call2, %for.body ], !dbg !4324
  %call5 = call fastcc i32 @gimple_location(%union.gimple_statement_d* %call2.lcssa) #8, !dbg !4330
  br label %cleanup, !dbg !4331

for.inc:                                          ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !4305, metadata !DIExpression(DW_OP_deref)), !dbg !4312
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #8, !dbg !4332
  br label %for.cond, !dbg !4333, !llvm.loop !4334

cleanup.loopexit:                                 ; preds = %for.cond
  br label %cleanup, !dbg !4336

cleanup:                                          ; preds = %cleanup.loopexit, %entry, %if.then4
  %retval.0 = phi i32 [ %call5, %if.then4 ], [ 0, %entry ], [ 0, %cleanup.loopexit ], !dbg !4312
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !4336
  ret i32 %retval.0, !dbg !4336
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) unnamed_addr #0 !dbg !4337 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4341, metadata !DIExpression()), !dbg !4344
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !4342, metadata !DIExpression()), !dbg !4345
  %call = tail call fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #8, !dbg !4346
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %call, metadata !4343, metadata !DIExpression()), !dbg !4344
  %call1 = tail call fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %call) #8, !dbg !4347
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 0, !dbg !4348
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4349
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 1, !dbg !4350
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq2, align 8, !dbg !4351
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i64 0, i32 2, !dbg !4352
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb3, align 8, !dbg !4353
  ret void, !dbg !4354
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !4355 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4359, metadata !DIExpression()), !dbg !4360
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !4361
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4361
  %cmp = icmp eq %struct.gimple_seq_node_d* %0, null, !dbg !4362
  %conv1 = zext i1 %cmp to i8, !dbg !4363
  ret i8 %conv1, !dbg !4364
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* byval(%struct.gimple_stmt_iterator) align 8 %i) unnamed_addr #0 !dbg !4365 {
entry:
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %i, metadata !4369, metadata !DIExpression()), !dbg !4370
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !4371
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4371
  %stmt = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 0, !dbg !4372
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4372
  ret %union.gimple_statement_d* %1, !dbg !4373
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_location(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !4374 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !4379, metadata !DIExpression()), !dbg !4380
  %location = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 2, !dbg !4381
  %0 = load i32, i32* %location, align 8, !dbg !4381
  ret i32 %0, !dbg !4382
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gsi_next(%struct.gimple_stmt_iterator* %i) unnamed_addr #0 !dbg !4383 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %i, metadata !4388, metadata !DIExpression()), !dbg !4389
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %i, i64 0, i32 0, !dbg !4390
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !4390
  %next = getelementptr inbounds %struct.gimple_seq_node_d, %struct.gimple_seq_node_d* %0, i64 0, i32 2, !dbg !4391
  %1 = bitcast %struct.gimple_seq_node_d** %next to i64*, !dbg !4391
  %2 = load i64, i64* %1, align 8, !dbg !4391
  %3 = bitcast %struct.gimple_stmt_iterator* %i to i64*, !dbg !4392
  store i64 %2, i64* %3, align 8, !dbg !4392
  ret void, !dbg !4393
}

; Function Attrs: nounwind uwtable
define dso_local void @vect_free_slp_instance(%struct._slp_instance* %instance) local_unnamed_addr #5 !dbg !4394 {
entry:
  call void @llvm.dbg.value(metadata %struct._slp_instance* %instance, metadata !4398, metadata !DIExpression()), !dbg !4399
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 0, !dbg !4400
  %0 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !4400
  tail call fastcc void @vect_free_slp_tree(%struct._slp_tree* %0) #8, !dbg !4401
  %load_permutation = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 4, !dbg !4402
  tail call fastcc void @VEC_int_heap_free(%struct.VEC_int_heap** nonnull %load_permutation) #8, !dbg !4402
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 5, !dbg !4403
  tail call fastcc void @VEC_slp_tree_heap_free(%struct.VEC_slp_tree_heap** nonnull %loads) #8, !dbg !4403
  ret void, !dbg !4404
}

; Function Attrs: nounwind uwtable
define internal fastcc void @vect_free_slp_tree(%struct._slp_tree* %node) unnamed_addr #5 !dbg !4405 {
entry:
  call void @llvm.dbg.value(metadata %struct._slp_tree* %node, metadata !4409, metadata !DIExpression()), !dbg !4410
  %tobool = icmp eq %struct._slp_tree* %node, null, !dbg !4411
  br i1 %tobool, label %return, label %if.end, !dbg !4413

if.end:                                           ; preds = %entry
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 0, !dbg !4414
  %0 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !4414
  %tobool1 = icmp eq %struct._slp_tree* %0, null, !dbg !4414
  br i1 %tobool1, label %if.end4, label %if.then2, !dbg !4416

if.then2:                                         ; preds = %if.end
  tail call fastcc void @vect_free_slp_tree(%struct._slp_tree* nonnull %0) #8, !dbg !4417
  br label %if.end4, !dbg !4417

if.end4:                                          ; preds = %if.end, %if.then2
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 1, !dbg !4418
  %1 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !4418
  %tobool5 = icmp eq %struct._slp_tree* %1, null, !dbg !4418
  br i1 %tobool5, label %if.end8, label %if.then6, !dbg !4420

if.then6:                                         ; preds = %if.end4
  tail call fastcc void @vect_free_slp_tree(%struct._slp_tree* nonnull %1) #8, !dbg !4421
  br label %if.end8, !dbg !4421

if.end8:                                          ; preds = %if.end4, %if.then6
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 2, !dbg !4422
  tail call fastcc void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** nonnull %stmts) #8, !dbg !4422
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 3, !dbg !4423
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !4423
  %tobool9 = icmp eq %struct.VEC_gimple_heap* %2, null, !dbg !4423
  br i1 %tobool9, label %if.end12, label %if.then10, !dbg !4425

if.then10:                                        ; preds = %if.end8
  tail call fastcc void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** nonnull %vec_stmts) #8, !dbg !4426
  br label %if.end12, !dbg !4426

if.end12:                                         ; preds = %if.end8, %if.then10
  %3 = bitcast %struct._slp_tree* %node to i8*, !dbg !4427
  tail call void @free(i8* nonnull %3) #6, !dbg !4428
  br label %return, !dbg !4429

return:                                           ; preds = %entry, %if.end12
  ret void, !dbg !4429
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) unnamed_addr #0 !dbg !4430 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap** %vec_, metadata !4435, metadata !DIExpression()), !dbg !4436
  %0 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %vec_, align 8, !dbg !4437
  %tobool = icmp eq %struct.VEC_int_heap* %0, null, !dbg !4437
  br i1 %tobool, label %if.end, label %if.then, !dbg !4439

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_int_heap* %0 to i8*, !dbg !4439
  tail call void @free(i8* nonnull %1) #6, !dbg !4437
  br label %if.end, !dbg !4437

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %vec_, align 8, !dbg !4439
  ret void, !dbg !4439
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_slp_tree_heap_free(%struct.VEC_slp_tree_heap** %vec_) unnamed_addr #0 !dbg !4440 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap** %vec_, metadata !4445, metadata !DIExpression()), !dbg !4446
  %0 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %vec_, align 8, !dbg !4447
  %tobool = icmp eq %struct.VEC_slp_tree_heap* %0, null, !dbg !4447
  br i1 %tobool, label %if.end, label %if.then, !dbg !4449

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_slp_tree_heap* %0 to i8*, !dbg !4449
  tail call void @free(i8* nonnull %1) #6, !dbg !4447
  br label %if.end, !dbg !4447

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_slp_tree_heap* null, %struct.VEC_slp_tree_heap** %vec_, align 8, !dbg !4449
  ret void, !dbg !4449
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @vect_analyze_slp(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo) local_unnamed_addr #5 !dbg !4450 {
entry:
  %store = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.value(metadata %struct._loop_vec_info* %loop_vinfo, metadata !4454, metadata !DIExpression()), !dbg !4460
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %bb_vinfo, metadata !4455, metadata !DIExpression()), !dbg !4460
  %0 = bitcast %union.gimple_statement_d** %store to i8*, !dbg !4461
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !4461
  call void @llvm.dbg.value(metadata i8 0, metadata !4459, metadata !DIExpression()), !dbg !4460
  %call = tail call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !4462
  %tobool = icmp eq i8 %call, 0, !dbg !4462
  br i1 %tobool, label %if.end, label %if.then, !dbg !4464

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4465
  %call1 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0)) #6, !dbg !4466
  br label %if.end, !dbg !4466

if.end:                                           ; preds = %entry, %if.then
  %tobool2 = icmp eq %struct._loop_vec_info* %loop_vinfo, null, !dbg !4467
  br i1 %tobool2, label %if.else, label %if.then3, !dbg !4469

if.then3:                                         ; preds = %if.end
  %strided_stores4 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 15, !dbg !4470
  br label %if.end6, !dbg !4471

if.else:                                          ; preds = %if.end
  %strided_stores5 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %bb_vinfo, i64 0, i32 1, !dbg !4472
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then3
  %strided_stores.0.in = phi %struct.VEC_gimple_heap** [ %strided_stores4, %if.then3 ], [ %strided_stores5, %if.else ]
  %strided_stores.0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %strided_stores.0.in, align 8, !dbg !4473
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %strided_stores.0, metadata !4457, metadata !DIExpression()), !dbg !4460
  call void @llvm.dbg.value(metadata i32 0, metadata !4456, metadata !DIExpression()), !dbg !4460
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %strided_stores.0, i64 0, i32 0, !dbg !4474
  br label %for.cond, !dbg !4477

for.cond:                                         ; preds = %for.body, %if.end6
  %i.0 = phi i32 [ 0, %if.end6 ], [ %inc, %for.body ], !dbg !4478
  %ok.0 = phi i8 [ 0, %if.end6 ], [ %spec.select, %for.body ], !dbg !4460
  call void @llvm.dbg.value(metadata i8 %ok.0, metadata !4459, metadata !DIExpression()), !dbg !4460
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !4456, metadata !DIExpression()), !dbg !4460
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %store, metadata !4458, metadata !DIExpression(DW_OP_deref)), !dbg !4460
  %call8 = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %base, i32 %i.0, %union.gimple_statement_d** nonnull %store) #8, !dbg !4479
  %tobool9 = icmp eq i32 %call8, 0, !dbg !4480
  br i1 %tobool9, label %for.end, label %for.body, !dbg !4480

for.body:                                         ; preds = %for.cond
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %store, align 8, !dbg !4481
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %2, metadata !4458, metadata !DIExpression()), !dbg !4460
  %call10 = call fastcc zeroext i8 @vect_analyze_slp_instance(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %union.gimple_statement_d* %2) #8, !dbg !4483
  %tobool11 = icmp eq i8 %call10, 0, !dbg !4483
  %spec.select = select i1 %tobool11, i8 %ok.0, i8 1, !dbg !4484
  call void @llvm.dbg.value(metadata i8 %spec.select, metadata !4459, metadata !DIExpression()), !dbg !4460
  %inc = add i32 %i.0, 1, !dbg !4485
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4456, metadata !DIExpression()), !dbg !4460
  br label %for.cond, !dbg !4486, !llvm.loop !4487

for.end:                                          ; preds = %for.cond
  %ok.0.lcssa = phi i8 [ %ok.0, %for.cond ], !dbg !4460
  call void @llvm.dbg.value(metadata i8 %ok.0.lcssa, metadata !4459, metadata !DIExpression()), !dbg !4460
  call void @llvm.dbg.value(metadata i8 %ok.0.lcssa, metadata !4459, metadata !DIExpression()), !dbg !4460
  call void @llvm.dbg.value(metadata i8 %ok.0.lcssa, metadata !4459, metadata !DIExpression()), !dbg !4460
  %tobool14 = icmp eq %struct._bb_vec_info* %bb_vinfo, null, !dbg !4489
  %tobool15 = icmp ne i8 %ok.0.lcssa, 0, !dbg !4491
  %or.cond = or i1 %tobool14, %tobool15, !dbg !4492
  br i1 %or.cond, label %cleanup, label %if.then16, !dbg !4492

if.then16:                                        ; preds = %for.end
  %call17 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !4493
  %tobool18 = icmp eq i8 %call17, 0, !dbg !4493
  br i1 %tobool18, label %cleanup, label %if.then19, !dbg !4496

if.then19:                                        ; preds = %if.then16
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4497
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0)) #6, !dbg !4498
  br label %cleanup, !dbg !4498

cleanup:                                          ; preds = %if.then16, %for.end, %if.then19
  %retval.0 = phi i8 [ 0, %if.then19 ], [ 0, %if.then16 ], [ 1, %for.end ], !dbg !4460
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !4499
  ret i8 %retval.0, !dbg !4499
}

declare dso_local zeroext i8 @vect_print_dump_info(i32) local_unnamed_addr #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d** %ptr) unnamed_addr #0 !dbg !4500 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !4507, metadata !DIExpression()), !dbg !4510
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !4508, metadata !DIExpression()), !dbg !4510
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %ptr, metadata !4509, metadata !DIExpression()), !dbg !4510
  %tobool = icmp eq %struct.VEC_gimple_base* %vec_, null, !dbg !4511
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !4511

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !4511
  %0 = load i32, i32* %num, align 8, !dbg !4511
  %cmp = icmp ugt i32 %0, %ix_, !dbg !4511
  br i1 %cmp, label %if.then, label %if.else, !dbg !4513

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !4514
  %arrayidx = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !4514
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !4514
  br label %return, !dbg !4514

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !4516

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %union.gimple_statement_d* [ null, %if.else ], [ %1, %if.then ], !dbg !4518
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !4518
  store %union.gimple_statement_d* %storemerge, %union.gimple_statement_d** %ptr, align 8, !dbg !4518
  ret i32 %retval.0, !dbg !4513
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vect_analyze_slp_instance(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %union.gimple_statement_d* %stmt) unnamed_addr #5 !dbg !4519 {
entry:
  %node = alloca %struct._slp_tree*, align 8
  %inside_cost = alloca i32, align 4
  %outside_cost = alloca i32, align 4
  %max_nunits = alloca i32, align 4
  %load_permutation = alloca %struct.VEC_int_heap*, align 8
  %loads = alloca %struct.VEC_slp_tree_heap*, align 8
  call void @llvm.dbg.value(metadata %struct._loop_vec_info* %loop_vinfo, metadata !4523, metadata !DIExpression()), !dbg !4541
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %bb_vinfo, metadata !4524, metadata !DIExpression()), !dbg !4541
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4525, metadata !DIExpression()), !dbg !4541
  %0 = bitcast %struct._slp_tree** %node to i8*, !dbg !4542
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !4542
  %call = tail call i8* @xmalloc(i64 48) #6, !dbg !4543
  call void @llvm.dbg.value(metadata i8* %call, metadata !4527, metadata !DIExpression()), !dbg !4541
  %1 = bitcast %struct._slp_tree** %node to i8**, !dbg !4544
  store i8* %call, i8** %1, align 8, !dbg !4544
  %call1 = tail call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !4545
  %size = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call1, i64 0, i32 19, !dbg !4545
  %2 = load i32, i32* %size, align 8, !dbg !4545
  call void @llvm.dbg.value(metadata i32 %2, metadata !4528, metadata !DIExpression()), !dbg !4541
  call void @llvm.dbg.value(metadata i32 1, metadata !4529, metadata !DIExpression()), !dbg !4541
  call void @llvm.dbg.value(metadata i32 0, metadata !4534, metadata !DIExpression()), !dbg !4541
  %3 = bitcast i32* %inside_cost to i8*, !dbg !4546
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #7, !dbg !4546
  call void @llvm.dbg.value(metadata i32 0, metadata !4535, metadata !DIExpression()), !dbg !4541
  store i32 0, i32* %inside_cost, align 4, !dbg !4547
  %4 = bitcast i32* %outside_cost to i8*, !dbg !4546
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7, !dbg !4546
  call void @llvm.dbg.value(metadata i32 0, metadata !4536, metadata !DIExpression()), !dbg !4541
  store i32 0, i32* %outside_cost, align 4, !dbg !4548
  %5 = bitcast i32* %max_nunits to i8*, !dbg !4549
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7, !dbg !4549
  call void @llvm.dbg.value(metadata i32 0, metadata !4538, metadata !DIExpression()), !dbg !4541
  store i32 0, i32* %max_nunits, align 4, !dbg !4550
  %6 = bitcast %struct.VEC_int_heap** %load_permutation to i8*, !dbg !4551
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7, !dbg !4551
  %7 = bitcast %struct.VEC_slp_tree_heap** %loads to i8*, !dbg !4552
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7, !dbg !4552
  %call2 = tail call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !4553
  %data_ref_info = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call2, i64 0, i32 7, !dbg !4553
  %8 = load %struct.data_reference*, %struct.data_reference** %data_ref_info, align 8, !dbg !4553
  %ref = getelementptr inbounds %struct.data_reference, %struct.data_reference* %8, i64 0, i32 1, !dbg !4553
  %9 = bitcast %union.tree_node** %ref to %struct.tree_common**, !dbg !4553
  %10 = load %struct.tree_common*, %struct.tree_common** %9, align 8, !dbg !4553
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %10, i64 0, i32 2, !dbg !4553
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4553
  call void @llvm.dbg.value(metadata %union.tree_node* %11, metadata !4532, metadata !DIExpression()), !dbg !4541
  %call3 = tail call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* %11) #6, !dbg !4554
  call void @llvm.dbg.value(metadata %union.tree_node* %call3, metadata !4531, metadata !DIExpression()), !dbg !4541
  %tobool = icmp eq %union.tree_node* %call3, null, !dbg !4555
  br i1 %tobool, label %if.then, label %if.end8, !dbg !4557

if.then:                                          ; preds = %entry
  %call4 = tail call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !4558
  %tobool5 = icmp eq i8 %call4, 0, !dbg !4558
  br i1 %tobool5, label %cleanup, label %if.then6, !dbg !4561

if.then6:                                         ; preds = %if.then
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4562
  %call7 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.25, i64 0, i64 0)) #6, !dbg !4564
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4565
  tail call void @print_generic_expr(%struct._IO_FILE* %13, %union.tree_node* %11, i32 2) #6, !dbg !4566
  br label %cleanup, !dbg !4567

if.end8:                                          ; preds = %entry
  %type9 = bitcast %union.tree_node* %call3 to %struct.tree_type*, !dbg !4568
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type9, i64 0, i32 6, !dbg !4568
  %bf.load = load i32, i32* %precision, align 4, !dbg !4568
  %bf.clear = and i32 %bf.load, 1023, !dbg !4568
  %sh_prom = zext i32 %bf.clear to i64, !dbg !4568
  %shl = shl i64 1, %sh_prom, !dbg !4568
  %conv = trunc i64 %shl to i32, !dbg !4568
  call void @llvm.dbg.value(metadata i32 %conv, metadata !4530, metadata !DIExpression()), !dbg !4541
  %tobool10 = icmp eq %struct._loop_vec_info* %loop_vinfo, null, !dbg !4569
  br i1 %tobool10, label %if.end13, label %if.then11, !dbg !4571

if.then11:                                        ; preds = %if.end8
  %vectorization_factor12 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 6, !dbg !4572
  %14 = load i32, i32* %vectorization_factor12, align 8, !dbg !4572
  call void @llvm.dbg.value(metadata i32 %14, metadata !4534, metadata !DIExpression()), !dbg !4541
  br label %if.end13, !dbg !4573

if.end13:                                         ; preds = %if.end8, %if.then11
  %vectorization_factor.0 = phi i32 [ %14, %if.then11 ], [ %conv, %if.end8 ], !dbg !4574
  call void @llvm.dbg.value(metadata i32 %vectorization_factor.0, metadata !4534, metadata !DIExpression()), !dbg !4541
  %call14 = tail call i32 @least_common_multiple(i32 %conv, i32 %2) #6, !dbg !4575
  %div = udiv i32 %call14, %2, !dbg !4576
  call void @llvm.dbg.value(metadata i32 %div, metadata !4529, metadata !DIExpression()), !dbg !4541
  %cmp = icmp eq i32 %div, 1, !dbg !4577
  %tobool16 = icmp ne %struct._loop_vec_info* %loop_vinfo, null, !dbg !4579
  %or.cond = or i1 %cmp, %tobool16, !dbg !4580
  br i1 %or.cond, label %if.end23, label %if.then17, !dbg !4580

if.then17:                                        ; preds = %if.end13
  %call18 = tail call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !4581
  %tobool19 = icmp eq i8 %call18, 0, !dbg !4581
  br i1 %tobool19, label %cleanup, label %if.then20, !dbg !4584

if.then20:                                        ; preds = %if.then17
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4585
  %call21 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.26, i64 0, i64 0)) #6, !dbg !4586
  br label %cleanup, !dbg !4586

if.end23:                                         ; preds = %if.end13
  %call24 = tail call fastcc %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %2) #8, !dbg !4587
  call void @llvm.dbg.value(metadata i8* %call, metadata !4527, metadata !DIExpression()), !dbg !4541
  %stmts = getelementptr inbounds i8, i8* %call, i64 16, !dbg !4588
  %16 = bitcast i8* %stmts to %struct.VEC_gimple_heap**, !dbg !4588
  store %struct.VEC_gimple_heap* %call24, %struct.VEC_gimple_heap** %16, align 8, !dbg !4589
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !4533, metadata !DIExpression()), !dbg !4541
  br label %while.cond, !dbg !4590

while.cond:                                       ; preds = %while.body, %if.end23
  %next.0 = phi %union.gimple_statement_d* [ %stmt, %if.end23 ], [ %17, %while.body ], !dbg !4541
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %next.0, metadata !4533, metadata !DIExpression()), !dbg !4541
  %tobool25 = icmp eq %union.gimple_statement_d* %next.0, null, !dbg !4590
  call void @llvm.dbg.value(metadata i8* %call, metadata !4527, metadata !DIExpression()), !dbg !4541
  br i1 %tobool25, label %while.end, label %while.body, !dbg !4590

while.body:                                       ; preds = %while.cond
  %call27 = tail call fastcc %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** nonnull %16, %union.gimple_statement_d* nonnull %next.0) #8, !dbg !4591
  %call28 = tail call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* nonnull %next.0) #8, !dbg !4593
  %next_dr = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call28, i64 0, i32 18, !dbg !4593
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %next_dr, align 8, !dbg !4593
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %17, metadata !4533, metadata !DIExpression()), !dbg !4541
  br label %while.cond, !dbg !4590, !llvm.loop !4594

while.end:                                        ; preds = %while.cond
  %vec_stmts = getelementptr inbounds i8, i8* %call, i64 24, !dbg !4596
  %18 = bitcast i8* %vec_stmts to %struct.VEC_gimple_heap**, !dbg !4596
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %18, align 8, !dbg !4597
  call void @llvm.dbg.value(metadata i8* %call, metadata !4527, metadata !DIExpression()), !dbg !4541
  %vec_stmts_size = getelementptr inbounds i8, i8* %call, i64 32, !dbg !4598
  %19 = bitcast i8* %vec_stmts_size to i32*, !dbg !4598
  store i32 0, i32* %19, align 8, !dbg !4599
  call void @llvm.dbg.value(metadata i8* %call, metadata !4527, metadata !DIExpression()), !dbg !4541
  %left = bitcast i8* %call to %struct._slp_tree**, !dbg !4600
  store %struct._slp_tree* null, %struct._slp_tree** %left, align 8, !dbg !4601
  %20 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4602
  call void @llvm.dbg.value(metadata %struct._slp_tree* %20, metadata !4527, metadata !DIExpression()), !dbg !4541
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %20, i64 0, i32 1, !dbg !4602
  store %struct._slp_tree* null, %struct._slp_tree** %right, align 8, !dbg !4603
  call void @llvm.dbg.value(metadata %struct._slp_tree* %20, metadata !4527, metadata !DIExpression()), !dbg !4541
  %outside_of_loop = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %20, i64 0, i32 5, i32 0, !dbg !4604
  store i32 0, i32* %outside_of_loop, align 4, !dbg !4605
  call void @llvm.dbg.value(metadata %struct._slp_tree* %20, metadata !4527, metadata !DIExpression()), !dbg !4541
  %inside_of_loop = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %20, i64 0, i32 5, i32 1, !dbg !4606
  store i32 0, i32* %inside_of_loop, align 4, !dbg !4607
  %mul = mul i32 %div, %2, !dbg !4608
  %div30 = udiv i32 %mul, %conv, !dbg !4609
  call void @llvm.dbg.value(metadata i32 %div30, metadata !4537, metadata !DIExpression()), !dbg !4541
  %mul31 = mul i32 %2, %2, !dbg !4610
  %call32 = tail call fastcc %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %mul31) #8, !dbg !4610
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap* %call32, metadata !4539, metadata !DIExpression()), !dbg !4541
  store %struct.VEC_int_heap* %call32, %struct.VEC_int_heap** %load_permutation, align 8, !dbg !4611
  %call33 = tail call fastcc %struct.VEC_slp_tree_heap* @VEC_slp_tree_heap_alloc(i32 %2) #8, !dbg !4612
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap* %call33, metadata !4540, metadata !DIExpression()), !dbg !4541
  store %struct.VEC_slp_tree_heap* %call33, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !4613
  call void @llvm.dbg.value(metadata %struct._slp_tree** %node, metadata !4527, metadata !DIExpression(DW_OP_deref)), !dbg !4541
  call void @llvm.dbg.value(metadata i32* %inside_cost, metadata !4535, metadata !DIExpression(DW_OP_deref)), !dbg !4541
  call void @llvm.dbg.value(metadata i32* %outside_cost, metadata !4536, metadata !DIExpression(DW_OP_deref)), !dbg !4541
  call void @llvm.dbg.value(metadata i32* %max_nunits, metadata !4538, metadata !DIExpression(DW_OP_deref)), !dbg !4541
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap** %load_permutation, metadata !4539, metadata !DIExpression(DW_OP_deref)), !dbg !4541
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap** %loads, metadata !4540, metadata !DIExpression(DW_OP_deref)), !dbg !4541
  %call34 = call fastcc zeroext i8 @vect_build_slp_tree(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %struct._slp_tree** nonnull %node, i32 %2, i32* nonnull %inside_cost, i32* nonnull %outside_cost, i32 %div30, i32* nonnull %max_nunits, %struct.VEC_int_heap** nonnull %load_permutation, %struct.VEC_slp_tree_heap** nonnull %loads, i32 %vectorization_factor.0) #8, !dbg !4614
  %tobool35 = icmp eq i8 %call34, 0, !dbg !4614
  br i1 %tobool35, label %if.end81, label %if.then36, !dbg !4616

if.then36:                                        ; preds = %while.end
  %call37 = call i8* @xmalloc(i64 48) #6, !dbg !4617
  %21 = bitcast i8* %call37 to %struct._slp_instance*, !dbg !4617
  call void @llvm.dbg.value(metadata %struct._slp_instance* %21, metadata !4526, metadata !DIExpression()), !dbg !4541
  %22 = bitcast %struct._slp_tree** %node to i64*, !dbg !4619
  %23 = load i64, i64* %22, align 8, !dbg !4619
  %24 = bitcast i8* %call37 to i64*, !dbg !4620
  store i64 %23, i64* %24, align 8, !dbg !4620
  %group_size38 = getelementptr inbounds i8, i8* %call37, i64 8, !dbg !4621
  %25 = bitcast i8* %group_size38 to i32*, !dbg !4621
  store i32 %2, i32* %25, align 8, !dbg !4622
  %26 = load i32, i32* %max_nunits, align 4, !dbg !4623
  call void @llvm.dbg.value(metadata i32 %26, metadata !4538, metadata !DIExpression()), !dbg !4541
  %cmp39 = icmp ugt i32 %26, %conv, !dbg !4625
  br i1 %cmp39, label %if.then41, label %if.end44, !dbg !4626

if.then41:                                        ; preds = %if.then36
  call void @llvm.dbg.value(metadata i32 %26, metadata !4538, metadata !DIExpression()), !dbg !4541
  %call42 = call i32 @least_common_multiple(i32 %26, i32 %2) #6, !dbg !4627
  %div43 = udiv i32 %call42, %2, !dbg !4628
  call void @llvm.dbg.value(metadata i32 %div43, metadata !4529, metadata !DIExpression()), !dbg !4541
  br label %if.end44, !dbg !4629

if.end44:                                         ; preds = %if.then41, %if.then36
  %unrolling_factor.0 = phi i32 [ %div43, %if.then41 ], [ %div, %if.then36 ], !dbg !4541
  call void @llvm.dbg.value(metadata i32 %unrolling_factor.0, metadata !4529, metadata !DIExpression()), !dbg !4541
  %unrolling_factor45 = getelementptr inbounds i8, i8* %call37, i64 12, !dbg !4630
  %27 = bitcast i8* %unrolling_factor45 to i32*, !dbg !4630
  store i32 %unrolling_factor.0, i32* %27, align 4, !dbg !4631
  %28 = load i32, i32* %outside_cost, align 4, !dbg !4632
  call void @llvm.dbg.value(metadata i32 %28, metadata !4536, metadata !DIExpression()), !dbg !4541
  %cost46 = getelementptr inbounds i8, i8* %call37, i64 16, !dbg !4633
  %outside_of_loop47 = bitcast i8* %cost46 to i32*, !dbg !4633
  store i32 %28, i32* %outside_of_loop47, align 8, !dbg !4634
  %29 = load i32, i32* %inside_cost, align 4, !dbg !4635
  call void @llvm.dbg.value(metadata i32 %29, metadata !4535, metadata !DIExpression()), !dbg !4541
  %inside_of_loop49 = getelementptr inbounds i8, i8* %call37, i64 20, !dbg !4636
  %30 = bitcast i8* %inside_of_loop49 to i32*, !dbg !4636
  store i32 %29, i32* %30, align 4, !dbg !4637
  %31 = bitcast %struct.VEC_slp_tree_heap** %loads to i64*, !dbg !4638
  %32 = load i64, i64* %31, align 8, !dbg !4638
  %loads50 = getelementptr inbounds i8, i8* %call37, i64 32, !dbg !4639
  %33 = bitcast i8* %loads50 to i64*, !dbg !4640
  store i64 %32, i64* %33, align 8, !dbg !4640
  %first_load = getelementptr inbounds i8, i8* %call37, i64 40, !dbg !4641
  %34 = bitcast i8* %first_load to %union.gimple_statement_d**, !dbg !4641
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %34, align 8, !dbg !4642
  %35 = bitcast %struct.VEC_int_heap** %load_permutation to i64*, !dbg !4643
  %36 = load i64, i64* %35, align 8, !dbg !4643
  %load_permutation51 = getelementptr inbounds i8, i8* %call37, i64 24, !dbg !4644
  %37 = bitcast i8* %load_permutation51 to i64*, !dbg !4645
  store i64 %36, i64* %37, align 8, !dbg !4645
  %38 = inttoptr i64 %32 to %struct.VEC_slp_tree_heap*, !dbg !4646
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap* %38, metadata !4540, metadata !DIExpression()), !dbg !4541
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap* %38, metadata !4540, metadata !DIExpression()), !dbg !4541
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %38, i64 0, i32 0, !dbg !4646
  %call53 = call fastcc i32 @VEC_slp_tree_base_length(%struct.VEC_slp_tree_base* %base) #8, !dbg !4646
  %tobool54 = icmp eq i32 %call53, 0, !dbg !4646
  br i1 %tobool54, label %if.else67, label %if.then55, !dbg !4648

if.then55:                                        ; preds = %if.end44
  %39 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation, align 8, !dbg !4649
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap* %39, metadata !4539, metadata !DIExpression()), !dbg !4541
  %call56 = call fastcc zeroext i8 @vect_supported_load_permutation_p(%struct._slp_instance* %21, i32 %2, %struct.VEC_int_heap* %39) #8, !dbg !4652
  %tobool57 = icmp eq i8 %call56, 0, !dbg !4652
  br i1 %tobool57, label %if.then58, label %if.end64, !dbg !4653

if.then58:                                        ; preds = %if.then55
  %call59 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !4654
  %tobool60 = icmp eq i8 %call59, 0, !dbg !4654
  br i1 %tobool60, label %if.end63, label %if.then61, !dbg !4657

if.then61:                                        ; preds = %if.then58
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4658
  %call62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.27, i64 0, i64 0)) #6, !dbg !4660
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4661
  call void @print_gimple_stmt(%struct._IO_FILE* %41, %union.gimple_statement_d* %stmt, i32 0, i32 2) #6, !dbg !4662
  br label %if.end63, !dbg !4663

if.end63:                                         ; preds = %if.then58, %if.then61
  call void @vect_free_slp_instance(%struct._slp_instance* %21) #8, !dbg !4664
  br label %cleanup, !dbg !4665

if.end64:                                         ; preds = %if.then55
  %call65 = call fastcc %union.gimple_statement_d* @vect_find_first_load_in_slp_instance(%struct._slp_instance* %21) #8, !dbg !4666
  store %union.gimple_statement_d* %call65, %union.gimple_statement_d** %34, align 8, !dbg !4667
  br label %if.end69, !dbg !4668

if.else67:                                        ; preds = %if.end44
  %42 = bitcast i8* %load_permutation51 to %struct.VEC_int_heap**, !dbg !4669
  call fastcc void @VEC_int_heap_free(%struct.VEC_int_heap** nonnull %42) #8, !dbg !4669
  br label %if.end69

if.end69:                                         ; preds = %if.else67, %if.end64
  br i1 %tobool10, label %if.else73, label %if.then71, !dbg !4670

if.then71:                                        ; preds = %if.end69
  %slp_instances = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 16, !dbg !4671
  %call72 = call fastcc %struct._slp_instance** @VEC_slp_instance_heap_safe_push(%struct.VEC_slp_instance_heap** nonnull %slp_instances, %struct._slp_instance* %21) #8, !dbg !4671
  br label %if.end76, !dbg !4671

if.else73:                                        ; preds = %if.end69
  %slp_instances74 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %bb_vinfo, i64 0, i32 2, !dbg !4673
  %call75 = call fastcc %struct._slp_instance** @VEC_slp_instance_heap_safe_push(%struct.VEC_slp_instance_heap** nonnull %slp_instances74, %struct._slp_instance* %21) #8, !dbg !4673
  br label %if.end76

if.end76:                                         ; preds = %if.else73, %if.then71
  %call77 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !4674
  %tobool78 = icmp eq i8 %call77, 0, !dbg !4674
  br i1 %tobool78, label %cleanup, label %if.then79, !dbg !4676

if.then79:                                        ; preds = %if.end76
  %43 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4677
  call void @llvm.dbg.value(metadata %struct._slp_tree* %43, metadata !4527, metadata !DIExpression()), !dbg !4541
  call fastcc void @vect_print_slp_tree(%struct._slp_tree* %43) #8, !dbg !4678
  br label %cleanup, !dbg !4678

if.end81:                                         ; preds = %while.end
  %44 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !4679
  call void @llvm.dbg.value(metadata %struct._slp_tree* %44, metadata !4527, metadata !DIExpression()), !dbg !4541
  call fastcc void @vect_free_slp_tree(%struct._slp_tree* %44) #8, !dbg !4680
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap** %load_permutation, metadata !4539, metadata !DIExpression(DW_OP_deref)), !dbg !4541
  call fastcc void @VEC_int_heap_free(%struct.VEC_int_heap** nonnull %load_permutation) #8, !dbg !4681
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap** %loads, metadata !4540, metadata !DIExpression(DW_OP_deref)), !dbg !4541
  call fastcc void @VEC_slp_tree_heap_free(%struct.VEC_slp_tree_heap** nonnull %loads) #8, !dbg !4682
  br label %cleanup, !dbg !4683

cleanup:                                          ; preds = %if.end76, %if.then17, %if.then, %if.then79, %if.then20, %if.then6, %if.end81, %if.end63
  %retval.0 = phi i8 [ 0, %if.end63 ], [ 0, %if.end81 ], [ 0, %if.then6 ], [ 0, %if.then ], [ 0, %if.then20 ], [ 0, %if.then17 ], [ 1, %if.then79 ], [ 1, %if.end76 ], !dbg !4541
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7, !dbg !4684
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7, !dbg !4684
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7, !dbg !4684
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7, !dbg !4684
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #7, !dbg !4684
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !4684
  ret i8 %retval.0, !dbg !4684
}

; Function Attrs: nounwind uwtable
define dso_local void @vect_make_slp_decision(%struct._loop_vec_info* %loop_vinfo) local_unnamed_addr #5 !dbg !4685 {
entry:
  %instance = alloca %struct._slp_instance*, align 8
  call void @llvm.dbg.value(metadata %struct._loop_vec_info* %loop_vinfo, metadata !4689, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 1, metadata !4691, metadata !DIExpression()), !dbg !4695
  %slp_instances1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 16, !dbg !4696
  %0 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances1, align 8, !dbg !4696
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_heap* %0, metadata !4692, metadata !DIExpression()), !dbg !4695
  %1 = bitcast %struct._slp_instance** %instance to i8*, !dbg !4697
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !4697
  call void @llvm.dbg.value(metadata i32 0, metadata !4694, metadata !DIExpression()), !dbg !4695
  %call = tail call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !4698
  %tobool = icmp eq i8 %call, 0, !dbg !4698
  br i1 %tobool, label %if.end, label %if.then, !dbg !4700

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4701
  %call2 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0)) #6, !dbg !4702
  br label %if.end, !dbg !4702

if.end:                                           ; preds = %entry, %if.then
  call void @llvm.dbg.value(metadata i32 0, metadata !4690, metadata !DIExpression()), !dbg !4695
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %0, i64 0, i32 0, !dbg !4703
  br label %for.cond, !dbg !4706

for.cond:                                         ; preds = %if.end9, %if.end
  %unrolling_factor.0 = phi i32 [ 1, %if.end ], [ %unrolling_factor.1, %if.end9 ], !dbg !4695
  %i.0 = phi i32 [ 0, %if.end ], [ %inc10, %if.end9 ], !dbg !4707
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !4694, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !4690, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 %unrolling_factor.0, metadata !4691, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata %struct._slp_instance** %instance, metadata !4693, metadata !DIExpression(DW_OP_deref)), !dbg !4695
  %call4 = call fastcc i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %base, i32 %i.0, %struct._slp_instance** nonnull %instance) #8, !dbg !4708
  %tobool5 = icmp eq i32 %call4, 0, !dbg !4709
  br i1 %tobool5, label %for.end, label %for.body, !dbg !4709

for.body:                                         ; preds = %for.cond
  %3 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !4710
  call void @llvm.dbg.value(metadata %struct._slp_instance* %3, metadata !4693, metadata !DIExpression()), !dbg !4695
  %unrolling_factor6 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %3, i64 0, i32 2, !dbg !4710
  %4 = load i32, i32* %unrolling_factor6, align 4, !dbg !4710
  %cmp = icmp ult i32 %unrolling_factor.0, %4, !dbg !4713
  br i1 %cmp, label %if.then7, label %if.end9, !dbg !4714

if.then7:                                         ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct._slp_instance* %3, metadata !4693, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 %4, metadata !4691, metadata !DIExpression()), !dbg !4695
  br label %if.end9, !dbg !4715

if.end9:                                          ; preds = %if.then7, %for.body
  %unrolling_factor.1 = phi i32 [ %4, %if.then7 ], [ %unrolling_factor.0, %for.body ], !dbg !4695
  call void @llvm.dbg.value(metadata i32 %unrolling_factor.1, metadata !4691, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata %struct._slp_instance* %3, metadata !4693, metadata !DIExpression()), !dbg !4695
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %3, i64 0, i32 0, !dbg !4716
  %5 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !4716
  call fastcc void @vect_mark_slp_stmts(%struct._slp_tree* %5, i32 1, i32 -1) #8, !dbg !4717
  %inc10 = add nuw i32 %i.0, 1, !dbg !4718
  call void @llvm.dbg.value(metadata i32 %inc10, metadata !4694, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 %inc10, metadata !4690, metadata !DIExpression()), !dbg !4695
  br label %for.cond, !dbg !4719, !llvm.loop !4720

for.end:                                          ; preds = %for.cond
  %unrolling_factor.0.lcssa = phi i32 [ %unrolling_factor.0, %for.cond ], !dbg !4695
  %i.0.lcssa = phi i32 [ %i.0, %for.cond ], !dbg !4707
  call void @llvm.dbg.value(metadata i32 %unrolling_factor.0.lcssa, metadata !4691, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 %i.0.lcssa, metadata !4694, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 %unrolling_factor.0.lcssa, metadata !4691, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 %i.0.lcssa, metadata !4694, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 %unrolling_factor.0.lcssa, metadata !4691, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.value(metadata i32 %i.0.lcssa, metadata !4694, metadata !DIExpression()), !dbg !4695
  %slp_unrolling_factor = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 17, !dbg !4722
  store i32 %unrolling_factor.0.lcssa, i32* %slp_unrolling_factor, align 8, !dbg !4723
  %tobool11 = icmp eq i32 %i.0.lcssa, 0, !dbg !4724
  br i1 %tobool11, label %if.end16, label %land.lhs.true, !dbg !4726

land.lhs.true:                                    ; preds = %for.end
  %call12 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !4727
  %tobool13 = icmp eq i8 %call12, 0, !dbg !4727
  br i1 %tobool13, label %if.end16, label %if.then14, !dbg !4728

if.then14:                                        ; preds = %land.lhs.true
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4729
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0), i32 %i.0.lcssa, i32 %unrolling_factor.0.lcssa) #6, !dbg !4730
  br label %if.end16, !dbg !4730

if.end16:                                         ; preds = %land.lhs.true, %for.end, %if.then14
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !4731
  ret void, !dbg !4731
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %vec_, i32 %ix_, %struct._slp_instance** %ptr) unnamed_addr #0 !dbg !4732 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_base* %vec_, metadata !4739, metadata !DIExpression()), !dbg !4742
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !4740, metadata !DIExpression()), !dbg !4742
  call void @llvm.dbg.value(metadata %struct._slp_instance** %ptr, metadata !4741, metadata !DIExpression()), !dbg !4742
  %tobool = icmp eq %struct.VEC_slp_instance_base* %vec_, null, !dbg !4743
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !4743

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %vec_, i64 0, i32 0, !dbg !4743
  %0 = load i32, i32* %num, align 8, !dbg !4743
  %cmp = icmp ugt i32 %0, %ix_, !dbg !4743
  br i1 %cmp, label %if.then, label %if.else, !dbg !4745

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !4746
  %arrayidx = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !4746
  %1 = load %struct._slp_instance*, %struct._slp_instance** %arrayidx, align 8, !dbg !4746
  br label %return, !dbg !4746

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !4748

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct._slp_instance* [ null, %if.else ], [ %1, %if.then ], !dbg !4750
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !4750
  store %struct._slp_instance* %storemerge, %struct._slp_instance** %ptr, align 8, !dbg !4750
  ret i32 %retval.0, !dbg !4745
}

; Function Attrs: nounwind uwtable
define internal fastcc void @vect_mark_slp_stmts(%struct._slp_tree* %node, i32 %mark, i32 %j) unnamed_addr #5 !dbg !4751 {
entry:
  %stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.value(metadata %struct._slp_tree* %node, metadata !4755, metadata !DIExpression()), !dbg !4760
  call void @llvm.dbg.value(metadata i32 %mark, metadata !4756, metadata !DIExpression()), !dbg !4760
  call void @llvm.dbg.value(metadata i32 %j, metadata !4757, metadata !DIExpression()), !dbg !4760
  %0 = bitcast %union.gimple_statement_d** %stmt to i8*, !dbg !4761
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !4761
  %tobool = icmp eq %struct._slp_tree* %node, null, !dbg !4762
  br i1 %tobool, label %cleanup, label %for.cond.preheader, !dbg !4764

for.cond.preheader:                               ; preds = %entry
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 2, !dbg !4765
  %cmp = icmp slt i32 %j, 0, !dbg !4768
  br i1 %cmp, label %for.cond.preheader.split.us, label %for.cond.preheader.for.cond.preheader.split_crit_edge, !dbg !4770

for.cond.preheader.for.cond.preheader.split_crit_edge: ; preds = %for.cond.preheader
  br label %for.cond, !dbg !4770

for.cond.preheader.split.us:                      ; preds = %for.cond.preheader
  br label %for.cond.us, !dbg !4770

for.cond.us:                                      ; preds = %for.body.us, %for.cond.preheader.split.us
  %i.0.us = phi i32 [ %inc.us, %for.body.us ], [ 0, %for.cond.preheader.split.us ], !dbg !4771
  call void @llvm.dbg.value(metadata i32 %i.0.us, metadata !4758, metadata !DIExpression()), !dbg !4760
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !4772
  %tobool1.us = icmp eq %struct.VEC_gimple_heap* %1, null, !dbg !4772
  br i1 %tobool1.us, label %cond.end.us, label %cond.true.us, !dbg !4772

cond.true.us:                                     ; preds = %for.cond.us
  %base.us = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %1, i64 0, i32 0, !dbg !4772
  br label %cond.end.us, !dbg !4772

cond.end.us:                                      ; preds = %cond.true.us, %for.cond.us
  %cond.us = phi %struct.VEC_gimple_base* [ %base.us, %cond.true.us ], [ null, %for.cond.us ], !dbg !4772
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !4759, metadata !DIExpression(DW_OP_deref)), !dbg !4760
  %call.us = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond.us, i32 %i.0.us, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !4772
  %tobool3.us = icmp eq i32 %call.us, 0, !dbg !4770
  br i1 %tobool3.us, label %for.end.us-lcssa.us, label %for.body.us, !dbg !4770

for.body.us:                                      ; preds = %cond.end.us
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4773
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %2, metadata !4759, metadata !DIExpression()), !dbg !4760
  %call6.us = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %2) #8, !dbg !4773
  %slp_type.us = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call6.us, i64 0, i32 25, !dbg !4773
  store i32 %mark, i32* %slp_type.us, align 4, !dbg !4774
  %inc.us = add nuw nsw i32 %i.0.us, 1, !dbg !4775
  call void @llvm.dbg.value(metadata i32 %inc.us, metadata !4758, metadata !DIExpression()), !dbg !4760
  br label %for.cond.us, !dbg !4776, !llvm.loop !4777

for.end.us-lcssa.us:                              ; preds = %cond.end.us
  br label %for.end, !dbg !4779

for.cond:                                         ; preds = %for.cond.preheader.for.cond.preheader.split_crit_edge, %for.inc
  %i.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond.preheader.for.cond.preheader.split_crit_edge ], !dbg !4771
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !4758, metadata !DIExpression()), !dbg !4760
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !4772
  %tobool1 = icmp eq %struct.VEC_gimple_heap* %3, null, !dbg !4772
  br i1 %tobool1, label %cond.end, label %cond.true, !dbg !4772

cond.true:                                        ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i64 0, i32 0, !dbg !4772
  br label %cond.end, !dbg !4772

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %for.cond ], !dbg !4772
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !4759, metadata !DIExpression(DW_OP_deref)), !dbg !4760
  %call = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %i.0, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !4772
  %tobool3 = icmp eq i32 %call, 0, !dbg !4770
  br i1 %tobool3, label %for.end.us-lcssa, label %for.body, !dbg !4770

for.body:                                         ; preds = %cond.end
  %cmp4 = icmp eq i32 %i.0, %j, !dbg !4780
  br i1 %cmp4, label %if.then5, label %for.inc, !dbg !4781

if.then5:                                         ; preds = %for.body
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4773
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %4, metadata !4759, metadata !DIExpression()), !dbg !4760
  %call6 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %4) #8, !dbg !4773
  %slp_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call6, i64 0, i32 25, !dbg !4773
  store i32 %mark, i32* %slp_type, align 4, !dbg !4774
  br label %for.inc, !dbg !4773

for.inc:                                          ; preds = %if.then5, %for.body
  %inc = add nuw nsw i32 %i.0, 1, !dbg !4775
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4758, metadata !DIExpression()), !dbg !4760
  br label %for.cond, !dbg !4776, !llvm.loop !4777

for.end.us-lcssa:                                 ; preds = %cond.end
  br label %for.end, !dbg !4779

for.end:                                          ; preds = %for.end.us-lcssa.us, %for.end.us-lcssa
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 0, !dbg !4779
  %5 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !4779
  call fastcc void @vect_mark_slp_stmts(%struct._slp_tree* %5, i32 %mark, i32 %j) #8, !dbg !4782
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 1, !dbg !4783
  %6 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !4783
  call fastcc void @vect_mark_slp_stmts(%struct._slp_tree* %6, i32 %mark, i32 %j) #8, !dbg !4784
  br label %cleanup, !dbg !4785

cleanup:                                          ; preds = %entry, %for.end
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !4785
  ret void, !dbg !4785
}

; Function Attrs: nounwind uwtable
define dso_local void @vect_detect_hybrid_slp(%struct._loop_vec_info* %loop_vinfo) local_unnamed_addr #5 !dbg !4786 {
entry:
  %instance = alloca %struct._slp_instance*, align 8
  call void @llvm.dbg.value(metadata %struct._loop_vec_info* %loop_vinfo, metadata !4788, metadata !DIExpression()), !dbg !4792
  %slp_instances1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 16, !dbg !4793
  %0 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances1, align 8, !dbg !4793
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_heap* %0, metadata !4790, metadata !DIExpression()), !dbg !4792
  %1 = bitcast %struct._slp_instance** %instance to i8*, !dbg !4794
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !4794
  %call = tail call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !4795
  %tobool = icmp eq i8 %call, 0, !dbg !4795
  br i1 %tobool, label %if.end, label %if.then, !dbg !4797

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4798
  %call2 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0)) #6, !dbg !4799
  br label %if.end, !dbg !4799

if.end:                                           ; preds = %entry, %if.then
  call void @llvm.dbg.value(metadata i32 0, metadata !4789, metadata !DIExpression()), !dbg !4792
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %0, i64 0, i32 0, !dbg !4800
  br label %for.cond, !dbg !4803

for.cond:                                         ; preds = %for.body, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.body ], !dbg !4804
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !4789, metadata !DIExpression()), !dbg !4792
  call void @llvm.dbg.value(metadata %struct._slp_instance** %instance, metadata !4791, metadata !DIExpression(DW_OP_deref)), !dbg !4792
  %call4 = call fastcc i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %base, i32 %i.0, %struct._slp_instance** nonnull %instance) #8, !dbg !4805
  %tobool5 = icmp eq i32 %call4, 0, !dbg !4806
  br i1 %tobool5, label %for.end, label %for.body, !dbg !4806

for.body:                                         ; preds = %for.cond
  %3 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !4807
  call void @llvm.dbg.value(metadata %struct._slp_instance* %3, metadata !4791, metadata !DIExpression()), !dbg !4792
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %3, i64 0, i32 0, !dbg !4807
  %4 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !4807
  call fastcc void @vect_detect_hybrid_slp_stmts(%struct._slp_tree* %4) #8, !dbg !4808
  %inc = add i32 %i.0, 1, !dbg !4809
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4789, metadata !DIExpression()), !dbg !4792
  br label %for.cond, !dbg !4810, !llvm.loop !4811

for.end:                                          ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !4813
  ret void, !dbg !4813
}

; Function Attrs: nounwind uwtable
define internal fastcc void @vect_detect_hybrid_slp_stmts(%struct._slp_tree* %node) unnamed_addr #5 !dbg !4814 {
entry:
  %stmt = alloca %union.gimple_statement_d*, align 8
  %imm_iter = alloca %struct.immediate_use_iterator_d, align 8
  call void @llvm.dbg.value(metadata %struct._slp_tree* %node, metadata !4816, metadata !DIExpression()), !dbg !4829
  %0 = bitcast %union.gimple_statement_d** %stmt to i8*, !dbg !4830
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !4830
  %1 = bitcast %struct.immediate_use_iterator_d* %imm_iter to i8*, !dbg !4831
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %1) #7, !dbg !4831
  %tobool = icmp eq %struct._slp_tree* %node, null, !dbg !4832
  br i1 %tobool, label %cleanup, label %for.cond.preheader, !dbg !4834

for.cond.preheader:                               ; preds = %entry
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 2, !dbg !4835
  br label %for.cond, !dbg !4838

for.cond:                                         ; preds = %for.cond.preheader, %for.inc33
  %i.0 = phi i32 [ %inc, %for.inc33 ], [ 0, %for.cond.preheader ], !dbg !4839
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !4817, metadata !DIExpression()), !dbg !4829
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !4840
  %tobool1 = icmp eq %struct.VEC_gimple_heap* %2, null, !dbg !4840
  br i1 %tobool1, label %cond.end, label %cond.true, !dbg !4840

cond.true:                                        ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %2, i64 0, i32 0, !dbg !4840
  br label %cond.end, !dbg !4840

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %for.cond ], !dbg !4840
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !4818, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  %call = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %i.0, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !4840
  %tobool3 = icmp eq i32 %call, 0, !dbg !4838
  br i1 %tobool3, label %for.end34, label %for.body, !dbg !4838

for.body:                                         ; preds = %cond.end
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4841
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %3, metadata !4818, metadata !DIExpression()), !dbg !4829
  %call4 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %3) #8, !dbg !4841
  %slp_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call4, i64 0, i32 25, !dbg !4841
  %4 = load i32, i32* %slp_type, align 4, !dbg !4841
  %cmp = icmp eq i32 %4, 1, !dbg !4841
  br i1 %cmp, label %land.lhs.true, label %for.inc33, !dbg !4843

land.lhs.true:                                    ; preds = %for.body
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4844
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %5, metadata !4818, metadata !DIExpression()), !dbg !4829
  %call5 = call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %5, i32 0) #8, !dbg !4844
  %6 = getelementptr inbounds %union.tree_node, %union.tree_node* %call5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !4844
  %bf.load = load i64, i64* %6, align 8, !dbg !4844
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !4845
  %cmp7 = icmp eq i64 %bf.cast1, 141, !dbg !4845
  br i1 %cmp7, label %if.then8, label %for.inc33, !dbg !4846

if.then8:                                         ; preds = %land.lhs.true
  %7 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !4847
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %7, metadata !4818, metadata !DIExpression()), !dbg !4829
  %call9 = call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %7, i32 0) #8, !dbg !4847
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !4819, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  %call10 = call fastcc %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* nonnull %imm_iter, %union.tree_node* %call9) #8, !dbg !4847
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call10, metadata !4827, metadata !DIExpression()), !dbg !4829
  br label %for.cond11, !dbg !4847

for.cond11:                                       ; preds = %for.inc, %if.then8
  %use_stmt.0 = phi %union.gimple_statement_d* [ %call10, %if.then8 ], [ %call31, %for.inc ], !dbg !4849
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %use_stmt.0, metadata !4827, metadata !DIExpression()), !dbg !4829
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !4819, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  %call12 = call fastcc zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* nonnull %imm_iter) #8, !dbg !4850
  %tobool13 = icmp eq i8 %call12, 0, !dbg !4850
  br i1 %tobool13, label %for.body14, label %for.inc33.loopexit, !dbg !4847

for.body14:                                       ; preds = %for.cond11
  %call15 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %use_stmt.0) #8, !dbg !4852
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call15, metadata !4828, metadata !DIExpression()), !dbg !4829
  %tobool16 = icmp eq %struct._stmt_vec_info* %call15, null, !dbg !4854
  br i1 %tobool16, label %for.inc, label %land.lhs.true17, !dbg !4855

land.lhs.true17:                                  ; preds = %for.body14
  %slp_type18 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call15, i64 0, i32 25, !dbg !4856
  %8 = load i32, i32* %slp_type18, align 4, !dbg !4856
  %tobool19 = icmp eq i32 %8, 0, !dbg !4856
  br i1 %tobool19, label %land.lhs.true20, label %for.inc, !dbg !4857

land.lhs.true20:                                  ; preds = %land.lhs.true17
  %relevant = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call15, i64 0, i32 3, !dbg !4858
  %9 = load i32, i32* %relevant, align 8, !dbg !4858
  %tobool21 = icmp eq i32 %9, 0, !dbg !4858
  br i1 %tobool21, label %lor.lhs.false, label %if.then29, !dbg !4859

lor.lhs.false:                                    ; preds = %land.lhs.true20
  %def_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call15, i64 0, i32 16, !dbg !4860
  %10 = load i32, i32* %def_type, align 8, !dbg !4860
  %cmp22 = icmp eq i32 %10, 5, !dbg !4860
  br i1 %cmp22, label %if.then29, label %lor.lhs.false23, !dbg !4860

lor.lhs.false23:                                  ; preds = %lor.lhs.false
  %cmp25 = icmp eq i32 %10, 6, !dbg !4860
  br i1 %cmp25, label %if.then29, label %lor.lhs.false26, !dbg !4860

lor.lhs.false26:                                  ; preds = %lor.lhs.false23
  %cmp28 = icmp eq i32 %10, 7, !dbg !4860
  br i1 %cmp28, label %if.then29, label %for.inc, !dbg !4861

if.then29:                                        ; preds = %land.lhs.true20, %lor.lhs.false26, %lor.lhs.false23, %lor.lhs.false
  call fastcc void @vect_mark_slp_stmts(%struct._slp_tree* nonnull %node, i32 2, i32 %i.0) #8, !dbg !4862
  br label %for.inc, !dbg !4862

for.inc:                                          ; preds = %land.lhs.true17, %for.body14, %lor.lhs.false26, %if.then29
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm_iter, metadata !4819, metadata !DIExpression(DW_OP_deref)), !dbg !4829
  %call31 = call fastcc %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* nonnull %imm_iter) #8, !dbg !4850
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call31, metadata !4827, metadata !DIExpression()), !dbg !4829
  br label %for.cond11, !dbg !4850, !llvm.loop !4863

for.inc33.loopexit:                               ; preds = %for.cond11
  br label %for.inc33, !dbg !4865

for.inc33:                                        ; preds = %for.inc33.loopexit, %for.body, %land.lhs.true
  %inc = add nuw nsw i32 %i.0, 1, !dbg !4865
  call void @llvm.dbg.value(metadata i32 %inc, metadata !4817, metadata !DIExpression()), !dbg !4829
  br label %for.cond, !dbg !4866, !llvm.loop !4867

for.end34:                                        ; preds = %cond.end
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 0, !dbg !4869
  %11 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !4869
  call fastcc void @vect_detect_hybrid_slp_stmts(%struct._slp_tree* %11) #8, !dbg !4870
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 1, !dbg !4871
  %12 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !4871
  call fastcc void @vect_detect_hybrid_slp_stmts(%struct._slp_tree* %12) #8, !dbg !4872
  br label %cleanup, !dbg !4873

cleanup:                                          ; preds = %entry, %for.end34
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %1) #7, !dbg !4873
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !4873
  ret void, !dbg !4873
}

; Function Attrs: nounwind uwtable
define dso_local %struct._bb_vec_info* @vect_slp_analyze_bb(%struct.basic_block_def* %bb) local_unnamed_addr #5 !dbg !4874 {
entry:
  %instance = alloca %struct._slp_instance*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !4878, metadata !DIExpression()), !dbg !4890
  %0 = bitcast %struct._slp_instance** %instance to i8*, !dbg !4891
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !4891
  call void @llvm.dbg.value(metadata i32 0, metadata !4884, metadata !DIExpression()), !dbg !4890
  %1 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !4892
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1) #7, !dbg !4892
  %call = tail call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !4893
  %tobool = icmp eq i8 %call, 0, !dbg !4893
  br i1 %tobool, label %if.end, label %if.then, !dbg !4895

if.then:                                          ; preds = %entry
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4896
  %call1 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0)) #6, !dbg !4897
  br label %if.end, !dbg !4897

if.end:                                           ; preds = %entry, %if.then
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !4898
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %3) #7, !dbg !4898
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb) #8, !dbg !4898
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %1, i8* nonnull align 8 %3, i64 24, i1 false), !dbg !4898
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %3) #7, !dbg !4898
  br label %for.cond, !dbg !4899

for.cond:                                         ; preds = %for.inc, %if.end
  %insns.0 = phi i32 [ 0, %if.end ], [ %insns.1, %for.inc ], !dbg !4900
  call void @llvm.dbg.value(metadata i32 %insns.0, metadata !4884, metadata !DIExpression()), !dbg !4890
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4885, metadata !DIExpression(DW_OP_deref)), !dbg !4890
  %call2 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !4901
  %tobool3 = icmp eq i8 %call2, 0, !dbg !4902
  br i1 %tobool3, label %for.body, label %for.end, !dbg !4903

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4885, metadata !DIExpression(DW_OP_deref)), !dbg !4890
  %call4 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !4904
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call4, metadata !4886, metadata !DIExpression()), !dbg !4905
  %call5 = call fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %call4) #8, !dbg !4906
  %tobool6 = icmp eq i8 %call5, 0, !dbg !4906
  br i1 %tobool6, label %land.lhs.true, label %for.inc, !dbg !4908

land.lhs.true:                                    ; preds = %for.body
  %call7 = call fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %call4) #8, !dbg !4909
  %tobool8 = icmp eq i8 %call7, 0, !dbg !4909
  br i1 %tobool8, label %land.lhs.true9, label %for.inc, !dbg !4910

land.lhs.true9:                                   ; preds = %land.lhs.true
  %call10 = call fastcc i32 @gimple_code(%union.gimple_statement_d* %call4) #8, !dbg !4911
  %cmp = icmp ne i32 %call10, 4, !dbg !4912
  %inc = zext i1 %cmp to i32, !dbg !4913
  %spec.select = add nsw i32 %insns.0, %inc, !dbg !4913
  br label %for.inc, !dbg !4913

for.inc:                                          ; preds = %land.lhs.true, %for.body, %land.lhs.true9
  %insns.1 = phi i32 [ %insns.0, %for.body ], [ %insns.0, %land.lhs.true ], [ %spec.select, %land.lhs.true9 ], !dbg !4890
  call void @llvm.dbg.value(metadata i32 %insns.1, metadata !4884, metadata !DIExpression()), !dbg !4890
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !4885, metadata !DIExpression(DW_OP_deref)), !dbg !4890
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #8, !dbg !4914
  br label %for.cond, !dbg !4915, !llvm.loop !4916

for.end:                                          ; preds = %for.cond
  %insns.0.lcssa = phi i32 [ %insns.0, %for.cond ], !dbg !4900
  call void @llvm.dbg.value(metadata i32 %insns.0.lcssa, metadata !4884, metadata !DIExpression()), !dbg !4890
  call void @llvm.dbg.value(metadata i32 %insns.0.lcssa, metadata !4884, metadata !DIExpression()), !dbg !4890
  call void @llvm.dbg.value(metadata i32 %insns.0.lcssa, metadata !4884, metadata !DIExpression()), !dbg !4890
  %4 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !4918
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %4, i64 113, i32 1, !dbg !4918
  %5 = load i32, i32* %value, align 8, !dbg !4918
  %cmp13 = icmp sgt i32 %insns.0.lcssa, %5, !dbg !4920
  br i1 %cmp13, label %if.then14, label %if.end20, !dbg !4921

if.then14:                                        ; preds = %for.end
  %call15 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !4922
  %tobool16 = icmp eq i8 %call15, 0, !dbg !4922
  br i1 %tobool16, label %cleanup, label %if.then17, !dbg !4925

if.then17:                                        ; preds = %if.then14
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4926
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0)) #6, !dbg !4927
  br label %cleanup, !dbg !4927

if.end20:                                         ; preds = %for.end
  %call21 = call fastcc %struct._bb_vec_info* @new_bb_vec_info(%struct.basic_block_def* %bb) #8, !dbg !4928
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %call21, metadata !4879, metadata !DIExpression()), !dbg !4890
  %tobool22 = icmp eq %struct._bb_vec_info* %call21, null, !dbg !4929
  br i1 %tobool22, label %cleanup, label %if.end24, !dbg !4931

if.end24:                                         ; preds = %if.end20
  %call25 = call zeroext i8 @vect_analyze_data_refs(%struct._loop_vec_info* null, %struct._bb_vec_info* nonnull %call21) #6, !dbg !4932
  %tobool26 = icmp eq i8 %call25, 0, !dbg !4932
  br i1 %tobool26, label %if.then27, label %if.end33, !dbg !4934

if.then27:                                        ; preds = %if.end24
  %call28 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !4935
  %tobool29 = icmp eq i8 %call28, 0, !dbg !4935
  br i1 %tobool29, label %if.end32, label %if.then30, !dbg !4938

if.then30:                                        ; preds = %if.then27
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4939
  %call31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.7, i64 0, i64 0)) #6, !dbg !4940
  br label %if.end32, !dbg !4940

if.end32:                                         ; preds = %if.then27, %if.then30
  call fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* nonnull %call21) #8, !dbg !4941
  br label %cleanup, !dbg !4942

if.end33:                                         ; preds = %if.end24
  %ddrs34 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %call21, i64 0, i32 4, !dbg !4943
  %8 = load %struct.VEC_ddr_p_heap*, %struct.VEC_ddr_p_heap** %ddrs34, align 8, !dbg !4943
  call void @llvm.dbg.value(metadata %struct.VEC_ddr_p_heap* %8, metadata !4880, metadata !DIExpression()), !dbg !4890
  %base = getelementptr inbounds %struct.VEC_ddr_p_heap, %struct.VEC_ddr_p_heap* %8, i64 0, i32 0, !dbg !4944
  %call36 = call fastcc i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %base) #8, !dbg !4944
  %tobool37 = icmp eq i32 %call36, 0, !dbg !4944
  br i1 %tobool37, label %if.then38, label %if.end44, !dbg !4946

if.then38:                                        ; preds = %if.end33
  %call39 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !4947
  %tobool40 = icmp eq i8 %call39, 0, !dbg !4947
  br i1 %tobool40, label %if.end43, label %if.then41, !dbg !4950

if.then41:                                        ; preds = %if.then38
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4951
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0)) #6, !dbg !4952
  br label %if.end43, !dbg !4952

if.end43:                                         ; preds = %if.then38, %if.then41
  call fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* nonnull %call21) #8, !dbg !4953
  br label %cleanup, !dbg !4954

if.end44:                                         ; preds = %if.end33
  %call45 = call zeroext i8 @vect_analyze_data_refs_alignment(%struct._loop_vec_info* null, %struct._bb_vec_info* nonnull %call21) #6, !dbg !4955
  %tobool46 = icmp eq i8 %call45, 0, !dbg !4955
  br i1 %tobool46, label %if.then47, label %if.end53, !dbg !4957

if.then47:                                        ; preds = %if.end44
  %call48 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !4958
  %tobool49 = icmp eq i8 %call48, 0, !dbg !4958
  br i1 %tobool49, label %if.end52, label %if.then50, !dbg !4961

if.then50:                                        ; preds = %if.then47
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4962
  %call51 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.9, i64 0, i64 0)) #6, !dbg !4963
  br label %if.end52, !dbg !4963

if.end52:                                         ; preds = %if.then47, %if.then50
  call fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* nonnull %call21) #8, !dbg !4964
  br label %cleanup, !dbg !4965

if.end53:                                         ; preds = %if.end44
  %call54 = call zeroext i8 @vect_analyze_data_ref_dependences(%struct._loop_vec_info* null, %struct._bb_vec_info* nonnull %call21) #6, !dbg !4966
  %tobool55 = icmp eq i8 %call54, 0, !dbg !4966
  br i1 %tobool55, label %if.then56, label %if.end62, !dbg !4968

if.then56:                                        ; preds = %if.end53
  %call57 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !4969
  %tobool58 = icmp eq i8 %call57, 0, !dbg !4969
  br i1 %tobool58, label %if.end61, label %if.then59, !dbg !4972

if.then59:                                        ; preds = %if.then56
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4973
  %call60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.10, i64 0, i64 0)) #6, !dbg !4974
  br label %if.end61, !dbg !4974

if.end61:                                         ; preds = %if.then56, %if.then59
  call fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* nonnull %call21) #8, !dbg !4975
  br label %cleanup, !dbg !4976

if.end62:                                         ; preds = %if.end53
  %call63 = call zeroext i8 @vect_analyze_data_ref_accesses(%struct._loop_vec_info* null, %struct._bb_vec_info* nonnull %call21) #6, !dbg !4977
  %tobool64 = icmp eq i8 %call63, 0, !dbg !4977
  br i1 %tobool64, label %if.then65, label %if.end71, !dbg !4979

if.then65:                                        ; preds = %if.end62
  %call66 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !4980
  %tobool67 = icmp eq i8 %call66, 0, !dbg !4980
  br i1 %tobool67, label %if.end70, label %if.then68, !dbg !4983

if.then68:                                        ; preds = %if.then65
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4984
  %call69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i64 0, i64 0)) #6, !dbg !4985
  br label %if.end70, !dbg !4985

if.end70:                                         ; preds = %if.then65, %if.then68
  call fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* nonnull %call21) #8, !dbg !4986
  br label %cleanup, !dbg !4987

if.end71:                                         ; preds = %if.end62
  %call72 = call zeroext i8 @vect_verify_datarefs_alignment(%struct._loop_vec_info* null, %struct._bb_vec_info* nonnull %call21) #6, !dbg !4988
  %tobool73 = icmp eq i8 %call72, 0, !dbg !4988
  br i1 %tobool73, label %if.then74, label %if.end80, !dbg !4990

if.then74:                                        ; preds = %if.end71
  %call75 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !4991
  %tobool76 = icmp eq i8 %call75, 0, !dbg !4991
  br i1 %tobool76, label %if.end79, label %if.then77, !dbg !4994

if.then77:                                        ; preds = %if.then74
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !4995
  %call78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.12, i64 0, i64 0)) #6, !dbg !4996
  br label %if.end79, !dbg !4996

if.end79:                                         ; preds = %if.then74, %if.then77
  call fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* nonnull %call21) #8, !dbg !4997
  br label %cleanup, !dbg !4998

if.end80:                                         ; preds = %if.end71
  %call81 = call zeroext i8 @vect_analyze_slp(%struct._loop_vec_info* null, %struct._bb_vec_info* nonnull %call21) #8, !dbg !4999
  %tobool82 = icmp eq i8 %call81, 0, !dbg !4999
  br i1 %tobool82, label %if.then83, label %if.end89, !dbg !5001

if.then83:                                        ; preds = %if.end80
  %call84 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !5002
  %tobool85 = icmp eq i8 %call84, 0, !dbg !5002
  br i1 %tobool85, label %if.end88, label %if.then86, !dbg !5005

if.then86:                                        ; preds = %if.then83
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5006
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.13, i64 0, i64 0)) #6, !dbg !5007
  br label %if.end88, !dbg !5007

if.end88:                                         ; preds = %if.then83, %if.then86
  call fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* nonnull %call21) #8, !dbg !5008
  br label %cleanup, !dbg !5009

if.end89:                                         ; preds = %if.end80
  %slp_instances90 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %call21, i64 0, i32 2, !dbg !5010
  %15 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances90, align 8, !dbg !5010
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_heap* %15, metadata !4881, metadata !DIExpression()), !dbg !4890
  call void @llvm.dbg.value(metadata i32 0, metadata !4883, metadata !DIExpression()), !dbg !4890
  %base94 = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %15, i64 0, i32 0, !dbg !5011
  br label %for.cond91, !dbg !5014

for.cond91:                                       ; preds = %for.body100, %if.end89
  %i.0 = phi i32 [ 0, %if.end89 ], [ %inc103, %for.body100 ], !dbg !5015
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !4883, metadata !DIExpression()), !dbg !4890
  call void @llvm.dbg.value(metadata %struct._slp_instance** %instance, metadata !4882, metadata !DIExpression(DW_OP_deref)), !dbg !4890
  %call98 = call fastcc i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %base94, i32 %i.0, %struct._slp_instance** nonnull %instance) #8, !dbg !5016
  %tobool99 = icmp eq i32 %call98, 0, !dbg !5017
  br i1 %tobool99, label %for.end104, label %for.body100, !dbg !5017

for.body100:                                      ; preds = %for.cond91
  %16 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5018
  call void @llvm.dbg.value(metadata %struct._slp_instance* %16, metadata !4882, metadata !DIExpression()), !dbg !4890
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %16, i64 0, i32 0, !dbg !5018
  %17 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !5018
  call fastcc void @vect_mark_slp_stmts(%struct._slp_tree* %17, i32 1, i32 -1) #8, !dbg !5020
  %18 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5021
  call void @llvm.dbg.value(metadata %struct._slp_instance* %18, metadata !4882, metadata !DIExpression()), !dbg !4890
  %root101 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %18, i64 0, i32 0, !dbg !5021
  %19 = load %struct._slp_tree*, %struct._slp_tree** %root101, align 8, !dbg !5021
  call fastcc void @vect_mark_slp_stmts_relevant(%struct._slp_tree* %19) #8, !dbg !5022
  %inc103 = add nuw nsw i32 %i.0, 1, !dbg !5023
  call void @llvm.dbg.value(metadata i32 %inc103, metadata !4883, metadata !DIExpression()), !dbg !4890
  br label %for.cond91, !dbg !5024, !llvm.loop !5025

for.end104:                                       ; preds = %for.cond91
  %call105 = call fastcc zeroext i8 @vect_slp_analyze_operations(%struct._bb_vec_info* nonnull %call21) #8, !dbg !5027
  %tobool106 = icmp eq i8 %call105, 0, !dbg !5027
  br i1 %tobool106, label %if.then107, label %if.end113, !dbg !5029

if.then107:                                       ; preds = %for.end104
  %call108 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !5030
  %tobool109 = icmp eq i8 %call108, 0, !dbg !5030
  br i1 %tobool109, label %if.end112, label %if.then110, !dbg !5033

if.then110:                                       ; preds = %if.then107
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5034
  %call111 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.14, i64 0, i64 0)) #6, !dbg !5035
  br label %if.end112, !dbg !5035

if.end112:                                        ; preds = %if.then107, %if.then110
  call fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* nonnull %call21) #8, !dbg !5036
  br label %cleanup, !dbg !5037

if.end113:                                        ; preds = %for.end104
  %call114 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !5038
  %tobool115 = icmp eq i8 %call114, 0, !dbg !5038
  br i1 %tobool115, label %cleanup, label %if.then116, !dbg !5040

if.then116:                                       ; preds = %if.end113
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5041
  %call117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.15, i64 0, i64 0)) #6, !dbg !5042
  br label %cleanup, !dbg !5042

cleanup:                                          ; preds = %if.then14, %if.end113, %if.end20, %if.then116, %if.then17, %if.end112, %if.end88, %if.end79, %if.end70, %if.end61, %if.end52, %if.end43, %if.end32
  %retval.0 = phi %struct._bb_vec_info* [ null, %if.end112 ], [ null, %if.end88 ], [ null, %if.end79 ], [ null, %if.end70 ], [ null, %if.end61 ], [ null, %if.end52 ], [ null, %if.end43 ], [ null, %if.end32 ], [ null, %if.then17 ], [ null, %if.then14 ], [ null, %if.end20 ], [ %call21, %if.then116 ], [ %call21, %if.end113 ], !dbg !4890
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1) #7, !dbg !5043
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5043
  ret %struct._bb_vec_info* %retval.0, !dbg !5043
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_debug(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5044 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5048, metadata !DIExpression()), !dbg !5049
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !5050
  %cmp = icmp eq i32 %call, 2, !dbg !5051
  %conv1 = zext i1 %cmp to i8, !dbg !5050
  ret i8 %conv1, !dbg !5052
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_nop_p(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5053 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5055, metadata !DIExpression()), !dbg !5056
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !5057
  %cmp = icmp eq i32 %call, 18, !dbg !5058
  %conv1 = zext i1 %cmp to i8, !dbg !5057
  ret i8 %conv1, !dbg !5059
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_code(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !5060 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !5064, metadata !DIExpression()), !dbg !5065
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 0, !dbg !5066
  %bf.load = load i32, i32* %0, align 8, !dbg !5066
  %bf.clear = and i32 %bf.load, 255, !dbg !5066
  ret i32 %bf.clear, !dbg !5067
}

; Function Attrs: nounwind uwtable
define internal fastcc %struct._bb_vec_info* @new_bb_vec_info(%struct.basic_block_def* %bb) unnamed_addr #5 !dbg !5068 {
entry:
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !5070, metadata !DIExpression()), !dbg !5077
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* null, metadata !5071, metadata !DIExpression()), !dbg !5077
  %0 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !5078
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !5078
  %call = tail call i8* @xcalloc(i64 1, i64 40) #6, !dbg !5079
  %1 = bitcast i8* %call to %struct._bb_vec_info*, !dbg !5080
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %1, metadata !5071, metadata !DIExpression()), !dbg !5077
  %bb1 = bitcast i8* %call to %struct.basic_block_def**, !dbg !5081
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb1, align 8, !dbg !5082
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5083
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #7, !dbg !5083
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb) #8, !dbg !5083
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %2, i64 24, i1 false), !dbg !5083
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #7, !dbg !5083
  br label %for.cond, !dbg !5084

for.cond:                                         ; preds = %for.body, %entry
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5072, metadata !DIExpression(DW_OP_deref)), !dbg !5077
  %call2 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !5085
  %tobool = icmp eq i8 %call2, 0, !dbg !5086
  br i1 %tobool, label %for.body, label %for.end, !dbg !5087

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5072, metadata !DIExpression(DW_OP_deref)), !dbg !5077
  %call3 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %gsi) #8, !dbg !5088
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call3, metadata !5073, metadata !DIExpression()), !dbg !5089
  call fastcc void @gimple_set_uid(%union.gimple_statement_d* %call3, i32 0) #8, !dbg !5090
  %call4 = call %struct._stmt_vec_info* @new_stmt_vec_info(%union.gimple_statement_d* %call3, %struct._loop_vec_info* null, %struct._bb_vec_info* %1) #6, !dbg !5091
  call fastcc void @set_vinfo_for_stmt(%union.gimple_statement_d* %call3, %struct._stmt_vec_info* %call4) #8, !dbg !5092
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5072, metadata !DIExpression(DW_OP_deref)), !dbg !5077
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %gsi) #8, !dbg !5093
  br label %for.cond, !dbg !5094, !llvm.loop !5095

for.end:                                          ; preds = %for.cond
  %call5 = call fastcc %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 10) #8, !dbg !5097
  %strided_stores = getelementptr inbounds i8, i8* %call, i64 8, !dbg !5098
  %3 = bitcast i8* %strided_stores to %struct.VEC_gimple_heap**, !dbg !5098
  store %struct.VEC_gimple_heap* %call5, %struct.VEC_gimple_heap** %3, align 8, !dbg !5099
  %call6 = call fastcc %struct.VEC_slp_instance_heap* @VEC_slp_instance_heap_alloc(i32 2) #8, !dbg !5100
  %slp_instances = getelementptr inbounds i8, i8* %call, i64 16, !dbg !5101
  %4 = bitcast i8* %slp_instances to %struct.VEC_slp_instance_heap**, !dbg !5101
  store %struct.VEC_slp_instance_heap* %call6, %struct.VEC_slp_instance_heap** %4, align 8, !dbg !5102
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 2, !dbg !5103
  store i8* %call, i8** %aux, align 8, !dbg !5104
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !5105
  ret %struct._bb_vec_info* %1, !dbg !5106
}

declare dso_local zeroext i8 @vect_analyze_data_refs(%struct._loop_vec_info*, %struct._bb_vec_info*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* %bb_vinfo) unnamed_addr #5 !dbg !5107 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %bb_vinfo, metadata !5111, metadata !DIExpression()), !dbg !5119
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !5120
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !5120
  %tobool = icmp eq %struct._bb_vec_info* %bb_vinfo, null, !dbg !5121
  br i1 %tobool, label %cleanup, label %if.end, !dbg !5123

if.end:                                           ; preds = %entry
  %bb1 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %bb_vinfo, i64 0, i32 0, !dbg !5124
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !5124
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %1, metadata !5112, metadata !DIExpression()), !dbg !5119
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !5125
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #7, !dbg !5125
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %1) #8, !dbg !5125
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %2, i64 24, i1 false), !dbg !5125
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #7, !dbg !5125
  br label %for.cond, !dbg !5126

for.cond:                                         ; preds = %for.inc, %if.end
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !5113, metadata !DIExpression(DW_OP_deref)), !dbg !5119
  %call = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #8, !dbg !5127
  %tobool2 = icmp eq i8 %call, 0, !dbg !5128
  br i1 %tobool2, label %for.body, label %for.end, !dbg !5129

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !5113, metadata !DIExpression(DW_OP_deref)), !dbg !5119
  %call3 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #8, !dbg !5130
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call3, metadata !5114, metadata !DIExpression()), !dbg !5131
  %call4 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %call3) #8, !dbg !5132
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call4, metadata !5118, metadata !DIExpression()), !dbg !5131
  %tobool5 = icmp eq %struct._stmt_vec_info* %call4, null, !dbg !5133
  br i1 %tobool5, label %for.inc, label %if.then6, !dbg !5135

if.then6:                                         ; preds = %for.body
  call void @free_stmt_vec_info(%union.gimple_statement_d* %call3) #6, !dbg !5136
  br label %for.inc, !dbg !5136

for.inc:                                          ; preds = %for.body, %if.then6
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !5113, metadata !DIExpression(DW_OP_deref)), !dbg !5119
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #8, !dbg !5137
  br label %for.cond, !dbg !5138, !llvm.loop !5139

for.end:                                          ; preds = %for.cond
  %strided_stores = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %bb_vinfo, i64 0, i32 1, !dbg !5141
  call fastcc void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** nonnull %strided_stores) #8, !dbg !5141
  %slp_instances = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %bb_vinfo, i64 0, i32 2, !dbg !5142
  call fastcc void @VEC_slp_instance_heap_free(%struct.VEC_slp_instance_heap** nonnull %slp_instances) #8, !dbg !5142
  %3 = bitcast %struct._bb_vec_info* %bb_vinfo to i8*, !dbg !5143
  call void @free(i8* nonnull %3) #6, !dbg !5144
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i64 0, i32 2, !dbg !5145
  store i8* null, i8** %aux, align 8, !dbg !5146
  br label %cleanup, !dbg !5147

cleanup:                                          ; preds = %entry, %for.end
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !5147
  ret void, !dbg !5147
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_ddr_p_base_length(%struct.VEC_ddr_p_base* %vec_) unnamed_addr #0 !dbg !5148 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_ddr_p_base* %vec_, metadata !5154, metadata !DIExpression()), !dbg !5155
  %tobool = icmp eq %struct.VEC_ddr_p_base* %vec_, null, !dbg !5156
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5156

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_ddr_p_base, %struct.VEC_ddr_p_base* %vec_, i64 0, i32 0, !dbg !5156
  %0 = load i32, i32* %num, align 8, !dbg !5156
  br label %cond.end, !dbg !5156

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !5156
  ret i32 %cond, !dbg !5156
}

declare dso_local zeroext i8 @vect_analyze_data_refs_alignment(%struct._loop_vec_info*, %struct._bb_vec_info*) local_unnamed_addr #2

declare dso_local zeroext i8 @vect_analyze_data_ref_dependences(%struct._loop_vec_info*, %struct._bb_vec_info*) local_unnamed_addr #2

declare dso_local zeroext i8 @vect_analyze_data_ref_accesses(%struct._loop_vec_info*, %struct._bb_vec_info*) local_unnamed_addr #2

declare dso_local zeroext i8 @vect_verify_datarefs_alignment(%struct._loop_vec_info*, %struct._bb_vec_info*) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc void @vect_mark_slp_stmts_relevant(%struct._slp_tree* %node) unnamed_addr #5 !dbg !5157 {
entry:
  %stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.value(metadata %struct._slp_tree* %node, metadata !5159, metadata !DIExpression()), !dbg !5163
  %0 = bitcast %union.gimple_statement_d** %stmt to i8*, !dbg !5164
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5164
  %tobool = icmp eq %struct._slp_tree* %node, null, !dbg !5165
  br i1 %tobool, label %cleanup, label %for.cond.preheader, !dbg !5167

for.cond.preheader:                               ; preds = %entry
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 2, !dbg !5168
  br label %for.cond, !dbg !5171

for.cond:                                         ; preds = %for.cond.preheader, %cond.end9
  %i.0 = phi i32 [ %inc, %cond.end9 ], [ 0, %for.cond.preheader ], !dbg !5172
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5160, metadata !DIExpression()), !dbg !5163
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5173
  %tobool1 = icmp eq %struct.VEC_gimple_heap* %1, null, !dbg !5173
  br i1 %tobool1, label %cond.end, label %cond.true, !dbg !5173

cond.true:                                        ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %1, i64 0, i32 0, !dbg !5173
  br label %cond.end, !dbg !5173

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %for.cond ], !dbg !5173
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !5161, metadata !DIExpression(DW_OP_deref)), !dbg !5163
  %call = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %i.0, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !5173
  %tobool3 = icmp eq i32 %call, 0, !dbg !5171
  br i1 %tobool3, label %for.end, label %for.body, !dbg !5171

for.body:                                         ; preds = %cond.end
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5174
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %2, metadata !5161, metadata !DIExpression()), !dbg !5163
  %call4 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %2) #8, !dbg !5176
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call4, metadata !5162, metadata !DIExpression()), !dbg !5163
  %relevant = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call4, i64 0, i32 3, !dbg !5177
  %3 = load i32, i32* %relevant, align 8, !dbg !5177
  %tobool5 = icmp eq i32 %3, 0, !dbg !5177
  br i1 %tobool5, label %cond.end9, label %lor.lhs.false, !dbg !5177

lor.lhs.false:                                    ; preds = %for.body
  %cmp = icmp eq i32 %3, 4, !dbg !5177
  br i1 %cmp, label %cond.end9, label %cond.true7, !dbg !5177

cond.true7:                                       ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 721, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !5177
  br label %cond.end9, !dbg !5177

cond.end9:                                        ; preds = %for.body, %lor.lhs.false, %cond.true7
  store i32 4, i32* %relevant, align 8, !dbg !5178
  %inc = add nuw nsw i32 %i.0, 1, !dbg !5179
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5160, metadata !DIExpression()), !dbg !5163
  br label %for.cond, !dbg !5180, !llvm.loop !5181

for.end:                                          ; preds = %cond.end
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 0, !dbg !5183
  %4 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !5183
  call fastcc void @vect_mark_slp_stmts_relevant(%struct._slp_tree* %4) #8, !dbg !5184
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 1, !dbg !5185
  %5 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !5185
  call fastcc void @vect_mark_slp_stmts_relevant(%struct._slp_tree* %5) #8, !dbg !5186
  br label %cleanup, !dbg !5187

cleanup:                                          ; preds = %entry, %for.end
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5187
  ret void, !dbg !5187
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vect_slp_analyze_operations(%struct._bb_vec_info* %bb_vinfo) unnamed_addr #5 !dbg !5188 {
entry:
  %instance = alloca %struct._slp_instance*, align 8
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %bb_vinfo, metadata !5192, metadata !DIExpression()), !dbg !5196
  %slp_instances1 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %bb_vinfo, i64 0, i32 2, !dbg !5197
  %0 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances1, align 8, !dbg !5197
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_heap* %0, metadata !5193, metadata !DIExpression()), !dbg !5196
  %1 = bitcast %struct._slp_instance** %instance to i8*, !dbg !5198
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !5198
  call void @llvm.dbg.value(metadata i32 0, metadata !5195, metadata !DIExpression()), !dbg !5196
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %0, i64 0, i32 0, !dbg !5199
  br label %for.cond, !dbg !5202

for.cond:                                         ; preds = %if.end, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %i.1, %if.end ], !dbg !5203
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5195, metadata !DIExpression()), !dbg !5196
  call void @llvm.dbg.value(metadata %struct._slp_instance** %instance, metadata !5194, metadata !DIExpression(DW_OP_deref)), !dbg !5196
  %call = call fastcc i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %base, i32 %i.0, %struct._slp_instance** nonnull %instance) #8, !dbg !5204
  %tobool2 = icmp eq i32 %call, 0, !dbg !5205
  br i1 %tobool2, label %for.end, label %for.body, !dbg !5205

for.body:                                         ; preds = %for.cond
  %2 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5206
  call void @llvm.dbg.value(metadata %struct._slp_instance* %2, metadata !5194, metadata !DIExpression()), !dbg !5196
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %2, i64 0, i32 0, !dbg !5206
  %3 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !5206
  %call3 = call fastcc zeroext i8 @vect_slp_analyze_node_operations(%struct._bb_vec_info* %bb_vinfo, %struct._slp_tree* %3) #8, !dbg !5209
  %tobool4 = icmp eq i8 %call3, 0, !dbg !5209
  br i1 %tobool4, label %if.then, label %if.else, !dbg !5210

if.then:                                          ; preds = %for.body
  %4 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5211
  call void @llvm.dbg.value(metadata %struct._slp_instance* %4, metadata !5194, metadata !DIExpression()), !dbg !5196
  call void @vect_free_slp_instance(%struct._slp_instance* %4) #8, !dbg !5213
  %call11 = call fastcc %struct._slp_instance* @VEC_slp_instance_base_ordered_remove(%struct.VEC_slp_instance_base* %base, i32 %i.0) #8, !dbg !5214
  br label %if.end, !dbg !5215

if.else:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1, !dbg !5216
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5195, metadata !DIExpression()), !dbg !5196
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %i.1 = phi i32 [ %inc, %if.else ], [ %i.0, %if.then ], !dbg !5203
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !5195, metadata !DIExpression()), !dbg !5196
  br label %for.cond, !dbg !5217, !llvm.loop !5218

for.end:                                          ; preds = %for.cond
  %call18 = call fastcc i32 @VEC_slp_instance_base_length(%struct.VEC_slp_instance_base* %base) #8, !dbg !5220
  %tobool19 = icmp ne i32 %call18, 0, !dbg !5220
  %. = zext i1 %tobool19 to i8, !dbg !5196
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !5222
  ret i8 %., !dbg !5222
}

; Function Attrs: nounwind uwtable
define dso_local void @vect_update_slp_costs_according_to_vf(%struct._loop_vec_info* %loop_vinfo) local_unnamed_addr #5 !dbg !5223 {
entry:
  %instance = alloca %struct._slp_instance*, align 8
  call void @llvm.dbg.value(metadata %struct._loop_vec_info* %loop_vinfo, metadata !5225, metadata !DIExpression()), !dbg !5230
  %vectorization_factor = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 6, !dbg !5231
  %0 = load i32, i32* %vectorization_factor, align 8, !dbg !5231
  call void @llvm.dbg.value(metadata i32 %0, metadata !5227, metadata !DIExpression()), !dbg !5230
  %slp_instances1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 16, !dbg !5232
  %1 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances1, align 8, !dbg !5232
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_heap* %1, metadata !5228, metadata !DIExpression()), !dbg !5230
  %2 = bitcast %struct._slp_instance** %instance to i8*, !dbg !5233
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #7, !dbg !5233
  %call = tail call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !5234
  %tobool = icmp eq i8 %call, 0, !dbg !5234
  br i1 %tobool, label %if.end, label %if.then, !dbg !5236

if.then:                                          ; preds = %entry
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5237
  %call2 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.16, i64 0, i64 0)) #6, !dbg !5238
  br label %if.end, !dbg !5238

if.end:                                           ; preds = %entry, %if.then
  call void @llvm.dbg.value(metadata i32 0, metadata !5226, metadata !DIExpression()), !dbg !5230
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %1, i64 0, i32 0, !dbg !5239
  br label %for.cond, !dbg !5242

for.cond:                                         ; preds = %for.body, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.body ], !dbg !5243
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5226, metadata !DIExpression()), !dbg !5230
  call void @llvm.dbg.value(metadata %struct._slp_instance** %instance, metadata !5229, metadata !DIExpression(DW_OP_deref)), !dbg !5230
  %call4 = call fastcc i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %base, i32 %i.0, %struct._slp_instance** nonnull %instance) #8, !dbg !5244
  %tobool5 = icmp eq i32 %call4, 0, !dbg !5245
  br i1 %tobool5, label %for.end, label %for.body, !dbg !5245

for.body:                                         ; preds = %for.cond
  %4 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5246
  call void @llvm.dbg.value(metadata %struct._slp_instance* %4, metadata !5229, metadata !DIExpression()), !dbg !5230
  %unrolling_factor = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %4, i64 0, i32 2, !dbg !5246
  %5 = load i32, i32* %unrolling_factor, align 4, !dbg !5246
  %div = udiv i32 %0, %5, !dbg !5247
  call void @llvm.dbg.value(metadata %struct._slp_instance* %4, metadata !5229, metadata !DIExpression()), !dbg !5230
  %inside_of_loop = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %4, i64 0, i32 3, i32 1, !dbg !5248
  %6 = load i32, i32* %inside_of_loop, align 4, !dbg !5249
  %mul = mul i32 %6, %div, !dbg !5249
  store i32 %mul, i32* %inside_of_loop, align 4, !dbg !5249
  %inc = add i32 %i.0, 1, !dbg !5250
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5226, metadata !DIExpression()), !dbg !5230
  br label %for.cond, !dbg !5251, !llvm.loop !5252

for.end:                                          ; preds = %for.cond
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #7, !dbg !5254
  ret void, !dbg !5254
}

; Function Attrs: nounwind uwtable
define dso_local void @vect_get_slp_defs(%struct._slp_tree* %slp_node, %struct.VEC_tree_heap** %vec_oprnds0, %struct.VEC_tree_heap** %vec_oprnds1) local_unnamed_addr #5 !dbg !5255 {
entry:
  %lhs_size_unit = alloca i64, align 8
  %rhs_size_unit = alloca i64, align 8
  call void @llvm.dbg.value(metadata %struct._slp_tree* %slp_node, metadata !5260, metadata !DIExpression()), !dbg !5268
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_oprnds0, metadata !5261, metadata !DIExpression()), !dbg !5268
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_oprnds1, metadata !5262, metadata !DIExpression()), !dbg !5268
  %0 = bitcast i64* %lhs_size_unit to i8*, !dbg !5269
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5269
  %1 = bitcast i64* %rhs_size_unit to i8*, !dbg !5269
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !5269
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %slp_node, i64 0, i32 2, !dbg !5270
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5270
  %tobool = icmp eq %struct.VEC_gimple_heap* %2, null, !dbg !5270
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5270

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %2, i64 0, i32 0, !dbg !5270
  br label %cond.end, !dbg !5270

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %entry ], !dbg !5270
  %call = tail call fastcc %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond, i32 0) #8, !dbg !5270
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !5263, metadata !DIExpression()), !dbg !5268
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %slp_node, i64 0, i32 0, !dbg !5271
  %3 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !5271
  %tobool2 = icmp eq %struct._slp_tree* %3, null, !dbg !5271
  br i1 %tobool2, label %if.else, label %if.then, !dbg !5273

if.then:                                          ; preds = %cond.end
  %vec_stmts_size = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %3, i64 0, i32 4, !dbg !5274
  %4 = load i32, i32* %vec_stmts_size, align 8, !dbg !5274
  call void @llvm.dbg.value(metadata i32 %4, metadata !5265, metadata !DIExpression()), !dbg !5268
  br label %if.end10, !dbg !5275

if.else:                                          ; preds = %cond.end
  %vec_stmts_size4 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %slp_node, i64 0, i32 4, !dbg !5276
  %5 = load i32, i32* %vec_stmts_size4, align 8, !dbg !5276
  call void @llvm.dbg.value(metadata i32 %5, metadata !5265, metadata !DIExpression()), !dbg !5268
  call void @llvm.dbg.value(metadata i64* %lhs_size_unit, metadata !5266, metadata !DIExpression(DW_OP_deref)), !dbg !5268
  call void @llvm.dbg.value(metadata i64* %rhs_size_unit, metadata !5267, metadata !DIExpression(DW_OP_deref)), !dbg !5268
  %call5 = call %union.tree_node* @vect_get_smallest_scalar_type(%union.gimple_statement_d* %call, i64* nonnull %lhs_size_unit, i64* nonnull %rhs_size_unit) #6, !dbg !5278
  %6 = load i64, i64* %rhs_size_unit, align 8, !dbg !5279
  call void @llvm.dbg.value(metadata i64 %6, metadata !5267, metadata !DIExpression()), !dbg !5268
  %7 = load i64, i64* %lhs_size_unit, align 8, !dbg !5281
  call void @llvm.dbg.value(metadata i64 %7, metadata !5266, metadata !DIExpression()), !dbg !5268
  %cmp = icmp eq i64 %6, %7, !dbg !5282
  br i1 %cmp, label %if.end10, label %if.then6, !dbg !5283

if.then6:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata i64 %6, metadata !5267, metadata !DIExpression()), !dbg !5268
  %8 = trunc i64 %6 to i32, !dbg !5284
  %conv7 = mul i32 %5, %8, !dbg !5284
  call void @llvm.dbg.value(metadata i32 %conv7, metadata !5265, metadata !DIExpression()), !dbg !5268
  call void @llvm.dbg.value(metadata i64 %7, metadata !5266, metadata !DIExpression()), !dbg !5268
  %conv8 = sext i32 %conv7 to i64, !dbg !5286
  %div = sdiv i64 %conv8, %7, !dbg !5286
  %conv9 = trunc i64 %div to i32, !dbg !5286
  call void @llvm.dbg.value(metadata i32 %conv9, metadata !5265, metadata !DIExpression()), !dbg !5268
  br label %if.end10, !dbg !5287

if.end10:                                         ; preds = %if.else, %if.then6, %if.then
  %number_of_vects.1 = phi i32 [ %4, %if.then ], [ %conv9, %if.then6 ], [ %5, %if.else ], !dbg !5288
  call void @llvm.dbg.value(metadata i32 %number_of_vects.1, metadata !5265, metadata !DIExpression()), !dbg !5268
  %call11 = call fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %number_of_vects.1) #8, !dbg !5289
  store %struct.VEC_tree_heap* %call11, %struct.VEC_tree_heap** %vec_oprnds0, align 8, !dbg !5290
  %9 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !5291
  %tobool13 = icmp eq %struct._slp_tree* %9, null, !dbg !5291
  br i1 %tobool13, label %if.else16, label %if.then14, !dbg !5293

if.then14:                                        ; preds = %if.end10
  call fastcc void @vect_get_slp_vect_defs(%struct._slp_tree* nonnull %9, %struct.VEC_tree_heap** %vec_oprnds0) #8, !dbg !5294
  br label %if.end17, !dbg !5294

if.else16:                                        ; preds = %if.end10
  call fastcc void @vect_get_constant_vectors(%struct._slp_tree* %slp_node, %struct.VEC_tree_heap** %vec_oprnds0, i32 0, i32 %number_of_vects.1) #8, !dbg !5295
  br label %if.end17

if.end17:                                         ; preds = %if.else16, %if.then14
  %call18 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %call) #8, !dbg !5296
  %data_ref_info = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call18, i64 0, i32 7, !dbg !5296
  %10 = load %struct.data_reference*, %struct.data_reference** %data_ref_info, align 8, !dbg !5296
  %tobool19 = icmp eq %struct.data_reference* %10, null, !dbg !5296
  br i1 %tobool19, label %if.end21, label %cleanup, !dbg !5298

if.end21:                                         ; preds = %if.end17
  %call22 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %call) #8, !dbg !5299
  call void @llvm.dbg.value(metadata i32 %call22, metadata !5264, metadata !DIExpression()), !dbg !5268
  %call23 = call fastcc i32 @get_gimple_rhs_class(i32 %call22) #8, !dbg !5300
  %cmp24 = icmp eq i32 %call23, 1, !dbg !5302
  %tobool26 = icmp ne %struct.VEC_tree_heap** %vec_oprnds1, null, !dbg !5303
  %or.cond = and i1 %cmp24, %tobool26, !dbg !5304
  br i1 %or.cond, label %if.end28, label %cleanup, !dbg !5304

if.end28:                                         ; preds = %if.end21
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %slp_node, i64 0, i32 1, !dbg !5305
  %11 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !5305
  %tobool29 = icmp eq %struct._slp_tree* %11, null, !dbg !5305
  br i1 %tobool29, label %if.else33, label %if.then30, !dbg !5307

if.then30:                                        ; preds = %if.end28
  br label %if.end35, !dbg !5308

if.else33:                                        ; preds = %if.end28
  br label %if.end35

if.end35:                                         ; preds = %if.else33, %if.then30
  %.pn = phi %struct._slp_tree* [ %11, %if.then30 ], [ %slp_node, %if.else33 ]
  %number_of_vects.2.in = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %.pn, i64 0, i32 4, !dbg !5309
  %number_of_vects.2 = load i32, i32* %number_of_vects.2.in, align 8, !dbg !5309
  call void @llvm.dbg.value(metadata i32 %number_of_vects.2, metadata !5265, metadata !DIExpression()), !dbg !5268
  %call36 = call fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %number_of_vects.2) #8, !dbg !5310
  store %struct.VEC_tree_heap* %call36, %struct.VEC_tree_heap** %vec_oprnds1, align 8, !dbg !5311
  %12 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !5312
  %tobool38 = icmp eq %struct._slp_tree* %12, null, !dbg !5312
  br i1 %tobool38, label %if.else41, label %if.then39, !dbg !5314

if.then39:                                        ; preds = %if.end35
  call fastcc void @vect_get_slp_vect_defs(%struct._slp_tree* nonnull %12, %struct.VEC_tree_heap** nonnull %vec_oprnds1) #8, !dbg !5315
  br label %cleanup, !dbg !5315

if.else41:                                        ; preds = %if.end35
  call fastcc void @vect_get_constant_vectors(%struct._slp_tree* %slp_node, %struct.VEC_tree_heap** nonnull %vec_oprnds1, i32 1, i32 %number_of_vects.2) #8, !dbg !5316
  br label %cleanup

cleanup:                                          ; preds = %if.end17, %if.then39, %if.else41, %if.end21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !5317
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5317
  ret void, !dbg !5317
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !5318 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !5322, metadata !DIExpression()), !dbg !5324
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !5323, metadata !DIExpression()), !dbg !5324
  br label %land.end, !dbg !5325

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !5325
  %arrayidx = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !5325
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !5325
  ret %union.gimple_statement_d* %0, !dbg !5325
}

declare dso_local %union.tree_node* @vect_get_smallest_scalar_type(%union.gimple_statement_d*, i64*, i64*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !5326 {
entry:
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !5330, metadata !DIExpression()), !dbg !5331
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 %alloc_) #6, !dbg !5332
  %0 = bitcast i8* %call to %struct.VEC_tree_heap*, !dbg !5332
  ret %struct.VEC_tree_heap* %0, !dbg !5332
}

; Function Attrs: nounwind uwtable
define internal fastcc void @vect_get_slp_vect_defs(%struct._slp_tree* %slp_node, %struct.VEC_tree_heap** %vec_oprnds) unnamed_addr #5 !dbg !5333 {
entry:
  %vec_def_stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.value(metadata %struct._slp_tree* %slp_node, metadata !5337, metadata !DIExpression()), !dbg !5342
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_oprnds, metadata !5338, metadata !DIExpression()), !dbg !5342
  %0 = bitcast %union.gimple_statement_d** %vec_def_stmt to i8*, !dbg !5343
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5343
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %slp_node, i64 0, i32 3, !dbg !5344
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !5344
  %tobool = icmp eq %struct.VEC_gimple_heap* %1, null, !dbg !5344
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !5344

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1548, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !5344
  br label %cond.end, !dbg !5344

cond.end:                                         ; preds = %entry, %cond.true
  call void @llvm.dbg.value(metadata i32 0, metadata !5341, metadata !DIExpression()), !dbg !5342
  br label %for.cond, !dbg !5345

for.cond:                                         ; preds = %cond.end19, %cond.end
  %i.0 = phi i32 [ 0, %cond.end ], [ %inc, %cond.end19 ], !dbg !5347
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5341, metadata !DIExpression()), !dbg !5342
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !5348
  %tobool2 = icmp eq %struct.VEC_gimple_heap* %2, null, !dbg !5348
  br i1 %tobool2, label %cond.end6, label %cond.true3, !dbg !5348

cond.true3:                                       ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %2, i64 0, i32 0, !dbg !5348
  br label %cond.end6, !dbg !5348

cond.end6:                                        ; preds = %for.cond, %cond.true3
  %cond7 = phi %struct.VEC_gimple_base* [ %base, %cond.true3 ], [ null, %for.cond ], !dbg !5348
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %vec_def_stmt, metadata !5340, metadata !DIExpression(DW_OP_deref)), !dbg !5342
  %call = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond7, i32 %i.0, %union.gimple_statement_d** nonnull %vec_def_stmt) #8, !dbg !5348
  %tobool8 = icmp eq i32 %call, 0, !dbg !5350
  br i1 %tobool8, label %for.end, label %for.body, !dbg !5350

for.body:                                         ; preds = %cond.end6
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %vec_def_stmt, align 8, !dbg !5351
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %3, metadata !5340, metadata !DIExpression()), !dbg !5342
  %tobool9 = icmp eq %union.gimple_statement_d* %3, null, !dbg !5351
  br i1 %tobool9, label %cond.true10, label %cond.end12, !dbg !5351

cond.true10:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1554, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !5351
  %.pre = load %union.gimple_statement_d*, %union.gimple_statement_d** %vec_def_stmt, align 8, !dbg !5353
  br label %cond.end12, !dbg !5351

cond.end12:                                       ; preds = %for.body, %cond.true10
  %4 = phi %union.gimple_statement_d* [ %3, %for.body ], [ %.pre, %cond.true10 ], !dbg !5353
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %4, metadata !5340, metadata !DIExpression()), !dbg !5342
  %call14 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %4) #6, !dbg !5354
  call void @llvm.dbg.value(metadata %union.tree_node* %call14, metadata !5339, metadata !DIExpression()), !dbg !5342
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_oprnds, align 8, !dbg !5355
  %tobool15 = icmp eq %struct.VEC_tree_heap* %5, null, !dbg !5355
  br i1 %tobool15, label %cond.end19, label %cond.true16, !dbg !5355

cond.true16:                                      ; preds = %cond.end12
  %base17 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %5, i64 0, i32 0, !dbg !5355
  br label %cond.end19, !dbg !5355

cond.end19:                                       ; preds = %cond.end12, %cond.true16
  %cond20 = phi %struct.VEC_tree_base* [ %base17, %cond.true16 ], [ null, %cond.end12 ], !dbg !5355
  %call21 = call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond20, %union.tree_node* %call14) #8, !dbg !5355
  %inc = add i32 %i.0, 1, !dbg !5356
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5341, metadata !DIExpression()), !dbg !5342
  br label %for.cond, !dbg !5357, !llvm.loop !5358

for.end:                                          ; preds = %cond.end6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5360
  ret void, !dbg !5360
}

; Function Attrs: nounwind uwtable
define internal fastcc void @vect_get_constant_vectors(%struct._slp_tree* %slp_node, %struct.VEC_tree_heap** %vec_oprnds, i32 %op_num, i32 %number_of_vectors) unnamed_addr #5 !dbg !5361 {
entry:
  %stmt = alloca %union.gimple_statement_d*, align 8
  %vop = alloca %union.tree_node*, align 8
  %voprnds = alloca %struct.VEC_tree_heap*, align 8
  call void @llvm.dbg.value(metadata %struct._slp_tree* %slp_node, metadata !5365, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_oprnds, metadata !5366, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %op_num, metadata !5367, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_vectors, metadata !5368, metadata !DIExpression()), !dbg !5387
  %stmts1 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %slp_node, i64 0, i32 2, !dbg !5388
  %0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts1, align 8, !dbg !5388
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %0, metadata !5369, metadata !DIExpression()), !dbg !5387
  %1 = bitcast %union.gimple_statement_d** %stmt to i8*, !dbg !5389
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !5389
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %0, i64 0, i32 0, !dbg !5390
  %call = tail call fastcc %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %base, i32 0) #8, !dbg !5390
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !5370, metadata !DIExpression()), !dbg !5387
  store %union.gimple_statement_d* %call, %union.gimple_statement_d** %stmt, align 8, !dbg !5391
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !5370, metadata !DIExpression()), !dbg !5387
  %call2 = tail call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %call) #8, !dbg !5392
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call2, metadata !5371, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !5374, metadata !DIExpression()), !dbg !5387
  %2 = bitcast %union.tree_node** %vop to i8*, !dbg !5393
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #7, !dbg !5393
  %call9 = tail call fastcc i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %base) #8, !dbg !5394
  call void @llvm.dbg.value(metadata i32 %call9, metadata !5380, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 1, metadata !5383, metadata !DIExpression()), !dbg !5387
  %3 = bitcast %struct.VEC_tree_heap** %voprnds to i8*, !dbg !5395
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #7, !dbg !5395
  %call10 = tail call fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 %number_of_vectors) #8, !dbg !5396
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %call10, metadata !5384, metadata !DIExpression()), !dbg !5387
  store %struct.VEC_tree_heap* %call10, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5397
  %data_ref_info = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call2, i64 0, i32 7, !dbg !5398
  %4 = load %struct.data_reference*, %struct.data_reference** %data_ref_info, align 8, !dbg !5398
  %tobool11 = icmp eq %struct.data_reference* %4, null, !dbg !5398
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call, metadata !5370, metadata !DIExpression()), !dbg !5387
  br i1 %tobool11, label %if.else, label %if.then, !dbg !5400

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i8 1, metadata !5386, metadata !DIExpression()), !dbg !5387
  %call12 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %call) #8, !dbg !5401
  call void @llvm.dbg.value(metadata %union.tree_node* %call12, metadata !5378, metadata !DIExpression()), !dbg !5387
  br label %if.end, !dbg !5403

if.else:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata i8 0, metadata !5386, metadata !DIExpression()), !dbg !5387
  %add = add i32 %op_num, 1, !dbg !5404
  %call13 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %call, i32 %add) #8, !dbg !5406
  call void @llvm.dbg.value(metadata %union.tree_node* %call13, metadata !5378, metadata !DIExpression()), !dbg !5387
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %op.0 = phi %union.tree_node* [ %call12, %if.then ], [ %call13, %if.else ], !dbg !5407
  %is_store.0 = phi i8 [ 1, %if.then ], [ 0, %if.else ], !dbg !5407
  call void @llvm.dbg.value(metadata i8 %is_store.0, metadata !5386, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %op.0, metadata !5378, metadata !DIExpression()), !dbg !5387
  %5 = getelementptr inbounds %union.tree_node, %union.tree_node* %op.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5408
  %bf.load = load i64, i64* %5, align 8, !dbg !5408
  %bf.cast = and i64 %bf.load, 65535, !dbg !5408
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !5408
  %6 = load i32, i32* %arrayidx, align 4, !dbg !5408
  %cmp = icmp eq i32 %6, 1, !dbg !5408
  call void @llvm.dbg.value(metadata i1 %cmp, metadata !5385, metadata !DIExpression()), !dbg !5387
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %op.0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5410
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5410
  %call18 = tail call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* %7) #6, !dbg !5411
  call void @llvm.dbg.value(metadata %union.tree_node* %call18, metadata !5377, metadata !DIExpression()), !dbg !5387
  %tobool19 = icmp eq %union.tree_node* %call18, null, !dbg !5412
  br i1 %tobool19, label %cond.true20, label %cond.end22, !dbg !5412

cond.true20:                                      ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1463, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !5412
  br label %cond.end22, !dbg !5412

cond.end22:                                       ; preds = %if.end, %cond.true20
  %type24 = bitcast %union.tree_node* %call18 to %struct.tree_type*, !dbg !5413
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type24, i64 0, i32 6, !dbg !5413
  %bf.load25 = load i32, i32* %precision, align 4, !dbg !5413
  %bf.clear26 = and i32 %bf.load25, 1023, !dbg !5413
  %sh_prom = zext i32 %bf.clear26 to i64, !dbg !5413
  %shl = shl i64 1, %sh_prom, !dbg !5413
  %conv = trunc i64 %shl to i32, !dbg !5413
  call void @llvm.dbg.value(metadata i32 %conv, metadata !5372, metadata !DIExpression()), !dbg !5387
  %call27 = tail call i32 @least_common_multiple(i32 %conv, i32 %call9) #6, !dbg !5414
  %div = sdiv i32 %call27, %call9, !dbg !5415
  call void @llvm.dbg.value(metadata i32 %div, metadata !5383, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %conv, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 0, metadata !5375, metadata !DIExpression()), !dbg !5387
  %tobool40 = icmp eq i8 %is_store.0, 0, !dbg !5416
  %add44 = add i32 %op_num, 1, !dbg !5416
  br label %for.cond, !dbg !5424

for.cond:                                         ; preds = %for.inc67, %cond.end22
  %t.0 = phi %union.tree_node* [ null, %cond.end22 ], [ %t.1.lcssa, %for.inc67 ], !dbg !5425
  %j.0 = phi i32 [ 0, %cond.end22 ], [ %inc, %for.inc67 ], !dbg !5426
  %number_of_places_left_in_vector.0 = phi i32 [ %conv, %cond.end22 ], [ %number_of_places_left_in_vector.1.lcssa, %for.inc67 ], !dbg !5427
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.0, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %j.0, metadata !5375, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.0, metadata !5374, metadata !DIExpression()), !dbg !5387
  %cmp28 = icmp slt i32 %j.0, %div, !dbg !5428
  br i1 %cmp28, label %for.body, label %for.end68, !dbg !5429

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata i32 %call9, metadata !5382, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !5387
  br i1 %tobool40, label %for.body.split.us, label %for.body.for.body.split_crit_edge, !dbg !5430

for.body.for.body.split_crit_edge:                ; preds = %for.body
  br i1 %cmp, label %for.body.split.split.us, label %for.body.split.for.body.split.split_crit_edge, !dbg !5430

for.body.split.us:                                ; preds = %for.body
  br label %for.cond30.us, !dbg !5430

for.cond30.us:                                    ; preds = %for.inc.us, %for.body.split.us
  %t.1.us = phi %union.tree_node* [ %t.0, %for.body.split.us ], [ %t.2.us, %for.inc.us ], !dbg !5387
  %number_of_places_left_in_vector.1.us = phi i32 [ %number_of_places_left_in_vector.0, %for.body.split.us ], [ %number_of_places_left_in_vector.2.us, %for.inc.us ], !dbg !5387
  %i.0.in.us = phi i32 [ %call9, %for.body.split.us ], [ %i.0.us, %for.inc.us ]
  %i.0.us = add i32 %i.0.in.us, -1, !dbg !5431
  call void @llvm.dbg.value(metadata i32 %i.0.us, metadata !5382, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1.us, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1.us, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !5370, metadata !DIExpression(DW_OP_deref)), !dbg !5387
  %call37.us = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %base, i32 %i.0.us, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !5432
  %tobool38.us = icmp eq i32 %call37.us, 0, !dbg !5433
  br i1 %tobool38.us, label %for.inc67.us-lcssa.us, label %for.body39.us, !dbg !5433

for.body39.us:                                    ; preds = %for.cond30.us
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* undef, metadata !5370, metadata !DIExpression()), !dbg !5387
  %8 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5416
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %8, metadata !5370, metadata !DIExpression()), !dbg !5387
  %call45.us = call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %8, i32 %add44) #8, !dbg !5434
  call void @llvm.dbg.value(metadata %union.tree_node* %call45.us, metadata !5378, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %call45.us, metadata !5378, metadata !DIExpression()), !dbg !5387
  %call47.us = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call45.us, %union.tree_node* %t.1.us) #6, !dbg !5435
  call void @llvm.dbg.value(metadata %union.tree_node* %call47.us, metadata !5374, metadata !DIExpression()), !dbg !5387
  %dec.us = add nsw i32 %number_of_places_left_in_vector.1.us, -1, !dbg !5436
  call void @llvm.dbg.value(metadata i32 %dec.us, metadata !5376, metadata !DIExpression()), !dbg !5387
  %cmp48.us = icmp eq i32 %dec.us, 0, !dbg !5437
  br i1 %cmp48.us, label %if.then50.us, label %for.inc.us, !dbg !5439

if.then50.us:                                     ; preds = %for.body39.us
  call void @llvm.dbg.value(metadata i32 %conv, metadata !5376, metadata !DIExpression()), !dbg !5387
  br i1 %cmp, label %if.then52.us, label %if.else54.us, !dbg !5440

if.else54.us:                                     ; preds = %if.then50.us
  %call55.us = call %union.tree_node* @build_constructor_from_list(%union.tree_node* %call18, %union.tree_node* %call47.us) #6, !dbg !5442
  call void @llvm.dbg.value(metadata %union.tree_node* %call55.us, metadata !5373, metadata !DIExpression()), !dbg !5387
  br label %if.end56.us

if.then52.us:                                     ; preds = %if.then50.us
  %call53.us = call %union.tree_node* @build_vector(%union.tree_node* %call18, %union.tree_node* %call47.us) #6, !dbg !5444
  call void @llvm.dbg.value(metadata %union.tree_node* %call53.us, metadata !5373, metadata !DIExpression()), !dbg !5387
  br label %if.end56.us, !dbg !5445

if.end56.us:                                      ; preds = %if.then52.us, %if.else54.us
  %vec_cst.0.us = phi %union.tree_node* [ %call53.us, %if.then52.us ], [ %call55.us, %if.else54.us ], !dbg !5446
  call void @llvm.dbg.value(metadata %union.tree_node* %vec_cst.0.us, metadata !5373, metadata !DIExpression()), !dbg !5387
  %9 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5447
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %9, metadata !5384, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %9, metadata !5384, metadata !DIExpression()), !dbg !5387
  %base59.us = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %9, i64 0, i32 0, !dbg !5447
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5447
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %10, metadata !5370, metadata !DIExpression()), !dbg !5387
  %call63.us = call %union.tree_node* @vect_init_vector(%union.gimple_statement_d* %10, %union.tree_node* %vec_cst.0.us, %union.tree_node* %call18, %struct.gimple_stmt_iterator* null) #6, !dbg !5447
  %call64.us = call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %base59.us, %union.tree_node* %call63.us) #8, !dbg !5447
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !5374, metadata !DIExpression()), !dbg !5387
  br label %for.inc.us, !dbg !5448

for.inc.us:                                       ; preds = %if.end56.us, %for.body39.us
  %t.2.us = phi %union.tree_node* [ null, %if.end56.us ], [ %call47.us, %for.body39.us ], !dbg !5449
  %number_of_places_left_in_vector.2.us = phi i32 [ %conv, %if.end56.us ], [ %dec.us, %for.body39.us ], !dbg !5449
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.2.us, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.2.us, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %i.0.us, metadata !5382, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !5387
  br label %for.cond30.us, !dbg !5450, !llvm.loop !5451

for.inc67.us-lcssa.us:                            ; preds = %for.cond30.us
  %t.1.us.lcssa = phi %union.tree_node* [ %t.1.us, %for.cond30.us ], !dbg !5387
  %number_of_places_left_in_vector.1.us.lcssa = phi i32 [ %number_of_places_left_in_vector.1.us, %for.cond30.us ], !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1.us.lcssa, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1.us.lcssa, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1.us.lcssa, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1.us.lcssa, metadata !5376, metadata !DIExpression()), !dbg !5387
  br label %for.inc67, !dbg !5453

for.body.split.for.body.split.split_crit_edge:    ; preds = %for.body.for.body.split_crit_edge
  br label %for.cond30, !dbg !5430

for.body.split.split.us:                          ; preds = %for.body.for.body.split_crit_edge
  br label %for.cond30.us1, !dbg !5430

for.cond30.us1:                                   ; preds = %for.inc.us28, %for.body.split.split.us
  %t.1.us2 = phi %union.tree_node* [ %t.0, %for.body.split.split.us ], [ %t.2.us29, %for.inc.us28 ], !dbg !5387
  %number_of_places_left_in_vector.1.us3 = phi i32 [ %number_of_places_left_in_vector.0, %for.body.split.split.us ], [ %number_of_places_left_in_vector.2.us30, %for.inc.us28 ], !dbg !5387
  %i.0.in.us4 = phi i32 [ %call9, %for.body.split.split.us ], [ %i.0.us5, %for.inc.us28 ]
  %i.0.us5 = add i32 %i.0.in.us4, -1, !dbg !5431
  call void @llvm.dbg.value(metadata i32 %i.0.us5, metadata !5382, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1.us3, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1.us2, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !5370, metadata !DIExpression(DW_OP_deref)), !dbg !5387
  %call37.us6 = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %base, i32 %i.0.us5, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !5432
  %tobool38.us7 = icmp eq i32 %call37.us6, 0, !dbg !5433
  br i1 %tobool38.us7, label %for.inc67.us-lcssa.us-lcssa.us, label %for.body39.us8, !dbg !5433

for.body39.us8:                                   ; preds = %for.cond30.us1
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* undef, metadata !5370, metadata !DIExpression()), !dbg !5387
  %11 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5416
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %11, metadata !5370, metadata !DIExpression()), !dbg !5387
  %call42.us10 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %11) #8, !dbg !5454
  call void @llvm.dbg.value(metadata %union.tree_node* %call42.us10, metadata !5378, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %call42.us10, metadata !5378, metadata !DIExpression()), !dbg !5387
  %call47.us15 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call42.us10, %union.tree_node* %t.1.us2) #6, !dbg !5435
  call void @llvm.dbg.value(metadata %union.tree_node* %call47.us15, metadata !5374, metadata !DIExpression()), !dbg !5387
  %dec.us16 = add nsw i32 %number_of_places_left_in_vector.1.us3, -1, !dbg !5436
  call void @llvm.dbg.value(metadata i32 %dec.us16, metadata !5376, metadata !DIExpression()), !dbg !5387
  %cmp48.us17 = icmp eq i32 %dec.us16, 0, !dbg !5437
  br i1 %cmp48.us17, label %if.then50.us18, label %for.inc.us28, !dbg !5439

if.then50.us18:                                   ; preds = %for.body39.us8
  call void @llvm.dbg.value(metadata i32 %conv, metadata !5376, metadata !DIExpression()), !dbg !5387
  %call53.us22 = call %union.tree_node* @build_vector(%union.tree_node* %call18, %union.tree_node* %call47.us15) #6, !dbg !5444
  call void @llvm.dbg.value(metadata %union.tree_node* %call53.us22, metadata !5373, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %call53.us22, metadata !5373, metadata !DIExpression()), !dbg !5387
  %12 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5447
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %12, metadata !5384, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %12, metadata !5384, metadata !DIExpression()), !dbg !5387
  %base59.us25 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %12, i64 0, i32 0, !dbg !5447
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5447
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %13, metadata !5370, metadata !DIExpression()), !dbg !5387
  %call63.us26 = call %union.tree_node* @vect_init_vector(%union.gimple_statement_d* %13, %union.tree_node* %call53.us22, %union.tree_node* %call18, %struct.gimple_stmt_iterator* null) #6, !dbg !5447
  %call64.us27 = call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %base59.us25, %union.tree_node* %call63.us26) #8, !dbg !5447
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !5374, metadata !DIExpression()), !dbg !5387
  br label %for.inc.us28, !dbg !5448

for.inc.us28:                                     ; preds = %if.then50.us18, %for.body39.us8
  %t.2.us29 = phi %union.tree_node* [ null, %if.then50.us18 ], [ %call47.us15, %for.body39.us8 ], !dbg !5449
  %number_of_places_left_in_vector.2.us30 = phi i32 [ %conv, %if.then50.us18 ], [ %dec.us16, %for.body39.us8 ], !dbg !5449
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.2.us30, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.2.us29, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %i.0.us5, metadata !5382, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !5387
  br label %for.cond30.us1, !dbg !5450, !llvm.loop !5451

for.inc67.us-lcssa.us-lcssa.us:                   ; preds = %for.cond30.us1
  %t.1.us2.lcssa = phi %union.tree_node* [ %t.1.us2, %for.cond30.us1 ], !dbg !5387
  %number_of_places_left_in_vector.1.us3.lcssa = phi i32 [ %number_of_places_left_in_vector.1.us3, %for.cond30.us1 ], !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1.us2.lcssa, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1.us3.lcssa, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1.us2.lcssa, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1.us3.lcssa, metadata !5376, metadata !DIExpression()), !dbg !5387
  br label %for.inc67.us-lcssa, !dbg !5453

for.cond30:                                       ; preds = %for.inc, %for.body.split.for.body.split.split_crit_edge
  %t.1 = phi %union.tree_node* [ %t.0, %for.body.split.for.body.split.split_crit_edge ], [ %t.2, %for.inc ], !dbg !5387
  %number_of_places_left_in_vector.1 = phi i32 [ %number_of_places_left_in_vector.0, %for.body.split.for.body.split.split_crit_edge ], [ %number_of_places_left_in_vector.2, %for.inc ], !dbg !5387
  %i.0.in = phi i32 [ %call9, %for.body.split.for.body.split.split_crit_edge ], [ %i.0, %for.inc ]
  %i.0 = add i32 %i.0.in, -1, !dbg !5431
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5382, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !5370, metadata !DIExpression(DW_OP_deref)), !dbg !5387
  %call37 = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %base, i32 %i.0, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !5432
  %tobool38 = icmp eq i32 %call37, 0, !dbg !5433
  br i1 %tobool38, label %for.inc67.us-lcssa.us-lcssa, label %for.body39, !dbg !5433

for.body39:                                       ; preds = %for.cond30
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* undef, metadata !5370, metadata !DIExpression()), !dbg !5387
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5416
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %14, metadata !5370, metadata !DIExpression()), !dbg !5387
  %call42 = call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %14) #8, !dbg !5454
  call void @llvm.dbg.value(metadata %union.tree_node* %call42, metadata !5378, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %call42, metadata !5378, metadata !DIExpression()), !dbg !5387
  %call47 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call42, %union.tree_node* %t.1) #6, !dbg !5435
  call void @llvm.dbg.value(metadata %union.tree_node* %call47, metadata !5374, metadata !DIExpression()), !dbg !5387
  %dec = add nsw i32 %number_of_places_left_in_vector.1, -1, !dbg !5436
  call void @llvm.dbg.value(metadata i32 %dec, metadata !5376, metadata !DIExpression()), !dbg !5387
  %cmp48 = icmp eq i32 %dec, 0, !dbg !5437
  br i1 %cmp48, label %if.then50, label %for.inc, !dbg !5439

if.then50:                                        ; preds = %for.body39
  call void @llvm.dbg.value(metadata i32 %conv, metadata !5376, metadata !DIExpression()), !dbg !5387
  %call55 = call %union.tree_node* @build_constructor_from_list(%union.tree_node* %call18, %union.tree_node* %call47) #6, !dbg !5442
  call void @llvm.dbg.value(metadata %union.tree_node* %call55, metadata !5373, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %call55, metadata !5373, metadata !DIExpression()), !dbg !5387
  %15 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5447
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %15, metadata !5384, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %15, metadata !5384, metadata !DIExpression()), !dbg !5387
  %base59 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %15, i64 0, i32 0, !dbg !5447
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !5447
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %16, metadata !5370, metadata !DIExpression()), !dbg !5387
  %call63 = call %union.tree_node* @vect_init_vector(%union.gimple_statement_d* %16, %union.tree_node* %call55, %union.tree_node* %call18, %struct.gimple_stmt_iterator* null) #6, !dbg !5447
  %call64 = call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %base59, %union.tree_node* %call63) #8, !dbg !5447
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !5374, metadata !DIExpression()), !dbg !5387
  br label %for.inc, !dbg !5448

for.inc:                                          ; preds = %for.body39, %if.then50
  %t.2 = phi %union.tree_node* [ null, %if.then50 ], [ %call47, %for.body39 ], !dbg !5449
  %number_of_places_left_in_vector.2 = phi i32 [ %conv, %if.then50 ], [ %dec, %for.body39 ], !dbg !5449
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.2, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.2, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5382, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !5387
  br label %for.cond30, !dbg !5450, !llvm.loop !5451

for.inc67.us-lcssa.us-lcssa:                      ; preds = %for.cond30
  %t.1.lcssa34 = phi %union.tree_node* [ %t.1, %for.cond30 ], !dbg !5387
  %number_of_places_left_in_vector.1.lcssa33 = phi i32 [ %number_of_places_left_in_vector.1, %for.cond30 ], !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1.lcssa34, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1.lcssa33, metadata !5376, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1.lcssa34, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1.lcssa33, metadata !5376, metadata !DIExpression()), !dbg !5387
  br label %for.inc67.us-lcssa, !dbg !5453

for.inc67.us-lcssa:                               ; preds = %for.inc67.us-lcssa.us-lcssa.us, %for.inc67.us-lcssa.us-lcssa
  %t.1.lcssa.ph = phi %union.tree_node* [ %t.1.lcssa34, %for.inc67.us-lcssa.us-lcssa ], [ %t.1.us2.lcssa, %for.inc67.us-lcssa.us-lcssa.us ]
  %number_of_places_left_in_vector.1.lcssa.ph = phi i32 [ %number_of_places_left_in_vector.1.lcssa33, %for.inc67.us-lcssa.us-lcssa ], [ %number_of_places_left_in_vector.1.us3.lcssa, %for.inc67.us-lcssa.us-lcssa.us ]
  br label %for.inc67, !dbg !5453

for.inc67:                                        ; preds = %for.inc67.us-lcssa.us, %for.inc67.us-lcssa
  %t.1.lcssa = phi %union.tree_node* [ %t.1.lcssa.ph, %for.inc67.us-lcssa ], [ %t.1.us.lcssa, %for.inc67.us-lcssa.us ], !dbg !5387
  %number_of_places_left_in_vector.1.lcssa = phi i32 [ %number_of_places_left_in_vector.1.lcssa.ph, %for.inc67.us-lcssa ], [ %number_of_places_left_in_vector.1.us.lcssa, %for.inc67.us-lcssa.us ], !dbg !5387
  call void @llvm.dbg.value(metadata %union.tree_node* %t.1.lcssa, metadata !5374, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %number_of_places_left_in_vector.1.lcssa, metadata !5376, metadata !DIExpression()), !dbg !5387
  %inc = add nuw nsw i32 %j.0, 1, !dbg !5453
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5375, metadata !DIExpression()), !dbg !5387
  br label %for.cond, !dbg !5455, !llvm.loop !5456

for.end68:                                        ; preds = %for.cond
  %17 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5458
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %17, metadata !5384, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %17, metadata !5384, metadata !DIExpression()), !dbg !5387
  %base71 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %17, i64 0, i32 0, !dbg !5458
  %call75 = call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %base71) #8, !dbg !5458
  call void @llvm.dbg.value(metadata i32 %call75, metadata !5381, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata i32 %call75, metadata !5375, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !5387
  br label %for.cond77, !dbg !5459

for.cond77:                                       ; preds = %cond.end92, %for.end68
  %j.1.in = phi i32 [ %call75, %for.end68 ], [ %j.1, %cond.end92 ]
  %j.1 = add i32 %j.1.in, -1, !dbg !5461
  call void @llvm.dbg.value(metadata i32 %j.1, metadata !5375, metadata !DIExpression()), !dbg !5387
  %cmp78 = icmp sgt i32 %j.1, -1, !dbg !5462
  br i1 %cmp78, label %for.body80, label %for.end97, !dbg !5464

for.body80:                                       ; preds = %for.cond77
  %18 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %voprnds, align 8, !dbg !5465
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %18, metadata !5384, metadata !DIExpression()), !dbg !5387
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %18, metadata !5384, metadata !DIExpression()), !dbg !5387
  %base83 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %18, i64 0, i32 0, !dbg !5465
  %call87 = call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %base83, i32 %j.1) #8, !dbg !5465
  call void @llvm.dbg.value(metadata %union.tree_node* %call87, metadata !5379, metadata !DIExpression()), !dbg !5387
  store %union.tree_node* %call87, %union.tree_node** %vop, align 8, !dbg !5467
  %19 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_oprnds, align 8, !dbg !5468
  %tobool88 = icmp eq %struct.VEC_tree_heap* %19, null, !dbg !5468
  br i1 %tobool88, label %cond.end92, label %cond.true89, !dbg !5468

cond.true89:                                      ; preds = %for.body80
  %base90 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %19, i64 0, i32 0, !dbg !5468
  br label %cond.end92, !dbg !5468

cond.end92:                                       ; preds = %for.body80, %cond.true89
  %cond93 = phi %struct.VEC_tree_base* [ %base90, %cond.true89 ], [ null, %for.body80 ], !dbg !5468
  call void @llvm.dbg.value(metadata %union.tree_node* %call87, metadata !5379, metadata !DIExpression()), !dbg !5387
  %call94 = call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond93, %union.tree_node* %call87) #8, !dbg !5468
  call void @llvm.dbg.value(metadata i32 %j.1, metadata !5375, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !5387
  br label %for.cond77, !dbg !5469, !llvm.loop !5470

for.end97:                                        ; preds = %for.cond77
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %voprnds, metadata !5384, metadata !DIExpression(DW_OP_deref)), !dbg !5387
  call fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** nonnull %voprnds) #8, !dbg !5472
  br label %while.cond, !dbg !5473

while.cond.loopexit:                              ; preds = %cond.end112
  br label %while.cond, !dbg !5473

while.cond:                                       ; preds = %while.cond.loopexit, %for.end97
  %20 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_oprnds, align 8, !dbg !5474
  %tobool98 = icmp eq %struct.VEC_tree_heap* %20, null, !dbg !5474
  br i1 %tobool98, label %cond.end102, label %cond.true99, !dbg !5474

cond.true99:                                      ; preds = %while.cond
  %base100 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %20, i64 0, i32 0, !dbg !5474
  br label %cond.end102, !dbg !5474

cond.end102:                                      ; preds = %while.cond, %cond.true99
  %cond103 = phi %struct.VEC_tree_base* [ %base100, %cond.true99 ], [ null, %while.cond ], !dbg !5474
  %call104 = call fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %cond103) #8, !dbg !5474
  %cmp105 = icmp ult i32 %call104, %number_of_vectors, !dbg !5475
  br i1 %cmp105, label %for.cond107.preheader, label %while.end, !dbg !5473

for.cond107.preheader:                            ; preds = %cond.end102
  br label %for.cond107, !dbg !5476

for.cond107:                                      ; preds = %for.cond107.preheader, %cond.end123
  %i.1 = phi i32 [ %inc127, %cond.end123 ], [ 0, %for.cond107.preheader ], !dbg !5479
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !5382, metadata !DIExpression()), !dbg !5387
  %21 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_oprnds, align 8, !dbg !5480
  %tobool108 = icmp eq %struct.VEC_tree_heap* %21, null, !dbg !5480
  br i1 %tobool108, label %cond.end112, label %cond.true109, !dbg !5480

cond.true109:                                     ; preds = %for.cond107
  %base110 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %21, i64 0, i32 0, !dbg !5480
  br label %cond.end112, !dbg !5480

cond.end112:                                      ; preds = %for.cond107, %cond.true109
  %cond113 = phi %struct.VEC_tree_base* [ %base110, %cond.true109 ], [ null, %for.cond107 ], !dbg !5480
  call void @llvm.dbg.value(metadata %union.tree_node** %vop, metadata !5379, metadata !DIExpression(DW_OP_deref)), !dbg !5387
  %call114 = call fastcc i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %cond113, i32 %i.1, %union.tree_node** nonnull %vop) #8, !dbg !5480
  %tobool115 = icmp ne i32 %call114, 0, !dbg !5480
  %cmp116 = icmp ult i32 %i.1, %call75, !dbg !5482
  %spec.select = and i1 %cmp116, %tobool115, !dbg !5483
  br i1 %spec.select, label %for.body118, label %while.cond.loopexit, !dbg !5476, !llvm.loop !5484

for.body118:                                      ; preds = %cond.end112
  %22 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_oprnds, align 8, !dbg !5486
  %tobool119 = icmp eq %struct.VEC_tree_heap* %22, null, !dbg !5486
  br i1 %tobool119, label %cond.end123, label %cond.true120, !dbg !5486

cond.true120:                                     ; preds = %for.body118
  %base121 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %22, i64 0, i32 0, !dbg !5486
  br label %cond.end123, !dbg !5486

cond.end123:                                      ; preds = %for.body118, %cond.true120
  %cond124 = phi %struct.VEC_tree_base* [ %base121, %cond.true120 ], [ null, %for.body118 ], !dbg !5486
  %23 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !5486
  call void @llvm.dbg.value(metadata %union.tree_node* %23, metadata !5379, metadata !DIExpression()), !dbg !5387
  %call125 = call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %cond124, %union.tree_node* %23) #8, !dbg !5486
  %inc127 = add i32 %i.1, 1, !dbg !5487
  call void @llvm.dbg.value(metadata i32 %inc127, metadata !5382, metadata !DIExpression()), !dbg !5387
  br label %for.cond107, !dbg !5488, !llvm.loop !5489

while.end:                                        ; preds = %cond.end102
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #7, !dbg !5491
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #7, !dbg !5491
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !5491
  ret void, !dbg !5491
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !5492 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5496, metadata !DIExpression()), !dbg !5498
  %call = tail call fastcc i32 @gimple_uid(%union.gimple_statement_d* %stmt) #8, !dbg !5499
  call void @llvm.dbg.value(metadata i32 %call, metadata !5497, metadata !DIExpression()), !dbg !5498
  %cmp = icmp eq i32 %call, 0, !dbg !5500
  br i1 %cmp, label %cleanup, label %if.end, !dbg !5502

if.end:                                           ; preds = %entry
  %0 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !5503
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %0, i64 0, i32 0, !dbg !5503
  %call1 = tail call fastcc i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %base) #8, !dbg !5503
  %cmp2 = icmp ugt i32 %call, %call1, !dbg !5503
  br i1 %cmp2, label %cond.true3, label %cond.end5, !dbg !5503

cond.true3:                                       ; preds = %if.end
  tail call void @fancy_abort(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0), i32 629, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !5503
  br label %cond.end5, !dbg !5503

cond.end5:                                        ; preds = %if.end, %cond.true3
  %1 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !5504
  %base9 = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %1, i64 0, i32 0, !dbg !5504
  %sub = add i32 %call, -1, !dbg !5504
  %call13 = tail call fastcc i8* @VEC_vec_void_p_base_index(%struct.VEC_vec_void_p_base* %base9, i32 %sub) #8, !dbg !5504
  %2 = bitcast i8* %call13 to %struct._stmt_vec_info*, !dbg !5505
  br label %cleanup, !dbg !5506

cleanup:                                          ; preds = %entry, %cond.end5
  %retval.0 = phi %struct._stmt_vec_info* [ %2, %cond.end5 ], [ null, %entry ], !dbg !5498
  ret %struct._stmt_vec_info* %retval.0, !dbg !5507
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !5508 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !5512, metadata !DIExpression()), !dbg !5514
  %call = tail call fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %gs) #8, !dbg !5515
  call void @llvm.dbg.value(metadata i32 %call, metadata !5513, metadata !DIExpression()), !dbg !5514
  %call1 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call) #8, !dbg !5516
  %cmp = icmp eq i32 %call1, 3, !dbg !5518
  br i1 %cmp, label %if.then, label %if.end, !dbg !5519

if.then:                                          ; preds = %entry
  %call2 = tail call fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) #8, !dbg !5520
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %call2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !5520
  %bf.load = load i64, i64* %0, align 8, !dbg !5520
  %1 = trunc i64 %bf.load to i32, !dbg !5520
  %bf.cast = and i32 %1, 65535, !dbg !5520
  call void @llvm.dbg.value(metadata i32 %bf.cast, metadata !5513, metadata !DIExpression()), !dbg !5514
  br label %if.end, !dbg !5521

if.end:                                           ; preds = %if.then, %entry
  %code.0 = phi i32 [ %bf.cast, %if.then ], [ %call, %entry ], !dbg !5514
  call void @llvm.dbg.value(metadata i32 %code.0, metadata !5513, metadata !DIExpression()), !dbg !5514
  ret i32 %code.0, !dbg !5522
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @get_gimple_rhs_class(i32 %code) unnamed_addr #0 !dbg !5523 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !5527, metadata !DIExpression()), !dbg !5528
  %idxprom = sext i32 %code to i64, !dbg !5529
  %arrayidx = getelementptr inbounds [0 x i8], [0 x i8]* @gimple_rhs_class_table, i64 0, i64 %idxprom, !dbg !5529
  %0 = load i8, i8* %arrayidx, align 1, !dbg !5529
  %conv = zext i8 %0 to i32, !dbg !5530
  ret i32 %conv, !dbg !5531
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @vect_transform_slp_perm_load(%union.gimple_statement_d* %stmt, %struct.VEC_tree_heap* %dr_chain, %struct.gimple_stmt_iterator* %gsi, i32 %vf, %struct._slp_instance* %slp_node_instance, i8 zeroext %analyze_only) local_unnamed_addr #5 !dbg !5532 {
entry:
  %mask_element_type = alloca %union.tree_node*, align 8
  %node = alloca %struct._slp_tree*, align 8
  %current_mask_element = alloca i32, align 4
  %need_next_vector = alloca i8, align 1
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5536, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %dr_chain, metadata !5537, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5538, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %vf, metadata !5539, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata %struct._slp_instance* %slp_node_instance, metadata !5540, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i8 %analyze_only, metadata !5541, metadata !DIExpression()), !dbg !5585
  %call = tail call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %stmt) #8, !dbg !5586
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call, metadata !5542, metadata !DIExpression()), !dbg !5585
  %0 = bitcast %union.tree_node** %mask_element_type to i8*, !dbg !5587
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5587
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !5543, metadata !DIExpression()), !dbg !5585
  store %union.tree_node* null, %union.tree_node** %mask_element_type, align 8, !dbg !5588
  call void @llvm.dbg.value(metadata i32 0, metadata !5552, metadata !DIExpression()), !dbg !5585
  %1 = bitcast %struct._slp_tree** %node to i8*, !dbg !5589
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !5589
  %vectype1 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call, i64 0, i32 5, !dbg !5590
  %2 = load %union.tree_node*, %union.tree_node** %vectype1, align 8, !dbg !5590
  call void @llvm.dbg.value(metadata %union.tree_node* %2, metadata !5555, metadata !DIExpression()), !dbg !5585
  %group_size2 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %slp_node_instance, i64 0, i32 1, !dbg !5591
  %3 = load i32, i32* %group_size2, align 8, !dbg !5591
  call void @llvm.dbg.value(metadata i32 %3, metadata !5558, metadata !DIExpression()), !dbg !5585
  %4 = bitcast i32* %current_mask_element to i8*, !dbg !5592
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7, !dbg !5592
  call void @llvm.dbg.value(metadata i8 0, metadata !5565, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i8* %need_next_vector, metadata !5566, metadata !DIExpression(DW_OP_deref)), !dbg !5585
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %need_next_vector) #7, !dbg !5593
  call void @llvm.dbg.value(metadata i8 0, metadata !5566, metadata !DIExpression()), !dbg !5585
  store i8 0, i8* %need_next_vector, align 1, !dbg !5594
  %5 = load %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i64 0, i32 2, i32 7), align 8, !dbg !5595
  %tobool = icmp eq %union.tree_node* (%union.tree_node*, %union.tree_node**)* %5, null, !dbg !5597
  br i1 %tobool, label %if.then, label %if.end7, !dbg !5598

if.then:                                          ; preds = %entry
  %call3 = tail call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !5599
  %tobool4 = icmp eq i8 %call3, 0, !dbg !5599
  br i1 %tobool4, label %cleanup110, label %if.then5, !dbg !5602

if.then5:                                         ; preds = %if.then
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5603
  %call6 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17, i64 0, i64 0)) #6, !dbg !5605
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5606
  tail call void @print_gimple_stmt(%struct._IO_FILE* %7, %union.gimple_statement_d* %stmt, i32 0, i32 2) #6, !dbg !5607
  br label %cleanup110, !dbg !5608

if.end7:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata %union.tree_node** %mask_element_type, metadata !5543, metadata !DIExpression(DW_OP_deref)), !dbg !5585
  %call8 = call %union.tree_node* %5(%union.tree_node* %2, %union.tree_node** nonnull %mask_element_type) #6, !dbg !5609
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !5556, metadata !DIExpression()), !dbg !5585
  %tobool9 = icmp ne %union.tree_node* %call8, null, !dbg !5610
  %8 = load %union.tree_node*, %union.tree_node** %mask_element_type, align 8, !dbg !5612
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !5543, metadata !DIExpression()), !dbg !5585
  %tobool10 = icmp ne %union.tree_node* %8, null, !dbg !5612
  %or.cond = and i1 %tobool9, %tobool10, !dbg !5613
  br i1 %or.cond, label %if.end17, label %if.then11, !dbg !5613

if.then11:                                        ; preds = %if.end7
  %call12 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !5614
  %tobool13 = icmp eq i8 %call12, 0, !dbg !5614
  br i1 %tobool13, label %cleanup110, label %if.then14, !dbg !5617

if.then14:                                        ; preds = %if.then11
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5618
  %call15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.17, i64 0, i64 0)) #6, !dbg !5620
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5621
  call void @print_gimple_stmt(%struct._IO_FILE* %10, %union.gimple_statement_d* %stmt, i32 0, i32 2) #6, !dbg !5622
  br label %cleanup110, !dbg !5623

if.end17:                                         ; preds = %if.end7
  call void @llvm.dbg.value(metadata %union.tree_node* %8, metadata !5543, metadata !DIExpression()), !dbg !5585
  %call18 = call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* nonnull %8) #6, !dbg !5624
  call void @llvm.dbg.value(metadata %union.tree_node* %call18, metadata !5544, metadata !DIExpression()), !dbg !5585
  %type = bitcast %union.tree_node* %call18 to %struct.tree_type*, !dbg !5625
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i64 0, i32 6, !dbg !5625
  %bf.load = load i32, i32* %precision, align 4, !dbg !5625
  %bf.clear = and i32 %bf.load, 1023, !dbg !5625
  %sh_prom = zext i32 %bf.clear to i64, !dbg !5625
  %shl = shl i64 1, %sh_prom, !dbg !5625
  %conv = trunc i64 %shl to i32, !dbg !5625
  call void @llvm.dbg.value(metadata i32 %conv, metadata !5550, metadata !DIExpression()), !dbg !5585
  %sext = shl i64 %shl, 32, !dbg !5626
  %mul = ashr exact i64 %sext, 30, !dbg !5627
  %call20 = call i8* @xmalloc(i64 %mul) #6, !dbg !5628
  %11 = bitcast i8* %call20 to i32*, !dbg !5629
  call void @llvm.dbg.value(metadata i32* %11, metadata !5562, metadata !DIExpression()), !dbg !5585
  %type21 = bitcast %union.tree_node* %2 to %struct.tree_type*, !dbg !5630
  %precision22 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type21, i64 0, i32 6, !dbg !5630
  %bf.load23 = load i32, i32* %precision22, align 4, !dbg !5630
  %bf.clear24 = and i32 %bf.load23, 1023, !dbg !5630
  %sh_prom25 = zext i32 %bf.clear24 to i64, !dbg !5630
  %shl26 = shl i64 1, %sh_prom25, !dbg !5630
  %conv27 = trunc i64 %shl26 to i32, !dbg !5630
  call void @llvm.dbg.value(metadata i32 %conv27, metadata !5551, metadata !DIExpression()), !dbg !5585
  %div = sdiv i32 %conv, %conv27, !dbg !5631
  call void @llvm.dbg.value(metadata i32 %div, metadata !5549, metadata !DIExpression()), !dbg !5585
  %unrolling_factor = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %slp_node_instance, i64 0, i32 2, !dbg !5632
  %12 = load i32, i32* %unrolling_factor, align 4, !dbg !5632
  call void @llvm.dbg.value(metadata i32 %12, metadata !5561, metadata !DIExpression()), !dbg !5585
  %mul29 = mul i32 %3, %12, !dbg !5633
  %div30 = udiv i32 %mul29, %conv27, !dbg !5634
  call void @llvm.dbg.value(metadata i32 %div30, metadata !5569, metadata !DIExpression()), !dbg !5585
  %cmp = icmp eq i32 %div30, 1, !dbg !5635
  %spec.select = zext i1 %cmp to i8, !dbg !5637
  call void @llvm.dbg.value(metadata i8 %spec.select, metadata !5565, metadata !DIExpression()), !dbg !5585
  %div35 = udiv i32 %vf, %12, !dbg !5638
  call void @llvm.dbg.value(metadata i32 %div35, metadata !5564, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 0, metadata !5545, metadata !DIExpression()), !dbg !5585
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %slp_node_instance, i64 0, i32 5, !dbg !5639
  %vec_index.0 = select i1 %cmp, i32 1, i32 2, !dbg !5640
  %not.cmp = xor i1 %cmp, true, !dbg !5640
  %second_vec_index.0 = zext i1 %not.cmp to i32, !dbg !5640
  %tobool84 = icmp eq i8 %analyze_only, 0, !dbg !5641
  %sext33 = shl i64 %shl, 32, !dbg !5643
  %13 = ashr exact i64 %sext33, 32, !dbg !5643
  br label %for.cond, !dbg !5643

for.cond:                                         ; preds = %for.inc107, %if.end17
  %i.0 = phi i32 [ 0, %if.end17 ], [ %inc108, %for.inc107 ], !dbg !5644
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5545, metadata !DIExpression()), !dbg !5585
  %14 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !5645
  %tobool36 = icmp eq %struct.VEC_slp_tree_heap* %14, null, !dbg !5645
  br i1 %tobool36, label %cond.end, label %cond.true, !dbg !5645

cond.true:                                        ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %14, i64 0, i32 0, !dbg !5645
  br label %cond.end, !dbg !5645

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %for.cond ], !dbg !5645
  call void @llvm.dbg.value(metadata %struct._slp_tree** %node, metadata !5554, metadata !DIExpression(DW_OP_deref)), !dbg !5585
  %call38 = call fastcc i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %cond, i32 %i.0, %struct._slp_tree** nonnull %node) #8, !dbg !5645
  %tobool39 = icmp eq i32 %call38, 0, !dbg !5646
  br i1 %tobool39, label %for.end109, label %for.body, !dbg !5646

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.value(metadata i32 0, metadata !5553, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 0, metadata !5560, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 0, metadata !5570, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 0, metadata !5552, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 1, metadata !5552, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 0, metadata !5567, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %second_vec_index.0, metadata !5568, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %vec_index.0, metadata !5552, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 0, metadata !5546, metadata !DIExpression()), !dbg !5585
  br label %for.cond44, !dbg !5647

for.cond44:                                       ; preds = %for.inc104, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc105, %for.inc104 ], !dbg !5648
  %scalar_index.0 = phi i32 [ 0, %for.body ], [ %scalar_index.1.lcssa, %for.inc104 ], !dbg !5649
  %index.0 = phi i32 [ 0, %for.body ], [ %index.1.lcssa, %for.inc104 ], !dbg !5650
  %first_vec_index.0 = phi i32 [ 0, %for.body ], [ %first_vec_index.1.lcssa, %for.inc104 ], !dbg !5651
  %second_vec_index.1 = phi i32 [ %second_vec_index.0, %for.body ], [ %second_vec_index.2.lcssa, %for.inc104 ], !dbg !5652
  %vect_stmts_counter.0 = phi i32 [ 0, %for.body ], [ %vect_stmts_counter.1.lcssa, %for.inc104 ], !dbg !5654
  call void @llvm.dbg.value(metadata i32 %vect_stmts_counter.0, metadata !5570, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %second_vec_index.1, metadata !5568, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %first_vec_index.0, metadata !5567, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %index.0, metadata !5560, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %scalar_index.0, metadata !5553, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %j.0, metadata !5546, metadata !DIExpression()), !dbg !5585
  %cmp45 = icmp slt i32 %j.0, %12, !dbg !5655
  br i1 %cmp45, label %for.cond48.preheader, label %for.inc107, !dbg !5656

for.cond48.preheader:                             ; preds = %for.cond44
  %mul52 = mul nsw i32 %j.0, %3, !dbg !5657
  %add = add nsw i32 %i.0, %mul52, !dbg !5657
  %mul53 = mul nsw i32 %add, %div, !dbg !5657
  br label %for.cond48, !dbg !5658

for.cond48:                                       ; preds = %for.cond48.preheader, %for.inc101
  %k.0 = phi i32 [ %inc102, %for.inc101 ], [ 0, %for.cond48.preheader ], !dbg !5659
  %scalar_index.1 = phi i32 [ %scalar_index.4, %for.inc101 ], [ %scalar_index.0, %for.cond48.preheader ], !dbg !5649
  %index.1 = phi i32 [ %index.4, %for.inc101 ], [ %index.0, %for.cond48.preheader ], !dbg !5640
  %first_vec_index.1 = phi i32 [ %first_vec_index.5, %for.inc101 ], [ %first_vec_index.0, %for.cond48.preheader ], !dbg !5651
  %second_vec_index.2 = phi i32 [ %second_vec_index.6, %for.inc101 ], [ %second_vec_index.1, %for.cond48.preheader ], !dbg !5652
  %vect_stmts_counter.1 = phi i32 [ %vect_stmts_counter.4, %for.inc101 ], [ %vect_stmts_counter.0, %for.cond48.preheader ], !dbg !5654
  call void @llvm.dbg.value(metadata i32 %vect_stmts_counter.1, metadata !5570, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %second_vec_index.2, metadata !5568, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %first_vec_index.1, metadata !5567, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %index.1, metadata !5560, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %scalar_index.1, metadata !5553, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %k.0, metadata !5547, metadata !DIExpression()), !dbg !5585
  %cmp49 = icmp slt i32 %k.0, %3, !dbg !5660
  br i1 %cmp49, label %for.body51, label %for.inc104, !dbg !5658

for.body51:                                       ; preds = %for.cond48
  call void @llvm.dbg.value(metadata i32 %mul53, metadata !5559, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 0, metadata !5548, metadata !DIExpression()), !dbg !5585
  %15 = sext i32 %index.1 to i64, !dbg !5661
  br label %for.cond54, !dbg !5661

for.cond54:                                       ; preds = %if.end61, %for.body51
  %indvars.iv = phi i64 [ %indvars.iv.next, %if.end61 ], [ %15, %for.body51 ], !dbg !5663
  %m.0 = phi i32 [ %inc63, %if.end61 ], [ 0, %for.body51 ], !dbg !5663
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !5560, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %m.0, metadata !5548, metadata !DIExpression()), !dbg !5585
  %cmp55 = icmp slt i32 %m.0, %div, !dbg !5664
  br i1 %cmp55, label %for.body57, label %for.end, !dbg !5666

for.body57:                                       ; preds = %for.cond54
  call void @llvm.dbg.value(metadata i32* %current_mask_element, metadata !5563, metadata !DIExpression(DW_OP_deref)), !dbg !5585
  call void @llvm.dbg.value(metadata i8* %need_next_vector, metadata !5566, metadata !DIExpression(DW_OP_deref)), !dbg !5585
  %16 = trunc i64 %indvars.iv to i32, !dbg !5667
  %call58 = call fastcc zeroext i8 @vect_get_mask_element(%union.gimple_statement_d* %stmt, i32 %mul53, i32 %m.0, i32 %conv, i8 zeroext %spec.select, i32 %16, i32* %11, i32* nonnull %current_mask_element, i8* nonnull %need_next_vector) #8, !dbg !5667
  %tobool59 = icmp eq i8 %call58, 0, !dbg !5667
  br i1 %tobool59, label %cleanup110.loopexit, label %if.end61, !dbg !5670

if.end61:                                         ; preds = %for.body57
  %17 = load i32, i32* %current_mask_element, align 4, !dbg !5671
  call void @llvm.dbg.value(metadata i32 %17, metadata !5563, metadata !DIExpression()), !dbg !5585
  %indvars.iv.next = add nsw i64 %indvars.iv, 1, !dbg !5672
  call void @llvm.dbg.value(metadata i32 undef, metadata !5560, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !5585
  %arrayidx = getelementptr inbounds i32, i32* %11, i64 %indvars.iv, !dbg !5673
  store i32 %17, i32* %arrayidx, align 4, !dbg !5674
  %inc63 = add nuw nsw i32 %m.0, 1, !dbg !5675
  call void @llvm.dbg.value(metadata i32 %inc63, metadata !5548, metadata !DIExpression()), !dbg !5585
  br label %for.cond54, !dbg !5676, !llvm.loop !5677

for.end:                                          ; preds = %for.cond54
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %for.cond54 ], !dbg !5663
  call void @llvm.dbg.value(metadata i64 %indvars.iv.lcssa, metadata !5560, metadata !DIExpression()), !dbg !5585
  %18 = trunc i64 %indvars.iv.lcssa to i32, !dbg !5585
  call void @llvm.dbg.value(metadata i32 %18, metadata !5560, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %18, metadata !5560, metadata !DIExpression()), !dbg !5585
  %cmp64 = icmp eq i32 %18, %conv, !dbg !5679
  br i1 %cmp64, label %while.cond.preheader, label %for.inc101, !dbg !5680

while.cond.preheader:                             ; preds = %for.end
  br label %while.cond, !dbg !5681

while.cond:                                       ; preds = %while.cond.preheader, %while.body
  %indvars.iv31 = phi i64 [ %13, %while.cond.preheader ], [ %indvars.iv.next32, %while.body ], !dbg !5640
  %mask_vec.0 = phi %union.tree_node* [ null, %while.cond.preheader ], [ %call73, %while.body ], !dbg !5682
  call void @llvm.dbg.value(metadata %union.tree_node* %mask_vec.0, metadata !5571, metadata !DIExpression()), !dbg !5682
  call void @llvm.dbg.value(metadata i64 %indvars.iv31, metadata !5560, metadata !DIExpression()), !dbg !5585
  %indvars.iv.next32 = add nsw i64 %indvars.iv31, -1, !dbg !5683
  call void @llvm.dbg.value(metadata i32 undef, metadata !5560, metadata !DIExpression(DW_OP_constu, 1, DW_OP_minus, DW_OP_stack_value)), !dbg !5585
  %cmp67 = icmp sgt i64 %indvars.iv31, 0, !dbg !5684
  br i1 %cmp67, label %while.body, label %while.end, !dbg !5681

while.body:                                       ; preds = %while.cond
  %19 = load %union.tree_node*, %union.tree_node** %mask_element_type, align 8, !dbg !5685
  call void @llvm.dbg.value(metadata %union.tree_node* %19, metadata !5543, metadata !DIExpression()), !dbg !5585
  %arrayidx70 = getelementptr inbounds i32, i32* %11, i64 %indvars.iv.next32, !dbg !5686
  %20 = load i32, i32* %arrayidx70, align 4, !dbg !5686
  %conv71 = sext i32 %20 to i64, !dbg !5686
  %call72 = call %union.tree_node* @build_int_cst(%union.tree_node* %19, i64 %conv71) #6, !dbg !5687
  call void @llvm.dbg.value(metadata %union.tree_node* %call72, metadata !5583, metadata !DIExpression()), !dbg !5688
  %call73 = call %union.tree_node* @tree_cons_stat(%union.tree_node* null, %union.tree_node* %call72, %union.tree_node* %mask_vec.0) #6, !dbg !5689
  call void @llvm.dbg.value(metadata %union.tree_node* %call73, metadata !5571, metadata !DIExpression()), !dbg !5682
  br label %while.cond, !dbg !5681, !llvm.loop !5690

while.end:                                        ; preds = %while.cond
  %mask_vec.0.lcssa = phi %union.tree_node* [ %mask_vec.0, %while.cond ], !dbg !5682
  call void @llvm.dbg.value(metadata %union.tree_node* %mask_vec.0.lcssa, metadata !5571, metadata !DIExpression()), !dbg !5682
  call void @llvm.dbg.value(metadata %union.tree_node* %mask_vec.0.lcssa, metadata !5571, metadata !DIExpression()), !dbg !5682
  call void @llvm.dbg.value(metadata %union.tree_node* %mask_vec.0.lcssa, metadata !5571, metadata !DIExpression()), !dbg !5682
  %call74 = call %union.tree_node* @build_vector(%union.tree_node* %call18, %union.tree_node* %mask_vec.0.lcssa) #6, !dbg !5692
  call void @llvm.dbg.value(metadata %union.tree_node* %call74, metadata !5571, metadata !DIExpression()), !dbg !5682
  call void @llvm.dbg.value(metadata i32 0, metadata !5560, metadata !DIExpression()), !dbg !5585
  %21 = load i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i64 0, i32 2, i32 8), align 8, !dbg !5693
  %call75 = call zeroext i8 %21(%union.tree_node* %2, %union.tree_node* %call74) #6, !dbg !5695
  %tobool76 = icmp eq i8 %call75, 0, !dbg !5695
  br i1 %tobool76, label %if.then77, label %if.end83, !dbg !5696

if.then77:                                        ; preds = %while.end
  %call78 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !5697
  %tobool79 = icmp eq i8 %call78, 0, !dbg !5697
  br i1 %tobool79, label %if.end82, label %if.then80, !dbg !5700

if.then80:                                        ; preds = %if.then77
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5701
  %call81 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.18, i64 0, i64 0)) #6, !dbg !5703
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5704
  call void @print_generic_expr(%struct._IO_FILE* %23, %union.tree_node* %call74, i32 0) #6, !dbg !5705
  br label %if.end82, !dbg !5706

if.end82:                                         ; preds = %if.then77, %if.then80
  call void @free(i8* %call20) #6, !dbg !5707
  br label %cleanup, !dbg !5708

if.end83:                                         ; preds = %while.end
  br i1 %tobool84, label %if.then85, label %cleanup, !dbg !5709

if.then85:                                        ; preds = %if.end83
  %24 = load i8, i8* %need_next_vector, align 1, !dbg !5710
  call void @llvm.dbg.value(metadata i8 %24, metadata !5566, metadata !DIExpression()), !dbg !5585
  %tobool86 = icmp ne i8 %24, 0, !dbg !5710
  %spec.select2 = select i1 %tobool86, i32 %second_vec_index.2, i32 %first_vec_index.1, !dbg !5713
  %spec.select3 = select i1 %tobool86, i32 %vec_index.0, i32 %second_vec_index.2, !dbg !5713
  call void @llvm.dbg.value(metadata i32 %spec.select3, metadata !5568, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %spec.select2, metadata !5567, metadata !DIExpression()), !dbg !5585
  %25 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !5714
  call void @llvm.dbg.value(metadata %struct._slp_tree* %25, metadata !5554, metadata !DIExpression()), !dbg !5585
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %25, i64 0, i32 2, !dbg !5714
  %26 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5714
  %tobool89 = icmp eq %struct.VEC_gimple_heap* %26, null, !dbg !5714
  br i1 %tobool89, label %cond.end94, label %cond.true90, !dbg !5714

cond.true90:                                      ; preds = %if.then85
  call void @llvm.dbg.value(metadata %struct._slp_tree* %25, metadata !5554, metadata !DIExpression()), !dbg !5585
  %base92 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %26, i64 0, i32 0, !dbg !5714
  br label %cond.end94, !dbg !5714

cond.end94:                                       ; preds = %if.then85, %cond.true90
  %cond95 = phi %struct.VEC_gimple_base* [ %base92, %cond.true90 ], [ null, %if.then85 ], !dbg !5714
  %inc96 = add nsw i32 %scalar_index.1, 1, !dbg !5714
  call void @llvm.dbg.value(metadata i32 %inc96, metadata !5553, metadata !DIExpression()), !dbg !5585
  %call97 = call fastcc %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond95, i32 %scalar_index.1) #8, !dbg !5714
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call97, metadata !5557, metadata !DIExpression()), !dbg !5585
  %27 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !5715
  call void @llvm.dbg.value(metadata %struct._slp_tree* %27, metadata !5554, metadata !DIExpression()), !dbg !5585
  %inc98 = add nsw i32 %vect_stmts_counter.1, 1, !dbg !5716
  call void @llvm.dbg.value(metadata i32 %inc98, metadata !5570, metadata !DIExpression()), !dbg !5585
  call fastcc void @vect_create_mask_and_perm(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %call97, %union.tree_node* %call74, i32 %spec.select2, i32 %spec.select3, %struct.gimple_stmt_iterator* %gsi, %struct._slp_tree* %27, %union.tree_node* nonnull %call8, %union.tree_node* %2, %struct.VEC_tree_heap* %dr_chain, i32 %div35, i32 %vect_stmts_counter.1) #8, !dbg !5717
  br label %cleanup, !dbg !5718

cleanup:                                          ; preds = %if.end83, %cond.end94, %if.end82
  %scalar_index.3 = phi i32 [ %scalar_index.1, %if.end82 ], [ %scalar_index.1, %if.end83 ], [ %inc96, %cond.end94 ], !dbg !5649
  %first_vec_index.4 = phi i32 [ %first_vec_index.1, %if.end82 ], [ %first_vec_index.1, %if.end83 ], [ %spec.select2, %cond.end94 ], !dbg !5651
  %second_vec_index.5 = phi i32 [ %second_vec_index.2, %if.end82 ], [ %second_vec_index.2, %if.end83 ], [ %spec.select3, %cond.end94 ], !dbg !5652
  %vect_stmts_counter.3 = phi i32 [ %vect_stmts_counter.1, %if.end82 ], [ %vect_stmts_counter.1, %if.end83 ], [ %inc98, %cond.end94 ], !dbg !5654
  %cleanup.dest.slot.0 = phi i1 [ false, %if.end82 ], [ true, %if.end83 ], [ true, %cond.end94 ]
  call void @llvm.dbg.value(metadata i32 %vect_stmts_counter.3, metadata !5570, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %second_vec_index.5, metadata !5568, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %first_vec_index.4, metadata !5567, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %scalar_index.3, metadata !5553, metadata !DIExpression()), !dbg !5585
  br i1 %cleanup.dest.slot.0, label %for.inc101, label %cleanup110.loopexit4

for.inc101:                                       ; preds = %for.end, %cleanup
  %scalar_index.4 = phi i32 [ %scalar_index.1, %for.end ], [ %scalar_index.3, %cleanup ], !dbg !5649
  %index.4 = phi i32 [ %18, %for.end ], [ 0, %cleanup ], !dbg !5640
  %first_vec_index.5 = phi i32 [ %first_vec_index.1, %for.end ], [ %first_vec_index.4, %cleanup ], !dbg !5651
  %second_vec_index.6 = phi i32 [ %second_vec_index.2, %for.end ], [ %second_vec_index.5, %cleanup ], !dbg !5652
  %vect_stmts_counter.4 = phi i32 [ %vect_stmts_counter.1, %for.end ], [ %vect_stmts_counter.3, %cleanup ], !dbg !5654
  call void @llvm.dbg.value(metadata i32 %vect_stmts_counter.4, metadata !5570, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %second_vec_index.6, metadata !5568, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %first_vec_index.5, metadata !5567, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %index.4, metadata !5560, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %scalar_index.4, metadata !5553, metadata !DIExpression()), !dbg !5585
  %inc102 = add nuw nsw i32 %k.0, 1, !dbg !5719
  call void @llvm.dbg.value(metadata i32 %inc102, metadata !5547, metadata !DIExpression()), !dbg !5585
  br label %for.cond48, !dbg !5720, !llvm.loop !5721

for.inc104:                                       ; preds = %for.cond48
  %scalar_index.1.lcssa = phi i32 [ %scalar_index.1, %for.cond48 ], !dbg !5649
  %index.1.lcssa = phi i32 [ %index.1, %for.cond48 ], !dbg !5640
  %first_vec_index.1.lcssa = phi i32 [ %first_vec_index.1, %for.cond48 ], !dbg !5651
  %second_vec_index.2.lcssa = phi i32 [ %second_vec_index.2, %for.cond48 ], !dbg !5652
  %vect_stmts_counter.1.lcssa = phi i32 [ %vect_stmts_counter.1, %for.cond48 ], !dbg !5654
  call void @llvm.dbg.value(metadata i32 %scalar_index.1.lcssa, metadata !5553, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %index.1.lcssa, metadata !5560, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %first_vec_index.1.lcssa, metadata !5567, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %second_vec_index.2.lcssa, metadata !5568, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %vect_stmts_counter.1.lcssa, metadata !5570, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %scalar_index.1.lcssa, metadata !5553, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %index.1.lcssa, metadata !5560, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %first_vec_index.1.lcssa, metadata !5567, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %second_vec_index.2.lcssa, metadata !5568, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %vect_stmts_counter.1.lcssa, metadata !5570, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %scalar_index.1.lcssa, metadata !5553, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %index.1.lcssa, metadata !5560, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %first_vec_index.1.lcssa, metadata !5567, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %second_vec_index.2.lcssa, metadata !5568, metadata !DIExpression()), !dbg !5585
  call void @llvm.dbg.value(metadata i32 %vect_stmts_counter.1.lcssa, metadata !5570, metadata !DIExpression()), !dbg !5585
  %inc105 = add nuw nsw i32 %j.0, 1, !dbg !5723
  call void @llvm.dbg.value(metadata i32 %inc105, metadata !5546, metadata !DIExpression()), !dbg !5585
  br label %for.cond44, !dbg !5724, !llvm.loop !5725

for.inc107:                                       ; preds = %for.cond44
  %inc108 = add nuw nsw i32 %i.0, 1, !dbg !5727
  call void @llvm.dbg.value(metadata i32 %inc108, metadata !5545, metadata !DIExpression()), !dbg !5585
  br label %for.cond, !dbg !5728, !llvm.loop !5729

for.end109:                                       ; preds = %cond.end
  call void @free(i8* %call20) #6, !dbg !5731
  br label %cleanup110, !dbg !5732

cleanup110.loopexit:                              ; preds = %for.body57
  br label %cleanup110, !dbg !5733

cleanup110.loopexit4:                             ; preds = %cleanup
  br label %cleanup110, !dbg !5733

cleanup110:                                       ; preds = %cleanup110.loopexit4, %cleanup110.loopexit, %if.then11, %if.then, %if.then14, %if.then5, %for.end109
  %retval.5 = phi i8 [ 1, %for.end109 ], [ 0, %if.then5 ], [ 0, %if.then ], [ 0, %if.then14 ], [ 0, %if.then11 ], [ 0, %cleanup110.loopexit ], [ 0, %cleanup110.loopexit4 ]
  call void @llvm.dbg.value(metadata i8* %need_next_vector, metadata !5566, metadata !DIExpression(DW_OP_deref)), !dbg !5585
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %need_next_vector) #7, !dbg !5733
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7, !dbg !5733
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !5733
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5733
  ret i8 %retval.5, !dbg !5733
}

declare dso_local void @print_gimple_stmt(%struct._IO_FILE*, %union.gimple_statement_d*, i32, i32) local_unnamed_addr #2

declare dso_local %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node*) local_unnamed_addr #2

declare dso_local i8* @xmalloc(i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %vec_, i32 %ix_, %struct._slp_tree** %ptr) unnamed_addr #0 !dbg !5734 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_base* %vec_, metadata !5740, metadata !DIExpression()), !dbg !5743
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !5741, metadata !DIExpression()), !dbg !5743
  call void @llvm.dbg.value(metadata %struct._slp_tree** %ptr, metadata !5742, metadata !DIExpression()), !dbg !5743
  %tobool = icmp eq %struct.VEC_slp_tree_base* %vec_, null, !dbg !5744
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !5744

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %vec_, i64 0, i32 0, !dbg !5744
  %0 = load i32, i32* %num, align 8, !dbg !5744
  %cmp = icmp ugt i32 %0, %ix_, !dbg !5744
  br i1 %cmp, label %if.then, label %if.else, !dbg !5746

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !5747
  %arrayidx = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !5747
  %1 = load %struct._slp_tree*, %struct._slp_tree** %arrayidx, align 8, !dbg !5747
  br label %return, !dbg !5747

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !5749

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %struct._slp_tree* [ null, %if.else ], [ %1, %if.then ], !dbg !5751
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !5751
  store %struct._slp_tree* %storemerge, %struct._slp_tree** %ptr, align 8, !dbg !5751
  ret i32 %retval.0, !dbg !5746
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vect_get_mask_element(%union.gimple_statement_d* %stmt, i32 %first_mask_element, i32 %m, i32 %mask_nunits, i8 zeroext %only_one_vec, i32 %index, i32* %mask, i32* %current_mask_element, i8* %need_next_vector) unnamed_addr #5 !dbg !2 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !3837, metadata !DIExpression()), !dbg !5752
  call void @llvm.dbg.value(metadata i32 %first_mask_element, metadata !3838, metadata !DIExpression()), !dbg !5752
  call void @llvm.dbg.value(metadata i32 %m, metadata !3839, metadata !DIExpression()), !dbg !5752
  call void @llvm.dbg.value(metadata i32 %mask_nunits, metadata !3840, metadata !DIExpression()), !dbg !5752
  call void @llvm.dbg.value(metadata i8 %only_one_vec, metadata !3841, metadata !DIExpression()), !dbg !5752
  call void @llvm.dbg.value(metadata i32 %index, metadata !3842, metadata !DIExpression()), !dbg !5752
  call void @llvm.dbg.value(metadata i32* %mask, metadata !3843, metadata !DIExpression()), !dbg !5752
  call void @llvm.dbg.value(metadata i32* %current_mask_element, metadata !3844, metadata !DIExpression()), !dbg !5752
  call void @llvm.dbg.value(metadata i8* %need_next_vector, metadata !3845, metadata !DIExpression()), !dbg !5752
  %add = add nsw i32 %first_mask_element, %m, !dbg !5753
  store i32 %add, i32* %current_mask_element, align 4, !dbg !5754
  %0 = load i32, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5755
  %sub = add nsw i32 %0, -1, !dbg !5756
  %mul = mul nsw i32 %sub, %mask_nunits, !dbg !5757
  %sub1 = sub nsw i32 %add, %mul, !dbg !5758
  store i32 %sub1, i32* %current_mask_element, align 4, !dbg !5758
  %cmp = icmp slt i32 %sub1, %mask_nunits, !dbg !5759
  br i1 %cmp, label %if.then, label %if.end, !dbg !5761

if.then:                                          ; preds = %entry
  store i1 true, i1* @vect_get_mask_element.needs_first_vector, align 1, !dbg !5762
  br label %if.end, !dbg !5763

if.end:                                           ; preds = %if.then, %entry
  %tobool = icmp eq i8 %only_one_vec, 0, !dbg !5764
  br i1 %tobool, label %if.end9, label %land.lhs.true, !dbg !5766

land.lhs.true:                                    ; preds = %if.end
  br i1 %cmp, label %if.end9, label %if.then4, !dbg !5767

if.then4:                                         ; preds = %land.lhs.true
  %call = tail call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !5768
  %tobool5 = icmp eq i8 %call, 0, !dbg !5768
  br i1 %tobool5, label %cleanup, label %if.then6, !dbg !5771

if.then6:                                         ; preds = %if.then4
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5772
  %call7 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.57, i64 0, i64 0)) #6, !dbg !5774
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5775
  tail call void @print_gimple_stmt(%struct._IO_FILE* %2, %union.gimple_statement_d* %stmt, i32 0, i32 2) #6, !dbg !5776
  br label %cleanup, !dbg !5777

if.end9:                                          ; preds = %land.lhs.true, %if.end
  %mul10 = shl nsw i32 %mask_nunits, 1, !dbg !5778
  %cmp11 = icmp slt i32 %sub1, %mul10, !dbg !5780
  br i1 %cmp11, label %if.end9.if.end32_crit_edge, label %if.then13, !dbg !5781

if.end9.if.end32_crit_edge:                       ; preds = %if.end9
  %.b.pre = load i1, i1* @vect_get_mask_element.mask_fixed, align 1, !dbg !5782
  %phitmp = zext i1 %.b.pre to i8, !dbg !5781
  br label %if.end32, !dbg !5781

if.then13:                                        ; preds = %if.end9
  %.b2 = load i1, i1* @vect_get_mask_element.needs_first_vector, align 1, !dbg !5783
  br i1 %.b2, label %if.then18, label %lor.lhs.false, !dbg !5786

lor.lhs.false:                                    ; preds = %if.then13
  %.b1 = load i1, i1* @vect_get_mask_element.mask_fixed, align 1, !dbg !5787
  br i1 %.b1, label %if.then18, label %if.end24, !dbg !5788

if.then18:                                        ; preds = %lor.lhs.false, %if.then13
  %call19 = tail call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !5789
  %tobool20 = icmp eq i8 %call19, 0, !dbg !5789
  br i1 %tobool20, label %cleanup, label %if.then21, !dbg !5792

if.then21:                                        ; preds = %if.then18
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5793
  %call22 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.58, i64 0, i64 0)) #6, !dbg !5795
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5796
  tail call void @print_gimple_stmt(%struct._IO_FILE* %4, %union.gimple_statement_d* %stmt, i32 0, i32 2) #6, !dbg !5797
  br label %cleanup, !dbg !5798

if.end24:                                         ; preds = %lor.lhs.false
  %5 = load i32, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5799
  %mul25 = mul nsw i32 %5, %mask_nunits, !dbg !5800
  %sub26 = sub nsw i32 %sub1, %mul25, !dbg !5801
  store i32 %sub26, i32* %current_mask_element, align 4, !dbg !5801
  call void @llvm.dbg.value(metadata i32 0, metadata !3846, metadata !DIExpression()), !dbg !5752
  %6 = sext i32 %index to i64, !dbg !5802
  br label %for.cond, !dbg !5802

for.cond:                                         ; preds = %for.body, %if.end24
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body ], [ 0, %if.end24 ], !dbg !5804
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !3846, metadata !DIExpression()), !dbg !5752
  %cmp27 = icmp slt i64 %indvars.iv, %6, !dbg !5805
  %7 = load i32, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5807
  br i1 %cmp27, label %for.body, label %for.end, !dbg !5808

for.body:                                         ; preds = %for.cond
  %mul29 = mul nsw i32 %7, %mask_nunits, !dbg !5809
  %arrayidx = getelementptr inbounds i32, i32* %mask, i64 %indvars.iv, !dbg !5810
  %8 = load i32, i32* %arrayidx, align 4, !dbg !5811
  %sub30 = sub nsw i32 %8, %mul29, !dbg !5811
  store i32 %sub30, i32* %arrayidx, align 4, !dbg !5811
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !5812
  call void @llvm.dbg.value(metadata i32 undef, metadata !3846, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !5752
  br label %for.cond, !dbg !5813, !llvm.loop !5814

for.end:                                          ; preds = %for.cond
  %.lcssa = phi i32 [ %7, %for.cond ], !dbg !5807
  %inc31 = add nsw i32 %.lcssa, 1, !dbg !5816
  store i32 %inc31, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5816
  store i1 true, i1* @vect_get_mask_element.mask_fixed, align 1, !dbg !5817
  br label %if.end32, !dbg !5818

if.end32:                                         ; preds = %if.end9.if.end32_crit_edge, %for.end
  %.b = phi i8 [ %phitmp, %if.end9.if.end32_crit_edge ], [ 1, %for.end ]
  store i8 %.b, i8* %need_next_vector, align 1, !dbg !5819
  %sub33 = add nsw i32 %mask_nunits, -1, !dbg !5820
  %cmp34 = icmp eq i32 %sub33, %index, !dbg !5822
  br i1 %cmp34, label %if.then36, label %cleanup, !dbg !5823

if.then36:                                        ; preds = %if.end32
  store i32 1, i32* @vect_get_mask_element.number_of_mask_fixes, align 4, !dbg !5824
  store i1 false, i1* @vect_get_mask_element.mask_fixed, align 1, !dbg !5826
  store i1 false, i1* @vect_get_mask_element.needs_first_vector, align 1, !dbg !5827
  br label %cleanup, !dbg !5828

cleanup:                                          ; preds = %if.then4, %if.then18, %if.end32, %if.then36, %if.then21, %if.then6
  %retval.0 = phi i8 [ 0, %if.then6 ], [ 0, %if.then4 ], [ 0, %if.then21 ], [ 0, %if.then18 ], [ 1, %if.then36 ], [ 1, %if.end32 ], !dbg !5752
  ret i8 %retval.0, !dbg !5829
}

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) local_unnamed_addr #2

declare dso_local %union.tree_node* @tree_cons_stat(%union.tree_node*, %union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @build_vector(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local void @print_generic_expr(%struct._IO_FILE*, %union.tree_node*, i32) local_unnamed_addr #2

declare dso_local void @free(i8*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @vect_create_mask_and_perm(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %next_scalar_stmt, %union.tree_node* %mask, i32 %first_vec_indx, i32 %second_vec_indx, %struct.gimple_stmt_iterator* %gsi, %struct._slp_tree* %node, %union.tree_node* %builtin_decl, %union.tree_node* %vectype, %struct.VEC_tree_heap* %dr_chain, i32 %ncopies, i32 %vect_stmts_counter) unnamed_addr #0 !dbg !5830 {
entry:
  %params = alloca %struct.VEC_tree_heap*, align 8
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !5834, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %next_scalar_stmt, metadata !5835, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %union.tree_node* %mask, metadata !5836, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata i32 %first_vec_indx, metadata !5837, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata i32 %second_vec_indx, metadata !5838, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %gsi, metadata !5839, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %struct._slp_tree* %node, metadata !5840, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %union.tree_node* %builtin_decl, metadata !5841, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %union.tree_node* %vectype, metadata !5842, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %dr_chain, metadata !5843, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata i32 %ncopies, metadata !5844, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata i32 %vect_stmts_counter, metadata !5845, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !5847, metadata !DIExpression()), !dbg !5855
  %0 = bitcast %struct.VEC_tree_heap** %params to i8*, !dbg !5856
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5856
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* null, metadata !5854, metadata !DIExpression()), !dbg !5855
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %params, align 8, !dbg !5857
  %vec_stmts_size = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 4, !dbg !5858
  %1 = load i32, i32* %vec_stmts_size, align 8, !dbg !5858
  %div = udiv i32 %1, %ncopies, !dbg !5859
  call void @llvm.dbg.value(metadata i32 %div, metadata !5850, metadata !DIExpression()), !dbg !5855
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 3, !dbg !5860
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !5860
  %tobool = icmp eq %struct.VEC_gimple_heap* %2, null, !dbg !5860
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !5860

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %2, i64 0, i32 0, !dbg !5860
  br label %cond.end, !dbg !5860

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %entry ], !dbg !5860
  %call = tail call fastcc i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %cond) #8, !dbg !5860
  call void @llvm.dbg.value(metadata i32 %call, metadata !5849, metadata !DIExpression()), !dbg !5855
  br label %for.cond, !dbg !5862

for.cond:                                         ; preds = %cond.end9, %cond.end
  %i.0 = phi i32 [ %call, %cond.end ], [ %inc, %cond.end9 ], !dbg !5863
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5849, metadata !DIExpression()), !dbg !5855
  %3 = load i32, i32* %vec_stmts_size, align 8, !dbg !5864
  %cmp = icmp slt i32 %i.0, %3, !dbg !5866
  br i1 %cmp, label %for.body, label %for.end, !dbg !5867

for.body:                                         ; preds = %for.cond
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !5868
  %tobool4 = icmp eq %struct.VEC_gimple_heap* %4, null, !dbg !5868
  br i1 %tobool4, label %cond.end9, label %cond.true5, !dbg !5868

cond.true5:                                       ; preds = %for.body
  %base7 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i64 0, i32 0, !dbg !5868
  br label %cond.end9, !dbg !5868

cond.end9:                                        ; preds = %for.body, %cond.true5
  %cond10 = phi %struct.VEC_gimple_base* [ %base7, %cond.true5 ], [ null, %for.body ], !dbg !5868
  %call11 = tail call fastcc %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond10, %union.gimple_statement_d* null) #8, !dbg !5868
  %inc = add nsw i32 %i.0, 1, !dbg !5869
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5849, metadata !DIExpression()), !dbg !5855
  br label %for.cond, !dbg !5870, !llvm.loop !5871

for.end:                                          ; preds = %for.cond
  %call12 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %stmt) #8, !dbg !5873
  %call13 = tail call %union.tree_node* @vect_create_destination_var(%union.tree_node* %call12, %union.tree_node* %vectype) #6, !dbg !5874
  call void @llvm.dbg.value(metadata %union.tree_node* %call13, metadata !5846, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata i32 0, metadata !5849, metadata !DIExpression()), !dbg !5855
  %base19 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %dr_chain, i64 0, i32 0, !dbg !5875
  br label %for.cond14, !dbg !5879

for.cond14:                                       ; preds = %cond.end61, %for.end
  %first_vec_indx.addr.0 = phi i32 [ %first_vec_indx, %for.end ], [ %add64, %cond.end61 ]
  %second_vec_indx.addr.0 = phi i32 [ %second_vec_indx, %for.end ], [ %add65, %cond.end61 ]
  %perm_stmt.0 = phi %union.gimple_statement_d* [ null, %for.end ], [ %call53, %cond.end61 ], !dbg !5855
  %i.1 = phi i32 [ 0, %for.end ], [ %inc67, %cond.end61 ], !dbg !5880
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !5849, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %perm_stmt.0, metadata !5847, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata i32 %second_vec_indx.addr.0, metadata !5838, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata i32 %first_vec_indx.addr.0, metadata !5837, metadata !DIExpression()), !dbg !5855
  %cmp15 = icmp slt i32 %i.1, %ncopies, !dbg !5881
  br i1 %cmp15, label %for.body16, label %for.end68, !dbg !5882

for.body16:                                       ; preds = %for.cond14
  %call23 = call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %base19, i32 %first_vec_indx.addr.0) #8, !dbg !5883
  call void @llvm.dbg.value(metadata %union.tree_node* %call23, metadata !5851, metadata !DIExpression()), !dbg !5855
  %call30 = call fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %base19, i32 %second_vec_indx.addr.0) #8, !dbg !5884
  call void @llvm.dbg.value(metadata %union.tree_node* %call30, metadata !5852, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %params, metadata !5854, metadata !DIExpression(DW_OP_deref)), !dbg !5855
  call fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** nonnull %params) #8, !dbg !5885
  %call31 = call fastcc %struct.VEC_tree_heap* @VEC_tree_heap_alloc(i32 3) #8, !dbg !5886
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %call31, metadata !5854, metadata !DIExpression()), !dbg !5855
  store %struct.VEC_tree_heap* %call31, %struct.VEC_tree_heap** %params, align 8, !dbg !5887
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %call31, metadata !5854, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %call31, metadata !5854, metadata !DIExpression()), !dbg !5855
  %base34 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %call31, i64 0, i32 0, !dbg !5888
  %call38 = call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %base34, %union.tree_node* %call23) #8, !dbg !5888
  %5 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !5889
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %5, metadata !5854, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %5, metadata !5854, metadata !DIExpression()), !dbg !5855
  %base41 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %5, i64 0, i32 0, !dbg !5889
  %call45 = call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %base41, %union.tree_node* %call30) #8, !dbg !5889
  %6 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !5890
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %6, metadata !5854, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %6, metadata !5854, metadata !DIExpression()), !dbg !5855
  %base48 = getelementptr inbounds %struct.VEC_tree_heap, %struct.VEC_tree_heap* %6, i64 0, i32 0, !dbg !5890
  %call52 = call fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %base48, %union.tree_node* %mask) #8, !dbg !5890
  %7 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %params, align 8, !dbg !5891
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap* %7, metadata !5854, metadata !DIExpression()), !dbg !5855
  %call53 = call %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node* %builtin_decl, %struct.VEC_tree_heap* %7) #6, !dbg !5892
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call53, metadata !5847, metadata !DIExpression()), !dbg !5855
  %call54 = call fastcc %union.tree_node* @make_ssa_name(%union.tree_node* %call13, %union.gimple_statement_d* %call53) #8, !dbg !5893
  call void @llvm.dbg.value(metadata %union.tree_node* %call54, metadata !5853, metadata !DIExpression()), !dbg !5855
  call fastcc void @gimple_call_set_lhs(%union.gimple_statement_d* %call53, %union.tree_node* %call54) #8, !dbg !5894
  call void @vect_finish_stmt_generation(%union.gimple_statement_d* %stmt, %union.gimple_statement_d* %call53, %struct.gimple_stmt_iterator* %gsi) #6, !dbg !5895
  %8 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !5896
  %tobool56 = icmp eq %struct.VEC_gimple_heap* %8, null, !dbg !5896
  br i1 %tobool56, label %cond.end61, label %cond.true57, !dbg !5896

cond.true57:                                      ; preds = %for.body16
  %base59 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %8, i64 0, i32 0, !dbg !5896
  br label %cond.end61, !dbg !5896

cond.end61:                                       ; preds = %for.body16, %cond.true57
  %cond62 = phi %struct.VEC_gimple_base* [ %base59, %cond.true57 ], [ null, %for.body16 ], !dbg !5896
  %mul = mul nsw i32 %div, %i.1, !dbg !5896
  %add = add nsw i32 %mul, %vect_stmts_counter, !dbg !5896
  %call63 = call fastcc %union.gimple_statement_d* @VEC_gimple_base_replace(%struct.VEC_gimple_base* %cond62, i32 %add, %union.gimple_statement_d* %call53) #8, !dbg !5896
  %add64 = add nsw i32 %first_vec_indx.addr.0, %div, !dbg !5897
  call void @llvm.dbg.value(metadata i32 %add64, metadata !5837, metadata !DIExpression()), !dbg !5855
  %add65 = add nsw i32 %second_vec_indx.addr.0, %div, !dbg !5898
  call void @llvm.dbg.value(metadata i32 %add65, metadata !5838, metadata !DIExpression()), !dbg !5855
  %inc67 = add nuw nsw i32 %i.1, 1, !dbg !5899
  call void @llvm.dbg.value(metadata i32 %inc67, metadata !5849, metadata !DIExpression()), !dbg !5855
  br label %for.cond14, !dbg !5900, !llvm.loop !5901

for.end68:                                        ; preds = %for.cond14
  %perm_stmt.0.lcssa = phi %union.gimple_statement_d* [ %perm_stmt.0, %for.cond14 ], !dbg !5855
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %perm_stmt.0.lcssa, metadata !5847, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %perm_stmt.0.lcssa, metadata !5847, metadata !DIExpression()), !dbg !5855
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %perm_stmt.0.lcssa, metadata !5847, metadata !DIExpression()), !dbg !5855
  %call69 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %next_scalar_stmt) #8, !dbg !5903
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call69, metadata !5848, metadata !DIExpression()), !dbg !5855
  %vectorized_stmt = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call69, i64 0, i32 6, !dbg !5904
  store %union.gimple_statement_d* %perm_stmt.0.lcssa, %union.gimple_statement_d** %vectorized_stmt, align 8, !dbg !5905
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5906
  ret void, !dbg !5906
}

; Function Attrs: nounwind uwtable
define dso_local zeroext i8 @vect_schedule_slp(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo) local_unnamed_addr #5 !dbg !5907 {
entry:
  %instance = alloca %struct._slp_instance*, align 8
  call void @llvm.dbg.value(metadata %struct._loop_vec_info* %loop_vinfo, metadata !5909, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %bb_vinfo, metadata !5910, metadata !DIExpression()), !dbg !5916
  %0 = bitcast %struct._slp_instance** %instance to i8*, !dbg !5917
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5917
  call void @llvm.dbg.value(metadata i8 0, metadata !5915, metadata !DIExpression()), !dbg !5916
  %tobool = icmp eq %struct._loop_vec_info* %loop_vinfo, null, !dbg !5918
  br i1 %tobool, label %if.else, label %if.then, !dbg !5920

if.then:                                          ; preds = %entry
  %slp_instances1 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 16, !dbg !5921
  %vectorization_factor = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 6, !dbg !5923
  %1 = load i32, i32* %vectorization_factor, align 8, !dbg !5923
  call void @llvm.dbg.value(metadata i32 %1, metadata !5914, metadata !DIExpression()), !dbg !5916
  br label %if.end, !dbg !5924

if.else:                                          ; preds = %entry
  %slp_instances2 = getelementptr inbounds %struct._bb_vec_info, %struct._bb_vec_info* %bb_vinfo, i64 0, i32 2, !dbg !5925
  call void @llvm.dbg.value(metadata i32 1, metadata !5914, metadata !DIExpression()), !dbg !5916
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %slp_instances.0.in = phi %struct.VEC_slp_instance_heap** [ %slp_instances1, %if.then ], [ %slp_instances2, %if.else ]
  %vf.0 = phi i32 [ %1, %if.then ], [ 1, %if.else ], !dbg !5927
  %slp_instances.0 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %slp_instances.0.in, align 8, !dbg !5927
  call void @llvm.dbg.value(metadata i32 %vf.0, metadata !5914, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_heap* %slp_instances.0, metadata !5911, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.value(metadata i32 0, metadata !5913, metadata !DIExpression()), !dbg !5916
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %slp_instances.0, i64 0, i32 0, !dbg !5928
  br label %for.cond, !dbg !5931

for.cond:                                         ; preds = %for.inc, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.inc ], !dbg !5932
  %is_store.0 = phi i8 [ 0, %if.end ], [ %call5, %for.inc ], !dbg !5916
  call void @llvm.dbg.value(metadata i8 %is_store.0, metadata !5915, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5913, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.value(metadata %struct._slp_instance** %instance, metadata !5912, metadata !DIExpression(DW_OP_deref)), !dbg !5916
  %call = call fastcc i32 @VEC_slp_instance_base_iterate(%struct.VEC_slp_instance_base* %base, i32 %i.0, %struct._slp_instance** nonnull %instance) #8, !dbg !5933
  %tobool4 = icmp eq i32 %call, 0, !dbg !5934
  br i1 %tobool4, label %for.end, label %for.body, !dbg !5934

for.body:                                         ; preds = %for.cond
  %2 = load %struct._slp_instance*, %struct._slp_instance** %instance, align 8, !dbg !5935
  call void @llvm.dbg.value(metadata %struct._slp_instance* %2, metadata !5912, metadata !DIExpression()), !dbg !5916
  %root = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %2, i64 0, i32 0, !dbg !5935
  %3 = load %struct._slp_tree*, %struct._slp_tree** %root, align 8, !dbg !5935
  call void @llvm.dbg.value(metadata %struct._slp_instance* %2, metadata !5912, metadata !DIExpression()), !dbg !5916
  %call5 = call fastcc zeroext i8 @vect_schedule_slp_instance(%struct._slp_tree* %3, %struct._slp_instance* %2, i32 %vf.0) #8, !dbg !5937
  call void @llvm.dbg.value(metadata i8 %call5, metadata !5915, metadata !DIExpression()), !dbg !5916
  %call6 = call zeroext i8 @vect_print_dump_info(i32 1) #6, !dbg !5938
  %tobool7 = icmp eq i8 %call6, 0, !dbg !5938
  br i1 %tobool7, label %lor.lhs.false, label %if.then11, !dbg !5940

lor.lhs.false:                                    ; preds = %for.body
  %call8 = call zeroext i8 @vect_print_dump_info(i32 2) #6, !dbg !5941
  %tobool10 = icmp eq i8 %call8, 0, !dbg !5941
  br i1 %tobool10, label %for.inc, label %if.then11, !dbg !5942

if.then11:                                        ; preds = %lor.lhs.false, %for.body
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !5943
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19, i64 0, i64 0)) #6, !dbg !5944
  br label %for.inc, !dbg !5944

for.inc:                                          ; preds = %lor.lhs.false, %if.then11
  %inc = add i32 %i.0, 1, !dbg !5945
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5913, metadata !DIExpression()), !dbg !5916
  br label %for.cond, !dbg !5946, !llvm.loop !5947

for.end:                                          ; preds = %for.cond
  %is_store.0.lcssa = phi i8 [ %is_store.0, %for.cond ], !dbg !5916
  call void @llvm.dbg.value(metadata i8 %is_store.0.lcssa, metadata !5915, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.value(metadata i8 %is_store.0.lcssa, metadata !5915, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.value(metadata i8 %is_store.0.lcssa, metadata !5915, metadata !DIExpression()), !dbg !5916
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !5949
  ret i8 %is_store.0.lcssa, !dbg !5950
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vect_schedule_slp_instance(%struct._slp_tree* %node, %struct._slp_instance* %instance, i32 %vectorization_factor) unnamed_addr #5 !dbg !5951 {
entry:
  %strided_store = alloca i8, align 1
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %loads_node = alloca %struct._slp_tree*, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp51 = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct._slp_tree* %node, metadata !5955, metadata !DIExpression()), !dbg !5969
  call void @llvm.dbg.value(metadata %struct._slp_instance* %instance, metadata !5956, metadata !DIExpression()), !dbg !5969
  call void @llvm.dbg.value(metadata i32 %vectorization_factor, metadata !5957, metadata !DIExpression()), !dbg !5969
  call void @llvm.dbg.value(metadata i8* %strided_store, metadata !5959, metadata !DIExpression(DW_OP_deref)), !dbg !5969
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %strided_store) #7, !dbg !5970
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !5971
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !5971
  %1 = bitcast %struct._slp_tree** %loads_node to i8*, !dbg !5972
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !5972
  %tobool = icmp eq %struct._slp_tree* %node, null, !dbg !5973
  br i1 %tobool, label %cleanup, label %if.end, !dbg !5975

if.end:                                           ; preds = %entry
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 0, !dbg !5976
  %2 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !5976
  %call = tail call fastcc zeroext i8 @vect_schedule_slp_instance(%struct._slp_tree* %2, %struct._slp_instance* %instance, i32 %vectorization_factor) #8, !dbg !5977
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 1, !dbg !5978
  %3 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !5978
  %call1 = tail call fastcc zeroext i8 @vect_schedule_slp_instance(%struct._slp_tree* %3, %struct._slp_instance* %instance, i32 %vectorization_factor) #8, !dbg !5979
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 2, !dbg !5980
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !5980
  %tobool2 = icmp eq %struct.VEC_gimple_heap* %4, null, !dbg !5980
  br i1 %tobool2, label %cond.end, label %cond.true, !dbg !5980

cond.true:                                        ; preds = %if.end
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i64 0, i32 0, !dbg !5980
  br label %cond.end, !dbg !5980

cond.end:                                         ; preds = %if.end, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %if.end ], !dbg !5980
  %call4 = tail call fastcc %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond, i32 0) #8, !dbg !5980
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call4, metadata !5958, metadata !DIExpression()), !dbg !5969
  %call5 = tail call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %call4) #8, !dbg !5981
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call5, metadata !5962, metadata !DIExpression()), !dbg !5969
  %call6 = tail call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %call4) #8, !dbg !5982
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %call6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !5982
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5982
  %call7 = tail call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* %5) #6, !dbg !5983
  call void @llvm.dbg.value(metadata %union.tree_node* %call7, metadata !5966, metadata !DIExpression()), !dbg !5969
  %type8 = bitcast %union.tree_node* %call7 to %struct.tree_type*, !dbg !5984
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type8, i64 0, i32 6, !dbg !5984
  %bf.load = load i32, i32* %precision, align 4, !dbg !5984
  %bf.clear = and i32 %bf.load, 1023, !dbg !5984
  %sh_prom = zext i32 %bf.clear to i64, !dbg !5984
  %shl = shl i64 1, %sh_prom, !dbg !5984
  %conv = trunc i64 %shl to i32, !dbg !5985
  call void @llvm.dbg.value(metadata i32 %conv, metadata !5964, metadata !DIExpression()), !dbg !5969
  %group_size9 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 1, !dbg !5986
  %6 = load i32, i32* %group_size9, align 8, !dbg !5986
  call void @llvm.dbg.value(metadata i32 %6, metadata !5965, metadata !DIExpression()), !dbg !5969
  %mul = mul i32 %6, %vectorization_factor, !dbg !5987
  %div = udiv i32 %mul, %conv, !dbg !5988
  call void @llvm.dbg.value(metadata i32 %div, metadata !5963, metadata !DIExpression()), !dbg !5969
  %load_permutation = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 4, !dbg !5989
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation, align 8, !dbg !5989
  %tobool10 = icmp eq %struct.VEC_int_heap* %7, null, !dbg !5989
  br i1 %tobool10, label %if.end27, label %for.cond.preheader, !dbg !5991

for.cond.preheader:                               ; preds = %cond.end
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 5, !dbg !5992
  br label %for.cond, !dbg !5996

for.cond:                                         ; preds = %for.cond.preheader, %for.inc
  %i.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond.preheader ], !dbg !5997
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !5967, metadata !DIExpression()), !dbg !5969
  %8 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !5998
  %tobool12 = icmp eq %struct.VEC_slp_tree_heap* %8, null, !dbg !5998
  br i1 %tobool12, label %cond.end17, label %cond.true13, !dbg !5998

cond.true13:                                      ; preds = %for.cond
  %base15 = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %8, i64 0, i32 0, !dbg !5998
  br label %cond.end17, !dbg !5998

cond.end17:                                       ; preds = %for.cond, %cond.true13
  %cond18 = phi %struct.VEC_slp_tree_base* [ %base15, %cond.true13 ], [ null, %for.cond ], !dbg !5998
  call void @llvm.dbg.value(metadata %struct._slp_tree** %loads_node, metadata !5968, metadata !DIExpression(DW_OP_deref)), !dbg !5969
  %call19 = call fastcc i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %cond18, i32 %i.0, %struct._slp_tree** nonnull %loads_node) #8, !dbg !5998
  %tobool20 = icmp eq i32 %call19, 0, !dbg !5996
  br i1 %tobool20, label %if.end27.loopexit, label %for.body, !dbg !5996

for.body:                                         ; preds = %cond.end17
  %9 = load %struct._slp_tree*, %struct._slp_tree** %loads_node, align 8, !dbg !5999
  call void @llvm.dbg.value(metadata %struct._slp_tree* %9, metadata !5968, metadata !DIExpression()), !dbg !5969
  %vec_stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %9, i64 0, i32 3, !dbg !5999
  %10 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts, align 8, !dbg !5999
  %tobool21 = icmp eq %struct.VEC_gimple_heap* %10, null, !dbg !5999
  br i1 %tobool21, label %if.then22, label %for.inc, !dbg !6002

if.then22:                                        ; preds = %for.body
  %call23 = call fastcc %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %div) #8, !dbg !6003
  %11 = load %struct._slp_tree*, %struct._slp_tree** %loads_node, align 8, !dbg !6005
  call void @llvm.dbg.value(metadata %struct._slp_tree* %11, metadata !5968, metadata !DIExpression()), !dbg !5969
  %vec_stmts24 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %11, i64 0, i32 3, !dbg !6005
  store %struct.VEC_gimple_heap* %call23, %struct.VEC_gimple_heap** %vec_stmts24, align 8, !dbg !6006
  call void @llvm.dbg.value(metadata %struct._slp_tree* %11, metadata !5968, metadata !DIExpression()), !dbg !5969
  %vec_stmts_size25 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %11, i64 0, i32 4, !dbg !6007
  store i32 %div, i32* %vec_stmts_size25, align 8, !dbg !6008
  br label %for.inc, !dbg !6009

for.inc:                                          ; preds = %for.body, %if.then22
  %inc = add nuw nsw i32 %i.0, 1, !dbg !6010
  call void @llvm.dbg.value(metadata i32 %inc, metadata !5967, metadata !DIExpression()), !dbg !5969
  br label %for.cond, !dbg !6011, !llvm.loop !6012

if.end27.loopexit:                                ; preds = %cond.end17
  br label %if.end27, !dbg !6014

if.end27:                                         ; preds = %if.end27.loopexit, %cond.end
  %vec_stmts28 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 3, !dbg !6014
  %12 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_stmts28, align 8, !dbg !6014
  %tobool29 = icmp eq %struct.VEC_gimple_heap* %12, null, !dbg !6014
  br i1 %tobool29, label %if.then30, label %if.end34, !dbg !6016

if.then30:                                        ; preds = %if.end27
  %call31 = call fastcc %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %div) #8, !dbg !6017
  store %struct.VEC_gimple_heap* %call31, %struct.VEC_gimple_heap** %vec_stmts28, align 8, !dbg !6019
  %vec_stmts_size33 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 4, !dbg !6020
  store i32 %div, i32* %vec_stmts_size33, align 8, !dbg !6021
  br label %if.end34, !dbg !6022

if.end34:                                         ; preds = %if.end27, %if.then30
  %call35 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !6023
  %tobool36 = icmp eq i8 %call35, 0, !dbg !6023
  br i1 %tobool36, label %if.end39, label %if.then37, !dbg !6025

if.then37:                                        ; preds = %if.end34
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6026
  %call38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.59, i64 0, i64 0)) #6, !dbg !6028
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6029
  call void @print_gimple_stmt(%struct._IO_FILE* %14, %union.gimple_statement_d* %call4, i32 0, i32 2) #6, !dbg !6030
  br label %if.end39, !dbg !6031

if.end39:                                         ; preds = %if.end34, %if.then37
  %first_load = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 6, !dbg !6032
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_load, align 8, !dbg !6032
  %tobool40 = icmp eq %union.gimple_statement_d* %15, null, !dbg !6032
  br i1 %tobool40, label %if.else, label %land.lhs.true, !dbg !6034

land.lhs.true:                                    ; preds = %if.end39
  %first_dr = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call5, i64 0, i32 17, !dbg !6035
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr, align 8, !dbg !6035
  %cmp = icmp eq %union.gimple_statement_d* %16, null, !dbg !6035
  br i1 %cmp, label %if.else, label %land.lhs.true42, !dbg !6036

land.lhs.true42:                                  ; preds = %land.lhs.true
  %call43 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %call4) #6, !dbg !6037
  %17 = getelementptr inbounds %union.tree_node, %union.tree_node* %call43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6037
  %bf.load45 = load i64, i64* %17, align 8, !dbg !6037
  %bf.cast = and i64 %bf.load45, 65535, !dbg !6037
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast, !dbg !6037
  %18 = load i32, i32* %arrayidx, align 4, !dbg !6037
  %cmp47 = icmp eq i32 %18, 4, !dbg !6037
  br i1 %cmp47, label %if.else, label %if.then49, !dbg !6038

if.then49:                                        ; preds = %land.lhs.true42
  %19 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6039
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %19) #7, !dbg !6039
  %20 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_load, align 8, !dbg !6040
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp, %union.gimple_statement_d* %20) #6, !dbg !6039
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %19, i64 24, i1 false), !dbg !6039
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %19) #7, !dbg !6039
  br label %if.end52, !dbg !6041

if.else:                                          ; preds = %land.lhs.true, %if.end39, %land.lhs.true42
  %21 = bitcast %struct.gimple_stmt_iterator* %tmp51 to i8*, !dbg !6042
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %21) #7, !dbg !6042
  call void @gsi_for_stmt(%struct.gimple_stmt_iterator* nonnull sret %tmp51, %union.gimple_statement_d* %call4) #6, !dbg !6042
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %21, i64 24, i1 false), !dbg !6042
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %21) #7, !dbg !6042
  br label %if.end52

if.end52:                                         ; preds = %if.else, %if.then49
  call void @llvm.dbg.value(metadata i8* %strided_store, metadata !5959, metadata !DIExpression(DW_OP_deref)), !dbg !5969
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !5961, metadata !DIExpression(DW_OP_deref)), !dbg !5969
  %call53 = call zeroext i8 @vect_transform_stmt(%union.gimple_statement_d* %call4, %struct.gimple_stmt_iterator* nonnull %si, i8* nonnull %strided_store, %struct._slp_tree* nonnull %node, %struct._slp_instance* %instance) #6, !dbg !6043
  call void @llvm.dbg.value(metadata i8 %call53, metadata !5960, metadata !DIExpression()), !dbg !5969
  %tobool54 = icmp eq i8 %call53, 0, !dbg !6044
  br i1 %tobool54, label %cleanup, label %if.then55, !dbg !6046

if.then55:                                        ; preds = %if.end52
  %first_dr56 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call5, i64 0, i32 17, !dbg !6047
  %22 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr56, align 8, !dbg !6047
  %tobool57 = icmp eq %union.gimple_statement_d* %22, null, !dbg !6047
  br i1 %tobool57, label %if.else60, label %if.then58, !dbg !6050

if.then58:                                        ; preds = %if.then55
  call void @vect_remove_stores(%union.gimple_statement_d* nonnull %22) #6, !dbg !6051
  br label %cleanup, !dbg !6051

if.else60:                                        ; preds = %if.then55
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 2032, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !6052
  br label %cleanup

cleanup:                                          ; preds = %if.end52, %entry, %if.then58, %if.else60
  %retval.0 = phi i8 [ 0, %entry ], [ 1, %if.else60 ], [ 1, %if.then58 ], [ 0, %if.end52 ], !dbg !5969
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !6053
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !6053
  call void @llvm.dbg.value(metadata i8* %strided_store, metadata !5959, metadata !DIExpression(DW_OP_deref)), !dbg !5969
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %strided_store) #7, !dbg !6053
  ret i8 %retval.0, !dbg !6053
}

; Function Attrs: nounwind uwtable
define dso_local void @vect_slp_transform_bb(%struct.basic_block_def* %bb) local_unnamed_addr #5 !dbg !6054 {
entry:
  %si = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6058, metadata !DIExpression()), !dbg !6066
  %call = tail call fastcc %struct._bb_vec_info* @vec_info_for_bb(%struct.basic_block_def* %bb) #8, !dbg !6067
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %call, metadata !6059, metadata !DIExpression()), !dbg !6066
  %0 = bitcast %struct.gimple_stmt_iterator* %si to i8*, !dbg !6068
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %0) #7, !dbg !6068
  %tobool = icmp eq %struct._bb_vec_info* %call, null, !dbg !6069
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !6069

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 2083, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !6069
  br label %cond.end, !dbg !6069

cond.end:                                         ; preds = %entry, %cond.true
  %call1 = tail call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !6070
  %tobool2 = icmp eq i8 %call1, 0, !dbg !6070
  br i1 %tobool2, label %if.end, label %if.then, !dbg !6072

if.then:                                          ; preds = %cond.end
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6073
  %call3 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22, i64 0, i64 0)) #6, !dbg !6074
  br label %if.end, !dbg !6074

if.end:                                           ; preds = %cond.end, %if.then
  %2 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !6075
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %2) #7, !dbg !6075
  call fastcc void @gsi_start_bb(%struct.gimple_stmt_iterator* nonnull sret %tmp, %struct.basic_block_def* %bb) #8, !dbg !6075
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %0, i8* nonnull align 8 %2, i64 24, i1 false), !dbg !6075
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %2) #7, !dbg !6075
  br label %for.cond, !dbg !6076

for.cond:                                         ; preds = %for.inc, %if.end
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !6060, metadata !DIExpression(DW_OP_deref)), !dbg !6066
  %call4 = call fastcc zeroext i8 @gsi_end_p(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #8, !dbg !6077
  %tobool5 = icmp eq i8 %call4, 0, !dbg !6078
  br i1 %tobool5, label %for.body, label %for.end, !dbg !6079

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !6060, metadata !DIExpression(DW_OP_deref)), !dbg !6066
  %call6 = call fastcc %union.gimple_statement_d* @gsi_stmt(%struct.gimple_stmt_iterator* nonnull byval(%struct.gimple_stmt_iterator) align 8 %si) #8, !dbg !6080
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call6, metadata !6061, metadata !DIExpression()), !dbg !6081
  %call7 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !6082
  %tobool8 = icmp eq i8 %call7, 0, !dbg !6082
  br i1 %tobool8, label %if.end11, label %if.then9, !dbg !6084

if.then9:                                         ; preds = %for.body
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6085
  %call10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.23, i64 0, i64 0)) #6, !dbg !6087
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6088
  call void @print_gimple_stmt(%struct._IO_FILE* %4, %union.gimple_statement_d* %call6, i32 0, i32 2) #6, !dbg !6089
  br label %if.end11, !dbg !6090

if.end11:                                         ; preds = %for.body, %if.then9
  %call12 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %call6) #8, !dbg !6091
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call12, metadata !6065, metadata !DIExpression()), !dbg !6081
  %tobool13 = icmp eq %struct._stmt_vec_info* %call12, null, !dbg !6092
  br i1 %tobool13, label %cond.true14, label %cond.end16, !dbg !6092

cond.true14:                                      ; preds = %if.end11
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 2100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !6092
  br label %cond.end16, !dbg !6092

cond.end16:                                       ; preds = %if.end11, %cond.true14
  %slp_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call12, i64 0, i32 25, !dbg !6093
  %5 = load i32, i32* %slp_type, align 4, !dbg !6093
  %tobool18 = icmp eq i32 %5, 0, !dbg !6093
  br i1 %tobool18, label %cleanup, label %if.then19, !dbg !6095

if.then19:                                        ; preds = %cond.end16
  %call20 = call zeroext i8 @vect_schedule_slp(%struct._loop_vec_info* null, %struct._bb_vec_info* %call) #8, !dbg !6096
  br label %cleanup, !dbg !6098

cleanup:                                          ; preds = %cond.end16, %if.then19
  %cleanup.dest.slot.0 = phi i1 [ false, %if.then19 ], [ true, %cond.end16 ]
  br i1 %cleanup.dest.slot.0, label %for.inc, label %for.end

for.inc:                                          ; preds = %cleanup
  call void @llvm.dbg.value(metadata %struct.gimple_stmt_iterator* %si, metadata !6060, metadata !DIExpression(DW_OP_deref)), !dbg !6066
  call fastcc void @gsi_next(%struct.gimple_stmt_iterator* nonnull %si) #8, !dbg !6099
  br label %for.cond, !dbg !6100, !llvm.loop !6101

for.end:                                          ; preds = %cleanup, %for.cond
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6103
  %call23 = call fastcc %union.tree_node* @gimple_vop(%struct.function* %6) #8, !dbg !6104
  call void @mark_sym_for_renaming(%union.tree_node* %call23) #6, !dbg !6105
  call void @update_ssa(i32 2048) #6, !dbg !6106
  %call24 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !6107
  %tobool25 = icmp eq i8 %call24, 0, !dbg !6107
  br i1 %tobool25, label %if.end28, label %if.then26, !dbg !6109

if.then26:                                        ; preds = %for.end
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6110
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0)) #6, !dbg !6111
  br label %if.end28, !dbg !6111

if.end28:                                         ; preds = %for.end, %if.then26
  call fastcc void @destroy_bb_vec_info(%struct._bb_vec_info* %call) #8, !dbg !6112
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %0) #7, !dbg !6113
  ret void, !dbg !6113
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct._bb_vec_info* @vec_info_for_bb(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !6114 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6116, metadata !DIExpression()), !dbg !6117
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 2, !dbg !6118
  %0 = bitcast i8** %aux to %struct._bb_vec_info**, !dbg !6118
  %1 = load %struct._bb_vec_info*, %struct._bb_vec_info** %0, align 8, !dbg !6118
  ret %struct._bb_vec_info* %1, !dbg !6119
}

declare dso_local void @fancy_abort(i8*, i32, i8*) local_unnamed_addr #2

declare dso_local void @mark_sym_for_renaming(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vop(%struct.function* %fun) unnamed_addr #0 !dbg !6120 {
entry:
  call void @llvm.dbg.value(metadata %struct.function* %fun, metadata !6127, metadata !DIExpression()), !dbg !6128
  %tobool = icmp eq %struct.function* %fun, null, !dbg !6129
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !6129

land.lhs.true:                                    ; preds = %entry
  %gimple_df = getelementptr inbounds %struct.function, %struct.function* %fun, i64 0, i32 3, !dbg !6129
  %0 = load %struct.gimple_df*, %struct.gimple_df** %gimple_df, align 8, !dbg !6129
  %tobool1 = icmp eq %struct.gimple_df* %0, null, !dbg !6129
  br i1 %tobool1, label %cond.true, label %cond.end, !dbg !6129

cond.true:                                        ; preds = %land.lhs.true, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56, i64 0, i64 0), i32 51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !6129
  %gimple_df2.phi.trans.insert = getelementptr inbounds %struct.function, %struct.function* %fun, i64 0, i32 3, !dbg !6128
  %.pre = load %struct.gimple_df*, %struct.gimple_df** %gimple_df2.phi.trans.insert, align 8, !dbg !6130
  br label %cond.end, !dbg !6129

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %1 = phi %struct.gimple_df* [ %0, %land.lhs.true ], [ %.pre, %cond.true ], !dbg !6130
  %vop = getelementptr inbounds %struct.gimple_df, %struct.gimple_df* %1, i64 0, i32 3, !dbg !6131
  %2 = load %union.tree_node*, %union.tree_node** %vop, align 8, !dbg !6131
  ret %union.tree_node* %2, !dbg !6132
}

declare dso_local void @update_ssa(i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) unnamed_addr #0 !dbg !6133 {
entry:
  call void @llvm.dbg.value(metadata %struct.basic_block_def* %bb, metadata !6140, metadata !DIExpression()), !dbg !6141
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 13, !dbg !6142
  %0 = load i32, i32* %flags, align 8, !dbg !6142
  %and = and i32 %0, 512, !dbg !6143
  %tobool = icmp eq i32 %and, 0, !dbg !6143
  br i1 %tobool, label %land.lhs.true, label %cond.end, !dbg !6144

land.lhs.true:                                    ; preds = %entry
  %gimple = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %bb, i64 0, i32 7, i32 0, !dbg !6145
  %1 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6145
  %tobool1 = icmp eq %struct.gimple_bb_info* %1, null, !dbg !6146
  br i1 %tobool1, label %cond.end, label %cond.true, !dbg !6147

cond.true:                                        ; preds = %land.lhs.true
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %1, i64 0, i32 0, !dbg !6148
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6148
  br label %cond.end, !dbg !6147

cond.end:                                         ; preds = %land.lhs.true, %entry, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %2, %cond.true ], [ null, %land.lhs.true ], [ null, %entry ], !dbg !6147
  ret %struct.gimple_seq_d* %cond, !dbg !6149
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.gimple_seq_node_d* @gimple_seq_first(%struct.gimple_seq_d* %s) unnamed_addr #0 !dbg !6150 {
entry:
  call void @llvm.dbg.value(metadata %struct.gimple_seq_d* %s, metadata !6157, metadata !DIExpression()), !dbg !6158
  %tobool = icmp eq %struct.gimple_seq_d* %s, null, !dbg !6159
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6159

cond.true:                                        ; preds = %entry
  %first = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %s, i64 0, i32 0, !dbg !6160
  %0 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %first, align 8, !dbg !6160
  br label %cond.end, !dbg !6159

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %0, %cond.true ], [ null, %entry ], !dbg !6159
  ret %struct.gimple_seq_node_d* %cond, !dbg !6161
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_gimple_heap_free(%struct.VEC_gimple_heap** %vec_) unnamed_addr #0 !dbg !6162 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %vec_, metadata !6167, metadata !DIExpression()), !dbg !6168
  %0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_, align 8, !dbg !6169
  %tobool = icmp eq %struct.VEC_gimple_heap* %0, null, !dbg !6169
  br i1 %tobool, label %if.end, label %if.then, !dbg !6171

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_gimple_heap* %0 to i8*, !dbg !6171
  tail call void @free(i8* nonnull %1) #6, !dbg !6169
  br label %if.end, !dbg !6169

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %vec_, align 8, !dbg !6171
  ret void, !dbg !6171
}

declare dso_local i32 @least_common_multiple(i32, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !6172 {
entry:
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !6176, metadata !DIExpression()), !dbg !6177
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 %alloc_) #6, !dbg !6178
  %0 = bitcast i8* %call to %struct.VEC_gimple_heap*, !dbg !6178
  ret %struct.VEC_gimple_heap* %0, !dbg !6178
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %vec_, %union.gimple_statement_d* %obj_) unnamed_addr #0 !dbg !6179 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %vec_, metadata !6183, metadata !DIExpression()), !dbg !6185
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %obj_, metadata !6184, metadata !DIExpression()), !dbg !6185
  %call = tail call fastcc i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 1) #8, !dbg !6186
  %0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_, align 8, !dbg !6186
  %tobool = icmp eq %struct.VEC_gimple_heap* %0, null, !dbg !6186
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6186

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %0, i64 0, i32 0, !dbg !6186
  br label %cond.end, !dbg !6186

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6186
  %call1 = tail call fastcc %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %cond, %union.gimple_statement_d* %obj_) #8, !dbg !6186
  ret %union.gimple_statement_d** %call1, !dbg !6186
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !6187 {
entry:
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !6191, metadata !DIExpression()), !dbg !6192
  %call = tail call i8* @vec_heap_o_reserve_exact(i8* null, i32 %alloc_, i64 8, i64 4) #6, !dbg !6193
  %0 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !6193
  ret %struct.VEC_int_heap* %0, !dbg !6193
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_slp_tree_heap* @VEC_slp_tree_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !6194 {
entry:
  call void @llvm.dbg.value(metadata i32 %alloc_, metadata !6198, metadata !DIExpression()), !dbg !6199
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 %alloc_) #6, !dbg !6200
  %0 = bitcast i8* %call to %struct.VEC_slp_tree_heap*, !dbg !6200
  ret %struct.VEC_slp_tree_heap* %0, !dbg !6200
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vect_build_slp_tree(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %struct._slp_tree** %node, i32 %group_size, i32* %inside_cost, i32* %outside_cost, i32 %ncopies_for_cost, i32* %max_nunits, %struct.VEC_int_heap** %load_permutation, %struct.VEC_slp_tree_heap** %loads, i32 %vectorization_factor) unnamed_addr #5 !dbg !6201 {
entry:
  %def_stmts0 = alloca %struct.VEC_gimple_heap*, align 8
  %def_stmts1 = alloca %struct.VEC_gimple_heap*, align 8
  %stmt = alloca %union.gimple_statement_d*, align 8
  %first_stmt_dt0 = alloca i32, align 4
  %first_stmt_dt1 = alloca i32, align 4
  %first_stmt_def1_type = alloca %union.tree_node*, align 8
  %first_stmt_def0_type = alloca %union.tree_node*, align 8
  %first_stmt_const_oprnd = alloca %union.tree_node*, align 8
  %pattern0 = alloca i8, align 1
  %pattern1 = alloca i8, align 1
  %dummy = alloca i64, align 8
  %left_node = alloca %struct._slp_tree*, align 8
  %right_node = alloca %struct._slp_tree*, align 8
  call void @llvm.dbg.value(metadata %struct._loop_vec_info* %loop_vinfo, metadata !6206, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %bb_vinfo, metadata !6207, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata %struct._slp_tree** %node, metadata !6208, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32 %group_size, metadata !6209, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32* %inside_cost, metadata !6210, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32* %outside_cost, metadata !6211, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32 %ncopies_for_cost, metadata !6212, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32* %max_nunits, metadata !6213, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap** %load_permutation, metadata !6214, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap** %loads, metadata !6215, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32 %vectorization_factor, metadata !6216, metadata !DIExpression()), !dbg !6272
  %0 = bitcast %struct.VEC_gimple_heap** %def_stmts0 to i8*, !dbg !6273
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !6273
  %call = tail call fastcc %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %group_size) #8, !dbg !6274
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %call, metadata !6217, metadata !DIExpression()), !dbg !6272
  store %struct.VEC_gimple_heap* %call, %struct.VEC_gimple_heap** %def_stmts0, align 8, !dbg !6275
  %1 = bitcast %struct.VEC_gimple_heap** %def_stmts1 to i8*, !dbg !6276
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !6276
  %call1 = tail call fastcc %struct.VEC_gimple_heap* @VEC_gimple_heap_alloc(i32 %group_size) #8, !dbg !6277
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %call1, metadata !6218, metadata !DIExpression()), !dbg !6272
  store %struct.VEC_gimple_heap* %call1, %struct.VEC_gimple_heap** %def_stmts1, align 8, !dbg !6278
  %2 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !6279
  %stmts2 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %2, i64 0, i32 2, !dbg !6279
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts2, align 8, !dbg !6279
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap* %3, metadata !6220, metadata !DIExpression()), !dbg !6272
  %4 = bitcast %union.gimple_statement_d** %stmt to i8*, !dbg !6280
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #7, !dbg !6280
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i64 0, i32 0, !dbg !6281
  %call3 = tail call fastcc %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %base, i32 0) #8, !dbg !6281
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call3, metadata !6221, metadata !DIExpression()), !dbg !6272
  store %union.gimple_statement_d* %call3, %union.gimple_statement_d** %stmt, align 8, !dbg !6282
  %5 = bitcast i32* %first_stmt_dt0 to i8*, !dbg !6283
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7, !dbg !6283
  call void @llvm.dbg.value(metadata i32 0, metadata !6222, metadata !DIExpression()), !dbg !6272
  store i32 0, i32* %first_stmt_dt0, align 4, !dbg !6284
  %6 = bitcast i32* %first_stmt_dt1 to i8*, !dbg !6285
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #7, !dbg !6285
  call void @llvm.dbg.value(metadata i32 0, metadata !6223, metadata !DIExpression()), !dbg !6272
  store i32 0, i32* %first_stmt_dt1, align 4, !dbg !6286
  call void @llvm.dbg.value(metadata i32 0, metadata !6224, metadata !DIExpression()), !dbg !6272
  %7 = bitcast %union.tree_node** %first_stmt_def1_type to i8*, !dbg !6287
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #7, !dbg !6287
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !6226, metadata !DIExpression()), !dbg !6272
  store %union.tree_node* null, %union.tree_node** %first_stmt_def1_type, align 8, !dbg !6288
  %8 = bitcast %union.tree_node** %first_stmt_def0_type to i8*, !dbg !6287
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #7, !dbg !6287
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !6227, metadata !DIExpression()), !dbg !6272
  store %union.tree_node* null, %union.tree_node** %first_stmt_def0_type, align 8, !dbg !6289
  call void @llvm.dbg.value(metadata i8 0, metadata !6229, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 0, metadata !6230, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !6233, metadata !DIExpression()), !dbg !6272
  %9 = bitcast %union.tree_node** %first_stmt_const_oprnd to i8*, !dbg !6290
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7, !dbg !6290
  call void @llvm.dbg.value(metadata %union.tree_node* null, metadata !6258, metadata !DIExpression()), !dbg !6272
  store %union.tree_node* null, %union.tree_node** %first_stmt_const_oprnd, align 8, !dbg !6291
  call void @llvm.dbg.value(metadata i8* %pattern0, metadata !6260, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %pattern0) #7, !dbg !6292
  call void @llvm.dbg.value(metadata i8 0, metadata !6260, metadata !DIExpression()), !dbg !6272
  store i8 0, i8* %pattern0, align 1, !dbg !6293
  call void @llvm.dbg.value(metadata i8* %pattern1, metadata !6261, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %pattern1) #7, !dbg !6292
  call void @llvm.dbg.value(metadata i8 0, metadata !6261, metadata !DIExpression()), !dbg !6272
  store i8 0, i8* %pattern1, align 1, !dbg !6294
  %10 = bitcast i64* %dummy to i8*, !dbg !6295
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #7, !dbg !6295
  call void @llvm.dbg.value(metadata i8 0, metadata !6263, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32 0, metadata !6219, metadata !DIExpression()), !dbg !6272
  %conv = zext i32 %vectorization_factor to i64, !dbg !6296
  %tobool42 = icmp eq %struct._bb_vec_info* %bb_vinfo, null, !dbg !6300
  br label %for.cond, !dbg !6304

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !6305
  %first_stmt_code.0 = phi i32 [ 0, %entry ], [ %first_stmt_code.1, %for.inc ], !dbg !6272
  %stop_recursion.0 = phi i8 [ 0, %entry ], [ %stop_recursion.1, %for.inc ], !dbg !6306
  %need_same_oprnds.0 = phi i8 [ 0, %entry ], [ %need_same_oprnds.4, %for.inc ], !dbg !6307
  %first_op1.0 = phi %union.tree_node* [ null, %entry ], [ %first_op1.4, %for.inc ], !dbg !6308
  %permutation.0 = phi i8 [ 0, %entry ], [ %permutation.2, %for.inc ], !dbg !6309
  call void @llvm.dbg.value(metadata i8 %permutation.0, metadata !6263, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata %union.tree_node* %first_op1.0, metadata !6233, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 %need_same_oprnds.0, metadata !6230, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 %stop_recursion.0, metadata !6229, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32 %first_stmt_code.0, metadata !6224, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !6219, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !6221, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  %call10 = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %base, i32 %i.0, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !6310
  %tobool11 = icmp eq i32 %call10, 0, !dbg !6311
  br i1 %tobool11, label %for.end, label %for.body, !dbg !6311

for.body:                                         ; preds = %for.cond
  %call12 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6312
  %tobool13 = icmp eq i8 %call12, 0, !dbg !6312
  br i1 %tobool13, label %if.end, label %if.then, !dbg !6314

if.then:                                          ; preds = %for.body
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6315
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0)) #6, !dbg !6317
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6318
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6319
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %13, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @print_gimple_stmt(%struct._IO_FILE* %12, %union.gimple_statement_d* %13, i32 0, i32 2) #6, !dbg !6320
  br label %if.end, !dbg !6321

if.end:                                           ; preds = %for.body, %if.then
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6322
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %14, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call15 = call %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d* %14) #6, !dbg !6323
  call void @llvm.dbg.value(metadata %union.tree_node* %call15, metadata !6228, metadata !DIExpression()), !dbg !6272
  %cmp = icmp eq %union.tree_node* %call15, null, !dbg !6324
  br i1 %cmp, label %if.then16, label %if.end22, !dbg !6326

if.then16:                                        ; preds = %if.end
  %call17 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6327
  %tobool18 = icmp eq i8 %call17, 0, !dbg !6327
  br i1 %tobool18, label %cleanup365, label %if.then19, !dbg !6330

if.then19:                                        ; preds = %if.then16
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6331
  %call20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.29, i64 0, i64 0)) #6, !dbg !6333
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6334
  %17 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6335
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %17, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @print_gimple_stmt(%struct._IO_FILE* %16, %union.gimple_statement_d* %17, i32 0, i32 2) #6, !dbg !6336
  br label %cleanup365, !dbg !6337

if.end22:                                         ; preds = %if.end
  %18 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6338
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %18, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i64* %dummy, metadata !6262, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata i64* %dummy, metadata !6262, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  %call23 = call %union.tree_node* @vect_get_smallest_scalar_type(%union.gimple_statement_d* %18, i64* nonnull %dummy, i64* nonnull %dummy) #6, !dbg !6339
  call void @llvm.dbg.value(metadata %union.tree_node* %call23, metadata !6232, metadata !DIExpression()), !dbg !6272
  %call24 = call %union.tree_node* @get_vectype_for_scalar_type(%union.tree_node* %call23) #6, !dbg !6340
  call void @llvm.dbg.value(metadata %union.tree_node* %call24, metadata !6231, metadata !DIExpression()), !dbg !6272
  %tobool25 = icmp eq %union.tree_node* %call24, null, !dbg !6341
  br i1 %tobool25, label %if.then26, label %if.end32, !dbg !6343

if.then26:                                        ; preds = %if.end22
  %call23.lcssa = phi %union.tree_node* [ %call23, %if.end22 ], !dbg !6339
  %call27 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6344
  %tobool28 = icmp eq i8 %call27, 0, !dbg !6344
  br i1 %tobool28, label %cleanup365, label %if.then29, !dbg !6347

if.then29:                                        ; preds = %if.then26
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6348
  %call30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.25, i64 0, i64 0)) #6, !dbg !6350
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6351
  call void @print_generic_expr(%struct._IO_FILE* %20, %union.tree_node* %call23.lcssa, i32 2) #6, !dbg !6352
  br label %cleanup365, !dbg !6353

if.end32:                                         ; preds = %if.end22
  %type = bitcast %union.tree_node* %call24 to %struct.tree_type*, !dbg !6354
  %precision = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type, i64 0, i32 6, !dbg !6354
  %bf.load = load i32, i32* %precision, align 4, !dbg !6354
  %bf.clear = and i32 %bf.load, 1023, !dbg !6354
  %sh_prom = zext i32 %bf.clear to i64, !dbg !6354
  %div = lshr i64 %conv, %sh_prom, !dbg !6355
  %conv33 = trunc i64 %div to i32, !dbg !6356
  call void @llvm.dbg.value(metadata i32 %conv33, metadata !6234, metadata !DIExpression()), !dbg !6272
  %cmp34 = icmp eq i32 %conv33, 1, !dbg !6357
  br i1 %cmp34, label %if.end45, label %if.then36, !dbg !6358

if.then36:                                        ; preds = %if.end32
  %call37 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6359
  %tobool38 = icmp eq i8 %call37, 0, !dbg !6359
  br i1 %tobool38, label %if.end41, label %if.then39, !dbg !6361

if.then39:                                        ; preds = %if.then36
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6362
  %call40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.30, i64 0, i64 0)) #6, !dbg !6363
  br label %if.end41, !dbg !6363

if.end41:                                         ; preds = %if.then36, %if.then39
  br i1 %tobool42, label %if.end41.if.end45_crit_edge, label %cleanup365.loopexit, !dbg !6364

if.end41.if.end45_crit_edge:                      ; preds = %if.end41
  %bf.load49.pre = load i32, i32* %precision, align 4, !dbg !6365
  %.pre42 = and i32 %bf.load49.pre, 1023, !dbg !6365
  %.pre43 = zext i32 %.pre42 to i64, !dbg !6365
  br label %if.end45, !dbg !6364

if.end45:                                         ; preds = %if.end41.if.end45_crit_edge, %if.end32
  %sh_prom51.pre-phi = phi i64 [ %.pre43, %if.end41.if.end45_crit_edge ], [ %sh_prom, %if.end32 ], !dbg !6365
  %22 = load i32, i32* %max_nunits, align 4, !dbg !6367
  %conv46 = zext i32 %22 to i64, !dbg !6367
  %conv46.highbits = lshr i64 %conv46, %sh_prom51.pre-phi, !dbg !6368
  %cmp53 = icmp eq i64 %conv46.highbits, 0, !dbg !6368
  br i1 %cmp53, label %if.then55, label %if.end63, !dbg !6369

if.then55:                                        ; preds = %if.end45
  %shl61 = shl i64 1, %sh_prom51.pre-phi, !dbg !6370
  %conv62 = trunc i64 %shl61 to i32, !dbg !6370
  store i32 %conv62, i32* %max_nunits, align 4, !dbg !6371
  br label %if.end63, !dbg !6372

if.end63:                                         ; preds = %if.then55, %if.end45
  %23 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6373
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %23, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call64 = call fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %23) #8, !dbg !6375
  %tobool65 = icmp eq i8 %call64, 0, !dbg !6375
  br i1 %tobool65, label %if.else, label %if.end68, !dbg !6376

if.else:                                          ; preds = %if.end63
  %24 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6377
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %24, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call67 = call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %24) #8, !dbg !6378
  call void @llvm.dbg.value(metadata i32 %call67, metadata !6225, metadata !DIExpression()), !dbg !6272
  br label %if.end68

if.end68:                                         ; preds = %if.end63, %if.else
  %rhs_code.0 = phi i32 [ %call67, %if.else ], [ 59, %if.end63 ], !dbg !6379
  call void @llvm.dbg.value(metadata i32 %rhs_code.0, metadata !6225, metadata !DIExpression()), !dbg !6272
  %cmp69 = icmp eq i32 %i.0, 0, !dbg !6380
  br i1 %cmp69, label %if.then71, label %if.else170, !dbg !6382

if.then71:                                        ; preds = %if.end68
  call void @llvm.dbg.value(metadata i32 %rhs_code.0, metadata !6224, metadata !DIExpression()), !dbg !6272
  %rhs_code.0.off = add i32 %rhs_code.0, -83, !dbg !6383
  %switch = icmp ult i32 %rhs_code.0.off, 4, !dbg !6383
  br i1 %switch, label %if.then82, label %if.end204, !dbg !6383

if.then82:                                        ; preds = %if.then71
  %25 = getelementptr inbounds %union.tree_node, %union.tree_node* %call24, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6386
  %bf.load84 = load i64, i64* %25, align 8, !dbg !6386
  %bf.cast4 = and i64 %bf.load84, 65535, !dbg !6386
  %cmp86 = icmp eq i64 %bf.cast4, 14, !dbg !6386
  br i1 %cmp86, label %cond.true88, label %cond.false90, !dbg !6386

cond.true88:                                      ; preds = %if.then82
  %call89 = call i32 @vector_type_mode(%union.tree_node* nonnull %call24) #6, !dbg !6386
  br label %cond.end94, !dbg !6386

cond.false90:                                     ; preds = %if.then82
  %bf.load92 = load i32, i32* %precision, align 4, !dbg !6386
  %bf.lshr = lshr i32 %bf.load92, 16, !dbg !6386
  %bf.clear93 = and i32 %bf.lshr, 255, !dbg !6386
  br label %cond.end94, !dbg !6386

cond.end94:                                       ; preds = %cond.false90, %cond.true88
  %cond95 = phi i32 [ %call89, %cond.true88 ], [ %bf.clear93, %cond.false90 ], !dbg !6386
  call void @llvm.dbg.value(metadata i32 %cond95, metadata !6257, metadata !DIExpression()), !dbg !6272
  %call96 = call %struct.optab_d* @optab_for_tree_code(i32 %rhs_code.0, %union.tree_node* nonnull %call24, i32 2) #6, !dbg !6388
  call void @llvm.dbg.value(metadata %struct.optab_d* %call96, metadata !6235, metadata !DIExpression()), !dbg !6272
  %tobool97 = icmp eq %struct.optab_d* %call96, null, !dbg !6389
  br i1 %tobool97, label %if.then101, label %lor.lhs.false98, !dbg !6391

lor.lhs.false98:                                  ; preds = %cond.end94
  %idxprom = sext i32 %cond95 to i64, !dbg !6392
  %insn_code = getelementptr inbounds %struct.optab_d, %struct.optab_d* %call96, i64 0, i32 4, i64 %idxprom, i32 0, !dbg !6393
  %26 = load i32, i32* %insn_code, align 4, !dbg !6393
  %cmp99 = icmp eq i32 %26, 2956, !dbg !6394
  br i1 %cmp99, label %if.then101, label %if.end204, !dbg !6395

if.then101:                                       ; preds = %cond.end94, %lor.lhs.false98
  %call102 = call %struct.optab_d* @optab_for_tree_code(i32 %rhs_code.0, %union.tree_node* nonnull %call24, i32 1) #6, !dbg !6396
  call void @llvm.dbg.value(metadata %struct.optab_d* %call102, metadata !6235, metadata !DIExpression()), !dbg !6272
  %tobool103 = icmp eq %struct.optab_d* %call102, null, !dbg !6398
  br i1 %tobool103, label %if.then104, label %if.end110, !dbg !6400

if.then104:                                       ; preds = %if.then101
  %call105 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6401
  %tobool106 = icmp eq i8 %call105, 0, !dbg !6401
  br i1 %tobool106, label %cleanup365, label %if.then107, !dbg !6404

if.then107:                                       ; preds = %if.then104
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6405
  %call108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.31, i64 0, i64 0)) #6, !dbg !6406
  br label %cleanup365, !dbg !6406

if.end110:                                        ; preds = %if.then101
  %idxprom112 = sext i32 %cond95 to i64, !dbg !6407
  %insn_code114 = getelementptr inbounds %struct.optab_d, %struct.optab_d* %call102, i64 0, i32 4, i64 %idxprom112, i32 0, !dbg !6408
  %28 = load i32, i32* %insn_code114, align 4, !dbg !6408
  call void @llvm.dbg.value(metadata i32 %28, metadata !6255, metadata !DIExpression()), !dbg !6272
  %cmp115 = icmp eq i32 %28, 2956, !dbg !6409
  br i1 %cmp115, label %if.then117, label %if.end123, !dbg !6411

if.then117:                                       ; preds = %if.end110
  %call118 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6412
  %tobool119 = icmp eq i8 %call118, 0, !dbg !6412
  br i1 %tobool119, label %cleanup365, label %if.then120, !dbg !6415

if.then120:                                       ; preds = %if.then117
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6416
  %call121 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.32, i64 0, i64 0)) #6, !dbg !6417
  br label %cleanup365, !dbg !6417

if.end123:                                        ; preds = %if.end110
  %idxprom124 = sext i32 %28 to i64, !dbg !6418
  %operand = getelementptr inbounds [0 x %struct.insn_data], [0 x %struct.insn_data]* @insn_data, i64 0, i64 %idxprom124, i32 3, !dbg !6419
  %30 = load %struct.insn_operand_data*, %struct.insn_operand_data** %operand, align 8, !dbg !6419
  %mode127 = getelementptr inbounds %struct.insn_operand_data, %struct.insn_operand_data* %30, i64 2, i32 2, !dbg !6420
  %bf.load128 = load i16, i16* %mode127, align 8, !dbg !6420
  call void @llvm.dbg.value(metadata i16 %bf.load128, metadata !6256, metadata !DIExpression()), !dbg !6272
  %idxprom130 = zext i16 %bf.load128 to i64, !dbg !6421
  %arrayidx131 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom130, !dbg !6421
  %31 = load i8, i8* %arrayidx131, align 1, !dbg !6421
  %cmp133 = icmp eq i8 %31, 12, !dbg !6421
  br i1 %cmp133, label %if.end204, label %lor.lhs.false135, !dbg !6421

lor.lhs.false135:                                 ; preds = %if.end123
  %cmp139 = icmp eq i8 %31, 17, !dbg !6421
  br i1 %cmp139, label %if.end204, label %lor.lhs.false141, !dbg !6421

lor.lhs.false141:                                 ; preds = %lor.lhs.false135
  %cmp145 = icmp eq i8 %31, 13, !dbg !6421
  br i1 %cmp145, label %if.end204, label %lor.lhs.false147, !dbg !6421

lor.lhs.false147:                                 ; preds = %lor.lhs.false141
  %cmp151 = icmp eq i8 %31, 14, !dbg !6421
  br i1 %cmp151, label %if.end204, label %lor.lhs.false153, !dbg !6421

lor.lhs.false153:                                 ; preds = %lor.lhs.false147
  %cmp157 = icmp eq i8 %31, 15, !dbg !6421
  br i1 %cmp157, label %if.end204, label %lor.lhs.false159, !dbg !6421

lor.lhs.false159:                                 ; preds = %lor.lhs.false153
  %cmp163 = icmp eq i8 %31, 16, !dbg !6421
  br i1 %cmp163, label %if.end204, label %if.then165, !dbg !6423

if.then165:                                       ; preds = %lor.lhs.false159
  call void @llvm.dbg.value(metadata i8 1, metadata !6230, metadata !DIExpression()), !dbg !6272
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6424
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %32, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call166 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %32) #8, !dbg !6426
  call void @llvm.dbg.value(metadata %union.tree_node* %call166, metadata !6233, metadata !DIExpression()), !dbg !6272
  br label %if.end204, !dbg !6427

if.else170:                                       ; preds = %if.end68
  %cmp171 = icmp eq i32 %first_stmt_code.0, %rhs_code.0, !dbg !6428
  br i1 %cmp171, label %if.end190, label %land.lhs.true, !dbg !6431

land.lhs.true:                                    ; preds = %if.else170
  %cmp173 = icmp ne i32 %first_stmt_code.0, 44, !dbg !6432
  %cmp176 = icmp ne i32 %rhs_code.0, 43, !dbg !6433
  %or.cond = or i1 %cmp173, %cmp176, !dbg !6434
  br i1 %or.cond, label %land.lhs.true178, label %if.end190, !dbg !6434

land.lhs.true178:                                 ; preds = %land.lhs.true
  %cmp179 = icmp ne i32 %first_stmt_code.0, 43, !dbg !6435
  %cmp182 = icmp ne i32 %rhs_code.0, 44, !dbg !6436
  %or.cond3 = or i1 %cmp179, %cmp182, !dbg !6437
  br i1 %or.cond3, label %if.then184, label %if.end190, !dbg !6437

if.then184:                                       ; preds = %land.lhs.true178
  %call185 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6438
  %tobool186 = icmp eq i8 %call185, 0, !dbg !6438
  br i1 %tobool186, label %cleanup365, label %if.then187, !dbg !6441

if.then187:                                       ; preds = %if.then184
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6442
  %call188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.33, i64 0, i64 0)) #6, !dbg !6444
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6445
  %35 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6446
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %35, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @print_gimple_stmt(%struct._IO_FILE* %34, %union.gimple_statement_d* %35, i32 0, i32 2) #6, !dbg !6447
  br label %cleanup365, !dbg !6448

if.end190:                                        ; preds = %if.else170, %land.lhs.true178, %land.lhs.true
  %tobool192 = icmp eq i8 %need_same_oprnds.0, 0, !dbg !6449
  br i1 %tobool192, label %if.end204, label %land.lhs.true193, !dbg !6451

land.lhs.true193:                                 ; preds = %if.end190
  %36 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6452
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %36, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call194 = call fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %36) #8, !dbg !6453
  %call195 = call i32 @operand_equal_p(%union.tree_node* %first_op1.0, %union.tree_node* %call194, i32 0) #6, !dbg !6454
  %tobool196 = icmp eq i32 %call195, 0, !dbg !6454
  br i1 %tobool196, label %if.then197, label %if.end204, !dbg !6455

if.then197:                                       ; preds = %land.lhs.true193
  %call198 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6456
  %tobool199 = icmp eq i8 %call198, 0, !dbg !6456
  br i1 %tobool199, label %cleanup365, label %if.then200, !dbg !6459

if.then200:                                       ; preds = %if.then197
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6460
  %call201 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.34, i64 0, i64 0)) #6, !dbg !6462
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6463
  %39 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6464
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %39, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @print_gimple_stmt(%struct._IO_FILE* %38, %union.gimple_statement_d* %39, i32 0, i32 2) #6, !dbg !6465
  br label %cleanup365, !dbg !6466

if.end204:                                        ; preds = %land.lhs.true193, %if.end190, %if.then71, %if.end123, %lor.lhs.false135, %lor.lhs.false141, %lor.lhs.false147, %lor.lhs.false153, %lor.lhs.false159, %if.then165, %lor.lhs.false98
  %first_stmt_code.1 = phi i32 [ %rhs_code.0, %lor.lhs.false98 ], [ %rhs_code.0, %if.then165 ], [ %rhs_code.0, %lor.lhs.false159 ], [ %rhs_code.0, %lor.lhs.false153 ], [ %rhs_code.0, %lor.lhs.false147 ], [ %rhs_code.0, %lor.lhs.false141 ], [ %rhs_code.0, %lor.lhs.false135 ], [ %rhs_code.0, %if.end123 ], [ %rhs_code.0, %if.then71 ], [ %first_stmt_code.0, %land.lhs.true193 ], [ %first_stmt_code.0, %if.end190 ], !dbg !6272
  %need_same_oprnds.4 = phi i8 [ %need_same_oprnds.0, %lor.lhs.false98 ], [ 1, %if.then165 ], [ %need_same_oprnds.0, %lor.lhs.false159 ], [ %need_same_oprnds.0, %lor.lhs.false153 ], [ %need_same_oprnds.0, %lor.lhs.false147 ], [ %need_same_oprnds.0, %lor.lhs.false141 ], [ %need_same_oprnds.0, %lor.lhs.false135 ], [ %need_same_oprnds.0, %if.end123 ], [ %need_same_oprnds.0, %if.then71 ], [ %need_same_oprnds.0, %land.lhs.true193 ], [ 0, %if.end190 ], !dbg !6307
  %first_op1.4 = phi %union.tree_node* [ %first_op1.0, %lor.lhs.false98 ], [ %call166, %if.then165 ], [ %first_op1.0, %lor.lhs.false159 ], [ %first_op1.0, %lor.lhs.false153 ], [ %first_op1.0, %lor.lhs.false147 ], [ %first_op1.0, %lor.lhs.false141 ], [ %first_op1.0, %lor.lhs.false135 ], [ %first_op1.0, %if.end123 ], [ %first_op1.0, %if.then71 ], [ %first_op1.0, %land.lhs.true193 ], [ %first_op1.0, %if.end190 ], !dbg !6308
  call void @llvm.dbg.value(metadata %union.tree_node* %first_op1.4, metadata !6233, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 %need_same_oprnds.4, metadata !6230, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i32 %first_stmt_code.1, metadata !6224, metadata !DIExpression()), !dbg !6272
  %40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6467
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %40, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call205 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %40) #8, !dbg !6467
  %first_dr206 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call205, i64 0, i32 17, !dbg !6467
  %41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr206, align 8, !dbg !6467
  %cmp207 = icmp eq %union.gimple_statement_d* %41, null, !dbg !6467
  br i1 %cmp207, label %if.else284, label %if.then209, !dbg !6469

if.then209:                                       ; preds = %if.end204
  %42 = getelementptr inbounds %union.tree_node, %union.tree_node* %call15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !6470
  %bf.load211 = load i64, i64* %42, align 8, !dbg !6470
  %bf.cast213 = and i64 %bf.load211, 65535, !dbg !6470
  %arrayidx215 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %bf.cast213, !dbg !6470
  %43 = load i32, i32* %arrayidx215, align 4, !dbg !6470
  %cmp216 = icmp eq i32 %43, 4, !dbg !6470
  br i1 %cmp216, label %if.then218, label %if.else223, !dbg !6473

if.then218:                                       ; preds = %if.then209
  %44 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !6474
  %45 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6477
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %45, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %def_stmts0, metadata !6217, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %def_stmts1, metadata !6218, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata i32* %first_stmt_dt0, metadata !6222, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata i32* %first_stmt_dt1, metadata !6223, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata %union.tree_node** %first_stmt_def1_type, metadata !6226, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata %union.tree_node** %first_stmt_def0_type, metadata !6227, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata %union.tree_node** %first_stmt_const_oprnd, metadata !6258, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata i8* %pattern0, metadata !6260, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata i8* %pattern1, metadata !6261, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  %call219 = call fastcc zeroext i8 @vect_get_and_check_slp_defs(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %struct._slp_tree* %44, %union.gimple_statement_d* %45, %struct.VEC_gimple_heap** nonnull %def_stmts0, %struct.VEC_gimple_heap** nonnull %def_stmts1, i32* nonnull %first_stmt_dt0, i32* nonnull %first_stmt_dt1, %union.tree_node** nonnull %first_stmt_def0_type, %union.tree_node** nonnull %first_stmt_def1_type, %union.tree_node** nonnull %first_stmt_const_oprnd, i32 %ncopies_for_cost, i8* nonnull %pattern0, i8* nonnull %pattern1) #8, !dbg !6478
  %tobool220 = icmp eq i8 %call219, 0, !dbg !6478
  br i1 %tobool220, label %cleanup365.loopexit, label %for.inc, !dbg !6479

if.else223:                                       ; preds = %if.then209
  %46 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6480
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %46, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call224 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %46) #8, !dbg !6480
  %first_dr225 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call224, i64 0, i32 17, !dbg !6480
  %47 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr225, align 8, !dbg !6480
  %48 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6483
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %48, metadata !6221, metadata !DIExpression()), !dbg !6272
  %cmp226 = icmp eq %union.gimple_statement_d* %47, %48, !dbg !6484
  br i1 %cmp226, label %land.lhs.true228, label %lor.lhs.false232, !dbg !6485

land.lhs.true228:                                 ; preds = %if.else223
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %48, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call229 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %47) #8, !dbg !6486
  %gap = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call229, i64 0, i32 21, !dbg !6486
  %49 = load i32, i32* %gap, align 8, !dbg !6486
  %cmp230 = icmp eq i32 %49, 0, !dbg !6487
  br i1 %cmp230, label %land.lhs.true228.lor.lhs.false232_crit_edge, label %if.then242, !dbg !6488

land.lhs.true228.lor.lhs.false232_crit_edge:      ; preds = %land.lhs.true228
  %.pre = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6489
  br label %lor.lhs.false232, !dbg !6488

lor.lhs.false232:                                 ; preds = %land.lhs.true228.lor.lhs.false232_crit_edge, %if.else223
  %50 = phi %union.gimple_statement_d* [ %.pre, %land.lhs.true228.lor.lhs.false232_crit_edge ], [ %48, %if.else223 ], !dbg !6489
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %50, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call233 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %50) #8, !dbg !6489
  %first_dr234 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call233, i64 0, i32 17, !dbg !6489
  %51 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr234, align 8, !dbg !6489
  %52 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6490
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %52, metadata !6221, metadata !DIExpression()), !dbg !6272
  %cmp235 = icmp eq %union.gimple_statement_d* %51, %52, !dbg !6491
  br i1 %cmp235, label %if.end248, label %land.lhs.true237, !dbg !6492

land.lhs.true237:                                 ; preds = %lor.lhs.false232
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %52, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call238 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %52) #8, !dbg !6493
  %gap239 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call238, i64 0, i32 21, !dbg !6493
  %53 = load i32, i32* %gap239, align 8, !dbg !6493
  %cmp240 = icmp eq i32 %53, 1, !dbg !6494
  br i1 %cmp240, label %land.lhs.true237.if.end248_crit_edge, label %if.then242, !dbg !6495

land.lhs.true237.if.end248_crit_edge:             ; preds = %land.lhs.true237
  %.pre40 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6496
  br label %if.end248, !dbg !6495

if.then242:                                       ; preds = %land.lhs.true228, %land.lhs.true237
  %call243 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6498
  %tobool244 = icmp eq i8 %call243, 0, !dbg !6498
  br i1 %tobool244, label %cleanup365, label %if.then245, !dbg !6501

if.then245:                                       ; preds = %if.then242
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6502
  %call246 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %54, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.35, i64 0, i64 0)) #6, !dbg !6504
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6505
  %56 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6506
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %56, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @print_gimple_stmt(%struct._IO_FILE* %55, %union.gimple_statement_d* %56, i32 0, i32 2) #6, !dbg !6507
  br label %cleanup365, !dbg !6508

if.end248:                                        ; preds = %land.lhs.true237.if.end248_crit_edge, %lor.lhs.false232
  %57 = phi %union.gimple_statement_d* [ %.pre40, %land.lhs.true237.if.end248_crit_edge ], [ %51, %lor.lhs.false232 ], !dbg !6496
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %57, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call249 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %57) #8, !dbg !6496
  %size = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call249, i64 0, i32 19, !dbg !6496
  %58 = load i32, i32* %size, align 8, !dbg !6496
  %mul = mul i32 %conv33, %group_size, !dbg !6509
  %cmp250 = icmp ugt i32 %58, %mul, !dbg !6510
  br i1 %cmp250, label %if.then252, label %if.end258, !dbg !6511

if.then252:                                       ; preds = %if.end248
  %call253 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6512
  %tobool254 = icmp eq i8 %call253, 0, !dbg !6512
  br i1 %tobool254, label %cleanup365, label %if.then255, !dbg !6515

if.then255:                                       ; preds = %if.then252
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6516
  %call256 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.36, i64 0, i64 0)) #6, !dbg !6518
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6519
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6520
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %61, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @print_gimple_stmt(%struct._IO_FILE* %60, %union.gimple_statement_d* %61, i32 0, i32 2) #6, !dbg !6521
  br label %cleanup365, !dbg !6522

if.end258:                                        ; preds = %if.end248
  %62 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6523
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %62, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call259 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %62) #8, !dbg !6523
  %first_dr260 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call259, i64 0, i32 17, !dbg !6523
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr260, align 8, !dbg !6523
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %63, metadata !6265, metadata !DIExpression()), !dbg !6272
  %64 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6524
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %64, metadata !6221, metadata !DIExpression()), !dbg !6272
  %cmp261 = icmp eq %union.gimple_statement_d* %63, %64, !dbg !6526
  br i1 %cmp261, label %if.then263, label %if.end276, !dbg !6527

if.then263:                                       ; preds = %if.end258
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %64, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call264 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %63) #8, !dbg !6528
  %data_ref_info = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call264, i64 0, i32 7, !dbg !6528
  %65 = load %struct.data_reference*, %struct.data_reference** %data_ref_info, align 8, !dbg !6528
  call void @llvm.dbg.value(metadata %struct.data_reference* %65, metadata !6259, metadata !DIExpression()), !dbg !6272
  %call265 = call i32 @vect_supportable_dr_alignment(%struct.data_reference* %65) #6, !dbg !6530
  %cmp266 = icmp eq i32 %call265, 0, !dbg !6532
  br i1 %cmp266, label %if.then268, label %if.end274, !dbg !6533

if.then268:                                       ; preds = %if.then263
  %call269 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6534
  %tobool270 = icmp eq i8 %call269, 0, !dbg !6534
  br i1 %tobool270, label %cleanup365, label %if.then271, !dbg !6537

if.then271:                                       ; preds = %if.then268
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6538
  %call272 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %66, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.37, i64 0, i64 0)) #6, !dbg !6540
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6541
  %68 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6542
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %68, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @print_gimple_stmt(%struct._IO_FILE* %67, %union.gimple_statement_d* %68, i32 0, i32 2) #6, !dbg !6543
  br label %cleanup365, !dbg !6544

if.end274:                                        ; preds = %if.then263
  %69 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6545
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %69, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call275 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %69) #8, !dbg !6546
  %70 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !6547
  call void @vect_model_load_cost(%struct._stmt_vec_info* %call275, i32 %ncopies_for_cost, %struct._slp_tree* %70) #6, !dbg !6548
  %.pre41 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6549
  br label %if.end276, !dbg !6550

if.end276:                                        ; preds = %if.end274, %if.end258
  %71 = phi %union.gimple_statement_d* [ %.pre41, %if.end274 ], [ %64, %if.end258 ], !dbg !6549
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %71, metadata !6221, metadata !DIExpression()), !dbg !6272
  %call277 = call i32 @vect_get_place_in_interleaving_chain(%union.gimple_statement_d* %71, %union.gimple_statement_d* %63) #6, !dbg !6551
  call void @llvm.dbg.value(metadata i32 %call277, metadata !6264, metadata !DIExpression()), !dbg !6272
  %cmp278 = icmp eq i32 %call277, %i.0, !dbg !6552
  %spec.select = select i1 %cmp278, i8 %permutation.0, i8 1, !dbg !6554
  call void @llvm.dbg.value(metadata i8 %spec.select, metadata !6263, metadata !DIExpression()), !dbg !6272
  %call282 = call fastcc i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %load_permutation, i32 %call277) #8, !dbg !6555
  call void @llvm.dbg.value(metadata i8 1, metadata !6229, metadata !DIExpression()), !dbg !6272
  br label %for.inc, !dbg !6556

if.else284:                                       ; preds = %if.end204
  %idxprom285 = sext i32 %rhs_code.0 to i64, !dbg !6557
  %arrayidx286 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom285, !dbg !6557
  %72 = load i32, i32* %arrayidx286, align 4, !dbg !6557
  %cmp287 = icmp eq i32 %72, 4, !dbg !6560
  br i1 %cmp287, label %if.then289, label %if.end295, !dbg !6561

if.then289:                                       ; preds = %if.else284
  %call290 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6562
  %tobool291 = icmp eq i8 %call290, 0, !dbg !6562
  br i1 %tobool291, label %cleanup365, label %if.then292, !dbg !6565

if.then292:                                       ; preds = %if.then289
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6566
  %call293 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %73, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.38, i64 0, i64 0)) #6, !dbg !6568
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6569
  %75 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6570
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %75, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @print_gimple_stmt(%struct._IO_FILE* %74, %union.gimple_statement_d* %75, i32 0, i32 2) #6, !dbg !6571
  br label %cleanup365, !dbg !6572

if.end295:                                        ; preds = %if.else284
  %cmp298 = icmp eq i32 %72, 7, !dbg !6573
  br i1 %cmp298, label %if.end312, label %land.lhs.true300, !dbg !6575

land.lhs.true300:                                 ; preds = %if.end295
  %cmp303 = icmp eq i32 %72, 6, !dbg !6576
  br i1 %cmp303, label %if.end312, label %if.then305, !dbg !6577

if.then305:                                       ; preds = %land.lhs.true300
  %call306 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6578
  %tobool307 = icmp eq i8 %call306, 0, !dbg !6578
  br i1 %tobool307, label %cleanup365, label %if.then308, !dbg !6581

if.then308:                                       ; preds = %if.then305
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6582
  %call309 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %76, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.39, i64 0, i64 0)) #6, !dbg !6584
  %77 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6585
  %call310 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %77, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.40, i64 0, i64 0)) #6, !dbg !6586
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6587
  %79 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6588
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %79, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @print_gimple_stmt(%struct._IO_FILE* %78, %union.gimple_statement_d* %79, i32 0, i32 2) #6, !dbg !6589
  br label %cleanup365, !dbg !6590

if.end312:                                        ; preds = %land.lhs.true300, %if.end295
  %80 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !6591
  %81 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6593
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %81, metadata !6221, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %def_stmts0, metadata !6217, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %def_stmts1, metadata !6218, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata i32* %first_stmt_dt0, metadata !6222, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata i32* %first_stmt_dt1, metadata !6223, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata %union.tree_node** %first_stmt_def1_type, metadata !6226, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata %union.tree_node** %first_stmt_def0_type, metadata !6227, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata %union.tree_node** %first_stmt_const_oprnd, metadata !6258, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata i8* %pattern0, metadata !6260, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.dbg.value(metadata i8* %pattern1, metadata !6261, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  %call313 = call fastcc zeroext i8 @vect_get_and_check_slp_defs(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %struct._slp_tree* %80, %union.gimple_statement_d* %81, %struct.VEC_gimple_heap** nonnull %def_stmts0, %struct.VEC_gimple_heap** nonnull %def_stmts1, i32* nonnull %first_stmt_dt0, i32* nonnull %first_stmt_dt1, %union.tree_node** nonnull %first_stmt_def0_type, %union.tree_node** nonnull %first_stmt_def1_type, %union.tree_node** nonnull %first_stmt_const_oprnd, i32 %ncopies_for_cost, i8* nonnull %pattern0, i8* nonnull %pattern1) #8, !dbg !6594
  %tobool314 = icmp eq i8 %call313, 0, !dbg !6594
  br i1 %tobool314, label %cleanup365.loopexit, label %for.inc, !dbg !6595

for.inc:                                          ; preds = %if.then218, %if.end312, %if.end276
  %stop_recursion.1 = phi i8 [ 1, %if.end276 ], [ %stop_recursion.0, %if.end312 ], [ %stop_recursion.0, %if.then218 ], !dbg !6272
  %permutation.2 = phi i8 [ %spec.select, %if.end276 ], [ %permutation.0, %if.end312 ], [ %permutation.0, %if.then218 ], !dbg !6272
  call void @llvm.dbg.value(metadata i8 %permutation.2, metadata !6263, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 %stop_recursion.1, metadata !6229, metadata !DIExpression()), !dbg !6272
  %inc = add i32 %i.0, 1, !dbg !6596
  call void @llvm.dbg.value(metadata i32 %inc, metadata !6219, metadata !DIExpression()), !dbg !6272
  br label %for.cond, !dbg !6597, !llvm.loop !6598

for.end:                                          ; preds = %for.cond
  %stop_recursion.0.lcssa = phi i8 [ %stop_recursion.0, %for.cond ], !dbg !6306
  %permutation.0.lcssa = phi i8 [ %permutation.0, %for.cond ], !dbg !6309
  call void @llvm.dbg.value(metadata i8 %stop_recursion.0.lcssa, metadata !6229, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 %permutation.0.lcssa, metadata !6263, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 %stop_recursion.0.lcssa, metadata !6229, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 %permutation.0.lcssa, metadata !6263, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 %stop_recursion.0.lcssa, metadata !6229, metadata !DIExpression()), !dbg !6272
  call void @llvm.dbg.value(metadata i8 %permutation.0.lcssa, metadata !6263, metadata !DIExpression()), !dbg !6272
  %82 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !6600
  %inside_of_loop = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %82, i64 0, i32 5, i32 1, !dbg !6600
  %83 = load i32, i32* %inside_of_loop, align 4, !dbg !6600
  %84 = load i32, i32* %inside_cost, align 4, !dbg !6601
  %add = add nsw i32 %84, %83, !dbg !6601
  store i32 %add, i32* %inside_cost, align 4, !dbg !6601
  %85 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !6602
  %outside_of_loop = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %85, i64 0, i32 5, i32 0, !dbg !6602
  %86 = load i32, i32* %outside_of_loop, align 4, !dbg !6602
  %87 = load i32, i32* %outside_cost, align 4, !dbg !6603
  %add319 = add nsw i32 %87, %86, !dbg !6603
  store i32 %add319, i32* %outside_cost, align 4, !dbg !6603
  %tobool320 = icmp eq i8 %stop_recursion.0.lcssa, 0, !dbg !6604
  br i1 %tobool320, label %if.end328, label %if.then321, !dbg !6606

if.then321:                                       ; preds = %for.end
  %tobool322 = icmp eq i8 %permutation.0.lcssa, 0, !dbg !6607
  br i1 %tobool322, label %cleanup365, label %if.then323, !dbg !6610

if.then323:                                       ; preds = %if.then321
  %88 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !6611
  %call324 = call fastcc %struct._slp_tree** @VEC_slp_tree_heap_safe_push(%struct.VEC_slp_tree_heap** %loads, %struct._slp_tree* %88) #8, !dbg !6611
  %89 = load i32, i32* %inside_cost, align 4, !dbg !6613
  %add326 = add i32 %89, %group_size, !dbg !6613
  store i32 %add326, i32* %inside_cost, align 4, !dbg !6613
  br label %cleanup365, !dbg !6614

if.end328:                                        ; preds = %for.end
  %90 = load i32, i32* %first_stmt_dt0, align 4, !dbg !6615
  call void @llvm.dbg.value(metadata i32 %90, metadata !6222, metadata !DIExpression()), !dbg !6272
  %cmp329 = icmp eq i32 %90, 3, !dbg !6616
  br i1 %cmp329, label %if.then331, label %if.end343, !dbg !6617

if.then331:                                       ; preds = %if.end328
  %91 = bitcast %struct._slp_tree** %left_node to i8*, !dbg !6618
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %91) #7, !dbg !6618
  %call332 = call i8* @xmalloc(i64 48) #6, !dbg !6619
  call void @llvm.dbg.value(metadata i8* %call332, metadata !6266, metadata !DIExpression()), !dbg !6620
  %92 = bitcast %struct._slp_tree** %left_node to i8**, !dbg !6621
  store i8* %call332, i8** %92, align 8, !dbg !6621
  %93 = bitcast %struct.VEC_gimple_heap** %def_stmts0 to i64*, !dbg !6622
  %94 = load i64, i64* %93, align 8, !dbg !6622
  call void @llvm.dbg.value(metadata i8* %call332, metadata !6266, metadata !DIExpression()), !dbg !6620
  %stmts333 = getelementptr inbounds i8, i8* %call332, i64 16, !dbg !6623
  %95 = bitcast i8* %stmts333 to i64*, !dbg !6624
  store i64 %94, i64* %95, align 8, !dbg !6624
  call void @llvm.dbg.value(metadata i8* %call332, metadata !6266, metadata !DIExpression()), !dbg !6620
  %vec_stmts = getelementptr inbounds i8, i8* %call332, i64 24, !dbg !6625
  %96 = bitcast i8* %vec_stmts to %struct.VEC_gimple_heap**, !dbg !6625
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %96, align 8, !dbg !6626
  call void @llvm.dbg.value(metadata i8* %call332, metadata !6266, metadata !DIExpression()), !dbg !6620
  %left = bitcast i8* %call332 to %struct._slp_tree**, !dbg !6627
  store %struct._slp_tree* null, %struct._slp_tree** %left, align 8, !dbg !6628
  %97 = load %struct._slp_tree*, %struct._slp_tree** %left_node, align 8, !dbg !6629
  call void @llvm.dbg.value(metadata %struct._slp_tree* %97, metadata !6266, metadata !DIExpression()), !dbg !6620
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %97, i64 0, i32 1, !dbg !6629
  store %struct._slp_tree* null, %struct._slp_tree** %right, align 8, !dbg !6630
  call void @llvm.dbg.value(metadata %struct._slp_tree* %97, metadata !6266, metadata !DIExpression()), !dbg !6620
  %outside_of_loop335 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %97, i64 0, i32 5, i32 0, !dbg !6631
  store i32 0, i32* %outside_of_loop335, align 4, !dbg !6632
  call void @llvm.dbg.value(metadata %struct._slp_tree* %97, metadata !6266, metadata !DIExpression()), !dbg !6620
  %inside_of_loop337 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %97, i64 0, i32 5, i32 1, !dbg !6633
  store i32 0, i32* %inside_of_loop337, align 4, !dbg !6634
  call void @llvm.dbg.value(metadata %struct._slp_tree** %left_node, metadata !6266, metadata !DIExpression(DW_OP_deref)), !dbg !6620
  %call338 = call fastcc zeroext i8 @vect_build_slp_tree(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %struct._slp_tree** nonnull %left_node, i32 %group_size, i32* %inside_cost, i32* %outside_cost, i32 %ncopies_for_cost, i32* %max_nunits, %struct.VEC_int_heap** %load_permutation, %struct.VEC_slp_tree_heap** %loads, i32 %vectorization_factor) #8, !dbg !6635
  %tobool339 = icmp eq i8 %call338, 0, !dbg !6635
  br i1 %tobool339, label %cleanup, label %if.end341, !dbg !6637

if.end341:                                        ; preds = %if.then331
  %98 = bitcast %struct._slp_tree** %left_node to i64*, !dbg !6638
  %99 = load i64, i64* %98, align 8, !dbg !6638
  %100 = bitcast %struct._slp_tree** %node to i64**, !dbg !6639
  %101 = load i64*, i64** %100, align 8, !dbg !6639
  store i64 %99, i64* %101, align 8, !dbg !6640
  br label %cleanup, !dbg !6641

cleanup:                                          ; preds = %if.then331, %if.end341
  %cleanup.dest.slot.0 = phi i1 [ true, %if.end341 ], [ false, %if.then331 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #7, !dbg !6641
  br i1 %cleanup.dest.slot.0, label %if.end343, label %cleanup365

if.end343:                                        ; preds = %cleanup, %if.end328
  %102 = load i32, i32* %first_stmt_dt1, align 4, !dbg !6642
  call void @llvm.dbg.value(metadata i32 %102, metadata !6223, metadata !DIExpression()), !dbg !6272
  %cmp344 = icmp eq i32 %102, 3, !dbg !6643
  br i1 %cmp344, label %if.then346, label %if.end364, !dbg !6644

if.then346:                                       ; preds = %if.end343
  %103 = bitcast %struct._slp_tree** %right_node to i8*, !dbg !6645
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %103) #7, !dbg !6645
  %call347 = call i8* @xmalloc(i64 48) #6, !dbg !6646
  call void @llvm.dbg.value(metadata i8* %call347, metadata !6269, metadata !DIExpression()), !dbg !6647
  %104 = bitcast %struct._slp_tree** %right_node to i8**, !dbg !6648
  store i8* %call347, i8** %104, align 8, !dbg !6648
  %105 = bitcast %struct.VEC_gimple_heap** %def_stmts1 to i64*, !dbg !6649
  %106 = load i64, i64* %105, align 8, !dbg !6649
  call void @llvm.dbg.value(metadata i8* %call347, metadata !6269, metadata !DIExpression()), !dbg !6647
  %stmts348 = getelementptr inbounds i8, i8* %call347, i64 16, !dbg !6650
  %107 = bitcast i8* %stmts348 to i64*, !dbg !6651
  store i64 %106, i64* %107, align 8, !dbg !6651
  call void @llvm.dbg.value(metadata i8* %call347, metadata !6269, metadata !DIExpression()), !dbg !6647
  %vec_stmts349 = getelementptr inbounds i8, i8* %call347, i64 24, !dbg !6652
  %108 = bitcast i8* %vec_stmts349 to %struct.VEC_gimple_heap**, !dbg !6652
  store %struct.VEC_gimple_heap* null, %struct.VEC_gimple_heap** %108, align 8, !dbg !6653
  call void @llvm.dbg.value(metadata i8* %call347, metadata !6269, metadata !DIExpression()), !dbg !6647
  %left350 = bitcast i8* %call347 to %struct._slp_tree**, !dbg !6654
  store %struct._slp_tree* null, %struct._slp_tree** %left350, align 8, !dbg !6655
  %109 = load %struct._slp_tree*, %struct._slp_tree** %right_node, align 8, !dbg !6656
  call void @llvm.dbg.value(metadata %struct._slp_tree* %109, metadata !6269, metadata !DIExpression()), !dbg !6647
  %right351 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %109, i64 0, i32 1, !dbg !6656
  store %struct._slp_tree* null, %struct._slp_tree** %right351, align 8, !dbg !6657
  call void @llvm.dbg.value(metadata %struct._slp_tree* %109, metadata !6269, metadata !DIExpression()), !dbg !6647
  %outside_of_loop353 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %109, i64 0, i32 5, i32 0, !dbg !6658
  store i32 0, i32* %outside_of_loop353, align 4, !dbg !6659
  call void @llvm.dbg.value(metadata %struct._slp_tree* %109, metadata !6269, metadata !DIExpression()), !dbg !6647
  %inside_of_loop355 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %109, i64 0, i32 5, i32 1, !dbg !6660
  store i32 0, i32* %inside_of_loop355, align 4, !dbg !6661
  call void @llvm.dbg.value(metadata %struct._slp_tree** %right_node, metadata !6269, metadata !DIExpression(DW_OP_deref)), !dbg !6647
  %call356 = call fastcc zeroext i8 @vect_build_slp_tree(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %struct._slp_tree** nonnull %right_node, i32 %group_size, i32* %inside_cost, i32* %outside_cost, i32 %ncopies_for_cost, i32* %max_nunits, %struct.VEC_int_heap** %load_permutation, %struct.VEC_slp_tree_heap** %loads, i32 %vectorization_factor) #8, !dbg !6662
  %tobool357 = icmp eq i8 %call356, 0, !dbg !6662
  br i1 %tobool357, label %cleanup361, label %if.end359, !dbg !6664

if.end359:                                        ; preds = %if.then346
  %110 = bitcast %struct._slp_tree** %right_node to i64*, !dbg !6665
  %111 = load i64, i64* %110, align 8, !dbg !6665
  %112 = load %struct._slp_tree*, %struct._slp_tree** %node, align 8, !dbg !6666
  %right360 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %112, i64 0, i32 1, !dbg !6666
  %113 = bitcast %struct._slp_tree** %right360 to i64*, !dbg !6667
  store i64 %111, i64* %113, align 8, !dbg !6667
  br label %cleanup361, !dbg !6668

cleanup361:                                       ; preds = %if.then346, %if.end359
  %cleanup.dest.slot.1 = phi i1 [ true, %if.end359 ], [ false, %if.then346 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %103) #7, !dbg !6668
  br i1 %cleanup.dest.slot.1, label %if.end364, label %cleanup365

if.end364:                                        ; preds = %cleanup361, %if.end343
  br label %cleanup365, !dbg !6669

cleanup365.loopexit:                              ; preds = %if.end312, %if.then218, %if.end41
  br label %cleanup365, !dbg !6670

cleanup365:                                       ; preds = %cleanup365.loopexit, %if.then16, %if.then117, %if.then104, %if.then184, %if.then197, %if.then242, %if.then252, %if.then268, %if.then289, %if.then305, %if.then26, %if.then321, %if.then323, %if.then308, %if.then292, %if.then271, %if.then255, %if.then245, %if.then200, %if.then187, %if.then120, %if.then107, %if.then29, %if.then19, %cleanup, %cleanup361, %if.end364
  %retval.3 = phi i8 [ 0, %cleanup ], [ 0, %cleanup361 ], [ 1, %if.end364 ], [ 0, %if.then19 ], [ 0, %if.then16 ], [ 0, %if.then29 ], [ 0, %if.then26 ], [ 0, %if.then107 ], [ 0, %if.then104 ], [ 0, %if.then120 ], [ 0, %if.then117 ], [ 0, %if.then187 ], [ 0, %if.then184 ], [ 0, %if.then200 ], [ 0, %if.then197 ], [ 0, %if.then245 ], [ 0, %if.then242 ], [ 0, %if.then255 ], [ 0, %if.then252 ], [ 0, %if.then271 ], [ 0, %if.then268 ], [ 0, %if.then292 ], [ 0, %if.then289 ], [ 0, %if.then308 ], [ 0, %if.then305 ], [ 1, %if.then323 ], [ 1, %if.then321 ], [ 0, %cleanup365.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #7, !dbg !6670
  call void @llvm.dbg.value(metadata i8* %pattern1, metadata !6261, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %pattern1) #7, !dbg !6670
  call void @llvm.dbg.value(metadata i8* %pattern0, metadata !6260, metadata !DIExpression(DW_OP_deref)), !dbg !6272
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %pattern0) #7, !dbg !6670
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7, !dbg !6670
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #7, !dbg !6670
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #7, !dbg !6670
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #7, !dbg !6670
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7, !dbg !6670
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #7, !dbg !6670
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !6670
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !6670
  ret i8 %retval.3, !dbg !6670
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_slp_tree_base_length(%struct.VEC_slp_tree_base* %vec_) unnamed_addr #0 !dbg !6671 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_base* %vec_, metadata !6675, metadata !DIExpression()), !dbg !6676
  %tobool = icmp eq %struct.VEC_slp_tree_base* %vec_, null, !dbg !6677
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6677

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %vec_, i64 0, i32 0, !dbg !6677
  %0 = load i32, i32* %num, align 8, !dbg !6677
  br label %cond.end, !dbg !6677

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !6677
  ret i32 %cond, !dbg !6677
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vect_supported_load_permutation_p(%struct._slp_instance* %slp_instn, i32 %group_size, %struct.VEC_int_heap* %load_permutation) unnamed_addr #5 !dbg !6678 {
entry:
  %next = alloca i32, align 4
  call void @llvm.dbg.value(metadata %struct._slp_instance* %slp_instn, metadata !6682, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %group_size, metadata !6683, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap* %load_permutation, metadata !6684, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 0, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 -1, metadata !6687, metadata !DIExpression()), !dbg !6702
  %0 = bitcast i32* %next to i8*, !dbg !6703
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #7, !dbg !6703
  %tobool = icmp eq %struct._slp_instance* %slp_instn, null, !dbg !6704
  br i1 %tobool, label %cleanup, label %if.end, !dbg !6706

if.end:                                           ; preds = %entry
  %call = tail call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6707
  %tobool1 = icmp eq i8 %call, 0, !dbg !6707
  br i1 %tobool1, label %if.end8, label %if.then2, !dbg !6709

if.then2:                                         ; preds = %if.end
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6710
  %call3 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.49, i64 0, i64 0)) #6, !dbg !6712
  call void @llvm.dbg.value(metadata i32 0, metadata !6685, metadata !DIExpression()), !dbg !6702
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %load_permutation, i64 0, i32 0, !dbg !6713
  br label %for.cond, !dbg !6716

for.cond:                                         ; preds = %for.body, %if.then2
  %i.0 = phi i32 [ 0, %if.then2 ], [ %inc, %for.body ], !dbg !6717
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32* %next, metadata !6688, metadata !DIExpression(DW_OP_deref)), !dbg !6702
  %call5 = call fastcc i32 @VEC_int_base_iterate(%struct.VEC_int_base* %base, i32 %i.0, i32* nonnull %next) #8, !dbg !6718
  %tobool6 = icmp eq i32 %call5, 0, !dbg !6719
  br i1 %tobool6, label %if.end8.loopexit, label %for.body, !dbg !6719

for.body:                                         ; preds = %for.cond
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6720
  %3 = load i32, i32* %next, align 4, !dbg !6721
  call void @llvm.dbg.value(metadata i32 %3, metadata !6688, metadata !DIExpression()), !dbg !6702
  %call7 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0), i32 %3) #6, !dbg !6722
  %inc = add nuw nsw i32 %i.0, 1, !dbg !6723
  call void @llvm.dbg.value(metadata i32 %inc, metadata !6685, metadata !DIExpression()), !dbg !6702
  br label %for.cond, !dbg !6724, !llvm.loop !6725

if.end8.loopexit:                                 ; preds = %for.cond
  %i.0.lcssa = phi i32 [ %i.0, %for.cond ], !dbg !6717
  call void @llvm.dbg.value(metadata i32 %i.0.lcssa, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.0.lcssa, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.0.lcssa, metadata !6685, metadata !DIExpression()), !dbg !6702
  br label %if.end8, !dbg !6727

if.end8:                                          ; preds = %if.end8.loopexit, %if.end
  %i.1 = phi i32 [ 0, %if.end ], [ %i.0.lcssa, %if.end8.loopexit ], !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.1, metadata !6685, metadata !DIExpression()), !dbg !6702
  %base11 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %load_permutation, i64 0, i32 0, !dbg !6727
  %call15 = call fastcc i32 @VEC_int_base_length(%struct.VEC_int_base* %base11) #8, !dbg !6727
  %mul = mul nsw i32 %group_size, %group_size, !dbg !6729
  %cmp = icmp eq i32 %call15, %mul, !dbg !6730
  br i1 %cmp, label %if.end17, label %cleanup, !dbg !6731

if.end17:                                         ; preds = %if.end8
  call void @llvm.dbg.value(metadata i8 1, metadata !6690, metadata !DIExpression()), !dbg !6702
  %call18 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %group_size) #6, !dbg !6732
  call void @llvm.dbg.value(metadata %struct.simple_bitmap_def* %call18, metadata !6691, metadata !DIExpression()), !dbg !6702
  call void @sbitmap_zero(%struct.simple_bitmap_def* %call18) #6, !dbg !6733
  call void @llvm.dbg.value(metadata i32 0, metadata !6686, metadata !DIExpression()), !dbg !6702
  br label %for.cond19, !dbg !6734

for.cond19:                                       ; preds = %if.end45, %if.end17
  %prev.0 = phi i32 [ -1, %if.end17 ], [ %prev.1.lcssa, %if.end45 ], !dbg !6736
  %j.0 = phi i32 [ 0, %if.end17 ], [ %inc47, %if.end45 ], !dbg !6737
  %i.2 = phi i32 [ %i.1, %if.end17 ], [ %i.3.lcssa, %if.end45 ], !dbg !6702
  %supported.0 = phi i8 [ 1, %if.end17 ], [ %supported.1, %if.end45 ], !dbg !6702
  call void @llvm.dbg.value(metadata i8 %supported.0, metadata !6690, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.2, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %j.0, metadata !6686, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %prev.0, metadata !6687, metadata !DIExpression()), !dbg !6702
  %cmp20 = icmp slt i32 %j.0, %group_size, !dbg !6738
  br i1 %cmp20, label %for.body21, label %for.end48, !dbg !6740

for.body21:                                       ; preds = %for.cond19
  %mul22 = mul nsw i32 %j.0, %group_size, !dbg !6741
  call void @llvm.dbg.value(metadata i32 %mul22, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 0, metadata !6689, metadata !DIExpression()), !dbg !6702
  br label %for.cond23, !dbg !6744

for.cond23:                                       ; preds = %if.end38, %for.body21
  %prev.1 = phi i32 [ %prev.0, %for.body21 ], [ %4, %if.end38 ], !dbg !6702
  %i.3 = phi i32 [ %mul22, %for.body21 ], [ %inc40, %if.end38 ], !dbg !6745
  %k.0 = phi i32 [ 0, %for.body21 ], [ %inc41, %if.end38 ], !dbg !6745
  call void @llvm.dbg.value(metadata i32 %k.0, metadata !6689, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.3, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %prev.1, metadata !6687, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32* %next, metadata !6688, metadata !DIExpression(DW_OP_deref)), !dbg !6702
  %call30 = call fastcc i32 @VEC_int_base_iterate(%struct.VEC_int_base* %base11, i32 %i.3, i32* nonnull %next) #8, !dbg !6746
  %tobool31 = icmp ne i32 %call30, 0, !dbg !6746
  %cmp32 = icmp slt i32 %k.0, %group_size, !dbg !6748
  %spec.select = and i1 %cmp32, %tobool31, !dbg !6749
  br i1 %spec.select, label %for.body33, label %for.end42, !dbg !6750

for.body33:                                       ; preds = %for.cond23
  %cmp35 = icmp ne i32 %i.3, %mul22, !dbg !6751
  %4 = load i32, i32* %next, align 4, !dbg !6754
  call void @llvm.dbg.value(metadata i32 %4, metadata !6688, metadata !DIExpression()), !dbg !6702
  %cmp36 = icmp ne i32 %4, %prev.1, !dbg !6755
  %or.cond = and i1 %cmp35, %cmp36, !dbg !6756
  br i1 %or.cond, label %for.end42, label %if.end38, !dbg !6756

if.end38:                                         ; preds = %for.body33
  call void @llvm.dbg.value(metadata i32 %4, metadata !6688, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %4, metadata !6687, metadata !DIExpression()), !dbg !6702
  %inc40 = add nsw i32 %i.3, 1, !dbg !6757
  call void @llvm.dbg.value(metadata i32 %inc40, metadata !6685, metadata !DIExpression()), !dbg !6702
  %inc41 = add nuw nsw i32 %k.0, 1, !dbg !6758
  call void @llvm.dbg.value(metadata i32 %inc41, metadata !6689, metadata !DIExpression()), !dbg !6702
  br label %for.cond23, !dbg !6759, !llvm.loop !6760

for.end42:                                        ; preds = %for.body33, %for.cond23
  %prev.1.lcssa = phi i32 [ %prev.1, %for.body33 ], [ %prev.1, %for.cond23 ], !dbg !6702
  %i.3.lcssa = phi i32 [ %i.3, %for.body33 ], [ %i.3, %for.cond23 ], !dbg !6745
  %supported.1 = phi i8 [ %supported.0, %for.cond23 ], [ 0, %for.body33 ], !dbg !6702
  call void @llvm.dbg.value(metadata i32 %prev.1.lcssa, metadata !6687, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %prev.1.lcssa, metadata !6687, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.3.lcssa, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.3.lcssa, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %prev.1.lcssa, metadata !6687, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %prev.1.lcssa, metadata !6687, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.3.lcssa, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.3.lcssa, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %prev.1.lcssa, metadata !6687, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %prev.1.lcssa, metadata !6687, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.3.lcssa, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.3.lcssa, metadata !6685, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i8 %supported.1, metadata !6690, metadata !DIExpression()), !dbg !6702
  %div = lshr i32 %prev.1.lcssa, 6, !dbg !6762
  %idxprom = zext i32 %div to i64, !dbg !6762
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %call18, i64 0, i32 3, i64 %idxprom, !dbg !6762
  %5 = load i64, i64* %arrayidx, align 8, !dbg !6762
  %rem = and i32 %prev.1.lcssa, 63, !dbg !6762
  %sh_prom = zext i32 %rem to i64, !dbg !6762
  %6 = shl i64 1, %sh_prom, !dbg !6762
  %7 = and i64 %5, %6, !dbg !6762
  %tobool43 = icmp eq i64 %7, 0, !dbg !6762
  br i1 %tobool43, label %if.end45, label %for.end48, !dbg !6764

if.end45:                                         ; preds = %for.end42
  call fastcc void @SET_BIT(%struct.simple_bitmap_def* %call18, i32 %prev.1.lcssa) #8, !dbg !6765
  %inc47 = add nuw nsw i32 %j.0, 1, !dbg !6766
  call void @llvm.dbg.value(metadata i32 %inc47, metadata !6686, metadata !DIExpression()), !dbg !6702
  br label %for.cond19, !dbg !6767, !llvm.loop !6768

for.end48:                                        ; preds = %for.end42, %for.cond19
  %i.4 = phi i32 [ %i.2, %for.cond19 ], [ %i.3.lcssa, %for.end42 ], !dbg !6702
  %supported.2 = phi i8 [ %supported.0, %for.cond19 ], [ 0, %for.end42 ], !dbg !6702
  call void @llvm.dbg.value(metadata i8 %supported.2, metadata !6690, metadata !DIExpression()), !dbg !6702
  call void @llvm.dbg.value(metadata i32 %i.4, metadata !6685, metadata !DIExpression()), !dbg !6702
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %call18, i64 0, i32 0, !dbg !6770
  %8 = load i8*, i8** %popcount, align 8, !dbg !6770
  call void @free(i8* %8) #6, !dbg !6770
  %9 = bitcast %struct.simple_bitmap_def* %call18 to i8*, !dbg !6770
  call void @free(i8* %9) #6, !dbg !6770
  %tobool49 = icmp ne i8 %supported.2, 0, !dbg !6771
  %cmp52 = icmp eq i32 %i.4, %call15, !dbg !6773
  %or.cond1 = and i1 %tobool49, %cmp52, !dbg !6774
  br i1 %or.cond1, label %land.lhs.true54, label %if.end59, !dbg !6774

land.lhs.true54:                                  ; preds = %for.end48
  %call55 = call fastcc zeroext i8 @vect_supported_slp_permutation_p(%struct._slp_instance* nonnull %slp_instn) #8, !dbg !6775
  %tobool57 = icmp eq i8 %call55, 0, !dbg !6775
  br i1 %tobool57, label %if.end59, label %cleanup, !dbg !6776

if.end59:                                         ; preds = %land.lhs.true54, %for.end48
  br label %cleanup, !dbg !6777

cleanup:                                          ; preds = %land.lhs.true54, %if.end8, %entry, %if.end59
  %retval.0 = phi i8 [ 0, %if.end59 ], [ 0, %entry ], [ 0, %if.end8 ], [ 1, %land.lhs.true54 ], !dbg !6702
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #7, !dbg !6778
  ret i8 %retval.0, !dbg !6778
}

; Function Attrs: nounwind uwtable
define internal fastcc %union.gimple_statement_d* @vect_find_first_load_in_slp_instance(%struct._slp_instance* %instance) unnamed_addr #5 !dbg !6779 {
entry:
  %load_node = alloca %struct._slp_tree*, align 8
  %load = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.value(metadata %struct._slp_instance* %instance, metadata !6783, metadata !DIExpression()), !dbg !6789
  %0 = bitcast %struct._slp_tree** %load_node to i8*, !dbg !6790
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !6790
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* null, metadata !6787, metadata !DIExpression()), !dbg !6789
  %1 = bitcast %union.gimple_statement_d** %load to i8*, !dbg !6791
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !6791
  call void @llvm.dbg.value(metadata i32 0, metadata !6784, metadata !DIExpression()), !dbg !6789
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 5, !dbg !6792
  br label %for.cond, !dbg !6795

for.cond:                                         ; preds = %for.inc15, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc16, %for.inc15 ], !dbg !6796
  %first_load.0 = phi %union.gimple_statement_d* [ null, %entry ], [ %first_load.1.lcssa, %for.inc15 ], !dbg !6797
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %first_load.0, metadata !6787, metadata !DIExpression()), !dbg !6789
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !6784, metadata !DIExpression()), !dbg !6789
  %2 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !6798
  %tobool = icmp eq %struct.VEC_slp_tree_heap* %2, null, !dbg !6798
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6798

cond.true:                                        ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %2, i64 0, i32 0, !dbg !6798
  br label %cond.end, !dbg !6798

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %for.cond ], !dbg !6798
  call void @llvm.dbg.value(metadata %struct._slp_tree** %load_node, metadata !6786, metadata !DIExpression(DW_OP_deref)), !dbg !6789
  %call = call fastcc i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %cond, i32 %i.0, %struct._slp_tree** nonnull %load_node) #8, !dbg !6798
  %tobool2 = icmp eq i32 %call, 0, !dbg !6799
  br i1 %tobool2, label %for.end17, label %for.cond3.preheader, !dbg !6799

for.cond3.preheader:                              ; preds = %cond.end
  br label %for.cond3, !dbg !6800

for.cond3:                                        ; preds = %for.cond3.preheader, %for.body13
  %j.0 = phi i32 [ %inc, %for.body13 ], [ 0, %for.cond3.preheader ], !dbg !6802
  %first_load.1 = phi %union.gimple_statement_d* [ %call14, %for.body13 ], [ %first_load.0, %for.cond3.preheader ], !dbg !6789
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %first_load.1, metadata !6787, metadata !DIExpression()), !dbg !6789
  call void @llvm.dbg.value(metadata i32 %j.0, metadata !6785, metadata !DIExpression()), !dbg !6789
  %3 = load %struct._slp_tree*, %struct._slp_tree** %load_node, align 8, !dbg !6803
  call void @llvm.dbg.value(metadata %struct._slp_tree* %3, metadata !6786, metadata !DIExpression()), !dbg !6789
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %3, i64 0, i32 2, !dbg !6803
  %4 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6803
  %tobool4 = icmp eq %struct.VEC_gimple_heap* %4, null, !dbg !6803
  br i1 %tobool4, label %cond.end9, label %cond.true5, !dbg !6803

cond.true5:                                       ; preds = %for.cond3
  call void @llvm.dbg.value(metadata %struct._slp_tree* %3, metadata !6786, metadata !DIExpression()), !dbg !6789
  %base7 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %4, i64 0, i32 0, !dbg !6803
  br label %cond.end9, !dbg !6803

cond.end9:                                        ; preds = %for.cond3, %cond.true5
  %cond10 = phi %struct.VEC_gimple_base* [ %base7, %cond.true5 ], [ null, %for.cond3 ], !dbg !6803
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %load, metadata !6788, metadata !DIExpression(DW_OP_deref)), !dbg !6789
  %call11 = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond10, i32 %j.0, %union.gimple_statement_d** nonnull %load) #8, !dbg !6803
  %tobool12 = icmp eq i32 %call11, 0, !dbg !6800
  br i1 %tobool12, label %for.inc15, label %for.body13, !dbg !6800

for.body13:                                       ; preds = %cond.end9
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %load, align 8, !dbg !6805
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %5, metadata !6788, metadata !DIExpression()), !dbg !6789
  %call14 = call fastcc %union.gimple_statement_d* @get_earlier_stmt(%union.gimple_statement_d* %5, %union.gimple_statement_d* %first_load.1) #8, !dbg !6806
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call14, metadata !6787, metadata !DIExpression()), !dbg !6789
  %inc = add nuw nsw i32 %j.0, 1, !dbg !6807
  call void @llvm.dbg.value(metadata i32 %inc, metadata !6785, metadata !DIExpression()), !dbg !6789
  br label %for.cond3, !dbg !6808, !llvm.loop !6809

for.inc15:                                        ; preds = %cond.end9
  %first_load.1.lcssa = phi %union.gimple_statement_d* [ %first_load.1, %cond.end9 ], !dbg !6789
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %first_load.1.lcssa, metadata !6787, metadata !DIExpression()), !dbg !6789
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %first_load.1.lcssa, metadata !6787, metadata !DIExpression()), !dbg !6789
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %first_load.1.lcssa, metadata !6787, metadata !DIExpression()), !dbg !6789
  %inc16 = add nuw nsw i32 %i.0, 1, !dbg !6811
  call void @llvm.dbg.value(metadata i32 %inc16, metadata !6784, metadata !DIExpression()), !dbg !6789
  br label %for.cond, !dbg !6812, !llvm.loop !6813

for.end17:                                        ; preds = %cond.end
  %first_load.0.lcssa = phi %union.gimple_statement_d* [ %first_load.0, %cond.end ], !dbg !6797
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %first_load.0.lcssa, metadata !6787, metadata !DIExpression()), !dbg !6789
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %first_load.0.lcssa, metadata !6787, metadata !DIExpression()), !dbg !6789
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %first_load.0.lcssa, metadata !6787, metadata !DIExpression()), !dbg !6789
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !6815
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !6815
  ret %union.gimple_statement_d* %first_load.0.lcssa, !dbg !6816
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct._slp_instance** @VEC_slp_instance_heap_safe_push(%struct.VEC_slp_instance_heap** %vec_, %struct._slp_instance* %obj_) unnamed_addr #0 !dbg !6817 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_heap** %vec_, metadata !6822, metadata !DIExpression()), !dbg !6824
  call void @llvm.dbg.value(metadata %struct._slp_instance* %obj_, metadata !6823, metadata !DIExpression()), !dbg !6824
  %call = tail call fastcc i32 @VEC_slp_instance_heap_reserve(%struct.VEC_slp_instance_heap** %vec_, i32 1) #8, !dbg !6825
  %0 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %vec_, align 8, !dbg !6825
  %tobool = icmp eq %struct.VEC_slp_instance_heap* %0, null, !dbg !6825
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6825

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %0, i64 0, i32 0, !dbg !6825
  br label %cond.end, !dbg !6825

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_slp_instance_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6825
  %call1 = tail call fastcc %struct._slp_instance** @VEC_slp_instance_base_quick_push(%struct.VEC_slp_instance_base* %cond, %struct._slp_instance* %obj_) #8, !dbg !6825
  ret %struct._slp_instance** %call1, !dbg !6825
}

; Function Attrs: nounwind uwtable
define internal fastcc void @vect_print_slp_tree(%struct._slp_tree* %node) unnamed_addr #5 !dbg !6826 {
entry:
  %stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.value(metadata %struct._slp_tree* %node, metadata !6828, metadata !DIExpression()), !dbg !6831
  %0 = bitcast %union.gimple_statement_d** %stmt to i8*, !dbg !6832
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !6832
  %tobool = icmp eq %struct._slp_tree* %node, null, !dbg !6833
  br i1 %tobool, label %cleanup, label %if.end, !dbg !6835

if.end:                                           ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6836
  %call = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.53, i64 0, i64 0)) #6, !dbg !6837
  call void @llvm.dbg.value(metadata i32 0, metadata !6829, metadata !DIExpression()), !dbg !6831
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 2, !dbg !6838
  br label %for.cond, !dbg !6841

for.cond:                                         ; preds = %for.body, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc, %for.body ], !dbg !6842
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !6829, metadata !DIExpression()), !dbg !6831
  %2 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6843
  %tobool1 = icmp eq %struct.VEC_gimple_heap* %2, null, !dbg !6843
  br i1 %tobool1, label %cond.end, label %cond.true, !dbg !6843

cond.true:                                        ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %2, i64 0, i32 0, !dbg !6843
  br label %cond.end, !dbg !6843

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %for.cond ], !dbg !6843
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !6830, metadata !DIExpression(DW_OP_deref)), !dbg !6831
  %call3 = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %i.0, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !6843
  %tobool4 = icmp eq i32 %call3, 0, !dbg !6844
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6831
  br i1 %tobool4, label %for.end, label %for.body, !dbg !6844

for.body:                                         ; preds = %cond.end
  %call5 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.54, i64 0, i64 0), i32 %i.0) #6, !dbg !6845
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6847
  %5 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !6848
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %5, metadata !6830, metadata !DIExpression()), !dbg !6831
  call void @print_gimple_stmt(%struct._IO_FILE* %4, %union.gimple_statement_d* %5, i32 0, i32 2) #6, !dbg !6849
  %inc = add nuw nsw i32 %i.0, 1, !dbg !6850
  call void @llvm.dbg.value(metadata i32 %inc, metadata !6829, metadata !DIExpression()), !dbg !6831
  br label %for.cond, !dbg !6851, !llvm.loop !6852

for.end:                                          ; preds = %cond.end
  %.lcssa = phi %struct._IO_FILE* [ %3, %cond.end ], !dbg !6831
  %call6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %.lcssa, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i64 0, i64 0)) #6, !dbg !6854
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 0, !dbg !6855
  %6 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !6855
  call fastcc void @vect_print_slp_tree(%struct._slp_tree* %6) #8, !dbg !6856
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 1, !dbg !6857
  %7 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !6857
  call fastcc void @vect_print_slp_tree(%struct._slp_tree* %7) #8, !dbg !6858
  br label %cleanup, !dbg !6859

cleanup:                                          ; preds = %entry, %for.end
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !6859
  ret void, !dbg !6859
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_heap_reserve(%struct.VEC_gimple_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !6860 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %vec_, metadata !6864, metadata !DIExpression()), !dbg !6867
  call void @llvm.dbg.value(metadata i32 1, metadata !6865, metadata !DIExpression()), !dbg !6867
  %0 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %vec_, align 8, !dbg !6868
  %tobool = icmp eq %struct.VEC_gimple_heap* %0, null, !dbg !6868
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6868

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %0, i64 0, i32 0, !dbg !6868
  br label %cond.end, !dbg !6868

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6868
  %call = tail call fastcc i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %cond, i32 1) #8, !dbg !6868
  %tobool1 = icmp eq i32 %call, 0, !dbg !6868
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !6868
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !6866, metadata !DIExpression()), !dbg !6867
  br i1 %tobool1, label %if.then, label %if.end, !dbg !6868

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_gimple_heap** %vec_ to i8**, !dbg !6869
  %2 = load i8*, i8** %1, align 8, !dbg !6869
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %2, i32 1) #6, !dbg !6869
  store i8* %call3, i8** %1, align 8, !dbg !6869
  br label %if.end, !dbg !6869

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !6868
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d** @VEC_gimple_base_quick_push(%struct.VEC_gimple_base* %vec_, %union.gimple_statement_d* %obj_) unnamed_addr #0 !dbg !6871 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !6876, metadata !DIExpression()), !dbg !6879
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %obj_, metadata !6877, metadata !DIExpression()), !dbg !6879
  %num1 = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !6880
  %0 = load i32, i32* %num1, align 8, !dbg !6880
  %inc = add i32 %0, 1, !dbg !6880
  store i32 %inc, i32* %num1, align 8, !dbg !6880
  %idxprom = zext i32 %0 to i64, !dbg !6880
  %arrayidx = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !6880
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %arrayidx, metadata !6878, metadata !DIExpression()), !dbg !6879
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %arrayidx, align 8, !dbg !6880
  ret %union.gimple_statement_d** %arrayidx, !dbg !6880
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_base_space(%struct.VEC_gimple_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !6881 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !6885, metadata !DIExpression()), !dbg !6887
  call void @llvm.dbg.value(metadata i32 1, metadata !6886, metadata !DIExpression()), !dbg !6887
  %tobool = icmp eq %struct.VEC_gimple_base* %vec_, null, !dbg !6888
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !6888

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 1, !dbg !6888
  %0 = load i32, i32* %alloc, align 4, !dbg !6888
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !6888
  %1 = load i32, i32* %num, align 8, !dbg !6888
  %cmp1 = icmp ne i32 %0, %1, !dbg !6888
  %phitmp = zext i1 %cmp1 to i32, !dbg !6888
  br label %cond.end, !dbg !6888

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6888

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !6888
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) local_unnamed_addr #2

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) local_unnamed_addr #2

declare dso_local %union.tree_node* @gimple_get_lhs(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6889 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6891, metadata !DIExpression()), !dbg !6892
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !6893
  %cmp = icmp eq i32 %call, 8, !dbg !6894
  %conv1 = zext i1 %cmp to i8, !dbg !6893
  ret i8 %conv1, !dbg !6895
}

declare dso_local i32 @vector_type_mode(%union.tree_node*) local_unnamed_addr #2

declare dso_local %struct.optab_d* @optab_for_tree_code(i32, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs2(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !6896 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !6900, metadata !DIExpression()), !dbg !6901
  %call = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #8, !dbg !6902
  %cmp = icmp ugt i32 %call, 2, !dbg !6904
  br i1 %cmp, label %if.then, label %return, !dbg !6905

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 2) #8, !dbg !6906
  br label %return, !dbg !6907

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %call1, %if.then ], [ null, %entry ], !dbg !6908
  ret %union.tree_node* %retval.0, !dbg !6909
}

declare dso_local i32 @operand_equal_p(%union.tree_node*, %union.tree_node*, i32) local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vect_get_and_check_slp_defs(%struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %struct._slp_tree* %slp_node, %union.gimple_statement_d* %stmt, %struct.VEC_gimple_heap** %def_stmts0, %struct.VEC_gimple_heap** %def_stmts1, i32* %first_stmt_dt0, i32* %first_stmt_dt1, %union.tree_node** %first_stmt_def0_type, %union.tree_node** %first_stmt_def1_type, %union.tree_node** %first_stmt_const_oprnd, i32 %ncopies_for_cost, i8* %pattern0, i8* %pattern1) unnamed_addr #5 !dbg !6910 {
entry:
  %def = alloca %union.tree_node*, align 8
  %def_stmt = alloca %union.gimple_statement_d*, align 8
  %dt = alloca i64, align 8
  %tmpcast = bitcast i64* %dt to [2 x i32]*
  call void @llvm.dbg.value(metadata %struct._loop_vec_info* %loop_vinfo, metadata !6915, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %bb_vinfo, metadata !6916, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata %struct._slp_tree* %slp_node, metadata !6917, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !6918, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %def_stmts0, metadata !6919, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_heap** %def_stmts1, metadata !6920, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata i32* %first_stmt_dt0, metadata !6921, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata i32* %first_stmt_dt1, metadata !6922, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata %union.tree_node** %first_stmt_def0_type, metadata !6923, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata %union.tree_node** %first_stmt_def1_type, metadata !6924, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata %union.tree_node** %first_stmt_const_oprnd, metadata !6925, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata i32 %ncopies_for_cost, metadata !6926, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata i8* %pattern0, metadata !6927, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata i8* %pattern1, metadata !6928, metadata !DIExpression()), !dbg !6939
  %0 = bitcast %union.tree_node** %def to i8*, !dbg !6940
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !6940
  %1 = bitcast %union.gimple_statement_d** %def_stmt to i8*, !dbg !6941
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #7, !dbg !6941
  %2 = bitcast i64* %dt to i8*, !dbg !6942
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #7, !dbg !6942
  call void @llvm.dbg.declare(metadata [2 x i32]* %tmpcast, metadata !6934, metadata !DIExpression()), !dbg !6943
  store i64 34359738376, i64* %dt, align 8, !dbg !6943
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %slp_node, i64 0, i32 2, !dbg !6944
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !6944
  %tobool = icmp eq %struct.VEC_gimple_heap* %3, null, !dbg !6944
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !6944

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i64 0, i32 0, !dbg !6944
  br label %cond.end, !dbg !6944

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %entry ], !dbg !6944
  %call = tail call fastcc %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond, i32 0) #8, !dbg !6944
  %call2 = tail call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %call) #8, !dbg !6945
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call2, metadata !6936, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata %struct.loop* null, metadata !6938, metadata !DIExpression()), !dbg !6939
  %tobool3 = icmp eq %struct._loop_vec_info* %loop_vinfo, null, !dbg !6946
  br i1 %tobool3, label %if.end, label %if.then, !dbg !6948

if.then:                                          ; preds = %cond.end
  %loop4 = getelementptr inbounds %struct._loop_vec_info, %struct._loop_vec_info* %loop_vinfo, i64 0, i32 0, !dbg !6949
  %4 = load %struct.loop*, %struct.loop** %loop4, align 8, !dbg !6949
  call void @llvm.dbg.value(metadata %struct.loop* %4, metadata !6938, metadata !DIExpression()), !dbg !6939
  br label %if.end, !dbg !6950

if.end:                                           ; preds = %cond.end, %if.then
  %loop.0 = phi %struct.loop* [ %4, %if.then ], [ null, %cond.end ], !dbg !6939
  call void @llvm.dbg.value(metadata %struct.loop* %loop.0, metadata !6938, metadata !DIExpression()), !dbg !6939
  %call5 = tail call fastcc i32 @gimple_assign_rhs_code(%union.gimple_statement_d* %stmt) #8, !dbg !6951
  %call6 = tail call fastcc i32 @get_gimple_rhs_class(i32 %call5) #8, !dbg !6952
  call void @llvm.dbg.value(metadata i32 %call6, metadata !6937, metadata !DIExpression()), !dbg !6939
  %call7 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %stmt) #8, !dbg !6953
  %sub = add i32 %call7, -1, !dbg !6954
  call void @llvm.dbg.value(metadata i32 %sub, metadata !6931, metadata !DIExpression()), !dbg !6939
  call void @llvm.dbg.value(metadata i32 0, metadata !6930, metadata !DIExpression()), !dbg !6939
  %tobool22 = icmp ne %struct.loop* %loop.0, null, !dbg !6955
  %5 = bitcast %union.gimple_statement_d** %def_stmt to i64*, !dbg !6960
  %arraydecay = bitcast i64* %dt to i32*, !dbg !6962
  %6 = bitcast %union.tree_node** %first_stmt_const_oprnd to %struct.tree_common**, !dbg !6964
  %7 = bitcast %union.tree_node** %first_stmt_def1_type to i64*, !dbg !6970
  %8 = bitcast %union.tree_node** %first_stmt_def0_type to i64*, !dbg !6973
  %cmp97 = icmp eq i32 %call6, 3, !dbg !6976
  %wide.trip.count = zext i32 %sub to i64, !dbg !6978
  br label %for.cond, !dbg !6979

for.cond:                                         ; preds = %for.inc, %if.end
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc ], [ 0, %if.end ], !dbg !6980
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !6930, metadata !DIExpression()), !dbg !6939
  %exitcond = icmp eq i64 %indvars.iv, %wide.trip.count, !dbg !6978
  br i1 %exitcond, label %cleanup.loopexit, label %for.body, !dbg !6981

for.body:                                         ; preds = %for.cond
  %9 = trunc i64 %indvars.iv to i32, !dbg !6982
  %add = add i32 %9, 1, !dbg !6982
  %call8 = call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %stmt, i32 %add) #8, !dbg !6983
  call void @llvm.dbg.value(metadata %union.tree_node* %call8, metadata !6929, metadata !DIExpression()), !dbg !6939
  %arrayidx = getelementptr inbounds [2 x i32], [2 x i32]* %tmpcast, i64 0, i64 %indvars.iv, !dbg !6984
  call void @llvm.dbg.value(metadata %union.tree_node** %def, metadata !6932, metadata !DIExpression(DW_OP_deref)), !dbg !6939
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %def_stmt, metadata !6933, metadata !DIExpression(DW_OP_deref)), !dbg !6939
  %call9 = call zeroext i8 @vect_is_simple_use(%union.tree_node* %call8, %struct._loop_vec_info* %loop_vinfo, %struct._bb_vec_info* %bb_vinfo, %union.gimple_statement_d** nonnull %def_stmt, %union.tree_node** nonnull %def, i32* nonnull %arrayidx) #6, !dbg !6986
  %tobool10 = icmp eq i8 %call9, 0, !dbg !6986
  br i1 %tobool10, label %if.then15, label %lor.lhs.false, !dbg !6987

lor.lhs.false:                                    ; preds = %for.body
  %10 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !6988
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %10, metadata !6933, metadata !DIExpression()), !dbg !6939
  %tobool11 = icmp eq %union.gimple_statement_d* %10, null, !dbg !6988
  br i1 %tobool11, label %land.lhs.true, label %if.end21, !dbg !6989

land.lhs.true:                                    ; preds = %lor.lhs.false
  %11 = load i32, i32* %arrayidx, align 4, !dbg !6990
  %cmp14 = icmp eq i32 %11, 1, !dbg !6991
  br i1 %cmp14, label %if.end21, label %if.then15, !dbg !6992

if.then15:                                        ; preds = %land.lhs.true, %for.body
  %call8.lcssa = phi %union.tree_node* [ %call8, %land.lhs.true ], [ %call8, %for.body ], !dbg !6983
  %call16 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !6993
  %tobool17 = icmp eq i8 %call16, 0, !dbg !6993
  br i1 %tobool17, label %cleanup, label %if.then18, !dbg !6996

if.then18:                                        ; preds = %if.then15
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !6997
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.42, i64 0, i64 0)) #6, !dbg !6999
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7000
  call void @print_generic_expr(%struct._IO_FILE* %13, %union.tree_node* %call8.lcssa, i32 2) #6, !dbg !7001
  br label %cleanup, !dbg !7002

if.end21:                                         ; preds = %land.lhs.true, %lor.lhs.false
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %10, metadata !6933, metadata !DIExpression()), !dbg !6939
  %tobool24 = icmp ne %union.gimple_statement_d* %10, null, !dbg !7003
  %or.cond = and i1 %tobool22, %tobool24, !dbg !7004
  br i1 %or.cond, label %land.lhs.true25, label %if.end88, !dbg !7004

land.lhs.true25:                                  ; preds = %if.end21
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %10, metadata !6933, metadata !DIExpression()), !dbg !6939
  %call26 = call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* nonnull %10) #8, !dbg !7005
  %tobool27 = icmp eq %struct.basic_block_def* %call26, null, !dbg !7005
  br i1 %tobool27, label %if.end88, label %land.lhs.true28, !dbg !7006

land.lhs.true28:                                  ; preds = %land.lhs.true25
  %14 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7007
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %14, metadata !6933, metadata !DIExpression()), !dbg !6939
  %call29 = call fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %14) #8, !dbg !7008
  %call30 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* nonnull %loop.0, %struct.basic_block_def* %call29) #6, !dbg !7009
  %tobool31 = icmp eq i8 %call30, 0, !dbg !7009
  br i1 %tobool31, label %if.end88, label %land.lhs.true32, !dbg !7010

land.lhs.true32:                                  ; preds = %land.lhs.true28
  %15 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7011
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %15, metadata !6933, metadata !DIExpression()), !dbg !6939
  %call33 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %15) #8, !dbg !7012
  %tobool34 = icmp eq %struct._stmt_vec_info* %call33, null, !dbg !7012
  br i1 %tobool34, label %if.end88, label %land.lhs.true35, !dbg !7013

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %16 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7014
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %16, metadata !6933, metadata !DIExpression()), !dbg !6939
  %call36 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %16) #8, !dbg !7014
  %in_pattern_p = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call36, i64 0, i32 13, !dbg !7014
  %17 = load i8, i8* %in_pattern_p, align 8, !dbg !7014
  %tobool38 = icmp eq i8 %17, 0, !dbg !7014
  br i1 %tobool38, label %if.end88, label %if.then39, !dbg !7015

if.then39:                                        ; preds = %land.lhs.true35
  %18 = load i32, i32* %first_stmt_dt0, align 4, !dbg !7016
  %tobool40 = icmp eq i32 %18, 0, !dbg !7016
  br i1 %tobool40, label %if.then41, label %if.else, !dbg !7018

if.then41:                                        ; preds = %if.then39
  store i8 1, i8* %pattern0, align 1, !dbg !7019
  br label %if.end65, !dbg !7020

if.else:                                          ; preds = %if.then39
  %19 = trunc i64 %indvars.iv to i32, !dbg !7021
  switch i32 %19, label %if.end65 [
    i32 1, label %land.lhs.true44
    i32 0, label %land.lhs.true50
  ], !dbg !7021

land.lhs.true44:                                  ; preds = %if.else
  %20 = load i32, i32* %first_stmt_dt1, align 4, !dbg !7024
  %tobool45 = icmp eq i32 %20, 0, !dbg !7024
  br i1 %tobool45, label %if.then46, label %if.else47, !dbg !7025

if.then46:                                        ; preds = %land.lhs.true44
  store i8 1, i8* %pattern1, align 1, !dbg !7026
  br label %if.end65, !dbg !7027

if.else47:                                        ; preds = %land.lhs.true44
  switch i1 true, label %if.end65 [
    i1 false, label %land.lhs.true50
    i1 true, label %land.lhs.true55
  ], !dbg !7028

land.lhs.true50:                                  ; preds = %if.else, %if.else47
  %21 = load i8, i8* %pattern0, align 1, !dbg !7030
  %tobool51 = icmp eq i8 %21, 0, !dbg !7030
  br i1 %tobool51, label %if.then57, label %lor.lhs.false52, !dbg !7031

lor.lhs.false52:                                  ; preds = %land.lhs.true50
  %cmp53 = icmp eq i64 %indvars.iv, 1, !dbg !7032
  br i1 %cmp53, label %land.lhs.true55, label %if.end65, !dbg !7033

land.lhs.true55:                                  ; preds = %if.else47, %lor.lhs.false52
  %22 = load i8, i8* %pattern1, align 1, !dbg !7034
  %tobool56 = icmp eq i8 %22, 0, !dbg !7034
  br i1 %tobool56, label %if.then57, label %if.end65, !dbg !7035

if.then57:                                        ; preds = %land.lhs.true55, %land.lhs.true50
  %call8.lcssa16 = phi %union.tree_node* [ %call8, %land.lhs.true55 ], [ %call8, %land.lhs.true50 ], !dbg !6983
  %call58 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !7036
  %tobool59 = icmp eq i8 %call58, 0, !dbg !7036
  br i1 %tobool59, label %cleanup, label %if.then60, !dbg !7039

if.then60:                                        ; preds = %if.then57
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7040
  %call61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.43, i64 0, i64 0)) #6, !dbg !7042
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7043
  call void @print_generic_expr(%struct._IO_FILE* %24, %union.tree_node* %call8.lcssa16, i32 2) #6, !dbg !7044
  br label %cleanup, !dbg !7045

if.end65:                                         ; preds = %land.lhs.true55, %if.then46, %if.else, %if.else47, %lor.lhs.false52, %if.then41
  %25 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7046
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %25, metadata !6933, metadata !DIExpression()), !dbg !6939
  %call66 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %25) #8, !dbg !7046
  %related_stmt = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call66, i64 0, i32 14, !dbg !7046
  %26 = bitcast %union.gimple_statement_d** %related_stmt to i64*, !dbg !7046
  %27 = load i64, i64* %26, align 8, !dbg !7046
  store i64 %27, i64* %5, align 8, !dbg !7047
  %.cast = inttoptr i64 %27 to %union.gimple_statement_d*, !dbg !7048
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %.cast, metadata !6933, metadata !DIExpression()), !dbg !6939
  %call67 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %.cast) #8, !dbg !7048
  %def_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call67, i64 0, i32 16, !dbg !7048
  %28 = load i32, i32* %def_type, align 8, !dbg !7048
  store i32 %28, i32* %arrayidx, align 4, !dbg !7049
  %29 = load i32, i32* %arraydecay, align 8, !dbg !7050
  %cmp70 = icmp eq i32 %29, 8, !dbg !7051
  br i1 %cmp70, label %if.then72, label %if.end78, !dbg !7052

if.then72:                                        ; preds = %if.end65
  %call73 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !7053
  %tobool74 = icmp eq i8 %call73, 0, !dbg !7053
  br i1 %tobool74, label %cleanup, label %if.then75, !dbg !7056

if.then75:                                        ; preds = %if.then72
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7057
  %call76 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.44, i64 0, i64 0)) #6, !dbg !7058
  br label %cleanup, !dbg !7058

if.end78:                                         ; preds = %if.end65
  %31 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7059
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %31, metadata !6933, metadata !DIExpression()), !dbg !6939
  %call79 = call fastcc i32 @gimple_code(%union.gimple_statement_d* %31) #8, !dbg !7060
  switch i32 %call79, label %sw.default [
    i32 16, label %sw.bb
    i32 6, label %sw.bb81
  ], !dbg !7061

sw.bb:                                            ; preds = %if.end78
  %32 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7062
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %32, metadata !6933, metadata !DIExpression()), !dbg !6939
  %call80 = call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %32) #8, !dbg !7064
  call void @llvm.dbg.value(metadata %union.tree_node* %call80, metadata !6932, metadata !DIExpression()), !dbg !6939
  store %union.tree_node* %call80, %union.tree_node** %def, align 8, !dbg !7065
  br label %if.end88, !dbg !7066

sw.bb81:                                          ; preds = %if.end78
  %33 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7067
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %33, metadata !6933, metadata !DIExpression()), !dbg !6939
  %call82 = call fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %33) #8, !dbg !7068
  call void @llvm.dbg.value(metadata %union.tree_node* %call82, metadata !6932, metadata !DIExpression()), !dbg !6939
  store %union.tree_node* %call82, %union.tree_node** %def, align 8, !dbg !7069
  br label %if.end88, !dbg !7070

sw.default:                                       ; preds = %if.end78
  %call83 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !7071
  %tobool84 = icmp eq i8 %call83, 0, !dbg !7071
  br i1 %tobool84, label %cleanup, label %if.then85, !dbg !7073

if.then85:                                        ; preds = %sw.default
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7074
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.45, i64 0, i64 0)) #6, !dbg !7075
  br label %cleanup, !dbg !7075

if.end88:                                         ; preds = %land.lhs.true35, %land.lhs.true32, %land.lhs.true28, %land.lhs.true25, %sw.bb, %sw.bb81, %if.end21
  %35 = load i32, i32* %first_stmt_dt0, align 4, !dbg !7076
  %tobool89 = icmp eq i32 %35, 0, !dbg !7076
  br i1 %tobool89, label %if.then90, label %if.else104, !dbg !7077

if.then90:                                        ; preds = %if.end88
  %36 = load i32, i32* %arrayidx, align 4, !dbg !7078
  store i32 %36, i32* %first_stmt_dt0, align 4, !dbg !7079
  %37 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7080
  call void @llvm.dbg.value(metadata %union.tree_node* %37, metadata !6932, metadata !DIExpression()), !dbg !6939
  %tobool93 = icmp eq %union.tree_node* %37, null, !dbg !7080
  br i1 %tobool93, label %if.else95, label %if.then94, !dbg !7081

if.then94:                                        ; preds = %if.then90
  %type = getelementptr inbounds %union.tree_node, %union.tree_node* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7082
  %38 = bitcast %union.tree_node** %type to i64*, !dbg !7082
  %39 = load i64, i64* %38, align 8, !dbg !7082
  store i64 %39, i64* %8, align 8, !dbg !7083
  br label %if.end96, !dbg !7084

if.else95:                                        ; preds = %if.then90
  store %union.tree_node* %call8, %union.tree_node** %first_stmt_const_oprnd, align 8, !dbg !7085
  br label %if.end96

if.end96:                                         ; preds = %if.else95, %if.then94
  br i1 %cmp97, label %if.else101, label %if.then99, !dbg !7086

if.then99:                                        ; preds = %if.end96
  call void @vect_model_simple_cost(%struct._stmt_vec_info* %call2, i32 %ncopies_for_cost, i32* nonnull %arraydecay, %struct._slp_tree* %slp_node) #6, !dbg !7087
  br label %if.end177, !dbg !7087

if.else101:                                       ; preds = %if.end96
  %40 = load i32, i32* %arraydecay, align 8, !dbg !7088
  call void @vect_model_store_cost(%struct._stmt_vec_info* %call2, i32 %ncopies_for_cost, i32 %40, %struct._slp_tree* %slp_node) #6, !dbg !7089
  br label %if.end177

if.else104:                                       ; preds = %if.end88
  %41 = load i32, i32* %first_stmt_dt1, align 4, !dbg !7090
  %tobool105 = icmp eq i32 %41, 0, !dbg !7090
  %cmp107 = icmp eq i64 %indvars.iv, 1, !dbg !7091
  %or.cond1 = and i1 %tobool105, %cmp107, !dbg !7092
  br i1 %or.cond1, label %if.then109, label %if.else126, !dbg !7092

if.then109:                                       ; preds = %if.else104
  %arrayidx111 = getelementptr inbounds [2 x i32], [2 x i32]* %tmpcast, i64 0, i64 1, !dbg !7093
  %42 = load i32, i32* %arrayidx111, align 4, !dbg !7093
  store i32 %42, i32* %first_stmt_dt1, align 4, !dbg !7094
  %43 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7095
  call void @llvm.dbg.value(metadata %union.tree_node* %43, metadata !6932, metadata !DIExpression()), !dbg !6939
  %tobool112 = icmp eq %union.tree_node* %43, null, !dbg !7095
  br i1 %tobool112, label %if.else116, label %if.then113, !dbg !7096

if.then113:                                       ; preds = %if.then109
  %type115 = getelementptr inbounds %union.tree_node, %union.tree_node* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7097
  %44 = bitcast %union.tree_node** %type115 to i64*, !dbg !7097
  %45 = load i64, i64* %44, align 8, !dbg !7097
  store i64 %45, i64* %7, align 8, !dbg !7098
  br label %if.end177, !dbg !7099

if.else116:                                       ; preds = %if.then109
  %46 = load %union.tree_node*, %union.tree_node** %first_stmt_const_oprnd, align 8, !dbg !7100
  %tobool117 = icmp eq %union.tree_node* %46, null, !dbg !7100
  br i1 %tobool117, label %if.end124, label %if.then118, !dbg !7103

if.then118:                                       ; preds = %if.else116
  %call119 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !7104
  %tobool120 = icmp eq i8 %call119, 0, !dbg !7104
  br i1 %tobool120, label %cleanup, label %if.then121, !dbg !7107

if.then121:                                       ; preds = %if.then118
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7108
  %call122 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.46, i64 0, i64 0)) #6, !dbg !7109
  br label %cleanup, !dbg !7109

if.end124:                                        ; preds = %if.else116
  store %union.tree_node* %call8, %union.tree_node** %first_stmt_const_oprnd, align 8, !dbg !7110
  br label %if.end177

if.else126:                                       ; preds = %if.else104
  %48 = trunc i64 %indvars.iv to i32, !dbg !7111
  switch i32 %48, label %lor.lhs.false160 [
    i32 0, label %land.lhs.true129
    i32 1, label %land.lhs.true146
  ], !dbg !7111

land.lhs.true129:                                 ; preds = %if.else126
  %arrayidx131 = bitcast i64* %dt to i32*, !dbg !7112
  %49 = load i32, i32* %arrayidx131, align 8, !dbg !7112
  %cmp132 = icmp eq i32 %35, %49, !dbg !7113
  br i1 %cmp132, label %lor.lhs.false134, label %if.then169, !dbg !7114

lor.lhs.false134:                                 ; preds = %land.lhs.true129
  %50 = load %union.tree_node*, %union.tree_node** %first_stmt_def0_type, align 8, !dbg !7115
  %tobool135 = icmp ne %union.tree_node* %50, null, !dbg !7115
  %51 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7116
  call void @llvm.dbg.value(metadata %union.tree_node* %51, metadata !6932, metadata !DIExpression()), !dbg !6939
  %tobool137 = icmp ne %union.tree_node* %51, null, !dbg !7116
  %or.cond2 = and i1 %tobool135, %tobool137, !dbg !7117
  br i1 %or.cond2, label %land.lhs.true138, label %lor.lhs.false143, !dbg !7117

land.lhs.true138:                                 ; preds = %lor.lhs.false134
  %type140 = getelementptr inbounds %union.tree_node, %union.tree_node* %51, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7118
  %52 = load %union.tree_node*, %union.tree_node** %type140, align 8, !dbg !7118
  %call141 = call zeroext i8 @types_compatible_p(%union.tree_node* nonnull %50, %union.tree_node* %52) #6, !dbg !7119
  %tobool142 = icmp eq i8 %call141, 0, !dbg !7119
  br i1 %tobool142, label %if.then169, label %lor.lhs.false143, !dbg !7120

lor.lhs.false143:                                 ; preds = %land.lhs.true138, %lor.lhs.false134
  br i1 false, label %lor.lhs.false143.land.lhs.true146_crit_edge, label %lor.lhs.false160, !dbg !7121

lor.lhs.false143.land.lhs.true146_crit_edge:      ; preds = %lor.lhs.false143
  br label %land.lhs.true146, !dbg !7121

land.lhs.true146:                                 ; preds = %lor.lhs.false143.land.lhs.true146_crit_edge, %if.else126
  %53 = load i32, i32* %arrayidx, align 4, !dbg !7122
  %cmp149 = icmp eq i32 %41, %53, !dbg !7123
  br i1 %cmp149, label %lor.lhs.false151, label %if.then169, !dbg !7124

lor.lhs.false151:                                 ; preds = %land.lhs.true146
  %54 = load %union.tree_node*, %union.tree_node** %first_stmt_def1_type, align 8, !dbg !7125
  %tobool152 = icmp ne %union.tree_node* %54, null, !dbg !7125
  %55 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7126
  call void @llvm.dbg.value(metadata %union.tree_node* %55, metadata !6932, metadata !DIExpression()), !dbg !6939
  %tobool154 = icmp ne %union.tree_node* %55, null, !dbg !7126
  %or.cond3 = and i1 %tobool152, %tobool154, !dbg !7127
  br i1 %or.cond3, label %land.lhs.true155, label %lor.lhs.false160, !dbg !7127

land.lhs.true155:                                 ; preds = %lor.lhs.false151
  %type157 = getelementptr inbounds %union.tree_node, %union.tree_node* %55, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7128
  %56 = load %union.tree_node*, %union.tree_node** %type157, align 8, !dbg !7128
  %call158 = call zeroext i8 @types_compatible_p(%union.tree_node* nonnull %54, %union.tree_node* %56) #6, !dbg !7129
  %tobool159 = icmp eq i8 %call158, 0, !dbg !7129
  br i1 %tobool159, label %if.then169, label %lor.lhs.false160, !dbg !7130

lor.lhs.false160:                                 ; preds = %land.lhs.true155, %if.else126, %lor.lhs.false151, %lor.lhs.false143
  %57 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7131
  call void @llvm.dbg.value(metadata %union.tree_node* %57, metadata !6932, metadata !DIExpression()), !dbg !6939
  %tobool161 = icmp eq %union.tree_node* %57, null, !dbg !7131
  br i1 %tobool161, label %land.lhs.true162, label %if.end177, !dbg !7132

land.lhs.true162:                                 ; preds = %lor.lhs.false160
  %58 = load %struct.tree_common*, %struct.tree_common** %6, align 8, !dbg !7133
  %type164 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %58, i64 0, i32 2, !dbg !7133
  %59 = load %union.tree_node*, %union.tree_node** %type164, align 8, !dbg !7133
  %type166 = getelementptr inbounds %union.tree_node, %union.tree_node* %call8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7134
  %60 = load %union.tree_node*, %union.tree_node** %type166, align 8, !dbg !7134
  %call167 = call zeroext i8 @types_compatible_p(%union.tree_node* %59, %union.tree_node* %60) #6, !dbg !7135
  %tobool168 = icmp eq i8 %call167, 0, !dbg !7135
  br i1 %tobool168, label %if.then169, label %if.end177, !dbg !7136

if.then169:                                       ; preds = %land.lhs.true138, %land.lhs.true129, %land.lhs.true155, %land.lhs.true162, %land.lhs.true146
  %call170 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !7137
  %tobool171 = icmp eq i8 %call170, 0, !dbg !7137
  br i1 %tobool171, label %cleanup, label %if.then172, !dbg !7140

if.then172:                                       ; preds = %if.then169
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7141
  %call173 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.47, i64 0, i64 0)) #6, !dbg !7142
  br label %cleanup, !dbg !7142

if.end177:                                        ; preds = %land.lhs.true162, %lor.lhs.false160, %if.end124, %if.then113, %if.then99, %if.else101
  %62 = load i32, i32* %arrayidx, align 4, !dbg !7143
  switch i32 %62, label %sw.default189 [
    i32 1, label %for.inc
    i32 2, label %for.inc
    i32 3, label %sw.bb181
  ], !dbg !7144

sw.bb181:                                         ; preds = %if.end177
  %cmp182 = icmp eq i64 %indvars.iv, 0, !dbg !7145
  %63 = load %union.gimple_statement_d*, %union.gimple_statement_d** %def_stmt, align 8, !dbg !7148
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %63, metadata !6933, metadata !DIExpression()), !dbg !6939
  br i1 %cmp182, label %if.then184, label %if.else186, !dbg !7149

if.then184:                                       ; preds = %sw.bb181
  %call185 = call fastcc %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %def_stmts0, %union.gimple_statement_d* %63) #8, !dbg !7150
  br label %for.inc, !dbg !7150

if.else186:                                       ; preds = %sw.bb181
  %call187 = call fastcc %union.gimple_statement_d** @VEC_gimple_heap_safe_push(%struct.VEC_gimple_heap** %def_stmts1, %union.gimple_statement_d* %63) #8, !dbg !7151
  br label %for.inc

sw.default189:                                    ; preds = %if.end177
  %call190 = call zeroext i8 @vect_print_dump_info(i32 8) #6, !dbg !7152
  %tobool191 = icmp eq i8 %call190, 0, !dbg !7152
  br i1 %tobool191, label %cleanup, label %if.then192, !dbg !7154

if.then192:                                       ; preds = %sw.default189
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7155
  %call193 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.48, i64 0, i64 0)) #6, !dbg !7157
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7158
  %66 = load %union.tree_node*, %union.tree_node** %def, align 8, !dbg !7159
  call void @llvm.dbg.value(metadata %union.tree_node* %66, metadata !6932, metadata !DIExpression()), !dbg !6939
  call void @print_generic_expr(%struct._IO_FILE* %65, %union.tree_node* %66, i32 2) #6, !dbg !7160
  br label %cleanup, !dbg !7161

for.inc:                                          ; preds = %if.end177, %if.end177, %if.else186, %if.then184
  call void @llvm.dbg.value(metadata i32 %add, metadata !6930, metadata !DIExpression()), !dbg !6939
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !6982
  br label %for.cond, !dbg !7162, !llvm.loop !7163

cleanup.loopexit:                                 ; preds = %for.cond
  br label %cleanup, !dbg !7165

cleanup:                                          ; preds = %cleanup.loopexit, %if.then57, %if.then72, %sw.default, %if.then118, %if.then169, %sw.default189, %if.then15, %if.then192, %if.then172, %if.then121, %if.then85, %if.then75, %if.then60, %if.then18
  %retval.0 = phi i8 [ 0, %if.then18 ], [ 0, %if.then15 ], [ 0, %if.then60 ], [ 0, %if.then57 ], [ 0, %if.then75 ], [ 0, %if.then72 ], [ 0, %if.then85 ], [ 0, %sw.default ], [ 0, %if.then121 ], [ 0, %if.then118 ], [ 0, %if.then172 ], [ 0, %if.then169 ], [ 0, %if.then192 ], [ 0, %sw.default189 ], [ 1, %cleanup.loopexit ], !dbg !6939
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #7, !dbg !7165
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #7, !dbg !7165
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !7165
  ret i8 %retval.0, !dbg !7165
}

declare dso_local i32 @vect_supportable_dr_alignment(%struct.data_reference*) local_unnamed_addr #2

declare dso_local void @vect_model_load_cost(%struct._stmt_vec_info*, i32, %struct._slp_tree*) local_unnamed_addr #2

declare dso_local i32 @vect_get_place_in_interleaving_chain(%union.gimple_statement_d*, %union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %vec_, i32 %obj_) unnamed_addr #0 !dbg !7166 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap** %vec_, metadata !7171, metadata !DIExpression()), !dbg !7173
  call void @llvm.dbg.value(metadata i32 %obj_, metadata !7172, metadata !DIExpression()), !dbg !7173
  %call = tail call fastcc i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %vec_, i32 1) #8, !dbg !7174
  %0 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %vec_, align 8, !dbg !7174
  %tobool = icmp eq %struct.VEC_int_heap* %0, null, !dbg !7174
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7174

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %0, i64 0, i32 0, !dbg !7174
  br label %cond.end, !dbg !7174

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %entry ], !dbg !7174
  %call1 = tail call fastcc i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond, i32 %obj_) #8, !dbg !7174
  ret i32* %call1, !dbg !7174
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct._slp_tree** @VEC_slp_tree_heap_safe_push(%struct.VEC_slp_tree_heap** %vec_, %struct._slp_tree* %obj_) unnamed_addr #0 !dbg !7175 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap** %vec_, metadata !7179, metadata !DIExpression()), !dbg !7181
  call void @llvm.dbg.value(metadata %struct._slp_tree* %obj_, metadata !7180, metadata !DIExpression()), !dbg !7181
  %call = tail call fastcc i32 @VEC_slp_tree_heap_reserve(%struct.VEC_slp_tree_heap** %vec_, i32 1) #8, !dbg !7182
  %0 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %vec_, align 8, !dbg !7182
  %tobool = icmp eq %struct.VEC_slp_tree_heap* %0, null, !dbg !7182
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7182

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %0, i64 0, i32 0, !dbg !7182
  br label %cond.end, !dbg !7182

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !7182
  %call1 = tail call fastcc %struct._slp_tree** @VEC_slp_tree_base_quick_push(%struct.VEC_slp_tree_base* %cond, %struct._slp_tree* %obj_) #8, !dbg !7182
  ret %struct._slp_tree** %call1, !dbg !7182
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7183 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7187, metadata !DIExpression()), !dbg !7188
  %num_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 0, i32 3, !dbg !7189
  %0 = load i32, i32* %num_ops, align 4, !dbg !7189
  ret i32 %0, !dbg !7190
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !7191 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7195, metadata !DIExpression()), !dbg !7197
  call void @llvm.dbg.value(metadata i32 %i, metadata !7196, metadata !DIExpression()), !dbg !7197
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #8, !dbg !7198
  %tobool = icmp eq i8 %call, 0, !dbg !7198
  br i1 %tobool, label %return, label %if.then, !dbg !7200

if.then:                                          ; preds = %entry
  %call1 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #8, !dbg !7201
  %idxprom = zext i32 %i to i64, !dbg !7201
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !7201
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !7201
  br label %return, !dbg !7203

return:                                           ; preds = %entry, %if.then
  %retval.0 = phi %union.tree_node* [ %0, %if.then ], [ null, %entry ], !dbg !7204
  ret %union.tree_node* %retval.0, !dbg !7205
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7206 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7208, metadata !DIExpression()), !dbg !7209
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !7210
  %cmp = icmp eq i32 %call, 0, !dbg !7211
  br i1 %cmp, label %land.end, label %land.rhs, !dbg !7212

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !7213
  %cmp2 = icmp ult i32 %call1, 10, !dbg !7214
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !7215
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7216 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7220, metadata !DIExpression()), !dbg !7222
  %call = tail call fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #8, !dbg !7223
  %idxprom = zext i32 %call to i64, !dbg !7224
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !7224
  %0 = load i64, i64* %arrayidx, align 8, !dbg !7224
  call void @llvm.dbg.value(metadata i64 %0, metadata !7221, metadata !DIExpression()), !dbg !7222
  %cmp = icmp eq i64 %0, 0, !dbg !7225
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !7225

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !7225
  br label %cond.end, !dbg !7225

cond.end:                                         ; preds = %entry, %cond.true
  %1 = bitcast %union.gimple_statement_d* %gs to i8*, !dbg !7226
  %add.ptr = getelementptr inbounds i8, i8* %1, i64 %0, !dbg !7227
  %2 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !7228
  ret %union.tree_node** %2, !dbg !7229
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7230 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7234, metadata !DIExpression()), !dbg !7235
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %gs) #8, !dbg !7236
  %call1 = tail call fastcc i32 @gss_for_code(i32 %call) #8, !dbg !7237
  ret i32 %call1, !dbg !7238
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gss_for_code(i32 %code) unnamed_addr #0 !dbg !7239 {
entry:
  call void @llvm.dbg.value(metadata i32 %code, metadata !7243, metadata !DIExpression()), !dbg !7244
  %idxprom = zext i32 %code to i64, !dbg !7245
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !7245
  %0 = load i32, i32* %arrayidx, align 4, !dbg !7245
  ret i32 %0, !dbg !7246
}

declare dso_local zeroext i8 @vect_is_simple_use(%union.tree_node*, %struct._loop_vec_info*, %struct._bb_vec_info*, %union.gimple_statement_d**, %union.tree_node**, i32*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.basic_block_def* @gimple_bb(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7247 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7251, metadata !DIExpression()), !dbg !7252
  %bb = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 4, !dbg !7253
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7253
  ret %struct.basic_block_def* %0, !dbg !7254
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7255 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7257, metadata !DIExpression()), !dbg !7258
  %result = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 3, !dbg !7259
  %0 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !7259
  ret %union.tree_node* %0, !dbg !7260
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_lhs(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7261 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7263, metadata !DIExpression()), !dbg !7264
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 0) #8, !dbg !7265
  ret %union.tree_node* %call, !dbg !7266
}

declare dso_local void @vect_model_simple_cost(%struct._stmt_vec_info*, i32, i32*, %struct._slp_tree*) local_unnamed_addr #2

declare dso_local void @vect_model_store_cost(%struct._stmt_vec_info*, i32, i32, %struct._slp_tree*) local_unnamed_addr #2

declare dso_local zeroext i8 @types_compatible_p(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !7267 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_heap** %vec_, metadata !7271, metadata !DIExpression()), !dbg !7274
  call void @llvm.dbg.value(metadata i32 1, metadata !7272, metadata !DIExpression()), !dbg !7274
  %0 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %vec_, align 8, !dbg !7275
  %tobool = icmp eq %struct.VEC_int_heap* %0, null, !dbg !7275
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7275

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %0, i64 0, i32 0, !dbg !7275
  br label %cond.end, !dbg !7275

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %entry ], !dbg !7275
  %call = tail call fastcc i32 @VEC_int_base_space(%struct.VEC_int_base* %cond, i32 1) #8, !dbg !7275
  %tobool1 = icmp eq i32 %call, 0, !dbg !7275
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !7275
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !7273, metadata !DIExpression()), !dbg !7274
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7275

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_int_heap** %vec_ to i8**, !dbg !7276
  %2 = load i8*, i8** %1, align 8, !dbg !7276
  %call3 = tail call i8* @vec_heap_o_reserve(i8* %2, i32 1, i64 8, i64 4) #6, !dbg !7276
  store i8* %call3, i8** %1, align 8, !dbg !7276
  br label %if.end, !dbg !7276

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !7275
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) unnamed_addr #0 !dbg !7278 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_base* %vec_, metadata !7283, metadata !DIExpression()), !dbg !7286
  call void @llvm.dbg.value(metadata i32 %obj_, metadata !7284, metadata !DIExpression()), !dbg !7286
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 0, !dbg !7287
  %0 = load i32, i32* %num1, align 4, !dbg !7287
  %inc = add i32 %0, 1, !dbg !7287
  store i32 %inc, i32* %num1, align 4, !dbg !7287
  %idxprom = zext i32 %0 to i64, !dbg !7287
  %arrayidx = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !7287
  call void @llvm.dbg.value(metadata i32* %arrayidx, metadata !7285, metadata !DIExpression()), !dbg !7286
  store i32 %obj_, i32* %arrayidx, align 4, !dbg !7287
  ret i32* %arrayidx, !dbg !7287
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_int_base_space(%struct.VEC_int_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !7288 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_base* %vec_, metadata !7292, metadata !DIExpression()), !dbg !7294
  call void @llvm.dbg.value(metadata i32 1, metadata !7293, metadata !DIExpression()), !dbg !7294
  %tobool = icmp eq %struct.VEC_int_base* %vec_, null, !dbg !7295
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7295

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 1, !dbg !7295
  %0 = load i32, i32* %alloc, align 4, !dbg !7295
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 0, !dbg !7295
  %1 = load i32, i32* %num, align 4, !dbg !7295
  %cmp1 = icmp ne i32 %0, %1, !dbg !7295
  %phitmp = zext i1 %cmp1 to i32, !dbg !7295
  br label %cond.end, !dbg !7295

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7295

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !7295
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_slp_tree_heap_reserve(%struct.VEC_slp_tree_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !7296 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap** %vec_, metadata !7300, metadata !DIExpression()), !dbg !7303
  call void @llvm.dbg.value(metadata i32 1, metadata !7301, metadata !DIExpression()), !dbg !7303
  %0 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %vec_, align 8, !dbg !7304
  %tobool = icmp eq %struct.VEC_slp_tree_heap* %0, null, !dbg !7304
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7304

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %0, i64 0, i32 0, !dbg !7304
  br label %cond.end, !dbg !7304

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !7304
  %call = tail call fastcc i32 @VEC_slp_tree_base_space(%struct.VEC_slp_tree_base* %cond, i32 1) #8, !dbg !7304
  %tobool1 = icmp eq i32 %call, 0, !dbg !7304
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !7304
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !7302, metadata !DIExpression()), !dbg !7303
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7304

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_slp_tree_heap** %vec_ to i8**, !dbg !7305
  %2 = load i8*, i8** %1, align 8, !dbg !7305
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %2, i32 1) #6, !dbg !7305
  store i8* %call3, i8** %1, align 8, !dbg !7305
  br label %if.end, !dbg !7305

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !7304
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct._slp_tree** @VEC_slp_tree_base_quick_push(%struct.VEC_slp_tree_base* %vec_, %struct._slp_tree* %obj_) unnamed_addr #0 !dbg !7307 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_base* %vec_, metadata !7312, metadata !DIExpression()), !dbg !7315
  call void @llvm.dbg.value(metadata %struct._slp_tree* %obj_, metadata !7313, metadata !DIExpression()), !dbg !7315
  %num1 = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %vec_, i64 0, i32 0, !dbg !7316
  %0 = load i32, i32* %num1, align 8, !dbg !7316
  %inc = add i32 %0, 1, !dbg !7316
  store i32 %inc, i32* %num1, align 8, !dbg !7316
  %idxprom = zext i32 %0 to i64, !dbg !7316
  %arrayidx = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !7316
  call void @llvm.dbg.value(metadata %struct._slp_tree** %arrayidx, metadata !7314, metadata !DIExpression()), !dbg !7315
  store %struct._slp_tree* %obj_, %struct._slp_tree** %arrayidx, align 8, !dbg !7316
  ret %struct._slp_tree** %arrayidx, !dbg !7316
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_slp_tree_base_space(%struct.VEC_slp_tree_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !7317 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_base* %vec_, metadata !7321, metadata !DIExpression()), !dbg !7323
  call void @llvm.dbg.value(metadata i32 1, metadata !7322, metadata !DIExpression()), !dbg !7323
  %tobool = icmp eq %struct.VEC_slp_tree_base* %vec_, null, !dbg !7324
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7324

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %vec_, i64 0, i32 1, !dbg !7324
  %0 = load i32, i32* %alloc, align 4, !dbg !7324
  %num = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %vec_, i64 0, i32 0, !dbg !7324
  %1 = load i32, i32* %num, align 8, !dbg !7324
  %cmp1 = icmp ne i32 %0, %1, !dbg !7324
  %phitmp = zext i1 %cmp1 to i32, !dbg !7324
  br label %cond.end, !dbg !7324

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7324

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !7324
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) unnamed_addr #0 !dbg !7325 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_base* %vec_, metadata !7331, metadata !DIExpression()), !dbg !7334
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !7332, metadata !DIExpression()), !dbg !7334
  call void @llvm.dbg.value(metadata i32* %ptr, metadata !7333, metadata !DIExpression()), !dbg !7334
  %tobool = icmp eq %struct.VEC_int_base* %vec_, null, !dbg !7335
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !7335

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 0, !dbg !7335
  %0 = load i32, i32* %num, align 4, !dbg !7335
  %cmp = icmp ugt i32 %0, %ix_, !dbg !7335
  br i1 %cmp, label %if.then, label %if.else, !dbg !7337

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !7338
  %arrayidx = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !7338
  %1 = load i32, i32* %arrayidx, align 4, !dbg !7338
  br label %return, !dbg !7338

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !7340

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi i32 [ 0, %if.else ], [ %1, %if.then ], !dbg !7342
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !7342
  store i32 %storemerge, i32* %ptr, align 4, !dbg !7342
  ret i32 %retval.0, !dbg !7337
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_int_base_length(%struct.VEC_int_base* %vec_) unnamed_addr #0 !dbg !7343 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_int_base* %vec_, metadata !7347, metadata !DIExpression()), !dbg !7348
  %tobool = icmp eq %struct.VEC_int_base* %vec_, null, !dbg !7349
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7349

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %vec_, i64 0, i32 0, !dbg !7349
  %0 = load i32, i32* %num, align 4, !dbg !7349
  br label %cond.end, !dbg !7349

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !7349
  ret i32 %cond, !dbg !7349
}

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) local_unnamed_addr #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) unnamed_addr #0 !dbg !7350 {
entry:
  call void @llvm.dbg.value(metadata %struct.simple_bitmap_def* %map, metadata !7354, metadata !DIExpression()), !dbg !7359
  call void @llvm.dbg.value(metadata i32 %bitno, metadata !7355, metadata !DIExpression()), !dbg !7359
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %map, i64 0, i32 0, !dbg !7360
  %0 = load i8*, i8** %popcount, align 8, !dbg !7360
  %tobool = icmp eq i8* %0, null, !dbg !7361
  br i1 %tobool, label %entry.if.end7_crit_edge, label %if.then, !dbg !7362

entry.if.end7_crit_edge:                          ; preds = %entry
  %.pre = and i32 %bitno, 63, !dbg !7363
  %.pre2 = zext i32 %.pre to i64, !dbg !7364
  %.pre3 = shl i64 1, %.pre2, !dbg !7364
  %.pre4 = lshr i32 %bitno, 6, !dbg !7365
  %.pre5 = zext i32 %.pre4 to i64, !dbg !7366
  br label %if.end7, !dbg !7362

if.then:                                          ; preds = %entry
  %div = lshr i32 %bitno, 6, !dbg !7367
  %idxprom = zext i32 %div to i64, !dbg !7367
  %arrayidx = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %map, i64 0, i32 3, i64 %idxprom, !dbg !7367
  %1 = load i64, i64* %arrayidx, align 8, !dbg !7367
  %rem = and i32 %bitno, 63, !dbg !7367
  %sh_prom = zext i32 %rem to i64, !dbg !7367
  %2 = shl i64 1, %sh_prom, !dbg !7368
  %3 = and i64 %1, %2, !dbg !7368
  %tobool1 = icmp eq i64 %3, 0, !dbg !7368
  br i1 %tobool1, label %if.then2, label %if.end7, !dbg !7370

if.then2:                                         ; preds = %if.then
  %arrayidx6 = getelementptr inbounds i8, i8* %0, i64 %idxprom, !dbg !7371
  %4 = load i8, i8* %arrayidx6, align 1, !dbg !7372
  %inc = add i8 %4, 1, !dbg !7372
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !7372
  br label %if.end7, !dbg !7371

if.end7:                                          ; preds = %entry.if.end7_crit_edge, %if.then, %if.then2
  %idxprom12.pre-phi = phi i64 [ %.pre5, %entry.if.end7_crit_edge ], [ %idxprom, %if.then ], [ %idxprom, %if.then2 ], !dbg !7366
  %shl.pre-phi = phi i64 [ %.pre3, %entry.if.end7_crit_edge ], [ %2, %if.then ], [ %2, %if.then2 ], !dbg !7364
  %arrayidx13 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %map, i64 0, i32 3, i64 %idxprom12.pre-phi, !dbg !7366
  %5 = load i64, i64* %arrayidx13, align 8, !dbg !7373
  %or = or i64 %5, %shl.pre-phi, !dbg !7373
  store i64 %or, i64* %arrayidx13, align 8, !dbg !7373
  ret void, !dbg !7374
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vect_supported_slp_permutation_p(%struct._slp_instance* %instance) unnamed_addr #5 !dbg !7375 {
entry:
  %sorted_loads = alloca %struct.VEC_slp_tree_heap*, align 8
  %index = alloca i32, align 4
  %load = alloca %struct._slp_tree*, align 8
  call void @llvm.dbg.value(metadata %struct._slp_instance* %instance, metadata !7379, metadata !DIExpression()), !dbg !7394
  %loads = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 5, !dbg !7395
  %0 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !7395
  %tobool = icmp eq %struct.VEC_slp_tree_heap* %0, null, !dbg !7395
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7395

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %0, i64 0, i32 0, !dbg !7395
  br label %cond.end, !dbg !7395

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_slp_tree_base* [ %base, %cond.true ], [ null, %entry ], !dbg !7395
  %call = tail call fastcc %struct._slp_tree* @VEC_slp_tree_base_index(%struct.VEC_slp_tree_base* %cond, i32 0) #8, !dbg !7395
  call void @llvm.dbg.value(metadata %struct._slp_tree* %call, metadata !7380, metadata !DIExpression()), !dbg !7394
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %call, i64 0, i32 2, !dbg !7396
  %1 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !7396
  %tobool2 = icmp eq %struct.VEC_gimple_heap* %1, null, !dbg !7396
  br i1 %tobool2, label %cond.end7, label %cond.true3, !dbg !7396

cond.true3:                                       ; preds = %cond.end
  %base5 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %1, i64 0, i32 0, !dbg !7396
  br label %cond.end7, !dbg !7396

cond.end7:                                        ; preds = %cond.end, %cond.true3
  %cond8 = phi %struct.VEC_gimple_base* [ %base5, %cond.true3 ], [ null, %cond.end ], !dbg !7396
  %call9 = tail call fastcc %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond8, i32 0) #8, !dbg !7396
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call9, metadata !7381, metadata !DIExpression()), !dbg !7394
  %call10 = tail call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %call9) #8, !dbg !7397
  %first_dr = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call10, i64 0, i32 17, !dbg !7397
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr, align 8, !dbg !7397
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %2, metadata !7382, metadata !DIExpression()), !dbg !7394
  %3 = bitcast %struct.VEC_slp_tree_heap** %sorted_loads to i8*, !dbg !7398
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #7, !dbg !7398
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap* null, metadata !7383, metadata !DIExpression()), !dbg !7394
  store %struct.VEC_slp_tree_heap* null, %struct.VEC_slp_tree_heap** %sorted_loads, align 8, !dbg !7399
  %4 = bitcast i32* %index to i8*, !dbg !7400
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #7, !dbg !7400
  call void @llvm.dbg.value(metadata %struct._slp_tree** null, metadata !7385, metadata !DIExpression()), !dbg !7394
  %group_size11 = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 1, !dbg !7401
  %5 = load i32, i32* %group_size11, align 8, !dbg !7401
  call void @llvm.dbg.value(metadata i32 %5, metadata !7386, metadata !DIExpression()), !dbg !7394
  %6 = bitcast %struct._slp_tree** %load to i8*, !dbg !7402
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7, !dbg !7402
  %conv = sext i32 %5 to i64, !dbg !7403
  %mul = shl nsw i64 %conv, 3, !dbg !7404
  %call12 = tail call i8* @xmalloc(i64 %mul) #6, !dbg !7405
  %7 = bitcast i8* %call12 to %struct._slp_tree**, !dbg !7406
  call void @llvm.dbg.value(metadata %struct._slp_tree** %7, metadata !7385, metadata !DIExpression()), !dbg !7394
  call void @llvm.dbg.value(metadata i32 0, metadata !7387, metadata !DIExpression()), !dbg !7394
  call void @llvm.dbg.value(metadata i32 0, metadata !7388, metadata !DIExpression()), !dbg !7394
  %load_permutation = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 4, !dbg !7407
  %8 = bitcast %struct._slp_tree** %load to i64*, !dbg !7408
  br label %for.cond, !dbg !7409

for.cond:                                         ; preds = %for.inc, %cond.end7
  %i.0 = phi i32 [ 0, %cond.end7 ], [ %add, %for.inc ], !dbg !7410
  %j.0 = phi i32 [ 0, %cond.end7 ], [ %inc, %for.inc ], !dbg !7410
  call void @llvm.dbg.value(metadata i32 %j.0, metadata !7388, metadata !DIExpression()), !dbg !7394
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !7387, metadata !DIExpression()), !dbg !7394
  %9 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %load_permutation, align 8, !dbg !7411
  %tobool13 = icmp eq %struct.VEC_int_heap* %9, null, !dbg !7411
  br i1 %tobool13, label %cond.end18, label %cond.true14, !dbg !7411

cond.true14:                                      ; preds = %for.cond
  %base16 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %9, i64 0, i32 0, !dbg !7411
  br label %cond.end18, !dbg !7411

cond.end18:                                       ; preds = %for.cond, %cond.true14
  %cond19 = phi %struct.VEC_int_base* [ %base16, %cond.true14 ], [ null, %for.cond ], !dbg !7411
  call void @llvm.dbg.value(metadata i32* %index, metadata !7384, metadata !DIExpression(DW_OP_deref)), !dbg !7394
  %call20 = call fastcc i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond19, i32 %i.0, i32* nonnull %index) #8, !dbg !7411
  %tobool21 = icmp eq i32 %call20, 0, !dbg !7411
  br i1 %tobool21, label %for.end, label %land.rhs, !dbg !7412

land.rhs:                                         ; preds = %cond.end18
  %10 = load %struct.VEC_slp_tree_heap*, %struct.VEC_slp_tree_heap** %loads, align 8, !dbg !7413
  %tobool23 = icmp eq %struct.VEC_slp_tree_heap* %10, null, !dbg !7413
  br i1 %tobool23, label %cond.end28, label %cond.true24, !dbg !7413

cond.true24:                                      ; preds = %land.rhs
  %base26 = getelementptr inbounds %struct.VEC_slp_tree_heap, %struct.VEC_slp_tree_heap* %10, i64 0, i32 0, !dbg !7413
  br label %cond.end28, !dbg !7413

cond.end28:                                       ; preds = %land.rhs, %cond.true24
  %cond29 = phi %struct.VEC_slp_tree_base* [ %base26, %cond.true24 ], [ null, %land.rhs ], !dbg !7413
  call void @llvm.dbg.value(metadata %struct._slp_tree** %load, metadata !7389, metadata !DIExpression(DW_OP_deref)), !dbg !7394
  %call30 = call fastcc i32 @VEC_slp_tree_base_iterate(%struct.VEC_slp_tree_base* %cond29, i32 %j.0, %struct._slp_tree** nonnull %load) #8, !dbg !7413
  %tobool31 = icmp eq i32 %call30, 0, !dbg !7412
  br i1 %tobool31, label %for.end, label %for.body, !dbg !7414

for.body:                                         ; preds = %cond.end28
  %11 = load %struct._slp_tree*, %struct._slp_tree** %load, align 8, !dbg !7415
  call void @llvm.dbg.value(metadata %struct._slp_tree* %11, metadata !7389, metadata !DIExpression()), !dbg !7394
  %stmts32 = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %11, i64 0, i32 2, !dbg !7415
  %12 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts32, align 8, !dbg !7415
  %tobool33 = icmp eq %struct.VEC_gimple_heap* %12, null, !dbg !7415
  br i1 %tobool33, label %cond.end38, label %cond.true34, !dbg !7415

cond.true34:                                      ; preds = %for.body
  call void @llvm.dbg.value(metadata %struct._slp_tree* %11, metadata !7389, metadata !DIExpression()), !dbg !7394
  %base36 = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %12, i64 0, i32 0, !dbg !7415
  br label %cond.end38, !dbg !7415

cond.end38:                                       ; preds = %for.body, %cond.true34
  %cond39 = phi %struct.VEC_gimple_base* [ %base36, %cond.true34 ], [ null, %for.body ], !dbg !7415
  %call40 = call fastcc %union.gimple_statement_d* @VEC_gimple_base_index(%struct.VEC_gimple_base* %cond39, i32 0) #8, !dbg !7415
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %call40, metadata !7390, metadata !DIExpression()), !dbg !7408
  %call41 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %call40) #8, !dbg !7416
  %first_dr42 = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call41, i64 0, i32 17, !dbg !7416
  %13 = load %union.gimple_statement_d*, %union.gimple_statement_d** %first_dr42, align 8, !dbg !7416
  %cmp = icmp eq %union.gimple_statement_d* %13, %2, !dbg !7418
  br i1 %cmp, label %if.end48, label %if.then, !dbg !7419

if.then:                                          ; preds = %cond.end38
  %call44 = call zeroext i8 @vect_print_dump_info(i32 9) #6, !dbg !7420
  %tobool45 = icmp eq i8 %call44, 0, !dbg !7420
  br i1 %tobool45, label %if.end, label %if.then46, !dbg !7423

if.then46:                                        ; preds = %if.then
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7424
  %call47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.51, i64 0, i64 0)) #6, !dbg !7426
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @vect_dump, align 8, !dbg !7427
  call void @print_gimple_stmt(%struct._IO_FILE* %15, %union.gimple_statement_d* %call40, i32 0, i32 2) #6, !dbg !7428
  br label %if.end, !dbg !7429

if.end:                                           ; preds = %if.then, %if.then46
  call void @free(i8* %call12) #6, !dbg !7430
  br label %cleanup, !dbg !7431

if.end48:                                         ; preds = %cond.end38
  %16 = load i64, i64* %8, align 8, !dbg !7432
  %17 = load i32, i32* %index, align 4, !dbg !7433
  call void @llvm.dbg.value(metadata i32 %17, metadata !7384, metadata !DIExpression()), !dbg !7394
  %idxprom = sext i32 %17 to i64, !dbg !7434
  %arrayidx = getelementptr inbounds %struct._slp_tree*, %struct._slp_tree** %7, i64 %idxprom, !dbg !7434
  %18 = bitcast %struct._slp_tree** %arrayidx to i64*, !dbg !7435
  store i64 %16, i64* %18, align 8, !dbg !7435
  br label %cleanup, !dbg !7436

cleanup:                                          ; preds = %if.end48, %if.end
  %cleanup.dest.slot.0 = phi i1 [ false, %if.end ], [ true, %if.end48 ]
  br i1 %cleanup.dest.slot.0, label %for.inc, label %cleanup66.loopexit

for.inc:                                          ; preds = %cleanup
  %add = add nsw i32 %i.0, %5, !dbg !7437
  call void @llvm.dbg.value(metadata i32 %add, metadata !7387, metadata !DIExpression()), !dbg !7394
  %inc = add nuw nsw i32 %j.0, 1, !dbg !7438
  call void @llvm.dbg.value(metadata i32 %inc, metadata !7388, metadata !DIExpression()), !dbg !7394
  br label %for.cond, !dbg !7439, !llvm.loop !7440

for.end:                                          ; preds = %cond.end28, %cond.end18
  %call49 = call fastcc %struct.VEC_slp_tree_heap* @VEC_slp_tree_heap_alloc(i32 %5) #8, !dbg !7442
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap* %call49, metadata !7383, metadata !DIExpression()), !dbg !7394
  store %struct.VEC_slp_tree_heap* %call49, %struct.VEC_slp_tree_heap** %sorted_loads, align 8, !dbg !7443
  call void @llvm.dbg.value(metadata i32 0, metadata !7387, metadata !DIExpression()), !dbg !7394
  %19 = sext i32 %5 to i64, !dbg !7444
  br label %for.cond50, !dbg !7444

for.cond50:                                       ; preds = %for.body53, %for.end
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body53 ], [ 0, %for.end ], !dbg !7446
  call void @llvm.dbg.value(metadata i64 %indvars.iv, metadata !7387, metadata !DIExpression()), !dbg !7394
  %cmp51 = icmp slt i64 %indvars.iv, %19, !dbg !7447
  br i1 %cmp51, label %for.body53, label %for.end59, !dbg !7449

for.body53:                                       ; preds = %for.cond50
  %arrayidx55 = getelementptr inbounds %struct._slp_tree*, %struct._slp_tree** %7, i64 %indvars.iv, !dbg !7450
  %20 = load %struct._slp_tree*, %struct._slp_tree** %arrayidx55, align 8, !dbg !7450
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_heap** %sorted_loads, metadata !7383, metadata !DIExpression(DW_OP_deref)), !dbg !7394
  %call56 = call fastcc %struct._slp_tree** @VEC_slp_tree_heap_safe_push(%struct.VEC_slp_tree_heap** nonnull %sorted_loads, %struct._slp_tree* %20) #8, !dbg !7450
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1, !dbg !7451
  call void @llvm.dbg.value(metadata i32 undef, metadata !7387, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !7394
  br label %for.cond50, !dbg !7452, !llvm.loop !7453

for.end59:                                        ; preds = %for.cond50
  call fastcc void @VEC_slp_tree_heap_free(%struct.VEC_slp_tree_heap** nonnull %loads) #8, !dbg !7455
  %21 = bitcast %struct.VEC_slp_tree_heap** %sorted_loads to i64*, !dbg !7456
  %22 = load i64, i64* %21, align 8, !dbg !7456
  %23 = bitcast %struct.VEC_slp_tree_heap** %loads to i64*, !dbg !7457
  store i64 %22, i64* %23, align 8, !dbg !7457
  call void @free(i8* %call12) #6, !dbg !7458
  %unrolling_factor = getelementptr inbounds %struct._slp_instance, %struct._slp_instance* %instance, i64 0, i32 2, !dbg !7459
  %24 = load i32, i32* %unrolling_factor, align 4, !dbg !7459
  %call62 = call zeroext i8 @vect_transform_slp_perm_load(%union.gimple_statement_d* %call9, %struct.VEC_tree_heap* null, %struct.gimple_stmt_iterator* null, i32 %24, %struct._slp_instance* %instance, i8 zeroext 1) #8, !dbg !7461
  %tobool63 = icmp ne i8 %call62, 0, !dbg !7461
  %. = zext i1 %tobool63 to i8, !dbg !7394
  br label %cleanup66, !dbg !7394

cleanup66.loopexit:                               ; preds = %cleanup
  br label %cleanup66, !dbg !7462

cleanup66:                                        ; preds = %cleanup66.loopexit, %for.end59
  %retval.2 = phi i8 [ %., %for.end59 ], [ 0, %cleanup66.loopexit ], !dbg !7394
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7, !dbg !7462
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #7, !dbg !7462
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #7, !dbg !7462
  ret i8 %retval.2, !dbg !7462
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct._slp_tree* @VEC_slp_tree_base_index(%struct.VEC_slp_tree_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !7463 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_tree_base* %vec_, metadata !7467, metadata !DIExpression()), !dbg !7469
  call void @llvm.dbg.value(metadata i32 0, metadata !7468, metadata !DIExpression()), !dbg !7469
  br label %land.end, !dbg !7470

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %arrayidx = getelementptr inbounds %struct.VEC_slp_tree_base, %struct.VEC_slp_tree_base* %vec_, i64 0, i32 2, i64 0, !dbg !7470
  %0 = load %struct._slp_tree*, %struct._slp_tree** %arrayidx, align 8, !dbg !7470
  ret %struct._slp_tree* %0, !dbg !7470
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @get_earlier_stmt(%union.gimple_statement_d* %stmt1, %union.gimple_statement_d* %stmt2) unnamed_addr #0 !dbg !7471 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt1, metadata !7475, metadata !DIExpression()), !dbg !7479
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt2, metadata !7476, metadata !DIExpression()), !dbg !7479
  %cmp = icmp eq %union.gimple_statement_d* %stmt1, null, !dbg !7480
  br i1 %cmp, label %cleanup, label %if.end, !dbg !7482

if.end:                                           ; preds = %entry
  %cmp1 = icmp eq %union.gimple_statement_d* %stmt2, null, !dbg !7483
  br i1 %cmp1, label %cleanup, label %if.end3, !dbg !7485

if.end3:                                          ; preds = %if.end
  %call = tail call fastcc i32 @gimple_uid(%union.gimple_statement_d* nonnull %stmt1) #8, !dbg !7486
  call void @llvm.dbg.value(metadata i32 %call, metadata !7477, metadata !DIExpression()), !dbg !7479
  %call4 = tail call fastcc i32 @gimple_uid(%union.gimple_statement_d* nonnull %stmt2) #8, !dbg !7487
  call void @llvm.dbg.value(metadata i32 %call4, metadata !7478, metadata !DIExpression()), !dbg !7479
  %cmp5 = icmp eq i32 %call, 0, !dbg !7488
  %cmp6 = icmp eq i32 %call4, 0, !dbg !7490
  %or.cond = or i1 %cmp5, %cmp6, !dbg !7491
  br i1 %or.cond, label %cleanup, label %if.end8, !dbg !7491

if.end8:                                          ; preds = %if.end3
  %0 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !7492
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %0, i64 0, i32 0, !dbg !7492
  %call9 = tail call fastcc i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %base) #8, !dbg !7492
  %cmp10 = icmp ugt i32 %call, %call9, !dbg !7492
  br i1 %cmp10, label %cond.true11, label %cond.end13, !dbg !7492

cond.true11:                                      ; preds = %if.end8
  tail call void @fancy_abort(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0), i32 665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !7492
  br label %cond.end13, !dbg !7492

cond.end13:                                       ; preds = %if.end8, %cond.true11
  %1 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !7493
  %base17 = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %1, i64 0, i32 0, !dbg !7493
  %call21 = tail call fastcc i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %base17) #8, !dbg !7493
  %cmp22 = icmp ugt i32 %call4, %call21, !dbg !7493
  br i1 %cmp22, label %cond.true23, label %cond.end25, !dbg !7493

cond.true23:                                      ; preds = %cond.end13
  tail call void @fancy_abort(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0), i32 666, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !7493
  br label %cond.end25, !dbg !7493

cond.end25:                                       ; preds = %cond.end13, %cond.true23
  %cmp27 = icmp ult i32 %call, %call4, !dbg !7494
  %stmt1.stmt2 = select i1 %cmp27, %union.gimple_statement_d* %stmt1, %union.gimple_statement_d* %stmt2, !dbg !7496
  br label %cleanup, !dbg !7496

cleanup:                                          ; preds = %cond.end25, %if.end3, %if.end, %entry
  %retval.0 = phi %union.gimple_statement_d* [ %stmt2, %entry ], [ %stmt1, %if.end ], [ null, %if.end3 ], [ %stmt1.stmt2, %cond.end25 ], !dbg !7479
  ret %union.gimple_statement_d* %retval.0, !dbg !7497
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_uid(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7498 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7500, metadata !DIExpression()), !dbg !7501
  %uid = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 1, !dbg !7502
  %0 = load i32, i32* %uid, align 4, !dbg !7502
  ret i32 %0, !dbg !7503
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %vec_) unnamed_addr #0 !dbg !7504 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_vec_void_p_base* %vec_, metadata !7510, metadata !DIExpression()), !dbg !7511
  %tobool = icmp eq %struct.VEC_vec_void_p_base* %vec_, null, !dbg !7512
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7512

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %vec_, i64 0, i32 0, !dbg !7512
  %0 = load i32, i32* %num, align 8, !dbg !7512
  br label %cond.end, !dbg !7512

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !7512
  ret i32 %cond, !dbg !7512
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_slp_instance_heap_reserve(%struct.VEC_slp_instance_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !7513 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_heap** %vec_, metadata !7517, metadata !DIExpression()), !dbg !7520
  call void @llvm.dbg.value(metadata i32 1, metadata !7518, metadata !DIExpression()), !dbg !7520
  %0 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %vec_, align 8, !dbg !7521
  %tobool = icmp eq %struct.VEC_slp_instance_heap* %0, null, !dbg !7521
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !7521

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_slp_instance_heap, %struct.VEC_slp_instance_heap* %0, i64 0, i32 0, !dbg !7521
  br label %cond.end, !dbg !7521

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_slp_instance_base* [ %base, %cond.true ], [ null, %entry ], !dbg !7521
  %call = tail call fastcc i32 @VEC_slp_instance_base_space(%struct.VEC_slp_instance_base* %cond, i32 1) #8, !dbg !7521
  %tobool1 = icmp eq i32 %call, 0, !dbg !7521
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !7521
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !7519, metadata !DIExpression()), !dbg !7520
  br i1 %tobool1, label %if.then, label %if.end, !dbg !7521

if.then:                                          ; preds = %cond.end
  %1 = bitcast %struct.VEC_slp_instance_heap** %vec_ to i8**, !dbg !7522
  %2 = load i8*, i8** %1, align 8, !dbg !7522
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %2, i32 1) #6, !dbg !7522
  store i8* %call3, i8** %1, align 8, !dbg !7522
  br label %if.end, !dbg !7522

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !7521
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct._slp_instance** @VEC_slp_instance_base_quick_push(%struct.VEC_slp_instance_base* %vec_, %struct._slp_instance* %obj_) unnamed_addr #0 !dbg !7524 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_base* %vec_, metadata !7529, metadata !DIExpression()), !dbg !7532
  call void @llvm.dbg.value(metadata %struct._slp_instance* %obj_, metadata !7530, metadata !DIExpression()), !dbg !7532
  %num1 = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %vec_, i64 0, i32 0, !dbg !7533
  %0 = load i32, i32* %num1, align 8, !dbg !7533
  %inc = add i32 %0, 1, !dbg !7533
  store i32 %inc, i32* %num1, align 8, !dbg !7533
  %idxprom = zext i32 %0 to i64, !dbg !7533
  %arrayidx = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !7533
  call void @llvm.dbg.value(metadata %struct._slp_instance** %arrayidx, metadata !7531, metadata !DIExpression()), !dbg !7532
  store %struct._slp_instance* %obj_, %struct._slp_instance** %arrayidx, align 8, !dbg !7533
  ret %struct._slp_instance** %arrayidx, !dbg !7533
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_slp_instance_base_space(%struct.VEC_slp_instance_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !7534 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_base* %vec_, metadata !7538, metadata !DIExpression()), !dbg !7540
  call void @llvm.dbg.value(metadata i32 1, metadata !7539, metadata !DIExpression()), !dbg !7540
  %tobool = icmp eq %struct.VEC_slp_instance_base* %vec_, null, !dbg !7541
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7541

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %vec_, i64 0, i32 1, !dbg !7541
  %0 = load i32, i32* %alloc, align 4, !dbg !7541
  %num = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %vec_, i64 0, i32 0, !dbg !7541
  %1 = load i32, i32* %num, align 8, !dbg !7541
  %cmp1 = icmp ne i32 %0, %1, !dbg !7541
  %phitmp = zext i1 %cmp1 to i32, !dbg !7541
  br label %cond.end, !dbg !7541

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7541

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !7541
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @first_imm_use_stmt(%struct.immediate_use_iterator_d* %imm, %union.tree_node* %var) unnamed_addr #0 !dbg !7542 {
entry:
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !7547, metadata !DIExpression()), !dbg !7549
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !7548, metadata !DIExpression()), !dbg !7549
  %imm_uses = getelementptr inbounds %union.tree_node, %union.tree_node* %var, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, !dbg !7550
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 1, !dbg !7551
  %0 = bitcast %struct.ssa_use_operand_d** %end_p to i40**, !dbg !7552
  store i40* %imm_uses, i40** %0, align 8, !dbg !7552
  %next = getelementptr inbounds i40, i40* %imm_uses, i64 1, !dbg !7553
  %1 = bitcast i40* %next to i64*, !dbg !7553
  %2 = load i64, i64* %1, align 8, !dbg !7553
  %3 = bitcast %struct.immediate_use_iterator_d* %imm to i64*, !dbg !7554
  store i64 %2, i64* %3, align 8, !dbg !7554
  %next_imm_name = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 3, !dbg !7555
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next_imm_name, align 8, !dbg !7556
  %prev = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 0, !dbg !7557
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7558
  %next3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 1, !dbg !7559
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next3, align 8, !dbg !7560
  %stmt = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 2, i32 0, !dbg !7561
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %stmt, align 8, !dbg !7562
  %use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 3, !dbg !7563
  store %union.tree_node** null, %union.tree_node*** %use, align 8, !dbg !7564
  %call = tail call fastcc zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #8, !dbg !7565
  %tobool = icmp eq i8 %call, 0, !dbg !7565
  br i1 %tobool, label %if.end, label %return, !dbg !7567

if.end:                                           ; preds = %entry
  %imm_use6 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 0, !dbg !7568
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !7568
  tail call fastcc void @link_use_stmts_after(%struct.ssa_use_operand_d* %4, %struct.immediate_use_iterator_d* %imm) #8, !dbg !7569
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use6, align 8, !dbg !7570
  %stmt9 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i64 0, i32 2, i32 0, !dbg !7570
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt9, align 8, !dbg !7570
  br label %return, !dbg !7571

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.gimple_statement_d* [ %6, %if.end ], [ null, %entry ], !dbg !7549
  ret %union.gimple_statement_d* %retval.0, !dbg !7572
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) unnamed_addr #0 !dbg !7573 {
entry:
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !7579, metadata !DIExpression()), !dbg !7580
  %imm_use = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 0, !dbg !7581
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use, align 8, !dbg !7581
  %end_p = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 1, !dbg !7582
  %1 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %end_p, align 8, !dbg !7582
  %cmp = icmp eq %struct.ssa_use_operand_d* %0, %1, !dbg !7583
  %conv1 = zext i1 %cmp to i8, !dbg !7584
  ret i8 %conv1, !dbg !7585
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @next_imm_use_stmt(%struct.immediate_use_iterator_d* %imm) unnamed_addr #0 !dbg !7586 {
entry:
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !7590, metadata !DIExpression()), !dbg !7591
  %next = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 1, !dbg !7592
  %0 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !7592
  %1 = load i64, i64* %0, align 8, !dbg !7592
  %2 = bitcast %struct.immediate_use_iterator_d* %imm to i64*, !dbg !7593
  store i64 %1, i64* %2, align 8, !dbg !7593
  %call = tail call fastcc zeroext i8 @end_imm_use_stmt_p(%struct.immediate_use_iterator_d* %imm) #8, !dbg !7594
  %tobool = icmp eq i8 %call, 0, !dbg !7594
  br i1 %tobool, label %if.end4, label %if.then, !dbg !7596

if.then:                                          ; preds = %entry
  %prev = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 0, !dbg !7597
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7597
  %cmp = icmp eq %struct.ssa_use_operand_d* %3, null, !dbg !7600
  br i1 %cmp, label %return, label %if.then2, !dbg !7601

if.then2:                                         ; preds = %if.then
  %iter_node3 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, !dbg !7602
  tail call fastcc void @delink_imm_use(%struct.ssa_use_operand_d* nonnull %iter_node3) #8, !dbg !7603
  br label %return, !dbg !7603

if.end4:                                          ; preds = %entry
  %imm_use5 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 0, !dbg !7604
  %4 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !7604
  tail call fastcc void @link_use_stmts_after(%struct.ssa_use_operand_d* %4, %struct.immediate_use_iterator_d* %imm) #8, !dbg !7605
  %5 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %imm_use5, align 8, !dbg !7606
  %stmt = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %5, i64 0, i32 2, i32 0, !dbg !7606
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7606
  br label %return, !dbg !7607

return:                                           ; preds = %if.then, %if.then2, %if.end4
  %retval.0 = phi %union.gimple_statement_d* [ %6, %if.end4 ], [ null, %if.then2 ], [ null, %if.then ], !dbg !7591
  ret %union.gimple_statement_d* %retval.0, !dbg !7608
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @link_use_stmts_after(%struct.ssa_use_operand_d* %head, %struct.immediate_use_iterator_d* %imm) unnamed_addr #0 !dbg !7609 {
entry:
  %op_iter = alloca %struct.ssa_operand_iterator_d, align 8
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %head, metadata !7613, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.immediate_use_iterator_d* %imm, metadata !7614, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %head, metadata !7616, metadata !DIExpression()), !dbg !7633
  %stmt = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %head, i64 0, i32 2, i32 0, !dbg !7634
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !7634
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %0, metadata !7617, metadata !DIExpression()), !dbg !7633
  %call = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %head) #8, !dbg !7635
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !7618, metadata !DIExpression()), !dbg !7633
  %1 = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %op_iter, i64 0, i32 0, !dbg !7636
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %1) #7, !dbg !7636
  %call1 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %call) #6, !dbg !7637
  %tobool = icmp eq i8 %call1, 0, !dbg !7637
  %cond = select i1 %tobool, i32 4, i32 1, !dbg !7637
  call void @llvm.dbg.value(metadata i32 %cond, metadata !7632, metadata !DIExpression()), !dbg !7633
  %call2 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %0) #8, !dbg !7638
  %cmp = icmp eq i32 %call2, 16, !dbg !7640
  br i1 %cmp, label %if.then, label %if.else, !dbg !7641

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !7619, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  %call4 = call fastcc %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* nonnull %op_iter, %union.gimple_statement_d* %0, i32 %cond) #8, !dbg !7642
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call4, metadata !7615, metadata !DIExpression()), !dbg !7633
  br label %for.cond, !dbg !7642

for.cond:                                         ; preds = %for.inc, %if.then
  %use_p.0 = phi %struct.ssa_use_operand_d* [ %call4, %if.then ], [ %call12, %for.inc ], !dbg !7645
  %last_p.0 = phi %struct.ssa_use_operand_d* [ %head, %if.then ], [ %last_p.1, %for.inc ], !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.0, metadata !7616, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_p.0, metadata !7615, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !7619, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  %call5 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %op_iter) #8, !dbg !7646
  %tobool6 = icmp eq i8 %call5, 0, !dbg !7646
  br i1 %tobool6, label %for.body, label %if.end44.loopexit, !dbg !7642

for.body:                                         ; preds = %for.cond
  %call7 = call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_p.0) #8, !dbg !7648
  %cmp8 = icmp eq %union.tree_node* %call7, %call, !dbg !7650
  br i1 %cmp8, label %if.then10, label %for.inc, !dbg !7651

if.then10:                                        ; preds = %for.body
  %call11 = call fastcc %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p.0, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p.0) #8, !dbg !7652
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call11, metadata !7616, metadata !DIExpression()), !dbg !7633
  br label %for.inc, !dbg !7653

for.inc:                                          ; preds = %for.body, %if.then10
  %last_p.1 = phi %struct.ssa_use_operand_d* [ %call11, %if.then10 ], [ %last_p.0, %for.body ], !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.1, metadata !7616, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !7619, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  %call12 = call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* nonnull %op_iter) #8, !dbg !7646
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call12, metadata !7615, metadata !DIExpression()), !dbg !7633
  br label %for.cond, !dbg !7646, !llvm.loop !7654

if.else:                                          ; preds = %entry
  br i1 %tobool, label %if.else31, label %if.then15, !dbg !7656

if.then15:                                        ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !7619, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  %call16 = call fastcc %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* nonnull %op_iter, %union.gimple_statement_d* %0, i32 %cond) #8, !dbg !7658
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call16, metadata !7615, metadata !DIExpression()), !dbg !7633
  br label %for.cond17, !dbg !7658

for.cond17:                                       ; preds = %for.inc28, %if.then15
  %use_p.1 = phi %struct.ssa_use_operand_d* [ %call16, %if.then15 ], [ %call29, %for.inc28 ], !dbg !7662
  %last_p.2 = phi %struct.ssa_use_operand_d* [ %head, %if.then15 ], [ %last_p.3, %for.inc28 ], !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.2, metadata !7616, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_p.1, metadata !7615, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !7619, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  %call18 = call fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* nonnull %op_iter) #8, !dbg !7663
  %tobool19 = icmp eq i8 %call18, 0, !dbg !7663
  br i1 %tobool19, label %for.body21, label %if.end44.loopexit1, !dbg !7658

for.body21:                                       ; preds = %for.cond17
  %call22 = call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use_p.1) #8, !dbg !7665
  %cmp23 = icmp eq %union.tree_node* %call22, %call, !dbg !7667
  br i1 %cmp23, label %if.then25, label %for.inc28, !dbg !7668

if.then25:                                        ; preds = %for.body21
  %call26 = call fastcc %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p.1, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p.2) #8, !dbg !7669
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call26, metadata !7616, metadata !DIExpression()), !dbg !7633
  br label %for.inc28, !dbg !7670

for.inc28:                                        ; preds = %for.body21, %if.then25
  %last_p.3 = phi %struct.ssa_use_operand_d* [ %call26, %if.then25 ], [ %last_p.2, %for.body21 ], !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.3, metadata !7616, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %op_iter, metadata !7619, metadata !DIExpression(DW_OP_deref)), !dbg !7633
  %call29 = call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* nonnull %op_iter) #8, !dbg !7663
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call29, metadata !7615, metadata !DIExpression()), !dbg !7633
  br label %for.cond17, !dbg !7663, !llvm.loop !7671

if.else31:                                        ; preds = %if.else
  %call32 = tail call fastcc %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %0) #8, !dbg !7673
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call32, metadata !7615, metadata !DIExpression()), !dbg !7633
  %cmp33 = icmp eq %struct.ssa_use_operand_d* %call32, null, !dbg !7675
  br i1 %cmp33, label %if.end44, label %if.then35, !dbg !7676

if.then35:                                        ; preds = %if.else31
  %call36 = tail call fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* nonnull %call32) #8, !dbg !7677
  %cmp37 = icmp eq %union.tree_node* %call36, %call, !dbg !7680
  br i1 %cmp37, label %if.then39, label %if.end44, !dbg !7681

if.then39:                                        ; preds = %if.then35
  %call40 = tail call fastcc %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* nonnull %call32, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %head) #8, !dbg !7682
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %call40, metadata !7616, metadata !DIExpression()), !dbg !7633
  br label %if.end44, !dbg !7683

if.end44.loopexit:                                ; preds = %for.cond
  %last_p.0.lcssa = phi %struct.ssa_use_operand_d* [ %last_p.0, %for.cond ], !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.0.lcssa, metadata !7616, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.0.lcssa, metadata !7616, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.0.lcssa, metadata !7616, metadata !DIExpression()), !dbg !7633
  br label %if.end44, !dbg !7684

if.end44.loopexit1:                               ; preds = %for.cond17
  %last_p.2.lcssa = phi %struct.ssa_use_operand_d* [ %last_p.2, %for.cond17 ], !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.2.lcssa, metadata !7616, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.2.lcssa, metadata !7616, metadata !DIExpression()), !dbg !7633
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.2.lcssa, metadata !7616, metadata !DIExpression()), !dbg !7633
  br label %if.end44, !dbg !7684

if.end44:                                         ; preds = %if.end44.loopexit1, %if.end44.loopexit, %if.else31, %if.then35, %if.then39
  %last_p.7 = phi %struct.ssa_use_operand_d* [ %head, %if.else31 ], [ %call40, %if.then39 ], [ %head, %if.then35 ], [ %last_p.0.lcssa, %if.end44.loopexit ], [ %last_p.2.lcssa, %if.end44.loopexit1 ], !dbg !7686
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.7, metadata !7616, metadata !DIExpression()), !dbg !7633
  %prev = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, i32 0, !dbg !7684
  %2 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7684
  %cmp45 = icmp eq %struct.ssa_use_operand_d* %2, null, !dbg !7687
  br i1 %cmp45, label %if.end49, label %if.then47, !dbg !7688

if.then47:                                        ; preds = %if.end44
  %iter_node48 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, !dbg !7689
  call fastcc void @delink_imm_use(%struct.ssa_use_operand_d* nonnull %iter_node48) #8, !dbg !7690
  br label %if.end49, !dbg !7690

if.end49:                                         ; preds = %if.end44, %if.then47
  %iter_node50 = getelementptr inbounds %struct.immediate_use_iterator_d, %struct.immediate_use_iterator_d* %imm, i64 0, i32 2, !dbg !7691
  call fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* nonnull %iter_node50, %struct.ssa_use_operand_d* %last_p.7) #8, !dbg !7692
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1) #7, !dbg !7693
  ret void, !dbg !7693
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @get_use_from_ptr(%struct.ssa_use_operand_d* %use) unnamed_addr #0 !dbg !7694 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use, metadata !7698, metadata !DIExpression()), !dbg !7699
  %use1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %use, i64 0, i32 3, !dbg !7700
  %0 = load %union.tree_node**, %union.tree_node*** %use1, align 8, !dbg !7700
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7701
  ret %union.tree_node* %1, !dbg !7702
}

declare dso_local zeroext i8 @is_gimple_reg(%union.tree_node*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @op_iter_init_phiuse(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %phi, i32 %flags) unnamed_addr #0 !dbg !7703 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !7708, metadata !DIExpression()), !dbg !7713
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %phi, metadata !7709, metadata !DIExpression()), !dbg !7713
  call void @llvm.dbg.value(metadata i32 %flags, metadata !7710, metadata !DIExpression()), !dbg !7713
  %call = tail call fastcc %union.tree_node* @gimple_phi_result(%union.gimple_statement_d* %phi) #8, !dbg !7714
  call void @llvm.dbg.value(metadata %union.tree_node* %call, metadata !7711, metadata !DIExpression()), !dbg !7713
  tail call fastcc void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) #8, !dbg !7715
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !7716
  store i8 0, i8* %done, align 8, !dbg !7717
  %and = and i32 %flags, 5, !dbg !7718
  %cmp = icmp eq i32 %and, 0, !dbg !7718
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !7718

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56, i64 0, i64 0), i32 918, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !7718
  br label %cond.end, !dbg !7718

cond.end:                                         ; preds = %entry, %cond.true
  %call1 = tail call zeroext i8 @is_gimple_reg(%union.tree_node* %call) #6, !dbg !7719
  %tobool = icmp eq i8 %call1, 0, !dbg !7719
  %cond2 = select i1 %tobool, i32 4, i32 1, !dbg !7719
  call void @llvm.dbg.value(metadata i32 %cond2, metadata !7712, metadata !DIExpression()), !dbg !7713
  %and3 = and i32 %cond2, %flags, !dbg !7720
  %cmp4 = icmp eq i32 %and3, 0, !dbg !7722
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7723

if.then:                                          ; preds = %cond.end
  store i8 1, i8* %done, align 8, !dbg !7724
  br label %cleanup, !dbg !7726

if.end:                                           ; preds = %cond.end
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !7727
  store %union.gimple_statement_d* %phi, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7728
  %call7 = tail call fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %phi) #8, !dbg !7729
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !7730
  store i32 %call7, i32* %num_phi, align 4, !dbg !7731
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !7732
  store i32 2, i32* %iter_type, align 4, !dbg !7733
  %call8 = tail call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #8, !dbg !7734
  br label %cleanup, !dbg !7735

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi %struct.ssa_use_operand_d* [ null, %if.then ], [ %call8, %if.end ], !dbg !7713
  ret %struct.ssa_use_operand_d* %retval.0, !dbg !7736
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @op_iter_done(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !7737 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !7743, metadata !DIExpression()), !dbg !7744
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !7745
  %0 = load i8, i8* %done, align 8, !dbg !7745
  ret i8 %0, !dbg !7746
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @move_use_after_head(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %head, %struct.ssa_use_operand_d* %last_p) unnamed_addr #0 !dbg !7747 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_p, metadata !7751, metadata !DIExpression()), !dbg !7754
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %head, metadata !7752, metadata !DIExpression()), !dbg !7754
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p, metadata !7753, metadata !DIExpression()), !dbg !7754
  %cmp = icmp eq %struct.ssa_use_operand_d* %use_p, %head, !dbg !7755
  br i1 %cmp, label %if.end3, label %if.then, !dbg !7757

if.then:                                          ; preds = %entry
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %last_p, i64 0, i32 1, !dbg !7758
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7758
  %cmp1 = icmp eq %struct.ssa_use_operand_d* %0, %use_p, !dbg !7761
  br i1 %cmp1, label %if.end3, label %if.else, !dbg !7762

if.else:                                          ; preds = %if.then
  tail call fastcc void @delink_imm_use(%struct.ssa_use_operand_d* %use_p) #8, !dbg !7763
  tail call fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* %use_p, %struct.ssa_use_operand_d* %last_p) #8, !dbg !7765
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_p, metadata !7753, metadata !DIExpression()), !dbg !7754
  br label %if.end3

if.end3:                                          ; preds = %entry, %if.else, %if.then
  %last_p.addr.1 = phi %struct.ssa_use_operand_d* [ %last_p, %entry ], [ %use_p, %if.then ], [ %use_p, %if.else ]
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %last_p.addr.1, metadata !7753, metadata !DIExpression()), !dbg !7754
  ret %struct.ssa_use_operand_d* %last_p.addr.1, !dbg !7766
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !7767 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !7771, metadata !DIExpression()), !dbg !7773
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !7774
  %0 = load %struct.use_optype_d*, %struct.use_optype_d** %uses, align 8, !dbg !7774
  %tobool = icmp eq %struct.use_optype_d* %0, null, !dbg !7776
  br i1 %tobool, label %if.end, label %if.then, !dbg !7777

if.then:                                          ; preds = %entry
  %use_ptr = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %0, i64 0, i32 1, !dbg !7778
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %use_ptr, metadata !7772, metadata !DIExpression()), !dbg !7773
  %1 = bitcast %struct.use_optype_d* %0 to i64*, !dbg !7780
  %2 = load i64, i64* %1, align 8, !dbg !7780
  %3 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !7781
  store i64 %2, i64* %3, align 8, !dbg !7781
  br label %cleanup, !dbg !7782

if.end:                                           ; preds = %entry
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !7783
  %4 = load i32, i32* %phi_i, align 8, !dbg !7783
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !7785
  %5 = load i32, i32* %num_phi, align 4, !dbg !7785
  %cmp = icmp slt i32 %4, %5, !dbg !7786
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !7787

if.then4:                                         ; preds = %if.end
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !7788
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7788
  %inc = add nsw i32 %4, 1, !dbg !7788
  store i32 %inc, i32* %phi_i, align 8, !dbg !7788
  %call = tail call fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %6, i32 %4) #8, !dbg !7788
  br label %cleanup, !dbg !7790

if.end6:                                          ; preds = %if.end
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !7791
  store i8 1, i8* %done, align 8, !dbg !7792
  br label %cleanup, !dbg !7793

cleanup:                                          ; preds = %if.end6, %if.then4, %if.then
  %retval.0 = phi %struct.ssa_use_operand_d* [ %use_ptr, %if.then ], [ %call, %if.then4 ], [ null, %if.end6 ], !dbg !7773
  ret %struct.ssa_use_operand_d* %retval.0, !dbg !7794
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @op_iter_init_use(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !7795 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !7797, metadata !DIExpression()), !dbg !7800
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7798, metadata !DIExpression()), !dbg !7800
  call void @llvm.dbg.value(metadata i32 %flags, metadata !7799, metadata !DIExpression()), !dbg !7800
  %0 = and i32 %flags, 11, !dbg !7801
  %1 = icmp eq i32 %0, 1, !dbg !7801
  br i1 %1, label %cond.end, label %cond.true, !dbg !7801

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56, i64 0, i64 0), i32 771, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !7801
  br label %cond.end, !dbg !7801

cond.end:                                         ; preds = %entry, %cond.true
  tail call fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) #8, !dbg !7802
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !7803
  store i32 2, i32* %iter_type, align 4, !dbg !7804
  %call = tail call fastcc %struct.ssa_use_operand_d* @op_iter_next_use(%struct.ssa_operand_iterator_d* %ptr) #8, !dbg !7805
  ret %struct.ssa_use_operand_d* %call, !dbg !7806
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @gimple_vuse_op(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7807 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7811, metadata !DIExpression()), !dbg !7813
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #8, !dbg !7814
  %tobool = icmp eq i8 %call, 0, !dbg !7814
  br i1 %tobool, label %cleanup, label %if.end, !dbg !7816

if.end:                                           ; preds = %entry
  %use_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !7817
  %0 = bitcast %union.tree_node** %use_ops to %struct.use_optype_d**, !dbg !7817
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %0, align 8, !dbg !7817
  call void @llvm.dbg.value(metadata %struct.use_optype_d* %1, metadata !7812, metadata !DIExpression()), !dbg !7813
  %tobool1 = icmp eq %struct.use_optype_d* %1, null, !dbg !7818
  br i1 %tobool1, label %cleanup, label %land.lhs.true, !dbg !7820

land.lhs.true:                                    ; preds = %if.end
  %use = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %1, i64 0, i32 1, i32 3, !dbg !7821
  %2 = load %union.tree_node**, %union.tree_node*** %use, align 8, !dbg !7821
  %vuse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !7822
  %3 = bitcast %struct.ssa_use_operand_d** %vuse to %union.tree_node**, !dbg !7822
  %cmp = icmp eq %union.tree_node** %2, %3, !dbg !7823
  %use_ptr3 = getelementptr inbounds %struct.use_optype_d, %struct.use_optype_d* %1, i64 0, i32 1, !dbg !7824
  %spec.select = select i1 %cmp, %struct.ssa_use_operand_d* %use_ptr3, %struct.ssa_use_operand_d* null, !dbg !7825
  ret %struct.ssa_use_operand_d* %spec.select, !dbg !7825

cleanup:                                          ; preds = %if.end, %entry
  ret %struct.ssa_use_operand_d* null, !dbg !7826
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @delink_imm_use(%struct.ssa_use_operand_d* %linknode) unnamed_addr #0 !dbg !7827 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !7831, metadata !DIExpression()), !dbg !7832
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !7833
  %0 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7833
  %cmp = icmp eq %struct.ssa_use_operand_d* %0, null, !dbg !7835
  br i1 %cmp, label %return, label %if.end, !dbg !7836

if.end:                                           ; preds = %entry
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 1, !dbg !7837
  %1 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !7837
  %2 = load i64, i64* %1, align 8, !dbg !7837
  %next2 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %0, i64 0, i32 1, !dbg !7838
  %3 = bitcast %struct.ssa_use_operand_d** %next2 to i64*, !dbg !7839
  store i64 %2, i64* %3, align 8, !dbg !7839
  %4 = bitcast %struct.ssa_use_operand_d* %linknode to i64*, !dbg !7840
  %5 = load i64, i64* %4, align 8, !dbg !7840
  %6 = bitcast %struct.ssa_use_operand_d** %next to i64**, !dbg !7841
  %7 = load i64*, i64** %6, align 8, !dbg !7841
  store i64 %5, i64* %7, align 8, !dbg !7842
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7843
  store %struct.ssa_use_operand_d* null, %struct.ssa_use_operand_d** %next, align 8, !dbg !7844
  br label %return, !dbg !7845

return:                                           ; preds = %entry, %if.end
  ret void, !dbg !7845
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @link_imm_use_to_list(%struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d* %list) unnamed_addr #0 !dbg !7846 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %linknode, metadata !7850, metadata !DIExpression()), !dbg !7852
  call void @llvm.dbg.value(metadata %struct.ssa_use_operand_d* %list, metadata !7851, metadata !DIExpression()), !dbg !7852
  %prev = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 0, !dbg !7853
  store %struct.ssa_use_operand_d* %list, %struct.ssa_use_operand_d** %prev, align 8, !dbg !7854
  %next = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %list, i64 0, i32 1, !dbg !7855
  %0 = bitcast %struct.ssa_use_operand_d** %next to i64*, !dbg !7855
  %1 = load i64, i64* %0, align 8, !dbg !7855
  %next1 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %linknode, i64 0, i32 1, !dbg !7856
  %2 = bitcast %struct.ssa_use_operand_d** %next1 to i64*, !dbg !7857
  store i64 %1, i64* %2, align 8, !dbg !7857
  %3 = load %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d** %next, align 8, !dbg !7858
  %prev3 = getelementptr inbounds %struct.ssa_use_operand_d, %struct.ssa_use_operand_d* %3, i64 0, i32 0, !dbg !7859
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %prev3, align 8, !dbg !7860
  store %struct.ssa_use_operand_d* %linknode, %struct.ssa_use_operand_d** %next, align 8, !dbg !7861
  ret void, !dbg !7862
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @clear_and_done_ssa_iter(%struct.ssa_operand_iterator_d* %ptr) unnamed_addr #0 !dbg !7863 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !7867, metadata !DIExpression()), !dbg !7868
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !7869
  store %struct.def_optype_d* null, %struct.def_optype_d** %defs, align 8, !dbg !7870
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !7871
  store %struct.use_optype_d* null, %struct.use_optype_d** %uses, align 8, !dbg !7872
  %iter_type = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 1, !dbg !7873
  store i32 0, i32* %iter_type, align 4, !dbg !7874
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !7875
  store i32 0, i32* %phi_i, align 8, !dbg !7876
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !7877
  store i32 0, i32* %num_phi, align 4, !dbg !7878
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !7879
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7880
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !7881
  store i8 1, i8* %done, align 8, !dbg !7882
  ret void, !dbg !7883
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_phi_num_args(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !7884 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7886, metadata !DIExpression()), !dbg !7887
  %nargs = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 2, !dbg !7888
  %0 = load i32, i32* %nargs, align 4, !dbg !7888
  ret i32 %0, !dbg !7889
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.ssa_use_operand_d* @gimple_phi_arg_imm_use_ptr(%union.gimple_statement_d* %gs, i32 %i) unnamed_addr #0 !dbg !7890 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7894, metadata !DIExpression()), !dbg !7896
  call void @llvm.dbg.value(metadata i32 %i, metadata !7895, metadata !DIExpression()), !dbg !7896
  %call = tail call fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %i) #8, !dbg !7897
  %imm_use = getelementptr inbounds %struct.phi_arg_d, %struct.phi_arg_d* %call, i64 0, i32 0, !dbg !7898
  ret %struct.ssa_use_operand_d* %imm_use, !dbg !7899
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.phi_arg_d* @gimple_phi_arg(%union.gimple_statement_d* %gs, i32 %index) unnamed_addr #0 !dbg !7900 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !7905, metadata !DIExpression()), !dbg !7907
  call void @llvm.dbg.value(metadata i32 %index, metadata !7906, metadata !DIExpression()), !dbg !7907
  %capacity = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 1, !dbg !7908
  %0 = load i32, i32* %capacity, align 8, !dbg !7908
  %cmp = icmp ult i32 %0, %index, !dbg !7908
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !7908

cond.true:                                        ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0), i32 3103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !7908
  br label %cond.end, !dbg !7908

cond.end:                                         ; preds = %entry, %cond.true
  %idxprom = zext i32 %index to i64, !dbg !7909
  %arrayidx = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %gs, i64 0, i32 0, i32 4, i64 %idxprom, !dbg !7909
  ret %struct.phi_arg_d* %arrayidx, !dbg !7910
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @op_iter_init(%struct.ssa_operand_iterator_d* %ptr, %union.gimple_statement_d* %stmt, i32 %flags) unnamed_addr #0 !dbg !7911 {
entry:
  call void @llvm.dbg.value(metadata %struct.ssa_operand_iterator_d* %ptr, metadata !7915, metadata !DIExpression()), !dbg !7918
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !7916, metadata !DIExpression()), !dbg !7918
  call void @llvm.dbg.value(metadata i32 %flags, metadata !7917, metadata !DIExpression()), !dbg !7918
  %0 = and i32 %flags, 10, !dbg !7919
  %1 = icmp eq i32 %0, 8, !dbg !7919
  br i1 %1, label %cond.true, label %land.lhs.true, !dbg !7919

land.lhs.true:                                    ; preds = %entry
  %2 = and i32 %flags, 5, !dbg !7919
  %3 = icmp eq i32 %2, 4, !dbg !7919
  br i1 %3, label %cond.true, label %cond.end, !dbg !7919

cond.true:                                        ; preds = %land.lhs.true, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.56, i64 0, i64 0), i32 747, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !7919
  br label %cond.end, !dbg !7919

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %tobool9 = icmp eq i32 %0, 0, !dbg !7920
  br i1 %tobool9, label %cond.end12, label %cond.true10, !dbg !7921

cond.true10:                                      ; preds = %cond.end
  %call = tail call fastcc %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %stmt) #8, !dbg !7922
  br label %cond.end12, !dbg !7921

cond.end12:                                       ; preds = %cond.end, %cond.true10
  %4 = phi %struct.def_optype_d* [ %call, %cond.true10 ], [ null, %cond.end ], !dbg !7921
  %defs = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 2, !dbg !7923
  store %struct.def_optype_d* %4, %struct.def_optype_d** %defs, align 8, !dbg !7924
  %and14 = and i32 %flags, 8, !dbg !7925
  %tobool15 = icmp eq i32 %and14, 0, !dbg !7925
  br i1 %tobool15, label %land.lhs.true16, label %if.end, !dbg !7927

land.lhs.true16:                                  ; preds = %cond.end12
  %tobool18 = icmp eq %struct.def_optype_d* %4, null, !dbg !7928
  br i1 %tobool18, label %if.end, label %land.lhs.true19, !dbg !7929

land.lhs.true19:                                  ; preds = %land.lhs.true16
  %call20 = tail call fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %stmt) #8, !dbg !7930
  %cmp = icmp eq %union.tree_node* %call20, null, !dbg !7931
  br i1 %cmp, label %if.end, label %if.then, !dbg !7932

if.then:                                          ; preds = %land.lhs.true19
  %5 = bitcast %struct.def_optype_d** %defs to i64**, !dbg !7933
  %6 = load i64*, i64** %5, align 8, !dbg !7933
  %7 = load i64, i64* %6, align 8, !dbg !7934
  %8 = bitcast %struct.def_optype_d** %defs to i64*, !dbg !7935
  store i64 %7, i64* %8, align 8, !dbg !7935
  br label %if.end, !dbg !7936

if.end:                                           ; preds = %land.lhs.true19, %land.lhs.true16, %cond.end12, %if.then
  %and23 = and i32 %flags, 5, !dbg !7937
  %tobool24 = icmp eq i32 %and23, 0, !dbg !7937
  br i1 %tobool24, label %cond.end28, label %cond.true25, !dbg !7938

cond.true25:                                      ; preds = %if.end
  %call26 = tail call fastcc %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %stmt) #8, !dbg !7939
  br label %cond.end28, !dbg !7938

cond.end28:                                       ; preds = %if.end, %cond.true25
  %9 = phi %struct.use_optype_d* [ %call26, %cond.true25 ], [ null, %if.end ], !dbg !7938
  %uses = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 3, !dbg !7940
  store %struct.use_optype_d* %9, %struct.use_optype_d** %uses, align 8, !dbg !7941
  %and30 = and i32 %flags, 4, !dbg !7942
  %tobool31 = icmp eq i32 %and30, 0, !dbg !7942
  br i1 %tobool31, label %land.lhs.true32, label %if.end42, !dbg !7944

land.lhs.true32:                                  ; preds = %cond.end28
  %tobool34 = icmp eq %struct.use_optype_d* %9, null, !dbg !7945
  br i1 %tobool34, label %if.end42, label %land.lhs.true35, !dbg !7946

land.lhs.true35:                                  ; preds = %land.lhs.true32
  %call36 = tail call fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %stmt) #8, !dbg !7947
  %cmp37 = icmp eq %union.tree_node* %call36, null, !dbg !7948
  br i1 %cmp37, label %if.end42, label %if.then38, !dbg !7949

if.then38:                                        ; preds = %land.lhs.true35
  %10 = bitcast %struct.use_optype_d** %uses to i64**, !dbg !7950
  %11 = load i64*, i64** %10, align 8, !dbg !7950
  %12 = load i64, i64* %11, align 8, !dbg !7951
  %13 = bitcast %struct.use_optype_d** %uses to i64*, !dbg !7952
  store i64 %12, i64* %13, align 8, !dbg !7952
  br label %if.end42, !dbg !7953

if.end42:                                         ; preds = %land.lhs.true35, %land.lhs.true32, %cond.end28, %if.then38
  %done = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 0, !dbg !7954
  store i8 0, i8* %done, align 8, !dbg !7955
  %phi_i = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 4, !dbg !7956
  store i32 0, i32* %phi_i, align 8, !dbg !7957
  %num_phi = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 5, !dbg !7958
  store i32 0, i32* %num_phi, align 4, !dbg !7959
  %phi_stmt = getelementptr inbounds %struct.ssa_operand_iterator_d, %struct.ssa_operand_iterator_d* %ptr, i64 0, i32 6, !dbg !7960
  store %union.gimple_statement_d* null, %union.gimple_statement_d** %phi_stmt, align 8, !dbg !7961
  ret void, !dbg !7962
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.def_optype_d* @gimple_def_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7963 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7967, metadata !DIExpression()), !dbg !7968
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #8, !dbg !7969
  %tobool = icmp eq i8 %call, 0, !dbg !7969
  br i1 %tobool, label %return, label %if.end, !dbg !7971

if.end:                                           ; preds = %entry
  %def_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 1, !dbg !7972
  %0 = bitcast i32* %def_ops to %struct.def_optype_d**, !dbg !7972
  %1 = load %struct.def_optype_d*, %struct.def_optype_d** %0, align 8, !dbg !7972
  br label %return, !dbg !7973

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %struct.def_optype_d* [ %1, %if.end ], [ null, %entry ], !dbg !7968
  ret %struct.def_optype_d* %retval.0, !dbg !7974
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vdef(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7975 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7977, metadata !DIExpression()), !dbg !7978
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #8, !dbg !7979
  %tobool = icmp eq i8 %call, 0, !dbg !7979
  br i1 %tobool, label %return, label %if.end, !dbg !7981

if.end:                                           ; preds = %entry
  %vdef = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, !dbg !7982
  %0 = bitcast [1 x %struct.phi_arg_d]* %vdef to %union.tree_node**, !dbg !7982
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !7982
  br label %return, !dbg !7983

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !7978
  ret %union.tree_node* %retval.0, !dbg !7984
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.use_optype_d* @gimple_use_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7985 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7989, metadata !DIExpression()), !dbg !7990
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #8, !dbg !7991
  %tobool = icmp eq i8 %call, 0, !dbg !7991
  br i1 %tobool, label %return, label %if.end, !dbg !7993

if.end:                                           ; preds = %entry
  %use_ops = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 3, !dbg !7994
  %0 = bitcast %union.tree_node** %use_ops to %struct.use_optype_d**, !dbg !7994
  %1 = load %struct.use_optype_d*, %struct.use_optype_d** %0, align 8, !dbg !7994
  br label %return, !dbg !7995

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %struct.use_optype_d* [ %1, %if.end ], [ null, %entry ], !dbg !7990
  ret %struct.use_optype_d* %retval.0, !dbg !7996
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_vuse(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !7997 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !7999, metadata !DIExpression()), !dbg !8000
  %call = tail call fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) #8, !dbg !8001
  %tobool = icmp eq i8 %call, 0, !dbg !8001
  br i1 %tobool, label %return, label %if.end, !dbg !8003

if.end:                                           ; preds = %entry
  %vuse = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 4, i64 0, i32 0, i32 1, !dbg !8004
  %0 = bitcast %struct.ssa_use_operand_d** %vuse to %union.tree_node**, !dbg !8004
  %1 = load %union.tree_node*, %union.tree_node** %0, align 8, !dbg !8004
  br label %return, !dbg !8005

return:                                           ; preds = %entry, %if.end
  %retval.0 = phi %union.tree_node* [ %1, %if.end ], [ null, %entry ], !dbg !8000
  ret %union.tree_node* %retval.0, !dbg !8006
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc zeroext i8 @gimple_has_mem_ops(%union.gimple_statement_d* %g) unnamed_addr #0 !dbg !8007 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !8009, metadata !DIExpression()), !dbg !8010
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !8011
  %cmp = icmp ugt i32 %call, 5, !dbg !8012
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8013

land.rhs:                                         ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %g) #8, !dbg !8014
  %cmp2 = icmp ult i32 %call1, 10, !dbg !8015
  %phitmp = zext i1 %cmp2 to i8
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %0 = phi i8 [ 0, %entry ], [ %phitmp, %land.rhs ]
  ret i8 %0, !dbg !8016
}

declare dso_local i8* @xcalloc(i64, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_uid(%union.gimple_statement_d* %g, i32 %uid) unnamed_addr #0 !dbg !8017 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %g, metadata !8021, metadata !DIExpression()), !dbg !8023
  call void @llvm.dbg.value(metadata i32 %uid, metadata !8022, metadata !DIExpression()), !dbg !8023
  %uid1 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %g, i64 0, i32 0, i32 0, i32 1, !dbg !8024
  store i32 %uid, i32* %uid1, align 4, !dbg !8025
  ret void, !dbg !8026
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @set_vinfo_for_stmt(%union.gimple_statement_d* %stmt, %struct._stmt_vec_info* %info) unnamed_addr #0 !dbg !8027 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !8031, metadata !DIExpression()), !dbg !8034
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %info, metadata !8032, metadata !DIExpression()), !dbg !8034
  %call = tail call fastcc i32 @gimple_uid(%union.gimple_statement_d* %stmt) #8, !dbg !8035
  call void @llvm.dbg.value(metadata i32 %call, metadata !8033, metadata !DIExpression()), !dbg !8034
  %cmp = icmp eq i32 %call, 0, !dbg !8036
  br i1 %cmp, label %if.then, label %if.else, !dbg !8038

if.then:                                          ; preds = %entry
  %tobool = icmp eq %struct._stmt_vec_info* %info, null, !dbg !8039
  br i1 %tobool, label %cond.true, label %cond.end, !dbg !8039

cond.true:                                        ; preds = %if.then
  tail call void @fancy_abort(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.52, i64 0, i64 0), i32 639, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !8039
  br label %cond.end, !dbg !8039

cond.end:                                         ; preds = %if.then, %cond.true
  %0 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8041
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %0, i64 0, i32 0, !dbg !8041
  %call6 = tail call fastcc i32 @VEC_vec_void_p_base_length(%struct.VEC_vec_void_p_base* %base) #8, !dbg !8041
  %add = add i32 %call6, 1, !dbg !8042
  call void @llvm.dbg.value(metadata i32 %add, metadata !8033, metadata !DIExpression()), !dbg !8034
  tail call fastcc void @gimple_set_uid(%union.gimple_statement_d* %stmt, i32 %add) #8, !dbg !8043
  %1 = bitcast %struct._stmt_vec_info* %info to i8*, !dbg !8044
  %call7 = tail call fastcc i8** @VEC_vec_void_p_heap_safe_push(%struct.VEC_vec_void_p_heap** nonnull @stmt_vec_info_vec, i8* %1) #8, !dbg !8044
  br label %if.end, !dbg !8045

if.else:                                          ; preds = %entry
  %2 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8046
  %base10 = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %2, i64 0, i32 0, !dbg !8046
  %sub = add i32 %call, -1, !dbg !8046
  %3 = bitcast %struct._stmt_vec_info* %info to i8*, !dbg !8046
  %call14 = tail call fastcc i8* @VEC_vec_void_p_base_replace(%struct.VEC_vec_void_p_base* %base10, i32 %sub, i8* %3) #8, !dbg !8046
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  ret void, !dbg !8047
}

declare dso_local %struct._stmt_vec_info* @new_stmt_vec_info(%union.gimple_statement_d*, %struct._loop_vec_info*, %struct._bb_vec_info*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct.VEC_slp_instance_heap* @VEC_slp_instance_heap_alloc(i32 %alloc_) unnamed_addr #0 !dbg !8048 {
entry:
  call void @llvm.dbg.value(metadata i32 2, metadata !8052, metadata !DIExpression()), !dbg !8053
  %call = tail call i8* @vec_heap_p_reserve_exact(i8* null, i32 2) #6, !dbg !8054
  %0 = bitcast i8* %call to %struct.VEC_slp_instance_heap*, !dbg !8054
  ret %struct.VEC_slp_instance_heap* %0, !dbg !8054
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8** @VEC_vec_void_p_heap_safe_push(%struct.VEC_vec_void_p_heap** %vec_, i8* %obj_) unnamed_addr #0 !dbg !8055 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, metadata !8061, metadata !DIExpression()), !dbg !8063
  call void @llvm.dbg.value(metadata i8* %obj_, metadata !8062, metadata !DIExpression()), !dbg !8063
  %call = tail call fastcc i32 @VEC_vec_void_p_heap_reserve(%struct.VEC_vec_void_p_heap** nonnull @stmt_vec_info_vec, i32 1) #8, !dbg !8064
  %0 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8064
  %tobool = icmp eq %struct.VEC_vec_void_p_heap* %0, null, !dbg !8064
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8064

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %0, i64 0, i32 0, !dbg !8064
  br label %cond.end, !dbg !8064

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_vec_void_p_base* [ %base, %cond.true ], [ null, %entry ], !dbg !8064
  %call1 = tail call fastcc i8** @VEC_vec_void_p_base_quick_push(%struct.VEC_vec_void_p_base* %cond, i8* %obj_) #8, !dbg !8064
  ret i8** %call1, !dbg !8064
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8* @VEC_vec_void_p_base_replace(%struct.VEC_vec_void_p_base* %vec_, i32 %ix_, i8* %obj_) unnamed_addr #0 !dbg !8065 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_vec_void_p_base* %vec_, metadata !8070, metadata !DIExpression()), !dbg !8074
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !8071, metadata !DIExpression()), !dbg !8074
  call void @llvm.dbg.value(metadata i8* %obj_, metadata !8072, metadata !DIExpression()), !dbg !8074
  %idxprom = zext i32 %ix_ to i64, !dbg !8075
  %arrayidx = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8075
  %0 = load i8*, i8** %arrayidx, align 8, !dbg !8075
  call void @llvm.dbg.value(metadata i8* %0, metadata !8073, metadata !DIExpression()), !dbg !8074
  store i8* %obj_, i8** %arrayidx, align 8, !dbg !8075
  ret i8* %0, !dbg !8075
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_vec_void_p_heap_reserve(%struct.VEC_vec_void_p_heap** %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8076 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, metadata !8080, metadata !DIExpression()), !dbg !8083
  call void @llvm.dbg.value(metadata i32 1, metadata !8081, metadata !DIExpression()), !dbg !8083
  %0 = load %struct.VEC_vec_void_p_heap*, %struct.VEC_vec_void_p_heap** @stmt_vec_info_vec, align 8, !dbg !8084
  %tobool = icmp eq %struct.VEC_vec_void_p_heap* %0, null, !dbg !8084
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8084

cond.true:                                        ; preds = %entry
  %base = getelementptr inbounds %struct.VEC_vec_void_p_heap, %struct.VEC_vec_void_p_heap* %0, i64 0, i32 0, !dbg !8084
  br label %cond.end, !dbg !8084

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi %struct.VEC_vec_void_p_base* [ %base, %cond.true ], [ null, %entry ], !dbg !8084
  %call = tail call fastcc i32 @VEC_vec_void_p_base_space(%struct.VEC_vec_void_p_base* %cond, i32 1) #8, !dbg !8084
  %tobool1 = icmp eq i32 %call, 0, !dbg !8084
  %lnot.ext = zext i1 %tobool1 to i32, !dbg !8084
  call void @llvm.dbg.value(metadata i32 %lnot.ext, metadata !8082, metadata !DIExpression()), !dbg !8083
  br i1 %tobool1, label %if.then, label %if.end, !dbg !8084

if.then:                                          ; preds = %cond.end
  %1 = load i8*, i8** bitcast (%struct.VEC_vec_void_p_heap** @stmt_vec_info_vec to i8**), align 8, !dbg !8085
  %call3 = tail call i8* @vec_heap_p_reserve(i8* %1, i32 1) #6, !dbg !8085
  store i8* %call3, i8** bitcast (%struct.VEC_vec_void_p_heap** @stmt_vec_info_vec to i8**), align 8, !dbg !8085
  br label %if.end, !dbg !8085

if.end:                                           ; preds = %if.then, %cond.end
  ret i32 %lnot.ext, !dbg !8084
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8** @VEC_vec_void_p_base_quick_push(%struct.VEC_vec_void_p_base* %vec_, i8* %obj_) unnamed_addr #0 !dbg !8087 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_vec_void_p_base* %vec_, metadata !8091, metadata !DIExpression()), !dbg !8094
  call void @llvm.dbg.value(metadata i8* %obj_, metadata !8092, metadata !DIExpression()), !dbg !8094
  %num1 = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %vec_, i64 0, i32 0, !dbg !8095
  %0 = load i32, i32* %num1, align 8, !dbg !8095
  %inc = add i32 %0, 1, !dbg !8095
  store i32 %inc, i32* %num1, align 8, !dbg !8095
  %idxprom = zext i32 %0 to i64, !dbg !8095
  %arrayidx = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8095
  call void @llvm.dbg.value(metadata i8** %arrayidx, metadata !8093, metadata !DIExpression()), !dbg !8094
  store i8* %obj_, i8** %arrayidx, align 8, !dbg !8095
  ret i8** %arrayidx, !dbg !8095
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_vec_void_p_base_space(%struct.VEC_vec_void_p_base* %vec_, i32 %alloc_) unnamed_addr #0 !dbg !8096 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_vec_void_p_base* %vec_, metadata !8100, metadata !DIExpression()), !dbg !8102
  call void @llvm.dbg.value(metadata i32 1, metadata !8101, metadata !DIExpression()), !dbg !8102
  %tobool = icmp eq %struct.VEC_vec_void_p_base* %vec_, null, !dbg !8103
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !8103

cond.true:                                        ; preds = %entry
  %alloc = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %vec_, i64 0, i32 1, !dbg !8103
  %0 = load i32, i32* %alloc, align 4, !dbg !8103
  %num = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %vec_, i64 0, i32 0, !dbg !8103
  %1 = load i32, i32* %num, align 8, !dbg !8103
  %cmp1 = icmp ne i32 %0, %1, !dbg !8103
  %phitmp = zext i1 %cmp1 to i32, !dbg !8103
  br label %cond.end, !dbg !8103

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8103

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond.in = phi i32 [ %phitmp, %cond.true ], [ 0, %cond.false ]
  ret i32 %cond.in, !dbg !8103
}

declare dso_local void @free_stmt_vec_info(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_slp_instance_heap_free(%struct.VEC_slp_instance_heap** %vec_) unnamed_addr #0 !dbg !8104 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_heap** %vec_, metadata !8108, metadata !DIExpression()), !dbg !8109
  %0 = load %struct.VEC_slp_instance_heap*, %struct.VEC_slp_instance_heap** %vec_, align 8, !dbg !8110
  %tobool = icmp eq %struct.VEC_slp_instance_heap* %0, null, !dbg !8110
  br i1 %tobool, label %if.end, label %if.then, !dbg !8112

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_slp_instance_heap* %0 to i8*, !dbg !8112
  tail call void @free(i8* nonnull %1) #6, !dbg !8110
  br label %if.end, !dbg !8110

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_slp_instance_heap* null, %struct.VEC_slp_instance_heap** %vec_, align 8, !dbg !8112
  ret void, !dbg !8112
}

; Function Attrs: nounwind uwtable
define internal fastcc zeroext i8 @vect_slp_analyze_node_operations(%struct._bb_vec_info* %bb_vinfo, %struct._slp_tree* %node) unnamed_addr #5 !dbg !8113 {
entry:
  %dummy = alloca i8, align 1
  %stmt = alloca %union.gimple_statement_d*, align 8
  call void @llvm.dbg.value(metadata %struct._bb_vec_info* %bb_vinfo, metadata !8117, metadata !DIExpression()), !dbg !8126
  call void @llvm.dbg.value(metadata %struct._slp_tree* %node, metadata !8118, metadata !DIExpression()), !dbg !8126
  call void @llvm.dbg.value(metadata i8* %dummy, metadata !8119, metadata !DIExpression(DW_OP_deref)), !dbg !8126
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %dummy) #7, !dbg !8127
  %0 = bitcast %union.gimple_statement_d** %stmt to i8*, !dbg !8128
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %0) #7, !dbg !8128
  %tobool = icmp eq %struct._slp_tree* %node, null, !dbg !8129
  br i1 %tobool, label %cleanup24, label %if.end, !dbg !8131

if.end:                                           ; preds = %entry
  %left = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 0, !dbg !8132
  %1 = load %struct._slp_tree*, %struct._slp_tree** %left, align 8, !dbg !8132
  %call = tail call fastcc zeroext i8 @vect_slp_analyze_node_operations(%struct._bb_vec_info* %bb_vinfo, %struct._slp_tree* %1) #8, !dbg !8134
  %tobool1 = icmp eq i8 %call, 0, !dbg !8134
  br i1 %tobool1, label %cleanup24, label %lor.lhs.false, !dbg !8135

lor.lhs.false:                                    ; preds = %if.end
  %right = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 1, !dbg !8136
  %2 = load %struct._slp_tree*, %struct._slp_tree** %right, align 8, !dbg !8136
  %call2 = tail call fastcc zeroext i8 @vect_slp_analyze_node_operations(%struct._bb_vec_info* %bb_vinfo, %struct._slp_tree* %2) #8, !dbg !8137
  %tobool3 = icmp eq i8 %call2, 0, !dbg !8137
  br i1 %tobool3, label %cleanup24, label %for.cond.preheader, !dbg !8138

for.cond.preheader:                               ; preds = %lor.lhs.false
  %stmts = getelementptr inbounds %struct._slp_tree, %struct._slp_tree* %node, i64 0, i32 2, !dbg !8139
  br label %for.cond, !dbg !8140

for.cond:                                         ; preds = %for.cond.preheader, %for.inc
  %i.0 = phi i32 [ %inc, %for.inc ], [ 0, %for.cond.preheader ], !dbg !8141
  call void @llvm.dbg.value(metadata i32 %i.0, metadata !8120, metadata !DIExpression()), !dbg !8126
  %3 = load %struct.VEC_gimple_heap*, %struct.VEC_gimple_heap** %stmts, align 8, !dbg !8142
  %tobool6 = icmp eq %struct.VEC_gimple_heap* %3, null, !dbg !8142
  br i1 %tobool6, label %cond.end, label %cond.true, !dbg !8142

cond.true:                                        ; preds = %for.cond
  %base = getelementptr inbounds %struct.VEC_gimple_heap, %struct.VEC_gimple_heap* %3, i64 0, i32 0, !dbg !8142
  br label %cond.end, !dbg !8142

cond.end:                                         ; preds = %for.cond, %cond.true
  %cond = phi %struct.VEC_gimple_base* [ %base, %cond.true ], [ null, %for.cond ], !dbg !8142
  call void @llvm.dbg.value(metadata %union.gimple_statement_d** %stmt, metadata !8121, metadata !DIExpression(DW_OP_deref)), !dbg !8126
  %call8 = call fastcc i32 @VEC_gimple_base_iterate(%struct.VEC_gimple_base* %cond, i32 %i.0, %union.gimple_statement_d** nonnull %stmt) #8, !dbg !8142
  %tobool9 = icmp eq i32 %call8, 0, !dbg !8140
  br i1 %tobool9, label %cleanup24.loopexit, label %for.body, !dbg !8140

for.body:                                         ; preds = %cond.end
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8143
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %4, metadata !8121, metadata !DIExpression()), !dbg !8126
  %call10 = call fastcc %struct._stmt_vec_info* @vinfo_for_stmt(%union.gimple_statement_d* %4) #8, !dbg !8144
  call void @llvm.dbg.value(metadata %struct._stmt_vec_info* %call10, metadata !8122, metadata !DIExpression()), !dbg !8145
  %tobool11 = icmp eq %struct._stmt_vec_info* %call10, null, !dbg !8146
  br i1 %tobool11, label %cond.true12, label %cond.end14, !dbg !8146

cond.true12:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1222, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !8146
  br label %cond.end14, !dbg !8146

cond.end14:                                       ; preds = %for.body, %cond.true12
  %slp_type = getelementptr inbounds %struct._stmt_vec_info, %struct._stmt_vec_info* %call10, i64 0, i32 25, !dbg !8147
  %5 = load i32, i32* %slp_type, align 4, !dbg !8147
  %cmp = icmp eq i32 %5, 1, !dbg !8147
  br i1 %cmp, label %cond.end18, label %cond.true16, !dbg !8147

cond.true16:                                      ; preds = %cond.end14
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i64 0, i64 0), i32 1223, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !8147
  br label %cond.end18, !dbg !8147

cond.end18:                                       ; preds = %cond.end14, %cond.true16
  %6 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt, align 8, !dbg !8148
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %6, metadata !8121, metadata !DIExpression()), !dbg !8126
  call void @llvm.dbg.value(metadata i8* %dummy, metadata !8119, metadata !DIExpression(DW_OP_deref)), !dbg !8126
  %call20 = call zeroext i8 @vect_analyze_stmt(%union.gimple_statement_d* %6, i8* nonnull %dummy, %struct._slp_tree* nonnull %node) #6, !dbg !8150
  %tobool21 = icmp eq i8 %call20, 0, !dbg !8150
  br i1 %tobool21, label %cleanup24.loopexit, label %for.inc

for.inc:                                          ; preds = %cond.end18
  %inc = add nuw nsw i32 %i.0, 1, !dbg !8151
  call void @llvm.dbg.value(metadata i32 %inc, metadata !8120, metadata !DIExpression()), !dbg !8126
  br label %for.cond, !dbg !8152, !llvm.loop !8153

cleanup24.loopexit:                               ; preds = %cond.end18, %cond.end
  %retval.2.ph = phi i8 [ 1, %cond.end ], [ 0, %cond.end18 ]
  br label %cleanup24, !dbg !8155

cleanup24:                                        ; preds = %cleanup24.loopexit, %lor.lhs.false, %if.end, %entry
  %retval.2 = phi i8 [ 1, %entry ], [ 0, %lor.lhs.false ], [ 0, %if.end ], [ %retval.2.ph, %cleanup24.loopexit ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %0) #7, !dbg !8155
  call void @llvm.dbg.value(metadata i8* %dummy, metadata !8119, metadata !DIExpression(DW_OP_deref)), !dbg !8126
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %dummy) #7, !dbg !8155
  ret i8 %retval.2, !dbg !8155
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %struct._slp_instance* @VEC_slp_instance_base_ordered_remove(%struct.VEC_slp_instance_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !8156 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_base* %vec_, metadata !8160, metadata !DIExpression()), !dbg !8164
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !8161, metadata !DIExpression()), !dbg !8164
  %idxprom = zext i32 %ix_ to i64, !dbg !8165
  %arrayidx = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8165
  call void @llvm.dbg.value(metadata %struct._slp_instance** %arrayidx, metadata !8162, metadata !DIExpression()), !dbg !8164
  %0 = load %struct._slp_instance*, %struct._slp_instance** %arrayidx, align 8, !dbg !8165
  call void @llvm.dbg.value(metadata %struct._slp_instance* %0, metadata !8163, metadata !DIExpression()), !dbg !8164
  %1 = bitcast %struct._slp_instance** %arrayidx to i8*, !dbg !8165
  %add.ptr = getelementptr inbounds %struct._slp_instance*, %struct._slp_instance** %arrayidx, i64 1, !dbg !8165
  %2 = bitcast %struct._slp_instance** %add.ptr to i8*, !dbg !8165
  %num1 = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %vec_, i64 0, i32 0, !dbg !8165
  %3 = load i32, i32* %num1, align 8, !dbg !8165
  %dec = add i32 %3, -1, !dbg !8165
  store i32 %dec, i32* %num1, align 8, !dbg !8165
  %sub = sub i32 %dec, %ix_, !dbg !8165
  %conv2 = zext i32 %sub to i64, !dbg !8165
  %mul = shl nuw nsw i64 %conv2, 3, !dbg !8165
  %call = tail call i8* @memmove(i8* nonnull %1, i8* nonnull %2, i64 %mul) #6, !dbg !8165
  ret %struct._slp_instance* %0, !dbg !8165
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_slp_instance_base_length(%struct.VEC_slp_instance_base* %vec_) unnamed_addr #0 !dbg !8166 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_slp_instance_base* %vec_, metadata !8170, metadata !DIExpression()), !dbg !8171
  %tobool = icmp eq %struct.VEC_slp_instance_base* %vec_, null, !dbg !8172
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8172

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_slp_instance_base, %struct.VEC_slp_instance_base* %vec_, i64 0, i32 0, !dbg !8172
  %0 = load i32, i32* %num, align 8, !dbg !8172
  br label %cond.end, !dbg !8172

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !8172
  ret i32 %cond, !dbg !8172
}

declare dso_local zeroext i8 @vect_analyze_stmt(%union.gimple_statement_d*, i8*, %struct._slp_tree*) local_unnamed_addr #2

declare dso_local i8* @memmove(i8*, i8*, i64) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node** @VEC_tree_base_quick_push(%struct.VEC_tree_base* %vec_, %union.tree_node* %obj_) unnamed_addr #0 !dbg !8173 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !8178, metadata !DIExpression()), !dbg !8181
  call void @llvm.dbg.value(metadata %union.tree_node* %obj_, metadata !8179, metadata !DIExpression()), !dbg !8181
  %num1 = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !8182
  %0 = load i32, i32* %num1, align 8, !dbg !8182
  %inc = add i32 %0, 1, !dbg !8182
  store i32 %inc, i32* %num1, align 8, !dbg !8182
  %idxprom = zext i32 %0 to i64, !dbg !8182
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8182
  call void @llvm.dbg.value(metadata %union.tree_node** %arrayidx, metadata !8180, metadata !DIExpression()), !dbg !8181
  store %union.tree_node* %obj_, %union.tree_node** %arrayidx, align 8, !dbg !8182
  ret %union.tree_node** %arrayidx, !dbg !8182
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_gimple_base_length(%struct.VEC_gimple_base* %vec_) unnamed_addr #0 !dbg !8183 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !8187, metadata !DIExpression()), !dbg !8188
  %tobool = icmp eq %struct.VEC_gimple_base* %vec_, null, !dbg !8189
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8189

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 0, !dbg !8189
  %0 = load i32, i32* %num, align 8, !dbg !8189
  br label %cond.end, !dbg !8189

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !8189
  ret i32 %cond, !dbg !8189
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @gimple_assign_rhs1(%union.gimple_statement_d* %gs) unnamed_addr #0 !dbg !8190 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8192, metadata !DIExpression()), !dbg !8193
  %call = tail call fastcc %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 1) #8, !dbg !8194
  ret %union.tree_node* %call, !dbg !8195
}

declare dso_local %union.tree_node* @build_constructor_from_list(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.tree_node* @vect_init_vector(%union.gimple_statement_d*, %union.tree_node*, %union.tree_node*, %struct.gimple_stmt_iterator*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_base_length(%struct.VEC_tree_base* %vec_) unnamed_addr #0 !dbg !8196 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !8202, metadata !DIExpression()), !dbg !8203
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !8204
  br i1 %tobool, label %cond.end, label %cond.true, !dbg !8204

cond.true:                                        ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !8204
  %0 = load i32, i32* %num, align 8, !dbg !8204
  br label %cond.end, !dbg !8204

cond.end:                                         ; preds = %entry, %cond.true
  %cond = phi i32 [ %0, %cond.true ], [ 0, %entry ], !dbg !8204
  ret i32 %cond, !dbg !8204
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @VEC_tree_base_index(%struct.VEC_tree_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !8205 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !8209, metadata !DIExpression()), !dbg !8211
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !8210, metadata !DIExpression()), !dbg !8211
  br label %land.end, !dbg !8212

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !8212
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8212
  %0 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8212
  ret %union.tree_node* %0, !dbg !8212
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @VEC_tree_heap_free(%struct.VEC_tree_heap** %vec_) unnamed_addr #0 !dbg !8213 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_heap** %vec_, metadata !8217, metadata !DIExpression()), !dbg !8218
  %0 = load %struct.VEC_tree_heap*, %struct.VEC_tree_heap** %vec_, align 8, !dbg !8219
  %tobool = icmp eq %struct.VEC_tree_heap* %0, null, !dbg !8219
  br i1 %tobool, label %if.end, label %if.then, !dbg !8221

if.then:                                          ; preds = %entry
  %1 = bitcast %struct.VEC_tree_heap* %0 to i8*, !dbg !8221
  tail call void @free(i8* nonnull %1) #6, !dbg !8219
  br label %if.end, !dbg !8219

if.end:                                           ; preds = %entry, %if.then
  store %struct.VEC_tree_heap* null, %struct.VEC_tree_heap** %vec_, align 8, !dbg !8221
  ret void, !dbg !8221
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @VEC_tree_base_iterate(%struct.VEC_tree_base* %vec_, i32 %ix_, %union.tree_node** %ptr) unnamed_addr #0 !dbg !8222 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_tree_base* %vec_, metadata !8226, metadata !DIExpression()), !dbg !8229
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !8227, metadata !DIExpression()), !dbg !8229
  call void @llvm.dbg.value(metadata %union.tree_node** %ptr, metadata !8228, metadata !DIExpression()), !dbg !8229
  %tobool = icmp eq %struct.VEC_tree_base* %vec_, null, !dbg !8230
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !8230

land.lhs.true:                                    ; preds = %entry
  %num = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 0, !dbg !8230
  %0 = load i32, i32* %num, align 8, !dbg !8230
  %cmp = icmp ugt i32 %0, %ix_, !dbg !8230
  br i1 %cmp, label %if.then, label %if.else, !dbg !8232

if.then:                                          ; preds = %land.lhs.true
  %idxprom = zext i32 %ix_ to i64, !dbg !8233
  %arrayidx = getelementptr inbounds %struct.VEC_tree_base, %struct.VEC_tree_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8233
  %1 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8233
  br label %return, !dbg !8233

if.else:                                          ; preds = %entry, %land.lhs.true
  br label %return, !dbg !8235

return:                                           ; preds = %if.else, %if.then
  %storemerge = phi %union.tree_node* [ null, %if.else ], [ %1, %if.then ], !dbg !8237
  %retval.0 = phi i32 [ 0, %if.else ], [ 1, %if.then ], !dbg !8237
  store %union.tree_node* %storemerge, %union.tree_node** %ptr, align 8, !dbg !8237
  ret i32 %retval.0, !dbg !8232
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i8* @VEC_vec_void_p_base_index(%struct.VEC_vec_void_p_base* %vec_, i32 %ix_) unnamed_addr #0 !dbg !8238 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_vec_void_p_base* %vec_, metadata !8242, metadata !DIExpression()), !dbg !8244
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !8243, metadata !DIExpression()), !dbg !8244
  br label %land.end, !dbg !8245

land.rhs:                                         ; No predecessors!
  br label %land.end

land.end:                                         ; preds = %entry, %land.rhs
  %idxprom = zext i32 %ix_ to i64, !dbg !8245
  %arrayidx = getelementptr inbounds %struct.VEC_vec_void_p_base, %struct.VEC_vec_void_p_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8245
  %0 = load i8*, i8** %arrayidx, align 8, !dbg !8245
  ret i8* %0, !dbg !8245
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc i32 @gimple_expr_code(%union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !8246 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !8248, metadata !DIExpression()), !dbg !8250
  %call = tail call fastcc i32 @gimple_code(%union.gimple_statement_d* %stmt) #8, !dbg !8251
  call void @llvm.dbg.value(metadata i32 %call, metadata !8249, metadata !DIExpression()), !dbg !8250
  switch i32 %call, label %if.else4 [
    i32 6, label %if.then
    i32 1, label %if.then
    i32 8, label %cleanup
  ], !dbg !8252

if.then:                                          ; preds = %entry, %entry
  %0 = getelementptr inbounds %union.gimple_statement_d, %union.gimple_statement_d* %stmt, i64 0, i32 0, i32 0, i32 0, !dbg !8254
  %bf.load = load i32, i32* %0, align 8, !dbg !8254
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8254
  br label %cleanup, !dbg !8255

if.else4:                                         ; preds = %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0), i32 1446, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !8256
  br label %cleanup, !dbg !8258

cleanup:                                          ; preds = %entry, %if.else4, %if.then
  %retval.0 = phi i32 [ %bf.lshr, %if.then ], [ 0, %if.else4 ], [ 59, %entry ], !dbg !8250
  ret i32 %retval.0, !dbg !8259
}

declare dso_local %union.tree_node* @vect_create_destination_var(%union.tree_node*, %union.tree_node*) local_unnamed_addr #2

declare dso_local %union.gimple_statement_d* @gimple_build_call_vec(%union.tree_node*, %struct.VEC_tree_heap*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.tree_node* @make_ssa_name(%union.tree_node* %var, %union.gimple_statement_d* %stmt) unnamed_addr #0 !dbg !8260 {
entry:
  call void @llvm.dbg.value(metadata %union.tree_node* %var, metadata !8264, metadata !DIExpression()), !dbg !8266
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %stmt, metadata !8265, metadata !DIExpression()), !dbg !8266
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8267
  %call = tail call %union.tree_node* @make_ssa_name_fn(%struct.function* %0, %union.tree_node* %var, %union.gimple_statement_d* %stmt) #6, !dbg !8268
  ret %union.tree_node* %call, !dbg !8269
}

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_call_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) unnamed_addr #0 !dbg !8270 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8274, metadata !DIExpression()), !dbg !8276
  call void @llvm.dbg.value(metadata %union.tree_node* %lhs, metadata !8275, metadata !DIExpression()), !dbg !8276
  tail call fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 0, %union.tree_node* %lhs) #8, !dbg !8277
  %tobool = icmp eq %union.tree_node* %lhs, null, !dbg !8278
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !8280

land.lhs.true:                                    ; preds = %entry
  %0 = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, !dbg !8281
  %bf.load = load i64, i64* %0, align 8, !dbg !8281
  %bf.cast1 = and i64 %bf.load, 65535, !dbg !8282
  %cmp = icmp eq i64 %bf.cast1, 141, !dbg !8282
  br i1 %cmp, label %if.then, label %if.end, !dbg !8283

if.then:                                          ; preds = %land.lhs.true
  %def_stmt = getelementptr inbounds %union.tree_node, %union.tree_node* %lhs, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, !dbg !8284
  %1 = bitcast %union.tree_node** %def_stmt to %union.gimple_statement_d**, !dbg !8284
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %1, align 8, !dbg !8285
  br label %if.end, !dbg !8284

if.end:                                           ; preds = %entry, %if.then, %land.lhs.true
  ret void, !dbg !8286
}

declare dso_local void @vect_finish_stmt_generation(%union.gimple_statement_d*, %union.gimple_statement_d*, %struct.gimple_stmt_iterator*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc %union.gimple_statement_d* @VEC_gimple_base_replace(%struct.VEC_gimple_base* %vec_, i32 %ix_, %union.gimple_statement_d* %obj_) unnamed_addr #0 !dbg !8287 {
entry:
  call void @llvm.dbg.value(metadata %struct.VEC_gimple_base* %vec_, metadata !8291, metadata !DIExpression()), !dbg !8295
  call void @llvm.dbg.value(metadata i32 %ix_, metadata !8292, metadata !DIExpression()), !dbg !8295
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %obj_, metadata !8293, metadata !DIExpression()), !dbg !8295
  %idxprom = zext i32 %ix_ to i64, !dbg !8296
  %arrayidx = getelementptr inbounds %struct.VEC_gimple_base, %struct.VEC_gimple_base* %vec_, i64 0, i32 2, i64 %idxprom, !dbg !8296
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %arrayidx, align 8, !dbg !8296
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %0, metadata !8294, metadata !DIExpression()), !dbg !8295
  store %union.gimple_statement_d* %obj_, %union.gimple_statement_d** %arrayidx, align 8, !dbg !8296
  ret %union.gimple_statement_d* %0, !dbg !8296
}

declare dso_local %union.tree_node* @make_ssa_name_fn(%struct.function*, %union.tree_node*, %union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: inlinehint nounwind uwtable
define internal fastcc void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) unnamed_addr #0 !dbg !8297 {
entry:
  call void @llvm.dbg.value(metadata %union.gimple_statement_d* %gs, metadata !8301, metadata !DIExpression()), !dbg !8304
  call void @llvm.dbg.value(metadata i32 0, metadata !8302, metadata !DIExpression()), !dbg !8304
  call void @llvm.dbg.value(metadata %union.tree_node* %op, metadata !8303, metadata !DIExpression()), !dbg !8304
  %call = tail call fastcc zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %gs) #8, !dbg !8305
  %tobool = icmp eq i8 %call, 0, !dbg !8305
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !8305

land.lhs.true:                                    ; preds = %entry
  %call1 = tail call fastcc i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #8, !dbg !8305
  %cmp = icmp eq i32 %call1, 0, !dbg !8305
  br i1 %cmp, label %cond.true, label %cond.end, !dbg !8305

cond.true:                                        ; preds = %land.lhs.true, %entry
  tail call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.21, i64 0, i64 0)) #6, !dbg !8305
  br label %cond.end, !dbg !8305

cond.end:                                         ; preds = %land.lhs.true, %cond.true
  %call3 = tail call fastcc %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #8, !dbg !8306
  store %union.tree_node* %op, %union.tree_node** %call3, align 8, !dbg !8307
  ret void, !dbg !8308
}

declare dso_local void @gsi_for_stmt(%struct.gimple_stmt_iterator* sret, %union.gimple_statement_d*) local_unnamed_addr #2

declare dso_local zeroext i8 @vect_transform_stmt(%union.gimple_statement_d*, %struct.gimple_stmt_iterator*, i8*, %struct._slp_tree*, %struct._slp_instance*) local_unnamed_addr #2

declare dso_local void @vect_remove_stores(%union.gimple_statement_d*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, metadata, metadata) #1

attributes #0 = { inlinehint nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind }
attributes #7 = { nounwind }
attributes #8 = { nobuiltin }

!llvm.dbg.cu = !{!1754}
!llvm.module.flags = !{!3849, !3850, !3851}
!llvm.ident = !{!3852}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "number_of_mask_fixes", scope: !2, file: !3, line: 1716, type: !100, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "vect_get_mask_element", scope: !3, file: !3, line: 1710, type: !4, scopeLine: 1714, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3836)
!3 = !DIFile(filename: "tree-vect-slp.c", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !7, !100, !100, !100, !6, !100, !1752, !1752, !1753}
!6 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!7 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !8, line: 58, baseType: !9)
!8 = !DIFile(filename: "./coretypes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10, size: 64)
!10 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !11, line: 737, size: 768, elements: !12)
!11 = !DIFile(filename: "./gimple.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!12 = !{!13, !1599, !1609, !1615, !1620, !1625, !1632, !1638, !1644, !1649, !1663, !1668, !1674, !1679, !1689, !1694, !1710, !1717, !1724, !1730, !1735, !1741, !1747}
!13 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !10, file: !11, line: 738, baseType: !14, size: 256)
!14 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !11, line: 271, size: 256, elements: !15)
!15 = !{!16, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !32, !33, !1598}
!16 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !14, file: !11, line: 274, baseType: !17, size: 8, flags: DIFlagBitField, extraData: i64 0)
!17 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !14, file: !11, line: 277, baseType: !17, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !14, file: !11, line: 281, baseType: !17, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !14, file: !11, line: 284, baseType: !17, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !14, file: !11, line: 291, baseType: !17, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !14, file: !11, line: 295, baseType: !17, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !14, file: !11, line: 298, baseType: !17, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !14, file: !11, line: 301, baseType: !17, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !14, file: !11, line: 307, baseType: !17, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !14, file: !11, line: 312, baseType: !17, size: 32, offset: 32)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !14, file: !11, line: 316, baseType: !28, size: 32, offset: 64)
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !29, line: 58, baseType: !30)
!29 = !DIFile(filename: "./input.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!30 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !31, line: 44, baseType: !17)
!31 = !DIFile(filename: "./line-map.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!32 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !14, file: !11, line: 319, baseType: !17, size: 32, offset: 96)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !14, file: !11, line: 323, baseType: !34, size: 64, offset: 128)
!34 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !35, size: 64)
!35 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !36, line: 217, size: 832, elements: !37)
!36 = !DIFile(filename: "./basic-block.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!37 = !{!38, !1565, !1566, !1567, !1568, !1572, !1573, !1574, !1592, !1593, !1594, !1595, !1596, !1597}
!38 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !35, file: !36, line: 219, baseType: !39, size: 64)
!39 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !40, size: 64)
!40 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !36, line: 151, baseType: !41)
!41 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !36, line: 151, size: 128, elements: !42)
!42 = !{!43}
!43 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !41, file: !36, line: 151, baseType: !44, size: 128)
!44 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !36, line: 150, baseType: !45)
!45 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !36, line: 150, size: 128, elements: !46)
!46 = !{!47, !48, !49}
!47 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !45, file: !36, line: 150, baseType: !17, size: 32)
!48 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !45, file: !36, line: 150, baseType: !17, size: 32, offset: 32)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !45, file: !36, line: 150, baseType: !50, size: 64, offset: 64)
!50 = !DICompositeType(tag: DW_TAG_array_type, baseType: !51, size: 64, elements: !115)
!51 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !8, line: 108, baseType: !52)
!52 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !53, size: 64)
!53 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !36, line: 122, size: 512, elements: !54)
!54 = !{!55, !56, !57, !1557, !1558, !1559, !1560, !1561, !1562, !1563}
!55 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !53, file: !36, line: 124, baseType: !34, size: 64)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !53, file: !36, line: 125, baseType: !34, size: 64, offset: 64)
!57 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !53, file: !36, line: 131, baseType: !58, size: 64, offset: 128)
!58 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !36, line: 128, size: 64, elements: !59)
!59 = !{!60, !75}
!60 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !58, file: !36, line: 129, baseType: !61, size: 64)
!61 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !8, line: 66, baseType: !62)
!62 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !63, size: 64)
!63 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !11, line: 143, size: 192, elements: !64)
!64 = !{!65, !73, !74}
!65 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !63, file: !11, line: 145, baseType: !66, size: 64)
!66 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !8, line: 69, baseType: !67)
!67 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !68, size: 64)
!68 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !11, line: 136, size: 192, elements: !69)
!69 = !{!70, !71, !72}
!70 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !68, file: !11, line: 137, baseType: !7, size: 64)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !68, file: !11, line: 138, baseType: !67, size: 64, offset: 64)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !68, file: !11, line: 139, baseType: !67, size: 64, offset: 128)
!73 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !63, file: !11, line: 146, baseType: !66, size: 64, offset: 64)
!74 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !63, file: !11, line: 152, baseType: !61, size: 64, offset: 128)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !58, file: !36, line: 130, baseType: !76, size: 64)
!76 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !8, line: 50, baseType: !77)
!77 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !78, size: 64)
!78 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !79, line: 240, size: 384, elements: !80)
!79 = !DIFile(filename: "./rtl.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!80 = !{!81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91}
!81 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !78, file: !79, line: 242, baseType: !17, size: 16, flags: DIFlagBitField, extraData: i64 0)
!82 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !78, file: !79, line: 245, baseType: !17, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!83 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !78, file: !79, line: 252, baseType: !17, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !78, file: !79, line: 257, baseType: !17, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !78, file: !79, line: 265, baseType: !17, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!86 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !78, file: !79, line: 277, baseType: !17, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !78, file: !79, line: 291, baseType: !17, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!88 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !78, file: !79, line: 298, baseType: !17, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!89 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !78, file: !79, line: 305, baseType: !17, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !78, file: !79, line: 310, baseType: !17, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!91 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !78, file: !79, line: 321, baseType: !92, size: 320, offset: 64)
!92 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !79, line: 315, size: 320, elements: !93)
!93 = !{!94, !1524, !1526, !1555, !1556}
!94 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !92, file: !79, line: 316, baseType: !95, size: 64)
!95 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 64, elements: !115)
!96 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !79, line: 183, baseType: !97)
!97 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !79, line: 166, size: 64, elements: !98)
!98 = !{!99, !101, !102, !106, !107, !117, !246, !258, !261, !325, !1502, !1503, !1514, !1521}
!99 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !97, file: !79, line: 168, baseType: !100, size: 32)
!100 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !97, file: !79, line: 169, baseType: !17, size: 32)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !97, file: !79, line: 170, baseType: !103, size: 64)
!103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !104, size: 64)
!104 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !105)
!105 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!106 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !97, file: !79, line: 171, baseType: !76, size: 64)
!107 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !97, file: !79, line: 172, baseType: !108, size: 64)
!108 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !8, line: 53, baseType: !109)
!109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !110, size: 64)
!110 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !79, line: 359, size: 128, elements: !111)
!111 = !{!112, !113}
!112 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !110, file: !79, line: 360, baseType: !100, size: 32)
!113 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !110, file: !79, line: 361, baseType: !114, size: 64, offset: 64)
!114 = !DICompositeType(tag: DW_TAG_array_type, baseType: !76, size: 64, elements: !115)
!115 = !{!116}
!116 = !DISubrange(count: 1)
!117 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !97, file: !79, line: 173, baseType: !118, size: 32)
!118 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !119, line: 7, baseType: !17, size: 32, elements: !120)
!119 = !DIFile(filename: "./insn-modes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!120 = !{!121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245}
!121 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!122 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!123 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!124 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!125 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!126 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!127 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!128 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!129 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!130 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!131 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!132 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!133 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!134 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!135 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!136 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!137 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!138 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!139 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!140 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!141 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!142 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!143 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!144 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!145 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!146 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!147 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!148 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!149 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!150 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!151 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!152 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!153 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!154 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!155 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!156 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!157 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!158 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!159 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!160 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!161 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!162 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!163 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!164 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!165 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!166 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!167 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!168 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!169 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!170 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!171 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!172 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!173 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!174 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!175 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!176 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!177 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!178 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!179 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!180 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!181 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!182 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!183 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!184 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!185 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!186 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!187 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!188 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!189 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!190 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!191 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!192 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!193 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!194 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!195 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!196 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!197 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!198 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!199 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!200 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!201 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!202 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!203 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!204 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!205 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!206 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!207 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!208 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!209 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!210 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!211 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!212 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!213 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!214 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!215 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!216 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!217 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!218 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!219 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!220 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!221 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!222 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!223 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!224 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!225 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!226 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!227 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!228 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!229 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!230 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!231 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!232 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!233 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!234 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!235 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!236 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!237 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!238 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!239 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!240 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!241 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!242 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!243 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!244 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!245 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!246 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !97, file: !79, line: 174, baseType: !247, size: 32)
!247 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !79, line: 133, baseType: !248)
!248 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !79, line: 115, size: 32, elements: !249)
!249 = !{!250, !251, !252, !253, !254, !255, !256, !257}
!250 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !248, file: !79, line: 118, baseType: !17, size: 8, flags: DIFlagBitField, extraData: i64 0)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !248, file: !79, line: 120, baseType: !17, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!252 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !248, file: !79, line: 121, baseType: !17, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!253 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !248, file: !79, line: 123, baseType: !17, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!254 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !248, file: !79, line: 125, baseType: !17, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !248, file: !79, line: 127, baseType: !17, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !248, file: !79, line: 130, baseType: !17, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !248, file: !79, line: 132, baseType: !17, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!258 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !97, file: !79, line: 175, baseType: !259, size: 64)
!259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !260, size: 64)
!260 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !79, line: 175, flags: DIFlagFwdDecl)
!261 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !97, file: !79, line: 176, baseType: !262, size: 64)
!262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !263, size: 64)
!263 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !264, line: 75, size: 256, elements: !265)
!264 = !DIFile(filename: "./bitmap.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!265 = !{!266, !281, !282, !283}
!266 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !263, file: !264, line: 76, baseType: !267, size: 64)
!267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !268, size: 64)
!268 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !264, line: 68, baseType: !269)
!269 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !264, line: 63, size: 320, elements: !270)
!270 = !{!271, !273, !274, !275}
!271 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !269, file: !264, line: 64, baseType: !272, size: 64)
!272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !269, size: 64)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !269, file: !264, line: 65, baseType: !272, size: 64, offset: 64)
!274 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !269, file: !264, line: 66, baseType: !17, size: 32, offset: 128)
!275 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !269, file: !264, line: 67, baseType: !276, size: 128, offset: 192)
!276 = !DICompositeType(tag: DW_TAG_array_type, baseType: !277, size: 128, elements: !279)
!277 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !264, line: 29, baseType: !278)
!278 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!279 = !{!280}
!280 = !DISubrange(count: 2)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !263, file: !264, line: 77, baseType: !267, size: 64, offset: 64)
!282 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !263, file: !264, line: 78, baseType: !17, size: 32, offset: 128)
!283 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !263, file: !264, line: 79, baseType: !284, size: 64, offset: 192)
!284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !285, size: 64)
!285 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !264, line: 49, baseType: !286)
!286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !264, line: 45, size: 832, elements: !287)
!287 = !{!288, !289, !290}
!288 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !286, file: !264, line: 46, baseType: !272, size: 64)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !286, file: !264, line: 47, baseType: !262, size: 64, offset: 64)
!290 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !286, file: !264, line: 48, baseType: !291, size: 704, offset: 128)
!291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !292, line: 164, size: 704, elements: !293)
!292 = !DIFile(filename: "./include/obstack.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!293 = !{!294, !296, !307, !308, !309, !310, !311, !312, !317, !321, !322, !323, !324}
!294 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !291, file: !292, line: 166, baseType: !295, size: 64)
!295 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !291, file: !292, line: 167, baseType: !297, size: 64, offset: 64)
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !298, size: 64)
!298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !292, line: 157, size: 192, elements: !299)
!299 = !{!300, !302, !303}
!300 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !298, file: !292, line: 159, baseType: !301, size: 64)
!301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !105, size: 64)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !298, file: !292, line: 160, baseType: !297, size: 64, offset: 64)
!303 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !298, file: !292, line: 161, baseType: !304, size: 32, offset: 128)
!304 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 32, elements: !305)
!305 = !{!306}
!306 = !DISubrange(count: 4)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !291, file: !292, line: 168, baseType: !301, size: 64, offset: 128)
!308 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !291, file: !292, line: 169, baseType: !301, size: 64, offset: 192)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !291, file: !292, line: 170, baseType: !301, size: 64, offset: 256)
!310 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !291, file: !292, line: 171, baseType: !295, size: 64, offset: 320)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !291, file: !292, line: 172, baseType: !100, size: 32, offset: 384)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !291, file: !292, line: 176, baseType: !313, size: 64, offset: 448)
!313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !314, size: 64)
!314 = !DISubroutineType(types: !315)
!315 = !{!297, !316, !295}
!316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!317 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !291, file: !292, line: 177, baseType: !318, size: 64, offset: 512)
!318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !319, size: 64)
!319 = !DISubroutineType(types: !320)
!320 = !{null, !316, !297}
!321 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !291, file: !292, line: 178, baseType: !316, size: 64, offset: 576)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !291, file: !292, line: 179, baseType: !17, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !291, file: !292, line: 180, baseType: !17, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !291, file: !292, line: 184, baseType: !17, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !97, file: !79, line: 177, baseType: !326, size: 64)
!326 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !8, line: 56, baseType: !327)
!327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !328, size: 64)
!328 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !329, line: 3371, size: 1792, elements: !330)
!329 = !DIFile(filename: "./tree.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!330 = !{!331, !364, !370, !381, !400, !411, !416, !423, !429, !442, !450, !488, !493, !521, !538, !539, !544, !553, !559, !564, !568, !572, !925, !974, !980, !986, !993, !1006, !1020, !1037, !1049, !1071, !1312, !1484}
!331 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !328, file: !329, line: 3372, baseType: !332, size: 64)
!332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !329, line: 360, size: 64, elements: !333)
!333 = !{!334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363}
!334 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !332, file: !329, line: 361, baseType: !17, size: 16, flags: DIFlagBitField, extraData: i64 0)
!335 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !332, file: !329, line: 363, baseType: !17, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!336 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !332, file: !329, line: 364, baseType: !17, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!337 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !332, file: !329, line: 365, baseType: !17, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!338 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !332, file: !329, line: 366, baseType: !17, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!339 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !332, file: !329, line: 367, baseType: !17, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!340 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !332, file: !329, line: 368, baseType: !17, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!341 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !332, file: !329, line: 369, baseType: !17, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !332, file: !329, line: 370, baseType: !17, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !332, file: !329, line: 372, baseType: !17, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!344 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !332, file: !329, line: 373, baseType: !17, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!345 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !332, file: !329, line: 374, baseType: !17, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!346 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !332, file: !329, line: 375, baseType: !17, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !332, file: !329, line: 376, baseType: !17, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !332, file: !329, line: 377, baseType: !17, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!349 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !332, file: !329, line: 378, baseType: !17, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !332, file: !329, line: 379, baseType: !17, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!351 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !332, file: !329, line: 381, baseType: !17, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!352 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !332, file: !329, line: 382, baseType: !17, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !332, file: !329, line: 383, baseType: !17, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!354 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !332, file: !329, line: 384, baseType: !17, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!355 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !332, file: !329, line: 385, baseType: !17, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !332, file: !329, line: 386, baseType: !17, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !332, file: !329, line: 387, baseType: !17, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!358 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !332, file: !329, line: 388, baseType: !17, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!359 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !332, file: !329, line: 390, baseType: !17, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!360 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !332, file: !329, line: 391, baseType: !17, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!361 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !332, file: !329, line: 392, baseType: !17, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!362 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !332, file: !329, line: 394, baseType: !17, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!363 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !332, file: !329, line: 399, baseType: !17, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!364 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !328, file: !329, line: 3373, baseType: !365, size: 192)
!365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !329, line: 402, size: 192, elements: !366)
!366 = !{!367, !368, !369}
!367 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !365, file: !329, line: 403, baseType: !332, size: 64)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !365, file: !329, line: 404, baseType: !326, size: 64, offset: 64)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !365, file: !329, line: 405, baseType: !326, size: 64, offset: 128)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !328, file: !329, line: 3374, baseType: !371, size: 320)
!371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !329, line: 1384, size: 320, elements: !372)
!372 = !{!373, !374}
!373 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !371, file: !329, line: 1385, baseType: !365, size: 192)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !371, file: !329, line: 1386, baseType: !375, size: 128, offset: 192)
!375 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !376, line: 58, baseType: !377)
!376 = !DIFile(filename: "./double-int.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!377 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !376, line: 54, size: 128, elements: !378)
!378 = !{!379, !380}
!379 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !377, file: !376, line: 56, baseType: !278, size: 64)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !377, file: !376, line: 57, baseType: !295, size: 64, offset: 64)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !328, file: !329, line: 3375, baseType: !382, size: 256)
!382 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !329, line: 1397, size: 256, elements: !383)
!383 = !{!384, !385}
!384 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !382, file: !329, line: 1398, baseType: !365, size: 192)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !382, file: !329, line: 1399, baseType: !386, size: 64, offset: 192)
!386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !387, size: 64)
!387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !388, line: 52, size: 256, elements: !389)
!388 = !DIFile(filename: "./real.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!389 = !{!390, !391, !392, !393, !394, !395, !396}
!390 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !387, file: !388, line: 56, baseType: !17, size: 2, flags: DIFlagBitField, extraData: i64 0)
!391 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !387, file: !388, line: 57, baseType: !17, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!392 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !387, file: !388, line: 58, baseType: !17, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!393 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !387, file: !388, line: 59, baseType: !17, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !387, file: !388, line: 60, baseType: !17, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !387, file: !388, line: 61, baseType: !17, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !387, file: !388, line: 62, baseType: !397, size: 192, offset: 64)
!397 = !DICompositeType(tag: DW_TAG_array_type, baseType: !278, size: 192, elements: !398)
!398 = !{!399}
!399 = !DISubrange(count: 3)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !328, file: !329, line: 3376, baseType: !401, size: 256)
!401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !329, line: 1408, size: 256, elements: !402)
!402 = !{!403, !404}
!403 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !401, file: !329, line: 1409, baseType: !365, size: 192)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !401, file: !329, line: 1410, baseType: !405, size: 64, offset: 192)
!405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !406, size: 64)
!406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !407, line: 27, size: 192, elements: !408)
!407 = !DIFile(filename: "./fixed-value.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!408 = !{!409, !410}
!409 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !406, file: !407, line: 29, baseType: !375, size: 128)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !406, file: !407, line: 30, baseType: !118, size: 32, offset: 128)
!411 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !328, file: !329, line: 3377, baseType: !412, size: 256)
!412 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !329, line: 1437, size: 256, elements: !413)
!413 = !{!414, !415}
!414 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !412, file: !329, line: 1438, baseType: !365, size: 192)
!415 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !412, file: !329, line: 1439, baseType: !326, size: 64, offset: 192)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !328, file: !329, line: 3378, baseType: !417, size: 256)
!417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !329, line: 1418, size: 256, elements: !418)
!418 = !{!419, !420, !421}
!419 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !417, file: !329, line: 1419, baseType: !365, size: 192)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !417, file: !329, line: 1420, baseType: !100, size: 32, offset: 192)
!421 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !417, file: !329, line: 1421, baseType: !422, size: 8, offset: 224)
!422 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 8, elements: !115)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !328, file: !329, line: 3379, baseType: !424, size: 320)
!424 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !329, line: 1428, size: 320, elements: !425)
!425 = !{!426, !427, !428}
!426 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !424, file: !329, line: 1429, baseType: !365, size: 192)
!427 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !424, file: !329, line: 1430, baseType: !326, size: 64, offset: 192)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !424, file: !329, line: 1431, baseType: !326, size: 64, offset: 256)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !328, file: !329, line: 3380, baseType: !430, size: 320)
!430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !329, line: 1460, size: 320, elements: !431)
!431 = !{!432, !433}
!432 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !430, file: !329, line: 1461, baseType: !365, size: 192)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !430, file: !329, line: 1462, baseType: !434, size: 128, offset: 192)
!434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !435, line: 31, size: 128, elements: !436)
!435 = !DIFile(filename: "./symtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!436 = !{!437, !440, !441}
!437 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !434, file: !435, line: 32, baseType: !438, size: 64)
!438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !439, size: 64)
!439 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !434, file: !435, line: 33, baseType: !17, size: 32, offset: 64)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !434, file: !435, line: 34, baseType: !17, size: 32, offset: 96)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !328, file: !329, line: 3381, baseType: !443, size: 384)
!443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !329, line: 2507, size: 384, elements: !444)
!444 = !{!445, !446, !447, !448, !449}
!445 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !443, file: !329, line: 2508, baseType: !365, size: 192)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !443, file: !329, line: 2509, baseType: !28, size: 32, offset: 192)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !443, file: !329, line: 2510, baseType: !17, size: 32, offset: 224)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !443, file: !329, line: 2511, baseType: !326, size: 64, offset: 256)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !443, file: !329, line: 2512, baseType: !326, size: 64, offset: 320)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !328, file: !329, line: 3382, baseType: !451, size: 896)
!451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !329, line: 2652, size: 896, elements: !452)
!452 = !{!453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485}
!453 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !451, file: !329, line: 2653, baseType: !443, size: 384)
!454 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !451, file: !329, line: 2654, baseType: !326, size: 64, offset: 384)
!455 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !451, file: !329, line: 2656, baseType: !17, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!456 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !451, file: !329, line: 2658, baseType: !17, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !451, file: !329, line: 2659, baseType: !17, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !451, file: !329, line: 2660, baseType: !17, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!459 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !451, file: !329, line: 2661, baseType: !17, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!460 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !451, file: !329, line: 2662, baseType: !17, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!461 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !451, file: !329, line: 2663, baseType: !17, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !451, file: !329, line: 2664, baseType: !17, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !451, file: !329, line: 2666, baseType: !17, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!464 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !451, file: !329, line: 2667, baseType: !17, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!465 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !451, file: !329, line: 2668, baseType: !17, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!466 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !451, file: !329, line: 2669, baseType: !17, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!467 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !451, file: !329, line: 2670, baseType: !17, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!468 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !451, file: !329, line: 2671, baseType: !17, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!469 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !451, file: !329, line: 2672, baseType: !17, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!470 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !451, file: !329, line: 2673, baseType: !17, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !451, file: !329, line: 2674, baseType: !17, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !451, file: !329, line: 2678, baseType: !17, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !451, file: !329, line: 2682, baseType: !17, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!474 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !451, file: !329, line: 2685, baseType: !17, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!475 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !451, file: !329, line: 2688, baseType: !17, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !451, file: !329, line: 2690, baseType: !17, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !451, file: !329, line: 2692, baseType: !17, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!478 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !451, file: !329, line: 2695, baseType: !17, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!479 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !451, file: !329, line: 2698, baseType: !17, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!480 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !451, file: !329, line: 2703, baseType: !17, size: 32, offset: 512)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !451, file: !329, line: 2705, baseType: !326, size: 64, offset: 576)
!482 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !451, file: !329, line: 2706, baseType: !326, size: 64, offset: 640)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !451, file: !329, line: 2707, baseType: !326, size: 64, offset: 704)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !451, file: !329, line: 2708, baseType: !326, size: 64, offset: 768)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !451, file: !329, line: 2711, baseType: !486, size: 64, offset: 832)
!486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !487, size: 64)
!487 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !329, line: 2711, flags: DIFlagFwdDecl)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !328, file: !329, line: 3383, baseType: !489, size: 960)
!489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !329, line: 2756, size: 960, elements: !490)
!490 = !{!491, !492}
!491 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !489, file: !329, line: 2757, baseType: !451, size: 896)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !489, file: !329, line: 2758, baseType: !76, size: 64, offset: 896)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !328, file: !329, line: 3384, baseType: !494, size: 1472)
!494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !329, line: 3114, size: 1472, elements: !495)
!495 = !{!496, !517, !518, !519, !520}
!496 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !494, file: !329, line: 3115, baseType: !497, size: 1216)
!497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !329, line: 2984, size: 1216, elements: !498)
!498 = !{!499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516}
!499 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !497, file: !329, line: 2985, baseType: !489, size: 960)
!500 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !497, file: !329, line: 2986, baseType: !326, size: 64, offset: 960)
!501 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !497, file: !329, line: 2987, baseType: !326, size: 64, offset: 1024)
!502 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !497, file: !329, line: 2988, baseType: !326, size: 64, offset: 1088)
!503 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !497, file: !329, line: 2991, baseType: !17, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !497, file: !329, line: 2992, baseType: !17, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !497, file: !329, line: 2993, baseType: !17, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!506 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !497, file: !329, line: 2994, baseType: !17, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!507 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !497, file: !329, line: 2995, baseType: !17, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!508 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !497, file: !329, line: 2996, baseType: !17, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!509 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !497, file: !329, line: 2998, baseType: !17, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !497, file: !329, line: 3000, baseType: !17, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!511 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !497, file: !329, line: 3002, baseType: !17, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!512 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !497, file: !329, line: 3003, baseType: !17, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !497, file: !329, line: 3004, baseType: !17, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!514 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !497, file: !329, line: 3005, baseType: !17, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!515 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !497, file: !329, line: 3007, baseType: !17, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!516 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !497, file: !329, line: 3010, baseType: !17, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!517 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !494, file: !329, line: 3117, baseType: !326, size: 64, offset: 1216)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !494, file: !329, line: 3119, baseType: !326, size: 64, offset: 1280)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !494, file: !329, line: 3121, baseType: !326, size: 64, offset: 1344)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !494, file: !329, line: 3123, baseType: !326, size: 64, offset: 1408)
!521 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !328, file: !329, line: 3385, baseType: !522, size: 1088)
!522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !329, line: 2874, size: 1088, elements: !523)
!523 = !{!524, !525, !526}
!524 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !522, file: !329, line: 2875, baseType: !489, size: 960)
!525 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !522, file: !329, line: 2876, baseType: !76, size: 64, offset: 960)
!526 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !522, file: !329, line: 2877, baseType: !527, size: 64, offset: 1024)
!527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !528, size: 64)
!528 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !529, line: 172, size: 128, elements: !530)
!529 = !DIFile(filename: "./tree-flow.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!530 = !{!531, !532, !533, !534, !535, !536, !537}
!531 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !528, file: !529, line: 174, baseType: !17, size: 1, flags: DIFlagBitField, extraData: i64 0)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !528, file: !529, line: 178, baseType: !17, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !528, file: !529, line: 183, baseType: !17, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !528, file: !529, line: 187, baseType: !17, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!535 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !528, file: !529, line: 192, baseType: !17, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !528, file: !529, line: 195, baseType: !17, size: 32, offset: 32)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !528, file: !529, line: 199, baseType: !326, size: 64, offset: 64)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !328, file: !329, line: 3386, baseType: !497, size: 1216)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !328, file: !329, line: 3387, baseType: !540, size: 1280)
!540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !329, line: 3093, size: 1280, elements: !541)
!541 = !{!542, !543}
!542 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !540, file: !329, line: 3094, baseType: !497, size: 1216)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !540, file: !329, line: 3095, baseType: !527, size: 64, offset: 1216)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !328, file: !329, line: 3388, baseType: !545, size: 1216)
!545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !329, line: 2824, size: 1216, elements: !546)
!546 = !{!547, !548, !549, !550, !551, !552}
!547 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !545, file: !329, line: 2825, baseType: !451, size: 896)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !545, file: !329, line: 2827, baseType: !326, size: 64, offset: 896)
!549 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !545, file: !329, line: 2828, baseType: !326, size: 64, offset: 960)
!550 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !545, file: !329, line: 2829, baseType: !326, size: 64, offset: 1024)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !545, file: !329, line: 2830, baseType: !326, size: 64, offset: 1088)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !545, file: !329, line: 2831, baseType: !326, size: 64, offset: 1152)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !328, file: !329, line: 3389, baseType: !554, size: 1024)
!554 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !329, line: 2850, size: 1024, elements: !555)
!555 = !{!556, !557, !558}
!556 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !554, file: !329, line: 2851, baseType: !489, size: 960)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !554, file: !329, line: 2852, baseType: !100, size: 32, offset: 960)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !554, file: !329, line: 2853, baseType: !100, size: 32, offset: 992)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !328, file: !329, line: 3390, baseType: !560, size: 1024)
!560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !329, line: 2857, size: 1024, elements: !561)
!561 = !{!562, !563}
!562 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !560, file: !329, line: 2858, baseType: !489, size: 960)
!563 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !560, file: !329, line: 2859, baseType: !527, size: 64, offset: 960)
!564 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !328, file: !329, line: 3391, baseType: !565, size: 960)
!565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !329, line: 2862, size: 960, elements: !566)
!566 = !{!567}
!567 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !565, file: !329, line: 2863, baseType: !489, size: 960)
!568 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !328, file: !329, line: 3392, baseType: !569, size: 1472)
!569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !329, line: 3304, size: 1472, elements: !570)
!570 = !{!571}
!571 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !569, file: !329, line: 3305, baseType: !494, size: 1472)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !328, file: !329, line: 3393, baseType: !573, size: 1792)
!573 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !329, line: 3248, size: 1792, elements: !574)
!574 = !{!575, !576, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924}
!575 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !573, file: !329, line: 3249, baseType: !494, size: 1472)
!576 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !573, file: !329, line: 3251, baseType: !577, size: 64, offset: 1472)
!577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !578, size: 64)
!578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !579, line: 463, size: 1152, elements: !580)
!579 = !DIFile(filename: "./function.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!580 = !{!581, !584, !625, !626, !767, !843, !844, !845, !846, !847, !848, !877, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903}
!581 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !578, file: !579, line: 464, baseType: !582, size: 64)
!582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !583, size: 64)
!583 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !579, line: 464, flags: DIFlagFwdDecl)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !578, file: !579, line: 467, baseType: !585, size: 64, offset: 64)
!585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !586, size: 64)
!586 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !36, line: 374, size: 640, elements: !587)
!587 = !{!588, !590, !591, !604, !605, !606, !607, !608, !614, !621, !623, !624}
!588 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !586, file: !36, line: 377, baseType: !589, size: 64)
!589 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !8, line: 111, baseType: !34)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !586, file: !36, line: 378, baseType: !589, size: 64, offset: 64)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !586, file: !36, line: 381, baseType: !592, size: 64, offset: 128)
!592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !593, size: 64)
!593 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !36, line: 282, baseType: !594)
!594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !36, line: 282, size: 128, elements: !595)
!595 = !{!596}
!596 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !594, file: !36, line: 282, baseType: !597, size: 128)
!597 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !36, line: 281, baseType: !598)
!598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !36, line: 281, size: 128, elements: !599)
!599 = !{!600, !601, !602}
!600 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !598, file: !36, line: 281, baseType: !17, size: 32)
!601 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !598, file: !36, line: 281, baseType: !17, size: 32, offset: 32)
!602 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !598, file: !36, line: 281, baseType: !603, size: 64, offset: 64)
!603 = !DICompositeType(tag: DW_TAG_array_type, baseType: !589, size: 64, elements: !115)
!604 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !586, file: !36, line: 384, baseType: !100, size: 32, offset: 192)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !586, file: !36, line: 387, baseType: !100, size: 32, offset: 224)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !586, file: !36, line: 390, baseType: !100, size: 32, offset: 256)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !586, file: !36, line: 394, baseType: !592, size: 64, offset: 320)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !586, file: !36, line: 396, baseType: !609, size: 32, offset: 384)
!609 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !36, line: 363, baseType: !17, size: 32, elements: !610)
!610 = !{!611, !612, !613}
!611 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!612 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!613 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !586, file: !36, line: 399, baseType: !615, size: 64, offset: 416)
!615 = !DICompositeType(tag: DW_TAG_array_type, baseType: !616, size: 64, elements: !279)
!616 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !36, line: 355, baseType: !17, size: 32, elements: !617)
!617 = !{!618, !619, !620}
!618 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!619 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!620 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !586, file: !36, line: 402, baseType: !622, size: 64, offset: 480)
!622 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 64, elements: !279)
!623 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !586, file: !36, line: 406, baseType: !100, size: 32, offset: 544)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !586, file: !36, line: 409, baseType: !100, size: 32, offset: 576)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !578, file: !579, line: 470, baseType: !62, size: 64, offset: 128)
!626 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !578, file: !579, line: 473, baseType: !627, size: 64, offset: 192)
!627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !628, size: 64)
!628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !529, line: 39, size: 1152, elements: !629)
!629 = !{!630, !682, !695, !708, !709, !721, !722, !726, !727, !728, !729, !730}
!630 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !628, file: !529, line: 41, baseType: !631, size: 64)
!631 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !632, line: 144, baseType: !633)
!632 = !DIFile(filename: "./include/hashtab.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !634, size: 64)
!634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !632, line: 100, size: 896, elements: !635)
!635 = !{!636, !644, !649, !654, !656, !659, !660, !661, !662, !663, !668, !670, !671, !676, !681}
!636 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !634, file: !632, line: 102, baseType: !637, size: 64)
!637 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !632, line: 52, baseType: !638)
!638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !639, size: 64)
!639 = !DISubroutineType(types: !640)
!640 = !{!641, !642}
!641 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !632, line: 47, baseType: !17)
!642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !643, size: 64)
!643 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!644 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !634, file: !632, line: 105, baseType: !645, size: 64, offset: 64)
!645 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !632, line: 59, baseType: !646)
!646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !647, size: 64)
!647 = !DISubroutineType(types: !648)
!648 = !{!100, !642, !642}
!649 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !634, file: !632, line: 108, baseType: !650, size: 64, offset: 128)
!650 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !632, line: 63, baseType: !651)
!651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !652, size: 64)
!652 = !DISubroutineType(types: !653)
!653 = !{null, !316}
!654 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !634, file: !632, line: 111, baseType: !655, size: 64, offset: 192)
!655 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !316, size: 64)
!656 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !634, file: !632, line: 114, baseType: !657, size: 64, offset: 256)
!657 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !658, line: 46, baseType: !278)
!658 = !DIFile(filename: "/scratch/install/llvm-install-release/lib/clang/9.0.1/include/stddef.h", directory: "")
!659 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !634, file: !632, line: 117, baseType: !657, size: 64, offset: 320)
!660 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !634, file: !632, line: 120, baseType: !657, size: 64, offset: 384)
!661 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !634, file: !632, line: 124, baseType: !17, size: 32, offset: 448)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !634, file: !632, line: 128, baseType: !17, size: 32, offset: 480)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !634, file: !632, line: 131, baseType: !664, size: 64, offset: 512)
!664 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !632, line: 75, baseType: !665)
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !666, size: 64)
!666 = !DISubroutineType(types: !667)
!667 = !{!316, !657, !657}
!668 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !634, file: !632, line: 132, baseType: !669, size: 64, offset: 576)
!669 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !632, line: 78, baseType: !651)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !634, file: !632, line: 135, baseType: !316, size: 64, offset: 640)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !634, file: !632, line: 136, baseType: !672, size: 64, offset: 704)
!672 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !632, line: 82, baseType: !673)
!673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !674, size: 64)
!674 = !DISubroutineType(types: !675)
!675 = !{!316, !316, !657, !657}
!676 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !634, file: !632, line: 137, baseType: !677, size: 64, offset: 768)
!677 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !632, line: 83, baseType: !678)
!678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !679, size: 64)
!679 = !DISubroutineType(types: !680)
!680 = !{null, !316, !316}
!681 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !634, file: !632, line: 141, baseType: !17, size: 32, offset: 832)
!682 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !628, file: !529, line: 48, baseType: !683, size: 64, offset: 64)
!683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !684, size: 64)
!684 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !11, line: 35, baseType: !685)
!685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !11, line: 35, size: 128, elements: !686)
!686 = !{!687}
!687 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !685, file: !11, line: 35, baseType: !688, size: 128)
!688 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !11, line: 33, baseType: !689)
!689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !11, line: 33, size: 128, elements: !690)
!690 = !{!691, !692, !693}
!691 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !689, file: !11, line: 33, baseType: !17, size: 32)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !689, file: !11, line: 33, baseType: !17, size: 32, offset: 32)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !689, file: !11, line: 33, baseType: !694, size: 64, offset: 64)
!694 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !115)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !628, file: !529, line: 51, baseType: !696, size: 64, offset: 128)
!696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !697, size: 64)
!697 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !329, line: 183, baseType: !698)
!698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !329, line: 183, size: 128, elements: !699)
!699 = !{!700}
!700 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !698, file: !329, line: 183, baseType: !701, size: 128)
!701 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !329, line: 182, baseType: !702)
!702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !329, line: 182, size: 128, elements: !703)
!703 = !{!704, !705, !706}
!704 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !702, file: !329, line: 182, baseType: !17, size: 32)
!705 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !702, file: !329, line: 182, baseType: !17, size: 32, offset: 32)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !702, file: !329, line: 182, baseType: !707, size: 64, offset: 64)
!707 = !DICompositeType(tag: DW_TAG_array_type, baseType: !326, size: 64, elements: !115)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !628, file: !529, line: 54, baseType: !326, size: 64, offset: 192)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !628, file: !529, line: 57, baseType: !710, size: 128, offset: 256)
!710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !711, line: 31, size: 128, elements: !712)
!711 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!712 = !{!713, !714, !715, !716, !717, !718, !719}
!713 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !710, file: !711, line: 35, baseType: !17, size: 1, flags: DIFlagBitField, extraData: i64 0)
!714 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !710, file: !711, line: 39, baseType: !17, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!715 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !710, file: !711, line: 42, baseType: !17, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!716 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !710, file: !711, line: 46, baseType: !17, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !710, file: !711, line: 50, baseType: !17, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !710, file: !711, line: 53, baseType: !17, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !710, file: !711, line: 56, baseType: !720, size: 64, offset: 64)
!720 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !8, line: 47, baseType: !262)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !628, file: !529, line: 60, baseType: !710, size: 128, offset: 384)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !628, file: !529, line: 64, baseType: !723, size: 64, offset: 512)
!723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !724, size: 64)
!724 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !725, line: 33, flags: DIFlagFwdDecl)
!725 = !DIFile(filename: "./pointer-set.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!726 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !628, file: !529, line: 67, baseType: !326, size: 64, offset: 576)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !628, file: !529, line: 73, baseType: !631, size: 64, offset: 640)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !628, file: !529, line: 77, baseType: !720, size: 64, offset: 704)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !628, file: !529, line: 80, baseType: !17, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !628, file: !529, line: 82, baseType: !731, size: 320, offset: 832)
!731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !732, line: 62, size: 320, elements: !733)
!732 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!733 = !{!734, !740, !741, !742, !743, !750}
!734 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !731, file: !732, line: 63, baseType: !735, size: 64)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !736, size: 64)
!736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !732, line: 56, size: 128, elements: !737)
!737 = !{!738, !739}
!738 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !736, file: !732, line: 57, baseType: !735, size: 64)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !736, file: !732, line: 58, baseType: !422, size: 8, offset: 64)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !731, file: !732, line: 64, baseType: !17, size: 32, offset: 64)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !731, file: !732, line: 66, baseType: !17, size: 32, offset: 96)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !731, file: !732, line: 68, baseType: !6, size: 8, offset: 128)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !731, file: !732, line: 70, baseType: !744, size: 64, offset: 192)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !745, size: 64)
!745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !732, line: 37, size: 128, elements: !746)
!746 = !{!747, !748}
!747 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !745, file: !732, line: 39, baseType: !744, size: 64)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !745, file: !732, line: 40, baseType: !749, size: 64, offset: 64)
!749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !326, size: 64)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !731, file: !732, line: 71, baseType: !751, size: 64, offset: 256)
!751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !752, size: 64)
!752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !732, line: 45, size: 320, elements: !753)
!753 = !{!754, !755}
!754 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !752, file: !732, line: 47, baseType: !751, size: 64)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !752, file: !732, line: 48, baseType: !756, size: 256, offset: 64)
!756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !329, line: 1883, size: 256, elements: !757)
!757 = !{!758, !760, !761, !766}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !756, file: !329, line: 1884, baseType: !759, size: 64)
!759 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !756, size: 64)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !756, file: !329, line: 1885, baseType: !759, size: 64, offset: 64)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !756, file: !329, line: 1891, baseType: !762, size: 64, offset: 128)
!762 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !756, file: !329, line: 1891, size: 64, elements: !763)
!763 = !{!764, !765}
!764 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !762, file: !329, line: 1891, baseType: !7, size: 64)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !762, file: !329, line: 1891, baseType: !326, size: 64)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !756, file: !329, line: 1892, baseType: !749, size: 64, offset: 192)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !578, file: !579, line: 476, baseType: !768, size: 64, offset: 256)
!768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !769, size: 64)
!769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !770, line: 187, size: 256, elements: !771)
!770 = !DIFile(filename: "./cfgloop.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!771 = !{!772, !773, !841, !842}
!772 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !769, file: !770, line: 189, baseType: !100, size: 32)
!773 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !769, file: !770, line: 192, baseType: !774, size: 64, offset: 64)
!774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !775, size: 64)
!775 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !770, line: 87, baseType: !776)
!776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !770, line: 87, size: 128, elements: !777)
!777 = !{!778}
!778 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !776, file: !770, line: 87, baseType: !779, size: 128)
!779 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !770, line: 85, baseType: !780)
!780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !770, line: 85, size: 128, elements: !781)
!781 = !{!782, !783, !784}
!782 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !780, file: !770, line: 85, baseType: !17, size: 32)
!783 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !780, file: !770, line: 85, baseType: !17, size: 32, offset: 32)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !780, file: !770, line: 85, baseType: !785, size: 64, offset: 64)
!785 = !DICompositeType(tag: DW_TAG_array_type, baseType: !786, size: 64, elements: !115)
!786 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !770, line: 84, baseType: !787)
!787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !788, size: 64)
!788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !770, line: 100, size: 1216, elements: !789)
!789 = !{!790, !791, !792, !793, !794, !807, !808, !809, !810, !811, !812, !813, !814, !815, !816, !817, !818, !823, !831, !839, !840}
!790 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !788, file: !770, line: 102, baseType: !100, size: 32)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !788, file: !770, line: 105, baseType: !17, size: 32, offset: 32)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !788, file: !770, line: 108, baseType: !34, size: 64, offset: 64)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !788, file: !770, line: 111, baseType: !34, size: 64, offset: 128)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !788, file: !770, line: 114, baseType: !795, size: 64, offset: 192)
!795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !770, line: 41, size: 64, elements: !796)
!796 = !{!797, !806}
!797 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !795, file: !770, line: 42, baseType: !798, size: 32)
!798 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !770, line: 31, baseType: !17, size: 32, elements: !799)
!799 = !{!800, !801, !802, !803, !804, !805}
!800 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!801 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!802 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!803 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!804 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!805 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!806 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !795, file: !770, line: 43, baseType: !17, size: 32, offset: 32)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !788, file: !770, line: 117, baseType: !17, size: 32, offset: 256)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !788, file: !770, line: 120, baseType: !17, size: 32, offset: 288)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !788, file: !770, line: 123, baseType: !774, size: 64, offset: 320)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !788, file: !770, line: 126, baseType: !787, size: 64, offset: 384)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !788, file: !770, line: 129, baseType: !787, size: 64, offset: 448)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !788, file: !770, line: 132, baseType: !316, size: 64, offset: 512)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !788, file: !770, line: 139, baseType: !326, size: 64, offset: 576)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !788, file: !770, line: 143, baseType: !375, size: 128, offset: 640)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !788, file: !770, line: 146, baseType: !375, size: 128, offset: 768)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !788, file: !770, line: 148, baseType: !6, size: 8, offset: 896)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !788, file: !770, line: 149, baseType: !6, size: 8, offset: 904)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !788, file: !770, line: 153, baseType: !819, size: 32, offset: 928)
!819 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !770, line: 91, baseType: !17, size: 32, elements: !820)
!820 = !{!821, !822}
!821 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!822 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!823 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !788, file: !770, line: 156, baseType: !824, size: 64, offset: 960)
!824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !825, size: 64)
!825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !770, line: 48, size: 320, elements: !826)
!826 = !{!827, !828, !829, !830}
!827 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !825, file: !770, line: 50, baseType: !7, size: 64)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !825, file: !770, line: 59, baseType: !375, size: 128, offset: 64)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !825, file: !770, line: 64, baseType: !6, size: 8, offset: 192)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !825, file: !770, line: 67, baseType: !824, size: 64, offset: 256)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !788, file: !770, line: 159, baseType: !832, size: 64, offset: 1024)
!832 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !833, size: 64)
!833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !770, line: 72, size: 256, elements: !834)
!834 = !{!835, !836, !837, !838}
!835 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !833, file: !770, line: 74, baseType: !52, size: 64)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !833, file: !770, line: 77, baseType: !832, size: 64, offset: 64)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !833, file: !770, line: 78, baseType: !832, size: 64, offset: 128)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !833, file: !770, line: 81, baseType: !832, size: 64, offset: 192)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !788, file: !770, line: 162, baseType: !6, size: 8, offset: 1088)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !788, file: !770, line: 166, baseType: !326, size: 64, offset: 1152)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !769, file: !770, line: 197, baseType: !631, size: 64, offset: 128)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !769, file: !770, line: 200, baseType: !787, size: 64, offset: 192)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !578, file: !579, line: 479, baseType: !631, size: 64, offset: 320)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !578, file: !579, line: 484, baseType: !326, size: 64, offset: 384)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !578, file: !579, line: 488, baseType: !326, size: 64, offset: 448)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !578, file: !579, line: 493, baseType: !326, size: 64, offset: 512)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !578, file: !579, line: 496, baseType: !326, size: 64, offset: 576)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !578, file: !579, line: 501, baseType: !849, size: 64, offset: 640)
!849 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !850, size: 64)
!850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !851, line: 2355, size: 576, elements: !852)
!851 = !DIFile(filename: "./config/i386/i386.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!852 = !{!853, !856, !857, !858, !859, !861, !862, !867, !872, !873, !874, !875, !876}
!853 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !850, file: !851, line: 2356, baseType: !854, size: 64)
!854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !855, size: 64)
!855 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !851, line: 2356, flags: DIFlagFwdDecl)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !850, file: !851, line: 2357, baseType: !103, size: 64, offset: 64)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !850, file: !851, line: 2358, baseType: !100, size: 32, offset: 128)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !850, file: !851, line: 2359, baseType: !100, size: 32, offset: 160)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !850, file: !851, line: 2360, baseType: !860, size: 128, offset: 192)
!860 = !DICompositeType(tag: DW_TAG_array_type, baseType: !100, size: 128, elements: !305)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !850, file: !851, line: 2364, baseType: !100, size: 32, offset: 320)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !850, file: !851, line: 2367, baseType: !863, size: 128, offset: 384)
!863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !851, line: 2349, size: 128, elements: !864)
!864 = !{!865, !866}
!865 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !863, file: !851, line: 2351, baseType: !76, size: 64)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !863, file: !851, line: 2352, baseType: !295, size: 64, offset: 64)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !850, file: !851, line: 2371, baseType: !868, size: 32, offset: 512)
!868 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !851, line: 474, baseType: !17, size: 32, elements: !869)
!869 = !{!870, !871}
!870 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!871 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !850, file: !851, line: 2374, baseType: !17, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !850, file: !851, line: 2377, baseType: !17, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !850, file: !851, line: 2381, baseType: !17, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !850, file: !851, line: 2392, baseType: !17, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !850, file: !851, line: 2396, baseType: !17, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !578, file: !579, line: 504, baseType: !878, size: 64, offset: 704)
!878 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !879, size: 64)
!879 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !579, line: 504, flags: DIFlagFwdDecl)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !578, file: !579, line: 507, baseType: !631, size: 64, offset: 768)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !578, file: !579, line: 510, baseType: !100, size: 32, offset: 832)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !578, file: !579, line: 513, baseType: !100, size: 32, offset: 864)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !578, file: !579, line: 516, baseType: !28, size: 32, offset: 896)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !578, file: !579, line: 519, baseType: !28, size: 32, offset: 928)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !578, file: !579, line: 522, baseType: !17, size: 32, offset: 960)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !578, file: !579, line: 523, baseType: !17, size: 32, offset: 992)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !578, file: !579, line: 528, baseType: !103, size: 64, offset: 1024)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !578, file: !579, line: 535, baseType: !17, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !578, file: !579, line: 539, baseType: !17, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !578, file: !579, line: 543, baseType: !17, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !578, file: !579, line: 546, baseType: !17, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !578, file: !579, line: 550, baseType: !17, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !578, file: !579, line: 554, baseType: !17, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !578, file: !579, line: 559, baseType: !17, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !578, file: !579, line: 562, baseType: !17, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !578, file: !579, line: 571, baseType: !17, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !578, file: !579, line: 573, baseType: !17, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !578, file: !579, line: 574, baseType: !17, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !578, file: !579, line: 581, baseType: !17, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !578, file: !579, line: 585, baseType: !17, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !578, file: !579, line: 588, baseType: !17, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !578, file: !579, line: 592, baseType: !17, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !578, file: !579, line: 598, baseType: !17, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !573, file: !329, line: 3254, baseType: !326, size: 64, offset: 1536)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !573, file: !329, line: 3257, baseType: !326, size: 64, offset: 1600)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !573, file: !329, line: 3258, baseType: !326, size: 64, offset: 1664)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !573, file: !329, line: 3264, baseType: !17, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!908 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !573, file: !329, line: 3265, baseType: !17, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!909 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !573, file: !329, line: 3267, baseType: !17, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !573, file: !329, line: 3268, baseType: !17, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !573, file: !329, line: 3269, baseType: !17, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!912 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !573, file: !329, line: 3271, baseType: !17, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !573, file: !329, line: 3272, baseType: !17, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!914 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !573, file: !329, line: 3273, baseType: !17, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !573, file: !329, line: 3274, baseType: !17, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !573, file: !329, line: 3275, baseType: !17, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !573, file: !329, line: 3276, baseType: !17, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !573, file: !329, line: 3277, baseType: !17, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !573, file: !329, line: 3279, baseType: !17, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !573, file: !329, line: 3280, baseType: !17, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !573, file: !329, line: 3281, baseType: !17, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !573, file: !329, line: 3282, baseType: !17, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !573, file: !329, line: 3283, baseType: !17, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !573, file: !329, line: 3284, baseType: !17, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !328, file: !329, line: 3394, baseType: !926, size: 1344)
!926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !329, line: 2279, size: 1344, elements: !927)
!927 = !{!928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !953, !954, !955, !963, !964, !965, !966, !967, !968, !969, !970, !971}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !926, file: !329, line: 2280, baseType: !365, size: 192)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !926, file: !329, line: 2281, baseType: !326, size: 64, offset: 192)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !926, file: !329, line: 2282, baseType: !326, size: 64, offset: 256)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !926, file: !329, line: 2283, baseType: !326, size: 64, offset: 320)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !926, file: !329, line: 2284, baseType: !326, size: 64, offset: 384)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !926, file: !329, line: 2285, baseType: !17, size: 32, offset: 448)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !926, file: !329, line: 2287, baseType: !17, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !926, file: !329, line: 2288, baseType: !17, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !926, file: !329, line: 2289, baseType: !17, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !926, file: !329, line: 2290, baseType: !17, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !926, file: !329, line: 2291, baseType: !17, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!939 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !926, file: !329, line: 2292, baseType: !17, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !926, file: !329, line: 2294, baseType: !17, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !926, file: !329, line: 2296, baseType: !17, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !926, file: !329, line: 2297, baseType: !17, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!943 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !926, file: !329, line: 2298, baseType: !17, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!944 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !926, file: !329, line: 2299, baseType: !17, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!945 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !926, file: !329, line: 2300, baseType: !17, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !926, file: !329, line: 2301, baseType: !17, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !926, file: !329, line: 2302, baseType: !17, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !926, file: !329, line: 2303, baseType: !17, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !926, file: !329, line: 2305, baseType: !17, size: 32, offset: 512)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !926, file: !329, line: 2306, baseType: !951, size: 32, offset: 544)
!951 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !952, line: 31, baseType: !100)
!952 = !DIFile(filename: "./alias.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!953 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !926, file: !329, line: 2307, baseType: !326, size: 64, offset: 576)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !926, file: !329, line: 2308, baseType: !326, size: 64, offset: 640)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !926, file: !329, line: 2314, baseType: !956, size: 64, offset: 704)
!956 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !329, line: 2309, size: 64, elements: !957)
!957 = !{!958, !959, !960}
!958 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !956, file: !329, line: 2310, baseType: !100, size: 32)
!959 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !956, file: !329, line: 2311, baseType: !103, size: 64)
!960 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !956, file: !329, line: 2312, baseType: !961, size: 64)
!961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !962, size: 64)
!962 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !329, line: 2277, flags: DIFlagFwdDecl)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !926, file: !329, line: 2315, baseType: !326, size: 64, offset: 768)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !926, file: !329, line: 2316, baseType: !326, size: 64, offset: 832)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !926, file: !329, line: 2317, baseType: !326, size: 64, offset: 896)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !926, file: !329, line: 2318, baseType: !326, size: 64, offset: 960)
!967 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !926, file: !329, line: 2319, baseType: !326, size: 64, offset: 1024)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !926, file: !329, line: 2320, baseType: !326, size: 64, offset: 1088)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !926, file: !329, line: 2321, baseType: !326, size: 64, offset: 1152)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !926, file: !329, line: 2322, baseType: !326, size: 64, offset: 1216)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !926, file: !329, line: 2324, baseType: !972, size: 64, offset: 1280)
!972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !973, size: 64)
!973 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !329, line: 2324, flags: DIFlagFwdDecl)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !328, file: !329, line: 3395, baseType: !975, size: 320)
!975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !329, line: 1469, size: 320, elements: !976)
!976 = !{!977, !978, !979}
!977 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !975, file: !329, line: 1470, baseType: !365, size: 192)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !975, file: !329, line: 1471, baseType: !326, size: 64, offset: 192)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !975, file: !329, line: 1472, baseType: !326, size: 64, offset: 256)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !328, file: !329, line: 3396, baseType: !981, size: 320)
!981 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !329, line: 1482, size: 320, elements: !982)
!982 = !{!983, !984, !985}
!983 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !981, file: !329, line: 1483, baseType: !365, size: 192)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !981, file: !329, line: 1484, baseType: !100, size: 32, offset: 192)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !981, file: !329, line: 1485, baseType: !707, size: 64, offset: 256)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !328, file: !329, line: 3397, baseType: !987, size: 384)
!987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !329, line: 1829, size: 384, elements: !988)
!988 = !{!989, !990, !991, !992}
!989 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !987, file: !329, line: 1830, baseType: !365, size: 192)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !987, file: !329, line: 1831, baseType: !28, size: 32, offset: 192)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !987, file: !329, line: 1832, baseType: !326, size: 64, offset: 256)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !987, file: !329, line: 1835, baseType: !707, size: 64, offset: 320)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !328, file: !329, line: 3398, baseType: !994, size: 704)
!994 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !329, line: 1898, size: 704, elements: !995)
!995 = !{!996, !997, !998, !999, !1000, !1005}
!996 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !994, file: !329, line: 1899, baseType: !365, size: 192)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !994, file: !329, line: 1902, baseType: !326, size: 64, offset: 192)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !994, file: !329, line: 1905, baseType: !7, size: 64, offset: 256)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !994, file: !329, line: 1908, baseType: !17, size: 32, offset: 320)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !994, file: !329, line: 1911, baseType: !1001, size: 64, offset: 384)
!1001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1002, size: 64)
!1002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !529, line: 117, size: 128, elements: !1003)
!1003 = !{!1004}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1002, file: !529, line: 120, baseType: !710, size: 128)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !994, file: !329, line: 1914, baseType: !756, size: 256, offset: 448)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !328, file: !329, line: 3399, baseType: !1007, size: 704)
!1007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !329, line: 2008, size: 704, elements: !1008)
!1008 = !{!1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019}
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1007, file: !329, line: 2009, baseType: !365, size: 192)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1007, file: !329, line: 2011, baseType: !17, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1007, file: !329, line: 2012, baseType: !17, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1007, file: !329, line: 2014, baseType: !28, size: 32, offset: 224)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1007, file: !329, line: 2016, baseType: !326, size: 64, offset: 256)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1007, file: !329, line: 2017, baseType: !696, size: 64, offset: 320)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1007, file: !329, line: 2019, baseType: !326, size: 64, offset: 384)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1007, file: !329, line: 2020, baseType: !326, size: 64, offset: 448)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1007, file: !329, line: 2021, baseType: !326, size: 64, offset: 512)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1007, file: !329, line: 2022, baseType: !326, size: 64, offset: 576)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1007, file: !329, line: 2023, baseType: !326, size: 64, offset: 640)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !328, file: !329, line: 3400, baseType: !1021, size: 832)
!1021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !329, line: 2430, size: 832, elements: !1022)
!1022 = !{!1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032}
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1021, file: !329, line: 2431, baseType: !365, size: 192)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1021, file: !329, line: 2433, baseType: !326, size: 64, offset: 192)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1021, file: !329, line: 2434, baseType: !326, size: 64, offset: 256)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1021, file: !329, line: 2435, baseType: !326, size: 64, offset: 320)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1021, file: !329, line: 2436, baseType: !326, size: 64, offset: 384)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1021, file: !329, line: 2437, baseType: !696, size: 64, offset: 448)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1021, file: !329, line: 2438, baseType: !326, size: 64, offset: 512)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1021, file: !329, line: 2440, baseType: !326, size: 64, offset: 576)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1021, file: !329, line: 2441, baseType: !326, size: 64, offset: 640)
!1032 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1021, file: !329, line: 2443, baseType: !1033, size: 128, offset: 704)
!1033 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !329, line: 182, baseType: !1034)
!1034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !329, line: 182, size: 128, elements: !1035)
!1035 = !{!1036}
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1034, file: !329, line: 182, baseType: !701, size: 128)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !328, file: !329, line: 3401, baseType: !1038, size: 320)
!1038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !329, line: 3327, size: 320, elements: !1039)
!1039 = !{!1040, !1041, !1048}
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1038, file: !329, line: 3329, baseType: !365, size: 192)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1038, file: !329, line: 3330, baseType: !1042, size: 64, offset: 192)
!1042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1043, size: 64)
!1043 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !329, line: 3320, size: 192, elements: !1044)
!1044 = !{!1045, !1046, !1047}
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1043, file: !329, line: 3322, baseType: !1042, size: 64)
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1043, file: !329, line: 3323, baseType: !1042, size: 64, offset: 64)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1043, file: !329, line: 3324, baseType: !326, size: 64, offset: 128)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1038, file: !329, line: 3331, baseType: !1042, size: 64, offset: 256)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !328, file: !329, line: 3402, baseType: !1050, size: 256)
!1050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !329, line: 1540, size: 256, elements: !1051)
!1051 = !{!1052, !1053}
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1050, file: !329, line: 1541, baseType: !365, size: 192)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1050, file: !329, line: 1542, baseType: !1054, size: 64, offset: 192)
!1054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1055, size: 64)
!1055 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !329, line: 1538, baseType: !1056)
!1056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !329, line: 1538, size: 192, elements: !1057)
!1057 = !{!1058}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1056, file: !329, line: 1538, baseType: !1059, size: 192)
!1059 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !329, line: 1537, baseType: !1060)
!1060 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !329, line: 1537, size: 192, elements: !1061)
!1061 = !{!1062, !1063, !1064}
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1060, file: !329, line: 1537, baseType: !17, size: 32)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1060, file: !329, line: 1537, baseType: !17, size: 32, offset: 32)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1060, file: !329, line: 1537, baseType: !1065, size: 128, offset: 64)
!1065 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1066, size: 128, elements: !115)
!1066 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !329, line: 1535, baseType: !1067)
!1067 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !329, line: 1532, size: 128, elements: !1068)
!1068 = !{!1069, !1070}
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1067, file: !329, line: 1533, baseType: !326, size: 64)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1067, file: !329, line: 1534, baseType: !326, size: 64, offset: 64)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !328, file: !329, line: 3403, baseType: !1072, size: 512)
!1072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !329, line: 1938, size: 512, elements: !1073)
!1073 = !{!1074, !1075, !1076, !1095, !1309, !1310, !1311}
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1072, file: !329, line: 1939, baseType: !365, size: 192)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1072, file: !329, line: 1940, baseType: !28, size: 32, offset: 192)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1072, file: !329, line: 1941, baseType: !1077, size: 32, offset: 224)
!1077 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !329, line: 280, baseType: !17, size: 32, elements: !1078)
!1078 = !{!1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094}
!1079 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!1080 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!1081 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!1082 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!1083 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!1084 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!1085 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!1086 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!1087 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!1088 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!1089 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!1090 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!1091 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!1092 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!1093 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!1094 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1072, file: !329, line: 1946, baseType: !1096, size: 32, offset: 256)
!1096 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !329, line: 1942, size: 32, elements: !1097)
!1097 = !{!1098, !1106, !1114}
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1096, file: !329, line: 1943, baseType: !1099, size: 32)
!1099 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !329, line: 1817, baseType: !17, size: 32, elements: !1100)
!1100 = !{!1101, !1102, !1103, !1104, !1105}
!1101 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!1102 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!1103 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!1104 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!1105 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1096, file: !329, line: 1944, baseType: !1107, size: 32)
!1107 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !329, line: 1805, baseType: !17, size: 32, elements: !1108)
!1108 = !{!1109, !1110, !1111, !1112, !1113}
!1109 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!1110 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!1111 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!1112 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!1113 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1096, file: !329, line: 1945, baseType: !1115, size: 32)
!1115 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !329, line: 39, baseType: !17, size: 32, elements: !1116)
!1116 = !{!1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308}
!1117 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!1118 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!1119 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!1120 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!1121 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!1122 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!1123 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!1124 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!1125 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!1126 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!1127 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!1128 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!1129 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!1130 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!1131 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!1132 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!1133 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!1134 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!1135 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!1136 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!1137 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!1138 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!1139 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!1140 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!1141 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!1142 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!1143 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!1144 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!1145 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!1146 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!1147 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!1148 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!1149 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!1150 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!1151 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!1152 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!1153 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!1154 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!1155 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!1156 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!1157 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!1158 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!1159 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!1160 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!1161 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!1162 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!1163 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!1164 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!1165 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!1166 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!1167 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!1168 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!1169 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!1170 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!1171 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!1172 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!1173 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!1174 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!1175 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!1176 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!1177 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!1178 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!1179 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!1180 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!1181 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!1182 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!1183 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!1184 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!1185 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!1186 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!1187 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!1188 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!1189 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!1190 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!1191 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!1192 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!1193 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!1194 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!1195 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!1196 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!1197 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!1198 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!1199 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!1200 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!1201 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!1202 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!1203 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!1204 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!1205 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!1206 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!1207 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!1208 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!1209 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!1210 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!1211 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!1212 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!1213 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!1214 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!1215 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!1216 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!1217 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!1218 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!1219 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!1220 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!1221 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!1222 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!1223 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!1224 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!1225 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!1226 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!1227 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!1228 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!1229 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!1230 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!1231 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!1232 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!1233 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!1234 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!1235 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!1236 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!1237 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!1238 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!1239 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!1240 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!1241 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!1242 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!1243 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!1244 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!1245 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!1246 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!1247 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!1248 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!1249 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!1250 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!1251 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!1252 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!1253 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!1254 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!1255 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!1256 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!1257 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!1258 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!1259 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!1260 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!1261 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!1262 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!1263 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!1264 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!1265 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!1266 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!1267 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!1268 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!1269 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!1270 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!1271 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!1272 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!1273 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!1274 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!1275 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!1276 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!1277 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!1278 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!1279 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!1280 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!1281 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!1282 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!1283 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!1284 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!1285 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!1286 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!1287 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!1288 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!1289 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!1290 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!1291 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!1292 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!1293 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!1294 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!1295 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!1296 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!1297 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!1298 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!1299 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!1300 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!1301 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!1302 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!1303 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!1304 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!1305 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!1306 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!1307 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!1308 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1072, file: !329, line: 1950, baseType: !61, size: 64, offset: 320)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1072, file: !329, line: 1951, baseType: !61, size: 64, offset: 384)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1072, file: !329, line: 1953, baseType: !707, size: 64, offset: 448)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !328, file: !329, line: 3404, baseType: !1313, size: 1664)
!1313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !329, line: 3337, size: 1664, elements: !1314)
!1314 = !{!1315, !1316}
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1313, file: !329, line: 3338, baseType: !365, size: 192)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1313, file: !329, line: 3341, baseType: !1317, size: 1472, offset: 192)
!1317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1318, line: 410, size: 1472, elements: !1319)
!1318 = !DIFile(filename: "./options.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1319 = !{!1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483}
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1317, file: !1318, line: 412, baseType: !100, size: 32)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1317, file: !1318, line: 413, baseType: !100, size: 32, offset: 32)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1317, file: !1318, line: 414, baseType: !100, size: 32, offset: 64)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1317, file: !1318, line: 415, baseType: !100, size: 32, offset: 96)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1317, file: !1318, line: 416, baseType: !100, size: 32, offset: 128)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1317, file: !1318, line: 417, baseType: !100, size: 32, offset: 160)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1317, file: !1318, line: 418, baseType: !6, size: 8, offset: 192)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1317, file: !1318, line: 419, baseType: !6, size: 8, offset: 200)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1317, file: !1318, line: 420, baseType: !1329, size: 8, offset: 208)
!1329 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1317, file: !1318, line: 421, baseType: !1329, size: 8, offset: 216)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1317, file: !1318, line: 422, baseType: !1329, size: 8, offset: 224)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1317, file: !1318, line: 423, baseType: !1329, size: 8, offset: 232)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1317, file: !1318, line: 424, baseType: !1329, size: 8, offset: 240)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1317, file: !1318, line: 425, baseType: !1329, size: 8, offset: 248)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1317, file: !1318, line: 426, baseType: !1329, size: 8, offset: 256)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1317, file: !1318, line: 427, baseType: !1329, size: 8, offset: 264)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1317, file: !1318, line: 428, baseType: !1329, size: 8, offset: 272)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1317, file: !1318, line: 429, baseType: !1329, size: 8, offset: 280)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1317, file: !1318, line: 430, baseType: !1329, size: 8, offset: 288)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1317, file: !1318, line: 431, baseType: !1329, size: 8, offset: 296)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1317, file: !1318, line: 432, baseType: !1329, size: 8, offset: 304)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1317, file: !1318, line: 433, baseType: !1329, size: 8, offset: 312)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1317, file: !1318, line: 434, baseType: !1329, size: 8, offset: 320)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1317, file: !1318, line: 435, baseType: !1329, size: 8, offset: 328)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1317, file: !1318, line: 436, baseType: !1329, size: 8, offset: 336)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1317, file: !1318, line: 437, baseType: !1329, size: 8, offset: 344)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1317, file: !1318, line: 438, baseType: !1329, size: 8, offset: 352)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1317, file: !1318, line: 439, baseType: !1329, size: 8, offset: 360)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1317, file: !1318, line: 440, baseType: !1329, size: 8, offset: 368)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1317, file: !1318, line: 441, baseType: !1329, size: 8, offset: 376)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1317, file: !1318, line: 442, baseType: !1329, size: 8, offset: 384)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1317, file: !1318, line: 443, baseType: !1329, size: 8, offset: 392)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1317, file: !1318, line: 444, baseType: !1329, size: 8, offset: 400)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1317, file: !1318, line: 445, baseType: !1329, size: 8, offset: 408)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1317, file: !1318, line: 446, baseType: !1329, size: 8, offset: 416)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1317, file: !1318, line: 447, baseType: !1329, size: 8, offset: 424)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1317, file: !1318, line: 448, baseType: !1329, size: 8, offset: 432)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1317, file: !1318, line: 449, baseType: !1329, size: 8, offset: 440)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1317, file: !1318, line: 450, baseType: !1329, size: 8, offset: 448)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1317, file: !1318, line: 451, baseType: !1329, size: 8, offset: 456)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1317, file: !1318, line: 452, baseType: !1329, size: 8, offset: 464)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1317, file: !1318, line: 453, baseType: !1329, size: 8, offset: 472)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1317, file: !1318, line: 454, baseType: !1329, size: 8, offset: 480)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1317, file: !1318, line: 455, baseType: !1329, size: 8, offset: 488)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1317, file: !1318, line: 456, baseType: !1329, size: 8, offset: 496)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1317, file: !1318, line: 457, baseType: !1329, size: 8, offset: 504)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1317, file: !1318, line: 458, baseType: !1329, size: 8, offset: 512)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1317, file: !1318, line: 459, baseType: !1329, size: 8, offset: 520)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1317, file: !1318, line: 460, baseType: !1329, size: 8, offset: 528)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1317, file: !1318, line: 461, baseType: !1329, size: 8, offset: 536)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1317, file: !1318, line: 462, baseType: !1329, size: 8, offset: 544)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1317, file: !1318, line: 463, baseType: !1329, size: 8, offset: 552)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1317, file: !1318, line: 464, baseType: !1329, size: 8, offset: 560)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1317, file: !1318, line: 465, baseType: !1329, size: 8, offset: 568)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1317, file: !1318, line: 466, baseType: !1329, size: 8, offset: 576)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1317, file: !1318, line: 467, baseType: !1329, size: 8, offset: 584)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1317, file: !1318, line: 468, baseType: !1329, size: 8, offset: 592)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1317, file: !1318, line: 469, baseType: !1329, size: 8, offset: 600)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1317, file: !1318, line: 470, baseType: !1329, size: 8, offset: 608)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1317, file: !1318, line: 471, baseType: !1329, size: 8, offset: 616)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1317, file: !1318, line: 472, baseType: !1329, size: 8, offset: 624)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1317, file: !1318, line: 473, baseType: !1329, size: 8, offset: 632)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1317, file: !1318, line: 474, baseType: !1329, size: 8, offset: 640)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1317, file: !1318, line: 475, baseType: !1329, size: 8, offset: 648)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1317, file: !1318, line: 476, baseType: !1329, size: 8, offset: 656)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1317, file: !1318, line: 477, baseType: !1329, size: 8, offset: 664)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1317, file: !1318, line: 478, baseType: !1329, size: 8, offset: 672)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1317, file: !1318, line: 479, baseType: !1329, size: 8, offset: 680)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1317, file: !1318, line: 480, baseType: !1329, size: 8, offset: 688)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1317, file: !1318, line: 481, baseType: !1329, size: 8, offset: 696)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1317, file: !1318, line: 482, baseType: !1329, size: 8, offset: 704)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1317, file: !1318, line: 483, baseType: !1329, size: 8, offset: 712)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1317, file: !1318, line: 484, baseType: !1329, size: 8, offset: 720)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1317, file: !1318, line: 485, baseType: !1329, size: 8, offset: 728)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1317, file: !1318, line: 486, baseType: !1329, size: 8, offset: 736)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1317, file: !1318, line: 487, baseType: !1329, size: 8, offset: 744)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1317, file: !1318, line: 488, baseType: !1329, size: 8, offset: 752)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1317, file: !1318, line: 489, baseType: !1329, size: 8, offset: 760)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1317, file: !1318, line: 490, baseType: !1329, size: 8, offset: 768)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1317, file: !1318, line: 491, baseType: !1329, size: 8, offset: 776)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1317, file: !1318, line: 492, baseType: !1329, size: 8, offset: 784)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1317, file: !1318, line: 493, baseType: !1329, size: 8, offset: 792)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1317, file: !1318, line: 494, baseType: !1329, size: 8, offset: 800)
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1317, file: !1318, line: 495, baseType: !1329, size: 8, offset: 808)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1317, file: !1318, line: 496, baseType: !1329, size: 8, offset: 816)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1317, file: !1318, line: 497, baseType: !1329, size: 8, offset: 824)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1317, file: !1318, line: 498, baseType: !1329, size: 8, offset: 832)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1317, file: !1318, line: 499, baseType: !1329, size: 8, offset: 840)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1317, file: !1318, line: 500, baseType: !1329, size: 8, offset: 848)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1317, file: !1318, line: 501, baseType: !1329, size: 8, offset: 856)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1317, file: !1318, line: 502, baseType: !1329, size: 8, offset: 864)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1317, file: !1318, line: 503, baseType: !1329, size: 8, offset: 872)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1317, file: !1318, line: 504, baseType: !1329, size: 8, offset: 880)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1317, file: !1318, line: 505, baseType: !1329, size: 8, offset: 888)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1317, file: !1318, line: 506, baseType: !1329, size: 8, offset: 896)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1317, file: !1318, line: 507, baseType: !1329, size: 8, offset: 904)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1317, file: !1318, line: 508, baseType: !1329, size: 8, offset: 912)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1317, file: !1318, line: 509, baseType: !1329, size: 8, offset: 920)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1317, file: !1318, line: 510, baseType: !1329, size: 8, offset: 928)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1317, file: !1318, line: 511, baseType: !1329, size: 8, offset: 936)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1317, file: !1318, line: 512, baseType: !1329, size: 8, offset: 944)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1317, file: !1318, line: 513, baseType: !1329, size: 8, offset: 952)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1317, file: !1318, line: 514, baseType: !1329, size: 8, offset: 960)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1317, file: !1318, line: 515, baseType: !1329, size: 8, offset: 968)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1317, file: !1318, line: 516, baseType: !1329, size: 8, offset: 976)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1317, file: !1318, line: 517, baseType: !1329, size: 8, offset: 984)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1317, file: !1318, line: 518, baseType: !1329, size: 8, offset: 992)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1317, file: !1318, line: 519, baseType: !1329, size: 8, offset: 1000)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1317, file: !1318, line: 520, baseType: !1329, size: 8, offset: 1008)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1317, file: !1318, line: 521, baseType: !1329, size: 8, offset: 1016)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1317, file: !1318, line: 522, baseType: !1329, size: 8, offset: 1024)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1317, file: !1318, line: 523, baseType: !1329, size: 8, offset: 1032)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1317, file: !1318, line: 524, baseType: !1329, size: 8, offset: 1040)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1317, file: !1318, line: 525, baseType: !1329, size: 8, offset: 1048)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1317, file: !1318, line: 526, baseType: !1329, size: 8, offset: 1056)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1317, file: !1318, line: 527, baseType: !1329, size: 8, offset: 1064)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1317, file: !1318, line: 528, baseType: !1329, size: 8, offset: 1072)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1317, file: !1318, line: 529, baseType: !1329, size: 8, offset: 1080)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1317, file: !1318, line: 530, baseType: !1329, size: 8, offset: 1088)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1317, file: !1318, line: 531, baseType: !1329, size: 8, offset: 1096)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1317, file: !1318, line: 532, baseType: !1329, size: 8, offset: 1104)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1317, file: !1318, line: 533, baseType: !1329, size: 8, offset: 1112)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1317, file: !1318, line: 534, baseType: !1329, size: 8, offset: 1120)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1317, file: !1318, line: 535, baseType: !1329, size: 8, offset: 1128)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1317, file: !1318, line: 536, baseType: !1329, size: 8, offset: 1136)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1317, file: !1318, line: 537, baseType: !1329, size: 8, offset: 1144)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1317, file: !1318, line: 538, baseType: !1329, size: 8, offset: 1152)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1317, file: !1318, line: 539, baseType: !1329, size: 8, offset: 1160)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1317, file: !1318, line: 540, baseType: !1329, size: 8, offset: 1168)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1317, file: !1318, line: 541, baseType: !1329, size: 8, offset: 1176)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1317, file: !1318, line: 542, baseType: !1329, size: 8, offset: 1184)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1317, file: !1318, line: 543, baseType: !1329, size: 8, offset: 1192)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1317, file: !1318, line: 544, baseType: !1329, size: 8, offset: 1200)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1317, file: !1318, line: 545, baseType: !1329, size: 8, offset: 1208)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1317, file: !1318, line: 546, baseType: !1329, size: 8, offset: 1216)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1317, file: !1318, line: 547, baseType: !1329, size: 8, offset: 1224)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1317, file: !1318, line: 548, baseType: !1329, size: 8, offset: 1232)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1317, file: !1318, line: 549, baseType: !1329, size: 8, offset: 1240)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1317, file: !1318, line: 550, baseType: !1329, size: 8, offset: 1248)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1317, file: !1318, line: 551, baseType: !1329, size: 8, offset: 1256)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1317, file: !1318, line: 552, baseType: !1329, size: 8, offset: 1264)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1317, file: !1318, line: 553, baseType: !1329, size: 8, offset: 1272)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1317, file: !1318, line: 554, baseType: !1329, size: 8, offset: 1280)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1317, file: !1318, line: 555, baseType: !1329, size: 8, offset: 1288)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1317, file: !1318, line: 556, baseType: !1329, size: 8, offset: 1296)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1317, file: !1318, line: 557, baseType: !1329, size: 8, offset: 1304)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1317, file: !1318, line: 558, baseType: !1329, size: 8, offset: 1312)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1317, file: !1318, line: 559, baseType: !1329, size: 8, offset: 1320)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1317, file: !1318, line: 560, baseType: !1329, size: 8, offset: 1328)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1317, file: !1318, line: 561, baseType: !1329, size: 8, offset: 1336)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1317, file: !1318, line: 562, baseType: !1329, size: 8, offset: 1344)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1317, file: !1318, line: 563, baseType: !1329, size: 8, offset: 1352)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1317, file: !1318, line: 564, baseType: !1329, size: 8, offset: 1360)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1317, file: !1318, line: 565, baseType: !1329, size: 8, offset: 1368)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1317, file: !1318, line: 566, baseType: !1329, size: 8, offset: 1376)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1317, file: !1318, line: 567, baseType: !1329, size: 8, offset: 1384)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1317, file: !1318, line: 568, baseType: !1329, size: 8, offset: 1392)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1317, file: !1318, line: 569, baseType: !1329, size: 8, offset: 1400)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1317, file: !1318, line: 570, baseType: !1329, size: 8, offset: 1408)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1317, file: !1318, line: 571, baseType: !1329, size: 8, offset: 1416)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1317, file: !1318, line: 572, baseType: !1329, size: 8, offset: 1424)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1317, file: !1318, line: 573, baseType: !1329, size: 8, offset: 1432)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1317, file: !1318, line: 574, baseType: !1329, size: 8, offset: 1440)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !328, file: !329, line: 3405, baseType: !1485, size: 384)
!1485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !329, line: 3352, size: 384, elements: !1486)
!1486 = !{!1487, !1488}
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1485, file: !329, line: 3353, baseType: !365, size: 192)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1485, file: !329, line: 3356, baseType: !1489, size: 192, offset: 192)
!1489 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1318, line: 578, size: 192, elements: !1490)
!1490 = !{!1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501}
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1489, file: !1318, line: 580, baseType: !100, size: 32)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1489, file: !1318, line: 581, baseType: !100, size: 32, offset: 32)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1489, file: !1318, line: 582, baseType: !100, size: 32, offset: 64)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1489, file: !1318, line: 583, baseType: !100, size: 32, offset: 96)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1489, file: !1318, line: 584, baseType: !6, size: 8, offset: 128)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1489, file: !1318, line: 585, baseType: !6, size: 8, offset: 136)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1489, file: !1318, line: 586, baseType: !6, size: 8, offset: 144)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1489, file: !1318, line: 587, baseType: !6, size: 8, offset: 152)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1489, file: !1318, line: 588, baseType: !6, size: 8, offset: 160)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1489, file: !1318, line: 589, baseType: !6, size: 8, offset: 168)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1489, file: !1318, line: 590, baseType: !6, size: 8, offset: 176)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !97, file: !79, line: 178, baseType: !34, size: 64)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !97, file: !79, line: 179, baseType: !1504, size: 64)
!1504 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1505, size: 64)
!1505 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !79, line: 150, baseType: !1506)
!1506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !79, line: 142, size: 320, elements: !1507)
!1507 = !{!1508, !1509, !1510, !1511, !1512, !1513}
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1506, file: !79, line: 144, baseType: !326, size: 64)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1506, file: !79, line: 145, baseType: !76, size: 64, offset: 64)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1506, file: !79, line: 146, baseType: !76, size: 64, offset: 128)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1506, file: !79, line: 147, baseType: !951, size: 32, offset: 192)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1506, file: !79, line: 148, baseType: !17, size: 32, offset: 224)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1506, file: !79, line: 149, baseType: !6, size: 8, offset: 256)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !97, file: !79, line: 180, baseType: !1515, size: 64)
!1515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1516, size: 64)
!1516 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !79, line: 162, baseType: !1517)
!1517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !79, line: 159, size: 128, elements: !1518)
!1518 = !{!1519, !1520}
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1517, file: !79, line: 160, baseType: !326, size: 64)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1517, file: !79, line: 161, baseType: !295, size: 64, offset: 64)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !97, file: !79, line: 181, baseType: !1522, size: 64)
!1522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1523, size: 64)
!1523 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !79, line: 181, flags: DIFlagFwdDecl)
!1524 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !92, file: !79, line: 317, baseType: !1525, size: 64)
!1525 = !DICompositeType(tag: DW_TAG_array_type, baseType: !295, size: 64, elements: !115)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !92, file: !79, line: 318, baseType: !1527, size: 320)
!1527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !79, line: 188, size: 320, elements: !1528)
!1528 = !{!1529, !1531, !1554}
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1527, file: !79, line: 190, baseType: !1530, size: 192)
!1530 = !DICompositeType(tag: DW_TAG_array_type, baseType: !96, size: 192, elements: !398)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1527, file: !79, line: 193, baseType: !1532, size: 64, offset: 192)
!1532 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1533, size: 64)
!1533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !79, line: 206, size: 320, elements: !1534)
!1534 = !{!1535, !1539, !1540, !1541, !1553}
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1533, file: !79, line: 208, baseType: !1536, size: 64)
!1536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1537, size: 64)
!1537 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !8, line: 62, baseType: !1538)
!1538 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !8, line: 61, flags: DIFlagFwdDecl)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1533, file: !79, line: 211, baseType: !17, size: 32, offset: 64)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1533, file: !79, line: 214, baseType: !295, size: 64, offset: 128)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1533, file: !79, line: 224, baseType: !1542, size: 64, offset: 192)
!1542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1543, size: 64)
!1543 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !79, line: 202, baseType: !1544)
!1544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !79, line: 202, size: 128, elements: !1545)
!1545 = !{!1546}
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1544, file: !79, line: 202, baseType: !1547, size: 128)
!1547 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !79, line: 200, baseType: !1548)
!1548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !79, line: 200, size: 128, elements: !1549)
!1549 = !{!1550, !1551, !1552}
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1548, file: !79, line: 200, baseType: !17, size: 32)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1548, file: !79, line: 200, baseType: !17, size: 32, offset: 32)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1548, file: !79, line: 200, baseType: !114, size: 64, offset: 64)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1533, file: !79, line: 234, baseType: !1542, size: 64, offset: 256)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1527, file: !79, line: 197, baseType: !295, size: 64, offset: 256)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !92, file: !79, line: 319, baseType: !387, size: 256)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !92, file: !79, line: 320, baseType: !406, size: 192)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !53, file: !36, line: 134, baseType: !316, size: 64, offset: 192)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !53, file: !36, line: 137, baseType: !326, size: 64, offset: 256)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !53, file: !36, line: 138, baseType: !28, size: 32, offset: 320)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !53, file: !36, line: 142, baseType: !17, size: 32, offset: 352)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !53, file: !36, line: 144, baseType: !100, size: 32, offset: 384)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !53, file: !36, line: 145, baseType: !100, size: 32, offset: 416)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !53, file: !36, line: 146, baseType: !1564, size: 64, offset: 448)
!1564 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !36, line: 119, baseType: !295)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !35, file: !36, line: 220, baseType: !39, size: 64, offset: 64)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !35, file: !36, line: 223, baseType: !316, size: 64, offset: 128)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !35, file: !36, line: 226, baseType: !787, size: 64, offset: 192)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !35, file: !36, line: 229, baseType: !1569, size: 128, offset: 256)
!1569 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1570, size: 128, elements: !279)
!1570 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1571, size: 64)
!1571 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !36, line: 229, flags: DIFlagFwdDecl)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !35, file: !36, line: 232, baseType: !34, size: 64, offset: 384)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !35, file: !36, line: 233, baseType: !34, size: 64, offset: 448)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !35, file: !36, line: 238, baseType: !1575, size: 64, offset: 512)
!1575 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !36, line: 235, size: 64, elements: !1576)
!1576 = !{!1577, !1583}
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1575, file: !36, line: 236, baseType: !1578, size: 64)
!1578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1579, size: 64)
!1579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !36, line: 273, size: 128, elements: !1580)
!1580 = !{!1581, !1582}
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1579, file: !36, line: 275, baseType: !61, size: 64)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1579, file: !36, line: 278, baseType: !61, size: 64, offset: 64)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1575, file: !36, line: 237, baseType: !1584, size: 64)
!1584 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1585, size: 64)
!1585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !36, line: 259, size: 320, elements: !1586)
!1586 = !{!1587, !1588, !1589, !1590, !1591}
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1585, file: !36, line: 261, baseType: !76, size: 64)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1585, file: !36, line: 262, baseType: !76, size: 64, offset: 64)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1585, file: !36, line: 266, baseType: !76, size: 64, offset: 128)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1585, file: !36, line: 267, baseType: !76, size: 64, offset: 192)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1585, file: !36, line: 270, baseType: !100, size: 32, offset: 256)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !35, file: !36, line: 241, baseType: !1564, size: 64, offset: 576)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !35, file: !36, line: 244, baseType: !100, size: 32, offset: 640)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !35, file: !36, line: 247, baseType: !100, size: 32, offset: 672)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !35, file: !36, line: 250, baseType: !100, size: 32, offset: 704)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !35, file: !36, line: 253, baseType: !100, size: 32, offset: 736)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !35, file: !36, line: 256, baseType: !100, size: 32, offset: 768)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !14, file: !11, line: 327, baseType: !326, size: 64, offset: 192)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !10, file: !11, line: 739, baseType: !1600, size: 448)
!1600 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !11, line: 350, size: 448, elements: !1601)
!1601 = !{!1602, !1608}
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1600, file: !11, line: 353, baseType: !1603, size: 384)
!1603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !11, line: 333, size: 384, elements: !1604)
!1604 = !{!1605, !1606, !1607}
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1603, file: !11, line: 336, baseType: !14, size: 256)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1603, file: !11, line: 343, baseType: !744, size: 64, offset: 256)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1603, file: !11, line: 344, baseType: !751, size: 64, offset: 320)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1600, file: !11, line: 359, baseType: !707, size: 64, offset: 384)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !10, file: !11, line: 740, baseType: !1610, size: 512)
!1610 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !11, line: 365, size: 512, elements: !1611)
!1611 = !{!1612, !1613, !1614}
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1610, file: !11, line: 368, baseType: !1603, size: 384)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1610, file: !11, line: 373, baseType: !326, size: 64, offset: 384)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1610, file: !11, line: 374, baseType: !326, size: 64, offset: 448)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !10, file: !11, line: 741, baseType: !1616, size: 576)
!1616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !11, line: 380, size: 576, elements: !1617)
!1617 = !{!1618, !1619}
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1616, file: !11, line: 383, baseType: !1610, size: 512)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1616, file: !11, line: 389, baseType: !707, size: 64, offset: 512)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !10, file: !11, line: 742, baseType: !1621, size: 320)
!1621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !11, line: 395, size: 320, elements: !1622)
!1622 = !{!1623, !1624}
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1621, file: !11, line: 397, baseType: !14, size: 256)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1621, file: !11, line: 400, baseType: !61, size: 64, offset: 256)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !10, file: !11, line: 743, baseType: !1626, size: 448)
!1626 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !11, line: 406, size: 448, elements: !1627)
!1627 = !{!1628, !1629, !1630, !1631}
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1626, file: !11, line: 408, baseType: !14, size: 256)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1626, file: !11, line: 412, baseType: !326, size: 64, offset: 256)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1626, file: !11, line: 420, baseType: !326, size: 64, offset: 320)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1626, file: !11, line: 423, baseType: !61, size: 64, offset: 384)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !10, file: !11, line: 744, baseType: !1633, size: 384)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !11, line: 429, size: 384, elements: !1634)
!1634 = !{!1635, !1636, !1637}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1633, file: !11, line: 431, baseType: !14, size: 256)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1633, file: !11, line: 434, baseType: !326, size: 64, offset: 256)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1633, file: !11, line: 437, baseType: !61, size: 64, offset: 320)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !10, file: !11, line: 745, baseType: !1639, size: 384)
!1639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !11, line: 443, size: 384, elements: !1640)
!1640 = !{!1641, !1642, !1643}
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1639, file: !11, line: 445, baseType: !14, size: 256)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1639, file: !11, line: 449, baseType: !326, size: 64, offset: 256)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1639, file: !11, line: 453, baseType: !61, size: 64, offset: 320)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !10, file: !11, line: 746, baseType: !1645, size: 320)
!1645 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !11, line: 459, size: 320, elements: !1646)
!1646 = !{!1647, !1648}
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1645, file: !11, line: 461, baseType: !14, size: 256)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1645, file: !11, line: 464, baseType: !326, size: 64, offset: 256)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !10, file: !11, line: 747, baseType: !1650, size: 768)
!1650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !11, line: 469, size: 768, elements: !1651)
!1651 = !{!1652, !1653, !1654, !1655, !1656}
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1650, file: !11, line: 471, baseType: !14, size: 256)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1650, file: !11, line: 474, baseType: !17, size: 32, offset: 256)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1650, file: !11, line: 475, baseType: !17, size: 32, offset: 288)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1650, file: !11, line: 478, baseType: !326, size: 64, offset: 320)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1650, file: !11, line: 481, baseType: !1657, size: 384, offset: 384)
!1657 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1658, size: 384, elements: !115)
!1658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !329, line: 1917, size: 384, elements: !1659)
!1659 = !{!1660, !1661, !1662}
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1658, file: !329, line: 1920, baseType: !756, size: 256)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1658, file: !329, line: 1921, baseType: !326, size: 64, offset: 256)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1658, file: !329, line: 1922, baseType: !28, size: 32, offset: 320)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !10, file: !11, line: 748, baseType: !1664, size: 320)
!1664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !11, line: 487, size: 320, elements: !1665)
!1665 = !{!1666, !1667}
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1664, file: !11, line: 490, baseType: !14, size: 256)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1664, file: !11, line: 494, baseType: !100, size: 32, offset: 256)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !10, file: !11, line: 749, baseType: !1669, size: 384)
!1669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !11, line: 500, size: 384, elements: !1670)
!1670 = !{!1671, !1672, !1673}
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1669, file: !11, line: 502, baseType: !14, size: 256)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1669, file: !11, line: 506, baseType: !61, size: 64, offset: 256)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1669, file: !11, line: 510, baseType: !61, size: 64, offset: 320)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !10, file: !11, line: 750, baseType: !1675, size: 320)
!1675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !11, line: 529, size: 320, elements: !1676)
!1676 = !{!1677, !1678}
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1675, file: !11, line: 531, baseType: !14, size: 256)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1675, file: !11, line: 540, baseType: !61, size: 64, offset: 256)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !10, file: !11, line: 751, baseType: !1680, size: 704)
!1680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !11, line: 546, size: 704, elements: !1681)
!1681 = !{!1682, !1683, !1684, !1685, !1686, !1687, !1688}
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1680, file: !11, line: 549, baseType: !1610, size: 512)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1680, file: !11, line: 553, baseType: !103, size: 64, offset: 512)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1680, file: !11, line: 557, baseType: !6, size: 8, offset: 576)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1680, file: !11, line: 558, baseType: !6, size: 8, offset: 584)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1680, file: !11, line: 559, baseType: !6, size: 8, offset: 592)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1680, file: !11, line: 560, baseType: !6, size: 8, offset: 600)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1680, file: !11, line: 566, baseType: !707, size: 64, offset: 640)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !10, file: !11, line: 752, baseType: !1690, size: 384)
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !11, line: 571, size: 384, elements: !1691)
!1691 = !{!1692, !1693}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1690, file: !11, line: 573, baseType: !1621, size: 320)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1690, file: !11, line: 577, baseType: !326, size: 64, offset: 320)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !10, file: !11, line: 753, baseType: !1695, size: 576)
!1695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !11, line: 600, size: 576, elements: !1696)
!1696 = !{!1697, !1698, !1699, !1700, !1709}
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1695, file: !11, line: 602, baseType: !1621, size: 320)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1695, file: !11, line: 605, baseType: !326, size: 64, offset: 320)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1695, file: !11, line: 609, baseType: !657, size: 64, offset: 384)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1695, file: !11, line: 612, baseType: !1701, size: 64, offset: 448)
!1701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1702, size: 64)
!1702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !11, line: 581, size: 320, elements: !1703)
!1703 = !{!1704, !1705, !1706, !1707, !1708}
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1702, file: !11, line: 583, baseType: !1115, size: 32)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1702, file: !11, line: 586, baseType: !326, size: 64, offset: 64)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1702, file: !11, line: 589, baseType: !326, size: 64, offset: 128)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1702, file: !11, line: 592, baseType: !326, size: 64, offset: 192)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1702, file: !11, line: 595, baseType: !326, size: 64, offset: 256)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1695, file: !11, line: 616, baseType: !61, size: 64, offset: 512)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !10, file: !11, line: 754, baseType: !1711, size: 512)
!1711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !11, line: 622, size: 512, elements: !1712)
!1712 = !{!1713, !1714, !1715, !1716}
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1711, file: !11, line: 624, baseType: !1621, size: 320)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1711, file: !11, line: 628, baseType: !326, size: 64, offset: 320)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1711, file: !11, line: 632, baseType: !326, size: 64, offset: 384)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1711, file: !11, line: 636, baseType: !326, size: 64, offset: 448)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !10, file: !11, line: 755, baseType: !1718, size: 704)
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !11, line: 642, size: 704, elements: !1719)
!1719 = !{!1720, !1721, !1722, !1723}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1718, file: !11, line: 644, baseType: !1711, size: 512)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1718, file: !11, line: 648, baseType: !326, size: 64, offset: 512)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1718, file: !11, line: 652, baseType: !326, size: 64, offset: 576)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1718, file: !11, line: 653, baseType: !326, size: 64, offset: 640)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !10, file: !11, line: 756, baseType: !1725, size: 448)
!1725 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !11, line: 663, size: 448, elements: !1726)
!1726 = !{!1727, !1728, !1729}
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1725, file: !11, line: 665, baseType: !1621, size: 320)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1725, file: !11, line: 668, baseType: !326, size: 64, offset: 320)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1725, file: !11, line: 673, baseType: !326, size: 64, offset: 384)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !10, file: !11, line: 757, baseType: !1731, size: 384)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !11, line: 694, size: 384, elements: !1732)
!1732 = !{!1733, !1734}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1731, file: !11, line: 696, baseType: !1621, size: 320)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1731, file: !11, line: 699, baseType: !326, size: 64, offset: 320)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !10, file: !11, line: 758, baseType: !1736, size: 384)
!1736 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !11, line: 681, size: 384, elements: !1737)
!1737 = !{!1738, !1739, !1740}
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1736, file: !11, line: 683, baseType: !14, size: 256)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1736, file: !11, line: 686, baseType: !326, size: 64, offset: 256)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1736, file: !11, line: 689, baseType: !326, size: 64, offset: 320)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !10, file: !11, line: 759, baseType: !1742, size: 384)
!1742 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !11, line: 707, size: 384, elements: !1743)
!1743 = !{!1744, !1745, !1746}
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1742, file: !11, line: 709, baseType: !14, size: 256)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1742, file: !11, line: 712, baseType: !326, size: 64, offset: 256)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1742, file: !11, line: 712, baseType: !326, size: 64, offset: 320)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !10, file: !11, line: 760, baseType: !1748, size: 320)
!1748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !11, line: 718, size: 320, elements: !1749)
!1749 = !{!1750, !1751}
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1748, file: !11, line: 720, baseType: !14, size: 256)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1748, file: !11, line: 723, baseType: !326, size: 64, offset: 256)
!1752 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !100, size: 64)
!1753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!1754 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !1755, retainedTypes: !3527, globals: !3831, nameTableKind: None)
!1755 = !{!118, !609, !616, !798, !819, !868, !1077, !1099, !1107, !1115, !1756, !1772, !1779, !1790, !1795, !1937, !3429, !3451, !3477, !3515, !3521}
!1756 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "stmt_vec_info_type", file: !1757, line: 336, baseType: !17, size: 32, elements: !1758)
!1757 = !DIFile(filename: "./tree-vectorizer.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1758 = !{!1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771}
!1759 = !DIEnumerator(name: "undef_vec_info_type", value: 0, isUnsigned: true)
!1760 = !DIEnumerator(name: "load_vec_info_type", value: 1, isUnsigned: true)
!1761 = !DIEnumerator(name: "store_vec_info_type", value: 2, isUnsigned: true)
!1762 = !DIEnumerator(name: "op_vec_info_type", value: 3, isUnsigned: true)
!1763 = !DIEnumerator(name: "call_vec_info_type", value: 4, isUnsigned: true)
!1764 = !DIEnumerator(name: "assignment_vec_info_type", value: 5, isUnsigned: true)
!1765 = !DIEnumerator(name: "condition_vec_info_type", value: 6, isUnsigned: true)
!1766 = !DIEnumerator(name: "reduc_vec_info_type", value: 7, isUnsigned: true)
!1767 = !DIEnumerator(name: "induc_vec_info_type", value: 8, isUnsigned: true)
!1768 = !DIEnumerator(name: "type_promotion_vec_info_type", value: 9, isUnsigned: true)
!1769 = !DIEnumerator(name: "type_demotion_vec_info_type", value: 10, isUnsigned: true)
!1770 = !DIEnumerator(name: "type_conversion_vec_info_type", value: 11, isUnsigned: true)
!1771 = !DIEnumerator(name: "loop_exit_ctrl_vec_info_type", value: 12, isUnsigned: true)
!1772 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "vect_relevant", file: !1757, line: 354, baseType: !17, size: 32, elements: !1773)
!1773 = !{!1774, !1775, !1776, !1777, !1778}
!1774 = !DIEnumerator(name: "vect_unused_in_scope", value: 0, isUnsigned: true)
!1775 = !DIEnumerator(name: "vect_used_in_outer_by_reduction", value: 1, isUnsigned: true)
!1776 = !DIEnumerator(name: "vect_used_in_outer", value: 2, isUnsigned: true)
!1777 = !DIEnumerator(name: "vect_used_by_reduction", value: 3, isUnsigned: true)
!1778 = !DIEnumerator(name: "vect_used_in_scope", value: 4, isUnsigned: true)
!1779 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "vect_def_type", file: !1757, line: 57, baseType: !17, size: 32, elements: !1780)
!1780 = !{!1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789}
!1781 = !DIEnumerator(name: "vect_uninitialized_def", value: 0, isUnsigned: true)
!1782 = !DIEnumerator(name: "vect_constant_def", value: 1, isUnsigned: true)
!1783 = !DIEnumerator(name: "vect_external_def", value: 2, isUnsigned: true)
!1784 = !DIEnumerator(name: "vect_internal_def", value: 3, isUnsigned: true)
!1785 = !DIEnumerator(name: "vect_induction_def", value: 4, isUnsigned: true)
!1786 = !DIEnumerator(name: "vect_reduction_def", value: 5, isUnsigned: true)
!1787 = !DIEnumerator(name: "vect_double_reduction_def", value: 6, isUnsigned: true)
!1788 = !DIEnumerator(name: "vect_nested_cycle", value: 7, isUnsigned: true)
!1789 = !DIEnumerator(name: "vect_unknown_def_type", value: 8, isUnsigned: true)
!1790 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "slp_vect_type", file: !1757, line: 390, baseType: !17, size: 32, elements: !1791)
!1791 = !{!1792, !1793, !1794}
!1792 = !DIEnumerator(name: "loop_vect", value: 0, isUnsigned: true)
!1793 = !DIEnumerator(name: "pure_slp", value: 1, isUnsigned: true)
!1794 = !DIEnumerator(name: "hybrid", value: 2, isUnsigned: true)
!1795 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !79, line: 45, baseType: !17, size: 32, elements: !1796)
!1796 = !{!1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936}
!1797 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!1798 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!1799 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!1800 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!1801 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!1802 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!1803 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!1804 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!1805 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!1806 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!1807 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!1808 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!1809 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!1810 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!1811 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!1812 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!1813 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!1814 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!1815 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!1816 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!1817 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!1818 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!1819 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!1820 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!1821 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!1822 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!1823 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!1824 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!1825 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!1826 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!1827 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!1828 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!1829 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!1830 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!1831 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!1832 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!1833 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!1834 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!1835 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!1836 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!1837 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!1838 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!1839 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!1840 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!1841 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!1842 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!1843 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!1844 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!1845 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!1846 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!1847 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!1848 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!1849 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!1850 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!1851 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!1852 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!1853 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!1854 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!1855 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!1856 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!1857 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!1858 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!1859 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!1860 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!1861 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!1862 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!1863 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!1864 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!1865 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!1866 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!1867 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!1868 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!1869 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!1870 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!1871 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!1872 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!1873 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!1874 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!1875 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!1876 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!1877 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!1878 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!1879 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!1880 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!1881 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!1882 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!1883 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!1884 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!1885 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!1886 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!1887 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!1888 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!1889 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!1890 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!1891 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!1892 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!1893 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!1894 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!1895 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!1896 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!1897 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!1898 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!1899 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!1900 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!1901 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!1902 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!1903 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!1904 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!1905 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!1906 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!1907 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!1908 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!1909 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!1910 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!1911 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!1912 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!1913 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!1914 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!1915 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!1916 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!1917 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!1918 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!1919 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!1920 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!1921 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!1922 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!1923 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!1924 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!1925 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!1926 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!1927 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!1928 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!1929 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!1930 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!1931 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!1932 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!1933 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!1934 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!1935 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!1936 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!1937 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_code", file: !1938, line: 7, baseType: !17, size: 32, elements: !1939)
!1938 = !DIFile(filename: "./insn-codes.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!1939 = !{!1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033, !3034, !3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095, !3096, !3097, !3098, !3099, !3100, !3101, !3102, !3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115, !3116, !3117, !3118, !3119, !3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197, !3198, !3199, !3200, !3201, !3202, !3203, !3204, !3205, !3206, !3207, !3208, !3209, !3210, !3211, !3212, !3213, !3214, !3215, !3216, !3217, !3218, !3219, !3220, !3221, !3222, !3223, !3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235, !3236, !3237, !3238, !3239, !3240, !3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3265, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290, !3291, !3292, !3293, !3294, !3295, !3296, !3297, !3298, !3299, !3300, !3301, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332, !3333, !3334, !3335, !3336, !3337, !3338, !3339, !3340, !3341, !3342, !3343, !3344, !3345, !3346, !3347, !3348, !3349, !3350, !3351, !3352, !3353, !3354, !3355, !3356, !3357, !3358, !3359, !3360, !3361, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375, !3376, !3377, !3378, !3379, !3380, !3381, !3382, !3383, !3384, !3385, !3386, !3387, !3388, !3389, !3390, !3391, !3392, !3393, !3394, !3395, !3396, !3397, !3398, !3399, !3400, !3401, !3402, !3403, !3404, !3405, !3406, !3407, !3408, !3409, !3410, !3411, !3412, !3413, !3414, !3415, !3416, !3417, !3418, !3419, !3420, !3421, !3422, !3423, !3424, !3425, !3426, !3427, !3428}
!1940 = !DIEnumerator(name: "CODE_FOR_x86_fnstsw_1", value: 30, isUnsigned: true)
!1941 = !DIEnumerator(name: "CODE_FOR_x86_sahf_1", value: 31, isUnsigned: true)
!1942 = !DIEnumerator(name: "CODE_FOR_popsi1", value: 41, isUnsigned: true)
!1943 = !DIEnumerator(name: "CODE_FOR_movsi_insv_1", value: 63, isUnsigned: true)
!1944 = !DIEnumerator(name: "CODE_FOR_swapxf", value: 83, isUnsigned: true)
!1945 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2_and", value: 84, isUnsigned: true)
!1946 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2_32", value: 92, isUnsigned: true)
!1947 = !DIEnumerator(name: "CODE_FOR_extendhisi2", value: 94, isUnsigned: true)
!1948 = !DIEnumerator(name: "CODE_FOR_extendqihi2", value: 95, isUnsigned: true)
!1949 = !DIEnumerator(name: "CODE_FOR_extendqisi2", value: 96, isUnsigned: true)
!1950 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop", value: 110, isUnsigned: true)
!1951 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop", value: 111, isUnsigned: true)
!1952 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi_sse", value: 116, isUnsigned: true)
!1953 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi_sse", value: 117, isUnsigned: true)
!1954 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_fisttp_i387_1", value: 118, isUnsigned: true)
!1955 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_fisttp_i387_1", value: 119, isUnsigned: true)
!1956 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_fisttp_i387_1", value: 120, isUnsigned: true)
!1957 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp", value: 121, isUnsigned: true)
!1958 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp", value: 122, isUnsigned: true)
!1959 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp", value: 123, isUnsigned: true)
!1960 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp_with_temp", value: 124, isUnsigned: true)
!1961 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp_with_temp", value: 125, isUnsigned: true)
!1962 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp_with_temp", value: 126, isUnsigned: true)
!1963 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387", value: 130, isUnsigned: true)
!1964 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_with_temp", value: 131, isUnsigned: true)
!1965 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387", value: 132, isUnsigned: true)
!1966 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387", value: 133, isUnsigned: true)
!1967 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_with_temp", value: 134, isUnsigned: true)
!1968 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_with_temp", value: 135, isUnsigned: true)
!1969 = !DIEnumerator(name: "CODE_FOR_x86_fnstcw_1", value: 136, isUnsigned: true)
!1970 = !DIEnumerator(name: "CODE_FOR_x86_fldcw_1", value: 137, isUnsigned: true)
!1971 = !DIEnumerator(name: "CODE_FOR_floatdisf2_i387_with_xmm", value: 185, isUnsigned: true)
!1972 = !DIEnumerator(name: "CODE_FOR_floatdidf2_i387_with_xmm", value: 186, isUnsigned: true)
!1973 = !DIEnumerator(name: "CODE_FOR_floatdixf2_i387_with_xmm", value: 187, isUnsigned: true)
!1974 = !DIEnumerator(name: "CODE_FOR_addqi3_cc", value: 195, isUnsigned: true)
!1975 = !DIEnumerator(name: "CODE_FOR_addqi_ext_1", value: 219, isUnsigned: true)
!1976 = !DIEnumerator(name: "CODE_FOR_divqi3", value: 271, isUnsigned: true)
!1977 = !DIEnumerator(name: "CODE_FOR_udivqi3", value: 272, isUnsigned: true)
!1978 = !DIEnumerator(name: "CODE_FOR_andqi_ext_0", value: 298, isUnsigned: true)
!1979 = !DIEnumerator(name: "CODE_FOR_copysignsf3_const", value: 367, isUnsigned: true)
!1980 = !DIEnumerator(name: "CODE_FOR_copysigndf3_const", value: 368, isUnsigned: true)
!1981 = !DIEnumerator(name: "CODE_FOR_copysigntf3_const", value: 369, isUnsigned: true)
!1982 = !DIEnumerator(name: "CODE_FOR_copysignsf3_var", value: 370, isUnsigned: true)
!1983 = !DIEnumerator(name: "CODE_FOR_copysigndf3_var", value: 371, isUnsigned: true)
!1984 = !DIEnumerator(name: "CODE_FOR_copysigntf3_var", value: 372, isUnsigned: true)
!1985 = !DIEnumerator(name: "CODE_FOR_x86_shld", value: 382, isUnsigned: true)
!1986 = !DIEnumerator(name: "CODE_FOR_x86_shrd", value: 395, isUnsigned: true)
!1987 = !DIEnumerator(name: "CODE_FOR_ix86_rotldi3", value: 438, isUnsigned: true)
!1988 = !DIEnumerator(name: "CODE_FOR_ix86_rotrdi3", value: 447, isUnsigned: true)
!1989 = !DIEnumerator(name: "CODE_FOR_jump", value: 478, isUnsigned: true)
!1990 = !DIEnumerator(name: "CODE_FOR_blockage", value: 487, isUnsigned: true)
!1991 = !DIEnumerator(name: "CODE_FOR_prologue_use", value: 489, isUnsigned: true)
!1992 = !DIEnumerator(name: "CODE_FOR_return_internal", value: 490, isUnsigned: true)
!1993 = !DIEnumerator(name: "CODE_FOR_return_internal_long", value: 491, isUnsigned: true)
!1994 = !DIEnumerator(name: "CODE_FOR_return_pop_internal", value: 492, isUnsigned: true)
!1995 = !DIEnumerator(name: "CODE_FOR_return_indirect_internal", value: 493, isUnsigned: true)
!1996 = !DIEnumerator(name: "CODE_FOR_nop", value: 494, isUnsigned: true)
!1997 = !DIEnumerator(name: "CODE_FOR_vswapmov", value: 495, isUnsigned: true)
!1998 = !DIEnumerator(name: "CODE_FOR_pad", value: 496, isUnsigned: true)
!1999 = !DIEnumerator(name: "CODE_FOR_set_got", value: 497, isUnsigned: true)
!2000 = !DIEnumerator(name: "CODE_FOR_set_got_labelled", value: 498, isUnsigned: true)
!2001 = !DIEnumerator(name: "CODE_FOR_eh_return_internal", value: 499, isUnsigned: true)
!2002 = !DIEnumerator(name: "CODE_FOR_leave", value: 500, isUnsigned: true)
!2003 = !DIEnumerator(name: "CODE_FOR_ctzsi2", value: 503, isUnsigned: true)
!2004 = !DIEnumerator(name: "CODE_FOR_clzsi2_abm", value: 504, isUnsigned: true)
!2005 = !DIEnumerator(name: "CODE_FOR_bsr", value: 505, isUnsigned: true)
!2006 = !DIEnumerator(name: "CODE_FOR_popcounthi2", value: 506, isUnsigned: true)
!2007 = !DIEnumerator(name: "CODE_FOR_popcountsi2", value: 507, isUnsigned: true)
!2008 = !DIEnumerator(name: "CODE_FOR_bswaphi_lowpart", value: 514, isUnsigned: true)
!2009 = !DIEnumerator(name: "CODE_FOR_clzhi2_abm", value: 515, isUnsigned: true)
!2010 = !DIEnumerator(name: "CODE_FOR_paritydi2_cmp", value: 517, isUnsigned: true)
!2011 = !DIEnumerator(name: "CODE_FOR_paritysi2_cmp", value: 518, isUnsigned: true)
!2012 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop_unspec", value: 573, isUnsigned: true)
!2013 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop_unspec", value: 574, isUnsigned: true)
!2014 = !DIEnumerator(name: "CODE_FOR_sqrtxf2", value: 575, isUnsigned: true)
!2015 = !DIEnumerator(name: "CODE_FOR_sqrt_extendsfxf2_i387", value: 576, isUnsigned: true)
!2016 = !DIEnumerator(name: "CODE_FOR_sqrt_extenddfxf2_i387", value: 577, isUnsigned: true)
!2017 = !DIEnumerator(name: "CODE_FOR_fpremxf4_i387", value: 581, isUnsigned: true)
!2018 = !DIEnumerator(name: "CODE_FOR_fprem1xf4_i387", value: 582, isUnsigned: true)
!2019 = !DIEnumerator(name: "CODE_FOR_sincosxf3", value: 589, isUnsigned: true)
!2020 = !DIEnumerator(name: "CODE_FOR_sincos_extendsfxf3_i387", value: 590, isUnsigned: true)
!2021 = !DIEnumerator(name: "CODE_FOR_sincos_extenddfxf3_i387", value: 591, isUnsigned: true)
!2022 = !DIEnumerator(name: "CODE_FOR_fptanxf4_i387", value: 592, isUnsigned: true)
!2023 = !DIEnumerator(name: "CODE_FOR_fptan_extendsfxf4_i387", value: 593, isUnsigned: true)
!2024 = !DIEnumerator(name: "CODE_FOR_fptan_extenddfxf4_i387", value: 594, isUnsigned: true)
!2025 = !DIEnumerator(name: "CODE_FOR_fpatan_extendsfxf3_i387", value: 596, isUnsigned: true)
!2026 = !DIEnumerator(name: "CODE_FOR_fpatan_extenddfxf3_i387", value: 597, isUnsigned: true)
!2027 = !DIEnumerator(name: "CODE_FOR_fyl2xxf3_i387", value: 598, isUnsigned: true)
!2028 = !DIEnumerator(name: "CODE_FOR_fyl2x_extendsfxf3_i387", value: 599, isUnsigned: true)
!2029 = !DIEnumerator(name: "CODE_FOR_fyl2x_extenddfxf3_i387", value: 600, isUnsigned: true)
!2030 = !DIEnumerator(name: "CODE_FOR_fyl2xp1xf3_i387", value: 601, isUnsigned: true)
!2031 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extendsfxf3_i387", value: 602, isUnsigned: true)
!2032 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extenddfxf3_i387", value: 603, isUnsigned: true)
!2033 = !DIEnumerator(name: "CODE_FOR_fxtractxf3_i387", value: 604, isUnsigned: true)
!2034 = !DIEnumerator(name: "CODE_FOR_fxtract_extendsfxf3_i387", value: 605, isUnsigned: true)
!2035 = !DIEnumerator(name: "CODE_FOR_fxtract_extenddfxf3_i387", value: 606, isUnsigned: true)
!2036 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsf2", value: 609, isUnsigned: true)
!2037 = !DIEnumerator(name: "CODE_FOR_sse4_1_rounddf2", value: 610, isUnsigned: true)
!2038 = !DIEnumerator(name: "CODE_FOR_rintxf2", value: 611, isUnsigned: true)
!2039 = !DIEnumerator(name: "CODE_FOR_fistdi2", value: 613, isUnsigned: true)
!2040 = !DIEnumerator(name: "CODE_FOR_fistdi2_with_temp", value: 614, isUnsigned: true)
!2041 = !DIEnumerator(name: "CODE_FOR_fisthi2", value: 617, isUnsigned: true)
!2042 = !DIEnumerator(name: "CODE_FOR_fistsi2", value: 618, isUnsigned: true)
!2043 = !DIEnumerator(name: "CODE_FOR_fisthi2_with_temp", value: 619, isUnsigned: true)
!2044 = !DIEnumerator(name: "CODE_FOR_fistsi2_with_temp", value: 620, isUnsigned: true)
!2045 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor", value: 621, isUnsigned: true)
!2046 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor_i387", value: 622, isUnsigned: true)
!2047 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor", value: 626, isUnsigned: true)
!2048 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor_with_temp", value: 627, isUnsigned: true)
!2049 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor", value: 628, isUnsigned: true)
!2050 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor", value: 629, isUnsigned: true)
!2051 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor_with_temp", value: 630, isUnsigned: true)
!2052 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor_with_temp", value: 631, isUnsigned: true)
!2053 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil", value: 632, isUnsigned: true)
!2054 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil_i387", value: 633, isUnsigned: true)
!2055 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil", value: 637, isUnsigned: true)
!2056 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil_with_temp", value: 638, isUnsigned: true)
!2057 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil", value: 639, isUnsigned: true)
!2058 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil", value: 640, isUnsigned: true)
!2059 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil_with_temp", value: 641, isUnsigned: true)
!2060 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil_with_temp", value: 642, isUnsigned: true)
!2061 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc", value: 643, isUnsigned: true)
!2062 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc_i387", value: 644, isUnsigned: true)
!2063 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm", value: 645, isUnsigned: true)
!2064 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm_i387", value: 646, isUnsigned: true)
!2065 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387", value: 647, isUnsigned: true)
!2066 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387", value: 648, isUnsigned: true)
!2067 = !DIEnumerator(name: "CODE_FOR_fxamxf2_i387", value: 649, isUnsigned: true)
!2068 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387_with_temp", value: 650, isUnsigned: true)
!2069 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387_with_temp", value: 651, isUnsigned: true)
!2070 = !DIEnumerator(name: "CODE_FOR_cld", value: 652, isUnsigned: true)
!2071 = !DIEnumerator(name: "CODE_FOR_smaxsf3", value: 681, isUnsigned: true)
!2072 = !DIEnumerator(name: "CODE_FOR_sminsf3", value: 682, isUnsigned: true)
!2073 = !DIEnumerator(name: "CODE_FOR_smaxdf3", value: 683, isUnsigned: true)
!2074 = !DIEnumerator(name: "CODE_FOR_smindf3", value: 684, isUnsigned: true)
!2075 = !DIEnumerator(name: "CODE_FOR_pro_epilogue_adjust_stack_1", value: 693, isUnsigned: true)
!2076 = !DIEnumerator(name: "CODE_FOR_allocate_stack_worker_32", value: 694, isUnsigned: true)
!2077 = !DIEnumerator(name: "CODE_FOR_trap", value: 701, isUnsigned: true)
!2078 = !DIEnumerator(name: "CODE_FOR_stack_protect_set_si", value: 704, isUnsigned: true)
!2079 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_set_si", value: 705, isUnsigned: true)
!2080 = !DIEnumerator(name: "CODE_FOR_stack_protect_test_si", value: 706, isUnsigned: true)
!2081 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_test_si", value: 707, isUnsigned: true)
!2082 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32qi", value: 708, isUnsigned: true)
!2083 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32hi", value: 709, isUnsigned: true)
!2084 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32si", value: 710, isUnsigned: true)
!2085 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcbsi", value: 715, isUnsigned: true)
!2086 = !DIEnumerator(name: "CODE_FOR_sse_movntdi", value: 728, isUnsigned: true)
!2087 = !DIEnumerator(name: "CODE_FOR_mmx_rcpv2sf2", value: 736, isUnsigned: true)
!2088 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit1v2sf3", value: 737, isUnsigned: true)
!2089 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit2v2sf3", value: 738, isUnsigned: true)
!2090 = !DIEnumerator(name: "CODE_FOR_mmx_rsqrtv2sf2", value: 739, isUnsigned: true)
!2091 = !DIEnumerator(name: "CODE_FOR_mmx_rsqit1v2sf3", value: 740, isUnsigned: true)
!2092 = !DIEnumerator(name: "CODE_FOR_mmx_haddv2sf3", value: 741, isUnsigned: true)
!2093 = !DIEnumerator(name: "CODE_FOR_mmx_hsubv2sf3", value: 742, isUnsigned: true)
!2094 = !DIEnumerator(name: "CODE_FOR_mmx_addsubv2sf3", value: 743, isUnsigned: true)
!2095 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2sf3", value: 745, isUnsigned: true)
!2096 = !DIEnumerator(name: "CODE_FOR_mmx_gev2sf3", value: 746, isUnsigned: true)
!2097 = !DIEnumerator(name: "CODE_FOR_mmx_pf2id", value: 747, isUnsigned: true)
!2098 = !DIEnumerator(name: "CODE_FOR_mmx_pf2iw", value: 748, isUnsigned: true)
!2099 = !DIEnumerator(name: "CODE_FOR_mmx_pi2fw", value: 749, isUnsigned: true)
!2100 = !DIEnumerator(name: "CODE_FOR_mmx_floatv2si2", value: 750, isUnsigned: true)
!2101 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2sf2", value: 751, isUnsigned: true)
!2102 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv4hi3", value: 782, isUnsigned: true)
!2103 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv2si3", value: 783, isUnsigned: true)
!2104 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv4hi3", value: 784, isUnsigned: true)
!2105 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv2si3", value: 785, isUnsigned: true)
!2106 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv1di3", value: 786, isUnsigned: true)
!2107 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv4hi3", value: 787, isUnsigned: true)
!2108 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv2si3", value: 788, isUnsigned: true)
!2109 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv1di3", value: 789, isUnsigned: true)
!2110 = !DIEnumerator(name: "CODE_FOR_mmx_gtv8qi3", value: 793, isUnsigned: true)
!2111 = !DIEnumerator(name: "CODE_FOR_mmx_gtv4hi3", value: 794, isUnsigned: true)
!2112 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2si3", value: 795, isUnsigned: true)
!2113 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv8qi3", value: 796, isUnsigned: true)
!2114 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv4hi3", value: 797, isUnsigned: true)
!2115 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv2si3", value: 798, isUnsigned: true)
!2116 = !DIEnumerator(name: "CODE_FOR_mmx_packsswb", value: 808, isUnsigned: true)
!2117 = !DIEnumerator(name: "CODE_FOR_mmx_packssdw", value: 809, isUnsigned: true)
!2118 = !DIEnumerator(name: "CODE_FOR_mmx_packuswb", value: 810, isUnsigned: true)
!2119 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhbw", value: 811, isUnsigned: true)
!2120 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklbw", value: 812, isUnsigned: true)
!2121 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhwd", value: 813, isUnsigned: true)
!2122 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklwd", value: 814, isUnsigned: true)
!2123 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhdq", value: 815, isUnsigned: true)
!2124 = !DIEnumerator(name: "CODE_FOR_mmx_punpckldq", value: 816, isUnsigned: true)
!2125 = !DIEnumerator(name: "CODE_FOR_mmx_pextrw", value: 818, isUnsigned: true)
!2126 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw_1", value: 819, isUnsigned: true)
!2127 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2si2", value: 820, isUnsigned: true)
!2128 = !DIEnumerator(name: "CODE_FOR_mmx_psadbw", value: 828, isUnsigned: true)
!2129 = !DIEnumerator(name: "CODE_FOR_mmx_pmovmskb", value: 829, isUnsigned: true)
!2130 = !DIEnumerator(name: "CODE_FOR_movdi_to_sse", value: 853, isUnsigned: true)
!2131 = !DIEnumerator(name: "CODE_FOR_avx_movups", value: 854, isUnsigned: true)
!2132 = !DIEnumerator(name: "CODE_FOR_avx_movupd", value: 855, isUnsigned: true)
!2133 = !DIEnumerator(name: "CODE_FOR_avx_movups256", value: 856, isUnsigned: true)
!2134 = !DIEnumerator(name: "CODE_FOR_avx_movupd256", value: 857, isUnsigned: true)
!2135 = !DIEnumerator(name: "CODE_FOR_sse2_movq128", value: 858, isUnsigned: true)
!2136 = !DIEnumerator(name: "CODE_FOR_sse_movups", value: 859, isUnsigned: true)
!2137 = !DIEnumerator(name: "CODE_FOR_sse2_movupd", value: 860, isUnsigned: true)
!2138 = !DIEnumerator(name: "CODE_FOR_avx_movdqu256", value: 861, isUnsigned: true)
!2139 = !DIEnumerator(name: "CODE_FOR_avx_movdqu", value: 862, isUnsigned: true)
!2140 = !DIEnumerator(name: "CODE_FOR_sse2_movdqu", value: 863, isUnsigned: true)
!2141 = !DIEnumerator(name: "CODE_FOR_avx_movntv4sf", value: 864, isUnsigned: true)
!2142 = !DIEnumerator(name: "CODE_FOR_avx_movntv2df", value: 865, isUnsigned: true)
!2143 = !DIEnumerator(name: "CODE_FOR_avx_movntv8sf", value: 866, isUnsigned: true)
!2144 = !DIEnumerator(name: "CODE_FOR_avx_movntv4df", value: 867, isUnsigned: true)
!2145 = !DIEnumerator(name: "CODE_FOR_sse_movntv4sf", value: 868, isUnsigned: true)
!2146 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2df", value: 869, isUnsigned: true)
!2147 = !DIEnumerator(name: "CODE_FOR_avx_movntv4di", value: 870, isUnsigned: true)
!2148 = !DIEnumerator(name: "CODE_FOR_avx_movntv2di", value: 871, isUnsigned: true)
!2149 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2di", value: 872, isUnsigned: true)
!2150 = !DIEnumerator(name: "CODE_FOR_sse2_movntsi", value: 873, isUnsigned: true)
!2151 = !DIEnumerator(name: "CODE_FOR_avx_lddqu256", value: 874, isUnsigned: true)
!2152 = !DIEnumerator(name: "CODE_FOR_avx_lddqu", value: 875, isUnsigned: true)
!2153 = !DIEnumerator(name: "CODE_FOR_sse3_lddqu", value: 876, isUnsigned: true)
!2154 = !DIEnumerator(name: "CODE_FOR_sse_vmaddv4sf3", value: 893, isUnsigned: true)
!2155 = !DIEnumerator(name: "CODE_FOR_sse_vmsubv4sf3", value: 894, isUnsigned: true)
!2156 = !DIEnumerator(name: "CODE_FOR_sse2_vmaddv2df3", value: 895, isUnsigned: true)
!2157 = !DIEnumerator(name: "CODE_FOR_sse2_vmsubv2df3", value: 896, isUnsigned: true)
!2158 = !DIEnumerator(name: "CODE_FOR_sse_vmmulv4sf3", value: 905, isUnsigned: true)
!2159 = !DIEnumerator(name: "CODE_FOR_sse2_vmmulv2df3", value: 906, isUnsigned: true)
!2160 = !DIEnumerator(name: "CODE_FOR_avx_divv4sf3", value: 907, isUnsigned: true)
!2161 = !DIEnumerator(name: "CODE_FOR_avx_divv2df3", value: 908, isUnsigned: true)
!2162 = !DIEnumerator(name: "CODE_FOR_avx_divv8sf3", value: 909, isUnsigned: true)
!2163 = !DIEnumerator(name: "CODE_FOR_avx_divv4df3", value: 910, isUnsigned: true)
!2164 = !DIEnumerator(name: "CODE_FOR_sse_divv4sf3", value: 913, isUnsigned: true)
!2165 = !DIEnumerator(name: "CODE_FOR_sse2_divv2df3", value: 914, isUnsigned: true)
!2166 = !DIEnumerator(name: "CODE_FOR_sse_vmdivv4sf3", value: 917, isUnsigned: true)
!2167 = !DIEnumerator(name: "CODE_FOR_sse2_vmdivv2df3", value: 918, isUnsigned: true)
!2168 = !DIEnumerator(name: "CODE_FOR_avx_rcpv8sf2", value: 919, isUnsigned: true)
!2169 = !DIEnumerator(name: "CODE_FOR_sse_rcpv4sf2", value: 920, isUnsigned: true)
!2170 = !DIEnumerator(name: "CODE_FOR_sse_vmrcpv4sf2", value: 922, isUnsigned: true)
!2171 = !DIEnumerator(name: "CODE_FOR_avx_sqrtv8sf2", value: 923, isUnsigned: true)
!2172 = !DIEnumerator(name: "CODE_FOR_sse_sqrtv4sf2", value: 924, isUnsigned: true)
!2173 = !DIEnumerator(name: "CODE_FOR_sqrtv4df2", value: 925, isUnsigned: true)
!2174 = !DIEnumerator(name: "CODE_FOR_sqrtv2df2", value: 926, isUnsigned: true)
!2175 = !DIEnumerator(name: "CODE_FOR_sse_vmsqrtv4sf2", value: 929, isUnsigned: true)
!2176 = !DIEnumerator(name: "CODE_FOR_sse2_vmsqrtv2df2", value: 930, isUnsigned: true)
!2177 = !DIEnumerator(name: "CODE_FOR_avx_rsqrtv8sf2", value: 931, isUnsigned: true)
!2178 = !DIEnumerator(name: "CODE_FOR_sse_rsqrtv4sf2", value: 932, isUnsigned: true)
!2179 = !DIEnumerator(name: "CODE_FOR_sse_vmrsqrtv4sf2", value: 934, isUnsigned: true)
!2180 = !DIEnumerator(name: "CODE_FOR_sse_vmsmaxv4sf3", value: 963, isUnsigned: true)
!2181 = !DIEnumerator(name: "CODE_FOR_sse_vmsminv4sf3", value: 964, isUnsigned: true)
!2182 = !DIEnumerator(name: "CODE_FOR_sse2_vmsmaxv2df3", value: 965, isUnsigned: true)
!2183 = !DIEnumerator(name: "CODE_FOR_sse2_vmsminv2df3", value: 966, isUnsigned: true)
!2184 = !DIEnumerator(name: "CODE_FOR_avx_addsubv8sf3", value: 979, isUnsigned: true)
!2185 = !DIEnumerator(name: "CODE_FOR_avx_addsubv4df3", value: 980, isUnsigned: true)
!2186 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv4sf3", value: 982, isUnsigned: true)
!2187 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv2df3", value: 984, isUnsigned: true)
!2188 = !DIEnumerator(name: "CODE_FOR_avx_haddv4df3", value: 985, isUnsigned: true)
!2189 = !DIEnumerator(name: "CODE_FOR_avx_hsubv4df3", value: 986, isUnsigned: true)
!2190 = !DIEnumerator(name: "CODE_FOR_avx_haddv8sf3", value: 987, isUnsigned: true)
!2191 = !DIEnumerator(name: "CODE_FOR_avx_hsubv8sf3", value: 988, isUnsigned: true)
!2192 = !DIEnumerator(name: "CODE_FOR_sse3_haddv4sf3", value: 991, isUnsigned: true)
!2193 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv4sf3", value: 992, isUnsigned: true)
!2194 = !DIEnumerator(name: "CODE_FOR_sse3_haddv2df3", value: 995, isUnsigned: true)
!2195 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv2df3", value: 996, isUnsigned: true)
!2196 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv4sf3", value: 997, isUnsigned: true)
!2197 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv2df3", value: 998, isUnsigned: true)
!2198 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv8sf3", value: 999, isUnsigned: true)
!2199 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv4df3", value: 1000, isUnsigned: true)
!2200 = !DIEnumerator(name: "CODE_FOR_avx_cmpssv4sf3", value: 1001, isUnsigned: true)
!2201 = !DIEnumerator(name: "CODE_FOR_avx_cmpsdv2df3", value: 1002, isUnsigned: true)
!2202 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpsf3", value: 1007, isUnsigned: true)
!2203 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpdf3", value: 1008, isUnsigned: true)
!2204 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpv4sf3", value: 1009, isUnsigned: true)
!2205 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpv2df3", value: 1010, isUnsigned: true)
!2206 = !DIEnumerator(name: "CODE_FOR_sse_vmmaskcmpv4sf3", value: 1011, isUnsigned: true)
!2207 = !DIEnumerator(name: "CODE_FOR_sse2_vmmaskcmpv2df3", value: 1012, isUnsigned: true)
!2208 = !DIEnumerator(name: "CODE_FOR_sse_comi", value: 1013, isUnsigned: true)
!2209 = !DIEnumerator(name: "CODE_FOR_sse2_comi", value: 1014, isUnsigned: true)
!2210 = !DIEnumerator(name: "CODE_FOR_sse_ucomi", value: 1015, isUnsigned: true)
!2211 = !DIEnumerator(name: "CODE_FOR_sse2_ucomi", value: 1016, isUnsigned: true)
!2212 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4sf3", value: 1017, isUnsigned: true)
!2213 = !DIEnumerator(name: "CODE_FOR_avx_andnotv2df3", value: 1018, isUnsigned: true)
!2214 = !DIEnumerator(name: "CODE_FOR_avx_andnotv8sf3", value: 1019, isUnsigned: true)
!2215 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4df3", value: 1020, isUnsigned: true)
!2216 = !DIEnumerator(name: "CODE_FOR_sse_andnotv4sf3", value: 1021, isUnsigned: true)
!2217 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2df3", value: 1022, isUnsigned: true)
!2218 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv8sf4256", value: 1057, isUnsigned: true)
!2219 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4df4256", value: 1058, isUnsigned: true)
!2220 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv8sf4256", value: 1059, isUnsigned: true)
!2221 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4df4256", value: 1060, isUnsigned: true)
!2222 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv8sf4256", value: 1061, isUnsigned: true)
!2223 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4df4256", value: 1062, isUnsigned: true)
!2224 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv8sf4256", value: 1063, isUnsigned: true)
!2225 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4df4256", value: 1064, isUnsigned: true)
!2226 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsf4", value: 1065, isUnsigned: true)
!2227 = !DIEnumerator(name: "CODE_FOR_fma4_fmadddf4", value: 1066, isUnsigned: true)
!2228 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4sf4", value: 1067, isUnsigned: true)
!2229 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv2df4", value: 1068, isUnsigned: true)
!2230 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv4sf4", value: 1069, isUnsigned: true)
!2231 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv2df4", value: 1070, isUnsigned: true)
!2232 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubsf4", value: 1071, isUnsigned: true)
!2233 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubdf4", value: 1072, isUnsigned: true)
!2234 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4sf4", value: 1073, isUnsigned: true)
!2235 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv2df4", value: 1074, isUnsigned: true)
!2236 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv4sf4", value: 1075, isUnsigned: true)
!2237 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv2df4", value: 1076, isUnsigned: true)
!2238 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddsf4", value: 1077, isUnsigned: true)
!2239 = !DIEnumerator(name: "CODE_FOR_fma4_fnmadddf4", value: 1078, isUnsigned: true)
!2240 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4sf4", value: 1079, isUnsigned: true)
!2241 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv2df4", value: 1080, isUnsigned: true)
!2242 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv4sf4", value: 1081, isUnsigned: true)
!2243 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv2df4", value: 1082, isUnsigned: true)
!2244 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubsf4", value: 1083, isUnsigned: true)
!2245 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubdf4", value: 1084, isUnsigned: true)
!2246 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4sf4", value: 1085, isUnsigned: true)
!2247 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv2df4", value: 1086, isUnsigned: true)
!2248 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv4sf4", value: 1087, isUnsigned: true)
!2249 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv2df4", value: 1088, isUnsigned: true)
!2250 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv8sf4256", value: 1089, isUnsigned: true)
!2251 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4df4256", value: 1090, isUnsigned: true)
!2252 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv8sf4256", value: 1091, isUnsigned: true)
!2253 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4df4256", value: 1092, isUnsigned: true)
!2254 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv8sf4256", value: 1093, isUnsigned: true)
!2255 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4df4256", value: 1094, isUnsigned: true)
!2256 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv8sf4256", value: 1095, isUnsigned: true)
!2257 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4df4256", value: 1096, isUnsigned: true)
!2258 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4sf4", value: 1097, isUnsigned: true)
!2259 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv2df4", value: 1098, isUnsigned: true)
!2260 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4sf4", value: 1099, isUnsigned: true)
!2261 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv2df4", value: 1100, isUnsigned: true)
!2262 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4sf4", value: 1101, isUnsigned: true)
!2263 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv2df4", value: 1102, isUnsigned: true)
!2264 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4sf4", value: 1103, isUnsigned: true)
!2265 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv2df4", value: 1104, isUnsigned: true)
!2266 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv4sf4", value: 1105, isUnsigned: true)
!2267 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv2df4", value: 1106, isUnsigned: true)
!2268 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv4sf4", value: 1107, isUnsigned: true)
!2269 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv2df4", value: 1108, isUnsigned: true)
!2270 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv4sf4", value: 1109, isUnsigned: true)
!2271 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv2df4", value: 1110, isUnsigned: true)
!2272 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv4sf4", value: 1111, isUnsigned: true)
!2273 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv2df4", value: 1112, isUnsigned: true)
!2274 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv8sf4", value: 1113, isUnsigned: true)
!2275 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4df4", value: 1114, isUnsigned: true)
!2276 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4sf4", value: 1115, isUnsigned: true)
!2277 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv2df4", value: 1116, isUnsigned: true)
!2278 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv8sf4", value: 1117, isUnsigned: true)
!2279 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4df4", value: 1118, isUnsigned: true)
!2280 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4sf4", value: 1119, isUnsigned: true)
!2281 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv2df4", value: 1120, isUnsigned: true)
!2282 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv8sf4", value: 1121, isUnsigned: true)
!2283 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4df4", value: 1122, isUnsigned: true)
!2284 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4sf4", value: 1123, isUnsigned: true)
!2285 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv2df4", value: 1124, isUnsigned: true)
!2286 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv8sf4", value: 1125, isUnsigned: true)
!2287 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4df4", value: 1126, isUnsigned: true)
!2288 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4sf4", value: 1127, isUnsigned: true)
!2289 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv2df4", value: 1128, isUnsigned: true)
!2290 = !DIEnumerator(name: "CODE_FOR_sse_cvtpi2ps", value: 1129, isUnsigned: true)
!2291 = !DIEnumerator(name: "CODE_FOR_sse_cvtps2pi", value: 1130, isUnsigned: true)
!2292 = !DIEnumerator(name: "CODE_FOR_sse_cvttps2pi", value: 1131, isUnsigned: true)
!2293 = !DIEnumerator(name: "CODE_FOR_sse_cvtsi2ss", value: 1133, isUnsigned: true)
!2294 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si", value: 1134, isUnsigned: true)
!2295 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si_2", value: 1135, isUnsigned: true)
!2296 = !DIEnumerator(name: "CODE_FOR_sse_cvttss2si", value: 1136, isUnsigned: true)
!2297 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps", value: 1137, isUnsigned: true)
!2298 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps256", value: 1138, isUnsigned: true)
!2299 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2ps", value: 1139, isUnsigned: true)
!2300 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq", value: 1140, isUnsigned: true)
!2301 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq256", value: 1141, isUnsigned: true)
!2302 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2dq", value: 1142, isUnsigned: true)
!2303 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq", value: 1143, isUnsigned: true)
!2304 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq256", value: 1144, isUnsigned: true)
!2305 = !DIEnumerator(name: "CODE_FOR_sse2_cvttps2dq", value: 1145, isUnsigned: true)
!2306 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpi2pd", value: 1146, isUnsigned: true)
!2307 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2pi", value: 1147, isUnsigned: true)
!2308 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2pi", value: 1148, isUnsigned: true)
!2309 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsi2sd", value: 1150, isUnsigned: true)
!2310 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si", value: 1151, isUnsigned: true)
!2311 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si_2", value: 1152, isUnsigned: true)
!2312 = !DIEnumerator(name: "CODE_FOR_sse2_cvttsd2si", value: 1153, isUnsigned: true)
!2313 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2pd256", value: 1154, isUnsigned: true)
!2314 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2pd", value: 1155, isUnsigned: true)
!2315 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2dq256", value: 1156, isUnsigned: true)
!2316 = !DIEnumerator(name: "CODE_FOR_avx_cvttpd2dq256", value: 1158, isUnsigned: true)
!2317 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2ss", value: 1161, isUnsigned: true)
!2318 = !DIEnumerator(name: "CODE_FOR_sse2_cvtss2sd", value: 1163, isUnsigned: true)
!2319 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2ps256", value: 1164, isUnsigned: true)
!2320 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2pd256", value: 1166, isUnsigned: true)
!2321 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2pd", value: 1167, isUnsigned: true)
!2322 = !DIEnumerator(name: "CODE_FOR_sse_movhlps", value: 1169, isUnsigned: true)
!2323 = !DIEnumerator(name: "CODE_FOR_sse_movlhps", value: 1171, isUnsigned: true)
!2324 = !DIEnumerator(name: "CODE_FOR_avx_unpckhps256", value: 1172, isUnsigned: true)
!2325 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4sf", value: 1174, isUnsigned: true)
!2326 = !DIEnumerator(name: "CODE_FOR_avx_unpcklps256", value: 1175, isUnsigned: true)
!2327 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4sf", value: 1177, isUnsigned: true)
!2328 = !DIEnumerator(name: "CODE_FOR_avx_movshdup256", value: 1178, isUnsigned: true)
!2329 = !DIEnumerator(name: "CODE_FOR_sse3_movshdup", value: 1179, isUnsigned: true)
!2330 = !DIEnumerator(name: "CODE_FOR_avx_movsldup256", value: 1180, isUnsigned: true)
!2331 = !DIEnumerator(name: "CODE_FOR_sse3_movsldup", value: 1181, isUnsigned: true)
!2332 = !DIEnumerator(name: "CODE_FOR_avx_shufps256_1", value: 1182, isUnsigned: true)
!2333 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4sf", value: 1185, isUnsigned: true)
!2334 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4si", value: 1186, isUnsigned: true)
!2335 = !DIEnumerator(name: "CODE_FOR_sse_storehps", value: 1187, isUnsigned: true)
!2336 = !DIEnumerator(name: "CODE_FOR_sse_loadhps", value: 1189, isUnsigned: true)
!2337 = !DIEnumerator(name: "CODE_FOR_sse_storelps", value: 1191, isUnsigned: true)
!2338 = !DIEnumerator(name: "CODE_FOR_sse_loadlps", value: 1193, isUnsigned: true)
!2339 = !DIEnumerator(name: "CODE_FOR_sse_movss", value: 1195, isUnsigned: true)
!2340 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf_0", value: 1209, isUnsigned: true)
!2341 = !DIEnumerator(name: "CODE_FOR_vec_setv4si_0", value: 1210, isUnsigned: true)
!2342 = !DIEnumerator(name: "CODE_FOR_sse4_1_insertps", value: 1214, isUnsigned: true)
!2343 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4di", value: 1216, isUnsigned: true)
!2344 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4df", value: 1217, isUnsigned: true)
!2345 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4di", value: 1218, isUnsigned: true)
!2346 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4df", value: 1219, isUnsigned: true)
!2347 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8si", value: 1220, isUnsigned: true)
!2348 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8sf", value: 1221, isUnsigned: true)
!2349 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8si", value: 1222, isUnsigned: true)
!2350 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8sf", value: 1223, isUnsigned: true)
!2351 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v16hi", value: 1224, isUnsigned: true)
!2352 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v16hi", value: 1225, isUnsigned: true)
!2353 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v32qi", value: 1226, isUnsigned: true)
!2354 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v32qi", value: 1227, isUnsigned: true)
!2355 = !DIEnumerator(name: "CODE_FOR_avx_unpckhpd256", value: 1230, isUnsigned: true)
!2356 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256_1", value: 1238, isUnsigned: true)
!2357 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2di", value: 1240, isUnsigned: true)
!2358 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2di", value: 1242, isUnsigned: true)
!2359 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2df", value: 1245, isUnsigned: true)
!2360 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2di", value: 1246, isUnsigned: true)
!2361 = !DIEnumerator(name: "CODE_FOR_sse2_storehpd", value: 1248, isUnsigned: true)
!2362 = !DIEnumerator(name: "CODE_FOR_sse2_storelpd", value: 1249, isUnsigned: true)
!2363 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd", value: 1251, isUnsigned: true)
!2364 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd", value: 1253, isUnsigned: true)
!2365 = !DIEnumerator(name: "CODE_FOR_sse2_movsd", value: 1257, isUnsigned: true)
!2366 = !DIEnumerator(name: "CODE_FOR_vec_dupv2df", value: 1259, isUnsigned: true)
!2367 = !DIEnumerator(name: "CODE_FOR_mulv16qi3", value: 1295, isUnsigned: true)
!2368 = !DIEnumerator(name: "CODE_FOR_mulv2di3", value: 1311, isUnsigned: true)
!2369 = !DIEnumerator(name: "CODE_FOR_ashrv8hi3", value: 1314, isUnsigned: true)
!2370 = !DIEnumerator(name: "CODE_FOR_ashrv4si3", value: 1315, isUnsigned: true)
!2371 = !DIEnumerator(name: "CODE_FOR_sse2_lshrv1ti3", value: 1320, isUnsigned: true)
!2372 = !DIEnumerator(name: "CODE_FOR_lshrv8hi3", value: 1321, isUnsigned: true)
!2373 = !DIEnumerator(name: "CODE_FOR_lshrv4si3", value: 1322, isUnsigned: true)
!2374 = !DIEnumerator(name: "CODE_FOR_lshrv2di3", value: 1323, isUnsigned: true)
!2375 = !DIEnumerator(name: "CODE_FOR_sse2_ashlv1ti3", value: 1328, isUnsigned: true)
!2376 = !DIEnumerator(name: "CODE_FOR_ashlv8hi3", value: 1329, isUnsigned: true)
!2377 = !DIEnumerator(name: "CODE_FOR_ashlv4si3", value: 1330, isUnsigned: true)
!2378 = !DIEnumerator(name: "CODE_FOR_ashlv2di3", value: 1331, isUnsigned: true)
!2379 = !DIEnumerator(name: "CODE_FOR_sse2_gtv16qi3", value: 1368, isUnsigned: true)
!2380 = !DIEnumerator(name: "CODE_FOR_sse2_gtv8hi3", value: 1369, isUnsigned: true)
!2381 = !DIEnumerator(name: "CODE_FOR_sse2_gtv4si3", value: 1370, isUnsigned: true)
!2382 = !DIEnumerator(name: "CODE_FOR_sse4_2_gtv2di3", value: 1371, isUnsigned: true)
!2383 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv16qi3", value: 1384, isUnsigned: true)
!2384 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv8hi3", value: 1385, isUnsigned: true)
!2385 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv4si3", value: 1386, isUnsigned: true)
!2386 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2di3", value: 1387, isUnsigned: true)
!2387 = !DIEnumerator(name: "CODE_FOR_sse2_packsswb", value: 1441, isUnsigned: true)
!2388 = !DIEnumerator(name: "CODE_FOR_sse2_packssdw", value: 1443, isUnsigned: true)
!2389 = !DIEnumerator(name: "CODE_FOR_sse2_packuswb", value: 1445, isUnsigned: true)
!2390 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv16qi", value: 1447, isUnsigned: true)
!2391 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv16qi", value: 1449, isUnsigned: true)
!2392 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv8hi", value: 1451, isUnsigned: true)
!2393 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv8hi", value: 1453, isUnsigned: true)
!2394 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4si", value: 1455, isUnsigned: true)
!2395 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4si", value: 1457, isUnsigned: true)
!2396 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd_1", value: 1469, isUnsigned: true)
!2397 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw_1", value: 1470, isUnsigned: true)
!2398 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw_1", value: 1471, isUnsigned: true)
!2399 = !DIEnumerator(name: "CODE_FOR_sse2_loadld", value: 1473, isUnsigned: true)
!2400 = !DIEnumerator(name: "CODE_FOR_sse2_stored", value: 1474, isUnsigned: true)
!2401 = !DIEnumerator(name: "CODE_FOR_vec_concatv2di", value: 1492, isUnsigned: true)
!2402 = !DIEnumerator(name: "CODE_FOR_sse2_psadbw", value: 1498, isUnsigned: true)
!2403 = !DIEnumerator(name: "CODE_FOR_avx_movmskps256", value: 1499, isUnsigned: true)
!2404 = !DIEnumerator(name: "CODE_FOR_avx_movmskpd256", value: 1500, isUnsigned: true)
!2405 = !DIEnumerator(name: "CODE_FOR_sse_movmskps", value: 1501, isUnsigned: true)
!2406 = !DIEnumerator(name: "CODE_FOR_sse2_movmskpd", value: 1502, isUnsigned: true)
!2407 = !DIEnumerator(name: "CODE_FOR_sse2_pmovmskb", value: 1503, isUnsigned: true)
!2408 = !DIEnumerator(name: "CODE_FOR_sse_ldmxcsr", value: 1505, isUnsigned: true)
!2409 = !DIEnumerator(name: "CODE_FOR_sse_stmxcsr", value: 1506, isUnsigned: true)
!2410 = !DIEnumerator(name: "CODE_FOR_sse2_clflush", value: 1508, isUnsigned: true)
!2411 = !DIEnumerator(name: "CODE_FOR_sse3_mwait", value: 1511, isUnsigned: true)
!2412 = !DIEnumerator(name: "CODE_FOR_sse3_monitor", value: 1512, isUnsigned: true)
!2413 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv8hi3", value: 1514, isUnsigned: true)
!2414 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv4hi3", value: 1515, isUnsigned: true)
!2415 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv4si3", value: 1517, isUnsigned: true)
!2416 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv2si3", value: 1518, isUnsigned: true)
!2417 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv8hi3", value: 1520, isUnsigned: true)
!2418 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv4hi3", value: 1521, isUnsigned: true)
!2419 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv8hi3", value: 1523, isUnsigned: true)
!2420 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv4hi3", value: 1524, isUnsigned: true)
!2421 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv4si3", value: 1526, isUnsigned: true)
!2422 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv2si3", value: 1527, isUnsigned: true)
!2423 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv8hi3", value: 1529, isUnsigned: true)
!2424 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv4hi3", value: 1530, isUnsigned: true)
!2425 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw128", value: 1532, isUnsigned: true)
!2426 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw", value: 1533, isUnsigned: true)
!2427 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv16qi3", value: 1538, isUnsigned: true)
!2428 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv8qi3", value: 1539, isUnsigned: true)
!2429 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv16qi3", value: 1543, isUnsigned: true)
!2430 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8hi3", value: 1544, isUnsigned: true)
!2431 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4si3", value: 1545, isUnsigned: true)
!2432 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8qi3", value: 1546, isUnsigned: true)
!2433 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4hi3", value: 1547, isUnsigned: true)
!2434 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv2si3", value: 1548, isUnsigned: true)
!2435 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrti", value: 1550, isUnsigned: true)
!2436 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrdi", value: 1551, isUnsigned: true)
!2437 = !DIEnumerator(name: "CODE_FOR_absv16qi2", value: 1552, isUnsigned: true)
!2438 = !DIEnumerator(name: "CODE_FOR_absv8hi2", value: 1553, isUnsigned: true)
!2439 = !DIEnumerator(name: "CODE_FOR_absv4si2", value: 1554, isUnsigned: true)
!2440 = !DIEnumerator(name: "CODE_FOR_absv8qi2", value: 1555, isUnsigned: true)
!2441 = !DIEnumerator(name: "CODE_FOR_absv4hi2", value: 1556, isUnsigned: true)
!2442 = !DIEnumerator(name: "CODE_FOR_absv2si2", value: 1557, isUnsigned: true)
!2443 = !DIEnumerator(name: "CODE_FOR_sse4a_movntsf", value: 1558, isUnsigned: true)
!2444 = !DIEnumerator(name: "CODE_FOR_sse4a_movntdf", value: 1559, isUnsigned: true)
!2445 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv4sf", value: 1560, isUnsigned: true)
!2446 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv2df", value: 1561, isUnsigned: true)
!2447 = !DIEnumerator(name: "CODE_FOR_sse4a_extrqi", value: 1562, isUnsigned: true)
!2448 = !DIEnumerator(name: "CODE_FOR_sse4a_extrq", value: 1563, isUnsigned: true)
!2449 = !DIEnumerator(name: "CODE_FOR_sse4a_insertqi", value: 1564, isUnsigned: true)
!2450 = !DIEnumerator(name: "CODE_FOR_sse4a_insertq", value: 1565, isUnsigned: true)
!2451 = !DIEnumerator(name: "CODE_FOR_avx_blendps", value: 1566, isUnsigned: true)
!2452 = !DIEnumerator(name: "CODE_FOR_avx_blendpd", value: 1567, isUnsigned: true)
!2453 = !DIEnumerator(name: "CODE_FOR_avx_blendps256", value: 1568, isUnsigned: true)
!2454 = !DIEnumerator(name: "CODE_FOR_avx_blendpd256", value: 1569, isUnsigned: true)
!2455 = !DIEnumerator(name: "CODE_FOR_avx_blendvps", value: 1570, isUnsigned: true)
!2456 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd", value: 1571, isUnsigned: true)
!2457 = !DIEnumerator(name: "CODE_FOR_avx_blendvps256", value: 1572, isUnsigned: true)
!2458 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd256", value: 1573, isUnsigned: true)
!2459 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendps", value: 1574, isUnsigned: true)
!2460 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendpd", value: 1575, isUnsigned: true)
!2461 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvps", value: 1576, isUnsigned: true)
!2462 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvpd", value: 1577, isUnsigned: true)
!2463 = !DIEnumerator(name: "CODE_FOR_avx_dpps", value: 1578, isUnsigned: true)
!2464 = !DIEnumerator(name: "CODE_FOR_avx_dppd", value: 1579, isUnsigned: true)
!2465 = !DIEnumerator(name: "CODE_FOR_avx_dpps256", value: 1580, isUnsigned: true)
!2466 = !DIEnumerator(name: "CODE_FOR_avx_dppd256", value: 1581, isUnsigned: true)
!2467 = !DIEnumerator(name: "CODE_FOR_sse4_1_dpps", value: 1582, isUnsigned: true)
!2468 = !DIEnumerator(name: "CODE_FOR_sse4_1_dppd", value: 1583, isUnsigned: true)
!2469 = !DIEnumerator(name: "CODE_FOR_sse4_1_movntdqa", value: 1584, isUnsigned: true)
!2470 = !DIEnumerator(name: "CODE_FOR_sse4_1_mpsadbw", value: 1586, isUnsigned: true)
!2471 = !DIEnumerator(name: "CODE_FOR_sse4_1_packusdw", value: 1588, isUnsigned: true)
!2472 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendvb", value: 1590, isUnsigned: true)
!2473 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendw", value: 1592, isUnsigned: true)
!2474 = !DIEnumerator(name: "CODE_FOR_sse4_1_phminposuw", value: 1593, isUnsigned: true)
!2475 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv8qiv8hi2", value: 1594, isUnsigned: true)
!2476 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4qiv4si2", value: 1596, isUnsigned: true)
!2477 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2qiv2di2", value: 1598, isUnsigned: true)
!2478 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4hiv4si2", value: 1600, isUnsigned: true)
!2479 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2hiv2di2", value: 1602, isUnsigned: true)
!2480 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2siv2di2", value: 1604, isUnsigned: true)
!2481 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv8qiv8hi2", value: 1606, isUnsigned: true)
!2482 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4qiv4si2", value: 1608, isUnsigned: true)
!2483 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2qiv2di2", value: 1610, isUnsigned: true)
!2484 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4hiv4si2", value: 1612, isUnsigned: true)
!2485 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2hiv2di2", value: 1614, isUnsigned: true)
!2486 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2siv2di2", value: 1616, isUnsigned: true)
!2487 = !DIEnumerator(name: "CODE_FOR_avx_vtestps", value: 1618, isUnsigned: true)
!2488 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd", value: 1619, isUnsigned: true)
!2489 = !DIEnumerator(name: "CODE_FOR_avx_vtestps256", value: 1620, isUnsigned: true)
!2490 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd256", value: 1621, isUnsigned: true)
!2491 = !DIEnumerator(name: "CODE_FOR_avx_ptest256", value: 1622, isUnsigned: true)
!2492 = !DIEnumerator(name: "CODE_FOR_sse4_1_ptest", value: 1623, isUnsigned: true)
!2493 = !DIEnumerator(name: "CODE_FOR_avx_roundps256", value: 1624, isUnsigned: true)
!2494 = !DIEnumerator(name: "CODE_FOR_avx_roundpd256", value: 1625, isUnsigned: true)
!2495 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundps", value: 1626, isUnsigned: true)
!2496 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundpd", value: 1627, isUnsigned: true)
!2497 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundss", value: 1630, isUnsigned: true)
!2498 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsd", value: 1631, isUnsigned: true)
!2499 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr", value: 1632, isUnsigned: true)
!2500 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestri", value: 1633, isUnsigned: true)
!2501 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestrm", value: 1634, isUnsigned: true)
!2502 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr_cconly", value: 1635, isUnsigned: true)
!2503 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr", value: 1636, isUnsigned: true)
!2504 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistri", value: 1637, isUnsigned: true)
!2505 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistrm", value: 1638, isUnsigned: true)
!2506 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr_cconly", value: 1639, isUnsigned: true)
!2507 = !DIEnumerator(name: "CODE_FOR_xop_pmacsww", value: 1640, isUnsigned: true)
!2508 = !DIEnumerator(name: "CODE_FOR_xop_pmacssww", value: 1641, isUnsigned: true)
!2509 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdd", value: 1642, isUnsigned: true)
!2510 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdd", value: 1643, isUnsigned: true)
!2511 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdql", value: 1644, isUnsigned: true)
!2512 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdqh", value: 1645, isUnsigned: true)
!2513 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdql", value: 1646, isUnsigned: true)
!2514 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_low", value: 1647, isUnsigned: true)
!2515 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdqh", value: 1648, isUnsigned: true)
!2516 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_high", value: 1649, isUnsigned: true)
!2517 = !DIEnumerator(name: "CODE_FOR_xop_pmacsswd", value: 1650, isUnsigned: true)
!2518 = !DIEnumerator(name: "CODE_FOR_xop_pmacswd", value: 1651, isUnsigned: true)
!2519 = !DIEnumerator(name: "CODE_FOR_xop_pmadcsswd", value: 1652, isUnsigned: true)
!2520 = !DIEnumerator(name: "CODE_FOR_xop_pmadcswd", value: 1653, isUnsigned: true)
!2521 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16qi", value: 1654, isUnsigned: true)
!2522 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8hi", value: 1655, isUnsigned: true)
!2523 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4si", value: 1656, isUnsigned: true)
!2524 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2di", value: 1657, isUnsigned: true)
!2525 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4sf", value: 1658, isUnsigned: true)
!2526 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2df", value: 1659, isUnsigned: true)
!2527 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v32qi256", value: 1660, isUnsigned: true)
!2528 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16hi256", value: 1661, isUnsigned: true)
!2529 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8si256", value: 1662, isUnsigned: true)
!2530 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4di256", value: 1663, isUnsigned: true)
!2531 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8sf256", value: 1664, isUnsigned: true)
!2532 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4df256", value: 1665, isUnsigned: true)
!2533 = !DIEnumerator(name: "CODE_FOR_xop_phaddbw", value: 1666, isUnsigned: true)
!2534 = !DIEnumerator(name: "CODE_FOR_xop_phaddbd", value: 1667, isUnsigned: true)
!2535 = !DIEnumerator(name: "CODE_FOR_xop_phaddbq", value: 1668, isUnsigned: true)
!2536 = !DIEnumerator(name: "CODE_FOR_xop_phaddwd", value: 1669, isUnsigned: true)
!2537 = !DIEnumerator(name: "CODE_FOR_xop_phaddwq", value: 1670, isUnsigned: true)
!2538 = !DIEnumerator(name: "CODE_FOR_xop_phadddq", value: 1671, isUnsigned: true)
!2539 = !DIEnumerator(name: "CODE_FOR_xop_phaddubw", value: 1672, isUnsigned: true)
!2540 = !DIEnumerator(name: "CODE_FOR_xop_phaddubd", value: 1673, isUnsigned: true)
!2541 = !DIEnumerator(name: "CODE_FOR_xop_phaddubq", value: 1674, isUnsigned: true)
!2542 = !DIEnumerator(name: "CODE_FOR_xop_phadduwd", value: 1675, isUnsigned: true)
!2543 = !DIEnumerator(name: "CODE_FOR_xop_phadduwq", value: 1676, isUnsigned: true)
!2544 = !DIEnumerator(name: "CODE_FOR_xop_phaddudq", value: 1677, isUnsigned: true)
!2545 = !DIEnumerator(name: "CODE_FOR_xop_phsubbw", value: 1678, isUnsigned: true)
!2546 = !DIEnumerator(name: "CODE_FOR_xop_phsubwd", value: 1679, isUnsigned: true)
!2547 = !DIEnumerator(name: "CODE_FOR_xop_phsubdq", value: 1680, isUnsigned: true)
!2548 = !DIEnumerator(name: "CODE_FOR_xop_pperm", value: 1681, isUnsigned: true)
!2549 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v2di_v4si", value: 1682, isUnsigned: true)
!2550 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v4si_v8hi", value: 1683, isUnsigned: true)
!2551 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v8hi_v16qi", value: 1684, isUnsigned: true)
!2552 = !DIEnumerator(name: "CODE_FOR_xop_rotlv16qi3", value: 1685, isUnsigned: true)
!2553 = !DIEnumerator(name: "CODE_FOR_xop_rotlv8hi3", value: 1686, isUnsigned: true)
!2554 = !DIEnumerator(name: "CODE_FOR_xop_rotlv4si3", value: 1687, isUnsigned: true)
!2555 = !DIEnumerator(name: "CODE_FOR_xop_rotlv2di3", value: 1688, isUnsigned: true)
!2556 = !DIEnumerator(name: "CODE_FOR_xop_rotrv16qi3", value: 1689, isUnsigned: true)
!2557 = !DIEnumerator(name: "CODE_FOR_xop_rotrv8hi3", value: 1690, isUnsigned: true)
!2558 = !DIEnumerator(name: "CODE_FOR_xop_rotrv4si3", value: 1691, isUnsigned: true)
!2559 = !DIEnumerator(name: "CODE_FOR_xop_rotrv2di3", value: 1692, isUnsigned: true)
!2560 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv16qi3", value: 1693, isUnsigned: true)
!2561 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv8hi3", value: 1694, isUnsigned: true)
!2562 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv4si3", value: 1695, isUnsigned: true)
!2563 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv2di3", value: 1696, isUnsigned: true)
!2564 = !DIEnumerator(name: "CODE_FOR_xop_ashlv16qi3", value: 1697, isUnsigned: true)
!2565 = !DIEnumerator(name: "CODE_FOR_xop_ashlv8hi3", value: 1698, isUnsigned: true)
!2566 = !DIEnumerator(name: "CODE_FOR_xop_ashlv4si3", value: 1699, isUnsigned: true)
!2567 = !DIEnumerator(name: "CODE_FOR_xop_ashlv2di3", value: 1700, isUnsigned: true)
!2568 = !DIEnumerator(name: "CODE_FOR_xop_lshlv16qi3", value: 1701, isUnsigned: true)
!2569 = !DIEnumerator(name: "CODE_FOR_xop_lshlv8hi3", value: 1702, isUnsigned: true)
!2570 = !DIEnumerator(name: "CODE_FOR_xop_lshlv4si3", value: 1703, isUnsigned: true)
!2571 = !DIEnumerator(name: "CODE_FOR_xop_lshlv2di3", value: 1704, isUnsigned: true)
!2572 = !DIEnumerator(name: "CODE_FOR_xop_frczv4sf2", value: 1705, isUnsigned: true)
!2573 = !DIEnumerator(name: "CODE_FOR_xop_frczv2df2", value: 1706, isUnsigned: true)
!2574 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv4sf2", value: 1707, isUnsigned: true)
!2575 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv2df2", value: 1708, isUnsigned: true)
!2576 = !DIEnumerator(name: "CODE_FOR_xop_frczv8sf2256", value: 1709, isUnsigned: true)
!2577 = !DIEnumerator(name: "CODE_FOR_xop_frczv4df2256", value: 1710, isUnsigned: true)
!2578 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv16qi3", value: 1711, isUnsigned: true)
!2579 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv8hi3", value: 1712, isUnsigned: true)
!2580 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv4si3", value: 1713, isUnsigned: true)
!2581 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv2di3", value: 1714, isUnsigned: true)
!2582 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv16qi3", value: 1715, isUnsigned: true)
!2583 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv8hi3", value: 1716, isUnsigned: true)
!2584 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv4si3", value: 1717, isUnsigned: true)
!2585 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv2di3", value: 1718, isUnsigned: true)
!2586 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v16qi3", value: 1719, isUnsigned: true)
!2587 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v8hi3", value: 1720, isUnsigned: true)
!2588 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v4si3", value: 1721, isUnsigned: true)
!2589 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v2di3", value: 1722, isUnsigned: true)
!2590 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv16qi3", value: 1723, isUnsigned: true)
!2591 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv8hi3", value: 1724, isUnsigned: true)
!2592 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv4si3", value: 1725, isUnsigned: true)
!2593 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv2di3", value: 1726, isUnsigned: true)
!2594 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4sf3", value: 1727, isUnsigned: true)
!2595 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v2df3", value: 1728, isUnsigned: true)
!2596 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v8sf3", value: 1729, isUnsigned: true)
!2597 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4df3", value: 1730, isUnsigned: true)
!2598 = !DIEnumerator(name: "CODE_FOR_aesenc", value: 1732, isUnsigned: true)
!2599 = !DIEnumerator(name: "CODE_FOR_aesenclast", value: 1734, isUnsigned: true)
!2600 = !DIEnumerator(name: "CODE_FOR_aesdec", value: 1736, isUnsigned: true)
!2601 = !DIEnumerator(name: "CODE_FOR_aesdeclast", value: 1738, isUnsigned: true)
!2602 = !DIEnumerator(name: "CODE_FOR_aesimc", value: 1739, isUnsigned: true)
!2603 = !DIEnumerator(name: "CODE_FOR_aeskeygenassist", value: 1740, isUnsigned: true)
!2604 = !DIEnumerator(name: "CODE_FOR_pclmulqdq", value: 1742, isUnsigned: true)
!2605 = !DIEnumerator(name: "CODE_FOR_vec_dupv8si", value: 1745, isUnsigned: true)
!2606 = !DIEnumerator(name: "CODE_FOR_vec_dupv8sf", value: 1746, isUnsigned: true)
!2607 = !DIEnumerator(name: "CODE_FOR_vec_dupv4di", value: 1747, isUnsigned: true)
!2608 = !DIEnumerator(name: "CODE_FOR_vec_dupv4df", value: 1748, isUnsigned: true)
!2609 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v32qi", value: 1749, isUnsigned: true)
!2610 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v16hi", value: 1750, isUnsigned: true)
!2611 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8si", value: 1751, isUnsigned: true)
!2612 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4di", value: 1752, isUnsigned: true)
!2613 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8sf", value: 1753, isUnsigned: true)
!2614 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4df", value: 1754, isUnsigned: true)
!2615 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4sf3", value: 1762, isUnsigned: true)
!2616 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv2df3", value: 1763, isUnsigned: true)
!2617 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv8sf3", value: 1764, isUnsigned: true)
!2618 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4df3", value: 1765, isUnsigned: true)
!2619 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4di", value: 1772, isUnsigned: true)
!2620 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4df", value: 1773, isUnsigned: true)
!2621 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4di", value: 1774, isUnsigned: true)
!2622 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4df", value: 1775, isUnsigned: true)
!2623 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8si", value: 1776, isUnsigned: true)
!2624 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8sf", value: 1777, isUnsigned: true)
!2625 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8si", value: 1778, isUnsigned: true)
!2626 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8sf", value: 1779, isUnsigned: true)
!2627 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v16hi", value: 1780, isUnsigned: true)
!2628 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v16hi", value: 1781, isUnsigned: true)
!2629 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v32qi", value: 1782, isUnsigned: true)
!2630 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v32qi", value: 1783, isUnsigned: true)
!2631 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps", value: 1784, isUnsigned: true)
!2632 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd", value: 1785, isUnsigned: true)
!2633 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps256", value: 1786, isUnsigned: true)
!2634 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd256", value: 1787, isUnsigned: true)
!2635 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps", value: 1788, isUnsigned: true)
!2636 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd", value: 1789, isUnsigned: true)
!2637 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps256", value: 1790, isUnsigned: true)
!2638 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd256", value: 1791, isUnsigned: true)
!2639 = !DIEnumerator(name: "CODE_FOR_avx_si256_si", value: 1792, isUnsigned: true)
!2640 = !DIEnumerator(name: "CODE_FOR_avx_ps256_ps", value: 1793, isUnsigned: true)
!2641 = !DIEnumerator(name: "CODE_FOR_avx_pd256_pd", value: 1794, isUnsigned: true)
!2642 = !DIEnumerator(name: "CODE_FOR_avx_si_si256", value: 1795, isUnsigned: true)
!2643 = !DIEnumerator(name: "CODE_FOR_avx_ps_ps256", value: 1796, isUnsigned: true)
!2644 = !DIEnumerator(name: "CODE_FOR_avx_pd_pd256", value: 1797, isUnsigned: true)
!2645 = !DIEnumerator(name: "CODE_FOR_memory_barrier_nosse", value: 1804, isUnsigned: true)
!2646 = !DIEnumerator(name: "CODE_FOR_sync_double_compare_and_swapdi", value: 1808, isUnsigned: true)
!2647 = !DIEnumerator(name: "CODE_FOR_sync_old_addqi", value: 1810, isUnsigned: true)
!2648 = !DIEnumerator(name: "CODE_FOR_sync_old_addhi", value: 1811, isUnsigned: true)
!2649 = !DIEnumerator(name: "CODE_FOR_sync_old_addsi", value: 1812, isUnsigned: true)
!2650 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setqi", value: 1813, isUnsigned: true)
!2651 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_sethi", value: 1814, isUnsigned: true)
!2652 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setsi", value: 1815, isUnsigned: true)
!2653 = !DIEnumerator(name: "CODE_FOR_sync_addqi", value: 1816, isUnsigned: true)
!2654 = !DIEnumerator(name: "CODE_FOR_sync_addhi", value: 1817, isUnsigned: true)
!2655 = !DIEnumerator(name: "CODE_FOR_sync_addsi", value: 1818, isUnsigned: true)
!2656 = !DIEnumerator(name: "CODE_FOR_sync_subqi", value: 1819, isUnsigned: true)
!2657 = !DIEnumerator(name: "CODE_FOR_sync_subhi", value: 1820, isUnsigned: true)
!2658 = !DIEnumerator(name: "CODE_FOR_sync_subsi", value: 1821, isUnsigned: true)
!2659 = !DIEnumerator(name: "CODE_FOR_sync_andqi", value: 1822, isUnsigned: true)
!2660 = !DIEnumerator(name: "CODE_FOR_sync_iorqi", value: 1823, isUnsigned: true)
!2661 = !DIEnumerator(name: "CODE_FOR_sync_xorqi", value: 1824, isUnsigned: true)
!2662 = !DIEnumerator(name: "CODE_FOR_sync_andhi", value: 1825, isUnsigned: true)
!2663 = !DIEnumerator(name: "CODE_FOR_sync_iorhi", value: 1826, isUnsigned: true)
!2664 = !DIEnumerator(name: "CODE_FOR_sync_xorhi", value: 1827, isUnsigned: true)
!2665 = !DIEnumerator(name: "CODE_FOR_sync_andsi", value: 1828, isUnsigned: true)
!2666 = !DIEnumerator(name: "CODE_FOR_sync_iorsi", value: 1829, isUnsigned: true)
!2667 = !DIEnumerator(name: "CODE_FOR_sync_xorsi", value: 1830, isUnsigned: true)
!2668 = !DIEnumerator(name: "CODE_FOR_cbranchqi4", value: 1831, isUnsigned: true)
!2669 = !DIEnumerator(name: "CODE_FOR_cbranchhi4", value: 1832, isUnsigned: true)
!2670 = !DIEnumerator(name: "CODE_FOR_cbranchsi4", value: 1833, isUnsigned: true)
!2671 = !DIEnumerator(name: "CODE_FOR_cbranchdi4", value: 1834, isUnsigned: true)
!2672 = !DIEnumerator(name: "CODE_FOR_cstoreqi4", value: 1835, isUnsigned: true)
!2673 = !DIEnumerator(name: "CODE_FOR_cstorehi4", value: 1836, isUnsigned: true)
!2674 = !DIEnumerator(name: "CODE_FOR_cstoresi4", value: 1837, isUnsigned: true)
!2675 = !DIEnumerator(name: "CODE_FOR_cmpsi_1", value: 1838, isUnsigned: true)
!2676 = !DIEnumerator(name: "CODE_FOR_cmpqi_ext_3", value: 1839, isUnsigned: true)
!2677 = !DIEnumerator(name: "CODE_FOR_cbranchxf4", value: 1840, isUnsigned: true)
!2678 = !DIEnumerator(name: "CODE_FOR_cstorexf4", value: 1841, isUnsigned: true)
!2679 = !DIEnumerator(name: "CODE_FOR_cbranchsf4", value: 1842, isUnsigned: true)
!2680 = !DIEnumerator(name: "CODE_FOR_cbranchdf4", value: 1843, isUnsigned: true)
!2681 = !DIEnumerator(name: "CODE_FOR_cstoresf4", value: 1844, isUnsigned: true)
!2682 = !DIEnumerator(name: "CODE_FOR_cstoredf4", value: 1845, isUnsigned: true)
!2683 = !DIEnumerator(name: "CODE_FOR_cbranchcc4", value: 1846, isUnsigned: true)
!2684 = !DIEnumerator(name: "CODE_FOR_cstorecc4", value: 1847, isUnsigned: true)
!2685 = !DIEnumerator(name: "CODE_FOR_movsi", value: 1855, isUnsigned: true)
!2686 = !DIEnumerator(name: "CODE_FOR_movhi", value: 1856, isUnsigned: true)
!2687 = !DIEnumerator(name: "CODE_FOR_movstricthi", value: 1857, isUnsigned: true)
!2688 = !DIEnumerator(name: "CODE_FOR_movqi", value: 1858, isUnsigned: true)
!2689 = !DIEnumerator(name: "CODE_FOR_movstrictqi", value: 1859, isUnsigned: true)
!2690 = !DIEnumerator(name: "CODE_FOR_movdi", value: 1860, isUnsigned: true)
!2691 = !DIEnumerator(name: "CODE_FOR_movoi", value: 1863, isUnsigned: true)
!2692 = !DIEnumerator(name: "CODE_FOR_movti", value: 1864, isUnsigned: true)
!2693 = !DIEnumerator(name: "CODE_FOR_movcdi", value: 1866, isUnsigned: true)
!2694 = !DIEnumerator(name: "CODE_FOR_movsf", value: 1867, isUnsigned: true)
!2695 = !DIEnumerator(name: "CODE_FOR_movdf", value: 1870, isUnsigned: true)
!2696 = !DIEnumerator(name: "CODE_FOR_movxf", value: 1874, isUnsigned: true)
!2697 = !DIEnumerator(name: "CODE_FOR_movtf", value: 1877, isUnsigned: true)
!2698 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2", value: 1887, isUnsigned: true)
!2699 = !DIEnumerator(name: "CODE_FOR_zero_extendqihi2", value: 1889, isUnsigned: true)
!2700 = !DIEnumerator(name: "CODE_FOR_zero_extendqisi2", value: 1893, isUnsigned: true)
!2701 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2", value: 1897, isUnsigned: true)
!2702 = !DIEnumerator(name: "CODE_FOR_extendsidi2", value: 1900, isUnsigned: true)
!2703 = !DIEnumerator(name: "CODE_FOR_extendsfdf2", value: 1907, isUnsigned: true)
!2704 = !DIEnumerator(name: "CODE_FOR_extendsfxf2", value: 1909, isUnsigned: true)
!2705 = !DIEnumerator(name: "CODE_FOR_extenddfxf2", value: 1910, isUnsigned: true)
!2706 = !DIEnumerator(name: "CODE_FOR_truncdfsf2", value: 1911, isUnsigned: true)
!2707 = !DIEnumerator(name: "CODE_FOR_truncdfsf2_with_temp", value: 1913, isUnsigned: true)
!2708 = !DIEnumerator(name: "CODE_FOR_truncxfsf2", value: 1915, isUnsigned: true)
!2709 = !DIEnumerator(name: "CODE_FOR_truncxfdf2", value: 1916, isUnsigned: true)
!2710 = !DIEnumerator(name: "CODE_FOR_fix_truncxfdi2", value: 1921, isUnsigned: true)
!2711 = !DIEnumerator(name: "CODE_FOR_fix_truncsfdi2", value: 1922, isUnsigned: true)
!2712 = !DIEnumerator(name: "CODE_FOR_fix_truncdfdi2", value: 1923, isUnsigned: true)
!2713 = !DIEnumerator(name: "CODE_FOR_fix_truncxfsi2", value: 1924, isUnsigned: true)
!2714 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi2", value: 1925, isUnsigned: true)
!2715 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi2", value: 1926, isUnsigned: true)
!2716 = !DIEnumerator(name: "CODE_FOR_fix_truncsfhi2", value: 1927, isUnsigned: true)
!2717 = !DIEnumerator(name: "CODE_FOR_fix_truncdfhi2", value: 1928, isUnsigned: true)
!2718 = !DIEnumerator(name: "CODE_FOR_fix_truncxfhi2", value: 1929, isUnsigned: true)
!2719 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfsi2", value: 1930, isUnsigned: true)
!2720 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfsi2", value: 1931, isUnsigned: true)
!2721 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfhi2", value: 1934, isUnsigned: true)
!2722 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfhi2", value: 1935, isUnsigned: true)
!2723 = !DIEnumerator(name: "CODE_FOR_floathisf2", value: 1962, isUnsigned: true)
!2724 = !DIEnumerator(name: "CODE_FOR_floathidf2", value: 1963, isUnsigned: true)
!2725 = !DIEnumerator(name: "CODE_FOR_floathixf2", value: 1964, isUnsigned: true)
!2726 = !DIEnumerator(name: "CODE_FOR_floatsisf2", value: 1974, isUnsigned: true)
!2727 = !DIEnumerator(name: "CODE_FOR_floatdisf2", value: 1975, isUnsigned: true)
!2728 = !DIEnumerator(name: "CODE_FOR_floatsidf2", value: 1976, isUnsigned: true)
!2729 = !DIEnumerator(name: "CODE_FOR_floatdidf2", value: 1977, isUnsigned: true)
!2730 = !DIEnumerator(name: "CODE_FOR_floatsixf2", value: 1978, isUnsigned: true)
!2731 = !DIEnumerator(name: "CODE_FOR_floatdixf2", value: 1979, isUnsigned: true)
!2732 = !DIEnumerator(name: "CODE_FOR_floatunssisf2", value: 2028, isUnsigned: true)
!2733 = !DIEnumerator(name: "CODE_FOR_floatunssidf2", value: 2029, isUnsigned: true)
!2734 = !DIEnumerator(name: "CODE_FOR_floatunssixf2", value: 2030, isUnsigned: true)
!2735 = !DIEnumerator(name: "CODE_FOR_addqi3", value: 2031, isUnsigned: true)
!2736 = !DIEnumerator(name: "CODE_FOR_addhi3", value: 2032, isUnsigned: true)
!2737 = !DIEnumerator(name: "CODE_FOR_addsi3", value: 2033, isUnsigned: true)
!2738 = !DIEnumerator(name: "CODE_FOR_adddi3", value: 2034, isUnsigned: true)
!2739 = !DIEnumerator(name: "CODE_FOR_subqi3", value: 2040, isUnsigned: true)
!2740 = !DIEnumerator(name: "CODE_FOR_subhi3", value: 2041, isUnsigned: true)
!2741 = !DIEnumerator(name: "CODE_FOR_subsi3", value: 2042, isUnsigned: true)
!2742 = !DIEnumerator(name: "CODE_FOR_subdi3", value: 2043, isUnsigned: true)
!2743 = !DIEnumerator(name: "CODE_FOR_addqi3_carry", value: 2045, isUnsigned: true)
!2744 = !DIEnumerator(name: "CODE_FOR_subqi3_carry", value: 2046, isUnsigned: true)
!2745 = !DIEnumerator(name: "CODE_FOR_addhi3_carry", value: 2047, isUnsigned: true)
!2746 = !DIEnumerator(name: "CODE_FOR_subhi3_carry", value: 2048, isUnsigned: true)
!2747 = !DIEnumerator(name: "CODE_FOR_addsi3_carry", value: 2049, isUnsigned: true)
!2748 = !DIEnumerator(name: "CODE_FOR_subsi3_carry", value: 2050, isUnsigned: true)
!2749 = !DIEnumerator(name: "CODE_FOR_adddi3_carry", value: 2051, isUnsigned: true)
!2750 = !DIEnumerator(name: "CODE_FOR_subdi3_carry", value: 2052, isUnsigned: true)
!2751 = !DIEnumerator(name: "CODE_FOR_addxf3", value: 2053, isUnsigned: true)
!2752 = !DIEnumerator(name: "CODE_FOR_subxf3", value: 2054, isUnsigned: true)
!2753 = !DIEnumerator(name: "CODE_FOR_addsf3", value: 2055, isUnsigned: true)
!2754 = !DIEnumerator(name: "CODE_FOR_subsf3", value: 2056, isUnsigned: true)
!2755 = !DIEnumerator(name: "CODE_FOR_adddf3", value: 2057, isUnsigned: true)
!2756 = !DIEnumerator(name: "CODE_FOR_subdf3", value: 2058, isUnsigned: true)
!2757 = !DIEnumerator(name: "CODE_FOR_mulhi3", value: 2059, isUnsigned: true)
!2758 = !DIEnumerator(name: "CODE_FOR_mulsi3", value: 2060, isUnsigned: true)
!2759 = !DIEnumerator(name: "CODE_FOR_mulqi3", value: 2061, isUnsigned: true)
!2760 = !DIEnumerator(name: "CODE_FOR_mulsidi3", value: 2062, isUnsigned: true)
!2761 = !DIEnumerator(name: "CODE_FOR_umulsidi3", value: 2063, isUnsigned: true)
!2762 = !DIEnumerator(name: "CODE_FOR_mulqihi3", value: 2064, isUnsigned: true)
!2763 = !DIEnumerator(name: "CODE_FOR_umulqihi3", value: 2065, isUnsigned: true)
!2764 = !DIEnumerator(name: "CODE_FOR_smulsi3_highpart", value: 2066, isUnsigned: true)
!2765 = !DIEnumerator(name: "CODE_FOR_umulsi3_highpart", value: 2067, isUnsigned: true)
!2766 = !DIEnumerator(name: "CODE_FOR_mulxf3", value: 2068, isUnsigned: true)
!2767 = !DIEnumerator(name: "CODE_FOR_mulsf3", value: 2069, isUnsigned: true)
!2768 = !DIEnumerator(name: "CODE_FOR_muldf3", value: 2070, isUnsigned: true)
!2769 = !DIEnumerator(name: "CODE_FOR_divxf3", value: 2071, isUnsigned: true)
!2770 = !DIEnumerator(name: "CODE_FOR_divdf3", value: 2072, isUnsigned: true)
!2771 = !DIEnumerator(name: "CODE_FOR_divsf3", value: 2073, isUnsigned: true)
!2772 = !DIEnumerator(name: "CODE_FOR_divmodhi4", value: 2074, isUnsigned: true)
!2773 = !DIEnumerator(name: "CODE_FOR_divmodsi4", value: 2075, isUnsigned: true)
!2774 = !DIEnumerator(name: "CODE_FOR_udivmodhi4", value: 2078, isUnsigned: true)
!2775 = !DIEnumerator(name: "CODE_FOR_udivmodsi4", value: 2079, isUnsigned: true)
!2776 = !DIEnumerator(name: "CODE_FOR_testsi_ccno_1", value: 2082, isUnsigned: true)
!2777 = !DIEnumerator(name: "CODE_FOR_testqi_ccz_1", value: 2083, isUnsigned: true)
!2778 = !DIEnumerator(name: "CODE_FOR_testqi_ext_ccno_0", value: 2084, isUnsigned: true)
!2779 = !DIEnumerator(name: "CODE_FOR_andqi3", value: 2088, isUnsigned: true)
!2780 = !DIEnumerator(name: "CODE_FOR_andhi3", value: 2089, isUnsigned: true)
!2781 = !DIEnumerator(name: "CODE_FOR_andsi3", value: 2090, isUnsigned: true)
!2782 = !DIEnumerator(name: "CODE_FOR_iorqi3", value: 2096, isUnsigned: true)
!2783 = !DIEnumerator(name: "CODE_FOR_xorqi3", value: 2097, isUnsigned: true)
!2784 = !DIEnumerator(name: "CODE_FOR_iorhi3", value: 2098, isUnsigned: true)
!2785 = !DIEnumerator(name: "CODE_FOR_xorhi3", value: 2099, isUnsigned: true)
!2786 = !DIEnumerator(name: "CODE_FOR_iorsi3", value: 2100, isUnsigned: true)
!2787 = !DIEnumerator(name: "CODE_FOR_xorsi3", value: 2101, isUnsigned: true)
!2788 = !DIEnumerator(name: "CODE_FOR_xorqi_cc_ext_1", value: 2106, isUnsigned: true)
!2789 = !DIEnumerator(name: "CODE_FOR_negqi2", value: 2107, isUnsigned: true)
!2790 = !DIEnumerator(name: "CODE_FOR_neghi2", value: 2108, isUnsigned: true)
!2791 = !DIEnumerator(name: "CODE_FOR_negsi2", value: 2109, isUnsigned: true)
!2792 = !DIEnumerator(name: "CODE_FOR_negdi2", value: 2110, isUnsigned: true)
!2793 = !DIEnumerator(name: "CODE_FOR_abssf2", value: 2112, isUnsigned: true)
!2794 = !DIEnumerator(name: "CODE_FOR_negsf2", value: 2113, isUnsigned: true)
!2795 = !DIEnumerator(name: "CODE_FOR_absdf2", value: 2114, isUnsigned: true)
!2796 = !DIEnumerator(name: "CODE_FOR_negdf2", value: 2115, isUnsigned: true)
!2797 = !DIEnumerator(name: "CODE_FOR_absxf2", value: 2116, isUnsigned: true)
!2798 = !DIEnumerator(name: "CODE_FOR_negxf2", value: 2117, isUnsigned: true)
!2799 = !DIEnumerator(name: "CODE_FOR_abstf2", value: 2118, isUnsigned: true)
!2800 = !DIEnumerator(name: "CODE_FOR_negtf2", value: 2119, isUnsigned: true)
!2801 = !DIEnumerator(name: "CODE_FOR_copysignsf3", value: 2125, isUnsigned: true)
!2802 = !DIEnumerator(name: "CODE_FOR_copysigndf3", value: 2126, isUnsigned: true)
!2803 = !DIEnumerator(name: "CODE_FOR_copysigntf3", value: 2127, isUnsigned: true)
!2804 = !DIEnumerator(name: "CODE_FOR_one_cmplqi2", value: 2134, isUnsigned: true)
!2805 = !DIEnumerator(name: "CODE_FOR_one_cmplhi2", value: 2135, isUnsigned: true)
!2806 = !DIEnumerator(name: "CODE_FOR_one_cmplsi2", value: 2136, isUnsigned: true)
!2807 = !DIEnumerator(name: "CODE_FOR_ashldi3", value: 2142, isUnsigned: true)
!2808 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_1", value: 2145, isUnsigned: true)
!2809 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_2", value: 2146, isUnsigned: true)
!2810 = !DIEnumerator(name: "CODE_FOR_ashlsi3", value: 2147, isUnsigned: true)
!2811 = !DIEnumerator(name: "CODE_FOR_ashlhi3", value: 2150, isUnsigned: true)
!2812 = !DIEnumerator(name: "CODE_FOR_ashlqi3", value: 2151, isUnsigned: true)
!2813 = !DIEnumerator(name: "CODE_FOR_ashrdi3", value: 2152, isUnsigned: true)
!2814 = !DIEnumerator(name: "CODE_FOR_x86_64_shift_adj_3", value: 2153, isUnsigned: true)
!2815 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_3", value: 2156, isUnsigned: true)
!2816 = !DIEnumerator(name: "CODE_FOR_ashrsi3_31", value: 2157, isUnsigned: true)
!2817 = !DIEnumerator(name: "CODE_FOR_ashrsi3", value: 2158, isUnsigned: true)
!2818 = !DIEnumerator(name: "CODE_FOR_ashrhi3", value: 2159, isUnsigned: true)
!2819 = !DIEnumerator(name: "CODE_FOR_ashrqi3", value: 2160, isUnsigned: true)
!2820 = !DIEnumerator(name: "CODE_FOR_lshrdi3", value: 2161, isUnsigned: true)
!2821 = !DIEnumerator(name: "CODE_FOR_lshrsi3", value: 2164, isUnsigned: true)
!2822 = !DIEnumerator(name: "CODE_FOR_lshrhi3", value: 2165, isUnsigned: true)
!2823 = !DIEnumerator(name: "CODE_FOR_lshrqi3", value: 2166, isUnsigned: true)
!2824 = !DIEnumerator(name: "CODE_FOR_rotldi3", value: 2167, isUnsigned: true)
!2825 = !DIEnumerator(name: "CODE_FOR_rotlsi3", value: 2169, isUnsigned: true)
!2826 = !DIEnumerator(name: "CODE_FOR_rotlhi3", value: 2170, isUnsigned: true)
!2827 = !DIEnumerator(name: "CODE_FOR_rotlqi3", value: 2172, isUnsigned: true)
!2828 = !DIEnumerator(name: "CODE_FOR_rotrdi3", value: 2173, isUnsigned: true)
!2829 = !DIEnumerator(name: "CODE_FOR_rotrsi3", value: 2175, isUnsigned: true)
!2830 = !DIEnumerator(name: "CODE_FOR_rotrhi3", value: 2176, isUnsigned: true)
!2831 = !DIEnumerator(name: "CODE_FOR_rotrqi3", value: 2178, isUnsigned: true)
!2832 = !DIEnumerator(name: "CODE_FOR_extv", value: 2179, isUnsigned: true)
!2833 = !DIEnumerator(name: "CODE_FOR_extzv", value: 2180, isUnsigned: true)
!2834 = !DIEnumerator(name: "CODE_FOR_insv", value: 2181, isUnsigned: true)
!2835 = !DIEnumerator(name: "CODE_FOR_indirect_jump", value: 2200, isUnsigned: true)
!2836 = !DIEnumerator(name: "CODE_FOR_tablejump", value: 2201, isUnsigned: true)
!2837 = !DIEnumerator(name: "CODE_FOR_call_pop", value: 2204, isUnsigned: true)
!2838 = !DIEnumerator(name: "CODE_FOR_call", value: 2205, isUnsigned: true)
!2839 = !DIEnumerator(name: "CODE_FOR_sibcall", value: 2206, isUnsigned: true)
!2840 = !DIEnumerator(name: "CODE_FOR_call_value_pop", value: 2207, isUnsigned: true)
!2841 = !DIEnumerator(name: "CODE_FOR_call_value", value: 2208, isUnsigned: true)
!2842 = !DIEnumerator(name: "CODE_FOR_sibcall_value", value: 2209, isUnsigned: true)
!2843 = !DIEnumerator(name: "CODE_FOR_untyped_call", value: 2210, isUnsigned: true)
!2844 = !DIEnumerator(name: "CODE_FOR_memory_blockage", value: 2211, isUnsigned: true)
!2845 = !DIEnumerator(name: "CODE_FOR_return", value: 2212, isUnsigned: true)
!2846 = !DIEnumerator(name: "CODE_FOR_prologue", value: 2213, isUnsigned: true)
!2847 = !DIEnumerator(name: "CODE_FOR_epilogue", value: 2214, isUnsigned: true)
!2848 = !DIEnumerator(name: "CODE_FOR_sibcall_epilogue", value: 2215, isUnsigned: true)
!2849 = !DIEnumerator(name: "CODE_FOR_eh_return", value: 2216, isUnsigned: true)
!2850 = !DIEnumerator(name: "CODE_FOR_ffssi2", value: 2218, isUnsigned: true)
!2851 = !DIEnumerator(name: "CODE_FOR_ffs_cmove", value: 2219, isUnsigned: true)
!2852 = !DIEnumerator(name: "CODE_FOR_clzsi2", value: 2221, isUnsigned: true)
!2853 = !DIEnumerator(name: "CODE_FOR_bswapsi2", value: 2222, isUnsigned: true)
!2854 = !DIEnumerator(name: "CODE_FOR_clzhi2", value: 2223, isUnsigned: true)
!2855 = !DIEnumerator(name: "CODE_FOR_paritydi2", value: 2224, isUnsigned: true)
!2856 = !DIEnumerator(name: "CODE_FOR_paritysi2", value: 2226, isUnsigned: true)
!2857 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_32", value: 2228, isUnsigned: true)
!2858 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_64", value: 2229, isUnsigned: true)
!2859 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_32", value: 2230, isUnsigned: true)
!2860 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_64", value: 2231, isUnsigned: true)
!2861 = !DIEnumerator(name: "CODE_FOR_tls_dynamic_gnu2_32", value: 2233, isUnsigned: true)
!2862 = !DIEnumerator(name: "CODE_FOR_rsqrtsf2", value: 2240, isUnsigned: true)
!2863 = !DIEnumerator(name: "CODE_FOR_sqrtsf2", value: 2241, isUnsigned: true)
!2864 = !DIEnumerator(name: "CODE_FOR_sqrtdf2", value: 2242, isUnsigned: true)
!2865 = !DIEnumerator(name: "CODE_FOR_fmodxf3", value: 2243, isUnsigned: true)
!2866 = !DIEnumerator(name: "CODE_FOR_fmodsf3", value: 2244, isUnsigned: true)
!2867 = !DIEnumerator(name: "CODE_FOR_fmoddf3", value: 2245, isUnsigned: true)
!2868 = !DIEnumerator(name: "CODE_FOR_remainderxf3", value: 2246, isUnsigned: true)
!2869 = !DIEnumerator(name: "CODE_FOR_remaindersf3", value: 2247, isUnsigned: true)
!2870 = !DIEnumerator(name: "CODE_FOR_remainderdf3", value: 2248, isUnsigned: true)
!2871 = !DIEnumerator(name: "CODE_FOR_sincossf3", value: 2255, isUnsigned: true)
!2872 = !DIEnumerator(name: "CODE_FOR_sincosdf3", value: 2256, isUnsigned: true)
!2873 = !DIEnumerator(name: "CODE_FOR_tanxf2", value: 2257, isUnsigned: true)
!2874 = !DIEnumerator(name: "CODE_FOR_tansf2", value: 2258, isUnsigned: true)
!2875 = !DIEnumerator(name: "CODE_FOR_tandf2", value: 2259, isUnsigned: true)
!2876 = !DIEnumerator(name: "CODE_FOR_atan2xf3", value: 2260, isUnsigned: true)
!2877 = !DIEnumerator(name: "CODE_FOR_atan2sf3", value: 2261, isUnsigned: true)
!2878 = !DIEnumerator(name: "CODE_FOR_atan2df3", value: 2262, isUnsigned: true)
!2879 = !DIEnumerator(name: "CODE_FOR_atanxf2", value: 2263, isUnsigned: true)
!2880 = !DIEnumerator(name: "CODE_FOR_atansf2", value: 2264, isUnsigned: true)
!2881 = !DIEnumerator(name: "CODE_FOR_atandf2", value: 2265, isUnsigned: true)
!2882 = !DIEnumerator(name: "CODE_FOR_asinxf2", value: 2266, isUnsigned: true)
!2883 = !DIEnumerator(name: "CODE_FOR_asinsf2", value: 2267, isUnsigned: true)
!2884 = !DIEnumerator(name: "CODE_FOR_asindf2", value: 2268, isUnsigned: true)
!2885 = !DIEnumerator(name: "CODE_FOR_acosxf2", value: 2269, isUnsigned: true)
!2886 = !DIEnumerator(name: "CODE_FOR_acossf2", value: 2270, isUnsigned: true)
!2887 = !DIEnumerator(name: "CODE_FOR_acosdf2", value: 2271, isUnsigned: true)
!2888 = !DIEnumerator(name: "CODE_FOR_logxf2", value: 2272, isUnsigned: true)
!2889 = !DIEnumerator(name: "CODE_FOR_logsf2", value: 2273, isUnsigned: true)
!2890 = !DIEnumerator(name: "CODE_FOR_logdf2", value: 2274, isUnsigned: true)
!2891 = !DIEnumerator(name: "CODE_FOR_log10xf2", value: 2275, isUnsigned: true)
!2892 = !DIEnumerator(name: "CODE_FOR_log10sf2", value: 2276, isUnsigned: true)
!2893 = !DIEnumerator(name: "CODE_FOR_log10df2", value: 2277, isUnsigned: true)
!2894 = !DIEnumerator(name: "CODE_FOR_log2xf2", value: 2278, isUnsigned: true)
!2895 = !DIEnumerator(name: "CODE_FOR_log2sf2", value: 2279, isUnsigned: true)
!2896 = !DIEnumerator(name: "CODE_FOR_log2df2", value: 2280, isUnsigned: true)
!2897 = !DIEnumerator(name: "CODE_FOR_log1pxf2", value: 2281, isUnsigned: true)
!2898 = !DIEnumerator(name: "CODE_FOR_log1psf2", value: 2282, isUnsigned: true)
!2899 = !DIEnumerator(name: "CODE_FOR_log1pdf2", value: 2283, isUnsigned: true)
!2900 = !DIEnumerator(name: "CODE_FOR_logbxf2", value: 2284, isUnsigned: true)
!2901 = !DIEnumerator(name: "CODE_FOR_logbsf2", value: 2285, isUnsigned: true)
!2902 = !DIEnumerator(name: "CODE_FOR_logbdf2", value: 2286, isUnsigned: true)
!2903 = !DIEnumerator(name: "CODE_FOR_ilogbxf2", value: 2287, isUnsigned: true)
!2904 = !DIEnumerator(name: "CODE_FOR_ilogbsf2", value: 2288, isUnsigned: true)
!2905 = !DIEnumerator(name: "CODE_FOR_ilogbdf2", value: 2289, isUnsigned: true)
!2906 = !DIEnumerator(name: "CODE_FOR_expNcorexf3", value: 2290, isUnsigned: true)
!2907 = !DIEnumerator(name: "CODE_FOR_expxf2", value: 2291, isUnsigned: true)
!2908 = !DIEnumerator(name: "CODE_FOR_expsf2", value: 2292, isUnsigned: true)
!2909 = !DIEnumerator(name: "CODE_FOR_expdf2", value: 2293, isUnsigned: true)
!2910 = !DIEnumerator(name: "CODE_FOR_exp10xf2", value: 2294, isUnsigned: true)
!2911 = !DIEnumerator(name: "CODE_FOR_exp10sf2", value: 2295, isUnsigned: true)
!2912 = !DIEnumerator(name: "CODE_FOR_exp10df2", value: 2296, isUnsigned: true)
!2913 = !DIEnumerator(name: "CODE_FOR_exp2xf2", value: 2297, isUnsigned: true)
!2914 = !DIEnumerator(name: "CODE_FOR_exp2sf2", value: 2298, isUnsigned: true)
!2915 = !DIEnumerator(name: "CODE_FOR_exp2df2", value: 2299, isUnsigned: true)
!2916 = !DIEnumerator(name: "CODE_FOR_expm1xf2", value: 2300, isUnsigned: true)
!2917 = !DIEnumerator(name: "CODE_FOR_expm1sf2", value: 2301, isUnsigned: true)
!2918 = !DIEnumerator(name: "CODE_FOR_expm1df2", value: 2302, isUnsigned: true)
!2919 = !DIEnumerator(name: "CODE_FOR_ldexpxf3", value: 2303, isUnsigned: true)
!2920 = !DIEnumerator(name: "CODE_FOR_ldexpsf3", value: 2304, isUnsigned: true)
!2921 = !DIEnumerator(name: "CODE_FOR_ldexpdf3", value: 2305, isUnsigned: true)
!2922 = !DIEnumerator(name: "CODE_FOR_scalbxf3", value: 2306, isUnsigned: true)
!2923 = !DIEnumerator(name: "CODE_FOR_scalbsf3", value: 2307, isUnsigned: true)
!2924 = !DIEnumerator(name: "CODE_FOR_scalbdf3", value: 2308, isUnsigned: true)
!2925 = !DIEnumerator(name: "CODE_FOR_significandxf2", value: 2309, isUnsigned: true)
!2926 = !DIEnumerator(name: "CODE_FOR_significandsf2", value: 2310, isUnsigned: true)
!2927 = !DIEnumerator(name: "CODE_FOR_significanddf2", value: 2311, isUnsigned: true)
!2928 = !DIEnumerator(name: "CODE_FOR_rintsf2", value: 2312, isUnsigned: true)
!2929 = !DIEnumerator(name: "CODE_FOR_rintdf2", value: 2313, isUnsigned: true)
!2930 = !DIEnumerator(name: "CODE_FOR_roundsf2", value: 2314, isUnsigned: true)
!2931 = !DIEnumerator(name: "CODE_FOR_rounddf2", value: 2315, isUnsigned: true)
!2932 = !DIEnumerator(name: "CODE_FOR_lrintxfhi2", value: 2325, isUnsigned: true)
!2933 = !DIEnumerator(name: "CODE_FOR_lrintxfsi2", value: 2326, isUnsigned: true)
!2934 = !DIEnumerator(name: "CODE_FOR_lrintxfdi2", value: 2327, isUnsigned: true)
!2935 = !DIEnumerator(name: "CODE_FOR_lrintsfsi2", value: 2328, isUnsigned: true)
!2936 = !DIEnumerator(name: "CODE_FOR_lrintdfsi2", value: 2329, isUnsigned: true)
!2937 = !DIEnumerator(name: "CODE_FOR_lroundsfsi2", value: 2330, isUnsigned: true)
!2938 = !DIEnumerator(name: "CODE_FOR_lrounddfsi2", value: 2331, isUnsigned: true)
!2939 = !DIEnumerator(name: "CODE_FOR_floorxf2", value: 2333, isUnsigned: true)
!2940 = !DIEnumerator(name: "CODE_FOR_floorsf2", value: 2334, isUnsigned: true)
!2941 = !DIEnumerator(name: "CODE_FOR_floordf2", value: 2335, isUnsigned: true)
!2942 = !DIEnumerator(name: "CODE_FOR_lfloorxfhi2", value: 2345, isUnsigned: true)
!2943 = !DIEnumerator(name: "CODE_FOR_lfloorxfsi2", value: 2346, isUnsigned: true)
!2944 = !DIEnumerator(name: "CODE_FOR_lfloorxfdi2", value: 2347, isUnsigned: true)
!2945 = !DIEnumerator(name: "CODE_FOR_lfloorsfsi2", value: 2348, isUnsigned: true)
!2946 = !DIEnumerator(name: "CODE_FOR_lfloordfsi2", value: 2349, isUnsigned: true)
!2947 = !DIEnumerator(name: "CODE_FOR_ceilxf2", value: 2351, isUnsigned: true)
!2948 = !DIEnumerator(name: "CODE_FOR_ceilsf2", value: 2352, isUnsigned: true)
!2949 = !DIEnumerator(name: "CODE_FOR_ceildf2", value: 2353, isUnsigned: true)
!2950 = !DIEnumerator(name: "CODE_FOR_lceilxfhi2", value: 2363, isUnsigned: true)
!2951 = !DIEnumerator(name: "CODE_FOR_lceilxfsi2", value: 2364, isUnsigned: true)
!2952 = !DIEnumerator(name: "CODE_FOR_lceilxfdi2", value: 2365, isUnsigned: true)
!2953 = !DIEnumerator(name: "CODE_FOR_lceilsfsi2", value: 2366, isUnsigned: true)
!2954 = !DIEnumerator(name: "CODE_FOR_lceildfsi2", value: 2367, isUnsigned: true)
!2955 = !DIEnumerator(name: "CODE_FOR_btruncxf2", value: 2369, isUnsigned: true)
!2956 = !DIEnumerator(name: "CODE_FOR_btruncsf2", value: 2370, isUnsigned: true)
!2957 = !DIEnumerator(name: "CODE_FOR_btruncdf2", value: 2371, isUnsigned: true)
!2958 = !DIEnumerator(name: "CODE_FOR_nearbyintxf2", value: 2373, isUnsigned: true)
!2959 = !DIEnumerator(name: "CODE_FOR_nearbyintsf2", value: 2374, isUnsigned: true)
!2960 = !DIEnumerator(name: "CODE_FOR_nearbyintdf2", value: 2375, isUnsigned: true)
!2961 = !DIEnumerator(name: "CODE_FOR_isinfxf2", value: 2378, isUnsigned: true)
!2962 = !DIEnumerator(name: "CODE_FOR_isinfsf2", value: 2379, isUnsigned: true)
!2963 = !DIEnumerator(name: "CODE_FOR_isinfdf2", value: 2380, isUnsigned: true)
!2964 = !DIEnumerator(name: "CODE_FOR_signbitsf2", value: 2381, isUnsigned: true)
!2965 = !DIEnumerator(name: "CODE_FOR_signbitdf2", value: 2382, isUnsigned: true)
!2966 = !DIEnumerator(name: "CODE_FOR_signbitxf2", value: 2383, isUnsigned: true)
!2967 = !DIEnumerator(name: "CODE_FOR_movmemsi", value: 2384, isUnsigned: true)
!2968 = !DIEnumerator(name: "CODE_FOR_strmov", value: 2385, isUnsigned: true)
!2969 = !DIEnumerator(name: "CODE_FOR_strmov_singleop", value: 2386, isUnsigned: true)
!2970 = !DIEnumerator(name: "CODE_FOR_rep_mov", value: 2387, isUnsigned: true)
!2971 = !DIEnumerator(name: "CODE_FOR_setmemsi", value: 2388, isUnsigned: true)
!2972 = !DIEnumerator(name: "CODE_FOR_strset", value: 2389, isUnsigned: true)
!2973 = !DIEnumerator(name: "CODE_FOR_strset_singleop", value: 2390, isUnsigned: true)
!2974 = !DIEnumerator(name: "CODE_FOR_rep_stos", value: 2391, isUnsigned: true)
!2975 = !DIEnumerator(name: "CODE_FOR_cmpstrnsi", value: 2392, isUnsigned: true)
!2976 = !DIEnumerator(name: "CODE_FOR_cmpintqi", value: 2393, isUnsigned: true)
!2977 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_nz_1", value: 2394, isUnsigned: true)
!2978 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_1", value: 2395, isUnsigned: true)
!2979 = !DIEnumerator(name: "CODE_FOR_strlensi", value: 2396, isUnsigned: true)
!2980 = !DIEnumerator(name: "CODE_FOR_strlendi", value: 2397, isUnsigned: true)
!2981 = !DIEnumerator(name: "CODE_FOR_strlenqi_1", value: 2398, isUnsigned: true)
!2982 = !DIEnumerator(name: "CODE_FOR_movqicc", value: 2401, isUnsigned: true)
!2983 = !DIEnumerator(name: "CODE_FOR_movhicc", value: 2402, isUnsigned: true)
!2984 = !DIEnumerator(name: "CODE_FOR_movsicc", value: 2403, isUnsigned: true)
!2985 = !DIEnumerator(name: "CODE_FOR_x86_movsicc_0_m1", value: 2404, isUnsigned: true)
!2986 = !DIEnumerator(name: "CODE_FOR_movsfcc", value: 2406, isUnsigned: true)
!2987 = !DIEnumerator(name: "CODE_FOR_movdfcc", value: 2407, isUnsigned: true)
!2988 = !DIEnumerator(name: "CODE_FOR_movxfcc", value: 2408, isUnsigned: true)
!2989 = !DIEnumerator(name: "CODE_FOR_addqicc", value: 2411, isUnsigned: true)
!2990 = !DIEnumerator(name: "CODE_FOR_addhicc", value: 2412, isUnsigned: true)
!2991 = !DIEnumerator(name: "CODE_FOR_addsicc", value: 2413, isUnsigned: true)
!2992 = !DIEnumerator(name: "CODE_FOR_allocate_stack", value: 2414, isUnsigned: true)
!2993 = !DIEnumerator(name: "CODE_FOR_probe_stack", value: 2415, isUnsigned: true)
!2994 = !DIEnumerator(name: "CODE_FOR_builtin_setjmp_receiver", value: 2416, isUnsigned: true)
!2995 = !DIEnumerator(name: "CODE_FOR_prefetch", value: 2486, isUnsigned: true)
!2996 = !DIEnumerator(name: "CODE_FOR_stack_protect_set", value: 2487, isUnsigned: true)
!2997 = !DIEnumerator(name: "CODE_FOR_stack_protect_test", value: 2488, isUnsigned: true)
!2998 = !DIEnumerator(name: "CODE_FOR_rdpmc", value: 2489, isUnsigned: true)
!2999 = !DIEnumerator(name: "CODE_FOR_rdtsc", value: 2490, isUnsigned: true)
!3000 = !DIEnumerator(name: "CODE_FOR_rdtscp", value: 2491, isUnsigned: true)
!3001 = !DIEnumerator(name: "CODE_FOR_lwp_llwpcb", value: 2492, isUnsigned: true)
!3002 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcb", value: 2493, isUnsigned: true)
!3003 = !DIEnumerator(name: "CODE_FOR_lwp_lwpvalsi3", value: 2494, isUnsigned: true)
!3004 = !DIEnumerator(name: "CODE_FOR_lwp_lwpinssi3", value: 2495, isUnsigned: true)
!3005 = !DIEnumerator(name: "CODE_FOR_movv8qi", value: 2496, isUnsigned: true)
!3006 = !DIEnumerator(name: "CODE_FOR_movv4hi", value: 2497, isUnsigned: true)
!3007 = !DIEnumerator(name: "CODE_FOR_movv2si", value: 2498, isUnsigned: true)
!3008 = !DIEnumerator(name: "CODE_FOR_movv1di", value: 2499, isUnsigned: true)
!3009 = !DIEnumerator(name: "CODE_FOR_movv2sf", value: 2500, isUnsigned: true)
!3010 = !DIEnumerator(name: "CODE_FOR_pushv8qi1", value: 2506, isUnsigned: true)
!3011 = !DIEnumerator(name: "CODE_FOR_pushv4hi1", value: 2507, isUnsigned: true)
!3012 = !DIEnumerator(name: "CODE_FOR_pushv2si1", value: 2508, isUnsigned: true)
!3013 = !DIEnumerator(name: "CODE_FOR_pushv1di1", value: 2509, isUnsigned: true)
!3014 = !DIEnumerator(name: "CODE_FOR_pushv2sf1", value: 2510, isUnsigned: true)
!3015 = !DIEnumerator(name: "CODE_FOR_movmisalignv8qi", value: 2511, isUnsigned: true)
!3016 = !DIEnumerator(name: "CODE_FOR_movmisalignv4hi", value: 2512, isUnsigned: true)
!3017 = !DIEnumerator(name: "CODE_FOR_movmisalignv2si", value: 2513, isUnsigned: true)
!3018 = !DIEnumerator(name: "CODE_FOR_movmisalignv1di", value: 2514, isUnsigned: true)
!3019 = !DIEnumerator(name: "CODE_FOR_movmisalignv2sf", value: 2515, isUnsigned: true)
!3020 = !DIEnumerator(name: "CODE_FOR_mmx_addv2sf3", value: 2516, isUnsigned: true)
!3021 = !DIEnumerator(name: "CODE_FOR_mmx_subv2sf3", value: 2517, isUnsigned: true)
!3022 = !DIEnumerator(name: "CODE_FOR_mmx_subrv2sf3", value: 2518, isUnsigned: true)
!3023 = !DIEnumerator(name: "CODE_FOR_mmx_mulv2sf3", value: 2519, isUnsigned: true)
!3024 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv2sf3", value: 2520, isUnsigned: true)
!3025 = !DIEnumerator(name: "CODE_FOR_mmx_sminv2sf3", value: 2521, isUnsigned: true)
!3026 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2sf3", value: 2522, isUnsigned: true)
!3027 = !DIEnumerator(name: "CODE_FOR_vec_setv2sf", value: 2523, isUnsigned: true)
!3028 = !DIEnumerator(name: "CODE_FOR_vec_extractv2sf", value: 2526, isUnsigned: true)
!3029 = !DIEnumerator(name: "CODE_FOR_vec_initv2sf", value: 2527, isUnsigned: true)
!3030 = !DIEnumerator(name: "CODE_FOR_mmx_addv8qi3", value: 2528, isUnsigned: true)
!3031 = !DIEnumerator(name: "CODE_FOR_mmx_subv8qi3", value: 2529, isUnsigned: true)
!3032 = !DIEnumerator(name: "CODE_FOR_mmx_addv4hi3", value: 2530, isUnsigned: true)
!3033 = !DIEnumerator(name: "CODE_FOR_mmx_subv4hi3", value: 2531, isUnsigned: true)
!3034 = !DIEnumerator(name: "CODE_FOR_mmx_addv2si3", value: 2532, isUnsigned: true)
!3035 = !DIEnumerator(name: "CODE_FOR_mmx_subv2si3", value: 2533, isUnsigned: true)
!3036 = !DIEnumerator(name: "CODE_FOR_mmx_addv1di3", value: 2534, isUnsigned: true)
!3037 = !DIEnumerator(name: "CODE_FOR_mmx_subv1di3", value: 2535, isUnsigned: true)
!3038 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv8qi3", value: 2536, isUnsigned: true)
!3039 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv8qi3", value: 2537, isUnsigned: true)
!3040 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv8qi3", value: 2538, isUnsigned: true)
!3041 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv8qi3", value: 2539, isUnsigned: true)
!3042 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv4hi3", value: 2540, isUnsigned: true)
!3043 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv4hi3", value: 2541, isUnsigned: true)
!3044 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv4hi3", value: 2542, isUnsigned: true)
!3045 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv4hi3", value: 2543, isUnsigned: true)
!3046 = !DIEnumerator(name: "CODE_FOR_mmx_mulv4hi3", value: 2544, isUnsigned: true)
!3047 = !DIEnumerator(name: "CODE_FOR_mmx_smulv4hi3_highpart", value: 2545, isUnsigned: true)
!3048 = !DIEnumerator(name: "CODE_FOR_mmx_umulv4hi3_highpart", value: 2546, isUnsigned: true)
!3049 = !DIEnumerator(name: "CODE_FOR_mmx_pmaddwd", value: 2547, isUnsigned: true)
!3050 = !DIEnumerator(name: "CODE_FOR_mmx_pmulhrwv4hi3", value: 2548, isUnsigned: true)
!3051 = !DIEnumerator(name: "CODE_FOR_sse2_umulv1siv1di3", value: 2549, isUnsigned: true)
!3052 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv4hi3", value: 2550, isUnsigned: true)
!3053 = !DIEnumerator(name: "CODE_FOR_mmx_sminv4hi3", value: 2551, isUnsigned: true)
!3054 = !DIEnumerator(name: "CODE_FOR_mmx_umaxv8qi3", value: 2552, isUnsigned: true)
!3055 = !DIEnumerator(name: "CODE_FOR_mmx_uminv8qi3", value: 2553, isUnsigned: true)
!3056 = !DIEnumerator(name: "CODE_FOR_mmx_eqv8qi3", value: 2554, isUnsigned: true)
!3057 = !DIEnumerator(name: "CODE_FOR_mmx_eqv4hi3", value: 2555, isUnsigned: true)
!3058 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2si3", value: 2556, isUnsigned: true)
!3059 = !DIEnumerator(name: "CODE_FOR_mmx_andv8qi3", value: 2557, isUnsigned: true)
!3060 = !DIEnumerator(name: "CODE_FOR_mmx_iorv8qi3", value: 2558, isUnsigned: true)
!3061 = !DIEnumerator(name: "CODE_FOR_mmx_xorv8qi3", value: 2559, isUnsigned: true)
!3062 = !DIEnumerator(name: "CODE_FOR_mmx_andv4hi3", value: 2560, isUnsigned: true)
!3063 = !DIEnumerator(name: "CODE_FOR_mmx_iorv4hi3", value: 2561, isUnsigned: true)
!3064 = !DIEnumerator(name: "CODE_FOR_mmx_xorv4hi3", value: 2562, isUnsigned: true)
!3065 = !DIEnumerator(name: "CODE_FOR_mmx_andv2si3", value: 2563, isUnsigned: true)
!3066 = !DIEnumerator(name: "CODE_FOR_mmx_iorv2si3", value: 2564, isUnsigned: true)
!3067 = !DIEnumerator(name: "CODE_FOR_mmx_xorv2si3", value: 2565, isUnsigned: true)
!3068 = !DIEnumerator(name: "CODE_FOR_mmx_pinsrw", value: 2566, isUnsigned: true)
!3069 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw", value: 2567, isUnsigned: true)
!3070 = !DIEnumerator(name: "CODE_FOR_vec_setv2si", value: 2568, isUnsigned: true)
!3071 = !DIEnumerator(name: "CODE_FOR_vec_extractv2si", value: 2571, isUnsigned: true)
!3072 = !DIEnumerator(name: "CODE_FOR_vec_initv2si", value: 2572, isUnsigned: true)
!3073 = !DIEnumerator(name: "CODE_FOR_vec_setv4hi", value: 2573, isUnsigned: true)
!3074 = !DIEnumerator(name: "CODE_FOR_vec_extractv4hi", value: 2574, isUnsigned: true)
!3075 = !DIEnumerator(name: "CODE_FOR_vec_initv4hi", value: 2575, isUnsigned: true)
!3076 = !DIEnumerator(name: "CODE_FOR_vec_setv8qi", value: 2576, isUnsigned: true)
!3077 = !DIEnumerator(name: "CODE_FOR_vec_extractv8qi", value: 2577, isUnsigned: true)
!3078 = !DIEnumerator(name: "CODE_FOR_vec_initv8qi", value: 2578, isUnsigned: true)
!3079 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv8qi3", value: 2579, isUnsigned: true)
!3080 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv4hi3", value: 2580, isUnsigned: true)
!3081 = !DIEnumerator(name: "CODE_FOR_mmx_maskmovq", value: 2581, isUnsigned: true)
!3082 = !DIEnumerator(name: "CODE_FOR_mmx_emms", value: 2582, isUnsigned: true)
!3083 = !DIEnumerator(name: "CODE_FOR_mmx_femms", value: 2583, isUnsigned: true)
!3084 = !DIEnumerator(name: "CODE_FOR_movv32qi", value: 2584, isUnsigned: true)
!3085 = !DIEnumerator(name: "CODE_FOR_movv16hi", value: 2585, isUnsigned: true)
!3086 = !DIEnumerator(name: "CODE_FOR_movv8si", value: 2586, isUnsigned: true)
!3087 = !DIEnumerator(name: "CODE_FOR_movv4di", value: 2587, isUnsigned: true)
!3088 = !DIEnumerator(name: "CODE_FOR_movv8sf", value: 2588, isUnsigned: true)
!3089 = !DIEnumerator(name: "CODE_FOR_movv4df", value: 2589, isUnsigned: true)
!3090 = !DIEnumerator(name: "CODE_FOR_movv16qi", value: 2590, isUnsigned: true)
!3091 = !DIEnumerator(name: "CODE_FOR_movv8hi", value: 2591, isUnsigned: true)
!3092 = !DIEnumerator(name: "CODE_FOR_movv4si", value: 2592, isUnsigned: true)
!3093 = !DIEnumerator(name: "CODE_FOR_movv2di", value: 2593, isUnsigned: true)
!3094 = !DIEnumerator(name: "CODE_FOR_movv1ti", value: 2594, isUnsigned: true)
!3095 = !DIEnumerator(name: "CODE_FOR_movv4sf", value: 2595, isUnsigned: true)
!3096 = !DIEnumerator(name: "CODE_FOR_movv2df", value: 2596, isUnsigned: true)
!3097 = !DIEnumerator(name: "CODE_FOR_pushv32qi1", value: 2600, isUnsigned: true)
!3098 = !DIEnumerator(name: "CODE_FOR_pushv16hi1", value: 2601, isUnsigned: true)
!3099 = !DIEnumerator(name: "CODE_FOR_pushv8si1", value: 2602, isUnsigned: true)
!3100 = !DIEnumerator(name: "CODE_FOR_pushv4di1", value: 2603, isUnsigned: true)
!3101 = !DIEnumerator(name: "CODE_FOR_pushv8sf1", value: 2604, isUnsigned: true)
!3102 = !DIEnumerator(name: "CODE_FOR_pushv4df1", value: 2605, isUnsigned: true)
!3103 = !DIEnumerator(name: "CODE_FOR_pushv16qi1", value: 2606, isUnsigned: true)
!3104 = !DIEnumerator(name: "CODE_FOR_pushv8hi1", value: 2607, isUnsigned: true)
!3105 = !DIEnumerator(name: "CODE_FOR_pushv4si1", value: 2608, isUnsigned: true)
!3106 = !DIEnumerator(name: "CODE_FOR_pushv2di1", value: 2609, isUnsigned: true)
!3107 = !DIEnumerator(name: "CODE_FOR_pushv1ti1", value: 2610, isUnsigned: true)
!3108 = !DIEnumerator(name: "CODE_FOR_pushv4sf1", value: 2611, isUnsigned: true)
!3109 = !DIEnumerator(name: "CODE_FOR_pushv2df1", value: 2612, isUnsigned: true)
!3110 = !DIEnumerator(name: "CODE_FOR_movmisalignv32qi", value: 2613, isUnsigned: true)
!3111 = !DIEnumerator(name: "CODE_FOR_movmisalignv16hi", value: 2614, isUnsigned: true)
!3112 = !DIEnumerator(name: "CODE_FOR_movmisalignv8si", value: 2615, isUnsigned: true)
!3113 = !DIEnumerator(name: "CODE_FOR_movmisalignv4di", value: 2616, isUnsigned: true)
!3114 = !DIEnumerator(name: "CODE_FOR_movmisalignv8sf", value: 2617, isUnsigned: true)
!3115 = !DIEnumerator(name: "CODE_FOR_movmisalignv4df", value: 2618, isUnsigned: true)
!3116 = !DIEnumerator(name: "CODE_FOR_movmisalignv16qi", value: 2619, isUnsigned: true)
!3117 = !DIEnumerator(name: "CODE_FOR_movmisalignv8hi", value: 2620, isUnsigned: true)
!3118 = !DIEnumerator(name: "CODE_FOR_movmisalignv4si", value: 2621, isUnsigned: true)
!3119 = !DIEnumerator(name: "CODE_FOR_movmisalignv2di", value: 2622, isUnsigned: true)
!3120 = !DIEnumerator(name: "CODE_FOR_movmisalignv1ti", value: 2623, isUnsigned: true)
!3121 = !DIEnumerator(name: "CODE_FOR_movmisalignv4sf", value: 2624, isUnsigned: true)
!3122 = !DIEnumerator(name: "CODE_FOR_movmisalignv2df", value: 2625, isUnsigned: true)
!3123 = !DIEnumerator(name: "CODE_FOR_storentv4sf", value: 2626, isUnsigned: true)
!3124 = !DIEnumerator(name: "CODE_FOR_storentv2df", value: 2627, isUnsigned: true)
!3125 = !DIEnumerator(name: "CODE_FOR_storentsf", value: 2628, isUnsigned: true)
!3126 = !DIEnumerator(name: "CODE_FOR_storentdf", value: 2629, isUnsigned: true)
!3127 = !DIEnumerator(name: "CODE_FOR_storentv2di", value: 2630, isUnsigned: true)
!3128 = !DIEnumerator(name: "CODE_FOR_storentsi", value: 2631, isUnsigned: true)
!3129 = !DIEnumerator(name: "CODE_FOR_absv4sf2", value: 2632, isUnsigned: true)
!3130 = !DIEnumerator(name: "CODE_FOR_negv4sf2", value: 2633, isUnsigned: true)
!3131 = !DIEnumerator(name: "CODE_FOR_absv2df2", value: 2634, isUnsigned: true)
!3132 = !DIEnumerator(name: "CODE_FOR_negv2df2", value: 2635, isUnsigned: true)
!3133 = !DIEnumerator(name: "CODE_FOR_addv8sf3", value: 2636, isUnsigned: true)
!3134 = !DIEnumerator(name: "CODE_FOR_subv8sf3", value: 2637, isUnsigned: true)
!3135 = !DIEnumerator(name: "CODE_FOR_addv4df3", value: 2638, isUnsigned: true)
!3136 = !DIEnumerator(name: "CODE_FOR_subv4df3", value: 2639, isUnsigned: true)
!3137 = !DIEnumerator(name: "CODE_FOR_addv4sf3", value: 2640, isUnsigned: true)
!3138 = !DIEnumerator(name: "CODE_FOR_subv4sf3", value: 2641, isUnsigned: true)
!3139 = !DIEnumerator(name: "CODE_FOR_addv2df3", value: 2642, isUnsigned: true)
!3140 = !DIEnumerator(name: "CODE_FOR_subv2df3", value: 2643, isUnsigned: true)
!3141 = !DIEnumerator(name: "CODE_FOR_mulv8sf3", value: 2644, isUnsigned: true)
!3142 = !DIEnumerator(name: "CODE_FOR_mulv4df3", value: 2645, isUnsigned: true)
!3143 = !DIEnumerator(name: "CODE_FOR_mulv4sf3", value: 2646, isUnsigned: true)
!3144 = !DIEnumerator(name: "CODE_FOR_mulv2df3", value: 2647, isUnsigned: true)
!3145 = !DIEnumerator(name: "CODE_FOR_divv8sf3", value: 2648, isUnsigned: true)
!3146 = !DIEnumerator(name: "CODE_FOR_divv4df3", value: 2649, isUnsigned: true)
!3147 = !DIEnumerator(name: "CODE_FOR_divv4sf3", value: 2650, isUnsigned: true)
!3148 = !DIEnumerator(name: "CODE_FOR_divv2df3", value: 2651, isUnsigned: true)
!3149 = !DIEnumerator(name: "CODE_FOR_sqrtv8sf2", value: 2652, isUnsigned: true)
!3150 = !DIEnumerator(name: "CODE_FOR_sqrtv4sf2", value: 2653, isUnsigned: true)
!3151 = !DIEnumerator(name: "CODE_FOR_rsqrtv8sf2", value: 2654, isUnsigned: true)
!3152 = !DIEnumerator(name: "CODE_FOR_rsqrtv4sf2", value: 2655, isUnsigned: true)
!3153 = !DIEnumerator(name: "CODE_FOR_smaxv8sf3", value: 2656, isUnsigned: true)
!3154 = !DIEnumerator(name: "CODE_FOR_sminv8sf3", value: 2657, isUnsigned: true)
!3155 = !DIEnumerator(name: "CODE_FOR_smaxv4df3", value: 2658, isUnsigned: true)
!3156 = !DIEnumerator(name: "CODE_FOR_sminv4df3", value: 2659, isUnsigned: true)
!3157 = !DIEnumerator(name: "CODE_FOR_smaxv4sf3", value: 2660, isUnsigned: true)
!3158 = !DIEnumerator(name: "CODE_FOR_sminv4sf3", value: 2661, isUnsigned: true)
!3159 = !DIEnumerator(name: "CODE_FOR_smaxv2df3", value: 2662, isUnsigned: true)
!3160 = !DIEnumerator(name: "CODE_FOR_sminv2df3", value: 2663, isUnsigned: true)
!3161 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v4sf", value: 2664, isUnsigned: true)
!3162 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v2df", value: 2665, isUnsigned: true)
!3163 = !DIEnumerator(name: "CODE_FOR_reduc_smax_v4sf", value: 2666, isUnsigned: true)
!3164 = !DIEnumerator(name: "CODE_FOR_reduc_smin_v4sf", value: 2667, isUnsigned: true)
!3165 = !DIEnumerator(name: "CODE_FOR_vcondv4sf", value: 2668, isUnsigned: true)
!3166 = !DIEnumerator(name: "CODE_FOR_vcondv2df", value: 2669, isUnsigned: true)
!3167 = !DIEnumerator(name: "CODE_FOR_andv8sf3", value: 2670, isUnsigned: true)
!3168 = !DIEnumerator(name: "CODE_FOR_iorv8sf3", value: 2671, isUnsigned: true)
!3169 = !DIEnumerator(name: "CODE_FOR_xorv8sf3", value: 2672, isUnsigned: true)
!3170 = !DIEnumerator(name: "CODE_FOR_andv4df3", value: 2673, isUnsigned: true)
!3171 = !DIEnumerator(name: "CODE_FOR_iorv4df3", value: 2674, isUnsigned: true)
!3172 = !DIEnumerator(name: "CODE_FOR_xorv4df3", value: 2675, isUnsigned: true)
!3173 = !DIEnumerator(name: "CODE_FOR_andv4sf3", value: 2676, isUnsigned: true)
!3174 = !DIEnumerator(name: "CODE_FOR_iorv4sf3", value: 2677, isUnsigned: true)
!3175 = !DIEnumerator(name: "CODE_FOR_xorv4sf3", value: 2678, isUnsigned: true)
!3176 = !DIEnumerator(name: "CODE_FOR_andv2df3", value: 2679, isUnsigned: true)
!3177 = !DIEnumerator(name: "CODE_FOR_iorv2df3", value: 2680, isUnsigned: true)
!3178 = !DIEnumerator(name: "CODE_FOR_xorv2df3", value: 2681, isUnsigned: true)
!3179 = !DIEnumerator(name: "CODE_FOR_copysignv4sf3", value: 2682, isUnsigned: true)
!3180 = !DIEnumerator(name: "CODE_FOR_copysignv2df3", value: 2683, isUnsigned: true)
!3181 = !DIEnumerator(name: "CODE_FOR_sse2_cvtudq2ps", value: 2684, isUnsigned: true)
!3182 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2dq", value: 2685, isUnsigned: true)
!3183 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2dq", value: 2686, isUnsigned: true)
!3184 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2ps", value: 2687, isUnsigned: true)
!3185 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4sf", value: 2688, isUnsigned: true)
!3186 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4sf", value: 2689, isUnsigned: true)
!3187 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v8hi", value: 2690, isUnsigned: true)
!3188 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v8hi", value: 2691, isUnsigned: true)
!3189 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v8hi", value: 2692, isUnsigned: true)
!3190 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v8hi", value: 2693, isUnsigned: true)
!3191 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v4si", value: 2694, isUnsigned: true)
!3192 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v4si", value: 2695, isUnsigned: true)
!3193 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v4si", value: 2696, isUnsigned: true)
!3194 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v4si", value: 2697, isUnsigned: true)
!3195 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2df", value: 2698, isUnsigned: true)
!3196 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_trunc_v2df", value: 2699, isUnsigned: true)
!3197 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_v2df", value: 2700, isUnsigned: true)
!3198 = !DIEnumerator(name: "CODE_FOR_sse_movhlps_exp", value: 2701, isUnsigned: true)
!3199 = !DIEnumerator(name: "CODE_FOR_sse_movlhps_exp", value: 2702, isUnsigned: true)
!3200 = !DIEnumerator(name: "CODE_FOR_avx_shufps256", value: 2703, isUnsigned: true)
!3201 = !DIEnumerator(name: "CODE_FOR_sse_shufps", value: 2704, isUnsigned: true)
!3202 = !DIEnumerator(name: "CODE_FOR_sse_loadhps_exp", value: 2705, isUnsigned: true)
!3203 = !DIEnumerator(name: "CODE_FOR_sse_loadlps_exp", value: 2706, isUnsigned: true)
!3204 = !DIEnumerator(name: "CODE_FOR_vec_dupv4sf", value: 2707, isUnsigned: true)
!3205 = !DIEnumerator(name: "CODE_FOR_vec_initv16qi", value: 2708, isUnsigned: true)
!3206 = !DIEnumerator(name: "CODE_FOR_vec_initv8hi", value: 2709, isUnsigned: true)
!3207 = !DIEnumerator(name: "CODE_FOR_vec_initv4si", value: 2710, isUnsigned: true)
!3208 = !DIEnumerator(name: "CODE_FOR_vec_initv2di", value: 2711, isUnsigned: true)
!3209 = !DIEnumerator(name: "CODE_FOR_vec_initv4sf", value: 2712, isUnsigned: true)
!3210 = !DIEnumerator(name: "CODE_FOR_vec_initv2df", value: 2713, isUnsigned: true)
!3211 = !DIEnumerator(name: "CODE_FOR_vec_setv16qi", value: 2715, isUnsigned: true)
!3212 = !DIEnumerator(name: "CODE_FOR_vec_setv8hi", value: 2716, isUnsigned: true)
!3213 = !DIEnumerator(name: "CODE_FOR_vec_setv4si", value: 2717, isUnsigned: true)
!3214 = !DIEnumerator(name: "CODE_FOR_vec_setv2di", value: 2718, isUnsigned: true)
!3215 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf", value: 2719, isUnsigned: true)
!3216 = !DIEnumerator(name: "CODE_FOR_vec_setv2df", value: 2720, isUnsigned: true)
!3217 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v32qi", value: 2722, isUnsigned: true)
!3218 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v16hi", value: 2723, isUnsigned: true)
!3219 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8si", value: 2724, isUnsigned: true)
!3220 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4di", value: 2725, isUnsigned: true)
!3221 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8sf", value: 2726, isUnsigned: true)
!3222 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4df", value: 2727, isUnsigned: true)
!3223 = !DIEnumerator(name: "CODE_FOR_vec_extractv16qi", value: 2729, isUnsigned: true)
!3224 = !DIEnumerator(name: "CODE_FOR_vec_extractv8hi", value: 2730, isUnsigned: true)
!3225 = !DIEnumerator(name: "CODE_FOR_vec_extractv4si", value: 2731, isUnsigned: true)
!3226 = !DIEnumerator(name: "CODE_FOR_vec_extractv2di", value: 2732, isUnsigned: true)
!3227 = !DIEnumerator(name: "CODE_FOR_vec_extractv4sf", value: 2733, isUnsigned: true)
!3228 = !DIEnumerator(name: "CODE_FOR_vec_extractv2df", value: 2734, isUnsigned: true)
!3229 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2df", value: 2735, isUnsigned: true)
!3230 = !DIEnumerator(name: "CODE_FOR_avx_movddup256", value: 2736, isUnsigned: true)
!3231 = !DIEnumerator(name: "CODE_FOR_avx_unpcklpd256", value: 2737, isUnsigned: true)
!3232 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2df", value: 2738, isUnsigned: true)
!3233 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256", value: 2741, isUnsigned: true)
!3234 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd", value: 2742, isUnsigned: true)
!3235 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4sf", value: 2743, isUnsigned: true)
!3236 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2df", value: 2744, isUnsigned: true)
!3237 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2di", value: 2745, isUnsigned: true)
!3238 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4si", value: 2746, isUnsigned: true)
!3239 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8hi", value: 2747, isUnsigned: true)
!3240 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv16qi", value: 2748, isUnsigned: true)
!3241 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4df", value: 2749, isUnsigned: true)
!3242 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8sf", value: 2750, isUnsigned: true)
!3243 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4sf", value: 2751, isUnsigned: true)
!3244 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2df", value: 2752, isUnsigned: true)
!3245 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2di", value: 2753, isUnsigned: true)
!3246 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4si", value: 2754, isUnsigned: true)
!3247 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8hi", value: 2755, isUnsigned: true)
!3248 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv16qi", value: 2756, isUnsigned: true)
!3249 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4df", value: 2757, isUnsigned: true)
!3250 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8sf", value: 2758, isUnsigned: true)
!3251 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd_exp", value: 2761, isUnsigned: true)
!3252 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd_exp", value: 2763, isUnsigned: true)
!3253 = !DIEnumerator(name: "CODE_FOR_negv16qi2", value: 2765, isUnsigned: true)
!3254 = !DIEnumerator(name: "CODE_FOR_negv8hi2", value: 2766, isUnsigned: true)
!3255 = !DIEnumerator(name: "CODE_FOR_negv4si2", value: 2767, isUnsigned: true)
!3256 = !DIEnumerator(name: "CODE_FOR_negv2di2", value: 2768, isUnsigned: true)
!3257 = !DIEnumerator(name: "CODE_FOR_addv16qi3", value: 2769, isUnsigned: true)
!3258 = !DIEnumerator(name: "CODE_FOR_subv16qi3", value: 2770, isUnsigned: true)
!3259 = !DIEnumerator(name: "CODE_FOR_addv8hi3", value: 2771, isUnsigned: true)
!3260 = !DIEnumerator(name: "CODE_FOR_subv8hi3", value: 2772, isUnsigned: true)
!3261 = !DIEnumerator(name: "CODE_FOR_addv4si3", value: 2773, isUnsigned: true)
!3262 = !DIEnumerator(name: "CODE_FOR_subv4si3", value: 2774, isUnsigned: true)
!3263 = !DIEnumerator(name: "CODE_FOR_addv2di3", value: 2775, isUnsigned: true)
!3264 = !DIEnumerator(name: "CODE_FOR_subv2di3", value: 2776, isUnsigned: true)
!3265 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv16qi3", value: 2777, isUnsigned: true)
!3266 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv16qi3", value: 2778, isUnsigned: true)
!3267 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv16qi3", value: 2779, isUnsigned: true)
!3268 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv16qi3", value: 2780, isUnsigned: true)
!3269 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv8hi3", value: 2781, isUnsigned: true)
!3270 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv8hi3", value: 2782, isUnsigned: true)
!3271 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv8hi3", value: 2783, isUnsigned: true)
!3272 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv8hi3", value: 2784, isUnsigned: true)
!3273 = !DIEnumerator(name: "CODE_FOR_mulv8hi3", value: 2786, isUnsigned: true)
!3274 = !DIEnumerator(name: "CODE_FOR_smulv8hi3_highpart", value: 2787, isUnsigned: true)
!3275 = !DIEnumerator(name: "CODE_FOR_umulv8hi3_highpart", value: 2788, isUnsigned: true)
!3276 = !DIEnumerator(name: "CODE_FOR_sse2_umulv2siv2di3", value: 2789, isUnsigned: true)
!3277 = !DIEnumerator(name: "CODE_FOR_sse4_1_mulv2siv2di3", value: 2790, isUnsigned: true)
!3278 = !DIEnumerator(name: "CODE_FOR_sse2_pmaddwd", value: 2791, isUnsigned: true)
!3279 = !DIEnumerator(name: "CODE_FOR_mulv4si3", value: 2792, isUnsigned: true)
!3280 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v8hi", value: 2795, isUnsigned: true)
!3281 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v8hi", value: 2796, isUnsigned: true)
!3282 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v8hi", value: 2797, isUnsigned: true)
!3283 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v8hi", value: 2798, isUnsigned: true)
!3284 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v4si", value: 2799, isUnsigned: true)
!3285 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v4si", value: 2800, isUnsigned: true)
!3286 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v4si", value: 2801, isUnsigned: true)
!3287 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v4si", value: 2802, isUnsigned: true)
!3288 = !DIEnumerator(name: "CODE_FOR_sdot_prodv8hi", value: 2803, isUnsigned: true)
!3289 = !DIEnumerator(name: "CODE_FOR_udot_prodv4si", value: 2804, isUnsigned: true)
!3290 = !DIEnumerator(name: "CODE_FOR_vec_shl_v16qi", value: 2805, isUnsigned: true)
!3291 = !DIEnumerator(name: "CODE_FOR_vec_shl_v8hi", value: 2806, isUnsigned: true)
!3292 = !DIEnumerator(name: "CODE_FOR_vec_shl_v4si", value: 2807, isUnsigned: true)
!3293 = !DIEnumerator(name: "CODE_FOR_vec_shl_v2di", value: 2808, isUnsigned: true)
!3294 = !DIEnumerator(name: "CODE_FOR_vec_shr_v16qi", value: 2809, isUnsigned: true)
!3295 = !DIEnumerator(name: "CODE_FOR_vec_shr_v8hi", value: 2810, isUnsigned: true)
!3296 = !DIEnumerator(name: "CODE_FOR_vec_shr_v4si", value: 2811, isUnsigned: true)
!3297 = !DIEnumerator(name: "CODE_FOR_vec_shr_v2di", value: 2812, isUnsigned: true)
!3298 = !DIEnumerator(name: "CODE_FOR_umaxv16qi3", value: 2813, isUnsigned: true)
!3299 = !DIEnumerator(name: "CODE_FOR_uminv16qi3", value: 2814, isUnsigned: true)
!3300 = !DIEnumerator(name: "CODE_FOR_smaxv8hi3", value: 2815, isUnsigned: true)
!3301 = !DIEnumerator(name: "CODE_FOR_sminv8hi3", value: 2816, isUnsigned: true)
!3302 = !DIEnumerator(name: "CODE_FOR_umaxv8hi3", value: 2817, isUnsigned: true)
!3303 = !DIEnumerator(name: "CODE_FOR_smaxv16qi3", value: 2818, isUnsigned: true)
!3304 = !DIEnumerator(name: "CODE_FOR_smaxv4si3", value: 2819, isUnsigned: true)
!3305 = !DIEnumerator(name: "CODE_FOR_smaxv2di3", value: 2820, isUnsigned: true)
!3306 = !DIEnumerator(name: "CODE_FOR_umaxv4si3", value: 2821, isUnsigned: true)
!3307 = !DIEnumerator(name: "CODE_FOR_umaxv2di3", value: 2822, isUnsigned: true)
!3308 = !DIEnumerator(name: "CODE_FOR_sminv16qi3", value: 2823, isUnsigned: true)
!3309 = !DIEnumerator(name: "CODE_FOR_sminv4si3", value: 2824, isUnsigned: true)
!3310 = !DIEnumerator(name: "CODE_FOR_sminv2di3", value: 2825, isUnsigned: true)
!3311 = !DIEnumerator(name: "CODE_FOR_uminv8hi3", value: 2826, isUnsigned: true)
!3312 = !DIEnumerator(name: "CODE_FOR_uminv4si3", value: 2827, isUnsigned: true)
!3313 = !DIEnumerator(name: "CODE_FOR_uminv2di3", value: 2828, isUnsigned: true)
!3314 = !DIEnumerator(name: "CODE_FOR_sse2_eqv16qi3", value: 2829, isUnsigned: true)
!3315 = !DIEnumerator(name: "CODE_FOR_sse2_eqv8hi3", value: 2830, isUnsigned: true)
!3316 = !DIEnumerator(name: "CODE_FOR_sse2_eqv4si3", value: 2831, isUnsigned: true)
!3317 = !DIEnumerator(name: "CODE_FOR_sse4_1_eqv2di3", value: 2832, isUnsigned: true)
!3318 = !DIEnumerator(name: "CODE_FOR_vcondv16qi", value: 2833, isUnsigned: true)
!3319 = !DIEnumerator(name: "CODE_FOR_vcondv8hi", value: 2834, isUnsigned: true)
!3320 = !DIEnumerator(name: "CODE_FOR_vcondv4si", value: 2835, isUnsigned: true)
!3321 = !DIEnumerator(name: "CODE_FOR_vcondv2di", value: 2836, isUnsigned: true)
!3322 = !DIEnumerator(name: "CODE_FOR_vconduv16qi", value: 2837, isUnsigned: true)
!3323 = !DIEnumerator(name: "CODE_FOR_vconduv8hi", value: 2838, isUnsigned: true)
!3324 = !DIEnumerator(name: "CODE_FOR_vconduv4si", value: 2839, isUnsigned: true)
!3325 = !DIEnumerator(name: "CODE_FOR_vconduv2di", value: 2840, isUnsigned: true)
!3326 = !DIEnumerator(name: "CODE_FOR_one_cmplv16qi2", value: 2841, isUnsigned: true)
!3327 = !DIEnumerator(name: "CODE_FOR_one_cmplv8hi2", value: 2842, isUnsigned: true)
!3328 = !DIEnumerator(name: "CODE_FOR_one_cmplv4si2", value: 2843, isUnsigned: true)
!3329 = !DIEnumerator(name: "CODE_FOR_one_cmplv2di2", value: 2844, isUnsigned: true)
!3330 = !DIEnumerator(name: "CODE_FOR_andv16qi3", value: 2845, isUnsigned: true)
!3331 = !DIEnumerator(name: "CODE_FOR_iorv16qi3", value: 2846, isUnsigned: true)
!3332 = !DIEnumerator(name: "CODE_FOR_xorv16qi3", value: 2847, isUnsigned: true)
!3333 = !DIEnumerator(name: "CODE_FOR_andv8hi3", value: 2848, isUnsigned: true)
!3334 = !DIEnumerator(name: "CODE_FOR_iorv8hi3", value: 2849, isUnsigned: true)
!3335 = !DIEnumerator(name: "CODE_FOR_xorv8hi3", value: 2850, isUnsigned: true)
!3336 = !DIEnumerator(name: "CODE_FOR_andv4si3", value: 2851, isUnsigned: true)
!3337 = !DIEnumerator(name: "CODE_FOR_iorv4si3", value: 2852, isUnsigned: true)
!3338 = !DIEnumerator(name: "CODE_FOR_xorv4si3", value: 2853, isUnsigned: true)
!3339 = !DIEnumerator(name: "CODE_FOR_andv2di3", value: 2854, isUnsigned: true)
!3340 = !DIEnumerator(name: "CODE_FOR_iorv2di3", value: 2855, isUnsigned: true)
!3341 = !DIEnumerator(name: "CODE_FOR_xorv2di3", value: 2856, isUnsigned: true)
!3342 = !DIEnumerator(name: "CODE_FOR_andtf3", value: 2857, isUnsigned: true)
!3343 = !DIEnumerator(name: "CODE_FOR_iortf3", value: 2858, isUnsigned: true)
!3344 = !DIEnumerator(name: "CODE_FOR_xortf3", value: 2859, isUnsigned: true)
!3345 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v8hi", value: 2860, isUnsigned: true)
!3346 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v4si", value: 2861, isUnsigned: true)
!3347 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2di", value: 2862, isUnsigned: true)
!3348 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd", value: 2863, isUnsigned: true)
!3349 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw", value: 2864, isUnsigned: true)
!3350 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw", value: 2865, isUnsigned: true)
!3351 = !DIEnumerator(name: "CODE_FOR_sse2_loadd", value: 2866, isUnsigned: true)
!3352 = !DIEnumerator(name: "CODE_FOR_sse_storeq", value: 2869, isUnsigned: true)
!3353 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v16qi", value: 2871, isUnsigned: true)
!3354 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v16qi", value: 2872, isUnsigned: true)
!3355 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v16qi", value: 2873, isUnsigned: true)
!3356 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v16qi", value: 2874, isUnsigned: true)
!3357 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v8hi", value: 2875, isUnsigned: true)
!3358 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v8hi", value: 2876, isUnsigned: true)
!3359 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v8hi", value: 2877, isUnsigned: true)
!3360 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v8hi", value: 2878, isUnsigned: true)
!3361 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v4si", value: 2879, isUnsigned: true)
!3362 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4si", value: 2880, isUnsigned: true)
!3363 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v4si", value: 2881, isUnsigned: true)
!3364 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4si", value: 2882, isUnsigned: true)
!3365 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv16qi3", value: 2883, isUnsigned: true)
!3366 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv8hi3", value: 2884, isUnsigned: true)
!3367 = !DIEnumerator(name: "CODE_FOR_sse2_maskmovdqu", value: 2885, isUnsigned: true)
!3368 = !DIEnumerator(name: "CODE_FOR_sse_sfence", value: 2886, isUnsigned: true)
!3369 = !DIEnumerator(name: "CODE_FOR_sse2_mfence", value: 2887, isUnsigned: true)
!3370 = !DIEnumerator(name: "CODE_FOR_sse2_lfence", value: 2888, isUnsigned: true)
!3371 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv8hi3", value: 2889, isUnsigned: true)
!3372 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv4hi3", value: 2890, isUnsigned: true)
!3373 = !DIEnumerator(name: "CODE_FOR_rotlv16qi3", value: 2895, isUnsigned: true)
!3374 = !DIEnumerator(name: "CODE_FOR_rotlv8hi3", value: 2896, isUnsigned: true)
!3375 = !DIEnumerator(name: "CODE_FOR_rotlv4si3", value: 2897, isUnsigned: true)
!3376 = !DIEnumerator(name: "CODE_FOR_rotlv2di3", value: 2898, isUnsigned: true)
!3377 = !DIEnumerator(name: "CODE_FOR_rotrv16qi3", value: 2899, isUnsigned: true)
!3378 = !DIEnumerator(name: "CODE_FOR_rotrv8hi3", value: 2900, isUnsigned: true)
!3379 = !DIEnumerator(name: "CODE_FOR_rotrv4si3", value: 2901, isUnsigned: true)
!3380 = !DIEnumerator(name: "CODE_FOR_rotrv2di3", value: 2902, isUnsigned: true)
!3381 = !DIEnumerator(name: "CODE_FOR_vrotrv16qi3", value: 2903, isUnsigned: true)
!3382 = !DIEnumerator(name: "CODE_FOR_vrotrv8hi3", value: 2904, isUnsigned: true)
!3383 = !DIEnumerator(name: "CODE_FOR_vrotrv4si3", value: 2905, isUnsigned: true)
!3384 = !DIEnumerator(name: "CODE_FOR_vrotrv2di3", value: 2906, isUnsigned: true)
!3385 = !DIEnumerator(name: "CODE_FOR_vrotlv16qi3", value: 2907, isUnsigned: true)
!3386 = !DIEnumerator(name: "CODE_FOR_vrotlv8hi3", value: 2908, isUnsigned: true)
!3387 = !DIEnumerator(name: "CODE_FOR_vrotlv4si3", value: 2909, isUnsigned: true)
!3388 = !DIEnumerator(name: "CODE_FOR_vrotlv2di3", value: 2910, isUnsigned: true)
!3389 = !DIEnumerator(name: "CODE_FOR_vlshrv16qi3", value: 2911, isUnsigned: true)
!3390 = !DIEnumerator(name: "CODE_FOR_vlshrv8hi3", value: 2912, isUnsigned: true)
!3391 = !DIEnumerator(name: "CODE_FOR_vlshrv4si3", value: 2913, isUnsigned: true)
!3392 = !DIEnumerator(name: "CODE_FOR_vashrv16qi3", value: 2914, isUnsigned: true)
!3393 = !DIEnumerator(name: "CODE_FOR_vashrv8hi3", value: 2915, isUnsigned: true)
!3394 = !DIEnumerator(name: "CODE_FOR_vashrv4si3", value: 2916, isUnsigned: true)
!3395 = !DIEnumerator(name: "CODE_FOR_vashlv16qi3", value: 2917, isUnsigned: true)
!3396 = !DIEnumerator(name: "CODE_FOR_vashlv8hi3", value: 2918, isUnsigned: true)
!3397 = !DIEnumerator(name: "CODE_FOR_vashlv4si3", value: 2919, isUnsigned: true)
!3398 = !DIEnumerator(name: "CODE_FOR_ashlv16qi3", value: 2920, isUnsigned: true)
!3399 = !DIEnumerator(name: "CODE_FOR_lshlv16qi3", value: 2921, isUnsigned: true)
!3400 = !DIEnumerator(name: "CODE_FOR_ashrv16qi3", value: 2922, isUnsigned: true)
!3401 = !DIEnumerator(name: "CODE_FOR_ashrv2di3", value: 2923, isUnsigned: true)
!3402 = !DIEnumerator(name: "CODE_FOR_avx_vzeroall", value: 2924, isUnsigned: true)
!3403 = !DIEnumerator(name: "CODE_FOR_avx_vzeroupper", value: 2925, isUnsigned: true)
!3404 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv2df", value: 2932, isUnsigned: true)
!3405 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4df", value: 2933, isUnsigned: true)
!3406 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4sf", value: 2934, isUnsigned: true)
!3407 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv8sf", value: 2935, isUnsigned: true)
!3408 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8si3", value: 2936, isUnsigned: true)
!3409 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8sf3", value: 2937, isUnsigned: true)
!3410 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v4df3", value: 2938, isUnsigned: true)
!3411 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v32qi", value: 2939, isUnsigned: true)
!3412 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v16hi", value: 2940, isUnsigned: true)
!3413 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8si", value: 2941, isUnsigned: true)
!3414 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4di", value: 2942, isUnsigned: true)
!3415 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8sf", value: 2943, isUnsigned: true)
!3416 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4df", value: 2944, isUnsigned: true)
!3417 = !DIEnumerator(name: "CODE_FOR_vec_initv32qi", value: 2945, isUnsigned: true)
!3418 = !DIEnumerator(name: "CODE_FOR_vec_initv16hi", value: 2946, isUnsigned: true)
!3419 = !DIEnumerator(name: "CODE_FOR_vec_initv8si", value: 2947, isUnsigned: true)
!3420 = !DIEnumerator(name: "CODE_FOR_vec_initv4di", value: 2948, isUnsigned: true)
!3421 = !DIEnumerator(name: "CODE_FOR_vec_initv8sf", value: 2949, isUnsigned: true)
!3422 = !DIEnumerator(name: "CODE_FOR_vec_initv4df", value: 2950, isUnsigned: true)
!3423 = !DIEnumerator(name: "CODE_FOR_memory_barrier", value: 2951, isUnsigned: true)
!3424 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapqi", value: 2952, isUnsigned: true)
!3425 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swaphi", value: 2953, isUnsigned: true)
!3426 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapsi", value: 2954, isUnsigned: true)
!3427 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapdi", value: 2955, isUnsigned: true)
!3428 = !DIEnumerator(name: "CODE_FOR_nothing", value: 2956, isUnsigned: true)
!3429 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !3430, line: 36, baseType: !17, size: 32, elements: !3431)
!3430 = !DIFile(filename: "./machmode.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!3431 = !{!3432, !3433, !3434, !3435, !3436, !3437, !3438, !3439, !3440, !3441, !3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450}
!3432 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!3433 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!3434 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!3435 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!3436 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!3437 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!3438 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!3439 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!3440 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!3441 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!3442 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!3443 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!3444 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!3445 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!3446 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!3447 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!3448 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!3449 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!3450 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!3451 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !11, line: 727, baseType: !17, size: 32, elements: !3452)
!3452 = !{!3453, !3454, !3455, !3456, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471, !3472, !3473, !3474, !3475, !3476}
!3453 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!3454 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!3455 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!3456 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!3457 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!3458 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!3459 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!3460 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!3461 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!3462 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!3463 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!3464 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!3465 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!3466 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!3467 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!3468 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!3469 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!3470 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!3471 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!3472 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!3473 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!3474 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!3475 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!3476 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!3477 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !11, line: 51, baseType: !17, size: 32, elements: !3478)
!3478 = !{!3479, !3480, !3481, !3482, !3483, !3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3492, !3493, !3494, !3495, !3496, !3497, !3498, !3499, !3500, !3501, !3502, !3503, !3504, !3505, !3506, !3507, !3508, !3509, !3510, !3511, !3512, !3513, !3514}
!3479 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!3480 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!3481 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!3482 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!3483 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!3484 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!3485 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!3486 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!3487 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!3488 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!3489 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!3490 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!3491 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!3492 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!3493 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!3494 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!3495 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!3496 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!3497 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!3498 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!3499 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!3500 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!3501 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!3502 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!3503 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!3504 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!3505 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!3506 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!3507 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!3508 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!3509 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!3510 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!3511 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!3512 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!3513 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!3514 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!3515 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_rhs_class", file: !11, line: 80, baseType: !17, size: 32, elements: !3516)
!3516 = !{!3517, !3518, !3519, !3520}
!3517 = !DIEnumerator(name: "GIMPLE_INVALID_RHS", value: 0, isUnsigned: true)
!3518 = !DIEnumerator(name: "GIMPLE_BINARY_RHS", value: 1, isUnsigned: true)
!3519 = !DIEnumerator(name: "GIMPLE_UNARY_RHS", value: 2, isUnsigned: true)
!3520 = !DIEnumerator(name: "GIMPLE_SINGLE_RHS", value: 3, isUnsigned: true)
!3521 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ssa_op_iter_type", file: !732, line: 119, baseType: !17, size: 32, elements: !3522)
!3522 = !{!3523, !3524, !3525, !3526}
!3523 = !DIEnumerator(name: "ssa_op_iter_none", value: 0, isUnsigned: true)
!3524 = !DIEnumerator(name: "ssa_op_iter_tree", value: 1, isUnsigned: true)
!3525 = !DIEnumerator(name: "ssa_op_iter_use", value: 2, isUnsigned: true)
!3526 = !DIEnumerator(name: "ssa_op_iter_def", value: 3, isUnsigned: true)
!3527 = !{!1753, !6, !100, !3528, !316, !103, !30, !326, !278, !1752, !7, !3529, !3547, !3535, !17, !3560, !3574, !1115, !3429, !9, !3587, !749, !301, !3589, !3590, !3602, !3603, !3606, !3746, !3747, !3648, !3759, !3515, !3551}
!3528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !301, size: 64)
!3529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3530, size: 64)
!3530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_slp_tree", file: !1757, line: 95, size: 384, elements: !3531)
!3531 = !{!3532, !3533, !3534, !3540, !3541, !3542}
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "left", scope: !3530, file: !1757, line: 99, baseType: !3529, size: 64)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "right", scope: !3530, file: !1757, line: 100, baseType: !3529, size: 64, offset: 64)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "stmts", scope: !3530, file: !1757, line: 102, baseType: !3535, size: 64, offset: 128)
!3535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3536, size: 64)
!3536 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_heap", file: !11, line: 34, baseType: !3537)
!3537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_heap", file: !11, line: 34, size: 128, elements: !3538)
!3538 = !{!3539}
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3537, file: !11, line: 34, baseType: !688, size: 128)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "vec_stmts", scope: !3530, file: !1757, line: 104, baseType: !3535, size: 64, offset: 192)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "vec_stmts_size", scope: !3530, file: !1757, line: 109, baseType: !17, size: 32, offset: 256)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3530, file: !1757, line: 115, baseType: !3543, size: 64, offset: 288)
!3543 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3530, file: !1757, line: 111, size: 64, elements: !3544)
!3544 = !{!3545, !3546}
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !3543, file: !1757, line: 113, baseType: !100, size: 32)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !3543, file: !1757, line: 114, baseType: !100, size: 32, offset: 32)
!3547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3548, size: 64)
!3548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_slp_instance", file: !1757, line: 123, size: 384, elements: !3549)
!3549 = !{!3550, !3552, !3553, !3554, !3559, !3573, !3586}
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !3548, file: !1757, line: 125, baseType: !3551, size: 64)
!3551 = !DIDerivedType(tag: DW_TAG_typedef, name: "slp_tree", file: !1757, line: 116, baseType: !3529)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "group_size", scope: !3548, file: !1757, line: 128, baseType: !17, size: 32, offset: 64)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "unrolling_factor", scope: !3548, file: !1757, line: 131, baseType: !17, size: 32, offset: 96)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3548, file: !1757, line: 138, baseType: !3555, size: 64, offset: 128)
!3555 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3548, file: !1757, line: 134, size: 64, elements: !3556)
!3556 = !{!3557, !3558}
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !3555, file: !1757, line: 136, baseType: !100, size: 32)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !3555, file: !1757, line: 137, baseType: !100, size: 32, offset: 32)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "load_permutation", scope: !3548, file: !1757, line: 142, baseType: !3560, size: 64, offset: 192)
!3560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3561, size: 64)
!3561 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !3562, line: 32, baseType: !3563)
!3562 = !DIFile(filename: "./vecprim.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!3563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !3562, line: 32, size: 96, elements: !3564)
!3564 = !{!3565}
!3565 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3563, file: !3562, line: 32, baseType: !3566, size: 96)
!3566 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !3562, line: 31, baseType: !3567)
!3567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !3562, line: 31, size: 96, elements: !3568)
!3568 = !{!3569, !3570, !3571}
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3567, file: !3562, line: 31, baseType: !17, size: 32)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3567, file: !3562, line: 31, baseType: !17, size: 32, offset: 32)
!3571 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3567, file: !3562, line: 31, baseType: !3572, size: 32, offset: 64)
!3572 = !DICompositeType(tag: DW_TAG_array_type, baseType: !100, size: 32, elements: !115)
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "loads", scope: !3548, file: !1757, line: 145, baseType: !3574, size: 64, offset: 256)
!3574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3575, size: 64)
!3575 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_tree_heap", file: !1757, line: 119, baseType: !3576)
!3576 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_tree_heap", file: !1757, line: 119, size: 128, elements: !3577)
!3577 = !{!3578}
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3576, file: !1757, line: 119, baseType: !3579, size: 128)
!3579 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_tree_base", file: !1757, line: 118, baseType: !3580)
!3580 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_tree_base", file: !1757, line: 118, size: 128, elements: !3581)
!3581 = !{!3582, !3583, !3584}
!3582 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3580, file: !1757, line: 118, baseType: !17, size: 32)
!3583 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3580, file: !1757, line: 118, baseType: !17, size: 32, offset: 32)
!3584 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3580, file: !1757, line: 118, baseType: !3585, size: 64, offset: 64)
!3585 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3551, size: 64, elements: !115)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "first_load", scope: !3548, file: !1757, line: 149, baseType: !7, size: 64, offset: 320)
!3587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3588, size: 64)
!3588 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !10)
!3589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3551, size: 64)
!3590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3591, size: 64)
!3591 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_instance_heap", file: !1757, line: 153, baseType: !3592)
!3592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_instance_heap", file: !1757, line: 153, size: 128, elements: !3593)
!3593 = !{!3594}
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3592, file: !1757, line: 153, baseType: !3595, size: 128)
!3595 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_slp_instance_base", file: !1757, line: 152, baseType: !3596)
!3596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_slp_instance_base", file: !1757, line: 152, size: 128, elements: !3597)
!3597 = !{!3598, !3599, !3600}
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3596, file: !1757, line: 152, baseType: !17, size: 32)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3596, file: !1757, line: 152, baseType: !17, size: 32, offset: 32)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3596, file: !1757, line: 152, baseType: !3601, size: 64, offset: 64)
!3601 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3602, size: 64, elements: !115)
!3602 = !DIDerivedType(tag: DW_TAG_typedef, name: "slp_instance", file: !1757, line: 150, baseType: !3547)
!3603 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_operand_p", file: !732, line: 30, baseType: !3604)
!3604 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3605, size: 64)
!3605 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_use_operand_t", file: !329, line: 1893, baseType: !756)
!3606 = !DIDerivedType(tag: DW_TAG_typedef, name: "bb_vec_info", file: !1757, line: 319, baseType: !3607)
!3607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3608, size: 64)
!3608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_bb_vec_info", file: !1757, line: 303, size: 320, elements: !3609)
!3609 = !{!3610, !3611, !3612, !3613, !3685}
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3608, file: !1757, line: 305, baseType: !589, size: 64)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "strided_stores", scope: !3608, file: !1757, line: 308, baseType: !3535, size: 64, offset: 64)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "slp_instances", scope: !3608, file: !1757, line: 312, baseType: !3590, size: 64, offset: 128)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "datarefs", scope: !3608, file: !1757, line: 315, baseType: !3614, size: 64, offset: 192)
!3614 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3615, size: 64)
!3615 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_heap", file: !3616, line: 209, baseType: !3617)
!3616 = !DIFile(filename: "./tree-data-ref.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!3617 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_heap", file: !3616, line: 209, size: 128, elements: !3618)
!3618 = !{!3619}
!3619 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3617, file: !3616, line: 209, baseType: !3620, size: 128)
!3620 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_data_reference_p_base", file: !3616, line: 208, baseType: !3621)
!3621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_data_reference_p_base", file: !3616, line: 208, size: 128, elements: !3622)
!3622 = !{!3623, !3624, !3625}
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3621, file: !3616, line: 208, baseType: !17, size: 32)
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3621, file: !3616, line: 208, baseType: !17, size: 32, offset: 32)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3621, file: !3616, line: 208, baseType: !3626, size: 64, offset: 64)
!3626 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3627, size: 64, elements: !115)
!3627 = !DIDerivedType(tag: DW_TAG_typedef, name: "data_reference_p", file: !3616, line: 207, baseType: !3628)
!3628 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3629, size: 64)
!3629 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_reference", file: !3616, line: 165, size: 896, elements: !3630)
!3630 = !{!3631, !3632, !3633, !3634, !3635, !3643, !3653, !3658}
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3629, file: !3616, line: 168, baseType: !7, size: 64)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !3629, file: !3616, line: 171, baseType: !326, size: 64, offset: 64)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3629, file: !3616, line: 174, baseType: !316, size: 64, offset: 128)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "is_read", scope: !3629, file: !3616, line: 177, baseType: !6, size: 8, offset: 192)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "innermost", scope: !3629, file: !3616, line: 180, baseType: !3636, size: 320, offset: 256)
!3636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "innermost_loop_behavior", file: !3616, line: 51, size: 320, elements: !3637)
!3637 = !{!3638, !3639, !3640, !3641, !3642}
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "base_address", scope: !3636, file: !3616, line: 53, baseType: !326, size: 64)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3636, file: !3616, line: 54, baseType: !326, size: 64, offset: 64)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !3636, file: !3616, line: 55, baseType: !326, size: 64, offset: 128)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "step", scope: !3636, file: !3616, line: 56, baseType: !326, size: 64, offset: 192)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "aligned_to", scope: !3636, file: !3616, line: 60, baseType: !326, size: 64, offset: 256)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "indices", scope: !3629, file: !3616, line: 183, baseType: !3644, size: 128, offset: 576)
!3644 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "indices", file: !3616, line: 78, size: 128, elements: !3645)
!3645 = !{!3646, !3647}
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "base_object", scope: !3644, file: !3616, line: 81, baseType: !326, size: 64)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "access_fns", scope: !3644, file: !3616, line: 84, baseType: !3648, size: 64, offset: 64)
!3648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3649, size: 64)
!3649 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_heap", file: !329, line: 184, baseType: !3650)
!3650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_heap", file: !329, line: 184, size: 128, elements: !3651)
!3651 = !{!3652}
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3650, file: !329, line: 184, baseType: !701, size: 128)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3629, file: !3616, line: 186, baseType: !3654, size: 128, offset: 704)
!3654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dr_alias", file: !3616, line: 87, size: 128, elements: !3655)
!3655 = !{!3656, !3657}
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3654, file: !3616, line: 91, baseType: !1001, size: 64)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "vops", scope: !3654, file: !3616, line: 96, baseType: !720, size: 64, offset: 64)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "access_matrix", scope: !3629, file: !3616, line: 189, baseType: !3659, size: 64, offset: 832)
!3659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3660, size: 64)
!3660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "access_matrix", file: !3616, line: 127, size: 256, elements: !3661)
!3661 = !{!3662, !3668, !3669, !3670}
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3660, file: !3616, line: 129, baseType: !3663, size: 64)
!3663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3664, size: 64)
!3664 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !770, line: 86, baseType: !3665)
!3665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !770, line: 86, size: 128, elements: !3666)
!3666 = !{!3667}
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3665, file: !770, line: 86, baseType: !779, size: 128)
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "nb_induction_vars", scope: !3660, file: !3616, line: 130, baseType: !100, size: 32, offset: 64)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !3660, file: !3616, line: 131, baseType: !3648, size: 64, offset: 128)
!3670 = !DIDerivedType(tag: DW_TAG_member, name: "matrix", scope: !3660, file: !3616, line: 132, baseType: !3671, size: 64, offset: 192)
!3671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3672, size: 64)
!3672 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_gc", file: !3673, line: 34, baseType: !3674)
!3673 = !DIFile(filename: "./lambda.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!3674 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_gc", file: !3673, line: 34, size: 128, elements: !3675)
!3675 = !{!3676}
!3676 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3674, file: !3673, line: 34, baseType: !3677, size: 128)
!3677 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_base", file: !3673, line: 32, baseType: !3678)
!3678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_base", file: !3673, line: 32, size: 128, elements: !3679)
!3679 = !{!3680, !3681, !3682}
!3680 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3678, file: !3673, line: 32, baseType: !17, size: 32)
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3678, file: !3673, line: 32, baseType: !17, size: 32, offset: 32)
!3682 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3678, file: !3673, line: 32, baseType: !3683, size: 64, offset: 64)
!3683 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3684, size: 64, elements: !115)
!3684 = !DIDerivedType(tag: DW_TAG_typedef, name: "lambda_vector", file: !3673, line: 31, baseType: !1752)
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "ddrs", scope: !3608, file: !1757, line: 318, baseType: !3686, size: 64, offset: 256)
!3686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3687, size: 64)
!3687 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_heap", file: !3616, line: 333, baseType: !3688)
!3688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_heap", file: !3616, line: 333, size: 128, elements: !3689)
!3689 = !{!3690}
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3688, file: !3616, line: 333, baseType: !3691, size: 128)
!3691 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_ddr_p_base", file: !3616, line: 332, baseType: !3692)
!3692 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_ddr_p_base", file: !3616, line: 332, size: 128, elements: !3693)
!3693 = !{!3694, !3695, !3696}
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3692, file: !3616, line: 332, baseType: !17, size: 32)
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3692, file: !3616, line: 332, baseType: !17, size: 32, offset: 32)
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3692, file: !3616, line: 332, baseType: !3697, size: 64, offset: 64)
!3697 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3698, size: 64, elements: !115)
!3698 = !DIDerivedType(tag: DW_TAG_typedef, name: "ddr_p", file: !3616, line: 331, baseType: !3699)
!3699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3700, size: 64)
!3700 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "data_dependence_relation", file: !3616, line: 282, size: 512, elements: !3701)
!3701 = !{!3702, !3703, !3704, !3705, !3734, !3735, !3741, !3742, !3743, !3744, !3745}
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3700, file: !3616, line: 285, baseType: !3628, size: 64)
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !3700, file: !3616, line: 286, baseType: !3628, size: 64, offset: 64)
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "are_dependent", scope: !3700, file: !3616, line: 299, baseType: !326, size: 64, offset: 128)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "subscripts", scope: !3700, file: !3616, line: 304, baseType: !3706, size: 64, offset: 192)
!3706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3707, size: 64)
!3707 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_heap", file: !3616, line: 272, baseType: !3708)
!3708 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_heap", file: !3616, line: 272, size: 128, elements: !3709)
!3709 = !{!3710}
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3708, file: !3616, line: 272, baseType: !3711, size: 128)
!3711 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_subscript_p_base", file: !3616, line: 271, baseType: !3712)
!3712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_subscript_p_base", file: !3616, line: 271, size: 128, elements: !3713)
!3713 = !{!3714, !3715, !3716}
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3712, file: !3616, line: 271, baseType: !17, size: 32)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3712, file: !3616, line: 271, baseType: !17, size: 32, offset: 32)
!3716 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3712, file: !3616, line: 271, baseType: !3717, size: 64, offset: 64)
!3717 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3718, size: 64, elements: !115)
!3718 = !DIDerivedType(tag: DW_TAG_typedef, name: "subscript_p", file: !3616, line: 270, baseType: !3719)
!3719 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3720, size: 64)
!3720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "subscript", file: !3616, line: 252, size: 256, elements: !3721)
!3721 = !{!3722, !3731, !3732, !3733}
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_a", scope: !3720, file: !3616, line: 256, baseType: !3723, size: 64)
!3723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3724, size: 64)
!3724 = !DIDerivedType(tag: DW_TAG_typedef, name: "conflict_function", file: !3616, line: 243, baseType: !3725)
!3725 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3616, line: 239, size: 192, elements: !3726)
!3726 = !{!3727, !3728}
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !3725, file: !3616, line: 241, baseType: !17, size: 32)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "fns", scope: !3725, file: !3616, line: 242, baseType: !3729, size: 128, offset: 64)
!3729 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3730, size: 128, elements: !279)
!3730 = !DIDerivedType(tag: DW_TAG_typedef, name: "affine_fn", file: !3616, line: 237, baseType: !3648)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "conflicting_iterations_in_b", scope: !3720, file: !3616, line: 257, baseType: !3723, size: 64, offset: 64)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "last_conflict", scope: !3720, file: !3616, line: 261, baseType: !326, size: 64, offset: 128)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "distance", scope: !3720, file: !3616, line: 267, baseType: !326, size: 64, offset: 192)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "loop_nest", scope: !3700, file: !3616, line: 307, baseType: !3663, size: 64, offset: 256)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "dir_vects", scope: !3700, file: !3616, line: 310, baseType: !3736, size: 64, offset: 320)
!3736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3737, size: 64)
!3737 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_lambda_vector_heap", file: !3673, line: 33, baseType: !3738)
!3738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_lambda_vector_heap", file: !3673, line: 33, size: 128, elements: !3739)
!3739 = !{!3740}
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3738, file: !3673, line: 33, baseType: !3677, size: 128)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "dist_vects", scope: !3700, file: !3616, line: 313, baseType: !3736, size: 64, offset: 384)
!3742 = !DIDerivedType(tag: DW_TAG_member, name: "inner_loop", scope: !3700, file: !3616, line: 317, baseType: !17, size: 32, offset: 448)
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "reversed_p", scope: !3700, file: !3616, line: 320, baseType: !6, size: 8, offset: 480)
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "affine_p", scope: !3700, file: !3616, line: 324, baseType: !6, size: 8, offset: 488)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "self_reference_p", scope: !3700, file: !3616, line: 328, baseType: !6, size: 8, offset: 496)
!3746 = !DIDerivedType(tag: DW_TAG_typedef, name: "vec_void_p", file: !1757, line: 613, baseType: !316)
!3747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3748, size: 64)
!3748 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vec_void_p_heap", file: !1757, line: 615, baseType: !3749)
!3749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vec_void_p_heap", file: !1757, line: 615, size: 128, elements: !3750)
!3750 = !{!3751}
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3749, file: !1757, line: 615, baseType: !3752, size: 128)
!3752 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_vec_void_p_base", file: !1757, line: 614, baseType: !3753)
!3753 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_vec_void_p_base", file: !1757, line: 614, size: 128, elements: !3754)
!3754 = !{!3755, !3756, !3757}
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3753, file: !1757, line: 614, baseType: !17, size: 32)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3753, file: !1757, line: 614, baseType: !17, size: 32, offset: 32)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3753, file: !1757, line: 614, baseType: !3758, size: 64, offset: 64)
!3758 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3746, size: 64, elements: !115)
!3759 = !DIDerivedType(tag: DW_TAG_typedef, name: "stmt_vec_info", file: !1757, line: 496, baseType: !3760)
!3760 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3761, size: 64)
!3761 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_stmt_vec_info", file: !1757, line: 401, size: 1536, elements: !3762)
!3762 = !{!3763, !3764, !3765, !3790, !3791, !3792, !3793, !3794, !3795, !3796, !3797, !3798, !3799, !3800, !3801, !3802, !3816, !3817, !3818, !3819, !3820, !3821, !3822, !3823, !3824, !3829, !3830}
!3763 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3761, file: !1757, line: 403, baseType: !1756, size: 32)
!3764 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3761, file: !1757, line: 406, baseType: !7, size: 64, offset: 64)
!3765 = !DIDerivedType(tag: DW_TAG_member, name: "loop_vinfo", scope: !3761, file: !1757, line: 409, baseType: !3766, size: 64, offset: 128)
!3766 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_vec_info", file: !1757, line: 245, baseType: !3767)
!3767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3768, size: 64)
!3768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_loop_vec_info", file: !1757, line: 176, size: 1024, elements: !3769)
!3769 = !{!3770, !3771, !3773, !3774, !3775, !3776, !3777, !3778, !3779, !3780, !3781, !3782, !3783, !3784, !3785, !3787, !3788, !3789}
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "loop", scope: !3768, file: !1757, line: 179, baseType: !787, size: 64)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "bbs", scope: !3768, file: !1757, line: 182, baseType: !3772, size: 64, offset: 64)
!3772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !589, size: 64)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "num_iters", scope: !3768, file: !1757, line: 185, baseType: !326, size: 64, offset: 128)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "num_iters_unchanged", scope: !3768, file: !1757, line: 186, baseType: !326, size: 64, offset: 192)
!3775 = !DIDerivedType(tag: DW_TAG_member, name: "min_profitable_iters", scope: !3768, file: !1757, line: 193, baseType: !100, size: 32, offset: 256)
!3776 = !DIDerivedType(tag: DW_TAG_member, name: "vectorizable", scope: !3768, file: !1757, line: 196, baseType: !6, size: 8, offset: 288)
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "vectorization_factor", scope: !3768, file: !1757, line: 199, baseType: !100, size: 32, offset: 320)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "unaligned_dr", scope: !3768, file: !1757, line: 202, baseType: !3628, size: 64, offset: 384)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "peeling_for_alignment", scope: !3768, file: !1757, line: 212, baseType: !100, size: 32, offset: 448)
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_mask", scope: !3768, file: !1757, line: 215, baseType: !100, size: 32, offset: 480)
!3781 = !DIDerivedType(tag: DW_TAG_member, name: "datarefs", scope: !3768, file: !1757, line: 218, baseType: !3614, size: 64, offset: 512)
!3782 = !DIDerivedType(tag: DW_TAG_member, name: "ddrs", scope: !3768, file: !1757, line: 221, baseType: !3686, size: 64, offset: 576)
!3783 = !DIDerivedType(tag: DW_TAG_member, name: "may_alias_ddrs", scope: !3768, file: !1757, line: 225, baseType: !3686, size: 64, offset: 640)
!3784 = !DIDerivedType(tag: DW_TAG_member, name: "may_misalign_stmts", scope: !3768, file: !1757, line: 229, baseType: !3535, size: 64, offset: 704)
!3785 = !DIDerivedType(tag: DW_TAG_member, name: "loop_line_number", scope: !3768, file: !1757, line: 232, baseType: !3786, size: 32, offset: 768)
!3786 = !DIDerivedType(tag: DW_TAG_typedef, name: "LOC", file: !1757, line: 27, baseType: !30)
!3787 = !DIDerivedType(tag: DW_TAG_member, name: "strided_stores", scope: !3768, file: !1757, line: 236, baseType: !3535, size: 64, offset: 832)
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "slp_instances", scope: !3768, file: !1757, line: 240, baseType: !3590, size: 64, offset: 896)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "slp_unrolling_factor", scope: !3768, file: !1757, line: 244, baseType: !17, size: 32, offset: 960)
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "relevant", scope: !3761, file: !1757, line: 414, baseType: !1772, size: 32, offset: 192)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "live", scope: !3761, file: !1757, line: 418, baseType: !6, size: 8, offset: 224)
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "vectype", scope: !3761, file: !1757, line: 421, baseType: !326, size: 64, offset: 256)
!3793 = !DIDerivedType(tag: DW_TAG_member, name: "vectorized_stmt", scope: !3761, file: !1757, line: 424, baseType: !7, size: 64, offset: 320)
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "data_ref_info", scope: !3761, file: !1757, line: 433, baseType: !3628, size: 64, offset: 384)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "dr_base_address", scope: !3761, file: !1757, line: 437, baseType: !326, size: 64, offset: 448)
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "dr_init", scope: !3761, file: !1757, line: 438, baseType: !326, size: 64, offset: 512)
!3797 = !DIDerivedType(tag: DW_TAG_member, name: "dr_offset", scope: !3761, file: !1757, line: 439, baseType: !326, size: 64, offset: 576)
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "dr_step", scope: !3761, file: !1757, line: 440, baseType: !326, size: 64, offset: 640)
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "dr_aligned_to", scope: !3761, file: !1757, line: 441, baseType: !326, size: 64, offset: 704)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "in_pattern_p", scope: !3761, file: !1757, line: 444, baseType: !6, size: 8, offset: 768)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "related_stmt", scope: !3761, file: !1757, line: 455, baseType: !7, size: 64, offset: 832)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "same_align_refs", scope: !3761, file: !1757, line: 459, baseType: !3803, size: 64, offset: 896)
!3803 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3804, size: 64)
!3804 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_dr_p_heap", file: !1757, line: 399, baseType: !3805)
!3805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_dr_p_heap", file: !1757, line: 399, size: 128, elements: !3806)
!3806 = !{!3807}
!3807 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3805, file: !1757, line: 399, baseType: !3808, size: 128)
!3808 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_dr_p_base", file: !1757, line: 398, baseType: !3809)
!3809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_dr_p_base", file: !1757, line: 398, size: 128, elements: !3810)
!3810 = !{!3811, !3812, !3813}
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3809, file: !1757, line: 398, baseType: !17, size: 32)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3809, file: !1757, line: 398, baseType: !17, size: 32, offset: 32)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3809, file: !1757, line: 398, baseType: !3814, size: 64, offset: 64)
!3814 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3815, size: 64, elements: !115)
!3815 = !DIDerivedType(tag: DW_TAG_typedef, name: "dr_p", file: !1757, line: 397, baseType: !3628)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "def_type", scope: !3761, file: !1757, line: 462, baseType: !1779, size: 32, offset: 960)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "first_dr", scope: !3761, file: !1757, line: 466, baseType: !7, size: 64, offset: 1024)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "next_dr", scope: !3761, file: !1757, line: 468, baseType: !7, size: 64, offset: 1088)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3761, file: !1757, line: 470, baseType: !17, size: 32, offset: 1152)
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "store_count", scope: !3761, file: !1757, line: 473, baseType: !17, size: 32, offset: 1184)
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "gap", scope: !3761, file: !1757, line: 476, baseType: !17, size: 32, offset: 1216)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "same_dr_stmt", scope: !3761, file: !1757, line: 479, baseType: !7, size: 64, offset: 1280)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "read_write_dep", scope: !3761, file: !1757, line: 482, baseType: !6, size: 8, offset: 1344)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !3761, file: !1757, line: 489, baseType: !3825, size: 64, offset: 1376)
!3825 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3761, file: !1757, line: 485, size: 64, elements: !3826)
!3826 = !{!3827, !3828}
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "outside_of_loop", scope: !3825, file: !1757, line: 487, baseType: !100, size: 32)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "inside_of_loop", scope: !3825, file: !1757, line: 488, baseType: !100, size: 32, offset: 32)
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "slp_type", scope: !3761, file: !1757, line: 492, baseType: !1790, size: 32, offset: 1440)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "bb_vinfo", scope: !3761, file: !1757, line: 495, baseType: !3606, size: 64, offset: 1472)
!3831 = !{!0, !3832, !3834}
!3832 = !DIGlobalVariableExpression(var: !3833, expr: !DIExpression())
!3833 = distinct !DIGlobalVariable(name: "mask_fixed", scope: !2, file: !3, line: 1717, type: !6, isLocal: true, isDefinition: true)
!3834 = !DIGlobalVariableExpression(var: !3835, expr: !DIExpression())
!3835 = distinct !DIGlobalVariable(name: "needs_first_vector", scope: !2, file: !3, line: 1718, type: !6, isLocal: true, isDefinition: true)
!3836 = !{!3837, !3838, !3839, !3840, !3841, !3842, !3843, !3844, !3845, !3846}
!3837 = !DILocalVariable(name: "stmt", arg: 1, scope: !2, file: !3, line: 1710, type: !7)
!3838 = !DILocalVariable(name: "first_mask_element", arg: 2, scope: !2, file: !3, line: 1710, type: !100)
!3839 = !DILocalVariable(name: "m", arg: 3, scope: !2, file: !3, line: 1710, type: !100)
!3840 = !DILocalVariable(name: "mask_nunits", arg: 4, scope: !2, file: !3, line: 1711, type: !100)
!3841 = !DILocalVariable(name: "only_one_vec", arg: 5, scope: !2, file: !3, line: 1711, type: !6)
!3842 = !DILocalVariable(name: "index", arg: 6, scope: !2, file: !3, line: 1711, type: !100)
!3843 = !DILocalVariable(name: "mask", arg: 7, scope: !2, file: !3, line: 1712, type: !1752)
!3844 = !DILocalVariable(name: "current_mask_element", arg: 8, scope: !2, file: !3, line: 1712, type: !1752)
!3845 = !DILocalVariable(name: "need_next_vector", arg: 9, scope: !2, file: !3, line: 1713, type: !1753)
!3846 = !DILocalVariable(name: "i", scope: !2, file: !3, line: 1715, type: !100)
!3847 = !DIGlobalVariableExpression(var: !3833, expr: !DIExpression(DW_OP_deref_size, 1, DW_OP_constu, 1, DW_OP_mul, DW_OP_constu, 0, DW_OP_plus, DW_OP_stack_value))
!3848 = !DIGlobalVariableExpression(var: !3835, expr: !DIExpression(DW_OP_deref_size, 1, DW_OP_constu, 1, DW_OP_mul, DW_OP_constu, 0, DW_OP_plus, DW_OP_stack_value))
!3849 = !{i32 2, !"Dwarf Version", i32 4}
!3850 = !{i32 2, !"Debug Info Version", i32 3}
!3851 = !{i32 1, !"wchar_size", i32 4}
!3852 = !{!"clang version 9.0.1 (https://github.com/llvm/llvm-project.git c1a0a213378a458fbea1a5c77b315c7dce08fd05)"}
!3853 = distinct !DISubprogram(name: "vprintf", scope: !3854, file: !3854, line: 39, type: !3855, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3865)
!3854 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdio.h", directory: "")
!3855 = !DISubroutineType(types: !3856)
!3856 = !{!100, !3857, !3858}
!3857 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !103)
!3858 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3859, size: 64)
!3859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, size: 192, elements: !3860)
!3860 = !{!3861, !3862, !3863, !3864}
!3861 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3859, file: !3, baseType: !17, size: 32)
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3859, file: !3, baseType: !17, size: 32, offset: 32)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3859, file: !3, baseType: !316, size: 64, offset: 64)
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3859, file: !3, baseType: !316, size: 64, offset: 128)
!3865 = !{!3866, !3867}
!3866 = !DILocalVariable(name: "__fmt", arg: 1, scope: !3853, file: !3854, line: 39, type: !3857)
!3867 = !DILocalVariable(name: "__arg", arg: 2, scope: !3853, file: !3854, line: 39, type: !3858)
!3868 = !DILocation(line: 0, scope: !3853)
!3869 = !DILocation(line: 41, column: 20, scope: !3853)
!3870 = !DILocation(line: 41, column: 10, scope: !3853)
!3871 = !DILocation(line: 41, column: 3, scope: !3853)
!3872 = distinct !DISubprogram(name: "getchar", scope: !3854, file: !3854, line: 47, type: !3873, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3875)
!3873 = !DISubroutineType(types: !3874)
!3874 = !{!100}
!3875 = !{}
!3876 = !DILocation(line: 49, column: 16, scope: !3872)
!3877 = !DILocation(line: 49, column: 10, scope: !3872)
!3878 = !DILocation(line: 49, column: 3, scope: !3872)
!3879 = distinct !DISubprogram(name: "fgetc_unlocked", scope: !3854, file: !3854, line: 56, type: !3880, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3933)
!3880 = !DISubroutineType(types: !3881)
!3881 = !{!100, !3882}
!3882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3883, size: 64)
!3883 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3884, line: 7, baseType: !3885)
!3884 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3885 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3886, line: 49, size: 1728, elements: !3887)
!3886 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3887 = !{!3888, !3889, !3890, !3891, !3892, !3893, !3894, !3895, !3896, !3897, !3898, !3899, !3900, !3903, !3905, !3906, !3907, !3910, !3912, !3913, !3914, !3917, !3919, !3922, !3925, !3926, !3927, !3928, !3929}
!3888 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3885, file: !3886, line: 51, baseType: !100, size: 32)
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3885, file: !3886, line: 54, baseType: !301, size: 64, offset: 64)
!3890 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3885, file: !3886, line: 55, baseType: !301, size: 64, offset: 128)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3885, file: !3886, line: 56, baseType: !301, size: 64, offset: 192)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3885, file: !3886, line: 57, baseType: !301, size: 64, offset: 256)
!3893 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3885, file: !3886, line: 58, baseType: !301, size: 64, offset: 320)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3885, file: !3886, line: 59, baseType: !301, size: 64, offset: 384)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3885, file: !3886, line: 60, baseType: !301, size: 64, offset: 448)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3885, file: !3886, line: 61, baseType: !301, size: 64, offset: 512)
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3885, file: !3886, line: 64, baseType: !301, size: 64, offset: 576)
!3898 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3885, file: !3886, line: 65, baseType: !301, size: 64, offset: 640)
!3899 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3885, file: !3886, line: 66, baseType: !301, size: 64, offset: 704)
!3900 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3885, file: !3886, line: 68, baseType: !3901, size: 64, offset: 768)
!3901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3902, size: 64)
!3902 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3886, line: 36, flags: DIFlagFwdDecl)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3885, file: !3886, line: 70, baseType: !3904, size: 64, offset: 832)
!3904 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3885, size: 64)
!3905 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3885, file: !3886, line: 72, baseType: !100, size: 32, offset: 896)
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3885, file: !3886, line: 73, baseType: !100, size: 32, offset: 928)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3885, file: !3886, line: 74, baseType: !3908, size: 64, offset: 960)
!3908 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !3909, line: 152, baseType: !295)
!3909 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3885, file: !3886, line: 77, baseType: !3911, size: 16, offset: 1024)
!3911 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3912 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3885, file: !3886, line: 78, baseType: !1329, size: 8, offset: 1040)
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3885, file: !3886, line: 79, baseType: !422, size: 8, offset: 1048)
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3885, file: !3886, line: 81, baseType: !3915, size: 64, offset: 1088)
!3915 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3916, size: 64)
!3916 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3886, line: 43, baseType: null)
!3917 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3885, file: !3886, line: 89, baseType: !3918, size: 64, offset: 1152)
!3918 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !3909, line: 153, baseType: !295)
!3919 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3885, file: !3886, line: 91, baseType: !3920, size: 64, offset: 1216)
!3920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3921, size: 64)
!3921 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3886, line: 37, flags: DIFlagFwdDecl)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3885, file: !3886, line: 92, baseType: !3923, size: 64, offset: 1280)
!3923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3924, size: 64)
!3924 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3886, line: 38, flags: DIFlagFwdDecl)
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3885, file: !3886, line: 93, baseType: !3904, size: 64, offset: 1344)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3885, file: !3886, line: 94, baseType: !316, size: 64, offset: 1408)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3885, file: !3886, line: 95, baseType: !657, size: 64, offset: 1472)
!3928 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3885, file: !3886, line: 96, baseType: !100, size: 32, offset: 1536)
!3929 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3885, file: !3886, line: 98, baseType: !3930, size: 160, offset: 1568)
!3930 = !DICompositeType(tag: DW_TAG_array_type, baseType: !105, size: 160, elements: !3931)
!3931 = !{!3932}
!3932 = !DISubrange(count: 20)
!3933 = !{!3934}
!3934 = !DILocalVariable(name: "__fp", arg: 1, scope: !3879, file: !3854, line: 56, type: !3882)
!3935 = !DILocation(line: 0, scope: !3879)
!3936 = !DILocation(line: 58, column: 10, scope: !3879)
!3937 = !DILocation(line: 58, column: 3, scope: !3879)
!3938 = distinct !DISubprogram(name: "getc_unlocked", scope: !3854, file: !3854, line: 66, type: !3880, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3939)
!3939 = !{!3940}
!3940 = !DILocalVariable(name: "__fp", arg: 1, scope: !3938, file: !3854, line: 66, type: !3882)
!3941 = !DILocation(line: 0, scope: !3938)
!3942 = !DILocation(line: 68, column: 10, scope: !3938)
!3943 = !DILocation(line: 68, column: 3, scope: !3938)
!3944 = distinct !DISubprogram(name: "getchar_unlocked", scope: !3854, file: !3854, line: 73, type: !3873, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3875)
!3945 = !DILocation(line: 75, column: 10, scope: !3944)
!3946 = !DILocation(line: 75, column: 3, scope: !3944)
!3947 = distinct !DISubprogram(name: "putchar", scope: !3854, file: !3854, line: 82, type: !3948, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3950)
!3948 = !DISubroutineType(types: !3949)
!3949 = !{!100, !100}
!3950 = !{!3951}
!3951 = !DILocalVariable(name: "__c", arg: 1, scope: !3947, file: !3854, line: 82, type: !100)
!3952 = !DILocation(line: 0, scope: !3947)
!3953 = !DILocation(line: 84, column: 21, scope: !3947)
!3954 = !DILocation(line: 84, column: 10, scope: !3947)
!3955 = !DILocation(line: 84, column: 3, scope: !3947)
!3956 = distinct !DISubprogram(name: "fputc_unlocked", scope: !3854, file: !3854, line: 91, type: !3957, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3959)
!3957 = !DISubroutineType(types: !3958)
!3958 = !{!100, !100, !3882}
!3959 = !{!3960, !3961}
!3960 = !DILocalVariable(name: "__c", arg: 1, scope: !3956, file: !3854, line: 91, type: !100)
!3961 = !DILocalVariable(name: "__stream", arg: 2, scope: !3956, file: !3854, line: 91, type: !3882)
!3962 = !DILocation(line: 0, scope: !3956)
!3963 = !DILocation(line: 93, column: 10, scope: !3956)
!3964 = !DILocation(line: 93, column: 3, scope: !3956)
!3965 = distinct !DISubprogram(name: "putc_unlocked", scope: !3854, file: !3854, line: 101, type: !3957, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3966)
!3966 = !{!3967, !3968}
!3967 = !DILocalVariable(name: "__c", arg: 1, scope: !3965, file: !3854, line: 101, type: !100)
!3968 = !DILocalVariable(name: "__stream", arg: 2, scope: !3965, file: !3854, line: 101, type: !3882)
!3969 = !DILocation(line: 0, scope: !3965)
!3970 = !DILocation(line: 103, column: 10, scope: !3965)
!3971 = !DILocation(line: 103, column: 3, scope: !3965)
!3972 = distinct !DISubprogram(name: "putchar_unlocked", scope: !3854, file: !3854, line: 108, type: !3948, scopeLine: 109, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3973)
!3973 = !{!3974}
!3974 = !DILocalVariable(name: "__c", arg: 1, scope: !3972, file: !3854, line: 108, type: !100)
!3975 = !DILocation(line: 0, scope: !3972)
!3976 = !DILocation(line: 110, column: 10, scope: !3972)
!3977 = !DILocation(line: 110, column: 3, scope: !3972)
!3978 = distinct !DISubprogram(name: "getline", scope: !3854, file: !3854, line: 118, type: !3979, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3983)
!3979 = !DISubroutineType(types: !3980)
!3980 = !{!3981, !3528, !3982, !3882}
!3981 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ssize_t", file: !3909, line: 193, baseType: !295)
!3982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !657, size: 64)
!3983 = !{!3984, !3985, !3986}
!3984 = !DILocalVariable(name: "__lineptr", arg: 1, scope: !3978, file: !3854, line: 118, type: !3528)
!3985 = !DILocalVariable(name: "__n", arg: 2, scope: !3978, file: !3854, line: 118, type: !3982)
!3986 = !DILocalVariable(name: "__stream", arg: 3, scope: !3978, file: !3854, line: 118, type: !3882)
!3987 = !DILocation(line: 0, scope: !3978)
!3988 = !DILocation(line: 120, column: 10, scope: !3978)
!3989 = !DILocation(line: 120, column: 3, scope: !3978)
!3990 = distinct !DISubprogram(name: "feof_unlocked", scope: !3854, file: !3854, line: 128, type: !3880, scopeLine: 129, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3991)
!3991 = !{!3992}
!3992 = !DILocalVariable(name: "__stream", arg: 1, scope: !3990, file: !3854, line: 128, type: !3882)
!3993 = !DILocation(line: 0, scope: !3990)
!3994 = !DILocation(line: 130, column: 10, scope: !3990)
!3995 = !DILocation(line: 130, column: 3, scope: !3990)
!3996 = distinct !DISubprogram(name: "ferror_unlocked", scope: !3854, file: !3854, line: 135, type: !3880, scopeLine: 136, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !3997)
!3997 = !{!3998}
!3998 = !DILocalVariable(name: "__stream", arg: 1, scope: !3996, file: !3854, line: 135, type: !3882)
!3999 = !DILocation(line: 0, scope: !3996)
!4000 = !DILocation(line: 137, column: 10, scope: !3996)
!4001 = !DILocation(line: 137, column: 3, scope: !3996)
!4002 = distinct !DISubprogram(name: "tolower", scope: !4003, file: !4003, line: 207, type: !3948, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4004)
!4003 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!4004 = !{!4005}
!4005 = !DILocalVariable(name: "__c", arg: 1, scope: !4002, file: !4003, line: 207, type: !100)
!4006 = !DILocation(line: 0, scope: !4002)
!4007 = !DILocation(line: 209, column: 22, scope: !4002)
!4008 = !DILocation(line: 209, column: 39, scope: !4002)
!4009 = !DILocation(line: 209, column: 38, scope: !4002)
!4010 = !DILocation(line: 209, column: 37, scope: !4002)
!4011 = !DILocation(line: 209, column: 10, scope: !4002)
!4012 = !DILocation(line: 209, column: 3, scope: !4002)
!4013 = distinct !DISubprogram(name: "toupper", scope: !4003, file: !4003, line: 213, type: !3948, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4014)
!4014 = !{!4015}
!4015 = !DILocalVariable(name: "__c", arg: 1, scope: !4013, file: !4003, line: 213, type: !100)
!4016 = !DILocation(line: 0, scope: !4013)
!4017 = !DILocation(line: 215, column: 22, scope: !4013)
!4018 = !DILocation(line: 215, column: 39, scope: !4013)
!4019 = !DILocation(line: 215, column: 38, scope: !4013)
!4020 = !DILocation(line: 215, column: 37, scope: !4013)
!4021 = !DILocation(line: 215, column: 10, scope: !4013)
!4022 = !DILocation(line: 215, column: 3, scope: !4013)
!4023 = distinct !DISubprogram(name: "atoi", scope: !4024, file: !4024, line: 361, type: !4025, scopeLine: 362, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4027)
!4024 = !DIFile(filename: "/usr/include/stdlib.h", directory: "")
!4025 = !DISubroutineType(types: !4026)
!4026 = !{!100, !103}
!4027 = !{!4028}
!4028 = !DILocalVariable(name: "__nptr", arg: 1, scope: !4023, file: !4024, line: 361, type: !103)
!4029 = !DILocation(line: 0, scope: !4023)
!4030 = !DILocation(line: 363, column: 16, scope: !4023)
!4031 = !DILocation(line: 363, column: 10, scope: !4023)
!4032 = !DILocation(line: 363, column: 3, scope: !4023)
!4033 = distinct !DISubprogram(name: "atol", scope: !4024, file: !4024, line: 366, type: !4034, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4036)
!4034 = !DISubroutineType(types: !4035)
!4035 = !{!295, !103}
!4036 = !{!4037}
!4037 = !DILocalVariable(name: "__nptr", arg: 1, scope: !4033, file: !4024, line: 366, type: !103)
!4038 = !DILocation(line: 0, scope: !4033)
!4039 = !DILocation(line: 368, column: 10, scope: !4033)
!4040 = !DILocation(line: 368, column: 3, scope: !4033)
!4041 = distinct !DISubprogram(name: "atoll", scope: !4024, file: !4024, line: 373, type: !4042, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4045)
!4042 = !DISubroutineType(types: !4043)
!4043 = !{!4044, !103}
!4044 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!4045 = !{!4046}
!4046 = !DILocalVariable(name: "__nptr", arg: 1, scope: !4041, file: !4024, line: 373, type: !103)
!4047 = !DILocation(line: 0, scope: !4041)
!4048 = !DILocation(line: 375, column: 10, scope: !4041)
!4049 = !DILocation(line: 375, column: 3, scope: !4041)
!4050 = distinct !DISubprogram(name: "bsearch", scope: !4051, file: !4051, line: 20, type: !4052, scopeLine: 22, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4055)
!4051 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-bsearch.h", directory: "")
!4052 = !DISubroutineType(types: !4053)
!4053 = !{!316, !642, !642, !657, !657, !4054}
!4054 = !DIDerivedType(tag: DW_TAG_typedef, name: "__compar_fn_t", file: !4024, line: 808, baseType: !646)
!4055 = !{!4056, !4057, !4058, !4059, !4060, !4061, !4062, !4063, !4064, !4065}
!4056 = !DILocalVariable(name: "__key", arg: 1, scope: !4050, file: !4051, line: 20, type: !642)
!4057 = !DILocalVariable(name: "__base", arg: 2, scope: !4050, file: !4051, line: 20, type: !642)
!4058 = !DILocalVariable(name: "__nmemb", arg: 3, scope: !4050, file: !4051, line: 20, type: !657)
!4059 = !DILocalVariable(name: "__size", arg: 4, scope: !4050, file: !4051, line: 20, type: !657)
!4060 = !DILocalVariable(name: "__compar", arg: 5, scope: !4050, file: !4051, line: 21, type: !4054)
!4061 = !DILocalVariable(name: "__l", scope: !4050, file: !4051, line: 23, type: !657)
!4062 = !DILocalVariable(name: "__u", scope: !4050, file: !4051, line: 23, type: !657)
!4063 = !DILocalVariable(name: "__idx", scope: !4050, file: !4051, line: 23, type: !657)
!4064 = !DILocalVariable(name: "__p", scope: !4050, file: !4051, line: 24, type: !642)
!4065 = !DILocalVariable(name: "__comparison", scope: !4050, file: !4051, line: 25, type: !100)
!4066 = !DILocation(line: 0, scope: !4050)
!4067 = !DILocation(line: 29, column: 3, scope: !4050)
!4068 = !DILocation(line: 27, column: 7, scope: !4050)
!4069 = !DILocation(line: 29, column: 14, scope: !4050)
!4070 = !DILocation(line: 31, column: 20, scope: !4071)
!4071 = distinct !DILexicalBlock(scope: !4050, file: !4051, line: 30, column: 5)
!4072 = !DILocation(line: 31, column: 27, scope: !4071)
!4073 = !DILocation(line: 32, column: 56, scope: !4071)
!4074 = !DILocation(line: 32, column: 47, scope: !4071)
!4075 = !DILocation(line: 33, column: 22, scope: !4071)
!4076 = !DILocation(line: 34, column: 24, scope: !4077)
!4077 = distinct !DILexicalBlock(scope: !4071, file: !4051, line: 34, column: 11)
!4078 = !DILocation(line: 34, column: 11, scope: !4071)
!4079 = !DILocation(line: 36, column: 29, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !4077, file: !4051, line: 36, column: 16)
!4081 = !DILocation(line: 36, column: 16, scope: !4077)
!4082 = !DILocation(line: 37, column: 14, scope: !4080)
!4083 = distinct !{!4083, !4067, !4084}
!4084 = !DILocation(line: 40, column: 5, scope: !4050)
!4085 = !DILocation(line: 43, column: 1, scope: !4050)
!4086 = distinct !DISubprogram(name: "atof", scope: !4087, file: !4087, line: 25, type: !4088, scopeLine: 26, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4091)
!4087 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h", directory: "")
!4088 = !DISubroutineType(types: !4089)
!4089 = !{!4090, !103}
!4090 = !DIBasicType(name: "double", size: 64, encoding: DW_ATE_float)
!4091 = !{!4092}
!4092 = !DILocalVariable(name: "__nptr", arg: 1, scope: !4086, file: !4087, line: 25, type: !103)
!4093 = !DILocation(line: 0, scope: !4086)
!4094 = !DILocation(line: 27, column: 10, scope: !4086)
!4095 = !DILocation(line: 27, column: 3, scope: !4086)
!4096 = distinct !DISubprogram(name: "strtoimax", scope: !4097, file: !4097, line: 324, type: !4098, scopeLine: 326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4104)
!4097 = !DIFile(filename: "/usr/include/inttypes.h", directory: "")
!4098 = !DISubroutineType(types: !4099)
!4099 = !{!4100, !3857, !4103, !100}
!4100 = !DIDerivedType(tag: DW_TAG_typedef, name: "intmax_t", file: !4101, line: 101, baseType: !4102)
!4101 = !DIFile(filename: "/usr/include/stdint.h", directory: "")
!4102 = !DIDerivedType(tag: DW_TAG_typedef, name: "__intmax_t", file: !3909, line: 72, baseType: !295)
!4103 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !3528)
!4104 = !{!4105, !4106, !4107}
!4105 = !DILocalVariable(name: "nptr", arg: 1, scope: !4096, file: !4097, line: 324, type: !3857)
!4106 = !DILocalVariable(name: "endptr", arg: 2, scope: !4096, file: !4097, line: 324, type: !4103)
!4107 = !DILocalVariable(name: "base", arg: 3, scope: !4096, file: !4097, line: 324, type: !100)
!4108 = !DILocation(line: 0, scope: !4096)
!4109 = !DILocation(line: 327, column: 10, scope: !4096)
!4110 = !DILocation(line: 327, column: 3, scope: !4096)
!4111 = distinct !DISubprogram(name: "strtoumax", scope: !4097, file: !4097, line: 336, type: !4112, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4116)
!4112 = !DISubroutineType(types: !4113)
!4113 = !{!4114, !3857, !4103, !100}
!4114 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintmax_t", file: !4101, line: 102, baseType: !4115)
!4115 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uintmax_t", file: !3909, line: 73, baseType: !278)
!4116 = !{!4117, !4118, !4119}
!4117 = !DILocalVariable(name: "nptr", arg: 1, scope: !4111, file: !4097, line: 336, type: !3857)
!4118 = !DILocalVariable(name: "endptr", arg: 2, scope: !4111, file: !4097, line: 336, type: !4103)
!4119 = !DILocalVariable(name: "base", arg: 3, scope: !4111, file: !4097, line: 336, type: !100)
!4120 = !DILocation(line: 0, scope: !4111)
!4121 = !DILocation(line: 339, column: 10, scope: !4111)
!4122 = !DILocation(line: 339, column: 3, scope: !4111)
!4123 = distinct !DISubprogram(name: "wcstoimax", scope: !4097, file: !4097, line: 348, type: !4124, scopeLine: 350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4133)
!4124 = !DISubroutineType(types: !4125)
!4125 = !{!4100, !4126, !4130, !100}
!4126 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !4127)
!4127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4128, size: 64)
!4128 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4129)
!4129 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gwchar_t", file: !4097, line: 34, baseType: !100)
!4130 = !DIDerivedType(tag: DW_TAG_restrict_type, baseType: !4131)
!4131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4132, size: 64)
!4132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4129, size: 64)
!4133 = !{!4134, !4135, !4136}
!4134 = !DILocalVariable(name: "nptr", arg: 1, scope: !4123, file: !4097, line: 348, type: !4126)
!4135 = !DILocalVariable(name: "endptr", arg: 2, scope: !4123, file: !4097, line: 348, type: !4130)
!4136 = !DILocalVariable(name: "base", arg: 3, scope: !4123, file: !4097, line: 348, type: !100)
!4137 = !DILocation(line: 0, scope: !4123)
!4138 = !DILocation(line: 351, column: 10, scope: !4123)
!4139 = !DILocation(line: 351, column: 3, scope: !4123)
!4140 = distinct !DISubprogram(name: "wcstoumax", scope: !4097, file: !4097, line: 362, type: !4141, scopeLine: 364, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4143)
!4141 = !DISubroutineType(types: !4142)
!4142 = !{!4114, !4126, !4130, !100}
!4143 = !{!4144, !4145, !4146}
!4144 = !DILocalVariable(name: "nptr", arg: 1, scope: !4140, file: !4097, line: 362, type: !4126)
!4145 = !DILocalVariable(name: "endptr", arg: 2, scope: !4140, file: !4097, line: 362, type: !4130)
!4146 = !DILocalVariable(name: "base", arg: 3, scope: !4140, file: !4097, line: 362, type: !100)
!4147 = !DILocation(line: 0, scope: !4140)
!4148 = !DILocation(line: 365, column: 10, scope: !4140)
!4149 = !DILocation(line: 365, column: 3, scope: !4140)
!4150 = distinct !DISubprogram(name: "stat", scope: !4151, file: !4151, line: 453, type: !4152, scopeLine: 454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4189)
!4151 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/stat.h", directory: "")
!4152 = !DISubroutineType(types: !4153)
!4153 = !{!100, !103, !4154}
!4154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4155, size: 64)
!4155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !4156, line: 46, size: 1152, elements: !4157)
!4156 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!4157 = !{!4158, !4160, !4162, !4164, !4166, !4168, !4170, !4171, !4172, !4173, !4175, !4177, !4185, !4186, !4187}
!4158 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !4155, file: !4156, line: 48, baseType: !4159, size: 64)
!4159 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !3909, line: 145, baseType: !278)
!4160 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !4155, file: !4156, line: 53, baseType: !4161, size: 64, offset: 64)
!4161 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !3909, line: 148, baseType: !278)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !4155, file: !4156, line: 61, baseType: !4163, size: 64, offset: 128)
!4163 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !3909, line: 151, baseType: !278)
!4164 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !4155, file: !4156, line: 62, baseType: !4165, size: 32, offset: 192)
!4165 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !3909, line: 150, baseType: !17)
!4166 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !4155, file: !4156, line: 64, baseType: !4167, size: 32, offset: 224)
!4167 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !3909, line: 146, baseType: !17)
!4168 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !4155, file: !4156, line: 65, baseType: !4169, size: 32, offset: 256)
!4169 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !3909, line: 147, baseType: !17)
!4170 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !4155, file: !4156, line: 67, baseType: !100, size: 32, offset: 288)
!4171 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !4155, file: !4156, line: 69, baseType: !4159, size: 64, offset: 320)
!4172 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !4155, file: !4156, line: 74, baseType: !3908, size: 64, offset: 384)
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !4155, file: !4156, line: 78, baseType: !4174, size: 64, offset: 448)
!4174 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !3909, line: 174, baseType: !295)
!4175 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !4155, file: !4156, line: 80, baseType: !4176, size: 64, offset: 512)
!4176 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !3909, line: 179, baseType: !295)
!4177 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !4155, file: !4156, line: 91, baseType: !4178, size: 128, offset: 576)
!4178 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !4179, line: 10, size: 128, elements: !4180)
!4179 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!4180 = !{!4181, !4183}
!4181 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !4178, file: !4179, line: 12, baseType: !4182, size: 64)
!4182 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !3909, line: 160, baseType: !295)
!4183 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !4178, file: !4179, line: 16, baseType: !4184, size: 64, offset: 64)
!4184 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !3909, line: 196, baseType: !295)
!4185 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !4155, file: !4156, line: 92, baseType: !4178, size: 128, offset: 704)
!4186 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !4155, file: !4156, line: 93, baseType: !4178, size: 128, offset: 832)
!4187 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !4155, file: !4156, line: 106, baseType: !4188, size: 192, offset: 960)
!4188 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4184, size: 192, elements: !398)
!4189 = !{!4190, !4191}
!4190 = !DILocalVariable(name: "__path", arg: 1, scope: !4150, file: !4151, line: 453, type: !103)
!4191 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !4150, file: !4151, line: 453, type: !4154)
!4192 = !DILocation(line: 0, scope: !4150)
!4193 = !DILocation(line: 455, column: 10, scope: !4150)
!4194 = !DILocation(line: 455, column: 3, scope: !4150)
!4195 = distinct !DISubprogram(name: "lstat", scope: !4151, file: !4151, line: 460, type: !4152, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4196)
!4196 = !{!4197, !4198}
!4197 = !DILocalVariable(name: "__path", arg: 1, scope: !4195, file: !4151, line: 460, type: !103)
!4198 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !4195, file: !4151, line: 460, type: !4154)
!4199 = !DILocation(line: 0, scope: !4195)
!4200 = !DILocation(line: 462, column: 10, scope: !4195)
!4201 = !DILocation(line: 462, column: 3, scope: !4195)
!4202 = distinct !DISubprogram(name: "fstat", scope: !4151, file: !4151, line: 467, type: !4203, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4205)
!4203 = !DISubroutineType(types: !4204)
!4204 = !{!100, !100, !4154}
!4205 = !{!4206, !4207}
!4206 = !DILocalVariable(name: "__fd", arg: 1, scope: !4202, file: !4151, line: 467, type: !100)
!4207 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !4202, file: !4151, line: 467, type: !4154)
!4208 = !DILocation(line: 0, scope: !4202)
!4209 = !DILocation(line: 469, column: 10, scope: !4202)
!4210 = !DILocation(line: 469, column: 3, scope: !4202)
!4211 = distinct !DISubprogram(name: "fstatat", scope: !4151, file: !4151, line: 474, type: !4212, scopeLine: 476, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4214)
!4212 = !DISubroutineType(types: !4213)
!4213 = !{!100, !100, !103, !4154, !100}
!4214 = !{!4215, !4216, !4217, !4218}
!4215 = !DILocalVariable(name: "__fd", arg: 1, scope: !4211, file: !4151, line: 474, type: !100)
!4216 = !DILocalVariable(name: "__filename", arg: 2, scope: !4211, file: !4151, line: 474, type: !103)
!4217 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !4211, file: !4151, line: 474, type: !4154)
!4218 = !DILocalVariable(name: "__flag", arg: 4, scope: !4211, file: !4151, line: 474, type: !100)
!4219 = !DILocation(line: 0, scope: !4211)
!4220 = !DILocation(line: 477, column: 10, scope: !4211)
!4221 = !DILocation(line: 477, column: 3, scope: !4211)
!4222 = distinct !DISubprogram(name: "mknod", scope: !4151, file: !4151, line: 483, type: !4223, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4225)
!4223 = !DISubroutineType(types: !4224)
!4224 = !{!100, !103, !4165, !4159}
!4225 = !{!4226, !4227, !4228}
!4226 = !DILocalVariable(name: "__path", arg: 1, scope: !4222, file: !4151, line: 483, type: !103)
!4227 = !DILocalVariable(name: "__mode", arg: 2, scope: !4222, file: !4151, line: 483, type: !4165)
!4228 = !DILocalVariable(name: "__dev", arg: 3, scope: !4222, file: !4151, line: 483, type: !4159)
!4229 = !DILocation(line: 0, scope: !4222)
!4230 = !DILocation(line: 485, column: 10, scope: !4222)
!4231 = !DILocation(line: 485, column: 3, scope: !4222)
!4232 = distinct !DISubprogram(name: "mknodat", scope: !4151, file: !4151, line: 491, type: !4233, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4235)
!4233 = !DISubroutineType(types: !4234)
!4234 = !{!100, !100, !103, !4165, !4159}
!4235 = !{!4236, !4237, !4238, !4239}
!4236 = !DILocalVariable(name: "__fd", arg: 1, scope: !4232, file: !4151, line: 491, type: !100)
!4237 = !DILocalVariable(name: "__path", arg: 2, scope: !4232, file: !4151, line: 491, type: !103)
!4238 = !DILocalVariable(name: "__mode", arg: 3, scope: !4232, file: !4151, line: 491, type: !4165)
!4239 = !DILocalVariable(name: "__dev", arg: 4, scope: !4232, file: !4151, line: 491, type: !4159)
!4240 = !DILocation(line: 0, scope: !4232)
!4241 = !DILocation(line: 494, column: 10, scope: !4232)
!4242 = !DILocation(line: 494, column: 3, scope: !4232)
!4243 = distinct !DISubprogram(name: "stat64", scope: !4151, file: !4151, line: 502, type: !4244, scopeLine: 503, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4266)
!4244 = !DISubroutineType(types: !4245)
!4245 = !{!100, !103, !4246}
!4246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4247, size: 64)
!4247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat64", file: !4156, line: 119, size: 1152, elements: !4248)
!4248 = !{!4249, !4250, !4252, !4253, !4254, !4255, !4256, !4257, !4258, !4259, !4260, !4262, !4263, !4264, !4265}
!4249 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !4247, file: !4156, line: 121, baseType: !4159, size: 64)
!4250 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !4247, file: !4156, line: 123, baseType: !4251, size: 64, offset: 64)
!4251 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino64_t", file: !3909, line: 149, baseType: !278)
!4252 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !4247, file: !4156, line: 124, baseType: !4163, size: 64, offset: 128)
!4253 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !4247, file: !4156, line: 125, baseType: !4165, size: 32, offset: 192)
!4254 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !4247, file: !4156, line: 132, baseType: !4167, size: 32, offset: 224)
!4255 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !4247, file: !4156, line: 133, baseType: !4169, size: 32, offset: 256)
!4256 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !4247, file: !4156, line: 135, baseType: !100, size: 32, offset: 288)
!4257 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !4247, file: !4156, line: 136, baseType: !4159, size: 64, offset: 320)
!4258 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !4247, file: !4156, line: 137, baseType: !3908, size: 64, offset: 384)
!4259 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !4247, file: !4156, line: 143, baseType: !4174, size: 64, offset: 448)
!4260 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !4247, file: !4156, line: 144, baseType: !4261, size: 64, offset: 512)
!4261 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt64_t", file: !3909, line: 180, baseType: !295)
!4262 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !4247, file: !4156, line: 152, baseType: !4178, size: 128, offset: 576)
!4263 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !4247, file: !4156, line: 153, baseType: !4178, size: 128, offset: 704)
!4264 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !4247, file: !4156, line: 154, baseType: !4178, size: 128, offset: 832)
!4265 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !4247, file: !4156, line: 164, baseType: !4188, size: 192, offset: 960)
!4266 = !{!4267, !4268}
!4267 = !DILocalVariable(name: "__path", arg: 1, scope: !4243, file: !4151, line: 502, type: !103)
!4268 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !4243, file: !4151, line: 502, type: !4246)
!4269 = !DILocation(line: 0, scope: !4243)
!4270 = !DILocation(line: 504, column: 10, scope: !4243)
!4271 = !DILocation(line: 504, column: 3, scope: !4243)
!4272 = distinct !DISubprogram(name: "lstat64", scope: !4151, file: !4151, line: 509, type: !4244, scopeLine: 510, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4273)
!4273 = !{!4274, !4275}
!4274 = !DILocalVariable(name: "__path", arg: 1, scope: !4272, file: !4151, line: 509, type: !103)
!4275 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !4272, file: !4151, line: 509, type: !4246)
!4276 = !DILocation(line: 0, scope: !4272)
!4277 = !DILocation(line: 511, column: 10, scope: !4272)
!4278 = !DILocation(line: 511, column: 3, scope: !4272)
!4279 = distinct !DISubprogram(name: "fstat64", scope: !4151, file: !4151, line: 516, type: !4280, scopeLine: 517, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4282)
!4280 = !DISubroutineType(types: !4281)
!4281 = !{!100, !100, !4246}
!4282 = !{!4283, !4284}
!4283 = !DILocalVariable(name: "__fd", arg: 1, scope: !4279, file: !4151, line: 516, type: !100)
!4284 = !DILocalVariable(name: "__statbuf", arg: 2, scope: !4279, file: !4151, line: 516, type: !4246)
!4285 = !DILocation(line: 0, scope: !4279)
!4286 = !DILocation(line: 518, column: 10, scope: !4279)
!4287 = !DILocation(line: 518, column: 3, scope: !4279)
!4288 = distinct !DISubprogram(name: "fstatat64", scope: !4151, file: !4151, line: 523, type: !4289, scopeLine: 525, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4291)
!4289 = !DISubroutineType(types: !4290)
!4290 = !{!100, !100, !103, !4246, !100}
!4291 = !{!4292, !4293, !4294, !4295}
!4292 = !DILocalVariable(name: "__fd", arg: 1, scope: !4288, file: !4151, line: 523, type: !100)
!4293 = !DILocalVariable(name: "__filename", arg: 2, scope: !4288, file: !4151, line: 523, type: !103)
!4294 = !DILocalVariable(name: "__statbuf", arg: 3, scope: !4288, file: !4151, line: 523, type: !4246)
!4295 = !DILocalVariable(name: "__flag", arg: 4, scope: !4288, file: !4151, line: 523, type: !100)
!4296 = !DILocation(line: 0, scope: !4288)
!4297 = !DILocation(line: 526, column: 10, scope: !4288)
!4298 = !DILocation(line: 526, column: 3, scope: !4288)
!4299 = distinct !DISubprogram(name: "find_bb_location", scope: !3, file: !3, line: 45, type: !4300, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4302)
!4300 = !DISubroutineType(types: !4301)
!4301 = !{!3786, !589}
!4302 = !{!4303, !4304, !4305}
!4303 = !DILocalVariable(name: "bb", arg: 1, scope: !4299, file: !3, line: 45, type: !589)
!4304 = !DILocalVariable(name: "stmt", scope: !4299, file: !3, line: 47, type: !7)
!4305 = !DILocalVariable(name: "si", scope: !4299, file: !3, line: 48, type: !4306)
!4306 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !11, line: 265, baseType: !4307)
!4307 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !11, line: 254, size: 192, elements: !4308)
!4308 = !{!4309, !4310, !4311}
!4309 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !4307, file: !11, line: 257, baseType: !66, size: 64)
!4310 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !4307, file: !11, line: 263, baseType: !61, size: 64, offset: 64)
!4311 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !4307, file: !11, line: 264, baseType: !589, size: 64, offset: 128)
!4312 = !DILocation(line: 0, scope: !4299)
!4313 = !DILocation(line: 48, column: 3, scope: !4299)
!4314 = !DILocation(line: 50, column: 8, scope: !4315)
!4315 = distinct !DILexicalBlock(scope: !4299, file: !3, line: 50, column: 7)
!4316 = !DILocation(line: 50, column: 7, scope: !4299)
!4317 = !DILocation(line: 53, column: 13, scope: !4318)
!4318 = distinct !DILexicalBlock(scope: !4299, file: !3, line: 53, column: 3)
!4319 = !DILocation(line: 53, column: 8, scope: !4318)
!4320 = !DILocation(line: 53, column: 33, scope: !4321)
!4321 = distinct !DILexicalBlock(scope: !4318, file: !3, line: 53, column: 3)
!4322 = !DILocation(line: 53, column: 32, scope: !4321)
!4323 = !DILocation(line: 53, column: 3, scope: !4318)
!4324 = !DILocation(line: 55, column: 14, scope: !4325)
!4325 = distinct !DILexicalBlock(scope: !4321, file: !3, line: 54, column: 5)
!4326 = !DILocation(line: 56, column: 11, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !4325, file: !3, line: 56, column: 11)
!4328 = !DILocation(line: 56, column: 34, scope: !4327)
!4329 = !DILocation(line: 56, column: 11, scope: !4325)
!4330 = !DILocation(line: 57, column: 16, scope: !4327)
!4331 = !DILocation(line: 57, column: 9, scope: !4327)
!4332 = !DILocation(line: 53, column: 49, scope: !4321)
!4333 = !DILocation(line: 53, column: 3, scope: !4321)
!4334 = distinct !{!4334, !4323, !4335}
!4335 = !DILocation(line: 58, column: 5, scope: !4318)
!4336 = !DILocation(line: 61, column: 1, scope: !4299)
!4337 = distinct !DISubprogram(name: "gsi_start_bb", scope: !11, file: !11, line: 4418, type: !4338, scopeLine: 4419, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4340)
!4338 = !DISubroutineType(types: !4339)
!4339 = !{!4306, !589}
!4340 = !{!4341, !4342, !4343}
!4341 = !DILocalVariable(name: "bb", arg: 1, scope: !4337, file: !11, line: 4418, type: !589)
!4342 = !DILocalVariable(name: "i", scope: !4337, file: !11, line: 4420, type: !4306)
!4343 = !DILocalVariable(name: "seq", scope: !4337, file: !11, line: 4421, type: !61)
!4344 = !DILocation(line: 0, scope: !4337)
!4345 = !DILocation(line: 4420, column: 24, scope: !4337)
!4346 = !DILocation(line: 4423, column: 9, scope: !4337)
!4347 = !DILocation(line: 4424, column: 11, scope: !4337)
!4348 = !DILocation(line: 4424, column: 5, scope: !4337)
!4349 = !DILocation(line: 4424, column: 9, scope: !4337)
!4350 = !DILocation(line: 4425, column: 5, scope: !4337)
!4351 = !DILocation(line: 4425, column: 9, scope: !4337)
!4352 = !DILocation(line: 4426, column: 5, scope: !4337)
!4353 = !DILocation(line: 4426, column: 8, scope: !4337)
!4354 = !DILocation(line: 4429, column: 1, scope: !4337)
!4355 = distinct !DISubprogram(name: "gsi_end_p", scope: !11, file: !11, line: 4467, type: !4356, scopeLine: 4468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4358)
!4356 = !DISubroutineType(types: !4357)
!4357 = !{!6, !4306}
!4358 = !{!4359}
!4359 = !DILocalVariable(name: "i", arg: 1, scope: !4355, file: !11, line: 4467, type: !4306)
!4360 = !DILocation(line: 4467, column: 33, scope: !4355)
!4361 = !DILocation(line: 4469, column: 12, scope: !4355)
!4362 = !DILocation(line: 4469, column: 16, scope: !4355)
!4363 = !DILocation(line: 4469, column: 10, scope: !4355)
!4364 = !DILocation(line: 4469, column: 3, scope: !4355)
!4365 = distinct !DISubprogram(name: "gsi_stmt", scope: !11, file: !11, line: 4501, type: !4366, scopeLine: 4502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4368)
!4366 = !DISubroutineType(types: !4367)
!4367 = !{!7, !4306}
!4368 = !{!4369}
!4369 = !DILocalVariable(name: "i", arg: 1, scope: !4365, file: !11, line: 4501, type: !4306)
!4370 = !DILocation(line: 4501, column: 32, scope: !4365)
!4371 = !DILocation(line: 4503, column: 12, scope: !4365)
!4372 = !DILocation(line: 4503, column: 17, scope: !4365)
!4373 = !DILocation(line: 4503, column: 3, scope: !4365)
!4374 = distinct !DISubprogram(name: "gimple_location", scope: !11, file: !11, line: 1139, type: !4375, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4378)
!4375 = !DISubroutineType(types: !4376)
!4376 = !{!28, !4377}
!4377 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !8, line: 60, baseType: !3587)
!4378 = !{!4379}
!4379 = !DILocalVariable(name: "g", arg: 1, scope: !4374, file: !11, line: 1139, type: !4377)
!4380 = !DILocation(line: 0, scope: !4374)
!4381 = !DILocation(line: 1141, column: 20, scope: !4374)
!4382 = !DILocation(line: 1141, column: 3, scope: !4374)
!4383 = distinct !DISubprogram(name: "gsi_next", scope: !11, file: !11, line: 4485, type: !4384, scopeLine: 4486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4387)
!4384 = !DISubroutineType(types: !4385)
!4385 = !{null, !4386}
!4386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4306, size: 64)
!4387 = !{!4388}
!4388 = !DILocalVariable(name: "i", arg: 1, scope: !4383, file: !11, line: 4485, type: !4386)
!4389 = !DILocation(line: 0, scope: !4383)
!4390 = !DILocation(line: 4487, column: 15, scope: !4383)
!4391 = !DILocation(line: 4487, column: 20, scope: !4383)
!4392 = !DILocation(line: 4487, column: 10, scope: !4383)
!4393 = !DILocation(line: 4488, column: 1, scope: !4383)
!4394 = distinct !DISubprogram(name: "vect_free_slp_instance", scope: !3, file: !3, line: 90, type: !4395, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4397)
!4395 = !DISubroutineType(types: !4396)
!4396 = !{null, !3602}
!4397 = !{!4398}
!4398 = !DILocalVariable(name: "instance", arg: 1, scope: !4394, file: !3, line: 90, type: !3602)
!4399 = !DILocation(line: 0, scope: !4394)
!4400 = !DILocation(line: 92, column: 23, scope: !4394)
!4401 = !DILocation(line: 92, column: 3, scope: !4394)
!4402 = !DILocation(line: 93, column: 3, scope: !4394)
!4403 = !DILocation(line: 94, column: 3, scope: !4394)
!4404 = !DILocation(line: 95, column: 1, scope: !4394)
!4405 = distinct !DISubprogram(name: "vect_free_slp_tree", scope: !3, file: !3, line: 67, type: !4406, scopeLine: 68, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4408)
!4406 = !DISubroutineType(types: !4407)
!4407 = !{null, !3551}
!4408 = !{!4409}
!4409 = !DILocalVariable(name: "node", arg: 1, scope: !4405, file: !3, line: 67, type: !3551)
!4410 = !DILocation(line: 0, scope: !4405)
!4411 = !DILocation(line: 69, column: 8, scope: !4412)
!4412 = distinct !DILexicalBlock(scope: !4405, file: !3, line: 69, column: 7)
!4413 = !DILocation(line: 69, column: 7, scope: !4405)
!4414 = !DILocation(line: 72, column: 7, scope: !4415)
!4415 = distinct !DILexicalBlock(scope: !4405, file: !3, line: 72, column: 7)
!4416 = !DILocation(line: 72, column: 7, scope: !4405)
!4417 = !DILocation(line: 73, column: 5, scope: !4415)
!4418 = !DILocation(line: 75, column: 7, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4405, file: !3, line: 75, column: 7)
!4420 = !DILocation(line: 75, column: 7, scope: !4405)
!4421 = !DILocation(line: 76, column: 5, scope: !4419)
!4422 = !DILocation(line: 78, column: 3, scope: !4405)
!4423 = !DILocation(line: 80, column: 7, scope: !4424)
!4424 = distinct !DILexicalBlock(scope: !4405, file: !3, line: 80, column: 7)
!4425 = !DILocation(line: 80, column: 7, scope: !4405)
!4426 = !DILocation(line: 81, column: 5, scope: !4424)
!4427 = !DILocation(line: 83, column: 9, scope: !4405)
!4428 = !DILocation(line: 83, column: 3, scope: !4405)
!4429 = !DILocation(line: 84, column: 1, scope: !4405)
!4430 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !3562, file: !3562, line: 32, type: !4431, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4434)
!4431 = !DISubroutineType(types: !4432)
!4432 = !{null, !4433}
!4433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3560, size: 64)
!4434 = !{!4435}
!4435 = !DILocalVariable(name: "vec_", arg: 1, scope: !4430, file: !3562, line: 32, type: !4433)
!4436 = !DILocation(line: 0, scope: !4430)
!4437 = !DILocation(line: 32, column: 1, scope: !4438)
!4438 = distinct !DILexicalBlock(scope: !4430, file: !3562, line: 32, column: 1)
!4439 = !DILocation(line: 32, column: 1, scope: !4430)
!4440 = distinct !DISubprogram(name: "VEC_slp_tree_heap_free", scope: !1757, file: !1757, line: 119, type: !4441, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4444)
!4441 = !DISubroutineType(types: !4442)
!4442 = !{null, !4443}
!4443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3574, size: 64)
!4444 = !{!4445}
!4445 = !DILocalVariable(name: "vec_", arg: 1, scope: !4440, file: !1757, line: 119, type: !4443)
!4446 = !DILocation(line: 0, scope: !4440)
!4447 = !DILocation(line: 119, column: 1, scope: !4448)
!4448 = distinct !DILexicalBlock(scope: !4440, file: !1757, line: 119, column: 1)
!4449 = !DILocation(line: 119, column: 1, scope: !4440)
!4450 = distinct !DISubprogram(name: "vect_analyze_slp", scope: !3, file: !3, line: 1031, type: !4451, scopeLine: 1032, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4453)
!4451 = !DISubroutineType(types: !4452)
!4452 = !{!6, !3766, !3606}
!4453 = !{!4454, !4455, !4456, !4457, !4458, !4459}
!4454 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4450, file: !3, line: 1031, type: !3766)
!4455 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !4450, file: !3, line: 1031, type: !3606)
!4456 = !DILocalVariable(name: "i", scope: !4450, file: !3, line: 1033, type: !17)
!4457 = !DILocalVariable(name: "strided_stores", scope: !4450, file: !3, line: 1034, type: !3535)
!4458 = !DILocalVariable(name: "store", scope: !4450, file: !3, line: 1035, type: !7)
!4459 = !DILocalVariable(name: "ok", scope: !4450, file: !3, line: 1036, type: !6)
!4460 = !DILocation(line: 0, scope: !4450)
!4461 = !DILocation(line: 1035, column: 3, scope: !4450)
!4462 = !DILocation(line: 1038, column: 7, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !4450, file: !3, line: 1038, column: 7)
!4464 = !DILocation(line: 1038, column: 7, scope: !4450)
!4465 = !DILocation(line: 1039, column: 14, scope: !4463)
!4466 = !DILocation(line: 1039, column: 5, scope: !4463)
!4467 = !DILocation(line: 1041, column: 7, scope: !4468)
!4468 = distinct !DILexicalBlock(scope: !4450, file: !3, line: 1041, column: 7)
!4469 = !DILocation(line: 1041, column: 7, scope: !4450)
!4470 = !DILocation(line: 1042, column: 22, scope: !4468)
!4471 = !DILocation(line: 1042, column: 5, scope: !4468)
!4472 = !DILocation(line: 1044, column: 22, scope: !4468)
!4473 = !DILocation(line: 0, scope: !4468)
!4474 = !DILocation(line: 0, scope: !4475)
!4475 = distinct !DILexicalBlock(scope: !4476, file: !3, line: 1046, column: 3)
!4476 = distinct !DILexicalBlock(scope: !4450, file: !3, line: 1046, column: 3)
!4477 = !DILocation(line: 1046, column: 8, scope: !4476)
!4478 = !DILocation(line: 0, scope: !4476)
!4479 = !DILocation(line: 1046, column: 15, scope: !4475)
!4480 = !DILocation(line: 1046, column: 3, scope: !4476)
!4481 = !DILocation(line: 1047, column: 58, scope: !4482)
!4482 = distinct !DILexicalBlock(scope: !4475, file: !3, line: 1047, column: 9)
!4483 = !DILocation(line: 1047, column: 9, scope: !4482)
!4484 = !DILocation(line: 1047, column: 9, scope: !4475)
!4485 = !DILocation(line: 1046, column: 64, scope: !4475)
!4486 = !DILocation(line: 1046, column: 3, scope: !4475)
!4487 = distinct !{!4487, !4480, !4488}
!4488 = !DILocation(line: 1048, column: 12, scope: !4476)
!4489 = !DILocation(line: 1050, column: 7, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4450, file: !3, line: 1050, column: 7)
!4491 = !DILocation(line: 1050, column: 20, scope: !4490)
!4492 = !DILocation(line: 1050, column: 16, scope: !4490)
!4493 = !DILocation(line: 1052, column: 11, scope: !4494)
!4494 = distinct !DILexicalBlock(scope: !4495, file: !3, line: 1052, column: 11)
!4495 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 1051, column: 5)
!4496 = !DILocation(line: 1052, column: 11, scope: !4495)
!4497 = !DILocation(line: 1053, column: 18, scope: !4494)
!4498 = !DILocation(line: 1053, column: 9, scope: !4494)
!4499 = !DILocation(line: 1059, column: 1, scope: !4450)
!4500 = distinct !DISubprogram(name: "VEC_gimple_base_iterate", scope: !11, file: !11, line: 33, type: !4501, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4506)
!4501 = !DISubroutineType(types: !4502)
!4502 = !{!100, !4503, !17, !4505}
!4503 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4504, size: 64)
!4504 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !688)
!4505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4506 = !{!4507, !4508, !4509}
!4507 = !DILocalVariable(name: "vec_", arg: 1, scope: !4500, file: !11, line: 33, type: !4503)
!4508 = !DILocalVariable(name: "ix_", arg: 2, scope: !4500, file: !11, line: 33, type: !17)
!4509 = !DILocalVariable(name: "ptr", arg: 3, scope: !4500, file: !11, line: 33, type: !4505)
!4510 = !DILocation(line: 0, scope: !4500)
!4511 = !DILocation(line: 33, column: 1, scope: !4512)
!4512 = distinct !DILexicalBlock(scope: !4500, file: !11, line: 33, column: 1)
!4513 = !DILocation(line: 33, column: 1, scope: !4500)
!4514 = !DILocation(line: 33, column: 1, scope: !4515)
!4515 = distinct !DILexicalBlock(scope: !4512, file: !11, line: 33, column: 1)
!4516 = !DILocation(line: 33, column: 1, scope: !4517)
!4517 = distinct !DILexicalBlock(scope: !4512, file: !11, line: 33, column: 1)
!4518 = !DILocation(line: 0, scope: !4512)
!4519 = distinct !DISubprogram(name: "vect_analyze_slp_instance", scope: !3, file: !3, line: 888, type: !4520, scopeLine: 890, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4522)
!4520 = !DISubroutineType(types: !4521)
!4521 = !{!6, !3766, !3606, !7}
!4522 = !{!4523, !4524, !4525, !4526, !4527, !4528, !4529, !4530, !4531, !4532, !4533, !4534, !4535, !4536, !4537, !4538, !4539, !4540}
!4523 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4519, file: !3, line: 888, type: !3766)
!4524 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !4519, file: !3, line: 888, type: !3606)
!4525 = !DILocalVariable(name: "stmt", arg: 3, scope: !4519, file: !3, line: 889, type: !7)
!4526 = !DILocalVariable(name: "new_instance", scope: !4519, file: !3, line: 891, type: !3602)
!4527 = !DILocalVariable(name: "node", scope: !4519, file: !3, line: 892, type: !3551)
!4528 = !DILocalVariable(name: "group_size", scope: !4519, file: !3, line: 893, type: !17)
!4529 = !DILocalVariable(name: "unrolling_factor", scope: !4519, file: !3, line: 894, type: !17)
!4530 = !DILocalVariable(name: "nunits", scope: !4519, file: !3, line: 894, type: !17)
!4531 = !DILocalVariable(name: "vectype", scope: !4519, file: !3, line: 895, type: !326)
!4532 = !DILocalVariable(name: "scalar_type", scope: !4519, file: !3, line: 895, type: !326)
!4533 = !DILocalVariable(name: "next", scope: !4519, file: !3, line: 896, type: !7)
!4534 = !DILocalVariable(name: "vectorization_factor", scope: !4519, file: !3, line: 897, type: !17)
!4535 = !DILocalVariable(name: "inside_cost", scope: !4519, file: !3, line: 898, type: !100)
!4536 = !DILocalVariable(name: "outside_cost", scope: !4519, file: !3, line: 898, type: !100)
!4537 = !DILocalVariable(name: "ncopies_for_cost", scope: !4519, file: !3, line: 898, type: !100)
!4538 = !DILocalVariable(name: "max_nunits", scope: !4519, file: !3, line: 899, type: !17)
!4539 = !DILocalVariable(name: "load_permutation", scope: !4519, file: !3, line: 900, type: !3560)
!4540 = !DILocalVariable(name: "loads", scope: !4519, file: !3, line: 901, type: !3574)
!4541 = !DILocation(line: 0, scope: !4519)
!4542 = !DILocation(line: 892, column: 3, scope: !4519)
!4543 = !DILocation(line: 892, column: 19, scope: !4519)
!4544 = !DILocation(line: 892, column: 12, scope: !4519)
!4545 = !DILocation(line: 893, column: 29, scope: !4519)
!4546 = !DILocation(line: 898, column: 3, scope: !4519)
!4547 = !DILocation(line: 898, column: 7, scope: !4519)
!4548 = !DILocation(line: 898, column: 24, scope: !4519)
!4549 = !DILocation(line: 899, column: 3, scope: !4519)
!4550 = !DILocation(line: 899, column: 16, scope: !4519)
!4551 = !DILocation(line: 900, column: 3, scope: !4519)
!4552 = !DILocation(line: 901, column: 3, scope: !4519)
!4553 = !DILocation(line: 903, column: 17, scope: !4519)
!4554 = !DILocation(line: 905, column: 13, scope: !4519)
!4555 = !DILocation(line: 906, column: 8, scope: !4556)
!4556 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 906, column: 7)
!4557 = !DILocation(line: 906, column: 7, scope: !4519)
!4558 = !DILocation(line: 908, column: 11, scope: !4559)
!4559 = distinct !DILexicalBlock(scope: !4560, file: !3, line: 908, column: 11)
!4560 = distinct !DILexicalBlock(scope: !4556, file: !3, line: 907, column: 5)
!4561 = !DILocation(line: 908, column: 11, scope: !4560)
!4562 = !DILocation(line: 910, column: 20, scope: !4563)
!4563 = distinct !DILexicalBlock(scope: !4559, file: !3, line: 909, column: 9)
!4564 = !DILocation(line: 910, column: 11, scope: !4563)
!4565 = !DILocation(line: 911, column: 31, scope: !4563)
!4566 = !DILocation(line: 911, column: 11, scope: !4563)
!4567 = !DILocation(line: 912, column: 9, scope: !4563)
!4568 = !DILocation(line: 916, column: 12, scope: !4519)
!4569 = !DILocation(line: 917, column: 7, scope: !4570)
!4570 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 917, column: 7)
!4571 = !DILocation(line: 917, column: 7, scope: !4519)
!4572 = !DILocation(line: 918, column: 28, scope: !4570)
!4573 = !DILocation(line: 918, column: 5, scope: !4570)
!4574 = !DILocation(line: 0, scope: !4570)
!4575 = !DILocation(line: 924, column: 22, scope: !4519)
!4576 = !DILocation(line: 924, column: 65, scope: !4519)
!4577 = !DILocation(line: 925, column: 24, scope: !4578)
!4578 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 925, column: 7)
!4579 = !DILocation(line: 925, column: 33, scope: !4578)
!4580 = !DILocation(line: 925, column: 29, scope: !4578)
!4581 = !DILocation(line: 927, column: 11, scope: !4582)
!4582 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 927, column: 11)
!4583 = distinct !DILexicalBlock(scope: !4578, file: !3, line: 926, column: 5)
!4584 = !DILocation(line: 927, column: 11, scope: !4583)
!4585 = !DILocation(line: 928, column: 18, scope: !4582)
!4586 = !DILocation(line: 928, column: 9, scope: !4582)
!4587 = !DILocation(line: 935, column: 34, scope: !4519)
!4588 = !DILocation(line: 935, column: 3, scope: !4519)
!4589 = !DILocation(line: 935, column: 32, scope: !4519)
!4590 = !DILocation(line: 938, column: 3, scope: !4519)
!4591 = !DILocation(line: 940, column: 7, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 939, column: 5)
!4593 = !DILocation(line: 941, column: 14, scope: !4592)
!4594 = distinct !{!4594, !4590, !4595}
!4595 = !DILocation(line: 942, column: 5, scope: !4519)
!4596 = !DILocation(line: 944, column: 3, scope: !4519)
!4597 = !DILocation(line: 944, column: 29, scope: !4519)
!4598 = !DILocation(line: 945, column: 3, scope: !4519)
!4599 = !DILocation(line: 945, column: 39, scope: !4519)
!4600 = !DILocation(line: 946, column: 3, scope: !4519)
!4601 = !DILocation(line: 946, column: 24, scope: !4519)
!4602 = !DILocation(line: 947, column: 3, scope: !4519)
!4603 = !DILocation(line: 947, column: 25, scope: !4519)
!4604 = !DILocation(line: 948, column: 3, scope: !4519)
!4605 = !DILocation(line: 948, column: 40, scope: !4519)
!4606 = !DILocation(line: 949, column: 3, scope: !4519)
!4607 = !DILocation(line: 949, column: 39, scope: !4519)
!4608 = !DILocation(line: 954, column: 39, scope: !4519)
!4609 = !DILocation(line: 954, column: 52, scope: !4519)
!4610 = !DILocation(line: 956, column: 22, scope: !4519)
!4611 = !DILocation(line: 956, column: 20, scope: !4519)
!4612 = !DILocation(line: 957, column: 11, scope: !4519)
!4613 = !DILocation(line: 957, column: 9, scope: !4519)
!4614 = !DILocation(line: 960, column: 7, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 960, column: 7)
!4616 = !DILocation(line: 960, column: 7, scope: !4519)
!4617 = !DILocation(line: 966, column: 22, scope: !4618)
!4618 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 964, column: 5)
!4619 = !DILocation(line: 967, column: 42, scope: !4618)
!4620 = !DILocation(line: 967, column: 40, scope: !4618)
!4621 = !DILocation(line: 968, column: 7, scope: !4618)
!4622 = !DILocation(line: 968, column: 46, scope: !4618)
!4623 = !DILocation(line: 971, column: 11, scope: !4624)
!4624 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 971, column: 11)
!4625 = !DILocation(line: 971, column: 22, scope: !4624)
!4626 = !DILocation(line: 971, column: 11, scope: !4618)
!4627 = !DILocation(line: 972, column: 28, scope: !4624)
!4628 = !DILocation(line: 973, column: 28, scope: !4624)
!4629 = !DILocation(line: 972, column: 9, scope: !4624)
!4630 = !DILocation(line: 975, column: 7, scope: !4618)
!4631 = !DILocation(line: 975, column: 52, scope: !4618)
!4632 = !DILocation(line: 976, column: 58, scope: !4618)
!4633 = !DILocation(line: 976, column: 7, scope: !4618)
!4634 = !DILocation(line: 976, column: 56, scope: !4618)
!4635 = !DILocation(line: 977, column: 57, scope: !4618)
!4636 = !DILocation(line: 977, column: 7, scope: !4618)
!4637 = !DILocation(line: 977, column: 55, scope: !4618)
!4638 = !DILocation(line: 978, column: 43, scope: !4618)
!4639 = !DILocation(line: 978, column: 7, scope: !4618)
!4640 = !DILocation(line: 978, column: 41, scope: !4618)
!4641 = !DILocation(line: 979, column: 7, scope: !4618)
!4642 = !DILocation(line: 979, column: 51, scope: !4618)
!4643 = !DILocation(line: 980, column: 54, scope: !4618)
!4644 = !DILocation(line: 980, column: 7, scope: !4618)
!4645 = !DILocation(line: 980, column: 52, scope: !4618)
!4646 = !DILocation(line: 981, column: 11, scope: !4647)
!4647 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 981, column: 11)
!4648 = !DILocation(line: 981, column: 11, scope: !4618)
!4649 = !DILocation(line: 984, column: 51, scope: !4650)
!4650 = distinct !DILexicalBlock(scope: !4651, file: !3, line: 983, column: 15)
!4651 = distinct !DILexicalBlock(scope: !4647, file: !3, line: 982, column: 9)
!4652 = !DILocation(line: 983, column: 16, scope: !4650)
!4653 = !DILocation(line: 983, column: 15, scope: !4651)
!4654 = !DILocation(line: 986, column: 19, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4656, file: !3, line: 986, column: 19)
!4656 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 985, column: 13)
!4657 = !DILocation(line: 986, column: 19, scope: !4656)
!4658 = !DILocation(line: 988, column: 28, scope: !4659)
!4659 = distinct !DILexicalBlock(scope: !4655, file: !3, line: 987, column: 17)
!4660 = !DILocation(line: 988, column: 19, scope: !4659)
!4661 = !DILocation(line: 990, column: 38, scope: !4659)
!4662 = !DILocation(line: 990, column: 19, scope: !4659)
!4663 = !DILocation(line: 991, column: 17, scope: !4659)
!4664 = !DILocation(line: 993, column: 15, scope: !4656)
!4665 = !DILocation(line: 994, column: 15, scope: !4656)
!4666 = !DILocation(line: 998, column: 16, scope: !4651)
!4667 = !DILocation(line: 998, column: 14, scope: !4651)
!4668 = !DILocation(line: 999, column: 9, scope: !4651)
!4669 = !DILocation(line: 1001, column: 9, scope: !4647)
!4670 = !DILocation(line: 1003, column: 11, scope: !4618)
!4671 = !DILocation(line: 1004, column: 9, scope: !4672)
!4672 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 1003, column: 11)
!4673 = !DILocation(line: 1008, column: 9, scope: !4672)
!4674 = !DILocation(line: 1011, column: 11, scope: !4675)
!4675 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 1011, column: 11)
!4676 = !DILocation(line: 1011, column: 11, scope: !4618)
!4677 = !DILocation(line: 1012, column: 23, scope: !4675)
!4678 = !DILocation(line: 1012, column: 2, scope: !4675)
!4679 = !DILocation(line: 1019, column: 23, scope: !4519)
!4680 = !DILocation(line: 1019, column: 3, scope: !4519)
!4681 = !DILocation(line: 1020, column: 3, scope: !4519)
!4682 = !DILocation(line: 1021, column: 3, scope: !4519)
!4683 = !DILocation(line: 1023, column: 3, scope: !4519)
!4684 = !DILocation(line: 1024, column: 1, scope: !4519)
!4685 = distinct !DISubprogram(name: "vect_make_slp_decision", scope: !3, file: !3, line: 1066, type: !4686, scopeLine: 1067, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4688)
!4686 = !DISubroutineType(types: !4687)
!4687 = !{null, !3766}
!4688 = !{!4689, !4690, !4691, !4692, !4693, !4694}
!4689 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4685, file: !3, line: 1066, type: !3766)
!4690 = !DILocalVariable(name: "i", scope: !4685, file: !3, line: 1068, type: !17)
!4691 = !DILocalVariable(name: "unrolling_factor", scope: !4685, file: !3, line: 1068, type: !17)
!4692 = !DILocalVariable(name: "slp_instances", scope: !4685, file: !3, line: 1069, type: !3590)
!4693 = !DILocalVariable(name: "instance", scope: !4685, file: !3, line: 1070, type: !3602)
!4694 = !DILocalVariable(name: "decided_to_slp", scope: !4685, file: !3, line: 1071, type: !100)
!4695 = !DILocation(line: 0, scope: !4685)
!4696 = !DILocation(line: 1069, column: 45, scope: !4685)
!4697 = !DILocation(line: 1070, column: 3, scope: !4685)
!4698 = !DILocation(line: 1073, column: 7, scope: !4699)
!4699 = distinct !DILexicalBlock(scope: !4685, file: !3, line: 1073, column: 7)
!4700 = !DILocation(line: 1073, column: 7, scope: !4685)
!4701 = !DILocation(line: 1074, column: 14, scope: !4699)
!4702 = !DILocation(line: 1074, column: 5, scope: !4699)
!4703 = !DILocation(line: 0, scope: !4704)
!4704 = distinct !DILexicalBlock(scope: !4705, file: !3, line: 1076, column: 3)
!4705 = distinct !DILexicalBlock(scope: !4685, file: !3, line: 1076, column: 3)
!4706 = !DILocation(line: 1076, column: 8, scope: !4705)
!4707 = !DILocation(line: 0, scope: !4705)
!4708 = !DILocation(line: 1076, column: 15, scope: !4704)
!4709 = !DILocation(line: 1076, column: 3, scope: !4705)
!4710 = !DILocation(line: 1079, column: 30, scope: !4711)
!4711 = distinct !DILexicalBlock(scope: !4712, file: !3, line: 1079, column: 11)
!4712 = distinct !DILexicalBlock(scope: !4704, file: !3, line: 1077, column: 5)
!4713 = !DILocation(line: 1079, column: 28, scope: !4711)
!4714 = !DILocation(line: 1079, column: 11, scope: !4712)
!4715 = !DILocation(line: 1080, column: 2, scope: !4711)
!4716 = !DILocation(line: 1085, column: 28, scope: !4712)
!4717 = !DILocation(line: 1085, column: 7, scope: !4712)
!4718 = !DILocation(line: 1076, column: 72, scope: !4704)
!4719 = !DILocation(line: 1076, column: 3, scope: !4704)
!4720 = distinct !{!4720, !4709, !4721}
!4721 = !DILocation(line: 1087, column: 5, scope: !4705)
!4722 = !DILocation(line: 1089, column: 3, scope: !4685)
!4723 = !DILocation(line: 1089, column: 48, scope: !4685)
!4724 = !DILocation(line: 1091, column: 7, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4685, file: !3, line: 1091, column: 7)
!4726 = !DILocation(line: 1091, column: 22, scope: !4725)
!4727 = !DILocation(line: 1091, column: 25, scope: !4725)
!4728 = !DILocation(line: 1091, column: 7, scope: !4685)
!4729 = !DILocation(line: 1092, column: 14, scope: !4725)
!4730 = !DILocation(line: 1092, column: 5, scope: !4725)
!4731 = !DILocation(line: 1094, column: 1, scope: !4685)
!4732 = distinct !DISubprogram(name: "VEC_slp_instance_base_iterate", scope: !1757, file: !1757, line: 152, type: !4733, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4738)
!4733 = !DISubroutineType(types: !4734)
!4734 = !{!100, !4735, !17, !4737}
!4735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4736, size: 64)
!4736 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3595)
!4737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3602, size: 64)
!4738 = !{!4739, !4740, !4741}
!4739 = !DILocalVariable(name: "vec_", arg: 1, scope: !4732, file: !1757, line: 152, type: !4735)
!4740 = !DILocalVariable(name: "ix_", arg: 2, scope: !4732, file: !1757, line: 152, type: !17)
!4741 = !DILocalVariable(name: "ptr", arg: 3, scope: !4732, file: !1757, line: 152, type: !4737)
!4742 = !DILocation(line: 0, scope: !4732)
!4743 = !DILocation(line: 152, column: 1, scope: !4744)
!4744 = distinct !DILexicalBlock(scope: !4732, file: !1757, line: 152, column: 1)
!4745 = !DILocation(line: 152, column: 1, scope: !4732)
!4746 = !DILocation(line: 152, column: 1, scope: !4747)
!4747 = distinct !DILexicalBlock(scope: !4744, file: !1757, line: 152, column: 1)
!4748 = !DILocation(line: 152, column: 1, scope: !4749)
!4749 = distinct !DILexicalBlock(scope: !4744, file: !1757, line: 152, column: 1)
!4750 = !DILocation(line: 0, scope: !4744)
!4751 = distinct !DISubprogram(name: "vect_mark_slp_stmts", scope: !3, file: !3, line: 688, type: !4752, scopeLine: 689, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4754)
!4752 = !DISubroutineType(types: !4753)
!4753 = !{null, !3551, !1790, !100}
!4754 = !{!4755, !4756, !4757, !4758, !4759}
!4755 = !DILocalVariable(name: "node", arg: 1, scope: !4751, file: !3, line: 688, type: !3551)
!4756 = !DILocalVariable(name: "mark", arg: 2, scope: !4751, file: !3, line: 688, type: !1790)
!4757 = !DILocalVariable(name: "j", arg: 3, scope: !4751, file: !3, line: 688, type: !100)
!4758 = !DILocalVariable(name: "i", scope: !4751, file: !3, line: 690, type: !100)
!4759 = !DILocalVariable(name: "stmt", scope: !4751, file: !3, line: 691, type: !7)
!4760 = !DILocation(line: 0, scope: !4751)
!4761 = !DILocation(line: 691, column: 3, scope: !4751)
!4762 = !DILocation(line: 693, column: 8, scope: !4763)
!4763 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 693, column: 7)
!4764 = !DILocation(line: 693, column: 7, scope: !4751)
!4765 = !DILocation(line: 0, scope: !4766)
!4766 = distinct !DILexicalBlock(scope: !4767, file: !3, line: 696, column: 3)
!4767 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 696, column: 3)
!4768 = !DILocation(line: 0, scope: !4769)
!4769 = distinct !DILexicalBlock(scope: !4766, file: !3, line: 697, column: 9)
!4770 = !DILocation(line: 696, column: 3, scope: !4767)
!4771 = !DILocation(line: 0, scope: !4767)
!4772 = !DILocation(line: 696, column: 15, scope: !4766)
!4773 = !DILocation(line: 698, column: 7, scope: !4769)
!4774 = !DILocation(line: 698, column: 45, scope: !4769)
!4775 = !DILocation(line: 696, column: 77, scope: !4766)
!4776 = !DILocation(line: 696, column: 3, scope: !4766)
!4777 = distinct !{!4777, !4770, !4778}
!4778 = !DILocation(line: 698, column: 47, scope: !4767)
!4779 = !DILocation(line: 700, column: 24, scope: !4751)
!4780 = !DILocation(line: 697, column: 20, scope: !4769)
!4781 = !DILocation(line: 697, column: 15, scope: !4769)
!4782 = !DILocation(line: 700, column: 3, scope: !4751)
!4783 = !DILocation(line: 701, column: 24, scope: !4751)
!4784 = !DILocation(line: 701, column: 3, scope: !4751)
!4785 = !DILocation(line: 702, column: 1, scope: !4751)
!4786 = distinct !DISubprogram(name: "vect_detect_hybrid_slp", scope: !3, file: !3, line: 1130, type: !4686, scopeLine: 1131, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4787)
!4787 = !{!4788, !4789, !4790, !4791}
!4788 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !4786, file: !3, line: 1130, type: !3766)
!4789 = !DILocalVariable(name: "i", scope: !4786, file: !3, line: 1132, type: !17)
!4790 = !DILocalVariable(name: "slp_instances", scope: !4786, file: !3, line: 1133, type: !3590)
!4791 = !DILocalVariable(name: "instance", scope: !4786, file: !3, line: 1134, type: !3602)
!4792 = !DILocation(line: 0, scope: !4786)
!4793 = !DILocation(line: 1133, column: 45, scope: !4786)
!4794 = !DILocation(line: 1134, column: 3, scope: !4786)
!4795 = !DILocation(line: 1136, column: 7, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4786, file: !3, line: 1136, column: 7)
!4797 = !DILocation(line: 1136, column: 7, scope: !4786)
!4798 = !DILocation(line: 1137, column: 14, scope: !4796)
!4799 = !DILocation(line: 1137, column: 5, scope: !4796)
!4800 = !DILocation(line: 0, scope: !4801)
!4801 = distinct !DILexicalBlock(scope: !4802, file: !3, line: 1139, column: 3)
!4802 = distinct !DILexicalBlock(scope: !4786, file: !3, line: 1139, column: 3)
!4803 = !DILocation(line: 1139, column: 8, scope: !4802)
!4804 = !DILocation(line: 0, scope: !4802)
!4805 = !DILocation(line: 1139, column: 15, scope: !4801)
!4806 = !DILocation(line: 1139, column: 3, scope: !4802)
!4807 = !DILocation(line: 1140, column: 35, scope: !4801)
!4808 = !DILocation(line: 1140, column: 5, scope: !4801)
!4809 = !DILocation(line: 1139, column: 72, scope: !4801)
!4810 = !DILocation(line: 1139, column: 3, scope: !4801)
!4811 = distinct !{!4811, !4806, !4812}
!4812 = !DILocation(line: 1140, column: 63, scope: !4802)
!4813 = !DILocation(line: 1141, column: 1, scope: !4786)
!4814 = distinct !DISubprogram(name: "vect_detect_hybrid_slp_stmts", scope: !3, file: !3, line: 1101, type: !4406, scopeLine: 1102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4815)
!4815 = !{!4816, !4817, !4818, !4819, !4827, !4828}
!4816 = !DILocalVariable(name: "node", arg: 1, scope: !4814, file: !3, line: 1101, type: !3551)
!4817 = !DILocalVariable(name: "i", scope: !4814, file: !3, line: 1103, type: !100)
!4818 = !DILocalVariable(name: "stmt", scope: !4814, file: !3, line: 1104, type: !7)
!4819 = !DILocalVariable(name: "imm_iter", scope: !4814, file: !3, line: 1105, type: !4820)
!4820 = !DIDerivedType(tag: DW_TAG_typedef, name: "imm_use_iterator", file: !529, line: 249, baseType: !4821)
!4821 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "immediate_use_iterator_d", file: !529, line: 238, size: 448, elements: !4822)
!4822 = !{!4823, !4824, !4825, !4826}
!4823 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !4821, file: !529, line: 241, baseType: !3604, size: 64)
!4824 = !DIDerivedType(tag: DW_TAG_member, name: "end_p", scope: !4821, file: !529, line: 243, baseType: !3604, size: 64, offset: 64)
!4825 = !DIDerivedType(tag: DW_TAG_member, name: "iter_node", scope: !4821, file: !529, line: 245, baseType: !3605, size: 256, offset: 128)
!4826 = !DIDerivedType(tag: DW_TAG_member, name: "next_imm_name", scope: !4821, file: !529, line: 248, baseType: !3604, size: 64, offset: 384)
!4827 = !DILocalVariable(name: "use_stmt", scope: !4814, file: !3, line: 1106, type: !7)
!4828 = !DILocalVariable(name: "stmt_vinfo", scope: !4814, file: !3, line: 1107, type: !3759)
!4829 = !DILocation(line: 0, scope: !4814)
!4830 = !DILocation(line: 1104, column: 3, scope: !4814)
!4831 = !DILocation(line: 1105, column: 3, scope: !4814)
!4832 = !DILocation(line: 1109, column: 8, scope: !4833)
!4833 = distinct !DILexicalBlock(scope: !4814, file: !3, line: 1109, column: 7)
!4834 = !DILocation(line: 1109, column: 7, scope: !4814)
!4835 = !DILocation(line: 0, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4837, file: !3, line: 1112, column: 3)
!4837 = distinct !DILexicalBlock(scope: !4814, file: !3, line: 1112, column: 3)
!4838 = !DILocation(line: 1112, column: 3, scope: !4837)
!4839 = !DILocation(line: 0, scope: !4837)
!4840 = !DILocation(line: 1112, column: 15, scope: !4836)
!4841 = !DILocation(line: 1113, column: 9, scope: !4842)
!4842 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 1113, column: 9)
!4843 = !DILocation(line: 1114, column: 2, scope: !4842)
!4844 = !DILocation(line: 1114, column: 5, scope: !4842)
!4845 = !DILocation(line: 1114, column: 37, scope: !4842)
!4846 = !DILocation(line: 1113, column: 9, scope: !4836)
!4847 = !DILocation(line: 1115, column: 7, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4842, file: !3, line: 1115, column: 7)
!4849 = !DILocation(line: 0, scope: !4848)
!4850 = !DILocation(line: 1115, column: 7, scope: !4851)
!4851 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 1115, column: 7)
!4852 = !DILocation(line: 1116, column: 20, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 1116, column: 6)
!4854 = !DILocation(line: 1116, column: 18, scope: !4853)
!4855 = !DILocation(line: 1117, column: 6, scope: !4853)
!4856 = !DILocation(line: 1117, column: 10, scope: !4853)
!4857 = !DILocation(line: 1118, column: 13, scope: !4853)
!4858 = !DILocation(line: 1118, column: 17, scope: !4853)
!4859 = !DILocation(line: 1119, column: 17, scope: !4853)
!4860 = !DILocation(line: 1119, column: 20, scope: !4853)
!4861 = !DILocation(line: 1116, column: 6, scope: !4851)
!4862 = !DILocation(line: 1120, column: 4, scope: !4853)
!4863 = distinct !{!4863, !4847, !4864}
!4864 = !DILocation(line: 1120, column: 40, scope: !4848)
!4865 = !DILocation(line: 1112, column: 77, scope: !4836)
!4866 = !DILocation(line: 1112, column: 3, scope: !4836)
!4867 = distinct !{!4867, !4838, !4868}
!4868 = !DILocation(line: 1120, column: 40, scope: !4837)
!4869 = !DILocation(line: 1122, column: 33, scope: !4814)
!4870 = !DILocation(line: 1122, column: 3, scope: !4814)
!4871 = !DILocation(line: 1123, column: 33, scope: !4814)
!4872 = !DILocation(line: 1123, column: 3, scope: !4814)
!4873 = !DILocation(line: 1124, column: 1, scope: !4814)
!4874 = distinct !DISubprogram(name: "vect_slp_analyze_bb", scope: !3, file: !3, line: 1265, type: !4875, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !4877)
!4875 = !DISubroutineType(types: !4876)
!4876 = !{!3606, !589}
!4877 = !{!4878, !4879, !4880, !4881, !4882, !4883, !4884, !4885, !4886}
!4878 = !DILocalVariable(name: "bb", arg: 1, scope: !4874, file: !3, line: 1265, type: !589)
!4879 = !DILocalVariable(name: "bb_vinfo", scope: !4874, file: !3, line: 1267, type: !3606)
!4880 = !DILocalVariable(name: "ddrs", scope: !4874, file: !3, line: 1268, type: !3686)
!4881 = !DILocalVariable(name: "slp_instances", scope: !4874, file: !3, line: 1269, type: !3590)
!4882 = !DILocalVariable(name: "instance", scope: !4874, file: !3, line: 1270, type: !3602)
!4883 = !DILocalVariable(name: "i", scope: !4874, file: !3, line: 1271, type: !100)
!4884 = !DILocalVariable(name: "insns", scope: !4874, file: !3, line: 1271, type: !100)
!4885 = !DILocalVariable(name: "gsi", scope: !4874, file: !3, line: 1272, type: !4306)
!4886 = !DILocalVariable(name: "stmt", scope: !4887, file: !3, line: 1279, type: !7)
!4887 = distinct !DILexicalBlock(scope: !4888, file: !3, line: 1278, column: 5)
!4888 = distinct !DILexicalBlock(scope: !4889, file: !3, line: 1277, column: 3)
!4889 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1277, column: 3)
!4890 = !DILocation(line: 0, scope: !4874)
!4891 = !DILocation(line: 1270, column: 3, scope: !4874)
!4892 = !DILocation(line: 1272, column: 3, scope: !4874)
!4893 = !DILocation(line: 1274, column: 7, scope: !4894)
!4894 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1274, column: 7)
!4895 = !DILocation(line: 1274, column: 7, scope: !4874)
!4896 = !DILocation(line: 1275, column: 14, scope: !4894)
!4897 = !DILocation(line: 1275, column: 5, scope: !4894)
!4898 = !DILocation(line: 1277, column: 14, scope: !4889)
!4899 = !DILocation(line: 1277, column: 8, scope: !4889)
!4900 = !DILocation(line: 1271, column: 10, scope: !4874)
!4901 = !DILocation(line: 1277, column: 34, scope: !4888)
!4902 = !DILocation(line: 1277, column: 33, scope: !4888)
!4903 = !DILocation(line: 1277, column: 3, scope: !4889)
!4904 = !DILocation(line: 1279, column: 21, scope: !4887)
!4905 = !DILocation(line: 0, scope: !4887)
!4906 = !DILocation(line: 1280, column: 12, scope: !4907)
!4907 = distinct !DILexicalBlock(scope: !4887, file: !3, line: 1280, column: 11)
!4908 = !DILocation(line: 1281, column: 4, scope: !4907)
!4909 = !DILocation(line: 1281, column: 8, scope: !4907)
!4910 = !DILocation(line: 1282, column: 4, scope: !4907)
!4911 = !DILocation(line: 1282, column: 7, scope: !4907)
!4912 = !DILocation(line: 1282, column: 26, scope: !4907)
!4913 = !DILocation(line: 1280, column: 11, scope: !4887)
!4914 = !DILocation(line: 1277, column: 51, scope: !4888)
!4915 = !DILocation(line: 1277, column: 3, scope: !4888)
!4916 = distinct !{!4916, !4903, !4917}
!4917 = !DILocation(line: 1284, column: 5, scope: !4889)
!4918 = !DILocation(line: 1286, column: 15, scope: !4919)
!4919 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1286, column: 7)
!4920 = !DILocation(line: 1286, column: 13, scope: !4919)
!4921 = !DILocation(line: 1286, column: 7, scope: !4874)
!4922 = !DILocation(line: 1288, column: 11, scope: !4923)
!4923 = distinct !DILexicalBlock(scope: !4924, file: !3, line: 1288, column: 11)
!4924 = distinct !DILexicalBlock(scope: !4919, file: !3, line: 1287, column: 5)
!4925 = !DILocation(line: 1288, column: 11, scope: !4924)
!4926 = !DILocation(line: 1289, column: 18, scope: !4923)
!4927 = !DILocation(line: 1289, column: 9, scope: !4923)
!4928 = !DILocation(line: 1295, column: 14, scope: !4874)
!4929 = !DILocation(line: 1296, column: 8, scope: !4930)
!4930 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1296, column: 7)
!4931 = !DILocation(line: 1296, column: 7, scope: !4874)
!4932 = !DILocation(line: 1299, column: 8, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1299, column: 7)
!4934 = !DILocation(line: 1299, column: 7, scope: !4874)
!4935 = !DILocation(line: 1301, column: 11, scope: !4936)
!4936 = distinct !DILexicalBlock(scope: !4937, file: !3, line: 1301, column: 11)
!4937 = distinct !DILexicalBlock(scope: !4933, file: !3, line: 1300, column: 5)
!4938 = !DILocation(line: 1301, column: 11, scope: !4937)
!4939 = !DILocation(line: 1302, column: 18, scope: !4936)
!4940 = !DILocation(line: 1302, column: 9, scope: !4936)
!4941 = !DILocation(line: 1305, column: 7, scope: !4937)
!4942 = !DILocation(line: 1306, column: 7, scope: !4937)
!4943 = !DILocation(line: 1309, column: 10, scope: !4874)
!4944 = !DILocation(line: 1310, column: 8, scope: !4945)
!4945 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1310, column: 7)
!4946 = !DILocation(line: 1310, column: 7, scope: !4874)
!4947 = !DILocation(line: 1312, column: 11, scope: !4948)
!4948 = distinct !DILexicalBlock(scope: !4949, file: !3, line: 1312, column: 11)
!4949 = distinct !DILexicalBlock(scope: !4945, file: !3, line: 1311, column: 5)
!4950 = !DILocation(line: 1312, column: 11, scope: !4949)
!4951 = !DILocation(line: 1313, column: 18, scope: !4948)
!4952 = !DILocation(line: 1313, column: 9, scope: !4948)
!4953 = !DILocation(line: 1316, column: 7, scope: !4949)
!4954 = !DILocation(line: 1317, column: 7, scope: !4949)
!4955 = !DILocation(line: 1320, column: 8, scope: !4956)
!4956 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1320, column: 7)
!4957 = !DILocation(line: 1320, column: 7, scope: !4874)
!4958 = !DILocation(line: 1322, column: 11, scope: !4959)
!4959 = distinct !DILexicalBlock(scope: !4960, file: !3, line: 1322, column: 11)
!4960 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 1321, column: 5)
!4961 = !DILocation(line: 1322, column: 11, scope: !4960)
!4962 = !DILocation(line: 1323, column: 18, scope: !4959)
!4963 = !DILocation(line: 1323, column: 9, scope: !4959)
!4964 = !DILocation(line: 1326, column: 7, scope: !4960)
!4965 = !DILocation(line: 1327, column: 7, scope: !4960)
!4966 = !DILocation(line: 1330, column: 9, scope: !4967)
!4967 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1330, column: 8)
!4968 = !DILocation(line: 1330, column: 8, scope: !4874)
!4969 = !DILocation(line: 1332, column: 10, scope: !4970)
!4970 = distinct !DILexicalBlock(scope: !4971, file: !3, line: 1332, column: 10)
!4971 = distinct !DILexicalBlock(scope: !4967, file: !3, line: 1331, column: 5)
!4972 = !DILocation(line: 1332, column: 10, scope: !4971)
!4973 = !DILocation(line: 1333, column: 17, scope: !4970)
!4974 = !DILocation(line: 1333, column: 8, scope: !4970)
!4975 = !DILocation(line: 1336, column: 7, scope: !4971)
!4976 = !DILocation(line: 1337, column: 7, scope: !4971)
!4977 = !DILocation(line: 1340, column: 8, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1340, column: 7)
!4979 = !DILocation(line: 1340, column: 7, scope: !4874)
!4980 = !DILocation(line: 1342, column: 10, scope: !4981)
!4981 = distinct !DILexicalBlock(scope: !4982, file: !3, line: 1342, column: 10)
!4982 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1341, column: 5)
!4983 = !DILocation(line: 1342, column: 10, scope: !4982)
!4984 = !DILocation(line: 1343, column: 17, scope: !4981)
!4985 = !DILocation(line: 1343, column: 8, scope: !4981)
!4986 = !DILocation(line: 1346, column: 7, scope: !4982)
!4987 = !DILocation(line: 1347, column: 7, scope: !4982)
!4988 = !DILocation(line: 1350, column: 9, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1350, column: 8)
!4990 = !DILocation(line: 1350, column: 8, scope: !4874)
!4991 = !DILocation(line: 1352, column: 11, scope: !4992)
!4992 = distinct !DILexicalBlock(scope: !4993, file: !3, line: 1352, column: 11)
!4993 = distinct !DILexicalBlock(scope: !4989, file: !3, line: 1351, column: 5)
!4994 = !DILocation(line: 1352, column: 11, scope: !4993)
!4995 = !DILocation(line: 1353, column: 18, scope: !4992)
!4996 = !DILocation(line: 1353, column: 9, scope: !4992)
!4997 = !DILocation(line: 1356, column: 7, scope: !4993)
!4998 = !DILocation(line: 1357, column: 7, scope: !4993)
!4999 = !DILocation(line: 1362, column: 8, scope: !5000)
!5000 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1362, column: 7)
!5001 = !DILocation(line: 1362, column: 7, scope: !4874)
!5002 = !DILocation(line: 1364, column: 11, scope: !5003)
!5003 = distinct !DILexicalBlock(scope: !5004, file: !3, line: 1364, column: 11)
!5004 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1363, column: 5)
!5005 = !DILocation(line: 1364, column: 11, scope: !5004)
!5006 = !DILocation(line: 1365, column: 18, scope: !5003)
!5007 = !DILocation(line: 1365, column: 9, scope: !5003)
!5008 = !DILocation(line: 1368, column: 7, scope: !5004)
!5009 = !DILocation(line: 1369, column: 7, scope: !5004)
!5010 = !DILocation(line: 1372, column: 19, scope: !4874)
!5011 = !DILocation(line: 0, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !5013, file: !3, line: 1376, column: 3)
!5013 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1376, column: 3)
!5014 = !DILocation(line: 1376, column: 8, scope: !5013)
!5015 = !DILocation(line: 0, scope: !5013)
!5016 = !DILocation(line: 1376, column: 15, scope: !5012)
!5017 = !DILocation(line: 1376, column: 3, scope: !5013)
!5018 = !DILocation(line: 1378, column: 28, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 1377, column: 5)
!5020 = !DILocation(line: 1378, column: 7, scope: !5019)
!5021 = !DILocation(line: 1379, column: 37, scope: !5019)
!5022 = !DILocation(line: 1379, column: 7, scope: !5019)
!5023 = !DILocation(line: 1376, column: 72, scope: !5012)
!5024 = !DILocation(line: 1376, column: 3, scope: !5012)
!5025 = distinct !{!5025, !5017, !5026}
!5026 = !DILocation(line: 1380, column: 5, scope: !5013)
!5027 = !DILocation(line: 1382, column: 8, scope: !5028)
!5028 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1382, column: 7)
!5029 = !DILocation(line: 1382, column: 7, scope: !4874)
!5030 = !DILocation(line: 1384, column: 11, scope: !5031)
!5031 = distinct !DILexicalBlock(scope: !5032, file: !3, line: 1384, column: 11)
!5032 = distinct !DILexicalBlock(scope: !5028, file: !3, line: 1383, column: 5)
!5033 = !DILocation(line: 1384, column: 11, scope: !5032)
!5034 = !DILocation(line: 1385, column: 18, scope: !5031)
!5035 = !DILocation(line: 1385, column: 9, scope: !5031)
!5036 = !DILocation(line: 1387, column: 7, scope: !5032)
!5037 = !DILocation(line: 1388, column: 7, scope: !5032)
!5038 = !DILocation(line: 1391, column: 7, scope: !5039)
!5039 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 1391, column: 7)
!5040 = !DILocation(line: 1391, column: 7, scope: !4874)
!5041 = !DILocation(line: 1392, column: 14, scope: !5039)
!5042 = !DILocation(line: 1392, column: 5, scope: !5039)
!5043 = !DILocation(line: 1395, column: 1, scope: !4874)
!5044 = distinct !DISubprogram(name: "is_gimple_debug", scope: !11, file: !11, line: 3249, type: !5045, scopeLine: 3250, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5047)
!5045 = !DISubroutineType(types: !5046)
!5046 = !{!6, !4377}
!5047 = !{!5048}
!5048 = !DILocalVariable(name: "gs", arg: 1, scope: !5044, file: !11, line: 3249, type: !4377)
!5049 = !DILocation(line: 0, scope: !5044)
!5050 = !DILocation(line: 3251, column: 10, scope: !5044)
!5051 = !DILocation(line: 3251, column: 27, scope: !5044)
!5052 = !DILocation(line: 3251, column: 3, scope: !5044)
!5053 = distinct !DISubprogram(name: "gimple_nop_p", scope: !11, file: !11, line: 4304, type: !5045, scopeLine: 4305, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5054)
!5054 = !{!5055}
!5055 = !DILocalVariable(name: "g", arg: 1, scope: !5053, file: !11, line: 4304, type: !4377)
!5056 = !DILocation(line: 0, scope: !5053)
!5057 = !DILocation(line: 4306, column: 10, scope: !5053)
!5058 = !DILocation(line: 4306, column: 26, scope: !5053)
!5059 = !DILocation(line: 4306, column: 3, scope: !5053)
!5060 = distinct !DISubprogram(name: "gimple_code", scope: !11, file: !11, line: 1052, type: !5061, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5063)
!5061 = !DISubroutineType(types: !5062)
!5062 = !{!3477, !4377}
!5063 = !{!5064}
!5064 = !DILocalVariable(name: "g", arg: 1, scope: !5060, file: !11, line: 1052, type: !4377)
!5065 = !DILocation(line: 0, scope: !5060)
!5066 = !DILocation(line: 1054, column: 20, scope: !5060)
!5067 = !DILocation(line: 1054, column: 3, scope: !5060)
!5068 = distinct !DISubprogram(name: "new_bb_vec_info", scope: !3, file: !3, line: 1148, type: !4875, scopeLine: 1149, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5069)
!5069 = !{!5070, !5071, !5072, !5073}
!5070 = !DILocalVariable(name: "bb", arg: 1, scope: !5068, file: !3, line: 1148, type: !589)
!5071 = !DILocalVariable(name: "res", scope: !5068, file: !3, line: 1150, type: !3606)
!5072 = !DILocalVariable(name: "gsi", scope: !5068, file: !3, line: 1151, type: !4306)
!5073 = !DILocalVariable(name: "stmt", scope: !5074, file: !3, line: 1158, type: !7)
!5074 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 1157, column: 5)
!5075 = distinct !DILexicalBlock(scope: !5076, file: !3, line: 1156, column: 3)
!5076 = distinct !DILexicalBlock(scope: !5068, file: !3, line: 1156, column: 3)
!5077 = !DILocation(line: 0, scope: !5068)
!5078 = !DILocation(line: 1151, column: 3, scope: !5068)
!5079 = !DILocation(line: 1153, column: 23, scope: !5068)
!5080 = !DILocation(line: 1153, column: 9, scope: !5068)
!5081 = !DILocation(line: 1154, column: 3, scope: !5068)
!5082 = !DILocation(line: 1154, column: 21, scope: !5068)
!5083 = !DILocation(line: 1156, column: 14, scope: !5076)
!5084 = !DILocation(line: 1156, column: 8, scope: !5076)
!5085 = !DILocation(line: 1156, column: 34, scope: !5075)
!5086 = !DILocation(line: 1156, column: 33, scope: !5075)
!5087 = !DILocation(line: 1156, column: 3, scope: !5076)
!5088 = !DILocation(line: 1158, column: 21, scope: !5074)
!5089 = !DILocation(line: 0, scope: !5074)
!5090 = !DILocation(line: 1159, column: 7, scope: !5074)
!5091 = !DILocation(line: 1160, column: 33, scope: !5074)
!5092 = !DILocation(line: 1160, column: 7, scope: !5074)
!5093 = !DILocation(line: 1156, column: 51, scope: !5075)
!5094 = !DILocation(line: 1156, column: 3, scope: !5075)
!5095 = distinct !{!5095, !5087, !5096}
!5096 = !DILocation(line: 1161, column: 5, scope: !5076)
!5097 = !DILocation(line: 1163, column: 35, scope: !5068)
!5098 = !DILocation(line: 1163, column: 3, scope: !5068)
!5099 = !DILocation(line: 1163, column: 33, scope: !5068)
!5100 = !DILocation(line: 1164, column: 34, scope: !5068)
!5101 = !DILocation(line: 1164, column: 3, scope: !5068)
!5102 = !DILocation(line: 1164, column: 32, scope: !5068)
!5103 = !DILocation(line: 1166, column: 7, scope: !5068)
!5104 = !DILocation(line: 1166, column: 11, scope: !5068)
!5105 = !DILocation(line: 1168, column: 1, scope: !5068)
!5106 = !DILocation(line: 1167, column: 3, scope: !5068)
!5107 = distinct !DISubprogram(name: "destroy_bb_vec_info", scope: !3, file: !3, line: 1175, type: !5108, scopeLine: 1176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5110)
!5108 = !DISubroutineType(types: !5109)
!5109 = !{null, !3606}
!5110 = !{!5111, !5112, !5113, !5114, !5118}
!5111 = !DILocalVariable(name: "bb_vinfo", arg: 1, scope: !5107, file: !3, line: 1175, type: !3606)
!5112 = !DILocalVariable(name: "bb", scope: !5107, file: !3, line: 1177, type: !589)
!5113 = !DILocalVariable(name: "si", scope: !5107, file: !3, line: 1178, type: !4306)
!5114 = !DILocalVariable(name: "stmt", scope: !5115, file: !3, line: 1187, type: !7)
!5115 = distinct !DILexicalBlock(scope: !5116, file: !3, line: 1186, column: 5)
!5116 = distinct !DILexicalBlock(scope: !5117, file: !3, line: 1185, column: 3)
!5117 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 1185, column: 3)
!5118 = !DILocalVariable(name: "stmt_info", scope: !5115, file: !3, line: 1188, type: !3759)
!5119 = !DILocation(line: 0, scope: !5107)
!5120 = !DILocation(line: 1178, column: 3, scope: !5107)
!5121 = !DILocation(line: 1180, column: 8, scope: !5122)
!5122 = distinct !DILexicalBlock(scope: !5107, file: !3, line: 1180, column: 7)
!5123 = !DILocation(line: 1180, column: 7, scope: !5107)
!5124 = !DILocation(line: 1183, column: 8, scope: !5107)
!5125 = !DILocation(line: 1185, column: 13, scope: !5117)
!5126 = !DILocation(line: 1185, column: 8, scope: !5117)
!5127 = !DILocation(line: 1185, column: 33, scope: !5116)
!5128 = !DILocation(line: 1185, column: 32, scope: !5116)
!5129 = !DILocation(line: 1185, column: 3, scope: !5117)
!5130 = !DILocation(line: 1187, column: 21, scope: !5115)
!5131 = !DILocation(line: 0, scope: !5115)
!5132 = !DILocation(line: 1188, column: 33, scope: !5115)
!5133 = !DILocation(line: 1190, column: 11, scope: !5134)
!5134 = distinct !DILexicalBlock(scope: !5115, file: !3, line: 1190, column: 11)
!5135 = !DILocation(line: 1190, column: 11, scope: !5115)
!5136 = !DILocation(line: 1192, column: 9, scope: !5134)
!5137 = !DILocation(line: 1185, column: 49, scope: !5116)
!5138 = !DILocation(line: 1185, column: 3, scope: !5116)
!5139 = distinct !{!5139, !5129, !5140}
!5140 = !DILocation(line: 1193, column: 5, scope: !5117)
!5141 = !DILocation(line: 1195, column: 3, scope: !5107)
!5142 = !DILocation(line: 1196, column: 3, scope: !5107)
!5143 = !DILocation(line: 1197, column: 9, scope: !5107)
!5144 = !DILocation(line: 1197, column: 3, scope: !5107)
!5145 = !DILocation(line: 1198, column: 7, scope: !5107)
!5146 = !DILocation(line: 1198, column: 11, scope: !5107)
!5147 = !DILocation(line: 1199, column: 1, scope: !5107)
!5148 = distinct !DISubprogram(name: "VEC_ddr_p_base_length", scope: !3616, file: !3616, line: 332, type: !5149, scopeLine: 332, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5153)
!5149 = !DISubroutineType(types: !5150)
!5150 = !{!17, !5151}
!5151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5152, size: 64)
!5152 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3691)
!5153 = !{!5154}
!5154 = !DILocalVariable(name: "vec_", arg: 1, scope: !5148, file: !3616, line: 332, type: !5151)
!5155 = !DILocation(line: 0, scope: !5148)
!5156 = !DILocation(line: 332, column: 1, scope: !5148)
!5157 = distinct !DISubprogram(name: "vect_mark_slp_stmts_relevant", scope: !3, file: !3, line: 708, type: !4406, scopeLine: 709, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5158)
!5158 = !{!5159, !5160, !5161, !5162}
!5159 = !DILocalVariable(name: "node", arg: 1, scope: !5157, file: !3, line: 708, type: !3551)
!5160 = !DILocalVariable(name: "i", scope: !5157, file: !3, line: 710, type: !100)
!5161 = !DILocalVariable(name: "stmt", scope: !5157, file: !3, line: 711, type: !7)
!5162 = !DILocalVariable(name: "stmt_info", scope: !5157, file: !3, line: 712, type: !3759)
!5163 = !DILocation(line: 0, scope: !5157)
!5164 = !DILocation(line: 711, column: 3, scope: !5157)
!5165 = !DILocation(line: 714, column: 8, scope: !5166)
!5166 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 714, column: 7)
!5167 = !DILocation(line: 714, column: 7, scope: !5157)
!5168 = !DILocation(line: 0, scope: !5169)
!5169 = distinct !DILexicalBlock(scope: !5170, file: !3, line: 717, column: 3)
!5170 = distinct !DILexicalBlock(scope: !5157, file: !3, line: 717, column: 3)
!5171 = !DILocation(line: 717, column: 3, scope: !5170)
!5172 = !DILocation(line: 0, scope: !5170)
!5173 = !DILocation(line: 717, column: 15, scope: !5169)
!5174 = !DILocation(line: 719, column: 35, scope: !5175)
!5175 = distinct !DILexicalBlock(scope: !5169, file: !3, line: 718, column: 5)
!5176 = !DILocation(line: 719, column: 19, scope: !5175)
!5177 = !DILocation(line: 720, column: 7, scope: !5175)
!5178 = !DILocation(line: 722, column: 39, scope: !5175)
!5179 = !DILocation(line: 717, column: 77, scope: !5169)
!5180 = !DILocation(line: 717, column: 3, scope: !5169)
!5181 = distinct !{!5181, !5171, !5182}
!5182 = !DILocation(line: 723, column: 5, scope: !5170)
!5183 = !DILocation(line: 725, column: 33, scope: !5157)
!5184 = !DILocation(line: 725, column: 3, scope: !5157)
!5185 = !DILocation(line: 726, column: 33, scope: !5157)
!5186 = !DILocation(line: 726, column: 3, scope: !5157)
!5187 = !DILocation(line: 727, column: 1, scope: !5157)
!5188 = distinct !DISubprogram(name: "vect_slp_analyze_operations", scope: !3, file: !3, line: 1237, type: !5189, scopeLine: 1238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5191)
!5189 = !DISubroutineType(types: !5190)
!5190 = !{!6, !3606}
!5191 = !{!5192, !5193, !5194, !5195}
!5192 = !DILocalVariable(name: "bb_vinfo", arg: 1, scope: !5188, file: !3, line: 1237, type: !3606)
!5193 = !DILocalVariable(name: "slp_instances", scope: !5188, file: !3, line: 1239, type: !3590)
!5194 = !DILocalVariable(name: "instance", scope: !5188, file: !3, line: 1240, type: !3602)
!5195 = !DILocalVariable(name: "i", scope: !5188, file: !3, line: 1241, type: !100)
!5196 = !DILocation(line: 0, scope: !5188)
!5197 = !DILocation(line: 1239, column: 45, scope: !5188)
!5198 = !DILocation(line: 1240, column: 3, scope: !5188)
!5199 = !DILocation(line: 0, scope: !5200)
!5200 = distinct !DILexicalBlock(scope: !5201, file: !3, line: 1243, column: 3)
!5201 = distinct !DILexicalBlock(scope: !5188, file: !3, line: 1243, column: 3)
!5202 = !DILocation(line: 1243, column: 8, scope: !5201)
!5203 = !DILocation(line: 0, scope: !5201)
!5204 = !DILocation(line: 1243, column: 15, scope: !5200)
!5205 = !DILocation(line: 1243, column: 3, scope: !5201)
!5206 = !DILocation(line: 1246, column: 46, scope: !5207)
!5207 = distinct !DILexicalBlock(scope: !5208, file: !3, line: 1245, column: 11)
!5208 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 1244, column: 5)
!5209 = !DILocation(line: 1245, column: 12, scope: !5207)
!5210 = !DILocation(line: 1245, column: 11, scope: !5208)
!5211 = !DILocation(line: 1248, column: 29, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5207, file: !3, line: 1247, column: 9)
!5213 = !DILocation(line: 1248, column: 5, scope: !5212)
!5214 = !DILocation(line: 1249, column: 11, scope: !5212)
!5215 = !DILocation(line: 1250, column: 2, scope: !5212)
!5216 = !DILocation(line: 1252, column: 10, scope: !5207)
!5217 = !DILocation(line: 1243, column: 3, scope: !5200)
!5218 = distinct !{!5218, !5205, !5219}
!5219 = !DILocation(line: 1253, column: 5, scope: !5201)
!5220 = !DILocation(line: 1255, column: 8, scope: !5221)
!5221 = distinct !DILexicalBlock(scope: !5188, file: !3, line: 1255, column: 7)
!5222 = !DILocation(line: 1259, column: 1, scope: !5188)
!5223 = distinct !DISubprogram(name: "vect_update_slp_costs_according_to_vf", scope: !3, file: !3, line: 1406, type: !4686, scopeLine: 1407, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5224)
!5224 = !{!5225, !5226, !5227, !5228, !5229}
!5225 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !5223, file: !3, line: 1406, type: !3766)
!5226 = !DILocalVariable(name: "i", scope: !5223, file: !3, line: 1408, type: !17)
!5227 = !DILocalVariable(name: "vf", scope: !5223, file: !3, line: 1408, type: !17)
!5228 = !DILocalVariable(name: "slp_instances", scope: !5223, file: !3, line: 1409, type: !3590)
!5229 = !DILocalVariable(name: "instance", scope: !5223, file: !3, line: 1410, type: !3602)
!5230 = !DILocation(line: 0, scope: !5223)
!5231 = !DILocation(line: 1408, column: 24, scope: !5223)
!5232 = !DILocation(line: 1409, column: 45, scope: !5223)
!5233 = !DILocation(line: 1410, column: 3, scope: !5223)
!5234 = !DILocation(line: 1412, column: 7, scope: !5235)
!5235 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1412, column: 7)
!5236 = !DILocation(line: 1412, column: 7, scope: !5223)
!5237 = !DILocation(line: 1413, column: 14, scope: !5235)
!5238 = !DILocation(line: 1413, column: 5, scope: !5235)
!5239 = !DILocation(line: 0, scope: !5240)
!5240 = distinct !DILexicalBlock(scope: !5241, file: !3, line: 1415, column: 3)
!5241 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 1415, column: 3)
!5242 = !DILocation(line: 1415, column: 8, scope: !5241)
!5243 = !DILocation(line: 0, scope: !5241)
!5244 = !DILocation(line: 1415, column: 15, scope: !5240)
!5245 = !DILocation(line: 1415, column: 3, scope: !5241)
!5246 = !DILocation(line: 1418, column: 9, scope: !5240)
!5247 = !DILocation(line: 1418, column: 7, scope: !5240)
!5248 = !DILocation(line: 1417, column: 5, scope: !5240)
!5249 = !DILocation(line: 1417, column: 49, scope: !5240)
!5250 = !DILocation(line: 1415, column: 72, scope: !5240)
!5251 = !DILocation(line: 1415, column: 3, scope: !5240)
!5252 = distinct !{!5252, !5245, !5253}
!5253 = !DILocation(line: 1418, column: 9, scope: !5241)
!5254 = !DILocation(line: 1419, column: 1, scope: !5223)
!5255 = distinct !DISubprogram(name: "vect_get_slp_defs", scope: !3, file: !3, line: 1571, type: !5256, scopeLine: 1573, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5259)
!5256 = !DISubroutineType(types: !5257)
!5257 = !{null, !3551, !5258, !5258}
!5258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3648, size: 64)
!5259 = !{!5260, !5261, !5262, !5263, !5264, !5265, !5266, !5267}
!5260 = !DILocalVariable(name: "slp_node", arg: 1, scope: !5255, file: !3, line: 1571, type: !3551)
!5261 = !DILocalVariable(name: "vec_oprnds0", arg: 2, scope: !5255, file: !3, line: 1571, type: !5258)
!5262 = !DILocalVariable(name: "vec_oprnds1", arg: 3, scope: !5255, file: !3, line: 1572, type: !5258)
!5263 = !DILocalVariable(name: "first_stmt", scope: !5255, file: !3, line: 1574, type: !7)
!5264 = !DILocalVariable(name: "code", scope: !5255, file: !3, line: 1575, type: !1115)
!5265 = !DILocalVariable(name: "number_of_vects", scope: !5255, file: !3, line: 1576, type: !100)
!5266 = !DILocalVariable(name: "lhs_size_unit", scope: !5255, file: !3, line: 1577, type: !295)
!5267 = !DILocalVariable(name: "rhs_size_unit", scope: !5255, file: !3, line: 1577, type: !295)
!5268 = !DILocation(line: 0, scope: !5255)
!5269 = !DILocation(line: 1577, column: 3, scope: !5255)
!5270 = !DILocation(line: 1579, column: 16, scope: !5255)
!5271 = !DILocation(line: 1582, column: 7, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 1582, column: 7)
!5273 = !DILocation(line: 1582, column: 7, scope: !5255)
!5274 = !DILocation(line: 1583, column: 23, scope: !5272)
!5275 = !DILocation(line: 1583, column: 5, scope: !5272)
!5276 = !DILocation(line: 1586, column: 25, scope: !5277)
!5277 = distinct !DILexicalBlock(scope: !5272, file: !3, line: 1585, column: 5)
!5278 = !DILocation(line: 1590, column: 7, scope: !5277)
!5279 = !DILocation(line: 1592, column: 11, scope: !5280)
!5280 = distinct !DILexicalBlock(scope: !5277, file: !3, line: 1592, column: 11)
!5281 = !DILocation(line: 1592, column: 28, scope: !5280)
!5282 = !DILocation(line: 1592, column: 25, scope: !5280)
!5283 = !DILocation(line: 1592, column: 11, scope: !5277)
!5284 = !DILocation(line: 1594, column: 27, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5280, file: !3, line: 1593, column: 9)
!5286 = !DILocation(line: 1595, column: 27, scope: !5285)
!5287 = !DILocation(line: 1596, column: 9, scope: !5285)
!5288 = !DILocation(line: 0, scope: !5272)
!5289 = !DILocation(line: 1600, column: 18, scope: !5255)
!5290 = !DILocation(line: 1600, column: 16, scope: !5255)
!5291 = !DILocation(line: 1604, column: 7, scope: !5292)
!5292 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 1604, column: 7)
!5293 = !DILocation(line: 1604, column: 7, scope: !5255)
!5294 = !DILocation(line: 1606, column: 5, scope: !5292)
!5295 = !DILocation(line: 1609, column: 5, scope: !5292)
!5296 = !DILocation(line: 1611, column: 7, scope: !5297)
!5297 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 1611, column: 7)
!5298 = !DILocation(line: 1611, column: 7, scope: !5255)
!5299 = !DILocation(line: 1616, column: 10, scope: !5255)
!5300 = !DILocation(line: 1617, column: 7, scope: !5301)
!5301 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 1617, column: 7)
!5302 = !DILocation(line: 1617, column: 35, scope: !5301)
!5303 = !DILocation(line: 1617, column: 60, scope: !5301)
!5304 = !DILocation(line: 1617, column: 56, scope: !5301)
!5305 = !DILocation(line: 1622, column: 7, scope: !5306)
!5306 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 1622, column: 7)
!5307 = !DILocation(line: 1622, column: 7, scope: !5255)
!5308 = !DILocation(line: 1623, column: 5, scope: !5306)
!5309 = !DILocation(line: 0, scope: !5306)
!5310 = !DILocation(line: 1627, column: 18, scope: !5255)
!5311 = !DILocation(line: 1627, column: 16, scope: !5255)
!5312 = !DILocation(line: 1629, column: 7, scope: !5313)
!5313 = distinct !DILexicalBlock(scope: !5255, file: !3, line: 1629, column: 7)
!5314 = !DILocation(line: 1629, column: 7, scope: !5255)
!5315 = !DILocation(line: 1631, column: 5, scope: !5313)
!5316 = !DILocation(line: 1634, column: 5, scope: !5313)
!5317 = !DILocation(line: 1635, column: 1, scope: !5255)
!5318 = distinct !DISubprogram(name: "VEC_gimple_base_index", scope: !11, file: !11, line: 33, type: !5319, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5321)
!5319 = !DISubroutineType(types: !5320)
!5320 = !{!7, !4503, !17}
!5321 = !{!5322, !5323}
!5322 = !DILocalVariable(name: "vec_", arg: 1, scope: !5318, file: !11, line: 33, type: !4503)
!5323 = !DILocalVariable(name: "ix_", arg: 2, scope: !5318, file: !11, line: 33, type: !17)
!5324 = !DILocation(line: 0, scope: !5318)
!5325 = !DILocation(line: 33, column: 1, scope: !5318)
!5326 = distinct !DISubprogram(name: "VEC_tree_heap_alloc", scope: !329, file: !329, line: 184, type: !5327, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5329)
!5327 = !DISubroutineType(types: !5328)
!5328 = !{!3648, !100}
!5329 = !{!5330}
!5330 = !DILocalVariable(name: "alloc_", arg: 1, scope: !5326, file: !329, line: 184, type: !100)
!5331 = !DILocation(line: 0, scope: !5326)
!5332 = !DILocation(line: 184, column: 1, scope: !5326)
!5333 = distinct !DISubprogram(name: "vect_get_slp_vect_defs", scope: !3, file: !3, line: 1542, type: !5334, scopeLine: 1543, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5336)
!5334 = !DISubroutineType(types: !5335)
!5335 = !{null, !3551, !5258}
!5336 = !{!5337, !5338, !5339, !5340, !5341}
!5337 = !DILocalVariable(name: "slp_node", arg: 1, scope: !5333, file: !3, line: 1542, type: !3551)
!5338 = !DILocalVariable(name: "vec_oprnds", arg: 2, scope: !5333, file: !3, line: 1542, type: !5258)
!5339 = !DILocalVariable(name: "vec_oprnd", scope: !5333, file: !3, line: 1544, type: !326)
!5340 = !DILocalVariable(name: "vec_def_stmt", scope: !5333, file: !3, line: 1545, type: !7)
!5341 = !DILocalVariable(name: "i", scope: !5333, file: !3, line: 1546, type: !17)
!5342 = !DILocation(line: 0, scope: !5333)
!5343 = !DILocation(line: 1545, column: 3, scope: !5333)
!5344 = !DILocation(line: 1548, column: 3, scope: !5333)
!5345 = !DILocation(line: 1550, column: 8, scope: !5346)
!5346 = distinct !DILexicalBlock(scope: !5333, file: !3, line: 1550, column: 3)
!5347 = !DILocation(line: 0, scope: !5346)
!5348 = !DILocation(line: 1551, column: 8, scope: !5349)
!5349 = distinct !DILexicalBlock(scope: !5346, file: !3, line: 1550, column: 3)
!5350 = !DILocation(line: 1550, column: 3, scope: !5346)
!5351 = !DILocation(line: 1554, column: 7, scope: !5352)
!5352 = distinct !DILexicalBlock(scope: !5349, file: !3, line: 1553, column: 5)
!5353 = !DILocation(line: 1555, column: 35, scope: !5352)
!5354 = !DILocation(line: 1555, column: 19, scope: !5352)
!5355 = !DILocation(line: 1556, column: 7, scope: !5352)
!5356 = !DILocation(line: 1552, column: 9, scope: !5349)
!5357 = !DILocation(line: 1550, column: 3, scope: !5349)
!5358 = distinct !{!5358, !5350, !5359}
!5359 = !DILocation(line: 1557, column: 5, scope: !5346)
!5360 = !DILocation(line: 1558, column: 1, scope: !5333)
!5361 = distinct !DISubprogram(name: "vect_get_constant_vectors", scope: !3, file: !3, line: 1428, type: !5362, scopeLine: 1430, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5364)
!5362 = !DISubroutineType(types: !5363)
!5363 = !{null, !3551, !5258, !17, !17}
!5364 = !{!5365, !5366, !5367, !5368, !5369, !5370, !5371, !5372, !5373, !5374, !5375, !5376, !5377, !5378, !5379, !5380, !5381, !5382, !5383, !5384, !5385, !5386}
!5365 = !DILocalVariable(name: "slp_node", arg: 1, scope: !5361, file: !3, line: 1428, type: !3551)
!5366 = !DILocalVariable(name: "vec_oprnds", arg: 2, scope: !5361, file: !3, line: 1428, type: !5258)
!5367 = !DILocalVariable(name: "op_num", arg: 3, scope: !5361, file: !3, line: 1429, type: !17)
!5368 = !DILocalVariable(name: "number_of_vectors", arg: 4, scope: !5361, file: !3, line: 1429, type: !17)
!5369 = !DILocalVariable(name: "stmts", scope: !5361, file: !3, line: 1431, type: !3535)
!5370 = !DILocalVariable(name: "stmt", scope: !5361, file: !3, line: 1432, type: !7)
!5371 = !DILocalVariable(name: "stmt_vinfo", scope: !5361, file: !3, line: 1433, type: !3759)
!5372 = !DILocalVariable(name: "nunits", scope: !5361, file: !3, line: 1434, type: !100)
!5373 = !DILocalVariable(name: "vec_cst", scope: !5361, file: !3, line: 1435, type: !326)
!5374 = !DILocalVariable(name: "t", scope: !5361, file: !3, line: 1436, type: !326)
!5375 = !DILocalVariable(name: "j", scope: !5361, file: !3, line: 1437, type: !100)
!5376 = !DILocalVariable(name: "number_of_places_left_in_vector", scope: !5361, file: !3, line: 1437, type: !100)
!5377 = !DILocalVariable(name: "vector_type", scope: !5361, file: !3, line: 1438, type: !326)
!5378 = !DILocalVariable(name: "op", scope: !5361, file: !3, line: 1439, type: !326)
!5379 = !DILocalVariable(name: "vop", scope: !5361, file: !3, line: 1439, type: !326)
!5380 = !DILocalVariable(name: "group_size", scope: !5361, file: !3, line: 1440, type: !100)
!5381 = !DILocalVariable(name: "vec_num", scope: !5361, file: !3, line: 1441, type: !17)
!5382 = !DILocalVariable(name: "i", scope: !5361, file: !3, line: 1441, type: !17)
!5383 = !DILocalVariable(name: "number_of_copies", scope: !5361, file: !3, line: 1442, type: !100)
!5384 = !DILocalVariable(name: "voprnds", scope: !5361, file: !3, line: 1443, type: !3648)
!5385 = !DILocalVariable(name: "constant_p", scope: !5361, file: !3, line: 1444, type: !6)
!5386 = !DILocalVariable(name: "is_store", scope: !5361, file: !3, line: 1444, type: !6)
!5387 = !DILocation(line: 0, scope: !5361)
!5388 = !DILocation(line: 1431, column: 31, scope: !5361)
!5389 = !DILocation(line: 1432, column: 3, scope: !5361)
!5390 = !DILocation(line: 1432, column: 17, scope: !5361)
!5391 = !DILocation(line: 1432, column: 10, scope: !5361)
!5392 = !DILocation(line: 1433, column: 30, scope: !5361)
!5393 = !DILocation(line: 1439, column: 3, scope: !5361)
!5394 = !DILocation(line: 1440, column: 20, scope: !5361)
!5395 = !DILocation(line: 1443, column: 3, scope: !5361)
!5396 = !DILocation(line: 1443, column: 31, scope: !5361)
!5397 = !DILocation(line: 1443, column: 21, scope: !5361)
!5398 = !DILocation(line: 1446, column: 7, scope: !5399)
!5399 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 1446, column: 7)
!5400 = !DILocation(line: 1446, column: 7, scope: !5361)
!5401 = !DILocation(line: 1449, column: 12, scope: !5402)
!5402 = distinct !DILexicalBlock(scope: !5399, file: !3, line: 1447, column: 5)
!5403 = !DILocation(line: 1450, column: 5, scope: !5402)
!5404 = !DILocation(line: 1454, column: 36, scope: !5405)
!5405 = distinct !DILexicalBlock(scope: !5399, file: !3, line: 1452, column: 5)
!5406 = !DILocation(line: 1454, column: 12, scope: !5405)
!5407 = !DILocation(line: 0, scope: !5399)
!5408 = !DILocation(line: 1457, column: 7, scope: !5409)
!5409 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 1457, column: 7)
!5410 = !DILocation(line: 1462, column: 46, scope: !5361)
!5411 = !DILocation(line: 1462, column: 17, scope: !5361)
!5412 = !DILocation(line: 1463, column: 3, scope: !5361)
!5413 = !DILocation(line: 1465, column: 12, scope: !5361)
!5414 = !DILocation(line: 1483, column: 22, scope: !5361)
!5415 = !DILocation(line: 1483, column: 65, scope: !5361)
!5416 = !DILocation(line: 0, scope: !5417)
!5417 = distinct !DILexicalBlock(scope: !5418, file: !3, line: 1490, column: 15)
!5418 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 1489, column: 9)
!5419 = distinct !DILexicalBlock(scope: !5420, file: !3, line: 1488, column: 7)
!5420 = distinct !DILexicalBlock(scope: !5421, file: !3, line: 1488, column: 7)
!5421 = distinct !DILexicalBlock(scope: !5422, file: !3, line: 1487, column: 5)
!5422 = distinct !DILexicalBlock(scope: !5423, file: !3, line: 1486, column: 3)
!5423 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 1486, column: 3)
!5424 = !DILocation(line: 1486, column: 8, scope: !5423)
!5425 = !DILocation(line: 1436, column: 8, scope: !5361)
!5426 = !DILocation(line: 0, scope: !5423)
!5427 = !DILocation(line: 1485, column: 35, scope: !5361)
!5428 = !DILocation(line: 1486, column: 17, scope: !5422)
!5429 = !DILocation(line: 1486, column: 3, scope: !5423)
!5430 = !DILocation(line: 1488, column: 12, scope: !5420)
!5431 = !DILocation(line: 0, scope: !5420)
!5432 = !DILocation(line: 1488, column: 32, scope: !5419)
!5433 = !DILocation(line: 1488, column: 7, scope: !5420)
!5434 = !DILocation(line: 1493, column: 18, scope: !5417)
!5435 = !DILocation(line: 1496, column: 15, scope: !5418)
!5436 = !DILocation(line: 1498, column: 42, scope: !5418)
!5437 = !DILocation(line: 1500, column: 47, scope: !5438)
!5438 = distinct !DILexicalBlock(scope: !5418, file: !3, line: 1500, column: 15)
!5439 = !DILocation(line: 1500, column: 15, scope: !5418)
!5440 = !DILocation(line: 1504, column: 12, scope: !5441)
!5441 = distinct !DILexicalBlock(scope: !5438, file: !3, line: 1501, column: 13)
!5442 = !DILocation(line: 1507, column: 13, scope: !5443)
!5443 = distinct !DILexicalBlock(scope: !5441, file: !3, line: 1504, column: 12)
!5444 = !DILocation(line: 1505, column: 13, scope: !5443)
!5445 = !DILocation(line: 1505, column: 3, scope: !5443)
!5446 = !DILocation(line: 0, scope: !5443)
!5447 = !DILocation(line: 1508, column: 15, scope: !5441)
!5448 = !DILocation(line: 1511, column: 13, scope: !5441)
!5449 = !DILocation(line: 0, scope: !5418)
!5450 = !DILocation(line: 1488, column: 7, scope: !5419)
!5451 = distinct !{!5451, !5433, !5452}
!5452 = !DILocation(line: 1512, column: 9, scope: !5420)
!5453 = !DILocation(line: 1486, column: 38, scope: !5422)
!5454 = !DILocation(line: 1491, column: 18, scope: !5417)
!5455 = !DILocation(line: 1486, column: 3, scope: !5422)
!5456 = distinct !{!5456, !5429, !5457}
!5457 = !DILocation(line: 1513, column: 5, scope: !5423)
!5458 = !DILocation(line: 1517, column: 13, scope: !5361)
!5459 = !DILocation(line: 1518, column: 8, scope: !5460)
!5460 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 1518, column: 3)
!5461 = !DILocation(line: 0, scope: !5460)
!5462 = !DILocation(line: 1518, column: 27, scope: !5463)
!5463 = distinct !DILexicalBlock(scope: !5460, file: !3, line: 1518, column: 3)
!5464 = !DILocation(line: 1518, column: 3, scope: !5460)
!5465 = !DILocation(line: 1520, column: 13, scope: !5466)
!5466 = distinct !DILexicalBlock(scope: !5463, file: !3, line: 1519, column: 5)
!5467 = !DILocation(line: 1520, column: 11, scope: !5466)
!5468 = !DILocation(line: 1521, column: 7, scope: !5466)
!5469 = !DILocation(line: 1518, column: 3, scope: !5463)
!5470 = distinct !{!5470, !5464, !5471}
!5471 = !DILocation(line: 1522, column: 5, scope: !5460)
!5472 = !DILocation(line: 1524, column: 3, scope: !5361)
!5473 = !DILocation(line: 1530, column: 3, scope: !5361)
!5474 = !DILocation(line: 1530, column: 30, scope: !5361)
!5475 = !DILocation(line: 1530, column: 28, scope: !5361)
!5476 = !DILocation(line: 1532, column: 7, scope: !5477)
!5477 = distinct !DILexicalBlock(scope: !5478, file: !3, line: 1532, column: 7)
!5478 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 1531, column: 5)
!5479 = !DILocation(line: 0, scope: !5477)
!5480 = !DILocation(line: 1532, column: 19, scope: !5481)
!5481 = distinct !DILexicalBlock(scope: !5477, file: !3, line: 1532, column: 7)
!5482 = !DILocation(line: 1532, column: 64, scope: !5481)
!5483 = !DILocation(line: 1532, column: 59, scope: !5481)
!5484 = distinct !{!5484, !5473, !5485}
!5485 = !DILocation(line: 1534, column: 5, scope: !5361)
!5486 = !DILocation(line: 1533, column: 9, scope: !5481)
!5487 = !DILocation(line: 1532, column: 76, scope: !5481)
!5488 = !DILocation(line: 1532, column: 7, scope: !5481)
!5489 = distinct !{!5489, !5476, !5490}
!5490 = !DILocation(line: 1533, column: 9, scope: !5477)
!5491 = !DILocation(line: 1535, column: 1, scope: !5361)
!5492 = distinct !DISubprogram(name: "vinfo_for_stmt", scope: !1757, file: !1757, line: 623, type: !5493, scopeLine: 624, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5495)
!5493 = !DISubroutineType(types: !5494)
!5494 = !{!3759, !7}
!5495 = !{!5496, !5497}
!5496 = !DILocalVariable(name: "stmt", arg: 1, scope: !5492, file: !1757, line: 623, type: !7)
!5497 = !DILocalVariable(name: "uid", scope: !5492, file: !1757, line: 625, type: !17)
!5498 = !DILocation(line: 0, scope: !5492)
!5499 = !DILocation(line: 625, column: 22, scope: !5492)
!5500 = !DILocation(line: 626, column: 11, scope: !5501)
!5501 = distinct !DILexicalBlock(scope: !5492, file: !1757, line: 626, column: 7)
!5502 = !DILocation(line: 626, column: 7, scope: !5492)
!5503 = !DILocation(line: 629, column: 3, scope: !5492)
!5504 = !DILocation(line: 630, column: 26, scope: !5492)
!5505 = !DILocation(line: 630, column: 10, scope: !5492)
!5506 = !DILocation(line: 630, column: 3, scope: !5492)
!5507 = !DILocation(line: 631, column: 1, scope: !5492)
!5508 = distinct !DISubprogram(name: "gimple_assign_rhs_code", scope: !11, file: !11, line: 1815, type: !5509, scopeLine: 1816, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5511)
!5509 = !DISubroutineType(types: !5510)
!5510 = !{!1115, !4377}
!5511 = !{!5512, !5513}
!5512 = !DILocalVariable(name: "gs", arg: 1, scope: !5508, file: !11, line: 1815, type: !4377)
!5513 = !DILocalVariable(name: "code", scope: !5508, file: !11, line: 1817, type: !1115)
!5514 = !DILocation(line: 0, scope: !5508)
!5515 = !DILocation(line: 1820, column: 10, scope: !5508)
!5516 = !DILocation(line: 1821, column: 7, scope: !5517)
!5517 = distinct !DILexicalBlock(scope: !5508, file: !11, line: 1821, column: 7)
!5518 = !DILocation(line: 1821, column: 35, scope: !5517)
!5519 = !DILocation(line: 1821, column: 7, scope: !5508)
!5520 = !DILocation(line: 1822, column: 12, scope: !5517)
!5521 = !DILocation(line: 1822, column: 5, scope: !5517)
!5522 = !DILocation(line: 1824, column: 3, scope: !5508)
!5523 = distinct !DISubprogram(name: "get_gimple_rhs_class", scope: !11, file: !11, line: 1686, type: !5524, scopeLine: 1687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5526)
!5524 = !DISubroutineType(types: !5525)
!5525 = !{!3515, !1115}
!5526 = !{!5527}
!5527 = !DILocalVariable(name: "code", arg: 1, scope: !5523, file: !11, line: 1686, type: !1115)
!5528 = !DILocation(line: 0, scope: !5523)
!5529 = !DILocation(line: 1688, column: 34, scope: !5523)
!5530 = !DILocation(line: 1688, column: 10, scope: !5523)
!5531 = !DILocation(line: 1688, column: 3, scope: !5523)
!5532 = distinct !DISubprogram(name: "vect_transform_slp_perm_load", scope: !3, file: !3, line: 1789, type: !5533, scopeLine: 1792, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5535)
!5533 = !DISubroutineType(types: !5534)
!5534 = !{!6, !7, !3648, !4386, !100, !3602, !6}
!5535 = !{!5536, !5537, !5538, !5539, !5540, !5541, !5542, !5543, !5544, !5545, !5546, !5547, !5548, !5549, !5550, !5551, !5552, !5553, !5554, !5555, !5556, !5557, !5558, !5559, !5560, !5561, !5562, !5563, !5564, !5565, !5566, !5567, !5568, !5569, !5570, !5571, !5583}
!5536 = !DILocalVariable(name: "stmt", arg: 1, scope: !5532, file: !3, line: 1789, type: !7)
!5537 = !DILocalVariable(name: "dr_chain", arg: 2, scope: !5532, file: !3, line: 1789, type: !3648)
!5538 = !DILocalVariable(name: "gsi", arg: 3, scope: !5532, file: !3, line: 1790, type: !4386)
!5539 = !DILocalVariable(name: "vf", arg: 4, scope: !5532, file: !3, line: 1790, type: !100)
!5540 = !DILocalVariable(name: "slp_node_instance", arg: 5, scope: !5532, file: !3, line: 1791, type: !3602)
!5541 = !DILocalVariable(name: "analyze_only", arg: 6, scope: !5532, file: !3, line: 1791, type: !6)
!5542 = !DILocalVariable(name: "stmt_info", scope: !5532, file: !3, line: 1793, type: !3759)
!5543 = !DILocalVariable(name: "mask_element_type", scope: !5532, file: !3, line: 1794, type: !326)
!5544 = !DILocalVariable(name: "mask_type", scope: !5532, file: !3, line: 1794, type: !326)
!5545 = !DILocalVariable(name: "i", scope: !5532, file: !3, line: 1795, type: !100)
!5546 = !DILocalVariable(name: "j", scope: !5532, file: !3, line: 1795, type: !100)
!5547 = !DILocalVariable(name: "k", scope: !5532, file: !3, line: 1795, type: !100)
!5548 = !DILocalVariable(name: "m", scope: !5532, file: !3, line: 1795, type: !100)
!5549 = !DILocalVariable(name: "scale", scope: !5532, file: !3, line: 1795, type: !100)
!5550 = !DILocalVariable(name: "mask_nunits", scope: !5532, file: !3, line: 1795, type: !100)
!5551 = !DILocalVariable(name: "nunits", scope: !5532, file: !3, line: 1795, type: !100)
!5552 = !DILocalVariable(name: "vec_index", scope: !5532, file: !3, line: 1795, type: !100)
!5553 = !DILocalVariable(name: "scalar_index", scope: !5532, file: !3, line: 1795, type: !100)
!5554 = !DILocalVariable(name: "node", scope: !5532, file: !3, line: 1796, type: !3551)
!5555 = !DILocalVariable(name: "vectype", scope: !5532, file: !3, line: 1797, type: !326)
!5556 = !DILocalVariable(name: "builtin_decl", scope: !5532, file: !3, line: 1797, type: !326)
!5557 = !DILocalVariable(name: "next_scalar_stmt", scope: !5532, file: !3, line: 1798, type: !7)
!5558 = !DILocalVariable(name: "group_size", scope: !5532, file: !3, line: 1799, type: !100)
!5559 = !DILocalVariable(name: "first_mask_element", scope: !5532, file: !3, line: 1800, type: !100)
!5560 = !DILocalVariable(name: "index", scope: !5532, file: !3, line: 1801, type: !100)
!5561 = !DILocalVariable(name: "unroll_factor", scope: !5532, file: !3, line: 1801, type: !100)
!5562 = !DILocalVariable(name: "mask", scope: !5532, file: !3, line: 1801, type: !1752)
!5563 = !DILocalVariable(name: "current_mask_element", scope: !5532, file: !3, line: 1801, type: !100)
!5564 = !DILocalVariable(name: "ncopies", scope: !5532, file: !3, line: 1801, type: !100)
!5565 = !DILocalVariable(name: "only_one_vec", scope: !5532, file: !3, line: 1802, type: !6)
!5566 = !DILocalVariable(name: "need_next_vector", scope: !5532, file: !3, line: 1802, type: !6)
!5567 = !DILocalVariable(name: "first_vec_index", scope: !5532, file: !3, line: 1803, type: !100)
!5568 = !DILocalVariable(name: "second_vec_index", scope: !5532, file: !3, line: 1803, type: !100)
!5569 = !DILocalVariable(name: "orig_vec_stmts_num", scope: !5532, file: !3, line: 1803, type: !100)
!5570 = !DILocalVariable(name: "vect_stmts_counter", scope: !5532, file: !3, line: 1803, type: !100)
!5571 = !DILocalVariable(name: "mask_vec", scope: !5572, file: !3, line: 1898, type: !326)
!5572 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1897, column: 17)
!5573 = distinct !DILexicalBlock(scope: !5574, file: !3, line: 1896, column: 19)
!5574 = distinct !DILexicalBlock(scope: !5575, file: !3, line: 1884, column: 13)
!5575 = distinct !DILexicalBlock(scope: !5576, file: !3, line: 1883, column: 11)
!5576 = distinct !DILexicalBlock(scope: !5577, file: !3, line: 1883, column: 11)
!5577 = distinct !DILexicalBlock(scope: !5578, file: !3, line: 1882, column: 9)
!5578 = distinct !DILexicalBlock(scope: !5579, file: !3, line: 1881, column: 7)
!5579 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 1881, column: 7)
!5580 = distinct !DILexicalBlock(scope: !5581, file: !3, line: 1870, column: 5)
!5581 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1866, column: 3)
!5582 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 1866, column: 3)
!5583 = !DILocalVariable(name: "t", scope: !5584, file: !3, line: 1902, type: !326)
!5584 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 1901, column: 7)
!5585 = !DILocation(line: 0, scope: !5532)
!5586 = !DILocation(line: 1793, column: 29, scope: !5532)
!5587 = !DILocation(line: 1794, column: 3, scope: !5532)
!5588 = !DILocation(line: 1794, column: 8, scope: !5532)
!5589 = !DILocation(line: 1796, column: 3, scope: !5532)
!5590 = !DILocation(line: 1797, column: 18, scope: !5532)
!5591 = !DILocation(line: 1799, column: 20, scope: !5532)
!5592 = !DILocation(line: 1801, column: 3, scope: !5532)
!5593 = !DILocation(line: 1802, column: 3, scope: !5532)
!5594 = !DILocation(line: 1802, column: 30, scope: !5532)
!5595 = !DILocation(line: 1805, column: 26, scope: !5596)
!5596 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 1805, column: 7)
!5597 = !DILocation(line: 1805, column: 8, scope: !5596)
!5598 = !DILocation(line: 1805, column: 7, scope: !5532)
!5599 = !DILocation(line: 1807, column: 11, scope: !5600)
!5600 = distinct !DILexicalBlock(scope: !5601, file: !3, line: 1807, column: 11)
!5601 = distinct !DILexicalBlock(scope: !5596, file: !3, line: 1806, column: 5)
!5602 = !DILocation(line: 1807, column: 11, scope: !5601)
!5603 = !DILocation(line: 1809, column: 20, scope: !5604)
!5604 = distinct !DILexicalBlock(scope: !5600, file: !3, line: 1808, column: 9)
!5605 = !DILocation(line: 1809, column: 11, scope: !5604)
!5606 = !DILocation(line: 1810, column: 30, scope: !5604)
!5607 = !DILocation(line: 1810, column: 11, scope: !5604)
!5608 = !DILocation(line: 1811, column: 9, scope: !5604)
!5609 = !DILocation(line: 1816, column: 18, scope: !5532)
!5610 = !DILocation(line: 1818, column: 8, scope: !5611)
!5611 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 1818, column: 7)
!5612 = !DILocation(line: 1818, column: 25, scope: !5611)
!5613 = !DILocation(line: 1818, column: 21, scope: !5611)
!5614 = !DILocation(line: 1820, column: 11, scope: !5615)
!5615 = distinct !DILexicalBlock(scope: !5616, file: !3, line: 1820, column: 11)
!5616 = distinct !DILexicalBlock(scope: !5611, file: !3, line: 1819, column: 5)
!5617 = !DILocation(line: 1820, column: 11, scope: !5616)
!5618 = !DILocation(line: 1822, column: 20, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !5615, file: !3, line: 1821, column: 9)
!5620 = !DILocation(line: 1822, column: 11, scope: !5619)
!5621 = !DILocation(line: 1823, column: 30, scope: !5619)
!5622 = !DILocation(line: 1823, column: 11, scope: !5619)
!5623 = !DILocation(line: 1824, column: 9, scope: !5619)
!5624 = !DILocation(line: 1829, column: 15, scope: !5532)
!5625 = !DILocation(line: 1830, column: 17, scope: !5532)
!5626 = !DILocation(line: 1831, column: 42, scope: !5532)
!5627 = !DILocation(line: 1831, column: 40, scope: !5532)
!5628 = !DILocation(line: 1831, column: 18, scope: !5532)
!5629 = !DILocation(line: 1831, column: 10, scope: !5532)
!5630 = !DILocation(line: 1832, column: 12, scope: !5532)
!5631 = !DILocation(line: 1833, column: 23, scope: !5532)
!5632 = !DILocation(line: 1834, column: 19, scope: !5532)
!5633 = !DILocation(line: 1838, column: 35, scope: !5532)
!5634 = !DILocation(line: 1839, column: 67, scope: !5532)
!5635 = !DILocation(line: 1840, column: 26, scope: !5636)
!5636 = distinct !DILexicalBlock(scope: !5532, file: !3, line: 1840, column: 7)
!5637 = !DILocation(line: 1840, column: 7, scope: !5532)
!5638 = !DILocation(line: 1845, column: 16, scope: !5532)
!5639 = !DILocation(line: 0, scope: !5581)
!5640 = !DILocation(line: 0, scope: !5580)
!5641 = !DILocation(line: 0, scope: !5642)
!5642 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 1920, column: 23)
!5643 = !DILocation(line: 1866, column: 8, scope: !5582)
!5644 = !DILocation(line: 0, scope: !5582)
!5645 = !DILocation(line: 1867, column: 8, scope: !5581)
!5646 = !DILocation(line: 1866, column: 3, scope: !5582)
!5647 = !DILocation(line: 1881, column: 12, scope: !5579)
!5648 = !DILocation(line: 0, scope: !5579)
!5649 = !DILocation(line: 1871, column: 20, scope: !5580)
!5650 = !DILocation(line: 1872, column: 13, scope: !5580)
!5651 = !DILocation(line: 1875, column: 23, scope: !5580)
!5652 = !DILocation(line: 1877, column: 26, scope: !5653)
!5653 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 1876, column: 11)
!5654 = !DILocation(line: 1873, column: 26, scope: !5580)
!5655 = !DILocation(line: 1881, column: 21, scope: !5578)
!5656 = !DILocation(line: 1881, column: 7, scope: !5579)
!5657 = !DILocation(line: 0, scope: !5574)
!5658 = !DILocation(line: 1883, column: 11, scope: !5576)
!5659 = !DILocation(line: 0, scope: !5576)
!5660 = !DILocation(line: 1883, column: 25, scope: !5575)
!5661 = !DILocation(line: 1886, column: 20, scope: !5662)
!5662 = distinct !DILexicalBlock(scope: !5574, file: !3, line: 1886, column: 15)
!5663 = !DILocation(line: 0, scope: !5662)
!5664 = !DILocation(line: 1886, column: 29, scope: !5665)
!5665 = distinct !DILexicalBlock(scope: !5662, file: !3, line: 1886, column: 15)
!5666 = !DILocation(line: 1886, column: 15, scope: !5662)
!5667 = !DILocation(line: 1888, column: 24, scope: !5668)
!5668 = distinct !DILexicalBlock(scope: !5669, file: !3, line: 1888, column: 23)
!5669 = distinct !DILexicalBlock(scope: !5665, file: !3, line: 1887, column: 17)
!5670 = !DILocation(line: 1888, column: 23, scope: !5669)
!5671 = !DILocation(line: 1893, column: 35, scope: !5669)
!5672 = !DILocation(line: 1893, column: 29, scope: !5669)
!5673 = !DILocation(line: 1893, column: 19, scope: !5669)
!5674 = !DILocation(line: 1893, column: 33, scope: !5669)
!5675 = !DILocation(line: 1886, column: 39, scope: !5665)
!5676 = !DILocation(line: 1886, column: 15, scope: !5665)
!5677 = distinct !{!5677, !5666, !5678}
!5678 = !DILocation(line: 1894, column: 17, scope: !5662)
!5679 = !DILocation(line: 1896, column: 25, scope: !5573)
!5680 = !DILocation(line: 1896, column: 19, scope: !5574)
!5681 = !DILocation(line: 1900, column: 5, scope: !5572)
!5682 = !DILocation(line: 0, scope: !5572)
!5683 = !DILocation(line: 1900, column: 12, scope: !5572)
!5684 = !DILocation(line: 1900, column: 20, scope: !5572)
!5685 = !DILocation(line: 1902, column: 33, scope: !5584)
!5686 = !DILocation(line: 1902, column: 52, scope: !5584)
!5687 = !DILocation(line: 1902, column: 18, scope: !5584)
!5688 = !DILocation(line: 0, scope: !5584)
!5689 = !DILocation(line: 1903, column: 20, scope: !5584)
!5690 = distinct !{!5690, !5681, !5691}
!5691 = !DILocation(line: 1904, column: 7, scope: !5572)
!5692 = !DILocation(line: 1905, column: 16, scope: !5572)
!5693 = !DILocation(line: 1908, column: 28, scope: !5694)
!5694 = distinct !DILexicalBlock(scope: !5572, file: !3, line: 1908, column: 9)
!5695 = !DILocation(line: 1908, column: 10, scope: !5694)
!5696 = !DILocation(line: 1908, column: 9, scope: !5572)
!5697 = !DILocation(line: 1911, column: 13, scope: !5698)
!5698 = distinct !DILexicalBlock(scope: !5699, file: !3, line: 1911, column: 13)
!5699 = distinct !DILexicalBlock(scope: !5694, file: !3, line: 1910, column: 7)
!5700 = !DILocation(line: 1911, column: 13, scope: !5699)
!5701 = !DILocation(line: 1913, column: 15, scope: !5702)
!5702 = distinct !DILexicalBlock(scope: !5698, file: !3, line: 1912, column: 4)
!5703 = !DILocation(line: 1913, column: 6, scope: !5702)
!5704 = !DILocation(line: 1914, column: 26, scope: !5702)
!5705 = !DILocation(line: 1914, column: 6, scope: !5702)
!5706 = !DILocation(line: 1915, column: 4, scope: !5702)
!5707 = !DILocation(line: 1916, column: 9, scope: !5699)
!5708 = !DILocation(line: 1917, column: 9, scope: !5699)
!5709 = !DILocation(line: 1920, column: 23, scope: !5572)
!5710 = !DILocation(line: 1922, column: 27, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5712, file: !3, line: 1922, column: 27)
!5712 = distinct !DILexicalBlock(scope: !5642, file: !3, line: 1921, column: 21)
!5713 = !DILocation(line: 1922, column: 27, scope: !5712)
!5714 = !DILocation(line: 1928, column: 42, scope: !5712)
!5715 = !DILocation(line: 1933, column: 16, scope: !5712)
!5716 = !DILocation(line: 1934, column: 38, scope: !5712)
!5717 = !DILocation(line: 1931, column: 23, scope: !5712)
!5718 = !DILocation(line: 1935, column: 21, scope: !5712)
!5719 = !DILocation(line: 1883, column: 40, scope: !5575)
!5720 = !DILocation(line: 1883, column: 11, scope: !5575)
!5721 = distinct !{!5721, !5658, !5722}
!5722 = !DILocation(line: 1937, column: 13, scope: !5576)
!5723 = !DILocation(line: 1881, column: 39, scope: !5578)
!5724 = !DILocation(line: 1881, column: 7, scope: !5578)
!5725 = distinct !{!5725, !5656, !5726}
!5726 = !DILocation(line: 1938, column: 9, scope: !5579)
!5727 = !DILocation(line: 1869, column: 9, scope: !5581)
!5728 = !DILocation(line: 1866, column: 3, scope: !5581)
!5729 = distinct !{!5729, !5646, !5730}
!5730 = !DILocation(line: 1939, column: 5, scope: !5582)
!5731 = !DILocation(line: 1941, column: 3, scope: !5532)
!5732 = !DILocation(line: 1942, column: 3, scope: !5532)
!5733 = !DILocation(line: 1943, column: 1, scope: !5532)
!5734 = distinct !DISubprogram(name: "VEC_slp_tree_base_iterate", scope: !1757, file: !1757, line: 118, type: !5735, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5739)
!5735 = !DISubroutineType(types: !5736)
!5736 = !{!100, !5737, !17, !3589}
!5737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5738, size: 64)
!5738 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3579)
!5739 = !{!5740, !5741, !5742}
!5740 = !DILocalVariable(name: "vec_", arg: 1, scope: !5734, file: !1757, line: 118, type: !5737)
!5741 = !DILocalVariable(name: "ix_", arg: 2, scope: !5734, file: !1757, line: 118, type: !17)
!5742 = !DILocalVariable(name: "ptr", arg: 3, scope: !5734, file: !1757, line: 118, type: !3589)
!5743 = !DILocation(line: 0, scope: !5734)
!5744 = !DILocation(line: 118, column: 1, scope: !5745)
!5745 = distinct !DILexicalBlock(scope: !5734, file: !1757, line: 118, column: 1)
!5746 = !DILocation(line: 118, column: 1, scope: !5734)
!5747 = !DILocation(line: 118, column: 1, scope: !5748)
!5748 = distinct !DILexicalBlock(scope: !5745, file: !1757, line: 118, column: 1)
!5749 = !DILocation(line: 118, column: 1, scope: !5750)
!5750 = distinct !DILexicalBlock(scope: !5745, file: !1757, line: 118, column: 1)
!5751 = !DILocation(line: 0, scope: !5745)
!5752 = !DILocation(line: 0, scope: !2)
!5753 = !DILocation(line: 1721, column: 46, scope: !2)
!5754 = !DILocation(line: 1721, column: 25, scope: !2)
!5755 = !DILocation(line: 1723, column: 43, scope: !2)
!5756 = !DILocation(line: 1723, column: 64, scope: !2)
!5757 = !DILocation(line: 1723, column: 40, scope: !2)
!5758 = !DILocation(line: 1723, column: 25, scope: !2)
!5759 = !DILocation(line: 1725, column: 29, scope: !5760)
!5760 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1725, column: 7)
!5761 = !DILocation(line: 1725, column: 7, scope: !2)
!5762 = !DILocation(line: 1726, column: 24, scope: !5760)
!5763 = !DILocation(line: 1726, column: 5, scope: !5760)
!5764 = !DILocation(line: 1730, column: 7, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1730, column: 7)
!5766 = !DILocation(line: 1730, column: 20, scope: !5765)
!5767 = !DILocation(line: 1730, column: 7, scope: !2)
!5768 = !DILocation(line: 1732, column: 11, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5770, file: !3, line: 1732, column: 11)
!5770 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 1731, column: 5)
!5771 = !DILocation(line: 1732, column: 11, scope: !5770)
!5772 = !DILocation(line: 1734, column: 20, scope: !5773)
!5773 = distinct !DILexicalBlock(scope: !5769, file: !3, line: 1733, column: 9)
!5774 = !DILocation(line: 1734, column: 11, scope: !5773)
!5775 = !DILocation(line: 1735, column: 30, scope: !5773)
!5776 = !DILocation(line: 1735, column: 11, scope: !5773)
!5777 = !DILocation(line: 1736, column: 9, scope: !5773)
!5778 = !DILocation(line: 1742, column: 44, scope: !5779)
!5779 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1742, column: 7)
!5780 = !DILocation(line: 1742, column: 29, scope: !5779)
!5781 = !DILocation(line: 1742, column: 7, scope: !2)
!5782 = !DILocation(line: 1771, column: 23, scope: !2)
!5783 = !DILocation(line: 1744, column: 11, scope: !5784)
!5784 = distinct !DILexicalBlock(scope: !5785, file: !3, line: 1744, column: 11)
!5785 = distinct !DILexicalBlock(scope: !5779, file: !3, line: 1743, column: 5)
!5786 = !DILocation(line: 1744, column: 30, scope: !5784)
!5787 = !DILocation(line: 1744, column: 33, scope: !5784)
!5788 = !DILocation(line: 1744, column: 11, scope: !5785)
!5789 = !DILocation(line: 1749, column: 15, scope: !5790)
!5790 = distinct !DILexicalBlock(scope: !5791, file: !3, line: 1749, column: 15)
!5791 = distinct !DILexicalBlock(scope: !5784, file: !3, line: 1745, column: 9)
!5792 = !DILocation(line: 1749, column: 15, scope: !5791)
!5793 = !DILocation(line: 1751, column: 24, scope: !5794)
!5794 = distinct !DILexicalBlock(scope: !5790, file: !3, line: 1750, column: 13)
!5795 = !DILocation(line: 1751, column: 15, scope: !5794)
!5796 = !DILocation(line: 1753, column: 34, scope: !5794)
!5797 = !DILocation(line: 1753, column: 15, scope: !5794)
!5798 = !DILocation(line: 1754, column: 13, scope: !5794)
!5799 = !DILocation(line: 1762, column: 46, scope: !5785)
!5800 = !DILocation(line: 1762, column: 44, scope: !5785)
!5801 = !DILocation(line: 1762, column: 29, scope: !5785)
!5802 = !DILocation(line: 1764, column: 12, scope: !5803)
!5803 = distinct !DILexicalBlock(scope: !5785, file: !3, line: 1764, column: 7)
!5804 = !DILocation(line: 0, scope: !5803)
!5805 = !DILocation(line: 1764, column: 21, scope: !5806)
!5806 = distinct !DILexicalBlock(scope: !5803, file: !3, line: 1764, column: 7)
!5807 = !DILocation(line: 0, scope: !5785)
!5808 = !DILocation(line: 1764, column: 7, scope: !5803)
!5809 = !DILocation(line: 1765, column: 32, scope: !5806)
!5810 = !DILocation(line: 1765, column: 9, scope: !5806)
!5811 = !DILocation(line: 1765, column: 17, scope: !5806)
!5812 = !DILocation(line: 1764, column: 31, scope: !5806)
!5813 = !DILocation(line: 1764, column: 7, scope: !5806)
!5814 = distinct !{!5814, !5808, !5815}
!5815 = !DILocation(line: 1765, column: 34, scope: !5803)
!5816 = !DILocation(line: 1767, column: 29, scope: !5785)
!5817 = !DILocation(line: 1768, column: 18, scope: !5785)
!5818 = !DILocation(line: 1769, column: 5, scope: !5785)
!5819 = !DILocation(line: 1771, column: 21, scope: !2)
!5820 = !DILocation(line: 1774, column: 28, scope: !5821)
!5821 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1774, column: 7)
!5822 = !DILocation(line: 1774, column: 13, scope: !5821)
!5823 = !DILocation(line: 1774, column: 7, scope: !2)
!5824 = !DILocation(line: 1776, column: 28, scope: !5825)
!5825 = distinct !DILexicalBlock(scope: !5821, file: !3, line: 1775, column: 5)
!5826 = !DILocation(line: 1777, column: 18, scope: !5825)
!5827 = !DILocation(line: 1778, column: 26, scope: !5825)
!5828 = !DILocation(line: 1779, column: 5, scope: !5825)
!5829 = !DILocation(line: 1782, column: 1, scope: !2)
!5830 = distinct !DISubprogram(name: "vect_create_mask_and_perm", scope: !3, file: !3, line: 1648, type: !5831, scopeLine: 1654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5833)
!5831 = !DISubroutineType(types: !5832)
!5832 = !{null, !7, !7, !326, !100, !100, !4386, !3551, !326, !326, !3648, !100, !100}
!5833 = !{!5834, !5835, !5836, !5837, !5838, !5839, !5840, !5841, !5842, !5843, !5844, !5845, !5846, !5847, !5848, !5849, !5850, !5851, !5852, !5853, !5854}
!5834 = !DILocalVariable(name: "stmt", arg: 1, scope: !5830, file: !3, line: 1648, type: !7)
!5835 = !DILocalVariable(name: "next_scalar_stmt", arg: 2, scope: !5830, file: !3, line: 1648, type: !7)
!5836 = !DILocalVariable(name: "mask", arg: 3, scope: !5830, file: !3, line: 1649, type: !326)
!5837 = !DILocalVariable(name: "first_vec_indx", arg: 4, scope: !5830, file: !3, line: 1649, type: !100)
!5838 = !DILocalVariable(name: "second_vec_indx", arg: 5, scope: !5830, file: !3, line: 1649, type: !100)
!5839 = !DILocalVariable(name: "gsi", arg: 6, scope: !5830, file: !3, line: 1650, type: !4386)
!5840 = !DILocalVariable(name: "node", arg: 7, scope: !5830, file: !3, line: 1650, type: !3551)
!5841 = !DILocalVariable(name: "builtin_decl", arg: 8, scope: !5830, file: !3, line: 1651, type: !326)
!5842 = !DILocalVariable(name: "vectype", arg: 9, scope: !5830, file: !3, line: 1651, type: !326)
!5843 = !DILocalVariable(name: "dr_chain", arg: 10, scope: !5830, file: !3, line: 1652, type: !3648)
!5844 = !DILocalVariable(name: "ncopies", arg: 11, scope: !5830, file: !3, line: 1653, type: !100)
!5845 = !DILocalVariable(name: "vect_stmts_counter", arg: 12, scope: !5830, file: !3, line: 1653, type: !100)
!5846 = !DILocalVariable(name: "perm_dest", scope: !5830, file: !3, line: 1655, type: !326)
!5847 = !DILocalVariable(name: "perm_stmt", scope: !5830, file: !3, line: 1656, type: !7)
!5848 = !DILocalVariable(name: "next_stmt_info", scope: !5830, file: !3, line: 1657, type: !3759)
!5849 = !DILocalVariable(name: "i", scope: !5830, file: !3, line: 1658, type: !100)
!5850 = !DILocalVariable(name: "stride", scope: !5830, file: !3, line: 1658, type: !100)
!5851 = !DILocalVariable(name: "first_vec", scope: !5830, file: !3, line: 1659, type: !326)
!5852 = !DILocalVariable(name: "second_vec", scope: !5830, file: !3, line: 1659, type: !326)
!5853 = !DILocalVariable(name: "data_ref", scope: !5830, file: !3, line: 1659, type: !326)
!5854 = !DILocalVariable(name: "params", scope: !5830, file: !3, line: 1660, type: !3648)
!5855 = !DILocation(line: 0, scope: !5830)
!5856 = !DILocation(line: 1660, column: 3, scope: !5830)
!5857 = !DILocation(line: 1660, column: 21, scope: !5830)
!5858 = !DILocation(line: 1662, column: 12, scope: !5830)
!5859 = !DILocation(line: 1662, column: 48, scope: !5830)
!5860 = !DILocation(line: 1666, column: 12, scope: !5861)
!5861 = distinct !DILexicalBlock(scope: !5830, file: !3, line: 1666, column: 3)
!5862 = !DILocation(line: 1666, column: 8, scope: !5861)
!5863 = !DILocation(line: 0, scope: !5861)
!5864 = !DILocation(line: 1667, column: 18, scope: !5865)
!5865 = distinct !DILexicalBlock(scope: !5861, file: !3, line: 1666, column: 3)
!5866 = !DILocation(line: 1667, column: 10, scope: !5865)
!5867 = !DILocation(line: 1666, column: 3, scope: !5861)
!5868 = !DILocation(line: 1668, column: 5, scope: !5865)
!5869 = !DILocation(line: 1667, column: 56, scope: !5865)
!5870 = !DILocation(line: 1666, column: 3, scope: !5865)
!5871 = distinct !{!5871, !5867, !5872}
!5872 = !DILocation(line: 1668, column: 5, scope: !5861)
!5873 = !DILocation(line: 1670, column: 44, scope: !5830)
!5874 = !DILocation(line: 1670, column: 15, scope: !5830)
!5875 = !DILocation(line: 0, scope: !5876)
!5876 = distinct !DILexicalBlock(scope: !5877, file: !3, line: 1672, column: 5)
!5877 = distinct !DILexicalBlock(scope: !5878, file: !3, line: 1671, column: 3)
!5878 = distinct !DILexicalBlock(scope: !5830, file: !3, line: 1671, column: 3)
!5879 = !DILocation(line: 1671, column: 8, scope: !5878)
!5880 = !DILocation(line: 0, scope: !5878)
!5881 = !DILocation(line: 1671, column: 17, scope: !5877)
!5882 = !DILocation(line: 1671, column: 3, scope: !5878)
!5883 = !DILocation(line: 1673, column: 19, scope: !5876)
!5884 = !DILocation(line: 1674, column: 20, scope: !5876)
!5885 = !DILocation(line: 1677, column: 7, scope: !5876)
!5886 = !DILocation(line: 1678, column: 16, scope: !5876)
!5887 = !DILocation(line: 1678, column: 14, scope: !5876)
!5888 = !DILocation(line: 1679, column: 7, scope: !5876)
!5889 = !DILocation(line: 1680, column: 7, scope: !5876)
!5890 = !DILocation(line: 1681, column: 7, scope: !5876)
!5891 = !DILocation(line: 1684, column: 56, scope: !5876)
!5892 = !DILocation(line: 1684, column: 19, scope: !5876)
!5893 = !DILocation(line: 1685, column: 18, scope: !5876)
!5894 = !DILocation(line: 1686, column: 7, scope: !5876)
!5895 = !DILocation(line: 1687, column: 7, scope: !5876)
!5896 = !DILocation(line: 1690, column: 7, scope: !5876)
!5897 = !DILocation(line: 1693, column: 22, scope: !5876)
!5898 = !DILocation(line: 1694, column: 23, scope: !5876)
!5899 = !DILocation(line: 1671, column: 29, scope: !5877)
!5900 = !DILocation(line: 1671, column: 3, scope: !5877)
!5901 = distinct !{!5901, !5882, !5902}
!5902 = !DILocation(line: 1695, column: 5, scope: !5878)
!5903 = !DILocation(line: 1698, column: 20, scope: !5830)
!5904 = !DILocation(line: 1699, column: 3, scope: !5830)
!5905 = !DILocation(line: 1699, column: 40, scope: !5830)
!5906 = !DILocation(line: 1700, column: 1, scope: !5830)
!5907 = distinct !DISubprogram(name: "vect_schedule_slp", scope: !3, file: !3, line: 2043, type: !4451, scopeLine: 2044, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5908)
!5908 = !{!5909, !5910, !5911, !5912, !5913, !5914, !5915}
!5909 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !5907, file: !3, line: 2043, type: !3766)
!5910 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !5907, file: !3, line: 2043, type: !3606)
!5911 = !DILocalVariable(name: "slp_instances", scope: !5907, file: !3, line: 2045, type: !3590)
!5912 = !DILocalVariable(name: "instance", scope: !5907, file: !3, line: 2046, type: !3602)
!5913 = !DILocalVariable(name: "i", scope: !5907, file: !3, line: 2047, type: !17)
!5914 = !DILocalVariable(name: "vf", scope: !5907, file: !3, line: 2047, type: !17)
!5915 = !DILocalVariable(name: "is_store", scope: !5907, file: !3, line: 2048, type: !6)
!5916 = !DILocation(line: 0, scope: !5907)
!5917 = !DILocation(line: 2046, column: 3, scope: !5907)
!5918 = !DILocation(line: 2050, column: 7, scope: !5919)
!5919 = distinct !DILexicalBlock(scope: !5907, file: !3, line: 2050, column: 7)
!5920 = !DILocation(line: 2050, column: 7, scope: !5907)
!5921 = !DILocation(line: 2052, column: 23, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5919, file: !3, line: 2051, column: 5)
!5923 = !DILocation(line: 2053, column: 12, scope: !5922)
!5924 = !DILocation(line: 2054, column: 5, scope: !5922)
!5925 = !DILocation(line: 2057, column: 23, scope: !5926)
!5926 = distinct !DILexicalBlock(scope: !5919, file: !3, line: 2056, column: 5)
!5927 = !DILocation(line: 0, scope: !5919)
!5928 = !DILocation(line: 0, scope: !5929)
!5929 = distinct !DILexicalBlock(scope: !5930, file: !3, line: 2061, column: 3)
!5930 = distinct !DILexicalBlock(scope: !5907, file: !3, line: 2061, column: 3)
!5931 = !DILocation(line: 2061, column: 8, scope: !5930)
!5932 = !DILocation(line: 0, scope: !5930)
!5933 = !DILocation(line: 2061, column: 15, scope: !5929)
!5934 = !DILocation(line: 2061, column: 3, scope: !5930)
!5935 = !DILocation(line: 2064, column: 46, scope: !5936)
!5936 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 2062, column: 5)
!5937 = !DILocation(line: 2064, column: 18, scope: !5936)
!5938 = !DILocation(line: 2066, column: 11, scope: !5939)
!5939 = distinct !DILexicalBlock(scope: !5936, file: !3, line: 2066, column: 11)
!5940 = !DILocation(line: 2067, column: 4, scope: !5939)
!5941 = !DILocation(line: 2067, column: 7, scope: !5939)
!5942 = !DILocation(line: 2066, column: 11, scope: !5936)
!5943 = !DILocation(line: 2068, column: 11, scope: !5939)
!5944 = !DILocation(line: 2068, column: 2, scope: !5939)
!5945 = !DILocation(line: 2061, column: 72, scope: !5929)
!5946 = !DILocation(line: 2061, column: 3, scope: !5929)
!5947 = distinct !{!5947, !5934, !5948}
!5948 = !DILocation(line: 2069, column: 5, scope: !5930)
!5949 = !DILocation(line: 2072, column: 1, scope: !5907)
!5950 = !DILocation(line: 2071, column: 3, scope: !5907)
!5951 = distinct !DISubprogram(name: "vect_schedule_slp_instance", scope: !3, file: !3, line: 1950, type: !5952, scopeLine: 1952, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !5954)
!5952 = !DISubroutineType(types: !5953)
!5953 = !{!6, !3551, !3602, !17}
!5954 = !{!5955, !5956, !5957, !5958, !5959, !5960, !5961, !5962, !5963, !5964, !5965, !5966, !5967, !5968}
!5955 = !DILocalVariable(name: "node", arg: 1, scope: !5951, file: !3, line: 1950, type: !3551)
!5956 = !DILocalVariable(name: "instance", arg: 2, scope: !5951, file: !3, line: 1950, type: !3602)
!5957 = !DILocalVariable(name: "vectorization_factor", arg: 3, scope: !5951, file: !3, line: 1951, type: !17)
!5958 = !DILocalVariable(name: "stmt", scope: !5951, file: !3, line: 1953, type: !7)
!5959 = !DILocalVariable(name: "strided_store", scope: !5951, file: !3, line: 1954, type: !6)
!5960 = !DILocalVariable(name: "is_store", scope: !5951, file: !3, line: 1954, type: !6)
!5961 = !DILocalVariable(name: "si", scope: !5951, file: !3, line: 1955, type: !4306)
!5962 = !DILocalVariable(name: "stmt_info", scope: !5951, file: !3, line: 1956, type: !3759)
!5963 = !DILocalVariable(name: "vec_stmts_size", scope: !5951, file: !3, line: 1957, type: !17)
!5964 = !DILocalVariable(name: "nunits", scope: !5951, file: !3, line: 1957, type: !17)
!5965 = !DILocalVariable(name: "group_size", scope: !5951, file: !3, line: 1957, type: !17)
!5966 = !DILocalVariable(name: "vectype", scope: !5951, file: !3, line: 1958, type: !326)
!5967 = !DILocalVariable(name: "i", scope: !5951, file: !3, line: 1959, type: !100)
!5968 = !DILocalVariable(name: "loads_node", scope: !5951, file: !3, line: 1960, type: !3551)
!5969 = !DILocation(line: 0, scope: !5951)
!5970 = !DILocation(line: 1954, column: 3, scope: !5951)
!5971 = !DILocation(line: 1955, column: 3, scope: !5951)
!5972 = !DILocation(line: 1960, column: 3, scope: !5951)
!5973 = !DILocation(line: 1962, column: 8, scope: !5974)
!5974 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 1962, column: 7)
!5975 = !DILocation(line: 1962, column: 7, scope: !5951)
!5976 = !DILocation(line: 1965, column: 31, scope: !5951)
!5977 = !DILocation(line: 1965, column: 3, scope: !5951)
!5978 = !DILocation(line: 1967, column: 31, scope: !5951)
!5979 = !DILocation(line: 1967, column: 3, scope: !5951)
!5980 = !DILocation(line: 1970, column: 10, scope: !5951)
!5981 = !DILocation(line: 1971, column: 15, scope: !5951)
!5982 = !DILocation(line: 1974, column: 42, scope: !5951)
!5983 = !DILocation(line: 1974, column: 13, scope: !5951)
!5984 = !DILocation(line: 1975, column: 27, scope: !5951)
!5985 = !DILocation(line: 1975, column: 12, scope: !5951)
!5986 = !DILocation(line: 1976, column: 16, scope: !5951)
!5987 = !DILocation(line: 1983, column: 42, scope: !5951)
!5988 = !DILocation(line: 1983, column: 56, scope: !5951)
!5989 = !DILocation(line: 1987, column: 7, scope: !5990)
!5990 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 1987, column: 7)
!5991 = !DILocation(line: 1987, column: 7, scope: !5951)
!5992 = !DILocation(line: 0, scope: !5993)
!5993 = distinct !DILexicalBlock(scope: !5994, file: !3, line: 1989, column: 7)
!5994 = distinct !DILexicalBlock(scope: !5995, file: !3, line: 1989, column: 7)
!5995 = distinct !DILexicalBlock(scope: !5990, file: !3, line: 1988, column: 5)
!5996 = !DILocation(line: 1989, column: 7, scope: !5994)
!5997 = !DILocation(line: 0, scope: !5994)
!5998 = !DILocation(line: 1990, column: 12, scope: !5993)
!5999 = !DILocation(line: 1993, column: 16, scope: !6000)
!6000 = distinct !DILexicalBlock(scope: !6001, file: !3, line: 1993, column: 15)
!6001 = distinct !DILexicalBlock(scope: !5993, file: !3, line: 1992, column: 9)
!6002 = !DILocation(line: 1993, column: 15, scope: !6001)
!6003 = !DILocation(line: 1995, column: 49, scope: !6004)
!6004 = distinct !DILexicalBlock(scope: !6000, file: !3, line: 1994, column: 13)
!6005 = !DILocation(line: 1995, column: 15, scope: !6004)
!6006 = !DILocation(line: 1995, column: 47, scope: !6004)
!6007 = !DILocation(line: 1997, column: 15, scope: !6004)
!6008 = !DILocation(line: 1997, column: 57, scope: !6004)
!6009 = !DILocation(line: 1998, column: 13, scope: !6004)
!6010 = !DILocation(line: 1991, column: 13, scope: !5993)
!6011 = !DILocation(line: 1989, column: 7, scope: !5993)
!6012 = distinct !{!6012, !5996, !6013}
!6013 = !DILocation(line: 1999, column: 9, scope: !5994)
!6014 = !DILocation(line: 2002, column: 8, scope: !6015)
!6015 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 2002, column: 7)
!6016 = !DILocation(line: 2002, column: 7, scope: !5951)
!6017 = !DILocation(line: 2004, column: 35, scope: !6018)
!6018 = distinct !DILexicalBlock(scope: !6015, file: !3, line: 2003, column: 5)
!6019 = !DILocation(line: 2004, column: 33, scope: !6018)
!6020 = !DILocation(line: 2005, column: 7, scope: !6018)
!6021 = !DILocation(line: 2005, column: 43, scope: !6018)
!6022 = !DILocation(line: 2006, column: 5, scope: !6018)
!6023 = !DILocation(line: 2008, column: 7, scope: !6024)
!6024 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 2008, column: 7)
!6025 = !DILocation(line: 2008, column: 7, scope: !5951)
!6026 = !DILocation(line: 2010, column: 16, scope: !6027)
!6027 = distinct !DILexicalBlock(scope: !6024, file: !3, line: 2009, column: 5)
!6028 = !DILocation(line: 2010, column: 7, scope: !6027)
!6029 = !DILocation(line: 2011, column: 26, scope: !6027)
!6030 = !DILocation(line: 2011, column: 7, scope: !6027)
!6031 = !DILocation(line: 2012, column: 5, scope: !6027)
!6032 = !DILocation(line: 2015, column: 7, scope: !6033)
!6033 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 2015, column: 7)
!6034 = !DILocation(line: 2016, column: 7, scope: !6033)
!6035 = !DILocation(line: 2016, column: 10, scope: !6033)
!6036 = !DILocation(line: 2017, column: 7, scope: !6033)
!6037 = !DILocation(line: 2017, column: 11, scope: !6033)
!6038 = !DILocation(line: 2015, column: 7, scope: !5951)
!6039 = !DILocation(line: 2018, column: 10, scope: !6033)
!6040 = !DILocation(line: 2018, column: 24, scope: !6033)
!6041 = !DILocation(line: 2018, column: 5, scope: !6033)
!6042 = !DILocation(line: 2020, column: 10, scope: !6033)
!6043 = !DILocation(line: 2022, column: 14, scope: !5951)
!6044 = !DILocation(line: 2023, column: 7, scope: !6045)
!6045 = distinct !DILexicalBlock(scope: !5951, file: !3, line: 2023, column: 7)
!6046 = !DILocation(line: 2023, column: 7, scope: !5951)
!6047 = !DILocation(line: 2025, column: 11, scope: !6048)
!6048 = distinct !DILexicalBlock(scope: !6049, file: !3, line: 2025, column: 11)
!6049 = distinct !DILexicalBlock(scope: !6045, file: !3, line: 2024, column: 5)
!6050 = !DILocation(line: 2025, column: 11, scope: !6049)
!6051 = !DILocation(line: 2029, column: 2, scope: !6048)
!6052 = !DILocation(line: 2032, column: 2, scope: !6048)
!6053 = !DILocation(line: 2039, column: 1, scope: !5951)
!6054 = distinct !DISubprogram(name: "vect_slp_transform_bb", scope: !3, file: !3, line: 2078, type: !6055, scopeLine: 2079, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6057)
!6055 = !DISubroutineType(types: !6056)
!6056 = !{null, !589}
!6057 = !{!6058, !6059, !6060, !6061, !6065}
!6058 = !DILocalVariable(name: "bb", arg: 1, scope: !6054, file: !3, line: 2078, type: !589)
!6059 = !DILocalVariable(name: "bb_vinfo", scope: !6054, file: !3, line: 2080, type: !3606)
!6060 = !DILocalVariable(name: "si", scope: !6054, file: !3, line: 2081, type: !4306)
!6061 = !DILocalVariable(name: "stmt", scope: !6062, file: !3, line: 2090, type: !7)
!6062 = distinct !DILexicalBlock(scope: !6063, file: !3, line: 2089, column: 5)
!6063 = distinct !DILexicalBlock(scope: !6064, file: !3, line: 2088, column: 3)
!6064 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 2088, column: 3)
!6065 = !DILocalVariable(name: "stmt_info", scope: !6062, file: !3, line: 2091, type: !3759)
!6066 = !DILocation(line: 0, scope: !6054)
!6067 = !DILocation(line: 2080, column: 26, scope: !6054)
!6068 = !DILocation(line: 2081, column: 3, scope: !6054)
!6069 = !DILocation(line: 2083, column: 3, scope: !6054)
!6070 = !DILocation(line: 2085, column: 7, scope: !6071)
!6071 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 2085, column: 7)
!6072 = !DILocation(line: 2085, column: 7, scope: !6054)
!6073 = !DILocation(line: 2086, column: 14, scope: !6071)
!6074 = !DILocation(line: 2086, column: 5, scope: !6071)
!6075 = !DILocation(line: 2088, column: 13, scope: !6064)
!6076 = !DILocation(line: 2088, column: 8, scope: !6064)
!6077 = !DILocation(line: 2088, column: 33, scope: !6063)
!6078 = !DILocation(line: 2088, column: 32, scope: !6063)
!6079 = !DILocation(line: 2088, column: 3, scope: !6064)
!6080 = !DILocation(line: 2090, column: 21, scope: !6062)
!6081 = !DILocation(line: 0, scope: !6062)
!6082 = !DILocation(line: 2093, column: 11, scope: !6083)
!6083 = distinct !DILexicalBlock(scope: !6062, file: !3, line: 2093, column: 11)
!6084 = !DILocation(line: 2093, column: 11, scope: !6062)
!6085 = !DILocation(line: 2095, column: 20, scope: !6086)
!6086 = distinct !DILexicalBlock(scope: !6083, file: !3, line: 2094, column: 9)
!6087 = !DILocation(line: 2095, column: 11, scope: !6086)
!6088 = !DILocation(line: 2096, column: 30, scope: !6086)
!6089 = !DILocation(line: 2096, column: 11, scope: !6086)
!6090 = !DILocation(line: 2097, column: 9, scope: !6086)
!6091 = !DILocation(line: 2099, column: 19, scope: !6062)
!6092 = !DILocation(line: 2100, column: 7, scope: !6062)
!6093 = !DILocation(line: 2103, column: 11, scope: !6094)
!6094 = distinct !DILexicalBlock(scope: !6062, file: !3, line: 2103, column: 11)
!6095 = !DILocation(line: 2103, column: 11, scope: !6062)
!6096 = !DILocation(line: 2105, column: 11, scope: !6097)
!6097 = distinct !DILexicalBlock(scope: !6094, file: !3, line: 2104, column: 9)
!6098 = !DILocation(line: 2106, column: 11, scope: !6097)
!6099 = !DILocation(line: 2088, column: 49, scope: !6063)
!6100 = !DILocation(line: 2088, column: 3, scope: !6063)
!6101 = distinct !{!6101, !6079, !6102}
!6102 = !DILocation(line: 2108, column: 5, scope: !6064)
!6103 = !DILocation(line: 2110, column: 38, scope: !6054)
!6104 = !DILocation(line: 2110, column: 26, scope: !6054)
!6105 = !DILocation(line: 2110, column: 3, scope: !6054)
!6106 = !DILocation(line: 2114, column: 3, scope: !6054)
!6107 = !DILocation(line: 2116, column: 7, scope: !6108)
!6108 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 2116, column: 7)
!6109 = !DILocation(line: 2116, column: 7, scope: !6054)
!6110 = !DILocation(line: 2117, column: 14, scope: !6108)
!6111 = !DILocation(line: 2117, column: 5, scope: !6108)
!6112 = !DILocation(line: 2119, column: 3, scope: !6054)
!6113 = !DILocation(line: 2120, column: 1, scope: !6054)
!6114 = distinct !DISubprogram(name: "vec_info_for_bb", scope: !1757, file: !1757, line: 328, type: !4875, scopeLine: 329, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6115)
!6115 = !{!6116}
!6116 = !DILocalVariable(name: "bb", arg: 1, scope: !6114, file: !1757, line: 328, type: !589)
!6117 = !DILocation(line: 0, scope: !6114)
!6118 = !DILocation(line: 330, column: 28, scope: !6114)
!6119 = !DILocation(line: 330, column: 3, scope: !6114)
!6120 = distinct !DISubprogram(name: "gimple_vop", scope: !6121, file: !6121, line: 49, type: !6122, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6126)
!6121 = !DIFile(filename: "./tree-flow-inline.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!6122 = !DISubroutineType(types: !6123)
!6123 = !{!326, !6124}
!6124 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6125, size: 64)
!6125 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !578)
!6126 = !{!6127}
!6127 = !DILocalVariable(name: "fun", arg: 1, scope: !6120, file: !6121, line: 49, type: !6124)
!6128 = !DILocation(line: 0, scope: !6120)
!6129 = !DILocation(line: 51, column: 3, scope: !6120)
!6130 = !DILocation(line: 52, column: 15, scope: !6120)
!6131 = !DILocation(line: 52, column: 26, scope: !6120)
!6132 = !DILocation(line: 52, column: 3, scope: !6120)
!6133 = distinct !DISubprogram(name: "bb_seq", scope: !11, file: !11, line: 237, type: !6134, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6139)
!6134 = !DISubroutineType(types: !6135)
!6135 = !{!61, !6136}
!6136 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !8, line: 112, baseType: !6137)
!6137 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6138, size: 64)
!6138 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !35)
!6139 = !{!6140}
!6140 = !DILocalVariable(name: "bb", arg: 1, scope: !6133, file: !11, line: 237, type: !6136)
!6141 = !DILocation(line: 0, scope: !6133)
!6142 = !DILocation(line: 239, column: 17, scope: !6133)
!6143 = !DILocation(line: 239, column: 23, scope: !6133)
!6144 = !DILocation(line: 239, column: 33, scope: !6133)
!6145 = !DILocation(line: 239, column: 43, scope: !6133)
!6146 = !DILocation(line: 239, column: 36, scope: !6133)
!6147 = !DILocation(line: 239, column: 10, scope: !6133)
!6148 = !DILocation(line: 239, column: 68, scope: !6133)
!6149 = !DILocation(line: 239, column: 3, scope: !6133)
!6150 = distinct !DISubprogram(name: "gimple_seq_first", scope: !11, file: !11, line: 159, type: !6151, scopeLine: 160, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6156)
!6151 = !DISubroutineType(types: !6152)
!6152 = !{!66, !6153}
!6153 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !8, line: 67, baseType: !6154)
!6154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6155, size: 64)
!6155 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !63)
!6156 = !{!6157}
!6157 = !DILocalVariable(name: "s", arg: 1, scope: !6150, file: !11, line: 159, type: !6153)
!6158 = !DILocation(line: 0, scope: !6150)
!6159 = !DILocation(line: 161, column: 10, scope: !6150)
!6160 = !DILocation(line: 161, column: 17, scope: !6150)
!6161 = !DILocation(line: 161, column: 3, scope: !6150)
!6162 = distinct !DISubprogram(name: "VEC_gimple_heap_free", scope: !11, file: !11, line: 34, type: !6163, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6166)
!6163 = !DISubroutineType(types: !6164)
!6164 = !{null, !6165}
!6165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3535, size: 64)
!6166 = !{!6167}
!6167 = !DILocalVariable(name: "vec_", arg: 1, scope: !6162, file: !11, line: 34, type: !6165)
!6168 = !DILocation(line: 0, scope: !6162)
!6169 = !DILocation(line: 34, column: 1, scope: !6170)
!6170 = distinct !DILexicalBlock(scope: !6162, file: !11, line: 34, column: 1)
!6171 = !DILocation(line: 34, column: 1, scope: !6162)
!6172 = distinct !DISubprogram(name: "VEC_gimple_heap_alloc", scope: !11, file: !11, line: 34, type: !6173, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6175)
!6173 = !DISubroutineType(types: !6174)
!6174 = !{!3535, !100}
!6175 = !{!6176}
!6176 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6172, file: !11, line: 34, type: !100)
!6177 = !DILocation(line: 0, scope: !6172)
!6178 = !DILocation(line: 34, column: 1, scope: !6172)
!6179 = distinct !DISubprogram(name: "VEC_gimple_heap_safe_push", scope: !11, file: !11, line: 34, type: !6180, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6182)
!6180 = !DISubroutineType(types: !6181)
!6181 = !{!4505, !6165, !7}
!6182 = !{!6183, !6184}
!6183 = !DILocalVariable(name: "vec_", arg: 1, scope: !6179, file: !11, line: 34, type: !6165)
!6184 = !DILocalVariable(name: "obj_", arg: 2, scope: !6179, file: !11, line: 34, type: !7)
!6185 = !DILocation(line: 0, scope: !6179)
!6186 = !DILocation(line: 34, column: 1, scope: !6179)
!6187 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !3562, file: !3562, line: 32, type: !6188, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6190)
!6188 = !DISubroutineType(types: !6189)
!6189 = !{!3560, !100}
!6190 = !{!6191}
!6191 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6187, file: !3562, line: 32, type: !100)
!6192 = !DILocation(line: 0, scope: !6187)
!6193 = !DILocation(line: 32, column: 1, scope: !6187)
!6194 = distinct !DISubprogram(name: "VEC_slp_tree_heap_alloc", scope: !1757, file: !1757, line: 119, type: !6195, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6197)
!6195 = !DISubroutineType(types: !6196)
!6196 = !{!3574, !100}
!6197 = !{!6198}
!6198 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6194, file: !1757, line: 119, type: !100)
!6199 = !DILocation(line: 0, scope: !6194)
!6200 = !DILocation(line: 119, column: 1, scope: !6194)
!6201 = distinct !DISubprogram(name: "vect_build_slp_tree", scope: !3, file: !3, line: 304, type: !6202, scopeLine: 311, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6205)
!6202 = !DISubroutineType(types: !6203)
!6203 = !{!6, !3766, !3606, !3589, !17, !1752, !1752, !100, !6204, !4433, !4443, !17}
!6204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!6205 = !{!6206, !6207, !6208, !6209, !6210, !6211, !6212, !6213, !6214, !6215, !6216, !6217, !6218, !6219, !6220, !6221, !6222, !6223, !6224, !6225, !6226, !6227, !6228, !6229, !6230, !6231, !6232, !6233, !6234, !6235, !6255, !6256, !6257, !6258, !6259, !6260, !6261, !6262, !6263, !6264, !6265, !6266, !6269}
!6206 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !6201, file: !3, line: 304, type: !3766)
!6207 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !6201, file: !3, line: 304, type: !3606)
!6208 = !DILocalVariable(name: "node", arg: 3, scope: !6201, file: !3, line: 305, type: !3589)
!6209 = !DILocalVariable(name: "group_size", arg: 4, scope: !6201, file: !3, line: 305, type: !17)
!6210 = !DILocalVariable(name: "inside_cost", arg: 5, scope: !6201, file: !3, line: 306, type: !1752)
!6211 = !DILocalVariable(name: "outside_cost", arg: 6, scope: !6201, file: !3, line: 306, type: !1752)
!6212 = !DILocalVariable(name: "ncopies_for_cost", arg: 7, scope: !6201, file: !3, line: 307, type: !100)
!6213 = !DILocalVariable(name: "max_nunits", arg: 8, scope: !6201, file: !3, line: 307, type: !6204)
!6214 = !DILocalVariable(name: "load_permutation", arg: 9, scope: !6201, file: !3, line: 308, type: !4433)
!6215 = !DILocalVariable(name: "loads", arg: 10, scope: !6201, file: !3, line: 309, type: !4443)
!6216 = !DILocalVariable(name: "vectorization_factor", arg: 11, scope: !6201, file: !3, line: 310, type: !17)
!6217 = !DILocalVariable(name: "def_stmts0", scope: !6201, file: !3, line: 312, type: !3535)
!6218 = !DILocalVariable(name: "def_stmts1", scope: !6201, file: !3, line: 313, type: !3535)
!6219 = !DILocalVariable(name: "i", scope: !6201, file: !3, line: 314, type: !17)
!6220 = !DILocalVariable(name: "stmts", scope: !6201, file: !3, line: 315, type: !3535)
!6221 = !DILocalVariable(name: "stmt", scope: !6201, file: !3, line: 316, type: !7)
!6222 = !DILocalVariable(name: "first_stmt_dt0", scope: !6201, file: !3, line: 317, type: !1779)
!6223 = !DILocalVariable(name: "first_stmt_dt1", scope: !6201, file: !3, line: 318, type: !1779)
!6224 = !DILocalVariable(name: "first_stmt_code", scope: !6201, file: !3, line: 319, type: !1115)
!6225 = !DILocalVariable(name: "rhs_code", scope: !6201, file: !3, line: 319, type: !1115)
!6226 = !DILocalVariable(name: "first_stmt_def1_type", scope: !6201, file: !3, line: 320, type: !326)
!6227 = !DILocalVariable(name: "first_stmt_def0_type", scope: !6201, file: !3, line: 320, type: !326)
!6228 = !DILocalVariable(name: "lhs", scope: !6201, file: !3, line: 321, type: !326)
!6229 = !DILocalVariable(name: "stop_recursion", scope: !6201, file: !3, line: 322, type: !6)
!6230 = !DILocalVariable(name: "need_same_oprnds", scope: !6201, file: !3, line: 322, type: !6)
!6231 = !DILocalVariable(name: "vectype", scope: !6201, file: !3, line: 323, type: !326)
!6232 = !DILocalVariable(name: "scalar_type", scope: !6201, file: !3, line: 323, type: !326)
!6233 = !DILocalVariable(name: "first_op1", scope: !6201, file: !3, line: 323, type: !326)
!6234 = !DILocalVariable(name: "ncopies", scope: !6201, file: !3, line: 324, type: !17)
!6235 = !DILocalVariable(name: "optab", scope: !6201, file: !3, line: 325, type: !6236)
!6236 = !DIDerivedType(tag: DW_TAG_typedef, name: "optab", file: !6237, line: 55, baseType: !6238)
!6237 = !DIFile(filename: "./optabs.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!6238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6239, size: 64)
!6239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_d", file: !6237, line: 46, size: 3072, elements: !6240)
!6240 = !{!6241, !6242, !6243, !6244, !6248}
!6241 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !6239, file: !6237, line: 48, baseType: !1795, size: 32)
!6242 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_basename", scope: !6239, file: !6237, line: 49, baseType: !103, size: 64, offset: 64)
!6243 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_suffix", scope: !6239, file: !6237, line: 50, baseType: !105, size: 8, offset: 128)
!6244 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_gen", scope: !6239, file: !6237, line: 51, baseType: !6245, size: 64, offset: 192)
!6245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6246, size: 64)
!6246 = !DISubroutineType(types: !6247)
!6247 = !{null, !6238, !103, !105, !118}
!6248 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !6239, file: !6237, line: 53, baseType: !6249, size: 2784, offset: 256)
!6249 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6250, size: 2784, elements: !6253)
!6250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_handlers", file: !6237, line: 41, size: 32, elements: !6251)
!6251 = !{!6252}
!6252 = !DIDerivedType(tag: DW_TAG_member, name: "insn_code", scope: !6250, file: !6237, line: 43, baseType: !1937, size: 32)
!6253 = !{!6254}
!6254 = !DISubrange(count: 87)
!6255 = !DILocalVariable(name: "icode", scope: !6201, file: !3, line: 326, type: !100)
!6256 = !DILocalVariable(name: "optab_op2_mode", scope: !6201, file: !3, line: 327, type: !118)
!6257 = !DILocalVariable(name: "vec_mode", scope: !6201, file: !3, line: 328, type: !118)
!6258 = !DILocalVariable(name: "first_stmt_const_oprnd", scope: !6201, file: !3, line: 329, type: !326)
!6259 = !DILocalVariable(name: "first_dr", scope: !6201, file: !3, line: 330, type: !3628)
!6260 = !DILocalVariable(name: "pattern0", scope: !6201, file: !3, line: 331, type: !6)
!6261 = !DILocalVariable(name: "pattern1", scope: !6201, file: !3, line: 331, type: !6)
!6262 = !DILocalVariable(name: "dummy", scope: !6201, file: !3, line: 332, type: !295)
!6263 = !DILocalVariable(name: "permutation", scope: !6201, file: !3, line: 333, type: !6)
!6264 = !DILocalVariable(name: "load_place", scope: !6201, file: !3, line: 334, type: !17)
!6265 = !DILocalVariable(name: "first_load", scope: !6201, file: !3, line: 335, type: !7)
!6266 = !DILocalVariable(name: "left_node", scope: !6267, file: !3, line: 622, type: !3551)
!6267 = distinct !DILexicalBlock(scope: !6268, file: !3, line: 621, column: 5)
!6268 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 620, column: 7)
!6269 = !DILocalVariable(name: "right_node", scope: !6270, file: !3, line: 640, type: !3551)
!6270 = distinct !DILexicalBlock(scope: !6271, file: !3, line: 639, column: 5)
!6271 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 638, column: 7)
!6272 = !DILocation(line: 0, scope: !6201)
!6273 = !DILocation(line: 312, column: 3, scope: !6201)
!6274 = !DILocation(line: 312, column: 36, scope: !6201)
!6275 = !DILocation(line: 312, column: 23, scope: !6201)
!6276 = !DILocation(line: 313, column: 3, scope: !6201)
!6277 = !DILocation(line: 313, column: 37, scope: !6201)
!6278 = !DILocation(line: 313, column: 23, scope: !6201)
!6279 = !DILocation(line: 315, column: 31, scope: !6201)
!6280 = !DILocation(line: 316, column: 3, scope: !6201)
!6281 = !DILocation(line: 316, column: 17, scope: !6201)
!6282 = !DILocation(line: 316, column: 10, scope: !6201)
!6283 = !DILocation(line: 317, column: 3, scope: !6201)
!6284 = !DILocation(line: 317, column: 22, scope: !6201)
!6285 = !DILocation(line: 318, column: 3, scope: !6201)
!6286 = !DILocation(line: 318, column: 22, scope: !6201)
!6287 = !DILocation(line: 320, column: 3, scope: !6201)
!6288 = !DILocation(line: 320, column: 8, scope: !6201)
!6289 = !DILocation(line: 320, column: 42, scope: !6201)
!6290 = !DILocation(line: 329, column: 3, scope: !6201)
!6291 = !DILocation(line: 329, column: 8, scope: !6201)
!6292 = !DILocation(line: 331, column: 3, scope: !6201)
!6293 = !DILocation(line: 331, column: 8, scope: !6201)
!6294 = !DILocation(line: 331, column: 26, scope: !6201)
!6295 = !DILocation(line: 332, column: 3, scope: !6201)
!6296 = !DILocation(line: 0, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6298, file: !3, line: 339, column: 5)
!6298 = distinct !DILexicalBlock(scope: !6299, file: !3, line: 338, column: 3)
!6299 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 338, column: 3)
!6300 = !DILocation(line: 0, scope: !6301)
!6301 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 378, column: 8)
!6302 = distinct !DILexicalBlock(scope: !6303, file: !3, line: 373, column: 9)
!6303 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 372, column: 11)
!6304 = !DILocation(line: 338, column: 8, scope: !6299)
!6305 = !DILocation(line: 0, scope: !6299)
!6306 = !DILocation(line: 322, column: 8, scope: !6201)
!6307 = !DILocation(line: 322, column: 32, scope: !6201)
!6308 = !DILocation(line: 323, column: 30, scope: !6201)
!6309 = !DILocation(line: 333, column: 8, scope: !6201)
!6310 = !DILocation(line: 338, column: 15, scope: !6298)
!6311 = !DILocation(line: 338, column: 3, scope: !6299)
!6312 = !DILocation(line: 340, column: 11, scope: !6313)
!6313 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 340, column: 11)
!6314 = !DILocation(line: 340, column: 11, scope: !6297)
!6315 = !DILocation(line: 342, column: 13, scope: !6316)
!6316 = distinct !DILexicalBlock(scope: !6313, file: !3, line: 341, column: 2)
!6317 = !DILocation(line: 342, column: 4, scope: !6316)
!6318 = !DILocation(line: 343, column: 23, scope: !6316)
!6319 = !DILocation(line: 343, column: 34, scope: !6316)
!6320 = !DILocation(line: 343, column: 4, scope: !6316)
!6321 = !DILocation(line: 344, column: 2, scope: !6316)
!6322 = !DILocation(line: 346, column: 29, scope: !6297)
!6323 = !DILocation(line: 346, column: 13, scope: !6297)
!6324 = !DILocation(line: 347, column: 15, scope: !6325)
!6325 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 347, column: 11)
!6326 = !DILocation(line: 347, column: 11, scope: !6297)
!6327 = !DILocation(line: 349, column: 8, scope: !6328)
!6328 = distinct !DILexicalBlock(scope: !6329, file: !3, line: 349, column: 8)
!6329 = distinct !DILexicalBlock(scope: !6325, file: !3, line: 348, column: 2)
!6330 = !DILocation(line: 349, column: 8, scope: !6329)
!6331 = !DILocation(line: 351, column: 17, scope: !6332)
!6332 = distinct !DILexicalBlock(scope: !6328, file: !3, line: 350, column: 6)
!6333 = !DILocation(line: 351, column: 8, scope: !6332)
!6334 = !DILocation(line: 353, column: 27, scope: !6332)
!6335 = !DILocation(line: 353, column: 38, scope: !6332)
!6336 = !DILocation(line: 353, column: 8, scope: !6332)
!6337 = !DILocation(line: 354, column: 6, scope: !6332)
!6338 = !DILocation(line: 359, column: 52, scope: !6297)
!6339 = !DILocation(line: 359, column: 21, scope: !6297)
!6340 = !DILocation(line: 360, column: 17, scope: !6297)
!6341 = !DILocation(line: 361, column: 12, scope: !6342)
!6342 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 361, column: 11)
!6343 = !DILocation(line: 361, column: 11, scope: !6297)
!6344 = !DILocation(line: 363, column: 15, scope: !6345)
!6345 = distinct !DILexicalBlock(scope: !6346, file: !3, line: 363, column: 15)
!6346 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 362, column: 9)
!6347 = !DILocation(line: 363, column: 15, scope: !6346)
!6348 = !DILocation(line: 365, column: 24, scope: !6349)
!6349 = distinct !DILexicalBlock(scope: !6345, file: !3, line: 364, column: 13)
!6350 = !DILocation(line: 365, column: 15, scope: !6349)
!6351 = !DILocation(line: 366, column: 35, scope: !6349)
!6352 = !DILocation(line: 366, column: 15, scope: !6349)
!6353 = !DILocation(line: 367, column: 13, scope: !6349)
!6354 = !DILocation(line: 371, column: 40, scope: !6297)
!6355 = !DILocation(line: 371, column: 38, scope: !6297)
!6356 = !DILocation(line: 371, column: 17, scope: !6297)
!6357 = !DILocation(line: 372, column: 19, scope: !6303)
!6358 = !DILocation(line: 372, column: 11, scope: !6297)
!6359 = !DILocation(line: 374, column: 8, scope: !6360)
!6360 = distinct !DILexicalBlock(scope: !6302, file: !3, line: 374, column: 8)
!6361 = !DILocation(line: 374, column: 8, scope: !6302)
!6362 = !DILocation(line: 375, column: 22, scope: !6360)
!6363 = !DILocation(line: 375, column: 13, scope: !6360)
!6364 = !DILocation(line: 378, column: 8, scope: !6302)
!6365 = !DILocation(line: 383, column: 25, scope: !6366)
!6366 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 383, column: 11)
!6367 = !DILocation(line: 383, column: 11, scope: !6366)
!6368 = !DILocation(line: 383, column: 23, scope: !6366)
!6369 = !DILocation(line: 383, column: 11, scope: !6297)
!6370 = !DILocation(line: 384, column: 23, scope: !6366)
!6371 = !DILocation(line: 384, column: 21, scope: !6366)
!6372 = !DILocation(line: 384, column: 9, scope: !6366)
!6373 = !DILocation(line: 386, column: 27, scope: !6374)
!6374 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 386, column: 11)
!6375 = !DILocation(line: 386, column: 11, scope: !6374)
!6376 = !DILocation(line: 386, column: 11, scope: !6297)
!6377 = !DILocation(line: 389, column: 37, scope: !6374)
!6378 = !DILocation(line: 389, column: 13, scope: !6374)
!6379 = !DILocation(line: 0, scope: !6374)
!6380 = !DILocation(line: 392, column: 13, scope: !6381)
!6381 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 392, column: 11)
!6382 = !DILocation(line: 392, column: 11, scope: !6297)
!6383 = !DILocation(line: 398, column: 32, scope: !6384)
!6384 = distinct !DILexicalBlock(scope: !6385, file: !3, line: 398, column: 8)
!6385 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 393, column: 2)
!6386 = !DILocation(line: 402, column: 19, scope: !6387)
!6387 = distinct !DILexicalBlock(scope: !6384, file: !3, line: 401, column: 6)
!6388 = !DILocation(line: 405, column: 16, scope: !6387)
!6389 = !DILocation(line: 408, column: 13, scope: !6390)
!6390 = distinct !DILexicalBlock(scope: !6387, file: !3, line: 408, column: 12)
!6391 = !DILocation(line: 409, column: 5, scope: !6390)
!6392 = !DILocation(line: 409, column: 9, scope: !6390)
!6393 = !DILocation(line: 409, column: 41, scope: !6390)
!6394 = !DILocation(line: 410, column: 9, scope: !6390)
!6395 = !DILocation(line: 408, column: 12, scope: !6387)
!6396 = !DILocation(line: 413, column: 13, scope: !6397)
!6397 = distinct !DILexicalBlock(scope: !6390, file: !3, line: 411, column: 3)
!6398 = !DILocation(line: 416, column: 10, scope: !6399)
!6399 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 416, column: 9)
!6400 = !DILocation(line: 416, column: 9, scope: !6397)
!6401 = !DILocation(line: 418, column: 13, scope: !6402)
!6402 = distinct !DILexicalBlock(scope: !6403, file: !3, line: 418, column: 13)
!6403 = distinct !DILexicalBlock(scope: !6399, file: !3, line: 417, column: 7)
!6404 = !DILocation(line: 418, column: 13, scope: !6403)
!6405 = !DILocation(line: 419, column: 13, scope: !6402)
!6406 = !DILocation(line: 419, column: 4, scope: !6402)
!6407 = !DILocation(line: 422, column: 19, scope: !6397)
!6408 = !DILocation(line: 422, column: 51, scope: !6397)
!6409 = !DILocation(line: 423, column: 15, scope: !6410)
!6410 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 423, column: 9)
!6411 = !DILocation(line: 423, column: 9, scope: !6397)
!6412 = !DILocation(line: 425, column: 13, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6414, file: !3, line: 425, column: 13)
!6414 = distinct !DILexicalBlock(scope: !6410, file: !3, line: 424, column: 7)
!6415 = !DILocation(line: 425, column: 13, scope: !6414)
!6416 = !DILocation(line: 426, column: 13, scope: !6413)
!6417 = !DILocation(line: 426, column: 4, scope: !6413)
!6418 = !DILocation(line: 430, column: 22, scope: !6397)
!6419 = !DILocation(line: 430, column: 39, scope: !6397)
!6420 = !DILocation(line: 430, column: 50, scope: !6397)
!6421 = !DILocation(line: 431, column: 10, scope: !6422)
!6422 = distinct !DILexicalBlock(scope: !6397, file: !3, line: 431, column: 9)
!6423 = !DILocation(line: 431, column: 9, scope: !6397)
!6424 = !DILocation(line: 434, column: 41, scope: !6425)
!6425 = distinct !DILexicalBlock(scope: !6422, file: !3, line: 432, column: 7)
!6426 = !DILocation(line: 434, column: 21, scope: !6425)
!6427 = !DILocation(line: 435, column: 7, scope: !6425)
!6428 = !DILocation(line: 441, column: 24, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !6430, file: !3, line: 441, column: 8)
!6430 = distinct !DILexicalBlock(scope: !6381, file: !3, line: 440, column: 2)
!6431 = !DILocation(line: 442, column: 8, scope: !6429)
!6432 = !DILocation(line: 442, column: 28, scope: !6429)
!6433 = !DILocation(line: 443, column: 17, scope: !6429)
!6434 = !DILocation(line: 443, column: 5, scope: !6429)
!6435 = !DILocation(line: 444, column: 28, scope: !6429)
!6436 = !DILocation(line: 445, column: 17, scope: !6429)
!6437 = !DILocation(line: 445, column: 5, scope: !6429)
!6438 = !DILocation(line: 447, column: 12, scope: !6439)
!6439 = distinct !DILexicalBlock(scope: !6440, file: !3, line: 447, column: 12)
!6440 = distinct !DILexicalBlock(scope: !6429, file: !3, line: 446, column: 6)
!6441 = !DILocation(line: 447, column: 12, scope: !6440)
!6442 = !DILocation(line: 449, column: 14, scope: !6443)
!6443 = distinct !DILexicalBlock(scope: !6439, file: !3, line: 448, column: 3)
!6444 = !DILocation(line: 449, column: 5, scope: !6443)
!6445 = !DILocation(line: 451, column: 24, scope: !6443)
!6446 = !DILocation(line: 451, column: 35, scope: !6443)
!6447 = !DILocation(line: 451, column: 5, scope: !6443)
!6448 = !DILocation(line: 452, column: 3, scope: !6443)
!6449 = !DILocation(line: 457, column: 8, scope: !6450)
!6450 = distinct !DILexicalBlock(scope: !6430, file: !3, line: 457, column: 8)
!6451 = !DILocation(line: 458, column: 8, scope: !6450)
!6452 = !DILocation(line: 458, column: 60, scope: !6450)
!6453 = !DILocation(line: 458, column: 40, scope: !6450)
!6454 = !DILocation(line: 458, column: 12, scope: !6450)
!6455 = !DILocation(line: 457, column: 8, scope: !6430)
!6456 = !DILocation(line: 460, column: 12, scope: !6457)
!6457 = distinct !DILexicalBlock(scope: !6458, file: !3, line: 460, column: 12)
!6458 = distinct !DILexicalBlock(scope: !6450, file: !3, line: 459, column: 6)
!6459 = !DILocation(line: 460, column: 12, scope: !6458)
!6460 = !DILocation(line: 462, column: 14, scope: !6461)
!6461 = distinct !DILexicalBlock(scope: !6457, file: !3, line: 461, column: 3)
!6462 = !DILocation(line: 462, column: 5, scope: !6461)
!6463 = !DILocation(line: 464, column: 24, scope: !6461)
!6464 = !DILocation(line: 464, column: 35, scope: !6461)
!6465 = !DILocation(line: 464, column: 5, scope: !6461)
!6466 = !DILocation(line: 465, column: 3, scope: !6461)
!6467 = !DILocation(line: 472, column: 11, scope: !6468)
!6468 = distinct !DILexicalBlock(scope: !6297, file: !3, line: 472, column: 11)
!6469 = !DILocation(line: 472, column: 11, scope: !6297)
!6470 = !DILocation(line: 474, column: 8, scope: !6471)
!6471 = distinct !DILexicalBlock(scope: !6472, file: !3, line: 474, column: 8)
!6472 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 473, column: 2)
!6473 = !DILocation(line: 474, column: 8, scope: !6472)
!6474 = !DILocation(line: 477, column: 64, scope: !6475)
!6475 = distinct !DILexicalBlock(scope: !6476, file: !3, line: 477, column: 12)
!6476 = distinct !DILexicalBlock(scope: !6471, file: !3, line: 475, column: 6)
!6477 = !DILocation(line: 478, column: 7, scope: !6475)
!6478 = !DILocation(line: 477, column: 13, scope: !6475)
!6479 = !DILocation(line: 477, column: 12, scope: !6476)
!6480 = !DILocation(line: 492, column: 22, scope: !6481)
!6481 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 492, column: 21)
!6482 = distinct !DILexicalBlock(scope: !6471, file: !3, line: 489, column: 8)
!6483 = !DILocation(line: 492, column: 67, scope: !6481)
!6484 = !DILocation(line: 492, column: 64, scope: !6481)
!6485 = !DILocation(line: 493, column: 22, scope: !6481)
!6486 = !DILocation(line: 493, column: 25, scope: !6481)
!6487 = !DILocation(line: 493, column: 62, scope: !6481)
!6488 = !DILocation(line: 494, column: 21, scope: !6481)
!6489 = !DILocation(line: 494, column: 25, scope: !6481)
!6490 = !DILocation(line: 494, column: 70, scope: !6481)
!6491 = !DILocation(line: 494, column: 67, scope: !6481)
!6492 = !DILocation(line: 495, column: 25, scope: !6481)
!6493 = !DILocation(line: 495, column: 28, scope: !6481)
!6494 = !DILocation(line: 495, column: 65, scope: !6481)
!6495 = !DILocation(line: 492, column: 21, scope: !6482)
!6496 = !DILocation(line: 509, column: 21, scope: !6497)
!6497 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 509, column: 21)
!6498 = !DILocation(line: 497, column: 25, scope: !6499)
!6499 = distinct !DILexicalBlock(scope: !6500, file: !3, line: 497, column: 25)
!6500 = distinct !DILexicalBlock(scope: !6481, file: !3, line: 496, column: 19)
!6501 = !DILocation(line: 497, column: 25, scope: !6500)
!6502 = !DILocation(line: 499, column: 34, scope: !6503)
!6503 = distinct !DILexicalBlock(scope: !6499, file: !3, line: 498, column: 23)
!6504 = !DILocation(line: 499, column: 25, scope: !6503)
!6505 = !DILocation(line: 501, column: 44, scope: !6503)
!6506 = !DILocation(line: 501, column: 55, scope: !6503)
!6507 = !DILocation(line: 501, column: 25, scope: !6503)
!6508 = !DILocation(line: 502, column: 23, scope: !6503)
!6509 = !DILocation(line: 510, column: 31, scope: !6497)
!6510 = !DILocation(line: 510, column: 21, scope: !6497)
!6511 = !DILocation(line: 509, column: 21, scope: !6482)
!6512 = !DILocation(line: 512, column: 25, scope: !6513)
!6513 = distinct !DILexicalBlock(scope: !6514, file: !3, line: 512, column: 25)
!6514 = distinct !DILexicalBlock(scope: !6497, file: !3, line: 511, column: 19)
!6515 = !DILocation(line: 512, column: 25, scope: !6514)
!6516 = !DILocation(line: 514, column: 34, scope: !6517)
!6517 = distinct !DILexicalBlock(scope: !6513, file: !3, line: 513, column: 23)
!6518 = !DILocation(line: 514, column: 25, scope: !6517)
!6519 = !DILocation(line: 517, column: 44, scope: !6517)
!6520 = !DILocation(line: 517, column: 55, scope: !6517)
!6521 = !DILocation(line: 517, column: 25, scope: !6517)
!6522 = !DILocation(line: 518, column: 23, scope: !6517)
!6523 = !DILocation(line: 523, column: 30, scope: !6482)
!6524 = !DILocation(line: 525, column: 33, scope: !6525)
!6525 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 525, column: 19)
!6526 = !DILocation(line: 525, column: 30, scope: !6525)
!6527 = !DILocation(line: 525, column: 19, scope: !6482)
!6528 = !DILocation(line: 527, column: 30, scope: !6529)
!6529 = distinct !DILexicalBlock(scope: !6525, file: !3, line: 526, column: 17)
!6530 = !DILocation(line: 528, column: 23, scope: !6531)
!6531 = distinct !DILexicalBlock(scope: !6529, file: !3, line: 528, column: 23)
!6532 = !DILocation(line: 529, column: 23, scope: !6531)
!6533 = !DILocation(line: 528, column: 23, scope: !6529)
!6534 = !DILocation(line: 531, column: 27, scope: !6535)
!6535 = distinct !DILexicalBlock(scope: !6536, file: !3, line: 531, column: 27)
!6536 = distinct !DILexicalBlock(scope: !6531, file: !3, line: 530, column: 21)
!6537 = !DILocation(line: 531, column: 27, scope: !6536)
!6538 = !DILocation(line: 533, column: 36, scope: !6539)
!6539 = distinct !DILexicalBlock(scope: !6535, file: !3, line: 532, column: 25)
!6540 = !DILocation(line: 533, column: 27, scope: !6539)
!6541 = !DILocation(line: 535, column: 46, scope: !6539)
!6542 = !DILocation(line: 535, column: 57, scope: !6539)
!6543 = !DILocation(line: 535, column: 27, scope: !6539)
!6544 = !DILocation(line: 536, column: 25, scope: !6539)
!6545 = !DILocation(line: 542, column: 57, scope: !6529)
!6546 = !DILocation(line: 542, column: 41, scope: !6529)
!6547 = !DILocation(line: 543, column: 59, scope: !6529)
!6548 = !DILocation(line: 542, column: 19, scope: !6529)
!6549 = !DILocation(line: 549, column: 66, scope: !6482)
!6550 = !DILocation(line: 544, column: 17, scope: !6529)
!6551 = !DILocation(line: 549, column: 28, scope: !6482)
!6552 = !DILocation(line: 551, column: 30, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6482, file: !3, line: 551, column: 19)
!6554 = !DILocation(line: 551, column: 19, scope: !6482)
!6555 = !DILocation(line: 554, column: 15, scope: !6482)
!6556 = !DILocation(line: 558, column: 14, scope: !6482)
!6557 = !DILocation(line: 563, column: 8, scope: !6558)
!6558 = distinct !DILexicalBlock(scope: !6559, file: !3, line: 563, column: 8)
!6559 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 562, column: 2)
!6560 = !DILocation(line: 563, column: 35, scope: !6558)
!6561 = !DILocation(line: 563, column: 8, scope: !6559)
!6562 = !DILocation(line: 566, column: 12, scope: !6563)
!6563 = distinct !DILexicalBlock(scope: !6564, file: !3, line: 566, column: 12)
!6564 = distinct !DILexicalBlock(scope: !6558, file: !3, line: 564, column: 6)
!6565 = !DILocation(line: 566, column: 12, scope: !6564)
!6566 = !DILocation(line: 568, column: 14, scope: !6567)
!6567 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 567, column: 3)
!6568 = !DILocation(line: 568, column: 5, scope: !6567)
!6569 = !DILocation(line: 569, column: 24, scope: !6567)
!6570 = !DILocation(line: 569, column: 35, scope: !6567)
!6571 = !DILocation(line: 569, column: 5, scope: !6567)
!6572 = !DILocation(line: 570, column: 3, scope: !6567)
!6573 = !DILocation(line: 577, column: 35, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6559, file: !3, line: 577, column: 8)
!6575 = !DILocation(line: 578, column: 8, scope: !6574)
!6576 = !DILocation(line: 578, column: 38, scope: !6574)
!6577 = !DILocation(line: 577, column: 8, scope: !6559)
!6578 = !DILocation(line: 580, column: 12, scope: !6579)
!6579 = distinct !DILexicalBlock(scope: !6580, file: !3, line: 580, column: 12)
!6580 = distinct !DILexicalBlock(scope: !6574, file: !3, line: 579, column: 6)
!6581 = !DILocation(line: 580, column: 12, scope: !6580)
!6582 = !DILocation(line: 582, column: 14, scope: !6583)
!6583 = distinct !DILexicalBlock(scope: !6579, file: !3, line: 581, column: 3)
!6584 = !DILocation(line: 582, column: 5, scope: !6583)
!6585 = !DILocation(line: 583, column: 14, scope: !6583)
!6586 = !DILocation(line: 583, column: 5, scope: !6583)
!6587 = !DILocation(line: 584, column: 24, scope: !6583)
!6588 = !DILocation(line: 584, column: 35, scope: !6583)
!6589 = !DILocation(line: 584, column: 5, scope: !6583)
!6590 = !DILocation(line: 585, column: 3, scope: !6583)
!6591 = !DILocation(line: 591, column: 60, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6559, file: !3, line: 591, column: 8)
!6593 = !DILocation(line: 591, column: 67, scope: !6592)
!6594 = !DILocation(line: 591, column: 9, scope: !6592)
!6595 = !DILocation(line: 591, column: 8, scope: !6559)
!6596 = !DILocation(line: 338, column: 54, scope: !6298)
!6597 = !DILocation(line: 338, column: 3, scope: !6298)
!6598 = distinct !{!6598, !6311, !6599}
!6599 = !DILocation(line: 601, column: 5, scope: !6299)
!6600 = !DILocation(line: 604, column: 19, scope: !6201)
!6601 = !DILocation(line: 604, column: 16, scope: !6201)
!6602 = !DILocation(line: 605, column: 20, scope: !6201)
!6603 = !DILocation(line: 605, column: 17, scope: !6201)
!6604 = !DILocation(line: 608, column: 7, scope: !6605)
!6605 = distinct !DILexicalBlock(scope: !6201, file: !3, line: 608, column: 7)
!6606 = !DILocation(line: 608, column: 7, scope: !6201)
!6607 = !DILocation(line: 610, column: 11, scope: !6608)
!6608 = distinct !DILexicalBlock(scope: !6609, file: !3, line: 610, column: 11)
!6609 = distinct !DILexicalBlock(scope: !6605, file: !3, line: 609, column: 5)
!6610 = !DILocation(line: 610, column: 11, scope: !6609)
!6611 = !DILocation(line: 612, column: 11, scope: !6612)
!6612 = distinct !DILexicalBlock(scope: !6608, file: !3, line: 611, column: 9)
!6613 = !DILocation(line: 613, column: 24, scope: !6612)
!6614 = !DILocation(line: 614, column: 9, scope: !6612)
!6615 = !DILocation(line: 620, column: 7, scope: !6268)
!6616 = !DILocation(line: 620, column: 22, scope: !6268)
!6617 = !DILocation(line: 620, column: 7, scope: !6201)
!6618 = !DILocation(line: 622, column: 7, scope: !6267)
!6619 = !DILocation(line: 622, column: 28, scope: !6267)
!6620 = !DILocation(line: 0, scope: !6267)
!6621 = !DILocation(line: 622, column: 16, scope: !6267)
!6622 = !DILocation(line: 623, column: 43, scope: !6267)
!6623 = !DILocation(line: 623, column: 7, scope: !6267)
!6624 = !DILocation(line: 623, column: 41, scope: !6267)
!6625 = !DILocation(line: 624, column: 7, scope: !6267)
!6626 = !DILocation(line: 624, column: 38, scope: !6267)
!6627 = !DILocation(line: 625, column: 7, scope: !6267)
!6628 = !DILocation(line: 625, column: 33, scope: !6267)
!6629 = !DILocation(line: 626, column: 7, scope: !6267)
!6630 = !DILocation(line: 626, column: 34, scope: !6267)
!6631 = !DILocation(line: 627, column: 7, scope: !6267)
!6632 = !DILocation(line: 627, column: 49, scope: !6267)
!6633 = !DILocation(line: 628, column: 7, scope: !6267)
!6634 = !DILocation(line: 628, column: 48, scope: !6267)
!6635 = !DILocation(line: 629, column: 12, scope: !6636)
!6636 = distinct !DILexicalBlock(scope: !6267, file: !3, line: 629, column: 11)
!6637 = !DILocation(line: 629, column: 11, scope: !6267)
!6638 = !DILocation(line: 635, column: 31, scope: !6267)
!6639 = !DILocation(line: 635, column: 7, scope: !6267)
!6640 = !DILocation(line: 635, column: 29, scope: !6267)
!6641 = !DILocation(line: 636, column: 5, scope: !6268)
!6642 = !DILocation(line: 638, column: 7, scope: !6271)
!6643 = !DILocation(line: 638, column: 22, scope: !6271)
!6644 = !DILocation(line: 638, column: 7, scope: !6201)
!6645 = !DILocation(line: 640, column: 7, scope: !6270)
!6646 = !DILocation(line: 640, column: 29, scope: !6270)
!6647 = !DILocation(line: 0, scope: !6270)
!6648 = !DILocation(line: 640, column: 16, scope: !6270)
!6649 = !DILocation(line: 641, column: 44, scope: !6270)
!6650 = !DILocation(line: 641, column: 7, scope: !6270)
!6651 = !DILocation(line: 641, column: 42, scope: !6270)
!6652 = !DILocation(line: 642, column: 7, scope: !6270)
!6653 = !DILocation(line: 642, column: 39, scope: !6270)
!6654 = !DILocation(line: 643, column: 7, scope: !6270)
!6655 = !DILocation(line: 643, column: 34, scope: !6270)
!6656 = !DILocation(line: 644, column: 7, scope: !6270)
!6657 = !DILocation(line: 644, column: 35, scope: !6270)
!6658 = !DILocation(line: 645, column: 7, scope: !6270)
!6659 = !DILocation(line: 645, column: 50, scope: !6270)
!6660 = !DILocation(line: 646, column: 7, scope: !6270)
!6661 = !DILocation(line: 646, column: 49, scope: !6270)
!6662 = !DILocation(line: 647, column: 12, scope: !6663)
!6663 = distinct !DILexicalBlock(scope: !6270, file: !3, line: 647, column: 11)
!6664 = !DILocation(line: 647, column: 11, scope: !6270)
!6665 = !DILocation(line: 653, column: 32, scope: !6270)
!6666 = !DILocation(line: 653, column: 7, scope: !6270)
!6667 = !DILocation(line: 653, column: 30, scope: !6270)
!6668 = !DILocation(line: 654, column: 5, scope: !6271)
!6669 = !DILocation(line: 656, column: 3, scope: !6201)
!6670 = !DILocation(line: 657, column: 1, scope: !6201)
!6671 = distinct !DISubprogram(name: "VEC_slp_tree_base_length", scope: !1757, file: !1757, line: 118, type: !6672, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6674)
!6672 = !DISubroutineType(types: !6673)
!6673 = !{!17, !5737}
!6674 = !{!6675}
!6675 = !DILocalVariable(name: "vec_", arg: 1, scope: !6671, file: !1757, line: 118, type: !5737)
!6676 = !DILocation(line: 0, scope: !6671)
!6677 = !DILocation(line: 118, column: 1, scope: !6671)
!6678 = distinct !DISubprogram(name: "vect_supported_load_permutation_p", scope: !3, file: !3, line: 796, type: !6679, scopeLine: 798, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6681)
!6679 = !DISubroutineType(types: !6680)
!6680 = !{!6, !3602, !100, !3560}
!6681 = !{!6682, !6683, !6684, !6685, !6686, !6687, !6688, !6689, !6690, !6691}
!6682 = !DILocalVariable(name: "slp_instn", arg: 1, scope: !6678, file: !3, line: 796, type: !3602)
!6683 = !DILocalVariable(name: "group_size", arg: 2, scope: !6678, file: !3, line: 796, type: !100)
!6684 = !DILocalVariable(name: "load_permutation", arg: 3, scope: !6678, file: !3, line: 797, type: !3560)
!6685 = !DILocalVariable(name: "i", scope: !6678, file: !3, line: 799, type: !100)
!6686 = !DILocalVariable(name: "j", scope: !6678, file: !3, line: 799, type: !100)
!6687 = !DILocalVariable(name: "prev", scope: !6678, file: !3, line: 799, type: !100)
!6688 = !DILocalVariable(name: "next", scope: !6678, file: !3, line: 799, type: !100)
!6689 = !DILocalVariable(name: "k", scope: !6678, file: !3, line: 799, type: !100)
!6690 = !DILocalVariable(name: "supported", scope: !6678, file: !3, line: 800, type: !6)
!6691 = !DILocalVariable(name: "load_index", scope: !6678, file: !3, line: 801, type: !6692)
!6692 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !6693, line: 45, baseType: !6694)
!6693 = !DIFile(filename: "./sbitmap.h", directory: "/u/ziyangx/old_or_raw_benchmarks/spec2017-workspace/benchspec/CPU/502.gcc_r/src")
!6694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6695, size: 64)
!6695 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !6693, line: 39, size: 192, elements: !6696)
!6696 = !{!6697, !6698, !6699, !6700}
!6697 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !6695, file: !6693, line: 41, baseType: !1753, size: 64)
!6698 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !6695, file: !6693, line: 42, baseType: !17, size: 32, offset: 64)
!6699 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !6695, file: !6693, line: 43, baseType: !17, size: 32, offset: 96)
!6700 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !6695, file: !6693, line: 44, baseType: !6701, size: 64, offset: 128)
!6701 = !DICompositeType(tag: DW_TAG_array_type, baseType: !278, size: 64, elements: !115)
!6702 = !DILocation(line: 0, scope: !6678)
!6703 = !DILocation(line: 799, column: 3, scope: !6678)
!6704 = !DILocation(line: 804, column: 8, scope: !6705)
!6705 = distinct !DILexicalBlock(scope: !6678, file: !3, line: 804, column: 7)
!6706 = !DILocation(line: 804, column: 7, scope: !6678)
!6707 = !DILocation(line: 807, column: 7, scope: !6708)
!6708 = distinct !DILexicalBlock(scope: !6678, file: !3, line: 807, column: 7)
!6709 = !DILocation(line: 807, column: 7, scope: !6678)
!6710 = !DILocation(line: 809, column: 16, scope: !6711)
!6711 = distinct !DILexicalBlock(scope: !6708, file: !3, line: 808, column: 5)
!6712 = !DILocation(line: 809, column: 7, scope: !6711)
!6713 = !DILocation(line: 0, scope: !6714)
!6714 = distinct !DILexicalBlock(scope: !6715, file: !3, line: 810, column: 7)
!6715 = distinct !DILexicalBlock(scope: !6711, file: !3, line: 810, column: 7)
!6716 = !DILocation(line: 810, column: 12, scope: !6715)
!6717 = !DILocation(line: 0, scope: !6715)
!6718 = !DILocation(line: 810, column: 19, scope: !6714)
!6719 = !DILocation(line: 810, column: 7, scope: !6715)
!6720 = !DILocation(line: 811, column: 18, scope: !6714)
!6721 = !DILocation(line: 811, column: 36, scope: !6714)
!6722 = !DILocation(line: 811, column: 9, scope: !6714)
!6723 = !DILocation(line: 810, column: 66, scope: !6714)
!6724 = !DILocation(line: 810, column: 7, scope: !6714)
!6725 = distinct !{!6725, !6719, !6726}
!6726 = !DILocation(line: 811, column: 40, scope: !6715)
!6727 = !DILocation(line: 817, column: 7, scope: !6728)
!6728 = distinct !DILexicalBlock(scope: !6678, file: !3, line: 817, column: 7)
!6729 = !DILocation(line: 818, column: 37, scope: !6728)
!6730 = !DILocation(line: 818, column: 7, scope: !6728)
!6731 = !DILocation(line: 817, column: 7, scope: !6678)
!6732 = !DILocation(line: 822, column: 16, scope: !6678)
!6733 = !DILocation(line: 823, column: 3, scope: !6678)
!6734 = !DILocation(line: 824, column: 8, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6678, file: !3, line: 824, column: 3)
!6736 = !DILocation(line: 799, column: 17, scope: !6678)
!6737 = !DILocation(line: 0, scope: !6735)
!6738 = !DILocation(line: 824, column: 17, scope: !6739)
!6739 = distinct !DILexicalBlock(scope: !6735, file: !3, line: 824, column: 3)
!6740 = !DILocation(line: 824, column: 3, scope: !6735)
!6741 = !DILocation(line: 826, column: 18, scope: !6742)
!6742 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 826, column: 7)
!6743 = distinct !DILexicalBlock(scope: !6739, file: !3, line: 825, column: 5)
!6744 = !DILocation(line: 826, column: 12, scope: !6742)
!6745 = !DILocation(line: 0, scope: !6742)
!6746 = !DILocation(line: 827, column: 12, scope: !6747)
!6747 = distinct !DILexicalBlock(scope: !6742, file: !3, line: 826, column: 7)
!6748 = !DILocation(line: 827, column: 62, scope: !6747)
!6749 = !DILocation(line: 827, column: 57, scope: !6747)
!6750 = !DILocation(line: 826, column: 7, scope: !6742)
!6751 = !DILocation(line: 830, column: 16, scope: !6752)
!6752 = distinct !DILexicalBlock(scope: !6753, file: !3, line: 830, column: 14)
!6753 = distinct !DILexicalBlock(scope: !6747, file: !3, line: 829, column: 8)
!6754 = !DILocation(line: 830, column: 37, scope: !6752)
!6755 = !DILocation(line: 830, column: 42, scope: !6752)
!6756 = !DILocation(line: 830, column: 34, scope: !6752)
!6757 = !DILocation(line: 828, column: 13, scope: !6747)
!6758 = !DILocation(line: 828, column: 18, scope: !6747)
!6759 = !DILocation(line: 826, column: 7, scope: !6747)
!6760 = distinct !{!6760, !6750, !6761}
!6761 = !DILocation(line: 837, column: 8, scope: !6742)
!6762 = !DILocation(line: 839, column: 11, scope: !6763)
!6763 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 839, column: 11)
!6764 = !DILocation(line: 839, column: 11, scope: !6743)
!6765 = !DILocation(line: 845, column: 7, scope: !6743)
!6766 = !DILocation(line: 824, column: 32, scope: !6739)
!6767 = !DILocation(line: 824, column: 3, scope: !6739)
!6768 = distinct !{!6768, !6740, !6769}
!6769 = !DILocation(line: 846, column: 5, scope: !6735)
!6770 = !DILocation(line: 848, column: 3, scope: !6678)
!6771 = !DILocation(line: 850, column: 7, scope: !6772)
!6772 = distinct !DILexicalBlock(scope: !6678, file: !3, line: 850, column: 7)
!6773 = !DILocation(line: 850, column: 22, scope: !6772)
!6774 = !DILocation(line: 850, column: 17, scope: !6772)
!6775 = !DILocation(line: 851, column: 10, scope: !6772)
!6776 = !DILocation(line: 850, column: 7, scope: !6678)
!6777 = !DILocation(line: 854, column: 3, scope: !6678)
!6778 = !DILocation(line: 855, column: 1, scope: !6678)
!6779 = distinct !DISubprogram(name: "vect_find_first_load_in_slp_instance", scope: !3, file: !3, line: 865, type: !6780, scopeLine: 866, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6782)
!6780 = !DISubroutineType(types: !6781)
!6781 = !{!7, !3602}
!6782 = !{!6783, !6784, !6785, !6786, !6787, !6788}
!6783 = !DILocalVariable(name: "instance", arg: 1, scope: !6779, file: !3, line: 865, type: !3602)
!6784 = !DILocalVariable(name: "i", scope: !6779, file: !3, line: 867, type: !100)
!6785 = !DILocalVariable(name: "j", scope: !6779, file: !3, line: 867, type: !100)
!6786 = !DILocalVariable(name: "load_node", scope: !6779, file: !3, line: 868, type: !3551)
!6787 = !DILocalVariable(name: "first_load", scope: !6779, file: !3, line: 869, type: !7)
!6788 = !DILocalVariable(name: "load", scope: !6779, file: !3, line: 869, type: !7)
!6789 = !DILocation(line: 0, scope: !6779)
!6790 = !DILocation(line: 868, column: 3, scope: !6779)
!6791 = !DILocation(line: 869, column: 3, scope: !6779)
!6792 = !DILocation(line: 0, scope: !6793)
!6793 = distinct !DILexicalBlock(scope: !6794, file: !3, line: 871, column: 3)
!6794 = distinct !DILexicalBlock(scope: !6779, file: !3, line: 871, column: 3)
!6795 = !DILocation(line: 871, column: 8, scope: !6794)
!6796 = !DILocation(line: 0, scope: !6794)
!6797 = !DILocation(line: 869, column: 10, scope: !6779)
!6798 = !DILocation(line: 872, column: 8, scope: !6793)
!6799 = !DILocation(line: 871, column: 3, scope: !6794)
!6800 = !DILocation(line: 874, column: 5, scope: !6801)
!6801 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 874, column: 5)
!6802 = !DILocation(line: 0, scope: !6801)
!6803 = !DILocation(line: 875, column: 10, scope: !6804)
!6804 = distinct !DILexicalBlock(scope: !6801, file: !3, line: 874, column: 5)
!6805 = !DILocation(line: 877, column: 38, scope: !6804)
!6806 = !DILocation(line: 877, column: 20, scope: !6804)
!6807 = !DILocation(line: 876, column: 11, scope: !6804)
!6808 = !DILocation(line: 874, column: 5, scope: !6804)
!6809 = distinct !{!6809, !6800, !6810}
!6810 = !DILocation(line: 877, column: 54, scope: !6801)
!6811 = !DILocation(line: 873, column: 9, scope: !6793)
!6812 = !DILocation(line: 871, column: 3, scope: !6793)
!6813 = distinct !{!6813, !6799, !6814}
!6814 = !DILocation(line: 877, column: 54, scope: !6794)
!6815 = !DILocation(line: 880, column: 1, scope: !6779)
!6816 = !DILocation(line: 879, column: 3, scope: !6779)
!6817 = distinct !DISubprogram(name: "VEC_slp_instance_heap_safe_push", scope: !1757, file: !1757, line: 153, type: !6818, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6821)
!6818 = !DISubroutineType(types: !6819)
!6819 = !{!4737, !6820, !3602}
!6820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3590, size: 64)
!6821 = !{!6822, !6823}
!6822 = !DILocalVariable(name: "vec_", arg: 1, scope: !6817, file: !1757, line: 153, type: !6820)
!6823 = !DILocalVariable(name: "obj_", arg: 2, scope: !6817, file: !1757, line: 153, type: !3602)
!6824 = !DILocation(line: 0, scope: !6817)
!6825 = !DILocation(line: 153, column: 1, scope: !6817)
!6826 = distinct !DISubprogram(name: "vect_print_slp_tree", scope: !3, file: !3, line: 661, type: !4406, scopeLine: 662, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6827)
!6827 = !{!6828, !6829, !6830}
!6828 = !DILocalVariable(name: "node", arg: 1, scope: !6826, file: !3, line: 661, type: !3551)
!6829 = !DILocalVariable(name: "i", scope: !6826, file: !3, line: 663, type: !100)
!6830 = !DILocalVariable(name: "stmt", scope: !6826, file: !3, line: 664, type: !7)
!6831 = !DILocation(line: 0, scope: !6826)
!6832 = !DILocation(line: 664, column: 3, scope: !6826)
!6833 = !DILocation(line: 666, column: 8, scope: !6834)
!6834 = distinct !DILexicalBlock(scope: !6826, file: !3, line: 666, column: 7)
!6835 = !DILocation(line: 666, column: 7, scope: !6826)
!6836 = !DILocation(line: 669, column: 12, scope: !6826)
!6837 = !DILocation(line: 669, column: 3, scope: !6826)
!6838 = !DILocation(line: 0, scope: !6839)
!6839 = distinct !DILexicalBlock(scope: !6840, file: !3, line: 670, column: 3)
!6840 = distinct !DILexicalBlock(scope: !6826, file: !3, line: 670, column: 3)
!6841 = !DILocation(line: 670, column: 8, scope: !6840)
!6842 = !DILocation(line: 0, scope: !6840)
!6843 = !DILocation(line: 670, column: 15, scope: !6839)
!6844 = !DILocation(line: 670, column: 3, scope: !6840)
!6845 = !DILocation(line: 672, column: 7, scope: !6846)
!6846 = distinct !DILexicalBlock(scope: !6839, file: !3, line: 671, column: 5)
!6847 = !DILocation(line: 673, column: 26, scope: !6846)
!6848 = !DILocation(line: 673, column: 37, scope: !6846)
!6849 = !DILocation(line: 673, column: 7, scope: !6846)
!6850 = !DILocation(line: 670, column: 77, scope: !6839)
!6851 = !DILocation(line: 670, column: 3, scope: !6839)
!6852 = distinct !{!6852, !6844, !6853}
!6853 = !DILocation(line: 674, column: 5, scope: !6840)
!6854 = !DILocation(line: 675, column: 3, scope: !6826)
!6855 = !DILocation(line: 677, column: 24, scope: !6826)
!6856 = !DILocation(line: 677, column: 3, scope: !6826)
!6857 = !DILocation(line: 678, column: 24, scope: !6826)
!6858 = !DILocation(line: 678, column: 3, scope: !6826)
!6859 = !DILocation(line: 679, column: 1, scope: !6826)
!6860 = distinct !DISubprogram(name: "VEC_gimple_heap_reserve", scope: !11, file: !11, line: 34, type: !6861, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6863)
!6861 = !DISubroutineType(types: !6862)
!6862 = !{!100, !6165, !100}
!6863 = !{!6864, !6865, !6866}
!6864 = !DILocalVariable(name: "vec_", arg: 1, scope: !6860, file: !11, line: 34, type: !6165)
!6865 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6860, file: !11, line: 34, type: !100)
!6866 = !DILocalVariable(name: "extend", scope: !6860, file: !11, line: 34, type: !100)
!6867 = !DILocation(line: 0, scope: !6860)
!6868 = !DILocation(line: 34, column: 1, scope: !6860)
!6869 = !DILocation(line: 34, column: 1, scope: !6870)
!6870 = distinct !DILexicalBlock(scope: !6860, file: !11, line: 34, column: 1)
!6871 = distinct !DISubprogram(name: "VEC_gimple_base_quick_push", scope: !11, file: !11, line: 33, type: !6872, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6875)
!6872 = !DISubroutineType(types: !6873)
!6873 = !{!4505, !6874, !7}
!6874 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !688, size: 64)
!6875 = !{!6876, !6877, !6878}
!6876 = !DILocalVariable(name: "vec_", arg: 1, scope: !6871, file: !11, line: 33, type: !6874)
!6877 = !DILocalVariable(name: "obj_", arg: 2, scope: !6871, file: !11, line: 33, type: !7)
!6878 = !DILocalVariable(name: "slot_", scope: !6871, file: !11, line: 33, type: !4505)
!6879 = !DILocation(line: 0, scope: !6871)
!6880 = !DILocation(line: 33, column: 1, scope: !6871)
!6881 = distinct !DISubprogram(name: "VEC_gimple_base_space", scope: !11, file: !11, line: 33, type: !6882, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6884)
!6882 = !DISubroutineType(types: !6883)
!6883 = !{!100, !6874, !100}
!6884 = !{!6885, !6886}
!6885 = !DILocalVariable(name: "vec_", arg: 1, scope: !6881, file: !11, line: 33, type: !6874)
!6886 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6881, file: !11, line: 33, type: !100)
!6887 = !DILocation(line: 0, scope: !6881)
!6888 = !DILocation(line: 33, column: 1, scope: !6881)
!6889 = distinct !DISubprogram(name: "is_gimple_call", scope: !11, file: !11, line: 1870, type: !5045, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6890)
!6890 = !{!6891}
!6891 = !DILocalVariable(name: "gs", arg: 1, scope: !6889, file: !11, line: 1870, type: !4377)
!6892 = !DILocation(line: 0, scope: !6889)
!6893 = !DILocation(line: 1872, column: 10, scope: !6889)
!6894 = !DILocation(line: 1872, column: 27, scope: !6889)
!6895 = !DILocation(line: 1872, column: 3, scope: !6889)
!6896 = distinct !DISubprogram(name: "gimple_assign_rhs2", scope: !11, file: !11, line: 1759, type: !6897, scopeLine: 1760, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6899)
!6897 = !DISubroutineType(types: !6898)
!6898 = !{!326, !4377}
!6899 = !{!6900}
!6900 = !DILocalVariable(name: "gs", arg: 1, scope: !6896, file: !11, line: 1759, type: !4377)
!6901 = !DILocation(line: 0, scope: !6896)
!6902 = !DILocation(line: 1763, column: 7, scope: !6903)
!6903 = distinct !DILexicalBlock(scope: !6896, file: !11, line: 1763, column: 7)
!6904 = !DILocation(line: 1763, column: 27, scope: !6903)
!6905 = !DILocation(line: 1763, column: 7, scope: !6896)
!6906 = !DILocation(line: 1764, column: 12, scope: !6903)
!6907 = !DILocation(line: 1764, column: 5, scope: !6903)
!6908 = !DILocation(line: 0, scope: !6903)
!6909 = !DILocation(line: 1767, column: 1, scope: !6896)
!6910 = distinct !DISubprogram(name: "vect_get_and_check_slp_defs", scope: !3, file: !3, line: 103, type: !6911, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !6914)
!6911 = !DISubroutineType(types: !6912)
!6912 = !{!6, !3766, !3606, !3551, !7, !6165, !6165, !6913, !6913, !749, !749, !749, !100, !1753, !1753}
!6913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1779, size: 64)
!6914 = !{!6915, !6916, !6917, !6918, !6919, !6920, !6921, !6922, !6923, !6924, !6925, !6926, !6927, !6928, !6929, !6930, !6931, !6932, !6933, !6934, !6936, !6937, !6938}
!6915 = !DILocalVariable(name: "loop_vinfo", arg: 1, scope: !6910, file: !3, line: 103, type: !3766)
!6916 = !DILocalVariable(name: "bb_vinfo", arg: 2, scope: !6910, file: !3, line: 103, type: !3606)
!6917 = !DILocalVariable(name: "slp_node", arg: 3, scope: !6910, file: !3, line: 104, type: !3551)
!6918 = !DILocalVariable(name: "stmt", arg: 4, scope: !6910, file: !3, line: 104, type: !7)
!6919 = !DILocalVariable(name: "def_stmts0", arg: 5, scope: !6910, file: !3, line: 105, type: !6165)
!6920 = !DILocalVariable(name: "def_stmts1", arg: 6, scope: !6910, file: !3, line: 106, type: !6165)
!6921 = !DILocalVariable(name: "first_stmt_dt0", arg: 7, scope: !6910, file: !3, line: 107, type: !6913)
!6922 = !DILocalVariable(name: "first_stmt_dt1", arg: 8, scope: !6910, file: !3, line: 108, type: !6913)
!6923 = !DILocalVariable(name: "first_stmt_def0_type", arg: 9, scope: !6910, file: !3, line: 109, type: !749)
!6924 = !DILocalVariable(name: "first_stmt_def1_type", arg: 10, scope: !6910, file: !3, line: 110, type: !749)
!6925 = !DILocalVariable(name: "first_stmt_const_oprnd", arg: 11, scope: !6910, file: !3, line: 111, type: !749)
!6926 = !DILocalVariable(name: "ncopies_for_cost", arg: 12, scope: !6910, file: !3, line: 112, type: !100)
!6927 = !DILocalVariable(name: "pattern0", arg: 13, scope: !6910, file: !3, line: 113, type: !1753)
!6928 = !DILocalVariable(name: "pattern1", arg: 14, scope: !6910, file: !3, line: 113, type: !1753)
!6929 = !DILocalVariable(name: "oprnd", scope: !6910, file: !3, line: 115, type: !326)
!6930 = !DILocalVariable(name: "i", scope: !6910, file: !3, line: 116, type: !17)
!6931 = !DILocalVariable(name: "number_of_oprnds", scope: !6910, file: !3, line: 116, type: !17)
!6932 = !DILocalVariable(name: "def", scope: !6910, file: !3, line: 117, type: !326)
!6933 = !DILocalVariable(name: "def_stmt", scope: !6910, file: !3, line: 118, type: !7)
!6934 = !DILocalVariable(name: "dt", scope: !6910, file: !3, line: 119, type: !6935)
!6935 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1779, size: 64, elements: !279)
!6936 = !DILocalVariable(name: "stmt_info", scope: !6910, file: !3, line: 120, type: !3759)
!6937 = !DILocalVariable(name: "rhs_class", scope: !6910, file: !3, line: 122, type: !3515)
!6938 = !DILocalVariable(name: "loop", scope: !6910, file: !3, line: 123, type: !787)
!6939 = !DILocation(line: 0, scope: !6910)
!6940 = !DILocation(line: 117, column: 3, scope: !6910)
!6941 = !DILocation(line: 118, column: 3, scope: !6910)
!6942 = !DILocation(line: 119, column: 3, scope: !6910)
!6943 = !DILocation(line: 119, column: 22, scope: !6910)
!6944 = !DILocation(line: 121, column: 21, scope: !6910)
!6945 = !DILocation(line: 121, column: 5, scope: !6910)
!6946 = !DILocation(line: 125, column: 7, scope: !6947)
!6947 = distinct !DILexicalBlock(scope: !6910, file: !3, line: 125, column: 7)
!6948 = !DILocation(line: 125, column: 7, scope: !6910)
!6949 = !DILocation(line: 126, column: 12, scope: !6947)
!6950 = !DILocation(line: 126, column: 5, scope: !6947)
!6951 = !DILocation(line: 128, column: 37, scope: !6910)
!6952 = !DILocation(line: 128, column: 15, scope: !6910)
!6953 = !DILocation(line: 129, column: 22, scope: !6910)
!6954 = !DILocation(line: 129, column: 44, scope: !6910)
!6955 = !DILocation(line: 0, scope: !6956)
!6956 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 151, column: 11)
!6957 = distinct !DILexicalBlock(scope: !6958, file: !3, line: 132, column: 5)
!6958 = distinct !DILexicalBlock(scope: !6959, file: !3, line: 131, column: 3)
!6959 = distinct !DILexicalBlock(scope: !6910, file: !3, line: 131, column: 3)
!6960 = !DILocation(line: 0, scope: !6961)
!6961 = distinct !DILexicalBlock(scope: !6956, file: !3, line: 155, column: 9)
!6962 = !DILocation(line: 0, scope: !6963)
!6963 = distinct !DILexicalBlock(scope: !6961, file: !3, line: 178, column: 15)
!6964 = !DILocation(line: 0, scope: !6965)
!6965 = distinct !DILexicalBlock(scope: !6966, file: !3, line: 246, column: 12)
!6966 = distinct !DILexicalBlock(scope: !6967, file: !3, line: 243, column: 6)
!6967 = distinct !DILexicalBlock(scope: !6968, file: !3, line: 222, column: 8)
!6968 = distinct !DILexicalBlock(scope: !6969, file: !3, line: 221, column: 2)
!6969 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 202, column: 11)
!6970 = !DILocation(line: 0, scope: !6971)
!6971 = distinct !DILexicalBlock(scope: !6972, file: !3, line: 226, column: 12)
!6972 = distinct !DILexicalBlock(scope: !6967, file: !3, line: 223, column: 6)
!6973 = !DILocation(line: 0, scope: !6974)
!6974 = distinct !DILexicalBlock(scope: !6975, file: !3, line: 206, column: 8)
!6975 = distinct !DILexicalBlock(scope: !6969, file: !3, line: 203, column: 2)
!6976 = !DILocation(line: 0, scope: !6977)
!6977 = distinct !DILexicalBlock(scope: !6975, file: !3, line: 212, column: 8)
!6978 = !DILocation(line: 131, column: 17, scope: !6958)
!6979 = !DILocation(line: 131, column: 8, scope: !6959)
!6980 = !DILocation(line: 0, scope: !6959)
!6981 = !DILocation(line: 131, column: 3, scope: !6959)
!6982 = !DILocation(line: 133, column: 34, scope: !6957)
!6983 = !DILocation(line: 133, column: 15, scope: !6957)
!6984 = !DILocation(line: 136, column: 33, scope: !6985)
!6985 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 135, column: 11)
!6986 = !DILocation(line: 135, column: 12, scope: !6985)
!6987 = !DILocation(line: 137, column: 4, scope: !6985)
!6988 = !DILocation(line: 137, column: 9, scope: !6985)
!6989 = !DILocation(line: 137, column: 18, scope: !6985)
!6990 = !DILocation(line: 137, column: 21, scope: !6985)
!6991 = !DILocation(line: 137, column: 27, scope: !6985)
!6992 = !DILocation(line: 135, column: 11, scope: !6957)
!6993 = !DILocation(line: 139, column: 8, scope: !6994)
!6994 = distinct !DILexicalBlock(scope: !6995, file: !3, line: 139, column: 8)
!6995 = distinct !DILexicalBlock(scope: !6985, file: !3, line: 138, column: 2)
!6996 = !DILocation(line: 139, column: 8, scope: !6995)
!6997 = !DILocation(line: 141, column: 17, scope: !6998)
!6998 = distinct !DILexicalBlock(scope: !6994, file: !3, line: 140, column: 6)
!6999 = !DILocation(line: 141, column: 8, scope: !6998)
!7000 = !DILocation(line: 142, column: 28, scope: !6998)
!7001 = !DILocation(line: 142, column: 8, scope: !6998)
!7002 = !DILocation(line: 143, column: 6, scope: !6998)
!7003 = !DILocation(line: 151, column: 19, scope: !6956)
!7004 = !DILocation(line: 151, column: 16, scope: !6956)
!7005 = !DILocation(line: 151, column: 31, scope: !6956)
!7006 = !DILocation(line: 152, column: 11, scope: !6956)
!7007 = !DILocation(line: 152, column: 54, scope: !6956)
!7008 = !DILocation(line: 152, column: 43, scope: !6956)
!7009 = !DILocation(line: 152, column: 14, scope: !6956)
!7010 = !DILocation(line: 153, column: 11, scope: !6956)
!7011 = !DILocation(line: 153, column: 30, scope: !6956)
!7012 = !DILocation(line: 153, column: 14, scope: !6956)
!7013 = !DILocation(line: 154, column: 11, scope: !6956)
!7014 = !DILocation(line: 154, column: 14, scope: !6956)
!7015 = !DILocation(line: 151, column: 11, scope: !6957)
!7016 = !DILocation(line: 156, column: 16, scope: !7017)
!7017 = distinct !DILexicalBlock(scope: !6961, file: !3, line: 156, column: 15)
!7018 = !DILocation(line: 156, column: 15, scope: !6961)
!7019 = !DILocation(line: 157, column: 23, scope: !7017)
!7020 = !DILocation(line: 157, column: 13, scope: !7017)
!7021 = !DILocation(line: 160, column: 26, scope: !7022)
!7022 = distinct !DILexicalBlock(scope: !7023, file: !3, line: 160, column: 19)
!7023 = distinct !DILexicalBlock(scope: !7017, file: !3, line: 159, column: 13)
!7024 = !DILocation(line: 160, column: 30, scope: !7022)
!7025 = !DILocation(line: 160, column: 19, scope: !7023)
!7026 = !DILocation(line: 161, column: 27, scope: !7022)
!7027 = !DILocation(line: 161, column: 17, scope: !7022)
!7028 = !DILocation(line: 162, column: 32, scope: !7029)
!7029 = distinct !DILexicalBlock(scope: !7022, file: !3, line: 162, column: 24)
!7030 = !DILocation(line: 162, column: 36, scope: !7029)
!7031 = !DILocation(line: 162, column: 47, scope: !7029)
!7032 = !DILocation(line: 162, column: 53, scope: !7029)
!7033 = !DILocation(line: 162, column: 58, scope: !7029)
!7034 = !DILocation(line: 162, column: 62, scope: !7029)
!7035 = !DILocation(line: 162, column: 24, scope: !7022)
!7036 = !DILocation(line: 164, column: 23, scope: !7037)
!7037 = distinct !DILexicalBlock(scope: !7038, file: !3, line: 164, column: 23)
!7038 = distinct !DILexicalBlock(scope: !7029, file: !3, line: 163, column: 17)
!7039 = !DILocation(line: 164, column: 23, scope: !7038)
!7040 = !DILocation(line: 166, column: 32, scope: !7041)
!7041 = distinct !DILexicalBlock(scope: !7037, file: !3, line: 165, column: 21)
!7042 = !DILocation(line: 166, column: 23, scope: !7041)
!7043 = !DILocation(line: 168, column: 43, scope: !7041)
!7044 = !DILocation(line: 168, column: 23, scope: !7041)
!7045 = !DILocation(line: 169, column: 21, scope: !7041)
!7046 = !DILocation(line: 175, column: 22, scope: !6961)
!7047 = !DILocation(line: 175, column: 20, scope: !6961)
!7048 = !DILocation(line: 176, column: 19, scope: !6961)
!7049 = !DILocation(line: 176, column: 17, scope: !6961)
!7050 = !DILocation(line: 178, column: 15, scope: !6963)
!7051 = !DILocation(line: 178, column: 19, scope: !6963)
!7052 = !DILocation(line: 178, column: 15, scope: !6961)
!7053 = !DILocation(line: 180, column: 19, scope: !7054)
!7054 = distinct !DILexicalBlock(scope: !7055, file: !3, line: 180, column: 19)
!7055 = distinct !DILexicalBlock(scope: !6963, file: !3, line: 179, column: 13)
!7056 = !DILocation(line: 180, column: 19, scope: !7055)
!7057 = !DILocation(line: 181, column: 26, scope: !7054)
!7058 = !DILocation(line: 181, column: 17, scope: !7054)
!7059 = !DILocation(line: 185, column: 32, scope: !6961)
!7060 = !DILocation(line: 185, column: 19, scope: !6961)
!7061 = !DILocation(line: 185, column: 11, scope: !6961)
!7062 = !DILocation(line: 188, column: 42, scope: !7063)
!7063 = distinct !DILexicalBlock(scope: !6961, file: !3, line: 186, column: 13)
!7064 = !DILocation(line: 188, column: 23, scope: !7063)
!7065 = !DILocation(line: 188, column: 21, scope: !7063)
!7066 = !DILocation(line: 189, column: 17, scope: !7063)
!7067 = !DILocation(line: 192, column: 42, scope: !7063)
!7068 = !DILocation(line: 192, column: 23, scope: !7063)
!7069 = !DILocation(line: 192, column: 21, scope: !7063)
!7070 = !DILocation(line: 193, column: 17, scope: !7063)
!7071 = !DILocation(line: 196, column: 21, scope: !7072)
!7072 = distinct !DILexicalBlock(scope: !7063, file: !3, line: 196, column: 21)
!7073 = !DILocation(line: 196, column: 21, scope: !7063)
!7074 = !DILocation(line: 197, column: 28, scope: !7072)
!7075 = !DILocation(line: 197, column: 19, scope: !7072)
!7076 = !DILocation(line: 202, column: 12, scope: !6969)
!7077 = !DILocation(line: 202, column: 11, scope: !6957)
!7078 = !DILocation(line: 205, column: 22, scope: !6975)
!7079 = !DILocation(line: 205, column: 20, scope: !6975)
!7080 = !DILocation(line: 206, column: 8, scope: !6974)
!7081 = !DILocation(line: 206, column: 8, scope: !6975)
!7082 = !DILocation(line: 207, column: 30, scope: !6974)
!7083 = !DILocation(line: 207, column: 28, scope: !6974)
!7084 = !DILocation(line: 207, column: 6, scope: !6974)
!7085 = !DILocation(line: 209, column: 30, scope: !6974)
!7086 = !DILocation(line: 212, column: 8, scope: !6975)
!7087 = !DILocation(line: 214, column: 6, scope: !6977)
!7088 = !DILocation(line: 217, column: 58, scope: !6977)
!7089 = !DILocation(line: 217, column: 6, scope: !6977)
!7090 = !DILocation(line: 222, column: 9, scope: !6967)
!7091 = !DILocation(line: 222, column: 30, scope: !6967)
!7092 = !DILocation(line: 222, column: 25, scope: !6967)
!7093 = !DILocation(line: 225, column: 26, scope: !6972)
!7094 = !DILocation(line: 225, column: 24, scope: !6972)
!7095 = !DILocation(line: 226, column: 12, scope: !6971)
!7096 = !DILocation(line: 226, column: 12, scope: !6972)
!7097 = !DILocation(line: 227, column: 27, scope: !6971)
!7098 = !DILocation(line: 227, column: 25, scope: !6971)
!7099 = !DILocation(line: 227, column: 3, scope: !6971)
!7100 = !DILocation(line: 232, column: 9, scope: !7101)
!7101 = distinct !DILexicalBlock(scope: !7102, file: !3, line: 232, column: 9)
!7102 = distinct !DILexicalBlock(scope: !6971, file: !3, line: 229, column: 3)
!7103 = !DILocation(line: 232, column: 9, scope: !7102)
!7104 = !DILocation(line: 234, column: 13, scope: !7105)
!7105 = distinct !DILexicalBlock(scope: !7106, file: !3, line: 234, column: 13)
!7106 = distinct !DILexicalBlock(scope: !7101, file: !3, line: 233, column: 7)
!7107 = !DILocation(line: 234, column: 13, scope: !7106)
!7108 = !DILocation(line: 235, column: 13, scope: !7105)
!7109 = !DILocation(line: 235, column: 4, scope: !7105)
!7110 = !DILocation(line: 239, column: 29, scope: !7102)
!7111 = !DILocation(line: 247, column: 6, scope: !6965)
!7112 = !DILocation(line: 247, column: 29, scope: !6965)
!7113 = !DILocation(line: 247, column: 26, scope: !6965)
!7114 = !DILocation(line: 248, column: 10, scope: !6965)
!7115 = !DILocation(line: 248, column: 14, scope: !6965)
!7116 = !DILocation(line: 248, column: 39, scope: !6965)
!7117 = !DILocation(line: 248, column: 36, scope: !6965)
!7118 = !DILocation(line: 250, column: 10, scope: !6965)
!7119 = !DILocation(line: 249, column: 11, scope: !6965)
!7120 = !DILocation(line: 251, column: 5, scope: !6965)
!7121 = !DILocation(line: 252, column: 9, scope: !6965)
!7122 = !DILocation(line: 252, column: 32, scope: !6965)
!7123 = !DILocation(line: 252, column: 29, scope: !6965)
!7124 = !DILocation(line: 253, column: 6, scope: !6965)
!7125 = !DILocation(line: 253, column: 10, scope: !6965)
!7126 = !DILocation(line: 253, column: 35, scope: !6965)
!7127 = !DILocation(line: 253, column: 32, scope: !6965)
!7128 = !DILocation(line: 255, column: 13, scope: !6965)
!7129 = !DILocation(line: 254, column: 14, scope: !6965)
!7130 = !DILocation(line: 256, column: 5, scope: !6965)
!7131 = !DILocation(line: 256, column: 10, scope: !6965)
!7132 = !DILocation(line: 257, column: 9, scope: !6965)
!7133 = !DILocation(line: 257, column: 33, scope: !6965)
!7134 = !DILocation(line: 258, column: 12, scope: !6965)
!7135 = !DILocation(line: 257, column: 13, scope: !6965)
!7136 = !DILocation(line: 246, column: 12, scope: !6966)
!7137 = !DILocation(line: 260, column: 9, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !7139, file: !3, line: 260, column: 9)
!7139 = distinct !DILexicalBlock(scope: !6965, file: !3, line: 259, column: 3)
!7140 = !DILocation(line: 260, column: 9, scope: !7139)
!7141 = !DILocation(line: 261, column: 16, scope: !7138)
!7142 = !DILocation(line: 261, column: 7, scope: !7138)
!7143 = !DILocation(line: 269, column: 15, scope: !6957)
!7144 = !DILocation(line: 269, column: 7, scope: !6957)
!7145 = !DILocation(line: 276, column: 10, scope: !7146)
!7146 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 276, column: 8)
!7147 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 270, column: 2)
!7148 = !DILocation(line: 0, scope: !7146)
!7149 = !DILocation(line: 276, column: 8, scope: !7147)
!7150 = !DILocation(line: 277, column: 6, scope: !7146)
!7151 = !DILocation(line: 279, column: 6, scope: !7146)
!7152 = !DILocation(line: 284, column: 8, scope: !7153)
!7153 = distinct !DILexicalBlock(scope: !7147, file: !3, line: 284, column: 8)
!7154 = !DILocation(line: 284, column: 8, scope: !7147)
!7155 = !DILocation(line: 286, column: 17, scope: !7156)
!7156 = distinct !DILexicalBlock(scope: !7153, file: !3, line: 285, column: 6)
!7157 = !DILocation(line: 286, column: 8, scope: !7156)
!7158 = !DILocation(line: 287, column: 28, scope: !7156)
!7159 = !DILocation(line: 287, column: 39, scope: !7156)
!7160 = !DILocation(line: 287, column: 8, scope: !7156)
!7161 = !DILocation(line: 288, column: 6, scope: !7156)
!7162 = !DILocation(line: 131, column: 3, scope: !6958)
!7163 = distinct !{!7163, !6981, !7164}
!7164 = !DILocation(line: 292, column: 5, scope: !6959)
!7165 = !DILocation(line: 295, column: 1, scope: !6910)
!7166 = distinct !DISubprogram(name: "VEC_int_heap_safe_push", scope: !3562, file: !3562, line: 32, type: !7167, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7170)
!7167 = !DISubroutineType(types: !7168)
!7168 = !{!1752, !4433, !7169}
!7169 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !100)
!7170 = !{!7171, !7172}
!7171 = !DILocalVariable(name: "vec_", arg: 1, scope: !7166, file: !3562, line: 32, type: !4433)
!7172 = !DILocalVariable(name: "obj_", arg: 2, scope: !7166, file: !3562, line: 32, type: !7169)
!7173 = !DILocation(line: 0, scope: !7166)
!7174 = !DILocation(line: 32, column: 1, scope: !7166)
!7175 = distinct !DISubprogram(name: "VEC_slp_tree_heap_safe_push", scope: !1757, file: !1757, line: 119, type: !7176, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7178)
!7176 = !DISubroutineType(types: !7177)
!7177 = !{!3589, !4443, !3551}
!7178 = !{!7179, !7180}
!7179 = !DILocalVariable(name: "vec_", arg: 1, scope: !7175, file: !1757, line: 119, type: !4443)
!7180 = !DILocalVariable(name: "obj_", arg: 2, scope: !7175, file: !1757, line: 119, type: !3551)
!7181 = !DILocation(line: 0, scope: !7175)
!7182 = !DILocation(line: 119, column: 1, scope: !7175)
!7183 = distinct !DISubprogram(name: "gimple_num_ops", scope: !11, file: !11, line: 1596, type: !7184, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7186)
!7184 = !DISubroutineType(types: !7185)
!7185 = !{!17, !4377}
!7186 = !{!7187}
!7187 = !DILocalVariable(name: "gs", arg: 1, scope: !7183, file: !11, line: 1596, type: !4377)
!7188 = !DILocation(line: 0, scope: !7183)
!7189 = !DILocation(line: 1598, column: 21, scope: !7183)
!7190 = !DILocation(line: 1598, column: 3, scope: !7183)
!7191 = distinct !DISubprogram(name: "gimple_op", scope: !11, file: !11, line: 1631, type: !7192, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7194)
!7192 = !DISubroutineType(types: !7193)
!7193 = !{!326, !4377, !17}
!7194 = !{!7195, !7196}
!7195 = !DILocalVariable(name: "gs", arg: 1, scope: !7191, file: !11, line: 1631, type: !4377)
!7196 = !DILocalVariable(name: "i", arg: 2, scope: !7191, file: !11, line: 1631, type: !17)
!7197 = !DILocation(line: 0, scope: !7191)
!7198 = !DILocation(line: 1633, column: 7, scope: !7199)
!7199 = distinct !DILexicalBlock(scope: !7191, file: !11, line: 1633, column: 7)
!7200 = !DILocation(line: 1633, column: 7, scope: !7191)
!7201 = !DILocation(line: 1638, column: 14, scope: !7202)
!7202 = distinct !DILexicalBlock(scope: !7199, file: !11, line: 1634, column: 5)
!7203 = !DILocation(line: 1638, column: 7, scope: !7202)
!7204 = !DILocation(line: 0, scope: !7199)
!7205 = !DILocation(line: 1642, column: 1, scope: !7191)
!7206 = distinct !DISubprogram(name: "gimple_has_ops", scope: !11, file: !11, line: 1274, type: !5045, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7207)
!7207 = !{!7208}
!7208 = !DILocalVariable(name: "g", arg: 1, scope: !7206, file: !11, line: 1274, type: !4377)
!7209 = !DILocation(line: 0, scope: !7206)
!7210 = !DILocation(line: 1276, column: 10, scope: !7206)
!7211 = !DILocation(line: 1276, column: 26, scope: !7206)
!7212 = !DILocation(line: 1276, column: 41, scope: !7206)
!7213 = !DILocation(line: 1276, column: 44, scope: !7206)
!7214 = !DILocation(line: 1276, column: 60, scope: !7206)
!7215 = !DILocation(line: 1276, column: 3, scope: !7206)
!7216 = distinct !DISubprogram(name: "gimple_ops", scope: !11, file: !11, line: 1614, type: !7217, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7219)
!7217 = !DISubroutineType(types: !7218)
!7218 = !{!749, !7}
!7219 = !{!7220, !7221}
!7220 = !DILocalVariable(name: "gs", arg: 1, scope: !7216, file: !11, line: 1614, type: !7)
!7221 = !DILocalVariable(name: "off", scope: !7216, file: !11, line: 1616, type: !657)
!7222 = !DILocation(line: 0, scope: !7216)
!7223 = !DILocation(line: 1621, column: 28, scope: !7216)
!7224 = !DILocation(line: 1621, column: 9, scope: !7216)
!7225 = !DILocation(line: 1622, column: 3, scope: !7216)
!7226 = !DILocation(line: 1624, column: 20, scope: !7216)
!7227 = !DILocation(line: 1624, column: 32, scope: !7216)
!7228 = !DILocation(line: 1624, column: 10, scope: !7216)
!7229 = !DILocation(line: 1624, column: 3, scope: !7216)
!7230 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !11, file: !11, line: 1073, type: !7231, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7233)
!7231 = !DISubroutineType(types: !7232)
!7232 = !{!3451, !7}
!7233 = !{!7234}
!7234 = !DILocalVariable(name: "gs", arg: 1, scope: !7230, file: !11, line: 1073, type: !7)
!7235 = !DILocation(line: 0, scope: !7230)
!7236 = !DILocation(line: 1075, column: 24, scope: !7230)
!7237 = !DILocation(line: 1075, column: 10, scope: !7230)
!7238 = !DILocation(line: 1075, column: 3, scope: !7230)
!7239 = distinct !DISubprogram(name: "gss_for_code", scope: !11, file: !11, line: 1061, type: !7240, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7242)
!7240 = !DISubroutineType(types: !7241)
!7241 = !{!3451, !3477}
!7242 = !{!7243}
!7243 = !DILocalVariable(name: "code", arg: 1, scope: !7239, file: !11, line: 1061, type: !3477)
!7244 = !DILocation(line: 0, scope: !7239)
!7245 = !DILocation(line: 1066, column: 10, scope: !7239)
!7246 = !DILocation(line: 1066, column: 3, scope: !7239)
!7247 = distinct !DISubprogram(name: "gimple_bb", scope: !11, file: !11, line: 1112, type: !7248, scopeLine: 1113, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7250)
!7248 = !DISubroutineType(types: !7249)
!7249 = !{!34, !4377}
!7250 = !{!7251}
!7251 = !DILocalVariable(name: "g", arg: 1, scope: !7247, file: !11, line: 1112, type: !4377)
!7252 = !DILocation(line: 0, scope: !7247)
!7253 = !DILocation(line: 1114, column: 20, scope: !7247)
!7254 = !DILocation(line: 1114, column: 3, scope: !7247)
!7255 = distinct !DISubprogram(name: "gimple_phi_result", scope: !11, file: !11, line: 3071, type: !6897, scopeLine: 3072, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7256)
!7256 = !{!7257}
!7257 = !DILocalVariable(name: "gs", arg: 1, scope: !7255, file: !11, line: 3071, type: !4377)
!7258 = !DILocation(line: 0, scope: !7255)
!7259 = !DILocation(line: 3074, column: 25, scope: !7255)
!7260 = !DILocation(line: 3074, column: 3, scope: !7255)
!7261 = distinct !DISubprogram(name: "gimple_assign_lhs", scope: !11, file: !11, line: 1694, type: !6897, scopeLine: 1695, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7262)
!7262 = !{!7263}
!7263 = !DILocalVariable(name: "gs", arg: 1, scope: !7261, file: !11, line: 1694, type: !4377)
!7264 = !DILocation(line: 0, scope: !7261)
!7265 = !DILocation(line: 1697, column: 10, scope: !7261)
!7266 = !DILocation(line: 1697, column: 3, scope: !7261)
!7267 = distinct !DISubprogram(name: "VEC_int_heap_reserve", scope: !3562, file: !3562, line: 32, type: !7268, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7270)
!7268 = !DISubroutineType(types: !7269)
!7269 = !{!100, !4433, !100}
!7270 = !{!7271, !7272, !7273}
!7271 = !DILocalVariable(name: "vec_", arg: 1, scope: !7267, file: !3562, line: 32, type: !4433)
!7272 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7267, file: !3562, line: 32, type: !100)
!7273 = !DILocalVariable(name: "extend", scope: !7267, file: !3562, line: 32, type: !100)
!7274 = !DILocation(line: 0, scope: !7267)
!7275 = !DILocation(line: 32, column: 1, scope: !7267)
!7276 = !DILocation(line: 32, column: 1, scope: !7277)
!7277 = distinct !DILexicalBlock(scope: !7267, file: !3562, line: 32, column: 1)
!7278 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !3562, file: !3562, line: 31, type: !7279, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7282)
!7279 = !DISubroutineType(types: !7280)
!7280 = !{!1752, !7281, !100}
!7281 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3566, size: 64)
!7282 = !{!7283, !7284, !7285}
!7283 = !DILocalVariable(name: "vec_", arg: 1, scope: !7278, file: !3562, line: 31, type: !7281)
!7284 = !DILocalVariable(name: "obj_", arg: 2, scope: !7278, file: !3562, line: 31, type: !100)
!7285 = !DILocalVariable(name: "slot_", scope: !7278, file: !3562, line: 31, type: !1752)
!7286 = !DILocation(line: 0, scope: !7278)
!7287 = !DILocation(line: 31, column: 1, scope: !7278)
!7288 = distinct !DISubprogram(name: "VEC_int_base_space", scope: !3562, file: !3562, line: 31, type: !7289, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7291)
!7289 = !DISubroutineType(types: !7290)
!7290 = !{!100, !7281, !100}
!7291 = !{!7292, !7293}
!7292 = !DILocalVariable(name: "vec_", arg: 1, scope: !7288, file: !3562, line: 31, type: !7281)
!7293 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7288, file: !3562, line: 31, type: !100)
!7294 = !DILocation(line: 0, scope: !7288)
!7295 = !DILocation(line: 31, column: 1, scope: !7288)
!7296 = distinct !DISubprogram(name: "VEC_slp_tree_heap_reserve", scope: !1757, file: !1757, line: 119, type: !7297, scopeLine: 119, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7299)
!7297 = !DISubroutineType(types: !7298)
!7298 = !{!100, !4443, !100}
!7299 = !{!7300, !7301, !7302}
!7300 = !DILocalVariable(name: "vec_", arg: 1, scope: !7296, file: !1757, line: 119, type: !4443)
!7301 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7296, file: !1757, line: 119, type: !100)
!7302 = !DILocalVariable(name: "extend", scope: !7296, file: !1757, line: 119, type: !100)
!7303 = !DILocation(line: 0, scope: !7296)
!7304 = !DILocation(line: 119, column: 1, scope: !7296)
!7305 = !DILocation(line: 119, column: 1, scope: !7306)
!7306 = distinct !DILexicalBlock(scope: !7296, file: !1757, line: 119, column: 1)
!7307 = distinct !DISubprogram(name: "VEC_slp_tree_base_quick_push", scope: !1757, file: !1757, line: 118, type: !7308, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7311)
!7308 = !DISubroutineType(types: !7309)
!7309 = !{!3589, !7310, !3551}
!7310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3579, size: 64)
!7311 = !{!7312, !7313, !7314}
!7312 = !DILocalVariable(name: "vec_", arg: 1, scope: !7307, file: !1757, line: 118, type: !7310)
!7313 = !DILocalVariable(name: "obj_", arg: 2, scope: !7307, file: !1757, line: 118, type: !3551)
!7314 = !DILocalVariable(name: "slot_", scope: !7307, file: !1757, line: 118, type: !3589)
!7315 = !DILocation(line: 0, scope: !7307)
!7316 = !DILocation(line: 118, column: 1, scope: !7307)
!7317 = distinct !DISubprogram(name: "VEC_slp_tree_base_space", scope: !1757, file: !1757, line: 118, type: !7318, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7320)
!7318 = !DISubroutineType(types: !7319)
!7319 = !{!100, !7310, !100}
!7320 = !{!7321, !7322}
!7321 = !DILocalVariable(name: "vec_", arg: 1, scope: !7317, file: !1757, line: 118, type: !7310)
!7322 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7317, file: !1757, line: 118, type: !100)
!7323 = !DILocation(line: 0, scope: !7317)
!7324 = !DILocation(line: 118, column: 1, scope: !7317)
!7325 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !3562, file: !3562, line: 31, type: !7326, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7330)
!7326 = !DISubroutineType(types: !7327)
!7327 = !{!100, !7328, !17, !1752}
!7328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7329, size: 64)
!7329 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3566)
!7330 = !{!7331, !7332, !7333}
!7331 = !DILocalVariable(name: "vec_", arg: 1, scope: !7325, file: !3562, line: 31, type: !7328)
!7332 = !DILocalVariable(name: "ix_", arg: 2, scope: !7325, file: !3562, line: 31, type: !17)
!7333 = !DILocalVariable(name: "ptr", arg: 3, scope: !7325, file: !3562, line: 31, type: !1752)
!7334 = !DILocation(line: 0, scope: !7325)
!7335 = !DILocation(line: 31, column: 1, scope: !7336)
!7336 = distinct !DILexicalBlock(scope: !7325, file: !3562, line: 31, column: 1)
!7337 = !DILocation(line: 31, column: 1, scope: !7325)
!7338 = !DILocation(line: 31, column: 1, scope: !7339)
!7339 = distinct !DILexicalBlock(scope: !7336, file: !3562, line: 31, column: 1)
!7340 = !DILocation(line: 31, column: 1, scope: !7341)
!7341 = distinct !DILexicalBlock(scope: !7336, file: !3562, line: 31, column: 1)
!7342 = !DILocation(line: 0, scope: !7336)
!7343 = distinct !DISubprogram(name: "VEC_int_base_length", scope: !3562, file: !3562, line: 31, type: !7344, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7346)
!7344 = !DISubroutineType(types: !7345)
!7345 = !{!17, !7328}
!7346 = !{!7347}
!7347 = !DILocalVariable(name: "vec_", arg: 1, scope: !7343, file: !3562, line: 31, type: !7328)
!7348 = !DILocation(line: 0, scope: !7343)
!7349 = !DILocation(line: 31, column: 1, scope: !7343)
!7350 = distinct !DISubprogram(name: "SET_BIT", scope: !6693, file: !6693, line: 63, type: !7351, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7353)
!7351 = !DISubroutineType(types: !7352)
!7352 = !{null, !6692, !17}
!7353 = !{!7354, !7355, !7356}
!7354 = !DILocalVariable(name: "map", arg: 1, scope: !7350, file: !6693, line: 63, type: !6692)
!7355 = !DILocalVariable(name: "bitno", arg: 2, scope: !7350, file: !6693, line: 63, type: !17)
!7356 = !DILocalVariable(name: "oldbit", scope: !7357, file: !6693, line: 67, type: !6)
!7357 = distinct !DILexicalBlock(scope: !7358, file: !6693, line: 66, column: 5)
!7358 = distinct !DILexicalBlock(scope: !7350, file: !6693, line: 65, column: 7)
!7359 = !DILocation(line: 0, scope: !7350)
!7360 = !DILocation(line: 65, column: 12, scope: !7358)
!7361 = !DILocation(line: 65, column: 7, scope: !7358)
!7362 = !DILocation(line: 65, column: 7, scope: !7350)
!7363 = !DILocation(line: 73, column: 40, scope: !7350)
!7364 = !DILocation(line: 73, column: 29, scope: !7350)
!7365 = !DILocation(line: 72, column: 19, scope: !7350)
!7366 = !DILocation(line: 72, column: 3, scope: !7350)
!7367 = !DILocation(line: 68, column: 16, scope: !7357)
!7368 = !DILocation(line: 69, column: 12, scope: !7369)
!7369 = distinct !DILexicalBlock(scope: !7357, file: !6693, line: 69, column: 11)
!7370 = !DILocation(line: 69, column: 11, scope: !7357)
!7371 = !DILocation(line: 70, column: 2, scope: !7369)
!7372 = !DILocation(line: 70, column: 41, scope: !7369)
!7373 = !DILocation(line: 73, column: 5, scope: !7350)
!7374 = !DILocation(line: 74, column: 1, scope: !7350)
!7375 = distinct !DISubprogram(name: "vect_supported_slp_permutation_p", scope: !3, file: !3, line: 734, type: !7376, scopeLine: 735, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7378)
!7376 = !DISubroutineType(types: !7377)
!7377 = !{!6, !3602}
!7378 = !{!7379, !7380, !7381, !7382, !7383, !7384, !7385, !7386, !7387, !7388, !7389, !7390}
!7379 = !DILocalVariable(name: "instance", arg: 1, scope: !7375, file: !3, line: 734, type: !3602)
!7380 = !DILocalVariable(name: "node", scope: !7375, file: !3, line: 736, type: !3551)
!7381 = !DILocalVariable(name: "stmt", scope: !7375, file: !3, line: 737, type: !7)
!7382 = !DILocalVariable(name: "first_load", scope: !7375, file: !3, line: 738, type: !7)
!7383 = !DILocalVariable(name: "sorted_loads", scope: !7375, file: !3, line: 739, type: !3574)
!7384 = !DILocalVariable(name: "index", scope: !7375, file: !3, line: 740, type: !100)
!7385 = !DILocalVariable(name: "tmp_loads", scope: !7375, file: !3, line: 741, type: !3589)
!7386 = !DILocalVariable(name: "group_size", scope: !7375, file: !3, line: 742, type: !100)
!7387 = !DILocalVariable(name: "i", scope: !7375, file: !3, line: 742, type: !100)
!7388 = !DILocalVariable(name: "j", scope: !7375, file: !3, line: 742, type: !100)
!7389 = !DILocalVariable(name: "load", scope: !7375, file: !3, line: 743, type: !3551)
!7390 = !DILocalVariable(name: "scalar_stmt", scope: !7391, file: !3, line: 755, type: !7)
!7391 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 754, column: 5)
!7392 = distinct !DILexicalBlock(scope: !7393, file: !3, line: 750, column: 3)
!7393 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 750, column: 3)
!7394 = !DILocation(line: 0, scope: !7375)
!7395 = !DILocation(line: 736, column: 19, scope: !7375)
!7396 = !DILocation(line: 737, column: 17, scope: !7375)
!7397 = !DILocation(line: 738, column: 23, scope: !7375)
!7398 = !DILocation(line: 739, column: 3, scope: !7375)
!7399 = !DILocation(line: 739, column: 25, scope: !7375)
!7400 = !DILocation(line: 740, column: 3, scope: !7375)
!7401 = !DILocation(line: 742, column: 20, scope: !7375)
!7402 = !DILocation(line: 743, column: 3, scope: !7375)
!7403 = !DILocation(line: 749, column: 57, scope: !7375)
!7404 = !DILocation(line: 749, column: 55, scope: !7375)
!7405 = !DILocation(line: 749, column: 28, scope: !7375)
!7406 = !DILocation(line: 749, column: 15, scope: !7375)
!7407 = !DILocation(line: 0, scope: !7392)
!7408 = !DILocation(line: 0, scope: !7391)
!7409 = !DILocation(line: 750, column: 8, scope: !7393)
!7410 = !DILocation(line: 0, scope: !7393)
!7411 = !DILocation(line: 751, column: 8, scope: !7392)
!7412 = !DILocation(line: 752, column: 8, scope: !7392)
!7413 = !DILocation(line: 752, column: 11, scope: !7392)
!7414 = !DILocation(line: 750, column: 3, scope: !7393)
!7415 = !DILocation(line: 755, column: 28, scope: !7391)
!7416 = !DILocation(line: 757, column: 11, scope: !7417)
!7417 = distinct !DILexicalBlock(scope: !7391, file: !3, line: 757, column: 11)
!7418 = !DILocation(line: 757, column: 60, scope: !7417)
!7419 = !DILocation(line: 757, column: 11, scope: !7391)
!7420 = !DILocation(line: 759, column: 15, scope: !7421)
!7421 = distinct !DILexicalBlock(scope: !7422, file: !3, line: 759, column: 15)
!7422 = distinct !DILexicalBlock(scope: !7417, file: !3, line: 758, column: 9)
!7423 = !DILocation(line: 759, column: 15, scope: !7422)
!7424 = !DILocation(line: 761, column: 24, scope: !7425)
!7425 = distinct !DILexicalBlock(scope: !7421, file: !3, line: 760, column: 13)
!7426 = !DILocation(line: 761, column: 15, scope: !7425)
!7427 = !DILocation(line: 763, column: 34, scope: !7425)
!7428 = !DILocation(line: 763, column: 15, scope: !7425)
!7429 = !DILocation(line: 764, column: 13, scope: !7425)
!7430 = !DILocation(line: 766, column: 11, scope: !7422)
!7431 = !DILocation(line: 767, column: 11, scope: !7422)
!7432 = !DILocation(line: 770, column: 26, scope: !7391)
!7433 = !DILocation(line: 770, column: 17, scope: !7391)
!7434 = !DILocation(line: 770, column: 7, scope: !7391)
!7435 = !DILocation(line: 770, column: 24, scope: !7391)
!7436 = !DILocation(line: 771, column: 5, scope: !7392)
!7437 = !DILocation(line: 753, column: 10, scope: !7392)
!7438 = !DILocation(line: 753, column: 26, scope: !7392)
!7439 = !DILocation(line: 750, column: 3, scope: !7392)
!7440 = distinct !{!7440, !7414, !7441}
!7441 = !DILocation(line: 771, column: 5, scope: !7393)
!7442 = !DILocation(line: 773, column: 18, scope: !7375)
!7443 = !DILocation(line: 773, column: 16, scope: !7375)
!7444 = !DILocation(line: 774, column: 8, scope: !7445)
!7445 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 774, column: 3)
!7446 = !DILocation(line: 0, scope: !7445)
!7447 = !DILocation(line: 774, column: 17, scope: !7448)
!7448 = distinct !DILexicalBlock(scope: !7445, file: !3, line: 774, column: 3)
!7449 = !DILocation(line: 774, column: 3, scope: !7445)
!7450 = !DILocation(line: 775, column: 6, scope: !7448)
!7451 = !DILocation(line: 774, column: 32, scope: !7448)
!7452 = !DILocation(line: 774, column: 3, scope: !7448)
!7453 = distinct !{!7453, !7449, !7454}
!7454 = !DILocation(line: 775, column: 6, scope: !7445)
!7455 = !DILocation(line: 777, column: 3, scope: !7375)
!7456 = !DILocation(line: 778, column: 35, scope: !7375)
!7457 = !DILocation(line: 778, column: 33, scope: !7375)
!7458 = !DILocation(line: 779, column: 3, scope: !7375)
!7459 = !DILocation(line: 782, column: 38, scope: !7460)
!7460 = distinct !DILexicalBlock(scope: !7375, file: !3, line: 781, column: 7)
!7461 = !DILocation(line: 781, column: 8, scope: !7460)
!7462 = !DILocation(line: 787, column: 1, scope: !7375)
!7463 = distinct !DISubprogram(name: "VEC_slp_tree_base_index", scope: !1757, file: !1757, line: 118, type: !7464, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7466)
!7464 = !DISubroutineType(types: !7465)
!7465 = !{!3551, !5737, !17}
!7466 = !{!7467, !7468}
!7467 = !DILocalVariable(name: "vec_", arg: 1, scope: !7463, file: !1757, line: 118, type: !5737)
!7468 = !DILocalVariable(name: "ix_", arg: 2, scope: !7463, file: !1757, line: 118, type: !17)
!7469 = !DILocation(line: 0, scope: !7463)
!7470 = !DILocation(line: 118, column: 1, scope: !7463)
!7471 = distinct !DISubprogram(name: "get_earlier_stmt", scope: !1757, file: !1757, line: 649, type: !7472, scopeLine: 650, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7474)
!7472 = !DISubroutineType(types: !7473)
!7473 = !{!7, !7, !7}
!7474 = !{!7475, !7476, !7477, !7478}
!7475 = !DILocalVariable(name: "stmt1", arg: 1, scope: !7471, file: !1757, line: 649, type: !7)
!7476 = !DILocalVariable(name: "stmt2", arg: 2, scope: !7471, file: !1757, line: 649, type: !7)
!7477 = !DILocalVariable(name: "uid1", scope: !7471, file: !1757, line: 651, type: !17)
!7478 = !DILocalVariable(name: "uid2", scope: !7471, file: !1757, line: 651, type: !17)
!7479 = !DILocation(line: 0, scope: !7471)
!7480 = !DILocation(line: 653, column: 13, scope: !7481)
!7481 = distinct !DILexicalBlock(scope: !7471, file: !1757, line: 653, column: 7)
!7482 = !DILocation(line: 653, column: 7, scope: !7471)
!7483 = !DILocation(line: 656, column: 13, scope: !7484)
!7484 = distinct !DILexicalBlock(scope: !7471, file: !1757, line: 656, column: 7)
!7485 = !DILocation(line: 656, column: 7, scope: !7471)
!7486 = !DILocation(line: 659, column: 10, scope: !7471)
!7487 = !DILocation(line: 660, column: 10, scope: !7471)
!7488 = !DILocation(line: 662, column: 12, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7471, file: !1757, line: 662, column: 7)
!7490 = !DILocation(line: 662, column: 25, scope: !7489)
!7491 = !DILocation(line: 662, column: 17, scope: !7489)
!7492 = !DILocation(line: 665, column: 3, scope: !7471)
!7493 = !DILocation(line: 666, column: 3, scope: !7471)
!7494 = !DILocation(line: 668, column: 12, scope: !7495)
!7495 = distinct !DILexicalBlock(scope: !7471, file: !1757, line: 668, column: 7)
!7496 = !DILocation(line: 0, scope: !7495)
!7497 = !DILocation(line: 672, column: 1, scope: !7471)
!7498 = distinct !DISubprogram(name: "gimple_uid", scope: !11, file: !11, line: 1265, type: !7184, scopeLine: 1266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7499)
!7499 = !{!7500}
!7500 = !DILocalVariable(name: "g", arg: 1, scope: !7498, file: !11, line: 1265, type: !4377)
!7501 = !DILocation(line: 0, scope: !7498)
!7502 = !DILocation(line: 1267, column: 20, scope: !7498)
!7503 = !DILocation(line: 1267, column: 3, scope: !7498)
!7504 = distinct !DISubprogram(name: "VEC_vec_void_p_base_length", scope: !1757, file: !1757, line: 614, type: !7505, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7509)
!7505 = !DISubroutineType(types: !7506)
!7506 = !{!17, !7507}
!7507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7508, size: 64)
!7508 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3752)
!7509 = !{!7510}
!7510 = !DILocalVariable(name: "vec_", arg: 1, scope: !7504, file: !1757, line: 614, type: !7507)
!7511 = !DILocation(line: 0, scope: !7504)
!7512 = !DILocation(line: 614, column: 1, scope: !7504)
!7513 = distinct !DISubprogram(name: "VEC_slp_instance_heap_reserve", scope: !1757, file: !1757, line: 153, type: !7514, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7516)
!7514 = !DISubroutineType(types: !7515)
!7515 = !{!100, !6820, !100}
!7516 = !{!7517, !7518, !7519}
!7517 = !DILocalVariable(name: "vec_", arg: 1, scope: !7513, file: !1757, line: 153, type: !6820)
!7518 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7513, file: !1757, line: 153, type: !100)
!7519 = !DILocalVariable(name: "extend", scope: !7513, file: !1757, line: 153, type: !100)
!7520 = !DILocation(line: 0, scope: !7513)
!7521 = !DILocation(line: 153, column: 1, scope: !7513)
!7522 = !DILocation(line: 153, column: 1, scope: !7523)
!7523 = distinct !DILexicalBlock(scope: !7513, file: !1757, line: 153, column: 1)
!7524 = distinct !DISubprogram(name: "VEC_slp_instance_base_quick_push", scope: !1757, file: !1757, line: 152, type: !7525, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7528)
!7525 = !DISubroutineType(types: !7526)
!7526 = !{!4737, !7527, !3602}
!7527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3595, size: 64)
!7528 = !{!7529, !7530, !7531}
!7529 = !DILocalVariable(name: "vec_", arg: 1, scope: !7524, file: !1757, line: 152, type: !7527)
!7530 = !DILocalVariable(name: "obj_", arg: 2, scope: !7524, file: !1757, line: 152, type: !3602)
!7531 = !DILocalVariable(name: "slot_", scope: !7524, file: !1757, line: 152, type: !4737)
!7532 = !DILocation(line: 0, scope: !7524)
!7533 = !DILocation(line: 152, column: 1, scope: !7524)
!7534 = distinct !DISubprogram(name: "VEC_slp_instance_base_space", scope: !1757, file: !1757, line: 152, type: !7535, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7537)
!7535 = !DISubroutineType(types: !7536)
!7536 = !{!100, !7527, !100}
!7537 = !{!7538, !7539}
!7538 = !DILocalVariable(name: "vec_", arg: 1, scope: !7534, file: !1757, line: 152, type: !7527)
!7539 = !DILocalVariable(name: "alloc_", arg: 2, scope: !7534, file: !1757, line: 152, type: !100)
!7540 = !DILocation(line: 0, scope: !7534)
!7541 = !DILocation(line: 152, column: 1, scope: !7534)
!7542 = distinct !DISubprogram(name: "first_imm_use_stmt", scope: !6121, file: !6121, line: 1058, type: !7543, scopeLine: 1059, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7546)
!7543 = !DISubroutineType(types: !7544)
!7544 = !{!7, !7545, !326}
!7545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4820, size: 64)
!7546 = !{!7547, !7548}
!7547 = !DILocalVariable(name: "imm", arg: 1, scope: !7542, file: !6121, line: 1058, type: !7545)
!7548 = !DILocalVariable(name: "var", arg: 2, scope: !7542, file: !6121, line: 1058, type: !326)
!7549 = !DILocation(line: 0, scope: !7542)
!7550 = !DILocation(line: 1060, column: 18, scope: !7542)
!7551 = !DILocation(line: 1060, column: 8, scope: !7542)
!7552 = !DILocation(line: 1060, column: 14, scope: !7542)
!7553 = !DILocation(line: 1061, column: 30, scope: !7542)
!7554 = !DILocation(line: 1061, column: 16, scope: !7542)
!7555 = !DILocation(line: 1062, column: 8, scope: !7542)
!7556 = !DILocation(line: 1062, column: 22, scope: !7542)
!7557 = !DILocation(line: 1067, column: 18, scope: !7542)
!7558 = !DILocation(line: 1067, column: 23, scope: !7542)
!7559 = !DILocation(line: 1068, column: 18, scope: !7542)
!7560 = !DILocation(line: 1068, column: 23, scope: !7542)
!7561 = !DILocation(line: 1069, column: 22, scope: !7542)
!7562 = !DILocation(line: 1069, column: 27, scope: !7542)
!7563 = !DILocation(line: 1070, column: 18, scope: !7542)
!7564 = !DILocation(line: 1070, column: 22, scope: !7542)
!7565 = !DILocation(line: 1072, column: 7, scope: !7566)
!7566 = distinct !DILexicalBlock(scope: !7542, file: !6121, line: 1072, column: 7)
!7567 = !DILocation(line: 1072, column: 7, scope: !7542)
!7568 = !DILocation(line: 1075, column: 30, scope: !7542)
!7569 = !DILocation(line: 1075, column: 3, scope: !7542)
!7570 = !DILocation(line: 1077, column: 10, scope: !7542)
!7571 = !DILocation(line: 1077, column: 3, scope: !7542)
!7572 = !DILocation(line: 1078, column: 1, scope: !7542)
!7573 = distinct !DISubprogram(name: "end_imm_use_stmt_p", scope: !6121, file: !6121, line: 969, type: !7574, scopeLine: 970, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7578)
!7574 = !DISubroutineType(types: !7575)
!7575 = !{!6, !7576}
!7576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7577, size: 64)
!7577 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4820)
!7578 = !{!7579}
!7579 = !DILocalVariable(name: "imm", arg: 1, scope: !7573, file: !6121, line: 969, type: !7576)
!7580 = !DILocation(line: 0, scope: !7573)
!7581 = !DILocation(line: 971, column: 16, scope: !7573)
!7582 = !DILocation(line: 971, column: 32, scope: !7573)
!7583 = !DILocation(line: 971, column: 24, scope: !7573)
!7584 = !DILocation(line: 971, column: 10, scope: !7573)
!7585 = !DILocation(line: 971, column: 3, scope: !7573)
!7586 = distinct !DISubprogram(name: "next_imm_use_stmt", scope: !6121, file: !6121, line: 1083, type: !7587, scopeLine: 1084, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7589)
!7587 = !DISubroutineType(types: !7588)
!7588 = !{!7, !7545}
!7589 = !{!7590}
!7590 = !DILocalVariable(name: "imm", arg: 1, scope: !7586, file: !6121, line: 1083, type: !7545)
!7591 = !DILocation(line: 0, scope: !7586)
!7592 = !DILocation(line: 1085, column: 33, scope: !7586)
!7593 = !DILocation(line: 1085, column: 16, scope: !7586)
!7594 = !DILocation(line: 1086, column: 7, scope: !7595)
!7595 = distinct !DILexicalBlock(scope: !7586, file: !6121, line: 1086, column: 7)
!7596 = !DILocation(line: 1086, column: 7, scope: !7586)
!7597 = !DILocation(line: 1088, column: 26, scope: !7598)
!7598 = distinct !DILexicalBlock(scope: !7599, file: !6121, line: 1088, column: 11)
!7599 = distinct !DILexicalBlock(scope: !7595, file: !6121, line: 1087, column: 5)
!7600 = !DILocation(line: 1088, column: 31, scope: !7598)
!7601 = !DILocation(line: 1088, column: 11, scope: !7599)
!7602 = !DILocation(line: 1089, column: 24, scope: !7598)
!7603 = !DILocation(line: 1089, column: 2, scope: !7598)
!7604 = !DILocation(line: 1093, column: 30, scope: !7586)
!7605 = !DILocation(line: 1093, column: 3, scope: !7586)
!7606 = !DILocation(line: 1094, column: 10, scope: !7586)
!7607 = !DILocation(line: 1094, column: 3, scope: !7586)
!7608 = !DILocation(line: 1095, column: 1, scope: !7586)
!7609 = distinct !DISubprogram(name: "link_use_stmts_after", scope: !6121, file: !6121, line: 1018, type: !7610, scopeLine: 1019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7612)
!7610 = !DISubroutineType(types: !7611)
!7611 = !{null, !3603, !7545}
!7612 = !{!7613, !7614, !7615, !7616, !7617, !7618, !7619, !7632}
!7613 = !DILocalVariable(name: "head", arg: 1, scope: !7609, file: !6121, line: 1018, type: !3603)
!7614 = !DILocalVariable(name: "imm", arg: 2, scope: !7609, file: !6121, line: 1018, type: !7545)
!7615 = !DILocalVariable(name: "use_p", scope: !7609, file: !6121, line: 1020, type: !3603)
!7616 = !DILocalVariable(name: "last_p", scope: !7609, file: !6121, line: 1021, type: !3603)
!7617 = !DILocalVariable(name: "head_stmt", scope: !7609, file: !6121, line: 1022, type: !7)
!7618 = !DILocalVariable(name: "use", scope: !7609, file: !6121, line: 1023, type: !326)
!7619 = !DILocalVariable(name: "op_iter", scope: !7609, file: !6121, line: 1024, type: !7620)
!7620 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssa_op_iter", file: !732, line: 140, baseType: !7621)
!7621 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_iterator_d", file: !732, line: 131, size: 320, elements: !7622)
!7622 = !{!7623, !7624, !7625, !7627, !7629, !7630, !7631}
!7623 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !7621, file: !732, line: 133, baseType: !6, size: 8)
!7624 = !DIDerivedType(tag: DW_TAG_member, name: "iter_type", scope: !7621, file: !732, line: 134, baseType: !3521, size: 32, offset: 32)
!7625 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !7621, file: !732, line: 135, baseType: !7626, size: 64, offset: 64)
!7626 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_optype_p", file: !732, line: 42, baseType: !744)
!7627 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !7621, file: !732, line: 136, baseType: !7628, size: 64, offset: 128)
!7628 = !DIDerivedType(tag: DW_TAG_typedef, name: "use_optype_p", file: !732, line: 50, baseType: !751)
!7629 = !DIDerivedType(tag: DW_TAG_member, name: "phi_i", scope: !7621, file: !732, line: 137, baseType: !100, size: 32, offset: 192)
!7630 = !DIDerivedType(tag: DW_TAG_member, name: "num_phi", scope: !7621, file: !732, line: 138, baseType: !100, size: 32, offset: 224)
!7631 = !DIDerivedType(tag: DW_TAG_member, name: "phi_stmt", scope: !7621, file: !732, line: 139, baseType: !7, size: 64, offset: 256)
!7632 = !DILocalVariable(name: "flag", scope: !7609, file: !6121, line: 1025, type: !100)
!7633 = !DILocation(line: 0, scope: !7609)
!7634 = !DILocation(line: 1022, column: 22, scope: !7609)
!7635 = !DILocation(line: 1023, column: 14, scope: !7609)
!7636 = !DILocation(line: 1024, column: 3, scope: !7609)
!7637 = !DILocation(line: 1028, column: 11, scope: !7609)
!7638 = !DILocation(line: 1030, column: 7, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7609, file: !6121, line: 1030, column: 7)
!7640 = !DILocation(line: 1030, column: 31, scope: !7639)
!7641 = !DILocation(line: 1030, column: 7, scope: !7609)
!7642 = !DILocation(line: 1032, column: 7, scope: !7643)
!7643 = distinct !DILexicalBlock(scope: !7644, file: !6121, line: 1032, column: 7)
!7644 = distinct !DILexicalBlock(scope: !7639, file: !6121, line: 1031, column: 5)
!7645 = !DILocation(line: 0, scope: !7643)
!7646 = !DILocation(line: 1032, column: 7, scope: !7647)
!7647 = distinct !DILexicalBlock(scope: !7643, file: !6121, line: 1032, column: 7)
!7648 = !DILocation(line: 1033, column: 6, scope: !7649)
!7649 = distinct !DILexicalBlock(scope: !7647, file: !6121, line: 1033, column: 6)
!7650 = !DILocation(line: 1033, column: 27, scope: !7649)
!7651 = !DILocation(line: 1033, column: 6, scope: !7647)
!7652 = !DILocation(line: 1034, column: 13, scope: !7649)
!7653 = !DILocation(line: 1034, column: 4, scope: !7649)
!7654 = distinct !{!7654, !7642, !7655}
!7655 = !DILocation(line: 1034, column: 53, scope: !7643)
!7656 = !DILocation(line: 1038, column: 11, scope: !7657)
!7657 = distinct !DILexicalBlock(scope: !7639, file: !6121, line: 1037, column: 5)
!7658 = !DILocation(line: 1040, column: 4, scope: !7659)
!7659 = distinct !DILexicalBlock(scope: !7660, file: !6121, line: 1040, column: 4)
!7660 = distinct !DILexicalBlock(scope: !7661, file: !6121, line: 1039, column: 2)
!7661 = distinct !DILexicalBlock(scope: !7657, file: !6121, line: 1038, column: 11)
!7662 = !DILocation(line: 0, scope: !7659)
!7663 = !DILocation(line: 1040, column: 4, scope: !7664)
!7664 = distinct !DILexicalBlock(scope: !7659, file: !6121, line: 1040, column: 4)
!7665 = !DILocation(line: 1041, column: 10, scope: !7666)
!7666 = distinct !DILexicalBlock(scope: !7664, file: !6121, line: 1041, column: 10)
!7667 = !DILocation(line: 1041, column: 31, scope: !7666)
!7668 = !DILocation(line: 1041, column: 10, scope: !7664)
!7669 = !DILocation(line: 1042, column: 17, scope: !7666)
!7670 = !DILocation(line: 1042, column: 8, scope: !7666)
!7671 = distinct !{!7671, !7658, !7672}
!7672 = !DILocation(line: 1042, column: 57, scope: !7659)
!7673 = !DILocation(line: 1044, column: 25, scope: !7674)
!7674 = distinct !DILexicalBlock(scope: !7661, file: !6121, line: 1044, column: 16)
!7675 = !DILocation(line: 1044, column: 53, scope: !7674)
!7676 = !DILocation(line: 1044, column: 16, scope: !7661)
!7677 = !DILocation(line: 1046, column: 8, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7679, file: !6121, line: 1046, column: 8)
!7679 = distinct !DILexicalBlock(scope: !7674, file: !6121, line: 1045, column: 2)
!7680 = !DILocation(line: 1046, column: 29, scope: !7678)
!7681 = !DILocation(line: 1046, column: 8, scope: !7679)
!7682 = !DILocation(line: 1047, column: 15, scope: !7678)
!7683 = !DILocation(line: 1047, column: 6, scope: !7678)
!7684 = !DILocation(line: 1051, column: 22, scope: !7685)
!7685 = distinct !DILexicalBlock(scope: !7609, file: !6121, line: 1051, column: 7)
!7686 = !DILocation(line: 1021, column: 17, scope: !7609)
!7687 = !DILocation(line: 1051, column: 27, scope: !7685)
!7688 = !DILocation(line: 1051, column: 7, scope: !7609)
!7689 = !DILocation(line: 1052, column: 27, scope: !7685)
!7690 = !DILocation(line: 1052, column: 5, scope: !7685)
!7691 = !DILocation(line: 1053, column: 32, scope: !7609)
!7692 = !DILocation(line: 1053, column: 3, scope: !7609)
!7693 = !DILocation(line: 1054, column: 1, scope: !7609)
!7694 = distinct !DISubprogram(name: "get_use_from_ptr", scope: !6121, file: !6121, line: 427, type: !7695, scopeLine: 428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7697)
!7695 = !DISubroutineType(types: !7696)
!7696 = !{!326, !3603}
!7697 = !{!7698}
!7698 = !DILocalVariable(name: "use", arg: 1, scope: !7694, file: !6121, line: 427, type: !3603)
!7699 = !DILocation(line: 0, scope: !7694)
!7700 = !DILocation(line: 429, column: 17, scope: !7694)
!7701 = !DILocation(line: 429, column: 10, scope: !7694)
!7702 = !DILocation(line: 429, column: 3, scope: !7694)
!7703 = distinct !DISubprogram(name: "op_iter_init_phiuse", scope: !6121, file: !6121, line: 910, type: !7704, scopeLine: 911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7707)
!7704 = !DISubroutineType(types: !7705)
!7705 = !{!3603, !7706, !7, !100}
!7706 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7620, size: 64)
!7707 = !{!7708, !7709, !7710, !7711, !7712}
!7708 = !DILocalVariable(name: "ptr", arg: 1, scope: !7703, file: !6121, line: 910, type: !7706)
!7709 = !DILocalVariable(name: "phi", arg: 2, scope: !7703, file: !6121, line: 910, type: !7)
!7710 = !DILocalVariable(name: "flags", arg: 3, scope: !7703, file: !6121, line: 910, type: !100)
!7711 = !DILocalVariable(name: "phi_def", scope: !7703, file: !6121, line: 912, type: !326)
!7712 = !DILocalVariable(name: "comp", scope: !7703, file: !6121, line: 913, type: !100)
!7713 = !DILocation(line: 0, scope: !7703)
!7714 = !DILocation(line: 912, column: 18, scope: !7703)
!7715 = !DILocation(line: 915, column: 3, scope: !7703)
!7716 = !DILocation(line: 916, column: 8, scope: !7703)
!7717 = !DILocation(line: 916, column: 13, scope: !7703)
!7718 = !DILocation(line: 918, column: 3, scope: !7703)
!7719 = !DILocation(line: 920, column: 11, scope: !7703)
!7720 = !DILocation(line: 923, column: 14, scope: !7721)
!7721 = distinct !DILexicalBlock(scope: !7703, file: !6121, line: 923, column: 7)
!7722 = !DILocation(line: 923, column: 22, scope: !7721)
!7723 = !DILocation(line: 923, column: 7, scope: !7703)
!7724 = !DILocation(line: 925, column: 17, scope: !7725)
!7725 = distinct !DILexicalBlock(scope: !7721, file: !6121, line: 924, column: 5)
!7726 = !DILocation(line: 926, column: 7, scope: !7725)
!7727 = !DILocation(line: 929, column: 8, scope: !7703)
!7728 = !DILocation(line: 929, column: 17, scope: !7703)
!7729 = !DILocation(line: 930, column: 18, scope: !7703)
!7730 = !DILocation(line: 930, column: 8, scope: !7703)
!7731 = !DILocation(line: 930, column: 16, scope: !7703)
!7732 = !DILocation(line: 931, column: 8, scope: !7703)
!7733 = !DILocation(line: 931, column: 18, scope: !7703)
!7734 = !DILocation(line: 932, column: 10, scope: !7703)
!7735 = !DILocation(line: 932, column: 3, scope: !7703)
!7736 = !DILocation(line: 933, column: 1, scope: !7703)
!7737 = distinct !DISubprogram(name: "op_iter_done", scope: !6121, file: !6121, line: 652, type: !7738, scopeLine: 653, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7742)
!7738 = !DISubroutineType(types: !7739)
!7739 = !{!6, !7740}
!7740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7741, size: 64)
!7741 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7620)
!7742 = !{!7743}
!7743 = !DILocalVariable(name: "ptr", arg: 1, scope: !7737, file: !6121, line: 652, type: !7740)
!7744 = !DILocation(line: 0, scope: !7737)
!7745 = !DILocation(line: 654, column: 15, scope: !7737)
!7746 = !DILocation(line: 654, column: 3, scope: !7737)
!7747 = distinct !DISubprogram(name: "move_use_after_head", scope: !6121, file: !6121, line: 990, type: !7748, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7750)
!7748 = !DISubroutineType(types: !7749)
!7749 = !{!3603, !3603, !3603, !3603}
!7750 = !{!7751, !7752, !7753}
!7751 = !DILocalVariable(name: "use_p", arg: 1, scope: !7747, file: !6121, line: 990, type: !3603)
!7752 = !DILocalVariable(name: "head", arg: 2, scope: !7747, file: !6121, line: 990, type: !3603)
!7753 = !DILocalVariable(name: "last_p", arg: 3, scope: !7747, file: !6121, line: 991, type: !3603)
!7754 = !DILocation(line: 0, scope: !7747)
!7755 = !DILocation(line: 997, column: 13, scope: !7756)
!7756 = distinct !DILexicalBlock(scope: !7747, file: !6121, line: 997, column: 7)
!7757 = !DILocation(line: 997, column: 7, scope: !7747)
!7758 = !DILocation(line: 1000, column: 19, scope: !7759)
!7759 = distinct !DILexicalBlock(scope: !7760, file: !6121, line: 1000, column: 11)
!7760 = distinct !DILexicalBlock(scope: !7756, file: !6121, line: 998, column: 5)
!7761 = !DILocation(line: 1000, column: 24, scope: !7759)
!7762 = !DILocation(line: 1000, column: 11, scope: !7760)
!7763 = !DILocation(line: 1005, column: 4, scope: !7764)
!7764 = distinct !DILexicalBlock(scope: !7759, file: !6121, line: 1003, column: 2)
!7765 = !DILocation(line: 1006, column: 4, scope: !7764)
!7766 = !DILocation(line: 1010, column: 3, scope: !7747)
!7767 = distinct !DISubprogram(name: "op_iter_next_use", scope: !6121, file: !6121, line: 659, type: !7768, scopeLine: 660, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7770)
!7768 = !DISubroutineType(types: !7769)
!7769 = !{!3603, !7706}
!7770 = !{!7771, !7772}
!7771 = !DILocalVariable(name: "ptr", arg: 1, scope: !7767, file: !6121, line: 659, type: !7706)
!7772 = !DILocalVariable(name: "use_p", scope: !7767, file: !6121, line: 661, type: !3603)
!7773 = !DILocation(line: 0, scope: !7767)
!7774 = !DILocation(line: 665, column: 12, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7767, file: !6121, line: 665, column: 7)
!7776 = !DILocation(line: 665, column: 7, scope: !7775)
!7777 = !DILocation(line: 665, column: 7, scope: !7767)
!7778 = !DILocation(line: 667, column: 15, scope: !7779)
!7779 = distinct !DILexicalBlock(scope: !7775, file: !6121, line: 666, column: 5)
!7780 = !DILocation(line: 668, column: 30, scope: !7779)
!7781 = !DILocation(line: 668, column: 17, scope: !7779)
!7782 = !DILocation(line: 669, column: 7, scope: !7779)
!7783 = !DILocation(line: 671, column: 12, scope: !7784)
!7784 = distinct !DILexicalBlock(scope: !7767, file: !6121, line: 671, column: 7)
!7785 = !DILocation(line: 671, column: 25, scope: !7784)
!7786 = !DILocation(line: 671, column: 18, scope: !7784)
!7787 = !DILocation(line: 671, column: 7, scope: !7767)
!7788 = !DILocation(line: 673, column: 14, scope: !7789)
!7789 = distinct !DILexicalBlock(scope: !7784, file: !6121, line: 672, column: 5)
!7790 = !DILocation(line: 673, column: 7, scope: !7789)
!7791 = !DILocation(line: 675, column: 8, scope: !7767)
!7792 = !DILocation(line: 675, column: 13, scope: !7767)
!7793 = !DILocation(line: 676, column: 3, scope: !7767)
!7794 = !DILocation(line: 677, column: 1, scope: !7767)
!7795 = distinct !DISubprogram(name: "op_iter_init_use", scope: !6121, file: !6121, line: 768, type: !7704, scopeLine: 769, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7796)
!7796 = !{!7797, !7798, !7799}
!7797 = !DILocalVariable(name: "ptr", arg: 1, scope: !7795, file: !6121, line: 768, type: !7706)
!7798 = !DILocalVariable(name: "stmt", arg: 2, scope: !7795, file: !6121, line: 768, type: !7)
!7799 = !DILocalVariable(name: "flags", arg: 3, scope: !7795, file: !6121, line: 768, type: !100)
!7800 = !DILocation(line: 0, scope: !7795)
!7801 = !DILocation(line: 770, column: 3, scope: !7795)
!7802 = !DILocation(line: 772, column: 3, scope: !7795)
!7803 = !DILocation(line: 773, column: 8, scope: !7795)
!7804 = !DILocation(line: 773, column: 18, scope: !7795)
!7805 = !DILocation(line: 774, column: 10, scope: !7795)
!7806 = !DILocation(line: 774, column: 3, scope: !7795)
!7807 = distinct !DISubprogram(name: "gimple_vuse_op", scope: !11, file: !11, line: 1334, type: !7808, scopeLine: 1335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7810)
!7808 = !DISubroutineType(types: !7809)
!7809 = !{!3603, !4377}
!7810 = !{!7811, !7812}
!7811 = !DILocalVariable(name: "g", arg: 1, scope: !7807, file: !11, line: 1334, type: !4377)
!7812 = !DILocalVariable(name: "ops", scope: !7807, file: !11, line: 1336, type: !751)
!7813 = !DILocation(line: 0, scope: !7807)
!7814 = !DILocation(line: 1337, column: 8, scope: !7815)
!7815 = distinct !DILexicalBlock(scope: !7807, file: !11, line: 1337, column: 7)
!7816 = !DILocation(line: 1337, column: 7, scope: !7807)
!7817 = !DILocation(line: 1339, column: 25, scope: !7807)
!7818 = !DILocation(line: 1340, column: 7, scope: !7819)
!7819 = distinct !DILexicalBlock(scope: !7807, file: !11, line: 1340, column: 7)
!7820 = !DILocation(line: 1341, column: 7, scope: !7819)
!7821 = !DILocation(line: 1341, column: 28, scope: !7819)
!7822 = !DILocation(line: 1341, column: 49, scope: !7819)
!7823 = !DILocation(line: 1341, column: 32, scope: !7819)
!7824 = !DILocation(line: 1342, column: 12, scope: !7819)
!7825 = !DILocation(line: 1340, column: 7, scope: !7807)
!7826 = !DILocation(line: 1344, column: 1, scope: !7807)
!7827 = distinct !DISubprogram(name: "delink_imm_use", scope: !6121, file: !6121, line: 188, type: !7828, scopeLine: 189, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7830)
!7828 = !DISubroutineType(types: !7829)
!7829 = !{null, !3604}
!7830 = !{!7831}
!7831 = !DILocalVariable(name: "linknode", arg: 1, scope: !7827, file: !6121, line: 188, type: !3604)
!7832 = !DILocation(line: 0, scope: !7827)
!7833 = !DILocation(line: 191, column: 17, scope: !7834)
!7834 = distinct !DILexicalBlock(scope: !7827, file: !6121, line: 191, column: 7)
!7835 = !DILocation(line: 191, column: 22, scope: !7834)
!7836 = !DILocation(line: 191, column: 7, scope: !7827)
!7837 = !DILocation(line: 194, column: 36, scope: !7827)
!7838 = !DILocation(line: 194, column: 19, scope: !7827)
!7839 = !DILocation(line: 194, column: 24, scope: !7827)
!7840 = !DILocation(line: 195, column: 36, scope: !7827)
!7841 = !DILocation(line: 195, column: 13, scope: !7827)
!7842 = !DILocation(line: 195, column: 24, scope: !7827)
!7843 = !DILocation(line: 196, column: 18, scope: !7827)
!7844 = !DILocation(line: 197, column: 18, scope: !7827)
!7845 = !DILocation(line: 198, column: 1, scope: !7827)
!7846 = distinct !DISubprogram(name: "link_imm_use_to_list", scope: !6121, file: !6121, line: 202, type: !7847, scopeLine: 203, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7849)
!7847 = !DISubroutineType(types: !7848)
!7848 = !{null, !3604, !3604}
!7849 = !{!7850, !7851}
!7850 = !DILocalVariable(name: "linknode", arg: 1, scope: !7846, file: !6121, line: 202, type: !3604)
!7851 = !DILocalVariable(name: "list", arg: 2, scope: !7846, file: !6121, line: 202, type: !3604)
!7852 = !DILocation(line: 0, scope: !7846)
!7853 = !DILocation(line: 206, column: 13, scope: !7846)
!7854 = !DILocation(line: 206, column: 18, scope: !7846)
!7855 = !DILocation(line: 207, column: 26, scope: !7846)
!7856 = !DILocation(line: 207, column: 13, scope: !7846)
!7857 = !DILocation(line: 207, column: 18, scope: !7846)
!7858 = !DILocation(line: 208, column: 9, scope: !7846)
!7859 = !DILocation(line: 208, column: 15, scope: !7846)
!7860 = !DILocation(line: 208, column: 20, scope: !7846)
!7861 = !DILocation(line: 209, column: 14, scope: !7846)
!7862 = !DILocation(line: 210, column: 1, scope: !7846)
!7863 = distinct !DISubprogram(name: "clear_and_done_ssa_iter", scope: !6121, file: !6121, line: 729, type: !7864, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7866)
!7864 = !DISubroutineType(types: !7865)
!7865 = !{null, !7706}
!7866 = !{!7867}
!7867 = !DILocalVariable(name: "ptr", arg: 1, scope: !7863, file: !6121, line: 729, type: !7706)
!7868 = !DILocation(line: 0, scope: !7863)
!7869 = !DILocation(line: 731, column: 8, scope: !7863)
!7870 = !DILocation(line: 731, column: 13, scope: !7863)
!7871 = !DILocation(line: 732, column: 8, scope: !7863)
!7872 = !DILocation(line: 732, column: 13, scope: !7863)
!7873 = !DILocation(line: 733, column: 8, scope: !7863)
!7874 = !DILocation(line: 733, column: 18, scope: !7863)
!7875 = !DILocation(line: 734, column: 8, scope: !7863)
!7876 = !DILocation(line: 734, column: 14, scope: !7863)
!7877 = !DILocation(line: 735, column: 8, scope: !7863)
!7878 = !DILocation(line: 735, column: 16, scope: !7863)
!7879 = !DILocation(line: 736, column: 8, scope: !7863)
!7880 = !DILocation(line: 736, column: 17, scope: !7863)
!7881 = !DILocation(line: 737, column: 8, scope: !7863)
!7882 = !DILocation(line: 737, column: 13, scope: !7863)
!7883 = !DILocation(line: 738, column: 1, scope: !7863)
!7884 = distinct !DISubprogram(name: "gimple_phi_num_args", scope: !11, file: !11, line: 3061, type: !7184, scopeLine: 3062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7885)
!7885 = !{!7886}
!7886 = !DILocalVariable(name: "gs", arg: 1, scope: !7884, file: !11, line: 3061, type: !4377)
!7887 = !DILocation(line: 0, scope: !7884)
!7888 = !DILocation(line: 3064, column: 25, scope: !7884)
!7889 = !DILocation(line: 3064, column: 3, scope: !7884)
!7890 = distinct !DISubprogram(name: "gimple_phi_arg_imm_use_ptr", scope: !6121, file: !6121, line: 442, type: !7891, scopeLine: 443, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7893)
!7891 = !DISubroutineType(types: !7892)
!7892 = !{!3603, !7, !100}
!7893 = !{!7894, !7895}
!7894 = !DILocalVariable(name: "gs", arg: 1, scope: !7890, file: !6121, line: 442, type: !7)
!7895 = !DILocalVariable(name: "i", arg: 2, scope: !7890, file: !6121, line: 442, type: !100)
!7896 = !DILocation(line: 0, scope: !7890)
!7897 = !DILocation(line: 444, column: 11, scope: !7890)
!7898 = !DILocation(line: 444, column: 35, scope: !7890)
!7899 = !DILocation(line: 444, column: 3, scope: !7890)
!7900 = distinct !DISubprogram(name: "gimple_phi_arg", scope: !11, file: !11, line: 3100, type: !7901, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7904)
!7901 = !DISubroutineType(types: !7902)
!7902 = !{!7903, !7, !17}
!7903 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1658, size: 64)
!7904 = !{!7905, !7906}
!7905 = !DILocalVariable(name: "gs", arg: 1, scope: !7900, file: !11, line: 3100, type: !7)
!7906 = !DILocalVariable(name: "index", arg: 2, scope: !7900, file: !11, line: 3100, type: !17)
!7907 = !DILocation(line: 0, scope: !7900)
!7908 = !DILocation(line: 3103, column: 3, scope: !7900)
!7909 = !DILocation(line: 3104, column: 12, scope: !7900)
!7910 = !DILocation(line: 3104, column: 3, scope: !7900)
!7911 = distinct !DISubprogram(name: "op_iter_init", scope: !6121, file: !6121, line: 742, type: !7912, scopeLine: 743, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7914)
!7912 = !DISubroutineType(types: !7913)
!7913 = !{null, !7706, !7, !100}
!7914 = !{!7915, !7916, !7917}
!7915 = !DILocalVariable(name: "ptr", arg: 1, scope: !7911, file: !6121, line: 742, type: !7706)
!7916 = !DILocalVariable(name: "stmt", arg: 2, scope: !7911, file: !6121, line: 742, type: !7)
!7917 = !DILocalVariable(name: "flags", arg: 3, scope: !7911, file: !6121, line: 742, type: !100)
!7918 = !DILocation(line: 0, scope: !7911)
!7919 = !DILocation(line: 746, column: 3, scope: !7911)
!7920 = !DILocation(line: 748, column: 22, scope: !7911)
!7921 = !DILocation(line: 748, column: 15, scope: !7911)
!7922 = !DILocation(line: 748, column: 52, scope: !7911)
!7923 = !DILocation(line: 748, column: 8, scope: !7911)
!7924 = !DILocation(line: 748, column: 13, scope: !7911)
!7925 = !DILocation(line: 749, column: 15, scope: !7926)
!7926 = distinct !DILexicalBlock(scope: !7911, file: !6121, line: 749, column: 7)
!7927 = !DILocation(line: 750, column: 7, scope: !7926)
!7928 = !DILocation(line: 750, column: 10, scope: !7926)
!7929 = !DILocation(line: 751, column: 7, scope: !7926)
!7930 = !DILocation(line: 751, column: 10, scope: !7926)
!7931 = !DILocation(line: 751, column: 29, scope: !7926)
!7932 = !DILocation(line: 749, column: 7, scope: !7911)
!7933 = !DILocation(line: 752, column: 22, scope: !7926)
!7934 = !DILocation(line: 752, column: 28, scope: !7926)
!7935 = !DILocation(line: 752, column: 15, scope: !7926)
!7936 = !DILocation(line: 752, column: 5, scope: !7926)
!7937 = !DILocation(line: 753, column: 22, scope: !7911)
!7938 = !DILocation(line: 753, column: 15, scope: !7911)
!7939 = !DILocation(line: 753, column: 52, scope: !7911)
!7940 = !DILocation(line: 753, column: 8, scope: !7911)
!7941 = !DILocation(line: 753, column: 13, scope: !7911)
!7942 = !DILocation(line: 754, column: 15, scope: !7943)
!7943 = distinct !DILexicalBlock(scope: !7911, file: !6121, line: 754, column: 7)
!7944 = !DILocation(line: 755, column: 7, scope: !7943)
!7945 = !DILocation(line: 755, column: 10, scope: !7943)
!7946 = !DILocation(line: 756, column: 7, scope: !7943)
!7947 = !DILocation(line: 756, column: 10, scope: !7943)
!7948 = !DILocation(line: 756, column: 29, scope: !7943)
!7949 = !DILocation(line: 754, column: 7, scope: !7911)
!7950 = !DILocation(line: 757, column: 22, scope: !7943)
!7951 = !DILocation(line: 757, column: 28, scope: !7943)
!7952 = !DILocation(line: 757, column: 15, scope: !7943)
!7953 = !DILocation(line: 757, column: 5, scope: !7943)
!7954 = !DILocation(line: 758, column: 8, scope: !7911)
!7955 = !DILocation(line: 758, column: 13, scope: !7911)
!7956 = !DILocation(line: 760, column: 8, scope: !7911)
!7957 = !DILocation(line: 760, column: 14, scope: !7911)
!7958 = !DILocation(line: 761, column: 8, scope: !7911)
!7959 = !DILocation(line: 761, column: 16, scope: !7911)
!7960 = !DILocation(line: 762, column: 8, scope: !7911)
!7961 = !DILocation(line: 762, column: 17, scope: !7911)
!7962 = !DILocation(line: 763, column: 1, scope: !7911)
!7963 = distinct !DISubprogram(name: "gimple_def_ops", scope: !11, file: !11, line: 1292, type: !7964, scopeLine: 1293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7966)
!7964 = !DISubroutineType(types: !7965)
!7965 = !{!744, !4377}
!7966 = !{!7967}
!7967 = !DILocalVariable(name: "g", arg: 1, scope: !7963, file: !11, line: 1292, type: !4377)
!7968 = !DILocation(line: 0, scope: !7963)
!7969 = !DILocation(line: 1294, column: 8, scope: !7970)
!7970 = distinct !DILexicalBlock(scope: !7963, file: !11, line: 1294, column: 7)
!7971 = !DILocation(line: 1294, column: 7, scope: !7963)
!7972 = !DILocation(line: 1296, column: 26, scope: !7963)
!7973 = !DILocation(line: 1296, column: 3, scope: !7963)
!7974 = !DILocation(line: 1297, column: 1, scope: !7963)
!7975 = distinct !DISubprogram(name: "gimple_vdef", scope: !11, file: !11, line: 1375, type: !6897, scopeLine: 1376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7976)
!7976 = !{!7977}
!7977 = !DILocalVariable(name: "g", arg: 1, scope: !7975, file: !11, line: 1375, type: !4377)
!7978 = !DILocation(line: 0, scope: !7975)
!7979 = !DILocation(line: 1377, column: 8, scope: !7980)
!7980 = distinct !DILexicalBlock(scope: !7975, file: !11, line: 1377, column: 7)
!7981 = !DILocation(line: 1377, column: 7, scope: !7975)
!7982 = !DILocation(line: 1379, column: 23, scope: !7975)
!7983 = !DILocation(line: 1379, column: 3, scope: !7975)
!7984 = !DILocation(line: 1380, column: 1, scope: !7975)
!7985 = distinct !DISubprogram(name: "gimple_use_ops", scope: !11, file: !11, line: 1313, type: !7986, scopeLine: 1314, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7988)
!7986 = !DISubroutineType(types: !7987)
!7987 = !{!751, !4377}
!7988 = !{!7989}
!7989 = !DILocalVariable(name: "g", arg: 1, scope: !7985, file: !11, line: 1313, type: !4377)
!7990 = !DILocation(line: 0, scope: !7985)
!7991 = !DILocation(line: 1315, column: 8, scope: !7992)
!7992 = distinct !DILexicalBlock(scope: !7985, file: !11, line: 1315, column: 7)
!7993 = !DILocation(line: 1315, column: 7, scope: !7985)
!7994 = !DILocation(line: 1317, column: 26, scope: !7985)
!7995 = !DILocation(line: 1317, column: 3, scope: !7985)
!7996 = !DILocation(line: 1318, column: 1, scope: !7985)
!7997 = distinct !DISubprogram(name: "gimple_vuse", scope: !11, file: !11, line: 1365, type: !6897, scopeLine: 1366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !7998)
!7998 = !{!7999}
!7999 = !DILocalVariable(name: "g", arg: 1, scope: !7997, file: !11, line: 1365, type: !4377)
!8000 = !DILocation(line: 0, scope: !7997)
!8001 = !DILocation(line: 1367, column: 8, scope: !8002)
!8002 = distinct !DILexicalBlock(scope: !7997, file: !11, line: 1367, column: 7)
!8003 = !DILocation(line: 1367, column: 7, scope: !7997)
!8004 = !DILocation(line: 1369, column: 23, scope: !7997)
!8005 = !DILocation(line: 1369, column: 3, scope: !7997)
!8006 = !DILocation(line: 1370, column: 1, scope: !7997)
!8007 = distinct !DISubprogram(name: "gimple_has_mem_ops", scope: !11, file: !11, line: 1283, type: !5045, scopeLine: 1284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8008)
!8008 = !{!8009}
!8009 = !DILocalVariable(name: "g", arg: 1, scope: !8007, file: !11, line: 1283, type: !4377)
!8010 = !DILocation(line: 0, scope: !8007)
!8011 = !DILocation(line: 1285, column: 10, scope: !8007)
!8012 = !DILocation(line: 1285, column: 26, scope: !8007)
!8013 = !DILocation(line: 1285, column: 43, scope: !8007)
!8014 = !DILocation(line: 1285, column: 46, scope: !8007)
!8015 = !DILocation(line: 1285, column: 62, scope: !8007)
!8016 = !DILocation(line: 1285, column: 3, scope: !8007)
!8017 = distinct !DISubprogram(name: "gimple_set_uid", scope: !11, file: !11, line: 1256, type: !8018, scopeLine: 1257, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8020)
!8018 = !DISubroutineType(types: !8019)
!8019 = !{null, !7, !17}
!8020 = !{!8021, !8022}
!8021 = !DILocalVariable(name: "g", arg: 1, scope: !8017, file: !11, line: 1256, type: !7)
!8022 = !DILocalVariable(name: "uid", arg: 2, scope: !8017, file: !11, line: 1256, type: !17)
!8023 = !DILocation(line: 0, scope: !8017)
!8024 = !DILocation(line: 1258, column: 13, scope: !8017)
!8025 = !DILocation(line: 1258, column: 17, scope: !8017)
!8026 = !DILocation(line: 1259, column: 1, scope: !8017)
!8027 = distinct !DISubprogram(name: "set_vinfo_for_stmt", scope: !1757, file: !1757, line: 634, type: !8028, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8030)
!8028 = !DISubroutineType(types: !8029)
!8029 = !{null, !7, !3759}
!8030 = !{!8031, !8032, !8033}
!8031 = !DILocalVariable(name: "stmt", arg: 1, scope: !8027, file: !1757, line: 634, type: !7)
!8032 = !DILocalVariable(name: "info", arg: 2, scope: !8027, file: !1757, line: 634, type: !3759)
!8033 = !DILocalVariable(name: "uid", scope: !8027, file: !1757, line: 636, type: !17)
!8034 = !DILocation(line: 0, scope: !8027)
!8035 = !DILocation(line: 636, column: 22, scope: !8027)
!8036 = !DILocation(line: 637, column: 11, scope: !8037)
!8037 = distinct !DILexicalBlock(scope: !8027, file: !1757, line: 637, column: 7)
!8038 = !DILocation(line: 637, column: 7, scope: !8027)
!8039 = !DILocation(line: 639, column: 7, scope: !8040)
!8040 = distinct !DILexicalBlock(scope: !8037, file: !1757, line: 638, column: 5)
!8041 = !DILocation(line: 640, column: 13, scope: !8040)
!8042 = !DILocation(line: 640, column: 56, scope: !8040)
!8043 = !DILocation(line: 641, column: 7, scope: !8040)
!8044 = !DILocation(line: 642, column: 7, scope: !8040)
!8045 = !DILocation(line: 643, column: 5, scope: !8040)
!8046 = !DILocation(line: 645, column: 5, scope: !8037)
!8047 = !DILocation(line: 646, column: 1, scope: !8027)
!8048 = distinct !DISubprogram(name: "VEC_slp_instance_heap_alloc", scope: !1757, file: !1757, line: 153, type: !8049, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8051)
!8049 = !DISubroutineType(types: !8050)
!8050 = !{!3590, !100}
!8051 = !{!8052}
!8052 = !DILocalVariable(name: "alloc_", arg: 1, scope: !8048, file: !1757, line: 153, type: !100)
!8053 = !DILocation(line: 0, scope: !8048)
!8054 = !DILocation(line: 153, column: 1, scope: !8048)
!8055 = distinct !DISubprogram(name: "VEC_vec_void_p_heap_safe_push", scope: !1757, file: !1757, line: 615, type: !8056, scopeLine: 615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8060)
!8056 = !DISubroutineType(types: !8057)
!8057 = !{!8058, !8059, !3746}
!8058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3746, size: 64)
!8059 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3747, size: 64)
!8060 = !{!8061, !8062}
!8061 = !DILocalVariable(name: "vec_", arg: 1, scope: !8055, file: !1757, line: 615, type: !8059)
!8062 = !DILocalVariable(name: "obj_", arg: 2, scope: !8055, file: !1757, line: 615, type: !3746)
!8063 = !DILocation(line: 0, scope: !8055)
!8064 = !DILocation(line: 615, column: 1, scope: !8055)
!8065 = distinct !DISubprogram(name: "VEC_vec_void_p_base_replace", scope: !1757, file: !1757, line: 614, type: !8066, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8069)
!8066 = !DISubroutineType(types: !8067)
!8067 = !{!3746, !8068, !17, !3746}
!8068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3752, size: 64)
!8069 = !{!8070, !8071, !8072, !8073}
!8070 = !DILocalVariable(name: "vec_", arg: 1, scope: !8065, file: !1757, line: 614, type: !8068)
!8071 = !DILocalVariable(name: "ix_", arg: 2, scope: !8065, file: !1757, line: 614, type: !17)
!8072 = !DILocalVariable(name: "obj_", arg: 3, scope: !8065, file: !1757, line: 614, type: !3746)
!8073 = !DILocalVariable(name: "old_obj_", scope: !8065, file: !1757, line: 614, type: !3746)
!8074 = !DILocation(line: 0, scope: !8065)
!8075 = !DILocation(line: 614, column: 1, scope: !8065)
!8076 = distinct !DISubprogram(name: "VEC_vec_void_p_heap_reserve", scope: !1757, file: !1757, line: 615, type: !8077, scopeLine: 615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8079)
!8077 = !DISubroutineType(types: !8078)
!8078 = !{!100, !8059, !100}
!8079 = !{!8080, !8081, !8082}
!8080 = !DILocalVariable(name: "vec_", arg: 1, scope: !8076, file: !1757, line: 615, type: !8059)
!8081 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8076, file: !1757, line: 615, type: !100)
!8082 = !DILocalVariable(name: "extend", scope: !8076, file: !1757, line: 615, type: !100)
!8083 = !DILocation(line: 0, scope: !8076)
!8084 = !DILocation(line: 615, column: 1, scope: !8076)
!8085 = !DILocation(line: 615, column: 1, scope: !8086)
!8086 = distinct !DILexicalBlock(scope: !8076, file: !1757, line: 615, column: 1)
!8087 = distinct !DISubprogram(name: "VEC_vec_void_p_base_quick_push", scope: !1757, file: !1757, line: 614, type: !8088, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8090)
!8088 = !DISubroutineType(types: !8089)
!8089 = !{!8058, !8068, !3746}
!8090 = !{!8091, !8092, !8093}
!8091 = !DILocalVariable(name: "vec_", arg: 1, scope: !8087, file: !1757, line: 614, type: !8068)
!8092 = !DILocalVariable(name: "obj_", arg: 2, scope: !8087, file: !1757, line: 614, type: !3746)
!8093 = !DILocalVariable(name: "slot_", scope: !8087, file: !1757, line: 614, type: !8058)
!8094 = !DILocation(line: 0, scope: !8087)
!8095 = !DILocation(line: 614, column: 1, scope: !8087)
!8096 = distinct !DISubprogram(name: "VEC_vec_void_p_base_space", scope: !1757, file: !1757, line: 614, type: !8097, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8099)
!8097 = !DISubroutineType(types: !8098)
!8098 = !{!100, !8068, !100}
!8099 = !{!8100, !8101}
!8100 = !DILocalVariable(name: "vec_", arg: 1, scope: !8096, file: !1757, line: 614, type: !8068)
!8101 = !DILocalVariable(name: "alloc_", arg: 2, scope: !8096, file: !1757, line: 614, type: !100)
!8102 = !DILocation(line: 0, scope: !8096)
!8103 = !DILocation(line: 614, column: 1, scope: !8096)
!8104 = distinct !DISubprogram(name: "VEC_slp_instance_heap_free", scope: !1757, file: !1757, line: 153, type: !8105, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8107)
!8105 = !DISubroutineType(types: !8106)
!8106 = !{null, !6820}
!8107 = !{!8108}
!8108 = !DILocalVariable(name: "vec_", arg: 1, scope: !8104, file: !1757, line: 153, type: !6820)
!8109 = !DILocation(line: 0, scope: !8104)
!8110 = !DILocation(line: 153, column: 1, scope: !8111)
!8111 = distinct !DILexicalBlock(scope: !8104, file: !1757, line: 153, column: 1)
!8112 = !DILocation(line: 153, column: 1, scope: !8104)
!8113 = distinct !DISubprogram(name: "vect_slp_analyze_node_operations", scope: !3, file: !3, line: 1206, type: !8114, scopeLine: 1207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8116)
!8114 = !DISubroutineType(types: !8115)
!8115 = !{!6, !3606, !3551}
!8116 = !{!8117, !8118, !8119, !8120, !8121, !8122}
!8117 = !DILocalVariable(name: "bb_vinfo", arg: 1, scope: !8113, file: !3, line: 1206, type: !3606)
!8118 = !DILocalVariable(name: "node", arg: 2, scope: !8113, file: !3, line: 1206, type: !3551)
!8119 = !DILocalVariable(name: "dummy", scope: !8113, file: !3, line: 1208, type: !6)
!8120 = !DILocalVariable(name: "i", scope: !8113, file: !3, line: 1209, type: !100)
!8121 = !DILocalVariable(name: "stmt", scope: !8113, file: !3, line: 1210, type: !7)
!8122 = !DILocalVariable(name: "stmt_info", scope: !8123, file: !3, line: 1221, type: !3759)
!8123 = distinct !DILexicalBlock(scope: !8124, file: !3, line: 1220, column: 5)
!8124 = distinct !DILexicalBlock(scope: !8125, file: !3, line: 1219, column: 3)
!8125 = distinct !DILexicalBlock(scope: !8113, file: !3, line: 1219, column: 3)
!8126 = !DILocation(line: 0, scope: !8113)
!8127 = !DILocation(line: 1208, column: 3, scope: !8113)
!8128 = !DILocation(line: 1210, column: 3, scope: !8113)
!8129 = !DILocation(line: 1212, column: 8, scope: !8130)
!8130 = distinct !DILexicalBlock(scope: !8113, file: !3, line: 1212, column: 7)
!8131 = !DILocation(line: 1212, column: 7, scope: !8113)
!8132 = !DILocation(line: 1215, column: 52, scope: !8133)
!8133 = distinct !DILexicalBlock(scope: !8113, file: !3, line: 1215, column: 7)
!8134 = !DILocation(line: 1215, column: 8, scope: !8133)
!8135 = !DILocation(line: 1216, column: 7, scope: !8133)
!8136 = !DILocation(line: 1216, column: 55, scope: !8133)
!8137 = !DILocation(line: 1216, column: 11, scope: !8133)
!8138 = !DILocation(line: 1215, column: 7, scope: !8113)
!8139 = !DILocation(line: 0, scope: !8124)
!8140 = !DILocation(line: 1219, column: 3, scope: !8125)
!8141 = !DILocation(line: 0, scope: !8125)
!8142 = !DILocation(line: 1219, column: 15, scope: !8124)
!8143 = !DILocation(line: 1221, column: 49, scope: !8123)
!8144 = !DILocation(line: 1221, column: 33, scope: !8123)
!8145 = !DILocation(line: 0, scope: !8123)
!8146 = !DILocation(line: 1222, column: 7, scope: !8123)
!8147 = !DILocation(line: 1223, column: 7, scope: !8123)
!8148 = !DILocation(line: 1225, column: 31, scope: !8149)
!8149 = distinct !DILexicalBlock(scope: !8123, file: !3, line: 1225, column: 11)
!8150 = !DILocation(line: 1225, column: 12, scope: !8149)
!8151 = !DILocation(line: 1219, column: 77, scope: !8124)
!8152 = !DILocation(line: 1219, column: 3, scope: !8124)
!8153 = distinct !{!8153, !8140, !8154}
!8154 = !DILocation(line: 1227, column: 5, scope: !8125)
!8155 = !DILocation(line: 1230, column: 1, scope: !8113)
!8156 = distinct !DISubprogram(name: "VEC_slp_instance_base_ordered_remove", scope: !1757, file: !1757, line: 152, type: !8157, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8159)
!8157 = !DISubroutineType(types: !8158)
!8158 = !{!3602, !7527, !17}
!8159 = !{!8160, !8161, !8162, !8163}
!8160 = !DILocalVariable(name: "vec_", arg: 1, scope: !8156, file: !1757, line: 152, type: !7527)
!8161 = !DILocalVariable(name: "ix_", arg: 2, scope: !8156, file: !1757, line: 152, type: !17)
!8162 = !DILocalVariable(name: "slot_", scope: !8156, file: !1757, line: 152, type: !4737)
!8163 = !DILocalVariable(name: "obj_", scope: !8156, file: !1757, line: 152, type: !3602)
!8164 = !DILocation(line: 0, scope: !8156)
!8165 = !DILocation(line: 152, column: 1, scope: !8156)
!8166 = distinct !DISubprogram(name: "VEC_slp_instance_base_length", scope: !1757, file: !1757, line: 152, type: !8167, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8169)
!8167 = !DISubroutineType(types: !8168)
!8168 = !{!17, !4735}
!8169 = !{!8170}
!8170 = !DILocalVariable(name: "vec_", arg: 1, scope: !8166, file: !1757, line: 152, type: !4735)
!8171 = !DILocation(line: 0, scope: !8166)
!8172 = !DILocation(line: 152, column: 1, scope: !8166)
!8173 = distinct !DISubprogram(name: "VEC_tree_base_quick_push", scope: !329, file: !329, line: 182, type: !8174, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8177)
!8174 = !DISubroutineType(types: !8175)
!8175 = !{!749, !8176, !326}
!8176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !701, size: 64)
!8177 = !{!8178, !8179, !8180}
!8178 = !DILocalVariable(name: "vec_", arg: 1, scope: !8173, file: !329, line: 182, type: !8176)
!8179 = !DILocalVariable(name: "obj_", arg: 2, scope: !8173, file: !329, line: 182, type: !326)
!8180 = !DILocalVariable(name: "slot_", scope: !8173, file: !329, line: 182, type: !749)
!8181 = !DILocation(line: 0, scope: !8173)
!8182 = !DILocation(line: 182, column: 1, scope: !8173)
!8183 = distinct !DISubprogram(name: "VEC_gimple_base_length", scope: !11, file: !11, line: 33, type: !8184, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8186)
!8184 = !DISubroutineType(types: !8185)
!8185 = !{!17, !4503}
!8186 = !{!8187}
!8187 = !DILocalVariable(name: "vec_", arg: 1, scope: !8183, file: !11, line: 33, type: !4503)
!8188 = !DILocation(line: 0, scope: !8183)
!8189 = !DILocation(line: 33, column: 1, scope: !8183)
!8190 = distinct !DISubprogram(name: "gimple_assign_rhs1", scope: !11, file: !11, line: 1727, type: !6897, scopeLine: 1728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8191)
!8191 = !{!8192}
!8192 = !DILocalVariable(name: "gs", arg: 1, scope: !8190, file: !11, line: 1727, type: !4377)
!8193 = !DILocation(line: 0, scope: !8190)
!8194 = !DILocation(line: 1730, column: 10, scope: !8190)
!8195 = !DILocation(line: 1730, column: 3, scope: !8190)
!8196 = distinct !DISubprogram(name: "VEC_tree_base_length", scope: !329, file: !329, line: 182, type: !8197, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8201)
!8197 = !DISubroutineType(types: !8198)
!8198 = !{!17, !8199}
!8199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8200, size: 64)
!8200 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !701)
!8201 = !{!8202}
!8202 = !DILocalVariable(name: "vec_", arg: 1, scope: !8196, file: !329, line: 182, type: !8199)
!8203 = !DILocation(line: 0, scope: !8196)
!8204 = !DILocation(line: 182, column: 1, scope: !8196)
!8205 = distinct !DISubprogram(name: "VEC_tree_base_index", scope: !329, file: !329, line: 182, type: !8206, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8208)
!8206 = !DISubroutineType(types: !8207)
!8207 = !{!326, !8199, !17}
!8208 = !{!8209, !8210}
!8209 = !DILocalVariable(name: "vec_", arg: 1, scope: !8205, file: !329, line: 182, type: !8199)
!8210 = !DILocalVariable(name: "ix_", arg: 2, scope: !8205, file: !329, line: 182, type: !17)
!8211 = !DILocation(line: 0, scope: !8205)
!8212 = !DILocation(line: 182, column: 1, scope: !8205)
!8213 = distinct !DISubprogram(name: "VEC_tree_heap_free", scope: !329, file: !329, line: 184, type: !8214, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8216)
!8214 = !DISubroutineType(types: !8215)
!8215 = !{null, !5258}
!8216 = !{!8217}
!8217 = !DILocalVariable(name: "vec_", arg: 1, scope: !8213, file: !329, line: 184, type: !5258)
!8218 = !DILocation(line: 0, scope: !8213)
!8219 = !DILocation(line: 184, column: 1, scope: !8220)
!8220 = distinct !DILexicalBlock(scope: !8213, file: !329, line: 184, column: 1)
!8221 = !DILocation(line: 184, column: 1, scope: !8213)
!8222 = distinct !DISubprogram(name: "VEC_tree_base_iterate", scope: !329, file: !329, line: 182, type: !8223, scopeLine: 182, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8225)
!8223 = !DISubroutineType(types: !8224)
!8224 = !{!100, !8199, !17, !749}
!8225 = !{!8226, !8227, !8228}
!8226 = !DILocalVariable(name: "vec_", arg: 1, scope: !8222, file: !329, line: 182, type: !8199)
!8227 = !DILocalVariable(name: "ix_", arg: 2, scope: !8222, file: !329, line: 182, type: !17)
!8228 = !DILocalVariable(name: "ptr", arg: 3, scope: !8222, file: !329, line: 182, type: !749)
!8229 = !DILocation(line: 0, scope: !8222)
!8230 = !DILocation(line: 182, column: 1, scope: !8231)
!8231 = distinct !DILexicalBlock(scope: !8222, file: !329, line: 182, column: 1)
!8232 = !DILocation(line: 182, column: 1, scope: !8222)
!8233 = !DILocation(line: 182, column: 1, scope: !8234)
!8234 = distinct !DILexicalBlock(scope: !8231, file: !329, line: 182, column: 1)
!8235 = !DILocation(line: 182, column: 1, scope: !8236)
!8236 = distinct !DILexicalBlock(scope: !8231, file: !329, line: 182, column: 1)
!8237 = !DILocation(line: 0, scope: !8231)
!8238 = distinct !DISubprogram(name: "VEC_vec_void_p_base_index", scope: !1757, file: !1757, line: 614, type: !8239, scopeLine: 614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8241)
!8239 = !DISubroutineType(types: !8240)
!8240 = !{!3746, !7507, !17}
!8241 = !{!8242, !8243}
!8242 = !DILocalVariable(name: "vec_", arg: 1, scope: !8238, file: !1757, line: 614, type: !7507)
!8243 = !DILocalVariable(name: "ix_", arg: 2, scope: !8238, file: !1757, line: 614, type: !17)
!8244 = !DILocation(line: 0, scope: !8238)
!8245 = !DILocation(line: 614, column: 1, scope: !8238)
!8246 = distinct !DISubprogram(name: "gimple_expr_code", scope: !11, file: !11, line: 1438, type: !5509, scopeLine: 1439, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8247)
!8247 = !{!8248, !8249}
!8248 = !DILocalVariable(name: "stmt", arg: 1, scope: !8246, file: !11, line: 1438, type: !4377)
!8249 = !DILocalVariable(name: "code", scope: !8246, file: !11, line: 1440, type: !3477)
!8250 = !DILocation(line: 0, scope: !8246)
!8251 = !DILocation(line: 1440, column: 27, scope: !8246)
!8252 = !DILocation(line: 1441, column: 29, scope: !8253)
!8253 = distinct !DILexicalBlock(scope: !8246, file: !11, line: 1441, column: 7)
!8254 = !DILocation(line: 1442, column: 42, scope: !8253)
!8255 = !DILocation(line: 1442, column: 5, scope: !8253)
!8256 = !DILocation(line: 1446, column: 5, scope: !8257)
!8257 = distinct !DILexicalBlock(scope: !8253, file: !11, line: 1443, column: 12)
!8258 = !DILocation(line: 1448, column: 5, scope: !8246)
!8259 = !DILocation(line: 1450, column: 1, scope: !8246)
!8260 = distinct !DISubprogram(name: "make_ssa_name", scope: !6121, file: !6121, line: 1245, type: !8261, scopeLine: 1246, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8263)
!8261 = !DISubroutineType(types: !8262)
!8262 = !{!326, !326, !7}
!8263 = !{!8264, !8265}
!8264 = !DILocalVariable(name: "var", arg: 1, scope: !8260, file: !6121, line: 1245, type: !326)
!8265 = !DILocalVariable(name: "stmt", arg: 2, scope: !8260, file: !6121, line: 1245, type: !7)
!8266 = !DILocation(line: 0, scope: !8260)
!8267 = !DILocation(line: 1247, column: 28, scope: !8260)
!8268 = !DILocation(line: 1247, column: 10, scope: !8260)
!8269 = !DILocation(line: 1247, column: 3, scope: !8260)
!8270 = distinct !DISubprogram(name: "gimple_call_set_lhs", scope: !11, file: !11, line: 1898, type: !8271, scopeLine: 1899, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8273)
!8271 = !DISubroutineType(types: !8272)
!8272 = !{null, !7, !326}
!8273 = !{!8274, !8275}
!8274 = !DILocalVariable(name: "gs", arg: 1, scope: !8270, file: !11, line: 1898, type: !7)
!8275 = !DILocalVariable(name: "lhs", arg: 2, scope: !8270, file: !11, line: 1898, type: !326)
!8276 = !DILocation(line: 0, scope: !8270)
!8277 = !DILocation(line: 1901, column: 3, scope: !8270)
!8278 = !DILocation(line: 1902, column: 7, scope: !8279)
!8279 = distinct !DILexicalBlock(scope: !8270, file: !11, line: 1902, column: 7)
!8280 = !DILocation(line: 1902, column: 11, scope: !8279)
!8281 = !DILocation(line: 1902, column: 14, scope: !8279)
!8282 = !DILocation(line: 1902, column: 30, scope: !8279)
!8283 = !DILocation(line: 1902, column: 7, scope: !8270)
!8284 = !DILocation(line: 1903, column: 5, scope: !8279)
!8285 = !DILocation(line: 1903, column: 29, scope: !8279)
!8286 = !DILocation(line: 1904, column: 1, scope: !8270)
!8287 = distinct !DISubprogram(name: "VEC_gimple_base_replace", scope: !11, file: !11, line: 33, type: !8288, scopeLine: 33, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8290)
!8288 = !DISubroutineType(types: !8289)
!8289 = !{!7, !6874, !17, !7}
!8290 = !{!8291, !8292, !8293, !8294}
!8291 = !DILocalVariable(name: "vec_", arg: 1, scope: !8287, file: !11, line: 33, type: !6874)
!8292 = !DILocalVariable(name: "ix_", arg: 2, scope: !8287, file: !11, line: 33, type: !17)
!8293 = !DILocalVariable(name: "obj_", arg: 3, scope: !8287, file: !11, line: 33, type: !7)
!8294 = !DILocalVariable(name: "old_obj_", scope: !8287, file: !11, line: 33, type: !7)
!8295 = !DILocation(line: 0, scope: !8287)
!8296 = !DILocation(line: 33, column: 1, scope: !8287)
!8297 = distinct !DISubprogram(name: "gimple_set_op", scope: !11, file: !11, line: 1663, type: !8298, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !1754, retainedNodes: !8300)
!8298 = !DISubroutineType(types: !8299)
!8299 = !{null, !7, !17, !326}
!8300 = !{!8301, !8302, !8303}
!8301 = !DILocalVariable(name: "gs", arg: 1, scope: !8297, file: !11, line: 1663, type: !7)
!8302 = !DILocalVariable(name: "i", arg: 2, scope: !8297, file: !11, line: 1663, type: !17)
!8303 = !DILocalVariable(name: "op", arg: 3, scope: !8297, file: !11, line: 1663, type: !326)
!8304 = !DILocation(line: 0, scope: !8297)
!8305 = !DILocation(line: 1665, column: 3, scope: !8297)
!8306 = !DILocation(line: 1671, column: 3, scope: !8297)
!8307 = !DILocation(line: 1671, column: 22, scope: !8297)
!8308 = !DILocation(line: 1672, column: 1, scope: !8297)
